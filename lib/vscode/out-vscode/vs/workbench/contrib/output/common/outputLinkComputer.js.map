{"version":3,"sources":["fake","file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src/vs/base/common/extpath.ts","file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src/vs/base/common/network.ts","file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src/vs/base/common/resources.ts","file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src/vs/workbench/contrib/output/common/outputLinkComputer.ts"],"names":[],"mappings":"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","file":"outputLinkComputer.js","sourcesContent":["}).call(this);","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isWindows } from 'vs/base/common/platform';\nimport { startsWithIgnoreCase, equalsIgnoreCase, rtrim } from 'vs/base/common/strings';\nimport { CharCode } from 'vs/base/common/charCode';\nimport { sep, posix, isAbsolute, join, normalize } from 'vs/base/common/path';\nimport { isNumber } from 'vs/base/common/types';\n\nexport function isPathSeparator(code: number) {\n\treturn code === CharCode.Slash || code === CharCode.Backslash;\n}\n\n/**\n * Takes a Windows OS path and changes backward slashes to forward slashes.\n * This should only be done for OS paths from Windows (or user provided paths potentially from Windows).\n * Using it on a Linux or MaxOS path might change it.\n */\nexport function toSlashes(osPath: string) {\n\treturn osPath.replace(/[\\\\/]/g, posix.sep);\n}\n\n/**\n * Computes the _root_ this path, like `getRoot('c:\\files') === c:\\`,\n * `getRoot('files:///files/path') === files:///`,\n * or `getRoot('\\\\server\\shares\\path') === \\\\server\\shares\\`\n */\nexport function getRoot(path: string, sep: string = posix.sep): string {\n\tif (!path) {\n\t\treturn '';\n\t}\n\n\tconst len = path.length;\n\tconst firstLetter = path.charCodeAt(0);\n\tif (isPathSeparator(firstLetter)) {\n\t\tif (isPathSeparator(path.charCodeAt(1))) {\n\t\t\t// UNC candidate \\\\localhost\\shares\\ddd\n\t\t\t//               ^^^^^^^^^^^^^^^^^^^\n\t\t\tif (!isPathSeparator(path.charCodeAt(2))) {\n\t\t\t\tlet pos = 3;\n\t\t\t\tconst start = pos;\n\t\t\t\tfor (; pos < len; pos++) {\n\t\t\t\t\tif (isPathSeparator(path.charCodeAt(pos))) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (start !== pos && !isPathSeparator(path.charCodeAt(pos + 1))) {\n\t\t\t\t\tpos += 1;\n\t\t\t\t\tfor (; pos < len; pos++) {\n\t\t\t\t\t\tif (isPathSeparator(path.charCodeAt(pos))) {\n\t\t\t\t\t\t\treturn path.slice(0, pos + 1) // consume this separator\n\t\t\t\t\t\t\t\t.replace(/[\\\\/]/g, sep);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// /user/far\n\t\t// ^\n\t\treturn sep;\n\n\t} else if (isWindowsDriveLetter(firstLetter)) {\n\t\t// check for windows drive letter c:\\ or c:\n\n\t\tif (path.charCodeAt(1) === CharCode.Colon) {\n\t\t\tif (isPathSeparator(path.charCodeAt(2))) {\n\t\t\t\t// C:\\fff\n\t\t\t\t// ^^^\n\t\t\t\treturn path.slice(0, 2) + sep;\n\t\t\t} else {\n\t\t\t\t// C:\n\t\t\t\t// ^^\n\t\t\t\treturn path.slice(0, 2);\n\t\t\t}\n\t\t}\n\t}\n\n\t// check for URI\n\t// scheme://authority/path\n\t// ^^^^^^^^^^^^^^^^^^^\n\tlet pos = path.indexOf('://');\n\tif (pos !== -1) {\n\t\tpos += 3; // 3 -> \"://\".length\n\t\tfor (; pos < len; pos++) {\n\t\t\tif (isPathSeparator(path.charCodeAt(pos))) {\n\t\t\t\treturn path.slice(0, pos + 1); // consume this separator\n\t\t\t}\n\t\t}\n\t}\n\n\treturn '';\n}\n\n/**\n * Check if the path follows this pattern: `\\\\hostname\\sharename`.\n *\n * @see https://msdn.microsoft.com/en-us/library/gg465305.aspx\n * @return A boolean indication if the path is a UNC path, on none-windows\n * always false.\n */\nexport function isUNC(path: string): boolean {\n\tif (!isWindows) {\n\t\t// UNC is a windows concept\n\t\treturn false;\n\t}\n\n\tif (!path || path.length < 5) {\n\t\t// at least \\\\a\\b\n\t\treturn false;\n\t}\n\n\tlet code = path.charCodeAt(0);\n\tif (code !== CharCode.Backslash) {\n\t\treturn false;\n\t}\n\tcode = path.charCodeAt(1);\n\tif (code !== CharCode.Backslash) {\n\t\treturn false;\n\t}\n\tlet pos = 2;\n\tconst start = pos;\n\tfor (; pos < path.length; pos++) {\n\t\tcode = path.charCodeAt(pos);\n\t\tif (code === CharCode.Backslash) {\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (start === pos) {\n\t\treturn false;\n\t}\n\tcode = path.charCodeAt(pos + 1);\n\tif (isNaN(code) || code === CharCode.Backslash) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\n// Reference: https://en.wikipedia.org/wiki/Filename\nconst WINDOWS_INVALID_FILE_CHARS = /[\\\\/:\\*\\?\"<>\\|]/g;\nconst UNIX_INVALID_FILE_CHARS = /[\\\\/]/g;\nconst WINDOWS_FORBIDDEN_NAMES = /^(con|prn|aux|clock\\$|nul|lpt[0-9]|com[0-9])(\\.(.*?))?$/i;\nexport function isValidBasename(name: string | null | undefined, isWindowsOS: boolean = isWindows): boolean {\n\tconst invalidFileChars = isWindowsOS ? WINDOWS_INVALID_FILE_CHARS : UNIX_INVALID_FILE_CHARS;\n\n\tif (!name || name.length === 0 || /^\\s+$/.test(name)) {\n\t\treturn false; // require a name that is not just whitespace\n\t}\n\n\tinvalidFileChars.lastIndex = 0; // the holy grail of software development\n\tif (invalidFileChars.test(name)) {\n\t\treturn false; // check for certain invalid file characters\n\t}\n\n\tif (isWindowsOS && WINDOWS_FORBIDDEN_NAMES.test(name)) {\n\t\treturn false; // check for certain invalid file names\n\t}\n\n\tif (name === '.' || name === '..') {\n\t\treturn false; // check for reserved values\n\t}\n\n\tif (isWindowsOS && name[name.length - 1] === '.') {\n\t\treturn false; // Windows: file cannot end with a \".\"\n\t}\n\n\tif (isWindowsOS && name.length !== name.trim().length) {\n\t\treturn false; // Windows: file cannot end with a whitespace\n\t}\n\n\tif (name.length > 255) {\n\t\treturn false; // most file systems do not allow files > 255 length\n\t}\n\n\treturn true;\n}\n\nexport function isEqual(pathA: string, pathB: string, ignoreCase?: boolean): boolean {\n\tconst identityEquals = (pathA === pathB);\n\tif (!ignoreCase || identityEquals) {\n\t\treturn identityEquals;\n\t}\n\n\tif (!pathA || !pathB) {\n\t\treturn false;\n\t}\n\n\treturn equalsIgnoreCase(pathA, pathB);\n}\n\nexport function isEqualOrParent(base: string, parentCandidate: string, ignoreCase?: boolean, separator = sep): boolean {\n\tif (base === parentCandidate) {\n\t\treturn true;\n\t}\n\n\tif (!base || !parentCandidate) {\n\t\treturn false;\n\t}\n\n\tif (parentCandidate.length > base.length) {\n\t\treturn false;\n\t}\n\n\tif (ignoreCase) {\n\t\tconst beginsWith = startsWithIgnoreCase(base, parentCandidate);\n\t\tif (!beginsWith) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (parentCandidate.length === base.length) {\n\t\t\treturn true; // same path, different casing\n\t\t}\n\n\t\tlet sepOffset = parentCandidate.length;\n\t\tif (parentCandidate.charAt(parentCandidate.length - 1) === separator) {\n\t\t\tsepOffset--; // adjust the expected sep offset in case our candidate already ends in separator character\n\t\t}\n\n\t\treturn base.charAt(sepOffset) === separator;\n\t}\n\n\tif (parentCandidate.charAt(parentCandidate.length - 1) !== separator) {\n\t\tparentCandidate += separator;\n\t}\n\n\treturn base.indexOf(parentCandidate) === 0;\n}\n\nexport function isWindowsDriveLetter(char0: number): boolean {\n\treturn char0 >= CharCode.A && char0 <= CharCode.Z || char0 >= CharCode.a && char0 <= CharCode.z;\n}\n\nexport function sanitizeFilePath(candidate: string, cwd: string): string {\n\n\t// Special case: allow to open a drive letter without trailing backslash\n\tif (isWindows && candidate.endsWith(':')) {\n\t\tcandidate += sep;\n\t}\n\n\t// Ensure absolute\n\tif (!isAbsolute(candidate)) {\n\t\tcandidate = join(cwd, candidate);\n\t}\n\n\t// Ensure normalized\n\tcandidate = normalize(candidate);\n\n\t// Ensure no trailing slash/backslash\n\tif (isWindows) {\n\t\tcandidate = rtrim(candidate, sep);\n\n\t\t// Special case: allow to open drive root ('C:\\')\n\t\tif (candidate.endsWith(':')) {\n\t\t\tcandidate += sep;\n\t\t}\n\n\t} else {\n\t\tcandidate = rtrim(candidate, sep);\n\n\t\t// Special case: allow to open root ('/')\n\t\tif (!candidate) {\n\t\t\tcandidate = sep;\n\t\t}\n\t}\n\n\treturn candidate;\n}\n\nexport function isRootOrDriveLetter(path: string): boolean {\n\tconst pathNormalized = normalize(path);\n\n\tif (isWindows) {\n\t\tif (path.length > 3) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn hasDriveLetter(pathNormalized) &&\n\t\t\t(path.length === 2 || pathNormalized.charCodeAt(2) === CharCode.Backslash);\n\t}\n\n\treturn pathNormalized === posix.sep;\n}\n\nexport function hasDriveLetter(path: string): boolean {\n\tif (isWindows) {\n\t\treturn isWindowsDriveLetter(path.charCodeAt(0)) && path.charCodeAt(1) === CharCode.Colon;\n\t}\n\n\treturn false;\n}\n\nexport function getDriveLetter(path: string): string | undefined {\n\treturn hasDriveLetter(path) ? path[0] : undefined;\n}\n\nexport function indexOfPath(path: string, candidate: string, ignoreCase?: boolean): number {\n\tif (candidate.length > path.length) {\n\t\treturn -1;\n\t}\n\n\tif (path === candidate) {\n\t\treturn 0;\n\t}\n\n\tif (ignoreCase) {\n\t\tpath = path.toLowerCase();\n\t\tcandidate = candidate.toLowerCase();\n\t}\n\n\treturn path.indexOf(candidate);\n}\n\nexport interface IPathWithLineAndColumn {\n\tpath: string;\n\tline?: number;\n\tcolumn?: number;\n}\n\nexport function parseLineAndColumnAware(rawPath: string): IPathWithLineAndColumn {\n\tconst segments = rawPath.split(':'); // C:\\file.txt:<line>:<column>\n\n\tlet path: string | undefined = undefined;\n\tlet line: number | undefined = undefined;\n\tlet column: number | undefined = undefined;\n\n\tsegments.forEach(segment => {\n\t\tconst segmentAsNumber = Number(segment);\n\t\tif (!isNumber(segmentAsNumber)) {\n\t\t\tpath = !!path ? [path, segment].join(':') : segment; // a colon can well be part of a path (e.g. C:\\...)\n\t\t} else if (line === undefined) {\n\t\t\tline = segmentAsNumber;\n\t\t} else if (column === undefined) {\n\t\t\tcolumn = segmentAsNumber;\n\t\t}\n\t});\n\n\tif (!path) {\n\t\tthrow new Error('Format for `--goto` should be: `FILE:LINE(:COLUMN)`');\n\t}\n\n\treturn {\n\t\tpath,\n\t\tline: line !== undefined ? line : undefined,\n\t\tcolumn: column !== undefined ? column : line !== undefined ? 1 : undefined // if we have a line, make sure column is also set\n\t};\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport * as platform from 'vs/base/common/platform';\n\nexport namespace Schemas {\n\n\t/**\n\t * A schema that is used for models that exist in memory\n\t * only and that have no correspondence on a server or such.\n\t */\n\texport const inMemory = 'inmemory';\n\n\t/**\n\t * A schema that is used for setting files\n\t */\n\texport const vscode = 'vscode';\n\n\t/**\n\t * A schema that is used for internal private files\n\t */\n\texport const internal = 'private';\n\n\t/**\n\t * A walk-through document.\n\t */\n\texport const walkThrough = 'walkThrough';\n\n\t/**\n\t * An embedded code snippet.\n\t */\n\texport const walkThroughSnippet = 'walkThroughSnippet';\n\n\texport const http = 'http';\n\n\texport const https = 'https';\n\n\texport const file = 'file';\n\n\texport const mailto = 'mailto';\n\n\texport const untitled = 'untitled';\n\n\texport const data = 'data';\n\n\texport const command = 'command';\n\n\texport const vscodeRemote = 'vscode-remote';\n\n\texport const vscodeRemoteResource = 'vscode-remote-resource';\n\n\texport const userData = 'vscode-userdata';\n\n\texport const vscodeCustomEditor = 'vscode-custom-editor';\n\n\texport const vscodeNotebook = 'vscode-notebook';\n\n\texport const vscodeNotebookCell = 'vscode-notebook-cell';\n\n\texport const vscodeNotebookCellMetadata = 'vscode-notebook-cell-metadata';\n\n\texport const vscodeSettings = 'vscode-settings';\n\n\texport const vscodeWorkspaceTrust = 'vscode-workspace-trust';\n\n\texport const vscodeTerminal = 'vscode-terminal';\n\n\texport const webviewPanel = 'webview-panel';\n\n\t/**\n\t * Scheme used for loading the wrapper html and script in webviews.\n\t */\n\texport const vscodeWebview = 'vscode-webview';\n\n\t/**\n\t * Scheme used for extension pages\n\t */\n\texport const extension = 'extension';\n\n\t/**\n\t * Scheme used as a replacement of `file` scheme to load\n\t * files with our custom protocol handler (desktop only).\n\t */\n\texport const vscodeFileResource = 'vscode-file';\n\n\t/**\n\t * Scheme used for temporary resources\n\t */\n\texport const tmp = 'tmp';\n}\n\nclass RemoteAuthoritiesImpl {\n\tprivate readonly _hosts: { [authority: string]: string | undefined; } = Object.create(null);\n\tprivate readonly _ports: { [authority: string]: number | undefined; } = Object.create(null);\n\tprivate readonly _connectionTokens: { [authority: string]: string | undefined; } = Object.create(null);\n\tprivate _preferredWebSchema: 'http' | 'https' = 'http';\n\tprivate _delegate: ((uri: URI) => URI) | null = null;\n\n\tsetPreferredWebSchema(schema: 'http' | 'https') {\n\t\tthis._preferredWebSchema = schema;\n\t}\n\n\tsetDelegate(delegate: (uri: URI) => URI): void {\n\t\tthis._delegate = delegate;\n\t}\n\n\tset(authority: string, host: string, port: number): void {\n\t\tthis._hosts[authority] = host;\n\t\tthis._ports[authority] = port;\n\t}\n\n\tsetConnectionToken(authority: string, connectionToken: string): void {\n\t\tthis._connectionTokens[authority] = connectionToken;\n\t}\n\n\trewrite(uri: URI): URI {\n\t\tif (this._delegate) {\n\t\t\treturn this._delegate(uri);\n\t\t}\n\t\tconst authority = uri.authority;\n\t\tlet host = this._hosts[authority];\n\t\tif (host && host.indexOf(':') !== -1) {\n\t\t\thost = `[${host}]`;\n\t\t}\n\t\t// const port = this._ports[authority];\n\t\tconst connectionToken = this._connectionTokens[authority];\n\t\tlet query = `path=${encodeURIComponent(uri.path)}`;\n\t\tif (typeof connectionToken === 'string') {\n\t\t\tquery += `&tkn=${encodeURIComponent(connectionToken)}`;\n\t\t}\n\t\t// NOTE@coder: Changed this to work against the current path.\n\t\treturn URI.from({\n\t\t\tscheme: platform.isWeb ? this._preferredWebSchema : Schemas.vscodeRemoteResource,\n\t\t\tauthority: window.location.host,\n\t\t\tpath: `${window.location.pathname.replace(/\\/+$/, '')}/vscode-remote-resource`,\n\t\t\tquery\n\t\t});\n\t}\n}\n\nexport const RemoteAuthorities = new RemoteAuthoritiesImpl();\n\nclass FileAccessImpl {\n\n\tprivate readonly FALLBACK_AUTHORITY = 'vscode-app';\n\n\t/**\n\t * Returns a URI to use in contexts where the browser is responsible\n\t * for loading (e.g. fetch()) or when used within the DOM.\n\t *\n\t * **Note:** use `dom.ts#asCSSUrl` whenever the URL is to be used in CSS context.\n\t */\n\tasBrowserUri(uri: URI): URI;\n\tasBrowserUri(moduleId: string, moduleIdToUrl: { toUrl(moduleId: string): string }, __forceCodeFileUri?: boolean): URI;\n\tasBrowserUri(uriOrModule: URI | string, moduleIdToUrl?: { toUrl(moduleId: string): string }, __forceCodeFileUri?: boolean): URI {\n\t\tconst uri = this.toUri(uriOrModule, moduleIdToUrl);\n\n\t\t// Handle remote URIs via `RemoteAuthorities`\n\t\tif (uri.scheme === Schemas.vscodeRemote) {\n\t\t\treturn RemoteAuthorities.rewrite(uri);\n\t\t}\n\n\t\t// Only convert the URI if we are in a native context and it has `file:` scheme\n\t\t// and we have explicitly enabled the conversion (sandbox, or VSCODE_BROWSER_CODE_LOADING)\n\t\tif (platform.isNative && (__forceCodeFileUri || platform.isPreferringBrowserCodeLoad) && uri.scheme === Schemas.file) {\n\t\t\treturn uri.with({\n\t\t\t\tscheme: Schemas.vscodeFileResource,\n\t\t\t\t// We need to provide an authority here so that it can serve\n\t\t\t\t// as origin for network and loading matters in chromium.\n\t\t\t\t// If the URI is not coming with an authority already, we\n\t\t\t\t// add our own\n\t\t\t\tauthority: uri.authority || this.FALLBACK_AUTHORITY,\n\t\t\t\tquery: null,\n\t\t\t\tfragment: null\n\t\t\t});\n\t\t}\n\n\t\treturn uri;\n\t}\n\n\t/**\n\t * Returns the `file` URI to use in contexts where node.js\n\t * is responsible for loading.\n\t */\n\tasFileUri(uri: URI): URI;\n\tasFileUri(moduleId: string, moduleIdToUrl: { toUrl(moduleId: string): string }): URI;\n\tasFileUri(uriOrModule: URI | string, moduleIdToUrl?: { toUrl(moduleId: string): string }): URI {\n\t\tconst uri = this.toUri(uriOrModule, moduleIdToUrl);\n\n\t\t// Only convert the URI if it is `vscode-file:` scheme\n\t\tif (uri.scheme === Schemas.vscodeFileResource) {\n\t\t\treturn uri.with({\n\t\t\t\tscheme: Schemas.file,\n\t\t\t\t// Only preserve the `authority` if it is different from\n\t\t\t\t// our fallback authority. This ensures we properly preserve\n\t\t\t\t// Windows UNC paths that come with their own authority.\n\t\t\t\tauthority: uri.authority !== this.FALLBACK_AUTHORITY ? uri.authority : null,\n\t\t\t\tquery: null,\n\t\t\t\tfragment: null\n\t\t\t});\n\t\t}\n\n\t\treturn uri;\n\t}\n\n\tprivate toUri(uriOrModule: URI | string, moduleIdToUrl?: { toUrl(moduleId: string): string }): URI {\n\t\tif (URI.isUri(uriOrModule)) {\n\t\t\treturn uriOrModule;\n\t\t}\n\n\t\treturn URI.parse(moduleIdToUrl!.toUrl(uriOrModule));\n\t}\n}\n\nexport const FileAccess = new FileAccessImpl();\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as extpath from 'vs/base/common/extpath';\nimport * as paths from 'vs/base/common/path';\nimport { URI, uriToFsPath } from 'vs/base/common/uri';\nimport { equalsIgnoreCase, compare as strCompare } from 'vs/base/common/strings';\nimport { Schemas } from 'vs/base/common/network';\nimport { isWindows, isLinux } from 'vs/base/common/platform';\nimport { CharCode } from 'vs/base/common/charCode';\n\nexport function originalFSPath(uri: URI): string {\n\treturn uriToFsPath(uri, true);\n}\n\n//#region IExtUri\n\nexport interface IExtUri {\n\n\t// --- identity\n\n\t/**\n\t * Compares two uris.\n\t *\n\t * @param uri1 Uri\n\t * @param uri2 Uri\n\t * @param ignoreFragment Ignore the fragment (defaults to `false`)\n\t */\n\tcompare(uri1: URI, uri2: URI, ignoreFragment?: boolean): number;\n\n\t/**\n\t * Tests whether two uris are equal\n\t *\n\t * @param uri1 Uri\n\t * @param uri2 Uri\n\t * @param ignoreFragment Ignore the fragment (defaults to `false`)\n\t */\n\tisEqual(uri1: URI | undefined, uri2: URI | undefined, ignoreFragment?: boolean): boolean;\n\n\t/**\n\t * Tests whether a `candidate` URI is a parent or equal of a given `base` URI.\n\t *\n\t * @param base A uri which is \"longer\" or at least same length as `parentCandidate`\n\t * @param parentCandidate A uri which is \"shorter\" or up to same length as `base`\n\t * @param ignoreFragment Ignore the fragment (defaults to `false`)\n\t */\n\tisEqualOrParent(base: URI, parentCandidate: URI, ignoreFragment?: boolean): boolean;\n\n\t/**\n\t * Creates a key from a resource URI to be used to resource comparison and for resource maps.\n\t * @see ResourceMap\n\t * @param uri Uri\n\t * @param ignoreFragment Ignore the fragment (defaults to `false`)\n\t */\n\tgetComparisonKey(uri: URI, ignoreFragment?: boolean): string;\n\n\t/**\n\t * Whether the casing of the path-component of the uri should be ignored.\n\t */\n\tignorePathCasing(uri: URI): boolean;\n\n\t// --- path math\n\n\tbasenameOrAuthority(resource: URI): string;\n\n\t/**\n\t * Returns the basename of the path component of an uri.\n\t * @param resource\n\t */\n\tbasename(resource: URI): string;\n\n\t/**\n\t * Returns the extension of the path component of an uri.\n\t * @param resource\n\t */\n\textname(resource: URI): string;\n\t/**\n\t * Return a URI representing the directory of a URI path.\n\t *\n\t * @param resource The input URI.\n\t * @returns The URI representing the directory of the input URI.\n\t */\n\tdirname(resource: URI): URI;\n\t/**\n\t * Join a URI path with path fragments and normalizes the resulting path.\n\t *\n\t * @param resource The input URI.\n\t * @param pathFragment The path fragment to add to the URI path.\n\t * @returns The resulting URI.\n\t */\n\tjoinPath(resource: URI, ...pathFragment: string[]): URI\n\t/**\n\t * Normalizes the path part of a URI: Resolves `.` and `..` elements with directory names.\n\t *\n\t * @param resource The URI to normalize the path.\n\t * @returns The URI with the normalized path.\n\t */\n\tnormalizePath(resource: URI): URI;\n\t/**\n\t *\n\t * @param from\n\t * @param to\n\t */\n\trelativePath(from: URI, to: URI): string | undefined;\n\t/**\n\t * Resolves an absolute or relative path against a base URI.\n\t * The path can be relative or absolute posix or a Windows path\n\t */\n\tresolvePath(base: URI, path: string): URI;\n\n\t// --- misc\n\n\t/**\n\t * Returns true if the URI path is absolute.\n\t */\n\tisAbsolutePath(resource: URI): boolean;\n\t/**\n\t * Tests whether the two authorities are the same\n\t */\n\tisEqualAuthority(a1: string, a2: string): boolean;\n\t/**\n\t * Returns true if the URI path has a trailing path separator\n\t */\n\thasTrailingPathSeparator(resource: URI, sep?: string): boolean;\n\t/**\n\t * Removes a trailing path separator, if there's one.\n\t * Important: Doesn't remove the first slash, it would make the URI invalid\n\t */\n\tremoveTrailingPathSeparator(resource: URI, sep?: string): URI;\n\t/**\n\t * Adds a trailing path separator to the URI if there isn't one already.\n\t * For example, c:\\ would be unchanged, but c:\\users would become c:\\users\\\n\t */\n\taddTrailingPathSeparator(resource: URI, sep?: string): URI;\n}\n\nexport class ExtUri implements IExtUri {\n\n\tconstructor(private _ignorePathCasing: (uri: URI) => boolean) { }\n\n\tcompare(uri1: URI, uri2: URI, ignoreFragment: boolean = false): number {\n\t\tif (uri1 === uri2) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn strCompare(this.getComparisonKey(uri1, ignoreFragment), this.getComparisonKey(uri2, ignoreFragment));\n\t}\n\n\tisEqual(uri1: URI | undefined, uri2: URI | undefined, ignoreFragment: boolean = false): boolean {\n\t\tif (uri1 === uri2) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!uri1 || !uri2) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this.getComparisonKey(uri1, ignoreFragment) === this.getComparisonKey(uri2, ignoreFragment);\n\t}\n\n\tgetComparisonKey(uri: URI, ignoreFragment: boolean = false): string {\n\t\treturn uri.with({\n\t\t\tpath: this._ignorePathCasing(uri) ? uri.path.toLowerCase() : undefined,\n\t\t\tfragment: ignoreFragment ? null : undefined\n\t\t}).toString();\n\t}\n\n\tignorePathCasing(uri: URI): boolean {\n\t\treturn this._ignorePathCasing(uri);\n\t}\n\n\tisEqualOrParent(base: URI, parentCandidate: URI, ignoreFragment: boolean = false): boolean {\n\t\tif (base.scheme === parentCandidate.scheme) {\n\t\t\tif (base.scheme === Schemas.file) {\n\t\t\t\treturn extpath.isEqualOrParent(originalFSPath(base), originalFSPath(parentCandidate), this._ignorePathCasing(base)) && base.query === parentCandidate.query && (ignoreFragment || base.fragment === parentCandidate.fragment);\n\t\t\t}\n\t\t\tif (isEqualAuthority(base.authority, parentCandidate.authority)) {\n\t\t\t\treturn extpath.isEqualOrParent(base.path, parentCandidate.path, this._ignorePathCasing(base), '/') && base.query === parentCandidate.query && (ignoreFragment || base.fragment === parentCandidate.fragment);\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t// --- path math\n\n\tjoinPath(resource: URI, ...pathFragment: string[]): URI {\n\t\treturn URI.joinPath(resource, ...pathFragment);\n\t}\n\n\tbasenameOrAuthority(resource: URI): string {\n\t\treturn basename(resource) || resource.authority;\n\t}\n\n\tbasename(resource: URI): string {\n\t\treturn paths.posix.basename(resource.path);\n\t}\n\n\textname(resource: URI): string {\n\t\treturn paths.posix.extname(resource.path);\n\t}\n\n\tdirname(resource: URI): URI {\n\t\tif (resource.path.length === 0) {\n\t\t\treturn resource;\n\t\t}\n\t\tlet dirname;\n\t\tif (resource.scheme === Schemas.file) {\n\t\t\tdirname = URI.file(paths.dirname(originalFSPath(resource))).path;\n\t\t} else {\n\t\t\tdirname = paths.posix.dirname(resource.path);\n\t\t\tif (resource.authority && dirname.length && dirname.charCodeAt(0) !== CharCode.Slash) {\n\t\t\t\tconsole.error(`dirname(\"${resource.toString})) resulted in a relative path`);\n\t\t\t\tdirname = '/'; // If a URI contains an authority component, then the path component must either be empty or begin with a CharCode.Slash (\"/\") character\n\t\t\t}\n\t\t}\n\t\treturn resource.with({\n\t\t\tpath: dirname\n\t\t});\n\t}\n\n\tnormalizePath(resource: URI): URI {\n\t\tif (!resource.path.length) {\n\t\t\treturn resource;\n\t\t}\n\t\tlet normalizedPath: string;\n\t\tif (resource.scheme === Schemas.file) {\n\t\t\tnormalizedPath = URI.file(paths.normalize(originalFSPath(resource))).path;\n\t\t} else {\n\t\t\tnormalizedPath = paths.posix.normalize(resource.path);\n\t\t}\n\t\treturn resource.with({\n\t\t\tpath: normalizedPath\n\t\t});\n\t}\n\n\trelativePath(from: URI, to: URI): string | undefined {\n\t\tif (from.scheme !== to.scheme || !isEqualAuthority(from.authority, to.authority)) {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (from.scheme === Schemas.file) {\n\t\t\tconst relativePath = paths.relative(originalFSPath(from), originalFSPath(to));\n\t\t\treturn isWindows ? extpath.toSlashes(relativePath) : relativePath;\n\t\t}\n\t\tlet fromPath = from.path || '/', toPath = to.path || '/';\n\t\tif (this._ignorePathCasing(from)) {\n\t\t\t// make casing of fromPath match toPath\n\t\t\tlet i = 0;\n\t\t\tfor (const len = Math.min(fromPath.length, toPath.length); i < len; i++) {\n\t\t\t\tif (fromPath.charCodeAt(i) !== toPath.charCodeAt(i)) {\n\t\t\t\t\tif (fromPath.charAt(i).toLowerCase() !== toPath.charAt(i).toLowerCase()) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfromPath = toPath.substr(0, i) + fromPath.substr(i);\n\t\t}\n\t\treturn paths.posix.relative(fromPath, toPath);\n\t}\n\n\tresolvePath(base: URI, path: string): URI {\n\t\tif (base.scheme === Schemas.file) {\n\t\t\tconst newURI = URI.file(paths.resolve(originalFSPath(base), path));\n\t\t\treturn base.with({\n\t\t\t\tauthority: newURI.authority,\n\t\t\t\tpath: newURI.path\n\t\t\t});\n\t\t}\n\t\tif (path.indexOf('/') === -1) { // no slashes? it's likely a Windows path\n\t\t\tpath = extpath.toSlashes(path);\n\t\t\tif (/^[a-zA-Z]:(\\/|$)/.test(path)) { // starts with a drive letter\n\t\t\t\tpath = '/' + path;\n\t\t\t}\n\t\t}\n\t\treturn base.with({\n\t\t\tpath: paths.posix.resolve(base.path, path)\n\t\t});\n\t}\n\n\t// --- misc\n\n\tisAbsolutePath(resource: URI): boolean {\n\t\treturn !!resource.path && resource.path[0] === '/';\n\t}\n\n\tisEqualAuthority(a1: string, a2: string) {\n\t\treturn a1 === a2 || equalsIgnoreCase(a1, a2);\n\t}\n\n\thasTrailingPathSeparator(resource: URI, sep: string = paths.sep): boolean {\n\t\tif (resource.scheme === Schemas.file) {\n\t\t\tconst fsp = originalFSPath(resource);\n\t\t\treturn fsp.length > extpath.getRoot(fsp).length && fsp[fsp.length - 1] === sep;\n\t\t} else {\n\t\t\tconst p = resource.path;\n\t\t\treturn (p.length > 1 && p.charCodeAt(p.length - 1) === CharCode.Slash) && !(/^[a-zA-Z]:(\\/$|\\\\$)/.test(resource.fsPath)); // ignore the slash at offset 0\n\t\t}\n\t}\n\n\tremoveTrailingPathSeparator(resource: URI, sep: string = paths.sep): URI {\n\t\t// Make sure that the path isn't a drive letter. A trailing separator there is not removable.\n\t\tif (hasTrailingPathSeparator(resource, sep)) {\n\t\t\treturn resource.with({ path: resource.path.substr(0, resource.path.length - 1) });\n\t\t}\n\t\treturn resource;\n\t}\n\n\taddTrailingPathSeparator(resource: URI, sep: string = paths.sep): URI {\n\t\tlet isRootSep: boolean = false;\n\t\tif (resource.scheme === Schemas.file) {\n\t\t\tconst fsp = originalFSPath(resource);\n\t\t\tisRootSep = ((fsp !== undefined) && (fsp.length === extpath.getRoot(fsp).length) && (fsp[fsp.length - 1] === sep));\n\t\t} else {\n\t\t\tsep = '/';\n\t\t\tconst p = resource.path;\n\t\t\tisRootSep = p.length === 1 && p.charCodeAt(p.length - 1) === CharCode.Slash;\n\t\t}\n\t\tif (!isRootSep && !hasTrailingPathSeparator(resource, sep)) {\n\t\t\treturn resource.with({ path: resource.path + '/' });\n\t\t}\n\t\treturn resource;\n\t}\n}\n\n\n/**\n * Unbiased utility that takes uris \"as they are\". This means it can be interchanged with\n * uri#toString() usages. The following is true\n * ```\n * assertEqual(aUri.toString() === bUri.toString(), exturi.isEqual(aUri, bUri))\n * ```\n */\nexport const extUri = new ExtUri(() => false);\n\n/**\n * BIASED utility that _mostly_ ignored the case of urs paths. ONLY use this util if you\n * understand what you are doing.\n *\n * This utility is INCOMPATIBLE with `uri.toString()`-usages and both CANNOT be used interchanged.\n *\n * When dealing with uris from files or documents, `extUri` (the unbiased friend)is sufficient\n * because those uris come from a \"trustworthy source\". When creating unknown uris it's always\n * better to use `IUriIdentityService` which exposes an `IExtUri`-instance which knows when path\n * casing matters.\n */\nexport const extUriBiasedIgnorePathCase = new ExtUri(uri => {\n\t// A file scheme resource is in the same platform as code, so ignore case for non linux platforms\n\t// Resource can be from another platform. Lowering the case as an hack. Should come from File system provider\n\treturn uri.scheme === Schemas.file ? !isLinux : true;\n});\n\n\n/**\n * BIASED utility that always ignores the casing of uris paths. ONLY use this util if you\n * understand what you are doing.\n *\n * This utility is INCOMPATIBLE with `uri.toString()`-usages and both CANNOT be used interchanged.\n *\n * When dealing with uris from files or documents, `extUri` (the unbiased friend)is sufficient\n * because those uris come from a \"trustworthy source\". When creating unknown uris it's always\n * better to use `IUriIdentityService` which exposes an `IExtUri`-instance which knows when path\n * casing matters.\n */\nexport const extUriIgnorePathCase = new ExtUri(_ => true);\n\nexport const isEqual = extUri.isEqual.bind(extUri);\nexport const isEqualOrParent = extUri.isEqualOrParent.bind(extUri);\nexport const getComparisonKey = extUri.getComparisonKey.bind(extUri);\nexport const basenameOrAuthority = extUri.basenameOrAuthority.bind(extUri);\nexport const basename = extUri.basename.bind(extUri);\nexport const extname = extUri.extname.bind(extUri);\nexport const dirname = extUri.dirname.bind(extUri);\nexport const joinPath = extUri.joinPath.bind(extUri);\nexport const normalizePath = extUri.normalizePath.bind(extUri);\nexport const relativePath = extUri.relativePath.bind(extUri);\nexport const resolvePath = extUri.resolvePath.bind(extUri);\nexport const isAbsolutePath = extUri.isAbsolutePath.bind(extUri);\nexport const isEqualAuthority = extUri.isEqualAuthority.bind(extUri);\nexport const hasTrailingPathSeparator = extUri.hasTrailingPathSeparator.bind(extUri);\nexport const removeTrailingPathSeparator = extUri.removeTrailingPathSeparator.bind(extUri);\nexport const addTrailingPathSeparator = extUri.addTrailingPathSeparator.bind(extUri);\n\n//#endregion\n\nexport function distinctParents<T>(items: T[], resourceAccessor: (item: T) => URI): T[] {\n\tconst distinctParents: T[] = [];\n\tfor (let i = 0; i < items.length; i++) {\n\t\tconst candidateResource = resourceAccessor(items[i]);\n\t\tif (items.some((otherItem, index) => {\n\t\t\tif (index === i) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn isEqualOrParent(candidateResource, resourceAccessor(otherItem));\n\t\t})) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tdistinctParents.push(items[i]);\n\t}\n\n\treturn distinctParents;\n}\n\n/**\n * Data URI related helpers.\n */\nexport namespace DataUri {\n\n\texport const META_DATA_LABEL = 'label';\n\texport const META_DATA_DESCRIPTION = 'description';\n\texport const META_DATA_SIZE = 'size';\n\texport const META_DATA_MIME = 'mime';\n\n\texport function parseMetaData(dataUri: URI): Map<string, string> {\n\t\tconst metadata = new Map<string, string>();\n\n\t\t// Given a URI of:  data:image/png;size:2313;label:SomeLabel;description:SomeDescription;base64,77+9UE5...\n\t\t// the metadata is: size:2313;label:SomeLabel;description:SomeDescription\n\t\tconst meta = dataUri.path.substring(dataUri.path.indexOf(';') + 1, dataUri.path.lastIndexOf(';'));\n\t\tmeta.split(';').forEach(property => {\n\t\t\tconst [key, value] = property.split(':');\n\t\t\tif (key && value) {\n\t\t\t\tmetadata.set(key, value);\n\t\t\t}\n\t\t});\n\n\t\t// Given a URI of:  data:image/png;size:2313;label:SomeLabel;description:SomeDescription;base64,77+9UE5...\n\t\t// the mime is: image/png\n\t\tconst mime = dataUri.path.substring(0, dataUri.path.indexOf(';'));\n\t\tif (mime) {\n\t\t\tmetadata.set(META_DATA_MIME, mime);\n\t\t}\n\n\t\treturn metadata;\n\t}\n}\n\nexport function toLocalResource(resource: URI, authority: string | undefined, localScheme: string): URI {\n\tif (authority) {\n\t\tlet path = resource.path;\n\t\tif (path && path[0] !== paths.posix.sep) {\n\t\t\tpath = paths.posix.sep + path;\n\t\t}\n\n\t\treturn resource.with({ scheme: localScheme, authority, path });\n\t}\n\n\treturn resource.with({ scheme: localScheme });\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IMirrorModel, IWorkerContext } from 'vs/editor/common/services/editorSimpleWorker';\nimport { ILink } from 'vs/editor/common/modes';\nimport { URI } from 'vs/base/common/uri';\nimport * as extpath from 'vs/base/common/extpath';\nimport * as resources from 'vs/base/common/resources';\nimport * as strings from 'vs/base/common/strings';\nimport { Range } from 'vs/editor/common/core/range';\nimport { isWindows } from 'vs/base/common/platform';\nimport { Schemas } from 'vs/base/common/network';\n\nexport interface ICreateData {\n\tworkspaceFolders: string[];\n}\n\nexport interface IResourceCreator {\n\ttoResource: (folderRelativePath: string) => URI | null;\n}\n\nexport class OutputLinkComputer {\n\tprivate patterns = new Map<URI /* folder uri */, RegExp[]>();\n\n\tconstructor(private ctx: IWorkerContext, createData: ICreateData) {\n\t\tthis.computePatterns(createData);\n\t}\n\n\tprivate computePatterns(createData: ICreateData): void {\n\n\t\t// Produce patterns for each workspace root we are configured with\n\t\t// This means that we will be able to detect links for paths that\n\t\t// contain any of the workspace roots as segments.\n\t\tconst workspaceFolders = createData.workspaceFolders\n\t\t\t.sort((resourceStrA, resourceStrB) => resourceStrB.length - resourceStrA.length) // longest paths first (for https://github.com/microsoft/vscode/issues/88121)\n\t\t\t.map(resourceStr => URI.parse(resourceStr));\n\n\t\tfor (const workspaceFolder of workspaceFolders) {\n\t\t\tconst patterns = OutputLinkComputer.createPatterns(workspaceFolder);\n\t\t\tthis.patterns.set(workspaceFolder, patterns);\n\t\t}\n\t}\n\n\tprivate getModel(uri: string): IMirrorModel | undefined {\n\t\tconst models = this.ctx.getMirrorModels();\n\n\t\treturn models.find(model => model.uri.toString() === uri);\n\t}\n\n\tcomputeLinks(uri: string): ILink[] {\n\t\tconst model = this.getModel(uri);\n\t\tif (!model) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst links: ILink[] = [];\n\t\tconst lines = strings.splitLines(model.getValue());\n\n\t\t// For each workspace root patterns\n\t\tfor (const [folderUri, folderPatterns] of this.patterns) {\n\t\t\tconst resourceCreator: IResourceCreator = {\n\t\t\t\ttoResource: (folderRelativePath: string): URI | null => {\n\t\t\t\t\tif (typeof folderRelativePath === 'string') {\n\t\t\t\t\t\treturn resources.joinPath(folderUri, folderRelativePath);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tfor (let i = 0, len = lines.length; i < len; i++) {\n\t\t\t\tlinks.push(...OutputLinkComputer.detectLinks(lines[i], i + 1, folderPatterns, resourceCreator));\n\t\t\t}\n\t\t}\n\n\t\treturn links;\n\t}\n\n\tstatic createPatterns(workspaceFolder: URI): RegExp[] {\n\t\tconst patterns: RegExp[] = [];\n\n\t\tconst workspaceFolderPath = workspaceFolder.scheme === Schemas.file ? workspaceFolder.fsPath : workspaceFolder.path;\n\t\tconst workspaceFolderVariants = [workspaceFolderPath];\n\t\tif (isWindows && workspaceFolder.scheme === Schemas.file) {\n\t\t\tworkspaceFolderVariants.push(extpath.toSlashes(workspaceFolderPath));\n\t\t}\n\n\t\tfor (const workspaceFolderVariant of workspaceFolderVariants) {\n\t\t\tconst validPathCharacterPattern = '[^\\\\s\\\\(\\\\):<>\"]';\n\t\t\tconst validPathCharacterOrSpacePattern = `(?:${validPathCharacterPattern}| ${validPathCharacterPattern})`;\n\t\t\tconst pathPattern = `${validPathCharacterOrSpacePattern}+\\\\.${validPathCharacterPattern}+`;\n\t\t\tconst strictPathPattern = `${validPathCharacterPattern}+`;\n\n\t\t\t// Example: /workspaces/express/server.js on line 8, column 13\n\t\t\tpatterns.push(new RegExp(strings.escapeRegExpCharacters(workspaceFolderVariant) + `(${pathPattern}) on line ((\\\\d+)(, column (\\\\d+))?)`, 'gi'));\n\n\t\t\t// Example: /workspaces/express/server.js:line 8, column 13\n\t\t\tpatterns.push(new RegExp(strings.escapeRegExpCharacters(workspaceFolderVariant) + `(${pathPattern}):line ((\\\\d+)(, column (\\\\d+))?)`, 'gi'));\n\n\t\t\t// Example: /workspaces/mankala/Features.ts(45): error\n\t\t\t// Example: /workspaces/mankala/Features.ts (45): error\n\t\t\t// Example: /workspaces/mankala/Features.ts(45,18): error\n\t\t\t// Example: /workspaces/mankala/Features.ts (45,18): error\n\t\t\t// Example: /workspaces/mankala/Features Special.ts (45,18): error\n\t\t\tpatterns.push(new RegExp(strings.escapeRegExpCharacters(workspaceFolderVariant) + `(${pathPattern})(\\\\s?\\\\((\\\\d+)(,(\\\\d+))?)\\\\)`, 'gi'));\n\n\t\t\t// Example: at /workspaces/mankala/Game.ts\n\t\t\t// Example: at /workspaces/mankala/Game.ts:336\n\t\t\t// Example: at /workspaces/mankala/Game.ts:336:9\n\t\t\tpatterns.push(new RegExp(strings.escapeRegExpCharacters(workspaceFolderVariant) + `(${strictPathPattern})(:(\\\\d+))?(:(\\\\d+))?`, 'gi'));\n\t\t}\n\n\t\treturn patterns;\n\t}\n\n\t/**\n\t * Detect links. Made static to allow for tests.\n\t */\n\tstatic detectLinks(line: string, lineIndex: number, patterns: RegExp[], resourceCreator: IResourceCreator): ILink[] {\n\t\tconst links: ILink[] = [];\n\n\t\tpatterns.forEach(pattern => {\n\t\t\tpattern.lastIndex = 0; // the holy grail of software development\n\n\t\t\tlet match: RegExpExecArray | null;\n\t\t\tlet offset = 0;\n\t\t\twhile ((match = pattern.exec(line)) !== null) {\n\n\t\t\t\t// Convert the relative path information to a resource that we can use in links\n\t\t\t\tconst folderRelativePath = strings.rtrim(match[1], '.').replace(/\\\\/g, '/'); // remove trailing \".\" that likely indicate end of sentence\n\t\t\t\tlet resourceString: string | undefined;\n\t\t\t\ttry {\n\t\t\t\t\tconst resource = resourceCreator.toResource(folderRelativePath);\n\t\t\t\t\tif (resource) {\n\t\t\t\t\t\tresourceString = resource.toString();\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tcontinue; // we might find an invalid URI and then we dont want to loose all other links\n\t\t\t\t}\n\n\t\t\t\t// Append line/col information to URI if matching\n\t\t\t\tif (match[3]) {\n\t\t\t\t\tconst lineNumber = match[3];\n\n\t\t\t\t\tif (match[5]) {\n\t\t\t\t\t\tconst columnNumber = match[5];\n\t\t\t\t\t\tresourceString = strings.format('{0}#{1},{2}', resourceString, lineNumber, columnNumber);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresourceString = strings.format('{0}#{1}', resourceString, lineNumber);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst fullMatch = strings.rtrim(match[0], '.'); // remove trailing \".\" that likely indicate end of sentence\n\n\t\t\t\tconst index = line.indexOf(fullMatch, offset);\n\t\t\t\toffset = index + fullMatch.length;\n\n\t\t\t\tconst linkRange = {\n\t\t\t\t\tstartColumn: index + 1,\n\t\t\t\t\tstartLineNumber: lineIndex,\n\t\t\t\t\tendColumn: index + 1 + fullMatch.length,\n\t\t\t\t\tendLineNumber: lineIndex\n\t\t\t\t};\n\n\t\t\t\tif (links.some(link => Range.areIntersectingOrTouching(link.range, linkRange))) {\n\t\t\t\t\treturn; // Do not detect duplicate links\n\t\t\t\t}\n\n\t\t\t\tlinks.push({\n\t\t\t\t\trange: linkRange,\n\t\t\t\t\turl: resourceString\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn links;\n\t}\n}\n\nexport function create(ctx: IWorkerContext, createData: ICreateData): OutputLinkComputer {\n\treturn new OutputLinkComputer(ctx, createData);\n}\n"]}