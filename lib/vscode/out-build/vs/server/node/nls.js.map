{"version":3,"file":"nls.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/server/node/nls.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\nimport * as util from 'util';\nimport { FileAccess } from 'vs/base/common/network';\nimport * as lp from 'vs/base/node/languagePacks';\nimport product from 'vs/platform/product/common/product';\nimport { Translations } from 'vs/workbench/services/extensions/common/extensionPoints';\n\nconst configurations = new Map<string, Promise<lp.NLSConfiguration>>();\nconst metadataPath = path.join(FileAccess.asFileUri('', require).fsPath, 'nls.metadata.json');\n\nexport const isInternalConfiguration = (config: lp.NLSConfiguration): config is lp.InternalNLSConfiguration => {\n\treturn config && !!(<lp.InternalNLSConfiguration>config)._languagePackId;\n};\n\nconst DefaultConfiguration = {\n\tlocale: 'en',\n\tavailableLanguages: {},\n};\n\nexport const getNlsConfiguration = async (locale: string, userDataPath: string): Promise<lp.NLSConfiguration> => {\n\tconst id = `${locale}: ${userDataPath}`;\n\tif (!configurations.has(id)) {\n\t\tconfigurations.set(id, new Promise(async (resolve) =>  {\n\t\t\tconst config = product.commit && await util.promisify(fs.exists)(metadataPath)\n\t\t\t\t? await lp.getNLSConfiguration(product.commit, userDataPath, metadataPath, locale)\n\t\t\t\t: DefaultConfiguration;\n\t\t\tif (isInternalConfiguration(config)) {\n\t\t\t\tconfig._languagePackSupport = true;\n\t\t\t}\n\t\t\t// If the configuration has no results keep trying since code-server\n\t\t\t// doesn't restart when a language is installed so this result would\n\t\t\t// persist (the plugin might not be installed yet or something).\n\t\t\tif (config.locale !== 'en' && config.locale !== 'en-us' && Object.keys(config.availableLanguages).length === 0) {\n\t\t\t\tconfigurations.delete(id);\n\t\t\t}\n\t\t\tresolve(config);\n\t\t}));\n\t}\n\treturn configurations.get(id)!;\n};\n\nexport const getTranslations = async (locale: string, userDataPath: string): Promise<Translations> => {\n\tconst config = await getNlsConfiguration(locale, userDataPath);\n\tif (isInternalConfiguration(config)) {\n\t\ttry {\n\t\t\treturn JSON.parse(await util.promisify(fs.readFile)(config._translationsConfigFile, 'utf8'));\n\t\t} catch (error) { /* Nothing yet. */}\n\t}\n\treturn {};\n};\n\nexport const getLocaleFromConfig = async (userDataPath: string): Promise<string> => {\n\tconst files = ['locale.json', 'argv.json'];\n\tfor (let i = 0; i < files.length; ++i) {\n\t\ttry {\n\t\t\tconst localeConfigUri = path.join(userDataPath, 'User', files[i]);\n\t\t\tconst content = stripComments(await util.promisify(fs.readFile)(localeConfigUri, 'utf8'));\n\t\t\treturn JSON.parse(content).locale;\n\t\t} catch (error) { /* Ignore. */ }\n\t}\n\treturn 'en';\n};\n\n// Taken from src/main.js in the main VS Code source.\nconst stripComments = (content: string): string => {\n\tconst regexp = /('(?:[^\\\\']*(?:\\\\.)?)*')|('(?:[^\\\\']*(?:\\\\.)?)*')|(\\/\\*(?:\\r?\\n|.)*?\\*\\/)|(\\/{2,}.*?(?:(?:\\r?\\n)|$))/g;\n\n\treturn content.replace(regexp, (match, _m1, _m2, m3, m4) => {\n\t\t// Only one of m1, m2, m3, m4 matches\n\t\tif (m3) {\n\t\t\t// A block comment. Replace with nothing\n\t\t\treturn '';\n\t\t} else if (m4) {\n\t\t\t// A line comment. If it ends in \\r?\\n then keep it.\n\t\t\tconst length_1 = m4.length;\n\t\t\tif (length_1 > 2 && m4[length_1 - 1] === '\\n') {\n\t\t\t\treturn m4[length_1 - 2] === '\\r' ? '\\r\\n' : '\\n';\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t} else {\n\t\t\t// We match a string\n\t\t\treturn match;\n\t\t}\n\t});\n};\n"]}