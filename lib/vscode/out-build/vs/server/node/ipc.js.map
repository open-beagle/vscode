{"version":3,"file":"ipc.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/server/node/ipc.ts"],"names":[],"mappings":";;;;IAGA,IAAK,cAGJ;IAHD,WAAK,cAAc;QAClB,mCAAiB,CAAA;QACjB,qCAAmB,CAAA;IACpB,CAAC,EAHI,cAAc,KAAd,cAAc,QAGlB;IASD,MAAM,OAAO;QAAb;YACoB,eAAU,GAAG,IAAI,eAAO,EAAW,CAAC;YACvC,cAAS,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC;QAyCnD,CAAC;QAvCO,SAAS,CAAC,KAAuB;YACvC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACtC,MAAM,MAAM,GAAG,KAAK,IAAI,OAAO,CAAC;gBAChC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE;oBACjB,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;iBAChD;gBACD,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,OAAO,EAAE,EAAE;oBAChC,IAAI,OAAO,KAAK,KAAK,CAAC,CAAC,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC,CAAC,cAAc,CAAC,SAAS,EAAE;wBAC9E,MAAM,CAAC,kBAAkB,EAAE,CAAC;wBAC5B,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;wBACzD,IAAI,KAAK,EAAE;4BACV,MAAM,CAAC,IAAK,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;yBACvC;wBACD,OAAO,EAAE,CAAC;qBACV;gBACF,CAAC,CAAC,CAAC;gBACH,IAAI,KAAK,EAAE;oBACV,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;oBAC5B,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE;wBAC3B,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,6BAA6B,IAAI,EAAE,CAAC,CAAC;wBAC5D,KAAa,CAAC,IAAI,GAAG,IAAI,CAAC;wBAC3B,MAAM,CAAC,KAAK,CAAC,CAAC;oBACf,CAAC,CAAC,CAAC;iBACH;qBAAM;oBACN,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;iBACxC;YACF,CAAC,CAAC,CAAC;QACJ,CAAC;QAEM,QAAQ,CAAC,OAAe;YAC9B,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,CAAC,CAAC;QAC1C,CAAC;QAEO,IAAI,CAAC,OAAgB;YAC5B,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE;gBAClB,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;aACxD;YACD,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACvB,CAAC;KACD;IAEY,QAAA,OAAO,GAAG,IAAI,OAAO,EAAE,CAAC","sourcesContent":["import * as cp from 'child_process';\nimport { Emitter } from 'vs/base/common/event';\n\nenum ControlMessage {\n\tokToChild = 'ok>',\n\tokFromChild = 'ok<',\n}\n\ninterface RelaunchMessage {\n\ttype: 'relaunch';\n\tversion: string;\n}\n\nexport type Message = RelaunchMessage;\n\nclass IpcMain {\n\tprotected readonly _onMessage = new Emitter<Message>();\n\tpublic readonly onMessage = this._onMessage.event;\n\n\tpublic handshake(child?: cp.ChildProcess): Promise<void> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst target = child || process;\n\t\t\tif (!target.send) {\n\t\t\t\tthrow new Error('Not spawned with IPC enabled');\n\t\t\t}\n\t\t\ttarget.on('message', (message) => {\n\t\t\t\tif (message === child ? ControlMessage.okFromChild : ControlMessage.okToChild) {\n\t\t\t\t\ttarget.removeAllListeners();\n\t\t\t\t\ttarget.on('message', (msg) => this._onMessage.fire(msg));\n\t\t\t\t\tif (child) {\n\t\t\t\t\t\ttarget.send!(ControlMessage.okToChild);\n\t\t\t\t\t}\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (child) {\n\t\t\t\tchild.once('error', reject);\n\t\t\t\tchild.once('exit', (code) => {\n\t\t\t\t\tconst error = new Error(`Unexpected exit with code ${code}`);\n\t\t\t\t\t(error as any).code = code;\n\t\t\t\t\treject(error);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\ttarget.send(ControlMessage.okFromChild);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic relaunch(version: string): void {\n\t\tthis.send({ type: 'relaunch', version });\n\t}\n\n\tprivate send(message: Message): void {\n\t\tif (!process.send) {\n\t\t\tthrow new Error('Not a child process with IPC enabled');\n\t\t}\n\t\tprocess.send(message);\n\t}\n}\n\nexport const ipcMain = new IpcMain();\n"]}