{"version":3,"file":"connection.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/server/node/connection.ts"],"names":[],"mappings":"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","sourcesContent":["import { field, Logger, logger } from '@coder/logger';\nimport * as cp from 'child_process';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { Emitter } from 'vs/base/common/event';\nimport { FileAccess } from 'vs/base/common/network';\nimport { INativeEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IRemoteExtensionHostStartParams } from 'vs/platform/remote/common/remoteAgentConnection';\nimport { getNlsConfiguration } from 'vs/server/node/nls';\nimport { Protocol } from 'vs/server/node/protocol';\nimport { IExtHostReadyMessage } from 'vs/workbench/services/extensions/common/extensionHostProtocol';\n\nexport abstract class Connection {\n\tprivate readonly _onClose = new Emitter<void>();\n\t/**\n\t * Fire when the connection is closed (not just disconnected). This should\n\t * only happen when the connection is offline and old or has an error.\n\t */\n\tpublic readonly onClose = this._onClose.event;\n\tprivate disposed = false;\n\tprivate _offline: number | undefined;\n\n\tprotected readonly logger: Logger;\n\n\tpublic constructor(\n\t\tprotected readonly protocol: Protocol,\n\t\tpublic readonly name: string,\n\t) {\n\t\tthis.logger = logger.named(\n\t\t\tthis.name,\n\t\t\tfield('token', this.protocol.options.reconnectionToken),\n\t\t);\n\n\t\tthis.logger.debug('Connecting...');\n\t\tthis.onClose(() => this.logger.debug('Closed'));\n\t}\n\n\tpublic get offline(): number | undefined {\n\t\treturn this._offline;\n\t}\n\n\tpublic reconnect(protocol: Protocol): void {\n\t\tthis.logger.debug('Reconnecting...');\n\t\tthis._offline = undefined;\n\t\tthis.doReconnect(protocol);\n\t}\n\n\tpublic dispose(reason?: string): void {\n\t\tthis.logger.debug('Disposing...', field('reason', reason));\n\t\tif (!this.disposed) {\n\t\t\tthis.disposed = true;\n\t\t\tthis.doDispose();\n\t\t\tthis._onClose.fire();\n\t\t}\n\t}\n\n\tprotected setOffline(): void {\n\t\tthis.logger.debug('Disconnected');\n\t\tif (!this._offline) {\n\t\t\tthis._offline = Date.now();\n\t\t}\n\t}\n\n\t/**\n\t * Set up the connection on a new socket.\n\t */\n\tprotected abstract doReconnect(protcol: Protocol): void;\n\n\t/**\n\t * Dispose/destroy everything permanently.\n\t */\n\tprotected abstract doDispose(): void;\n}\n\n/**\n * Used for all the IPC channels.\n */\nexport class ManagementConnection extends Connection {\n\tpublic constructor(protocol: Protocol) {\n\t\tsuper(protocol, 'management');\n\t\tprotocol.onDidDispose(() => this.dispose()); // Explicit close.\n\t\tprotocol.onSocketClose(() => this.setOffline()); // Might reconnect.\n\t\tprotocol.sendMessage({ type: 'ok' });\n\t}\n\n\tprotected doDispose(): void {\n\t\tthis.protocol.destroy();\n\t}\n\n\tprotected doReconnect(protocol: Protocol): void {\n\t\tprotocol.sendMessage({ type: 'ok' });\n\t\tthis.protocol.beginAcceptReconnection(protocol.getSocket(), protocol.readEntireBuffer());\n\t\tthis.protocol.endAcceptReconnection();\n\t\tprotocol.dispose();\n\t}\n}\n\ninterface DisconnectedMessage {\n\ttype: 'VSCODE_EXTHOST_DISCONNECTED';\n}\n\ninterface ConsoleMessage {\n\ttype: '__$console';\n\t// See bootstrap-fork.js#L135.\n\tseverity: 'log' | 'warn' | 'error';\n\targuments: any[];\n}\n\ntype ExtHostMessage = DisconnectedMessage | ConsoleMessage | IExtHostReadyMessage;\n\nexport class ExtensionHostConnection extends Connection {\n\tprivate process?: cp.ChildProcess;\n\n\tpublic constructor(\n\t\tprotocol: Protocol,\n\t\tprivate readonly params: IRemoteExtensionHostStartParams,\n\t\tprivate readonly environment: INativeEnvironmentService,\n\t) {\n\t\tsuper(protocol, 'exthost');\n\n\t\tprotocol.sendMessage({ debugPort: this.params.port });\n\t\tconst buffer = protocol.readEntireBuffer();\n\t\tconst inflateBytes = protocol.inflateBytes;\n\t\tprotocol.dispose();\n\t\tprotocol.getUnderlyingSocket().pause();\n\n\t\tthis.spawn(buffer, inflateBytes).then((p) => this.process = p);\n\t}\n\n\tprotected doDispose(): void {\n\t\tthis.protocol.destroy();\n\t\tif (this.process) {\n\t\t\tthis.process.kill();\n\t\t}\n\t}\n\n\tprotected doReconnect(protocol: Protocol): void {\n\t\tprotocol.sendMessage({ debugPort: this.params.port });\n\t\tconst buffer = protocol.readEntireBuffer();\n\t\tconst inflateBytes = protocol.inflateBytes;\n\t\tprotocol.dispose();\n\t\tprotocol.getUnderlyingSocket().pause();\n\t\tthis.protocol.setSocket(protocol.getSocket());\n\n\t\tthis.sendInitMessage(buffer, inflateBytes);\n\t}\n\n\tprivate sendInitMessage(buffer: VSBuffer, inflateBytes: Uint8Array | undefined): void {\n\t\tif (!this.process) {\n\t\t\tthrow new Error('Tried to initialize VS Code before spawning');\n\t\t}\n\n\t\tthis.logger.debug('Sending socket');\n\n\t\t// TODO: Do something with the debug port.\n\t\tthis.process.send({\n\t\t\ttype: 'VSCODE_EXTHOST_IPC_SOCKET',\n\t\t\tinitialDataChunk: Buffer.from(buffer.buffer).toString('base64'),\n\t\t\tskipWebSocketFrames: this.protocol.options.skipWebSocketFrames,\n\t\t\tpermessageDeflate: this.protocol.options.permessageDeflate,\n\t\t\tinflateBytes: inflateBytes ? Buffer.from(inflateBytes).toString('base64') : undefined,\n\t\t}, this.protocol.getUnderlyingSocket());\n\t}\n\n\tprivate async spawn(buffer: VSBuffer, inflateBytes: Uint8Array | undefined): Promise<cp.ChildProcess> {\n\t\tthis.logger.debug('Getting NLS configuration...');\n\t\tconst config = await getNlsConfiguration(this.params.language, this.environment.userDataPath);\n\t\tthis.logger.debug('Spawning extension host...');\n\t\tconst proc = cp.fork(\n\t\t\tFileAccess.asFileUri('bootstrap-fork', require).fsPath,\n\t\t\t// While not technically necessary, makes it easier to tell which process\n\t\t\t// bootstrap-fork is executing. Can also do pkill -f extensionHost\n\t\t\t// Other spawns in the VS Code codebase behave similarly.\n\t\t\t[ '--type=extensionHost' ],\n\t\t\t{\n\t\t\t\tenv: {\n\t\t\t\t\t...process.env,\n\t\t\t\t\tVSCODE_AMD_ENTRYPOINT: 'vs/workbench/services/extensions/node/extensionHostProcess',\n\t\t\t\t\tVSCODE_PIPE_LOGGING: 'true',\n\t\t\t\t\tVSCODE_VERBOSE_LOGGING: 'true',\n\t\t\t\t\tVSCODE_EXTHOST_WILL_SEND_SOCKET: 'true',\n\t\t\t\t\tVSCODE_HANDLES_UNCAUGHT_ERRORS: 'true',\n\t\t\t\t\tVSCODE_LOG_STACK: 'false',\n\t\t\t\t\tVSCODE_LOG_LEVEL: process.env.LOG_LEVEL,\n\t\t\t\t\tVSCODE_NLS_CONFIG: JSON.stringify(config),\n\t\t\t\t\tVSCODE_PARENT_PID: String(process.pid),\n\t\t\t\t},\n\t\t\t\tsilent: true,\n\t\t\t},\n\t\t);\n\n\t\tproc.on('error', (error) => {\n\t\t\tthis.logger.error('Exited unexpectedly', field('error', error));\n\t\t\tthis.dispose();\n\t\t});\n\t\tproc.on('exit', (code) => {\n\t\t\tthis.logger.debug('Exited', field('code', code));\n\t\t\tthis.dispose();\n\t\t});\n\t\tif (proc.stdout && proc.stderr) {\n\t\t\tproc.stdout.setEncoding('utf8').on('data', (d) => this.logger.info(d));\n\t\t\tproc.stderr.setEncoding('utf8').on('data', (d) => this.logger.error(d));\n\t\t}\n\n\t\tproc.on('message', (event: ExtHostMessage) => {\n\t\t\tswitch (event.type) {\n\t\t\t\tcase '__$console':\n\t\t\t\t\tconst fn = this.logger[event.severity === 'log' ? 'info' : event.severity];\n\t\t\t\t\tif (fn) {\n\t\t\t\t\t\tfn.bind(this.logger)('console', field('arguments', event.arguments));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.logger.error('Unexpected severity', field('event', event));\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'VSCODE_EXTHOST_DISCONNECTED':\n\t\t\t\t\tthis.logger.debug('Got disconnected message');\n\t\t\t\t\tthis.setOffline();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'VSCODE_EXTHOST_IPC_READY':\n\t\t\t\t\tthis.logger.debug('Handshake completed');\n\t\t\t\t\tthis.sendInitMessage(buffer, inflateBytes);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthis.logger.error('Unexpected message', field('event', event));\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\n\t\tthis.logger.debug('Waiting for handshake...');\n\t\treturn proc;\n\t}\n}\n"]}