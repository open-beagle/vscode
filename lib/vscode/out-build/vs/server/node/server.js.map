{"version":3,"file":"server.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/server/node/server.ts"],"names":[],"mappings":"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","sourcesContent":["import { promises as fs } from 'fs';\nimport * as net from 'net';\nimport { hostname, release } from 'os';\nimport * as path from 'path';\nimport { Emitter } from 'vs/base/common/event';\nimport { Schemas } from 'vs/base/common/network';\nimport { URI } from 'vs/base/common/uri';\nimport { getMachineId } from 'vs/base/node/id';\nimport { ClientConnectionEvent, IPCServer, IServerChannel, ProxyChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { LogsDataCleaner } from 'vs/code/electron-browser/sharedProcess/contrib/logsDataCleaner';\nimport { main } from 'vs/code/node/cliProcessMain';\nimport { Query, VscodeOptions, WorkbenchOptions } from 'vs/ipc';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ConfigurationService } from 'vs/platform/configuration/common/configurationService';\nimport { ExtensionHostDebugBroadcastChannel } from 'vs/platform/debug/common/extensionHostDebugIpc';\nimport { NativeParsedArgs } from 'vs/platform/environment/common/argv';\nimport { IEnvironmentService, INativeEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { NativeEnvironmentService } from 'vs/platform/environment/node/environmentService';\nimport { ExtensionGalleryService } from 'vs/platform/extensionManagement/common/extensionGalleryService';\nimport { IExtensionGalleryService, IExtensionManagementService } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { ExtensionManagementChannel } from 'vs/platform/extensionManagement/common/extensionManagementIpc';\nimport { ExtensionManagementService } from 'vs/platform/extensionManagement/node/extensionManagementService';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { FileService } from 'vs/platform/files/common/fileService';\nimport { DiskFileSystemProvider } from 'vs/platform/files/node/diskFileSystemProvider';\nimport { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';\nimport { InstantiationService } from 'vs/platform/instantiation/common/instantiationService';\nimport { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';\nimport { ILocalizationsService } from 'vs/platform/localizations/common/localizations';\nimport { LocalizationsService } from 'vs/platform/localizations/node/localizations';\nimport { ConsoleLogger, getLogLevel, ILoggerService, ILogService, MultiplexLogService } from 'vs/platform/log/common/log';\nimport { LogLevelChannel } from 'vs/platform/log/common/logIpc';\nimport { LoggerService } from 'vs/platform/log/node/loggerService';\nimport { SpdLogLogger } from 'vs/platform/log/node/spdlogLog';\nimport product from 'vs/platform/product/common/product';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { ConnectionType, ConnectionTypeRequest } from 'vs/platform/remote/common/remoteAgentConnection';\nimport { RemoteAgentConnectionContext } from 'vs/platform/remote/common/remoteAgentEnvironment';\nimport { IRequestService } from 'vs/platform/request/common/request';\nimport { RequestChannel } from 'vs/platform/request/common/requestIpc';\nimport { RequestService } from 'vs/platform/request/node/requestService';\nimport ErrorTelemetry from 'vs/platform/telemetry/browser/errorTelemetry';\nimport { resolveCommonProperties } from 'vs/platform/telemetry/common/commonProperties';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { TelemetryLogAppender } from 'vs/platform/telemetry/common/telemetryLogAppender';\nimport { TelemetryService } from 'vs/platform/telemetry/common/telemetryService';\nimport { combinedAppender, NullTelemetryService } from 'vs/platform/telemetry/common/telemetryUtils';\nimport { AppInsightsAppender } from 'vs/platform/telemetry/node/appInsightsAppender';\nimport { TelemetryChannel } from 'vs/server/common/telemetry';\nimport { ExtensionEnvironmentChannel, FileProviderChannel, TerminalProviderChannel } from 'vs/server/node/channel';\nimport { Connection, ExtensionHostConnection, ManagementConnection } from 'vs/server/node/connection';\nimport { TelemetryClient } from 'vs/server/node/insights';\nimport { logger } from 'vs/server/node/logger';\nimport { getLocaleFromConfig, getNlsConfiguration } from 'vs/server/node/nls';\nimport { Protocol } from 'vs/server/node/protocol';\nimport { getUriTransformer } from 'vs/server/node/util';\nimport { REMOTE_TERMINAL_CHANNEL_NAME } from 'vs/workbench/contrib/terminal/common/remoteTerminalChannel';\nimport { REMOTE_FILE_SYSTEM_CHANNEL_NAME } from 'vs/workbench/services/remote/common/remoteAgentFileSystemChannel';\nimport { RemoteExtensionLogFileName } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { PtyHostService } from 'vs/platform/terminal/node/ptyHostService';\n\nconst commit = product.commit || 'development';\n\nexport class Vscode {\n\tpublic readonly _onDidClientConnect = new Emitter<ClientConnectionEvent>();\n\tpublic readonly onDidClientConnect = this._onDidClientConnect.event;\n\tprivate readonly ipc = new IPCServer<RemoteAgentConnectionContext>(this.onDidClientConnect);\n\n\tprivate readonly maxExtraOfflineConnections = 0;\n\tprivate readonly connections = new Map<ConnectionType, Map<string, Connection>>();\n\n\tprivate readonly services = new ServiceCollection();\n\tprivate servicesPromise?: Promise<void>;\n\n\tpublic async cli(args: NativeParsedArgs): Promise<void> {\n\t\treturn main(args);\n\t}\n\n\tpublic async initialize(options: VscodeOptions): Promise<WorkbenchOptions> {\n\t\tconst transformer = getUriTransformer(options.remoteAuthority);\n\t\tif (!this.servicesPromise) {\n\t\t\tthis.servicesPromise = this.initializeServices(options.args);\n\t\t}\n\t\tawait this.servicesPromise;\n\t\tconst environment = this.services.get(IEnvironmentService) as INativeEnvironmentService;\n\t\tconst startPath = options.startPath;\n\t\tconst parseUrl = (url: string): URI => {\n\t\t\t// This might be a fully-specified URL or just a path.\n\t\t\ttry {\n\t\t\t\treturn URI.parse(url, true);\n\t\t\t} catch (error) {\n\t\t\t\treturn URI.from({\n\t\t\t\t\tscheme: Schemas.vscodeRemote,\n\t\t\t\t\tauthority: options.remoteAuthority,\n\t\t\t\t\tpath: url,\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t\treturn {\n\t\t\tworkbenchWebConfiguration: {\n\t\t\t\tworkspaceUri: startPath && startPath.workspace ? parseUrl(startPath.url) : undefined,\n\t\t\t\tfolderUri: startPath && !startPath.workspace ? parseUrl(startPath.url) : undefined,\n\t\t\t\tremoteAuthority: options.remoteAuthority,\n\t\t\t\tlogLevel: getLogLevel(environment),\n\t\t\t\tworkspaceProvider: {\n\t\t\t\t\tpayload: [\n\t\t\t\t\t\t['userDataPath', environment.userDataPath],\n\t\t\t\t\t\t['enableProposedApi', JSON.stringify(options.args['enable-proposed-api'] || [])]\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t},\n\t\t\tremoteUserDataUri: transformer.transformOutgoing(URI.file(environment.userDataPath)),\n\t\t\tproductConfiguration: product,\n\t\t\tnlsConfiguration: await getNlsConfiguration(environment.args.locale || await getLocaleFromConfig(environment.userDataPath), environment.userDataPath),\n\t\t\tcommit,\n\t\t};\n\t}\n\n\tpublic async handleWebSocket(socket: net.Socket, query: Query, permessageDeflate: boolean): Promise<true> {\n\t\tif (!query.reconnectionToken) {\n\t\t\tthrow new Error('Reconnection token is missing from query parameters');\n\t\t}\n\t\tconst protocol = new Protocol(socket, {\n\t\t\treconnectionToken: <string>query.reconnectionToken,\n\t\t\treconnection: query.reconnection === 'true',\n\t\t\tskipWebSocketFrames: query.skipWebSocketFrames === 'true',\n\t\t\tpermessageDeflate,\n\t\t});\n\t\ttry {\n\t\t\tawait this.connect(await protocol.handshake(), protocol);\n\t\t} catch (error) {\n\t\t\tprotocol.destroy(error.message);\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate async connect(message: ConnectionTypeRequest, protocol: Protocol): Promise<void> {\n\t\tif (product.commit && message.commit !== product.commit) {\n\t\t\tlogger.warn(`Version mismatch (${message.commit} instead of ${product.commit})`);\n\t\t}\n\n\t\tswitch (message.desiredConnectionType) {\n\t\t\tcase ConnectionType.ExtensionHost:\n\t\t\tcase ConnectionType.Management:\n\t\t\t\t// Initialize connection map for this type of connection.\n\t\t\t\tif (!this.connections.has(message.desiredConnectionType)) {\n\t\t\t\t\tthis.connections.set(message.desiredConnectionType, new Map());\n\t\t\t\t}\n\t\t\t\tconst connections = this.connections.get(message.desiredConnectionType)!;\n\n\t\t\t\tconst token = protocol.options.reconnectionToken;\n\t\t\t\tlet connection = connections.get(token);\n\t\t\t\tif (protocol.options.reconnection && connection) {\n\t\t\t\t\treturn connection.reconnect(protocol);\n\t\t\t\t}\n\n\t\t\t\t// This probably means the process restarted so the session was lost\n\t\t\t\t// while the browser remained open.\n\t\t\t\tif (protocol.options.reconnection) {\n\t\t\t\t\tthrow new Error(`Unable to reconnect; session no longer exists (${token})`);\n\t\t\t\t}\n\n\t\t\t\t// This will probably never happen outside a chance collision.\n\t\t\t\tif (connection) {\n\t\t\t\t\tthrow new Error('Unable to connect; token is already in use');\n\t\t\t\t}\n\n\t\t\t\t// Now that the initial exchange has completed we can create the actual\n\t\t\t\t// connection on top of the protocol then send it to whatever uses it.\n\t\t\t\tif (message.desiredConnectionType === ConnectionType.Management) {\n\t\t\t\t\t// The management connection is used by firing onDidClientConnect\n\t\t\t\t\t// which makes the IPC server become aware of the connection.\n\t\t\t\t\tconnection = new ManagementConnection(protocol);\n\t\t\t\t\tthis._onDidClientConnect.fire({\n\t\t\t\t\t\tprotocol,\n\t\t\t\t\t\tonDidClientDisconnect: connection.onClose,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\t// The extension host connection is used by spawning an extension host\n\t\t\t\t\t// and passing the socket into it.\n\t\t\t\t\tconnection = new ExtensionHostConnection(\n\t\t\t\t\t\tprotocol,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlanguage: 'en',\n\t\t\t\t\t\t\t...message.args,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tthis.services.get(IEnvironmentService) as INativeEnvironmentService,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tconnections.set(token, connection);\n\t\t\t\tconnection.onClose(() => connections.delete(token));\n\n\t\t\t\tthis.disposeOldOfflineConnections(connections);\n\t\t\t\tlogger.debug(`${connections.size} active ${connection.name} connection(s)`);\n\t\t\t\tbreak;\n\t\t\tcase ConnectionType.Tunnel:\n\t\t\t\treturn protocol.tunnel();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unrecognized connection type ${message.desiredConnectionType}`);\n\t\t}\n\t}\n\n\tprivate disposeOldOfflineConnections(connections: Map<string, Connection>): void {\n\t\tconst offline = Array.from(connections.values())\n\t\t\t.filter((connection) => typeof connection.offline !== 'undefined');\n\t\tfor (let i = 0, max = offline.length - this.maxExtraOfflineConnections; i < max; ++i) {\n\t\t\toffline[i].dispose('old');\n\t\t}\n\t}\n\n\t// References:\n\t// ../../electron-browser/sharedProcess/sharedProcessMain.ts#L148\n\t// ../../../code/electron-main/app.ts\n\tprivate async initializeServices(args: NativeParsedArgs): Promise<void> {\n\t\tconst productService = { _serviceBrand: undefined, ...product };\n\t\tconst environmentService = new NativeEnvironmentService(args, productService);\n\n\t\tawait Promise.all([\n\t\t\tenvironmentService.extensionsPath,\n\t\t\tenvironmentService.logsPath,\n\t\t\tenvironmentService.globalStorageHome.fsPath,\n\t\t\tenvironmentService.workspaceStorageHome.fsPath,\n\t\t\t...environmentService.extraExtensionPaths,\n\t\t\t...environmentService.extraBuiltinExtensionPaths,\n\t\t].map((p) => fs.mkdir(p, { recursive: true }).catch((error) => {\n\t\t\tlogger.warn(error.message || error);\n\t\t})));\n\n\t\tconst logService = new MultiplexLogService([\n\t\t\tnew ConsoleLogger(getLogLevel(environmentService)),\n\t\t\tnew SpdLogLogger(RemoteExtensionLogFileName, path.join(environmentService.logsPath, `${RemoteExtensionLogFileName}.log`), false, getLogLevel(environmentService))\n\t\t]);\n\t\tconst fileService = new FileService(logService);\n\t\tfileService.registerProvider(Schemas.file, new DiskFileSystemProvider(logService));\n\n\t\tconst loggerService = new LoggerService(logService, fileService);\n\n\t\tconst piiPaths = [\n\t\t\tpath.join(environmentService.userDataPath, 'clp'), // Language packs.\n\t\t\tenvironmentService.appRoot,\n\t\t\tenvironmentService.extensionsPath,\n\t\t\tenvironmentService.builtinExtensionsPath,\n\t\t\t...environmentService.extraExtensionPaths,\n\t\t\t...environmentService.extraBuiltinExtensionPaths,\n\t\t];\n\n\t\tthis.ipc.registerChannel('logger', new LogLevelChannel(logService));\n\t\tthis.ipc.registerChannel(ExtensionHostDebugBroadcastChannel.ChannelName, new ExtensionHostDebugBroadcastChannel());\n\n\t\tthis.services.set(ILogService, logService);\n\t\tthis.services.set(IEnvironmentService, environmentService);\n\t\tthis.services.set(INativeEnvironmentService, environmentService);\n\t\tthis.services.set(ILoggerService, loggerService);\n\n\t\tconst configurationService = new ConfigurationService(environmentService.settingsResource, fileService);\n\t\tawait configurationService.initialize();\n\t\tthis.services.set(IConfigurationService, configurationService);\n\n\t\tthis.services.set(IRequestService, new SyncDescriptor(RequestService));\n\t\tthis.services.set(IFileService, fileService);\n\t\tthis.services.set(IProductService, productService);\n\n\t\tconst machineId = await getMachineId();\n\n\t\tawait new Promise((resolve) => {\n\t\t\tconst instantiationService = new InstantiationService(this.services);\n\n\t\t\tinstantiationService.invokeFunction((accessor) => {\n\t\t\t\tinstantiationService.createInstance(LogsDataCleaner);\n\n\t\t\t\tlet telemetryService: ITelemetryService;\n\t\t\t\tif (!environmentService.disableTelemetry) {\n\t\t\t\t\ttelemetryService = new TelemetryService({\n\t\t\t\t\t\tappender: combinedAppender(\n\t\t\t\t\t\t\tnew AppInsightsAppender('code-server', null, () => new TelemetryClient() as any),\n\t\t\t\t\t\t\tnew TelemetryLogAppender(accessor.get(ILoggerService), environmentService)\n\t\t\t\t\t\t),\n\t\t\t\t\t\tsendErrorTelemetry: true,\n\t\t\t\t\t\tcommonProperties: resolveCommonProperties(\n\t\t\t\t\t\t\tfileService, release(), hostname(), process.arch, commit, product.version, machineId,\n\t\t\t\t\t\t\tundefined, environmentService.installSourcePath, 'code-server',\n\t\t\t\t\t\t),\n\t\t\t\t\t\tpiiPaths,\n\t\t\t\t\t}, configurationService);\n\t\t\t\t} else {\n\t\t\t\t\ttelemetryService = NullTelemetryService;\n\t\t\t\t}\n\n\t\t\t\tthis.services.set(ITelemetryService, telemetryService);\n\n\t\t\t\tthis.services.set(IExtensionManagementService, new SyncDescriptor(ExtensionManagementService));\n\t\t\t\tthis.services.set(IExtensionGalleryService, new SyncDescriptor(ExtensionGalleryService));\n\t\t\t\tthis.services.set(ILocalizationsService, new SyncDescriptor(LocalizationsService));\n\n\t\t\t\tthis.ipc.registerChannel('extensions', new ExtensionManagementChannel(\n\t\t\t\t\taccessor.get(IExtensionManagementService),\n\t\t\t\t\t(context) => getUriTransformer(context.remoteAuthority),\n\t\t\t\t));\n\t\t\t\tthis.ipc.registerChannel('remoteextensionsenvironment', new ExtensionEnvironmentChannel(\n\t\t\t\t\tenvironmentService, logService, telemetryService, '',\n\t\t\t\t));\n\t\t\t\tthis.ipc.registerChannel('request', new RequestChannel(accessor.get(IRequestService)));\n\t\t\t\tthis.ipc.registerChannel('telemetry', new TelemetryChannel(telemetryService));\n\t\t\t\tthis.ipc.registerChannel('localizations', <IServerChannel<any>>ProxyChannel.fromService(accessor.get(ILocalizationsService)));\n\t\t\t\tthis.ipc.registerChannel(REMOTE_FILE_SYSTEM_CHANNEL_NAME, new FileProviderChannel(environmentService, logService));\n\n\t\t\t\tconst ptyHostService = new PtyHostService(logService, telemetryService);\n\t\t\t\tthis.ipc.registerChannel(REMOTE_TERMINAL_CHANNEL_NAME, new TerminalProviderChannel(logService, ptyHostService));\n\n\t\t\t\tresolve(new ErrorTelemetry(telemetryService));\n\t\t\t});\n\t\t});\n\t}\n}\n"]}