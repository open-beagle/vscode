{"version":3,"file":"insights.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/server/node/insights.ts"],"names":[],"mappings":"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","sourcesContent":["import * as appInsights from 'applicationinsights';\nimport * as https from 'https';\nimport * as http from 'http';\nimport * as os from 'os';\n\nclass Channel {\n\tpublic get _sender() {\n\t\tthrow new Error('unimplemented');\n\t}\n\tpublic get _buffer() {\n\t\tthrow new Error('unimplemented');\n\t}\n\n\tpublic setUseDiskRetryCaching(): void {\n\t\tthrow new Error('unimplemented');\n\t}\n\tpublic send(): void {\n\t\tthrow new Error('unimplemented');\n\t}\n\tpublic triggerSend(): void {\n\t\tthrow new Error('unimplemented');\n\t}\n}\n\nexport class TelemetryClient  {\n\tpublic context: any = undefined;\n\tpublic commonProperties: any = undefined;\n\tpublic config: any = {};\n\n\tpublic channel: any = new Channel();\n\n\tpublic addTelemetryProcessor(): void {\n\t\tthrow new Error('unimplemented');\n\t}\n\n\tpublic clearTelemetryProcessors(): void {\n\t\tthrow new Error('unimplemented');\n\t}\n\n\tpublic runTelemetryProcessors(): void {\n\t\tthrow new Error('unimplemented');\n\t}\n\n\tpublic trackTrace(): void {\n\t\tthrow new Error('unimplemented');\n\t}\n\n\tpublic trackMetric(): void {\n\t\tthrow new Error('unimplemented');\n\t}\n\n\tpublic trackException(): void {\n\t\tthrow new Error('unimplemented');\n\t}\n\n\tpublic trackRequest(): void {\n\t\tthrow new Error('unimplemented');\n\t}\n\n\tpublic trackDependency(): void {\n\t\tthrow new Error('unimplemented');\n\t}\n\n\tpublic track(): void {\n\t\tthrow new Error('unimplemented');\n\t}\n\n\tpublic trackNodeHttpRequestSync(): void {\n\t\tthrow new Error('unimplemented');\n\t}\n\n\tpublic trackNodeHttpRequest(): void {\n\t\tthrow new Error('unimplemented');\n\t}\n\n\tpublic trackNodeHttpDependency(): void {\n\t\tthrow new Error('unimplemented');\n\t}\n\n\tpublic trackEvent(options: appInsights.Contracts.EventTelemetry): void {\n\t\tif (!options.properties) {\n\t\t\toptions.properties = {};\n\t\t}\n\t\tif (!options.measurements) {\n\t\t\toptions.measurements = {};\n\t\t}\n\n\t\ttry {\n\t\t\tconst cpus = os.cpus();\n\t\t\toptions.measurements.cores = cpus.length;\n\t\t\toptions.properties['common.cpuModel'] = cpus[0].model;\n\t\t} catch (error) {}\n\n\t\ttry {\n\t\t\toptions.measurements.memoryFree = os.freemem();\n\t\t\toptions.measurements.memoryTotal = os.totalmem();\n\t\t} catch (error) {}\n\n\t\ttry {\n\t\t\toptions.properties['common.shell'] = os.userInfo().shell;\n\t\t\toptions.properties['common.release'] = os.release();\n\t\t\toptions.properties['common.arch'] = os.arch();\n\t\t} catch (error) {}\n\n\t\ttry {\n\t\t\tconst url = process.env.TELEMETRY_URL || 'https://v1.telemetry.coder.com/track';\n\t\t\tconst request = (/^http:/.test(url) ? http : https).request(url, {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t});\n\t\t\trequest.on('error', () => { /* We don't care. */ });\n\t\t\trequest.write(JSON.stringify(options));\n\t\t\trequest.end();\n\t\t} catch (error) {}\n\t}\n\n\tpublic flush(options: { callback: (v: string) => void }): void {\n\t\tif (options.callback) {\n\t\t\toptions.callback('');\n\t\t}\n\t}\n}\n"]}