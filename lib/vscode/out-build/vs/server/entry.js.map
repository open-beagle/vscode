{"version":3,"file":"entry.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/server/entry.ts"],"names":[],"mappings":"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","sourcesContent":["import { field } from '@coder/logger';\nimport { setUnexpectedErrorHandler } from 'vs/base/common/errors';\nimport * as proxyAgent from 'vs/base/node/proxy_agent';\nimport { CodeServerMessage, VscodeMessage } from 'vs/ipc';\nimport { logger } from 'vs/server/node/logger';\nimport { enableCustomMarketplace } from 'vs/server/node/marketplace';\nimport { Vscode } from 'vs/server/node/server';\n\nsetUnexpectedErrorHandler((error) => {\n\tlogger.warn('Uncaught error', field('error', error instanceof Error ? error.message : error));\n});\nenableCustomMarketplace();\nproxyAgent.monkeyPatch(true);\n\n/**\n * Ensure we control when the process exits.\n */\nconst exit = process.exit;\nprocess.exit = function(code?: number) {\n\tlogger.warn(`process.exit() was prevented: ${code || 'unknown code'}.`);\n} as (code?: number) => never;\n\n// Kill VS Code if the parent process dies.\nif (typeof process.env.CODE_SERVER_PARENT_PID !== 'undefined') {\n\tconst parentPid = parseInt(process.env.CODE_SERVER_PARENT_PID, 10);\n\tsetInterval(() => {\n\t\ttry {\n\t\t\tprocess.kill(parentPid, 0); // Throws an exception if the process doesn't exist anymore.\n\t\t} catch (e) {\n\t\t\texit();\n\t\t}\n\t}, 5000);\n} else {\n\tlogger.error('no parent process');\n\texit(1);\n}\n\nconst vscode = new Vscode();\nconst send = (message: VscodeMessage): void => {\n\tif (!process.send) {\n\t\tthrow new Error('not spawned with IPC');\n\t}\n\tprocess.send(message);\n};\n\n// Wait for the init message then start up VS Code. Subsequent messages will\n// return new workbench options without starting a new instance.\nprocess.on('message', async (message: CodeServerMessage, socket) => {\n\tlogger.debug('got message from code-server', field('type', message.type));\n\tlogger.trace('code-server message content', field('message', message));\n\tswitch (message.type) {\n\t\tcase 'init':\n\t\t\ttry {\n\t\t\t\tconst options = await vscode.initialize(message.options);\n\t\t\t\tsend({ type: 'options', id: message.id, options });\n\t\t\t} catch (error) {\n\t\t\t\tlogger.error(error.message);\n\t\t\t\tlogger.error(error.stack);\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'cli':\n\t\t\ttry {\n\t\t\t\tawait vscode.cli(message.args);\n\t\t\t\texit(0);\n\t\t\t} catch (error) {\n\t\t\t\tlogger.error(error.message);\n\t\t\t\tlogger.error(error.stack);\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'socket':\n\t\t\tvscode.handleWebSocket(socket, message.query, message.permessageDeflate);\n\t\t\tbreak;\n\t}\n});\nif (!process.send) {\n\tlogger.error('not spawned with IPC');\n\texit(1);\n} else {\n\t// This lets the parent know the child is ready to receive messages.\n\tsend({ type: 'ready' });\n}\n"]}