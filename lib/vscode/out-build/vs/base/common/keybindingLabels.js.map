{"version":3,"sources":["vs/base/common/keybindingLabels.ts"],"names":[],"mappings":"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","file":"keybindingLabels.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { OperatingSystem } from 'vs/base/common/platform';\n\nexport interface ModifierLabels {\n\treadonly ctrlKey: string;\n\treadonly shiftKey: string;\n\treadonly altKey: string;\n\treadonly metaKey: string;\n\treadonly separator: string;\n}\n\nexport interface Modifiers {\n\treadonly ctrlKey: boolean;\n\treadonly shiftKey: boolean;\n\treadonly altKey: boolean;\n\treadonly metaKey: boolean;\n}\n\nexport interface KeyLabelProvider<T extends Modifiers> {\n\t(keybinding: T): string | null;\n}\n\nexport class ModifierLabelProvider {\n\n\tpublic readonly modifierLabels: ModifierLabels[];\n\n\tconstructor(mac: ModifierLabels, windows: ModifierLabels, linux: ModifierLabels = windows) {\n\t\tthis.modifierLabels = [null!]; // index 0 will never me accessed.\n\t\tthis.modifierLabels[OperatingSystem.Macintosh] = mac;\n\t\tthis.modifierLabels[OperatingSystem.Windows] = windows;\n\t\tthis.modifierLabels[OperatingSystem.Linux] = linux;\n\t}\n\n\tpublic toLabel<T extends Modifiers>(OS: OperatingSystem, parts: T[], keyLabelProvider: KeyLabelProvider<T>): string | null {\n\t\tif (parts.length === 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst result: string[] = [];\n\t\tfor (let i = 0, len = parts.length; i < len; i++) {\n\t\t\tconst part = parts[i];\n\t\t\tconst keyLabel = keyLabelProvider(part);\n\t\t\tif (keyLabel === null) {\n\t\t\t\t// this keybinding cannot be expressed...\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tresult[i] = _simpleAsString(part, keyLabel, this.modifierLabels[OS]);\n\t\t}\n\t\treturn result.join(' ');\n\t}\n}\n\n/**\n * A label provider that prints modifiers in a suitable format for displaying in the UI.\n */\nexport const UILabelProvider = new ModifierLabelProvider(\n\t{\n\t\tctrlKey: '⌃',\n\t\tshiftKey: '⇧',\n\t\taltKey: '⌥',\n\t\tmetaKey: '⌘',\n\t\tseparator: '',\n\t},\n\t{\n\t\tctrlKey: nls.localize({ key: 'ctrlKey', comment: ['This is the short form for the Control key on the keyboard'] }, \"Ctrl\"),\n\t\tshiftKey: nls.localize({ key: 'shiftKey', comment: ['This is the short form for the Shift key on the keyboard'] }, \"Shift\"),\n\t\taltKey: nls.localize({ key: 'altKey', comment: ['This is the short form for the Alt key on the keyboard'] }, \"Alt\"),\n\t\tmetaKey: nls.localize({ key: 'windowsKey', comment: ['This is the short form for the Windows key on the keyboard'] }, \"Windows\"),\n\t\tseparator: '+',\n\t},\n\t{\n\t\tctrlKey: nls.localize({ key: 'ctrlKey', comment: ['This is the short form for the Control key on the keyboard'] }, \"Ctrl\"),\n\t\tshiftKey: nls.localize({ key: 'shiftKey', comment: ['This is the short form for the Shift key on the keyboard'] }, \"Shift\"),\n\t\taltKey: nls.localize({ key: 'altKey', comment: ['This is the short form for the Alt key on the keyboard'] }, \"Alt\"),\n\t\tmetaKey: nls.localize({ key: 'superKey', comment: ['This is the short form for the Super key on the keyboard'] }, \"Super\"),\n\t\tseparator: '+',\n\t}\n);\n\n/**\n * A label provider that prints modifiers in a suitable format for ARIA.\n */\nexport const AriaLabelProvider = new ModifierLabelProvider(\n\t{\n\t\tctrlKey: nls.localize({ key: 'ctrlKey.long', comment: ['This is the long form for the Control key on the keyboard'] }, \"Control\"),\n\t\tshiftKey: nls.localize({ key: 'shiftKey.long', comment: ['This is the long form for the Shift key on the keyboard'] }, \"Shift\"),\n\t\taltKey: nls.localize({ key: 'altKey.long', comment: ['This is the long form for the Alt key on the keyboard'] }, \"Alt\"),\n\t\tmetaKey: nls.localize({ key: 'cmdKey.long', comment: ['This is the long form for the Command key on the keyboard'] }, \"Command\"),\n\t\tseparator: '+',\n\t},\n\t{\n\t\tctrlKey: nls.localize({ key: 'ctrlKey.long', comment: ['This is the long form for the Control key on the keyboard'] }, \"Control\"),\n\t\tshiftKey: nls.localize({ key: 'shiftKey.long', comment: ['This is the long form for the Shift key on the keyboard'] }, \"Shift\"),\n\t\taltKey: nls.localize({ key: 'altKey.long', comment: ['This is the long form for the Alt key on the keyboard'] }, \"Alt\"),\n\t\tmetaKey: nls.localize({ key: 'windowsKey.long', comment: ['This is the long form for the Windows key on the keyboard'] }, \"Windows\"),\n\t\tseparator: '+',\n\t},\n\t{\n\t\tctrlKey: nls.localize({ key: 'ctrlKey.long', comment: ['This is the long form for the Control key on the keyboard'] }, \"Control\"),\n\t\tshiftKey: nls.localize({ key: 'shiftKey.long', comment: ['This is the long form for the Shift key on the keyboard'] }, \"Shift\"),\n\t\taltKey: nls.localize({ key: 'altKey.long', comment: ['This is the long form for the Alt key on the keyboard'] }, \"Alt\"),\n\t\tmetaKey: nls.localize({ key: 'superKey.long', comment: ['This is the long form for the Super key on the keyboard'] }, \"Super\"),\n\t\tseparator: '+',\n\t}\n);\n\n/**\n * A label provider that prints modifiers in a suitable format for Electron Accelerators.\n * See https://github.com/electron/electron/blob/master/docs/api/accelerator.md\n */\nexport const ElectronAcceleratorLabelProvider = new ModifierLabelProvider(\n\t{\n\t\tctrlKey: 'Ctrl',\n\t\tshiftKey: 'Shift',\n\t\taltKey: 'Alt',\n\t\tmetaKey: 'Cmd',\n\t\tseparator: '+',\n\t},\n\t{\n\t\tctrlKey: 'Ctrl',\n\t\tshiftKey: 'Shift',\n\t\taltKey: 'Alt',\n\t\tmetaKey: 'Super',\n\t\tseparator: '+',\n\t}\n);\n\n/**\n * A label provider that prints modifiers in a suitable format for user settings.\n */\nexport const UserSettingsLabelProvider = new ModifierLabelProvider(\n\t{\n\t\tctrlKey: 'ctrl',\n\t\tshiftKey: 'shift',\n\t\taltKey: 'alt',\n\t\tmetaKey: 'cmd',\n\t\tseparator: '+',\n\t},\n\t{\n\t\tctrlKey: 'ctrl',\n\t\tshiftKey: 'shift',\n\t\taltKey: 'alt',\n\t\tmetaKey: 'win',\n\t\tseparator: '+',\n\t},\n\t{\n\t\tctrlKey: 'ctrl',\n\t\tshiftKey: 'shift',\n\t\taltKey: 'alt',\n\t\tmetaKey: 'meta',\n\t\tseparator: '+',\n\t}\n);\n\nfunction _simpleAsString(modifiers: Modifiers, key: string, labels: ModifierLabels): string {\n\tif (key === null) {\n\t\treturn '';\n\t}\n\n\tconst result: string[] = [];\n\n\t// translate modifier keys: Ctrl-Shift-Alt-Meta\n\tif (modifiers.ctrlKey) {\n\t\tresult.push(labels.ctrlKey);\n\t}\n\n\tif (modifiers.shiftKey) {\n\t\tresult.push(labels.shiftKey);\n\t}\n\n\tif (modifiers.altKey) {\n\t\tresult.push(labels.altKey);\n\t}\n\n\tif (modifiers.metaKey) {\n\t\tresult.push(labels.metaKey);\n\t}\n\n\t// the actual key\n\tif (key !== '') {\n\t\tresult.push(key);\n\t}\n\n\treturn result.join(labels.separator);\n}\n"]}