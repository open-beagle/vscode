{"version":3,"file":"sequence.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/common/sequence.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAoBhG,MAAa,QAAQ;QAArB;YAEU,aAAQ,GAAQ,EAAE,CAAC;YAEX,iBAAY,GAAG,IAAI,eAAO,EAAc,CAAC;YACjD,gBAAW,GAAsB,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;QAMnE,CAAC;QAJA,MAAM,CAAC,KAAa,EAAE,WAAmB,EAAE,WAAgB,EAAE;YAC5D,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAE,WAAW,EAAE,GAAG,QAAQ,CAAC,CAAC;YACtD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,WAAW,EAAE,QAAQ,EAAE,CAAC,CAAC;QAC1D,CAAC;KACD;IAXD,4BAWC;IAED,MAAa,cAAc;QAQ1B,YAAY,QAAa,EAAE,QAAkB,EAAE,WAAqB;YACnE,IAAI,CAAC,SAAS,GAAG,CAAC,GAAG,QAAQ,CAAC,CAAC;YAC/B,IAAI,CAAC,WAAW,GAAG,aAAK,CAAC,GAAG,CAC3B,aAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,WAAW,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAC1F,aAAK,CAAC,GAAG,CAAC,aAAK,CAAC,MAAM,CAAC,aAAK,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,WAAW,EAAE,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,CAAC,CAC9I,CAAC;YAEF,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,KAAK,EAAE,WAAW,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,EAAE,WAAW,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC;QAClI,CAAC;QAbD,IAAI,QAAQ,KAAU,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;QAe9C,OAAO;YACN,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;QAC3B,CAAC;KACD;IArBD,wCAqBC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { IDisposable } from 'vs/base/common/lifecycle';\n\nexport interface ISplice<T> {\n\treadonly start: number;\n\treadonly deleteCount: number;\n\treadonly toInsert: T[];\n}\n\nexport interface ISpliceable<T> {\n\tsplice(start: number, deleteCount: number, toInsert: T[]): void;\n}\n\nexport interface ISequence<T> {\n\treadonly elements: T[];\n\treadonly onDidSplice: Event<ISplice<T>>;\n}\n\nexport class Sequence<T> implements ISequence<T>, ISpliceable<T> {\n\n\treadonly elements: T[] = [];\n\n\tprivate readonly _onDidSplice = new Emitter<ISplice<T>>();\n\treadonly onDidSplice: Event<ISplice<T>> = this._onDidSplice.event;\n\n\tsplice(start: number, deleteCount: number, toInsert: T[] = []): void {\n\t\tthis.elements.splice(start, deleteCount, ...toInsert);\n\t\tthis._onDidSplice.fire({ start, deleteCount, toInsert });\n\t}\n}\n\nexport class SimpleSequence<T> implements ISequence<T> {\n\n\tprivate _elements: T[];\n\tget elements(): T[] { return this._elements; }\n\n\treadonly onDidSplice: Event<ISplice<T>>;\n\tprivate disposable: IDisposable;\n\n\tconstructor(elements: T[], onDidAdd: Event<T>, onDidRemove: Event<T>) {\n\t\tthis._elements = [...elements];\n\t\tthis.onDidSplice = Event.any(\n\t\t\tEvent.map(onDidAdd, e => ({ start: this.elements.length, deleteCount: 0, toInsert: [e] })),\n\t\t\tEvent.map(Event.filter(Event.map(onDidRemove, e => this.elements.indexOf(e)), i => i > -1), i => ({ start: i, deleteCount: 1, toInsert: [] }))\n\t\t);\n\n\t\tthis.disposable = this.onDidSplice(({ start, deleteCount, toInsert }) => this._elements.splice(start, deleteCount, ...toInsert));\n\t}\n\n\tdispose(): void {\n\t\tthis.disposable.dispose();\n\t}\n}\n"]}