{"version":3,"file":"keybindingParser.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/common/keybindingParser.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ChordKeybinding, KeyCodeUtils, Keybinding, SimpleKeybinding } from 'vs/base/common/keyCodes';\nimport { OperatingSystem } from 'vs/base/common/platform';\nimport { ScanCodeBinding, ScanCodeUtils } from 'vs/base/common/scanCode';\n\nexport class KeybindingParser {\n\n\tprivate static _readModifiers(input: string) {\n\t\tinput = input.toLowerCase().trim();\n\n\t\tlet ctrl = false;\n\t\tlet shift = false;\n\t\tlet alt = false;\n\t\tlet meta = false;\n\n\t\tlet matchedModifier: boolean;\n\n\t\tdo {\n\t\t\tmatchedModifier = false;\n\t\t\tif (/^ctrl(\\+|\\-)/.test(input)) {\n\t\t\t\tctrl = true;\n\t\t\t\tinput = input.substr('ctrl-'.length);\n\t\t\t\tmatchedModifier = true;\n\t\t\t}\n\t\t\tif (/^shift(\\+|\\-)/.test(input)) {\n\t\t\t\tshift = true;\n\t\t\t\tinput = input.substr('shift-'.length);\n\t\t\t\tmatchedModifier = true;\n\t\t\t}\n\t\t\tif (/^alt(\\+|\\-)/.test(input)) {\n\t\t\t\talt = true;\n\t\t\t\tinput = input.substr('alt-'.length);\n\t\t\t\tmatchedModifier = true;\n\t\t\t}\n\t\t\tif (/^meta(\\+|\\-)/.test(input)) {\n\t\t\t\tmeta = true;\n\t\t\t\tinput = input.substr('meta-'.length);\n\t\t\t\tmatchedModifier = true;\n\t\t\t}\n\t\t\tif (/^win(\\+|\\-)/.test(input)) {\n\t\t\t\tmeta = true;\n\t\t\t\tinput = input.substr('win-'.length);\n\t\t\t\tmatchedModifier = true;\n\t\t\t}\n\t\t\tif (/^cmd(\\+|\\-)/.test(input)) {\n\t\t\t\tmeta = true;\n\t\t\t\tinput = input.substr('cmd-'.length);\n\t\t\t\tmatchedModifier = true;\n\t\t\t}\n\t\t} while (matchedModifier);\n\n\t\tlet key: string;\n\n\t\tconst firstSpaceIdx = input.indexOf(' ');\n\t\tif (firstSpaceIdx > 0) {\n\t\t\tkey = input.substring(0, firstSpaceIdx);\n\t\t\tinput = input.substring(firstSpaceIdx);\n\t\t} else {\n\t\t\tkey = input;\n\t\t\tinput = '';\n\t\t}\n\n\t\treturn {\n\t\t\tremains: input,\n\t\t\tctrl,\n\t\t\tshift,\n\t\t\talt,\n\t\t\tmeta,\n\t\t\tkey\n\t\t};\n\t}\n\n\tprivate static parseSimpleKeybinding(input: string): [SimpleKeybinding, string] {\n\t\tconst mods = this._readModifiers(input);\n\t\tconst keyCode = KeyCodeUtils.fromUserSettings(mods.key);\n\t\treturn [new SimpleKeybinding(mods.ctrl, mods.shift, mods.alt, mods.meta, keyCode), mods.remains];\n\t}\n\n\tpublic static parseKeybinding(input: string, OS: OperatingSystem): Keybinding | null {\n\t\tif (!input) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst parts: SimpleKeybinding[] = [];\n\t\tlet part: SimpleKeybinding;\n\n\t\tdo {\n\t\t\t[part, input] = this.parseSimpleKeybinding(input);\n\t\t\tparts.push(part);\n\t\t} while (input.length > 0);\n\t\treturn new ChordKeybinding(parts);\n\t}\n\n\tprivate static parseSimpleUserBinding(input: string): [SimpleKeybinding | ScanCodeBinding, string] {\n\t\tconst mods = this._readModifiers(input);\n\t\tconst scanCodeMatch = mods.key.match(/^\\[([^\\]]+)\\]$/);\n\t\tif (scanCodeMatch) {\n\t\t\tconst strScanCode = scanCodeMatch[1];\n\t\t\tconst scanCode = ScanCodeUtils.lowerCaseToEnum(strScanCode);\n\t\t\treturn [new ScanCodeBinding(mods.ctrl, mods.shift, mods.alt, mods.meta, scanCode), mods.remains];\n\t\t}\n\t\tconst keyCode = KeyCodeUtils.fromUserSettings(mods.key);\n\t\treturn [new SimpleKeybinding(mods.ctrl, mods.shift, mods.alt, mods.meta, keyCode), mods.remains];\n\t}\n\n\tstatic parseUserBinding(input: string): (SimpleKeybinding | ScanCodeBinding)[] {\n\t\tif (!input) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst parts: (SimpleKeybinding | ScanCodeBinding)[] = [];\n\t\tlet part: SimpleKeybinding | ScanCodeBinding;\n\n\t\twhile (input.length > 0) {\n\t\t\t[part, input] = this.parseSimpleUserBinding(input);\n\t\t\tparts.push(part);\n\t\t}\n\t\treturn parts;\n\t}\n}"]}