{"version":3,"file":"mime.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/common/mime.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { basename, posix, extname } from 'vs/base/common/path';\nimport { startsWithUTF8BOM } from 'vs/base/common/strings';\nimport { match } from 'vs/base/common/glob';\nimport { URI } from 'vs/base/common/uri';\nimport { Schemas } from 'vs/base/common/network';\nimport { DataUri } from 'vs/base/common/resources';\n\nexport const MIME_TEXT = 'text/plain';\nexport const MIME_BINARY = 'application/octet-stream';\nexport const MIME_UNKNOWN = 'application/unknown';\n\nexport interface ITextMimeAssociation {\n\treadonly id: string;\n\treadonly mime: string;\n\treadonly filename?: string;\n\treadonly extension?: string;\n\treadonly filepattern?: string;\n\treadonly firstline?: RegExp;\n\treadonly userConfigured?: boolean;\n}\n\ninterface ITextMimeAssociationItem extends ITextMimeAssociation {\n\treadonly filenameLowercase?: string;\n\treadonly extensionLowercase?: string;\n\treadonly filepatternLowercase?: string;\n\treadonly filepatternOnPath?: boolean;\n}\n\nlet registeredAssociations: ITextMimeAssociationItem[] = [];\nlet nonUserRegisteredAssociations: ITextMimeAssociationItem[] = [];\nlet userRegisteredAssociations: ITextMimeAssociationItem[] = [];\n\n/**\n * Associate a text mime to the registry.\n */\nexport function registerTextMime(association: ITextMimeAssociation, warnOnOverwrite = false): void {\n\n\t// Register\n\tconst associationItem = toTextMimeAssociationItem(association);\n\tregisteredAssociations.push(associationItem);\n\tif (!associationItem.userConfigured) {\n\t\tnonUserRegisteredAssociations.push(associationItem);\n\t} else {\n\t\tuserRegisteredAssociations.push(associationItem);\n\t}\n\n\t// Check for conflicts unless this is a user configured association\n\tif (warnOnOverwrite && !associationItem.userConfigured) {\n\t\tregisteredAssociations.forEach(a => {\n\t\t\tif (a.mime === associationItem.mime || a.userConfigured) {\n\t\t\t\treturn; // same mime or userConfigured is ok\n\t\t\t}\n\n\t\t\tif (associationItem.extension && a.extension === associationItem.extension) {\n\t\t\t\tconsole.warn(`Overwriting extension <<${associationItem.extension}>> to now point to mime <<${associationItem.mime}>>`);\n\t\t\t}\n\n\t\t\tif (associationItem.filename && a.filename === associationItem.filename) {\n\t\t\t\tconsole.warn(`Overwriting filename <<${associationItem.filename}>> to now point to mime <<${associationItem.mime}>>`);\n\t\t\t}\n\n\t\t\tif (associationItem.filepattern && a.filepattern === associationItem.filepattern) {\n\t\t\t\tconsole.warn(`Overwriting filepattern <<${associationItem.filepattern}>> to now point to mime <<${associationItem.mime}>>`);\n\t\t\t}\n\n\t\t\tif (associationItem.firstline && a.firstline === associationItem.firstline) {\n\t\t\t\tconsole.warn(`Overwriting firstline <<${associationItem.firstline}>> to now point to mime <<${associationItem.mime}>>`);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction toTextMimeAssociationItem(association: ITextMimeAssociation): ITextMimeAssociationItem {\n\treturn {\n\t\tid: association.id,\n\t\tmime: association.mime,\n\t\tfilename: association.filename,\n\t\textension: association.extension,\n\t\tfilepattern: association.filepattern,\n\t\tfirstline: association.firstline,\n\t\tuserConfigured: association.userConfigured,\n\t\tfilenameLowercase: association.filename ? association.filename.toLowerCase() : undefined,\n\t\textensionLowercase: association.extension ? association.extension.toLowerCase() : undefined,\n\t\tfilepatternLowercase: association.filepattern ? association.filepattern.toLowerCase() : undefined,\n\t\tfilepatternOnPath: association.filepattern ? association.filepattern.indexOf(posix.sep) >= 0 : false\n\t};\n}\n\n/**\n * Clear text mimes from the registry.\n */\nexport function clearTextMimes(onlyUserConfigured?: boolean): void {\n\tif (!onlyUserConfigured) {\n\t\tregisteredAssociations = [];\n\t\tnonUserRegisteredAssociations = [];\n\t\tuserRegisteredAssociations = [];\n\t} else {\n\t\tregisteredAssociations = registeredAssociations.filter(a => !a.userConfigured);\n\t\tuserRegisteredAssociations = [];\n\t}\n}\n\n/**\n * Given a file, return the best matching mime type for it\n */\nexport function guessMimeTypes(resource: URI | null, firstLine?: string): string[] {\n\tlet path: string | undefined;\n\tif (resource) {\n\t\tswitch (resource.scheme) {\n\t\t\tcase Schemas.file:\n\t\t\t\tpath = resource.fsPath;\n\t\t\t\tbreak;\n\t\t\tcase Schemas.data:\n\t\t\t\tconst metadata = DataUri.parseMetaData(resource);\n\t\t\t\tpath = metadata.get(DataUri.META_DATA_LABEL);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tpath = resource.path;\n\t\t}\n\t}\n\n\tif (!path) {\n\t\treturn [MIME_UNKNOWN];\n\t}\n\n\tpath = path.toLowerCase();\n\n\tconst filename = basename(path);\n\n\t// 1.) User configured mappings have highest priority\n\tconst configuredMime = guessMimeTypeByPath(path, filename, userRegisteredAssociations);\n\tif (configuredMime) {\n\t\treturn [configuredMime, MIME_TEXT];\n\t}\n\n\t// 2.) Registered mappings have middle priority\n\tconst registeredMime = guessMimeTypeByPath(path, filename, nonUserRegisteredAssociations);\n\tif (registeredMime) {\n\t\treturn [registeredMime, MIME_TEXT];\n\t}\n\n\t// 3.) Firstline has lowest priority\n\tif (firstLine) {\n\t\tconst firstlineMime = guessMimeTypeByFirstline(firstLine);\n\t\tif (firstlineMime) {\n\t\t\treturn [firstlineMime, MIME_TEXT];\n\t\t}\n\t}\n\n\treturn [MIME_UNKNOWN];\n}\n\nfunction guessMimeTypeByPath(path: string, filename: string, associations: ITextMimeAssociationItem[]): string | null {\n\tlet filenameMatch: ITextMimeAssociationItem | null = null;\n\tlet patternMatch: ITextMimeAssociationItem | null = null;\n\tlet extensionMatch: ITextMimeAssociationItem | null = null;\n\n\t// We want to prioritize associations based on the order they are registered so that the last registered\n\t// association wins over all other. This is for https://github.com/microsoft/vscode/issues/20074\n\tfor (let i = associations.length - 1; i >= 0; i--) {\n\t\tconst association = associations[i];\n\n\t\t// First exact name match\n\t\tif (filename === association.filenameLowercase) {\n\t\t\tfilenameMatch = association;\n\t\t\tbreak; // take it!\n\t\t}\n\n\t\t// Longest pattern match\n\t\tif (association.filepattern) {\n\t\t\tif (!patternMatch || association.filepattern.length > patternMatch.filepattern!.length) {\n\t\t\t\tconst target = association.filepatternOnPath ? path : filename; // match on full path if pattern contains path separator\n\t\t\t\tif (match(association.filepatternLowercase!, target)) {\n\t\t\t\t\tpatternMatch = association;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Longest extension match\n\t\tif (association.extension) {\n\t\t\tif (!extensionMatch || association.extension.length > extensionMatch.extension!.length) {\n\t\t\t\tif (filename.endsWith(association.extensionLowercase!)) {\n\t\t\t\t\textensionMatch = association;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 1.) Exact name match has second highest prio\n\tif (filenameMatch) {\n\t\treturn filenameMatch.mime;\n\t}\n\n\t// 2.) Match on pattern\n\tif (patternMatch) {\n\t\treturn patternMatch.mime;\n\t}\n\n\t// 3.) Match on extension comes next\n\tif (extensionMatch) {\n\t\treturn extensionMatch.mime;\n\t}\n\n\treturn null;\n}\n\nfunction guessMimeTypeByFirstline(firstLine: string): string | null {\n\tif (startsWithUTF8BOM(firstLine)) {\n\t\tfirstLine = firstLine.substr(1);\n\t}\n\n\tif (firstLine.length > 0) {\n\n\t\t// We want to prioritize associations based on the order they are registered so that the last registered\n\t\t// association wins over all other. This is for https://github.com/microsoft/vscode/issues/20074\n\t\tfor (let i = registeredAssociations.length - 1; i >= 0; i--) {\n\t\t\tconst association = registeredAssociations[i];\n\t\t\tif (!association.firstline) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst matches = firstLine.match(association.firstline);\n\t\t\tif (matches && matches.length > 0) {\n\t\t\t\treturn association.mime;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn null;\n}\n\nexport function isUnspecific(mime: string[] | string): boolean {\n\tif (!mime) {\n\t\treturn true;\n\t}\n\n\tif (typeof mime === 'string') {\n\t\treturn mime === MIME_BINARY || mime === MIME_TEXT || mime === MIME_UNKNOWN;\n\t}\n\n\treturn mime.length === 1 && isUnspecific(mime[0]);\n}\n\ninterface MapExtToMediaMimes {\n\t[index: string]: string;\n}\n\n// Known media mimes that we can handle\nconst mapExtToMediaMimes: MapExtToMediaMimes = {\n\t'.aac': 'audio/x-aac',\n\t'.avi': 'video/x-msvideo',\n\t'.bmp': 'image/bmp',\n\t'.flv': 'video/x-flv',\n\t'.gif': 'image/gif',\n\t'.ico': 'image/x-icon',\n\t'.jpe': 'image/jpg',\n\t'.jpeg': 'image/jpg',\n\t'.jpg': 'image/jpg',\n\t'.m1v': 'video/mpeg',\n\t'.m2a': 'audio/mpeg',\n\t'.m2v': 'video/mpeg',\n\t'.m3a': 'audio/mpeg',\n\t'.mid': 'audio/midi',\n\t'.midi': 'audio/midi',\n\t'.mk3d': 'video/x-matroska',\n\t'.mks': 'video/x-matroska',\n\t'.mkv': 'video/x-matroska',\n\t'.mov': 'video/quicktime',\n\t'.movie': 'video/x-sgi-movie',\n\t'.mp2': 'audio/mpeg',\n\t'.mp2a': 'audio/mpeg',\n\t'.mp3': 'audio/mpeg',\n\t'.mp4': 'video/mp4',\n\t'.mp4a': 'audio/mp4',\n\t'.mp4v': 'video/mp4',\n\t'.mpe': 'video/mpeg',\n\t'.mpeg': 'video/mpeg',\n\t'.mpg': 'video/mpeg',\n\t'.mpg4': 'video/mp4',\n\t'.mpga': 'audio/mpeg',\n\t'.oga': 'audio/ogg',\n\t'.ogg': 'audio/ogg',\n\t'.ogv': 'video/ogg',\n\t'.png': 'image/png',\n\t'.psd': 'image/vnd.adobe.photoshop',\n\t'.qt': 'video/quicktime',\n\t'.spx': 'audio/ogg',\n\t'.svg': 'image/svg+xml',\n\t'.tga': 'image/x-tga',\n\t'.tif': 'image/tiff',\n\t'.tiff': 'image/tiff',\n\t'.wav': 'audio/x-wav',\n\t'.webm': 'video/webm',\n\t'.webp': 'image/webp',\n\t'.wma': 'audio/x-ms-wma',\n\t'.wmv': 'video/x-ms-wmv',\n\t'.woff': 'application/font-woff',\n};\n\nexport function getMediaMime(path: string): string | undefined {\n\tconst ext = extname(path);\n\treturn mapExtToMediaMimes[ext.toLowerCase()];\n}\n\nexport function getExtensionForMimeType(mimeType: string): string | undefined {\n\tfor (const extension in mapExtToMediaMimes) {\n\t\tif (mapExtToMediaMimes[extension] === mimeType) {\n\t\t\treturn extension;\n\t\t}\n\t}\n\n\treturn undefined;\n}\n"]}