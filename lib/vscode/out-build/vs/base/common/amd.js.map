{"version":3,"file":"amd.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/common/amd.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nexport abstract class LoaderStats {\n\tabstract get amdLoad(): [string, number][];\n\tabstract get amdInvoke(): [string, number][];\n\tabstract get nodeRequire(): [string, number][];\n\tabstract get nodeEval(): [string, number][];\n\tabstract get nodeRequireTotal(): number;\n\n\tstatic get(): LoaderStats {\n\t\tconst amdLoadScript = new Map<string, number>();\n\t\tconst amdInvokeFactory = new Map<string, number>();\n\t\tconst nodeRequire = new Map<string, number>();\n\t\tconst nodeEval = new Map<string, number>();\n\n\t\tfunction mark(map: Map<string, number>, stat: LoaderEvent) {\n\t\t\tif (map.has(stat.detail)) {\n\t\t\t\t// console.warn('BAD events, DOUBLE start', stat);\n\t\t\t\t// map.delete(stat.detail);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tmap.set(stat.detail, -stat.timestamp);\n\t\t}\n\n\t\tfunction diff(map: Map<string, number>, stat: LoaderEvent) {\n\t\t\tlet duration = map.get(stat.detail);\n\t\t\tif (!duration) {\n\t\t\t\t// console.warn('BAD events, end WITHOUT start', stat);\n\t\t\t\t// map.delete(stat.detail);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (duration >= 0) {\n\t\t\t\t// console.warn('BAD events, DOUBLE end', stat);\n\t\t\t\t// map.delete(stat.detail);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tmap.set(stat.detail, duration + stat.timestamp);\n\t\t}\n\n\t\tconst stats = require.getStats().slice(0).sort((a, b) => a.timestamp - b.timestamp);\n\n\t\tfor (const stat of stats) {\n\t\t\tswitch (stat.type) {\n\t\t\t\tcase LoaderEventType.BeginLoadingScript:\n\t\t\t\t\tmark(amdLoadScript, stat);\n\t\t\t\t\tbreak;\n\t\t\t\tcase LoaderEventType.EndLoadingScriptOK:\n\t\t\t\tcase LoaderEventType.EndLoadingScriptError:\n\t\t\t\t\tdiff(amdLoadScript, stat);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase LoaderEventType.BeginInvokeFactory:\n\t\t\t\t\tmark(amdInvokeFactory, stat);\n\t\t\t\t\tbreak;\n\t\t\t\tcase LoaderEventType.EndInvokeFactory:\n\t\t\t\t\tdiff(amdInvokeFactory, stat);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase LoaderEventType.NodeBeginNativeRequire:\n\t\t\t\t\tmark(nodeRequire, stat);\n\t\t\t\t\tbreak;\n\t\t\t\tcase LoaderEventType.NodeEndNativeRequire:\n\t\t\t\t\tdiff(nodeRequire, stat);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase LoaderEventType.NodeBeginEvaluatingScript:\n\t\t\t\t\tmark(nodeEval, stat);\n\t\t\t\t\tbreak;\n\t\t\t\tcase LoaderEventType.NodeEndEvaluatingScript:\n\t\t\t\t\tdiff(nodeEval, stat);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tlet nodeRequireTotal = 0;\n\t\tnodeRequire.forEach(value => nodeRequireTotal += value);\n\n\t\tfunction to2dArray(map: Map<string, number>): [string, number][] {\n\t\t\tlet res: [string, number][] = [];\n\t\t\tmap.forEach((value, index) => res.push([index, value]));\n\t\t\treturn res;\n\t\t}\n\n\t\treturn {\n\t\t\tamdLoad: to2dArray(amdLoadScript),\n\t\t\tamdInvoke: to2dArray(amdInvokeFactory),\n\t\t\tnodeRequire: to2dArray(nodeRequire),\n\t\t\tnodeEval: to2dArray(nodeEval),\n\t\t\tnodeRequireTotal\n\t\t};\n\t}\n\n\tstatic toMarkdownTable(header: string[], rows: Array<Array<{ toString(): string } | undefined>>): string {\n\t\tlet result = '';\n\n\t\tlet lengths: number[] = [];\n\t\theader.forEach((cell, ci) => {\n\t\t\tlengths[ci] = cell.length;\n\t\t});\n\t\trows.forEach(row => {\n\t\t\trow.forEach((cell, ci) => {\n\t\t\t\tif (typeof cell === 'undefined') {\n\t\t\t\t\tcell = row[ci] = '-';\n\t\t\t\t}\n\t\t\t\tconst len = cell.toString().length;\n\t\t\t\tlengths[ci] = Math.max(len, lengths[ci]);\n\t\t\t});\n\t\t});\n\n\t\t// header\n\t\theader.forEach((cell, ci) => { result += `| ${cell + ' '.repeat(lengths[ci] - cell.toString().length)} `; });\n\t\tresult += '|\\n';\n\t\theader.forEach((_cell, ci) => { result += `| ${'-'.repeat(lengths[ci])} `; });\n\t\tresult += '|\\n';\n\n\t\t// cells\n\t\trows.forEach(row => {\n\t\t\trow.forEach((cell, ci) => {\n\t\t\t\tif (typeof cell !== 'undefined') {\n\t\t\t\t\tresult += `| ${cell + ' '.repeat(lengths[ci] - cell.toString().length)} `;\n\t\t\t\t}\n\t\t\t});\n\t\t\tresult += '|\\n';\n\t\t});\n\n\t\treturn result;\n\t}\n}\n"]}