{"version":3,"file":"simpleWorker.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/common/worker/simpleWorker.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { transformErrorForSerialization } from 'vs/base/common/errors';\nimport { Disposable, IDisposable } from 'vs/base/common/lifecycle';\nimport { isWeb } from 'vs/base/common/platform';\nimport * as types from 'vs/base/common/types';\n\nconst INITIALIZE = '$initialize';\n\nexport interface IWorker extends IDisposable {\n\tgetId(): number;\n\tpostMessage(message: any, transfer: ArrayBuffer[]): void;\n}\n\nexport interface IWorkerCallback {\n\t(message: any): void;\n}\n\nexport interface IWorkerFactory {\n\tcreate(moduleId: string, callback: IWorkerCallback, onErrorCallback: (err: any) => void): IWorker;\n}\n\nlet webWorkerWarningLogged = false;\nexport function logOnceWebWorkerWarning(err: any): void {\n\tif (!isWeb) {\n\t\t// running tests\n\t\treturn;\n\t}\n\tif (!webWorkerWarningLogged) {\n\t\twebWorkerWarningLogged = true;\n\t\tconsole.warn('Could not create web worker(s). Falling back to loading web worker code in main thread, which might cause UI freezes. Please see https://github.com/microsoft/monaco-editor#faq');\n\t}\n\tconsole.warn(err.message);\n}\n\ninterface IMessage {\n\tvsWorker: number;\n\treq?: string;\n\tseq?: string;\n}\n\ninterface IRequestMessage extends IMessage {\n\treq: string;\n\tmethod: string;\n\targs: any[];\n}\n\ninterface IReplyMessage extends IMessage {\n\tseq: string;\n\terr: any;\n\tres: any;\n}\n\ninterface IMessageReply {\n\tresolve: (value?: any) => void;\n\treject: (error?: any) => void;\n}\n\ninterface IMessageHandler {\n\tsendMessage(msg: any, transfer?: ArrayBuffer[]): void;\n\thandleMessage(method: string, args: any[]): Promise<any>;\n}\n\nclass SimpleWorkerProtocol {\n\n\tprivate _workerId: number;\n\tprivate _lastSentReq: number;\n\tprivate _pendingReplies: { [req: string]: IMessageReply; };\n\tprivate _handler: IMessageHandler;\n\n\tconstructor(handler: IMessageHandler) {\n\t\tthis._workerId = -1;\n\t\tthis._handler = handler;\n\t\tthis._lastSentReq = 0;\n\t\tthis._pendingReplies = Object.create(null);\n\t}\n\n\tpublic setWorkerId(workerId: number): void {\n\t\tthis._workerId = workerId;\n\t}\n\n\tpublic sendMessage(method: string, args: any[]): Promise<any> {\n\t\tlet req = String(++this._lastSentReq);\n\t\treturn new Promise<any>((resolve, reject) => {\n\t\t\tthis._pendingReplies[req] = {\n\t\t\t\tresolve: resolve,\n\t\t\t\treject: reject\n\t\t\t};\n\t\t\tthis._send({\n\t\t\t\tvsWorker: this._workerId,\n\t\t\t\treq: req,\n\t\t\t\tmethod: method,\n\t\t\t\targs: args\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic handleMessage(message: IMessage): void {\n\t\tif (!message || !message.vsWorker) {\n\t\t\treturn;\n\t\t}\n\t\tif (this._workerId !== -1 && message.vsWorker !== this._workerId) {\n\t\t\treturn;\n\t\t}\n\t\tthis._handleMessage(message);\n\t}\n\n\tprivate _handleMessage(msg: IMessage): void {\n\t\tif (msg.seq) {\n\t\t\tlet replyMessage = <IReplyMessage>msg;\n\t\t\tif (!this._pendingReplies[replyMessage.seq]) {\n\t\t\t\tconsole.warn('Got reply to unknown seq');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet reply = this._pendingReplies[replyMessage.seq];\n\t\t\tdelete this._pendingReplies[replyMessage.seq];\n\n\t\t\tif (replyMessage.err) {\n\t\t\t\tlet err = replyMessage.err;\n\t\t\t\tif (replyMessage.err.$isError) {\n\t\t\t\t\terr = new Error();\n\t\t\t\t\terr.name = replyMessage.err.name;\n\t\t\t\t\terr.message = replyMessage.err.message;\n\t\t\t\t\terr.stack = replyMessage.err.stack;\n\t\t\t\t}\n\t\t\t\treply.reject(err);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treply.resolve(replyMessage.res);\n\t\t\treturn;\n\t\t}\n\n\t\tlet requestMessage = <IRequestMessage>msg;\n\t\tlet req = requestMessage.req;\n\t\tlet result = this._handler.handleMessage(requestMessage.method, requestMessage.args);\n\t\tresult.then((r) => {\n\t\t\tthis._send({\n\t\t\t\tvsWorker: this._workerId,\n\t\t\t\tseq: req,\n\t\t\t\tres: r,\n\t\t\t\terr: undefined\n\t\t\t});\n\t\t}, (e) => {\n\t\t\tif (e.detail instanceof Error) {\n\t\t\t\t// Loading errors have a detail property that points to the actual error\n\t\t\t\te.detail = transformErrorForSerialization(e.detail);\n\t\t\t}\n\t\t\tthis._send({\n\t\t\t\tvsWorker: this._workerId,\n\t\t\t\tseq: req,\n\t\t\t\tres: undefined,\n\t\t\t\terr: transformErrorForSerialization(e)\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate _send(msg: IRequestMessage | IReplyMessage): void {\n\t\tlet transfer: ArrayBuffer[] = [];\n\t\tif (msg.req) {\n\t\t\tconst m = <IRequestMessage>msg;\n\t\t\tfor (let i = 0; i < m.args.length; i++) {\n\t\t\t\tif (m.args[i] instanceof ArrayBuffer) {\n\t\t\t\t\ttransfer.push(m.args[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tconst m = <IReplyMessage>msg;\n\t\t\tif (m.res instanceof ArrayBuffer) {\n\t\t\t\ttransfer.push(m.res);\n\t\t\t}\n\t\t}\n\t\tthis._handler.sendMessage(msg, transfer);\n\t}\n}\n\nexport interface IWorkerClient<W> {\n\tgetProxyObject(): Promise<W>;\n\tdispose(): void;\n}\n\n/**\n * Main thread side\n */\nexport class SimpleWorkerClient<W extends object, H extends object> extends Disposable implements IWorkerClient<W> {\n\n\tprivate readonly _worker: IWorker;\n\tprivate readonly _onModuleLoaded: Promise<string[]>;\n\tprivate readonly _protocol: SimpleWorkerProtocol;\n\tprivate readonly _lazyProxy: Promise<W>;\n\n\tconstructor(workerFactory: IWorkerFactory, moduleId: string, host: H) {\n\t\tsuper();\n\n\t\tlet lazyProxyReject: ((err: any) => void) | null = null;\n\n\t\tthis._worker = this._register(workerFactory.create(\n\t\t\t'vs/base/common/worker/simpleWorker',\n\t\t\t(msg: any) => {\n\t\t\t\tthis._protocol.handleMessage(msg);\n\t\t\t},\n\t\t\t(err: any) => {\n\t\t\t\t// in Firefox, web workers fail lazily :(\n\t\t\t\t// we will reject the proxy\n\t\t\t\tif (lazyProxyReject) {\n\t\t\t\t\tlazyProxyReject(err);\n\t\t\t\t}\n\t\t\t}\n\t\t));\n\n\t\tthis._protocol = new SimpleWorkerProtocol({\n\t\t\tsendMessage: (msg: any, transfer: ArrayBuffer[]): void => {\n\t\t\t\tthis._worker.postMessage(msg, transfer);\n\t\t\t},\n\t\t\thandleMessage: (method: string, args: any[]): Promise<any> => {\n\t\t\t\tif (typeof (host as any)[method] !== 'function') {\n\t\t\t\t\treturn Promise.reject(new Error('Missing method ' + method + ' on main thread host.'));\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\treturn Promise.resolve((host as any)[method].apply(host, args));\n\t\t\t\t} catch (e) {\n\t\t\t\t\treturn Promise.reject(e);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tthis._protocol.setWorkerId(this._worker.getId());\n\n\t\t// Gather loader configuration\n\t\tlet loaderConfiguration: any = null;\n\t\tif (typeof (<any>self).require !== 'undefined' && typeof (<any>self).require.getConfig === 'function') {\n\t\t\t// Get the configuration from the Monaco AMD Loader\n\t\t\tloaderConfiguration = (<any>self).require.getConfig();\n\t\t} else if (typeof (<any>self).requirejs !== 'undefined') {\n\t\t\t// Get the configuration from requirejs\n\t\t\tloaderConfiguration = (<any>self).requirejs.s.contexts._.config;\n\t\t}\n\n\t\tconst hostMethods = types.getAllMethodNames(host);\n\n\t\t// Send initialize message\n\t\tthis._onModuleLoaded = this._protocol.sendMessage(INITIALIZE, [\n\t\t\tthis._worker.getId(),\n\t\t\tJSON.parse(JSON.stringify(loaderConfiguration)),\n\t\t\tmoduleId,\n\t\t\thostMethods,\n\t\t]);\n\n\t\t// Create proxy to loaded code\n\t\tconst proxyMethodRequest = (method: string, args: any[]): Promise<any> => {\n\t\t\treturn this._request(method, args);\n\t\t};\n\n\t\tthis._lazyProxy = new Promise<W>((resolve, reject) => {\n\t\t\tlazyProxyReject = reject;\n\t\t\tthis._onModuleLoaded.then((availableMethods: string[]) => {\n\t\t\t\tresolve(types.createProxyObject<W>(availableMethods, proxyMethodRequest));\n\t\t\t}, (e) => {\n\t\t\t\treject(e);\n\t\t\t\tthis._onError('Worker failed to load ' + moduleId, e);\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic getProxyObject(): Promise<W> {\n\t\treturn this._lazyProxy;\n\t}\n\n\tprivate _request(method: string, args: any[]): Promise<any> {\n\t\treturn new Promise<any>((resolve, reject) => {\n\t\t\tthis._onModuleLoaded.then(() => {\n\t\t\t\tthis._protocol.sendMessage(method, args).then(resolve, reject);\n\t\t\t}, reject);\n\t\t});\n\t}\n\n\tprivate _onError(message: string, error?: any): void {\n\t\tconsole.error(message);\n\t\tconsole.info(error);\n\t}\n}\n\nexport interface IRequestHandler {\n\t_requestHandlerBrand: any;\n\t[prop: string]: any;\n}\n\nexport interface IRequestHandlerFactory<H> {\n\t(host: H): IRequestHandler;\n}\n\n/**\n * Worker side\n */\nexport class SimpleWorkerServer<H extends object> {\n\n\tprivate _requestHandlerFactory: IRequestHandlerFactory<H> | null;\n\tprivate _requestHandler: IRequestHandler | null;\n\tprivate _protocol: SimpleWorkerProtocol;\n\n\tconstructor(postMessage: (msg: any, transfer?: ArrayBuffer[]) => void, requestHandlerFactory: IRequestHandlerFactory<H> | null) {\n\t\tthis._requestHandlerFactory = requestHandlerFactory;\n\t\tthis._requestHandler = null;\n\t\tthis._protocol = new SimpleWorkerProtocol({\n\t\t\tsendMessage: (msg: any, transfer: ArrayBuffer[]): void => {\n\t\t\t\tpostMessage(msg, transfer);\n\t\t\t},\n\t\t\thandleMessage: (method: string, args: any[]): Promise<any> => this._handleMessage(method, args)\n\t\t});\n\t}\n\n\tpublic onmessage(msg: any): void {\n\t\tthis._protocol.handleMessage(msg);\n\t}\n\n\tprivate _handleMessage(method: string, args: any[]): Promise<any> {\n\t\tif (method === INITIALIZE) {\n\t\t\treturn this.initialize(<number>args[0], <any>args[1], <string>args[2], <string[]>args[3]);\n\t\t}\n\n\t\tif (!this._requestHandler || typeof this._requestHandler[method] !== 'function') {\n\t\t\treturn Promise.reject(new Error('Missing requestHandler or method: ' + method));\n\t\t}\n\n\t\ttry {\n\t\t\treturn Promise.resolve(this._requestHandler[method].apply(this._requestHandler, args));\n\t\t} catch (e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n\n\tprivate initialize(workerId: number, loaderConfig: any, moduleId: string, hostMethods: string[]): Promise<string[]> {\n\t\tthis._protocol.setWorkerId(workerId);\n\n\t\tconst proxyMethodRequest = (method: string, args: any[]): Promise<any> => {\n\t\t\treturn this._protocol.sendMessage(method, args);\n\t\t};\n\n\t\tconst hostProxy = types.createProxyObject<H>(hostMethods, proxyMethodRequest);\n\n\t\tif (this._requestHandlerFactory) {\n\t\t\t// static request handler\n\t\t\tthis._requestHandler = this._requestHandlerFactory(hostProxy);\n\t\t\treturn Promise.resolve(types.getAllMethodNames(this._requestHandler));\n\t\t}\n\n\t\tif (loaderConfig) {\n\t\t\t// Remove 'baseUrl', handling it is beyond scope for now\n\t\t\tif (typeof loaderConfig.baseUrl !== 'undefined') {\n\t\t\t\tdelete loaderConfig['baseUrl'];\n\t\t\t}\n\t\t\tif (typeof loaderConfig.paths !== 'undefined') {\n\t\t\t\tif (typeof loaderConfig.paths.vs !== 'undefined') {\n\t\t\t\t\tdelete loaderConfig.paths['vs'];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (typeof loaderConfig.trustedTypesPolicy !== undefined) {\n\t\t\t\t// don't use, it has been destroyed during serialize\n\t\t\t\tdelete loaderConfig['trustedTypesPolicy'];\n\t\t\t}\n\n\t\t\t// Since this is in a web worker, enable catching errors\n\t\t\tloaderConfig.catchError = true;\n\t\t\t(<any>self).require.config(loaderConfig);\n\t\t}\n\n\t\treturn new Promise<string[]>((resolve, reject) => {\n\t\t\t// Use the global require to be sure to get the global config\n\t\t\t(<any>self).require([moduleId], (module: { create: IRequestHandlerFactory<H> }) => {\n\t\t\t\tthis._requestHandler = module.create(hostProxy);\n\n\t\t\t\tif (!this._requestHandler) {\n\t\t\t\t\treject(new Error(`No RequestHandler!`));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresolve(types.getAllMethodNames(this._requestHandler));\n\t\t\t}, reject);\n\t\t});\n\t}\n}\n\n/**\n * Called on the worker side\n */\nexport function create(postMessage: (msg: string) => void): SimpleWorkerServer<any> {\n\treturn new SimpleWorkerServer(postMessage, null);\n}\n"]}