{"version":3,"file":"jsonFormatter.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/common/jsonFormatter.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createScanner, SyntaxKind, ScanError } from './json';\n\nexport interface FormattingOptions {\n\t/**\n\t * If indentation is based on spaces (`insertSpaces` = true), then what is the number of spaces that make an indent?\n\t */\n\ttabSize?: number;\n\t/**\n\t * Is indentation based on spaces?\n\t */\n\tinsertSpaces?: boolean;\n\t/**\n\t * The default 'end of line' character. If not set, '\\n' is used as default.\n\t */\n\teol?: string;\n}\n\n/**\n * Represents a text modification\n */\nexport interface Edit {\n\t/**\n\t * The start offset of the modification.\n\t */\n\toffset: number;\n\t/**\n\t * The length of the modification. Must not be negative. Empty length represents an *insert*.\n\t */\n\tlength: number;\n\t/**\n\t * The new content. Empty content represents a *remove*.\n\t */\n\tcontent: string;\n}\n\n/**\n * A text range in the document\n*/\nexport interface Range {\n\t/**\n\t * The start offset of the range.\n\t */\n\toffset: number;\n\t/**\n\t * The length of the range. Must not be negative.\n\t */\n\tlength: number;\n}\n\n\nexport function format(documentText: string, range: Range | undefined, options: FormattingOptions): Edit[] {\n\tlet initialIndentLevel: number;\n\tlet formatText: string;\n\tlet formatTextStart: number;\n\tlet rangeStart: number;\n\tlet rangeEnd: number;\n\tif (range) {\n\t\trangeStart = range.offset;\n\t\trangeEnd = rangeStart + range.length;\n\n\t\tformatTextStart = rangeStart;\n\t\twhile (formatTextStart > 0 && !isEOL(documentText, formatTextStart - 1)) {\n\t\t\tformatTextStart--;\n\t\t}\n\t\tlet endOffset = rangeEnd;\n\t\twhile (endOffset < documentText.length && !isEOL(documentText, endOffset)) {\n\t\t\tendOffset++;\n\t\t}\n\t\tformatText = documentText.substring(formatTextStart, endOffset);\n\t\tinitialIndentLevel = computeIndentLevel(formatText, options);\n\t} else {\n\t\tformatText = documentText;\n\t\tinitialIndentLevel = 0;\n\t\tformatTextStart = 0;\n\t\trangeStart = 0;\n\t\trangeEnd = documentText.length;\n\t}\n\tconst eol = getEOL(options, documentText);\n\n\tlet lineBreak = false;\n\tlet indentLevel = 0;\n\tlet indentValue: string;\n\tif (options.insertSpaces) {\n\t\tindentValue = repeat(' ', options.tabSize || 4);\n\t} else {\n\t\tindentValue = '\\t';\n\t}\n\n\tconst scanner = createScanner(formatText, false);\n\tlet hasError = false;\n\n\tfunction newLineAndIndent(): string {\n\t\treturn eol + repeat(indentValue, initialIndentLevel + indentLevel);\n\t}\n\tfunction scanNext(): SyntaxKind {\n\t\tlet token = scanner.scan();\n\t\tlineBreak = false;\n\t\twhile (token === SyntaxKind.Trivia || token === SyntaxKind.LineBreakTrivia) {\n\t\t\tlineBreak = lineBreak || (token === SyntaxKind.LineBreakTrivia);\n\t\t\ttoken = scanner.scan();\n\t\t}\n\t\thasError = token === SyntaxKind.Unknown || scanner.getTokenError() !== ScanError.None;\n\t\treturn token;\n\t}\n\tconst editOperations: Edit[] = [];\n\tfunction addEdit(text: string, startOffset: number, endOffset: number) {\n\t\tif (!hasError && startOffset < rangeEnd && endOffset > rangeStart && documentText.substring(startOffset, endOffset) !== text) {\n\t\t\teditOperations.push({ offset: startOffset, length: endOffset - startOffset, content: text });\n\t\t}\n\t}\n\n\tlet firstToken = scanNext();\n\n\tif (firstToken !== SyntaxKind.EOF) {\n\t\tconst firstTokenStart = scanner.getTokenOffset() + formatTextStart;\n\t\tconst initialIndent = repeat(indentValue, initialIndentLevel);\n\t\taddEdit(initialIndent, formatTextStart, firstTokenStart);\n\t}\n\n\twhile (firstToken !== SyntaxKind.EOF) {\n\t\tlet firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n\t\tlet secondToken = scanNext();\n\n\t\tlet replaceContent = '';\n\t\twhile (!lineBreak && (secondToken === SyntaxKind.LineCommentTrivia || secondToken === SyntaxKind.BlockCommentTrivia)) {\n\t\t\t// comments on the same line: keep them on the same line, but ignore them otherwise\n\t\t\tconst commentTokenStart = scanner.getTokenOffset() + formatTextStart;\n\t\t\taddEdit(' ', firstTokenEnd, commentTokenStart);\n\t\t\tfirstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n\t\t\treplaceContent = secondToken === SyntaxKind.LineCommentTrivia ? newLineAndIndent() : '';\n\t\t\tsecondToken = scanNext();\n\t\t}\n\n\t\tif (secondToken === SyntaxKind.CloseBraceToken) {\n\t\t\tif (firstToken !== SyntaxKind.OpenBraceToken) {\n\t\t\t\tindentLevel--;\n\t\t\t\treplaceContent = newLineAndIndent();\n\t\t\t}\n\t\t} else if (secondToken === SyntaxKind.CloseBracketToken) {\n\t\t\tif (firstToken !== SyntaxKind.OpenBracketToken) {\n\t\t\t\tindentLevel--;\n\t\t\t\treplaceContent = newLineAndIndent();\n\t\t\t}\n\t\t} else {\n\t\t\tswitch (firstToken) {\n\t\t\t\tcase SyntaxKind.OpenBracketToken:\n\t\t\t\tcase SyntaxKind.OpenBraceToken:\n\t\t\t\t\tindentLevel++;\n\t\t\t\t\treplaceContent = newLineAndIndent();\n\t\t\t\t\tbreak;\n\t\t\t\tcase SyntaxKind.CommaToken:\n\t\t\t\tcase SyntaxKind.LineCommentTrivia:\n\t\t\t\t\treplaceContent = newLineAndIndent();\n\t\t\t\t\tbreak;\n\t\t\t\tcase SyntaxKind.BlockCommentTrivia:\n\t\t\t\t\tif (lineBreak) {\n\t\t\t\t\t\treplaceContent = newLineAndIndent();\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// symbol following comment on the same line: keep on same line, separate with ' '\n\t\t\t\t\t\treplaceContent = ' ';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase SyntaxKind.ColonToken:\n\t\t\t\t\treplaceContent = ' ';\n\t\t\t\t\tbreak;\n\t\t\t\tcase SyntaxKind.StringLiteral:\n\t\t\t\t\tif (secondToken === SyntaxKind.ColonToken) {\n\t\t\t\t\t\treplaceContent = '';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t// fall through\n\t\t\t\tcase SyntaxKind.NullKeyword:\n\t\t\t\tcase SyntaxKind.TrueKeyword:\n\t\t\t\tcase SyntaxKind.FalseKeyword:\n\t\t\t\tcase SyntaxKind.NumericLiteral:\n\t\t\t\tcase SyntaxKind.CloseBraceToken:\n\t\t\t\tcase SyntaxKind.CloseBracketToken:\n\t\t\t\t\tif (secondToken === SyntaxKind.LineCommentTrivia || secondToken === SyntaxKind.BlockCommentTrivia) {\n\t\t\t\t\t\treplaceContent = ' ';\n\t\t\t\t\t} else if (secondToken !== SyntaxKind.CommaToken && secondToken !== SyntaxKind.EOF) {\n\t\t\t\t\t\thasError = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase SyntaxKind.Unknown:\n\t\t\t\t\thasError = true;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (lineBreak && (secondToken === SyntaxKind.LineCommentTrivia || secondToken === SyntaxKind.BlockCommentTrivia)) {\n\t\t\t\treplaceContent = newLineAndIndent();\n\t\t\t}\n\n\t\t}\n\t\tconst secondTokenStart = scanner.getTokenOffset() + formatTextStart;\n\t\taddEdit(replaceContent, firstTokenEnd, secondTokenStart);\n\t\tfirstToken = secondToken;\n\t}\n\treturn editOperations;\n}\n\nfunction repeat(s: string, count: number): string {\n\tlet result = '';\n\tfor (let i = 0; i < count; i++) {\n\t\tresult += s;\n\t}\n\treturn result;\n}\n\nfunction computeIndentLevel(content: string, options: FormattingOptions): number {\n\tlet i = 0;\n\tlet nChars = 0;\n\tconst tabSize = options.tabSize || 4;\n\twhile (i < content.length) {\n\t\tconst ch = content.charAt(i);\n\t\tif (ch === ' ') {\n\t\t\tnChars++;\n\t\t} else if (ch === '\\t') {\n\t\t\tnChars += tabSize;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn Math.floor(nChars / tabSize);\n}\n\nexport function getEOL(options: FormattingOptions, text: string): string {\n\tfor (let i = 0; i < text.length; i++) {\n\t\tconst ch = text.charAt(i);\n\t\tif (ch === '\\r') {\n\t\t\tif (i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n\t\t\t\treturn '\\r\\n';\n\t\t\t}\n\t\t\treturn '\\r';\n\t\t} else if (ch === '\\n') {\n\t\t\treturn '\\n';\n\t\t}\n\t}\n\treturn (options && options.eol) || '\\n';\n}\n\nexport function isEOL(text: string, offset: number) {\n\treturn '\\r\\n'.indexOf(text.charAt(offset)) !== -1;\n}\n"]}