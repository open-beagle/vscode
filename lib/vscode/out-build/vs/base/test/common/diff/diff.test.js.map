{"version":3,"file":"diff.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/test/common/diff/diff.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { LcsDiff, IDiffChange, StringDiffSequence } from 'vs/base/common/diff/diff';\n\nfunction createArray<T>(length: number, value: T): T[] {\n\tconst r: T[] = [];\n\tfor (let i = 0; i < length; i++) {\n\t\tr[i] = value;\n\t}\n\treturn r;\n}\n\nfunction maskBasedSubstring(str: string, mask: boolean[]): string {\n\tlet r = '';\n\tfor (let i = 0; i < str.length; i++) {\n\t\tif (mask[i]) {\n\t\t\tr += str.charAt(i);\n\t\t}\n\t}\n\treturn r;\n}\n\nfunction assertAnswer(originalStr: string, modifiedStr: string, changes: IDiffChange[], answerStr: string, onlyLength: boolean = false): void {\n\tlet originalMask = createArray(originalStr.length, true);\n\tlet modifiedMask = createArray(modifiedStr.length, true);\n\n\tlet i, j, change;\n\tfor (i = 0; i < changes.length; i++) {\n\t\tchange = changes[i];\n\n\t\tif (change.originalLength) {\n\t\t\tfor (j = 0; j < change.originalLength; j++) {\n\t\t\t\toriginalMask[change.originalStart + j] = false;\n\t\t\t}\n\t\t}\n\n\t\tif (change.modifiedLength) {\n\t\t\tfor (j = 0; j < change.modifiedLength; j++) {\n\t\t\t\tmodifiedMask[change.modifiedStart + j] = false;\n\t\t\t}\n\t\t}\n\t}\n\n\tlet originalAnswer = maskBasedSubstring(originalStr, originalMask);\n\tlet modifiedAnswer = maskBasedSubstring(modifiedStr, modifiedMask);\n\n\tif (onlyLength) {\n\t\tassert.strictEqual(originalAnswer.length, answerStr.length);\n\t\tassert.strictEqual(modifiedAnswer.length, answerStr.length);\n\t} else {\n\t\tassert.strictEqual(originalAnswer, answerStr);\n\t\tassert.strictEqual(modifiedAnswer, answerStr);\n\t}\n}\n\nfunction lcsInnerTest(originalStr: string, modifiedStr: string, answerStr: string, onlyLength: boolean = false): void {\n\tlet diff = new LcsDiff(new StringDiffSequence(originalStr), new StringDiffSequence(modifiedStr));\n\tlet changes = diff.ComputeDiff(false).changes;\n\tassertAnswer(originalStr, modifiedStr, changes, answerStr, onlyLength);\n}\n\nfunction stringPower(str: string, power: number): string {\n\tlet r = str;\n\tfor (let i = 0; i < power; i++) {\n\t\tr += r;\n\t}\n\treturn r;\n}\n\nfunction lcsTest(originalStr: string, modifiedStr: string, answerStr: string) {\n\tlcsInnerTest(originalStr, modifiedStr, answerStr);\n\tfor (let i = 2; i <= 5; i++) {\n\t\tlcsInnerTest(stringPower(originalStr, i), stringPower(modifiedStr, i), stringPower(answerStr, i), true);\n\t}\n}\n\nsuite('Diff', () => {\n\ttest('LcsDiff - different strings tests', function () {\n\t\tthis.timeout(10000);\n\t\tlcsTest('heLLo world', 'hello orlando', 'heo orld');\n\t\tlcsTest('abcde', 'acd', 'acd'); // simple\n\t\tlcsTest('abcdbce', 'bcede', 'bcde'); // skip\n\t\tlcsTest('abcdefgabcdefg', 'bcehafg', 'bceafg'); // long\n\t\tlcsTest('abcde', 'fgh', ''); // no match\n\t\tlcsTest('abcfabc', 'fabc', 'fabc');\n\t\tlcsTest('0azby0', '9axbzby9', 'azby');\n\t\tlcsTest('0abc00000', '9a1b2c399999', 'abc');\n\n\t\tlcsTest('fooBar', 'myfooBar', 'fooBar'); // all insertions\n\t\tlcsTest('fooBar', 'fooMyBar', 'fooBar'); // all insertions\n\t\tlcsTest('fooBar', 'fooBar', 'fooBar'); // identical sequences\n\t});\n});\n\nsuite('Diff - Ported from VS', () => {\n\ttest('using continue processing predicate to quit early', function () {\n\t\tlet left = 'abcdef';\n\t\tlet right = 'abxxcyyydzzzzezzzzzzzzzzzzzzzzzzzzf';\n\n\t\t// We use a long non-matching portion at the end of the right-side string, so the backwards tracking logic\n\t\t// doesn't get there first.\n\t\tlet predicateCallCount = 0;\n\n\t\tlet diff = new LcsDiff(new StringDiffSequence(left), new StringDiffSequence(right), function (leftIndex, longestMatchSoFar) {\n\t\t\tassert.strictEqual(predicateCallCount, 0);\n\n\t\t\tpredicateCallCount++;\n\n\t\t\tassert.strictEqual(leftIndex, 1);\n\n\t\t\t// cancel processing\n\t\t\treturn false;\n\t\t});\n\t\tlet changes = diff.ComputeDiff(true).changes;\n\n\t\tassert.strictEqual(predicateCallCount, 1);\n\n\t\t// Doesn't include 'c', 'd', or 'e', since we quit on the first request\n\t\tassertAnswer(left, right, changes, 'abf');\n\n\n\n\t\t// Cancel after the first match ('c')\n\t\tdiff = new LcsDiff(new StringDiffSequence(left), new StringDiffSequence(right), function (leftIndex, longestMatchSoFar) {\n\t\t\tassert(longestMatchSoFar <= 1); // We never see a match of length > 1\n\n\t\t\t// Continue processing as long as there hasn't been a match made.\n\t\t\treturn longestMatchSoFar < 1;\n\t\t});\n\t\tchanges = diff.ComputeDiff(true).changes;\n\n\t\tassertAnswer(left, right, changes, 'abcf');\n\n\n\n\t\t// Cancel after the second match ('d')\n\t\tdiff = new LcsDiff(new StringDiffSequence(left), new StringDiffSequence(right), function (leftIndex, longestMatchSoFar) {\n\t\t\tassert(longestMatchSoFar <= 2); // We never see a match of length > 2\n\n\t\t\t// Continue processing as long as there hasn't been a match made.\n\t\t\treturn longestMatchSoFar < 2;\n\t\t});\n\t\tchanges = diff.ComputeDiff(true).changes;\n\n\t\tassertAnswer(left, right, changes, 'abcdf');\n\n\n\n\t\t// Cancel *one iteration* after the second match ('d')\n\t\tlet hitSecondMatch = false;\n\t\tdiff = new LcsDiff(new StringDiffSequence(left), new StringDiffSequence(right), function (leftIndex, longestMatchSoFar) {\n\t\t\tassert(longestMatchSoFar <= 2); // We never see a match of length > 2\n\n\t\t\tlet hitYet = hitSecondMatch;\n\t\t\thitSecondMatch = longestMatchSoFar > 1;\n\t\t\t// Continue processing as long as there hasn't been a match made.\n\t\t\treturn !hitYet;\n\t\t});\n\t\tchanges = diff.ComputeDiff(true).changes;\n\n\t\tassertAnswer(left, right, changes, 'abcdf');\n\n\n\n\t\t// Cancel after the third and final match ('e')\n\t\tdiff = new LcsDiff(new StringDiffSequence(left), new StringDiffSequence(right), function (leftIndex, longestMatchSoFar) {\n\t\t\tassert(longestMatchSoFar <= 3); // We never see a match of length > 3\n\n\t\t\t// Continue processing as long as there hasn't been a match made.\n\t\t\treturn longestMatchSoFar < 3;\n\t\t});\n\t\tchanges = diff.ComputeDiff(true).changes;\n\n\t\tassertAnswer(left, right, changes, 'abcdef');\n\t});\n});\n"]}