{"version":3,"file":"skipList.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/test/common/skipList.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAQhG,KAAK,CAAC,UAAU,EAAE;QAEjB,SAAS,YAAY,CAAI,IAAsB,EAAE,QAAa;YAC7D,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;YAC/C,MAAM,CAAC,eAAe,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,QAAQ,CAAC,CAAC;YAErD,IAAI,iBAAiB,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACnE,MAAM,CAAC,eAAe,CAAC,iBAAiB,EAAE,QAAQ,CAAC,CAAC;YAEpD,IAAI,cAAc,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACtD,MAAM,CAAC,eAAe,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;YAEjD,IAAI,CAAC,GAAG,CAAC,CAAC;YACV,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,IAAI,EAAE,GAAG,EAAE,EAAE;gBACjC,MAAM,CAAC,EAAE,CAAC,GAAG,KAAK,IAAI,CAAC,CAAC;gBACxB,MAAM,CAAC,eAAe,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAC9C,CAAC,CAAC,CAAC;QACJ,CAAC;QAED,SAAS,UAAU,CAAI,IAAsB,EAAE,QAAa;YAC3D,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;YAC/C,MAAM,CAAC,eAAe,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,QAAQ,CAAC,CAAC;YAEnD,IAAI,eAAe,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACjE,MAAM,CAAC,eAAe,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC;YAElD,IAAI,YAAY,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACpD,MAAM,CAAC,eAAe,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;YAE/C,IAAI,CAAC,GAAG,CAAC,CAAC;YACV,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;gBACjC,MAAM,CAAC,EAAE,CAAC,GAAG,KAAK,IAAI,CAAC,CAAC;gBACxB,MAAM,CAAC,eAAe,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAC5C,CAAC,CAAC,CAAC;QACJ,CAAC;QAED,IAAI,CAAC,gBAAgB,EAAE;YACtB,IAAI,IAAI,GAAG,IAAI,mBAAQ,CAAiB,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YAEzD,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;YAC3C,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACf,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACnC,YAAY,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAExB,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACf,YAAY,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAExB,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACf,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACf,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACnC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACnC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACnC,YAAY,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAE9B,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;YAE3C,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YACzC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;YAC3C,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACnC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAEnC,YAAY,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC5B,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,UAAU,EAAE;YAChB,IAAI,IAAI,GAAG,IAAI,mBAAQ,CAAkB,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YAC1D,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YAClB,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YAClB,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YAClB,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YAClB,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;YACnB,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;YACnB,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;YACnB,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;YAEnB,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;YAE/C,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;YACnB,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;YACrC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,cAAc,EAAE;YACpB,IAAI,IAAI,GAAG,IAAI,mBAAQ,CAAkB,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC;YAC9D,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YAClB,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YAClB,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YAClB,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YAClB,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YAClB,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YAClB,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YAClB,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YAClB,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YAClB,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;YACnB,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;YACnB,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;YAEnB,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;QAEH,MAAM,GAAG,GAAG,CAAC,CAAS,EAAE,CAAS,EAAU,EAAE;YAC5C,IAAI,CAAC,GAAG,CAAC,EAAE;gBACV,OAAO,CAAC,CAAC,CAAC;aACV;iBAAM,IAAI,CAAC,GAAG,CAAC,EAAE;gBACjB,OAAO,CAAC,CAAC;aACT;iBAAM;gBACN,OAAO,CAAC,CAAC;aACT;QACF,CAAC,CAAC;QAEF,SAAS,iBAAiB,CAAC,KAAe,EAAE,OAAe;YAC1D,IAAI,GAAG,GAAG,CAAA,GAAA,qBAAY,CAAA,CAAC,KAAK,EAAE,OAAO,EAAE,GAAG,CAAC,CAAC;YAC5C,IAAI,GAAG,IAAI,CAAC,EAAE;gBACb,KAAK,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC;aACrB;iBAAM;gBACN,GAAG,GAAG,CAAC,GAAG,CAAC;gBACX,iEAAiE;gBACjE,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC;aAC9B;YACD,OAAO,KAAK,CAAC;QACd,CAAC;QAED,SAAS,cAAc,CAAC,KAAe,EAAE,OAAe;YACvD,IAAI,GAAG,GAAG,CAAA,GAAA,qBAAY,CAAA,CAAC,KAAK,EAAE,OAAO,EAAE,GAAG,CAAC,CAAC;YAC5C,IAAI,GAAG,IAAI,CAAC,EAAE;gBACb,wDAAwD;gBACxD,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;aACrB;YACD,OAAO,KAAK,CAAC;QACd,CAAC;QAGD,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAEjB,OAAO;YACP,MAAM,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;YACpB,MAAM,MAAM,GAAG,IAAI,GAAG,EAAU,CAAC;YACjC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;gBAC7B,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC;gBAC5C,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;aAClB;YACD,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAEzB,OAAO;YACP,IAAI,IAAI,GAAG,IAAI,mBAAQ,CAAkB,GAAG,EAAE,GAAG,CAAC,CAAC;YACnD,IAAI,EAAE,GAAG,IAAI,qBAAS,CAAC,IAAI,CAAC,CAAC;YAC7B,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;YAC/C,EAAE,CAAC,IAAI,EAAE,CAAC;YACV,OAAO,CAAC,GAAG,CAAC,UAAU,IAAI,CAAC,IAAI,mBAAmB,EAAE,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;YACpE,IAAI,KAAK,GAAa,EAAE,CAAC;YACzB,EAAE,GAAG,IAAI,qBAAS,CAAC,IAAI,CAAC,CAAC;YACzB,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,GAAG,iBAAiB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;YACjE,EAAE,CAAC,IAAI,EAAE,CAAC;YACV,OAAO,CAAC,GAAG,CAAC,WAAW,KAAK,CAAC,MAAM,mBAAmB,EAAE,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;YAExE,MAAM;YACN,EAAE,GAAG,IAAI,qBAAS,CAAC,IAAI,CAAC,CAAC;YACzB,IAAI,UAAU,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;YACvD,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;gBACxB,IAAI,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO;gBAClC,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,mBAAmB,GAAG,GAAG,CAAC,CAAC;gBACjD,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO;YACxB,CAAC,CAAC,CAAC;YACH,EAAE,CAAC,IAAI,EAAE,CAAC;YACV,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;YACnH,EAAE,GAAG,IAAI,qBAAS,CAAC,IAAI,CAAC,CAAC;YACzB,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;gBACxB,IAAI,GAAG,GAAG,CAAA,GAAA,qBAAY,CAAA,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,OAAO;gBAChD,OAAO,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,EAAE,oBAAoB,GAAG,GAAG,CAAC,CAAC;gBACrD,CAAA,GAAA,qBAAY,CAAA,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,OAAO;YACxC,CAAC,CAAC,CAAC;YACH,EAAE,CAAC,IAAI,EAAE,CAAC;YACV,OAAO,CAAC,GAAG,CAAC,oBAAoB,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;YAGpH,SAAS;YACT,EAAE,GAAG,IAAI,qBAAS,CAAC,IAAI,CAAC,CAAC;YACzB,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;gBACxB,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;YACvB,CAAC,CAAC,CAAC;YACH,EAAE,CAAC,IAAI,EAAE,CAAC;YACV,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;YAC3G,EAAE,GAAG,IAAI,qBAAS,CAAC,IAAI,CAAC,CAAC;YACzB,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;gBACxB,KAAK,GAAG,iBAAiB,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC;YACxC,CAAC,CAAC,CAAC;YACH,EAAE,CAAC,IAAI,EAAE,CAAC;YACV,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;YAE5G,SAAS;YACT,EAAE,GAAG,IAAI,qBAAS,CAAC,IAAI,CAAC,CAAC;YACzB,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;gBACxB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO;gBACzB,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO;YAC3B,CAAC,CAAC,CAAC;YACH,EAAE,CAAC,IAAI,EAAE,CAAC;YACV,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;YACjH,EAAE,GAAG,IAAI,qBAAS,CAAC,IAAI,CAAC,CAAC;YACzB,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;gBACxB,KAAK,GAAG,cAAc,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,OAAO;gBAC3C,KAAK,GAAG,cAAc,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO;YAC7C,CAAC,CAAC,CAAC;YACH,EAAE,CAAC,IAAI,EAAE,CAAC;YACV,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;QACnH,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { SkipList } from 'vs/base/common/skipList';\nimport { StopWatch } from 'vs/base/common/stopwatch';\nimport { binarySearch } from 'vs/base/common/arrays';\n\n\nsuite('SkipList', function () {\n\n\tfunction assertValues<V>(list: SkipList<any, V>, expected: V[]) {\n\t\tassert.strictEqual(list.size, expected.length);\n\t\tassert.deepStrictEqual([...list.values()], expected);\n\n\t\tlet valuesFromEntries = [...list.entries()].map(entry => entry[1]);\n\t\tassert.deepStrictEqual(valuesFromEntries, expected);\n\n\t\tlet valuesFromIter = [...list].map(entry => entry[1]);\n\t\tassert.deepStrictEqual(valuesFromIter, expected);\n\n\t\tlet i = 0;\n\t\tlist.forEach((value, _key, map) => {\n\t\t\tassert.ok(map === list);\n\t\t\tassert.deepStrictEqual(value, expected[i++]);\n\t\t});\n\t}\n\n\tfunction assertKeys<K>(list: SkipList<K, any>, expected: K[]) {\n\t\tassert.strictEqual(list.size, expected.length);\n\t\tassert.deepStrictEqual([...list.keys()], expected);\n\n\t\tlet keysFromEntries = [...list.entries()].map(entry => entry[0]);\n\t\tassert.deepStrictEqual(keysFromEntries, expected);\n\n\t\tlet keysFromIter = [...list].map(entry => entry[0]);\n\t\tassert.deepStrictEqual(keysFromIter, expected);\n\n\t\tlet i = 0;\n\t\tlist.forEach((_value, key, map) => {\n\t\t\tassert.ok(map === list);\n\t\t\tassert.deepStrictEqual(key, expected[i++]);\n\t\t});\n\t}\n\n\ttest('set/get/delete', function () {\n\t\tlet list = new SkipList<number, number>((a, b) => a - b);\n\n\t\tassert.strictEqual(list.get(3), undefined);\n\t\tlist.set(3, 1);\n\t\tassert.strictEqual(list.get(3), 1);\n\t\tassertValues(list, [1]);\n\n\t\tlist.set(3, 3);\n\t\tassertValues(list, [3]);\n\n\t\tlist.set(1, 1);\n\t\tlist.set(4, 4);\n\t\tassert.strictEqual(list.get(3), 3);\n\t\tassert.strictEqual(list.get(1), 1);\n\t\tassert.strictEqual(list.get(4), 4);\n\t\tassertValues(list, [1, 3, 4]);\n\n\t\tassert.strictEqual(list.delete(17), false);\n\n\t\tassert.strictEqual(list.delete(1), true);\n\t\tassert.strictEqual(list.get(1), undefined);\n\t\tassert.strictEqual(list.get(3), 3);\n\t\tassert.strictEqual(list.get(4), 4);\n\n\t\tassertValues(list, [3, 4]);\n\t});\n\n\ttest('Figure 3', function () {\n\t\tlet list = new SkipList<number, boolean>((a, b) => a - b);\n\t\tlist.set(3, true);\n\t\tlist.set(6, true);\n\t\tlist.set(7, true);\n\t\tlist.set(9, true);\n\t\tlist.set(12, true);\n\t\tlist.set(19, true);\n\t\tlist.set(21, true);\n\t\tlist.set(25, true);\n\n\t\tassertKeys(list, [3, 6, 7, 9, 12, 19, 21, 25]);\n\n\t\tlist.set(17, true);\n\t\tassert.deepStrictEqual(list.size, 9);\n\t\tassertKeys(list, [3, 6, 7, 9, 12, 17, 19, 21, 25]);\n\t});\n\n\ttest('capacity max', function () {\n\t\tlet list = new SkipList<number, boolean>((a, b) => a - b, 10);\n\t\tlist.set(1, true);\n\t\tlist.set(2, true);\n\t\tlist.set(3, true);\n\t\tlist.set(4, true);\n\t\tlist.set(5, true);\n\t\tlist.set(6, true);\n\t\tlist.set(7, true);\n\t\tlist.set(8, true);\n\t\tlist.set(9, true);\n\t\tlist.set(10, true);\n\t\tlist.set(11, true);\n\t\tlist.set(12, true);\n\n\t\tassertKeys(list, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]);\n\t});\n\n\tconst cmp = (a: number, b: number): number => {\n\t\tif (a < b) {\n\t\t\treturn -1;\n\t\t} else if (a > b) {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t};\n\n\tfunction insertArraySorted(array: number[], element: number) {\n\t\tlet idx = binarySearch(array, element, cmp);\n\t\tif (idx >= 0) {\n\t\t\tarray[idx] = element;\n\t\t} else {\n\t\t\tidx = ~idx;\n\t\t\t// array = array.slice(0, idx).concat(element, array.slice(idx));\n\t\t\tarray.splice(idx, 0, element);\n\t\t}\n\t\treturn array;\n\t}\n\n\tfunction delArraySorted(array: number[], element: number) {\n\t\tlet idx = binarySearch(array, element, cmp);\n\t\tif (idx >= 0) {\n\t\t\t// array = array.slice(0, idx).concat(array.slice(idx));\n\t\t\tarray.splice(idx, 1);\n\t\t}\n\t\treturn array;\n\t}\n\n\n\ttest.skip('perf', function () {\n\n\t\t// data\n\t\tconst max = 2 ** 16;\n\t\tconst values = new Set<number>();\n\t\tfor (let i = 0; i < max; i++) {\n\t\t\tlet value = Math.floor(Math.random() * max);\n\t\t\tvalues.add(value);\n\t\t}\n\t\tconsole.log(values.size);\n\n\t\t// init\n\t\tlet list = new SkipList<number, boolean>(cmp, max);\n\t\tlet sw = new StopWatch(true);\n\t\tvalues.forEach(value => list.set(value, true));\n\t\tsw.stop();\n\t\tconsole.log(`[LIST] ${list.size} elements after ${sw.elapsed()}ms`);\n\t\tlet array: number[] = [];\n\t\tsw = new StopWatch(true);\n\t\tvalues.forEach(value => array = insertArraySorted(array, value));\n\t\tsw.stop();\n\t\tconsole.log(`[ARRAY] ${array.length} elements after ${sw.elapsed()}ms`);\n\n\t\t// get\n\t\tsw = new StopWatch(true);\n\t\tlet someValues = [...values].slice(0, values.size / 4);\n\t\tsomeValues.forEach(key => {\n\t\t\tlet value = list.get(key); // find\n\t\t\tconsole.assert(value, '[LIST] must have ' + key);\n\t\t\tlist.get(-key); // miss\n\t\t});\n\t\tsw.stop();\n\t\tconsole.log(`[LIST] retrieve ${sw.elapsed()}ms (${(sw.elapsed() / (someValues.length * 2)).toPrecision(4)}ms/op)`);\n\t\tsw = new StopWatch(true);\n\t\tsomeValues.forEach(key => {\n\t\t\tlet idx = binarySearch(array, key, cmp); // find\n\t\t\tconsole.assert(idx >= 0, '[ARRAY] must have ' + key);\n\t\t\tbinarySearch(array, -key, cmp); // miss\n\t\t});\n\t\tsw.stop();\n\t\tconsole.log(`[ARRAY] retrieve ${sw.elapsed()}ms (${(sw.elapsed() / (someValues.length * 2)).toPrecision(4)}ms/op)`);\n\n\n\t\t// insert\n\t\tsw = new StopWatch(true);\n\t\tsomeValues.forEach(key => {\n\t\t\tlist.set(-key, false);\n\t\t});\n\t\tsw.stop();\n\t\tconsole.log(`[LIST] insert ${sw.elapsed()}ms (${(sw.elapsed() / someValues.length).toPrecision(4)}ms/op)`);\n\t\tsw = new StopWatch(true);\n\t\tsomeValues.forEach(key => {\n\t\t\tarray = insertArraySorted(array, -key);\n\t\t});\n\t\tsw.stop();\n\t\tconsole.log(`[ARRAY] insert ${sw.elapsed()}ms (${(sw.elapsed() / someValues.length).toPrecision(4)}ms/op)`);\n\n\t\t// delete\n\t\tsw = new StopWatch(true);\n\t\tsomeValues.forEach(key => {\n\t\t\tlist.delete(key); // find\n\t\t\tlist.delete(-key); // miss\n\t\t});\n\t\tsw.stop();\n\t\tconsole.log(`[LIST] delete ${sw.elapsed()}ms (${(sw.elapsed() / (someValues.length * 2)).toPrecision(4)}ms/op)`);\n\t\tsw = new StopWatch(true);\n\t\tsomeValues.forEach(key => {\n\t\t\tarray = delArraySorted(array, key); // find\n\t\t\tarray = delArraySorted(array, -key); // miss\n\t\t});\n\t\tsw.stop();\n\t\tconsole.log(`[ARRAY] delete ${sw.elapsed()}ms (${(sw.elapsed() / (someValues.length * 2)).toPrecision(4)}ms/op)`);\n\t});\n});\n"]}