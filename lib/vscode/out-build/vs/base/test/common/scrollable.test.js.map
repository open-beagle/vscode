{"version":3,"file":"scrollable.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/test/common/scrollable.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { SmoothScrollingOperation, SmoothScrollingUpdate } from 'vs/base/common/scrollable';\n\nclass TestSmoothScrollingOperation extends SmoothScrollingOperation {\n\n\tconstructor(from: number, to: number, viewportSize: number, startTime: number, duration: number) {\n\t\tduration = duration + 10;\n\t\tstartTime = startTime - 10;\n\n\t\tsuper(\n\t\t\t{ scrollLeft: 0, scrollTop: from, width: 0, height: viewportSize },\n\t\t\t{ scrollLeft: 0, scrollTop: to, width: 0, height: viewportSize },\n\t\t\tstartTime,\n\t\t\tduration\n\t\t);\n\t}\n\n\tpublic testTick(now: number): SmoothScrollingUpdate {\n\t\treturn this._tick(now);\n\t}\n\n}\n\nsuite('SmoothScrollingOperation', () => {\n\n\tconst VIEWPORT_HEIGHT = 800;\n\tconst ANIMATION_DURATION = 125;\n\tconst LINE_HEIGHT = 20;\n\n\tfunction extractLines(scrollable: TestSmoothScrollingOperation, now: number): [number, number] {\n\t\tlet scrollTop = scrollable.testTick(now).scrollTop;\n\t\tlet scrollBottom = scrollTop + VIEWPORT_HEIGHT;\n\n\t\tconst startLineNumber = Math.floor(scrollTop / LINE_HEIGHT);\n\t\tconst endLineNumber = Math.ceil(scrollBottom / LINE_HEIGHT);\n\n\t\treturn [startLineNumber, endLineNumber];\n\t}\n\n\tfunction simulateSmoothScroll(from: number, to: number): [number, number][] {\n\t\tconst scrollable = new TestSmoothScrollingOperation(from, to, VIEWPORT_HEIGHT, 0, ANIMATION_DURATION);\n\n\t\tlet result: [number, number][] = [], resultLen = 0;\n\t\tresult[resultLen++] = extractLines(scrollable, 0);\n\t\tresult[resultLen++] = extractLines(scrollable, 25);\n\t\tresult[resultLen++] = extractLines(scrollable, 50);\n\t\tresult[resultLen++] = extractLines(scrollable, 75);\n\t\tresult[resultLen++] = extractLines(scrollable, 100);\n\t\tresult[resultLen++] = extractLines(scrollable, 125);\n\t\treturn result;\n\t}\n\n\tfunction assertSmoothScroll(from: number, to: number, expected: [number, number][]): void {\n\t\tconst actual = simulateSmoothScroll(from, to);\n\t\tassert.deepStrictEqual(actual, expected);\n\t}\n\n\ttest('scroll 25 lines (40 fit)', () => {\n\t\tassertSmoothScroll(0, 500, [\n\t\t\t[5, 46],\n\t\t\t[14, 55],\n\t\t\t[20, 61],\n\t\t\t[23, 64],\n\t\t\t[24, 65],\n\t\t\t[25, 65],\n\t\t]);\n\t});\n\n\ttest('scroll 75 lines (40 fit)', () => {\n\t\tassertSmoothScroll(0, 1500, [\n\t\t\t[15, 56],\n\t\t\t[44, 85],\n\t\t\t[62, 103],\n\t\t\t[71, 112],\n\t\t\t[74, 115],\n\t\t\t[75, 115],\n\t\t]);\n\t});\n\n\ttest('scroll 100 lines (40 fit)', () => {\n\t\tassertSmoothScroll(0, 2000, [\n\t\t\t[20, 61],\n\t\t\t[59, 100],\n\t\t\t[82, 123],\n\t\t\t[94, 135],\n\t\t\t[99, 140],\n\t\t\t[100, 140],\n\t\t]);\n\t});\n\n\ttest('scroll 125 lines (40 fit)', () => {\n\t\tassertSmoothScroll(0, 2500, [\n\t\t\t[16, 57],\n\t\t\t[29, 70],\n\t\t\t[107, 148],\n\t\t\t[119, 160],\n\t\t\t[124, 165],\n\t\t\t[125, 165],\n\t\t]);\n\t});\n\n\ttest('scroll 500 lines (40 fit)', () => {\n\t\tassertSmoothScroll(0, 10000, [\n\t\t\t[16, 57],\n\t\t\t[29, 70],\n\t\t\t[482, 523],\n\t\t\t[494, 535],\n\t\t\t[499, 540],\n\t\t\t[500, 540],\n\t\t]);\n\t});\n\n});\n"]}