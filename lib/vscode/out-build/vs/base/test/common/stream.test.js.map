{"version":3,"file":"stream.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/test/common/stream.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { isReadableStream, newWriteableStream, Readable, consumeReadable, peekReadable, consumeStream, ReadableStream, toStream, toReadable, transform, peekStream, isReadableBufferedStream, listenStream, prefixedReadable, prefixedStream } from 'vs/base/common/stream';\nimport { timeout } from 'vs/base/common/async';\n\nsuite('Stream', () => {\n\n\ttest('isReadableStream', () => {\n\t\tassert.ok(!isReadableStream(Object.create(null)));\n\t\tassert.ok(isReadableStream(newWriteableStream(d => d)));\n\t});\n\n\ttest('isReadableBufferedStream', async () => {\n\t\tassert.ok(!isReadableBufferedStream(Object.create(null)));\n\n\t\tconst stream = newWriteableStream(d => d);\n\t\tstream.end();\n\t\tconst bufferedStream = await peekStream(stream, 1);\n\t\tassert.ok(isReadableBufferedStream(bufferedStream));\n\t});\n\n\ttest('WriteableStream - basics', () => {\n\t\tconst stream = newWriteableStream<string>(strings => strings.join());\n\n\t\tlet error = false;\n\t\tstream.on('error', e => {\n\t\t\terror = true;\n\t\t});\n\n\t\tlet end = false;\n\t\tstream.on('end', () => {\n\t\t\tend = true;\n\t\t});\n\n\t\tstream.write('Hello');\n\n\t\tconst chunks: string[] = [];\n\t\tstream.on('data', data => {\n\t\t\tchunks.push(data);\n\t\t});\n\n\t\tassert.strictEqual(chunks[0], 'Hello');\n\n\t\tstream.write('World');\n\t\tassert.strictEqual(chunks[1], 'World');\n\n\t\tassert.strictEqual(error, false);\n\t\tassert.strictEqual(end, false);\n\n\t\tstream.pause();\n\t\tstream.write('1');\n\t\tstream.write('2');\n\t\tstream.write('3');\n\n\t\tassert.strictEqual(chunks.length, 2);\n\n\t\tstream.resume();\n\n\t\tassert.strictEqual(chunks.length, 3);\n\t\tassert.strictEqual(chunks[2], '1,2,3');\n\n\t\tstream.error(new Error());\n\t\tassert.strictEqual(error, true);\n\n\t\terror = false;\n\t\tstream.error(new Error());\n\t\tassert.strictEqual(error, true);\n\n\t\tstream.end('Final Bit');\n\t\tassert.strictEqual(chunks.length, 4);\n\t\tassert.strictEqual(chunks[3], 'Final Bit');\n\t\tassert.strictEqual(end, true);\n\n\t\tstream.destroy();\n\n\t\tstream.write('Unexpected');\n\t\tassert.strictEqual(chunks.length, 4);\n\t});\n\n\ttest('WriteableStream - end with empty string works', async () => {\n\t\tconst reducer = (strings: string[]) => strings.length > 0 ? strings.join() : 'error';\n\t\tconst stream = newWriteableStream<string>(reducer);\n\t\tstream.end('');\n\n\t\tconst result = await consumeStream(stream, reducer);\n\t\tassert.strictEqual(result, '');\n\t});\n\n\ttest('WriteableStream - end with error works', async () => {\n\t\tconst reducer = (errors: Error[]) => errors.length > 0 ? errors[0] : null as unknown as Error;\n\t\tconst stream = newWriteableStream<Error>(reducer);\n\t\tstream.end(new Error('error'));\n\n\t\tconst result = await consumeStream(stream, reducer);\n\t\tassert.ok(result instanceof Error);\n\t});\n\n\ttest('WriteableStream - removeListener', () => {\n\t\tconst stream = newWriteableStream<string>(strings => strings.join());\n\n\t\tlet error = false;\n\t\tconst errorListener = (e: Error) => {\n\t\t\terror = true;\n\t\t};\n\t\tstream.on('error', errorListener);\n\n\t\tlet data = false;\n\t\tconst dataListener = () => {\n\t\t\tdata = true;\n\t\t};\n\t\tstream.on('data', dataListener);\n\n\t\tstream.write('Hello');\n\t\tassert.strictEqual(data, true);\n\n\t\tdata = false;\n\t\tstream.removeListener('data', dataListener);\n\n\t\tstream.write('World');\n\t\tassert.strictEqual(data, false);\n\n\t\tstream.error(new Error());\n\t\tassert.strictEqual(error, true);\n\n\t\terror = false;\n\t\tstream.removeListener('error', errorListener);\n\n\t\t// always leave at least one error listener to streams to avoid unexpected errors during test running\n\t\tstream.on('error', () => { });\n\t\tstream.error(new Error());\n\t\tassert.strictEqual(error, false);\n\t});\n\n\ttest('WriteableStream - highWaterMark', async () => {\n\t\tconst stream = newWriteableStream<string>(strings => strings.join(), { highWaterMark: 3 });\n\n\t\tlet res = stream.write('1');\n\t\tassert.ok(!res);\n\n\t\tres = stream.write('2');\n\t\tassert.ok(!res);\n\n\t\tres = stream.write('3');\n\t\tassert.ok(!res);\n\n\t\tlet promise1 = stream.write('4');\n\t\tassert.ok(promise1 instanceof Promise);\n\n\t\tlet promise2 = stream.write('5');\n\t\tassert.ok(promise2 instanceof Promise);\n\n\t\tlet drained1 = false;\n\t\t(async () => {\n\t\t\tawait promise1;\n\t\t\tdrained1 = true;\n\t\t})();\n\n\t\tlet drained2 = false;\n\t\t(async () => {\n\t\t\tawait promise2;\n\t\t\tdrained2 = true;\n\t\t})();\n\n\t\tlet data: string | undefined = undefined;\n\t\tstream.on('data', chunk => {\n\t\t\tdata = chunk;\n\t\t});\n\t\tassert.ok(data);\n\n\t\tawait timeout(0);\n\t\tassert.strictEqual(drained1, true);\n\t\tassert.strictEqual(drained2, true);\n\t});\n\n\ttest('consumeReadable', () => {\n\t\tconst readable = arrayToReadable(['1', '2', '3', '4', '5']);\n\t\tconst consumed = consumeReadable(readable, strings => strings.join());\n\t\tassert.strictEqual(consumed, '1,2,3,4,5');\n\t});\n\n\ttest('peekReadable', () => {\n\t\tfor (let i = 0; i < 5; i++) {\n\t\t\tconst readable = arrayToReadable(['1', '2', '3', '4', '5']);\n\n\t\t\tconst consumedOrReadable = peekReadable(readable, strings => strings.join(), i);\n\t\t\tif (typeof consumedOrReadable === 'string') {\n\t\t\t\tassert.fail('Unexpected result');\n\t\t\t} else {\n\t\t\t\tconst consumed = consumeReadable(consumedOrReadable, strings => strings.join());\n\t\t\t\tassert.strictEqual(consumed, '1,2,3,4,5');\n\t\t\t}\n\t\t}\n\n\t\tlet readable = arrayToReadable(['1', '2', '3', '4', '5']);\n\t\tlet consumedOrReadable = peekReadable(readable, strings => strings.join(), 5);\n\t\tassert.strictEqual(consumedOrReadable, '1,2,3,4,5');\n\n\t\treadable = arrayToReadable(['1', '2', '3', '4', '5']);\n\t\tconsumedOrReadable = peekReadable(readable, strings => strings.join(), 6);\n\t\tassert.strictEqual(consumedOrReadable, '1,2,3,4,5');\n\t});\n\n\ttest('peekReadable - error handling', async () => {\n\n\t\t// 0 Chunks\n\t\tlet stream = newWriteableStream(data => data);\n\n\t\tlet error: Error | undefined = undefined;\n\t\tlet promise = (async () => {\n\t\t\ttry {\n\t\t\t\tawait peekStream(stream, 1);\n\t\t\t} catch (err) {\n\t\t\t\terror = err;\n\t\t\t}\n\t\t})();\n\n\t\tstream.error(new Error());\n\t\tawait promise;\n\n\t\tassert.ok(error);\n\n\t\t// 1 Chunk\n\t\tstream = newWriteableStream(data => data);\n\n\t\terror = undefined;\n\t\tpromise = (async () => {\n\t\t\ttry {\n\t\t\t\tawait peekStream(stream, 1);\n\t\t\t} catch (err) {\n\t\t\t\terror = err;\n\t\t\t}\n\t\t})();\n\n\t\tstream.write('foo');\n\t\tstream.error(new Error());\n\t\tawait promise;\n\n\t\tassert.ok(error);\n\n\t\t// 2 Chunks\n\t\tstream = newWriteableStream(data => data);\n\n\t\terror = undefined;\n\t\tpromise = (async () => {\n\t\t\ttry {\n\t\t\t\tawait peekStream(stream, 1);\n\t\t\t} catch (err) {\n\t\t\t\terror = err;\n\t\t\t}\n\t\t})();\n\n\t\tstream.write('foo');\n\t\tstream.write('bar');\n\t\tstream.error(new Error());\n\t\tawait promise;\n\n\t\tassert.ok(!error);\n\n\t\tstream.on('error', err => error = err);\n\t\tstream.on('data', chunk => { });\n\t\tassert.ok(error);\n\t});\n\n\tfunction arrayToReadable<T>(array: T[]): Readable<T> {\n\t\treturn {\n\t\t\tread: () => array.shift() || null\n\t\t};\n\t}\n\n\tfunction readableToStream(readable: Readable<string>): ReadableStream<string> {\n\t\tconst stream = newWriteableStream<string>(strings => strings.join());\n\n\t\t// Simulate async behavior\n\t\tsetTimeout(() => {\n\t\t\tlet chunk: string | null = null;\n\t\t\twhile ((chunk = readable.read()) !== null) {\n\t\t\t\tstream.write(chunk);\n\t\t\t}\n\n\t\t\tstream.end();\n\t\t}, 0);\n\n\t\treturn stream;\n\t}\n\n\ttest('consumeStream', async () => {\n\t\tconst stream = readableToStream(arrayToReadable(['1', '2', '3', '4', '5']));\n\t\tconst consumed = await consumeStream(stream, strings => strings.join());\n\t\tassert.strictEqual(consumed, '1,2,3,4,5');\n\t});\n\n\ttest('consumeStream - without reducer', async () => {\n\t\tconst stream = readableToStream(arrayToReadable(['1', '2', '3', '4', '5']));\n\t\tconst consumed = await consumeStream(stream);\n\t\tassert.strictEqual(consumed, undefined);\n\t});\n\n\ttest('consumeStream - without reducer and error', async () => {\n\t\tconst stream = newWriteableStream<string>(strings => strings.join());\n\t\tstream.error(new Error());\n\n\t\tconst consumed = await consumeStream(stream);\n\t\tassert.strictEqual(consumed, undefined);\n\t});\n\n\ttest('listenStream', () => {\n\t\tconst stream = newWriteableStream<string>(strings => strings.join());\n\n\t\tlet error = false;\n\t\tlet end = false;\n\t\tlet data = '';\n\n\t\tlistenStream(stream, {\n\t\t\tonData: d => {\n\t\t\t\tdata = d;\n\t\t\t},\n\t\t\tonError: e => {\n\t\t\t\terror = true;\n\t\t\t},\n\t\t\tonEnd: () => {\n\t\t\t\tend = true;\n\t\t\t}\n\t\t});\n\n\t\tstream.write('Hello');\n\n\t\tassert.strictEqual(data, 'Hello');\n\n\t\tstream.write('World');\n\t\tassert.strictEqual(data, 'World');\n\n\t\tassert.strictEqual(error, false);\n\t\tassert.strictEqual(end, false);\n\n\t\tstream.error(new Error());\n\t\tassert.strictEqual(error, true);\n\n\t\tstream.end('Final Bit');\n\t\tassert.strictEqual(end, true);\n\t});\n\n\ttest('peekStream', async () => {\n\t\tfor (let i = 0; i < 5; i++) {\n\t\t\tconst stream = readableToStream(arrayToReadable(['1', '2', '3', '4', '5']));\n\n\t\t\tconst result = await peekStream(stream, i);\n\t\t\tassert.strictEqual(stream, result.stream);\n\t\t\tif (result.ended) {\n\t\t\t\tassert.fail('Unexpected result, stream should not have ended yet');\n\t\t\t} else {\n\t\t\t\tassert.strictEqual(result.buffer.length, i + 1, `maxChunks: ${i}`);\n\n\t\t\t\tconst additionalResult: string[] = [];\n\t\t\t\tawait consumeStream(stream, strings => {\n\t\t\t\t\tadditionalResult.push(...strings);\n\n\t\t\t\t\treturn strings.join();\n\t\t\t\t});\n\n\t\t\t\tassert.strictEqual([...result.buffer, ...additionalResult].join(), '1,2,3,4,5');\n\t\t\t}\n\t\t}\n\n\t\tlet stream = readableToStream(arrayToReadable(['1', '2', '3', '4', '5']));\n\t\tlet result = await peekStream(stream, 5);\n\t\tassert.strictEqual(stream, result.stream);\n\t\tassert.strictEqual(result.buffer.join(), '1,2,3,4,5');\n\t\tassert.strictEqual(result.ended, true);\n\n\t\tstream = readableToStream(arrayToReadable(['1', '2', '3', '4', '5']));\n\t\tresult = await peekStream(stream, 6);\n\t\tassert.strictEqual(stream, result.stream);\n\t\tassert.strictEqual(result.buffer.join(), '1,2,3,4,5');\n\t\tassert.strictEqual(result.ended, true);\n\t});\n\n\ttest('toStream', async () => {\n\t\tconst stream = toStream('1,2,3,4,5', strings => strings.join());\n\t\tconst consumed = await consumeStream(stream, strings => strings.join());\n\t\tassert.strictEqual(consumed, '1,2,3,4,5');\n\t});\n\n\ttest('toReadable', async () => {\n\t\tconst readable = toReadable('1,2,3,4,5');\n\t\tconst consumed = consumeReadable(readable, strings => strings.join());\n\t\tassert.strictEqual(consumed, '1,2,3,4,5');\n\t});\n\n\ttest('transform', async () => {\n\t\tconst source = newWriteableStream<string>(strings => strings.join());\n\n\t\tconst result = transform(source, { data: string => string + string }, strings => strings.join());\n\n\t\t// Simulate async behavior\n\t\tsetTimeout(() => {\n\t\t\tsource.write('1');\n\t\t\tsource.write('2');\n\t\t\tsource.write('3');\n\t\t\tsource.write('4');\n\t\t\tsource.end('5');\n\t\t}, 0);\n\n\t\tconst consumed = await consumeStream(result, strings => strings.join());\n\t\tassert.strictEqual(consumed, '11,22,33,44,55');\n\t});\n\n\ttest('events are delivered even if a listener is removed during delivery', () => {\n\t\tconst stream = newWriteableStream<string>(strings => strings.join());\n\n\t\tlet listener1Called = false;\n\t\tlet listener2Called = false;\n\n\t\tconst listener1 = () => { stream.removeListener('end', listener1); listener1Called = true; };\n\t\tconst listener2 = () => { listener2Called = true; };\n\t\tstream.on('end', listener1);\n\t\tstream.on('end', listener2);\n\t\tstream.on('data', () => { });\n\t\tstream.end('');\n\n\t\tassert.strictEqual(listener1Called, true);\n\t\tassert.strictEqual(listener2Called, true);\n\t});\n\n\ttest('prefixedReadable', () => {\n\n\t\t// Basic\n\t\tlet readable = prefixedReadable('1,2', arrayToReadable(['3', '4', '5']), val => val.join(','));\n\t\tassert.strictEqual(consumeReadable(readable, val => val.join(',')), '1,2,3,4,5');\n\n\t\t// Empty\n\t\treadable = prefixedReadable('empty', arrayToReadable<string>([]), val => val.join(','));\n\t\tassert.strictEqual(consumeReadable(readable, val => val.join(',')), 'empty');\n\t});\n\n\ttest('prefixedStream', async () => {\n\n\t\t// Basic\n\t\tlet stream = newWriteableStream<string>(strings => strings.join());\n\t\tstream.write('3');\n\t\tstream.write('4');\n\t\tstream.write('5');\n\t\tstream.end();\n\n\t\tlet prefixStream = prefixedStream<string>('1,2', stream, val => val.join(','));\n\t\tassert.strictEqual(await consumeStream(prefixStream, val => val.join(',')), '1,2,3,4,5');\n\n\t\t// Empty\n\t\tstream = newWriteableStream<string>(strings => strings.join());\n\t\tstream.end();\n\n\t\tprefixStream = prefixedStream<string>('1,2', stream, val => val.join(','));\n\t\tassert.strictEqual(await consumeStream(prefixStream, val => val.join(',')), '1,2');\n\n\t\t// Error\n\t\tstream = newWriteableStream<string>(strings => strings.join());\n\t\tstream.error(new Error('fail'));\n\n\t\tprefixStream = prefixedStream<string>('error', stream, val => val.join(','));\n\n\t\tlet error;\n\t\ttry {\n\t\t\tawait consumeStream(prefixStream, val => val.join(','));\n\t\t} catch (e) {\n\t\t\terror = e;\n\t\t}\n\t\tassert.ok(error);\n\t});\n});\n"]}