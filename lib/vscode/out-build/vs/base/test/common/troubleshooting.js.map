{"version":3,"file":"troubleshooting.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/test/common/troubleshooting.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAIhG,MAAM,iBAAiB;QAAvB;YACC,mBAAc,GAA4B,EAAE,CAAC;QAY9C,CAAC;QAXA,eAAe,CAAC,CAAc;YAC7B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,KAAK,EAAE,CAAC,KAAM,CAAC,CAAC,CAAC;QACnD,CAAC;QACD,WAAW,CAAC,CAAc;YACzB,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE;gBAC1D,IAAI,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;oBACtC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;oBACnC,OAAO;iBACP;aACD;QACF,CAAC;KACD;IAED,IAAI,cAAc,GAA6B,IAAI,CAAC;IAEpD,SAAgB,wBAAwB;QACvC,cAAc,GAAG,IAAI,iBAAiB,EAAE,CAAC;QACzC,CAAA,GAAA,gCAAoB,CAAA,CAAC,cAAc,CAAC,CAAC;IACtC,CAAC;IAHD,4DAGC;IAED,SAAgB,sBAAsB;QACrC,IAAI,cAAc,EAAE;YACnB,CAAA,GAAA,gCAAoB,CAAA,CAAC,IAAI,CAAC,CAAC;YAC3B,OAAO,CAAC,GAAG,CAAC,cAAe,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YACtF,cAAc,GAAG,IAAI,CAAC;SACtB;IACF,CAAC;IAND,wDAMC;IAED,SAAgB,cAAc,CAAC,aAAsB,KAAK;QACzD,IAAU,IAAK,CAAC,cAAc,EAAE;YACzB,IAAK,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;SACvC;IACF,CAAC;IAJD,wCAIC;IAED,SAAgB,YAAY;QAC3B,IAAU,IAAK,CAAC,YAAY,EAAE;YACvB,IAAK,CAAC,YAAY,EAAE,CAAC;SAC3B;IACF,CAAC;IAJD,oCAIC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDisposable, IDisposableTracker, setDisposableTracker } from 'vs/base/common/lifecycle';\n\nclass DisposableTracker implements IDisposableTracker {\n\tallDisposables: [IDisposable, string][] = [];\n\ttrackDisposable(x: IDisposable): void {\n\t\tthis.allDisposables.push([x, new Error().stack!]);\n\t}\n\tmarkTracked(x: IDisposable): void {\n\t\tfor (let idx = 0; idx < this.allDisposables.length; idx++) {\n\t\t\tif (this.allDisposables[idx][0] === x) {\n\t\t\t\tthis.allDisposables.splice(idx, 1);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n}\n\nlet currentTracker: DisposableTracker | null = null;\n\nexport function beginTrackingDisposables(): void {\n\tcurrentTracker = new DisposableTracker();\n\tsetDisposableTracker(currentTracker);\n}\n\nexport function endTrackingDisposables(): void {\n\tif (currentTracker) {\n\t\tsetDisposableTracker(null);\n\t\tconsole.log(currentTracker!.allDisposables.map(e => `${e[0]}\\n${e[1]}`).join('\\n\\n'));\n\t\tcurrentTracker = null;\n\t}\n}\n\nexport function beginLoggingFS(withStacks: boolean = false): void {\n\tif ((<any>self).beginLoggingFS) {\n\t\t(<any>self).beginLoggingFS(withStacks);\n\t}\n}\n\nexport function endLoggingFS(): void {\n\tif ((<any>self).endLoggingFS) {\n\t\t(<any>self).endLoggingFS();\n\t}\n}\n"]}