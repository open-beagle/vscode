{"version":3,"file":"mime.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/test/common/mime.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { guessMimeTypes, registerTextMime } from 'vs/base/common/mime';\nimport { URI } from 'vs/base/common/uri';\n\nsuite('Mime', () => {\n\n\ttest('Dynamically Register Text Mime', () => {\n\t\tlet guess = guessMimeTypes(URI.file('foo.monaco'));\n\t\tassert.deepStrictEqual(guess, ['application/unknown']);\n\n\t\tregisterTextMime({ id: 'monaco', extension: '.monaco', mime: 'text/monaco' });\n\t\tguess = guessMimeTypes(URI.file('foo.monaco'));\n\t\tassert.deepStrictEqual(guess, ['text/monaco', 'text/plain']);\n\n\t\tguess = guessMimeTypes(URI.file('.monaco'));\n\t\tassert.deepStrictEqual(guess, ['text/monaco', 'text/plain']);\n\n\t\tregisterTextMime({ id: 'codefile', filename: 'Codefile', mime: 'text/code' });\n\t\tguess = guessMimeTypes(URI.file('Codefile'));\n\t\tassert.deepStrictEqual(guess, ['text/code', 'text/plain']);\n\n\t\tguess = guessMimeTypes(URI.file('foo.Codefile'));\n\t\tassert.deepStrictEqual(guess, ['application/unknown']);\n\n\t\tregisterTextMime({ id: 'docker', filepattern: 'Docker*', mime: 'text/docker' });\n\t\tguess = guessMimeTypes(URI.file('Docker-debug'));\n\t\tassert.deepStrictEqual(guess, ['text/docker', 'text/plain']);\n\n\t\tguess = guessMimeTypes(URI.file('docker-PROD'));\n\t\tassert.deepStrictEqual(guess, ['text/docker', 'text/plain']);\n\n\t\tregisterTextMime({ id: 'niceregex', mime: 'text/nice-regex', firstline: /RegexesAreNice/ });\n\t\tguess = guessMimeTypes(URI.file('Randomfile.noregistration'), 'RegexesAreNice');\n\t\tassert.deepStrictEqual(guess, ['text/nice-regex', 'text/plain']);\n\n\t\tguess = guessMimeTypes(URI.file('Randomfile.noregistration'), 'RegexesAreNotNice');\n\t\tassert.deepStrictEqual(guess, ['application/unknown']);\n\n\t\tguess = guessMimeTypes(URI.file('Codefile'), 'RegexesAreNice');\n\t\tassert.deepStrictEqual(guess, ['text/code', 'text/plain']);\n\t});\n\n\ttest('Mimes Priority', () => {\n\t\tregisterTextMime({ id: 'monaco', extension: '.monaco', mime: 'text/monaco' });\n\t\tregisterTextMime({ id: 'foobar', mime: 'text/foobar', firstline: /foobar/ });\n\n\t\tlet guess = guessMimeTypes(URI.file('foo.monaco'));\n\t\tassert.deepStrictEqual(guess, ['text/monaco', 'text/plain']);\n\n\t\tguess = guessMimeTypes(URI.file('foo.monaco'), 'foobar');\n\t\tassert.deepStrictEqual(guess, ['text/monaco', 'text/plain']);\n\n\t\tregisterTextMime({ id: 'docker', filename: 'dockerfile', mime: 'text/winner' });\n\t\tregisterTextMime({ id: 'docker', filepattern: 'dockerfile*', mime: 'text/looser' });\n\t\tguess = guessMimeTypes(URI.file('dockerfile'));\n\t\tassert.deepStrictEqual(guess, ['text/winner', 'text/plain']);\n\n\t\tregisterTextMime({ id: 'azure-looser', mime: 'text/azure-looser', firstline: /azure/ });\n\t\tregisterTextMime({ id: 'azure-winner', mime: 'text/azure-winner', firstline: /azure/ });\n\t\tguess = guessMimeTypes(URI.file('azure'), 'azure');\n\t\tassert.deepStrictEqual(guess, ['text/azure-winner', 'text/plain']);\n\t});\n\n\ttest('Specificity priority 1', () => {\n\t\tregisterTextMime({ id: 'monaco2', extension: '.monaco2', mime: 'text/monaco2' });\n\t\tregisterTextMime({ id: 'monaco2', filename: 'specific.monaco2', mime: 'text/specific-monaco2' });\n\n\t\tassert.deepStrictEqual(guessMimeTypes(URI.file('specific.monaco2')), ['text/specific-monaco2', 'text/plain']);\n\t\tassert.deepStrictEqual(guessMimeTypes(URI.file('foo.monaco2')), ['text/monaco2', 'text/plain']);\n\t});\n\n\ttest('Specificity priority 2', () => {\n\t\tregisterTextMime({ id: 'monaco3', filename: 'specific.monaco3', mime: 'text/specific-monaco3' });\n\t\tregisterTextMime({ id: 'monaco3', extension: '.monaco3', mime: 'text/monaco3' });\n\n\t\tassert.deepStrictEqual(guessMimeTypes(URI.file('specific.monaco3')), ['text/specific-monaco3', 'text/plain']);\n\t\tassert.deepStrictEqual(guessMimeTypes(URI.file('foo.monaco3')), ['text/monaco3', 'text/plain']);\n\t});\n\n\ttest('Mimes Priority - Longest Extension wins', () => {\n\t\tregisterTextMime({ id: 'monaco', extension: '.monaco', mime: 'text/monaco' });\n\t\tregisterTextMime({ id: 'monaco', extension: '.monaco.xml', mime: 'text/monaco-xml' });\n\t\tregisterTextMime({ id: 'monaco', extension: '.monaco.xml.build', mime: 'text/monaco-xml-build' });\n\n\t\tlet guess = guessMimeTypes(URI.file('foo.monaco'));\n\t\tassert.deepStrictEqual(guess, ['text/monaco', 'text/plain']);\n\n\t\tguess = guessMimeTypes(URI.file('foo.monaco.xml'));\n\t\tassert.deepStrictEqual(guess, ['text/monaco-xml', 'text/plain']);\n\n\t\tguess = guessMimeTypes(URI.file('foo.monaco.xml.build'));\n\t\tassert.deepStrictEqual(guess, ['text/monaco-xml-build', 'text/plain']);\n\t});\n\n\ttest('Mimes Priority - User configured wins', () => {\n\t\tregisterTextMime({ id: 'monaco', extension: '.monaco.xnl', mime: 'text/monaco', userConfigured: true });\n\t\tregisterTextMime({ id: 'monaco', extension: '.monaco.xml', mime: 'text/monaco-xml' });\n\n\t\tlet guess = guessMimeTypes(URI.file('foo.monaco.xnl'));\n\t\tassert.deepStrictEqual(guess, ['text/monaco', 'text/plain']);\n\t});\n\n\ttest('Mimes Priority - Pattern matches on path if specified', () => {\n\t\tregisterTextMime({ id: 'monaco', filepattern: '**/dot.monaco.xml', mime: 'text/monaco' });\n\t\tregisterTextMime({ id: 'other', filepattern: '*ot.other.xml', mime: 'text/other' });\n\n\t\tlet guess = guessMimeTypes(URI.file('/some/path/dot.monaco.xml'));\n\t\tassert.deepStrictEqual(guess, ['text/monaco', 'text/plain']);\n\t});\n\n\ttest('Mimes Priority - Last registered mime wins', () => {\n\t\tregisterTextMime({ id: 'monaco', filepattern: '**/dot.monaco.xml', mime: 'text/monaco' });\n\t\tregisterTextMime({ id: 'other', filepattern: '**/dot.monaco.xml', mime: 'text/other' });\n\n\t\tlet guess = guessMimeTypes(URI.file('/some/path/dot.monaco.xml'));\n\t\tassert.deepStrictEqual(guess, ['text/other', 'text/plain']);\n\t});\n\n\ttest('Data URIs', () => {\n\t\tregisterTextMime({ id: 'data', extension: '.data', mime: 'text/data' });\n\n\t\tassert.deepStrictEqual(guessMimeTypes(URI.parse(`data:;label:something.data;description:data,`)), ['text/data', 'text/plain']);\n\t});\n});\n"]}