{"version":3,"file":"keyCodes.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/test/common/keyCodes.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { ChordKeybinding, KeyChord, KeyCode, KeyMod, Keybinding, SimpleKeybinding, createKeybinding } from 'vs/base/common/keyCodes';\nimport { OperatingSystem } from 'vs/base/common/platform';\n\nsuite('keyCodes', () => {\n\n\tfunction testBinaryEncoding(expected: Keybinding | null, k: number, OS: OperatingSystem): void {\n\t\tassert.deepStrictEqual(createKeybinding(k, OS), expected);\n\t}\n\n\ttest('MAC binary encoding', () => {\n\n\t\tfunction test(expected: Keybinding | null, k: number): void {\n\t\t\ttestBinaryEncoding(expected, k, OperatingSystem.Macintosh);\n\t\t}\n\n\t\ttest(null, 0);\n\t\ttest(new SimpleKeybinding(false, false, false, false, KeyCode.Enter).toChord(), KeyCode.Enter);\n\t\ttest(new SimpleKeybinding(true, false, false, false, KeyCode.Enter).toChord(), KeyMod.WinCtrl | KeyCode.Enter);\n\t\ttest(new SimpleKeybinding(false, false, true, false, KeyCode.Enter).toChord(), KeyMod.Alt | KeyCode.Enter);\n\t\ttest(new SimpleKeybinding(true, false, true, false, KeyCode.Enter).toChord(), KeyMod.Alt | KeyMod.WinCtrl | KeyCode.Enter);\n\t\ttest(new SimpleKeybinding(false, true, false, false, KeyCode.Enter).toChord(), KeyMod.Shift | KeyCode.Enter);\n\t\ttest(new SimpleKeybinding(true, true, false, false, KeyCode.Enter).toChord(), KeyMod.Shift | KeyMod.WinCtrl | KeyCode.Enter);\n\t\ttest(new SimpleKeybinding(false, true, true, false, KeyCode.Enter).toChord(), KeyMod.Shift | KeyMod.Alt | KeyCode.Enter);\n\t\ttest(new SimpleKeybinding(true, true, true, false, KeyCode.Enter).toChord(), KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.Enter);\n\t\ttest(new SimpleKeybinding(false, false, false, true, KeyCode.Enter).toChord(), KeyMod.CtrlCmd | KeyCode.Enter);\n\t\ttest(new SimpleKeybinding(true, false, false, true, KeyCode.Enter).toChord(), KeyMod.CtrlCmd | KeyMod.WinCtrl | KeyCode.Enter);\n\t\ttest(new SimpleKeybinding(false, false, true, true, KeyCode.Enter).toChord(), KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.Enter);\n\t\ttest(new SimpleKeybinding(true, false, true, true, KeyCode.Enter).toChord(), KeyMod.CtrlCmd | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.Enter);\n\t\ttest(new SimpleKeybinding(false, true, false, true, KeyCode.Enter).toChord(), KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.Enter);\n\t\ttest(new SimpleKeybinding(true, true, false, true, KeyCode.Enter).toChord(), KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.WinCtrl | KeyCode.Enter);\n\t\ttest(new SimpleKeybinding(false, true, true, true, KeyCode.Enter).toChord(), KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyCode.Enter);\n\t\ttest(new SimpleKeybinding(true, true, true, true, KeyCode.Enter).toChord(), KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.Enter);\n\n\t\ttest(\n\t\t\tnew ChordKeybinding([\n\t\t\t\tnew SimpleKeybinding(false, false, false, false, KeyCode.Enter),\n\t\t\t\tnew SimpleKeybinding(false, false, false, false, KeyCode.Tab)\n\t\t\t]),\n\t\t\tKeyChord(KeyCode.Enter, KeyCode.Tab)\n\t\t);\n\t\ttest(\n\t\t\tnew ChordKeybinding([\n\t\t\t\tnew SimpleKeybinding(false, false, false, true, KeyCode.KEY_Y),\n\t\t\t\tnew SimpleKeybinding(false, false, false, false, KeyCode.KEY_Z)\n\t\t\t]),\n\t\t\tKeyChord(KeyMod.CtrlCmd | KeyCode.KEY_Y, KeyCode.KEY_Z)\n\t\t);\n\t});\n\n\ttest('WINDOWS & LINUX binary encoding', () => {\n\n\t\t[OperatingSystem.Linux, OperatingSystem.Windows].forEach((OS) => {\n\n\t\t\tfunction test(expected: Keybinding | null, k: number): void {\n\t\t\t\ttestBinaryEncoding(expected, k, OS);\n\t\t\t}\n\n\t\t\ttest(null, 0);\n\t\t\ttest(new SimpleKeybinding(false, false, false, false, KeyCode.Enter).toChord(), KeyCode.Enter);\n\t\t\ttest(new SimpleKeybinding(false, false, false, true, KeyCode.Enter).toChord(), KeyMod.WinCtrl | KeyCode.Enter);\n\t\t\ttest(new SimpleKeybinding(false, false, true, false, KeyCode.Enter).toChord(), KeyMod.Alt | KeyCode.Enter);\n\t\t\ttest(new SimpleKeybinding(false, false, true, true, KeyCode.Enter).toChord(), KeyMod.Alt | KeyMod.WinCtrl | KeyCode.Enter);\n\t\t\ttest(new SimpleKeybinding(false, true, false, false, KeyCode.Enter).toChord(), KeyMod.Shift | KeyCode.Enter);\n\t\t\ttest(new SimpleKeybinding(false, true, false, true, KeyCode.Enter).toChord(), KeyMod.Shift | KeyMod.WinCtrl | KeyCode.Enter);\n\t\t\ttest(new SimpleKeybinding(false, true, true, false, KeyCode.Enter).toChord(), KeyMod.Shift | KeyMod.Alt | KeyCode.Enter);\n\t\t\ttest(new SimpleKeybinding(false, true, true, true, KeyCode.Enter).toChord(), KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.Enter);\n\t\t\ttest(new SimpleKeybinding(true, false, false, false, KeyCode.Enter).toChord(), KeyMod.CtrlCmd | KeyCode.Enter);\n\t\t\ttest(new SimpleKeybinding(true, false, false, true, KeyCode.Enter).toChord(), KeyMod.CtrlCmd | KeyMod.WinCtrl | KeyCode.Enter);\n\t\t\ttest(new SimpleKeybinding(true, false, true, false, KeyCode.Enter).toChord(), KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.Enter);\n\t\t\ttest(new SimpleKeybinding(true, false, true, true, KeyCode.Enter).toChord(), KeyMod.CtrlCmd | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.Enter);\n\t\t\ttest(new SimpleKeybinding(true, true, false, false, KeyCode.Enter).toChord(), KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.Enter);\n\t\t\ttest(new SimpleKeybinding(true, true, false, true, KeyCode.Enter).toChord(), KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.WinCtrl | KeyCode.Enter);\n\t\t\ttest(new SimpleKeybinding(true, true, true, false, KeyCode.Enter).toChord(), KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyCode.Enter);\n\t\t\ttest(new SimpleKeybinding(true, true, true, true, KeyCode.Enter).toChord(), KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.Enter);\n\n\t\t\ttest(\n\t\t\t\tnew ChordKeybinding([\n\t\t\t\t\tnew SimpleKeybinding(false, false, false, false, KeyCode.Enter),\n\t\t\t\t\tnew SimpleKeybinding(false, false, false, false, KeyCode.Tab)\n\t\t\t\t]),\n\t\t\t\tKeyChord(KeyCode.Enter, KeyCode.Tab)\n\t\t\t);\n\t\t\ttest(\n\t\t\t\tnew ChordKeybinding([\n\t\t\t\t\tnew SimpleKeybinding(true, false, false, false, KeyCode.KEY_Y),\n\t\t\t\t\tnew SimpleKeybinding(false, false, false, false, KeyCode.KEY_Z)\n\t\t\t\t]),\n\t\t\t\tKeyChord(KeyMod.CtrlCmd | KeyCode.KEY_Y, KeyCode.KEY_Z)\n\t\t\t);\n\n\t\t});\n\t});\n});\n"]}