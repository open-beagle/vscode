{"version":3,"file":"network.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/test/common/network.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { URI } from 'vs/base/common/uri';\nimport { FileAccess, Schemas } from 'vs/base/common/network';\nimport { isEqual } from 'vs/base/common/resources';\nimport { isPreferringBrowserCodeLoad } from 'vs/base/common/platform';\n\nsuite('network', () => {\n\tconst enableTest = isPreferringBrowserCodeLoad;\n\n\t(!enableTest ? test.skip : test)('FileAccess: URI (native)', () => {\n\n\t\t// asCodeUri() & asFileUri(): simple, without authority\n\t\tlet originalFileUri = URI.file('network.test.ts');\n\t\tlet browserUri = FileAccess.asBrowserUri(originalFileUri);\n\t\tassert.ok(browserUri.authority.length > 0);\n\t\tlet fileUri = FileAccess.asFileUri(browserUri);\n\t\tassert.strictEqual(fileUri.authority.length, 0);\n\t\tassert(isEqual(originalFileUri, fileUri));\n\n\t\t// asCodeUri() & asFileUri(): with authority\n\t\toriginalFileUri = URI.file('network.test.ts').with({ authority: 'test-authority' });\n\t\tbrowserUri = FileAccess.asBrowserUri(originalFileUri);\n\t\tassert.strictEqual(browserUri.authority, originalFileUri.authority);\n\t\tfileUri = FileAccess.asFileUri(browserUri);\n\t\tassert(isEqual(originalFileUri, fileUri));\n\t});\n\n\t(!enableTest ? test.skip : test)('FileAccess: moduleId (native)', () => {\n\t\tconst browserUri = FileAccess.asBrowserUri('vs/base/test/node/network.test', require);\n\t\tassert.strictEqual(browserUri.scheme, Schemas.vscodeFileResource);\n\n\t\tconst fileUri = FileAccess.asFileUri('vs/base/test/node/network.test', require);\n\t\tassert.strictEqual(fileUri.scheme, Schemas.file);\n\t});\n\n\t(!enableTest ? test.skip : test)('FileAccess: query and fragment is dropped (native)', () => {\n\t\tlet originalFileUri = URI.file('network.test.ts').with({ query: 'foo=bar', fragment: 'something' });\n\t\tlet browserUri = FileAccess.asBrowserUri(originalFileUri);\n\t\tassert.strictEqual(browserUri.query, '');\n\t\tassert.strictEqual(browserUri.fragment, '');\n\t});\n\n\t(!enableTest ? test.skip : test)('FileAccess: query and fragment is kept if URI is already of same scheme (native)', () => {\n\t\tlet originalFileUri = URI.file('network.test.ts').with({ query: 'foo=bar', fragment: 'something' });\n\t\tlet browserUri = FileAccess.asBrowserUri(originalFileUri.with({ scheme: Schemas.vscodeFileResource }));\n\t\tassert.strictEqual(browserUri.query, 'foo=bar');\n\t\tassert.strictEqual(browserUri.fragment, 'something');\n\n\t\tlet fileUri = FileAccess.asFileUri(originalFileUri);\n\t\tassert.strictEqual(fileUri.query, 'foo=bar');\n\t\tassert.strictEqual(fileUri.fragment, 'something');\n\t});\n\n\t(!enableTest ? test.skip : test)('FileAccess: web', () => {\n\t\tconst originalHttpsUri = URI.file('network.test.ts').with({ scheme: 'https' });\n\t\tconst browserUri = FileAccess.asBrowserUri(originalHttpsUri);\n\t\tassert.strictEqual(originalHttpsUri.toString(), browserUri.toString());\n\t});\n\n\ttest('FileAccess: remote URIs', () => {\n\t\tconst originalRemoteUri = URI.file('network.test.ts').with({ scheme: Schemas.vscodeRemote });\n\t\tconst browserUri = FileAccess.asBrowserUri(originalRemoteUri);\n\t\tassert.notStrictEqual(originalRemoteUri.scheme, browserUri.scheme);\n\t});\n});\n"]}