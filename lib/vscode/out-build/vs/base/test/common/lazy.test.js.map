{"version":3,"file":"lazy.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/test/common/lazy.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { Lazy } from 'vs/base/common/lazy';\n\nsuite('Lazy', () => {\n\n\ttest('lazy values should only be resolved once', () => {\n\t\tlet counter = 0;\n\t\tconst value = new Lazy(() => ++counter);\n\n\t\tassert.strictEqual(value.hasValue(), false);\n\t\tassert.strictEqual(value.getValue(), 1);\n\t\tassert.strictEqual(value.hasValue(), true);\n\t\tassert.strictEqual(value.getValue(), 1); // make sure we did not evaluate again\n\t});\n\n\ttest('lazy values handle error case', () => {\n\t\tlet counter = 0;\n\t\tconst value = new Lazy(() => { throw new Error(`${++counter}`); });\n\n\t\tassert.strictEqual(value.hasValue(), false);\n\t\tassert.throws(() => value.getValue(), /\\b1\\b/);\n\t\tassert.strictEqual(value.hasValue(), true);\n\t\tassert.throws(() => value.getValue(), /\\b1\\b/);\n\t});\n\n\ttest('map should not cause lazy values to be re-resolved', () => {\n\t\tlet outer = 0;\n\t\tlet inner = 10;\n\t\tconst outerLazy = new Lazy(() => ++outer);\n\t\tconst innerLazy = outerLazy.map(x => [x, ++inner]);\n\n\t\tassert.strictEqual(outerLazy.hasValue(), false);\n\t\tassert.strictEqual(innerLazy.hasValue(), false);\n\n\t\tassert.deepStrictEqual(innerLazy.getValue(), [1, 11]);\n\t\tassert.strictEqual(outerLazy.hasValue(), true);\n\t\tassert.strictEqual(innerLazy.hasValue(), true);\n\t\tassert.strictEqual(outerLazy.getValue(), 1);\n\n\t\t// make sure we did not evaluate again\n\t\tassert.strictEqual(outerLazy.getValue(), 1);\n\t\tassert.deepStrictEqual(innerLazy.getValue(), [1, 11]);\n\t});\n\n\ttest('map should handle error values', () => {\n\t\tlet outer = 0;\n\t\tlet inner = 10;\n\t\tconst outerLazy = new Lazy(() => { throw new Error(`${++outer}`); });\n\t\tconst innerLazy = outerLazy.map(x => { throw new Error(`${++inner}`); });\n\n\t\tassert.strictEqual(outerLazy.hasValue(), false);\n\t\tassert.strictEqual(innerLazy.hasValue(), false);\n\n\t\tassert.throws(() => innerLazy.getValue(), /\\b1\\b/); // we should get result from outer\n\t\tassert.strictEqual(outerLazy.hasValue(), true);\n\t\tassert.strictEqual(innerLazy.hasValue(), true);\n\t\tassert.throws(() => outerLazy.getValue(), /\\b1\\b/);\n\t});\n});\n"]}