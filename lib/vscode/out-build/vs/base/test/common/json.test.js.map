{"version":3,"file":"json.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/test/common/json.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as assert from 'assert';\nimport {\n\tSyntaxKind, createScanner, parse, Node, ParseError, parseTree, ParseErrorCode, ParseOptions, ScanError\n} from 'vs/base/common/json';\nimport { getParseErrorMessage } from 'vs/base/common/jsonErrorMessages';\n\nfunction assertKinds(text: string, ...kinds: SyntaxKind[]): void {\n\tlet scanner = createScanner(text);\n\tlet kind: SyntaxKind;\n\twhile ((kind = scanner.scan()) !== SyntaxKind.EOF) {\n\t\tassert.strictEqual(kind, kinds.shift());\n\t}\n\tassert.strictEqual(kinds.length, 0);\n}\nfunction assertScanError(text: string, expectedKind: SyntaxKind, scanError: ScanError): void {\n\tlet scanner = createScanner(text);\n\tscanner.scan();\n\tassert.strictEqual(scanner.getToken(), expectedKind);\n\tassert.strictEqual(scanner.getTokenError(), scanError);\n}\n\nfunction assertValidParse(input: string, expected: any, options?: ParseOptions): void {\n\tlet errors: ParseError[] = [];\n\tlet actual = parse(input, errors, options);\n\n\tif (errors.length !== 0) {\n\t\tassert(false, getParseErrorMessage(errors[0].error));\n\t}\n\tassert.deepStrictEqual(actual, expected);\n}\n\nfunction assertInvalidParse(input: string, expected: any, options?: ParseOptions): void {\n\tlet errors: ParseError[] = [];\n\tlet actual = parse(input, errors, options);\n\n\tassert(errors.length > 0);\n\tassert.deepStrictEqual(actual, expected);\n}\n\nfunction assertTree(input: string, expected: any, expectedErrors: number[] = [], options?: ParseOptions): void {\n\tlet errors: ParseError[] = [];\n\tlet actual = parseTree(input, errors, options);\n\n\tassert.deepStrictEqual(errors.map(e => e.error, expected), expectedErrors);\n\tlet checkParent = (node: Node) => {\n\t\tif (node.children) {\n\t\t\tfor (let child of node.children) {\n\t\t\t\tassert.strictEqual(node, child.parent);\n\t\t\t\tdelete (<any>child).parent; // delete to avoid recursion in deep equal\n\t\t\t\tcheckParent(child);\n\t\t\t}\n\t\t}\n\t};\n\tcheckParent(actual);\n\n\tassert.deepStrictEqual(actual, expected);\n}\n\nsuite('JSON', () => {\n\ttest('tokens', () => {\n\t\tassertKinds('{', SyntaxKind.OpenBraceToken);\n\t\tassertKinds('}', SyntaxKind.CloseBraceToken);\n\t\tassertKinds('[', SyntaxKind.OpenBracketToken);\n\t\tassertKinds(']', SyntaxKind.CloseBracketToken);\n\t\tassertKinds(':', SyntaxKind.ColonToken);\n\t\tassertKinds(',', SyntaxKind.CommaToken);\n\t});\n\n\ttest('comments', () => {\n\t\tassertKinds('// this is a comment', SyntaxKind.LineCommentTrivia);\n\t\tassertKinds('// this is a comment\\n', SyntaxKind.LineCommentTrivia, SyntaxKind.LineBreakTrivia);\n\t\tassertKinds('/* this is a comment*/', SyntaxKind.BlockCommentTrivia);\n\t\tassertKinds('/* this is a \\r\\ncomment*/', SyntaxKind.BlockCommentTrivia);\n\t\tassertKinds('/* this is a \\ncomment*/', SyntaxKind.BlockCommentTrivia);\n\n\t\t// unexpected end\n\t\tassertKinds('/* this is a', SyntaxKind.BlockCommentTrivia);\n\t\tassertKinds('/* this is a \\ncomment', SyntaxKind.BlockCommentTrivia);\n\n\t\t// broken comment\n\t\tassertKinds('/ ttt', SyntaxKind.Unknown, SyntaxKind.Trivia, SyntaxKind.Unknown);\n\t});\n\n\ttest('strings', () => {\n\t\tassertKinds('\"test\"', SyntaxKind.StringLiteral);\n\t\tassertKinds('\"\\\\\"\"', SyntaxKind.StringLiteral);\n\t\tassertKinds('\"\\\\/\"', SyntaxKind.StringLiteral);\n\t\tassertKinds('\"\\\\b\"', SyntaxKind.StringLiteral);\n\t\tassertKinds('\"\\\\f\"', SyntaxKind.StringLiteral);\n\t\tassertKinds('\"\\\\n\"', SyntaxKind.StringLiteral);\n\t\tassertKinds('\"\\\\r\"', SyntaxKind.StringLiteral);\n\t\tassertKinds('\"\\\\t\"', SyntaxKind.StringLiteral);\n\t\tassertKinds('\"\\\\v\"', SyntaxKind.StringLiteral);\n\t\tassertKinds('\"\\u88ff\"', SyntaxKind.StringLiteral);\n\t\tassertKinds('\"​\\u2028\"', SyntaxKind.StringLiteral);\n\n\t\t// unexpected end\n\t\tassertKinds('\"test', SyntaxKind.StringLiteral);\n\t\tassertKinds('\"test\\n\"', SyntaxKind.StringLiteral, SyntaxKind.LineBreakTrivia, SyntaxKind.StringLiteral);\n\n\t\t// invalid characters\n\t\tassertScanError('\"\\t\"', SyntaxKind.StringLiteral, ScanError.InvalidCharacter);\n\t\tassertScanError('\"\\t \"', SyntaxKind.StringLiteral, ScanError.InvalidCharacter);\n\t});\n\n\ttest('numbers', () => {\n\t\tassertKinds('0', SyntaxKind.NumericLiteral);\n\t\tassertKinds('0.1', SyntaxKind.NumericLiteral);\n\t\tassertKinds('-0.1', SyntaxKind.NumericLiteral);\n\t\tassertKinds('-1', SyntaxKind.NumericLiteral);\n\t\tassertKinds('1', SyntaxKind.NumericLiteral);\n\t\tassertKinds('123456789', SyntaxKind.NumericLiteral);\n\t\tassertKinds('10', SyntaxKind.NumericLiteral);\n\t\tassertKinds('90', SyntaxKind.NumericLiteral);\n\t\tassertKinds('90E+123', SyntaxKind.NumericLiteral);\n\t\tassertKinds('90e+123', SyntaxKind.NumericLiteral);\n\t\tassertKinds('90e-123', SyntaxKind.NumericLiteral);\n\t\tassertKinds('90E-123', SyntaxKind.NumericLiteral);\n\t\tassertKinds('90E123', SyntaxKind.NumericLiteral);\n\t\tassertKinds('90e123', SyntaxKind.NumericLiteral);\n\n\t\t// zero handling\n\t\tassertKinds('01', SyntaxKind.NumericLiteral, SyntaxKind.NumericLiteral);\n\t\tassertKinds('-01', SyntaxKind.NumericLiteral, SyntaxKind.NumericLiteral);\n\n\t\t// unexpected end\n\t\tassertKinds('-', SyntaxKind.Unknown);\n\t\tassertKinds('.0', SyntaxKind.Unknown);\n\t});\n\n\ttest('keywords: true, false, null', () => {\n\t\tassertKinds('true', SyntaxKind.TrueKeyword);\n\t\tassertKinds('false', SyntaxKind.FalseKeyword);\n\t\tassertKinds('null', SyntaxKind.NullKeyword);\n\n\n\t\tassertKinds('true false null',\n\t\t\tSyntaxKind.TrueKeyword,\n\t\t\tSyntaxKind.Trivia,\n\t\t\tSyntaxKind.FalseKeyword,\n\t\t\tSyntaxKind.Trivia,\n\t\t\tSyntaxKind.NullKeyword);\n\n\t\t// invalid words\n\t\tassertKinds('nulllll', SyntaxKind.Unknown);\n\t\tassertKinds('True', SyntaxKind.Unknown);\n\t\tassertKinds('foo-bar', SyntaxKind.Unknown);\n\t\tassertKinds('foo bar', SyntaxKind.Unknown, SyntaxKind.Trivia, SyntaxKind.Unknown);\n\t});\n\n\ttest('trivia', () => {\n\t\tassertKinds(' ', SyntaxKind.Trivia);\n\t\tassertKinds('  \\t  ', SyntaxKind.Trivia);\n\t\tassertKinds('  \\t  \\n  \\t  ', SyntaxKind.Trivia, SyntaxKind.LineBreakTrivia, SyntaxKind.Trivia);\n\t\tassertKinds('\\r\\n', SyntaxKind.LineBreakTrivia);\n\t\tassertKinds('\\r', SyntaxKind.LineBreakTrivia);\n\t\tassertKinds('\\n', SyntaxKind.LineBreakTrivia);\n\t\tassertKinds('\\n\\r', SyntaxKind.LineBreakTrivia, SyntaxKind.LineBreakTrivia);\n\t\tassertKinds('\\n   \\n', SyntaxKind.LineBreakTrivia, SyntaxKind.Trivia, SyntaxKind.LineBreakTrivia);\n\t});\n\n\ttest('parse: literals', () => {\n\n\t\tassertValidParse('true', true);\n\t\tassertValidParse('false', false);\n\t\tassertValidParse('null', null);\n\t\tassertValidParse('\"foo\"', 'foo');\n\t\tassertValidParse('\"\\\\\"-\\\\\\\\-\\\\/-\\\\b-\\\\f-\\\\n-\\\\r-\\\\t\"', '\"-\\\\-/-\\b-\\f-\\n-\\r-\\t');\n\t\tassertValidParse('\"\\\\u00DC\"', 'Ü');\n\t\tassertValidParse('9', 9);\n\t\tassertValidParse('-9', -9);\n\t\tassertValidParse('0.129', 0.129);\n\t\tassertValidParse('23e3', 23e3);\n\t\tassertValidParse('1.2E+3', 1.2E+3);\n\t\tassertValidParse('1.2E-3', 1.2E-3);\n\t\tassertValidParse('1.2E-3 // comment', 1.2E-3);\n\t});\n\n\ttest('parse: objects', () => {\n\t\tassertValidParse('{}', {});\n\t\tassertValidParse('{ \"foo\": true }', { foo: true });\n\t\tassertValidParse('{ \"bar\": 8, \"xoo\": \"foo\" }', { bar: 8, xoo: 'foo' });\n\t\tassertValidParse('{ \"hello\": [], \"world\": {} }', { hello: [], world: {} });\n\t\tassertValidParse('{ \"a\": false, \"b\": true, \"c\": [ 7.4 ] }', { a: false, b: true, c: [7.4] });\n\t\tassertValidParse('{ \"lineComment\": \"//\", \"blockComment\": [\"/*\", \"*/\"], \"brackets\": [ [\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"] ] }', { lineComment: '//', blockComment: ['/*', '*/'], brackets: [['{', '}'], ['[', ']'], ['(', ')']] });\n\t\tassertValidParse('{ \"hello\": [], \"world\": {} }', { hello: [], world: {} });\n\t\tassertValidParse('{ \"hello\": { \"again\": { \"inside\": 5 }, \"world\": 1 }}', { hello: { again: { inside: 5 }, world: 1 } });\n\t\tassertValidParse('{ \"foo\": /*hello*/true }', { foo: true });\n\t});\n\n\ttest('parse: arrays', () => {\n\t\tassertValidParse('[]', []);\n\t\tassertValidParse('[ [],  [ [] ]]', [[], [[]]]);\n\t\tassertValidParse('[ 1, 2, 3 ]', [1, 2, 3]);\n\t\tassertValidParse('[ { \"a\": null } ]', [{ a: null }]);\n\t});\n\n\ttest('parse: objects with errors', () => {\n\t\tassertInvalidParse('{,}', {});\n\t\tassertInvalidParse('{ \"foo\": true, }', { foo: true }, { allowTrailingComma: false });\n\t\tassertInvalidParse('{ \"bar\": 8 \"xoo\": \"foo\" }', { bar: 8, xoo: 'foo' });\n\t\tassertInvalidParse('{ ,\"bar\": 8 }', { bar: 8 });\n\t\tassertInvalidParse('{ ,\"bar\": 8, \"foo\" }', { bar: 8 });\n\t\tassertInvalidParse('{ \"bar\": 8, \"foo\": }', { bar: 8 });\n\t\tassertInvalidParse('{ 8, \"foo\": 9 }', { foo: 9 });\n\t});\n\n\ttest('parse: array with errors', () => {\n\t\tassertInvalidParse('[,]', []);\n\t\tassertInvalidParse('[ 1, 2, ]', [1, 2], { allowTrailingComma: false });\n\t\tassertInvalidParse('[ 1 2, 3 ]', [1, 2, 3]);\n\t\tassertInvalidParse('[ ,1, 2, 3 ]', [1, 2, 3]);\n\t\tassertInvalidParse('[ ,1, 2, 3, ]', [1, 2, 3], { allowTrailingComma: false });\n\t});\n\n\ttest('parse: disallow commments', () => {\n\t\tlet options = { disallowComments: true };\n\n\t\tassertValidParse('[ 1, 2, null, \"foo\" ]', [1, 2, null, 'foo'], options);\n\t\tassertValidParse('{ \"hello\": [], \"world\": {} }', { hello: [], world: {} }, options);\n\n\t\tassertInvalidParse('{ \"foo\": /*comment*/ true }', { foo: true }, options);\n\t});\n\n\ttest('parse: trailing comma', () => {\n\t\t// default is allow\n\t\tassertValidParse('{ \"hello\": [], }', { hello: [] });\n\n\t\tlet options = { allowTrailingComma: true };\n\t\tassertValidParse('{ \"hello\": [], }', { hello: [] }, options);\n\t\tassertValidParse('{ \"hello\": [] }', { hello: [] }, options);\n\t\tassertValidParse('{ \"hello\": [], \"world\": {}, }', { hello: [], world: {} }, options);\n\t\tassertValidParse('{ \"hello\": [], \"world\": {} }', { hello: [], world: {} }, options);\n\t\tassertValidParse('{ \"hello\": [1,] }', { hello: [1] }, options);\n\n\t\toptions = { allowTrailingComma: false };\n\t\tassertInvalidParse('{ \"hello\": [], }', { hello: [] }, options);\n\t\tassertInvalidParse('{ \"hello\": [], \"world\": {}, }', { hello: [], world: {} }, options);\n\t});\n\n\ttest('tree: literals', () => {\n\t\tassertTree('true', { type: 'boolean', offset: 0, length: 4, value: true });\n\t\tassertTree('false', { type: 'boolean', offset: 0, length: 5, value: false });\n\t\tassertTree('null', { type: 'null', offset: 0, length: 4, value: null });\n\t\tassertTree('23', { type: 'number', offset: 0, length: 2, value: 23 });\n\t\tassertTree('-1.93e-19', { type: 'number', offset: 0, length: 9, value: -1.93e-19 });\n\t\tassertTree('\"hello\"', { type: 'string', offset: 0, length: 7, value: 'hello' });\n\t});\n\n\ttest('tree: arrays', () => {\n\t\tassertTree('[]', { type: 'array', offset: 0, length: 2, children: [] });\n\t\tassertTree('[ 1 ]', { type: 'array', offset: 0, length: 5, children: [{ type: 'number', offset: 2, length: 1, value: 1 }] });\n\t\tassertTree('[ 1,\"x\"]', {\n\t\t\ttype: 'array', offset: 0, length: 8, children: [\n\t\t\t\t{ type: 'number', offset: 2, length: 1, value: 1 },\n\t\t\t\t{ type: 'string', offset: 4, length: 3, value: 'x' }\n\t\t\t]\n\t\t});\n\t\tassertTree('[[]]', {\n\t\t\ttype: 'array', offset: 0, length: 4, children: [\n\t\t\t\t{ type: 'array', offset: 1, length: 2, children: [] }\n\t\t\t]\n\t\t});\n\t});\n\n\ttest('tree: objects', () => {\n\t\tassertTree('{ }', { type: 'object', offset: 0, length: 3, children: [] });\n\t\tassertTree('{ \"val\": 1 }', {\n\t\t\ttype: 'object', offset: 0, length: 12, children: [\n\t\t\t\t{\n\t\t\t\t\ttype: 'property', offset: 2, length: 8, colonOffset: 7, children: [\n\t\t\t\t\t\t{ type: 'string', offset: 2, length: 5, value: 'val' },\n\t\t\t\t\t\t{ type: 'number', offset: 9, length: 1, value: 1 }\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t});\n\t\tassertTree('{\"id\": \"$\", \"v\": [ null, null] }',\n\t\t\t{\n\t\t\t\ttype: 'object', offset: 0, length: 32, children: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'property', offset: 1, length: 9, colonOffset: 5, children: [\n\t\t\t\t\t\t\t{ type: 'string', offset: 1, length: 4, value: 'id' },\n\t\t\t\t\t\t\t{ type: 'string', offset: 7, length: 3, value: '$' }\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'property', offset: 12, length: 18, colonOffset: 15, children: [\n\t\t\t\t\t\t\t{ type: 'string', offset: 12, length: 3, value: 'v' },\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'array', offset: 17, length: 13, children: [\n\t\t\t\t\t\t\t\t\t{ type: 'null', offset: 19, length: 4, value: null },\n\t\t\t\t\t\t\t\t\t{ type: 'null', offset: 25, length: 4, value: null }\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t);\n\t\tassertTree('{  \"id\": { \"foo\": { } } , }',\n\t\t\t{\n\t\t\t\ttype: 'object', offset: 0, length: 27, children: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'property', offset: 3, length: 20, colonOffset: 7, children: [\n\t\t\t\t\t\t\t{ type: 'string', offset: 3, length: 4, value: 'id' },\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'object', offset: 9, length: 14, children: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttype: 'property', offset: 11, length: 10, colonOffset: 16, children: [\n\t\t\t\t\t\t\t\t\t\t\t{ type: 'string', offset: 11, length: 5, value: 'foo' },\n\t\t\t\t\t\t\t\t\t\t\t{ type: 'object', offset: 18, length: 3, children: [] }\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t\t, [ParseErrorCode.PropertyNameExpected, ParseErrorCode.ValueExpected], { allowTrailingComma: false });\n\t});\n});\n"]}