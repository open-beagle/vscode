{"version":3,"file":"errors.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/test/common/errors.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAKhG,KAAK,CAAC,QAAQ,EAAE,GAAG,EAAE;QACpB,IAAI,CAAC,mBAAmB,EAAE;YACzB,MAAM,CAAC,WAAW,CAAC,CAAA,GAAA,6BAAc,CAAA,CAAC,SAAS,CAAC,EAAE,SAAS,CAAC,CAAC;YACzD,MAAM,CAAC,WAAW,CAAC,CAAA,GAAA,6BAAc,CAAA,CAAC,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;YAEpE,IAAI,KAAK,GAAQ,IAAI,KAAK,EAAE,CAAC;YAC7B,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC;YACpB,KAAK,CAAC,MAAM,GAAG,EAAE,CAAC;YAClB,KAAK,CAAC,MAAM,CAAC,SAAS,GAAG,EAAE,CAAC;YAC5B,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,OAAO,GAAG,SAAS,CAAC;YAC3C,MAAM,CAAC,WAAW,CAAC,CAAA,GAAA,6BAAc,CAAA,CAAC,KAAK,CAAC,EAAE,SAAS,CAAC,CAAC;YACrD,MAAM,CAAC,WAAW,CAAC,CAAA,GAAA,6BAAc,CAAA,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,SAAS,CAAC,CAAC;YAE3D,MAAM,CAAC,CAAA,GAAA,6BAAc,CAAA,EAAE,CAAC,CAAC;YACzB,MAAM,CAAC,CAAA,GAAA,6BAAc,CAAA,CAAC,IAAI,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC,CAAA,GAAA,6BAAc,CAAA,CAAC,EAAE,CAAC,CAAC,CAAC;YAE3B,IAAI;gBACH,MAAM,IAAI,KAAK,EAAE,CAAC;aAClB;YAAC,OAAO,KAAK,EAAE;gBACf,MAAM,CAAC,WAAW,CAAC,CAAA,GAAA,6BAAc,CAAA,CAAC,KAAK,CAAC,EAAE,qEAAqE,CAAC,CAAC;gBACjH,MAAM,CAAC,EAAE,CAAC,CAAA,GAAA,6BAAc,CAAA,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,MAAM,GAAG,qEAAqE,CAAC,MAAM,CAAC,CAAC;aAC7H;QACF,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { toErrorMessage } from 'vs/base/common/errorMessage';\n\nsuite('Errors', () => {\n\ttest('Get Error Message', function () {\n\t\tassert.strictEqual(toErrorMessage('Foo Bar'), 'Foo Bar');\n\t\tassert.strictEqual(toErrorMessage(new Error('Foo Bar')), 'Foo Bar');\n\n\t\tlet error: any = new Error();\n\t\terror = new Error();\n\t\terror.detail = {};\n\t\terror.detail.exception = {};\n\t\terror.detail.exception.message = 'Foo Bar';\n\t\tassert.strictEqual(toErrorMessage(error), 'Foo Bar');\n\t\tassert.strictEqual(toErrorMessage(error, true), 'Foo Bar');\n\n\t\tassert(toErrorMessage());\n\t\tassert(toErrorMessage(null));\n\t\tassert(toErrorMessage({}));\n\n\t\ttry {\n\t\t\tthrow new Error();\n\t\t} catch (error) {\n\t\t\tassert.strictEqual(toErrorMessage(error), 'An unknown error occurred. Please consult the log for more details.');\n\t\t\tassert.ok(toErrorMessage(error, true).length > 'An unknown error occurred. Please consult the log for more details.'.length);\n\t\t}\n\t});\n});\n"]}