{"version":3,"file":"iconLabels.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/test/common/iconLabels.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { IMatch } from 'vs/base/common/filters';\nimport { matchesFuzzyIconAware, parseLabelWithIcons, IParsedLabelWithIcons, stripIcons, escapeIcons, markdownEscapeEscapedIcons } from 'vs/base/common/iconLabels';\n\nexport interface IIconFilter {\n\t// Returns null if word doesn't match.\n\t(query: string, target: IParsedLabelWithIcons): IMatch[] | null;\n}\n\nfunction filterOk(filter: IIconFilter, word: string, target: IParsedLabelWithIcons, highlights?: { start: number; end: number; }[]) {\n\tlet r = filter(word, target);\n\tassert(r);\n\tif (highlights) {\n\t\tassert.deepStrictEqual(r, highlights);\n\t}\n}\n\nsuite('Icon Labels', () => {\n\ttest('matchesFuzzyIconAware', () => {\n\n\t\t// Camel Case\n\n\t\tfilterOk(matchesFuzzyIconAware, 'ccr', parseLabelWithIcons('$(codicon)CamelCaseRocks$(codicon)'), [\n\t\t\t{ start: 10, end: 11 },\n\t\t\t{ start: 15, end: 16 },\n\t\t\t{ start: 19, end: 20 }\n\t\t]);\n\n\t\tfilterOk(matchesFuzzyIconAware, 'ccr', parseLabelWithIcons('$(codicon) CamelCaseRocks $(codicon)'), [\n\t\t\t{ start: 11, end: 12 },\n\t\t\t{ start: 16, end: 17 },\n\t\t\t{ start: 20, end: 21 }\n\t\t]);\n\n\t\tfilterOk(matchesFuzzyIconAware, 'iut', parseLabelWithIcons('$(codicon) Indent $(octico) Using $(octic) Tpaces'), [\n\t\t\t{ start: 11, end: 12 },\n\t\t\t{ start: 28, end: 29 },\n\t\t\t{ start: 43, end: 44 },\n\t\t]);\n\n\t\t// Prefix\n\n\t\tfilterOk(matchesFuzzyIconAware, 'using', parseLabelWithIcons('$(codicon) Indent Using Spaces'), [\n\t\t\t{ start: 18, end: 23 },\n\t\t]);\n\n\t\t// Broken Codicon\n\n\t\tfilterOk(matchesFuzzyIconAware, 'codicon', parseLabelWithIcons('This $(codicon Indent Using Spaces'), [\n\t\t\t{ start: 7, end: 14 },\n\t\t]);\n\n\t\tfilterOk(matchesFuzzyIconAware, 'indent', parseLabelWithIcons('This $codicon Indent Using Spaces'), [\n\t\t\t{ start: 14, end: 20 },\n\t\t]);\n\n\t\t// Testing #59343\n\t\tfilterOk(matchesFuzzyIconAware, 'unt', parseLabelWithIcons('$(primitive-dot) $(file-text) Untitled-1'), [\n\t\t\t{ start: 30, end: 33 },\n\t\t]);\n\t});\n\n\ttest('stripIcons', () => {\n\t\tassert.strictEqual(stripIcons('Hello World'), 'Hello World');\n\t\tassert.strictEqual(stripIcons('$(Hello World'), '$(Hello World');\n\t\tassert.strictEqual(stripIcons('$(Hello) World'), ' World');\n\t\tassert.strictEqual(stripIcons('$(Hello) W$(oi)rld'), ' Wrld');\n\t});\n\n\n\ttest('escapeIcons', () => {\n\t\tassert.strictEqual(escapeIcons('Hello World'), 'Hello World');\n\t\tassert.strictEqual(escapeIcons('$(Hello World'), '$(Hello World');\n\t\tassert.strictEqual(escapeIcons('$(Hello) World'), '\\\\$(Hello) World');\n\t\tassert.strictEqual(escapeIcons('\\\\$(Hello) W$(oi)rld'), '\\\\$(Hello) W\\\\$(oi)rld');\n\t});\n\n\ttest('markdownEscapeEscapedIcons', () => {\n\t\tassert.strictEqual(markdownEscapeEscapedIcons('Hello World'), 'Hello World');\n\t\tassert.strictEqual(markdownEscapeEscapedIcons('$(Hello) World'), '$(Hello) World');\n\t\tassert.strictEqual(markdownEscapeEscapedIcons('\\\\$(Hello) World'), '\\\\\\\\$(Hello) World');\n\t});\n});\n"]}