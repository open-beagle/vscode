{"version":3,"file":"port.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/test/node/port.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAOhG,CAAA,GAAA,sBAAU,CAAA,CAAC,OAAO,EAAE,GAAG,EAAE;QACxB,CAAC,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,kDAAkD,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,gCAAgC,EAAE,UAAU,IAAI;YAEjJ,kCAAkC;YAClC,KAAK,CAAC,YAAY,CAAC,IAAI,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;gBACxD,MAAM,CAAC,EAAE,CAAC,WAAW,IAAI,IAAI,CAAC,CAAC;gBAE/B,qCAAqC;gBACrC,MAAM,MAAM,GAAG,GAAG,CAAC,YAAY,EAAE,CAAC;gBAClC,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,SAAS,EAAE,SAAS,EAAE,GAAG,EAAE;oBAErD,mGAAmG;oBACnG,KAAK,CAAC,YAAY,CAAC,IAAI,EAAE,EAAE,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;wBACpD,MAAM,CAAC,EAAE,CAAC,QAAQ,IAAI,IAAI,IAAI,QAAQ,KAAK,WAAW,CAAC,CAAC;wBACxD,MAAM,CAAC,KAAK,EAAE,CAAC;wBAEf,IAAI,EAAE,CAAC;oBACR,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;gBACtB,CAAC,CAAC,CAAC;YACJ,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport * as net from 'net';\nimport * as ports from 'vs/base/node/ports';\nimport { flakySuite } from 'vs/base/test/node/testUtils';\n\nflakySuite('Ports', () => {\n\t(process.env['VSCODE_PID'] ? test.skip /* this test fails when run from within VS Code */ : test)('Finds a free port (no timeout)', function (done) {\n\n\t\t// get an initial freeport >= 7000\n\t\tports.findFreePort(7000, 100, 300000).then(initialPort => {\n\t\t\tassert.ok(initialPort >= 7000);\n\n\t\t\t// create a server to block this port\n\t\t\tconst server = net.createServer();\n\t\t\tserver.listen(initialPort, undefined, undefined, () => {\n\n\t\t\t\t// once listening, find another free port and assert that the port is different from the opened one\n\t\t\t\tports.findFreePort(7000, 50, 300000).then(freePort => {\n\t\t\t\t\tassert.ok(freePort >= 7000 && freePort !== initialPort);\n\t\t\t\t\tserver.close();\n\n\t\t\t\t\tdone();\n\t\t\t\t}, err => done(err));\n\t\t\t});\n\t\t}, err => done(err));\n\t});\n});\n"]}