{"version":3,"file":"keytar.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/test/node/keytar.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAKhG,KAAK,CAAC,QAAQ,EAAE,GAAG,EAAE;QAEpB,CAAC,kBAAO,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,yBAAyB,EAAE,KAAK,IAAI,EAAE;YAClE,MAAM,MAAM,GAAG,sDAAa,QAAQ,2BAAC,CAAC;YACtC,MAAM,IAAI,GAAG,eAAe,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,EAAE,CAAC;YAC9D,IAAI;gBACH,MAAM,MAAM,CAAC,WAAW,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;gBAC7C,MAAM,CAAC,WAAW,CAAC,MAAM,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,CAAC;gBAC3D,MAAM,CAAC,WAAW,CAAC,CAAC,MAAM,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;gBACnE,MAAM,CAAC,WAAW,CAAC,MAAM,MAAM,CAAC,WAAW,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC;gBACjE,MAAM,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;gBACzC,MAAM,CAAC,WAAW,CAAC,MAAM,MAAM,CAAC,WAAW,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,IAAI,CAAC,CAAC;aAChE;YAAC,OAAO,GAAG,EAAE;gBACb,kBAAkB;gBAClB,IAAI;oBACH,MAAM,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;iBACzC;wBAAS;oBACT,6CAA6C;oBAC7C,MAAM,GAAG,CAAC;iBACV;aACD;QACF,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { isLinux } from 'vs/base/common/platform';\n\nsuite('Keytar', () => {\n\n\t(isLinux ? test.skip : test)('loads and is functional', async () => { // TODO@RMacfarlane test seems to fail on Linux (Error: Unknown or unsupported transport 'disabled' for address 'disabled:')\n\t\tconst keytar = await import('keytar');\n\t\tconst name = `VSCode Test ${Math.floor(Math.random() * 1e9)}`;\n\t\ttry {\n\t\t\tawait keytar.setPassword(name, 'foo', 'bar');\n\t\t\tassert.strictEqual(await keytar.findPassword(name), 'bar');\n\t\t\tassert.strictEqual((await keytar.findCredentials(name)).length, 1);\n\t\t\tassert.strictEqual(await keytar.getPassword(name, 'foo'), 'bar');\n\t\t\tawait keytar.deletePassword(name, 'foo');\n\t\t\tassert.strictEqual(await keytar.getPassword(name, 'foo'), null);\n\t\t} catch (err) {\n\t\t\t// try to clean up\n\t\t\ttry {\n\t\t\t\tawait keytar.deletePassword(name, 'foo');\n\t\t\t} finally {\n\t\t\t\t// eslint-disable-next-line no-unsafe-finally\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t});\n});\n"]}