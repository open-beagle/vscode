{"version":3,"file":"processes.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/test/node/processes/processes.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport * as cp from 'child_process';\nimport * as objects from 'vs/base/common/objects';\nimport * as platform from 'vs/base/common/platform';\nimport * as processes from 'vs/base/node/processes';\nimport { getPathFromAmdModule } from 'vs/base/test/node/testUtils';\n\nfunction fork(id: string): cp.ChildProcess {\n\tconst opts: any = {\n\t\tenv: objects.mixin(objects.deepClone(process.env), {\n\t\t\tVSCODE_AMD_ENTRYPOINT: id,\n\t\t\tVSCODE_PIPE_LOGGING: 'true',\n\t\t\tVSCODE_VERBOSE_LOGGING: true\n\t\t})\n\t};\n\n\treturn cp.fork(getPathFromAmdModule(require, 'bootstrap-fork'), ['--type=processTests'], opts);\n}\n\nsuite('Processes', () => {\n\ttest('buffered sending - simple data', function (done: () => void) {\n\t\tif (process.env['VSCODE_PID']) {\n\t\t\treturn done(); // this test fails when run from within VS Code\n\t\t}\n\n\t\tconst child = fork('vs/base/test/node/processes/fixtures/fork');\n\t\tconst sender = processes.createQueuedSender(child);\n\n\t\tlet counter = 0;\n\n\t\tconst msg1 = 'Hello One';\n\t\tconst msg2 = 'Hello Two';\n\t\tconst msg3 = 'Hello Three';\n\n\t\tchild.on('message', msgFromChild => {\n\t\t\tif (msgFromChild === 'ready') {\n\t\t\t\tsender.send(msg1);\n\t\t\t\tsender.send(msg2);\n\t\t\t\tsender.send(msg3);\n\t\t\t} else {\n\t\t\t\tcounter++;\n\n\t\t\t\tif (counter === 1) {\n\t\t\t\t\tassert.strictEqual(msgFromChild, msg1);\n\t\t\t\t} else if (counter === 2) {\n\t\t\t\t\tassert.strictEqual(msgFromChild, msg2);\n\t\t\t\t} else if (counter === 3) {\n\t\t\t\t\tassert.strictEqual(msgFromChild, msg3);\n\n\t\t\t\t\tchild.kill();\n\t\t\t\t\tdone();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\n\t(!platform.isWindows || process.env['VSCODE_PID'] ? test.skip : test)('buffered sending - lots of data (potential deadlock on win32)', function (done: () => void) { // test is only relevant for Windows and seems to crash randomly on some Linux builds\n\t\tconst child = fork('vs/base/test/node/processes/fixtures/fork_large');\n\t\tconst sender = processes.createQueuedSender(child);\n\n\t\tconst largeObj = Object.create(null);\n\t\tfor (let i = 0; i < 10000; i++) {\n\t\t\tlargeObj[i] = 'some data';\n\t\t}\n\n\t\tconst msg = JSON.stringify(largeObj);\n\t\tchild.on('message', msgFromChild => {\n\t\t\tif (msgFromChild === 'ready') {\n\t\t\t\tsender.send(msg);\n\t\t\t\tsender.send(msg);\n\t\t\t\tsender.send(msg);\n\t\t\t} else if (msgFromChild === 'done') {\n\t\t\t\tchild.kill();\n\t\t\t\tdone();\n\t\t\t}\n\t\t});\n\t});\n});\n"]}