{"version":3,"file":"zip.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/test/node/zip/zip.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAWhG,KAAK,CAAC,KAAK,EAAE,GAAG,EAAE;QAEjB,IAAI,OAAe,CAAC;QAEpB,KAAK,CAAC,GAAG,EAAE;YACV,OAAO,GAAG,CAAA,GAAA,6BAAiB,CAAA,CAAC,CAAA,GAAA,WAAM,CAAA,EAAE,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;YAEzD,OAAO,aAAQ,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,GAAG,EAAE;YACb,OAAO,CAAA,GAAA,YAAM,CAAA,CAAC,OAAO,CAAC,CAAC;QACxB,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;YACpD,MAAM,QAAQ,GAAG,CAAA,GAAA,gCAAoB,CAAA,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;YAC7D,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;YAEnD,MAAM,CAAA,GAAA,+BAAuB,CAAA,CAAC,KAAK,CAAC,EAAE,CAAC,CAAA,GAAA,aAAO,CAAA,CAAC,OAAO,EAAE,OAAO,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC;YAC7E,MAAM,SAAS,GAAG,MAAM,CAAA,GAAA,YAAM,CAAA,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC,CAAC;YAChE,MAAM,CAAC,SAAS,CAAC,CAAC;QACnB,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport * as path from 'vs/base/common/path';\nimport { tmpdir } from 'os';\nimport { promises } from 'fs';\nimport { extract } from 'vs/base/node/zip';\nimport { rimraf, exists } from 'vs/base/node/pfs';\nimport { createCancelablePromise } from 'vs/base/common/async';\nimport { getRandomTestPath, getPathFromAmdModule } from 'vs/base/test/node/testUtils';\n\nsuite('Zip', () => {\n\n\tlet testDir: string;\n\n\tsetup(() => {\n\t\ttestDir = getRandomTestPath(tmpdir(), 'vsctests', 'zip');\n\n\t\treturn promises.mkdir(testDir, { recursive: true });\n\t});\n\n\tteardown(() => {\n\t\treturn rimraf(testDir);\n\t});\n\n\ttest('extract should handle directories', async () => {\n\t\tconst fixtures = getPathFromAmdModule(require, './fixtures');\n\t\tconst fixture = path.join(fixtures, 'extract.zip');\n\n\t\tawait createCancelablePromise(token => extract(fixture, testDir, {}, token));\n\t\tconst doesExist = await exists(path.join(testDir, 'extension'));\n\t\tassert(doesExist);\n\t});\n});\n"]}