{"version":3,"file":"compressedObjectTreeModel.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/test/browser/ui/tree/compressedObjectTreeModel.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { compress, ICompressedTreeElement, ICompressedTreeNode, decompress, CompressedObjectTreeModel } from 'vs/base/browser/ui/tree/compressedObjectTreeModel';\nimport { Iterable } from 'vs/base/common/iterator';\nimport { ITreeNode } from 'vs/base/browser/ui/tree/tree';\nimport { IList } from 'vs/base/browser/ui/tree/indexTreeModel';\nimport { IObjectTreeModelSetChildrenOptions } from 'vs/base/browser/ui/tree/objectTreeModel';\n\ninterface IResolvedCompressedTreeElement<T> extends ICompressedTreeElement<T> {\n\treadonly element: T;\n\treadonly children?: ICompressedTreeElement<T>[];\n}\n\nfunction resolve<T>(treeElement: ICompressedTreeElement<T>): IResolvedCompressedTreeElement<T> {\n\tconst result: any = { element: treeElement.element };\n\tconst children = [...Iterable.map(Iterable.from(treeElement.children), resolve)];\n\n\tif (treeElement.incompressible) {\n\t\tresult.incompressible = true;\n\t}\n\n\tif (children.length > 0) {\n\t\tresult.children = children;\n\t}\n\n\treturn result;\n}\n\nsuite('CompressedObjectTree', function () {\n\n\tsuite('compress & decompress', function () {\n\n\t\ttest('small', function () {\n\t\t\tconst decompressed: ICompressedTreeElement<number> = { element: 1 };\n\t\t\tconst compressed: IResolvedCompressedTreeElement<ICompressedTreeNode<number>> =\n\t\t\t\t{ element: { elements: [1], incompressible: false } };\n\n\t\t\tassert.deepStrictEqual(resolve(compress(decompressed)), compressed);\n\t\t\tassert.deepStrictEqual(resolve(decompress(compressed)), decompressed);\n\t\t});\n\n\t\ttest('no compression', function () {\n\t\t\tconst decompressed: ICompressedTreeElement<number> = {\n\t\t\t\telement: 1, children: [\n\t\t\t\t\t{ element: 11 },\n\t\t\t\t\t{ element: 12 },\n\t\t\t\t\t{ element: 13 }\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tconst compressed: IResolvedCompressedTreeElement<ICompressedTreeNode<number>> = {\n\t\t\t\telement: { elements: [1], incompressible: false },\n\t\t\t\tchildren: [\n\t\t\t\t\t{ element: { elements: [11], incompressible: false } },\n\t\t\t\t\t{ element: { elements: [12], incompressible: false } },\n\t\t\t\t\t{ element: { elements: [13], incompressible: false } }\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tassert.deepStrictEqual(resolve(compress(decompressed)), compressed);\n\t\t\tassert.deepStrictEqual(resolve(decompress(compressed)), decompressed);\n\t\t});\n\n\t\ttest('single hierarchy', function () {\n\t\t\tconst decompressed: ICompressedTreeElement<number> = {\n\t\t\t\telement: 1, children: [\n\t\t\t\t\t{\n\t\t\t\t\t\telement: 11, children: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\telement: 111, children: [\n\t\t\t\t\t\t\t\t\t{ element: 1111 }\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tconst compressed: IResolvedCompressedTreeElement<ICompressedTreeNode<number>> = {\n\t\t\t\telement: { elements: [1, 11, 111, 1111], incompressible: false }\n\t\t\t};\n\n\t\t\tassert.deepStrictEqual(resolve(compress(decompressed)), compressed);\n\t\t\tassert.deepStrictEqual(resolve(decompress(compressed)), decompressed);\n\t\t});\n\n\t\ttest('deep compression', function () {\n\t\t\tconst decompressed: ICompressedTreeElement<number> = {\n\t\t\t\telement: 1, children: [\n\t\t\t\t\t{\n\t\t\t\t\t\telement: 11, children: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\telement: 111, children: [\n\t\t\t\t\t\t\t\t\t{ element: 1111 },\n\t\t\t\t\t\t\t\t\t{ element: 1112 },\n\t\t\t\t\t\t\t\t\t{ element: 1113 },\n\t\t\t\t\t\t\t\t\t{ element: 1114 },\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tconst compressed: IResolvedCompressedTreeElement<ICompressedTreeNode<number>> = {\n\t\t\t\telement: { elements: [1, 11, 111], incompressible: false },\n\t\t\t\tchildren: [\n\t\t\t\t\t{ element: { elements: [1111], incompressible: false } },\n\t\t\t\t\t{ element: { elements: [1112], incompressible: false } },\n\t\t\t\t\t{ element: { elements: [1113], incompressible: false } },\n\t\t\t\t\t{ element: { elements: [1114], incompressible: false } },\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tassert.deepStrictEqual(resolve(compress(decompressed)), compressed);\n\t\t\tassert.deepStrictEqual(resolve(decompress(compressed)), decompressed);\n\t\t});\n\n\t\ttest('double deep compression', function () {\n\t\t\tconst decompressed: ICompressedTreeElement<number> = {\n\t\t\t\telement: 1, children: [\n\t\t\t\t\t{\n\t\t\t\t\t\telement: 11, children: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\telement: 111, children: [\n\t\t\t\t\t\t\t\t\t{ element: 1112 },\n\t\t\t\t\t\t\t\t\t{ element: 1113 },\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\telement: 12, children: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\telement: 121, children: [\n\t\t\t\t\t\t\t\t\t{ element: 1212 },\n\t\t\t\t\t\t\t\t\t{ element: 1213 },\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tconst compressed: IResolvedCompressedTreeElement<ICompressedTreeNode<number>> = {\n\t\t\t\telement: { elements: [1], incompressible: false },\n\t\t\t\tchildren: [\n\t\t\t\t\t{\n\t\t\t\t\t\telement: { elements: [11, 111], incompressible: false },\n\t\t\t\t\t\tchildren: [\n\t\t\t\t\t\t\t{ element: { elements: [1112], incompressible: false } },\n\t\t\t\t\t\t\t{ element: { elements: [1113], incompressible: false } },\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\telement: { elements: [12, 121], incompressible: false },\n\t\t\t\t\t\tchildren: [\n\t\t\t\t\t\t\t{ element: { elements: [1212], incompressible: false } },\n\t\t\t\t\t\t\t{ element: { elements: [1213], incompressible: false } },\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tassert.deepStrictEqual(resolve(compress(decompressed)), compressed);\n\t\t\tassert.deepStrictEqual(resolve(decompress(compressed)), decompressed);\n\t\t});\n\n\t\ttest('incompressible leaf', function () {\n\t\t\tconst decompressed: ICompressedTreeElement<number> = {\n\t\t\t\telement: 1, children: [\n\t\t\t\t\t{\n\t\t\t\t\t\telement: 11, children: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\telement: 111, children: [\n\t\t\t\t\t\t\t\t\t{ element: 1111, incompressible: true }\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tconst compressed: IResolvedCompressedTreeElement<ICompressedTreeNode<number>> = {\n\t\t\t\telement: { elements: [1, 11, 111], incompressible: false },\n\t\t\t\tchildren: [\n\t\t\t\t\t{ element: { elements: [1111], incompressible: true } }\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tassert.deepStrictEqual(resolve(compress(decompressed)), compressed);\n\t\t\tassert.deepStrictEqual(resolve(decompress(compressed)), decompressed);\n\t\t});\n\n\t\ttest('incompressible branch', function () {\n\t\t\tconst decompressed: ICompressedTreeElement<number> = {\n\t\t\t\telement: 1, children: [\n\t\t\t\t\t{\n\t\t\t\t\t\telement: 11, children: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\telement: 111, incompressible: true, children: [\n\t\t\t\t\t\t\t\t\t{ element: 1111 }\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tconst compressed: IResolvedCompressedTreeElement<ICompressedTreeNode<number>> = {\n\t\t\t\telement: { elements: [1, 11], incompressible: false },\n\t\t\t\tchildren: [\n\t\t\t\t\t{ element: { elements: [111, 1111], incompressible: true } }\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tassert.deepStrictEqual(resolve(compress(decompressed)), compressed);\n\t\t\tassert.deepStrictEqual(resolve(decompress(compressed)), decompressed);\n\t\t});\n\n\t\ttest('incompressible chain', function () {\n\t\t\tconst decompressed: ICompressedTreeElement<number> = {\n\t\t\t\telement: 1, children: [\n\t\t\t\t\t{\n\t\t\t\t\t\telement: 11, children: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\telement: 111, incompressible: true, children: [\n\t\t\t\t\t\t\t\t\t{ element: 1111, incompressible: true }\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tconst compressed: IResolvedCompressedTreeElement<ICompressedTreeNode<number>> = {\n\t\t\t\telement: { elements: [1, 11], incompressible: false },\n\t\t\t\tchildren: [\n\t\t\t\t\t{\n\t\t\t\t\t\telement: { elements: [111], incompressible: true },\n\t\t\t\t\t\tchildren: [\n\t\t\t\t\t\t\t{ element: { elements: [1111], incompressible: true } }\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tassert.deepStrictEqual(resolve(compress(decompressed)), compressed);\n\t\t\tassert.deepStrictEqual(resolve(decompress(compressed)), decompressed);\n\t\t});\n\n\t\ttest('incompressible tree', function () {\n\t\t\tconst decompressed: ICompressedTreeElement<number> = {\n\t\t\t\telement: 1, children: [\n\t\t\t\t\t{\n\t\t\t\t\t\telement: 11, incompressible: true, children: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\telement: 111, incompressible: true, children: [\n\t\t\t\t\t\t\t\t\t{ element: 1111, incompressible: true }\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tconst compressed: IResolvedCompressedTreeElement<ICompressedTreeNode<number>> = {\n\t\t\t\telement: { elements: [1], incompressible: false },\n\t\t\t\tchildren: [\n\t\t\t\t\t{\n\t\t\t\t\t\telement: { elements: [11], incompressible: true },\n\t\t\t\t\t\tchildren: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\telement: { elements: [111], incompressible: true },\n\t\t\t\t\t\t\t\tchildren: [\n\t\t\t\t\t\t\t\t\t{ element: { elements: [1111], incompressible: true } }\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tassert.deepStrictEqual(resolve(compress(decompressed)), compressed);\n\t\t\tassert.deepStrictEqual(resolve(decompress(compressed)), decompressed);\n\t\t});\n\t});\n\n\tfunction toList<T>(arr: T[]): IList<T> {\n\t\treturn {\n\t\t\tsplice(start: number, deleteCount: number, elements: T[]): void {\n\t\t\t\tarr.splice(start, deleteCount, ...elements);\n\t\t\t},\n\t\t\tupdateElementHeight() { }\n\t\t};\n\t}\n\n\tfunction toArray<T>(list: ITreeNode<ICompressedTreeNode<T>>[]): T[][] {\n\t\treturn list.map(i => i.element.elements);\n\t}\n\n\tsuite('CompressedObjectTreeModel', function () {\n\n\t\t/**\n\t\t * Calls that test function twice, once with an empty options and\n\t\t * once with `diffIdentityProvider`.\n\t\t */\n\t\tfunction withSmartSplice(fn: (options: IObjectTreeModelSetChildrenOptions<number, any>) => void) {\n\t\t\tfn({});\n\t\t\tfn({ diffIdentityProvider: { getId: n => String(n) } });\n\t\t}\n\n\n\t\ttest('ctor', () => {\n\t\t\tconst list: ITreeNode<ICompressedTreeNode<number>>[] = [];\n\t\t\tconst model = new CompressedObjectTreeModel<number>('test', toList(list));\n\t\t\tassert(model);\n\t\t\tassert.strictEqual(list.length, 0);\n\t\t\tassert.strictEqual(model.size, 0);\n\t\t});\n\n\t\ttest('flat', () => withSmartSplice(options => {\n\t\t\tconst list: ITreeNode<ICompressedTreeNode<number>>[] = [];\n\t\t\tconst model = new CompressedObjectTreeModel<number>('test', toList(list));\n\n\t\t\tmodel.setChildren(null, [\n\t\t\t\t{ element: 0 },\n\t\t\t\t{ element: 1 },\n\t\t\t\t{ element: 2 }\n\t\t\t], options);\n\n\t\t\tassert.deepStrictEqual(toArray(list), [[0], [1], [2]]);\n\t\t\tassert.strictEqual(model.size, 3);\n\n\t\t\tmodel.setChildren(null, [\n\t\t\t\t{ element: 3 },\n\t\t\t\t{ element: 4 },\n\t\t\t\t{ element: 5 },\n\t\t\t], options);\n\n\t\t\tassert.deepStrictEqual(toArray(list), [[3], [4], [5]]);\n\t\t\tassert.strictEqual(model.size, 3);\n\n\t\t\tmodel.setChildren(null, [], options);\n\t\t\tassert.deepStrictEqual(toArray(list), []);\n\t\t\tassert.strictEqual(model.size, 0);\n\t\t}));\n\n\t\ttest('nested', () => withSmartSplice(options => {\n\t\t\tconst list: ITreeNode<ICompressedTreeNode<number>>[] = [];\n\t\t\tconst model = new CompressedObjectTreeModel<number>('test', toList(list));\n\n\t\t\tmodel.setChildren(null, [\n\t\t\t\t{\n\t\t\t\t\telement: 0, children: [\n\t\t\t\t\t\t{ element: 10 },\n\t\t\t\t\t\t{ element: 11 },\n\t\t\t\t\t\t{ element: 12 },\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{ element: 1 },\n\t\t\t\t{ element: 2 }\n\t\t\t], options);\n\n\t\t\tassert.deepStrictEqual(toArray(list), [[0], [10], [11], [12], [1], [2]]);\n\t\t\tassert.strictEqual(model.size, 6);\n\n\t\t\tmodel.setChildren(12, [\n\t\t\t\t{ element: 120 },\n\t\t\t\t{ element: 121 }\n\t\t\t], options);\n\n\t\t\tassert.deepStrictEqual(toArray(list), [[0], [10], [11], [12], [120], [121], [1], [2]]);\n\t\t\tassert.strictEqual(model.size, 8);\n\n\t\t\tmodel.setChildren(0, [], options);\n\t\t\tassert.deepStrictEqual(toArray(list), [[0], [1], [2]]);\n\t\t\tassert.strictEqual(model.size, 3);\n\n\t\t\tmodel.setChildren(null, [], options);\n\t\t\tassert.deepStrictEqual(toArray(list), []);\n\t\t\tassert.strictEqual(model.size, 0);\n\t\t}));\n\n\t\ttest('compressed', () => withSmartSplice(options => {\n\t\t\tconst list: ITreeNode<ICompressedTreeNode<number>>[] = [];\n\t\t\tconst model = new CompressedObjectTreeModel<number>('test', toList(list));\n\n\t\t\tmodel.setChildren(null, [\n\t\t\t\t{\n\t\t\t\t\telement: 1, children: [{\n\t\t\t\t\t\telement: 11, children: [{\n\t\t\t\t\t\t\telement: 111, children: [\n\t\t\t\t\t\t\t\t{ element: 1111 },\n\t\t\t\t\t\t\t\t{ element: 1112 },\n\t\t\t\t\t\t\t\t{ element: 1113 },\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}]\n\t\t\t\t\t}]\n\t\t\t\t}\n\t\t\t], options);\n\n\t\t\tassert.deepStrictEqual(toArray(list), [[1, 11, 111], [1111], [1112], [1113]]);\n\t\t\tassert.strictEqual(model.size, 6);\n\n\t\t\tmodel.setChildren(11, [\n\t\t\t\t{ element: 111 },\n\t\t\t\t{ element: 112 },\n\t\t\t\t{ element: 113 },\n\t\t\t], options);\n\n\t\t\tassert.deepStrictEqual(toArray(list), [[1, 11], [111], [112], [113]]);\n\t\t\tassert.strictEqual(model.size, 5);\n\n\t\t\tmodel.setChildren(113, [\n\t\t\t\t{ element: 1131 }\n\t\t\t], options);\n\n\t\t\tassert.deepStrictEqual(toArray(list), [[1, 11], [111], [112], [113, 1131]]);\n\t\t\tassert.strictEqual(model.size, 6);\n\n\t\t\tmodel.setChildren(1131, [\n\t\t\t\t{ element: 1132 }\n\t\t\t], options);\n\n\t\t\tassert.deepStrictEqual(toArray(list), [[1, 11], [111], [112], [113, 1131, 1132]]);\n\t\t\tassert.strictEqual(model.size, 7);\n\n\t\t\tmodel.setChildren(1131, [\n\t\t\t\t{ element: 1132 },\n\t\t\t\t{ element: 1133 },\n\t\t\t], options);\n\n\t\t\tassert.deepStrictEqual(toArray(list), [[1, 11], [111], [112], [113, 1131], [1132], [1133]]);\n\t\t\tassert.strictEqual(model.size, 8);\n\t\t}));\n\t});\n});\n"]}