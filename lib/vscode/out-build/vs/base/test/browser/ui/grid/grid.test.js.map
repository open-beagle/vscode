{"version":3,"file":"grid.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/test/browser/ui/grid/grid.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { Direction, getRelativeLocation, Orientation, SerializableGrid, ISerializableView, IViewDeserializer, GridNode, Sizing, isGridBranchNode, sanitizeGridNodeDescriptor, GridNodeDescriptor, createSerializedGrid, Grid } from 'vs/base/browser/ui/grid/grid';\nimport { TestView, nodesToArrays } from './util';\nimport { deepClone } from 'vs/base/common/objects';\nimport { Event } from 'vs/base/common/event';\n\n// Simple example:\n//\n//  +-----+---------------+\n//  |  4  |      2        |\n//  +-----+---------+-----+\n//  |        1      |     |\n//  +---------------+  3  |\n//  |        5      |     |\n//  +---------------+-----+\n//\n//  V\n//  +-H\n//  | +-4\n//  | +-2\n//  +-H\n//    +-V\n//    | +-1\n//    | +-5\n//    +-3\n\nsuite('Grid', function () {\n\tlet container: HTMLElement;\n\n\tsetup(function () {\n\t\tcontainer = document.createElement('div');\n\t\tcontainer.style.position = 'absolute';\n\t\tcontainer.style.width = `${800}px`;\n\t\tcontainer.style.height = `${600}px`;\n\t});\n\n\ttest('getRelativeLocation', () => {\n\t\tassert.deepStrictEqual(getRelativeLocation(Orientation.VERTICAL, [0], Direction.Up), [0]);\n\t\tassert.deepStrictEqual(getRelativeLocation(Orientation.VERTICAL, [0], Direction.Down), [1]);\n\t\tassert.deepStrictEqual(getRelativeLocation(Orientation.VERTICAL, [0], Direction.Left), [0, 0]);\n\t\tassert.deepStrictEqual(getRelativeLocation(Orientation.VERTICAL, [0], Direction.Right), [0, 1]);\n\n\t\tassert.deepStrictEqual(getRelativeLocation(Orientation.HORIZONTAL, [0], Direction.Up), [0, 0]);\n\t\tassert.deepStrictEqual(getRelativeLocation(Orientation.HORIZONTAL, [0], Direction.Down), [0, 1]);\n\t\tassert.deepStrictEqual(getRelativeLocation(Orientation.HORIZONTAL, [0], Direction.Left), [0]);\n\t\tassert.deepStrictEqual(getRelativeLocation(Orientation.HORIZONTAL, [0], Direction.Right), [1]);\n\n\t\tassert.deepStrictEqual(getRelativeLocation(Orientation.VERTICAL, [4], Direction.Up), [4]);\n\t\tassert.deepStrictEqual(getRelativeLocation(Orientation.VERTICAL, [4], Direction.Down), [5]);\n\t\tassert.deepStrictEqual(getRelativeLocation(Orientation.VERTICAL, [4], Direction.Left), [4, 0]);\n\t\tassert.deepStrictEqual(getRelativeLocation(Orientation.VERTICAL, [4], Direction.Right), [4, 1]);\n\n\t\tassert.deepStrictEqual(getRelativeLocation(Orientation.VERTICAL, [0, 0], Direction.Up), [0, 0, 0]);\n\t\tassert.deepStrictEqual(getRelativeLocation(Orientation.VERTICAL, [0, 0], Direction.Down), [0, 0, 1]);\n\t\tassert.deepStrictEqual(getRelativeLocation(Orientation.VERTICAL, [0, 0], Direction.Left), [0, 0]);\n\t\tassert.deepStrictEqual(getRelativeLocation(Orientation.VERTICAL, [0, 0], Direction.Right), [0, 1]);\n\n\t\tassert.deepStrictEqual(getRelativeLocation(Orientation.VERTICAL, [1, 2], Direction.Up), [1, 2, 0]);\n\t\tassert.deepStrictEqual(getRelativeLocation(Orientation.VERTICAL, [1, 2], Direction.Down), [1, 2, 1]);\n\t\tassert.deepStrictEqual(getRelativeLocation(Orientation.VERTICAL, [1, 2], Direction.Left), [1, 2]);\n\t\tassert.deepStrictEqual(getRelativeLocation(Orientation.VERTICAL, [1, 2], Direction.Right), [1, 3]);\n\n\t\tassert.deepStrictEqual(getRelativeLocation(Orientation.VERTICAL, [1, 2, 3], Direction.Up), [1, 2, 3]);\n\t\tassert.deepStrictEqual(getRelativeLocation(Orientation.VERTICAL, [1, 2, 3], Direction.Down), [1, 2, 4]);\n\t\tassert.deepStrictEqual(getRelativeLocation(Orientation.VERTICAL, [1, 2, 3], Direction.Left), [1, 2, 3, 0]);\n\t\tassert.deepStrictEqual(getRelativeLocation(Orientation.VERTICAL, [1, 2, 3], Direction.Right), [1, 2, 3, 1]);\n\t});\n\n\ttest('empty', () => {\n\t\tconst view1 = new TestView(100, Number.MAX_VALUE, 100, Number.MAX_VALUE);\n\t\tconst gridview = new Grid(view1);\n\t\tcontainer.appendChild(gridview.element);\n\t\tgridview.layout(800, 600);\n\n\t\tassert.deepStrictEqual(view1.size, [800, 600]);\n\t});\n\n\ttest('two views vertically', function () {\n\t\tconst view1 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tconst grid = new Grid(view1);\n\t\tcontainer.appendChild(grid.element);\n\t\tgrid.layout(800, 600);\n\t\tassert.deepStrictEqual(view1.size, [800, 600]);\n\n\t\tconst view2 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view2, 200, view1, Direction.Up);\n\t\tassert.deepStrictEqual(view1.size, [800, 400]);\n\t\tassert.deepStrictEqual(view2.size, [800, 200]);\n\t});\n\n\ttest('two views horizontally', function () {\n\t\tconst view1 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tconst grid = new Grid(view1);\n\t\tcontainer.appendChild(grid.element);\n\n\t\tgrid.layout(800, 600);\n\t\tassert.deepStrictEqual(view1.size, [800, 600]);\n\n\t\tconst view2 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view2, 300, view1, Direction.Right);\n\t\tassert.deepStrictEqual(view1.size, [500, 600]);\n\t\tassert.deepStrictEqual(view2.size, [300, 600]);\n\t});\n\n\ttest('simple layout', function () {\n\t\tconst view1 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tconst grid = new Grid(view1);\n\t\tcontainer.appendChild(grid.element);\n\n\t\tgrid.layout(800, 600);\n\t\tassert.deepStrictEqual(view1.size, [800, 600]);\n\n\t\tconst view2 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view2, 200, view1, Direction.Up);\n\t\tassert.deepStrictEqual(view1.size, [800, 400]);\n\t\tassert.deepStrictEqual(view2.size, [800, 200]);\n\n\t\tconst view3 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view3, 200, view1, Direction.Right);\n\t\tassert.deepStrictEqual(view1.size, [600, 400]);\n\t\tassert.deepStrictEqual(view2.size, [800, 200]);\n\t\tassert.deepStrictEqual(view3.size, [200, 400]);\n\n\t\tconst view4 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view4, 200, view2, Direction.Left);\n\t\tassert.deepStrictEqual(view1.size, [600, 400]);\n\t\tassert.deepStrictEqual(view2.size, [600, 200]);\n\t\tassert.deepStrictEqual(view3.size, [200, 400]);\n\t\tassert.deepStrictEqual(view4.size, [200, 200]);\n\n\t\tconst view5 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view5, 100, view1, Direction.Down);\n\t\tassert.deepStrictEqual(view1.size, [600, 300]);\n\t\tassert.deepStrictEqual(view2.size, [600, 200]);\n\t\tassert.deepStrictEqual(view3.size, [200, 400]);\n\t\tassert.deepStrictEqual(view4.size, [200, 200]);\n\t\tassert.deepStrictEqual(view5.size, [600, 100]);\n\t});\n\n\ttest('another simple layout with automatic size distribution', function () {\n\t\tconst view1 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tconst grid = new Grid(view1);\n\t\tcontainer.appendChild(grid.element);\n\n\t\tgrid.layout(800, 600);\n\t\tassert.deepStrictEqual(view1.size, [800, 600]);\n\n\t\tconst view2 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view2, Sizing.Distribute, view1, Direction.Left);\n\t\tassert.deepStrictEqual(view1.size, [400, 600]);\n\t\tassert.deepStrictEqual(view2.size, [400, 600]);\n\n\t\tconst view3 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view3, Sizing.Distribute, view1, Direction.Right);\n\t\tassert.deepStrictEqual(view1.size, [266, 600]);\n\t\tassert.deepStrictEqual(view2.size, [266, 600]);\n\t\tassert.deepStrictEqual(view3.size, [268, 600]);\n\n\t\tconst view4 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view4, Sizing.Distribute, view2, Direction.Down);\n\t\tassert.deepStrictEqual(view1.size, [266, 600]);\n\t\tassert.deepStrictEqual(view2.size, [266, 300]);\n\t\tassert.deepStrictEqual(view3.size, [268, 600]);\n\t\tassert.deepStrictEqual(view4.size, [266, 300]);\n\n\t\tconst view5 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view5, Sizing.Distribute, view3, Direction.Up);\n\t\tassert.deepStrictEqual(view1.size, [266, 600]);\n\t\tassert.deepStrictEqual(view2.size, [266, 300]);\n\t\tassert.deepStrictEqual(view3.size, [268, 300]);\n\t\tassert.deepStrictEqual(view4.size, [266, 300]);\n\t\tassert.deepStrictEqual(view5.size, [268, 300]);\n\n\t\tconst view6 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view6, Sizing.Distribute, view3, Direction.Down);\n\t\tassert.deepStrictEqual(view1.size, [266, 600]);\n\t\tassert.deepStrictEqual(view2.size, [266, 300]);\n\t\tassert.deepStrictEqual(view3.size, [268, 200]);\n\t\tassert.deepStrictEqual(view4.size, [266, 300]);\n\t\tassert.deepStrictEqual(view5.size, [268, 200]);\n\t\tassert.deepStrictEqual(view6.size, [268, 200]);\n\t});\n\n\ttest('another simple layout with split size distribution', function () {\n\t\tconst view1 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tconst grid = new Grid(view1);\n\t\tcontainer.appendChild(grid.element);\n\n\t\tgrid.layout(800, 600);\n\t\tassert.deepStrictEqual(view1.size, [800, 600]);\n\n\t\tconst view2 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view2, Sizing.Split, view1, Direction.Left);\n\t\tassert.deepStrictEqual(view1.size, [400, 600]);\n\t\tassert.deepStrictEqual(view2.size, [400, 600]);\n\n\t\tconst view3 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view3, Sizing.Split, view1, Direction.Right);\n\t\tassert.deepStrictEqual(view1.size, [200, 600]);\n\t\tassert.deepStrictEqual(view2.size, [400, 600]);\n\t\tassert.deepStrictEqual(view3.size, [200, 600]);\n\n\t\tconst view4 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view4, Sizing.Split, view2, Direction.Down);\n\t\tassert.deepStrictEqual(view1.size, [200, 600]);\n\t\tassert.deepStrictEqual(view2.size, [400, 300]);\n\t\tassert.deepStrictEqual(view3.size, [200, 600]);\n\t\tassert.deepStrictEqual(view4.size, [400, 300]);\n\n\t\tconst view5 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view5, Sizing.Split, view3, Direction.Up);\n\t\tassert.deepStrictEqual(view1.size, [200, 600]);\n\t\tassert.deepStrictEqual(view2.size, [400, 300]);\n\t\tassert.deepStrictEqual(view3.size, [200, 300]);\n\t\tassert.deepStrictEqual(view4.size, [400, 300]);\n\t\tassert.deepStrictEqual(view5.size, [200, 300]);\n\n\t\tconst view6 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view6, Sizing.Split, view3, Direction.Down);\n\t\tassert.deepStrictEqual(view1.size, [200, 600]);\n\t\tassert.deepStrictEqual(view2.size, [400, 300]);\n\t\tassert.deepStrictEqual(view3.size, [200, 150]);\n\t\tassert.deepStrictEqual(view4.size, [400, 300]);\n\t\tassert.deepStrictEqual(view5.size, [200, 300]);\n\t\tassert.deepStrictEqual(view6.size, [200, 150]);\n\t});\n\n\ttest('3/2 layout with split', function () {\n\t\tconst view1 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tconst grid = new Grid(view1);\n\t\tcontainer.appendChild(grid.element);\n\n\t\tgrid.layout(800, 600);\n\t\tassert.deepStrictEqual(view1.size, [800, 600]);\n\n\t\tconst view2 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view2, Sizing.Split, view1, Direction.Down);\n\t\tassert.deepStrictEqual(view1.size, [800, 300]);\n\t\tassert.deepStrictEqual(view2.size, [800, 300]);\n\n\t\tconst view3 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view3, Sizing.Split, view2, Direction.Right);\n\t\tassert.deepStrictEqual(view1.size, [800, 300]);\n\t\tassert.deepStrictEqual(view2.size, [400, 300]);\n\t\tassert.deepStrictEqual(view3.size, [400, 300]);\n\n\t\tconst view4 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view4, Sizing.Split, view1, Direction.Right);\n\t\tassert.deepStrictEqual(view1.size, [400, 300]);\n\t\tassert.deepStrictEqual(view2.size, [400, 300]);\n\t\tassert.deepStrictEqual(view3.size, [400, 300]);\n\t\tassert.deepStrictEqual(view4.size, [400, 300]);\n\n\t\tconst view5 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view5, Sizing.Split, view1, Direction.Right);\n\t\tassert.deepStrictEqual(view1.size, [200, 300]);\n\t\tassert.deepStrictEqual(view2.size, [400, 300]);\n\t\tassert.deepStrictEqual(view3.size, [400, 300]);\n\t\tassert.deepStrictEqual(view4.size, [400, 300]);\n\t\tassert.deepStrictEqual(view5.size, [200, 300]);\n\t});\n\n\ttest('sizing should be correct after branch demotion #50564', function () {\n\t\tconst view1 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tconst grid = new Grid(view1);\n\t\tcontainer.appendChild(grid.element);\n\n\t\tgrid.layout(800, 600);\n\n\t\tconst view2 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view2, Sizing.Split, view1, Direction.Right);\n\n\t\tconst view3 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view3, Sizing.Split, view2, Direction.Down);\n\n\t\tconst view4 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view4, Sizing.Split, view2, Direction.Right);\n\t\tassert.deepStrictEqual(view1.size, [400, 600]);\n\t\tassert.deepStrictEqual(view2.size, [200, 300]);\n\t\tassert.deepStrictEqual(view3.size, [400, 300]);\n\t\tassert.deepStrictEqual(view4.size, [200, 300]);\n\n\t\tgrid.removeView(view3);\n\t\tassert.deepStrictEqual(view1.size, [400, 600]);\n\t\tassert.deepStrictEqual(view2.size, [200, 600]);\n\t\tassert.deepStrictEqual(view4.size, [200, 600]);\n\t});\n\n\ttest('sizing should be correct after branch demotion #50675', function () {\n\t\tconst view1 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tconst grid = new Grid(view1);\n\t\tcontainer.appendChild(grid.element);\n\n\t\tgrid.layout(800, 600);\n\n\t\tconst view2 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view2, Sizing.Distribute, view1, Direction.Down);\n\n\t\tconst view3 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view3, Sizing.Distribute, view2, Direction.Down);\n\n\t\tconst view4 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view4, Sizing.Distribute, view3, Direction.Right);\n\t\tassert.deepStrictEqual(view1.size, [800, 200]);\n\t\tassert.deepStrictEqual(view2.size, [800, 200]);\n\t\tassert.deepStrictEqual(view3.size, [400, 200]);\n\t\tassert.deepStrictEqual(view4.size, [400, 200]);\n\n\t\tgrid.removeView(view3, Sizing.Distribute);\n\t\tassert.deepStrictEqual(view1.size, [800, 200]);\n\t\tassert.deepStrictEqual(view2.size, [800, 200]);\n\t\tassert.deepStrictEqual(view4.size, [800, 200]);\n\t});\n\n\ttest('getNeighborViews should work on single view layout', function () {\n\t\tconst view1 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tconst grid = new Grid(view1);\n\t\tcontainer.appendChild(grid.element);\n\n\t\tgrid.layout(800, 600);\n\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view1, Direction.Up), []);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view1, Direction.Right), []);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view1, Direction.Down), []);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view1, Direction.Left), []);\n\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view1, Direction.Up, true), [view1]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view1, Direction.Right, true), [view1]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view1, Direction.Down, true), [view1]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view1, Direction.Left, true), [view1]);\n\t});\n\n\ttest('getNeighborViews should work on simple layout', function () {\n\t\tconst view1 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tconst grid = new Grid(view1);\n\t\tcontainer.appendChild(grid.element);\n\n\t\tgrid.layout(800, 600);\n\n\t\tconst view2 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view2, Sizing.Distribute, view1, Direction.Down);\n\n\t\tconst view3 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view3, Sizing.Distribute, view2, Direction.Down);\n\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view1, Direction.Up), []);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view1, Direction.Right), []);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view1, Direction.Down), [view2]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view1, Direction.Left), []);\n\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view1, Direction.Up, true), [view3]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view1, Direction.Right, true), [view1]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view1, Direction.Down, true), [view2]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view1, Direction.Left, true), [view1]);\n\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view2, Direction.Up), [view1]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view2, Direction.Right), []);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view2, Direction.Down), [view3]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view2, Direction.Left), []);\n\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view2, Direction.Up, true), [view1]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view2, Direction.Right, true), [view2]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view2, Direction.Down, true), [view3]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view2, Direction.Left, true), [view2]);\n\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view3, Direction.Up), [view2]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view3, Direction.Right), []);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view3, Direction.Down), []);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view3, Direction.Left), []);\n\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view3, Direction.Up, true), [view2]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view3, Direction.Right, true), [view3]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view3, Direction.Down, true), [view1]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view3, Direction.Left, true), [view3]);\n\t});\n\n\ttest('getNeighborViews should work on a complex layout', function () {\n\t\tconst view1 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tconst grid = new Grid(view1);\n\t\tcontainer.appendChild(grid.element);\n\n\t\tgrid.layout(800, 600);\n\n\t\tconst view2 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view2, Sizing.Distribute, view1, Direction.Down);\n\n\t\tconst view3 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view3, Sizing.Distribute, view2, Direction.Down);\n\n\t\tconst view4 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view4, Sizing.Distribute, view2, Direction.Right);\n\n\t\tconst view5 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view5, Sizing.Distribute, view4, Direction.Down);\n\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view1, Direction.Up), []);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view1, Direction.Right), []);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view1, Direction.Down), [view2, view4]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view1, Direction.Left), []);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view2, Direction.Up), [view1]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view2, Direction.Right), [view4, view5]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view2, Direction.Down), [view3]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view2, Direction.Left), []);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view4, Direction.Up), [view1]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view4, Direction.Right), []);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view4, Direction.Down), [view5]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view4, Direction.Left), [view2]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view5, Direction.Up), [view4]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view5, Direction.Right), []);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view5, Direction.Down), [view3]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view5, Direction.Left), [view2]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view3, Direction.Up), [view2, view5]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view3, Direction.Right), []);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view3, Direction.Down), []);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view3, Direction.Left), []);\n\t});\n\n\ttest('getNeighborViews should work on another simple layout', function () {\n\t\tconst view1 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tconst grid = new Grid(view1);\n\t\tcontainer.appendChild(grid.element);\n\n\t\tgrid.layout(800, 600);\n\n\t\tconst view2 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view2, Sizing.Distribute, view1, Direction.Right);\n\n\t\tconst view3 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view3, Sizing.Distribute, view2, Direction.Down);\n\n\t\tconst view4 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view4, Sizing.Distribute, view2, Direction.Right);\n\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view4, Direction.Up), []);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view4, Direction.Right), []);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view4, Direction.Down), [view3]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view4, Direction.Left), [view2]);\n\t});\n\n\ttest('getNeighborViews should only return immediate neighbors', function () {\n\t\tconst view1 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tconst grid = new Grid(view1);\n\t\tcontainer.appendChild(grid.element);\n\n\t\tgrid.layout(800, 600);\n\n\t\tconst view2 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view2, Sizing.Distribute, view1, Direction.Right);\n\n\t\tconst view3 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view3, Sizing.Distribute, view2, Direction.Down);\n\n\t\tconst view4 = new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view4, Sizing.Distribute, view2, Direction.Right);\n\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view1, Direction.Right), [view2, view3]);\n\t});\n});\n\nclass TestSerializableView extends TestView implements ISerializableView {\n\n\tconstructor(\n\t\treadonly name: string,\n\t\tminimumWidth: number,\n\t\tmaximumWidth: number,\n\t\tminimumHeight: number,\n\t\tmaximumHeight: number\n\t) {\n\t\tsuper(minimumWidth, maximumWidth, minimumHeight, maximumHeight);\n\t}\n\n\ttoJSON() {\n\t\treturn { name: this.name };\n\t}\n}\n\nclass TestViewDeserializer implements IViewDeserializer<TestSerializableView> {\n\n\tprivate views = new Map<string, TestSerializableView>();\n\n\tfromJSON(json: any): TestSerializableView {\n\t\tconst view = new TestSerializableView(json.name, 50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tthis.views.set(json.name, view);\n\t\treturn view;\n\t}\n\n\tgetView(id: string): TestSerializableView {\n\t\tconst view = this.views.get(id);\n\t\tif (!view) {\n\t\t\tthrow new Error('Unknown view');\n\t\t}\n\t\treturn view;\n\t}\n}\n\nfunction nodesToNames(node: GridNode<TestSerializableView>): any {\n\tif (isGridBranchNode(node)) {\n\t\treturn node.children.map(nodesToNames);\n\t} else {\n\t\treturn node.view.name;\n\t}\n}\n\nsuite('SerializableGrid', function () {\n\n\tlet container: HTMLElement;\n\n\tsetup(function () {\n\t\tcontainer = document.createElement('div');\n\t\tcontainer.style.position = 'absolute';\n\t\tcontainer.style.width = `${800}px`;\n\t\tcontainer.style.height = `${600}px`;\n\t});\n\n\ttest('serialize empty', function () {\n\t\tconst view1 = new TestSerializableView('view1', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tconst grid = new SerializableGrid(view1);\n\t\tcontainer.appendChild(grid.element);\n\t\tgrid.layout(800, 600);\n\n\t\tconst actual = grid.serialize();\n\t\tassert.deepStrictEqual(actual, {\n\t\t\torientation: 0,\n\t\t\twidth: 800,\n\t\t\theight: 600,\n\t\t\troot: {\n\t\t\t\ttype: 'branch',\n\t\t\t\tdata: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'leaf',\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tname: 'view1',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsize: 600\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tsize: 800\n\t\t\t}\n\t\t});\n\t});\n\n\ttest('serialize simple layout', function () {\n\t\tconst view1 = new TestSerializableView('view1', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tconst grid = new SerializableGrid(view1);\n\t\tcontainer.appendChild(grid.element);\n\t\tgrid.layout(800, 600);\n\n\t\tconst view2 = new TestSerializableView('view2', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view2, 200, view1, Direction.Up);\n\n\t\tconst view3 = new TestSerializableView('view3', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view3, 200, view1, Direction.Right);\n\n\t\tconst view4 = new TestSerializableView('view4', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view4, 200, view2, Direction.Left);\n\n\t\tconst view5 = new TestSerializableView('view5', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view5, 100, view1, Direction.Down);\n\n\t\tassert.deepStrictEqual(grid.serialize(), {\n\t\t\torientation: 0,\n\t\t\twidth: 800,\n\t\t\theight: 600,\n\t\t\troot: {\n\t\t\t\ttype: 'branch',\n\t\t\t\tdata: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'branch',\n\t\t\t\t\t\tdata: [\n\t\t\t\t\t\t\t{ type: 'leaf', data: { name: 'view4' }, size: 200 },\n\t\t\t\t\t\t\t{ type: 'leaf', data: { name: 'view2' }, size: 600 }\n\t\t\t\t\t\t],\n\t\t\t\t\t\tsize: 200\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'branch',\n\t\t\t\t\t\tdata: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'branch',\n\t\t\t\t\t\t\t\tdata: [\n\t\t\t\t\t\t\t\t\t{ type: 'leaf', data: { name: 'view1' }, size: 300 },\n\t\t\t\t\t\t\t\t\t{ type: 'leaf', data: { name: 'view5' }, size: 100 }\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tsize: 600\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{ type: 'leaf', data: { name: 'view3' }, size: 200 }\n\t\t\t\t\t\t],\n\t\t\t\t\t\tsize: 400\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tsize: 800\n\t\t\t}\n\t\t});\n\t});\n\n\ttest('deserialize empty', function () {\n\t\tconst view1 = new TestSerializableView('view1', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tconst grid = new SerializableGrid(view1);\n\t\tcontainer.appendChild(grid.element);\n\t\tgrid.layout(800, 600);\n\n\t\tconst json = grid.serialize();\n\t\tgrid.dispose();\n\n\t\tconst deserializer = new TestViewDeserializer();\n\t\tconst grid2 = SerializableGrid.deserialize(json, deserializer);\n\t\tgrid2.layout(800, 600);\n\n\t\tassert.deepStrictEqual(nodesToNames(grid2.getViews()), ['view1']);\n\t});\n\n\ttest('deserialize simple layout', function () {\n\t\tconst view1 = new TestSerializableView('view1', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tconst grid = new SerializableGrid(view1);\n\t\tcontainer.appendChild(grid.element);\n\n\t\tgrid.layout(800, 600);\n\n\t\tconst view2 = new TestSerializableView('view2', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view2, 200, view1, Direction.Up);\n\n\t\tconst view3 = new TestSerializableView('view3', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view3, 200, view1, Direction.Right);\n\n\t\tconst view4 = new TestSerializableView('view4', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view4, 200, view2, Direction.Left);\n\n\t\tconst view5 = new TestSerializableView('view5', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view5, 100, view1, Direction.Down);\n\n\t\tconst json = grid.serialize();\n\t\tgrid.dispose();\n\n\t\tconst deserializer = new TestViewDeserializer();\n\t\tconst grid2 = SerializableGrid.deserialize(json, deserializer);\n\n\t\tconst view1Copy = deserializer.getView('view1');\n\t\tconst view2Copy = deserializer.getView('view2');\n\t\tconst view3Copy = deserializer.getView('view3');\n\t\tconst view4Copy = deserializer.getView('view4');\n\t\tconst view5Copy = deserializer.getView('view5');\n\n\t\tassert.deepStrictEqual(nodesToArrays(grid2.getViews()), [[view4Copy, view2Copy], [[view1Copy, view5Copy], view3Copy]]);\n\n\t\tgrid2.layout(800, 600);\n\n\t\tassert.deepStrictEqual(view1Copy.size, [600, 300]);\n\t\tassert.deepStrictEqual(view2Copy.size, [600, 200]);\n\t\tassert.deepStrictEqual(view3Copy.size, [200, 400]);\n\t\tassert.deepStrictEqual(view4Copy.size, [200, 200]);\n\t\tassert.deepStrictEqual(view5Copy.size, [600, 100]);\n\t});\n\n\ttest('deserialize simple layout with scaling', function () {\n\t\tconst view1 = new TestSerializableView('view1', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tconst grid = new SerializableGrid(view1);\n\t\tcontainer.appendChild(grid.element);\n\n\t\tgrid.layout(800, 600);\n\n\t\tconst view2 = new TestSerializableView('view2', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view2, 200, view1, Direction.Up);\n\n\t\tconst view3 = new TestSerializableView('view3', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view3, 200, view1, Direction.Right);\n\n\t\tconst view4 = new TestSerializableView('view4', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view4, 200, view2, Direction.Left);\n\n\t\tconst view5 = new TestSerializableView('view5', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view5, 100, view1, Direction.Down);\n\n\t\tconst json = grid.serialize();\n\t\tgrid.dispose();\n\n\t\tconst deserializer = new TestViewDeserializer();\n\t\tconst grid2 = SerializableGrid.deserialize(json, deserializer);\n\n\t\tconst view1Copy = deserializer.getView('view1');\n\t\tconst view2Copy = deserializer.getView('view2');\n\t\tconst view3Copy = deserializer.getView('view3');\n\t\tconst view4Copy = deserializer.getView('view4');\n\t\tconst view5Copy = deserializer.getView('view5');\n\n\t\tgrid2.layout(400, 800); // [/2, *4/3]\n\t\tassert.deepStrictEqual(view1Copy.size, [300, 400]);\n\t\tassert.deepStrictEqual(view2Copy.size, [300, 267]);\n\t\tassert.deepStrictEqual(view3Copy.size, [100, 533]);\n\t\tassert.deepStrictEqual(view4Copy.size, [100, 267]);\n\t\tassert.deepStrictEqual(view5Copy.size, [300, 133]);\n\t});\n\n\ttest('deserialize 4 view layout (ben issue #2)', function () {\n\t\tconst view1 = new TestSerializableView('view1', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tconst grid = new SerializableGrid(view1);\n\t\tcontainer.appendChild(grid.element);\n\t\tgrid.layout(800, 600);\n\n\t\tconst view2 = new TestSerializableView('view2', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view2, Sizing.Split, view1, Direction.Down);\n\n\t\tconst view3 = new TestSerializableView('view3', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view3, Sizing.Split, view2, Direction.Down);\n\n\t\tconst view4 = new TestSerializableView('view4', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view4, Sizing.Split, view3, Direction.Right);\n\n\t\tconst json = grid.serialize();\n\t\tgrid.dispose();\n\n\t\tconst deserializer = new TestViewDeserializer();\n\t\tconst grid2 = SerializableGrid.deserialize(json, deserializer);\n\n\t\tconst view1Copy = deserializer.getView('view1');\n\t\tconst view2Copy = deserializer.getView('view2');\n\t\tconst view3Copy = deserializer.getView('view3');\n\t\tconst view4Copy = deserializer.getView('view4');\n\n\t\tgrid2.layout(800, 600);\n\n\t\tassert.deepStrictEqual(view1Copy.size, [800, 300]);\n\t\tassert.deepStrictEqual(view2Copy.size, [800, 150]);\n\t\tassert.deepStrictEqual(view3Copy.size, [400, 150]);\n\t\tassert.deepStrictEqual(view4Copy.size, [400, 150]);\n\t});\n\n\ttest('deserialize 2 view layout (ben issue #3)', function () {\n\t\tconst view1 = new TestSerializableView('view1', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tconst grid = new SerializableGrid(view1);\n\t\tcontainer.appendChild(grid.element);\n\n\t\tgrid.layout(800, 600);\n\n\t\tconst view2 = new TestSerializableView('view2', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view2, Sizing.Split, view1, Direction.Right);\n\n\t\tconst json = grid.serialize();\n\t\tgrid.dispose();\n\n\t\tconst deserializer = new TestViewDeserializer();\n\t\tconst grid2 = SerializableGrid.deserialize(json, deserializer);\n\n\t\tconst view1Copy = deserializer.getView('view1');\n\t\tconst view2Copy = deserializer.getView('view2');\n\n\t\tgrid2.layout(800, 600);\n\n\t\tassert.deepStrictEqual(view1Copy.size, [400, 600]);\n\t\tassert.deepStrictEqual(view2Copy.size, [400, 600]);\n\t});\n\n\ttest('deserialize simple view layout #50609', function () {\n\t\tconst view1 = new TestSerializableView('view1', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tconst grid = new SerializableGrid(view1);\n\t\tcontainer.appendChild(grid.element);\n\n\t\tgrid.layout(800, 600);\n\n\t\tconst view2 = new TestSerializableView('view2', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view2, Sizing.Split, view1, Direction.Right);\n\n\t\tconst view3 = new TestSerializableView('view3', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view3, Sizing.Split, view2, Direction.Down);\n\n\t\tgrid.removeView(view1, Sizing.Split);\n\n\t\tconst json = grid.serialize();\n\t\tgrid.dispose();\n\n\t\tconst deserializer = new TestViewDeserializer();\n\t\tconst grid2 = SerializableGrid.deserialize(json, deserializer);\n\n\t\tconst view2Copy = deserializer.getView('view2');\n\t\tconst view3Copy = deserializer.getView('view3');\n\n\t\tgrid2.layout(800, 600);\n\n\t\tassert.deepStrictEqual(view2Copy.size, [800, 300]);\n\t\tassert.deepStrictEqual(view3Copy.size, [800, 300]);\n\t});\n\n\ttest('sanitizeGridNodeDescriptor', () => {\n\t\tconst nodeDescriptor = { groups: [{ size: 0.2 }, { size: 0.2 }, { size: 0.6, groups: [{}, {}] }] };\n\t\tconst nodeDescriptorCopy = deepClone<GridNodeDescriptor>(nodeDescriptor);\n\t\tsanitizeGridNodeDescriptor(nodeDescriptorCopy, true);\n\t\tassert.deepStrictEqual(nodeDescriptorCopy, { groups: [{ size: 0.2 }, { size: 0.2 }, { size: 0.6, groups: [{ size: 0.5 }, { size: 0.5 }] }] });\n\t});\n\n\ttest('createSerializedGrid', () => {\n\t\tconst gridDescriptor = { orientation: Orientation.VERTICAL, groups: [{ size: 0.2 }, { size: 0.2 }, { size: 0.6, groups: [{}, {}] }] };\n\t\tconst serializedGrid = createSerializedGrid(gridDescriptor);\n\t\tassert.deepStrictEqual(serializedGrid, {\n\t\t\troot: {\n\t\t\t\ttype: 'branch',\n\t\t\t\tsize: undefined,\n\t\t\t\tdata: [\n\t\t\t\t\t{ type: 'leaf', size: 0.2, data: null },\n\t\t\t\t\t{ type: 'leaf', size: 0.2, data: null },\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'branch', size: 0.6, data: [\n\t\t\t\t\t\t\t{ type: 'leaf', size: 0.5, data: null },\n\t\t\t\t\t\t\t{ type: 'leaf', size: 0.5, data: null }\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\torientation: Orientation.VERTICAL,\n\t\t\twidth: 1,\n\t\t\theight: 1\n\t\t});\n\t});\n\n\ttest('createSerializedGrid - issue #85601, should not allow single children groups', () => {\n\t\tconst serializedGrid = createSerializedGrid({ orientation: Orientation.HORIZONTAL, groups: [{ groups: [{}, {}], size: 0.5 }, { groups: [{}], size: 0.5 }] });\n\t\tconst views: ISerializableView[] = [];\n\t\tconst deserializer = new class implements IViewDeserializer<ISerializableView> {\n\t\t\tfromJSON(): ISerializableView {\n\t\t\t\tconst view: ISerializableView = {\n\t\t\t\t\telement: document.createElement('div'),\n\t\t\t\t\tlayout: () => null,\n\t\t\t\t\tminimumWidth: 0,\n\t\t\t\t\tmaximumWidth: Number.POSITIVE_INFINITY,\n\t\t\t\t\tminimumHeight: 0,\n\t\t\t\t\tmaximumHeight: Number.POSITIVE_INFINITY,\n\t\t\t\t\tonDidChange: Event.None,\n\t\t\t\t\ttoJSON: () => ({})\n\t\t\t\t};\n\t\t\t\tviews.push(view);\n\t\t\t\treturn view;\n\t\t\t}\n\t\t};\n\n\t\tconst grid = SerializableGrid.deserialize(serializedGrid, deserializer);\n\t\tassert.strictEqual(views.length, 3);\n\n\t\t// should not throw\n\t\tgrid.removeView(views[2]);\n\t});\n\n\ttest('serialize should store visibility and previous size', function () {\n\t\tconst view1 = new TestSerializableView('view1', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tconst grid = new SerializableGrid(view1);\n\t\tcontainer.appendChild(grid.element);\n\t\tgrid.layout(800, 600);\n\n\t\tconst view2 = new TestSerializableView('view2', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view2, 200, view1, Direction.Up);\n\n\t\tconst view3 = new TestSerializableView('view3', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view3, 200, view1, Direction.Right);\n\n\t\tconst view4 = new TestSerializableView('view4', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view4, 200, view2, Direction.Left);\n\n\t\tconst view5 = new TestSerializableView('view5', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view5, 100, view1, Direction.Down);\n\n\t\tassert.deepStrictEqual(view1.size, [600, 300]);\n\t\tassert.deepStrictEqual(view2.size, [600, 200]);\n\t\tassert.deepStrictEqual(view3.size, [200, 400]);\n\t\tassert.deepStrictEqual(view4.size, [200, 200]);\n\t\tassert.deepStrictEqual(view5.size, [600, 100]);\n\n\t\tgrid.setViewVisible(view5, false);\n\n\t\tassert.deepStrictEqual(view1.size, [600, 400]);\n\t\tassert.deepStrictEqual(view2.size, [600, 200]);\n\t\tassert.deepStrictEqual(view3.size, [200, 400]);\n\t\tassert.deepStrictEqual(view4.size, [200, 200]);\n\t\tassert.deepStrictEqual(view5.size, [600, 0]);\n\n\t\tgrid.setViewVisible(view5, true);\n\n\t\tassert.deepStrictEqual(view1.size, [600, 300]);\n\t\tassert.deepStrictEqual(view2.size, [600, 200]);\n\t\tassert.deepStrictEqual(view3.size, [200, 400]);\n\t\tassert.deepStrictEqual(view4.size, [200, 200]);\n\t\tassert.deepStrictEqual(view5.size, [600, 100]);\n\n\t\tgrid.setViewVisible(view5, false);\n\n\t\tassert.deepStrictEqual(view1.size, [600, 400]);\n\t\tassert.deepStrictEqual(view2.size, [600, 200]);\n\t\tassert.deepStrictEqual(view3.size, [200, 400]);\n\t\tassert.deepStrictEqual(view4.size, [200, 200]);\n\t\tassert.deepStrictEqual(view5.size, [600, 0]);\n\n\t\tgrid.setViewVisible(view5, false);\n\n\t\tconst json = grid.serialize();\n\t\tassert.deepStrictEqual(json, {\n\t\t\torientation: 0,\n\t\t\twidth: 800,\n\t\t\theight: 600,\n\t\t\troot: {\n\t\t\t\ttype: 'branch',\n\t\t\t\tdata: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'branch',\n\t\t\t\t\t\tdata: [\n\t\t\t\t\t\t\t{ type: 'leaf', data: { name: 'view4' }, size: 200 },\n\t\t\t\t\t\t\t{ type: 'leaf', data: { name: 'view2' }, size: 600 }\n\t\t\t\t\t\t],\n\t\t\t\t\t\tsize: 200\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'branch',\n\t\t\t\t\t\tdata: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'branch',\n\t\t\t\t\t\t\t\tdata: [\n\t\t\t\t\t\t\t\t\t{ type: 'leaf', data: { name: 'view1' }, size: 400 },\n\t\t\t\t\t\t\t\t\t{ type: 'leaf', data: { name: 'view5' }, size: 100, visible: false }\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tsize: 600\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{ type: 'leaf', data: { name: 'view3' }, size: 200 }\n\t\t\t\t\t\t],\n\t\t\t\t\t\tsize: 400\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tsize: 800\n\t\t\t}\n\t\t});\n\n\t\tgrid.dispose();\n\n\t\tconst deserializer = new TestViewDeserializer();\n\t\tconst grid2 = SerializableGrid.deserialize(json, deserializer);\n\n\t\tconst view1Copy = deserializer.getView('view1');\n\t\tconst view2Copy = deserializer.getView('view2');\n\t\tconst view3Copy = deserializer.getView('view3');\n\t\tconst view4Copy = deserializer.getView('view4');\n\t\tconst view5Copy = deserializer.getView('view5');\n\n\t\tassert.deepStrictEqual(nodesToArrays(grid2.getViews()), [[view4Copy, view2Copy], [[view1Copy, view5Copy], view3Copy]]);\n\n\t\tgrid2.layout(800, 600);\n\t\tassert.deepStrictEqual(view1Copy.size, [600, 400]);\n\t\tassert.deepStrictEqual(view2Copy.size, [600, 200]);\n\t\tassert.deepStrictEqual(view3Copy.size, [200, 400]);\n\t\tassert.deepStrictEqual(view4Copy.size, [200, 200]);\n\t\tassert.deepStrictEqual(view5Copy.size, [600, 0]);\n\n\t\tassert.deepStrictEqual(grid2.isViewVisible(view1Copy), true);\n\t\tassert.deepStrictEqual(grid2.isViewVisible(view2Copy), true);\n\t\tassert.deepStrictEqual(grid2.isViewVisible(view3Copy), true);\n\t\tassert.deepStrictEqual(grid2.isViewVisible(view4Copy), true);\n\t\tassert.deepStrictEqual(grid2.isViewVisible(view5Copy), false);\n\n\t\tgrid2.setViewVisible(view5Copy, true);\n\n\t\tassert.deepStrictEqual(view1Copy.size, [600, 300]);\n\t\tassert.deepStrictEqual(view2Copy.size, [600, 200]);\n\t\tassert.deepStrictEqual(view3Copy.size, [200, 400]);\n\t\tassert.deepStrictEqual(view4Copy.size, [200, 200]);\n\t\tassert.deepStrictEqual(view5Copy.size, [600, 100]);\n\n\t\tassert.deepStrictEqual(grid2.isViewVisible(view1Copy), true);\n\t\tassert.deepStrictEqual(grid2.isViewVisible(view2Copy), true);\n\t\tassert.deepStrictEqual(grid2.isViewVisible(view3Copy), true);\n\t\tassert.deepStrictEqual(grid2.isViewVisible(view4Copy), true);\n\t\tassert.deepStrictEqual(grid2.isViewVisible(view5Copy), true);\n\t});\n\n\ttest('serialize should store visibility and previous size even for first leaf', function () {\n\t\tconst view1 = new TestSerializableView('view1', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tconst grid = new SerializableGrid(view1);\n\t\tcontainer.appendChild(grid.element);\n\t\tgrid.layout(800, 600);\n\n\t\tconst view2 = new TestSerializableView('view2', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view2, 200, view1, Direction.Up);\n\n\t\tconst view3 = new TestSerializableView('view3', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view3, 200, view1, Direction.Right);\n\n\t\tconst view4 = new TestSerializableView('view4', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view4, 200, view2, Direction.Left);\n\n\t\tconst view5 = new TestSerializableView('view5', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE);\n\t\tgrid.addView(view5, 100, view1, Direction.Down);\n\n\t\tassert.deepStrictEqual(view1.size, [600, 300]);\n\t\tassert.deepStrictEqual(view2.size, [600, 200]);\n\t\tassert.deepStrictEqual(view3.size, [200, 400]);\n\t\tassert.deepStrictEqual(view4.size, [200, 200]);\n\t\tassert.deepStrictEqual(view5.size, [600, 100]);\n\n\t\tgrid.setViewVisible(view4, false);\n\n\t\tassert.deepStrictEqual(view1.size, [600, 300]);\n\t\tassert.deepStrictEqual(view2.size, [800, 200]);\n\t\tassert.deepStrictEqual(view3.size, [200, 400]);\n\t\tassert.deepStrictEqual(view4.size, [0, 200]);\n\t\tassert.deepStrictEqual(view5.size, [600, 100]);\n\n\t\tconst json = grid.serialize();\n\t\tassert.deepStrictEqual(json, {\n\t\t\torientation: 0,\n\t\t\twidth: 800,\n\t\t\theight: 600,\n\t\t\troot: {\n\t\t\t\ttype: 'branch',\n\t\t\t\tdata: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'branch',\n\t\t\t\t\t\tdata: [\n\t\t\t\t\t\t\t{ type: 'leaf', data: { name: 'view4' }, size: 200, visible: false },\n\t\t\t\t\t\t\t{ type: 'leaf', data: { name: 'view2' }, size: 800 }\n\t\t\t\t\t\t],\n\t\t\t\t\t\tsize: 200\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'branch',\n\t\t\t\t\t\tdata: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'branch',\n\t\t\t\t\t\t\t\tdata: [\n\t\t\t\t\t\t\t\t\t{ type: 'leaf', data: { name: 'view1' }, size: 300 },\n\t\t\t\t\t\t\t\t\t{ type: 'leaf', data: { name: 'view5' }, size: 100 }\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tsize: 600\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{ type: 'leaf', data: { name: 'view3' }, size: 200 }\n\t\t\t\t\t\t],\n\t\t\t\t\t\tsize: 400\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tsize: 800\n\t\t\t}\n\t\t});\n\n\t\tgrid.dispose();\n\n\t\tconst deserializer = new TestViewDeserializer();\n\t\tconst grid2 = SerializableGrid.deserialize(json, deserializer);\n\n\t\tconst view1Copy = deserializer.getView('view1');\n\t\tconst view2Copy = deserializer.getView('view2');\n\t\tconst view3Copy = deserializer.getView('view3');\n\t\tconst view4Copy = deserializer.getView('view4');\n\t\tconst view5Copy = deserializer.getView('view5');\n\n\t\tassert.deepStrictEqual(nodesToArrays(grid2.getViews()), [[view4Copy, view2Copy], [[view1Copy, view5Copy], view3Copy]]);\n\n\t\tgrid2.layout(800, 600);\n\t\tassert.deepStrictEqual(view1Copy.size, [600, 300]);\n\t\tassert.deepStrictEqual(view2Copy.size, [800, 200]);\n\t\tassert.deepStrictEqual(view3Copy.size, [200, 400]);\n\t\tassert.deepStrictEqual(view4Copy.size, [0, 200]);\n\t\tassert.deepStrictEqual(view5Copy.size, [600, 100]);\n\n\t\tassert.deepStrictEqual(grid2.isViewVisible(view1Copy), true);\n\t\tassert.deepStrictEqual(grid2.isViewVisible(view2Copy), true);\n\t\tassert.deepStrictEqual(grid2.isViewVisible(view3Copy), true);\n\t\tassert.deepStrictEqual(grid2.isViewVisible(view4Copy), false);\n\t\tassert.deepStrictEqual(grid2.isViewVisible(view5Copy), true);\n\n\t\tgrid2.setViewVisible(view4Copy, true);\n\n\t\tassert.deepStrictEqual(view1Copy.size, [600, 300]);\n\t\tassert.deepStrictEqual(view2Copy.size, [600, 200]);\n\t\tassert.deepStrictEqual(view3Copy.size, [200, 400]);\n\t\tassert.deepStrictEqual(view4Copy.size, [200, 200]);\n\t\tassert.deepStrictEqual(view5Copy.size, [600, 100]);\n\n\t\tassert.deepStrictEqual(grid2.isViewVisible(view1Copy), true);\n\t\tassert.deepStrictEqual(grid2.isViewVisible(view2Copy), true);\n\t\tassert.deepStrictEqual(grid2.isViewVisible(view3Copy), true);\n\t\tassert.deepStrictEqual(grid2.isViewVisible(view4Copy), true);\n\t\tassert.deepStrictEqual(grid2.isViewVisible(view5Copy), true);\n\t});\n});\n"]}