{"version":3,"file":"indexTreeModel.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/test/browser/ui/tree/indexTreeModel.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAMhG,SAAS,MAAM,CAAI,GAAQ;QAC1B,OAAO;YACN,MAAM,CAAC,KAAa,EAAE,WAAmB,EAAE,QAAa;gBACvD,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,WAAW,EAAE,GAAG,QAAQ,CAAC,CAAC;YAC7C,CAAC;YACD,mBAAmB,KAAK,CAAC;SACzB,CAAC;IACH,CAAC;IAED,SAAS,OAAO,CAAI,IAAoB;QACvC,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;IACjC,CAAC;IAGD,SAAS,UAAU,CAAI,IAAkB;;QACxC,OAAO,CAAA,MAAA,IAAI,CAAC,QAAQ,0CAAE,MAAM,EAAC,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;IAC5G,CAAC;IAED,MAAM,oBAAoB,GAAG,EAAE,KAAK,EAAE,CAAC,CAAS,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC;IAEjE;;;OAGG;IACH,SAAS,eAAe,CAAC,EAAgE;QACxF,EAAE,CAAC,EAAE,CAAC,CAAC;QACP,EAAE,CAAC,EAAE,oBAAoB,EAAE,CAAC,CAAC;IAC9B,CAAC;IAED,KAAK,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAE5B,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE;YACjB,MAAM,IAAI,GAAwB,EAAE,CAAC;YACrC,MAAM,KAAK,GAAG,IAAI,+BAAc,CAAS,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACnE,MAAM,CAAC,KAAK,CAAC,CAAC;YACd,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,EAAE,GAAG,EAAE,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE;YAC9C,MAAM,IAAI,GAAwB,EAAE,CAAC;YACrC,MAAM,KAAK,GAAG,IAAI,+BAAc,CAAS,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAEnE,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE;gBACpB,EAAE,OAAO,EAAE,CAAC,EAAE;gBACd,EAAE,OAAO,EAAE,CAAC,EAAE;gBACd,EAAE,OAAO,EAAE,CAAC,EAAE;aACd,EAAE,OAAO,CAAC,CAAC;YAEZ,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACvC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YAC3C,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YACzC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YAC3C,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YACzC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YAC3C,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC,CAAC;QAEJ,IAAI,CAAC,aAAa,EAAE,GAAG,EAAE,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE;YACnD,MAAM,IAAI,GAAwB,EAAE,CAAC;YACrC,MAAM,KAAK,GAAG,IAAI,+BAAc,CAAS,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAEnE,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE;gBACpB;oBACC,OAAO,EAAE,CAAC,EAAE,QAAQ,EAAE;wBACrB,EAAE,OAAO,EAAE,EAAE,EAAE;wBACf,EAAE,OAAO,EAAE,EAAE,EAAE;wBACf,EAAE,OAAO,EAAE,EAAE,EAAE;qBACf;iBACD;gBACD,EAAE,OAAO,EAAE,CAAC,EAAE;gBACd,EAAE,OAAO,EAAE,CAAC,EAAE;aACd,CAAC,CAAC;YAEH,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACvC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YAC3C,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YACzC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAC5C,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YACzC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAC5C,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YACzC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAC5C,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YACzC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YAC3C,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YACzC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YAC3C,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC,CAAC;QAEJ,IAAI,CAAC,uBAAuB,EAAE,GAAG,EAAE,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE;YAC7D,MAAM,IAAI,GAAwB,EAAE,CAAC;YACrC,MAAM,KAAK,GAAG,IAAI,+BAAc,CAAS,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAEnE,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE;gBACpB;oBACC,OAAO,EAAE,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,QAAQ,EAAE;wBACtC,EAAE,OAAO,EAAE,EAAE,EAAE;wBACf,EAAE,OAAO,EAAE,EAAE,EAAE;wBACf,EAAE,OAAO,EAAE,EAAE,EAAE;qBACf;iBACD;gBACD,EAAE,OAAO,EAAE,CAAC,EAAE;gBACd,EAAE,OAAO,EAAE,CAAC,EAAE;aACd,EAAE,OAAO,CAAC,CAAC;YAEZ,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACvC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YAC3C,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;YAChD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YACzC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YAC3C,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YACzC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YAC3C,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC,CAAC;QAEJ,IAAI,CAAC,QAAQ,EAAE,GAAG,EAAE,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE;YAC9C,MAAM,IAAI,GAAwB,EAAE,CAAC;YACrC,MAAM,KAAK,GAAG,IAAI,+BAAc,CAAS,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAEnE,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE;gBACpB,EAAE,OAAO,EAAE,CAAC,EAAE;gBACd,EAAE,OAAO,EAAE,CAAC,EAAE;gBACd,EAAE,OAAO,EAAE,CAAC,EAAE;aACd,EAAE,OAAO,CAAC,CAAC;YAEZ,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAEvC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;YACzC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACvC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YAC3C,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YACzC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YAC3C,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YAEzC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;YACzC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC,CAAC;QAEJ,IAAI,CAAC,eAAe,EAAE,GAAG,EAAE,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE;YACrD,MAAM,IAAI,GAAwB,EAAE,CAAC;YACrC,MAAM,KAAK,GAAG,IAAI,+BAAc,CAAS,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAEnE,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE;gBACpB;oBACC,OAAO,EAAE,CAAC,EAAE,QAAQ,EAAE;wBACrB,EAAE,OAAO,EAAE,EAAE,EAAE;wBACf,EAAE,OAAO,EAAE,EAAE,EAAE;wBACf,EAAE,OAAO,EAAE,EAAE,EAAE;qBACf;iBACD;gBACD,EAAE,OAAO,EAAE,CAAC,EAAE;gBACd,EAAE,OAAO,EAAE,CAAC,EAAE;aACd,EAAE,OAAO,CAAC,CAAC;YAEZ,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAEvC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;YACzC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACvC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YAC3C,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YACzC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAC5C,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YACzC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAC5C,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YACzC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAC5C,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC,CAAC;QAEJ,IAAI,CAAC,aAAa,EAAE,GAAG,EAAE,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE;YACnD,MAAM,IAAI,GAAwB,EAAE,CAAC;YACrC,MAAM,KAAK,GAAG,IAAI,+BAAc,CAAS,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAEnE,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE;gBACpB;oBACC,OAAO,EAAE,CAAC,EAAE,QAAQ,EAAE;wBACrB,EAAE,OAAO,EAAE,EAAE,EAAE;wBACf,EAAE,OAAO,EAAE,EAAE,EAAE;wBACf,EAAE,OAAO,EAAE,EAAE,EAAE;qBACf;iBACD;gBACD,EAAE,OAAO,EAAE,CAAC,EAAE;gBACd,EAAE,OAAO,EAAE,CAAC,EAAE;aACd,EAAE,OAAO,CAAC,CAAC;YAEZ,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAEvC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;YACzC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACvC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YAC3C,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YACzC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YAC3C,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC,CAAC;QAEJ,IAAI,CAAC,mBAAmB,EAAE,GAAG,EAAE;YAC9B,MAAM,IAAI,GAAwB,EAAE,CAAC;YACrC,MAAM,KAAK,GAAG,IAAI,+BAAc,CAAS,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAEnE,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE;gBACpB,EAAE,OAAO,EAAE,CAAC,EAAE;gBACd,EAAE,OAAO,EAAE,CAAC,EAAE;gBACd,EAAE,OAAO,EAAE,CAAC,EAAE;gBACd,EAAE,OAAO,EAAE,CAAC,EAAE;aACd,EAAE,EAAE,oBAAoB,EAAE,CAAC,CAAC;YAE7B,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;gBACvE,CAAC;gBACD,CAAC;gBACD,CAAC;gBACD,CAAC;aACD,CAAC,CAAC;YAEH,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE;gBACpB,EAAE,OAAO,EAAE,CAAC,GAAG,EAAE;gBACjB,EAAE,OAAO,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC,EAAE;gBAC5C,EAAE,OAAO,EAAE,CAAC,EAAE;gBACd,EAAE,OAAO,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,OAAO,EAAE,GAAG,EAAE,EAAE,EAAE,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE;aAC7F,EAAE,EAAE,oBAAoB,EAAE,SAAS,EAAE,QAAQ,EAAE,CAAC,CAAC;YAElD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;gBACvE,CAAC,GAAG;gBACJ,EAAE,CAAC,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,GAAG,CAAC,EAAE;gBACzB,CAAC;gBACD,EAAE,CAAC,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,QAAQ,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE;gBACvD,CAAC;aACD,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,eAAe,EAAE,GAAG,EAAE,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE;YACrD,MAAM,IAAI,GAAwB,EAAE,CAAC;YACrC,MAAM,KAAK,GAAG,IAAI,+BAAc,CAAS,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAEnE,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE;gBACpB;oBACC,OAAO,EAAE,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,QAAQ,EAAE;wBACtC,EAAE,OAAO,EAAE,EAAE,EAAE;wBACf,EAAE,OAAO,EAAE,EAAE,EAAE;wBACf,EAAE,OAAO,EAAE,EAAE,EAAE;qBACf;iBACD;gBACD,EAAE,OAAO,EAAE,CAAC,EAAE;gBACd,EAAE,OAAO,EAAE,CAAC,EAAE;aACd,EAAE,OAAO,CAAC,CAAC;YAEZ,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAEvC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;YAC5C,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAEvC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;YAC5C,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC,CAAC;QAEJ,IAAI,CAAC,UAAU,EAAE,GAAG,EAAE,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE;YAChD,MAAM,IAAI,GAAwB,EAAE,CAAC;YACrC,MAAM,KAAK,GAAG,IAAI,+BAAc,CAAS,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAEnE,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE;gBACpB;oBACC,OAAO,EAAE,CAAC,EAAE,QAAQ,EAAE;wBACrB,EAAE,OAAO,EAAE,EAAE,EAAE;wBACf,EAAE,OAAO,EAAE,EAAE,EAAE;wBACf,EAAE,OAAO,EAAE,EAAE,EAAE;qBACf;iBACD;gBACD,EAAE,OAAO,EAAE,CAAC,EAAE;gBACd,EAAE,OAAO,EAAE,CAAC,EAAE;aACd,EAAE,OAAO,CAAC,CAAC;YAEZ,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAEvC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YAC9B,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACvC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YAC3C,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;YAChD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YACzC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YAC3C,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YACzC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YAC3C,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC,CAAC;QAEJ,IAAI,CAAC,qBAAqB,EAAE,GAAG,EAAE,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE;YAC3D,MAAM,IAAI,GAAwB,EAAE,CAAC;YACrC,MAAM,KAAK,GAAG,IAAI,+BAAc,CAAS,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAEnE,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE;gBACpB;oBACC,OAAO,EAAE,CAAC,EAAE,QAAQ,EAAE;wBACrB,EAAE,OAAO,EAAE,CAAC,EAAE;qBACd;iBACD;aACD,EAAE,OAAO,CAAC,CAAC;YAEZ,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;YAC9C,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;YAE/C,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC;YACrC;gBACC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,GAAG,IAAI,CAAC;gBAC7B,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;gBAC7C,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;aACtC;YAED,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC;YACnD;gBACC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,GAAG,IAAI,CAAC;gBAC7B,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;gBAC5C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;aAC9C;QACF,CAAC,CAAC,CAAC,CAAC;QAEJ,IAAI,CAAC,QAAQ,EAAE,GAAG,EAAE,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE;YAC9C,MAAM,IAAI,GAAwB,EAAE,CAAC;YACrC,MAAM,KAAK,GAAG,IAAI,+BAAc,CAAS,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAEnE,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE;gBACpB;oBACC,OAAO,EAAE,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,QAAQ,EAAE;wBACtC,EAAE,OAAO,EAAE,EAAE,EAAE;wBACf,EAAE,OAAO,EAAE,EAAE,EAAE;wBACf,EAAE,OAAO,EAAE,EAAE,EAAE;qBACf;iBACD;gBACD,EAAE,OAAO,EAAE,CAAC,EAAE;gBACd,EAAE,OAAO,EAAE,CAAC,EAAE;aACd,EAAE,OAAO,CAAC,CAAC;YAEZ,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAEvC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;YAC/B,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACvC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YAC3C,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YACzC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAC5C,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YACzC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAC5C,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YACzC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAC5C,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YACzC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YAC3C,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YACzC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YAC3C,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC,CAAC;QAEJ,IAAI,CAAC,wBAAwB,EAAE,GAAG,EAAE;YACnC,MAAM,KAAK,GAAG,GAAG,CAAC;YAClB,MAAM,QAAQ,GAAG,CAAC,CAAC;YACnB,MAAM,QAAQ,GAAG,EAAE,CAAC;YACpB,MAAM,UAAU,GAAG,CAAC,CAAC;YAErB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE;gBAC/B,MAAM,IAAI,GAAwB,EAAE,CAAC;gBACrC,MAAM,OAAO,GAAG,EAAE,oBAAoB,EAAE,EAAE,KAAK,EAAE,CAAC,CAAS,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;gBAC9E,MAAM,KAAK,GAAG,IAAI,+BAAc,CAAS,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBAEnE,MAAM,OAAO,GAAG,EAAE,CAAC;gBACnB,MAAM,QAAQ,GAAa,EAAE,CAAC;gBAC9B,IAAI,cAAc,GAAG,CAAC,CAAC;gBAEvB,KAAK,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,QAAQ,GAAG,QAAQ,CAAC,GAAG,QAAQ,EAAE,KAAK,GAAG,CAAC,EAAE,KAAK,EAAE,EAAE;oBACtF,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;oBAC5D,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,IAAI,CAAC,MAAM,GAAG,WAAW,CAAC,CAAC,CAAC;oBAC3E,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,UAAU,GAAG,CAAC,CAAC,CAAC;oBAE/D,IAAI,OAAO,GAA2B,EAAE,CAAC;oBACzC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE;wBACrC,MAAM,OAAO,GAAG,cAAc,EAAE,CAAC;wBACjC,OAAO,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,CAAC;qBACxC;oBAED,sBAAsB;oBACtB,IAAI,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,EAAE;wBACxB,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC;wBACpF,OAAO,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;qBAC5E;oBAED,KAAK,CAAC,MAAM,CAAC,CAAC,WAAW,CAAC,EAAE,WAAW,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;oBAC3D,QAAQ,CAAC,MAAM,CAAC,WAAW,EAAE,WAAW,EAAE,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;oBAE1E,MAAM,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;oBAC9C,OAAO,CAAC,IAAI,CAAC,UAAU,WAAW,KAAK,WAAW,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;oBAElI,MAAM,CAAC,eAAe,CAAC,QAAQ,EAAE,YAAY,EAAE,YAAY,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;iBACvJ;aACD;QACF,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,kDAAkD,EAAE,GAAG,EAAE;YAC7D,MAAM,IAAI,GAAwB,EAAE,CAAC;YACrC,MAAM,KAAK,GAAG,IAAI,+BAAc,CAAS,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAEnE,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE;gBACpB;oBACC,OAAO,EAAE,CAAC,EAAE,QAAQ,EAAE;wBACrB;4BACC,OAAO,EAAE,EAAE,EAAE,QAAQ,EAAE;gCACtB,EAAE,OAAO,EAAE,GAAG,EAAE;6BAChB;yBACD;qBACD;iBACD;gBACD;oBACC,OAAO,EAAE,CAAC,EAAE,QAAQ,EAAE;wBACrB,EAAE,OAAO,EAAE,EAAE,EAAE;qBACf;iBACD;aACD,CAAC,CAAC;YAEH,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACvC,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;YAE3D,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YACjC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACvC,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;YAEtD,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YAC9B,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACvC,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,gBAAgB,EAAE,GAAG,EAAE;YAC3B,MAAM,IAAI,GAAwB,EAAE,CAAC;YACrC,MAAM,KAAK,GAAG,IAAI,+BAAc,CAAS,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAEnE,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE;gBACpB;oBACC,OAAO,EAAE,CAAC,EAAE,QAAQ,EAAE;wBACrB,EAAE,OAAO,EAAE,EAAE,EAAE;qBACf;iBACD;aACD,CAAC,CAAC;YAEH,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAEvC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;YACjC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACvC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YAC3C,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;YACnD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAC5C,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;YACnD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YAEjD,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,KAAK,CAAC,CAAC;YAC7D,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YAC3C,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;YACnD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAC5C,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;YACnD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YAEjD,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC;YAC9D,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YAC3C,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;YACnD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAC5C,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;YACnD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YAEjD,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YAChC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACvC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YAC3C,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;YAClD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAC5C,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;YACnD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YAEjD,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;YAC5D,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACvC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YAC3C,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;YAClD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;YAEhD,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,EAAE,IAAI,CAAC,CAAC;YAC7D,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YAC3C,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;YAClD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAC5C,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;YACnD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,eAAe,EAAE,GAAG,EAAE;YAC1B,MAAM,IAAI,GAAwB,EAAE,CAAC;YACrC,MAAM,MAAM,GAAG,IAAI;gBAClB,MAAM,CAAC,OAAe;oBACrB,OAAO,OAAO,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,iBAAwB,CAAC,eAAsB,CAAC;gBAC3E,CAAC;aACD,CAAC;YAEF,MAAM,KAAK,GAAG,IAAI,+BAAc,CAAS,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC;YAE/E,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE;gBACpB;oBACC,OAAO,EAAE,CAAC,EAAE,QAAQ,EAAE;wBACrB,EAAE,OAAO,EAAE,CAAC,EAAE;wBACd,EAAE,OAAO,EAAE,CAAC,EAAE;wBACd,EAAE,OAAO,EAAE,CAAC,EAAE;wBACd,EAAE,OAAO,EAAE,CAAC,EAAE;wBACd,EAAE,OAAO,EAAE,CAAC,EAAE;wBACd,EAAE,OAAO,EAAE,CAAC,EAAE;wBACd,EAAE,OAAO,EAAE,CAAC,EAAE;qBACd;iBACD;aACD,CAAC,CAAC;YAEH,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACvC,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAEpD,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YAC9B,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAE3C,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;YAC/B,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,mCAAmC,EAAE,GAAG,EAAE;YAC9C,MAAM,IAAI,GAAwB,EAAE,CAAC;YACrC,MAAM,MAAM,GAAG,IAAI;gBAClB,MAAM,CAAC,OAAe;oBACrB,OAAO,OAAO,KAAK,CAAC,CAAC,CAAC,iBAAwB,CAAC,eAAsB,CAAC;gBACvE,CAAC;aACD,CAAC;YAEF,MAAM,KAAK,GAAG,IAAI,+BAAc,CAAS,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC;YAE/E,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE;gBACpB;oBACC,OAAO,EAAE,CAAC,EAAE,QAAQ,EAAE;wBACrB,EAAE,OAAO,EAAE,CAAC,EAAE;wBACd,EAAE,OAAO,EAAE,CAAC,EAAE;qBACd;iBACD;aACD,CAAC,CAAC;YAEH,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,UAAU,EAAE,GAAG,EAAE;YACrB,MAAM,IAAI,GAAwB,EAAE,CAAC;YACrC,IAAI,YAAY,GAAG,KAAK,CAAC;YACzB,MAAM,MAAM,GAAG,IAAI;gBAClB,MAAM,CAAC,OAAe;oBACrB,OAAO,CAAC,CAAC,YAAY,IAAI,OAAO,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,iBAAwB,CAAC,eAAsB,CAAC;gBAC9F,CAAC;aACD,CAAC;YAEF,MAAM,KAAK,GAAG,IAAI,+BAAc,CAAS,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC;YAE/E,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE;gBACpB;oBACC,OAAO,EAAE,CAAC,EAAE,QAAQ,EAAE;wBACrB,EAAE,OAAO,EAAE,CAAC,EAAE;wBACd,EAAE,OAAO,EAAE,CAAC,EAAE;wBACd,EAAE,OAAO,EAAE,CAAC,EAAE;wBACd,EAAE,OAAO,EAAE,CAAC,EAAE;wBACd,EAAE,OAAO,EAAE,CAAC,EAAE;wBACd,EAAE,OAAO,EAAE,CAAC,EAAE;wBACd,EAAE,OAAO,EAAE,CAAC,EAAE;qBACd;iBACD;aACD,CAAC,CAAC;YAEH,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAEhE,KAAK,CAAC,QAAQ,EAAE,CAAC;YACjB,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAEhE,YAAY,GAAG,IAAI,CAAC;YACpB,KAAK,CAAC,QAAQ,EAAE,CAAC;YACjB,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAEpD,YAAY,GAAG,KAAK,CAAC;YACrB,KAAK,CAAC,QAAQ,EAAE,CAAC;YACjB,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,kBAAkB,EAAE,GAAG,EAAE;YAC7B,MAAM,IAAI,GAAwB,EAAE,CAAC;YACrC,IAAI,KAAK,GAAG,IAAI,MAAM,CAAC,EAAE,CAAC,CAAC;YAC3B,MAAM,MAAM,GAAG,IAAI;gBAClB,MAAM,CAAC,OAAe;oBACrB,OAAO,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,iBAAwB,CAAC,gBAAuB,CAAC;gBAC9E,CAAC;aACD,CAAC;YAEF,MAAM,KAAK,GAAG,IAAI,+BAAc,CAAS,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC;YAEnF,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE;gBACpB;oBACC,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE;wBAC5B,EAAE,OAAO,EAAE,QAAQ,EAAE;wBACrB,EAAE,OAAO,EAAE,KAAK,EAAE;wBAClB;4BACC,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE;gCAC5B,EAAE,OAAO,EAAE,cAAc,EAAE;gCAC3B,EAAE,OAAO,EAAE,SAAS,EAAE;gCACtB,EAAE,OAAO,EAAE,UAAU,EAAE;6BACvB;yBACD;wBACD;4BACC,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE;gCAC3B,EAAE,OAAO,EAAE,KAAK,EAAE;gCAClB,EAAE,OAAO,EAAE,aAAa,EAAE;6BAC1B;yBACD;qBACD;iBACD;aACD,CAAC,CAAC;YAEH,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;YAExC,KAAK,GAAG,OAAO,CAAC;YAChB,KAAK,CAAC,QAAQ,EAAE,CAAC;YACjB,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC;YAE3F,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YAC9B,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;YAElD,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;YAC/B,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC;QAC5F,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,gCAAgC,EAAE,GAAG,EAAE;YAC3C,MAAM,IAAI,GAAwB,EAAE,CAAC;YACrC,IAAI,KAAK,GAAG,IAAI,MAAM,CAAC,EAAE,CAAC,CAAC;YAC3B,MAAM,MAAM,GAAG,IAAI;gBAClB,MAAM,CAAC,OAAe;oBACrB,OAAO,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,iBAAwB,CAAC,gBAAuB,CAAC;gBAC9E,CAAC;aACD,CAAC;YAEF,MAAM,KAAK,GAAG,IAAI,+BAAc,CAAS,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC;YAEnF,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE;gBACpB;oBACC,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE;wBAC5B,EAAE,OAAO,EAAE,QAAQ,EAAE;wBACrB,EAAE,OAAO,EAAE,KAAK,EAAE;wBAClB;4BACC,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE;gCAC5B,EAAE,OAAO,EAAE,cAAc,EAAE;gCAC3B,EAAE,OAAO,EAAE,SAAS,EAAE;gCACtB,EAAE,OAAO,EAAE,UAAU,EAAE;6BACvB;yBACD;wBACD;4BACC,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE;gCAC3B,EAAE,OAAO,EAAE,KAAK,EAAE;gCAClB,EAAE,OAAO,EAAE,aAAa,EAAE;6BAC1B;yBACD;qBACD;iBACD;aACD,CAAC,CAAC;YAEH,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;YAExC,KAAK,GAAG,MAAM,CAAC;YACf,KAAK,CAAC,QAAQ,EAAE,CAAC;YACjB,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,aAAa,CAAC,CAAC,CAAC;YAE1E,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YACjC,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC;YAE3D,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YAC9B,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,kCAAkC,EAAE,GAAG,EAAE;YAC7C,MAAM,IAAI,GAAwB,EAAE,CAAC;YACrC,IAAI,KAAK,GAAG,IAAI,MAAM,CAAC,EAAE,CAAC,CAAC;YAC3B,MAAM,MAAM,GAAG,IAAI;gBAClB,MAAM,CAAC,OAAe;oBACrB,OAAO,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,iBAAwB,CAAC,gBAAuB,CAAC;gBAC9E,CAAC;aACD,CAAC;YAEF,MAAM,KAAK,GAAG,IAAI,+BAAc,CAAS,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC;YAEnF,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE;gBACpB;oBACC,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,IAAI,EAAE,QAAQ,EAAE;wBAC7C,EAAE,OAAO,EAAE,QAAQ,EAAE;wBACrB,EAAE,OAAO,EAAE,KAAK,EAAE;wBAClB;4BACC,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE;gCAC5B,EAAE,OAAO,EAAE,cAAc,EAAE;gCAC3B,EAAE,OAAO,EAAE,SAAS,EAAE;gCACtB,EAAE,OAAO,EAAE,UAAU,EAAE;6BACvB;yBACD;wBACD;4BACC,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE;gCAC3B,EAAE,OAAO,EAAE,KAAK,EAAE;gCAClB,EAAE,OAAO,EAAE,aAAa,EAAE;6BAC1B;yBACD;qBACD;iBACD;aACD,CAAC,CAAC;YAEH,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;YAElD,KAAK,GAAG,MAAM,CAAC;YACf,KAAK,CAAC,QAAQ,EAAE,CAAC;YACjB,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;YAElD,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;YAC/B,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,aAAa,CAAC,CAAC,CAAC;YAE1E,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YAC9B,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;YAElD,KAAK,GAAG,IAAI,MAAM,CAAC,EAAE,CAAC,CAAC;YACvB,KAAK,CAAC,QAAQ,EAAE,CAAC;YACjB,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;YAElD,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;YAC/B,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;QAEH,KAAK,CAAC,iBAAiB,EAAE,GAAG,EAAE;YAE7B,IAAI,CAAC,QAAQ,EAAE,GAAG,EAAE;gBACnB,MAAM,IAAI,GAA6B,EAAE,CAAC;gBAC1C,MAAM,KAAK,GAAG,IAAI,+BAAc,CAAS,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBAEnE,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE;oBACpB;wBACC,OAAO,EAAE,CAAC,EAAE,QAAQ,EAAE;4BACrB,EAAE,OAAO,EAAE,EAAE,EAAE;4BACf,EAAE,OAAO,EAAE,EAAE,EAAE;4BACf,EAAE,OAAO,EAAE,EAAE,EAAE;yBACf;qBACD;oBACD,EAAE,OAAO,EAAE,CAAC,EAAE;oBACd,EAAE,OAAO,EAAE,CAAC,EAAE;iBACd,CAAC,CAAC;gBAEH,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC5D,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBAC/D,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBAC/D,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBAC/D,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC5D,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAC7D,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,aAAa,EAAE,GAAG,EAAE;gBACxB,MAAM,IAAI,GAA6B,EAAE,CAAC;gBAC1C,MAAM,MAAM,GAAG,IAAI;oBAClB,MAAM,CAAC,OAAe;wBACrB,OAAO,OAAO,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,iBAAwB,CAAC,eAAsB,CAAC;oBAC3E,CAAC;iBACD,CAAC;gBAEF,MAAM,KAAK,GAAG,IAAI,+BAAc,CAAS,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC;gBAE/E,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE;oBACpB;wBACC,OAAO,EAAE,CAAC,EAAE,QAAQ,EAAE;4BACrB,EAAE,OAAO,EAAE,CAAC,EAAE;4BACd,EAAE,OAAO,EAAE,CAAC,EAAE;4BACd,EAAE,OAAO,EAAE,CAAC,EAAE;4BACd,EAAE,OAAO,EAAE,CAAC,EAAE;4BACd,EAAE,OAAO,EAAE,CAAC,EAAE;4BACd,EAAE,OAAO,EAAE,CAAC,EAAE;4BACd,EAAE,OAAO,EAAE,CAAC,EAAE;yBACd;qBACD;iBACD,CAAC,CAAC;gBAEH,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC5D,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBAC/D,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBAC/D,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAChE,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,kCAAkC,EAAE,GAAG,EAAE;YAC7C,MAAM,IAAI,GAAwB,EAAE,CAAC;YACrC,IAAI,KAAK,GAAG,IAAI,MAAM,CAAC,EAAE,CAAC,CAAC;YAC3B,MAAM,MAAM,GAAG,IAAI;gBAClB,MAAM,CAAC,OAAe;oBACrB,OAAO,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBAC5B,CAAC;aACD,CAAC;YAEF,MAAM,KAAK,GAAG,IAAI,+BAAc,CAAS,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC;YAEnF,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE;gBACpB,EAAE,OAAO,EAAE,QAAQ,EAAE;gBACrB,EAAE,OAAO,EAAE,MAAM,EAAE;gBACnB,EAAE,OAAO,EAAE,UAAU,EAAE;aACvB,CAAC,CAAC;YAEH,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,MAAM,EAAE,UAAU,CAAC,CAAC,CAAC;YAEtE,KAAK,GAAG,UAAU,CAAC;YACnB,KAAK,CAAC,QAAQ,EAAE,CAAC;YACjB,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;YAEpD,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,iBAAiB,EAAE;gBAC3C,EAAE,OAAO,EAAE,QAAQ,EAAE;gBACrB,EAAE,OAAO,EAAE,MAAM,EAAE;gBACnB,EAAE,OAAO,EAAE,UAAU,EAAE;aACvB,CAAC,CAAC;YACH,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;YAEpD,KAAK,CAAC,QAAQ,EAAE,CAAC;YACjB,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,sEAAsE,EAAE,GAAG,EAAE;YACjF,MAAM,IAAI,GAAwB,EAAE,CAAC;YACrC,IAAI,KAAK,GAAG,IAAI,MAAM,CAAC,EAAE,CAAC,CAAC;YAC3B,MAAM,MAAM,GAAG,IAAI;gBAClB,MAAM,CAAC,OAAe;oBACrB,OAAO,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBAC5B,CAAC;aACD,CAAC;YAEF,MAAM,KAAK,GAAG,IAAI,+BAAc,CAAS,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC;YAEnF,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE;gBACpB,EAAE,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,EAAE;gBAC/C,EAAE,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,EAAE;aAC/C,CAAC,CAAC;YAEH,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;YAC9D,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACnD,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACtD,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACnD,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAEtD,KAAK,GAAG,GAAG,CAAC;YACZ,KAAK,CAAC,QAAQ,EAAE,CAAC;YACjB,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;YACnD,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACpD,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACvD,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACnD,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { ITreeNode, ITreeFilter, TreeVisibility, ITreeElement } from 'vs/base/browser/ui/tree/tree';\nimport { IndexTreeModel, IIndexTreeNode, IList, IIndexTreeModelSpliceOptions } from 'vs/base/browser/ui/tree/indexTreeModel';\n\nfunction toList<T>(arr: T[]): IList<T> {\n\treturn {\n\t\tsplice(start: number, deleteCount: number, elements: T[]): void {\n\t\t\tarr.splice(start, deleteCount, ...elements);\n\t\t},\n\t\tupdateElementHeight() { }\n\t};\n}\n\nfunction toArray<T>(list: ITreeNode<T>[]): T[] {\n\treturn list.map(i => i.element);\n}\n\n\nfunction toElements<T>(node: ITreeNode<T>): any {\n\treturn node.children?.length ? { e: node.element, children: node.children.map(toElements) } : node.element;\n}\n\nconst diffIdentityProvider = { getId: (n: number) => String(n) };\n\n/**\n * Calls that test function twice, once with an empty options and\n * once with `diffIdentityProvider`.\n */\nfunction withSmartSplice(fn: (options: IIndexTreeModelSpliceOptions<number, any>) => void) {\n\tfn({});\n\tfn({ diffIdentityProvider });\n}\n\nsuite('IndexTreeModel', () => {\n\n\ttest('ctor', () => {\n\t\tconst list: ITreeNode<number>[] = [];\n\t\tconst model = new IndexTreeModel<number>('test', toList(list), -1);\n\t\tassert(model);\n\t\tassert.strictEqual(list.length, 0);\n\t});\n\n\ttest('insert', () => withSmartSplice(options => {\n\t\tconst list: ITreeNode<number>[] = [];\n\t\tconst model = new IndexTreeModel<number>('test', toList(list), -1);\n\n\t\tmodel.splice([0], 0, [\n\t\t\t{ element: 0 },\n\t\t\t{ element: 1 },\n\t\t\t{ element: 2 }\n\t\t], options);\n\n\t\tassert.deepStrictEqual(list.length, 3);\n\t\tassert.deepStrictEqual(list[0].element, 0);\n\t\tassert.deepStrictEqual(list[0].collapsed, false);\n\t\tassert.deepStrictEqual(list[0].depth, 1);\n\t\tassert.deepStrictEqual(list[1].element, 1);\n\t\tassert.deepStrictEqual(list[1].collapsed, false);\n\t\tassert.deepStrictEqual(list[1].depth, 1);\n\t\tassert.deepStrictEqual(list[2].element, 2);\n\t\tassert.deepStrictEqual(list[2].collapsed, false);\n\t\tassert.deepStrictEqual(list[2].depth, 1);\n\t}));\n\n\ttest('deep insert', () => withSmartSplice(options => {\n\t\tconst list: ITreeNode<number>[] = [];\n\t\tconst model = new IndexTreeModel<number>('test', toList(list), -1);\n\n\t\tmodel.splice([0], 0, [\n\t\t\t{\n\t\t\t\telement: 0, children: [\n\t\t\t\t\t{ element: 10 },\n\t\t\t\t\t{ element: 11 },\n\t\t\t\t\t{ element: 12 },\n\t\t\t\t]\n\t\t\t},\n\t\t\t{ element: 1 },\n\t\t\t{ element: 2 }\n\t\t]);\n\n\t\tassert.deepStrictEqual(list.length, 6);\n\t\tassert.deepStrictEqual(list[0].element, 0);\n\t\tassert.deepStrictEqual(list[0].collapsed, false);\n\t\tassert.deepStrictEqual(list[0].depth, 1);\n\t\tassert.deepStrictEqual(list[1].element, 10);\n\t\tassert.deepStrictEqual(list[1].collapsed, false);\n\t\tassert.deepStrictEqual(list[1].depth, 2);\n\t\tassert.deepStrictEqual(list[2].element, 11);\n\t\tassert.deepStrictEqual(list[2].collapsed, false);\n\t\tassert.deepStrictEqual(list[2].depth, 2);\n\t\tassert.deepStrictEqual(list[3].element, 12);\n\t\tassert.deepStrictEqual(list[3].collapsed, false);\n\t\tassert.deepStrictEqual(list[3].depth, 2);\n\t\tassert.deepStrictEqual(list[4].element, 1);\n\t\tassert.deepStrictEqual(list[4].collapsed, false);\n\t\tassert.deepStrictEqual(list[4].depth, 1);\n\t\tassert.deepStrictEqual(list[5].element, 2);\n\t\tassert.deepStrictEqual(list[5].collapsed, false);\n\t\tassert.deepStrictEqual(list[5].depth, 1);\n\t}));\n\n\ttest('deep insert collapsed', () => withSmartSplice(options => {\n\t\tconst list: ITreeNode<number>[] = [];\n\t\tconst model = new IndexTreeModel<number>('test', toList(list), -1);\n\n\t\tmodel.splice([0], 0, [\n\t\t\t{\n\t\t\t\telement: 0, collapsed: true, children: [\n\t\t\t\t\t{ element: 10 },\n\t\t\t\t\t{ element: 11 },\n\t\t\t\t\t{ element: 12 },\n\t\t\t\t]\n\t\t\t},\n\t\t\t{ element: 1 },\n\t\t\t{ element: 2 }\n\t\t], options);\n\n\t\tassert.deepStrictEqual(list.length, 3);\n\t\tassert.deepStrictEqual(list[0].element, 0);\n\t\tassert.deepStrictEqual(list[0].collapsed, true);\n\t\tassert.deepStrictEqual(list[0].depth, 1);\n\t\tassert.deepStrictEqual(list[1].element, 1);\n\t\tassert.deepStrictEqual(list[1].collapsed, false);\n\t\tassert.deepStrictEqual(list[1].depth, 1);\n\t\tassert.deepStrictEqual(list[2].element, 2);\n\t\tassert.deepStrictEqual(list[2].collapsed, false);\n\t\tassert.deepStrictEqual(list[2].depth, 1);\n\t}));\n\n\ttest('delete', () => withSmartSplice(options => {\n\t\tconst list: ITreeNode<number>[] = [];\n\t\tconst model = new IndexTreeModel<number>('test', toList(list), -1);\n\n\t\tmodel.splice([0], 0, [\n\t\t\t{ element: 0 },\n\t\t\t{ element: 1 },\n\t\t\t{ element: 2 }\n\t\t], options);\n\n\t\tassert.deepStrictEqual(list.length, 3);\n\n\t\tmodel.splice([1], 1, undefined, options);\n\t\tassert.deepStrictEqual(list.length, 2);\n\t\tassert.deepStrictEqual(list[0].element, 0);\n\t\tassert.deepStrictEqual(list[0].collapsed, false);\n\t\tassert.deepStrictEqual(list[0].depth, 1);\n\t\tassert.deepStrictEqual(list[1].element, 2);\n\t\tassert.deepStrictEqual(list[1].collapsed, false);\n\t\tassert.deepStrictEqual(list[1].depth, 1);\n\n\t\tmodel.splice([0], 2, undefined, options);\n\t\tassert.deepStrictEqual(list.length, 0);\n\t}));\n\n\ttest('nested delete', () => withSmartSplice(options => {\n\t\tconst list: ITreeNode<number>[] = [];\n\t\tconst model = new IndexTreeModel<number>('test', toList(list), -1);\n\n\t\tmodel.splice([0], 0, [\n\t\t\t{\n\t\t\t\telement: 0, children: [\n\t\t\t\t\t{ element: 10 },\n\t\t\t\t\t{ element: 11 },\n\t\t\t\t\t{ element: 12 },\n\t\t\t\t]\n\t\t\t},\n\t\t\t{ element: 1 },\n\t\t\t{ element: 2 }\n\t\t], options);\n\n\t\tassert.deepStrictEqual(list.length, 6);\n\n\t\tmodel.splice([1], 2, undefined, options);\n\t\tassert.deepStrictEqual(list.length, 4);\n\t\tassert.deepStrictEqual(list[0].element, 0);\n\t\tassert.deepStrictEqual(list[0].collapsed, false);\n\t\tassert.deepStrictEqual(list[0].depth, 1);\n\t\tassert.deepStrictEqual(list[1].element, 10);\n\t\tassert.deepStrictEqual(list[1].collapsed, false);\n\t\tassert.deepStrictEqual(list[1].depth, 2);\n\t\tassert.deepStrictEqual(list[2].element, 11);\n\t\tassert.deepStrictEqual(list[2].collapsed, false);\n\t\tassert.deepStrictEqual(list[2].depth, 2);\n\t\tassert.deepStrictEqual(list[3].element, 12);\n\t\tassert.deepStrictEqual(list[3].collapsed, false);\n\t\tassert.deepStrictEqual(list[3].depth, 2);\n\t}));\n\n\ttest('deep delete', () => withSmartSplice(options => {\n\t\tconst list: ITreeNode<number>[] = [];\n\t\tconst model = new IndexTreeModel<number>('test', toList(list), -1);\n\n\t\tmodel.splice([0], 0, [\n\t\t\t{\n\t\t\t\telement: 0, children: [\n\t\t\t\t\t{ element: 10 },\n\t\t\t\t\t{ element: 11 },\n\t\t\t\t\t{ element: 12 },\n\t\t\t\t]\n\t\t\t},\n\t\t\t{ element: 1 },\n\t\t\t{ element: 2 }\n\t\t], options);\n\n\t\tassert.deepStrictEqual(list.length, 6);\n\n\t\tmodel.splice([0], 1, undefined, options);\n\t\tassert.deepStrictEqual(list.length, 2);\n\t\tassert.deepStrictEqual(list[0].element, 1);\n\t\tassert.deepStrictEqual(list[0].collapsed, false);\n\t\tassert.deepStrictEqual(list[0].depth, 1);\n\t\tassert.deepStrictEqual(list[1].element, 2);\n\t\tassert.deepStrictEqual(list[1].collapsed, false);\n\t\tassert.deepStrictEqual(list[1].depth, 1);\n\t}));\n\n\ttest('smart splice deep', () => {\n\t\tconst list: ITreeNode<number>[] = [];\n\t\tconst model = new IndexTreeModel<number>('test', toList(list), -1);\n\n\t\tmodel.splice([0], 0, [\n\t\t\t{ element: 0 },\n\t\t\t{ element: 1 },\n\t\t\t{ element: 2 },\n\t\t\t{ element: 3 },\n\t\t], { diffIdentityProvider });\n\n\t\tassert.deepStrictEqual(list.filter(l => l.depth === 1).map(toElements), [\n\t\t\t0,\n\t\t\t1,\n\t\t\t2,\n\t\t\t3,\n\t\t]);\n\n\t\tmodel.splice([0], 3, [\n\t\t\t{ element: -0.5 },\n\t\t\t{ element: 0, children: [{ element: 0.1 }] },\n\t\t\t{ element: 1 },\n\t\t\t{ element: 2, children: [{ element: 2.1 }, { element: 2.2, children: [{ element: 2.21 }] }] },\n\t\t], { diffIdentityProvider, diffDepth: Infinity });\n\n\t\tassert.deepStrictEqual(list.filter(l => l.depth === 1).map(toElements), [\n\t\t\t-0.5,\n\t\t\t{ e: 0, children: [0.1] },\n\t\t\t1,\n\t\t\t{ e: 2, children: [2.1, { e: 2.2, children: [2.21] }] },\n\t\t\t3,\n\t\t]);\n\t});\n\n\ttest('hidden delete', () => withSmartSplice(options => {\n\t\tconst list: ITreeNode<number>[] = [];\n\t\tconst model = new IndexTreeModel<number>('test', toList(list), -1);\n\n\t\tmodel.splice([0], 0, [\n\t\t\t{\n\t\t\t\telement: 0, collapsed: true, children: [\n\t\t\t\t\t{ element: 10 },\n\t\t\t\t\t{ element: 11 },\n\t\t\t\t\t{ element: 12 },\n\t\t\t\t]\n\t\t\t},\n\t\t\t{ element: 1 },\n\t\t\t{ element: 2 }\n\t\t], options);\n\n\t\tassert.deepStrictEqual(list.length, 3);\n\n\t\tmodel.splice([0, 1], 1, undefined, options);\n\t\tassert.deepStrictEqual(list.length, 3);\n\n\t\tmodel.splice([0, 0], 2, undefined, options);\n\t\tassert.deepStrictEqual(list.length, 3);\n\t}));\n\n\ttest('collapse', () => withSmartSplice(options => {\n\t\tconst list: ITreeNode<number>[] = [];\n\t\tconst model = new IndexTreeModel<number>('test', toList(list), -1);\n\n\t\tmodel.splice([0], 0, [\n\t\t\t{\n\t\t\t\telement: 0, children: [\n\t\t\t\t\t{ element: 10 },\n\t\t\t\t\t{ element: 11 },\n\t\t\t\t\t{ element: 12 },\n\t\t\t\t]\n\t\t\t},\n\t\t\t{ element: 1 },\n\t\t\t{ element: 2 }\n\t\t], options);\n\n\t\tassert.deepStrictEqual(list.length, 6);\n\n\t\tmodel.setCollapsed([0], true);\n\t\tassert.deepStrictEqual(list.length, 3);\n\t\tassert.deepStrictEqual(list[0].element, 0);\n\t\tassert.deepStrictEqual(list[0].collapsed, true);\n\t\tassert.deepStrictEqual(list[0].depth, 1);\n\t\tassert.deepStrictEqual(list[1].element, 1);\n\t\tassert.deepStrictEqual(list[1].collapsed, false);\n\t\tassert.deepStrictEqual(list[1].depth, 1);\n\t\tassert.deepStrictEqual(list[2].element, 2);\n\t\tassert.deepStrictEqual(list[2].collapsed, false);\n\t\tassert.deepStrictEqual(list[2].depth, 1);\n\t}));\n\n\ttest('updates collapsible', () => withSmartSplice(options => {\n\t\tconst list: ITreeNode<number>[] = [];\n\t\tconst model = new IndexTreeModel<number>('test', toList(list), -1);\n\n\t\tmodel.splice([0], 0, [\n\t\t\t{\n\t\t\t\telement: 0, children: [\n\t\t\t\t\t{ element: 1 },\n\t\t\t\t]\n\t\t\t},\n\t\t], options);\n\n\t\tassert.strictEqual(list[0].collapsible, true);\n\t\tassert.strictEqual(list[1].collapsible, false);\n\n\t\tmodel.splice([0, 0], 1, [], options);\n\t\t{\n\t\t\tconst [first, second] = list;\n\t\t\tassert.strictEqual(first.collapsible, false);\n\t\t\tassert.strictEqual(second, undefined);\n\t\t}\n\n\t\tmodel.splice([0, 0], 0, [{ element: 1 }], options);\n\t\t{\n\t\t\tconst [first, second] = list;\n\t\t\tassert.strictEqual(first.collapsible, true);\n\t\t\tassert.strictEqual(second.collapsible, false);\n\t\t}\n\t}));\n\n\ttest('expand', () => withSmartSplice(options => {\n\t\tconst list: ITreeNode<number>[] = [];\n\t\tconst model = new IndexTreeModel<number>('test', toList(list), -1);\n\n\t\tmodel.splice([0], 0, [\n\t\t\t{\n\t\t\t\telement: 0, collapsed: true, children: [\n\t\t\t\t\t{ element: 10 },\n\t\t\t\t\t{ element: 11 },\n\t\t\t\t\t{ element: 12 },\n\t\t\t\t]\n\t\t\t},\n\t\t\t{ element: 1 },\n\t\t\t{ element: 2 }\n\t\t], options);\n\n\t\tassert.deepStrictEqual(list.length, 3);\n\n\t\tmodel.setCollapsed([0], false);\n\t\tassert.deepStrictEqual(list.length, 6);\n\t\tassert.deepStrictEqual(list[0].element, 0);\n\t\tassert.deepStrictEqual(list[0].collapsed, false);\n\t\tassert.deepStrictEqual(list[0].depth, 1);\n\t\tassert.deepStrictEqual(list[1].element, 10);\n\t\tassert.deepStrictEqual(list[1].collapsed, false);\n\t\tassert.deepStrictEqual(list[1].depth, 2);\n\t\tassert.deepStrictEqual(list[2].element, 11);\n\t\tassert.deepStrictEqual(list[2].collapsed, false);\n\t\tassert.deepStrictEqual(list[2].depth, 2);\n\t\tassert.deepStrictEqual(list[3].element, 12);\n\t\tassert.deepStrictEqual(list[3].collapsed, false);\n\t\tassert.deepStrictEqual(list[3].depth, 2);\n\t\tassert.deepStrictEqual(list[4].element, 1);\n\t\tassert.deepStrictEqual(list[4].collapsed, false);\n\t\tassert.deepStrictEqual(list[4].depth, 1);\n\t\tassert.deepStrictEqual(list[5].element, 2);\n\t\tassert.deepStrictEqual(list[5].collapsed, false);\n\t\tassert.deepStrictEqual(list[5].depth, 1);\n\t}));\n\n\ttest('smart diff consistency', () => {\n\t\tconst times = 500;\n\t\tconst minEdits = 1;\n\t\tconst maxEdits = 10;\n\t\tconst maxInserts = 5;\n\n\t\tfor (let i = 0; i < times; i++) {\n\t\t\tconst list: ITreeNode<number>[] = [];\n\t\t\tconst options = { diffIdentityProvider: { getId: (n: number) => String(n) } };\n\t\t\tconst model = new IndexTreeModel<number>('test', toList(list), -1);\n\n\t\t\tconst changes = [];\n\t\t\tconst expected: number[] = [];\n\t\t\tlet elementCounter = 0;\n\n\t\t\tfor (let edits = Math.random() * (maxEdits - minEdits) + minEdits; edits > 0; edits--) {\n\t\t\t\tconst spliceIndex = Math.floor(Math.random() * list.length);\n\t\t\t\tconst deleteCount = Math.ceil(Math.random() * (list.length - spliceIndex));\n\t\t\t\tconst insertCount = Math.floor(Math.random() * maxInserts + 1);\n\n\t\t\t\tlet inserts: ITreeElement<number>[] = [];\n\t\t\t\tfor (let i = 0; i < insertCount; i++) {\n\t\t\t\t\tconst element = elementCounter++;\n\t\t\t\t\tinserts.push({ element, children: [] });\n\t\t\t\t}\n\n\t\t\t\t// move existing items\n\t\t\t\tif (Math.random() < 0.5) {\n\t\t\t\t\tconst elements = list.slice(spliceIndex, spliceIndex + Math.floor(deleteCount / 2));\n\t\t\t\t\tinserts.push(...elements.map(({ element }) => ({ element, children: [] })));\n\t\t\t\t}\n\n\t\t\t\tmodel.splice([spliceIndex], deleteCount, inserts, options);\n\t\t\t\texpected.splice(spliceIndex, deleteCount, ...inserts.map(i => i.element));\n\n\t\t\t\tconst listElements = list.map(l => l.element);\n\t\t\t\tchanges.push(`splice(${spliceIndex}, ${deleteCount}, [${inserts.map(e => e.element).join(', ')}]) -> ${listElements.join(', ')}`);\n\n\t\t\t\tassert.deepStrictEqual(expected, listElements, `Expected ${listElements.join(', ')} to equal ${expected.join(', ')}. Steps:\\n\\n${changes.join('\\n')}`);\n\t\t\t}\n\t\t}\n\t});\n\n\ttest('collapse should recursively adjust visible count', () => {\n\t\tconst list: ITreeNode<number>[] = [];\n\t\tconst model = new IndexTreeModel<number>('test', toList(list), -1);\n\n\t\tmodel.splice([0], 0, [\n\t\t\t{\n\t\t\t\telement: 1, children: [\n\t\t\t\t\t{\n\t\t\t\t\t\telement: 11, children: [\n\t\t\t\t\t\t\t{ element: 111 }\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\telement: 2, children: [\n\t\t\t\t\t{ element: 21 }\n\t\t\t\t]\n\t\t\t}\n\t\t]);\n\n\t\tassert.deepStrictEqual(list.length, 5);\n\t\tassert.deepStrictEqual(toArray(list), [1, 11, 111, 2, 21]);\n\n\t\tmodel.setCollapsed([0, 0], true);\n\t\tassert.deepStrictEqual(list.length, 4);\n\t\tassert.deepStrictEqual(toArray(list), [1, 11, 2, 21]);\n\n\t\tmodel.setCollapsed([1], true);\n\t\tassert.deepStrictEqual(list.length, 3);\n\t\tassert.deepStrictEqual(toArray(list), [1, 11, 2]);\n\t});\n\n\ttest('setCollapsible', () => {\n\t\tconst list: ITreeNode<number>[] = [];\n\t\tconst model = new IndexTreeModel<number>('test', toList(list), -1);\n\n\t\tmodel.splice([0], 0, [\n\t\t\t{\n\t\t\t\telement: 0, children: [\n\t\t\t\t\t{ element: 10 }\n\t\t\t\t]\n\t\t\t}\n\t\t]);\n\n\t\tassert.deepStrictEqual(list.length, 2);\n\n\t\tmodel.setCollapsible([0], false);\n\t\tassert.deepStrictEqual(list.length, 2);\n\t\tassert.deepStrictEqual(list[0].element, 0);\n\t\tassert.deepStrictEqual(list[0].collapsible, false);\n\t\tassert.deepStrictEqual(list[0].collapsed, false);\n\t\tassert.deepStrictEqual(list[1].element, 10);\n\t\tassert.deepStrictEqual(list[1].collapsible, false);\n\t\tassert.deepStrictEqual(list[1].collapsed, false);\n\n\t\tassert.deepStrictEqual(model.setCollapsed([0], true), false);\n\t\tassert.deepStrictEqual(list[0].element, 0);\n\t\tassert.deepStrictEqual(list[0].collapsible, false);\n\t\tassert.deepStrictEqual(list[0].collapsed, false);\n\t\tassert.deepStrictEqual(list[1].element, 10);\n\t\tassert.deepStrictEqual(list[1].collapsible, false);\n\t\tassert.deepStrictEqual(list[1].collapsed, false);\n\n\t\tassert.deepStrictEqual(model.setCollapsed([0], false), false);\n\t\tassert.deepStrictEqual(list[0].element, 0);\n\t\tassert.deepStrictEqual(list[0].collapsible, false);\n\t\tassert.deepStrictEqual(list[0].collapsed, false);\n\t\tassert.deepStrictEqual(list[1].element, 10);\n\t\tassert.deepStrictEqual(list[1].collapsible, false);\n\t\tassert.deepStrictEqual(list[1].collapsed, false);\n\n\t\tmodel.setCollapsible([0], true);\n\t\tassert.deepStrictEqual(list.length, 2);\n\t\tassert.deepStrictEqual(list[0].element, 0);\n\t\tassert.deepStrictEqual(list[0].collapsible, true);\n\t\tassert.deepStrictEqual(list[0].collapsed, false);\n\t\tassert.deepStrictEqual(list[1].element, 10);\n\t\tassert.deepStrictEqual(list[1].collapsible, false);\n\t\tassert.deepStrictEqual(list[1].collapsed, false);\n\n\t\tassert.deepStrictEqual(model.setCollapsed([0], true), true);\n\t\tassert.deepStrictEqual(list.length, 1);\n\t\tassert.deepStrictEqual(list[0].element, 0);\n\t\tassert.deepStrictEqual(list[0].collapsible, true);\n\t\tassert.deepStrictEqual(list[0].collapsed, true);\n\n\t\tassert.deepStrictEqual(model.setCollapsed([0], false), true);\n\t\tassert.deepStrictEqual(list[0].element, 0);\n\t\tassert.deepStrictEqual(list[0].collapsible, true);\n\t\tassert.deepStrictEqual(list[0].collapsed, false);\n\t\tassert.deepStrictEqual(list[1].element, 10);\n\t\tassert.deepStrictEqual(list[1].collapsible, false);\n\t\tassert.deepStrictEqual(list[1].collapsed, false);\n\t});\n\n\ttest('simple filter', () => {\n\t\tconst list: ITreeNode<number>[] = [];\n\t\tconst filter = new class implements ITreeFilter<number> {\n\t\t\tfilter(element: number): TreeVisibility {\n\t\t\t\treturn element % 2 === 0 ? TreeVisibility.Visible : TreeVisibility.Hidden;\n\t\t\t}\n\t\t};\n\n\t\tconst model = new IndexTreeModel<number>('test', toList(list), -1, { filter });\n\n\t\tmodel.splice([0], 0, [\n\t\t\t{\n\t\t\t\telement: 0, children: [\n\t\t\t\t\t{ element: 1 },\n\t\t\t\t\t{ element: 2 },\n\t\t\t\t\t{ element: 3 },\n\t\t\t\t\t{ element: 4 },\n\t\t\t\t\t{ element: 5 },\n\t\t\t\t\t{ element: 6 },\n\t\t\t\t\t{ element: 7 }\n\t\t\t\t]\n\t\t\t}\n\t\t]);\n\n\t\tassert.deepStrictEqual(list.length, 4);\n\t\tassert.deepStrictEqual(toArray(list), [0, 2, 4, 6]);\n\n\t\tmodel.setCollapsed([0], true);\n\t\tassert.deepStrictEqual(toArray(list), [0]);\n\n\t\tmodel.setCollapsed([0], false);\n\t\tassert.deepStrictEqual(toArray(list), [0, 2, 4, 6]);\n\t});\n\n\ttest('recursive filter on initial model', () => {\n\t\tconst list: ITreeNode<number>[] = [];\n\t\tconst filter = new class implements ITreeFilter<number> {\n\t\t\tfilter(element: number): TreeVisibility {\n\t\t\t\treturn element === 0 ? TreeVisibility.Recurse : TreeVisibility.Hidden;\n\t\t\t}\n\t\t};\n\n\t\tconst model = new IndexTreeModel<number>('test', toList(list), -1, { filter });\n\n\t\tmodel.splice([0], 0, [\n\t\t\t{\n\t\t\t\telement: 0, children: [\n\t\t\t\t\t{ element: 1 },\n\t\t\t\t\t{ element: 2 }\n\t\t\t\t]\n\t\t\t}\n\t\t]);\n\n\t\tassert.deepStrictEqual(toArray(list), []);\n\t});\n\n\ttest('refilter', () => {\n\t\tconst list: ITreeNode<number>[] = [];\n\t\tlet shouldFilter = false;\n\t\tconst filter = new class implements ITreeFilter<number> {\n\t\t\tfilter(element: number): TreeVisibility {\n\t\t\t\treturn (!shouldFilter || element % 2 === 0) ? TreeVisibility.Visible : TreeVisibility.Hidden;\n\t\t\t}\n\t\t};\n\n\t\tconst model = new IndexTreeModel<number>('test', toList(list), -1, { filter });\n\n\t\tmodel.splice([0], 0, [\n\t\t\t{\n\t\t\t\telement: 0, children: [\n\t\t\t\t\t{ element: 1 },\n\t\t\t\t\t{ element: 2 },\n\t\t\t\t\t{ element: 3 },\n\t\t\t\t\t{ element: 4 },\n\t\t\t\t\t{ element: 5 },\n\t\t\t\t\t{ element: 6 },\n\t\t\t\t\t{ element: 7 }\n\t\t\t\t]\n\t\t\t},\n\t\t]);\n\n\t\tassert.deepStrictEqual(toArray(list), [0, 1, 2, 3, 4, 5, 6, 7]);\n\n\t\tmodel.refilter();\n\t\tassert.deepStrictEqual(toArray(list), [0, 1, 2, 3, 4, 5, 6, 7]);\n\n\t\tshouldFilter = true;\n\t\tmodel.refilter();\n\t\tassert.deepStrictEqual(toArray(list), [0, 2, 4, 6]);\n\n\t\tshouldFilter = false;\n\t\tmodel.refilter();\n\t\tassert.deepStrictEqual(toArray(list), [0, 1, 2, 3, 4, 5, 6, 7]);\n\t});\n\n\ttest('recursive filter', () => {\n\t\tconst list: ITreeNode<string>[] = [];\n\t\tlet query = new RegExp('');\n\t\tconst filter = new class implements ITreeFilter<string> {\n\t\t\tfilter(element: string): TreeVisibility {\n\t\t\t\treturn query.test(element) ? TreeVisibility.Visible : TreeVisibility.Recurse;\n\t\t\t}\n\t\t};\n\n\t\tconst model = new IndexTreeModel<string>('test', toList(list), 'root', { filter });\n\n\t\tmodel.splice([0], 0, [\n\t\t\t{\n\t\t\t\telement: 'vscode', children: [\n\t\t\t\t\t{ element: '.build' },\n\t\t\t\t\t{ element: 'git' },\n\t\t\t\t\t{\n\t\t\t\t\t\telement: 'github', children: [\n\t\t\t\t\t\t\t{ element: 'calendar.yml' },\n\t\t\t\t\t\t\t{ element: 'endgame' },\n\t\t\t\t\t\t\t{ element: 'build.js' },\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\telement: 'build', children: [\n\t\t\t\t\t\t\t{ element: 'lib' },\n\t\t\t\t\t\t\t{ element: 'gulpfile.js' }\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t]);\n\n\t\tassert.deepStrictEqual(list.length, 10);\n\n\t\tquery = /build/;\n\t\tmodel.refilter();\n\t\tassert.deepStrictEqual(toArray(list), ['vscode', '.build', 'github', 'build.js', 'build']);\n\n\t\tmodel.setCollapsed([0], true);\n\t\tassert.deepStrictEqual(toArray(list), ['vscode']);\n\n\t\tmodel.setCollapsed([0], false);\n\t\tassert.deepStrictEqual(toArray(list), ['vscode', '.build', 'github', 'build.js', 'build']);\n\t});\n\n\ttest('recursive filter with collapse', () => {\n\t\tconst list: ITreeNode<string>[] = [];\n\t\tlet query = new RegExp('');\n\t\tconst filter = new class implements ITreeFilter<string> {\n\t\t\tfilter(element: string): TreeVisibility {\n\t\t\t\treturn query.test(element) ? TreeVisibility.Visible : TreeVisibility.Recurse;\n\t\t\t}\n\t\t};\n\n\t\tconst model = new IndexTreeModel<string>('test', toList(list), 'root', { filter });\n\n\t\tmodel.splice([0], 0, [\n\t\t\t{\n\t\t\t\telement: 'vscode', children: [\n\t\t\t\t\t{ element: '.build' },\n\t\t\t\t\t{ element: 'git' },\n\t\t\t\t\t{\n\t\t\t\t\t\telement: 'github', children: [\n\t\t\t\t\t\t\t{ element: 'calendar.yml' },\n\t\t\t\t\t\t\t{ element: 'endgame' },\n\t\t\t\t\t\t\t{ element: 'build.js' },\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\telement: 'build', children: [\n\t\t\t\t\t\t\t{ element: 'lib' },\n\t\t\t\t\t\t\t{ element: 'gulpfile.js' }\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t]);\n\n\t\tassert.deepStrictEqual(list.length, 10);\n\n\t\tquery = /gulp/;\n\t\tmodel.refilter();\n\t\tassert.deepStrictEqual(toArray(list), ['vscode', 'build', 'gulpfile.js']);\n\n\t\tmodel.setCollapsed([0, 3], true);\n\t\tassert.deepStrictEqual(toArray(list), ['vscode', 'build']);\n\n\t\tmodel.setCollapsed([0], true);\n\t\tassert.deepStrictEqual(toArray(list), ['vscode']);\n\t});\n\n\ttest('recursive filter while collapsed', () => {\n\t\tconst list: ITreeNode<string>[] = [];\n\t\tlet query = new RegExp('');\n\t\tconst filter = new class implements ITreeFilter<string> {\n\t\t\tfilter(element: string): TreeVisibility {\n\t\t\t\treturn query.test(element) ? TreeVisibility.Visible : TreeVisibility.Recurse;\n\t\t\t}\n\t\t};\n\n\t\tconst model = new IndexTreeModel<string>('test', toList(list), 'root', { filter });\n\n\t\tmodel.splice([0], 0, [\n\t\t\t{\n\t\t\t\telement: 'vscode', collapsed: true, children: [\n\t\t\t\t\t{ element: '.build' },\n\t\t\t\t\t{ element: 'git' },\n\t\t\t\t\t{\n\t\t\t\t\t\telement: 'github', children: [\n\t\t\t\t\t\t\t{ element: 'calendar.yml' },\n\t\t\t\t\t\t\t{ element: 'endgame' },\n\t\t\t\t\t\t\t{ element: 'build.js' },\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\telement: 'build', children: [\n\t\t\t\t\t\t\t{ element: 'lib' },\n\t\t\t\t\t\t\t{ element: 'gulpfile.js' }\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t]);\n\n\t\tassert.deepStrictEqual(toArray(list), ['vscode']);\n\n\t\tquery = /gulp/;\n\t\tmodel.refilter();\n\t\tassert.deepStrictEqual(toArray(list), ['vscode']);\n\n\t\tmodel.setCollapsed([0], false);\n\t\tassert.deepStrictEqual(toArray(list), ['vscode', 'build', 'gulpfile.js']);\n\n\t\tmodel.setCollapsed([0], true);\n\t\tassert.deepStrictEqual(toArray(list), ['vscode']);\n\n\t\tquery = new RegExp('');\n\t\tmodel.refilter();\n\t\tassert.deepStrictEqual(toArray(list), ['vscode']);\n\n\t\tmodel.setCollapsed([0], false);\n\t\tassert.deepStrictEqual(list.length, 10);\n\t});\n\n\tsuite('getNodeLocation', () => {\n\n\t\ttest('simple', () => {\n\t\t\tconst list: IIndexTreeNode<number>[] = [];\n\t\t\tconst model = new IndexTreeModel<number>('test', toList(list), -1);\n\n\t\t\tmodel.splice([0], 0, [\n\t\t\t\t{\n\t\t\t\t\telement: 0, children: [\n\t\t\t\t\t\t{ element: 10 },\n\t\t\t\t\t\t{ element: 11 },\n\t\t\t\t\t\t{ element: 12 },\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{ element: 1 },\n\t\t\t\t{ element: 2 }\n\t\t\t]);\n\n\t\t\tassert.deepStrictEqual(model.getNodeLocation(list[0]), [0]);\n\t\t\tassert.deepStrictEqual(model.getNodeLocation(list[1]), [0, 0]);\n\t\t\tassert.deepStrictEqual(model.getNodeLocation(list[2]), [0, 1]);\n\t\t\tassert.deepStrictEqual(model.getNodeLocation(list[3]), [0, 2]);\n\t\t\tassert.deepStrictEqual(model.getNodeLocation(list[4]), [1]);\n\t\t\tassert.deepStrictEqual(model.getNodeLocation(list[5]), [2]);\n\t\t});\n\n\t\ttest('with filter', () => {\n\t\t\tconst list: IIndexTreeNode<number>[] = [];\n\t\t\tconst filter = new class implements ITreeFilter<number> {\n\t\t\t\tfilter(element: number): TreeVisibility {\n\t\t\t\t\treturn element % 2 === 0 ? TreeVisibility.Visible : TreeVisibility.Hidden;\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst model = new IndexTreeModel<number>('test', toList(list), -1, { filter });\n\n\t\t\tmodel.splice([0], 0, [\n\t\t\t\t{\n\t\t\t\t\telement: 0, children: [\n\t\t\t\t\t\t{ element: 1 },\n\t\t\t\t\t\t{ element: 2 },\n\t\t\t\t\t\t{ element: 3 },\n\t\t\t\t\t\t{ element: 4 },\n\t\t\t\t\t\t{ element: 5 },\n\t\t\t\t\t\t{ element: 6 },\n\t\t\t\t\t\t{ element: 7 }\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]);\n\n\t\t\tassert.deepStrictEqual(model.getNodeLocation(list[0]), [0]);\n\t\t\tassert.deepStrictEqual(model.getNodeLocation(list[1]), [0, 1]);\n\t\t\tassert.deepStrictEqual(model.getNodeLocation(list[2]), [0, 3]);\n\t\t\tassert.deepStrictEqual(model.getNodeLocation(list[3]), [0, 5]);\n\t\t});\n\t});\n\n\ttest('refilter with filtered out nodes', () => {\n\t\tconst list: ITreeNode<string>[] = [];\n\t\tlet query = new RegExp('');\n\t\tconst filter = new class implements ITreeFilter<string> {\n\t\t\tfilter(element: string): boolean {\n\t\t\t\treturn query.test(element);\n\t\t\t}\n\t\t};\n\n\t\tconst model = new IndexTreeModel<string>('test', toList(list), 'root', { filter });\n\n\t\tmodel.splice([0], 0, [\n\t\t\t{ element: 'silver' },\n\t\t\t{ element: 'gold' },\n\t\t\t{ element: 'platinum' }\n\t\t]);\n\n\t\tassert.deepStrictEqual(toArray(list), ['silver', 'gold', 'platinum']);\n\n\t\tquery = /platinum/;\n\t\tmodel.refilter();\n\t\tassert.deepStrictEqual(toArray(list), ['platinum']);\n\n\t\tmodel.splice([0], Number.POSITIVE_INFINITY, [\n\t\t\t{ element: 'silver' },\n\t\t\t{ element: 'gold' },\n\t\t\t{ element: 'platinum' }\n\t\t]);\n\t\tassert.deepStrictEqual(toArray(list), ['platinum']);\n\n\t\tmodel.refilter();\n\t\tassert.deepStrictEqual(toArray(list), ['platinum']);\n\t});\n\n\ttest('explicit hidden nodes should have renderNodeCount == 0, issue #83211', () => {\n\t\tconst list: ITreeNode<string>[] = [];\n\t\tlet query = new RegExp('');\n\t\tconst filter = new class implements ITreeFilter<string> {\n\t\t\tfilter(element: string): boolean {\n\t\t\t\treturn query.test(element);\n\t\t\t}\n\t\t};\n\n\t\tconst model = new IndexTreeModel<string>('test', toList(list), 'root', { filter });\n\n\t\tmodel.splice([0], 0, [\n\t\t\t{ element: 'a', children: [{ element: 'aa' }] },\n\t\t\t{ element: 'b', children: [{ element: 'bb' }] }\n\t\t]);\n\n\t\tassert.deepStrictEqual(toArray(list), ['a', 'aa', 'b', 'bb']);\n\t\tassert.deepStrictEqual(model.getListIndex([0]), 0);\n\t\tassert.deepStrictEqual(model.getListIndex([0, 0]), 1);\n\t\tassert.deepStrictEqual(model.getListIndex([1]), 2);\n\t\tassert.deepStrictEqual(model.getListIndex([1, 0]), 3);\n\n\t\tquery = /b/;\n\t\tmodel.refilter();\n\t\tassert.deepStrictEqual(toArray(list), ['b', 'bb']);\n\t\tassert.deepStrictEqual(model.getListIndex([0]), -1);\n\t\tassert.deepStrictEqual(model.getListIndex([0, 0]), -1);\n\t\tassert.deepStrictEqual(model.getListIndex([1]), 0);\n\t\tassert.deepStrictEqual(model.getListIndex([1, 0]), 1);\n\t});\n});\n"]}