{"version":3,"file":"objectTreeModel.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/test/browser/ui/tree/objectTreeModel.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { ITreeNode, ITreeFilter, TreeVisibility } from 'vs/base/browser/ui/tree/tree';\nimport { ObjectTreeModel } from 'vs/base/browser/ui/tree/objectTreeModel';\nimport { IList } from 'vs/base/browser/ui/tree/indexTreeModel';\n\nfunction toList<T>(arr: T[]): IList<T> {\n\treturn {\n\t\tsplice(start: number, deleteCount: number, elements: T[]): void {\n\t\t\t// console.log(`splice (${start}, ${deleteCount}, ${elements.length} [${elements.join(', ')}] )`); // debugging\n\t\t\tarr.splice(start, deleteCount, ...elements);\n\t\t},\n\t\tupdateElementHeight() { }\n\t};\n}\n\nfunction toArray<T>(list: ITreeNode<T>[]): T[] {\n\treturn list.map(i => i.element);\n}\n\nsuite('ObjectTreeModel', function () {\n\n\ttest('ctor', () => {\n\t\tconst list: ITreeNode<number>[] = [];\n\t\tconst model = new ObjectTreeModel<number>('test', toList(list));\n\t\tassert(model);\n\t\tassert.strictEqual(list.length, 0);\n\t\tassert.strictEqual(model.size, 0);\n\t});\n\n\ttest('flat', () => {\n\t\tconst list: ITreeNode<number>[] = [];\n\t\tconst model = new ObjectTreeModel<number>('test', toList(list));\n\n\t\tmodel.setChildren(null, [\n\t\t\t{ element: 0 },\n\t\t\t{ element: 1 },\n\t\t\t{ element: 2 }\n\t\t]);\n\n\t\tassert.deepStrictEqual(toArray(list), [0, 1, 2]);\n\t\tassert.strictEqual(model.size, 3);\n\n\t\tmodel.setChildren(null, [\n\t\t\t{ element: 3 },\n\t\t\t{ element: 4 },\n\t\t\t{ element: 5 },\n\t\t]);\n\n\t\tassert.deepStrictEqual(toArray(list), [3, 4, 5]);\n\t\tassert.strictEqual(model.size, 3);\n\n\t\tmodel.setChildren(null);\n\t\tassert.deepStrictEqual(toArray(list), []);\n\t\tassert.strictEqual(model.size, 0);\n\t});\n\n\ttest('nested', () => {\n\t\tconst list: ITreeNode<number>[] = [];\n\t\tconst model = new ObjectTreeModel<number>('test', toList(list));\n\n\t\tmodel.setChildren(null, [\n\t\t\t{\n\t\t\t\telement: 0, children: [\n\t\t\t\t\t{ element: 10 },\n\t\t\t\t\t{ element: 11 },\n\t\t\t\t\t{ element: 12 },\n\t\t\t\t]\n\t\t\t},\n\t\t\t{ element: 1 },\n\t\t\t{ element: 2 }\n\t\t]);\n\n\t\tassert.deepStrictEqual(toArray(list), [0, 10, 11, 12, 1, 2]);\n\t\tassert.strictEqual(model.size, 6);\n\n\t\tmodel.setChildren(12, [\n\t\t\t{ element: 120 },\n\t\t\t{ element: 121 }\n\t\t]);\n\n\t\tassert.deepStrictEqual(toArray(list), [0, 10, 11, 12, 120, 121, 1, 2]);\n\t\tassert.strictEqual(model.size, 8);\n\n\t\tmodel.setChildren(0);\n\t\tassert.deepStrictEqual(toArray(list), [0, 1, 2]);\n\t\tassert.strictEqual(model.size, 3);\n\n\t\tmodel.setChildren(null);\n\t\tassert.deepStrictEqual(toArray(list), []);\n\t\tassert.strictEqual(model.size, 0);\n\t});\n\n\ttest('setChildren on collapsed node', () => {\n\t\tconst list: ITreeNode<number>[] = [];\n\t\tconst model = new ObjectTreeModel<number>('test', toList(list));\n\n\t\tmodel.setChildren(null, [\n\t\t\t{ element: 0, collapsed: true }\n\t\t]);\n\n\t\tassert.deepStrictEqual(toArray(list), [0]);\n\n\t\tmodel.setChildren(0, [\n\t\t\t{ element: 1 },\n\t\t\t{ element: 2 }\n\t\t]);\n\n\t\tassert.deepStrictEqual(toArray(list), [0]);\n\n\t\tmodel.setCollapsed(0, false);\n\t\tassert.deepStrictEqual(toArray(list), [0, 1, 2]);\n\t});\n\n\ttest('setChildren on expanded, unrevealed node', () => {\n\t\tconst list: ITreeNode<number>[] = [];\n\t\tconst model = new ObjectTreeModel<number>('test', toList(list));\n\n\t\tmodel.setChildren(null, [\n\t\t\t{\n\t\t\t\telement: 1, collapsed: true, children: [\n\t\t\t\t\t{ element: 11, collapsed: false }\n\t\t\t\t]\n\t\t\t},\n\t\t\t{ element: 2 }\n\t\t]);\n\n\t\tassert.deepStrictEqual(toArray(list), [1, 2]);\n\n\t\tmodel.setChildren(11, [\n\t\t\t{ element: 111 },\n\t\t\t{ element: 112 }\n\t\t]);\n\n\t\tassert.deepStrictEqual(toArray(list), [1, 2]);\n\n\t\tmodel.setCollapsed(1, false);\n\t\tassert.deepStrictEqual(toArray(list), [1, 11, 111, 112, 2]);\n\t});\n\n\ttest('collapse state is preserved with strict identity', () => {\n\t\tconst list: ITreeNode<string>[] = [];\n\t\tconst model = new ObjectTreeModel<string>('test', toList(list), { collapseByDefault: true });\n\t\tconst data = [{ element: 'father', children: [{ element: 'child' }] }];\n\n\t\tmodel.setChildren(null, data);\n\t\tassert.deepStrictEqual(toArray(list), ['father']);\n\n\t\tmodel.setCollapsed('father', false);\n\t\tassert.deepStrictEqual(toArray(list), ['father', 'child']);\n\n\t\tmodel.setChildren(null, data);\n\t\tassert.deepStrictEqual(toArray(list), ['father', 'child']);\n\n\t\tconst data2 = [{ element: 'father', children: [{ element: 'child' }] }, { element: 'uncle' }];\n\t\tmodel.setChildren(null, data2);\n\t\tassert.deepStrictEqual(toArray(list), ['father', 'child', 'uncle']);\n\n\t\tmodel.setChildren(null, [{ element: 'uncle' }]);\n\t\tassert.deepStrictEqual(toArray(list), ['uncle']);\n\n\t\tmodel.setChildren(null, data2);\n\t\tassert.deepStrictEqual(toArray(list), ['father', 'uncle']);\n\n\t\tmodel.setChildren(null, data);\n\t\tassert.deepStrictEqual(toArray(list), ['father']);\n\t});\n\n\ttest('sorter', () => {\n\t\tlet compare: (a: string, b: string) => number = (a, b) => a < b ? -1 : 1;\n\n\t\tconst list: ITreeNode<string>[] = [];\n\t\tconst model = new ObjectTreeModel<string>('test', toList(list), { sorter: { compare(a, b) { return compare(a, b); } } });\n\t\tconst data = [\n\t\t\t{ element: 'cars', children: [{ element: 'sedan' }, { element: 'convertible' }, { element: 'compact' }] },\n\t\t\t{ element: 'airplanes', children: [{ element: 'passenger' }, { element: 'jet' }] },\n\t\t\t{ element: 'bicycles', children: [{ element: 'dutch' }, { element: 'mountain' }, { element: 'electric' }] },\n\t\t];\n\n\t\tmodel.setChildren(null, data);\n\t\tassert.deepStrictEqual(toArray(list), ['airplanes', 'jet', 'passenger', 'bicycles', 'dutch', 'electric', 'mountain', 'cars', 'compact', 'convertible', 'sedan']);\n\t});\n\n\ttest('resort', () => {\n\t\tlet compare: (a: string, b: string) => number = () => 0;\n\n\t\tconst list: ITreeNode<string>[] = [];\n\t\tconst model = new ObjectTreeModel<string>('test', toList(list), { sorter: { compare(a, b) { return compare(a, b); } } });\n\t\tconst data = [\n\t\t\t{ element: 'cars', children: [{ element: 'sedan' }, { element: 'convertible' }, { element: 'compact' }] },\n\t\t\t{ element: 'airplanes', children: [{ element: 'passenger' }, { element: 'jet' }] },\n\t\t\t{ element: 'bicycles', children: [{ element: 'dutch' }, { element: 'mountain' }, { element: 'electric' }] },\n\t\t];\n\n\t\tmodel.setChildren(null, data);\n\t\tassert.deepStrictEqual(toArray(list), ['cars', 'sedan', 'convertible', 'compact', 'airplanes', 'passenger', 'jet', 'bicycles', 'dutch', 'mountain', 'electric']);\n\n\t\t// lexicographical\n\t\tcompare = (a, b) => a < b ? -1 : 1;\n\n\t\t// non-recursive\n\t\tmodel.resort(null, false);\n\t\tassert.deepStrictEqual(toArray(list), ['airplanes', 'passenger', 'jet', 'bicycles', 'dutch', 'mountain', 'electric', 'cars', 'sedan', 'convertible', 'compact']);\n\n\t\t// recursive\n\t\tmodel.resort();\n\t\tassert.deepStrictEqual(toArray(list), ['airplanes', 'jet', 'passenger', 'bicycles', 'dutch', 'electric', 'mountain', 'cars', 'compact', 'convertible', 'sedan']);\n\n\t\t// reverse\n\t\tcompare = (a, b) => a < b ? 1 : -1;\n\n\t\t// scoped\n\t\tmodel.resort('cars');\n\t\tassert.deepStrictEqual(toArray(list), ['airplanes', 'jet', 'passenger', 'bicycles', 'dutch', 'electric', 'mountain', 'cars', 'sedan', 'convertible', 'compact']);\n\n\t\t// recursive\n\t\tmodel.resort();\n\t\tassert.deepStrictEqual(toArray(list), ['cars', 'sedan', 'convertible', 'compact', 'bicycles', 'mountain', 'electric', 'dutch', 'airplanes', 'passenger', 'jet']);\n\t});\n\n\ttest('expandTo', () => {\n\t\tconst list: ITreeNode<number>[] = [];\n\t\tconst model = new ObjectTreeModel<number>('test', toList(list), { collapseByDefault: true });\n\n\t\tmodel.setChildren(null, [\n\t\t\t{\n\t\t\t\telement: 0, children: [\n\t\t\t\t\t{ element: 10, children: [{ element: 100, children: [{ element: 1000 }] }] },\n\t\t\t\t\t{ element: 11 },\n\t\t\t\t\t{ element: 12 },\n\t\t\t\t]\n\t\t\t},\n\t\t\t{ element: 1 },\n\t\t\t{ element: 2 }\n\t\t]);\n\n\t\tassert.deepStrictEqual(toArray(list), [0, 1, 2]);\n\t\tmodel.expandTo(1000);\n\t\tassert.deepStrictEqual(toArray(list), [0, 10, 100, 1000, 11, 12, 1, 2]);\n\t});\n\n\ttest('issue #95641', () => {\n\t\tconst list: ITreeNode<string>[] = [];\n\t\tlet fn = (_: string) => true;\n\t\tconst filter = new class implements ITreeFilter<string> {\n\t\t\tfilter(element: string, parentVisibility: TreeVisibility): TreeVisibility {\n\t\t\t\tif (element === 'file') {\n\t\t\t\t\treturn TreeVisibility.Recurse;\n\t\t\t\t}\n\n\t\t\t\treturn fn(element) ? TreeVisibility.Visible : parentVisibility;\n\t\t\t}\n\t\t};\n\t\tconst model = new ObjectTreeModel<string>('test', toList(list), { filter });\n\n\t\tmodel.setChildren(null, [{ element: 'file', children: [{ element: 'hello' }] }]);\n\t\tassert.deepStrictEqual(toArray(list), ['file', 'hello']);\n\n\t\tfn = (el: string) => el === 'world';\n\t\tmodel.refilter();\n\t\tassert.deepStrictEqual(toArray(list), []);\n\n\t\tmodel.setChildren('file', [{ element: 'world' }]);\n\t\tassert.deepStrictEqual(toArray(list), ['file', 'world']);\n\n\t\tmodel.setChildren('file', [{ element: 'hello' }]);\n\t\tassert.deepStrictEqual(toArray(list), []);\n\n\t\tmodel.setChildren('file', [{ element: 'world' }]);\n\t\tassert.deepStrictEqual(toArray(list), ['file', 'world']);\n\t});\n});\n"]}