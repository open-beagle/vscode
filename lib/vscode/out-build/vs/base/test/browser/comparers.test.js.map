{"version":3,"file":"comparers.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/test/browser/comparers.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { compareFileNames, compareFileExtensions, compareFileNamesDefault, compareFileExtensionsDefault } from 'vs/base/common/comparers';\nimport * as assert from 'assert';\n\nconst compareLocale = (a: string, b: string) => a.localeCompare(b);\nconst compareLocaleNumeric = (a: string, b: string) => a.localeCompare(b, undefined, { numeric: true });\n\n\nsuite('Comparers', () => {\n\n\ttest('compareFileNames', () => {\n\n\t\t//\n\t\t// Comparisons with the same results as compareFileNamesDefault\n\t\t//\n\n\t\t// name-only comparisons\n\t\tassert(compareFileNames(null, null) === 0, 'null should be equal');\n\t\tassert(compareFileNames(null, 'abc') < 0, 'null should be come before real values');\n\t\tassert(compareFileNames('', '') === 0, 'empty should be equal');\n\t\tassert(compareFileNames('abc', 'abc') === 0, 'equal names should be equal');\n\t\tassert(compareFileNames('z', 'A') > 0, 'z comes is after A regardless of case');\n\t\tassert(compareFileNames('Z', 'a') > 0, 'Z comes after a regardless of case');\n\n\t\t// name plus extension comparisons\n\t\tassert(compareFileNames('bbb.aaa', 'aaa.bbb') > 0, 'files with extensions are compared first by filename');\n\t\tassert(compareFileNames('aggregate.go', 'aggregate_repo.go') > 0, 'compares the whole name all at once by locale');\n\n\t\t// dotfile comparisons\n\t\tassert(compareFileNames('.abc', '.abc') === 0, 'equal dotfile names should be equal');\n\t\tassert(compareFileNames('.env.', '.gitattributes') < 0, 'filenames starting with dots and with extensions should still sort properly');\n\t\tassert(compareFileNames('.env', '.aaa.env') > 0, 'dotfiles sort alphabetically when they contain multiple dots');\n\t\tassert(compareFileNames('.env', '.env.aaa') < 0, 'dotfiles with the same root sort shortest first');\n\t\tassert(compareFileNames('.aaa_env', '.aaa.env') < 0, 'and underscore in a dotfile name will sort before a dot');\n\n\t\t// dotfile vs non-dotfile comparisons\n\t\tassert(compareFileNames(null, '.abc') < 0, 'null should come before dotfiles');\n\t\tassert(compareFileNames('.env', 'aaa') < 0, 'dotfiles come before filenames without extensions');\n\t\tassert(compareFileNames('.env', 'aaa.env') < 0, 'dotfiles come before filenames with extensions');\n\t\tassert(compareFileNames('.md', 'A.MD') < 0, 'dotfiles sort before uppercase files');\n\t\tassert(compareFileNames('.MD', 'a.md') < 0, 'dotfiles sort before lowercase files');\n\n\t\t// numeric comparisons\n\t\tassert(compareFileNames('1', '1') === 0, 'numerically equal full names should be equal');\n\t\tassert(compareFileNames('abc1.txt', 'abc1.txt') === 0, 'equal filenames with numbers should be equal');\n\t\tassert(compareFileNames('abc1.txt', 'abc2.txt') < 0, 'filenames with numbers should be in numerical order, not alphabetical order');\n\t\tassert(compareFileNames('abc2.txt', 'abc10.txt') < 0, 'filenames with numbers should be in numerical order even when they are multiple digits long');\n\t\tassert(compareFileNames('abc02.txt', 'abc010.txt') < 0, 'filenames with numbers that have leading zeros sort numerically');\n\t\tassert(compareFileNames('abc1.10.txt', 'abc1.2.txt') > 0, 'numbers with dots between them are treated as two separate numbers, not one decimal number');\n\n\t\t//\n\t\t// Comparisons with different results than compareFileNamesDefault\n\t\t//\n\n\t\t// name-only comparisons\n\t\tassert(compareFileNames('a', 'A') !== compareLocale('a', 'A'), 'the same letter does not sort by locale');\n\t\tassert(compareFileNames('â', 'Â') !== compareLocale('â', 'Â'), 'the same accented letter does not sort by locale');\n\t\tassert.notDeepStrictEqual(['artichoke', 'Artichoke', 'art', 'Art'].sort(compareFileNames), ['artichoke', 'Artichoke', 'art', 'Art'].sort(compareLocale), 'words with the same root and different cases do not sort in locale order');\n\t\tassert.notDeepStrictEqual(['email', 'Email', 'émail', 'Émail'].sort(compareFileNames), ['email', 'Email', 'émail', 'Émail'].sort(compareLocale), 'the same base characters with different case or accents do not sort in locale order');\n\n\t\t// numeric comparisons\n\t\tassert(compareFileNames('abc02.txt', 'abc002.txt') > 0, 'filenames with equivalent numbers and leading zeros sort in unicode order');\n\t\tassert(compareFileNames('abc.txt1', 'abc.txt01') > 0, 'same name plus extensions with equal numbers sort in unicode order');\n\t\tassert(compareFileNames('art01', 'Art01') !== 'art01'.localeCompare('Art01', undefined, { numeric: true }),\n\t\t\t'a numerically equivalent word of a different case does not compare numerically based on locale');\n\n\t});\n\n\ttest('compareFileExtensions', () => {\n\n\t\t//\n\t\t// Comparisons with the same results as compareFileExtensionsDefault\n\t\t//\n\n\t\t// name-only comparisons\n\t\tassert(compareFileExtensions(null, null) === 0, 'null should be equal');\n\t\tassert(compareFileExtensions(null, 'abc') < 0, 'null should come before real files without extension');\n\t\tassert(compareFileExtensions('', '') === 0, 'empty should be equal');\n\t\tassert(compareFileExtensions('abc', 'abc') === 0, 'equal names should be equal');\n\t\tassert(compareFileExtensions('z', 'A') > 0, 'z comes after A');\n\t\tassert(compareFileExtensions('Z', 'a') > 0, 'Z comes after a');\n\n\t\t// name plus extension comparisons\n\t\tassert(compareFileExtensions('file.ext', 'file.ext') === 0, 'equal full names should be equal');\n\t\tassert(compareFileExtensions('a.ext', 'b.ext') < 0, 'if equal extensions, filenames should be compared');\n\t\tassert(compareFileExtensions('file.aaa', 'file.bbb') < 0, 'files with equal names should be compared by extensions');\n\t\tassert(compareFileExtensions('bbb.aaa', 'aaa.bbb') < 0, 'files should be compared by extensions even if filenames compare differently');\n\t\tassert(compareFileExtensions('agg.go', 'aggrepo.go') < 0, 'shorter names sort before longer names');\n\t\tassert(compareFileExtensions('agg.go', 'agg_repo.go') < 0, 'shorter names short before longer names even when the longer name contains an underscore');\n\t\tassert(compareFileExtensions('a.MD', 'b.md') < 0, 'when extensions are the same except for case, the files sort by name');\n\n\t\t// dotfile comparisons\n\t\tassert(compareFileExtensions('.abc', '.abc') === 0, 'equal dotfiles should be equal');\n\t\tassert(compareFileExtensions('.md', '.Gitattributes') > 0, 'dotfiles sort alphabetically regardless of case');\n\n\t\t// dotfile vs non-dotfile comparisons\n\t\tassert(compareFileExtensions(null, '.abc') < 0, 'null should come before dotfiles');\n\t\tassert(compareFileExtensions('.env', 'aaa.env') < 0, 'if equal extensions, filenames should be compared, empty filename should come before others');\n\t\tassert(compareFileExtensions('.MD', 'a.md') < 0, 'if extensions differ in case, files sort by extension in unicode order');\n\n\t\t// numeric comparisons\n\t\tassert(compareFileExtensions('1', '1') === 0, 'numerically equal full names should be equal');\n\t\tassert(compareFileExtensions('abc1.txt', 'abc1.txt') === 0, 'equal filenames with numbers should be equal');\n\t\tassert(compareFileExtensions('abc1.txt', 'abc2.txt') < 0, 'filenames with numbers should be in numerical order, not alphabetical order');\n\t\tassert(compareFileExtensions('abc2.txt', 'abc10.txt') < 0, 'filenames with numbers should be in numerical order even when they are multiple digits long');\n\t\tassert(compareFileExtensions('abc02.txt', 'abc010.txt') < 0, 'filenames with numbers that have leading zeros sort numerically');\n\t\tassert(compareFileExtensions('abc1.10.txt', 'abc1.2.txt') > 0, 'numbers with dots between them are treated as two separate numbers, not one decimal number');\n\t\tassert(compareFileExtensions('abc2.txt2', 'abc1.txt10') < 0, 'extensions with numbers should be in numerical order, not alphabetical order');\n\t\tassert(compareFileExtensions('txt.abc1', 'txt.abc1') === 0, 'equal extensions with numbers should be equal');\n\t\tassert(compareFileExtensions('txt.abc1', 'txt.abc2') < 0, 'extensions with numbers should be in numerical order, not alphabetical order');\n\t\tassert(compareFileExtensions('txt.abc2', 'txt.abc10') < 0, 'extensions with numbers should be in numerical order even when they are multiple digits long');\n\t\tassert(compareFileExtensions('a.ext1', 'b.ext1') < 0, 'if equal extensions with numbers, filenames should be compared');\n\t\tassert(compareFileExtensions('a10.txt', 'A2.txt') > 0, 'filenames with number and case differences compare numerically');\n\n\t\t//\n\t\t// Comparisons with different results from compareFileExtensionsDefault\n\t\t//\n\n\t\t// name-only comparisions\n\t\tassert(compareFileExtensions('a', 'A') !== compareLocale('a', 'A'), 'the same letter of different case does not sort by locale');\n\t\tassert(compareFileExtensions('â', 'Â') !== compareLocale('â', 'Â'), 'the same accented letter of different case does not sort by locale');\n\t\tassert.notDeepStrictEqual(['artichoke', 'Artichoke', 'art', 'Art'].sort(compareFileExtensions), ['artichoke', 'Artichoke', 'art', 'Art'].sort(compareLocale), 'words with the same root and different cases do not sort in locale order');\n\t\tassert.notDeepStrictEqual(['email', 'Email', 'émail', 'Émail'].sort(compareFileExtensions), ['email', 'Email', 'émail', 'Émail'].sort((a, b) => a.localeCompare(b)), 'the same base characters with different case or accents do not sort in locale order');\n\n\t\t// name plus extension comparisons\n\t\tassert(compareFileExtensions('a.MD', 'a.md') !== compareLocale('MD', 'md'), 'case differences in extensions do not sort by locale');\n\t\tassert(compareFileExtensions('a.md', 'A.md') !== compareLocale('a', 'A'), 'case differences in names do not sort by locale');\n\t\tassert(compareFileExtensions('aggregate.go', 'aggregate_repo.go') < 0, 'when extensions are equal, names sort in dictionary order');\n\n\t\t// dotfile comparisons\n\t\tassert(compareFileExtensions('.env', '.aaa.env') < 0, 'a dotfile with an extension is treated as a name plus an extension - equal extensions');\n\t\tassert(compareFileExtensions('.env', '.env.aaa') > 0, 'a dotfile with an extension is treated as a name plus an extension - unequal extensions');\n\n\t\t// dotfile vs non-dotfile comparisons\n\t\tassert(compareFileExtensions('.env', 'aaa') > 0, 'filenames without extensions come before dotfiles');\n\t\tassert(compareFileExtensions('.md', 'A.MD') > 0, 'a file with an uppercase extension sorts before a dotfile of the same lowercase extension');\n\n\t\t// numeric comparisons\n\t\tassert(compareFileExtensions('abc.txt01', 'abc.txt1') < 0, 'extensions with equal numbers sort in unicode order');\n\t\tassert(compareFileExtensions('art01', 'Art01') !== compareLocaleNumeric('art01', 'Art01'), 'a numerically equivalent word of a different case does not compare by locale');\n\t\tassert(compareFileExtensions('abc02.txt', 'abc002.txt') > 0, 'filenames with equivalent numbers and leading zeros sort in unicode order');\n\t\tassert(compareFileExtensions('txt.abc01', 'txt.abc1') < 0, 'extensions with equivalent numbers sort in unicode order');\n\n\t});\n\n\ttest('compareFileNamesDefault', () => {\n\n\t\t//\n\t\t// Comparisons with the same results as compareFileNames\n\t\t//\n\n\t\t// name-only comparisons\n\t\tassert(compareFileNamesDefault(null, null) === 0, 'null should be equal');\n\t\tassert(compareFileNamesDefault(null, 'abc') < 0, 'null should be come before real values');\n\t\tassert(compareFileNamesDefault('', '') === 0, 'empty should be equal');\n\t\tassert(compareFileNamesDefault('abc', 'abc') === 0, 'equal names should be equal');\n\t\tassert(compareFileNamesDefault('z', 'A') > 0, 'z comes is after A regardless of case');\n\t\tassert(compareFileNamesDefault('Z', 'a') > 0, 'Z comes after a regardless of case');\n\n\t\t// name plus extension comparisons\n\t\tassert(compareFileNamesDefault('file.ext', 'file.ext') === 0, 'equal full names should be equal');\n\t\tassert(compareFileNamesDefault('a.ext', 'b.ext') < 0, 'if equal extensions, filenames should be compared');\n\t\tassert(compareFileNamesDefault('file.aaa', 'file.bbb') < 0, 'files with equal names should be compared by extensions');\n\t\tassert(compareFileNamesDefault('bbb.aaa', 'aaa.bbb') > 0, 'files should be compared by names even if extensions compare differently');\n\t\tassert(compareFileNamesDefault('aggregate.go', 'aggregate_repo.go') > 0, 'compares the whole filename in locale order');\n\n\t\t// dotfile comparisons\n\t\tassert(compareFileNamesDefault('.abc', '.abc') === 0, 'equal dotfile names should be equal');\n\t\tassert(compareFileNamesDefault('.env.', '.gitattributes') < 0, 'filenames starting with dots and with extensions should still sort properly');\n\t\tassert(compareFileNamesDefault('.env', '.aaa.env') > 0, 'dotfiles sort alphabetically when they contain multiple dots');\n\t\tassert(compareFileNamesDefault('.env', '.env.aaa') < 0, 'dotfiles with the same root sort shortest first');\n\t\tassert(compareFileNamesDefault('.aaa_env', '.aaa.env') < 0, 'and underscore in a dotfile name will sort before a dot');\n\n\t\t// dotfile vs non-dotfile comparisons\n\t\tassert(compareFileNamesDefault(null, '.abc') < 0, 'null should come before dotfiles');\n\t\tassert(compareFileNamesDefault('.env', 'aaa') < 0, 'dotfiles come before filenames without extensions');\n\t\tassert(compareFileNamesDefault('.env', 'aaa.env') < 0, 'dotfiles come before filenames with extensions');\n\t\tassert(compareFileNamesDefault('.md', 'A.MD') < 0, 'dotfiles sort before uppercase files');\n\t\tassert(compareFileNamesDefault('.MD', 'a.md') < 0, 'dotfiles sort before lowercase files');\n\n\t\t// numeric comparisons\n\t\tassert(compareFileNamesDefault('1', '1') === 0, 'numerically equal full names should be equal');\n\t\tassert(compareFileNamesDefault('abc1.txt', 'abc1.txt') === 0, 'equal filenames with numbers should be equal');\n\t\tassert(compareFileNamesDefault('abc1.txt', 'abc2.txt') < 0, 'filenames with numbers should be in numerical order, not alphabetical order');\n\t\tassert(compareFileNamesDefault('abc2.txt', 'abc10.txt') < 0, 'filenames with numbers should be in numerical order even when they are multiple digits long');\n\t\tassert(compareFileNamesDefault('abc02.txt', 'abc010.txt') < 0, 'filenames with numbers that have leading zeros sort numerically');\n\t\tassert(compareFileNamesDefault('abc1.10.txt', 'abc1.2.txt') > 0, 'numbers with dots between them are treated as two separate numbers, not one decimal number');\n\n\t\t//\n\t\t// Comparisons with different results than compareFileNames\n\t\t//\n\n\t\t// name-only comparisons\n\t\tassert(compareFileNamesDefault('a', 'A') === compareLocale('a', 'A'), 'the same letter sorts by locale');\n\t\tassert(compareFileNamesDefault('â', 'Â') === compareLocale('â', 'Â'), 'the same accented letter sorts by locale');\n\t\tassert.deepStrictEqual(['email', 'Email', 'émail', 'Émail'].sort(compareFileNamesDefault), ['email', 'Email', 'émail', 'Émail'].sort(compareLocale), 'the same base characters with different case or accents sort in locale order');\n\n\t\t// numeric comparisons\n\t\tassert(compareFileNamesDefault('abc02.txt', 'abc002.txt') < 0, 'filenames with equivalent numbers and leading zeros sort shortest number first');\n\t\tassert(compareFileNamesDefault('abc.txt1', 'abc.txt01') < 0, 'same name plus extensions with equal numbers sort shortest number first');\n\t\tassert(compareFileNamesDefault('art01', 'Art01') === compareLocaleNumeric('art01', 'Art01'), 'a numerically equivalent word of a different case compares numerically based on locale');\n\n\t});\n\n\ttest('compareFileExtensionsDefault', () => {\n\n\t\t//\n\t\t// Comparisons with the same result as compareFileExtensions\n\t\t//\n\n\t\t// name-only comparisons\n\t\tassert(compareFileExtensionsDefault(null, null) === 0, 'null should be equal');\n\t\tassert(compareFileExtensionsDefault(null, 'abc') < 0, 'null should come before real files without extensions');\n\t\tassert(compareFileExtensionsDefault('', '') === 0, 'empty should be equal');\n\t\tassert(compareFileExtensionsDefault('abc', 'abc') === 0, 'equal names should be equal');\n\t\tassert(compareFileExtensionsDefault('z', 'A') > 0, 'z comes after A');\n\t\tassert(compareFileExtensionsDefault('Z', 'a') > 0, 'Z comes after a');\n\n\t\t// name plus extension comparisons\n\t\tassert(compareFileExtensionsDefault('file.ext', 'file.ext') === 0, 'equal full filenames should be equal');\n\t\tassert(compareFileExtensionsDefault('a.ext', 'b.ext') < 0, 'if equal extensions, filenames should be compared');\n\t\tassert(compareFileExtensionsDefault('file.aaa', 'file.bbb') < 0, 'files with equal names should be compared by extensions');\n\t\tassert(compareFileExtensionsDefault('bbb.aaa', 'aaa.bbb') < 0, 'files should be compared by extension first');\n\t\tassert(compareFileExtensionsDefault('agg.go', 'aggrepo.go') < 0, 'shorter names sort before longer names');\n\t\tassert(compareFileExtensionsDefault('a.MD', 'b.md') < 0, 'when extensions are the same except for case, the files sort by name');\n\n\t\t// dotfile comparisons\n\t\tassert(compareFileExtensionsDefault('.abc', '.abc') === 0, 'equal dotfiles should be equal');\n\t\tassert(compareFileExtensionsDefault('.md', '.Gitattributes') > 0, 'dotfiles sort alphabetically regardless of case');\n\n\t\t// dotfile vs non-dotfile comparisons\n\t\tassert(compareFileExtensionsDefault(null, '.abc') < 0, 'null should come before dotfiles');\n\t\tassert(compareFileExtensionsDefault('.env', 'aaa.env') < 0, 'dotfiles come before filenames with extensions');\n\t\tassert(compareFileExtensionsDefault('.MD', 'a.md') < 0, 'dotfiles sort before lowercase files');\n\n\t\t// numeric comparisons\n\t\tassert(compareFileExtensionsDefault('1', '1') === 0, 'numerically equal full names should be equal');\n\t\tassert(compareFileExtensionsDefault('abc1.txt', 'abc1.txt') === 0, 'equal filenames with numbers should be equal');\n\t\tassert(compareFileExtensionsDefault('abc1.txt', 'abc2.txt') < 0, 'filenames with numbers should be in numerical order, not alphabetical order');\n\t\tassert(compareFileExtensionsDefault('abc2.txt', 'abc10.txt') < 0, 'filenames with numbers should be in numerical order');\n\t\tassert(compareFileExtensionsDefault('abc02.txt', 'abc010.txt') < 0, 'filenames with numbers that have leading zeros sort numerically');\n\t\tassert(compareFileExtensionsDefault('abc1.10.txt', 'abc1.2.txt') > 0, 'numbers with dots between them are treated as two separate numbers, not one decimal number');\n\t\tassert(compareFileExtensionsDefault('abc2.txt2', 'abc1.txt10') < 0, 'extensions with numbers should be in numerical order, not alphabetical order');\n\t\tassert(compareFileExtensionsDefault('txt.abc1', 'txt.abc1') === 0, 'equal extensions with numbers should be equal');\n\t\tassert(compareFileExtensionsDefault('txt.abc1', 'txt.abc2') < 0, 'extensions with numbers should be in numerical order, not alphabetical order');\n\t\tassert(compareFileExtensionsDefault('txt.abc2', 'txt.abc10') < 0, 'extensions with numbers should be in numerical order even when they are multiple digits long');\n\t\tassert(compareFileExtensionsDefault('a.ext1', 'b.ext1') < 0, 'if equal extensions with numbers, filenames should be compared');\n\t\tassert(compareFileExtensionsDefault('a10.txt', 'A2.txt') > 0, 'filenames with number and case differences compare numerically');\n\n\t\t//\n\t\t// Comparisons with different results than compareFileExtensions\n\t\t//\n\n\t\t// name-only comparisons\n\t\tassert(compareFileExtensionsDefault('a', 'A') === compareLocale('a', 'A'), 'the same letter of different case sorts by locale');\n\t\tassert(compareFileExtensionsDefault('â', 'Â') === compareLocale('â', 'Â'), 'the same accented letter of different case sorts by locale');\n\t\tassert.deepStrictEqual(['email', 'Email', 'émail', 'Émail'].sort(compareFileExtensionsDefault), ['email', 'Email', 'émail', 'Émail'].sort((a, b) => a.localeCompare(b)), 'the same base characters with different case or accents sort in locale order');\n\n\t\t// name plus extension comparisons\n\t\tassert(compareFileExtensionsDefault('a.MD', 'a.md') === compareLocale('MD', 'md'), 'case differences in extensions sort by locale');\n\t\tassert(compareFileExtensionsDefault('a.md', 'A.md') === compareLocale('a', 'A'), 'case differences in names sort by locale');\n\t\tassert(compareFileExtensionsDefault('aggregate.go', 'aggregate_repo.go') > 0, 'names with the same extension sort in full filename locale order');\n\n\t\t// dotfile comparisons\n\t\tassert(compareFileExtensionsDefault('.env', '.aaa.env') > 0, 'dotfiles sort alphabetically when they contain multiple dots');\n\t\tassert(compareFileExtensionsDefault('.env', '.env.aaa') < 0, 'dotfiles with the same root sort shortest first');\n\n\t\t// dotfile vs non-dotfile comparisons\n\t\tassert(compareFileExtensionsDefault('.env', 'aaa') < 0, 'dotfiles come before filenames without extensions');\n\t\tassert(compareFileExtensionsDefault('.md', 'A.MD') < 0, 'dotfiles sort before uppercase files');\n\n\t\t// numeric comparisons\n\t\tassert(compareFileExtensionsDefault('abc.txt01', 'abc.txt1') > 0, 'extensions with equal numbers should be in shortest-first order');\n\t\tassert(compareFileExtensionsDefault('art01', 'Art01') === compareLocaleNumeric('art01', 'Art01'), 'a numerically equivalent word of a different case compares numerically based on locale');\n\t\tassert(compareFileExtensionsDefault('abc02.txt', 'abc002.txt') < 0, 'filenames with equivalent numbers and leading zeros sort shortest string first');\n\t\tassert(compareFileExtensionsDefault('txt.abc01', 'txt.abc1') > 0, 'extensions with equivalent numbers sort shortest extension first');\n\n\t});\n});\n"]}