{"version":3,"file":"hash.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/test/browser/hash.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { hash, StringSHA1 } from 'vs/base/common/hash';\nimport { sha1Hex } from 'vs/base/browser/hash';\n\nsuite('Hash', () => {\n\ttest('string', () => {\n\t\tassert.strictEqual(hash('hello'), hash('hello'));\n\t\tassert.notStrictEqual(hash('hello'), hash('world'));\n\t\tassert.notStrictEqual(hash('hello'), hash('olleh'));\n\t\tassert.notStrictEqual(hash('hello'), hash('Hello'));\n\t\tassert.notStrictEqual(hash('hello'), hash('Hello '));\n\t\tassert.notStrictEqual(hash('h'), hash('H'));\n\t\tassert.notStrictEqual(hash('-'), hash('_'));\n\t});\n\n\ttest('number', () => {\n\t\tassert.strictEqual(hash(1), hash(1));\n\t\tassert.notStrictEqual(hash(0), hash(1));\n\t\tassert.notStrictEqual(hash(1), hash(-1));\n\t\tassert.notStrictEqual(hash(0x12345678), hash(0x123456789));\n\t});\n\n\ttest('boolean', () => {\n\t\tassert.strictEqual(hash(true), hash(true));\n\t\tassert.notStrictEqual(hash(true), hash(false));\n\t});\n\n\ttest('array', () => {\n\t\tassert.strictEqual(hash([1, 2, 3]), hash([1, 2, 3]));\n\t\tassert.strictEqual(hash(['foo', 'bar']), hash(['foo', 'bar']));\n\t\tassert.strictEqual(hash([]), hash([]));\n\t\tassert.strictEqual(hash([]), hash(new Array()));\n\t\tassert.notStrictEqual(hash(['foo', 'bar']), hash(['bar', 'foo']));\n\t\tassert.notStrictEqual(hash(['foo', 'bar']), hash(['bar', 'foo', null]));\n\t\tassert.notStrictEqual(hash(['foo', 'bar', null]), hash(['bar', 'foo', null]));\n\t\tassert.notStrictEqual(hash(['foo', 'bar']), hash(['bar', 'foo', undefined]));\n\t\tassert.notStrictEqual(hash(['foo', 'bar', undefined]), hash(['bar', 'foo', undefined]));\n\t\tassert.notStrictEqual(hash(['foo', 'bar', null]), hash(['foo', 'bar', undefined]));\n\t});\n\n\ttest('object', () => {\n\t\tassert.strictEqual(hash({}), hash({}));\n\t\tassert.strictEqual(hash({}), hash(Object.create(null)));\n\t\tassert.strictEqual(hash({ 'foo': 'bar' }), hash({ 'foo': 'bar' }));\n\t\tassert.strictEqual(hash({ 'foo': 'bar', 'foo2': undefined }), hash({ 'foo2': undefined, 'foo': 'bar' }));\n\t\tassert.notStrictEqual(hash({ 'foo': 'bar' }), hash({ 'foo': 'bar2' }));\n\t\tassert.notStrictEqual(hash({}), hash([]));\n\t});\n\n\ttest('array - unexpected collision', function () {\n\t\tconst a = hash([undefined, undefined, undefined, undefined, undefined]);\n\t\tconst b = hash([undefined, undefined, 'HHHHHH', [{ line: 0, character: 0 }, { line: 0, character: 0 }], undefined]);\n\t\tassert.notStrictEqual(a, b);\n\t});\n\n\ttest('all different', () => {\n\t\tconst candidates: any[] = [\n\t\t\tnull, undefined, {}, [], 0, false, true, '', ' ', [null], [undefined], [undefined, undefined], { '': undefined }, { [' ']: undefined },\n\t\t\t'ab', 'ba', ['ab']\n\t\t];\n\t\tconst hashes: number[] = candidates.map(hash);\n\t\tfor (let i = 0; i < hashes.length; i++) {\n\t\t\tassert.strictEqual(hashes[i], hash(candidates[i])); // verify that repeated invocation returns the same hash\n\t\t\tfor (let k = i + 1; k < hashes.length; k++) {\n\t\t\t\tassert.notStrictEqual(hashes[i], hashes[k], `Same hash ${hashes[i]} for ${JSON.stringify(candidates[i])} and ${JSON.stringify(candidates[k])}`);\n\t\t\t}\n\t\t}\n\t});\n\n\n\tasync function checkSHA1(str: string, expected: string) {\n\n\t\t// Test with StringSHA1\n\t\tconst hash = new StringSHA1();\n\t\thash.update(str);\n\t\tlet actual = hash.digest();\n\t\tassert.strictEqual(actual, expected);\n\n\t\t// Test with crypto.subtle\n\t\tactual = await sha1Hex(str);\n\t\tassert.strictEqual(actual, expected);\n\t}\n\n\ttest('sha1-1', () => {\n\t\treturn checkSHA1('\\udd56', '9bdb77276c1852e1fb067820472812fcf6084024');\n\t});\n\n\ttest('sha1-2', () => {\n\t\treturn checkSHA1('\\udb52', '9bdb77276c1852e1fb067820472812fcf6084024');\n\t});\n\n\ttest('sha1-3', () => {\n\t\treturn checkSHA1('\\uda02ꑍ', '9b483a471f22fe7e09d83f221871a987244bbd3f');\n\t});\n\n\ttest('sha1-4', () => {\n\t\treturn checkSHA1('hello', 'aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d');\n\t});\n});\n"]}