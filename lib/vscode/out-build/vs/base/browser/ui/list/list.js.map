{"version":3,"file":"list.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/browser/ui/list/list.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IA4EhG,IAAkB,kBAGjB;IAHD,WAAkB,kBAAkB;QACnC,2DAAI,CAAA;QACJ,2DAAI,CAAA;IACL,CAAC,EAHiB,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QAGnC;IAQY,QAAA,qBAAqB,GAAG;QACpC,MAAM,KAA4B,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;QAC7D,MAAM,KAA4B,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;KAC5D,CAAC;IAWF,MAAa,SAAU,SAAQ,KAAK;QAEnC,YAAY,IAAY,EAAE,OAAe;YACxC,KAAK,CAAC,cAAc,IAAI,KAAK,OAAO,EAAE,CAAC,CAAC;QACzC,CAAC;KACD;IALD,8BAKC;IAED,MAAsB,yBAAyB;QAA/C;YAES,UAAK,GAAG,IAAI,OAAO,EAAa,CAAC;QAc1C,CAAC;QAZA,SAAS,CAAC,OAAU;;YACnB,OAAO,MAAA,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,mCAAI,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QAChE,CAAC;QAKD,gBAAgB,CAAC,OAAU,EAAE,MAAc;YAC1C,IAAI,MAAM,GAAG,CAAC,EAAE;gBACf,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;aAChC;QACF,CAAC;KACD;IAhBD,8DAgBC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { GestureEvent } from 'vs/base/browser/touch';\nimport { IKeyboardEvent } from 'vs/base/browser/keyboardEvent';\nimport { IDragAndDropData } from 'vs/base/browser/dnd';\n\nexport interface IListVirtualDelegate<T> {\n\tgetHeight(element: T): number;\n\tgetTemplateId(element: T): string;\n\thasDynamicHeight?(element: T): boolean;\n\tsetDynamicHeight?(element: T, height: number): void;\n}\n\nexport interface IListRenderer<T, TTemplateData> {\n\treadonly templateId: string;\n\trenderTemplate(container: HTMLElement): TTemplateData;\n\trenderElement(element: T, index: number, templateData: TTemplateData, height: number | undefined): void;\n\tdisposeElement?(element: T, index: number, templateData: TTemplateData, height: number | undefined): void;\n\tdisposeTemplate(templateData: TTemplateData): void;\n}\n\nexport interface IListEvent<T> {\n\telements: T[];\n\tindexes: number[];\n\tbrowserEvent?: UIEvent;\n}\n\nexport interface IListMouseEvent<T> {\n\tbrowserEvent: MouseEvent;\n\telement: T | undefined;\n\tindex: number | undefined;\n}\n\nexport interface IListTouchEvent<T> {\n\tbrowserEvent: TouchEvent;\n\telement: T | undefined;\n\tindex: number | undefined;\n}\n\nexport interface IListGestureEvent<T> {\n\tbrowserEvent: GestureEvent;\n\telement: T | undefined;\n\tindex: number | undefined;\n}\n\nexport interface IListDragEvent<T> {\n\tbrowserEvent: DragEvent;\n\telement: T | undefined;\n\tindex: number | undefined;\n}\n\nexport interface IListContextMenuEvent<T> {\n\tbrowserEvent: UIEvent;\n\telement: T | undefined;\n\tindex: number | undefined;\n\tanchor: HTMLElement | { x: number; y: number; };\n}\n\nexport interface IIdentityProvider<T> {\n\tgetId(element: T): { toString(): string; };\n}\n\nexport interface IKeyboardNavigationLabelProvider<T> {\n\n\t/**\n\t * Return a keyboard navigation label(s) which will be used by\n\t * the list for filtering/navigating. Return `undefined` to make\n\t * an element always match.\n\t */\n\tgetKeyboardNavigationLabel(element: T): { toString(): string | undefined; } | { toString(): string | undefined; }[] | undefined;\n}\n\nexport interface IKeyboardNavigationDelegate {\n\tmightProducePrintableCharacter(event: IKeyboardEvent): boolean;\n}\n\nexport const enum ListDragOverEffect {\n\tCopy,\n\tMove\n}\n\nexport interface IListDragOverReaction {\n\taccept: boolean;\n\teffect?: ListDragOverEffect;\n\tfeedback?: number[]; // use -1 for entire list\n}\n\nexport const ListDragOverReactions = {\n\treject(): IListDragOverReaction { return { accept: false }; },\n\taccept(): IListDragOverReaction { return { accept: true }; },\n};\n\nexport interface IListDragAndDrop<T> {\n\tgetDragURI(element: T): string | null;\n\tgetDragLabel?(elements: T[], originalEvent: DragEvent): string | undefined;\n\tonDragStart?(data: IDragAndDropData, originalEvent: DragEvent): void;\n\tonDragOver(data: IDragAndDropData, targetElement: T | undefined, targetIndex: number | undefined, originalEvent: DragEvent): boolean | IListDragOverReaction;\n\tdrop(data: IDragAndDropData, targetElement: T | undefined, targetIndex: number | undefined, originalEvent: DragEvent): void;\n\tonDragEnd?(originalEvent: DragEvent): void;\n}\n\nexport class ListError extends Error {\n\n\tconstructor(user: string, message: string) {\n\t\tsuper(`ListError [${user}] ${message}`);\n\t}\n}\n\nexport abstract class CachedListVirtualDelegate<T extends object> implements IListVirtualDelegate<T> {\n\n\tprivate cache = new WeakMap<T, number>();\n\n\tgetHeight(element: T): number {\n\t\treturn this.cache.get(element) ?? this.estimateHeight(element);\n\t}\n\n\tprotected abstract estimateHeight(element: T): number;\n\tabstract getTemplateId(element: T): string;\n\n\tsetDynamicHeight(element: T, height: number): void {\n\t\tif (height > 0) {\n\t\t\tthis.cache.set(element, height);\n\t\t}\n\t}\n}\n"]}