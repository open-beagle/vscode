{"version":3,"file":"indexTree.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/browser/ui/tree/indexTree.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAWhG,MAAa,SAAiC,SAAQ,2BAAsC;QAI3F,YACC,IAAY,EACZ,SAAsB,EACtB,QAAiC,EACjC,SAA+C,EACvC,WAAc,EACtB,UAA6C,EAAE;YAE/C,KAAK,CAAC,IAAI,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;YAH7C,gBAAW,GAAX,WAAW,CAAG;QAIvB,CAAC;QAED,MAAM,CAAC,QAAkB,EAAE,WAAmB,EAAE,WAAsC,mBAAQ,CAAC,KAAK,EAAE;YACrG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC;QACpD,CAAC;QAED,QAAQ,CAAC,QAAmB;YAC3B,IAAI,QAAQ,KAAK,SAAS,EAAE;gBAC3B,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACrB,OAAO;aACP;YAED,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAC/B,CAAC;QAED,mBAAmB,CAAC,QAAkB,EAAE,MAAc;YACrD,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAClD,CAAC;QAES,WAAW,CAAC,IAAY,EAAE,IAAsC,EAAE,OAA0C;YACrH,OAAO,IAAI,+BAAc,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;QAClE,CAAC;KACD;IAnCD,8BAmCC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./media/tree';\nimport { Iterable } from 'vs/base/common/iterator';\nimport { AbstractTree, IAbstractTreeOptions } from 'vs/base/browser/ui/tree/abstractTree';\nimport { IndexTreeModel, IList } from 'vs/base/browser/ui/tree/indexTreeModel';\nimport { ITreeElement, ITreeModel, ITreeNode, ITreeRenderer } from 'vs/base/browser/ui/tree/tree';\nimport { IListVirtualDelegate } from 'vs/base/browser/ui/list/list';\n\nexport interface IIndexTreeOptions<T, TFilterData = void> extends IAbstractTreeOptions<T, TFilterData> { }\n\nexport class IndexTree<T, TFilterData = void> extends AbstractTree<T, TFilterData, number[]> {\n\n\tprotected override model!: IndexTreeModel<T, TFilterData>;\n\n\tconstructor(\n\t\tuser: string,\n\t\tcontainer: HTMLElement,\n\t\tdelegate: IListVirtualDelegate<T>,\n\t\trenderers: ITreeRenderer<T, TFilterData, any>[],\n\t\tprivate rootElement: T,\n\t\toptions: IIndexTreeOptions<T, TFilterData> = {}\n\t) {\n\t\tsuper(user, container, delegate, renderers, options);\n\t}\n\n\tsplice(location: number[], deleteCount: number, toInsert: Iterable<ITreeElement<T>> = Iterable.empty()): void {\n\t\tthis.model.splice(location, deleteCount, toInsert);\n\t}\n\n\trerender(location?: number[]): void {\n\t\tif (location === undefined) {\n\t\t\tthis.view.rerender();\n\t\t\treturn;\n\t\t}\n\n\t\tthis.model.rerender(location);\n\t}\n\n\tupdateElementHeight(location: number[], height: number): void {\n\t\tthis.model.updateElementHeight(location, height);\n\t}\n\n\tprotected createModel(user: string, view: IList<ITreeNode<T, TFilterData>>, options: IIndexTreeOptions<T, TFilterData>): ITreeModel<T, TFilterData, number[]> {\n\t\treturn new IndexTreeModel(user, view, this.rootElement, options);\n\t}\n}\n"]}