{"version":3,"file":"tree.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/browser/ui/tree/tree.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAMhG,IAAkB,cAgBjB;IAhBD,WAAkB,cAAc;QAE/B;;WAEG;QACH,uDAAM,CAAA;QAEN;;WAEG;QACH,yDAAO,CAAA;QAEP;;WAEG;QACH,yDAAO,CAAA;IACR,CAAC,EAhBiB,cAAc,GAAd,sBAAc,KAAd,sBAAc,QAgB/B;IAmHD,IAAY,oBAIX;IAJD,WAAY,oBAAoB;QAC/B,qEAAO,CAAA;QACP,qEAAO,CAAA;QACP,qEAAO,CAAA;IACR,CAAC,EAJW,oBAAoB,GAApB,4BAAoB,KAApB,4BAAoB,QAI/B;IAgCD,IAAkB,kBAGjB;IAHD,WAAkB,kBAAkB;QACnC,2DAAI,CAAA;QACJ,uDAAE,CAAA;IACH,CAAC,EAHiB,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QAGnC;IAOY,QAAA,qBAAqB,GAAG;QACpC,cAAc,KAA4B,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,YAAuB,EAAE,CAAC,CAAC,CAAC;QACnG,gBAAgB,CAAC,UAAU,GAAG,KAAK,IAA2B,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,cAAyB,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;QACrI,kBAAkB,KAA4B,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,YAAuB,EAAE,MAAM,cAAyB,EAAE,CAAC,CAAC,CAAC;QACxI,oBAAoB,CAAC,UAAU,GAAG,KAAK,IAA2B,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,cAAyB,EAAE,MAAM,cAAyB,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;KAC1K,CAAC;IAMF,MAAa,SAAU,SAAQ,KAAK;QAEnC,YAAY,IAAY,EAAE,OAAe;YACxC,KAAK,CAAC,cAAc,IAAI,KAAK,OAAO,EAAE,CAAC,CAAC;QACzC,CAAC;KACD;IALD,8BAKC;IAED,MAAa,UAAU;QAEtB,YAAoB,EAAe;YAAf,OAAE,GAAF,EAAE,CAAa;YAE3B,SAAI,GAAG,IAAI,OAAO,EAAQ,CAAC;QAFI,CAAC;QAIxC,GAAG,CAAC,GAAM;YACT,IAAI,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAEhC,IAAI,CAAC,MAAM,EAAE;gBACZ,MAAM,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACtB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;aAC3B;YAED,OAAO,MAAM,CAAC;QACf,CAAC;KACD;IAhBD,gCAgBC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { IListRenderer, IListDragOverReaction, IListDragAndDrop, ListDragOverEffect } from 'vs/base/browser/ui/list/list';\nimport { IDragAndDropData } from 'vs/base/browser/dnd';\n\nexport const enum TreeVisibility {\n\n\t/**\n\t * The tree node should be hidden.\n\t */\n\tHidden,\n\n\t/**\n\t * The tree node should be visible.\n\t */\n\tVisible,\n\n\t/**\n\t * The tree node should be visible if any of its descendants is visible.\n\t */\n\tRecurse\n}\n\n/**\n * A composed filter result containing the visibility result as well as\n * metadata.\n */\nexport interface ITreeFilterDataResult<TFilterData> {\n\n\t/**\n\t * Whether the node should be visible.\n\t */\n\tvisibility: boolean | TreeVisibility;\n\n\t/**\n\t * Metadata about the element's visibility which gets forwarded to the\n\t * renderer once the element gets rendered.\n\t */\n\tdata: TFilterData;\n}\n\n/**\n * The result of a filter call can be a boolean value indicating whether\n * the element should be visible or not, a value of type `TreeVisibility` or\n * an object composed of the visibility result as well as additional metadata\n * which gets forwarded to the renderer once the element gets rendered.\n */\nexport type TreeFilterResult<TFilterData> = boolean | TreeVisibility | ITreeFilterDataResult<TFilterData>;\n\n/**\n * A tree filter is responsible for controlling the visibility of\n * elements in a tree.\n */\nexport interface ITreeFilter<T, TFilterData = void> {\n\n\t/**\n\t * Returns whether this elements should be visible and, if affirmative,\n\t * additional metadata which gets forwarded to the renderer once the element\n\t * gets rendered.\n\t *\n\t * @param element The tree element.\n\t */\n\tfilter(element: T, parentVisibility: TreeVisibility): TreeFilterResult<TFilterData>;\n}\n\nexport interface ITreeSorter<T> {\n\tcompare(element: T, otherElement: T): number;\n}\n\nexport interface ITreeElement<T> {\n\treadonly element: T;\n\treadonly children?: Iterable<ITreeElement<T>>;\n\treadonly collapsible?: boolean;\n\treadonly collapsed?: boolean;\n}\n\nexport interface ITreeNode<T, TFilterData = void> {\n\treadonly element: T;\n\treadonly children: ITreeNode<T, TFilterData>[];\n\treadonly depth: number;\n\treadonly visibleChildrenCount: number;\n\treadonly visibleChildIndex: number;\n\treadonly collapsible: boolean;\n\treadonly collapsed: boolean;\n\treadonly visible: boolean;\n\treadonly filterData: TFilterData | undefined;\n}\n\nexport interface ICollapseStateChangeEvent<T, TFilterData> {\n\tnode: ITreeNode<T, TFilterData>;\n\tdeep: boolean;\n}\n\nexport interface ITreeModelSpliceEvent<T, TFilterData> {\n\tinsertedNodes: ITreeNode<T, TFilterData>[];\n\tdeletedNodes: ITreeNode<T, TFilterData>[];\n}\n\nexport interface ITreeModel<T, TFilterData, TRef> {\n\treadonly rootRef: TRef;\n\n\treadonly onDidSplice: Event<ITreeModelSpliceEvent<T, TFilterData>>;\n\treadonly onDidChangeCollapseState: Event<ICollapseStateChangeEvent<T, TFilterData>>;\n\treadonly onDidChangeRenderNodeCount: Event<ITreeNode<T, TFilterData>>;\n\n\thas(location: TRef): boolean;\n\n\tgetListIndex(location: TRef): number;\n\tgetListRenderCount(location: TRef): number;\n\tgetNode(location?: TRef): ITreeNode<T, any>;\n\tgetNodeLocation(node: ITreeNode<T, any>): TRef;\n\tgetParentNodeLocation(location: TRef): TRef | undefined;\n\n\tgetFirstElementChild(location: TRef): T | undefined;\n\tgetLastElementAncestor(location?: TRef): T | undefined;\n\n\tisCollapsible(location: TRef): boolean;\n\tsetCollapsible(location: TRef, collapsible?: boolean): boolean;\n\tisCollapsed(location: TRef): boolean;\n\tsetCollapsed(location: TRef, collapsed?: boolean, recursive?: boolean): boolean;\n\texpandTo(location: TRef): void;\n\n\trerender(location: TRef): void;\n\trefilter(): void;\n}\n\nexport interface ITreeRenderer<T, TFilterData = void, TTemplateData = void> extends IListRenderer<ITreeNode<T, TFilterData>, TTemplateData> {\n\trenderTwistie?(element: T, twistieElement: HTMLElement): boolean;\n\tonDidChangeTwistieState?: Event<T>;\n}\n\nexport interface ITreeEvent<T> {\n\telements: T[];\n\tbrowserEvent?: UIEvent;\n}\n\nexport enum TreeMouseEventTarget {\n\tUnknown,\n\tTwistie,\n\tElement\n}\n\nexport interface ITreeMouseEvent<T> {\n\tbrowserEvent: MouseEvent;\n\telement: T | null;\n\ttarget: TreeMouseEventTarget;\n}\n\nexport interface ITreeContextMenuEvent<T> {\n\tbrowserEvent: UIEvent;\n\telement: T | null;\n\tanchor: HTMLElement | { x: number; y: number; };\n}\n\nexport interface ITreeNavigator<T> {\n\tcurrent(): T | null;\n\tprevious(): T | null;\n\tfirst(): T | null;\n\tlast(): T | null;\n\tnext(): T | null;\n}\n\nexport interface IDataSource<TInput, T> {\n\thasChildren?(element: TInput | T): boolean;\n\tgetChildren(element: TInput | T): Iterable<T>;\n}\n\nexport interface IAsyncDataSource<TInput, T> {\n\thasChildren(element: TInput | T): boolean;\n\tgetChildren(element: TInput | T): Iterable<T> | Promise<Iterable<T>>;\n}\n\nexport const enum TreeDragOverBubble {\n\tDown,\n\tUp\n}\n\nexport interface ITreeDragOverReaction extends IListDragOverReaction {\n\tbubble?: TreeDragOverBubble;\n\tautoExpand?: boolean;\n}\n\nexport const TreeDragOverReactions = {\n\tacceptBubbleUp(): ITreeDragOverReaction { return { accept: true, bubble: TreeDragOverBubble.Up }; },\n\tacceptBubbleDown(autoExpand = false): ITreeDragOverReaction { return { accept: true, bubble: TreeDragOverBubble.Down, autoExpand }; },\n\tacceptCopyBubbleUp(): ITreeDragOverReaction { return { accept: true, bubble: TreeDragOverBubble.Up, effect: ListDragOverEffect.Copy }; },\n\tacceptCopyBubbleDown(autoExpand = false): ITreeDragOverReaction { return { accept: true, bubble: TreeDragOverBubble.Down, effect: ListDragOverEffect.Copy, autoExpand }; }\n};\n\nexport interface ITreeDragAndDrop<T> extends IListDragAndDrop<T> {\n\tonDragOver(data: IDragAndDropData, targetElement: T | undefined, targetIndex: number | undefined, originalEvent: DragEvent): boolean | ITreeDragOverReaction;\n}\n\nexport class TreeError extends Error {\n\n\tconstructor(user: string, message: string) {\n\t\tsuper(`TreeError [${user}] ${message}`);\n\t}\n}\n\nexport class WeakMapper<K extends object, V> {\n\n\tconstructor(private fn: (k: K) => V) { }\n\n\tprivate _map = new WeakMap<K, V>();\n\n\tmap(key: K): V {\n\t\tlet result = this._map.get(key);\n\n\t\tif (!result) {\n\t\t\tresult = this.fn(key);\n\t\t\tthis._map.set(key, result);\n\t\t}\n\n\t\treturn result;\n\t}\n}\n"]}