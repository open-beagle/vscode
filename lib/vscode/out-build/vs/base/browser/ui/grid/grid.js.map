{"version":3,"file":"grid.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/browser/ui/grid/grid.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./gridview';\nimport { Orientation } from 'vs/base/browser/ui/sash/sash';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { tail2 as tail, equals } from 'vs/base/common/arrays';\nimport { orthogonal, IView as IGridViewView, GridView, Sizing as GridViewSizing, Box, IGridViewStyles, IViewSize, IGridViewOptions, IBoundarySashes } from './gridview';\nimport { Event } from 'vs/base/common/event';\n\nexport { Orientation, IViewSize, orthogonal, LayoutPriority } from './gridview';\n\nexport const enum Direction {\n\tUp,\n\tDown,\n\tLeft,\n\tRight\n}\n\nfunction oppositeDirection(direction: Direction): Direction {\n\tswitch (direction) {\n\t\tcase Direction.Up: return Direction.Down;\n\t\tcase Direction.Down: return Direction.Up;\n\t\tcase Direction.Left: return Direction.Right;\n\t\tcase Direction.Right: return Direction.Left;\n\t}\n}\n\nexport interface IView extends IGridViewView {\n\treadonly preferredHeight?: number;\n\treadonly preferredWidth?: number;\n}\n\nexport interface GridLeafNode<T extends IView> {\n\treadonly view: T;\n\treadonly box: Box;\n\treadonly cachedVisibleSize: number | undefined;\n}\n\nexport interface GridBranchNode<T extends IView> {\n\treadonly children: GridNode<T>[];\n\treadonly box: Box;\n}\n\nexport type GridNode<T extends IView> = GridLeafNode<T> | GridBranchNode<T>;\n\nexport function isGridBranchNode<T extends IView>(node: GridNode<T>): node is GridBranchNode<T> {\n\treturn !!(node as any).children;\n}\n\nfunction getGridNode<T extends IView>(node: GridNode<T>, location: number[]): GridNode<T> {\n\tif (location.length === 0) {\n\t\treturn node;\n\t}\n\n\tif (!isGridBranchNode(node)) {\n\t\tthrow new Error('Invalid location');\n\t}\n\n\tconst [index, ...rest] = location;\n\treturn getGridNode(node.children[index], rest);\n}\n\ninterface Range {\n\treadonly start: number;\n\treadonly end: number;\n}\n\nfunction intersects(one: Range, other: Range): boolean {\n\treturn !(one.start >= other.end || other.start >= one.end);\n}\n\ninterface Boundary {\n\treadonly offset: number;\n\treadonly range: Range;\n}\n\nfunction getBoxBoundary(box: Box, direction: Direction): Boundary {\n\tconst orientation = getDirectionOrientation(direction);\n\tconst offset = direction === Direction.Up ? box.top :\n\t\tdirection === Direction.Right ? box.left + box.width :\n\t\t\tdirection === Direction.Down ? box.top + box.height :\n\t\t\t\tbox.left;\n\n\tconst range = {\n\t\tstart: orientation === Orientation.HORIZONTAL ? box.top : box.left,\n\t\tend: orientation === Orientation.HORIZONTAL ? box.top + box.height : box.left + box.width\n\t};\n\n\treturn { offset, range };\n}\n\nfunction findAdjacentBoxLeafNodes<T extends IView>(boxNode: GridNode<T>, direction: Direction, boundary: Boundary): GridLeafNode<T>[] {\n\tconst result: GridLeafNode<T>[] = [];\n\n\tfunction _(boxNode: GridNode<T>, direction: Direction, boundary: Boundary): void {\n\t\tif (isGridBranchNode(boxNode)) {\n\t\t\tfor (const child of boxNode.children) {\n\t\t\t\t_(child, direction, boundary);\n\t\t\t}\n\t\t} else {\n\t\t\tconst { offset, range } = getBoxBoundary(boxNode.box, direction);\n\n\t\t\tif (offset === boundary.offset && intersects(range, boundary.range)) {\n\t\t\t\tresult.push(boxNode);\n\t\t\t}\n\t\t}\n\t}\n\n\t_(boxNode, direction, boundary);\n\treturn result;\n}\n\nfunction getLocationOrientation(rootOrientation: Orientation, location: number[]): Orientation {\n\treturn location.length % 2 === 0 ? orthogonal(rootOrientation) : rootOrientation;\n}\n\nfunction getDirectionOrientation(direction: Direction): Orientation {\n\treturn direction === Direction.Up || direction === Direction.Down ? Orientation.VERTICAL : Orientation.HORIZONTAL;\n}\n\nexport function getRelativeLocation(rootOrientation: Orientation, location: number[], direction: Direction): number[] {\n\tconst orientation = getLocationOrientation(rootOrientation, location);\n\tconst directionOrientation = getDirectionOrientation(direction);\n\n\tif (orientation === directionOrientation) {\n\t\tlet [rest, index] = tail(location);\n\n\t\tif (direction === Direction.Right || direction === Direction.Down) {\n\t\t\tindex += 1;\n\t\t}\n\n\t\treturn [...rest, index];\n\t} else {\n\t\tconst index = (direction === Direction.Right || direction === Direction.Down) ? 1 : 0;\n\t\treturn [...location, index];\n\t}\n}\n\nfunction indexInParent(element: HTMLElement): number {\n\tconst parentElement = element.parentElement;\n\n\tif (!parentElement) {\n\t\tthrow new Error('Invalid grid element');\n\t}\n\n\tlet el = parentElement.firstElementChild;\n\tlet index = 0;\n\n\twhile (el !== element && el !== parentElement.lastElementChild && el) {\n\t\tel = el.nextElementSibling;\n\t\tindex++;\n\t}\n\n\treturn index;\n}\n\n/**\n * Find the grid location of a specific DOM element by traversing the parent\n * chain and finding each child index on the way.\n *\n * This will break as soon as DOM structures of the Splitview or Gridview change.\n */\nfunction getGridLocation(element: HTMLElement): number[] {\n\tconst parentElement = element.parentElement;\n\n\tif (!parentElement) {\n\t\tthrow new Error('Invalid grid element');\n\t}\n\n\tif (/\\bmonaco-grid-view\\b/.test(parentElement.className)) {\n\t\treturn [];\n\t}\n\n\tconst index = indexInParent(parentElement);\n\tconst ancestor = parentElement.parentElement!.parentElement!.parentElement!.parentElement!;\n\treturn [...getGridLocation(ancestor), index];\n}\n\nexport type DistributeSizing = { type: 'distribute' };\nexport type SplitSizing = { type: 'split' };\nexport type InvisibleSizing = { type: 'invisible', cachedVisibleSize: number };\nexport type Sizing = DistributeSizing | SplitSizing | InvisibleSizing;\n\nexport namespace Sizing {\n\texport const Distribute: DistributeSizing = { type: 'distribute' };\n\texport const Split: SplitSizing = { type: 'split' };\n\texport function Invisible(cachedVisibleSize: number): InvisibleSizing { return { type: 'invisible', cachedVisibleSize }; }\n}\n\nexport interface IGridStyles extends IGridViewStyles { }\n\nexport interface IGridOptions extends IGridViewOptions {\n\treadonly firstViewVisibleCachedSize?: number;\n}\n\nexport class Grid<T extends IView = IView> extends Disposable {\n\n\tprotected gridview: GridView;\n\tprivate views = new Map<T, HTMLElement>();\n\tget orientation(): Orientation { return this.gridview.orientation; }\n\tset orientation(orientation: Orientation) { this.gridview.orientation = orientation; }\n\n\tget width(): number { return this.gridview.width; }\n\tget height(): number { return this.gridview.height; }\n\n\tget minimumWidth(): number { return this.gridview.minimumWidth; }\n\tget minimumHeight(): number { return this.gridview.minimumHeight; }\n\tget maximumWidth(): number { return this.gridview.maximumWidth; }\n\tget maximumHeight(): number { return this.gridview.maximumHeight; }\n\tget onDidChange(): Event<{ width: number; height: number; } | undefined> { return this.gridview.onDidChange; }\n\n\tget boundarySashes(): IBoundarySashes { return this.gridview.boundarySashes; }\n\tset boundarySashes(boundarySashes: IBoundarySashes) { this.gridview.boundarySashes = boundarySashes; }\n\n\tset edgeSnapping(edgeSnapping: boolean) { this.gridview.edgeSnapping = edgeSnapping; }\n\n\tget element(): HTMLElement { return this.gridview.element; }\n\n\tprivate didLayout = false;\n\n\tconstructor(gridview: GridView, options?: IGridOptions);\n\tconstructor(view: T, options?: IGridOptions);\n\tconstructor(view: T | GridView, options: IGridOptions = {}) {\n\t\tsuper();\n\n\t\tif (view instanceof GridView) {\n\t\t\tthis.gridview = view;\n\t\t\tthis.gridview.getViewMap(this.views);\n\t\t} else {\n\t\t\tthis.gridview = new GridView(options);\n\t\t}\n\t\tthis._register(this.gridview);\n\n\t\tthis._register(this.gridview.onDidSashReset(this.onDidSashReset, this));\n\n\t\tconst size: number | GridViewSizing = typeof options.firstViewVisibleCachedSize === 'number'\n\t\t\t? GridViewSizing.Invisible(options.firstViewVisibleCachedSize)\n\t\t\t: 0;\n\n\t\tif (!(view instanceof GridView)) {\n\t\t\tthis._addView(view, size, [0]);\n\t\t}\n\t}\n\n\tstyle(styles: IGridStyles): void {\n\t\tthis.gridview.style(styles);\n\t}\n\n\tlayout(width: number, height: number): void {\n\t\tthis.gridview.layout(width, height);\n\t\tthis.didLayout = true;\n\t}\n\n\thasView(view: T): boolean {\n\t\treturn this.views.has(view);\n\t}\n\n\taddView(newView: T, size: number | Sizing, referenceView: T, direction: Direction): void {\n\t\tif (this.views.has(newView)) {\n\t\t\tthrow new Error('Can\\'t add same view twice');\n\t\t}\n\n\t\tconst orientation = getDirectionOrientation(direction);\n\n\t\tif (this.views.size === 1 && this.orientation !== orientation) {\n\t\t\tthis.orientation = orientation;\n\t\t}\n\n\t\tconst referenceLocation = this.getViewLocation(referenceView);\n\t\tconst location = getRelativeLocation(this.gridview.orientation, referenceLocation, direction);\n\n\t\tlet viewSize: number | GridViewSizing;\n\n\t\tif (typeof size === 'number') {\n\t\t\tviewSize = size;\n\t\t} else if (size.type === 'split') {\n\t\t\tconst [, index] = tail(referenceLocation);\n\t\t\tviewSize = GridViewSizing.Split(index);\n\t\t} else if (size.type === 'distribute') {\n\t\t\tviewSize = GridViewSizing.Distribute;\n\t\t} else {\n\t\t\tviewSize = size;\n\t\t}\n\n\t\tthis._addView(newView, viewSize, location);\n\t}\n\n\taddViewAt(newView: T, size: number | DistributeSizing | InvisibleSizing, location: number[]): void {\n\t\tif (this.views.has(newView)) {\n\t\t\tthrow new Error('Can\\'t add same view twice');\n\t\t}\n\n\t\tlet viewSize: number | GridViewSizing;\n\n\t\tif (typeof size === 'number') {\n\t\t\tviewSize = size;\n\t\t} else if (size.type === 'distribute') {\n\t\t\tviewSize = GridViewSizing.Distribute;\n\t\t} else {\n\t\t\tviewSize = size;\n\t\t}\n\n\t\tthis._addView(newView, viewSize, location);\n\t}\n\n\tprotected _addView(newView: T, size: number | GridViewSizing, location: number[]): void {\n\t\tthis.views.set(newView, newView.element);\n\t\tthis.gridview.addView(newView, size, location);\n\t}\n\n\tremoveView(view: T, sizing?: Sizing): void {\n\t\tif (this.views.size === 1) {\n\t\t\tthrow new Error('Can\\'t remove last view');\n\t\t}\n\n\t\tconst location = this.getViewLocation(view);\n\t\tthis.gridview.removeView(location, (sizing && sizing.type === 'distribute') ? GridViewSizing.Distribute : undefined);\n\t\tthis.views.delete(view);\n\t}\n\n\tmoveView(view: T, sizing: number | Sizing, referenceView: T, direction: Direction): void {\n\t\tconst sourceLocation = this.getViewLocation(view);\n\t\tconst [sourceParentLocation, from] = tail(sourceLocation);\n\n\t\tconst referenceLocation = this.getViewLocation(referenceView);\n\t\tconst targetLocation = getRelativeLocation(this.gridview.orientation, referenceLocation, direction);\n\t\tconst [targetParentLocation, to] = tail(targetLocation);\n\n\t\tif (equals(sourceParentLocation, targetParentLocation)) {\n\t\t\tthis.gridview.moveView(sourceParentLocation, from, to);\n\t\t} else {\n\t\t\tthis.removeView(view, typeof sizing === 'number' ? undefined : sizing);\n\t\t\tthis.addView(view, sizing, referenceView, direction);\n\t\t}\n\t}\n\n\tmoveViewTo(view: T, location: number[]): void {\n\t\tconst sourceLocation = this.getViewLocation(view);\n\t\tconst [sourceParentLocation, from] = tail(sourceLocation);\n\t\tconst [targetParentLocation, to] = tail(location);\n\n\t\tif (equals(sourceParentLocation, targetParentLocation)) {\n\t\t\tthis.gridview.moveView(sourceParentLocation, from, to);\n\t\t} else {\n\t\t\tconst size = this.getViewSize(view);\n\t\t\tconst orientation = getLocationOrientation(this.gridview.orientation, sourceLocation);\n\t\t\tconst cachedViewSize = this.getViewCachedVisibleSize(view);\n\t\t\tconst sizing = typeof cachedViewSize === 'undefined'\n\t\t\t\t? (orientation === Orientation.HORIZONTAL ? size.width : size.height)\n\t\t\t\t: Sizing.Invisible(cachedViewSize);\n\n\t\t\tthis.removeView(view);\n\t\t\tthis.addViewAt(view, sizing, location);\n\t\t}\n\t}\n\n\tswapViews(from: T, to: T): void {\n\t\tconst fromLocation = this.getViewLocation(from);\n\t\tconst toLocation = this.getViewLocation(to);\n\t\treturn this.gridview.swapViews(fromLocation, toLocation);\n\t}\n\n\tresizeView(view: T, size: IViewSize): void {\n\t\tconst location = this.getViewLocation(view);\n\t\treturn this.gridview.resizeView(location, size);\n\t}\n\n\tgetViewSize(view?: T): IViewSize {\n\t\tif (!view) {\n\t\t\treturn this.gridview.getViewSize();\n\t\t}\n\n\t\tconst location = this.getViewLocation(view);\n\t\treturn this.gridview.getViewSize(location);\n\t}\n\n\tgetViewCachedVisibleSize(view: T): number | undefined {\n\t\tconst location = this.getViewLocation(view);\n\t\treturn this.gridview.getViewCachedVisibleSize(location);\n\t}\n\n\tmaximizeViewSize(view: T): void {\n\t\tconst location = this.getViewLocation(view);\n\t\tthis.gridview.maximizeViewSize(location);\n\t}\n\n\tdistributeViewSizes(): void {\n\t\tthis.gridview.distributeViewSizes();\n\t}\n\n\tisViewVisible(view: T): boolean {\n\t\tconst location = this.getViewLocation(view);\n\t\treturn this.gridview.isViewVisible(location);\n\t}\n\n\tsetViewVisible(view: T, visible: boolean): void {\n\t\tconst location = this.getViewLocation(view);\n\t\tthis.gridview.setViewVisible(location, visible);\n\t}\n\n\tgetViews(): GridBranchNode<T> {\n\t\treturn this.gridview.getView() as GridBranchNode<T>;\n\t}\n\n\tgetNeighborViews(view: T, direction: Direction, wrap: boolean = false): T[] {\n\t\tif (!this.didLayout) {\n\t\t\tthrow new Error('Can\\'t call getNeighborViews before first layout');\n\t\t}\n\n\t\tconst location = this.getViewLocation(view);\n\t\tconst root = this.getViews();\n\t\tconst node = getGridNode(root, location);\n\t\tlet boundary = getBoxBoundary(node.box, direction);\n\n\t\tif (wrap) {\n\t\t\tif (direction === Direction.Up && node.box.top === 0) {\n\t\t\t\tboundary = { offset: root.box.top + root.box.height, range: boundary.range };\n\t\t\t} else if (direction === Direction.Right && node.box.left + node.box.width === root.box.width) {\n\t\t\t\tboundary = { offset: 0, range: boundary.range };\n\t\t\t} else if (direction === Direction.Down && node.box.top + node.box.height === root.box.height) {\n\t\t\t\tboundary = { offset: 0, range: boundary.range };\n\t\t\t} else if (direction === Direction.Left && node.box.left === 0) {\n\t\t\t\tboundary = { offset: root.box.left + root.box.width, range: boundary.range };\n\t\t\t}\n\t\t}\n\n\t\treturn findAdjacentBoxLeafNodes(root, oppositeDirection(direction), boundary)\n\t\t\t.map(node => node.view);\n\t}\n\n\tgetViewLocation(view: T): number[] {\n\t\tconst element = this.views.get(view);\n\n\t\tif (!element) {\n\t\t\tthrow new Error('View not found');\n\t\t}\n\n\t\treturn getGridLocation(element);\n\t}\n\n\tprivate onDidSashReset(location: number[]): void {\n\t\tconst resizeToPreferredSize = (location: number[]): boolean => {\n\t\t\tconst node = this.gridview.getView(location) as GridNode<T>;\n\n\t\t\tif (isGridBranchNode(node)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst direction = getLocationOrientation(this.orientation, location);\n\t\t\tconst size = direction === Orientation.HORIZONTAL ? node.view.preferredWidth : node.view.preferredHeight;\n\n\t\t\tif (typeof size !== 'number') {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst viewSize = direction === Orientation.HORIZONTAL ? { width: Math.round(size) } : { height: Math.round(size) };\n\t\t\tthis.gridview.resizeView(location, viewSize);\n\t\t\treturn true;\n\t\t};\n\n\t\tif (resizeToPreferredSize(location)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst [parentLocation, index] = tail(location);\n\n\t\tif (resizeToPreferredSize([...parentLocation, index + 1])) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.gridview.distributeViewSizes(parentLocation);\n\t}\n}\n\nexport interface ISerializableView extends IView {\n\ttoJSON(): object;\n}\n\nexport interface IViewDeserializer<T extends ISerializableView> {\n\tfromJSON(json: any): T;\n}\n\nexport interface ISerializedLeafNode {\n\ttype: 'leaf';\n\tdata: any;\n\tsize: number;\n\tvisible?: boolean;\n}\n\nexport interface ISerializedBranchNode {\n\ttype: 'branch';\n\tdata: ISerializedNode[];\n\tsize: number;\n}\n\nexport type ISerializedNode = ISerializedLeafNode | ISerializedBranchNode;\n\nexport interface ISerializedGrid {\n\troot: ISerializedNode;\n\torientation: Orientation;\n\twidth: number;\n\theight: number;\n}\n\nexport class SerializableGrid<T extends ISerializableView> extends Grid<T> {\n\n\tprivate static serializeNode<T extends ISerializableView>(node: GridNode<T>, orientation: Orientation): ISerializedNode {\n\t\tconst size = orientation === Orientation.VERTICAL ? node.box.width : node.box.height;\n\n\t\tif (!isGridBranchNode(node)) {\n\t\t\tif (typeof node.cachedVisibleSize === 'number') {\n\t\t\t\treturn { type: 'leaf', data: node.view.toJSON(), size: node.cachedVisibleSize, visible: false };\n\t\t\t}\n\n\t\t\treturn { type: 'leaf', data: node.view.toJSON(), size };\n\t\t}\n\n\t\treturn { type: 'branch', data: node.children.map(c => SerializableGrid.serializeNode(c, orthogonal(orientation))), size };\n\t}\n\n\tstatic deserialize<T extends ISerializableView>(json: ISerializedGrid, deserializer: IViewDeserializer<T>, options: IGridOptions = {}): SerializableGrid<T> {\n\t\tif (typeof json.orientation !== 'number') {\n\t\t\tthrow new Error('Invalid JSON: \\'orientation\\' property must be a number.');\n\t\t} else if (typeof json.width !== 'number') {\n\t\t\tthrow new Error('Invalid JSON: \\'width\\' property must be a number.');\n\t\t} else if (typeof json.height !== 'number') {\n\t\t\tthrow new Error('Invalid JSON: \\'height\\' property must be a number.');\n\t\t}\n\n\t\tconst gridview = GridView.deserialize(json, deserializer, options);\n\t\tconst result = new SerializableGrid<T>(gridview, options);\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Useful information in order to proportionally restore view sizes\n\t * upon the very first layout call.\n\t */\n\tprivate initialLayoutContext: boolean = true;\n\n\tserialize(): ISerializedGrid {\n\t\treturn {\n\t\t\troot: SerializableGrid.serializeNode(this.getViews(), this.orientation),\n\t\t\torientation: this.orientation,\n\t\t\twidth: this.width,\n\t\t\theight: this.height\n\t\t};\n\t}\n\n\toverride layout(width: number, height: number): void {\n\t\tsuper.layout(width, height);\n\n\t\tif (this.initialLayoutContext) {\n\t\t\tthis.initialLayoutContext = false;\n\t\t\tthis.gridview.trySet2x2();\n\t\t}\n\t}\n}\n\nexport type GridNodeDescriptor = { size?: number, groups?: GridNodeDescriptor[] };\nexport type GridDescriptor = { orientation: Orientation, groups?: GridNodeDescriptor[] };\n\nexport function sanitizeGridNodeDescriptor(nodeDescriptor: GridNodeDescriptor, rootNode: boolean): void {\n\tif (!rootNode && nodeDescriptor.groups && nodeDescriptor.groups.length <= 1) {\n\t\tnodeDescriptor.groups = undefined;\n\t}\n\n\tif (!nodeDescriptor.groups) {\n\t\treturn;\n\t}\n\n\tlet totalDefinedSize = 0;\n\tlet totalDefinedSizeCount = 0;\n\n\tfor (const child of nodeDescriptor.groups) {\n\t\tsanitizeGridNodeDescriptor(child, false);\n\n\t\tif (child.size) {\n\t\t\ttotalDefinedSize += child.size;\n\t\t\ttotalDefinedSizeCount++;\n\t\t}\n\t}\n\n\tconst totalUndefinedSize = totalDefinedSizeCount > 0 ? totalDefinedSize : 1;\n\tconst totalUndefinedSizeCount = nodeDescriptor.groups.length - totalDefinedSizeCount;\n\tconst eachUndefinedSize = totalUndefinedSize / totalUndefinedSizeCount;\n\n\tfor (const child of nodeDescriptor.groups) {\n\t\tif (!child.size) {\n\t\t\tchild.size = eachUndefinedSize;\n\t\t}\n\t}\n}\n\nfunction createSerializedNode(nodeDescriptor: GridNodeDescriptor): ISerializedNode {\n\tif (nodeDescriptor.groups) {\n\t\treturn { type: 'branch', data: nodeDescriptor.groups.map(c => createSerializedNode(c)), size: nodeDescriptor.size! };\n\t} else {\n\t\treturn { type: 'leaf', data: null, size: nodeDescriptor.size! };\n\t}\n}\n\nfunction getDimensions(node: ISerializedNode, orientation: Orientation): { width?: number, height?: number } {\n\tif (node.type === 'branch') {\n\t\tconst childrenDimensions = node.data.map(c => getDimensions(c, orthogonal(orientation)));\n\n\t\tif (orientation === Orientation.VERTICAL) {\n\t\t\tconst width = node.size || (childrenDimensions.length === 0 ? undefined : Math.max(...childrenDimensions.map(d => d.width || 0)));\n\t\t\tconst height = childrenDimensions.length === 0 ? undefined : childrenDimensions.reduce((r, d) => r + (d.height || 0), 0);\n\t\t\treturn { width, height };\n\t\t} else {\n\t\t\tconst width = childrenDimensions.length === 0 ? undefined : childrenDimensions.reduce((r, d) => r + (d.width || 0), 0);\n\t\t\tconst height = node.size || (childrenDimensions.length === 0 ? undefined : Math.max(...childrenDimensions.map(d => d.height || 0)));\n\t\t\treturn { width, height };\n\t\t}\n\t} else {\n\t\tconst width = orientation === Orientation.VERTICAL ? node.size : undefined;\n\t\tconst height = orientation === Orientation.VERTICAL ? undefined : node.size;\n\t\treturn { width, height };\n\t}\n}\n\nexport function createSerializedGrid(gridDescriptor: GridDescriptor): ISerializedGrid {\n\tsanitizeGridNodeDescriptor(gridDescriptor, true);\n\n\tconst root = createSerializedNode(gridDescriptor);\n\tconst { width, height } = getDimensions(root, gridDescriptor.orientation);\n\n\treturn {\n\t\troot,\n\t\torientation: gridDescriptor.orientation,\n\t\twidth: width || 1,\n\t\theight: height || 1\n\t};\n}\n"]}