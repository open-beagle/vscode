{"version":3,"file":"hoverWidget.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/browser/ui/hover/hoverWidget.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAOhG,MAAM,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;IAEhB,IAAkB,aAEjB;IAFD,WAAkB,aAAa;QAC9B,iDAAI,CAAA;QAAE,mDAAK,CAAA;QAAE,mDAAK,CAAA;QAAE,mDAAK,CAAA;IAC1B,CAAC,EAFiB,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAE9B;IAED,MAAa,WAAY,SAAQ,sBAAU;QAM1C;YACC,KAAK,EAAE,CAAC;YAER,IAAI,CAAC,gBAAgB,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YACtD,IAAI,CAAC,gBAAgB,CAAC,SAAS,GAAG,cAAc,CAAC;YACjD,IAAI,CAAC,gBAAgB,CAAC,QAAQ,GAAG,CAAC,CAAC;YACnC,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;YAEtD,IAAI,CAAC,eAAe,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YACrD,IAAI,CAAC,eAAe,CAAC,SAAS,GAAG,sBAAsB,CAAC;YAExD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,wCAAoB,CAAC,IAAI,CAAC,eAAe,EAAE;gBAC/E,oCAAoC,EAAE,IAAI;aAC1C,CAAC,CAAC,CAAC;YACJ,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC,CAAC;QACjE,CAAC;QAEM,iBAAiB;YACvB,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC;QAC/B,CAAC;KACD;IA1BD,kCA0BC;IAED,SAAgB,iBAAiB,CAAC,MAAmB,EAAE,aAA2G,EAAE,eAA8B;QACjM,MAAM,eAAe,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC;QACtE,MAAM,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,eAAe,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;QAC1D,MAAM,CAAC,YAAY,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;QACjC,MAAM,CAAC,YAAY,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACtC,IAAI,aAAa,CAAC,SAAS,EAAE;YAC5B,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,aAAa,aAAa,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;SAC9D;QACD,MAAM,KAAK,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QAC5C,KAAK,CAAC,WAAW,GAAG,eAAe,CAAC,CAAC,CAAC,GAAG,aAAa,CAAC,KAAK,KAAK,eAAe,GAAG,CAAC,CAAC,CAAC,aAAa,CAAC,KAAK,CAAC;QAC1G,OAAO,GAAG,CAAC,qBAAqB,CAAC,eAAe,EAAE,GAAG,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE;YAC1E,CAAC,CAAC,eAAe,EAAE,CAAC;YACpB,CAAC,CAAC,cAAc,EAAE,CAAC;YACnB,aAAa,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;IACJ,CAAC;IAfD,8CAeC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./hover';\nimport * as dom from 'vs/base/browser/dom';\nimport { IDisposable, Disposable } from 'vs/base/common/lifecycle';\nimport { DomScrollableElement } from 'vs/base/browser/ui/scrollbar/scrollableElement';\n\nconst $ = dom.$;\n\nexport const enum HoverPosition {\n\tLEFT, RIGHT, BELOW, ABOVE\n}\n\nexport class HoverWidget extends Disposable {\n\n\tpublic readonly containerDomNode: HTMLElement;\n\tpublic readonly contentsDomNode: HTMLElement;\n\tprivate readonly _scrollbar: DomScrollableElement;\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.containerDomNode = document.createElement('div');\n\t\tthis.containerDomNode.className = 'monaco-hover';\n\t\tthis.containerDomNode.tabIndex = 0;\n\t\tthis.containerDomNode.setAttribute('role', 'tooltip');\n\n\t\tthis.contentsDomNode = document.createElement('div');\n\t\tthis.contentsDomNode.className = 'monaco-hover-content';\n\n\t\tthis._scrollbar = this._register(new DomScrollableElement(this.contentsDomNode, {\n\t\t\tconsumeMouseWheelIfScrollbarIsNeeded: true\n\t\t}));\n\t\tthis.containerDomNode.appendChild(this._scrollbar.getDomNode());\n\t}\n\n\tpublic onContentsChanged(): void {\n\t\tthis._scrollbar.scanDomNode();\n\t}\n}\n\nexport function renderHoverAction(parent: HTMLElement, actionOptions: { label: string, iconClass?: string, run: (target: HTMLElement) => void, commandId: string }, keybindingLabel: string | null): IDisposable {\n\tconst actionContainer = dom.append(parent, $('div.action-container'));\n\tconst action = dom.append(actionContainer, $('a.action'));\n\taction.setAttribute('href', '#');\n\taction.setAttribute('role', 'button');\n\tif (actionOptions.iconClass) {\n\t\tdom.append(action, $(`span.icon.${actionOptions.iconClass}`));\n\t}\n\tconst label = dom.append(action, $('span'));\n\tlabel.textContent = keybindingLabel ? `${actionOptions.label} (${keybindingLabel})` : actionOptions.label;\n\treturn dom.addDisposableListener(actionContainer, dom.EventType.CLICK, e => {\n\t\te.stopPropagation();\n\t\te.preventDefault();\n\t\tactionOptions.run(actionContainer);\n\t});\n}\n"]}