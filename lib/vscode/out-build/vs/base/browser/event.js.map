{"version":3,"file":"event.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/browser/event.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAWzF,MAAM,QAAQ,GAAc,CAAC,OAAqB,EAAE,IAAY,EAAE,UAAoB,EAAE,EAAE;QAChG,MAAM,EAAE,GAAG,CAAC,CAAQ,EAAE,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACzC,MAAM,OAAO,GAAG,IAAI,eAAO,CAAQ;YAClC,kBAAkB,EAAE,GAAG,EAAE;gBACxB,OAAO,CAAC,gBAAgB,CAAC,IAAI,EAAE,EAAE,EAAE,UAAU,CAAC,CAAC;YAChD,CAAC;YACD,oBAAoB,EAAE,GAAG,EAAE;gBAC1B,OAAO,CAAC,mBAAmB,CAAC,IAAI,EAAE,EAAE,EAAE,UAAU,CAAC,CAAC;YACnD,CAAC;SACD,CAAC,CAAC;QAEH,OAAO,OAAO,CAAC,KAAK,CAAC;IACtB,CAAC,CAAC;IAZW,QAAA,QAAQ,YAYnB;IAOF,SAAgB,SAAS,CAA6B,KAAQ;QAC7D,KAAK,CAAC,cAAc,EAAE,CAAC;QACvB,KAAK,CAAC,eAAe,EAAE,CAAC;QACxB,OAAO,KAAK,CAAC;IACd,CAAC;IAJD,8BAIC;IAED,SAAgB,IAAI,CAA6B,KAAmB;QACnE,OAAO,aAAS,CAAC,GAAG,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;IACxC,CAAC;IAFD,oBAEC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event as BaseEvent, Emitter } from 'vs/base/common/event';\n\nexport type EventHandler = HTMLElement | HTMLDocument | Window;\n\nexport interface IDomEvent {\n\t<K extends keyof HTMLElementEventMap>(element: EventHandler, type: K, useCapture?: boolean): BaseEvent<HTMLElementEventMap[K]>;\n\t(element: EventHandler, type: string, useCapture?: boolean): BaseEvent<unknown>;\n}\n\nexport const domEvent: IDomEvent = (element: EventHandler, type: string, useCapture?: boolean) => {\n\tconst fn = (e: Event) => emitter.fire(e);\n\tconst emitter = new Emitter<Event>({\n\t\tonFirstListenerAdd: () => {\n\t\t\telement.addEventListener(type, fn, useCapture);\n\t\t},\n\t\tonLastListenerRemove: () => {\n\t\t\telement.removeEventListener(type, fn, useCapture);\n\t\t}\n\t});\n\n\treturn emitter.event;\n};\n\nexport interface CancellableEvent {\n\tpreventDefault(): void;\n\tstopPropagation(): void;\n}\n\nexport function stopEvent<T extends CancellableEvent>(event: T): T {\n\tevent.preventDefault();\n\tevent.stopPropagation();\n\treturn event;\n}\n\nexport function stop<T extends CancellableEvent>(event: BaseEvent<T>): BaseEvent<T> {\n\treturn BaseEvent.map(event, stopEvent);\n}\n"]}