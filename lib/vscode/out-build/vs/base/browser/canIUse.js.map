{"version":3,"file":"canIUse.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/browser/canIUse.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAKhG,IAAkB,eAIjB;IAJD,WAAkB,eAAe;QAChC,yDAAM,CAAA;QACN,iEAAU,CAAA;QACV,qDAAI,CAAA;IACL,CAAC,EAJiB,eAAe,GAAf,uBAAe,KAAf,uBAAe,QAIhC;IAED;;OAEG;IACU,QAAA,eAAe,GAAG;QAC9B,SAAS,EAAE;YACV,SAAS,EAAE,CACV,QAAQ,CAAC,QAAQ;mBACd,CAAC,QAAQ,CAAC,qBAAqB,IAAI,QAAQ,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC;mBAC1E,CAAC,CAAC,CAAC,SAAS,IAAI,SAAS,CAAC,SAAS,IAAI,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,CACxE;YACD,QAAQ,EAAE,CACT,QAAQ,CAAC,QAAQ;mBACd,CAAC,CAAC,CAAC,SAAS,IAAI,SAAS,CAAC,SAAS,IAAI,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,CACvE;SACD;QACD,QAAQ,EAAE,CAAC,GAAG,EAAE;YACf,IAAI,QAAQ,CAAC,QAAQ,IAAI,OAAO,CAAC,YAAY,EAAE;gBAC9C,sBAA8B;aAC9B;YAED,IAAU,SAAU,CAAC,QAAQ,IAAI,OAAO,CAAC,QAAQ,EAAE;gBAClD,0BAAkC;aAClC;YAED,oBAA4B;QAC7B,CAAC,CAAC,EAAE;QAEJ,iHAAiH;QACjH,+FAA+F;QAC/F,KAAK,EAAE,cAAc,IAAI,MAAM,IAAI,SAAS,CAAC,cAAc,GAAG,CAAC,IAAK,MAAiB,CAAC,SAAS,CAAC,gBAAgB,GAAG,CAAC;QACpH,aAAa,EAAE,MAAM,CAAC,YAAY,IAAI,CAAC,cAAc,IAAI,MAAM,IAAK,MAAiB,CAAC,SAAS,CAAC,cAAc,GAAG,CAAC,IAAI,SAAS,CAAC,cAAc,GAAG,CAAC,IAAK,MAAiB,CAAC,SAAS,CAAC,gBAAgB,GAAG,CAAC,CAAC;KACxM,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as browser from 'vs/base/browser/browser';\nimport * as platform from 'vs/base/common/platform';\n\nexport const enum KeyboardSupport {\n\tAlways,\n\tFullScreen,\n\tNone\n}\n\n/**\n * Browser feature we can support in current platform, browser and environment.\n */\nexport const BrowserFeatures = {\n\tclipboard: {\n\t\twriteText: (\n\t\t\tplatform.isNative\n\t\t\t|| (document.queryCommandSupported && document.queryCommandSupported('copy'))\n\t\t\t|| !!(navigator && navigator.clipboard && navigator.clipboard.writeText)\n\t\t),\n\t\treadText: (\n\t\t\tplatform.isNative\n\t\t\t|| !!(navigator && navigator.clipboard && navigator.clipboard.readText)\n\t\t)\n\t},\n\tkeyboard: (() => {\n\t\tif (platform.isNative || browser.isStandalone) {\n\t\t\treturn KeyboardSupport.Always;\n\t\t}\n\n\t\tif ((<any>navigator).keyboard || browser.isSafari) {\n\t\t\treturn KeyboardSupport.FullScreen;\n\t\t}\n\n\t\treturn KeyboardSupport.None;\n\t})(),\n\n\t// 'ontouchstart' in window always evaluates to true with typescript's modern typings. This causes `window` to be\n\t// `never` later in `window.navigator`. That's why we need the explicit `window as Window` cast\n\ttouch: 'ontouchstart' in window || navigator.maxTouchPoints > 0 || (window as Window).navigator.msMaxTouchPoints > 0,\n\tpointerEvents: window.PointerEvent && ('ontouchstart' in window || (window as Window).navigator.maxTouchPoints > 0 || navigator.maxTouchPoints > 0 || (window as Window).navigator.msMaxTouchPoints > 0)\n};\n"]}