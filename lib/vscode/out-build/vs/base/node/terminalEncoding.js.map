{"version":3,"file":"terminalEncoding.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/node/terminalEncoding.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/**\n * This code is also used by standalone cli's. Avoid adding dependencies to keep the size of the cli small.\n */\nimport { exec } from 'child_process';\nimport { isWindows } from 'vs/base/common/platform';\n\nconst windowsTerminalEncodings = {\n\t'437': 'cp437', // United States\n\t'850': 'cp850', // Multilingual(Latin I)\n\t'852': 'cp852', // Slavic(Latin II)\n\t'855': 'cp855', // Cyrillic(Russian)\n\t'857': 'cp857', // Turkish\n\t'860': 'cp860', // Portuguese\n\t'861': 'cp861', // Icelandic\n\t'863': 'cp863', // Canadian - French\n\t'865': 'cp865', // Nordic\n\t'866': 'cp866', // Russian\n\t'869': 'cp869', // Modern Greek\n\t'936': 'cp936', // Simplified Chinese\n\t'1252': 'cp1252' // West European Latin\n};\n\nfunction toIconvLiteEncoding(encodingName: string): string {\n\tconst normalizedEncodingName = encodingName.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();\n\tconst mapped = JSCHARDET_TO_ICONV_ENCODINGS[normalizedEncodingName];\n\n\treturn mapped || normalizedEncodingName;\n}\n\nconst JSCHARDET_TO_ICONV_ENCODINGS: { [name: string]: string } = {\n\t'ibm866': 'cp866',\n\t'big5': 'cp950'\n};\n\nconst UTF8 = 'utf8';\n\nexport async function resolveTerminalEncoding(verbose?: boolean): Promise<string> {\n\tlet rawEncodingPromise: Promise<string | undefined>;\n\n\t// Support a global environment variable to win over other mechanics\n\tconst cliEncodingEnv = process.env['VSCODE_CLI_ENCODING'];\n\tif (cliEncodingEnv) {\n\t\tif (verbose) {\n\t\t\tconsole.log(`Found VSCODE_CLI_ENCODING variable: ${cliEncodingEnv}`);\n\t\t}\n\n\t\trawEncodingPromise = Promise.resolve(cliEncodingEnv);\n\t}\n\n\t// Windows: educated guess\n\telse if (isWindows) {\n\t\trawEncodingPromise = new Promise<string | undefined>(resolve => {\n\t\t\tif (verbose) {\n\t\t\t\tconsole.log('Running \"chcp\" to detect terminal encoding...');\n\t\t\t}\n\n\t\t\texec('chcp', (err, stdout, stderr) => {\n\t\t\t\tif (stdout) {\n\t\t\t\t\tif (verbose) {\n\t\t\t\t\t\tconsole.log(`Output from \"chcp\" command is: ${stdout}`);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst windowsTerminalEncodingKeys = Object.keys(windowsTerminalEncodings) as Array<keyof typeof windowsTerminalEncodings>;\n\t\t\t\t\tfor (const key of windowsTerminalEncodingKeys) {\n\t\t\t\t\t\tif (stdout.indexOf(key) >= 0) {\n\t\t\t\t\t\t\treturn resolve(windowsTerminalEncodings[key]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn resolve(undefined);\n\t\t\t});\n\t\t});\n\t}\n\t// Linux/Mac: use \"locale charmap\" command\n\telse {\n\t\trawEncodingPromise = new Promise<string>(resolve => {\n\t\t\tif (verbose) {\n\t\t\t\tconsole.log('Running \"locale charmap\" to detect terminal encoding...');\n\t\t\t}\n\n\t\t\texec('locale charmap', (err, stdout, stderr) => resolve(stdout));\n\t\t});\n\t}\n\n\tconst rawEncoding = await rawEncodingPromise;\n\tif (verbose) {\n\t\tconsole.log(`Detected raw terminal encoding: ${rawEncoding}`);\n\t}\n\n\tif (!rawEncoding || rawEncoding.toLowerCase() === 'utf-8' || rawEncoding.toLowerCase() === UTF8) {\n\t\treturn UTF8;\n\t}\n\n\treturn toIconvLiteEncoding(rawEncoding);\n}\n"]}