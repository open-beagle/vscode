{"version":3,"file":"shell.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/node/shell.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAOhG;;;;OAIG;IACI,KAAK,UAAU,cAAc,CAAC,EAA4B,EAAE,GAAiC;QACnG,IAAI,EAAE,oBAAqC,EAAE;YAC5C,IAAI,QAAQ,CAAC,SAAS,EAAE;gBACvB,OAAO,qBAAqB,EAAE,CAAC;aAC/B;YACD,iDAAiD;YACjD,OAAO,SAAS,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;SACtC;QAED,OAAO,sBAAsB,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;IACxC,CAAC;IAVD,wCAUC;IAED,SAAgB,kBAAkB,CAAC,EAA4B,EAAE,GAAiC;QACjG,IAAI,EAAE,oBAAqC,EAAE;YAC5C,IAAI,QAAQ,CAAC,SAAS,EAAE;gBACvB,OAAO,yBAAyB,CAAC,GAAG,CAAC,CAAC;aACtC;YACD,iDAAiD;YACjD,OAAO,SAAS,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;SACtC;QAED,OAAO,sBAAsB,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;IACxC,CAAC;IAVD,gDAUC;IAED,IAAI,iCAAiC,GAAkB,IAAI,CAAC;IAC5D,SAAS,sBAAsB,CAAC,EAA4B,EAAE,GAAiC;QAC9F,qCAAqC;QACrC,IAAI,QAAQ,CAAC,OAAO,IAAI,EAAE,sBAAuC,IAAI,QAAQ,CAAC,WAAW,IAAI,EAAE,kBAAmC,EAAE;YACnI,OAAO,WAAW,CAAC;SACnB;QAED,IAAI,CAAC,iCAAiC,EAAE;YACvC,IAAI,gBAAoC,CAAC;YACzC,IAAI,QAAQ,CAAC,SAAS,EAAE;gBACvB,gBAAgB,GAAG,WAAW,CAAC,CAAC,UAAU;aAC1C;iBAAM;gBACN,gBAAgB,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC;gBAEhC,IAAI,CAAC,gBAAgB,EAAE;oBACtB,IAAI;wBACH,yHAAyH;wBACzH,0EAA0E;wBAC1E,gBAAgB,GAAG,CAAA,GAAA,aAAQ,CAAA,EAAE,CAAC,KAAK,CAAC;qBACpC;oBAAC,OAAO,GAAG,EAAE,GAAG;iBACjB;gBAED,IAAI,CAAC,gBAAgB,EAAE;oBACtB,gBAAgB,GAAG,IAAI,CAAC;iBACxB;gBAED,uEAAuE;gBACvE,IAAI,gBAAgB,KAAK,YAAY,EAAE;oBACtC,gBAAgB,GAAG,WAAW,CAAC;iBAC/B;aACD;YACD,iCAAiC,GAAG,gBAAgB,CAAC;SACrD;QACD,OAAO,iCAAiC,CAAC;IAC1C,CAAC;IAED,IAAI,+BAA+B,GAAkB,IAAI,CAAC;IAC1D,KAAK,UAAU,qBAAqB;QACnC,IAAI,CAAC,+BAA+B,EAAE;YACrC,+BAA+B,GAAG,CAAC,MAAM,CAAA,GAAA,oDAAuC,CAAA,EAAE,CAAE,CAAC,OAAO,CAAC;SAC7F;QACD,OAAO,+BAA+B,CAAC;IACxC,CAAC;IAED,SAAS,yBAAyB,CAAC,GAAiC;QACnE,IAAI,+BAA+B,EAAE;YACpC,OAAO,+BAA+B,CAAC;SACvC;QAED,MAAM,kBAAkB,GAAG,QAAQ,CAAC,SAAS,IAAI,UAAU,CAAC,CAAA,GAAA,YAAO,CAAA,EAAE,CAAC,IAAI,EAAE,CAAC;QAC7E,MAAM,sBAAsB,GAAG,GAAG,CAAC,cAAc,CAAC,wBAAwB,CAAC,CAAC;QAC5E,MAAM,cAAc,GAAG,GAAG,GAAG,CAAC,QAAQ,CAAC,KAAK,sBAAsB,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,UAAU,2CAA2C,CAAC;QACzI,OAAO,kBAAkB,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,SAAS,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;IAC7E,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { release, userInfo } from 'os';\nimport * as platform from 'vs/base/common/platform';\nimport { getFirstAvailablePowerShellInstallation } from 'vs/base/node/powershell';\nimport * as processes from 'vs/base/node/processes';\n\n/**\n * Gets the detected default shell for the _system_, not to be confused with VS Code's _default_\n * shell that the terminal uses by default.\n * @param os The platform to detect the shell of.\n */\nexport async function getSystemShell(os: platform.OperatingSystem, env: platform.IProcessEnvironment): Promise<string> {\n\tif (os === platform.OperatingSystem.Windows) {\n\t\tif (platform.isWindows) {\n\t\t\treturn getSystemShellWindows();\n\t\t}\n\t\t// Don't detect Windows shell when not on Windows\n\t\treturn processes.getWindowsShell(env);\n\t}\n\n\treturn getSystemShellUnixLike(os, env);\n}\n\nexport function getSystemShellSync(os: platform.OperatingSystem, env: platform.IProcessEnvironment): string {\n\tif (os === platform.OperatingSystem.Windows) {\n\t\tif (platform.isWindows) {\n\t\t\treturn getSystemShellWindowsSync(env);\n\t\t}\n\t\t// Don't detect Windows shell when not on Windows\n\t\treturn processes.getWindowsShell(env);\n\t}\n\n\treturn getSystemShellUnixLike(os, env);\n}\n\nlet _TERMINAL_DEFAULT_SHELL_UNIX_LIKE: string | null = null;\nfunction getSystemShellUnixLike(os: platform.OperatingSystem, env: platform.IProcessEnvironment): string {\n\t// Only use $SHELL for the current OS\n\tif (platform.isLinux && os === platform.OperatingSystem.Macintosh || platform.isMacintosh && os === platform.OperatingSystem.Linux) {\n\t\treturn '/bin/bash';\n\t}\n\n\tif (!_TERMINAL_DEFAULT_SHELL_UNIX_LIKE) {\n\t\tlet unixLikeTerminal: string | undefined;\n\t\tif (platform.isWindows) {\n\t\t\tunixLikeTerminal = '/bin/bash'; // for WSL\n\t\t} else {\n\t\t\tunixLikeTerminal = env['SHELL'];\n\n\t\t\tif (!unixLikeTerminal) {\n\t\t\t\ttry {\n\t\t\t\t\t// It's possible for $SHELL to be unset, this API reads /etc/passwd. See https://github.com/github/codespaces/issues/1639\n\t\t\t\t\t// Node docs: \"Throws a SystemError if a user has no username or homedir.\"\n\t\t\t\t\tunixLikeTerminal = userInfo().shell;\n\t\t\t\t} catch (err) { }\n\t\t\t}\n\n\t\t\tif (!unixLikeTerminal) {\n\t\t\t\tunixLikeTerminal = 'sh';\n\t\t\t}\n\n\t\t\t// Some systems have $SHELL set to /bin/false which breaks the terminal\n\t\t\tif (unixLikeTerminal === '/bin/false') {\n\t\t\t\tunixLikeTerminal = '/bin/bash';\n\t\t\t}\n\t\t}\n\t\t_TERMINAL_DEFAULT_SHELL_UNIX_LIKE = unixLikeTerminal;\n\t}\n\treturn _TERMINAL_DEFAULT_SHELL_UNIX_LIKE;\n}\n\nlet _TERMINAL_DEFAULT_SHELL_WINDOWS: string | null = null;\nasync function getSystemShellWindows(): Promise<string> {\n\tif (!_TERMINAL_DEFAULT_SHELL_WINDOWS) {\n\t\t_TERMINAL_DEFAULT_SHELL_WINDOWS = (await getFirstAvailablePowerShellInstallation())!.exePath;\n\t}\n\treturn _TERMINAL_DEFAULT_SHELL_WINDOWS;\n}\n\nfunction getSystemShellWindowsSync(env: platform.IProcessEnvironment): string {\n\tif (_TERMINAL_DEFAULT_SHELL_WINDOWS) {\n\t\treturn _TERMINAL_DEFAULT_SHELL_WINDOWS;\n\t}\n\n\tconst isAtLeastWindows10 = platform.isWindows && parseFloat(release()) >= 10;\n\tconst is32ProcessOn64Windows = env.hasOwnProperty('PROCESSOR_ARCHITEW6432');\n\tconst powerShellPath = `${env['windir']}\\\\${is32ProcessOn64Windows ? 'Sysnative' : 'System32'}\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe`;\n\treturn isAtLeastWindows10 ? powerShellPath : processes.getWindowsShell(env);\n}\n"]}