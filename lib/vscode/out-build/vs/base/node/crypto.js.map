{"version":3,"file":"crypto.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/node/crypto.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAMzF,KAAK,UAAU,QAAQ,CAAC,IAAY,EAAE,QAA4B;QACxE,MAAM,eAAe,GAAG,IAAI,OAAO,CAAqB,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAC3E,MAAM,KAAK,GAAG,EAAE,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;YACxC,MAAM,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;YACvC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEjB,MAAM,IAAI,GAAG,CAAA,GAAA,iBAAI,CAAA,CAAC,CAAC,GAAW,EAAE,MAAe,EAAE,EAAE;gBAClD,KAAK,CAAC,kBAAkB,EAAE,CAAC;gBAC3B,IAAI,CAAC,kBAAkB,EAAE,CAAC;gBAE1B,IAAI,GAAG,EAAE;oBACR,MAAM,CAAC,GAAG,CAAC,CAAC;iBACZ;qBAAM;oBACN,OAAO,CAAC,MAAM,CAAC,CAAC;iBAChB;YACF,CAAC,CAAC,CAAC;YAEH,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;YAC1B,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YACxB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;YACzB,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,IAAY,EAAE,EAAE,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAC5E,CAAC,CAAC,CAAC;QAEH,MAAM,IAAI,GAAG,MAAM,eAAe,CAAC;QAEnC,IAAI,IAAI,KAAK,QAAQ,EAAE;YACtB,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;SACjC;IACF,CAAC;IA5BD,4BA4BC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as fs from 'fs';\nimport * as crypto from 'crypto';\nimport { once } from 'vs/base/common/functional';\n\nexport async function checksum(path: string, sha1hash: string | undefined): Promise<void> {\n\tconst checksumPromise = new Promise<string | undefined>((resolve, reject) => {\n\t\tconst input = fs.createReadStream(path);\n\t\tconst hash = crypto.createHash('sha1');\n\t\tinput.pipe(hash);\n\n\t\tconst done = once((err?: Error, result?: string) => {\n\t\t\tinput.removeAllListeners();\n\t\t\thash.removeAllListeners();\n\n\t\t\tif (err) {\n\t\t\t\treject(err);\n\t\t\t} else {\n\t\t\t\tresolve(result);\n\t\t\t}\n\t\t});\n\n\t\tinput.once('error', done);\n\t\tinput.once('end', done);\n\t\thash.once('error', done);\n\t\thash.once('data', (data: Buffer) => done(undefined, data.toString('hex')));\n\t});\n\n\tconst hash = await checksumPromise;\n\n\tif (hash !== sha1hash) {\n\t\tthrow new Error('Hash mismatch');\n\t}\n}\n"]}