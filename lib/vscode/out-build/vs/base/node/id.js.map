{"version":3,"file":"id.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/node/id.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as errors from 'vs/base/common/errors';\nimport * as uuid from 'vs/base/common/uuid';\nimport { networkInterfaces } from 'os';\nimport { TernarySearchTree } from 'vs/base/common/map';\nimport { getMac } from 'vs/base/node/macAddress';\n\n// http://www.techrepublic.com/blog/data-center/mac-address-scorecard-for-common-virtual-machine-platforms/\n// VMware ESX 3, Server, Workstation, Player\t00-50-56, 00-0C-29, 00-05-69\n// Microsoft Hyper-V, Virtual Server, Virtual PC\t00-03-FF\n// Parallels Desktop, Workstation, Server, Virtuozzo\t00-1C-42\n// Virtual Iron 4\t00-0F-4B\n// Red Hat Xen\t00-16-3E\n// Oracle VM\t00-16-3E\n// XenSource\t00-16-3E\n// Novell Xen\t00-16-3E\n// Sun xVM VirtualBox\t08-00-27\nexport const virtualMachineHint: { value(): number } = new class {\n\n\tprivate _virtualMachineOUIs?: TernarySearchTree<string, boolean>;\n\tprivate _value?: number;\n\n\tprivate _isVirtualMachineMacAdress(mac: string): boolean {\n\t\tif (!this._virtualMachineOUIs) {\n\t\t\tthis._virtualMachineOUIs = TernarySearchTree.forStrings<boolean>();\n\n\t\t\t// dash-separated\n\t\t\tthis._virtualMachineOUIs.set('00-50-56', true);\n\t\t\tthis._virtualMachineOUIs.set('00-0C-29', true);\n\t\t\tthis._virtualMachineOUIs.set('00-05-69', true);\n\t\t\tthis._virtualMachineOUIs.set('00-03-FF', true);\n\t\t\tthis._virtualMachineOUIs.set('00-1C-42', true);\n\t\t\tthis._virtualMachineOUIs.set('00-16-3E', true);\n\t\t\tthis._virtualMachineOUIs.set('08-00-27', true);\n\n\t\t\t// colon-separated\n\t\t\tthis._virtualMachineOUIs.set('00:50:56', true);\n\t\t\tthis._virtualMachineOUIs.set('00:0C:29', true);\n\t\t\tthis._virtualMachineOUIs.set('00:05:69', true);\n\t\t\tthis._virtualMachineOUIs.set('00:03:FF', true);\n\t\t\tthis._virtualMachineOUIs.set('00:1C:42', true);\n\t\t\tthis._virtualMachineOUIs.set('00:16:3E', true);\n\t\t\tthis._virtualMachineOUIs.set('08:00:27', true);\n\t\t}\n\t\treturn !!this._virtualMachineOUIs.findSubstr(mac);\n\t}\n\n\tvalue(): number {\n\t\tif (this._value === undefined) {\n\t\t\tlet vmOui = 0;\n\t\t\tlet interfaceCount = 0;\n\n\t\t\tconst interfaces = networkInterfaces();\n\t\t\tfor (let name in interfaces) {\n\t\t\t\tconst networkInterface = interfaces[name];\n\t\t\t\tif (networkInterface) {\n\t\t\t\t\tfor (const { mac, internal } of networkInterface) {\n\t\t\t\t\t\tif (!internal) {\n\t\t\t\t\t\t\tinterfaceCount += 1;\n\t\t\t\t\t\t\tif (this._isVirtualMachineMacAdress(mac.toUpperCase())) {\n\t\t\t\t\t\t\t\tvmOui += 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._value = interfaceCount > 0\n\t\t\t\t? vmOui / interfaceCount\n\t\t\t\t: 0;\n\t\t}\n\n\t\treturn this._value;\n\t}\n};\n\nlet machineId: Promise<string>;\nexport async function getMachineId(): Promise<string> {\n\tif (!machineId) {\n\t\tmachineId = (async () => {\n\t\t\tconst id = await getMacMachineId();\n\n\t\t\treturn id || uuid.generateUuid(); // fallback, generate a UUID\n\t\t})();\n\t}\n\n\treturn machineId;\n}\n\nasync function getMacMachineId(): Promise<string | undefined> {\n\ttry {\n\t\tconst crypto = await import('crypto');\n\t\tconst macAddress = await getMac();\n\t\treturn crypto.createHash('sha256').update(macAddress, 'utf8').digest('hex');\n\t} catch (err) {\n\t\terrors.onUnexpectedError(err);\n\t\treturn undefined;\n\t}\n}\n"]}