{"version":3,"file":"proxy_agent.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/node/proxy_agent.ts"],"names":[],"mappings":";;;;IAKA;;;;;;;;;;;;OAYG;IAEH;;;;;;;;;;;;;OAaG;IACH,SAAgB,WAAW,CAAC,QAAiB;QAC3C,IAAI,iBAAiB,EAAE,EAAE;YACvB,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAA;YAC5B,MAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAA;YAE9B,uFAAuF;YACvF,oDAAoD;YACpD,8BAA8B;YAC9B,MAAM,EAAE,GAAG,aAAa,CAAC,QAAQ,CAAC,CAAA;YAClC,IAAI,CAAC,WAAW,GAAG,EAAE,CAAA;YACrB,KAAK,CAAC,WAAW,GAAG,EAAE,CAAA;SACvB;IACH,CAAC;IAZD,kCAYC;IAED,SAAS,aAAa,CAAC,QAAiB;QACtC,6EAA6E;QAC7E,uFAAuF;QACvF,8DAA8D;QAC9D,EAAE;QACF,uFAAuF;QACvF,sFAAsF;QACtF,iCAAiC;QACjC,IAAI,QAAQ,EAAE;YACZ,OAAO,IAAK,UAAkB,EAAE,CAAA;SACjC;aAAM;YACL,OAAO,IAAK,UAAkB,CAAC,OAAO,EAAE,CAAA;SACzC;IACH,CAAC;IAED,wEAAwE;IACxE,mCAAmC;IACnC,SAAS,iBAAiB;QACxB,IAAI,YAAY,GAAG,KAAK,CAAA;QAExB,MAAM,SAAS,GAAG,YAAY,CAAC,cAAc,CAAC,oBAAoB,CAAC,CAAA;QACnE,IAAI,SAAS,EAAE;YACb,YAAY,GAAG,IAAI,CAAA;YACnB,eAAM,CAAC,KAAK,CAAC,qBAAqB,SAAS,EAAE,CAAC,CAAA;SAC/C;QAED,MAAM,UAAU,GAAG,YAAY,CAAC,cAAc,CAAC,qBAAqB,CAAC,CAAA;QACrE,IAAI,UAAU,EAAE;YACd,YAAY,GAAG,IAAI,CAAA;YACnB,eAAM,CAAC,KAAK,CAAC,sBAAsB,UAAU,EAAE,CAAC,CAAA;SACjD;QAED,OAAO,YAAY,CAAA;IACrB,CAAC","sourcesContent":["import { logger } from \"@coder/logger\"\nimport * as http from \"http\"\nimport * as proxyAgent from \"proxy-agent\"\nimport * as proxyFromEnv from \"proxy-from-env\"\n\n/**\n * This file has nothing to do with the code-server proxy.\n * It is to support $HTTP_PROXY, $HTTPS_PROXY and $NO_PROXY.\n *\n * - https://github.com/cdr/code-server/issues/124\n * - https://www.npmjs.com/package/proxy-agent\n * - https://www.npmjs.com/package/proxy-from-env\n *\n * This file exists in two locations:\n * - src/node/proxy_agent.ts\n * - lib/vscode/src/vs/base/node/proxy_agent.ts\n * The second is a symlink to the first.\n */\n\n/**\n * monkeyPatch patches the node http,https modules to route all requests through the\n * agent we get from the proxy-agent package.\n *\n * This approach only works if there is no code specifying an explicit agent when making\n * a request.\n *\n * None of our code ever passes in a explicit agent to the http,https modules.\n * VS Code's does sometimes but only when a user sets the http.proxy configuration.\n * See https://code.visualstudio.com/docs/setup/network#_legacy-proxy-server-support\n *\n * Even if they do, it's probably the same proxy so we should be fine! And those knobs\n * are deprecated anyway.\n */\nexport function monkeyPatch(inVSCode: boolean): void {\n  if (shouldEnableProxy()) {\n    const http = require(\"http\")\n    const https = require(\"https\")\n\n    // If we do not pass in a proxy URL, proxy-agent will get the URL from the environment.\n    // See https://www.npmjs.com/package/proxy-from-env.\n    // Also see shouldEnableProxy.\n    const pa = newProxyAgent(inVSCode)\n    http.globalAgent = pa\n    https.globalAgent = pa\n  }\n}\n\nfunction newProxyAgent(inVSCode: boolean): http.Agent {\n  // The reasoning for this split is that VS Code's build process does not have\n  // esModuleInterop enabled but the code-server one does. As a result depending on where\n  // we execute, we either have a default attribute or we don't.\n  //\n  // I can't enable esModuleInterop in VS Code's build process as it breaks and spits out\n  // a huge number of errors. And we can't use require as otherwise the modules won't be\n  // included in the final product.\n  if (inVSCode) {\n    return new (proxyAgent as any)()\n  } else {\n    return new (proxyAgent as any).default()\n  }\n}\n\n// If they have $NO_PROXY set to example.com then this check won't work!\n// But that's drastically unlikely.\nfunction shouldEnableProxy(): boolean {\n  let shouldEnable = false\n\n  const httpProxy = proxyFromEnv.getProxyForUrl(`http://example.com`)\n  if (httpProxy) {\n    shouldEnable = true\n    logger.debug(`using $HTTP_PROXY ${httpProxy}`)\n  }\n\n  const httpsProxy = proxyFromEnv.getProxyForUrl(`https://example.com`)\n  if (httpsProxy) {\n    shouldEnable = true\n    logger.debug(`using $HTTPS_PROXY ${httpsProxy}`)\n  }\n\n  return shouldEnable\n}\n"]}