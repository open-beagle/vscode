{"version":3,"file":"powershell.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/node/powershell.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as pfs from 'vs/base/node/pfs';\nimport * as os from 'os';\nimport * as path from 'vs/base/common/path';\n\n// This is required, since parseInt(\"7-preview\") will return 7.\nconst IntRegex: RegExp = /^\\d+$/;\n\nconst PwshMsixRegex: RegExp = /^Microsoft.PowerShell_.*/;\nconst PwshPreviewMsixRegex: RegExp = /^Microsoft.PowerShellPreview_.*/;\n\nconst enum Arch {\n\tx64,\n\tx86,\n\tARM\n}\n\nlet processArch: Arch;\nswitch (process.arch) {\n\tcase 'ia32':\n\tcase 'x32':\n\t\tprocessArch = Arch.x86;\n\t\tbreak;\n\tcase 'arm':\n\tcase 'arm64':\n\t\tprocessArch = Arch.ARM;\n\t\tbreak;\n\tdefault:\n\t\tprocessArch = Arch.x64;\n\t\tbreak;\n}\n\n/*\nCurrently, here are the values for these environment variables on their respective archs:\n\nOn x86 process on x86:\nPROCESSOR_ARCHITECTURE is X86\nPROCESSOR_ARCHITEW6432 is undefined\n\nOn x86 process on x64:\nPROCESSOR_ARCHITECTURE is X86\nPROCESSOR_ARCHITEW6432 is AMD64\n\nOn x64 process on x64:\nPROCESSOR_ARCHITECTURE is AMD64\nPROCESSOR_ARCHITEW6432 is undefined\n\nOn ARM process on ARM:\nPROCESSOR_ARCHITECTURE is ARM64\nPROCESSOR_ARCHITEW6432 is undefined\n\nOn x86 process on ARM:\nPROCESSOR_ARCHITECTURE is X86\nPROCESSOR_ARCHITEW6432 is ARM64\n\nOn x64 process on ARM:\nPROCESSOR_ARCHITECTURE is ARM64\nPROCESSOR_ARCHITEW6432 is undefined\n*/\nlet osArch: Arch;\nif (process.env['PROCESSOR_ARCHITEW6432']) {\n\tosArch = process.env['PROCESSOR_ARCHITEW6432'] === 'ARM64'\n\t\t? Arch.ARM\n\t\t: Arch.x64;\n} else if (process.env['PROCESSOR_ARCHITECTURE'] === 'ARM64') {\n\tosArch = Arch.ARM;\n} else if (process.env['PROCESSOR_ARCHITECTURE'] === 'X86') {\n\tosArch = Arch.x86;\n} else {\n\tosArch = Arch.x64;\n}\n\nexport interface IPowerShellExeDetails {\n\treadonly displayName: string;\n\treadonly exePath: string;\n}\n\nexport interface IPossiblePowerShellExe extends IPowerShellExeDetails {\n\texists(): Promise<boolean>;\n}\n\nclass PossiblePowerShellExe implements IPossiblePowerShellExe {\n\tconstructor(\n\t\tpublic readonly exePath: string,\n\t\tpublic readonly displayName: string,\n\t\tprivate knownToExist?: boolean) { }\n\n\tpublic async exists(): Promise<boolean> {\n\t\tif (this.knownToExist === undefined) {\n\t\t\tthis.knownToExist = await pfs.SymlinkSupport.existsFile(this.exePath);\n\t\t}\n\t\treturn this.knownToExist;\n\t}\n}\n\nfunction getProgramFilesPath(\n\t{ useAlternateBitness = false }: { useAlternateBitness?: boolean } = {}): string | null {\n\n\tif (!useAlternateBitness) {\n\t\t// Just use the native system bitness\n\t\treturn process.env.ProgramFiles || null;\n\t}\n\n\t// We might be a 64-bit process looking for 32-bit program files\n\tif (processArch === Arch.x64) {\n\t\treturn process.env['ProgramFiles(x86)'] || null;\n\t}\n\n\t// We might be a 32-bit process looking for 64-bit program files\n\tif (osArch === Arch.x64) {\n\t\treturn process.env.ProgramW6432 || null;\n\t}\n\n\t// We're a 32-bit process on 32-bit Windows, there is no other Program Files dir\n\treturn null;\n}\n\nasync function findPSCoreWindowsInstallation(\n\t{ useAlternateBitness = false, findPreview = false }:\n\t\t{ useAlternateBitness?: boolean; findPreview?: boolean } = {}): Promise<IPossiblePowerShellExe | null> {\n\n\tconst programFilesPath = getProgramFilesPath({ useAlternateBitness });\n\tif (!programFilesPath) {\n\t\treturn null;\n\t}\n\n\tconst powerShellInstallBaseDir = path.join(programFilesPath, 'PowerShell');\n\n\t// Ensure the base directory exists\n\tif (!await pfs.SymlinkSupport.existsDirectory(powerShellInstallBaseDir)) {\n\t\treturn null;\n\t}\n\n\tlet highestSeenVersion: number = -1;\n\tlet pwshExePath: string | null = null;\n\tfor (const item of await pfs.readdir(powerShellInstallBaseDir)) {\n\n\t\tlet currentVersion: number = -1;\n\t\tif (findPreview) {\n\t\t\t// We are looking for something like \"7-preview\"\n\n\t\t\t// Preview dirs all have dashes in them\n\t\t\tconst dashIndex = item.indexOf('-');\n\t\t\tif (dashIndex < 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Verify that the part before the dash is an integer\n\t\t\t// and that the part after the dash is \"preview\"\n\t\t\tconst intPart: string = item.substring(0, dashIndex);\n\t\t\tif (!IntRegex.test(intPart) || item.substring(dashIndex + 1) !== 'preview') {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tcurrentVersion = parseInt(intPart, 10);\n\t\t} else {\n\t\t\t// Search for a directory like \"6\" or \"7\"\n\t\t\tif (!IntRegex.test(item)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tcurrentVersion = parseInt(item, 10);\n\t\t}\n\n\t\t// Ensure we haven't already seen a higher version\n\t\tif (currentVersion <= highestSeenVersion) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Now look for the file\n\t\tconst exePath = path.join(powerShellInstallBaseDir, item, 'pwsh.exe');\n\t\tif (!await pfs.SymlinkSupport.existsFile(exePath)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tpwshExePath = exePath;\n\t\thighestSeenVersion = currentVersion;\n\t}\n\n\tif (!pwshExePath) {\n\t\treturn null;\n\t}\n\n\tconst bitness: string = programFilesPath.includes('x86') ? ' (x86)' : '';\n\tconst preview: string = findPreview ? ' Preview' : '';\n\n\treturn new PossiblePowerShellExe(pwshExePath, `PowerShell${preview}${bitness}`, true);\n}\n\nasync function findPSCoreMsix({ findPreview }: { findPreview?: boolean } = {}): Promise<IPossiblePowerShellExe | null> {\n\t// We can't proceed if there's no LOCALAPPDATA path\n\tif (!process.env.LOCALAPPDATA) {\n\t\treturn null;\n\t}\n\n\t// Find the base directory for MSIX application exe shortcuts\n\tconst msixAppDir = path.join(process.env.LOCALAPPDATA, 'Microsoft', 'WindowsApps');\n\n\tif (!await pfs.SymlinkSupport.existsDirectory(msixAppDir)) {\n\t\treturn null;\n\t}\n\n\t// Define whether we're looking for the preview or the stable\n\tconst { pwshMsixDirRegex, pwshMsixName } = findPreview\n\t\t? { pwshMsixDirRegex: PwshPreviewMsixRegex, pwshMsixName: 'PowerShell Preview (Store)' }\n\t\t: { pwshMsixDirRegex: PwshMsixRegex, pwshMsixName: 'PowerShell (Store)' };\n\n\t// We should find only one such application, so return on the first one\n\tfor (const subdir of await pfs.readdir(msixAppDir)) {\n\t\tif (pwshMsixDirRegex.test(subdir)) {\n\t\t\tconst pwshMsixPath = path.join(msixAppDir, subdir, 'pwsh.exe');\n\t\t\treturn new PossiblePowerShellExe(pwshMsixPath, pwshMsixName);\n\t\t}\n\t}\n\n\t// If we find nothing, return null\n\treturn null;\n}\n\nfunction findPSCoreDotnetGlobalTool(): IPossiblePowerShellExe {\n\tconst dotnetGlobalToolExePath: string = path.join(os.homedir(), '.dotnet', 'tools', 'pwsh.exe');\n\n\treturn new PossiblePowerShellExe(dotnetGlobalToolExePath, '.NET Core PowerShell Global Tool');\n}\n\nfunction findWinPS(): IPossiblePowerShellExe | null {\n\tconst winPSPath = path.join(\n\t\tprocess.env.windir!,\n\t\tprocessArch === Arch.x86 && osArch !== Arch.x86 ? 'SysNative' : 'System32',\n\t\t'WindowsPowerShell', 'v1.0', 'powershell.exe');\n\n\treturn new PossiblePowerShellExe(winPSPath, 'Windows PowerShell', true);\n}\n\n/**\n * Iterates through all the possible well-known PowerShell installations on a machine.\n * Returned values may not exist, but come with an .exists property\n * which will check whether the executable exists.\n */\nasync function* enumerateDefaultPowerShellInstallations(): AsyncIterable<IPossiblePowerShellExe> {\n\t// Find PSCore stable first\n\tlet pwshExe = await findPSCoreWindowsInstallation();\n\tif (pwshExe) {\n\t\tyield pwshExe;\n\t}\n\n\t// Windows may have a 32-bit pwsh.exe\n\tpwshExe = await findPSCoreWindowsInstallation({ useAlternateBitness: true });\n\tif (pwshExe) {\n\t\tyield pwshExe;\n\t}\n\n\t// Also look for the MSIX/UWP installation\n\tpwshExe = await findPSCoreMsix();\n\tif (pwshExe) {\n\t\tyield pwshExe;\n\t}\n\n\t// Look for the .NET global tool\n\t// Some older versions of PowerShell have a bug in this where startup will fail,\n\t// but this is fixed in newer versions\n\tpwshExe = findPSCoreDotnetGlobalTool();\n\tif (pwshExe) {\n\t\tyield pwshExe;\n\t}\n\n\t// Look for PSCore preview\n\tpwshExe = await findPSCoreWindowsInstallation({ findPreview: true });\n\tif (pwshExe) {\n\t\tyield pwshExe;\n\t}\n\n\t// Find a preview MSIX\n\tpwshExe = await findPSCoreMsix({ findPreview: true });\n\tif (pwshExe) {\n\t\tyield pwshExe;\n\t}\n\n\t// Look for pwsh-preview with the opposite bitness\n\tpwshExe = await findPSCoreWindowsInstallation({ useAlternateBitness: true, findPreview: true });\n\tif (pwshExe) {\n\t\tyield pwshExe;\n\t}\n\n\t// Finally, get Windows PowerShell\n\tpwshExe = findWinPS();\n\tif (pwshExe) {\n\t\tyield pwshExe;\n\t}\n}\n\n/**\n * Iterates through PowerShell installations on the machine according\n * to configuration passed in through the constructor.\n * PowerShell items returned by this object are verified\n * to exist on the filesystem.\n */\nexport async function* enumeratePowerShellInstallations(): AsyncIterable<IPowerShellExeDetails> {\n\t// Get the default PowerShell installations first\n\tfor await (const defaultPwsh of enumerateDefaultPowerShellInstallations()) {\n\t\tif (await defaultPwsh.exists()) {\n\t\t\tyield defaultPwsh;\n\t\t}\n\t}\n}\n\n/**\n* Returns the first available PowerShell executable found in the search order.\n*/\nexport async function getFirstAvailablePowerShellInstallation(): Promise<IPowerShellExeDetails | null> {\n\tfor await (const pwsh of enumeratePowerShellInstallations()) {\n\t\treturn pwsh;\n\t}\n\treturn null;\n}\n"]}