{"version":3,"file":"macAddress.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/node/macAddress.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAIhG,MAAM,mBAAmB,GAAG,IAAI,GAAG,CAAC;QACnC,mBAAmB;QACnB,mBAAmB;QACnB,mBAAmB;KACnB,CAAC,CAAC;IAEH,SAAS,kBAAkB,CAAC,SAAiB;QAC5C,MAAM,aAAa,GAAG,SAAS,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC;QAClE,OAAO,CAAC,mBAAmB,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;IAChD,CAAC;IAED,SAAgB,MAAM;QACrB,OAAO,IAAI,OAAO,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE;YAC5C,MAAM,OAAO,GAAG,UAAU,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,oDAAoD,CAAC,EAAE,KAAK,CAAC,CAAC;YAEtG,IAAI;gBACH,OAAO,CAAC,MAAM,QAAQ,EAAE,CAAC,CAAC;aAC1B;YAAC,OAAO,KAAK,EAAE;gBACf,MAAM,CAAC,KAAK,CAAC,CAAC;aACd;oBAAS;gBACT,YAAY,CAAC,OAAO,CAAC,CAAC;aACtB;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;IAZD,wBAYC;IAED,SAAS,QAAQ;QAChB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACtC,IAAI;gBACH,MAAM,MAAM,GAAG,CAAA,GAAA,sBAAiB,CAAA,EAAE,CAAC;gBACnC,KAAK,IAAI,IAAI,IAAI,MAAM,EAAE;oBACxB,MAAM,gBAAgB,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;oBACtC,IAAI,gBAAgB,EAAE;wBACrB,KAAK,MAAM,EAAE,GAAG,EAAE,IAAI,gBAAgB,EAAE;4BACvC,IAAI,kBAAkB,CAAC,GAAG,CAAC,EAAE;gCAC5B,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC;6BACpB;yBACD;qBACD;iBACD;gBAED,MAAM,CAAC,oDAAoD,CAAC,CAAC;aAC7D;YAAC,OAAO,GAAG,EAAE;gBACb,MAAM,CAAC,GAAG,CAAC,CAAC;aACZ;QACF,CAAC,CAAC,CAAC;IACJ,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { networkInterfaces } from 'os';\n\nconst invalidMacAddresses = new Set([\n\t'00:00:00:00:00:00',\n\t'ff:ff:ff:ff:ff:ff',\n\t'ac:de:48:00:11:22'\n]);\n\nfunction validateMacAddress(candidate: string): boolean {\n\tconst tempCandidate = candidate.replace(/\\-/g, ':').toLowerCase();\n\treturn !invalidMacAddresses.has(tempCandidate);\n}\n\nexport function getMac(): Promise<string> {\n\treturn new Promise(async (resolve, reject) => {\n\t\tconst timeout = setTimeout(() => reject('Unable to retrieve mac address (timeout after 10s)'), 10000);\n\n\t\ttry {\n\t\t\tresolve(await doGetMac());\n\t\t} catch (error) {\n\t\t\treject(error);\n\t\t} finally {\n\t\t\tclearTimeout(timeout);\n\t\t}\n\t});\n}\n\nfunction doGetMac(): Promise<string> {\n\treturn new Promise((resolve, reject) => {\n\t\ttry {\n\t\t\tconst ifaces = networkInterfaces();\n\t\t\tfor (let name in ifaces) {\n\t\t\t\tconst networkInterface = ifaces[name];\n\t\t\t\tif (networkInterface) {\n\t\t\t\t\tfor (const { mac } of networkInterface) {\n\t\t\t\t\t\tif (validateMacAddress(mac)) {\n\t\t\t\t\t\t\treturn resolve(mac);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treject('Unable to retrieve mac address (unexpected format)');\n\t\t} catch (err) {\n\t\t\treject(err);\n\t\t}\n\t});\n}\n"]}