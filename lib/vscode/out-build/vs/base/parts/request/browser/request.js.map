{"version":3,"file":"request.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/parts/request/browser/request.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { canceled } from 'vs/base/common/errors';\nimport { VSBuffer, bufferToStream } from 'vs/base/common/buffer';\nimport { IRequestOptions, IRequestContext } from 'vs/base/parts/request/common/request';\n\nexport function request(options: IRequestOptions, token: CancellationToken): Promise<IRequestContext> {\n\tif (options.proxyAuthorization) {\n\t\toptions.headers = {\n\t\t\t...(options.headers || {}),\n\t\t\t'Proxy-Authorization': options.proxyAuthorization\n\t\t};\n\t}\n\n\tconst xhr = new XMLHttpRequest();\n\treturn new Promise<IRequestContext>((resolve, reject) => {\n\n\t\txhr.open(options.type || 'GET', options.url || '', true, options.user, options.password);\n\t\tsetRequestHeaders(xhr, options);\n\n\t\txhr.responseType = 'arraybuffer';\n\t\txhr.onerror = e => reject(new Error(xhr.statusText && ('XHR failed: ' + xhr.statusText) || 'XHR failed'));\n\t\txhr.onload = (e) => {\n\t\t\tresolve({\n\t\t\t\tres: {\n\t\t\t\t\tstatusCode: xhr.status,\n\t\t\t\t\theaders: getResponseHeaders(xhr)\n\t\t\t\t},\n\t\t\t\tstream: bufferToStream(VSBuffer.wrap(new Uint8Array(xhr.response)))\n\t\t\t});\n\t\t};\n\t\txhr.ontimeout = e => reject(new Error(`XHR timeout: ${options.timeout}ms`));\n\n\t\tif (options.timeout) {\n\t\t\txhr.timeout = options.timeout;\n\t\t}\n\n\t\txhr.send(options.data);\n\n\t\t// cancel\n\t\ttoken.onCancellationRequested(() => {\n\t\t\txhr.abort();\n\t\t\treject(canceled());\n\t\t});\n\t});\n}\n\nfunction setRequestHeaders(xhr: XMLHttpRequest, options: IRequestOptions): void {\n\tif (options.headers) {\n\t\touter: for (let k in options.headers) {\n\t\t\tswitch (k) {\n\t\t\t\tcase 'User-Agent':\n\t\t\t\tcase 'Accept-Encoding':\n\t\t\t\tcase 'Content-Length':\n\t\t\t\t\t// unsafe headers\n\t\t\t\t\tcontinue outer;\n\t\t\t}\n\t\t\txhr.setRequestHeader(k, options.headers[k]);\n\t\t}\n\t}\n}\n\nfunction getResponseHeaders(xhr: XMLHttpRequest): { [name: string]: string } {\n\tconst headers: { [name: string]: string } = Object.create(null);\n\tfor (const line of xhr.getAllResponseHeaders().split(/\\r\\n|\\n|\\r/g)) {\n\t\tif (line) {\n\t\t\tconst idx = line.indexOf(':');\n\t\t\theaders[line.substr(0, idx).trim().toLowerCase()] = line.substr(idx + 1).trim();\n\t\t}\n\t}\n\treturn headers;\n}\n"]}