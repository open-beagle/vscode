{"version":3,"file":"ipc.mp.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/parts/ipc/electron-main/ipc.mp.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAQhG;;OAEG;IACH,MAAa,MAAO,SAAQ,eAAiB;QAE5C;;;;WAIG;QACH,YAAY,IAAqB,EAAE,QAAgB;YAClD,KAAK,CAAC;gBACL,gBAAgB,EAAE,CAAC,IAAI,EAAE,QAAQ,EAAE,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,QAAQ,CAAC;gBACtE,mBAAmB,EAAE,CAAC,IAAI,EAAE,QAAQ,EAAE,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,QAAQ,CAAC;gBAC5E,WAAW,EAAE,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC;gBACjD,KAAK,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE;gBACzB,KAAK,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE;aACzB,EAAE,QAAQ,CAAC,CAAC;QACd,CAAC;KACD;IAhBD,wBAgBC;IAED;;;;OAIG;IACI,KAAK,UAAU,OAAO,CAAC,MAAqB;QAElD,mCAAmC;QACnC,IAAI,MAAM,CAAC,WAAW,EAAE,IAAI,MAAM,CAAC,WAAW,CAAC,WAAW,EAAE,EAAE;YAC7D,MAAM,IAAI,KAAK,CAAC,yEAAyE,CAAC,CAAC;SAC3F;QAED,kDAAkD;QAClD,iDAAiD;QACjD,MAAM,KAAK,GAAG,CAAA,GAAA,mBAAY,CAAA,EAAE,CAAC;QAC7B,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,6BAA6B,EAAE,KAAK,CAAC,CAAC;QAE9D,uDAAuD;QACvD,uDAAuD;QACvD,yBAAyB;QACzB,MAAM,sBAAsB,GAAG,aAAK,CAAC,oBAAoB,CAA2C,kBAAO,EAAE,mCAAmC,EAAE,CAAC,CAAe,EAAE,KAAa,EAAE,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACrN,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,aAAK,CAAC,SAAS,CAAC,aAAK,CAAC,IAAI,CAAC,aAAK,CAAC,MAAM,CAAC,sBAAsB,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC;QAEjH,OAAO,IAAI,CAAC;IACb,CAAC;IAnBD,0BAmBC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { BrowserWindow, ipcMain, IpcMainEvent, MessagePortMain } from 'electron';\nimport { Event } from 'vs/base/common/event';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { generateUuid } from 'vs/base/common/uuid';\nimport { Client as MessagePortClient } from 'vs/base/parts/ipc/common/ipc.mp';\n\n/**\n * An implementation of a `IPCClient` on top of Electron `MessagePortMain`.\n */\nexport class Client extends MessagePortClient implements IDisposable {\n\n\t/**\n\t * @param clientId a way to uniquely identify this client among\n\t * other clients. this is important for routing because every\n\t * client can also be a server\n\t */\n\tconstructor(port: MessagePortMain, clientId: string) {\n\t\tsuper({\n\t\t\taddEventListener: (type, listener) => port.addListener(type, listener),\n\t\t\tremoveEventListener: (type, listener) => port.removeListener(type, listener),\n\t\t\tpostMessage: message => port.postMessage(message),\n\t\t\tstart: () => port.start(),\n\t\t\tclose: () => port.close()\n\t\t}, clientId);\n\t}\n}\n\n/**\n * This method opens a message channel connection\n * in the target window. The target window needs\n * to use the `Server` from `electron-sandbox/ipc.mp`.\n */\nexport async function connect(window: BrowserWindow): Promise<MessagePortMain> {\n\n\t// Assert healthy window to talk to\n\tif (window.isDestroyed() || window.webContents.isDestroyed()) {\n\t\tthrow new Error('ipc.mp#connect: Cannot talk to window because it is closed or destroyed');\n\t}\n\n\t// Ask to create message channel inside the window\n\t// and send over a UUID to correlate the response\n\tconst nonce = generateUuid();\n\twindow.webContents.send('vscode:createMessageChannel', nonce);\n\n\t// Wait until the window has returned the `MessagePort`\n\t// We need to filter by the `nonce` to ensure we listen\n\t// to the right response.\n\tconst onMessageChannelResult = Event.fromNodeEventEmitter<{ nonce: string, port: MessagePortMain }>(ipcMain, 'vscode:createMessageChannelResult', (e: IpcMainEvent, nonce: string) => ({ nonce, port: e.ports[0] }));\n\tconst { port } = await Event.toPromise(Event.once(Event.filter(onMessageChannelResult, e => e.nonce === nonce)));\n\n\treturn port;\n}\n"]}