{"version":3,"file":"ipc.electron.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/parts/ipc/electron-main/ipc.electron.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAchG,SAAS,0BAA0B,CAAC,QAAgB,EAAE,SAAiB;QACtE,MAAM,SAAS,GAAG,aAAK,CAAC,oBAAoB,CAAY,kBAAO,EAAE,SAAS,EAAE,CAAC,KAAK,EAAE,OAAO,EAAE,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;QACtH,MAAM,mBAAmB,GAAG,aAAK,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,KAAK,QAAQ,CAAC,CAAC;QAEjG,OAAO,aAAK,CAAC,GAAG,CAAC,mBAAmB,EAAE,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,iBAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;IACpG,CAAC;IAED;;OAEG;IACH,MAAa,MAAO,SAAQ,eAAS;QA0BpC;YACC,KAAK,CAAC,MAAM,CAAC,qBAAqB,EAAE,CAAC,CAAC;QACvC,CAAC;QAxBO,MAAM,CAAC,qBAAqB;YACnC,MAAM,OAAO,GAAG,aAAK,CAAC,oBAAoB,CAAc,kBAAO,EAAE,cAAc,EAAE,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC;YAEzG,OAAO,aAAK,CAAC,GAAG,CAAC,OAAO,EAAE,WAAW,CAAC,EAAE;gBACvC,MAAM,EAAE,GAAG,WAAW,CAAC,EAAE,CAAC;gBAC1B,MAAM,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;gBAEtC,IAAI,MAAM,EAAE;oBACX,MAAM,CAAC,OAAO,EAAE,CAAC;iBACjB;gBAED,MAAM,oBAAoB,GAAG,IAAI,eAAO,EAAQ,CAAC;gBACjD,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,EAAE,CAAA,GAAA,wBAAY,CAAA,CAAC,GAAG,EAAE,CAAC,oBAAoB,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;gBAExE,MAAM,SAAS,GAAG,0BAA0B,CAAC,EAAE,EAAE,gBAAgB,CAAoB,CAAC;gBACtF,MAAM,qBAAqB,GAAG,aAAK,CAAC,GAAG,CAAC,aAAK,CAAC,MAAM,CAAC,0BAA0B,CAAC,EAAE,EAAE,mBAAmB,CAAC,CAAC,EAAE,oBAAoB,CAAC,KAAK,CAAC,CAAC;gBACvI,MAAM,QAAQ,GAAG,IAAI,uBAAgB,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;gBAE9D,OAAO,EAAE,QAAQ,EAAE,qBAAqB,EAAE,CAAC;YAC5C,CAAC,CAAC,CAAC;QACJ,CAAC;;IAxBF,wBA6BC;IA3BwB,cAAO,GAAG,IAAI,GAAG,EAAuB,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ipcMain, WebContents } from 'electron';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { IPCServer, ClientConnectionEvent } from 'vs/base/parts/ipc/common/ipc';\nimport { Protocol as ElectronProtocol } from 'vs/base/parts/ipc/common/ipc.electron';\nimport { IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { VSBuffer } from 'vs/base/common/buffer';\n\ninterface IIPCEvent {\n\tevent: { sender: WebContents; };\n\tmessage: Buffer | null;\n}\n\nfunction createScopedOnMessageEvent(senderId: number, eventName: string): Event<VSBuffer | null> {\n\tconst onMessage = Event.fromNodeEventEmitter<IIPCEvent>(ipcMain, eventName, (event, message) => ({ event, message }));\n\tconst onMessageFromSender = Event.filter(onMessage, ({ event }) => event.sender.id === senderId);\n\n\treturn Event.map(onMessageFromSender, ({ message }) => message ? VSBuffer.wrap(message) : message);\n}\n\n/**\n * An implemention of `IPCServer` on top of Electron `ipcMain` API.\n */\nexport class Server extends IPCServer {\n\n\tprivate static readonly Clients = new Map<number, IDisposable>();\n\n\tprivate static getOnDidClientConnect(): Event<ClientConnectionEvent> {\n\t\tconst onHello = Event.fromNodeEventEmitter<WebContents>(ipcMain, 'vscode:hello', ({ sender }) => sender);\n\n\t\treturn Event.map(onHello, webContents => {\n\t\t\tconst id = webContents.id;\n\t\t\tconst client = Server.Clients.get(id);\n\n\t\t\tif (client) {\n\t\t\t\tclient.dispose();\n\t\t\t}\n\n\t\t\tconst onDidClientReconnect = new Emitter<void>();\n\t\t\tServer.Clients.set(id, toDisposable(() => onDidClientReconnect.fire()));\n\n\t\t\tconst onMessage = createScopedOnMessageEvent(id, 'vscode:message') as Event<VSBuffer>;\n\t\t\tconst onDidClientDisconnect = Event.any(Event.signal(createScopedOnMessageEvent(id, 'vscode:disconnect')), onDidClientReconnect.event);\n\t\t\tconst protocol = new ElectronProtocol(webContents, onMessage);\n\n\t\t\treturn { protocol, onDidClientDisconnect };\n\t\t});\n\t}\n\n\tconstructor() {\n\t\tsuper(Server.getOnDidClientConnect());\n\t}\n}\n"]}