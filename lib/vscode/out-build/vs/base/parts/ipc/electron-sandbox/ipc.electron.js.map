{"version":3,"file":"ipc.electron.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/parts/ipc/electron-sandbox/ipc.electron.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAShG;;;OAGG;IACH,MAAa,MAAO,SAAQ,eAAS;QAWpC,YAAY,EAAU;YACrB,MAAM,QAAQ,GAAG,MAAM,CAAC,cAAc,EAAE,CAAC;YACzC,KAAK,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;YAEpB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAC1B,CAAC;QAZO,MAAM,CAAC,cAAc;YAC5B,MAAM,SAAS,GAAG,aAAK,CAAC,oBAAoB,CAAW,qBAAW,EAAE,gBAAgB,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,EAAE,CAAC,iBAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YAC9H,qBAAW,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YAEjC,OAAO,IAAI,uBAAgB,CAAC,qBAAW,EAAE,SAAS,CAAC,CAAC;QACrD,CAAC;QASQ,OAAO;YACf,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC;QAC5B,CAAC;KACD;IArBD,wBAqBC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { IPCClient } from 'vs/base/parts/ipc/common/ipc';\nimport { Protocol as ElectronProtocol } from 'vs/base/parts/ipc/common/ipc.electron';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { ipcRenderer } from 'vs/base/parts/sandbox/electron-sandbox/globals';\n\n/**\n * An implemention of `IPCClient` on top of Electron `ipcRenderer` IPC communication\n * provided from sandbox globals (via preload script).\n */\nexport class Client extends IPCClient implements IDisposable {\n\n\tprivate protocol: ElectronProtocol;\n\n\tprivate static createProtocol(): ElectronProtocol {\n\t\tconst onMessage = Event.fromNodeEventEmitter<VSBuffer>(ipcRenderer, 'vscode:message', (_, message) => VSBuffer.wrap(message));\n\t\tipcRenderer.send('vscode:hello');\n\n\t\treturn new ElectronProtocol(ipcRenderer, onMessage);\n\t}\n\n\tconstructor(id: string) {\n\t\tconst protocol = Client.createProtocol();\n\t\tsuper(protocol, id);\n\n\t\tthis.protocol = protocol;\n\t}\n\n\toverride dispose(): void {\n\t\tthis.protocol.disconnect();\n\t}\n}\n"]}