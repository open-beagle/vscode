{"version":3,"file":"ipc.mp.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/parts/ipc/test/browser/ipc.mp.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAOhG,KAAK,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAE/B,IAAI,CAAC,iBAAiB,EAAE,KAAK,IAAI,EAAE;YAClC,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,IAAI,cAAc,EAAE,CAAC;YAE9C,MAAM,OAAO,GAAG,IAAI,eAAiB,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;YACxD,MAAM,OAAO,GAAG,IAAI,eAAiB,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;YAExD,OAAO,CAAC,eAAe,CAAC,SAAS,EAAE;gBAClC,IAAI,CAAC,CAAU,EAAE,OAAe,EAAE,GAAQ,EAAE,iBAAoC;oBAC/E,QAAQ,OAAO,EAAE;wBAChB,KAAK,mBAAmB,CAAC,CAAC,OAAO,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;wBAC7D,OAAO,CAAC,CAAC,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC;qBAC7D;gBACF,CAAC;gBAED,MAAM,CAAC,CAAU,EAAE,KAAa,EAAE,GAAS;oBAC1C,QAAQ,KAAK,EAAE;wBACd,OAAO,CAAC,CAAC,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;qBAC5C;gBACF,CAAC;aACD,CAAC,CAAC;YAEH,OAAO,CAAC,eAAe,CAAC,SAAS,EAAE;gBAClC,IAAI,CAAC,CAAU,EAAE,OAAe,EAAE,GAAQ,EAAE,iBAAoC;oBAC/E,QAAQ,OAAO,EAAE;wBAChB,KAAK,mBAAmB,CAAC,CAAC,OAAO,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;wBAC7D,OAAO,CAAC,CAAC,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC;qBAC7D;gBACF,CAAC;gBAED,MAAM,CAAC,CAAU,EAAE,KAAa,EAAE,GAAS;oBAC1C,QAAQ,KAAK,EAAE;wBACd,OAAO,CAAC,CAAC,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;qBAC5C;gBACF,CAAC;aACD,CAAC,CAAC;YAEH,MAAM,cAAc,GAAG,OAAO,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;YACrD,MAAM,CAAC,WAAW,CAAC,MAAM,cAAc,CAAC,IAAI,CAAC,mBAAmB,CAAC,EAAE,UAAU,CAAC,CAAC;YAE/E,MAAM,cAAc,GAAG,OAAO,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;YACrD,MAAM,CAAC,WAAW,CAAC,MAAM,cAAc,CAAC,IAAI,CAAC,mBAAmB,CAAC,EAAE,UAAU,CAAC,CAAC;YAE/E,OAAO,CAAC,OAAO,EAAE,CAAC;YAClB,OAAO,CAAC,OAAO,EAAE,CAAC;QACnB,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { Event } from 'vs/base/common/event';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { Client as MessagePortClient } from 'vs/base/parts/ipc/browser/ipc.mp';\n\nsuite('IPC, MessagePorts', () => {\n\n\ttest('message passing', async () => {\n\t\tconst { port1, port2 } = new MessageChannel();\n\n\t\tconst client1 = new MessagePortClient(port1, 'client1');\n\t\tconst client2 = new MessagePortClient(port2, 'client2');\n\n\t\tclient1.registerChannel('client1', {\n\t\t\tcall(_: unknown, command: string, arg: any, cancellationToken: CancellationToken): Promise<any> {\n\t\t\t\tswitch (command) {\n\t\t\t\t\tcase 'testMethodClient1': return Promise.resolve('success1');\n\t\t\t\t\tdefault: return Promise.reject(new Error('not implemented'));\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tlisten(_: unknown, event: string, arg?: any): Event<any> {\n\t\t\t\tswitch (event) {\n\t\t\t\t\tdefault: throw new Error('not implemented');\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tclient2.registerChannel('client2', {\n\t\t\tcall(_: unknown, command: string, arg: any, cancellationToken: CancellationToken): Promise<any> {\n\t\t\t\tswitch (command) {\n\t\t\t\t\tcase 'testMethodClient2': return Promise.resolve('success2');\n\t\t\t\t\tdefault: return Promise.reject(new Error('not implemented'));\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tlisten(_: unknown, event: string, arg?: any): Event<any> {\n\t\t\t\tswitch (event) {\n\t\t\t\t\tdefault: throw new Error('not implemented');\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tconst channelClient1 = client2.getChannel('client1');\n\t\tassert.strictEqual(await channelClient1.call('testMethodClient1'), 'success1');\n\n\t\tconst channelClient2 = client1.getChannel('client2');\n\t\tassert.strictEqual(await channelClient2.call('testMethodClient2'), 'success2');\n\n\t\tclient1.dispose();\n\t\tclient2.dispose();\n\t});\n});\n"]}