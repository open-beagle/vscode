{"version":3,"file":"ipc.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/parts/ipc/test/common/ipc.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { IChannel, IServerChannel, IMessagePassingProtocol, IPCServer, ClientConnectionEvent, IPCClient, ProxyChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { CancellationToken, CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { canceled } from 'vs/base/common/errors';\nimport { timeout } from 'vs/base/common/async';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { URI } from 'vs/base/common/uri';\nimport { isEqual } from 'vs/base/common/resources';\n\nclass QueueProtocol implements IMessagePassingProtocol {\n\n\tprivate buffering = true;\n\tprivate buffers: VSBuffer[] = [];\n\n\tprivate readonly _onMessage = new Emitter<VSBuffer>({\n\t\tonFirstListenerDidAdd: () => {\n\t\t\tfor (const buffer of this.buffers) {\n\t\t\t\tthis._onMessage.fire(buffer);\n\t\t\t}\n\n\t\t\tthis.buffers = [];\n\t\t\tthis.buffering = false;\n\t\t},\n\t\tonLastListenerRemove: () => {\n\t\t\tthis.buffering = true;\n\t\t}\n\t});\n\n\treadonly onMessage = this._onMessage.event;\n\tother!: QueueProtocol;\n\n\tsend(buffer: VSBuffer): void {\n\t\tthis.other.receive(buffer);\n\t}\n\n\tprotected receive(buffer: VSBuffer): void {\n\t\tif (this.buffering) {\n\t\t\tthis.buffers.push(buffer);\n\t\t} else {\n\t\t\tthis._onMessage.fire(buffer);\n\t\t}\n\t}\n}\n\nfunction createProtocolPair(): [IMessagePassingProtocol, IMessagePassingProtocol] {\n\tconst one = new QueueProtocol();\n\tconst other = new QueueProtocol();\n\tone.other = other;\n\tother.other = one;\n\n\treturn [one, other];\n}\n\nclass TestIPCClient extends IPCClient<string> {\n\n\tprivate readonly _onDidDisconnect = new Emitter<void>();\n\treadonly onDidDisconnect = this._onDidDisconnect.event;\n\n\tconstructor(protocol: IMessagePassingProtocol, id: string) {\n\t\tsuper(protocol, id);\n\t}\n\n\toverride dispose(): void {\n\t\tthis._onDidDisconnect.fire();\n\t\tsuper.dispose();\n\t}\n}\n\nclass TestIPCServer extends IPCServer<string> {\n\n\tprivate readonly onDidClientConnect: Emitter<ClientConnectionEvent>;\n\n\tconstructor() {\n\t\tconst onDidClientConnect = new Emitter<ClientConnectionEvent>();\n\t\tsuper(onDidClientConnect.event);\n\t\tthis.onDidClientConnect = onDidClientConnect;\n\t}\n\n\tcreateConnection(id: string): IPCClient<string> {\n\t\tconst [pc, ps] = createProtocolPair();\n\t\tconst client = new TestIPCClient(pc, id);\n\n\t\tthis.onDidClientConnect.fire({\n\t\t\tprotocol: ps,\n\t\t\tonDidClientDisconnect: client.onDidDisconnect\n\t\t});\n\n\t\treturn client;\n\t}\n}\n\nconst TestChannelId = 'testchannel';\n\ninterface ITestService {\n\tmarco(): Promise<string>;\n\terror(message: string): Promise<void>;\n\tneverComplete(): Promise<void>;\n\tneverCompleteCT(cancellationToken: CancellationToken): Promise<void>;\n\tbuffersLength(buffers: VSBuffer[]): Promise<number>;\n\tmarshall(uri: URI): Promise<URI>;\n\tcontext(): Promise<unknown>;\n\n\tonPong: Event<string>;\n}\n\nclass TestService implements ITestService {\n\n\tprivate readonly _onPong = new Emitter<string>();\n\treadonly onPong = this._onPong.event;\n\n\tmarco(): Promise<string> {\n\t\treturn Promise.resolve('polo');\n\t}\n\n\terror(message: string): Promise<void> {\n\t\treturn Promise.reject(new Error(message));\n\t}\n\n\tneverComplete(): Promise<void> {\n\t\treturn new Promise(_ => { });\n\t}\n\n\tneverCompleteCT(cancellationToken: CancellationToken): Promise<void> {\n\t\tif (cancellationToken.isCancellationRequested) {\n\t\t\treturn Promise.reject(canceled());\n\t\t}\n\n\t\treturn new Promise((_, e) => cancellationToken.onCancellationRequested(() => e(canceled())));\n\t}\n\n\tbuffersLength(buffers: VSBuffer[]): Promise<number> {\n\t\treturn Promise.resolve(buffers.reduce((r, b) => r + b.buffer.length, 0));\n\t}\n\n\tping(msg: string): void {\n\t\tthis._onPong.fire(msg);\n\t}\n\n\tmarshall(uri: URI): Promise<URI> {\n\t\treturn Promise.resolve(uri);\n\t}\n\n\tcontext(context?: unknown): Promise<unknown> {\n\t\treturn Promise.resolve(context);\n\t}\n}\n\nclass TestChannel implements IServerChannel {\n\n\tconstructor(private service: ITestService) { }\n\n\tcall(_: unknown, command: string, arg: any, cancellationToken: CancellationToken): Promise<any> {\n\t\tswitch (command) {\n\t\t\tcase 'marco': return this.service.marco();\n\t\t\tcase 'error': return this.service.error(arg);\n\t\t\tcase 'neverComplete': return this.service.neverComplete();\n\t\t\tcase 'neverCompleteCT': return this.service.neverCompleteCT(cancellationToken);\n\t\t\tcase 'buffersLength': return this.service.buffersLength(arg);\n\t\t\tdefault: return Promise.reject(new Error('not implemented'));\n\t\t}\n\t}\n\n\tlisten(_: unknown, event: string, arg?: any): Event<any> {\n\t\tswitch (event) {\n\t\t\tcase 'onPong': return this.service.onPong;\n\t\t\tdefault: throw new Error('not implemented');\n\t\t}\n\t}\n}\n\nclass TestChannelClient implements ITestService {\n\n\tget onPong(): Event<string> {\n\t\treturn this.channel.listen('onPong');\n\t}\n\n\tconstructor(private channel: IChannel) { }\n\n\tmarco(): Promise<string> {\n\t\treturn this.channel.call('marco');\n\t}\n\n\terror(message: string): Promise<void> {\n\t\treturn this.channel.call('error', message);\n\t}\n\n\tneverComplete(): Promise<void> {\n\t\treturn this.channel.call('neverComplete');\n\t}\n\n\tneverCompleteCT(cancellationToken: CancellationToken): Promise<void> {\n\t\treturn this.channel.call('neverCompleteCT', undefined, cancellationToken);\n\t}\n\n\tbuffersLength(buffers: VSBuffer[]): Promise<number> {\n\t\treturn this.channel.call('buffersLength', buffers);\n\t}\n\n\tmarshall(uri: URI): Promise<URI> {\n\t\treturn this.channel.call('marshall', uri);\n\t}\n\n\tcontext(): Promise<unknown> {\n\t\treturn this.channel.call('context');\n\t}\n}\n\nsuite('Base IPC', function () {\n\n\ttest('createProtocolPair', async function () {\n\t\tconst [clientProtocol, serverProtocol] = createProtocolPair();\n\n\t\tconst b1 = VSBuffer.alloc(0);\n\t\tclientProtocol.send(b1);\n\n\t\tconst b3 = VSBuffer.alloc(0);\n\t\tserverProtocol.send(b3);\n\n\t\tconst b2 = await Event.toPromise(serverProtocol.onMessage);\n\t\tconst b4 = await Event.toPromise(clientProtocol.onMessage);\n\n\t\tassert.strictEqual(b1, b2);\n\t\tassert.strictEqual(b3, b4);\n\t});\n\n\tsuite('one to one', function () {\n\t\tlet server: IPCServer;\n\t\tlet client: IPCClient;\n\t\tlet service: TestService;\n\t\tlet ipcService: ITestService;\n\n\t\tsetup(function () {\n\t\t\tservice = new TestService();\n\t\t\tconst testServer = new TestIPCServer();\n\t\t\tserver = testServer;\n\n\t\t\tserver.registerChannel(TestChannelId, new TestChannel(service));\n\n\t\t\tclient = testServer.createConnection('client1');\n\t\t\tipcService = new TestChannelClient(client.getChannel(TestChannelId));\n\t\t});\n\n\t\tteardown(function () {\n\t\t\tclient.dispose();\n\t\t\tserver.dispose();\n\t\t});\n\n\t\ttest('call success', async function () {\n\t\t\tconst r = await ipcService.marco();\n\t\t\treturn assert.strictEqual(r, 'polo');\n\t\t});\n\n\t\ttest('call error', async function () {\n\t\t\ttry {\n\t\t\t\tawait ipcService.error('nice error');\n\t\t\t\treturn assert.fail('should not reach here');\n\t\t\t} catch (err) {\n\t\t\t\treturn assert.strictEqual(err.message, 'nice error');\n\t\t\t}\n\t\t});\n\n\t\ttest('cancel call with cancelled cancellation token', async function () {\n\t\t\ttry {\n\t\t\t\tawait ipcService.neverCompleteCT(CancellationToken.Cancelled);\n\t\t\t\treturn assert.fail('should not reach here');\n\t\t\t} catch (err) {\n\t\t\t\treturn assert(err.message === 'Canceled');\n\t\t\t}\n\t\t});\n\n\t\ttest('cancel call with cancellation token (sync)', function () {\n\t\t\tconst cts = new CancellationTokenSource();\n\t\t\tconst promise = ipcService.neverCompleteCT(cts.token).then(\n\t\t\t\t_ => assert.fail('should not reach here'),\n\t\t\t\terr => assert(err.message === 'Canceled')\n\t\t\t);\n\n\t\t\tcts.cancel();\n\n\t\t\treturn promise;\n\t\t});\n\n\t\ttest('cancel call with cancellation token (async)', function () {\n\t\t\tconst cts = new CancellationTokenSource();\n\t\t\tconst promise = ipcService.neverCompleteCT(cts.token).then(\n\t\t\t\t_ => assert.fail('should not reach here'),\n\t\t\t\terr => assert(err.message === 'Canceled')\n\t\t\t);\n\n\t\t\tsetTimeout(() => cts.cancel());\n\n\t\t\treturn promise;\n\t\t});\n\n\t\ttest('listen to events', async function () {\n\t\t\tconst messages: string[] = [];\n\n\t\t\tipcService.onPong(msg => messages.push(msg));\n\t\t\tawait timeout(0);\n\n\t\t\tassert.deepStrictEqual(messages, []);\n\t\t\tservice.ping('hello');\n\t\t\tawait timeout(0);\n\n\t\t\tassert.deepStrictEqual(messages, ['hello']);\n\t\t\tservice.ping('world');\n\t\t\tawait timeout(0);\n\n\t\t\tassert.deepStrictEqual(messages, ['hello', 'world']);\n\t\t});\n\n\t\ttest('buffers in arrays', async function () {\n\t\t\tconst r = await ipcService.buffersLength([VSBuffer.alloc(2), VSBuffer.alloc(3)]);\n\t\t\treturn assert.strictEqual(r, 5);\n\t\t});\n\t});\n\n\tsuite('one to one (proxy)', function () {\n\t\tlet server: IPCServer;\n\t\tlet client: IPCClient;\n\t\tlet service: TestService;\n\t\tlet ipcService: ITestService;\n\n\t\tsetup(function () {\n\t\t\tservice = new TestService();\n\t\t\tconst testServer = new TestIPCServer();\n\t\t\tserver = testServer;\n\n\t\t\tserver.registerChannel(TestChannelId, ProxyChannel.fromService(service));\n\n\t\t\tclient = testServer.createConnection('client1');\n\t\t\tipcService = ProxyChannel.toService(client.getChannel(TestChannelId));\n\t\t});\n\n\t\tteardown(function () {\n\t\t\tclient.dispose();\n\t\t\tserver.dispose();\n\t\t});\n\n\t\ttest('call success', async function () {\n\t\t\tconst r = await ipcService.marco();\n\t\t\treturn assert.strictEqual(r, 'polo');\n\t\t});\n\n\t\ttest('call error', async function () {\n\t\t\ttry {\n\t\t\t\tawait ipcService.error('nice error');\n\t\t\t\treturn assert.fail('should not reach here');\n\t\t\t} catch (err) {\n\t\t\t\treturn assert.strictEqual(err.message, 'nice error');\n\t\t\t}\n\t\t});\n\n\t\ttest('listen to events', async function () {\n\t\t\tconst messages: string[] = [];\n\n\t\t\tipcService.onPong(msg => messages.push(msg));\n\t\t\tawait timeout(0);\n\n\t\t\tassert.deepStrictEqual(messages, []);\n\t\t\tservice.ping('hello');\n\t\t\tawait timeout(0);\n\n\t\t\tassert.deepStrictEqual(messages, ['hello']);\n\t\t\tservice.ping('world');\n\t\t\tawait timeout(0);\n\n\t\t\tassert.deepStrictEqual(messages, ['hello', 'world']);\n\t\t});\n\n\t\ttest('marshalling uri', async function () {\n\t\t\tconst uri = URI.file('foobar');\n\t\t\tconst r = await ipcService.marshall(uri);\n\t\t\tassert.ok(r instanceof URI);\n\t\t\treturn assert.ok(isEqual(r, uri));\n\t\t});\n\n\t\ttest('buffers in arrays', async function () {\n\t\t\tconst r = await ipcService.buffersLength([VSBuffer.alloc(2), VSBuffer.alloc(3)]);\n\t\t\treturn assert.strictEqual(r, 5);\n\t\t});\n\t});\n\n\tsuite('one to one (proxy, extra context)', function () {\n\t\tlet server: IPCServer;\n\t\tlet client: IPCClient;\n\t\tlet service: TestService;\n\t\tlet ipcService: ITestService;\n\n\t\tsetup(function () {\n\t\t\tservice = new TestService();\n\t\t\tconst testServer = new TestIPCServer();\n\t\t\tserver = testServer;\n\n\t\t\tserver.registerChannel(TestChannelId, ProxyChannel.fromService(service));\n\n\t\t\tclient = testServer.createConnection('client1');\n\t\t\tipcService = ProxyChannel.toService(client.getChannel(TestChannelId), { context: 'Super Context' });\n\t\t});\n\n\t\tteardown(function () {\n\t\t\tclient.dispose();\n\t\t\tserver.dispose();\n\t\t});\n\n\t\ttest('call extra context', async function () {\n\t\t\tconst r = await ipcService.context();\n\t\t\treturn assert.strictEqual(r, 'Super Context');\n\t\t});\n\t});\n\n\tsuite('one to many', function () {\n\t\ttest('all clients get pinged', async function () {\n\t\t\tconst service = new TestService();\n\t\t\tconst channel = new TestChannel(service);\n\t\t\tconst server = new TestIPCServer();\n\t\t\tserver.registerChannel('channel', channel);\n\n\t\t\tlet client1GotPinged = false;\n\t\t\tconst client1 = server.createConnection('client1');\n\t\t\tconst ipcService1 = new TestChannelClient(client1.getChannel('channel'));\n\t\t\tipcService1.onPong(() => client1GotPinged = true);\n\n\t\t\tlet client2GotPinged = false;\n\t\t\tconst client2 = server.createConnection('client2');\n\t\t\tconst ipcService2 = new TestChannelClient(client2.getChannel('channel'));\n\t\t\tipcService2.onPong(() => client2GotPinged = true);\n\n\t\t\tawait timeout(1);\n\t\t\tservice.ping('hello');\n\n\t\t\tawait timeout(1);\n\t\t\tassert(client1GotPinged, 'client 1 got pinged');\n\t\t\tassert(client2GotPinged, 'client 2 got pinged');\n\n\t\t\tclient1.dispose();\n\t\t\tclient2.dispose();\n\t\t\tserver.dispose();\n\t\t});\n\n\t\ttest('server gets pings from all clients (broadcast channel)', async function () {\n\t\t\tconst server = new TestIPCServer();\n\n\t\t\tconst client1 = server.createConnection('client1');\n\t\t\tconst clientService1 = new TestService();\n\t\t\tconst clientChannel1 = new TestChannel(clientService1);\n\t\t\tclient1.registerChannel('channel', clientChannel1);\n\n\t\t\tconst pings: string[] = [];\n\t\t\tconst channel = server.getChannel('channel', () => true);\n\t\t\tconst service = new TestChannelClient(channel);\n\t\t\tservice.onPong(msg => pings.push(msg));\n\n\t\t\tawait timeout(1);\n\t\t\tclientService1.ping('hello 1');\n\n\t\t\tawait timeout(1);\n\t\t\tassert.deepStrictEqual(pings, ['hello 1']);\n\n\t\t\tconst client2 = server.createConnection('client2');\n\t\t\tconst clientService2 = new TestService();\n\t\t\tconst clientChannel2 = new TestChannel(clientService2);\n\t\t\tclient2.registerChannel('channel', clientChannel2);\n\n\t\t\tawait timeout(1);\n\t\t\tclientService2.ping('hello 2');\n\n\t\t\tawait timeout(1);\n\t\t\tassert.deepStrictEqual(pings, ['hello 1', 'hello 2']);\n\n\t\t\tclient1.dispose();\n\t\t\tclientService1.ping('hello 1');\n\n\t\t\tawait timeout(1);\n\t\t\tassert.deepStrictEqual(pings, ['hello 1', 'hello 2']);\n\n\t\t\tawait timeout(1);\n\t\t\tclientService2.ping('hello again 2');\n\n\t\t\tawait timeout(1);\n\t\t\tassert.deepStrictEqual(pings, ['hello 1', 'hello 2', 'hello again 2']);\n\n\t\t\tclient2.dispose();\n\t\t\tserver.dispose();\n\t\t});\n\t});\n});\n"]}