{"version":3,"file":"ipc.cp.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/parts/ipc/test/node/ipc.cp.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { Client } from 'vs/base/parts/ipc/node/ipc.cp';\nimport { TestServiceClient } from './testService';\nimport { getPathFromAmdModule } from 'vs/base/test/node/testUtils';\n\nfunction createClient(): Client {\n\treturn new Client(getPathFromAmdModule(require, 'bootstrap-fork'), {\n\t\tserverName: 'TestServer',\n\t\tenv: { VSCODE_AMD_ENTRYPOINT: 'vs/base/parts/ipc/test/node/testApp', verbose: true }\n\t});\n}\n\nsuite('IPC, Child Process', () => {\n\ttest('createChannel', () => {\n\t\tconst client = createClient();\n\t\tconst channel = client.getChannel('test');\n\t\tconst service = new TestServiceClient(channel);\n\n\t\tconst result = service.pong('ping').then(r => {\n\t\t\tassert.strictEqual(r.incoming, 'ping');\n\t\t\tassert.strictEqual(r.outgoing, 'pong');\n\t\t});\n\n\t\treturn result.finally(() => client.dispose());\n\t});\n\n\ttest('events', () => {\n\t\tconst client = createClient();\n\t\tconst channel = client.getChannel('test');\n\t\tconst service = new TestServiceClient(channel);\n\n\t\tconst event = new Promise((c, e) => {\n\t\t\tservice.onMarco(({ answer }) => {\n\t\t\t\ttry {\n\t\t\t\t\tassert.strictEqual(answer, 'polo');\n\t\t\t\t\tc(undefined);\n\t\t\t\t} catch (err) {\n\t\t\t\t\te(err);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tconst request = service.marco();\n\t\tconst result = Promise.all([request, event]);\n\n\t\treturn result.finally(() => client.dispose());\n\t});\n\n\ttest('event dispose', () => {\n\t\tconst client = createClient();\n\t\tconst channel = client.getChannel('test');\n\t\tconst service = new TestServiceClient(channel);\n\n\t\tlet count = 0;\n\t\tconst disposable = service.onMarco(() => count++);\n\n\t\tconst result = service.marco().then(async answer => {\n\t\t\tassert.strictEqual(answer, 'polo');\n\t\t\tassert.strictEqual(count, 1);\n\n\t\t\tconst answer_1 = await service.marco();\n\t\t\tassert.strictEqual(answer_1, 'polo');\n\t\t\tassert.strictEqual(count, 2);\n\t\t\tdisposable.dispose();\n\n\t\t\tconst answer_2 = await service.marco();\n\t\t\tassert.strictEqual(answer_2, 'polo');\n\t\t\tassert.strictEqual(count, 2);\n\t\t});\n\n\t\treturn result.finally(() => client.dispose());\n\t});\n});\n"]}