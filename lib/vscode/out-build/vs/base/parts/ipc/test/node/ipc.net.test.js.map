{"version":3,"file":"ipc.net.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/parts/ipc/test/node/ipc.net.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAWhG,MAAM,aAAa;QAKlB,YAAY,CAAgC;YAC3C,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;YAC7B,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;YACpB,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;gBAClB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAC1B,IAAI,CAAC,QAAQ,EAAE,CAAC;YACjB,CAAC,CAAC,CAAC;QACJ,CAAC;QAEO,QAAQ;YACf,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;gBAC3B,OAAO;aACP;YACD,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;gBAChC,OAAO;aACP;YACD,MAAM,QAAQ,GAAG,IAAI,CAAC,gBAAgB,CAAC;YACvC,MAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,EAAG,CAAC;YAEpC,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;YAC7B,QAAQ,CAAC,GAAG,CAAC,CAAC;QACf,CAAC;QAEM,UAAU;YAChB,OAAO,IAAI,OAAO,CAAW,CAAC,QAAQ,EAAE,EAAE;gBACzC,IAAI,CAAC,gBAAgB,GAAG,QAAQ,CAAC;gBACjC,IAAI,CAAC,QAAQ,EAAE,CAAC;YACjB,CAAC,CAAC,CAAC;QACJ,CAAC;KACD;IAED,MAAM,WAAY,SAAQ,qBAAY;QACrC,YACkB,MAAa,EACb,KAAgB;YAEjC,KAAK,EAAE,CAAC;YAHS,WAAM,GAAN,MAAM,CAAO;YACb,UAAK,GAAL,KAAK,CAAW;QAGlC,CAAC;QAED,KAAK,CAAC,IAAY,EAAE,EAAa;YAChC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;gBAC3B,MAAM,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC;aAChC;YACD,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YACpC,OAAO,IAAI,CAAC;QACb,CAAC;KACD;IAED,MAAM,KAAK;QAgBV;YACC,IAAI,CAAC,EAAE,GAAG,IAAI,WAAW,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;YACrC,IAAI,CAAC,EAAE,GAAG,IAAI,WAAW,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;YACrC,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;YACd,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;QACf,CAAC;QAbD,IAAW,CAAC;YACX,OAAY,IAAI,CAAC,EAAE,CAAC;QACrB,CAAC;QAED,IAAW,CAAC;YACX,OAAY,IAAI,CAAC,EAAE,CAAC;QACrB,CAAC;QASM,KAAK,CAAC,IAAe,EAAE,IAAY;YACzC,IAAI,IAAI,KAAK,GAAG,EAAE;gBACjB,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACpB;iBAAM;gBACN,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACpB;YAED,YAAY,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;QACrC,CAAC;QAEO,QAAQ;YAEf,IAAI,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE;gBACxB,MAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBACrC,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC;gBACpB,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;gBAC3B,YAAY,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;gBACpC,OAAO;aACP;YAED,IAAI,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE;gBACxB,MAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBACrC,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC;gBACpB,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;gBAC3B,YAAY,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;gBACpC,OAAO;aACP;QAEF,CAAC;KACD;IAED,KAAK,CAAC,sBAAsB,EAAE,GAAG,EAAE;QAElC,IAAI,KAAY,CAAC;QAEjB,KAAK,CAAC,GAAG,EAAE;YACV,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC;QACrB,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,YAAY,EAAE,KAAK,IAAI,EAAE;YAE7B,MAAM,CAAC,GAAG,IAAI,kBAAQ,CAAC,IAAI,oBAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YAChD,MAAM,CAAC,GAAG,IAAI,kBAAQ,CAAC,IAAI,oBAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YAChD,MAAM,SAAS,GAAG,IAAI,aAAa,CAAC,CAAC,CAAC,CAAC;YAEvC,CAAC,CAAC,IAAI,CAAC,iBAAQ,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC;YAC5C,MAAM,IAAI,GAAG,MAAM,SAAS,CAAC,UAAU,EAAE,CAAC;YAC1C,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,cAAc,CAAC,CAAC;YAEpD,MAAM,MAAM,GAAG,iBAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACjC,MAAM,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;YAC1B,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACf,MAAM,IAAI,GAAG,MAAM,SAAS,CAAC,UAAU,EAAE,CAAC;YAC1C,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAGH,IAAI,CAAC,yBAAyB,EAAE,KAAK,IAAI,EAAE;YAE1C,MAAM,CAAC,GAAG,IAAI,kBAAQ,CAAC,IAAI,oBAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YAChD,MAAM,CAAC,GAAG,IAAI,kBAAQ,CAAC,IAAI,oBAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YAChD,MAAM,SAAS,GAAG,IAAI,aAAa,CAAC,CAAC,CAAC,CAAC;YAEvC,MAAM,IAAI,GAAG;gBACZ,EAAE,EAAE,IAAI,CAAC,EAAE;gBACX,GAAG,EAAE,KAAK;gBACV,IAAI,EAAE,IAAI;gBACV,IAAI,EAAE,aAAa,CAAC,KAAK,CAAC,EAAE,CAAC;aAC7B,CAAC;YAEF,CAAC,CAAC,IAAI,CAAC,iBAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAClD,MAAM,GAAG,GAAG,MAAM,SAAS,CAAC,UAAU,EAAE,CAAC;YACzC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;IAEJ,CAAC,CAAC,CAAC;IAEH,KAAK,CAAC,iCAAiC,EAAE,GAAG,EAAE;QAC7C,IAAI,KAAY,CAAC;QAEjB,KAAK,CAAC,GAAG,EAAE;YACV,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC;QACrB,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;YACrD,MAAM,CAAC,GAAG,IAAI,4BAAkB,CAAC,IAAI,oBAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1D,MAAM,SAAS,GAAG,IAAI,aAAa,CAAC,CAAC,CAAC,CAAC;YACvC,MAAM,CAAC,GAAG,IAAI,4BAAkB,CAAC,IAAI,oBAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1D,MAAM,SAAS,GAAG,IAAI,aAAa,CAAC,CAAC,CAAC,CAAC;YAEvC,CAAC,CAAC,IAAI,CAAC,iBAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;YAClC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC,CAAC;YAC7C,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC,CAAC;YAE7C,CAAC,CAAC,IAAI,CAAC,iBAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;YAClC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC,CAAC;YAC7C,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC,CAAC;YAE7C,CAAC,CAAC,IAAI,CAAC,iBAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;YAClC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC,CAAC;YAC7C,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC,CAAC;YAE7C,MAAM,EAAE,GAAG,MAAM,SAAS,CAAC,UAAU,EAAE,CAAC;YACxC,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,CAAC;YACxC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC,CAAC;YAC7C,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC,CAAC;YAE7C,MAAM,EAAE,GAAG,MAAM,SAAS,CAAC,UAAU,EAAE,CAAC;YACxC,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,CAAC;YACxC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC,CAAC;YAC7C,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC,CAAC;YAE7C,MAAM,EAAE,GAAG,MAAM,SAAS,CAAC,UAAU,EAAE,CAAC;YACxC,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,CAAC;YACxC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC,CAAC;YAC7C,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC,CAAC;YAE7C,CAAC,CAAC,IAAI,CAAC,iBAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;YAClC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC,CAAC;YAC7C,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC,CAAC;YAE7C,MAAM,EAAE,GAAG,MAAM,SAAS,CAAC,UAAU,EAAE,CAAC;YACxC,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,CAAC;YACxC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC,CAAC;YAC7C,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC,CAAC;YAE7C,CAAC,CAAC,IAAI,CAAC,iBAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;YAClC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC,CAAC;YAC7C,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC,CAAC;YAE7C,MAAM,EAAE,GAAG,MAAM,SAAS,CAAC,UAAU,EAAE,CAAC;YACxC,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,CAAC;YACxC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC,CAAC;YAC7C,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,KAAK,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAEhC,IAAI,CAAC,uBAAuB,EAAE,KAAK,IAAI,EAAE;YACxC,OAAO,aAAa,CAAC,CAAA,GAAA,+BAAqB,CAAA,EAAE,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,uBAAuB,EAAE,KAAK,IAAI,EAAE;YACxC,OAAO,aAAa,CAAC,CAAA,GAAA,+BAAqB,CAAA,CAAC,CAAA,GAAA,WAAM,CAAA,EAAE,EAAE,MAAM,EAAE,iBAAO,CAAC,OAAO,CAAC,CAAC,CAAC;QAChF,CAAC,CAAC,CAAC;QAEH,SAAS,aAAa,CAAC,MAAc;YACpC,OAAO,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBAC5C,MAAM,QAAQ,GAAG,CAAA,GAAA,+BAAqB,CAAA,EAAE,CAAC;gBAEzC,MAAM,MAAM,GAAG,CAAA,GAAA,kBAAY,CAAA,EAAE,CAAC;gBAE9B,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE;oBACvB,OAAO,IAAI,OAAO,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;gBACxD,CAAC,CAAC,CAAC;gBAEH,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,GAAG,EAAE;oBAC5B,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;oBAEvC,OAAO,IAAI,OAAO,CAAC,GAAG,EAAE;wBACvB,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,OAAO,EAAE,CAAC,CAAC;oBAC/B,CAAC,CAAC,CAAC;gBACJ,CAAC,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;QACJ,CAAC;IAEF,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { createServer, Socket } from 'net';\nimport { EventEmitter } from 'events';\nimport { Protocol, PersistentProtocol } from 'vs/base/parts/ipc/common/ipc.net';\nimport { createRandomIPCHandle, createStaticIPCHandle, NodeSocket } from 'vs/base/parts/ipc/node/ipc.net';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { tmpdir } from 'os';\nimport product from 'vs/platform/product/common/product';\n\nclass MessageStream {\n\n\tprivate _currentComplete: ((data: VSBuffer) => void) | null;\n\tprivate _messages: VSBuffer[];\n\n\tconstructor(x: Protocol | PersistentProtocol) {\n\t\tthis._currentComplete = null;\n\t\tthis._messages = [];\n\t\tx.onMessage(data => {\n\t\t\tthis._messages.push(data);\n\t\t\tthis._trigger();\n\t\t});\n\t}\n\n\tprivate _trigger(): void {\n\t\tif (!this._currentComplete) {\n\t\t\treturn;\n\t\t}\n\t\tif (this._messages.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst complete = this._currentComplete;\n\t\tconst msg = this._messages.shift()!;\n\n\t\tthis._currentComplete = null;\n\t\tcomplete(msg);\n\t}\n\n\tpublic waitForOne(): Promise<VSBuffer> {\n\t\treturn new Promise<VSBuffer>((complete) => {\n\t\t\tthis._currentComplete = complete;\n\t\t\tthis._trigger();\n\t\t});\n\t}\n}\n\nclass EtherStream extends EventEmitter {\n\tconstructor(\n\t\tprivate readonly _ether: Ether,\n\t\tprivate readonly _name: 'a' | 'b'\n\t) {\n\t\tsuper();\n\t}\n\n\twrite(data: Buffer, cb?: Function): boolean {\n\t\tif (!Buffer.isBuffer(data)) {\n\t\t\tthrow new Error(`Invalid data`);\n\t\t}\n\t\tthis._ether.write(this._name, data);\n\t\treturn true;\n\t}\n}\n\nclass Ether {\n\n\tprivate readonly _a: EtherStream;\n\tprivate readonly _b: EtherStream;\n\n\tprivate _ab: Buffer[];\n\tprivate _ba: Buffer[];\n\n\tpublic get a(): Socket {\n\t\treturn <any>this._a;\n\t}\n\n\tpublic get b(): Socket {\n\t\treturn <any>this._b;\n\t}\n\n\tconstructor() {\n\t\tthis._a = new EtherStream(this, 'a');\n\t\tthis._b = new EtherStream(this, 'b');\n\t\tthis._ab = [];\n\t\tthis._ba = [];\n\t}\n\n\tpublic write(from: 'a' | 'b', data: Buffer): void {\n\t\tif (from === 'a') {\n\t\t\tthis._ab.push(data);\n\t\t} else {\n\t\t\tthis._ba.push(data);\n\t\t}\n\n\t\tsetImmediate(() => this._deliver());\n\t}\n\n\tprivate _deliver(): void {\n\n\t\tif (this._ab.length > 0) {\n\t\t\tconst data = Buffer.concat(this._ab);\n\t\t\tthis._ab.length = 0;\n\t\t\tthis._b.emit('data', data);\n\t\t\tsetImmediate(() => this._deliver());\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._ba.length > 0) {\n\t\t\tconst data = Buffer.concat(this._ba);\n\t\t\tthis._ba.length = 0;\n\t\t\tthis._a.emit('data', data);\n\t\t\tsetImmediate(() => this._deliver());\n\t\t\treturn;\n\t\t}\n\n\t}\n}\n\nsuite('IPC, Socket Protocol', () => {\n\n\tlet ether: Ether;\n\n\tsetup(() => {\n\t\tether = new Ether();\n\t});\n\n\ttest('read/write', async () => {\n\n\t\tconst a = new Protocol(new NodeSocket(ether.a));\n\t\tconst b = new Protocol(new NodeSocket(ether.b));\n\t\tconst bMessages = new MessageStream(b);\n\n\t\ta.send(VSBuffer.fromString('foobarfarboo'));\n\t\tconst msg1 = await bMessages.waitForOne();\n\t\tassert.strictEqual(msg1.toString(), 'foobarfarboo');\n\n\t\tconst buffer = VSBuffer.alloc(1);\n\t\tbuffer.writeUInt8(123, 0);\n\t\ta.send(buffer);\n\t\tconst msg2 = await bMessages.waitForOne();\n\t\tassert.strictEqual(msg2.readUInt8(0), 123);\n\t});\n\n\n\ttest('read/write, object data', async () => {\n\n\t\tconst a = new Protocol(new NodeSocket(ether.a));\n\t\tconst b = new Protocol(new NodeSocket(ether.b));\n\t\tconst bMessages = new MessageStream(b);\n\n\t\tconst data = {\n\t\t\tpi: Math.PI,\n\t\t\tfoo: 'bar',\n\t\t\tmore: true,\n\t\t\tdata: 'Hello World'.split('')\n\t\t};\n\n\t\ta.send(VSBuffer.fromString(JSON.stringify(data)));\n\t\tconst msg = await bMessages.waitForOne();\n\t\tassert.deepStrictEqual(JSON.parse(msg.toString()), data);\n\t});\n\n});\n\nsuite('PersistentProtocol reconnection', () => {\n\tlet ether: Ether;\n\n\tsetup(() => {\n\t\tether = new Ether();\n\t});\n\n\ttest('acks get piggybacked with messages', async () => {\n\t\tconst a = new PersistentProtocol(new NodeSocket(ether.a));\n\t\tconst aMessages = new MessageStream(a);\n\t\tconst b = new PersistentProtocol(new NodeSocket(ether.b));\n\t\tconst bMessages = new MessageStream(b);\n\n\t\ta.send(VSBuffer.fromString('a1'));\n\t\tassert.strictEqual(a.unacknowledgedCount, 1);\n\t\tassert.strictEqual(b.unacknowledgedCount, 0);\n\n\t\ta.send(VSBuffer.fromString('a2'));\n\t\tassert.strictEqual(a.unacknowledgedCount, 2);\n\t\tassert.strictEqual(b.unacknowledgedCount, 0);\n\n\t\ta.send(VSBuffer.fromString('a3'));\n\t\tassert.strictEqual(a.unacknowledgedCount, 3);\n\t\tassert.strictEqual(b.unacknowledgedCount, 0);\n\n\t\tconst a1 = await bMessages.waitForOne();\n\t\tassert.strictEqual(a1.toString(), 'a1');\n\t\tassert.strictEqual(a.unacknowledgedCount, 3);\n\t\tassert.strictEqual(b.unacknowledgedCount, 0);\n\n\t\tconst a2 = await bMessages.waitForOne();\n\t\tassert.strictEqual(a2.toString(), 'a2');\n\t\tassert.strictEqual(a.unacknowledgedCount, 3);\n\t\tassert.strictEqual(b.unacknowledgedCount, 0);\n\n\t\tconst a3 = await bMessages.waitForOne();\n\t\tassert.strictEqual(a3.toString(), 'a3');\n\t\tassert.strictEqual(a.unacknowledgedCount, 3);\n\t\tassert.strictEqual(b.unacknowledgedCount, 0);\n\n\t\tb.send(VSBuffer.fromString('b1'));\n\t\tassert.strictEqual(a.unacknowledgedCount, 3);\n\t\tassert.strictEqual(b.unacknowledgedCount, 1);\n\n\t\tconst b1 = await aMessages.waitForOne();\n\t\tassert.strictEqual(b1.toString(), 'b1');\n\t\tassert.strictEqual(a.unacknowledgedCount, 0);\n\t\tassert.strictEqual(b.unacknowledgedCount, 1);\n\n\t\ta.send(VSBuffer.fromString('a4'));\n\t\tassert.strictEqual(a.unacknowledgedCount, 1);\n\t\tassert.strictEqual(b.unacknowledgedCount, 1);\n\n\t\tconst b2 = await bMessages.waitForOne();\n\t\tassert.strictEqual(b2.toString(), 'a4');\n\t\tassert.strictEqual(a.unacknowledgedCount, 1);\n\t\tassert.strictEqual(b.unacknowledgedCount, 0);\n\t});\n});\n\nsuite('IPC, create handle', () => {\n\n\ttest('createRandomIPCHandle', async () => {\n\t\treturn testIPCHandle(createRandomIPCHandle());\n\t});\n\n\ttest('createStaticIPCHandle', async () => {\n\t\treturn testIPCHandle(createStaticIPCHandle(tmpdir(), 'test', product.version));\n\t});\n\n\tfunction testIPCHandle(handle: string): Promise<void> {\n\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\tconst pipeName = createRandomIPCHandle();\n\n\t\t\tconst server = createServer();\n\n\t\t\tserver.on('error', () => {\n\t\t\t\treturn new Promise(() => server.close(() => reject()));\n\t\t\t});\n\n\t\t\tserver.listen(pipeName, () => {\n\t\t\t\tserver.removeListener('error', reject);\n\n\t\t\t\treturn new Promise(() => {\n\t\t\t\t\tserver.close(() => resolve());\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n});\n"]}