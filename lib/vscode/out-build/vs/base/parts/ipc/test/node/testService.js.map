{"version":3,"file":"testService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/parts/ipc/test/node/testService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAiBhG,MAAa,WAAW;QAAxB;YAEkB,aAAQ,GAAG,IAAI,eAAO,EAAmB,CAAC;YAC3D,YAAO,GAA2B,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;QAcvD,CAAC;QAZA,KAAK;YACJ,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC;YACvC,OAAO,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAChC,CAAC;QAED,IAAI,CAAC,IAAY;YAChB,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC;QAC9D,CAAC;QAED,QAAQ;YACP,OAAO,OAAO,CAAC,OAAO,CAAC,CAAA,GAAA,eAAO,CAAA,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC;QACvD,CAAC;KACD;IAjBD,kCAiBC;IAED,MAAa,WAAW;QAEvB,YAAoB,WAAyB;YAAzB,gBAAW,GAAX,WAAW,CAAc;QAAI,CAAC;QAElD,MAAM,CAAC,CAAU,EAAE,KAAa;YAC/B,QAAQ,KAAK,EAAE;gBACd,KAAK,OAAO,CAAC,CAAC,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC;aAC9C;YAED,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;QACpC,CAAC;QAED,IAAI,CAAC,CAAU,EAAE,OAAe,EAAE,GAAG,IAAW;YAC/C,QAAQ,OAAO,EAAE;gBAChB,KAAK,MAAM,CAAC,CAAC,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;gBACnD,KAAK,UAAU,CAAC,CAAC,OAAO,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;gBACpD,KAAK,OAAO,CAAC,CAAC,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;gBAC9C,OAAO,CAAC,CAAC,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,sBAAsB,OAAO,EAAE,CAAC,CAAC,CAAC;aAC3E;QACF,CAAC;KACD;IApBD,kCAoBC;IAED,MAAa,iBAAiB;QAI7B,YAAoB,OAAiB;YAAjB,YAAO,GAAP,OAAO,CAAU;QAAI,CAAC;QAF1C,IAAI,OAAO,KAA6B,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAI9E,KAAK;YACJ,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACnC,CAAC;QAED,IAAI,CAAC,IAAY;YAChB,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QACxC,CAAC;QAED,QAAQ;YACP,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACtC,CAAC;KACD;IAjBD,8CAiBC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IChannel, IServerChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { timeout } from 'vs/base/common/async';\n\nexport interface IMarcoPoloEvent {\n\tanswer: string;\n}\n\nexport interface ITestService {\n\tonMarco: Event<IMarcoPoloEvent>;\n\tmarco(): Promise<string>;\n\tpong(ping: string): Promise<{ incoming: string, outgoing: string }>;\n\tcancelMe(): Promise<boolean>;\n}\n\nexport class TestService implements ITestService {\n\n\tprivate readonly _onMarco = new Emitter<IMarcoPoloEvent>();\n\tonMarco: Event<IMarcoPoloEvent> = this._onMarco.event;\n\n\tmarco(): Promise<string> {\n\t\tthis._onMarco.fire({ answer: 'polo' });\n\t\treturn Promise.resolve('polo');\n\t}\n\n\tpong(ping: string): Promise<{ incoming: string, outgoing: string }> {\n\t\treturn Promise.resolve({ incoming: ping, outgoing: 'pong' });\n\t}\n\n\tcancelMe(): Promise<boolean> {\n\t\treturn Promise.resolve(timeout(100)).then(() => true);\n\t}\n}\n\nexport class TestChannel implements IServerChannel {\n\n\tconstructor(private testService: ITestService) { }\n\n\tlisten(_: unknown, event: string): Event<any> {\n\t\tswitch (event) {\n\t\t\tcase 'marco': return this.testService.onMarco;\n\t\t}\n\n\t\tthrow new Error('Event not found');\n\t}\n\n\tcall(_: unknown, command: string, ...args: any[]): Promise<any> {\n\t\tswitch (command) {\n\t\t\tcase 'pong': return this.testService.pong(args[0]);\n\t\t\tcase 'cancelMe': return this.testService.cancelMe();\n\t\t\tcase 'marco': return this.testService.marco();\n\t\t\tdefault: return Promise.reject(new Error(`command not found: ${command}`));\n\t\t}\n\t}\n}\n\nexport class TestServiceClient implements ITestService {\n\n\tget onMarco(): Event<IMarcoPoloEvent> { return this.channel.listen('marco'); }\n\n\tconstructor(private channel: IChannel) { }\n\n\tmarco(): Promise<string> {\n\t\treturn this.channel.call('marco');\n\t}\n\n\tpong(ping: string): Promise<{ incoming: string, outgoing: string }> {\n\t\treturn this.channel.call('pong', ping);\n\t}\n\n\tcancelMe(): Promise<boolean> {\n\t\treturn this.channel.call('cancelMe');\n\t}\n}\n"]}