{"version":3,"file":"electronTypes.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/parts/sandbox/electron-sandbox/electronTypes.ts"],"names":[],"mappings":"AAAA;;;gGAGgG","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n// #######################################################################\n// ###                                                                 ###\n// ###      electron.d.ts types we expose from electron-sandbox        ###\n// ###                    (copied from Electron 11.x)                  ###\n// ###                                                                 ###\n// #######################################################################\n\nexport interface IpcRendererEvent extends Event {\n\n\t// Docs: https://electronjs.org/docs/api/structures/ipc-renderer-event\n\n\t// Note: API with `Transferable` intentionally commented out because you\n\t// cannot transfer these when `contextIsolation: true`.\n\t// /**\n\t//  * A list of MessagePorts that were transferred with this message\n\t//  */\n\t// ports: MessagePort[];\n\t/**\n\t * The `IpcRenderer` instance that emitted the event originally\n\t */\n\tsender: IpcRenderer;\n\t/**\n\t * The `webContents.id` that sent the message, you can call\n\t * `event.sender.sendTo(event.senderId, ...)` to reply to the message, see\n\t * ipcRenderer.sendTo for more information. This only applies to messages sent from\n\t * a different renderer. Messages sent directly from the main process set\n\t * `event.senderId` to `0`.\n\t */\n\tsenderId: number;\n}\n\nexport interface IpcRenderer {\n\t/**\n\t * Listens to `channel`, when a new message arrives `listener` would be called with\n\t * `listener(event, args...)`.\n\t */\n\ton(channel: string, listener: (event: IpcRendererEvent, ...args: any[]) => void): this;\n\t/**\n\t * Adds a one time `listener` function for the event. This `listener` is invoked\n\t * only the next time a message is sent to `channel`, after which it is removed.\n\t */\n\tonce(channel: string, listener: (event: IpcRendererEvent, ...args: any[]) => void): this;\n\t/**\n\t * Removes the specified `listener` from the listener array for the specified\n\t * `channel`.\n\t */\n\tremoveListener(channel: string, listener: (...args: any[]) => void): this;\n\t/**\n\t * Send an asynchronous message to the main process via `channel`, along with\n\t * arguments. Arguments will be serialized with the Structured Clone Algorithm,\n\t * just like `window.postMessage`, so prototype chains will not be included.\n\t * Sending Functions, Promises, Symbols, WeakMaps, or WeakSets will throw an\n\t * exception.\n\t *\n\t * > **NOTE**: Sending non-standard JavaScript types such as DOM objects or special\n\t * Electron objects is deprecated, and will begin throwing an exception starting\n\t * with Electron 9.\n\t *\n\t * The main process handles it by listening for `channel` with the `ipcMain`\n\t * module.\n\t *\n\t * If you need to transfer a `MessagePort` to the main process, use\n\t * `ipcRenderer.postMessage`.\n\t *\n\t * If you want to receive a single response from the main process, like the result\n\t * of a method call, consider using `ipcRenderer.invoke`.\n\t */\n\tsend(channel: string, ...args: any[]): void;\n\t/**\n\t * Resolves with the response from the main process.\n\t *\n\t * Send a message to the main process via `channel` and expect a result\n\t * asynchronously. Arguments will be serialized with the Structured Clone\n\t * Algorithm, just like `window.postMessage`, so prototype chains will not be\n\t * included. Sending Functions, Promises, Symbols, WeakMaps, or WeakSets will throw\n\t * an exception.\n\t *\n\t * > **NOTE**: Sending non-standard JavaScript types such as DOM objects or special\n\t * Electron objects is deprecated, and will begin throwing an exception starting\n\t * with Electron 9.\n\t *\n\t * The main process should listen for `channel` with `ipcMain.handle()`.\n\t *\n\t * For example:\n\t *\n\t * If you need to transfer a `MessagePort` to the main process, use\n\t * `ipcRenderer.postMessage`.\n\t *\n\t * If you do not need a response to the message, consider using `ipcRenderer.send`.\n\t */\n\tinvoke(channel: string, ...args: any[]): Promise<any>;\n\n\t// Note: API with `Transferable` intentionally commented out because you\n\t// cannot transfer these when `contextIsolation: true`.\n\t// /**\n\t//  * Send a message to the main process, optionally transferring ownership of zero or\n\t//  * more `MessagePort` objects.\n\t//  *\n\t//  * The transferred `MessagePort` objects will be available in the main process as\n\t//  * `MessagePortMain` objects by accessing the `ports` property of the emitted\n\t//  * event.\n\t//  *\n\t//  * For example:\n\t//  *\n\t//  * For more information on using `MessagePort` and `MessageChannel`, see the MDN\n\t//  * documentation.\n\t//  */\n\t// postMessage(channel: string, message: any): void;\n}\n\nexport interface WebFrame {\n\t/**\n\t * Changes the zoom level to the specified level. The original size is 0 and each\n\t * increment above or below represents zooming 20% larger or smaller to default\n\t * limits of 300% and 50% of original size, respectively.\n\t */\n\tsetZoomLevel(level: number): void;\n}\n\nexport interface CrashReporter {\n\t/**\n\t * Set an extra parameter to be sent with the crash report. The values specified\n\t * here will be sent in addition to any values set via the `extra` option when\n\t * `start` was called.\n\t *\n\t * Parameters added in this fashion (or via the `extra` parameter to\n\t * `crashReporter.start`) are specific to the calling process. Adding extra\n\t * parameters in the main process will not cause those parameters to be sent along\n\t * with crashes from renderer or other child processes. Similarly, adding extra\n\t * parameters in a renderer process will not result in those parameters being sent\n\t * with crashes that occur in other renderer processes or in the main process.\n\t *\n\t * **Note:** Parameters have limits on the length of the keys and values. Key names\n\t * must be no longer than 39 bytes, and values must be no longer than 20320 bytes.\n\t * Keys with names longer than the maximum will be silently ignored. Key values\n\t * longer than the maximum length will be truncated.\n\t *\n\t * **Note:** On linux values that are longer than 127 bytes will be chunked into\n\t * multiple keys, each 127 bytes in length.  E.g. `addExtraParameter('foo',\n\t * 'a'.repeat(130))` will result in two chunked keys `foo__1` and `foo__2`, the\n\t * first will contain the first 127 bytes and the second will contain the remaining\n\t * 3 bytes.  On your crash reporting backend you should stitch together keys in\n\t * this format.\n\t */\n\taddExtraParameter(key: string, value: string): void;\n}\n\nexport interface ProcessMemoryInfo {\n\n\t// Docs: https://electronjs.org/docs/api/structures/process-memory-info\n\n\t/**\n\t * The amount of memory not shared by other processes, such as JS heap or HTML\n\t * content in Kilobytes.\n\t */\n\tprivate: number;\n\t/**\n\t * The amount of memory currently pinned to actual physical RAM in Kilobytes.\n\t *\n\t * @platform linux,win32\n\t */\n\tresidentSet: number;\n\t/**\n\t * The amount of memory shared between processes, typically memory consumed by the\n\t * Electron code itself in Kilobytes.\n\t */\n\tshared: number;\n}\n\nexport interface CrashReporterStartOptions {\n\t/**\n\t * URL that crash reports will be sent to as POST.\n\t */\n\tsubmitURL: string;\n\t/**\n\t * Defaults to `app.name`.\n\t */\n\tproductName?: string;\n\t/**\n\t * Deprecated alias for `{ globalExtra: { _companyName: ... } }`.\n\t *\n\t * @deprecated\n\t */\n\tcompanyName?: string;\n\t/**\n\t * Whether crash reports should be sent to the server. If false, crash reports will\n\t * be collected and stored in the crashes directory, but not uploaded. Default is\n\t * `true`.\n\t */\n\tuploadToServer?: boolean;\n\t/**\n\t * If true, crashes generated in the main process will not be forwarded to the\n\t * system crash handler. Default is `false`.\n\t */\n\tignoreSystemCrashHandler?: boolean;\n\t/**\n\t * If true, limit the number of crashes uploaded to 1/hour. Default is `false`.\n\t *\n\t * @platform darwin,win32\n\t */\n\trateLimit?: boolean;\n\t/**\n\t * If true, crash reports will be compressed and uploaded with `Content-Encoding:\n\t * gzip`. Default is `false`.\n\t */\n\tcompress?: boolean;\n\t/**\n\t * Extra string key/value annotations that will be sent along with crash reports\n\t * that are generated in the main process. Only string values are supported.\n\t * Crashes generated in child processes will not contain these extra parameters to\n\t * crash reports generated from child processes, call `addExtraParameter` from the\n\t * child process.\n\t */\n\textra?: Record<string, string>;\n\t/**\n\t * Extra string key/value annotations that will be sent along with any crash\n\t * reports generated in any process. These annotations cannot be changed once the\n\t * crash reporter has been started. If a key is present in both the global extra\n\t * parameters and the process-specific extra parameters, then the global one will\n\t * take precedence. By default, `productName` and the app version are included, as\n\t * well as the Electron version.\n\t */\n\tglobalExtra?: Record<string, string>;\n}\n\n/**\n * Additional information around a `app.on('login')` event.\n */\nexport interface AuthInfo {\n\tisProxy: boolean;\n\tscheme: string;\n\thost: string;\n\tport: number;\n\trealm: string;\n}\n"]}