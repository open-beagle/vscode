{"version":3,"file":"electronTypes.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/base/parts/sandbox/common/electronTypes.ts"],"names":[],"mappings":"AAAA;;;gGAGgG","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n// #######################################################################\n// ###                                                                 ###\n// ###      electron.d.ts types we need in a common layer for reuse    ###\n// ###                    (copied from Electron 11.x)                  ###\n// ###                                                                 ###\n// #######################################################################\n\n\nexport interface MessageBoxOptions {\n\t/**\n\t * Can be `\"none\"`, `\"info\"`, `\"error\"`, `\"question\"` or `\"warning\"`. On Windows,\n\t * `\"question\"` displays the same icon as `\"info\"`, unless you set an icon using\n\t * the `\"icon\"` option. On macOS, both `\"warning\"` and `\"error\"` display the same\n\t * warning icon.\n\t */\n\ttype?: string;\n\t/**\n\t * Array of texts for buttons. On Windows, an empty array will result in one button\n\t * labeled \"OK\".\n\t */\n\tbuttons?: string[];\n\t/**\n\t * Index of the button in the buttons array which will be selected by default when\n\t * the message box opens.\n\t */\n\tdefaultId?: number;\n\t/**\n\t * Title of the message box, some platforms will not show it.\n\t */\n\ttitle?: string;\n\t/**\n\t * Content of the message box.\n\t */\n\tmessage: string;\n\t/**\n\t * Extra information of the message.\n\t */\n\tdetail?: string;\n\t/**\n\t * If provided, the message box will include a checkbox with the given label.\n\t */\n\tcheckboxLabel?: string;\n\t/**\n\t * Initial checked state of the checkbox. `false` by default.\n\t */\n\tcheckboxChecked?: boolean;\n\t// icon?: NativeImage;\n\t/**\n\t * The index of the button to be used to cancel the dialog, via the `Esc` key. By\n\t * default this is assigned to the first button with \"cancel\" or \"no\" as the label.\n\t * If no such labeled buttons exist and this option is not set, `0` will be used as\n\t * the return value.\n\t */\n\tcancelId?: number;\n\t/**\n\t * On Windows Electron will try to figure out which one of the `buttons` are common\n\t * buttons (like \"Cancel\" or \"Yes\"), and show the others as command links in the\n\t * dialog. This can make the dialog appear in the style of modern Windows apps. If\n\t * you don't like this behavior, you can set `noLink` to `true`.\n\t */\n\tnoLink?: boolean;\n\t/**\n\t * Normalize the keyboard access keys across platforms. Default is `false`.\n\t * Enabling this assumes `&` is used in the button labels for the placement of the\n\t * keyboard shortcut access key and labels will be converted so they work correctly\n\t * on each platform, `&` characters are removed on macOS, converted to `_` on\n\t * Linux, and left untouched on Windows. For example, a button label of `Vie&w`\n\t * will be converted to `Vie_w` on Linux and `View` on macOS and can be selected\n\t * via `Alt-W` on Windows and Linux.\n\t */\n\tnormalizeAccessKeys?: boolean;\n}\n\nexport interface MessageBoxReturnValue {\n\t/**\n\t * The index of the clicked button.\n\t */\n\tresponse: number;\n\t/**\n\t * The checked state of the checkbox if `checkboxLabel` was set. Otherwise `false`.\n\t */\n\tcheckboxChecked: boolean;\n}\n\nexport interface OpenDevToolsOptions {\n\t/**\n\t * Opens the devtools with specified dock state, can be `right`, `bottom`,\n\t * `undocked`, `detach`. Defaults to last used dock state. In `undocked` mode it's\n\t * possible to dock back. In `detach` mode it's not.\n\t */\n\tmode: ('right' | 'bottom' | 'undocked' | 'detach');\n\t/**\n\t * Whether to bring the opened devtools window to the foreground. The default is\n\t * `true`.\n\t */\n\tactivate?: boolean;\n}\n\nexport interface SaveDialogOptions {\n\ttitle?: string;\n\t/**\n\t * Absolute directory path, absolute file path, or file name to use by default.\n\t */\n\tdefaultPath?: string;\n\t/**\n\t * Custom label for the confirmation button, when left empty the default label will\n\t * be used.\n\t */\n\tbuttonLabel?: string;\n\tfilters?: FileFilter[];\n\t/**\n\t * Message to display above text fields.\n\t *\n\t * @platform darwin\n\t */\n\tmessage?: string;\n\t/**\n\t * Custom label for the text displayed in front of the filename text field.\n\t *\n\t * @platform darwin\n\t */\n\tnameFieldLabel?: string;\n\t/**\n\t * Show the tags input box, defaults to `true`.\n\t *\n\t * @platform darwin\n\t */\n\tshowsTagField?: boolean;\n\tproperties?: Array<'showHiddenFiles' | 'createDirectory' | 'treatPackageAsDirectory' | 'showOverwriteConfirmation' | 'dontAddToRecent'>;\n\t/**\n\t * Create a security scoped bookmark when packaged for the Mac App Store. If this\n\t * option is enabled and the file doesn't already exist a blank file will be\n\t * created at the chosen path.\n\t *\n\t * @platform darwin,mas\n\t */\n\tsecurityScopedBookmarks?: boolean;\n}\n\nexport interface OpenDialogOptions {\n\ttitle?: string;\n\tdefaultPath?: string;\n\t/**\n\t * Custom label for the confirmation button, when left empty the default label will\n\t * be used.\n\t */\n\tbuttonLabel?: string;\n\tfilters?: FileFilter[];\n\t/**\n\t * Contains which features the dialog should use. The following values are\n\t * supported:\n\t */\n\tproperties?: Array<'openFile' | 'openDirectory' | 'multiSelections' | 'showHiddenFiles' | 'createDirectory' | 'promptToCreate' | 'noResolveAliases' | 'treatPackageAsDirectory' | 'dontAddToRecent'>;\n\t/**\n\t * Message to display above input boxes.\n\t *\n\t * @platform darwin\n\t */\n\tmessage?: string;\n\t/**\n\t * Create security scoped bookmarks when packaged for the Mac App Store.\n\t *\n\t * @platform darwin,mas\n\t */\n\tsecurityScopedBookmarks?: boolean;\n}\n\nexport interface OpenDialogReturnValue {\n\t/**\n\t * whether or not the dialog was canceled.\n\t */\n\tcanceled: boolean;\n\t/**\n\t * An array of file paths chosen by the user. If the dialog is cancelled this will\n\t * be an empty array.\n\t */\n\tfilePaths: string[];\n\t/**\n\t * An array matching the `filePaths` array of base64 encoded strings which contains\n\t * security scoped bookmark data. `securityScopedBookmarks` must be enabled for\n\t * this to be populated. (For return values, see table here.)\n\t *\n\t * @platform darwin,mas\n\t */\n\tbookmarks?: string[];\n}\n\nexport interface SaveDialogReturnValue {\n\t/**\n\t * whether or not the dialog was canceled.\n\t */\n\tcanceled: boolean;\n\t/**\n\t * If the dialog is canceled, this will be `undefined`.\n\t */\n\tfilePath?: string;\n\t/**\n\t * Base64 encoded string which contains the security scoped bookmark data for the\n\t * saved file. `securityScopedBookmarks` must be enabled for this to be present.\n\t * (For return values, see table here.)\n\t *\n\t * @platform darwin,mas\n\t */\n\tbookmark?: string;\n}\n\nexport interface FileFilter {\n\n\t// Docs: https://electronjs.org/docs/api/structures/file-filter\n\n\textensions: string[];\n\tname: string;\n}\n\nexport interface InputEvent {\n\n\t// Docs: https://electronjs.org/docs/api/structures/input-event\n\n\t/**\n\t * An array of modifiers of the event, can be `shift`, `control`, `ctrl`, `alt`,\n\t * `meta`, `command`, `cmd`, `isKeypad`, `isAutoRepeat`, `leftButtonDown`,\n\t * `middleButtonDown`, `rightButtonDown`, `capsLock`, `numLock`, `left`, `right`.\n\t */\n\tmodifiers?: Array<'shift' | 'control' | 'ctrl' | 'alt' | 'meta' | 'command' | 'cmd' | 'isKeypad' | 'isAutoRepeat' | 'leftButtonDown' | 'middleButtonDown' | 'rightButtonDown' | 'capsLock' | 'numLock' | 'left' | 'right'>;\n}\n\nexport interface MouseInputEvent extends InputEvent {\n\n\t// Docs: https://electronjs.org/docs/api/structures/mouse-input-event\n\n\t/**\n\t * The button pressed, can be `left`, `middle`, `right`.\n\t */\n\tbutton?: ('left' | 'middle' | 'right');\n\tclickCount?: number;\n\tglobalX?: number;\n\tglobalY?: number;\n\tmovementX?: number;\n\tmovementY?: number;\n\t/**\n\t * The type of the event, can be `mouseDown`, `mouseUp`, `mouseEnter`,\n\t * `mouseLeave`, `contextMenu`, `mouseWheel` or `mouseMove`.\n\t */\n\ttype: ('mouseDown' | 'mouseUp' | 'mouseEnter' | 'mouseLeave' | 'contextMenu' | 'mouseWheel' | 'mouseMove');\n\tx: number;\n\ty: number;\n}\n"]}