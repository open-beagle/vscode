{"version":3,"sources":["vs/code/electron-main/app.ts"],"names":[],"mappings":"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","file":"app.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { release, hostname } from 'os';\nimport { statSync } from 'fs';\nimport { app, ipcMain, systemPreferences, contentTracing, protocol, BrowserWindow, dialog, session } from 'electron';\nimport { IProcessEnvironment, isWindows, isMacintosh, isLinux, isLinuxSnap } from 'vs/base/common/platform';\nimport { WindowsMainService } from 'vs/platform/windows/electron-main/windowsMainService';\nimport { IWindowOpenable } from 'vs/platform/windows/common/windows';\nimport { ILifecycleMainService, LifecycleMainPhase } from 'vs/platform/lifecycle/electron-main/lifecycleMainService';\nimport { resolveShellEnv } from 'vs/platform/environment/node/shellEnv';\nimport { IUpdateService } from 'vs/platform/update/common/update';\nimport { UpdateChannel } from 'vs/platform/update/common/updateIpc';\nimport { getDelayedChannel, StaticRouter, ProxyChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { Server as ElectronIPCServer } from 'vs/base/parts/ipc/electron-main/ipc.electron';\nimport { Server as NodeIPCServer } from 'vs/base/parts/ipc/node/ipc.net';\nimport { Client as MessagePortClient } from 'vs/base/parts/ipc/electron-main/ipc.mp';\nimport { SharedProcess } from 'vs/platform/sharedProcess/electron-main/sharedProcess';\nimport { LaunchMainService, ILaunchMainService } from 'vs/platform/launch/electron-main/launchMainService';\nimport { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';\nimport { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';\nimport { ILoggerService, ILogService } from 'vs/platform/log/common/log';\nimport { IStateService } from 'vs/platform/state/node/state';\nimport { IEnvironmentMainService } from 'vs/platform/environment/electron-main/environmentMainService';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IOpenURLOptions, IURLService } from 'vs/platform/url/common/url';\nimport { URLHandlerChannelClient, URLHandlerRouter } from 'vs/platform/url/common/urlIpc';\nimport { ITelemetryService, machineIdKey } from 'vs/platform/telemetry/common/telemetry';\nimport { NullTelemetryService } from 'vs/platform/telemetry/common/telemetryUtils';\nimport { TelemetryAppenderClient } from 'vs/platform/telemetry/common/telemetryIpc';\nimport { TelemetryService, ITelemetryServiceConfig } from 'vs/platform/telemetry/common/telemetryService';\nimport { resolveCommonProperties } from 'vs/platform/telemetry/common/commonProperties';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { ProxyAuthHandler } from 'vs/code/electron-main/auth';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IWindowsMainService, ICodeWindow, OpenContext, WindowError } from 'vs/platform/windows/electron-main/windows';\nimport { URI } from 'vs/base/common/uri';\nimport { hasWorkspaceFileExtension, IWorkspacesService } from 'vs/platform/workspaces/common/workspaces';\nimport { WorkspacesMainService } from 'vs/platform/workspaces/electron-main/workspacesMainService';\nimport { getMachineId } from 'vs/base/node/id';\nimport { Win32UpdateService } from 'vs/platform/update/electron-main/updateService.win32';\nimport { LinuxUpdateService } from 'vs/platform/update/electron-main/updateService.linux';\nimport { DarwinUpdateService } from 'vs/platform/update/electron-main/updateService.darwin';\nimport { IssueMainService, IIssueMainService } from 'vs/platform/issue/electron-main/issueMainService';\nimport { LoggerChannel, LogLevelChannel } from 'vs/platform/log/common/logIpc';\nimport { setUnexpectedErrorHandler, onUnexpectedError } from 'vs/base/common/errors';\nimport { ElectronURLListener } from 'vs/platform/url/electron-main/electronUrlListener';\nimport { serve as serveDriver } from 'vs/platform/driver/electron-main/driver';\nimport { IMenubarMainService, MenubarMainService } from 'vs/platform/menubar/electron-main/menubarMainService';\nimport { registerContextMenuListener } from 'vs/base/parts/contextmenu/electron-main/contextmenu';\nimport { sep, posix, join, isAbsolute } from 'vs/base/common/path';\nimport { joinPath } from 'vs/base/common/resources';\nimport { localize } from 'vs/nls';\nimport { Schemas } from 'vs/base/common/network';\nimport { SnapUpdateService } from 'vs/platform/update/electron-main/updateService.snap';\nimport { IStorageMainService, StorageMainService } from 'vs/platform/storage/electron-main/storageMainService';\nimport { StorageDatabaseChannel } from 'vs/platform/storage/electron-main/storageIpc';\nimport { BackupMainService } from 'vs/platform/backup/electron-main/backupMainService';\nimport { IBackupMainService } from 'vs/platform/backup/electron-main/backup';\nimport { WorkspacesHistoryMainService, IWorkspacesHistoryMainService } from 'vs/platform/workspaces/electron-main/workspacesHistoryMainService';\nimport { NativeURLService } from 'vs/platform/url/common/urlService';\nimport { WorkspacesManagementMainService, IWorkspacesManagementMainService } from 'vs/platform/workspaces/electron-main/workspacesManagementMainService';\nimport { IDiagnosticsService } from 'vs/platform/diagnostics/common/diagnostics';\nimport { ElectronExtensionHostDebugBroadcastChannel } from 'vs/platform/debug/electron-main/extensionHostDebugIpc';\nimport { INativeHostMainService, NativeHostMainService } from 'vs/platform/native/electron-main/nativeHostMainService';\nimport { IDialogMainService, DialogMainService } from 'vs/platform/dialogs/electron-main/dialogMainService';\nimport { withNullAsUndefined } from 'vs/base/common/types';\nimport { mnemonicButtonLabel, getPathLabel } from 'vs/base/common/labels';\nimport { WebviewMainService } from 'vs/platform/webview/electron-main/webviewMainService';\nimport { IWebviewManagerService } from 'vs/platform/webview/common/webviewManagerService';\nimport { FileOperationError, FileOperationResult, IFileService } from 'vs/platform/files/common/files';\nimport { stripComments } from 'vs/base/common/json';\nimport { generateUuid } from 'vs/base/common/uuid';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { EncryptionMainService, IEncryptionMainService } from 'vs/platform/encryption/electron-main/encryptionMainService';\nimport { ActiveWindowManager } from 'vs/platform/windows/node/windowTracker';\nimport { IKeyboardLayoutMainService, KeyboardLayoutMainService } from 'vs/platform/keyboardLayout/electron-main/keyboardLayoutMainService';\nimport { NativeParsedArgs } from 'vs/platform/environment/common/argv';\nimport { isLaunchedFromCli } from 'vs/platform/environment/node/argvHelper';\nimport { isEqualOrParent } from 'vs/base/common/extpath';\nimport { CancellationToken, CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { IExtensionUrlTrustService } from 'vs/platform/extensionManagement/common/extensionUrlTrust';\nimport { ExtensionUrlTrustService } from 'vs/platform/extensionManagement/node/extensionUrlTrustService';\nimport { once } from 'vs/base/common/functional';\nimport { getRemoteAuthority } from 'vs/platform/remote/common/remoteHosts';\nimport { ISignService } from 'vs/platform/sign/common/sign';\n\n/**\n * The main VS Code application. There will only ever be one instance,\n * even if the user starts many instances (e.g. from the command line).\n */\nexport class CodeApplication extends Disposable {\n\n\tprivate windowsMainService: IWindowsMainService | undefined;\n\tprivate nativeHostMainService: INativeHostMainService | undefined;\n\n\tconstructor(\n\t\tprivate readonly mainProcessNodeIpcServer: NodeIPCServer,\n\t\tprivate readonly userEnv: IProcessEnvironment,\n\t\t@IInstantiationService private readonly mainInstantiationService: IInstantiationService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IEnvironmentMainService private readonly environmentMainService: IEnvironmentMainService,\n\t\t@ILifecycleMainService private readonly lifecycleMainService: ILifecycleMainService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IStateService private readonly stateService: IStateService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IProductService private readonly productService: IProductService\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// We handle uncaught exceptions here to prevent electron from opening a dialog to the user\n\t\tsetUnexpectedErrorHandler(err => this.onUnexpectedError(err));\n\t\tprocess.on('uncaughtException', err => this.onUnexpectedError(err));\n\t\tprocess.on('unhandledRejection', (reason: unknown) => onUnexpectedError(reason));\n\n\t\t// Dispose on shutdown\n\t\tthis.lifecycleMainService.onWillShutdown(() => this.dispose());\n\n\t\t// Contextmenu via IPC support\n\t\tregisterContextMenuListener();\n\n\t\t// Accessibility change event\n\t\tapp.on('accessibility-support-changed', (event, accessibilitySupportEnabled) => {\n\t\t\tthis.windowsMainService?.sendToAll('vscode:accessibilitySupportChanged', accessibilitySupportEnabled);\n\t\t});\n\n\t\t// macOS dock activate\n\t\tapp.on('activate', (event, hasVisibleWindows) => {\n\t\t\tthis.logService.trace('app#activate');\n\n\t\t\t// Mac only event: open new window when we get activated\n\t\t\tif (!hasVisibleWindows) {\n\t\t\t\tthis.windowsMainService?.openEmptyWindow({ context: OpenContext.DOCK });\n\t\t\t}\n\t\t});\n\n\t\t//#region Security related measures (https://electronjs.org/docs/tutorial/security)\n\t\t//\n\t\t// !!! DO NOT CHANGE without consulting the documentation !!!\n\t\t//\n\t\tapp.on('remote-require', (event, sender, module) => {\n\t\t\tthis.logService.trace('app#on(remote-require): prevented');\n\n\t\t\tevent.preventDefault();\n\t\t});\n\t\tapp.on('remote-get-global', (event, sender, module) => {\n\t\t\tthis.logService.trace(`app#on(remote-get-global): prevented on ${module}`);\n\n\t\t\tevent.preventDefault();\n\t\t});\n\t\tapp.on('remote-get-builtin', (event, sender, module) => {\n\t\t\tthis.logService.trace(`app#on(remote-get-builtin): prevented on ${module}`);\n\n\t\t\tif (module !== 'clipboard') {\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\t\t});\n\t\tapp.on('remote-get-current-window', event => {\n\t\t\tthis.logService.trace(`app#on(remote-get-current-window): prevented`);\n\n\t\t\tevent.preventDefault();\n\t\t});\n\t\tapp.on('remote-get-current-web-contents', event => {\n\t\t\tif (this.environmentMainService.args.driver) {\n\t\t\t\treturn; // the driver needs access to web contents\n\t\t\t}\n\n\t\t\tthis.logService.trace(`app#on(remote-get-current-web-contents): prevented`);\n\n\t\t\tevent.preventDefault();\n\t\t});\n\t\tapp.on('web-contents-created', (event, contents) => {\n\t\t\tcontents.on('will-attach-webview', (event, webPreferences, params) => {\n\n\t\t\t\tconst isValidWebviewSource = (source: string | undefined): boolean => {\n\t\t\t\t\tif (!source) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst uri = URI.parse(source);\n\t\t\t\t\tif (uri.scheme === Schemas.vscodeWebview) {\n\t\t\t\t\t\treturn uri.path === '/index.html' || uri.path === '/electron-browser-index.html';\n\t\t\t\t\t}\n\n\t\t\t\t\tconst srcUri = uri.fsPath.toLowerCase();\n\t\t\t\t\tconst rootUri = URI.file(this.environmentMainService.appRoot).fsPath.toLowerCase();\n\n\t\t\t\t\treturn srcUri.startsWith(rootUri + sep);\n\t\t\t\t};\n\n\t\t\t\t// Ensure defaults\n\t\t\t\tdelete webPreferences.preload;\n\t\t\t\twebPreferences.nodeIntegration = false;\n\n\t\t\t\t// Verify URLs being loaded\n\t\t\t\t// https://github.com/electron/electron/issues/21553\n\t\t\t\tif (isValidWebviewSource(params.src) && isValidWebviewSource((webPreferences as { preloadURL: string }).preloadURL)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tdelete (webPreferences as { preloadURL: string | undefined }).preloadURL; // https://github.com/electron/electron/issues/21553\n\n\t\t\t\t// Otherwise prevent loading\n\t\t\t\tthis.logService.error('webContents#web-contents-created: Prevented webview attach');\n\n\t\t\t\tevent.preventDefault();\n\t\t\t});\n\n\t\t\tcontents.on('will-navigate', event => {\n\t\t\t\tthis.logService.error('webContents#will-navigate: Prevented webcontent navigation');\n\n\t\t\t\tevent.preventDefault();\n\t\t\t});\n\n\t\t\tcontents.on('new-window', (event, url) => {\n\t\t\t\tevent.preventDefault(); // prevent code that wants to open links\n\n\t\t\t\tthis.nativeHostMainService?.openExternal(undefined, url);\n\t\t\t});\n\n\t\t\tconst isUrlFromWebview = (requestingUrl: string) =>\n\t\t\t\trequestingUrl.startsWith(`${Schemas.vscodeWebview}://`);\n\n\t\t\tsession.defaultSession.setPermissionRequestHandler((_webContents, permission /* 'media' | 'geolocation' | 'notifications' | 'midiSysex' | 'pointerLock' | 'fullscreen' | 'openExternal' */, callback, details) => {\n\t\t\t\tif (isUrlFromWebview(details.requestingUrl)) {\n\t\t\t\t\treturn callback(permission === 'clipboard-read');\n\t\t\t\t}\n\t\t\t\treturn callback(false);\n\t\t\t});\n\n\t\t\tsession.defaultSession.setPermissionCheckHandler((_webContents, permission /* 'media' */, _origin, details) => {\n\t\t\t\tif (isUrlFromWebview(details.requestingUrl)) {\n\t\t\t\t\treturn permission === 'clipboard-read';\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t});\n\t\t});\n\n\t\t//#endregion\n\n\t\tlet macOpenFileURIs: IWindowOpenable[] = [];\n\t\tlet runningTimeout: NodeJS.Timeout | null = null;\n\t\tapp.on('open-file', (event, path) => {\n\t\t\tthis.logService.trace('app#open-file: ', path);\n\t\t\tevent.preventDefault();\n\n\t\t\t// Keep in array because more might come!\n\t\t\tmacOpenFileURIs.push(this.getWindowOpenableFromPathSync(path));\n\n\t\t\t// Clear previous handler if any\n\t\t\tif (runningTimeout !== null) {\n\t\t\t\tclearTimeout(runningTimeout);\n\t\t\t\trunningTimeout = null;\n\t\t\t}\n\n\t\t\t// Handle paths delayed in case more are coming!\n\t\t\trunningTimeout = setTimeout(() => {\n\t\t\t\tthis.windowsMainService?.open({\n\t\t\t\t\tcontext: OpenContext.DOCK /* can also be opening from finder while app is running */,\n\t\t\t\t\tcli: this.environmentMainService.args,\n\t\t\t\t\turisToOpen: macOpenFileURIs,\n\t\t\t\t\tgotoLineMode: false,\n\t\t\t\t\tpreferNewWindow: true /* dropping on the dock or opening from finder prefers to open in a new window */\n\t\t\t\t});\n\n\t\t\t\tmacOpenFileURIs = [];\n\t\t\t\trunningTimeout = null;\n\t\t\t}, 100);\n\t\t});\n\n\t\tapp.on('new-window-for-tab', () => {\n\t\t\tthis.windowsMainService?.openEmptyWindow({ context: OpenContext.DESKTOP }); //macOS native tab \"+\" button\n\t\t});\n\n\t\t//#region Bootstrap IPC Handlers\n\n\t\tlet slowShellResolveWarningShown = false;\n\t\tipcMain.handle('vscode:fetchShellEnv', event => {\n\t\t\treturn new Promise(async resolve => {\n\n\t\t\t\t// DO NOT remove: not only usual windows are fetching the\n\t\t\t\t// shell environment but also shared process, issue reporter\n\t\t\t\t// etc, so we need to reply via `webContents` always\n\t\t\t\tconst webContents = event.sender;\n\n\t\t\t\tlet replied = false;\n\n\t\t\t\tfunction acceptShellEnv(env: IProcessEnvironment): void {\n\t\t\t\t\tclearTimeout(shellEnvSlowWarningHandle);\n\t\t\t\t\tclearTimeout(shellEnvTimeoutErrorHandle);\n\n\t\t\t\t\tif (!replied) {\n\t\t\t\t\t\treplied = true;\n\n\t\t\t\t\t\tif (!webContents.isDestroyed()) {\n\t\t\t\t\t\t\tresolve(env);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Handle slow shell environment resolve calls:\n\t\t\t\t// - a warning after 3s but continue to resolve (only once in active window)\n\t\t\t\t// - an error after 10s and stop trying to resolve (in every window where this happens)\n\t\t\t\tconst cts = new CancellationTokenSource();\n\n\t\t\t\tconst shellEnvSlowWarningHandle = setTimeout(() => {\n\t\t\t\t\tif (!slowShellResolveWarningShown) {\n\t\t\t\t\t\tthis.windowsMainService?.sendToFocused('vscode:showShellEnvSlowWarning', cts.token);\n\t\t\t\t\t\tslowShellResolveWarningShown = true;\n\t\t\t\t\t}\n\t\t\t\t}, 3000);\n\n\t\t\t\tconst window = this.windowsMainService?.getWindowByWebContents(event.sender); // Note: this can be `undefined` for the shared process!!\n\t\t\t\tconst shellEnvTimeoutErrorHandle = setTimeout(() => {\n\t\t\t\t\tcts.dispose(true);\n\t\t\t\t\twindow?.sendWhenReady('vscode:showShellEnvTimeoutError', CancellationToken.None);\n\t\t\t\t\tacceptShellEnv({});\n\t\t\t\t}, 10000);\n\n\t\t\t\t// Prefer to use the args and env from the target window\n\t\t\t\t// when resolving the shell env. It is possible that\n\t\t\t\t// a first window was opened from the UI but a second\n\t\t\t\t// from the CLI and that has implications for whether to\n\t\t\t\t// resolve the shell environment or not.\n\t\t\t\t//\n\t\t\t\t// Window can be undefined for e.g. the shared process\n\t\t\t\t// that is not part of our windows registry!\n\t\t\t\tlet args: NativeParsedArgs;\n\t\t\t\tlet env: IProcessEnvironment;\n\t\t\t\tif (window?.config) {\n\t\t\t\t\targs = window.config;\n\t\t\t\t\tenv = { ...process.env, ...window.config.userEnv };\n\t\t\t\t} else {\n\t\t\t\t\targs = this.environmentMainService.args;\n\t\t\t\t\tenv = process.env;\n\t\t\t\t}\n\n\t\t\t\t// Resolve shell env\n\t\t\t\tconst shellEnv = await resolveShellEnv(this.logService, args, env);\n\t\t\t\tacceptShellEnv(shellEnv);\n\t\t\t});\n\t\t});\n\n\t\tipcMain.handle('vscode:writeNlsFile', (event, path: unknown, data: unknown) => {\n\t\t\tconst uri = this.validateNlsPath([path]);\n\t\t\tif (!uri || typeof data !== 'string') {\n\t\t\t\tthrow new Error('Invalid operation (vscode:writeNlsFile)');\n\t\t\t}\n\n\t\t\treturn this.fileService.writeFile(uri, VSBuffer.fromString(data));\n\t\t});\n\n\t\tipcMain.handle('vscode:readNlsFile', async (event, ...paths: unknown[]) => {\n\t\t\tconst uri = this.validateNlsPath(paths);\n\t\t\tif (!uri) {\n\t\t\t\tthrow new Error('Invalid operation (vscode:readNlsFile)');\n\t\t\t}\n\n\t\t\treturn (await this.fileService.readFile(uri)).value.toString();\n\t\t});\n\n\t\tipcMain.on('vscode:toggleDevTools', event => event.sender.toggleDevTools());\n\t\tipcMain.on('vscode:openDevTools', event => event.sender.openDevTools());\n\n\t\tipcMain.on('vscode:reloadWindow', event => event.sender.reload());\n\n\t\t//#endregion\n\t}\n\n\tprivate validateNlsPath(pathSegments: unknown[]): URI | undefined {\n\t\tlet path: string | undefined = undefined;\n\n\t\tfor (const pathSegment of pathSegments) {\n\t\t\tif (typeof pathSegment === 'string') {\n\t\t\t\tif (typeof path !== 'string') {\n\t\t\t\t\tpath = pathSegment;\n\t\t\t\t} else {\n\t\t\t\t\tpath = join(path, pathSegment);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof path !== 'string' || !isAbsolute(path) || !isEqualOrParent(path, this.environmentMainService.cachedLanguagesPath, !isLinux)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn URI.file(path);\n\t}\n\n\tprivate onUnexpectedError(err: Error): void {\n\t\tif (err) {\n\n\t\t\t// take only the message and stack property\n\t\t\tconst friendlyError = {\n\t\t\t\tmessage: `[uncaught exception in main]: ${err.message}`,\n\t\t\t\tstack: err.stack\n\t\t\t};\n\n\t\t\t// handle on client side\n\t\t\tthis.windowsMainService?.sendToFocused('vscode:reportError', JSON.stringify(friendlyError));\n\t\t}\n\n\t\tthis.logService.error(`[uncaught exception in main]: ${err}`);\n\t\tif (err.stack) {\n\t\t\tthis.logService.error(err.stack);\n\t\t}\n\t}\n\n\tasync startup(): Promise<void> {\n\t\tthis.logService.debug('Starting VS Code');\n\t\tthis.logService.debug(`from: ${this.environmentMainService.appRoot}`);\n\t\tthis.logService.debug('args:', this.environmentMainService.args);\n\n\t\t// TODO@bpasero TODO@deepak1556 workaround for #120655\n\t\ttry {\n\t\t\tconst cachedDataPath = URI.file(this.environmentMainService.chromeCachedDataDir);\n\t\t\tthis.logService.trace(`Deleting Chrome cached data path: ${cachedDataPath.fsPath}`);\n\n\t\t\tawait this.fileService.del(cachedDataPath, { recursive: true });\n\t\t} catch (error) {\n\t\t\tif ((<FileOperationError>error).fileOperationResult !== FileOperationResult.FILE_NOT_FOUND) {\n\t\t\t\tthis.logService.error(error);\n\t\t\t}\n\t\t}\n\n\t\t// Make sure we associate the program with the app user model id\n\t\t// This will help Windows to associate the running program with\n\t\t// any shortcut that is pinned to the taskbar and prevent showing\n\t\t// two icons in the taskbar for the same app.\n\t\tconst win32AppUserModelId = this.productService.win32AppUserModelId;\n\t\tif (isWindows && win32AppUserModelId) {\n\t\t\tapp.setAppUserModelId(win32AppUserModelId);\n\t\t}\n\n\t\t// Fix native tabs on macOS 10.13\n\t\t// macOS enables a compatibility patch for any bundle ID beginning with\n\t\t// \"com.microsoft.\", which breaks native tabs for VS Code when using this\n\t\t// identifier (from the official build).\n\t\t// Explicitly opt out of the patch here before creating any windows.\n\t\t// See: https://github.com/microsoft/vscode/issues/35361#issuecomment-399794085\n\t\ttry {\n\t\t\tif (isMacintosh && this.configurationService.getValue<boolean>('window.nativeTabs') === true && !systemPreferences.getUserDefault('NSUseImprovedLayoutPass', 'boolean')) {\n\t\t\t\tsystemPreferences.setUserDefault('NSUseImprovedLayoutPass', 'boolean', true as any);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.logService.error(error);\n\t\t}\n\n\t\t// Main process server (electron IPC based)\n\t\tconst mainProcessElectronServer = new ElectronIPCServer();\n\n\t\t// Resolve unique machine ID\n\t\tthis.logService.trace('Resolving machine identifier...');\n\t\tconst machineId = await this.resolveMachineId();\n\t\tthis.logService.trace(`Resolved machine identifier: ${machineId}`);\n\n\t\t// Shared process\n\t\tconst { sharedProcess, sharedProcessReady, sharedProcessClient } = this.setupSharedProcess(machineId);\n\n\t\t// Services\n\t\tconst appInstantiationService = await this.initServices(machineId, sharedProcess, sharedProcessReady);\n\n\t\t// Create driver\n\t\tif (this.environmentMainService.driverHandle) {\n\t\t\tconst server = await serveDriver(mainProcessElectronServer, this.environmentMainService.driverHandle, this.environmentMainService, appInstantiationService);\n\n\t\t\tthis.logService.info('Driver started at:', this.environmentMainService.driverHandle);\n\t\t\tthis._register(server);\n\t\t}\n\n\t\t// Setup Auth Handler\n\t\tthis._register(appInstantiationService.createInstance(ProxyAuthHandler));\n\n\t\t// Init Channels\n\t\tappInstantiationService.invokeFunction(accessor => this.initChannels(accessor, mainProcessElectronServer, sharedProcessClient));\n\n\t\t// Open Windows\n\t\tconst windows = appInstantiationService.invokeFunction(accessor => this.openFirstWindow(accessor, mainProcessElectronServer));\n\n\t\t// Post Open Windows Tasks\n\t\tappInstantiationService.invokeFunction(accessor => this.afterWindowOpen(accessor, sharedProcess));\n\n\t\t// Tracing: Stop tracing after windows are ready if enabled\n\t\tif (this.environmentMainService.args.trace) {\n\t\t\tappInstantiationService.invokeFunction(accessor => this.stopTracingEventually(accessor, windows));\n\t\t}\n\t}\n\n\tprivate async resolveMachineId(): Promise<string> {\n\n\t\t// We cache the machineId for faster lookups on startup\n\t\t// and resolve it only once initially if not cached or we need to replace the macOS iBridge device\n\t\tlet machineId = this.stateService.getItem<string>(machineIdKey);\n\t\tif (!machineId || (isMacintosh && machineId === '6c9d2bc8f91b89624add29c0abeae7fb42bf539fa1cdb2e3e57cd668fa9bcead')) {\n\t\t\tmachineId = await getMachineId();\n\n\t\t\tthis.stateService.setItem(machineIdKey, machineId);\n\t\t}\n\n\t\treturn machineId;\n\t}\n\n\tprivate setupSharedProcess(machineId: string): { sharedProcess: SharedProcess, sharedProcessReady: Promise<MessagePortClient>, sharedProcessClient: Promise<MessagePortClient> } {\n\t\tconst sharedProcess = this._register(this.mainInstantiationService.createInstance(SharedProcess, machineId, this.userEnv));\n\n\t\tconst sharedProcessClient = (async () => {\n\t\t\tthis.logService.trace('Main->SharedProcess#connect');\n\n\t\t\tconst port = await sharedProcess.connect();\n\n\t\t\tthis.logService.trace('Main->SharedProcess#connect: connection established');\n\n\t\t\treturn new MessagePortClient(port, 'main');\n\t\t})();\n\n\t\tconst sharedProcessReady = (async () => {\n\t\t\tawait sharedProcess.whenReady();\n\n\t\t\treturn sharedProcessClient;\n\t\t})();\n\n\t\treturn { sharedProcess, sharedProcessReady, sharedProcessClient };\n\t}\n\n\tprivate async initServices(machineId: string, sharedProcess: SharedProcess, sharedProcessReady: Promise<MessagePortClient>): Promise<IInstantiationService> {\n\t\tconst services = new ServiceCollection();\n\n\t\t// Update\n\t\tswitch (process.platform) {\n\t\t\tcase 'win32':\n\t\t\t\tservices.set(IUpdateService, new SyncDescriptor(Win32UpdateService));\n\t\t\t\tbreak;\n\n\t\t\tcase 'linux':\n\t\t\t\tif (isLinuxSnap) {\n\t\t\t\t\tservices.set(IUpdateService, new SyncDescriptor(SnapUpdateService, [process.env['SNAP'], process.env['SNAP_REVISION']]));\n\t\t\t\t} else {\n\t\t\t\t\tservices.set(IUpdateService, new SyncDescriptor(LinuxUpdateService));\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'darwin':\n\t\t\t\tservices.set(IUpdateService, new SyncDescriptor(DarwinUpdateService));\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// Windows\n\t\tservices.set(IWindowsMainService, new SyncDescriptor(WindowsMainService, [machineId, this.userEnv]));\n\n\t\t// Dialogs\n\t\tservices.set(IDialogMainService, new SyncDescriptor(DialogMainService));\n\n\t\t// Launch\n\t\tservices.set(ILaunchMainService, new SyncDescriptor(LaunchMainService));\n\n\t\t// Diagnostics\n\t\tservices.set(IDiagnosticsService, ProxyChannel.toService(getDelayedChannel(sharedProcessReady.then(client => client.getChannel('diagnostics')))));\n\n\t\t// Issues\n\t\tservices.set(IIssueMainService, new SyncDescriptor(IssueMainService, [this.userEnv]));\n\n\t\t// Encryption\n\t\tservices.set(IEncryptionMainService, new SyncDescriptor(EncryptionMainService, [machineId]));\n\n\t\t// Keyboard Layout\n\t\tservices.set(IKeyboardLayoutMainService, new SyncDescriptor(KeyboardLayoutMainService));\n\n\t\t// Native Host\n\t\tservices.set(INativeHostMainService, new SyncDescriptor(NativeHostMainService, [sharedProcess]));\n\n\t\t// Webview Manager\n\t\tservices.set(IWebviewManagerService, new SyncDescriptor(WebviewMainService));\n\n\t\t// Workspaces\n\t\tservices.set(IWorkspacesService, new SyncDescriptor(WorkspacesMainService));\n\t\tservices.set(IWorkspacesManagementMainService, new SyncDescriptor(WorkspacesManagementMainService));\n\t\tservices.set(IWorkspacesHistoryMainService, new SyncDescriptor(WorkspacesHistoryMainService));\n\n\t\t// Menubar\n\t\tservices.set(IMenubarMainService, new SyncDescriptor(MenubarMainService));\n\n\t\t// Extension URL Trust\n\t\tservices.set(IExtensionUrlTrustService, new SyncDescriptor(ExtensionUrlTrustService));\n\n\t\t// Storage\n\t\tservices.set(IStorageMainService, new SyncDescriptor(StorageMainService));\n\n\t\t// Backups\n\t\tconst backupMainService = new BackupMainService(this.environmentMainService, this.configurationService, this.logService);\n\t\tservices.set(IBackupMainService, backupMainService);\n\n\t\t// URL handling\n\t\tservices.set(IURLService, new SyncDescriptor(NativeURLService));\n\n\t\t// Telemetry\n\t\tif (!this.environmentMainService.isExtensionDevelopment && !this.environmentMainService.args['disable-telemetry'] && !!this.productService.enableTelemetry) {\n\t\t\tconst channel = getDelayedChannel(sharedProcessReady.then(client => client.getChannel('telemetryAppender')));\n\t\t\tconst appender = new TelemetryAppenderClient(channel);\n\t\t\tconst commonProperties = resolveCommonProperties(this.fileService, release(), hostname(), process.arch, this.productService.commit, this.productService.version, machineId, this.productService.msftInternalDomains, this.environmentMainService.installSourcePath);\n\t\t\tconst piiPaths = [this.environmentMainService.appRoot, this.environmentMainService.extensionsPath];\n\t\t\tconst config: ITelemetryServiceConfig = { appender, commonProperties, piiPaths, sendErrorTelemetry: true };\n\n\t\t\tservices.set(ITelemetryService, new SyncDescriptor(TelemetryService, [config]));\n\t\t} else {\n\t\t\tservices.set(ITelemetryService, NullTelemetryService);\n\t\t}\n\n\t\t// Init services that require it\n\t\tawait backupMainService.initialize();\n\n\t\treturn this.mainInstantiationService.createChild(services);\n\t}\n\n\tprivate initChannels(accessor: ServicesAccessor, mainProcessElectronServer: ElectronIPCServer, sharedProcessClient: Promise<MessagePortClient>): void {\n\n\t\t// Launch: this one is explicitly registered to the node.js\n\t\t// server because when a second instance starts up, that is\n\t\t// the only possible connection between the first and the\n\t\t// second instance. Electron IPC does not work across apps.\n\t\tconst launchChannel = ProxyChannel.fromService(accessor.get(ILaunchMainService), { disableMarshalling: true });\n\t\tthis.mainProcessNodeIpcServer.registerChannel('launch', launchChannel);\n\n\t\t// Update\n\t\tconst updateChannel = new UpdateChannel(accessor.get(IUpdateService));\n\t\tmainProcessElectronServer.registerChannel('update', updateChannel);\n\n\t\t// Issues\n\t\tconst issueChannel = ProxyChannel.fromService(accessor.get(IIssueMainService));\n\t\tmainProcessElectronServer.registerChannel('issue', issueChannel);\n\n\t\t// Encryption\n\t\tconst encryptionChannel = ProxyChannel.fromService(accessor.get(IEncryptionMainService));\n\t\tmainProcessElectronServer.registerChannel('encryption', encryptionChannel);\n\n\t\t// Signing\n\t\tconst signChannel = ProxyChannel.fromService(accessor.get(ISignService));\n\t\tmainProcessElectronServer.registerChannel('sign', signChannel);\n\n\t\t// Keyboard Layout\n\t\tconst keyboardLayoutChannel = ProxyChannel.fromService(accessor.get(IKeyboardLayoutMainService));\n\t\tmainProcessElectronServer.registerChannel('keyboardLayout', keyboardLayoutChannel);\n\n\t\t// Native host (main & shared process)\n\t\tthis.nativeHostMainService = accessor.get(INativeHostMainService);\n\t\tconst nativeHostChannel = ProxyChannel.fromService(this.nativeHostMainService);\n\t\tmainProcessElectronServer.registerChannel('nativeHost', nativeHostChannel);\n\t\tsharedProcessClient.then(client => client.registerChannel('nativeHost', nativeHostChannel));\n\n\t\t// Workspaces\n\t\tconst workspacesChannel = ProxyChannel.fromService(accessor.get(IWorkspacesService));\n\t\tmainProcessElectronServer.registerChannel('workspaces', workspacesChannel);\n\n\t\t// Menubar\n\t\tconst menubarChannel = ProxyChannel.fromService(accessor.get(IMenubarMainService));\n\t\tmainProcessElectronServer.registerChannel('menubar', menubarChannel);\n\n\t\t// URL handling\n\t\tconst urlChannel = ProxyChannel.fromService(accessor.get(IURLService));\n\t\tmainProcessElectronServer.registerChannel('url', urlChannel);\n\n\t\t// Extension URL Trust\n\t\tconst extensionUrlTrustChannel = ProxyChannel.fromService(accessor.get(IExtensionUrlTrustService));\n\t\tmainProcessElectronServer.registerChannel('extensionUrlTrust', extensionUrlTrustChannel);\n\n\t\t// Webview Manager\n\t\tconst webviewChannel = ProxyChannel.fromService(accessor.get(IWebviewManagerService));\n\t\tmainProcessElectronServer.registerChannel('webview', webviewChannel);\n\n\t\t// Storage (main & shared process)\n\t\tconst storageChannel = this._register(new StorageDatabaseChannel(this.logService, accessor.get(IStorageMainService)));\n\t\tmainProcessElectronServer.registerChannel('storage', storageChannel);\n\t\tsharedProcessClient.then(client => client.registerChannel('storage', storageChannel));\n\n\t\t// Log Level (main & shared process)\n\t\tconst logLevelChannel = new LogLevelChannel(accessor.get(ILogService));\n\t\tmainProcessElectronServer.registerChannel('logLevel', logLevelChannel);\n\t\tsharedProcessClient.then(client => client.registerChannel('logLevel', logLevelChannel));\n\n\t\t// Logger\n\t\tconst loggerChannel = new LoggerChannel(accessor.get(ILoggerService),);\n\t\tmainProcessElectronServer.registerChannel('logger', loggerChannel);\n\t\tsharedProcessClient.then(client => client.registerChannel('logger', loggerChannel));\n\n\t\t// Extension Host Debug Broadcasting\n\t\tconst electronExtensionHostDebugBroadcastChannel = new ElectronExtensionHostDebugBroadcastChannel(accessor.get(IWindowsMainService));\n\t\tmainProcessElectronServer.registerChannel('extensionhostdebugservice', electronExtensionHostDebugBroadcastChannel);\n\t}\n\n\tprivate openFirstWindow(accessor: ServicesAccessor, mainProcessElectronServer: ElectronIPCServer): ICodeWindow[] {\n\t\tconst windowsMainService = this.windowsMainService = accessor.get(IWindowsMainService);\n\t\tconst urlService = accessor.get(IURLService);\n\t\tconst nativeHostMainService = accessor.get(INativeHostMainService);\n\n\t\t// Signal phase: ready (services set)\n\t\tthis.lifecycleMainService.phase = LifecycleMainPhase.Ready;\n\n\t\t// Check for initial URLs to handle from protocol link invocations\n\t\tconst pendingWindowOpenablesFromProtocolLinks: IWindowOpenable[] = [];\n\t\tconst pendingProtocolLinksToHandle = [\n\t\t\t// Windows/Linux: protocol handler invokes CLI with --open-url\n\t\t\t...this.environmentMainService.args['open-url'] ? this.environmentMainService.args._urls || [] : [],\n\n\t\t\t// macOS: open-url events\n\t\t\t...((<any>global).getOpenUrls() || []) as string[]\n\t\t].map(url => {\n\t\t\ttry {\n\t\t\t\treturn { uri: URI.parse(url), url };\n\t\t\t} catch {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}).filter((obj): obj is { uri: URI, url: string } => {\n\t\t\tif (!obj) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// If URI should be blocked, filter it out\n\t\t\tif (this.shouldBlockURI(obj.uri)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Filter out any protocol link that wants to open as window so that\n\t\t\t// we open the right set of windows on startup and not restore the\n\t\t\t// previous workspace too.\n\t\t\tconst windowOpenable = this.getWindowOpenableFromProtocolLink(obj.uri);\n\t\t\tif (windowOpenable) {\n\t\t\t\tpendingWindowOpenablesFromProtocolLinks.push(windowOpenable);\n\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t});\n\n\t\t// Create a URL handler to open file URIs in the active window\n\t\t// or open new windows. The URL handler will be invoked from\n\t\t// protocol invocations outside of VSCode.\n\t\tconst app = this;\n\t\tconst environmentService = this.environmentMainService;\n\t\turlService.registerHandler({\n\t\t\tasync handleURL(uri: URI, options?: IOpenURLOptions): Promise<boolean> {\n\n\t\t\t\t// If URI should be blocked, behave as if it's handled\n\t\t\t\tif (app.shouldBlockURI(uri)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\t// Check for URIs to open in window\n\t\t\t\tconst windowOpenableFromProtocolLink = app.getWindowOpenableFromProtocolLink(uri);\n\t\t\t\tif (windowOpenableFromProtocolLink) {\n\t\t\t\t\tconst [window] = windowsMainService.open({\n\t\t\t\t\t\tcontext: OpenContext.API,\n\t\t\t\t\t\tcli: { ...environmentService.args },\n\t\t\t\t\t\turisToOpen: [windowOpenableFromProtocolLink],\n\t\t\t\t\t\tgotoLineMode: true\n\t\t\t\t\t\t/* remoteAuthority will be determined based on windowOpenableFromProtocolLink */\n\t\t\t\t\t});\n\n\t\t\t\t\twindow.focus(); // this should help ensuring that the right window gets focus when multiple are opened\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\t// If we have not yet handled the URI and we have no window opened (macOS only)\n\t\t\t\t// we first open a window and then try to open that URI within that window\n\t\t\t\tif (isMacintosh && windowsMainService.getWindowCount() === 0) {\n\t\t\t\t\tconst [window] = windowsMainService.open({\n\t\t\t\t\t\tcontext: OpenContext.API,\n\t\t\t\t\t\tcli: { ...environmentService.args },\n\t\t\t\t\t\tforceEmpty: true,\n\t\t\t\t\t\tgotoLineMode: true,\n\t\t\t\t\t\tremoteAuthority: getRemoteAuthority(uri)\n\t\t\t\t\t});\n\n\t\t\t\t\tawait window.ready();\n\n\t\t\t\t\treturn urlService.open(uri, options);\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n\n\t\t// Create a URL handler which forwards to the last active window\n\t\tconst activeWindowManager = this._register(new ActiveWindowManager({\n\t\t\tonDidOpenWindow: nativeHostMainService.onDidOpenWindow,\n\t\t\tonDidFocusWindow: nativeHostMainService.onDidFocusWindow,\n\t\t\tgetActiveWindowId: () => nativeHostMainService.getActiveWindowId(-1)\n\t\t}));\n\t\tconst activeWindowRouter = new StaticRouter(ctx => activeWindowManager.getActiveClientId().then(id => ctx === id));\n\t\tconst urlHandlerRouter = new URLHandlerRouter(activeWindowRouter);\n\t\tconst urlHandlerChannel = mainProcessElectronServer.getChannel('urlHandler', urlHandlerRouter);\n\t\turlService.registerHandler(new URLHandlerChannelClient(urlHandlerChannel));\n\n\t\t// Watch Electron URLs and forward them to the UrlService\n\t\tthis._register(new ElectronURLListener(pendingProtocolLinksToHandle, urlService, windowsMainService, this.environmentMainService, this.productService));\n\n\t\t// Open our first window\n\t\tconst args = this.environmentMainService.args;\n\t\tconst macOpenFiles: string[] = (<any>global).macOpenFiles;\n\t\tconst context = isLaunchedFromCli(process.env) ? OpenContext.CLI : OpenContext.DESKTOP;\n\t\tconst hasCliArgs = args._.length;\n\t\tconst hasFolderURIs = !!args['folder-uri'];\n\t\tconst hasFileURIs = !!args['file-uri'];\n\t\tconst noRecentEntry = args['skip-add-to-recently-opened'] === true;\n\t\tconst waitMarkerFileURI = args.wait && args.waitMarkerFilePath ? URI.file(args.waitMarkerFilePath) : undefined;\n\t\tconst remoteAuthority = args.remote || undefined;\n\n\t\t// check for a pending window to open from URI\n\t\t// e.g. when running code with --open-uri from\n\t\t// a protocol handler\n\t\tif (pendingWindowOpenablesFromProtocolLinks.length > 0) {\n\t\t\treturn windowsMainService.open({\n\t\t\t\tcontext,\n\t\t\t\tcli: args,\n\t\t\t\turisToOpen: pendingWindowOpenablesFromProtocolLinks,\n\t\t\t\tgotoLineMode: true,\n\t\t\t\tinitialStartup: true\n\t\t\t\t/* remoteAuthority will be determined based on pendingWindowOpenablesFromProtocolLinks */\n\t\t\t});\n\t\t}\n\n\t\t// new window if \"-n\"\n\t\tif (args['new-window'] && !hasCliArgs && !hasFolderURIs && !hasFileURIs) {\n\t\t\treturn windowsMainService.open({\n\t\t\t\tcontext,\n\t\t\t\tcli: args,\n\t\t\t\tforceNewWindow: true,\n\t\t\t\tforceEmpty: true,\n\t\t\t\tnoRecentEntry,\n\t\t\t\twaitMarkerFileURI,\n\t\t\t\tinitialStartup: true,\n\t\t\t\tremoteAuthority\n\t\t\t});\n\t\t}\n\n\t\t// mac: open-file event received on startup\n\t\tif (macOpenFiles.length && !hasCliArgs && !hasFolderURIs && !hasFileURIs) {\n\t\t\treturn windowsMainService.open({\n\t\t\t\tcontext: OpenContext.DOCK,\n\t\t\t\tcli: args,\n\t\t\t\turisToOpen: macOpenFiles.map(file => this.getWindowOpenableFromPathSync(file)),\n\t\t\t\tnoRecentEntry,\n\t\t\t\twaitMarkerFileURI,\n\t\t\t\tinitialStartup: true,\n\t\t\t\t/* remoteAuthority will be determined based on macOpenFiles */\n\t\t\t});\n\t\t}\n\n\t\t// default: read paths from cli\n\t\treturn windowsMainService.open({\n\t\t\tcontext,\n\t\t\tcli: args,\n\t\t\tforceNewWindow: args['new-window'] || (!hasCliArgs && args['unity-launch']),\n\t\t\tdiffMode: args.diff,\n\t\t\tnoRecentEntry,\n\t\t\twaitMarkerFileURI,\n\t\t\tgotoLineMode: args.goto,\n\t\t\tinitialStartup: true,\n\t\t\tremoteAuthority\n\t\t});\n\t}\n\n\tprivate shouldBlockURI(uri: URI): boolean {\n\t\tif (uri.authority === Schemas.file && isWindows) {\n\t\t\tconst res = dialog.showMessageBoxSync({\n\t\t\t\ttitle: this.productService.nameLong,\n\t\t\t\ttype: 'question',\n\t\t\t\tbuttons: [\n\t\t\t\t\tmnemonicButtonLabel(localize({ key: 'open', comment: ['&& denotes a mnemonic'] }, \"&&Yes\")),\n\t\t\t\t\tmnemonicButtonLabel(localize({ key: 'cancel', comment: ['&& denotes a mnemonic'] }, \"&&No\")),\n\t\t\t\t],\n\t\t\t\tcancelId: 1,\n\t\t\t\tmessage: localize('confirmOpenMessage', \"An external application wants to open '{0}' in {1}. Do you want to open this file or folder?\", getPathLabel(uri.fsPath, this.environmentMainService), this.productService.nameShort),\n\t\t\t\tdetail: localize('confirmOpenDetail', \"If you did not initiate this request, it may represent an attempted attack on your system. Unless you took an explicit action to initiate this request, you should press 'No'\"),\n\t\t\t\tnoLink: true\n\t\t\t});\n\n\t\t\tif (res === 1) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprivate getWindowOpenableFromProtocolLink(uri: URI): IWindowOpenable | undefined {\n\t\tif (!uri.path) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// File path\n\t\tif (uri.authority === Schemas.file) {\n\t\t\t// we configure as fileUri, but later validation will\n\t\t\t// make sure to open as folder or workspace if possible\n\t\t\treturn { fileUri: URI.file(uri.fsPath) };\n\t\t}\n\n\t\t// Remote path\n\t\telse if (uri.authority === Schemas.vscodeRemote) {\n\t\t\t// Example conversion:\n\t\t\t// From: vscode://vscode-remote/wsl+ubuntu/mnt/c/GitDevelopment/monaco\n\t\t\t//   To: vscode-remote://wsl+ubuntu/mnt/c/GitDevelopment/monaco\n\t\t\tconst secondSlash = uri.path.indexOf(posix.sep, 1 /* skip over the leading slash */);\n\t\t\tif (secondSlash !== -1) {\n\t\t\t\tconst authority = uri.path.substring(1, secondSlash);\n\t\t\t\tconst path = uri.path.substring(secondSlash);\n\t\t\t\tconst remoteUri = URI.from({ scheme: Schemas.vscodeRemote, authority, path, query: uri.query, fragment: uri.fragment });\n\n\t\t\t\tif (hasWorkspaceFileExtension(path)) {\n\t\t\t\t\treturn { workspaceUri: remoteUri };\n\t\t\t\t} else if (/:[\\d]+$/.test(path)) { // path with :line:column syntax\n\t\t\t\t\treturn { fileUri: remoteUri };\n\t\t\t\t} else {\n\t\t\t\t\treturn { folderUri: remoteUri };\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate getWindowOpenableFromPathSync(path: string): IWindowOpenable {\n\t\ttry {\n\t\t\tconst fileStat = statSync(path);\n\t\t\tif (fileStat.isDirectory()) {\n\t\t\t\treturn { folderUri: URI.file(path) };\n\t\t\t}\n\n\t\t\tif (hasWorkspaceFileExtension(path)) {\n\t\t\t\treturn { workspaceUri: URI.file(path) };\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// ignore errors\n\t\t}\n\n\t\treturn { fileUri: URI.file(path) };\n\t}\n\n\tprivate async afterWindowOpen(accessor: ServicesAccessor, sharedProcess: SharedProcess): Promise<void> {\n\n\t\t// Signal phase: after window open\n\t\tthis.lifecycleMainService.phase = LifecycleMainPhase.AfterWindowOpen;\n\n\t\t// Observe shared process for errors\n\t\tlet willShutdown = false;\n\t\tonce(this.lifecycleMainService.onWillShutdown)(() => willShutdown = true);\n\t\tconst telemetryService = accessor.get(ITelemetryService);\n\t\tthis._register(sharedProcess.onDidError(({ type, details }) => {\n\n\t\t\t// Logging\n\t\t\tlet message: string;\n\t\t\tif (typeof details === 'string') {\n\t\t\t\tmessage = details;\n\t\t\t} else {\n\t\t\t\tmessage = `SharedProcess: crashed (detail: ${details.reason})`;\n\t\t\t}\n\t\t\tonUnexpectedError(new Error(message));\n\n\t\t\t// Telemetry\n\t\t\ttype SharedProcessErrorClassification = {\n\t\t\t\ttype: { classification: 'SystemMetaData', purpose: 'PerformanceAndHealth', isMeasurement: true };\n\t\t\t\treason: { classification: 'SystemMetaData', purpose: 'PerformanceAndHealth', isMeasurement: true };\n\t\t\t\tvisible: { classification: 'SystemMetaData', purpose: 'PerformanceAndHealth', isMeasurement: true };\n\t\t\t\tshuttingdown: { classification: 'SystemMetaData', purpose: 'PerformanceAndHealth', isMeasurement: true };\n\t\t\t};\n\t\t\ttype SharedProcessErrorEvent = {\n\t\t\t\ttype: WindowError;\n\t\t\t\treason: string | undefined;\n\t\t\t\tvisible: boolean;\n\t\t\t\tshuttingdown: boolean;\n\t\t\t};\n\t\t\ttelemetryService.publicLog2<SharedProcessErrorEvent, SharedProcessErrorClassification>('sharedprocesserror', {\n\t\t\t\ttype,\n\t\t\t\treason: typeof details !== 'string' ? details?.reason : undefined,\n\t\t\t\tvisible: sharedProcess.isVisible(),\n\t\t\t\tshuttingdown: willShutdown\n\t\t\t});\n\t\t}));\n\n\t\t// Windows: install mutex\n\t\tconst win32MutexName = this.productService.win32MutexName;\n\t\tif (isWindows && win32MutexName) {\n\t\t\ttry {\n\t\t\t\tconst WindowsMutex = (require.__$__nodeRequire('windows-mutex') as typeof import('windows-mutex')).Mutex;\n\t\t\t\tconst mutex = new WindowsMutex(win32MutexName);\n\t\t\t\tonce(this.lifecycleMainService.onWillShutdown)(() => mutex.release());\n\t\t\t} catch (error) {\n\t\t\t\tthis.logService.error(error);\n\t\t\t}\n\t\t}\n\n\t\t// Remote Authorities\n\t\tprotocol.registerHttpProtocol(Schemas.vscodeRemoteResource, (request, callback) => {\n\t\t\tcallback({\n\t\t\t\turl: request.url.replace(/^vscode-remote-resource:/, 'http:'),\n\t\t\t\tmethod: request.method\n\t\t\t});\n\t\t});\n\n\t\t// Initialize update service\n\t\tconst updateService = accessor.get(IUpdateService);\n\t\tif (updateService instanceof Win32UpdateService || updateService instanceof LinuxUpdateService || updateService instanceof DarwinUpdateService) {\n\t\t\tupdateService.initialize();\n\t\t}\n\n\t\t// Start to fetch shell environment (if needed) after window has opened\n\t\tresolveShellEnv(this.logService, this.environmentMainService.args, process.env);\n\n\t\t// If enable-crash-reporter argv is undefined then this is a fresh start,\n\t\t// based on telemetry.enableCrashreporter settings, generate a UUID which\n\t\t// will be used as crash reporter id and also update the json file.\n\t\ttry {\n\t\t\tconst argvContent = await this.fileService.readFile(this.environmentMainService.argvResource);\n\t\t\tconst argvString = argvContent.value.toString();\n\t\t\tconst argvJSON = JSON.parse(stripComments(argvString));\n\t\t\tif (argvJSON['enable-crash-reporter'] === undefined) {\n\t\t\t\tconst enableCrashReporter = this.configurationService.getValue<boolean>('telemetry.enableCrashReporter') ?? true;\n\t\t\t\tconst additionalArgvContent = [\n\t\t\t\t\t'',\n\t\t\t\t\t'\t// Allows to disable crash reporting.',\n\t\t\t\t\t'\t// Should restart the app if the value is changed.',\n\t\t\t\t\t`\t\"enable-crash-reporter\": ${enableCrashReporter},`,\n\t\t\t\t\t'',\n\t\t\t\t\t'\t// Unique id used for correlating crash reports sent from this instance.',\n\t\t\t\t\t'\t// Do not edit this value.',\n\t\t\t\t\t`\t\"crash-reporter-id\": \"${generateUuid()}\"`,\n\t\t\t\t\t'}'\n\t\t\t\t];\n\t\t\t\tconst newArgvString = argvString.substring(0, argvString.length - 2).concat(',\\n', additionalArgvContent.join('\\n'));\n\n\t\t\t\tawait this.fileService.writeFile(this.environmentMainService.argvResource, VSBuffer.fromString(newArgvString));\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.logService.error(error);\n\t\t}\n\t}\n\n\tprivate stopTracingEventually(accessor: ServicesAccessor, windows: ICodeWindow[]): void {\n\t\tthis.logService.info(`Tracing: waiting for windows to get ready...`);\n\n\t\tconst dialogMainService = accessor.get(IDialogMainService);\n\n\t\tlet recordingStopped = false;\n\t\tconst stopRecording = async (timeout: boolean) => {\n\t\t\tif (recordingStopped) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\trecordingStopped = true; // only once\n\n\t\t\tconst path = await contentTracing.stopRecording(joinPath(this.environmentMainService.userHome, `${this.productService.applicationName}-${Math.random().toString(16).slice(-4)}.trace.txt`).fsPath);\n\n\t\t\tif (!timeout) {\n\t\t\t\tdialogMainService.showMessageBox({\n\t\t\t\t\ttype: 'info',\n\t\t\t\t\tmessage: localize('trace.message', \"Successfully created trace.\"),\n\t\t\t\t\tdetail: localize('trace.detail', \"Please create an issue and manually attach the following file:\\n{0}\", path),\n\t\t\t\t\tbuttons: [localize('trace.ok', \"OK\")]\n\t\t\t\t}, withNullAsUndefined(BrowserWindow.getFocusedWindow()));\n\t\t\t} else {\n\t\t\t\tthis.logService.info(`Tracing: data recorded (after 30s timeout) to ${path}`);\n\t\t\t}\n\t\t};\n\n\t\t// Wait up to 30s before creating the trace anyways\n\t\tconst timeoutHandle = setTimeout(() => stopRecording(true), 30000);\n\n\t\t// Wait for all windows to get ready and stop tracing then\n\t\tPromise.all(windows.map(window => window.ready())).then(() => {\n\t\t\tclearTimeout(timeoutHandle);\n\t\t\tstopRecording(false);\n\t\t});\n\t}\n}\n"]}