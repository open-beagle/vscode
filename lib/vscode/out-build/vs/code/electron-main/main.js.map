{"version":3,"sources":["vs/code/electron-main/main.ts"],"names":[],"mappings":"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","file":"main.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/platform/update/common/update.config.contribution';\nimport { app, dialog } from 'electron';\nimport { promises, unlinkSync } from 'fs';\nimport { localize } from 'vs/nls';\nimport { isWindows, IProcessEnvironment, isMacintosh } from 'vs/base/common/platform';\nimport { mark } from 'vs/base/common/performance';\nimport product from 'vs/platform/product/common/product';\nimport { parseMainProcessArgv, addArg } from 'vs/platform/environment/node/argvHelper';\nimport { createWaitMarkerFile } from 'vs/platform/environment/node/wait';\nimport { LifecycleMainService, ILifecycleMainService } from 'vs/platform/lifecycle/electron-main/lifecycleMainService';\nimport { ProxyChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { Server as NodeIPCServer, serve as nodeIPCServe, connect as nodeIPCConnect, XDG_RUNTIME_DIR } from 'vs/base/parts/ipc/node/ipc.net';\nimport { Client as NodeIPCClient } from 'vs/base/parts/ipc/common/ipc.net';\nimport { ILaunchMainService } from 'vs/platform/launch/electron-main/launchMainService';\nimport { ServicesAccessor, IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { InstantiationService } from 'vs/platform/instantiation/common/instantiationService';\nimport { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';\nimport { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';\nimport { ILogService, ConsoleMainLogger, MultiplexLogService, getLogLevel, ILoggerService } from 'vs/platform/log/common/log';\nimport { StateService } from 'vs/platform/state/node/stateService';\nimport { IStateService } from 'vs/platform/state/node/state';\nimport { NativeParsedArgs } from 'vs/platform/environment/common/argv';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ConfigurationService } from 'vs/platform/configuration/common/configurationService';\nimport { IRequestService } from 'vs/platform/request/common/request';\nimport { RequestMainService } from 'vs/platform/request/electron-main/requestMainService';\nimport { CodeApplication } from 'vs/code/electron-main/app';\nimport { getPathLabel, mnemonicButtonLabel } from 'vs/base/common/labels';\nimport { SpdLogLogger } from 'vs/platform/log/node/spdlogLog';\nimport { BufferLogService } from 'vs/platform/log/common/bufferLog';\nimport { ExpectedError, setUnexpectedErrorHandler } from 'vs/base/common/errors';\nimport { IThemeMainService, ThemeMainService } from 'vs/platform/theme/electron-main/themeMainService';\nimport { once } from 'vs/base/common/functional';\nimport { ISignService } from 'vs/platform/sign/common/sign';\nimport { SignService } from 'vs/platform/sign/node/signService';\nimport { DiagnosticsService } from 'vs/platform/diagnostics/node/diagnosticsService';\nimport { FileService } from 'vs/platform/files/common/fileService';\nimport { DiskFileSystemProvider } from 'vs/platform/files/node/diskFileSystemProvider';\nimport { Schemas } from 'vs/base/common/network';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { ITunnelService } from 'vs/platform/remote/common/tunnel';\nimport { TunnelService } from 'vs/platform/remote/node/tunnelService';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IPathWithLineAndColumn, isValidBasename, parseLineAndColumnAware, sanitizeFilePath } from 'vs/base/common/extpath';\nimport { rtrim, trim } from 'vs/base/common/strings';\nimport { basename, join, resolve } from 'vs/base/common/path';\nimport { coalesce, distinct } from 'vs/base/common/arrays';\nimport { EnvironmentMainService, IEnvironmentMainService } from 'vs/platform/environment/electron-main/environmentMainService';\nimport { toErrorMessage } from 'vs/base/common/errorMessage';\nimport { NullTelemetryService } from 'vs/platform/telemetry/common/telemetryUtils';\nimport { LoggerService } from 'vs/platform/log/node/loggerService';\nimport { cwd } from 'vs/base/common/process';\nimport { IProtocolMainService } from 'vs/platform/protocol/electron-main/protocol';\nimport { ProtocolMainService } from 'vs/platform/protocol/electron-main/protocolMainService';\n\n/**\n * The main VS Code entry point.\n *\n * Note: This class can exist more than once for example when VS Code is already\n * running and a second instance is started from the command line. It will always\n * try to communicate with an existing instance to prevent that 2 VS Code instances\n * are running at the same time.\n */\nclass CodeMain {\n\n\tmain(): void {\n\t\ttry {\n\t\t\tthis.startup();\n\t\t} catch (error) {\n\t\t\tconsole.error(error.message);\n\t\t\tapp.exit(1);\n\t\t}\n\t}\n\n\tprivate async startup(): Promise<void> {\n\n\t\t// Set the error handler early enough so that we are not getting the\n\t\t// default electron error dialog popping up\n\t\tsetUnexpectedErrorHandler(err => console.error(err));\n\n\t\t// Create services\n\t\tconst [instantiationService, instanceEnvironment, environmentService, configurationService, stateService, bufferLogService, productService] = this.createServices();\n\n\t\ttry {\n\n\t\t\t// Init services\n\t\t\ttry {\n\t\t\t\tawait this.initServices(environmentService, configurationService, stateService);\n\t\t\t} catch (error) {\n\n\t\t\t\t// Show a dialog for errors that can be resolved by the user\n\t\t\t\tthis.handleStartupDataDirError(environmentService, productService.nameLong, error);\n\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\t// Startup\n\t\t\tawait instantiationService.invokeFunction(async accessor => {\n\t\t\t\tconst logService = accessor.get(ILogService);\n\t\t\t\tconst lifecycleMainService = accessor.get(ILifecycleMainService);\n\t\t\t\tconst fileService = accessor.get(IFileService);\n\n\t\t\t\t// Create the main IPC server by trying to be the server\n\t\t\t\t// If this throws an error it means we are not the first\n\t\t\t\t// instance of VS Code running and so we would quit.\n\t\t\t\tconst mainProcessNodeIpcServer = await this.claimInstance(logService, environmentService, lifecycleMainService, instantiationService, productService, true);\n\n\t\t\t\t// Delay creation of spdlog for perf reasons (https://github.com/microsoft/vscode/issues/72906)\n\t\t\t\tbufferLogService.logger = new SpdLogLogger('main', join(environmentService.logsPath, 'main.log'), true, bufferLogService.getLevel());\n\n\t\t\t\t// Lifecycle\n\t\t\t\tonce(lifecycleMainService.onWillShutdown)(() => {\n\t\t\t\t\tfileService.dispose();\n\t\t\t\t\tconfigurationService.dispose();\n\t\t\t\t});\n\n\t\t\t\treturn instantiationService.createInstance(CodeApplication, mainProcessNodeIpcServer, instanceEnvironment).startup();\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tinstantiationService.invokeFunction(this.quit, error);\n\t\t}\n\t}\n\n\tprivate createServices(): [IInstantiationService, IProcessEnvironment, IEnvironmentMainService, ConfigurationService, StateService, BufferLogService, IProductService] {\n\t\tconst services = new ServiceCollection();\n\n\t\t// Product\n\t\tconst productService = { _serviceBrand: undefined, ...product };\n\t\tservices.set(IProductService, productService);\n\n\t\t// Environment\n\t\tconst environmentMainService = new EnvironmentMainService(this.resolveArgs(), productService);\n\t\tconst instanceEnvironment = this.patchEnvironment(environmentMainService); // Patch `process.env` with the instance's environment\n\t\tservices.set(IEnvironmentMainService, environmentMainService);\n\n\t\t// Log: We need to buffer the spdlog logs until we are sure\n\t\t// we are the only instance running, otherwise we'll have concurrent\n\t\t// log file access on Windows (https://github.com/microsoft/vscode/issues/41218)\n\t\tconst bufferLogService = new BufferLogService();\n\t\tconst logService = new MultiplexLogService([new ConsoleMainLogger(getLogLevel(environmentMainService)), bufferLogService]);\n\t\tprocess.once('exit', () => logService.dispose());\n\t\tservices.set(ILogService, logService);\n\n\t\t// Files\n\t\tconst fileService = new FileService(logService);\n\t\tservices.set(IFileService, fileService);\n\t\tconst diskFileSystemProvider = new DiskFileSystemProvider(logService);\n\t\tfileService.registerProvider(Schemas.file, diskFileSystemProvider);\n\n\t\t// Logger\n\t\tservices.set(ILoggerService, new LoggerService(logService, fileService));\n\n\t\t// Configuration\n\t\tconst configurationService = new ConfigurationService(environmentMainService.settingsResource, fileService);\n\t\tservices.set(IConfigurationService, configurationService);\n\n\t\t// Lifecycle\n\t\tservices.set(ILifecycleMainService, new SyncDescriptor(LifecycleMainService));\n\n\t\t// State\n\t\tconst stateService = new StateService(environmentMainService, logService);\n\t\tservices.set(IStateService, stateService);\n\n\t\t// Request\n\t\tservices.set(IRequestService, new SyncDescriptor(RequestMainService));\n\n\t\t// Themes\n\t\tservices.set(IThemeMainService, new SyncDescriptor(ThemeMainService));\n\n\t\t// Signing\n\t\tservices.set(ISignService, new SyncDescriptor(SignService));\n\n\t\t// Tunnel\n\t\tservices.set(ITunnelService, new SyncDescriptor(TunnelService));\n\n\t\t// Protocol\n\t\tservices.set(IProtocolMainService, new SyncDescriptor(ProtocolMainService));\n\n\t\treturn [new InstantiationService(services, true), instanceEnvironment, environmentMainService, configurationService, stateService, bufferLogService, productService];\n\t}\n\n\tprivate patchEnvironment(environmentMainService: IEnvironmentMainService): IProcessEnvironment {\n\t\tconst instanceEnvironment: IProcessEnvironment = {\n\t\t\tVSCODE_IPC_HOOK: environmentMainService.mainIPCHandle\n\t\t};\n\n\t\t['VSCODE_NLS_CONFIG', 'VSCODE_PORTABLE'].forEach(key => {\n\t\t\tconst value = process.env[key];\n\t\t\tif (typeof value === 'string') {\n\t\t\t\tinstanceEnvironment[key] = value;\n\t\t\t}\n\t\t});\n\n\t\tObject.assign(process.env, instanceEnvironment);\n\n\t\treturn instanceEnvironment;\n\t}\n\n\tprivate initServices(environmentMainService: IEnvironmentMainService, configurationService: ConfigurationService, stateService: StateService): Promise<unknown> {\n\n\t\t// Environment service (paths)\n\t\tconst environmentServiceInitialization = Promise.all<string | undefined>([\n\t\t\tenvironmentMainService.extensionsPath,\n\t\t\tenvironmentMainService.nodeCachedDataDir,\n\t\t\tenvironmentMainService.logsPath,\n\t\t\tenvironmentMainService.globalStorageHome.fsPath,\n\t\t\tenvironmentMainService.workspaceStorageHome.fsPath,\n\t\t\tenvironmentMainService.backupHome\n\t\t].map(path => path ? promises.mkdir(path, { recursive: true }) : undefined));\n\n\t\t// Configuration service\n\t\tconst configurationServiceInitialization = configurationService.initialize();\n\n\t\t// State service\n\t\tconst stateServiceInitialization = stateService.init();\n\n\t\treturn Promise.all([environmentServiceInitialization, configurationServiceInitialization, stateServiceInitialization]);\n\t}\n\n\tprivate async claimInstance(logService: ILogService, environmentMainService: IEnvironmentMainService, lifecycleMainService: ILifecycleMainService, instantiationService: IInstantiationService, productService: IProductService, retry: boolean): Promise<NodeIPCServer> {\n\n\t\t// Try to setup a server for running. If that succeeds it means\n\t\t// we are the first instance to startup. Otherwise it is likely\n\t\t// that another instance is already running.\n\t\tlet mainProcessNodeIpcServer: NodeIPCServer;\n\t\ttry {\n\t\t\tmark('code/willStartMainServer');\n\t\t\tmainProcessNodeIpcServer = await nodeIPCServe(environmentMainService.mainIPCHandle);\n\t\t\tmark('code/didStartMainServer');\n\t\t\tonce(lifecycleMainService.onWillShutdown)(() => mainProcessNodeIpcServer.dispose());\n\t\t} catch (error) {\n\n\t\t\t// Handle unexpected errors (the only expected error is EADDRINUSE that\n\t\t\t// indicates a second instance of Code is running)\n\t\t\tif (error.code !== 'EADDRINUSE') {\n\n\t\t\t\t// Show a dialog for errors that can be resolved by the user\n\t\t\t\tthis.handleStartupDataDirError(environmentMainService, productService.nameLong, error);\n\n\t\t\t\t// Any other runtime error is just printed to the console\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\t// there's a running instance, let's connect to it\n\t\t\tlet client: NodeIPCClient<string>;\n\t\t\ttry {\n\t\t\t\tclient = await nodeIPCConnect(environmentMainService.mainIPCHandle, 'main');\n\t\t\t} catch (error) {\n\n\t\t\t\t// Handle unexpected connection errors by showing a dialog to the user\n\t\t\t\tif (!retry || isWindows || error.code !== 'ECONNREFUSED') {\n\t\t\t\t\tif (error.code === 'EPERM') {\n\t\t\t\t\t\tthis.showStartupWarningDialog(\n\t\t\t\t\t\t\tlocalize('secondInstanceAdmin', \"A second instance of {0} is already running as administrator.\", productService.nameShort),\n\t\t\t\t\t\t\tlocalize('secondInstanceAdminDetail', \"Please close the other instance and try again.\"),\n\t\t\t\t\t\t\tproductService.nameLong\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\n\t\t\t\t// it happens on Linux and OS X that the pipe is left behind\n\t\t\t\t// let's delete it, since we can't connect to it and then\n\t\t\t\t// retry the whole thing\n\t\t\t\ttry {\n\t\t\t\t\tunlinkSync(environmentMainService.mainIPCHandle);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tlogService.warn('Could not delete obsolete instance handle', error);\n\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\n\t\t\t\treturn this.claimInstance(logService, environmentMainService, lifecycleMainService, instantiationService, productService, false);\n\t\t\t}\n\n\t\t\t// Tests from CLI require to be the only instance currently\n\t\t\tif (environmentMainService.extensionTestsLocationURI && !environmentMainService.debugExtensionHost.break) {\n\t\t\t\tconst msg = 'Running extension tests from the command line is currently only supported if no other instance of Code is running.';\n\t\t\t\tlogService.error(msg);\n\t\t\t\tclient.dispose();\n\n\t\t\t\tthrow new Error(msg);\n\t\t\t}\n\n\t\t\t// Show a warning dialog after some timeout if it takes long to talk to the other instance\n\t\t\t// Skip this if we are running with --wait where it is expected that we wait for a while.\n\t\t\t// Also skip when gathering diagnostics (--status) which can take a longer time.\n\t\t\tlet startupWarningDialogHandle: NodeJS.Timeout | undefined = undefined;\n\t\t\tif (!environmentMainService.args.wait && !environmentMainService.args.status) {\n\t\t\t\tstartupWarningDialogHandle = setTimeout(() => {\n\t\t\t\t\tthis.showStartupWarningDialog(\n\t\t\t\t\t\tlocalize('secondInstanceNoResponse', \"Another instance of {0} is running but not responding\", productService.nameShort),\n\t\t\t\t\t\tlocalize('secondInstanceNoResponseDetail', \"Please close all other instances and try again.\"),\n\t\t\t\t\t\tproductService.nameLong\n\t\t\t\t\t);\n\t\t\t\t}, 10000);\n\t\t\t}\n\n\t\t\tconst launchService = ProxyChannel.toService<ILaunchMainService>(client.getChannel('launch'), { disableMarshalling: true });\n\n\t\t\t// Process Info\n\t\t\tif (environmentMainService.args.status) {\n\t\t\t\treturn instantiationService.invokeFunction(async () => {\n\t\t\t\t\tconst diagnosticsService = new DiagnosticsService(NullTelemetryService, productService);\n\t\t\t\t\tconst mainProcessInfo = await launchService.getMainProcessInfo();\n\t\t\t\t\tconst remoteDiagnostics = await launchService.getRemoteDiagnostics({ includeProcesses: true, includeWorkspaceMetadata: true });\n\t\t\t\t\tconst diagnostics = await diagnosticsService.getDiagnostics(mainProcessInfo, remoteDiagnostics);\n\t\t\t\t\tconsole.log(diagnostics);\n\n\t\t\t\t\tthrow new ExpectedError();\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Windows: allow to set foreground\n\t\t\tif (isWindows) {\n\t\t\t\tawait this.windowsAllowSetForegroundWindow(launchService, logService);\n\t\t\t}\n\n\t\t\t// Send environment over...\n\t\t\tlogService.trace('Sending env to running instance...');\n\t\t\tawait launchService.start(environmentMainService.args, process.env as IProcessEnvironment);\n\n\t\t\t// Cleanup\n\t\t\tclient.dispose();\n\n\t\t\t// Now that we started, make sure the warning dialog is prevented\n\t\t\tif (startupWarningDialogHandle) {\n\t\t\t\tclearTimeout(startupWarningDialogHandle);\n\t\t\t}\n\n\t\t\tthrow new ExpectedError('Sent env to running instance. Terminating...');\n\t\t}\n\n\t\t// Print --status usage info\n\t\tif (environmentMainService.args.status) {\n\t\t\tlogService.warn('Warning: The --status argument can only be used if Code is already running. Please run it again after Code has started.');\n\n\t\t\tthrow new ExpectedError('Terminating...');\n\t\t}\n\n\t\t// Set the VSCODE_PID variable here when we are sure we are the first\n\t\t// instance to startup. Otherwise we would wrongly overwrite the PID\n\t\tprocess.env['VSCODE_PID'] = String(process.pid);\n\n\t\treturn mainProcessNodeIpcServer;\n\t}\n\n\tprivate handleStartupDataDirError(environmentMainService: IEnvironmentMainService, title: string, error: NodeJS.ErrnoException): void {\n\t\tif (error.code === 'EACCES' || error.code === 'EPERM') {\n\t\t\tconst directories = coalesce([environmentMainService.userDataPath, environmentMainService.extensionsPath, XDG_RUNTIME_DIR]).map(folder => getPathLabel(folder, environmentMainService));\n\n\t\t\tthis.showStartupWarningDialog(\n\t\t\t\tlocalize('startupDataDirError', \"Unable to write program user data.\"),\n\t\t\t\tlocalize('startupUserDataAndExtensionsDirErrorDetail', \"{0}\\n\\nPlease make sure the following directories are writeable:\\n\\n{1}\", toErrorMessage(error), directories.join('\\n')),\n\t\t\t\ttitle\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate showStartupWarningDialog(message: string, detail: string, title: string): void {\n\t\t// use sync variant here because we likely exit after this method\n\t\t// due to startup issues and otherwise the dialog seems to disappear\n\t\t// https://github.com/microsoft/vscode/issues/104493\n\t\tdialog.showMessageBoxSync({\n\t\t\ttitle,\n\t\t\ttype: 'warning',\n\t\t\tbuttons: [mnemonicButtonLabel(localize({ key: 'close', comment: ['&& denotes a mnemonic'] }, \"&&Close\"))],\n\t\t\tmessage,\n\t\t\tdetail,\n\t\t\tnoLink: true\n\t\t});\n\t}\n\n\tprivate async windowsAllowSetForegroundWindow(launchMainService: ILaunchMainService, logService: ILogService): Promise<void> {\n\t\tif (isWindows) {\n\t\t\tconst processId = await launchMainService.getMainProcessId();\n\n\t\t\tlogService.trace('Sending some foreground love to the running instance:', processId);\n\n\t\t\ttry {\n\t\t\t\t(await import('windows-foreground-love')).allowSetForegroundWindow(processId);\n\t\t\t} catch (error) {\n\t\t\t\tlogService.error(error);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate quit(accessor: ServicesAccessor, reason?: ExpectedError | Error): void {\n\t\tconst logService = accessor.get(ILogService);\n\t\tconst lifecycleMainService = accessor.get(ILifecycleMainService);\n\n\t\tlet exitCode = 0;\n\n\t\tif (reason) {\n\t\t\tif ((reason as ExpectedError).isExpected) {\n\t\t\t\tif (reason.message) {\n\t\t\t\t\tlogService.trace(reason.message);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\texitCode = 1; // signal error to the outside\n\n\t\t\t\tif (reason.stack) {\n\t\t\t\t\tlogService.error(reason.stack);\n\t\t\t\t} else {\n\t\t\t\t\tlogService.error(`Startup error: ${reason.toString()}`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlifecycleMainService.kill(exitCode);\n\t}\n\n\t//#region Command line arguments utilities\n\n\tprivate resolveArgs(): NativeParsedArgs {\n\n\t\t// Parse arguments\n\t\tconst args = this.validatePaths(parseMainProcessArgv(process.argv));\n\n\t\t// If we are started with --wait create a random temporary file\n\t\t// and pass it over to the starting instance. We can use this file\n\t\t// to wait for it to be deleted to monitor that the edited file\n\t\t// is closed and then exit the waiting process.\n\t\t//\n\t\t// Note: we are not doing this if the wait marker has been already\n\t\t// added as argument. This can happen if Code was started from CLI.\n\t\tif (args.wait && !args.waitMarkerFilePath) {\n\t\t\tconst waitMarkerFilePath = createWaitMarkerFile(args.verbose);\n\t\t\tif (waitMarkerFilePath) {\n\t\t\t\taddArg(process.argv, '--waitMarkerFilePath', waitMarkerFilePath);\n\t\t\t\targs.waitMarkerFilePath = waitMarkerFilePath;\n\t\t\t}\n\t\t}\n\n\t\treturn args;\n\t}\n\n\tprivate validatePaths(args: NativeParsedArgs): NativeParsedArgs {\n\n\t\t// Track URLs if they're going to be used\n\t\tif (args['open-url']) {\n\t\t\targs._urls = args._;\n\t\t\targs._ = [];\n\t\t}\n\n\t\t// Normalize paths and watch out for goto line mode\n\t\tif (!args['remote']) {\n\t\t\tconst paths = this.doValidatePaths(args._, args.goto);\n\t\t\targs._ = paths;\n\t\t}\n\n\t\treturn args;\n\t}\n\n\tprivate doValidatePaths(args: string[], gotoLineMode?: boolean): string[] {\n\t\tconst currentWorkingDir = cwd();\n\t\tconst result = args.map(arg => {\n\t\t\tlet pathCandidate = String(arg);\n\n\t\t\tlet parsedPath: IPathWithLineAndColumn | undefined = undefined;\n\t\t\tif (gotoLineMode) {\n\t\t\t\tparsedPath = parseLineAndColumnAware(pathCandidate);\n\t\t\t\tpathCandidate = parsedPath.path;\n\t\t\t}\n\n\t\t\tif (pathCandidate) {\n\t\t\t\tpathCandidate = this.preparePath(currentWorkingDir, pathCandidate);\n\t\t\t}\n\n\t\t\tconst sanitizedFilePath = sanitizeFilePath(pathCandidate, currentWorkingDir);\n\n\t\t\tconst filePathBasename = basename(sanitizedFilePath);\n\t\t\tif (filePathBasename /* can be empty if code is opened on root */ && !isValidBasename(filePathBasename)) {\n\t\t\t\treturn null; // do not allow invalid file names\n\t\t\t}\n\n\t\t\tif (gotoLineMode && parsedPath) {\n\t\t\t\tparsedPath.path = sanitizedFilePath;\n\n\t\t\t\treturn this.toPath(parsedPath);\n\t\t\t}\n\n\t\t\treturn sanitizedFilePath;\n\t\t});\n\n\t\tconst caseInsensitive = isWindows || isMacintosh;\n\t\tconst distinctPaths = distinct(result, path => path && caseInsensitive ? path.toLowerCase() : (path || ''));\n\n\t\treturn coalesce(distinctPaths);\n\t}\n\n\tprivate preparePath(cwd: string, path: string): string {\n\n\t\t// Trim trailing quotes\n\t\tif (isWindows) {\n\t\t\tpath = rtrim(path, '\"'); // https://github.com/microsoft/vscode/issues/1498\n\t\t}\n\n\t\t// Trim whitespaces\n\t\tpath = trim(trim(path, ' '), '\\t');\n\n\t\tif (isWindows) {\n\n\t\t\t// Resolve the path against cwd if it is relative\n\t\t\tpath = resolve(cwd, path);\n\n\t\t\t// Trim trailing '.' chars on Windows to prevent invalid file names\n\t\t\tpath = rtrim(path, '.');\n\t\t}\n\n\t\treturn path;\n\t}\n\n\tprivate toPath(pathWithLineAndCol: IPathWithLineAndColumn): string {\n\t\tconst segments = [pathWithLineAndCol.path];\n\n\t\tif (typeof pathWithLineAndCol.line === 'number') {\n\t\t\tsegments.push(String(pathWithLineAndCol.line));\n\t\t}\n\n\t\tif (typeof pathWithLineAndCol.column === 'number') {\n\t\t\tsegments.push(String(pathWithLineAndCol.column));\n\t\t}\n\n\t\treturn segments.join(':');\n\t}\n\n\t//#endregion\n}\n\n// Main Startup\nconst code = new CodeMain();\ncode.main();\n"]}