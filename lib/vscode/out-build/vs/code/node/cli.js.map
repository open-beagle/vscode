{"version":3,"file":"cli.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/code/node/cli.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { homedir } from 'os';\nimport { existsSync, statSync, unlinkSync, chmodSync, truncateSync, readFileSync } from 'fs';\nimport { spawn, ChildProcess, SpawnOptions } from 'child_process';\nimport { buildHelpMessage, buildVersionMessage, OPTIONS } from 'vs/platform/environment/node/argv';\nimport { NativeParsedArgs } from 'vs/platform/environment/common/argv';\nimport { parseCLIProcessArgv, addArg } from 'vs/platform/environment/node/argvHelper';\nimport { createWaitMarkerFile } from 'vs/platform/environment/node/wait';\nimport product from 'vs/platform/product/common/product';\nimport { isAbsolute, join } from 'vs/base/common/path';\nimport { whenDeleted, writeFileSync } from 'vs/base/node/pfs';\nimport { findFreePort, randomPort } from 'vs/base/node/ports';\nimport { isWindows, isLinux, IProcessEnvironment } from 'vs/base/common/platform';\nimport type { ProfilingSession, Target } from 'v8-inspect-profiler';\nimport { isString } from 'vs/base/common/types';\nimport { hasStdinWithoutTty, stdinDataListener, getStdinFilePath, readFromStdin } from 'vs/platform/environment/node/stdin';\n\nfunction shouldSpawnCliProcess(argv: NativeParsedArgs): boolean {\n\treturn !!argv['install-source']\n\t\t|| !!argv['list-extensions']\n\t\t|| !!argv['install-extension']\n\t\t|| !!argv['uninstall-extension']\n\t\t|| !!argv['locate-extension']\n\t\t|| !!argv['telemetry'];\n}\n\ninterface IMainCli {\n\tmain: (argv: NativeParsedArgs) => Promise<void>;\n}\n\nexport async function main(argv: string[]): Promise<any> {\n\tlet args: NativeParsedArgs;\n\n\ttry {\n\t\targs = parseCLIProcessArgv(argv);\n\t} catch (err) {\n\t\tconsole.error(err.message);\n\t\treturn;\n\t}\n\n\t// Help\n\tif (args.help) {\n\t\tconst executable = `${product.applicationName}${isWindows ? '.exe' : ''}`;\n\t\tconsole.log(buildHelpMessage(product.nameLong, executable, product.version, OPTIONS));\n\t}\n\n\t// Version Info\n\telse if (args.version) {\n\t\tconsole.log(buildVersionMessage(product.version, product.commit));\n\t}\n\n\t// Extensions Management\n\telse if (shouldSpawnCliProcess(args)) {\n\t\tconst cli = await new Promise<IMainCli>((c, e) => require(['vs/code/node/cliProcessMain'], c, e));\n\t\tawait cli.main(args);\n\n\t\treturn;\n\t}\n\n\t// Write File\n\telse if (args['file-write']) {\n\t\tconst source = args._[0];\n\t\tconst target = args._[1];\n\n\t\t// Validate\n\t\tif (\n\t\t\t!source || !target || source === target ||\t\t\t\t// make sure source and target are provided and are not the same\n\t\t\t!isAbsolute(source) || !isAbsolute(target) ||\t\t\t// make sure both source and target are absolute paths\n\t\t\t!existsSync(source) || !statSync(source).isFile() ||\t// make sure source exists as file\n\t\t\t!existsSync(target) || !statSync(target).isFile()\t\t// make sure target exists as file\n\t\t) {\n\t\t\tthrow new Error('Using --file-write with invalid arguments.');\n\t\t}\n\n\t\ttry {\n\n\t\t\t// Check for readonly status and chmod if so if we are told so\n\t\t\tlet targetMode: number = 0;\n\t\t\tlet restoreMode = false;\n\t\t\tif (!!args['file-chmod']) {\n\t\t\t\ttargetMode = statSync(target).mode;\n\t\t\t\tif (!(targetMode & 0o200 /* File mode indicating writable by owner */)) {\n\t\t\t\t\tchmodSync(target, targetMode | 0o200);\n\t\t\t\t\trestoreMode = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Write source to target\n\t\t\tconst data = readFileSync(source);\n\t\t\tif (isWindows) {\n\t\t\t\t// On Windows we use a different strategy of saving the file\n\t\t\t\t// by first truncating the file and then writing with r+ mode.\n\t\t\t\t// This helps to save hidden files on Windows\n\t\t\t\t// (see https://github.com/microsoft/vscode/issues/931) and\n\t\t\t\t// prevent removing alternate data streams\n\t\t\t\t// (see https://github.com/microsoft/vscode/issues/6363)\n\t\t\t\ttruncateSync(target, 0);\n\t\t\t\twriteFileSync(target, data, { flag: 'r+' });\n\t\t\t} else {\n\t\t\t\twriteFileSync(target, data);\n\t\t\t}\n\n\t\t\t// Restore previous mode as needed\n\t\t\tif (restoreMode) {\n\t\t\t\tchmodSync(target, targetMode);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\terror.message = `Error using --file-write: ${error.message}`;\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t// Just Code\n\telse {\n\t\tconst env: IProcessEnvironment = {\n\t\t\t...process.env,\n\t\t\t'ELECTRON_NO_ATTACH_CONSOLE': '1'\n\t\t};\n\n\t\tdelete env['ELECTRON_RUN_AS_NODE'];\n\n\t\tconst processCallbacks: ((child: ChildProcess) => Promise<void>)[] = [];\n\n\t\tconst verbose = args.verbose || args.status;\n\t\tif (verbose) {\n\t\t\tenv['ELECTRON_ENABLE_LOGGING'] = '1';\n\n\t\t\tprocessCallbacks.push(async child => {\n\t\t\t\tchild.stdout!.on('data', (data: Buffer) => console.log(data.toString('utf8').trim()));\n\t\t\t\tchild.stderr!.on('data', (data: Buffer) => console.log(data.toString('utf8').trim()));\n\n\t\t\t\tawait new Promise<void>(resolve => child.once('exit', () => resolve()));\n\t\t\t});\n\t\t}\n\n\t\tconst hasReadStdinArg = args._.some(a => a === '-');\n\t\tif (hasReadStdinArg) {\n\t\t\t// remove the \"-\" argument when we read from stdin\n\t\t\targs._ = args._.filter(a => a !== '-');\n\t\t\targv = argv.filter(a => a !== '-');\n\t\t}\n\n\t\tlet stdinFilePath: string | undefined;\n\t\tif (hasStdinWithoutTty()) {\n\n\t\t\t// Read from stdin: we require a single \"-\" argument to be passed in order to start reading from\n\t\t\t// stdin. We do this because there is no reliable way to find out if data is piped to stdin. Just\n\t\t\t// checking for stdin being connected to a TTY is not enough (https://github.com/microsoft/vscode/issues/40351)\n\n\t\t\tif (hasReadStdinArg) {\n\t\t\t\tstdinFilePath = getStdinFilePath();\n\n\t\t\t\t// returns a file path where stdin input is written into (write in progress).\n\t\t\t\ttry {\n\t\t\t\t\treadFromStdin(stdinFilePath, !!verbose); // throws error if file can not be written\n\n\t\t\t\t\t// Make sure to open tmp file\n\t\t\t\t\taddArg(argv, stdinFilePath);\n\n\t\t\t\t\t// Enable --wait to get all data and ignore adding this to history\n\t\t\t\t\taddArg(argv, '--wait');\n\t\t\t\t\taddArg(argv, '--skip-add-to-recently-opened');\n\t\t\t\t\targs.wait = true;\n\n\t\t\t\t\tconsole.log(`Reading from stdin via: ${stdinFilePath}`);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.log(`Failed to create file to read via stdin: ${e.toString()}`);\n\t\t\t\t\tstdinFilePath = undefined;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// If the user pipes data via stdin but forgot to add the \"-\" argument, help by printing a message\n\t\t\t\t// if we detect that data flows into via stdin after a certain timeout.\n\t\t\t\tprocessCallbacks.push(_ => stdinDataListener(1000).then(dataReceived => {\n\t\t\t\t\tif (dataReceived) {\n\t\t\t\t\t\tif (isWindows) {\n\t\t\t\t\t\t\tconsole.log(`Run with '${product.applicationName} -' to read output from another program (e.g. 'echo Hello World | ${product.applicationName} -').`);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.log(`Run with '${product.applicationName} -' to read from stdin (e.g. 'ps aux | grep code | ${product.applicationName} -').`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t}\n\t\t}\n\n\t\t// If we are started with --wait create a random temporary file\n\t\t// and pass it over to the starting instance. We can use this file\n\t\t// to wait for it to be deleted to monitor that the edited file\n\t\t// is closed and then exit the waiting process.\n\t\tlet waitMarkerFilePath: string | undefined;\n\t\tif (args.wait) {\n\t\t\twaitMarkerFilePath = createWaitMarkerFile(verbose);\n\t\t\tif (waitMarkerFilePath) {\n\t\t\t\taddArg(argv, '--waitMarkerFilePath', waitMarkerFilePath);\n\t\t\t}\n\t\t}\n\n\t\t// If we have been started with `--prof-startup` we need to find free ports to profile\n\t\t// the main process, the renderer, and the extension host. We also disable v8 cached data\n\t\t// to get better profile traces. Last, we listen on stdout for a signal that tells us to\n\t\t// stop profiling.\n\t\tif (args['prof-startup']) {\n\t\t\tconst portMain = await findFreePort(randomPort(), 10, 3000);\n\t\t\tconst portRenderer = await findFreePort(portMain + 1, 10, 3000);\n\t\t\tconst portExthost = await findFreePort(portRenderer + 1, 10, 3000);\n\n\t\t\t// fail the operation when one of the ports couldn't be accquired.\n\t\t\tif (portMain * portRenderer * portExthost === 0) {\n\t\t\t\tthrow new Error('Failed to find free ports for profiler. Make sure to shutdown all instances of the editor first.');\n\t\t\t}\n\n\t\t\tconst filenamePrefix = join(homedir(), 'prof-' + Math.random().toString(16).slice(-4));\n\n\t\t\taddArg(argv, `--inspect-brk=${portMain}`);\n\t\t\taddArg(argv, `--remote-debugging-port=${portRenderer}`);\n\t\t\taddArg(argv, `--inspect-brk-extensions=${portExthost}`);\n\t\t\taddArg(argv, `--prof-startup-prefix`, filenamePrefix);\n\t\t\taddArg(argv, `--no-cached-data`);\n\n\t\t\twriteFileSync(filenamePrefix, argv.slice(-6).join('|'));\n\n\t\t\tprocessCallbacks.push(async _child => {\n\n\t\t\t\tclass Profiler {\n\t\t\t\t\tstatic async start(name: string, filenamePrefix: string, opts: { port: number, tries?: number, target?: (targets: Target[]) => Target }) {\n\t\t\t\t\t\tconst profiler = await import('v8-inspect-profiler');\n\n\t\t\t\t\t\tlet session: ProfilingSession;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tsession = await profiler.startProfiling(opts);\n\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\tconsole.error(`FAILED to start profiling for '${name}' on port '${opts.port}'`);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tasync stop() {\n\t\t\t\t\t\t\t\tif (!session) {\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tlet suffix = '';\n\t\t\t\t\t\t\t\tlet profile = await session.stop();\n\t\t\t\t\t\t\t\tif (!process.env['VSCODE_DEV']) {\n\t\t\t\t\t\t\t\t\t// when running from a not-development-build we remove\n\t\t\t\t\t\t\t\t\t// absolute filenames because we don't want to reveal anything\n\t\t\t\t\t\t\t\t\t// about users. We also append the `.txt` suffix to make it\n\t\t\t\t\t\t\t\t\t// easier to attach these files to GH issues\n\t\t\t\t\t\t\t\t\tprofile = profiler.rewriteAbsolutePaths(profile, 'piiRemoved');\n\t\t\t\t\t\t\t\t\tsuffix = '.txt';\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tawait profiler.writeProfile(profile, `${filenamePrefix}.${name}.cpuprofile${suffix}`);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\t// load and start profiler\n\t\t\t\t\tconst mainProfileRequest = Profiler.start('main', filenamePrefix, { port: portMain });\n\t\t\t\t\tconst extHostProfileRequest = Profiler.start('extHost', filenamePrefix, { port: portExthost, tries: 300 });\n\t\t\t\t\tconst rendererProfileRequest = Profiler.start('renderer', filenamePrefix, {\n\t\t\t\t\t\tport: portRenderer,\n\t\t\t\t\t\ttries: 200,\n\t\t\t\t\t\ttarget: function (targets) {\n\t\t\t\t\t\t\treturn targets.filter(target => {\n\t\t\t\t\t\t\t\tif (!target.webSocketDebuggerUrl) {\n\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (target.type === 'page') {\n\t\t\t\t\t\t\t\t\treturn target.url.indexOf('workbench/workbench.html') > 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})[0];\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tconst main = await mainProfileRequest;\n\t\t\t\t\tconst extHost = await extHostProfileRequest;\n\t\t\t\t\tconst renderer = await rendererProfileRequest;\n\n\t\t\t\t\t// wait for the renderer to delete the\n\t\t\t\t\t// marker file\n\t\t\t\t\tawait whenDeleted(filenamePrefix);\n\n\t\t\t\t\t// stop profiling\n\t\t\t\t\tawait main.stop();\n\t\t\t\t\tawait renderer.stop();\n\t\t\t\t\tawait extHost.stop();\n\n\t\t\t\t\t// re-create the marker file to signal that profiling is done\n\t\t\t\t\twriteFileSync(filenamePrefix, '');\n\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error('Failed to profile startup. Make sure to quit Code first.');\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tconst jsFlags = args['js-flags'];\n\t\tif (isString(jsFlags)) {\n\t\t\tconst match = /max_old_space_size=(\\d+)/g.exec(jsFlags);\n\t\t\tif (match && !args['max-memory']) {\n\t\t\t\taddArg(argv, `--max-memory=${match[1]}`);\n\t\t\t}\n\t\t}\n\n\t\tconst options: SpawnOptions = {\n\t\t\tdetached: true,\n\t\t\tenv\n\t\t};\n\n\t\tif (!verbose) {\n\t\t\toptions['stdio'] = 'ignore';\n\t\t}\n\n\t\tif (isLinux) {\n\t\t\taddArg(argv, '--no-sandbox'); // Electron 6 introduces a chrome-sandbox that requires root to run. This can fail. Disable sandbox via --no-sandbox\n\t\t}\n\n\t\tconst child = spawn(process.execPath, argv.slice(2), options);\n\n\t\tif (args.wait && waitMarkerFilePath) {\n\t\t\treturn new Promise<void>(resolve => {\n\n\t\t\t\t// Complete when process exits\n\t\t\t\tchild.once('exit', () => resolve(undefined));\n\n\t\t\t\t// Complete when wait marker file is deleted\n\t\t\t\twhenDeleted(waitMarkerFilePath!).then(resolve, resolve);\n\t\t\t}).then(() => {\n\n\t\t\t\t// Make sure to delete the tmp stdin file if we have any\n\t\t\t\tif (stdinFilePath) {\n\t\t\t\t\tunlinkSync(stdinFilePath);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn Promise.all(processCallbacks.map(callback => callback(child)));\n\t}\n}\n\nfunction eventuallyExit(code: number): void {\n\tsetTimeout(() => process.exit(code), 0);\n}\n\nmain(process.argv)\n\t.then(() => eventuallyExit(0))\n\t.then(null, err => {\n\t\tconsole.error(err.message || err.stack || err);\n\t\teventuallyExit(1);\n\t});\n"]}