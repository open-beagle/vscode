{"version":3,"file":"cliProcessMain.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/code/node/cliProcessMain.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { release, hostname } from 'os';\nimport * as fs from 'fs';\nimport { gracefulify } from 'graceful-fs';\nimport { isAbsolute, join } from 'vs/base/common/path';\nimport { raceTimeout } from 'vs/base/common/async';\nimport product from 'vs/platform/product/common/product';\nimport { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';\nimport { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { InstantiationService } from 'vs/platform/instantiation/common/instantiationService';\nimport { INativeEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { NativeParsedArgs } from 'vs/platform/environment/common/argv';\nimport { NativeEnvironmentService } from 'vs/platform/environment/node/environmentService';\nimport { IExtensionManagementService, IExtensionGalleryService, IExtensionManagementCLIService } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { ExtensionManagementService } from 'vs/platform/extensionManagement/node/extensionManagementService';\nimport { ExtensionGalleryService } from 'vs/platform/extensionManagement/common/extensionGalleryService';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { combinedAppender, NullTelemetryService } from 'vs/platform/telemetry/common/telemetryUtils';\nimport { TelemetryService, ITelemetryServiceConfig } from 'vs/platform/telemetry/common/telemetryService';\nimport { resolveCommonProperties } from 'vs/platform/telemetry/common/commonProperties';\nimport { IRequestService } from 'vs/platform/request/common/request';\nimport { RequestService } from 'vs/platform/request/node/requestService';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ConfigurationService } from 'vs/platform/configuration/common/configurationService';\nimport { AppInsightsAppender } from 'vs/platform/telemetry/node/appInsightsAppender';\nimport { IStateService } from 'vs/platform/state/node/state';\nimport { StateService } from 'vs/platform/state/node/stateService';\nimport { ILogService, getLogLevel, LogLevel, ConsoleLogger, MultiplexLogService, ILogger } from 'vs/platform/log/common/log';\nimport { Schemas } from 'vs/base/common/network';\nimport { SpdLogLogger } from 'vs/platform/log/node/spdlogLog';\nimport { buildTelemetryMessage } from 'vs/platform/telemetry/node/telemetry';\nimport { FileService } from 'vs/platform/files/common/fileService';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { DiskFileSystemProvider } from 'vs/platform/files/node/diskFileSystemProvider';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { ExtensionManagementCLIService } from 'vs/platform/extensionManagement/common/extensionManagementCLIService';\nimport { URI } from 'vs/base/common/uri';\nimport { LocalizationsService } from 'vs/platform/localizations/node/localizations';\nimport { ILocalizationsService } from 'vs/platform/localizations/common/localizations';\nimport { setUnexpectedErrorHandler } from 'vs/base/common/errors';\nimport { toErrorMessage } from 'vs/base/common/errorMessage';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { cwd } from 'vs/base/common/process';\n\nclass CliMain extends Disposable {\n\n\tconstructor(\n\t\tprivate argv: NativeParsedArgs\n\t) {\n\t\tsuper();\n\n\t\t// Enable gracefulFs\n\t\tgracefulify(fs);\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Dispose on exit\n\t\tprocess.once('exit', () => this.dispose());\n\t}\n\n\tasync run(): Promise<void> {\n\n\t\t// Services\n\t\tconst [instantiationService, appenders] = await this.initServices();\n\n\t\treturn instantiationService.invokeFunction(async accessor => {\n\t\t\tconst logService = accessor.get(ILogService);\n\t\t\tconst fileService = accessor.get(IFileService);\n\t\t\tconst environmentService = accessor.get(INativeEnvironmentService);\n\t\t\tconst extensionManagementCLIService = accessor.get(IExtensionManagementCLIService);\n\n\t\t\t// Log info\n\t\t\tlogService.info('CLI main', this.argv);\n\n\t\t\t// Error handler\n\t\t\tthis.registerErrorHandler(logService);\n\n\t\t\t// Run based on argv\n\t\t\tawait this.doRun(environmentService, extensionManagementCLIService, fileService);\n\n\t\t\t// Flush the remaining data in AI adapter (with 1s timeout)\n\t\t\treturn raceTimeout(combinedAppender(...appenders).flush(), 1000);\n\t\t});\n\t}\n\n\tprivate async initServices(): Promise<[IInstantiationService, AppInsightsAppender[]]> {\n\t\tconst services = new ServiceCollection();\n\n\t\t// Product\n\t\tconst productService = { _serviceBrand: undefined, ...product };\n\t\tservices.set(IProductService, productService);\n\n\t\t// Environment\n\t\tconst environmentService = new NativeEnvironmentService(this.argv, productService);\n\t\tservices.set(INativeEnvironmentService, environmentService);\n\n\t\t// Init folders\n\t\tawait Promise.all([environmentService.appSettingsHome.fsPath, environmentService.extensionsPath].map(path => path ? fs.promises.mkdir(path, { recursive: true }) : undefined));\n\n\t\t// Log\n\t\tconst logLevel = getLogLevel(environmentService);\n\t\tconst loggers: ILogger[] = [];\n\t\tloggers.push(new SpdLogLogger('cli', join(environmentService.logsPath, 'cli.log'), true, logLevel));\n\t\tif (logLevel === LogLevel.Trace) {\n\t\t\tloggers.push(new ConsoleLogger(logLevel));\n\t\t}\n\n\t\tconst logService = this._register(new MultiplexLogService(loggers));\n\t\tservices.set(ILogService, logService);\n\n\t\t// Files\n\t\tconst fileService = this._register(new FileService(logService));\n\t\tservices.set(IFileService, fileService);\n\n\t\tconst diskFileSystemProvider = this._register(new DiskFileSystemProvider(logService));\n\t\tfileService.registerProvider(Schemas.file, diskFileSystemProvider);\n\n\t\t// Configuration\n\t\tconst configurationService = this._register(new ConfigurationService(environmentService.settingsResource, fileService));\n\t\tservices.set(IConfigurationService, configurationService);\n\n\t\t// Init config\n\t\tawait configurationService.initialize();\n\n\t\t// State\n\t\tconst stateService = new StateService(environmentService, logService);\n\t\tservices.set(IStateService, stateService);\n\n\t\t// Request\n\t\tservices.set(IRequestService, new SyncDescriptor(RequestService));\n\n\t\t// Extensions\n\t\tservices.set(IExtensionManagementService, new SyncDescriptor(ExtensionManagementService));\n\t\tservices.set(IExtensionGalleryService, new SyncDescriptor(ExtensionGalleryService));\n\t\tservices.set(IExtensionManagementCLIService, new SyncDescriptor(ExtensionManagementCLIService));\n\n\t\t// Localizations\n\t\tservices.set(ILocalizationsService, new SyncDescriptor(LocalizationsService));\n\n\t\t// Telemetry\n\t\tconst appenders: AppInsightsAppender[] = [];\n\t\tif (environmentService.isBuilt && !environmentService.isExtensionDevelopment && !environmentService.disableTelemetry && productService.enableTelemetry) {\n\t\t\tif (productService.aiConfig && productService.aiConfig.asimovKey) {\n\t\t\t\tappenders.push(new AppInsightsAppender('monacoworkbench', null, productService.aiConfig.asimovKey));\n\t\t\t}\n\n\t\t\tconst { appRoot, extensionsPath, installSourcePath } = environmentService;\n\n\t\t\tconst config: ITelemetryServiceConfig = {\n\t\t\t\tappender: combinedAppender(...appenders),\n\t\t\t\tsendErrorTelemetry: false,\n\t\t\t\tcommonProperties: resolveCommonProperties(fileService, release(), hostname(), process.arch, productService.commit, productService.version, stateService.getItem('telemetry.machineId'), productService.msftInternalDomains, installSourcePath),\n\t\t\t\tpiiPaths: [appRoot, extensionsPath]\n\t\t\t};\n\n\t\t\tservices.set(ITelemetryService, new SyncDescriptor(TelemetryService, [config]));\n\n\t\t} else {\n\t\t\tservices.set(ITelemetryService, NullTelemetryService);\n\t\t}\n\n\t\treturn [new InstantiationService(services), appenders];\n\t}\n\n\tprivate registerErrorHandler(logService: ILogService): void {\n\n\t\t// Install handler for unexpected errors\n\t\tsetUnexpectedErrorHandler(error => {\n\t\t\tconst message = toErrorMessage(error, true);\n\t\t\tif (!message) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlogService.error(`[uncaught exception in CLI]: ${message}`);\n\t\t});\n\t}\n\n\tprivate async doRun(environmentService: INativeEnvironmentService, extensionManagementCLIService: IExtensionManagementCLIService, fileService: IFileService): Promise<void> {\n\n\t\t// Install Source\n\t\tif (this.argv['install-source']) {\n\t\t\treturn this.setInstallSource(environmentService, fileService, this.argv['install-source']);\n\t\t}\n\n\t\t// List Extensions\n\t\tif (this.argv['list-extensions']) {\n\t\t\treturn extensionManagementCLIService.listExtensions(!!this.argv['show-versions'], this.argv['category']);\n\t\t}\n\n\t\t// Install Extension\n\t\telse if (this.argv['install-extension'] || this.argv['install-builtin-extension']) {\n\t\t\treturn extensionManagementCLIService.installExtensions(this.asExtensionIdOrVSIX(this.argv['install-extension'] || []), this.argv['install-builtin-extension'] || [], !!this.argv['do-not-sync'], !!this.argv['force']);\n\t\t}\n\n\t\t// Uninstall Extension\n\t\telse if (this.argv['uninstall-extension']) {\n\t\t\treturn extensionManagementCLIService.uninstallExtensions(this.asExtensionIdOrVSIX(this.argv['uninstall-extension']), !!this.argv['force']);\n\t\t}\n\n\t\t// Locate Extension\n\t\telse if (this.argv['locate-extension']) {\n\t\t\treturn extensionManagementCLIService.locateExtension(this.argv['locate-extension']);\n\t\t}\n\n\t\t// Telemetry\n\t\telse if (this.argv['telemetry']) {\n\t\t\tconsole.log(buildTelemetryMessage(environmentService.appRoot, environmentService.extensionsPath));\n\t\t}\n\t}\n\n\tprivate asExtensionIdOrVSIX(inputs: string[]): (string | URI)[] {\n\t\treturn inputs.map(input => /\\.vsix$/i.test(input) ? URI.file(isAbsolute(input) ? input : join(cwd(), input)) : input);\n\t}\n\n\tprivate async setInstallSource(environmentService: INativeEnvironmentService, fileService: IFileService, installSource: string): Promise<void> {\n\t\tawait fileService.writeFile(URI.file(environmentService.installSourcePath), VSBuffer.fromString(installSource.slice(0, 30)));\n\t}\n}\n\nexport async function main(argv: NativeParsedArgs): Promise<void> {\n\tconst cliMain = new CliMain(argv);\n\n\ttry {\n\t\tawait cliMain.run();\n\t} finally {\n\t\tcliMain.dispose();\n\t}\n}\n"]}