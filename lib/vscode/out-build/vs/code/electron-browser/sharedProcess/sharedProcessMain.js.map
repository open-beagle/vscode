{"version":3,"file":"sharedProcessMain.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/code/electron-browser/sharedProcess/sharedProcessMain.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as fs from 'fs';\nimport { release, hostname } from 'os';\nimport { gracefulify } from 'graceful-fs';\nimport { ipcRenderer } from 'electron';\nimport product from 'vs/platform/product/common/product';\nimport { Server as MessagePortServer } from 'vs/base/parts/ipc/electron-browser/ipc.mp';\nimport { StaticRouter, ProxyChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';\nimport { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';\nimport { InstantiationService } from 'vs/platform/instantiation/common/instantiationService';\nimport { INativeEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { NativeEnvironmentService } from 'vs/platform/environment/node/environmentService';\nimport { ExtensionManagementChannel, ExtensionTipsChannel } from 'vs/platform/extensionManagement/common/extensionManagementIpc';\nimport { IExtensionManagementService, IExtensionGalleryService, IGlobalExtensionEnablementService, IExtensionTipsService } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { ExtensionManagementService } from 'vs/platform/extensionManagement/node/extensionManagementService';\nimport { ExtensionGalleryService } from 'vs/platform/extensionManagement/common/extensionGalleryService';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ConfigurationService } from 'vs/platform/configuration/common/configurationService';\nimport { IRequestService } from 'vs/platform/request/common/request';\nimport { RequestService } from 'vs/platform/request/browser/requestService';\nimport { ICustomEndpointTelemetryService, ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { combinedAppender, NullTelemetryService, ITelemetryAppender, NullAppender } from 'vs/platform/telemetry/common/telemetryUtils';\nimport { resolveCommonProperties } from 'vs/platform/telemetry/common/commonProperties';\nimport { TelemetryAppenderChannel } from 'vs/platform/telemetry/common/telemetryIpc';\nimport { TelemetryService } from 'vs/platform/telemetry/common/telemetryService';\nimport { AppInsightsAppender } from 'vs/platform/telemetry/node/appInsightsAppender';\nimport { ILogService, ILoggerService, MultiplexLogService, ConsoleLogger } from 'vs/platform/log/common/log';\nimport { LogLevelChannelClient, FollowerLogService, LoggerChannelClient } from 'vs/platform/log/common/logIpc';\nimport { LocalizationsService } from 'vs/platform/localizations/node/localizations';\nimport { ILocalizationsService } from 'vs/platform/localizations/common/localizations';\nimport { combinedDisposable, Disposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { DownloadService } from 'vs/platform/download/common/downloadService';\nimport { IDownloadService } from 'vs/platform/download/common/download';\nimport { NodeCachedDataCleaner } from 'vs/code/electron-browser/sharedProcess/contrib/nodeCachedDataCleaner';\nimport { LanguagePackCachedDataCleaner } from 'vs/code/electron-browser/sharedProcess/contrib/languagePackCachedDataCleaner';\nimport { StorageDataCleaner } from 'vs/code/electron-browser/sharedProcess/contrib/storageDataCleaner';\nimport { LogsDataCleaner } from 'vs/code/electron-browser/sharedProcess/contrib/logsDataCleaner';\nimport { IMainProcessService } from 'vs/platform/ipc/electron-sandbox/services';\nimport { MessagePortMainProcessService } from 'vs/platform/ipc/electron-browser/mainProcessService';\nimport { DiagnosticsService } from 'vs/platform/diagnostics/node/diagnosticsService';\nimport { IDiagnosticsService } from 'vs/platform/diagnostics/common/diagnostics';\nimport { FileService } from 'vs/platform/files/common/fileService';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { DiskFileSystemProvider } from 'vs/platform/files/node/diskFileSystemProvider';\nimport { Schemas } from 'vs/base/common/network';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IUserDataSyncService, IUserDataSyncStoreService, registerConfiguration as registerUserDataSyncConfiguration, IUserDataSyncLogService, IUserDataSyncUtilService, IUserDataSyncResourceEnablementService, IUserDataSyncBackupStoreService, IUserDataSyncStoreManagementService, IUserDataAutoSyncEnablementService } from 'vs/platform/userDataSync/common/userDataSync';\nimport { UserDataSyncService } from 'vs/platform/userDataSync/common/userDataSyncService';\nimport { UserDataSyncStoreService, UserDataSyncStoreManagementService } from 'vs/platform/userDataSync/common/userDataSyncStoreService';\nimport { UserDataSyncUtilServiceClient, UserDataAutoSyncChannel, UserDataSyncMachinesServiceChannel, UserDataSyncAccountServiceChannel, UserDataSyncStoreManagementServiceChannel } from 'vs/platform/userDataSync/common/userDataSyncIpc';\nimport { INativeHostService } from 'vs/platform/native/electron-sandbox/native';\nimport { UserDataSyncLogService } from 'vs/platform/userDataSync/common/userDataSyncLog';\nimport { UserDataAutoSyncService } from 'vs/platform/userDataSync/electron-sandbox/userDataAutoSyncService';\nimport { NativeStorageService } from 'vs/platform/storage/electron-sandbox/storageService';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { GlobalExtensionEnablementService } from 'vs/platform/extensionManagement/common/extensionEnablementService';\nimport { UserDataSyncResourceEnablementService } from 'vs/platform/userDataSync/common/userDataSyncResourceEnablementService';\nimport { IUserDataSyncAccountService, UserDataSyncAccountService } from 'vs/platform/userDataSync/common/userDataSyncAccount';\nimport { UserDataSyncBackupStoreService } from 'vs/platform/userDataSync/common/userDataSyncBackupStoreService';\nimport { ExtensionTipsService } from 'vs/platform/extensionManagement/electron-sandbox/extensionTipsService';\nimport { UserDataSyncMachinesService, IUserDataSyncMachinesService } from 'vs/platform/userDataSync/common/userDataSyncMachines';\nimport { IExtensionRecommendationNotificationService } from 'vs/platform/extensionRecommendations/common/extensionRecommendations';\nimport { ExtensionRecommendationNotificationServiceChannelClient } from 'vs/platform/extensionRecommendations/electron-sandbox/extensionRecommendationsIpc';\nimport { ActiveWindowManager } from 'vs/platform/windows/node/windowTracker';\nimport { TelemetryLogAppender } from 'vs/platform/telemetry/common/telemetryLogAppender';\nimport { UserDataAutoSyncEnablementService } from 'vs/platform/userDataSync/common/userDataAutoSyncService';\nimport { IgnoredExtensionsManagementService, IIgnoredExtensionsManagementService } from 'vs/platform/userDataSync/common/ignoredExtensions';\nimport { ExtensionsStorageSyncService, IExtensionsStorageSyncService } from 'vs/platform/userDataSync/common/extensionsStorageSync';\nimport { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { ISharedProcessConfiguration } from 'vs/platform/sharedProcess/node/sharedProcess';\nimport { LocalizationsUpdater } from 'vs/code/electron-browser/sharedProcess/contrib/localizationsUpdater';\nimport { DeprecatedExtensionsCleaner } from 'vs/code/electron-browser/sharedProcess/contrib/deprecatedExtensionsCleaner';\nimport { onUnexpectedError, setUnexpectedErrorHandler } from 'vs/base/common/errors';\nimport { toErrorMessage } from 'vs/base/common/errorMessage';\nimport { TerminalIpcChannels } from 'vs/platform/terminal/common/terminal';\nimport { PtyHostService } from 'vs/platform/terminal/node/ptyHostService';\nimport { ILocalPtyService } from 'vs/platform/terminal/electron-sandbox/terminal';\nimport { UserDataSyncChannel } from 'vs/platform/userDataSync/common/userDataSyncServiceIpc';\nimport { IChecksumService } from 'vs/platform/checksum/common/checksumService';\nimport { ChecksumService } from 'vs/platform/checksum/node/checksumService';\nimport { CustomEndpointTelemetryService } from 'vs/platform/telemetry/node/customEndpointTelemetryService';\nimport { URI } from 'vs/base/common/uri';\nimport { joinPath } from 'vs/base/common/resources';\n\nclass SharedProcessMain extends Disposable {\n\n\tprivate server = this._register(new MessagePortServer());\n\n\tconstructor(private configuration: ISharedProcessConfiguration) {\n\t\tsuper();\n\n\t\t// Enable gracefulFs\n\t\tgracefulify(fs);\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Dispose on exit\n\t\tconst onExit = () => this.dispose();\n\t\tprocess.once('exit', onExit);\n\t\tipcRenderer.once('vscode:electron-main->shared-process=exit', onExit);\n\t}\n\n\tasync open(): Promise<void> {\n\n\t\t// Services\n\t\tconst instantiationService = await this.initServices();\n\n\t\t// Config\n\t\tregisterUserDataSyncConfiguration();\n\n\t\tinstantiationService.invokeFunction(accessor => {\n\t\t\tconst logService = accessor.get(ILogService);\n\n\t\t\t// Log info\n\t\t\tlogService.trace('sharedProcess configuration', JSON.stringify(this.configuration));\n\n\t\t\t// Channels\n\t\t\tthis.initChannels(accessor);\n\n\t\t\t// Error handler\n\t\t\tthis.registerErrorHandler(logService);\n\t\t});\n\n\t\t// Instantiate Contributions\n\t\tthis._register(combinedDisposable(\n\t\t\tinstantiationService.createInstance(NodeCachedDataCleaner, this.configuration.nodeCachedDataDir),\n\t\t\tinstantiationService.createInstance(LanguagePackCachedDataCleaner),\n\t\t\tinstantiationService.createInstance(StorageDataCleaner, this.configuration.backupWorkspacesPath),\n\t\t\tinstantiationService.createInstance(LogsDataCleaner),\n\t\t\tinstantiationService.createInstance(LocalizationsUpdater),\n\t\t\tinstantiationService.createInstance(DeprecatedExtensionsCleaner)\n\t\t));\n\t}\n\n\tprivate async initServices(): Promise<IInstantiationService> {\n\t\tconst services = new ServiceCollection();\n\n\t\t// Product\n\t\tconst productService = { _serviceBrand: undefined, ...product };\n\t\tservices.set(IProductService, productService);\n\n\t\t// Main Process\n\t\tconst mainRouter = new StaticRouter(ctx => ctx === 'main');\n\t\tconst mainProcessService = new MessagePortMainProcessService(this.server, mainRouter);\n\t\tservices.set(IMainProcessService, mainProcessService);\n\n\t\t// Environment\n\t\tconst environmentService = new NativeEnvironmentService(this.configuration.args, productService);\n\t\tservices.set(INativeEnvironmentService, environmentService);\n\n\t\t// Logger\n\t\tconst logLevelClient = new LogLevelChannelClient(this.server.getChannel('logLevel', mainRouter));\n\t\tconst loggerService = new LoggerChannelClient(this.configuration.logLevel, logLevelClient.onDidChangeLogLevel, mainProcessService.getChannel('logger'));\n\t\tservices.set(ILoggerService, loggerService);\n\n\t\t// Log\n\t\tconst multiplexLogger = this._register(new MultiplexLogService([\n\t\t\tthis._register(new ConsoleLogger(this.configuration.logLevel)),\n\t\t\tthis._register(loggerService.createLogger(joinPath(URI.file(environmentService.logsPath), 'sharedprocess.log'), { name: 'sharedprocess' }))\n\t\t]));\n\n\t\tconst logService = this._register(new FollowerLogService(logLevelClient, multiplexLogger));\n\t\tservices.set(ILogService, logService);\n\n\t\t// Files\n\t\tconst fileService = this._register(new FileService(logService));\n\t\tservices.set(IFileService, fileService);\n\n\t\tconst diskFileSystemProvider = this._register(new DiskFileSystemProvider(logService));\n\t\tfileService.registerProvider(Schemas.file, diskFileSystemProvider);\n\n\t\t// Configuration\n\t\tconst configurationService = this._register(new ConfigurationService(environmentService.settingsResource, fileService));\n\t\tservices.set(IConfigurationService, configurationService);\n\n\t\tawait configurationService.initialize();\n\n\t\t// Storage (global access only)\n\t\tconst storageService = new NativeStorageService(undefined, mainProcessService, environmentService);\n\t\tservices.set(IStorageService, storageService);\n\n\t\tawait storageService.initialize();\n\t\tthis._register(toDisposable(() => storageService.flush()));\n\n\t\t// Request\n\t\tservices.set(IRequestService, new SyncDescriptor(RequestService));\n\n\t\t// Checksum\n\t\tservices.set(IChecksumService, new SyncDescriptor(ChecksumService));\n\n\t\t// Native Host\n\t\tconst nativeHostService = ProxyChannel.toService<INativeHostService>(mainProcessService.getChannel('nativeHost'), { context: this.configuration.windowId });\n\t\tservices.set(INativeHostService, nativeHostService);\n\n\t\t// Download\n\t\tservices.set(IDownloadService, new SyncDescriptor(DownloadService));\n\n\t\t// Extension recommendations\n\t\tconst activeWindowManager = this._register(new ActiveWindowManager(nativeHostService));\n\t\tconst activeWindowRouter = new StaticRouter(ctx => activeWindowManager.getActiveClientId().then(id => ctx === id));\n\t\tservices.set(IExtensionRecommendationNotificationService, new ExtensionRecommendationNotificationServiceChannelClient(this.server.getChannel('extensionRecommendationNotification', activeWindowRouter)));\n\n\t\t// Telemetry\n\t\tlet telemetryService: ITelemetryService;\n\t\tlet telemetryAppender: ITelemetryAppender;\n\t\tif (!environmentService.isExtensionDevelopment && !environmentService.disableTelemetry && productService.enableTelemetry) {\n\t\t\ttelemetryAppender = new TelemetryLogAppender(loggerService, environmentService);\n\n\t\t\tconst { appRoot, extensionsPath, isBuilt, installSourcePath } = environmentService;\n\n\t\t\t// Application Insights\n\t\t\tif (productService.aiConfig && productService.aiConfig.asimovKey && isBuilt) {\n\t\t\t\tconst appInsightsAppender = new AppInsightsAppender('monacoworkbench', null, productService.aiConfig.asimovKey);\n\t\t\t\tthis._register(toDisposable(() => appInsightsAppender.flush())); // Ensure the AI appender is disposed so that it flushes remaining data\n\t\t\t\ttelemetryAppender = combinedAppender(appInsightsAppender, telemetryAppender);\n\t\t\t}\n\n\t\t\ttelemetryService = new TelemetryService({\n\t\t\t\tappender: telemetryAppender,\n\t\t\t\tcommonProperties: resolveCommonProperties(fileService, release(), hostname(), process.arch, productService.commit, productService.version, this.configuration.machineId, productService.msftInternalDomains, installSourcePath),\n\t\t\t\tsendErrorTelemetry: true,\n\t\t\t\tpiiPaths: [appRoot, extensionsPath]\n\t\t\t}, configurationService);\n\t\t} else {\n\t\t\ttelemetryService = NullTelemetryService;\n\t\t\ttelemetryAppender = NullAppender;\n\t\t}\n\n\t\tthis.server.registerChannel('telemetryAppender', new TelemetryAppenderChannel(telemetryAppender));\n\t\tservices.set(ITelemetryService, telemetryService);\n\n\t\t// Custom Endpoint Telemetry\n\t\tconst customEndpointTelemetryService = new CustomEndpointTelemetryService(configurationService, telemetryService);\n\t\tservices.set(ICustomEndpointTelemetryService, customEndpointTelemetryService);\n\n\t\t// Extension Management\n\t\tservices.set(IExtensionManagementService, new SyncDescriptor(ExtensionManagementService));\n\n\t\t// Extension Gallery\n\t\tservices.set(IExtensionGalleryService, new SyncDescriptor(ExtensionGalleryService));\n\n\t\t// Extension Tips\n\t\tservices.set(IExtensionTipsService, new SyncDescriptor(ExtensionTipsService));\n\n\t\t// Localizations\n\t\tservices.set(ILocalizationsService, new SyncDescriptor(LocalizationsService));\n\n\t\t// Diagnostics\n\t\tservices.set(IDiagnosticsService, new SyncDescriptor(DiagnosticsService));\n\n\t\t// Settings Sync\n\t\tservices.set(IUserDataSyncAccountService, new SyncDescriptor(UserDataSyncAccountService));\n\t\tservices.set(IUserDataSyncLogService, new SyncDescriptor(UserDataSyncLogService));\n\t\tservices.set(IUserDataSyncUtilService, new UserDataSyncUtilServiceClient(this.server.getChannel('userDataSyncUtil', client => client.ctx !== 'main')));\n\t\tservices.set(IGlobalExtensionEnablementService, new SyncDescriptor(GlobalExtensionEnablementService));\n\t\tservices.set(IIgnoredExtensionsManagementService, new SyncDescriptor(IgnoredExtensionsManagementService));\n\t\tservices.set(IExtensionsStorageSyncService, new SyncDescriptor(ExtensionsStorageSyncService));\n\t\tservices.set(IUserDataSyncStoreManagementService, new SyncDescriptor(UserDataSyncStoreManagementService));\n\t\tservices.set(IUserDataSyncStoreService, new SyncDescriptor(UserDataSyncStoreService));\n\t\tservices.set(IUserDataSyncMachinesService, new SyncDescriptor(UserDataSyncMachinesService));\n\t\tservices.set(IUserDataSyncBackupStoreService, new SyncDescriptor(UserDataSyncBackupStoreService));\n\t\tservices.set(IUserDataAutoSyncEnablementService, new SyncDescriptor(UserDataAutoSyncEnablementService));\n\t\tservices.set(IUserDataSyncResourceEnablementService, new SyncDescriptor(UserDataSyncResourceEnablementService));\n\t\tservices.set(IUserDataSyncService, new SyncDescriptor(UserDataSyncService));\n\n\t\t// Terminal\n\t\tservices.set(ILocalPtyService, this._register(new PtyHostService(logService, telemetryService)));\n\n\t\treturn new InstantiationService(services);\n\t}\n\n\tprivate initChannels(accessor: ServicesAccessor): void {\n\n\t\t// Extensions Management\n\t\tconst channel = new ExtensionManagementChannel(accessor.get(IExtensionManagementService), () => null);\n\t\tthis.server.registerChannel('extensions', channel);\n\n\t\t// Localizations\n\t\tconst localizationsChannel = ProxyChannel.fromService(accessor.get(ILocalizationsService));\n\t\tthis.server.registerChannel('localizations', localizationsChannel);\n\n\t\t// Diagnostics\n\t\tconst diagnosticsChannel = ProxyChannel.fromService(accessor.get(IDiagnosticsService));\n\t\tthis.server.registerChannel('diagnostics', diagnosticsChannel);\n\n\t\t// Extension Tips\n\t\tconst extensionTipsChannel = new ExtensionTipsChannel(accessor.get(IExtensionTipsService));\n\t\tthis.server.registerChannel('extensionTipsService', extensionTipsChannel);\n\n\t\t// Checksum\n\t\tconst checksumChannel = ProxyChannel.fromService(accessor.get(IChecksumService));\n\t\tthis.server.registerChannel('checksum', checksumChannel);\n\n\t\t// Settings Sync\n\t\tconst userDataSyncMachineChannel = new UserDataSyncMachinesServiceChannel(accessor.get(IUserDataSyncMachinesService));\n\t\tthis.server.registerChannel('userDataSyncMachines', userDataSyncMachineChannel);\n\n\t\t// Custom Endpoint Telemetry\n\t\tconst customEndpointTelemetryChannel = ProxyChannel.fromService(accessor.get(ICustomEndpointTelemetryService));\n\t\tthis.server.registerChannel('customEndpointTelemetry', customEndpointTelemetryChannel);\n\n\t\tconst userDataSyncAccountChannel = new UserDataSyncAccountServiceChannel(accessor.get(IUserDataSyncAccountService));\n\t\tthis.server.registerChannel('userDataSyncAccount', userDataSyncAccountChannel);\n\n\t\tconst userDataSyncStoreManagementChannel = new UserDataSyncStoreManagementServiceChannel(accessor.get(IUserDataSyncStoreManagementService));\n\t\tthis.server.registerChannel('userDataSyncStoreManagement', userDataSyncStoreManagementChannel);\n\n\t\tconst userDataSyncChannel = new UserDataSyncChannel(accessor.get(IUserDataSyncService), accessor.get(ILogService));\n\t\tthis.server.registerChannel('userDataSync', userDataSyncChannel);\n\n\t\tconst userDataAutoSync = this._register(accessor.get(IInstantiationService).createInstance(UserDataAutoSyncService));\n\t\tconst userDataAutoSyncChannel = new UserDataAutoSyncChannel(userDataAutoSync);\n\t\tthis.server.registerChannel('userDataAutoSync', userDataAutoSyncChannel);\n\n\t\t// Terminal\n\t\tconst localPtyService = accessor.get(ILocalPtyService);\n\t\tconst localPtyChannel = ProxyChannel.fromService(localPtyService);\n\t\tthis.server.registerChannel(TerminalIpcChannels.LocalPty, localPtyChannel);\n\t}\n\n\tprivate registerErrorHandler(logService: ILogService): void {\n\n\t\t// Listen on unhandled rejection events\n\t\twindow.addEventListener('unhandledrejection', (event: PromiseRejectionEvent) => {\n\n\t\t\t// See https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n\t\t\tonUnexpectedError(event.reason);\n\n\t\t\t// Prevent the printing of this event to the console\n\t\t\tevent.preventDefault();\n\t\t});\n\n\t\t// Install handler for unexpected errors\n\t\tsetUnexpectedErrorHandler(error => {\n\t\t\tconst message = toErrorMessage(error, true);\n\t\t\tif (!message) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlogService.error(`[uncaught exception in sharedProcess]: ${message}`);\n\t\t});\n\t}\n}\n\nexport async function main(configuration: ISharedProcessConfiguration): Promise<void> {\n\n\t// create shared process and signal back to main that we are\n\t// ready to accept message ports as client connections\n\tconst sharedProcess = new SharedProcessMain(configuration);\n\tipcRenderer.send('vscode:shared-process->electron-main=ipc-ready');\n\n\t// await initialization and signal this back to electron-main\n\tawait sharedProcess.open();\n\tipcRenderer.send('vscode:shared-process->electron-main=init-done');\n}\n"]}