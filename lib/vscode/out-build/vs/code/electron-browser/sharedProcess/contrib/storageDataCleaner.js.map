{"version":3,"file":"storageDataCleaner.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/code/electron-browser/sharedProcess/contrib/storageDataCleaner.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAUhG,IAAa,kBAAkB,GAA/B,MAAa,kBAAmB,SAAQ,sBAAU;QAKjD,YACkB,oBAA4B,EACD,kBAA6C;YAEzF,KAAK,EAAE,CAAC;YAHS,yBAAoB,GAApB,oBAAoB,CAAQ;YACD,uBAAkB,GAAlB,kBAAkB,CAA2B;YAIzF,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC3B,CAAC;QAEO,kBAAkB;YACzB,IAAI,MAAM,GAA+B,UAAU,CAAC,GAAG,EAAE;gBACxD,MAAM,GAAG,SAAS,CAAC;gBAEnB,CAAC,KAAK,IAAI,EAAE;oBACX,IAAI;wBACH,8FAA8F;wBAC9F,gEAAgE;wBAChE,MAAM,QAAQ,GAAG,MAAM,aAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,oBAAoB,EAAE,MAAM,CAAC,CAAC;wBAE5E,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAA4B,CAAC;wBACnE,MAAM,eAAe,GAAG,UAAU,CAAC,mBAAmB,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;wBAEtF,gDAAgD;wBAChD,MAAM,cAAc,GAAG,MAAM,CAAA,GAAA,aAAO,CAAA,CAAC,IAAI,CAAC,kBAAkB,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;wBAC1F,MAAM,OAAO,GAAoB,EAAE,CAAC;wBAEpC,cAAc,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE;4BACtC,IAAI,aAAa,CAAC,MAAM,KAAK,kBAAkB,CAAC,6BAA6B,EAAE;gCAC9E,OAAO;6BACP;4BAED,IAAI,eAAe,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE;gCAClD,OAAO,CAAC,IAAI,CAAC,CAAA,GAAA,YAAM,CAAA,CAAC,CAAA,GAAA,WAAI,CAAA,CAAC,IAAI,CAAC,kBAAkB,CAAC,oBAAoB,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC;6BAC/F;wBACF,CAAC,CAAC,CAAC;wBAEH,MAAM,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;qBAC3B;oBAAC,OAAO,KAAK,EAAE;wBACf,CAAA,GAAA,0BAAiB,CAAA,CAAC,KAAK,CAAC,CAAC;qBACzB;gBACF,CAAC,CAAC,EAAE,CAAC;YACN,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,CAAC;YAEd,IAAI,CAAC,SAAS,CAAC,CAAA,GAAA,wBAAY,CAAA,CAAC,GAAG,EAAE;gBAChC,IAAI,MAAM,EAAE;oBACX,YAAY,CAAC,MAAM,CAAC,CAAC;oBACrB,MAAM,GAAG,SAAS,CAAC;iBACnB;YACF,CAAC,CAAC,CAAC,CAAC;QACL,CAAC;KACD,CAAA;IArDA,sFAAsF;IAC9D,gDAA6B,GAAG,GAAG,GAAG,CAAC,CAAC;IAHpD,kBAAkB;QAO5B,WAAA,uCAAyB,CAAA;OAPf,kBAAkB,CAuD9B;IAvDY,gDAAkB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { promises } from 'fs';\nimport { INativeEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { join } from 'vs/base/common/path';\nimport { readdir, rimraf } from 'vs/base/node/pfs';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { Disposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { IBackupWorkspacesFormat } from 'vs/platform/backup/node/backup';\n\nexport class StorageDataCleaner extends Disposable {\n\n\t// Workspace/Folder storage names are MD5 hashes (128bits / 4 due to hex presentation)\n\tprivate static readonly NON_EMPTY_WORKSPACE_ID_LENGTH = 128 / 4;\n\n\tconstructor(\n\t\tprivate readonly backupWorkspacesPath: string,\n\t\t@INativeEnvironmentService private readonly environmentService: INativeEnvironmentService\n\t) {\n\t\tsuper();\n\n\t\tthis.cleanUpStorageSoon();\n\t}\n\n\tprivate cleanUpStorageSoon(): void {\n\t\tlet handle: NodeJS.Timeout | undefined = setTimeout(() => {\n\t\t\thandle = undefined;\n\n\t\t\t(async () => {\n\t\t\t\ttry {\n\t\t\t\t\t// Leverage the backup workspace file to find out which empty workspace is currently in use to\n\t\t\t\t\t// determine which empty workspace storage can safely be deleted\n\t\t\t\t\tconst contents = await promises.readFile(this.backupWorkspacesPath, 'utf8');\n\n\t\t\t\t\tconst workspaces = JSON.parse(contents) as IBackupWorkspacesFormat;\n\t\t\t\t\tconst emptyWorkspaces = workspaces.emptyWorkspaceInfos.map(info => info.backupFolder);\n\n\t\t\t\t\t// Read all workspace storage folders that exist\n\t\t\t\t\tconst storageFolders = await readdir(this.environmentService.workspaceStorageHome.fsPath);\n\t\t\t\t\tconst deletes: Promise<void>[] = [];\n\n\t\t\t\t\tstorageFolders.forEach(storageFolder => {\n\t\t\t\t\t\tif (storageFolder.length === StorageDataCleaner.NON_EMPTY_WORKSPACE_ID_LENGTH) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (emptyWorkspaces.indexOf(storageFolder) === -1) {\n\t\t\t\t\t\t\tdeletes.push(rimraf(join(this.environmentService.workspaceStorageHome.fsPath, storageFolder)));\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tawait Promise.all(deletes);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tonUnexpectedError(error);\n\t\t\t\t}\n\t\t\t})();\n\t\t}, 30 * 1000);\n\n\t\tthis._register(toDisposable(() => {\n\t\t\tif (handle) {\n\t\t\t\tclearTimeout(handle);\n\t\t\t\thandle = undefined;\n\t\t\t}\n\t\t}));\n\t}\n}\n"]}