{"version":3,"file":"nodeCachedDataCleaner.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/code/electron-browser/sharedProcess/contrib/nodeCachedDataCleaner.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAShG,IAAa,qBAAqB,GAAlC,MAAa,qBAAqB;QAQjC,YACkB,iBAAqC,EACpB,cAA+B;YADhD,sBAAiB,GAAjB,iBAAiB,CAAoB;YACpB,mBAAc,GAAd,cAAc,CAAiB;YARjD,gBAAW,GAAG,IAAI,CAAC,cAAc,CAAC,OAAO,KAAK,QAAQ;gBACtE,CAAC,CAAC,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,iBAAiB;gBAC3C,CAAC,CAAC,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,mBAAmB;YAEnC,iBAAY,GAAG,IAAI,2BAAe,EAAE,CAAC;YAMrD,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAC9B,CAAC;QAED,OAAO;YACN,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;QAC7B,CAAC;QAEO,qBAAqB;YAC5B,yEAAyE;YACzE,6EAA6E;YAC7E,iCAAiC;YACjC,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE;gBAC5B,OAAO;aACP;YAED,gFAAgF;YAChF,UAAU;YACV,MAAM,qBAAqB,GAAG,CAAA,GAAA,cAAO,CAAA,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;YAC9D,MAAM,qBAAqB,GAAG,CAAA,GAAA,eAAQ,CAAA,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;YAE/D,IAAI,MAAM,GAA+B,UAAU,CAAC,GAAG,EAAE;gBACxD,MAAM,GAAG,SAAS,CAAC;gBAEnB,CAAA,GAAA,aAAO,CAAA,CAAC,qBAAqB,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;oBAE7C,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;oBACvB,MAAM,OAAO,GAAuB,EAAE,CAAC;oBAEvC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;wBACvB,aAAa;wBACb,uCAAuC;wBACvC,IAAI,KAAK,KAAK,qBAAqB,EAAE;4BAEpC,MAAM,IAAI,GAAG,CAAA,GAAA,WAAI,CAAA,CAAC,qBAAqB,EAAE,KAAK,CAAC,CAAC;4BAChD,OAAO,CAAC,IAAI,CAAC,aAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;gCAC7C,aAAa;gCACb,qBAAqB;gCACrB,yBAAyB;gCACzB,IAAI,KAAK,CAAC,WAAW,EAAE,EAAE;oCACxB,MAAM,IAAI,GAAG,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;oCACzC,IAAI,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE;wCAC5B,OAAO,CAAA,GAAA,YAAM,CAAA,CAAC,IAAI,CAAC,CAAC;qCACpB;iCACD;gCACD,OAAO,SAAS,CAAC;4BAClB,CAAC,CAAC,CAAC,CAAC;yBACJ;oBACF,CAAC,CAAC,CAAC;oBAEH,OAAO,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;gBAE7B,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,EAAE,0BAAiB,CAAC,CAAC;YAEvC,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,CAAC;YAEd,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAA,GAAA,wBAAY,CAAA,CAAC,GAAG,EAAE;gBACvC,IAAI,MAAM,EAAE;oBACX,YAAY,CAAC,MAAM,CAAC,CAAC;oBACrB,MAAM,GAAG,SAAS,CAAC;iBACnB;YACF,CAAC,CAAC,CAAC,CAAC;QACL,CAAC;KACD,CAAA;IA1EY,qBAAqB;QAU/B,WAAA,gCAAe,CAAA;OAVL,qBAAqB,CA0EjC;IA1EY,sDAAqB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { promises } from 'fs';\nimport { basename, dirname, join } from 'vs/base/common/path';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { toDisposable, DisposableStore } from 'vs/base/common/lifecycle';\nimport { readdir, rimraf } from 'vs/base/node/pfs';\nimport { IProductService } from 'vs/platform/product/common/productService';\n\nexport class NodeCachedDataCleaner {\n\n\tprivate readonly _DataMaxAge = this.productService.quality !== 'stable'\n\t\t? 1000 * 60 * 60 * 24 * 7 // roughly 1 week\n\t\t: 1000 * 60 * 60 * 24 * 30 * 3; // roughly 3 months\n\n\tprivate readonly _disposables = new DisposableStore();\n\n\tconstructor(\n\t\tprivate readonly nodeCachedDataDir: string | undefined,\n\t\t@IProductService private readonly productService: IProductService\n\t) {\n\t\tthis._manageCachedDataSoon();\n\t}\n\n\tdispose(): void {\n\t\tthis._disposables.dispose();\n\t}\n\n\tprivate _manageCachedDataSoon(): void {\n\t\t// Cached data is stored as user data and we run a cleanup task everytime\n\t\t// the editor starts. The strategy is to delete all files that are older than\n\t\t// 3 months (1 week respectively)\n\t\tif (!this.nodeCachedDataDir) {\n\t\t\treturn;\n\t\t}\n\n\t\t// The folder which contains folders of cached data. Each of these folder is per\n\t\t// version\n\t\tconst nodeCachedDataRootDir = dirname(this.nodeCachedDataDir);\n\t\tconst nodeCachedDataCurrent = basename(this.nodeCachedDataDir);\n\n\t\tlet handle: NodeJS.Timeout | undefined = setTimeout(() => {\n\t\t\thandle = undefined;\n\n\t\t\treaddir(nodeCachedDataRootDir).then(entries => {\n\n\t\t\t\tconst now = Date.now();\n\t\t\t\tconst deletes: Promise<unknown>[] = [];\n\n\t\t\t\tentries.forEach(entry => {\n\t\t\t\t\t// name check\n\t\t\t\t\t// * not the current cached data folder\n\t\t\t\t\tif (entry !== nodeCachedDataCurrent) {\n\n\t\t\t\t\t\tconst path = join(nodeCachedDataRootDir, entry);\n\t\t\t\t\t\tdeletes.push(promises.stat(path).then(stats => {\n\t\t\t\t\t\t\t// stat check\n\t\t\t\t\t\t\t// * only directories\n\t\t\t\t\t\t\t// * only when old enough\n\t\t\t\t\t\t\tif (stats.isDirectory()) {\n\t\t\t\t\t\t\t\tconst diff = now - stats.mtime.getTime();\n\t\t\t\t\t\t\t\tif (diff > this._DataMaxAge) {\n\t\t\t\t\t\t\t\t\treturn rimraf(path);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t}));\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn Promise.all(deletes);\n\n\t\t\t}).then(undefined, onUnexpectedError);\n\n\t\t}, 30 * 1000);\n\n\t\tthis._disposables.add(toDisposable(() => {\n\t\t\tif (handle) {\n\t\t\t\tclearTimeout(handle);\n\t\t\t\thandle = undefined;\n\t\t\t}\n\t\t}));\n\t}\n}\n"]}