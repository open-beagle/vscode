{"version":3,"file":"languagePackCachedDataCleaner.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/code/electron-browser/sharedProcess/contrib/languagePackCachedDataCleaner.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as fs from 'fs';\nimport * as path from 'vs/base/common/path';\nimport * as pfs from 'vs/base/node/pfs';\nimport { IStringDictionary } from 'vs/base/common/collections';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { Disposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { INativeEnvironmentService } from 'vs/platform/environment/common/environment';\n\ninterface ExtensionEntry {\n\tversion: string;\n\textensionIdentifier: {\n\t\tid: string;\n\t\tuuid: string;\n\t};\n}\n\ninterface LanguagePackEntry {\n\thash: string;\n\textensions: ExtensionEntry[];\n}\n\ninterface LanguagePackFile {\n\t[locale: string]: LanguagePackEntry;\n}\n\nexport class LanguagePackCachedDataCleaner extends Disposable {\n\n\tprivate readonly _DataMaxAge = this._productService.quality !== 'stable'\n\t\t? 1000 * 60 * 60 * 24 * 7 // roughly 1 week\n\t\t: 1000 * 60 * 60 * 24 * 30 * 3; // roughly 3 months\n\n\tconstructor(\n\t\t@INativeEnvironmentService private readonly _environmentService: INativeEnvironmentService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@IProductService private readonly _productService: IProductService\n\t) {\n\t\tsuper();\n\t\t// We have no Language pack support for dev version (run from source)\n\t\t// So only cleanup when we have a build version.\n\t\tif (this._environmentService.isBuilt) {\n\t\t\tthis._manageCachedDataSoon();\n\t\t}\n\t}\n\n\tprivate _manageCachedDataSoon(): void {\n\t\tlet handle: any = setTimeout(async () => {\n\t\t\thandle = undefined;\n\t\t\tthis._logService.info('Starting to clean up unused language packs.');\n\t\t\ttry {\n\t\t\t\tconst installed: IStringDictionary<boolean> = Object.create(null);\n\t\t\t\tconst metaData: LanguagePackFile = JSON.parse(await fs.promises.readFile(path.join(this._environmentService.userDataPath, 'languagepacks.json'), 'utf8'));\n\t\t\t\tfor (let locale of Object.keys(metaData)) {\n\t\t\t\t\tconst entry = metaData[locale];\n\t\t\t\t\tinstalled[`${entry.hash}.${locale}`] = true;\n\t\t\t\t}\n\t\t\t\t// Cleanup entries for language packs that aren't installed anymore\n\t\t\t\tconst cacheDir = path.join(this._environmentService.userDataPath, 'clp');\n\t\t\t\tconst exists = await pfs.exists(cacheDir);\n\t\t\t\tif (!exists) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tfor (let entry of await pfs.readdir(cacheDir)) {\n\t\t\t\t\tif (installed[entry]) {\n\t\t\t\t\t\tthis._logService.info(`Skipping directory ${entry}. Language pack still in use.`);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tthis._logService.info('Removing unused language pack:', entry);\n\t\t\t\t\tawait pfs.rimraf(path.join(cacheDir, entry));\n\t\t\t\t}\n\n\t\t\t\tconst now = Date.now();\n\t\t\t\tfor (let packEntry of Object.keys(installed)) {\n\t\t\t\t\tconst folder = path.join(cacheDir, packEntry);\n\t\t\t\t\tfor (let entry of await pfs.readdir(folder)) {\n\t\t\t\t\t\tif (entry === 'tcf.json') {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst candidate = path.join(folder, entry);\n\t\t\t\t\t\tconst stat = await fs.promises.stat(candidate);\n\t\t\t\t\t\tif (stat.isDirectory()) {\n\t\t\t\t\t\t\tconst diff = now - stat.mtime.getTime();\n\t\t\t\t\t\t\tif (diff > this._DataMaxAge) {\n\t\t\t\t\t\t\t\tthis._logService.info('Removing language pack cache entry: ', path.join(packEntry, entry));\n\t\t\t\t\t\t\t\tawait pfs.rimraf(candidate);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tonUnexpectedError(error);\n\t\t\t}\n\t\t}, 40 * 1000);\n\n\t\tthis._register(toDisposable(() => {\n\t\t\tif (handle !== undefined) {\n\t\t\t\tclearTimeout(handle);\n\t\t\t}\n\t\t}));\n\t}\n}\n"]}