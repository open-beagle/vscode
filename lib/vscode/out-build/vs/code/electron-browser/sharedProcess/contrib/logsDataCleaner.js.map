{"version":3,"file":"logsDataCleaner.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/code/electron-browser/sharedProcess/contrib/logsDataCleaner.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAShG,IAAa,eAAe,GAA5B,MAAa,eAAgB,SAAQ,sBAAU;QAE9C,YACuC,kBAAuC;YAE7E,KAAK,EAAE,CAAC;YAF8B,uBAAkB,GAAlB,kBAAkB,CAAqB;YAI7E,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC3B,CAAC;QAEO,kBAAkB;YACzB,IAAI,MAAM,GAA+B,UAAU,CAAC,GAAG,EAAE;gBACxD,MAAM,GAAG,SAAS,CAAC;gBAEnB,MAAM,UAAU,GAAG,CAAA,GAAA,eAAQ,CAAA,CAAC,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;gBAC9D,MAAM,QAAQ,GAAG,CAAA,GAAA,cAAO,CAAA,CAAC,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;gBAE3D,CAAA,GAAA,aAAO,CAAA,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;oBACjC,MAAM,WAAW,GAAG,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;oBACxE,MAAM,WAAW,GAAG,WAAW,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,UAAU,CAAC,CAAC;oBAC1E,MAAM,QAAQ,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;oBAE3E,OAAO,gBAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA,GAAA,YAAM,CAAA,CAAC,CAAA,GAAA,WAAI,CAAA,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC7E,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,0BAAiB,CAAC,CAAC;YAClC,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,CAAC;YAEd,IAAI,CAAC,SAAS,CAAC,CAAA,GAAA,wBAAY,CAAA,CAAC,GAAG,EAAE;gBAChC,IAAI,MAAM,EAAE;oBACX,YAAY,CAAC,MAAM,CAAC,CAAC;oBACrB,MAAM,GAAG,SAAS,CAAC;iBACnB;YACF,CAAC,CAAC,CAAC,CAAC;QACL,CAAC;KACD,CAAA;IAjCY,eAAe;QAGzB,WAAA,iCAAmB,CAAA;OAHT,eAAe,CAiC3B;IAjCY,0CAAe","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { join, dirname, basename } from 'vs/base/common/path';\nimport { readdir, rimraf } from 'vs/base/node/pfs';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { Disposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { Promises } from 'vs/base/common/async';\n\nexport class LogsDataCleaner extends Disposable {\n\n\tconstructor(\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService\n\t) {\n\t\tsuper();\n\n\t\tthis.cleanUpOldLogsSoon();\n\t}\n\n\tprivate cleanUpOldLogsSoon(): void {\n\t\tlet handle: NodeJS.Timeout | undefined = setTimeout(() => {\n\t\t\thandle = undefined;\n\n\t\t\tconst currentLog = basename(this.environmentService.logsPath);\n\t\t\tconst logsRoot = dirname(this.environmentService.logsPath);\n\n\t\t\treaddir(logsRoot).then(children => {\n\t\t\t\tconst allSessions = children.filter(name => /^\\d{8}T\\d{6}$/.test(name));\n\t\t\t\tconst oldSessions = allSessions.sort().filter((d, i) => d !== currentLog);\n\t\t\t\tconst toDelete = oldSessions.slice(0, Math.max(0, oldSessions.length - 9));\n\n\t\t\t\treturn Promises.settled(toDelete.map(name => rimraf(join(logsRoot, name))));\n\t\t\t}).then(null, onUnexpectedError);\n\t\t}, 10 * 1000);\n\n\t\tthis._register(toDisposable(() => {\n\t\t\tif (handle) {\n\t\t\t\tclearTimeout(handle);\n\t\t\t\thandle = undefined;\n\t\t\t}\n\t\t}));\n\t}\n}\n"]}