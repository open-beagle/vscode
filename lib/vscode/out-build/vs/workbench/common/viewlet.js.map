{"version":3,"sources":["vs/workbench/common/viewlet.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAMnF,QAAA,qBAAqB,GAAG,IAAI,0BAAa,CAAU,gBAAgB,EAAE,KAAK,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAgB,EAAE,IAAgC,CAAC,CAAC,CAAC;IAC1I,QAAA,mBAAmB,GAAG,IAAI,0BAAa,CAAU,cAAc,EAAE,KAAK,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAc,EAAE,IAAwC,CAAC,CAAC,CAAC;IAC5I,QAAA,oBAAoB,GAAG,IAAI,0BAAa,CAAS,eAAe,EAAE,EAAE,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAe,EAAE,IAAsC,CAAC,CAAC,CAAC","file":"viewlet.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { RawContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { IPaneComposite } from 'vs/workbench/common/panecomposite';\n\nexport const SideBarVisibleContext = new RawContextKey<boolean>('sideBarVisible', false, localize('sideBarVisible', \"Whether the sidebar is visible\"));\nexport const SidebarFocusContext = new RawContextKey<boolean>('sideBarFocus', false, localize('sideBarFocus', \"Whether the sidebar has keyboard focus\"));\nexport const ActiveViewletContext = new RawContextKey<string>('activeViewlet', '', localize('activeViewlet', \"The identifier of the active viewlet\"));\n\nexport interface IViewlet extends IPaneComposite {\n\n\t/**\n\t * Returns the minimal width needed to avoid any content horizontal truncation\n\t */\n\tgetOptimalWidth(): number | undefined;\n}\n"]}