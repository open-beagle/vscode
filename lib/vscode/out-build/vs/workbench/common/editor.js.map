{"version":3,"sources":["vs/workbench/common/editor.ts"],"names":[],"mappings":"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","file":"editor.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { withNullAsUndefined, assertIsDefined } from 'vs/base/common/types';\nimport { URI } from 'vs/base/common/uri';\nimport { IDisposable, Disposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { IEditor, IEditorViewState, ScrollType, IDiffEditor } from 'vs/editor/common/editorCommon';\nimport { IEditorModel, IEditorOptions, ITextEditorOptions, IBaseResourceEditorInput, IResourceEditorInput, EditorActivation, EditorOpenContext, ITextEditorSelection, TextEditorSelectionRevealType, EditorOverride } from 'vs/platform/editor/common/editor';\nimport { IInstantiationService, IConstructorSignature0, ServicesAccessor, BrandedService } from 'vs/platform/instantiation/common/instantiation';\nimport { IContextKeyService, RawContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IEncodingSupport, IModeSupport } from 'vs/workbench/services/textfile/common/textfiles';\nimport { GroupsOrder, IEditorGroup, IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { ICompositeControl, IComposite } from 'vs/workbench/common/composite';\nimport { ActionRunner, IAction } from 'vs/base/common/actions';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { IPathData } from 'vs/platform/windows/common/windows';\nimport { coalesce, firstOrDefault } from 'vs/base/common/arrays';\nimport { ACTIVE_GROUP, IResourceEditorInputType, SIDE_GROUP } from 'vs/workbench/services/editor/common/editorService';\nimport { IRange } from 'vs/editor/common/core/range';\nimport { IExtUri } from 'vs/base/common/resources';\n\n// Static values for editor contributions\nexport const EditorExtensions = {\n\tEditors: 'workbench.contributions.editors',\n\tAssociations: 'workbench.editors.associations',\n\tEditorInputFactories: 'workbench.contributions.editor.inputFactories'\n};\n\n// Editor State Context Keys\nexport const ActiveEditorDirtyContext = new RawContextKey<boolean>('activeEditorIsDirty', false, localize('activeEditorIsDirty', \"Whether the active editor is dirty\"));\nexport const ActiveEditorPinnedContext = new RawContextKey<boolean>('activeEditorIsNotPreview', false, localize('activeEditorIsNotPreview', \"Whether the active editor is not in preview mode\"));\nexport const ActiveEditorStickyContext = new RawContextKey<boolean>('activeEditorIsPinned', false, localize('activeEditorIsPinned', \"Whether the active editor is pinned\"));\nexport const ActiveEditorReadonlyContext = new RawContextKey<boolean>('activeEditorIsReadonly', false, localize('activeEditorIsReadonly', \"Whether the active editor is readonly\"));\n\n// Editor Kind Context Keys\nexport const ActiveEditorContext = new RawContextKey<string | null>('activeEditor', null, { type: 'string', description: localize('activeEditor', \"The identifier of the active editor\") });\nexport const ActiveEditorAvailableEditorIdsContext = new RawContextKey<string>('activeEditorAvailableEditorIds', '', localize('activeEditorAvailableEditorIds', \"The available editor identifiers that are usable for the active editor\"));\nexport const TextCompareEditorVisibleContext = new RawContextKey<boolean>('textCompareEditorVisible', false, localize('textCompareEditorVisible', \"Whether a text compare editor is visible\"));\nexport const TextCompareEditorActiveContext = new RawContextKey<boolean>('textCompareEditorActive', false, localize('textCompareEditorActive', \"Whether a text compare editor is active\"));\n\n// Editor Group Context Keys\nexport const EditorGroupEditorsCountContext = new RawContextKey<number>('groupEditorsCount', 0, localize('groupEditorsCount', \"The number of opened editor groups\"));\nexport const ActiveEditorGroupEmptyContext = new RawContextKey<boolean>('activeEditorGroupEmpty', false, localize('activeEditorGroupEmpty', \"Whether the active editor group is empty\"));\nexport const ActiveEditorGroupIndexContext = new RawContextKey<number>('activeEditorGroupIndex', 0, localize('activeEditorGroupIndex', \"The index of the active editor group\"));\nexport const ActiveEditorGroupLastContext = new RawContextKey<boolean>('activeEditorGroupLast', false, localize('activeEditorGroupLast', \"Whether the active editor group is the last group\"));\nexport const MultipleEditorGroupsContext = new RawContextKey<boolean>('multipleEditorGroups', false, localize('multipleEditorGroups', \"Whether there are multiple editor groups opened\"));\nexport const SingleEditorGroupsContext = MultipleEditorGroupsContext.toNegated();\n\n// Editor Layout Context Keys\nexport const EditorsVisibleContext = new RawContextKey<boolean>('editorIsOpen', false, localize('editorIsOpen', \"Whether an editor is open\"));\nexport const InEditorZenModeContext = new RawContextKey<boolean>('inZenMode', false, localize('inZenMode', \"Whether Zen mode is enabled\"));\nexport const IsCenteredLayoutContext = new RawContextKey<boolean>('isCenteredLayout', false, localize('isCenteredLayout', \"Whether centered layout is enabled\"));\nexport const SplitEditorsVertically = new RawContextKey<boolean>('splitEditorsVertically', false, localize('splitEditorsVertically', \"Whether editors split vertically\"));\nexport const EditorAreaVisibleContext = new RawContextKey<boolean>('editorAreaVisible', true, localize('editorAreaVisible', \"Whether the editor area is visible\"));\n\n/**\n * Text diff editor id.\n */\nexport const TEXT_DIFF_EDITOR_ID = 'workbench.editors.textDiffEditor';\n\n/**\n * Binary diff editor id.\n */\nexport const BINARY_DIFF_EDITOR_ID = 'workbench.editors.binaryResourceDiffEditor';\n\n/**\n * The editor pane is the container for workbench editors.\n */\nexport interface IEditorPane extends IComposite {\n\n\t/**\n\t * The assigned input of this editor.\n\t */\n\treadonly input: IEditorInput | undefined;\n\n\t/**\n\t * The assigned options of the editor.\n\t */\n\treadonly options: IEditorOptions | undefined;\n\n\t/**\n\t * The assigned group this editor is showing in.\n\t */\n\treadonly group: IEditorGroup | undefined;\n\n\t/**\n\t * The minimum width of this editor.\n\t */\n\treadonly minimumWidth: number;\n\n\t/**\n\t * The maximum width of this editor.\n\t */\n\treadonly maximumWidth: number;\n\n\t/**\n\t * The minimum height of this editor.\n\t */\n\treadonly minimumHeight: number;\n\n\t/**\n\t * The maximum height of this editor.\n\t */\n\treadonly maximumHeight: number;\n\n\t/**\n\t * An event to notify whenever minimum/maximum width/height changes.\n\t */\n\treadonly onDidChangeSizeConstraints: Event<{ width: number; height: number; } | undefined>;\n\n\t/**\n\t * The context key service for this editor. Should be overridden by\n\t * editors that have their own ScopedContextKeyService\n\t */\n\treadonly scopedContextKeyService: IContextKeyService | undefined;\n\n\t/**\n\t * Returns the underlying control of this editor. Callers need to cast\n\t * the control to a specific instance as needed, e.g. by using the\n\t * `isCodeEditor` helper method to access the text code editor.\n\t */\n\tgetControl(): IEditorControl | undefined;\n\n\t/**\n\t * Finds out if this editor is visible or not.\n\t */\n\tisVisible(): boolean;\n}\n\n/**\n * Overrides `IEditorPane` where `input` and `group` are known to be set.\n */\nexport interface IVisibleEditorPane extends IEditorPane {\n\treadonly input: IEditorInput;\n\treadonly group: IEditorGroup;\n}\n\n/**\n * The text editor pane is the container for workbench text editors.\n */\nexport interface ITextEditorPane extends IEditorPane {\n\n\t/**\n\t * Returns the underlying text editor widget of this editor.\n\t */\n\tgetControl(): IEditor | undefined;\n\n\t/**\n\t * Returns the current view state of the text editor if any.\n\t */\n\tgetViewState(): IEditorViewState | undefined;\n}\n\nexport function isTextEditorPane(thing: IEditorPane | undefined): thing is ITextEditorPane {\n\tconst candidate = thing as ITextEditorPane | undefined;\n\n\treturn typeof candidate?.getViewState === 'function';\n}\n\n/**\n * The text editor pane is the container for workbench text diff editors.\n */\nexport interface ITextDiffEditorPane extends IEditorPane {\n\n\t/**\n\t * Returns the underlying text editor widget of this editor.\n\t */\n\tgetControl(): IDiffEditor | undefined;\n}\n\n/**\n * Marker interface for the control inside an editor pane. Callers\n * have to cast the control to work with it, e.g. via methods\n * such as `isCodeEditor(control)`.\n */\nexport interface IEditorControl extends ICompositeControl { }\n\nexport interface IFileEditorInputFactory {\n\n\t/**\n\t * The type identifier of the file editor input.\n\t */\n\ttypeId: string;\n\n\t/**\n\t * Creates new new editor input capable of showing files.\n\t */\n\tcreateFileEditorInput(resource: URI, preferredResource: URI | undefined, preferredName: string | undefined, preferredDescription: string | undefined, preferredEncoding: string | undefined, preferredMode: string | undefined, instantiationService: IInstantiationService): IFileEditorInput;\n\n\t/**\n\t * Check if the provided object is a file editor input.\n\t */\n\tisFileEditorInput(obj: unknown): obj is IFileEditorInput;\n}\n\n/**\n * @deprecated obsolete\n *\n * TODO@bpasero remove this API and users once the generic backup restorer has been removed\n */\nexport interface ICustomEditorInputFactory {\n\t/**\n\t * @deprecated obsolete\n\t */\n\tcreateCustomEditorInput(resource: URI, instantiationService: IInstantiationService): Promise<IEditorInput>;\n\t/**\n\t * @deprecated obsolete\n\t */\n\tcanResolveBackup(editorInput: IEditorInput, backupResource: URI): boolean;\n}\n\nexport interface IEditorInputFactoryRegistry {\n\n\t/**\n\t * Registers the file editor input factory to use for file inputs.\n\t */\n\tregisterFileEditorInputFactory(factory: IFileEditorInputFactory): void;\n\n\t/**\n\t * Returns the file editor input factory to use for file inputs.\n\t */\n\tgetFileEditorInputFactory(): IFileEditorInputFactory;\n\n\t/**\n\t * Registers the custom editor input factory to use for custom inputs.\n\t *\n\t * @deprecated obsolete\n\t */\n\tregisterCustomEditorInputFactory(scheme: string, factory: ICustomEditorInputFactory): void;\n\n\t/**\n\t * Returns the custom editor input factory to use for custom inputs.\n\t *\n\t * @deprecated obsolete\n\t */\n\tgetCustomEditorInputFactory(scheme: string): ICustomEditorInputFactory | undefined;\n\n\t/**\n\t * Registers a editor input serializer for the given editor input to the registry.\n\t * An editor input serializer is capable of serializing and deserializing editor\n\t * inputs from string data.\n\t *\n\t * @param editorInputTypeId the type identifier of the editor input\n\t * @param serializer the editor input serializer for serialization/deserialization\n\t */\n\tregisterEditorInputSerializer<Services extends BrandedService[]>(editorInputTypeId: string, ctor: { new(...Services: Services): IEditorInputSerializer }): IDisposable;\n\n\t/**\n\t * Returns the editor input serializer for the given editor input.\n\t */\n\tgetEditorInputSerializer(editorInput: IEditorInput): IEditorInputSerializer | undefined;\n\tgetEditorInputSerializer(editorInputTypeId: string): IEditorInputSerializer | undefined;\n\n\t/**\n\t * Starts the registry by providing the required services.\n\t */\n\tstart(accessor: ServicesAccessor): void;\n}\n\nexport interface IEditorInputSerializer {\n\n\t/**\n\t * Determines whether the given editor input can be serialized by the serializer.\n\t */\n\tcanSerialize(editorInput: IEditorInput): boolean;\n\n\t/**\n\t * Returns a string representation of the provided editor input that contains enough information\n\t * to deserialize back to the original editor input from the deserialize() method.\n\t */\n\tserialize(editorInput: IEditorInput): string | undefined;\n\n\t/**\n\t * Returns an editor input from the provided serialized form of the editor input. This form matches\n\t * the value returned from the serialize() method.\n\t */\n\tdeserialize(instantiationService: IInstantiationService, serializedEditorInput: string): EditorInput | undefined;\n}\n\nexport interface IUntitledTextResourceEditorInput extends IBaseResourceEditorInput {\n\n\t/**\n\t * Optional resource. If the resource is not provided a new untitled file is created (e.g. Untitled-1).\n\t * If the used scheme for the resource is not `untitled://`, `forceUntitled: true` must be configured to\n\t * force use the provided resource as associated path. As such, the resource will be used when saving\n\t * the untitled editor.\n\t */\n\treadonly resource?: URI;\n\n\t/**\n\t * Optional language of the untitled resource.\n\t */\n\treadonly mode?: string;\n\n\t/**\n\t * Optional contents of the untitled resource.\n\t */\n\treadonly contents?: string;\n\n\t/**\n\t * Optional encoding of the untitled resource.\n\t */\n\treadonly encoding?: string;\n}\n\nexport interface IResourceDiffEditorInput extends IBaseResourceEditorInput {\n\n\t/**\n\t * The left hand side URI to open inside a diff editor.\n\t */\n\treadonly leftResource: URI;\n\n\t/**\n\t * The right hand side URI to open inside a diff editor.\n\t */\n\treadonly rightResource: URI;\n}\n\nexport const enum Verbosity {\n\tSHORT,\n\tMEDIUM,\n\tLONG\n}\n\nexport const enum SaveReason {\n\n\t/**\n\t * Explicit user gesture.\n\t */\n\tEXPLICIT = 1,\n\n\t/**\n\t * Auto save after a timeout.\n\t */\n\tAUTO = 2,\n\n\t/**\n\t * Auto save after editor focus change.\n\t */\n\tFOCUS_CHANGE = 3,\n\n\t/**\n\t * Auto save after window change.\n\t */\n\tWINDOW_CHANGE = 4\n}\n\nexport interface ISaveOptions {\n\n\t/**\n\t * An indicator how the save operation was triggered.\n\t */\n\treason?: SaveReason;\n\n\t/**\n\t * Forces to save the contents of the working copy\n\t * again even if the working copy is not dirty.\n\t */\n\treadonly force?: boolean;\n\n\t/**\n\t * Instructs the save operation to skip any save participants.\n\t */\n\treadonly skipSaveParticipants?: boolean;\n\n\t/**\n\t * A hint as to which file systems should be available for saving.\n\t */\n\treadonly availableFileSystems?: string[];\n}\n\nexport interface IRevertOptions {\n\n\t/**\n\t * Forces to load the contents of the working copy\n\t * again even if the working copy is not dirty.\n\t */\n\treadonly force?: boolean;\n\n\t/**\n\t * A soft revert will clear dirty state of a working copy\n\t * but will not attempt to load it from its persisted state.\n\t *\n\t * This option may be used in scenarios where an editor is\n\t * closed and where we do not require to load the contents.\n\t */\n\treadonly soft?: boolean;\n}\n\nexport interface IMoveResult {\n\teditor: EditorInput | IResourceEditorInputType;\n\toptions?: IEditorOptions;\n}\n\nexport interface IEditorInput extends IDisposable {\n\n\t/**\n\t * Triggered when this input is about to be disposed.\n\t */\n\treadonly onWillDispose: Event<void>;\n\n\t/**\n\t * Triggered when this input changes its dirty state.\n\t */\n\treadonly onDidChangeDirty: Event<void>;\n\n\t/**\n\t * Triggered when this input changes its label\n\t */\n\treadonly onDidChangeLabel: Event<void>;\n\n\t/**\n\t * Unique type identifier for this inpput. Every editor input of the\n\t * same class should share the same type identifier. The type identifier\n\t * is used for example for serialising/deserialising editor inputs\n\t * via the serialisers of the `IEditorInputFactoryRegistry`.\n\t */\n\treadonly typeId: string;\n\n\t/**\n\t * Returns the optional associated resource of this input.\n\t *\n\t * This resource should be unique for all editors of the same\n\t * kind and input and is often used to identify the editor input among\n\t * others.\n\t *\n\t * **Note:** DO NOT use this property for anything but identity\n\t * checks. DO NOT use this property to present as label to the user.\n\t * Please refer to `EditorResourceAccessor` documentation in that case.\n\t */\n\treadonly resource: URI | undefined;\n\n\t/**\n\t * Returns the display name of this input.\n\t */\n\tgetName(): string;\n\n\t/**\n\t * Returns the display description of this input.\n\t */\n\tgetDescription(verbosity?: Verbosity): string | undefined;\n\n\t/**\n\t * Returns the display title of this input.\n\t */\n\tgetTitle(verbosity?: Verbosity): string | undefined;\n\n\t/**\n\t * Returns the aria label to be read out by a screen reader.\n\t */\n\tgetAriaLabel(): string;\n\n\t/**\n\t * Returns a type of `IEditorModel` that represents the resolved input.\n\t * Subclasses should override to provide a meaningful model or return\n\t * `null` if the editor does not require a model.\n\t */\n\tresolve(): Promise<IEditorModel | null>;\n\n\t/**\n\t * Returns if this input is readonly or not.\n\t */\n\tisReadonly(): boolean;\n\n\t/**\n\t * Returns if the input is an untitled editor or not.\n\t */\n\tisUntitled(): boolean;\n\n\t/**\n\t * Returns if this input is dirty or not.\n\t */\n\tisDirty(): boolean;\n\n\t/**\n\t * Returns if this input is currently being saved or soon to be\n\t * saved. Based on this assumption the editor may for example\n\t * decide to not signal the dirty state to the user assuming that\n\t * the save is scheduled to happen anyway.\n\t */\n\tisSaving(): boolean;\n\n\t/**\n\t * Saves the editor. The provided groupId helps implementors\n\t * to e.g. preserve view state of the editor and re-open it\n\t * in the correct group after saving.\n\t *\n\t * @returns the resulting editor input (typically the same) of\n\t * this operation or `undefined` to indicate that the operation\n\t * failed or was canceled.\n\t */\n\tsave(group: GroupIdentifier, options?: ISaveOptions): Promise<IEditorInput | undefined>;\n\n\t/**\n\t * Saves the editor to a different location. The provided `group`\n\t * helps implementors to e.g. preserve view state of the editor\n\t * and re-open it in the correct group after saving.\n\t *\n\t * @returns the resulting editor input (typically a different one)\n\t * of this operation or `undefined` to indicate that the operation\n\t * failed or was canceled.\n\t */\n\tsaveAs(group: GroupIdentifier, options?: ISaveOptions): Promise<IEditorInput | undefined>;\n\n\t/**\n\t * Reverts this input from the provided group.\n\t */\n\trevert(group: GroupIdentifier, options?: IRevertOptions): Promise<void>;\n\n\t/**\n\t * Called to determine how to handle a resource that is renamed that matches\n\t * the editors resource (or is a child of).\n\t *\n\t * Implementors are free to not implement this method to signal no intent\n\t * to participate. If an editor is returned though, it will replace the\n\t * current one with that editor and optional options.\n\t */\n\trename(group: GroupIdentifier, target: URI): IMoveResult | undefined;\n\n\t/**\n\t * Subclasses can set this to false if it does not make sense to split the editor input.\n\t */\n\tcanSplit(): boolean;\n\n\t/**\n\t * Returns if the other object matches this input.\n\t */\n\tmatches(other: unknown): boolean;\n\n\t/**\n\t * Returns if this editor is disposed.\n\t */\n\tisDisposed(): boolean;\n\n\t/**\n\t * Returns a copy of the current editor input. Used when we can't just reuse the input\n\t */\n\tcopy(): IEditorInput;\n}\n\n/**\n * Editor inputs are lightweight objects that can be passed to the workbench API to open inside the editor part.\n * Each editor input is mapped to an editor that is capable of opening it through the Platform facade.\n */\nexport abstract class EditorInput extends Disposable implements IEditorInput {\n\n\tprotected readonly _onDidChangeDirty = this._register(new Emitter<void>());\n\treadonly onDidChangeDirty = this._onDidChangeDirty.event;\n\n\tprotected readonly _onDidChangeLabel = this._register(new Emitter<void>());\n\treadonly onDidChangeLabel = this._onDidChangeLabel.event;\n\n\tprivate readonly _onWillDispose = this._register(new Emitter<void>());\n\treadonly onWillDispose = this._onWillDispose.event;\n\n\tprivate disposed: boolean = false;\n\n\tabstract get typeId(): string;\n\n\tabstract get resource(): URI | undefined;\n\n\tgetName(): string {\n\t\treturn `Editor ${this.typeId}`;\n\t}\n\n\tgetDescription(verbosity?: Verbosity): string | undefined {\n\t\treturn undefined;\n\t}\n\n\tgetTitle(verbosity?: Verbosity): string {\n\t\treturn this.getName();\n\t}\n\n\tgetAriaLabel(): string {\n\t\treturn this.getTitle(Verbosity.SHORT);\n\t}\n\n\t/**\n\t * Returns the preferred editor for this input. A list of candidate editors is passed in that whee registered\n\t * for the input. This allows subclasses to decide late which editor to use for the input on a case by case basis.\n\t */\n\tgetPreferredEditorId(candidates: string[]): string | undefined {\n\t\treturn firstOrDefault(candidates);\n\t}\n\n\t/**\n\t* Returns a descriptor suitable for telemetry events.\n\t*\n\t* Subclasses should extend if they can contribute.\n\t*/\n\tgetTelemetryDescriptor(): { [key: string]: unknown } {\n\t\t/* __GDPR__FRAGMENT__\n\t\t\t\"EditorTelemetryDescriptor\" : {\n\t\t\t\t\"typeId\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\t\t\t}\n\t\t*/\n\t\treturn { typeId: this.typeId };\n\t}\n\n\tisReadonly(): boolean {\n\t\treturn true;\n\t}\n\n\tisUntitled(): boolean {\n\t\treturn false;\n\t}\n\n\tisDirty(): boolean {\n\t\treturn false;\n\t}\n\n\tisSaving(): boolean {\n\t\treturn false;\n\t}\n\n\tasync resolve(): Promise<IEditorModel | null> {\n\t\treturn null;\n\t}\n\n\tasync save(group: GroupIdentifier, options?: ISaveOptions): Promise<IEditorInput | undefined> {\n\t\treturn this;\n\t}\n\n\tasync saveAs(group: GroupIdentifier, options?: ISaveOptions): Promise<IEditorInput | undefined> {\n\t\treturn this;\n\t}\n\n\tasync revert(group: GroupIdentifier, options?: IRevertOptions): Promise<void> { }\n\n\trename(group: GroupIdentifier, target: URI): IMoveResult | undefined {\n\t\treturn undefined;\n\t}\n\n\tcanSplit(): boolean {\n\t\treturn true;\n\t}\n\n\tmatches(otherInput: unknown): boolean {\n\t\treturn this === otherInput;\n\t}\n\n\tcopy(): IEditorInput {\n\t\treturn this;\n\t}\n\n\tisDisposed(): boolean {\n\t\treturn this.disposed;\n\t}\n\n\toverride dispose(): void {\n\t\tif (!this.disposed) {\n\t\t\tthis.disposed = true;\n\t\t\tthis._onWillDispose.fire();\n\t\t}\n\n\t\tsuper.dispose();\n\t}\n}\n\nexport interface IEditorInputWithPreferredResource {\n\n\t/**\n\t * An editor may provide an additional preferred resource alongside\n\t * the `resource` property. While the `resource` property serves as\n\t * unique identifier of the editor that should be used whenever we\n\t * compare to other editors, the `preferredResource` should be used\n\t * in places where e.g. the resource is shown to the user.\n\t *\n\t * For example: on Windows and macOS, the same URI with different\n\t * casing may point to the same file. The editor may chose to\n\t * \"normalize\" the URIs so that only one editor opens for different\n\t * URIs. But when displaying the editor label to the user, the\n\t * preferred URI should be used.\n\t *\n\t * Not all editors have a `preferredResouce`. The `EditorResourceAccessor`\n\t * utility can be used to always get the right resource without having\n\t * to do instanceof checks.\n\t */\n\treadonly preferredResource: URI;\n}\n\nexport function isEditorInputWithPreferredResource(obj: unknown): obj is IEditorInputWithPreferredResource {\n\tconst editorInputWithPreferredResource = obj as IEditorInputWithPreferredResource;\n\n\treturn editorInputWithPreferredResource && !!editorInputWithPreferredResource.preferredResource;\n}\n\n/**\n * This is a tagging interface to declare an editor input being capable of dealing with files. It is only used in the editor registry\n * to register this kind of input to the platform.\n */\nexport interface IFileEditorInput extends IEditorInput, IEncodingSupport, IModeSupport, IEditorInputWithPreferredResource {\n\n\t/**\n\t * Gets the resource this file input is about. This will always be the\n\t * canonical form of the resource, so it may differ from the original\n\t * resource that was provided to create the input. Use `preferredResource`\n\t * for the form as it was created.\n\t */\n\treadonly resource: URI;\n\n\t/**\n\t * Sets the preferred resource to use for this file input.\n\t */\n\tsetPreferredResource(preferredResource: URI): void;\n\n\t/**\n\t * Sets the preferred name to use for this file input.\n\t *\n\t * Note: for certain file schemes the input may decide to ignore this\n\t * name and use our standard naming. Specifically for schemes we own,\n\t * we do not let others override the name.\n\t */\n\tsetPreferredName(name: string): void;\n\n\t/**\n\t * Sets the preferred description to use for this file input.\n\t *\n\t * Note: for certain file schemes the input may decide to ignore this\n\t * description and use our standard naming. Specifically for schemes we own,\n\t * we do not let others override the description.\n\t */\n\tsetPreferredDescription(description: string): void;\n\n\t/**\n\t * Sets the preferred encoding to use for this file input.\n\t */\n\tsetPreferredEncoding(encoding: string): void;\n\n\t/**\n\t * Sets the preferred language mode to use for this file input.\n\t */\n\tsetPreferredMode(mode: string): void;\n\n\t/**\n\t * Forces this file input to open as binary instead of text.\n\t */\n\tsetForceOpenAsBinary(): void;\n\n\t/**\n\t * Figure out if the file input has been resolved or not.\n\t */\n\tisResolved(): boolean;\n}\n\n/**\n * Side by side editor inputs that have a primary and secondary side.\n */\nexport class SideBySideEditorInput extends EditorInput {\n\n\tstatic readonly ID: string = 'workbench.editorinputs.sidebysideEditorInput';\n\n\toverride get typeId(): string {\n\t\treturn SideBySideEditorInput.ID;\n\t}\n\n\tconstructor(\n\t\tprotected readonly name: string | undefined,\n\t\tprotected readonly description: string | undefined,\n\t\tprivate readonly _secondary: EditorInput,\n\t\tprivate readonly _primary: EditorInput\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// When the primary or secondary input gets disposed, dispose this diff editor input\n\t\tconst onceSecondaryDisposed = Event.once(this.secondary.onWillDispose);\n\t\tthis._register(onceSecondaryDisposed(() => {\n\t\t\tif (!this.isDisposed()) {\n\t\t\t\tthis.dispose();\n\t\t\t}\n\t\t}));\n\n\t\tconst oncePrimaryDisposed = Event.once(this.primary.onWillDispose);\n\t\tthis._register(oncePrimaryDisposed(() => {\n\t\t\tif (!this.isDisposed()) {\n\t\t\t\tthis.dispose();\n\t\t\t}\n\t\t}));\n\n\t\t// Reemit some events from the primary side to the outside\n\t\tthis._register(this.primary.onDidChangeDirty(() => this._onDidChangeDirty.fire()));\n\t\tthis._register(this.primary.onDidChangeLabel(() => this._onDidChangeLabel.fire()));\n\t}\n\n\t/**\n\t * Use `EditorResourceAccessor` utility method to access the resources\n\t * of both sides of the diff editor.\n\t */\n\tget resource(): URI | undefined {\n\t\treturn undefined;\n\t}\n\n\tget primary(): EditorInput {\n\t\treturn this._primary;\n\t}\n\n\tget secondary(): EditorInput {\n\t\treturn this._secondary;\n\t}\n\n\toverride getName(): string {\n\t\tif (!this.name) {\n\t\t\treturn localize('sideBySideLabels', \"{0} - {1}\", this._secondary.getName(), this._primary.getName());\n\t\t}\n\n\t\treturn this.name;\n\t}\n\n\toverride getDescription(): string | undefined {\n\t\treturn this.description;\n\t}\n\n\toverride isReadonly(): boolean {\n\t\treturn this.primary.isReadonly();\n\t}\n\n\toverride isUntitled(): boolean {\n\t\treturn this.primary.isUntitled();\n\t}\n\n\toverride isDirty(): boolean {\n\t\treturn this.primary.isDirty();\n\t}\n\n\toverride isSaving(): boolean {\n\t\treturn this.primary.isSaving();\n\t}\n\n\toverride save(group: GroupIdentifier, options?: ISaveOptions): Promise<IEditorInput | undefined> {\n\t\treturn this.primary.save(group, options);\n\t}\n\n\toverride saveAs(group: GroupIdentifier, options?: ISaveOptions): Promise<IEditorInput | undefined> {\n\t\treturn this.primary.saveAs(group, options);\n\t}\n\n\toverride revert(group: GroupIdentifier, options?: IRevertOptions): Promise<void> {\n\t\treturn this.primary.revert(group, options);\n\t}\n\n\toverride getTelemetryDescriptor(): { [key: string]: unknown } {\n\t\tconst descriptor = this.primary.getTelemetryDescriptor();\n\n\t\treturn Object.assign(descriptor, super.getTelemetryDescriptor());\n\t}\n\n\toverride matches(otherInput: unknown): boolean {\n\t\tif (otherInput === this) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (otherInput instanceof SideBySideEditorInput) {\n\t\t\treturn this.primary.matches(otherInput.primary) && this.secondary.matches(otherInput.secondary);\n\t\t}\n\n\t\treturn false;\n\t}\n}\n\n/**\n * The editor model is the heavyweight counterpart of editor input. Depending on the editor input, it\n * resolves from a file system retrieve content and may allow for saving it back or reverting it.\n * Editor models are typically cached for some while because they are expensive to construct.\n */\nexport class EditorModel extends Disposable implements IEditorModel {\n\n\tprivate readonly _onWillDispose = this._register(new Emitter<void>());\n\treadonly onWillDispose = this._onWillDispose.event;\n\n\tprivate disposed = false;\n\tprivate resolved = false;\n\n\t/**\n\t * Causes this model to resolve returning a promise when loading is completed.\n\t */\n\tasync resolve(): Promise<void> {\n\t\tthis.resolved = true;\n\t}\n\n\t/**\n\t * Returns whether this model was loaded or not.\n\t */\n\tisResolved(): boolean {\n\t\treturn this.resolved;\n\t}\n\n\t/**\n\t * Find out if this model has been disposed.\n\t */\n\tisDisposed(): boolean {\n\t\treturn this.disposed;\n\t}\n\n\t/**\n\t * Subclasses should implement to free resources that have been claimed through loading.\n\t */\n\toverride dispose(): void {\n\t\tthis.disposed = true;\n\t\tthis._onWillDispose.fire();\n\n\t\tsuper.dispose();\n\t}\n}\n\nexport interface IEditorInputWithOptions {\n\teditor: IEditorInput;\n\toptions?: IEditorOptions | ITextEditorOptions;\n}\n\nexport interface IEditorInputWithOptionsAndGroup extends IEditorInputWithOptions {\n\tgroup?: IEditorGroup;\n}\n\nexport function isEditorInputWithOptions(obj: unknown): obj is IEditorInputWithOptions {\n\tconst editorInputWithOptions = obj as IEditorInputWithOptions;\n\n\treturn !!editorInputWithOptions && !!editorInputWithOptions.editor;\n}\n\n/**\n * The editor options is the base class of options that can be passed in when opening an editor.\n */\nexport class EditorOptions implements IEditorOptions {\n\n\t/**\n\t * Helper to create EditorOptions inline.\n\t */\n\tstatic create(settings: IEditorOptions): EditorOptions {\n\t\tconst options = new EditorOptions();\n\t\toptions.overwrite(settings);\n\n\t\treturn options;\n\t}\n\n\t/**\n\t * Tells the editor to not receive keyboard focus when the editor is being opened.\n\t *\n\t * Will also not activate the group the editor opens in unless the group is already\n\t * the active one. This behaviour can be overridden via the `activation` option.\n\t */\n\tpreserveFocus: boolean | undefined;\n\n\t/**\n\t * This option is only relevant if an editor is opened into a group that is not active\n\t * already and allows to control if the inactive group should become active, restored\n\t * or preserved.\n\t *\n\t * By default, the editor group will become active unless `preserveFocus` or `inactive`\n\t * is specified.\n\t */\n\tactivation: EditorActivation | undefined;\n\n\t/**\n\t * Tells the editor to reload the editor input in the editor even if it is identical to the one\n\t * already showing. By default, the editor will not reload the input if it is identical to the\n\t * one showing.\n\t */\n\tforceReload: boolean | undefined;\n\n\t/**\n\t * Will reveal the editor if it is already opened and visible in any of the opened editor groups.\n\t */\n\trevealIfVisible: boolean | undefined;\n\n\t/**\n\t * Will reveal the editor if it is already opened (even when not visible) in any of the opened editor groups.\n\t */\n\trevealIfOpened: boolean | undefined;\n\n\t/**\n\t * An editor that is pinned remains in the editor stack even when another editor is being opened.\n\t * An editor that is not pinned will always get replaced by another editor that is not pinned.\n\t */\n\tpinned: boolean | undefined;\n\n\t/**\n\t * An editor that is sticky moves to the beginning of the editors list within the group and will remain\n\t * there unless explicitly closed. Operations such as \"Close All\" will not close sticky editors.\n\t */\n\tsticky: boolean | undefined;\n\n\t/**\n\t * The index in the document stack where to insert the editor into when opening.\n\t */\n\tindex: number | undefined;\n\n\t/**\n\t * An active editor that is opened will show its contents directly. Set to true to open an editor\n\t * in the background without loading its contents.\n\t *\n\t * Will also not activate the group the editor opens in unless the group is already\n\t * the active one. This behaviour can be overridden via the `activation` option.\n\t */\n\tinactive: boolean | undefined;\n\n\t/**\n\t * Will not show an error in case opening the editor fails and thus allows to show a custom error\n\t * message as needed. By default, an error will be presented as notification if opening was not possible.\n\t */\n\tignoreError: boolean | undefined;\n\n\t/**\n\t * Allows to override the editor that should be used to display the input:\n\t * - `undefined`: let the editor decide for itself\n\t * - `string`: specific override by id\n\t * - `EditorOverride`: specific override handling\n\t */\n\toverride: string | EditorOverride | undefined;\n\n\t/**\n\t * A optional hint to signal in which context the editor opens.\n\t *\n\t * If configured to be `EditorOpenContext.USER`, this hint can be\n\t * used in various places to control the experience. For example,\n\t * if the editor to open fails with an error, a notification could\n\t * inform about this in a modal dialog. If the editor opened through\n\t * some background task, the notification would show in the background,\n\t * not as a modal dialog.\n\t */\n\tcontext: EditorOpenContext | undefined;\n\n\t/**\n\t * Overwrites option values from the provided bag.\n\t */\n\toverwrite(options: IEditorOptions): EditorOptions {\n\t\tif (typeof options.forceReload === 'boolean') {\n\t\t\tthis.forceReload = options.forceReload;\n\t\t}\n\n\t\tif (typeof options.revealIfVisible === 'boolean') {\n\t\t\tthis.revealIfVisible = options.revealIfVisible;\n\t\t}\n\n\t\tif (typeof options.revealIfOpened === 'boolean') {\n\t\t\tthis.revealIfOpened = options.revealIfOpened;\n\t\t}\n\n\t\tif (typeof options.preserveFocus === 'boolean') {\n\t\t\tthis.preserveFocus = options.preserveFocus;\n\t\t}\n\n\t\tif (typeof options.activation === 'number') {\n\t\t\tthis.activation = options.activation;\n\t\t}\n\n\t\tif (typeof options.pinned === 'boolean') {\n\t\t\tthis.pinned = options.pinned;\n\t\t}\n\n\t\tif (typeof options.sticky === 'boolean') {\n\t\t\tthis.sticky = options.sticky;\n\t\t}\n\n\t\tif (typeof options.inactive === 'boolean') {\n\t\t\tthis.inactive = options.inactive;\n\t\t}\n\n\t\tif (typeof options.ignoreError === 'boolean') {\n\t\t\tthis.ignoreError = options.ignoreError;\n\t\t}\n\n\t\tif (typeof options.index === 'number') {\n\t\t\tthis.index = options.index;\n\t\t}\n\n\t\tif (options.override !== undefined) {\n\t\t\tthis.override = options.override;\n\t\t}\n\n\t\tif (typeof options.context === 'number') {\n\t\t\tthis.context = options.context;\n\t\t}\n\n\t\treturn this;\n\t}\n}\n\n/**\n * Base Text Editor Options.\n */\nexport class TextEditorOptions extends EditorOptions implements ITextEditorOptions {\n\n\t/**\n\t * Text editor selection.\n\t */\n\tselection: ITextEditorSelection | undefined;\n\n\t/**\n\t * Text editor view state.\n\t */\n\teditorViewState: IEditorViewState | undefined;\n\n\t/**\n\t * Option to control the text editor selection reveal type.\n\t */\n\tselectionRevealType: TextEditorSelectionRevealType | undefined;\n\n\tstatic from(input?: IBaseResourceEditorInput): TextEditorOptions | undefined {\n\t\tif (!input?.options) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn TextEditorOptions.create(input.options);\n\t}\n\n\t/**\n\t * Helper to convert options bag to real class\n\t */\n\tstatic override create(options: ITextEditorOptions = Object.create(null)): TextEditorOptions {\n\t\tconst textEditorOptions = new TextEditorOptions();\n\t\ttextEditorOptions.overwrite(options);\n\n\t\treturn textEditorOptions;\n\t}\n\n\t/**\n\t * Overwrites option values from the provided bag.\n\t */\n\toverride overwrite(options: ITextEditorOptions): TextEditorOptions {\n\t\tsuper.overwrite(options);\n\n\t\tif (options.selection) {\n\t\t\tthis.selection = {\n\t\t\t\tstartLineNumber: options.selection.startLineNumber,\n\t\t\t\tstartColumn: options.selection.startColumn,\n\t\t\t\tendLineNumber: options.selection.endLineNumber ?? options.selection.startLineNumber,\n\t\t\t\tendColumn: options.selection.endColumn ?? options.selection.startColumn\n\t\t\t};\n\t\t}\n\n\t\tif (options.viewState) {\n\t\t\tthis.editorViewState = options.viewState as IEditorViewState;\n\t\t}\n\n\t\tif (typeof options.selectionRevealType !== 'undefined') {\n\t\t\tthis.selectionRevealType = options.selectionRevealType;\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns if this options object has objects defined for the editor.\n\t */\n\thasOptionsDefined(): boolean {\n\t\treturn !!this.editorViewState || !!this.selectionRevealType || !!this.selection;\n\t}\n\n\t/**\n\t * Create a TextEditorOptions inline to be used when the editor is opening.\n\t */\n\tstatic fromEditor(editor: IEditor, settings?: IEditorOptions): TextEditorOptions {\n\t\tconst options = TextEditorOptions.create(settings);\n\n\t\t// View state\n\t\toptions.editorViewState = withNullAsUndefined(editor.saveViewState());\n\n\t\treturn options;\n\t}\n\n\t/**\n\t * Apply the view state or selection to the given editor.\n\t *\n\t * @return if something was applied\n\t */\n\tapply(editor: IEditor, scrollType: ScrollType): boolean {\n\t\tlet gotApplied = false;\n\n\t\t// First try viewstate\n\t\tif (this.editorViewState) {\n\t\t\teditor.restoreViewState(this.editorViewState);\n\t\t\tgotApplied = true;\n\t\t}\n\n\t\t// Otherwise check for selection\n\t\telse if (this.selection) {\n\t\t\tconst range: IRange = {\n\t\t\t\tstartLineNumber: this.selection.startLineNumber,\n\t\t\t\tstartColumn: this.selection.startColumn,\n\t\t\t\tendLineNumber: this.selection.endLineNumber ?? this.selection.startLineNumber,\n\t\t\t\tendColumn: this.selection.endColumn ?? this.selection.startColumn\n\t\t\t};\n\n\t\t\teditor.setSelection(range);\n\n\t\t\tif (this.selectionRevealType === TextEditorSelectionRevealType.NearTop) {\n\t\t\t\teditor.revealRangeNearTop(range, scrollType);\n\t\t\t} else if (this.selectionRevealType === TextEditorSelectionRevealType.NearTopIfOutsideViewport) {\n\t\t\t\teditor.revealRangeNearTopIfOutsideViewport(range, scrollType);\n\t\t\t} else if (this.selectionRevealType === TextEditorSelectionRevealType.CenterIfOutsideViewport) {\n\t\t\t\teditor.revealRangeInCenterIfOutsideViewport(range, scrollType);\n\t\t\t} else {\n\t\t\t\teditor.revealRangeInCenter(range, scrollType);\n\t\t\t}\n\n\t\t\tgotApplied = true;\n\t\t}\n\n\t\treturn gotApplied;\n\t}\n}\n\n/**\n * Context passed into `EditorPane#setInput` to give additional\n * context information around why the editor was opened.\n */\nexport interface IEditorOpenContext {\n\n\t/**\n\t * An indicator if the editor input is new for the group the editor is in.\n\t * An editor is new for a group if it was not part of the group before and\n\t * otherwise was already opened in the group and just became the active editor.\n\t *\n\t * This hint can e.g. be used to decide whether to restore view state or not.\n\t */\n\tnewInGroup?: boolean;\n}\n\nexport interface IEditorIdentifier {\n\tgroupId: GroupIdentifier;\n\teditor: IEditorInput;\n}\n\n/**\n * The editor commands context is used for editor commands (e.g. in the editor title)\n * and we must ensure that the context is serializable because it potentially travels\n * to the extension host!\n */\nexport interface IEditorCommandsContext {\n\tgroupId: GroupIdentifier;\n\teditorIndex?: number;\n}\n\nexport class EditorCommandsContextActionRunner extends ActionRunner {\n\n\tconstructor(\n\t\tprivate context: IEditorCommandsContext\n\t) {\n\t\tsuper();\n\t}\n\n\toverride run(action: IAction): Promise<void> {\n\t\treturn super.run(action, this.context);\n\t}\n}\n\nexport interface IEditorCloseEvent extends IEditorIdentifier {\n\treplaced: boolean;\n\tindex: number;\n\tsticky: boolean;\n}\n\nexport interface IEditorMoveEvent extends IEditorIdentifier {\n\ttarget: GroupIdentifier;\n}\n\nexport type GroupIdentifier = number;\n\nexport interface IWorkbenchEditorConfiguration {\n\tworkbench?: {\n\t\teditor?: IEditorPartConfiguration,\n\t\ticonTheme?: string;\n\t};\n}\n\ninterface IEditorPartConfiguration {\n\tshowTabs?: boolean;\n\twrapTabs?: boolean;\n\tscrollToSwitchTabs?: boolean;\n\thighlightModifiedTabs?: boolean;\n\ttabCloseButton?: 'left' | 'right' | 'off';\n\ttabSizing?: 'fit' | 'shrink';\n\tpinnedTabSizing?: 'normal' | 'compact' | 'shrink';\n\ttitleScrollbarSizing?: 'default' | 'large';\n\tfocusRecentEditorAfterClose?: boolean;\n\tshowIcons?: boolean;\n\tenablePreview?: boolean;\n\tenablePreviewFromQuickOpen?: boolean;\n\tenablePreviewFromCodeNavigation?: boolean;\n\tcloseOnFileDelete?: boolean;\n\topenPositioning?: 'left' | 'right' | 'first' | 'last';\n\topenSideBySideDirection?: 'right' | 'down';\n\tcloseEmptyGroups?: boolean;\n\trevealIfOpen?: boolean;\n\tmouseBackForwardToNavigate?: boolean;\n\tlabelFormat?: 'default' | 'short' | 'medium' | 'long';\n\trestoreViewState?: boolean;\n\tsplitSizing?: 'split' | 'distribute';\n\tsplitOnDragAndDrop?: boolean;\n\tlimit?: {\n\t\tenabled?: boolean;\n\t\tvalue?: number;\n\t\tperEditorGroup?: boolean;\n\t};\n\tdecorations?: {\n\t\tbadges?: boolean;\n\t\tcolors?: boolean;\n\t}\n}\n\nexport interface IEditorPartOptions extends IEditorPartConfiguration {\n\thasIcons?: boolean;\n}\n\nexport interface IEditorPartOptionsChangeEvent {\n\toldPartOptions: IEditorPartOptions;\n\tnewPartOptions: IEditorPartOptions;\n}\n\nexport enum SideBySideEditor {\n\tPRIMARY = 1,\n\tSECONDARY = 2,\n\tBOTH = 3\n}\n\nexport interface IEditorResourceAccessorOptions {\n\n\t/**\n\t * Allows to access the `resource(s)` of side by side editors. If not\n\t * specified, a `resource` for a side by side editor will always be\n\t * `undefined`.\n\t */\n\tsupportSideBySide?: SideBySideEditor;\n\n\t/**\n\t * Allows to filter the scheme to consider. A resource scheme that does\n\t * not match a filter will not be considered.\n\t */\n\tfilterByScheme?: string | string[];\n}\n\nclass EditorResourceAccessorImpl {\n\n\t/**\n\t * The original URI of an editor is the URI that was used originally to open\n\t * the editor and should be used whenever the URI is presented to the user,\n\t * e.g. as a label together with utility methods such as `ResourceLabel` or\n\t * `ILabelService` that can turn this original URI into the best form for\n\t * presenting.\n\t *\n\t * In contrast, the canonical URI (#getCanonicalUri) may be different and should\n\t * be used whenever the URI is used to e.g. compare with other editors or when\n\t * caching certain data based on the URI.\n\t *\n\t * For example: on Windows and macOS, the same file URI with different casing may\n\t * point to the same file. The editor may chose to \"normalize\" the URI into a canonical\n\t * form so that only one editor opens for same file URIs with different casing. As\n\t * such, the original URI and the canonical URI can be different.\n\t */\n\tgetOriginalUri(editor: IEditorInput | undefined | null): URI | undefined;\n\tgetOriginalUri(editor: IEditorInput | undefined | null, options: IEditorResourceAccessorOptions & { supportSideBySide?: SideBySideEditor.PRIMARY | SideBySideEditor.SECONDARY }): URI | undefined;\n\tgetOriginalUri(editor: IEditorInput | undefined | null, options: IEditorResourceAccessorOptions & { supportSideBySide: SideBySideEditor.BOTH }): URI | { primary?: URI, secondary?: URI } | undefined;\n\tgetOriginalUri(editor: IEditorInput | undefined | null, options?: IEditorResourceAccessorOptions): URI | { primary?: URI, secondary?: URI } | undefined {\n\t\tif (!editor) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Optionally support side-by-side editors\n\t\tif (options?.supportSideBySide && editor instanceof SideBySideEditorInput) {\n\t\t\tif (options?.supportSideBySide === SideBySideEditor.BOTH) {\n\t\t\t\treturn {\n\t\t\t\t\tprimary: this.getOriginalUri(editor.primary, { filterByScheme: options.filterByScheme }),\n\t\t\t\t\tsecondary: this.getOriginalUri(editor.secondary, { filterByScheme: options.filterByScheme })\n\t\t\t\t};\n\t\t\t}\n\n\t\t\teditor = options.supportSideBySide === SideBySideEditor.PRIMARY ? editor.primary : editor.secondary;\n\t\t}\n\n\t\t// Original URI is the `preferredResource` of an editor if any\n\t\tconst originalResource = isEditorInputWithPreferredResource(editor) ? editor.preferredResource : editor.resource;\n\t\tif (!originalResource || !options || !options.filterByScheme) {\n\t\t\treturn originalResource;\n\t\t}\n\n\t\treturn this.filterUri(originalResource, options.filterByScheme);\n\t}\n\n\t/**\n\t * The canonical URI of an editor is the true unique identifier of the editor\n\t * and should be used whenever the URI is used e.g. to compare with other\n\t * editors or when caching certain data based on the URI.\n\t *\n\t * In contrast, the original URI (#getOriginalUri) may be different and should\n\t * be used whenever the URI is presented to the user, e.g. as a label.\n\t *\n\t * For example: on Windows and macOS, the same file URI with different casing may\n\t * point to the same file. The editor may chose to \"normalize\" the URI into a canonical\n\t * form so that only one editor opens for same file URIs with different casing. As\n\t * such, the original URI and the canonical URI can be different.\n\t */\n\tgetCanonicalUri(editor: IEditorInput | undefined | null): URI | undefined;\n\tgetCanonicalUri(editor: IEditorInput | undefined | null, options: IEditorResourceAccessorOptions & { supportSideBySide?: SideBySideEditor.PRIMARY | SideBySideEditor.SECONDARY }): URI | undefined;\n\tgetCanonicalUri(editor: IEditorInput | undefined | null, options: IEditorResourceAccessorOptions & { supportSideBySide: SideBySideEditor.BOTH }): URI | { primary?: URI, secondary?: URI } | undefined;\n\tgetCanonicalUri(editor: IEditorInput | undefined | null, options?: IEditorResourceAccessorOptions): URI | { primary?: URI, secondary?: URI } | undefined {\n\t\tif (!editor) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Optionally support side-by-side editors\n\t\tif (options?.supportSideBySide && editor instanceof SideBySideEditorInput) {\n\t\t\tif (options?.supportSideBySide === SideBySideEditor.BOTH) {\n\t\t\t\treturn {\n\t\t\t\t\tprimary: this.getCanonicalUri(editor.primary, { filterByScheme: options.filterByScheme }),\n\t\t\t\t\tsecondary: this.getCanonicalUri(editor.secondary, { filterByScheme: options.filterByScheme })\n\t\t\t\t};\n\t\t\t}\n\n\t\t\teditor = options.supportSideBySide === SideBySideEditor.PRIMARY ? editor.primary : editor.secondary;\n\t\t}\n\n\t\t// Canonical URI is the `resource` of an editor\n\t\tconst canonicalResource = editor.resource;\n\t\tif (!canonicalResource || !options || !options.filterByScheme) {\n\t\t\treturn canonicalResource;\n\t\t}\n\n\t\treturn this.filterUri(canonicalResource, options.filterByScheme);\n\t}\n\n\tprivate filterUri(resource: URI, filter: string | string[]): URI | undefined {\n\n\t\t// Multiple scheme filter\n\t\tif (Array.isArray(filter)) {\n\t\t\tif (filter.some(scheme => resource.scheme === scheme)) {\n\t\t\t\treturn resource;\n\t\t\t}\n\t\t}\n\n\t\t// Single scheme filter\n\t\telse {\n\t\t\tif (filter === resource.scheme) {\n\t\t\t\treturn resource;\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n}\n\nexport const EditorResourceAccessor = new EditorResourceAccessorImpl();\n\nexport const enum CloseDirection {\n\tLEFT,\n\tRIGHT\n}\n\nexport interface IEditorMemento<T> {\n\n\tsaveEditorState(group: IEditorGroup, resource: URI, state: T): void;\n\tsaveEditorState(group: IEditorGroup, editor: IEditorInput, state: T): void;\n\n\tloadEditorState(group: IEditorGroup, resource: URI): T | undefined;\n\tloadEditorState(group: IEditorGroup, editor: IEditorInput): T | undefined;\n\n\tclearEditorState(resource: URI, group?: IEditorGroup): void;\n\tclearEditorState(editor: IEditorInput, group?: IEditorGroup): void;\n\n\tclearEditorStateOnDispose(resource: URI, editor: IEditorInput): void;\n\n\tmoveEditorState(source: URI, target: URI, comparer: IExtUri): void;\n}\n\nclass EditorInputFactoryRegistry implements IEditorInputFactoryRegistry {\n\tprivate instantiationService: IInstantiationService | undefined;\n\n\tprivate fileEditorInputFactory: IFileEditorInputFactory | undefined;\n\tprivate readonly customEditorInputFactoryInstances: Map<string, ICustomEditorInputFactory> = new Map();\n\n\tprivate readonly editorInputSerializerConstructors: Map<string /* Type ID */, IConstructorSignature0<IEditorInputSerializer>> = new Map();\n\tprivate readonly editorInputSerializerInstances: Map<string /* Type ID */, IEditorInputSerializer> = new Map();\n\n\tstart(accessor: ServicesAccessor): void {\n\t\tconst instantiationService = this.instantiationService = accessor.get(IInstantiationService);\n\n\t\tfor (const [key, ctor] of this.editorInputSerializerConstructors) {\n\t\t\tthis.createEditorInputSerializer(key, ctor, instantiationService);\n\t\t}\n\n\t\tthis.editorInputSerializerConstructors.clear();\n\t}\n\n\tprivate createEditorInputSerializer(editorInputTypeId: string, ctor: IConstructorSignature0<IEditorInputSerializer>, instantiationService: IInstantiationService): void {\n\t\tconst instance = instantiationService.createInstance(ctor);\n\t\tthis.editorInputSerializerInstances.set(editorInputTypeId, instance);\n\t}\n\n\tregisterFileEditorInputFactory(factory: IFileEditorInputFactory): void {\n\t\tif (this.fileEditorInputFactory) {\n\t\t\tthrow new Error('Can only register one file editor input factory.');\n\t\t}\n\n\t\tthis.fileEditorInputFactory = factory;\n\t}\n\n\tgetFileEditorInputFactory(): IFileEditorInputFactory {\n\t\treturn assertIsDefined(this.fileEditorInputFactory);\n\t}\n\n\tregisterEditorInputSerializer(editorInputTypeId: string, ctor: IConstructorSignature0<IEditorInputSerializer>): IDisposable {\n\t\tif (this.editorInputSerializerConstructors.has(editorInputTypeId) || this.editorInputSerializerInstances.has(editorInputTypeId)) {\n\t\t\tthrow new Error(`A editor input serializer with type ID '${editorInputTypeId}' was already registered.`);\n\t\t}\n\n\t\tif (!this.instantiationService) {\n\t\t\tthis.editorInputSerializerConstructors.set(editorInputTypeId, ctor);\n\t\t} else {\n\t\t\tthis.createEditorInputSerializer(editorInputTypeId, ctor, this.instantiationService);\n\t\t}\n\n\t\treturn toDisposable(() => {\n\t\t\tthis.editorInputSerializerConstructors.delete(editorInputTypeId);\n\t\t\tthis.editorInputSerializerInstances.delete(editorInputTypeId);\n\t\t});\n\t}\n\n\tgetEditorInputSerializer(editorInput: IEditorInput): IEditorInputSerializer | undefined;\n\tgetEditorInputSerializer(editorInputTypeId: string): IEditorInputSerializer | undefined;\n\tgetEditorInputSerializer(arg1: string | IEditorInput): IEditorInputSerializer | undefined {\n\t\treturn this.editorInputSerializerInstances.get(typeof arg1 === 'string' ? arg1 : arg1.typeId);\n\t}\n\n\tregisterCustomEditorInputFactory(scheme: string, factory: ICustomEditorInputFactory): void {\n\t\tthis.customEditorInputFactoryInstances.set(scheme, factory);\n\t}\n\n\tgetCustomEditorInputFactory(scheme: string): ICustomEditorInputFactory | undefined {\n\t\treturn this.customEditorInputFactoryInstances.get(scheme);\n\t}\n}\n\nRegistry.add(EditorExtensions.EditorInputFactories, new EditorInputFactoryRegistry());\n\nexport async function pathsToEditors(paths: IPathData[] | undefined, fileService: IFileService): Promise<(IResourceEditorInput | IUntitledTextResourceEditorInput)[]> {\n\tif (!paths || !paths.length) {\n\t\treturn [];\n\t}\n\n\tconst editors = await Promise.all(paths.map(async path => {\n\t\tconst resource = URI.revive(path.fileUri);\n\t\tif (!resource || !fileService.canHandleResource(resource)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst exists = (typeof path.exists === 'boolean') ? path.exists : await fileService.exists(resource);\n\t\tif (!exists && path.openOnlyIfExists) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst options: ITextEditorOptions = (exists && typeof path.lineNumber === 'number') ? {\n\t\t\tselection: {\n\t\t\t\tstartLineNumber: path.lineNumber,\n\t\t\t\tstartColumn: path.columnNumber || 1\n\t\t\t},\n\t\t\tpinned: true,\n\t\t\toverride: path.editorOverrideId\n\t\t} : {\n\t\t\tpinned: true,\n\t\t\toverride: path.editorOverrideId\n\t\t};\n\n\t\tlet input: IResourceEditorInput | IUntitledTextResourceEditorInput;\n\t\tif (!exists) {\n\t\t\tinput = { resource, options, forceUntitled: true };\n\t\t} else {\n\t\t\tinput = { resource, options, forceFile: true };\n\t\t}\n\n\t\treturn input;\n\t}));\n\n\treturn coalesce(editors);\n}\n\nexport const enum EditorsOrder {\n\n\t/**\n\t * Editors sorted by most recent activity (most recent active first)\n\t */\n\tMOST_RECENTLY_ACTIVE,\n\n\t/**\n\t * Editors sorted by sequential order\n\t */\n\tSEQUENTIAL\n}\n\n/**\n * A way to address editor groups through a column based system\n * where `0` is the first column. Will fallback to `SIDE_GROUP`\n * in case the column does not exist yet.\n */\nexport type EditorGroupColumn = number;\n\nexport function viewColumnToEditorGroup(editorGroupService: IEditorGroupsService, viewColumn?: EditorGroupColumn): GroupIdentifier {\n\tif (typeof viewColumn !== 'number' || viewColumn === ACTIVE_GROUP) {\n\t\treturn ACTIVE_GROUP; // prefer active group when position is undefined or passed in as such\n\t}\n\n\tconst groups = editorGroupService.getGroups(GroupsOrder.GRID_APPEARANCE);\n\n\tlet candidateGroup = groups[viewColumn];\n\tif (candidateGroup) {\n\t\treturn candidateGroup.id; // found direct match\n\t}\n\n\tlet firstGroup = groups[0];\n\tif (groups.length === 1 && firstGroup.count === 0) {\n\t\treturn firstGroup.id; // first editor should always open in first group independent from position provided\n\t}\n\n\treturn SIDE_GROUP; // open to the side if group not found or we are instructed to\n}\n\nexport function editorGroupToViewColumn(editorGroupService: IEditorGroupsService, editorGroup: IEditorGroup | GroupIdentifier): EditorGroupColumn {\n\tlet group = (typeof editorGroup === 'number') ? editorGroupService.getGroup(editorGroup) : editorGroup;\n\tgroup = group ?? editorGroupService.activeGroup;\n\n\treturn editorGroupService.getGroups(GroupsOrder.GRID_APPEARANCE).indexOf(group);\n}\n"]}