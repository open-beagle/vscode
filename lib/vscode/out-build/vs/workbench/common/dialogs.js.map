{"version":3,"file":"dialogs.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/common/dialogs.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAyBhG,MAAa,YAAa,SAAQ,sBAAU;QAA5C;;YAEU,YAAO,GAAsB,EAAE,CAAC;YAExB,qBAAgB,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,eAAO,EAAQ,CAAC,CAAC;YAC/D,oBAAe,GAAG,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC;QAkBxD,CAAC;QAhBA,IAAI,CAAC,MAAe;YACnB,IAAI,QAAyC,CAAC;YAE9C,MAAM,IAAI,GAAoB;gBAC7B,IAAI,EAAE,MAAM;gBACZ,KAAK,EAAE,CAAC,MAAM,EAAE,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;aACnE,CAAC;YAEF,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACxB,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC;YAE7B,OAAO;gBACN,IAAI;gBACJ,MAAM,EAAE,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,GAAG,QAAQ,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;aACvD,CAAC;QACH,CAAC;KACD;IAvBD,oCAuBC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IDialog, IDialogResult } from 'vs/platform/dialogs/common/dialogs';\n\nexport interface IDialogViewItem {\n\targs: IDialog;\n\tclose(result?: IDialogResult): void;\n}\n\nexport interface IDialogHandle {\n\titem: IDialogViewItem;\n\tresult: Promise<IDialogResult | undefined>;\n}\n\nexport interface IDialogsModel {\n\n\treadonly onDidShowDialog: Event<void>;\n\n\treadonly dialogs: IDialogViewItem[];\n\n\tshow(dialog: IDialog): IDialogHandle;\n}\n\nexport class DialogsModel extends Disposable implements IDialogsModel {\n\n\treadonly dialogs: IDialogViewItem[] = [];\n\n\tprivate readonly _onDidShowDialog = this._register(new Emitter<void>());\n\treadonly onDidShowDialog = this._onDidShowDialog.event;\n\n\tshow(dialog: IDialog): IDialogHandle {\n\t\tlet resolver: (value?: IDialogResult) => void;\n\n\t\tconst item: IDialogViewItem = {\n\t\t\targs: dialog,\n\t\t\tclose: (result) => { this.dialogs.splice(0, 1); resolver(result); }\n\t\t};\n\n\t\tthis.dialogs.push(item);\n\t\tthis._onDidShowDialog.fire();\n\n\t\treturn {\n\t\t\titem,\n\t\t\tresult: new Promise(resolve => { resolver = resolve; })\n\t\t};\n\t}\n}\n"]}