{"version":3,"sources":["vs/workbench/common/editor/diffEditorInput.ts"],"names":[],"mappings":"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","file":"diffEditorInput.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { EditorModel, EditorInput, SideBySideEditorInput, TEXT_DIFF_EDITOR_ID, BINARY_DIFF_EDITOR_ID, Verbosity } from 'vs/workbench/common/editor';\nimport { BaseTextEditorModel } from 'vs/workbench/common/editor/textEditorModel';\nimport { DiffEditorModel } from 'vs/workbench/common/editor/diffEditorModel';\nimport { TextDiffEditorModel } from 'vs/workbench/common/editor/textDiffEditorModel';\nimport { localize } from 'vs/nls';\nimport { AbstractTextResourceEditorInput } from 'vs/workbench/common/editor/textResourceEditorInput';\nimport { dirname } from 'vs/base/common/resources';\nimport { ILabelService } from 'vs/platform/label/common/label';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { URI } from 'vs/base/common/uri';\nimport { withNullAsUndefined } from 'vs/base/common/types';\n\n/**\n * The base editor input for the diff editor. It is made up of two editor inputs, the original version\n * and the modified version.\n */\nexport class DiffEditorInput extends SideBySideEditorInput {\n\n\tstatic override readonly ID = 'workbench.editors.diffEditorInput';\n\n\toverride get typeId(): string {\n\t\treturn DiffEditorInput.ID;\n\t}\n\n\tprivate cachedModel: DiffEditorModel | undefined = undefined;\n\n\tconstructor(\n\t\tname: string | undefined,\n\t\tdescription: string | undefined,\n\t\tpublic readonly originalInput: EditorInput,\n\t\tpublic readonly modifiedInput: EditorInput,\n\t\tprivate readonly forceOpenAsBinary: boolean | undefined,\n\t\t@ILabelService private readonly labelService: ILabelService,\n\t\t@IFileService private readonly fileService: IFileService\n\t) {\n\t\tsuper(name, description, originalInput, modifiedInput);\n\t}\n\n\toverride getName(): string {\n\t\tif (!this.name) {\n\n\t\t\t// Craft a name from original and modified input that includes the\n\t\t\t// relative path in case both sides have different parents and we\n\t\t\t// compare file resources.\n\t\t\tconst fileResources = this.asFileResources();\n\t\t\tif (fileResources && dirname(fileResources.original).path !== dirname(fileResources.modified).path) {\n\t\t\t\treturn `${this.labelService.getUriLabel(fileResources.original, { relative: true })} ↔ ${this.labelService.getUriLabel(fileResources.modified, { relative: true })}`;\n\t\t\t}\n\n\t\t\treturn localize('sideBySideLabels', \"{0} ↔ {1}\", this.originalInput.getName(), this.modifiedInput.getName());\n\t\t}\n\n\t\treturn this.name;\n\t}\n\n\toverride getDescription(verbosity: Verbosity = Verbosity.MEDIUM): string | undefined {\n\t\tif (typeof this.description !== 'string') {\n\n\t\t\t// Pass the description of the modified side in case both original\n\t\t\t// and modified input have the same parent and we compare file resources.\n\t\t\tconst fileResources = this.asFileResources();\n\t\t\tif (fileResources && dirname(fileResources.original).path === dirname(fileResources.modified).path) {\n\t\t\t\treturn this.modifiedInput.getDescription(verbosity);\n\t\t\t}\n\t\t}\n\n\t\treturn this.description;\n\t}\n\n\tprivate asFileResources(): { original: URI, modified: URI } | undefined {\n\t\tif (\n\t\t\tthis.originalInput instanceof AbstractTextResourceEditorInput &&\n\t\t\tthis.modifiedInput instanceof AbstractTextResourceEditorInput &&\n\t\t\tthis.fileService.canHandleResource(this.originalInput.preferredResource) &&\n\t\t\tthis.fileService.canHandleResource(this.modifiedInput.preferredResource)\n\t\t) {\n\t\t\treturn {\n\t\t\t\toriginal: this.originalInput.preferredResource,\n\t\t\t\tmodified: this.modifiedInput.preferredResource\n\t\t\t};\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\toverride async resolve(): Promise<EditorModel> {\n\n\t\t// Create Model - we never reuse our cached model if refresh is true because we cannot\n\t\t// decide for the inputs within if the cached model can be reused or not. There may be\n\t\t// inputs that need to be loaded again and thus we always recreate the model and dispose\n\t\t// the previous one - if any.\n\t\tconst resolvedModel = await this.createModel();\n\t\tif (this.cachedModel) {\n\t\t\tthis.cachedModel.dispose();\n\t\t}\n\n\t\tthis.cachedModel = resolvedModel;\n\n\t\treturn this.cachedModel;\n\t}\n\n\toverride getPreferredEditorId(candidates: string[]): string {\n\t\treturn this.forceOpenAsBinary ? BINARY_DIFF_EDITOR_ID : TEXT_DIFF_EDITOR_ID;\n\t}\n\n\tprivate async createModel(): Promise<DiffEditorModel> {\n\n\t\t// Join resolve call over two inputs and build diff editor model\n\t\tconst [originalEditorModel, modifiedEditorModel] = await Promise.all([\n\t\t\tthis.originalInput.resolve(),\n\t\t\tthis.modifiedInput.resolve()\n\t\t]);\n\n\t\t// If both are text models, return textdiffeditor model\n\t\tif (modifiedEditorModel instanceof BaseTextEditorModel && originalEditorModel instanceof BaseTextEditorModel) {\n\t\t\treturn new TextDiffEditorModel(originalEditorModel, modifiedEditorModel);\n\t\t}\n\n\t\t// Otherwise return normal diff model\n\t\treturn new DiffEditorModel(withNullAsUndefined(originalEditorModel), withNullAsUndefined(modifiedEditorModel));\n\t}\n\n\toverride matches(otherInput: unknown): boolean {\n\t\tif (!super.matches(otherInput)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn otherInput instanceof DiffEditorInput && otherInput.forceOpenAsBinary === this.forceOpenAsBinary;\n\t}\n\n\toverride dispose(): void {\n\n\t\t// Free the diff editor model but do not propagate the dispose() call to the two inputs\n\t\t// We never created the two inputs (original and modified) so we can not dispose\n\t\t// them without sideeffects.\n\t\tif (this.cachedModel) {\n\t\t\tthis.cachedModel.dispose();\n\t\t\tthis.cachedModel = undefined;\n\t\t}\n\n\t\tsuper.dispose();\n\t}\n}\n"]}