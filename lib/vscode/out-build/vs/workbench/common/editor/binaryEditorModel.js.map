{"version":3,"file":"binaryEditorModel.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/common/editor/binaryEditorModel.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAOhG;;OAEG;IACH,IAAa,iBAAiB,GAA9B,MAAa,iBAAkB,SAAQ,oBAAW;QAKjD,YACiB,QAAa,EACZ,IAAY,EACE,WAAyB;YAExD,KAAK,EAAE,CAAC;YAJQ,aAAQ,GAAR,QAAQ,CAAK;YACZ,SAAI,GAAJ,IAAI,CAAQ;YACE,gBAAW,GAAX,WAAW,CAAc;YAIxD,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;YACzB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YACjB,IAAI,CAAC,IAAI,GAAG,kBAAW,CAAC;QACzB,CAAC;QAED;;WAEG;QACH,OAAO;YACN,OAAO,IAAI,CAAC,IAAI,CAAC;QAClB,CAAC;QAED;;WAEG;QACH,OAAO;YACN,OAAO,IAAI,CAAC,IAAI,CAAC;QAClB,CAAC;QAED;;WAEG;QACH,OAAO;YACN,OAAO,IAAI,CAAC,IAAI,CAAC;QAClB,CAAC;QAED;;WAEG;QACH,OAAO;YACN,OAAO,IAAI,CAAC,IAAI,CAAC;QAClB,CAAC;QAEQ,KAAK,CAAC,OAAO;YAErB,0DAA0D;YAC1D,IAAI,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;gBACtD,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,eAAe,EAAE,IAAI,EAAE,CAAC,CAAC;gBACtF,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;gBACtB,IAAI,OAAO,IAAI,CAAC,IAAI,KAAK,QAAQ,EAAE;oBAClC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;iBACtB;aACD;QACF,CAAC;KACD,CAAA;IAxDY,iBAAiB;QAQ3B,WAAA,oBAAY,CAAA;OARF,iBAAiB,CAwD7B;IAxDY,8CAAiB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { EditorModel } from 'vs/workbench/common/editor';\nimport { URI } from 'vs/base/common/uri';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { MIME_BINARY } from 'vs/base/common/mime';\n\n/**\n * An editor model that just represents a resource that can be loaded.\n */\nexport class BinaryEditorModel extends EditorModel {\n\tprivate size: number | undefined;\n\tprivate etag: string | undefined;\n\tprivate readonly mime: string;\n\n\tconstructor(\n\t\tpublic readonly resource: URI,\n\t\tprivate readonly name: string,\n\t\t@IFileService private readonly fileService: IFileService\n\t) {\n\t\tsuper();\n\n\t\tthis.resource = resource;\n\t\tthis.name = name;\n\t\tthis.mime = MIME_BINARY;\n\t}\n\n\t/**\n\t * The name of the binary resource.\n\t */\n\tgetName(): string {\n\t\treturn this.name;\n\t}\n\n\t/**\n\t * The size of the binary resource if known.\n\t */\n\tgetSize(): number | undefined {\n\t\treturn this.size;\n\t}\n\n\t/**\n\t * The mime of the binary resource if known.\n\t */\n\tgetMime(): string {\n\t\treturn this.mime;\n\t}\n\n\t/**\n\t * The etag of the binary resource if known.\n\t */\n\tgetETag(): string | undefined {\n\t\treturn this.etag;\n\t}\n\n\toverride async resolve(): Promise<void> {\n\n\t\t// Make sure to resolve up to date stat for file resources\n\t\tif (this.fileService.canHandleResource(this.resource)) {\n\t\t\tconst stat = await this.fileService.resolve(this.resource, { resolveMetadata: true });\n\t\t\tthis.etag = stat.etag;\n\t\t\tif (typeof stat.size === 'number') {\n\t\t\t\tthis.size = stat.size;\n\t\t\t}\n\t\t}\n\t}\n}\n"]}