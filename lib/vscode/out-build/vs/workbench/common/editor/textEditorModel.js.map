{"version":3,"file":"textEditorModel.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/common/editor/textEditorModel.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ITextModel, ITextBufferFactory, ITextSnapshot, ModelConstants } from 'vs/editor/common/model';\nimport { EditorModel } from 'vs/workbench/common/editor';\nimport { IModeSupport } from 'vs/workbench/services/textfile/common/textfiles';\nimport { URI } from 'vs/base/common/uri';\nimport { ITextEditorModel, IResolvedTextEditorModel } from 'vs/editor/common/services/resolverService';\nimport { IModeService, ILanguageSelection } from 'vs/editor/common/services/modeService';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { MutableDisposable } from 'vs/base/common/lifecycle';\nimport { PLAINTEXT_MODE_ID } from 'vs/editor/common/modes/modesRegistry';\nimport { withUndefinedAsNull } from 'vs/base/common/types';\n\n/**\n * The base text editor model leverages the code editor model. This class is only intended to be subclassed and not instantiated.\n */\nexport class BaseTextEditorModel extends EditorModel implements ITextEditorModel, IModeSupport {\n\n\tprotected textEditorModelHandle: URI | undefined = undefined;\n\n\tprivate createdEditorModel: boolean | undefined;\n\n\tprivate readonly modelDisposeListener = this._register(new MutableDisposable());\n\n\tconstructor(\n\t\t@IModelService protected modelService: IModelService,\n\t\t@IModeService protected modeService: IModeService,\n\t\ttextEditorModelHandle?: URI\n\t) {\n\t\tsuper();\n\n\t\tif (textEditorModelHandle) {\n\t\t\tthis.handleExistingModel(textEditorModelHandle);\n\t\t}\n\t}\n\n\tprivate handleExistingModel(textEditorModelHandle: URI): void {\n\n\t\t// We need the resource to point to an existing model\n\t\tconst model = this.modelService.getModel(textEditorModelHandle);\n\t\tif (!model) {\n\t\t\tthrow new Error(`Document with resource ${textEditorModelHandle.toString(true)} does not exist`);\n\t\t}\n\n\t\tthis.textEditorModelHandle = textEditorModelHandle;\n\n\t\t// Make sure we clean up when this model gets disposed\n\t\tthis.registerModelDisposeListener(model);\n\t}\n\n\tprivate registerModelDisposeListener(model: ITextModel): void {\n\t\tthis.modelDisposeListener.value = model.onWillDispose(() => {\n\t\t\tthis.textEditorModelHandle = undefined; // make sure we do not dispose code editor model again\n\t\t\tthis.dispose();\n\t\t});\n\t}\n\n\tget textEditorModel(): ITextModel | null {\n\t\treturn this.textEditorModelHandle ? this.modelService.getModel(this.textEditorModelHandle) : null;\n\t}\n\n\tisReadonly(): boolean {\n\t\treturn true;\n\t}\n\n\tsetMode(mode: string): void {\n\t\tif (!this.isResolved()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!mode || mode === this.textEditorModel.getModeId()) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.modelService.setMode(this.textEditorModel, this.modeService.create(mode));\n\t}\n\n\tgetMode(): string | undefined {\n\t\treturn this.textEditorModel?.getModeId();\n\t}\n\n\t/**\n\t * Creates the text editor model with the provided value, optional preferred mode\n\t * (can be comma separated for multiple values) and optional resource URL.\n\t */\n\tprotected createTextEditorModel(value: ITextBufferFactory, resource: URI | undefined, preferredMode?: string): ITextModel {\n\t\tconst firstLineText = this.getFirstLineText(value);\n\t\tconst languageSelection = this.getOrCreateMode(resource, this.modeService, preferredMode, firstLineText);\n\n\t\treturn this.doCreateTextEditorModel(value, languageSelection, resource);\n\t}\n\n\tprivate doCreateTextEditorModel(value: ITextBufferFactory, languageSelection: ILanguageSelection, resource: URI | undefined): ITextModel {\n\t\tlet model = resource && this.modelService.getModel(resource);\n\t\tif (!model) {\n\t\t\tmodel = this.modelService.createModel(value, languageSelection, resource);\n\t\t\tthis.createdEditorModel = true;\n\n\t\t\t// Make sure we clean up when this model gets disposed\n\t\t\tthis.registerModelDisposeListener(model);\n\t\t} else {\n\t\t\tthis.updateTextEditorModel(value, languageSelection.languageIdentifier.language);\n\t\t}\n\n\t\tthis.textEditorModelHandle = model.uri;\n\n\t\treturn model;\n\t}\n\n\tprotected getFirstLineText(value: ITextBufferFactory | ITextModel): string {\n\n\t\t// text buffer factory\n\t\tconst textBufferFactory = value as ITextBufferFactory;\n\t\tif (typeof textBufferFactory.getFirstLineText === 'function') {\n\t\t\treturn textBufferFactory.getFirstLineText(ModelConstants.FIRST_LINE_DETECTION_LENGTH_LIMIT);\n\t\t}\n\n\t\t// text model\n\t\tconst textSnapshot = value as ITextModel;\n\t\treturn textSnapshot.getLineContent(1).substr(0, ModelConstants.FIRST_LINE_DETECTION_LENGTH_LIMIT);\n\t}\n\n\t/**\n\t * Gets the mode for the given identifier. Subclasses can override to provide their own implementation of this lookup.\n\t *\n\t * @param firstLineText optional first line of the text buffer to set the mode on. This can be used to guess a mode from content.\n\t */\n\tprotected getOrCreateMode(resource: URI | undefined, modeService: IModeService, preferredMode: string | undefined, firstLineText?: string): ILanguageSelection {\n\n\t\t// lookup mode via resource path if the provided mode is unspecific\n\t\tif (!preferredMode || preferredMode === PLAINTEXT_MODE_ID) {\n\t\t\treturn modeService.createByFilepathOrFirstLine(withUndefinedAsNull(resource), firstLineText);\n\t\t}\n\n\t\t// otherwise take the preferred mode for granted\n\t\treturn modeService.create(preferredMode);\n\t}\n\n\t/**\n\t * Updates the text editor model with the provided value. If the value is the same as the model has, this is a no-op.\n\t */\n\tupdateTextEditorModel(newValue?: ITextBufferFactory, preferredMode?: string): void {\n\t\tif (!this.isResolved()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// contents\n\t\tif (newValue) {\n\t\t\tthis.modelService.updateModel(this.textEditorModel, newValue);\n\t\t}\n\n\t\t// mode (only if specific and changed)\n\t\tif (preferredMode && preferredMode !== PLAINTEXT_MODE_ID && this.textEditorModel.getModeId() !== preferredMode) {\n\t\t\tthis.modelService.setMode(this.textEditorModel, this.modeService.create(preferredMode));\n\t\t}\n\t}\n\n\tcreateSnapshot(this: IResolvedTextEditorModel): ITextSnapshot;\n\tcreateSnapshot(this: ITextEditorModel): ITextSnapshot | null;\n\tcreateSnapshot(): ITextSnapshot | null {\n\t\tif (!this.textEditorModel) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this.textEditorModel.createSnapshot(true /* preserve BOM */);\n\t}\n\n\toverride isResolved(): this is IResolvedTextEditorModel {\n\t\treturn !!this.textEditorModelHandle;\n\t}\n\n\toverride dispose(): void {\n\t\tthis.modelDisposeListener.dispose(); // dispose this first because it will trigger another dispose() otherwise\n\n\t\tif (this.textEditorModelHandle && this.createdEditorModel) {\n\t\t\tthis.modelService.destroyModel(this.textEditorModelHandle);\n\t\t}\n\n\t\tthis.textEditorModelHandle = undefined;\n\t\tthis.createdEditorModel = false;\n\n\t\tsuper.dispose();\n\t}\n}\n"]}