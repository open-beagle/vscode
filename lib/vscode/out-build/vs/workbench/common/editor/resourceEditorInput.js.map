{"version":3,"file":"resourceEditorInput.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/common/editor/resourceEditorInput.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { IReference } from 'vs/base/common/lifecycle';\nimport { ITextEditorModel, ITextModelService } from 'vs/editor/common/services/resolverService';\nimport { ResourceEditorModel } from 'vs/workbench/common/editor/resourceEditorModel';\nimport { IModeSupport, ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { ILabelService } from 'vs/platform/label/common/label';\nimport { IFilesConfigurationService } from 'vs/workbench/services/filesConfiguration/common/filesConfigurationService';\nimport { AbstractTextResourceEditorInput } from 'vs/workbench/common/editor/textResourceEditorInput';\nimport { isEqual } from 'vs/base/common/resources';\n\n/**\n * A read-only text editor input whos contents are made of the provided resource that points to an existing\n * code editor model.\n */\nexport class ResourceEditorInput extends AbstractTextResourceEditorInput implements IModeSupport {\n\n\tstatic readonly ID: string = 'workbench.editors.resourceEditorInput';\n\n\toverride get typeId(): string {\n\t\treturn ResourceEditorInput.ID;\n\t}\n\n\tprivate cachedModel: ResourceEditorModel | undefined = undefined;\n\tprivate modelReference: Promise<IReference<ITextEditorModel>> | undefined = undefined;\n\n\tconstructor(\n\t\tresource: URI,\n\t\tprivate name: string | undefined,\n\t\tprivate description: string | undefined,\n\t\tprivate preferredMode: string | undefined,\n\t\t@ITextModelService private readonly textModelResolverService: ITextModelService,\n\t\t@ITextFileService textFileService: ITextFileService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IEditorGroupsService editorGroupService: IEditorGroupsService,\n\t\t@IFileService fileService: IFileService,\n\t\t@ILabelService labelService: ILabelService,\n\t\t@IFilesConfigurationService filesConfigurationService: IFilesConfigurationService\n\t) {\n\t\tsuper(resource, undefined, editorService, editorGroupService, textFileService, labelService, fileService, filesConfigurationService);\n\t}\n\n\toverride getName(): string {\n\t\treturn this.name || super.getName();\n\t}\n\n\tsetName(name: string): void {\n\t\tif (this.name !== name) {\n\t\t\tthis.name = name;\n\n\t\t\tthis._onDidChangeLabel.fire();\n\t\t}\n\t}\n\n\toverride getDescription(): string | undefined {\n\t\treturn this.description;\n\t}\n\n\tsetDescription(description: string): void {\n\t\tif (this.description !== description) {\n\t\t\tthis.description = description;\n\n\t\t\tthis._onDidChangeLabel.fire();\n\t\t}\n\t}\n\n\tsetMode(mode: string): void {\n\t\tthis.setPreferredMode(mode);\n\n\t\tif (this.cachedModel) {\n\t\t\tthis.cachedModel.setMode(mode);\n\t\t}\n\t}\n\n\tsetPreferredMode(mode: string): void {\n\t\tthis.preferredMode = mode;\n\t}\n\n\toverride async resolve(): Promise<ITextEditorModel> {\n\t\tif (!this.modelReference) {\n\t\t\tthis.modelReference = this.textModelResolverService.createModelReference(this.resource);\n\t\t}\n\n\t\tconst ref = await this.modelReference;\n\n\t\t// Ensure the resolved model is of expected type\n\t\tconst model = ref.object;\n\t\tif (!(model instanceof ResourceEditorModel)) {\n\t\t\tref.dispose();\n\t\t\tthis.modelReference = undefined;\n\n\t\t\tthrow new Error(`Unexpected model for ResourceEditorInput: ${this.resource}`);\n\t\t}\n\n\t\tthis.cachedModel = model;\n\n\t\t// Set mode if we have a preferred mode configured\n\t\tif (this.preferredMode) {\n\t\t\tmodel.setMode(this.preferredMode);\n\t\t}\n\n\t\treturn model;\n\t}\n\n\toverride matches(otherInput: unknown): boolean {\n\t\tif (otherInput === this) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (otherInput instanceof ResourceEditorInput) {\n\t\t\treturn isEqual(otherInput.resource, this.resource);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\toverride dispose(): void {\n\t\tif (this.modelReference) {\n\t\t\tthis.modelReference.then(ref => ref.dispose());\n\t\t\tthis.modelReference = undefined;\n\t\t}\n\n\t\tthis.cachedModel = undefined;\n\n\t\tsuper.dispose();\n\t}\n}\n"]}