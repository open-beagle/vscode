{"version":3,"sources":["vs/workbench/common/views.ts"],"names":[],"mappings":"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","file":"views.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Command } from 'vs/editor/common/modes';\nimport { UriComponents, URI } from 'vs/base/common/uri';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { RawContextKey, ContextKeyExpression } from 'vs/platform/contextkey/common/contextkey';\nimport { localize } from 'vs/nls';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IDisposable, Disposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { ThemeIcon } from 'vs/platform/theme/common/themeService';\nimport { getOrSet } from 'vs/base/common/map';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IKeybindings } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\nimport { flatten } from 'vs/base/common/arrays';\nimport { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';\nimport { SetMap } from 'vs/base/common/collections';\nimport { IProgressIndicator } from 'vs/platform/progress/common/progress';\nimport Severity from 'vs/base/common/severity';\nimport { IPaneComposite } from 'vs/workbench/common/panecomposite';\nimport { IAccessibilityInformation } from 'vs/platform/accessibility/common/accessibility';\nimport { IMarkdownString } from 'vs/base/common/htmlContent';\nimport { mixin } from 'vs/base/common/objects';\nimport { Codicon } from 'vs/base/common/codicons';\nimport { registerIcon } from 'vs/platform/theme/common/iconRegistry';\nimport { CancellationToken } from 'vs/base/common/cancellation';\n\nexport const defaultViewIcon = registerIcon('default-view-icon', Codicon.window, localize('defaultViewIcon', 'Default view icon.'));\n\nexport namespace Extensions {\n\texport const ViewContainersRegistry = 'workbench.registry.view.containers';\n\texport const ViewsRegistry = 'workbench.registry.view';\n}\n\nexport const enum ViewContainerLocation {\n\tSidebar,\n\tPanel\n}\n\nexport function ViewContainerLocationToString(viewContainerLocation: ViewContainerLocation) {\n\tswitch (viewContainerLocation) {\n\t\tcase ViewContainerLocation.Sidebar: return 'sidebar';\n\t\tcase ViewContainerLocation.Panel: return 'panel';\n\t}\n}\n\ntype OpenCommandActionDescriptor = {\n\treadonly id: string;\n\treadonly title?: string;\n\treadonly mnemonicTitle?: string;\n\treadonly order?: number;\n\treadonly keybindings?: IKeybindings & { when?: ContextKeyExpression };\n};\n\n/**\n * View Container Contexts\n */\nexport function getEnabledViewContainerContextKey(viewContainerId: string): string { return `viewContainer.${viewContainerId}.enabled`; }\n\nexport interface IViewContainerDescriptor {\n\n\t/**\n\t * The id of the view container\n\t */\n\treadonly id: string;\n\n\t/**\n\t * The title of the view container\n\t */\n\treadonly title: string;\n\n\t/**\n\t * Icon representation of the View container\n\t */\n\treadonly icon?: ThemeIcon | URI;\n\n\t/**\n\t * Order of the view container.\n\t */\n\treadonly order?: number;\n\n\t/**\n\t * IViewPaneContainer Ctor to instantiate\n\t */\n\treadonly ctorDescriptor: SyncDescriptor<IViewPaneContainer>;\n\n\t/**\n\t * Descriptor for open view container command\n\t * If not provided, view container info (id, title) is used.\n\t *\n\t * Note: To prevent registering open command, use `donotRegisterOpenCommand` flag while registering the view container\n\t */\n\treadonly openCommandActionDescriptor?: OpenCommandActionDescriptor;\n\n\t/**\n\t * Storage id to use to store the view container state.\n\t * If not provided, it will be derived.\n\t */\n\treadonly storageId?: string;\n\n\t/**\n\t * If enabled, view container is not shown if it has no active views.\n\t */\n\treadonly hideIfEmpty?: boolean;\n\n\t/**\n\t * Id of the extension that contributed the view container\n\t */\n\treadonly extensionId?: ExtensionIdentifier;\n\n\treadonly alwaysUseContainerInfo?: boolean;\n\n\treadonly viewOrderDelegate?: ViewOrderDelegate;\n\n\treadonly rejectAddedViews?: boolean;\n\n\trequestedIndex?: number;\n}\n\nexport interface IViewContainersRegistry {\n\t/**\n\t * An event that is triggered when a view container is registered.\n\t */\n\treadonly onDidRegister: Event<{ viewContainer: ViewContainer, viewContainerLocation: ViewContainerLocation }>;\n\n\t/**\n\t * An event that is triggered when a view container is deregistered.\n\t */\n\treadonly onDidDeregister: Event<{ viewContainer: ViewContainer, viewContainerLocation: ViewContainerLocation }>;\n\n\t/**\n\t * All registered view containers\n\t */\n\treadonly all: ViewContainer[];\n\n\t/**\n\t * Registers a view container to given location.\n\t * No op if a view container is already registered.\n\t *\n\t * @param viewContainerDescriptor descriptor of view container\n\t * @param location location of the view container\n\t *\n\t * @returns the registered ViewContainer.\n\t */\n\tregisterViewContainer(viewContainerDescriptor: IViewContainerDescriptor, location: ViewContainerLocation, options?: { isDefault?: boolean, donotRegisterOpenCommand?: boolean }): ViewContainer;\n\n\t/**\n\t * Deregisters the given view container\n\t * No op if the view container is not registered\n\t */\n\tderegisterViewContainer(viewContainer: ViewContainer): void;\n\n\t/**\n\t * Returns the view container with given id.\n\t *\n\t * @returns the view container with given id.\n\t */\n\tget(id: string): ViewContainer | undefined;\n\n\t/**\n\t * Returns all view containers in the given location\n\t */\n\tgetViewContainers(location: ViewContainerLocation): ViewContainer[];\n\n\t/**\n\t * Returns the view container location\n\t */\n\tgetViewContainerLocation(container: ViewContainer): ViewContainerLocation;\n\n\t/**\n\t * Return the default view container from the given location\n\t */\n\tgetDefaultViewContainer(location: ViewContainerLocation): ViewContainer | undefined;\n}\n\ninterface ViewOrderDelegate {\n\tgetOrder(group?: string): number | undefined;\n}\n\nexport interface ViewContainer extends IViewContainerDescriptor { }\n\ninterface RelaxedViewContainer extends ViewContainer {\n\n\topenCommandActionDescriptor?: OpenCommandActionDescriptor;\n}\n\nclass ViewContainersRegistryImpl extends Disposable implements IViewContainersRegistry {\n\n\tprivate readonly _onDidRegister = this._register(new Emitter<{ viewContainer: ViewContainer, viewContainerLocation: ViewContainerLocation }>());\n\treadonly onDidRegister: Event<{ viewContainer: ViewContainer, viewContainerLocation: ViewContainerLocation }> = this._onDidRegister.event;\n\n\tprivate readonly _onDidDeregister = this._register(new Emitter<{ viewContainer: ViewContainer, viewContainerLocation: ViewContainerLocation }>());\n\treadonly onDidDeregister: Event<{ viewContainer: ViewContainer, viewContainerLocation: ViewContainerLocation }> = this._onDidDeregister.event;\n\n\tprivate readonly viewContainers: Map<ViewContainerLocation, ViewContainer[]> = new Map<ViewContainerLocation, ViewContainer[]>();\n\tprivate readonly defaultViewContainers: ViewContainer[] = [];\n\n\tget all(): ViewContainer[] {\n\t\treturn flatten([...this.viewContainers.values()]);\n\t}\n\n\tregisterViewContainer(viewContainerDescriptor: IViewContainerDescriptor, viewContainerLocation: ViewContainerLocation, options?: { isDefault?: boolean, donotRegisterOpenCommand?: boolean }): ViewContainer {\n\t\tconst existing = this.get(viewContainerDescriptor.id);\n\t\tif (existing) {\n\t\t\treturn existing;\n\t\t}\n\n\t\tconst viewContainer: RelaxedViewContainer = viewContainerDescriptor;\n\t\tviewContainer.openCommandActionDescriptor = options?.donotRegisterOpenCommand ? undefined : (viewContainer.openCommandActionDescriptor ?? { id: viewContainer.id });\n\t\tconst viewContainers = getOrSet(this.viewContainers, viewContainerLocation, []);\n\t\tviewContainers.push(viewContainer);\n\t\tif (options?.isDefault) {\n\t\t\tthis.defaultViewContainers.push(viewContainer);\n\t\t}\n\t\tthis._onDidRegister.fire({ viewContainer, viewContainerLocation });\n\t\treturn viewContainer;\n\t}\n\n\tderegisterViewContainer(viewContainer: ViewContainer): void {\n\t\tfor (const viewContainerLocation of this.viewContainers.keys()) {\n\t\t\tconst viewContainers = this.viewContainers.get(viewContainerLocation)!;\n\t\t\tconst index = viewContainers?.indexOf(viewContainer);\n\t\t\tif (index !== -1) {\n\t\t\t\tviewContainers?.splice(index, 1);\n\t\t\t\tif (viewContainers.length === 0) {\n\t\t\t\t\tthis.viewContainers.delete(viewContainerLocation);\n\t\t\t\t}\n\t\t\t\tthis._onDidDeregister.fire({ viewContainer, viewContainerLocation });\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\tget(id: string): ViewContainer | undefined {\n\t\treturn this.all.filter(viewContainer => viewContainer.id === id)[0];\n\t}\n\n\tgetViewContainers(location: ViewContainerLocation): ViewContainer[] {\n\t\treturn [...(this.viewContainers.get(location) || [])];\n\t}\n\n\tgetViewContainerLocation(container: ViewContainer): ViewContainerLocation {\n\t\treturn [...this.viewContainers.keys()].filter(location => this.getViewContainers(location).filter(viewContainer => viewContainer?.id === container.id).length > 0)[0];\n\t}\n\n\tgetDefaultViewContainer(location: ViewContainerLocation): ViewContainer | undefined {\n\t\treturn this.defaultViewContainers.find(viewContainer => this.getViewContainerLocation(viewContainer) === location);\n\t}\n}\n\nRegistry.add(Extensions.ViewContainersRegistry, new ViewContainersRegistryImpl());\n\nexport interface IViewDescriptor {\n\n\treadonly type?: string;\n\n\treadonly id: string;\n\n\treadonly name: string;\n\n\treadonly ctorDescriptor: SyncDescriptor<IView>;\n\n\treadonly when?: ContextKeyExpression;\n\n\treadonly order?: number;\n\n\treadonly weight?: number;\n\n\treadonly collapsed?: boolean;\n\n\treadonly canToggleVisibility?: boolean;\n\n\treadonly canMoveView?: boolean;\n\n\treadonly containerIcon?: ThemeIcon | URI;\n\n\treadonly containerTitle?: string;\n\n\t// Applies only to newly created views\n\treadonly hideByDefault?: boolean;\n\n\treadonly workspace?: boolean;\n\n\treadonly focusCommand?: { id: string, keybindings?: IKeybindings };\n\n\t// For contributed remote explorer views\n\treadonly group?: string;\n\n\treadonly remoteAuthority?: string | string[];\n\n\treadonly openCommandActionDescriptor?: OpenCommandActionDescriptor\n}\n\nexport interface IViewDescriptorRef {\n\tviewDescriptor: IViewDescriptor;\n\tindex: number;\n}\n\nexport interface IAddedViewDescriptorRef extends IViewDescriptorRef {\n\tcollapsed: boolean;\n\tsize?: number;\n}\n\nexport interface IAddedViewDescriptorState {\n\tviewDescriptor: IViewDescriptor,\n\tcollapsed?: boolean;\n\tvisible?: boolean;\n}\n\nexport interface IViewContainerModel {\n\n\treadonly viewContainer: ViewContainer;\n\n\treadonly title: string;\n\treadonly icon: ThemeIcon | URI | undefined;\n\treadonly keybindingId: string | undefined;\n\treadonly onDidChangeContainerInfo: Event<{ title?: boolean, icon?: boolean, keybindingId?: boolean }>;\n\n\treadonly allViewDescriptors: ReadonlyArray<IViewDescriptor>;\n\treadonly onDidChangeAllViewDescriptors: Event<{ added: ReadonlyArray<IViewDescriptor>, removed: ReadonlyArray<IViewDescriptor> }>;\n\n\treadonly activeViewDescriptors: ReadonlyArray<IViewDescriptor>;\n\treadonly onDidChangeActiveViewDescriptors: Event<{ added: ReadonlyArray<IViewDescriptor>, removed: ReadonlyArray<IViewDescriptor> }>;\n\n\treadonly visibleViewDescriptors: ReadonlyArray<IViewDescriptor>;\n\treadonly onDidAddVisibleViewDescriptors: Event<IAddedViewDescriptorRef[]>;\n\treadonly onDidRemoveVisibleViewDescriptors: Event<IViewDescriptorRef[]>\n\treadonly onDidMoveVisibleViewDescriptors: Event<{ from: IViewDescriptorRef; to: IViewDescriptorRef; }>\n\n\tisVisible(id: string): boolean;\n\tsetVisible(id: string, visible: boolean, size?: number): void;\n\n\tisCollapsed(id: string): boolean;\n\tsetCollapsed(id: string, collapsed: boolean): void;\n\n\tgetSize(id: string): number | undefined;\n\tsetSize(id: string, size: number): void\n\n\tmove(from: string, to: string): void;\n}\n\nexport enum ViewContentGroups {\n\tOpen = '2_open',\n\tDebug = '4_debug',\n\tSCM = '5_scm',\n\tMore = '9_more'\n}\n\nexport interface IViewContentDescriptor {\n\treadonly content: string;\n\treadonly when?: ContextKeyExpression | 'default';\n\treadonly group?: string;\n\treadonly order?: number;\n\treadonly precondition?: ContextKeyExpression | undefined;\n}\n\nexport interface IViewsRegistry {\n\n\treadonly onViewsRegistered: Event<{ views: IViewDescriptor[], viewContainer: ViewContainer }[]>;\n\n\treadonly onViewsDeregistered: Event<{ views: IViewDescriptor[], viewContainer: ViewContainer }>;\n\n\treadonly onDidChangeContainer: Event<{ views: IViewDescriptor[], from: ViewContainer, to: ViewContainer }>;\n\n\tregisterViews(views: IViewDescriptor[], viewContainer: ViewContainer): void;\n\n\tregisterViews2(views: { views: IViewDescriptor[], viewContainer: ViewContainer }[]): void;\n\n\tderegisterViews(views: IViewDescriptor[], viewContainer: ViewContainer): void;\n\n\tmoveViews(views: IViewDescriptor[], viewContainer: ViewContainer): void;\n\n\tgetViews(viewContainer: ViewContainer): IViewDescriptor[];\n\n\tgetView(id: string): IViewDescriptor | null;\n\n\tgetViewContainer(id: string): ViewContainer | null;\n\n\treadonly onDidChangeViewWelcomeContent: Event<string>;\n\tregisterViewWelcomeContent(id: string, viewContent: IViewContentDescriptor): IDisposable;\n\tregisterViewWelcomeContent2<TKey>(id: string, viewContentMap: Map<TKey, IViewContentDescriptor>): Map<TKey, IDisposable>;\n\tgetViewWelcomeContent(id: string): IViewContentDescriptor[];\n}\n\nfunction compareViewContentDescriptors(a: IViewContentDescriptor, b: IViewContentDescriptor): number {\n\tconst aGroup = a.group ?? ViewContentGroups.More;\n\tconst bGroup = b.group ?? ViewContentGroups.More;\n\tif (aGroup !== bGroup) {\n\t\treturn aGroup.localeCompare(bGroup);\n\t}\n\treturn (a.order ?? 5) - (b.order ?? 5);\n}\n\nclass ViewsRegistry extends Disposable implements IViewsRegistry {\n\n\tprivate readonly _onViewsRegistered = this._register(new Emitter<{ views: IViewDescriptor[], viewContainer: ViewContainer }[]>());\n\treadonly onViewsRegistered = this._onViewsRegistered.event;\n\n\tprivate readonly _onViewsDeregistered: Emitter<{ views: IViewDescriptor[], viewContainer: ViewContainer }> = this._register(new Emitter<{ views: IViewDescriptor[], viewContainer: ViewContainer }>());\n\treadonly onViewsDeregistered: Event<{ views: IViewDescriptor[], viewContainer: ViewContainer }> = this._onViewsDeregistered.event;\n\n\tprivate readonly _onDidChangeContainer: Emitter<{ views: IViewDescriptor[], from: ViewContainer, to: ViewContainer }> = this._register(new Emitter<{ views: IViewDescriptor[], from: ViewContainer, to: ViewContainer }>());\n\treadonly onDidChangeContainer: Event<{ views: IViewDescriptor[], from: ViewContainer, to: ViewContainer }> = this._onDidChangeContainer.event;\n\n\tprivate readonly _onDidChangeViewWelcomeContent: Emitter<string> = this._register(new Emitter<string>());\n\treadonly onDidChangeViewWelcomeContent: Event<string> = this._onDidChangeViewWelcomeContent.event;\n\n\tprivate _viewContainers: ViewContainer[] = [];\n\tprivate _views: Map<ViewContainer, IViewDescriptor[]> = new Map<ViewContainer, IViewDescriptor[]>();\n\tprivate _viewWelcomeContents = new SetMap<string, IViewContentDescriptor>();\n\n\tregisterViews(views: IViewDescriptor[], viewContainer: ViewContainer): void {\n\t\tthis.registerViews2([{ views, viewContainer }]);\n\t}\n\n\tregisterViews2(views: { views: IViewDescriptor[], viewContainer: ViewContainer }[]): void {\n\t\tviews.forEach(({ views, viewContainer }) => this.addViews(views, viewContainer));\n\t\tthis._onViewsRegistered.fire(views);\n\t}\n\n\tderegisterViews(viewDescriptors: IViewDescriptor[], viewContainer: ViewContainer): void {\n\t\tconst views = this.removeViews(viewDescriptors, viewContainer);\n\t\tif (views.length) {\n\t\t\tthis._onViewsDeregistered.fire({ views, viewContainer });\n\t\t}\n\t}\n\n\tmoveViews(viewsToMove: IViewDescriptor[], viewContainer: ViewContainer): void {\n\t\tfor (const container of this._views.keys()) {\n\t\t\tif (container !== viewContainer) {\n\t\t\t\tconst views = this.removeViews(viewsToMove, container);\n\t\t\t\tif (views.length) {\n\t\t\t\t\tthis.addViews(views, viewContainer);\n\t\t\t\t\tthis._onDidChangeContainer.fire({ views, from: container, to: viewContainer });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tgetViews(loc: ViewContainer): IViewDescriptor[] {\n\t\treturn this._views.get(loc) || [];\n\t}\n\n\tgetView(id: string): IViewDescriptor | null {\n\t\tfor (const viewContainer of this._viewContainers) {\n\t\t\tconst viewDescriptor = (this._views.get(viewContainer) || []).filter(v => v.id === id)[0];\n\t\t\tif (viewDescriptor) {\n\t\t\t\treturn viewDescriptor;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetViewContainer(viewId: string): ViewContainer | null {\n\t\tfor (const viewContainer of this._viewContainers) {\n\t\t\tconst viewDescriptor = (this._views.get(viewContainer) || []).filter(v => v.id === viewId)[0];\n\t\t\tif (viewDescriptor) {\n\t\t\t\treturn viewContainer;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tregisterViewWelcomeContent(id: string, viewContent: IViewContentDescriptor): IDisposable {\n\t\tthis._viewWelcomeContents.add(id, viewContent);\n\t\tthis._onDidChangeViewWelcomeContent.fire(id);\n\n\t\treturn toDisposable(() => {\n\t\t\tthis._viewWelcomeContents.delete(id, viewContent);\n\t\t\tthis._onDidChangeViewWelcomeContent.fire(id);\n\t\t});\n\t}\n\n\tregisterViewWelcomeContent2<TKey>(id: string, viewContentMap: Map<TKey, IViewContentDescriptor>): Map<TKey, IDisposable> {\n\t\tconst disposables = new Map<TKey, IDisposable>();\n\n\t\tfor (const [key, content] of viewContentMap) {\n\t\t\tthis._viewWelcomeContents.add(id, content);\n\n\t\t\tdisposables.set(key, toDisposable(() => {\n\t\t\t\tthis._viewWelcomeContents.delete(id, content);\n\t\t\t\tthis._onDidChangeViewWelcomeContent.fire(id);\n\t\t\t}));\n\t\t}\n\t\tthis._onDidChangeViewWelcomeContent.fire(id);\n\n\t\treturn disposables;\n\t}\n\n\tgetViewWelcomeContent(id: string): IViewContentDescriptor[] {\n\t\tconst result: IViewContentDescriptor[] = [];\n\t\tthis._viewWelcomeContents.forEach(id, descriptor => result.push(descriptor));\n\t\treturn result.sort(compareViewContentDescriptors);\n\t}\n\n\tprivate addViews(viewDescriptors: IViewDescriptor[], viewContainer: ViewContainer): void {\n\t\tlet views = this._views.get(viewContainer);\n\t\tif (!views) {\n\t\t\tviews = [];\n\t\t\tthis._views.set(viewContainer, views);\n\t\t\tthis._viewContainers.push(viewContainer);\n\t\t}\n\t\tfor (const viewDescriptor of viewDescriptors) {\n\t\t\tif (this.getView(viewDescriptor.id) !== null) {\n\t\t\t\tthrow new Error(localize('duplicateId', \"A view with id '{0}' is already registered\", viewDescriptor.id));\n\t\t\t}\n\t\t\tviews.push(viewDescriptor);\n\t\t}\n\t}\n\n\tprivate removeViews(viewDescriptors: IViewDescriptor[], viewContainer: ViewContainer): IViewDescriptor[] {\n\t\tconst views = this._views.get(viewContainer);\n\t\tif (!views) {\n\t\t\treturn [];\n\t\t}\n\t\tconst viewsToDeregister: IViewDescriptor[] = [];\n\t\tconst remaningViews: IViewDescriptor[] = [];\n\t\tfor (const view of views) {\n\t\t\tif (!viewDescriptors.includes(view)) {\n\t\t\t\tremaningViews.push(view);\n\t\t\t} else {\n\t\t\t\tviewsToDeregister.push(view);\n\t\t\t}\n\t\t}\n\t\tif (viewsToDeregister.length) {\n\t\t\tif (remaningViews.length) {\n\t\t\t\tthis._views.set(viewContainer, remaningViews);\n\t\t\t} else {\n\t\t\t\tthis._views.delete(viewContainer);\n\t\t\t\tthis._viewContainers.splice(this._viewContainers.indexOf(viewContainer), 1);\n\t\t\t}\n\t\t}\n\t\treturn viewsToDeregister;\n\t}\n}\n\nRegistry.add(Extensions.ViewsRegistry, new ViewsRegistry());\n\nexport interface IView {\n\n\treadonly id: string;\n\n\tfocus(): void;\n\n\tisVisible(): boolean;\n\n\tisBodyVisible(): boolean;\n\n\tsetExpanded(expanded: boolean): boolean;\n\n\tgetProgressIndicator(): IProgressIndicator | undefined;\n}\n\nexport const IViewsService = createDecorator<IViewsService>('viewsService');\nexport interface IViewsService {\n\n\treadonly _serviceBrand: undefined;\n\n\t// View Container APIs\n\treadonly onDidChangeViewContainerVisibility: Event<{ id: string, visible: boolean, location: ViewContainerLocation }>;\n\tisViewContainerVisible(id: string): boolean;\n\topenViewContainer(id: string, focus?: boolean): Promise<IPaneComposite | null>;\n\tcloseViewContainer(id: string): void;\n\tgetVisibleViewContainer(location: ViewContainerLocation): ViewContainer | null;\n\tgetActiveViewPaneContainerWithId(viewContainerId: string): IViewPaneContainer | null;\n\n\t// View APIs\n\treadonly onDidChangeViewVisibility: Event<{ id: string, visible: boolean }>;\n\tisViewVisible(id: string): boolean;\n\topenView<T extends IView>(id: string, focus?: boolean): Promise<T | null>;\n\tcloseView(id: string): void;\n\tgetActiveViewWithId<T extends IView>(id: string): T | null;\n\tgetViewWithId<T extends IView>(id: string): T | null;\n\tgetViewProgressIndicator(id: string): IProgressIndicator | undefined;\n}\n\n/**\n * View Contexts\n */\nexport const FocusedViewContext = new RawContextKey<string>('focusedView', '', localize('focusedView', \"The identifier of the view that has keyboard focus\"));\nexport function getVisbileViewContextKey(viewId: string): string { return `view.${viewId}.visible`; }\n\nexport const IViewDescriptorService = createDecorator<IViewDescriptorService>('viewDescriptorService');\n\nexport enum ViewVisibilityState {\n\tDefault = 0,\n\tExpand = 1\n}\n\nexport interface IViewDescriptorService {\n\n\treadonly _serviceBrand: undefined;\n\n\t// ViewContainers\n\treadonly viewContainers: ReadonlyArray<ViewContainer>;\n\treadonly onDidChangeViewContainers: Event<{ added: ReadonlyArray<{ container: ViewContainer, location: ViewContainerLocation }>, removed: ReadonlyArray<{ container: ViewContainer, location: ViewContainerLocation }> }>;\n\n\tgetDefaultViewContainer(location: ViewContainerLocation): ViewContainer | undefined;\n\tgetViewContainerById(id: string): ViewContainer | null;\n\tisViewContainerRemovedPermanently(id: string): boolean;\n\tgetDefaultViewContainerLocation(viewContainer: ViewContainer): ViewContainerLocation | null;\n\tgetViewContainerLocation(viewContainer: ViewContainer): ViewContainerLocation | null;\n\tgetViewContainersByLocation(location: ViewContainerLocation): ViewContainer[];\n\tgetViewContainerModel(viewContainer: ViewContainer): IViewContainerModel;\n\n\treadonly onDidChangeContainerLocation: Event<{ viewContainer: ViewContainer, from: ViewContainerLocation, to: ViewContainerLocation }>;\n\tmoveViewContainerToLocation(viewContainer: ViewContainer, location: ViewContainerLocation, requestedIndex?: number): void;\n\n\t// Views\n\tgetViewDescriptorById(id: string): IViewDescriptor | null;\n\tgetViewContainerByViewId(id: string): ViewContainer | null;\n\tgetDefaultContainerById(id: string): ViewContainer | null;\n\tgetViewLocationById(id: string): ViewContainerLocation | null;\n\n\treadonly onDidChangeContainer: Event<{ views: IViewDescriptor[], from: ViewContainer, to: ViewContainer }>;\n\tmoveViewsToContainer(views: IViewDescriptor[], viewContainer: ViewContainer, visibilityState?: ViewVisibilityState): void;\n\n\treadonly onDidChangeLocation: Event<{ views: IViewDescriptor[], from: ViewContainerLocation, to: ViewContainerLocation }>;\n\tmoveViewToLocation(view: IViewDescriptor, location: ViewContainerLocation): void;\n\n\treset(): void;\n}\n\n// Custom views\n\nexport interface ITreeView extends IDisposable {\n\n\tdataProvider: ITreeViewDataProvider | undefined;\n\n\tshowCollapseAllAction: boolean;\n\n\tcanSelectMany: boolean;\n\n\tmessage?: string;\n\n\ttitle: string;\n\n\tdescription: string | undefined;\n\n\treadonly visible: boolean;\n\n\treadonly onDidExpandItem: Event<ITreeItem>;\n\n\treadonly onDidCollapseItem: Event<ITreeItem>;\n\n\treadonly onDidChangeSelection: Event<ITreeItem[]>;\n\n\treadonly onDidChangeVisibility: Event<boolean>;\n\n\treadonly onDidChangeActions: Event<void>;\n\n\treadonly onDidChangeTitle: Event<string>;\n\n\treadonly onDidChangeDescription: Event<string | undefined>;\n\n\treadonly onDidChangeWelcomeState: Event<void>;\n\n\trefresh(treeItems?: ITreeItem[]): Promise<void>;\n\n\tsetVisibility(visible: boolean): void;\n\n\tfocus(): void;\n\n\tlayout(height: number, width: number): void;\n\n\tgetOptimalWidth(): number;\n\n\treveal(item: ITreeItem): Promise<void>;\n\n\texpand(itemOrItems: ITreeItem | ITreeItem[]): Promise<void>;\n\n\tsetSelection(items: ITreeItem[]): void;\n\n\tsetFocus(item: ITreeItem): void;\n\n\tshow(container: any): void;\n}\n\nexport interface IRevealOptions {\n\n\tselect?: boolean;\n\n\tfocus?: boolean;\n\n\texpand?: boolean | number;\n\n}\n\nexport interface ITreeViewDescriptor extends IViewDescriptor {\n\ttreeView: ITreeView;\n}\n\nexport type TreeViewItemHandleArg = {\n\t$treeViewId: string,\n\t$treeItemHandle: string\n};\n\nexport enum TreeItemCollapsibleState {\n\tNone = 0,\n\tCollapsed = 1,\n\tExpanded = 2\n}\n\nexport interface ITreeItemLabel {\n\n\tlabel: string;\n\n\thighlights?: [number, number][];\n\n\tstrikethrough?: boolean;\n\n}\n\nexport interface ITreeItem {\n\n\thandle: string;\n\n\tparentHandle?: string;\n\n\tcollapsibleState: TreeItemCollapsibleState;\n\n\tlabel?: ITreeItemLabel;\n\n\tdescription?: string | boolean;\n\n\ticon?: UriComponents;\n\n\ticonDark?: UriComponents;\n\n\tthemeIcon?: ThemeIcon;\n\n\tresourceUri?: UriComponents;\n\n\ttooltip?: string | IMarkdownString;\n\n\tcontextValue?: string;\n\n\tcommand?: Command;\n\n\tchildren?: ITreeItem[];\n\n\taccessibilityInformation?: IAccessibilityInformation;\n}\n\nexport class ResolvableTreeItem implements ITreeItem {\n\thandle!: string;\n\tparentHandle?: string;\n\tcollapsibleState!: TreeItemCollapsibleState;\n\tlabel?: ITreeItemLabel;\n\tdescription?: string | boolean;\n\ticon?: UriComponents;\n\ticonDark?: UriComponents;\n\tthemeIcon?: ThemeIcon;\n\tresourceUri?: UriComponents;\n\ttooltip?: string | IMarkdownString;\n\tcontextValue?: string;\n\tcommand?: Command;\n\tchildren?: ITreeItem[];\n\taccessibilityInformation?: IAccessibilityInformation;\n\tresolve: (token: CancellationToken) => Promise<void>;\n\tprivate resolved: boolean = false;\n\tprivate _hasResolve: boolean = false;\n\tconstructor(treeItem: ITreeItem, resolve?: ((token: CancellationToken) => Promise<ITreeItem | undefined>)) {\n\t\tmixin(this, treeItem);\n\t\tthis._hasResolve = !!resolve;\n\t\tthis.resolve = async (token: CancellationToken) => {\n\t\t\tif (resolve && !this.resolved) {\n\t\t\t\tconst resolvedItem = await resolve(token);\n\t\t\t\tif (resolvedItem) {\n\t\t\t\t\t// Resolvable elements. Currently tooltip and command.\n\t\t\t\t\tthis.tooltip = this.tooltip ?? resolvedItem.tooltip;\n\t\t\t\t\tthis.command = this.command ?? resolvedItem.command;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!token.isCancellationRequested) {\n\t\t\t\tthis.resolved = true;\n\t\t\t}\n\t\t};\n\t}\n\tget hasResolve(): boolean {\n\t\treturn this._hasResolve;\n\t}\n\tpublic resetResolve() {\n\t\tthis.resolved = false;\n\t}\n\tpublic asTreeItem(): ITreeItem {\n\t\treturn {\n\t\t\thandle: this.handle,\n\t\t\tparentHandle: this.parentHandle,\n\t\t\tcollapsibleState: this.collapsibleState,\n\t\t\tlabel: this.label,\n\t\t\tdescription: this.description,\n\t\t\ticon: this.icon,\n\t\t\ticonDark: this.iconDark,\n\t\t\tthemeIcon: this.themeIcon,\n\t\t\tresourceUri: this.resourceUri,\n\t\t\ttooltip: this.tooltip,\n\t\t\tcontextValue: this.contextValue,\n\t\t\tcommand: this.command,\n\t\t\tchildren: this.children,\n\t\t\taccessibilityInformation: this.accessibilityInformation\n\t\t};\n\t}\n}\n\nexport interface ITreeViewDataProvider {\n\treadonly isTreeEmpty?: boolean;\n\tonDidChangeEmpty?: Event<void>;\n\tgetChildren(element?: ITreeItem): Promise<ITreeItem[]>;\n\n}\n\nexport interface IEditableData {\n\tvalidationMessage: (value: string) => { content: string, severity: Severity } | null;\n\tplaceholder?: string | null;\n\tstartingValue?: string | null;\n\tonFinish: (value: string, success: boolean) => Promise<void>;\n}\n\nexport interface IViewPaneContainer {\n\tonDidAddViews: Event<IView[]>;\n\tonDidRemoveViews: Event<IView[]>;\n\tonDidChangeViewVisibility: Event<IView>;\n\n\treadonly views: IView[];\n\n\tsetVisible(visible: boolean): void;\n\tisVisible(): boolean;\n\tfocus(): void;\n\tgetActionsContext(): unknown;\n\tgetView(viewId: string): IView | undefined;\n\ttoggleViewVisibility(viewId: string): void;\n\tsaveState(): void;\n}\n"]}