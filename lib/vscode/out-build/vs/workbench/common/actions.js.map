{"version":3,"sources":["vs/workbench/common/actions.ts"],"names":[],"mappings":"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","file":"actions.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { KeybindingsRegistry, KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { ICommandHandler, CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { SyncActionDescriptor, MenuRegistry, MenuId, ICommandAction } from 'vs/platform/actions/common/actions';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IDisposable, DisposableStore } from 'vs/base/common/lifecycle';\nimport { ILifecycleService, LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { ContextKeyExpr, ContextKeyExpression } from 'vs/platform/contextkey/common/contextkey';\n\nexport const Extensions = {\n\tWorkbenchActions: 'workbench.contributions.actions'\n};\n\nexport interface IWorkbenchActionRegistry {\n\n\t/**\n\t * Registers a workbench action to the platform. Workbench actions are not\n\t * visible by default and can only be invoked through a keybinding if provided.\n\t * @deprecated Register directly with KeybindingsRegistry and MenuRegistry or use registerAction2 instead.\n\t */\n\tregisterWorkbenchAction(descriptor: SyncActionDescriptor, alias: string, category?: string, when?: ContextKeyExpr): IDisposable;\n}\n\nRegistry.add(Extensions.WorkbenchActions, new class implements IWorkbenchActionRegistry {\n\n\tregisterWorkbenchAction(descriptor: SyncActionDescriptor, alias: string, category?: string, when?: ContextKeyExpression): IDisposable {\n\t\treturn this.registerWorkbenchCommandFromAction(descriptor, alias, category, when);\n\t}\n\n\tprivate registerWorkbenchCommandFromAction(descriptor: SyncActionDescriptor, alias: string, category?: string, when?: ContextKeyExpression): IDisposable {\n\t\tconst registrations = new DisposableStore();\n\n\t\t// command\n\t\tregistrations.add(CommandsRegistry.registerCommand(descriptor.id, this.createCommandHandler(descriptor)));\n\n\t\t// keybinding\n\t\tconst weight = (typeof descriptor.keybindingWeight === 'undefined' ? KeybindingWeight.WorkbenchContrib : descriptor.keybindingWeight);\n\t\tconst keybindings = descriptor.keybindings;\n\t\tKeybindingsRegistry.registerKeybindingRule({\n\t\t\tid: descriptor.id,\n\t\t\tweight: weight,\n\t\t\twhen:\n\t\t\t\tdescriptor.keybindingContext && when\n\t\t\t\t\t? ContextKeyExpr.and(descriptor.keybindingContext, when)\n\t\t\t\t\t: descriptor.keybindingContext || when || null,\n\t\t\tprimary: keybindings ? keybindings.primary : 0,\n\t\t\tsecondary: keybindings?.secondary,\n\t\t\twin: keybindings?.win,\n\t\t\tmac: keybindings?.mac,\n\t\t\tlinux: keybindings?.linux\n\t\t});\n\n\t\t// menu item\n\t\t// TODO@Rob slightly weird if-check required because of\n\t\t// https://github.com/microsoft/vscode/blob/main/src/vs/workbench/contrib/search/electron-browser/search.contribution.ts#L266\n\t\tif (descriptor.label) {\n\n\t\t\tlet idx = alias.indexOf(': ');\n\t\t\tlet categoryOriginal = '';\n\t\t\tif (idx > 0) {\n\t\t\t\tcategoryOriginal = alias.substr(0, idx);\n\t\t\t\talias = alias.substr(idx + 2);\n\t\t\t}\n\n\t\t\tconst command: ICommandAction = {\n\t\t\t\tid: descriptor.id,\n\t\t\t\ttitle: { value: descriptor.label, original: alias },\n\t\t\t\tcategory: category ? { value: category, original: categoryOriginal } : undefined\n\t\t\t};\n\n\t\t\tMenuRegistry.addCommand(command);\n\n\t\t\tregistrations.add(MenuRegistry.appendMenuItem(MenuId.CommandPalette, { command, when }));\n\t\t}\n\n\t\t// TODO@alex,joh\n\t\t// support removal of keybinding rule\n\t\t// support removal of command-ui\n\t\treturn registrations;\n\t}\n\n\tprivate createCommandHandler(descriptor: SyncActionDescriptor): ICommandHandler {\n\t\treturn async (accessor, args) => {\n\t\t\tconst notificationService = accessor.get(INotificationService);\n\t\t\tconst instantiationService = accessor.get(IInstantiationService);\n\t\t\tconst lifecycleService = accessor.get(ILifecycleService);\n\n\t\t\ttry {\n\t\t\t\tawait this.triggerAndDisposeAction(instantiationService, lifecycleService, descriptor, args);\n\t\t\t} catch (error) {\n\t\t\t\tnotificationService.error(error);\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate async triggerAndDisposeAction(instantiationService: IInstantiationService, lifecycleService: ILifecycleService, descriptor: SyncActionDescriptor, args: unknown): Promise<void> {\n\n\t\t// run action when workbench is created\n\t\tawait lifecycleService.when(LifecyclePhase.Ready);\n\n\t\tconst actionInstance = instantiationService.createInstance(descriptor.syncDescriptor);\n\t\tactionInstance.label = descriptor.label || actionInstance.label;\n\n\t\t// don't run the action when not enabled\n\t\tif (!actionInstance.enabled) {\n\t\t\tactionInstance.dispose();\n\n\t\t\treturn;\n\t\t}\n\n\t\t// otherwise run and dispose\n\t\ttry {\n\t\t\tconst from = (args as any)?.from || 'keybinding';\n\t\t\tawait actionInstance.run(undefined, { from });\n\t\t} finally {\n\t\t\tactionInstance.dispose();\n\t\t}\n\t}\n});\n\nexport const CATEGORIES = {\n\tView: { value: localize('view', \"View\"), original: 'View' },\n\tHelp: { value: localize('help', \"Help\"), original: 'Help' },\n\tPreferences: { value: localize('preferences', \"Preferences\"), original: 'Preferences' },\n\tDeveloper: { value: localize({ key: 'developer', comment: ['A developer on Code itself or someone diagnosing issues in Code'] }, \"Developer\"), original: 'Developer' }\n};\n"]}