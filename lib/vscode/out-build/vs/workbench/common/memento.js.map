{"version":3,"file":"memento.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/common/memento.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { isEmptyObject } from 'vs/base/common/types';\nimport { onUnexpectedError } from 'vs/base/common/errors';\n\nexport type MementoObject = { [key: string]: any };\n\nexport class Memento {\n\n\tprivate static readonly globalMementos = new Map<string, ScopedMemento>();\n\tprivate static readonly workspaceMementos = new Map<string, ScopedMemento>();\n\n\tprivate static readonly COMMON_PREFIX = 'memento/';\n\n\tprivate readonly id: string;\n\n\tconstructor(id: string, private storageService: IStorageService) {\n\t\tthis.id = Memento.COMMON_PREFIX + id;\n\t}\n\n\tgetMemento(scope: StorageScope, target: StorageTarget): MementoObject {\n\n\t\t// Scope by Workspace\n\t\tif (scope === StorageScope.WORKSPACE) {\n\t\t\tlet workspaceMemento = Memento.workspaceMementos.get(this.id);\n\t\t\tif (!workspaceMemento) {\n\t\t\t\tworkspaceMemento = new ScopedMemento(this.id, scope, target, this.storageService);\n\t\t\t\tMemento.workspaceMementos.set(this.id, workspaceMemento);\n\t\t\t}\n\n\t\t\treturn workspaceMemento.getMemento();\n\t\t}\n\n\t\t// Scope Global\n\t\tlet globalMemento = Memento.globalMementos.get(this.id);\n\t\tif (!globalMemento) {\n\t\t\tglobalMemento = new ScopedMemento(this.id, scope, target, this.storageService);\n\t\t\tMemento.globalMementos.set(this.id, globalMemento);\n\t\t}\n\n\t\treturn globalMemento.getMemento();\n\t}\n\n\tsaveMemento(): void {\n\n\t\t// Workspace\n\t\tconst workspaceMemento = Memento.workspaceMementos.get(this.id);\n\t\tif (workspaceMemento) {\n\t\t\tworkspaceMemento.save();\n\t\t}\n\n\t\t// Global\n\t\tconst globalMemento = Memento.globalMementos.get(this.id);\n\t\tif (globalMemento) {\n\t\t\tglobalMemento.save();\n\t\t}\n\t}\n}\n\nclass ScopedMemento {\n\n\tprivate readonly mementoObj: MementoObject;\n\n\tconstructor(private id: string, private scope: StorageScope, private target: StorageTarget, private storageService: IStorageService) {\n\t\tthis.mementoObj = this.load();\n\t}\n\n\tgetMemento(): MementoObject {\n\t\treturn this.mementoObj;\n\t}\n\n\tprivate load(): MementoObject {\n\t\tconst memento = this.storageService.get(this.id, this.scope);\n\t\tif (memento) {\n\t\t\ttry {\n\t\t\t\treturn JSON.parse(memento);\n\t\t\t} catch (error) {\n\t\t\t\t// Seeing reports from users unable to open editors\n\t\t\t\t// from memento parsing exceptions. Log the contents\n\t\t\t\t// to diagnose further\n\t\t\t\t// https://github.com/microsoft/vscode/issues/102251\n\t\t\t\tonUnexpectedError(`[memento]: failed to parse contents: ${error} (id: ${this.id}, scope: ${this.scope}, contents: ${memento})`);\n\t\t\t}\n\t\t}\n\n\t\treturn {};\n\t}\n\n\tsave(): void {\n\t\tif (!isEmptyObject(this.mementoObj)) {\n\t\t\tthis.storageService.store(this.id, JSON.stringify(this.mementoObj), this.scope, this.target);\n\t\t} else {\n\t\t\tthis.storageService.remove(this.id, this.scope);\n\t\t}\n\t}\n}\n"]}