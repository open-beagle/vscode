{"version":3,"file":"contributions.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/common/contributions.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IInstantiationService, IConstructorSignature0, ServicesAccessor, BrandedService } from 'vs/platform/instantiation/common/instantiation';\nimport { ILifecycleService, LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { runWhenIdle, IdleDeadline } from 'vs/base/common/async';\n\n/**\n * A workbench contribution that will be loaded when the workbench starts and disposed when the workbench shuts down.\n */\nexport interface IWorkbenchContribution {\n\t// Marker Interface\n}\n\nexport namespace Extensions {\n\texport const Workbench = 'workbench.contributions.kind';\n}\n\ntype IWorkbenchContributionSignature<Service extends BrandedService[]> = new (...services: Service) => IWorkbenchContribution;\n\nexport interface IWorkbenchContributionsRegistry {\n\n\t/**\n\t * Registers a workbench contribution to the platform that will be loaded when the workbench starts and disposed when\n\t * the workbench shuts down.\n\t *\n\t * @param phase the lifecycle phase when to instantiate the contribution.\n\t */\n\tregisterWorkbenchContribution<Services extends BrandedService[]>(contribution: IWorkbenchContributionSignature<Services>, phase: LifecyclePhase): void;\n\n\t/**\n\t * Starts the registry by providing the required services.\n\t */\n\tstart(accessor: ServicesAccessor): void;\n}\n\nclass WorkbenchContributionsRegistry implements IWorkbenchContributionsRegistry {\n\n\tprivate instantiationService: IInstantiationService | undefined;\n\tprivate lifecycleService: ILifecycleService | undefined;\n\n\tprivate readonly toBeInstantiated = new Map<LifecyclePhase, IConstructorSignature0<IWorkbenchContribution>[]>();\n\n\tregisterWorkbenchContribution(ctor: IConstructorSignature0<IWorkbenchContribution>, phase: LifecyclePhase = LifecyclePhase.Starting): void {\n\n\t\t// Instantiate directly if we are already matching the provided phase\n\t\tif (this.instantiationService && this.lifecycleService && this.lifecycleService.phase >= phase) {\n\t\t\tthis.instantiationService.createInstance(ctor);\n\t\t}\n\n\t\t// Otherwise keep contributions by lifecycle phase\n\t\telse {\n\t\t\tlet toBeInstantiated = this.toBeInstantiated.get(phase);\n\t\t\tif (!toBeInstantiated) {\n\t\t\t\ttoBeInstantiated = [];\n\t\t\t\tthis.toBeInstantiated.set(phase, toBeInstantiated);\n\t\t\t}\n\n\t\t\ttoBeInstantiated.push(ctor as IConstructorSignature0<IWorkbenchContribution>);\n\t\t}\n\t}\n\n\tstart(accessor: ServicesAccessor): void {\n\t\tconst instantiationService = this.instantiationService = accessor.get(IInstantiationService);\n\t\tconst lifecycleService = this.lifecycleService = accessor.get(ILifecycleService);\n\n\t\t[LifecyclePhase.Starting, LifecyclePhase.Ready, LifecyclePhase.Restored, LifecyclePhase.Eventually].forEach(phase => {\n\t\t\tthis.instantiateByPhase(instantiationService, lifecycleService, phase);\n\t\t});\n\t}\n\n\tprivate instantiateByPhase(instantiationService: IInstantiationService, lifecycleService: ILifecycleService, phase: LifecyclePhase): void {\n\n\t\t// Instantiate contributions directly when phase is already reached\n\t\tif (lifecycleService.phase >= phase) {\n\t\t\tthis.doInstantiateByPhase(instantiationService, phase);\n\t\t}\n\n\t\t// Otherwise wait for phase to be reached\n\t\telse {\n\t\t\tlifecycleService.when(phase).then(() => this.doInstantiateByPhase(instantiationService, phase));\n\t\t}\n\t}\n\n\tprivate doInstantiateByPhase(instantiationService: IInstantiationService, phase: LifecyclePhase): void {\n\t\tconst toBeInstantiated = this.toBeInstantiated.get(phase);\n\t\tif (toBeInstantiated) {\n\t\t\tthis.toBeInstantiated.delete(phase);\n\t\t\tif (phase !== LifecyclePhase.Eventually) {\n\t\t\t\t// instantiate everything synchronously and blocking\n\t\t\t\tfor (const ctor of toBeInstantiated) {\n\t\t\t\t\tthis.safeCreateInstance(instantiationService, ctor); // catch error so that other contributions are still considered\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// for the Eventually-phase we instantiate contributions\n\t\t\t\t// only when idle. this might take a few idle-busy-cycles\n\t\t\t\t// but will finish within the timeouts\n\t\t\t\tlet forcedTimeout = 3000;\n\t\t\t\tlet i = 0;\n\t\t\t\tlet instantiateSome = (idle: IdleDeadline) => {\n\t\t\t\t\twhile (i < toBeInstantiated.length) {\n\t\t\t\t\t\tconst ctor = toBeInstantiated[i++];\n\t\t\t\t\t\tthis.safeCreateInstance(instantiationService, ctor); // catch error so that other contributions are still considered\n\t\t\t\t\t\tif (idle.timeRemaining() < 1) {\n\t\t\t\t\t\t\t// time is up -> reschedule\n\t\t\t\t\t\t\trunWhenIdle(instantiateSome, forcedTimeout);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\trunWhenIdle(instantiateSome, forcedTimeout);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate safeCreateInstance(instantiationService: IInstantiationService, ctor: IConstructorSignature0<IWorkbenchContribution>): void {\n\t\ttry {\n\t\t\tinstantiationService.createInstance(ctor);\n\t\t} catch (error) {\n\t\t\tconsole.error(`Unable to instantiate workbench contribution ${ctor.name}.`, error);\n\t\t}\n\t}\n}\n\nRegistry.add(Extensions.Workbench, new WorkbenchContributionsRegistry());\n"]}