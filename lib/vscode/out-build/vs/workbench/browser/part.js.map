{"version":3,"file":"part.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/browser/part.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./media/part';\nimport { Component } from 'vs/workbench/common/component';\nimport { IThemeService, IColorTheme } from 'vs/platform/theme/common/themeService';\nimport { Dimension, size, IDimension } from 'vs/base/browser/dom';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { ISerializableView, IViewSize } from 'vs/base/browser/ui/grid/grid';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { IWorkbenchLayoutService } from 'vs/workbench/services/layout/browser/layoutService';\nimport { assertIsDefined } from 'vs/base/common/types';\n\nexport interface IPartOptions {\n\thasTitle?: boolean;\n\tborderWidth?: () => number;\n}\n\nexport interface ILayoutContentResult {\n\ttitleSize: IDimension;\n\tcontentSize: IDimension;\n}\n\n/**\n * Parts are layed out in the workbench and have their own layout that\n * arranges an optional title and mandatory content area to show content.\n */\nexport abstract class Part extends Component implements ISerializableView {\n\n\tprivate _dimension: Dimension | undefined;\n\tget dimension(): Dimension | undefined { return this._dimension; }\n\n\tprotected _onDidVisibilityChange = this._register(new Emitter<boolean>());\n\treadonly onDidVisibilityChange = this._onDidVisibilityChange.event;\n\n\tprivate parent: HTMLElement | undefined;\n\tprivate titleArea: HTMLElement | undefined;\n\tprivate contentArea: HTMLElement | undefined;\n\tprivate partLayout: PartLayout | undefined;\n\n\tconstructor(\n\t\tid: string,\n\t\tprivate options: IPartOptions,\n\t\tthemeService: IThemeService,\n\t\tstorageService: IStorageService,\n\t\tprotected readonly layoutService: IWorkbenchLayoutService\n\t) {\n\t\tsuper(id, themeService, storageService);\n\n\t\tlayoutService.registerPart(this);\n\t}\n\n\tprotected override onThemeChange(theme: IColorTheme): void {\n\n\t\t// only call if our create() method has been called\n\t\tif (this.parent) {\n\t\t\tsuper.onThemeChange(theme);\n\t\t}\n\t}\n\n\toverride updateStyles(): void {\n\t\tsuper.updateStyles();\n\t}\n\n\t/**\n\t * Note: Clients should not call this method, the workbench calls this\n\t * method. Calling it otherwise may result in unexpected behavior.\n\t *\n\t * Called to create title and content area of the part.\n\t */\n\tcreate(parent: HTMLElement, options?: object): void {\n\t\tthis.parent = parent;\n\t\tthis.titleArea = this.createTitleArea(parent, options);\n\t\tthis.contentArea = this.createContentArea(parent, options);\n\n\t\tthis.partLayout = new PartLayout(this.options, this.contentArea);\n\n\t\tthis.updateStyles();\n\t}\n\n\t/**\n\t * Returns the overall part container.\n\t */\n\tgetContainer(): HTMLElement | undefined {\n\t\treturn this.parent;\n\t}\n\n\t/**\n\t * Subclasses override to provide a title area implementation.\n\t */\n\tprotected createTitleArea(parent: HTMLElement, options?: object): HTMLElement | undefined {\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Returns the title area container.\n\t */\n\tprotected getTitleArea(): HTMLElement | undefined {\n\t\treturn this.titleArea;\n\t}\n\n\t/**\n\t * Subclasses override to provide a content area implementation.\n\t */\n\tprotected createContentArea(parent: HTMLElement, options?: object): HTMLElement | undefined {\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Returns the content area container.\n\t */\n\tprotected getContentArea(): HTMLElement | undefined {\n\t\treturn this.contentArea;\n\t}\n\n\t/**\n\t * Layout title and content area in the given dimension.\n\t */\n\tprotected layoutContents(width: number, height: number): ILayoutContentResult {\n\t\tconst partLayout = assertIsDefined(this.partLayout);\n\n\t\treturn partLayout.layout(width, height);\n\t}\n\n\t//#region ISerializableView\n\n\tprivate _onDidChange = this._register(new Emitter<IViewSize | undefined>());\n\tget onDidChange(): Event<IViewSize | undefined> { return this._onDidChange.event; }\n\n\telement!: HTMLElement;\n\n\tabstract minimumWidth: number;\n\tabstract maximumWidth: number;\n\tabstract minimumHeight: number;\n\tabstract maximumHeight: number;\n\n\tlayout(width: number, height: number): void {\n\t\tthis._dimension = new Dimension(width, height);\n\t}\n\n\tsetVisible(visible: boolean) {\n\t\tthis._onDidVisibilityChange.fire(visible);\n\t}\n\n\tabstract toJSON(): object;\n\n\t//#endregion\n}\n\nclass PartLayout {\n\n\tprivate static readonly TITLE_HEIGHT = 35;\n\n\tconstructor(private options: IPartOptions, private contentArea: HTMLElement | undefined) { }\n\n\tlayout(width: number, height: number): ILayoutContentResult {\n\n\t\t// Title Size: Width (Fill), Height (Variable)\n\t\tlet titleSize: Dimension;\n\t\tif (this.options.hasTitle) {\n\t\t\ttitleSize = new Dimension(width, Math.min(height, PartLayout.TITLE_HEIGHT));\n\t\t} else {\n\t\t\ttitleSize = Dimension.None;\n\t\t}\n\n\t\tlet contentWidth = width;\n\t\tif (this.options && typeof this.options.borderWidth === 'function') {\n\t\t\tcontentWidth -= this.options.borderWidth(); // adjust for border size\n\t\t}\n\n\t\t// Content Size: Width (Fill), Height (Variable)\n\t\tconst contentSize = new Dimension(contentWidth, height - titleSize.height);\n\n\t\t// Content\n\t\tif (this.contentArea) {\n\t\t\tsize(this.contentArea, contentSize.width, contentSize.height);\n\t\t}\n\n\t\treturn { titleSize, contentSize };\n\t}\n}\n"]}