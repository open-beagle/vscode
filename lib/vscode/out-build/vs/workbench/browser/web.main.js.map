{"version":3,"sources":["vs/workbench/browser/web.main.ts"],"names":[],"mappings":"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","file":"web.main.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { mark } from 'vs/base/common/performance';\nimport { domContentLoaded, detectFullscreen, getCookieValue } from 'vs/base/browser/dom';\nimport { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';\nimport { ILogService, ConsoleLogger, MultiplexLogService, getLogLevel } from 'vs/platform/log/common/log';\nimport { ConsoleLogInAutomationLogger } from 'vs/platform/log/browser/log';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { BrowserWorkbenchEnvironmentService } from 'vs/workbench/services/environment/browser/environmentService';\nimport { Workbench } from 'vs/workbench/browser/workbench';\nimport { RemoteFileSystemProvider } from 'vs/workbench/services/remote/common/remoteAgentFileSystemChannel';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport product from 'vs/platform/product/common/product';\nimport { RemoteAgentService } from 'vs/workbench/services/remote/browser/remoteAgentServiceImpl';\nimport { RemoteAuthorityResolverService } from 'vs/platform/remote/browser/remoteAuthorityResolverService';\nimport { IRemoteAuthorityResolverService } from 'vs/platform/remote/common/remoteAuthorityResolver';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { IFileService, IFileSystemProvider } from 'vs/platform/files/common/files';\nimport { FileService } from 'vs/platform/files/common/fileService';\nimport { Schemas } from 'vs/base/common/network';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { IWorkbenchConfigurationService } from 'vs/workbench/services/configuration/common/configuration';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { setFullscreen } from 'vs/base/browser/browser';\nimport { URI } from 'vs/base/common/uri';\nimport { IWorkspaceInitializationPayload } from 'vs/platform/workspaces/common/workspaces';\nimport { WorkspaceService } from 'vs/workbench/services/configuration/browser/configurationService';\nimport { ConfigurationCache } from 'vs/workbench/services/configuration/browser/configurationCache';\nimport { ISignService } from 'vs/platform/sign/common/sign';\nimport { SignService } from 'vs/platform/sign/browser/signService';\nimport type { IWorkbenchConstructionOptions, IWorkspace, IWorkbench } from 'vs/workbench/workbench.web.api';\nimport { BrowserStorageService } from 'vs/platform/storage/browser/storageService';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { BufferLogService } from 'vs/platform/log/common/bufferLog';\nimport { FileLogger } from 'vs/platform/log/common/fileLog';\nimport { toLocalISOString } from 'vs/base/common/date';\nimport { isWorkspaceToOpen, isFolderToOpen } from 'vs/platform/windows/common/windows';\nimport { initialize } from 'vs/server/browser/client';\nimport { getSingleFolderWorkspaceIdentifier, getWorkspaceIdentifier } from 'vs/workbench/services/workspaces/browser/workspaces';\nimport { coalesce } from 'vs/base/common/arrays';\nimport { InMemoryFileSystemProvider } from 'vs/platform/files/common/inMemoryFilesystemProvider';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { IIndexedDBFileSystemProvider, IndexedDB, INDEXEDDB_LOGS_OBJECT_STORE, INDEXEDDB_USERDATA_OBJECT_STORE } from 'vs/platform/files/browser/indexedDBFileSystemProvider';\nimport { BrowserRequestService } from 'vs/workbench/services/request/browser/requestService';\nimport { IRequestService } from 'vs/platform/request/common/request';\nimport { IUserDataInitializationService, UserDataInitializationService } from 'vs/workbench/services/userData/browser/userDataInit';\nimport { UserDataSyncStoreManagementService } from 'vs/platform/userDataSync/common/userDataSyncStoreService';\nimport { IUserDataSyncStoreManagementService } from 'vs/platform/userDataSync/common/userDataSync';\nimport { ILifecycleService } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { Action2, MenuId, registerAction2 } from 'vs/platform/actions/common/actions';\nimport { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { localize } from 'vs/nls';\nimport { CATEGORIES } from 'vs/workbench/common/actions';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { IHostService } from 'vs/workbench/services/host/browser/host';\nimport { IUriIdentityService } from 'vs/workbench/services/uriIdentity/common/uriIdentity';\nimport { UriIdentityService } from 'vs/workbench/services/uriIdentity/common/uriIdentityService';\nimport { BrowserWindow } from 'vs/workbench/browser/window';\nimport { ITimerService } from 'vs/workbench/services/timer/browser/timerService';\nimport { WorkspaceTrustManagementService } from 'vs/workbench/services/workspaces/common/workspaceTrust';\nimport { IWorkspaceTrustManagementService } from 'vs/platform/workspace/common/workspaceTrust';\nimport { HTMLFileSystemProvider } from 'vs/platform/files/browser/htmlFileSystemProvider';\n\nclass BrowserMain extends Disposable {\n\n\tconstructor(\n\t\tprivate readonly domElement: HTMLElement,\n\t\tprivate readonly configuration: IWorkbenchConstructionOptions\n\t) {\n\t\tsuper();\n\n\t\tthis.init();\n\t}\n\n\tprivate init(): void {\n\n\t\t// Browser config\n\t\tsetFullscreen(!!detectFullscreen());\n\t}\n\n\tasync open(): Promise<IWorkbench> {\n\n\t\t// Init services and wait for DOM to be ready in parallel\n\t\tconst [services] = await Promise.all([this.initServices(), domContentLoaded()]);\n\n\t\t// Create Workbench\n\t\tconst workbench = new Workbench(this.domElement, services.serviceCollection, services.logService);\n\n\t\t// Listeners\n\t\tthis.registerListeners(workbench, services.storageService, services.logService);\n\n\t\t// Startup\n\t\tconst instantiationService = workbench.startup();\n\n\t\tawait initialize(services.serviceCollection);\n\t\t// Window\n\t\tthis._register(instantiationService.createInstance(BrowserWindow));\n\n\t\t// Logging\n\t\tservices.logService.trace('workbench configuration', JSON.stringify(this.configuration));\n\n\t\t// Return API Facade\n\t\treturn instantiationService.invokeFunction(accessor => {\n\t\t\tconst commandService = accessor.get(ICommandService);\n\t\t\tconst lifecycleService = accessor.get(ILifecycleService);\n\t\t\tconst timerService = accessor.get(ITimerService);\n\n\t\t\treturn {\n\t\t\t\tcommands: {\n\t\t\t\t\texecuteCommand: (command, ...args) => commandService.executeCommand(command, ...args)\n\t\t\t\t},\n\t\t\t\tenv: {\n\t\t\t\t\tasync retrievePerformanceMarks() {\n\t\t\t\t\t\tawait timerService.whenReady();\n\n\t\t\t\t\t\treturn timerService.getPerformanceMarks();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tshutdown: () => lifecycleService.shutdown()\n\t\t\t};\n\t\t});\n\t}\n\n\tprivate registerListeners(workbench: Workbench, storageService: BrowserStorageService, logService: ILogService): void {\n\n\t\t// Workbench Lifecycle\n\t\tthis._register(workbench.onBeforeShutdown(event => {\n\t\t\tif (storageService.hasPendingUpdate) {\n\t\t\t\tevent.veto(true, 'veto.pendingStorageUpdate'); // prevent data loss from pending storage update\n\t\t\t}\n\t\t}));\n\t\tthis._register(workbench.onWillShutdown(() => storageService.close()));\n\t\tthis._register(workbench.onDidShutdown(() => this.dispose()));\n\t}\n\n\tprivate async initServices(): Promise<{ serviceCollection: ServiceCollection, configurationService: IWorkbenchConfigurationService, logService: ILogService, storageService: BrowserStorageService }> {\n\t\tconst serviceCollection = new ServiceCollection();\n\n\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t\t// NOTE: DO NOT ADD ANY OTHER SERVICE INTO THE COLLECTION HERE.\n\t\t// CONTRIBUTE IT VIA WORKBENCH.WEB.MAIN.TS AND registerSingleton().\n\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\t\tconst payload = this.resolveWorkspaceInitializationPayload();\n\n\t\t// Product\n\t\tconst productService: IProductService = { _serviceBrand: undefined, ...product, ...this.configuration.productConfiguration };\n\t\tserviceCollection.set(IProductService, productService);\n\n\t\t// Environment\n\t\tconst logsPath = URI.file(toLocalISOString(new Date()).replace(/-|:|\\.\\d+Z$/g, '')).with({ scheme: 'vscode-log' });\n\t\tconst environmentService = new BrowserWorkbenchEnvironmentService({ workspaceId: payload.id, logsPath, ...this.configuration }, productService);\n\t\tserviceCollection.set(IWorkbenchEnvironmentService, environmentService);\n\n\t\t// Log\n\t\tconst logService = new BufferLogService(getLogLevel(environmentService));\n\t\tserviceCollection.set(ILogService, logService);\n\n\t\t// Remote\n\t\tconst connectionToken = environmentService.options.connectionToken || getCookieValue('vscode-tkn');\n\t\tconst remoteAuthorityResolverService = new RemoteAuthorityResolverService(connectionToken, this.configuration.resourceUriProvider);\n\t\tserviceCollection.set(IRemoteAuthorityResolverService, remoteAuthorityResolverService);\n\n\t\t// Signing\n\t\tconst signService = new SignService(connectionToken);\n\t\tserviceCollection.set(ISignService, signService);\n\n\t\t// Remote Agent\n\t\tconst remoteAgentService = this._register(new RemoteAgentService(this.configuration.webSocketFactory, environmentService, productService, remoteAuthorityResolverService, signService, logService));\n\t\tserviceCollection.set(IRemoteAgentService, remoteAgentService);\n\n\t\t// Files\n\t\tconst fileService = this._register(new FileService(logService));\n\t\tserviceCollection.set(IFileService, fileService);\n\t\tawait this.registerFileSystemProviders(environmentService, fileService, remoteAgentService, logService, logsPath);\n\n\t\t// IURIIdentityService\n\t\tconst uriIdentityService = new UriIdentityService(fileService);\n\t\tserviceCollection.set(IUriIdentityService, uriIdentityService);\n\n\t\t// Long running services (workspace, config, storage)\n\t\tconst [configurationService, storageService] = await Promise.all([\n\t\t\tthis.createWorkspaceService(payload, environmentService, fileService, remoteAgentService, uriIdentityService, logService).then(service => {\n\n\t\t\t\t// Workspace\n\t\t\t\tserviceCollection.set(IWorkspaceContextService, service);\n\n\t\t\t\t// Configuration\n\t\t\t\tserviceCollection.set(IWorkbenchConfigurationService, service);\n\n\t\t\t\treturn service;\n\t\t\t}),\n\n\t\t\tthis.createStorageService(payload, environmentService, fileService, logService).then(service => {\n\n\t\t\t\t// Storage\n\t\t\t\tserviceCollection.set(IStorageService, service);\n\n\t\t\t\treturn service;\n\t\t\t})\n\t\t]);\n\n\t\t// Workspace Trust Service\n\t\tconst workspaceTrustManagementService = new WorkspaceTrustManagementService(configurationService, environmentService, storageService, uriIdentityService, configurationService);\n\t\tserviceCollection.set(IWorkspaceTrustManagementService, workspaceTrustManagementService);\n\n\t\t// Update workspace trust so that configuration is updated accordingly\n\t\tconfigurationService.updateWorkspaceTrust(workspaceTrustManagementService.isWorkpaceTrusted());\n\t\tthis._register(workspaceTrustManagementService.onDidChangeTrust(() => configurationService.updateWorkspaceTrust(workspaceTrustManagementService.isWorkpaceTrusted())));\n\n\t\t// Request Service\n\t\tconst requestService = new BrowserRequestService(remoteAgentService, configurationService, logService);\n\t\tserviceCollection.set(IRequestService, requestService);\n\n\t\t// Userdata Sync Store Management Service\n\t\tconst userDataSyncStoreManagementService = new UserDataSyncStoreManagementService(productService, configurationService, storageService);\n\t\tserviceCollection.set(IUserDataSyncStoreManagementService, userDataSyncStoreManagementService);\n\n\t\t// Userdata Initialize Service\n\t\tconst userDataInitializationService = new UserDataInitializationService(environmentService, userDataSyncStoreManagementService, fileService, storageService, productService, requestService, logService);\n\t\tserviceCollection.set(IUserDataInitializationService, userDataInitializationService);\n\n\t\tif (await userDataInitializationService.requiresInitialization()) {\n\t\t\tmark('code/willInitRequiredUserData');\n\n\t\t\t// Initialize required resources - settings & global state\n\t\t\tawait userDataInitializationService.initializeRequiredResources();\n\n\t\t\t// Important: Reload only local user configuration after initializing\n\t\t\t// Reloading complete configuraiton blocks workbench until remote configuration is loaded.\n\t\t\tawait configurationService.reloadLocalUserConfiguration();\n\n\t\t\tmark('code/didInitRequiredUserData');\n\t\t}\n\n\t\treturn { serviceCollection, configurationService, logService, storageService };\n\t}\n\n\tprivate async registerFileSystemProviders(environmentService: IWorkbenchEnvironmentService, fileService: IFileService, remoteAgentService: IRemoteAgentService, logService: BufferLogService, logsPath: URI): Promise<void> {\n\t\tconst indexedDB = new IndexedDB();\n\n\t\t// Logger\n\t\t(async () => {\n\t\t\tlet indexedDBLogProvider: IFileSystemProvider | null = null;\n\t\t\ttry {\n\t\t\t\tindexedDBLogProvider = await indexedDB.createFileSystemProvider(logsPath.scheme, INDEXEDDB_LOGS_OBJECT_STORE);\n\t\t\t} catch (error) {\n\t\t\t\tonUnexpectedError(error);\n\t\t\t}\n\n\t\t\tif (indexedDBLogProvider) {\n\t\t\t\tfileService.registerProvider(logsPath.scheme, indexedDBLogProvider);\n\t\t\t} else {\n\t\t\t\tfileService.registerProvider(logsPath.scheme, new InMemoryFileSystemProvider());\n\t\t\t}\n\n\t\t\tlogService.logger = new MultiplexLogService(coalesce([\n\t\t\t\tnew ConsoleLogger(logService.getLevel()),\n\t\t\t\tnew FileLogger('window', environmentService.logFile, logService.getLevel(), fileService),\n\t\t\t\t// Extension development test CLI: forward everything to test runner\n\t\t\t\tenvironmentService.isExtensionDevelopment && !!environmentService.extensionTestsLocationURI ? new ConsoleLogInAutomationLogger(logService.getLevel()) : undefined\n\t\t\t]));\n\t\t})();\n\n\t\tconst connection = remoteAgentService.getConnection();\n\t\tif (connection) {\n\n\t\t\t// Remote file system\n\t\t\tconst remoteFileSystemProvider = this._register(new RemoteFileSystemProvider(remoteAgentService));\n\t\t\tfileService.registerProvider(Schemas.vscodeRemote, remoteFileSystemProvider);\n\t\t}\n\n\t\t// User data\n\t\tlet indexedDBUserDataProvider: IIndexedDBFileSystemProvider | null = null;\n\t\ttry {\n\t\t\tindexedDBUserDataProvider = await indexedDB.createFileSystemProvider(Schemas.userData, INDEXEDDB_USERDATA_OBJECT_STORE);\n\t\t} catch (error) {\n\t\t\tonUnexpectedError(error);\n\t\t}\n\n\t\tlet userDataProvider: IFileSystemProvider | undefined;\n\t\tif (indexedDBUserDataProvider) {\n\t\t\tuserDataProvider = indexedDBUserDataProvider;\n\t\t} else {\n\t\t\tlogService.info('using in-memory user data provider');\n\t\t\tuserDataProvider = new InMemoryFileSystemProvider();\n\t\t}\n\n\t\tfileService.registerProvider(Schemas.userData, userDataProvider);\n\n\t\tif (indexedDBUserDataProvider) {\n\t\t\tregisterAction2(class ResetUserDataAction extends Action2 {\n\t\t\t\tconstructor() {\n\t\t\t\t\tsuper({\n\t\t\t\t\t\tid: 'workbench.action.resetUserData',\n\t\t\t\t\t\ttitle: { original: 'Reset User Data', value: localize('reset', \"Reset User Data\") },\n\t\t\t\t\t\tcategory: CATEGORIES.Developer,\n\t\t\t\t\t\tmenu: {\n\t\t\t\t\t\t\tid: MenuId.CommandPalette\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\t\t\t\tconst dialogService = accessor.get(IDialogService);\n\t\t\t\t\tconst hostService = accessor.get(IHostService);\n\t\t\t\t\tconst result = await dialogService.confirm({\n\t\t\t\t\t\tmessage: localize('reset user data message', \"Would you like to reset your data (settings, keybindings, extensions, snippets and UI State) and reload?\")\n\t\t\t\t\t});\n\n\t\t\t\t\tif (result.confirmed) {\n\t\t\t\t\t\tawait indexedDBUserDataProvider?.reset();\n\t\t\t\t\t}\n\n\t\t\t\t\thostService.reload();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tfileService.registerProvider(Schemas.file, new HTMLFileSystemProvider());\n\t\tfileService.registerProvider(Schemas.tmp, new InMemoryFileSystemProvider());\n\t}\n\n\tprivate async createStorageService(payload: IWorkspaceInitializationPayload, environmentService: IWorkbenchEnvironmentService, fileService: IFileService, logService: ILogService): Promise<BrowserStorageService> {\n\t\tconst storageService = new BrowserStorageService(payload, environmentService, fileService);\n\n\t\ttry {\n\t\t\tawait storageService.initialize();\n\n\t\t\treturn storageService;\n\t\t} catch (error) {\n\t\t\tonUnexpectedError(error);\n\t\t\tlogService.error(error);\n\n\t\t\treturn storageService;\n\t\t}\n\t}\n\n\tprivate async createWorkspaceService(payload: IWorkspaceInitializationPayload, environmentService: IWorkbenchEnvironmentService, fileService: FileService, remoteAgentService: IRemoteAgentService, uriIdentityService: IUriIdentityService, logService: ILogService): Promise<WorkspaceService> {\n\t\tconst workspaceService = new WorkspaceService({ remoteAuthority: this.configuration.remoteAuthority, configurationCache: new ConfigurationCache() }, environmentService, fileService, remoteAgentService, uriIdentityService, logService);\n\n\t\ttry {\n\t\t\tawait workspaceService.initialize(payload);\n\n\t\t\treturn workspaceService;\n\t\t} catch (error) {\n\t\t\tonUnexpectedError(error);\n\t\t\tlogService.error(error);\n\n\t\t\treturn workspaceService;\n\t\t}\n\t}\n\n\tprivate resolveWorkspaceInitializationPayload(): IWorkspaceInitializationPayload {\n\t\tlet workspace: IWorkspace | undefined = undefined;\n\t\tif (this.configuration.workspaceProvider) {\n\t\t\tworkspace = this.configuration.workspaceProvider.workspace;\n\t\t}\n\n\t\t// Multi-root workspace\n\t\tif (workspace && isWorkspaceToOpen(workspace)) {\n\t\t\treturn getWorkspaceIdentifier(workspace.workspaceUri);\n\t\t}\n\n\t\t// Single-folder workspace\n\t\tif (workspace && isFolderToOpen(workspace)) {\n\t\t\treturn getSingleFolderWorkspaceIdentifier(workspace.folderUri);\n\t\t}\n\n\t\treturn { id: 'empty-window' };\n\t}\n}\n\nexport function main(domElement: HTMLElement, options: IWorkbenchConstructionOptions): Promise<IWorkbench> {\n\tconst workbench = new BrowserMain(domElement, options);\n\n\treturn workbench.open();\n}\n"]}