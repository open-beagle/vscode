{"version":3,"file":"panel.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/browser/panel.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IPanel } from 'vs/workbench/common/panel';\nimport { CompositeDescriptor, CompositeRegistry } from 'vs/workbench/browser/composite';\nimport { IConstructorSignature0, BrandedService, IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { assertIsDefined } from 'vs/base/common/types';\nimport { PaneComposite } from 'vs/workbench/browser/panecomposite';\nimport { IAction, Separator } from 'vs/base/common/actions';\nimport { CompositeMenuActions } from 'vs/workbench/browser/menuActions';\nimport { MenuId } from 'vs/platform/actions/common/actions';\nimport { IContextMenuService } from 'vs/platform/contextview/browser/contextView';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\n\nexport abstract class Panel extends PaneComposite implements IPanel {\n\n\tprivate readonly panelActions: CompositeMenuActions;\n\n\tconstructor(id: string,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t@IExtensionService extensionService: IExtensionService,\n\t\t@IWorkspaceContextService contextService: IWorkspaceContextService,\n\t) {\n\t\tsuper(id, telemetryService, storageService, instantiationService, themeService, contextMenuService, extensionService, contextService);\n\t\tthis.panelActions = this._register(this.instantiationService.createInstance(CompositeMenuActions, MenuId.PanelTitle, undefined, undefined));\n\t\tthis._register(this.panelActions.onDidChange(() => this.updateTitleArea()));\n\t}\n\n\toverride getActions(): readonly IAction[] {\n\t\treturn [...super.getActions(), ...this.panelActions.getPrimaryActions()];\n\t}\n\n\toverride getSecondaryActions(): readonly IAction[] {\n\t\treturn this.mergeSecondaryActions(super.getSecondaryActions(), this.panelActions.getSecondaryActions());\n\t}\n\n\toverride getContextMenuActions(): readonly IAction[] {\n\t\treturn this.mergeSecondaryActions(super.getContextMenuActions(), this.panelActions.getContextMenuActions());\n\t}\n\n\tprivate mergeSecondaryActions(actions: readonly IAction[], panelActions: IAction[]): readonly IAction[] {\n\t\tif (panelActions.length && actions.length) {\n\t\t\treturn [\n\t\t\t\t...actions,\n\t\t\t\tnew Separator(),\n\t\t\t\t...panelActions,\n\t\t\t];\n\t\t}\n\t\treturn panelActions.length ? panelActions : actions;\n\t}\n}\n\n/**\n * A panel descriptor is a leightweight descriptor of a panel in the workbench.\n */\nexport class PanelDescriptor extends CompositeDescriptor<Panel> {\n\n\tstatic create<Services extends BrandedService[]>(ctor: { new(...services: Services): Panel }, id: string, name: string, cssClass?: string, order?: number, requestedIndex?: number): PanelDescriptor {\n\t\treturn new PanelDescriptor(ctor as IConstructorSignature0<Panel>, id, name, cssClass, order, requestedIndex);\n\t}\n\n\tprivate constructor(ctor: IConstructorSignature0<Panel>, id: string, name: string, cssClass?: string, order?: number, requestedIndex?: number) {\n\t\tsuper(ctor, id, name, cssClass, order, requestedIndex);\n\t}\n}\n\nexport class PanelRegistry extends CompositeRegistry<Panel> {\n\tprivate defaultPanelId: string | undefined;\n\n\t/**\n\t * Registers a panel to the platform.\n\t */\n\tregisterPanel(descriptor: PanelDescriptor): void {\n\t\tsuper.registerComposite(descriptor);\n\t}\n\n\t/**\n\t * Deregisters a panel to the platform.\n\t */\n\tderegisterPanel(id: string): void {\n\t\tsuper.deregisterComposite(id);\n\t}\n\n\t/**\n\t * Returns a panel by id.\n\t */\n\tgetPanel(id: string): PanelDescriptor | undefined {\n\t\treturn this.getComposite(id);\n\t}\n\n\t/**\n\t * Returns an array of registered panels known to the platform.\n\t */\n\tgetPanels(): PanelDescriptor[] {\n\t\treturn this.getComposites();\n\t}\n\n\t/**\n\t * Sets the id of the panel that should open on startup by default.\n\t */\n\tsetDefaultPanelId(id: string): void {\n\t\tthis.defaultPanelId = id;\n\t}\n\n\t/**\n\t * Gets the id of the panel that should open on startup by default.\n\t */\n\tgetDefaultPanelId(): string {\n\t\treturn assertIsDefined(this.defaultPanelId);\n\t}\n\n\t/**\n\t * Find out if a panel exists with the provided ID.\n\t */\n\thasPanel(id: string): boolean {\n\t\treturn this.getPanels().some(panel => panel.id === id);\n\t}\n}\n\nexport const Extensions = {\n\tPanels: 'workbench.contributions.panels'\n};\n\nRegistry.add(Extensions.Panels, new PanelRegistry());\n"]}