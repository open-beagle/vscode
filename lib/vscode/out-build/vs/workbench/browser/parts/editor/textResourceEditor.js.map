{"version":3,"sources":["vs/workbench/browser/parts/editor/textResourceEditor.ts"],"names":[],"mappings":"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","file":"textResourceEditor.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { assertIsDefined, isFunction, withNullAsUndefined } from 'vs/base/common/types';\nimport { ICodeEditor, getCodeEditor, IPasteEvent } from 'vs/editor/browser/editorBrowser';\nimport { TextEditorOptions, EditorInput, EditorOptions, IEditorOpenContext } from 'vs/workbench/common/editor';\nimport { ResourceEditorInput } from 'vs/workbench/common/editor/resourceEditorInput';\nimport { BaseTextEditorModel } from 'vs/workbench/common/editor/textEditorModel';\nimport { UntitledTextEditorInput } from 'vs/workbench/services/untitled/common/untitledTextEditorInput';\nimport { BaseTextEditor } from 'vs/workbench/browser/parts/editor/textEditor';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { ITextResourceConfigurationService } from 'vs/editor/common/services/textResourceConfigurationService';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { ScrollType, IEditor } from 'vs/editor/common/editorCommon';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { PLAINTEXT_MODE_ID } from 'vs/editor/common/modes/modesRegistry';\nimport { EditorOption, IEditorOptions } from 'vs/editor/common/config/editorOptions';\nimport { ModelConstants } from 'vs/editor/common/model';\n\n/**\n * An editor implementation that is capable of showing the contents of resource inputs. Uses\n * the TextEditor widget to show the contents.\n */\nexport class AbstractTextResourceEditor extends BaseTextEditor {\n\n\tconstructor(\n\t\tid: string,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@ITextResourceConfigurationService textResourceConfigurationService: ITextResourceConfigurationService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IEditorGroupsService editorGroupService: IEditorGroupsService,\n\t\t@IEditorService editorService: IEditorService\n\t) {\n\t\tsuper(id, telemetryService, instantiationService, storageService, textResourceConfigurationService, themeService, editorService, editorGroupService);\n\t}\n\n\toverride getTitle(): string | undefined {\n\t\tif (this.input) {\n\t\t\treturn this.input.getName();\n\t\t}\n\n\t\treturn localize('textEditor', \"Text Editor\");\n\t}\n\n\toverride async setInput(input: EditorInput, options: EditorOptions | undefined, context: IEditorOpenContext, token: CancellationToken): Promise<void> {\n\n\t\t// Remember view settings if input changes\n\t\tthis.saveTextResourceEditorViewState(this.input);\n\n\t\t// Set input and resolve\n\t\tawait super.setInput(input, options, context, token);\n\t\tconst resolvedModel = await input.resolve();\n\n\t\t// Check for cancellation\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Assert Model instance\n\t\tif (!(resolvedModel instanceof BaseTextEditorModel)) {\n\t\t\tthrow new Error('Unable to open file as text');\n\t\t}\n\n\t\t// Set Editor Model\n\t\tconst textEditor = assertIsDefined(this.getControl());\n\t\tconst textEditorModel = resolvedModel.textEditorModel;\n\t\ttextEditor.setModel(textEditorModel);\n\n\t\t// Apply Options from TextOptions\n\t\tlet optionsGotApplied = false;\n\t\tconst textOptions = <TextEditorOptions>options;\n\t\tif (textOptions && isFunction(textOptions.apply)) {\n\t\t\toptionsGotApplied = textOptions.apply(textEditor, ScrollType.Immediate);\n\t\t}\n\n\t\t// Otherwise restore View State unless disabled via settings\n\t\tif (!optionsGotApplied && this.shouldRestoreTextEditorViewState(input, context)) {\n\t\t\tthis.restoreTextResourceEditorViewState(input, textEditor);\n\t\t}\n\n\t\t// Since the resolved model provides information about being readonly\n\t\t// or not, we apply it here to the editor even though the editor input\n\t\t// was already asked for being readonly or not. The rationale is that\n\t\t// a resolved model might have more specific information about being\n\t\t// readonly or not that the input did not have.\n\t\ttextEditor.updateOptions({ readOnly: resolvedModel.isReadonly() });\n\t}\n\n\tprivate restoreTextResourceEditorViewState(editor: EditorInput, control: IEditor) {\n\t\tif (editor instanceof UntitledTextEditorInput || editor instanceof ResourceEditorInput) {\n\t\t\tconst viewState = this.loadTextEditorViewState(editor.resource);\n\t\t\tif (viewState) {\n\t\t\t\tcontrol.restoreViewState(viewState);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Reveals the last line of this editor if it has a model set.\n\t */\n\trevealLastLine(): void {\n\t\tconst codeEditor = <ICodeEditor>this.getControl();\n\t\tconst model = codeEditor.getModel();\n\n\t\tif (model) {\n\t\t\tconst lastLine = model.getLineCount();\n\t\t\tcodeEditor.revealPosition({ lineNumber: lastLine, column: model.getLineMaxColumn(lastLine) }, ScrollType.Smooth);\n\t\t}\n\t}\n\n\toverride clearInput(): void {\n\n\t\t// Keep editor view state in settings to restore when coming back\n\t\tthis.saveTextResourceEditorViewState(this.input);\n\n\t\t// Clear Model\n\t\tconst textEditor = this.getControl();\n\t\tif (textEditor) {\n\t\t\ttextEditor.setModel(null);\n\t\t}\n\n\t\tsuper.clearInput();\n\t}\n\n\tprotected override saveState(): void {\n\n\t\t// Save View State (only for untitled)\n\t\tif (this.input instanceof UntitledTextEditorInput) {\n\t\t\tthis.saveTextResourceEditorViewState(this.input);\n\t\t}\n\n\t\tsuper.saveState();\n\t}\n\n\tprivate saveTextResourceEditorViewState(input: EditorInput | undefined): void {\n\t\tif (!(input instanceof UntitledTextEditorInput) && !(input instanceof ResourceEditorInput)) {\n\t\t\treturn; // only enabled for untitled and resource inputs\n\t\t}\n\n\t\tconst resource = input.resource;\n\n\t\t// Clear view state if input is disposed\n\t\tif (input.isDisposed()) {\n\t\t\tsuper.clearTextEditorViewState([resource]);\n\t\t}\n\n\t\t// Otherwise save it\n\t\telse {\n\t\t\tsuper.saveTextEditorViewState(resource, input);\n\t\t}\n\t}\n}\n\nexport class TextResourceEditor extends AbstractTextResourceEditor {\n\n\tstatic readonly ID = 'workbench.editors.textResourceEditor';\n\n\tconstructor(\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@ITextResourceConfigurationService textResourceConfigurationService: ITextResourceConfigurationService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IEditorGroupsService editorGroupService: IEditorGroupsService,\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@IModeService private readonly modeService: IModeService\n\t) {\n\t\tsuper(TextResourceEditor.ID, telemetryService, instantiationService, storageService, textResourceConfigurationService, themeService, editorGroupService, editorService);\n\t}\n\n\tprotected override createEditorControl(parent: HTMLElement, configuration: IEditorOptions): IEditor {\n\t\tconst control = super.createEditorControl(parent, configuration);\n\n\t\t// Install a listener for paste to update this editors\n\t\t// language mode if the paste includes a specific mode\n\t\tconst codeEditor = getCodeEditor(control);\n\t\tif (codeEditor) {\n\t\t\tthis._register(codeEditor.onDidPaste(e => this.onDidEditorPaste(e, codeEditor)));\n\t\t}\n\n\t\treturn control;\n\t}\n\n\tprivate onDidEditorPaste(e: IPasteEvent, codeEditor: ICodeEditor): void {\n\t\tif (this.input instanceof UntitledTextEditorInput && this.input.model.hasModeSetExplicitly) {\n\t\t\treturn; // do not override mode if it was set explicitly\n\t\t}\n\n\t\tif (e.range.startLineNumber !== 1 || e.range.startColumn !== 1) {\n\t\t\treturn; // only when pasting into first line, first column (= empty document)\n\t\t}\n\n\t\tif (codeEditor.getOption(EditorOption.readOnly)) {\n\t\t\treturn; // not for readonly editors\n\t\t}\n\n\t\tconst textModel = codeEditor.getModel();\n\t\tif (!textModel) {\n\t\t\treturn; // require a live model\n\t\t}\n\n\t\tconst currentMode = textModel.getModeId();\n\t\tif (currentMode !== PLAINTEXT_MODE_ID) {\n\t\t\treturn; // require current mode to be unspecific\n\t\t}\n\n\t\tlet candidateMode: string | undefined = undefined;\n\n\t\t// A mode is provided via the paste event so text was copied using\n\t\t// VSCode. As such we trust this mode and use it if specific\n\t\tif (e.mode) {\n\t\t\tcandidateMode = e.mode;\n\t\t}\n\n\t\t// A mode was not provided, so the data comes from outside VSCode\n\t\t// We can still try to guess a good mode from the first line if\n\t\t// the paste changed the first line\n\t\telse {\n\t\t\tcandidateMode = withNullAsUndefined(this.modeService.getModeIdByFilepathOrFirstLine(textModel.uri, textModel.getLineContent(1).substr(0, ModelConstants.FIRST_LINE_DETECTION_LENGTH_LIMIT)));\n\t\t}\n\n\t\t// Finally apply mode to model if specified\n\t\tif (candidateMode !== PLAINTEXT_MODE_ID) {\n\t\t\tthis.modelService.setMode(textModel, this.modeService.create(candidateMode));\n\t\t}\n\t}\n}\n"]}