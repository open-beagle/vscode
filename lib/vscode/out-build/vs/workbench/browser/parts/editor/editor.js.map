{"version":3,"file":"editor.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/browser/parts/editor/editor.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAiBnF,QAAA,6BAA6B,GAAG,IAAI,eAAS,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;IACvD,QAAA,6BAA6B,GAAG,IAAI,eAAS,CAAC,MAAM,CAAC,iBAAiB,EAAE,MAAM,CAAC,iBAAiB,CAAC,CAAC;IAElG,QAAA,2BAA2B,GAAuB;QAC9D,QAAQ,EAAE,IAAI;QACd,qBAAqB,EAAE,KAAK;QAC5B,cAAc,EAAE,OAAO;QACvB,SAAS,EAAE,KAAK;QAChB,eAAe,EAAE,QAAQ;QACzB,oBAAoB,EAAE,SAAS;QAC/B,2BAA2B,EAAE,IAAI;QACjC,SAAS,EAAE,IAAI;QACf,QAAQ,EAAE,IAAI;QACd,aAAa,EAAE,IAAI;QACnB,eAAe,EAAE,OAAO;QACxB,uBAAuB,EAAE,OAAO;QAChC,gBAAgB,EAAE,IAAI;QACtB,WAAW,EAAE,SAAS;QACtB,WAAW,EAAE,YAAY;QACzB,kBAAkB,EAAE,IAAI;KACxB,CAAC;IAEF,SAAgB,wBAAwB,CAAC,KAAgC;QACxE,OAAO,KAAK,CAAC,oBAAoB,CAAC,kBAAkB,CAAC,IAAI,KAAK,CAAC,oBAAoB,CAAC,qBAAqB,CAAC,CAAC;IAC5G,CAAC;IAFD,4DAEC;IAED,SAAgB,oBAAoB,CAAC,oBAA2C,EAAE,YAA2B;;QAC5G,MAAM,OAAO,mCACT,mCAA2B,KAC9B,QAAQ,EAAE,YAAY,CAAC,gBAAgB,EAAE,CAAC,YAAY,GACtD,CAAC;QAEF,MAAM,MAAM,GAAG,oBAAoB,CAAC,QAAQ,EAAiC,CAAC;QAC9E,IAAI,MAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,SAAS,0CAAE,MAAM,EAAE;YAC9B,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;SAChD;QAED,OAAO,OAAO,CAAC;IAChB,CAAC;IAZD,oDAYC;IAyED,SAAgB,0BAA0B,CAAC,KAAmB,EAAE,oBAAmC,EAAE,aAA6B;QACjI,MAAM,qBAAqB,GAAG,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAA,GAAA,0BAAU,CAAA,CAAC,KAAK,CAAC,gBAAgB,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QACnH,IAAI,qBAAqB,EAAE;YAC1B,IAAI,CAAC,oBAAoB,IAAI,oBAAoB,CAAC,OAAO,CAAC,KAAK,CAAC,YAAY,CAAC,EAAE;gBAC9E,OAAO,0BAAiB,CAAC,UAAU,CAAC,qBAAqB,EAAE,aAAa,CAAC,CAAC;aAC1E;SACD;QAED,OAAO,aAAa,IAAI,IAAI,sBAAa,EAAE,CAAC;IAC7C,CAAC;IATD,gEASC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { GroupIdentifier, IWorkbenchEditorConfiguration, EditorOptions, TextEditorOptions, IEditorInput, IEditorIdentifier, IEditorCloseEvent, IEditorPartOptions, IEditorPartOptionsChangeEvent, EditorInput } from 'vs/workbench/common/editor';\nimport { IEditorGroup, GroupDirection, IAddGroupOptions, IMergeGroupOptions, GroupsOrder, GroupsArrangement } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { Dimension } from 'vs/base/browser/dom';\nimport { Event } from 'vs/base/common/event';\nimport { IConfigurationChangeEvent, IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { ISerializableView } from 'vs/base/browser/ui/grid/grid';\nimport { getIEditor } from 'vs/editor/browser/editorBrowser';\nimport { IEditorService, IResourceEditorInputType } from 'vs/workbench/services/editor/common/editorService';\n\nexport interface IEditorPartCreationOptions {\n\trestorePreviousState: boolean;\n}\n\nexport const DEFAULT_EDITOR_MIN_DIMENSIONS = new Dimension(220, 70);\nexport const DEFAULT_EDITOR_MAX_DIMENSIONS = new Dimension(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n\nexport const DEFAULT_EDITOR_PART_OPTIONS: IEditorPartOptions = {\n\tshowTabs: true,\n\thighlightModifiedTabs: false,\n\ttabCloseButton: 'right',\n\ttabSizing: 'fit',\n\tpinnedTabSizing: 'normal',\n\ttitleScrollbarSizing: 'default',\n\tfocusRecentEditorAfterClose: true,\n\tshowIcons: true,\n\thasIcons: true, // 'vs-seti' is our default icon theme\n\tenablePreview: true,\n\topenPositioning: 'right',\n\topenSideBySideDirection: 'right',\n\tcloseEmptyGroups: true,\n\tlabelFormat: 'default',\n\tsplitSizing: 'distribute',\n\tsplitOnDragAndDrop: true\n};\n\nexport function impactsEditorPartOptions(event: IConfigurationChangeEvent): boolean {\n\treturn event.affectsConfiguration('workbench.editor') || event.affectsConfiguration('workbench.iconTheme');\n}\n\nexport function getEditorPartOptions(configurationService: IConfigurationService, themeService: IThemeService): IEditorPartOptions {\n\tconst options = {\n\t\t...DEFAULT_EDITOR_PART_OPTIONS,\n\t\thasIcons: themeService.getFileIconTheme().hasFileIcons\n\t};\n\n\tconst config = configurationService.getValue<IWorkbenchEditorConfiguration>();\n\tif (config?.workbench?.editor) {\n\t\tObject.assign(options, config.workbench.editor);\n\t}\n\n\treturn options;\n}\n\nexport interface IEditorGroupsAccessor {\n\n\treadonly groups: IEditorGroupView[];\n\treadonly activeGroup: IEditorGroupView;\n\n\treadonly partOptions: IEditorPartOptions;\n\treadonly onDidChangeEditorPartOptions: Event<IEditorPartOptionsChangeEvent>;\n\n\treadonly onDidVisibilityChange: Event<boolean>;\n\n\tgetGroup(identifier: GroupIdentifier): IEditorGroupView | undefined;\n\tgetGroups(order: GroupsOrder): IEditorGroupView[];\n\n\tactivateGroup(identifier: IEditorGroupView | GroupIdentifier): IEditorGroupView;\n\trestoreGroup(identifier: IEditorGroupView | GroupIdentifier): IEditorGroupView;\n\n\taddGroup(location: IEditorGroupView | GroupIdentifier, direction: GroupDirection, options?: IAddGroupOptions): IEditorGroupView;\n\tmergeGroup(group: IEditorGroupView | GroupIdentifier, target: IEditorGroupView | GroupIdentifier, options?: IMergeGroupOptions): IEditorGroupView;\n\n\tmoveGroup(group: IEditorGroupView | GroupIdentifier, location: IEditorGroupView | GroupIdentifier, direction: GroupDirection): IEditorGroupView;\n\tcopyGroup(group: IEditorGroupView | GroupIdentifier, location: IEditorGroupView | GroupIdentifier, direction: GroupDirection): IEditorGroupView;\n\n\tremoveGroup(group: IEditorGroupView | GroupIdentifier): void;\n\n\tarrangeGroups(arrangement: GroupsArrangement, target?: IEditorGroupView | GroupIdentifier): void;\n}\n\nexport interface IEditorGroupTitleHeight {\n\n\t/**\n\t * The overall height of the editor group title control.\n\t */\n\ttotal: number;\n\n\t/**\n\t * The height offset to e.g. use when drawing drop overlays.\n\t * This number may be smaller than `height` if the title control\n\t * decides to have an `offset` that is within the title area\n\t * (e.g. when breadcrumbs are enabled).\n\t */\n\toffset: number;\n}\n\nexport interface IEditorGroupView extends IDisposable, ISerializableView, IEditorGroup {\n\n\treadonly onDidFocus: Event<void>;\n\n\treadonly onDidOpenEditorFail: Event<IEditorInput>;\n\treadonly onDidCloseEditor: Event<IEditorCloseEvent>;\n\n\t/**\n\t * A promise that resolves when the group has been restored.\n\t *\n\t * For a group with active editor, the promise will resolve\n\t * when the active editor has finished to resolve.\n\t */\n\treadonly whenRestored: Promise<void>;\n\n\treadonly titleHeight: IEditorGroupTitleHeight;\n\n\treadonly isMinimized: boolean;\n\n\treadonly disposed: boolean;\n\n\tsetActive(isActive: boolean): void;\n\n\tnotifyIndexChanged(newIndex: number): void;\n\n\trelayout(): void;\n}\n\nexport function getActiveTextEditorOptions(group: IEditorGroup, expectedActiveEditor?: IEditorInput, presetOptions?: EditorOptions): EditorOptions {\n\tconst activeGroupCodeEditor = group.activeEditorPane ? getIEditor(group.activeEditorPane.getControl()) : undefined;\n\tif (activeGroupCodeEditor) {\n\t\tif (!expectedActiveEditor || expectedActiveEditor.matches(group.activeEditor)) {\n\t\t\treturn TextEditorOptions.fromEditor(activeGroupCodeEditor, presetOptions);\n\t\t}\n\t}\n\n\treturn presetOptions || new EditorOptions();\n}\n\n/**\n * A sub-interface of IEditorService to hide some workbench-core specific\n * events from clients.\n */\nexport interface EditorServiceImpl extends IEditorService {\n\n\t/**\n\t * Emitted when an editor failed to open.\n\t */\n\treadonly onDidOpenEditorFail: Event<IEditorIdentifier>;\n\n\t/**\n\t * Emitted when the list of most recently active editors change.\n\t */\n\treadonly onDidMostRecentlyActiveEditorsChange: Event<void>;\n\n\t/**\n\t * Override to return a typed `EditorInput`.\n\t */\n\tcreateEditorInput(input: IResourceEditorInputType): EditorInput;\n}\n"]}