{"version":3,"sources":["vs/workbench/browser/parts/editor/textDiffEditor.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAgChG;;OAEG;IACH,IAAa,cAAc,GAA3B,MAAa,cAAe,SAAQ,2BAAc;QAmBjD,YACoB,gBAAmC,EAC/B,oBAA2C,EACjD,cAA+B,EACb,oBAAuD,EAC1E,aAA6B,EAC9B,YAA2B,EACpB,kBAAwC,EAC/B,WAAyB;YAExD,KAAK,CAAC,cAAc,CAAC,EAAE,EAAE,gBAAgB,EAAE,oBAAoB,EAAE,cAAc,EAAE,oBAAoB,EAAE,YAAY,EAAE,aAAa,EAAE,kBAAkB,CAAC,CAAC;YAFzH,gBAAW,GAAX,WAAW,CAAc;YAtBxC,6BAAwB,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,2BAAe,EAAE,CAAC,CAAC;YA0BjF,yCAAyC;YACzC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,yCAAyC,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC9H,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,0CAA0C,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAChI,CAAC;QA3BD,IAAa,uBAAuB;YACnC,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;YAClC,IAAI,CAAC,OAAO,EAAE;gBACb,OAAO,SAAS,CAAC;aACjB;YAED,MAAM,cAAc,GAAG,OAAO,CAAC,iBAAiB,EAAE,CAAC;YACnD,MAAM,cAAc,GAAG,OAAO,CAAC,iBAAiB,EAAE,CAAC;YAEnD,OAAO,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,mBAAmB,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,+BAAkB,CAAC,CAAC,CAAC;QAC5I,CAAC;QAmBO,6BAA6B,CAAC,MAAc;;YACnD,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;YAClC,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;YAEzB,IAAI,OAAO,IAAI,KAAK,YAAY,iCAAe,EAAE;gBAChD,IAAI,CAAA,MAAA,KAAK,CAAC,aAAa,CAAC,QAAQ,0CAAE,MAAM,MAAK,MAAM,IAAI,CAAA,MAAA,KAAK,CAAC,aAAa,CAAC,QAAQ,0CAAE,MAAM,MAAK,MAAM,EAAE;oBACvG,OAAO,CAAC,aAAa,CAAC;wBACrB,QAAQ,EAAE,KAAK,CAAC,aAAa,CAAC,UAAU,EAAE;wBAC1C,gBAAgB,EAAE,CAAC,KAAK,CAAC,aAAa,CAAC,UAAU,EAAE;qBACnD,CAAC,CAAC;iBACH;aACD;QACF,CAAC;QAEkB,wBAAwB,CAAC,MAAoB;YAE/D,iFAAiF;YACjF,uEAAuE;YACvE,0EAA0E;YAC1E,IAAI,CAAC,oCAAoC,CAAC,MAAM,CAAC,CAAC;QACnD,CAAC;QAEQ,QAAQ;YAChB,IAAI,IAAI,CAAC,KAAK,EAAE;gBACf,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;aAC5B;YAED,OAAO,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAgB,EAAE,IAAkB,CAAC,CAAC;QACvD,CAAC;QAEQ,mBAAmB,CAAC,MAAmB,EAAE,aAAiC;YAClF,OAAO,IAAI,CAAC,oBAAoB,CAAC,cAAc,CAAC,mCAAgB,EAAE,MAAM,EAAE,aAAa,EAAE,EAAE,CAAC,CAAC;QAC9F,CAAC;QAEQ,KAAK,CAAC,QAAQ,CAAC,KAAkB,EAAE,OAAkC,EAAE,OAA2B,EAAE,KAAwB;;YAEpI,kCAAkC;YAClC,IAAI,CAAC,wBAAwB,CAAC,KAAK,EAAE,CAAC;YAEtC,8CAA8C;YAC9C,IAAI,CAAC,oCAAoC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAEtD,wBAAwB;YACxB,MAAM,KAAK,CAAC,QAAQ,CAAC,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;YAErD,IAAI;gBACH,MAAM,aAAa,GAAG,MAAM,KAAK,CAAC,OAAO,EAAE,CAAC;gBAE5C,yBAAyB;gBACzB,IAAI,KAAK,CAAC,uBAAuB,EAAE;oBAClC,OAAO,SAAS,CAAC;iBACjB;gBAED,wBAAwB;gBACxB,IAAI,CAAC,CAAC,aAAa,YAAY,yCAAmB,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,OAAO,CAAC,EAAE;oBACzF,OAAO,SAAS,CAAC;iBACjB;gBAED,mBAAmB;gBACnB,MAAM,UAAU,GAAG,CAAA,GAAA,uBAAe,CAAA,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;gBACtD,MAAM,uBAAuB,GAAG,aAAoC,CAAC;gBACrE,UAAU,CAAC,QAAQ,CAAC,CAAA,GAAA,2BAAmB,CAAA,CAAC,uBAAuB,CAAC,mBAAmB,CAAC,CAAC,CAAC;gBAEtF,iCAAiC;gBACjC,IAAI,iBAAiB,GAAG,KAAK,CAAC;gBAC9B,IAAI,OAAO,IAAI,CAAA,GAAA,kBAAU,CAAA,CAAqB,OAAQ,CAAC,KAAK,CAAC,EAAE;oBAC9D,iBAAiB,GAAuB,OAAQ,CAAC,KAAK,CAAC,UAAU,oBAAuB,CAAC;iBACzF;gBAED,4DAA4D;gBAC5D,IAAI,oBAAoB,GAAG,KAAK,CAAC;gBACjC,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,gCAAgC,CAAC,KAAK,EAAE,OAAO,CAAC,EAAE;oBAChF,oBAAoB,GAAG,IAAI,CAAC,8BAA8B,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;iBAC9E;gBAED,iBAAiB;gBACjB,IAAI,CAAC,aAAa,GAAG,IAAI,6BAAa,CAAC,UAAU,EAAE;oBAClD,iBAAiB,EAAE,CAAC,iBAAiB,IAAI,CAAC,oBAAoB,CAAC,6DAA6D;iBAC5H,CAAC,CAAC;gBACH,IAAI,CAAC,wBAAwB,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;gBAEtD,qEAAqE;gBACrE,sEAAsE;gBACtE,qEAAqE;gBACrE,oEAAoE;gBACpE,+CAA+C;gBAC/C,UAAU,CAAC,aAAa,CAAC;oBACxB,QAAQ,EAAE,MAAA,uBAAuB,CAAC,aAAa,0CAAE,UAAU,EAAE;oBAC7D,gBAAgB,EAAE,CAAC,CAAA,MAAA,uBAAuB,CAAC,aAAa,0CAAE,UAAU,EAAE,CAAA;iBACtE,CAAC,CAAC;aACH;YAAC,OAAO,KAAK,EAAE;gBAEf,oHAAoH;gBACpH,IAAI,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,OAAO,CAAC,EAAE;oBACvE,OAAO;iBACP;gBAED,MAAM,KAAK,CAAC;aACZ;QACF,CAAC;QAEO,8BAA8B,CAAC,MAAmB,EAAE,OAAoB;YAC/E,IAAI,MAAM,YAAY,iCAAe,EAAE;gBACtC,MAAM,QAAQ,GAAG,IAAI,CAAC,6BAA6B,CAAC,MAAM,CAAC,CAAC;gBAC5D,IAAI,QAAQ,EAAE;oBACb,MAAM,SAAS,GAAG,IAAI,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;oBACzD,IAAI,SAAS,EAAE;wBACd,OAAO,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC;wBAEpC,OAAO,IAAI,CAAC;qBACZ;iBACD;aACD;YAED,OAAO,KAAK,CAAC;QACd,CAAC;QAEO,YAAY,CAAC,KAAkB,EAAE,OAAkC;;YAC1E,IAAI,KAAK,YAAY,iCAAe,EAAE;gBACrC,MAAM,aAAa,GAAG,KAAK,CAAC,aAAa,CAAC;gBAC1C,MAAM,aAAa,GAAG,KAAK,CAAC,aAAa,CAAC;gBAE1C,MAAM,eAAe,GAAG,IAAI,CAAC,oBAAoB,CAAC,cAAc,CAAC,iCAAe,EAAE,KAAK,CAAC,OAAO,EAAE,EAAE,KAAK,CAAC,cAAc,EAAE,EAAE,aAAa,EAAE,aAAa,EAAE,IAAI,CAAC,CAAC;gBAE/J,4CAA4C;gBAC5C,MAAM,sBAAsB,GAAG,mBAAQ,CAAC,EAAE,CAA8B,yBAAgB,CAAC,oBAAoB,CAAC,CAAC,yBAAyB,EAAE,CAAC;gBAC3I,IAAI,sBAAsB,CAAC,iBAAiB,CAAC,aAAa,CAAC,EAAE;oBAC5D,aAAa,CAAC,oBAAoB,EAAE,CAAC;iBACrC;gBAED,IAAI,sBAAsB,CAAC,iBAAiB,CAAC,aAAa,CAAC,EAAE;oBAC5D,aAAa,CAAC,oBAAoB,EAAE,CAAC;iBACrC;gBAED,yDAAyD;gBACzD,sDAAsD;gBACtD,sDAAsD;gBACtD,+BAA+B;gBAC/B,MAAM,iBAAiB,GAAmB;oBACzC,UAAU,EAAE,yBAAgB,CAAC,QAAQ;oBACrC,MAAM,EAAE,MAAA,IAAI,CAAC,KAAK,0CAAE,QAAQ,CAAC,KAAK,CAAC;oBACnC,MAAM,EAAE,MAAA,IAAI,CAAC,KAAK,0CAAE,QAAQ,CAAC,KAAK,CAAC;iBACnC,CAAC;gBAEF,IAAI,OAAO,EAAE;oBACZ,OAAO,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC;iBACrC;qBAAM;oBACN,OAAO,GAAG,sBAAa,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;iBAClD;gBAED,0CAA0C;gBAC1C,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,eAAe,EAAE,OAAO,EAAE,CAAC,EAAE,IAAI,CAAC,KAAK,IAAI,4BAAY,CAAC,CAAC;gBAE1H,OAAO,IAAI,CAAC;aACZ;YAED,OAAO,KAAK,CAAC;QACd,CAAC;QAEkB,oBAAoB,CAAC,aAAmC;YAC1E,MAAM,mBAAmB,GAAG,KAAK,CAAC,oBAAoB,CAAC,aAAa,CAAC,CAAC;YAEtE,sEAAsE;YACtE,IAAI,CAAA,GAAA,gBAAQ,CAAA,CAAC,aAAa,CAAC,UAAU,CAAC,EAAE;gBACvC,MAAM,uBAAuB,GAAuB,CAAA,GAAA,mBAAS,CAAA,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gBAExF,gJAAgJ;gBAChJ,uBAAuB,CAAC,YAAY,GAAG,uBAAuB,CAAC,QAAQ,CAAC;gBACxE,OAAO,uBAAuB,CAAC,QAAQ,CAAC;gBAExC,gJAAgJ;gBAChJ,uBAAuB,CAAC,YAAY,GAAyC,uBAAuB,CAAC,QAAQ,CAAC;gBAC9G,OAAO,uBAAuB,CAAC,QAAQ,CAAC;gBAExC,MAAM,CAAC,MAAM,CAAC,mBAAmB,EAAE,uBAAuB,CAAC,CAAC;aAC5D;YAED,OAAO,mBAAmB,CAAC;QAC5B,CAAC;QAEkB,yBAAyB;YAC3C,MAAM,OAAO,GAAuB,KAAK,CAAC,yBAAyB,EAAE,CAAC;YAEtE,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,YAAY,iCAAe,IAAI,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,UAAU,EAAE,CAAC;YAClG,OAAO,CAAC,gBAAgB,GAAG,IAAI,CAAC,KAAK,YAAY,iCAAe,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,UAAU,EAAE,CAAC;YAC3G,OAAO,CAAC,oBAAoB,GAAG,KAAK,CAAC;YAErC,OAAO,OAAO,CAAC;QAChB,CAAC;QAIO,iBAAiB,CAAC,KAAsB;YAC/C,IAAI,CAAA,GAAA,eAAO,CAAA,CAAC,KAAK,CAAC,EAAE;gBACnB,MAAM,MAAM,GAAY,KAAK,CAAC;gBAE9B,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC;aAC3D;YAED,OAAgC,KAAM,CAAC,uBAAuB,2BAA2C,CAAC;QAC3G,CAAC;QAEQ,UAAU;YAElB,kCAAkC;YAClC,IAAI,CAAC,wBAAwB,CAAC,KAAK,EAAE,CAAC;YAEtC,6CAA6C;YAC7C,IAAI,CAAC,oCAAoC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAEtD,cAAc;YACd,MAAM,UAAU,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;YACrC,IAAI,UAAU,EAAE;gBACf,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;aAC1B;YAED,gBAAgB;YAChB,KAAK,CAAC,UAAU,EAAE,CAAC;QACpB,CAAC;QAED,gBAAgB;YACf,OAAO,IAAI,CAAC,aAAa,CAAC;QAC3B,CAAC;QAEQ,UAAU;YAClB,OAAO,KAAK,CAAC,UAAU,EAA6B,CAAC;QACtD,CAAC;QAEkB,uBAAuB,CAAC,QAAa;YACvD,OAAO,KAAK,CAAC,uBAAuB,CAAC,QAAQ,CAAyB,CAAC,CAAE,0CAA0C;QACpH,CAAC;QAEkB,SAAS;YAE3B,iCAAiC;YACjC,IAAI,CAAC,oCAAoC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAEtD,KAAK,CAAC,SAAS,EAAE,CAAC;QACnB,CAAC;QAEO,oCAAoC,CAAC,KAA+B;YAC3E,IAAI,CAAC,CAAC,KAAK,YAAY,iCAAe,CAAC,EAAE;gBACxC,OAAO,CAAC,wCAAwC;aAChD;YAED,MAAM,QAAQ,GAAG,IAAI,CAAC,6BAA6B,CAAC,KAAK,CAAC,CAAC;YAC3D,IAAI,CAAC,QAAQ,EAAE;gBACd,OAAO,CAAC,oCAAoC;aAC5C;YAED,sFAAsF;YACtF,IAAI,KAAK,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,gCAAgC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;gBAC1H,KAAK,CAAC,wBAAwB,CAAC,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;aACvD;YAED,oBAAoB;iBACf;gBACJ,KAAK,CAAC,uBAAuB,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;aAC/C;QACF,CAAC;QAEkB,2BAA2B,CAAC,QAAa;YAC3D,OAAO,IAAI,CAAC,+BAA+B,CAAC,QAAQ,CAAC,CAAC,CAAC,0CAA0C;QAClG,CAAC;QAEO,+BAA+B,CAAC,QAAa;YACpD,MAAM,OAAO,GAAG,CAAA,GAAA,uBAAe,CAAA,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;YACnD,MAAM,KAAK,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC;YACjC,IAAI,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;gBACjD,OAAO,IAAI,CAAC,CAAC,kCAAkC;aAC/C;YAED,MAAM,QAAQ,GAAG,IAAI,CAAC,6BAA6B,CAAC,KAAK,CAAC,CAAC;YAC3D,IAAI,CAAC,QAAQ,EAAE;gBACd,OAAO,IAAI,CAAC,CAAC,oEAAoE;aACjF;YAED,IAAI,CAAC,CAAA,GAAA,mBAAO,CAAA,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAE;gBACjC,OAAO,IAAI,CAAC,CAAC,qEAAqE;aAClF;YAED,OAAO,OAAO,CAAC,aAAa,EAAE,CAAC;QAChC,CAAC;QAEO,6BAA6B,CAAC,YAAgD;YACrF,IAAI,QAAyB,CAAC;YAC9B,IAAI,QAAyB,CAAC;YAE9B,IAAI,YAAY,YAAY,iCAAe,EAAE;gBAC5C,QAAQ,GAAG,YAAY,CAAC,aAAa,CAAC,QAAQ,CAAC;gBAC/C,QAAQ,GAAG,YAAY,CAAC,aAAa,CAAC,QAAQ,CAAC;aAC/C;iBAAM;gBACN,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC;gBACrC,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC;aACrC;YAED,IAAI,CAAC,QAAQ,IAAI,CAAC,QAAQ,EAAE;gBAC3B,OAAO,SAAS,CAAC;aACjB;YAED,gFAAgF;YAChF,OAAO,SAAG,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,CAAA,GAAA,wBAAkB,CAAA,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAA,GAAA,wBAAkB,CAAA,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QACnI,CAAC;KACD,CAAA;IAjVgB,iBAAE,GAAG,4BAAmB,CAAC;IAF7B,cAAc;QAoBxB,WAAA,6BAAiB,CAAA;QACjB,WAAA,qCAAqB,CAAA;QACrB,WAAA,yBAAe,CAAA;QACf,WAAA,oEAAiC,CAAA;QACjC,WAAA,8BAAc,CAAA;QACd,WAAA,4BAAa,CAAA;QACb,WAAA,0CAAoB,CAAA;QACpB,WAAA,oBAAY,CAAA;OA3BF,cAAc,CAmV1B;IAnVY,wCAAc","file":"textDiffEditor.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { deepClone } from 'vs/base/common/objects';\nimport { isFunction, isObject, isArray, assertIsDefined, withUndefinedAsNull } from 'vs/base/common/types';\nimport { IDiffEditor } from 'vs/editor/browser/editorBrowser';\nimport { IDiffEditorOptions, IEditorOptions as ICodeEditorOptions } from 'vs/editor/common/config/editorOptions';\nimport { BaseTextEditor, IEditorConfiguration } from 'vs/workbench/browser/parts/editor/textEditor';\nimport { TextEditorOptions, EditorInput, EditorOptions, TEXT_DIFF_EDITOR_ID, IEditorInputFactoryRegistry, EditorExtensions, ITextDiffEditorPane, IEditorInput, IEditorOpenContext } from 'vs/workbench/common/editor';\nimport { DiffEditorInput } from 'vs/workbench/common/editor/diffEditorInput';\nimport { DiffNavigator } from 'vs/editor/browser/widget/diffNavigator';\nimport { DiffEditorWidget } from 'vs/editor/browser/widget/diffEditorWidget';\nimport { TextDiffEditorModel } from 'vs/workbench/common/editor/textDiffEditorModel';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { ITextResourceConfigurationService } from 'vs/editor/common/services/textResourceConfigurationService';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { TextFileOperationError, TextFileOperationResult } from 'vs/workbench/services/textfile/common/textfiles';\nimport { ScrollType, IDiffEditorViewState, IDiffEditorModel } from 'vs/editor/common/editorCommon';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { URI } from 'vs/base/common/uri';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { IEditorService, ACTIVE_GROUP } from 'vs/workbench/services/editor/common/editorService';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { EditorActivation, IEditorOptions } from 'vs/platform/editor/common/editor';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { isEqual } from 'vs/base/common/resources';\nimport { multibyteAwareBtoa } from 'vs/base/browser/dom';\nimport { IFileService } from 'vs/platform/files/common/files';\n\n/**\n * The text editor that leverages the diff text editor for the editing experience.\n */\nexport class TextDiffEditor extends BaseTextEditor implements ITextDiffEditorPane {\n\n\tstatic readonly ID = TEXT_DIFF_EDITOR_ID;\n\n\tprivate diffNavigator: DiffNavigator | undefined;\n\tprivate readonly diffNavigatorDisposables = this._register(new DisposableStore());\n\n\toverride get scopedContextKeyService(): IContextKeyService | undefined {\n\t\tconst control = this.getControl();\n\t\tif (!control) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst originalEditor = control.getOriginalEditor();\n\t\tconst modifiedEditor = control.getModifiedEditor();\n\n\t\treturn (originalEditor.hasTextFocus() ? originalEditor : modifiedEditor).invokeWithinContext(accessor => accessor.get(IContextKeyService));\n\t}\n\n\tconstructor(\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@ITextResourceConfigurationService configurationService: ITextResourceConfigurationService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IEditorGroupsService editorGroupService: IEditorGroupsService,\n\t\t@IFileService private readonly fileService: IFileService\n\t) {\n\t\tsuper(TextDiffEditor.ID, telemetryService, instantiationService, storageService, configurationService, themeService, editorService, editorGroupService);\n\n\t\t// Listen to file system provider changes\n\t\tthis._register(this.fileService.onDidChangeFileSystemProviderCapabilities(e => this.onDidFileSystemProviderChange(e.scheme)));\n\t\tthis._register(this.fileService.onDidChangeFileSystemProviderRegistrations(e => this.onDidFileSystemProviderChange(e.scheme)));\n\t}\n\n\tprivate onDidFileSystemProviderChange(scheme: string): void {\n\t\tconst control = this.getControl();\n\t\tconst input = this.input;\n\n\t\tif (control && input instanceof DiffEditorInput) {\n\t\t\tif (input.originalInput.resource?.scheme === scheme || input.modifiedInput.resource?.scheme === scheme) {\n\t\t\t\tcontrol.updateOptions({\n\t\t\t\t\treadOnly: input.modifiedInput.isReadonly(),\n\t\t\t\t\toriginalEditable: !input.originalInput.isReadonly()\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected override onWillCloseEditorInGroup(editor: IEditorInput): void {\n\n\t\t// React to editors closing to preserve or clear view state. This needs to happen\n\t\t// in the onWillCloseEditor because at that time the editor has not yet\n\t\t// been disposed and we can safely persist the view state still as needed.\n\t\tthis.doSaveOrClearTextDiffEditorViewState(editor);\n\t}\n\n\toverride getTitle(): string {\n\t\tif (this.input) {\n\t\t\treturn this.input.getName();\n\t\t}\n\n\t\treturn localize('textDiffEditor', \"Text Diff Editor\");\n\t}\n\n\toverride createEditorControl(parent: HTMLElement, configuration: ICodeEditorOptions): IDiffEditor {\n\t\treturn this.instantiationService.createInstance(DiffEditorWidget, parent, configuration, {});\n\t}\n\n\toverride async setInput(input: EditorInput, options: EditorOptions | undefined, context: IEditorOpenContext, token: CancellationToken): Promise<void> {\n\n\t\t// Dispose previous diff navigator\n\t\tthis.diffNavigatorDisposables.clear();\n\n\t\t// Update/clear view settings if input changes\n\t\tthis.doSaveOrClearTextDiffEditorViewState(this.input);\n\n\t\t// Set input and resolve\n\t\tawait super.setInput(input, options, context, token);\n\n\t\ttry {\n\t\t\tconst resolvedModel = await input.resolve();\n\n\t\t\t// Check for cancellation\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\t// Assert Model Instance\n\t\t\tif (!(resolvedModel instanceof TextDiffEditorModel) && this.openAsBinary(input, options)) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\t// Set Editor Model\n\t\t\tconst diffEditor = assertIsDefined(this.getControl());\n\t\t\tconst resolvedDiffEditorModel = resolvedModel as TextDiffEditorModel;\n\t\t\tdiffEditor.setModel(withUndefinedAsNull(resolvedDiffEditorModel.textDiffEditorModel));\n\n\t\t\t// Apply Options from TextOptions\n\t\t\tlet optionsGotApplied = false;\n\t\t\tif (options && isFunction((<TextEditorOptions>options).apply)) {\n\t\t\t\toptionsGotApplied = (<TextEditorOptions>options).apply(diffEditor, ScrollType.Immediate);\n\t\t\t}\n\n\t\t\t// Otherwise restore View State unless disabled via settings\n\t\t\tlet hasPreviousViewState = false;\n\t\t\tif (!optionsGotApplied && this.shouldRestoreTextEditorViewState(input, context)) {\n\t\t\t\thasPreviousViewState = this.restoreTextDiffEditorViewState(input, diffEditor);\n\t\t\t}\n\n\t\t\t// Diff navigator\n\t\t\tthis.diffNavigator = new DiffNavigator(diffEditor, {\n\t\t\t\talwaysRevealFirst: !optionsGotApplied && !hasPreviousViewState // only reveal first change if we had no options or viewstate\n\t\t\t});\n\t\t\tthis.diffNavigatorDisposables.add(this.diffNavigator);\n\n\t\t\t// Since the resolved model provides information about being readonly\n\t\t\t// or not, we apply it here to the editor even though the editor input\n\t\t\t// was already asked for being readonly or not. The rationale is that\n\t\t\t// a resolved model might have more specific information about being\n\t\t\t// readonly or not that the input did not have.\n\t\t\tdiffEditor.updateOptions({\n\t\t\t\treadOnly: resolvedDiffEditorModel.modifiedModel?.isReadonly(),\n\t\t\t\toriginalEditable: !resolvedDiffEditorModel.originalModel?.isReadonly()\n\t\t\t});\n\t\t} catch (error) {\n\n\t\t\t// In case we tried to open a file and the response indicates that this is not a text file, fallback to binary diff.\n\t\t\tif (this.isFileBinaryError(error) && this.openAsBinary(input, options)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate restoreTextDiffEditorViewState(editor: EditorInput, control: IDiffEditor): boolean {\n\t\tif (editor instanceof DiffEditorInput) {\n\t\t\tconst resource = this.toDiffEditorViewStateResource(editor);\n\t\t\tif (resource) {\n\t\t\t\tconst viewState = this.loadTextEditorViewState(resource);\n\t\t\t\tif (viewState) {\n\t\t\t\t\tcontrol.restoreViewState(viewState);\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprivate openAsBinary(input: EditorInput, options: EditorOptions | undefined): boolean {\n\t\tif (input instanceof DiffEditorInput) {\n\t\t\tconst originalInput = input.originalInput;\n\t\t\tconst modifiedInput = input.modifiedInput;\n\n\t\t\tconst binaryDiffInput = this.instantiationService.createInstance(DiffEditorInput, input.getName(), input.getDescription(), originalInput, modifiedInput, true);\n\n\t\t\t// Forward binary flag to input if supported\n\t\t\tconst fileEditorInputFactory = Registry.as<IEditorInputFactoryRegistry>(EditorExtensions.EditorInputFactories).getFileEditorInputFactory();\n\t\t\tif (fileEditorInputFactory.isFileEditorInput(originalInput)) {\n\t\t\t\toriginalInput.setForceOpenAsBinary();\n\t\t\t}\n\n\t\t\tif (fileEditorInputFactory.isFileEditorInput(modifiedInput)) {\n\t\t\t\tmodifiedInput.setForceOpenAsBinary();\n\t\t\t}\n\n\t\t\t// Make sure to not steal away the currently active group\n\t\t\t// because we are triggering another openEditor() call\n\t\t\t// and do not control the initial intent that resulted\n\t\t\t// in us now opening as binary.\n\t\t\tconst preservingOptions: IEditorOptions = {\n\t\t\t\tactivation: EditorActivation.PRESERVE,\n\t\t\t\tpinned: this.group?.isPinned(input),\n\t\t\t\tsticky: this.group?.isSticky(input)\n\t\t\t};\n\n\t\t\tif (options) {\n\t\t\t\toptions.overwrite(preservingOptions);\n\t\t\t} else {\n\t\t\t\toptions = EditorOptions.create(preservingOptions);\n\t\t\t}\n\n\t\t\t// Replace this editor with the binary one\n\t\t\tthis.editorService.replaceEditors([{ editor: input, replacement: binaryDiffInput, options }], this.group || ACTIVE_GROUP);\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprotected override computeConfiguration(configuration: IEditorConfiguration): ICodeEditorOptions {\n\t\tconst editorConfiguration = super.computeConfiguration(configuration);\n\n\t\t// Handle diff editor specially by merging in diffEditor configuration\n\t\tif (isObject(configuration.diffEditor)) {\n\t\t\tconst diffEditorConfiguration: IDiffEditorOptions = deepClone(configuration.diffEditor);\n\n\t\t\t// User settings defines `diffEditor.codeLens`, but here we rename that to `diffEditor.diffCodeLens` to avoid collisions with `editor.codeLens`.\n\t\t\tdiffEditorConfiguration.diffCodeLens = diffEditorConfiguration.codeLens;\n\t\t\tdelete diffEditorConfiguration.codeLens;\n\n\t\t\t// User settings defines `diffEditor.wordWrap`, but here we rename that to `diffEditor.diffWordWrap` to avoid collisions with `editor.wordWrap`.\n\t\t\tdiffEditorConfiguration.diffWordWrap = <'off' | 'on' | 'inherit' | undefined>diffEditorConfiguration.wordWrap;\n\t\t\tdelete diffEditorConfiguration.wordWrap;\n\n\t\t\tObject.assign(editorConfiguration, diffEditorConfiguration);\n\t\t}\n\n\t\treturn editorConfiguration;\n\t}\n\n\tprotected override getConfigurationOverrides(): ICodeEditorOptions {\n\t\tconst options: IDiffEditorOptions = super.getConfigurationOverrides();\n\n\t\toptions.readOnly = this.input instanceof DiffEditorInput && this.input.modifiedInput.isReadonly();\n\t\toptions.originalEditable = this.input instanceof DiffEditorInput && !this.input.originalInput.isReadonly();\n\t\toptions.lineDecorationsWidth = '2ch';\n\n\t\treturn options;\n\t}\n\n\tprivate isFileBinaryError(error: Error[]): boolean;\n\tprivate isFileBinaryError(error: Error): boolean;\n\tprivate isFileBinaryError(error: Error | Error[]): boolean {\n\t\tif (isArray(error)) {\n\t\t\tconst errors = <Error[]>error;\n\n\t\t\treturn errors.some(error => this.isFileBinaryError(error));\n\t\t}\n\n\t\treturn (<TextFileOperationError>error).textFileOperationResult === TextFileOperationResult.FILE_IS_BINARY;\n\t}\n\n\toverride clearInput(): void {\n\n\t\t// Dispose previous diff navigator\n\t\tthis.diffNavigatorDisposables.clear();\n\n\t\t// Update/clear editor view state in settings\n\t\tthis.doSaveOrClearTextDiffEditorViewState(this.input);\n\n\t\t// Clear Model\n\t\tconst diffEditor = this.getControl();\n\t\tif (diffEditor) {\n\t\t\tdiffEditor.setModel(null);\n\t\t}\n\n\t\t// Pass to super\n\t\tsuper.clearInput();\n\t}\n\n\tgetDiffNavigator(): DiffNavigator | undefined {\n\t\treturn this.diffNavigator;\n\t}\n\n\toverride getControl(): IDiffEditor | undefined {\n\t\treturn super.getControl() as IDiffEditor | undefined;\n\t}\n\n\tprotected override loadTextEditorViewState(resource: URI): IDiffEditorViewState {\n\t\treturn super.loadTextEditorViewState(resource) as IDiffEditorViewState;  // overridden for text diff editor support\n\t}\n\n\tprotected override saveState(): void {\n\n\t\t// Update/clear editor view State\n\t\tthis.doSaveOrClearTextDiffEditorViewState(this.input);\n\n\t\tsuper.saveState();\n\t}\n\n\tprivate doSaveOrClearTextDiffEditorViewState(input: IEditorInput | undefined): void {\n\t\tif (!(input instanceof DiffEditorInput)) {\n\t\t\treturn; // only supported for diff editor inputs\n\t\t}\n\n\t\tconst resource = this.toDiffEditorViewStateResource(input);\n\t\tif (!resource) {\n\t\t\treturn; // unable to retrieve input resource\n\t\t}\n\n\t\t// Clear view state if input is disposed or we are configured to not storing any state\n\t\tif (input.isDisposed() || (!this.shouldRestoreTextEditorViewState(input) && (!this.group || !this.group.contains(input)))) {\n\t\t\tsuper.clearTextEditorViewState([resource], this.group);\n\t\t}\n\n\t\t// Otherwise save it\n\t\telse {\n\t\t\tsuper.saveTextEditorViewState(resource, input);\n\t\t}\n\t}\n\n\tprotected override retrieveTextEditorViewState(resource: URI): IDiffEditorViewState | null {\n\t\treturn this.retrieveTextDiffEditorViewState(resource); // overridden for text diff editor support\n\t}\n\n\tprivate retrieveTextDiffEditorViewState(resource: URI): IDiffEditorViewState | null {\n\t\tconst control = assertIsDefined(this.getControl());\n\t\tconst model = control.getModel();\n\t\tif (!model || !model.modified || !model.original) {\n\t\t\treturn null; // view state always needs a model\n\t\t}\n\n\t\tconst modelUri = this.toDiffEditorViewStateResource(model);\n\t\tif (!modelUri) {\n\t\t\treturn null; // model URI is needed to make sure we save the view state correctly\n\t\t}\n\n\t\tif (!isEqual(modelUri, resource)) {\n\t\t\treturn null; // prevent saving view state for a model that is not the expected one\n\t\t}\n\n\t\treturn control.saveViewState();\n\t}\n\n\tprivate toDiffEditorViewStateResource(modelOrInput: IDiffEditorModel | DiffEditorInput): URI | undefined {\n\t\tlet original: URI | undefined;\n\t\tlet modified: URI | undefined;\n\n\t\tif (modelOrInput instanceof DiffEditorInput) {\n\t\t\toriginal = modelOrInput.originalInput.resource;\n\t\t\tmodified = modelOrInput.modifiedInput.resource;\n\t\t} else {\n\t\t\toriginal = modelOrInput.original.uri;\n\t\t\tmodified = modelOrInput.modified.uri;\n\t\t}\n\n\t\tif (!original || !modified) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// create a URI that is the Base64 concatenation of original + modified resource\n\t\treturn URI.from({ scheme: 'diff', path: `${multibyteAwareBtoa(original.toString())}${multibyteAwareBtoa(modified.toString())}` });\n\t}\n}\n"]}