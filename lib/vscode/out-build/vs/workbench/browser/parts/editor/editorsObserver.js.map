{"version":3,"file":"editorsObserver.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/browser/parts/editor/editorsObserver.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IEditorInput, IEditorInputFactoryRegistry, IEditorIdentifier, GroupIdentifier, EditorExtensions, IEditorPartOptionsChangeEvent, EditorsOrder, SideBySideEditorInput } from 'vs/workbench/common/editor';\nimport { dispose, Disposable, DisposableStore } from 'vs/base/common/lifecycle';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { IEditorGroupsService, IEditorGroup, GroupChangeKind, GroupsOrder } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { coalesce } from 'vs/base/common/arrays';\nimport { LinkedMap, Touch, ResourceMap } from 'vs/base/common/map';\nimport { equals } from 'vs/base/common/objects';\nimport { IResourceEditorInputIdentifier } from 'vs/platform/editor/common/editor';\nimport { URI } from 'vs/base/common/uri';\n\ninterface ISerializedEditorsList {\n\tentries: ISerializedEditorIdentifier[];\n}\n\ninterface ISerializedEditorIdentifier {\n\tgroupId: GroupIdentifier;\n\tindex: number;\n}\n\n/**\n * A observer of opened editors across all editor groups by most recently used.\n * Rules:\n * - the last editor in the list is the one most recently activated\n * - the first editor in the list is the one that was activated the longest time ago\n * - an editor that opens inactive will be placed behind the currently active editor\n *\n * The observer may start to close editors based on the workbench.editor.limit setting.\n */\nexport class EditorsObserver extends Disposable {\n\n\tprivate static readonly STORAGE_KEY = 'editors.mru';\n\n\tprivate readonly keyMap = new Map<GroupIdentifier, Map<IEditorInput, IEditorIdentifier>>();\n\tprivate readonly mostRecentEditorsMap = new LinkedMap<IEditorIdentifier, IEditorIdentifier>();\n\tprivate readonly editorsPerResourceCounter = new ResourceMap<Map<string /* type ID */, number /* counter */>>();\n\n\tprivate readonly _onDidMostRecentlyActiveEditorsChange = this._register(new Emitter<void>());\n\treadonly onDidMostRecentlyActiveEditorsChange = this._onDidMostRecentlyActiveEditorsChange.event;\n\n\tget count(): number {\n\t\treturn this.mostRecentEditorsMap.size;\n\t}\n\n\tget editors(): IEditorIdentifier[] {\n\t\treturn [...this.mostRecentEditorsMap.values()];\n\t}\n\n\thasEditor(editor: IResourceEditorInputIdentifier): boolean {\n\t\tconst editors = this.editorsPerResourceCounter.get(editor.resource);\n\n\t\treturn editors?.has(editor.typeId) ?? false;\n\t}\n\n\thasEditors(resource: URI): boolean {\n\t\treturn this.editorsPerResourceCounter.has(resource);\n\t}\n\n\tconstructor(\n\t\t@IEditorGroupsService private editorGroupsService: IEditorGroupsService,\n\t\t@IStorageService private readonly storageService: IStorageService\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.storageService.onWillSaveState(() => this.saveState()));\n\t\tthis._register(this.editorGroupsService.onDidAddGroup(group => this.onGroupAdded(group)));\n\t\tthis._register(this.editorGroupsService.onDidChangeEditorPartOptions(e => this.onDidChangeEditorPartOptions(e)));\n\n\t\tthis.editorGroupsService.whenReady.then(() => this.loadState());\n\t}\n\n\tprivate onGroupAdded(group: IEditorGroup): void {\n\n\t\t// Make sure to add any already existing editor\n\t\t// of the new group into our list in LRU order\n\t\tconst groupEditorsMru = group.getEditors(EditorsOrder.MOST_RECENTLY_ACTIVE);\n\t\tfor (let i = groupEditorsMru.length - 1; i >= 0; i--) {\n\t\t\tthis.addMostRecentEditor(group, groupEditorsMru[i], false /* is not active */, true /* is new */);\n\t\t}\n\n\t\t// Make sure that active editor is put as first if group is active\n\t\tif (this.editorGroupsService.activeGroup === group && group.activeEditor) {\n\t\t\tthis.addMostRecentEditor(group, group.activeEditor, true /* is active */, false /* already added before */);\n\t\t}\n\n\t\t// Group Listeners\n\t\tthis.registerGroupListeners(group);\n\t}\n\n\tprivate registerGroupListeners(group: IEditorGroup): void {\n\t\tconst groupDisposables = new DisposableStore();\n\t\tgroupDisposables.add(group.onDidGroupChange(e => {\n\t\t\tswitch (e.kind) {\n\n\t\t\t\t// Group gets active: put active editor as most recent\n\t\t\t\tcase GroupChangeKind.GROUP_ACTIVE: {\n\t\t\t\t\tif (this.editorGroupsService.activeGroup === group && group.activeEditor) {\n\t\t\t\t\t\tthis.addMostRecentEditor(group, group.activeEditor, true /* is active */, false /* editor already opened */);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// Editor gets active: put active editor as most recent\n\t\t\t\t// if group is active, otherwise second most recent\n\t\t\t\tcase GroupChangeKind.EDITOR_ACTIVE: {\n\t\t\t\t\tif (e.editor) {\n\t\t\t\t\t\tthis.addMostRecentEditor(group, e.editor, this.editorGroupsService.activeGroup === group, false /* editor already opened */);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// Editor opens: put it as second most recent\n\t\t\t\t//\n\t\t\t\t// Also check for maximum allowed number of editors and\n\t\t\t\t// start to close oldest ones if needed.\n\t\t\t\tcase GroupChangeKind.EDITOR_OPEN: {\n\t\t\t\t\tif (e.editor) {\n\t\t\t\t\t\tthis.addMostRecentEditor(group, e.editor, false /* is not active */, true /* is new */);\n\t\t\t\t\t\tthis.ensureOpenedEditorsLimit({ groupId: group.id, editor: e.editor }, group.id);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// Editor closes: remove from recently opened\n\t\t\t\tcase GroupChangeKind.EDITOR_CLOSE: {\n\t\t\t\t\tif (e.editor) {\n\t\t\t\t\t\tthis.removeMostRecentEditor(group, e.editor);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\t// Make sure to cleanup on dispose\n\t\tEvent.once(group.onWillDispose)(() => dispose(groupDisposables));\n\t}\n\n\tprivate onDidChangeEditorPartOptions(event: IEditorPartOptionsChangeEvent): void {\n\t\tif (!equals(event.newPartOptions.limit, event.oldPartOptions.limit)) {\n\t\t\tconst activeGroup = this.editorGroupsService.activeGroup;\n\t\t\tlet exclude: IEditorIdentifier | undefined = undefined;\n\t\t\tif (activeGroup.activeEditor) {\n\t\t\t\texclude = { editor: activeGroup.activeEditor, groupId: activeGroup.id };\n\t\t\t}\n\n\t\t\tthis.ensureOpenedEditorsLimit(exclude);\n\t\t}\n\t}\n\n\tprivate addMostRecentEditor(group: IEditorGroup, editor: IEditorInput, isActive: boolean, isNew: boolean): void {\n\t\tconst key = this.ensureKey(group, editor);\n\t\tconst mostRecentEditor = this.mostRecentEditorsMap.first;\n\n\t\t// Active or first entry: add to end of map\n\t\tif (isActive || !mostRecentEditor) {\n\t\t\tthis.mostRecentEditorsMap.set(key, key, mostRecentEditor ? Touch.AsOld /* make first */ : undefined);\n\t\t}\n\n\t\t// Otherwise: insert before most recent\n\t\telse {\n\t\t\t// we have most recent editors. as such we\n\t\t\t// put this newly opened editor right before\n\t\t\t// the current most recent one because it cannot\n\t\t\t// be the most recently active one unless\n\t\t\t// it becomes active. but it is still more\n\t\t\t// active then any other editor in the list.\n\t\t\tthis.mostRecentEditorsMap.set(key, key, Touch.AsOld /* make first */);\n\t\t\tthis.mostRecentEditorsMap.set(mostRecentEditor, mostRecentEditor, Touch.AsOld /* make first */);\n\t\t}\n\n\t\t// Update in resource map if this is a new editor\n\t\tif (isNew) {\n\t\t\tthis.updateEditorResourcesMap(editor, true);\n\t\t}\n\n\t\t// Event\n\t\tthis._onDidMostRecentlyActiveEditorsChange.fire();\n\t}\n\n\tprivate updateEditorResourcesMap(editor: IEditorInput, add: boolean): void {\n\n\t\t// Distill the editor resource and type id with support\n\t\t// for side by side editor's primary side too.\n\t\tlet resource: URI | undefined = undefined;\n\t\tlet typeId: string | undefined = undefined;\n\t\tif (editor instanceof SideBySideEditorInput) {\n\t\t\tresource = editor.primary.resource;\n\t\t\ttypeId = editor.primary.typeId;\n\t\t} else {\n\t\t\tresource = editor.resource;\n\t\t\ttypeId = editor.typeId;\n\t\t}\n\n\t\tif (!resource) {\n\t\t\treturn; // require a resource\n\t\t}\n\n\t\t// Add entry\n\t\tif (add) {\n\t\t\tlet editorsPerResource = this.editorsPerResourceCounter.get(resource);\n\t\t\tif (!editorsPerResource) {\n\t\t\t\teditorsPerResource = new Map<string, number>();\n\t\t\t\tthis.editorsPerResourceCounter.set(resource, editorsPerResource);\n\t\t\t}\n\n\t\t\teditorsPerResource.set(typeId, (editorsPerResource.get(typeId) ?? 0) + 1);\n\t\t}\n\n\t\t// Remove entry\n\t\telse {\n\t\t\tconst editorsPerResource = this.editorsPerResourceCounter.get(resource);\n\t\t\tif (editorsPerResource) {\n\t\t\t\tconst counter = editorsPerResource.get(typeId) ?? 0;\n\t\t\t\tif (counter > 1) {\n\t\t\t\t\teditorsPerResource.set(typeId, counter - 1);\n\t\t\t\t} else {\n\t\t\t\t\teditorsPerResource.delete(typeId);\n\n\t\t\t\t\tif (editorsPerResource.size === 0) {\n\t\t\t\t\t\tthis.editorsPerResourceCounter.delete(resource);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate removeMostRecentEditor(group: IEditorGroup, editor: IEditorInput): void {\n\n\t\t// Update in resource map\n\t\tthis.updateEditorResourcesMap(editor, false);\n\n\t\t// Update in MRU list\n\t\tconst key = this.findKey(group, editor);\n\t\tif (key) {\n\n\t\t\t// Remove from most recent editors\n\t\t\tthis.mostRecentEditorsMap.delete(key);\n\n\t\t\t// Remove from key map\n\t\t\tconst map = this.keyMap.get(group.id);\n\t\t\tif (map && map.delete(key.editor) && map.size === 0) {\n\t\t\t\tthis.keyMap.delete(group.id);\n\t\t\t}\n\n\t\t\t// Event\n\t\t\tthis._onDidMostRecentlyActiveEditorsChange.fire();\n\t\t}\n\t}\n\n\tprivate findKey(group: IEditorGroup, editor: IEditorInput): IEditorIdentifier | undefined {\n\t\tconst groupMap = this.keyMap.get(group.id);\n\t\tif (!groupMap) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn groupMap.get(editor);\n\t}\n\n\tprivate ensureKey(group: IEditorGroup, editor: IEditorInput): IEditorIdentifier {\n\t\tlet groupMap = this.keyMap.get(group.id);\n\t\tif (!groupMap) {\n\t\t\tgroupMap = new Map();\n\n\t\t\tthis.keyMap.set(group.id, groupMap);\n\t\t}\n\n\t\tlet key = groupMap.get(editor);\n\t\tif (!key) {\n\t\t\tkey = { groupId: group.id, editor };\n\t\t\tgroupMap.set(editor, key);\n\t\t}\n\n\t\treturn key;\n\t}\n\n\tprivate async ensureOpenedEditorsLimit(exclude: IEditorIdentifier | undefined, groupId?: GroupIdentifier): Promise<void> {\n\t\tif (\n\t\t\t!this.editorGroupsService.partOptions.limit?.enabled ||\n\t\t\ttypeof this.editorGroupsService.partOptions.limit.value !== 'number' ||\n\t\t\tthis.editorGroupsService.partOptions.limit.value <= 0\n\t\t) {\n\t\t\treturn; // return early if not enabled or invalid\n\t\t}\n\n\t\tconst limit = this.editorGroupsService.partOptions.limit.value;\n\n\t\t// In editor group\n\t\tif (this.editorGroupsService.partOptions.limit?.perEditorGroup) {\n\n\t\t\t// For specific editor groups\n\t\t\tif (typeof groupId === 'number') {\n\t\t\t\tconst group = this.editorGroupsService.getGroup(groupId);\n\t\t\t\tif (group) {\n\t\t\t\t\tawait this.doEnsureOpenedEditorsLimit(limit, group.getEditors(EditorsOrder.MOST_RECENTLY_ACTIVE).map(editor => ({ editor, groupId })), exclude);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// For all editor groups\n\t\t\telse {\n\t\t\t\tfor (const group of this.editorGroupsService.groups) {\n\t\t\t\t\tawait this.ensureOpenedEditorsLimit(exclude, group.id);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Across all editor groups\n\t\telse {\n\t\t\tawait this.doEnsureOpenedEditorsLimit(limit, [...this.mostRecentEditorsMap.values()], exclude);\n\t\t}\n\t}\n\n\tprivate async doEnsureOpenedEditorsLimit(limit: number, mostRecentEditors: IEditorIdentifier[], exclude?: IEditorIdentifier): Promise<void> {\n\t\tif (limit >= mostRecentEditors.length) {\n\t\t\treturn; // only if opened editors exceed setting and is valid and enabled\n\t\t}\n\n\t\t// Extract least recently used editors that can be closed\n\t\tconst leastRecentlyClosableEditors = mostRecentEditors.reverse().filter(({ editor, groupId }) => {\n\t\t\tif (editor.isDirty() && !editor.isSaving()) {\n\t\t\t\treturn false; // not dirty editors (unless in the process of saving)\n\t\t\t}\n\n\t\t\tif (exclude && editor === exclude.editor && groupId === exclude.groupId) {\n\t\t\t\treturn false; // never the editor that should be excluded\n\t\t\t}\n\n\t\t\tif (this.editorGroupsService.getGroup(groupId)?.isSticky(editor)) {\n\t\t\t\treturn false; // never sticky editors\n\t\t\t}\n\n\t\t\treturn true;\n\t\t});\n\n\t\t// Close editors until we reached the limit again\n\t\tlet editorsToCloseCount = mostRecentEditors.length - limit;\n\t\tconst mapGroupToEditorsToClose = new Map<GroupIdentifier, IEditorInput[]>();\n\t\tfor (const { groupId, editor } of leastRecentlyClosableEditors) {\n\t\t\tlet editorsInGroupToClose = mapGroupToEditorsToClose.get(groupId);\n\t\t\tif (!editorsInGroupToClose) {\n\t\t\t\teditorsInGroupToClose = [];\n\t\t\t\tmapGroupToEditorsToClose.set(groupId, editorsInGroupToClose);\n\t\t\t}\n\n\t\t\teditorsInGroupToClose.push(editor);\n\t\t\teditorsToCloseCount--;\n\n\t\t\tif (editorsToCloseCount === 0) {\n\t\t\t\tbreak; // limit reached\n\t\t\t}\n\t\t}\n\n\t\tfor (const [groupId, editors] of mapGroupToEditorsToClose) {\n\t\t\tconst group = this.editorGroupsService.getGroup(groupId);\n\t\t\tif (group) {\n\t\t\t\tawait group.closeEditors(editors, { preserveFocus: true });\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate saveState(): void {\n\t\tif (this.mostRecentEditorsMap.isEmpty()) {\n\t\t\tthis.storageService.remove(EditorsObserver.STORAGE_KEY, StorageScope.WORKSPACE);\n\t\t} else {\n\t\t\tthis.storageService.store(EditorsObserver.STORAGE_KEY, JSON.stringify(this.serialize()), StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\t}\n\t}\n\n\tprivate serialize(): ISerializedEditorsList {\n\t\tconst registry = Registry.as<IEditorInputFactoryRegistry>(EditorExtensions.EditorInputFactories);\n\n\t\tconst entries = [...this.mostRecentEditorsMap.values()];\n\t\tconst mapGroupToSerializableEditorsOfGroup = new Map<IEditorGroup, IEditorInput[]>();\n\n\t\treturn {\n\t\t\tentries: coalesce(entries.map(({ editor, groupId }) => {\n\n\t\t\t\t// Find group for entry\n\t\t\t\tconst group = this.editorGroupsService.getGroup(groupId);\n\t\t\t\tif (!group) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\t// Find serializable editors of group\n\t\t\t\tlet serializableEditorsOfGroup = mapGroupToSerializableEditorsOfGroup.get(group);\n\t\t\t\tif (!serializableEditorsOfGroup) {\n\t\t\t\t\tserializableEditorsOfGroup = group.getEditors(EditorsOrder.SEQUENTIAL).filter(editor => {\n\t\t\t\t\t\tconst editorSerializer = registry.getEditorInputSerializer(editor);\n\n\t\t\t\t\t\treturn editorSerializer?.canSerialize(editor);\n\t\t\t\t\t});\n\t\t\t\t\tmapGroupToSerializableEditorsOfGroup.set(group, serializableEditorsOfGroup);\n\t\t\t\t}\n\n\t\t\t\t// Only store the index of the editor of that group\n\t\t\t\t// which can be undefined if the editor is not serializable\n\t\t\t\tconst index = serializableEditorsOfGroup.indexOf(editor);\n\t\t\t\tif (index === -1) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\treturn { groupId, index };\n\t\t\t}))\n\t\t};\n\t}\n\n\tprivate loadState(): void {\n\t\tconst serialized = this.storageService.get(EditorsObserver.STORAGE_KEY, StorageScope.WORKSPACE);\n\n\t\t// Previous state: Load editors map from persisted state\n\t\tif (serialized) {\n\t\t\tthis.deserialize(JSON.parse(serialized));\n\t\t}\n\n\t\t// No previous state: best we can do is add each editor\n\t\t// from oldest to most recently used editor group\n\t\telse {\n\t\t\tconst groups = this.editorGroupsService.getGroups(GroupsOrder.MOST_RECENTLY_ACTIVE);\n\t\t\tfor (let i = groups.length - 1; i >= 0; i--) {\n\t\t\t\tconst group = groups[i];\n\t\t\t\tconst groupEditorsMru = group.getEditors(EditorsOrder.MOST_RECENTLY_ACTIVE);\n\t\t\t\tfor (let i = groupEditorsMru.length - 1; i >= 0; i--) {\n\t\t\t\t\tthis.addMostRecentEditor(group, groupEditorsMru[i], true /* enforce as active to preserve order */, true /* is new */);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Ensure we listen on group changes for those that exist on startup\n\t\tfor (const group of this.editorGroupsService.groups) {\n\t\t\tthis.registerGroupListeners(group);\n\t\t}\n\t}\n\n\tprivate deserialize(serialized: ISerializedEditorsList): void {\n\t\tconst mapValues: [IEditorIdentifier, IEditorIdentifier][] = [];\n\n\t\tfor (const { groupId, index } of serialized.entries) {\n\n\t\t\t// Find group for entry\n\t\t\tconst group = this.editorGroupsService.getGroup(groupId);\n\t\t\tif (!group) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Find editor for entry\n\t\t\tconst editor = group.getEditorByIndex(index);\n\t\t\tif (!editor) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Make sure key is registered as well\n\t\t\tconst editorIdentifier = this.ensureKey(group, editor);\n\t\t\tmapValues.push([editorIdentifier, editorIdentifier]);\n\n\t\t\t// Update in resource map\n\t\t\tthis.updateEditorResourcesMap(editor, true);\n\t\t}\n\n\t\t// Fill map with deserialized values\n\t\tthis.mostRecentEditorsMap.fromJSON(mapValues);\n\t}\n}\n"]}