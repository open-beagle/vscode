{"version":3,"sources":["vs/workbench/browser/parts/editor/textEditor.ts"],"names":[],"mappings":"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","file":"textEditor.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { URI } from 'vs/base/common/uri';\nimport { distinct, deepClone } from 'vs/base/common/objects';\nimport { Event } from 'vs/base/common/event';\nimport { isObject, assertIsDefined, withNullAsUndefined, isFunction } from 'vs/base/common/types';\nimport { Dimension } from 'vs/base/browser/dom';\nimport { CodeEditorWidget } from 'vs/editor/browser/widget/codeEditorWidget';\nimport { EditorInput, EditorOptions, IEditorMemento, ITextEditorPane, TextEditorOptions, IEditorCloseEvent, IEditorInput, IEditorOpenContext, EditorResourceAccessor, SideBySideEditor } from 'vs/workbench/common/editor';\nimport { computeEditorAriaLabel } from 'vs/workbench/browser/editor';\nimport { EditorPane } from 'vs/workbench/browser/parts/editor/editorPane';\nimport { IEditorViewState, IEditor, ScrollType } from 'vs/editor/common/editorCommon';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { ITextResourceConfigurationService } from 'vs/editor/common/services/textResourceConfigurationService';\nimport { IEditorOptions } from 'vs/editor/common/config/editorOptions';\nimport { isCodeEditor, getCodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { IEditorGroupsService, IEditorGroup } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IExtUri } from 'vs/base/common/resources';\nimport { MutableDisposable } from 'vs/base/common/lifecycle';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\n\nexport interface IEditorConfiguration {\n\teditor: object;\n\tdiffEditor: object;\n}\n\n/**\n * The base class of editors that leverage the text editor for the editing experience. This class is only intended to\n * be subclassed and not instantiated.\n */\nexport abstract class BaseTextEditor extends EditorPane implements ITextEditorPane {\n\n\tstatic readonly TEXT_EDITOR_VIEW_STATE_PREFERENCE_KEY = 'textEditorViewState';\n\n\tprivate editorControl: IEditor | undefined;\n\tprivate editorContainer: HTMLElement | undefined;\n\tprivate hasPendingConfigurationChange: boolean | undefined;\n\tprivate lastAppliedEditorOptions?: IEditorOptions;\n\tprivate editorMemento: IEditorMemento<IEditorViewState>;\n\n\tprivate readonly groupListener = this._register(new MutableDisposable());\n\n\tprivate _instantiationService: IInstantiationService;\n\tprotected get instantiationService(): IInstantiationService { return this._instantiationService; }\n\tprotected set instantiationService(value: IInstantiationService) { this._instantiationService = value; }\n\n\toverride get scopedContextKeyService(): IContextKeyService | undefined {\n\t\treturn isCodeEditor(this.editorControl) ? this.editorControl.invokeWithinContext(accessor => accessor.get(IContextKeyService)) : undefined;\n\t}\n\n\tconstructor(\n\t\tid: string,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@ITextResourceConfigurationService protected readonly textResourceConfigurationService: ITextResourceConfigurationService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IEditorService protected editorService: IEditorService,\n\t\t@IEditorGroupsService protected editorGroupService: IEditorGroupsService\n\t) {\n\t\tsuper(id, telemetryService, themeService, storageService);\n\n\t\tthis._instantiationService = instantiationService;\n\n\t\tthis.editorMemento = this.getEditorMemento<IEditorViewState>(editorGroupService, BaseTextEditor.TEXT_EDITOR_VIEW_STATE_PREFERENCE_KEY, 100);\n\n\t\tthis._register(this.textResourceConfigurationService.onDidChangeConfiguration(() => {\n\t\t\tconst resource = this.getActiveResource();\n\t\t\tconst value = resource ? this.textResourceConfigurationService.getValue<IEditorConfiguration>(resource) : undefined;\n\n\t\t\treturn this.handleConfigurationChangeEvent(value);\n\t\t}));\n\n\t\t// ARIA: if a group is added or removed, update the editor's ARIA\n\t\t// label so that it appears in the label for when there are > 1 groups\n\t\tthis._register(Event.any(this.editorGroupService.onDidAddGroup, this.editorGroupService.onDidRemoveGroup)(() => {\n\t\t\tconst ariaLabel = this.computeAriaLabel();\n\n\t\t\tthis.editorContainer?.setAttribute('aria-label', ariaLabel);\n\t\t\tthis.editorControl?.updateOptions({ ariaLabel });\n\t\t}));\n\t}\n\n\tprotected handleConfigurationChangeEvent(configuration?: IEditorConfiguration): void {\n\t\tif (this.isVisible()) {\n\t\t\tthis.updateEditorConfiguration(configuration);\n\t\t} else {\n\t\t\tthis.hasPendingConfigurationChange = true;\n\t\t}\n\t}\n\n\tprivate consumePendingConfigurationChangeEvent(): void {\n\t\tif (this.hasPendingConfigurationChange) {\n\t\t\tthis.updateEditorConfiguration();\n\t\t\tthis.hasPendingConfigurationChange = false;\n\t\t}\n\t}\n\n\tprotected computeConfiguration(configuration: IEditorConfiguration): IEditorOptions {\n\n\t\t// Specific editor options always overwrite user configuration\n\t\tconst editorConfiguration: IEditorOptions = isObject(configuration.editor) ? deepClone(configuration.editor) : Object.create(null);\n\t\tObject.assign(editorConfiguration, this.getConfigurationOverrides());\n\n\t\t// ARIA label\n\t\teditorConfiguration.ariaLabel = this.computeAriaLabel();\n\n\t\treturn editorConfiguration;\n\t}\n\n\tprivate computeAriaLabel(): string {\n\t\treturn this._input ? computeEditorAriaLabel(this._input, undefined, this.group, this.editorGroupService.count) : localize('editor', \"Editor\");\n\t}\n\n\tprotected getConfigurationOverrides(): IEditorOptions {\n\t\treturn {\n\t\t\toverviewRulerLanes: 3,\n\t\t\tlineNumbersMinChars: 3,\n\t\t\tfixedOverflowWidgets: true,\n\t\t\treadOnly: this.input?.isReadonly(),\n\t\t\t// render problems even in readonly editors\n\t\t\t// https://github.com/microsoft/vscode/issues/89057\n\t\t\trenderValidationDecorations: 'on'\n\t\t};\n\t}\n\n\tprotected createEditor(parent: HTMLElement): void {\n\n\t\t// Editor for Text\n\t\tthis.editorContainer = parent;\n\t\tthis.editorControl = this._register(this.createEditorControl(parent, this.computeConfiguration(this.textResourceConfigurationService.getValue<IEditorConfiguration>(this.getActiveResource()))));\n\n\t\t// Model & Language changes\n\t\tconst codeEditor = getCodeEditor(this.editorControl);\n\t\tif (codeEditor) {\n\t\t\tthis._register(codeEditor.onDidChangeModelLanguage(() => this.updateEditorConfiguration()));\n\t\t\tthis._register(codeEditor.onDidChangeModel(() => this.updateEditorConfiguration()));\n\t\t}\n\t}\n\n\t/**\n\t * This method creates and returns the text editor control to be used. Subclasses can override to\n\t * provide their own editor control that should be used (e.g. a DiffEditor).\n\t *\n\t * The passed in configuration object should be passed to the editor control when creating it.\n\t */\n\tprotected createEditorControl(parent: HTMLElement, configuration: IEditorOptions): IEditor {\n\n\t\t// Use a getter for the instantiation service since some subclasses might use scoped instantiation services\n\t\treturn this.instantiationService.createInstance(CodeEditorWidget, parent, configuration, {});\n\t}\n\n\toverride async setInput(input: EditorInput, options: EditorOptions | undefined, context: IEditorOpenContext, token: CancellationToken): Promise<void> {\n\t\tawait super.setInput(input, options, context, token);\n\n\t\t// Update editor options after having set the input. We do this because there can be\n\t\t// editor input specific options (e.g. an ARIA label depending on the input showing)\n\t\tthis.updateEditorConfiguration();\n\n\t\t// Update aria label on editor\n\t\tconst editorContainer = assertIsDefined(this.editorContainer);\n\t\teditorContainer.setAttribute('aria-label', this.computeAriaLabel());\n\t}\n\n\toverride setOptions(options: EditorOptions | undefined): void {\n\t\tconst textOptions = options as TextEditorOptions;\n\t\tif (textOptions && isFunction(textOptions.apply)) {\n\t\t\tconst textEditor = assertIsDefined(this.getControl());\n\t\t\ttextOptions.apply(textEditor, ScrollType.Smooth);\n\t\t}\n\t}\n\n\tprotected override setEditorVisible(visible: boolean, group: IEditorGroup | undefined): void {\n\n\t\t// Pass on to Editor\n\t\tconst editorControl = assertIsDefined(this.editorControl);\n\t\tif (visible) {\n\t\t\tthis.consumePendingConfigurationChangeEvent();\n\t\t\teditorControl.onVisible();\n\t\t} else {\n\t\t\teditorControl.onHide();\n\t\t}\n\n\t\t// Listen to close events to trigger `onWillCloseEditorInGroup`\n\t\tthis.groupListener.value = group?.onWillCloseEditor(e => this.onWillCloseEditor(e));\n\n\t\tsuper.setEditorVisible(visible, group);\n\t}\n\n\tprivate onWillCloseEditor(e: IEditorCloseEvent): void {\n\t\tconst editor = e.editor;\n\t\tif (editor === this.input) {\n\t\t\tthis.onWillCloseEditorInGroup(editor);\n\t\t}\n\t}\n\n\tprotected onWillCloseEditorInGroup(editor: IEditorInput): void {\n\t\t// Subclasses can override\n\t}\n\n\toverride focus(): void {\n\n\t\t// Pass on to Editor\n\t\tconst editorControl = assertIsDefined(this.editorControl);\n\t\teditorControl.focus();\n\t}\n\n\tlayout(dimension: Dimension): void {\n\n\t\t// Pass on to Editor\n\t\tconst editorControl = assertIsDefined(this.editorControl);\n\t\teditorControl.layout(dimension);\n\t}\n\n\toverride getControl(): IEditor | undefined {\n\t\treturn this.editorControl;\n\t}\n\n\tgetViewState(): IEditorViewState | undefined {\n\t\tconst resource = this.input?.resource;\n\t\tif (resource) {\n\t\t\treturn withNullAsUndefined(this.retrieveTextEditorViewState(resource));\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprotected saveTextEditorViewState(resource: URI, cleanUpOnDispose?: IEditorInput): void {\n\t\tconst editorViewState = this.retrieveTextEditorViewState(resource);\n\t\tif (!editorViewState || !this.group) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.editorMemento.saveEditorState(this.group, resource, editorViewState);\n\n\t\tif (cleanUpOnDispose) {\n\t\t\tthis.editorMemento.clearEditorStateOnDispose(resource, cleanUpOnDispose);\n\t\t}\n\t}\n\n\tprotected shouldRestoreTextEditorViewState(editor: IEditorInput, context?: IEditorOpenContext): boolean {\n\n\t\t// new editor: check with workbench.editor.restoreViewState setting\n\t\tif (context?.newInGroup) {\n\t\t\treturn this.textResourceConfigurationService.getValue<boolean>(EditorResourceAccessor.getOriginalUri(editor, { supportSideBySide: SideBySideEditor.PRIMARY }), 'workbench.editor.restoreViewState') === false ? false : true /* restore by default */;\n\t\t}\n\n\t\t// existing editor: always restore viewstate\n\t\treturn true;\n\t}\n\n\tprotected retrieveTextEditorViewState(resource: URI): IEditorViewState | null {\n\t\tconst control = this.getControl();\n\t\tif (!isCodeEditor(control)) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst model = control.getModel();\n\t\tif (!model) {\n\t\t\treturn null; // view state always needs a model\n\t\t}\n\n\t\tconst modelUri = model.uri;\n\t\tif (!modelUri) {\n\t\t\treturn null; // model URI is needed to make sure we save the view state correctly\n\t\t}\n\n\t\tif (modelUri.toString() !== resource.toString()) {\n\t\t\treturn null; // prevent saving view state for a model that is not the expected one\n\t\t}\n\n\t\treturn control.saveViewState();\n\t}\n\n\tprotected loadTextEditorViewState(resource: URI): IEditorViewState | undefined {\n\t\treturn this.group ? this.editorMemento.loadEditorState(this.group, resource) : undefined;\n\t}\n\n\tprotected moveTextEditorViewState(source: URI, target: URI, comparer: IExtUri): void {\n\t\treturn this.editorMemento.moveEditorState(source, target, comparer);\n\t}\n\n\tprotected clearTextEditorViewState(resources: URI[], group?: IEditorGroup): void {\n\t\tfor (const resource of resources) {\n\t\t\tthis.editorMemento.clearEditorState(resource, group);\n\t\t}\n\t}\n\n\tprivate updateEditorConfiguration(configuration?: IEditorConfiguration): void {\n\t\tif (!configuration) {\n\t\t\tconst resource = this.getActiveResource();\n\t\t\tif (resource) {\n\t\t\t\tconfiguration = this.textResourceConfigurationService.getValue<IEditorConfiguration>(resource);\n\t\t\t}\n\t\t}\n\n\t\tif (!this.editorControl || !configuration) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst editorConfiguration = this.computeConfiguration(configuration);\n\n\t\t// Try to figure out the actual editor options that changed from the last time we updated the editor.\n\t\t// We do this so that we are not overwriting some dynamic editor settings (e.g. word wrap) that might\n\t\t// have been applied to the editor directly.\n\t\tlet editorSettingsToApply = editorConfiguration;\n\t\tif (this.lastAppliedEditorOptions) {\n\t\t\teditorSettingsToApply = distinct(this.lastAppliedEditorOptions, editorSettingsToApply);\n\t\t}\n\n\t\tif (Object.keys(editorSettingsToApply).length > 0) {\n\t\t\tthis.lastAppliedEditorOptions = editorConfiguration;\n\t\t\tthis.editorControl.updateOptions(editorSettingsToApply);\n\t\t}\n\t}\n\n\tprivate getActiveResource(): URI | undefined {\n\t\tconst codeEditor = getCodeEditor(this.editorControl);\n\t\tif (codeEditor) {\n\t\t\tconst model = codeEditor.getModel();\n\t\t\tif (model) {\n\t\t\t\treturn model.uri;\n\t\t\t}\n\t\t}\n\n\t\tif (this.input) {\n\t\t\treturn this.input.resource;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\toverride dispose(): void {\n\t\tthis.lastAppliedEditorOptions = undefined;\n\n\t\tsuper.dispose();\n\t}\n}\n"]}