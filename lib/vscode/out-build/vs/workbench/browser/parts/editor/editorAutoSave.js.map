{"version":3,"file":"editorAutoSave.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/browser/parts/editor/editorAutoSave.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { Disposable, DisposableStore, IDisposable, dispose, toDisposable } from 'vs/base/common/lifecycle';\nimport { IFilesConfigurationService, AutoSaveMode, IAutoSaveConfiguration } from 'vs/workbench/services/filesConfiguration/common/filesConfigurationService';\nimport { IHostService } from 'vs/workbench/services/host/browser/host';\nimport { SaveReason, IEditorIdentifier, IEditorInput, GroupIdentifier, ISaveOptions } from 'vs/workbench/common/editor';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { withNullAsUndefined } from 'vs/base/common/types';\nimport { IWorkingCopyService } from 'vs/workbench/services/workingCopy/common/workingCopyService';\nimport { IWorkingCopy, WorkingCopyCapabilities } from 'vs/workbench/services/workingCopy/common/workingCopy';\nimport { ILogService } from 'vs/platform/log/common/log';\n\nexport class EditorAutoSave extends Disposable implements IWorkbenchContribution {\n\n\t// Auto save: after delay\n\tprivate autoSaveAfterDelay: number | undefined;\n\tprivate readonly pendingAutoSavesAfterDelay = new Map<IWorkingCopy, IDisposable>();\n\n\t// Auto save: focus change & window change\n\tprivate lastActiveEditor: IEditorInput | undefined = undefined;\n\tprivate lastActiveGroupId: GroupIdentifier | undefined = undefined;\n\tprivate lastActiveEditorControlDisposable = this._register(new DisposableStore());\n\n\tconstructor(\n\t\t@IFilesConfigurationService private readonly filesConfigurationService: IFilesConfigurationService,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IEditorGroupsService private readonly editorGroupService: IEditorGroupsService,\n\t\t@IWorkingCopyService private readonly workingCopyService: IWorkingCopyService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tsuper();\n\n\t\t// Figure out initial auto save config\n\t\tthis.onAutoSaveConfigurationChange(filesConfigurationService.getAutoSaveConfiguration(), false);\n\n\t\t// Fill in initial dirty working copies\n\t\tfor (const dirtyWorkingCopy of this.workingCopyService.dirtyWorkingCopies) {\n\t\t\tthis.onDidRegister(dirtyWorkingCopy);\n\t\t}\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.hostService.onDidChangeFocus(focused => this.onWindowFocusChange(focused)));\n\t\tthis._register(this.editorService.onDidActiveEditorChange(() => this.onDidActiveEditorChange()));\n\t\tthis._register(this.filesConfigurationService.onAutoSaveConfigurationChange(config => this.onAutoSaveConfigurationChange(config, true)));\n\n\t\t// Working Copy events\n\t\tthis._register(this.workingCopyService.onDidRegister(workingCopy => this.onDidRegister(workingCopy)));\n\t\tthis._register(this.workingCopyService.onDidUnregister(workingCopy => this.onDidUnregister(workingCopy)));\n\t\tthis._register(this.workingCopyService.onDidChangeDirty(workingCopy => this.onDidChangeDirty(workingCopy)));\n\t\tthis._register(this.workingCopyService.onDidChangeContent(workingCopy => this.onDidChangeContent(workingCopy)));\n\t}\n\n\tprivate onWindowFocusChange(focused: boolean): void {\n\t\tif (!focused) {\n\t\t\tthis.maybeTriggerAutoSave(SaveReason.WINDOW_CHANGE);\n\t\t}\n\t}\n\n\tprivate onDidActiveEditorChange(): void {\n\n\t\t// Treat editor change like a focus change for our last active editor if any\n\t\tif (this.lastActiveEditor && typeof this.lastActiveGroupId === 'number') {\n\t\t\tthis.maybeTriggerAutoSave(SaveReason.FOCUS_CHANGE, { groupId: this.lastActiveGroupId, editor: this.lastActiveEditor });\n\t\t}\n\n\t\t// Remember as last active\n\t\tconst activeGroup = this.editorGroupService.activeGroup;\n\t\tconst activeEditor = this.lastActiveEditor = withNullAsUndefined(activeGroup.activeEditor);\n\t\tthis.lastActiveGroupId = activeGroup.id;\n\n\t\t// Dispose previous active control listeners\n\t\tthis.lastActiveEditorControlDisposable.clear();\n\n\t\t// Listen to focus changes on control for auto save\n\t\tconst activeEditorPane = this.editorService.activeEditorPane;\n\t\tif (activeEditor && activeEditorPane) {\n\t\t\tthis.lastActiveEditorControlDisposable.add(activeEditorPane.onDidBlur(() => {\n\t\t\t\tthis.maybeTriggerAutoSave(SaveReason.FOCUS_CHANGE, { groupId: activeGroup.id, editor: activeEditor });\n\t\t\t}));\n\t\t}\n\t}\n\n\tprivate maybeTriggerAutoSave(reason: SaveReason, editorIdentifier?: IEditorIdentifier): void {\n\t\tif (editorIdentifier && (editorIdentifier.editor.isReadonly() || editorIdentifier.editor.isUntitled())) {\n\t\t\treturn; // no auto save for readonly or untitled editors\n\t\t}\n\n\t\t// Determine if we need to save all. In case of a window focus change we also save if \n\t\t// auto save mode is configured to be ON_FOCUS_CHANGE (editor focus change)\n\t\tconst mode = this.filesConfigurationService.getAutoSaveMode();\n\t\tif (\n\t\t\t(reason === SaveReason.WINDOW_CHANGE && (mode === AutoSaveMode.ON_FOCUS_CHANGE || mode === AutoSaveMode.ON_WINDOW_CHANGE)) ||\n\t\t\t(reason === SaveReason.FOCUS_CHANGE && mode === AutoSaveMode.ON_FOCUS_CHANGE)\n\t\t) {\n\t\t\tthis.logService.trace(`[editor auto save] triggering auto save with reason ${reason}`);\n\n\t\t\tif (editorIdentifier) {\n\t\t\t\tthis.editorService.save(editorIdentifier, { reason });\n\t\t\t} else {\n\t\t\t\tthis.saveAllDirty({ reason });\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onAutoSaveConfigurationChange(config: IAutoSaveConfiguration, fromEvent: boolean): void {\n\n\t\t// Update auto save after delay config\n\t\tthis.autoSaveAfterDelay = (typeof config.autoSaveDelay === 'number') && config.autoSaveDelay > 0 ? config.autoSaveDelay : undefined;\n\n\t\t// Trigger a save-all when auto save is enabled\n\t\tif (fromEvent) {\n\t\t\tlet reason: SaveReason | undefined = undefined;\n\t\t\tswitch (this.filesConfigurationService.getAutoSaveMode()) {\n\t\t\t\tcase AutoSaveMode.ON_FOCUS_CHANGE:\n\t\t\t\t\treason = SaveReason.FOCUS_CHANGE;\n\t\t\t\t\tbreak;\n\t\t\t\tcase AutoSaveMode.ON_WINDOW_CHANGE:\n\t\t\t\t\treason = SaveReason.WINDOW_CHANGE;\n\t\t\t\t\tbreak;\n\t\t\t\tcase AutoSaveMode.AFTER_SHORT_DELAY:\n\t\t\t\tcase AutoSaveMode.AFTER_LONG_DELAY:\n\t\t\t\t\treason = SaveReason.AUTO;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (reason) {\n\t\t\t\tthis.saveAllDirty({ reason });\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate saveAllDirty(options?: ISaveOptions): void {\n\t\tfor (const workingCopy of this.workingCopyService.dirtyWorkingCopies) {\n\t\t\tif (!(workingCopy.capabilities & WorkingCopyCapabilities.Untitled)) {\n\t\t\t\tworkingCopy.save(options);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onDidRegister(workingCopy: IWorkingCopy): void {\n\t\tif (workingCopy.isDirty()) {\n\t\t\tthis.scheduleAutoSave(workingCopy);\n\t\t}\n\t}\n\n\tprivate onDidUnregister(workingCopy: IWorkingCopy): void {\n\t\tthis.discardAutoSave(workingCopy);\n\t}\n\n\tprivate onDidChangeDirty(workingCopy: IWorkingCopy): void {\n\t\tif (workingCopy.isDirty()) {\n\t\t\tthis.scheduleAutoSave(workingCopy);\n\t\t} else {\n\t\t\tthis.discardAutoSave(workingCopy);\n\t\t}\n\t}\n\n\tprivate onDidChangeContent(workingCopy: IWorkingCopy): void {\n\t\tif (workingCopy.isDirty()) {\n\t\t\t// this listener will make sure that the auto save is\n\t\t\t// pushed out for as long as the user is still changing\n\t\t\t// the content of the working copy.\n\t\t\tthis.scheduleAutoSave(workingCopy);\n\t\t}\n\t}\n\n\tprivate scheduleAutoSave(workingCopy: IWorkingCopy): void {\n\t\tif (typeof this.autoSaveAfterDelay !== 'number') {\n\t\t\treturn; // auto save after delay must be enabled\n\t\t}\n\n\t\tif (workingCopy.capabilities & WorkingCopyCapabilities.Untitled) {\n\t\t\treturn; // we never auto save untitled working copies\n\t\t}\n\n\t\t// Clear any running auto save operation\n\t\tthis.discardAutoSave(workingCopy);\n\n\t\tthis.logService.trace(`[editor auto save] scheduling auto save after ${this.autoSaveAfterDelay}ms`, workingCopy.resource.toString(true), workingCopy.typeId);\n\n\t\t// Schedule new auto save\n\t\tconst handle = setTimeout(() => {\n\n\t\t\t// Clear disposable\n\t\t\tthis.pendingAutoSavesAfterDelay.delete(workingCopy);\n\n\t\t\t// Save if dirty\n\t\t\tif (workingCopy.isDirty()) {\n\t\t\t\tthis.logService.trace(`[editor auto save] running auto save`, workingCopy.resource.toString(true), workingCopy.typeId);\n\n\t\t\t\tworkingCopy.save({ reason: SaveReason.AUTO });\n\t\t\t}\n\t\t}, this.autoSaveAfterDelay);\n\n\t\t// Keep in map for disposal as needed\n\t\tthis.pendingAutoSavesAfterDelay.set(workingCopy, toDisposable(() => {\n\t\t\tthis.logService.trace(`[editor auto save] clearing pending auto save`, workingCopy.resource.toString(true), workingCopy.typeId);\n\n\t\t\tclearTimeout(handle);\n\t\t}));\n\t}\n\n\tprivate discardAutoSave(workingCopy: IWorkingCopy): void {\n\t\tdispose(this.pendingAutoSavesAfterDelay.get(workingCopy));\n\t\tthis.pendingAutoSavesAfterDelay.delete(workingCopy);\n\t}\n}\n"]}