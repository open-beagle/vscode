{"version":3,"file":"editorControl.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/browser/parts/editor/editorControl.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable, DisposableStore } from 'vs/base/common/lifecycle';\nimport { EditorExtensions, EditorInput, EditorOptions, IEditorOpenContext, IVisibleEditorPane } from 'vs/workbench/common/editor';\nimport { Dimension, show, hide } from 'vs/base/browser/dom';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IEditorRegistry, IEditorDescriptor } from 'vs/workbench/browser/editor';\nimport { IWorkbenchLayoutService } from 'vs/workbench/services/layout/browser/layoutService';\nimport { EditorPane } from 'vs/workbench/browser/parts/editor/editorPane';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IEditorProgressService, LongRunningOperation } from 'vs/platform/progress/common/progress';\nimport { IEditorGroupView, DEFAULT_EDITOR_MIN_DIMENSIONS, DEFAULT_EDITOR_MAX_DIMENSIONS } from 'vs/workbench/browser/parts/editor/editor';\nimport { Emitter } from 'vs/base/common/event';\nimport { assertIsDefined } from 'vs/base/common/types';\n\nexport interface IOpenEditorResult {\n\treadonly editorPane: EditorPane;\n\treadonly editorChanged: boolean;\n}\n\nexport class EditorControl extends Disposable {\n\n\tget minimumWidth() { return this._activeEditorPane?.minimumWidth ?? DEFAULT_EDITOR_MIN_DIMENSIONS.width; }\n\tget minimumHeight() { return this._activeEditorPane?.minimumHeight ?? DEFAULT_EDITOR_MIN_DIMENSIONS.height; }\n\tget maximumWidth() { return this._activeEditorPane?.maximumWidth ?? DEFAULT_EDITOR_MAX_DIMENSIONS.width; }\n\tget maximumHeight() { return this._activeEditorPane?.maximumHeight ?? DEFAULT_EDITOR_MAX_DIMENSIONS.height; }\n\n\tprivate readonly _onDidFocus = this._register(new Emitter<void>());\n\treadonly onDidFocus = this._onDidFocus.event;\n\n\tprivate _onDidChangeSizeConstraints = this._register(new Emitter<{ width: number; height: number; } | undefined>());\n\treadonly onDidChangeSizeConstraints = this._onDidChangeSizeConstraints.event;\n\n\tprivate _activeEditorPane: EditorPane | null = null;\n\tget activeEditorPane(): IVisibleEditorPane | null { return this._activeEditorPane as IVisibleEditorPane | null; }\n\n\tprivate readonly editorPanes: EditorPane[] = [];\n\n\tprivate readonly activeEditorPaneDisposables = this._register(new DisposableStore());\n\tprivate dimension: Dimension | undefined;\n\tprivate readonly editorOperation = this._register(new LongRunningOperation(this.editorProgressService));\n\n\tconstructor(\n\t\tprivate parent: HTMLElement,\n\t\tprivate groupView: IEditorGroupView,\n\t\t@IWorkbenchLayoutService private readonly layoutService: IWorkbenchLayoutService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IEditorProgressService private readonly editorProgressService: IEditorProgressService\n\t) {\n\t\tsuper();\n\t}\n\n\tasync openEditor(editor: EditorInput, options: EditorOptions | undefined, context: IEditorOpenContext): Promise<IOpenEditorResult> {\n\n\t\t// Editor pane\n\t\tconst descriptor = Registry.as<IEditorRegistry>(EditorExtensions.Editors).getEditor(editor);\n\t\tif (!descriptor) {\n\t\t\tthrow new Error(`No editor descriptor found for input id ${editor.typeId}`);\n\t\t}\n\t\tconst editorPane = this.doShowEditorPane(descriptor);\n\n\t\t// Set input\n\t\tconst editorChanged = await this.doSetInput(editorPane, editor, options, context);\n\t\treturn { editorPane, editorChanged };\n\t}\n\n\tprivate doShowEditorPane(descriptor: IEditorDescriptor): EditorPane {\n\n\t\t// Return early if the currently active editor pane can handle the input\n\t\tif (this._activeEditorPane && descriptor.describes(this._activeEditorPane)) {\n\t\t\treturn this._activeEditorPane;\n\t\t}\n\n\t\t// Hide active one first\n\t\tthis.doHideActiveEditorPane();\n\n\t\t// Create editor pane\n\t\tconst editorPane = this.doCreateEditorPane(descriptor);\n\n\t\t// Set editor as active\n\t\tthis.doSetActiveEditorPane(editorPane);\n\n\t\t// Show editor\n\t\tconst container = assertIsDefined(editorPane.getContainer());\n\t\tthis.parent.appendChild(container);\n\t\tshow(container);\n\n\t\t// Indicate to editor that it is now visible\n\t\teditorPane.setVisible(true, this.groupView);\n\n\t\t// Layout\n\t\tif (this.dimension) {\n\t\t\teditorPane.layout(this.dimension);\n\t\t}\n\n\t\treturn editorPane;\n\t}\n\n\tprivate doCreateEditorPane(descriptor: IEditorDescriptor): EditorPane {\n\n\t\t// Instantiate editor\n\t\tconst editorPane = this.doInstantiateEditorPane(descriptor);\n\n\t\t// Create editor container as needed\n\t\tif (!editorPane.getContainer()) {\n\t\t\tconst editorPaneContainer = document.createElement('div');\n\t\t\teditorPaneContainer.classList.add('editor-instance');\n\t\t\teditorPaneContainer.setAttribute('data-editor-id', descriptor.getId());\n\n\t\t\teditorPane.create(editorPaneContainer);\n\t\t}\n\n\t\treturn editorPane;\n\t}\n\n\tprivate doInstantiateEditorPane(descriptor: IEditorDescriptor): EditorPane {\n\n\t\t// Return early if already instantiated\n\t\tconst existingEditorPane = this.editorPanes.find(editorPane => descriptor.describes(editorPane));\n\t\tif (existingEditorPane) {\n\t\t\treturn existingEditorPane;\n\t\t}\n\n\t\t// Otherwise instantiate new\n\t\tconst editorPane = this._register(descriptor.instantiate(this.instantiationService));\n\t\tthis.editorPanes.push(editorPane);\n\n\t\treturn editorPane;\n\t}\n\n\tprivate doSetActiveEditorPane(editorPane: EditorPane | null) {\n\t\tthis._activeEditorPane = editorPane;\n\n\t\t// Clear out previous active editor pane listeners\n\t\tthis.activeEditorPaneDisposables.clear();\n\n\t\t// Listen to editor pane changes\n\t\tif (editorPane) {\n\t\t\tthis.activeEditorPaneDisposables.add(editorPane.onDidChangeSizeConstraints(e => this._onDidChangeSizeConstraints.fire(e)));\n\t\t\tthis.activeEditorPaneDisposables.add(editorPane.onDidFocus(() => this._onDidFocus.fire()));\n\t\t}\n\n\t\t// Indicate that size constraints could have changed due to new editor\n\t\tthis._onDidChangeSizeConstraints.fire(undefined);\n\t}\n\n\tprivate async doSetInput(editorPane: EditorPane, editor: EditorInput, options: EditorOptions | undefined, context: IEditorOpenContext): Promise<boolean> {\n\n\t\t// If the input did not change, return early and only apply the options\n\t\t// unless the options instruct us to force open it even if it is the same\n\t\tconst forceReload = options?.forceReload;\n\t\tconst inputMatches = editorPane.input && editorPane.input.matches(editor);\n\t\tif (inputMatches && !forceReload) {\n\n\t\t\t// Forward options\n\t\t\teditorPane.setOptions(options);\n\n\t\t\t// Still focus as needed\n\t\t\tconst focus = !options || !options.preserveFocus;\n\t\t\tif (focus) {\n\t\t\t\teditorPane.focus();\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\t// Show progress while setting input after a certain timeout. If the workbench is opening\n\t\t// be more relaxed about progress showing by increasing the delay a little bit to reduce flicker.\n\t\tconst operation = this.editorOperation.start(this.layoutService.isRestored() ? 800 : 3200);\n\n\t\t// Call into editor pane\n\t\tconst editorWillChange = !inputMatches;\n\t\ttry {\n\t\t\tawait editorPane.setInput(editor, options, context, operation.token);\n\n\t\t\t// Focus (unless prevented or another operation is running)\n\t\t\tif (operation.isCurrent()) {\n\t\t\t\tconst focus = !options || !options.preserveFocus;\n\t\t\t\tif (focus) {\n\t\t\t\t\teditorPane.focus();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn editorWillChange;\n\t\t} finally {\n\t\t\toperation.stop();\n\t\t}\n\t}\n\n\tprivate doHideActiveEditorPane(): void {\n\t\tif (!this._activeEditorPane) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Stop any running operation\n\t\tthis.editorOperation.stop();\n\n\t\t// Indicate to editor pane before removing the editor from\n\t\t// the DOM to give a chance to persist certain state that\n\t\t// might depend on still being the active DOM element.\n\t\tthis._activeEditorPane.clearInput();\n\t\tthis._activeEditorPane.setVisible(false, this.groupView);\n\n\t\t// Remove editor pane from parent\n\t\tconst editorPaneContainer = this._activeEditorPane.getContainer();\n\t\tif (editorPaneContainer) {\n\t\t\tthis.parent.removeChild(editorPaneContainer);\n\t\t\thide(editorPaneContainer);\n\t\t}\n\n\t\t// Clear active editor pane\n\t\tthis.doSetActiveEditorPane(null);\n\t}\n\n\tcloseEditor(editor: EditorInput): void {\n\t\tif (this._activeEditorPane && editor.matches(this._activeEditorPane.input)) {\n\t\t\tthis.doHideActiveEditorPane();\n\t\t}\n\t}\n\n\tsetVisible(visible: boolean): void {\n\t\tthis._activeEditorPane?.setVisible(visible, this.groupView);\n\t}\n\n\tlayout(dimension: Dimension): void {\n\t\tthis.dimension = dimension;\n\n\t\tthis._activeEditorPane?.layout(dimension);\n\t}\n}\n"]}