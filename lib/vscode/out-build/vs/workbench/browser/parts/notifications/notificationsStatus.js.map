{"version":3,"sources":["vs/workbench/browser/parts/notifications/notificationsStatus.ts"],"names":[],"mappings":"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","file":"notificationsStatus.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { INotificationsModel, INotificationChangeEvent, NotificationChangeType, IStatusMessageChangeEvent, StatusMessageChangeType, IStatusMessageViewItem } from 'vs/workbench/common/notifications';\nimport { IStatusbarService, StatusbarAlignment, IStatusbarEntryAccessor, IStatusbarEntry } from 'vs/workbench/services/statusbar/common/statusbar';\nimport { Disposable, IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { HIDE_NOTIFICATIONS_CENTER, SHOW_NOTIFICATIONS_CENTER } from 'vs/workbench/browser/parts/notifications/notificationsCommands';\nimport { localize } from 'vs/nls';\n\nexport class NotificationsStatus extends Disposable {\n\n\tprivate notificationsCenterStatusItem: IStatusbarEntryAccessor | undefined;\n\tprivate newNotificationsCount = 0;\n\n\tprivate currentStatusMessage: [IStatusMessageViewItem, IDisposable] | undefined;\n\n\tprivate isNotificationsCenterVisible: boolean = false;\n\tprivate isNotificationsToastsVisible: boolean = false;\n\n\tconstructor(\n\t\tprivate readonly model: INotificationsModel,\n\t\t@IStatusbarService private readonly statusbarService: IStatusbarService\n\t) {\n\t\tsuper();\n\n\t\tthis.updateNotificationsCenterStatusItem();\n\n\t\tif (model.statusMessage) {\n\t\t\tthis.doSetStatusMessage(model.statusMessage);\n\t\t}\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.model.onDidChangeNotification(e => this.onDidChangeNotification(e)));\n\t\tthis._register(this.model.onDidChangeStatusMessage(e => this.onDidChangeStatusMessage(e)));\n\t}\n\n\tprivate onDidChangeNotification(e: INotificationChangeEvent): void {\n\n\t\t// Consider a notification as unread as long as it only\n\t\t// appeared as toast and not in the notification center\n\t\tif (!this.isNotificationsCenterVisible) {\n\t\t\tif (e.kind === NotificationChangeType.ADD) {\n\t\t\t\tthis.newNotificationsCount++;\n\t\t\t} else if (e.kind === NotificationChangeType.REMOVE && this.newNotificationsCount > 0) {\n\t\t\t\tthis.newNotificationsCount--;\n\t\t\t}\n\t\t}\n\n\t\t// Update in status bar\n\t\tthis.updateNotificationsCenterStatusItem();\n\t}\n\n\tprivate updateNotificationsCenterStatusItem(): void {\n\n\t\t// Figure out how many notifications have progress only if neither\n\t\t// toasts are visible nor center is visible. In that case we still\n\t\t// want to give a hint to the user that something is running.\n\t\tlet notificationsInProgress = 0;\n\t\tif (!this.isNotificationsCenterVisible && !this.isNotificationsToastsVisible) {\n\t\t\tfor (const notification of this.model.notifications) {\n\t\t\t\tif (notification.hasProgress) {\n\t\t\t\t\tnotificationsInProgress++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Show the bell with a dot if there are unread or in-progress notifications\n\t\tconst statusProperties: IStatusbarEntry = {\n\t\t\ttext: `${notificationsInProgress > 0 || this.newNotificationsCount > 0 ? '$(bell-dot)' : '$(bell)'}`,\n\t\t\tariaLabel: localize('status.notifications', \"Notifications\"),\n\t\t\tcommand: this.isNotificationsCenterVisible ? HIDE_NOTIFICATIONS_CENTER : SHOW_NOTIFICATIONS_CENTER,\n\t\t\ttooltip: this.getTooltip(notificationsInProgress),\n\t\t\tshowBeak: this.isNotificationsCenterVisible\n\t\t};\n\n\t\tif (!this.notificationsCenterStatusItem) {\n\t\t\tthis.notificationsCenterStatusItem = this.statusbarService.addEntry(\n\t\t\t\tstatusProperties,\n\t\t\t\t'status.notifications',\n\t\t\t\tlocalize('status.notifications', \"Notifications\"),\n\t\t\t\tStatusbarAlignment.RIGHT,\n\t\t\t\t-Number.MAX_VALUE /* towards the far end of the right hand side */\n\t\t\t);\n\t\t} else {\n\t\t\tthis.notificationsCenterStatusItem.update(statusProperties);\n\t\t}\n\t}\n\n\tprivate getTooltip(notificationsInProgress: number): string {\n\t\tif (this.isNotificationsCenterVisible) {\n\t\t\treturn localize('hideNotifications', \"Hide Notifications\");\n\t\t}\n\n\t\tif (this.model.notifications.length === 0) {\n\t\t\treturn localize('zeroNotifications', \"No Notifications\");\n\t\t}\n\n\t\tif (notificationsInProgress === 0) {\n\t\t\tif (this.newNotificationsCount === 0) {\n\t\t\t\treturn localize('noNotifications', \"No New Notifications\");\n\t\t\t}\n\n\t\t\tif (this.newNotificationsCount === 1) {\n\t\t\t\treturn localize('oneNotification', \"1 New Notification\");\n\t\t\t}\n\n\t\t\treturn localize({ key: 'notifications', comment: ['{0} will be replaced by a number'] }, \"{0} New Notifications\", this.newNotificationsCount);\n\t\t}\n\n\t\tif (this.newNotificationsCount === 0) {\n\t\t\treturn localize({ key: 'noNotificationsWithProgress', comment: ['{0} will be replaced by a number'] }, \"No New Notifications ({0} in progress)\", notificationsInProgress);\n\t\t}\n\n\t\tif (this.newNotificationsCount === 1) {\n\t\t\treturn localize({ key: 'oneNotificationWithProgress', comment: ['{0} will be replaced by a number'] }, \"1 New Notification ({0} in progress)\", notificationsInProgress);\n\t\t}\n\n\t\treturn localize({ key: 'notificationsWithProgress', comment: ['{0} and {1} will be replaced by a number'] }, \"{0} New Notifications ({1} in progress)\", this.newNotificationsCount, notificationsInProgress);\n\t}\n\n\tupdate(isCenterVisible: boolean, isToastsVisible: boolean): void {\n\t\tlet updateNotificationsCenterStatusItem = false;\n\n\t\tif (this.isNotificationsCenterVisible !== isCenterVisible) {\n\t\t\tthis.isNotificationsCenterVisible = isCenterVisible;\n\t\t\tthis.newNotificationsCount = 0; // Showing the notification center resets the unread counter to 0\n\t\t\tupdateNotificationsCenterStatusItem = true;\n\t\t}\n\n\t\tif (this.isNotificationsToastsVisible !== isToastsVisible) {\n\t\t\tthis.isNotificationsToastsVisible = isToastsVisible;\n\t\t\tupdateNotificationsCenterStatusItem = true;\n\t\t}\n\n\t\t// Update in status bar as needed\n\t\tif (updateNotificationsCenterStatusItem) {\n\t\t\tthis.updateNotificationsCenterStatusItem();\n\t\t}\n\t}\n\n\tprivate onDidChangeStatusMessage(e: IStatusMessageChangeEvent): void {\n\t\tconst statusItem = e.item;\n\n\t\tswitch (e.kind) {\n\n\t\t\t// Show status notification\n\t\t\tcase StatusMessageChangeType.ADD:\n\t\t\t\tthis.doSetStatusMessage(statusItem);\n\n\t\t\t\tbreak;\n\n\t\t\t// Hide status notification (if its still the current one)\n\t\t\tcase StatusMessageChangeType.REMOVE:\n\t\t\t\tif (this.currentStatusMessage && this.currentStatusMessage[0] === statusItem) {\n\t\t\t\t\tdispose(this.currentStatusMessage[1]);\n\t\t\t\t\tthis.currentStatusMessage = undefined;\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tprivate doSetStatusMessage(item: IStatusMessageViewItem): void {\n\t\tconst message = item.message;\n\n\t\tconst showAfter = item.options && typeof item.options.showAfter === 'number' ? item.options.showAfter : 0;\n\t\tconst hideAfter = item.options && typeof item.options.hideAfter === 'number' ? item.options.hideAfter : -1;\n\n\t\t// Dismiss any previous\n\t\tif (this.currentStatusMessage) {\n\t\t\tdispose(this.currentStatusMessage[1]);\n\t\t}\n\n\t\t// Create new\n\t\tlet statusMessageEntry: IStatusbarEntryAccessor;\n\t\tlet showHandle: any = setTimeout(() => {\n\t\t\tstatusMessageEntry = this.statusbarService.addEntry(\n\t\t\t\t{ text: message, ariaLabel: message },\n\t\t\t\t'status.message',\n\t\t\t\tlocalize('status.message', \"Status Message\"),\n\t\t\t\tStatusbarAlignment.LEFT,\n\t\t\t\t-Number.MAX_VALUE /* far right on left hand side */\n\t\t\t);\n\t\t\tshowHandle = null;\n\t\t}, showAfter);\n\n\t\t// Dispose function takes care of timeouts and actual entry\n\t\tlet hideHandle: any;\n\t\tconst statusMessageDispose = {\n\t\t\tdispose: () => {\n\t\t\t\tif (showHandle) {\n\t\t\t\t\tclearTimeout(showHandle);\n\t\t\t\t}\n\n\t\t\t\tif (hideHandle) {\n\t\t\t\t\tclearTimeout(hideHandle);\n\t\t\t\t}\n\n\t\t\t\tif (statusMessageEntry) {\n\t\t\t\t\tstatusMessageEntry.dispose();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tif (hideAfter > 0) {\n\t\t\thideHandle = setTimeout(() => statusMessageDispose.dispose(), hideAfter);\n\t\t}\n\n\t\t// Remember as current status message\n\t\tthis.currentStatusMessage = [item, statusMessageDispose];\n\t}\n}\n"]}