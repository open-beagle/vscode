{"version":3,"sources":["vs/workbench/browser/parts/notifications/notificationsCenter.ts"],"names":[],"mappings":"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","file":"notificationsCenter.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./media/notificationsCenter';\nimport 'vs/css!./media/notificationsActions';\nimport { NOTIFICATIONS_BORDER, NOTIFICATIONS_CENTER_HEADER_FOREGROUND, NOTIFICATIONS_CENTER_HEADER_BACKGROUND, NOTIFICATIONS_CENTER_BORDER } from 'vs/workbench/common/theme';\nimport { IThemeService, registerThemingParticipant, Themable } from 'vs/platform/theme/common/themeService';\nimport { INotificationsModel, INotificationChangeEvent, NotificationChangeType, NotificationViewItemContentChangeKind } from 'vs/workbench/common/notifications';\nimport { IWorkbenchLayoutService, Parts } from 'vs/workbench/services/layout/browser/layoutService';\nimport { Emitter } from 'vs/base/common/event';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { NotificationsCenterVisibleContext, INotificationsCenterController } from 'vs/workbench/browser/parts/notifications/notificationsCommands';\nimport { NotificationsList } from 'vs/workbench/browser/parts/notifications/notificationsList';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { isAncestor, Dimension } from 'vs/base/browser/dom';\nimport { widgetShadow } from 'vs/platform/theme/common/colorRegistry';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { localize } from 'vs/nls';\nimport { ActionBar } from 'vs/base/browser/ui/actionbar/actionbar';\nimport { ClearAllNotificationsAction, HideNotificationsCenterAction, NotificationActionRunner } from 'vs/workbench/browser/parts/notifications/notificationsActions';\nimport { IAction } from 'vs/base/common/actions';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { assertAllDefined, assertIsDefined } from 'vs/base/common/types';\n\nexport class NotificationsCenter extends Themable implements INotificationsCenterController {\n\n\tprivate static readonly MAX_DIMENSIONS = new Dimension(450, 400);\n\n\tprivate readonly _onDidChangeVisibility = this._register(new Emitter<void>());\n\treadonly onDidChangeVisibility = this._onDidChangeVisibility.event;\n\n\tprivate notificationsCenterContainer: HTMLElement | undefined;\n\tprivate notificationsCenterHeader: HTMLElement | undefined;\n\tprivate notificationsCenterTitle: HTMLSpanElement | undefined;\n\tprivate notificationsList: NotificationsList | undefined;\n\tprivate _isVisible: boolean | undefined;\n\tprivate workbenchDimensions: Dimension | undefined;\n\tprivate readonly notificationsCenterVisibleContextKey = NotificationsCenterVisibleContext.bindTo(this.contextKeyService);\n\tprivate clearAllAction: ClearAllNotificationsAction | undefined;\n\n\tconstructor(\n\t\tprivate readonly container: HTMLElement,\n\t\tprivate readonly model: INotificationsModel,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IWorkbenchLayoutService private readonly layoutService: IWorkbenchLayoutService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IEditorGroupsService private readonly editorGroupService: IEditorGroupsService,\n\t\t@IKeybindingService private readonly keybindingService: IKeybindingService\n\t) {\n\t\tsuper(themeService);\n\n\t\tthis.notificationsCenterVisibleContextKey = NotificationsCenterVisibleContext.bindTo(contextKeyService);\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.model.onDidChangeNotification(e => this.onDidChangeNotification(e)));\n\t\tthis._register(this.layoutService.onDidLayout(dimension => this.layout(Dimension.lift(dimension))));\n\t}\n\n\tget isVisible(): boolean {\n\t\treturn !!this._isVisible;\n\t}\n\n\tshow(): void {\n\t\tif (this._isVisible) {\n\t\t\tconst notificationsList = assertIsDefined(this.notificationsList);\n\t\t\tnotificationsList.show(true /* focus */);\n\n\t\t\treturn; // already visible\n\t\t}\n\n\t\t// Lazily create if showing for the first time\n\t\tif (!this.notificationsCenterContainer) {\n\t\t\tthis.create();\n\t\t}\n\n\t\t// Title\n\t\tthis.updateTitle();\n\n\t\t// Make visible\n\t\tconst [notificationsList, notificationsCenterContainer] = assertAllDefined(this.notificationsList, this.notificationsCenterContainer);\n\t\tthis._isVisible = true;\n\t\tnotificationsCenterContainer.classList.add('visible');\n\t\tnotificationsList.show();\n\n\t\t// Layout\n\t\tthis.layout(this.workbenchDimensions);\n\n\t\t// Show all notifications that are present now\n\t\tnotificationsList.updateNotificationsList(0, 0, this.model.notifications);\n\n\t\t// Focus first\n\t\tnotificationsList.focusFirst();\n\n\t\t// Theming\n\t\tthis.updateStyles();\n\n\t\t// Mark as visible\n\t\tthis.model.notifications.forEach(notification => notification.updateVisibility(true));\n\n\t\t// Context Key\n\t\tthis.notificationsCenterVisibleContextKey.set(true);\n\n\t\t// Event\n\t\tthis._onDidChangeVisibility.fire();\n\t}\n\n\tprivate updateTitle(): void {\n\t\tconst [notificationsCenterTitle, clearAllAction] = assertAllDefined(this.notificationsCenterTitle, this.clearAllAction);\n\n\t\tif (this.model.notifications.length === 0) {\n\t\t\tnotificationsCenterTitle.textContent = localize('notificationsEmpty', \"No new notifications\");\n\t\t\tclearAllAction.enabled = false;\n\t\t} else {\n\t\t\tnotificationsCenterTitle.textContent = localize('notifications', \"Notifications\");\n\t\t\tclearAllAction.enabled = this.model.notifications.some(notification => !notification.hasProgress);\n\t\t}\n\t}\n\n\tprivate create(): void {\n\n\t\t// Container\n\t\tthis.notificationsCenterContainer = document.createElement('div');\n\t\tthis.notificationsCenterContainer.classList.add('notifications-center');\n\n\t\t// Header\n\t\tthis.notificationsCenterHeader = document.createElement('div');\n\t\tthis.notificationsCenterHeader.classList.add('notifications-center-header');\n\t\tthis.notificationsCenterContainer.appendChild(this.notificationsCenterHeader);\n\n\t\t// Header Title\n\t\tthis.notificationsCenterTitle = document.createElement('span');\n\t\tthis.notificationsCenterTitle.classList.add('notifications-center-header-title');\n\t\tthis.notificationsCenterHeader.appendChild(this.notificationsCenterTitle);\n\n\t\t// Header Toolbar\n\t\tconst toolbarContainer = document.createElement('div');\n\t\ttoolbarContainer.classList.add('notifications-center-header-toolbar');\n\t\tthis.notificationsCenterHeader.appendChild(toolbarContainer);\n\n\t\tconst actionRunner = this._register(this.instantiationService.createInstance(NotificationActionRunner));\n\n\t\tconst notificationsToolBar = this._register(new ActionBar(toolbarContainer, {\n\t\t\tariaLabel: localize('notificationsToolbar', \"Notification Center Actions\"),\n\t\t\tactionRunner\n\t\t}));\n\n\t\tthis.clearAllAction = this._register(this.instantiationService.createInstance(ClearAllNotificationsAction, ClearAllNotificationsAction.ID, ClearAllNotificationsAction.LABEL));\n\t\tnotificationsToolBar.push(this.clearAllAction, { icon: true, label: false, keybinding: this.getKeybindingLabel(this.clearAllAction) });\n\n\t\tconst hideAllAction = this._register(this.instantiationService.createInstance(HideNotificationsCenterAction, HideNotificationsCenterAction.ID, HideNotificationsCenterAction.LABEL));\n\t\tnotificationsToolBar.push(hideAllAction, { icon: true, label: false, keybinding: this.getKeybindingLabel(hideAllAction) });\n\n\t\t// Notifications List\n\t\tthis.notificationsList = this.instantiationService.createInstance(NotificationsList, this.notificationsCenterContainer, {});\n\t\tthis.container.appendChild(this.notificationsCenterContainer);\n\t}\n\n\tprivate getKeybindingLabel(action: IAction): string | null {\n\t\tconst keybinding = this.keybindingService.lookupKeybinding(action.id);\n\n\t\treturn keybinding ? keybinding.getLabel() : null;\n\t}\n\n\tprivate onDidChangeNotification(e: INotificationChangeEvent): void {\n\t\tif (!this._isVisible) {\n\t\t\treturn; // only if visible\n\t\t}\n\n\t\tlet focusEditor = false;\n\n\t\t// Update notifications list based on event kind\n\t\tconst [notificationsList, notificationsCenterContainer] = assertAllDefined(this.notificationsList, this.notificationsCenterContainer);\n\t\tswitch (e.kind) {\n\t\t\tcase NotificationChangeType.ADD:\n\t\t\t\tnotificationsList.updateNotificationsList(e.index, 0, [e.item]);\n\t\t\t\te.item.updateVisibility(true);\n\t\t\t\tbreak;\n\t\t\tcase NotificationChangeType.CHANGE:\n\t\t\t\t// Handle content changes\n\t\t\t\t// - actions: re-draw to properly show them\n\t\t\t\t// - message: update notification height unless collapsed\n\t\t\t\tswitch (e.detail) {\n\t\t\t\t\tcase NotificationViewItemContentChangeKind.ACTIONS:\n\t\t\t\t\t\tnotificationsList.updateNotificationsList(e.index, 1, [e.item]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase NotificationViewItemContentChangeKind.MESSAGE:\n\t\t\t\t\t\tif (e.item.expanded) {\n\t\t\t\t\t\t\tnotificationsList.updateNotificationHeight(e.item);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase NotificationChangeType.EXPAND_COLLAPSE:\n\t\t\t\t// Re-draw entire item when expansion changes to reveal or hide details\n\t\t\t\tnotificationsList.updateNotificationsList(e.index, 1, [e.item]);\n\t\t\t\tbreak;\n\t\t\tcase NotificationChangeType.REMOVE:\n\t\t\t\tfocusEditor = isAncestor(document.activeElement, notificationsCenterContainer);\n\t\t\t\tnotificationsList.updateNotificationsList(e.index, 1);\n\t\t\t\te.item.updateVisibility(false);\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// Update title\n\t\tthis.updateTitle();\n\n\t\t// Hide if no more notifications to show\n\t\tif (this.model.notifications.length === 0) {\n\t\t\tthis.hide();\n\n\t\t\t// Restore focus to editor group if we had focus\n\t\t\tif (focusEditor) {\n\t\t\t\tthis.editorGroupService.activeGroup.focus();\n\t\t\t}\n\t\t}\n\t}\n\n\thide(): void {\n\t\tif (!this._isVisible || !this.notificationsCenterContainer || !this.notificationsList) {\n\t\t\treturn; // already hidden\n\t\t}\n\n\t\tconst focusEditor = isAncestor(document.activeElement, this.notificationsCenterContainer);\n\n\t\t// Hide\n\t\tthis._isVisible = false;\n\t\tthis.notificationsCenterContainer.classList.remove('visible');\n\t\tthis.notificationsList.hide();\n\n\t\t// Mark as hidden\n\t\tthis.model.notifications.forEach(notification => notification.updateVisibility(false));\n\n\t\t// Context Key\n\t\tthis.notificationsCenterVisibleContextKey.set(false);\n\n\t\t// Event\n\t\tthis._onDidChangeVisibility.fire();\n\n\t\t// Restore focus to editor group if we had focus\n\t\tif (focusEditor) {\n\t\t\tthis.editorGroupService.activeGroup.focus();\n\t\t}\n\t}\n\n\tprotected override updateStyles(): void {\n\t\tif (this.notificationsCenterContainer && this.notificationsCenterHeader) {\n\t\t\tconst widgetShadowColor = this.getColor(widgetShadow);\n\t\t\tthis.notificationsCenterContainer.style.boxShadow = widgetShadowColor ? `0 0 8px 2px ${widgetShadowColor}` : '';\n\n\t\t\tconst borderColor = this.getColor(NOTIFICATIONS_CENTER_BORDER);\n\t\t\tthis.notificationsCenterContainer.style.border = borderColor ? `1px solid ${borderColor}` : '';\n\n\t\t\tconst headerForeground = this.getColor(NOTIFICATIONS_CENTER_HEADER_FOREGROUND);\n\t\t\tthis.notificationsCenterHeader.style.color = headerForeground ? headerForeground.toString() : '';\n\n\t\t\tconst headerBackground = this.getColor(NOTIFICATIONS_CENTER_HEADER_BACKGROUND);\n\t\t\tthis.notificationsCenterHeader.style.background = headerBackground ? headerBackground.toString() : '';\n\t\t}\n\t}\n\n\tlayout(dimension: Dimension | undefined): void {\n\t\tthis.workbenchDimensions = dimension;\n\n\t\tif (this._isVisible && this.notificationsCenterContainer) {\n\t\t\tlet maxWidth = NotificationsCenter.MAX_DIMENSIONS.width;\n\t\t\tlet maxHeight = NotificationsCenter.MAX_DIMENSIONS.height;\n\n\t\t\tlet availableWidth = maxWidth;\n\t\t\tlet availableHeight = maxHeight;\n\n\t\t\tif (this.workbenchDimensions) {\n\n\t\t\t\t// Make sure notifications are not exceding available width\n\t\t\t\tavailableWidth = this.workbenchDimensions.width;\n\t\t\t\tavailableWidth -= (2 * 8); // adjust for paddings left and right\n\n\t\t\t\t// Make sure notifications are not exceeding available height\n\t\t\t\tavailableHeight = this.workbenchDimensions.height - 35 /* header */;\n\t\t\t\tif (this.layoutService.isVisible(Parts.STATUSBAR_PART)) {\n\t\t\t\t\tavailableHeight -= 22; // adjust for status bar\n\t\t\t\t}\n\n\t\t\t\tif (this.layoutService.isVisible(Parts.TITLEBAR_PART)) {\n\t\t\t\t\tavailableHeight -= 22; // adjust for title bar\n\t\t\t\t}\n\n\t\t\t\tavailableHeight -= (2 * 12); // adjust for paddings top and bottom\n\t\t\t}\n\n\t\t\t// Apply to list\n\t\t\tconst notificationsList = assertIsDefined(this.notificationsList);\n\t\t\tnotificationsList.layout(Math.min(maxWidth, availableWidth), Math.min(maxHeight, availableHeight));\n\t\t}\n\t}\n\n\tclearAll(): void {\n\n\t\t// Hide notifications center first\n\t\tthis.hide();\n\n\t\t// Close all\n\t\tfor (const notification of [...this.model.notifications] /* copy array since we modify it from closing */) {\n\t\t\tif (!notification.hasProgress) {\n\t\t\t\tnotification.close();\n\t\t\t}\n\t\t}\n\t}\n}\n\nregisterThemingParticipant((theme, collector) => {\n\tconst notificationBorderColor = theme.getColor(NOTIFICATIONS_BORDER);\n\tif (notificationBorderColor) {\n\t\tcollector.addRule(`.monaco-workbench > .notifications-center .notifications-list-container .monaco-list-row[data-last-element=\"false\"] > .notification-list-item { border-bottom: 1px solid ${notificationBorderColor}; }`);\n\t}\n});\n"]}