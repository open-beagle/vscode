{"version":3,"file":"notificationsTelemetry.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/browser/parts/notifications/notificationsTelemetry.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAoBhG,SAAgB,qBAAqB,CAAC,OAA4B,EAAE,MAA0B,EAAE,MAAe;QAC9G,OAAO;YACN,EAAE,EAAE,CAAA,GAAA,WAAI,CAAA,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC,QAAQ,EAAE;YACvC,MAAM;YACN,MAAM,EAAE,MAAM,IAAI,MAAM;SACxB,CAAC;IACH,CAAC;IAND,sDAMC;IAED,IAAa,sBAAsB,GAAnC,MAAa,sBAAuB,SAAQ,sBAAU;QAErD,YACqC,gBAAmC,EAChC,mBAAyC;YAEhF,KAAK,EAAE,CAAC;YAH4B,qBAAgB,GAAhB,gBAAgB,CAAmB;YAChC,wBAAmB,GAAnB,mBAAmB,CAAsB;YAGhF,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAC1B,CAAC;QAEO,iBAAiB;YACxB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,mBAAmB,CAAC,oBAAoB,CAAC,YAAY,CAAC,EAAE;gBAC3E,MAAM,MAAM,GAAG,YAAY,CAAC,MAAM,IAAI,OAAO,YAAY,CAAC,MAAM,KAAK,QAAQ,CAAC,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC;gBAC7H,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAyD,mBAAmB,EAAE,qBAAqB,CAAC,YAAY,CAAC,OAAO,EAAE,MAAM,EAAE,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;YAC3L,CAAC,CAAC,CAAC,CAAC;YAEJ,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,mBAAmB,CAAC,uBAAuB,CAAC,YAAY,CAAC,EAAE;gBAC9E,MAAM,MAAM,GAAG,YAAY,CAAC,MAAM,IAAI,OAAO,YAAY,CAAC,MAAM,KAAK,QAAQ,CAAC,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC;gBAC7H,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAyD,oBAAoB,EAAE,qBAAqB,CAAC,YAAY,CAAC,OAAO,EAAE,MAAM,EAAE,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;YAC5L,CAAC,CAAC,CAAC,CAAC;QACL,CAAC;KACD,CAAA;IArBY,sBAAsB;QAGhC,WAAA,6BAAiB,CAAA;QACjB,WAAA,mCAAoB,CAAA;OAJV,sBAAsB,CAqBlC;IArBY,wDAAsB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { INotificationService, NotificationMessage } from 'vs/platform/notification/common/notification';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { hash } from 'vs/base/common/hash';\n\nexport interface NotificationMetrics {\n\tid: string;\n\tsilent: boolean;\n\tsource?: string;\n}\n\nexport type NotificationMetricsClassification = {\n\tid: { classification: 'SystemMetaData', purpose: 'FeatureInsight' };\n\tsilent: { classification: 'SystemMetaData', purpose: 'FeatureInsight' };\n\tsource?: { classification: 'SystemMetaData', purpose: 'FeatureInsight' };\n};\n\nexport function notificationToMetrics(message: NotificationMessage, source: string | undefined, silent: boolean): NotificationMetrics {\n\treturn {\n\t\tid: hash(message.toString()).toString(),\n\t\tsilent,\n\t\tsource: source || 'core'\n\t};\n}\n\nexport class NotificationsTelemetry extends Disposable implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@INotificationService private readonly notificationService: INotificationService\n\t) {\n\t\tsuper();\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.notificationService.onDidAddNotification(notification => {\n\t\t\tconst source = notification.source && typeof notification.source !== 'string' ? notification.source.id : notification.source;\n\t\t\tthis.telemetryService.publicLog2<NotificationMetrics, NotificationMetricsClassification>('notification:show', notificationToMetrics(notification.message, source, !!notification.silent));\n\t\t}));\n\n\t\tthis._register(this.notificationService.onDidRemoveNotification(notification => {\n\t\t\tconst source = notification.source && typeof notification.source !== 'string' ? notification.source.id : notification.source;\n\t\t\tthis.telemetryService.publicLog2<NotificationMetrics, NotificationMetricsClassification>('notification:close', notificationToMetrics(notification.message, source, !!notification.silent));\n\t\t}));\n\t}\n}\n"]}