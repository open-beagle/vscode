{"version":3,"sources":["vs/workbench/browser/parts/notifications/notificationsActions.ts"],"names":[],"mappings":"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","file":"notificationsActions.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./media/notificationsActions';\nimport { INotificationViewItem } from 'vs/workbench/common/notifications';\nimport { localize } from 'vs/nls';\nimport { Action, IAction, ActionRunner, WorkbenchActionExecutedEvent, WorkbenchActionExecutedClassification } from 'vs/base/common/actions';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { CLEAR_NOTIFICATION, EXPAND_NOTIFICATION, COLLAPSE_NOTIFICATION, CLEAR_ALL_NOTIFICATIONS, HIDE_NOTIFICATIONS_CENTER } from 'vs/workbench/browser/parts/notifications/notificationsCommands';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';\nimport { Codicon } from 'vs/base/common/codicons';\nimport { registerIcon } from 'vs/platform/theme/common/iconRegistry';\nimport { ThemeIcon } from 'vs/platform/theme/common/themeService';\nimport { hash } from 'vs/base/common/hash';\n\nconst clearIcon = registerIcon('notifications-clear', Codicon.close, localize('clearIcon', 'Icon for the clear action in notifications.'));\nconst clearAllIcon = registerIcon('notifications-clear-all', Codicon.clearAll, localize('clearAllIcon', 'Icon for the clear all action in notifications.'));\nconst hideIcon = registerIcon('notifications-hide', Codicon.chevronDown, localize('hideIcon', 'Icon for the hide action in notifications.'));\nconst expandIcon = registerIcon('notifications-expand', Codicon.chevronUp, localize('expandIcon', 'Icon for the expand action in notifications.'));\nconst collapseIcon = registerIcon('notifications-collapse', Codicon.chevronDown, localize('collapseIcon', 'Icon for the collapse action in notifications.'));\nconst configureIcon = registerIcon('notifications-configure', Codicon.gear, localize('configureIcon', 'Icon for the configure action in notifications.'));\n\nexport class ClearNotificationAction extends Action {\n\n\tstatic readonly ID = CLEAR_NOTIFICATION;\n\tstatic readonly LABEL = localize('clearNotification', \"Clear Notification\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@ICommandService private readonly commandService: ICommandService\n\t) {\n\t\tsuper(id, label, ThemeIcon.asClassName(clearIcon));\n\t}\n\n\toverride async run(notification: INotificationViewItem): Promise<void> {\n\t\tthis.commandService.executeCommand(CLEAR_NOTIFICATION, notification);\n\t}\n}\n\nexport class ClearAllNotificationsAction extends Action {\n\n\tstatic readonly ID = CLEAR_ALL_NOTIFICATIONS;\n\tstatic readonly LABEL = localize('clearNotifications', \"Clear All Notifications\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@ICommandService private readonly commandService: ICommandService\n\t) {\n\t\tsuper(id, label, ThemeIcon.asClassName(clearAllIcon));\n\t}\n\n\toverride async run(): Promise<void> {\n\t\tthis.commandService.executeCommand(CLEAR_ALL_NOTIFICATIONS);\n\t}\n}\n\nexport class HideNotificationsCenterAction extends Action {\n\n\tstatic readonly ID = HIDE_NOTIFICATIONS_CENTER;\n\tstatic readonly LABEL = localize('hideNotificationsCenter', \"Hide Notifications\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@ICommandService private readonly commandService: ICommandService\n\t) {\n\t\tsuper(id, label, ThemeIcon.asClassName(hideIcon));\n\t}\n\n\toverride async run(): Promise<void> {\n\t\tthis.commandService.executeCommand(HIDE_NOTIFICATIONS_CENTER);\n\t}\n}\n\nexport class ExpandNotificationAction extends Action {\n\n\tstatic readonly ID = EXPAND_NOTIFICATION;\n\tstatic readonly LABEL = localize('expandNotification', \"Expand Notification\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@ICommandService private readonly commandService: ICommandService\n\t) {\n\t\tsuper(id, label, ThemeIcon.asClassName(expandIcon));\n\t}\n\n\toverride async run(notification: INotificationViewItem): Promise<void> {\n\t\tthis.commandService.executeCommand(EXPAND_NOTIFICATION, notification);\n\t}\n}\n\nexport class CollapseNotificationAction extends Action {\n\n\tstatic readonly ID = COLLAPSE_NOTIFICATION;\n\tstatic readonly LABEL = localize('collapseNotification', \"Collapse Notification\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@ICommandService private readonly commandService: ICommandService\n\t) {\n\t\tsuper(id, label, ThemeIcon.asClassName(collapseIcon));\n\t}\n\n\toverride async run(notification: INotificationViewItem): Promise<void> {\n\t\tthis.commandService.executeCommand(COLLAPSE_NOTIFICATION, notification);\n\t}\n}\n\nexport class ConfigureNotificationAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.configureNotification';\n\tstatic readonly LABEL = localize('configureNotification', \"Configure Notification\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\tpublic readonly configurationActions: readonly IAction[]\n\t) {\n\t\tsuper(id, label, ThemeIcon.asClassName(configureIcon));\n\t}\n}\n\nexport class CopyNotificationMessageAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.copyNotificationMessage';\n\tstatic readonly LABEL = localize('copyNotification', \"Copy Text\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IClipboardService private readonly clipboardService: IClipboardService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\toverride run(notification: INotificationViewItem): Promise<void> {\n\t\treturn this.clipboardService.writeText(notification.message.raw);\n\t}\n}\n\ninterface NotificationActionMetrics {\n\tid: string;\n\tactionLabel: string;\n\tsource: string;\n\tsilent: boolean;\n}\n\ntype NotificationActionMetricsClassification = {\n\tid: { classification: 'SystemMetaData', purpose: 'FeatureInsight' };\n\tactionLabel: { classification: 'SystemMetaData', purpose: 'FeatureInsight' };\n\tsource: { classification: 'SystemMetaData', purpose: 'FeatureInsight' };\n\tsilent: { classification: 'SystemMetaData', purpose: 'FeatureInsight' };\n};\n\nexport class NotificationActionRunner extends ActionRunner {\n\n\tconstructor(\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@INotificationService private readonly notificationService: INotificationService\n\t) {\n\t\tsuper();\n\t}\n\n\tprotected override async runAction(action: IAction, context: INotificationViewItem | undefined): Promise<void> {\n\t\tthis.telemetryService.publicLog2<WorkbenchActionExecutedEvent, WorkbenchActionExecutedClassification>('workbenchActionExecuted', { id: action.id, from: 'message' });\n\t\tif (context) {\n\t\t\t// If the context is not present it is a \"global\" notification action. Will be captured by other events\n\t\t\tthis.telemetryService.publicLog2<NotificationActionMetrics, NotificationActionMetricsClassification>('notification:actionExecuted', { id: hash(context.message.original.toString()).toString(), actionLabel: action.label, source: context.sourceId || 'core', silent: context.silent });\n\t\t}\n\n\t\t// Run and make sure to notify on any error again\n\t\ttry {\n\t\t\tawait super.runAction(action, context);\n\t\t} catch (error) {\n\t\t\tthis.notificationService.error(error);\n\t\t}\n\t}\n}\n"]}