{"version":3,"sources":["vs/workbench/browser/parts/notifications/notificationsCommands.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAahG,SAAS;IACI,QAAA,yBAAyB,GAAG,wBAAwB,CAAC;IACrD,QAAA,yBAAyB,GAAG,wBAAwB,CAAC;IAClE,MAAM,2BAA2B,GAAG,0BAA0B,CAAC;IAE/D,SAAS;IACI,QAAA,uBAAuB,GAAG,0BAA0B,CAAC;IAClE,MAAM,wBAAwB,GAAG,2BAA2B,CAAC;IAC7D,MAAM,6BAA6B,GAAG,8BAA8B,CAAC;IACrE,MAAM,iCAAiC,GAAG,kCAAkC,CAAC;IAC7E,MAAM,8BAA8B,GAAG,+BAA+B,CAAC;IACvE,MAAM,6BAA6B,GAAG,8BAA8B,CAAC;IAErE,eAAe;IACF,QAAA,qBAAqB,GAAG,uBAAuB,CAAC;IAChD,QAAA,mBAAmB,GAAG,qBAAqB,CAAC;IACzD,MAAM,mBAAmB,GAAG,qBAAqB,CAAC;IACrC,QAAA,kBAAkB,GAAG,oBAAoB,CAAC;IAC1C,QAAA,uBAAuB,GAAG,wBAAwB,CAAC;IAEnD,QAAA,0BAA0B,GAAG,IAAI,0BAAa,CAAU,mBAAmB,EAAE,IAAI,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAmB,EAAE,IAA2C,CAAC,CAAC,CAAC;IAC/J,QAAA,iCAAiC,GAAG,IAAI,0BAAa,CAAU,2BAA2B,EAAE,KAAK,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAA2B,EAAE,IAA6C,CAAC,CAAC,CAAC;IACzL,QAAA,iCAAiC,GAAG,IAAI,0BAAa,CAAU,2BAA2B,EAAE,KAAK,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAA2B,EAAE,IAAyC,CAAC,CAAC,CAAC;IAqBlM,SAAgB,4BAA4B,CAAC,MAAsC,EAAE,MAAqC,EAAE,KAAyB;QAEpJ,SAAS,0BAA0B,CAAC,WAAyB,EAAE,OAAiB;YAC/E,IAAI,CAAA,GAAA,sCAAsB,CAAA,CAAC,OAAO,CAAC,EAAE;gBACpC,OAAO,OAAO,CAAC;aACf;YAED,MAAM,IAAI,GAAG,WAAW,CAAC,eAAe,CAAC;YACzC,IAAI,IAAI,YAAY,2BAAa,EAAE;gBAClC,MAAM,cAAc,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC,CAAC,CAAC;gBACpD,IAAI,CAAA,GAAA,sCAAsB,CAAA,CAAC,cAAc,CAAC,EAAE;oBAC3C,OAAO,cAAc,CAAC;iBACtB;aACD;YAED,OAAO,SAAS,CAAC;QAClB,CAAC;QAED,4BAA4B;QAC5B,2BAAgB,CAAC,eAAe,CAAC,iCAAyB,EAAE,GAAG,EAAE;YAChE,MAAM,CAAC,IAAI,EAAE,CAAC;YACd,MAAM,CAAC,IAAI,EAAE,CAAC;QACf,CAAC,CAAC,CAAC;QAEH,4BAA4B;QAC5B,yCAAmB,CAAC,gCAAgC,CAAC;YACpD,EAAE,EAAE,iCAAyB;YAC7B,MAAM,EAAE,6BAAoC,EAAE;YAC9C,IAAI,EAAE,yCAAiC;YACvC,OAAO,gBAAgB;YACvB,OAAO,EAAE,QAAQ,CAAC,EAAE;gBACnB,MAAM,gBAAgB,GAAG,QAAQ,CAAC,GAAG,CAAC,6BAAiB,CAAC,CAAC;gBACzD,KAAK,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;oBAC/B,IAAI,CAAC,CAAC,OAAO,EAAE;wBACd,gBAAgB,CAAC,UAAU,CAAyD,mBAAmB,EAAE,CAAA,GAAA,8CAAqB,CAAA,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;qBAC1K;gBACF,CAAC,CAAC,CAAC;gBAEH,MAAM,CAAC,IAAI,EAAE,CAAC;YACf,CAAC;SACD,CAAC,CAAC;QAEH,8BAA8B;QAC9B,2BAAgB,CAAC,eAAe,CAAC,2BAA2B,EAAE,QAAQ,CAAC,EAAE;YACxE,IAAI,MAAM,CAAC,SAAS,EAAE;gBACrB,MAAM,CAAC,IAAI,EAAE,CAAC;aACd;iBAAM;gBACN,MAAM,CAAC,IAAI,EAAE,CAAC;gBACd,MAAM,CAAC,IAAI,EAAE,CAAC;aACd;QACF,CAAC,CAAC,CAAC;QAEH,qBAAqB;QACrB,yCAAmB,CAAC,gCAAgC,CAAC;YACpD,EAAE,EAAE,0BAAkB;YACtB,MAAM,4BAAmC;YACzC,IAAI,EAAE,kCAA0B;YAChC,OAAO,iBAAgB;YACvB,GAAG,EAAE;gBACJ,OAAO,EAAE,sCAAkC;aAC3C;YACD,OAAO,EAAE,CAAC,QAAQ,EAAE,IAAK,EAAE,EAAE;gBAC5B,MAAM,YAAY,GAAG,0BAA0B,CAAC,QAAQ,CAAC,GAAG,CAAC,0BAAY,CAAC,EAAE,IAAI,CAAC,CAAC;gBAClF,IAAI,YAAY,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE;oBAC9C,YAAY,CAAC,KAAK,EAAE,CAAC;iBACrB;YACF,CAAC;SACD,CAAC,CAAC;QAEH,sBAAsB;QACtB,yCAAmB,CAAC,gCAAgC,CAAC;YACpD,EAAE,EAAE,2BAAmB;YACvB,MAAM,4BAAmC;YACzC,IAAI,EAAE,kCAA0B;YAChC,OAAO,qBAAoB;YAC3B,OAAO,EAAE,CAAC,QAAQ,EAAE,IAAK,EAAE,EAAE;gBAC5B,MAAM,YAAY,GAAG,0BAA0B,CAAC,QAAQ,CAAC,GAAG,CAAC,0BAAY,CAAC,EAAE,IAAI,CAAC,CAAC;gBAClF,IAAI,YAAY,EAAE;oBACjB,YAAY,CAAC,MAAM,EAAE,CAAC;iBACtB;YACF,CAAC;SACD,CAAC,CAAC;QAEH,wBAAwB;QACxB,yCAAmB,CAAC,gCAAgC,CAAC;YACpD,EAAE,EAAE,6BAAqB;YACzB,MAAM,4BAAmC;YACzC,IAAI,EAAE,kCAA0B;YAChC,OAAO,oBAAmB;YAC1B,OAAO,EAAE,CAAC,QAAQ,EAAE,IAAK,EAAE,EAAE;gBAC5B,MAAM,YAAY,GAAG,0BAA0B,CAAC,QAAQ,CAAC,GAAG,CAAC,0BAAY,CAAC,EAAE,IAAI,CAAC,CAAC;gBAClF,IAAI,YAAY,EAAE;oBACjB,YAAY,CAAC,QAAQ,EAAE,CAAC;iBACxB;YACF,CAAC;SACD,CAAC,CAAC;QAEH,sBAAsB;QACtB,yCAAmB,CAAC,gCAAgC,CAAC;YACpD,EAAE,EAAE,mBAAmB;YACvB,MAAM,4BAAmC;YACzC,IAAI,EAAE,kCAA0B;YAChC,OAAO,gBAAe;YACtB,SAAS,EAAE,eAAe;YAC1B,OAAO,EAAE,QAAQ,CAAC,EAAE;gBACnB,MAAM,YAAY,GAAG,0BAA0B,CAAC,QAAQ,CAAC,GAAG,CAAC,0BAAY,CAAC,CAAC,CAAC;gBAC5E,IAAI,YAAY,EAAE;oBACjB,YAAY,CAAC,MAAM,EAAE,CAAC;iBACtB;YACF,CAAC;SACD,CAAC,CAAC;QAEH,cAAc;QACd,2BAAgB,CAAC,eAAe,CAAC,+BAAuB,EAAE,QAAQ,CAAC,EAAE;YACpE,MAAM,gBAAgB,GAAG,QAAQ,CAAC,GAAG,CAAC,6BAAiB,CAAC,CAAC;YACzD,KAAK,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;gBAC/B,IAAI,CAAC,CAAC,OAAO,EAAE;oBACd,gBAAgB,CAAC,UAAU,CAAyD,mBAAmB,EAAE,CAAA,GAAA,8CAAqB,CAAA,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;iBAC1K;YACF,CAAC,CAAC,CAAC;YACH,MAAM,CAAC,IAAI,EAAE,CAAC;QACf,CAAC,CAAC,CAAC;QAEH,yCAAmB,CAAC,sBAAsB,CAAC;YAC1C,EAAE,EAAE,+BAAuB;YAC3B,MAAM,EAAE,6BAAoC,EAAE;YAC9C,IAAI,EAAE,yCAAiC;YACvC,OAAO,gBAAgB;SACvB,CAAC,CAAC;QAEH,yCAAmB,CAAC,sBAAsB,CAAC;YAC1C,EAAE,EAAE,+BAAuB;YAC3B,MAAM,EAAE,6BAAoC,GAAG;YAC/C,IAAI,EAAE,2BAAc,CAAC,GAAG,CAAC,yCAAiC,EAAE,kCAA0B,CAAC;YACvF,OAAO,gBAAgB;SACvB,CAAC,CAAC;QAEH,eAAe;QACf,2BAAgB,CAAC,eAAe,CAAC,wBAAwB,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC;QAEjF,mBAAmB;QACnB,yCAAmB,CAAC,gCAAgC,CAAC;YACpD,EAAE,EAAE,6BAA6B;YACjC,MAAM,4BAAmC;YACzC,IAAI,EAAE,2BAAc,CAAC,GAAG,CAAC,kCAA0B,EAAE,yCAAiC,CAAC;YACvF,OAAO,oBAAmB;YAC1B,OAAO,EAAE,CAAC,QAAQ,EAAE,EAAE;gBACrB,MAAM,CAAC,SAAS,EAAE,CAAC;YACpB,CAAC;SACD,CAAC,CAAC;QAEH,uBAAuB;QACvB,yCAAmB,CAAC,gCAAgC,CAAC;YACpD,EAAE,EAAE,iCAAiC;YACrC,MAAM,4BAAmC;YACzC,IAAI,EAAE,2BAAc,CAAC,GAAG,CAAC,kCAA0B,EAAE,yCAAiC,CAAC;YACvF,OAAO,kBAAiB;YACxB,OAAO,EAAE,CAAC,QAAQ,EAAE,EAAE;gBACrB,MAAM,CAAC,aAAa,EAAE,CAAC;YACxB,CAAC;SACD,CAAC,CAAC;QAEH,oBAAoB;QACpB,yCAAmB,CAAC,gCAAgC,CAAC;YACpD,EAAE,EAAE,8BAA8B;YAClC,MAAM,4BAAmC;YACzC,IAAI,EAAE,2BAAc,CAAC,GAAG,CAAC,kCAA0B,EAAE,yCAAiC,CAAC;YACvF,OAAO,iBAAgB;YACvB,SAAS,EAAE,eAAc;YACzB,OAAO,EAAE,CAAC,QAAQ,EAAE,EAAE;gBACrB,MAAM,CAAC,UAAU,EAAE,CAAC;YACrB,CAAC;SACD,CAAC,CAAC;QAEH,mBAAmB;QACnB,yCAAmB,CAAC,gCAAgC,CAAC;YACpD,EAAE,EAAE,6BAA6B;YACjC,MAAM,4BAAmC;YACzC,IAAI,EAAE,2BAAc,CAAC,GAAG,CAAC,kCAA0B,EAAE,yCAAiC,CAAC;YACvF,OAAO,mBAAkB;YACzB,SAAS,EAAE,cAAa;YACxB,OAAO,EAAE,CAAC,QAAQ,EAAE,EAAE;gBACrB,MAAM,CAAC,SAAS,EAAE,CAAC;YACpB,CAAC;SACD,CAAC,CAAC;QAEH,2BAA2B;QAC3B,2BAAgB,CAAC,eAAe,CAAC,+BAAuB,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;QAEnF,+BAA+B;QAC/B,MAAM,QAAQ,GAAG,EAAE,KAAK,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAe,EAAE,IAAe,CAAC,EAAE,QAAQ,EAAE,eAAe,EAAE,CAAC;QAClG,sBAAY,CAAC,cAAc,CAAC,gBAAM,CAAC,cAAc,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE,EAAE,iCAAyB,EAAE,KAAK,EAAE,EAAE,KAAK,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAmB,EAAE,IAAoB,CAAC,EAAE,QAAQ,EAAE,oBAAoB,EAAE,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;QACpN,sBAAY,CAAC,cAAc,CAAC,gBAAM,CAAC,cAAc,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE,EAAE,iCAAyB,EAAE,KAAK,EAAE,EAAE,KAAK,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAmB,EAAE,IAAoB,CAAC,EAAE,QAAQ,EAAE,oBAAoB,EAAE,EAAE,QAAQ,EAAE,EAAE,IAAI,EAAE,yCAAiC,EAAE,CAAC,CAAC;QAC7P,sBAAY,CAAC,cAAc,CAAC,gBAAM,CAAC,cAAc,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE,EAAE,+BAAuB,EAAE,KAAK,EAAE,EAAE,KAAK,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAuB,EAAE,IAAyB,CAAC,EAAE,QAAQ,EAAE,yBAAyB,EAAE,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;QAChO,sBAAY,CAAC,cAAc,CAAC,gBAAM,CAAC,cAAc,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE,EAAE,wBAAwB,EAAE,KAAK,EAAE,EAAE,KAAK,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAyB,EAAE,IAA0B,CAAC,EAAE,QAAQ,EAAE,0BAA0B,EAAE,EAAE,QAAQ,EAAE,EAAE,IAAI,EAAE,yCAAiC,EAAE,CAAC,CAAC;IAC/Q,CAAC;IAnMD,oEAmMC","file":"notificationsCommands.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { RawContextKey, ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { KeybindingsRegistry, KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport { INotificationViewItem, isNotificationViewItem, NotificationsModel } from 'vs/workbench/common/notifications';\nimport { MenuRegistry, MenuId } from 'vs/platform/actions/common/actions';\nimport { localize } from 'vs/nls';\nimport { IListService, WorkbenchList } from 'vs/platform/list/browser/listService';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { NotificationMetrics, NotificationMetricsClassification, notificationToMetrics } from 'vs/workbench/browser/parts/notifications/notificationsTelemetry';\n\n// Center\nexport const SHOW_NOTIFICATIONS_CENTER = 'notifications.showList';\nexport const HIDE_NOTIFICATIONS_CENTER = 'notifications.hideList';\nconst TOGGLE_NOTIFICATIONS_CENTER = 'notifications.toggleList';\n\n// Toasts\nexport const HIDE_NOTIFICATION_TOAST = 'notifications.hideToasts';\nconst FOCUS_NOTIFICATION_TOAST = 'notifications.focusToasts';\nconst FOCUS_NEXT_NOTIFICATION_TOAST = 'notifications.focusNextToast';\nconst FOCUS_PREVIOUS_NOTIFICATION_TOAST = 'notifications.focusPreviousToast';\nconst FOCUS_FIRST_NOTIFICATION_TOAST = 'notifications.focusFirstToast';\nconst FOCUS_LAST_NOTIFICATION_TOAST = 'notifications.focusLastToast';\n\n// Notification\nexport const COLLAPSE_NOTIFICATION = 'notification.collapse';\nexport const EXPAND_NOTIFICATION = 'notification.expand';\nconst TOGGLE_NOTIFICATION = 'notification.toggle';\nexport const CLEAR_NOTIFICATION = 'notification.clear';\nexport const CLEAR_ALL_NOTIFICATIONS = 'notifications.clearAll';\n\nexport const NotificationFocusedContext = new RawContextKey<boolean>('notificationFocus', true, localize('notificationFocus', \"Whether a notification has keyboard focus\"));\nexport const NotificationsCenterVisibleContext = new RawContextKey<boolean>('notificationCenterVisible', false, localize('notificationCenterVisible', \"Whether the notifications center is visible\"));\nexport const NotificationsToastsVisibleContext = new RawContextKey<boolean>('notificationToastsVisible', false, localize('notificationToastsVisible', \"Whether a notification toast is visible\"));\n\nexport interface INotificationsCenterController {\n\treadonly isVisible: boolean;\n\n\tshow(): void;\n\thide(): void;\n\n\tclearAll(): void;\n}\n\nexport interface INotificationsToastController {\n\tfocus(): void;\n\tfocusNext(): void;\n\tfocusPrevious(): void;\n\tfocusFirst(): void;\n\tfocusLast(): void;\n\n\thide(): void;\n}\n\nexport function registerNotificationCommands(center: INotificationsCenterController, toasts: INotificationsToastController, model: NotificationsModel): void {\n\n\tfunction getNotificationFromContext(listService: IListService, context?: unknown): INotificationViewItem | undefined {\n\t\tif (isNotificationViewItem(context)) {\n\t\t\treturn context;\n\t\t}\n\n\t\tconst list = listService.lastFocusedList;\n\t\tif (list instanceof WorkbenchList) {\n\t\t\tconst focusedElement = list.getFocusedElements()[0];\n\t\t\tif (isNotificationViewItem(focusedElement)) {\n\t\t\t\treturn focusedElement;\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\t// Show Notifications Cneter\n\tCommandsRegistry.registerCommand(SHOW_NOTIFICATIONS_CENTER, () => {\n\t\ttoasts.hide();\n\t\tcenter.show();\n\t});\n\n\t// Hide Notifications Center\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: HIDE_NOTIFICATIONS_CENTER,\n\t\tweight: KeybindingWeight.WorkbenchContrib + 50,\n\t\twhen: NotificationsCenterVisibleContext,\n\t\tprimary: KeyCode.Escape,\n\t\thandler: accessor => {\n\t\t\tconst telemetryService = accessor.get(ITelemetryService);\n\t\t\tmodel.notifications.forEach(n => {\n\t\t\t\tif (n.visible) {\n\t\t\t\t\ttelemetryService.publicLog2<NotificationMetrics, NotificationMetricsClassification>('notification:hide', notificationToMetrics(n.message.original, n.sourceId, n.silent));\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tcenter.hide();\n\t\t}\n\t});\n\n\t// Toggle Notifications Center\n\tCommandsRegistry.registerCommand(TOGGLE_NOTIFICATIONS_CENTER, accessor => {\n\t\tif (center.isVisible) {\n\t\t\tcenter.hide();\n\t\t} else {\n\t\t\ttoasts.hide();\n\t\t\tcenter.show();\n\t\t}\n\t});\n\n\t// Clear Notification\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: CLEAR_NOTIFICATION,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: NotificationFocusedContext,\n\t\tprimary: KeyCode.Delete,\n\t\tmac: {\n\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.Backspace\n\t\t},\n\t\thandler: (accessor, args?) => {\n\t\t\tconst notification = getNotificationFromContext(accessor.get(IListService), args);\n\t\t\tif (notification && !notification.hasProgress) {\n\t\t\t\tnotification.close();\n\t\t\t}\n\t\t}\n\t});\n\n\t// Expand Notification\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: EXPAND_NOTIFICATION,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: NotificationFocusedContext,\n\t\tprimary: KeyCode.RightArrow,\n\t\thandler: (accessor, args?) => {\n\t\t\tconst notification = getNotificationFromContext(accessor.get(IListService), args);\n\t\t\tif (notification) {\n\t\t\t\tnotification.expand();\n\t\t\t}\n\t\t}\n\t});\n\n\t// Collapse Notification\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: COLLAPSE_NOTIFICATION,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: NotificationFocusedContext,\n\t\tprimary: KeyCode.LeftArrow,\n\t\thandler: (accessor, args?) => {\n\t\t\tconst notification = getNotificationFromContext(accessor.get(IListService), args);\n\t\t\tif (notification) {\n\t\t\t\tnotification.collapse();\n\t\t\t}\n\t\t}\n\t});\n\n\t// Toggle Notification\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: TOGGLE_NOTIFICATION,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: NotificationFocusedContext,\n\t\tprimary: KeyCode.Space,\n\t\tsecondary: [KeyCode.Enter],\n\t\thandler: accessor => {\n\t\t\tconst notification = getNotificationFromContext(accessor.get(IListService));\n\t\t\tif (notification) {\n\t\t\t\tnotification.toggle();\n\t\t\t}\n\t\t}\n\t});\n\n\t// Hide Toasts\n\tCommandsRegistry.registerCommand(HIDE_NOTIFICATION_TOAST, accessor => {\n\t\tconst telemetryService = accessor.get(ITelemetryService);\n\t\tmodel.notifications.forEach(n => {\n\t\t\tif (n.visible) {\n\t\t\t\ttelemetryService.publicLog2<NotificationMetrics, NotificationMetricsClassification>('notification:hide', notificationToMetrics(n.message.original, n.sourceId, n.silent));\n\t\t\t}\n\t\t});\n\t\ttoasts.hide();\n\t});\n\n\tKeybindingsRegistry.registerKeybindingRule({\n\t\tid: HIDE_NOTIFICATION_TOAST,\n\t\tweight: KeybindingWeight.WorkbenchContrib - 50, // lower when not focused (e.g. let editor suggest win over this command)\n\t\twhen: NotificationsToastsVisibleContext,\n\t\tprimary: KeyCode.Escape\n\t});\n\n\tKeybindingsRegistry.registerKeybindingRule({\n\t\tid: HIDE_NOTIFICATION_TOAST,\n\t\tweight: KeybindingWeight.WorkbenchContrib + 100, // higher when focused\n\t\twhen: ContextKeyExpr.and(NotificationsToastsVisibleContext, NotificationFocusedContext),\n\t\tprimary: KeyCode.Escape\n\t});\n\n\t// Focus Toasts\n\tCommandsRegistry.registerCommand(FOCUS_NOTIFICATION_TOAST, () => toasts.focus());\n\n\t// Focus Next Toast\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: FOCUS_NEXT_NOTIFICATION_TOAST,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: ContextKeyExpr.and(NotificationFocusedContext, NotificationsToastsVisibleContext),\n\t\tprimary: KeyCode.DownArrow,\n\t\thandler: (accessor) => {\n\t\t\ttoasts.focusNext();\n\t\t}\n\t});\n\n\t// Focus Previous Toast\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: FOCUS_PREVIOUS_NOTIFICATION_TOAST,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: ContextKeyExpr.and(NotificationFocusedContext, NotificationsToastsVisibleContext),\n\t\tprimary: KeyCode.UpArrow,\n\t\thandler: (accessor) => {\n\t\t\ttoasts.focusPrevious();\n\t\t}\n\t});\n\n\t// Focus First Toast\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: FOCUS_FIRST_NOTIFICATION_TOAST,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: ContextKeyExpr.and(NotificationFocusedContext, NotificationsToastsVisibleContext),\n\t\tprimary: KeyCode.PageUp,\n\t\tsecondary: [KeyCode.Home],\n\t\thandler: (accessor) => {\n\t\t\ttoasts.focusFirst();\n\t\t}\n\t});\n\n\t// Focus Last Toast\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: FOCUS_LAST_NOTIFICATION_TOAST,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: ContextKeyExpr.and(NotificationFocusedContext, NotificationsToastsVisibleContext),\n\t\tprimary: KeyCode.PageDown,\n\t\tsecondary: [KeyCode.End],\n\t\thandler: (accessor) => {\n\t\t\ttoasts.focusLast();\n\t\t}\n\t});\n\n\t/// Clear All Notifications\n\tCommandsRegistry.registerCommand(CLEAR_ALL_NOTIFICATIONS, () => center.clearAll());\n\n\t// Commands for Command Palette\n\tconst category = { value: localize('notifications', \"Notifications\"), original: 'Notifications' };\n\tMenuRegistry.appendMenuItem(MenuId.CommandPalette, { command: { id: SHOW_NOTIFICATIONS_CENTER, title: { value: localize('showNotifications', \"Show Notifications\"), original: 'Show Notifications' }, category } });\n\tMenuRegistry.appendMenuItem(MenuId.CommandPalette, { command: { id: HIDE_NOTIFICATIONS_CENTER, title: { value: localize('hideNotifications', \"Hide Notifications\"), original: 'Hide Notifications' }, category }, when: NotificationsCenterVisibleContext });\n\tMenuRegistry.appendMenuItem(MenuId.CommandPalette, { command: { id: CLEAR_ALL_NOTIFICATIONS, title: { value: localize('clearAllNotifications', \"Clear All Notifications\"), original: 'Clear All Notifications' }, category } });\n\tMenuRegistry.appendMenuItem(MenuId.CommandPalette, { command: { id: FOCUS_NOTIFICATION_TOAST, title: { value: localize('focusNotificationToasts', \"Focus Notification Toast\"), original: 'Focus Notification Toast' }, category }, when: NotificationsToastsVisibleContext });\n}\n"]}