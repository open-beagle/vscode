{"version":3,"sources":["vs/workbench/browser/parts/notifications/notificationsAlerts.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAUhG,MAAa,mBAAoB,SAAQ,sBAAU;QAElD,YAA6B,KAA0B;YACtD,KAAK,EAAE,CAAC;YADoB,UAAK,GAAL,KAAK,CAAqB;YAGtD,qCAAqC;YACrC,KAAK,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC;YAE3D,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAC1B,CAAC;QAEO,iBAAiB;YACxB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1F,CAAC;QAEO,uBAAuB,CAAC,CAA2B;YAC1D,IAAI,CAAC,CAAC,IAAI,gBAA+B,EAAE;gBAE1C,gCAAgC;gBAChC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;gBAE9B,iDAAiD;gBACjD,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,KAAK,uBAAQ,CAAC,KAAK,EAAE;oBACvC,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,YAAY,KAAK,EAAE;wBAC7C,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;qBACvC;yBAAM;wBACN,OAAO,CAAC,KAAK,CAAC,CAAA,GAAA,6BAAc,CAAA,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC;qBAC1E;iBACD;aACD;QACF,CAAC;QAEO,gBAAgB,CAAC,WAAkC;YAC1D,IAAI,WAAW,CAAC,MAAM,EAAE;gBACvB,OAAO;aACP;YAED,uDAAuD;YACvD,MAAM,QAAQ,GAAG,WAAW,CAAC,kBAAkB,CAAC,CAAC,CAAC,EAAE;gBACnD,IAAI,CAAC,CAAC,IAAI,oBAAkD,EAAE;oBAC7D,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;iBACrC;YACF,CAAC,CAAC,CAAC;YAEH,aAAK,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC,CAAC;YAE7D,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;QACtC,CAAC;QAEO,kBAAkB,CAAC,WAAkC;YAC5D,IAAI,SAAiB,CAAC;YACtB,IAAI,WAAW,CAAC,QAAQ,KAAK,uBAAQ,CAAC,KAAK,EAAE;gBAC5C,SAAS,GAAG,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAmB,EAAE,IAAY,EAAE,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;aACnG;iBAAM,IAAI,WAAW,CAAC,QAAQ,KAAK,uBAAQ,CAAC,OAAO,EAAE;gBACrD,SAAS,GAAG,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAqB,EAAE,IAAc,EAAE,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;aACvG;iBAAM;gBACN,SAAS,GAAG,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAkB,EAAE,IAAW,EAAE,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;aACjG;YAED,CAAA,GAAA,YAAK,CAAA,CAAC,SAAS,CAAC,CAAC;QAClB,CAAC;KACD;IA7DD,kDA6DC","file":"notificationsAlerts.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { alert } from 'vs/base/browser/ui/aria/aria';\nimport { localize } from 'vs/nls';\nimport { INotificationViewItem, INotificationsModel, NotificationChangeType, INotificationChangeEvent, NotificationViewItemContentChangeKind } from 'vs/workbench/common/notifications';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { toErrorMessage } from 'vs/base/common/errorMessage';\nimport { Severity } from 'vs/platform/notification/common/notification';\nimport { Event } from 'vs/base/common/event';\n\nexport class NotificationsAlerts extends Disposable {\n\n\tconstructor(private readonly model: INotificationsModel) {\n\t\tsuper();\n\n\t\t// Alert initial notifications if any\n\t\tmodel.notifications.forEach(n => this.triggerAriaAlert(n));\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.model.onDidChangeNotification(e => this.onDidChangeNotification(e)));\n\t}\n\n\tprivate onDidChangeNotification(e: INotificationChangeEvent): void {\n\t\tif (e.kind === NotificationChangeType.ADD) {\n\n\t\t\t// ARIA alert for screen readers\n\t\t\tthis.triggerAriaAlert(e.item);\n\n\t\t\t// Always log errors to console with full details\n\t\t\tif (e.item.severity === Severity.Error) {\n\t\t\t\tif (e.item.message.original instanceof Error) {\n\t\t\t\t\tconsole.error(e.item.message.original);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error(toErrorMessage(e.item.message.linkedText.toString(), true));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate triggerAriaAlert(notifiation: INotificationViewItem): void {\n\t\tif (notifiation.silent) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Trigger the alert again whenever the message changes\n\t\tconst listener = notifiation.onDidChangeContent(e => {\n\t\t\tif (e.kind === NotificationViewItemContentChangeKind.MESSAGE) {\n\t\t\t\tthis.doTriggerAriaAlert(notifiation);\n\t\t\t}\n\t\t});\n\n\t\tEvent.once(notifiation.onDidClose)(() => listener.dispose());\n\n\t\tthis.doTriggerAriaAlert(notifiation);\n\t}\n\n\tprivate doTriggerAriaAlert(notifiation: INotificationViewItem): void {\n\t\tlet alertText: string;\n\t\tif (notifiation.severity === Severity.Error) {\n\t\t\talertText = localize('alertErrorMessage', \"Error: {0}\", notifiation.message.linkedText.toString());\n\t\t} else if (notifiation.severity === Severity.Warning) {\n\t\t\talertText = localize('alertWarningMessage', \"Warning: {0}\", notifiation.message.linkedText.toString());\n\t\t} else {\n\t\t\talertText = localize('alertInfoMessage', \"Info: {0}\", notifiation.message.linkedText.toString());\n\t\t}\n\n\t\talert(alertText);\n\t}\n}\n"]}