{"version":3,"sources":["vs/workbench/browser/parts/panel/panelActions.ts"],"names":[],"mappings":"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","file":"panelActions.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./media/panelpart';\nimport { localize } from 'vs/nls';\nimport { KeyMod, KeyCode } from 'vs/base/common/keyCodes';\nimport { Action } from 'vs/base/common/actions';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { SyncActionDescriptor, MenuId, MenuRegistry, registerAction2, Action2 } from 'vs/platform/actions/common/actions';\nimport { IWorkbenchActionRegistry, Extensions as WorkbenchExtensions, CATEGORIES } from 'vs/workbench/common/actions';\nimport { IPanelService } from 'vs/workbench/services/panel/common/panelService';\nimport { IWorkbenchLayoutService, Parts, Position, positionToString } from 'vs/workbench/services/layout/browser/layoutService';\nimport { ActivityAction, ToggleCompositePinnedAction, ICompositeBar } from 'vs/workbench/browser/parts/compositeBarActions';\nimport { IActivity } from 'vs/workbench/common/activity';\nimport { ActivePanelContext, PanelMaximizedContext, PanelPositionContext, PanelVisibleContext } from 'vs/workbench/common/panel';\nimport { ContextKeyExpr, ContextKeyExpression } from 'vs/platform/contextkey/common/contextkey';\nimport { Codicon } from 'vs/base/common/codicons';\nimport { registerIcon } from 'vs/platform/theme/common/iconRegistry';\nimport { ServicesAccessor } from 'vs/editor/browser/editorExtensions';\nimport { ViewContainerLocationToString, ViewContainerLocation } from 'vs/workbench/common/views';\n\nconst maximizeIcon = registerIcon('panel-maximize', Codicon.chevronUp, localize('maximizeIcon', 'Icon to maximize a panel.'));\nconst restoreIcon = registerIcon('panel-restore', Codicon.chevronDown, localize('restoreIcon', 'Icon to restore a panel.'));\nconst closeIcon = registerIcon('panel-close', Codicon.close, localize('closeIcon', 'Icon to close a panel.'));\n\nexport class TogglePanelAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.togglePanel';\n\tstatic readonly LABEL = localize('togglePanel', \"Toggle Panel\");\n\n\tconstructor(\n\t\tid: string,\n\t\tname: string,\n\t\t@IWorkbenchLayoutService private readonly layoutService: IWorkbenchLayoutService\n\t) {\n\t\tsuper(id, name, layoutService.isVisible(Parts.PANEL_PART) ? 'panel expanded' : 'panel');\n\t}\n\n\toverride async run(): Promise<void> {\n\t\tthis.layoutService.setPanelHidden(this.layoutService.isVisible(Parts.PANEL_PART));\n\t}\n}\n\nclass FocusPanelAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.focusPanel';\n\tstatic readonly LABEL = localize('focusPanel', \"Focus into Panel\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IPanelService private readonly panelService: IPanelService,\n\t\t@IWorkbenchLayoutService private readonly layoutService: IWorkbenchLayoutService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\toverride async run(): Promise<void> {\n\n\t\t// Show panel\n\t\tif (!this.layoutService.isVisible(Parts.PANEL_PART)) {\n\t\t\tthis.layoutService.setPanelHidden(false);\n\t\t}\n\n\t\t// Focus into active panel\n\t\tlet panel = this.panelService.getActivePanel();\n\t\tif (panel) {\n\t\t\tpanel.focus();\n\t\t}\n\t}\n}\n\nconst PositionPanelActionId = {\n\tLEFT: 'workbench.action.positionPanelLeft',\n\tRIGHT: 'workbench.action.positionPanelRight',\n\tBOTTOM: 'workbench.action.positionPanelBottom',\n};\n\ninterface PanelActionConfig<T> {\n\tid: string;\n\twhen: ContextKeyExpression;\n\talias: string;\n\tlabel: string;\n\tvalue: T;\n}\n\nfunction createPositionPanelActionConfig(id: string, alias: string, label: string, position: Position): PanelActionConfig<Position> {\n\treturn {\n\t\tid,\n\t\talias,\n\t\tlabel,\n\t\tvalue: position,\n\t\twhen: PanelPositionContext.notEqualsTo(positionToString(position))\n\t};\n}\n\nexport const PositionPanelActionConfigs: PanelActionConfig<Position>[] = [\n\tcreatePositionPanelActionConfig(PositionPanelActionId.LEFT, 'View: Move Panel Left', localize('positionPanelLeft', 'Move Panel Left'), Position.LEFT),\n\tcreatePositionPanelActionConfig(PositionPanelActionId.RIGHT, 'View: Move Panel Right', localize('positionPanelRight', 'Move Panel Right'), Position.RIGHT),\n\tcreatePositionPanelActionConfig(PositionPanelActionId.BOTTOM, 'View: Move Panel To Bottom', localize('positionPanelBottom', 'Move Panel To Bottom'), Position.BOTTOM),\n];\n\nconst positionByActionId = new Map(PositionPanelActionConfigs.map(config => [config.id, config.value]));\n\nexport class SetPanelPositionAction extends Action {\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IWorkbenchLayoutService private readonly layoutService: IWorkbenchLayoutService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\toverride async run(): Promise<void> {\n\t\tconst position = positionByActionId.get(this.id);\n\t\tthis.layoutService.setPanelPosition(position === undefined ? Position.BOTTOM : position);\n\t}\n}\n\nexport class PanelActivityAction extends ActivityAction {\n\n\tconstructor(\n\t\tactivity: IActivity,\n\t\t@IPanelService private readonly panelService: IPanelService\n\t) {\n\t\tsuper(activity);\n\t}\n\n\toverride async run(): Promise<void> {\n\t\tawait this.panelService.openPanel(this.activity.id, true);\n\t\tthis.activate();\n\t}\n\n\tsetActivity(activity: IActivity): void {\n\t\tthis.activity = activity;\n\t}\n}\n\nexport class PlaceHolderPanelActivityAction extends PanelActivityAction {\n\n\tconstructor(\n\t\tid: string,\n\t\t@IPanelService panelService: IPanelService\n\t) {\n\t\tsuper({ id, name: id }, panelService);\n\t}\n}\n\nexport class PlaceHolderToggleCompositePinnedAction extends ToggleCompositePinnedAction {\n\n\tconstructor(id: string, compositeBar: ICompositeBar) {\n\t\tsuper({ id, name: id, cssClass: undefined }, compositeBar);\n\t}\n\n\tsetActivity(activity: IActivity): void {\n\t\tthis.label = activity.name;\n\t}\n}\n\nexport class SwitchPanelViewAction extends Action {\n\n\tconstructor(\n\t\tid: string,\n\t\tname: string,\n\t\t@IPanelService private readonly panelService: IPanelService\n\t) {\n\t\tsuper(id, name);\n\t}\n\n\toverride async run(offset: number): Promise<void> {\n\t\tconst pinnedPanels = this.panelService.getPinnedPanels();\n\t\tconst activePanel = this.panelService.getActivePanel();\n\t\tif (!activePanel) {\n\t\t\treturn;\n\t\t}\n\t\tlet targetPanelId: string | undefined;\n\t\tfor (let i = 0; i < pinnedPanels.length; i++) {\n\t\t\tif (pinnedPanels[i].id === activePanel.getId()) {\n\t\t\t\ttargetPanelId = pinnedPanels[(i + pinnedPanels.length + offset) % pinnedPanels.length].id;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (typeof targetPanelId === 'string') {\n\t\t\tawait this.panelService.openPanel(targetPanelId, true);\n\t\t}\n\t}\n}\n\nexport class PreviousPanelViewAction extends SwitchPanelViewAction {\n\n\tstatic readonly ID = 'workbench.action.previousPanelView';\n\tstatic readonly LABEL = localize('previousPanelView', 'Previous Panel View');\n\n\tconstructor(\n\t\tid: string,\n\t\tname: string,\n\t\t@IPanelService panelService: IPanelService\n\t) {\n\t\tsuper(id, name, panelService);\n\t}\n\n\toverride run(): Promise<void> {\n\t\treturn super.run(-1);\n\t}\n}\n\nexport class NextPanelViewAction extends SwitchPanelViewAction {\n\n\tstatic readonly ID = 'workbench.action.nextPanelView';\n\tstatic readonly LABEL = localize('nextPanelView', 'Next Panel View');\n\n\tconstructor(\n\t\tid: string,\n\t\tname: string,\n\t\t@IPanelService panelService: IPanelService\n\t) {\n\t\tsuper(id, name, panelService);\n\t}\n\n\toverride run(): Promise<void> {\n\t\treturn super.run(1);\n\t}\n}\n\nconst actionRegistry = Registry.as<IWorkbenchActionRegistry>(WorkbenchExtensions.WorkbenchActions);\nactionRegistry.registerWorkbenchAction(SyncActionDescriptor.from(TogglePanelAction, { primary: KeyMod.CtrlCmd | KeyCode.KEY_J }), 'View: Toggle Panel', CATEGORIES.View.value);\nactionRegistry.registerWorkbenchAction(SyncActionDescriptor.from(FocusPanelAction), 'View: Focus into Panel', CATEGORIES.View.value);\nactionRegistry.registerWorkbenchAction(SyncActionDescriptor.from(PreviousPanelViewAction), 'View: Previous Panel View', CATEGORIES.View.value);\nactionRegistry.registerWorkbenchAction(SyncActionDescriptor.from(NextPanelViewAction), 'View: Next Panel View', CATEGORIES.View.value);\n\nregisterAction2(class extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.action.toggleMaximizedPanel',\n\t\t\ttitle: { value: localize('toggleMaximizedPanel', \"Toggle Maximized Panel\"), original: 'Toggle Maximized Panel' },\n\t\t\ttooltip: localize('maximizePanel', \"Maximize Panel Size\"),\n\t\t\tcategory: CATEGORIES.View,\n\t\t\tf1: true,\n\t\t\ticon: maximizeIcon,\n\t\t\ttoggled: { condition: PanelMaximizedContext, icon: restoreIcon, tooltip: localize('minimizePanel', \"Restore Panel Size\") },\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.PanelTitle,\n\t\t\t\tgroup: 'navigation',\n\t\t\t\torder: 1\n\t\t\t}]\n\t\t});\n\t}\n\trun(accessor: ServicesAccessor) {\n\t\tconst layoutService = accessor.get(IWorkbenchLayoutService);\n\t\tif (!layoutService.isVisible(Parts.PANEL_PART)) {\n\t\t\tlayoutService.setPanelHidden(false);\n\t\t\t// If the panel is not already maximized, maximize it\n\t\t\tif (!layoutService.isPanelMaximized()) {\n\t\t\t\tlayoutService.toggleMaximizedPanel();\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tlayoutService.toggleMaximizedPanel();\n\t\t}\n\t}\n});\n\nregisterAction2(class extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.action.closePanel',\n\t\t\ttitle: { value: localize('closePanel', \"Close Panel\"), original: 'Close Panel' },\n\t\t\tcategory: CATEGORIES.View,\n\t\t\ticon: closeIcon,\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\twhen: PanelVisibleContext,\n\t\t\t}, {\n\t\t\t\tid: MenuId.PanelTitle,\n\t\t\t\tgroup: 'navigation',\n\t\t\t\torder: 2\n\t\t\t}]\n\t\t});\n\t}\n\trun(accessor: ServicesAccessor) {\n\t\taccessor.get(IWorkbenchLayoutService).setPanelHidden(true);\n\t}\n});\n\nMenuRegistry.appendMenuItems([\n\t{\n\t\tid: MenuId.MenubarAppearanceMenu,\n\t\titem: {\n\t\t\tgroup: '2_workbench_layout',\n\t\t\tcommand: {\n\t\t\t\tid: TogglePanelAction.ID,\n\t\t\t\ttitle: localize({ key: 'miShowPanel', comment: ['&& denotes a mnemonic'] }, \"Show &&Panel\"),\n\t\t\t\ttoggled: ActivePanelContext\n\t\t\t},\n\t\t\torder: 5\n\t\t}\n\t}, {\n\t\tid: MenuId.ViewTitleContext,\n\t\titem: {\n\t\t\tgroup: '3_workbench_layout_move',\n\t\t\tcommand: {\n\t\t\t\tid: TogglePanelAction.ID,\n\t\t\t\ttitle: { value: localize('hidePanel', \"Hide Panel\"), original: 'Hide Panel' },\n\t\t\t},\n\t\t\twhen: ContextKeyExpr.and(PanelVisibleContext, ContextKeyExpr.equals('viewLocation', ViewContainerLocationToString(ViewContainerLocation.Panel))),\n\t\t\torder: 2\n\t\t}\n\t}\n]);\n\nfunction registerPositionPanelActionById(config: PanelActionConfig<Position>) {\n\tconst { id, label, alias, when } = config;\n\t// register the workbench action\n\tactionRegistry.registerWorkbenchAction(SyncActionDescriptor.create(SetPanelPositionAction, id, label), alias, CATEGORIES.View.value, when);\n\t// register as a menu item\n\tMenuRegistry.appendMenuItems([{\n\t\tid: MenuId.MenubarAppearanceMenu,\n\t\titem: {\n\t\t\tgroup: '3_workbench_layout_move',\n\t\t\tcommand: {\n\t\t\t\tid,\n\t\t\t\ttitle: label\n\t\t\t},\n\t\t\twhen,\n\t\t\torder: 5\n\t\t}\n\t}, {\n\t\tid: MenuId.ViewTitleContext,\n\t\titem: {\n\t\t\tgroup: '3_workbench_layout_move',\n\t\t\tcommand: {\n\t\t\t\tid: id,\n\t\t\t\ttitle: label,\n\t\t\t},\n\t\t\twhen: ContextKeyExpr.and(when, ContextKeyExpr.equals('viewLocation', ViewContainerLocationToString(ViewContainerLocation.Panel))),\n\t\t\torder: 1\n\t\t}\n\t}]);\n}\n\n// register each position panel action\nPositionPanelActionConfigs.forEach(registerPositionPanelActionById);\n"]}