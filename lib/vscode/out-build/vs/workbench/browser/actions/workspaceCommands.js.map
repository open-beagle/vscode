{"version":3,"sources":["vs/workbench/browser/actions/workspaceCommands.ts"],"names":[],"mappings":"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","file":"workspaceCommands.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { IWorkspaceEditingService } from 'vs/workbench/services/workspaces/common/workspaceEditing';\nimport { dirname, removeTrailingPathSeparator } from 'vs/base/common/resources';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { mnemonicButtonLabel } from 'vs/base/common/labels';\nimport { CommandsRegistry, ICommandService } from 'vs/platform/commands/common/commands';\nimport { FileKind } from 'vs/platform/files/common/files';\nimport { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { ILabelService } from 'vs/platform/label/common/label';\nimport { IQuickInputService, IPickOptions, IQuickPickItem } from 'vs/platform/quickinput/common/quickInput';\nimport { getIconClasses } from 'vs/editor/common/services/getIconClasses';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { IFileDialogService, IPickAndOpenOptions } from 'vs/platform/dialogs/common/dialogs';\nimport { URI } from 'vs/base/common/uri';\nimport { Schemas } from 'vs/base/common/network';\nimport { IOpenWindowOptions, IWindowOpenable } from 'vs/platform/windows/common/windows';\nimport { hasWorkspaceFileExtension } from 'vs/platform/workspaces/common/workspaces';\nimport { IPathService } from 'vs/workbench/services/path/common/pathService';\n\nexport const ADD_ROOT_FOLDER_COMMAND_ID = 'addRootFolder';\nexport const ADD_ROOT_FOLDER_LABEL = localize('addFolderToWorkspace', \"Add Folder to Workspace...\");\n\nexport const PICK_WORKSPACE_FOLDER_COMMAND_ID = '_workbench.pickWorkspaceFolder';\n\n// Command registration\n\nCommandsRegistry.registerCommand({\n\tid: 'workbench.action.files.openFileFolderInNewWindow',\n\thandler: (accessor: ServicesAccessor) => accessor.get(IFileDialogService).pickFileFolderAndOpen({ forceNewWindow: true })\n});\n\nCommandsRegistry.registerCommand({\n\tid: '_files.pickFolderAndOpen',\n\thandler: (accessor: ServicesAccessor, options: { forceNewWindow: boolean }) => accessor.get(IFileDialogService).pickFolderAndOpen(options)\n});\n\nCommandsRegistry.registerCommand({\n\tid: 'workbench.action.files.openFolderInNewWindow',\n\thandler: (accessor: ServicesAccessor) => accessor.get(IFileDialogService).pickFolderAndOpen({ forceNewWindow: true })\n});\n\nCommandsRegistry.registerCommand({\n\tid: 'workbench.action.files.openFileInNewWindow',\n\thandler: (accessor: ServicesAccessor) => accessor.get(IFileDialogService).pickFileAndOpen({ forceNewWindow: true })\n});\n\nCommandsRegistry.registerCommand({\n\tid: 'workbench.action.openWorkspaceInNewWindow',\n\thandler: (accessor: ServicesAccessor) => accessor.get(IFileDialogService).pickWorkspaceAndOpen({ forceNewWindow: true })\n});\n\nCommandsRegistry.registerCommand({\n\tid: ADD_ROOT_FOLDER_COMMAND_ID,\n\thandler: async (accessor) => {\n\t\tconst workspaceEditingService = accessor.get(IWorkspaceEditingService);\n\t\tconst dialogsService = accessor.get(IFileDialogService);\n\t\tconst pathService = accessor.get(IPathService);\n\t\tconst folders = await dialogsService.showOpenDialog({\n\t\t\topenLabel: mnemonicButtonLabel(localize({ key: 'add', comment: ['&& denotes a mnemonic'] }, \"&&Add\")),\n\t\t\ttitle: localize('addFolderToWorkspaceTitle', \"Add Folder to Workspace\"),\n\t\t\tcanSelectFolders: true,\n\t\t\tcanSelectMany: true,\n\t\t\tdefaultUri: await dialogsService.defaultFolderPath(),\n\t\t\tavailableFileSystems: [pathService.defaultUriScheme]\n\t\t});\n\n\t\tif (!folders || !folders.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait workspaceEditingService.addFolders(folders.map(folder => ({ uri: removeTrailingPathSeparator(folder) })));\n\t}\n});\n\nCommandsRegistry.registerCommand(PICK_WORKSPACE_FOLDER_COMMAND_ID, async function (accessor, args?: [IPickOptions<IQuickPickItem>, CancellationToken]) {\n\tconst quickInputService = accessor.get(IQuickInputService);\n\tconst labelService = accessor.get(ILabelService);\n\tconst contextService = accessor.get(IWorkspaceContextService);\n\tconst modelService = accessor.get(IModelService);\n\tconst modeService = accessor.get(IModeService);\n\n\tconst folders = contextService.getWorkspace().folders;\n\tif (!folders.length) {\n\t\treturn;\n\t}\n\n\tconst folderPicks: IQuickPickItem[] = folders.map(folder => {\n\t\treturn {\n\t\t\tlabel: folder.name,\n\t\t\tdescription: labelService.getUriLabel(dirname(folder.uri), { relative: true }),\n\t\t\tfolder,\n\t\t\ticonClasses: getIconClasses(modelService, modeService, folder.uri, FileKind.ROOT_FOLDER)\n\t\t};\n\t});\n\n\tconst options: IPickOptions<IQuickPickItem> = (args ? args[0] : undefined) || Object.create(null);\n\n\tif (!options.activeItem) {\n\t\toptions.activeItem = folderPicks[0];\n\t}\n\n\tif (!options.placeHolder) {\n\t\toptions.placeHolder = localize('workspaceFolderPickerPlaceholder', \"Select workspace folder\");\n\t}\n\n\tif (typeof options.matchOnDescription !== 'boolean') {\n\t\toptions.matchOnDescription = true;\n\t}\n\n\tconst token: CancellationToken = (args ? args[1] : undefined) || CancellationToken.None;\n\tconst pick = await quickInputService.pick(folderPicks, options, token);\n\n\tif (pick) {\n\t\treturn folders[folderPicks.indexOf(pick)];\n\t}\n\n\treturn;\n});\n\n// API Command registration\n\ninterface IOpenFolderAPICommandOptions {\n\tforceNewWindow?: boolean;\n\tforceReuseWindow?: boolean;\n\tnoRecentEntry?: boolean;\n\tforceLocalWindow?: boolean;\n}\n\nCommandsRegistry.registerCommand({\n\tid: 'vscode.openFolder',\n\thandler: (accessor: ServicesAccessor, uri?: URI, arg?: boolean | IOpenFolderAPICommandOptions) => {\n\t\tconst commandService = accessor.get(ICommandService);\n\t\t// Be compatible to previous args by converting to options\n\t\tif (typeof arg === 'boolean') {\n\t\t\targ = { forceNewWindow: arg };\n\t\t}\n\n\t\t// Without URI, ask to pick a folder or workspace to open\n\t\tif (!uri) {\n\t\t\tconst options: IPickAndOpenOptions = {\n\t\t\t\tforceNewWindow: arg?.forceNewWindow\n\t\t\t};\n\t\t\tif (arg?.forceLocalWindow) {\n\t\t\t\toptions.remoteAuthority = null;\n\t\t\t\toptions.availableFileSystems = ['file'];\n\t\t\t}\n\t\t\treturn commandService.executeCommand('_files.pickFolderAndOpen', options);\n\t\t}\n\n\t\turi = URI.revive(uri);\n\n\t\tconst options: IOpenWindowOptions = {\n\t\t\tforceNewWindow: arg?.forceNewWindow,\n\t\t\tforceReuseWindow: arg?.forceReuseWindow,\n\t\t\tnoRecentEntry: arg?.noRecentEntry,\n\t\t\tremoteAuthority: arg?.forceLocalWindow ? null : undefined\n\t\t};\n\t\tconst uriToOpen: IWindowOpenable = (hasWorkspaceFileExtension(uri) || uri.scheme === Schemas.untitled) ? { workspaceUri: uri } : { folderUri: uri };\n\t\treturn commandService.executeCommand('_files.windowOpen', [uriToOpen], options);\n\t},\n\tdescription: {\n\t\tdescription: 'Open a folder or workspace in the current window or new window depending on the newWindow argument. Note that opening in the same window will shutdown the current extension host process and start a new one on the given folder/workspace unless the newWindow parameter is set to true.',\n\t\targs: [\n\t\t\t{\n\t\t\t\tname: 'uri', description: '(optional) Uri of the folder or workspace file to open. If not provided, a native dialog will ask the user for the folder',\n\t\t\t\tconstraint: (value: any) => value === undefined || value === null || value instanceof URI\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'options',\n\t\t\t\tdescription: '(optional) Options. Object with the following properties: ' +\n\t\t\t\t\t'`forceNewWindow`: Whether to open the folder/workspace in a new window or the same. Defaults to opening in the same window. ' +\n\t\t\t\t\t'`forceReuseWindow`: Whether to force opening the folder/workspace in the same window.  Defaults to false. ' +\n\t\t\t\t\t'`noRecentEntry`: Whether the opened URI will appear in the \\'Open Recent\\' list. Defaults to false. ' +\n\t\t\t\t\t'Note, for backward compatibility, options can also be of type boolean, representing the `forceNewWindow` setting.',\n\t\t\t\tconstraint: (value: any) => value === undefined || typeof value === 'object' || typeof value === 'boolean'\n\t\t\t}\n\t\t]\n\t}\n});\n"]}