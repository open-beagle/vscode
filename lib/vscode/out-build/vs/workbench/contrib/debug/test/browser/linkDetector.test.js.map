{"version":3,"file":"linkDetector.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/debug/test/browser/linkDetector.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { TestInstantiationService } from 'vs/platform/instantiation/test/common/instantiationServiceMock';\nimport { workbenchInstantiationService } from 'vs/workbench/test/browser/workbenchTestServices';\nimport { LinkDetector } from 'vs/workbench/contrib/debug/browser/linkDetector';\nimport { isWindows } from 'vs/base/common/platform';\nimport { WorkspaceFolder } from 'vs/platform/workspace/common/workspace';\nimport { URI } from 'vs/base/common/uri';\nimport { ITunnelService } from 'vs/platform/remote/common/tunnel';\n\nsuite('Debug - Link Detector', () => {\n\n\tlet linkDetector: LinkDetector;\n\n\t/**\n\t * Instantiate a {@link LinkDetector} for use by the functions being tested.\n\t */\n\tsetup(() => {\n\t\tconst instantiationService: TestInstantiationService = <TestInstantiationService>workbenchInstantiationService();\n\t\tinstantiationService.stub(ITunnelService, { canTunnel: () => false });\n\t\tlinkDetector = instantiationService.createInstance(LinkDetector);\n\t});\n\n\t/**\n\t * Assert that a given Element is an anchor element.\n\t *\n\t * @param element The Element to verify.\n\t */\n\tfunction assertElementIsLink(element: Element) {\n\t\tassert(element instanceof HTMLAnchorElement);\n\t}\n\n\ttest('noLinks', () => {\n\t\tconst input = 'I am a string';\n\t\tconst expectedOutput = '<span>I am a string</span>';\n\t\tconst output = linkDetector.linkify(input);\n\n\t\tassert.strictEqual(0, output.children.length);\n\t\tassert.strictEqual('SPAN', output.tagName);\n\t\tassert.strictEqual(expectedOutput, output.outerHTML);\n\t});\n\n\ttest('trailingNewline', () => {\n\t\tconst input = 'I am a string\\n';\n\t\tconst expectedOutput = '<span>I am a string\\n</span>';\n\t\tconst output = linkDetector.linkify(input);\n\n\t\tassert.strictEqual(0, output.children.length);\n\t\tassert.strictEqual('SPAN', output.tagName);\n\t\tassert.strictEqual(expectedOutput, output.outerHTML);\n\t});\n\n\ttest('trailingNewlineSplit', () => {\n\t\tconst input = 'I am a string\\n';\n\t\tconst expectedOutput = '<span>I am a string\\n</span>';\n\t\tconst output = linkDetector.linkify(input, true);\n\n\t\tassert.strictEqual(0, output.children.length);\n\t\tassert.strictEqual('SPAN', output.tagName);\n\t\tassert.strictEqual(expectedOutput, output.outerHTML);\n\t});\n\n\ttest('singleLineLink', () => {\n\t\tconst input = isWindows ? 'C:\\\\foo\\\\bar.js:12:34' : '/Users/foo/bar.js:12:34';\n\t\tconst expectedOutput = isWindows ? '<span><a tabindex=\"0\">C:\\\\foo\\\\bar.js:12:34<\\/a><\\/span>' : '<span><a tabindex=\"0\">/Users/foo/bar.js:12:34<\\/a><\\/span>';\n\t\tconst output = linkDetector.linkify(input);\n\n\t\tassert.strictEqual(1, output.children.length);\n\t\tassert.strictEqual('SPAN', output.tagName);\n\t\tassert.strictEqual('A', output.firstElementChild!.tagName);\n\t\tassert.strictEqual(expectedOutput, output.outerHTML);\n\t\tassertElementIsLink(output.firstElementChild!);\n\t\tassert.strictEqual(isWindows ? 'C:\\\\foo\\\\bar.js:12:34' : '/Users/foo/bar.js:12:34', output.firstElementChild!.textContent);\n\t});\n\n\ttest('relativeLink', () => {\n\t\tconst input = '\\./foo/bar.js';\n\t\tconst expectedOutput = '<span>\\./foo/bar.js</span>';\n\t\tconst output = linkDetector.linkify(input);\n\n\t\tassert.strictEqual(0, output.children.length);\n\t\tassert.strictEqual('SPAN', output.tagName);\n\t\tassert.strictEqual(expectedOutput, output.outerHTML);\n\t});\n\n\ttest('relativeLinkWithWorkspace', async () => {\n\t\tconst input = '\\./foo/bar.js';\n\t\tconst output = linkDetector.linkify(input, false, new WorkspaceFolder({ uri: URI.file('/path/to/workspace'), name: 'ws', index: 0 }));\n\t\tassert.strictEqual('SPAN', output.tagName);\n\t\tassert.ok(output.outerHTML.indexOf('link') >= 0);\n\t});\n\n\ttest('singleLineLinkAndText', function () {\n\t\tconst input = isWindows ? 'The link: C:/foo/bar.js:12:34' : 'The link: /Users/foo/bar.js:12:34';\n\t\tconst expectedOutput = /^<span>The link: <a tabindex=\"0\">.*\\/foo\\/bar.js:12:34<\\/a><\\/span>$/;\n\t\tconst output = linkDetector.linkify(input);\n\n\t\tassert.strictEqual(1, output.children.length);\n\t\tassert.strictEqual('SPAN', output.tagName);\n\t\tassert.strictEqual('A', output.children[0].tagName);\n\t\tassert(expectedOutput.test(output.outerHTML));\n\t\tassertElementIsLink(output.children[0]);\n\t\tassert.strictEqual(isWindows ? 'C:/foo/bar.js:12:34' : '/Users/foo/bar.js:12:34', output.children[0].textContent);\n\t});\n\n\ttest('singleLineMultipleLinks', () => {\n\t\tconst input = isWindows ? 'Here is a link C:/foo/bar.js:12:34 and here is another D:/boo/far.js:56:78' :\n\t\t\t'Here is a link /Users/foo/bar.js:12:34 and here is another /Users/boo/far.js:56:78';\n\t\tconst expectedOutput = /^<span>Here is a link <a tabindex=\"0\">.*\\/foo\\/bar.js:12:34<\\/a> and here is another <a tabindex=\"0\">.*\\/boo\\/far.js:56:78<\\/a><\\/span>$/;\n\t\tconst output = linkDetector.linkify(input);\n\n\t\tassert.strictEqual(2, output.children.length);\n\t\tassert.strictEqual('SPAN', output.tagName);\n\t\tassert.strictEqual('A', output.children[0].tagName);\n\t\tassert.strictEqual('A', output.children[1].tagName);\n\t\tassert(expectedOutput.test(output.outerHTML));\n\t\tassertElementIsLink(output.children[0]);\n\t\tassertElementIsLink(output.children[1]);\n\t\tassert.strictEqual(isWindows ? 'C:/foo/bar.js:12:34' : '/Users/foo/bar.js:12:34', output.children[0].textContent);\n\t\tassert.strictEqual(isWindows ? 'D:/boo/far.js:56:78' : '/Users/boo/far.js:56:78', output.children[1].textContent);\n\t});\n\n\ttest('multilineNoLinks', () => {\n\t\tconst input = 'Line one\\nLine two\\nLine three';\n\t\tconst expectedOutput = /^<span><span>Line one\\n<\\/span><span>Line two\\n<\\/span><span>Line three<\\/span><\\/span>$/;\n\t\tconst output = linkDetector.linkify(input, true);\n\n\t\tassert.strictEqual(3, output.children.length);\n\t\tassert.strictEqual('SPAN', output.tagName);\n\t\tassert.strictEqual('SPAN', output.children[0].tagName);\n\t\tassert.strictEqual('SPAN', output.children[1].tagName);\n\t\tassert.strictEqual('SPAN', output.children[2].tagName);\n\t\tassert(expectedOutput.test(output.outerHTML));\n\t});\n\n\ttest('multilineTrailingNewline', () => {\n\t\tconst input = 'I am a string\\nAnd I am another\\n';\n\t\tconst expectedOutput = '<span><span>I am a string\\n<\\/span><span>And I am another\\n<\\/span><\\/span>';\n\t\tconst output = linkDetector.linkify(input, true);\n\n\t\tassert.strictEqual(2, output.children.length);\n\t\tassert.strictEqual('SPAN', output.tagName);\n\t\tassert.strictEqual('SPAN', output.children[0].tagName);\n\t\tassert.strictEqual('SPAN', output.children[1].tagName);\n\t\tassert.strictEqual(expectedOutput, output.outerHTML);\n\t});\n\n\ttest('multilineWithLinks', () => {\n\t\tconst input = isWindows ? 'I have a link for you\\nHere it is: C:/foo/bar.js:12:34\\nCool, huh?' :\n\t\t\t'I have a link for you\\nHere it is: /Users/foo/bar.js:12:34\\nCool, huh?';\n\t\tconst expectedOutput = /^<span><span>I have a link for you\\n<\\/span><span>Here it is: <a tabindex=\"0\">.*\\/foo\\/bar.js:12:34<\\/a>\\n<\\/span><span>Cool, huh\\?<\\/span><\\/span>$/;\n\t\tconst output = linkDetector.linkify(input, true);\n\n\t\tassert.strictEqual(3, output.children.length);\n\t\tassert.strictEqual('SPAN', output.tagName);\n\t\tassert.strictEqual('SPAN', output.children[0].tagName);\n\t\tassert.strictEqual('SPAN', output.children[1].tagName);\n\t\tassert.strictEqual('SPAN', output.children[2].tagName);\n\t\tassert.strictEqual('A', output.children[1].children[0].tagName);\n\t\tassert(expectedOutput.test(output.outerHTML));\n\t\tassertElementIsLink(output.children[1].children[0]);\n\t\tassert.strictEqual(isWindows ? 'C:/foo/bar.js:12:34' : '/Users/foo/bar.js:12:34', output.children[1].children[0].textContent);\n\t});\n});\n"]}