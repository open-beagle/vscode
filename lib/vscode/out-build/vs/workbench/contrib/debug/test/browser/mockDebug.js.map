{"version":3,"file":"mockDebug.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/debug/test/browser/mockDebug.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI as uri } from 'vs/base/common/uri';\nimport { Event } from 'vs/base/common/event';\nimport { IWorkspaceFolder } from 'vs/platform/workspace/common/workspace';\nimport { Position, IPosition } from 'vs/editor/common/core/position';\nimport { ILaunch, IDebugService, State, IDebugSession, IConfigurationManager, IStackFrame, IBreakpointData, IBreakpointUpdateData, IConfig, IDebugModel, IViewModel, IBreakpoint, LoadedSourceEvent, IThread, IRawModelUpdate, IFunctionBreakpoint, IExceptionBreakpoint, IDebugger, IExceptionInfo, AdapterEndEvent, IReplElement, IExpression, IReplElementSource, IDataBreakpoint, IDebugSessionOptions, IEvaluate, IAdapterManager } from 'vs/workbench/contrib/debug/common/debug';\nimport { Source } from 'vs/workbench/contrib/debug/common/debugSource';\nimport Severity from 'vs/base/common/severity';\nimport { AbstractDebugAdapter } from 'vs/workbench/contrib/debug/common/abstractDebugAdapter';\nimport { DebugStorage } from 'vs/workbench/contrib/debug/common/debugStorage';\nimport { ExceptionBreakpoint, Expression, DataBreakpoint, FunctionBreakpoint, Breakpoint, DebugModel } from 'vs/workbench/contrib/debug/common/debugModel';\nimport { DebugCompoundRoot } from 'vs/workbench/contrib/debug/common/debugCompoundRoot';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { TestFileService } from 'vs/workbench/test/browser/workbenchTestServices';\nimport { UriIdentityService } from 'vs/workbench/services/uriIdentity/common/uriIdentityService';\nimport { ITextModel } from 'vs/editor/common/model';\n\nconst fileService = new TestFileService();\nexport const mockUriIdentityService = new UriIdentityService(fileService);\n\nexport class MockDebugService implements IDebugService {\n\n\t_serviceBrand: undefined;\n\n\tget state(): State {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tget onWillNewSession(): Event<IDebugSession> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tget onDidNewSession(): Event<IDebugSession> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tget onDidEndSession(): Event<IDebugSession> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tget onDidChangeState(): Event<State> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tgetConfigurationManager(): IConfigurationManager {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tgetAdapterManager(): IAdapterManager {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tcanSetBreakpointsIn(model: ITextModel): boolean {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tfocusStackFrame(focusedStackFrame: IStackFrame): Promise<void> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tsendAllBreakpoints(session?: IDebugSession): Promise<any> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\taddBreakpoints(uri: uri, rawBreakpoints: IBreakpointData[]): Promise<IBreakpoint[]> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tupdateBreakpoints(uri: uri, data: Map<string, IBreakpointUpdateData>, sendOnResourceSaved: boolean): Promise<void> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tenableOrDisableBreakpoints(enabled: boolean): Promise<void> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tsetBreakpointsActivated(): Promise<void> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tremoveBreakpoints(): Promise<any> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tsetExceptionBreakpointCondition(breakpoint: IExceptionBreakpoint, condition: string): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tsetExceptionBreakpoints(data: DebugProtocol.ExceptionBreakpointsFilter[]): void {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\taddFunctionBreakpoint(): void { }\n\n\tmoveWatchExpression(id: string, position: number): void { }\n\n\tupdateFunctionBreakpoint(id: string, update: { name?: string, hitCondition?: string, condition?: string }): Promise<void> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tremoveFunctionBreakpoints(id?: string): Promise<void> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\taddDataBreakpoint(label: string, dataId: string, canPersist: boolean): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tremoveDataBreakpoints(id?: string | undefined): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\taddReplExpression(name: string): Promise<void> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tremoveReplExpressions(): void { }\n\n\taddWatchExpression(name?: string): Promise<void> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\trenameWatchExpression(id: string, newName: string): Promise<void> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tremoveWatchExpressions(id?: string): void { }\n\n\tstartDebugging(launch: ILaunch, configOrName?: IConfig | string, options?: IDebugSessionOptions): Promise<boolean> {\n\t\treturn Promise.resolve(true);\n\t}\n\n\trestartSession(): Promise<any> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tstopSession(): Promise<any> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tgetModel(): IDebugModel {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tgetViewModel(): IViewModel {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tlogToRepl(session: IDebugSession, value: string): void { }\n\n\tsourceIsNotAvailable(uri: uri): void { }\n\n\ttryToAutoFocusStackFrame(thread: IThread): Promise<any> {\n\t\tthrow new Error('not implemented');\n\t}\n}\n\nexport class MockSession implements IDebugSession {\n\tget compoundRoot(): DebugCompoundRoot | undefined {\n\t\treturn undefined;\n\t}\n\n\tstepInTargets(frameId: number): Promise<{ id: number; label: string; }[]> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tcancel(_progressId: string): Promise<DebugProtocol.CancelResponse> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tbreakpointsLocations(uri: uri, lineNumber: number): Promise<IPosition[]> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tdataBreakpointInfo(name: string, variablesReference?: number | undefined): Promise<{ dataId: string | null; description: string; canPersist?: boolean | undefined; } | undefined> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tsendDataBreakpoints(dbps: IDataBreakpoint[]): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tsubId: string | undefined;\n\n\tget compact(): boolean {\n\t\treturn false;\n\t}\n\n\tsetSubId(subId: string | undefined): void {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tget parentSession(): IDebugSession | undefined {\n\t\treturn undefined;\n\t}\n\n\tgetReplElements(): IReplElement[] {\n\t\treturn [];\n\t}\n\n\thasSeparateRepl(): boolean {\n\t\treturn true;\n\t}\n\n\tremoveReplExpressions(): void { }\n\tget onDidChangeReplElements(): Event<void> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\taddReplExpression(stackFrame: IStackFrame, name: string): Promise<void> {\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tappendToRepl(data: string | IExpression, severity: Severity, source?: IReplElementSource): void { }\n\tlogToRepl(sev: Severity, args: any[], frame?: { uri: uri; line: number; column: number; }) { }\n\n\tconfiguration: IConfig = { type: 'mock', name: 'mock', request: 'launch' };\n\tunresolvedConfiguration: IConfig = { type: 'mock', name: 'mock', request: 'launch' };\n\tstate = State.Stopped;\n\troot!: IWorkspaceFolder;\n\tcapabilities: DebugProtocol.Capabilities = {};\n\n\tgetId(): string {\n\t\treturn 'mock';\n\t}\n\n\tgetLabel(): string {\n\t\treturn 'mockname';\n\t}\n\n\tget name(): string {\n\t\treturn 'mockname';\n\t}\n\n\tsetName(name: string): void {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tgetSourceForUri(modelUri: uri): Source {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tgetThread(threadId: number): IThread {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tget onDidCustomEvent(): Event<DebugProtocol.Event> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tget onDidLoadedSource(): Event<LoadedSourceEvent> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tget onDidChangeState(): Event<void> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tget onDidEndAdapter(): Event<AdapterEndEvent | undefined> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tget onDidChangeName(): Event<string> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tget onDidProgressStart(): Event<DebugProtocol.ProgressStartEvent> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tget onDidProgressUpdate(): Event<DebugProtocol.ProgressUpdateEvent> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tget onDidProgressEnd(): Event<DebugProtocol.ProgressEndEvent> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tsetConfiguration(configuration: { resolved: IConfig, unresolved: IConfig }) { }\n\n\tgetAllThreads(): IThread[] {\n\t\treturn [];\n\t}\n\n\tgetSource(raw: DebugProtocol.Source): Source {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tgetLoadedSources(): Promise<Source[]> {\n\t\treturn Promise.resolve([]);\n\t}\n\n\tcompletions(frameId: number, threadId: number, text: string, position: Position, overwriteBefore: number): Promise<DebugProtocol.CompletionsResponse> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tclearThreads(removeThreads: boolean, reference?: number): void { }\n\n\trawUpdate(data: IRawModelUpdate): void { }\n\n\tinitialize(dbgr: IDebugger): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tlaunchOrAttach(config: IConfig): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\trestart(): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tsendBreakpoints(modelUri: uri, bpts: IBreakpoint[], sourceModified: boolean): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tsendFunctionBreakpoints(fbps: IFunctionBreakpoint[]): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tsendExceptionBreakpoints(exbpts: IExceptionBreakpoint[]): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tgetDebugProtocolBreakpoint(breakpointId: string): DebugProtocol.Breakpoint | undefined {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tcustomRequest(request: string, args: any): Promise<DebugProtocol.Response> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tstackTrace(threadId: number, startFrame: number, levels: number, token: CancellationToken): Promise<DebugProtocol.StackTraceResponse> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\texceptionInfo(threadId: number): Promise<IExceptionInfo> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tscopes(frameId: number): Promise<DebugProtocol.ScopesResponse> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tvariables(variablesReference: number, threadId: number | undefined, filter: 'indexed' | 'named', start: number, count: number): Promise<DebugProtocol.VariablesResponse> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tevaluate(expression: string, frameId: number, context?: string): Promise<DebugProtocol.EvaluateResponse> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\trestartFrame(frameId: number, threadId: number): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tnext(threadId: number): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tstepIn(threadId: number, targetId?: number): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tstepOut(threadId: number): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tstepBack(threadId: number): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tcontinue(threadId: number): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\treverseContinue(threadId: number): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tpause(threadId: number): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tterminateThreads(threadIds: number[]): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tsetVariable(variablesReference: number, name: string, value: string): Promise<DebugProtocol.SetVariableResponse> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tloadSource(resource: uri): Promise<DebugProtocol.SourceResponse> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tterminate(restart = false): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tdisconnect(restart = false): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tgotoTargets(source: DebugProtocol.Source, line: number, column?: number | undefined): Promise<DebugProtocol.GotoTargetsResponse> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tgoto(threadId: number, targetId: number): Promise<DebugProtocol.GotoResponse> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n}\n\nexport class MockRawSession {\n\n\tcapabilities: DebugProtocol.Capabilities = {};\n\tdisconnected = false;\n\tsessionLengthInSeconds: number = 0;\n\n\treadyForBreakpoints = true;\n\temittedStopped = true;\n\n\tgetLengthInSeconds(): number {\n\t\treturn 100;\n\t}\n\n\tstackTrace(args: DebugProtocol.StackTraceArguments): Promise<DebugProtocol.StackTraceResponse> {\n\t\treturn Promise.resolve({\n\t\t\tseq: 1,\n\t\t\ttype: 'response',\n\t\t\trequest_seq: 1,\n\t\t\tsuccess: true,\n\t\t\tcommand: 'stackTrace',\n\t\t\tbody: {\n\t\t\t\tstackFrames: [{\n\t\t\t\t\tid: 1,\n\t\t\t\t\tname: 'mock',\n\t\t\t\t\tline: 5,\n\t\t\t\t\tcolumn: 6\n\t\t\t\t}]\n\t\t\t}\n\t\t});\n\t}\n\n\texceptionInfo(args: DebugProtocol.ExceptionInfoArguments): Promise<DebugProtocol.ExceptionInfoResponse> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tlaunchOrAttach(args: IConfig): Promise<DebugProtocol.Response> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tscopes(args: DebugProtocol.ScopesArguments): Promise<DebugProtocol.ScopesResponse> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tvariables(args: DebugProtocol.VariablesArguments): Promise<DebugProtocol.VariablesResponse> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tevaluate(args: DebugProtocol.EvaluateArguments): Promise<DebugProtocol.EvaluateResponse> {\n\t\treturn Promise.resolve(null!);\n\t}\n\n\tcustom(request: string, args: any): Promise<DebugProtocol.Response> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tterminate(restart = false): Promise<DebugProtocol.TerminateResponse> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tdisconnect(restart?: boolean): Promise<any> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tthreads(): Promise<DebugProtocol.ThreadsResponse> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tstepIn(args: DebugProtocol.StepInArguments): Promise<DebugProtocol.StepInResponse> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tstepOut(args: DebugProtocol.StepOutArguments): Promise<DebugProtocol.StepOutResponse> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tstepBack(args: DebugProtocol.StepBackArguments): Promise<DebugProtocol.StepBackResponse> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tcontinue(args: DebugProtocol.ContinueArguments): Promise<DebugProtocol.ContinueResponse> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\treverseContinue(args: DebugProtocol.ReverseContinueArguments): Promise<DebugProtocol.ReverseContinueResponse> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tpause(args: DebugProtocol.PauseArguments): Promise<DebugProtocol.PauseResponse> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tterminateThreads(args: DebugProtocol.TerminateThreadsArguments): Promise<DebugProtocol.TerminateThreadsResponse> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tsetVariable(args: DebugProtocol.SetVariableArguments): Promise<DebugProtocol.SetVariableResponse> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\trestartFrame(args: DebugProtocol.RestartFrameArguments): Promise<DebugProtocol.RestartFrameResponse> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tcompletions(args: DebugProtocol.CompletionsArguments): Promise<DebugProtocol.CompletionsResponse> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tnext(args: DebugProtocol.NextArguments): Promise<DebugProtocol.NextResponse> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tsource(args: DebugProtocol.SourceArguments): Promise<DebugProtocol.SourceResponse> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tloadedSources(args: DebugProtocol.LoadedSourcesArguments): Promise<DebugProtocol.LoadedSourcesResponse> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tsetBreakpoints(args: DebugProtocol.SetBreakpointsArguments): Promise<DebugProtocol.SetBreakpointsResponse> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tsetFunctionBreakpoints(args: DebugProtocol.SetFunctionBreakpointsArguments): Promise<DebugProtocol.SetFunctionBreakpointsResponse> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tsetExceptionBreakpoints(args: DebugProtocol.SetExceptionBreakpointsArguments): Promise<DebugProtocol.SetExceptionBreakpointsResponse> {\n\t\tthrow new Error('not implemented');\n\t}\n\n\treadonly onDidStop: Event<DebugProtocol.StoppedEvent> = null!;\n}\n\nexport class MockDebugAdapter extends AbstractDebugAdapter {\n\tprivate seq = 0;\n\n\tstartSession(): Promise<void> {\n\t\treturn Promise.resolve();\n\t}\n\n\tstopSession(): Promise<void> {\n\t\treturn Promise.resolve();\n\t}\n\n\tsendMessage(message: DebugProtocol.ProtocolMessage): void {\n\t\tsetTimeout(() => {\n\t\t\tif (message.type === 'request') {\n\t\t\t\tconst request = message as DebugProtocol.Request;\n\t\t\t\tswitch (request.command) {\n\t\t\t\t\tcase 'evaluate':\n\t\t\t\t\t\tthis.evaluate(request, request.arguments);\n\t\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.sendResponseBody(request, {});\n\t\t\t\treturn;\n\t\t\t}\n\t\t}, 0);\n\t}\n\n\tsendResponseBody(request: DebugProtocol.Request, body: any) {\n\t\tconst response: DebugProtocol.Response = {\n\t\t\tseq: ++this.seq,\n\t\t\ttype: 'response',\n\t\t\trequest_seq: request.seq,\n\t\t\tcommand: request.command,\n\t\t\tsuccess: true,\n\t\t\tbody\n\t\t};\n\t\tthis.acceptMessage(response);\n\t}\n\n\tsendEventBody(event: string, body: any) {\n\t\tconst response: DebugProtocol.Event = {\n\t\t\tseq: ++this.seq,\n\t\t\ttype: 'event',\n\t\t\tevent,\n\t\t\tbody\n\t\t};\n\t\tthis.acceptMessage(response);\n\t}\n\n\tevaluate(request: DebugProtocol.Request, args: DebugProtocol.EvaluateArguments) {\n\t\tif (args.expression.indexOf('before.') === 0) {\n\t\t\tthis.sendEventBody('output', { output: args.expression });\n\t\t}\n\n\t\tthis.sendResponseBody(request, {\n\t\t\tresult: '=' + args.expression,\n\t\t\tvariablesReference: 0\n\t\t});\n\n\t\tif (args.expression.indexOf('after.') === 0) {\n\t\t\tthis.sendEventBody('output', { output: args.expression });\n\t\t}\n\t}\n}\n\nclass MockDebugStorage extends DebugStorage {\n\n\tconstructor() {\n\t\tsuper(undefined as any, undefined as any, undefined as any);\n\t}\n\n\toverride loadBreakpoints(): Breakpoint[] {\n\t\treturn [];\n\t}\n\n\toverride loadFunctionBreakpoints(): FunctionBreakpoint[] {\n\t\treturn [];\n\t}\n\n\toverride loadExceptionBreakpoints(): ExceptionBreakpoint[] {\n\t\treturn [];\n\n\t}\n\n\toverride loadDataBreakpoints(): DataBreakpoint[] {\n\t\treturn [];\n\n\t}\n\n\toverride loadWatchExpressions(): Expression[] {\n\t\treturn [];\n\n\t}\n\n\toverride storeWatchExpressions(_watchExpressions: (IExpression & IEvaluate)[]): void { }\n\n\toverride storeBreakpoints(_debugModel: IDebugModel): void { }\n}\n\nexport function createMockDebugModel(): DebugModel {\n\treturn new DebugModel(new MockDebugStorage(), <any>{ isDirty: (e: any) => false }, mockUriIdentityService);\n}\n"]}