{"version":3,"file":"streamDebugAdapter.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/debug/test/node/streamDebugAdapter.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport * as crypto from 'crypto';\nimport * as net from 'net';\nimport * as platform from 'vs/base/common/platform';\nimport { tmpdir } from 'os';\nimport { join } from 'vs/base/common/path';\nimport { SocketDebugAdapter, NamedPipeDebugAdapter, StreamDebugAdapter } from 'vs/workbench/contrib/debug/node/debugAdapter';\n\nfunction rndPort(): number {\n\tconst min = 8000;\n\tconst max = 9000;\n\treturn Math.floor(Math.random() * (max - min) + min);\n}\n\nfunction sendInitializeRequest(debugAdapter: StreamDebugAdapter): Promise<DebugProtocol.Response> {\n\treturn new Promise((resolve, reject) => {\n\t\tdebugAdapter.sendRequest('initialize', { adapterID: 'test' }, (result) => {\n\t\t\tresolve(result);\n\t\t});\n\t});\n}\n\nfunction serverConnection(socket: net.Socket) {\n\tsocket.on('data', (data: Buffer) => {\n\t\tconst str = data.toString().split('\\r\\n')[2];\n\t\tconst request = JSON.parse(str);\n\t\tconst response: any = {\n\t\t\tseq: request.seq,\n\t\t\trequest_seq: request.seq,\n\t\t\ttype: 'response',\n\t\t\tcommand: request.command\n\t\t};\n\t\tif (request.arguments.adapterID === 'test') {\n\t\t\tresponse.success = true;\n\t\t} else {\n\t\t\tresponse.success = false;\n\t\t\tresponse.message = 'failed';\n\t\t}\n\n\t\tconst responsePayload = JSON.stringify(response);\n\t\tsocket.write(`Content-Length: ${responsePayload.length}\\r\\n\\r\\n${responsePayload}`);\n\t});\n}\n\nsuite('Debug - StreamDebugAdapter', () => {\n\tconst port = rndPort();\n\tconst pipeName = crypto.randomBytes(10).toString('hex');\n\tconst pipePath = platform.isWindows ? join('\\\\\\\\.\\\\pipe\\\\', pipeName) : join(tmpdir(), pipeName);\n\n\tconst testCases: { testName: string, debugAdapter: StreamDebugAdapter, connectionDetail: string | number }[] = [\n\t\t{\n\t\t\ttestName: 'NamedPipeDebugAdapter',\n\t\t\tdebugAdapter: new NamedPipeDebugAdapter({\n\t\t\t\ttype: 'pipeServer',\n\t\t\t\tpath: pipePath\n\t\t\t}),\n\t\t\tconnectionDetail: pipePath\n\t\t},\n\t\t{\n\t\t\ttestName: 'SocketDebugAdapter',\n\t\t\tdebugAdapter: new SocketDebugAdapter({\n\t\t\t\ttype: 'server',\n\t\t\t\tport\n\t\t\t}),\n\t\t\tconnectionDetail: port\n\t\t}\n\t];\n\n\tfor (const testCase of testCases) {\n\t\ttest(`StreamDebugAdapter (${testCase.testName}) can initialize a connection`, async () => {\n\t\t\tconst server = net.createServer(serverConnection).listen(testCase.connectionDetail);\n\t\t\tconst debugAdapter = testCase.debugAdapter;\n\t\t\ttry {\n\t\t\t\tawait debugAdapter.startSession();\n\t\t\t\tconst response: DebugProtocol.Response = await sendInitializeRequest(debugAdapter);\n\t\t\t\tassert.strictEqual(response.command, 'initialize');\n\t\t\t\tassert.strictEqual(response.request_seq, 1);\n\t\t\t\tassert.strictEqual(response.success, true, response.message);\n\t\t\t} finally {\n\t\t\t\tawait debugAdapter.stopSession();\n\t\t\t\tserver.close();\n\t\t\t\tdebugAdapter.dispose();\n\t\t\t}\n\t\t});\n\t}\n});\n"]}