{"version":3,"sources":["vs/workbench/contrib/debug/browser/debugAdapterManager.ts"],"names":[],"mappings":"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","file":"debugAdapterManager.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport * as strings from 'vs/base/common/strings';\nimport { IJSONSchema } from 'vs/base/common/jsonSchema';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IWorkspaceFolder } from 'vs/platform/workspace/common/workspace';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { IDebugConfiguration, IConfig, IDebugAdapterDescriptorFactory, IDebugAdapter, IDebugSession, IAdapterDescriptor, IDebugAdapterFactory, CONTEXT_DEBUGGERS_AVAILABLE, IAdapterManager } from 'vs/workbench/contrib/debug/common/debug';\nimport { Debugger } from 'vs/workbench/contrib/debug/common/debugger';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { isCodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { launchSchema, debuggersExtPoint, breakpointsExtPoint } from 'vs/workbench/contrib/debug/common/debugSchemas';\nimport { IQuickInputService } from 'vs/platform/quickinput/common/quickInput';\nimport { IContextKeyService, IContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { launchSchemaId } from 'vs/workbench/services/configuration/common/configuration';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IJSONContributionRegistry, Extensions as JSONExtensions } from 'vs/platform/jsonschemas/common/jsonContributionRegistry';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport Severity from 'vs/base/common/severity';\n\nconst jsonRegistry = Registry.as<IJSONContributionRegistry>(JSONExtensions.JSONContribution);\nexport class AdapterManager implements IAdapterManager {\n\n\tprivate debuggers: Debugger[];\n\tprivate adapterDescriptorFactories: IDebugAdapterDescriptorFactory[];\n\tprivate debugAdapterFactories = new Map<string, IDebugAdapterFactory>();\n\tprivate debuggersAvailable: IContextKey<boolean>;\n\tprivate readonly _onDidRegisterDebugger = new Emitter<void>();\n\tprivate readonly _onDidDebuggersExtPointRead = new Emitter<void>();\n\tprivate breakpointModeIdsSet = new Set<string>();\n\n\tconstructor(\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IModeService private readonly modeService: IModeService,\n\t\t@IDialogService private readonly dialogService: IDialogService\n\t) {\n\t\tthis.adapterDescriptorFactories = [];\n\t\tthis.debuggers = [];\n\t\tthis.registerListeners();\n\t\tthis.debuggersAvailable = CONTEXT_DEBUGGERS_AVAILABLE.bindTo(contextKeyService);\n\t}\n\n\tprivate registerListeners(): void {\n\t\tdebuggersExtPoint.setHandler((extensions, delta) => {\n\t\t\tdelta.added.forEach(added => {\n\t\t\t\tadded.value.forEach(rawAdapter => {\n\t\t\t\t\tif (!rawAdapter.type || (typeof rawAdapter.type !== 'string')) {\n\t\t\t\t\t\tadded.collector.error(nls.localize('debugNoType', \"Debugger 'type' can not be omitted and must be of type 'string'.\"));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (rawAdapter.type !== '*') {\n\t\t\t\t\t\tconst existing = this.getDebugger(rawAdapter.type);\n\t\t\t\t\t\tif (existing) {\n\t\t\t\t\t\t\texisting.merge(rawAdapter, added.description);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.debuggers.push(this.instantiationService.createInstance(Debugger, this, rawAdapter, added.description));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// take care of all wildcard contributions\n\t\t\textensions.forEach(extension => {\n\t\t\t\textension.value.forEach(rawAdapter => {\n\t\t\t\t\tif (rawAdapter.type === '*') {\n\t\t\t\t\t\tthis.debuggers.forEach(dbg => dbg.merge(rawAdapter, extension.description));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tdelta.removed.forEach(removed => {\n\t\t\t\tconst removedTypes = removed.value.map(rawAdapter => rawAdapter.type);\n\t\t\t\tthis.debuggers = this.debuggers.filter(d => removedTypes.indexOf(d.type) === -1);\n\t\t\t});\n\n\t\t\t// update the schema to include all attributes, snippets and types from extensions.\n\t\t\tconst items = (<IJSONSchema>launchSchema.properties!['configurations'].items);\n\t\t\titems.oneOf = [];\n\t\t\titems.defaultSnippets = [];\n\t\t\tthis.debuggers.forEach(adapter => {\n\t\t\t\tconst schemaAttributes = adapter.getSchemaAttributes();\n\t\t\t\tif (schemaAttributes && items.oneOf) {\n\t\t\t\t\titems.oneOf.push(...schemaAttributes);\n\t\t\t\t}\n\t\t\t\tconst configurationSnippets = adapter.configurationSnippets;\n\t\t\t\tif (configurationSnippets && items.defaultSnippets) {\n\t\t\t\t\titems.defaultSnippets.push(...configurationSnippets);\n\t\t\t\t}\n\t\t\t});\n\t\t\tjsonRegistry.registerSchema(launchSchemaId, launchSchema);\n\n\t\t\tthis._onDidDebuggersExtPointRead.fire();\n\t\t});\n\n\t\tbreakpointsExtPoint.setHandler((extensions, delta) => {\n\t\t\tdelta.removed.forEach(removed => {\n\t\t\t\tremoved.value.forEach(breakpoints => this.breakpointModeIdsSet.delete(breakpoints.language));\n\t\t\t});\n\t\t\tdelta.added.forEach(added => {\n\t\t\t\tadded.value.forEach(breakpoints => this.breakpointModeIdsSet.add(breakpoints.language));\n\t\t\t});\n\t\t});\n\t}\n\n\tregisterDebugAdapterFactory(debugTypes: string[], debugAdapterLauncher: IDebugAdapterFactory): IDisposable {\n\t\tdebugTypes.forEach(debugType => this.debugAdapterFactories.set(debugType, debugAdapterLauncher));\n\t\tthis.debuggersAvailable.set(this.debugAdapterFactories.size > 0);\n\t\tthis._onDidRegisterDebugger.fire();\n\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tdebugTypes.forEach(debugType => this.debugAdapterFactories.delete(debugType));\n\t\t\t}\n\t\t};\n\t}\n\n\thasDebuggers(): boolean {\n\t\treturn this.debugAdapterFactories.size > 0;\n\t}\n\n\tcreateDebugAdapter(session: IDebugSession): IDebugAdapter | undefined {\n\t\tlet factory = this.debugAdapterFactories.get(session.configuration.type);\n\t\tif (factory) {\n\t\t\treturn factory.createDebugAdapter(session);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tsubstituteVariables(debugType: string, folder: IWorkspaceFolder | undefined, config: IConfig): Promise<IConfig> {\n\t\tlet factory = this.debugAdapterFactories.get(debugType);\n\t\tif (factory) {\n\t\t\treturn factory.substituteVariables(folder, config);\n\t\t}\n\t\treturn Promise.resolve(config);\n\t}\n\n\trunInTerminal(debugType: string, args: DebugProtocol.RunInTerminalRequestArguments, sessionId: string): Promise<number | undefined> {\n\t\tlet factory = this.debugAdapterFactories.get(debugType);\n\t\tif (factory) {\n\t\t\treturn factory.runInTerminal(args, sessionId);\n\t\t}\n\t\treturn Promise.resolve(void 0);\n\t}\n\n\tregisterDebugAdapterDescriptorFactory(debugAdapterProvider: IDebugAdapterDescriptorFactory): IDisposable {\n\t\tthis.adapterDescriptorFactories.push(debugAdapterProvider);\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tthis.unregisterDebugAdapterDescriptorFactory(debugAdapterProvider);\n\t\t\t}\n\t\t};\n\t}\n\n\tunregisterDebugAdapterDescriptorFactory(debugAdapterProvider: IDebugAdapterDescriptorFactory): void {\n\t\tconst ix = this.adapterDescriptorFactories.indexOf(debugAdapterProvider);\n\t\tif (ix >= 0) {\n\t\t\tthis.adapterDescriptorFactories.splice(ix, 1);\n\t\t}\n\t}\n\n\tgetDebugAdapterDescriptor(session: IDebugSession): Promise<IAdapterDescriptor | undefined> {\n\t\tconst config = session.configuration;\n\t\tconst providers = this.adapterDescriptorFactories.filter(p => p.type === config.type && p.createDebugAdapterDescriptor);\n\t\tif (providers.length === 1) {\n\t\t\treturn providers[0].createDebugAdapterDescriptor(session);\n\t\t} else {\n\t\t\t// TODO@AW handle n > 1 case\n\t\t}\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tgetDebuggerLabel(type: string): string | undefined {\n\t\tconst dbgr = this.getDebugger(type);\n\t\tif (dbgr) {\n\t\t\treturn dbgr.label;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tget onDidRegisterDebugger(): Event<void> {\n\t\treturn this._onDidRegisterDebugger.event;\n\t}\n\n\tget onDidDebuggersExtPointRead(): Event<void> {\n\t\treturn this._onDidDebuggersExtPointRead.event;\n\t}\n\n\tcanSetBreakpointsIn(model: ITextModel): boolean {\n\t\tconst modeId = model.getLanguageIdentifier().language;\n\t\tif (!modeId || modeId === 'jsonc' || modeId === 'log') {\n\t\t\t// do not allow breakpoints in our settings files and output\n\t\t\treturn false;\n\t\t}\n\t\tif (this.configurationService.getValue<IDebugConfiguration>('debug').allowBreakpointsEverywhere) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn this.breakpointModeIdsSet.has(modeId);\n\t}\n\n\tgetDebugger(type: string): Debugger | undefined {\n\t\treturn this.debuggers.find(dbg => strings.equalsIgnoreCase(dbg.type, type));\n\t}\n\n\tisDebuggerInterestedInLanguage(language: string): boolean {\n\t\treturn !!this.debuggers.find(a => language && a.languages && a.languages.indexOf(language) >= 0);\n\t}\n\n\tasync guessDebugger(gettingConfigurations: boolean, type?: string): Promise<Debugger | undefined> {\n\t\tif (type) {\n\t\t\tconst adapter = this.getDebugger(type);\n\t\t\treturn Promise.resolve(adapter);\n\t\t}\n\n\t\tconst activeTextEditorControl = this.editorService.activeTextEditorControl;\n\t\tlet candidates: Debugger[] = [];\n\t\tlet languageLabel: string | null = null;\n\t\tif (isCodeEditor(activeTextEditorControl)) {\n\t\t\tconst model = activeTextEditorControl.getModel();\n\t\t\tconst language = model ? model.getLanguageIdentifier().language : undefined;\n\t\t\tif (language) {\n\t\t\t\tlanguageLabel = this.modeService.getLanguageName(language);\n\t\t\t}\n\t\t\tconst adapters = this.debuggers.filter(a => language && a.languages && a.languages.indexOf(language) >= 0);\n\t\t\tif (adapters.length === 1) {\n\t\t\t\treturn adapters[0];\n\t\t\t}\n\t\t\tif (adapters.length > 1) {\n\t\t\t\tcandidates = adapters;\n\t\t\t}\n\t\t}\n\n\t\tif (gettingConfigurations && candidates.length === 0) {\n\t\t\tawait this.activateDebuggers('onDebugInitialConfigurations');\n\t\t\tcandidates = this.debuggers.filter(dbg => dbg.hasInitialConfiguration() || dbg.hasConfigurationProvider());\n\t\t}\n\n\t\tcandidates.sort((first, second) => first.label.localeCompare(second.label));\n\t\tconst picks: { label: string, debugger?: Debugger, type?: string }[] = candidates.map(c => ({ label: c.label, debugger: c }));\n\n\t\tif (picks.length === 0 && languageLabel) {\n\t\t\tif (languageLabel.indexOf(' ') >= 0) {\n\t\t\t\tlanguageLabel = `'${languageLabel}'`;\n\t\t\t}\n\t\t\tconst message = nls.localize('CouldNotFindLanguage', \"You don't have an extension for debugging {0}. Should we find a {0} extension in the Marketplace?\", languageLabel);\n\t\t\tconst buttonLabel = nls.localize('findExtension', \"Find {0} extension\", languageLabel);\n\t\t\tconst showResult = await this.dialogService.show(Severity.Warning, message, [buttonLabel, nls.localize('cancel', \"Cancel\")], { cancelId: 1 });\n\t\t\tif (showResult.choice === 0) {\n\t\t\t\tawait this.commandService.executeCommand('debug.installAdditionalDebuggers', languageLabel);\n\t\t\t}\n\t\t\treturn undefined;\n\t\t}\n\n\t\tpicks.push({ type: 'separator', label: '' });\n\t\tconst placeHolder = nls.localize('selectDebug', \"Select environment\");\n\n\t\tpicks.push({ label: languageLabel ? nls.localize('installLanguage', \"Install an extension for {0}...\", languageLabel) : nls.localize('installExt', \"Install extension...\") });\n\t\treturn this.quickInputService.pick<{ label: string, debugger?: Debugger }>(picks, { activeItem: picks[0], placeHolder })\n\t\t\t.then(picked => {\n\t\t\t\tif (picked && picked.debugger) {\n\t\t\t\t\treturn picked.debugger;\n\t\t\t\t}\n\t\t\t\tif (picked) {\n\t\t\t\t\tthis.commandService.executeCommand('debug.installAdditionalDebuggers', languageLabel);\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t});\n\t}\n\n\tasync activateDebuggers(activationEvent: string, debugType?: string): Promise<void> {\n\t\tconst promises: Promise<any>[] = [\n\t\t\tthis.extensionService.activateByEvent(activationEvent),\n\t\t\tthis.extensionService.activateByEvent('onDebug')\n\t\t];\n\t\tif (debugType) {\n\t\t\tpromises.push(this.extensionService.activateByEvent(`${activationEvent}:${debugType}`));\n\t\t}\n\t\tawait Promise.all(promises);\n\t}\n}\n"]}