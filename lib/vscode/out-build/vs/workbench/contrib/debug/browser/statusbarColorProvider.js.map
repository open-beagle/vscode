{"version":3,"sources":["vs/workbench/contrib/debug/browser/statusbarColorProvider.ts"],"names":[],"mappings":"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","file":"statusbarColorProvider.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IThemeService, Themable } from 'vs/platform/theme/common/themeService';\nimport { localize } from 'vs/nls';\nimport { registerColor, contrastBorder } from 'vs/platform/theme/common/colorRegistry';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { IWorkbenchLayoutService, Parts } from 'vs/workbench/services/layout/browser/layoutService';\nimport { IDebugService, State, IDebugSession } from 'vs/workbench/contrib/debug/common/debug';\nimport { IWorkspaceContextService, WorkbenchState } from 'vs/platform/workspace/common/workspace';\nimport { STATUS_BAR_NO_FOLDER_BACKGROUND, STATUS_BAR_NO_FOLDER_FOREGROUND, STATUS_BAR_BACKGROUND, STATUS_BAR_FOREGROUND, STATUS_BAR_NO_FOLDER_BORDER, STATUS_BAR_BORDER } from 'vs/workbench/common/theme';\nimport { assertIsDefined } from 'vs/base/common/types';\nimport { createStyleSheet } from 'vs/base/browser/dom';\n\n// colors for theming\n\nexport const STATUS_BAR_DEBUGGING_BACKGROUND = registerColor('statusBar.debuggingBackground', {\n\tdark: '#CC6633',\n\tlight: '#CC6633',\n\thc: '#CC6633'\n}, localize('statusBarDebuggingBackground', \"Status bar background color when a program is being debugged. The status bar is shown in the bottom of the window\"));\n\nexport const STATUS_BAR_DEBUGGING_FOREGROUND = registerColor('statusBar.debuggingForeground', {\n\tdark: STATUS_BAR_FOREGROUND,\n\tlight: STATUS_BAR_FOREGROUND,\n\thc: STATUS_BAR_FOREGROUND\n}, localize('statusBarDebuggingForeground', \"Status bar foreground color when a program is being debugged. The status bar is shown in the bottom of the window\"));\n\nexport const STATUS_BAR_DEBUGGING_BORDER = registerColor('statusBar.debuggingBorder', {\n\tdark: STATUS_BAR_BORDER,\n\tlight: STATUS_BAR_BORDER,\n\thc: STATUS_BAR_BORDER\n}, localize('statusBarDebuggingBorder', \"Status bar border color separating to the sidebar and editor when a program is being debugged. The status bar is shown in the bottom of the window\"));\n\nexport class StatusBarColorProvider extends Themable implements IWorkbenchContribution {\n\tprivate styleElement: HTMLStyleElement | undefined;\n\n\tconstructor(\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IDebugService private readonly debugService: IDebugService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IWorkbenchLayoutService private readonly layoutService: IWorkbenchLayoutService\n\t) {\n\t\tsuper(themeService);\n\n\t\tthis.registerListeners();\n\t\tthis.updateStyles();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.debugService.onDidChangeState(state => this.updateStyles()));\n\t\tthis._register(this.contextService.onDidChangeWorkbenchState(state => this.updateStyles()));\n\t}\n\n\tprotected override updateStyles(): void {\n\t\tsuper.updateStyles();\n\n\t\tconst container = assertIsDefined(this.layoutService.getContainer(Parts.STATUSBAR_PART));\n\t\tif (isStatusbarInDebugMode(this.debugService.state, this.debugService.getViewModel().focusedSession)) {\n\t\t\tcontainer.classList.add('debugging');\n\t\t} else {\n\t\t\tcontainer.classList.remove('debugging');\n\t\t}\n\n\t\t// Container Colors\n\t\tconst backgroundColor = this.getColor(this.getColorKey(STATUS_BAR_NO_FOLDER_BACKGROUND, STATUS_BAR_DEBUGGING_BACKGROUND, STATUS_BAR_BACKGROUND));\n\t\tcontainer.style.backgroundColor = backgroundColor || '';\n\t\tcontainer.style.color = this.getColor(this.getColorKey(STATUS_BAR_NO_FOLDER_FOREGROUND, STATUS_BAR_DEBUGGING_FOREGROUND, STATUS_BAR_FOREGROUND)) || '';\n\n\t\t// Border Color\n\t\tconst borderColor = this.getColor(this.getColorKey(STATUS_BAR_NO_FOLDER_BORDER, STATUS_BAR_DEBUGGING_BORDER, STATUS_BAR_BORDER)) || this.getColor(contrastBorder);\n\t\tif (borderColor) {\n\t\t\tcontainer.classList.add('status-border-top');\n\t\t\tcontainer.style.setProperty('--status-border-top-color', borderColor.toString());\n\t\t} else {\n\t\t\tcontainer.classList.remove('status-border-top');\n\t\t\tcontainer.style.removeProperty('--status-border-top-color');\n\t\t}\n\n\t\t// Notification Beak\n\t\tif (!this.styleElement) {\n\t\t\tthis.styleElement = createStyleSheet(container);\n\t\t}\n\n\t\tthis.styleElement.textContent = `.monaco-workbench .part.statusbar > .items-container > .statusbar-item.has-beak:before { border-bottom-color: ${backgroundColor} !important; }`;\n\t}\n\n\tprivate getColorKey(noFolderColor: string, debuggingColor: string, normalColor: string): string {\n\n\t\t// Not debugging\n\t\tif (!isStatusbarInDebugMode(this.debugService.state, this.debugService.getViewModel().focusedSession)) {\n\t\t\tif (this.contextService.getWorkbenchState() !== WorkbenchState.EMPTY) {\n\t\t\t\treturn normalColor;\n\t\t\t}\n\n\t\t\treturn noFolderColor;\n\t\t}\n\n\t\t// Debugging\n\t\treturn debuggingColor;\n\t}\n}\n\nexport function isStatusbarInDebugMode(state: State, session: IDebugSession | undefined): boolean {\n\tif (state === State.Inactive || state === State.Initializing) {\n\t\treturn false;\n\t}\n\tconst isRunningWithoutDebug = session?.configuration?.noDebug;\n\tif (isRunningWithoutDebug) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n"]}