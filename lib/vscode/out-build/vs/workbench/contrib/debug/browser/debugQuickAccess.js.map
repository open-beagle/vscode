{"version":3,"sources":["vs/workbench/contrib/debug/browser/debugQuickAccess.ts"],"names":[],"mappings":"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","file":"debugQuickAccess.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IQuickPickSeparator } from 'vs/platform/quickinput/common/quickInput';\nimport { PickerQuickAccessProvider, IPickerQuickAccessItem, TriggerAction } from 'vs/platform/quickinput/browser/pickerQuickAccess';\nimport { localize } from 'vs/nls';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { IDebugService } from 'vs/workbench/contrib/debug/common/debug';\nimport { IWorkspaceContextService, WorkbenchState } from 'vs/platform/workspace/common/workspace';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { matchesFuzzy } from 'vs/base/common/filters';\nimport { withNullAsUndefined } from 'vs/base/common/types';\nimport { ADD_CONFIGURATION_ID } from 'vs/workbench/contrib/debug/browser/debugCommands';\nimport { debugConfigure } from 'vs/workbench/contrib/debug/browser/debugIcons';\nimport { ThemeIcon } from 'vs/platform/theme/common/themeService';\n\nexport class StartDebugQuickAccessProvider extends PickerQuickAccessProvider<IPickerQuickAccessItem> {\n\n\tstatic PREFIX = 'debug ';\n\n\tconstructor(\n\t\t@IDebugService private readonly debugService: IDebugService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t) {\n\t\tsuper(StartDebugQuickAccessProvider.PREFIX, {\n\t\t\tnoResultsPick: {\n\t\t\t\tlabel: localize('noDebugResults', \"No matching launch configurations\")\n\t\t\t}\n\t\t});\n\t}\n\n\tprotected async getPicks(filter: string): Promise<(IQuickPickSeparator | IPickerQuickAccessItem)[]> {\n\t\tconst picks: Array<IPickerQuickAccessItem | IQuickPickSeparator> = [];\n\t\tpicks.push({ type: 'separator', label: 'launch.json' });\n\n\t\tconst configManager = this.debugService.getConfigurationManager();\n\n\t\t// Entries: configs\n\t\tlet lastGroup: string | undefined;\n\t\tfor (let config of configManager.getAllConfigurations()) {\n\t\t\tconst highlights = matchesFuzzy(filter, config.name, true);\n\t\t\tif (highlights) {\n\n\t\t\t\t// Separator\n\t\t\t\tif (lastGroup !== config.presentation?.group) {\n\t\t\t\t\tpicks.push({ type: 'separator' });\n\t\t\t\t\tlastGroup = config.presentation?.group;\n\t\t\t\t}\n\n\t\t\t\t// Launch entry\n\t\t\t\tpicks.push({\n\t\t\t\t\tlabel: config.name,\n\t\t\t\t\tdescription: this.contextService.getWorkbenchState() === WorkbenchState.WORKSPACE ? config.launch.name : '',\n\t\t\t\t\thighlights: { label: highlights },\n\t\t\t\t\tbuttons: [{\n\t\t\t\t\t\ticonClass: ThemeIcon.asClassName(debugConfigure),\n\t\t\t\t\t\ttooltip: localize('customizeLaunchConfig', \"Configure Launch Configuration\")\n\t\t\t\t\t}],\n\t\t\t\t\ttrigger: () => {\n\t\t\t\t\t\tconfig.launch.openConfigFile(false);\n\n\t\t\t\t\t\treturn TriggerAction.CLOSE_PICKER;\n\t\t\t\t\t},\n\t\t\t\t\taccept: async () => {\n\t\t\t\t\t\tawait configManager.selectConfiguration(config.launch, config.name);\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait this.debugService.startDebugging(config.launch);\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\tthis.notificationService.error(error);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// Entries detected configurations\n\t\tconst dynamicProviders = await configManager.getDynamicProviders();\n\t\tif (dynamicProviders.length > 0) {\n\t\t\tpicks.push({\n\t\t\t\ttype: 'separator', label: localize({\n\t\t\t\t\tkey: 'contributed',\n\t\t\t\t\tcomment: ['contributed is lower case because it looks better like that in UI. Nothing preceeds it. It is a name of the grouping of debug configurations.']\n\t\t\t\t}, \"contributed\")\n\t\t\t});\n\t\t}\n\n\t\tconfigManager.getRecentDynamicConfigurations().forEach(({ name, type }) => {\n\t\t\tconst highlights = matchesFuzzy(filter, name, true);\n\t\t\tif (highlights) {\n\t\t\t\tpicks.push({\n\t\t\t\t\tlabel: name,\n\t\t\t\t\thighlights: { label: highlights },\n\t\t\t\t\taccept: async () => {\n\t\t\t\t\t\tawait configManager.selectConfiguration(undefined, name, undefined, { type });\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst { launch, getConfig } = configManager.selectedConfiguration;\n\t\t\t\t\t\t\tconst config = await getConfig();\n\t\t\t\t\t\t\tawait this.debugService.startDebugging(launch, config);\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\tthis.notificationService.error(error);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tdynamicProviders.forEach(provider => {\n\t\t\tpicks.push({\n\t\t\t\tlabel: `$(folder) ${provider.label}...`,\n\t\t\t\tariaLabel: localize({ key: 'providerAriaLabel', comment: ['Placeholder stands for the provider label. For example \"NodeJS\".'] }, \"{0} contributed configurations\", provider.label),\n\t\t\t\taccept: async () => {\n\t\t\t\t\tconst pick = await provider.pick();\n\t\t\t\t\tif (pick) {\n\t\t\t\t\t\t// Use the type of the provider, not of the config since config sometimes have subtypes (for example \"node-terminal\")\n\t\t\t\t\t\tawait configManager.selectConfiguration(pick.launch, pick.config.name, pick.config, { type: provider.type });\n\t\t\t\t\t\tthis.debugService.startDebugging(pick.launch, pick.config);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\n\t\t// Entries: launches\n\t\tconst visibleLaunches = configManager.getLaunches().filter(launch => !launch.hidden);\n\n\t\t// Separator\n\t\tif (visibleLaunches.length > 0) {\n\t\t\tpicks.push({ type: 'separator', label: localize('configure', \"configure\") });\n\t\t}\n\n\t\tfor (const launch of visibleLaunches) {\n\t\t\tconst label = this.contextService.getWorkbenchState() === WorkbenchState.WORKSPACE ?\n\t\t\t\tlocalize(\"addConfigTo\", \"Add Config ({0})...\", launch.name) :\n\t\t\t\tlocalize('addConfiguration', \"Add Configuration...\");\n\n\t\t\t// Add Config entry\n\t\t\tpicks.push({\n\t\t\t\tlabel,\n\t\t\t\tdescription: this.contextService.getWorkbenchState() === WorkbenchState.WORKSPACE ? launch.name : '',\n\t\t\t\thighlights: { label: withNullAsUndefined(matchesFuzzy(filter, label, true)) },\n\t\t\t\taccept: () => this.commandService.executeCommand(ADD_CONFIGURATION_ID, launch.uri.toString())\n\t\t\t});\n\t\t}\n\n\t\treturn picks;\n\t}\n}\n"]}