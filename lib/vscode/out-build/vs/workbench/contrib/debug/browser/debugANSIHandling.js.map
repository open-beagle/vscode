{"version":3,"file":"debugANSIHandling.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/debug/browser/debugANSIHandling.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { LinkDetector } from 'vs/workbench/contrib/debug/browser/linkDetector';\nimport { RGBA, Color } from 'vs/base/common/color';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { ansiColorIdentifiers } from 'vs/workbench/contrib/terminal/common/terminalColorRegistry';\nimport { IWorkspaceFolder } from 'vs/platform/workspace/common/workspace';\n\n/**\n * @param text The content to stylize.\n * @returns An {@link HTMLSpanElement} that contains the potentially stylized text.\n */\nexport function handleANSIOutput(text: string, linkDetector: LinkDetector, themeService: IThemeService, workspaceFolder: IWorkspaceFolder | undefined): HTMLSpanElement {\n\n\tconst root: HTMLSpanElement = document.createElement('span');\n\tconst textLength: number = text.length;\n\n\tlet styleNames: string[] = [];\n\tlet customFgColor: RGBA | undefined;\n\tlet customBgColor: RGBA | undefined;\n\tlet customUnderlineColor: RGBA | undefined;\n\tlet colorsInverted: boolean = false;\n\tlet currentPos: number = 0;\n\tlet buffer: string = '';\n\n\twhile (currentPos < textLength) {\n\n\t\tlet sequenceFound: boolean = false;\n\n\t\t// Potentially an ANSI escape sequence.\n\t\t// See http://ascii-table.com/ansi-escape-sequences.php & https://en.wikipedia.org/wiki/ANSI_escape_code\n\t\tif (text.charCodeAt(currentPos) === 27 && text.charAt(currentPos + 1) === '[') {\n\n\t\t\tconst startPos: number = currentPos;\n\t\t\tcurrentPos += 2; // Ignore 'Esc[' as it's in every sequence.\n\n\t\t\tlet ansiSequence: string = '';\n\n\t\t\twhile (currentPos < textLength) {\n\t\t\t\tconst char: string = text.charAt(currentPos);\n\t\t\t\tansiSequence += char;\n\n\t\t\t\tcurrentPos++;\n\n\t\t\t\t// Look for a known sequence terminating character.\n\t\t\t\tif (char.match(/^[ABCDHIJKfhmpsu]$/)) {\n\t\t\t\t\tsequenceFound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif (sequenceFound) {\n\n\t\t\t\t// Flush buffer with previous styles.\n\t\t\t\tappendStylizedStringToContainer(root, buffer, styleNames, linkDetector, workspaceFolder, customFgColor, customBgColor, customUnderlineColor);\n\n\t\t\t\tbuffer = '';\n\n\t\t\t\t/*\n\t\t\t\t * Certain ranges that are matched here do not contain real graphics rendition sequences. For\n\t\t\t\t * the sake of having a simpler expression, they have been included anyway.\n\t\t\t\t */\n\t\t\t\tif (ansiSequence.match(/^(?:[34][0-8]|9[0-7]|10[0-7]|[0-9]|2[1-5,7-9]|[34]9|5[8,9]|1[0-9])(?:;[349][0-7]|10[0-7]|[013]|[245]|[34]9)?(?:;[012]?[0-9]?[0-9])*;?m$/)) {\n\n\t\t\t\t\tconst styleCodes: number[] = ansiSequence.slice(0, -1) // Remove final 'm' character.\n\t\t\t\t\t\t.split(';')\t\t\t\t\t\t\t\t\t\t   // Separate style codes.\n\t\t\t\t\t\t.filter(elem => elem !== '')\t\t\t           // Filter empty elems as '34;m' -> ['34', ''].\n\t\t\t\t\t\t.map(elem => parseInt(elem, 10));\t\t           // Convert to numbers.\n\n\t\t\t\t\tif (styleCodes[0] === 38 || styleCodes[0] === 48 || styleCodes[0] === 58) {\n\t\t\t\t\t\t// Advanced color code - can't be combined with formatting codes like simple colors can\n\t\t\t\t\t\t// Ignores invalid colors and additional info beyond what is necessary\n\t\t\t\t\t\tconst colorType = (styleCodes[0] === 38) ? 'foreground' : ((styleCodes[0] === 48) ? 'background' : 'underline');\n\n\t\t\t\t\t\tif (styleCodes[1] === 5) {\n\t\t\t\t\t\t\tset8BitColor(styleCodes, colorType);\n\t\t\t\t\t\t} else if (styleCodes[1] === 2) {\n\t\t\t\t\t\t\tset24BitColor(styleCodes, colorType);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsetBasicFormatters(styleCodes);\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\t// Unsupported sequence so simply hide it.\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tcurrentPos = startPos;\n\t\t\t}\n\t\t}\n\n\t\tif (sequenceFound === false) {\n\t\t\tbuffer += text.charAt(currentPos);\n\t\t\tcurrentPos++;\n\t\t}\n\t}\n\n\t// Flush remaining text buffer if not empty.\n\tif (buffer) {\n\t\tappendStylizedStringToContainer(root, buffer, styleNames, linkDetector, workspaceFolder, customFgColor, customBgColor, customUnderlineColor);\n\t}\n\n\treturn root;\n\n\t/**\n\t * Change the foreground or background color by clearing the current color\n\t * and adding the new one.\n\t * @param colorType If `'foreground'`, will change the foreground color, if\n\t * \t`'background'`, will change the background color, and if `'underline'`\n\t * will set the underline color.\n\t * @param color Color to change to. If `undefined` or not provided,\n\t * will clear current color without adding a new one.\n\t */\n\tfunction changeColor(colorType: 'foreground' | 'background' | 'underline', color?: RGBA | undefined): void {\n\t\tif (colorType === 'foreground') {\n\t\t\tcustomFgColor = color;\n\t\t} else if (colorType === 'background') {\n\t\t\tcustomBgColor = color;\n\t\t} else if (colorType === 'underline') {\n\t\t\tcustomUnderlineColor = color;\n\t\t}\n\t\tstyleNames = styleNames.filter(style => style !== `code-${colorType}-colored`);\n\t\tif (color !== undefined) {\n\t\t\tstyleNames.push(`code-${colorType}-colored`);\n\t\t}\n\t}\n\n\t/**\n\t * Swap foreground and background colors.  Used for color inversion.  Caller should check\n\t * [] flag to make sure it is appropriate to turn ON or OFF (if it is already inverted don't call\n\t */\n\tfunction reverseForegroundAndBackgroundColors(): void {\n\t\tlet oldFgColor: RGBA | undefined;\n\t\toldFgColor = customFgColor;\n\t\tchangeColor('foreground', customBgColor);\n\t\tchangeColor('background', oldFgColor);\n\t}\n\n\t/**\n\t * Calculate and set basic ANSI formatting. Supports ON/OFF of bold, italic, underline,\n\t * double underline,  crossed-out/strikethrough, overline, dim, blink, rapid blink,\n\t * reverse/invert video, hidden, superscript, subscript and alternate font codes,\n\t * clearing/resetting of foreground, background and underline colors,\n\t * setting normal foreground and background colors, and bright foreground and\n\t * background colors. Not to be used for codes containing advanced colors.\n\t * Will ignore invalid codes.\n\t * @param styleCodes Array of ANSI basic styling numbers, which will be\n\t * applied in order. New colors and backgrounds clear old ones; new formatting\n\t * does not.\n\t * @see {@link https://en.wikipedia.org/wiki/ANSI_escape_code#SGR }\n\t */\n\tfunction setBasicFormatters(styleCodes: number[]): void {\n\t\tfor (let code of styleCodes) {\n\t\t\tswitch (code) {\n\t\t\t\tcase 0: {  // reset (everything)\n\t\t\t\t\tstyleNames = [];\n\t\t\t\t\tcustomFgColor = undefined;\n\t\t\t\t\tcustomBgColor = undefined;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 1: { // bold\n\t\t\t\t\tstyleNames = styleNames.filter(style => style !== `code-bold`);\n\t\t\t\t\tstyleNames.push('code-bold');\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 2: { // dim\n\t\t\t\t\tstyleNames = styleNames.filter(style => style !== `code-dim`);\n\t\t\t\t\tstyleNames.push('code-dim');\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 3: { // italic\n\t\t\t\t\tstyleNames = styleNames.filter(style => style !== `code-italic`);\n\t\t\t\t\tstyleNames.push('code-italic');\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 4: { // underline\n\t\t\t\t\tstyleNames = styleNames.filter(style => (style !== `code-underline` && style !== `code-double-underline`));\n\t\t\t\t\tstyleNames.push('code-underline');\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 5: { // blink\n\t\t\t\t\tstyleNames = styleNames.filter(style => style !== `code-blink`);\n\t\t\t\t\tstyleNames.push('code-blink');\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 6: { // rapid blink\n\t\t\t\t\tstyleNames = styleNames.filter(style => style !== `code-rapid-blink`);\n\t\t\t\t\tstyleNames.push('code-rapid-blink');\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 7: { // invert foreground and background\n\t\t\t\t\tif (!colorsInverted) {\n\t\t\t\t\t\tcolorsInverted = true;\n\t\t\t\t\t\treverseForegroundAndBackgroundColors();\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 8: { // hidden\n\t\t\t\t\tstyleNames = styleNames.filter(style => style !== `code-hidden`);\n\t\t\t\t\tstyleNames.push('code-hidden');\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 9: { // strike-through/crossed-out\n\t\t\t\t\tstyleNames = styleNames.filter(style => style !== `code-strike-through`);\n\t\t\t\t\tstyleNames.push('code-strike-through');\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 10: { // normal default font\n\t\t\t\t\tstyleNames = styleNames.filter(style => !style.startsWith('code-font'));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: { // font codes (and 20 is 'blackletter' font code)\n\t\t\t\t\tstyleNames = styleNames.filter(style => !style.startsWith('code-font'));\n\t\t\t\t\tstyleNames.push(`code-font-${code - 10}`);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 21: { // double underline\n\t\t\t\t\tstyleNames = styleNames.filter(style => (style !== `code-underline` && style !== `code-double-underline`));\n\t\t\t\t\tstyleNames.push('code-double-underline');\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 22: { // normal intensity (bold off and dim off)\n\t\t\t\t\tstyleNames = styleNames.filter(style => (style !== `code-bold` && style !== `code-dim`));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 23: { // Neither italic or blackletter (font 10)\n\t\t\t\t\tstyleNames = styleNames.filter(style => (style !== `code-italic` && style !== `code-font-10`));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 24: { // not underlined (Neither singly nor doubly underlined)\n\t\t\t\t\tstyleNames = styleNames.filter(style => (style !== `code-underline` && style !== `code-double-underline`));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 25: { // not blinking\n\t\t\t\t\tstyleNames = styleNames.filter(style => (style !== `code-blink` && style !== `code-rapid-blink`));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 27: { // not reversed/inverted\n\t\t\t\t\tif (colorsInverted) {\n\t\t\t\t\t\tcolorsInverted = false;\n\t\t\t\t\t\treverseForegroundAndBackgroundColors();\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 28: { // not hidden (reveal)\n\t\t\t\t\tstyleNames = styleNames.filter(style => style !== `code-hidden`);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 29: { // not crossed-out\n\t\t\t\t\tstyleNames = styleNames.filter(style => style !== `code-strike-through`);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 53: { // overlined\n\t\t\t\t\tstyleNames = styleNames.filter(style => style !== `code-overline`);\n\t\t\t\t\tstyleNames.push('code-overline');\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 55: { // not overlined\n\t\t\t\t\tstyleNames = styleNames.filter(style => style !== `code-overline`);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 39: {  // default foreground color\n\t\t\t\t\tchangeColor('foreground', undefined);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 49: {  // default background color\n\t\t\t\t\tchangeColor('background', undefined);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 59: {  // default underline color\n\t\t\t\t\tchangeColor('underline', undefined);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 73: { // superscript\n\t\t\t\t\tstyleNames = styleNames.filter(style => (style !== `code-superscript` && style !== `code-subscript`));\n\t\t\t\t\tstyleNames.push('code-superscript');\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 74: { // subscript\n\t\t\t\t\tstyleNames = styleNames.filter(style => (style !== `code-superscript` && style !== `code-subscript`));\n\t\t\t\t\tstyleNames.push('code-subscript');\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 75: { // neither superscript or subscript\n\t\t\t\t\tstyleNames = styleNames.filter(style => (style !== `code-superscript` && style !== `code-subscript`));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tdefault: {\n\t\t\t\t\tsetBasicColor(code);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Calculate and set styling for complicated 24-bit ANSI color codes.\n\t * @param styleCodes Full list of integer codes that make up the full ANSI\n\t * sequence, including the two defining codes and the three RGB codes.\n\t * @param colorType If `'foreground'`, will set foreground color, if\n\t * `'background'`, will set background color, and if it is `'underline'`\n\t * will set the underline color.\n\t * @see {@link https://en.wikipedia.org/wiki/ANSI_escape_code#24-bit }\n\t */\n\tfunction set24BitColor(styleCodes: number[], colorType: 'foreground' | 'background' | 'underline'): void {\n\t\tif (styleCodes.length >= 5 &&\n\t\t\tstyleCodes[2] >= 0 && styleCodes[2] <= 255 &&\n\t\t\tstyleCodes[3] >= 0 && styleCodes[3] <= 255 &&\n\t\t\tstyleCodes[4] >= 0 && styleCodes[4] <= 255) {\n\t\t\tconst customColor = new RGBA(styleCodes[2], styleCodes[3], styleCodes[4]);\n\t\t\tchangeColor(colorType, customColor);\n\t\t}\n\t}\n\n\t/**\n\t * Calculate and set styling for advanced 8-bit ANSI color codes.\n\t * @param styleCodes Full list of integer codes that make up the ANSI\n\t * sequence, including the two defining codes and the one color code.\n\t * @param colorType If `'foreground'`, will set foreground color, if\n\t * `'background'`, will set background color and if it is `'underline'`\n\t * will set the underline color.\n\t * @see {@link https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit }\n\t */\n\tfunction set8BitColor(styleCodes: number[], colorType: 'foreground' | 'background' | 'underline'): void {\n\t\tlet colorNumber = styleCodes[2];\n\t\tconst color = calcANSI8bitColor(colorNumber);\n\n\t\tif (color) {\n\t\t\tchangeColor(colorType, color);\n\t\t} else if (colorNumber >= 0 && colorNumber <= 15) {\n\t\t\tif (colorType === 'underline') {\n\t\t\t\t// for underline colors we just decode the 0-15 color number to theme color, set and return\n\t\t\t\tconst theme = themeService.getColorTheme();\n\t\t\t\tconst colorName = ansiColorIdentifiers[colorNumber];\n\t\t\t\tconst color = theme.getColor(colorName);\n\t\t\t\tif (color) {\n\t\t\t\t\tchangeColor(colorType, color.rgba);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Need to map to one of the four basic color ranges (30-37, 90-97, 40-47, 100-107)\n\t\t\tcolorNumber += 30;\n\t\t\tif (colorNumber >= 38) {\n\t\t\t\t// Bright colors\n\t\t\t\tcolorNumber += 52;\n\t\t\t}\n\t\t\tif (colorType === 'background') {\n\t\t\t\tcolorNumber += 10;\n\t\t\t}\n\t\t\tsetBasicColor(colorNumber);\n\t\t}\n\t}\n\n\t/**\n\t * Calculate and set styling for basic bright and dark ANSI color codes. Uses\n\t * theme colors if available. Automatically distinguishes between foreground\n\t * and background colors; does not support color-clearing codes 39 and 49.\n\t * @param styleCode Integer color code on one of the following ranges:\n\t * [30-37, 90-97, 40-47, 100-107]. If not on one of these ranges, will do\n\t * nothing.\n\t */\n\tfunction setBasicColor(styleCode: number): void {\n\t\tconst theme = themeService.getColorTheme();\n\t\tlet colorType: 'foreground' | 'background' | undefined;\n\t\tlet colorIndex: number | undefined;\n\n\t\tif (styleCode >= 30 && styleCode <= 37) {\n\t\t\tcolorIndex = styleCode - 30;\n\t\t\tcolorType = 'foreground';\n\t\t} else if (styleCode >= 90 && styleCode <= 97) {\n\t\t\tcolorIndex = (styleCode - 90) + 8; // High-intensity (bright)\n\t\t\tcolorType = 'foreground';\n\t\t} else if (styleCode >= 40 && styleCode <= 47) {\n\t\t\tcolorIndex = styleCode - 40;\n\t\t\tcolorType = 'background';\n\t\t} else if (styleCode >= 100 && styleCode <= 107) {\n\t\t\tcolorIndex = (styleCode - 100) + 8; // High-intensity (bright)\n\t\t\tcolorType = 'background';\n\t\t}\n\n\t\tif (colorIndex !== undefined && colorType) {\n\t\t\tconst colorName = ansiColorIdentifiers[colorIndex];\n\t\t\tconst color = theme.getColor(colorName);\n\t\t\tif (color) {\n\t\t\t\tchangeColor(colorType, color.rgba);\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * @param root The {@link HTMLElement} to append the content to.\n * @param stringContent The text content to be appended.\n * @param cssClasses The list of CSS styles to apply to the text content.\n * @param linkDetector The {@link LinkDetector} responsible for generating links from {@param stringContent}.\n * @param customTextColor If provided, will apply custom color with inline style.\n * @param customBackgroundColor If provided, will apply custom backgroundColor with inline style.\n * @param customUnderlineColor If provided, will apply custom textDecorationColor with inline style.\n */\nexport function appendStylizedStringToContainer(\n\troot: HTMLElement,\n\tstringContent: string,\n\tcssClasses: string[],\n\tlinkDetector: LinkDetector,\n\tworkspaceFolder: IWorkspaceFolder | undefined,\n\tcustomTextColor?: RGBA,\n\tcustomBackgroundColor?: RGBA,\n\tcustomUnderlineColor?: RGBA\n): void {\n\tif (!root || !stringContent) {\n\t\treturn;\n\t}\n\n\tconst container = linkDetector.linkify(stringContent, true, workspaceFolder);\n\n\tcontainer.className = cssClasses.join(' ');\n\tif (customTextColor) {\n\t\tcontainer.style.color =\n\t\t\tColor.Format.CSS.formatRGB(new Color(customTextColor));\n\t}\n\tif (customBackgroundColor) {\n\t\tcontainer.style.backgroundColor =\n\t\t\tColor.Format.CSS.formatRGB(new Color(customBackgroundColor));\n\t}\n\tif (customUnderlineColor) {\n\t\tcontainer.style.textDecorationColor =\n\t\t\tColor.Format.CSS.formatRGB(new Color(customUnderlineColor));\n\t}\n\troot.appendChild(container);\n}\n\n/**\n * Calculate the color from the color set defined in the ANSI 8-bit standard.\n * Standard and high intensity colors are not defined in the standard as specific\n * colors, so these and invalid colors return `undefined`.\n * @see {@link https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit } for info.\n * @param colorNumber The number (ranging from 16 to 255) referring to the color\n * desired.\n */\nexport function calcANSI8bitColor(colorNumber: number): RGBA | undefined {\n\tif (colorNumber % 1 !== 0) {\n\t\t// Should be integer\n\t\treturn;\n\t} if (colorNumber >= 16 && colorNumber <= 231) {\n\t\t// Converts to one of 216 RGB colors\n\t\tcolorNumber -= 16;\n\n\t\tlet blue: number = colorNumber % 6;\n\t\tcolorNumber = (colorNumber - blue) / 6;\n\t\tlet green: number = colorNumber % 6;\n\t\tcolorNumber = (colorNumber - green) / 6;\n\t\tlet red: number = colorNumber;\n\n\t\t// red, green, blue now range on [0, 5], need to map to [0,255]\n\t\tconst convFactor: number = 255 / 5;\n\t\tblue = Math.round(blue * convFactor);\n\t\tgreen = Math.round(green * convFactor);\n\t\tred = Math.round(red * convFactor);\n\n\t\treturn new RGBA(red, green, blue);\n\t} else if (colorNumber >= 232 && colorNumber <= 255) {\n\t\t// Converts to a grayscale value\n\t\tcolorNumber -= 232;\n\t\tconst colorLevel: number = Math.round(colorNumber / 23 * 255);\n\t\treturn new RGBA(colorLevel, colorLevel, colorLevel);\n\t} else {\n\t\treturn;\n\t}\n}\n"]}