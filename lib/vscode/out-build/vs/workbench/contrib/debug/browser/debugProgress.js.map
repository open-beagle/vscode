{"version":3,"file":"debugProgress.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/debug/browser/debugProgress.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { IDebugService, VIEWLET_ID, IDebugSession } from 'vs/workbench/contrib/debug/common/debug';\nimport { IProgressService, ProgressLocation } from 'vs/platform/progress/common/progress';\nimport { dispose, IDisposable } from 'vs/base/common/lifecycle';\nimport { IViewsService } from 'vs/workbench/common/views';\n\nexport class DebugProgressContribution implements IWorkbenchContribution {\n\n\tprivate toDispose: IDisposable[] = [];\n\n\tconstructor(\n\t\t@IDebugService debugService: IDebugService,\n\t\t@IProgressService progressService: IProgressService,\n\t\t@IViewsService viewsService: IViewsService\n\t) {\n\t\tlet progressListener: IDisposable | undefined;\n\t\tconst listenOnProgress = (session: IDebugSession | undefined) => {\n\t\t\tif (progressListener) {\n\t\t\t\tprogressListener.dispose();\n\t\t\t\tprogressListener = undefined;\n\t\t\t}\n\t\t\tif (session) {\n\t\t\t\tprogressListener = session.onDidProgressStart(async progressStartEvent => {\n\t\t\t\t\tconst promise = new Promise<void>(r => {\n\t\t\t\t\t\t// Show progress until a progress end event comes or the session ends\n\t\t\t\t\t\tconst listener = Event.any(Event.filter(session.onDidProgressEnd, e => e.body.progressId === progressStartEvent.body.progressId),\n\t\t\t\t\t\t\tsession.onDidEndAdapter)(() => {\n\t\t\t\t\t\t\t\tlistener.dispose();\n\t\t\t\t\t\t\t\tr();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t});\n\n\t\t\t\t\tif (viewsService.isViewContainerVisible(VIEWLET_ID)) {\n\t\t\t\t\t\tprogressService.withProgress({ location: VIEWLET_ID }, () => promise);\n\t\t\t\t\t}\n\t\t\t\t\tconst source = debugService.getAdapterManager().getDebuggerLabel(session.configuration.type);\n\t\t\t\t\tprogressService.withProgress({\n\t\t\t\t\t\tlocation: ProgressLocation.Notification,\n\t\t\t\t\t\ttitle: progressStartEvent.body.title,\n\t\t\t\t\t\tcancellable: progressStartEvent.body.cancellable,\n\t\t\t\t\t\tsilent: true,\n\t\t\t\t\t\tsource,\n\t\t\t\t\t\tdelay: 500\n\t\t\t\t\t}, progressStep => {\n\t\t\t\t\t\tlet total = 0;\n\t\t\t\t\t\tconst reportProgress = (progress: { message?: string, percentage?: number }) => {\n\t\t\t\t\t\t\tlet increment = undefined;\n\t\t\t\t\t\t\tif (typeof progress.percentage === 'number') {\n\t\t\t\t\t\t\t\tincrement = progress.percentage - total;\n\t\t\t\t\t\t\t\ttotal += increment;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tprogressStep.report({\n\t\t\t\t\t\t\t\tmessage: progress.message,\n\t\t\t\t\t\t\t\tincrement,\n\t\t\t\t\t\t\t\ttotal: typeof increment === 'number' ? 100 : undefined,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (progressStartEvent.body.message) {\n\t\t\t\t\t\t\treportProgress(progressStartEvent.body);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst progressUpdateListener = session.onDidProgressUpdate(e => {\n\t\t\t\t\t\t\tif (e.body.progressId === progressStartEvent.body.progressId) {\n\t\t\t\t\t\t\t\treportProgress(e.body);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn promise.then(() => progressUpdateListener.dispose());\n\t\t\t\t\t}, () => session.cancel(progressStartEvent.body.progressId));\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t\tthis.toDispose.push(debugService.getViewModel().onDidFocusSession(listenOnProgress));\n\t\tlistenOnProgress(debugService.getViewModel().focusedSession);\n\t\tthis.toDispose.push(debugService.onWillNewSession(session => {\n\t\t\tif (!progressListener) {\n\t\t\t\tlistenOnProgress(session);\n\t\t\t}\n\t\t}));\n\t}\n\n\tdispose(): void {\n\t\tdispose(this.toDispose);\n\t}\n}\n"]}