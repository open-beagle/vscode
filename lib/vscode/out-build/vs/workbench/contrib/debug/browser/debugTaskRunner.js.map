{"version":3,"sources":["vs/workbench/contrib/debug/browser/debugTaskRunner.ts"],"names":[],"mappings":"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","file":"debugTaskRunner.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport severity from 'vs/base/common/severity';\nimport { Event } from 'vs/base/common/event';\nimport Constants from 'vs/workbench/contrib/markers/browser/constants';\nimport { ITaskService, ITaskSummary } from 'vs/workbench/contrib/tasks/common/taskService';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IWorkspaceFolder, IWorkspace } from 'vs/platform/workspace/common/workspace';\nimport { TaskEvent, TaskEventKind, TaskIdentifier } from 'vs/workbench/contrib/tasks/common/tasks';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { withUndefinedAsNull } from 'vs/base/common/types';\nimport { IMarkerService } from 'vs/platform/markers/common/markers';\nimport { IDebugConfiguration } from 'vs/workbench/contrib/debug/common/debug';\nimport { createErrorWithActions } from 'vs/base/common/errors';\nimport { IViewsService } from 'vs/workbench/common/views';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\n\nfunction once(match: (e: TaskEvent) => boolean, event: Event<TaskEvent>): Event<TaskEvent> {\n\treturn (listener, thisArgs = null, disposables?) => {\n\t\tconst result = event(e => {\n\t\t\tif (match(e)) {\n\t\t\t\tresult.dispose();\n\t\t\t\treturn listener.call(thisArgs, e);\n\t\t\t}\n\t\t}, null, disposables);\n\t\treturn result;\n\t};\n}\n\nexport const enum TaskRunResult {\n\tFailure,\n\tSuccess\n}\n\nconst DEBUG_TASK_ERROR_CHOICE_KEY = 'debug.taskerrorchoice';\n\nexport class DebugTaskRunner {\n\n\tprivate canceled = false;\n\n\tconstructor(\n\t\t@ITaskService private readonly taskService: ITaskService,\n\t\t@IMarkerService private readonly markerService: IMarkerService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IViewsService private readonly viewsService: IViewsService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IStorageService private readonly storageService: IStorageService\n\t) { }\n\n\tcancel(): void {\n\t\tthis.canceled = true;\n\t}\n\n\tasync runTaskAndCheckErrors(root: IWorkspaceFolder | IWorkspace | undefined, taskId: string | TaskIdentifier | undefined): Promise<TaskRunResult> {\n\t\ttry {\n\t\t\tthis.canceled = false;\n\t\t\tconst taskSummary = await this.runTask(root, taskId);\n\t\t\tif (this.canceled || (taskSummary && taskSummary.exitCode === undefined)) {\n\t\t\t\t// User canceled, either debugging, or the prelaunch task\n\t\t\t\treturn TaskRunResult.Failure;\n\t\t\t}\n\n\t\t\tconst errorCount = taskId ? this.markerService.getStatistics().errors : 0;\n\t\t\tconst successExitCode = taskSummary && taskSummary.exitCode === 0;\n\t\t\tconst failureExitCode = taskSummary && taskSummary.exitCode !== 0;\n\t\t\tconst onTaskErrors = this.configurationService.getValue<IDebugConfiguration>('debug').onTaskErrors;\n\t\t\tif (successExitCode || onTaskErrors === 'debugAnyway' || (errorCount === 0 && !failureExitCode)) {\n\t\t\t\treturn TaskRunResult.Success;\n\t\t\t}\n\t\t\tif (onTaskErrors === 'showErrors') {\n\t\t\t\tawait this.viewsService.openView(Constants.MARKERS_VIEW_ID, true);\n\t\t\t\treturn Promise.resolve(TaskRunResult.Failure);\n\t\t\t}\n\t\t\tif (onTaskErrors === 'abort') {\n\t\t\t\treturn Promise.resolve(TaskRunResult.Failure);\n\t\t\t}\n\n\t\t\tconst taskLabel = typeof taskId === 'string' ? taskId : taskId ? taskId.name : '';\n\t\t\tconst message = errorCount > 1\n\t\t\t\t? nls.localize('preLaunchTaskErrors', \"Errors exist after running preLaunchTask '{0}'.\", taskLabel)\n\t\t\t\t: errorCount === 1\n\t\t\t\t\t? nls.localize('preLaunchTaskError', \"Error exists after running preLaunchTask '{0}'.\", taskLabel)\n\t\t\t\t\t: taskSummary && typeof taskSummary.exitCode === 'number'\n\t\t\t\t\t\t? nls.localize('preLaunchTaskExitCode', \"The preLaunchTask '{0}' terminated with exit code {1}.\", taskLabel, taskSummary.exitCode)\n\t\t\t\t\t\t: nls.localize('preLaunchTaskTerminated', \"The preLaunchTask '{0}' terminated.\", taskLabel);\n\n\t\t\tconst result = await this.dialogService.show(severity.Warning, message, [nls.localize('debugAnyway', \"Debug Anyway\"), nls.localize('showErrors', \"Show Errors\"), nls.localize('abort', \"Abort\")], {\n\t\t\t\tcheckbox: {\n\t\t\t\t\tlabel: nls.localize('remember', \"Remember my choice in user settings\"),\n\t\t\t\t},\n\t\t\t\tcancelId: 2\n\t\t\t});\n\n\n\t\t\tconst debugAnyway = result.choice === 0;\n\t\t\tconst abort = result.choice === 2;\n\t\t\tif (result.checkboxChecked) {\n\t\t\t\tthis.configurationService.updateValue('debug.onTaskErrors', result.choice === 0 ? 'debugAnyway' : abort ? 'abort' : 'showErrors');\n\t\t\t}\n\n\t\t\tif (abort) {\n\t\t\t\treturn Promise.resolve(TaskRunResult.Failure);\n\t\t\t}\n\t\t\tif (debugAnyway) {\n\t\t\t\treturn TaskRunResult.Success;\n\t\t\t}\n\n\t\t\tawait this.viewsService.openView(Constants.MARKERS_VIEW_ID, true);\n\t\t\treturn Promise.resolve(TaskRunResult.Failure);\n\t\t} catch (err) {\n\t\t\tconst taskConfigureAction = this.taskService.configureAction();\n\t\t\tconst choiceMap: { [key: string]: number } = JSON.parse(this.storageService.get(DEBUG_TASK_ERROR_CHOICE_KEY, StorageScope.WORKSPACE, '{}'));\n\n\t\t\tlet choice = -1;\n\t\t\tif (choiceMap[err.message] !== undefined) {\n\t\t\t\tchoice = choiceMap[err.message];\n\t\t\t} else {\n\t\t\t\tconst showResult = await this.dialogService.show(\n\t\t\t\t\tseverity.Error,\n\t\t\t\t\terr.message,\n\t\t\t\t\t[nls.localize('debugAnyway', \"Debug Anyway\"), taskConfigureAction.label, nls.localize('cancel', \"Cancel\")],\n\t\t\t\t\t{\n\t\t\t\t\t\tcancelId: 2,\n\t\t\t\t\t\tcheckbox: {\n\t\t\t\t\t\t\tlabel: nls.localize('rememberTask', \"Remember my choice for this task\")\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tchoice = showResult.choice;\n\t\t\t\tif (showResult.checkboxChecked) {\n\t\t\t\t\tchoiceMap[err.message] = choice;\n\t\t\t\t\tthis.storageService.store(DEBUG_TASK_ERROR_CHOICE_KEY, JSON.stringify(choiceMap), StorageScope.WORKSPACE, StorageTarget.USER);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (choice === 1) {\n\t\t\t\tawait taskConfigureAction.run();\n\t\t\t}\n\n\t\t\treturn choice === 0 ? TaskRunResult.Success : TaskRunResult.Failure;\n\t\t}\n\t}\n\n\tasync runTask(root: IWorkspace | IWorkspaceFolder | undefined, taskId: string | TaskIdentifier | undefined): Promise<ITaskSummary | null> {\n\t\tif (!taskId) {\n\t\t\treturn Promise.resolve(null);\n\t\t}\n\t\tif (!root) {\n\t\t\treturn Promise.reject(new Error(nls.localize('invalidTaskReference', \"Task '{0}' can not be referenced from a launch configuration that is in a different workspace folder.\", typeof taskId === 'string' ? taskId : taskId.type)));\n\t\t}\n\t\t// run a task before starting a debug session\n\t\tconst task = await this.taskService.getTask(root, taskId);\n\t\tif (!task) {\n\t\t\tconst errorMessage = typeof taskId === 'string'\n\t\t\t\t? nls.localize('DebugTaskNotFoundWithTaskId', \"Could not find the task '{0}'.\", taskId)\n\t\t\t\t: nls.localize('DebugTaskNotFound', \"Could not find the specified task.\");\n\t\t\treturn Promise.reject(createErrorWithActions(errorMessage));\n\t\t}\n\n\t\t// If a task is missing the problem matcher the promise will never complete, so we need to have a workaround #35340\n\t\tlet taskStarted = false;\n\t\tconst inactivePromise: Promise<ITaskSummary | null> = new Promise((c, e) => once(e => {\n\t\t\t// When a task isBackground it will go inactive when it is safe to launch.\n\t\t\t// But when a background task is terminated by the user, it will also fire an inactive event.\n\t\t\t// This means that we will not get to see the real exit code from running the task (undefined when terminated by the user).\n\t\t\t// Catch the ProcessEnded event here, which occurs before inactive, and capture the exit code to prevent this.\n\t\t\treturn (e.kind === TaskEventKind.Inactive\n\t\t\t\t|| (e.kind === TaskEventKind.ProcessEnded && e.exitCode === undefined))\n\t\t\t\t&& e.taskId === task._id;\n\t\t}, this.taskService.onDidStateChange)(e => {\n\t\t\ttaskStarted = true;\n\t\t\tc(e.kind === TaskEventKind.ProcessEnded ? { exitCode: e.exitCode } : null);\n\t\t}));\n\n\t\tconst promise: Promise<ITaskSummary | null> = this.taskService.getActiveTasks().then(async (tasks): Promise<ITaskSummary | null> => {\n\t\t\tif (tasks.find(t => t._id === task._id)) {\n\t\t\t\t// Check that the task isn't busy and if it is, wait for it\n\t\t\t\tconst busyTasks = await this.taskService.getBusyTasks();\n\t\t\t\tif (busyTasks.find(t => t._id === task._id)) {\n\t\t\t\t\ttaskStarted = true;\n\t\t\t\t\treturn inactivePromise;\n\t\t\t\t}\n\t\t\t\t// task is already running and isn't busy - nothing to do.\n\t\t\t\treturn Promise.resolve(null);\n\t\t\t}\n\t\t\tonce(e => ((e.kind === TaskEventKind.Active) || (e.kind === TaskEventKind.DependsOnStarted)) && e.taskId === task._id, this.taskService.onDidStateChange)(() => {\n\t\t\t\t// Task is active, so everything seems to be fine, no need to prompt after 10 seconds\n\t\t\t\t// Use case being a slow running task should not be prompted even though it takes more than 10 seconds\n\t\t\t\ttaskStarted = true;\n\t\t\t});\n\t\t\tconst taskPromise = this.taskService.run(task);\n\t\t\tif (task.configurationProperties.isBackground) {\n\t\t\t\treturn inactivePromise;\n\t\t\t}\n\n\t\t\treturn taskPromise.then(withUndefinedAsNull);\n\t\t});\n\n\t\treturn new Promise(async (c, e) => {\n\t\t\tconst waitForInput = new Promise<void>(resolve => once(e => (e.kind === TaskEventKind.AcquiredInput) && e.taskId === task._id, this.taskService.onDidStateChange)(() => {\n\t\t\t\tresolve();\n\t\t\t}));\n\n\t\t\tpromise.then(result => {\n\t\t\t\ttaskStarted = true;\n\t\t\t\tc(result);\n\t\t\t}, error => e(error));\n\n\t\t\tawait waitForInput;\n\t\t\tconst waitTime = task.configurationProperties.isBackground ? 5000 : 10000;\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tif (!taskStarted) {\n\t\t\t\t\tconst errorMessage = typeof taskId === 'string'\n\t\t\t\t\t\t? nls.localize('taskNotTrackedWithTaskId', \"The task '{0}' cannot be tracked. Make sure to have a problem matcher defined.\", taskId)\n\t\t\t\t\t\t: nls.localize('taskNotTracked', \"The task '{0}' cannot be tracked. Make sure to have a problem matcher defined.\", JSON.stringify(taskId));\n\t\t\t\t\te({ severity: severity.Error, message: errorMessage });\n\t\t\t\t}\n\t\t\t}, waitTime);\n\t\t});\n\t}\n}\n"]}