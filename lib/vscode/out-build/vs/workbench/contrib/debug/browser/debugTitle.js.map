{"version":3,"file":"debugTitle.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/debug/browser/debugTitle.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAQhG,IAAa,sBAAsB,GAAnC,MAAa,sBAAsB;QAIlC,YACyB,YAA2B,EAC5B,WAAyB,EACxB,YAA2B;YAF3B,iBAAY,GAAZ,YAAY,CAAe;YAC5B,gBAAW,GAAX,WAAW,CAAc;YACxB,iBAAY,GAAZ,YAAY,CAAe;YAL5C,cAAS,GAAkB,EAAE,CAAC;YAOrC,MAAM,WAAW,GAAG,GAAG,EAAE;gBACxB,IAAI,YAAY,CAAC,KAAK,oBAAkB,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE;oBAClE,YAAY,CAAC,gBAAgB,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;iBAChD;qBAAM;oBACN,YAAY,CAAC,gBAAgB,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC,CAAC;iBAC9C;YACF,CAAC,CAAC;YACF,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC,CAAC;YAChE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC,CAAC;QAChE,CAAC;QAED,OAAO;YACN,CAAA,GAAA,mBAAO,CAAA,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACzB,CAAC;KACD,CAAA;IAvBY,sBAAsB;QAKhC,WAAA,qBAAa,CAAA;QACb,WAAA,mBAAY,CAAA;QACZ,WAAA,4BAAa,CAAA;OAPH,sBAAsB,CAuBlC;IAvBY,wDAAsB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { IDebugService, State } from 'vs/workbench/contrib/debug/common/debug';\nimport { dispose, IDisposable } from 'vs/base/common/lifecycle';\nimport { IHostService } from 'vs/workbench/services/host/browser/host';\nimport { ITitleService } from 'vs/workbench/services/title/common/titleService';\n\nexport class DebugTitleContribution implements IWorkbenchContribution {\n\n\tprivate toDispose: IDisposable[] = [];\n\n\tconstructor(\n\t\t@IDebugService readonly debugService: IDebugService,\n\t\t@IHostService readonly hostService: IHostService,\n\t\t@ITitleService readonly titleService: ITitleService\n\t) {\n\t\tconst updateTitle = () => {\n\t\t\tif (debugService.state === State.Stopped && !hostService.hasFocus) {\n\t\t\t\ttitleService.updateProperties({ prefix: 'ðŸ”´' });\n\t\t\t} else {\n\t\t\t\ttitleService.updateProperties({ prefix: '' });\n\t\t\t}\n\t\t};\n\t\tthis.toDispose.push(debugService.onDidChangeState(updateTitle));\n\t\tthis.toDispose.push(hostService.onDidChangeFocus(updateTitle));\n\t}\n\n\tdispose(): void {\n\t\tdispose(this.toDispose);\n\t}\n}\n"]}