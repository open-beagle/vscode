{"version":3,"sources":["vs/workbench/contrib/debug/browser/callStackEditorContribution.ts"],"names":[],"mappings":"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","file":"callStackEditorContribution.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Constants } from 'vs/base/common/uint';\nimport { Range } from 'vs/editor/common/core/range';\nimport { TrackedRangeStickiness, IModelDeltaDecoration, IModelDecorationOptions, OverviewRulerLane } from 'vs/editor/common/model';\nimport { IDebugService, IStackFrame } from 'vs/workbench/contrib/debug/common/debug';\nimport { registerThemingParticipant, themeColorFromId, ThemeIcon } from 'vs/platform/theme/common/themeService';\nimport { registerColor } from 'vs/platform/theme/common/colorRegistry';\nimport { localize } from 'vs/nls';\nimport { Event } from 'vs/base/common/event';\nimport { IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { IEditorContribution } from 'vs/editor/common/editorCommon';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { distinct } from 'vs/base/common/arrays';\nimport { IUriIdentityService } from 'vs/workbench/services/uriIdentity/common/uriIdentity';\nimport { debugStackframe, debugStackframeFocused } from 'vs/workbench/contrib/debug/browser/debugIcons';\n\nconst topStackFrameColor = registerColor('editor.stackFrameHighlightBackground', { dark: '#ffff0033', light: '#ffff6673', hc: '#ffff0033' }, localize('topStackFrameLineHighlight', 'Background color for the highlight of line at the top stack frame position.'));\nconst focusedStackFrameColor = registerColor('editor.focusedStackFrameHighlightBackground', { dark: '#7abd7a4d', light: '#cee7ce73', hc: '#7abd7a4d' }, localize('focusedStackFrameLineHighlight', 'Background color for the highlight of line at focused stack frame position.'));\nconst stickiness = TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges;\n\n// we need a separate decoration for glyph margin, since we do not want it on each line of a multi line statement.\nconst TOP_STACK_FRAME_MARGIN: IModelDecorationOptions = {\n\tglyphMarginClassName: ThemeIcon.asClassName(debugStackframe),\n\tstickiness,\n\toverviewRuler: {\n\t\tposition: OverviewRulerLane.Full,\n\t\tcolor: themeColorFromId(topStackFrameColor)\n\t}\n};\nconst FOCUSED_STACK_FRAME_MARGIN: IModelDecorationOptions = {\n\tglyphMarginClassName: ThemeIcon.asClassName(debugStackframeFocused),\n\tstickiness,\n\toverviewRuler: {\n\t\tposition: OverviewRulerLane.Full,\n\t\tcolor: themeColorFromId(focusedStackFrameColor)\n\t}\n};\nconst TOP_STACK_FRAME_DECORATION: IModelDecorationOptions = {\n\tisWholeLine: true,\n\tclassName: 'debug-top-stack-frame-line',\n\tstickiness\n};\nconst TOP_STACK_FRAME_INLINE_DECORATION: IModelDecorationOptions = {\n\tbeforeContentClassName: 'debug-top-stack-frame-column'\n};\nconst FOCUSED_STACK_FRAME_DECORATION: IModelDecorationOptions = {\n\tisWholeLine: true,\n\tclassName: 'debug-focused-stack-frame-line',\n\tstickiness\n};\n\nexport function createDecorationsForStackFrame(stackFrame: IStackFrame, isFocusedSession: boolean): IModelDeltaDecoration[] {\n\t// only show decorations for the currently focused thread.\n\tconst result: IModelDeltaDecoration[] = [];\n\tconst columnUntilEOLRange = new Range(stackFrame.range.startLineNumber, stackFrame.range.startColumn, stackFrame.range.startLineNumber, Constants.MAX_SAFE_SMALL_INTEGER);\n\tconst range = new Range(stackFrame.range.startLineNumber, stackFrame.range.startColumn, stackFrame.range.startLineNumber, stackFrame.range.startColumn + 1);\n\n\t// compute how to decorate the editor. Different decorations are used if this is a top stack frame, focused stack frame,\n\t// an exception or a stack frame that did not change the line number (we only decorate the columns, not the whole line).\n\tconst topStackFrame = stackFrame.thread.getTopStackFrame();\n\tif (stackFrame.getId() === topStackFrame?.getId()) {\n\t\tif (isFocusedSession) {\n\t\t\tresult.push({\n\t\t\t\toptions: TOP_STACK_FRAME_MARGIN,\n\t\t\t\trange\n\t\t\t});\n\t\t}\n\n\t\tresult.push({\n\t\t\toptions: TOP_STACK_FRAME_DECORATION,\n\t\t\trange: columnUntilEOLRange\n\t\t});\n\n\t\tif (stackFrame.range.startColumn > 1) {\n\t\t\tresult.push({\n\t\t\t\toptions: TOP_STACK_FRAME_INLINE_DECORATION,\n\t\t\t\trange: columnUntilEOLRange\n\t\t\t});\n\t\t}\n\t} else {\n\t\tif (isFocusedSession) {\n\t\t\tresult.push({\n\t\t\t\toptions: FOCUSED_STACK_FRAME_MARGIN,\n\t\t\t\trange\n\t\t\t});\n\t\t}\n\n\t\tresult.push({\n\t\t\toptions: FOCUSED_STACK_FRAME_DECORATION,\n\t\t\trange: columnUntilEOLRange\n\t\t});\n\t}\n\n\treturn result;\n}\n\nexport class CallStackEditorContribution implements IEditorContribution {\n\tprivate toDispose: IDisposable[] = [];\n\tprivate decorationIds: string[] = [];\n\n\tconstructor(\n\t\tprivate readonly editor: ICodeEditor,\n\t\t@IDebugService private readonly debugService: IDebugService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService\n\t) {\n\t\tconst setDecorations = () => this.decorationIds = this.editor.deltaDecorations(this.decorationIds, this.createCallStackDecorations());\n\t\tthis.toDispose.push(Event.any(this.debugService.getViewModel().onDidFocusStackFrame, this.debugService.getModel().onDidChangeCallStack)(() => {\n\t\t\tsetDecorations();\n\t\t}));\n\t\tthis.toDispose.push(this.editor.onDidChangeModel(e => {\n\t\t\tif (e.newModelUrl) {\n\t\t\t\tsetDecorations();\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate createCallStackDecorations(): IModelDeltaDecoration[] {\n\t\tconst focusedStackFrame = this.debugService.getViewModel().focusedStackFrame;\n\t\tconst decorations: IModelDeltaDecoration[] = [];\n\t\tthis.debugService.getModel().getSessions().forEach(s => {\n\t\t\tconst isSessionFocused = s === focusedStackFrame?.thread.session;\n\t\t\ts.getAllThreads().forEach(t => {\n\t\t\t\tif (t.stopped) {\n\t\t\t\t\tconst callStack = t.getCallStack();\n\t\t\t\t\tconst stackFrames: IStackFrame[] = [];\n\t\t\t\t\tif (callStack.length > 0) {\n\t\t\t\t\t\t// Always decorate top stack frame, and decorate focused stack frame if it is not the top stack frame\n\t\t\t\t\t\tif (focusedStackFrame && !focusedStackFrame.equals(callStack[0])) {\n\t\t\t\t\t\t\tstackFrames.push(focusedStackFrame);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstackFrames.push(callStack[0]);\n\t\t\t\t\t}\n\n\t\t\t\t\tstackFrames.forEach(candidateStackFrame => {\n\t\t\t\t\t\tif (candidateStackFrame && this.uriIdentityService.extUri.isEqual(candidateStackFrame.source.uri, this.editor.getModel()?.uri)) {\n\t\t\t\t\t\t\tdecorations.push(...createDecorationsForStackFrame(candidateStackFrame, isSessionFocused));\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\t// Deduplicate same decorations so colors do not stack #109045\n\t\treturn distinct(decorations, d => `${d.options.className} ${d.options.glyphMarginClassName} ${d.range.startLineNumber} ${d.range.startColumn}`);\n\t}\n\n\tdispose(): void {\n\t\tthis.editor.deltaDecorations(this.decorationIds, []);\n\t\tthis.toDispose = dispose(this.toDispose);\n\t}\n}\n\nregisterThemingParticipant((theme, collector) => {\n\tconst topStackFrame = theme.getColor(topStackFrameColor);\n\tif (topStackFrame) {\n\t\tcollector.addRule(`.monaco-editor .view-overlays .debug-top-stack-frame-line { background: ${topStackFrame}; }`);\n\t}\n\n\tconst focusedStackFrame = theme.getColor(focusedStackFrameColor);\n\tif (focusedStackFrame) {\n\t\tcollector.addRule(`.monaco-editor .view-overlays .debug-focused-stack-frame-line { background: ${focusedStackFrame}; }`);\n\t}\n});\n"]}