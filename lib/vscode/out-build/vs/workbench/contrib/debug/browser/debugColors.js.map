{"version":3,"sources":["vs/workbench/contrib/debug/browser/debugColors.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAQnF,QAAA,sBAAsB,GAAG,CAAA,GAAA,6BAAa,CAAA,CAAC,yBAAyB,EAAE;QAC9E,IAAI,EAAE,SAAS;QACf,KAAK,EAAE,SAAS;QAChB,EAAE,EAAE,SAAS;KACb,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAwB,EAAE,IAAiC,CAAC,CAAC,CAAC;IAE7D,QAAA,kBAAkB,GAAG,CAAA,GAAA,6BAAa,CAAA,CAAC,qBAAqB,EAAE;QACtE,IAAI,EAAE,IAAI;QACV,KAAK,EAAE,IAAI;QACX,EAAE,EAAE,IAAI;KACR,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAoB,EAAE,IAA6B,CAAC,CAAC,CAAC;IAErD,QAAA,wBAAwB,GAAG,CAAA,GAAA,6BAAa,CAAA,CAAC,2BAA2B,EAAE;QAClF,IAAI,EAAE,SAAS;QACf,KAAK,EAAE,SAAS;QAChB,EAAE,EAAE,SAAS;KACb,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAA2B,EAAE,IAAyC,CAAC,CAAC,CAAC;IAErF,SAAgB,cAAc;QAE7B,MAAM,wBAAwB,GAAG,CAAA,GAAA,6BAAa,CAAA,CAAC,2BAA2B,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,EAAE,EAAE,0BAAU,EAAE,EAAE,kGAAkG,CAAC,CAAC;QACvO,MAAM,yBAAyB,GAAG,CAAA,GAAA,6BAAa,CAAA,CAAC,4BAA4B,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,KAAK,EAAE,WAAW,EAAE,EAAE,EAAE,0BAAU,EAAE,EAAE,mGAAmG,CAAC,CAAC;QAC9O,MAAM,0BAA0B,GAAG,CAAA,GAAA,6BAAa,CAAA,CAAC,6BAA6B,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,EAAE,EAAE,SAAS,EAAE,EAAE,oFAAoF,CAAC,CAAC;QAC5N,MAAM,2BAA2B,GAAG,CAAA,GAAA,6BAAa,CAAA,CAAC,8BAA8B,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,EAAE,EAAE,SAAS,EAAE,EAAE,qFAAqF,CAAC,CAAC;QAC/N,MAAM,0BAA0B,GAAG,CAAA,GAAA,6BAAa,CAAA,CAAC,6BAA6B,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,EAAE,EAAE,SAAS,EAAE,EAAE,oFAAoF,CAAC,CAAC;QAC5N,MAAM,yBAAyB,GAAG,CAAA,GAAA,6BAAa,CAAA,CAAC,4BAA4B,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,EAAE,EAAE,SAAS,EAAE,EAAE,4IAA4I,CAAC,CAAC;QAElR,MAAM,iCAAiC,GAAG,CAAA,GAAA,6BAAa,CAAA,CAAC,oCAAoC,EAAE,EAAE,IAAI,EAAE,0BAAU,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE,EAAE,0BAAU,EAAE,EAAE,qGAAqG,CAAC,CAAC;QAC1P,MAAM,iCAAiC,GAAG,CAAA,GAAA,6BAAa,CAAA,CAAC,oCAAoC,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,EAAE,EAAE,SAAS,EAAE,EAAE,qGAAqG,CAAC,CAAC;QAC3P,MAAM,6BAA6B,GAAG,CAAA,GAAA,6BAAa,CAAA,CAAC,gCAAgC,EAAE,EAAE,IAAI,EAAE,0BAAU,EAAE,KAAK,EAAE,0BAAU,EAAE,EAAE,EAAE,0BAAU,EAAE,EAAE,wGAAwG,CAAC,CAAC;QACzP,MAAM,6BAA6B,GAAG,CAAA,GAAA,6BAAa,CAAA,CAAC,gCAAgC,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,KAAK,EAAE,WAAW,EAAE,EAAE,EAAE,WAAW,EAAE,EAAE,wGAAwG,CAAC,CAAC;QAC5P,MAAM,8BAA8B,GAAG,CAAA,GAAA,6BAAa,CAAA,CAAC,iCAAiC,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,EAAE,EAAE,SAAS,EAAE,EAAE,uFAAuF,CAAC,CAAC;QAEvO,MAAM,0BAA0B,GAAG,CAAA,GAAA,6BAAa,CAAA,CAAC,6BAA6B,EAAE,EAAE,IAAI,EAAE,oCAAoB,EAAE,KAAK,EAAE,oCAAoB,EAAE,EAAE,EAAE,0BAAU,EAAE,EAAE,2DAA2D,CAAC,CAAC;QAC1N,MAAM,6BAA6B,GAAG,CAAA,GAAA,6BAAa,CAAA,CAAC,gCAAgC,EAAE,EAAE,IAAI,EAAE,uCAAuB,EAAE,KAAK,EAAE,uCAAuB,EAAE,EAAE,EAAE,SAAS,EAAE,EAAE,8DAA8D,CAAC,CAAC;QACxO,MAAM,2BAA2B,GAAG,CAAA,GAAA,6BAAa,CAAA,CAAC,8BAA8B,EAAE,EAAE,IAAI,EAAE,+BAAe,EAAE,KAAK,EAAE,+BAAe,EAAE,EAAE,EAAE,+BAAe,EAAE,EAAE,4DAA4D,CAAC,CAAC;QACxN,MAAM,4BAA4B,GAAG,CAAA,GAAA,6BAAa,CAAA,CAAC,+BAA+B,EAAE,EAAE,IAAI,EAAE,0BAAU,EAAE,KAAK,EAAE,0BAAU,EAAE,EAAE,EAAE,0BAAU,EAAE,EAAE,8DAA8D,CAAC,CAAC;QAC7M,MAAM,+BAA+B,GAAG,CAAA,GAAA,6BAAa,CAAA,CAAC,kCAAkC,EAAE,EAAE,IAAI,EAAE,0BAAU,EAAE,KAAK,EAAE,0BAAU,EAAE,EAAE,EAAE,0BAAU,EAAE,EAAE,uDAAuD,CAAC,CAAC;QAE5M,MAAM,wBAAwB,GAAG,CAAA,GAAA,6BAAa,CAAA,CAAC,2BAA2B,EAAE;YAC3E,IAAI,EAAE,SAAS;YACf,KAAK,EAAE,SAAS;YAChB,EAAE,EAAE,SAAS;SACb,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAA2B,EAAE,IAA+B,CAAC,CAAC,CAAC;QAE3E,MAAM,uBAAuB,GAAG,CAAA,GAAA,6BAAa,CAAA,CAAC,0BAA0B,EAAE;YACzE,IAAI,EAAE,SAAS;YACf,KAAK,EAAE,SAAS;YAChB,EAAE,EAAE,SAAS;SACb,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAA0B,EAAE,IAA8B,CAAC,CAAC,CAAC;QAEzE,MAAM,6BAA6B,GAAG,CAAA,GAAA,6BAAa,CAAA,CAAC,gCAAgC,EAAE;YACrF,IAAI,EAAE,SAAS;YACf,KAAK,EAAE,SAAS;YAChB,EAAE,EAAE,SAAS;SACb,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAgC,EAAE,IAAoC,CAAC,CAAC,CAAC;QAErF,MAAM,0BAA0B,GAAG,CAAA,GAAA,6BAAa,CAAA,CAAC,6BAA6B,EAAE;YAC/E,IAAI,EAAE,SAAS;YACf,KAAK,EAAE,SAAS;YAChB,EAAE,EAAE,SAAS;SACb,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAA6B,EAAE,IAAiC,CAAC,CAAC,CAAC;QAE/E,MAAM,2BAA2B,GAAG,CAAA,GAAA,6BAAa,CAAA,CAAC,8BAA8B,EAAE;YACjF,IAAI,EAAE,SAAS;YACf,KAAK,EAAE,SAAS;YAChB,EAAE,EAAE,SAAS;SACb,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAA8B,EAAE,IAAmC,CAAC,CAAC,CAAC;QAElF,MAAM,2BAA2B,GAAG,CAAA,GAAA,6BAAa,CAAA,CAAC,8BAA8B,EAAE;YACjF,IAAI,EAAE,SAAS;YACf,KAAK,EAAE,SAAS;YAChB,EAAE,EAAE,SAAS;SACb,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAA8B,EAAE,IAAmC,CAAC,CAAC,CAAC;QAElF,MAAM,0BAA0B,GAAG,CAAA,GAAA,6BAAa,CAAA,CAAC,6BAA6B,EAAE;YAC/E,IAAI,EAAE,SAAS;YACf,KAAK,EAAE,SAAS;YAChB,EAAE,EAAE,SAAS;SACb,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAA6B,EAAE,IAAmC,CAAC,CAAC,CAAC;QAEjF,MAAM,2BAA2B,GAAG,CAAA,GAAA,6BAAa,CAAA,CAAC,8BAA8B,EAAE;YACjF,IAAI,EAAE,SAAS;YACf,KAAK,EAAE,SAAS;YAChB,EAAE,EAAE,SAAS;SACb,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,EAA8B,EAAE,IAAkC,CAAC,CAAC,CAAC;QAEjF,MAAM,2BAA2B,GAAG,CAAA,GAAA,6BAAa,CAAA,CAAC,8BAA8B,EAAE;YACjF,IAAI,EAAE,SAAS;YACf,KAAK,EAAE,SAAS;YAChB,EAAE,EAAE,SAAS;SACb,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,EAA8B,EAAE,IAAmC,CAAC,CAAC,CAAC;QAElF,CAAA,GAAA,yCAA0B,CAAA,CAAC,CAAC,KAAK,EAAE,SAAS,EAAE,EAAE;YAC/C,2FAA2F;YAC3F,MAAM,oBAAoB,GAAG,KAAK,CAAC,QAAQ,CAAC,+BAAe,CAAE,CAAC;YAC9D,MAAM,oBAAoB,GAAG,KAAK,CAAC,QAAQ,CAAC,+BAAe,CAAE,CAAC;YAC9D,MAAM,+BAA+B,GAAG,KAAK,CAAC,QAAQ,CAAC,0CAA0B,CAAE,CAAC;YACpF,MAAM,sCAAsC,GAAG,KAAK,CAAC,QAAQ,CAAC,iCAAiC,CAAE,CAAC;YAClG,MAAM,sCAAsC,GAAG,KAAK,CAAC,QAAQ,CAAC,iCAAiC,CAAE,CAAC;YAClG,MAAM,kCAAkC,GAAG,KAAK,CAAC,QAAQ,CAAC,6BAA6B,CAAE,CAAC;YAC1F,MAAM,kCAAkC,GAAG,KAAK,CAAC,QAAQ,CAAC,6BAA6B,CAAE,CAAC;YAC1F,MAAM,mCAAmC,GAAG,KAAK,CAAC,QAAQ,CAAC,8BAA8B,CAAE,CAAC;YAE5F,SAAS,CAAC,OAAO,CAAC;;;aAGP,+BAA+B;;;;;wBAKpB,oBAAoB;aAC/B,oBAAoB;;;;;wBAKT,oBAAoB,CAAC,WAAW,CAAC,GAAG,CAAC;aAChD,oBAAoB,CAAC,WAAW,CAAC,GAAG,CAAC;;;;;;;;;;wBAU1B,kCAAkC;aAC7C,kCAAkC;;;;;wBAKvB,sCAAsC;aACjD,sCAAsC;;;;;+BAKpB,mCAAmC,CAAC,WAAW,CAAC,CAAC,CAAC;+BAClD,mCAAmC,CAAC,WAAW,CAAC,GAAG,CAAC;+BACpD,mCAAmC,CAAC,WAAW,CAAC,GAAG,CAAC;;;;wBAI3D,mCAAmC,CAAC,WAAW,CAAC,GAAG,CAAC;;;;;GAKzE,CAAC,CAAC;YAEH,MAAM,mBAAmB,GAAG,KAAK,CAAC,QAAQ,CAAC,8BAAc,CAAC,CAAC;YAE3D,IAAI,mBAAmB,EAAE;gBACxB,SAAS,CAAC,OAAO,CAAC;;wBAEG,mBAAmB;;IAEvC,CAAC,CAAC;aACH;YAED,MAAM,cAAc,GAAG,KAAK,CAAC,QAAQ,CAAC,wBAAwB,CAAE,CAAC;YACjE,MAAM,eAAe,GAAG,KAAK,CAAC,QAAQ,CAAC,yBAAyB,CAAE,CAAC;YACnE,MAAM,gBAAgB,GAAG,KAAK,CAAC,QAAQ,CAAC,0BAA0B,CAAE,CAAC;YACrE,MAAM,iBAAiB,GAAG,KAAK,CAAC,QAAQ,CAAC,2BAA2B,CAAE,CAAC;YACvE,MAAM,eAAe,GAAG,KAAK,CAAC,QAAQ,CAAC,yBAAyB,CAAE,CAAC;YACnE,MAAM,gBAAgB,GAAG,KAAK,CAAC,QAAQ,CAAC,0BAA0B,CAAE,CAAC;YAErE,SAAS,CAAC,OAAO,CAAC;;aAEP,cAAc;;;;;aAKd,eAAe;;;;;aAKf,gBAAgB;;;;;aAKhB,iBAAiB;;;;;;aAMjB,eAAe;;;;;aAKf,gBAAgB;;GAE1B,CAAC,CAAC;YAEH,MAAM,4BAA4B,GAAG,KAAK,CAAC,QAAQ,CAAC,2BAAW,CAAC,IAAI,aAAK,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;YAC/F,MAAM,+BAA+B,GAAG,KAAK,CAAC,QAAQ,CAAC,0BAA0B,CAAE,CAAC;YACpF,MAAM,kCAAkC,GAAG,KAAK,CAAC,QAAQ,CAAC,6BAA6B,CAAE,CAAC;YAC1F,MAAM,gCAAgC,GAAG,KAAK,CAAC,QAAQ,CAAC,2BAA2B,CAAE,CAAC;YACtF,MAAM,iCAAiC,GAAG,KAAK,CAAC,QAAQ,CAAC,4BAA4B,CAAE,CAAC;YACxF,MAAM,oCAAoC,GAAG,KAAK,CAAC,QAAQ,CAAC,+BAA+B,CAAE,CAAC;YAE9F,SAAS,CAAC,OAAO,CAAC;;4BAEQ,4BAA4B;;;;aAI3C,+BAA+B;;;;aAI/B,kCAAkC;;;;aAIlC,gCAAgC;;;;aAIhC,iCAAiC;;;;aAIjC,oCAAoC;;GAE9C,CAAC,CAAC;YAEH,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,+BAA+B,CAAC,EAAE;gBACpD,SAAS,CAAC,OAAO,CAAC;;;;;;;;;;;;IAYjB,CAAC,CAAC;aACH;YAED,MAAM,mBAAmB,GAAG,KAAK,CAAC,QAAQ,CAAC,gCAAwB,CAAC,CAAC;YACrE,IAAI,mBAAmB,EAAE;gBACxB,SAAS,CAAC,OAAO,CAAC,qBAAqB,wBAAS,CAAC,aAAa,CAAC,KAAK,CAAC,UAAU,CAAC,aAAa,mBAAmB,gBAAgB,CAAC,CAAC;aAClI;YAED,MAAM,mBAAmB,GAAG,KAAK,CAAC,QAAQ,CAAC,wBAAwB,CAAC,CAAC;YACrE,IAAI,mBAAmB,EAAE;gBACxB,SAAS,CAAC,OAAO,CAAC,qBAAqB,wBAAS,CAAC,aAAa,CAAC,KAAK,CAAC,UAAU,CAAC,aAAa,mBAAmB,gBAAgB,CAAC,CAAC;aAClI;YAED,MAAM,kBAAkB,GAAG,KAAK,CAAC,QAAQ,CAAC,uBAAuB,CAAC,CAAC;YACnE,IAAI,kBAAkB,EAAE;gBACvB,SAAS,CAAC,OAAO,CAAC,qBAAqB,wBAAS,CAAC,aAAa,CAAC,KAAK,CAAC,SAAS,CAAC,aAAa,kBAAkB,gBAAgB,CAAC,CAAC;aAChI;YAED,MAAM,wBAAwB,GAAG,KAAK,CAAC,QAAQ,CAAC,6BAA6B,CAAC,CAAC;YAC/E,IAAI,wBAAwB,EAAE;gBAC7B,SAAS,CAAC,OAAO,CAAC,yCAAyC,wBAAS,CAAC,aAAa,CAAC,KAAK,CAAC,eAAe,CAAC,sCAAsC,wBAAS,CAAC,aAAa,CAAC,KAAK,CAAC,eAAe,CAAC,aAAa,wBAAwB,gBAAgB,CAAC,CAAC;aACpP;YAED,MAAM,qBAAqB,GAAG,KAAK,CAAC,QAAQ,CAAC,0BAA0B,CAAC,CAAC;YACzE,IAAI,qBAAqB,EAAE;gBAC1B,SAAS,CAAC,OAAO,CAAC,qBAAqB,wBAAS,CAAC,aAAa,CAAC,KAAK,CAAC,YAAY,CAAC,uBAAuB,wBAAS,CAAC,aAAa,CAAC,KAAK,CAAC,iBAAiB,CAAC,aAAa,qBAAqB,gBAAgB,CAAC,CAAC;aAC7M;YAED,MAAM,sBAAsB,GAAG,KAAK,CAAC,QAAQ,CAAC,2BAA2B,CAAC,CAAC;YAC3E,IAAI,sBAAsB,EAAE;gBAC3B,SAAS,CAAC,OAAO,CAAC,qBAAqB,wBAAS,CAAC,aAAa,CAAC,KAAK,CAAC,aAAa,CAAC,aAAa,sBAAsB,gBAAgB,CAAC,CAAC;aACxI;YAED,MAAM,sBAAsB,GAAG,KAAK,CAAC,QAAQ,CAAC,2BAA2B,CAAC,CAAC;YAC3E,IAAI,sBAAsB,EAAE;gBAC3B,SAAS,CAAC,OAAO,CAAC,qBAAqB,wBAAS,CAAC,aAAa,CAAC,KAAK,CAAC,aAAa,CAAC,aAAa,sBAAsB,gBAAgB,CAAC,CAAC;aACxI;YAED,MAAM,qBAAqB,GAAG,KAAK,CAAC,QAAQ,CAAC,0BAA0B,CAAC,CAAC;YACzE,IAAI,qBAAqB,EAAE;gBAC1B,SAAS,CAAC,OAAO,CAAC,qBAAqB,wBAAS,CAAC,aAAa,CAAC,KAAK,CAAC,YAAY,CAAC,aAAa,qBAAqB,gBAAgB,CAAC,CAAC;aACtI;YAED,MAAM,sBAAsB,GAAG,KAAK,CAAC,QAAQ,CAAC,2BAA2B,CAAC,CAAC;YAC3E,IAAI,sBAAsB,EAAE;gBAC3B,SAAS,CAAC,OAAO,CAAC,qBAAqB,wBAAS,CAAC,aAAa,CAAC,KAAK,CAAC,aAAa,CAAC,uBAAuB,wBAAS,CAAC,aAAa,CAAC,KAAK,CAAC,oBAAoB,CAAC,aAAa,sBAAsB,gBAAgB,CAAC,CAAC;aAClN;YAED,MAAM,sBAAsB,GAAG,KAAK,CAAC,QAAQ,CAAC,2BAA2B,CAAC,CAAC;YAC3E,IAAI,sBAAsB,EAAE;gBAC3B,SAAS,CAAC,OAAO,CAAC,qBAAqB,wBAAS,CAAC,aAAa,CAAC,KAAK,CAAC,aAAa,CAAC,aAAa,sBAAsB,gBAAgB,CAAC,CAAC;aACxI;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;IA5RD,wCA4RC","file":"debugColors.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { registerColor, foreground, editorInfoForeground, editorWarningForeground, errorForeground, badgeBackground, badgeForeground, listDeemphasizedForeground, contrastBorder, inputBorder } from 'vs/platform/theme/common/colorRegistry';\nimport { registerThemingParticipant, ThemeIcon } from 'vs/platform/theme/common/themeService';\nimport { Color } from 'vs/base/common/color';\nimport { localize } from 'vs/nls';\nimport * as icons from 'vs/workbench/contrib/debug/browser/debugIcons';\n\nexport const debugToolBarBackground = registerColor('debugToolBar.background', {\n\tdark: '#333333',\n\tlight: '#F3F3F3',\n\thc: '#000000'\n}, localize('debugToolBarBackground', \"Debug toolbar background color.\"));\n\nexport const debugToolBarBorder = registerColor('debugToolBar.border', {\n\tdark: null,\n\tlight: null,\n\thc: null\n}, localize('debugToolBarBorder', \"Debug toolbar border color.\"));\n\nexport const debugIconStartForeground = registerColor('debugIcon.startForeground', {\n\tdark: '#89D185',\n\tlight: '#388A34',\n\thc: '#89D185'\n}, localize('debugIcon.startForeground', \"Debug toolbar icon for start debugging.\"));\n\nexport function registerColors() {\n\n\tconst debugTokenExpressionName = registerColor('debugTokenExpression.name', { dark: '#c586c0', light: '#9b46b0', hc: foreground }, 'Foreground color for the token names shown in the debug views (ie. the Variables or Watch view).');\n\tconst debugTokenExpressionValue = registerColor('debugTokenExpression.value', { dark: '#cccccc99', light: '#6c6c6ccc', hc: foreground }, 'Foreground color for the token values shown in the debug views (ie. the Variables or Watch view).');\n\tconst debugTokenExpressionString = registerColor('debugTokenExpression.string', { dark: '#ce9178', light: '#a31515', hc: '#f48771' }, 'Foreground color for strings in the debug views (ie. the Variables or Watch view).');\n\tconst debugTokenExpressionBoolean = registerColor('debugTokenExpression.boolean', { dark: '#4e94ce', light: '#0000ff', hc: '#75bdfe' }, 'Foreground color for booleans in the debug views (ie. the Variables or Watch view).');\n\tconst debugTokenExpressionNumber = registerColor('debugTokenExpression.number', { dark: '#b5cea8', light: '#098658', hc: '#89d185' }, 'Foreground color for numbers in the debug views (ie. the Variables or Watch view).');\n\tconst debugTokenExpressionError = registerColor('debugTokenExpression.error', { dark: '#f48771', light: '#e51400', hc: '#f48771' }, 'Foreground color for expression errors in the debug views (ie. the Variables or Watch view) and for error logs shown in the debug console.');\n\n\tconst debugViewExceptionLabelForeground = registerColor('debugView.exceptionLabelForeground', { dark: foreground, light: '#FFF', hc: foreground }, 'Foreground color for a label shown in the CALL STACK view when the debugger breaks on an exception.');\n\tconst debugViewExceptionLabelBackground = registerColor('debugView.exceptionLabelBackground', { dark: '#6C2022', light: '#A31515', hc: '#6C2022' }, 'Background color for a label shown in the CALL STACK view when the debugger breaks on an exception.');\n\tconst debugViewStateLabelForeground = registerColor('debugView.stateLabelForeground', { dark: foreground, light: foreground, hc: foreground }, 'Foreground color for a label in the CALL STACK view showing the current session\\'s or thread\\'s state.');\n\tconst debugViewStateLabelBackground = registerColor('debugView.stateLabelBackground', { dark: '#88888844', light: '#88888844', hc: '#88888844' }, 'Background color for a label in the CALL STACK view showing the current session\\'s or thread\\'s state.');\n\tconst debugViewValueChangedHighlight = registerColor('debugView.valueChangedHighlight', { dark: '#569CD6', light: '#569CD6', hc: '#569CD6' }, 'Color used to highlight value changes in the debug views (ie. in the Variables view).');\n\n\tconst debugConsoleInfoForeground = registerColor('debugConsole.infoForeground', { dark: editorInfoForeground, light: editorInfoForeground, hc: foreground }, 'Foreground color for info messages in debug REPL console.');\n\tconst debugConsoleWarningForeground = registerColor('debugConsole.warningForeground', { dark: editorWarningForeground, light: editorWarningForeground, hc: '#008000' }, 'Foreground color for warning messages in debug REPL console.');\n\tconst debugConsoleErrorForeground = registerColor('debugConsole.errorForeground', { dark: errorForeground, light: errorForeground, hc: errorForeground }, 'Foreground color for error messages in debug REPL console.');\n\tconst debugConsoleSourceForeground = registerColor('debugConsole.sourceForeground', { dark: foreground, light: foreground, hc: foreground }, 'Foreground color for source filenames in debug REPL console.');\n\tconst debugConsoleInputIconForeground = registerColor('debugConsoleInputIcon.foreground', { dark: foreground, light: foreground, hc: foreground }, 'Foreground color for debug console input marker icon.');\n\n\tconst debugIconPauseForeground = registerColor('debugIcon.pauseForeground', {\n\t\tdark: '#75BEFF',\n\t\tlight: '#007ACC',\n\t\thc: '#75BEFF'\n\t}, localize('debugIcon.pauseForeground', \"Debug toolbar icon for pause.\"));\n\n\tconst debugIconStopForeground = registerColor('debugIcon.stopForeground', {\n\t\tdark: '#F48771',\n\t\tlight: '#A1260D',\n\t\thc: '#F48771'\n\t}, localize('debugIcon.stopForeground', \"Debug toolbar icon for stop.\"));\n\n\tconst debugIconDisconnectForeground = registerColor('debugIcon.disconnectForeground', {\n\t\tdark: '#F48771',\n\t\tlight: '#A1260D',\n\t\thc: '#F48771'\n\t}, localize('debugIcon.disconnectForeground', \"Debug toolbar icon for disconnect.\"));\n\n\tconst debugIconRestartForeground = registerColor('debugIcon.restartForeground', {\n\t\tdark: '#89D185',\n\t\tlight: '#388A34',\n\t\thc: '#89D185'\n\t}, localize('debugIcon.restartForeground', \"Debug toolbar icon for restart.\"));\n\n\tconst debugIconStepOverForeground = registerColor('debugIcon.stepOverForeground', {\n\t\tdark: '#75BEFF',\n\t\tlight: '#007ACC',\n\t\thc: '#75BEFF'\n\t}, localize('debugIcon.stepOverForeground', \"Debug toolbar icon for step over.\"));\n\n\tconst debugIconStepIntoForeground = registerColor('debugIcon.stepIntoForeground', {\n\t\tdark: '#75BEFF',\n\t\tlight: '#007ACC',\n\t\thc: '#75BEFF'\n\t}, localize('debugIcon.stepIntoForeground', \"Debug toolbar icon for step into.\"));\n\n\tconst debugIconStepOutForeground = registerColor('debugIcon.stepOutForeground', {\n\t\tdark: '#75BEFF',\n\t\tlight: '#007ACC',\n\t\thc: '#75BEFF'\n\t}, localize('debugIcon.stepOutForeground', \"Debug toolbar icon for step over.\"));\n\n\tconst debugIconContinueForeground = registerColor('debugIcon.continueForeground', {\n\t\tdark: '#75BEFF',\n\t\tlight: '#007ACC',\n\t\thc: '#75BEFF'\n\t}, localize('debugIcon.continueForeground', \"Debug toolbar icon for continue.\"));\n\n\tconst debugIconStepBackForeground = registerColor('debugIcon.stepBackForeground', {\n\t\tdark: '#75BEFF',\n\t\tlight: '#007ACC',\n\t\thc: '#75BEFF'\n\t}, localize('debugIcon.stepBackForeground', \"Debug toolbar icon for step back.\"));\n\n\tregisterThemingParticipant((theme, collector) => {\n\t\t// All these colours provide a default value so they will never be undefined, hence the `!`\n\t\tconst badgeBackgroundColor = theme.getColor(badgeBackground)!;\n\t\tconst badgeForegroundColor = theme.getColor(badgeForeground)!;\n\t\tconst listDeemphasizedForegroundColor = theme.getColor(listDeemphasizedForeground)!;\n\t\tconst debugViewExceptionLabelForegroundColor = theme.getColor(debugViewExceptionLabelForeground)!;\n\t\tconst debugViewExceptionLabelBackgroundColor = theme.getColor(debugViewExceptionLabelBackground)!;\n\t\tconst debugViewStateLabelForegroundColor = theme.getColor(debugViewStateLabelForeground)!;\n\t\tconst debugViewStateLabelBackgroundColor = theme.getColor(debugViewStateLabelBackground)!;\n\t\tconst debugViewValueChangedHighlightColor = theme.getColor(debugViewValueChangedHighlight)!;\n\n\t\tcollector.addRule(`\n\t\t\t/* Text colour of the call stack row's filename */\n\t\t\t.debug-pane .debug-call-stack .monaco-list-row:not(.selected) .stack-frame > .file .file-name {\n\t\t\t\tcolor: ${listDeemphasizedForegroundColor}\n\t\t\t}\n\n\t\t\t/* Line & column number \"badge\" for selected call stack row */\n\t\t\t.debug-pane .monaco-list-row.selected .line-number {\n\t\t\t\tbackground-color: ${badgeBackgroundColor};\n\t\t\t\tcolor: ${badgeForegroundColor};\n\t\t\t}\n\n\t\t\t/* Line & column number \"badge\" for unselected call stack row (basically all other rows) */\n\t\t\t.debug-pane .line-number {\n\t\t\t\tbackground-color: ${badgeBackgroundColor.transparent(0.6)};\n\t\t\t\tcolor: ${badgeForegroundColor.transparent(0.6)};\n\t\t\t}\n\n\t\t\t/* State \"badge\" displaying the active session's current state.\n\t\t\t* Only visible when there are more active debug sessions/threads running.\n\t\t\t*/\n\t\t\t.debug-pane .debug-call-stack .thread > .state.label,\n\t\t\t.debug-pane .debug-call-stack .session > .state.label,\n\t\t\t.debug-pane .monaco-list-row.selected .thread > .state.label,\n\t\t\t.debug-pane .monaco-list-row.selected .session > .state.label {\n\t\t\t\tbackground-color: ${debugViewStateLabelBackgroundColor};\n\t\t\t\tcolor: ${debugViewStateLabelForegroundColor};\n\t\t\t}\n\n\t\t\t/* Info \"badge\" shown when the debugger pauses due to a thrown exception. */\n\t\t\t.debug-pane .debug-call-stack-title > .pause-message > .label.exception {\n\t\t\t\tbackground-color: ${debugViewExceptionLabelBackgroundColor};\n\t\t\t\tcolor: ${debugViewExceptionLabelForegroundColor};\n\t\t\t}\n\n\t\t\t/* Animation of changed values in Debug viewlet */\n\t\t\t@keyframes debugViewletValueChanged {\n\t\t\t\t0%   { background-color: ${debugViewValueChangedHighlightColor.transparent(0)} }\n\t\t\t\t5%   { background-color: ${debugViewValueChangedHighlightColor.transparent(0.9)} }\n\t\t\t\t100% { background-color: ${debugViewValueChangedHighlightColor.transparent(0.3)} }\n\t\t\t}\n\n\t\t\t.debug-pane .monaco-list-row .expression .value.changed {\n\t\t\t\tbackground-color: ${debugViewValueChangedHighlightColor.transparent(0.3)};\n\t\t\t\tanimation-name: debugViewletValueChanged;\n\t\t\t\tanimation-duration: 1s;\n\t\t\t\tanimation-fill-mode: forwards;\n\t\t\t}\n\t\t`);\n\n\t\tconst contrastBorderColor = theme.getColor(contrastBorder);\n\n\t\tif (contrastBorderColor) {\n\t\t\tcollector.addRule(`\n\t\t\t.debug-pane .line-number {\n\t\t\t\tborder: 1px solid ${contrastBorderColor};\n\t\t\t}\n\t\t\t`);\n\t\t}\n\n\t\tconst tokenNameColor = theme.getColor(debugTokenExpressionName)!;\n\t\tconst tokenValueColor = theme.getColor(debugTokenExpressionValue)!;\n\t\tconst tokenStringColor = theme.getColor(debugTokenExpressionString)!;\n\t\tconst tokenBooleanColor = theme.getColor(debugTokenExpressionBoolean)!;\n\t\tconst tokenErrorColor = theme.getColor(debugTokenExpressionError)!;\n\t\tconst tokenNumberColor = theme.getColor(debugTokenExpressionNumber)!;\n\n\t\tcollector.addRule(`\n\t\t\t.monaco-workbench .monaco-list-row .expression .name {\n\t\t\t\tcolor: ${tokenNameColor};\n\t\t\t}\n\n\t\t\t.monaco-workbench .monaco-list-row .expression .value,\n\t\t\t.monaco-workbench .debug-hover-widget .value {\n\t\t\t\tcolor: ${tokenValueColor};\n\t\t\t}\n\n\t\t\t.monaco-workbench .monaco-list-row .expression .value.string,\n\t\t\t.monaco-workbench .debug-hover-widget .value.string {\n\t\t\t\tcolor: ${tokenStringColor};\n\t\t\t}\n\n\t\t\t.monaco-workbench .monaco-list-row .expression .value.boolean,\n\t\t\t.monaco-workbench .debug-hover-widget .value.boolean {\n\t\t\t\tcolor: ${tokenBooleanColor};\n\t\t\t}\n\n\t\t\t.monaco-workbench .monaco-list-row .expression .error,\n\t\t\t.monaco-workbench .debug-hover-widget .error,\n\t\t\t.monaco-workbench .debug-pane .debug-variables .scope .error {\n\t\t\t\tcolor: ${tokenErrorColor};\n\t\t\t}\n\n\t\t\t.monaco-workbench .monaco-list-row .expression .value.number,\n\t\t\t.monaco-workbench .debug-hover-widget .value.number {\n\t\t\t\tcolor: ${tokenNumberColor};\n\t\t\t}\n\t\t`);\n\n\t\tconst debugConsoleInputBorderColor = theme.getColor(inputBorder) || Color.fromHex('#80808060');\n\t\tconst debugConsoleInfoForegroundColor = theme.getColor(debugConsoleInfoForeground)!;\n\t\tconst debugConsoleWarningForegroundColor = theme.getColor(debugConsoleWarningForeground)!;\n\t\tconst debugConsoleErrorForegroundColor = theme.getColor(debugConsoleErrorForeground)!;\n\t\tconst debugConsoleSourceForegroundColor = theme.getColor(debugConsoleSourceForeground)!;\n\t\tconst debugConsoleInputIconForegroundColor = theme.getColor(debugConsoleInputIconForeground)!;\n\n\t\tcollector.addRule(`\n\t\t\t.repl .repl-input-wrapper {\n\t\t\t\tborder-top: 1px solid ${debugConsoleInputBorderColor};\n\t\t\t}\n\n\t\t\t.monaco-workbench .repl .repl-tree .output .expression .value.info {\n\t\t\t\tcolor: ${debugConsoleInfoForegroundColor};\n\t\t\t}\n\n\t\t\t.monaco-workbench .repl .repl-tree .output .expression .value.warn {\n\t\t\t\tcolor: ${debugConsoleWarningForegroundColor};\n\t\t\t}\n\n\t\t\t.monaco-workbench .repl .repl-tree .output .expression .value.error {\n\t\t\t\tcolor: ${debugConsoleErrorForegroundColor};\n\t\t\t}\n\n\t\t\t.monaco-workbench .repl .repl-tree .output .expression .source {\n\t\t\t\tcolor: ${debugConsoleSourceForegroundColor};\n\t\t\t}\n\n\t\t\t.monaco-workbench .repl .repl-tree .monaco-tl-contents .arrow {\n\t\t\t\tcolor: ${debugConsoleInputIconForegroundColor};\n\t\t\t}\n\t\t`);\n\n\t\tif (!theme.defines(debugConsoleInputIconForeground)) {\n\t\t\tcollector.addRule(`\n\t\t\t\t.monaco-workbench.vs .repl .repl-tree .monaco-tl-contents .arrow {\n\t\t\t\t\topacity: 0.25;\n\t\t\t\t}\n\n\t\t\t\t.monaco-workbench.vs-dark .repl .repl-tree .monaco-tl-contents .arrow {\n\t\t\t\t\topacity: 0.4;\n\t\t\t\t}\n\n\t\t\t\t.monaco-workbench.hc-black .repl .repl-tree .monaco-tl-contents .arrow {\n\t\t\t\t\topacity: 1;\n\t\t\t\t}\n\t\t\t`);\n\t\t}\n\n\t\tconst debugIconStartColor = theme.getColor(debugIconStartForeground);\n\t\tif (debugIconStartColor) {\n\t\t\tcollector.addRule(`.monaco-workbench ${ThemeIcon.asCSSSelector(icons.debugStart)} { color: ${debugIconStartColor} !important; }`);\n\t\t}\n\n\t\tconst debugIconPauseColor = theme.getColor(debugIconPauseForeground);\n\t\tif (debugIconPauseColor) {\n\t\t\tcollector.addRule(`.monaco-workbench ${ThemeIcon.asCSSSelector(icons.debugPause)} { color: ${debugIconPauseColor} !important; }`);\n\t\t}\n\n\t\tconst debugIconStopColor = theme.getColor(debugIconStopForeground);\n\t\tif (debugIconStopColor) {\n\t\t\tcollector.addRule(`.monaco-workbench ${ThemeIcon.asCSSSelector(icons.debugStop)} { color: ${debugIconStopColor} !important; }`);\n\t\t}\n\n\t\tconst debugIconDisconnectColor = theme.getColor(debugIconDisconnectForeground);\n\t\tif (debugIconDisconnectColor) {\n\t\t\tcollector.addRule(`.monaco-workbench .debug-view-content ${ThemeIcon.asCSSSelector(icons.debugDisconnect)}, .monaco-workbench .debug-toolbar ${ThemeIcon.asCSSSelector(icons.debugDisconnect)} { color: ${debugIconDisconnectColor} !important; }`);\n\t\t}\n\n\t\tconst debugIconRestartColor = theme.getColor(debugIconRestartForeground);\n\t\tif (debugIconRestartColor) {\n\t\t\tcollector.addRule(`.monaco-workbench ${ThemeIcon.asCSSSelector(icons.debugRestart)}, .monaco-workbench ${ThemeIcon.asCSSSelector(icons.debugRestartFrame)} { color: ${debugIconRestartColor} !important; }`);\n\t\t}\n\n\t\tconst debugIconStepOverColor = theme.getColor(debugIconStepOverForeground);\n\t\tif (debugIconStepOverColor) {\n\t\t\tcollector.addRule(`.monaco-workbench ${ThemeIcon.asCSSSelector(icons.debugStepOver)} { color: ${debugIconStepOverColor} !important; }`);\n\t\t}\n\n\t\tconst debugIconStepIntoColor = theme.getColor(debugIconStepIntoForeground);\n\t\tif (debugIconStepIntoColor) {\n\t\t\tcollector.addRule(`.monaco-workbench ${ThemeIcon.asCSSSelector(icons.debugStepInto)} { color: ${debugIconStepIntoColor} !important; }`);\n\t\t}\n\n\t\tconst debugIconStepOutColor = theme.getColor(debugIconStepOutForeground);\n\t\tif (debugIconStepOutColor) {\n\t\t\tcollector.addRule(`.monaco-workbench ${ThemeIcon.asCSSSelector(icons.debugStepOut)} { color: ${debugIconStepOutColor} !important; }`);\n\t\t}\n\n\t\tconst debugIconContinueColor = theme.getColor(debugIconContinueForeground);\n\t\tif (debugIconContinueColor) {\n\t\t\tcollector.addRule(`.monaco-workbench ${ThemeIcon.asCSSSelector(icons.debugContinue)}, .monaco-workbench ${ThemeIcon.asCSSSelector(icons.debugReverseContinue)} { color: ${debugIconContinueColor} !important; }`);\n\t\t}\n\n\t\tconst debugIconStepBackColor = theme.getColor(debugIconStepBackForeground);\n\t\tif (debugIconStepBackColor) {\n\t\t\tcollector.addRule(`.monaco-workbench ${ThemeIcon.asCSSSelector(icons.debugStepBack)} { color: ${debugIconStepBackColor} !important; }`);\n\t\t}\n\t});\n}\n"]}