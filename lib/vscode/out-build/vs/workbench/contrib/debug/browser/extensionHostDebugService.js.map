{"version":3,"file":"extensionHostDebugService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/debug/browser/extensionHostDebugService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;IAmBhG,IAAM,gCAAgC,GAAtC,MAAM,gCAAiC,SAAQ,uDAA+B;QAS7E,YACsB,kBAAuC,EAC9B,kBAAgD,EACjE,UAAuB,EACtB,WAAyB,EACb,cAAwC,EACjD,cAA+B,EAClC,WAAyB;YAEvC,MAAM,UAAU,GAAG,kBAAkB,CAAC,aAAa,EAAE,CAAC;YACtD,IAAI,OAAiB,CAAC;YACtB,IAAI,UAAU,EAAE;gBACf,OAAO,GAAG,UAAU,CAAC,UAAU,CAAC,0DAAkC,CAAC,WAAW,CAAC,CAAC;aAChF;iBAAM;gBACN,wDAAwD;gBACxD,OAAO,GAAG,EAAE,IAAI,EAAE,KAAK,IAAI,EAAE,CAAC,SAAS,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,aAAK,CAAC,IAAI,EAAS,CAAC;aAC3E;YAED,KAAK,CAAC,OAAO,CAAC,CAAC;YAEf,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;YACrC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;YAE/B,IAAI,kBAAkB,CAAC,OAAO,IAAI,kBAAkB,CAAC,OAAO,CAAC,iBAAiB,EAAE;gBAC/E,IAAI,CAAC,iBAAiB,GAAG,kBAAkB,CAAC,OAAO,CAAC,iBAAiB,CAAC;aACtE;iBAAM;gBACN,IAAI,CAAC,iBAAiB,GAAG,EAAE,IAAI,EAAE,KAAK,IAAI,EAAE,CAAC,IAAI,EAAE,SAAS,EAAE,SAAS,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC;gBAC9F,UAAU,CAAC,IAAI,CAAC,2EAA2E,CAAC,CAAC;aAC7F;YAED,kCAAkC;YAClC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;gBACpC,IAAI,kBAAkB,CAAC,sBAAsB,IAAI,kBAAkB,CAAC,kBAAkB,CAAC,OAAO,KAAK,KAAK,CAAC,SAAS,EAAE;oBACnH,WAAW,CAAC,MAAM,EAAE,CAAC;iBACrB;YACF,CAAC,CAAC,CAAC,CAAC;YAEJ,gCAAgC;YAChC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBACnC,IAAI,kBAAkB,CAAC,sBAAsB,IAAI,kBAAkB,CAAC,kBAAkB,CAAC,OAAO,KAAK,KAAK,CAAC,SAAS,EAAE;oBACnH,WAAW,CAAC,KAAK,EAAE,CAAC;iBACpB;YACF,CAAC,CAAC,CAAC,CAAC;YAEJ,4DAA4D;YAC5D,6DAA6D;YAC7D,IAAI,kBAAkB,CAAC,sBAAsB,IAAI,CAAC,kBAAkB,CAAC,yBAAyB,EAAE;gBAC/F,MAAM,WAAW,GAAG,CAAA,GAAA,kCAAqB,CAAA,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC,CAAC;gBACzE,IAAI,CAAA,GAAA,8CAAiC,CAAA,CAAC,WAAW,CAAC,IAAI,CAAA,GAAA,kCAAqB,CAAA,CAAC,WAAW,CAAC,EAAE;oBACzF,MAAM,mBAAmB,GAAG,CAAA,GAAA,8CAAiC,CAAA,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE,SAAS,EAAE,WAAW,CAAC,GAAG,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,YAAY,EAAE,WAAW,CAAC,UAAU,CAAC,MAAM,EAAE,EAAE,CAAC;oBACzK,cAAc,CAAC,KAAK,CAAC,gCAAgC,CAAC,wCAAwC,EAAE,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,+BAA0C,CAAC;iBAC9K;qBAAM;oBACN,cAAc,CAAC,MAAM,CAAC,gCAAgC,CAAC,wCAAwC,iBAAsB,CAAC;iBACtH;aACD;QACF,CAAC;QAEQ,KAAK,CAAC,kCAAkC,CAAC,IAAc,EAAE,IAA6C,EAAE,cAAuB;YAEvI,wDAAwD;YACxD,MAAM,WAAW,GAAG,IAAI,GAAG,EAAkB,CAAC;YAE9C,MAAM,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YACvD,IAAI,UAAU,IAAI,CAAC,CAAA,GAAA,sCAAyB,CAAA,CAAC,UAAU,CAAC,EAAE;gBACzD,WAAW,CAAC,GAAG,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;aACxC;YAED,MAAM,wBAAwB,GAAG,IAAI,CAAC,YAAY,CAAC,0BAA0B,EAAE,IAAI,CAAC,CAAC;YACrF,IAAI,wBAAwB,EAAE;gBAC7B,WAAW,CAAC,GAAG,CAAC,0BAA0B,EAAE,wBAAwB,CAAC,CAAC;aACtE;YAED,MAAM,kBAAkB,GAAG,IAAI,CAAC,YAAY,CAAC,oBAAoB,EAAE,IAAI,CAAC,CAAC;YACzE,IAAI,kBAAkB,EAAE;gBACvB,WAAW,CAAC,GAAG,CAAC,oBAAoB,EAAE,kBAAkB,CAAC,CAAC;aAC1D;YAED,MAAM,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;YACnD,IAAI,OAAO,EAAE;gBACZ,WAAW,CAAC,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;aACpC;YAED,MAAM,oBAAoB,GAAG,IAAI,CAAC,YAAY,CAAC,wBAAwB,EAAE,IAAI,CAAC,CAAC;YAC/E,IAAI,oBAAoB,EAAE;gBACzB,WAAW,CAAC,GAAG,CAAC,wBAAwB,EAAE,oBAAoB,CAAC,CAAC;aAChE;YAED,MAAM,iBAAiB,GAAG,IAAI,CAAC,YAAY,CAAC,oBAAoB,EAAE,IAAI,CAAC,CAAC;YACxE,IAAI,iBAAiB,EAAE;gBACtB,WAAW,CAAC,GAAG,CAAC,oBAAoB,EAAE,iBAAiB,CAAC,CAAC;aACzD;YAED,mDAAmD;YACnD,IAAI,cAAc,GAAe,SAAS,CAAC;YAC3C,MAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;YAC3D,IAAI,YAAY,EAAE;gBACjB,cAAc,GAAG,EAAE,SAAS,EAAE,SAAG,CAAC,KAAK,CAAC,YAAY,CAAC,EAAE,CAAC;aACxD;iBAAM;gBACN,MAAM,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;gBACvD,IAAI,UAAU,IAAI,CAAA,GAAA,sCAAyB,CAAA,CAAC,UAAU,CAAC,EAAE;oBACxD,cAAc,GAAG,EAAE,YAAY,EAAE,SAAG,CAAC,KAAK,CAAC,UAAU,CAAC,EAAE,CAAC;iBACzD;aACD;YAED,IAAI,CAAC,cAAc,IAAI,CAAC,kBAAkB,EAAE;gBAC3C,MAAM,iCAAiC,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,gCAAgC,CAAC,wCAAwC,iBAAsB,CAAC;gBAClK,IAAI,iCAAiC,EAAE;oBACtC,IAAI;wBACH,MAAM,mBAAmB,GAAgE,IAAI,CAAC,KAAK,CAAC,iCAAiC,CAAC,CAAC;wBACvI,IAAI,mBAAmB,CAAC,YAAY,EAAE;4BACrC,cAAc,GAAG,EAAE,YAAY,EAAE,SAAG,CAAC,MAAM,CAAC,mBAAmB,CAAC,YAAY,CAAC,EAAE,CAAC;yBAChF;6BAAM,IAAI,mBAAmB,CAAC,SAAS,EAAE;4BACzC,cAAc,GAAG,EAAE,SAAS,EAAE,SAAG,CAAC,MAAM,CAAC,mBAAmB,CAAC,SAAS,CAAC,EAAE,CAAC;yBAC1E;qBACD;oBAAC,OAAO,KAAK,EAAE;wBACf,SAAS;qBACT;iBACD;aACD;YAED,4BAA4B;YAC5B,IAAI,cAAc,EAAE;gBACnB,MAAM,sBAAsB,GAAG,CAAA,GAAA,wBAAc,CAAA,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC,CAAA,GAAA,2BAAiB,CAAA,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,SAAS,CAAC;gBACvK,IAAI,sBAAsB,EAAE;oBAC3B,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC;oBAC9E,IAAI,CAAC,eAAe,EAAE;wBACrB,cAAc,GAAG,SAAS,CAAC;qBAC3B;iBACD;aACD;YAED,wDAAwD;YACxD,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,cAAc,EAAE;gBACjE,KAAK,EAAE,KAAK;gBACZ,OAAO,EAAE,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC,CAAC,2CAA2C;aACtF,CAAC,CAAC;YAEH,OAAO,EAAE,OAAO,EAAE,CAAC;QACpB,CAAC;QAEO,YAAY,CAAC,GAAW,EAAE,IAAc;YAC/C,KAAK,MAAM,CAAC,IAAI,IAAI,EAAE;gBACrB,MAAM,CAAC,GAAG,KAAK,GAAG,GAAG,CAAC;gBACtB,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;oBACvB,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;iBAC1B;aACD;YAED,OAAO,SAAS,CAAC;QAClB,CAAC;KACD,CAAA;IA7JwB,yEAAwC,GAAG,yCAAyC,CAAC;IAFxG,gCAAgC;QAUnC,WAAA,wCAAmB,CAAA;QACnB,WAAA,iDAA4B,CAAA;QAC5B,WAAA,iBAAW,CAAA;QACX,WAAA,mBAAY,CAAA;QACZ,WAAA,oCAAwB,CAAA;QACxB,WAAA,yBAAe,CAAA;QACf,WAAA,oBAAY,CAAA;OAhBT,gCAAgC,CA+JrC;IAED,CAAA,GAAA,8BAAiB,CAAA,CAAC,+CAA0B,EAAE,gCAAgC,EAAE,IAAI,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ExtensionHostDebugChannelClient, ExtensionHostDebugBroadcastChannel } from 'vs/platform/debug/common/extensionHostDebugIpc';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IExtensionHostDebugService, INullableProcessEnvironment, IOpenExtensionWindowResult } from 'vs/platform/debug/common/extensionHostDebug';\nimport { IChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { Event } from 'vs/base/common/event';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { IWorkspaceProvider, IWorkspace } from 'vs/workbench/services/host/browser/browserHostService';\nimport { hasWorkspaceFileExtension, isSingleFolderWorkspaceIdentifier, isWorkspaceIdentifier, toWorkspaceIdentifier } from 'vs/platform/workspaces/common/workspaces';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IHostService } from 'vs/workbench/services/host/browser/host';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { isFolderToOpen, isWorkspaceToOpen } from 'vs/platform/windows/common/windows';\n\nclass BrowserExtensionHostDebugService extends ExtensionHostDebugChannelClient implements IExtensionHostDebugService {\n\n\tprivate static readonly LAST_EXTENSION_DEVELOPMENT_WORKSPACE_KEY = 'debug.lastExtensionDevelopmentWorkspace';\n\n\tprivate workspaceProvider: IWorkspaceProvider;\n\n\tprivate readonly storageService: IStorageService;\n\tprivate readonly fileService: IFileService;\n\n\tconstructor(\n\t\t@IRemoteAgentService remoteAgentService: IRemoteAgentService,\n\t\t@IWorkbenchEnvironmentService environmentService: IWorkbenchEnvironmentService,\n\t\t@ILogService logService: ILogService,\n\t\t@IHostService hostService: IHostService,\n\t\t@IWorkspaceContextService contextService: IWorkspaceContextService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IFileService fileService: IFileService\n\t) {\n\t\tconst connection = remoteAgentService.getConnection();\n\t\tlet channel: IChannel;\n\t\tif (connection) {\n\t\t\tchannel = connection.getChannel(ExtensionHostDebugBroadcastChannel.ChannelName);\n\t\t} else {\n\t\t\t// Extension host debugging not supported in serverless.\n\t\t\tchannel = { call: async () => undefined, listen: () => Event.None } as any;\n\t\t}\n\n\t\tsuper(channel);\n\n\t\tthis.storageService = storageService;\n\t\tthis.fileService = fileService;\n\n\t\tif (environmentService.options && environmentService.options.workspaceProvider) {\n\t\t\tthis.workspaceProvider = environmentService.options.workspaceProvider;\n\t\t} else {\n\t\t\tthis.workspaceProvider = { open: async () => true, workspace: undefined, trusted: undefined };\n\t\t\tlogService.warn('Extension Host Debugging not available due to missing workspace provider.');\n\t\t}\n\n\t\t// Reload window on reload request\n\t\tthis._register(this.onReload(event => {\n\t\t\tif (environmentService.isExtensionDevelopment && environmentService.debugExtensionHost.debugId === event.sessionId) {\n\t\t\t\thostService.reload();\n\t\t\t}\n\t\t}));\n\n\t\t// Close window on close request\n\t\tthis._register(this.onClose(event => {\n\t\t\tif (environmentService.isExtensionDevelopment && environmentService.debugExtensionHost.debugId === event.sessionId) {\n\t\t\t\thostService.close();\n\t\t\t}\n\t\t}));\n\n\t\t// Remember workspace as last used for extension development\n\t\t// (unless this is API tests) to restore for a future session\n\t\tif (environmentService.isExtensionDevelopment && !environmentService.extensionTestsLocationURI) {\n\t\t\tconst workspaceId = toWorkspaceIdentifier(contextService.getWorkspace());\n\t\t\tif (isSingleFolderWorkspaceIdentifier(workspaceId) || isWorkspaceIdentifier(workspaceId)) {\n\t\t\t\tconst serializedWorkspace = isSingleFolderWorkspaceIdentifier(workspaceId) ? { folderUri: workspaceId.uri.toJSON() } : { workspaceUri: workspaceId.configPath.toJSON() };\n\t\t\t\tstorageService.store(BrowserExtensionHostDebugService.LAST_EXTENSION_DEVELOPMENT_WORKSPACE_KEY, JSON.stringify(serializedWorkspace), StorageScope.GLOBAL, StorageTarget.USER);\n\t\t\t} else {\n\t\t\t\tstorageService.remove(BrowserExtensionHostDebugService.LAST_EXTENSION_DEVELOPMENT_WORKSPACE_KEY, StorageScope.GLOBAL);\n\t\t\t}\n\t\t}\n\t}\n\n\toverride async openExtensionDevelopmentHostWindow(args: string[], _env: INullableProcessEnvironment | undefined, _debugRenderer: boolean): Promise<IOpenExtensionWindowResult> {\n\n\t\t// Add environment parameters required for debug to work\n\t\tconst environment = new Map<string, string>();\n\n\t\tconst fileUriArg = this.findArgument('file-uri', args);\n\t\tif (fileUriArg && !hasWorkspaceFileExtension(fileUriArg)) {\n\t\t\tenvironment.set('openFile', fileUriArg);\n\t\t}\n\n\t\tconst extensionDevelopmentPath = this.findArgument('extensionDevelopmentPath', args);\n\t\tif (extensionDevelopmentPath) {\n\t\t\tenvironment.set('extensionDevelopmentPath', extensionDevelopmentPath);\n\t\t}\n\n\t\tconst extensionTestsPath = this.findArgument('extensionTestsPath', args);\n\t\tif (extensionTestsPath) {\n\t\t\tenvironment.set('extensionTestsPath', extensionTestsPath);\n\t\t}\n\n\t\tconst debugId = this.findArgument('debugId', args);\n\t\tif (debugId) {\n\t\t\tenvironment.set('debugId', debugId);\n\t\t}\n\n\t\tconst inspectBrkExtensions = this.findArgument('inspect-brk-extensions', args);\n\t\tif (inspectBrkExtensions) {\n\t\t\tenvironment.set('inspect-brk-extensions', inspectBrkExtensions);\n\t\t}\n\n\t\tconst inspectExtensions = this.findArgument('inspect-extensions', args);\n\t\tif (inspectExtensions) {\n\t\t\tenvironment.set('inspect-extensions', inspectExtensions);\n\t\t}\n\n\t\t// Find out which workspace to open debug window on\n\t\tlet debugWorkspace: IWorkspace = undefined;\n\t\tconst folderUriArg = this.findArgument('folder-uri', args);\n\t\tif (folderUriArg) {\n\t\t\tdebugWorkspace = { folderUri: URI.parse(folderUriArg) };\n\t\t} else {\n\t\t\tconst fileUriArg = this.findArgument('file-uri', args);\n\t\t\tif (fileUriArg && hasWorkspaceFileExtension(fileUriArg)) {\n\t\t\t\tdebugWorkspace = { workspaceUri: URI.parse(fileUriArg) };\n\t\t\t}\n\t\t}\n\n\t\tif (!debugWorkspace && !extensionTestsPath) {\n\t\t\tconst lastExtensionDevelopmentWorkspace = this.storageService.get(BrowserExtensionHostDebugService.LAST_EXTENSION_DEVELOPMENT_WORKSPACE_KEY, StorageScope.GLOBAL);\n\t\t\tif (lastExtensionDevelopmentWorkspace) {\n\t\t\t\ttry {\n\t\t\t\t\tconst serializedWorkspace: { workspaceUri?: UriComponents, folderUri?: UriComponents } = JSON.parse(lastExtensionDevelopmentWorkspace);\n\t\t\t\t\tif (serializedWorkspace.workspaceUri) {\n\t\t\t\t\t\tdebugWorkspace = { workspaceUri: URI.revive(serializedWorkspace.workspaceUri) };\n\t\t\t\t\t} else if (serializedWorkspace.folderUri) {\n\t\t\t\t\t\tdebugWorkspace = { folderUri: URI.revive(serializedWorkspace.folderUri) };\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// ignore\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Validate workspace exists\n\t\tif (debugWorkspace) {\n\t\t\tconst debugWorkspaceResource = isFolderToOpen(debugWorkspace) ? debugWorkspace.folderUri : isWorkspaceToOpen(debugWorkspace) ? debugWorkspace.workspaceUri : undefined;\n\t\t\tif (debugWorkspaceResource) {\n\t\t\t\tconst workspaceExists = await this.fileService.exists(debugWorkspaceResource);\n\t\t\t\tif (!workspaceExists) {\n\t\t\t\t\tdebugWorkspace = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Open debug window as new window. Pass arguments over.\n\t\tconst success = await this.workspaceProvider.open(debugWorkspace, {\n\t\t\treuse: false, \t\t\t\t\t\t\t\t// debugging always requires a new window\n\t\t\tpayload: Array.from(environment.entries())\t// mandatory properties to enable debugging\n\t\t});\n\n\t\treturn { success };\n\t}\n\n\tprivate findArgument(key: string, args: string[]): string | undefined {\n\t\tfor (const a of args) {\n\t\t\tconst k = `--${key}=`;\n\t\t\tif (a.indexOf(k) === 0) {\n\t\t\t\treturn a.substr(k.length);\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n}\n\nregisterSingleton(IExtensionHostDebugService, BrowserExtensionHostDebugService, true);\n"]}