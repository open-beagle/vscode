{"version":3,"sources":["vs/workbench/contrib/debug/common/debugger.ts"],"names":[],"mappings":"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","file":"debugger.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport * as objects from 'vs/base/common/objects';\nimport { isObject } from 'vs/base/common/types';\nimport { IJSONSchema, IJSONSchemaSnippet } from 'vs/base/common/jsonSchema';\nimport { IWorkspaceFolder } from 'vs/platform/workspace/common/workspace';\nimport { IConfig, IDebuggerContribution, INTERNAL_CONSOLE_OPTIONS_SCHEMA, IDebugAdapter, IDebugger, IDebugSession, IAdapterManager, IDebugService } from 'vs/workbench/contrib/debug/common/debug';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IConfigurationResolverService } from 'vs/workbench/services/configurationResolver/common/configurationResolver';\nimport * as ConfigurationResolverUtils from 'vs/workbench/services/configurationResolver/common/configurationResolverUtils';\nimport { TaskDefinitionRegistry } from 'vs/workbench/contrib/tasks/common/taskDefinitionRegistry';\nimport { ITextResourcePropertiesService } from 'vs/editor/common/services/textResourceConfigurationService';\nimport { URI } from 'vs/base/common/uri';\nimport { Schemas } from 'vs/base/common/network';\nimport { isDebuggerMainContribution } from 'vs/workbench/contrib/debug/common/debugUtils';\nimport { IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { presentationSchema } from 'vs/workbench/contrib/debug/common/debugSchemas';\nimport { ITelemetryEndpoint } from 'vs/platform/telemetry/common/telemetry';\nimport { cleanRemoteAuthority } from 'vs/platform/telemetry/common/telemetryUtils';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\n\nexport class Debugger implements IDebugger {\n\n\tprivate debuggerContribution: IDebuggerContribution;\n\tprivate mergedExtensionDescriptions: IExtensionDescription[] = [];\n\tprivate mainExtensionDescription: IExtensionDescription | undefined;\n\n\tconstructor(\n\t\tprivate adapterManager: IAdapterManager,\n\t\tdbgContribution: IDebuggerContribution,\n\t\textensionDescription: IExtensionDescription,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ITextResourcePropertiesService private readonly resourcePropertiesService: ITextResourcePropertiesService,\n\t\t@IConfigurationResolverService private readonly configurationResolverService: IConfigurationResolverService,\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IDebugService private readonly debugService: IDebugService\n\t) {\n\t\tthis.debuggerContribution = { type: dbgContribution.type };\n\t\tthis.merge(dbgContribution, extensionDescription);\n\t}\n\n\tmerge(otherDebuggerContribution: IDebuggerContribution, extensionDescription: IExtensionDescription): void {\n\n\t\t/**\n\t\t * Copies all properties of source into destination. The optional parameter \"overwrite\" allows to control\n\t\t * if existing non-structured properties on the destination should be overwritten or not. Defaults to true (overwrite).\n\t\t */\n\t\tfunction mixin(destination: any, source: any, overwrite: boolean, level = 0): any {\n\n\t\t\tif (!isObject(destination)) {\n\t\t\t\treturn source;\n\t\t\t}\n\n\t\t\tif (isObject(source)) {\n\t\t\t\tObject.keys(source).forEach(key => {\n\t\t\t\t\tif (key !== '__proto__') {\n\t\t\t\t\t\tif (isObject(destination[key]) && isObject(source[key])) {\n\t\t\t\t\t\t\tmixin(destination[key], source[key], overwrite, level + 1);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (key in destination) {\n\t\t\t\t\t\t\t\tif (overwrite) {\n\t\t\t\t\t\t\t\t\tif (level === 0 && key === 'type') {\n\t\t\t\t\t\t\t\t\t\t// don't merge the 'type' property\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tdestination[key] = source[key];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tdestination[key] = source[key];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn destination;\n\t\t}\n\n\t\t// only if not already merged\n\t\tif (this.mergedExtensionDescriptions.indexOf(extensionDescription) < 0) {\n\n\t\t\t// remember all extensions that have been merged for this debugger\n\t\t\tthis.mergedExtensionDescriptions.push(extensionDescription);\n\n\t\t\t// merge new debugger contribution into existing contributions (and don't overwrite values in built-in extensions)\n\t\t\tmixin(this.debuggerContribution, otherDebuggerContribution, extensionDescription.isBuiltin);\n\n\t\t\t// remember the extension that is considered the \"main\" debugger contribution\n\t\t\tif (isDebuggerMainContribution(otherDebuggerContribution)) {\n\t\t\t\tthis.mainExtensionDescription = extensionDescription;\n\t\t\t}\n\t\t}\n\t}\n\n\tcreateDebugAdapter(session: IDebugSession): Promise<IDebugAdapter> {\n\t\treturn this.adapterManager.activateDebuggers('onDebugAdapterProtocolTracker', this.type).then(_ => {\n\t\t\tconst da = this.adapterManager.createDebugAdapter(session);\n\t\t\tif (da) {\n\t\t\t\treturn Promise.resolve(da);\n\t\t\t}\n\t\t\tthrow new Error(nls.localize('cannot.find.da', \"Cannot find debug adapter for type '{0}'.\", this.type));\n\t\t});\n\t}\n\n\tsubstituteVariables(folder: IWorkspaceFolder | undefined, config: IConfig): Promise<IConfig> {\n\t\treturn this.adapterManager.substituteVariables(this.type, folder, config).then(config => {\n\t\t\treturn this.configurationResolverService.resolveWithInteractionReplace(folder, config, 'launch', this.variables, config.__configurationTarget);\n\t\t});\n\t}\n\n\trunInTerminal(args: DebugProtocol.RunInTerminalRequestArguments, sessionId: string): Promise<number | undefined> {\n\t\treturn this.adapterManager.runInTerminal(this.type, args, sessionId);\n\t}\n\n\tget label(): string {\n\t\treturn this.debuggerContribution.label || this.debuggerContribution.type;\n\t}\n\n\tget type(): string {\n\t\treturn this.debuggerContribution.type;\n\t}\n\n\tget variables(): { [key: string]: string } | undefined {\n\t\treturn this.debuggerContribution.variables;\n\t}\n\n\tget configurationSnippets(): IJSONSchemaSnippet[] | undefined {\n\t\treturn this.debuggerContribution.configurationSnippets;\n\t}\n\n\tget languages(): string[] | undefined {\n\t\treturn this.debuggerContribution.languages;\n\t}\n\n\thasInitialConfiguration(): boolean {\n\t\treturn !!this.debuggerContribution.initialConfigurations;\n\t}\n\n\thasConfigurationProvider(): boolean {\n\t\treturn this.debugService.getConfigurationManager().hasDebugConfigurationProvider(this.type);\n\t}\n\n\tgetInitialConfigurationContent(initialConfigs?: IConfig[]): Promise<string> {\n\t\t// at this point we got some configs from the package.json and/or from registered DebugConfigurationProviders\n\t\tlet initialConfigurations = this.debuggerContribution.initialConfigurations || [];\n\t\tif (initialConfigs) {\n\t\t\tinitialConfigurations = initialConfigurations.concat(initialConfigs);\n\t\t}\n\n\t\tconst eol = this.resourcePropertiesService.getEOL(URI.from({ scheme: Schemas.untitled, path: '1' })) === '\\r\\n' ? '\\r\\n' : '\\n';\n\t\tconst configs = JSON.stringify(initialConfigurations, null, '\\t').split('\\n').map(line => '\\t' + line).join(eol).trim();\n\t\tconst comment1 = nls.localize('launch.config.comment1', \"Use IntelliSense to learn about possible attributes.\");\n\t\tconst comment2 = nls.localize('launch.config.comment2', \"Hover to view descriptions of existing attributes.\");\n\t\tconst comment3 = nls.localize('launch.config.comment3', \"For more information, visit: {0}\", 'https://go.microsoft.com/fwlink/?linkid=830387');\n\n\t\tlet content = [\n\t\t\t'{',\n\t\t\t`\\t// ${comment1}`,\n\t\t\t`\\t// ${comment2}`,\n\t\t\t`\\t// ${comment3}`,\n\t\t\t`\\t\"version\": \"0.2.0\",`,\n\t\t\t`\\t\"configurations\": ${configs}`,\n\t\t\t'}'\n\t\t].join(eol);\n\n\t\t// fix formatting\n\t\tconst editorConfig = this.configurationService.getValue<any>();\n\t\tif (editorConfig.editor && editorConfig.editor.insertSpaces) {\n\t\t\tcontent = content.replace(new RegExp('\\t', 'g'), ' '.repeat(editorConfig.editor.tabSize));\n\t\t}\n\n\t\treturn Promise.resolve(content);\n\t}\n\n\tgetMainExtensionDescriptor(): IExtensionDescription {\n\t\treturn this.mainExtensionDescription || this.mergedExtensionDescriptions[0];\n\t}\n\n\tgetCustomTelemetryEndpoint(): ITelemetryEndpoint | undefined {\n\t\tconst aiKey = this.debuggerContribution.aiKey;\n\t\tif (!aiKey) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst sendErrorTelemtry = cleanRemoteAuthority(this.environmentService.remoteAuthority) !== 'other';\n\t\treturn {\n\t\t\tid: `${this.getMainExtensionDescriptor().publisher}.${this.type}`,\n\t\t\taiKey,\n\t\t\tsendErrorTelemetry: sendErrorTelemtry\n\t\t};\n\t}\n\n\tgetSchemaAttributes(): IJSONSchema[] | null {\n\n\t\tif (!this.debuggerContribution.configurationAttributes) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// fill in the default configuration attributes shared by all adapters.\n\t\tconst taskSchema = TaskDefinitionRegistry.getJsonSchema();\n\t\treturn Object.keys(this.debuggerContribution.configurationAttributes).map(request => {\n\t\t\tconst attributes: IJSONSchema = this.debuggerContribution.configurationAttributes[request];\n\t\t\tconst defaultRequired = ['name', 'type', 'request'];\n\t\t\tattributes.required = attributes.required && attributes.required.length ? defaultRequired.concat(attributes.required) : defaultRequired;\n\t\t\tattributes.additionalProperties = false;\n\t\t\tattributes.type = 'object';\n\t\t\tif (!attributes.properties) {\n\t\t\t\tattributes.properties = {};\n\t\t\t}\n\t\t\tconst properties = attributes.properties;\n\t\t\tproperties['type'] = {\n\t\t\t\tenum: [this.type],\n\t\t\t\tdescription: nls.localize('debugType', \"Type of configuration.\"),\n\t\t\t\tpattern: '^(?!node2)',\n\t\t\t\terrorMessage: nls.localize('debugTypeNotRecognised', \"The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.\"),\n\t\t\t\tpatternErrorMessage: nls.localize('node2NotSupported', \"\\\"node2\\\" is no longer supported, use \\\"node\\\" instead and set the \\\"protocol\\\" attribute to \\\"inspector\\\".\")\n\t\t\t};\n\t\t\tproperties['name'] = {\n\t\t\t\ttype: 'string',\n\t\t\t\tdescription: nls.localize('debugName', \"Name of configuration; appears in the launch configuration dropdown menu.\"),\n\t\t\t\tdefault: 'Launch'\n\t\t\t};\n\t\t\tproperties['request'] = {\n\t\t\t\tenum: [request],\n\t\t\t\tdescription: nls.localize('debugRequest', \"Request type of configuration. Can be \\\"launch\\\" or \\\"attach\\\".\"),\n\t\t\t};\n\t\t\tproperties['debugServer'] = {\n\t\t\t\ttype: 'number',\n\t\t\t\tdescription: nls.localize('debugServer', \"For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode\"),\n\t\t\t\tdefault: 4711\n\t\t\t};\n\t\t\tproperties['preLaunchTask'] = {\n\t\t\t\tanyOf: [taskSchema, {\n\t\t\t\t\ttype: ['string']\n\t\t\t\t}],\n\t\t\t\tdefault: '',\n\t\t\t\tdefaultSnippets: [{ body: { task: '', type: '' } }],\n\t\t\t\tdescription: nls.localize('debugPrelaunchTask', \"Task to run before debug session starts.\")\n\t\t\t};\n\t\t\tproperties['postDebugTask'] = {\n\t\t\t\tanyOf: [taskSchema, {\n\t\t\t\t\ttype: ['string'],\n\t\t\t\t}],\n\t\t\t\tdefault: '',\n\t\t\t\tdefaultSnippets: [{ body: { task: '', type: '' } }],\n\t\t\t\tdescription: nls.localize('debugPostDebugTask', \"Task to run after debug session ends.\")\n\t\t\t};\n\t\t\tproperties['presentation'] = presentationSchema;\n\t\t\tproperties['internalConsoleOptions'] = INTERNAL_CONSOLE_OPTIONS_SCHEMA;\n\t\t\t// Clear out windows, linux and osx fields to not have cycles inside the properties object\n\t\t\tdelete properties['windows'];\n\t\t\tdelete properties['osx'];\n\t\t\tdelete properties['linux'];\n\n\t\t\tconst osProperties = objects.deepClone(properties);\n\t\t\tproperties['windows'] = {\n\t\t\t\ttype: 'object',\n\t\t\t\tdescription: nls.localize('debugWindowsConfiguration', \"Windows specific launch configuration attributes.\"),\n\t\t\t\tproperties: osProperties\n\t\t\t};\n\t\t\tproperties['osx'] = {\n\t\t\t\ttype: 'object',\n\t\t\t\tdescription: nls.localize('debugOSXConfiguration', \"OS X specific launch configuration attributes.\"),\n\t\t\t\tproperties: osProperties\n\t\t\t};\n\t\t\tproperties['linux'] = {\n\t\t\t\ttype: 'object',\n\t\t\t\tdescription: nls.localize('debugLinuxConfiguration', \"Linux specific launch configuration attributes.\"),\n\t\t\t\tproperties: osProperties\n\t\t\t};\n\t\t\tObject.keys(properties).forEach(name => {\n\t\t\t\t// Use schema allOf property to get independent error reporting #21113\n\t\t\t\tConfigurationResolverUtils.applyDeprecatedVariableMessage(properties[name]);\n\t\t\t});\n\t\t\treturn attributes;\n\t\t});\n\t}\n}\n"]}