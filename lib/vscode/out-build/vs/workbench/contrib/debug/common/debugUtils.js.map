{"version":3,"file":"debugUtils.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/debug/common/debugUtils.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { equalsIgnoreCase } from 'vs/base/common/strings';\nimport { IDebuggerContribution, IDebugSession, IConfigPresentation } from 'vs/workbench/contrib/debug/common/debug';\nimport { URI as uri } from 'vs/base/common/uri';\nimport { isAbsolute } from 'vs/base/common/path';\nimport { deepClone } from 'vs/base/common/objects';\nimport { Schemas } from 'vs/base/common/network';\n\nconst _formatPIIRegexp = /{([^}]+)}/g;\n\nexport function formatPII(value: string, excludePII: boolean, args: { [key: string]: string } | undefined): string {\n\treturn value.replace(_formatPIIRegexp, function (match, group) {\n\t\tif (excludePII && group.length > 0 && group[0] !== '_') {\n\t\t\treturn match;\n\t\t}\n\n\t\treturn args && args.hasOwnProperty(group) ?\n\t\t\targs[group] :\n\t\t\tmatch;\n\t});\n}\n\n/**\n * Filters exceptions (keys marked with \"!\") from the given object. Used to\n * ensure exception data is not sent on web remotes, see #97628.\n */\nexport function filterExceptionsFromTelemetry<T extends { [key: string]: unknown }>(data: T): Partial<T> {\n\tconst output: Partial<T> = {};\n\tfor (const key of Object.keys(data) as (keyof T & string)[]) {\n\t\tif (!key.startsWith('!')) {\n\t\t\toutput[key] = data[key];\n\t\t}\n\t}\n\n\treturn output;\n}\n\n\nexport function isSessionAttach(session: IDebugSession): boolean {\n\treturn session.configuration.request === 'attach' && !getExtensionHostDebugSession(session);\n}\n\n/**\n * Returns the session or any parent which is an extension host debug session.\n * Returns undefined if there's none.\n */\nexport function getExtensionHostDebugSession(session: IDebugSession): IDebugSession | void {\n\tlet type = session.configuration.type;\n\tif (!type) {\n\t\treturn;\n\t}\n\n\tif (type === 'vslsShare') {\n\t\ttype = (<any>session.configuration).adapterProxy.configuration.type;\n\t}\n\n\tif (equalsIgnoreCase(type, 'extensionhost') || equalsIgnoreCase(type, 'pwa-extensionhost')) {\n\t\treturn session;\n\t}\n\n\treturn session.parentSession ? getExtensionHostDebugSession(session.parentSession) : undefined;\n}\n\n// only a debugger contributions with a label, program, or runtime attribute is considered a \"defining\" or \"main\" debugger contribution\nexport function isDebuggerMainContribution(dbg: IDebuggerContribution) {\n\treturn dbg.type && (dbg.label || dbg.program || dbg.runtime);\n}\n\nexport function getExactExpressionStartAndEnd(lineContent: string, looseStart: number, looseEnd: number): { start: number, end: number } {\n\tlet matchingExpression: string | undefined = undefined;\n\tlet startOffset = 0;\n\n\t// Some example supported expressions: myVar.prop, a.b.c.d, myVar?.prop, myVar->prop, MyClass::StaticProp, *myVar\n\t// Match any character except a set of characters which often break interesting sub-expressions\n\tlet expression: RegExp = /([^()\\[\\]{}<>\\s+\\-/%~#^;=|,`!]|\\->)+/g;\n\tlet result: RegExpExecArray | null = null;\n\n\t// First find the full expression under the cursor\n\twhile (result = expression.exec(lineContent)) {\n\t\tlet start = result.index + 1;\n\t\tlet end = start + result[0].length;\n\n\t\tif (start <= looseStart && end >= looseEnd) {\n\t\t\tmatchingExpression = result[0];\n\t\t\tstartOffset = start;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// If there are non-word characters after the cursor, we want to truncate the expression then.\n\t// For example in expression 'a.b.c.d', if the focus was under 'b', 'a.b' would be evaluated.\n\tif (matchingExpression) {\n\t\tlet subExpression: RegExp = /\\w+/g;\n\t\tlet subExpressionResult: RegExpExecArray | null = null;\n\t\twhile (subExpressionResult = subExpression.exec(matchingExpression)) {\n\t\t\tlet subEnd = subExpressionResult.index + 1 + startOffset + subExpressionResult[0].length;\n\t\t\tif (subEnd >= looseEnd) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (subExpressionResult) {\n\t\t\tmatchingExpression = matchingExpression.substring(0, subExpression.lastIndex);\n\t\t}\n\t}\n\n\treturn matchingExpression ?\n\t\t{ start: startOffset, end: startOffset + matchingExpression.length - 1 } :\n\t\t{ start: 0, end: 0 };\n}\n\n// RFC 2396, Appendix A: https://www.ietf.org/rfc/rfc2396.txt\nconst _schemePattern = /^[a-zA-Z][a-zA-Z0-9\\+\\-\\.]+:/;\n\nexport function isUri(s: string | undefined): boolean {\n\t// heuristics: a valid uri starts with a scheme and\n\t// the scheme has at least 2 characters so that it doesn't look like a drive letter.\n\treturn !!(s && s.match(_schemePattern));\n}\n\nfunction stringToUri(source: PathContainer): string | undefined {\n\tif (typeof source.path === 'string') {\n\t\tif (typeof source.sourceReference === 'number' && source.sourceReference > 0) {\n\t\t\t// if there is a source reference, don't touch path\n\t\t} else {\n\t\t\tif (isUri(source.path)) {\n\t\t\t\treturn <string><unknown>uri.parse(source.path);\n\t\t\t} else {\n\t\t\t\t// assume path\n\t\t\t\tif (isAbsolute(source.path)) {\n\t\t\t\t\treturn <string><unknown>uri.file(source.path);\n\t\t\t\t} else {\n\t\t\t\t\t// leave relative path as is\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn source.path;\n}\n\nfunction uriToString(source: PathContainer): string | undefined {\n\tif (typeof source.path === 'object') {\n\t\tconst u = uri.revive(source.path);\n\t\tif (u) {\n\t\t\tif (u.scheme === Schemas.file) {\n\t\t\t\treturn u.fsPath;\n\t\t\t} else {\n\t\t\t\treturn u.toString();\n\t\t\t}\n\t\t}\n\t}\n\treturn source.path;\n}\n\n// path hooks helpers\n\ninterface PathContainer {\n\tpath?: string;\n\tsourceReference?: number;\n}\n\nexport function convertToDAPaths(message: DebugProtocol.ProtocolMessage, toUri: boolean): DebugProtocol.ProtocolMessage {\n\n\tconst fixPath = toUri ? stringToUri : uriToString;\n\n\t// since we modify Source.paths in the message in place, we need to make a copy of it (see #61129)\n\tconst msg = deepClone(message);\n\n\tconvertPaths(msg, (toDA: boolean, source: PathContainer | undefined) => {\n\t\tif (toDA && source) {\n\t\t\tsource.path = fixPath(source);\n\t\t}\n\t});\n\treturn msg;\n}\n\nexport function convertToVSCPaths(message: DebugProtocol.ProtocolMessage, toUri: boolean): DebugProtocol.ProtocolMessage {\n\n\tconst fixPath = toUri ? stringToUri : uriToString;\n\n\t// since we modify Source.paths in the message in place, we need to make a copy of it (see #61129)\n\tconst msg = deepClone(message);\n\n\tconvertPaths(msg, (toDA: boolean, source: PathContainer | undefined) => {\n\t\tif (!toDA && source) {\n\t\t\tsource.path = fixPath(source);\n\t\t}\n\t});\n\treturn msg;\n}\n\nfunction convertPaths(msg: DebugProtocol.ProtocolMessage, fixSourcePath: (toDA: boolean, source: PathContainer | undefined) => void): void {\n\n\tswitch (msg.type) {\n\t\tcase 'event':\n\t\t\tconst event = <DebugProtocol.Event>msg;\n\t\t\tswitch (event.event) {\n\t\t\t\tcase 'output':\n\t\t\t\t\tfixSourcePath(false, (<DebugProtocol.OutputEvent>event).body.source);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'loadedSource':\n\t\t\t\t\tfixSourcePath(false, (<DebugProtocol.LoadedSourceEvent>event).body.source);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'breakpoint':\n\t\t\t\t\tfixSourcePath(false, (<DebugProtocol.BreakpointEvent>event).body.breakpoint.source);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'request':\n\t\t\tconst request = <DebugProtocol.Request>msg;\n\t\t\tswitch (request.command) {\n\t\t\t\tcase 'setBreakpoints':\n\t\t\t\t\tfixSourcePath(true, (<DebugProtocol.SetBreakpointsArguments>request.arguments).source);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'breakpointLocations':\n\t\t\t\t\tfixSourcePath(true, (<DebugProtocol.BreakpointLocationsArguments>request.arguments).source);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'source':\n\t\t\t\t\tfixSourcePath(true, (<DebugProtocol.SourceArguments>request.arguments).source);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'gotoTargets':\n\t\t\t\t\tfixSourcePath(true, (<DebugProtocol.GotoTargetsArguments>request.arguments).source);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'launchVSCode':\n\t\t\t\t\trequest.arguments.args.forEach((arg: PathContainer | undefined) => fixSourcePath(false, arg));\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'response':\n\t\t\tconst response = <DebugProtocol.Response>msg;\n\t\t\tif (response.success && response.body) {\n\t\t\t\tswitch (response.command) {\n\t\t\t\t\tcase 'stackTrace':\n\t\t\t\t\t\t(<DebugProtocol.StackTraceResponse>response).body.stackFrames.forEach(frame => fixSourcePath(false, frame.source));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'loadedSources':\n\t\t\t\t\t\t(<DebugProtocol.LoadedSourcesResponse>response).body.sources.forEach(source => fixSourcePath(false, source));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'scopes':\n\t\t\t\t\t\t(<DebugProtocol.ScopesResponse>response).body.scopes.forEach(scope => fixSourcePath(false, scope.source));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'setFunctionBreakpoints':\n\t\t\t\t\t\t(<DebugProtocol.SetFunctionBreakpointsResponse>response).body.breakpoints.forEach(bp => fixSourcePath(false, bp.source));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'setBreakpoints':\n\t\t\t\t\t\t(<DebugProtocol.SetBreakpointsResponse>response).body.breakpoints.forEach(bp => fixSourcePath(false, bp.source));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t}\n}\n\nexport function getVisibleAndSorted<T extends { presentation?: IConfigPresentation }>(array: T[]): T[] {\n\treturn array.filter(config => !config.presentation?.hidden).sort((first, second) => {\n\t\tif (!first.presentation) {\n\t\t\tif (!second.presentation) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\treturn 1;\n\t\t}\n\t\tif (!second.presentation) {\n\t\t\treturn -1;\n\t\t}\n\t\tif (!first.presentation.group) {\n\t\t\tif (!second.presentation.group) {\n\t\t\t\treturn compareOrders(first.presentation.order, second.presentation.order);\n\t\t\t}\n\t\t\treturn 1;\n\t\t}\n\t\tif (!second.presentation.group) {\n\t\t\treturn -1;\n\t\t}\n\t\tif (first.presentation.group !== second.presentation.group) {\n\t\t\treturn first.presentation.group.localeCompare(second.presentation.group);\n\t\t}\n\n\t\treturn compareOrders(first.presentation.order, second.presentation.order);\n\t});\n}\n\nfunction compareOrders(first: number | undefined, second: number | undefined): number {\n\tif (typeof first !== 'number') {\n\t\tif (typeof second !== 'number') {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn 1;\n\t}\n\tif (typeof second !== 'number') {\n\t\treturn -1;\n\t}\n\n\treturn first - second;\n}\n"]}