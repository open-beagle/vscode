{"version":3,"sources":["vs/workbench/contrib/debug/node/debugAdapter.ts"],"names":[],"mappings":"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","file":"debugAdapter.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { exists } from 'vs/base/node/pfs';\nimport * as cp from 'child_process';\nimport * as stream from 'stream';\nimport * as nls from 'vs/nls';\nimport * as net from 'net';\nimport * as path from 'vs/base/common/path';\nimport * as strings from 'vs/base/common/strings';\nimport * as objects from 'vs/base/common/objects';\nimport * as platform from 'vs/base/common/platform';\nimport { ExtensionsChannelId } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { IOutputService } from 'vs/workbench/contrib/output/common/output';\nimport { IDebugAdapterExecutable, IDebuggerContribution, IPlatformSpecificAdapterContribution, IDebugAdapterServer, IDebugAdapterNamedPipeServer } from 'vs/workbench/contrib/debug/common/debug';\nimport { IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { AbstractDebugAdapter } from '../common/abstractDebugAdapter';\n\n/**\n * An implementation that communicates via two streams with the debug adapter.\n */\nexport abstract class StreamDebugAdapter extends AbstractDebugAdapter {\n\n\tprivate static readonly TWO_CRLF = '\\r\\n\\r\\n';\n\tprivate static readonly HEADER_LINESEPARATOR = /\\r?\\n/;\t// allow for non-RFC 2822 conforming line separators\n\tprivate static readonly HEADER_FIELDSEPARATOR = /: */;\n\n\tprivate outputStream!: stream.Writable;\n\tprivate rawData = Buffer.allocUnsafe(0);\n\tprivate contentLength = -1;\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tprotected connect(readable: stream.Readable, writable: stream.Writable): void {\n\n\t\tthis.outputStream = writable;\n\t\tthis.rawData = Buffer.allocUnsafe(0);\n\t\tthis.contentLength = -1;\n\n\t\treadable.on('data', (data: Buffer) => this.handleData(data));\n\t}\n\n\tsendMessage(message: DebugProtocol.ProtocolMessage): void {\n\n\t\tif (this.outputStream) {\n\t\t\tconst json = JSON.stringify(message);\n\t\t\tthis.outputStream.write(`Content-Length: ${Buffer.byteLength(json, 'utf8')}${StreamDebugAdapter.TWO_CRLF}${json}`, 'utf8');\n\t\t}\n\t}\n\n\tprivate handleData(data: Buffer): void {\n\n\t\tthis.rawData = Buffer.concat([this.rawData, data]);\n\n\t\twhile (true) {\n\t\t\tif (this.contentLength >= 0) {\n\t\t\t\tif (this.rawData.length >= this.contentLength) {\n\t\t\t\t\tconst message = this.rawData.toString('utf8', 0, this.contentLength);\n\t\t\t\t\tthis.rawData = this.rawData.slice(this.contentLength);\n\t\t\t\t\tthis.contentLength = -1;\n\t\t\t\t\tif (message.length > 0) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tthis.acceptMessage(<DebugProtocol.ProtocolMessage>JSON.parse(message));\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tthis._onError.fire(new Error((e.message || e) + '\\n' + message));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\t// there may be more complete messages to process\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst idx = this.rawData.indexOf(StreamDebugAdapter.TWO_CRLF);\n\t\t\t\tif (idx !== -1) {\n\t\t\t\t\tconst header = this.rawData.toString('utf8', 0, idx);\n\t\t\t\t\tconst lines = header.split(StreamDebugAdapter.HEADER_LINESEPARATOR);\n\t\t\t\t\tfor (const h of lines) {\n\t\t\t\t\t\tconst kvPair = h.split(StreamDebugAdapter.HEADER_FIELDSEPARATOR);\n\t\t\t\t\t\tif (kvPair[0] === 'Content-Length') {\n\t\t\t\t\t\t\tthis.contentLength = Number(kvPair[1]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis.rawData = this.rawData.slice(idx + StreamDebugAdapter.TWO_CRLF.length);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\nexport abstract class NetworkDebugAdapter extends StreamDebugAdapter {\n\n\tprotected socket?: net.Socket;\n\n\tprotected abstract createConnection(connectionListener: () => void): net.Socket;\n\n\tstartSession(): Promise<void> {\n\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\tlet connected = false;\n\n\t\t\tthis.socket = this.createConnection(() => {\n\t\t\t\tthis.connect(this.socket!, this.socket!);\n\t\t\t\tresolve();\n\t\t\t\tconnected = true;\n\t\t\t});\n\n\t\t\tthis.socket.on('close', () => {\n\t\t\t\tif (connected) {\n\t\t\t\t\tthis._onError.fire(new Error('connection closed'));\n\t\t\t\t} else {\n\t\t\t\t\treject(new Error('connection closed'));\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.socket.on('error', error => {\n\t\t\t\tif (connected) {\n\t\t\t\t\tthis._onError.fire(error);\n\t\t\t\t} else {\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tasync stopSession(): Promise<void> {\n\t\tawait this.cancelPendingRequests();\n\t\tif (this.socket) {\n\t\t\tthis.socket.end();\n\t\t\tthis.socket = undefined;\n\t\t}\n\t}\n}\n\n/**\n * An implementation that connects to a debug adapter via a socket.\n*/\nexport class SocketDebugAdapter extends NetworkDebugAdapter {\n\n\tconstructor(private adapterServer: IDebugAdapterServer) {\n\t\tsuper();\n\t}\n\n\tprotected createConnection(connectionListener: () => void): net.Socket {\n\t\treturn net.createConnection(this.adapterServer.port, this.adapterServer.host || '127.0.0.1', connectionListener);\n\t}\n}\n\n/**\n * An implementation that connects to a debug adapter via a NamedPipe (on Windows)/UNIX Domain Socket (on non-Windows).\n */\nexport class NamedPipeDebugAdapter extends NetworkDebugAdapter {\n\n\tconstructor(private adapterServer: IDebugAdapterNamedPipeServer) {\n\t\tsuper();\n\t}\n\n\tprotected createConnection(connectionListener: () => void): net.Socket {\n\t\treturn net.createConnection(this.adapterServer.path, connectionListener);\n\t}\n}\n\n/**\n * An implementation that launches the debug adapter as a separate process and communicates via stdin/stdout.\n*/\nexport class ExecutableDebugAdapter extends StreamDebugAdapter {\n\n\tprivate serverProcess: cp.ChildProcess | undefined;\n\n\tconstructor(private adapterExecutable: IDebugAdapterExecutable, private debugType: string, private readonly outputService?: IOutputService) {\n\t\tsuper();\n\t}\n\n\tasync startSession(): Promise<void> {\n\n\t\tconst command = this.adapterExecutable.command;\n\t\tconst args = this.adapterExecutable.args;\n\t\tconst options = this.adapterExecutable.options || {};\n\n\t\ttry {\n\t\t\t// verify executables asynchronously\n\t\t\tif (command) {\n\t\t\t\tif (path.isAbsolute(command)) {\n\t\t\t\t\tconst commandExists = await exists(command);\n\t\t\t\t\tif (!commandExists) {\n\t\t\t\t\t\tthrow new Error(nls.localize('debugAdapterBinNotFound', \"Debug adapter executable '{0}' does not exist.\", command));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// relative path\n\t\t\t\t\tif (command.indexOf('/') < 0 && command.indexOf('\\\\') < 0) {\n\t\t\t\t\t\t// no separators: command looks like a runtime name like 'node' or 'mono'\n\t\t\t\t\t\t// TODO: check that the runtime is available on PATH\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow new Error(nls.localize({ key: 'debugAdapterCannotDetermineExecutable', comment: ['Adapter executable file not found'] },\n\t\t\t\t\t\"Cannot determine executable for debug adapter '{0}'.\", this.debugType));\n\t\t\t}\n\n\t\t\tlet env = process.env;\n\t\t\tif (options.env && Object.keys(options.env).length > 0) {\n\t\t\t\tenv = objects.mixin(objects.deepClone(process.env), options.env);\n\t\t\t}\n\n\t\t\tif (command === 'node') {\n\t\t\t\tif (Array.isArray(args) && args.length > 0) {\n\t\t\t\t\tconst isElectron = !!process.env['ELECTRON_RUN_AS_NODE'] || !!process.versions['electron'];\n\t\t\t\t\tconst forkOptions: cp.ForkOptions = {\n\t\t\t\t\t\tenv: env,\n\t\t\t\t\t\texecArgv: isElectron ? ['-e', 'delete process.env.ELECTRON_RUN_AS_NODE;require(process.argv[1])'] : [],\n\t\t\t\t\t\tsilent: true\n\t\t\t\t\t};\n\t\t\t\t\tif (options.cwd) {\n\t\t\t\t\t\tforkOptions.cwd = options.cwd;\n\t\t\t\t\t}\n\t\t\t\t\tconst child = cp.fork(args[0], args.slice(1), forkOptions);\n\t\t\t\t\tif (!child.pid) {\n\t\t\t\t\t\tthrow new Error(nls.localize('unableToLaunchDebugAdapter', \"Unable to launch debug adapter from '{0}'.\", args[0]));\n\t\t\t\t\t}\n\t\t\t\t\tthis.serverProcess = child;\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(nls.localize('unableToLaunchDebugAdapterNoArgs', \"Unable to launch debug adapter.\"));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst spawnOptions: cp.SpawnOptions = {\n\t\t\t\t\tenv: env\n\t\t\t\t};\n\t\t\t\tif (options.cwd) {\n\t\t\t\t\tspawnOptions.cwd = options.cwd;\n\t\t\t\t}\n\t\t\t\tthis.serverProcess = cp.spawn(command, args, spawnOptions);\n\t\t\t}\n\n\t\t\tthis.serverProcess.on('error', err => {\n\t\t\t\tthis._onError.fire(err);\n\t\t\t});\n\t\t\tthis.serverProcess.on('exit', (code, signal) => {\n\t\t\t\tthis._onExit.fire(code);\n\t\t\t});\n\n\t\t\tthis.serverProcess.stdout!.on('close', () => {\n\t\t\t\tthis._onError.fire(new Error('read error'));\n\t\t\t});\n\t\t\tthis.serverProcess.stdout!.on('error', error => {\n\t\t\t\tthis._onError.fire(error);\n\t\t\t});\n\n\t\t\tthis.serverProcess.stdin!.on('error', error => {\n\t\t\t\tthis._onError.fire(error);\n\t\t\t});\n\n\t\t\tconst outputService = this.outputService;\n\t\t\tif (outputService) {\n\t\t\t\tconst sanitize = (s: string) => s.toString().replace(/\\r?\\n$/mg, '');\n\t\t\t\t// this.serverProcess.stdout.on('data', (data: string) => {\n\t\t\t\t// \tconsole.log('%c' + sanitize(data), 'background: #ddd; font-style: italic;');\n\t\t\t\t// });\n\t\t\t\tthis.serverProcess.stderr!.on('data', (data: string) => {\n\t\t\t\t\tconst channel = outputService.getChannel(ExtensionsChannelId);\n\t\t\t\t\tif (channel) {\n\t\t\t\t\t\tchannel.append(sanitize(data));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.serverProcess.stderr!.resume();\n\t\t\t}\n\n\t\t\t// finally connect to the DA\n\t\t\tthis.connect(this.serverProcess.stdout!, this.serverProcess.stdin!);\n\n\t\t} catch (err) {\n\t\t\tthis._onError.fire(err);\n\t\t}\n\t}\n\n\tasync stopSession(): Promise<void> {\n\n\t\tif (!this.serverProcess) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\t// when killing a process in windows its child\n\t\t// processes are *not* killed but become root\n\t\t// processes. Therefore we use TASKKILL.EXE\n\t\tawait this.cancelPendingRequests();\n\t\tif (platform.isWindows) {\n\t\t\treturn new Promise<void>((c, e) => {\n\t\t\t\tconst killer = cp.exec(`taskkill /F /T /PID ${this.serverProcess!.pid}`, function (err, stdout, stderr) {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treturn e(err);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tkiller.on('exit', c);\n\t\t\t\tkiller.on('error', e);\n\t\t\t});\n\t\t} else {\n\t\t\tthis.serverProcess.kill('SIGTERM');\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\t}\n\n\tprivate static extract(platformContribution: IPlatformSpecificAdapterContribution, extensionFolderPath: string): IDebuggerContribution | undefined {\n\t\tif (!platformContribution) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst result: IDebuggerContribution = Object.create(null);\n\t\tif (platformContribution.runtime) {\n\t\t\tif (platformContribution.runtime.indexOf('./') === 0) {\t// TODO\n\t\t\t\tresult.runtime = path.join(extensionFolderPath, platformContribution.runtime);\n\t\t\t} else {\n\t\t\t\tresult.runtime = platformContribution.runtime;\n\t\t\t}\n\t\t}\n\t\tif (platformContribution.runtimeArgs) {\n\t\t\tresult.runtimeArgs = platformContribution.runtimeArgs;\n\t\t}\n\t\tif (platformContribution.program) {\n\t\t\tif (!path.isAbsolute(platformContribution.program)) {\n\t\t\t\tresult.program = path.join(extensionFolderPath, platformContribution.program);\n\t\t\t} else {\n\t\t\t\tresult.program = platformContribution.program;\n\t\t\t}\n\t\t}\n\t\tif (platformContribution.args) {\n\t\t\tresult.args = platformContribution.args;\n\t\t}\n\n\t\tconst contribution = platformContribution as IDebuggerContribution;\n\n\t\tif (contribution.win) {\n\t\t\tresult.win = ExecutableDebugAdapter.extract(contribution.win, extensionFolderPath);\n\t\t}\n\t\tif (contribution.winx86) {\n\t\t\tresult.winx86 = ExecutableDebugAdapter.extract(contribution.winx86, extensionFolderPath);\n\t\t}\n\t\tif (contribution.windows) {\n\t\t\tresult.windows = ExecutableDebugAdapter.extract(contribution.windows, extensionFolderPath);\n\t\t}\n\t\tif (contribution.osx) {\n\t\t\tresult.osx = ExecutableDebugAdapter.extract(contribution.osx, extensionFolderPath);\n\t\t}\n\t\tif (contribution.linux) {\n\t\t\tresult.linux = ExecutableDebugAdapter.extract(contribution.linux, extensionFolderPath);\n\t\t}\n\t\treturn result;\n\t}\n\n\tstatic platformAdapterExecutable(extensionDescriptions: IExtensionDescription[], debugType: string): IDebugAdapterExecutable | undefined {\n\t\tlet result: IDebuggerContribution = Object.create(null);\n\t\tdebugType = debugType.toLowerCase();\n\n\t\t// merge all contributions into one\n\t\tfor (const ed of extensionDescriptions) {\n\t\t\tif (ed.contributes) {\n\t\t\t\tconst debuggers = <IDebuggerContribution[]>ed.contributes['debuggers'];\n\t\t\t\tif (debuggers && debuggers.length > 0) {\n\t\t\t\t\tdebuggers.filter(dbg => typeof dbg.type === 'string' && strings.equalsIgnoreCase(dbg.type, debugType)).forEach(dbg => {\n\t\t\t\t\t\t// extract relevant attributes and make them absolute where needed\n\t\t\t\t\t\tconst extractedDbg = ExecutableDebugAdapter.extract(dbg, ed.extensionLocation.fsPath);\n\n\t\t\t\t\t\t// merge\n\t\t\t\t\t\tresult = objects.mixin(result, extractedDbg, ed.isBuiltin);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// select the right platform\n\t\tlet platformInfo: IPlatformSpecificAdapterContribution | undefined;\n\t\tif (platform.isWindows && !process.env.hasOwnProperty('PROCESSOR_ARCHITEW6432')) {\n\t\t\tplatformInfo = result.winx86 || result.win || result.windows;\n\t\t} else if (platform.isWindows) {\n\t\t\tplatformInfo = result.win || result.windows;\n\t\t} else if (platform.isMacintosh) {\n\t\t\tplatformInfo = result.osx;\n\t\t} else if (platform.isLinux) {\n\t\t\tplatformInfo = result.linux;\n\t\t}\n\t\tplatformInfo = platformInfo || result;\n\n\t\t// these are the relevant attributes\n\t\tlet program = platformInfo.program || result.program;\n\t\tconst args = platformInfo.args || result.args;\n\t\tlet runtime = platformInfo.runtime || result.runtime;\n\t\tconst runtimeArgs = platformInfo.runtimeArgs || result.runtimeArgs;\n\n\t\tif (runtime) {\n\t\t\treturn {\n\t\t\t\ttype: 'executable',\n\t\t\t\tcommand: runtime,\n\t\t\t\targs: (runtimeArgs || []).concat(typeof program === 'string' ? [program] : []).concat(args || [])\n\t\t\t};\n\t\t} else if (program) {\n\t\t\treturn {\n\t\t\t\ttype: 'executable',\n\t\t\t\tcommand: program,\n\t\t\t\targs: args || []\n\t\t\t};\n\t\t}\n\n\t\t// nothing found\n\t\treturn undefined;\n\t}\n}\n"]}