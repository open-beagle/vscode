{"version":3,"file":"terminals.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/debug/node/terminals.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as cp from 'child_process';\nimport * as platform from 'vs/base/common/platform';\nimport { WindowsExternalTerminalService, MacExternalTerminalService, LinuxExternalTerminalService } from 'vs/workbench/contrib/externalTerminal/node/externalTerminalService';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IExternalTerminalService } from 'vs/workbench/contrib/externalTerminal/common/externalTerminal';\nimport { ExtHostConfigProvider } from 'vs/workbench/api/common/extHostConfiguration';\nimport { getDriveLetter } from 'vs/base/common/extpath';\n\nlet externalTerminalService: IExternalTerminalService | undefined = undefined;\n\nexport function runInExternalTerminal(args: DebugProtocol.RunInTerminalRequestArguments, configProvider: ExtHostConfigProvider): Promise<number | undefined> {\n\tif (!externalTerminalService) {\n\t\tif (platform.isWindows) {\n\t\t\texternalTerminalService = new WindowsExternalTerminalService(<IConfigurationService><unknown>undefined);\n\t\t} else if (platform.isMacintosh) {\n\t\t\texternalTerminalService = new MacExternalTerminalService(<IConfigurationService><unknown>undefined);\n\t\t} else if (platform.isLinux) {\n\t\t\texternalTerminalService = new LinuxExternalTerminalService(<IConfigurationService><unknown>undefined);\n\t\t} else {\n\t\t\tthrow new Error('external terminals not supported on this platform');\n\t\t}\n\t}\n\tconst config = configProvider.getConfiguration('terminal');\n\treturn externalTerminalService.runInTerminal(args.title!, args.cwd, args.args, args.env || {}, config.external || {});\n}\n\nfunction spawnAsPromised(command: string, args: string[]): Promise<string> {\n\treturn new Promise((resolve, reject) => {\n\t\tlet stdout = '';\n\t\tconst child = cp.spawn(command, args);\n\t\tif (child.pid) {\n\t\t\tchild.stdout.on('data', (data: Buffer) => {\n\t\t\t\tstdout += data.toString();\n\t\t\t});\n\t\t}\n\t\tchild.on('error', err => {\n\t\t\treject(err);\n\t\t});\n\t\tchild.on('close', code => {\n\t\t\tresolve(stdout);\n\t\t});\n\t});\n}\n\nexport function hasChildProcesses(processId: number | undefined): Promise<boolean> {\n\tif (processId) {\n\t\t// if shell has at least one child process, assume that shell is busy\n\t\tif (platform.isWindows) {\n\t\t\treturn spawnAsPromised('wmic', ['process', 'get', 'ParentProcessId']).then(stdout => {\n\t\t\t\tconst pids = stdout.split('\\r\\n');\n\t\t\t\treturn pids.some(p => parseInt(p) === processId);\n\t\t\t}, error => {\n\t\t\t\treturn true;\n\t\t\t});\n\t\t} else {\n\t\t\treturn spawnAsPromised('/usr/bin/pgrep', ['-lP', String(processId)]).then(stdout => {\n\t\t\t\tconst r = stdout.trim();\n\t\t\t\tif (r.length === 0 || r.indexOf(' tmux') >= 0) { // ignore 'tmux'; see #43683\n\t\t\t\t\treturn false;\n\t\t\t\t} else {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}, error => {\n\t\t\t\treturn true;\n\t\t\t});\n\t\t}\n\t}\n\t// fall back to safe side\n\treturn Promise.resolve(true);\n}\n\nconst enum ShellType { cmd, powershell, bash }\n\n\nexport function prepareCommand(shell: string, args: string[], cwd?: string, env?: { [key: string]: string | null; }): string {\n\n\tshell = shell.trim().toLowerCase();\n\n\t// try to determine the shell type\n\tlet shellType;\n\tif (shell.indexOf('powershell') >= 0 || shell.indexOf('pwsh') >= 0) {\n\t\tshellType = ShellType.powershell;\n\t} else if (shell.indexOf('cmd.exe') >= 0) {\n\t\tshellType = ShellType.cmd;\n\t} else if (shell.indexOf('bash') >= 0) {\n\t\tshellType = ShellType.bash;\n\t} else if (platform.isWindows) {\n\t\tshellType = ShellType.cmd; // pick a good default for Windows\n\t} else {\n\t\tshellType = ShellType.bash;\t// pick a good default for anything else\n\t}\n\n\tlet quote: (s: string) => string;\n\t// begin command with a space to avoid polluting shell history\n\tlet command = ' ';\n\n\tswitch (shellType) {\n\n\t\tcase ShellType.powershell:\n\n\t\t\tquote = (s: string) => {\n\t\t\t\ts = s.replace(/\\'/g, '\\'\\'');\n\t\t\t\tif (s.length > 0 && s.charAt(s.length - 1) === '\\\\') {\n\t\t\t\t\treturn `'${s}\\\\'`;\n\t\t\t\t}\n\t\t\t\treturn `'${s}'`;\n\t\t\t};\n\n\t\t\tif (cwd) {\n\t\t\t\tconst driveLetter = getDriveLetter(cwd);\n\t\t\t\tif (driveLetter) {\n\t\t\t\t\tcommand += `${driveLetter}:; `;\n\t\t\t\t}\n\t\t\t\tcommand += `cd ${quote(cwd)}; `;\n\t\t\t}\n\t\t\tif (env) {\n\t\t\t\tfor (let key in env) {\n\t\t\t\t\tconst value = env[key];\n\t\t\t\t\tif (value === null) {\n\t\t\t\t\t\tcommand += `Remove-Item env:${key}; `;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcommand += `\\${env:${key}}='${value}'; `;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (args.length > 0) {\n\t\t\t\tconst cmd = quote(args.shift()!);\n\t\t\t\tcommand += (cmd[0] === '\\'') ? `& ${cmd} ` : `${cmd} `;\n\t\t\t\tfor (let a of args) {\n\t\t\t\t\tcommand += `${quote(a)} `;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase ShellType.cmd:\n\n\t\t\tquote = (s: string) => {\n\t\t\t\ts = s.replace(/\\\"/g, '\"\"');\n\t\t\t\treturn (s.indexOf(' ') >= 0 || s.indexOf('\"') >= 0 || s.length === 0) ? `\"${s}\"` : s;\n\t\t\t};\n\n\t\t\tif (cwd) {\n\t\t\t\tconst driveLetter = getDriveLetter(cwd);\n\t\t\t\tif (driveLetter) {\n\t\t\t\t\tcommand += `${driveLetter}: && `;\n\t\t\t\t}\n\t\t\t\tcommand += `cd ${quote(cwd)} && `;\n\t\t\t}\n\t\t\tif (env) {\n\t\t\t\tcommand += 'cmd /C \"';\n\t\t\t\tfor (let key in env) {\n\t\t\t\t\tlet value = env[key];\n\t\t\t\t\tif (value === null) {\n\t\t\t\t\t\tcommand += `set \"${key}=\" && `;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvalue = value.replace(/[\\^\\&\\|\\<\\>]/g, s => `^${s}`);\n\t\t\t\t\t\tcommand += `set \"${key}=${value}\" && `;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (let a of args) {\n\t\t\t\tcommand += `${quote(a)} `;\n\t\t\t}\n\t\t\tif (env) {\n\t\t\t\tcommand += '\"';\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase ShellType.bash:\n\n\t\t\tquote = (s: string) => {\n\t\t\t\ts = s.replace(/([\"'\\\\\\$])/g, '\\\\$1');\n\t\t\t\treturn (s.indexOf(' ') >= 0 || s.indexOf(';') >= 0 || s.length === 0) ? `\"${s}\"` : s;\n\t\t\t};\n\n\t\t\tconst hardQuote = (s: string) => {\n\t\t\t\treturn /[^\\w@%\\/+=,.:^-]/.test(s) ? `'${s.replace(/'/g, '\\'\\\\\\'\\'')}'` : s;\n\t\t\t};\n\n\t\t\tif (cwd) {\n\t\t\t\tcommand += `cd ${quote(cwd)} ; `;\n\t\t\t}\n\t\t\tif (env) {\n\t\t\t\tcommand += '/usr/bin/env';\n\t\t\t\tfor (let key in env) {\n\t\t\t\t\tconst value = env[key];\n\t\t\t\t\tif (value === null) {\n\t\t\t\t\t\tcommand += ` -u ${hardQuote(key)}`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcommand += ` ${hardQuote(`${key}=${value}`)}`;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcommand += ' ';\n\t\t\t}\n\t\t\tfor (let a of args) {\n\t\t\t\tcommand += `${quote(a)} `;\n\t\t\t}\n\t\t\tbreak;\n\t}\n\n\treturn command;\n}\n"]}