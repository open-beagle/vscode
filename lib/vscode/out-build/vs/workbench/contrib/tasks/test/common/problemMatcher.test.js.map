{"version":3,"file":"problemMatcher.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/tasks/test/common/problemMatcher.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as matchers from 'vs/workbench/contrib/tasks/common/problemMatcher';\n\nimport * as assert from 'assert';\nimport { ValidationState, IProblemReporter, ValidationStatus } from 'vs/base/common/parsers';\n\nclass ProblemReporter implements IProblemReporter {\n\tprivate _validationStatus: ValidationStatus;\n\tprivate _messages: string[];\n\n\tconstructor() {\n\t\tthis._validationStatus = new ValidationStatus();\n\t\tthis._messages = [];\n\t}\n\n\tpublic info(message: string): void {\n\t\tthis._messages.push(message);\n\t\tthis._validationStatus.state = ValidationState.Info;\n\t}\n\n\tpublic warn(message: string): void {\n\t\tthis._messages.push(message);\n\t\tthis._validationStatus.state = ValidationState.Warning;\n\t}\n\n\tpublic error(message: string): void {\n\t\tthis._messages.push(message);\n\t\tthis._validationStatus.state = ValidationState.Error;\n\t}\n\n\tpublic fatal(message: string): void {\n\t\tthis._messages.push(message);\n\t\tthis._validationStatus.state = ValidationState.Fatal;\n\t}\n\n\tpublic hasMessage(message: string): boolean {\n\t\treturn this._messages.indexOf(message) !== null;\n\t}\n\tpublic get messages(): string[] {\n\t\treturn this._messages;\n\t}\n\tpublic get state(): ValidationState {\n\t\treturn this._validationStatus.state;\n\t}\n\n\tpublic isOK(): boolean {\n\t\treturn this._validationStatus.isOK();\n\t}\n\n\tpublic get status(): ValidationStatus {\n\t\treturn this._validationStatus;\n\t}\n}\n\nsuite('ProblemPatternParser', () => {\n\tlet reporter: ProblemReporter;\n\tlet parser: matchers.ProblemPatternParser;\n\tconst testRegexp = new RegExp('test');\n\n\tsetup(() => {\n\t\treporter = new ProblemReporter();\n\t\tparser = new matchers.ProblemPatternParser(reporter);\n\t});\n\n\tsuite('single-pattern definitions', () => {\n\t\ttest('parses a pattern defined by only a regexp', () => {\n\t\t\tlet problemPattern: matchers.Config.ProblemPattern = {\n\t\t\t\tregexp: 'test'\n\t\t\t};\n\t\t\tlet parsed = parser.parse(problemPattern);\n\t\t\tassert(reporter.isOK());\n\t\t\tassert.deepStrictEqual(parsed, {\n\t\t\t\tregexp: testRegexp,\n\t\t\t\tkind: matchers.ProblemLocationKind.Location,\n\t\t\t\tfile: 1,\n\t\t\t\tline: 2,\n\t\t\t\tcharacter: 3,\n\t\t\t\tmessage: 0\n\t\t\t});\n\t\t});\n\t\ttest('does not sets defaults for line and character if kind is File', () => {\n\t\t\tlet problemPattern: matchers.Config.ProblemPattern = {\n\t\t\t\tregexp: 'test',\n\t\t\t\tkind: 'file'\n\t\t\t};\n\t\t\tlet parsed = parser.parse(problemPattern);\n\t\t\tassert.deepStrictEqual(parsed, {\n\t\t\t\tregexp: testRegexp,\n\t\t\t\tkind: matchers.ProblemLocationKind.File,\n\t\t\t\tfile: 1,\n\t\t\t\tmessage: 0\n\t\t\t});\n\t\t});\n\t});\n\n\tsuite('multi-pattern definitions', () => {\n\t\ttest('defines a pattern based on regexp and property fields, with file/line location', () => {\n\t\t\tlet problemPattern: matchers.Config.MultiLineProblemPattern = [\n\t\t\t\t{ regexp: 'test', file: 3, line: 4, column: 5, message: 6 }\n\t\t\t];\n\t\t\tlet parsed = parser.parse(problemPattern);\n\t\t\tassert(reporter.isOK());\n\t\t\tassert.deepStrictEqual(parsed,\n\t\t\t\t[{\n\t\t\t\t\tregexp: testRegexp,\n\t\t\t\t\tkind: matchers.ProblemLocationKind.Location,\n\t\t\t\t\tfile: 3,\n\t\t\t\t\tline: 4,\n\t\t\t\t\tcharacter: 5,\n\t\t\t\t\tmessage: 6\n\t\t\t\t}]\n\t\t\t);\n\t\t});\n\t\ttest('defines a pattern bsaed on regexp and property fields, with location', () => {\n\t\t\tlet problemPattern: matchers.Config.MultiLineProblemPattern = [\n\t\t\t\t{ regexp: 'test', file: 3, location: 4, message: 6 }\n\t\t\t];\n\t\t\tlet parsed = parser.parse(problemPattern);\n\t\t\tassert(reporter.isOK());\n\t\t\tassert.deepStrictEqual(parsed,\n\t\t\t\t[{\n\t\t\t\t\tregexp: testRegexp,\n\t\t\t\t\tkind: matchers.ProblemLocationKind.Location,\n\t\t\t\t\tfile: 3,\n\t\t\t\t\tlocation: 4,\n\t\t\t\t\tmessage: 6\n\t\t\t\t}]\n\t\t\t);\n\t\t});\n\t\ttest('accepts a pattern that provides the fields from multiple entries', () => {\n\t\t\tlet problemPattern: matchers.Config.MultiLineProblemPattern = [\n\t\t\t\t{ regexp: 'test', file: 3 },\n\t\t\t\t{ regexp: 'test1', line: 4 },\n\t\t\t\t{ regexp: 'test2', column: 5 },\n\t\t\t\t{ regexp: 'test3', message: 6 }\n\t\t\t];\n\t\t\tlet parsed = parser.parse(problemPattern);\n\t\t\tassert(reporter.isOK());\n\t\t\tassert.deepStrictEqual(parsed, [\n\t\t\t\t{ regexp: testRegexp, kind: matchers.ProblemLocationKind.Location, file: 3 },\n\t\t\t\t{ regexp: new RegExp('test1'), line: 4 },\n\t\t\t\t{ regexp: new RegExp('test2'), character: 5 },\n\t\t\t\t{ regexp: new RegExp('test3'), message: 6 }\n\t\t\t]);\n\t\t});\n\t\ttest('forbids setting the loop flag outside of the last element in the array', () => {\n\t\t\tlet problemPattern: matchers.Config.MultiLineProblemPattern = [\n\t\t\t\t{ regexp: 'test', file: 3, loop: true },\n\t\t\t\t{ regexp: 'test1', line: 4 }\n\t\t\t];\n\t\t\tlet parsed = parser.parse(problemPattern);\n\t\t\tassert.strictEqual(null, parsed);\n\t\t\tassert.strictEqual(ValidationState.Error, reporter.state);\n\t\t\tassert(reporter.hasMessage('The loop property is only supported on the last line matcher.'));\n\t\t});\n\t\ttest('forbids setting the kind outside of the first element of the array', () => {\n\t\t\tlet problemPattern: matchers.Config.MultiLineProblemPattern = [\n\t\t\t\t{ regexp: 'test', file: 3 },\n\t\t\t\t{ regexp: 'test1', kind: 'file', line: 4 }\n\t\t\t];\n\t\t\tlet parsed = parser.parse(problemPattern);\n\t\t\tassert.strictEqual(null, parsed);\n\t\t\tassert.strictEqual(ValidationState.Error, reporter.state);\n\t\t\tassert(reporter.hasMessage('The problem pattern is invalid. The kind property must be provided only in the first element'));\n\t\t});\n\n\t\ttest('kind: Location requires a regexp', () => {\n\t\t\tlet problemPattern: matchers.Config.MultiLineProblemPattern = [\n\t\t\t\t{ file: 0, line: 1, column: 20, message: 0 }\n\t\t\t];\n\t\t\tlet parsed = parser.parse(problemPattern);\n\t\t\tassert.strictEqual(null, parsed);\n\t\t\tassert.strictEqual(ValidationState.Error, reporter.state);\n\t\t\tassert(reporter.hasMessage('The problem pattern is missing a regular expression.'));\n\t\t});\n\t\ttest('kind: Location requires a regexp on every entry', () => {\n\t\t\tlet problemPattern: matchers.Config.MultiLineProblemPattern = [\n\t\t\t\t{ regexp: 'test', file: 3 },\n\t\t\t\t{ line: 4 },\n\t\t\t\t{ regexp: 'test2', column: 5 },\n\t\t\t\t{ regexp: 'test3', message: 6 }\n\t\t\t];\n\t\t\tlet parsed = parser.parse(problemPattern);\n\t\t\tassert.strictEqual(null, parsed);\n\t\t\tassert.strictEqual(ValidationState.Error, reporter.state);\n\t\t\tassert(reporter.hasMessage('The problem pattern is missing a regular expression.'));\n\t\t});\n\t\ttest('kind: Location requires a message', () => {\n\t\t\tlet problemPattern: matchers.Config.MultiLineProblemPattern = [\n\t\t\t\t{ regexp: 'test', file: 0, line: 1, column: 20 }\n\t\t\t];\n\t\t\tlet parsed = parser.parse(problemPattern);\n\t\t\tassert.strictEqual(null, parsed);\n\t\t\tassert.strictEqual(ValidationState.Error, reporter.state);\n\t\t\tassert(reporter.hasMessage('The problem pattern is invalid. It must have at least have a file and a message.'));\n\t\t});\n\n\t\ttest('kind: Location requires a file', () => {\n\t\t\tlet problemPattern: matchers.Config.MultiLineProblemPattern = [\n\t\t\t\t{ regexp: 'test', line: 1, column: 20, message: 0 }\n\t\t\t];\n\t\t\tlet parsed = parser.parse(problemPattern);\n\t\t\tassert.strictEqual(null, parsed);\n\t\t\tassert.strictEqual(ValidationState.Error, reporter.state);\n\t\t\tassert(reporter.hasMessage('The problem pattern is invalid. It must either have kind: \"file\" or have a line or location match group.'));\n\t\t});\n\n\t\ttest('kind: Location requires either a line or location', () => {\n\t\t\tlet problemPattern: matchers.Config.MultiLineProblemPattern = [\n\t\t\t\t{ regexp: 'test', file: 1, column: 20, message: 0 }\n\t\t\t];\n\t\t\tlet parsed = parser.parse(problemPattern);\n\t\t\tassert.strictEqual(null, parsed);\n\t\t\tassert.strictEqual(ValidationState.Error, reporter.state);\n\t\t\tassert(reporter.hasMessage('The problem pattern is invalid. It must either have kind: \"file\" or have a line or location match group.'));\n\t\t});\n\n\t\ttest('kind: File accepts a regexp, file and message', () => {\n\t\t\tlet problemPattern: matchers.Config.MultiLineProblemPattern = [\n\t\t\t\t{ regexp: 'test', file: 2, kind: 'file', message: 6 }\n\t\t\t];\n\t\t\tlet parsed = parser.parse(problemPattern);\n\t\t\tassert(reporter.isOK());\n\t\t\tassert.deepStrictEqual(parsed,\n\t\t\t\t[{\n\t\t\t\t\tregexp: testRegexp,\n\t\t\t\t\tkind: matchers.ProblemLocationKind.File,\n\t\t\t\t\tfile: 2,\n\t\t\t\t\tmessage: 6\n\t\t\t\t}]\n\t\t\t);\n\t\t});\n\n\t\ttest('kind: File requires a file', () => {\n\t\t\tlet problemPattern: matchers.Config.MultiLineProblemPattern = [\n\t\t\t\t{ regexp: 'test', kind: 'file', message: 6 }\n\t\t\t];\n\t\t\tlet parsed = parser.parse(problemPattern);\n\t\t\tassert.strictEqual(null, parsed);\n\t\t\tassert.strictEqual(ValidationState.Error, reporter.state);\n\t\t\tassert(reporter.hasMessage('The problem pattern is invalid. It must have at least have a file and a message.'));\n\t\t});\n\n\t\ttest('kind: File requires a message', () => {\n\t\t\tlet problemPattern: matchers.Config.MultiLineProblemPattern = [\n\t\t\t\t{ regexp: 'test', kind: 'file', file: 6 }\n\t\t\t];\n\t\t\tlet parsed = parser.parse(problemPattern);\n\t\t\tassert.strictEqual(null, parsed);\n\t\t\tassert.strictEqual(ValidationState.Error, reporter.state);\n\t\t\tassert(reporter.hasMessage('The problem pattern is invalid. It must have at least have a file and a message.'));\n\t\t});\n\t});\n});\n"]}