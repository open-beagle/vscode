{"version":3,"sources":["vs/workbench/contrib/tasks/electron-sandbox/taskService.ts"],"names":[],"mappings":"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","file":"taskService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport * as semver from 'vs/base/common/semver/semver';\nimport { IWorkspaceFolder, IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { ITaskSystem } from 'vs/workbench/contrib/tasks/common/taskSystem';\nimport { ExecutionEngine } from 'vs/workbench/contrib/tasks/common/tasks';\nimport * as TaskConfig from '../common/taskConfiguration';\nimport { AbstractTaskService } from 'vs/workbench/contrib/tasks/browser/abstractTaskService';\nimport { TaskFilter, ITaskService } from 'vs/workbench/contrib/tasks/common/taskService';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { TerminalTaskSystem } from 'vs/workbench/contrib/tasks/browser/terminalTaskSystem';\nimport { IConfirmationResult, IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { TerminateResponseCode } from 'vs/base/common/processes';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { ITextModelService } from 'vs/editor/common/services/resolverService';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IMarkerService } from 'vs/platform/markers/common/markers';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { IProgressService } from 'vs/platform/progress/common/progress';\nimport { IQuickInputService } from 'vs/platform/quickinput/common/quickInput';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IViewsService, IViewDescriptorService } from 'vs/workbench/common/views';\nimport { IOutputService } from 'vs/workbench/contrib/output/common/output';\nimport { ITerminalService } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { IConfigurationResolverService } from 'vs/workbench/services/configurationResolver/common/configurationResolver';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { ILifecycleService } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { IPanelService } from 'vs/workbench/services/panel/common/panelService';\nimport { IPathService } from 'vs/workbench/services/path/common/pathService';\nimport { IPreferencesService } from 'vs/workbench/services/preferences/common/preferences';\nimport { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';\nimport { IWorkspaceTrustManagementService, IWorkspaceTrustRequestService } from 'vs/platform/workspace/common/workspaceTrust';\nimport { ITerminalProfileResolverService } from 'vs/workbench/contrib/terminal/common/terminal';\n\ninterface WorkspaceFolderConfigurationResult {\n\tworkspaceFolder: IWorkspaceFolder;\n\tconfig: TaskConfig.ExternalTaskRunnerConfiguration | undefined;\n\thasErrors: boolean;\n}\n\nexport class TaskService extends AbstractTaskService {\n\tconstructor(@IConfigurationService configurationService: IConfigurationService,\n\t\t@IMarkerService markerService: IMarkerService,\n\t\t@IOutputService outputService: IOutputService,\n\t\t@IPanelService panelService: IPanelService,\n\t\t@IViewsService viewsService: IViewsService,\n\t\t@ICommandService commandService: ICommandService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IWorkspaceContextService contextService: IWorkspaceContextService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@ITextFileService textFileService: ITextFileService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t\t@IModelService modelService: IModelService,\n\t\t@IExtensionService extensionService: IExtensionService,\n\t\t@IQuickInputService quickInputService: IQuickInputService,\n\t\t@IConfigurationResolverService configurationResolverService: IConfigurationResolverService,\n\t\t@ITerminalService terminalService: ITerminalService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IProgressService progressService: IProgressService,\n\t\t@IOpenerService openerService: IOpenerService,\n\t\t@IDialogService dialogService: IDialogService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IWorkbenchEnvironmentService environmentService: IWorkbenchEnvironmentService,\n\t\t@ITerminalProfileResolverService terminalProfileResolverService: ITerminalProfileResolverService,\n\t\t@IPathService pathService: IPathService,\n\t\t@ITextModelService textModelResolverService: ITextModelService,\n\t\t@IPreferencesService preferencesService: IPreferencesService,\n\t\t@IViewDescriptorService viewDescriptorService: IViewDescriptorService,\n\t\t@IWorkspaceTrustRequestService workspaceTrustRequestService: IWorkspaceTrustRequestService,\n\t\t@IWorkspaceTrustManagementService workspaceTrustManagementService: IWorkspaceTrustManagementService,\n\t\t@ILogService logService: ILogService) {\n\t\tsuper(configurationService,\n\t\t\tmarkerService,\n\t\t\toutputService,\n\t\t\tpanelService,\n\t\t\tviewsService,\n\t\t\tcommandService,\n\t\t\teditorService,\n\t\t\tfileService,\n\t\t\tcontextService,\n\t\t\ttelemetryService,\n\t\t\ttextFileService,\n\t\t\tmodelService,\n\t\t\textensionService,\n\t\t\tquickInputService,\n\t\t\tconfigurationResolverService,\n\t\t\tterminalService,\n\t\t\tstorageService,\n\t\t\tprogressService,\n\t\t\topenerService,\n\t\t\tdialogService,\n\t\t\tnotificationService,\n\t\t\tcontextKeyService,\n\t\t\tenvironmentService,\n\t\t\tterminalProfileResolverService,\n\t\t\tpathService,\n\t\t\ttextModelResolverService,\n\t\t\tpreferencesService,\n\t\t\tviewDescriptorService,\n\t\t\tworkspaceTrustRequestService,\n\t\t\tworkspaceTrustManagementService,\n\t\t\tlogService);\n\t\tthis._register(lifecycleService.onBeforeShutdown(event => event.veto(this.beforeShutdown(), 'veto.tasks')));\n\t}\n\n\tprotected getTaskSystem(): ITaskSystem {\n\t\tif (this._taskSystem) {\n\t\t\treturn this._taskSystem;\n\t\t}\n\t\tthis._taskSystem = this.createTerminalTaskSystem();\n\t\tthis._taskSystemListener = this._taskSystem!.onDidStateChange((event) => {\n\t\t\tif (this._taskSystem) {\n\t\t\t\tthis._taskRunningState.set(this._taskSystem.isActiveSync());\n\t\t\t}\n\t\t\tthis._onDidStateChange.fire(event);\n\t\t});\n\t\treturn this._taskSystem;\n\t}\n\n\tprotected computeLegacyConfiguration(workspaceFolder: IWorkspaceFolder): Promise<WorkspaceFolderConfigurationResult> {\n\t\tlet { config, hasParseErrors } = this.getConfiguration(workspaceFolder);\n\t\tif (hasParseErrors) {\n\t\t\treturn Promise.resolve({ workspaceFolder: workspaceFolder, hasErrors: true, config: undefined });\n\t\t}\n\t\tif (config) {\n\t\t\treturn Promise.resolve({ workspaceFolder, config, hasErrors: false });\n\t\t} else {\n\t\t\treturn Promise.resolve({ workspaceFolder: workspaceFolder, hasErrors: true, config: undefined });\n\t\t}\n\t}\n\n\tprotected versionAndEngineCompatible(filter?: TaskFilter): boolean {\n\t\tlet range = filter && filter.version ? filter.version : undefined;\n\t\tlet engine = this.executionEngine;\n\n\t\treturn (range === undefined) || ((semver.satisfies('0.1.0', range) && engine === ExecutionEngine.Process) || (semver.satisfies('2.0.0', range) && engine === ExecutionEngine.Terminal));\n\t}\n\n\tpublic beforeShutdown(): boolean | Promise<boolean> {\n\t\tif (!this._taskSystem) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!this._taskSystem.isActiveSync()) {\n\t\t\treturn false;\n\t\t}\n\t\t// The terminal service kills all terminal on shutdown. So there\n\t\t// is nothing we can do to prevent this here.\n\t\tif (this._taskSystem instanceof TerminalTaskSystem) {\n\t\t\treturn false;\n\t\t}\n\n\t\tlet terminatePromise: Promise<IConfirmationResult>;\n\t\tif (this._taskSystem.canAutoTerminate()) {\n\t\t\tterminatePromise = Promise.resolve({ confirmed: true });\n\t\t} else {\n\t\t\tterminatePromise = this.dialogService.confirm({\n\t\t\t\tmessage: nls.localize('TaskSystem.runningTask', 'There is a task running. Do you want to terminate it?'),\n\t\t\t\tprimaryButton: nls.localize({ key: 'TaskSystem.terminateTask', comment: ['&& denotes a mnemonic'] }, \"&&Terminate Task\"),\n\t\t\t\ttype: 'question'\n\t\t\t});\n\t\t}\n\n\t\treturn terminatePromise.then(res => {\n\t\t\tif (res.confirmed) {\n\t\t\t\treturn this._taskSystem!.terminateAll().then((responses) => {\n\t\t\t\t\tlet success = true;\n\t\t\t\t\tlet code: number | undefined = undefined;\n\t\t\t\t\tfor (let response of responses) {\n\t\t\t\t\t\tsuccess = success && response.success;\n\t\t\t\t\t\t// We only have a code in the old output runner which only has one task\n\t\t\t\t\t\t// So we can use the first code.\n\t\t\t\t\t\tif (code === undefined && response.code !== undefined) {\n\t\t\t\t\t\t\tcode = response.code;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (success) {\n\t\t\t\t\t\tthis._taskSystem = undefined;\n\t\t\t\t\t\tthis.disposeTaskSystemListeners();\n\t\t\t\t\t\treturn false; // no veto\n\t\t\t\t\t} else if (code && code === TerminateResponseCode.ProcessNotFound) {\n\t\t\t\t\t\treturn this.dialogService.confirm({\n\t\t\t\t\t\t\tmessage: nls.localize('TaskSystem.noProcess', 'The launched task doesn\\'t exist anymore. If the task spawned background processes exiting VS Code might result in orphaned processes. To avoid this start the last background process with a wait flag.'),\n\t\t\t\t\t\t\tprimaryButton: nls.localize({ key: 'TaskSystem.exitAnyways', comment: ['&& denotes a mnemonic'] }, \"&&Exit Anyways\"),\n\t\t\t\t\t\t\ttype: 'info'\n\t\t\t\t\t\t}).then(res => !res.confirmed);\n\t\t\t\t\t}\n\t\t\t\t\treturn true; // veto\n\t\t\t\t}, (err) => {\n\t\t\t\t\treturn true; // veto\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn true; // veto\n\t\t});\n\t}\n}\n\nregisterSingleton(ITaskService, TaskService, true);\n"]}