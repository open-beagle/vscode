{"version":3,"sources":["vs/workbench/contrib/tasks/common/taskDefinitionRegistry.ts"],"names":[],"mappings":"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","file":"taskDefinitionRegistry.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { IJSONSchema, IJSONSchemaMap } from 'vs/base/common/jsonSchema';\nimport { IStringDictionary } from 'vs/base/common/collections';\nimport * as Types from 'vs/base/common/types';\nimport * as Objects from 'vs/base/common/objects';\n\nimport { ExtensionsRegistry, ExtensionMessageCollector } from 'vs/workbench/services/extensions/common/extensionsRegistry';\n\nimport * as Tasks from 'vs/workbench/contrib/tasks/common/tasks';\nimport { ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { Emitter, Event } from 'vs/base/common/event';\n\n\nconst taskDefinitionSchema: IJSONSchema = {\n\ttype: 'object',\n\tadditionalProperties: false,\n\tproperties: {\n\t\ttype: {\n\t\t\ttype: 'string',\n\t\t\tdescription: nls.localize('TaskDefinition.description', 'The actual task type. Please note that types starting with a \\'$\\' are reserved for internal usage.')\n\t\t},\n\t\trequired: {\n\t\t\ttype: 'array',\n\t\t\titems: {\n\t\t\t\ttype: 'string'\n\t\t\t}\n\t\t},\n\t\tproperties: {\n\t\t\ttype: 'object',\n\t\t\tdescription: nls.localize('TaskDefinition.properties', 'Additional properties of the task type'),\n\t\t\tadditionalProperties: {\n\t\t\t\t$ref: 'http://json-schema.org/draft-07/schema#'\n\t\t\t}\n\t\t},\n\t\twhen: {\n\t\t\ttype: 'string',\n\t\t\tmarkdownDescription: nls.localize('TaskDefinition.when', 'Condition which must be true to enable this type of task. Consider using `shellExecutionSupported`, `processExecutionSupported`, and `customExecutionSupported` as appropriate for this task definition.'),\n\t\t\tdefault: ''\n\t\t}\n\t}\n};\n\nnamespace Configuration {\n\texport interface TaskDefinition {\n\t\ttype?: string;\n\t\trequired?: string[];\n\t\tproperties?: IJSONSchemaMap;\n\t\twhen?: string;\n\t}\n\n\texport function from(value: TaskDefinition, extensionId: ExtensionIdentifier, messageCollector: ExtensionMessageCollector): Tasks.TaskDefinition | undefined {\n\t\tif (!value) {\n\t\t\treturn undefined;\n\t\t}\n\t\tlet taskType = Types.isString(value.type) ? value.type : undefined;\n\t\tif (!taskType || taskType.length === 0) {\n\t\t\tmessageCollector.error(nls.localize('TaskTypeConfiguration.noType', 'The task type configuration is missing the required \\'taskType\\' property'));\n\t\t\treturn undefined;\n\t\t}\n\t\tlet required: string[] = [];\n\t\tif (Array.isArray(value.required)) {\n\t\t\tfor (let element of value.required) {\n\t\t\t\tif (Types.isString(element)) {\n\t\t\t\t\trequired.push(element);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\textensionId: extensionId.value,\n\t\t\ttaskType, required: required,\n\t\t\tproperties: value.properties ? Objects.deepClone(value.properties) : {},\n\t\t\twhen: value.when ? ContextKeyExpr.deserialize(value.when) : undefined\n\t\t};\n\t}\n}\n\n\nconst taskDefinitionsExtPoint = ExtensionsRegistry.registerExtensionPoint<Configuration.TaskDefinition[]>({\n\textensionPoint: 'taskDefinitions',\n\tjsonSchema: {\n\t\tdescription: nls.localize('TaskDefinitionExtPoint', 'Contributes task kinds'),\n\t\ttype: 'array',\n\t\titems: taskDefinitionSchema\n\t}\n});\n\nexport interface ITaskDefinitionRegistry {\n\tonReady(): Promise<void>;\n\n\tget(key: string): Tasks.TaskDefinition;\n\tall(): Tasks.TaskDefinition[];\n\tgetJsonSchema(): IJSONSchema;\n\tonDefinitionsChanged: Event<void>;\n}\n\nclass TaskDefinitionRegistryImpl implements ITaskDefinitionRegistry {\n\n\tprivate taskTypes: IStringDictionary<Tasks.TaskDefinition>;\n\tprivate readyPromise: Promise<void>;\n\tprivate _schema: IJSONSchema | undefined;\n\tprivate _onDefinitionsChanged: Emitter<void> = new Emitter();\n\tpublic onDefinitionsChanged: Event<void> = this._onDefinitionsChanged.event;\n\n\tconstructor() {\n\t\tthis.taskTypes = Object.create(null);\n\t\tthis.readyPromise = new Promise<void>((resolve, reject) => {\n\t\t\ttaskDefinitionsExtPoint.setHandler((extensions, delta) => {\n\t\t\t\ttry {\n\t\t\t\t\tfor (let extension of delta.removed) {\n\t\t\t\t\t\tlet taskTypes = extension.value;\n\t\t\t\t\t\tfor (let taskType of taskTypes) {\n\t\t\t\t\t\t\tif (this.taskTypes && taskType.type && this.taskTypes[taskType.type]) {\n\t\t\t\t\t\t\t\tdelete this.taskTypes[taskType.type];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfor (let extension of delta.added) {\n\t\t\t\t\t\tlet taskTypes = extension.value;\n\t\t\t\t\t\tfor (let taskType of taskTypes) {\n\t\t\t\t\t\t\tlet type = Configuration.from(taskType, extension.description.identifier, extension.collector);\n\t\t\t\t\t\t\tif (type) {\n\t\t\t\t\t\t\t\tthis.taskTypes[type.taskType] = type;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ((delta.removed.length > 0) || (delta.added.length > 0)) {\n\t\t\t\t\t\tthis._onDefinitionsChanged.fire();\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t}\n\t\t\t\tresolve(undefined);\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic onReady(): Promise<void> {\n\t\treturn this.readyPromise;\n\t}\n\n\tpublic get(key: string): Tasks.TaskDefinition {\n\t\treturn this.taskTypes[key];\n\t}\n\n\tpublic all(): Tasks.TaskDefinition[] {\n\t\treturn Object.keys(this.taskTypes).map(key => this.taskTypes[key]);\n\t}\n\n\tpublic getJsonSchema(): IJSONSchema {\n\t\tif (this._schema === undefined) {\n\t\t\tlet schemas: IJSONSchema[] = [];\n\t\t\tfor (let definition of this.all()) {\n\t\t\t\tlet schema: IJSONSchema = {\n\t\t\t\t\ttype: 'object',\n\t\t\t\t\tadditionalProperties: false\n\t\t\t\t};\n\t\t\t\tif (definition.required.length > 0) {\n\t\t\t\t\tschema.required = definition.required.slice(0);\n\t\t\t\t}\n\t\t\t\tif (definition.properties !== undefined) {\n\t\t\t\t\tschema.properties = Objects.deepClone(definition.properties);\n\t\t\t\t} else {\n\t\t\t\t\tschema.properties = Object.create(null);\n\t\t\t\t}\n\t\t\t\tschema.properties!.type = {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tenum: [definition.taskType]\n\t\t\t\t};\n\t\t\t\tschemas.push(schema);\n\t\t\t}\n\t\t\tthis._schema = { oneOf: schemas };\n\t\t}\n\t\treturn this._schema;\n\t}\n}\n\nexport const TaskDefinitionRegistry: ITaskDefinitionRegistry = new TaskDefinitionRegistryImpl();\n"]}