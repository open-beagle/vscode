{"version":3,"sources":["vs/workbench/contrib/tasks/common/jsonSchema_v2.ts"],"names":[],"mappings":"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","file":"jsonSchema_v2.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport * as Objects from 'vs/base/common/objects';\nimport { IJSONSchema, IJSONSchemaMap } from 'vs/base/common/jsonSchema';\n\nimport commonSchema from './jsonSchemaCommon';\n\nimport { ProblemMatcherRegistry } from 'vs/workbench/contrib/tasks/common/problemMatcher';\nimport { TaskDefinitionRegistry } from './taskDefinitionRegistry';\nimport * as ConfigurationResolverUtils from 'vs/workbench/services/configurationResolver/common/configurationResolverUtils';\nimport { inputsSchema } from 'vs/workbench/services/configurationResolver/common/configurationResolverSchema';\n\nfunction fixReferences(literal: any) {\n\tif (Array.isArray(literal)) {\n\t\tliteral.forEach(fixReferences);\n\t} else if (typeof literal === 'object') {\n\t\tif (literal['$ref']) {\n\t\t\tliteral['$ref'] = literal['$ref'] + '2';\n\t\t}\n\t\tObject.getOwnPropertyNames(literal).forEach(property => {\n\t\t\tlet value = literal[property];\n\t\t\tif (Array.isArray(value) || typeof value === 'object') {\n\t\t\t\tfixReferences(value);\n\t\t\t}\n\t\t});\n\t}\n}\n\nconst shellCommand: IJSONSchema = {\n\tanyOf: [\n\t\t{\n\t\t\ttype: 'boolean',\n\t\t\tdefault: true,\n\t\t\tdescription: nls.localize('JsonSchema.shell', 'Specifies whether the command is a shell command or an external program. Defaults to false if omitted.')\n\t\t},\n\t\t{\n\t\t\t$ref: '#definitions/shellConfiguration'\n\t\t}\n\t],\n\tdeprecationMessage: nls.localize('JsonSchema.tasks.isShellCommand.deprecated', 'The property isShellCommand is deprecated. Use the type property of the task and the shell property in the options instead. See also the 1.14 release notes.')\n};\n\nconst taskIdentifier: IJSONSchema = {\n\ttype: 'object',\n\tadditionalProperties: true,\n\tproperties: {\n\t\ttype: {\n\t\t\ttype: 'string',\n\t\t\tdescription: nls.localize('JsonSchema.tasks.dependsOn.identifier', 'The task identifier.')\n\t\t}\n\t}\n};\n\nconst dependsOn: IJSONSchema = {\n\tanyOf: [\n\t\t{\n\t\t\ttype: 'string',\n\t\t\tdescription: nls.localize('JsonSchema.tasks.dependsOn.string', 'Another task this task depends on.')\n\t\t},\n\t\ttaskIdentifier,\n\t\t{\n\t\t\ttype: 'array',\n\t\t\tdescription: nls.localize('JsonSchema.tasks.dependsOn.array', 'The other tasks this task depends on.'),\n\t\t\titems: {\n\t\t\t\tanyOf: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t},\n\t\t\t\t\ttaskIdentifier\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t],\n\tdescription: nls.localize('JsonSchema.tasks.dependsOn', 'Either a string representing another task or an array of other tasks that this task depends on.')\n};\n\nconst dependsOrder: IJSONSchema = {\n\ttype: 'string',\n\tenum: ['parallel', 'sequence'],\n\tenumDescriptions: [\n\t\tnls.localize('JsonSchema.tasks.dependsOrder.parallel', 'Run all dependsOn tasks in parallel.'),\n\t\tnls.localize('JsonSchema.tasks.dependsOrder.sequence', 'Run all dependsOn tasks in sequence.'),\n\t],\n\tdefault: 'parallel',\n\tdescription: nls.localize('JsonSchema.tasks.dependsOrder', 'Determines the order of the dependsOn tasks for this task. Note that this property is not recursive.')\n};\n\nconst detail: IJSONSchema = {\n\ttype: 'string',\n\tdescription: nls.localize('JsonSchema.tasks.detail', 'An optional description of a task that shows in the Run Task quick pick as a detail.')\n};\n\nconst presentation: IJSONSchema = {\n\ttype: 'object',\n\tdefault: {\n\t\techo: true,\n\t\treveal: 'always',\n\t\tfocus: false,\n\t\tpanel: 'shared',\n\t\tshowReuseMessage: true,\n\t\tclear: false,\n\t},\n\tdescription: nls.localize('JsonSchema.tasks.presentation', 'Configures the panel that is used to present the task\\'s output and reads its input.'),\n\tadditionalProperties: false,\n\tproperties: {\n\t\techo: {\n\t\t\ttype: 'boolean',\n\t\t\tdefault: true,\n\t\t\tdescription: nls.localize('JsonSchema.tasks.presentation.echo', 'Controls whether the executed command is echoed to the panel. Default is true.')\n\t\t},\n\t\tfocus: {\n\t\t\ttype: 'boolean',\n\t\t\tdefault: false,\n\t\t\tdescription: nls.localize('JsonSchema.tasks.presentation.focus', 'Controls whether the panel takes focus. Default is false. If set to true the panel is revealed as well.')\n\t\t},\n\t\trevealProblems: {\n\t\t\ttype: 'string',\n\t\t\tenum: ['always', 'onProblem', 'never'],\n\t\t\tenumDescriptions: [\n\t\t\t\tnls.localize('JsonSchema.tasks.presentation.revealProblems.always', 'Always reveals the problems panel when this task is executed.'),\n\t\t\t\tnls.localize('JsonSchema.tasks.presentation.revealProblems.onProblem', 'Only reveals the problems panel if a problem is found.'),\n\t\t\t\tnls.localize('JsonSchema.tasks.presentation.revealProblems.never', 'Never reveals the problems panel when this task is executed.'),\n\t\t\t],\n\t\t\tdefault: 'never',\n\t\t\tdescription: nls.localize('JsonSchema.tasks.presentation.revealProblems', 'Controls whether the problems panel is revealed when running this task or not. Takes precedence over option \\\"reveal\\\". Default is \\\"never\\\".')\n\t\t},\n\t\treveal: {\n\t\t\ttype: 'string',\n\t\t\tenum: ['always', 'silent', 'never'],\n\t\t\tenumDescriptions: [\n\t\t\t\tnls.localize('JsonSchema.tasks.presentation.reveal.always', 'Always reveals the terminal when this task is executed.'),\n\t\t\t\tnls.localize('JsonSchema.tasks.presentation.reveal.silent', 'Only reveals the terminal if the task exits with an error or the problem matcher finds an error.'),\n\t\t\t\tnls.localize('JsonSchema.tasks.presentation.reveal.never', 'Never reveals the terminal when this task is executed.'),\n\t\t\t],\n\t\t\tdefault: 'always',\n\t\t\tdescription: nls.localize('JsonSchema.tasks.presentation.reveal', 'Controls whether the terminal running the task is revealed or not. May be overridden by option \\\"revealProblems\\\". Default is \\\"always\\\".')\n\t\t},\n\t\tpanel: {\n\t\t\ttype: 'string',\n\t\t\tenum: ['shared', 'dedicated', 'new'],\n\t\t\tdefault: 'shared',\n\t\t\tdescription: nls.localize('JsonSchema.tasks.presentation.instance', 'Controls if the panel is shared between tasks, dedicated to this task or a new one is created on every run.')\n\t\t},\n\t\tshowReuseMessage: {\n\t\t\ttype: 'boolean',\n\t\t\tdefault: true,\n\t\t\tdescription: nls.localize('JsonSchema.tasks.presentation.showReuseMessage', 'Controls whether to show the `Terminal will be reused by tasks, press any key to close it` message.')\n\t\t},\n\t\tclear: {\n\t\t\ttype: 'boolean',\n\t\t\tdefault: false,\n\t\t\tdescription: nls.localize('JsonSchema.tasks.presentation.clear', 'Controls whether the terminal is cleared before executing the task.')\n\t\t},\n\t\tgroup: {\n\t\t\ttype: 'string',\n\t\t\tdescription: nls.localize('JsonSchema.tasks.presentation.group', 'Controls whether the task is executed in a specific terminal group using split panes.')\n\t\t},\n\t}\n};\n\nconst terminal: IJSONSchema = Objects.deepClone(presentation);\nterminal.deprecationMessage = nls.localize('JsonSchema.tasks.terminal', 'The terminal property is deprecated. Use presentation instead');\n\nconst group: IJSONSchema = {\n\toneOf: [\n\t\t{\n\t\t\ttype: 'string',\n\t\t},\n\t\t{\n\t\t\ttype: 'object',\n\t\t\tproperties: {\n\t\t\t\tkind: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdefault: 'none',\n\t\t\t\t\tdescription: nls.localize('JsonSchema.tasks.group.kind', 'The task\\'s execution group.')\n\t\t\t\t},\n\t\t\t\tisDefault: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tdefault: false,\n\t\t\t\t\tdescription: nls.localize('JsonSchema.tasks.group.isDefault', 'Defines if this task is the default task in the group.')\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t],\n\tenum: [\n\t\t{ kind: 'build', isDefault: true },\n\t\t{ kind: 'test', isDefault: true },\n\t\t'build',\n\t\t'test',\n\t\t'none'\n\t],\n\tenumDescriptions: [\n\t\tnls.localize('JsonSchema.tasks.group.defaultBuild', 'Marks the task as the default build task.'),\n\t\tnls.localize('JsonSchema.tasks.group.defaultTest', 'Marks the task as the default test task.'),\n\t\tnls.localize('JsonSchema.tasks.group.build', 'Marks the task as a build task accessible through the \\'Run Build Task\\' command.'),\n\t\tnls.localize('JsonSchema.tasks.group.test', 'Marks the task as a test task accessible through the \\'Run Test Task\\' command.'),\n\t\tnls.localize('JsonSchema.tasks.group.none', 'Assigns the task to no group')\n\t],\n\tdescription: nls.localize('JsonSchema.tasks.group', 'Defines to which execution group this task belongs to. It supports \"build\" to add it to the build group and \"test\" to add it to the test group.')\n};\n\nconst taskType: IJSONSchema = {\n\ttype: 'string',\n\tenum: ['shell'],\n\tdefault: 'process',\n\tdescription: nls.localize('JsonSchema.tasks.type', 'Defines whether the task is run as a process or as a command inside a shell.')\n};\n\nconst command: IJSONSchema = {\n\toneOf: [\n\t\t{\n\t\t\toneOf: [\n\t\t\t\t{\n\t\t\t\t\ttype: 'string'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'array',\n\t\t\t\t\titems: {\n\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t},\n\t\t\t\t\tdescription: nls.localize('JsonSchema.commandArray', 'The shell command to be executed. Array items will be joined using a space character')\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\ttype: 'object',\n\t\t\trequired: ['value', 'quoting'],\n\t\t\tproperties: {\n\t\t\t\tvalue: {\n\t\t\t\t\toneOf: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'array',\n\t\t\t\t\t\t\titems: {\n\t\t\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tdescription: nls.localize('JsonSchema.commandArray', 'The shell command to be executed. Array items will be joined using a space character')\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\tdescription: nls.localize('JsonSchema.command.quotedString.value', 'The actual command value')\n\t\t\t\t},\n\t\t\t\tquoting: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tenum: ['escape', 'strong', 'weak'],\n\t\t\t\t\tenumDescriptions: [\n\t\t\t\t\t\tnls.localize('JsonSchema.tasks.quoting.escape', 'Escapes characters using the shell\\'s escape character (e.g. ` under PowerShell and \\\\ under bash).'),\n\t\t\t\t\t\tnls.localize('JsonSchema.tasks.quoting.strong', 'Quotes the argument using the shell\\'s strong quote character (e.g. \\' under PowerShell and bash).'),\n\t\t\t\t\t\tnls.localize('JsonSchema.tasks.quoting.weak', 'Quotes the argument using the shell\\'s weak quote character (e.g. \" under PowerShell and bash).'),\n\t\t\t\t\t],\n\t\t\t\t\tdefault: 'strong',\n\t\t\t\t\tdescription: nls.localize('JsonSchema.command.quotesString.quote', 'How the command value should be quoted.')\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t],\n\tdescription: nls.localize('JsonSchema.command', 'The command to be executed. Can be an external program or a shell command.')\n};\n\nconst args: IJSONSchema = {\n\ttype: 'array',\n\titems: {\n\t\toneOf: [\n\t\t\t{\n\t\t\t\ttype: 'string',\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'object',\n\t\t\t\trequired: ['value', 'quoting'],\n\t\t\t\tproperties: {\n\t\t\t\t\tvalue: {\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdescription: nls.localize('JsonSchema.args.quotedString.value', 'The actual argument value')\n\t\t\t\t\t},\n\t\t\t\t\tquoting: {\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tenum: ['escape', 'strong', 'weak'],\n\t\t\t\t\t\tenumDescriptions: [\n\t\t\t\t\t\t\tnls.localize('JsonSchema.tasks.quoting.escape', 'Escapes characters using the shell\\'s escape character (e.g. ` under PowerShell and \\\\ under bash).'),\n\t\t\t\t\t\t\tnls.localize('JsonSchema.tasks.quoting.strong', 'Quotes the argument using the shell\\'s strong quote character (e.g. \\' under PowerShell and bash).'),\n\t\t\t\t\t\t\tnls.localize('JsonSchema.tasks.quoting.weak', 'Quotes the argument using the shell\\'s weak quote character (e.g. \" under PowerShell and bash).'),\n\t\t\t\t\t\t],\n\t\t\t\t\t\tdefault: 'strong',\n\t\t\t\t\t\tdescription: nls.localize('JsonSchema.args.quotesString.quote', 'How the argument value should be quoted.')\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t]\n\t},\n\tdescription: nls.localize('JsonSchema.tasks.args', 'Arguments passed to the command when this task is invoked.')\n};\n\nconst label: IJSONSchema = {\n\ttype: 'string',\n\tdescription: nls.localize('JsonSchema.tasks.label', \"The task's user interface label\")\n};\n\nconst version: IJSONSchema = {\n\ttype: 'string',\n\tenum: ['2.0.0'],\n\tdescription: nls.localize('JsonSchema.version', 'The config\\'s version number.')\n};\n\nconst identifier: IJSONSchema = {\n\ttype: 'string',\n\tdescription: nls.localize('JsonSchema.tasks.identifier', 'A user defined identifier to reference the task in launch.json or a dependsOn clause.'),\n\tdeprecationMessage: nls.localize('JsonSchema.tasks.identifier.deprecated', 'User defined identifiers are deprecated. For custom task use the name as a reference and for tasks provided by extensions use their defined task identifier.')\n};\n\nconst runOptions: IJSONSchema = {\n\ttype: 'object',\n\tadditionalProperties: false,\n\tproperties: {\n\t\treevaluateOnRerun: {\n\t\t\ttype: 'boolean',\n\t\t\tdescription: nls.localize('JsonSchema.tasks.reevaluateOnRerun', 'Whether to reevaluate task variables on rerun.'),\n\t\t\tdefault: true\n\t\t},\n\t\trunOn: {\n\t\t\ttype: 'string',\n\t\t\tenum: ['default', 'folderOpen'],\n\t\t\tdescription: nls.localize('JsonSchema.tasks.runOn', 'Configures when the task should be run. If set to folderOpen, then the task will be run automatically when the folder is opened.'),\n\t\t\tdefault: 'default'\n\t\t},\n\t\tinstanceLimit: {\n\t\t\ttype: 'number',\n\t\t\tdescription: nls.localize('JsonSchema.tasks.instanceLimit', 'The number of instances of the task that are allowed to run simultaneously.'),\n\t\t\tdefault: 1\n\t\t},\n\t},\n\tdescription: nls.localize('JsonSchema.tasks.runOptions', 'The task\\'s run related options')\n};\n\nconst commonSchemaDefinitions = commonSchema.definitions!;\nconst options: IJSONSchema = Objects.deepClone(commonSchemaDefinitions.options);\nconst optionsProperties = options.properties!;\noptionsProperties.shell = Objects.deepClone(commonSchemaDefinitions.shellConfiguration);\n\nlet taskConfiguration: IJSONSchema = {\n\ttype: 'object',\n\tadditionalProperties: false,\n\tproperties: {\n\t\tlabel: {\n\t\t\ttype: 'string',\n\t\t\tdescription: nls.localize('JsonSchema.tasks.taskLabel', \"The task's label\")\n\t\t},\n\t\ttaskName: {\n\t\t\ttype: 'string',\n\t\t\tdescription: nls.localize('JsonSchema.tasks.taskName', 'The task\\'s name'),\n\t\t\tdeprecationMessage: nls.localize('JsonSchema.tasks.taskName.deprecated', 'The task\\'s name property is deprecated. Use the label property instead.')\n\t\t},\n\t\tidentifier: Objects.deepClone(identifier),\n\t\tgroup: Objects.deepClone(group),\n\t\tisBackground: {\n\t\t\ttype: 'boolean',\n\t\t\tdescription: nls.localize('JsonSchema.tasks.background', 'Whether the executed task is kept alive and is running in the background.'),\n\t\t\tdefault: true\n\t\t},\n\t\tpromptOnClose: {\n\t\t\ttype: 'boolean',\n\t\t\tdescription: nls.localize('JsonSchema.tasks.promptOnClose', 'Whether the user is prompted when VS Code closes with a running task.'),\n\t\t\tdefault: false\n\t\t},\n\t\tpresentation: Objects.deepClone(presentation),\n\t\toptions: options,\n\t\tproblemMatcher: {\n\t\t\t$ref: '#/definitions/problemMatcherType',\n\t\t\tdescription: nls.localize('JsonSchema.tasks.matchers', 'The problem matcher(s) to use. Can either be a string or a problem matcher definition or an array of strings and problem matchers.')\n\t\t},\n\t\trunOptions: Objects.deepClone(runOptions),\n\t\tdependsOn: Objects.deepClone(dependsOn),\n\t\tdependsOrder: Objects.deepClone(dependsOrder),\n\t\tdetail: Objects.deepClone(detail),\n\t}\n};\n\nlet taskDefinitions: IJSONSchema[] = [];\nTaskDefinitionRegistry.onReady().then(() => {\n\tupdateTaskDefinitions();\n});\n\nexport function updateTaskDefinitions() {\n\tfor (let taskType of TaskDefinitionRegistry.all()) {\n\t\t// Check that we haven't already added this task type\n\t\tif (taskDefinitions.find(schema => {\n\t\t\treturn schema.properties?.type?.enum?.find ? schema.properties?.type.enum.find(element => element === taskType.taskType) : undefined;\n\t\t})) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet schema: IJSONSchema = Objects.deepClone(taskConfiguration);\n\t\tconst schemaProperties = schema.properties!;\n\t\t// Since we do this after the schema is assigned we need to patch the refs.\n\t\tschemaProperties.type = {\n\t\t\ttype: 'string',\n\t\t\tdescription: nls.localize('JsonSchema.customizations.customizes.type', 'The task type to customize'),\n\t\t\tenum: [taskType.taskType]\n\t\t};\n\t\tif (taskType.required) {\n\t\t\tschema.required = taskType.required.slice();\n\t\t} else {\n\t\t\tschema.required = [];\n\t\t}\n\t\t// Customized tasks require that the task type be set.\n\t\tschema.required.push('type');\n\t\tif (taskType.properties) {\n\t\t\tfor (let key of Object.keys(taskType.properties)) {\n\t\t\t\tlet property = taskType.properties[key];\n\t\t\t\tschemaProperties[key] = Objects.deepClone(property);\n\t\t\t}\n\t\t}\n\t\tfixReferences(schema);\n\t\ttaskDefinitions.push(schema);\n\t}\n}\n\nlet customize = Objects.deepClone(taskConfiguration);\ncustomize.properties!.customize = {\n\ttype: 'string',\n\tdeprecationMessage: nls.localize('JsonSchema.tasks.customize.deprecated', 'The customize property is deprecated. See the 1.14 release notes on how to migrate to the new task customization approach')\n};\nif (!customize.required) {\n\tcustomize.required = [];\n}\ncustomize.required.push('customize');\ntaskDefinitions.push(customize);\n\nlet definitions = Objects.deepClone(commonSchemaDefinitions);\nlet taskDescription: IJSONSchema = definitions.taskDescription;\ntaskDescription.required = ['label'];\nconst taskDescriptionProperties = taskDescription.properties!;\ntaskDescriptionProperties.label = Objects.deepClone(label);\ntaskDescriptionProperties.command = Objects.deepClone(command);\ntaskDescriptionProperties.args = Objects.deepClone(args);\ntaskDescriptionProperties.isShellCommand = Objects.deepClone(shellCommand);\ntaskDescriptionProperties.dependsOn = dependsOn;\ntaskDescriptionProperties.dependsOrder = dependsOrder;\ntaskDescriptionProperties.identifier = Objects.deepClone(identifier);\ntaskDescriptionProperties.type = Objects.deepClone(taskType);\ntaskDescriptionProperties.presentation = Objects.deepClone(presentation);\ntaskDescriptionProperties.terminal = terminal;\ntaskDescriptionProperties.group = Objects.deepClone(group);\ntaskDescriptionProperties.runOptions = Objects.deepClone(runOptions);\ntaskDescriptionProperties.detail = detail;\ntaskDescriptionProperties.taskName.deprecationMessage = nls.localize(\n\t'JsonSchema.tasks.taskName.deprecated',\n\t'The task\\'s name property is deprecated. Use the label property instead.'\n);\n// Clone the taskDescription for process task before setting a default to prevent two defaults #115281\nconst processTask = Objects.deepClone(taskDescription);\ntaskDescription.default = {\n\tlabel: 'My Task',\n\ttype: 'shell',\n\tcommand: 'echo Hello',\n\tproblemMatcher: []\n};\ndefinitions.showOutputType.deprecationMessage = nls.localize(\n\t'JsonSchema.tasks.showOutput.deprecated',\n\t'The property showOutput is deprecated. Use the reveal property inside the presentation property instead. See also the 1.14 release notes.'\n);\ntaskDescriptionProperties.echoCommand.deprecationMessage = nls.localize(\n\t'JsonSchema.tasks.echoCommand.deprecated',\n\t'The property echoCommand is deprecated. Use the echo property inside the presentation property instead. See also the 1.14 release notes.'\n);\ntaskDescriptionProperties.suppressTaskName.deprecationMessage = nls.localize(\n\t'JsonSchema.tasks.suppressTaskName.deprecated',\n\t'The property suppressTaskName is deprecated. Inline the command with its arguments into the task instead. See also the 1.14 release notes.'\n);\ntaskDescriptionProperties.isBuildCommand.deprecationMessage = nls.localize(\n\t'JsonSchema.tasks.isBuildCommand.deprecated',\n\t'The property isBuildCommand is deprecated. Use the group property instead. See also the 1.14 release notes.'\n);\ntaskDescriptionProperties.isTestCommand.deprecationMessage = nls.localize(\n\t'JsonSchema.tasks.isTestCommand.deprecated',\n\t'The property isTestCommand is deprecated. Use the group property instead. See also the 1.14 release notes.'\n);\n\n// Process tasks are almost identical schema-wise to shell tasks, but they are required to have a command\nprocessTask.properties!.type = {\n\ttype: 'string',\n\tenum: ['process'],\n\tdefault: 'process',\n\tdescription: nls.localize('JsonSchema.tasks.type', 'Defines whether the task is run as a process or as a command inside a shell.')\n};\nprocessTask.required!.push('command');\nprocessTask.required!.push('type');\n\ntaskDefinitions.push(processTask);\n\ntaskDefinitions.push({\n\t$ref: '#/definitions/taskDescription'\n} as IJSONSchema);\n\nconst definitionsTaskRunnerConfigurationProperties = definitions.taskRunnerConfiguration.properties!;\nlet tasks = definitionsTaskRunnerConfigurationProperties.tasks;\ntasks.items = {\n\toneOf: taskDefinitions\n};\n\ndefinitionsTaskRunnerConfigurationProperties.inputs = inputsSchema.definitions!.inputs;\n\ndefinitions.commandConfiguration.properties!.isShellCommand = Objects.deepClone(shellCommand);\ndefinitions.commandConfiguration.properties!.args = Objects.deepClone(args);\ndefinitions.options.properties!.shell = {\n\t$ref: '#/definitions/shellConfiguration'\n};\n\ndefinitionsTaskRunnerConfigurationProperties.isShellCommand = Objects.deepClone(shellCommand);\ndefinitionsTaskRunnerConfigurationProperties.type = Objects.deepClone(taskType);\ndefinitionsTaskRunnerConfigurationProperties.group = Objects.deepClone(group);\ndefinitionsTaskRunnerConfigurationProperties.presentation = Objects.deepClone(presentation);\ndefinitionsTaskRunnerConfigurationProperties.suppressTaskName.deprecationMessage = nls.localize(\n\t'JsonSchema.tasks.suppressTaskName.deprecated',\n\t'The property suppressTaskName is deprecated. Inline the command with its arguments into the task instead. See also the 1.14 release notes.'\n);\ndefinitionsTaskRunnerConfigurationProperties.taskSelector.deprecationMessage = nls.localize(\n\t'JsonSchema.tasks.taskSelector.deprecated',\n\t'The property taskSelector is deprecated. Inline the command with its arguments into the task instead. See also the 1.14 release notes.'\n);\n\nlet osSpecificTaskRunnerConfiguration = Objects.deepClone(definitions.taskRunnerConfiguration);\ndelete osSpecificTaskRunnerConfiguration.properties!.tasks;\nosSpecificTaskRunnerConfiguration.additionalProperties = false;\ndefinitions.osSpecificTaskRunnerConfiguration = osSpecificTaskRunnerConfiguration;\ndefinitionsTaskRunnerConfigurationProperties.version = Objects.deepClone(version);\n\nconst schema: IJSONSchema = {\n\toneOf: [\n\t\t{\n\t\t\t'allOf': [\n\t\t\t\t{\n\t\t\t\t\ttype: 'object',\n\t\t\t\t\trequired: ['version'],\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\tversion: Objects.deepClone(version),\n\t\t\t\t\t\twindows: {\n\t\t\t\t\t\t\t'$ref': '#/definitions/osSpecificTaskRunnerConfiguration',\n\t\t\t\t\t\t\t'description': nls.localize('JsonSchema.windows', 'Windows specific command configuration')\n\t\t\t\t\t\t},\n\t\t\t\t\t\tosx: {\n\t\t\t\t\t\t\t'$ref': '#/definitions/osSpecificTaskRunnerConfiguration',\n\t\t\t\t\t\t\t'description': nls.localize('JsonSchema.mac', 'Mac specific command configuration')\n\t\t\t\t\t\t},\n\t\t\t\t\t\tlinux: {\n\t\t\t\t\t\t\t'$ref': '#/definitions/osSpecificTaskRunnerConfiguration',\n\t\t\t\t\t\t\t'description': nls.localize('JsonSchema.linux', 'Linux specific command configuration')\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$ref: '#/definitions/taskRunnerConfiguration'\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n};\n\nschema.definitions = definitions;\n\nfunction deprecatedVariableMessage(schemaMap: IJSONSchemaMap, property: string) {\n\tconst mapAtProperty = schemaMap[property].properties!;\n\tif (mapAtProperty) {\n\t\tObject.keys(mapAtProperty).forEach(name => {\n\t\t\tdeprecatedVariableMessage(mapAtProperty, name);\n\t\t});\n\t} else {\n\t\tConfigurationResolverUtils.applyDeprecatedVariableMessage(schemaMap[property]);\n\t}\n}\n\nObject.getOwnPropertyNames(definitions).forEach(key => {\n\tlet newKey = key + '2';\n\tdefinitions[newKey] = definitions[key];\n\tdelete definitions[key];\n\tdeprecatedVariableMessage(definitions, newKey);\n});\nfixReferences(schema);\n\nexport function updateProblemMatchers() {\n\ttry {\n\t\tlet matcherIds = ProblemMatcherRegistry.keys().map(key => '$' + key);\n\t\tdefinitions.problemMatcherType2.oneOf![0].enum = matcherIds;\n\t\t(definitions.problemMatcherType2.oneOf![2].items as IJSONSchema).anyOf![0].enum = matcherIds;\n\t} catch (err) {\n\t\tconsole.log('Installing problem matcher ids failed');\n\t}\n}\n\nProblemMatcherRegistry.onReady().then(() => {\n\tupdateProblemMatchers();\n});\n\nexport default schema;\n"]}