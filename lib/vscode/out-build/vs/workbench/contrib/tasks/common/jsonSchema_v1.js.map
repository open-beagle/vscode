{"version":3,"sources":["vs/workbench/contrib/tasks/common/jsonSchema_v1.ts"],"names":[],"mappings":"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","file":"jsonSchema_v1.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport * as Objects from 'vs/base/common/objects';\nimport { IJSONSchema } from 'vs/base/common/jsonSchema';\n\nimport { ProblemMatcherRegistry } from 'vs/workbench/contrib/tasks/common/problemMatcher';\n\nimport commonSchema from './jsonSchemaCommon';\n\nconst schema: IJSONSchema = {\n\toneOf: [\n\t\t{\n\t\t\tallOf: [\n\t\t\t\t{\n\t\t\t\t\ttype: 'object',\n\t\t\t\t\trequired: ['version'],\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\tversion: {\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\tenum: ['0.1.0'],\n\t\t\t\t\t\t\tdeprecationMessage: nls.localize('JsonSchema.version.deprecated', 'Task version 0.1.0 is deprecated. Please use 2.0.0'),\n\t\t\t\t\t\t\tdescription: nls.localize('JsonSchema.version', 'The config\\'s version number')\n\t\t\t\t\t\t},\n\t\t\t\t\t\t_runner: {\n\t\t\t\t\t\t\tdeprecationMessage: nls.localize('JsonSchema._runner', 'The runner has graduated. Use the official runner property')\n\t\t\t\t\t\t},\n\t\t\t\t\t\trunner: {\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\tenum: ['process', 'terminal'],\n\t\t\t\t\t\t\tdefault: 'process',\n\t\t\t\t\t\t\tdescription: nls.localize('JsonSchema.runner', 'Defines whether the task is executed as a process and the output is shown in the output window or inside the terminal.')\n\t\t\t\t\t\t},\n\t\t\t\t\t\twindows: {\n\t\t\t\t\t\t\t$ref: '#/definitions/taskRunnerConfiguration',\n\t\t\t\t\t\t\tdescription: nls.localize('JsonSchema.windows', 'Windows specific command configuration')\n\t\t\t\t\t\t},\n\t\t\t\t\t\tosx: {\n\t\t\t\t\t\t\t$ref: '#/definitions/taskRunnerConfiguration',\n\t\t\t\t\t\t\tdescription: nls.localize('JsonSchema.mac', 'Mac specific command configuration')\n\t\t\t\t\t\t},\n\t\t\t\t\t\tlinux: {\n\t\t\t\t\t\t\t$ref: '#/definitions/taskRunnerConfiguration',\n\t\t\t\t\t\t\tdescription: nls.localize('JsonSchema.linux', 'Linux specific command configuration')\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$ref: '#/definitions/taskRunnerConfiguration'\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n};\n\nconst shellCommand: IJSONSchema = {\n\ttype: 'boolean',\n\tdefault: true,\n\tdescription: nls.localize('JsonSchema.shell', 'Specifies whether the command is a shell command or an external program. Defaults to false if omitted.')\n};\n\nschema.definitions = Objects.deepClone(commonSchema.definitions);\nlet definitions = schema.definitions!;\ndefinitions['commandConfiguration']['properties']!['isShellCommand'] = Objects.deepClone(shellCommand);\ndefinitions['taskDescription']['properties']!['isShellCommand'] = Objects.deepClone(shellCommand);\ndefinitions['taskRunnerConfiguration']['properties']!['isShellCommand'] = Objects.deepClone(shellCommand);\n\nObject.getOwnPropertyNames(definitions).forEach(key => {\n\tlet newKey = key + '1';\n\tdefinitions[newKey] = definitions[key];\n\tdelete definitions[key];\n});\n\nfunction fixReferences(literal: any) {\n\tif (Array.isArray(literal)) {\n\t\tliteral.forEach(fixReferences);\n\t} else if (typeof literal === 'object') {\n\t\tif (literal['$ref']) {\n\t\t\tliteral['$ref'] = literal['$ref'] + '1';\n\t\t}\n\t\tObject.getOwnPropertyNames(literal).forEach(property => {\n\t\t\tlet value = literal[property];\n\t\t\tif (Array.isArray(value) || typeof value === 'object') {\n\t\t\t\tfixReferences(value);\n\t\t\t}\n\t\t});\n\t}\n}\nfixReferences(schema);\n\nProblemMatcherRegistry.onReady().then(() => {\n\ttry {\n\t\tlet matcherIds = ProblemMatcherRegistry.keys().map(key => '$' + key);\n\t\tdefinitions.problemMatcherType1.oneOf![0].enum = matcherIds;\n\t\t(definitions.problemMatcherType1.oneOf![2].items as IJSONSchema).anyOf![1].enum = matcherIds;\n\t} catch (err) {\n\t\tconsole.log('Installing problem matcher ids failed');\n\t}\n});\n\nexport default schema;\n"]}