{"version":3,"sources":["vs/workbench/contrib/tasks/browser/taskQuickPick.ts"],"names":[],"mappings":"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","file":"taskQuickPick.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport * as Objects from 'vs/base/common/objects';\nimport { Task, ContributedTask, CustomTask, ConfiguringTask, TaskSorter, KeyedTaskIdentifier } from 'vs/workbench/contrib/tasks/common/tasks';\nimport { IWorkspace, IWorkspaceFolder } from 'vs/platform/workspace/common/workspace';\nimport * as Types from 'vs/base/common/types';\nimport { ITaskService, WorkspaceFolderTaskResult } from 'vs/workbench/contrib/tasks/common/taskService';\nimport { IQuickPickItem, QuickPickInput, IQuickPick, IQuickInputButton } from 'vs/base/parts/quickinput/common/quickInput';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IQuickInputService } from 'vs/platform/quickinput/common/quickInput';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { Event } from 'vs/base/common/event';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { Codicon } from 'vs/base/common/codicons';\nimport { ThemeIcon } from 'vs/platform/theme/common/themeService';\nimport { registerIcon } from 'vs/platform/theme/common/iconRegistry';\n\nexport const QUICKOPEN_DETAIL_CONFIG = 'task.quickOpen.detail';\nexport const QUICKOPEN_SKIP_CONFIG = 'task.quickOpen.skip';\n\nexport function isWorkspaceFolder(folder: IWorkspace | IWorkspaceFolder): folder is IWorkspaceFolder {\n\treturn 'uri' in folder;\n}\n\nexport interface TaskQuickPickEntry extends IQuickPickItem {\n\ttask: Task | undefined | null;\n}\nexport interface TaskTwoLevelQuickPickEntry extends IQuickPickItem {\n\ttask: Task | ConfiguringTask | string | undefined | null;\n}\n\nconst SHOW_ALL: string = nls.localize('taskQuickPick.showAll', \"Show All Tasks...\");\n\nexport const configureTaskIcon = registerIcon('tasks-list-configure', Codicon.gear, nls.localize('configureTaskIcon', 'Configuration icon in the tasks selection list.'));\nconst removeTaskIcon = registerIcon('tasks-remove', Codicon.close, nls.localize('removeTaskIcon', 'Icon for remove in the tasks selection list.'));\n\nexport class TaskQuickPick extends Disposable {\n\tprivate sorter: TaskSorter;\n\tprivate topLevelEntries: QuickPickInput<TaskTwoLevelQuickPickEntry>[] | undefined;\n\tconstructor(\n\t\tprivate taskService: ITaskService,\n\t\tprivate configurationService: IConfigurationService,\n\t\tprivate quickInputService: IQuickInputService,\n\t\tprivate notificationService: INotificationService) {\n\t\tsuper();\n\t\tthis.sorter = this.taskService.createSorter();\n\t}\n\n\tprivate showDetail(): boolean {\n\t\treturn this.configurationService.getValue<boolean>(QUICKOPEN_DETAIL_CONFIG);\n\t}\n\n\tprivate guessTaskLabel(task: Task | ConfiguringTask): string {\n\t\tif (task._label) {\n\t\t\treturn task._label;\n\t\t}\n\t\tif (ConfiguringTask.is(task)) {\n\t\t\tlet label: string = task.configures.type;\n\t\t\tconst configures: Partial<KeyedTaskIdentifier> = Objects.deepClone(task.configures);\n\t\t\tdelete configures['_key'];\n\t\t\tdelete configures['type'];\n\t\t\tObject.keys(configures).forEach(key => label += `: ${configures[key]}`);\n\t\t\treturn label;\n\t\t}\n\t\treturn '';\n\t}\n\n\tprivate createTaskEntry(task: Task | ConfiguringTask, extraButtons: IQuickInputButton[] = []): TaskTwoLevelQuickPickEntry {\n\t\tconst entry: TaskTwoLevelQuickPickEntry = { label: this.guessTaskLabel(task), description: this.taskService.getTaskDescription(task), task, detail: this.showDetail() ? task.configurationProperties.detail : undefined };\n\t\tentry.buttons = [{ iconClass: ThemeIcon.asClassName(configureTaskIcon), tooltip: nls.localize('configureTask', \"Configure Task\") }, ...extraButtons];\n\t\treturn entry;\n\t}\n\n\tprivate createEntriesForGroup(entries: QuickPickInput<TaskTwoLevelQuickPickEntry>[], tasks: (Task | ConfiguringTask)[],\n\t\tgroupLabel: string, extraButtons: IQuickInputButton[] = []) {\n\t\tentries.push({ type: 'separator', label: groupLabel });\n\t\ttasks.forEach(task => {\n\t\t\tentries.push(this.createTaskEntry(task, extraButtons));\n\t\t});\n\t}\n\n\tprivate createTypeEntries(entries: QuickPickInput<TaskTwoLevelQuickPickEntry>[], types: string[]) {\n\t\tentries.push({ type: 'separator', label: nls.localize('contributedTasks', \"contributed\") });\n\t\ttypes.forEach(type => {\n\t\t\tentries.push({ label: `$(folder) ${type}`, task: type, ariaLabel: nls.localize('taskType', \"All {0} tasks\", type) });\n\t\t});\n\t\tentries.push({ label: SHOW_ALL, task: SHOW_ALL, alwaysShow: true });\n\t}\n\n\tprivate handleFolderTaskResult(result: Map<string, WorkspaceFolderTaskResult>): (Task | ConfiguringTask)[] {\n\t\tlet tasks: (Task | ConfiguringTask)[] = [];\n\t\tArray.from(result).forEach(([key, folderTasks]) => {\n\t\t\tif (folderTasks.set) {\n\t\t\t\ttasks.push(...folderTasks.set.tasks);\n\t\t\t}\n\t\t\tif (folderTasks.configurations) {\n\t\t\t\tfor (const configuration in folderTasks.configurations.byIdentifier) {\n\t\t\t\t\ttasks.push(folderTasks.configurations.byIdentifier[configuration]);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn tasks;\n\t}\n\n\tprivate dedupeConfiguredAndRecent(recentTasks: (Task | ConfiguringTask)[], configuredTasks: (Task | ConfiguringTask)[]): { configuredTasks: (Task | ConfiguringTask)[], recentTasks: (Task | ConfiguringTask)[] } {\n\t\tlet dedupedConfiguredTasks: (Task | ConfiguringTask)[] = [];\n\t\tconst foundRecentTasks: boolean[] = Array(recentTasks.length).fill(false);\n\t\tfor (let j = 0; j < configuredTasks.length; j++) {\n\t\t\tconst workspaceFolder = configuredTasks[j].getWorkspaceFolder()?.uri.toString();\n\t\t\tconst definition = configuredTasks[j].getDefinition()?._key;\n\t\t\tconst type = configuredTasks[j].type;\n\t\t\tconst label = configuredTasks[j]._label;\n\t\t\tconst recentKey = configuredTasks[j].getRecentlyUsedKey();\n\t\t\tconst findIndex = recentTasks.findIndex((value) => {\n\t\t\t\treturn (workspaceFolder && definition && value.getWorkspaceFolder()?.uri.toString() === workspaceFolder\n\t\t\t\t\t&& ((value.getDefinition()?._key === definition) || (value.type === type && value._label === label)))\n\t\t\t\t\t|| (recentKey && value.getRecentlyUsedKey() === recentKey);\n\t\t\t});\n\t\t\tif (findIndex === -1) {\n\t\t\t\tdedupedConfiguredTasks.push(configuredTasks[j]);\n\t\t\t} else {\n\t\t\t\trecentTasks[findIndex] = configuredTasks[j];\n\t\t\t\tfoundRecentTasks[findIndex] = true;\n\t\t\t}\n\t\t}\n\t\tdedupedConfiguredTasks = dedupedConfiguredTasks.sort((a, b) => this.sorter.compare(a, b));\n\t\tconst prunedRecentTasks: (Task | ConfiguringTask)[] = [];\n\t\tfor (let i = 0; i < recentTasks.length; i++) {\n\t\t\tif (foundRecentTasks[i] || ConfiguringTask.is(recentTasks[i])) {\n\t\t\t\tprunedRecentTasks.push(recentTasks[i]);\n\t\t\t}\n\t\t}\n\t\treturn { configuredTasks: dedupedConfiguredTasks, recentTasks: prunedRecentTasks };\n\t}\n\n\tpublic async getTopLevelEntries(defaultEntry?: TaskQuickPickEntry): Promise<{ entries: QuickPickInput<TaskTwoLevelQuickPickEntry>[], isSingleConfigured?: Task | ConfiguringTask }> {\n\t\tif (this.topLevelEntries !== undefined) {\n\t\t\treturn { entries: this.topLevelEntries };\n\t\t}\n\t\tlet recentTasks: (Task | ConfiguringTask)[] = (await this.taskService.readRecentTasks()).reverse();\n\t\tconst configuredTasks: (Task | ConfiguringTask)[] = this.handleFolderTaskResult(await this.taskService.getWorkspaceTasks());\n\t\tconst extensionTaskTypes = this.taskService.taskTypes();\n\t\tthis.topLevelEntries = [];\n\t\t// Dedupe will update recent tasks if they've changed in tasks.json.\n\t\tconst dedupeAndPrune = this.dedupeConfiguredAndRecent(recentTasks, configuredTasks);\n\t\tlet dedupedConfiguredTasks: (Task | ConfiguringTask)[] = dedupeAndPrune.configuredTasks;\n\t\trecentTasks = dedupeAndPrune.recentTasks;\n\t\tif (recentTasks.length > 0) {\n\t\t\tconst removeRecentButton: IQuickInputButton = {\n\t\t\t\ticonClass: ThemeIcon.asClassName(removeTaskIcon),\n\t\t\t\ttooltip: nls.localize('removeRecent', 'Remove Recently Used Task')\n\t\t\t};\n\t\t\tthis.createEntriesForGroup(this.topLevelEntries, recentTasks, nls.localize('recentlyUsed', 'recently used'), [removeRecentButton]);\n\t\t}\n\t\tif (configuredTasks.length > 0) {\n\t\t\tif (dedupedConfiguredTasks.length > 0) {\n\t\t\t\tthis.createEntriesForGroup(this.topLevelEntries, dedupedConfiguredTasks, nls.localize('configured', 'configured'));\n\t\t\t}\n\t\t}\n\n\t\tif (defaultEntry && (configuredTasks.length === 0)) {\n\t\t\tthis.topLevelEntries.push({ type: 'separator', label: nls.localize('configured', 'configured') });\n\t\t\tthis.topLevelEntries.push(defaultEntry);\n\t\t}\n\n\t\tif (extensionTaskTypes.length > 0) {\n\t\t\tthis.createTypeEntries(this.topLevelEntries, extensionTaskTypes);\n\t\t}\n\t\treturn { entries: this.topLevelEntries, isSingleConfigured: configuredTasks.length === 1 ? configuredTasks[0] : undefined };\n\t}\n\n\tpublic async show(placeHolder: string, defaultEntry?: TaskQuickPickEntry, startAtType?: string): Promise<Task | undefined | null> {\n\t\tconst picker: IQuickPick<TaskTwoLevelQuickPickEntry> = this.quickInputService.createQuickPick();\n\t\tpicker.placeholder = placeHolder;\n\t\tpicker.matchOnDescription = true;\n\t\tpicker.ignoreFocusOut = false;\n\t\tpicker.show();\n\n\t\tpicker.onDidTriggerItemButton(async (context) => {\n\t\t\tlet task = context.item.task;\n\t\t\tif (context.button.iconClass === ThemeIcon.asClassName(removeTaskIcon)) {\n\t\t\t\tconst key = (task && !Types.isString(task)) ? task.getRecentlyUsedKey() : undefined;\n\t\t\t\tif (key) {\n\t\t\t\t\tthis.taskService.removeRecentlyUsedTask(key);\n\t\t\t\t}\n\t\t\t\tconst indexToRemove = picker.items.indexOf(context.item);\n\t\t\t\tif (indexToRemove >= 0) {\n\t\t\t\t\tpicker.items = [...picker.items.slice(0, indexToRemove), ...picker.items.slice(indexToRemove + 1)];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.quickInputService.cancel();\n\t\t\t\tif (ContributedTask.is(task)) {\n\t\t\t\t\tthis.taskService.customize(task, undefined, true);\n\t\t\t\t} else if (CustomTask.is(task) || ConfiguringTask.is(task)) {\n\t\t\t\t\tif (!(await this.taskService.openConfig(task))) {\n\t\t\t\t\t\tthis.taskService.customize(task, undefined, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tlet firstLevelTask: Task | ConfiguringTask | string | undefined | null = startAtType;\n\t\tif (!firstLevelTask) {\n\t\t\t// First show recent tasks configured tasks. Other tasks will be available at a second level\n\t\t\tconst topLevelEntriesResult = await this.getTopLevelEntries(defaultEntry);\n\t\t\tif (topLevelEntriesResult.isSingleConfigured && this.configurationService.getValue<boolean>(QUICKOPEN_SKIP_CONFIG)) {\n\t\t\t\tpicker.dispose();\n\t\t\t\treturn this.toTask(topLevelEntriesResult.isSingleConfigured);\n\t\t\t}\n\t\t\tconst taskQuickPickEntries: QuickPickInput<TaskTwoLevelQuickPickEntry>[] = topLevelEntriesResult.entries;\n\t\t\tfirstLevelTask = await this.doPickerFirstLevel(picker, taskQuickPickEntries);\n\t\t}\n\t\tdo {\n\t\t\tif (Types.isString(firstLevelTask)) {\n\t\t\t\t// Proceed to second level of quick pick\n\t\t\t\tconst selectedEntry = await this.doPickerSecondLevel(picker, firstLevelTask);\n\t\t\t\tif (selectedEntry && selectedEntry.task === null) {\n\t\t\t\t\t// The user has chosen to go back to the first level\n\t\t\t\t\tfirstLevelTask = await this.doPickerFirstLevel(picker, (await this.getTopLevelEntries(defaultEntry)).entries);\n\t\t\t\t} else {\n\t\t\t\t\tpicker.dispose();\n\t\t\t\t\treturn (selectedEntry?.task && !Types.isString(selectedEntry?.task)) ? this.toTask(selectedEntry?.task) : undefined;\n\t\t\t\t}\n\t\t\t} else if (firstLevelTask) {\n\t\t\t\tpicker.dispose();\n\t\t\t\treturn this.toTask(firstLevelTask);\n\t\t\t} else {\n\t\t\t\tpicker.dispose();\n\t\t\t\treturn firstLevelTask;\n\t\t\t}\n\t\t} while (1);\n\t\treturn;\n\t}\n\n\tprivate async doPickerFirstLevel(picker: IQuickPick<TaskTwoLevelQuickPickEntry>, taskQuickPickEntries: QuickPickInput<TaskTwoLevelQuickPickEntry>[]): Promise<Task | ConfiguringTask | string | null | undefined> {\n\t\tpicker.items = taskQuickPickEntries;\n\t\tconst firstLevelPickerResult = await new Promise<TaskTwoLevelQuickPickEntry | undefined | null>(resolve => {\n\t\t\tEvent.once(picker.onDidAccept)(async () => {\n\t\t\t\tresolve(picker.selectedItems ? picker.selectedItems[0] : undefined);\n\t\t\t});\n\t\t});\n\t\treturn firstLevelPickerResult?.task;\n\t}\n\n\tprivate async doPickerSecondLevel(picker: IQuickPick<TaskTwoLevelQuickPickEntry>, type: string) {\n\t\tpicker.busy = true;\n\t\tif (type === SHOW_ALL) {\n\t\t\tpicker.items = (await this.taskService.tasks()).sort((a, b) => this.sorter.compare(a, b)).map(task => this.createTaskEntry(task));\n\t\t} else {\n\t\t\tpicker.value = '';\n\t\t\tpicker.items = await this.getEntriesForProvider(type);\n\t\t}\n\t\tpicker.busy = false;\n\t\tconst secondLevelPickerResult = await new Promise<TaskTwoLevelQuickPickEntry | undefined | null>(resolve => {\n\t\t\tEvent.once(picker.onDidAccept)(async () => {\n\t\t\t\tresolve(picker.selectedItems ? picker.selectedItems[0] : undefined);\n\t\t\t});\n\t\t});\n\n\t\treturn secondLevelPickerResult;\n\t}\n\n\tprivate async getEntriesForProvider(type: string): Promise<QuickPickInput<TaskTwoLevelQuickPickEntry>[]> {\n\t\tconst tasks = (await this.taskService.tasks({ type })).sort((a, b) => this.sorter.compare(a, b));\n\t\tlet taskQuickPickEntries: QuickPickInput<TaskTwoLevelQuickPickEntry>[];\n\t\tif (tasks.length > 0) {\n\t\t\ttaskQuickPickEntries = tasks.map(task => this.createTaskEntry(task));\n\t\t\ttaskQuickPickEntries.push({\n\t\t\t\ttype: 'separator'\n\t\t\t}, {\n\t\t\t\tlabel: nls.localize('TaskQuickPick.goBack', 'Go back ↩'),\n\t\t\t\ttask: null,\n\t\t\t\talwaysShow: true\n\t\t\t});\n\t\t} else {\n\t\t\ttaskQuickPickEntries = [{\n\t\t\t\tlabel: nls.localize('TaskQuickPick.noTasksForType', 'No {0} tasks found. Go back ↩', type),\n\t\t\t\ttask: null,\n\t\t\t\talwaysShow: true\n\t\t\t}];\n\t\t}\n\t\treturn taskQuickPickEntries;\n\t}\n\n\tprivate async toTask(task: Task | ConfiguringTask): Promise<Task | undefined> {\n\t\tif (!ConfiguringTask.is(task)) {\n\t\t\treturn task;\n\t\t}\n\n\t\tconst resolvedTask = await this.taskService.tryResolveTask(task);\n\n\t\tif (!resolvedTask) {\n\t\t\tthis.notificationService.error(nls.localize('noProviderForTask', \"There is no task provider registered for tasks of type \\\"{0}\\\".\", task.type));\n\t\t}\n\t\treturn resolvedTask;\n\t}\n\n\tstatic async show(taskService: ITaskService, configurationService: IConfigurationService, quickInputService: IQuickInputService, notificationService: INotificationService, placeHolder: string, defaultEntry?: TaskQuickPickEntry) {\n\t\tconst taskQuickPick = new TaskQuickPick(taskService, configurationService, quickInputService, notificationService);\n\t\treturn taskQuickPick.show(placeHolder, defaultEntry);\n\t}\n}\n"]}