{"version":3,"sources":["vs/workbench/contrib/tasks/browser/terminalTaskSystem.ts"],"names":[],"mappings":"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","file":"terminalTaskSystem.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as path from 'vs/base/common/path';\nimport * as nls from 'vs/nls';\nimport * as Objects from 'vs/base/common/objects';\nimport * as Types from 'vs/base/common/types';\nimport * as Platform from 'vs/base/common/platform';\nimport * as Async from 'vs/base/common/async';\nimport * as resources from 'vs/base/common/resources';\nimport { IStringDictionary, values } from 'vs/base/common/collections';\nimport { LinkedMap, Touch } from 'vs/base/common/map';\nimport Severity from 'vs/base/common/severity';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { isUNC } from 'vs/base/common/extpath';\n\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { IMarkerService, MarkerSeverity } from 'vs/platform/markers/common/markers';\nimport { IWorkspaceContextService, WorkbenchState, IWorkspaceFolder } from 'vs/platform/workspace/common/workspace';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { ProblemMatcher, ProblemMatcherRegistry /*, ProblemPattern, getResource */ } from 'vs/workbench/contrib/tasks/common/problemMatcher';\nimport Constants from 'vs/workbench/contrib/markers/browser/constants';\n\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\n\nimport { IConfigurationResolverService } from 'vs/workbench/services/configurationResolver/common/configurationResolver';\nimport { ITerminalProfileResolverService, TERMINAL_VIEW_ID } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { ITerminalService, ITerminalInstance } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { IOutputService } from 'vs/workbench/contrib/output/common/output';\nimport { StartStopProblemCollector, WatchingProblemCollector, ProblemCollectorEventKind, ProblemHandlingStrategy } from 'vs/workbench/contrib/tasks/common/problemCollectors';\nimport {\n\tTask, CustomTask, ContributedTask, RevealKind, CommandOptions, ShellConfiguration, RuntimeType, PanelKind,\n\tTaskEvent, TaskEventKind, ShellQuotingOptions, ShellQuoting, CommandString, CommandConfiguration, ExtensionTaskSource, TaskScope, RevealProblemKind, DependsOrder, TaskSourceKind, InMemoryTask\n} from 'vs/workbench/contrib/tasks/common/tasks';\nimport {\n\tITaskSystem, ITaskSummary, ITaskExecuteResult, TaskExecuteKind, TaskError, TaskErrors, ITaskResolver,\n\tTelemetryEvent, Triggers, TaskTerminateResponse, TaskSystemInfoResolver, TaskSystemInfo, ResolveSet, ResolvedVariables\n} from 'vs/workbench/contrib/tasks/common/taskSystem';\nimport { URI } from 'vs/base/common/uri';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { Schemas } from 'vs/base/common/network';\nimport { IPanelService } from 'vs/workbench/services/panel/common/panelService';\nimport { IPathService } from 'vs/workbench/services/path/common/pathService';\nimport { IViewsService, IViewDescriptorService, ViewContainerLocation } from 'vs/workbench/common/views';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IShellLaunchConfig } from 'vs/platform/terminal/common/terminal';\nimport { TerminalProcessExtHostProxy } from 'vs/workbench/contrib/terminal/browser/terminalProcessExtHostProxy';\n\ninterface TerminalData {\n\tterminal: ITerminalInstance;\n\tlastTask: string;\n\tgroup?: string;\n}\n\ninterface ActiveTerminalData {\n\tterminal: ITerminalInstance;\n\ttask: Task;\n\tpromise: Promise<ITaskSummary>;\n}\n\nclass InstanceManager {\n\tprivate _currentInstances: number = 0;\n\tprivate _counter: number = 0;\n\n\taddInstance() {\n\t\tthis._currentInstances++;\n\t\tthis._counter++;\n\t}\n\tremoveInstance() {\n\t\tthis._currentInstances--;\n\t}\n\tget instances() {\n\t\treturn this._currentInstances;\n\t}\n\tget counter() {\n\t\treturn this._counter;\n\t}\n}\n\nclass VariableResolver {\n\tprivate static regex = /\\$\\{(.*?)\\}/g;\n\tconstructor(public workspaceFolder: IWorkspaceFolder | undefined, public taskSystemInfo: TaskSystemInfo | undefined, public readonly values: Map<string, string>, private _service: IConfigurationResolverService | undefined) {\n\t}\n\tasync resolve(value: string): Promise<string> {\n\t\tconst replacers: Promise<string>[] = [];\n\t\tvalue.replace(VariableResolver.regex, (match, ...args) => {\n\t\t\treplacers.push(this.replacer(match, args));\n\t\t\treturn match;\n\t\t});\n\t\tconst resolvedReplacers = await Promise.all(replacers);\n\t\treturn value.replace(VariableResolver.regex, () => resolvedReplacers.shift()!);\n\n\t}\n\n\tprivate async replacer(match: string, args: string[]): Promise<string> {\n\t\t// Strip out the ${} because the map contains them variables without those characters.\n\t\tlet result = this.values.get(match.substring(2, match.length - 1));\n\t\tif ((result !== undefined) && (result !== null)) {\n\t\t\treturn result;\n\t\t}\n\t\tif (this._service) {\n\t\t\treturn this._service.resolveAsync(this.workspaceFolder, match);\n\t\t}\n\t\treturn match;\n\t}\n}\n\nexport class VerifiedTask {\n\treadonly task: Task;\n\treadonly resolver: ITaskResolver;\n\treadonly trigger: string;\n\tresolvedVariables?: ResolvedVariables;\n\tsystemInfo?: TaskSystemInfo;\n\tworkspaceFolder?: IWorkspaceFolder;\n\tshellLaunchConfig?: IShellLaunchConfig;\n\n\tconstructor(task: Task, resolver: ITaskResolver, trigger: string) {\n\t\tthis.task = task;\n\t\tthis.resolver = resolver;\n\t\tthis.trigger = trigger;\n\t}\n\n\tpublic verify(): boolean {\n\t\tlet verified = false;\n\t\tif (this.trigger && this.resolvedVariables && this.workspaceFolder && (this.shellLaunchConfig !== undefined)) {\n\t\t\tverified = true;\n\t\t}\n\t\treturn verified;\n\t}\n\n\tpublic getVerifiedTask(): { task: Task, resolver: ITaskResolver, trigger: string, resolvedVariables: ResolvedVariables, systemInfo: TaskSystemInfo, workspaceFolder: IWorkspaceFolder, shellLaunchConfig: IShellLaunchConfig } {\n\t\tif (this.verify()) {\n\t\t\treturn { task: this.task, resolver: this.resolver, trigger: this.trigger, resolvedVariables: this.resolvedVariables!, systemInfo: this.systemInfo!, workspaceFolder: this.workspaceFolder!, shellLaunchConfig: this.shellLaunchConfig! };\n\t\t} else {\n\t\t\tthrow new Error('VerifiedTask was not checked. verify must be checked before getVerifiedTask.');\n\t\t}\n\t}\n}\n\nexport class TerminalTaskSystem implements ITaskSystem {\n\n\tpublic static TelemetryEventName: string = 'taskService';\n\n\tprivate static readonly ProcessVarName = '__process__';\n\n\tprivate static shellQuotes: IStringDictionary<ShellQuotingOptions> = {\n\t\t'cmd': {\n\t\t\tstrong: '\"'\n\t\t},\n\t\t'powershell': {\n\t\t\tescape: {\n\t\t\t\tescapeChar: '`',\n\t\t\t\tcharsToEscape: ' \"\\'()'\n\t\t\t},\n\t\t\tstrong: '\\'',\n\t\t\tweak: '\"'\n\t\t},\n\t\t'bash': {\n\t\t\tescape: {\n\t\t\t\tescapeChar: '\\\\',\n\t\t\t\tcharsToEscape: ' \"\\''\n\t\t\t},\n\t\t\tstrong: '\\'',\n\t\t\tweak: '\"'\n\t\t},\n\t\t'zsh': {\n\t\t\tescape: {\n\t\t\t\tescapeChar: '\\\\',\n\t\t\t\tcharsToEscape: ' \"\\''\n\t\t\t},\n\t\t\tstrong: '\\'',\n\t\t\tweak: '\"'\n\t\t}\n\t};\n\n\tprivate static osShellQuotes: IStringDictionary<ShellQuotingOptions> = {\n\t\t'Linux': TerminalTaskSystem.shellQuotes['bash'],\n\t\t'Mac': TerminalTaskSystem.shellQuotes['bash'],\n\t\t'Windows': TerminalTaskSystem.shellQuotes['powershell']\n\t};\n\n\tprivate activeTasks: IStringDictionary<ActiveTerminalData>;\n\tprivate instances: IStringDictionary<InstanceManager>;\n\tprivate busyTasks: IStringDictionary<Task>;\n\tprivate terminals: IStringDictionary<TerminalData>;\n\tprivate idleTaskTerminals: LinkedMap<string, string>;\n\tprivate sameTaskTerminals: IStringDictionary<string>;\n\tprivate taskSystemInfoResolver: TaskSystemInfoResolver;\n\tprivate lastTask: VerifiedTask | undefined;\n\t// Should always be set in run\n\tprivate currentTask!: VerifiedTask;\n\tprivate isRerun: boolean = false;\n\tprivate previousPanelId: string | undefined;\n\tprivate previousTerminalInstance: ITerminalInstance | undefined;\n\n\tprivate readonly _onDidStateChange: Emitter<TaskEvent>;\n\n\tconstructor(\n\t\tprivate terminalService: ITerminalService,\n\t\tprivate outputService: IOutputService,\n\t\tprivate panelService: IPanelService,\n\t\tprivate viewsService: IViewsService,\n\t\tprivate markerService: IMarkerService, private modelService: IModelService,\n\t\tprivate configurationResolverService: IConfigurationResolverService,\n\t\tprivate telemetryService: ITelemetryService,\n\t\tprivate contextService: IWorkspaceContextService,\n\t\tprivate environmentService: IWorkbenchEnvironmentService,\n\t\tprivate outputChannelId: string,\n\t\tprivate fileService: IFileService,\n\t\tprivate terminalProfileResolverService: ITerminalProfileResolverService,\n\t\tprivate pathService: IPathService,\n\t\tprivate viewDescriptorService: IViewDescriptorService,\n\t\tprivate logService: ILogService,\n\t\tprivate configurationService: IConfigurationService,\n\t\ttaskSystemInfoResolver: TaskSystemInfoResolver,\n\t) {\n\n\t\tthis.activeTasks = Object.create(null);\n\t\tthis.instances = Object.create(null);\n\t\tthis.busyTasks = Object.create(null);\n\t\tthis.terminals = Object.create(null);\n\t\tthis.idleTaskTerminals = new LinkedMap<string, string>();\n\t\tthis.sameTaskTerminals = Object.create(null);\n\n\t\tthis._onDidStateChange = new Emitter();\n\t\tthis.taskSystemInfoResolver = taskSystemInfoResolver;\n\t}\n\n\tpublic get onDidStateChange(): Event<TaskEvent> {\n\t\treturn this._onDidStateChange.event;\n\t}\n\n\tpublic log(value: string): void {\n\t\tthis.appendOutput(value + '\\n');\n\t}\n\n\tprotected showOutput(): void {\n\t\tthis.outputService.showChannel(this.outputChannelId, true);\n\t}\n\n\tpublic run(task: Task, resolver: ITaskResolver, trigger: string = Triggers.command): ITaskExecuteResult {\n\t\ttask = task.clone(); // A small amount of task state is stored in the task (instance) and tasks passed in to run may have that set already.\n\t\tconst recentTaskKey = task.getRecentlyUsedKey() ?? '';\n\t\tlet validInstance = task.runOptions && task.runOptions.instanceLimit && this.instances[recentTaskKey] && this.instances[recentTaskKey].instances < task.runOptions.instanceLimit;\n\t\tlet instance = this.instances[recentTaskKey] ? this.instances[recentTaskKey].instances : 0;\n\t\tthis.currentTask = new VerifiedTask(task, resolver, trigger);\n\t\tif (instance > 0) {\n\t\t\ttask.instance = this.instances[recentTaskKey].counter;\n\t\t}\n\t\tlet lastTaskInstance = this.getLastInstance(task);\n\t\tlet terminalData = lastTaskInstance ? this.activeTasks[lastTaskInstance.getMapKey()] : undefined;\n\t\tif (terminalData && terminalData.promise && !validInstance) {\n\t\t\tthis.lastTask = this.currentTask;\n\t\t\treturn { kind: TaskExecuteKind.Active, task: terminalData.task, active: { same: true, background: task.configurationProperties.isBackground! }, promise: terminalData.promise };\n\t\t}\n\n\t\ttry {\n\t\t\tconst executeResult = { kind: TaskExecuteKind.Started, task, started: {}, promise: this.executeTask(task, resolver, trigger, new Set()) };\n\t\t\texecuteResult.promise.then(summary => {\n\t\t\t\tthis.lastTask = this.currentTask;\n\t\t\t});\n\t\t\tif (InMemoryTask.is(task) || !this.isTaskEmpty(task)) {\n\t\t\t\tif (!this.instances[recentTaskKey]) {\n\t\t\t\t\tthis.instances[recentTaskKey] = new InstanceManager();\n\t\t\t\t}\n\t\t\t\tthis.instances[recentTaskKey].addInstance();\n\t\t\t}\n\t\t\treturn executeResult;\n\t\t} catch (error) {\n\t\t\tif (error instanceof TaskError) {\n\t\t\t\tthrow error;\n\t\t\t} else if (error instanceof Error) {\n\t\t\t\tthis.log(error.message);\n\t\t\t\tthrow new TaskError(Severity.Error, error.message, TaskErrors.UnknownError);\n\t\t\t} else {\n\t\t\t\tthis.log(error.toString());\n\t\t\t\tthrow new TaskError(Severity.Error, nls.localize('TerminalTaskSystem.unknownError', 'A unknown error has occurred while executing a task. See task output log for details.'), TaskErrors.UnknownError);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic rerun(): ITaskExecuteResult | undefined {\n\t\tif (this.lastTask && this.lastTask.verify()) {\n\t\t\tif ((this.lastTask.task.runOptions.reevaluateOnRerun !== undefined) && !this.lastTask.task.runOptions.reevaluateOnRerun) {\n\t\t\t\tthis.isRerun = true;\n\t\t\t}\n\t\t\tconst result = this.run(this.lastTask.task, this.lastTask.resolver);\n\t\t\tresult.promise.then(summary => {\n\t\t\t\tthis.isRerun = false;\n\t\t\t});\n\t\t\treturn result;\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tpublic isTaskVisible(task: Task): boolean {\n\t\tlet terminalData = this.activeTasks[task.getMapKey()];\n\t\tif (!terminalData) {\n\t\t\treturn false;\n\t\t}\n\t\tconst activeTerminalInstance = this.terminalService.getActiveInstance();\n\t\tconst isPanelShowingTerminal = !!this.viewsService.getActiveViewWithId(TERMINAL_VIEW_ID);\n\t\treturn isPanelShowingTerminal && (activeTerminalInstance?.instanceId === terminalData.terminal.instanceId);\n\t}\n\n\n\tpublic revealTask(task: Task): boolean {\n\t\tlet terminalData = this.activeTasks[task.getMapKey()];\n\t\tif (!terminalData) {\n\t\t\treturn false;\n\t\t}\n\t\tconst isTerminalInPanel: boolean = this.viewDescriptorService.getViewLocationById(TERMINAL_VIEW_ID) === ViewContainerLocation.Panel;\n\t\tif (isTerminalInPanel && this.isTaskVisible(task)) {\n\t\t\tif (this.previousPanelId) {\n\t\t\t\tif (this.previousTerminalInstance) {\n\t\t\t\t\tthis.terminalService.setActiveInstance(this.previousTerminalInstance);\n\t\t\t\t}\n\t\t\t\tthis.panelService.openPanel(this.previousPanelId);\n\t\t\t} else {\n\t\t\t\tthis.panelService.hideActivePanel();\n\t\t\t}\n\t\t\tthis.previousPanelId = undefined;\n\t\t\tthis.previousTerminalInstance = undefined;\n\t\t} else {\n\t\t\tif (isTerminalInPanel) {\n\t\t\t\tthis.previousPanelId = this.panelService.getActivePanel()?.getId();\n\t\t\t\tif (this.previousPanelId === TERMINAL_VIEW_ID) {\n\t\t\t\t\tthis.previousTerminalInstance = this.terminalService.getActiveInstance() ?? undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.terminalService.setActiveInstance(terminalData.terminal);\n\t\t\tif (CustomTask.is(task) || ContributedTask.is(task)) {\n\t\t\t\tthis.terminalService.showPanel(task.command.presentation!.focus);\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic isActive(): Promise<boolean> {\n\t\treturn Promise.resolve(this.isActiveSync());\n\t}\n\n\tpublic isActiveSync(): boolean {\n\t\treturn Object.keys(this.activeTasks).length > 0;\n\t}\n\n\tpublic canAutoTerminate(): boolean {\n\t\treturn Object.keys(this.activeTasks).every(key => !this.activeTasks[key].task.configurationProperties.promptOnClose);\n\t}\n\n\tpublic getActiveTasks(): Task[] {\n\t\treturn Object.keys(this.activeTasks).map(key => this.activeTasks[key].task);\n\t}\n\n\tpublic getLastInstance(task: Task): Task | undefined {\n\t\tlet lastInstance = undefined;\n\t\tconst recentKey = task.getRecentlyUsedKey();\n\t\tObject.keys(this.activeTasks).forEach((key) => {\n\t\t\tif (recentKey && recentKey === this.activeTasks[key].task.getRecentlyUsedKey()) {\n\t\t\t\tlastInstance = this.activeTasks[key].task;\n\t\t\t}\n\t\t});\n\t\treturn lastInstance;\n\t}\n\n\tpublic getBusyTasks(): Task[] {\n\t\treturn Object.keys(this.busyTasks).map(key => this.busyTasks[key]);\n\t}\n\n\tpublic customExecutionComplete(task: Task, result: number): Promise<void> {\n\t\tlet activeTerminal = this.activeTasks[task.getMapKey()];\n\t\tif (!activeTerminal) {\n\t\t\treturn Promise.reject(new Error('Expected to have a terminal for an custom execution task'));\n\t\t}\n\n\t\treturn new Promise<void>((resolve) => {\n\t\t\t// activeTerminal.terminal.rendererExit(result);\n\t\t\tresolve();\n\t\t});\n\t}\n\n\tprivate removeInstances(task: Task) {\n\t\tconst recentTaskKey = task.getRecentlyUsedKey() ?? '';\n\t\tif (this.instances[recentTaskKey]) {\n\t\t\tthis.instances[recentTaskKey].removeInstance();\n\t\t\tif (this.instances[recentTaskKey].instances === 0) {\n\t\t\t\tdelete this.instances[recentTaskKey];\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate removeFromActiveTasks(task: Task): void {\n\t\tif (!this.activeTasks[task.getMapKey()]) {\n\t\t\treturn;\n\t\t}\n\t\tdelete this.activeTasks[task.getMapKey()];\n\t\tthis.removeInstances(task);\n\t}\n\n\tpublic terminate(task: Task): Promise<TaskTerminateResponse> {\n\t\tlet activeTerminal = this.activeTasks[task.getMapKey()];\n\t\tif (!activeTerminal) {\n\t\t\treturn Promise.resolve<TaskTerminateResponse>({ success: false, task: undefined });\n\t\t}\n\t\treturn new Promise<TaskTerminateResponse>((resolve, reject) => {\n\t\t\tlet terminal = activeTerminal.terminal;\n\n\t\t\tconst onExit = terminal.onExit(() => {\n\t\t\t\tlet task = activeTerminal.task;\n\t\t\t\ttry {\n\t\t\t\t\tonExit.dispose();\n\t\t\t\t\tthis._onDidStateChange.fire(TaskEvent.create(TaskEventKind.Terminated, task));\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// Do nothing.\n\t\t\t\t}\n\t\t\t\tresolve({ success: true, task: task });\n\t\t\t});\n\t\t\tterminal.dispose();\n\t\t});\n\t}\n\n\tpublic terminateAll(): Promise<TaskTerminateResponse[]> {\n\t\tlet promises: Promise<TaskTerminateResponse>[] = [];\n\t\tObject.keys(this.activeTasks).forEach((key) => {\n\t\t\tlet terminalData = this.activeTasks[key];\n\t\t\tlet terminal = terminalData.terminal;\n\t\t\tpromises.push(new Promise<TaskTerminateResponse>((resolve, reject) => {\n\t\t\t\tconst onExit = terminal.onExit(() => {\n\t\t\t\t\tlet task = terminalData.task;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tonExit.dispose();\n\t\t\t\t\t\tthis._onDidStateChange.fire(TaskEvent.create(TaskEventKind.Terminated, task));\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t// Do nothing.\n\t\t\t\t\t}\n\t\t\t\t\tresolve({ success: true, task: terminalData.task });\n\t\t\t\t});\n\t\t\t}));\n\t\t\tterminal.dispose();\n\t\t});\n\t\tthis.activeTasks = Object.create(null);\n\t\treturn Promise.all<TaskTerminateResponse>(promises);\n\t}\n\n\n\tprivate showDependencyCycleMessage(task: Task) {\n\t\tthis.log(nls.localize('dependencyCycle',\n\t\t\t'There is a dependency cycle. See task \"{0}\".',\n\t\t\ttask._label\n\t\t));\n\t\tthis.showOutput();\n\t}\n\n\tprivate async executeTask(task: Task, resolver: ITaskResolver, trigger: string, encounteredDependencies: Set<string>, alreadyResolved?: Map<string, string>): Promise<ITaskSummary> {\n\t\tif (encounteredDependencies.has(task.getCommonTaskId())) {\n\t\t\tthis.showDependencyCycleMessage(task);\n\t\t\treturn {};\n\t\t}\n\n\t\talreadyResolved = alreadyResolved ?? new Map<string, string>();\n\t\tlet promises: Promise<ITaskSummary>[] = [];\n\t\tif (task.configurationProperties.dependsOn) {\n\t\t\tfor (const dependency of task.configurationProperties.dependsOn) {\n\t\t\t\tlet dependencyTask = await resolver.resolve(dependency.uri, dependency.task!);\n\t\t\t\tif (dependencyTask) {\n\t\t\t\t\tlet key = dependencyTask.getMapKey();\n\t\t\t\t\tlet promise = this.activeTasks[key] ? this.activeTasks[key].promise : undefined;\n\t\t\t\t\tif (!promise) {\n\t\t\t\t\t\tthis._onDidStateChange.fire(TaskEvent.create(TaskEventKind.DependsOnStarted, task));\n\t\t\t\t\t\tencounteredDependencies.add(task.getCommonTaskId());\n\t\t\t\t\t\tpromise = this.executeDependencyTask(dependencyTask, resolver, trigger, encounteredDependencies, alreadyResolved);\n\t\t\t\t\t}\n\t\t\t\t\tpromises.push(promise);\n\t\t\t\t\tif (task.configurationProperties.dependsOrder === DependsOrder.sequence) {\n\t\t\t\t\t\tconst promiseResult = await promise;\n\t\t\t\t\t\tif (promiseResult.exitCode === 0) {\n\t\t\t\t\t\t\tpromise = Promise.resolve(promiseResult);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpromise = Promise.reject(promiseResult);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpromises.push(promise);\n\t\t\t\t} else {\n\t\t\t\t\tthis.log(nls.localize('dependencyFailed',\n\t\t\t\t\t\t'Couldn\\'t resolve dependent task \\'{0}\\' in workspace folder \\'{1}\\'',\n\t\t\t\t\t\tTypes.isString(dependency.task) ? dependency.task : JSON.stringify(dependency.task, undefined, 0),\n\t\t\t\t\t\tdependency.uri.toString()\n\t\t\t\t\t));\n\t\t\t\t\tthis.showOutput();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ((ContributedTask.is(task) || CustomTask.is(task)) && (task.command)) {\n\t\t\treturn Promise.all(promises).then((summaries): Promise<ITaskSummary> | ITaskSummary => {\n\t\t\t\tencounteredDependencies.delete(task.getCommonTaskId());\n\t\t\t\tfor (let summary of summaries) {\n\t\t\t\t\tif (summary.exitCode !== 0) {\n\t\t\t\t\t\tthis.removeInstances(task);\n\t\t\t\t\t\treturn { exitCode: summary.exitCode };\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this.isRerun) {\n\t\t\t\t\treturn this.reexecuteCommand(task, trigger, alreadyResolved!);\n\t\t\t\t} else {\n\t\t\t\t\treturn this.executeCommand(task, trigger, alreadyResolved!);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\treturn Promise.all(promises).then((summaries): ITaskSummary => {\n\t\t\t\tencounteredDependencies.delete(task.getCommonTaskId());\n\t\t\t\tfor (let summary of summaries) {\n\t\t\t\t\tif (summary.exitCode !== 0) {\n\t\t\t\t\t\treturn { exitCode: summary.exitCode };\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn { exitCode: 0 };\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate async executeDependencyTask(task: Task, resolver: ITaskResolver, trigger: string, encounteredDependencies: Set<string>, alreadyResolved?: Map<string, string>): Promise<ITaskSummary> {\n\t\t// If the task is a background task with a watching problem matcher, we don't wait for the whole task to finish,\n\t\t// just for the problem matcher to go inactive.\n\t\tif (!task.configurationProperties.isBackground) {\n\t\t\treturn this.executeTask(task, resolver, trigger, encounteredDependencies, alreadyResolved);\n\t\t}\n\n\t\tconst inactivePromise = new Promise<ITaskSummary>(resolve => {\n\t\t\tconst taskInactiveDisposable = this._onDidStateChange.event(taskEvent => {\n\t\t\t\tif ((taskEvent.kind === TaskEventKind.Inactive) && (taskEvent.__task === task)) {\n\t\t\t\t\ttaskInactiveDisposable.dispose();\n\t\t\t\t\tresolve({ exitCode: 0 });\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\treturn Promise.race([inactivePromise, this.executeTask(task, resolver, trigger, encounteredDependencies, alreadyResolved)]);\n\t}\n\n\tprivate async resolveAndFindExecutable(systemInfo: TaskSystemInfo | undefined, workspaceFolder: IWorkspaceFolder | undefined, task: CustomTask | ContributedTask, cwd: string | undefined, envPath: string | undefined): Promise<string> {\n\t\tconst command = await this.configurationResolverService.resolveAsync(workspaceFolder, CommandString.value(task.command.name!));\n\t\tcwd = cwd ? await this.configurationResolverService.resolveAsync(workspaceFolder, cwd) : undefined;\n\t\tconst paths = envPath ? await Promise.all(envPath.split(path.delimiter).map(p => this.configurationResolverService.resolveAsync(workspaceFolder, p))) : undefined;\n\t\tlet foundExecutable = await systemInfo?.findExecutable(command, cwd, paths);\n\t\tif (!foundExecutable) {\n\t\t\tfoundExecutable = path.join(cwd ?? '', command);\n\t\t}\n\t\treturn foundExecutable;\n\t}\n\n\tprivate findUnresolvedVariables(variables: Set<string>, alreadyResolved: Map<string, string>): Set<string> {\n\t\tif (alreadyResolved.size === 0) {\n\t\t\treturn variables;\n\t\t}\n\t\tconst unresolved = new Set<string>();\n\t\tfor (const variable of variables) {\n\t\t\tif (!alreadyResolved.has(variable.substring(2, variable.length - 1))) {\n\t\t\t\tunresolved.add(variable);\n\t\t\t}\n\t\t}\n\t\treturn unresolved;\n\t}\n\n\tprivate mergeMaps(mergeInto: Map<string, string>, mergeFrom: Map<string, string>) {\n\t\tfor (const entry of mergeFrom) {\n\t\t\tif (!mergeInto.has(entry[0])) {\n\t\t\t\tmergeInto.set(entry[0], entry[1]);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async acquireInput(taskSystemInfo: TaskSystemInfo | undefined, workspaceFolder: IWorkspaceFolder | undefined, task: CustomTask | ContributedTask, variables: Set<string>, alreadyResolved: Map<string, string>): Promise<ResolvedVariables | undefined> {\n\t\tconst resolved = await this.resolveVariablesFromSet(taskSystemInfo, workspaceFolder, task, variables, alreadyResolved);\n\t\tthis._onDidStateChange.fire(TaskEvent.create(TaskEventKind.AcquiredInput, task));\n\t\treturn resolved;\n\t}\n\n\tprivate resolveVariablesFromSet(taskSystemInfo: TaskSystemInfo | undefined, workspaceFolder: IWorkspaceFolder | undefined, task: CustomTask | ContributedTask, variables: Set<string>, alreadyResolved: Map<string, string>): Promise<ResolvedVariables | undefined> {\n\t\tlet isProcess = task.command && task.command.runtime === RuntimeType.Process;\n\t\tlet options = task.command && task.command.options ? task.command.options : undefined;\n\t\tlet cwd = options ? options.cwd : undefined;\n\t\tlet envPath: string | undefined = undefined;\n\t\tif (options && options.env) {\n\t\t\tfor (let key of Object.keys(options.env)) {\n\t\t\t\tif (key.toLowerCase() === 'path') {\n\t\t\t\t\tif (Types.isString(options.env[key])) {\n\t\t\t\t\t\tenvPath = options.env[key];\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst unresolved = this.findUnresolvedVariables(variables, alreadyResolved);\n\t\tlet resolvedVariables: Promise<ResolvedVariables | undefined>;\n\t\tif (taskSystemInfo && workspaceFolder) {\n\t\t\tlet resolveSet: ResolveSet = {\n\t\t\t\tvariables: unresolved\n\t\t\t};\n\n\t\t\tif (taskSystemInfo.platform === Platform.Platform.Windows && isProcess) {\n\t\t\t\tresolveSet.process = { name: CommandString.value(task.command.name!) };\n\t\t\t\tif (cwd) {\n\t\t\t\t\tresolveSet.process.cwd = cwd;\n\t\t\t\t}\n\t\t\t\tif (envPath) {\n\t\t\t\t\tresolveSet.process.path = envPath;\n\t\t\t\t}\n\t\t\t}\n\t\t\tresolvedVariables = taskSystemInfo.resolveVariables(workspaceFolder, resolveSet, TaskSourceKind.toConfigurationTarget(task._source.kind)).then(async (resolved) => {\n\t\t\t\tif (!resolved) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\tthis.mergeMaps(alreadyResolved, resolved.variables);\n\t\t\t\tresolved.variables = new Map(alreadyResolved);\n\t\t\t\tif (isProcess) {\n\t\t\t\t\tlet process = CommandString.value(task.command.name!);\n\t\t\t\t\tif (taskSystemInfo.platform === Platform.Platform.Windows) {\n\t\t\t\t\t\tprocess = await this.resolveAndFindExecutable(taskSystemInfo, workspaceFolder, task, cwd, envPath);\n\t\t\t\t\t}\n\t\t\t\t\tresolved.variables.set(TerminalTaskSystem.ProcessVarName, process);\n\t\t\t\t}\n\t\t\t\treturn resolved;\n\t\t\t});\n\t\t\treturn resolvedVariables;\n\t\t} else {\n\t\t\tlet variablesArray = new Array<string>();\n\t\t\tunresolved.forEach(variable => variablesArray.push(variable));\n\n\t\t\treturn new Promise<ResolvedVariables | undefined>((resolve, reject) => {\n\t\t\t\tthis.configurationResolverService.resolveWithInteraction(workspaceFolder, variablesArray, 'tasks', undefined, TaskSourceKind.toConfigurationTarget(task._source.kind)).then(async (resolvedVariablesMap: Map<string, string> | undefined) => {\n\t\t\t\t\tif (resolvedVariablesMap) {\n\t\t\t\t\t\tthis.mergeMaps(alreadyResolved, resolvedVariablesMap);\n\t\t\t\t\t\tresolvedVariablesMap = new Map(alreadyResolved);\n\t\t\t\t\t\tif (isProcess) {\n\t\t\t\t\t\t\tlet processVarValue: string;\n\t\t\t\t\t\t\tif (Platform.isWindows) {\n\t\t\t\t\t\t\t\tprocessVarValue = await this.resolveAndFindExecutable(taskSystemInfo, workspaceFolder, task, cwd, envPath);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tprocessVarValue = await this.configurationResolverService.resolveAsync(workspaceFolder, CommandString.value(task.command.name!));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tresolvedVariablesMap.set(TerminalTaskSystem.ProcessVarName, processVarValue);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlet resolvedVariablesResult: ResolvedVariables = {\n\t\t\t\t\t\t\tvariables: resolvedVariablesMap,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tresolve(resolvedVariablesResult);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(undefined);\n\t\t\t\t\t}\n\t\t\t\t}, reason => {\n\t\t\t\t\treject(reason);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate executeCommand(task: CustomTask | ContributedTask, trigger: string, alreadyResolved: Map<string, string>): Promise<ITaskSummary> {\n\t\tconst taskWorkspaceFolder = task.getWorkspaceFolder();\n\t\tlet workspaceFolder: IWorkspaceFolder | undefined;\n\t\tif (taskWorkspaceFolder) {\n\t\t\tworkspaceFolder = this.currentTask.workspaceFolder = taskWorkspaceFolder;\n\t\t} else {\n\t\t\tconst folders = this.contextService.getWorkspace().folders;\n\t\t\tworkspaceFolder = folders.length > 0 ? folders[0] : undefined;\n\t\t}\n\t\tconst systemInfo: TaskSystemInfo | undefined = this.currentTask.systemInfo = this.taskSystemInfoResolver(workspaceFolder);\n\n\t\tlet variables = new Set<string>();\n\t\tthis.collectTaskVariables(variables, task);\n\t\tconst resolvedVariables = this.acquireInput(systemInfo, workspaceFolder, task, variables, alreadyResolved);\n\n\t\treturn resolvedVariables.then((resolvedVariables) => {\n\t\t\tif (resolvedVariables && !this.isTaskEmpty(task)) {\n\t\t\t\tthis.currentTask.resolvedVariables = resolvedVariables;\n\t\t\t\treturn this.executeInTerminal(task, trigger, new VariableResolver(workspaceFolder, systemInfo, resolvedVariables.variables, this.configurationResolverService), workspaceFolder);\n\t\t\t} else {\n\t\t\t\t// Allows the taskExecutions array to be updated in the extension host\n\t\t\t\tthis._onDidStateChange.fire(TaskEvent.create(TaskEventKind.End, task));\n\t\t\t\treturn Promise.resolve({ exitCode: 0 });\n\t\t\t}\n\t\t}, reason => {\n\t\t\treturn Promise.reject(reason);\n\t\t});\n\t}\n\n\tprivate isTaskEmpty(task: CustomTask | ContributedTask): boolean {\n\t\tconst isCustomExecution = (task.command.runtime === RuntimeType.CustomExecution);\n\t\treturn !((task.command !== undefined) && task.command.runtime && (isCustomExecution || (task.command.name !== undefined)));\n\t}\n\n\tprivate reexecuteCommand(task: CustomTask | ContributedTask, trigger: string, alreadyResolved: Map<string, string>): Promise<ITaskSummary> {\n\t\tconst lastTask = this.lastTask;\n\t\tif (!lastTask) {\n\t\t\treturn Promise.reject(new Error('No task previously run'));\n\t\t}\n\t\tconst workspaceFolder = this.currentTask.workspaceFolder = lastTask.workspaceFolder;\n\t\tlet variables = new Set<string>();\n\t\tthis.collectTaskVariables(variables, task);\n\n\t\t// Check that the task hasn't changed to include new variables\n\t\tlet hasAllVariables = true;\n\t\tvariables.forEach(value => {\n\t\t\tif (value.substring(2, value.length - 1) in lastTask.getVerifiedTask().resolvedVariables) {\n\t\t\t\thasAllVariables = false;\n\t\t\t}\n\t\t});\n\n\t\tif (!hasAllVariables) {\n\t\t\treturn this.acquireInput(lastTask.getVerifiedTask().systemInfo, lastTask.getVerifiedTask().workspaceFolder, task, variables, alreadyResolved).then((resolvedVariables) => {\n\t\t\t\tif (!resolvedVariables) {\n\t\t\t\t\t// Allows the taskExecutions array to be updated in the extension host\n\t\t\t\t\tthis._onDidStateChange.fire(TaskEvent.create(TaskEventKind.End, task));\n\t\t\t\t\treturn { exitCode: 0 };\n\t\t\t\t}\n\t\t\t\tthis.currentTask.resolvedVariables = resolvedVariables;\n\t\t\t\treturn this.executeInTerminal(task, trigger, new VariableResolver(lastTask.getVerifiedTask().workspaceFolder, lastTask.getVerifiedTask().systemInfo, resolvedVariables.variables, this.configurationResolverService), workspaceFolder!);\n\t\t\t}, reason => {\n\t\t\t\treturn Promise.reject(reason);\n\t\t\t});\n\t\t} else {\n\t\t\tthis.currentTask.resolvedVariables = lastTask.getVerifiedTask().resolvedVariables;\n\t\t\treturn this.executeInTerminal(task, trigger, new VariableResolver(lastTask.getVerifiedTask().workspaceFolder, lastTask.getVerifiedTask().systemInfo, lastTask.getVerifiedTask().resolvedVariables.variables, this.configurationResolverService), workspaceFolder!);\n\t\t}\n\t}\n\n\tprivate async executeInTerminal(task: CustomTask | ContributedTask, trigger: string, resolver: VariableResolver, workspaceFolder: IWorkspaceFolder | undefined): Promise<ITaskSummary> {\n\t\tlet terminal: ITerminalInstance | undefined = undefined;\n\t\tlet executedCommand: string | undefined = undefined;\n\t\tlet error: TaskError | undefined = undefined;\n\t\tlet promise: Promise<ITaskSummary> | undefined = undefined;\n\t\tif (task.configurationProperties.isBackground) {\n\t\t\tconst problemMatchers = await this.resolveMatchers(resolver, task.configurationProperties.problemMatchers);\n\t\t\tlet watchingProblemMatcher = new WatchingProblemCollector(problemMatchers, this.markerService, this.modelService, this.fileService);\n\t\t\tif ((problemMatchers.length > 0) && !watchingProblemMatcher.isWatching()) {\n\t\t\t\tthis.appendOutput(nls.localize('TerminalTaskSystem.nonWatchingMatcher', 'Task {0} is a background task but uses a problem matcher without a background pattern', task._label));\n\t\t\t\tthis.showOutput();\n\t\t\t}\n\t\t\tconst toDispose = new DisposableStore();\n\t\t\tlet eventCounter: number = 0;\n\t\t\tconst mapKey = task.getMapKey();\n\t\t\ttoDispose.add(watchingProblemMatcher.onDidStateChange((event) => {\n\t\t\t\tif (event.kind === ProblemCollectorEventKind.BackgroundProcessingBegins) {\n\t\t\t\t\teventCounter++;\n\t\t\t\t\tthis.busyTasks[mapKey] = task;\n\t\t\t\t\tthis._onDidStateChange.fire(TaskEvent.create(TaskEventKind.Active, task));\n\t\t\t\t} else if (event.kind === ProblemCollectorEventKind.BackgroundProcessingEnds) {\n\t\t\t\t\teventCounter--;\n\t\t\t\t\tif (this.busyTasks[mapKey]) {\n\t\t\t\t\t\tdelete this.busyTasks[mapKey];\n\t\t\t\t\t}\n\t\t\t\t\tthis._onDidStateChange.fire(TaskEvent.create(TaskEventKind.Inactive, task));\n\t\t\t\t\tif (eventCounter === 0) {\n\t\t\t\t\t\tif ((watchingProblemMatcher.numberOfMatches > 0) && watchingProblemMatcher.maxMarkerSeverity &&\n\t\t\t\t\t\t\t(watchingProblemMatcher.maxMarkerSeverity >= MarkerSeverity.Error)) {\n\t\t\t\t\t\t\tlet reveal = task.command.presentation!.reveal;\n\t\t\t\t\t\t\tlet revealProblems = task.command.presentation!.revealProblems;\n\t\t\t\t\t\t\tif (revealProblems === RevealProblemKind.OnProblem) {\n\t\t\t\t\t\t\t\tthis.viewsService.openView(Constants.MARKERS_VIEW_ID, true);\n\t\t\t\t\t\t\t} else if (reveal === RevealKind.Silent) {\n\t\t\t\t\t\t\t\tthis.terminalService.setActiveInstance(terminal!);\n\t\t\t\t\t\t\t\tthis.terminalService.showPanel(false);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}));\n\t\t\twatchingProblemMatcher.aboutToStart();\n\t\t\tlet delayer: Async.Delayer<any> | undefined = undefined;\n\t\t\t[terminal, executedCommand, error] = await this.createTerminal(task, resolver, workspaceFolder);\n\n\t\t\tif (error) {\n\t\t\t\treturn Promise.reject(new Error((<TaskError>error).message));\n\t\t\t}\n\t\t\tif (!terminal) {\n\t\t\t\treturn Promise.reject(new Error(`Failed to create terminal for task ${task._label}`));\n\t\t\t}\n\n\t\t\tlet processStartedSignaled = false;\n\t\t\tterminal.processReady.then(() => {\n\t\t\t\tif (!processStartedSignaled) {\n\t\t\t\t\tthis._onDidStateChange.fire(TaskEvent.create(TaskEventKind.ProcessStarted, task, terminal!.processId!));\n\t\t\t\t\tprocessStartedSignaled = true;\n\t\t\t\t}\n\t\t\t}, (_error) => {\n\t\t\t\tthis.logService.error('Task terminal process never got ready');\n\t\t\t});\n\t\t\tthis._onDidStateChange.fire(TaskEvent.create(TaskEventKind.Start, task, terminal.instanceId));\n\t\t\tlet skipLine: boolean = (!!task.command.presentation && task.command.presentation.echo);\n\t\t\tconst onData = terminal.onLineData((line) => {\n\t\t\t\tif (skipLine) {\n\t\t\t\t\tskipLine = false;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\twatchingProblemMatcher.processLine(line);\n\t\t\t\tif (!delayer) {\n\t\t\t\t\tdelayer = new Async.Delayer(3000);\n\t\t\t\t}\n\t\t\t\tdelayer.trigger(() => {\n\t\t\t\t\twatchingProblemMatcher.forceDelivery();\n\t\t\t\t\tdelayer = undefined;\n\t\t\t\t});\n\t\t\t});\n\t\t\tpromise = new Promise<ITaskSummary>((resolve, reject) => {\n\t\t\t\tconst onExit = terminal!.onExit((exitCode) => {\n\t\t\t\t\tonData.dispose();\n\t\t\t\t\tonExit.dispose();\n\t\t\t\t\tlet key = task.getMapKey();\n\t\t\t\t\tif (this.busyTasks[mapKey]) {\n\t\t\t\t\t\tdelete this.busyTasks[mapKey];\n\t\t\t\t\t}\n\t\t\t\t\tthis.removeFromActiveTasks(task);\n\t\t\t\t\tthis._onDidStateChange.fire(TaskEvent.create(TaskEventKind.Changed));\n\t\t\t\t\tif (exitCode !== undefined) {\n\t\t\t\t\t\t// Only keep a reference to the terminal if it is not being disposed.\n\t\t\t\t\t\tswitch (task.command.presentation!.panel) {\n\t\t\t\t\t\t\tcase PanelKind.Dedicated:\n\t\t\t\t\t\t\t\tthis.sameTaskTerminals[key] = terminal!.instanceId.toString();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase PanelKind.Shared:\n\t\t\t\t\t\t\t\tthis.idleTaskTerminals.set(key, terminal!.instanceId.toString(), Touch.AsOld);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tlet reveal = task.command.presentation!.reveal;\n\t\t\t\t\tif ((reveal === RevealKind.Silent) && ((exitCode !== 0) || (watchingProblemMatcher.numberOfMatches > 0) && watchingProblemMatcher.maxMarkerSeverity &&\n\t\t\t\t\t\t(watchingProblemMatcher.maxMarkerSeverity >= MarkerSeverity.Error))) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tthis.terminalService.setActiveInstance(terminal!);\n\t\t\t\t\t\t\tthis.terminalService.showPanel(false);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t// If the terminal has already been disposed, then setting the active instance will fail. #99828\n\t\t\t\t\t\t\t// There is nothing else to do here.\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\twatchingProblemMatcher.done();\n\t\t\t\t\twatchingProblemMatcher.dispose();\n\t\t\t\t\tif (!processStartedSignaled) {\n\t\t\t\t\t\tthis._onDidStateChange.fire(TaskEvent.create(TaskEventKind.ProcessStarted, task, terminal!.processId!));\n\t\t\t\t\t\tprocessStartedSignaled = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._onDidStateChange.fire(TaskEvent.create(TaskEventKind.ProcessEnded, task, exitCode));\n\n\t\t\t\t\tfor (let i = 0; i < eventCounter; i++) {\n\t\t\t\t\t\tlet event = TaskEvent.create(TaskEventKind.Inactive, task);\n\t\t\t\t\t\tthis._onDidStateChange.fire(event);\n\t\t\t\t\t}\n\t\t\t\t\teventCounter = 0;\n\t\t\t\t\tthis._onDidStateChange.fire(TaskEvent.create(TaskEventKind.End, task));\n\t\t\t\t\ttoDispose.dispose();\n\t\t\t\t\tresolve({ exitCode });\n\t\t\t\t});\n\t\t\t});\n\t\t} else {\n\t\t\t[terminal, executedCommand, error] = await this.createTerminal(task, resolver, workspaceFolder);\n\n\t\t\tif (error) {\n\t\t\t\treturn Promise.reject(new Error((<TaskError>error).message));\n\t\t\t}\n\t\t\tif (!terminal) {\n\t\t\t\treturn Promise.reject(new Error(`Failed to create terminal for task ${task._label}`));\n\t\t\t}\n\n\t\t\tlet processStartedSignaled = false;\n\t\t\tterminal.processReady.then(() => {\n\t\t\t\tif (!processStartedSignaled) {\n\t\t\t\t\tthis._onDidStateChange.fire(TaskEvent.create(TaskEventKind.ProcessStarted, task, terminal!.processId!));\n\t\t\t\t\tprocessStartedSignaled = true;\n\t\t\t\t}\n\t\t\t}, (_error) => {\n\t\t\t\t// The process never got ready. Need to think how to handle this.\n\t\t\t});\n\t\t\tthis._onDidStateChange.fire(TaskEvent.create(TaskEventKind.Start, task, terminal.instanceId, resolver.values));\n\t\t\tconst mapKey = task.getMapKey();\n\t\t\tthis.busyTasks[mapKey] = task;\n\t\t\tthis._onDidStateChange.fire(TaskEvent.create(TaskEventKind.Active, task));\n\t\t\tlet problemMatchers = await this.resolveMatchers(resolver, task.configurationProperties.problemMatchers);\n\t\t\tlet startStopProblemMatcher = new StartStopProblemCollector(problemMatchers, this.markerService, this.modelService, ProblemHandlingStrategy.Clean, this.fileService);\n\t\t\tlet skipLine: boolean = (!!task.command.presentation && task.command.presentation.echo);\n\t\t\tconst onData = terminal.onLineData((line) => {\n\t\t\t\tif (skipLine) {\n\t\t\t\t\tskipLine = false;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tstartStopProblemMatcher.processLine(line);\n\t\t\t});\n\t\t\tpromise = new Promise<ITaskSummary>((resolve, reject) => {\n\t\t\t\tconst onExit = terminal!.onExit((exitCode) => {\n\t\t\t\t\tonExit.dispose();\n\t\t\t\t\tlet key = task.getMapKey();\n\t\t\t\t\tthis.removeFromActiveTasks(task);\n\t\t\t\t\tthis._onDidStateChange.fire(TaskEvent.create(TaskEventKind.Changed));\n\t\t\t\t\tif (exitCode !== undefined) {\n\t\t\t\t\t\t// Only keep a reference to the terminal if it is not being disposed.\n\t\t\t\t\t\tswitch (task.command.presentation!.panel) {\n\t\t\t\t\t\t\tcase PanelKind.Dedicated:\n\t\t\t\t\t\t\t\tthis.sameTaskTerminals[key] = terminal!.instanceId.toString();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase PanelKind.Shared:\n\t\t\t\t\t\t\t\tthis.idleTaskTerminals.set(key, terminal!.instanceId.toString(), Touch.AsOld);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tlet reveal = task.command.presentation!.reveal;\n\t\t\t\t\tlet revealProblems = task.command.presentation!.revealProblems;\n\t\t\t\t\tlet revealProblemPanel = terminal && (revealProblems === RevealProblemKind.OnProblem) && (startStopProblemMatcher.numberOfMatches > 0);\n\t\t\t\t\tif (revealProblemPanel) {\n\t\t\t\t\t\tthis.viewsService.openView(Constants.MARKERS_VIEW_ID);\n\t\t\t\t\t} else if (terminal && (reveal === RevealKind.Silent) && ((exitCode !== 0) || (startStopProblemMatcher.numberOfMatches > 0) && startStopProblemMatcher.maxMarkerSeverity &&\n\t\t\t\t\t\t(startStopProblemMatcher.maxMarkerSeverity >= MarkerSeverity.Error))) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tthis.terminalService.setActiveInstance(terminal);\n\t\t\t\t\t\t\tthis.terminalService.showPanel(false);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t// If the terminal has already been disposed, then setting the active instance will fail. #99828\n\t\t\t\t\t\t\t// There is nothing else to do here.\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// Hack to work around #92868 until terminal is fixed.\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tonData.dispose();\n\t\t\t\t\t\tstartStopProblemMatcher.done();\n\t\t\t\t\t\tstartStopProblemMatcher.dispose();\n\t\t\t\t\t}, 100);\n\t\t\t\t\tif (!processStartedSignaled && terminal) {\n\t\t\t\t\t\tthis._onDidStateChange.fire(TaskEvent.create(TaskEventKind.ProcessStarted, task, terminal.processId!));\n\t\t\t\t\t\tprocessStartedSignaled = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._onDidStateChange.fire(TaskEvent.create(TaskEventKind.ProcessEnded, task, exitCode));\n\t\t\t\t\tif (this.busyTasks[mapKey]) {\n\t\t\t\t\t\tdelete this.busyTasks[mapKey];\n\t\t\t\t\t}\n\t\t\t\t\tthis._onDidStateChange.fire(TaskEvent.create(TaskEventKind.Inactive, task));\n\t\t\t\t\tthis._onDidStateChange.fire(TaskEvent.create(TaskEventKind.End, task));\n\t\t\t\t\tresolve({ exitCode });\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tlet showProblemPanel = task.command.presentation && (task.command.presentation.revealProblems === RevealProblemKind.Always);\n\t\tif (showProblemPanel) {\n\t\t\tthis.viewsService.openView(Constants.MARKERS_VIEW_ID);\n\t\t} else if (task.command.presentation && (task.command.presentation.reveal === RevealKind.Always)) {\n\t\t\tthis.terminalService.setActiveInstance(terminal);\n\t\t\tthis.terminalService.showPanel(task.command.presentation.focus);\n\t\t}\n\t\tthis.activeTasks[task.getMapKey()] = { terminal, task, promise };\n\t\tthis._onDidStateChange.fire(TaskEvent.create(TaskEventKind.Changed));\n\t\treturn promise.then((summary) => {\n\t\t\ttry {\n\t\t\t\tlet telemetryEvent: TelemetryEvent = {\n\t\t\t\t\ttrigger: trigger,\n\t\t\t\t\trunner: 'terminal',\n\t\t\t\t\ttaskKind: task.getTelemetryKind(),\n\t\t\t\t\tcommand: this.getSanitizedCommand(executedCommand!),\n\t\t\t\t\tsuccess: true,\n\t\t\t\t\texitCode: summary.exitCode\n\t\t\t\t};\n\t\t\t\t/* __GDPR__\n\t\t\t\t\t\"taskService\" : {\n\t\t\t\t\t\t\"${include}\": [\n\t\t\t\t\t\t\t\"${TelemetryEvent}\"\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t*/\n\t\t\t\tthis.telemetryService.publicLog(TerminalTaskSystem.TelemetryEventName, telemetryEvent);\n\t\t\t} catch (error) {\n\t\t\t}\n\t\t\treturn summary;\n\t\t}, (error) => {\n\t\t\ttry {\n\t\t\t\tlet telemetryEvent: TelemetryEvent = {\n\t\t\t\t\ttrigger: trigger,\n\t\t\t\t\trunner: 'terminal',\n\t\t\t\t\ttaskKind: task.getTelemetryKind(),\n\t\t\t\t\tcommand: this.getSanitizedCommand(executedCommand!),\n\t\t\t\t\tsuccess: false\n\t\t\t\t};\n\t\t\t\t/* __GDPR__\n\t\t\t\t\t\"taskService\" : {\n\t\t\t\t\t\t\"${include}\": [\n\t\t\t\t\t\t\t\"${TelemetryEvent}\"\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t*/\n\t\t\t\tthis.telemetryService.publicLog(TerminalTaskSystem.TelemetryEventName, telemetryEvent);\n\t\t\t} catch (error) {\n\t\t\t}\n\t\t\treturn Promise.reject<ITaskSummary>(error);\n\t\t});\n\t}\n\n\tprivate createTerminalName(task: CustomTask | ContributedTask): string {\n\t\tconst needsFolderQualification = this.contextService.getWorkbenchState() === WorkbenchState.WORKSPACE;\n\t\treturn needsFolderQualification ? task.getQualifiedLabel() : (task.configurationProperties.name || '');\n\t}\n\n\tprivate async createShellLaunchConfig(task: CustomTask | ContributedTask, workspaceFolder: IWorkspaceFolder | undefined, variableResolver: VariableResolver, platform: Platform.Platform, options: CommandOptions, command: CommandString, args: CommandString[], waitOnExit: boolean | string): Promise<IShellLaunchConfig | undefined> {\n\t\tlet shellLaunchConfig: IShellLaunchConfig;\n\t\tlet isShellCommand = task.command.runtime === RuntimeType.Shell;\n\t\tlet needsFolderQualification = this.contextService.getWorkbenchState() === WorkbenchState.WORKSPACE;\n\t\tlet terminalName = this.createTerminalName(task);\n\t\tconst description = nls.localize('TerminalTaskSystem.terminalDescription', 'Task');\n\t\tlet originalCommand = task.command.name;\n\t\tif (isShellCommand) {\n\t\t\tlet defaultConfig: { shell: string, args: string[] | string | undefined };\n\t\t\tif (variableResolver.taskSystemInfo) {\n\t\t\t\tdefaultConfig = await variableResolver.taskSystemInfo.getDefaultShellAndArgs();\n\t\t\t} else {\n\t\t\t\tconst defaultProfile = await this.terminalProfileResolverService.getDefaultProfile({\n\t\t\t\t\tallowAutomationShell: true,\n\t\t\t\t\tos: Platform.OS,\n\t\t\t\t\tremoteAuthority: this.environmentService.remoteAuthority\n\t\t\t\t});\n\t\t\t\tdefaultConfig = {\n\t\t\t\t\tshell: defaultProfile.path,\n\t\t\t\t\targs: defaultProfile.args\n\t\t\t\t};\n\t\t\t}\n\t\t\tshellLaunchConfig = { name: terminalName, description, executable: defaultConfig.shell, args: defaultConfig.args, waitOnExit };\n\t\t\tlet shellSpecified: boolean = false;\n\t\t\tlet shellOptions: ShellConfiguration | undefined = task.command.options && task.command.options.shell;\n\t\t\tif (shellOptions) {\n\t\t\t\tif (shellOptions.executable) {\n\t\t\t\t\tshellLaunchConfig.executable = await this.resolveVariable(variableResolver, shellOptions.executable);\n\t\t\t\t\tshellSpecified = true;\n\t\t\t\t}\n\t\t\t\tif (shellOptions.args) {\n\t\t\t\t\tshellLaunchConfig.args = await this.resolveVariables(variableResolver, shellOptions.args.slice());\n\t\t\t\t} else {\n\t\t\t\t\tshellLaunchConfig.args = [];\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet shellArgs = Array.isArray(shellLaunchConfig.args!) ? <string[]>shellLaunchConfig.args!.slice(0) : [shellLaunchConfig.args!];\n\t\t\tlet toAdd: string[] = [];\n\t\t\tlet commandLine = this.buildShellCommandLine(platform, shellLaunchConfig.executable!, shellOptions, command, originalCommand, args);\n\t\t\tlet windowsShellArgs: boolean = false;\n\t\t\tif (platform === Platform.Platform.Windows) {\n\t\t\t\twindowsShellArgs = true;\n\t\t\t\tlet basename = path.basename(shellLaunchConfig.executable!).toLowerCase();\n\t\t\t\t// If we don't have a cwd, then the terminal uses the home dir.\n\t\t\t\tconst userHome = await this.pathService.userHome();\n\t\t\t\tif (basename === 'cmd.exe' && ((options.cwd && isUNC(options.cwd)) || (!options.cwd && isUNC(userHome.fsPath)))) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\tif ((basename === 'powershell.exe') || (basename === 'pwsh.exe')) {\n\t\t\t\t\tif (!shellSpecified) {\n\t\t\t\t\t\ttoAdd.push('-Command');\n\t\t\t\t\t}\n\t\t\t\t} else if ((basename === 'bash.exe') || (basename === 'zsh.exe')) {\n\t\t\t\t\twindowsShellArgs = false;\n\t\t\t\t\tif (!shellSpecified) {\n\t\t\t\t\t\ttoAdd.push('-c');\n\t\t\t\t\t}\n\t\t\t\t} else if (basename === 'wsl.exe') {\n\t\t\t\t\tif (!shellSpecified) {\n\t\t\t\t\t\ttoAdd.push('-e');\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (!shellSpecified) {\n\t\t\t\t\t\ttoAdd.push('/d', '/c');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!shellSpecified) {\n\t\t\t\t\t// Under Mac remove -l to not start it as a login shell.\n\t\t\t\t\tif (platform === Platform.Platform.Mac) {\n\t\t\t\t\t\t// Background on -l on osx https://github.com/microsoft/vscode/issues/107563\n\t\t\t\t\t\tconst osxShellArgs = this.configurationService.inspect('terminal.integrated.shellArgs.osx');\n\t\t\t\t\t\tif ((osxShellArgs.user === undefined) && (osxShellArgs.userLocal === undefined) && (osxShellArgs.userLocalValue === undefined)\n\t\t\t\t\t\t\t&& (osxShellArgs.userRemote === undefined) && (osxShellArgs.userRemoteValue === undefined)\n\t\t\t\t\t\t\t&& (osxShellArgs.userValue === undefined) && (osxShellArgs.workspace === undefined)\n\t\t\t\t\t\t\t&& (osxShellArgs.workspaceFolder === undefined) && (osxShellArgs.workspaceFolderValue === undefined)\n\t\t\t\t\t\t\t&& (osxShellArgs.workspaceValue === undefined)) {\n\t\t\t\t\t\t\tlet index = shellArgs.indexOf('-l');\n\t\t\t\t\t\t\tif (index !== -1) {\n\t\t\t\t\t\t\t\tshellArgs.splice(index, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttoAdd.push('-c');\n\t\t\t\t}\n\t\t\t}\n\t\t\ttoAdd.forEach(element => {\n\t\t\t\tif (!shellArgs.some(arg => arg.toLowerCase() === element)) {\n\t\t\t\t\tshellArgs.push(element);\n\t\t\t\t}\n\t\t\t});\n\t\t\tshellArgs.push(commandLine);\n\t\t\tshellLaunchConfig.args = windowsShellArgs ? shellArgs.join(' ') : shellArgs;\n\t\t\tif (task.command.presentation && task.command.presentation.echo) {\n\t\t\t\tif (needsFolderQualification && workspaceFolder) {\n\t\t\t\t\tshellLaunchConfig.initialText = `\\x1b[1m> Executing task in folder ${workspaceFolder.name}: ${commandLine} <\\x1b[0m\\n`;\n\t\t\t\t} else {\n\t\t\t\t\tshellLaunchConfig.initialText = `\\x1b[1m> Executing task: ${commandLine} <\\x1b[0m\\n`;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tlet commandExecutable = (task.command.runtime !== RuntimeType.CustomExecution) ? CommandString.value(command) : undefined;\n\t\t\tlet executable = !isShellCommand\n\t\t\t\t? await this.resolveVariable(variableResolver, await this.resolveVariable(variableResolver, '${' + TerminalTaskSystem.ProcessVarName + '}'))\n\t\t\t\t: commandExecutable;\n\n\t\t\t// When we have a process task there is no need to quote arguments. So we go ahead and take the string value.\n\t\t\tshellLaunchConfig = {\n\t\t\t\tname: terminalName,\n\t\t\t\tdescription,\n\t\t\t\texecutable: executable,\n\t\t\t\targs: args.map(a => Types.isString(a) ? a : a.value),\n\t\t\t\twaitOnExit\n\t\t\t};\n\t\t\tif (task.command.presentation && task.command.presentation.echo) {\n\t\t\t\tlet getArgsToEcho = (args: string | string[] | undefined): string => {\n\t\t\t\t\tif (!args || args.length === 0) {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t\tif (Types.isString(args)) {\n\t\t\t\t\t\treturn args;\n\t\t\t\t\t}\n\t\t\t\t\treturn args.join(' ');\n\t\t\t\t};\n\t\t\t\tif (needsFolderQualification && workspaceFolder) {\n\t\t\t\t\tshellLaunchConfig.initialText = `\\x1b[1m> Executing task in folder ${workspaceFolder.name}: ${shellLaunchConfig.executable} ${getArgsToEcho(shellLaunchConfig.args)} <\\x1b[0m\\n`;\n\t\t\t\t} else {\n\t\t\t\t\tshellLaunchConfig.initialText = `\\x1b[1m> Executing task: ${shellLaunchConfig.executable} ${getArgsToEcho(shellLaunchConfig.args)} <\\x1b[0m\\n`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (options.cwd) {\n\t\t\tlet cwd = options.cwd;\n\t\t\tif (!path.isAbsolute(cwd)) {\n\t\t\t\tif (workspaceFolder && (workspaceFolder.uri.scheme === Schemas.file)) {\n\t\t\t\t\tcwd = path.join(workspaceFolder.uri.fsPath, cwd);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// This must be normalized to the OS\n\t\t\tshellLaunchConfig.cwd = isUNC(cwd) ? cwd : resources.toLocalResource(URI.from({ scheme: Schemas.file, path: cwd }), this.environmentService.remoteAuthority, this.pathService.defaultUriScheme);\n\t\t}\n\t\tif (options.env) {\n\t\t\tshellLaunchConfig.env = options.env;\n\t\t}\n\t\tshellLaunchConfig.isFeatureTerminal = true;\n\t\treturn shellLaunchConfig;\n\t}\n\n\tprivate async createTerminal(task: CustomTask | ContributedTask, resolver: VariableResolver, workspaceFolder: IWorkspaceFolder | undefined): Promise<[ITerminalInstance | undefined, string | undefined, TaskError | undefined]> {\n\t\tlet platform = resolver.taskSystemInfo ? resolver.taskSystemInfo.platform : Platform.platform;\n\t\tlet options = await this.resolveOptions(resolver, task.command.options);\n\n\t\tlet waitOnExit: boolean | string = false;\n\t\tconst presentationOptions = task.command.presentation;\n\t\tif (!presentationOptions) {\n\t\t\tthrow new Error('Task presentation options should not be undefined here.');\n\t\t}\n\n\t\tif (presentationOptions.reveal !== RevealKind.Never || !task.configurationProperties.isBackground) {\n\t\t\tif (presentationOptions.panel === PanelKind.New) {\n\t\t\t\twaitOnExit = nls.localize('closeTerminal', 'Press any key to close the terminal.');\n\t\t\t} else if (presentationOptions.showReuseMessage) {\n\t\t\t\twaitOnExit = nls.localize('reuseTerminal', 'Terminal will be reused by tasks, press any key to close it.');\n\t\t\t} else {\n\t\t\t\twaitOnExit = true;\n\t\t\t}\n\t\t}\n\n\t\tlet commandExecutable: string | undefined;\n\t\tlet command: CommandString | undefined;\n\t\tlet args: CommandString[] | undefined;\n\t\tlet launchConfigs: IShellLaunchConfig | undefined;\n\n\t\tif (task.command.runtime === RuntimeType.CustomExecution) {\n\t\t\tthis.currentTask.shellLaunchConfig = launchConfigs = {\n\t\t\t\tcustomPtyImplementation: (id, cols, rows) => new TerminalProcessExtHostProxy(id, cols, rows, this.terminalService),\n\t\t\t\twaitOnExit,\n\t\t\t\tname: this.createTerminalName(task),\n\t\t\t\tinitialText: task.command.presentation && task.command.presentation.echo ? `\\x1b[1m> Executing task: ${task._label} <\\x1b[0m\\n` : undefined,\n\t\t\t\tisFeatureTerminal: true\n\t\t\t};\n\t\t} else {\n\t\t\tlet resolvedResult: { command: CommandString, args: CommandString[] } = await this.resolveCommandAndArgs(resolver, task.command);\n\t\t\tcommand = resolvedResult.command;\n\t\t\targs = resolvedResult.args;\n\t\t\tcommandExecutable = CommandString.value(command);\n\n\t\t\tthis.currentTask.shellLaunchConfig = launchConfigs = (this.isRerun && this.lastTask) ? this.lastTask.getVerifiedTask().shellLaunchConfig : await this.createShellLaunchConfig(task, workspaceFolder, resolver, platform, options, command, args, waitOnExit);\n\t\t\tif (launchConfigs === undefined) {\n\t\t\t\treturn [undefined, undefined, new TaskError(Severity.Error, nls.localize('TerminalTaskSystem', 'Can\\'t execute a shell command on an UNC drive using cmd.exe.'), TaskErrors.UnknownError)];\n\t\t\t}\n\t\t}\n\t\tif (this.currentTask.shellLaunchConfig) {\n\t\t\tthis.currentTask.shellLaunchConfig.icon = 'tools';\n\t\t}\n\n\t\tlet prefersSameTerminal = presentationOptions.panel === PanelKind.Dedicated;\n\t\tlet allowsSharedTerminal = presentationOptions.panel === PanelKind.Shared;\n\t\tlet group = presentationOptions.group;\n\n\t\tlet taskKey = task.getMapKey();\n\t\tlet terminalToReuse: TerminalData | undefined;\n\t\tif (prefersSameTerminal) {\n\t\t\tlet terminalId = this.sameTaskTerminals[taskKey];\n\t\t\tif (terminalId) {\n\t\t\t\tterminalToReuse = this.terminals[terminalId];\n\t\t\t\tdelete this.sameTaskTerminals[taskKey];\n\t\t\t}\n\t\t} else if (allowsSharedTerminal) {\n\t\t\t// Always allow to reuse the terminal previously used by the same task.\n\t\t\tlet terminalId = this.idleTaskTerminals.remove(taskKey);\n\t\t\tif (!terminalId) {\n\t\t\t\t// There is no idle terminal which was used by the same task.\n\t\t\t\t// Search for any idle terminal used previously by a task of the same group\n\t\t\t\t// (or, if the task has no group, a terminal used by a task without group).\n\t\t\t\tfor (const taskId of this.idleTaskTerminals.keys()) {\n\t\t\t\t\tconst idleTerminalId = this.idleTaskTerminals.get(taskId)!;\n\t\t\t\t\tif (idleTerminalId && this.terminals[idleTerminalId] && this.terminals[idleTerminalId].group === group) {\n\t\t\t\t\t\tterminalId = this.idleTaskTerminals.remove(taskId);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (terminalId) {\n\t\t\t\tterminalToReuse = this.terminals[terminalId];\n\t\t\t}\n\t\t}\n\t\tif (terminalToReuse) {\n\t\t\tif (!launchConfigs) {\n\t\t\t\tthrow new Error('Task shell launch configuration should not be undefined here.');\n\t\t\t}\n\n\t\t\tterminalToReuse.terminal.scrollToBottom();\n\t\t\tterminalToReuse.terminal.reuseTerminal(launchConfigs);\n\n\t\t\tif (task.command.presentation && task.command.presentation.clear) {\n\t\t\t\tterminalToReuse.terminal.clear();\n\t\t\t}\n\t\t\tthis.terminals[terminalToReuse.terminal.instanceId.toString()].lastTask = taskKey;\n\t\t\treturn [terminalToReuse.terminal, commandExecutable, undefined];\n\t\t}\n\n\t\tlet result: ITerminalInstance | null = null;\n\t\tif (group) {\n\t\t\t// Try to find an existing terminal to split.\n\t\t\t// Even if an existing terminal is found, the split can fail if the terminal width is too small.\n\t\t\tfor (const terminal of values(this.terminals)) {\n\t\t\t\tif (terminal.group === group) {\n\t\t\t\t\tconst originalInstance = terminal.terminal;\n\t\t\t\t\tawait originalInstance.waitForTitle();\n\t\t\t\t\tresult = this.terminalService.splitInstance(originalInstance, launchConfigs);\n\t\t\t\t\tif (result) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!result) {\n\t\t\t// Either no group is used, no terminal with the group exists or splitting an existing terminal failed.\n\t\t\tresult = this.terminalService.createTerminal(launchConfigs);\n\t\t}\n\n\t\tconst terminalKey = result.instanceId.toString();\n\t\tresult.onDisposed((terminal) => {\n\t\t\tlet terminalData = this.terminals[terminalKey];\n\t\t\tif (terminalData) {\n\t\t\t\tdelete this.terminals[terminalKey];\n\t\t\t\tdelete this.sameTaskTerminals[terminalData.lastTask];\n\t\t\t\tthis.idleTaskTerminals.delete(terminalData.lastTask);\n\t\t\t\t// Delete the task now as a work around for cases when the onExit isn't fired.\n\t\t\t\t// This can happen if the terminal wasn't shutdown with an \"immediate\" flag and is expected.\n\t\t\t\t// For correct terminal re-use, the task needs to be deleted immediately.\n\t\t\t\t// Note that this shouldn't be a problem anymore since user initiated terminal kills are now immediate.\n\t\t\t\tconst mapKey = task.getMapKey();\n\t\t\t\tthis.removeFromActiveTasks(task);\n\t\t\t\tif (this.busyTasks[mapKey]) {\n\t\t\t\t\tdelete this.busyTasks[mapKey];\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tthis.terminals[terminalKey] = { terminal: result, lastTask: taskKey, group };\n\t\treturn [result, commandExecutable, undefined];\n\t}\n\n\tprivate buildShellCommandLine(platform: Platform.Platform, shellExecutable: string, shellOptions: ShellConfiguration | undefined, command: CommandString, originalCommand: CommandString | undefined, args: CommandString[]): string {\n\t\tlet basename = path.parse(shellExecutable).name.toLowerCase();\n\t\tlet shellQuoteOptions = this.getQuotingOptions(basename, shellOptions, platform);\n\n\t\tfunction needsQuotes(value: string): boolean {\n\t\t\tif (value.length >= 2) {\n\t\t\t\tlet first = value[0] === shellQuoteOptions.strong ? shellQuoteOptions.strong : value[0] === shellQuoteOptions.weak ? shellQuoteOptions.weak : undefined;\n\t\t\t\tif (first === value[value.length - 1]) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet quote: string | undefined;\n\t\t\tfor (let i = 0; i < value.length; i++) {\n\t\t\t\t// We found the end quote.\n\t\t\t\tlet ch = value[i];\n\t\t\t\tif (ch === quote) {\n\t\t\t\t\tquote = undefined;\n\t\t\t\t} else if (quote !== undefined) {\n\t\t\t\t\t// skip the character. We are quoted.\n\t\t\t\t\tcontinue;\n\t\t\t\t} else if (ch === shellQuoteOptions.escape) {\n\t\t\t\t\t// Skip the next character\n\t\t\t\t\ti++;\n\t\t\t\t} else if (ch === shellQuoteOptions.strong || ch === shellQuoteOptions.weak) {\n\t\t\t\t\tquote = ch;\n\t\t\t\t} else if (ch === ' ') {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\tfunction quote(value: string, kind: ShellQuoting): [string, boolean] {\n\t\t\tif (kind === ShellQuoting.Strong && shellQuoteOptions.strong) {\n\t\t\t\treturn [shellQuoteOptions.strong + value + shellQuoteOptions.strong, true];\n\t\t\t} else if (kind === ShellQuoting.Weak && shellQuoteOptions.weak) {\n\t\t\t\treturn [shellQuoteOptions.weak + value + shellQuoteOptions.weak, true];\n\t\t\t} else if (kind === ShellQuoting.Escape && shellQuoteOptions.escape) {\n\t\t\t\tif (Types.isString(shellQuoteOptions.escape)) {\n\t\t\t\t\treturn [value.replace(/ /g, shellQuoteOptions.escape + ' '), true];\n\t\t\t\t} else {\n\t\t\t\t\tlet buffer: string[] = [];\n\t\t\t\t\tfor (let ch of shellQuoteOptions.escape.charsToEscape) {\n\t\t\t\t\t\tbuffer.push(`\\\\${ch}`);\n\t\t\t\t\t}\n\t\t\t\t\tlet regexp: RegExp = new RegExp('[' + buffer.join(',') + ']', 'g');\n\t\t\t\t\tlet escapeChar = shellQuoteOptions.escape.escapeChar;\n\t\t\t\t\treturn [value.replace(regexp, (match) => escapeChar + match), true];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn [value, false];\n\t\t}\n\n\t\tfunction quoteIfNecessary(value: CommandString): [string, boolean] {\n\t\t\tif (Types.isString(value)) {\n\t\t\t\tif (needsQuotes(value)) {\n\t\t\t\t\treturn quote(value, ShellQuoting.Strong);\n\t\t\t\t} else {\n\t\t\t\t\treturn [value, false];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn quote(value.value, value.quoting);\n\t\t\t}\n\t\t}\n\n\t\t// If we have no args and the command is a string then use the command to stay backwards compatible with the old command line\n\t\t// model. To allow variable resolving with spaces we do continue if the resolved value is different than the original one\n\t\t// and the resolved one needs quoting.\n\t\tif ((!args || args.length === 0) && Types.isString(command) && (command === originalCommand as string || needsQuotes(originalCommand as string))) {\n\t\t\treturn command;\n\t\t}\n\n\t\tlet result: string[] = [];\n\t\tlet commandQuoted = false;\n\t\tlet argQuoted = false;\n\t\tlet value: string;\n\t\tlet quoted: boolean;\n\t\t[value, quoted] = quoteIfNecessary(command);\n\t\tresult.push(value);\n\t\tcommandQuoted = quoted;\n\t\tfor (let arg of args) {\n\t\t\t[value, quoted] = quoteIfNecessary(arg);\n\t\t\tresult.push(value);\n\t\t\targQuoted = argQuoted || quoted;\n\t\t}\n\n\t\tlet commandLine = result.join(' ');\n\t\t// There are special rules quoted command line in cmd.exe\n\t\tif (platform === Platform.Platform.Windows) {\n\t\t\tif (basename === 'cmd' && commandQuoted && argQuoted) {\n\t\t\t\tcommandLine = '\"' + commandLine + '\"';\n\t\t\t} else if ((basename === 'powershell' || basename === 'pwsh') && commandQuoted) {\n\t\t\t\tcommandLine = '& ' + commandLine;\n\t\t\t}\n\t\t}\n\n\t\treturn commandLine;\n\t}\n\n\tprivate getQuotingOptions(shellBasename: string, shellOptions: ShellConfiguration | undefined, platform: Platform.Platform): ShellQuotingOptions {\n\t\tif (shellOptions && shellOptions.quoting) {\n\t\t\treturn shellOptions.quoting;\n\t\t}\n\t\treturn TerminalTaskSystem.shellQuotes[shellBasename] || TerminalTaskSystem.osShellQuotes[Platform.PlatformToString(platform)];\n\t}\n\n\tprivate collectTaskVariables(variables: Set<string>, task: CustomTask | ContributedTask): void {\n\t\tif (task.command && task.command.name) {\n\t\t\tthis.collectCommandVariables(variables, task.command, task);\n\t\t}\n\t\tthis.collectMatcherVariables(variables, task.configurationProperties.problemMatchers);\n\n\t\tif (task.command.runtime === RuntimeType.CustomExecution && CustomTask.is(task)) {\n\t\t\tthis.collectDefinitionVariables(variables, task._source.config.element);\n\t\t}\n\t}\n\n\tprivate collectDefinitionVariables(variables: Set<string>, definition: any): void {\n\t\tif (Types.isString(definition)) {\n\t\t\tthis.collectVariables(variables, definition);\n\t\t} else if (Types.isArray(definition)) {\n\t\t\tdefinition.forEach((element: any) => this.collectDefinitionVariables(variables, element));\n\t\t} else if (Types.isObject(definition)) {\n\t\t\tfor (const key in definition) {\n\t\t\t\tthis.collectDefinitionVariables(variables, definition[key]);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate collectCommandVariables(variables: Set<string>, command: CommandConfiguration, task: CustomTask | ContributedTask): void {\n\t\t// The custom execution should have everything it needs already as it provided\n\t\t// the callback.\n\t\tif (command.runtime === RuntimeType.CustomExecution) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (command.name === undefined) {\n\t\t\tthrow new Error('Command name should never be undefined here.');\n\t\t}\n\t\tthis.collectVariables(variables, command.name);\n\t\tif (command.args) {\n\t\t\tcommand.args.forEach(arg => this.collectVariables(variables, arg));\n\t\t}\n\t\t// Try to get a scope.\n\t\tconst scope = (<ExtensionTaskSource>task._source).scope;\n\t\tif (scope !== TaskScope.Global) {\n\t\t\tvariables.add('${workspaceFolder}');\n\t\t}\n\t\tif (command.options) {\n\t\t\tlet options = command.options;\n\t\t\tif (options.cwd) {\n\t\t\t\tthis.collectVariables(variables, options.cwd);\n\t\t\t}\n\t\t\tconst optionsEnv = options.env;\n\t\t\tif (optionsEnv) {\n\t\t\t\tObject.keys(optionsEnv).forEach((key) => {\n\t\t\t\t\tlet value: any = optionsEnv[key];\n\t\t\t\t\tif (Types.isString(value)) {\n\t\t\t\t\t\tthis.collectVariables(variables, value);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (options.shell) {\n\t\t\t\tif (options.shell.executable) {\n\t\t\t\t\tthis.collectVariables(variables, options.shell.executable);\n\t\t\t\t}\n\t\t\t\tif (options.shell.args) {\n\t\t\t\t\toptions.shell.args.forEach(arg => this.collectVariables(variables, arg));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate collectMatcherVariables(variables: Set<string>, values: Array<string | ProblemMatcher> | undefined): void {\n\t\tif (values === undefined || values === null || values.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tvalues.forEach((value) => {\n\t\t\tlet matcher: ProblemMatcher;\n\t\t\tif (Types.isString(value)) {\n\t\t\t\tif (value[0] === '$') {\n\t\t\t\t\tmatcher = ProblemMatcherRegistry.get(value.substring(1));\n\t\t\t\t} else {\n\t\t\t\t\tmatcher = ProblemMatcherRegistry.get(value);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmatcher = value;\n\t\t\t}\n\t\t\tif (matcher && matcher.filePrefix) {\n\t\t\t\tthis.collectVariables(variables, matcher.filePrefix);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate collectVariables(variables: Set<string>, value: string | CommandString): void {\n\t\tlet string: string = Types.isString(value) ? value : value.value;\n\t\tlet r = /\\$\\{(.*?)\\}/g;\n\t\tlet matches: RegExpExecArray | null;\n\t\tdo {\n\t\t\tmatches = r.exec(string);\n\t\t\tif (matches) {\n\t\t\t\tvariables.add(matches[0]);\n\t\t\t}\n\t\t} while (matches);\n\t}\n\n\tprivate async resolveCommandAndArgs(resolver: VariableResolver, commandConfig: CommandConfiguration): Promise<{ command: CommandString, args: CommandString[] }> {\n\t\t// First we need to use the command args:\n\t\tlet args: CommandString[] = commandConfig.args ? commandConfig.args.slice() : [];\n\t\targs = await this.resolveVariables(resolver, args);\n\t\tlet command: CommandString = await this.resolveVariable(resolver, commandConfig.name);\n\t\treturn { command, args };\n\t}\n\n\tprivate async resolveVariables(resolver: VariableResolver, value: string[]): Promise<string[]>;\n\tprivate async resolveVariables(resolver: VariableResolver, value: CommandString[]): Promise<CommandString[]>;\n\tprivate async resolveVariables(resolver: VariableResolver, value: CommandString[]): Promise<CommandString[]> {\n\t\treturn Promise.all(value.map(s => this.resolveVariable(resolver, s)));\n\t}\n\n\tprivate async resolveMatchers(resolver: VariableResolver, values: Array<string | ProblemMatcher> | undefined): Promise<ProblemMatcher[]> {\n\t\tif (values === undefined || values === null || values.length === 0) {\n\t\t\treturn [];\n\t\t}\n\t\tlet result: ProblemMatcher[] = [];\n\t\tfor (const value of values) {\n\t\t\tlet matcher: ProblemMatcher;\n\t\t\tif (Types.isString(value)) {\n\t\t\t\tif (value[0] === '$') {\n\t\t\t\t\tmatcher = ProblemMatcherRegistry.get(value.substring(1));\n\t\t\t\t} else {\n\t\t\t\t\tmatcher = ProblemMatcherRegistry.get(value);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmatcher = value;\n\t\t\t}\n\t\t\tif (!matcher) {\n\t\t\t\tthis.appendOutput(nls.localize('unknownProblemMatcher', 'Problem matcher {0} can\\'t be resolved. The matcher will be ignored'));\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tlet taskSystemInfo: TaskSystemInfo | undefined = resolver.taskSystemInfo;\n\t\t\tlet hasFilePrefix = matcher.filePrefix !== undefined;\n\t\t\tlet hasUriProvider = taskSystemInfo !== undefined && taskSystemInfo.uriProvider !== undefined;\n\t\t\tif (!hasFilePrefix && !hasUriProvider) {\n\t\t\t\tresult.push(matcher);\n\t\t\t} else {\n\t\t\t\tlet copy = Objects.deepClone(matcher);\n\t\t\t\tif (hasUriProvider && (taskSystemInfo !== undefined)) {\n\t\t\t\t\tcopy.uriProvider = taskSystemInfo.uriProvider;\n\t\t\t\t}\n\t\t\t\tif (hasFilePrefix) {\n\t\t\t\t\tcopy.filePrefix = await this.resolveVariable(resolver, copy.filePrefix);\n\t\t\t\t}\n\t\t\t\tresult.push(copy);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate async resolveVariable(resolver: VariableResolver, value: string | undefined): Promise<string>;\n\tprivate async resolveVariable(resolver: VariableResolver, value: CommandString | undefined): Promise<CommandString>;\n\tprivate async resolveVariable(resolver: VariableResolver, value: CommandString | undefined): Promise<CommandString> {\n\t\t// TODO@Dirk Task.getWorkspaceFolder should return a WorkspaceFolder that is defined in workspace.ts\n\t\tif (Types.isString(value)) {\n\t\t\treturn resolver.resolve(value);\n\t\t} else if (value !== undefined) {\n\t\t\treturn {\n\t\t\t\tvalue: await resolver.resolve(value.value),\n\t\t\t\tquoting: value.quoting\n\t\t\t};\n\t\t} else { // This should never happen\n\t\t\tthrow new Error('Should never try to resolve undefined.');\n\t\t}\n\t}\n\n\tprivate async resolveOptions(resolver: VariableResolver, options: CommandOptions | undefined): Promise<CommandOptions> {\n\t\tif (options === undefined || options === null) {\n\t\t\tlet cwd: string | undefined;\n\t\t\ttry {\n\t\t\t\tcwd = await this.resolveVariable(resolver, '${workspaceFolder}');\n\t\t\t} catch (e) {\n\t\t\t\t// No workspace\n\t\t\t}\n\t\t\treturn { cwd };\n\t\t}\n\t\tlet result: CommandOptions = Types.isString(options.cwd)\n\t\t\t? { cwd: await this.resolveVariable(resolver, options.cwd) }\n\t\t\t: { cwd: await this.resolveVariable(resolver, '${workspaceFolder}') };\n\t\tif (options.env) {\n\t\t\tresult.env = Object.create(null);\n\t\t\tfor (const key of Object.keys(options.env)) {\n\t\t\t\tlet value: any = options.env![key];\n\t\t\t\tif (Types.isString(value)) {\n\t\t\t\t\tresult.env![key] = await this.resolveVariable(resolver, value);\n\t\t\t\t} else {\n\t\t\t\t\tresult.env![key] = value.toString();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate static WellKnowCommands: IStringDictionary<boolean> = {\n\t\t'ant': true,\n\t\t'cmake': true,\n\t\t'eslint': true,\n\t\t'gradle': true,\n\t\t'grunt': true,\n\t\t'gulp': true,\n\t\t'jake': true,\n\t\t'jenkins': true,\n\t\t'jshint': true,\n\t\t'make': true,\n\t\t'maven': true,\n\t\t'msbuild': true,\n\t\t'msc': true,\n\t\t'nmake': true,\n\t\t'npm': true,\n\t\t'rake': true,\n\t\t'tsc': true,\n\t\t'xbuild': true\n\t};\n\n\tpublic getSanitizedCommand(cmd: string): string {\n\t\tlet result = cmd.toLowerCase();\n\t\tlet index = result.lastIndexOf(path.sep);\n\t\tif (index !== -1) {\n\t\t\tresult = result.substring(index + 1);\n\t\t}\n\t\tif (TerminalTaskSystem.WellKnowCommands[result]) {\n\t\t\treturn result;\n\t\t}\n\t\treturn 'other';\n\t}\n\n\tprivate appendOutput(output: string): void {\n\t\tconst outputChannel = this.outputService.getChannel(this.outputChannelId);\n\t\tif (outputChannel) {\n\t\t\toutputChannel.append(output);\n\t\t}\n\t}\n}\n"]}