{"version":3,"sources":["vs/workbench/contrib/tasks/browser/runAutomaticTasks.ts"],"names":[],"mappings":"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","file":"runAutomaticTasks.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport * as resources from 'vs/base/common/resources';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { ITaskService, WorkspaceFolderTaskResult } from 'vs/workbench/contrib/tasks/common/taskService';\nimport { forEach } from 'vs/base/common/collections';\nimport { RunOnOptions, Task, TaskRunSource, TaskSource, TaskSourceKind, TASKS_CATEGORY, WorkspaceFileTaskSource, WorkspaceTaskSource } from 'vs/workbench/contrib/tasks/common/tasks';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { INotificationService, Severity } from 'vs/platform/notification/common/notification';\nimport { IQuickPickItem, IQuickInputService } from 'vs/platform/quickinput/common/quickInput';\nimport { Action2 } from 'vs/platform/actions/common/actions';\nimport { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { IWorkspaceTrustManagementService, IWorkspaceTrustRequestService } from 'vs/platform/workspace/common/workspaceTrust';\nimport { ConfigurationTarget } from 'vs/platform/configuration/common/configuration';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { URI } from 'vs/base/common/uri';\n\nconst ARE_AUTOMATIC_TASKS_ALLOWED_IN_WORKSPACE = 'tasks.run.allowAutomatic';\n\nexport class RunAutomaticTasks extends Disposable implements IWorkbenchContribution {\n\tconstructor(\n\t\t@ITaskService private readonly taskService: ITaskService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IWorkspaceTrustManagementService workspaceTrustManagementService: IWorkspaceTrustManagementService,\n\t\t@IWorkspaceTrustRequestService workspaceTrustRequestService: IWorkspaceTrustRequestService) {\n\t\tsuper();\n\t\tconst isFolderAutomaticAllowed = storageService.getBoolean(ARE_AUTOMATIC_TASKS_ALLOWED_IN_WORKSPACE, StorageScope.WORKSPACE, undefined);\n\t\tconst isWorkspaceTrusted = workspaceTrustManagementService.isWorkpaceTrusted();\n\t\tthis.tryRunTasks(isFolderAutomaticAllowed && isWorkspaceTrusted);\n\t}\n\n\tprivate tryRunTasks(isAllowed: boolean | undefined) {\n\t\t// Only run if allowed. Prompting for permission occurs when a user first tries to run a task.\n\t\tif (isAllowed === true) {\n\t\t\tthis.taskService.getWorkspaceTasks(TaskRunSource.FolderOpen).then(workspaceTaskResult => {\n\t\t\t\tlet { tasks } = RunAutomaticTasks.findAutoTasks(this.taskService, workspaceTaskResult);\n\t\t\t\tif (tasks.length > 0) {\n\t\t\t\t\tRunAutomaticTasks.runTasks(this.taskService, tasks);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate static runTasks(taskService: ITaskService, tasks: Array<Task | Promise<Task | undefined>>) {\n\t\ttasks.forEach(task => {\n\t\t\tif (task instanceof Promise) {\n\t\t\t\ttask.then(promiseResult => {\n\t\t\t\t\tif (promiseResult) {\n\t\t\t\t\t\ttaskService.run(promiseResult);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\ttaskService.run(task);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate static getTaskSource(source: TaskSource): URI | undefined {\n\t\tconst taskKind = TaskSourceKind.toConfigurationTarget(source.kind);\n\t\tswitch (taskKind) {\n\t\t\tcase ConfigurationTarget.WORKSPACE_FOLDER: {\n\t\t\t\treturn resources.joinPath((<WorkspaceTaskSource>source).config.workspaceFolder!.uri, (<WorkspaceTaskSource>source).config.file);\n\t\t\t}\n\t\t\tcase ConfigurationTarget.WORKSPACE: {\n\t\t\t\treturn (<WorkspaceFileTaskSource>source).config.workspace?.configuration ?? undefined;\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate static findAutoTasks(taskService: ITaskService, workspaceTaskResult: Map<string, WorkspaceFolderTaskResult>): { tasks: Array<Task | Promise<Task | undefined>>, taskNames: Array<string>, locations: Map<string, URI> } {\n\t\tconst tasks = new Array<Task | Promise<Task | undefined>>();\n\t\tconst taskNames = new Array<string>();\n\t\tconst locations = new Map<string, URI>();\n\n\t\tif (workspaceTaskResult) {\n\t\t\tworkspaceTaskResult.forEach(resultElement => {\n\t\t\t\tif (resultElement.set) {\n\t\t\t\t\tresultElement.set.tasks.forEach(task => {\n\t\t\t\t\t\tif (task.runOptions.runOn === RunOnOptions.folderOpen) {\n\t\t\t\t\t\t\ttasks.push(task);\n\t\t\t\t\t\t\ttaskNames.push(task._label);\n\t\t\t\t\t\t\tconst location = RunAutomaticTasks.getTaskSource(task._source);\n\t\t\t\t\t\t\tif (location) {\n\t\t\t\t\t\t\t\tlocations.set(location.fsPath, location);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tif (resultElement.configurations) {\n\t\t\t\t\tforEach(resultElement.configurations.byIdentifier, (configedTask) => {\n\t\t\t\t\t\tif (configedTask.value.runOptions.runOn === RunOnOptions.folderOpen) {\n\t\t\t\t\t\t\ttasks.push(new Promise<Task | undefined>(resolve => {\n\t\t\t\t\t\t\t\ttaskService.getTask(resultElement.workspaceFolder, configedTask.value._id, true).then(task => resolve(task));\n\t\t\t\t\t\t\t}));\n\t\t\t\t\t\t\tif (configedTask.value._label) {\n\t\t\t\t\t\t\t\ttaskNames.push(configedTask.value._label);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ttaskNames.push(configedTask.value.configures.task);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst location = RunAutomaticTasks.getTaskSource(configedTask.value._source);\n\t\t\t\t\t\t\tif (location) {\n\t\t\t\t\t\t\t\tlocations.set(location.fsPath, location);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn { tasks, taskNames, locations };\n\t}\n\n\tpublic static async promptForPermission(taskService: ITaskService, storageService: IStorageService, notificationService: INotificationService, workspaceTrustManagementService: IWorkspaceTrustManagementService,\n\t\topenerService: IOpenerService, workspaceTaskResult: Map<string, WorkspaceFolderTaskResult>) {\n\t\tconst isWorkspaceTrusted = workspaceTrustManagementService.isWorkpaceTrusted;\n\t\tif (!isWorkspaceTrusted) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isFolderAutomaticAllowed = storageService.getBoolean(ARE_AUTOMATIC_TASKS_ALLOWED_IN_WORKSPACE, StorageScope.WORKSPACE, undefined);\n\t\tif (isFolderAutomaticAllowed !== undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet { tasks, taskNames, locations } = RunAutomaticTasks.findAutoTasks(taskService, workspaceTaskResult);\n\t\tif (taskNames.length > 0) {\n\t\t\t// We have automatic tasks, prompt to allow.\n\t\t\tthis.showPrompt(notificationService, storageService, taskService, openerService, taskNames, locations).then(allow => {\n\t\t\t\tif (allow) {\n\t\t\t\t\tRunAutomaticTasks.runTasks(taskService, tasks);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate static showPrompt(notificationService: INotificationService, storageService: IStorageService, taskService: ITaskService,\n\t\topenerService: IOpenerService, taskNames: Array<string>, locations: Map<string, URI>): Promise<boolean> {\n\t\treturn new Promise<boolean>(resolve => {\n\t\t\tnotificationService.prompt(Severity.Info, nls.localize('tasks.run.allowAutomatic',\n\t\t\t\t\"This workspace has tasks ({0}) defined ({1}) that run automatically when you open this workspace. Do you allow automatic tasks to run when you open this workspace?\",\n\t\t\t\ttaskNames.join(', '),\n\t\t\t\tArray.from(locations.keys()).join(', ')\n\t\t\t),\n\t\t\t\t[{\n\t\t\t\t\tlabel: nls.localize('allow', \"Allow and run\"),\n\t\t\t\t\trun: () => {\n\t\t\t\t\t\tresolve(true);\n\t\t\t\t\t\tstorageService.store(ARE_AUTOMATIC_TASKS_ALLOWED_IN_WORKSPACE, true, StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: nls.localize('disallow', \"Disallow\"),\n\t\t\t\t\trun: () => {\n\t\t\t\t\t\tresolve(false);\n\t\t\t\t\t\tstorageService.store(ARE_AUTOMATIC_TASKS_ALLOWED_IN_WORKSPACE, false, StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: locations.size === 1 ? nls.localize('openTask', \"Open file\") : nls.localize('openTasks', \"Open files\"),\n\t\t\t\t\trun: async () => {\n\t\t\t\t\t\tfor (const location of locations) {\n\t\t\t\t\t\t\tawait openerService.open(location[1]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresolve(false);\n\t\t\t\t\t}\n\t\t\t\t}]\n\t\t\t);\n\t\t});\n\t}\n\n}\n\nexport class ManageAutomaticTaskRunning extends Action2 {\n\n\tpublic static readonly ID = 'workbench.action.tasks.manageAutomaticRunning';\n\tpublic static readonly LABEL = nls.localize('workbench.action.tasks.manageAutomaticRunning', \"Manage Automatic Tasks in Folder\");\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: ManageAutomaticTaskRunning.ID,\n\t\t\ttitle: ManageAutomaticTaskRunning.LABEL,\n\t\t\tcategory: TASKS_CATEGORY\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor): Promise<any> {\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\tconst storageService = accessor.get(IStorageService);\n\t\tconst allowItem: IQuickPickItem = { label: nls.localize('workbench.action.tasks.allowAutomaticTasks', \"Allow Automatic Tasks in Folder\") };\n\t\tconst disallowItem: IQuickPickItem = { label: nls.localize('workbench.action.tasks.disallowAutomaticTasks', \"Disallow Automatic Tasks in Folder\") };\n\t\tconst value = await quickInputService.pick([allowItem, disallowItem], { canPickMany: false });\n\t\tif (!value) {\n\t\t\treturn;\n\t\t}\n\n\t\tstorageService.store(ARE_AUTOMATIC_TASKS_ALLOWED_IN_WORKSPACE, value === allowItem, StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t}\n}\n"]}