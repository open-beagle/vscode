{"version":3,"sources":["vs/workbench/contrib/tasks/browser/tasksQuickAccess.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAgBhG,IAAa,wBAAwB,GAArC,MAAa,wBAAyB,SAAQ,6CAAiD;QAM9F,YACoB,gBAAmC,EAChC,WAAyB,EAChB,oBAA2C,EAC9C,iBAAqC,EACnC,mBAAyC;YAEvE,KAAK,CAAC,wBAAwB,CAAC,MAAM,EAAE;gBACtC,aAAa,EAAE;oBACd,KAAK,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAe,EAAE,IAAmB,CAAC;iBACrD;aACD,CAAC,CAAC;YATmB,gBAAW,GAAX,WAAW,CAAc;YAChB,yBAAoB,GAApB,oBAAoB,CAAuB;YAC9C,sBAAiB,GAAjB,iBAAiB,CAAoB;YACnC,wBAAmB,GAAnB,mBAAmB,CAAsB;YAQvE,IAAI,CAAC,iBAAiB,GAAG,gBAAgB,CAAC,eAAe,CAAC,0CAA0C,CAAC,CAAC;QACvG,CAAC;QAES,KAAK,CAAC,QAAQ,CAAC,MAAc,EAAE,WAA4B,EAAE,KAAwB;YAC9F,0BAA0B;YAC1B,MAAM,IAAI,CAAC,iBAAiB,CAAC;YAE7B,IAAI,KAAK,CAAC,uBAAuB,EAAE;gBAClC,OAAO,EAAE,CAAC;aACV;YAED,MAAM,aAAa,GAAG,IAAI,6BAAa,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;YACvI,MAAM,aAAa,GAAG,MAAM,aAAa,CAAC,kBAAkB,EAAE,CAAC;YAC/D,MAAM,SAAS,GAAwD,EAAE,CAAC;YAE1E,KAAK,MAAM,KAAK,IAAI,aAAa,CAAC,OAAO,EAAE;gBAC1C,MAAM,UAAU,GAAG,CAAA,GAAA,sBAAY,CAAA,CAAC,MAAM,EAAE,KAAK,CAAC,KAAM,CAAC,CAAC;gBACtD,IAAI,CAAC,UAAU,EAAE;oBAChB,SAAS;iBACT;gBAED,IAAI,KAAK,CAAC,IAAI,KAAK,WAAW,EAAE;oBAC/B,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;iBACtB;gBAED,MAAM,IAAI,GAAiE,KAAM,CAAC,IAAK,CAAC;gBACxF,MAAM,gBAAgB,GAAuD,KAAK,CAAC;gBACnF,gBAAgB,CAAC,UAAU,GAAG,EAAE,KAAK,EAAE,UAAU,EAAE,CAAC;gBACpD,gBAAgB,CAAC,OAAO,GAAG,GAAG,EAAE;oBAC/B,IAAI,uBAAe,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;wBAC7B,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;qBAClD;yBAAM,IAAI,kBAAU,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;wBAC/B,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;qBAClC;oBACD,OAAO,iCAAa,CAAC,YAAY,CAAC;gBACnC,CAAC,CAAC;gBACF,gBAAgB,CAAC,MAAM,GAAG,KAAK,IAAI,EAAE;oBACpC,IAAI,CAAA,GAAA,gBAAQ,CAAA,CAAC,IAAI,CAAC,EAAE;wBACnB,6CAA6C;wBAC7C,MAAM,UAAU,GAAG,MAAM,aAAa,CAAC,IAAI,CAAC,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAyB,EAAE,IAAwB,CAAC,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;wBAC5H,IAAI,UAAU,EAAE;4BACf,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,UAAU,EAAE,EAAE,oBAAoB,EAAE,IAAI,EAAE,CAAC,CAAC;yBACjE;qBACD;yBAAM;wBACN,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,oBAAoB,EAAE,IAAI,EAAE,CAAC,CAAC;qBAC9E;gBACF,CAAC,CAAC;gBAEF,SAAS,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;aACjC;YACD,OAAO,SAAS,CAAC;QAClB,CAAC;QAEO,KAAK,CAAC,MAAM,CAAC,IAA4B;YAChD,IAAI,CAAC,uBAAe,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;gBAC9B,OAAO,IAAI,CAAC;aACZ;YAED,OAAO,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAC9C,CAAC;KACD,CAAA;IA7EO,+BAAM,GAAG,OAAO,CAAC;IAFZ,wBAAwB;QAOlC,WAAA,8BAAiB,CAAA;QACjB,WAAA,0BAAY,CAAA;QACZ,WAAA,qCAAqB,CAAA;QACrB,WAAA,+BAAkB,CAAA;QAClB,WAAA,mCAAoB,CAAA;OAXV,wBAAwB,CA+EpC;IA/EY,4DAAwB","file":"tasksQuickAccess.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { IQuickPickSeparator, IQuickInputService } from 'vs/platform/quickinput/common/quickInput';\nimport { IPickerQuickAccessItem, PickerQuickAccessProvider, TriggerAction } from 'vs/platform/quickinput/browser/pickerQuickAccess';\nimport { matchesFuzzy } from 'vs/base/common/filters';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { ITaskService, Task } from 'vs/workbench/contrib/tasks/common/taskService';\nimport { CustomTask, ContributedTask, ConfiguringTask } from 'vs/workbench/contrib/tasks/common/tasks';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { TaskQuickPick, TaskTwoLevelQuickPickEntry } from 'vs/workbench/contrib/tasks/browser/taskQuickPick';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { isString } from 'vs/base/common/types';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\n\nexport class TasksQuickAccessProvider extends PickerQuickAccessProvider<IPickerQuickAccessItem> {\n\n\tstatic PREFIX = 'task ';\n\n\tprivate activationPromise: Promise<void>;\n\n\tconstructor(\n\t\t@IExtensionService extensionService: IExtensionService,\n\t\t@ITaskService private taskService: ITaskService,\n\t\t@IConfigurationService private configurationService: IConfigurationService,\n\t\t@IQuickInputService private quickInputService: IQuickInputService,\n\t\t@INotificationService private notificationService: INotificationService\n\t) {\n\t\tsuper(TasksQuickAccessProvider.PREFIX, {\n\t\t\tnoResultsPick: {\n\t\t\t\tlabel: localize('noTaskResults', \"No matching tasks\")\n\t\t\t}\n\t\t});\n\n\t\tthis.activationPromise = extensionService.activateByEvent('onCommand:workbench.action.tasks.runTask');\n\t}\n\n\tprotected async getPicks(filter: string, disposables: DisposableStore, token: CancellationToken): Promise<Array<IPickerQuickAccessItem | IQuickPickSeparator>> {\n\t\t// always await extensions\n\t\tawait this.activationPromise;\n\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst taskQuickPick = new TaskQuickPick(this.taskService, this.configurationService, this.quickInputService, this.notificationService);\n\t\tconst topLevelPicks = await taskQuickPick.getTopLevelEntries();\n\t\tconst taskPicks: Array<IPickerQuickAccessItem | IQuickPickSeparator> = [];\n\n\t\tfor (const entry of topLevelPicks.entries) {\n\t\t\tconst highlights = matchesFuzzy(filter, entry.label!);\n\t\t\tif (!highlights) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (entry.type === 'separator') {\n\t\t\t\ttaskPicks.push(entry);\n\t\t\t}\n\n\t\t\tconst task: Task | ConfiguringTask | string = (<TaskTwoLevelQuickPickEntry>entry).task!;\n\t\t\tconst quickAccessEntry: IPickerQuickAccessItem = <TaskTwoLevelQuickPickEntry>entry;\n\t\t\tquickAccessEntry.highlights = { label: highlights };\n\t\t\tquickAccessEntry.trigger = () => {\n\t\t\t\tif (ContributedTask.is(task)) {\n\t\t\t\t\tthis.taskService.customize(task, undefined, true);\n\t\t\t\t} else if (CustomTask.is(task)) {\n\t\t\t\t\tthis.taskService.openConfig(task);\n\t\t\t\t}\n\t\t\t\treturn TriggerAction.CLOSE_PICKER;\n\t\t\t};\n\t\t\tquickAccessEntry.accept = async () => {\n\t\t\t\tif (isString(task)) {\n\t\t\t\t\t// switch to quick pick and show second level\n\t\t\t\t\tconst showResult = await taskQuickPick.show(localize('TaskService.pickRunTask', 'Select the task to run'), undefined, task);\n\t\t\t\t\tif (showResult) {\n\t\t\t\t\t\tthis.taskService.run(showResult, { attachProblemMatcher: true });\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.taskService.run(await this.toTask(task), { attachProblemMatcher: true });\n\t\t\t\t}\n\t\t\t};\n\n\t\t\ttaskPicks.push(quickAccessEntry);\n\t\t}\n\t\treturn taskPicks;\n\t}\n\n\tprivate async toTask(task: Task | ConfiguringTask): Promise<Task | undefined> {\n\t\tif (!ConfiguringTask.is(task)) {\n\t\t\treturn task;\n\t\t}\n\n\t\treturn this.taskService.tryResolveTask(task);\n\t}\n}\n"]}