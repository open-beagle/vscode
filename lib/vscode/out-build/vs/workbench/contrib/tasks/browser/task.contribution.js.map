{"version":3,"sources":["vs/workbench/contrib/tasks/browser/task.contribution.ts"],"names":[],"mappings":"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","file":"task.contribution.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\n\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { MenuRegistry, MenuId, registerAction2 } from 'vs/platform/actions/common/actions';\n\nimport { ProblemMatcherRegistry } from 'vs/workbench/contrib/tasks/common/problemMatcher';\nimport { IProgressService, ProgressLocation } from 'vs/platform/progress/common/progress';\n\nimport * as jsonContributionRegistry from 'vs/platform/jsonschemas/common/jsonContributionRegistry';\nimport { IJSONSchema } from 'vs/base/common/jsonSchema';\n\nimport { StatusbarAlignment, IStatusbarService, IStatusbarEntryAccessor, IStatusbarEntry } from 'vs/workbench/services/statusbar/common/statusbar';\n\nimport { IOutputChannelRegistry, Extensions as OutputExt } from 'vs/workbench/services/output/common/output';\n\nimport { TaskEvent, TaskEventKind, TaskGroup, TASKS_CATEGORY, TASK_RUNNING_STATE } from 'vs/workbench/contrib/tasks/common/tasks';\nimport { ITaskService, ProcessExecutionSupportedContext, ShellExecutionSupportedContext } from 'vs/workbench/contrib/tasks/common/taskService';\n\nimport { Extensions as WorkbenchExtensions, IWorkbenchContributionsRegistry, IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { RunAutomaticTasks, ManageAutomaticTaskRunning } from 'vs/workbench/contrib/tasks/browser/runAutomaticTasks';\nimport { KeybindingsRegistry, KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { KeyMod, KeyCode } from 'vs/base/common/keyCodes';\nimport schemaVersion1 from '../common/jsonSchema_v1';\nimport schemaVersion2, { updateProblemMatchers, updateTaskDefinitions } from '../common/jsonSchema_v2';\nimport { AbstractTaskService, ConfigureTaskAction } from 'vs/workbench/contrib/tasks/browser/abstractTaskService';\nimport { tasksSchemaId } from 'vs/workbench/services/configuration/common/configuration';\nimport { Extensions as ConfigurationExtensions, IConfigurationRegistry } from 'vs/platform/configuration/common/configurationRegistry';\nimport { WorkbenchStateContext } from 'vs/workbench/browser/contextkeys';\nimport { IQuickAccessRegistry, Extensions as QuickAccessExtensions } from 'vs/platform/quickinput/common/quickAccess';\nimport { TasksQuickAccessProvider } from 'vs/workbench/contrib/tasks/browser/tasksQuickAccess';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { TaskDefinitionRegistry } from 'vs/workbench/contrib/tasks/common/taskDefinitionRegistry';\n\nconst SHOW_TASKS_COMMANDS_CONTEXT = ContextKeyExpr.or(ShellExecutionSupportedContext, ProcessExecutionSupportedContext);\n\nconst workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench);\nworkbenchRegistry.registerWorkbenchContribution(RunAutomaticTasks, LifecyclePhase.Eventually);\n\nregisterAction2(ManageAutomaticTaskRunning);\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: ManageAutomaticTaskRunning.ID,\n\t\ttitle: ManageAutomaticTaskRunning.LABEL,\n\t\tcategory: TASKS_CATEGORY\n\t},\n\twhen: SHOW_TASKS_COMMANDS_CONTEXT\n});\n\nexport class TaskStatusBarContributions extends Disposable implements IWorkbenchContribution {\n\tprivate runningTasksStatusItem: IStatusbarEntryAccessor | undefined;\n\tprivate activeTasksCount: number = 0;\n\n\tconstructor(\n\t\t@ITaskService private readonly taskService: ITaskService,\n\t\t@IStatusbarService private readonly statusbarService: IStatusbarService,\n\t\t@IProgressService private readonly progressService: IProgressService\n\t) {\n\t\tsuper();\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tlet promise: Promise<void> | undefined = undefined;\n\t\tlet resolver: (value?: void | Thenable<void>) => void;\n\t\tthis.taskService.onDidStateChange(event => {\n\t\t\tif (event.kind === TaskEventKind.Changed) {\n\t\t\t\tthis.updateRunningTasksStatus();\n\t\t\t}\n\n\t\t\tif (!this.ignoreEventForUpdateRunningTasksCount(event)) {\n\t\t\t\tswitch (event.kind) {\n\t\t\t\t\tcase TaskEventKind.Active:\n\t\t\t\t\t\tthis.activeTasksCount++;\n\t\t\t\t\t\tif (this.activeTasksCount === 1) {\n\t\t\t\t\t\t\tif (!promise) {\n\t\t\t\t\t\t\t\tpromise = new Promise<void>((resolve) => {\n\t\t\t\t\t\t\t\t\tresolver = resolve;\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase TaskEventKind.Inactive:\n\t\t\t\t\t\t// Since the exiting of the sub process is communicated async we can't order inactive and terminate events.\n\t\t\t\t\t\t// So try to treat them accordingly.\n\t\t\t\t\t\tif (this.activeTasksCount > 0) {\n\t\t\t\t\t\t\tthis.activeTasksCount--;\n\t\t\t\t\t\t\tif (this.activeTasksCount === 0) {\n\t\t\t\t\t\t\t\tif (promise && resolver!) {\n\t\t\t\t\t\t\t\t\tresolver!();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase TaskEventKind.Terminated:\n\t\t\t\t\t\tif (this.activeTasksCount !== 0) {\n\t\t\t\t\t\t\tthis.activeTasksCount = 0;\n\t\t\t\t\t\t\tif (promise && resolver!) {\n\t\t\t\t\t\t\t\tresolver!();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (promise && (event.kind === TaskEventKind.Active) && (this.activeTasksCount === 1)) {\n\t\t\t\tthis.progressService.withProgress({ location: ProgressLocation.Window, command: 'workbench.action.tasks.showTasks' }, progress => {\n\t\t\t\t\tprogress.report({ message: nls.localize('building', 'Building...') });\n\t\t\t\t\treturn promise!;\n\t\t\t\t}).then(() => {\n\t\t\t\t\tpromise = undefined;\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async updateRunningTasksStatus(): Promise<void> {\n\t\tconst tasks = await this.taskService.getActiveTasks();\n\t\tif (tasks.length === 0) {\n\t\t\tif (this.runningTasksStatusItem) {\n\t\t\t\tthis.runningTasksStatusItem.dispose();\n\t\t\t\tthis.runningTasksStatusItem = undefined;\n\t\t\t}\n\t\t} else {\n\t\t\tconst itemProps: IStatusbarEntry = {\n\t\t\t\ttext: `$(tools) ${tasks.length}`,\n\t\t\t\tariaLabel: nls.localize('numberOfRunningTasks', \"{0} running tasks\", tasks.length),\n\t\t\t\ttooltip: nls.localize('runningTasks', \"Show Running Tasks\"),\n\t\t\t\tcommand: 'workbench.action.tasks.showTasks',\n\t\t\t};\n\n\t\t\tif (!this.runningTasksStatusItem) {\n\t\t\t\tthis.runningTasksStatusItem = this.statusbarService.addEntry(itemProps, 'status.runningTasks', nls.localize('status.runningTasks', \"Running Tasks\"), StatusbarAlignment.LEFT, 49 /* Medium Priority, next to Markers */);\n\t\t\t} else {\n\t\t\t\tthis.runningTasksStatusItem.update(itemProps);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate ignoreEventForUpdateRunningTasksCount(event: TaskEvent): boolean {\n\t\tif (!this.taskService.inTerminal()) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (event.group !== TaskGroup.Build) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (!event.__task) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn event.__task.configurationProperties.problemMatchers === undefined || event.__task.configurationProperties.problemMatchers.length === 0;\n\t}\n}\n\nworkbenchRegistry.registerWorkbenchContribution(TaskStatusBarContributions, LifecyclePhase.Restored);\n\nMenuRegistry.appendMenuItem(MenuId.MenubarTerminalMenu, {\n\tgroup: '2_run',\n\tcommand: {\n\t\tid: 'workbench.action.tasks.runTask',\n\t\ttitle: nls.localize({ key: 'miRunTask', comment: ['&& denotes a mnemonic'] }, \"&&Run Task...\")\n\t},\n\torder: 1,\n\twhen: SHOW_TASKS_COMMANDS_CONTEXT\n});\n\nMenuRegistry.appendMenuItem(MenuId.MenubarTerminalMenu, {\n\tgroup: '2_run',\n\tcommand: {\n\t\tid: 'workbench.action.tasks.build',\n\t\ttitle: nls.localize({ key: 'miBuildTask', comment: ['&& denotes a mnemonic'] }, \"Run &&Build Task...\")\n\t},\n\torder: 2,\n\twhen: SHOW_TASKS_COMMANDS_CONTEXT\n});\n\n// Manage Tasks\nMenuRegistry.appendMenuItem(MenuId.MenubarTerminalMenu, {\n\tgroup: '3_manage',\n\tcommand: {\n\t\tprecondition: TASK_RUNNING_STATE,\n\t\tid: 'workbench.action.tasks.showTasks',\n\t\ttitle: nls.localize({ key: 'miRunningTask', comment: ['&& denotes a mnemonic'] }, \"Show Runnin&&g Tasks...\")\n\t},\n\torder: 1,\n\twhen: SHOW_TASKS_COMMANDS_CONTEXT\n});\n\nMenuRegistry.appendMenuItem(MenuId.MenubarTerminalMenu, {\n\tgroup: '3_manage',\n\tcommand: {\n\t\tprecondition: TASK_RUNNING_STATE,\n\t\tid: 'workbench.action.tasks.restartTask',\n\t\ttitle: nls.localize({ key: 'miRestartTask', comment: ['&& denotes a mnemonic'] }, \"R&&estart Running Task...\")\n\t},\n\torder: 2,\n\twhen: SHOW_TASKS_COMMANDS_CONTEXT\n});\n\nMenuRegistry.appendMenuItem(MenuId.MenubarTerminalMenu, {\n\tgroup: '3_manage',\n\tcommand: {\n\t\tprecondition: TASK_RUNNING_STATE,\n\t\tid: 'workbench.action.tasks.terminate',\n\t\ttitle: nls.localize({ key: 'miTerminateTask', comment: ['&& denotes a mnemonic'] }, \"&&Terminate Task...\")\n\t},\n\torder: 3,\n\twhen: SHOW_TASKS_COMMANDS_CONTEXT\n});\n\n// Configure Tasks\nMenuRegistry.appendMenuItem(MenuId.MenubarTerminalMenu, {\n\tgroup: '4_configure',\n\tcommand: {\n\t\tid: 'workbench.action.tasks.configureTaskRunner',\n\t\ttitle: nls.localize({ key: 'miConfigureTask', comment: ['&& denotes a mnemonic'] }, \"&&Configure Tasks...\")\n\t},\n\torder: 1,\n\twhen: SHOW_TASKS_COMMANDS_CONTEXT\n});\n\nMenuRegistry.appendMenuItem(MenuId.MenubarTerminalMenu, {\n\tgroup: '4_configure',\n\tcommand: {\n\t\tid: 'workbench.action.tasks.configureDefaultBuildTask',\n\t\ttitle: nls.localize({ key: 'miConfigureBuildTask', comment: ['&& denotes a mnemonic'] }, \"Configure De&&fault Build Task...\")\n\t},\n\torder: 2,\n\twhen: SHOW_TASKS_COMMANDS_CONTEXT\n});\n\n\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: 'workbench.action.tasks.openWorkspaceFileTasks',\n\t\ttitle: { value: nls.localize('workbench.action.tasks.openWorkspaceFileTasks', \"Open Workspace Tasks\"), original: 'Open Workspace Tasks' },\n\t\tcategory: TASKS_CATEGORY\n\t},\n\twhen: ContextKeyExpr.and(WorkbenchStateContext.isEqualTo('workspace'), SHOW_TASKS_COMMANDS_CONTEXT)\n});\n\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: ConfigureTaskAction.ID,\n\t\ttitle: { value: ConfigureTaskAction.TEXT, original: 'Configure Task' },\n\t\tcategory: TASKS_CATEGORY\n\t},\n\twhen: SHOW_TASKS_COMMANDS_CONTEXT\n});\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: 'workbench.action.tasks.showLog',\n\t\ttitle: { value: nls.localize('ShowLogAction.label', \"Show Task Log\"), original: 'Show Task Log' },\n\t\tcategory: TASKS_CATEGORY\n\t},\n\twhen: SHOW_TASKS_COMMANDS_CONTEXT\n});\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: 'workbench.action.tasks.runTask',\n\t\ttitle: { value: nls.localize('RunTaskAction.label', \"Run Task\"), original: 'Run Task' },\n\t\tcategory: TASKS_CATEGORY\n\t}\n});\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: 'workbench.action.tasks.reRunTask',\n\t\ttitle: { value: nls.localize('ReRunTaskAction.label', \"Rerun Last Task\"), original: 'Rerun Last Task' },\n\t\tcategory: TASKS_CATEGORY\n\t},\n\twhen: SHOW_TASKS_COMMANDS_CONTEXT\n});\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: 'workbench.action.tasks.restartTask',\n\t\ttitle: { value: nls.localize('RestartTaskAction.label', \"Restart Running Task\"), original: 'Restart Running Task' },\n\t\tcategory: TASKS_CATEGORY\n\t},\n\twhen: SHOW_TASKS_COMMANDS_CONTEXT\n});\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: 'workbench.action.tasks.showTasks',\n\t\ttitle: { value: nls.localize('ShowTasksAction.label', \"Show Running Tasks\"), original: 'Show Running Tasks' },\n\t\tcategory: TASKS_CATEGORY\n\t},\n\twhen: SHOW_TASKS_COMMANDS_CONTEXT\n});\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: 'workbench.action.tasks.terminate',\n\t\ttitle: { value: nls.localize('TerminateAction.label', \"Terminate Task\"), original: 'Terminate Task' },\n\t\tcategory: TASKS_CATEGORY\n\t},\n\twhen: SHOW_TASKS_COMMANDS_CONTEXT\n});\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: 'workbench.action.tasks.build',\n\t\ttitle: { value: nls.localize('BuildAction.label', \"Run Build Task\"), original: 'Run Build Task' },\n\t\tcategory: TASKS_CATEGORY\n\t},\n\twhen: SHOW_TASKS_COMMANDS_CONTEXT\n});\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: 'workbench.action.tasks.test',\n\t\ttitle: { value: nls.localize('TestAction.label', \"Run Test Task\"), original: 'Run Test Task' },\n\t\tcategory: TASKS_CATEGORY\n\t},\n\twhen: SHOW_TASKS_COMMANDS_CONTEXT\n});\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: 'workbench.action.tasks.configureDefaultBuildTask',\n\t\ttitle: {\n\t\t\tvalue: nls.localize('ConfigureDefaultBuildTask.label', \"Configure Default Build Task\"),\n\t\t\toriginal: 'Configure Default Build Task'\n\t\t},\n\t\tcategory: TASKS_CATEGORY\n\t},\n\twhen: SHOW_TASKS_COMMANDS_CONTEXT\n});\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: 'workbench.action.tasks.configureDefaultTestTask',\n\t\ttitle: {\n\t\t\tvalue: nls.localize('ConfigureDefaultTestTask.label', \"Configure Default Test Task\"),\n\t\t\toriginal: 'Configure Default Test Task'\n\t\t},\n\t\tcategory: TASKS_CATEGORY\n\t},\n\twhen: SHOW_TASKS_COMMANDS_CONTEXT\n});\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: 'workbench.action.tasks.openUserTasks',\n\t\ttitle: {\n\t\t\tvalue: nls.localize('workbench.action.tasks.openUserTasks', \"Open User Tasks\"),\n\t\t\toriginal: 'Open User Tasks'\n\t\t}, category: TASKS_CATEGORY\n\t},\n\twhen: SHOW_TASKS_COMMANDS_CONTEXT\n});\n// MenuRegistry.addCommand( { id: 'workbench.action.tasks.rebuild', title: nls.localize('RebuildAction.label', 'Run Rebuild Task'), category: tasksCategory });\n// MenuRegistry.addCommand( { id: 'workbench.action.tasks.clean', title: nls.localize('CleanAction.label', 'Run Clean Task'), category: tasksCategory });\n\nKeybindingsRegistry.registerKeybindingRule({\n\tid: 'workbench.action.tasks.build',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: undefined,\n\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_B\n});\n\n// Tasks Output channel. Register it before using it in Task Service.\nlet outputChannelRegistry = Registry.as<IOutputChannelRegistry>(OutputExt.OutputChannels);\noutputChannelRegistry.registerChannel({ id: AbstractTaskService.OutputChannelId, label: AbstractTaskService.OutputChannelLabel, log: false });\n\n\n// Register Quick Access\nconst quickAccessRegistry = (Registry.as<IQuickAccessRegistry>(QuickAccessExtensions.Quickaccess));\nconst tasksPickerContextKey = 'inTasksPicker';\n\nquickAccessRegistry.registerQuickAccessProvider({\n\tctor: TasksQuickAccessProvider,\n\tprefix: TasksQuickAccessProvider.PREFIX,\n\tcontextKey: tasksPickerContextKey,\n\tplaceholder: nls.localize('tasksQuickAccessPlaceholder', \"Type the name of a task to run.\"),\n\thelpEntries: [{ description: nls.localize('tasksQuickAccessHelp', \"Run Task\"), needsEditor: false }]\n});\n\n// tasks.json validation\nlet schema: IJSONSchema = {\n\tid: tasksSchemaId,\n\tdescription: 'Task definition file',\n\ttype: 'object',\n\tallowTrailingCommas: true,\n\tallowComments: true,\n\tdefault: {\n\t\tversion: '2.0.0',\n\t\ttasks: [\n\t\t\t{\n\t\t\t\tlabel: 'My Task',\n\t\t\t\tcommand: 'echo hello',\n\t\t\t\ttype: 'shell',\n\t\t\t\targs: [],\n\t\t\t\tproblemMatcher: ['$tsc'],\n\t\t\t\tpresentation: {\n\t\t\t\t\treveal: 'always'\n\t\t\t\t},\n\t\t\t\tgroup: 'build'\n\t\t\t}\n\t\t]\n\t}\n};\n\nschema.definitions = {\n\t...schemaVersion1.definitions,\n\t...schemaVersion2.definitions,\n};\nschema.oneOf = [...(schemaVersion2.oneOf || []), ...(schemaVersion1.oneOf || [])];\n\nlet jsonRegistry = <jsonContributionRegistry.IJSONContributionRegistry>Registry.as(jsonContributionRegistry.Extensions.JSONContribution);\njsonRegistry.registerSchema(tasksSchemaId, schema);\n\nProblemMatcherRegistry.onMatcherChanged(() => {\n\tupdateProblemMatchers();\n\tjsonRegistry.notifySchemaChanged(tasksSchemaId);\n});\n\nTaskDefinitionRegistry.onDefinitionsChanged(() => {\n\tupdateTaskDefinitions();\n\tjsonRegistry.notifySchemaChanged(tasksSchemaId);\n});\n\nconst configurationRegistry = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration);\nconfigurationRegistry.registerConfiguration({\n\tid: 'task',\n\torder: 100,\n\ttitle: nls.localize('tasksConfigurationTitle', \"Tasks\"),\n\ttype: 'object',\n\tproperties: {\n\t\t'task.problemMatchers.neverPrompt': {\n\t\t\tmarkdownDescription: nls.localize('task.problemMatchers.neverPrompt', \"Configures whether to show the problem matcher prompt when running a task. Set to `true` to never prompt, or use a dictionary of task types to turn off prompting only for specific task types.\"),\n\t\t\t'oneOf': [\n\t\t\t\t{\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tmarkdownDescription: nls.localize('task.problemMatchers.neverPrompt.boolean', 'Sets problem matcher prompting behavior for all tasks.')\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'object',\n\t\t\t\t\tpatternProperties: {\n\t\t\t\t\t\t'.*': {\n\t\t\t\t\t\t\ttype: 'boolean'\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tmarkdownDescription: nls.localize('task.problemMatchers.neverPrompt.array', 'An object containing task type-boolean pairs to never prompt for problem matchers on.'),\n\t\t\t\t\tdefault: {\n\t\t\t\t\t\t'shell': true\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\tdefault: false\n\t\t},\n\t\t'task.autoDetect': {\n\t\t\tmarkdownDescription: nls.localize('task.autoDetect', \"Controls enablement of `provideTasks` for all task provider extension. If the Tasks: Run Task command is slow, disabling auto detect for task providers may help. Individual extensions may also provide settings that disable auto detection.\"),\n\t\t\ttype: 'string',\n\t\t\tenum: ['on', 'off'],\n\t\t\tdefault: 'on'\n\t\t},\n\t\t'task.slowProviderWarning': {\n\t\t\tmarkdownDescription: nls.localize('task.slowProviderWarning', \"Configures whether a warning is shown when a provider is slow\"),\n\t\t\t'oneOf': [\n\t\t\t\t{\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tmarkdownDescription: nls.localize('task.slowProviderWarning.boolean', 'Sets the slow provider warning for all tasks.')\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'array',\n\t\t\t\t\titems: {\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tmarkdownDescription: nls.localize('task.slowProviderWarning.array', 'An array of task types to never show the slow provider warning.')\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\tdefault: true\n\t\t},\n\t\t'task.quickOpen.history': {\n\t\t\tmarkdownDescription: nls.localize('task.quickOpen.history', \"Controls the number of recent items tracked in task quick open dialog.\"),\n\t\t\ttype: 'number',\n\t\t\tdefault: 30, minimum: 0, maximum: 30\n\t\t},\n\t\t'task.quickOpen.detail': {\n\t\t\tmarkdownDescription: nls.localize('task.quickOpen.detail', \"Controls whether to show the task detail for tasks that have a detail in task quick picks, such as Run Task.\"),\n\t\t\ttype: 'boolean',\n\t\t\tdefault: true\n\t\t},\n\t\t'task.quickOpen.skip': {\n\t\t\ttype: 'boolean',\n\t\t\tdescription: nls.localize('task.quickOpen.skip', \"Controls whether the task quick pick is skipped when there is only one task to pick from.\"),\n\t\t\tdefault: false\n\t\t},\n\t\t'task.quickOpen.showAll': {\n\t\t\ttype: 'boolean',\n\t\t\tdescription: nls.localize('task.quickOpen.showAll', \"Causes the Tasks: Run Task command to use the slower \\\"show all\\\" behavior instead of the faster two level picker where tasks are grouped by provider.\"),\n\t\t\tdefault: false\n\t\t},\n\t\t'task.saveBeforeRun': {\n\t\t\tmarkdownDescription: nls.localize(\n\t\t\t\t'task.saveBeforeRun',\n\t\t\t\t'Save all dirty editors before running a task.'\n\t\t\t),\n\t\t\ttype: 'string',\n\t\t\tenum: ['always', 'never', 'prompt'],\n\t\t\tenumDescriptions: [\n\t\t\t\tnls.localize('task.saveBeforeRun.always', 'Always saves all editors before running.'),\n\t\t\t\tnls.localize('task.saveBeforeRun.never', 'Never saves editors before running.'),\n\t\t\t\tnls.localize('task.SaveBeforeRun.prompt', 'Prompts whether to save editors before running.'),\n\t\t\t],\n\t\t\tdefault: 'always',\n\t\t},\n\t}\n});\n"]}