{"version":3,"sources":["vs/workbench/contrib/tasks/browser/taskService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAUhG,MAAa,WAAY,SAAQ,yCAAmB;QAGzC,aAAa;YACtB,IAAI,IAAI,CAAC,WAAW,EAAE;gBACrB,OAAO,IAAI,CAAC,WAAW,CAAC;aACxB;YACD,IAAI,IAAI,CAAC,eAAe,KAAK,uBAAe,CAAC,QAAQ,EAAE;gBACtD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,wBAAwB,EAAE,CAAC;aACnD;iBAAM;gBACN,MAAM,IAAI,KAAK,CAAC,WAAW,CAAC,+BAA+B,CAAC,CAAC;aAC7D;YACD,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,WAAY,CAAC,gBAAgB,CAAC,CAAC,KAAK,EAAE,EAAE;gBACvE,IAAI,IAAI,CAAC,WAAW,EAAE;oBACrB,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,CAAC,CAAC;iBAC5D;gBACD,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACpC,CAAC,CAAC,CAAC;YACH,OAAO,IAAI,CAAC,WAAY,CAAC;QAC1B,CAAC;QAES,0BAA0B,CAAC,eAAiC;YACrE,MAAM,IAAI,KAAK,CAAC,WAAW,CAAC,+BAA+B,CAAC,CAAC;QAC9D,CAAC;QAES,0BAA0B,CAAC,MAAmB;YACvD,OAAO,IAAI,CAAC,eAAe,KAAK,uBAAe,CAAC,QAAQ,CAAC;QAC1D,CAAC;;IA3BF,kCA4BC;IA3BwB,2CAA+B,GAAG,GAAG,CAAC,QAAQ,CAAC,CAA+B,EAAE,IAAgD,CAAC,CAAC;IA6B3J,CAAA,GAAA,8BAAiB,CAAA,CAAC,0BAAY,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC","file":"taskService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { IWorkspaceFolder } from 'vs/platform/workspace/common/workspace';\nimport { ITaskSystem } from 'vs/workbench/contrib/tasks/common/taskSystem';\nimport { ExecutionEngine } from 'vs/workbench/contrib/tasks/common/tasks';\nimport { AbstractTaskService, WorkspaceFolderConfigurationResult } from 'vs/workbench/contrib/tasks/browser/abstractTaskService';\nimport { TaskFilter, ITaskService } from 'vs/workbench/contrib/tasks/common/taskService';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\n\nexport class TaskService extends AbstractTaskService {\n\tprivate static readonly ProcessTaskSystemSupportMessage = nls.localize('taskService.processTaskSystem', 'Process task system is not support in the web.');\n\n\tprotected getTaskSystem(): ITaskSystem {\n\t\tif (this._taskSystem) {\n\t\t\treturn this._taskSystem;\n\t\t}\n\t\tif (this.executionEngine === ExecutionEngine.Terminal) {\n\t\t\tthis._taskSystem = this.createTerminalTaskSystem();\n\t\t} else {\n\t\t\tthrow new Error(TaskService.ProcessTaskSystemSupportMessage);\n\t\t}\n\t\tthis._taskSystemListener = this._taskSystem!.onDidStateChange((event) => {\n\t\t\tif (this._taskSystem) {\n\t\t\t\tthis._taskRunningState.set(this._taskSystem.isActiveSync());\n\t\t\t}\n\t\t\tthis._onDidStateChange.fire(event);\n\t\t});\n\t\treturn this._taskSystem!;\n\t}\n\n\tprotected computeLegacyConfiguration(workspaceFolder: IWorkspaceFolder): Promise<WorkspaceFolderConfigurationResult> {\n\t\tthrow new Error(TaskService.ProcessTaskSystemSupportMessage);\n\t}\n\n\tprotected versionAndEngineCompatible(filter?: TaskFilter): boolean {\n\t\treturn this.executionEngine === ExecutionEngine.Terminal;\n\t}\n}\n\nregisterSingleton(ITaskService, TaskService, true);\n"]}