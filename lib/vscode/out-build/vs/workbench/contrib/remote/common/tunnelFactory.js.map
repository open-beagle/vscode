{"version":3,"file":"tunnelFactory.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/remote/common/tunnelFactory.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAWhG,IAAa,yBAAyB,GAAtC,MAAa,yBAA0B,SAAQ,sBAAU;QACxD,YACiB,aAA6B,EACf,kBAAgD,EAC9D,aAA6B,EACrB,qBAA6C,EACxD,UAAuB;;YAEpC,KAAK,EAAE,CAAC;YACR,MAAM,aAAa,GAAG,MAAA,MAAA,kBAAkB,CAAC,OAAO,0CAAE,cAAc,0CAAE,aAAa,CAAC;YAChF,IAAI,aAAa,EAAE;gBAClB,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,iBAAiB,CAAC;oBAC9C,WAAW,EAAE,CAAC,aAA4B,EAAE,qBAA4C,EAAiD,EAAE;wBAC1I,IAAI,aAA2C,CAAC;wBAChD,IAAI;4BACH,aAAa,GAAG,aAAa,CAAC,aAAa,EAAE,qBAAqB,CAAC,CAAC;yBACpE;wBAAC,OAAO,CAAC,EAAE;4BACX,UAAU,CAAC,KAAK,CAAC,sCAAsC,CAAC,CAAC;yBACzD;wBAED,OAAO,IAAI,OAAO,CAAC,KAAK,EAAE,OAAO,EAAE,EAAE;4BACpC,IAAI,CAAC,aAAa,EAAE;gCACnB,OAAO,CAAC,SAAS,CAAC,CAAC;gCACnB,OAAO;6BACP;4BACD,IAAI,MAAe,CAAC;4BACpB,IAAI;gCACH,MAAM,GAAG,MAAM,aAAa,CAAC;6BAC7B;4BAAC,OAAO,CAAC,EAAE;gCACX,UAAU,CAAC,KAAK,CAAC,8CAA8C,CAAC,CAAC;gCACjE,OAAO,CAAC,SAAS,CAAC,CAAC;gCACnB,OAAO;6BACP;4BACD,MAAM,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,UAAU,MAAM,CAAC,YAAY,EAAE,CAAC;4BACpH,MAAM,YAAY,GAAiB;gCAClC,gBAAgB,EAAE,MAAM,CAAC,aAAa,CAAC,IAAI;gCAC3C,gBAAgB,EAAE,MAAM,CAAC,aAAa,CAAC,IAAI;gCAC3C,gEAAgE;gCAChE,iEAAiE;gCACjE,YAAY,EAAE,CAAC,MAAM,aAAa,CAAC,kBAAkB,CAAC,SAAG,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,EAAE;gCACnG,MAAM,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM;gCACvB,OAAO,EAAE,KAAK,IAAI,EAAE,GAAG,MAAM,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;6BAChD,CAAC;4BACF,OAAO,CAAC,YAAY,CAAC,CAAC;wBACvB,CAAC,CAAC,CAAC;oBACJ,CAAC;iBACD,EAAE,MAAA,MAAA,MAAA,kBAAkB,CAAC,OAAO,0CAAE,cAAc,0CAAE,QAAQ,mCAAI,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;gBACjG,qBAAqB,CAAC,oBAAoB,CAAC,SAAS,CAAC,CAAC;aACtD;QACF,CAAC;KACD,CAAA;IAlDY,yBAAyB;QAEnC,WAAA,uBAAc,CAAA;QACd,WAAA,iDAA4B,CAAA;QAC5B,WAAA,uBAAc,CAAA;QACd,WAAA,8CAAsB,CAAA;QACtB,WAAA,iBAAW,CAAA;OAND,yBAAyB,CAkDrC;IAlDY,8DAAyB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ITunnelService, TunnelOptions, RemoteTunnel, TunnelCreationOptions, ITunnel } from 'vs/platform/remote/common/tunnel';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { URI } from 'vs/base/common/uri';\nimport { IRemoteExplorerService } from 'vs/workbench/services/remote/common/remoteExplorerService';\nimport { ILogService } from 'vs/platform/log/common/log';\n\nexport class TunnelFactoryContribution extends Disposable implements IWorkbenchContribution {\n\tconstructor(\n\t\t@ITunnelService tunnelService: ITunnelService,\n\t\t@IWorkbenchEnvironmentService environmentService: IWorkbenchEnvironmentService,\n\t\t@IOpenerService openerService: IOpenerService,\n\t\t@IRemoteExplorerService remoteExplorerService: IRemoteExplorerService,\n\t\t@ILogService logService: ILogService\n\t) {\n\t\tsuper();\n\t\tconst tunnelFactory = environmentService.options?.tunnelProvider?.tunnelFactory;\n\t\tif (tunnelFactory) {\n\t\t\tthis._register(tunnelService.setTunnelProvider({\n\t\t\t\tforwardPort: (tunnelOptions: TunnelOptions, tunnelCreationOptions: TunnelCreationOptions): Promise<RemoteTunnel | undefined> | undefined => {\n\t\t\t\t\tlet tunnelPromise: Promise<ITunnel> | undefined;\n\t\t\t\t\ttry {\n\t\t\t\t\t\ttunnelPromise = tunnelFactory(tunnelOptions, tunnelCreationOptions);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tlogService.trace('tunnelFactory: tunnel provider error');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn new Promise(async (resolve) => {\n\t\t\t\t\t\tif (!tunnelPromise) {\n\t\t\t\t\t\t\tresolve(undefined);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlet tunnel: ITunnel;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\ttunnel = await tunnelPromise;\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tlogService.trace('tunnelFactory: tunnel provider promise error');\n\t\t\t\t\t\t\tresolve(undefined);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst localAddress = tunnel.localAddress.startsWith('http') ? tunnel.localAddress : `http://${tunnel.localAddress}`;\n\t\t\t\t\t\tconst remoteTunnel: RemoteTunnel = {\n\t\t\t\t\t\t\ttunnelRemotePort: tunnel.remoteAddress.port,\n\t\t\t\t\t\t\ttunnelRemoteHost: tunnel.remoteAddress.host,\n\t\t\t\t\t\t\t// The tunnel factory may give us an inaccessible local address.\n\t\t\t\t\t\t\t// To make sure this doesn't happen, resolve the uri immediately.\n\t\t\t\t\t\t\tlocalAddress: (await openerService.resolveExternalUri(URI.parse(localAddress))).resolved.toString(),\n\t\t\t\t\t\t\tpublic: !!tunnel.public,\n\t\t\t\t\t\t\tdispose: async () => { await tunnel.dispose(); }\n\t\t\t\t\t\t};\n\t\t\t\t\t\tresolve(remoteTunnel);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}, environmentService.options?.tunnelProvider?.features ?? { elevation: false, public: false }));\n\t\t\tremoteExplorerService.setTunnelInformation(undefined);\n\t\t}\n\t}\n}\n"]}