{"version":3,"sources":["vs/workbench/contrib/remote/browser/remoteExplorer.ts"],"names":[],"mappings":"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","file":"remoteExplorer.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from 'vs/nls';\nimport { Disposable, IDisposable } from 'vs/base/common/lifecycle';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { Extensions, IViewContainersRegistry, IViewsRegistry, IViewsService, ViewContainer, ViewContainerLocation } from 'vs/workbench/common/views';\nimport { IRemoteExplorerService, makeAddress, mapHasAddressLocalhostOrAllInterfaces, OnPortForward, PORT_AUTO_FORWARD_SETTING, PORT_AUTO_SOURCE_SETTING, PORT_AUTO_SOURCE_SETTING_OUTPUT, PORT_AUTO_SOURCE_SETTING_PROCESS, TUNNEL_VIEW_CONTAINER_ID, TUNNEL_VIEW_ID } from 'vs/workbench/services/remote/common/remoteExplorerService';\nimport { forwardedPortsViewEnabled, ForwardPortAction, OpenPortInBrowserAction, TunnelPanel, TunnelPanelDescriptor, TunnelViewModel, OpenPortInPreviewAction } from 'vs/workbench/contrib/remote/browser/tunnelView';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IStatusbarEntry, IStatusbarEntryAccessor, IStatusbarService, StatusbarAlignment } from 'vs/workbench/services/statusbar/common/statusbar';\nimport { UrlFinder } from 'vs/workbench/contrib/remote/browser/urlFinder';\nimport Severity from 'vs/base/common/severity';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { INotificationHandle, INotificationService, IPromptChoice } from 'vs/platform/notification/common/notification';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { ITerminalService } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { IDebugService } from 'vs/workbench/contrib/debug/common/debug';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { isWeb, OperatingSystem } from 'vs/base/common/platform';\nimport { isPortPrivileged, ITunnelService, RemoteTunnel } from 'vs/platform/remote/common/tunnel';\nimport { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';\nimport { ViewPaneContainer } from 'vs/workbench/browser/parts/views/viewPaneContainer';\nimport { IActivityService, NumberBadge } from 'vs/workbench/services/activity/common/activity';\nimport { portsViewIcon } from 'vs/workbench/contrib/remote/browser/remoteIcons';\nimport { Event } from 'vs/base/common/event';\nimport { IExternalUriOpenerService } from 'vs/workbench/contrib/externalUriOpener/common/externalUriOpenerService';\nimport { IHostService } from 'vs/workbench/services/host/browser/host';\nimport { IConfigurationRegistry, Extensions as ConfigurationExtensions } from 'vs/platform/configuration/common/configurationRegistry';\nimport { ILogService } from 'vs/platform/log/common/log';\n\nexport const VIEWLET_ID = 'workbench.view.remote';\n\nexport class ForwardedPortsView extends Disposable implements IWorkbenchContribution {\n\tprivate contextKeyListener?: IDisposable;\n\tprivate _activityBadge?: IDisposable;\n\tprivate entryAccessor: IStatusbarEntryAccessor | undefined;\n\n\tconstructor(\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IRemoteExplorerService private readonly remoteExplorerService: IRemoteExplorerService,\n\t\t@IActivityService private readonly activityService: IActivityService,\n\t\t@IStatusbarService private readonly statusbarService: IStatusbarService,\n\t) {\n\t\tsuper();\n\t\tthis._register(Registry.as<IViewsRegistry>(Extensions.ViewsRegistry).registerViewWelcomeContent(TUNNEL_VIEW_ID, {\n\t\t\tcontent: `No forwarded ports. Forward a port to access your running services locally.\\n[Forward a Port](command:${ForwardPortAction.INLINE_ID})`,\n\t\t}));\n\t\tthis.enableBadgeAndStatusBar();\n\t\tthis.enableForwardedPortsView();\n\t}\n\n\tprivate async getViewContainer(): Promise<ViewContainer | null> {\n\t\treturn Registry.as<IViewContainersRegistry>(Extensions.ViewContainersRegistry).registerViewContainer({\n\t\t\tid: TUNNEL_VIEW_CONTAINER_ID,\n\t\t\ttitle: nls.localize('ports', \"Ports\"),\n\t\t\ticon: portsViewIcon,\n\t\t\tctorDescriptor: new SyncDescriptor(ViewPaneContainer, [TUNNEL_VIEW_CONTAINER_ID, { mergeViewWithContainerWhenSingleView: true, donotShowContainerTitleWhenMergedWithContainer: true }]),\n\t\t\tstorageId: TUNNEL_VIEW_CONTAINER_ID,\n\t\t\thideIfEmpty: true,\n\t\t\torder: 5\n\t\t}, ViewContainerLocation.Panel);\n\t}\n\n\tprivate async enableForwardedPortsView() {\n\t\tif (this.contextKeyListener) {\n\t\t\tthis.contextKeyListener.dispose();\n\t\t\tthis.contextKeyListener = undefined;\n\t\t}\n\n\t\tconst viewEnabled: boolean = !!forwardedPortsViewEnabled.getValue(this.contextKeyService);\n\n\t\tif (this.environmentService.remoteAuthority && viewEnabled) {\n\t\t\tconst viewContainer = await this.getViewContainer();\n\t\t\tconst tunnelPanelDescriptor = new TunnelPanelDescriptor(new TunnelViewModel(this.remoteExplorerService), this.environmentService);\n\t\t\tconst viewsRegistry = Registry.as<IViewsRegistry>(Extensions.ViewsRegistry);\n\t\t\tif (viewContainer) {\n\t\t\t\tthis.remoteExplorerService.enablePortsFeatures();\n\t\t\t\tviewsRegistry.registerViews([tunnelPanelDescriptor!], viewContainer);\n\t\t\t}\n\t\t} else if (this.environmentService.remoteAuthority) {\n\t\t\tthis.contextKeyListener = this.contextKeyService.onDidChangeContext(e => {\n\t\t\t\tif (e.affectsSome(new Set(forwardedPortsViewEnabled.keys()))) {\n\t\t\t\t\tthis.enableForwardedPortsView();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate enableBadgeAndStatusBar() {\n\t\tconst disposable = Registry.as<IViewsRegistry>(Extensions.ViewsRegistry).onViewsRegistered(e => {\n\t\t\tif (e.find(view => view.views.find(viewDescriptor => viewDescriptor.id === TUNNEL_VIEW_ID))) {\n\t\t\t\tthis._register(Event.debounce(this.remoteExplorerService.tunnelModel.onForwardPort, (_last, e) => e, 50)(() => {\n\t\t\t\t\tthis.updateActivityBadge();\n\t\t\t\t\tthis.updateStatusBar();\n\t\t\t\t}));\n\t\t\t\tthis._register(Event.debounce(this.remoteExplorerService.tunnelModel.onClosePort, (_last, e) => e, 50)(() => {\n\t\t\t\t\tthis.updateActivityBadge();\n\t\t\t\t\tthis.updateStatusBar();\n\t\t\t\t}));\n\n\t\t\t\tthis.updateActivityBadge();\n\t\t\t\tthis.updateStatusBar();\n\t\t\t\tdisposable.dispose();\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async updateActivityBadge() {\n\t\tif (this._activityBadge) {\n\t\t\tthis._activityBadge.dispose();\n\t\t}\n\t\tif (this.remoteExplorerService.tunnelModel.forwarded.size > 0) {\n\t\t\tthis._activityBadge = this.activityService.showViewActivity(TUNNEL_VIEW_ID, {\n\t\t\t\tbadge: new NumberBadge(this.remoteExplorerService.tunnelModel.forwarded.size, n => n === 1 ? nls.localize('1forwardedPort', \"1 forwarded port\") : nls.localize('nForwardedPorts', \"{0} forwarded ports\", n))\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate updateStatusBar() {\n\t\tif (!this.entryAccessor) {\n\t\t\tthis._register(this.entryAccessor = this.statusbarService.addEntry(this.entry, 'status.forwardedPorts', nls.localize('status.forwardedPorts', \"Forwarded Ports\"), StatusbarAlignment.LEFT, 40));\n\t\t} else {\n\t\t\tthis.entryAccessor.update(this.entry);\n\t\t}\n\t}\n\n\tprivate get entry(): IStatusbarEntry {\n\t\tlet text: string;\n\t\tlet tooltip: string;\n\t\tconst count = this.remoteExplorerService.tunnelModel.forwarded.size + this.remoteExplorerService.tunnelModel.detected.size;\n\t\ttext = `${count}`;\n\t\tif (count === 0) {\n\t\t\ttooltip = nls.localize('remote.forwardedPorts.statusbarTextNone', \"No Ports Forwarded\");\n\t\t} else {\n\t\t\tconst allTunnels = Array.from(this.remoteExplorerService.tunnelModel.forwarded.values());\n\t\t\tallTunnels.push(...Array.from(this.remoteExplorerService.tunnelModel.detected.values()));\n\t\t\ttooltip = nls.localize('remote.forwardedPorts.statusbarTooltip', \"Forwarded Ports: {0}\",\n\t\t\t\tallTunnels.map(forwarded => forwarded.remotePort).join(', '));\n\t\t}\n\t\treturn {\n\t\t\ttext: `$(radio-tower) ${text}`,\n\t\t\tariaLabel: tooltip,\n\t\t\ttooltip,\n\t\t\tcommand: `${TUNNEL_VIEW_ID}.focus`\n\t\t};\n\t}\n}\n\nexport class PortRestore implements IWorkbenchContribution {\n\tconstructor(\n\t\t@IRemoteExplorerService readonly remoteExplorerService: IRemoteExplorerService,\n\t\t@ILogService readonly logService: ILogService\n\t) {\n\t\tif (!this.remoteExplorerService.tunnelModel.environmentTunnelsSet) {\n\t\t\tEvent.once(this.remoteExplorerService.tunnelModel.onEnvironmentTunnelsSet)(async () => {\n\t\t\t\tawait this.restore();\n\t\t\t});\n\t\t} else {\n\t\t\tthis.restore();\n\t\t}\n\t}\n\n\tprivate async restore() {\n\t\tthis.logService.trace('ForwardedPorts: Doing first restore.');\n\t\treturn this.remoteExplorerService.restore();\n\t}\n}\n\n\nexport class AutomaticPortForwarding extends Disposable implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@ITerminalService readonly terminalService: ITerminalService,\n\t\t@INotificationService readonly notificationService: INotificationService,\n\t\t@IOpenerService readonly openerService: IOpenerService,\n\t\t@IExternalUriOpenerService readonly externalOpenerService: IExternalUriOpenerService,\n\t\t@IViewsService readonly viewsService: IViewsService,\n\t\t@IRemoteExplorerService readonly remoteExplorerService: IRemoteExplorerService,\n\t\t@IWorkbenchEnvironmentService readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IContextKeyService readonly contextKeyService: IContextKeyService,\n\t\t@IConfigurationService readonly configurationService: IConfigurationService,\n\t\t@IDebugService readonly debugService: IDebugService,\n\t\t@IRemoteAgentService readonly remoteAgentService: IRemoteAgentService,\n\t\t@ITunnelService readonly tunnelService: ITunnelService,\n\t\t@IHostService readonly hostService: IHostService,\n\t\t@ILogService readonly logService: ILogService\n\t) {\n\t\tsuper();\n\t\tif (!this.environmentService.remoteAuthority) {\n\t\t\treturn;\n\t\t}\n\n\t\tremoteAgentService.getEnvironment().then(environment => {\n\t\t\tif (environment?.os !== OperatingSystem.Linux) {\n\t\t\t\tRegistry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration)\n\t\t\t\t\t.registerDefaultConfigurations([{ 'remote.autoForwardPortsSource': PORT_AUTO_SOURCE_SETTING_OUTPUT }]);\n\t\t\t\tthis._register(new OutputAutomaticPortForwarding(terminalService, notificationService, openerService, externalOpenerService,\n\t\t\t\t\tremoteExplorerService, configurationService, debugService, tunnelService, remoteAgentService, hostService, logService, () => false));\n\t\t\t} else {\n\t\t\t\tconst useProc = () => (this.configurationService.getValue(PORT_AUTO_SOURCE_SETTING) === PORT_AUTO_SOURCE_SETTING_PROCESS);\n\t\t\t\tif (useProc()) {\n\t\t\t\t\tthis._register(new ProcAutomaticPortForwarding(configurationService, remoteExplorerService, notificationService,\n\t\t\t\t\t\topenerService, externalOpenerService, tunnelService, hostService, logService));\n\t\t\t\t}\n\t\t\t\tthis._register(new OutputAutomaticPortForwarding(terminalService, notificationService, openerService, externalOpenerService,\n\t\t\t\t\tremoteExplorerService, configurationService, debugService, tunnelService, remoteAgentService, hostService, logService, useProc));\n\t\t\t}\n\t\t});\n\t}\n}\n\nclass OnAutoForwardedAction extends Disposable {\n\tprivate lastNotifyTime: Date;\n\tprivate static NOTIFY_COOL_DOWN = 5000; // milliseconds\n\tprivate lastNotification: INotificationHandle | undefined;\n\tprivate lastShownPort: number | undefined;\n\tprivate doActionTunnels: RemoteTunnel[] | undefined;\n\n\tconstructor(private readonly notificationService: INotificationService,\n\t\tprivate readonly remoteExplorerService: IRemoteExplorerService,\n\t\tprivate readonly openerService: IOpenerService,\n\t\tprivate readonly externalOpenerService: IExternalUriOpenerService,\n\t\tprivate readonly tunnelService: ITunnelService,\n\t\tprivate readonly hostService: IHostService,\n\t\tprivate readonly logService: ILogService) {\n\t\tsuper();\n\t\tthis.lastNotifyTime = new Date();\n\t\tthis.lastNotifyTime.setFullYear(this.lastNotifyTime.getFullYear() - 1);\n\t}\n\n\tpublic async doAction(tunnels: RemoteTunnel[]): Promise<void> {\n\t\tthis.logService.trace(`ForwardedPorts: (OnAutoForwardedAction) Starting action for ${tunnels[0]?.tunnelRemotePort}`);\n\t\tthis.doActionTunnels = tunnels;\n\t\tconst tunnel = await this.portNumberHeuristicDelay();\n\t\tthis.logService.trace(`ForwardedPorts: (OnAutoForwardedAction) Heuristic chose ${tunnel?.tunnelRemotePort}`);\n\t\tif (tunnel) {\n\t\t\tconst attributes = (await this.remoteExplorerService.tunnelModel.getAttributes([tunnel.tunnelRemotePort]))?.get(tunnel.tunnelRemotePort)?.onAutoForward;\n\t\t\tthis.logService.trace(`ForwardedPorts: (OnAutoForwardedAction) onAutoForward action is ${attributes}`);\n\t\t\tswitch (attributes) {\n\t\t\t\tcase OnPortForward.OpenBrowser: {\n\t\t\t\t\tconst address = makeAddress(tunnel.tunnelRemoteHost, tunnel.tunnelRemotePort);\n\t\t\t\t\tawait OpenPortInBrowserAction.run(this.remoteExplorerService.tunnelModel, this.openerService, address);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase OnPortForward.OpenPreview: {\n\t\t\t\t\tconst address = makeAddress(tunnel.tunnelRemoteHost, tunnel.tunnelRemotePort);\n\t\t\t\t\tawait OpenPortInPreviewAction.run(this.remoteExplorerService.tunnelModel, this.openerService, this.externalOpenerService, address);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase OnPortForward.Silent: break;\n\t\t\t\tdefault:\n\t\t\t\t\tconst elapsed = new Date().getTime() - this.lastNotifyTime.getTime();\n\t\t\t\t\tthis.logService.trace(`ForwardedPorts: (OnAutoForwardedAction) time elapsed since last notification ${elapsed} ms`);\n\t\t\t\t\tif (elapsed > OnAutoForwardedAction.NOTIFY_COOL_DOWN) {\n\t\t\t\t\t\tawait this.showNotification(tunnel);\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic hide(removedPorts: number[]) {\n\t\tif (this.doActionTunnels) {\n\t\t\tthis.doActionTunnels = this.doActionTunnels.filter(value => !removedPorts.includes(value.tunnelRemotePort));\n\t\t}\n\t\tif (this.lastShownPort && removedPorts.indexOf(this.lastShownPort) >= 0) {\n\t\t\tthis.lastNotification?.close();\n\t\t}\n\t}\n\n\tprivate newerTunnel: RemoteTunnel | undefined;\n\tprivate async portNumberHeuristicDelay(): Promise<RemoteTunnel | undefined> {\n\t\tthis.logService.trace(`ForwardedPorts: (OnAutoForwardedAction) Starting heuristic delay`);\n\t\tif (!this.doActionTunnels || this.doActionTunnels.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tthis.doActionTunnels = this.doActionTunnels.sort((a, b) => a.tunnelRemotePort - b.tunnelRemotePort);\n\t\tconst firstTunnel = this.doActionTunnels.shift()!;\n\t\t// Heuristic.\n\t\tif (firstTunnel.tunnelRemotePort % 1000 === 0) {\n\t\t\tthis.logService.trace(`ForwardedPorts: (OnAutoForwardedAction) Heuristic chose tunnel because % 1000: ${firstTunnel.tunnelRemotePort}`);\n\t\t\tthis.newerTunnel = firstTunnel;\n\t\t\treturn firstTunnel;\n\t\t\t// 9229 is the node inspect port\n\t\t} else if (firstTunnel.tunnelRemotePort < 10000 && firstTunnel.tunnelRemotePort !== 9229) {\n\t\t\tthis.logService.trace(`ForwardedPorts: (OnAutoForwardedAction) Heuristic chose tunnel because < 10000: ${firstTunnel.tunnelRemotePort}`);\n\t\t\tthis.newerTunnel = firstTunnel;\n\t\t\treturn firstTunnel;\n\t\t}\n\n\t\tthis.logService.trace(`ForwardedPorts: (OnAutoForwardedAction) Waiting for \"better\" tunnel than ${firstTunnel.tunnelRemotePort}`);\n\t\tthis.newerTunnel = undefined;\n\t\treturn new Promise(resolve => {\n\t\t\tsetTimeout(() => {\n\t\t\t\tif (this.newerTunnel) {\n\t\t\t\t\tresolve(undefined);\n\t\t\t\t} else if (this.doActionTunnels?.includes(firstTunnel)) {\n\t\t\t\t\tresolve(firstTunnel);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(undefined);\n\t\t\t\t}\n\t\t\t}, 3000);\n\t\t});\n\t}\n\n\tprivate basicMessage(tunnel: RemoteTunnel) {\n\t\treturn nls.localize('remote.tunnelsView.automaticForward', \"Your application running on port {0} is available.  \",\n\t\t\ttunnel.tunnelRemotePort);\n\t}\n\n\tprivate linkMessage() {\n\t\treturn nls.localize('remote.tunnelsView.notificationLink', \"[See all forwarded ports](command:{0}.focus)\", TunnelPanel.ID);\n\t}\n\n\tprivate async showNotification(tunnel: RemoteTunnel) {\n\t\tif (!await this.hostService.hadLastFocus()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.lastNotification) {\n\t\t\tthis.lastNotification.close();\n\t\t}\n\t\tlet message = this.basicMessage(tunnel);\n\t\tconst choices = [this.openBrowserChoice(tunnel)];\n\t\tif (!isWeb) {\n\t\t\tchoices.push(this.openPreviewChoice(tunnel));\n\t\t}\n\n\t\tif ((tunnel.tunnelLocalPort !== tunnel.tunnelRemotePort) && this.tunnelService.canElevate && isPortPrivileged(tunnel.tunnelRemotePort)) {\n\t\t\t// Privileged ports are not on Windows, so it's safe to use \"superuser\"\n\t\t\tmessage += nls.localize('remote.tunnelsView.elevationMessage', \"You'll need to run as superuser to use port {0} locally.  \", tunnel.tunnelRemotePort);\n\t\t\tchoices.unshift(this.elevateChoice(tunnel));\n\t\t}\n\n\t\tmessage += this.linkMessage();\n\n\t\tthis.lastNotification = this.notificationService.prompt(Severity.Info, message, choices, { neverShowAgain: { id: 'remote.tunnelsView.autoForwardNeverShow', isSecondary: true } });\n\t\tthis.lastShownPort = tunnel.tunnelRemotePort;\n\t\tthis.lastNotifyTime = new Date();\n\t\tthis.lastNotification.onDidClose(() => {\n\t\t\tthis.lastNotification = undefined;\n\t\t\tthis.lastShownPort = undefined;\n\t\t});\n\t}\n\n\tprivate openBrowserChoice(tunnel: RemoteTunnel): IPromptChoice {\n\t\tconst address = makeAddress(tunnel.tunnelRemoteHost, tunnel.tunnelRemotePort);\n\t\treturn {\n\t\t\tlabel: OpenPortInBrowserAction.LABEL,\n\t\t\trun: () => OpenPortInBrowserAction.run(this.remoteExplorerService.tunnelModel, this.openerService, address)\n\t\t};\n\t}\n\n\tprivate openPreviewChoice(tunnel: RemoteTunnel): IPromptChoice {\n\t\tconst address = makeAddress(tunnel.tunnelRemoteHost, tunnel.tunnelRemotePort);\n\t\treturn {\n\t\t\tlabel: OpenPortInPreviewAction.LABEL,\n\t\t\trun: () => OpenPortInPreviewAction.run(this.remoteExplorerService.tunnelModel, this.openerService, this.externalOpenerService, address)\n\t\t};\n\t}\n\n\tprivate elevateChoice(tunnel: RemoteTunnel): IPromptChoice {\n\t\treturn {\n\t\t\t// Privileged ports are not on Windows, so it's ok to stick to just \"sudo\".\n\t\t\tlabel: nls.localize('remote.tunnelsView.elevationButton', \"Use Port {0} as Sudo...\", tunnel.tunnelRemotePort),\n\t\t\trun: async () => {\n\t\t\t\tawait this.remoteExplorerService.close({ host: tunnel.tunnelRemoteHost, port: tunnel.tunnelRemotePort });\n\t\t\t\tconst newTunnel = await this.remoteExplorerService.forward({ host: tunnel.tunnelRemoteHost, port: tunnel.tunnelRemotePort }, tunnel.tunnelRemotePort, undefined, undefined, true, undefined, false);\n\t\t\t\tif (!newTunnel) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (this.lastNotification) {\n\t\t\t\t\tthis.lastNotification.close();\n\t\t\t\t}\n\t\t\t\tthis.lastShownPort = newTunnel.tunnelRemotePort;\n\t\t\t\tthis.lastNotification = this.notificationService.prompt(Severity.Info,\n\t\t\t\t\tthis.basicMessage(newTunnel) + this.linkMessage(),\n\t\t\t\t\t[this.openBrowserChoice(newTunnel), this.openPreviewChoice(tunnel)],\n\t\t\t\t\t{ neverShowAgain: { id: 'remote.tunnelsView.autoForwardNeverShow', isSecondary: true } });\n\t\t\t\tthis.lastNotification.onDidClose(() => {\n\t\t\t\t\tthis.lastNotification = undefined;\n\t\t\t\t\tthis.lastShownPort = undefined;\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t}\n}\n\nclass OutputAutomaticPortForwarding extends Disposable {\n\tprivate portsFeatures?: IDisposable;\n\tprivate urlFinder?: UrlFinder;\n\tprivate notifier: OnAutoForwardedAction;\n\n\tconstructor(\n\t\tprivate readonly terminalService: ITerminalService,\n\t\treadonly notificationService: INotificationService,\n\t\treadonly openerService: IOpenerService,\n\t\treadonly externalOpenerService: IExternalUriOpenerService,\n\t\tprivate readonly remoteExplorerService: IRemoteExplorerService,\n\t\tprivate readonly configurationService: IConfigurationService,\n\t\tprivate readonly debugService: IDebugService,\n\t\treadonly tunnelService: ITunnelService,\n\t\tprivate readonly remoteAgentService: IRemoteAgentService,\n\t\treadonly hostService: IHostService,\n\t\treadonly logService: ILogService,\n\t\treadonly privilegedOnly: () => boolean\n\t) {\n\t\tsuper();\n\t\tthis.notifier = new OnAutoForwardedAction(notificationService, remoteExplorerService, openerService, externalOpenerService, tunnelService, hostService, logService);\n\t\tthis._register(configurationService.onDidChangeConfiguration((e) => {\n\t\t\tif (e.affectsConfiguration(PORT_AUTO_FORWARD_SETTING)) {\n\t\t\t\tthis.tryStartStopUrlFinder();\n\t\t\t}\n\t\t}));\n\n\t\tthis.portsFeatures = this._register(this.remoteExplorerService.onEnabledPortsFeatures(() => {\n\t\t\tthis.tryStartStopUrlFinder();\n\t\t}));\n\t\tthis.tryStartStopUrlFinder();\n\t}\n\n\tprivate tryStartStopUrlFinder() {\n\t\tif (this.configurationService.getValue(PORT_AUTO_FORWARD_SETTING)) {\n\t\t\tthis.startUrlFinder();\n\t\t} else {\n\t\t\tthis.stopUrlFinder();\n\t\t}\n\t}\n\n\tprivate startUrlFinder() {\n\t\tif (!this.urlFinder && !this.remoteExplorerService.portsFeaturesEnabled) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.portsFeatures) {\n\t\t\tthis.portsFeatures.dispose();\n\t\t}\n\t\tthis.urlFinder = this._register(new UrlFinder(this.terminalService, this.debugService));\n\t\tthis._register(this.urlFinder.onDidMatchLocalUrl(async (localUrl) => {\n\t\t\tif (mapHasAddressLocalhostOrAllInterfaces(this.remoteExplorerService.tunnelModel.detected, localUrl.host, localUrl.port)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ((await this.remoteExplorerService.tunnelModel.getAttributes([localUrl.port]))?.get(localUrl.port)?.onAutoForward === OnPortForward.Ignore) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (this.privilegedOnly() && !isPortPrivileged(localUrl.port, (await this.remoteAgentService.getEnvironment())?.os)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst forwarded = await this.remoteExplorerService.forward(localUrl, undefined, undefined, undefined, undefined, undefined, false);\n\t\t\tif (forwarded) {\n\t\t\t\tthis.notifier.doAction([forwarded]);\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate stopUrlFinder() {\n\t\tif (this.urlFinder) {\n\t\t\tthis.urlFinder.dispose();\n\t\t\tthis.urlFinder = undefined;\n\t\t}\n\t}\n}\n\nclass ProcAutomaticPortForwarding extends Disposable {\n\tprivate candidateListener: IDisposable | undefined;\n\tprivate autoForwarded: Set<string> = new Set();\n\tprivate notifiedOnly: Set<string> = new Set();\n\tprivate notifier: OnAutoForwardedAction;\n\tprivate initialCandidates: Set<string> = new Set();\n\tprivate portsFeatures: IDisposable | undefined;\n\n\tconstructor(\n\t\tprivate readonly configurationService: IConfigurationService,\n\t\treadonly remoteExplorerService: IRemoteExplorerService,\n\t\treadonly notificationService: INotificationService,\n\t\treadonly openerService: IOpenerService,\n\t\treadonly externalOpenerService: IExternalUriOpenerService,\n\t\treadonly tunnelService: ITunnelService,\n\t\treadonly hostService: IHostService,\n\t\treadonly logService: ILogService\n\t) {\n\t\tsuper();\n\t\tthis.notifier = new OnAutoForwardedAction(notificationService, remoteExplorerService, openerService, externalOpenerService, tunnelService, hostService, logService);\n\t\tthis._register(configurationService.onDidChangeConfiguration(async (e) => {\n\t\t\tif (e.affectsConfiguration(PORT_AUTO_FORWARD_SETTING)) {\n\t\t\t\tawait this.startStopCandidateListener();\n\t\t\t}\n\t\t}));\n\n\t\tthis.portsFeatures = this._register(this.remoteExplorerService.onEnabledPortsFeatures(async () => {\n\t\t\tawait this.startStopCandidateListener();\n\t\t}));\n\n\t\tthis.startStopCandidateListener();\n\t}\n\n\tprivate async startStopCandidateListener() {\n\t\tif (this.configurationService.getValue(PORT_AUTO_FORWARD_SETTING)) {\n\t\t\tawait this.startCandidateListener();\n\t\t} else {\n\t\t\tthis.stopCandidateListener();\n\t\t}\n\t}\n\n\tprivate stopCandidateListener() {\n\t\tif (this.candidateListener) {\n\t\t\tthis.candidateListener.dispose();\n\t\t\tthis.candidateListener = undefined;\n\t\t}\n\t}\n\n\tprivate async startCandidateListener() {\n\t\tif (this.candidateListener || !this.remoteExplorerService.portsFeaturesEnabled) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.portsFeatures) {\n\t\t\tthis.portsFeatures.dispose();\n\t\t}\n\n\t\tif (!this.remoteExplorerService.tunnelModel.environmentTunnelsSet) {\n\t\t\tawait new Promise<void>(resolve => this.remoteExplorerService.tunnelModel.onEnvironmentTunnelsSet(() => resolve()));\n\t\t}\n\n\t\t// Capture list of starting candidates so we don't auto forward them later.\n\t\tawait this.setInitialCandidates();\n\n\t\tthis.candidateListener = this._register(this.remoteExplorerService.tunnelModel.onCandidatesChanged(this.handleCandidateUpdate, this));\n\t}\n\n\tprivate async setInitialCandidates() {\n\t\tlet startingCandidates = this.remoteExplorerService.tunnelModel.candidatesOrUndefined;\n\t\tif (!startingCandidates) {\n\t\t\tawait new Promise<void>(resolve => this.remoteExplorerService.tunnelModel.onCandidatesChanged(() => resolve()));\n\t\t\tstartingCandidates = this.remoteExplorerService.tunnelModel.candidates;\n\t\t}\n\n\t\tfor (const value of startingCandidates) {\n\t\t\tthis.initialCandidates.add(makeAddress(value.host, value.port));\n\t\t}\n\t}\n\n\tprivate async forwardCandidates(): Promise<RemoteTunnel[] | undefined> {\n\t\tconst attributes = await this.remoteExplorerService.tunnelModel.getAttributes(this.remoteExplorerService.tunnelModel.candidates.map(candidate => candidate.port));\n\t\tconst allTunnels = <RemoteTunnel[]>(await Promise.all(this.remoteExplorerService.tunnelModel.candidates.map(async (value) => {\n\t\t\tif (!value.detail) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tconst address = makeAddress(value.host, value.port);\n\t\t\tif (this.initialCandidates.has(address)) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tif (this.notifiedOnly.has(address) || this.autoForwarded.has(address)) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tconst alreadyForwarded = mapHasAddressLocalhostOrAllInterfaces(this.remoteExplorerService.tunnelModel.forwarded, value.host, value.port);\n\t\t\tif (mapHasAddressLocalhostOrAllInterfaces(this.remoteExplorerService.tunnelModel.detected, value.host, value.port)) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tif (attributes?.get(value.port)?.onAutoForward === OnPortForward.Ignore) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tconst forwarded = await this.remoteExplorerService.forward(value, undefined, undefined, undefined, undefined, undefined, false);\n\t\t\tif (!alreadyForwarded && forwarded) {\n\t\t\t\tthis.autoForwarded.add(address);\n\t\t\t} else if (forwarded) {\n\t\t\t\tthis.notifiedOnly.add(address);\n\t\t\t}\n\t\t\treturn forwarded;\n\t\t}))).filter(tunnel => !!tunnel);\n\t\tif (allTunnels.length === 0) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn allTunnels;\n\t}\n\n\tprivate async handleCandidateUpdate(removed: Map<string, { host: string, port: number }>) {\n\t\tconst removedPorts: number[] = [];\n\t\tfor (const removedPort of removed) {\n\t\t\tconst key = removedPort[0];\n\t\t\tconst value = removedPort[1];\n\t\t\tif (this.autoForwarded.has(key)) {\n\t\t\t\tawait this.remoteExplorerService.close(value);\n\t\t\t\tthis.autoForwarded.delete(key);\n\t\t\t\tremovedPorts.push(value.port);\n\t\t\t} else if (this.notifiedOnly.has(key)) {\n\t\t\t\tthis.notifiedOnly.delete(key);\n\t\t\t\tremovedPorts.push(value.port);\n\t\t\t} else if (this.initialCandidates.has(key)) {\n\t\t\t\tthis.initialCandidates.delete(key);\n\t\t\t}\n\t\t}\n\n\t\tif (removedPorts.length > 0) {\n\t\t\tawait this.notifier.hide(removedPorts);\n\t\t}\n\n\t\tconst tunnels = await this.forwardCandidates();\n\t\tif (tunnels) {\n\t\t\tawait this.notifier.doAction(tunnels);\n\t\t}\n\t}\n}\n"]}