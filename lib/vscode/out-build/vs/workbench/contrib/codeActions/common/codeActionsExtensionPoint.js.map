{"version":3,"sources":["vs/workbench/contrib/codeActions/common/codeActionsExtensionPoint.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAMhG,IAAY,8BAMX;IAND,WAAY,8BAA8B;QACzC,yDAAuB,CAAA;QACvB,qDAAmB,CAAA;QACnB,+CAAa,CAAA;QACb,iDAAe,CAAA;QACf,6DAA2B,CAAA;IAC5B,CAAC,EANW,8BAA8B,GAA9B,sCAA8B,KAA9B,sCAA8B,QAMzC;IAaD,MAAM,+BAA+B,GAAG,MAAM,CAAC,MAAM,CAA+B;QACnF,IAAI,EAAE,OAAO;QACb,mBAAmB,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAyB,EAAE,IAA+C,CAAC;QAC7G,KAAK,EAAE;YACN,IAAI,EAAE,QAAQ;YACd,QAAQ,EAAE,CAAC,8BAA8B,CAAC,SAAS,EAAE,8BAA8B,CAAC,OAAO,CAAC;YAC5F,UAAU,EAAE;gBACX,CAAC,8BAA8B,CAAC,SAAS,CAAC,EAAE;oBAC3C,IAAI,EAAE,OAAO;oBACb,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAmC,EAAE,IAAuD,CAAC;oBACvH,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;iBACzB;gBACD,CAAC,8BAA8B,CAAC,OAAO,CAAC,EAAE;oBACzC,IAAI,EAAE,QAAQ;oBACd,QAAQ,EAAE,CAAC,8BAA8B,CAAC,IAAI,EAAE,8BAA8B,CAAC,KAAK,CAAC;oBACrF,UAAU,EAAE;wBACX,CAAC,8BAA8B,CAAC,IAAI,CAAC,EAAE;4BACtC,IAAI,EAAE,QAAQ;4BACd,mBAAmB,EAAE,GAAG,CAAC,QAAQ,CAAC,CAA8B,EAAE,IAAkD,CAAC;yBACrH;wBACD,CAAC,8BAA8B,CAAC,KAAK,CAAC,EAAE;4BACvC,IAAI,EAAE,QAAQ;4BACd,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,CAA+B,EAAE,IAA2C,CAAC;yBACvG;wBACD,CAAC,8BAA8B,CAAC,WAAW,CAAC,EAAE;4BAC7C,IAAI,EAAE,QAAQ;4BACd,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAqC,EAAE,IAA2C,CAAC;yBAC7G;qBACD;iBACD;aACD;SACD;KACD,CAAC,CAAC;IAEU,QAAA,mCAAmC,GAAG;QAClD,cAAc,EAAE,aAAa;QAC7B,IAAI,EAAE,CAAC,wCAAiB,CAAC;QACzB,UAAU,EAAE,+BAA+B;KAC3C,CAAC","file":"codeActionsExtensionPoint.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { IConfigurationPropertySchema } from 'vs/platform/configuration/common/configurationRegistry';\nimport { languagesExtPoint } from 'vs/workbench/services/mode/common/workbenchModeService';\n\nexport enum CodeActionExtensionPointFields {\n\tlanguages = 'languages',\n\tactions = 'actions',\n\tkind = 'kind',\n\ttitle = 'title',\n\tdescription = 'description'\n}\n\nexport interface ContributedCodeAction {\n\treadonly [CodeActionExtensionPointFields.kind]: string;\n\treadonly [CodeActionExtensionPointFields.title]: string;\n\treadonly [CodeActionExtensionPointFields.description]?: string;\n}\n\nexport interface CodeActionsExtensionPoint {\n\treadonly [CodeActionExtensionPointFields.languages]: readonly string[];\n\treadonly [CodeActionExtensionPointFields.actions]: readonly ContributedCodeAction[];\n}\n\nconst codeActionsExtensionPointSchema = Object.freeze<IConfigurationPropertySchema>({\n\ttype: 'array',\n\tmarkdownDescription: nls.localize('contributes.codeActions', \"Configure which editor to use for a resource.\"),\n\titems: {\n\t\ttype: 'object',\n\t\trequired: [CodeActionExtensionPointFields.languages, CodeActionExtensionPointFields.actions],\n\t\tproperties: {\n\t\t\t[CodeActionExtensionPointFields.languages]: {\n\t\t\t\ttype: 'array',\n\t\t\t\tdescription: nls.localize('contributes.codeActions.languages', \"Language modes that the code actions are enabled for.\"),\n\t\t\t\titems: { type: 'string' }\n\t\t\t},\n\t\t\t[CodeActionExtensionPointFields.actions]: {\n\t\t\t\ttype: 'object',\n\t\t\t\trequired: [CodeActionExtensionPointFields.kind, CodeActionExtensionPointFields.title],\n\t\t\t\tproperties: {\n\t\t\t\t\t[CodeActionExtensionPointFields.kind]: {\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tmarkdownDescription: nls.localize('contributes.codeActions.kind', \"`CodeActionKind` of the contributed code action.\"),\n\t\t\t\t\t},\n\t\t\t\t\t[CodeActionExtensionPointFields.title]: {\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdescription: nls.localize('contributes.codeActions.title', \"Label for the code action used in the UI.\"),\n\t\t\t\t\t},\n\t\t\t\t\t[CodeActionExtensionPointFields.description]: {\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdescription: nls.localize('contributes.codeActions.description', \"Description of what the code action does.\"),\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n});\n\nexport const codeActionsExtensionPointDescriptor = {\n\textensionPoint: 'codeActions',\n\tdeps: [languagesExtPoint],\n\tjsonSchema: codeActionsExtensionPointSchema\n};\n"]}