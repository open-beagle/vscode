{"version":3,"file":"documentationContribution.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/codeActions/common/documentationContribution.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAehG,IAAa,mCAAmC,GAAhD,MAAa,mCAAoC,SAAQ,sBAAU;QAalE,YACC,cAA4D,EACvB,iBAAqC;YAE1E,KAAK,EAAE,CAAC;YAF6B,sBAAiB,GAAjB,iBAAiB,CAAoB;YAbnE,kBAAa,GAIf,EAAE,CAAC;YAEQ,yBAAoB,GAAG;gBACvC,OAAO,EAAE,EAAE;gBACX,OAAO,EAAE,GAAG,EAAE,GAAG,CAAC;aAClB,CAAC;YAQD,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,0BAA0B,CAAC,QAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;YAErE,cAAc,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;gBAClC,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;gBACxB,KAAK,MAAM,aAAa,IAAI,MAAM,EAAE;oBACnC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,WAAW,EAAE;wBACrC,SAAS;qBACT;oBAED,KAAK,MAAM,YAAY,IAAI,aAAa,CAAC,KAAK,CAAC,WAAW,EAAE;wBAC3D,MAAM,YAAY,GAAG,2BAAc,CAAC,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;wBACnE,IAAI,CAAC,YAAY,EAAE;4BAClB,SAAS;yBACT;wBAED,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC;4BACvB,KAAK,EAAE,YAAY,CAAC,KAAK;4BACzB,IAAI,EAAE,YAAY;4BAClB,OAAO,EAAE,YAAY,CAAC,OAAO;yBAC7B,CAAC,CAAC;qBAEH;iBACD;YACF,CAAC,CAAC,CAAC;QACJ,CAAC;QAED,KAAK,CAAC,kBAAkB,CAAC,MAAkB,EAAE,MAAyB,EAAE,OAAgC,EAAE,MAAyB;YAClI,OAAO,IAAI,CAAC,oBAAoB,CAAC;QAClC,CAAC;QAEM,uBAAuB,CAAC,OAAgC,EAAE,OAAoC;YACpG,IAAI,OAAO,CAAC,IAAI,KAAK,sBAAc,CAAC,QAAQ,CAAC,KAAK,EAAE;gBACnD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,IAAI,sBAAc,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,sBAAc,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;oBAC9G,OAAO,EAAE,CAAC;iBACV;aACD;YAED,OAAO,IAAI,CAAC,aAAa;iBACvB,MAAM,CAAC,YAAY,CAAC,EAAE,CAAC,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;iBACrF,GAAG,CAAC,YAAY,CAAC,EAAE;gBACnB,OAAO;oBACN,EAAE,EAAE,YAAY,CAAC,OAAO;oBACxB,KAAK,EAAE,YAAY,CAAC,KAAK;iBACzB,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC;KACD,CAAA;IAjEY,mCAAmC;QAe7C,WAAA,+BAAkB,CAAA;OAfR,mCAAmC,CAiE/C;IAjEY,kFAAmC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { Range } from 'vs/editor/common/core/range';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { ITextModel } from 'vs/editor/common/model';\nimport * as modes from 'vs/editor/common/modes';\nimport { CodeActionKind } from 'vs/editor/contrib/codeAction/types';\nimport { ContextKeyExpr, IContextKeyService, ContextKeyExpression } from 'vs/platform/contextkey/common/contextkey';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { IExtensionPoint } from 'vs/workbench/services/extensions/common/extensionsRegistry';\nimport { DocumentationExtensionPoint } from './documentationExtensionPoint';\n\n\nexport class CodeActionDocumentationContribution extends Disposable implements IWorkbenchContribution, modes.CodeActionProvider {\n\n\tprivate contributions: {\n\t\ttitle: string;\n\t\twhen: ContextKeyExpression;\n\t\tcommand: string;\n\t}[] = [];\n\n\tprivate readonly emptyCodeActionsList = {\n\t\tactions: [],\n\t\tdispose: () => { }\n\t};\n\n\tconstructor(\n\t\textensionPoint: IExtensionPoint<DocumentationExtensionPoint>,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(modes.CodeActionProviderRegistry.register('*', this));\n\n\t\textensionPoint.setHandler(points => {\n\t\t\tthis.contributions = [];\n\t\t\tfor (const documentation of points) {\n\t\t\t\tif (!documentation.value.refactoring) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfor (const contribution of documentation.value.refactoring) {\n\t\t\t\t\tconst precondition = ContextKeyExpr.deserialize(contribution.when);\n\t\t\t\t\tif (!precondition) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.contributions.push({\n\t\t\t\t\t\ttitle: contribution.title,\n\t\t\t\t\t\twhen: precondition,\n\t\t\t\t\t\tcommand: contribution.command\n\t\t\t\t\t});\n\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tasync provideCodeActions(_model: ITextModel, _range: Range | Selection, context: modes.CodeActionContext, _token: CancellationToken): Promise<modes.CodeActionList> {\n\t\treturn this.emptyCodeActionsList;\n\t}\n\n\tpublic _getAdditionalMenuItems(context: modes.CodeActionContext, actions: readonly modes.CodeAction[]): modes.Command[] {\n\t\tif (context.only !== CodeActionKind.Refactor.value) {\n\t\t\tif (!actions.some(action => action.kind && CodeActionKind.Refactor.contains(new CodeActionKind(action.kind)))) {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t}\n\n\t\treturn this.contributions\n\t\t\t.filter(contribution => this.contextKeyService.contextMatchesRules(contribution.when))\n\t\t\t.map(contribution => {\n\t\t\t\treturn {\n\t\t\t\t\tid: contribution.command,\n\t\t\t\t\ttitle: contribution.title\n\t\t\t\t};\n\t\t\t});\n\t}\n}\n"]}