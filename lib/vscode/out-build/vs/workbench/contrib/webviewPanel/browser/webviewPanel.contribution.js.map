{"version":3,"sources":["vs/workbench/contrib/webviewPanel/browser/webviewPanel.contribution.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;IAoBhG,CAAC,mBAAQ,CAAC,EAAE,CAAkB,yBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC,cAAc,CAAC,yBAAgB,CAAC,MAAM,CAC9F,6BAAa,EACb,6BAAa,CAAC,EAAE,EAChB,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAsB,EAAE,IAAgB,CAAC,CAAC,EACnD,CAAC,IAAI,4BAAc,CAAC,iCAAY,CAAC,CAAC,CAAC,CAAC;IAErC,IAAM,wBAAwB,GAA9B,MAAM,wBAAwB;QAC7B,YACkC,aAA6B,EACvB,kBAAwC;YAD9C,kBAAa,GAAb,aAAa,CAAgB;YACvB,uBAAkB,GAAlB,kBAAkB,CAAsB;YAE/E,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC;gBACrC,IAAI,EAAE,CAAC,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,OAAO,EAAE,KAAK,CAAC;aAC9E,CAAC,CAAC;QACJ,CAAC;QAEO,eAAe,CACtB,MAAoB,EACpB,OAAuC,EACvC,KAAmB;YAEnB,IAAI,CAAC,CAAC,MAAM,YAAY,iCAAY,CAAC,IAAI,MAAM,CAAC,MAAM,KAAK,iCAAY,CAAC,MAAM,EAAE;gBAC/E,OAAO,SAAS,CAAC;aACjB;YAED,IAAI,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;gBAC3B,OAAO,SAAS,CAAC;aACjB;YAED,IAAI,aAAuC,CAAC;YAC5C,MAAM,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC;YAC9C,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE;gBAC3B,IAAI,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;oBAC3B,aAAa,GAAG,KAAK,CAAC;oBACtB,MAAM;iBACN;aACD;YAED,IAAI,CAAC,aAAa,EAAE;gBACnB,OAAO,SAAS,CAAC;aACjB;YAED,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;YAElC,OAAO;gBACN,QAAQ,EAAE,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,MAAM,kCAAO,OAAO,KAAE,QAAQ,EAAE,uBAAc,CAAC,QAAQ,KAAI,KAAK,CAAC;aACzG,CAAC;QACH,CAAC;KACD,CAAA;IA1CK,wBAAwB;QAE3B,WAAA,8BAAc,CAAA;QACd,WAAA,0CAAoB,CAAA;OAHjB,wBAAwB,CA0C7B;IAED,MAAM,8BAA8B,GAAG,mBAAQ,CAAC,EAAE,CAAkC,0BAAmB,CAAC,SAAS,CAAC,CAAC;IACnH,8BAA8B,CAAC,6BAA6B,CAAC,wBAAwB,mBAA0B,CAAC;IAEhH,mBAAQ,CAAC,EAAE,CAA8B,yBAAgB,CAAC,oBAAoB,CAAC,CAAC,6BAA6B,CAC5G,2DAA4B,CAAC,EAAE,EAC/B,2DAA4B,CAAC,CAAC;IAE/B,CAAA,GAAA,8BAAiB,CAAA,CAAC,kDAAwB,EAAE,8CAAoB,EAAE,IAAI,CAAC,CAAC;IAGxE,CAAA,GAAA,yBAAe,CAAA,CAAC,mDAAiC,CAAC,CAAC;IACnD,CAAA,GAAA,yBAAe,CAAA,CAAC,8CAA4B,CAAC,CAAC;IAC9C,CAAA,GAAA,yBAAe,CAAA,CAAC,8CAA4B,CAAC,CAAC;IAC9C,CAAA,GAAA,yBAAe,CAAA,CAAC,kDAAgC,CAAC,CAAC;IAClD,CAAA,GAAA,yBAAe,CAAA,CAAC,qCAAmB,CAAC,CAAC","file":"webviewPanel.contribution.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { registerAction2 } from 'vs/platform/actions/common/actions';\nimport { EditorOverride, ITextEditorOptions } from 'vs/platform/editor/common/editor';\nimport { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { EditorDescriptor, IEditorRegistry } from 'vs/workbench/browser/editor';\nimport { Extensions as WorkbenchExtensions, IWorkbenchContribution, IWorkbenchContributionsRegistry } from 'vs/workbench/common/contributions';\nimport { EditorExtensions, IEditorInput, IEditorInputFactoryRegistry } from 'vs/workbench/common/editor';\nimport { IEditorGroup, IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { IEditorService, IOpenEditorOverride } from 'vs/workbench/services/editor/common/editorService';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { HideWebViewEditorFindCommand, ReloadWebviewAction, ShowWebViewEditorFindWidgetAction, WebViewEditorFindNextCommand, WebViewEditorFindPreviousCommand } from './webviewCommands';\nimport { WebviewEditor } from './webviewEditor';\nimport { WebviewInput } from './webviewEditorInput';\nimport { WebviewEditorInputSerializer } from './webviewEditorInputSerializer';\nimport { IWebviewWorkbenchService, WebviewEditorService } from './webviewWorkbenchService';\n\n(Registry.as<IEditorRegistry>(EditorExtensions.Editors)).registerEditor(EditorDescriptor.create(\n\tWebviewEditor,\n\tWebviewEditor.ID,\n\tlocalize('webview.editor.label', \"webview editor\")),\n\t[new SyncDescriptor(WebviewInput)]);\n\nclass WebviewPanelContribution implements IWorkbenchContribution {\n\tconstructor(\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IEditorGroupsService private readonly editorGroupService: IEditorGroupsService,\n\t) {\n\t\tthis.editorService.overrideOpenEditor({\n\t\t\topen: (editor, options, group) => this.onEditorOpening(editor, options, group)\n\t\t});\n\t}\n\n\tprivate onEditorOpening(\n\t\teditor: IEditorInput,\n\t\toptions: ITextEditorOptions | undefined,\n\t\tgroup: IEditorGroup\n\t): IOpenEditorOverride | undefined {\n\t\tif (!(editor instanceof WebviewInput) || editor.typeId !== WebviewInput.typeId) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (group.contains(editor)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tlet previousGroup: IEditorGroup | undefined;\n\t\tconst groups = this.editorGroupService.groups;\n\t\tfor (const group of groups) {\n\t\t\tif (group.contains(editor)) {\n\t\t\t\tpreviousGroup = group;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!previousGroup) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tpreviousGroup.closeEditor(editor);\n\n\t\treturn {\n\t\t\toverride: this.editorService.openEditor(editor, { ...options, override: EditorOverride.DISABLED }, group)\n\t\t};\n\t}\n}\n\nconst workbenchContributionsRegistry = Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench);\nworkbenchContributionsRegistry.registerWorkbenchContribution(WebviewPanelContribution, LifecyclePhase.Starting);\n\nRegistry.as<IEditorInputFactoryRegistry>(EditorExtensions.EditorInputFactories).registerEditorInputSerializer(\n\tWebviewEditorInputSerializer.ID,\n\tWebviewEditorInputSerializer);\n\nregisterSingleton(IWebviewWorkbenchService, WebviewEditorService, true);\n\n\nregisterAction2(ShowWebViewEditorFindWidgetAction);\nregisterAction2(HideWebViewEditorFindCommand);\nregisterAction2(WebViewEditorFindNextCommand);\nregisterAction2(WebViewEditorFindPreviousCommand);\nregisterAction2(ReloadWebviewAction);\n"]}