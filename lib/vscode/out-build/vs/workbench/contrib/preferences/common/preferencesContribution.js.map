{"version":3,"sources":["vs/workbench/contrib/preferences/common/preferencesContribution.ts"],"names":[],"mappings":"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","file":"preferencesContribution.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DisposableStore, dispose, IDisposable } from 'vs/base/common/lifecycle';\nimport { isEqual } from 'vs/base/common/resources';\nimport { URI } from 'vs/base/common/uri';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { ITextModelService } from 'vs/editor/common/services/resolverService';\nimport * as nls from 'vs/nls';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ConfigurationScope, Extensions, IConfigurationRegistry } from 'vs/platform/configuration/common/configurationRegistry';\nimport { IEditorOptions, ITextEditorOptions } from 'vs/platform/editor/common/editor';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport * as JSONContributionRegistry from 'vs/platform/jsonschemas/common/jsonContributionRegistry';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IWorkspaceContextService, WorkbenchState } from 'vs/platform/workspace/common/workspace';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { IEditorInput } from 'vs/workbench/common/editor';\nimport { IEditorGroup } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { IEditorService, IOpenEditorOverride } from 'vs/workbench/services/editor/common/editorService';\nimport { FOLDER_SETTINGS_PATH, IPreferencesService, USE_SPLIT_JSON_SETTING } from 'vs/workbench/services/preferences/common/preferences';\nimport { workbenchConfigurationNodeBase } from 'vs/workbench/common/configuration';\n\nconst schemaRegistry = Registry.as<JSONContributionRegistry.IJSONContributionRegistry>(JSONContributionRegistry.Extensions.JSONContribution);\n\nexport class PreferencesContribution implements IWorkbenchContribution {\n\tprivate editorOpeningListener: IDisposable | undefined;\n\tprivate settingsListener: IDisposable;\n\n\tconstructor(\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@ITextModelService private readonly textModelResolverService: ITextModelService,\n\t\t@IPreferencesService private readonly preferencesService: IPreferencesService,\n\t\t@IModeService private readonly modeService: IModeService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@IWorkspaceContextService private readonly workspaceService: IWorkspaceContextService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) {\n\t\tthis.settingsListener = this.configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration(USE_SPLIT_JSON_SETTING)) {\n\t\t\t\tthis.handleSettingsEditorOverride();\n\t\t\t}\n\t\t});\n\t\tthis.handleSettingsEditorOverride();\n\n\t\tthis.start();\n\t}\n\n\tprivate handleSettingsEditorOverride(): void {\n\n\t\t// dispose any old listener we had\n\t\tdispose(this.editorOpeningListener);\n\n\t\t// install editor opening listener unless user has disabled this\n\t\tif (!!this.configurationService.getValue(USE_SPLIT_JSON_SETTING)) {\n\t\t\tthis.editorOpeningListener = this.editorService.overrideOpenEditor({\n\t\t\t\topen: (editor, options, group) => this.onEditorOpening(editor, options, group)\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate onEditorOpening(editor: IEditorInput, options: IEditorOptions | ITextEditorOptions | undefined, group: IEditorGroup): IOpenEditorOverride | undefined {\n\t\tconst resource = editor.resource;\n\t\tif (\n\t\t\t!resource ||\n\t\t\t!resource.path.endsWith('settings.json') ||\t\t\t\t\t\t\t\t// resource must end in settings.json\n\t\t\t!this.configurationService.getValue(USE_SPLIT_JSON_SETTING)\t\t\t\t\t// user has not disabled default settings editor\n\t\t) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// If the resource was already opened before in the group, do not prevent\n\t\t// the opening of that resource. Otherwise we would have the same settings\n\t\t// opened twice (https://github.com/microsoft/vscode/issues/36447)\n\t\tif (group.contains(editor)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Global User Settings File\n\t\tif (isEqual(resource, this.environmentService.settingsResource)) {\n\t\t\treturn { override: this.preferencesService.openGlobalSettings(true, options, group) };\n\t\t}\n\n\t\t// Single Folder Workspace Settings File\n\t\tconst state = this.workspaceService.getWorkbenchState();\n\t\tif (state === WorkbenchState.FOLDER) {\n\t\t\tconst folders = this.workspaceService.getWorkspace().folders;\n\t\t\tif (isEqual(resource, folders[0].toResource(FOLDER_SETTINGS_PATH))) {\n\t\t\t\treturn { override: this.preferencesService.openWorkspaceSettings(true, options, group) };\n\t\t\t}\n\t\t}\n\n\t\t// Multi Folder Workspace Settings File\n\t\telse if (state === WorkbenchState.WORKSPACE) {\n\t\t\tconst folders = this.workspaceService.getWorkspace().folders;\n\t\t\tfor (const folder of folders) {\n\t\t\t\tif (isEqual(resource, folder.toResource(FOLDER_SETTINGS_PATH))) {\n\t\t\t\t\treturn { override: this.preferencesService.openFolderSettings(folder.uri, true, options, group) };\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate start(): void {\n\n\t\tthis.textModelResolverService.registerTextModelContentProvider('vscode', {\n\t\t\tprovideTextContent: (uri: URI): Promise<ITextModel | null> | null => {\n\t\t\t\tif (uri.scheme !== 'vscode') {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tif (uri.authority === 'schemas') {\n\t\t\t\t\tconst schemaModel = this.getSchemaModel(uri);\n\t\t\t\t\tif (schemaModel) {\n\t\t\t\t\t\treturn Promise.resolve(schemaModel);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this.preferencesService.resolveModel(uri);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate getSchemaModel(uri: URI): ITextModel | null {\n\t\tlet schema = schemaRegistry.getSchemaContributions().schemas[uri.toString()];\n\t\tif (schema) {\n\t\t\tconst modelContent = JSON.stringify(schema);\n\t\t\tconst languageSelection = this.modeService.create('jsonc');\n\t\t\tconst model = this.modelService.createModel(modelContent, languageSelection, uri);\n\t\t\tconst disposables = new DisposableStore();\n\t\t\tdisposables.add(schemaRegistry.onDidChangeSchema(schemaUri => {\n\t\t\t\tif (schemaUri === uri.toString()) {\n\t\t\t\t\tschema = schemaRegistry.getSchemaContributions().schemas[uri.toString()];\n\t\t\t\t\tmodel.setValue(JSON.stringify(schema));\n\t\t\t\t}\n\t\t\t}));\n\t\t\tdisposables.add(model.onWillDispose(() => disposables.dispose()));\n\n\t\t\treturn model;\n\t\t}\n\t\treturn null;\n\t}\n\n\tdispose(): void {\n\t\tdispose(this.editorOpeningListener);\n\t\tdispose(this.settingsListener);\n\t}\n}\n\nconst registry = Registry.as<IConfigurationRegistry>(Extensions.Configuration);\nregistry.registerConfiguration({\n\t...workbenchConfigurationNodeBase,\n\t'properties': {\n\t\t'workbench.settings.enableNaturalLanguageSearch': {\n\t\t\t'type': 'boolean',\n\t\t\t'description': nls.localize('enableNaturalLanguageSettingsSearch', \"Controls whether to enable the natural language search mode for settings. The natural language search is provided by a Microsoft online service.\"),\n\t\t\t'default': true,\n\t\t\t'scope': ConfigurationScope.WINDOW,\n\t\t\t'tags': ['usesOnlineServices']\n\t\t},\n\t\t'workbench.settings.settingsSearchTocBehavior': {\n\t\t\t'type': 'string',\n\t\t\t'enum': ['hide', 'filter'],\n\t\t\t'enumDescriptions': [\n\t\t\t\tnls.localize('settingsSearchTocBehavior.hide', \"Hide the Table of Contents while searching.\"),\n\t\t\t\tnls.localize('settingsSearchTocBehavior.filter', \"Filter the Table of Contents to just categories that have matching settings. Clicking a category will filter the results to that category.\"),\n\t\t\t],\n\t\t\t'description': nls.localize('settingsSearchTocBehavior', \"Controls the behavior of the settings editor Table of Contents while searching.\"),\n\t\t\t'default': 'filter',\n\t\t\t'scope': ConfigurationScope.WINDOW\n\t\t},\n\t}\n});\n"]}