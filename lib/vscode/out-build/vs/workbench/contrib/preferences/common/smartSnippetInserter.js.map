{"version":3,"file":"smartSnippetInserter.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/preferences/common/smartSnippetInserter.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { JSONScanner, createScanner as createJSONScanner, SyntaxKind as JSONSyntaxKind } from 'vs/base/common/json';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { ITextModel } from 'vs/editor/common/model';\n\nexport interface InsertSnippetResult {\n\tposition: Position;\n\tprepend: string;\n\tappend: string;\n}\n\nexport class SmartSnippetInserter {\n\n\tprivate static hasOpenBrace(scanner: JSONScanner): boolean {\n\n\t\twhile (scanner.scan() !== JSONSyntaxKind.EOF) {\n\t\t\tconst kind = scanner.getToken();\n\n\t\t\tif (kind === JSONSyntaxKind.OpenBraceToken) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprivate static offsetToPosition(model: ITextModel, offset: number): Position {\n\t\tlet offsetBeforeLine = 0;\n\t\tconst eolLength = model.getEOL().length;\n\t\tconst lineCount = model.getLineCount();\n\t\tfor (let lineNumber = 1; lineNumber <= lineCount; lineNumber++) {\n\t\t\tconst lineTotalLength = model.getLineContent(lineNumber).length + eolLength;\n\t\t\tconst offsetAfterLine = offsetBeforeLine + lineTotalLength;\n\n\t\t\tif (offsetAfterLine > offset) {\n\t\t\t\treturn new Position(\n\t\t\t\t\tlineNumber,\n\t\t\t\t\toffset - offsetBeforeLine + 1\n\t\t\t\t);\n\t\t\t}\n\t\t\toffsetBeforeLine = offsetAfterLine;\n\t\t}\n\t\treturn new Position(\n\t\t\tlineCount,\n\t\t\tmodel.getLineMaxColumn(lineCount)\n\t\t);\n\t}\n\n\tstatic insertSnippet(model: ITextModel, _position: Position): InsertSnippetResult {\n\n\t\tconst desiredPosition = model.getValueLengthInRange(new Range(1, 1, _position.lineNumber, _position.column));\n\n\t\t// <INVALID> [ <BEFORE_OBJECT> { <INVALID> } <AFTER_OBJECT>, <BEFORE_OBJECT> { <INVALID> } <AFTER_OBJECT> ] <INVALID>\n\t\tenum State {\n\t\t\tINVALID = 0,\n\t\t\tAFTER_OBJECT = 1,\n\t\t\tBEFORE_OBJECT = 2,\n\t\t}\n\t\tlet currentState = State.INVALID;\n\t\tlet lastValidPos = -1;\n\t\tlet lastValidState = State.INVALID;\n\n\t\tconst scanner = createJSONScanner(model.getValue());\n\t\tlet arrayLevel = 0;\n\t\tlet objLevel = 0;\n\n\t\tconst checkRangeStatus = (pos: number, state: State) => {\n\t\t\tif (state !== State.INVALID && arrayLevel === 1 && objLevel === 0) {\n\t\t\t\tcurrentState = state;\n\t\t\t\tlastValidPos = pos;\n\t\t\t\tlastValidState = state;\n\t\t\t} else {\n\t\t\t\tif (currentState !== State.INVALID) {\n\t\t\t\t\tcurrentState = State.INVALID;\n\t\t\t\t\tlastValidPos = scanner.getTokenOffset();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\twhile (scanner.scan() !== JSONSyntaxKind.EOF) {\n\t\t\tconst currentPos = scanner.getPosition();\n\t\t\tconst kind = scanner.getToken();\n\n\t\t\tlet goodKind = false;\n\t\t\tswitch (kind) {\n\t\t\t\tcase JSONSyntaxKind.OpenBracketToken:\n\t\t\t\t\tgoodKind = true;\n\t\t\t\t\tarrayLevel++;\n\t\t\t\t\tcheckRangeStatus(currentPos, State.BEFORE_OBJECT);\n\t\t\t\t\tbreak;\n\t\t\t\tcase JSONSyntaxKind.CloseBracketToken:\n\t\t\t\t\tgoodKind = true;\n\t\t\t\t\tarrayLevel--;\n\t\t\t\t\tcheckRangeStatus(currentPos, State.INVALID);\n\t\t\t\t\tbreak;\n\t\t\t\tcase JSONSyntaxKind.CommaToken:\n\t\t\t\t\tgoodKind = true;\n\t\t\t\t\tcheckRangeStatus(currentPos, State.BEFORE_OBJECT);\n\t\t\t\t\tbreak;\n\t\t\t\tcase JSONSyntaxKind.OpenBraceToken:\n\t\t\t\t\tgoodKind = true;\n\t\t\t\t\tobjLevel++;\n\t\t\t\t\tcheckRangeStatus(currentPos, State.INVALID);\n\t\t\t\t\tbreak;\n\t\t\t\tcase JSONSyntaxKind.CloseBraceToken:\n\t\t\t\t\tgoodKind = true;\n\t\t\t\t\tobjLevel--;\n\t\t\t\t\tcheckRangeStatus(currentPos, State.AFTER_OBJECT);\n\t\t\t\t\tbreak;\n\t\t\t\tcase JSONSyntaxKind.Trivia:\n\t\t\t\tcase JSONSyntaxKind.LineBreakTrivia:\n\t\t\t\t\tgoodKind = true;\n\t\t\t}\n\n\t\t\tif (currentPos >= desiredPosition && (currentState !== State.INVALID || lastValidPos !== -1)) {\n\t\t\t\tlet acceptPosition: number;\n\t\t\t\tlet acceptState: State;\n\n\t\t\t\tif (currentState !== State.INVALID) {\n\t\t\t\t\tacceptPosition = (goodKind ? currentPos : scanner.getTokenOffset());\n\t\t\t\t\tacceptState = currentState;\n\t\t\t\t} else {\n\t\t\t\t\tacceptPosition = lastValidPos;\n\t\t\t\t\tacceptState = lastValidState;\n\t\t\t\t}\n\n\t\t\t\tif (acceptState as State === State.AFTER_OBJECT) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tposition: this.offsetToPosition(model, acceptPosition),\n\t\t\t\t\t\tprepend: ',',\n\t\t\t\t\t\tappend: ''\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\tscanner.setPosition(acceptPosition);\n\t\t\t\t\treturn {\n\t\t\t\t\t\tposition: this.offsetToPosition(model, acceptPosition),\n\t\t\t\t\t\tprepend: '',\n\t\t\t\t\t\tappend: this.hasOpenBrace(scanner) ? ',' : ''\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// no valid position found!\n\t\tconst modelLineCount = model.getLineCount();\n\t\treturn {\n\t\t\tposition: new Position(modelLineCount, model.getLineMaxColumn(modelLineCount)),\n\t\t\tprepend: '\\n[',\n\t\t\tappend: ']'\n\t\t};\n\t}\n}\n"]}