{"version":3,"file":"preferences.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/preferences/common/preferences.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IA0BnF,QAAA,yBAAyB,GAAG,CAAA,GAAA,+BAAe,CAAA,CAA4B,0BAA0B,CAAC,CAAC;IAanG,QAAA,4CAA4C,GAAG,oCAAoC,CAAC;IACpF,QAAA,yCAAyC,GAAG,iCAAiC,CAAC;IAE9E,QAAA,uBAAuB,GAAG,IAAI,0BAAa,CAAU,kBAAkB,EAAE,KAAK,CAAC,CAAC;IAChF,QAAA,4BAA4B,GAAG,IAAI,0BAAa,CAAU,sBAAsB,EAAE,KAAK,CAAC,CAAC;IACzF,QAAA,6BAA6B,GAAG,IAAI,0BAAa,CAAU,kBAAkB,EAAE,KAAK,CAAC,CAAC;IACtF,QAAA,qBAAqB,GAAG,IAAI,0BAAa,CAAU,qBAAqB,EAAE,KAAK,CAAC,CAAC;IACjF,QAAA,0BAA0B,GAAG,IAAI,0BAAa,CAAU,iBAAiB,EAAE,KAAK,CAAC,CAAC;IAClF,QAAA,0BAA0B,GAAG,IAAI,0BAAa,CAAU,eAAe,EAAE,KAAK,CAAC,CAAC;IAChF,QAAA,gCAAgC,GAAG,IAAI,0BAAa,CAAU,qBAAqB,EAAE,KAAK,CAAC,CAAC;IAC5F,QAAA,wBAAwB,GAAG,IAAI,0BAAa,CAAU,iBAAiB,EAAE,KAAK,CAAC,CAAC;IAEhF,QAAA,iCAAiC,GAAG,sCAAsC,CAAC;IAC3E,QAAA,+CAA+C,GAAG,uCAAuC,CAAC;IAC1F,QAAA,6CAA6C,GAAG,qCAAqC,CAAC;IACtF,QAAA,4CAA4C,GAAG,2CAA2C,CAAC;IAC3F,QAAA,iCAAiC,GAAG,qCAAqC,CAAC;IAC1E,QAAA,8BAA8B,GAAG,kCAAkC,CAAC;IACpE,QAAA,sCAAsC,GAAG,yCAAyC,CAAC;IACnF,QAAA,iCAAiC,GAAG,qCAAqC,CAAC;IAC1E,QAAA,gCAAgC,GAAG,oCAAoC,CAAC;IACxE,QAAA,+BAA+B,GAAG,wCAAwC,CAAC;IAC3E,QAAA,uCAAuC,GAAG,+CAA+C,CAAC;IAC1F,QAAA,uCAAuC,GAAG,kCAAkC,CAAC;IAC7E,QAAA,4CAA4C,GAAG,qCAAqC,CAAC;IACrF,QAAA,2CAA2C,GAAG,2CAA2C,CAAC;IAC1F,QAAA,wCAAwC,GAAG,wCAAwC,CAAC;IACpF,QAAA,6CAA6C,GAAG,6CAA6C,CAAC;IAE9F,QAAA,oBAAoB,GAAG,UAAU,CAAC;IAClC,QAAA,qBAAqB,GAAG,MAAM,CAAC;IAC/B,QAAA,mBAAmB,GAAG,UAAU,CAAC;IACjC,QAAA,cAAc,GAAG,KAAK,CAAC;IACvB,QAAA,qCAAqC,GAAG,yBAAyB,CAAC;IAClE,QAAA,2BAA2B,GAAG,2CAA2C,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { RawContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { ISettingsEditorModel, ISearchResult } from 'vs/workbench/services/preferences/common/preferences';\nimport { CancellationToken } from 'vs/base/common/cancellation';\n\nexport interface IWorkbenchSettingsConfiguration {\n\tworkbench: {\n\t\tsettings: {\n\t\t\topenDefaultSettings: boolean;\n\t\t\tnaturalLanguageSearchEndpoint: string;\n\t\t\tnaturalLanguageSearchKey: string;\n\t\t\tnaturalLanguageSearchAutoIngestFeedback: boolean;\n\t\t\tuseNaturalLanguageSearchPost: boolean;\n\t\t\tenableNaturalLanguageSearch: boolean;\n\t\t\tenableNaturalLanguageSearchFeedback: boolean;\n\t\t}\n\t};\n}\n\nexport interface IEndpointDetails {\n\turlBase: string;\n\tkey?: string;\n}\n\nexport const IPreferencesSearchService = createDecorator<IPreferencesSearchService>('preferencesSearchService');\n\nexport interface IPreferencesSearchService {\n\treadonly _serviceBrand: undefined;\n\n\tgetLocalSearchProvider(filter: string): ISearchProvider;\n\tgetRemoteSearchProvider(filter: string, newExtensionsOnly?: boolean): ISearchProvider | undefined;\n}\n\nexport interface ISearchProvider {\n\tsearchModel(preferencesModel: ISettingsEditorModel, token?: CancellationToken): Promise<ISearchResult | null>;\n}\n\nexport const SETTINGS_EDITOR_COMMAND_CLEAR_SEARCH_RESULTS = 'settings.action.clearSearchResults';\nexport const SETTINGS_EDITOR_COMMAND_SHOW_CONTEXT_MENU = 'settings.action.showContextMenu';\n\nexport const CONTEXT_SETTINGS_EDITOR = new RawContextKey<boolean>('inSettingsEditor', false);\nexport const CONTEXT_SETTINGS_JSON_EDITOR = new RawContextKey<boolean>('inSettingsJSONEditor', false);\nexport const CONTEXT_SETTINGS_SEARCH_FOCUS = new RawContextKey<boolean>('inSettingsSearch', false);\nexport const CONTEXT_TOC_ROW_FOCUS = new RawContextKey<boolean>('settingsTocRowFocus', false);\nexport const CONTEXT_SETTINGS_ROW_FOCUS = new RawContextKey<boolean>('settingRowFocus', false);\nexport const CONTEXT_KEYBINDINGS_EDITOR = new RawContextKey<boolean>('inKeybindings', false);\nexport const CONTEXT_KEYBINDINGS_SEARCH_FOCUS = new RawContextKey<boolean>('inKeybindingsSearch', false);\nexport const CONTEXT_KEYBINDING_FOCUS = new RawContextKey<boolean>('keybindingFocus', false);\n\nexport const KEYBINDINGS_EDITOR_COMMAND_SEARCH = 'keybindings.editor.searchKeybindings';\nexport const KEYBINDINGS_EDITOR_COMMAND_CLEAR_SEARCH_RESULTS = 'keybindings.editor.clearSearchResults';\nexport const KEYBINDINGS_EDITOR_COMMAND_RECORD_SEARCH_KEYS = 'keybindings.editor.recordSearchKeys';\nexport const KEYBINDINGS_EDITOR_COMMAND_SORTBY_PRECEDENCE = 'keybindings.editor.toggleSortByPrecedence';\nexport const KEYBINDINGS_EDITOR_COMMAND_DEFINE = 'keybindings.editor.defineKeybinding';\nexport const KEYBINDINGS_EDITOR_COMMAND_ADD = 'keybindings.editor.addKeybinding';\nexport const KEYBINDINGS_EDITOR_COMMAND_DEFINE_WHEN = 'keybindings.editor.defineWhenExpression';\nexport const KEYBINDINGS_EDITOR_COMMAND_REMOVE = 'keybindings.editor.removeKeybinding';\nexport const KEYBINDINGS_EDITOR_COMMAND_RESET = 'keybindings.editor.resetKeybinding';\nexport const KEYBINDINGS_EDITOR_COMMAND_COPY = 'keybindings.editor.copyKeybindingEntry';\nexport const KEYBINDINGS_EDITOR_COMMAND_COPY_COMMAND = 'keybindings.editor.copyCommandKeybindingEntry';\nexport const KEYBINDINGS_EDITOR_COMMAND_SHOW_SIMILAR = 'keybindings.editor.showConflicts';\nexport const KEYBINDINGS_EDITOR_COMMAND_FOCUS_KEYBINDINGS = 'keybindings.editor.focusKeybindings';\nexport const KEYBINDINGS_EDITOR_SHOW_DEFAULT_KEYBINDINGS = 'keybindings.editor.showDefaultKeybindings';\nexport const KEYBINDINGS_EDITOR_SHOW_USER_KEYBINDINGS = 'keybindings.editor.showUserKeybindings';\nexport const KEYBINDINGS_EDITOR_SHOW_EXTENSION_KEYBINDINGS = 'keybindings.editor.showExtensionKeybindings';\n\nexport const MODIFIED_SETTING_TAG = 'modified';\nexport const EXTENSION_SETTING_TAG = 'ext:';\nexport const FEATURE_SETTING_TAG = 'feature:';\nexport const ID_SETTING_TAG = 'id:';\nexport const REQUIRE_TRUSTED_WORKSPACE_SETTING_TAG = 'requireTrustedWorkspace';\nexport const KEYBOARD_LAYOUT_OPEN_PICKER = 'workbench.action.openKeyboardLayoutPicker';\n"]}