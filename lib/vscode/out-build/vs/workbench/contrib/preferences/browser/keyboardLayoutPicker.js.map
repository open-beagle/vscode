{"version":3,"sources":["vs/workbench/contrib/preferences/browser/keyboardLayoutPicker.ts"],"names":[],"mappings":"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","file":"keyboardLayoutPicker.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { StatusbarAlignment, IStatusbarService, IStatusbarEntryAccessor } from 'vs/workbench/services/statusbar/common/statusbar';\nimport { Disposable, MutableDisposable } from 'vs/base/common/lifecycle';\nimport { parseKeyboardLayoutDescription, areKeyboardLayoutsEqual, getKeyboardLayoutId, IKeyboardLayoutService, IKeyboardLayoutInfo } from 'vs/platform/keyboardLayout/common/keyboardLayout';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { Extensions as WorkbenchExtensions, IWorkbenchContribution, IWorkbenchContributionsRegistry } from 'vs/workbench/common/contributions';\nimport { IWorkbenchActionRegistry, Extensions as ActionExtensions } from 'vs/workbench/common/actions';\nimport { KEYBOARD_LAYOUT_OPEN_PICKER } from 'vs/workbench/contrib/preferences/common/preferences';\nimport { Action } from 'vs/base/common/actions';\nimport { isMacintosh, isWindows } from 'vs/base/common/platform';\nimport { QuickPickInput, IQuickInputService, IQuickPickItem } from 'vs/platform/quickinput/common/quickInput';\nimport { SyncActionDescriptor } from 'vs/platform/actions/common/actions';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { IEditorPane } from 'vs/workbench/common/editor';\n\nexport class KeyboardLayoutPickerContribution extends Disposable implements IWorkbenchContribution {\n\tprivate readonly pickerElement = this._register(new MutableDisposable<IStatusbarEntryAccessor>());\n\n\tconstructor(\n\t\t@IKeyboardLayoutService private readonly keyboardLayoutService: IKeyboardLayoutService,\n\t\t@IStatusbarService private readonly statusbarService: IStatusbarService,\n\t) {\n\t\tsuper();\n\n\t\tlet layout = this.keyboardLayoutService.getCurrentKeyboardLayout();\n\t\tif (layout) {\n\t\t\tlet layoutInfo = parseKeyboardLayoutDescription(layout);\n\t\t\tconst text = nls.localize('keyboardLayout', \"Layout: {0}\", layoutInfo.label);\n\n\t\t\tthis.pickerElement.value = this.statusbarService.addEntry(\n\t\t\t\t{\n\t\t\t\t\ttext,\n\t\t\t\t\tariaLabel: text,\n\t\t\t\t\tcommand: KEYBOARD_LAYOUT_OPEN_PICKER\n\t\t\t\t},\n\t\t\t\t'status.workbench.keyboardLayout',\n\t\t\t\tnls.localize('status.workbench.keyboardLayout', \"Keyboard Layout\"),\n\t\t\t\tStatusbarAlignment.RIGHT\n\t\t\t);\n\t\t}\n\n\t\tthis._register(keyboardLayoutService.onDidChangeKeyboardLayout(() => {\n\t\t\tlet layout = this.keyboardLayoutService.getCurrentKeyboardLayout();\n\t\t\tlet layoutInfo = parseKeyboardLayoutDescription(layout);\n\n\t\t\tif (this.pickerElement.value) {\n\t\t\t\tconst text = nls.localize('keyboardLayout', \"Layout: {0}\", layoutInfo.label);\n\t\t\t\tthis.pickerElement.value.update({\n\t\t\t\t\ttext,\n\t\t\t\t\tariaLabel: text,\n\t\t\t\t\tcommand: KEYBOARD_LAYOUT_OPEN_PICKER\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconst text = nls.localize('keyboardLayout', \"Layout: {0}\", layoutInfo.label);\n\t\t\t\tthis.pickerElement.value = this.statusbarService.addEntry(\n\t\t\t\t\t{\n\t\t\t\t\t\ttext,\n\t\t\t\t\t\tariaLabel: text,\n\t\t\t\t\t\tcommand: KEYBOARD_LAYOUT_OPEN_PICKER\n\t\t\t\t\t},\n\t\t\t\t\t'status.workbench.keyboardLayout',\n\t\t\t\t\tnls.localize('status.workbench.keyboardLayout', \"Keyboard Layout\"),\n\t\t\t\t\tStatusbarAlignment.RIGHT\n\t\t\t\t);\n\t\t\t}\n\t\t}));\n\t}\n}\n\nconst workbenchContributionsRegistry = Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench);\nworkbenchContributionsRegistry.registerWorkbenchContribution(KeyboardLayoutPickerContribution, LifecyclePhase.Starting);\n\ninterface LayoutQuickPickItem extends IQuickPickItem {\n\tlayout: IKeyboardLayoutInfo;\n}\n\ninterface IUnknownLayout {\n\ttext?: string;\n\tlang?: string;\n\tlayout?: string;\n}\n\nexport class KeyboardLayoutPickerAction extends Action {\n\tstatic readonly ID = KEYBOARD_LAYOUT_OPEN_PICKER;\n\tstatic readonly LABEL = nls.localize('keyboard.chooseLayout', \"Change Keyboard Layout\");\n\n\tprivate static DEFAULT_CONTENT: string = [\n\t\t`// ${nls.localize('displayLanguage', 'Defines the keyboard layout used in VS Code in the browser environment.')}`,\n\t\t`// ${nls.localize('doc', 'Open VS Code and run \"Developer: Inspect Key Mappings (JSON)\" from Command Palette.')}`,\n\t\t``,\n\t\t`// Once you have the keyboard layout info, please paste it below.`,\n\t\t'\\n'\n\t].join('\\n');\n\n\tconstructor(\n\t\tactionId: string,\n\t\tactionLabel: string,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@IKeyboardLayoutService private readonly keyboardLayoutService: IKeyboardLayoutService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@IEditorService private readonly editorService: IEditorService\n\t) {\n\t\tsuper(actionId, actionLabel, undefined, true);\n\t}\n\n\toverride async run(): Promise<void> {\n\t\tlet layouts = this.keyboardLayoutService.getAllKeyboardLayouts();\n\t\tlet currentLayout = this.keyboardLayoutService.getCurrentKeyboardLayout();\n\t\tlet layoutConfig = this.configurationService.getValue('keyboard.layout');\n\t\tlet isAutoDetect = layoutConfig === 'autodetect';\n\n\t\tconst picks: QuickPickInput[] = layouts.map(layout => {\n\t\t\tconst picked = !isAutoDetect && areKeyboardLayoutsEqual(currentLayout, layout);\n\t\t\tconst layoutInfo = parseKeyboardLayoutDescription(layout);\n\t\t\treturn {\n\t\t\t\tlayout: layout,\n\t\t\t\tlabel: [layoutInfo.label, (layout && layout.isUserKeyboardLayout) ? '(User configured layout)' : ''].join(' '),\n\t\t\t\tid: (layout as IUnknownLayout).text || (layout as IUnknownLayout).lang || (layout as IUnknownLayout).layout,\n\t\t\t\tdescription: layoutInfo.description + (picked ? ' (Current layout)' : ''),\n\t\t\t\tpicked: !isAutoDetect && areKeyboardLayoutsEqual(currentLayout, layout)\n\t\t\t};\n\t\t}).sort((a: IQuickPickItem, b: IQuickPickItem) => {\n\t\t\treturn a.label < b.label ? -1 : (a.label > b.label ? 1 : 0);\n\t\t});\n\n\t\tif (picks.length > 0) {\n\t\t\tconst platform = isMacintosh ? 'Mac' : isWindows ? 'Win' : 'Linux';\n\t\t\tpicks.unshift({ type: 'separator', label: nls.localize('layoutPicks', \"Keyboard Layouts ({0})\", platform) });\n\t\t}\n\n\t\tlet configureKeyboardLayout: IQuickPickItem = { label: nls.localize('configureKeyboardLayout', \"Configure Keyboard Layout\") };\n\n\t\tpicks.unshift(configureKeyboardLayout);\n\n\t\t// Offer to \"Auto Detect\"\n\t\tconst autoDetectMode: IQuickPickItem = {\n\t\t\tlabel: nls.localize('autoDetect', \"Auto Detect\"),\n\t\t\tdescription: isAutoDetect ? `Current: ${parseKeyboardLayoutDescription(currentLayout).label}` : undefined,\n\t\t\tpicked: isAutoDetect ? true : undefined\n\t\t};\n\n\t\tpicks.unshift(autoDetectMode);\n\n\t\tconst pick = await this.quickInputService.pick(picks, { placeHolder: nls.localize('pickKeyboardLayout', \"Select Keyboard Layout\"), matchOnDescription: true });\n\t\tif (!pick) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (pick === autoDetectMode) {\n\t\t\t// set keymap service to auto mode\n\t\t\tthis.configurationService.updateValue('keyboard.layout', 'autodetect');\n\t\t\treturn;\n\t\t}\n\n\t\tif (pick === configureKeyboardLayout) {\n\t\t\tconst file = this.environmentService.keyboardLayoutResource;\n\n\t\t\tawait this.fileService.resolve(file).then(undefined, (error) => {\n\t\t\t\treturn this.fileService.createFile(file, VSBuffer.fromString(KeyboardLayoutPickerAction.DEFAULT_CONTENT));\n\t\t\t}).then((stat): Promise<IEditorPane | undefined> | undefined => {\n\t\t\t\tif (!stat) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\treturn this.editorService.openEditor({\n\t\t\t\t\tresource: stat.resource,\n\t\t\t\t\tmode: 'jsonc',\n\t\t\t\t\toptions: { pinned: true }\n\t\t\t\t});\n\t\t\t}, (error) => {\n\t\t\t\tthrow new Error(nls.localize('fail.createSettings', \"Unable to create '{0}' ({1}).\", file.toString(), error));\n\t\t\t});\n\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tthis.configurationService.updateValue('keyboard.layout', getKeyboardLayoutId((<LayoutQuickPickItem>pick).layout));\n\t}\n}\n\nconst registry = Registry.as<IWorkbenchActionRegistry>(ActionExtensions.WorkbenchActions);\nregistry.registerWorkbenchAction(SyncActionDescriptor.from(KeyboardLayoutPickerAction, {}), 'Preferences: Change Keyboard Layout', nls.localize('preferences', \"Preferences\"));\n"]}