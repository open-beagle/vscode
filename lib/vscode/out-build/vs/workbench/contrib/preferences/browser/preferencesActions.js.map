{"version":3,"sources":["vs/workbench/contrib/preferences/browser/preferencesActions.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAWhG,IAAa,oCAAoC,GAAjD,MAAa,oCAAqC,SAAQ,gBAAM;QAK/D,YACC,EAAU,EACV,KAAa,EACmB,YAA2B,EAC5B,WAAyB,EACnB,iBAAqC,EACpC,kBAAuC;YAE7E,KAAK,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;YALe,iBAAY,GAAZ,YAAY,CAAe;YAC5B,gBAAW,GAAX,WAAW,CAAc;YACnB,sBAAiB,GAAjB,iBAAiB,CAAoB;YACpC,uBAAkB,GAAlB,kBAAkB,CAAqB;QAG9E,CAAC;QAEQ,KAAK,CAAC,GAAG;YACjB,MAAM,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,0BAA0B,EAAE,CAAC;YAChE,MAAM,KAAK,GAAqB,SAAS,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;gBACpE,MAAM,WAAW,GAAW,GAAG,CAAC,QAAQ,CAAC,+BAA+B,EAAE,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC,wBAAwB,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;gBAClJ,iEAAiE;gBACjE,IAAI,YAA6B,CAAC;gBAClC,MAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;gBACxD,IAAI,UAAU,IAAI,UAAU,CAAC,MAAM,EAAE;oBACpC,YAAY,GAAG,SAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;iBACvC;qBAAM;oBACN,MAAM,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;oBACtD,IAAI,SAAS,IAAI,SAAS,CAAC,MAAM,EAAE;wBAClC,YAAY,GAAG,SAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;qBACtC;iBACD;gBACD,OAAO;oBACN,KAAK,EAAE,IAAI;oBACX,WAAW,EAAE,CAAA,GAAA,+BAAc,CAAA,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,WAAW,EAAE,YAAY,CAAC;oBAC9E,WAAW;iBACO,CAAC;YACrB,CAAC,CAAC,CAAC;YAEH,MAAM,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,cAAc,EAAE,iBAAiB,CAAC,EAAE,CAAC;iBACxG,IAAI,CAAC,IAAI,CAAC,EAAE;gBACZ,IAAI,IAAI,EAAE;oBACT,MAAM,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,wBAAwB,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC;oBACnF,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;wBAC/B,OAAO,IAAI,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,IAAI,EAAE,EAAE,aAAa,EAAE,EAAE,GAAG,EAAE,IAAI,MAAM,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;qBAC/G;iBACD;gBACD,OAAO,SAAS,CAAC;YAClB,CAAC,CAAC,CAAC;QAEL,CAAC;KACD,CAAA;IAhDgB,uCAAE,GAAG,iDAAiD,CAAC;IACvD,0CAAK,GAAG,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAgC,EAAE,IAAyC,CAAC,EAAE,QAAQ,EAAE,yCAAyC,EAAE,CAAC;IAHtK,oCAAoC;QAQ9C,WAAA,4BAAa,CAAA;QACb,WAAA,0BAAY,CAAA;QACZ,WAAA,+BAAkB,CAAA;QAClB,WAAA,iCAAmB,CAAA;OAXT,oCAAoC,CAkDhD;IAlDY,oFAAoC","file":"preferencesActions.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Action } from 'vs/base/common/actions';\nimport { URI } from 'vs/base/common/uri';\nimport { getIconClasses } from 'vs/editor/common/services/getIconClasses';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport * as nls from 'vs/nls';\nimport { IQuickInputService, IQuickPickItem } from 'vs/platform/quickinput/common/quickInput';\nimport { IPreferencesService } from 'vs/workbench/services/preferences/common/preferences';\n\nexport class ConfigureLanguageBasedSettingsAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.configureLanguageBasedSettings';\n\tstatic readonly LABEL = { value: nls.localize('configureLanguageBasedSettings', \"Configure Language Specific Settings...\"), original: 'Configure Language Specific Settings...' };\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@IModeService private readonly modeService: IModeService,\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@IPreferencesService private readonly preferencesService: IPreferencesService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\toverride async run(): Promise<void> {\n\t\tconst languages = this.modeService.getRegisteredLanguageNames();\n\t\tconst picks: IQuickPickItem[] = languages.sort().map((lang, index) => {\n\t\t\tconst description: string = nls.localize('languageDescriptionConfigured', \"({0})\", this.modeService.getModeIdForLanguageName(lang.toLowerCase()));\n\t\t\t// construct a fake resource to be able to show nice icons if any\n\t\t\tlet fakeResource: URI | undefined;\n\t\t\tconst extensions = this.modeService.getExtensions(lang);\n\t\t\tif (extensions && extensions.length) {\n\t\t\t\tfakeResource = URI.file(extensions[0]);\n\t\t\t} else {\n\t\t\t\tconst filenames = this.modeService.getFilenames(lang);\n\t\t\t\tif (filenames && filenames.length) {\n\t\t\t\t\tfakeResource = URI.file(filenames[0]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tlabel: lang,\n\t\t\t\ticonClasses: getIconClasses(this.modelService, this.modeService, fakeResource),\n\t\t\t\tdescription\n\t\t\t} as IQuickPickItem;\n\t\t});\n\n\t\tawait this.quickInputService.pick(picks, { placeHolder: nls.localize('pickLanguage', \"Select Language\") })\n\t\t\t.then(pick => {\n\t\t\t\tif (pick) {\n\t\t\t\t\tconst modeId = this.modeService.getModeIdForLanguageName(pick.label.toLowerCase());\n\t\t\t\t\tif (typeof modeId === 'string') {\n\t\t\t\t\t\treturn this.preferencesService.openGlobalSettings(true, { revealSetting: { key: `[${modeId}]`, edit: true } });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t});\n\n\t}\n}\n"]}