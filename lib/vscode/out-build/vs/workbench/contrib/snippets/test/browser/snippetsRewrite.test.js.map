{"version":3,"file":"snippetsRewrite.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/snippets/test/browser/snippetsRewrite.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAKhG,KAAK,CAAC,gBAAgB,EAAE;QAEvB,SAAS,aAAa,CAAC,KAAa,EAAE,QAA0B;YAC/D,MAAM,MAAM,GAAG,IAAI,sBAAO,CAAC,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,eAAqB,CAAC;YAC3F,IAAI,OAAO,QAAQ,KAAK,SAAS,EAAE;gBAClC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;aAC9C;iBAAM;gBACN,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;aACjD;QACF,CAAC;QAED,IAAI,CAAC,yBAAyB,EAAE;YAE/B,aAAa,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YAC5B,aAAa,CAAC,kBAAkB,EAAE,KAAK,CAAC,CAAC;YAEzC,aAAa,CAAC,eAAe,EAAE,uBAAuB,CAAC,CAAC;YACxD,aAAa,CAAC,4BAA4B,EAAE,kCAAkC,CAAC,CAAC;YAGhF,aAAa,CACZ;gBACC,kEAAkE;gBAClE,wCAAwC;gBACxC,MAAM;gBACN,GAAG;aACH,CAAC,IAAI,CAAC,IAAI,CAAC,EACZ;gBACC,0EAA0E;gBAC1E,8CAA8C;gBAC9C,MAAM;gBACN,KAAK;aACL,CAAC,IAAI,CAAC,IAAI,CAAC,CACZ,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,0DAA0D,EAAE;YAChE,aAAa,CAAC,iDAAiD,EAAE,KAAK,CAAC,CAAC;QACzE,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,8BAA8B,EAAE;YACpC,MAAM,OAAO,GAAG,IAAI,sBAAO,CAAC,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,0CAA0C,EAAE,QAAQ,oBAA0B,CAAC;YACjJ,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,EAAE,0CAA0C,CAAC,CAAC;YAC7E,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,WAAW,EAAE,8CAA8C,CAAC,CAAC;YACxF,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { Snippet, SnippetSource } from 'vs/workbench/contrib/snippets/browser/snippetsFile';\n\nsuite('SnippetRewrite', function () {\n\n\tfunction assertRewrite(input: string, expected: string | boolean): void {\n\t\tconst actual = new Snippet(['foo'], 'foo', 'foo', 'foo', input, 'foo', SnippetSource.User);\n\t\tif (typeof expected === 'boolean') {\n\t\t\tassert.strictEqual(actual.codeSnippet, input);\n\t\t} else {\n\t\t\tassert.strictEqual(actual.codeSnippet, expected);\n\t\t}\n\t}\n\n\ttest('bogous variable rewrite', function () {\n\n\t\tassertRewrite('foo', false);\n\t\tassertRewrite('hello $1 world$0', false);\n\n\t\tassertRewrite('$foo and $foo', '${1:foo} and ${1:foo}');\n\t\tassertRewrite('$1 and $SELECTION and $foo', '$1 and ${SELECTION} and ${2:foo}');\n\n\n\t\tassertRewrite(\n\t\t\t[\n\t\t\t\t'for (var ${index} = 0; ${index} < ${array}.length; ${index}++) {',\n\t\t\t\t'\\tvar ${element} = ${array}[${index}];',\n\t\t\t\t'\\t$0',\n\t\t\t\t'}'\n\t\t\t].join('\\n'),\n\t\t\t[\n\t\t\t\t'for (var ${1:index} = 0; ${1:index} < ${2:array}.length; ${1:index}++) {',\n\t\t\t\t'\\tvar ${3:element} = ${2:array}[${1:index}];',\n\t\t\t\t'\\t$0',\n\t\t\t\t'\\\\}'\n\t\t\t].join('\\n')\n\t\t);\n\t});\n\n\ttest('Snippet choices: unable to escape comma and pipe, #31521', function () {\n\t\tassertRewrite('console.log(${1|not\\\\, not, five, 5, 1   23|});', false);\n\t});\n\n\ttest('lazy bogous variable rewrite', function () {\n\t\tconst snippet = new Snippet(['fooLang'], 'foo', 'prefix', 'desc', 'This is ${bogous} because it is a ${var}', 'source', SnippetSource.Extension);\n\t\tassert.strictEqual(snippet.body, 'This is ${bogous} because it is a ${var}');\n\t\tassert.strictEqual(snippet.codeSnippet, 'This is ${1:bogous} because it is a ${2:var}');\n\t\tassert.strictEqual(snippet.isBogous, true);\n\t});\n});\n"]}