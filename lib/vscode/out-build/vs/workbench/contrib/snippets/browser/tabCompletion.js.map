{"version":3,"file":"tabCompletion.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/snippets/browser/tabCompletion.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyCode } from 'vs/base/common/keyCodes';\nimport { RawContextKey, IContextKeyService, ContextKeyExpr, IContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { ISnippetsService } from './snippets.contribution';\nimport { getNonWhitespacePrefix } from './snippetsService';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { IEditorContribution } from 'vs/editor/common/editorCommon';\nimport { Range } from 'vs/editor/common/core/range';\nimport { registerEditorContribution, EditorCommand, registerEditorCommand } from 'vs/editor/browser/editorExtensions';\nimport { SnippetController2 } from 'vs/editor/contrib/snippet/snippetController2';\nimport { showSimpleSuggestions } from 'vs/editor/contrib/suggest/suggest';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { Snippet } from './snippetsFile';\nimport { SnippetCompletion } from './snippetCompletionProvider';\nimport { EditorOption } from 'vs/editor/common/config/editorOptions';\nimport { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';\nimport { EditorState, CodeEditorStateFlag } from 'vs/editor/browser/core/editorState';\n\nexport class TabCompletionController implements IEditorContribution {\n\n\tpublic static readonly ID = 'editor.tabCompletionController';\n\tstatic readonly ContextKey = new RawContextKey<boolean>('hasSnippetCompletions', undefined);\n\n\tpublic static get(editor: ICodeEditor): TabCompletionController {\n\t\treturn editor.getContribution<TabCompletionController>(TabCompletionController.ID);\n\t}\n\n\tprivate _hasSnippets: IContextKey<boolean>;\n\tprivate _activeSnippets: Snippet[] = [];\n\tprivate _enabled?: boolean;\n\tprivate _selectionListener?: IDisposable;\n\tprivate readonly _configListener: IDisposable;\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\t@ISnippetsService private readonly _snippetService: ISnippetsService,\n\t\t@IClipboardService private readonly _clipboardService: IClipboardService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t) {\n\t\tthis._hasSnippets = TabCompletionController.ContextKey.bindTo(contextKeyService);\n\t\tthis._configListener = this._editor.onDidChangeConfiguration(e => {\n\t\t\tif (e.hasChanged(EditorOption.tabCompletion)) {\n\t\t\t\tthis._update();\n\t\t\t}\n\t\t});\n\t\tthis._update();\n\t}\n\n\tdispose(): void {\n\t\tthis._configListener.dispose();\n\t\tthis._selectionListener?.dispose();\n\t}\n\n\tprivate _update(): void {\n\t\tconst enabled = this._editor.getOption(EditorOption.tabCompletion) === 'onlySnippets';\n\t\tif (this._enabled !== enabled) {\n\t\t\tthis._enabled = enabled;\n\t\t\tif (!this._enabled) {\n\t\t\t\tthis._selectionListener?.dispose();\n\t\t\t} else {\n\t\t\t\tthis._selectionListener = this._editor.onDidChangeCursorSelection(e => this._updateSnippets());\n\t\t\t\tif (this._editor.getModel()) {\n\t\t\t\t\tthis._updateSnippets();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _updateSnippets(): void {\n\n\t\t// reset first\n\t\tthis._activeSnippets = [];\n\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// lots of dance for getting the\n\t\tconst selection = this._editor.getSelection();\n\t\tconst model = this._editor.getModel();\n\t\tmodel.tokenizeIfCheap(selection.positionLineNumber);\n\t\tconst id = model.getLanguageIdAtPosition(selection.positionLineNumber, selection.positionColumn);\n\t\tconst snippets = this._snippetService.getSnippetsSync(id);\n\n\t\tif (!snippets) {\n\t\t\t// nothing for this language\n\t\t\tthis._hasSnippets.set(false);\n\t\t\treturn;\n\t\t}\n\n\t\tif (Range.isEmpty(selection)) {\n\t\t\t// empty selection -> real text (no whitespace) left of cursor\n\t\t\tconst prefix = getNonWhitespacePrefix(model, selection.getPosition());\n\t\t\tif (prefix) {\n\t\t\t\tfor (const snippet of snippets) {\n\t\t\t\t\tif (prefix.endsWith(snippet.prefix)) {\n\t\t\t\t\t\tthis._activeSnippets.push(snippet);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else if (!Range.spansMultipleLines(selection) && model.getValueLengthInRange(selection) <= 100) {\n\t\t\t// actual selection -> snippet must be a full match\n\t\t\tconst selected = model.getValueInRange(selection);\n\t\t\tif (selected) {\n\t\t\t\tfor (const snippet of snippets) {\n\t\t\t\t\tif (selected === snippet.prefix) {\n\t\t\t\t\t\tthis._activeSnippets.push(snippet);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._hasSnippets.set(this._activeSnippets.length > 0);\n\t}\n\n\tasync performSnippetCompletions() {\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._activeSnippets.length === 1) {\n\t\t\t// one -> just insert\n\t\t\tconst [snippet] = this._activeSnippets;\n\n\t\t\t// async clipboard access might be required and in that case\n\t\t\t// we need to check if the editor has changed in flight and then\n\t\t\t// bail out (or be smarter than that)\n\t\t\tlet clipboardText: string | undefined;\n\t\t\tif (snippet.needsClipboard) {\n\t\t\t\tconst state = new EditorState(this._editor, CodeEditorStateFlag.Value | CodeEditorStateFlag.Position);\n\t\t\t\tclipboardText = await this._clipboardService.readText();\n\t\t\t\tif (!state.validate(this._editor)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSnippetController2.get(this._editor).insert(snippet.codeSnippet, {\n\t\t\t\toverwriteBefore: snippet.prefix.length, overwriteAfter: 0,\n\t\t\t\tclipboardText\n\t\t\t});\n\n\t\t} else if (this._activeSnippets.length > 1) {\n\t\t\t// two or more -> show IntelliSense box\n\t\t\tconst position = this._editor.getPosition();\n\t\t\tshowSimpleSuggestions(this._editor, this._activeSnippets.map(snippet => {\n\t\t\t\tconst range = Range.fromPositions(position.delta(0, -snippet.prefix.length), position);\n\t\t\t\treturn new SnippetCompletion(snippet, range);\n\t\t\t}));\n\t\t}\n\t}\n}\n\nregisterEditorContribution(TabCompletionController.ID, TabCompletionController);\n\nconst TabCompletionCommand = EditorCommand.bindToContribution<TabCompletionController>(TabCompletionController.get);\n\nregisterEditorCommand(new TabCompletionCommand({\n\tid: 'insertSnippet',\n\tprecondition: TabCompletionController.ContextKey,\n\thandler: x => x.performSnippetCompletions(),\n\tkbOpts: {\n\t\tweight: KeybindingWeight.EditorContrib,\n\t\tkbExpr: ContextKeyExpr.and(\n\t\t\tEditorContextKeys.editorTextFocus,\n\t\t\tEditorContextKeys.tabDoesNotMoveFocus,\n\t\t\tSnippetController2.InSnippetMode.toNegated()\n\t\t),\n\t\tprimary: KeyCode.Tab\n\t}\n}));\n"]}