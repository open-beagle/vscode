{"version":3,"sources":["vs/workbench/contrib/snippets/browser/snippetCompletionProvider.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAiBhG,MAAa,iBAAiB;QAW7B,YACU,OAAgB,EACzB,KAAmD;YAD1C,YAAO,GAAP,OAAO,CAAS;YAGzB,IAAI,CAAC,KAAK,GAAG,EAAE,IAAI,EAAE,OAAO,CAAC,MAAM,EAAE,IAAI,EAAE,OAAO,CAAC,IAAI,EAAE,CAAC;YAC1D,IAAI,CAAC,MAAM,GAAG,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAgB,EAAE,IAAW,EAAE,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;YAC3G,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,WAAW,CAAC;YACtC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YACnB,IAAI,CAAC,QAAQ,GAAG,GAAG,OAAO,CAAC,aAAa,sBAA4B,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;YACrG,IAAI,CAAC,IAAI,mBAA6B,CAAC;YACvC,IAAI,CAAC,eAAe,0BAA+C,CAAC;QACrE,CAAC;QAED,OAAO;YACN,IAAI,CAAC,aAAa,GAAG,IAAI,4BAAc,EAAE,CAAC,eAAe,CAAC,EAAE,EAAE,IAAI,6BAAa,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;YAClH,OAAO,IAAI,CAAC;QACb,CAAC;QAED,MAAM,CAAC,cAAc,CAAC,CAAoB,EAAE,CAAoB;YAC/D,OAAO,CAAA,GAAA,iBAAO,CAAA,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAC5C,CAAC;KACD;IAhCD,8CAgCC;IAED,IAAa,yBAAyB,GAAtC,MAAa,yBAAyB;QAIrC,YACgC,YAA0B,EACtB,SAA2B;YAD/B,iBAAY,GAAZ,YAAY,CAAc;YACtB,cAAS,GAAT,SAAS,CAAkB;YAJtD,sBAAiB,GAAG,oBAAoB,CAAC;YAMjD,EAAE;QACH,CAAC;QAED,KAAK,CAAC,sBAAsB,CAAC,KAAiB,EAAE,QAAkB,EAAE,OAA0B;;YAE7F,IAAI,OAAO,CAAC,WAAW,6BAA2C,KAAI,MAAA,OAAO,CAAC,gBAAgB,0CAAE,KAAK,CAAC,IAAI,CAAC,CAAA,EAAE;gBAC5G,4DAA4D;gBAC5D,OAAO,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC;aAC3B;YAED,MAAM,EAAE,GAAG,IAAI,qBAAS,CAAC,IAAI,CAAC,CAAC;YAC/B,MAAM,UAAU,GAAG,IAAI,CAAC,wBAAwB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;YAClE,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;YAE9D,IAAI,GAAG,GAAG,EAAE,UAAU,EAAE,QAAQ,CAAC,UAAU,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC;YACzD,IAAI,WAAW,GAAa,EAAE,CAAC;YAC/B,MAAM,WAAW,GAAG,KAAK,CAAC,cAAc,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,WAAW,EAAE,CAAC;YAC5E,MAAM,gBAAgB,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YAErE,OAAO,GAAG,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,EAAE;gBACpC,IAAI,IAAI,GAAG,KAAK,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC;gBACxC,IAAI,IAAI,EAAE;oBACT,YAAY;oBACZ,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC;oBACvC,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;oBAChC,IAAI,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC,EAAE;wBACpF,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC;qBACrC;iBACD;qBACI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,EAAE;oBACjD,iCAAiC;oBACjC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;oBACjC,GAAG,CAAC,MAAM,IAAI,CAAC,CAAC;iBAChB;qBACI;oBACJ,kBAAkB;oBAClB,GAAG,CAAC,MAAM,IAAI,CAAC,CAAC;iBAChB;aACD;YAED,MAAM,iBAAiB,GAAG,IAAI,GAAG,CAAU,QAAQ,CAAC,CAAC;YACrD,MAAM,WAAW,GAAwB,EAAE,CAAC;YAE5C,MAAM,YAAY,GAAG,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;YAEzC,KAAK,MAAM,KAAK,IAAI,WAAW,EAAE;gBAChC,iBAAiB,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;oBACnC,IAAI,CAAA,GAAA,yBAAe,CAAA,CAAC,WAAW,EAAE,KAAK,EAAE,YAAY,EAAE,OAAO,CAAC,SAAS,EAAE,CAAC,EAAE,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE;wBACtG,MAAM,SAAS,GAAG,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;wBAChD,MAAM,aAAa,GAAG,OAAO,CAAC,SAAS,CAAC,MAAM,GAAG,SAAS,CAAC;wBAC3D,MAAM,kBAAkB,GAAG,CAAA,GAAA,0BAAgB,CAAA,CAAC,WAAW,EAAE,OAAO,CAAC,SAAS,EAAE,YAAY,EAAE,CAAC,YAAY,CAAC,GAAG,aAAa,EAAE,SAAS,EAAE,SAAS,GAAG,aAAa,CAAC,CAAC;wBAChK,MAAM,aAAa,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;wBACpD,IAAI,SAAS,GAAG,kBAAkB,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,GAAG,aAAa,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC;wBAE7F,8DAA8D;wBAC9D,IAAI,YAAY,GAAG,WAAW,CAAC,MAAM,EAAE;4BACtC,MAAM,gBAAgB,GAAG,6DAA6B,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;4BACvF,MAAM,mCAAmC,GAAG,gBAAgB,CAAC,+BAA+B,CAAC,GAAG,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,CAAC;4BAC5H,4FAA4F;4BAC5F,IAAI,mCAAmC,aAAnC,mCAAmC,uBAAnC,mCAAmC,CAAE,IAAI,CAAC,CAAC,CAAC,EAAE;4BACjD,yEAAyE;4BACzE,CAAC,CAAC,IAAI,KAAK,WAAW,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC;gCAChD,4EAA4E;gCAC5E,OAAO,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC;gCACjC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,EAAE;gCAExD,2EAA2E;gCAC3E,SAAS,EAAE,CAAC;6BACZ;yBACD;wBAED,MAAM,OAAO,GAAG,aAAK,CAAC,aAAa,CAAC,aAAa,EAAE,EAAE,UAAU,EAAE,QAAQ,CAAC,UAAU,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC,CAAC;wBAC3G,MAAM,MAAM,GAAG,OAAO,CAAC,cAAc,CAAC,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;wBAE5E,WAAW,CAAC,IAAI,CAAC,IAAI,iBAAiB,CAAC,OAAO,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;wBACtE,iBAAiB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;qBAClC;gBACF,CAAC,CAAC,CAAC;aACH;YACD,IAAI,gBAAgB,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE;gBACjD,6EAA6E;gBAC7E,wCAAwC;gBACxC,iBAAiB,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;oBACnC,MAAM,MAAM,GAAG,aAAK,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;oBAC7C,MAAM,OAAO,GAAG,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,EAAE,YAAY,CAAC,KAAK,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,MAAM,GAAG,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;oBACxL,WAAW,CAAC,IAAI,CAAC,IAAI,iBAAiB,CAAC,OAAO,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;gBACvE,CAAC,CAAC,CAAC;aACH;YAGD,2CAA2C;YAC3C,WAAW,CAAC,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAC;YACnD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAC5C,IAAI,IAAI,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;gBAC1B,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;gBACf,OAAO,EAAE,GAAG,WAAW,CAAC,MAAM,IAAI,IAAI,CAAC,KAAK,KAAK,WAAW,CAAC,EAAE,CAAC,CAAC,KAAK,EAAE,EAAE,EAAE,EAAE;oBAC7E,WAAW,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,GAAG,CAAA,GAAA,cAAQ,CAAA,CAAC,CAA0B,EAAE,IAAU,EAAE,WAAW,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,WAAW,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;iBACxI;gBACD,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE;oBACf,WAAW,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,GAAG,CAAA,GAAA,cAAQ,CAAA,CAAC,CAA0B,EAAE,IAAU,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBACrI,CAAC,GAAG,EAAE,CAAC;iBACP;aACD;YAED,OAAO;gBACN,WAAW;gBACX,QAAQ,EAAE,EAAE,CAAC,OAAO,EAAE;aACtB,CAAC;QACH,CAAC;QAED,qBAAqB,CAAC,IAAoB;YACzC,OAAO,CAAC,IAAI,YAAY,iBAAiB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;QACpE,CAAC;QAEO,wBAAwB,CAAC,KAAiB,EAAE,QAAkB;YACrE,qDAAqD;YACrD,qDAAqD;YACrD,iDAAiD;YACjD,KAAK,CAAC,eAAe,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;YAC3C,IAAI,UAAU,GAAG,KAAK,CAAC,uBAAuB,CAAC,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;YACrF,MAAM,kBAAkB,GAAG,IAAI,CAAC,YAAY,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC;YAC/E,IAAI,kBAAkB,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,kBAAkB,CAAC,QAAQ,CAAC,EAAE;gBAC1F,UAAU,GAAG,KAAK,CAAC,qBAAqB,EAAE,CAAC,EAAE,CAAC;aAC9C;YACD,OAAO,UAAU,CAAC;QACnB,CAAC;KACD,CAAA;IAtIY,yBAAyB;QAKnC,WAAA,0BAAY,CAAA;QACZ,WAAA,wCAAgB,CAAA;OANN,yBAAyB,CAsIrC;IAtIY,8DAAyB","file":"snippetCompletionProvider.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { MarkdownString } from 'vs/base/common/htmlContent';\nimport { compare, compareSubstring } from 'vs/base/common/strings';\nimport { Position } from 'vs/editor/common/core/position';\nimport { IRange, Range } from 'vs/editor/common/core/range';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { CompletionItem, CompletionItemKind, CompletionItemProvider, CompletionList, LanguageId, CompletionItemInsertTextRule, CompletionContext, CompletionTriggerKind, CompletionItemLabel } from 'vs/editor/common/modes';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { SnippetParser } from 'vs/editor/contrib/snippet/snippetParser';\nimport { localize } from 'vs/nls';\nimport { ISnippetsService } from 'vs/workbench/contrib/snippets/browser/snippets.contribution';\nimport { Snippet, SnippetSource } from 'vs/workbench/contrib/snippets/browser/snippetsFile';\nimport { isPatternInWord } from 'vs/base/common/filters';\nimport { StopWatch } from 'vs/base/common/stopwatch';\nimport { LanguageConfigurationRegistry } from 'vs/editor/common/modes/languageConfigurationRegistry';\n\nexport class SnippetCompletion implements CompletionItem {\n\n\tlabel: CompletionItemLabel;\n\tdetail: string;\n\tinsertText: string;\n\tdocumentation?: MarkdownString;\n\trange: IRange | { insert: IRange, replace: IRange };\n\tsortText: string;\n\tkind: CompletionItemKind;\n\tinsertTextRules: CompletionItemInsertTextRule;\n\n\tconstructor(\n\t\treadonly snippet: Snippet,\n\t\trange: IRange | { insert: IRange, replace: IRange }\n\t) {\n\t\tthis.label = { name: snippet.prefix, type: snippet.name };\n\t\tthis.detail = localize('detail.snippet', \"{0} ({1})\", snippet.description || snippet.name, snippet.source);\n\t\tthis.insertText = snippet.codeSnippet;\n\t\tthis.range = range;\n\t\tthis.sortText = `${snippet.snippetSource === SnippetSource.Extension ? 'z' : 'a'}-${snippet.prefix}`;\n\t\tthis.kind = CompletionItemKind.Snippet;\n\t\tthis.insertTextRules = CompletionItemInsertTextRule.InsertAsSnippet;\n\t}\n\n\tresolve(): this {\n\t\tthis.documentation = new MarkdownString().appendCodeblock('', new SnippetParser().text(this.snippet.codeSnippet));\n\t\treturn this;\n\t}\n\n\tstatic compareByLabel(a: SnippetCompletion, b: SnippetCompletion): number {\n\t\treturn compare(a.label.name, b.label.name);\n\t}\n}\n\nexport class SnippetCompletionProvider implements CompletionItemProvider {\n\n\treadonly _debugDisplayName = 'snippetCompletions';\n\n\tconstructor(\n\t\t@IModeService private readonly _modeService: IModeService,\n\t\t@ISnippetsService private readonly _snippets: ISnippetsService\n\t) {\n\t\t//\n\t}\n\n\tasync provideCompletionItems(model: ITextModel, position: Position, context: CompletionContext): Promise<CompletionList> {\n\n\t\tif (context.triggerKind === CompletionTriggerKind.TriggerCharacter && context.triggerCharacter?.match(/\\s/)) {\n\t\t\t// no snippets when suggestions have been triggered by space\n\t\t\treturn { suggestions: [] };\n\t\t}\n\n\t\tconst sw = new StopWatch(true);\n\t\tconst languageId = this._getLanguageIdAtPosition(model, position);\n\t\tconst snippets = await this._snippets.getSnippets(languageId);\n\n\t\tlet pos = { lineNumber: position.lineNumber, column: 1 };\n\t\tlet lineOffsets: number[] = [];\n\t\tconst lineContent = model.getLineContent(position.lineNumber).toLowerCase();\n\t\tconst endsInWhitespace = /\\s/.test(lineContent[position.column - 2]);\n\n\t\twhile (pos.column < position.column) {\n\t\t\tlet word = model.getWordAtPosition(pos);\n\t\t\tif (word) {\n\t\t\t\t// at a word\n\t\t\t\tlineOffsets.push(word.startColumn - 1);\n\t\t\t\tpos.column = word.endColumn + 1;\n\t\t\t\tif (word.endColumn < position.column && !/\\s/.test(lineContent[word.endColumn - 1])) {\n\t\t\t\t\tlineOffsets.push(word.endColumn - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (!/\\s/.test(lineContent[pos.column - 1])) {\n\t\t\t\t// at a none-whitespace character\n\t\t\t\tlineOffsets.push(pos.column - 1);\n\t\t\t\tpos.column += 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// always advance!\n\t\t\t\tpos.column += 1;\n\t\t\t}\n\t\t}\n\n\t\tconst availableSnippets = new Set<Snippet>(snippets);\n\t\tconst suggestions: SnippetCompletion[] = [];\n\n\t\tconst columnOffset = position.column - 1;\n\n\t\tfor (const start of lineOffsets) {\n\t\t\tavailableSnippets.forEach(snippet => {\n\t\t\t\tif (isPatternInWord(lineContent, start, columnOffset, snippet.prefixLow, 0, snippet.prefixLow.length)) {\n\t\t\t\t\tconst prefixPos = position.column - (1 + start);\n\t\t\t\t\tconst prefixRestLen = snippet.prefixLow.length - prefixPos;\n\t\t\t\t\tconst endsWithPrefixRest = compareSubstring(lineContent, snippet.prefixLow, columnOffset, (columnOffset) + prefixRestLen, prefixPos, prefixPos + prefixRestLen);\n\t\t\t\t\tconst startPosition = position.delta(0, -prefixPos);\n\t\t\t\t\tlet endColumn = endsWithPrefixRest === 0 ? position.column + prefixRestLen : position.column;\n\n\t\t\t\t\t// First check if there is anything to the right of the cursor\n\t\t\t\t\tif (columnOffset < lineContent.length) {\n\t\t\t\t\t\tconst autoClosingPairs = LanguageConfigurationRegistry.getAutoClosingPairs(languageId);\n\t\t\t\t\t\tconst standardAutoClosingPairConditionals = autoClosingPairs.autoClosingPairsCloseSingleChar.get(lineContent[columnOffset]);\n\t\t\t\t\t\t// If the character to the right of the cursor is a closing character of an autoclosing pair\n\t\t\t\t\t\tif (standardAutoClosingPairConditionals?.some(p =>\n\t\t\t\t\t\t\t// and the start position is the opening character of an autoclosing pair\n\t\t\t\t\t\t\tp.open === lineContent[startPosition.column - 1] &&\n\t\t\t\t\t\t\t// and the snippet prefix contains the opening and closing pair at its edges\n\t\t\t\t\t\t\tsnippet.prefix.startsWith(p.open) &&\n\t\t\t\t\t\t\tsnippet.prefix[snippet.prefix.length - 1] === p.close)) {\n\n\t\t\t\t\t\t\t// Eat the character that was likely inserted because of auto-closing pairs\n\t\t\t\t\t\t\tendColumn++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst replace = Range.fromPositions(startPosition, { lineNumber: position.lineNumber, column: endColumn });\n\t\t\t\t\tconst insert = replace.setEndPosition(position.lineNumber, position.column);\n\n\t\t\t\t\tsuggestions.push(new SnippetCompletion(snippet, { replace, insert }));\n\t\t\t\t\tavailableSnippets.delete(snippet);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif (endsInWhitespace || lineOffsets.length === 0) {\n\t\t\t// add remaing snippets when the current prefix ends in whitespace or when no\n\t\t\t// interesting positions have been found\n\t\t\tavailableSnippets.forEach(snippet => {\n\t\t\t\tconst insert = Range.fromPositions(position);\n\t\t\t\tconst replace = lineContent.indexOf(snippet.prefixLow, columnOffset) === columnOffset ? insert.setEndPosition(position.lineNumber, position.column + snippet.prefixLow.length) : insert;\n\t\t\t\tsuggestions.push(new SnippetCompletion(snippet, { replace, insert }));\n\t\t\t});\n\t\t}\n\n\n\t\t// dismbiguate suggestions with same labels\n\t\tsuggestions.sort(SnippetCompletion.compareByLabel);\n\t\tfor (let i = 0; i < suggestions.length; i++) {\n\t\t\tlet item = suggestions[i];\n\t\t\tlet to = i + 1;\n\t\t\tfor (; to < suggestions.length && item.label === suggestions[to].label; to++) {\n\t\t\t\tsuggestions[to].label.name = localize('snippetSuggest.longLabel', \"{0}, {1}\", suggestions[to].label.name, suggestions[to].snippet.name);\n\t\t\t}\n\t\t\tif (to > i + 1) {\n\t\t\t\tsuggestions[i].label.name = localize('snippetSuggest.longLabel', \"{0}, {1}\", suggestions[i].label.name, suggestions[i].snippet.name);\n\t\t\t\ti = to;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tsuggestions,\n\t\t\tduration: sw.elapsed()\n\t\t};\n\t}\n\n\tresolveCompletionItem(item: CompletionItem): CompletionItem {\n\t\treturn (item instanceof SnippetCompletion) ? item.resolve() : item;\n\t}\n\n\tprivate _getLanguageIdAtPosition(model: ITextModel, position: Position): LanguageId {\n\t\t// validate the `languageId` to ensure this is a user\n\t\t// facing language with a name and the chance to have\n\t\t// snippets, else fall back to the outer language\n\t\tmodel.tokenizeIfCheap(position.lineNumber);\n\t\tlet languageId = model.getLanguageIdAtPosition(position.lineNumber, position.column);\n\t\tconst languageIdentifier = this._modeService.getLanguageIdentifier(languageId);\n\t\tif (languageIdentifier && !this._modeService.getLanguageName(languageIdentifier.language)) {\n\t\t\tlanguageId = model.getLanguageIdentifier().id;\n\t\t}\n\t\treturn languageId;\n\t}\n}\n"]}