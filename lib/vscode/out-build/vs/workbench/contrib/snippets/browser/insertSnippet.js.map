{"version":3,"sources":["vs/workbench/contrib/snippets/browser/insertSnippet.ts"],"names":[],"mappings":"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","file":"insertSnippet.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { registerEditorAction, ServicesAccessor, EditorAction } from 'vs/editor/browser/editorExtensions';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { LanguageId } from 'vs/editor/common/modes';\nimport { ICommandService, CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { ISnippetsService } from 'vs/workbench/contrib/snippets/browser/snippets.contribution';\nimport { SnippetController2 } from 'vs/editor/contrib/snippet/snippetController2';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { Snippet, SnippetSource } from 'vs/workbench/contrib/snippets/browser/snippetsFile';\nimport { IQuickPickItem, IQuickInputService, QuickPickInput } from 'vs/platform/quickinput/common/quickInput';\nimport { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';\nimport { Codicon } from 'vs/base/common/codicons';\nimport { Event } from 'vs/base/common/event';\n\n\nclass Args {\n\n\tstatic fromUser(arg: any): Args {\n\t\tif (!arg || typeof arg !== 'object') {\n\t\t\treturn Args._empty;\n\t\t}\n\t\tlet { snippet, name, langId } = arg;\n\t\tif (typeof snippet !== 'string') {\n\t\t\tsnippet = undefined;\n\t\t}\n\t\tif (typeof name !== 'string') {\n\t\t\tname = undefined;\n\t\t}\n\t\tif (typeof langId !== 'string') {\n\t\t\tlangId = undefined;\n\t\t}\n\t\treturn new Args(snippet, name, langId);\n\t}\n\n\tprivate static readonly _empty = new Args(undefined, undefined, undefined);\n\n\tprivate constructor(\n\t\tpublic readonly snippet: string | undefined,\n\t\tpublic readonly name: string | undefined,\n\t\tpublic readonly langId: string | undefined\n\t) { }\n}\n\nclass InsertSnippetAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.insertSnippet',\n\t\t\tlabel: nls.localize('snippet.suggestions.label', \"Insert Snippet\"),\n\t\t\talias: 'Insert Snippet',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tdescription: {\n\t\t\t\tdescription: `Insert Snippet`,\n\t\t\t\targs: [{\n\t\t\t\t\tname: 'args',\n\t\t\t\t\tschema: {\n\t\t\t\t\t\t'type': 'object',\n\t\t\t\t\t\t'properties': {\n\t\t\t\t\t\t\t'snippet': {\n\t\t\t\t\t\t\t\t'type': 'string'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t'langId': {\n\t\t\t\t\t\t\t\t'type': 'string',\n\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t'name': {\n\t\t\t\t\t\t\t\t'type': 'string'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t}]\n\t\t\t}\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, editor: ICodeEditor, arg: any): Promise<void> {\n\t\tconst modeService = accessor.get(IModeService);\n\t\tconst snippetService = accessor.get(ISnippetsService);\n\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst clipboardService = accessor.get(IClipboardService);\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\n\t\tconst snippet = await new Promise<Snippet | undefined>(async (resolve) => {\n\n\t\t\tconst { lineNumber, column } = editor.getPosition();\n\t\t\tlet { snippet, name, langId } = Args.fromUser(arg);\n\n\t\t\tif (snippet) {\n\t\t\t\treturn resolve(new Snippet(\n\t\t\t\t\t[],\n\t\t\t\t\t'',\n\t\t\t\t\t'',\n\t\t\t\t\t'',\n\t\t\t\t\tsnippet,\n\t\t\t\t\t'',\n\t\t\t\t\tSnippetSource.User,\n\t\t\t\t));\n\t\t\t}\n\n\t\t\tlet languageId = LanguageId.Null;\n\t\t\tif (langId) {\n\t\t\t\tconst otherLangId = modeService.getLanguageIdentifier(langId);\n\t\t\t\tif (otherLangId) {\n\t\t\t\t\tlanguageId = otherLangId.id;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\teditor.getModel().tokenizeIfCheap(lineNumber);\n\t\t\t\tlanguageId = editor.getModel().getLanguageIdAtPosition(lineNumber, column);\n\n\t\t\t\t// validate the `languageId` to ensure this is a user\n\t\t\t\t// facing language with a name and the chance to have\n\t\t\t\t// snippets, else fall back to the outer language\n\t\t\t\tconst otherLangId = modeService.getLanguageIdentifier(languageId);\n\t\t\t\tif (otherLangId && !modeService.getLanguageName(otherLangId.language)) {\n\t\t\t\t\tlanguageId = editor.getModel().getLanguageIdentifier().id;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (name) {\n\t\t\t\t// take selected snippet\n\t\t\t\tconst snippet = (await snippetService.getSnippets(languageId, { includeNoPrefixSnippets: true })).find(snippet => snippet.name === name);\n\t\t\t\tresolve(snippet);\n\n\t\t\t} else {\n\t\t\t\t// let user pick a snippet\n\t\t\t\tconst snippet = await this._pickSnippet(snippetService, quickInputService, languageId);\n\t\t\t\tresolve(snippet);\n\t\t\t}\n\t\t});\n\n\t\tif (!snippet) {\n\t\t\treturn;\n\t\t}\n\t\tlet clipboardText: string | undefined;\n\t\tif (snippet.needsClipboard) {\n\t\t\tclipboardText = await clipboardService.readText();\n\t\t}\n\t\tSnippetController2.get(editor).insert(snippet.codeSnippet, { clipboardText });\n\t}\n\n\tprivate async _pickSnippet(snippetService: ISnippetsService, quickInputService: IQuickInputService, languageId: LanguageId): Promise<Snippet | undefined> {\n\n\t\tinterface ISnippetPick extends IQuickPickItem {\n\t\t\tsnippet: Snippet;\n\t\t}\n\n\t\tconst snippets = (await snippetService.getSnippets(languageId, { includeDisabledSnippets: true, includeNoPrefixSnippets: true })).sort(Snippet.compare);\n\n\t\tconst makeSnippetPicks = () => {\n\t\t\tconst result: QuickPickInput<ISnippetPick>[] = [];\n\t\t\tlet prevSnippet: Snippet | undefined;\n\t\t\tfor (const snippet of snippets) {\n\t\t\t\tconst pick: ISnippetPick = {\n\t\t\t\t\tlabel: snippet.prefix || snippet.name,\n\t\t\t\t\tdetail: snippet.description,\n\t\t\t\t\tsnippet\n\t\t\t\t};\n\t\t\t\tif (!prevSnippet || prevSnippet.snippetSource !== snippet.snippetSource) {\n\t\t\t\t\tlet label = '';\n\t\t\t\t\tswitch (snippet.snippetSource) {\n\t\t\t\t\t\tcase SnippetSource.User:\n\t\t\t\t\t\t\tlabel = nls.localize('sep.userSnippet', \"User Snippets\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase SnippetSource.Extension:\n\t\t\t\t\t\t\tlabel = nls.localize('sep.extSnippet', \"Extension Snippets\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase SnippetSource.Workspace:\n\t\t\t\t\t\t\tlabel = nls.localize('sep.workspaceSnippet', \"Workspace Snippets\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tresult.push({ type: 'separator', label });\n\t\t\t\t}\n\n\t\t\t\tif (snippet.snippetSource === SnippetSource.Extension) {\n\t\t\t\t\tconst isEnabled = snippetService.isEnabled(snippet);\n\t\t\t\t\tif (isEnabled) {\n\t\t\t\t\t\tpick.buttons = [{\n\t\t\t\t\t\t\ticonClass: Codicon.eyeClosed.classNames,\n\t\t\t\t\t\t\ttooltip: nls.localize('disableSnippet', 'Hide from IntelliSense')\n\t\t\t\t\t\t}];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpick.description = nls.localize('isDisabled', \"(hidden from IntelliSense)\");\n\t\t\t\t\t\tpick.buttons = [{\n\t\t\t\t\t\t\ticonClass: Codicon.eye.classNames,\n\t\t\t\t\t\t\ttooltip: nls.localize('enable.snippet', 'Show in IntelliSense')\n\t\t\t\t\t\t}];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tresult.push(pick);\n\t\t\t\tprevSnippet = snippet;\n\t\t\t}\n\t\t\treturn result;\n\t\t};\n\n\t\tconst picker = quickInputService.createQuickPick<ISnippetPick>();\n\t\tpicker.placeholder = nls.localize('pick.placeholder', \"Select a snippet\");\n\t\tpicker.matchOnDetail = true;\n\t\tpicker.ignoreFocusOut = false;\n\t\tpicker.onDidTriggerItemButton(ctx => {\n\t\t\tconst isEnabled = snippetService.isEnabled(ctx.item.snippet);\n\t\t\tsnippetService.updateEnablement(ctx.item.snippet, !isEnabled);\n\t\t\tpicker.items = makeSnippetPicks();\n\t\t});\n\t\tpicker.items = makeSnippetPicks();\n\t\tpicker.show();\n\n\t\t// wait for an item to be picked or the picker to become hidden\n\t\tawait Promise.race([Event.toPromise(picker.onDidAccept), Event.toPromise(picker.onDidHide)]);\n\t\tconst result = picker.selectedItems[0]?.snippet;\n\t\tpicker.dispose();\n\t\treturn result;\n\t}\n}\n\nregisterEditorAction(InsertSnippetAction);\n\n// compatibility command to make sure old keybinding are still working\nCommandsRegistry.registerCommand('editor.action.showSnippets', accessor => {\n\treturn accessor.get(ICommandService).executeCommand('editor.action.insertSnippet');\n});\n"]}