{"version":3,"sources":["vs/workbench/contrib/snippets/browser/snippets.contribution.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAUnF,QAAA,gBAAgB,GAAG,CAAA,GAAA,+BAAe,CAAA,CAAmB,gBAAgB,CAAC,CAAC;IAsBpF,MAAM,qBAAqB,GAAG,2BAA2B,CAAC;IAE1D,MAAM,uBAAuB,GAAmB;QAC/C,MAAM,EAAE;YACP,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,CAA2B,EAAE,IAA8D,CAAC;YACtH,IAAI,EAAE,CAAC,QAAQ,EAAE,OAAO,CAAC;SACzB;QACD,IAAI,EAAE;YACL,mBAAmB,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAyB,EAAE,IAAiO,CAAC;YAC/R,IAAI,EAAE,CAAC,QAAQ,EAAE,OAAO,CAAC;YACzB,KAAK,EAAE;gBACN,IAAI,EAAE,QAAQ;aACd;SACD;QACD,WAAW,EAAE;YACZ,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAgC,EAAE,IAA0B,CAAC;YACvF,IAAI,EAAE,CAAC,QAAQ,EAAE,OAAO,CAAC;SACzB;KACD,CAAC;IAEF,MAAM,mBAAmB,GAAgB;QACxC,EAAE,EAAE,qBAAqB;QACzB,aAAa,EAAE,IAAI;QACnB,mBAAmB,EAAE,IAAI;QACzB,eAAe,EAAE,CAAC;gBACjB,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,CAA4B,EAAE,IAAe,CAAC;gBAClE,IAAI,EAAE,EAAE,kBAAkB,EAAE,EAAE,QAAQ,EAAE,aAAa,EAAE,MAAM,EAAE,cAAc,EAAE,aAAa,EAAE,kBAAkB,EAAE,EAAE;aACpH,CAAC;QACF,IAAI,EAAE,QAAQ;QACd,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAoB,EAAE,IAA4B,CAAC;QAC7E,oBAAoB,EAAE;YACrB,IAAI,EAAE,QAAQ;YACd,QAAQ,EAAE,CAAC,MAAM,CAAC;YAClB,UAAU,EAAE,uBAAuB;YACnC,oBAAoB,EAAE,KAAK;SAC3B;KACD,CAAC;IAGF,MAAM,cAAc,GAAG,kCAAkC,CAAC;IAC1D,MAAM,YAAY,GAAgB;QACjC,EAAE,EAAE,cAAc;QAClB,aAAa,EAAE,IAAI;QACnB,mBAAmB,EAAE,IAAI;QACzB,eAAe,EAAE,CAAC;gBACjB,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,CAA4B,EAAE,IAAe,CAAC;gBAClE,IAAI,EAAE,EAAE,kBAAkB,EAAE,EAAE,OAAO,EAAE,YAAY,EAAE,QAAQ,EAAE,aAAa,EAAE,MAAM,EAAE,cAAc,EAAE,aAAa,EAAE,kBAAkB,EAAE,EAAE;aAC3I,CAAC;QACF,IAAI,EAAE,QAAQ;QACd,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAoB,EAAE,IAA4B,CAAC;QAC7E,oBAAoB,EAAE;YACrB,IAAI,EAAE,QAAQ;YACd,QAAQ,EAAE,CAAC,MAAM,CAAC;YAClB,UAAU,kCACN,uBAAuB,KAC1B,KAAK,EAAE;oBACN,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,CAA0B,EAAE,IAAuF,CAAC;oBAC9I,IAAI,EAAE,QAAQ;iBACd,GACD;YACD,oBAAoB,EAAE,KAAK;SAC3B;KACD,CAAC;IAEF,MAAM,GAAG,GAAG,mBAAQ,CAAC,EAAE,CAAqD,wBAAwB,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC;IAClI,GAAG,CAAC,cAAc,CAAC,qBAAqB,EAAE,mBAAmB,CAAC,CAAC;IAC/D,GAAG,CAAC,cAAc,CAAC,cAAc,EAAE,YAAY,CAAC,CAAC","file":"snippets.contribution.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IJSONSchema, IJSONSchemaMap } from 'vs/base/common/jsonSchema';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport * as JSONContributionRegistry from 'vs/platform/jsonschemas/common/jsonContributionRegistry';\nimport * as nls from 'vs/nls';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { LanguageId } from 'vs/editor/common/modes';\nimport { SnippetFile, Snippet } from 'vs/workbench/contrib/snippets/browser/snippetsFile';\n\nexport const ISnippetsService = createDecorator<ISnippetsService>('snippetService');\n\nexport interface ISnippetGetOptions {\n\tincludeDisabledSnippets?: boolean;\n\tincludeNoPrefixSnippets?: boolean;\n}\n\nexport interface ISnippetsService {\n\n\treadonly _serviceBrand: undefined;\n\n\tgetSnippetFiles(): Promise<Iterable<SnippetFile>>;\n\n\tisEnabled(snippet: Snippet): boolean;\n\n\tupdateEnablement(snippet: Snippet, enabled: boolean): void;\n\n\tgetSnippets(languageId: LanguageId, opt?: ISnippetGetOptions): Promise<Snippet[]>;\n\n\tgetSnippetsSync(languageId: LanguageId, opt?: ISnippetGetOptions): Snippet[];\n}\n\nconst languageScopeSchemaId = 'vscode://schemas/snippets';\n\nconst snippetSchemaProperties: IJSONSchemaMap = {\n\tprefix: {\n\t\tdescription: nls.localize('snippetSchema.json.prefix', 'The prefix to use when selecting the snippet in intellisense'),\n\t\ttype: ['string', 'array']\n\t},\n\tbody: {\n\t\tmarkdownDescription: nls.localize('snippetSchema.json.body', 'The snippet content. Use `$1`, `${1:defaultText}` to define cursor positions, use `$0` for the final cursor position. Insert variable values with `${varName}` and `${varName:defaultText}`, e.g. `This is file: $TM_FILENAME`.'),\n\t\ttype: ['string', 'array'],\n\t\titems: {\n\t\t\ttype: 'string'\n\t\t}\n\t},\n\tdescription: {\n\t\tdescription: nls.localize('snippetSchema.json.description', 'The snippet description.'),\n\t\ttype: ['string', 'array']\n\t}\n};\n\nconst languageScopeSchema: IJSONSchema = {\n\tid: languageScopeSchemaId,\n\tallowComments: true,\n\tallowTrailingCommas: true,\n\tdefaultSnippets: [{\n\t\tlabel: nls.localize('snippetSchema.json.default', \"Empty snippet\"),\n\t\tbody: { '${1:snippetName}': { 'prefix': '${2:prefix}', 'body': '${3:snippet}', 'description': '${4:description}' } }\n\t}],\n\ttype: 'object',\n\tdescription: nls.localize('snippetSchema.json', 'User snippet configuration'),\n\tadditionalProperties: {\n\t\ttype: 'object',\n\t\trequired: ['body'],\n\t\tproperties: snippetSchemaProperties,\n\t\tadditionalProperties: false\n\t}\n};\n\n\nconst globalSchemaId = 'vscode://schemas/global-snippets';\nconst globalSchema: IJSONSchema = {\n\tid: globalSchemaId,\n\tallowComments: true,\n\tallowTrailingCommas: true,\n\tdefaultSnippets: [{\n\t\tlabel: nls.localize('snippetSchema.json.default', \"Empty snippet\"),\n\t\tbody: { '${1:snippetName}': { 'scope': '${2:scope}', 'prefix': '${3:prefix}', 'body': '${4:snippet}', 'description': '${5:description}' } }\n\t}],\n\ttype: 'object',\n\tdescription: nls.localize('snippetSchema.json', 'User snippet configuration'),\n\tadditionalProperties: {\n\t\ttype: 'object',\n\t\trequired: ['body'],\n\t\tproperties: {\n\t\t\t...snippetSchemaProperties,\n\t\t\tscope: {\n\t\t\t\tdescription: nls.localize('snippetSchema.json.scope', \"A list of language names to which this snippet applies, e.g. 'typescript,javascript'.\"),\n\t\t\t\ttype: 'string'\n\t\t\t}\n\t\t},\n\t\tadditionalProperties: false\n\t}\n};\n\nconst reg = Registry.as<JSONContributionRegistry.IJSONContributionRegistry>(JSONContributionRegistry.Extensions.JSONContribution);\nreg.registerSchema(languageScopeSchemaId, languageScopeSchema);\nreg.registerSchema(globalSchemaId, globalSchema);\n"]}