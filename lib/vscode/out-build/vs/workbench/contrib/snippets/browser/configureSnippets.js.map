{"version":3,"sources":["vs/workbench/contrib/snippets/browser/configureSnippets.ts"],"names":[],"mappings":"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","file":"configureSnippets.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { extname } from 'vs/base/common/path';\nimport { MenuRegistry, MenuId } from 'vs/platform/actions/common/actions';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { URI } from 'vs/base/common/uri';\nimport { ISnippetsService } from 'vs/workbench/contrib/snippets/browser/snippets.contribution';\nimport { IQuickPickItem, IQuickInputService, QuickPickInput } from 'vs/platform/quickinput/common/quickInput';\nimport { SnippetSource } from 'vs/workbench/contrib/snippets/browser/snippetsFile';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';\nimport { isValidBasename } from 'vs/base/common/extpath';\nimport { joinPath, basename } from 'vs/base/common/resources';\n\nconst id = 'workbench.action.openSnippets';\n\nnamespace ISnippetPick {\n\texport function is(thing: object | undefined): thing is ISnippetPick {\n\t\treturn !!thing && URI.isUri((<ISnippetPick>thing).filepath);\n\t}\n}\n\ninterface ISnippetPick extends IQuickPickItem {\n\tfilepath: URI;\n\thint?: true;\n}\n\nasync function computePicks(snippetService: ISnippetsService, envService: IEnvironmentService, modeService: IModeService) {\n\n\tconst existing: ISnippetPick[] = [];\n\tconst future: ISnippetPick[] = [];\n\n\tconst seen = new Set<string>();\n\n\tfor (const file of await snippetService.getSnippetFiles()) {\n\n\t\tif (file.source === SnippetSource.Extension) {\n\t\t\t// skip extension snippets\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (file.isGlobalSnippets) {\n\n\t\t\tawait file.load();\n\n\t\t\t// list scopes for global snippets\n\t\t\tconst names = new Set<string>();\n\t\t\touter: for (const snippet of file.data) {\n\t\t\t\tfor (const scope of snippet.scopes) {\n\t\t\t\t\tconst name = modeService.getLanguageName(scope);\n\t\t\t\t\tif (name) {\n\t\t\t\t\t\tif (names.size >= 4) {\n\t\t\t\t\t\t\tnames.add(`${name}...`);\n\t\t\t\t\t\t\tbreak outer;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tnames.add(name);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\texisting.push({\n\t\t\t\tlabel: basename(file.location),\n\t\t\t\tfilepath: file.location,\n\t\t\t\tdescription: names.size === 0\n\t\t\t\t\t? nls.localize('global.scope', \"(global)\")\n\t\t\t\t\t: nls.localize('global.1', \"({0})\", [...names].join(', '))\n\t\t\t});\n\n\t\t} else {\n\t\t\t// language snippet\n\t\t\tconst mode = basename(file.location).replace(/\\.json$/, '');\n\t\t\texisting.push({\n\t\t\t\tlabel: basename(file.location),\n\t\t\t\tdescription: `(${modeService.getLanguageName(mode)})`,\n\t\t\t\tfilepath: file.location\n\t\t\t});\n\t\t\tseen.add(mode);\n\t\t}\n\t}\n\n\tconst dir = envService.snippetsHome;\n\tfor (const mode of modeService.getRegisteredModes()) {\n\t\tconst label = modeService.getLanguageName(mode);\n\t\tif (label && !seen.has(mode)) {\n\t\t\tfuture.push({\n\t\t\t\tlabel: mode,\n\t\t\t\tdescription: `(${label})`,\n\t\t\t\tfilepath: joinPath(dir, `${mode}.json`),\n\t\t\t\thint: true\n\t\t\t});\n\t\t}\n\t}\n\n\texisting.sort((a, b) => {\n\t\tlet a_ext = extname(a.filepath.path);\n\t\tlet b_ext = extname(b.filepath.path);\n\t\tif (a_ext === b_ext) {\n\t\t\treturn a.label.localeCompare(b.label);\n\t\t} else if (a_ext === '.code-snippets') {\n\t\t\treturn -1;\n\t\t} else {\n\t\t\treturn 1;\n\t\t}\n\t});\n\n\tfuture.sort((a, b) => {\n\t\treturn a.label.localeCompare(b.label);\n\t});\n\n\treturn { existing, future };\n}\n\nasync function createSnippetFile(scope: string, defaultPath: URI, quickInputService: IQuickInputService, fileService: IFileService, textFileService: ITextFileService, opener: IOpenerService) {\n\n\tfunction createSnippetUri(input: string) {\n\t\tconst filename = extname(input) !== '.code-snippets'\n\t\t\t? `${input}.code-snippets`\n\t\t\t: input;\n\t\treturn joinPath(defaultPath, filename);\n\t}\n\n\tawait fileService.createFolder(defaultPath);\n\n\tconst input = await quickInputService.input({\n\t\tplaceHolder: nls.localize('name', \"Type snippet file name\"),\n\t\tasync validateInput(input) {\n\t\t\tif (!input) {\n\t\t\t\treturn nls.localize('bad_name1', \"Invalid file name\");\n\t\t\t}\n\t\t\tif (!isValidBasename(input)) {\n\t\t\t\treturn nls.localize('bad_name2', \"'{0}' is not a valid file name\", input);\n\t\t\t}\n\t\t\tif (await fileService.exists(createSnippetUri(input))) {\n\t\t\t\treturn nls.localize('bad_name3', \"'{0}' already exists\", input);\n\t\t\t}\n\t\t\treturn undefined;\n\t\t}\n\t});\n\n\tif (!input) {\n\t\treturn undefined;\n\t}\n\n\tconst resource = createSnippetUri(input);\n\n\tawait textFileService.write(resource, [\n\t\t'{',\n\t\t'\\t// Place your ' + scope + ' snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and ',\n\t\t'\\t// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope ',\n\t\t'\\t// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is ',\n\t\t'\\t// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: ',\n\t\t'\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. ',\n\t\t'\\t// Placeholders with the same ids are connected.',\n\t\t'\\t// Example:',\n\t\t'\\t// \"Print to console\": {',\n\t\t'\\t// \\t\"scope\": \"javascript,typescript\",',\n\t\t'\\t// \\t\"prefix\": \"log\",',\n\t\t'\\t// \\t\"body\": [',\n\t\t'\\t// \\t\\t\"console.log(\\'$1\\');\",',\n\t\t'\\t// \\t\\t\"$2\"',\n\t\t'\\t// \\t],',\n\t\t'\\t// \\t\"description\": \"Log output to console\"',\n\t\t'\\t// }',\n\t\t'}'\n\t].join('\\n'));\n\n\tawait opener.open(resource);\n\treturn undefined;\n}\n\nasync function createLanguageSnippetFile(pick: ISnippetPick, fileService: IFileService, textFileService: ITextFileService) {\n\tif (await fileService.exists(pick.filepath)) {\n\t\treturn;\n\t}\n\tconst contents = [\n\t\t'{',\n\t\t'\\t// Place your snippets for ' + pick.label + ' here. Each snippet is defined under a snippet name and has a prefix, body and ',\n\t\t'\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:',\n\t\t'\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the ',\n\t\t'\\t// same ids are connected.',\n\t\t'\\t// Example:',\n\t\t'\\t// \"Print to console\": {',\n\t\t'\\t// \\t\"prefix\": \"log\",',\n\t\t'\\t// \\t\"body\": [',\n\t\t'\\t// \\t\\t\"console.log(\\'$1\\');\",',\n\t\t'\\t// \\t\\t\"$2\"',\n\t\t'\\t// \\t],',\n\t\t'\\t// \\t\"description\": \"Log output to console\"',\n\t\t'\\t// }',\n\t\t'}'\n\t].join('\\n');\n\tawait textFileService.write(pick.filepath, contents);\n}\n\nCommandsRegistry.registerCommand(id, async (accessor): Promise<any> => {\n\n\tconst snippetService = accessor.get(ISnippetsService);\n\tconst quickInputService = accessor.get(IQuickInputService);\n\tconst opener = accessor.get(IOpenerService);\n\tconst modeService = accessor.get(IModeService);\n\tconst envService = accessor.get(IEnvironmentService);\n\tconst workspaceService = accessor.get(IWorkspaceContextService);\n\tconst fileService = accessor.get(IFileService);\n\tconst textFileService = accessor.get(ITextFileService);\n\n\tconst picks = await computePicks(snippetService, envService, modeService);\n\tconst existing: QuickPickInput[] = picks.existing;\n\n\ttype SnippetPick = IQuickPickItem & { uri: URI } & { scope: string };\n\tconst globalSnippetPicks: SnippetPick[] = [{\n\t\tscope: nls.localize('new.global_scope', 'global'),\n\t\tlabel: nls.localize('new.global', \"New Global Snippets file...\"),\n\t\turi: envService.snippetsHome\n\t}];\n\n\tconst workspaceSnippetPicks: SnippetPick[] = [];\n\tfor (const folder of workspaceService.getWorkspace().folders) {\n\t\tworkspaceSnippetPicks.push({\n\t\t\tscope: nls.localize('new.workspace_scope', \"{0} workspace\", folder.name),\n\t\t\tlabel: nls.localize('new.folder', \"New Snippets file for '{0}'...\", folder.name),\n\t\t\turi: folder.toResource('.vscode')\n\t\t});\n\t}\n\n\tif (existing.length > 0) {\n\t\texisting.unshift({ type: 'separator', label: nls.localize('group.global', \"Existing Snippets\") });\n\t\texisting.push({ type: 'separator', label: nls.localize('new.global.sep', \"New Snippets\") });\n\t} else {\n\t\texisting.push({ type: 'separator', label: nls.localize('new.global.sep', \"New Snippets\") });\n\t}\n\n\tconst pick = await quickInputService.pick(([] as QuickPickInput[]).concat(existing, globalSnippetPicks, workspaceSnippetPicks, picks.future), {\n\t\tplaceHolder: nls.localize('openSnippet.pickLanguage', \"Select Snippets File or Create Snippets\"),\n\t\tmatchOnDescription: true\n\t});\n\n\tif (globalSnippetPicks.indexOf(pick as SnippetPick) >= 0) {\n\t\treturn createSnippetFile((pick as SnippetPick).scope, (pick as SnippetPick).uri, quickInputService, fileService, textFileService, opener);\n\t} else if (workspaceSnippetPicks.indexOf(pick as SnippetPick) >= 0) {\n\t\treturn createSnippetFile((pick as SnippetPick).scope, (pick as SnippetPick).uri, quickInputService, fileService, textFileService, opener);\n\t} else if (ISnippetPick.is(pick)) {\n\t\tif (pick.hint) {\n\t\t\tawait createLanguageSnippetFile(pick, fileService, textFileService);\n\t\t}\n\t\treturn opener.open(pick.filepath);\n\t}\n});\n\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid,\n\t\ttitle: { value: nls.localize('openSnippet.label', \"Configure User Snippets\"), original: 'Configure User Snippets' },\n\t\tcategory: { value: nls.localize('preferences', \"Preferences\"), original: 'Preferences' }\n\t}\n});\n\nMenuRegistry.appendMenuItem(MenuId.MenubarPreferencesMenu, {\n\tgroup: '3_snippets',\n\tcommand: {\n\t\tid,\n\t\ttitle: nls.localize({ key: 'miOpenSnippets', comment: ['&& denotes a mnemonic'] }, \"User &&Snippets\")\n\t},\n\torder: 1\n});\n\nMenuRegistry.appendMenuItem(MenuId.GlobalActivity, {\n\tgroup: '3_snippets',\n\tcommand: {\n\t\tid,\n\t\ttitle: nls.localize('userSnippets', \"User Snippets\")\n\t},\n\torder: 1\n});\n"]}