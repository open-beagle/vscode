{"version":3,"sources":["vs/workbench/contrib/snippets/browser/snippetsFile.ts"],"names":[],"mappings":"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","file":"snippetsFile.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { parse as jsonParse, getNodeType } from 'vs/base/common/json';\nimport { forEach } from 'vs/base/common/collections';\nimport { localize } from 'vs/nls';\nimport { extname, basename } from 'vs/base/common/path';\nimport { SnippetParser, Variable, Placeholder, Text } from 'vs/editor/contrib/snippet/snippetParser';\nimport { KnownSnippetVariableNames } from 'vs/editor/contrib/snippet/snippetVariables';\nimport { isFalsyOrWhitespace } from 'vs/base/common/strings';\nimport { URI } from 'vs/base/common/uri';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { IdleValue } from 'vs/base/common/async';\nimport { IExtensionResourceLoaderService } from 'vs/workbench/services/extensionResourceLoader/common/extensionResourceLoader';\nimport { relativePath } from 'vs/base/common/resources';\nimport { isObject } from 'vs/base/common/types';\nimport { Iterable } from 'vs/base/common/iterator';\n\nclass SnippetBodyInsights {\n\n\treadonly codeSnippet: string;\n\treadonly isBogous: boolean;\n\treadonly needsClipboard: boolean;\n\n\tconstructor(body: string) {\n\n\t\t// init with defaults\n\t\tthis.isBogous = false;\n\t\tthis.needsClipboard = false;\n\t\tthis.codeSnippet = body;\n\n\t\t// check snippet...\n\t\tconst textmateSnippet = new SnippetParser().parse(body, false);\n\n\t\tlet placeholders = new Map<string, number>();\n\t\tlet placeholderMax = 0;\n\t\tfor (const placeholder of textmateSnippet.placeholders) {\n\t\t\tplaceholderMax = Math.max(placeholderMax, placeholder.index);\n\t\t}\n\n\t\tlet stack = [...textmateSnippet.children];\n\t\twhile (stack.length > 0) {\n\t\t\tconst marker = stack.shift()!;\n\t\t\tif (marker instanceof Variable) {\n\n\t\t\t\tif (marker.children.length === 0 && !KnownSnippetVariableNames[marker.name]) {\n\t\t\t\t\t// a 'variable' without a default value and not being one of our supported\n\t\t\t\t\t// variables is automatically turned into a placeholder. This is to restore\n\t\t\t\t\t// a bug we had before. So `${foo}` becomes `${N:foo}`\n\t\t\t\t\tconst index = placeholders.has(marker.name) ? placeholders.get(marker.name)! : ++placeholderMax;\n\t\t\t\t\tplaceholders.set(marker.name, index);\n\n\t\t\t\t\tconst synthetic = new Placeholder(index).appendChild(new Text(marker.name));\n\t\t\t\t\ttextmateSnippet.replace(marker, [synthetic]);\n\t\t\t\t\tthis.isBogous = true;\n\t\t\t\t}\n\n\t\t\t\tif (marker.name === 'CLIPBOARD') {\n\t\t\t\t\tthis.needsClipboard = true;\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\t// recurse\n\t\t\t\tstack.push(...marker.children);\n\t\t\t}\n\t\t}\n\n\t\tif (this.isBogous) {\n\t\t\tthis.codeSnippet = textmateSnippet.toTextmateString();\n\t\t}\n\n\t}\n}\n\nexport class Snippet {\n\n\tprivate readonly _bodyInsights: IdleValue<SnippetBodyInsights>;\n\n\treadonly prefixLow: string;\n\n\tconstructor(\n\t\treadonly scopes: string[],\n\t\treadonly name: string,\n\t\treadonly prefix: string,\n\t\treadonly description: string,\n\t\treadonly body: string,\n\t\treadonly source: string,\n\t\treadonly snippetSource: SnippetSource,\n\t\treadonly snippetIdentifier?: string\n\t) {\n\t\tthis.prefixLow = prefix.toLowerCase();\n\t\tthis._bodyInsights = new IdleValue(() => new SnippetBodyInsights(this.body));\n\t}\n\n\tget codeSnippet(): string {\n\t\treturn this._bodyInsights.value.codeSnippet;\n\t}\n\n\tget isBogous(): boolean {\n\t\treturn this._bodyInsights.value.isBogous;\n\t}\n\n\tget needsClipboard(): boolean {\n\t\treturn this._bodyInsights.value.needsClipboard;\n\t}\n\n\tstatic compare(a: Snippet, b: Snippet): number {\n\t\tif (a.snippetSource < b.snippetSource) {\n\t\t\treturn -1;\n\t\t} else if (a.snippetSource > b.snippetSource) {\n\t\t\treturn 1;\n\t\t} else if (a.name > b.name) {\n\t\t\treturn 1;\n\t\t} else if (a.name < b.name) {\n\t\t\treturn -1;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n}\n\n\ninterface JsonSerializedSnippet {\n\tbody: string | string[];\n\tscope: string;\n\tprefix: string | string[] | undefined;\n\tdescription: string;\n}\n\nfunction isJsonSerializedSnippet(thing: any): thing is JsonSerializedSnippet {\n\treturn isObject(thing) && Boolean((<JsonSerializedSnippet>thing).body);\n}\n\ninterface JsonSerializedSnippets {\n\t[name: string]: JsonSerializedSnippet | { [name: string]: JsonSerializedSnippet };\n}\n\nexport const enum SnippetSource {\n\tUser = 1,\n\tWorkspace = 2,\n\tExtension = 3,\n}\n\nexport class SnippetFile {\n\n\treadonly data: Snippet[] = [];\n\treadonly isGlobalSnippets: boolean;\n\treadonly isUserSnippets: boolean;\n\n\tprivate _loadPromise?: Promise<this>;\n\n\tconstructor(\n\t\treadonly source: SnippetSource,\n\t\treadonly location: URI,\n\t\tpublic defaultScopes: string[] | undefined,\n\t\tprivate readonly _extension: IExtensionDescription | undefined,\n\t\tprivate readonly _fileService: IFileService,\n\t\tprivate readonly _extensionResourceLoaderService: IExtensionResourceLoaderService\n\t) {\n\t\tthis.isGlobalSnippets = extname(location.path) === '.code-snippets';\n\t\tthis.isUserSnippets = !this._extension;\n\t}\n\n\tselect(selector: string, bucket: Snippet[]): void {\n\t\tif (this.isGlobalSnippets || !this.isUserSnippets) {\n\t\t\tthis._scopeSelect(selector, bucket);\n\t\t} else {\n\t\t\tthis._filepathSelect(selector, bucket);\n\t\t}\n\t}\n\n\tprivate _filepathSelect(selector: string, bucket: Snippet[]): void {\n\t\t// for `fooLang.json` files all snippets are accepted\n\t\tif (selector + '.json' === basename(this.location.path)) {\n\t\t\tbucket.push(...this.data);\n\t\t}\n\t}\n\n\tprivate _scopeSelect(selector: string, bucket: Snippet[]): void {\n\t\t// for `my.code-snippets` files we need to look at each snippet\n\t\tfor (const snippet of this.data) {\n\t\t\tconst len = snippet.scopes.length;\n\t\t\tif (len === 0) {\n\t\t\t\t// always accept\n\t\t\t\tbucket.push(snippet);\n\n\t\t\t} else {\n\t\t\t\tfor (let i = 0; i < len; i++) {\n\t\t\t\t\t// match\n\t\t\t\t\tif (snippet.scopes[i] === selector) {\n\t\t\t\t\t\tbucket.push(snippet);\n\t\t\t\t\t\tbreak; // match only once!\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet idx = selector.lastIndexOf('.');\n\t\tif (idx >= 0) {\n\t\t\tthis._scopeSelect(selector.substring(0, idx), bucket);\n\t\t}\n\t}\n\n\tprivate async _load(): Promise<string> {\n\t\tif (this._extension) {\n\t\t\treturn this._extensionResourceLoaderService.readExtensionResource(this.location);\n\t\t} else {\n\t\t\tconst content = await this._fileService.readFile(this.location);\n\t\t\treturn content.value.toString();\n\t\t}\n\t}\n\n\tload(): Promise<this> {\n\t\tif (!this._loadPromise) {\n\t\t\tthis._loadPromise = Promise.resolve(this._load()).then(content => {\n\t\t\t\tconst data = <JsonSerializedSnippets>jsonParse(content);\n\t\t\t\tif (getNodeType(data) === 'object') {\n\t\t\t\t\tforEach(data, entry => {\n\t\t\t\t\t\tconst { key: name, value: scopeOrTemplate } = entry;\n\t\t\t\t\t\tif (isJsonSerializedSnippet(scopeOrTemplate)) {\n\t\t\t\t\t\t\tthis._parseSnippet(name, scopeOrTemplate, this.data);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tforEach(scopeOrTemplate, entry => {\n\t\t\t\t\t\t\t\tconst { key: name, value: template } = entry;\n\t\t\t\t\t\t\t\tthis._parseSnippet(name, template, this.data);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t});\n\t\t}\n\t\treturn this._loadPromise;\n\t}\n\n\treset(): void {\n\t\tthis._loadPromise = undefined;\n\t\tthis.data.length = 0;\n\t}\n\n\tprivate _parseSnippet(name: string, snippet: JsonSerializedSnippet, bucket: Snippet[]): void {\n\n\t\tlet { prefix, body, description } = snippet;\n\n\t\tif (!prefix) {\n\t\t\tprefix = '';\n\t\t}\n\n\t\tif (Array.isArray(body)) {\n\t\t\tbody = body.join('\\n');\n\t\t}\n\t\tif (typeof body !== 'string') {\n\t\t\treturn;\n\t\t}\n\n\t\tif (Array.isArray(description)) {\n\t\t\tdescription = description.join('\\n');\n\t\t}\n\n\t\tlet scopes: string[];\n\t\tif (this.defaultScopes) {\n\t\t\tscopes = this.defaultScopes;\n\t\t} else if (typeof snippet.scope === 'string') {\n\t\t\tscopes = snippet.scope.split(',').map(s => s.trim()).filter(s => !isFalsyOrWhitespace(s));\n\t\t} else {\n\t\t\tscopes = [];\n\t\t}\n\n\t\tlet source: string;\n\t\tif (this._extension) {\n\t\t\t// extension snippet -> show the name of the extension\n\t\t\tsource = this._extension.displayName || this._extension.name;\n\n\t\t} else if (this.source === SnippetSource.Workspace) {\n\t\t\t// workspace -> only *.code-snippets files\n\t\t\tsource = localize('source.workspaceSnippetGlobal', \"Workspace Snippet\");\n\t\t} else {\n\t\t\t// user -> global (*.code-snippets) and language snippets\n\t\t\tif (this.isGlobalSnippets) {\n\t\t\t\tsource = localize('source.userSnippetGlobal', \"Global User Snippet\");\n\t\t\t} else {\n\t\t\t\tsource = localize('source.userSnippet', \"User Snippet\");\n\t\t\t}\n\t\t}\n\n\t\tfor (const _prefix of Array.isArray(prefix) ? prefix : Iterable.single(prefix)) {\n\t\t\tbucket.push(new Snippet(\n\t\t\t\tscopes,\n\t\t\t\tname,\n\t\t\t\t_prefix,\n\t\t\t\tdescription,\n\t\t\t\tbody,\n\t\t\t\tsource,\n\t\t\t\tthis.source,\n\t\t\t\tthis._extension && `${relativePath(this._extension.extensionLocation, this.location)}/${name}`\n\t\t\t));\n\t\t}\n\t}\n}\n"]}