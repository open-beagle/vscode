{"version":3,"file":"walkThroughContentProvider.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/welcome/walkThrough/common/walkThroughContentProvider.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { ITextModelService, ITextModelContentProvider } from 'vs/editor/common/services/resolverService';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { ITextModel, DefaultEndOfLine, EndOfLinePreference, ITextBufferFactory } from 'vs/editor/common/model';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport * as marked from 'vs/base/common/marked/marked';\nimport { Schemas } from 'vs/base/common/network';\nimport { Range } from 'vs/editor/common/core/range';\nimport { createTextBufferFactory } from 'vs/editor/common/model/textModel';\nimport { assertIsDefined } from 'vs/base/common/types';\n\nexport function requireToContent(resource: URI): Promise<string> {\n\tif (!resource.query) {\n\t\tthrow new Error('Welcome: invalid resource');\n\t}\n\n\tconst query = JSON.parse(resource.query);\n\tif (!query.moduleId) {\n\t\tthrow new Error('Welcome: invalid resource');\n\t}\n\n\tconst content: Promise<string> = new Promise<string>((resolve, reject) => {\n\t\trequire([query.moduleId], content => {\n\t\t\ttry {\n\t\t\t\tresolve(content.default());\n\t\t\t} catch (err) {\n\t\t\t\treject(err);\n\t\t\t}\n\t\t});\n\t});\n\n\treturn content;\n}\n\nexport class WalkThroughSnippetContentProvider implements ITextModelContentProvider, IWorkbenchContribution {\n\tprivate loads = new Map<string, Promise<ITextBufferFactory>>();\n\n\tconstructor(\n\t\t@ITextModelService private readonly textModelResolverService: ITextModelService,\n\t\t@IModeService private readonly modeService: IModeService,\n\t\t@IModelService private readonly modelService: IModelService,\n\t) {\n\t\tthis.textModelResolverService.registerTextModelContentProvider(Schemas.walkThroughSnippet, this);\n\t}\n\n\tprivate async textBufferFactoryFromResource(resource: URI): Promise<ITextBufferFactory> {\n\t\tlet ongoing = this.loads.get(resource.toString());\n\t\tif (!ongoing) {\n\t\t\tongoing = new Promise(async c => {\n\t\t\t\tc(createTextBufferFactory(await requireToContent(resource)));\n\t\t\t\tthis.loads.delete(resource.toString());\n\t\t\t});\n\t\t\tthis.loads.set(resource.toString(), ongoing);\n\t\t}\n\t\treturn ongoing;\n\t}\n\n\tpublic async provideTextContent(resource: URI): Promise<ITextModel> {\n\t\tconst factory = await this.textBufferFactoryFromResource(resource.with({ fragment: '' }));\n\t\tlet codeEditorModel = this.modelService.getModel(resource);\n\t\tif (!codeEditorModel) {\n\t\t\tconst j = parseInt(resource.fragment);\n\t\t\tlet i = 0;\n\t\t\tconst renderer = new marked.Renderer();\n\t\t\trenderer.code = (code, lang) => {\n\t\t\t\ti++;\n\t\t\t\tconst languageId = this.modeService.getModeIdForLanguageName(lang) || '';\n\t\t\t\tconst languageSelection = this.modeService.create(languageId);\n\t\t\t\t// Create all models for this resource in one go... we'll need them all and we don't want to re-parse markdown each time\n\t\t\t\tconst model = this.modelService.createModel(code, languageSelection, resource.with({ fragment: `${i}.${lang}` }));\n\t\t\t\tif (i === j) { codeEditorModel = model; }\n\t\t\t\treturn '';\n\t\t\t};\n\t\t\tconst textBuffer = factory.create(DefaultEndOfLine.LF).textBuffer;\n\t\t\tconst lineCount = textBuffer.getLineCount();\n\t\t\tconst range = new Range(1, 1, lineCount, textBuffer.getLineLength(lineCount) + 1);\n\t\t\tconst markdown = textBuffer.getValueInRange(range, EndOfLinePreference.TextDefined);\n\t\t\tmarked(markdown, { renderer });\n\t\t}\n\t\treturn assertIsDefined(codeEditorModel);\n\t}\n}\n"]}