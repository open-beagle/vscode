{"version":3,"sources":["vs/workbench/contrib/welcome/walkThrough/browser/editor/editorWalkThrough.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAYhG,MAAM,MAAM,GAAG,oCAAoC,CAAC;IACpD,MAAM,YAAY,GAA4B;QAC7C,MAAM;QACN,IAAI,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAyB,EAAE,IAAwB,CAAC;QACnE,QAAQ,EAAE,oBAAU,CAAC,YAAY,CAAC,iCAAiC,EAAE,OAAO,CAAC;aAC3E,IAAI,CAAC;YACL,MAAM,EAAE,iBAAO,CAAC,WAAW;YAC3B,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,QAAQ,EAAE,oFAAoF,EAAE,CAAC;SACzH,CAAC;QACH,aAAa,EAAE,aAAa;KAC5B,CAAC;IAEF,IAAa,uBAAuB,GAApC,MAAa,uBAAwB,SAAQ,gBAAM;QAKlD,YACC,EAAU,EACV,KAAa,EACoB,aAA6B,EACtB,oBAA2C;YAEnF,KAAK,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;YAHgB,kBAAa,GAAb,aAAa,CAAgB;YACtB,yBAAoB,GAApB,oBAAoB,CAAuB;QAGpF,CAAC;QAEe,GAAG;YAClB,MAAM,KAAK,GAAG,IAAI,CAAC,oBAAoB,CAAC,cAAc,CAAC,mCAAgB,EAAE,YAAY,CAAC,CAAC;YACvF,OAAO,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,KAAK,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,uBAAc,CAAC,QAAQ,EAAE,CAAC;iBAC9F,IAAI,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QACxB,CAAC;KACD,CAAA;IAjBuB,0BAAE,GAAG,4CAA4C,CAAC;IAClD,6BAAK,GAAG,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAmB,EAAE,IAAwB,CAAC,CAAC;IAH3E,uBAAuB;QAQjC,WAAA,8BAAc,CAAA;QACd,WAAA,qCAAqB,CAAA;OATX,uBAAuB,CAmBnC;IAnBY,0DAAuB;IAqBpC,MAAa,gCAAgC;QAIrC,YAAY,CAAC,WAAwB;YAC3C,OAAO,IAAI,CAAC;QACb,CAAC;QAEM,SAAS,CAAC,WAAwB;YACxC,OAAO,IAAI,CAAC;QACb,CAAC;QAEM,WAAW,CAAC,oBAA2C,EAAE,qBAA6B;YAC5F,OAAO,oBAAoB,CAAC,cAAc,CAAC,mCAAgB,EAAE,YAAY,CAAC,CAAC;QAC5E,CAAC;;IAdF,4EAeC;IAbgB,mCAAE,GAAG,MAAM,CAAC","file":"editorWalkThrough.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/workbench/contrib/welcome/walkThrough/browser/editor/vs_code_editor_walkthrough';\nimport { localize } from 'vs/nls';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { Action } from 'vs/base/common/actions';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { WalkThroughInput, WalkThroughInputOptions } from 'vs/workbench/contrib/welcome/walkThrough/browser/walkThroughInput';\nimport { FileAccess, Schemas } from 'vs/base/common/network';\nimport { IEditorInputSerializer, EditorInput } from 'vs/workbench/common/editor';\nimport { EditorOverride } from 'vs/platform/editor/common/editor';\n\nconst typeId = 'workbench.editors.walkThroughInput';\nconst inputOptions: WalkThroughInputOptions = {\n\ttypeId,\n\tname: localize('editorWalkThrough.title', \"Interactive Playground\"),\n\tresource: FileAccess.asBrowserUri('./vs_code_editor_walkthrough.md', require)\n\t\t.with({\n\t\t\tscheme: Schemas.walkThrough,\n\t\t\tquery: JSON.stringify({ moduleId: 'vs/workbench/contrib/welcome/walkThrough/browser/editor/vs_code_editor_walkthrough' })\n\t\t}),\n\ttelemetryFrom: 'walkThrough'\n};\n\nexport class EditorWalkThroughAction extends Action {\n\n\tpublic static readonly ID = 'workbench.action.showInteractivePlayground';\n\tpublic static readonly LABEL = localize('editorWalkThrough', \"Interactive Playground\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic override run(): Promise<void> {\n\t\tconst input = this.instantiationService.createInstance(WalkThroughInput, inputOptions);\n\t\treturn this.editorService.openEditor(input, { pinned: true, override: EditorOverride.DISABLED })\n\t\t\t.then(() => void (0));\n\t}\n}\n\nexport class EditorWalkThroughInputSerializer implements IEditorInputSerializer {\n\n\tstatic readonly ID = typeId;\n\n\tpublic canSerialize(editorInput: EditorInput): boolean {\n\t\treturn true;\n\t}\n\n\tpublic serialize(editorInput: EditorInput): string {\n\t\treturn '{}';\n\t}\n\n\tpublic deserialize(instantiationService: IInstantiationService, serializedEditorInput: string): WalkThroughInput {\n\t\treturn instantiationService.createInstance(WalkThroughInput, inputOptions);\n\t}\n}\n"]}