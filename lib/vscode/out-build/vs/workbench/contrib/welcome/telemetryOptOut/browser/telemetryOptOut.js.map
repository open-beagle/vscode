{"version":3,"sources":["vs/workbench/contrib/welcome/telemetryOptOut/browser/telemetryOptOut.ts"],"names":[],"mappings":"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","file":"telemetryOptOut.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { INotificationService, Severity } from 'vs/platform/notification/common/notification';\nimport { URI } from 'vs/base/common/uri';\nimport { localize } from 'vs/nls';\nimport { IExperimentService, ExperimentState } from 'vs/workbench/contrib/experiments/common/experimentService';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { language, locale } from 'vs/base/common/platform';\nimport { IExtensionGalleryService } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IHostService } from 'vs/workbench/services/host/browser/host';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IJSONEditingService } from 'vs/workbench/services/configuration/common/jsonEditing';\n\nexport abstract class AbstractTelemetryOptOut implements IWorkbenchContribution {\n\n\tprivate static readonly TELEMETRY_OPT_OUT_SHOWN = 'workbench.telemetryOptOutShown';\n\tprivate privacyUrl: string | undefined;\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IOpenerService private readonly openerService: IOpenerService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IExperimentService private readonly experimentService: IExperimentService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IExtensionGalleryService private readonly galleryService: IExtensionGalleryService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@IJSONEditingService private readonly jsonEditingService: IJSONEditingService\n\t) {\n\t}\n\n\tprotected async handleTelemetryOptOut(): Promise<void> {\n\t\tif (this.productService.telemetryOptOutUrl && !this.storageService.get(AbstractTelemetryOptOut.TELEMETRY_OPT_OUT_SHOWN, StorageScope.GLOBAL)) {\n\t\t\tconst experimentId = 'telemetryOptOut';\n\n\t\t\tconst [count, experimentState] = await Promise.all([this.getWindowCount(), this.experimentService.getExperimentById(experimentId)]);\n\n\t\t\tif (!this.hostService.hasFocus && count > 1) {\n\t\t\t\treturn; // return early if meanwhile another window opened (we only show the opt-out once)\n\t\t\t}\n\n\t\t\tthis.storageService.store(AbstractTelemetryOptOut.TELEMETRY_OPT_OUT_SHOWN, true, StorageScope.GLOBAL, StorageTarget.USER);\n\n\t\t\tthis.privacyUrl = this.productService.privacyStatementUrl || this.productService.telemetryOptOutUrl;\n\n\t\t\tif (experimentState && experimentState.state === ExperimentState.Run && this.telemetryService.isOptedIn) {\n\t\t\t\tthis.runExperiment(experimentId);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst telemetryOptOutUrl = this.productService.telemetryOptOutUrl;\n\t\t\tif (telemetryOptOutUrl) {\n\t\t\t\tthis.showTelemetryOptOut(telemetryOptOutUrl);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate showTelemetryOptOut(telemetryOptOutUrl: string): void {\n\t\tconst optOutNotice = localize('telemetryOptOut.optOutNotice', \"Help improve VS Code by allowing Microsoft to collect usage data. Read our [privacy statement]({0}) and learn how to [opt out]({1}).\", this.privacyUrl, this.productService.telemetryOptOutUrl);\n\t\tconst optInNotice = localize('telemetryOptOut.optInNotice', \"Help improve VS Code by allowing Microsoft to collect usage data. Read our [privacy statement]({0}) and learn how to [opt in]({1}).\", this.privacyUrl, this.productService.telemetryOptOutUrl);\n\n\t\tthis.notificationService.prompt(\n\t\t\tSeverity.Info,\n\t\t\tthis.telemetryService.isOptedIn ? optOutNotice : optInNotice,\n\t\t\t[{\n\t\t\t\tlabel: localize('telemetryOptOut.readMore', \"Read More\"),\n\t\t\t\trun: () => this.openerService.open(URI.parse(telemetryOptOutUrl))\n\t\t\t}],\n\t\t\t{ sticky: true }\n\t\t);\n\t}\n\n\tprotected abstract getWindowCount(): Promise<number>;\n\n\tprivate runExperiment(experimentId: string) {\n\t\tconst promptMessageKey = 'telemetryOptOut.optOutOption';\n\t\tconst yesLabelKey = 'telemetryOptOut.OptIn';\n\t\tconst noLabelKey = 'telemetryOptOut.OptOut';\n\n\t\tlet promptMessage = localize('telemetryOptOut.optOutOption', \"Please help Microsoft improve Visual Studio Code by allowing the collection of usage data. Read our [privacy statement]({0}) for more details.\", this.privacyUrl);\n\t\tlet yesLabel = localize('telemetryOptOut.OptIn', \"Yes, glad to help\");\n\t\tlet noLabel = localize('telemetryOptOut.OptOut', \"No, thanks\");\n\n\t\tlet queryPromise = Promise.resolve(undefined);\n\t\tif (locale && locale !== language && locale !== 'en' && locale.indexOf('en-') === -1) {\n\t\t\tqueryPromise = this.galleryService.query({ text: `tag:lp-${locale}` }, CancellationToken.None).then(tagResult => {\n\t\t\t\tif (!tagResult || !tagResult.total) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\tconst extensionToFetchTranslationsFrom = tagResult.firstPage.filter(e => e.publisher === 'MS-CEINTL' && e.name.indexOf('vscode-language-pack') === 0)[0] || tagResult.firstPage[0];\n\t\t\t\tif (!extensionToFetchTranslationsFrom.assets || !extensionToFetchTranslationsFrom.assets.coreTranslations.length) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\treturn this.galleryService.getCoreTranslation(extensionToFetchTranslationsFrom, locale!)\n\t\t\t\t\t.then(translation => {\n\t\t\t\t\t\tconst translationsFromPack: any = translation && translation.contents ? translation.contents['vs/workbench/contrib/welcome/telemetryOptOut/electron-browser/telemetryOptOut'] : {};\n\t\t\t\t\t\tif (!!translationsFromPack[promptMessageKey] && !!translationsFromPack[yesLabelKey] && !!translationsFromPack[noLabelKey]) {\n\t\t\t\t\t\t\tpromptMessage = translationsFromPack[promptMessageKey].replace('{0}', this.privacyUrl) + ' (Please help Microsoft improve Visual Studio Code by allowing the collection of usage data.)';\n\t\t\t\t\t\t\tyesLabel = translationsFromPack[yesLabelKey] + ' (Yes)';\n\t\t\t\t\t\t\tnoLabel = translationsFromPack[noLabelKey] + ' (No)';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t});\n\n\t\t\t});\n\t\t}\n\n\t\tconst logTelemetry = (optout?: boolean) => {\n\t\t\ttype ExperimentsOptOutClassification = {\n\t\t\t\toptout?: { classification: 'SystemMetaData', purpose: 'FeatureInsight', isMeasurement: true };\n\t\t\t};\n\n\t\t\ttype ExperimentsOptOutEvent = {\n\t\t\t\toptout?: boolean;\n\t\t\t};\n\t\t\tthis.telemetryService.publicLog2<ExperimentsOptOutEvent, ExperimentsOptOutClassification>('experiments:optout', typeof optout === 'boolean' ? { optout } : {});\n\t\t};\n\n\t\tqueryPromise.then(() => {\n\t\t\tthis.notificationService.prompt(\n\t\t\t\tSeverity.Info,\n\t\t\t\tpromptMessage,\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: yesLabel,\n\t\t\t\t\t\trun: () => {\n\t\t\t\t\t\t\tlogTelemetry(false);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: noLabel,\n\t\t\t\t\t\trun: async () => {\n\t\t\t\t\t\t\tlogTelemetry(true);\n\t\t\t\t\t\t\tthis.configurationService.updateValue('telemetry.enableTelemetry', false);\n\t\t\t\t\t\t\tawait this.jsonEditingService.write(this.environmentService.argvResource, [{ path: ['enable-crash-reporter'], value: false }], true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t{\n\t\t\t\t\tsticky: true,\n\t\t\t\t\tonCancel: logTelemetry\n\t\t\t\t}\n\t\t\t);\n\t\t\tthis.experimentService.markAsCompleted(experimentId);\n\t\t});\n\t}\n}\n\nexport class BrowserTelemetryOptOut extends AbstractTelemetryOptOut {\n\n\tconstructor(\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IOpenerService openerService: IOpenerService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@IHostService hostService: IHostService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IExperimentService experimentService: IExperimentService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IExtensionGalleryService galleryService: IExtensionGalleryService,\n\t\t@IProductService productService: IProductService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@IJSONEditingService jsonEditingService: IJSONEditingService\n\t) {\n\t\tsuper(storageService, openerService, notificationService, hostService, telemetryService, experimentService, configurationService, galleryService, productService, environmentService, jsonEditingService);\n\n\t\tthis.handleTelemetryOptOut();\n\t}\n\n\tprotected async getWindowCount(): Promise<number> {\n\t\treturn 1;\n\t}\n}\n"]}