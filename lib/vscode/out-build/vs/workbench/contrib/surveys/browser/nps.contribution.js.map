{"version":3,"sources":["vs/workbench/contrib/surveys/browser/nps.contribution.ts"],"names":[],"mappings":"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","file":"nps.contribution.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { language } from 'vs/base/common/platform';\nimport { IWorkbenchContributionsRegistry, IWorkbenchContribution, Extensions as WorkbenchExtensions } from 'vs/workbench/common/contributions';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { Severity, INotificationService } from 'vs/platform/notification/common/notification';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { URI } from 'vs/base/common/uri';\nimport { platform } from 'vs/base/common/process';\n\nconst PROBABILITY = 0.15;\nconst SESSION_COUNT_KEY = 'nps/sessionCount';\nconst LAST_SESSION_DATE_KEY = 'nps/lastSessionDate';\nconst SKIP_VERSION_KEY = 'nps/skipVersion';\nconst IS_CANDIDATE_KEY = 'nps/isCandidate';\n\nclass NPSContribution implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IStorageService storageService: IStorageService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IOpenerService openerService: IOpenerService,\n\t\t@IProductService productService: IProductService\n\t) {\n\t\tif (!productService.npsSurveyUrl) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst skipVersion = storageService.get(SKIP_VERSION_KEY, StorageScope.GLOBAL, '');\n\t\tif (skipVersion) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst date = new Date().toDateString();\n\t\tconst lastSessionDate = storageService.get(LAST_SESSION_DATE_KEY, StorageScope.GLOBAL, new Date(0).toDateString());\n\n\t\tif (date === lastSessionDate) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst sessionCount = (storageService.getNumber(SESSION_COUNT_KEY, StorageScope.GLOBAL, 0) || 0) + 1;\n\t\tstorageService.store(LAST_SESSION_DATE_KEY, date, StorageScope.GLOBAL, StorageTarget.USER);\n\t\tstorageService.store(SESSION_COUNT_KEY, sessionCount, StorageScope.GLOBAL, StorageTarget.USER);\n\n\t\tif (sessionCount < 9) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isCandidate = storageService.getBoolean(IS_CANDIDATE_KEY, StorageScope.GLOBAL, false)\n\t\t\t|| Math.random() < PROBABILITY;\n\n\t\tstorageService.store(IS_CANDIDATE_KEY, isCandidate, StorageScope.GLOBAL, StorageTarget.USER);\n\n\t\tif (!isCandidate) {\n\t\t\tstorageService.store(SKIP_VERSION_KEY, productService.version, StorageScope.GLOBAL, StorageTarget.USER);\n\t\t\treturn;\n\t\t}\n\n\t\tnotificationService.prompt(\n\t\t\tSeverity.Info,\n\t\t\tnls.localize('surveyQuestion', \"Do you mind taking a quick feedback survey?\"),\n\t\t\t[{\n\t\t\t\tlabel: nls.localize('takeSurvey', \"Take Survey\"),\n\t\t\t\trun: () => {\n\t\t\t\t\ttelemetryService.getTelemetryInfo().then(info => {\n\t\t\t\t\t\topenerService.open(URI.parse(`${productService.npsSurveyUrl}?o=${encodeURIComponent(platform)}&v=${encodeURIComponent(productService.version)}&m=${encodeURIComponent(info.machineId)}`));\n\t\t\t\t\t\tstorageService.store(IS_CANDIDATE_KEY, false, StorageScope.GLOBAL, StorageTarget.USER);\n\t\t\t\t\t\tstorageService.store(SKIP_VERSION_KEY, productService.version, StorageScope.GLOBAL, StorageTarget.USER);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tlabel: nls.localize('remindLater', \"Remind Me later\"),\n\t\t\t\trun: () => storageService.store(SESSION_COUNT_KEY, sessionCount - 3, StorageScope.GLOBAL, StorageTarget.USER)\n\t\t\t}, {\n\t\t\t\tlabel: nls.localize('neverAgain', \"Don't Show Again\"),\n\t\t\t\trun: () => {\n\t\t\t\t\tstorageService.store(IS_CANDIDATE_KEY, false, StorageScope.GLOBAL, StorageTarget.USER);\n\t\t\t\t\tstorageService.store(SKIP_VERSION_KEY, productService.version, StorageScope.GLOBAL, StorageTarget.USER);\n\t\t\t\t}\n\t\t\t}],\n\t\t\t{ sticky: true }\n\t\t);\n\t}\n}\n\nif (language === 'en') {\n\tconst workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench);\n\tworkbenchRegistry.registerWorkbenchContribution(NPSContribution, LifecyclePhase.Restored);\n}\n"]}