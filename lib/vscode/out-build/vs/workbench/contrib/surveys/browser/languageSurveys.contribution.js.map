{"version":3,"sources":["vs/workbench/contrib/surveys/browser/languageSurveys.contribution.ts"],"names":[],"mappings":"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","file":"languageSurveys.contribution.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { language } from 'vs/base/common/platform';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { IWorkbenchContributionsRegistry, IWorkbenchContribution, Extensions as WorkbenchExtensions } from 'vs/workbench/common/contributions';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { ISurveyData } from 'vs/base/common/product';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { Severity, INotificationService } from 'vs/platform/notification/common/notification';\nimport { ITextFileService, ITextFileEditorModel } from 'vs/workbench/services/textfile/common/textfiles';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { URI } from 'vs/base/common/uri';\nimport { platform } from 'vs/base/common/process';\nimport { RunOnceWorker } from 'vs/base/common/async';\nimport { Disposable } from 'vs/base/common/lifecycle';\n\nclass LanguageSurvey extends Disposable {\n\n\tconstructor(\n\t\tdata: ISurveyData,\n\t\tstorageService: IStorageService,\n\t\tnotificationService: INotificationService,\n\t\ttelemetryService: ITelemetryService,\n\t\tmodeService: IModeService,\n\t\ttextFileService: ITextFileService,\n\t\topenerService: IOpenerService,\n\t\tproductService: IProductService\n\t) {\n\t\tsuper();\n\n\t\tconst SESSION_COUNT_KEY = `${data.surveyId}.sessionCount`;\n\t\tconst LAST_SESSION_DATE_KEY = `${data.surveyId}.lastSessionDate`;\n\t\tconst SKIP_VERSION_KEY = `${data.surveyId}.skipVersion`;\n\t\tconst IS_CANDIDATE_KEY = `${data.surveyId}.isCandidate`;\n\t\tconst EDITED_LANGUAGE_COUNT_KEY = `${data.surveyId}.editedCount`;\n\t\tconst EDITED_LANGUAGE_DATE_KEY = `${data.surveyId}.editedDate`;\n\n\t\tconst skipVersion = storageService.get(SKIP_VERSION_KEY, StorageScope.GLOBAL, '');\n\t\tif (skipVersion) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst date = new Date().toDateString();\n\n\t\tif (storageService.getNumber(EDITED_LANGUAGE_COUNT_KEY, StorageScope.GLOBAL, 0) < data.editCount) {\n\n\t\t\t// Process model-save event every 250ms to reduce load\n\t\t\tconst onModelsSavedWorker = this._register(new RunOnceWorker<ITextFileEditorModel>(models => {\n\t\t\t\tmodels.forEach(m => {\n\t\t\t\t\tif (m.getMode() === data.languageId && date !== storageService.get(EDITED_LANGUAGE_DATE_KEY, StorageScope.GLOBAL)) {\n\t\t\t\t\t\tconst editedCount = storageService.getNumber(EDITED_LANGUAGE_COUNT_KEY, StorageScope.GLOBAL, 0) + 1;\n\t\t\t\t\t\tstorageService.store(EDITED_LANGUAGE_COUNT_KEY, editedCount, StorageScope.GLOBAL, StorageTarget.USER);\n\t\t\t\t\t\tstorageService.store(EDITED_LANGUAGE_DATE_KEY, date, StorageScope.GLOBAL, StorageTarget.USER);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}, 250));\n\n\t\t\tthis._register(textFileService.files.onDidSave(e => onModelsSavedWorker.work(e.model)));\n\t\t}\n\n\t\tconst lastSessionDate = storageService.get(LAST_SESSION_DATE_KEY, StorageScope.GLOBAL, new Date(0).toDateString());\n\t\tif (date === lastSessionDate) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst sessionCount = storageService.getNumber(SESSION_COUNT_KEY, StorageScope.GLOBAL, 0) + 1;\n\t\tstorageService.store(LAST_SESSION_DATE_KEY, date, StorageScope.GLOBAL, StorageTarget.USER);\n\t\tstorageService.store(SESSION_COUNT_KEY, sessionCount, StorageScope.GLOBAL, StorageTarget.USER);\n\n\t\tif (sessionCount < 9) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (storageService.getNumber(EDITED_LANGUAGE_COUNT_KEY, StorageScope.GLOBAL, 0) < data.editCount) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isCandidate = storageService.getBoolean(IS_CANDIDATE_KEY, StorageScope.GLOBAL, false)\n\t\t\t|| Math.random() < data.userProbability;\n\n\t\tstorageService.store(IS_CANDIDATE_KEY, isCandidate, StorageScope.GLOBAL, StorageTarget.USER);\n\n\t\tif (!isCandidate) {\n\t\t\tstorageService.store(SKIP_VERSION_KEY, productService.version, StorageScope.GLOBAL, StorageTarget.USER);\n\t\t\treturn;\n\t\t}\n\n\t\t// __GDPR__TODO__ Need to move away from dynamic event names as those cannot be registered statically\n\t\ttelemetryService.publicLog(`${data.surveyId}.survey/userAsked`);\n\n\t\tnotificationService.prompt(\n\t\t\tSeverity.Info,\n\t\t\tlocalize('helpUs', \"Help us improve our support for {0}\", modeService.getLanguageName(data.languageId) ?? data.languageId),\n\t\t\t[{\n\t\t\t\tlabel: localize('takeShortSurvey', \"Take Short Survey\"),\n\t\t\t\trun: () => {\n\t\t\t\t\ttelemetryService.publicLog(`${data.surveyId}.survey/takeShortSurvey`);\n\t\t\t\t\ttelemetryService.getTelemetryInfo().then(info => {\n\t\t\t\t\t\topenerService.open(URI.parse(`${data.surveyUrl}?o=${encodeURIComponent(platform)}&v=${encodeURIComponent(productService.version)}&m=${encodeURIComponent(info.machineId)}`));\n\t\t\t\t\t\tstorageService.store(IS_CANDIDATE_KEY, false, StorageScope.GLOBAL, StorageTarget.USER);\n\t\t\t\t\t\tstorageService.store(SKIP_VERSION_KEY, productService.version, StorageScope.GLOBAL, StorageTarget.USER);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tlabel: localize('remindLater', \"Remind Me later\"),\n\t\t\t\trun: () => {\n\t\t\t\t\ttelemetryService.publicLog(`${data.surveyId}.survey/remindMeLater`);\n\t\t\t\t\tstorageService.store(SESSION_COUNT_KEY, sessionCount - 3, StorageScope.GLOBAL, StorageTarget.USER);\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tlabel: localize('neverAgain', \"Don't Show Again\"),\n\t\t\t\tisSecondary: true,\n\t\t\t\trun: () => {\n\t\t\t\t\ttelemetryService.publicLog(`${data.surveyId}.survey/dontShowAgain`);\n\t\t\t\t\tstorageService.store(IS_CANDIDATE_KEY, false, StorageScope.GLOBAL, StorageTarget.USER);\n\t\t\t\t\tstorageService.store(SKIP_VERSION_KEY, productService.version, StorageScope.GLOBAL, StorageTarget.USER);\n\t\t\t\t}\n\t\t\t}],\n\t\t\t{ sticky: true }\n\t\t);\n\t}\n}\n\nclass LanguageSurveysContribution implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IStorageService storageService: IStorageService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@ITextFileService textFileService: ITextFileService,\n\t\t@IOpenerService openerService: IOpenerService,\n\t\t@IProductService productService: IProductService,\n\t\t@IModeService modeService: IModeService\n\t) {\n\t\tif (!productService.surveys) {\n\t\t\treturn;\n\t\t}\n\n\t\tproductService.surveys\n\t\t\t.filter(surveyData => surveyData.surveyId && surveyData.editCount && surveyData.languageId && surveyData.surveyUrl && surveyData.userProbability)\n\t\t\t.map(surveyData => new LanguageSurvey(surveyData, storageService, notificationService, telemetryService, modeService, textFileService, openerService, productService));\n\t}\n}\n\nif (language === 'en') {\n\tconst workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench);\n\tworkbenchRegistry.registerWorkbenchContribution(LanguageSurveysContribution, LifecyclePhase.Restored);\n}\n"]}