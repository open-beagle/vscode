{"version":3,"file":"externalUriOpenerService.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/externalUriOpener/test/common/externalUriOpenerService.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;;;IAehG,MAAM,qBAAqB;QAE1B,YACkB,SAAiB;YAAjB,cAAS,GAAT,SAAS,CAAQ;QAC/B,CAAC;QAIE,KAAK,CAAC,IAAI,CAA2B,KAAyD,EAAE,OAA8C,EAAE,KAAyB;YAC/K,MAAM,aAAa,GAAG,MAAM,KAAK,CAAC;YAClC,MAAM,IAAI,GAAG,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAC3C,IAAI,IAAI,CAAC,IAAI,KAAK,WAAW,EAAE;gBAC9B,OAAO,SAAS,CAAC;aACjB;YACD,OAAO,IAAI,CAAC;QACb,CAAC;KAED;IAED,KAAK,CAAC,0BAA0B,EAAE,GAAG,EAAE;QAEtC,IAAI,oBAA8C,CAAC;QAEnD,KAAK,CAAC,GAAG,EAAE;YACV,oBAAoB,GAAG,IAAI,mDAAwB,EAAE,CAAC;YAEtD,oBAAoB,CAAC,IAAI,CAAC,qCAAqB,EAAE,IAAI,mDAAwB,EAAE,CAAC,CAAC;YACjF,oBAAoB,CAAC,IAAI,CAAC,uBAAc,EAAE;gBACzC,sBAAsB,EAAE,GAAG,EAAE,GAAG,OAAO,sBAAU,CAAC,IAAI,CAAC,CAAC,CAAC;aACzD,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;YAC1D,MAAM,wBAAwB,GAA6B,oBAAoB,CAAC,cAAc,CAAC,mDAAwB,CAAC,CAAC;YAEzH,wBAAwB,CAAC,8BAA8B,CAAC,IAAI;gBACpD,UAAU,CAAC,UAAe;;wBAChC,OAAO;oBACR,CAAC;iBAAA;aACD,CAAC,CAAC;YAEH,MAAM,GAAG,GAAG,SAAG,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;YAC5C,MAAM,OAAO,GAAG,MAAM,wBAAwB,CAAC,YAAY,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,EAAE,SAAS,EAAE,GAAG,EAAE,EAAE,gCAAiB,CAAC,IAAI,CAAC,CAAC;YACxH,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,uDAAuD,EAAE,KAAK,IAAI,EAAE;YACxE,oBAAoB,CAAC,IAAI,CAAC,+BAAkB,EAAE,IAAI,qBAAqB,CAAC,CAAC,CAAC,CAAC,CAAC;YAE5E,MAAM,wBAAwB,GAA6B,oBAAoB,CAAC,cAAc,CAAC,mDAAwB,CAAC,CAAC;YAEzH,IAAI,iBAAiB,GAAG,KAAK,CAAC;YAC9B,wBAAwB,CAAC,8BAA8B,CAAC,IAAI;gBACpD,UAAU,CAAC,UAAe;;wBAChC,oBAAM;4BACL,EAAE,EAAE,aAAa;4BACjB,KAAK,EAAE,UAAU;4BACjB,OAAO,EAAE,KAAK,IAAI,EAAE,CAAC,iCAAyB,CAAC,IAAI;4BACnD,eAAe,EAAE,KAAK,IAAI,EAAE,CAAC,IAAI;yBACjC,CAAA,CAAC;wBACF,oBAAM;4BACL,EAAE,EAAE,YAAY;4BAChB,KAAK,EAAE,SAAS;4BAChB,OAAO,EAAE,KAAK,IAAI,EAAE,CAAC,iCAAyB,CAAC,OAAO;4BACtD,eAAe,EAAE,KAAK,IAAI,EAAE;gCAC3B,iBAAiB,GAAG,IAAI,CAAC;gCACzB,OAAO,IAAI,CAAC;4BACb,CAAC;yBACD,CAAA,CAAC;oBACH,CAAC;iBAAA;aACD,CAAC,CAAC;YAEH,MAAM,GAAG,GAAG,SAAG,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;YAC5C,MAAM,OAAO,GAAG,MAAM,wBAAwB,CAAC,YAAY,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,EAAE,SAAS,EAAE,GAAG,EAAE,EAAE,gCAAiB,CAAC,IAAI,CAAC,CAAC;YACxH,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;YAClC,MAAM,CAAC,WAAW,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,kEAAkE,EAAE,KAAK,IAAI,EAAE;YACnF,MAAM,wBAAwB,GAA6B,oBAAoB,CAAC,cAAc,CAAC,mDAAwB,CAAC,CAAC;YAEzH,IAAI,mBAAmB,GAAG,KAAK,CAAC;YAChC,wBAAwB,CAAC,8BAA8B,CAAC,IAAI;gBACpD,UAAU,CAAC,UAAe;;wBAChC,oBAAM;4BACL,EAAE,EAAE,UAAU;4BACd,KAAK,EAAE,OAAO;4BACd,OAAO,EAAE,KAAK,IAAI,EAAE,CAAC,iCAAyB,CAAC,OAAO;4BACtD,eAAe,EAAE,KAAK,IAAI,EAAE;gCAC3B,OAAO,IAAI,CAAC;4BACb,CAAC;yBACD,CAAA,CAAC;wBACF,oBAAM;4BACL,EAAE,EAAE,cAAc;4BAClB,KAAK,EAAE,WAAW;4BAClB,OAAO,EAAE,KAAK,IAAI,EAAE,CAAC,iCAAyB,CAAC,SAAS;4BACxD,eAAe,EAAE,KAAK,IAAI,EAAE;gCAC3B,mBAAmB,GAAG,IAAI,CAAC;gCAC3B,OAAO,IAAI,CAAC;4BACb,CAAC;yBACD,CAAA,CAAC;oBACH,CAAC;iBAAA;aACD,CAAC,CAAC;YAEH,MAAM,GAAG,GAAG,SAAG,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;YAC5C,MAAM,OAAO,GAAG,MAAM,wBAAwB,CAAC,YAAY,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,EAAE,SAAS,EAAE,GAAG,EAAE,EAAE,gCAAiB,CAAC,IAAI,CAAC,CAAC;YACxH,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;YAClC,MAAM,CAAC,WAAW,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { ExternalUriOpenerPriority } from 'vs/editor/common/modes';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { TestConfigurationService } from 'vs/platform/configuration/test/common/testConfigurationService';\nimport { TestInstantiationService } from 'vs/platform/instantiation/test/common/instantiationServiceMock';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { IPickOptions, IQuickInputService, IQuickPickItem, QuickPickInput } from 'vs/platform/quickinput/common/quickInput';\nimport { ExternalUriOpenerService, IExternalOpenerProvider, IExternalUriOpener } from 'vs/workbench/contrib/externalUriOpener/common/externalUriOpenerService';\n\n\nclass MockQuickInputService implements Partial<IQuickInputService>{\n\n\tconstructor(\n\t\tprivate readonly pickIndex: number\n\t) { }\n\n\tpublic pick<T extends IQuickPickItem>(picks: Promise<QuickPickInput<T>[]> | QuickPickInput<T>[], options?: IPickOptions<T> & { canPickMany: true }, token?: CancellationToken): Promise<T[]>;\n\tpublic pick<T extends IQuickPickItem>(picks: Promise<QuickPickInput<T>[]> | QuickPickInput<T>[], options?: IPickOptions<T> & { canPickMany: false }, token?: CancellationToken): Promise<T>;\n\tpublic async pick<T extends IQuickPickItem>(picks: Promise<QuickPickInput<T>[]> | QuickPickInput<T>[], options?: Omit<IPickOptions<T>, 'canPickMany'>, token?: CancellationToken): Promise<T | undefined> {\n\t\tconst resolvedPicks = await picks;\n\t\tconst item = resolvedPicks[this.pickIndex];\n\t\tif (item.type === 'separator') {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn item;\n\t}\n\n}\n\nsuite('ExternalUriOpenerService', () => {\n\n\tlet instantiationService: TestInstantiationService;\n\n\tsetup(() => {\n\t\tinstantiationService = new TestInstantiationService();\n\n\t\tinstantiationService.stub(IConfigurationService, new TestConfigurationService());\n\t\tinstantiationService.stub(IOpenerService, {\n\t\t\tregisterExternalOpener: () => { return Disposable.None; }\n\t\t});\n\t});\n\n\ttest('Should not open if there are no openers', async () => {\n\t\tconst externalUriOpenerService: ExternalUriOpenerService = instantiationService.createInstance(ExternalUriOpenerService);\n\n\t\texternalUriOpenerService.registerExternalOpenerProvider(new class implements IExternalOpenerProvider {\n\t\t\tasync *getOpeners(_targetUri: URI): AsyncGenerator<IExternalUriOpener> {\n\t\t\t\t// noop\n\t\t\t}\n\t\t});\n\n\t\tconst uri = URI.parse('http://contoso.com');\n\t\tconst didOpen = await externalUriOpenerService.openExternal(uri.toString(), { sourceUri: uri }, CancellationToken.None);\n\t\tassert.strictEqual(didOpen, false);\n\t});\n\n\ttest('Should prompt if there is at least one enabled opener', async () => {\n\t\tinstantiationService.stub(IQuickInputService, new MockQuickInputService(0));\n\n\t\tconst externalUriOpenerService: ExternalUriOpenerService = instantiationService.createInstance(ExternalUriOpenerService);\n\n\t\tlet openedWithEnabled = false;\n\t\texternalUriOpenerService.registerExternalOpenerProvider(new class implements IExternalOpenerProvider {\n\t\t\tasync *getOpeners(_targetUri: URI): AsyncGenerator<IExternalUriOpener> {\n\t\t\t\tyield {\n\t\t\t\t\tid: 'disabled-id',\n\t\t\t\t\tlabel: 'disabled',\n\t\t\t\t\tcanOpen: async () => ExternalUriOpenerPriority.None,\n\t\t\t\t\topenExternalUri: async () => true,\n\t\t\t\t};\n\t\t\t\tyield {\n\t\t\t\t\tid: 'enabled-id',\n\t\t\t\t\tlabel: 'enabled',\n\t\t\t\t\tcanOpen: async () => ExternalUriOpenerPriority.Default,\n\t\t\t\t\topenExternalUri: async () => {\n\t\t\t\t\t\topenedWithEnabled = true;\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\n\t\tconst uri = URI.parse('http://contoso.com');\n\t\tconst didOpen = await externalUriOpenerService.openExternal(uri.toString(), { sourceUri: uri }, CancellationToken.None);\n\t\tassert.strictEqual(didOpen, true);\n\t\tassert.strictEqual(openedWithEnabled, true);\n\t});\n\n\ttest('Should automatically pick single preferred opener without prompt', async () => {\n\t\tconst externalUriOpenerService: ExternalUriOpenerService = instantiationService.createInstance(ExternalUriOpenerService);\n\n\t\tlet openedWithPreferred = false;\n\t\texternalUriOpenerService.registerExternalOpenerProvider(new class implements IExternalOpenerProvider {\n\t\t\tasync *getOpeners(_targetUri: URI): AsyncGenerator<IExternalUriOpener> {\n\t\t\t\tyield {\n\t\t\t\t\tid: 'other-id',\n\t\t\t\t\tlabel: 'other',\n\t\t\t\t\tcanOpen: async () => ExternalUriOpenerPriority.Default,\n\t\t\t\t\topenExternalUri: async () => {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tyield {\n\t\t\t\t\tid: 'preferred-id',\n\t\t\t\t\tlabel: 'preferred',\n\t\t\t\t\tcanOpen: async () => ExternalUriOpenerPriority.Preferred,\n\t\t\t\t\topenExternalUri: async () => {\n\t\t\t\t\t\topenedWithPreferred = true;\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\n\t\tconst uri = URI.parse('http://contoso.com');\n\t\tconst didOpen = await externalUriOpenerService.openExternal(uri.toString(), { sourceUri: uri }, CancellationToken.None);\n\t\tassert.strictEqual(didOpen, true);\n\t\tassert.strictEqual(openedWithPreferred, true);\n\t});\n});\n"]}