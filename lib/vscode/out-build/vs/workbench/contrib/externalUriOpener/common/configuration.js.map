{"version":3,"sources":["vs/workbench/contrib/externalUriOpener/common/configuration.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAQnF,QAAA,0BAA0B,GAAG,SAAS,CAAC;IAEvC,QAAA,2BAA2B,GAAG,8BAA8B,CAAC;IAM1E,MAAM,iCAAiC,GAAgB;QACtD,IAAI,EAAE,QAAQ;QACd,IAAI,EAAE,EAAE;KACR,CAAC;IAEF,MAAM,kBAAkB,GAAG;;;;;;;;;;sDAU2B,CAAC;IAE1C,QAAA,mCAAmC,mCAC5C,8CAA8B,KACjC,UAAU,EAAE;YACX,CAAC,mCAA2B,CAAC,EAAE;gBAC9B,IAAI,EAAE,QAAQ;gBACd,mBAAmB,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAoB,EAAE,IAA8D,CAAC;gBACvH,eAAe,EAAE,CAAC;wBACjB,IAAI,EAAE;4BACL,aAAa,EAAE,IAAI;yBACnB;qBACD,CAAC;gBACF,oBAAoB,EAAE;oBACrB,KAAK,EAAE;wBACN;4BACC,IAAI,EAAE,QAAQ;4BACd,mBAAmB,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAwB,EAAE,IAA2D,EAAE,kBAAkB,CAAC;yBAC5I;wBACD;4BACC,IAAI,EAAE,QAAQ;4BACd,mBAAmB,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAwB,EAAE,IAA2D,EAAE,kBAAkB,CAAC;4BAC5I,IAAI,EAAE,CAAC,kCAA0B,CAAC;4BAClC,gBAAgB,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,CAA8B,EAAE,IAAuC,CAAC,CAAC;yBACzG;wBACD,iCAAiC;qBACjC;iBACD;aACD;SACD,IACA;IAEF,SAAgB,wBAAwB,CAAC,UAAoB,EAAE,gBAA0B;QACxF,iCAAiC,CAAC,IAAI,GAAG,UAAU,CAAC;QACpD,iCAAiC,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QAEtE,mBAAQ,CAAC,EAAE,CAAyB,kCAAU,CAAC,aAAa,CAAC;aAC3D,gCAAgC,CAAC,2CAAmC,CAAC,CAAC;IACzE,CAAC;IAND,4DAMC","file":"configuration.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IConfigurationNode, IConfigurationRegistry, Extensions } from 'vs/platform/configuration/common/configurationRegistry';\nimport { workbenchConfigurationNodeBase } from 'vs/workbench/common/configuration';\nimport * as nls from 'vs/nls';\nimport { IJSONSchema } from 'vs/base/common/jsonSchema';\nimport { Registry } from 'vs/platform/registry/common/platform';\n\nexport const defaultExternalUriOpenerId = 'default';\n\nexport const externalUriOpenersSettingId = 'workbench.externalUriOpeners';\n\nexport interface ExternalUriOpenersConfiguration {\n\treadonly [uriGlob: string]: string;\n}\n\nconst externalUriOpenerIdSchemaAddition: IJSONSchema = {\n\ttype: 'string',\n\tenum: []\n};\n\nconst exampleUriPatterns = `\n- \\`https://microsoft.com\\`: Matches this specific domain using https\n- \\`https://microsoft.com:8080\\`: Matches this specific domain on this port using https\n- \\`https://microsoft.com:*\\`: Matches this specific domain on any port using https\n- \\`https://microsoft.com/foo\\`: Matches \\`https://microsoft.com/foo\\` and \\`https://microsoft.com/foo/bar\\`, but not \\`https://microsoft.com/foobar\\` or \\`https://microsoft.com/bar\\`\n- \\`https://*.microsoft.com\\`: Match all domains ending in \\`microsoft.com\\` using https\n- \\`microsoft.com\\`: Match this specific domain using either http or https\n- \\`*.microsoft.com\\`: Match all domains ending in \\`microsoft.com\\` using either http or https\n- \\`http://192.168.0.1\\`: Matches this specific IP using http\n- \\`http://192.168.0.*\\`: Matches all IP's with this prefix using http\n- \\`*\\`: Match all domains using either http or https`;\n\nexport const externalUriOpenersConfigurationNode: IConfigurationNode = {\n\t...workbenchConfigurationNodeBase,\n\tproperties: {\n\t\t[externalUriOpenersSettingId]: {\n\t\t\ttype: 'object',\n\t\t\tmarkdownDescription: nls.localize('externalUriOpeners', \"Configure the opener to use for external URIs (http, https).\"),\n\t\t\tdefaultSnippets: [{\n\t\t\t\tbody: {\n\t\t\t\t\t'example.com': '$1'\n\t\t\t\t}\n\t\t\t}],\n\t\t\tadditionalProperties: {\n\t\t\t\tanyOf: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tmarkdownDescription: nls.localize('externalUriOpeners.uri', \"Map URI pattern to an opener id.\\nExample patterns: \\n{0}\", exampleUriPatterns),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tmarkdownDescription: nls.localize('externalUriOpeners.uri', \"Map URI pattern to an opener id.\\nExample patterns: \\n{0}\", exampleUriPatterns),\n\t\t\t\t\t\tenum: [defaultExternalUriOpenerId],\n\t\t\t\t\t\tenumDescriptions: [nls.localize('externalUriOpeners.defaultId', \"Open using VS Code's standard opener.\")],\n\t\t\t\t\t},\n\t\t\t\t\texternalUriOpenerIdSchemaAddition\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t}\n};\n\nexport function updateContributedOpeners(enumValues: string[], enumDescriptions: string[]): void {\n\texternalUriOpenerIdSchemaAddition.enum = enumValues;\n\texternalUriOpenerIdSchemaAddition.enumDescriptions = enumDescriptions;\n\n\tRegistry.as<IConfigurationRegistry>(Extensions.Configuration)\n\t\t.notifyConfigurationSchemaUpdated(externalUriOpenersConfigurationNode);\n}\n"]}