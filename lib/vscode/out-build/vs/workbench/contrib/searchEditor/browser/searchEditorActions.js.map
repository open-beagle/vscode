{"version":3,"file":"searchEditorActions.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/searchEditor/browser/searchEditorActions.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Schemas } from 'vs/base/common/network';\nimport { assertIsDefined, withNullAsUndefined } from 'vs/base/common/types';\nimport { URI } from 'vs/base/common/uri';\nimport 'vs/css!./media/searchEditor';\nimport { ICodeEditor, isDiffEditor } from 'vs/editor/browser/editorBrowser';\nimport { IEditorOptions } from 'vs/editor/common/config/editorOptions';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { ILabelService } from 'vs/platform/label/common/label';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { EditorsOrder } from 'vs/workbench/common/editor';\nimport { IViewsService } from 'vs/workbench/common/views';\nimport { getSearchView } from 'vs/workbench/contrib/search/browser/searchActions';\nimport { SearchResult } from 'vs/workbench/contrib/search/common/searchModel';\nimport { SearchEditor } from 'vs/workbench/contrib/searchEditor/browser/searchEditor';\nimport { OpenSearchEditorArgs } from 'vs/workbench/contrib/searchEditor/browser/searchEditor.contribution';\nimport { getOrMakeSearchEditorInput, SearchEditorInput } from 'vs/workbench/contrib/searchEditor/browser/searchEditorInput';\nimport { serializeSearchResultForEditor } from 'vs/workbench/contrib/searchEditor/browser/searchEditorSerialization';\nimport { IConfigurationResolverService } from 'vs/workbench/services/configurationResolver/common/configurationResolver';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { ACTIVE_GROUP, IEditorService, SIDE_GROUP } from 'vs/workbench/services/editor/common/editorService';\nimport { IHistoryService } from 'vs/workbench/services/history/common/history';\nimport { ISearchConfigurationProperties } from 'vs/workbench/services/search/common/search';\n\nexport const toggleSearchEditorCaseSensitiveCommand = (accessor: ServicesAccessor) => {\n\tconst editorService = accessor.get(IEditorService);\n\tconst input = editorService.activeEditor;\n\tif (input instanceof SearchEditorInput) {\n\t\t(editorService.activeEditorPane as SearchEditor).toggleCaseSensitive();\n\t}\n};\n\nexport const toggleSearchEditorWholeWordCommand = (accessor: ServicesAccessor) => {\n\tconst editorService = accessor.get(IEditorService);\n\tconst input = editorService.activeEditor;\n\tif (input instanceof SearchEditorInput) {\n\t\t(editorService.activeEditorPane as SearchEditor).toggleWholeWords();\n\t}\n};\n\nexport const toggleSearchEditorRegexCommand = (accessor: ServicesAccessor) => {\n\tconst editorService = accessor.get(IEditorService);\n\tconst input = editorService.activeEditor;\n\tif (input instanceof SearchEditorInput) {\n\t\t(editorService.activeEditorPane as SearchEditor).toggleRegex();\n\t}\n};\n\nexport const toggleSearchEditorContextLinesCommand = (accessor: ServicesAccessor) => {\n\tconst editorService = accessor.get(IEditorService);\n\tconst input = editorService.activeEditor;\n\tif (input instanceof SearchEditorInput) {\n\t\t(editorService.activeEditorPane as SearchEditor).toggleContextLines();\n\t}\n};\n\nexport const modifySearchEditorContextLinesCommand = (accessor: ServicesAccessor, increase: boolean) => {\n\tconst editorService = accessor.get(IEditorService);\n\tconst input = editorService.activeEditor;\n\tif (input instanceof SearchEditorInput) {\n\t\t(editorService.activeEditorPane as SearchEditor).modifyContextLines(increase);\n\t}\n};\n\nexport const selectAllSearchEditorMatchesCommand = (accessor: ServicesAccessor) => {\n\tconst editorService = accessor.get(IEditorService);\n\tconst input = editorService.activeEditor;\n\tif (input instanceof SearchEditorInput) {\n\t\t(editorService.activeEditorPane as SearchEditor).focusAllResults();\n\t}\n};\n\nexport async function openSearchEditor(accessor: ServicesAccessor): Promise<void> {\n\tconst viewsService = accessor.get(IViewsService);\n\tconst instantiationService = accessor.get(IInstantiationService);\n\tconst searchView = getSearchView(viewsService);\n\tif (searchView) {\n\t\tawait instantiationService.invokeFunction(openNewSearchEditor, {\n\t\t\tfilesToInclude: searchView.searchIncludePattern.getValue(),\n\t\t\tonlyOpenEditors: searchView.searchIncludePattern.onlySearchInOpenEditors(),\n\t\t\tfilesToExclude: searchView.searchExcludePattern.getValue(),\n\t\t\tisRegexp: searchView.searchAndReplaceWidget.searchInput.getRegex(),\n\t\t\tisCaseSensitive: searchView.searchAndReplaceWidget.searchInput.getCaseSensitive(),\n\t\t\tmatchWholeWord: searchView.searchAndReplaceWidget.searchInput.getWholeWords(),\n\t\t\tuseExcludeSettingsAndIgnoreFiles: searchView.searchExcludePattern.useExcludesAndIgnoreFiles(),\n\t\t\tshowIncludesExcludes: !!(searchView.searchIncludePattern.getValue() || searchView.searchExcludePattern.getValue() || !searchView.searchExcludePattern.useExcludesAndIgnoreFiles())\n\t\t});\n\t} else {\n\t\tawait instantiationService.invokeFunction(openNewSearchEditor);\n\t}\n}\n\nexport const openNewSearchEditor =\n\tasync (accessor: ServicesAccessor, _args: OpenSearchEditorArgs = {}, toSide = false) => {\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst editorGroupsService = accessor.get(IEditorGroupsService);\n\t\tconst telemetryService = accessor.get(ITelemetryService);\n\t\tconst instantiationService = accessor.get(IInstantiationService);\n\t\tconst configurationService = accessor.get(IConfigurationService);\n\n\t\tconst configurationResolverService = accessor.get(IConfigurationResolverService);\n\t\tconst workspaceContextService = accessor.get(IWorkspaceContextService);\n\t\tconst historyService = accessor.get(IHistoryService);\n\t\tconst activeWorkspaceRootUri = historyService.getLastActiveWorkspaceRoot(Schemas.file);\n\t\tconst lastActiveWorkspaceRoot = activeWorkspaceRootUri ? withNullAsUndefined(workspaceContextService.getWorkspaceFolder(activeWorkspaceRootUri)) : undefined;\n\n\n\t\tconst activeEditorControl = editorService.activeTextEditorControl;\n\t\tlet activeModel: ICodeEditor | undefined;\n\t\tlet selected = '';\n\t\tif (activeEditorControl) {\n\t\t\tif (isDiffEditor(activeEditorControl)) {\n\t\t\t\tif (activeEditorControl.getOriginalEditor().hasTextFocus()) {\n\t\t\t\t\tactiveModel = activeEditorControl.getOriginalEditor();\n\t\t\t\t} else {\n\t\t\t\t\tactiveModel = activeEditorControl.getModifiedEditor();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tactiveModel = activeEditorControl as ICodeEditor;\n\t\t\t}\n\t\t\tconst selection = activeModel?.getSelection();\n\t\t\tselected = (selection && activeModel?.getModel()?.getValueInRange(selection)) ?? '';\n\t\t} else {\n\t\t\tif (editorService.activeEditor instanceof SearchEditorInput) {\n\t\t\t\tconst active = editorService.activeEditorPane as SearchEditor;\n\t\t\t\tselected = active.getSelected();\n\t\t\t}\n\t\t}\n\n\t\ttelemetryService.publicLog2('searchEditor/openNewSearchEditor');\n\n\t\tconst seedSearchStringFromSelection = _args.location === 'new' || configurationService.getValue<IEditorOptions>('editor').find!.seedSearchStringFromSelection;\n\t\tconst args: OpenSearchEditorArgs = { query: seedSearchStringFromSelection ? selected : undefined };\n\t\tfor (const entry of Object.entries(_args)) {\n\t\t\tconst name = entry[0];\n\t\t\tconst value = entry[1];\n\t\t\tif (value !== undefined) {\n\t\t\t\t(args as any)[name as any] = (typeof value === 'string') ? await configurationResolverService.resolveAsync(lastActiveWorkspaceRoot, value) : value;\n\t\t\t}\n\t\t}\n\t\tconst existing = editorService.getEditors(EditorsOrder.MOST_RECENTLY_ACTIVE).find(id => id.editor.typeId === SearchEditorInput.ID);\n\t\tlet editor: SearchEditor;\n\t\tif (existing && args.location === 'reuse') {\n\t\t\tconst input = existing.editor as SearchEditorInput;\n\t\t\teditor = assertIsDefined(await assertIsDefined(editorGroupsService.getGroup(existing.groupId)).openEditor(input)) as SearchEditor;\n\t\t\tif (selected) { editor.setQuery(selected); }\n\t\t\telse { editor.selectQuery(); }\n\t\t\teditor.setSearchConfig(args);\n\t\t} else {\n\t\t\tconst input = instantiationService.invokeFunction(getOrMakeSearchEditorInput, { config: args, text: '' });\n\t\t\teditor = await editorService.openEditor(input, { pinned: true }, toSide ? SIDE_GROUP : ACTIVE_GROUP) as SearchEditor;\n\t\t}\n\n\t\tconst searchOnType = configurationService.getValue<ISearchConfigurationProperties>('search').searchOnType;\n\t\tif (\n\t\t\targs.triggerSearch === true ||\n\t\t\targs.triggerSearch !== false && searchOnType && args.query\n\t\t) {\n\t\t\teditor.triggerSearch({ focusResults: args.focusResults });\n\t\t}\n\n\t\tif (!args.focusResults) { editor.focusSearchInput(); }\n\t};\n\nexport const createEditorFromSearchResult =\n\tasync (accessor: ServicesAccessor, searchResult: SearchResult, rawIncludePattern: string, rawExcludePattern: string, onlySearchInOpenEditors: boolean) => {\n\t\tif (!searchResult.query) {\n\t\t\tconsole.error('Expected searchResult.query to be defined. Got', searchResult);\n\t\t\treturn;\n\t\t}\n\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst telemetryService = accessor.get(ITelemetryService);\n\t\tconst instantiationService = accessor.get(IInstantiationService);\n\t\tconst labelService = accessor.get(ILabelService);\n\t\tconst configurationService = accessor.get(IConfigurationService);\n\t\tconst sortOrder = configurationService.getValue<ISearchConfigurationProperties>('search').sortOrder;\n\n\n\t\ttelemetryService.publicLog2('searchEditor/createEditorFromSearchResult');\n\n\t\tconst labelFormatter = (uri: URI): string => labelService.getUriLabel(uri, { relative: true });\n\n\t\tconst { text, matchRanges, config } = serializeSearchResultForEditor(searchResult, rawIncludePattern, rawExcludePattern, 0, labelFormatter, sortOrder);\n\t\tconfig.onlyOpenEditors = onlySearchInOpenEditors;\n\t\tconst contextLines = configurationService.getValue<ISearchConfigurationProperties>('search').searchEditor.defaultNumberOfContextLines;\n\n\t\tif (searchResult.isDirty || contextLines === 0 || contextLines === null) {\n\t\t\tconst input = instantiationService.invokeFunction(getOrMakeSearchEditorInput, { text, config });\n\t\t\tawait editorService.openEditor(input, { pinned: true });\n\t\t\tinput.setMatchRanges(matchRanges);\n\t\t} else {\n\t\t\tconst input = instantiationService.invokeFunction(getOrMakeSearchEditorInput, { text: '', config: { ...config, contextLines } });\n\t\t\tconst editor = await editorService.openEditor(input, { pinned: true }) as SearchEditor;\n\t\t\teditor.triggerSearch({ focusResults: true });\n\t\t}\n\t};\n"]}