{"version":3,"file":"searchEditorModel.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/searchEditor/browser/searchEditorModel.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { parseSavedSearchEditor } from 'vs/workbench/contrib/searchEditor/browser/searchEditorSerialization';\nimport { IWorkingCopyBackupService } from 'vs/workbench/services/workingCopy/common/workingCopyBackup';\nimport { SearchConfiguration } from './searchEditorInput';\nimport { assertIsDefined } from 'vs/base/common/types';\nimport { NO_TYPE_ID } from 'vs/workbench/services/workingCopy/common/workingCopy';\nimport { createTextBufferFactoryFromStream } from 'vs/editor/common/model/textModel';\nimport { SearchEditorScheme, SearchEditorWorkingCopyTypeId } from 'vs/workbench/contrib/searchEditor/browser/constants';\n\n\nexport class SearchEditorModel {\n\tprivate cachedContentsModel: ITextModel | undefined = undefined;\n\tprivate resolveContents!: (model: ITextModel) => void;\n\tpublic onModelResolved: Promise<ITextModel>;\n\n\tprivate ongoingResolve = Promise.resolve<any>(undefined);\n\n\tconstructor(\n\t\tprivate modelUri: URI,\n\t\tpublic config: SearchConfiguration,\n\t\tprivate existingData: ({ config: Partial<SearchConfiguration>; backingUri?: URI; } &\n\t\t\t({ modelUri: URI; text?: never; } |\n\t\t\t{ text: string; modelUri?: never; } |\n\t\t\t{ backingUri: URI; text?: never; modelUri?: never; })),\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IWorkingCopyBackupService readonly workingCopyBackupService: IWorkingCopyBackupService,\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@IModeService private readonly modeService: IModeService) {\n\t\tthis.onModelResolved = new Promise<ITextModel>(resolve => this.resolveContents = resolve);\n\t\tthis.onModelResolved.then(model => this.cachedContentsModel = model);\n\n\t\tthis.ongoingResolve = (async () => {\n\t\t\tlet discardLegacyBackup = false;\n\t\t\tlet backup = await workingCopyBackupService.resolve({ resource: modelUri, typeId: SearchEditorWorkingCopyTypeId });\n\t\t\tif (!backup) {\n\t\t\t\t// TODO@bpasero remove this fallback after some releases\n\t\t\t\tbackup = await workingCopyBackupService.resolve({ resource: modelUri, typeId: NO_TYPE_ID });\n\n\t\t\t\tif (backup && modelUri.scheme === SearchEditorScheme) {\n\t\t\t\t\tdiscardLegacyBackup = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet model = modelService.getModel(modelUri);\n\t\t\tif (!model && backup) {\n\t\t\t\tconst factory = await createTextBufferFactoryFromStream(backup.value);\n\n\t\t\t\tif (discardLegacyBackup) {\n\t\t\t\t\tawait workingCopyBackupService.discardBackup({ resource: modelUri, typeId: NO_TYPE_ID });\n\t\t\t\t}\n\n\t\t\t\tmodel = modelService.createModel(factory, modeService.create('search-result'), modelUri);\n\t\t\t}\n\n\t\t\tif (model) {\n\t\t\t\tthis.resolveContents(model);\n\t\t\t}\n\n\t\t\treturn model;\n\t\t})();\n\t}\n\n\tasync resolve(): Promise<ITextModel> {\n\t\tawait (this.ongoingResolve = this.ongoingResolve.then(() => this.cachedContentsModel || this.createModel()));\n\t\treturn assertIsDefined(this.cachedContentsModel);\n\t}\n\n\tprivate async createModel() {\n\t\tconst getContents = async () => {\n\t\t\tif (this.existingData.text !== undefined) {\n\t\t\t\treturn this.existingData.text;\n\t\t\t}\n\t\t\telse if (this.existingData.backingUri !== undefined) {\n\t\t\t\treturn (await this.instantiationService.invokeFunction(parseSavedSearchEditor, this.existingData.backingUri)).text;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t};\n\n\t\tconst contents = await getContents();\n\t\tconst model = this.modelService.getModel(this.modelUri) ?? this.modelService.createModel(contents, this.modeService.create('search-result'), this.modelUri);\n\t\tthis.resolveContents(model);\n\t\treturn model;\n\t}\n}\n"]}