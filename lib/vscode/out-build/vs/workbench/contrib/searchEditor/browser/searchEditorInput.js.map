{"version":3,"sources":["vs/workbench/contrib/searchEditor/browser/searchEditorInput.ts"],"names":[],"mappings":"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","file":"searchEditorInput.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./media/searchEditor';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { basename } from 'vs/base/common/path';\nimport { extname, isEqual, joinPath } from 'vs/base/common/resources';\nimport { URI } from 'vs/base/common/uri';\nimport { Range } from 'vs/editor/common/core/range';\nimport { ITextModel, TrackedRangeStickiness } from 'vs/editor/common/model';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { localize } from 'vs/nls';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IFileDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { EditorInput, GroupIdentifier, IEditorInput, IMoveResult, IRevertOptions, ISaveOptions, IEditorInputFactoryRegistry, EditorExtensions, EditorResourceAccessor } from 'vs/workbench/common/editor';\nimport { Memento } from 'vs/workbench/common/memento';\nimport { SearchEditorFindMatchClass, SearchEditorScheme, SearchEditorWorkingCopyTypeId } from 'vs/workbench/contrib/searchEditor/browser/constants';\nimport { SearchEditorModel } from 'vs/workbench/contrib/searchEditor/browser/searchEditorModel';\nimport { defaultSearchConfig, extractSearchQueryFromModel, parseSavedSearchEditor, serializeSearchConfiguration } from 'vs/workbench/contrib/searchEditor/browser/searchEditorSerialization';\nimport { IPathService } from 'vs/workbench/services/path/common/pathService';\nimport { ISearchConfigurationProperties } from 'vs/workbench/services/search/common/search';\nimport { ITextFileSaveOptions, ITextFileService, toBufferOrReadable } from 'vs/workbench/services/textfile/common/textfiles';\nimport { IWorkingCopyService } from 'vs/workbench/services/workingCopy/common/workingCopyService';\nimport { IWorkingCopy, IWorkingCopyBackup, WorkingCopyCapabilities } from 'vs/workbench/services/workingCopy/common/workingCopy';\nimport { CancellationToken } from 'vs/base/common/cancellation';\n\nexport type SearchConfiguration = {\n\tquery: string,\n\tfilesToInclude: string,\n\tfilesToExclude: string,\n\tcontextLines: number,\n\tmatchWholeWord: boolean,\n\tisCaseSensitive: boolean,\n\tisRegexp: boolean,\n\tuseExcludeSettingsAndIgnoreFiles: boolean,\n\tshowIncludesExcludes: boolean,\n\tonlyOpenEditors: boolean,\n};\n\nexport const SEARCH_EDITOR_EXT = '.code-search';\n\nexport class SearchEditorInput extends EditorInput {\n\tstatic readonly ID: string = 'workbench.editorinputs.searchEditorInput';\n\n\toverride get typeId(): string {\n\t\treturn SearchEditorInput.ID;\n\t}\n\n\tprivate memento: Memento;\n\n\tprivate dirty: boolean = false;\n\tprivate get model(): Promise<ITextModel> {\n\t\treturn this.searchEditorModel.resolve();\n\t}\n\n\tprivate _cachedModel: ITextModel | undefined;\n\n\tprivate readonly _onDidChangeContent = this._register(new Emitter<void>());\n\treadonly onDidChangeContent: Event<void> = this._onDidChangeContent.event;\n\n\tprivate oldDecorationsIDs: string[] = [];\n\n\tprivate _config: Readonly<SearchConfiguration>;\n\tpublic get config(): Readonly<SearchConfiguration> { return this._config; }\n\tpublic set config(value: Readonly<SearchConfiguration>) {\n\t\tthis._config = value;\n\t\tthis.memento.getMemento(StorageScope.WORKSPACE, StorageTarget.MACHINE).searchConfig = value;\n\t\tthis._onDidChangeLabel.fire();\n\t}\n\n\tprivate readonly fileEditorInputFactory = Registry.as<IEditorInputFactoryRegistry>(EditorExtensions.EditorInputFactories).getFileEditorInputFactory();\n\n\tget resource() {\n\t\treturn this.backingUri || this.modelUri;\n\t}\n\n\tconstructor(\n\t\tpublic readonly modelUri: URI,\n\t\tpublic readonly backingUri: URI | undefined,\n\t\tprivate searchEditorModel: SearchEditorModel,\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@ITextFileService protected readonly textFileService: ITextFileService,\n\t\t@IFileDialogService private readonly fileDialogService: IFileDialogService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IWorkingCopyService private readonly workingCopyService: IWorkingCopyService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IPathService private readonly pathService: IPathService,\n\t\t@IStorageService storageService: IStorageService,\n\t) {\n\t\tsuper();\n\n\t\tthis._config = searchEditorModel.config;\n\t\tsearchEditorModel.onModelResolved\n\t\t\t.then(model => {\n\t\t\t\tthis._register(model.onDidChangeContent(() => this._onDidChangeContent.fire()));\n\t\t\t\tthis._register(model);\n\t\t\t\tthis._cachedModel = model;\n\t\t\t});\n\n\t\tif (this.modelUri.scheme !== SearchEditorScheme) {\n\t\t\tthrow Error('SearchEditorInput must be invoked with a SearchEditorScheme uri');\n\t\t}\n\n\t\tthis.memento = new Memento(SearchEditorInput.ID, storageService);\n\t\tstorageService.onWillSaveState(() => this.memento.saveMemento());\n\n\t\tconst input = this;\n\t\tconst workingCopyAdapter = new class implements IWorkingCopy {\n\t\t\treadonly typeId = SearchEditorWorkingCopyTypeId;\n\t\t\treadonly resource = input.modelUri;\n\t\t\tget name() { return input.getName(); }\n\t\t\treadonly capabilities = input.isUntitled() ? WorkingCopyCapabilities.Untitled : WorkingCopyCapabilities.None;\n\t\t\treadonly onDidChangeDirty = input.onDidChangeDirty;\n\t\t\treadonly onDidChangeContent = input.onDidChangeContent;\n\t\t\tisDirty(): boolean { return input.isDirty(); }\n\t\t\tbackup(token: CancellationToken): Promise<IWorkingCopyBackup> { return input.backup(token); }\n\t\t\tsave(options?: ISaveOptions): Promise<boolean> { return input.save(0, options).then(editor => !!editor); }\n\t\t\trevert(options?: IRevertOptions): Promise<void> { return input.revert(0, options); }\n\t\t};\n\n\t\tthis._register(this.workingCopyService.registerWorkingCopy(workingCopyAdapter));\n\t}\n\n\toverride async save(group: GroupIdentifier, options?: ITextFileSaveOptions): Promise<IEditorInput | undefined> {\n\t\tif ((await this.model).isDisposed()) { return; }\n\n\t\tif (this.backingUri) {\n\t\t\tawait this.textFileService.write(this.backingUri, await this.serializeForDisk(), options);\n\t\t\tthis.setDirty(false);\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this.saveAs(group, options);\n\t\t}\n\t}\n\n\tprivate async serializeForDisk() {\n\t\treturn serializeSearchConfiguration(this.config) + '\\n' + (await this.model).getValue();\n\t}\n\n\tasync getModels() {\n\t\treturn { config: this.config, body: await this.model };\n\t}\n\n\toverride async saveAs(group: GroupIdentifier, options?: ITextFileSaveOptions): Promise<IEditorInput | undefined> {\n\t\tconst path = await this.fileDialogService.pickFileToSave(await this.suggestFileName(), options?.availableFileSystems);\n\t\tif (path) {\n\t\t\tthis.telemetryService.publicLog2('searchEditor/saveSearchResults');\n\t\t\tconst toWrite = await this.serializeForDisk();\n\t\t\tif (await this.textFileService.create([{ resource: path, value: toWrite, options: { overwrite: true } }])) {\n\t\t\t\tthis.setDirty(false);\n\t\t\t\tif (!isEqual(path, this.modelUri)) {\n\t\t\t\t\tconst input = this.instantiationService.invokeFunction(getOrMakeSearchEditorInput, { config: this.config, backingUri: path });\n\t\t\t\t\tinput.setMatchRanges(this.getMatchRanges());\n\t\t\t\t\treturn input;\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\toverride getName(maxLength = 12): string {\n\t\tconst trimToMax = (label: string) => (label.length < maxLength ? label : `${label.slice(0, maxLength - 3)}...`);\n\n\t\tif (this.backingUri) {\n\t\t\tconst originalURI = EditorResourceAccessor.getOriginalUri(this);\n\t\t\treturn localize('searchTitle.withQuery', \"Search: {0}\", basename((originalURI ?? this.backingUri).path, SEARCH_EDITOR_EXT));\n\t\t}\n\n\t\tconst query = this.config.query?.trim();\n\t\tif (query) {\n\t\t\treturn localize('searchTitle.withQuery', \"Search: {0}\", trimToMax(query));\n\t\t}\n\t\treturn localize('searchTitle', \"Search\");\n\t}\n\n\tsetDirty(dirty: boolean) {\n\t\tthis.dirty = dirty;\n\t\tthis._onDidChangeDirty.fire();\n\t}\n\n\toverride isDirty() {\n\t\treturn this.dirty;\n\t}\n\n\toverride isReadonly() {\n\t\treturn false;\n\t}\n\n\toverride isUntitled() {\n\t\treturn !this.backingUri;\n\t}\n\n\toverride rename(group: GroupIdentifier, target: URI): IMoveResult | undefined {\n\t\tif (this._cachedModel && extname(target) === SEARCH_EDITOR_EXT) {\n\t\t\treturn {\n\t\t\t\teditor: this.instantiationService.invokeFunction(getOrMakeSearchEditorInput, { config: this.config, text: this._cachedModel.getValue(), backingUri: target })\n\t\t\t};\n\t\t}\n\t\t// Ignore move if editor was renamed to a different file extension\n\t\treturn undefined;\n\t}\n\n\toverride dispose() {\n\t\tthis.modelService.destroyModel(this.modelUri);\n\t\tsuper.dispose();\n\t}\n\n\toverride matches(other: unknown) {\n\t\tif (this === other) { return true; }\n\n\t\tif (other instanceof SearchEditorInput) {\n\t\t\treturn !!(other.modelUri.fragment && other.modelUri.fragment === this.modelUri.fragment);\n\t\t} else if (this.fileEditorInputFactory.isFileEditorInput(other)) {\n\t\t\treturn isEqual(other.resource, this.backingUri);\n\t\t}\n\t\treturn false;\n\t}\n\n\tgetMatchRanges(): Range[] {\n\t\treturn (this._cachedModel?.getAllDecorations() ?? [])\n\t\t\t.filter(decoration => decoration.options.className === SearchEditorFindMatchClass)\n\t\t\t.filter(({ range }) => !(range.startColumn === 1 && range.endColumn === 1))\n\t\t\t.map(({ range }) => range);\n\t}\n\n\tasync setMatchRanges(ranges: Range[]) {\n\t\tthis.oldDecorationsIDs = (await this.searchEditorModel.onModelResolved).deltaDecorations(this.oldDecorationsIDs, ranges.map(range =>\n\t\t\t({ range, options: { className: SearchEditorFindMatchClass, stickiness: TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges } })));\n\t}\n\n\toverride async revert(group: GroupIdentifier, options?: IRevertOptions) {\n\t\tif (options?.soft) {\n\t\t\tthis.setDirty(false);\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.backingUri) {\n\t\t\tconst { config, text } = await this.instantiationService.invokeFunction(parseSavedSearchEditor, this.backingUri);\n\t\t\t(await this.model).setValue(text);\n\t\t\tthis.config = config;\n\t\t} else {\n\t\t\t(await this.model).setValue('');\n\t\t}\n\t\tsuper.revert(group, options);\n\t\tthis.setDirty(false);\n\t}\n\n\toverride canSplit() {\n\t\treturn false;\n\t}\n\n\tprivate async backup(token: CancellationToken): Promise<IWorkingCopyBackup> {\n\t\tconst model = await this.model;\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn {};\n\t\t}\n\n\t\treturn { content: toBufferOrReadable(model.createSnapshot(true /* preserve BOM */)) };\n\t}\n\n\tprivate async suggestFileName(): Promise<URI> {\n\t\tconst query = extractSearchQueryFromModel(await this.model).query;\n\n\t\tconst searchFileName = (query.replace(/[^\\w \\-_]+/g, '_') || 'Search') + SEARCH_EDITOR_EXT;\n\n\t\treturn joinPath(await this.fileDialogService.defaultFilePath(this.pathService.defaultUriScheme), searchFileName);\n\t}\n}\n\nconst inputs = new Map<string, SearchEditorInput>();\nexport const getOrMakeSearchEditorInput = (\n\taccessor: ServicesAccessor,\n\texistingData: ({ config: Partial<SearchConfiguration>, backingUri?: URI } &\n\t\t({ modelUri: URI, text?: never, } |\n\t\t{ text: string, modelUri?: never, } |\n\t\t{ backingUri: URI, text?: never, modelUri?: never }))\n): SearchEditorInput => {\n\n\tconst instantiationService = accessor.get(IInstantiationService);\n\tconst storageService = accessor.get(IStorageService);\n\tconst configurationService = accessor.get(IConfigurationService);\n\n\tconst searchEditorSettings = configurationService.getValue<ISearchConfigurationProperties>('search').searchEditor;\n\n\tconst reuseOldSettings = searchEditorSettings.reusePriorSearchConfiguration;\n\tconst defaultNumberOfContextLines = searchEditorSettings.defaultNumberOfContextLines;\n\n\tconst priorConfig: SearchConfiguration = reuseOldSettings ? new Memento(SearchEditorInput.ID, storageService).getMemento(StorageScope.WORKSPACE, StorageTarget.MACHINE).searchConfig : {};\n\tconst defaultConfig = defaultSearchConfig();\n\n\tconst config = { ...defaultConfig, ...priorConfig, ...existingData.config };\n\n\tif (defaultNumberOfContextLines !== null && defaultNumberOfContextLines !== undefined) {\n\t\tconfig.contextLines = existingData.config.contextLines ?? defaultNumberOfContextLines;\n\t}\n\n\tif (existingData.text) {\n\t\tconfig.contextLines = 0;\n\t}\n\n\tconst modelUri = existingData.modelUri ?? URI.from({ scheme: SearchEditorScheme, fragment: `${Math.random()}` });\n\n\tconst cacheKey = existingData.backingUri?.toString() ?? modelUri.toString();\n\tconst existing = inputs.get(cacheKey);\n\tif (existing) {\n\t\treturn existing;\n\t}\n\n\tconst model = instantiationService.createInstance(SearchEditorModel, modelUri, config, existingData);\n\tconst input = instantiationService.createInstance(SearchEditorInput, modelUri, existingData.backingUri, model);\n\n\tinputs.set(cacheKey, input);\n\tinput.onWillDispose(() => inputs.delete(cacheKey));\n\n\treturn input;\n};\n"]}