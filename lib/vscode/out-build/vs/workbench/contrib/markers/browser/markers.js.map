{"version":3,"sources":["vs/workbench/contrib/markers/browser/markers.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IA6BhG,IAAa,eAAe,GAA5B,MAAa,eAAgB,SAAQ,sBAAU;QAI9C,YACoC,eAAiC,EACnC,aAA6B;YAE9D,KAAK,EAAE,CAAC;YAH2B,oBAAe,GAAf,eAAe,CAAkB;YACnC,kBAAa,GAAb,aAAa,CAAgB;YAJ9C,aAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,6BAAiB,EAAe,CAAC,CAAC;YAOhF,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;YAC7E,IAAI,CAAC,WAAW,EAAE,CAAC;QACpB,CAAC;QAEO,WAAW;YAClB,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,aAAa,CAAC,aAAa,EAAE,CAAC;YACvE,MAAM,KAAK,GAAG,MAAM,GAAG,QAAQ,GAAG,KAAK,CAAC;YACxC,MAAM,OAAO,GAAG,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAe,EAAE,IAAoB,EAAE,KAAK,CAAC,CAAC;YACvE,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,mBAAS,CAAC,eAAe,EAAE,EAAE,KAAK,EAAE,IAAI,sBAAW,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAC1I,CAAC;KACD,CAAA;IAnBY,eAAe;QAKzB,WAAA,2BAAgB,CAAA;QAChB,WAAA,wBAAc,CAAA;OANJ,eAAe,CAmB3B;IAnBY,0CAAe","file":"markers.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable, MutableDisposable, IDisposable } from 'vs/base/common/lifecycle';\nimport { IMarkerService } from 'vs/platform/markers/common/markers';\nimport { IActivityService, NumberBadge } from 'vs/workbench/services/activity/common/activity';\nimport { localize } from 'vs/nls';\nimport Constants from './constants';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { MarkersFilters } from 'vs/workbench/contrib/markers/browser/markersViewActions';\nimport { Event } from 'vs/base/common/event';\nimport { IView } from 'vs/workbench/common/views';\nimport { MarkerElement } from 'vs/workbench/contrib/markers/browser/markersModel';\n\nexport interface IMarkersView extends IView {\n\n\treadonly onDidFocusFilter: Event<void>;\n\treadonly onDidClearFilterText: Event<void>;\n\treadonly filters: MarkersFilters;\n\treadonly onDidChangeFilterStats: Event<{ total: number, filtered: number }>;\n\tfocusFilter(): void;\n\tclearFilterText(): void;\n\tgetFilterStats(): { total: number, filtered: number };\n\n\tgetFocusElement(): MarkerElement | undefined;\n\n\tcollapseAll(): void;\n\tsetMultiline(multiline: boolean): void;\n}\n\nexport class ActivityUpdater extends Disposable implements IWorkbenchContribution {\n\n\tprivate readonly activity = this._register(new MutableDisposable<IDisposable>());\n\n\tconstructor(\n\t\t@IActivityService private readonly activityService: IActivityService,\n\t\t@IMarkerService private readonly markerService: IMarkerService\n\t) {\n\t\tsuper();\n\t\tthis._register(this.markerService.onMarkerChanged(() => this.updateBadge()));\n\t\tthis.updateBadge();\n\t}\n\n\tprivate updateBadge(): void {\n\t\tconst { errors, warnings, infos } = this.markerService.getStatistics();\n\t\tconst total = errors + warnings + infos;\n\t\tconst message = localize('totalProblems', 'Total {0} Problems', total);\n\t\tthis.activity.value = this.activityService.showViewActivity(Constants.MARKERS_VIEW_ID, { badge: new NumberBadge(total, () => message) });\n\t}\n}\n"]}