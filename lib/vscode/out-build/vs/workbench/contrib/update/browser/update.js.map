{"version":3,"sources":["vs/workbench/contrib/update/browser/update.ts"],"names":[],"mappings":"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","file":"update.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport severity from 'vs/base/common/severity';\nimport { Action } from 'vs/base/common/actions';\nimport { Disposable, MutableDisposable } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { IActivityService, NumberBadge, IBadge, ProgressBadge } from 'vs/workbench/services/activity/common/activity';\nimport { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { IUpdateService, State as UpdateState, StateType, IUpdate } from 'vs/platform/update/common/update';\nimport { INotificationService, Severity } from 'vs/platform/notification/common/notification';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { ReleaseNotesManager } from './releaseNotesEditor';\nimport { isWindows } from 'vs/base/common/platform';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { RawContextKey, IContextKey, IContextKeyService, ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { MenuRegistry, MenuId, registerAction2, Action2 } from 'vs/platform/actions/common/actions';\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { ShowCurrentReleaseNotesActionId, CheckForVSCodeUpdateActionId } from 'vs/workbench/contrib/update/common/update';\nimport { IHostService } from 'vs/workbench/services/host/browser/host';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport product from 'vs/platform/product/common/product';\nimport { IUserDataAutoSyncEnablementService, IUserDataSyncService, IUserDataSyncStoreManagementService, SyncStatus, UserDataSyncStoreType } from 'vs/platform/userDataSync/common/userDataSync';\nimport { IsWebContext } from 'vs/platform/contextkey/common/contextkeys';\nimport { Promises } from 'vs/base/common/async';\nimport { IUserDataSyncWorkbenchService } from 'vs/workbench/services/userDataSync/common/userDataSync';\nimport { Event } from 'vs/base/common/event';\n\nexport const CONTEXT_UPDATE_STATE = new RawContextKey<string>('updateState', StateType.Idle);\n\nlet releaseNotesManager: ReleaseNotesManager | undefined = undefined;\n\nfunction showReleaseNotes(instantiationService: IInstantiationService, version: string) {\n\tif (!releaseNotesManager) {\n\t\treleaseNotesManager = instantiationService.createInstance(ReleaseNotesManager);\n\t}\n\n\treturn instantiationService.invokeFunction(accessor => releaseNotesManager!.show(accessor, version));\n}\n\nexport class OpenLatestReleaseNotesInBrowserAction extends Action {\n\n\tconstructor(\n\t\t@IOpenerService private readonly openerService: IOpenerService,\n\t\t@IProductService private readonly productService: IProductService\n\t) {\n\t\tsuper('update.openLatestReleaseNotes', nls.localize('releaseNotes', \"Release Notes\"), undefined, true);\n\t}\n\n\toverride async run(): Promise<void> {\n\t\tif (this.productService.releaseNotesUrl) {\n\t\t\tconst uri = URI.parse(this.productService.releaseNotesUrl);\n\t\t\tawait this.openerService.open(uri);\n\t\t} else {\n\t\t\tthrow new Error(nls.localize('update.noReleaseNotesOnline', \"This version of {0} does not have release notes online\", this.productService.nameLong));\n\t\t}\n\t}\n}\n\nexport abstract class AbstractShowReleaseNotesAction extends Action {\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\tprivate version: string,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService\n\t) {\n\t\tsuper(id, label, undefined, true);\n\t}\n\n\toverride async run(): Promise<void> {\n\t\tif (!this.enabled) {\n\t\t\treturn;\n\t\t}\n\t\tthis.enabled = false;\n\n\t\ttry {\n\t\t\tawait showReleaseNotes(this.instantiationService, this.version);\n\t\t} catch (err) {\n\t\t\tconst action = this.instantiationService.createInstance(OpenLatestReleaseNotesInBrowserAction);\n\t\t\ttry {\n\t\t\t\tawait action.run();\n\t\t\t} catch (err2) {\n\t\t\t\tthrow new Error(`${err.message} and ${err2.message}`);\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport class ShowReleaseNotesAction extends AbstractShowReleaseNotesAction {\n\n\tconstructor(\n\t\tversion: string,\n\t\t@IInstantiationService instantiationService: IInstantiationService\n\t) {\n\t\tsuper('update.showReleaseNotes', nls.localize('releaseNotes', \"Release Notes\"), version, instantiationService);\n\t}\n}\n\nexport class ShowCurrentReleaseNotesAction extends AbstractShowReleaseNotesAction {\n\n\tstatic readonly ID = ShowCurrentReleaseNotesActionId;\n\tstatic readonly LABEL = nls.localize('showReleaseNotes', \"Show Release Notes\");\n\tstatic readonly AVAILABE = !!product.releaseNotesUrl;\n\n\tconstructor(\n\t\tid = ShowCurrentReleaseNotesAction.ID,\n\t\tlabel = ShowCurrentReleaseNotesAction.LABEL,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IProductService productService: IProductService\n\t) {\n\t\tsuper(id, label, productService.version, instantiationService);\n\t}\n}\n\ninterface IVersion {\n\tmajor: number;\n\tminor: number;\n\tpatch: number;\n}\n\nfunction parseVersion(version: string): IVersion | undefined {\n\tconst match = /([0-9]+)\\.([0-9]+)\\.([0-9]+)/.exec(version);\n\n\tif (!match) {\n\t\treturn undefined;\n\t}\n\n\treturn {\n\t\tmajor: parseInt(match[1]),\n\t\tminor: parseInt(match[2]),\n\t\tpatch: parseInt(match[3])\n\t};\n}\n\nfunction isMajorMinorUpdate(before: IVersion, after: IVersion): boolean {\n\treturn before.major < after.major || before.minor < after.minor;\n}\n\nexport class ProductContribution implements IWorkbenchContribution {\n\n\tprivate static readonly KEY = 'releaseNotes/lastVersion';\n\n\tconstructor(\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@IWorkbenchEnvironmentService environmentService: IWorkbenchEnvironmentService,\n\t\t@IOpenerService openerService: IOpenerService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IHostService hostService: IHostService,\n\t\t@IProductService productService: IProductService\n\t) {\n\t\thostService.hadLastFocus().then(async hadLastFocus => {\n\t\t\tif (!hadLastFocus) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst lastVersion = parseVersion(storageService.get(ProductContribution.KEY, StorageScope.GLOBAL, ''));\n\t\t\tconst currentVersion = parseVersion(productService.version);\n\t\t\tconst shouldShowReleaseNotes = configurationService.getValue<boolean>('update.showReleaseNotes');\n\t\t\tconst releaseNotesUrl = productService.releaseNotesUrl;\n\n\t\t\t// was there a major/minor update? if so, open release notes\n\t\t\tif (shouldShowReleaseNotes && !environmentService.skipReleaseNotes && releaseNotesUrl && lastVersion && currentVersion && isMajorMinorUpdate(lastVersion, currentVersion)) {\n\t\t\t\tshowReleaseNotes(instantiationService, productService.version)\n\t\t\t\t\t.then(undefined, () => {\n\t\t\t\t\t\tnotificationService.prompt(\n\t\t\t\t\t\t\tseverity.Info,\n\t\t\t\t\t\t\tnls.localize('read the release notes', \"Welcome to {0} v{1}! Would you like to read the Release Notes?\", productService.nameLong, productService.version),\n\t\t\t\t\t\t\t[{\n\t\t\t\t\t\t\t\tlabel: nls.localize('releaseNotes', \"Release Notes\"),\n\t\t\t\t\t\t\t\trun: () => {\n\t\t\t\t\t\t\t\t\tconst uri = URI.parse(releaseNotesUrl);\n\t\t\t\t\t\t\t\t\topenerService.open(uri);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t{ sticky: true }\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t}\n\n\t\t\t// should we show the new license?\n\t\t\tif (productService.licenseUrl && lastVersion && lastVersion.major < 1 && currentVersion && currentVersion.major >= 1) {\n\t\t\t\tnotificationService.info(nls.localize('licenseChanged', \"Our license terms have changed, please click [here]({0}) to go through them.\", productService.licenseUrl));\n\t\t\t}\n\n\t\t\tstorageService.store(ProductContribution.KEY, productService.version, StorageScope.GLOBAL, StorageTarget.MACHINE);\n\t\t});\n\t}\n}\n\nexport class UpdateContribution extends Disposable implements IWorkbenchContribution {\n\n\tprivate state: UpdateState;\n\tprivate readonly badgeDisposable = this._register(new MutableDisposable());\n\tprivate updateStateContextKey: IContextKey<string>;\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IUpdateService private readonly updateService: IUpdateService,\n\t\t@IActivityService private readonly activityService: IActivityService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IHostService private readonly hostService: IHostService\n\t) {\n\t\tsuper();\n\t\tthis.state = updateService.state;\n\t\tthis.updateStateContextKey = CONTEXT_UPDATE_STATE.bindTo(this.contextKeyService);\n\n\t\tthis._register(updateService.onStateChange(this.onUpdateStateChange, this));\n\t\tthis.onUpdateStateChange(this.updateService.state);\n\n\t\t/*\n\t\tThe `update/lastKnownVersion` and `update/updateNotificationTime` storage keys are used in\n\t\tcombination to figure out when to show a message to the user that he should update.\n\n\t\tThis message should appear if the user has received an update notification but hasn't\n\t\tupdated since 5 days.\n\t\t*/\n\n\t\tconst currentVersion = this.productService.commit;\n\t\tconst lastKnownVersion = this.storageService.get('update/lastKnownVersion', StorageScope.GLOBAL);\n\n\t\t// if current version != stored version, clear both fields\n\t\tif (currentVersion !== lastKnownVersion) {\n\t\t\tthis.storageService.remove('update/lastKnownVersion', StorageScope.GLOBAL);\n\t\t\tthis.storageService.remove('update/updateNotificationTime', StorageScope.GLOBAL);\n\t\t}\n\n\t\tthis.registerGlobalActivityActions();\n\t}\n\n\tprivate async onUpdateStateChange(state: UpdateState): Promise<void> {\n\t\tthis.updateStateContextKey.set(state.type);\n\n\t\tswitch (state.type) {\n\t\t\tcase StateType.Idle:\n\t\t\t\tif (state.error) {\n\t\t\t\t\tthis.onError(state.error);\n\t\t\t\t} else if (this.state.type === StateType.CheckingForUpdates && this.state.explicit && await this.hostService.hadLastFocus()) {\n\t\t\t\t\tthis.onUpdateNotAvailable();\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase StateType.AvailableForDownload:\n\t\t\t\tthis.onUpdateAvailable(state.update);\n\t\t\t\tbreak;\n\n\t\t\tcase StateType.Downloaded:\n\t\t\t\tthis.onUpdateDownloaded(state.update);\n\t\t\t\tbreak;\n\n\t\t\tcase StateType.Updating:\n\t\t\t\tthis.onUpdateUpdating(state.update);\n\t\t\t\tbreak;\n\n\t\t\tcase StateType.Ready:\n\t\t\t\tthis.onUpdateReady(state.update);\n\t\t\t\tbreak;\n\t\t}\n\n\t\tlet badge: IBadge | undefined = undefined;\n\t\tlet clazz: string | undefined;\n\t\tlet priority: number | undefined = undefined;\n\n\t\tif (state.type === StateType.AvailableForDownload || state.type === StateType.Downloaded || state.type === StateType.Ready) {\n\t\t\tbadge = new NumberBadge(1, () => nls.localize('updateIsReady', \"New {0} update available.\", this.productService.nameShort));\n\t\t} else if (state.type === StateType.CheckingForUpdates || state.type === StateType.Downloading || state.type === StateType.Updating) {\n\t\t\tbadge = new ProgressBadge(() => nls.localize('checkingForUpdates', \"Checking for Updates...\"));\n\t\t\tclazz = 'progress-badge';\n\t\t\tpriority = 1;\n\t\t}\n\n\t\tthis.badgeDisposable.clear();\n\n\t\tif (badge) {\n\t\t\tthis.badgeDisposable.value = this.activityService.showGlobalActivity({ badge, clazz, priority });\n\t\t}\n\n\t\tthis.state = state;\n\t}\n\n\tprivate onError(error: string): void {\n\t\tif (/The request timed out|The network connection was lost/i.test(error)) {\n\t\t\treturn;\n\t\t}\n\n\t\terror = error.replace(/See https:\\/\\/github\\.com\\/Squirrel\\/Squirrel\\.Mac\\/issues\\/182 for more information/, 'This might mean the application was put on quarantine by macOS. See [this link](https://github.com/microsoft/vscode/issues/7426#issuecomment-425093469) for more information');\n\n\t\tthis.notificationService.notify({\n\t\t\tseverity: Severity.Error,\n\t\t\tmessage: error,\n\t\t\tsource: nls.localize('update service', \"Update Service\"),\n\t\t});\n\t}\n\n\tprivate onUpdateNotAvailable(): void {\n\t\tthis.dialogService.show(\n\t\t\tseverity.Info,\n\t\t\tnls.localize('noUpdatesAvailable', \"There are currently no updates available.\"),\n\t\t\t[nls.localize('ok', \"OK\")]\n\t\t);\n\t}\n\n\t// linux\n\tprivate onUpdateAvailable(update: IUpdate): void {\n\t\tif (!this.shouldShowNotification()) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.notificationService.prompt(\n\t\t\tseverity.Info,\n\t\t\tnls.localize('thereIsUpdateAvailable', \"There is an available update.\"),\n\t\t\t[{\n\t\t\t\tlabel: nls.localize('download update', \"Download Update\"),\n\t\t\t\trun: () => this.updateService.downloadUpdate()\n\t\t\t}, {\n\t\t\t\tlabel: nls.localize('later', \"Later\"),\n\t\t\t\trun: () => { }\n\t\t\t}, {\n\t\t\t\tlabel: nls.localize('releaseNotes', \"Release Notes\"),\n\t\t\t\trun: () => {\n\t\t\t\t\tconst action = this.instantiationService.createInstance(ShowReleaseNotesAction, update.productVersion);\n\t\t\t\t\taction.run();\n\t\t\t\t\taction.dispose();\n\t\t\t\t}\n\t\t\t}],\n\t\t\t{ sticky: true }\n\t\t);\n\t}\n\n\t// windows fast updates (target === system)\n\tprivate onUpdateDownloaded(update: IUpdate): void {\n\t\tif (!this.shouldShowNotification()) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.notificationService.prompt(\n\t\t\tseverity.Info,\n\t\t\tnls.localize('updateAvailable', \"There's an update available: {0} {1}\", this.productService.nameLong, update.productVersion),\n\t\t\t[{\n\t\t\t\tlabel: nls.localize('installUpdate', \"Install Update\"),\n\t\t\t\trun: () => this.updateService.applyUpdate()\n\t\t\t}, {\n\t\t\t\tlabel: nls.localize('later', \"Later\"),\n\t\t\t\trun: () => { }\n\t\t\t}, {\n\t\t\t\tlabel: nls.localize('releaseNotes', \"Release Notes\"),\n\t\t\t\trun: () => {\n\t\t\t\t\tconst action = this.instantiationService.createInstance(ShowReleaseNotesAction, update.productVersion);\n\t\t\t\t\taction.run();\n\t\t\t\t\taction.dispose();\n\t\t\t\t}\n\t\t\t}],\n\t\t\t{ sticky: true }\n\t\t);\n\t}\n\n\t// windows fast updates\n\tprivate onUpdateUpdating(update: IUpdate): void {\n\t\tif (isWindows && this.productService.target === 'user') {\n\t\t\treturn;\n\t\t}\n\n\t\t// windows fast updates (target === system)\n\t\tthis.notificationService.prompt(\n\t\t\tseverity.Info,\n\t\t\tnls.localize('updateInstalling', \"{0} {1} is being installed in the background; we'll let you know when it's done.\", this.productService.nameLong, update.productVersion),\n\t\t\t[],\n\t\t\t{\n\t\t\t\tneverShowAgain: { id: 'neverShowAgain:update/win32-fast-updates', isSecondary: true }\n\t\t\t}\n\t\t);\n\t}\n\n\t// windows and mac\n\tprivate onUpdateReady(update: IUpdate): void {\n\t\tif (!(isWindows && this.productService.target !== 'user') && !this.shouldShowNotification()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst actions = [{\n\t\t\tlabel: nls.localize('updateNow', \"Update Now\"),\n\t\t\trun: () => this.updateService.quitAndInstall()\n\t\t}, {\n\t\t\tlabel: nls.localize('later', \"Later\"),\n\t\t\trun: () => { }\n\t\t}];\n\n\t\t// TODO@joao check why snap updates send `update` as falsy\n\t\tif (update.productVersion) {\n\t\t\tactions.push({\n\t\t\t\tlabel: nls.localize('releaseNotes', \"Release Notes\"),\n\t\t\t\trun: () => {\n\t\t\t\t\tconst action = this.instantiationService.createInstance(ShowReleaseNotesAction, update.productVersion);\n\t\t\t\t\taction.run();\n\t\t\t\t\taction.dispose();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// windows user fast updates and mac\n\t\tthis.notificationService.prompt(\n\t\t\tseverity.Info,\n\t\t\tnls.localize('updateAvailableAfterRestart', \"Restart {0} to apply the latest update.\", this.productService.nameLong),\n\t\t\tactions,\n\t\t\t{ sticky: true }\n\t\t);\n\t}\n\n\tprivate shouldShowNotification(): boolean {\n\t\tconst currentVersion = this.productService.commit;\n\t\tconst currentMillis = new Date().getTime();\n\t\tconst lastKnownVersion = this.storageService.get('update/lastKnownVersion', StorageScope.GLOBAL);\n\n\t\t// if version != stored version, save version and date\n\t\tif (currentVersion !== lastKnownVersion) {\n\t\t\tthis.storageService.store('update/lastKnownVersion', currentVersion!, StorageScope.GLOBAL, StorageTarget.MACHINE);\n\t\t\tthis.storageService.store('update/updateNotificationTime', currentMillis, StorageScope.GLOBAL, StorageTarget.MACHINE);\n\t\t}\n\n\t\tconst updateNotificationMillis = this.storageService.getNumber('update/updateNotificationTime', StorageScope.GLOBAL, currentMillis);\n\t\tconst diffDays = (currentMillis - updateNotificationMillis) / (1000 * 60 * 60 * 24);\n\n\t\treturn diffDays > 5;\n\t}\n\n\tprivate registerGlobalActivityActions(): void {\n\t\tCommandsRegistry.registerCommand('update.check', () => this.updateService.checkForUpdates(true));\n\t\tMenuRegistry.appendMenuItem(MenuId.GlobalActivity, {\n\t\t\tgroup: '7_update',\n\t\t\tcommand: {\n\t\t\t\tid: 'update.check',\n\t\t\t\ttitle: nls.localize('checkForUpdates', \"Check for Updates...\")\n\t\t\t},\n\t\t\twhen: CONTEXT_UPDATE_STATE.isEqualTo(StateType.Idle)\n\t\t});\n\n\t\tCommandsRegistry.registerCommand('update.checking', () => { });\n\t\tMenuRegistry.appendMenuItem(MenuId.GlobalActivity, {\n\t\t\tgroup: '7_update',\n\t\t\tcommand: {\n\t\t\t\tid: 'update.checking',\n\t\t\t\ttitle: nls.localize('checkingForUpdates', \"Checking for Updates...\"),\n\t\t\t\tprecondition: ContextKeyExpr.false()\n\t\t\t},\n\t\t\twhen: CONTEXT_UPDATE_STATE.isEqualTo(StateType.CheckingForUpdates)\n\t\t});\n\n\t\tCommandsRegistry.registerCommand('update.downloadNow', () => this.updateService.downloadUpdate());\n\t\tMenuRegistry.appendMenuItem(MenuId.GlobalActivity, {\n\t\t\tgroup: '7_update',\n\t\t\tcommand: {\n\t\t\t\tid: 'update.downloadNow',\n\t\t\t\ttitle: nls.localize('download update_1', \"Download Update (1)\")\n\t\t\t},\n\t\t\twhen: CONTEXT_UPDATE_STATE.isEqualTo(StateType.AvailableForDownload)\n\t\t});\n\n\t\tCommandsRegistry.registerCommand('update.downloading', () => { });\n\t\tMenuRegistry.appendMenuItem(MenuId.GlobalActivity, {\n\t\t\tgroup: '7_update',\n\t\t\tcommand: {\n\t\t\t\tid: 'update.downloading',\n\t\t\t\ttitle: nls.localize('DownloadingUpdate', \"Downloading Update...\"),\n\t\t\t\tprecondition: ContextKeyExpr.false()\n\t\t\t},\n\t\t\twhen: CONTEXT_UPDATE_STATE.isEqualTo(StateType.Downloading)\n\t\t});\n\n\t\tCommandsRegistry.registerCommand('update.install', () => this.updateService.applyUpdate());\n\t\tMenuRegistry.appendMenuItem(MenuId.GlobalActivity, {\n\t\t\tgroup: '7_update',\n\t\t\tcommand: {\n\t\t\t\tid: 'update.install',\n\t\t\t\ttitle: nls.localize('installUpdate...', \"Install Update... (1)\")\n\t\t\t},\n\t\t\twhen: CONTEXT_UPDATE_STATE.isEqualTo(StateType.Downloaded)\n\t\t});\n\n\t\tCommandsRegistry.registerCommand('update.updating', () => { });\n\t\tMenuRegistry.appendMenuItem(MenuId.GlobalActivity, {\n\t\t\tgroup: '7_update',\n\t\t\tcommand: {\n\t\t\t\tid: 'update.updating',\n\t\t\t\ttitle: nls.localize('installingUpdate', \"Installing Update...\"),\n\t\t\t\tprecondition: ContextKeyExpr.false()\n\t\t\t},\n\t\t\twhen: CONTEXT_UPDATE_STATE.isEqualTo(StateType.Updating)\n\t\t});\n\n\t\tCommandsRegistry.registerCommand('update.restart', () => this.updateService.quitAndInstall());\n\t\tMenuRegistry.appendMenuItem(MenuId.GlobalActivity, {\n\t\t\tgroup: '7_update',\n\t\t\tcommand: {\n\t\t\t\tid: 'update.restart',\n\t\t\t\ttitle: nls.localize('restartToUpdate', \"Restart to Update (1)\")\n\t\t\t},\n\t\t\twhen: CONTEXT_UPDATE_STATE.isEqualTo(StateType.Ready)\n\t\t});\n\t}\n}\n\nexport class SwitchProductQualityContribution extends Disposable implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService\n\t) {\n\t\tsuper();\n\n\t\tthis.registerGlobalActivityActions();\n\t}\n\n\tprivate registerGlobalActivityActions(): void {\n\t\tconst quality = this.productService.quality;\n\t\tconst productQualityChangeHandler = this.environmentService.options?.productQualityChangeHandler;\n\t\tif (productQualityChangeHandler && (quality === 'stable' || quality === 'insider')) {\n\t\t\tconst newQuality = quality === 'stable' ? 'insider' : 'stable';\n\t\t\tconst commandId = `update.switchQuality.${newQuality}`;\n\t\t\tconst isSwitchingToInsiders = newQuality === 'insider';\n\t\t\tregisterAction2(class SwitchQuality extends Action2 {\n\t\t\t\tconstructor() {\n\t\t\t\t\tsuper({\n\t\t\t\t\t\tid: commandId,\n\t\t\t\t\t\ttitle: isSwitchingToInsiders ? nls.localize('switchToInsiders', \"Switch to Insiders Version...\") : nls.localize('switchToStable', \"Switch to Stable Version...\"),\n\t\t\t\t\t\tprecondition: IsWebContext,\n\t\t\t\t\t\tmenu: {\n\t\t\t\t\t\t\tid: MenuId.GlobalActivity,\n\t\t\t\t\t\t\twhen: IsWebContext,\n\t\t\t\t\t\t\tgroup: '7_update',\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\t\t\t\tconst dialogService = accessor.get(IDialogService);\n\t\t\t\t\tconst userDataAutoSyncEnablementService = accessor.get(IUserDataAutoSyncEnablementService);\n\t\t\t\t\tconst userDataSyncStoreManagementService = accessor.get(IUserDataSyncStoreManagementService);\n\t\t\t\t\tconst storageService = accessor.get(IStorageService);\n\t\t\t\t\tconst userDataSyncWorkbenchService = accessor.get(IUserDataSyncWorkbenchService);\n\t\t\t\t\tconst userDataSyncService = accessor.get(IUserDataSyncService);\n\n\t\t\t\t\tconst selectSettingsSyncServiceDialogShownKey = 'switchQuality.selectSettingsSyncServiceDialogShown';\n\t\t\t\t\tconst userDataSyncStore = userDataSyncStoreManagementService.userDataSyncStore;\n\t\t\t\t\tlet userDataSyncStoreType: UserDataSyncStoreType | undefined;\n\t\t\t\t\tif (userDataSyncStore && isSwitchingToInsiders && userDataAutoSyncEnablementService.isEnabled()\n\t\t\t\t\t\t&& !storageService.getBoolean(selectSettingsSyncServiceDialogShownKey, StorageScope.GLOBAL, false)) {\n\t\t\t\t\t\tuserDataSyncStoreType = await this.selectSettingsSyncService(dialogService);\n\t\t\t\t\t\tif (!userDataSyncStoreType) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstorageService.store(selectSettingsSyncServiceDialogShownKey, true, StorageScope.GLOBAL, StorageTarget.USER);\n\t\t\t\t\t\tif (userDataSyncStoreType === 'stable') {\n\t\t\t\t\t\t\t// Update the stable service type in the current window, so that it uses stable service after switched to insiders version (after reload).\n\t\t\t\t\t\t\tawait userDataSyncStoreManagementService.switch(userDataSyncStoreType);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst res = await dialogService.confirm({\n\t\t\t\t\t\ttype: 'info',\n\t\t\t\t\t\tmessage: nls.localize('relaunchMessage', \"Changing the version requires a reload to take effect\"),\n\t\t\t\t\t\tdetail: newQuality === 'insider' ?\n\t\t\t\t\t\t\tnls.localize('relaunchDetailInsiders', \"Press the reload button to switch to the nightly pre-production version of VSCode.\") :\n\t\t\t\t\t\t\tnls.localize('relaunchDetailStable', \"Press the reload button to switch to the monthly released stable version of VSCode.\"),\n\t\t\t\t\t\tprimaryButton: nls.localize('reload', \"&&Reload\")\n\t\t\t\t\t});\n\n\t\t\t\t\tif (res.confirmed) {\n\t\t\t\t\t\tconst promises: Promise<any>[] = [];\n\n\t\t\t\t\t\t// If sync is happening wait until it is finished before reload\n\t\t\t\t\t\tif (userDataSyncService.status === SyncStatus.Syncing) {\n\t\t\t\t\t\t\tpromises.push(Event.toPromise(Event.filter(userDataSyncService.onDidChangeStatus, status => status !== SyncStatus.Syncing)));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Synchronise the store type option in insiders service, so that other clients using insiders service are also updated.\n\t\t\t\t\t\tif (isSwitchingToInsiders) {\n\t\t\t\t\t\t\tpromises.push(userDataSyncWorkbenchService.synchroniseUserDataSyncStoreType());\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tawait Promises.settled(promises);\n\n\t\t\t\t\t\tproductQualityChangeHandler(newQuality);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Reset\n\t\t\t\t\t\tif (userDataSyncStoreType) {\n\t\t\t\t\t\t\tstorageService.remove(selectSettingsSyncServiceDialogShownKey, StorageScope.GLOBAL);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tprivate async selectSettingsSyncService(dialogService: IDialogService): Promise<UserDataSyncStoreType | undefined> {\n\t\t\t\t\tconst res = await dialogService.show(\n\t\t\t\t\t\tSeverity.Info,\n\t\t\t\t\t\tnls.localize('selectSyncService.message', \"Choose the settings sync service to use after changing the version\"),\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tnls.localize('use insiders', \"Insiders\"),\n\t\t\t\t\t\t\tnls.localize('use stable', \"Stable (current)\"),\n\t\t\t\t\t\t\tnls.localize('cancel', \"Cancel\"),\n\t\t\t\t\t\t],\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdetail: nls.localize('selectSyncService.detail', \"The Insiders version of VS Code will synchronize your settings, keybindings, extensions, snippets and UI State using separate insiders settings sync service by default.\"),\n\t\t\t\t\t\t\tcancelId: 2\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t\treturn res.choice === 0 ? 'insiders' : res.choice === 1 ? 'stable' : undefined;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n}\n\nexport class CheckForVSCodeUpdateAction extends Action {\n\n\tstatic readonly ID = CheckForVSCodeUpdateActionId;\n\tstatic LABEL = nls.localize('checkForUpdates', \"Check for Updates...\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IUpdateService private readonly updateService: IUpdateService,\n\t) {\n\t\tsuper(id, label, undefined, true);\n\t}\n\n\toverride run(): Promise<void> {\n\t\treturn this.updateService.checkForUpdates(true);\n\t}\n}\n"]}