{"version":3,"file":"terminalColorRegistry.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/terminal/test/common/terminalColorRegistry.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { Extensions as ThemeingExtensions, IColorRegistry, ColorIdentifier } from 'vs/platform/theme/common/colorRegistry';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { ansiColorIdentifiers, registerColors } from 'vs/workbench/contrib/terminal/common/terminalColorRegistry';\nimport { IColorTheme } from 'vs/platform/theme/common/themeService';\nimport { Color } from 'vs/base/common/color';\nimport { ColorScheme } from 'vs/platform/theme/common/theme';\n\nregisterColors();\n\nlet themingRegistry = Registry.as<IColorRegistry>(ThemeingExtensions.ColorContribution);\nfunction getMockTheme(type: ColorScheme): IColorTheme {\n\tlet theme = {\n\t\tselector: '',\n\t\tlabel: '',\n\t\ttype: type,\n\t\tgetColor: (colorId: ColorIdentifier): Color | undefined => themingRegistry.resolveDefaultColor(colorId, theme),\n\t\tdefines: () => true,\n\t\tgetTokenStyleMetadata: () => undefined,\n\t\ttokenColorMap: [],\n\t\tsemanticHighlighting: false\n\t};\n\treturn theme;\n}\n\nsuite('Workbench - TerminalColorRegistry', () => {\n\n\ttest('hc colors', function () {\n\t\tlet theme = getMockTheme(ColorScheme.HIGH_CONTRAST);\n\t\tlet colors = ansiColorIdentifiers.map(colorId => Color.Format.CSS.formatHexA(theme.getColor(colorId)!, true));\n\n\t\tassert.deepStrictEqual(colors, [\n\t\t\t'#000000',\n\t\t\t'#cd0000',\n\t\t\t'#00cd00',\n\t\t\t'#cdcd00',\n\t\t\t'#0000ee',\n\t\t\t'#cd00cd',\n\t\t\t'#00cdcd',\n\t\t\t'#e5e5e5',\n\t\t\t'#7f7f7f',\n\t\t\t'#ff0000',\n\t\t\t'#00ff00',\n\t\t\t'#ffff00',\n\t\t\t'#5c5cff',\n\t\t\t'#ff00ff',\n\t\t\t'#00ffff',\n\t\t\t'#ffffff'\n\t\t], 'The high contrast terminal colors should be used when the hc theme is active');\n\n\t});\n\n\ttest('light colors', function () {\n\t\tlet theme = getMockTheme(ColorScheme.LIGHT);\n\t\tlet colors = ansiColorIdentifiers.map(colorId => Color.Format.CSS.formatHexA(theme.getColor(colorId)!, true));\n\n\t\tassert.deepStrictEqual(colors, [\n\t\t\t'#000000',\n\t\t\t'#cd3131',\n\t\t\t'#00bc00',\n\t\t\t'#949800',\n\t\t\t'#0451a5',\n\t\t\t'#bc05bc',\n\t\t\t'#0598bc',\n\t\t\t'#555555',\n\t\t\t'#666666',\n\t\t\t'#cd3131',\n\t\t\t'#14ce14',\n\t\t\t'#b5ba00',\n\t\t\t'#0451a5',\n\t\t\t'#bc05bc',\n\t\t\t'#0598bc',\n\t\t\t'#a5a5a5'\n\t\t], 'The light terminal colors should be used when the light theme is active');\n\n\t});\n\n\ttest('dark colors', function () {\n\t\tlet theme = getMockTheme(ColorScheme.DARK);\n\t\tlet colors = ansiColorIdentifiers.map(colorId => Color.Format.CSS.formatHexA(theme.getColor(colorId)!, true));\n\n\t\tassert.deepStrictEqual(colors, [\n\t\t\t'#000000',\n\t\t\t'#cd3131',\n\t\t\t'#0dbc79',\n\t\t\t'#e5e510',\n\t\t\t'#2472c8',\n\t\t\t'#bc3fbc',\n\t\t\t'#11a8cd',\n\t\t\t'#e5e5e5',\n\t\t\t'#666666',\n\t\t\t'#f14c4c',\n\t\t\t'#23d18b',\n\t\t\t'#f5f543',\n\t\t\t'#3b8eea',\n\t\t\t'#d670d6',\n\t\t\t'#29b8db',\n\t\t\t'#e5e5e5'\n\t\t], 'The dark terminal colors should be used when a dark theme is active');\n\t});\n});\n"]}