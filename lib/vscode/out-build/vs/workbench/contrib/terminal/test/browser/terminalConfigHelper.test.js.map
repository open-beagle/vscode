{"version":3,"file":"terminalConfigHelper.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/terminal/test/browser/terminalConfigHelper.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { TerminalConfigHelper } from 'vs/workbench/contrib/terminal/browser/terminalConfigHelper';\nimport { EDITOR_FONT_DEFAULTS } from 'vs/editor/common/config/editorOptions';\nimport { TestConfigurationService } from 'vs/platform/configuration/test/common/testConfigurationService';\nimport { LinuxDistro } from 'vs/workbench/contrib/terminal/common/terminal';\n\nsuite('Workbench - TerminalConfigHelper', () => {\n\tlet fixture: HTMLElement;\n\n\tsetup(() => {\n\t\tfixture = document.body;\n\t});\n\n\ttest('TerminalConfigHelper - getFont fontFamily', async () => {\n\t\tconst configurationService = new TestConfigurationService();\n\t\tawait configurationService.setUserConfiguration('editor', { fontFamily: 'foo' });\n\t\tawait configurationService.setUserConfiguration('terminal', { integrated: { fontFamily: 'bar' } });\n\t\tconst configHelper = new TerminalConfigHelper(configurationService, null!, null!, null!, null!, null!);\n\t\tconfigHelper.panelContainer = fixture;\n\t\tassert.strictEqual(configHelper.getFont().fontFamily, 'bar', 'terminal.integrated.fontFamily should be selected over editor.fontFamily');\n\t});\n\n\ttest('TerminalConfigHelper - getFont fontFamily (Linux Fedora)', async () => {\n\t\tconst configurationService = new TestConfigurationService();\n\t\tawait configurationService.setUserConfiguration('editor', { fontFamily: 'foo' });\n\t\tawait configurationService.setUserConfiguration('terminal', { integrated: { fontFamily: null } });\n\t\tconst configHelper = new TerminalConfigHelper(configurationService, null!, null!, null!, null!, null!);\n\t\tconfigHelper.setLinuxDistro(LinuxDistro.Fedora);\n\t\tconfigHelper.panelContainer = fixture;\n\t\tassert.strictEqual(configHelper.getFont().fontFamily, '\\'DejaVu Sans Mono\\', monospace', 'Fedora should have its font overridden when terminal.integrated.fontFamily not set');\n\t});\n\n\ttest('TerminalConfigHelper - getFont fontFamily (Linux Ubuntu)', async () => {\n\t\tconst configurationService = new TestConfigurationService();\n\t\tawait configurationService.setUserConfiguration('editor', { fontFamily: 'foo' });\n\t\tawait configurationService.setUserConfiguration('terminal', { integrated: { fontFamily: null } });\n\t\tconst configHelper = new TerminalConfigHelper(configurationService, null!, null!, null!, null!, null!);\n\t\tconfigHelper.setLinuxDistro(LinuxDistro.Ubuntu);\n\t\tconfigHelper.panelContainer = fixture;\n\t\tassert.strictEqual(configHelper.getFont().fontFamily, '\\'Ubuntu Mono\\', monospace', 'Ubuntu should have its font overridden when terminal.integrated.fontFamily not set');\n\t});\n\n\ttest('TerminalConfigHelper - getFont fontFamily (Linux Unknown)', async () => {\n\t\tconst configurationService = new TestConfigurationService();\n\t\tawait configurationService.setUserConfiguration('editor', { fontFamily: 'foo' });\n\t\tawait configurationService.setUserConfiguration('terminal', { integrated: { fontFamily: null } });\n\t\tconst configHelper = new TerminalConfigHelper(configurationService, null!, null!, null!, null!, null!);\n\t\tconfigHelper.panelContainer = fixture;\n\t\tassert.strictEqual(configHelper.getFont().fontFamily, 'foo', 'editor.fontFamily should be the fallback when terminal.integrated.fontFamily not set');\n\t});\n\n\ttest('TerminalConfigHelper - getFont fontSize', async () => {\n\t\tconst configurationService = new TestConfigurationService();\n\n\t\tawait configurationService.setUserConfiguration('editor', {\n\t\t\tfontFamily: 'foo',\n\t\t\tfontSize: 9\n\t\t});\n\t\tawait configurationService.setUserConfiguration('terminal', {\n\t\t\tintegrated: {\n\t\t\t\tfontFamily: 'bar',\n\t\t\t\tfontSize: 10\n\t\t\t}\n\t\t});\n\t\tlet configHelper = new TerminalConfigHelper(configurationService, null!, null!, null!, null!, null!);\n\t\tconfigHelper.panelContainer = fixture;\n\t\tassert.strictEqual(configHelper.getFont().fontSize, 10, 'terminal.integrated.fontSize should be selected over editor.fontSize');\n\n\t\tawait configurationService.setUserConfiguration('editor', {\n\t\t\tfontFamily: 'foo'\n\t\t});\n\t\tawait configurationService.setUserConfiguration('terminal', {\n\t\t\tintegrated: {\n\t\t\t\tfontFamily: null,\n\t\t\t\tfontSize: 0\n\t\t\t}\n\t\t});\n\t\tconfigHelper = new TerminalConfigHelper(configurationService, null!, null!, null!, null!, null!);\n\t\tconfigHelper.setLinuxDistro(LinuxDistro.Ubuntu);\n\t\tconfigHelper.panelContainer = fixture;\n\t\tassert.strictEqual(configHelper.getFont().fontSize, 8, 'The minimum terminal font size (with adjustment) should be used when terminal.integrated.fontSize less than it');\n\n\t\tconfigHelper = new TerminalConfigHelper(configurationService, null!, null!, null!, null!, null!);\n\t\tconfigHelper.panelContainer = fixture;\n\t\tassert.strictEqual(configHelper.getFont().fontSize, 6, 'The minimum terminal font size should be used when terminal.integrated.fontSize less than it');\n\n\t\tawait configurationService.setUserConfiguration('editor', {\n\t\t\tfontFamily: 'foo'\n\t\t});\n\t\tawait configurationService.setUserConfiguration('terminal', {\n\t\t\tintegrated: {\n\t\t\t\tfontFamily: 0,\n\t\t\t\tfontSize: 1500\n\t\t\t}\n\t\t});\n\t\tconfigHelper = new TerminalConfigHelper(configurationService, null!, null!, null!, null!, null!);\n\t\tconfigHelper.panelContainer = fixture;\n\t\tassert.strictEqual(configHelper.getFont().fontSize, 25, 'The maximum terminal font size should be used when terminal.integrated.fontSize more than it');\n\n\t\tawait configurationService.setUserConfiguration('editor', {\n\t\t\tfontFamily: 'foo'\n\t\t});\n\t\tawait configurationService.setUserConfiguration('terminal', {\n\t\t\tintegrated: {\n\t\t\t\tfontFamily: 0,\n\t\t\t\tfontSize: null\n\t\t\t}\n\t\t});\n\t\tconfigHelper = new TerminalConfigHelper(configurationService, null!, null!, null!, null!, null!);\n\t\tconfigHelper.setLinuxDistro(LinuxDistro.Ubuntu);\n\t\tconfigHelper.panelContainer = fixture;\n\t\tassert.strictEqual(configHelper.getFont().fontSize, EDITOR_FONT_DEFAULTS.fontSize + 2, 'The default editor font size (with adjustment) should be used when terminal.integrated.fontSize is not set');\n\n\t\tconfigHelper = new TerminalConfigHelper(configurationService, null!, null!, null!, null!, null!);\n\t\tconfigHelper.panelContainer = fixture;\n\t\tassert.strictEqual(configHelper.getFont().fontSize, EDITOR_FONT_DEFAULTS.fontSize, 'The default editor font size should be used when terminal.integrated.fontSize is not set');\n\t});\n\n\ttest('TerminalConfigHelper - getFont lineHeight', async () => {\n\t\tconst configurationService = new TestConfigurationService();\n\n\t\tawait configurationService.setUserConfiguration('editor', {\n\t\t\tfontFamily: 'foo',\n\t\t\tlineHeight: 1\n\t\t});\n\t\tawait configurationService.setUserConfiguration('terminal', {\n\t\t\tintegrated: {\n\t\t\t\tfontFamily: 0,\n\t\t\t\tlineHeight: 2\n\t\t\t}\n\t\t});\n\t\tlet configHelper = new TerminalConfigHelper(configurationService, null!, null!, null!, null!, null!);\n\t\tconfigHelper.panelContainer = fixture;\n\t\tassert.strictEqual(configHelper.getFont().lineHeight, 2, 'terminal.integrated.lineHeight should be selected over editor.lineHeight');\n\n\t\tawait configurationService.setUserConfiguration('editor', {\n\t\t\tfontFamily: 'foo',\n\t\t\tlineHeight: 1\n\t\t});\n\t\tawait configurationService.setUserConfiguration('terminal', {\n\t\t\tintegrated: {\n\t\t\t\tfontFamily: 0,\n\t\t\t\tlineHeight: 0\n\t\t\t}\n\t\t});\n\t\tconfigHelper = new TerminalConfigHelper(configurationService, null!, null!, null!, null!, null!);\n\t\tconfigHelper.panelContainer = fixture;\n\t\tassert.strictEqual(configHelper.getFont().lineHeight, 1, 'editor.lineHeight should be 1 when terminal.integrated.lineHeight not set');\n\t});\n\n\ttest('TerminalConfigHelper - isMonospace monospace', async function () {\n\t\tconst configurationService = new TestConfigurationService();\n\t\tawait configurationService.setUserConfiguration('terminal', {\n\t\t\tintegrated: {\n\t\t\t\tfontFamily: 'monospace'\n\t\t\t}\n\t\t});\n\n\t\tlet configHelper = new TerminalConfigHelper(configurationService, null!, null!, null!, null!, null!);\n\t\tconfigHelper.panelContainer = fixture;\n\t\tassert.strictEqual(configHelper.configFontIsMonospace(), true, 'monospace is monospaced');\n\t});\n\n\ttest('TerminalConfigHelper - isMonospace sans-serif', async () => {\n\t\tconst configurationService = new TestConfigurationService();\n\t\tawait configurationService.setUserConfiguration('terminal', {\n\t\t\tintegrated: {\n\t\t\t\tfontFamily: 'sans-serif'\n\t\t\t}\n\t\t});\n\t\tlet configHelper = new TerminalConfigHelper(configurationService, null!, null!, null!, null!, null!);\n\t\tconfigHelper.panelContainer = fixture;\n\t\tassert.strictEqual(configHelper.configFontIsMonospace(), false, 'sans-serif is not monospaced');\n\t});\n\n\ttest('TerminalConfigHelper - isMonospace serif', async () => {\n\t\tconst configurationService = new TestConfigurationService();\n\t\tawait configurationService.setUserConfiguration('terminal', {\n\t\t\tintegrated: {\n\t\t\t\tfontFamily: 'serif'\n\t\t\t}\n\t\t});\n\t\tlet configHelper = new TerminalConfigHelper(configurationService, null!, null!, null!, null!, null!);\n\t\tconfigHelper.panelContainer = fixture;\n\t\tassert.strictEqual(configHelper.configFontIsMonospace(), false, 'serif is not monospaced');\n\t});\n\n\ttest('TerminalConfigHelper - isMonospace monospace falls back to editor.fontFamily', async () => {\n\t\tconst configurationService = new TestConfigurationService();\n\t\tawait configurationService.setUserConfiguration('editor', {\n\t\t\tfontFamily: 'monospace'\n\t\t});\n\t\tawait configurationService.setUserConfiguration('terminal', {\n\t\t\tintegrated: {\n\t\t\t\tfontFamily: null\n\t\t\t}\n\t\t});\n\n\t\tlet configHelper = new TerminalConfigHelper(configurationService, null!, null!, null!, null!, null!);\n\t\tconfigHelper.panelContainer = fixture;\n\t\tassert.strictEqual(configHelper.configFontIsMonospace(), true, 'monospace is monospaced');\n\t});\n\n\ttest('TerminalConfigHelper - isMonospace sans-serif falls back to editor.fontFamily', async () => {\n\t\tconst configurationService = new TestConfigurationService();\n\t\tawait configurationService.setUserConfiguration('editor', {\n\t\t\tfontFamily: 'sans-serif'\n\t\t});\n\t\tawait configurationService.setUserConfiguration('terminal', {\n\t\t\tintegrated: {\n\t\t\t\tfontFamily: null\n\t\t\t}\n\t\t});\n\n\t\tlet configHelper = new TerminalConfigHelper(configurationService, null!, null!, null!, null!, null!);\n\t\tconfigHelper.panelContainer = fixture;\n\t\tassert.strictEqual(configHelper.configFontIsMonospace(), false, 'sans-serif is not monospaced');\n\t});\n\n\ttest('TerminalConfigHelper - isMonospace serif falls back to editor.fontFamily', async () => {\n\t\tconst configurationService = new TestConfigurationService();\n\t\tawait configurationService.setUserConfiguration('editor', {\n\t\t\tfontFamily: 'serif'\n\t\t});\n\t\tawait configurationService.setUserConfiguration('terminal', {\n\t\t\tintegrated: {\n\t\t\t\tfontFamily: null\n\t\t\t}\n\t\t});\n\n\t\tlet configHelper = new TerminalConfigHelper(configurationService, null!, null!, null!, null!, null!);\n\t\tconfigHelper.panelContainer = fixture;\n\t\tassert.strictEqual(configHelper.configFontIsMonospace(), false, 'serif is not monospaced');\n\t});\n});\n"]}