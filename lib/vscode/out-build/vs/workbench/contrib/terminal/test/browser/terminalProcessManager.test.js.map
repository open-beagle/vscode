{"version":3,"file":"terminalProcessManager.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/terminal/test/browser/terminalProcessManager.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { strictEqual } from 'assert';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { TerminalConfigHelper } from 'vs/workbench/contrib/terminal/browser/terminalConfigHelper';\nimport { TerminalProcessManager } from 'vs/workbench/contrib/terminal/browser/terminalProcessManager';\nimport { TestConfigurationService } from 'vs/platform/configuration/test/common/testConfigurationService';\nimport { ITestInstantiationService, TestProductService, TestTerminalProfileResolverService, workbenchInstantiationService } from 'vs/workbench/test/browser/workbenchTestServices';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IEnvironmentVariableService } from 'vs/workbench/contrib/terminal/common/environmentVariable';\nimport { EnvironmentVariableService } from 'vs/workbench/contrib/terminal/common/environmentVariableService';\nimport { Schemas } from 'vs/base/common/network';\nimport { URI } from 'vs/base/common/uri';\nimport { ITerminalProfileResolverService } from 'vs/workbench/contrib/terminal/common/terminal';\n\nsuite('Workbench - TerminalProcessManager', () => {\n\tlet instantiationService: ITestInstantiationService;\n\tlet manager: TerminalProcessManager;\n\n\tsetup(async () => {\n\t\tinstantiationService = workbenchInstantiationService();\n\t\tconst configurationService = new TestConfigurationService();\n\t\tawait configurationService.setUserConfiguration('editor', { fontFamily: 'foo' });\n\t\tawait configurationService.setUserConfiguration('terminal', {\n\t\t\tintegrated: {\n\t\t\t\tfontFamily: 'bar',\n\t\t\t\tenablePersistentSessions: true\n\t\t\t}\n\t\t});\n\t\tinstantiationService.stub(IConfigurationService, configurationService);\n\t\tinstantiationService.stub(IProductService, TestProductService);\n\t\tinstantiationService.stub(IEnvironmentVariableService, instantiationService.createInstance(EnvironmentVariableService));\n\t\tinstantiationService.stub(ITerminalProfileResolverService, TestTerminalProfileResolverService);\n\n\t\tconst configHelper = instantiationService.createInstance(TerminalConfigHelper);\n\t\tmanager = instantiationService.createInstance(TerminalProcessManager, 1, configHelper);\n\t});\n\n\tsuite('process persistence', () => {\n\t\tsuite('local', () => {\n\t\t\ttest('regular terminal should persist', async () => {\n\t\t\t\tconst p = await manager.createProcess({\n\t\t\t\t}, 1, 1, false);\n\t\t\t\tstrictEqual(p, undefined);\n\t\t\t\tstrictEqual(manager.shouldPersist, true);\n\t\t\t});\n\t\t\ttest('task terminal should not persist', async () => {\n\t\t\t\tconst p = await manager.createProcess({\n\t\t\t\t\tisFeatureTerminal: true\n\t\t\t\t}, 1, 1, false);\n\t\t\t\tstrictEqual(p, undefined);\n\t\t\t\tstrictEqual(manager.shouldPersist, false);\n\t\t\t});\n\t\t});\n\t\tsuite('remote', () => {\n\t\t\tconst remoteCwd = URI.from({\n\t\t\t\tscheme: Schemas.vscodeRemote,\n\t\t\t\tpath: 'test/cwd'\n\t\t\t});\n\n\t\t\ttest('regular terminal should persist', async () => {\n\t\t\t\tconst p = await manager.createProcess({\n\t\t\t\t\tcwd: remoteCwd\n\t\t\t\t}, 1, 1, false);\n\t\t\t\tstrictEqual(p, undefined);\n\t\t\t\tstrictEqual(manager.shouldPersist, true);\n\t\t\t});\n\t\t\ttest('task terminal should not persist', async () => {\n\t\t\t\tconst p = await manager.createProcess({\n\t\t\t\t\tisFeatureTerminal: true,\n\t\t\t\t\tcwd: remoteCwd\n\t\t\t\t}, 1, 1, false);\n\t\t\t\tstrictEqual(p, undefined);\n\t\t\t\tstrictEqual(manager.shouldPersist, false);\n\t\t\t});\n\t\t});\n\t});\n});\n"]}