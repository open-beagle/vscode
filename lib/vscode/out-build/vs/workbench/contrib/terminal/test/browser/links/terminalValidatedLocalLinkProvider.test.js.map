{"version":3,"file":"terminalValidatedLocalLinkProvider.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/terminal/test/browser/links/terminalValidatedLocalLinkProvider.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAYhG,MAAM,SAAS,GAAG;QACjB,MAAM;QACN,OAAO;QACP,OAAO;QACP,QAAQ;QACR,UAAU;QACV,eAAe;QACf,SAAS;QACT,cAAc;KACd,CAAC;IAEF,MAAM,YAAY,GAAG;QACpB,SAAS;QACT,gBAAgB;QAChB,QAAQ;QACR,QAAQ;QACR,OAAO;QACP,SAAS;QACT,QAAQ;QACR,OAAO;QACP,YAAY;QACZ,cAAc;QACd,mBAAmB;QACnB,kBAAkB;QAClB,SAAS;QACT,SAAS;QACT,UAAU;QACV,eAAe;KACf,CAAC;IAQF,MAAM,oBAAoB,GAAqB;QAC9C,EAAE,SAAS,EAAE,KAAK,EAAE;QACpB,EAAE,SAAS,EAAE,iBAAiB,EAAE,IAAI,EAAE,GAAG,EAAE;QAC3C,EAAE,SAAS,EAAE,6BAA6B,EAAE,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE;QACpE,EAAE,SAAS,EAAE,cAAc,EAAE,IAAI,EAAE,GAAG,EAAE;QACxC,EAAE,SAAS,EAAE,0BAA0B,EAAE,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE;QACjE,EAAE,SAAS,EAAE,UAAU,EAAE,IAAI,EAAE,GAAG,EAAE;QACpC,EAAE,SAAS,EAAE,WAAW,EAAE,IAAI,EAAE,GAAG,EAAE;QACrC,EAAE,SAAS,EAAE,cAAc,EAAE,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE;QACrD,EAAE,SAAS,EAAE,eAAe,EAAE,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE;QACtD,EAAE,SAAS,EAAE,eAAe,EAAE,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE;QACtD,EAAE,SAAS,EAAE,gBAAgB,EAAE,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE;QACvD,EAAE,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,EAAE;QACnC,EAAE,SAAS,EAAE,aAAa,EAAE,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE;QACpD,EAAE,SAAS,EAAE,UAAU,EAAE,IAAI,EAAE,GAAG,EAAE;QACpC,EAAE,SAAS,EAAE,WAAW,EAAE,IAAI,EAAE,GAAG,EAAE;QACrC,EAAE,SAAS,EAAE,cAAc,EAAE,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE;QACrD,EAAE,SAAS,EAAE,eAAe,EAAE,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE;QACtD,EAAE,SAAS,EAAE,eAAe,EAAE,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE;QACtD,EAAE,SAAS,EAAE,gBAAgB,EAAE,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE;QACvD,EAAE,SAAS,EAAE,UAAU,EAAE,IAAI,EAAE,GAAG,EAAE;KACpC,CAAC;IAEF,KAAK,CAAC,gDAAgD,EAAE,GAAG,EAAE;QAC5D,IAAI,oBAA8C,CAAC;QAEnD,KAAK,CAAC,GAAG,EAAE;YACV,oBAAoB,GAAG,IAAI,mDAAwB,EAAE,CAAC;YACtD,oBAAoB,CAAC,IAAI,CAAC,qCAAqB,EAAE,mDAAwB,CAAC,CAAC;QAC5E,CAAC,CAAC,CAAC;QAEH,KAAK,UAAU,UAAU,CAAC,IAAY,EAAE,EAAmB,EAAE,QAAuD;YACnH,MAAM,KAAK,GAAG,IAAI,gBAAQ,EAAE,CAAC;YAC7B,MAAM,QAAQ,GAAG,oBAAoB,CAAC,cAAc,CAAC,uEAAkC,EAAE,KAAK,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,CAAS,EAAE,EAAoE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,SAAG,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,WAAW,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAE/Q,mDAAmD;YACnD,MAAM,IAAI,OAAO,CAAO,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;YAEnD,gCAAgC;YAChC,MAAM,KAAK,GAAG,CAAC,MAAM,IAAI,OAAO,CAAsB,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAE,CAAC;YAC1F,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;YAClD,MAAM,MAAM,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;gBAC9B,IAAI,EAAE,CAAC,CAAC,IAAI;gBACZ,KAAK,EAAE,CAAC,CAAC,KAAK;aACd,CAAC,CAAC,CAAC;YACJ,MAAM,eAAe,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;gBAC1C,IAAI,EAAE,CAAC,CAAC,IAAI;gBACZ,KAAK,EAAE;oBACN,KAAK,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;oBAC7C,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;iBAC3C;aACD,CAAC,CAAC,CAAC;YACJ,MAAM,CAAC,eAAe,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;QACjD,CAAC;QAED,KAAK,CAAC,aAAa,EAAE,GAAG,EAAE;YACzB,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;gBAC5B,KAAK,CAAC,SAAS,QAAQ,EAAE,EAAE,GAAG,EAAE;oBAC/B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,oBAAoB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;wBACrD,MAAM,UAAU,GAAG,oBAAoB,CAAC,CAAC,CAAC,CAAC;wBAC3C,IAAI,CAAC,WAAW,UAAU,CAAC,SAAS,EAAE,EAAE,KAAK,IAAI,EAAE;4BAClD,MAAM,aAAa,GAAG,CAAA,GAAA,gBAAM,CAAA,CAAC,UAAU,CAAC,SAAS,EAAE,QAAQ,EAAE,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC;4BACjG,MAAM,UAAU,CAAC,aAAa,iBAAyB,CAAC,EAAE,IAAI,EAAE,aAAa,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;4BAC9H,MAAM,UAAU,CAAC,IAAI,aAAa,GAAG,iBAAyB,CAAC,EAAE,IAAI,EAAE,aAAa,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;4BACzI,MAAM,UAAU,CAAC,IAAI,aAAa,GAAG,iBAAyB,CAAC,EAAE,IAAI,EAAE,aAAa,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;4BACzI,MAAM,UAAU,CAAC,IAAI,aAAa,GAAG,iBAAyB,CAAC,EAAE,IAAI,EAAE,aAAa,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;wBAC1I,CAAC,CAAC,CAAC;qBACH;gBACF,CAAC,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,gBAAgB,EAAE,KAAK,IAAI,EAAE;gBACjC,MAAM,UAAU,CAAC,gCAAgC,iBAAyB;oBACzE,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE;oBAC9C,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE;iBAC9C,CAAC,CAAC;gBACH,MAAM,UAAU,CAAC,eAAe,iBAAyB,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBAC1G,MAAM,UAAU,CAAC,eAAe,iBAAyB,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAC3G,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,KAAK,CAAC,SAAS,EAAE,GAAG,EAAE;YACrB,YAAY,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;gBAC/B,KAAK,CAAC,SAAS,QAAQ,GAAG,EAAE,GAAG,EAAE;oBAChC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,oBAAoB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;wBACrD,MAAM,UAAU,GAAG,oBAAoB,CAAC,CAAC,CAAC,CAAC;wBAC3C,IAAI,CAAC,WAAW,UAAU,CAAC,SAAS,EAAE,EAAE,KAAK,IAAI,EAAE;4BAClD,MAAM,aAAa,GAAG,CAAA,GAAA,gBAAM,CAAA,CAAC,UAAU,CAAC,SAAS,EAAE,QAAQ,EAAE,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC;4BACjG,MAAM,UAAU,CAAC,aAAa,mBAA2B,CAAC,EAAE,IAAI,EAAE,aAAa,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;4BAChI,MAAM,UAAU,CAAC,IAAI,aAAa,GAAG,mBAA2B,CAAC,EAAE,IAAI,EAAE,aAAa,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;4BAC3I,MAAM,UAAU,CAAC,IAAI,aAAa,GAAG,mBAA2B,CAAC,EAAE,IAAI,EAAE,aAAa,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;4BAC3I,MAAM,UAAU,CAAC,IAAI,aAAa,GAAG,mBAA2B,CAAC,EAAE,IAAI,EAAE,aAAa,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;wBAC5I,CAAC,CAAC,CAAC;qBACH;gBACF,CAAC,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,gBAAgB,EAAE,KAAK,IAAI,EAAE;gBACjC,MAAM,UAAU,CAAC,gCAAgC,iBAAyB;oBACzE,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE;oBAC9C,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE;iBAC9C,CAAC,CAAC;gBACH,MAAM,UAAU,CAAC,eAAe,iBAAyB,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBAC1G,MAAM,UAAU,CAAC,eAAe,iBAAyB,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAC3G,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;YACvD,MAAM,UAAU,CAAC,aAAa,iBAAyB;gBACtD,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE;gBAC1C,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE;aAC3C,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { TerminalValidatedLocalLinkProvider } from 'vs/workbench/contrib/terminal/browser/links/terminalValidatedLocalLinkProvider';\nimport { Terminal, ILink } from 'xterm';\nimport { OperatingSystem } from 'vs/base/common/platform';\nimport { format } from 'vs/base/common/strings';\nimport { URI } from 'vs/base/common/uri';\nimport { TestConfigurationService } from 'vs/platform/configuration/test/common/testConfigurationService';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { TestInstantiationService } from 'vs/platform/instantiation/test/common/instantiationServiceMock';\n\nconst unixLinks = [\n\t'/foo',\n\t'~/foo',\n\t'./foo',\n\t'../foo',\n\t'/foo/bar',\n\t'/foo/bar+more',\n\t'foo/bar',\n\t'foo/bar+more',\n];\n\nconst windowsLinks = [\n\t'c:\\\\foo',\n\t'\\\\\\\\?\\\\c:\\\\foo',\n\t'c:/foo',\n\t'.\\\\foo',\n\t'./foo',\n\t'..\\\\foo',\n\t'~\\\\foo',\n\t'~/foo',\n\t'c:/foo/bar',\n\t'c:\\\\foo\\\\bar',\n\t'c:\\\\foo\\\\bar+more',\n\t'c:\\\\foo/bar\\\\baz',\n\t'foo/bar',\n\t'foo/bar',\n\t'foo\\\\bar',\n\t'foo\\\\bar+more',\n];\n\ninterface LinkFormatInfo {\n\turlFormat: string;\n\tline?: string;\n\tcolumn?: string;\n}\n\nconst supportedLinkFormats: LinkFormatInfo[] = [\n\t{ urlFormat: '{0}' },\n\t{ urlFormat: '{0} on line {1}', line: '5' },\n\t{ urlFormat: '{0} on line {1}, column {2}', line: '5', column: '3' },\n\t{ urlFormat: '{0}:line {1}', line: '5' },\n\t{ urlFormat: '{0}:line {1}, column {2}', line: '5', column: '3' },\n\t{ urlFormat: '{0}({1})', line: '5' },\n\t{ urlFormat: '{0} ({1})', line: '5' },\n\t{ urlFormat: '{0}({1},{2})', line: '5', column: '3' },\n\t{ urlFormat: '{0} ({1},{2})', line: '5', column: '3' },\n\t{ urlFormat: '{0}({1}, {2})', line: '5', column: '3' },\n\t{ urlFormat: '{0} ({1}, {2})', line: '5', column: '3' },\n\t{ urlFormat: '{0}:{1}', line: '5' },\n\t{ urlFormat: '{0}:{1}:{2}', line: '5', column: '3' },\n\t{ urlFormat: '{0}[{1}]', line: '5' },\n\t{ urlFormat: '{0} [{1}]', line: '5' },\n\t{ urlFormat: '{0}[{1},{2}]', line: '5', column: '3' },\n\t{ urlFormat: '{0} [{1},{2}]', line: '5', column: '3' },\n\t{ urlFormat: '{0}[{1}, {2}]', line: '5', column: '3' },\n\t{ urlFormat: '{0} [{1}, {2}]', line: '5', column: '3' },\n\t{ urlFormat: '{0}\",{1}', line: '5' }\n];\n\nsuite('Workbench - TerminalValidatedLocalLinkProvider', () => {\n\tlet instantiationService: TestInstantiationService;\n\n\tsetup(() => {\n\t\tinstantiationService = new TestInstantiationService();\n\t\tinstantiationService.stub(IConfigurationService, TestConfigurationService);\n\t});\n\n\tasync function assertLink(text: string, os: OperatingSystem, expected: { text: string, range: [number, number][] }[]) {\n\t\tconst xterm = new Terminal();\n\t\tconst provider = instantiationService.createInstance(TerminalValidatedLocalLinkProvider, xterm, os, () => { }, () => { }, () => { }, (_: string, cb: (result: { uri: URI, isDirectory: boolean } | undefined) => void) => { cb({ uri: URI.file('/'), isDirectory: false }); });\n\n\t\t// Write the text and wait for the parser to finish\n\t\tawait new Promise<void>(r => xterm.write(text, r));\n\n\t\t// Ensure all links are provided\n\t\tconst links = (await new Promise<ILink[] | undefined>(r => provider.provideLinks(1, r)))!;\n\t\tassert.strictEqual(links.length, expected.length);\n\t\tconst actual = links.map(e => ({\n\t\t\ttext: e.text,\n\t\t\trange: e.range\n\t\t}));\n\t\tconst expectedVerbose = expected.map(e => ({\n\t\t\ttext: e.text,\n\t\t\trange: {\n\t\t\t\tstart: { x: e.range[0][0], y: e.range[0][1] },\n\t\t\t\tend: { x: e.range[1][0], y: e.range[1][1] },\n\t\t\t}\n\t\t}));\n\t\tassert.deepStrictEqual(actual, expectedVerbose);\n\t}\n\n\tsuite('Linux/macOS', () => {\n\t\tunixLinks.forEach(baseLink => {\n\t\t\tsuite(`Link: ${baseLink}`, () => {\n\t\t\t\tfor (let i = 0; i < supportedLinkFormats.length; i++) {\n\t\t\t\t\tconst linkFormat = supportedLinkFormats[i];\n\t\t\t\t\ttest(`Format: ${linkFormat.urlFormat}`, async () => {\n\t\t\t\t\t\tconst formattedLink = format(linkFormat.urlFormat, baseLink, linkFormat.line, linkFormat.column);\n\t\t\t\t\t\tawait assertLink(formattedLink, OperatingSystem.Linux, [{ text: formattedLink, range: [[1, 1], [formattedLink.length, 1]] }]);\n\t\t\t\t\t\tawait assertLink(` ${formattedLink} `, OperatingSystem.Linux, [{ text: formattedLink, range: [[2, 1], [formattedLink.length + 1, 1]] }]);\n\t\t\t\t\t\tawait assertLink(`(${formattedLink})`, OperatingSystem.Linux, [{ text: formattedLink, range: [[2, 1], [formattedLink.length + 1, 1]] }]);\n\t\t\t\t\t\tawait assertLink(`[${formattedLink}]`, OperatingSystem.Linux, [{ text: formattedLink, range: [[2, 1], [formattedLink.length + 1, 1]] }]);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\ttest('Git diff links', async () => {\n\t\t\tawait assertLink(`diff --git a/foo/bar b/foo/bar`, OperatingSystem.Linux, [\n\t\t\t\t{ text: 'foo/bar', range: [[14, 1], [20, 1]] },\n\t\t\t\t{ text: 'foo/bar', range: [[24, 1], [30, 1]] }\n\t\t\t]);\n\t\t\tawait assertLink(`--- a/foo/bar`, OperatingSystem.Linux, [{ text: 'foo/bar', range: [[7, 1], [13, 1]] }]);\n\t\t\tawait assertLink(`+++ b/foo/bar`, OperatingSystem.Linux, [{ text: 'foo/bar', range: [[7, 1], [13, 1]] }]);\n\t\t});\n\t});\n\n\tsuite('Windows', () => {\n\t\twindowsLinks.forEach(baseLink => {\n\t\t\tsuite(`Link \"${baseLink}\"`, () => {\n\t\t\t\tfor (let i = 0; i < supportedLinkFormats.length; i++) {\n\t\t\t\t\tconst linkFormat = supportedLinkFormats[i];\n\t\t\t\t\ttest(`Format: ${linkFormat.urlFormat}`, async () => {\n\t\t\t\t\t\tconst formattedLink = format(linkFormat.urlFormat, baseLink, linkFormat.line, linkFormat.column);\n\t\t\t\t\t\tawait assertLink(formattedLink, OperatingSystem.Windows, [{ text: formattedLink, range: [[1, 1], [formattedLink.length, 1]] }]);\n\t\t\t\t\t\tawait assertLink(` ${formattedLink} `, OperatingSystem.Windows, [{ text: formattedLink, range: [[2, 1], [formattedLink.length + 1, 1]] }]);\n\t\t\t\t\t\tawait assertLink(`(${formattedLink})`, OperatingSystem.Windows, [{ text: formattedLink, range: [[2, 1], [formattedLink.length + 1, 1]] }]);\n\t\t\t\t\t\tawait assertLink(`[${formattedLink}]`, OperatingSystem.Windows, [{ text: formattedLink, range: [[2, 1], [formattedLink.length + 1, 1]] }]);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\ttest('Git diff links', async () => {\n\t\t\tawait assertLink(`diff --git a/foo/bar b/foo/bar`, OperatingSystem.Linux, [\n\t\t\t\t{ text: 'foo/bar', range: [[14, 1], [20, 1]] },\n\t\t\t\t{ text: 'foo/bar', range: [[24, 1], [30, 1]] }\n\t\t\t]);\n\t\t\tawait assertLink(`--- a/foo/bar`, OperatingSystem.Linux, [{ text: 'foo/bar', range: [[7, 1], [13, 1]] }]);\n\t\t\tawait assertLink(`+++ b/foo/bar`, OperatingSystem.Linux, [{ text: 'foo/bar', range: [[7, 1], [13, 1]] }]);\n\t\t});\n\t});\n\n\ttest('should support multiple link results', async () => {\n\t\tawait assertLink('./foo ./bar', OperatingSystem.Linux, [\n\t\t\t{ range: [[1, 1], [5, 1]], text: './foo' },\n\t\t\t{ range: [[7, 1], [11, 1]], text: './bar' }\n\t\t]);\n\t});\n});\n"]}