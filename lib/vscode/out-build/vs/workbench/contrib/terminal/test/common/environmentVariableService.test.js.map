{"version":3,"file":"environmentVariableService.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/terminal/test/common/environmentVariableService.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { deepStrictEqual } from 'assert';\nimport { TestExtensionService, TestStorageService } from 'vs/workbench/test/common/workbenchTestServices';\nimport { EnvironmentVariableService } from 'vs/workbench/contrib/terminal/common/environmentVariableService';\nimport { EnvironmentVariableMutatorType, IEnvironmentVariableMutator } from 'vs/workbench/contrib/terminal/common/environmentVariable';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { TestInstantiationService } from 'vs/platform/instantiation/test/common/instantiationServiceMock';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { Emitter } from 'vs/base/common/event';\nimport { IProcessEnvironment } from 'vs/base/common/platform';\n\nclass TestEnvironmentVariableService extends EnvironmentVariableService {\n\tpersistCollections(): void { this._persistCollections(); }\n\tnotifyCollectionUpdates(): void { this._notifyCollectionUpdates(); }\n}\n\nsuite('EnvironmentVariable - EnvironmentVariableService', () => {\n\tlet instantiationService: TestInstantiationService;\n\tlet environmentVariableService: TestEnvironmentVariableService;\n\tlet storageService: TestStorageService;\n\tlet changeExtensionsEvent: Emitter<void>;\n\n\tsetup(() => {\n\t\tchangeExtensionsEvent = new Emitter<void>();\n\n\t\tinstantiationService = new TestInstantiationService();\n\t\tinstantiationService.stub(IExtensionService, TestExtensionService);\n\t\tstorageService = new TestStorageService();\n\t\tinstantiationService.stub(IStorageService, storageService);\n\t\tinstantiationService.stub(IExtensionService, TestExtensionService);\n\t\tinstantiationService.stub(IExtensionService, 'onDidChangeExtensions', changeExtensionsEvent.event);\n\t\tinstantiationService.stub(IExtensionService, 'getExtensions', [\n\t\t\t{ identifier: { value: 'ext1' } },\n\t\t\t{ identifier: { value: 'ext2' } },\n\t\t\t{ identifier: { value: 'ext3' } }\n\t\t]);\n\n\t\tenvironmentVariableService = instantiationService.createInstance(TestEnvironmentVariableService);\n\t});\n\n\ttest('should persist collections to the storage service and be able to restore from them', () => {\n\t\tconst collection = new Map<string, IEnvironmentVariableMutator>();\n\t\tcollection.set('A', { value: 'a', type: EnvironmentVariableMutatorType.Replace });\n\t\tcollection.set('B', { value: 'b', type: EnvironmentVariableMutatorType.Append });\n\t\tcollection.set('C', { value: 'c', type: EnvironmentVariableMutatorType.Prepend });\n\t\tenvironmentVariableService.set('ext1', { map: collection, persistent: true });\n\t\tdeepStrictEqual([...environmentVariableService.mergedCollection.map.entries()], [\n\t\t\t['A', [{ extensionIdentifier: 'ext1', type: EnvironmentVariableMutatorType.Replace, value: 'a' }]],\n\t\t\t['B', [{ extensionIdentifier: 'ext1', type: EnvironmentVariableMutatorType.Append, value: 'b' }]],\n\t\t\t['C', [{ extensionIdentifier: 'ext1', type: EnvironmentVariableMutatorType.Prepend, value: 'c' }]]\n\t\t]);\n\n\t\t// Persist with old service, create a new service with the same storage service to verify restore\n\t\tenvironmentVariableService.persistCollections();\n\t\tconst service2: TestEnvironmentVariableService = instantiationService.createInstance(TestEnvironmentVariableService);\n\t\tdeepStrictEqual([...service2.mergedCollection.map.entries()], [\n\t\t\t['A', [{ extensionIdentifier: 'ext1', type: EnvironmentVariableMutatorType.Replace, value: 'a' }]],\n\t\t\t['B', [{ extensionIdentifier: 'ext1', type: EnvironmentVariableMutatorType.Append, value: 'b' }]],\n\t\t\t['C', [{ extensionIdentifier: 'ext1', type: EnvironmentVariableMutatorType.Prepend, value: 'c' }]]\n\t\t]);\n\t});\n\n\tsuite('mergedCollection', () => {\n\t\ttest('should overwrite any other variable with the first extension that replaces', () => {\n\t\t\tconst collection1 = new Map<string, IEnvironmentVariableMutator>();\n\t\t\tconst collection2 = new Map<string, IEnvironmentVariableMutator>();\n\t\t\tconst collection3 = new Map<string, IEnvironmentVariableMutator>();\n\t\t\tcollection1.set('A', { value: 'a1', type: EnvironmentVariableMutatorType.Append });\n\t\t\tcollection1.set('B', { value: 'b1', type: EnvironmentVariableMutatorType.Replace });\n\t\t\tcollection2.set('A', { value: 'a2', type: EnvironmentVariableMutatorType.Replace });\n\t\t\tcollection2.set('B', { value: 'b2', type: EnvironmentVariableMutatorType.Append });\n\t\t\tcollection3.set('A', { value: 'a3', type: EnvironmentVariableMutatorType.Prepend });\n\t\t\tcollection3.set('B', { value: 'b3', type: EnvironmentVariableMutatorType.Replace });\n\t\t\tenvironmentVariableService.set('ext1', { map: collection1, persistent: true });\n\t\t\tenvironmentVariableService.set('ext2', { map: collection2, persistent: true });\n\t\t\tenvironmentVariableService.set('ext3', { map: collection3, persistent: true });\n\t\t\tdeepStrictEqual([...environmentVariableService.mergedCollection.map.entries()], [\n\t\t\t\t['A', [\n\t\t\t\t\t{ extensionIdentifier: 'ext2', type: EnvironmentVariableMutatorType.Replace, value: 'a2' },\n\t\t\t\t\t{ extensionIdentifier: 'ext1', type: EnvironmentVariableMutatorType.Append, value: 'a1' }\n\t\t\t\t]],\n\t\t\t\t['B', [{ extensionIdentifier: 'ext1', type: EnvironmentVariableMutatorType.Replace, value: 'b1' }]]\n\t\t\t]);\n\t\t});\n\n\t\ttest('should correctly apply the environment values from multiple extension contributions in the correct order', () => {\n\t\t\tconst collection1 = new Map<string, IEnvironmentVariableMutator>();\n\t\t\tconst collection2 = new Map<string, IEnvironmentVariableMutator>();\n\t\t\tconst collection3 = new Map<string, IEnvironmentVariableMutator>();\n\t\t\tcollection1.set('A', { value: ':a1', type: EnvironmentVariableMutatorType.Append });\n\t\t\tcollection2.set('A', { value: 'a2:', type: EnvironmentVariableMutatorType.Prepend });\n\t\t\tcollection3.set('A', { value: 'a3', type: EnvironmentVariableMutatorType.Replace });\n\t\t\tenvironmentVariableService.set('ext1', { map: collection1, persistent: true });\n\t\t\tenvironmentVariableService.set('ext2', { map: collection2, persistent: true });\n\t\t\tenvironmentVariableService.set('ext3', { map: collection3, persistent: true });\n\n\t\t\t// The entries should be ordered in the order they are applied\n\t\t\tdeepStrictEqual([...environmentVariableService.mergedCollection.map.entries()], [\n\t\t\t\t['A', [\n\t\t\t\t\t{ extensionIdentifier: 'ext3', type: EnvironmentVariableMutatorType.Replace, value: 'a3' },\n\t\t\t\t\t{ extensionIdentifier: 'ext2', type: EnvironmentVariableMutatorType.Prepend, value: 'a2:' },\n\t\t\t\t\t{ extensionIdentifier: 'ext1', type: EnvironmentVariableMutatorType.Append, value: ':a1' }\n\t\t\t\t]]\n\t\t\t]);\n\n\t\t\t// Verify the entries get applied to the environment as expected\n\t\t\tconst env: IProcessEnvironment = { A: 'foo' };\n\t\t\tenvironmentVariableService.mergedCollection.applyToProcessEnvironment(env);\n\t\t\tdeepStrictEqual(env, { A: 'a2:a3:a1' });\n\t\t});\n\t});\n});\n"]}