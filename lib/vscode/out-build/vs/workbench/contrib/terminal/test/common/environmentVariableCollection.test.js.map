{"version":3,"file":"environmentVariableCollection.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/terminal/test/common/environmentVariableCollection.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAQhG,KAAK,CAAC,2DAA2D,EAAE,GAAG,EAAE;QACvE,KAAK,CAAC,MAAM,EAAE,GAAG,EAAE;YAClB,IAAI,CAAC,uEAAuE,EAAE,GAAG,EAAE;gBAClF,MAAM,MAAM,GAAG,IAAI,mEAAmC,CAAC,IAAI,GAAG,CAAC;oBAC9D,CAAC,MAAM,EAAE;4BACR,GAAG,EAAE,CAAA,GAAA,oEAAwC,CAAA,CAAC;gCAC7C,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,oDAA8B,CAAC,OAAO,EAAE,CAAC;6BACpE,CAAC;yBACF,CAAC;oBACF,CAAC,MAAM,EAAE;4BACR,GAAG,EAAE,CAAA,GAAA,oEAAwC,CAAA,CAAC;gCAC7C,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,oDAA8B,CAAC,MAAM,EAAE,CAAC;6BACnE,CAAC;yBACF,CAAC;oBACF,CAAC,MAAM,EAAE;4BACR,GAAG,EAAE,CAAA,GAAA,oEAAwC,CAAA,CAAC;gCAC7C,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,oDAA8B,CAAC,OAAO,EAAE,CAAC;6BACpE,CAAC;yBACF,CAAC;oBACF,CAAC,MAAM,EAAE;4BACR,GAAG,EAAE,CAAA,GAAA,oEAAwC,CAAA,CAAC;gCAC7C,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,oDAA8B,CAAC,MAAM,EAAE,CAAC;6BACnE,CAAC;yBACF,CAAC;iBACF,CAAC,CAAC,CAAC;gBACJ,CAAA,GAAA,wBAAe,CAAA,CAAC,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,EAAE;oBAC1C,CAAC,GAAG,EAAE;4BACL,EAAE,mBAAmB,EAAE,MAAM,EAAE,IAAI,EAAE,oDAA8B,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE;4BACzF,EAAE,mBAAmB,EAAE,MAAM,EAAE,IAAI,EAAE,oDAA8B,CAAC,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE;4BAC1F,EAAE,mBAAmB,EAAE,MAAM,EAAE,IAAI,EAAE,oDAA8B,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE;4BACzF,EAAE,mBAAmB,EAAE,MAAM,EAAE,IAAI,EAAE,oDAA8B,CAAC,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE;yBAC1F,CAAC;iBACF,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,8DAA8D,EAAE,GAAG,EAAE;gBACzE,MAAM,MAAM,GAAG,IAAI,mEAAmC,CAAC,IAAI,GAAG,CAAC;oBAC9D,CAAC,MAAM,EAAE;4BACR,GAAG,EAAE,CAAA,GAAA,oEAAwC,CAAA,CAAC;gCAC7C,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,oDAA8B,CAAC,OAAO,EAAE,CAAC;6BACpE,CAAC;yBACF,CAAC;oBACF,CAAC,MAAM,EAAE;4BACR,GAAG,EAAE,CAAA,GAAA,oEAAwC,CAAA,CAAC;gCAC7C,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,oDAA8B,CAAC,MAAM,EAAE,CAAC;6BACnE,CAAC;yBACF,CAAC;oBACF,CAAC,MAAM,EAAE;4BACR,GAAG,EAAE,CAAA,GAAA,oEAAwC,CAAA,CAAC;gCAC7C,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,oDAA8B,CAAC,OAAO,EAAE,CAAC;6BACpE,CAAC;yBACF,CAAC;oBACF,CAAC,MAAM,EAAE;4BACR,GAAG,EAAE,CAAA,GAAA,oEAAwC,CAAA,CAAC;gCAC7C,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,oDAA8B,CAAC,MAAM,EAAE,CAAC;6BACnE,CAAC;yBACF,CAAC;iBACF,CAAC,CAAC,CAAC;gBACJ,CAAA,GAAA,wBAAe,CAAA,CAAC,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,EAAE;oBAC1C,CAAC,GAAG,EAAE;4BACL,EAAE,mBAAmB,EAAE,MAAM,EAAE,IAAI,EAAE,oDAA8B,CAAC,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE;4BAC1F,EAAE,mBAAmB,EAAE,MAAM,EAAE,IAAI,EAAE,oDAA8B,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE;4BACzF,EAAE,mBAAmB,EAAE,MAAM,EAAE,IAAI,EAAE,oDAA8B,CAAC,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE;yBAC1F,CAAC;iBACF,EAAE,8DAA8D,CAAC,CAAC;YACpE,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,KAAK,CAAC,2BAA2B,EAAE,GAAG,EAAE;YACvC,IAAI,CAAC,+CAA+C,EAAE,GAAG,EAAE;gBAC1D,MAAM,MAAM,GAAG,IAAI,mEAAmC,CAAC,IAAI,GAAG,CAAC;oBAC9D,CAAC,KAAK,EAAE;4BACP,GAAG,EAAE,CAAA,GAAA,oEAAwC,CAAA,CAAC;gCAC7C,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,oDAA8B,CAAC,OAAO,EAAE,CAAC;gCACnE,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,oDAA8B,CAAC,MAAM,EAAE,CAAC;gCAClE,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,oDAA8B,CAAC,OAAO,EAAE,CAAC;6BACnE,CAAC;yBACF,CAAC;iBACF,CAAC,CAAC,CAAC;gBACJ,MAAM,GAAG,GAAwB;oBAChC,CAAC,EAAE,KAAK;oBACR,CAAC,EAAE,KAAK;oBACR,CAAC,EAAE,KAAK;iBACR,CAAC;gBACF,MAAM,CAAC,yBAAyB,CAAC,GAAG,CAAC,CAAC;gBACtC,CAAA,GAAA,wBAAe,CAAA,CAAC,GAAG,EAAE;oBACpB,CAAC,EAAE,GAAG;oBACN,CAAC,EAAE,MAAM;oBACT,CAAC,EAAE,MAAM;iBACT,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,mEAAmE,EAAE,GAAG,EAAE;gBAC9E,MAAM,MAAM,GAAG,IAAI,mEAAmC,CAAC,IAAI,GAAG,CAAC;oBAC9D,CAAC,KAAK,EAAE;4BACP,GAAG,EAAE,CAAA,GAAA,oEAAwC,CAAA,CAAC;gCAC7C,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,oDAA8B,CAAC,OAAO,EAAE,CAAC;gCACnE,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,oDAA8B,CAAC,MAAM,EAAE,CAAC;gCAClE,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,oDAA8B,CAAC,OAAO,EAAE,CAAC;6BACnE,CAAC;yBACF,CAAC;iBACF,CAAC,CAAC,CAAC;gBACJ,MAAM,GAAG,GAAwB,EAAE,CAAC;gBACpC,MAAM,CAAC,yBAAyB,CAAC,GAAG,CAAC,CAAC;gBACtC,CAAA,GAAA,wBAAe,CAAA,CAAC,GAAG,EAAE;oBACpB,CAAC,EAAE,GAAG;oBACN,CAAC,EAAE,GAAG;oBACN,CAAC,EAAE,GAAG;iBACN,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,6DAA6D,EAAE,GAAG,EAAE;gBACxE,MAAM,MAAM,GAAG,IAAI,mEAAmC,CAAC,IAAI,GAAG,CAAC;oBAC9D,CAAC,KAAK,EAAE;4BACP,GAAG,EAAE,CAAA,GAAA,oEAAwC,CAAA,CAAC;gCAC7C,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,oDAA8B,CAAC,OAAO,EAAE,CAAC;gCACnE,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,oDAA8B,CAAC,MAAM,EAAE,CAAC;gCAClE,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,oDAA8B,CAAC,OAAO,EAAE,CAAC;6BACnE,CAAC;yBACF,CAAC;iBACF,CAAC,CAAC,CAAC;gBACJ,MAAM,GAAG,GAAwB;oBAChC,CAAC,EAAE,GAAG;oBACN,CAAC,EAAE,GAAG;oBACN,CAAC,EAAE,GAAG;iBACN,CAAC;gBACF,MAAM,CAAC,yBAAyB,CAAC,GAAG,CAAC,CAAC;gBACtC,IAAI,oBAAS,EAAE;oBACd,CAAA,GAAA,wBAAe,CAAA,CAAC,GAAG,EAAE;wBACpB,CAAC,EAAE,GAAG;wBACN,CAAC,EAAE,IAAI;wBACP,CAAC,EAAE,IAAI;qBACP,CAAC,CAAC;iBACH;qBAAM;oBACN,CAAA,GAAA,wBAAe,CAAA,CAAC,GAAG,EAAE;wBACpB,CAAC,EAAE,GAAG;wBACN,CAAC,EAAE,GAAG;wBACN,CAAC,EAAE,GAAG;wBACN,CAAC,EAAE,GAAG;wBACN,CAAC,EAAE,GAAG;wBACN,CAAC,EAAE,GAAG;qBACN,CAAC,CAAC;iBACH;YACF,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,KAAK,CAAC,MAAM,EAAE,GAAG,EAAE;YAClB,IAAI,CAAC,uDAAuD,EAAE,GAAG,EAAE;gBAClE,MAAM,OAAO,GAAG,IAAI,mEAAmC,CAAC,IAAI,GAAG,CAAC;oBAC/D,CAAC,MAAM,EAAE;4BACR,GAAG,EAAE,CAAA,GAAA,oEAAwC,CAAA,CAAC;gCAC7C,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,oDAA8B,CAAC,OAAO,EAAE,CAAC;6BACnE,CAAC;yBACF,CAAC;iBACF,CAAC,CAAC,CAAC;gBACJ,MAAM,OAAO,GAAG,IAAI,mEAAmC,CAAC,IAAI,GAAG,CAAC;oBAC/D,CAAC,MAAM,EAAE;4BACR,GAAG,EAAE,CAAA,GAAA,oEAAwC,CAAA,CAAC;gCAC7C,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,oDAA8B,CAAC,OAAO,EAAE,CAAC;6BACnE,CAAC;yBACF,CAAC;iBACF,CAAC,CAAC,CAAC;gBACJ,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBACnC,CAAA,GAAA,oBAAW,CAAA,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;YAC9B,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,gEAAgE,EAAE,GAAG,EAAE;gBAC3E,MAAM,OAAO,GAAG,IAAI,mEAAmC,CAAC,IAAI,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;gBACrE,MAAM,OAAO,GAAG,IAAI,mEAAmC,CAAC,IAAI,GAAG,CAAC;oBAC/D,CAAC,MAAM,EAAE;4BACR,GAAG,EAAE,CAAA,GAAA,oEAAwC,CAAA,CAAC;gCAC7C,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,oDAA8B,CAAC,OAAO,EAAE,CAAC;6BACnE,CAAC;yBACF,CAAC;iBACF,CAAC,CAAC,CAAC;gBACJ,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CAAE,CAAC;gBACpC,CAAA,GAAA,oBAAW,CAAA,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;gBAClC,CAAA,GAAA,oBAAW,CAAA,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;gBAClC,MAAM,OAAO,GAAG,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;gBAC1C,CAAA,GAAA,wBAAe,CAAA,CAAC,OAAO,EAAE;oBACxB,CAAC,GAAG,EAAE,CAAC,EAAE,mBAAmB,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,oDAA8B,CAAC,OAAO,EAAE,CAAC,CAAC;iBAClG,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,qDAAqD,EAAE,GAAG,EAAE;gBAChE,MAAM,OAAO,GAAG,IAAI,mEAAmC,CAAC,IAAI,GAAG,CAAC;oBAC/D,CAAC,MAAM,EAAE;4BACR,GAAG,EAAE,CAAA,GAAA,oEAAwC,CAAA,CAAC;gCAC7C,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,oDAA8B,CAAC,OAAO,EAAE,CAAC;6BACnE,CAAC;yBACF,CAAC;iBACF,CAAC,CAAC,CAAC;gBACJ,MAAM,OAAO,GAAG,IAAI,mEAAmC,CAAC,IAAI,GAAG,CAAC;oBAC/D,CAAC,MAAM,EAAE;4BACR,GAAG,EAAE,CAAA,GAAA,oEAAwC,CAAA,CAAC;gCAC7C,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,oDAA8B,CAAC,OAAO,EAAE,CAAC;gCACnE,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,oDAA8B,CAAC,MAAM,EAAE,CAAC;6BAClE,CAAC;yBACF,CAAC;iBACF,CAAC,CAAC,CAAC;gBACJ,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CAAE,CAAC;gBACpC,CAAA,GAAA,oBAAW,CAAA,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;gBAClC,CAAA,GAAA,oBAAW,CAAA,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;gBAClC,MAAM,OAAO,GAAG,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;gBAC1C,CAAA,GAAA,wBAAe,CAAA,CAAC,OAAO,EAAE;oBACxB,CAAC,GAAG,EAAE,CAAC,EAAE,mBAAmB,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,oDAA8B,CAAC,MAAM,EAAE,CAAC,CAAC;iBACjG,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,wDAAwD,EAAE,GAAG,EAAE;gBACnE,MAAM,OAAO,GAAG,IAAI,mEAAmC,CAAC,IAAI,GAAG,CAAC;oBAC/D,CAAC,MAAM,EAAE;4BACR,GAAG,EAAE,CAAA,GAAA,oEAAwC,CAAA,CAAC;gCAC7C,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,oDAA8B,CAAC,OAAO,EAAE,CAAC;6BACpE,CAAC;yBACF,CAAC;iBACF,CAAC,CAAC,CAAC;gBAEJ,MAAM,OAAO,GAAG,IAAI,mEAAmC,CAAC,IAAI,GAAG,CAAC;oBAC/D,CAAC,MAAM,EAAE;4BACR,GAAG,EAAE,CAAA,GAAA,oEAAwC,CAAA,CAAC;gCAC7C,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,oDAA8B,CAAC,MAAM,EAAE,CAAC;6BACnE,CAAC;yBACF,CAAC;oBACF,CAAC,MAAM,EAAE;4BACR,GAAG,EAAE,CAAA,GAAA,oEAAwC,CAAA,CAAC;gCAC7C,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,oDAA8B,CAAC,OAAO,EAAE,CAAC;6BACpE,CAAC;yBACF,CAAC;iBACF,CAAC,CAAC,CAAC;gBACJ,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CAAE,CAAC;gBACpC,CAAA,GAAA,oBAAW,CAAA,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;gBAClC,CAAA,GAAA,oBAAW,CAAA,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;gBAClC,CAAA,GAAA,wBAAe,CAAA,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,EAAE;oBAC1C,CAAC,GAAG,EAAE,CAAC,EAAE,mBAAmB,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,oDAA8B,CAAC,MAAM,EAAE,CAAC,CAAC;iBAClG,CAAC,CAAC;gBAEH,MAAM,OAAO,GAAG,IAAI,mEAAmC,CAAC,IAAI,GAAG,CAAC;oBAC/D,CAAC,MAAM,EAAE;4BACR,GAAG,EAAE,CAAA,GAAA,oEAAwC,CAAA,CAAC;gCAC7C,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,oDAA8B,CAAC,OAAO,EAAE,CAAC;6BACpE,CAAC;yBACF,CAAC;oBACF,gCAAgC;oBAChC,CAAC,MAAM,EAAE;4BACR,GAAG,EAAE,CAAA,GAAA,oEAAwC,CAAA,CAAC;gCAC7C,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,oDAA8B,CAAC,MAAM,EAAE,CAAC;6BACnE,CAAC;yBACF,CAAC;iBACF,CAAC,CAAC,CAAC;gBACJ,MAAM,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CAAE,CAAC;gBACrC,CAAA,GAAA,oBAAW,CAAA,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;gBACnC,CAAA,GAAA,oBAAW,CAAA,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;gBACnC,CAAA,GAAA,wBAAe,CAAA,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,EAAE,wFAAwF,CAAC,CAAC;YAClK,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,6DAA6D,EAAE,GAAG,EAAE;gBACxE,MAAM,OAAO,GAAG,IAAI,mEAAmC,CAAC,IAAI,GAAG,CAAC;oBAC/D,CAAC,MAAM,EAAE;4BACR,GAAG,EAAE,CAAA,GAAA,oEAAwC,CAAA,CAAC;gCAC7C,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,oDAA8B,CAAC,OAAO,EAAE,CAAC;6BACpE,CAAC;yBACF,CAAC;iBACF,CAAC,CAAC,CAAC;gBACJ,MAAM,OAAO,GAAG,IAAI,mEAAmC,CAAC,IAAI,GAAG,CAAC;oBAC/D,CAAC,MAAM,EAAE;4BACR,GAAG,EAAE,CAAA,GAAA,oEAAwC,CAAA,CAAC;gCAC7C,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,oDAA8B,CAAC,OAAO,EAAE,CAAC;6BACpE,CAAC;yBACF,CAAC;oBACF,4DAA4D;oBAC5D,CAAC,MAAM,EAAE;4BACR,GAAG,EAAE,CAAA,GAAA,oEAAwC,CAAA,CAAC;gCAC7C,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,oDAA8B,CAAC,MAAM,EAAE,CAAC;6BACnE,CAAC;yBACF,CAAC;iBACF,CAAC,CAAC,CAAC;gBACJ,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBACnC,CAAA,GAAA,oBAAW,CAAA,CAAC,IAAI,EAAE,SAAS,EAAE,4CAA4C,CAAC,CAAC;YAC5E,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,+BAA+B,EAAE,GAAG,EAAE;gBAC1C,MAAM,OAAO,GAAG,IAAI,mEAAmC,CAAC,IAAI,GAAG,CAAC;oBAC/D,CAAC,MAAM,EAAE;4BACR,GAAG,EAAE,CAAA,GAAA,oEAAwC,CAAA,CAAC;gCAC7C,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,oDAA8B,CAAC,OAAO,EAAE,CAAC;gCACnE,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,oDAA8B,CAAC,OAAO,EAAE,CAAC;6BACnE,CAAC;yBACF,CAAC;iBACF,CAAC,CAAC,CAAC;gBACJ,MAAM,OAAO,GAAG,IAAI,mEAAmC,CAAC,IAAI,GAAG,CAAC;oBAC/D,CAAC,MAAM,EAAE;4BACR,GAAG,EAAE,CAAA,GAAA,oEAAwC,CAAA,CAAC;gCAC7C,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,oDAA8B,CAAC,OAAO,EAAE,CAAC;6BACnE,CAAC;yBACF,CAAC;iBACF,CAAC,CAAC,CAAC;gBACJ,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CAAE,CAAC;gBACpC,CAAA,GAAA,oBAAW,CAAA,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;gBAClC,CAAA,GAAA,oBAAW,CAAA,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;gBAChC,CAAA,GAAA,wBAAe,CAAA,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,EAAE;oBAC5C,CAAC,GAAG,EAAE,CAAC,EAAE,mBAAmB,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,oDAA8B,CAAC,OAAO,EAAE,CAAC,CAAC;iBAClG,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,+BAA+B,EAAE,GAAG,EAAE;gBAC1C,MAAM,OAAO,GAAG,IAAI,mEAAmC,CAAC,IAAI,GAAG,CAAC;oBAC/D,CAAC,MAAM,EAAE;4BACR,GAAG,EAAE,CAAA,GAAA,oEAAwC,CAAA,CAAC;gCAC7C,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,oDAA8B,CAAC,OAAO,EAAE,CAAC;gCACpE,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,oDAA8B,CAAC,OAAO,EAAE,CAAC;6BACnE,CAAC;yBACF,CAAC;iBACF,CAAC,CAAC,CAAC;gBACJ,MAAM,OAAO,GAAG,IAAI,mEAAmC,CAAC,IAAI,GAAG,CAAC;oBAC/D,CAAC,MAAM,EAAE;4BACR,GAAG,EAAE,CAAA,GAAA,oEAAwC,CAAA,CAAC;gCAC7C,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,oDAA8B,CAAC,OAAO,EAAE,CAAC;gCACpE,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,oDAA8B,CAAC,MAAM,EAAE,CAAC;6BAClE,CAAC;yBACF,CAAC;iBACF,CAAC,CAAC,CAAC;gBACJ,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CAAE,CAAC;gBACpC,CAAA,GAAA,oBAAW,CAAA,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;gBAChC,CAAA,GAAA,oBAAW,CAAA,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;gBAClC,CAAA,GAAA,wBAAe,CAAA,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,EAAE;oBAC5C,CAAC,GAAG,EAAE,CAAC,EAAE,mBAAmB,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,oDAA8B,CAAC,OAAO,EAAE,CAAC,CAAC;oBACnG,CAAC,GAAG,EAAE,CAAC,EAAE,mBAAmB,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,oDAA8B,CAAC,MAAM,EAAE,CAAC,CAAC;iBACjG,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,uDAAuD,EAAE,GAAG,EAAE;gBAClE,MAAM,OAAO,GAAG,IAAI,mEAAmC,CAAC,IAAI,GAAG,CAAC;oBAC/D,CAAC,MAAM,EAAE;4BACR,GAAG,EAAE,CAAA,GAAA,oEAAwC,CAAA,CAAC;gCAC7C,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,oDAA8B,CAAC,OAAO,EAAE,CAAC;gCACpE,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,oDAA8B,CAAC,OAAO,EAAE,CAAC;6BACnE,CAAC;yBACF,CAAC;iBACF,CAAC,CAAC,CAAC;gBACJ,MAAM,OAAO,GAAG,IAAI,mEAAmC,CAAC,IAAI,GAAG,CAAC;oBAC/D,CAAC,MAAM,EAAE;4BACR,GAAG,EAAE,CAAA,GAAA,oEAAwC,CAAA,CAAC;gCAC7C,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,oDAA8B,CAAC,OAAO,EAAE,CAAC;gCACpE,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,oDAA8B,CAAC,MAAM,EAAE,CAAC;6BAClE,CAAC;yBACF,CAAC;iBACF,CAAC,CAAC,CAAC;gBACJ,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CAAE,CAAC;gBACpC,CAAA,GAAA,wBAAe,CAAA,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,EAAE;oBAC1C,CAAC,GAAG,EAAE,CAAC,EAAE,mBAAmB,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,oDAA8B,CAAC,MAAM,EAAE,CAAC,CAAC;iBACjG,CAAC,CAAC;gBACH,CAAA,GAAA,wBAAe,CAAA,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,EAAE;oBAC5C,CAAC,GAAG,EAAE,CAAC,EAAE,mBAAmB,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,oDAA8B,CAAC,OAAO,EAAE,CAAC,CAAC;iBAClG,CAAC,CAAC;gBACH,CAAA,GAAA,wBAAe,CAAA,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,EAAE;oBAC5C,CAAC,GAAG,EAAE,CAAC,EAAE,mBAAmB,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,oDAA8B,CAAC,OAAO,EAAE,CAAC,CAAC;iBACnG,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { deepStrictEqual, strictEqual } from 'assert';\nimport { EnvironmentVariableMutatorType } from 'vs/workbench/contrib/terminal/common/environmentVariable';\nimport { IProcessEnvironment, isWindows } from 'vs/base/common/platform';\nimport { MergedEnvironmentVariableCollection } from 'vs/workbench/contrib/terminal/common/environmentVariableCollection';\nimport { deserializeEnvironmentVariableCollection } from 'vs/workbench/contrib/terminal/common/environmentVariableShared';\n\nsuite('EnvironmentVariable - MergedEnvironmentVariableCollection', () => {\n\tsuite('ctor', () => {\n\t\ttest('Should keep entries that come after a Prepend or Append type mutators', () => {\n\t\t\tconst merged = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A', { value: 'a1', type: EnvironmentVariableMutatorType.Prepend }]\n\t\t\t\t\t])\n\t\t\t\t}],\n\t\t\t\t['ext2', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A', { value: 'a2', type: EnvironmentVariableMutatorType.Append }]\n\t\t\t\t\t])\n\t\t\t\t}],\n\t\t\t\t['ext3', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A', { value: 'a3', type: EnvironmentVariableMutatorType.Prepend }]\n\t\t\t\t\t])\n\t\t\t\t}],\n\t\t\t\t['ext4', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A', { value: 'a4', type: EnvironmentVariableMutatorType.Append }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tdeepStrictEqual([...merged.map.entries()], [\n\t\t\t\t['A', [\n\t\t\t\t\t{ extensionIdentifier: 'ext4', type: EnvironmentVariableMutatorType.Append, value: 'a4' },\n\t\t\t\t\t{ extensionIdentifier: 'ext3', type: EnvironmentVariableMutatorType.Prepend, value: 'a3' },\n\t\t\t\t\t{ extensionIdentifier: 'ext2', type: EnvironmentVariableMutatorType.Append, value: 'a2' },\n\t\t\t\t\t{ extensionIdentifier: 'ext1', type: EnvironmentVariableMutatorType.Prepend, value: 'a1' }\n\t\t\t\t]]\n\t\t\t]);\n\t\t});\n\n\t\ttest('Should remove entries that come after a Replace type mutator', () => {\n\t\t\tconst merged = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A', { value: 'a1', type: EnvironmentVariableMutatorType.Prepend }]\n\t\t\t\t\t])\n\t\t\t\t}],\n\t\t\t\t['ext2', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A', { value: 'a2', type: EnvironmentVariableMutatorType.Append }]\n\t\t\t\t\t])\n\t\t\t\t}],\n\t\t\t\t['ext3', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A', { value: 'a3', type: EnvironmentVariableMutatorType.Replace }]\n\t\t\t\t\t])\n\t\t\t\t}],\n\t\t\t\t['ext4', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A', { value: 'a4', type: EnvironmentVariableMutatorType.Append }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tdeepStrictEqual([...merged.map.entries()], [\n\t\t\t\t['A', [\n\t\t\t\t\t{ extensionIdentifier: 'ext3', type: EnvironmentVariableMutatorType.Replace, value: 'a3' },\n\t\t\t\t\t{ extensionIdentifier: 'ext2', type: EnvironmentVariableMutatorType.Append, value: 'a2' },\n\t\t\t\t\t{ extensionIdentifier: 'ext1', type: EnvironmentVariableMutatorType.Prepend, value: 'a1' }\n\t\t\t\t]]\n\t\t\t], 'The ext4 entry should be removed as it comes after a Replace');\n\t\t});\n\t});\n\n\tsuite('applyToProcessEnvironment', () => {\n\t\ttest('should apply the collection to an environment', () => {\n\t\t\tconst merged = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A', { value: 'a', type: EnvironmentVariableMutatorType.Replace }],\n\t\t\t\t\t\t['B', { value: 'b', type: EnvironmentVariableMutatorType.Append }],\n\t\t\t\t\t\t['C', { value: 'c', type: EnvironmentVariableMutatorType.Prepend }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst env: IProcessEnvironment = {\n\t\t\t\tA: 'foo',\n\t\t\t\tB: 'bar',\n\t\t\t\tC: 'baz'\n\t\t\t};\n\t\t\tmerged.applyToProcessEnvironment(env);\n\t\t\tdeepStrictEqual(env, {\n\t\t\t\tA: 'a',\n\t\t\t\tB: 'barb',\n\t\t\t\tC: 'cbaz'\n\t\t\t});\n\t\t});\n\n\t\ttest('should apply the collection to environment entries with no values', () => {\n\t\t\tconst merged = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A', { value: 'a', type: EnvironmentVariableMutatorType.Replace }],\n\t\t\t\t\t\t['B', { value: 'b', type: EnvironmentVariableMutatorType.Append }],\n\t\t\t\t\t\t['C', { value: 'c', type: EnvironmentVariableMutatorType.Prepend }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst env: IProcessEnvironment = {};\n\t\t\tmerged.applyToProcessEnvironment(env);\n\t\t\tdeepStrictEqual(env, {\n\t\t\t\tA: 'a',\n\t\t\t\tB: 'b',\n\t\t\t\tC: 'c'\n\t\t\t});\n\t\t});\n\n\t\ttest('should apply to variable case insensitively on Windows only', () => {\n\t\t\tconst merged = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['a', { value: 'a', type: EnvironmentVariableMutatorType.Replace }],\n\t\t\t\t\t\t['b', { value: 'b', type: EnvironmentVariableMutatorType.Append }],\n\t\t\t\t\t\t['c', { value: 'c', type: EnvironmentVariableMutatorType.Prepend }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst env: IProcessEnvironment = {\n\t\t\t\tA: 'A',\n\t\t\t\tB: 'B',\n\t\t\t\tC: 'C'\n\t\t\t};\n\t\t\tmerged.applyToProcessEnvironment(env);\n\t\t\tif (isWindows) {\n\t\t\t\tdeepStrictEqual(env, {\n\t\t\t\t\tA: 'a',\n\t\t\t\t\tB: 'Bb',\n\t\t\t\t\tC: 'cC'\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tdeepStrictEqual(env, {\n\t\t\t\t\ta: 'a',\n\t\t\t\t\tA: 'A',\n\t\t\t\t\tb: 'b',\n\t\t\t\t\tB: 'B',\n\t\t\t\t\tc: 'c',\n\t\t\t\t\tC: 'C'\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t});\n\n\tsuite('diff', () => {\n\t\ttest('should return undefined when collectinos are the same', () => {\n\t\t\tconst merged1 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A', { value: 'a', type: EnvironmentVariableMutatorType.Replace }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst merged2 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A', { value: 'a', type: EnvironmentVariableMutatorType.Replace }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst diff = merged1.diff(merged2);\n\t\t\tstrictEqual(diff, undefined);\n\t\t});\n\t\ttest('should generate added diffs from when the first entry is added', () => {\n\t\t\tconst merged1 = new MergedEnvironmentVariableCollection(new Map([]));\n\t\t\tconst merged2 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A', { value: 'a', type: EnvironmentVariableMutatorType.Replace }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst diff = merged1.diff(merged2)!;\n\t\t\tstrictEqual(diff.changed.size, 0);\n\t\t\tstrictEqual(diff.removed.size, 0);\n\t\t\tconst entries = [...diff.added.entries()];\n\t\t\tdeepStrictEqual(entries, [\n\t\t\t\t['A', [{ extensionIdentifier: 'ext1', value: 'a', type: EnvironmentVariableMutatorType.Replace }]]\n\t\t\t]);\n\t\t});\n\n\t\ttest('should generate added diffs from the same extension', () => {\n\t\t\tconst merged1 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A', { value: 'a', type: EnvironmentVariableMutatorType.Replace }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst merged2 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A', { value: 'a', type: EnvironmentVariableMutatorType.Replace }],\n\t\t\t\t\t\t['B', { value: 'b', type: EnvironmentVariableMutatorType.Append }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst diff = merged1.diff(merged2)!;\n\t\t\tstrictEqual(diff.changed.size, 0);\n\t\t\tstrictEqual(diff.removed.size, 0);\n\t\t\tconst entries = [...diff.added.entries()];\n\t\t\tdeepStrictEqual(entries, [\n\t\t\t\t['B', [{ extensionIdentifier: 'ext1', value: 'b', type: EnvironmentVariableMutatorType.Append }]]\n\t\t\t]);\n\t\t});\n\n\t\ttest('should generate added diffs from a different extension', () => {\n\t\t\tconst merged1 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A', { value: 'a1', type: EnvironmentVariableMutatorType.Prepend }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\n\t\t\tconst merged2 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext2', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A', { value: 'a2', type: EnvironmentVariableMutatorType.Append }]\n\t\t\t\t\t])\n\t\t\t\t}],\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A', { value: 'a1', type: EnvironmentVariableMutatorType.Prepend }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst diff = merged1.diff(merged2)!;\n\t\t\tstrictEqual(diff.changed.size, 0);\n\t\t\tstrictEqual(diff.removed.size, 0);\n\t\t\tdeepStrictEqual([...diff.added.entries()], [\n\t\t\t\t['A', [{ extensionIdentifier: 'ext2', value: 'a2', type: EnvironmentVariableMutatorType.Append }]]\n\t\t\t]);\n\n\t\t\tconst merged3 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A', { value: 'a1', type: EnvironmentVariableMutatorType.Prepend }]\n\t\t\t\t\t])\n\t\t\t\t}],\n\t\t\t\t// This entry should get removed\n\t\t\t\t['ext2', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A', { value: 'a2', type: EnvironmentVariableMutatorType.Append }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst diff2 = merged1.diff(merged3)!;\n\t\t\tstrictEqual(diff2.changed.size, 0);\n\t\t\tstrictEqual(diff2.removed.size, 0);\n\t\t\tdeepStrictEqual([...diff.added.entries()], [...diff2.added.entries()], 'Swapping the order of the entries in the other collection should yield the same result');\n\t\t});\n\n\t\ttest('should remove entries in the diff that come after a Replace', () => {\n\t\t\tconst merged1 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A', { value: 'a1', type: EnvironmentVariableMutatorType.Replace }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst merged4 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A', { value: 'a1', type: EnvironmentVariableMutatorType.Replace }]\n\t\t\t\t\t])\n\t\t\t\t}],\n\t\t\t\t// This entry should get removed as it comes after a replace\n\t\t\t\t['ext2', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A', { value: 'a2', type: EnvironmentVariableMutatorType.Append }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst diff = merged1.diff(merged4);\n\t\t\tstrictEqual(diff, undefined, 'Replace should ignore any entries after it');\n\t\t});\n\n\t\ttest('should generate removed diffs', () => {\n\t\t\tconst merged1 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A', { value: 'a', type: EnvironmentVariableMutatorType.Replace }],\n\t\t\t\t\t\t['B', { value: 'b', type: EnvironmentVariableMutatorType.Replace }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst merged2 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A', { value: 'a', type: EnvironmentVariableMutatorType.Replace }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst diff = merged1.diff(merged2)!;\n\t\t\tstrictEqual(diff.changed.size, 0);\n\t\t\tstrictEqual(diff.added.size, 0);\n\t\t\tdeepStrictEqual([...diff.removed.entries()], [\n\t\t\t\t['B', [{ extensionIdentifier: 'ext1', value: 'b', type: EnvironmentVariableMutatorType.Replace }]]\n\t\t\t]);\n\t\t});\n\n\t\ttest('should generate changed diffs', () => {\n\t\t\tconst merged1 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A', { value: 'a1', type: EnvironmentVariableMutatorType.Replace }],\n\t\t\t\t\t\t['B', { value: 'b', type: EnvironmentVariableMutatorType.Replace }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst merged2 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A', { value: 'a2', type: EnvironmentVariableMutatorType.Replace }],\n\t\t\t\t\t\t['B', { value: 'b', type: EnvironmentVariableMutatorType.Append }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst diff = merged1.diff(merged2)!;\n\t\t\tstrictEqual(diff.added.size, 0);\n\t\t\tstrictEqual(diff.removed.size, 0);\n\t\t\tdeepStrictEqual([...diff.changed.entries()], [\n\t\t\t\t['A', [{ extensionIdentifier: 'ext1', value: 'a2', type: EnvironmentVariableMutatorType.Replace }]],\n\t\t\t\t['B', [{ extensionIdentifier: 'ext1', value: 'b', type: EnvironmentVariableMutatorType.Append }]]\n\t\t\t]);\n\t\t});\n\n\t\ttest('should generate diffs with added, changed and removed', () => {\n\t\t\tconst merged1 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A', { value: 'a1', type: EnvironmentVariableMutatorType.Replace }],\n\t\t\t\t\t\t['B', { value: 'b', type: EnvironmentVariableMutatorType.Prepend }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst merged2 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A', { value: 'a2', type: EnvironmentVariableMutatorType.Replace }],\n\t\t\t\t\t\t['C', { value: 'c', type: EnvironmentVariableMutatorType.Append }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst diff = merged1.diff(merged2)!;\n\t\t\tdeepStrictEqual([...diff.added.entries()], [\n\t\t\t\t['C', [{ extensionIdentifier: 'ext1', value: 'c', type: EnvironmentVariableMutatorType.Append }]],\n\t\t\t]);\n\t\t\tdeepStrictEqual([...diff.removed.entries()], [\n\t\t\t\t['B', [{ extensionIdentifier: 'ext1', value: 'b', type: EnvironmentVariableMutatorType.Prepend }]]\n\t\t\t]);\n\t\t\tdeepStrictEqual([...diff.changed.entries()], [\n\t\t\t\t['A', [{ extensionIdentifier: 'ext1', value: 'a2', type: EnvironmentVariableMutatorType.Replace }]]\n\t\t\t]);\n\t\t});\n\t});\n});\n"]}