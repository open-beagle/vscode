{"version":3,"file":"terminalWordLinkProvider.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/terminal/test/browser/links/terminalWordLinkProvider.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { Terminal, ILink } from 'xterm';\nimport { TerminalWordLinkProvider } from 'vs/workbench/contrib/terminal/browser/links/terminalWordLinkProvider';\nimport { TestInstantiationService } from 'vs/platform/instantiation/test/common/instantiationServiceMock';\nimport { TestConfigurationService } from 'vs/platform/configuration/test/common/testConfigurationService';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\n\nsuite('Workbench - TerminalWordLinkProvider', () => {\n\n\tlet instantiationService: TestInstantiationService;\n\tlet configurationService: TestConfigurationService;\n\n\tsetup(() => {\n\t\tinstantiationService = new TestInstantiationService();\n\t\tconfigurationService = new TestConfigurationService();\n\t\tinstantiationService.stub(IConfigurationService, configurationService);\n\t});\n\n\tasync function assertLink(text: string, expected: { text: string, range: [number, number][] }[]) {\n\t\tconst xterm = new Terminal();\n\t\tconst provider: TerminalWordLinkProvider = instantiationService.createInstance(TerminalWordLinkProvider, xterm, () => { }, () => { });\n\n\t\t// Write the text and wait for the parser to finish\n\t\tawait new Promise<void>(r => xterm.write(text, r));\n\n\t\t// Ensure all links are provided\n\t\tconst links = (await new Promise<ILink[] | undefined>(r => provider.provideLinks(1, r)))!;\n\t\tassert.strictEqual(links.length, expected.length);\n\t\tconst actual = links.map(e => ({\n\t\t\ttext: e.text,\n\t\t\trange: e.range\n\t\t}));\n\t\tconst expectedVerbose = expected.map(e => ({\n\t\t\ttext: e.text,\n\t\t\trange: {\n\t\t\t\tstart: { x: e.range[0][0], y: e.range[0][1] },\n\t\t\t\tend: { x: e.range[1][0], y: e.range[1][1] },\n\t\t\t}\n\t\t}));\n\t\tassert.deepStrictEqual(actual, expectedVerbose);\n\t}\n\n\ttest('should link words as defined by wordSeparators', async () => {\n\t\tawait configurationService.setUserConfiguration('terminal', { integrated: { wordSeparators: ' ()[]' } });\n\t\tawait assertLink('foo', [{ range: [[1, 1], [3, 1]], text: 'foo' }]);\n\t\tawait assertLink('foo', [{ range: [[1, 1], [3, 1]], text: 'foo' }]);\n\t\tawait assertLink(' foo ', [{ range: [[2, 1], [4, 1]], text: 'foo' }]);\n\t\tawait assertLink('(foo)', [{ range: [[2, 1], [4, 1]], text: 'foo' }]);\n\t\tawait assertLink('[foo]', [{ range: [[2, 1], [4, 1]], text: 'foo' }]);\n\t\tawait assertLink('{foo}', [{ range: [[1, 1], [5, 1]], text: '{foo}' }]);\n\n\t\tawait configurationService.setUserConfiguration('terminal', { integrated: { wordSeparators: ' ' } });\n\t\tawait assertLink('foo', [{ range: [[1, 1], [3, 1]], text: 'foo' }]);\n\t\tawait assertLink(' foo ', [{ range: [[2, 1], [4, 1]], text: 'foo' }]);\n\t\tawait assertLink('(foo)', [{ range: [[1, 1], [5, 1]], text: '(foo)' }]);\n\t\tawait assertLink('[foo]', [{ range: [[1, 1], [5, 1]], text: '[foo]' }]);\n\t\tawait assertLink('{foo}', [{ range: [[1, 1], [5, 1]], text: '{foo}' }]);\n\t});\n\n\ttest('should support wide characters', async () => {\n\t\tawait configurationService.setUserConfiguration('terminal', { integrated: { wordSeparators: ' []' } });\n\t\tawait assertLink('aabbccdd.txt ', [{ range: [[1, 1], [12, 1]], text: 'aabbccdd.txt' }]);\n\t\tawait assertLink('我是学生.txt ', [{ range: [[1, 1], [12, 1]], text: '我是学生.txt' }]);\n\t\tawait assertLink(' aabbccdd.txt ', [{ range: [[2, 1], [13, 1]], text: 'aabbccdd.txt' }]);\n\t\tawait assertLink(' 我是学生.txt ', [{ range: [[2, 1], [13, 1]], text: '我是学生.txt' }]);\n\t\tawait assertLink(' [aabbccdd.txt] ', [{ range: [[3, 1], [14, 1]], text: 'aabbccdd.txt' }]);\n\t\tawait assertLink(' [我是学生.txt] ', [{ range: [[3, 1], [14, 1]], text: '我是学生.txt' }]);\n\t});\n\n\ttest('should support multiple link results', async () => {\n\t\tawait configurationService.setUserConfiguration('terminal', { integrated: { wordSeparators: ' ' } });\n\t\tawait assertLink('foo bar', [\n\t\t\t{ range: [[1, 1], [3, 1]], text: 'foo' },\n\t\t\t{ range: [[5, 1], [7, 1]], text: 'bar' }\n\t\t]);\n\t});\n\n\ttest('should remove trailing colon in the link results', async () => {\n\t\tawait configurationService.setUserConfiguration('terminal', { integrated: { wordSeparators: ' ' } });\n\t\tawait assertLink('foo:5:6: bar:0:32:', [\n\t\t\t{ range: [[1, 1], [7, 1]], text: 'foo:5:6' },\n\t\t\t{ range: [[10, 1], [17, 1]], text: 'bar:0:32' }\n\t\t]);\n\t});\n\n});\n"]}