{"version":3,"file":"terminalEnvironment.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/terminal/common/terminalEnvironment.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as path from 'vs/base/common/path';\nimport { URI as Uri } from 'vs/base/common/uri';\nimport { IWorkspaceFolder } from 'vs/platform/workspace/common/workspace';\nimport { IConfigurationResolverService } from 'vs/workbench/services/configurationResolver/common/configurationResolver';\nimport { sanitizeProcessEnvironment } from 'vs/base/common/processes';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IShellLaunchConfig, ITerminalEnvironment } from 'vs/platform/terminal/common/terminal';\nimport { IProcessEnvironment, isWindows, locale, OperatingSystem, OS, platform, Platform } from 'vs/base/common/platform';\n\n/**\n * This module contains utility functions related to the environment, cwd and paths.\n */\n\nexport function mergeEnvironments(parent: IProcessEnvironment, other: ITerminalEnvironment | undefined): void {\n\tif (!other) {\n\t\treturn;\n\t}\n\n\t// On Windows apply the new values ignoring case, while still retaining\n\t// the case of the original key.\n\tif (isWindows) {\n\t\tfor (const configKey in other) {\n\t\t\tlet actualKey = configKey;\n\t\t\tfor (const envKey in parent) {\n\t\t\t\tif (configKey.toLowerCase() === envKey.toLowerCase()) {\n\t\t\t\t\tactualKey = envKey;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst value = other[configKey];\n\t\t\tif (value !== undefined) {\n\t\t\t\t_mergeEnvironmentValue(parent, actualKey, value);\n\t\t\t}\n\t\t}\n\t} else {\n\t\tObject.keys(other).forEach((key) => {\n\t\t\tconst value = other[key];\n\t\t\tif (value !== undefined) {\n\t\t\t\t_mergeEnvironmentValue(parent, key, value);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction _mergeEnvironmentValue(env: ITerminalEnvironment, key: string, value: string | null): void {\n\tif (typeof value === 'string') {\n\t\tenv[key] = value;\n\t} else {\n\t\tdelete env[key];\n\t}\n}\n\nexport function addTerminalEnvironmentKeys(env: IProcessEnvironment, version: string | undefined, locale: string | undefined, detectLocale: 'auto' | 'off' | 'on'): void {\n\tenv['TERM_PROGRAM'] = 'vscode';\n\tif (version) {\n\t\tenv['TERM_PROGRAM_VERSION'] = version;\n\t}\n\tif (shouldSetLangEnvVariable(env, detectLocale)) {\n\t\tenv['LANG'] = getLangEnvVariable(locale);\n\t}\n\tenv['COLORTERM'] = 'truecolor';\n}\n\nfunction mergeNonNullKeys(env: IProcessEnvironment, other: ITerminalEnvironment | undefined) {\n\tif (!other) {\n\t\treturn;\n\t}\n\tfor (const key of Object.keys(other)) {\n\t\tconst value = other[key];\n\t\tif (value) {\n\t\t\tenv[key] = value;\n\t\t}\n\t}\n}\n\nfunction resolveConfigurationVariables(variableResolver: VariableResolver, env: ITerminalEnvironment): ITerminalEnvironment {\n\tObject.keys(env).forEach((key) => {\n\t\tconst value = env[key];\n\t\tif (typeof value === 'string') {\n\t\t\ttry {\n\t\t\t\tenv[key] = variableResolver(value);\n\t\t\t} catch (e) {\n\t\t\t\tenv[key] = value;\n\t\t\t}\n\t\t}\n\t});\n\treturn env;\n}\n\nexport function shouldSetLangEnvVariable(env: IProcessEnvironment, detectLocale: 'auto' | 'off' | 'on'): boolean {\n\tif (detectLocale === 'on') {\n\t\treturn true;\n\t}\n\tif (detectLocale === 'auto') {\n\t\tconst lang = env['LANG'];\n\t\treturn !lang || (lang.search(/\\.UTF\\-8$/) === -1 && lang.search(/\\.utf8$/) === -1 && lang.search(/\\.euc.+/) === -1);\n\t}\n\treturn false; // 'off'\n}\n\nexport function getLangEnvVariable(locale?: string): string {\n\tconst parts = locale ? locale.split('-') : [];\n\tconst n = parts.length;\n\tif (n === 0) {\n\t\t// Fallback to en_US if the locale is unknown\n\t\treturn 'en_US.UTF-8';\n\t}\n\tif (n === 1) {\n\t\t// The local may only contain the language, not the variant, if this is the case guess the\n\t\t// variant such that it can be used as a valid $LANG variable. The language variant chosen\n\t\t// is the original and/or most prominent with help from\n\t\t// https://stackoverflow.com/a/2502675/1156119\n\t\t// The list of locales was generated by running `locale -a` on macOS\n\t\tconst languageVariants: { [key: string]: string } = {\n\t\t\taf: 'ZA',\n\t\t\tam: 'ET',\n\t\t\tbe: 'BY',\n\t\t\tbg: 'BG',\n\t\t\tca: 'ES',\n\t\t\tcs: 'CZ',\n\t\t\tda: 'DK',\n\t\t\t// de: 'AT',\n\t\t\t// de: 'CH',\n\t\t\tde: 'DE',\n\t\t\tel: 'GR',\n\t\t\t// en: 'AU',\n\t\t\t// en: 'CA',\n\t\t\t// en: 'GB',\n\t\t\t// en: 'IE',\n\t\t\t// en: 'NZ',\n\t\t\ten: 'US',\n\t\t\tes: 'ES',\n\t\t\tet: 'EE',\n\t\t\teu: 'ES',\n\t\t\tfi: 'FI',\n\t\t\t// fr: 'BE',\n\t\t\t// fr: 'CA',\n\t\t\t// fr: 'CH',\n\t\t\tfr: 'FR',\n\t\t\the: 'IL',\n\t\t\thr: 'HR',\n\t\t\thu: 'HU',\n\t\t\thy: 'AM',\n\t\t\tis: 'IS',\n\t\t\t// it: 'CH',\n\t\t\tit: 'IT',\n\t\t\tja: 'JP',\n\t\t\tkk: 'KZ',\n\t\t\tko: 'KR',\n\t\t\tlt: 'LT',\n\t\t\t// nl: 'BE',\n\t\t\tnl: 'NL',\n\t\t\tno: 'NO',\n\t\t\tpl: 'PL',\n\t\t\tpt: 'BR',\n\t\t\t// pt: 'PT',\n\t\t\tro: 'RO',\n\t\t\tru: 'RU',\n\t\t\tsk: 'SK',\n\t\t\tsl: 'SI',\n\t\t\tsr: 'YU',\n\t\t\tsv: 'SE',\n\t\t\ttr: 'TR',\n\t\t\tuk: 'UA',\n\t\t\tzh: 'CN',\n\t\t};\n\t\tif (parts[0] in languageVariants) {\n\t\t\tparts.push(languageVariants[parts[0]]);\n\t\t}\n\t} else {\n\t\t// Ensure the variant is uppercase to be a valid $LANG\n\t\tparts[1] = parts[1].toUpperCase();\n\t}\n\treturn parts.join('_') + '.UTF-8';\n}\n\nexport function getCwd(\n\tshell: IShellLaunchConfig,\n\tuserHome: string | undefined,\n\tvariableResolver: VariableResolver | undefined,\n\troot: Uri | undefined,\n\tcustomCwd: string | undefined,\n\tlogService?: ILogService\n): string {\n\tif (shell.cwd) {\n\t\tconst unresolved = (typeof shell.cwd === 'object') ? shell.cwd.fsPath : shell.cwd;\n\t\tconst resolved = _resolveCwd(unresolved, variableResolver);\n\t\treturn _sanitizeCwd(resolved || unresolved);\n\t}\n\n\tlet cwd: string | undefined;\n\n\tif (!shell.ignoreConfigurationCwd && customCwd) {\n\t\tif (variableResolver) {\n\t\t\tcustomCwd = _resolveCwd(customCwd, variableResolver, logService);\n\t\t}\n\t\tif (customCwd) {\n\t\t\tif (path.isAbsolute(customCwd)) {\n\t\t\t\tcwd = customCwd;\n\t\t\t} else if (root) {\n\t\t\t\tcwd = path.join(root.fsPath, customCwd);\n\t\t\t}\n\t\t}\n\t}\n\n\t// If there was no custom cwd or it was relative with no workspace\n\tif (!cwd) {\n\t\tcwd = root ? root.fsPath : userHome || '';\n\t}\n\n\treturn _sanitizeCwd(cwd);\n}\n\nfunction _resolveCwd(cwd: string, variableResolver: VariableResolver | undefined, logService?: ILogService): string | undefined {\n\tif (variableResolver) {\n\t\ttry {\n\t\t\treturn variableResolver(cwd);\n\t\t} catch (e) {\n\t\t\tlogService?.error('Could not resolve terminal cwd', e);\n\t\t\treturn undefined;\n\t\t}\n\t}\n\treturn cwd;\n}\n\nfunction _sanitizeCwd(cwd: string): string {\n\t// Make the drive letter uppercase on Windows (see #9448)\n\tif (OS === OperatingSystem.Windows && cwd && cwd[1] === ':') {\n\t\treturn cwd[0].toUpperCase() + cwd.substr(1);\n\t}\n\treturn cwd;\n}\n\nexport function escapeNonWindowsPath(path: string): string {\n\tlet newPath = path;\n\tif (newPath.indexOf('\\\\') !== 0) {\n\t\tnewPath = newPath.replace(/\\\\/g, '\\\\\\\\');\n\t}\n\tconst bannedChars = /[\\`\\$\\|\\&\\>\\~\\#\\!\\^\\*\\;\\<\\\"\\']/g;\n\tnewPath = newPath.replace(bannedChars, '');\n\treturn `'${newPath}'`;\n}\n\nexport type TerminalShellSetting = (\n\t`terminal.integrated.automationShell.windows`\n\t| `terminal.integrated.automationShell.osx`\n\t| `terminal.integrated.automationShell.linux`\n\t| `terminal.integrated.shell.windows`\n\t| `terminal.integrated.shell.osx`\n\t| `terminal.integrated.shell.linux`\n);\n\nexport type TerminalShellArgsSetting = (\n\t`terminal.integrated.shellArgs.windows`\n\t| `terminal.integrated.shellArgs.osx`\n\t| `terminal.integrated.shellArgs.linux`\n);\n\nexport type VariableResolver = (str: string) => string;\n\nexport function createVariableResolver(lastActiveWorkspace: IWorkspaceFolder | undefined, env: IProcessEnvironment, configurationResolverService: IConfigurationResolverService | undefined): VariableResolver | undefined {\n\tif (!configurationResolverService) {\n\t\treturn undefined;\n\t}\n\treturn (str) => configurationResolverService.resolveWithEnvironment(env, lastActiveWorkspace, str);\n}\n\n/**\n * @deprecated Use ITerminalProfileResolverService\n */\nexport function getDefaultShell(\n\tfetchSetting: (key: TerminalShellSetting) => string | undefined,\n\tdefaultShell: string,\n\tisWoW64: boolean,\n\twindir: string | undefined,\n\tvariableResolver: VariableResolver | undefined,\n\tlogService: ILogService,\n\tuseAutomationShell: boolean,\n\tplatformOverride: Platform = platform\n): string {\n\tlet maybeExecutable: string | undefined;\n\tif (useAutomationShell) {\n\t\t// If automationShell is specified, this should override the normal setting\n\t\tmaybeExecutable = getShellSetting(fetchSetting, 'automationShell', platformOverride) as string | undefined;\n\t}\n\tif (!maybeExecutable) {\n\t\tmaybeExecutable = getShellSetting(fetchSetting, 'shell', platformOverride) as string | undefined;\n\t}\n\tlet executable: string = maybeExecutable || defaultShell;\n\n\t// Change Sysnative to System32 if the OS is Windows but NOT WoW64. It's\n\t// safe to assume that this was used by accident as Sysnative does not\n\t// exist and will break the terminal in non-WoW64 environments.\n\tif ((platformOverride === Platform.Windows) && !isWoW64 && windir) {\n\t\tconst sysnativePath = path.join(windir, 'Sysnative').replace(/\\//g, '\\\\').toLowerCase();\n\t\tif (executable && executable.toLowerCase().indexOf(sysnativePath) === 0) {\n\t\t\texecutable = path.join(windir, 'System32', executable.substr(sysnativePath.length + 1));\n\t\t}\n\t}\n\n\t// Convert / to \\ on Windows for convenience\n\tif (executable && platformOverride === Platform.Windows) {\n\t\texecutable = executable.replace(/\\//g, '\\\\');\n\t}\n\n\tif (variableResolver) {\n\t\ttry {\n\t\t\texecutable = variableResolver(executable);\n\t\t} catch (e) {\n\t\t\tlogService.error(`Could not resolve shell`, e);\n\t\t}\n\t}\n\n\treturn executable;\n}\n\n/**\n * @deprecated Use ITerminalProfileResolverService\n */\nexport function getDefaultShellArgs(\n\tfetchSetting: (key: TerminalShellSetting | TerminalShellArgsSetting) => string | string[] | undefined,\n\tuseAutomationShell: boolean,\n\tvariableResolver: VariableResolver | undefined,\n\tlogService: ILogService,\n\tplatformOverride: Platform = platform,\n): string | string[] {\n\tif (useAutomationShell) {\n\t\tif (!!getShellSetting(fetchSetting, 'automationShell', platformOverride)) {\n\t\t\treturn [];\n\t\t}\n\t}\n\n\tconst platformKey = platformOverride === Platform.Windows ? 'windows' : platformOverride === Platform.Mac ? 'osx' : 'linux';\n\tlet args = fetchSetting(<TerminalShellArgsSetting>`terminal.integrated.shellArgs.${platformKey}`);\n\tif (!args) {\n\t\treturn [];\n\t}\n\tif (typeof args === 'string' && platformOverride === Platform.Windows) {\n\t\treturn variableResolver ? variableResolver(args) : args;\n\t}\n\tif (variableResolver) {\n\t\tconst resolvedArgs: string[] = [];\n\t\tfor (const arg of args) {\n\t\t\ttry {\n\t\t\t\tresolvedArgs.push(variableResolver(arg));\n\t\t\t} catch (e) {\n\t\t\t\tlogService.error(`Could not resolve terminal.integrated.shellArgs.${platformKey}`, e);\n\t\t\t\tresolvedArgs.push(arg);\n\t\t\t}\n\t\t}\n\t\targs = resolvedArgs;\n\t}\n\treturn args;\n}\n\nfunction getShellSetting(\n\tfetchSetting: (key: TerminalShellSetting) => string | string[] | undefined,\n\ttype: 'automationShell' | 'shell',\n\tplatformOverride: Platform = platform,\n): string | string[] | undefined {\n\tconst platformKey = platformOverride === Platform.Windows ? 'windows' : platformOverride === Platform.Mac ? 'osx' : 'linux';\n\treturn fetchSetting(<TerminalShellSetting>`terminal.integrated.${type}.${platformKey}`);\n}\n\nexport function createTerminalEnvironment(\n\tshellLaunchConfig: IShellLaunchConfig,\n\tenvFromConfig: ITerminalEnvironment | undefined,\n\tvariableResolver: VariableResolver | undefined,\n\tversion: string | undefined,\n\tdetectLocale: 'auto' | 'off' | 'on',\n\tbaseEnv: IProcessEnvironment\n): IProcessEnvironment {\n\t// Create a terminal environment based on settings, launch config and permissions\n\tlet env: IProcessEnvironment = {};\n\tif (shellLaunchConfig.strictEnv) {\n\t\t// strictEnv is true, only use the requested env (ignoring null entries)\n\t\tmergeNonNullKeys(env, shellLaunchConfig.env);\n\t} else {\n\t\t// Merge process env with the env from config and from shellLaunchConfig\n\t\tmergeNonNullKeys(env, baseEnv);\n\n\t\tconst allowedEnvFromConfig = { ...envFromConfig };\n\n\t\t// Resolve env vars from config and shell\n\t\tif (variableResolver) {\n\t\t\tif (allowedEnvFromConfig) {\n\t\t\t\tresolveConfigurationVariables(variableResolver, allowedEnvFromConfig);\n\t\t\t}\n\t\t\tif (shellLaunchConfig.env) {\n\t\t\t\tresolveConfigurationVariables(variableResolver, shellLaunchConfig.env);\n\t\t\t}\n\t\t}\n\n\t\t// Sanitize the environment, removing any undesirable VS Code and Electron environment\n\t\t// variables\n\t\tsanitizeProcessEnvironment(env, 'VSCODE_IPC_HOOK_CLI');\n\n\t\t// Merge config (settings) and ShellLaunchConfig environments\n\t\tmergeEnvironments(env, allowedEnvFromConfig);\n\t\tmergeEnvironments(env, shellLaunchConfig.env);\n\n\t\t// Adding other env keys necessary to create the process\n\t\taddTerminalEnvironmentKeys(env, version, locale, detectLocale);\n\t}\n\treturn env;\n}\n"]}