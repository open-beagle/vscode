{"version":3,"sources":["vs/workbench/contrib/terminal/common/terminal.ts"],"names":[],"mappings":"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","file":"terminal.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { Event } from 'vs/base/common/event';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { RawContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { IProcessEnvironment, OperatingSystem } from 'vs/base/common/platform';\nimport { IExtensionPointDescriptor } from 'vs/workbench/services/extensions/common/extensionsRegistry';\nimport { IProcessDataEvent, IShellLaunchConfig, ITerminalDimensions, ITerminalDimensionsOverride, ITerminalEnvironment, ITerminalLaunchError, TerminalShellType } from 'vs/platform/terminal/common/terminal';\nimport { IEnvironmentVariableInfo } from 'vs/workbench/contrib/terminal/common/environmentVariable';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\n\nexport const TERMINAL_VIEW_ID = 'terminal';\n\n/** A context key that is set when there is at least one opened integrated terminal. */\nexport const KEYBINDING_CONTEXT_TERMINAL_IS_OPEN = new RawContextKey<boolean>('terminalIsOpen', false, true);\n\n/** A context key that is set when the integrated terminal has focus. */\nexport const KEYBINDING_CONTEXT_TERMINAL_FOCUS = new RawContextKey<boolean>('terminalFocus', false, nls.localize('terminalFocusContextKey', \"Whether the terminal is focused\"));\n\n/** A context key that is set to the current number of integrated terminals. */\nexport const KEYBINDING_CONTEXT_TERMINAL_COUNT = new RawContextKey<number>('terminalCount', 0, nls.localize('terminalCountContextKey', \"The current number of terminals\"));\n\n/** A context key that is set when the terminal tabs view is narrow. */\nexport const KEYBINDING_CONTEXT_TERMINAL_IS_TABS_NARROW_FOCUS = new RawContextKey<boolean>('isTerminalTabsNarrow', false, true);\n\n/** A context key that is set when the integrated terminal tabs widget has focus. */\nexport const KEYBINDING_CONTEXT_TERMINAL_TABS_FOCUS = new RawContextKey<boolean>('terminalTabsFocus', false, nls.localize('terminalTabsFocusContextKey', \"Whether the terminal tabs widget is focused\"));\n\nexport const KEYBINDING_CONTEXT_TERMINAL_SHELL_TYPE_KEY = 'terminalShellType';\n/** A context key that is set to the detected shell for the most recently active terminal, this is set to the last known value when no terminals exist. */\nexport const KEYBINDING_CONTEXT_TERMINAL_SHELL_TYPE = new RawContextKey<string>(KEYBINDING_CONTEXT_TERMINAL_SHELL_TYPE_KEY, undefined, { type: 'string', description: nls.localize('terminalShellTypeContextKey', \"The shell type of the active terminal\") });\n\nexport const KEYBINDING_CONTEXT_TERMINAL_ALT_BUFFER_ACTIVE = new RawContextKey<boolean>('terminalAltBufferActive', false, true);\n\n/** A context key that is set when the integrated terminal does not have focus. */\nexport const KEYBINDING_CONTEXT_TERMINAL_NOT_FOCUSED = KEYBINDING_CONTEXT_TERMINAL_FOCUS.toNegated();\n\n/** A context key that is set when the user is navigating the accessibility tree */\nexport const KEYBINDING_CONTEXT_TERMINAL_A11Y_TREE_FOCUS = new RawContextKey<boolean>('terminalA11yTreeFocus', false, true);\n\n/** A keybinding context key that is set when the integrated terminal has text selected. */\nexport const KEYBINDING_CONTEXT_TERMINAL_TEXT_SELECTED = new RawContextKey<boolean>('terminalTextSelected', false, nls.localize('terminalTextSelectedContextKey', \"Whether text is selected in the active terminal\"));\n/** A keybinding context key that is set when the integrated terminal does not have text selected. */\nexport const KEYBINDING_CONTEXT_TERMINAL_TEXT_NOT_SELECTED = KEYBINDING_CONTEXT_TERMINAL_TEXT_SELECTED.toNegated();\n\n/**  A context key that is set when the find widget in integrated terminal is visible. */\nexport const KEYBINDING_CONTEXT_TERMINAL_FIND_VISIBLE = new RawContextKey<boolean>('terminalFindVisible', false, true);\n/**  A context key that is set when the find widget in integrated terminal is not visible. */\nexport const KEYBINDING_CONTEXT_TERMINAL_FIND_NOT_VISIBLE = KEYBINDING_CONTEXT_TERMINAL_FIND_VISIBLE.toNegated();\n/**  A context key that is set when the find widget find input in integrated terminal is focused. */\nexport const KEYBINDING_CONTEXT_TERMINAL_FIND_INPUT_FOCUSED = new RawContextKey<boolean>('terminalFindInputFocused', false, true);\n/**  A context key that is set when the find widget in integrated terminal is focused. */\nexport const KEYBINDING_CONTEXT_TERMINAL_FIND_FOCUSED = new RawContextKey<boolean>('terminalFindFocused', false, true);\n/**  A context key that is set when the find widget find input in integrated terminal is not focused. */\nexport const KEYBINDING_CONTEXT_TERMINAL_FIND_INPUT_NOT_FOCUSED = KEYBINDING_CONTEXT_TERMINAL_FIND_INPUT_FOCUSED.toNegated();\n\nexport const KEYBINDING_CONTEXT_TERMINAL_PROCESS_SUPPORTED = new RawContextKey<boolean>('terminalProcessSupported', false, nls.localize('terminalProcessSupportedContextKey', \"Whether terminal processes can be launched\"));\n\nexport const KEYBINDING_CONTEXT_TERMINAL_TABS_SINGULAR_SELECTION = new RawContextKey<boolean>('terminalTabsSingularSelection', false, nls.localize('terminalTabsSingularSelectedContextKey', \"Whether one terminal tab is selected\"));\n\nexport const NEVER_MEASURE_RENDER_TIME_STORAGE_KEY = 'terminal.integrated.neverMeasureRenderTime';\n\nexport const TERMINAL_CREATION_COMMANDS = ['workbench.action.terminal.toggleTerminal', 'workbench.action.terminal.new', 'workbench.action.togglePanel', 'workbench.action.terminal.focus'];\n\nexport const SUGGESTED_RENDERER_TYPE = 'terminal.integrated.suggestedRendererType';\n\nexport const TerminalCursorStyle = {\n\tBLOCK: 'block',\n\tLINE: 'line',\n\tUNDERLINE: 'underline'\n};\n\nexport const TERMINAL_CONFIG_SECTION = 'terminal.integrated';\n\nexport const TERMINAL_ACTION_CATEGORY = nls.localize('terminalCategory', \"Terminal\");\n\nexport const DEFAULT_LETTER_SPACING = 0;\nexport const MINIMUM_LETTER_SPACING = -5;\nexport const DEFAULT_LINE_HEIGHT = 1;\n\nexport const MINIMUM_FONT_WEIGHT = 1;\nexport const MAXIMUM_FONT_WEIGHT = 1000;\nexport const DEFAULT_FONT_WEIGHT = 'normal';\nexport const DEFAULT_BOLD_FONT_WEIGHT = 'bold';\nexport const SUGGESTIONS_FONT_WEIGHT = ['normal', 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900'];\n\nexport const ITerminalProfileResolverService = createDecorator<ITerminalProfileResolverService>('terminalProfileResolverService');\nexport interface ITerminalProfileResolverService {\n\treadonly _serviceBrand: undefined;\n\t/**\n\t * Resolves the icon of a shell launch config if this will use the default profile\n\t */\n\tresolveIcon(shellLaunchConfig: IShellLaunchConfig, os: OperatingSystem): void;\n\tresolveShellLaunchConfig(shellLaunchConfig: IShellLaunchConfig, options: IShellLaunchConfigResolveOptions): Promise<void>;\n\tgetDefaultProfile(options: IShellLaunchConfigResolveOptions): Promise<ITerminalProfile>;\n\tgetDefaultShell(options: IShellLaunchConfigResolveOptions): Promise<string>;\n\tgetDefaultShellArgs(options: IShellLaunchConfigResolveOptions): Promise<string | string[]>;\n\tgetShellEnvironment(remoteAuthority: string | undefined): Promise<IProcessEnvironment>;\n\n\t// TODO: Remove when workspace trust is enabled\n\tgetSafeConfigValue(key: string, os: OperatingSystem): unknown | undefined;\n\tgetSafeConfigValueFullKey(key: string): unknown | undefined;\n}\n\nexport interface IShellLaunchConfigResolveOptions {\n\tremoteAuthority: string | undefined;\n\tos: OperatingSystem;\n\tallowAutomationShell?: boolean;\n}\n\nexport type FontWeight = 'normal' | 'bold' | number;\n\nexport interface ITerminalProfiles {\n\tlinux: { [key: string]: ITerminalProfileObject };\n\tosx: { [key: string]: ITerminalProfileObject };\n\twindows: { [key: string]: ITerminalProfileObject };\n}\n\nexport interface ITerminalConfiguration {\n\tshell: {\n\t\tlinux: string | null;\n\t\tosx: string | null;\n\t\twindows: string | null;\n\t};\n\tautomationShell: {\n\t\tlinux: string | null;\n\t\tosx: string | null;\n\t\twindows: string | null;\n\t};\n\tshellArgs: {\n\t\tlinux: string[];\n\t\tosx: string[];\n\t\twindows: string[];\n\t};\n\tprofiles: ITerminalProfiles;\n\tdefaultProfile: {\n\t\tlinux: string | null;\n\t\tosx: string | null;\n\t\twindows: string | null;\n\t};\n\tuseWslProfiles: boolean;\n\taltClickMovesCursor: boolean;\n\tmacOptionIsMeta: boolean;\n\tmacOptionClickForcesSelection: boolean;\n\tgpuAcceleration: 'auto' | 'on' | 'off';\n\trightClickBehavior: 'default' | 'copyPaste' | 'paste' | 'selectWord';\n\tcursorBlinking: boolean;\n\tcursorStyle: string;\n\tcursorWidth: number;\n\tdrawBoldTextInBrightColors: boolean;\n\tfastScrollSensitivity: number;\n\tfontFamily: string;\n\tfontWeight: FontWeight;\n\tfontWeightBold: FontWeight;\n\tminimumContrastRatio: number;\n\tmouseWheelScrollSensitivity: number;\n\tsendKeybindingsToShell: boolean;\n\t// fontLigatures: boolean;\n\tfontSize: number;\n\tletterSpacing: number;\n\tlineHeight: number;\n\tdetectLocale: 'auto' | 'off' | 'on';\n\tscrollback: number;\n\tcommandsToSkipShell: string[];\n\tallowChords: boolean;\n\tallowMnemonics: boolean;\n\tcwd: string;\n\tconfirmOnExit: boolean;\n\tenableBell: boolean;\n\tinheritEnv: boolean;\n\tenv: {\n\t\tlinux: { [key: string]: string };\n\t\tosx: { [key: string]: string };\n\t\twindows: { [key: string]: string };\n\t};\n\tenvironmentChangesIndicator: 'off' | 'on' | 'warnonly';\n\tenvironmentChangesRelaunch: boolean;\n\tshowExitAlert: boolean;\n\tsplitCwd: 'workspaceRoot' | 'initial' | 'inherited';\n\twindowsEnableConpty: boolean;\n\twordSeparators: string;\n\texperimentalUseTitleEvent: boolean;\n\tenableFileLinks: boolean;\n\tunicodeVersion: '6' | '11';\n\texperimentalLinkProvider: boolean;\n\tlocalEchoLatencyThreshold: number;\n\tlocalEchoExcludePrograms: ReadonlyArray<string>;\n\tlocalEchoStyle: 'bold' | 'dim' | 'italic' | 'underlined' | 'inverted' | string;\n\tenablePersistentSessions: boolean;\n\ttabs: {\n\t\tenabled: boolean;\n\t\thideCondition: 'never' | 'singleTerminal';\n\t\tshowActiveTerminal: 'always' | 'singleTerminal' | 'singleTerminalOrNarrow' | 'never';\n\t\tlocation: 'left' | 'right';\n\t\tfocusMode: 'singleClick' | 'doubleClick';\n\t},\n\tbellDuration: number;\n\tallowWorkspaceConfiguration: boolean;\n}\n\nexport const DEFAULT_LOCAL_ECHO_EXCLUDE: ReadonlyArray<string> = ['vim', 'vi', 'nano', 'tmux'];\n\nexport interface ITerminalConfigHelper {\n\tconfig: ITerminalConfiguration;\n\n\tconfigFontIsMonospace(): boolean;\n\tgetFont(): ITerminalFont;\n\tshowRecommendations(shellLaunchConfig: IShellLaunchConfig): void;\n}\n\nexport interface ITerminalFont {\n\tfontFamily: string;\n\tfontSize: number;\n\tletterSpacing: number;\n\tlineHeight: number;\n\tcharWidth?: number;\n\tcharHeight?: number;\n}\n\nexport interface IRemoteTerminalAttachTarget {\n\tid: number;\n\tpid: number;\n\ttitle: string;\n\tcwd: string;\n\tworkspaceId: string;\n\tworkspaceName: string;\n\tisOrphan: boolean;\n\ticon: string | undefined;\n}\n\n/**\n * Provides access to native Windows calls that can be injected into non-native layers.\n */\nexport interface ITerminalNativeWindowsDelegate {\n\t/**\n\t * Gets the Windows build number, eg. this would be `19041` for Windows 10 version 2004\n\t */\n\tgetWindowsBuildNumber(): number;\n\t/**\n\t * Converts a regular Windows path into the WSL path equivalent, eg. `C:\\` -> `/mnt/c`\n\t * @param path The Windows path.\n\t */\n\tgetWslPath(path: string): Promise<string>;\n}\n\nexport interface ICommandTracker {\n\tscrollToPreviousCommand(): void;\n\tscrollToNextCommand(): void;\n\tselectToPreviousCommand(): void;\n\tselectToNextCommand(): void;\n\tselectToPreviousLine(): void;\n\tselectToNextLine(): void;\n}\n\nexport interface INavigationMode {\n\texitNavigationMode(): void;\n\tfocusPreviousLine(): void;\n\tfocusNextLine(): void;\n}\n\nexport interface IBeforeProcessDataEvent {\n\t/**\n\t * The data of the event, this can be modified by the event listener to change what gets sent\n\t * to the terminal.\n\t */\n\tdata: string;\n}\n\nexport interface ITerminalProfile {\n\tprofileName: string;\n\tpath: string;\n\tisAutoDetected?: boolean;\n\targs?: string | string[] | undefined;\n\tenv?: ITerminalEnvironment;\n\toverrideName?: boolean;\n\ticon?: string;\n}\n\nexport const enum ProfileSource {\n\tGitBash = 'Git Bash',\n\tPwsh = 'PowerShell'\n}\n\nexport interface ITerminalExecutable {\n\tpath: string | string[];\n\targs?: string | string[] | undefined;\n\tisAutoDetected?: boolean;\n\toverrideName?: boolean;\n\ticon?: string;\n\tenv?: ITerminalEnvironment;\n}\n\nexport interface ITerminalProfileSource {\n\tsource: ProfileSource;\n\tisAutoDetected?: boolean;\n\toverrideName?: boolean;\n\targs?: string | string[] | undefined;\n\ticon?: string;\n\tenv?: ITerminalEnvironment;\n}\n\nexport type ITerminalProfileObject = ITerminalExecutable | ITerminalProfileSource | null;\n\nexport interface IAvailableProfilesRequest {\n\tcallback: (shells: ITerminalProfile[]) => void;\n\tconfiguredProfilesOnly: boolean;\n}\nexport interface IDefaultShellAndArgsRequest {\n\tuseAutomationShell: boolean;\n\tcallback: (shell: string, args: string[] | string | undefined) => void;\n}\n\nexport interface ITerminalProcessManager extends IDisposable {\n\treadonly processState: ProcessState;\n\treadonly ptyProcessReady: Promise<void>;\n\treadonly shellProcessId: number | undefined;\n\treadonly remoteAuthority: string | undefined;\n\treadonly os: OperatingSystem | undefined;\n\treadonly userHome: string | undefined;\n\treadonly environmentVariableInfo: IEnvironmentVariableInfo | undefined;\n\treadonly persistentProcessId: number | undefined;\n\treadonly shouldPersist: boolean;\n\treadonly isDisconnected: boolean;\n\t/** Whether the process has had data written to it yet. */\n\treadonly hasWrittenData: boolean;\n\n\treadonly onPtyDisconnect: Event<void>;\n\treadonly onPtyReconnect: Event<void>;\n\n\treadonly onProcessReady: Event<void>;\n\treadonly onBeforeProcessData: Event<IBeforeProcessDataEvent>;\n\treadonly onProcessData: Event<IProcessDataEvent>;\n\treadonly onProcessTitle: Event<string>;\n\treadonly onProcessShellTypeChanged: Event<TerminalShellType>;\n\treadonly onProcessExit: Event<number | undefined>;\n\treadonly onProcessOverrideDimensions: Event<ITerminalDimensionsOverride | undefined>;\n\treadonly onProcessResolvedShellLaunchConfig: Event<IShellLaunchConfig>;\n\treadonly onEnvironmentVariableInfoChanged: Event<IEnvironmentVariableInfo>;\n\n\tdispose(immediate?: boolean): void;\n\tdetachFromProcess(): void;\n\tcreateProcess(shellLaunchConfig: IShellLaunchConfig, cols: number, rows: number, isScreenReaderModeEnabled: boolean): Promise<ITerminalLaunchError | undefined>;\n\trelaunch(shellLaunchConfig: IShellLaunchConfig, cols: number, rows: number, isScreenReaderModeEnabled: boolean, reset: boolean): Promise<ITerminalLaunchError | undefined>;\n\twrite(data: string): void;\n\tsetDimensions(cols: number, rows: number): Promise<void>;\n\tsetDimensions(cols: number, rows: number, sync: false): Promise<void>;\n\tsetDimensions(cols: number, rows: number, sync: true): void;\n\tacknowledgeDataEvent(charCount: number): void;\n\tprocessBinary(data: string): void;\n\n\tgetInitialCwd(): Promise<string>;\n\tgetCwd(): Promise<string>;\n\tgetLatency(): Promise<number>;\n}\n\nexport const enum ProcessState {\n\t// The process has not been initialized yet.\n\tUNINITIALIZED,\n\t// The process is currently launching, the process is marked as launching\n\t// for a short duration after being created and is helpful to indicate\n\t// whether the process died as a result of bad shell and args.\n\tLAUNCHING,\n\t// The process is running normally.\n\tRUNNING,\n\t// The process was killed during launch, likely as a result of bad shell and\n\t// args.\n\tKILLED_DURING_LAUNCH,\n\t// The process was killed by the user (the event originated from VS Code).\n\tKILLED_BY_USER,\n\t// The process was killed by itself, for example the shell crashed or `exit`\n\t// was run.\n\tKILLED_BY_PROCESS\n}\n\nexport interface ITerminalProcessExtHostProxy extends IDisposable {\n\treadonly instanceId: number;\n\n\temitData(data: string): void;\n\temitTitle(title: string): void;\n\temitReady(pid: number, cwd: string): void;\n\temitExit(exitCode: number | undefined): void;\n\temitOverrideDimensions(dimensions: ITerminalDimensions | undefined): void;\n\temitResolvedShellLaunchConfig(shellLaunchConfig: IShellLaunchConfig): void;\n\temitInitialCwd(initialCwd: string): void;\n\temitCwd(cwd: string): void;\n\temitLatency(latency: number): void;\n\n\tonInput: Event<string>;\n\tonBinary: Event<string>;\n\tonResize: Event<{ cols: number, rows: number }>;\n\tonAcknowledgeDataEvent: Event<number>;\n\tonShutdown: Event<boolean>;\n\tonRequestInitialCwd: Event<void>;\n\tonRequestCwd: Event<void>;\n\tonRequestLatency: Event<void>;\n}\n\nexport interface IStartExtensionTerminalRequest {\n\tproxy: ITerminalProcessExtHostProxy;\n\tcols: number;\n\trows: number;\n\tcallback: (error: ITerminalLaunchError | undefined) => void;\n}\n\nexport interface IDefaultShellAndArgsRequest {\n\tuseAutomationShell: boolean;\n\tcallback: (shell: string, args: string[] | string | undefined) => void;\n}\n\nexport enum LinuxDistro {\n\tFedora,\n\tUbuntu,\n\tUnknown\n}\n\nexport enum TitleEventSource {\n\t/** From the API or the rename command that overrides any other type */\n\tApi,\n\t/** From the process name property*/\n\tProcess,\n\t/** From the VT sequence */\n\tSequence\n}\n\nexport const QUICK_LAUNCH_PROFILE_CHOICE = 'workbench.action.terminal.profile.choice';\n\nexport const enum TERMINAL_COMMAND_ID {\n\tFIND_NEXT = 'workbench.action.terminal.findNext',\n\tFIND_PREVIOUS = 'workbench.action.terminal.findPrevious',\n\tTOGGLE = 'workbench.action.terminal.toggleTerminal',\n\tKILL = 'workbench.action.terminal.kill',\n\tKILL_INSTANCE = 'workbench.action.terminal.killInstance',\n\tQUICK_KILL = 'workbench.action.terminal.quickKill',\n\tCONFIGURE_TERMINAL_SETTINGS = 'workbench.action.terminal.openSettings',\n\tCOPY_SELECTION = 'workbench.action.terminal.copySelection',\n\tSELECT_ALL = 'workbench.action.terminal.selectAll',\n\tDELETE_WORD_LEFT = 'workbench.action.terminal.deleteWordLeft',\n\tDELETE_WORD_RIGHT = 'workbench.action.terminal.deleteWordRight',\n\tDELETE_TO_LINE_START = 'workbench.action.terminal.deleteToLineStart',\n\tMOVE_TO_LINE_START = 'workbench.action.terminal.moveToLineStart',\n\tMOVE_TO_LINE_END = 'workbench.action.terminal.moveToLineEnd',\n\tNEW = 'workbench.action.terminal.new',\n\tNEW_WITH_CWD = 'workbench.action.terminal.newWithCwd',\n\tNEW_LOCAL = 'workbench.action.terminal.newLocal',\n\tNEW_IN_ACTIVE_WORKSPACE = 'workbench.action.terminal.newInActiveWorkspace',\n\tNEW_WITH_PROFILE = 'workbench.action.terminal.newWithProfile',\n\tSPLIT = 'workbench.action.terminal.split',\n\tSPLIT_INSTANCE = 'workbench.action.terminal.splitInstance',\n\tSPLIT_IN_ACTIVE_WORKSPACE = 'workbench.action.terminal.splitInActiveWorkspace',\n\tRELAUNCH = 'workbench.action.terminal.relaunch',\n\tFOCUS_PREVIOUS_PANE = 'workbench.action.terminal.focusPreviousPane',\n\tSHOW_TABS = 'workbench.action.terminal.showTabs',\n\tFOCUS_TABS = 'workbench.action.terminal.focusTabs',\n\tFOCUS_NEXT_PANE = 'workbench.action.terminal.focusNextPane',\n\tRESIZE_PANE_LEFT = 'workbench.action.terminal.resizePaneLeft',\n\tRESIZE_PANE_RIGHT = 'workbench.action.terminal.resizePaneRight',\n\tRESIZE_PANE_UP = 'workbench.action.terminal.resizePaneUp',\n\tCREATE_WITH_PROFILE_BUTTON = 'workbench.action.terminal.createProfileButton',\n\tRESIZE_PANE_DOWN = 'workbench.action.terminal.resizePaneDown',\n\tFOCUS = 'workbench.action.terminal.focus',\n\tFOCUS_NEXT = 'workbench.action.terminal.focusNext',\n\tFOCUS_PREVIOUS = 'workbench.action.terminal.focusPrevious',\n\tPASTE = 'workbench.action.terminal.paste',\n\tPASTE_SELECTION = 'workbench.action.terminal.pasteSelection',\n\tSELECT_DEFAULT_PROFILE = 'workbench.action.terminal.selectDefaultShell',\n\tRUN_SELECTED_TEXT = 'workbench.action.terminal.runSelectedText',\n\tRUN_ACTIVE_FILE = 'workbench.action.terminal.runActiveFile',\n\tSWITCH_TERMINAL = 'workbench.action.terminal.switchTerminal',\n\tSCROLL_DOWN_LINE = 'workbench.action.terminal.scrollDown',\n\tSCROLL_DOWN_PAGE = 'workbench.action.terminal.scrollDownPage',\n\tSCROLL_TO_BOTTOM = 'workbench.action.terminal.scrollToBottom',\n\tSCROLL_UP_LINE = 'workbench.action.terminal.scrollUp',\n\tSCROLL_UP_PAGE = 'workbench.action.terminal.scrollUpPage',\n\tSCROLL_TO_TOP = 'workbench.action.terminal.scrollToTop',\n\tCLEAR = 'workbench.action.terminal.clear',\n\tCLEAR_SELECTION = 'workbench.action.terminal.clearSelection',\n\tCHANGE_ICON = 'workbench.action.terminal.changeIcon',\n\tCHANGE_ICON_INSTANCE = 'workbench.action.terminal.changeIconInstance',\n\tRENAME = 'workbench.action.terminal.rename',\n\tRENAME_INSTANCE = 'workbench.action.terminal.renameInstance',\n\tRENAME_WITH_ARG = 'workbench.action.terminal.renameWithArg',\n\tFIND_FOCUS = 'workbench.action.terminal.focusFind',\n\tFIND_HIDE = 'workbench.action.terminal.hideFind',\n\tQUICK_OPEN_TERM = 'workbench.action.quickOpenTerm',\n\tSCROLL_TO_PREVIOUS_COMMAND = 'workbench.action.terminal.scrollToPreviousCommand',\n\tSCROLL_TO_NEXT_COMMAND = 'workbench.action.terminal.scrollToNextCommand',\n\tSELECT_TO_PREVIOUS_COMMAND = 'workbench.action.terminal.selectToPreviousCommand',\n\tSELECT_TO_NEXT_COMMAND = 'workbench.action.terminal.selectToNextCommand',\n\tSELECT_TO_PREVIOUS_LINE = 'workbench.action.terminal.selectToPreviousLine',\n\tSELECT_TO_NEXT_LINE = 'workbench.action.terminal.selectToNextLine',\n\tTOGGLE_ESCAPE_SEQUENCE_LOGGING = 'toggleEscapeSequenceLogging',\n\tSEND_SEQUENCE = 'workbench.action.terminal.sendSequence',\n\tTOGGLE_FIND_REGEX = 'workbench.action.terminal.toggleFindRegex',\n\tTOGGLE_FIND_WHOLE_WORD = 'workbench.action.terminal.toggleFindWholeWord',\n\tTOGGLE_FIND_CASE_SENSITIVE = 'workbench.action.terminal.toggleFindCaseSensitive',\n\tNAVIGATION_MODE_EXIT = 'workbench.action.terminal.navigationModeExit',\n\tNAVIGATION_MODE_FOCUS_NEXT = 'workbench.action.terminal.navigationModeFocusNext',\n\tNAVIGATION_MODE_FOCUS_PREVIOUS = 'workbench.action.terminal.navigationModeFocusPrevious',\n\tSHOW_ENVIRONMENT_INFORMATION = 'workbench.action.terminal.showEnvironmentInformation',\n\tSEARCH_WORKSPACE = 'workbench.action.terminal.searchWorkspace',\n\tATTACH_TO_REMOTE_TERMINAL = 'workbench.action.terminal.attachToSession'\n}\n\nexport const DEFAULT_COMMANDS_TO_SKIP_SHELL: string[] = [\n\tTERMINAL_COMMAND_ID.CLEAR_SELECTION,\n\tTERMINAL_COMMAND_ID.CLEAR,\n\tTERMINAL_COMMAND_ID.COPY_SELECTION,\n\tTERMINAL_COMMAND_ID.DELETE_TO_LINE_START,\n\tTERMINAL_COMMAND_ID.DELETE_WORD_LEFT,\n\tTERMINAL_COMMAND_ID.DELETE_WORD_RIGHT,\n\tTERMINAL_COMMAND_ID.FIND_FOCUS,\n\tTERMINAL_COMMAND_ID.FIND_HIDE,\n\tTERMINAL_COMMAND_ID.FIND_NEXT,\n\tTERMINAL_COMMAND_ID.FIND_PREVIOUS,\n\tTERMINAL_COMMAND_ID.TOGGLE_FIND_REGEX,\n\tTERMINAL_COMMAND_ID.TOGGLE_FIND_WHOLE_WORD,\n\tTERMINAL_COMMAND_ID.TOGGLE_FIND_CASE_SENSITIVE,\n\tTERMINAL_COMMAND_ID.FOCUS_NEXT_PANE,\n\tTERMINAL_COMMAND_ID.FOCUS_NEXT,\n\tTERMINAL_COMMAND_ID.FOCUS_PREVIOUS_PANE,\n\tTERMINAL_COMMAND_ID.FOCUS_PREVIOUS,\n\tTERMINAL_COMMAND_ID.FOCUS,\n\tTERMINAL_COMMAND_ID.KILL,\n\tTERMINAL_COMMAND_ID.MOVE_TO_LINE_END,\n\tTERMINAL_COMMAND_ID.MOVE_TO_LINE_START,\n\tTERMINAL_COMMAND_ID.NEW_IN_ACTIVE_WORKSPACE,\n\tTERMINAL_COMMAND_ID.NEW,\n\tTERMINAL_COMMAND_ID.PASTE,\n\tTERMINAL_COMMAND_ID.PASTE_SELECTION,\n\tTERMINAL_COMMAND_ID.RESIZE_PANE_DOWN,\n\tTERMINAL_COMMAND_ID.RESIZE_PANE_LEFT,\n\tTERMINAL_COMMAND_ID.RESIZE_PANE_RIGHT,\n\tTERMINAL_COMMAND_ID.RESIZE_PANE_UP,\n\tTERMINAL_COMMAND_ID.RUN_ACTIVE_FILE,\n\tTERMINAL_COMMAND_ID.RUN_SELECTED_TEXT,\n\tTERMINAL_COMMAND_ID.SCROLL_DOWN_LINE,\n\tTERMINAL_COMMAND_ID.SCROLL_DOWN_PAGE,\n\tTERMINAL_COMMAND_ID.SCROLL_TO_BOTTOM,\n\tTERMINAL_COMMAND_ID.SCROLL_TO_NEXT_COMMAND,\n\tTERMINAL_COMMAND_ID.SCROLL_TO_PREVIOUS_COMMAND,\n\tTERMINAL_COMMAND_ID.SCROLL_TO_TOP,\n\tTERMINAL_COMMAND_ID.SCROLL_UP_LINE,\n\tTERMINAL_COMMAND_ID.SCROLL_UP_PAGE,\n\tTERMINAL_COMMAND_ID.SEND_SEQUENCE,\n\tTERMINAL_COMMAND_ID.SELECT_ALL,\n\tTERMINAL_COMMAND_ID.SELECT_TO_NEXT_COMMAND,\n\tTERMINAL_COMMAND_ID.SELECT_TO_NEXT_LINE,\n\tTERMINAL_COMMAND_ID.SELECT_TO_PREVIOUS_COMMAND,\n\tTERMINAL_COMMAND_ID.SELECT_TO_PREVIOUS_LINE,\n\tTERMINAL_COMMAND_ID.SPLIT_IN_ACTIVE_WORKSPACE,\n\tTERMINAL_COMMAND_ID.SPLIT,\n\tTERMINAL_COMMAND_ID.TOGGLE,\n\tTERMINAL_COMMAND_ID.NAVIGATION_MODE_EXIT,\n\tTERMINAL_COMMAND_ID.NAVIGATION_MODE_FOCUS_NEXT,\n\tTERMINAL_COMMAND_ID.NAVIGATION_MODE_FOCUS_PREVIOUS,\n\t'editor.action.toggleTabFocusMode',\n\t'workbench.action.quickOpen',\n\t'workbench.action.quickOpenPreviousEditor',\n\t'workbench.action.showCommands',\n\t'workbench.action.tasks.build',\n\t'workbench.action.tasks.restartTask',\n\t'workbench.action.tasks.runTask',\n\t'workbench.action.tasks.reRunTask',\n\t'workbench.action.tasks.showLog',\n\t'workbench.action.tasks.showTasks',\n\t'workbench.action.tasks.terminate',\n\t'workbench.action.tasks.test',\n\t'workbench.action.toggleFullScreen',\n\t'workbench.action.terminal.focusAtIndex1',\n\t'workbench.action.terminal.focusAtIndex2',\n\t'workbench.action.terminal.focusAtIndex3',\n\t'workbench.action.terminal.focusAtIndex4',\n\t'workbench.action.terminal.focusAtIndex5',\n\t'workbench.action.terminal.focusAtIndex6',\n\t'workbench.action.terminal.focusAtIndex7',\n\t'workbench.action.terminal.focusAtIndex8',\n\t'workbench.action.terminal.focusAtIndex9',\n\t'workbench.action.focusSecondEditorGroup',\n\t'workbench.action.focusThirdEditorGroup',\n\t'workbench.action.focusFourthEditorGroup',\n\t'workbench.action.focusFifthEditorGroup',\n\t'workbench.action.focusSixthEditorGroup',\n\t'workbench.action.focusSeventhEditorGroup',\n\t'workbench.action.focusEighthEditorGroup',\n\t'workbench.action.focusNextPart',\n\t'workbench.action.focusPreviousPart',\n\t'workbench.action.nextPanelView',\n\t'workbench.action.previousPanelView',\n\t'workbench.action.nextSideBarView',\n\t'workbench.action.previousSideBarView',\n\t'workbench.action.debug.start',\n\t'workbench.action.debug.stop',\n\t'workbench.action.debug.run',\n\t'workbench.action.debug.restart',\n\t'workbench.action.debug.continue',\n\t'workbench.action.debug.pause',\n\t'workbench.action.debug.stepInto',\n\t'workbench.action.debug.stepOut',\n\t'workbench.action.debug.stepOver',\n\t'workbench.action.nextEditor',\n\t'workbench.action.previousEditor',\n\t'workbench.action.nextEditorInGroup',\n\t'workbench.action.previousEditorInGroup',\n\t'workbench.action.openNextRecentlyUsedEditor',\n\t'workbench.action.openPreviousRecentlyUsedEditor',\n\t'workbench.action.openNextRecentlyUsedEditorInGroup',\n\t'workbench.action.openPreviousRecentlyUsedEditorInGroup',\n\t'workbench.action.quickOpenPreviousRecentlyUsedEditor',\n\t'workbench.action.quickOpenLeastRecentlyUsedEditor',\n\t'workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup',\n\t'workbench.action.quickOpenLeastRecentlyUsedEditorInGroup',\n\t'workbench.action.focusActiveEditorGroup',\n\t'workbench.action.focusFirstEditorGroup',\n\t'workbench.action.focusLastEditorGroup',\n\t'workbench.action.firstEditorInGroup',\n\t'workbench.action.lastEditorInGroup',\n\t'workbench.action.navigateUp',\n\t'workbench.action.navigateDown',\n\t'workbench.action.navigateRight',\n\t'workbench.action.navigateLeft',\n\t'workbench.action.togglePanel',\n\t'workbench.action.quickOpenView',\n\t'workbench.action.toggleMaximizedPanel'\n];\n\nexport interface ITerminalContributions {\n\ttypes?: ITerminalTypeContribution[];\n}\n\nexport interface ITerminalTypeContribution {\n\ttitle: string;\n\tcommand: string;\n\ticon?: string;\n}\n\nexport const terminalContributionsDescriptor: IExtensionPointDescriptor = {\n\textensionPoint: 'terminal',\n\tdefaultExtensionKind: 'workspace',\n\tjsonSchema: {\n\t\tdescription: nls.localize('vscode.extension.contributes.terminal', 'Contributes terminal functionality.'),\n\t\ttype: 'object',\n\t\tproperties: {\n\t\t\ttypes: {\n\t\t\t\ttype: 'array',\n\t\t\t\tdescription: nls.localize('vscode.extension.contributes.terminal.types', \"Defines additional terminal types that the user can create.\"),\n\t\t\t\titems: {\n\t\t\t\t\ttype: 'object',\n\t\t\t\t\trequired: ['command', 'title'],\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\tcommand: {\n\t\t\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.terminal.types.command', \"Command to execute when the user creates this type of terminal.\"),\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttitle: {\n\t\t\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.terminal.types.title', \"Title for this type of terminal.\"),\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t},\n\t\t\t\t\t\ticon: {\n\t\t\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.terminal.types.icon', \"A codicon to associate with this terminal type.\"),\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n};\n"]}