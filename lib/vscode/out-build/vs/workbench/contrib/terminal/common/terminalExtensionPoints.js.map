{"version":3,"file":"terminalExtensionPoints.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/terminal/common/terminalExtensionPoints.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAOhG,2BAA2B;IACd,QAAA,iBAAiB,GAAG,kBAAkB,CAAC,kBAAkB,CAAC,sBAAsB,CAAyB,0CAA+B,CAAC,CAAC;IAQ1I,QAAA,4BAA4B,GAAG,CAAA,GAAA,+BAAe,CAAA,CAA+B,8BAA8B,CAAC,CAAC;IAE1H,MAAa,2BAA2B;QASvC;YARgB,kBAAa,GAAG,SAAS,CAAC;YAElC,mBAAc,GAA6C,EAAE,CAAC;YAOrE,yBAAiB,CAAC,UAAU,CAAC,aAAa,CAAC,EAAE;gBAC5C,IAAI,CAAC,cAAc,GAAG,CAAA,GAAA,gBAAO,CAAA,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;;oBAChG,OAAO,CAAA,MAAA,MAAA,CAAC,CAAC,KAAK,0CAAE,KAAK,0CAAE,GAAG,CAAC,CAAC,CAAC,EAAE;wBAC9B,0CAA0C;wBAC1C,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,WAAW,CAAC,UAAU,CAAC,KAAK,KAAK,oBAAoB,EAAE;4BACvE,CAAC,CAAC,IAAI,GAAG,UAAU,CAAC;yBACpB;wBACD,2EAA2E;wBAC3E,kCAAkC;wBAClC,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;4BAC9D,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;yBAC7C;6BAAM;4BACN,CAAC,CAAC,IAAI,GAAG,SAAS,CAAC;yBACnB;wBACD,OAAO,CAAC,CAAC;oBACV,CAAC,CAAC,KAAI,EAAE,CAAC;gBACV,CAAC,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACJ,CAAC;QAvBD,IAAW,aAAa;YACvB,OAAO,IAAI,CAAC,cAAc,CAAC;QAC5B,CAAC;KAsBD;IA7BD,kEA6BC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as extensionsRegistry from 'vs/workbench/services/extensions/common/extensionsRegistry';\nimport { ITerminalTypeContribution, ITerminalContributions, terminalContributionsDescriptor } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { flatten } from 'vs/base/common/arrays';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\n\n// terminal extension point\nexport const terminalsExtPoint = extensionsRegistry.ExtensionsRegistry.registerExtensionPoint<ITerminalContributions>(terminalContributionsDescriptor);\n\nexport interface ITerminalContributionService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly terminalTypes: ReadonlyArray<ITerminalTypeContribution>;\n}\n\nexport const ITerminalContributionService = createDecorator<ITerminalContributionService>('terminalContributionsService');\n\nexport class TerminalContributionService implements ITerminalContributionService {\n\tpublic readonly _serviceBrand = undefined;\n\n\tprivate _terminalTypes: ReadonlyArray<ITerminalTypeContribution> = [];\n\n\tpublic get terminalTypes() {\n\t\treturn this._terminalTypes;\n\t}\n\n\tconstructor() {\n\t\tterminalsExtPoint.setHandler(contributions => {\n\t\t\tthis._terminalTypes = flatten(contributions.filter(c => c.description.enableProposedApi).map(c => {\n\t\t\t\treturn c.value?.types?.map(e => {\n\t\t\t\t\t// TODO: Remove after adoption in js-debug\n\t\t\t\t\tif (!e.icon && c.description.identifier.value === 'ms-vscode.js-debug') {\n\t\t\t\t\t\te.icon = '$(debug)';\n\t\t\t\t\t}\n\t\t\t\t\t// Only support $(id) for now, without that it should point to a path to be\n\t\t\t\t\t// consistent with other icon APIs\n\t\t\t\t\tif (e.icon && e.icon.startsWith('$(') && e.icon.endsWith(')')) {\n\t\t\t\t\t\te.icon = e.icon.substr(2, e.icon.length - 3);\n\t\t\t\t\t} else {\n\t\t\t\t\t\te.icon = undefined;\n\t\t\t\t\t}\n\t\t\t\t\treturn e;\n\t\t\t\t}) || [];\n\t\t\t}));\n\t\t});\n\t}\n}\n"]}