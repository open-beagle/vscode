{"version":3,"file":"environmentVariableService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/terminal/common/environmentVariableService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { debounce, throttle } from 'vs/base/common/decorators';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { MergedEnvironmentVariableCollection } from 'vs/workbench/contrib/terminal/common/environmentVariableCollection';\nimport { deserializeEnvironmentVariableCollection, serializeEnvironmentVariableCollection } from 'vs/workbench/contrib/terminal/common/environmentVariableShared';\nimport { IEnvironmentVariableCollectionWithPersistence, IEnvironmentVariableService, IMergedEnvironmentVariableCollection, ISerializableEnvironmentVariableCollection } from 'vs/workbench/contrib/terminal/common/environmentVariable';\n\nconst ENVIRONMENT_VARIABLE_COLLECTIONS_KEY = 'terminal.integrated.environmentVariableCollections';\n\ninterface ISerializableExtensionEnvironmentVariableCollection {\n\textensionIdentifier: string,\n\tcollection: ISerializableEnvironmentVariableCollection\n}\n\n/**\n * Tracks and persists environment variable collections as defined by extensions.\n */\nexport class EnvironmentVariableService implements IEnvironmentVariableService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tcollections: Map<string, IEnvironmentVariableCollectionWithPersistence> = new Map();\n\tmergedCollection: IMergedEnvironmentVariableCollection;\n\n\tprivate readonly _onDidChangeCollections = new Emitter<IMergedEnvironmentVariableCollection>();\n\tget onDidChangeCollections(): Event<IMergedEnvironmentVariableCollection> { return this._onDidChangeCollections.event; }\n\n\tconstructor(\n\t\t@IExtensionService private readonly _extensionService: IExtensionService,\n\t\t@IStorageService private readonly _storageService: IStorageService\n\t) {\n\t\tconst serializedPersistedCollections = this._storageService.get(ENVIRONMENT_VARIABLE_COLLECTIONS_KEY, StorageScope.WORKSPACE);\n\t\tif (serializedPersistedCollections) {\n\t\t\tconst collectionsJson: ISerializableExtensionEnvironmentVariableCollection[] = JSON.parse(serializedPersistedCollections);\n\t\t\tcollectionsJson.forEach(c => this.collections.set(c.extensionIdentifier, {\n\t\t\t\tpersistent: true,\n\t\t\t\tmap: deserializeEnvironmentVariableCollection(c.collection)\n\t\t\t}));\n\n\t\t\t// Asynchronously invalidate collections where extensions have been uninstalled, this is\n\t\t\t// async to avoid making all functions on the service synchronous and because extensions\n\t\t\t// being uninstalled is rare.\n\t\t\tthis._invalidateExtensionCollections();\n\t\t}\n\t\tthis.mergedCollection = this._resolveMergedCollection();\n\n\t\t// Listen for uninstalled/disabled extensions\n\t\tthis._extensionService.onDidChangeExtensions(() => this._invalidateExtensionCollections());\n\t}\n\n\tset(extensionIdentifier: string, collection: IEnvironmentVariableCollectionWithPersistence): void {\n\t\tthis.collections.set(extensionIdentifier, collection);\n\t\tthis._updateCollections();\n\t}\n\n\tdelete(extensionIdentifier: string): void {\n\t\tthis.collections.delete(extensionIdentifier);\n\t\tthis._updateCollections();\n\t}\n\n\tprivate _updateCollections(): void {\n\t\tthis._persistCollectionsEventually();\n\t\tthis.mergedCollection = this._resolveMergedCollection();\n\t\tthis._notifyCollectionUpdatesEventually();\n\t}\n\n\t@throttle(1000)\n\tprivate _persistCollectionsEventually(): void {\n\t\tthis._persistCollections();\n\t}\n\n\tprotected _persistCollections(): void {\n\t\tconst collectionsJson: ISerializableExtensionEnvironmentVariableCollection[] = [];\n\t\tthis.collections.forEach((collection, extensionIdentifier) => {\n\t\t\tif (collection.persistent) {\n\t\t\t\tcollectionsJson.push({\n\t\t\t\t\textensionIdentifier,\n\t\t\t\t\tcollection: serializeEnvironmentVariableCollection(this.collections.get(extensionIdentifier)!.map)\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t\tconst stringifiedJson = JSON.stringify(collectionsJson);\n\t\tthis._storageService.store(ENVIRONMENT_VARIABLE_COLLECTIONS_KEY, stringifiedJson, StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t}\n\n\t@debounce(1000)\n\tprivate _notifyCollectionUpdatesEventually(): void {\n\t\tthis._notifyCollectionUpdates();\n\t}\n\n\tprotected _notifyCollectionUpdates(): void {\n\t\tthis._onDidChangeCollections.fire(this.mergedCollection);\n\t}\n\n\tprivate _resolveMergedCollection(): IMergedEnvironmentVariableCollection {\n\t\treturn new MergedEnvironmentVariableCollection(this.collections);\n\t}\n\n\tprivate async _invalidateExtensionCollections(): Promise<void> {\n\t\tawait this._extensionService.whenInstalledExtensionsRegistered();\n\n\t\tconst registeredExtensions = await this._extensionService.getExtensions();\n\t\tlet changes = false;\n\t\tthis.collections.forEach((_, extensionIdentifier) => {\n\t\t\tconst isExtensionRegistered = registeredExtensions.some(r => r.identifier.value === extensionIdentifier);\n\t\t\tif (!isExtensionRegistered) {\n\t\t\t\tthis.collections.delete(extensionIdentifier);\n\t\t\t\tchanges = true;\n\t\t\t}\n\t\t});\n\t\tif (changes) {\n\t\t\tthis._updateCollections();\n\t\t}\n\t}\n}\n"]}