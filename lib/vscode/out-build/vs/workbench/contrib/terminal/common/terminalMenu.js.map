{"version":3,"sources":["vs/workbench/contrib/terminal/common/terminalMenu.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAOhG,SAAgB,iBAAiB;QAEhC,SAAS;QACT,MAAM,WAAW,GAAG,UAAU,CAAC;QAC/B,sBAAY,CAAC,cAAc,CAAC,gBAAM,CAAC,mBAAmB,EAAE;YACvD,KAAK,EAAE,WAAW;YAClB,OAAO,EAAE;gBACR,EAAE,2CAAyB;gBAC3B,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,CAA4D,CAA1D,CAA4D,EAAzD,EAAE,AAAuE,CAAC,cAAzD,EAAE,OAAO,EAAE,CAAC,uBAAuB,CAAC;aAC9E;YACD,KAAK,EAAE,CAAC;SACR,CAAC,CAAC;QACH,sBAAY,CAAC,cAAc,CAAC,gBAAM,CAAC,mBAAmB,EAAE;YACvD,KAAK,EAAE,WAAW;YAClB,OAAO,EAAE;gBACR,EAAE,+CAA2B;gBAC7B,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,CAA8D,CAA5D,CAA8D,EAA3D,EAAE,AAA2E,CAAC,gBAA3D,EAAE,OAAO,EAAE,CAAC,uBAAuB,CAAC;gBAChF,YAAY,EAAE,2BAAc,CAAC,GAAG,CAAC,gBAAgB,CAAC;aAClD;YACD,KAAK,EAAE,CAAC;YACR,IAAI,EAAE,wDAA6C;SACnD,CAAC,CAAC;QAEH,MAAM;QACN,MAAM,QAAQ,GAAG,OAAO,CAAC;QACzB,sBAAY,CAAC,cAAc,CAAC,gBAAM,CAAC,mBAAmB,EAAE;YACvD,KAAK,EAAE,QAAQ;YACf,OAAO,EAAE;gBACR,EAAE,iEAAqC;gBACvC,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,CAA8D,CAA5D,CAA8D,EAA3D,EAAE,AAA4E,CAAC,gBAA5D,EAAE,OAAO,EAAE,CAAC,uBAAuB,CAAC;aAChF;YACD,KAAK,EAAE,CAAC;YACR,IAAI,EAAE,wDAA6C;SACnD,CAAC,CAAC;QACH,sBAAY,CAAC,cAAc,CAAC,gBAAM,CAAC,mBAAmB,EAAE;YACvD,KAAK,EAAE,QAAQ;YACf,OAAO,EAAE;gBACR,EAAE,qEAAuC;gBACzC,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAgE,CAA9D,CAAgE,EAA7D,EAAE,AAAgF,CAAC,kBAA9D,EAAE,OAAO,EAAE,CAAC,uBAAuB,CAAC;aAClF;YACD,KAAK,EAAE,CAAC;YACR,IAAI,EAAE,wDAA6C;SACnD,CAAC,CAAC;IACJ,CAAC;IA3CD,8CA2CC","file":"terminalMenu.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { MenuRegistry, MenuId } from 'vs/platform/actions/common/actions';\nimport { KEYBINDING_CONTEXT_TERMINAL_PROCESS_SUPPORTED, TERMINAL_COMMAND_ID } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\n\nexport function setupTerminalMenu() {\n\n\t// Manage\n\tconst createGroup = '1_create';\n\tMenuRegistry.appendMenuItem(MenuId.MenubarTerminalMenu, {\n\t\tgroup: createGroup,\n\t\tcommand: {\n\t\t\tid: TERMINAL_COMMAND_ID.NEW,\n\t\t\ttitle: nls.localize({ key: 'miNewTerminal', comment: ['&& denotes a mnemonic'] }, \"&&New Terminal\")\n\t\t},\n\t\torder: 1\n\t});\n\tMenuRegistry.appendMenuItem(MenuId.MenubarTerminalMenu, {\n\t\tgroup: createGroup,\n\t\tcommand: {\n\t\t\tid: TERMINAL_COMMAND_ID.SPLIT,\n\t\t\ttitle: nls.localize({ key: 'miSplitTerminal', comment: ['&& denotes a mnemonic'] }, \"&&Split Terminal\"),\n\t\t\tprecondition: ContextKeyExpr.has('terminalIsOpen')\n\t\t},\n\t\torder: 2,\n\t\twhen: KEYBINDING_CONTEXT_TERMINAL_PROCESS_SUPPORTED\n\t});\n\n\t// Run\n\tconst runGroup = '2_run';\n\tMenuRegistry.appendMenuItem(MenuId.MenubarTerminalMenu, {\n\t\tgroup: runGroup,\n\t\tcommand: {\n\t\t\tid: TERMINAL_COMMAND_ID.RUN_ACTIVE_FILE,\n\t\t\ttitle: nls.localize({ key: 'miRunActiveFile', comment: ['&& denotes a mnemonic'] }, \"Run &&Active File\")\n\t\t},\n\t\torder: 3,\n\t\twhen: KEYBINDING_CONTEXT_TERMINAL_PROCESS_SUPPORTED\n\t});\n\tMenuRegistry.appendMenuItem(MenuId.MenubarTerminalMenu, {\n\t\tgroup: runGroup,\n\t\tcommand: {\n\t\t\tid: TERMINAL_COMMAND_ID.RUN_SELECTED_TEXT,\n\t\t\ttitle: nls.localize({ key: 'miRunSelectedText', comment: ['&& denotes a mnemonic'] }, \"Run &&Selected Text\")\n\t\t},\n\t\torder: 4,\n\t\twhen: KEYBINDING_CONTEXT_TERMINAL_PROCESS_SUPPORTED\n\t});\n}\n"]}