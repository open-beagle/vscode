{"version":3,"file":"terminalEnvironment.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/terminal/node/terminalEnvironment.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAMhG,IAAI,oBAAqD,CAAC;IAEnD,KAAK,UAAU,uBAAuB,CAAC,eAAoC;QACjF,IAAI,oBAAoB,EAAE;YACzB,OAAO,oBAAoB,CAAC;SAC5B;QAED,4FAA4F;QAC5F,iCAAiC;QACjC,IAAI,kBAAO,EAAE;YACZ,MAAM,aAAa,GAAG,OAAO,CAAC,IAAI,CAAC;YACnC,MAAM,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YACvD,IAAI,GAAG,GAAW,CAAC,CAAC;YACpB,IAAI,IAAI,GAAW,aAAa,CAAC;YACjC,IAAI,IAAI,GAAW,eAAe,CAAC;YACnC,GAAG;gBACF,GAAG,GAAG,IAAI,CAAC;gBACX,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,GAAG,SAAS,EAAE,MAAM,CAAC,CAAC;gBACzE,MAAM,WAAW,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBACvC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;oBAC1B,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;wBAChC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;qBACrC;oBACD,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;wBAChC,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC,CAAC;qBAC/C;gBACF,CAAC,CAAC,CAAC;aACH,QAAQ,IAAI,KAAK,eAAe,EAAE;YACnC,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,GAAG,UAAU,EAAE,MAAM,CAAC,CAAC;YAC1E,MAAM,GAAG,GAAwB,EAAE,CAAC;YACpC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;gBAC9B,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;gBACzB,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACvC,CAAC,CAAC,CAAC;YACH,oBAAoB,GAAG,GAAG,CAAC;SAC3B;QAED,wFAAwF;QACxF,yFAAyF;QACzF,uFAAuF;QACvF,yFAAyF;QACzF,sCAAsC;QACtC,IAAI,sBAAW,EAAE;YAChB,oBAAoB,GAAG,EAAE,CAAC;YAC1B,iFAAiF;YACjF,iCAAiC;YACjC,MAAM,WAAW,GAAG;gBACnB,OAAO;gBACP,eAAe;gBACf,4BAA4B;gBAC5B,WAAW;gBACX,kBAAkB;gBAClB,MAAM;gBACN,SAAS;gBACT,QAAQ;aACR,CAAC;YACF,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;gBACvB,IAAI,eAAe,CAAC,CAAC,CAAC,EAAE;oBACvB,oBAAqB,CAAC,CAAC,CAAC,GAAG,eAAe,CAAC,CAAC,CAAE,CAAC;iBAC/C;YACF,CAAC,CAAC,CAAC;SACH;QAED,iFAAiF;QACjF,IAAI,oBAAS,EAAE;YACd,oBAAoB,GAAG,eAAe,CAAC;SACvC;QAED,OAAO,oBAAqB,CAAC;IAC9B,CAAC;IAnED,0DAmEC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as fs from 'fs';\nimport * as path from 'vs/base/common/path';\nimport { IProcessEnvironment, isLinux, isMacintosh, isWindows } from 'vs/base/common/platform';\n\nlet mainProcessParentEnv: IProcessEnvironment | undefined;\n\nexport async function getMainProcessParentEnv(baseEnvironment: IProcessEnvironment): Promise<IProcessEnvironment> {\n\tif (mainProcessParentEnv) {\n\t\treturn mainProcessParentEnv;\n\t}\n\n\t// For Linux use /proc/<pid>/status to get the parent of the main process and then fetch its\n\t// env using /proc/<pid>/environ.\n\tif (isLinux) {\n\t\tconst mainProcessId = process.ppid;\n\t\tconst codeProcessName = path.basename(process.argv[0]);\n\t\tlet pid: number = 0;\n\t\tlet ppid: number = mainProcessId;\n\t\tlet name: string = codeProcessName;\n\t\tdo {\n\t\t\tpid = ppid;\n\t\t\tconst status = await fs.promises.readFile(`/proc/${pid}/status`, 'utf8');\n\t\t\tconst splitByLine = status.split('\\n');\n\t\t\tsplitByLine.forEach(line => {\n\t\t\t\tif (line.indexOf('Name:') === 0) {\n\t\t\t\t\tname = line.replace(/^Name:\\s+/, '');\n\t\t\t\t}\n\t\t\t\tif (line.indexOf('PPid:') === 0) {\n\t\t\t\t\tppid = parseInt(line.replace(/^PPid:\\s+/, ''));\n\t\t\t\t}\n\t\t\t});\n\t\t} while (name === codeProcessName);\n\t\tconst rawEnv = await fs.promises.readFile(`/proc/${pid}/environ`, 'utf8');\n\t\tconst env: IProcessEnvironment = {};\n\t\trawEnv.split('\\0').forEach(e => {\n\t\t\tconst i = e.indexOf('=');\n\t\t\tenv[e.substr(0, i)] = e.substr(i + 1);\n\t\t});\n\t\tmainProcessParentEnv = env;\n\t}\n\n\t// For macOS we want the \"root\" environment as shells by default run as login shells. It\n\t// doesn't appear to be possible to get the \"root\" environment as `ps eww -o command` for\n\t// PID 1 (the parent of the main process when launched from the dock/finder) returns no\n\t// environment, because of this we will fill in the root environment using a allowlist of\n\t// environment variables that we have.\n\tif (isMacintosh) {\n\t\tmainProcessParentEnv = {};\n\t\t// This list was generated by diffing launching a terminal with {} and the system\n\t\t// terminal launched from finder.\n\t\tconst rootEnvVars = [\n\t\t\t'SHELL',\n\t\t\t'SSH_AUTH_SOCK',\n\t\t\t'Apple_PubSub_Socket_Render',\n\t\t\t'XPC_FLAGS',\n\t\t\t'XPC_SERVICE_NAME',\n\t\t\t'HOME',\n\t\t\t'LOGNAME',\n\t\t\t'TMPDIR'\n\t\t];\n\t\trootEnvVars.forEach(k => {\n\t\t\tif (baseEnvironment[k]) {\n\t\t\t\tmainProcessParentEnv![k] = baseEnvironment[k]!;\n\t\t\t}\n\t\t});\n\t}\n\n\t// TODO: Windows should return a fresh environment block, might need native code?\n\tif (isWindows) {\n\t\tmainProcessParentEnv = baseEnvironment;\n\t}\n\n\treturn mainProcessParentEnv!;\n}\n"]}