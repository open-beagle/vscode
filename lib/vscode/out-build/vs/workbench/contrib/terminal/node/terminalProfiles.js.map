{"version":3,"file":"terminalProfiles.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/terminal/node/terminalProfiles.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as fs from 'fs';\nimport { normalize, basename, delimiter } from 'vs/base/common/path';\nimport { enumeratePowerShellInstallations } from 'vs/base/node/powershell';\nimport { findExecutable, getWindowsBuildNumber } from 'vs/platform/terminal/node/terminalEnvironment';\nimport { ITerminalProfile, ITerminalProfileObject, ProfileSource } from 'vs/workbench/contrib/terminal/common/terminal';\nimport * as cp from 'child_process';\nimport { ExtHostVariableResolverService } from 'vs/workbench/api/common/extHostDebugService';\nimport { IWorkspaceFolder } from 'vs/platform/workspace/common/workspace';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport * as pfs from 'vs/base/node/pfs';\nimport { ITerminalEnvironment, SafeConfigProvider } from 'vs/platform/terminal/common/terminal';\nimport { Codicon } from 'vs/base/common/codicons';\nimport { isMacintosh, isWindows } from 'vs/base/common/platform';\n\nlet profileSources: Map<string, IPotentialTerminalProfile> | undefined;\n\nexport function detectAvailableProfiles(configuredProfilesOnly: boolean, safeConfigProvider: SafeConfigProvider, fsProvider?: IFsProvider, logService?: ILogService, variableResolver?: ExtHostVariableResolverService, workspaceFolder?: IWorkspaceFolder, testPaths?: string[]): Promise<ITerminalProfile[]> {\n\tfsProvider = fsProvider || {\n\t\texistsFile: pfs.SymlinkSupport.existsFile,\n\t\treadFile: fs.promises.readFile\n\t};\n\tif (isWindows) {\n\t\treturn detectAvailableWindowsProfiles(\n\t\t\tconfiguredProfilesOnly,\n\t\t\tfsProvider,\n\t\t\tlogService,\n\t\t\tsafeConfigProvider('terminal.integrated.useWslProfiles') || true,\n\t\t\tsafeConfigProvider('terminal.integrated.profiles.windows'),\n\t\t\tvariableResolver,\n\t\t\tworkspaceFolder\n\t\t);\n\t}\n\treturn detectAvailableUnixProfiles(\n\t\tfsProvider,\n\t\tlogService,\n\t\tconfiguredProfilesOnly,\n\t\tsafeConfigProvider(`terminal.integrated.profiles.${isMacintosh ? 'osx' : 'linux'}`),\n\t\ttestPaths,\n\t\tvariableResolver,\n\t\tworkspaceFolder\n\t);\n}\n\nasync function detectAvailableWindowsProfiles(configuredProfilesOnly: boolean, fsProvider: IFsProvider, logService?: ILogService, useWslProfiles?: boolean, configProfiles?: { [key: string]: ITerminalProfileObject }, variableResolver?: ExtHostVariableResolverService, workspaceFolder?: IWorkspaceFolder): Promise<ITerminalProfile[]> {\n\t// Determine the correct System32 path. We want to point to Sysnative\n\t// when the 32-bit version of VS Code is running on a 64-bit machine.\n\t// The reason for this is because PowerShell's important PSReadline\n\t// module doesn't work if this is not the case. See #27915.\n\tconst is32ProcessOn64Windows = process.env.hasOwnProperty('PROCESSOR_ARCHITEW6432');\n\tconst system32Path = `${process.env['windir']}\\\\${is32ProcessOn64Windows ? 'Sysnative' : 'System32'}`;\n\n\tlet useWSLexe = false;\n\n\tif (getWindowsBuildNumber() >= 16299) {\n\t\tuseWSLexe = true;\n\t}\n\n\tawait initializeWindowsProfiles();\n\n\tconst detectedProfiles: Map<string, ITerminalProfileObject> = new Map();\n\n\t// Add auto detected profiles\n\tif (!configuredProfilesOnly) {\n\t\tdetectedProfiles.set('PowerShell', {\n\t\t\tsource: ProfileSource.Pwsh,\n\t\t\ticon: Codicon.terminalPowershell.id,\n\t\t\tisAutoDetected: true\n\t\t});\n\t\tdetectedProfiles.set('Windows PowerShell', {\n\t\t\tpath: `${system32Path}\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe`,\n\t\t\ticon: Codicon.terminalPowershell.id,\n\t\t\tisAutoDetected: true\n\t\t});\n\t\tdetectedProfiles.set('Git Bash', { source: ProfileSource.GitBash, isAutoDetected: true });\n\t\tdetectedProfiles.set('Cygwin', {\n\t\t\tpath: [\n\t\t\t\t`${process.env['HOMEDRIVE']}\\\\cygwin64\\\\bin\\\\bash.exe`,\n\t\t\t\t`${process.env['HOMEDRIVE']}\\\\cygwin\\\\bin\\\\bash.exe`\n\t\t\t],\n\t\t\targs: ['--login'],\n\t\t\tisAutoDetected: true\n\t\t});\n\t\tdetectedProfiles.set('Command Prompt',\n\t\t\t{\n\t\t\t\tpath: `${system32Path}\\\\cmd.exe`,\n\t\t\t\ticon: Codicon.terminalCmd.id,\n\t\t\t\tisAutoDetected: true\n\t\t\t},\n\t\t);\n\t}\n\n\tapplyConfigProfilesToMap(configProfiles, detectedProfiles);\n\n\tconst resultProfiles: ITerminalProfile[] = await transformToTerminalProfiles(detectedProfiles.entries(), fsProvider, logService, variableResolver, workspaceFolder);\n\n\tif (!configuredProfilesOnly || (configuredProfilesOnly && useWslProfiles)) {\n\t\ttry {\n\t\t\tconst result = await getWslProfiles(`${system32Path}\\\\${useWSLexe ? 'wsl.exe' : 'bash.exe'}`, useWslProfiles);\n\t\t\tif (result) {\n\t\t\t\tresultProfiles.push(...result);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogService?.info('WSL is not installed, so could not detect WSL profiles');\n\t\t}\n\t}\n\n\treturn resultProfiles;\n}\n\nasync function transformToTerminalProfiles(entries: IterableIterator<[string, ITerminalProfileObject]>, fsProvider: IFsProvider, logService?: ILogService, variableResolver?: ExtHostVariableResolverService, workspaceFolder?: IWorkspaceFolder): Promise<ITerminalProfile[]> {\n\tconst resultProfiles: ITerminalProfile[] = [];\n\tfor (const [profileName, profile] of entries) {\n\t\tif (profile === null) { continue; }\n\t\tlet originalPaths: string[];\n\t\tlet args: string[] | string | undefined;\n\t\tlet icon: string | undefined;\n\t\tif ('source' in profile) {\n\t\t\tconst source = profileSources?.get(profile.source);\n\t\t\tif (!source) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\toriginalPaths = source.paths;\n\n\t\t\t// if there are configured args, override the default ones\n\t\t\targs = profile.args || source.args;\n\t\t\ticon = profile.icon || source.icon;\n\t\t} else {\n\t\t\toriginalPaths = Array.isArray(profile.path) ? profile.path : [profile.path];\n\t\t\targs = isWindows ? profile.args : Array.isArray(profile.args) ? profile.args : undefined;\n\t\t\ticon = profile.icon;\n\t\t}\n\n\t\tconst paths = originalPaths.slice();\n\n\t\tfor (let i = 0; i < paths.length; i++) {\n\t\t\tpaths[i] = await variableResolver?.resolveAsync(workspaceFolder, paths[i]) || paths[i];\n\t\t}\n\t\tconst validatedProfile = await validateProfilePaths(profileName, paths, fsProvider, args, profile.env, profile.overrideName, profile.isAutoDetected, logService);\n\t\tif (validatedProfile) {\n\t\t\tvalidatedProfile.isAutoDetected = profile.isAutoDetected;\n\t\t\tvalidatedProfile.icon = icon;\n\t\t\tresultProfiles.push(validatedProfile);\n\t\t} else {\n\t\t\tlogService?.trace('profile not validated', profileName, originalPaths);\n\t\t}\n\t}\n\treturn resultProfiles;\n}\n\nasync function initializeWindowsProfiles(): Promise<void> {\n\tif (profileSources) {\n\t\treturn;\n\t}\n\n\tprofileSources = new Map();\n\tprofileSources.set(\n\t\t'Git Bash', {\n\t\tprofileName: 'Git Bash',\n\t\tpaths: [\n\t\t\t`${process.env['ProgramW6432']}\\\\Git\\\\bin\\\\bash.exe`,\n\t\t\t`${process.env['ProgramW6432']}\\\\Git\\\\usr\\\\bin\\\\bash.exe`,\n\t\t\t`${process.env['ProgramFiles']}\\\\Git\\\\bin\\\\bash.exe`,\n\t\t\t`${process.env['ProgramFiles']}\\\\Git\\\\usr\\\\bin\\\\bash.exe`,\n\t\t\t`${process.env['LocalAppData']}\\\\Programs\\\\Git\\\\bin\\\\bash.exe`\n\t\t],\n\t\targs: ['--login']\n\t});\n\tprofileSources.set('PowerShell', {\n\t\tprofileName: 'PowerShell',\n\t\tpaths: await getPowershellPaths(),\n\t\ticon: 'terminal-powershell'\n\t});\n}\n\nasync function getPowershellPaths(): Promise<string[]> {\n\tconst paths: string[] = [];\n\t// Add all of the different kinds of PowerShells\n\tfor await (const pwshExe of enumeratePowerShellInstallations()) {\n\t\tpaths.push(pwshExe.exePath);\n\t}\n\treturn paths;\n}\n\nasync function getWslProfiles(wslPath: string, useWslProfiles?: boolean): Promise<ITerminalProfile[]> {\n\tconst profiles: ITerminalProfile[] = [];\n\tif (useWslProfiles) {\n\t\tconst distroOutput = await new Promise<string>((resolve, reject) => {\n\t\t\t// wsl.exe output is encoded in utf16le (ie. A -> 0x4100)\n\t\t\tcp.exec('wsl.exe -l -q', { encoding: 'utf16le' }, (err, stdout) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn reject('Problem occurred when getting wsl distros');\n\t\t\t\t}\n\t\t\t\tresolve(stdout);\n\t\t\t});\n\t\t});\n\t\tif (distroOutput) {\n\t\t\tconst regex = new RegExp(/[\\r?\\n]/);\n\t\t\tconst distroNames = distroOutput.split(regex).filter(t => t.trim().length > 0 && t !== '');\n\t\t\tfor (let distroName of distroNames) {\n\t\t\t\t// Skip empty lines\n\t\t\t\tif (distroName === '') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// docker-desktop and docker-desktop-data are treated as implementation details of\n\t\t\t\t// Docker Desktop for Windows and therefore not exposed\n\t\t\t\tif (distroName.startsWith('docker-desktop')) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Create the profile, adding the icon depending on the distro\n\t\t\t\tconst profile: ITerminalProfile = {\n\t\t\t\t\tprofileName: `${distroName} (WSL)`,\n\t\t\t\t\tpath: wslPath,\n\t\t\t\t\targs: [`-d`, `${distroName}`]\n\t\t\t\t};\n\t\t\t\tif (distroName.includes('Ubuntu')) {\n\t\t\t\t\tprofile.icon = 'terminal-ubuntu';\n\t\t\t\t}\n\t\t\t\telse if (distroName.includes('Debian')) {\n\t\t\t\t\tprofile.icon = 'terminal-debian';\n\t\t\t\t} else {\n\t\t\t\t\tprofile.icon = 'terminal-linux';\n\t\t\t\t}\n\n\t\t\t\t// Add the profile\n\t\t\t\tprofiles.push(profile);\n\t\t\t}\n\t\t\treturn profiles;\n\t\t}\n\t}\n\treturn [];\n}\n\nasync function detectAvailableUnixProfiles(fsProvider: IFsProvider, logService?: ILogService, configuredProfilesOnly?: boolean, configProfiles?: { [key: string]: ITerminalProfileObject }, testPaths?: string[], variableResolver?: ExtHostVariableResolverService, workspaceFolder?: IWorkspaceFolder): Promise<ITerminalProfile[]> {\n\tconst detectedProfiles: Map<string, ITerminalProfileObject> = new Map();\n\n\t// Add non-quick launch profiles\n\tif (!configuredProfilesOnly) {\n\t\tconst contents = await fsProvider.readFile('/etc/shells', 'utf8');\n\t\tconst profiles = testPaths || contents.split('\\n').filter(e => e.trim().indexOf('#') !== 0 && e.trim().length > 0);\n\t\tconst counts: Map<string, number> = new Map();\n\t\tfor (const profile of profiles) {\n\t\t\tlet profileName = basename(profile);\n\t\t\tlet count = counts.get(profileName) || 0;\n\t\t\tcount++;\n\t\t\tif (count > 1) {\n\t\t\t\tprofileName = `${profileName} (${count})`;\n\t\t\t}\n\t\t\tcounts.set(profileName, count);\n\t\t\tdetectedProfiles.set(profileName, { path: profile, isAutoDetected: true });\n\t\t}\n\t}\n\n\tapplyConfigProfilesToMap(configProfiles, detectedProfiles);\n\n\treturn await transformToTerminalProfiles(detectedProfiles.entries(), fsProvider, logService, variableResolver, workspaceFolder);\n}\n\nfunction applyConfigProfilesToMap(configProfiles: { [key: string]: ITerminalProfileObject } | undefined, profilesMap: Map<string, ITerminalProfileObject>) {\n\tif (!configProfiles) {\n\t\treturn;\n\t}\n\tfor (const [profileName, value] of Object.entries(configProfiles)) {\n\t\tif (value === null || (!('path' in value) && !('source' in value))) {\n\t\t\tprofilesMap.delete(profileName);\n\t\t} else {\n\t\t\tprofilesMap.set(profileName, value);\n\t\t}\n\t}\n}\n\nasync function validateProfilePaths(profileName: string, potentialPaths: string[], fsProvider: IFsProvider, args?: string[] | string, env?: ITerminalEnvironment, overrideName?: boolean, isAutoDetected?: boolean, logService?: ILogService): Promise<ITerminalProfile | undefined> {\n\tif (potentialPaths.length === 0) {\n\t\treturn Promise.resolve(undefined);\n\t}\n\tconst path = potentialPaths.shift()!;\n\tif (path === '') {\n\t\treturn validateProfilePaths(profileName, potentialPaths, fsProvider, args, env, overrideName, isAutoDetected);\n\t}\n\n\tconst profile: ITerminalProfile = { profileName, path, args, env, overrideName, isAutoDetected };\n\n\t// For non-absolute paths, check if it's available on $PATH\n\tif (basename(path) === path) {\n\t\t// The executable isn't an absolute path, try find it on the PATH\n\t\tconst envPaths: string[] | undefined = process.env.PATH ? process.env.PATH.split(delimiter) : undefined;\n\t\tconst executable = await findExecutable(path, undefined, envPaths, undefined, fsProvider.existsFile);\n\t\tif (!executable) {\n\t\t\treturn validateProfilePaths(profileName, potentialPaths, fsProvider, args);\n\t\t}\n\t\treturn profile;\n\t}\n\n\tconst result = await fsProvider.existsFile(normalize(path));\n\tif (result) {\n\t\treturn profile;\n\t}\n\n\treturn validateProfilePaths(profileName, potentialPaths, fsProvider, args, env, overrideName, isAutoDetected);\n}\n\nexport interface IFsProvider {\n\texistsFile(path: string): Promise<boolean>,\n\treadFile(path: string, options: { encoding: BufferEncoding, flag?: string | number } | BufferEncoding): Promise<string>;\n}\n\ninterface IPotentialTerminalProfile {\n\tprofileName: string;\n\tpaths: string[];\n\targs?: string[];\n\ticon?: string;\n}\n"]}