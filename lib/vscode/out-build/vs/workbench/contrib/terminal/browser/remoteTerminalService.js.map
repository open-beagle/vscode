{"version":3,"sources":["vs/workbench/contrib/terminal/browser/remoteTerminalService.ts"],"names":[],"mappings":"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","file":"remoteTerminalService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { revive } from 'vs/base/common/marshalling';\nimport { IProcessEnvironment, OperatingSystem } from 'vs/base/common/platform';\nimport { URI } from 'vs/base/common/uri';\nimport { localize } from 'vs/nls';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { INotificationHandle, INotificationService, IPromptChoice, Severity } from 'vs/platform/notification/common/notification';\nimport { IShellLaunchConfig, IShellLaunchConfigDto, ITerminalChildProcess, ITerminalsLayoutInfo, ITerminalsLayoutInfoById } from 'vs/platform/terminal/common/terminal';\nimport { RemotePty } from 'vs/workbench/contrib/terminal/browser/remotePty';\nimport { IRemoteTerminalService, ITerminalInstanceService } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { ICompleteTerminalConfiguration, RemoteTerminalChannelClient, REMOTE_TERMINAL_CHANNEL_NAME } from 'vs/workbench/contrib/terminal/common/remoteTerminalChannel';\nimport { IRemoteTerminalAttachTarget, ITerminalConfigHelper } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\n\nexport class RemoteTerminalService extends Disposable implements IRemoteTerminalService {\n\tpublic _serviceBrand: undefined;\n\n\tprivate readonly _ptys: Map<number, RemotePty> = new Map();\n\tprivate readonly _remoteTerminalChannel: RemoteTerminalChannelClient | null;\n\tprivate _isPtyHostUnresponsive: boolean = false;\n\n\tprivate readonly _onPtyHostUnresponsive = this._register(new Emitter<void>());\n\treadonly onPtyHostUnresponsive = this._onPtyHostUnresponsive.event;\n\tprivate readonly _onPtyHostResponsive = this._register(new Emitter<void>());\n\treadonly onPtyHostResponsive = this._onPtyHostResponsive.event;\n\tprivate readonly _onPtyHostRestart = this._register(new Emitter<void>());\n\treadonly onPtyHostRestart = this._onPtyHostRestart.event;\n\n\tconstructor(\n\t\t@ITerminalInstanceService readonly terminalInstanceService: ITerminalInstanceService,\n\t\t@IRemoteAgentService private readonly _remoteAgentService: IRemoteAgentService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@ICommandService private readonly _commandService: ICommandService,\n\t\t@INotificationService notificationService: INotificationService\n\t) {\n\t\tsuper();\n\n\t\tconst connection = this._remoteAgentService.getConnection();\n\t\tif (connection) {\n\t\t\tconst channel = this._instantiationService.createInstance(RemoteTerminalChannelClient, connection.remoteAuthority, connection.getChannel(REMOTE_TERMINAL_CHANNEL_NAME));\n\t\t\tthis._remoteTerminalChannel = channel;\n\n\t\t\tchannel.onProcessData(e => this._ptys.get(e.id)?.handleData(e.event));\n\t\t\tchannel.onProcessExit(e => {\n\t\t\t\tconst pty = this._ptys.get(e.id);\n\t\t\t\tif (pty) {\n\t\t\t\t\tpty.handleExit(e.event);\n\t\t\t\t\tthis._ptys.delete(e.id);\n\t\t\t\t}\n\t\t\t});\n\t\t\tchannel.onProcessReady(e => this._ptys.get(e.id)?.handleReady(e.event));\n\t\t\tchannel.onProcessTitleChanged(e => this._ptys.get(e.id)?.handleTitleChanged(e.event));\n\t\t\tchannel.onProcessShellTypeChanged(e => this._ptys.get(e.id)?.handleShellTypeChanged(e.event));\n\t\t\tchannel.onProcessOverrideDimensions(e => this._ptys.get(e.id)?.handleOverrideDimensions(e.event));\n\t\t\tchannel.onProcessResolvedShellLaunchConfig(e => this._ptys.get(e.id)?.handleResolvedShellLaunchConfig(e.event));\n\t\t\tchannel.onProcessReplay(e => this._ptys.get(e.id)?.handleReplay(e.event));\n\t\t\tchannel.onProcessOrphanQuestion(e => this._ptys.get(e.id)?.handleOrphanQuestion());\n\n\t\t\tconst allowedCommands = ['_remoteCLI.openExternal', '_remoteCLI.windowOpen', '_remoteCLI.getSystemStatus', '_remoteCLI.manageExtensions'];\n\t\t\tchannel.onExecuteCommand(async e => {\n\t\t\t\tconst reqId = e.reqId;\n\t\t\t\tconst commandId = e.commandId;\n\t\t\t\tif (!allowedCommands.includes(commandId)) {\n\t\t\t\t\tchannel!.sendCommandResult(reqId, true, 'Invalid remote cli command: ' + commandId);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst commandArgs = e.commandArgs.map(arg => revive(arg));\n\t\t\t\ttry {\n\t\t\t\t\tconst result = await this._commandService.executeCommand(e.commandId, ...commandArgs);\n\t\t\t\t\tchannel!.sendCommandResult(reqId, false, result);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tchannel!.sendCommandResult(reqId, true, err);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Attach pty host listeners\n\t\t\tif (channel.onPtyHostExit) {\n\t\t\t\tthis._register(channel.onPtyHostExit(() => {\n\t\t\t\t\tthis._logService.error(`The terminal's pty host process exited, the connection to all terminal processes was lost`);\n\t\t\t\t}));\n\t\t\t}\n\t\t\tlet unresponsiveNotification: INotificationHandle | undefined;\n\t\t\tif (channel.onPtyHostStart) {\n\t\t\t\tthis._register(channel.onPtyHostStart(() => {\n\t\t\t\t\tthis._logService.info(`ptyHost restarted`);\n\t\t\t\t\tthis._onPtyHostRestart.fire();\n\t\t\t\t\tunresponsiveNotification?.close();\n\t\t\t\t\tunresponsiveNotification = undefined;\n\t\t\t\t\tthis._isPtyHostUnresponsive = false;\n\t\t\t\t}));\n\t\t\t}\n\t\t\tif (channel.onPtyHostUnresponsive) {\n\t\t\t\tthis._register(channel.onPtyHostUnresponsive(() => {\n\t\t\t\t\tconst choices: IPromptChoice[] = [{\n\t\t\t\t\t\tlabel: localize('restartPtyHost', \"Restart pty host\"),\n\t\t\t\t\t\trun: () => channel.restartPtyHost!()\n\t\t\t\t\t}];\n\t\t\t\t\tunresponsiveNotification = notificationService.prompt(Severity.Error, localize('nonResponsivePtyHost', \"The connection to the terminal's pty host process is unresponsive, the terminals may stop working.\"), choices);\n\t\t\t\t\tthis._isPtyHostUnresponsive = true;\n\t\t\t\t\tthis._onPtyHostUnresponsive.fire();\n\t\t\t\t}));\n\t\t\t}\n\t\t\tif (channel.onPtyHostResponsive) {\n\t\t\t\tthis._register(channel.onPtyHostResponsive(() => {\n\t\t\t\t\tif (!this._isPtyHostUnresponsive) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tthis._logService.info('The pty host became responsive again');\n\t\t\t\t\tunresponsiveNotification?.close();\n\t\t\t\t\tunresponsiveNotification = undefined;\n\t\t\t\t\tthis._isPtyHostUnresponsive = false;\n\t\t\t\t\tthis._onPtyHostResponsive.fire();\n\t\t\t\t}));\n\t\t\t}\n\t\t} else {\n\t\t\tthis._remoteTerminalChannel = null;\n\t\t}\n\t}\n\n\tpublic async createProcess(shellLaunchConfig: IShellLaunchConfig, configuration: ICompleteTerminalConfiguration, activeWorkspaceRootUri: URI | undefined, cols: number, rows: number, shouldPersist: boolean, configHelper: ITerminalConfigHelper): Promise<ITerminalChildProcess> {\n\t\tif (!this._remoteTerminalChannel) {\n\t\t\tthrow new Error(`Cannot create remote terminal when there is no remote!`);\n\t\t}\n\n\t\t// Fetch the environment to check shell permissions\n\t\tconst remoteEnv = await this._remoteAgentService.getEnvironment();\n\t\tif (!remoteEnv) {\n\t\t\t// Extension host processes are only allowed in remote extension hosts currently\n\t\t\tthrow new Error('Could not fetch remote environment');\n\t\t}\n\n\t\tconst shellLaunchConfigDto: IShellLaunchConfigDto = {\n\t\t\tname: shellLaunchConfig.name,\n\t\t\texecutable: shellLaunchConfig.executable,\n\t\t\targs: shellLaunchConfig.args,\n\t\t\tcwd: shellLaunchConfig.cwd,\n\t\t\tenv: shellLaunchConfig.env\n\t\t};\n\t\tconst result = await this._remoteTerminalChannel.createProcess(\n\t\t\tshellLaunchConfigDto,\n\t\t\tconfiguration,\n\t\t\tactiveWorkspaceRootUri,\n\t\t\tshouldPersist,\n\t\t\tcols,\n\t\t\trows,\n\t\t);\n\t\tconst pty = new RemotePty(result.persistentTerminalId, shouldPersist, this._remoteTerminalChannel, this._remoteAgentService, this._logService);\n\t\tthis._ptys.set(result.persistentTerminalId, pty);\n\t\treturn pty;\n\t}\n\n\tpublic async attachToProcess(id: number): Promise<ITerminalChildProcess | undefined> {\n\t\tif (!this._remoteTerminalChannel) {\n\t\t\tthrow new Error(`Cannot create remote terminal when there is no remote!`);\n\t\t}\n\n\t\ttry {\n\t\t\tawait this._remoteTerminalChannel.attachToProcess(id);\n\t\t\tconst pty = new RemotePty(id, true, this._remoteTerminalChannel, this._remoteAgentService, this._logService);\n\t\t\tthis._ptys.set(id, pty);\n\t\t\treturn pty;\n\t\t} catch (e) {\n\t\t\tthis._logService.trace(`Couldn't attach to process ${e.message}`);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tpublic async listProcesses(): Promise<IRemoteTerminalAttachTarget[]> {\n\t\tconst terms = this._remoteTerminalChannel ? await this._remoteTerminalChannel.listProcesses() : [];\n\t\treturn terms.map(termDto => {\n\t\t\treturn <IRemoteTerminalAttachTarget>{\n\t\t\t\tid: termDto.id,\n\t\t\t\tpid: termDto.pid,\n\t\t\t\ttitle: termDto.title,\n\t\t\t\tcwd: termDto.cwd,\n\t\t\t\tworkspaceId: termDto.workspaceId,\n\t\t\t\tworkspaceName: termDto.workspaceName,\n\t\t\t\ticon: termDto.icon\n\t\t\t};\n\t\t});\n\t}\n\n\tpublic async getDefaultSystemShell(osOverride?: OperatingSystem): Promise<string> {\n\t\treturn this._remoteTerminalChannel?.getDefaultSystemShell(osOverride) || '';\n\t}\n\n\tpublic async getShellEnvironment(): Promise<IProcessEnvironment> {\n\t\treturn this._remoteTerminalChannel?.getShellEnvironment() || {};\n\t}\n\n\tpublic setTerminalLayoutInfo(layout: ITerminalsLayoutInfoById): Promise<void> {\n\t\tif (!this._remoteTerminalChannel) {\n\t\t\tthrow new Error(`Cannot call setActiveInstanceId when there is no remote`);\n\t\t}\n\n\t\treturn this._remoteTerminalChannel.setTerminalLayoutInfo(layout);\n\t}\n\n\tpublic async reduceConnectionGraceTime(): Promise<void> {\n\t\tif (!this._remoteTerminalChannel) {\n\t\t\tthrow new Error('Cannot reduce grace time when there is no remote');\n\t\t}\n\t\treturn this._remoteTerminalChannel.reduceConnectionGraceTime();\n\t}\n\n\tpublic async getTerminalLayoutInfo(): Promise<ITerminalsLayoutInfo | undefined> {\n\t\tif (!this._remoteTerminalChannel) {\n\t\t\tthrow new Error(`Cannot call getActiveInstanceId when there is no remote`);\n\t\t}\n\n\t\treturn this._remoteTerminalChannel.getTerminalLayoutInfo();\n\t}\n}\n"]}