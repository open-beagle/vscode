{"version":3,"file":"remotePty.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/terminal/browser/remotePty.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Barrier } from 'vs/base/common/async';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IProcessDataEvent, IShellLaunchConfig, ITerminalChildProcess, ITerminalDimensionsOverride, ITerminalLaunchError, TerminalShellType } from 'vs/platform/terminal/common/terminal';\nimport { IPtyHostProcessReplayEvent } from 'vs/platform/terminal/common/terminalProcess';\nimport { RemoteTerminalChannelClient } from 'vs/workbench/contrib/terminal/common/remoteTerminalChannel';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\n\nexport class RemotePty extends Disposable implements ITerminalChildProcess {\n\n\tpublic readonly _onProcessData = this._register(new Emitter<string | IProcessDataEvent>());\n\tpublic readonly onProcessData: Event<string | IProcessDataEvent> = this._onProcessData.event;\n\tprivate readonly _onProcessExit = this._register(new Emitter<number | undefined>());\n\tpublic readonly onProcessExit: Event<number | undefined> = this._onProcessExit.event;\n\tpublic readonly _onProcessReady = this._register(new Emitter<{ pid: number, cwd: string }>());\n\tpublic get onProcessReady(): Event<{ pid: number, cwd: string }> { return this._onProcessReady.event; }\n\tprivate readonly _onProcessTitleChanged = this._register(new Emitter<string>());\n\tpublic readonly onProcessTitleChanged: Event<string> = this._onProcessTitleChanged.event;\n\tprivate readonly _onProcessShellTypeChanged = this._register(new Emitter<TerminalShellType | undefined>());\n\tpublic readonly onProcessShellTypeChanged = this._onProcessShellTypeChanged.event;\n\tprivate readonly _onProcessOverrideDimensions = this._register(new Emitter<ITerminalDimensionsOverride | undefined>());\n\tpublic readonly onProcessOverrideDimensions: Event<ITerminalDimensionsOverride | undefined> = this._onProcessOverrideDimensions.event;\n\tprivate readonly _onProcessResolvedShellLaunchConfig = this._register(new Emitter<IShellLaunchConfig>());\n\tpublic get onProcessResolvedShellLaunchConfig(): Event<IShellLaunchConfig> { return this._onProcessResolvedShellLaunchConfig.event; }\n\n\tprivate _startBarrier: Barrier;\n\n\tprivate _inReplay = false;\n\n\tpublic get id(): number { return this._id; }\n\n\tconstructor(\n\t\tprivate _id: number,\n\t\treadonly shouldPersist: boolean,\n\t\tprivate readonly _remoteTerminalChannel: RemoteTerminalChannelClient,\n\t\tprivate readonly _remoteAgentService: IRemoteAgentService,\n\t\tprivate readonly _logService: ILogService\n\t) {\n\t\tsuper();\n\t\tthis._startBarrier = new Barrier();\n\t}\n\n\tpublic async start(): Promise<ITerminalLaunchError | undefined> {\n\t\t// Fetch the environment to check shell permissions\n\t\tconst env = await this._remoteAgentService.getEnvironment();\n\t\tif (!env) {\n\t\t\t// Extension host processes are only allowed in remote extension hosts currently\n\t\t\tthrow new Error('Could not fetch remote environment');\n\t\t}\n\n\t\tthis._logService.trace('Spawning remote agent process', { terminalId: this._id });\n\n\t\tconst startResult = await this._remoteTerminalChannel.start(this._id);\n\n\t\tif (typeof startResult !== 'undefined') {\n\t\t\t// An error occurred\n\t\t\treturn startResult;\n\t\t}\n\n\t\tthis._startBarrier.open();\n\t\treturn undefined;\n\t}\n\n\tpublic shutdown(immediate: boolean): void {\n\t\tthis._startBarrier.wait().then(_ => {\n\t\t\tthis._remoteTerminalChannel.shutdown(this._id, immediate);\n\t\t});\n\t}\n\n\tpublic input(data: string): void {\n\t\tif (this._inReplay) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._startBarrier.wait().then(_ => {\n\t\t\tthis._remoteTerminalChannel.input(this._id, data);\n\t\t});\n\t}\n\n\tpublic resize(cols: number, rows: number): void {\n\t\tif (this._inReplay) {\n\t\t\treturn;\n\t\t}\n\t\tthis._startBarrier.wait().then(_ => {\n\n\t\t\tthis._remoteTerminalChannel.resize(this._id, cols, rows);\n\t\t});\n\t}\n\n\tpublic acknowledgeDataEvent(charCount: number): void {\n\t\t// Support flow control for server spawned processes\n\t\tif (this._inReplay) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._startBarrier.wait().then(_ => {\n\t\t\tthis._remoteTerminalChannel.acknowledgeDataEvent(this._id, charCount);\n\t\t});\n\t}\n\n\tpublic async getInitialCwd(): Promise<string> {\n\t\tawait this._startBarrier.wait();\n\t\treturn this._remoteTerminalChannel.getInitialCwd(this._id);\n\t}\n\n\tpublic async getCwd(): Promise<string> {\n\t\tawait this._startBarrier.wait();\n\t\treturn this._remoteTerminalChannel.getCwd(this._id);\n\t}\n\n\thandleData(e: string | IProcessDataEvent) {\n\t\tthis._onProcessData.fire(e);\n\t}\n\tprocessBinary(e: string): Promise<void> {\n\t\treturn this._remoteTerminalChannel.processBinary(this._id, e);\n\t}\n\thandleExit(e: number | undefined) {\n\t\tthis._onProcessExit.fire(e);\n\t}\n\thandleReady(e: { pid: number, cwd: string }) {\n\t\tthis._onProcessReady.fire(e);\n\t}\n\thandleTitleChanged(e: string) {\n\t\tthis._onProcessTitleChanged.fire(e);\n\t}\n\thandleShellTypeChanged(e: TerminalShellType | undefined) {\n\t\tthis._onProcessShellTypeChanged.fire(e);\n\t}\n\thandleOverrideDimensions(e: ITerminalDimensionsOverride | undefined) {\n\t\tthis._onProcessOverrideDimensions.fire(e);\n\t}\n\thandleResolvedShellLaunchConfig(e: IShellLaunchConfig) {\n\t\t// Revive the cwd URI\n\t\tif (e.cwd && typeof e.cwd !== 'string') {\n\t\t\te.cwd = URI.revive(e.cwd);\n\t\t}\n\t\tthis._onProcessResolvedShellLaunchConfig.fire(e);\n\t}\n\n\tasync handleReplay(e: IPtyHostProcessReplayEvent) {\n\t\ttry {\n\t\t\tthis._inReplay = true;\n\t\t\tfor (const innerEvent of e.events) {\n\t\t\t\tif (innerEvent.cols !== 0 || innerEvent.rows !== 0) {\n\t\t\t\t\t// never override with 0x0 as that is a marker for an unknown initial size\n\t\t\t\t\tthis._onProcessOverrideDimensions.fire({ cols: innerEvent.cols, rows: innerEvent.rows, forceExactSize: true });\n\t\t\t\t}\n\t\t\t\tconst e: IProcessDataEvent = { data: innerEvent.data, trackCommit: true };\n\t\t\t\tthis._onProcessData.fire(e);\n\t\t\t\tawait e.writePromise;\n\t\t\t}\n\t\t} finally {\n\t\t\tthis._inReplay = false;\n\t\t}\n\n\t\t// remove size override\n\t\tthis._onProcessOverrideDimensions.fire(undefined);\n\t}\n\n\thandleOrphanQuestion() {\n\t\tthis._remoteTerminalChannel.orphanQuestionReply(this._id);\n\t}\n\n\tpublic async getLatency(): Promise<number> {\n\t\treturn 0;\n\t}\n}\n"]}