{"version":3,"file":"terminalStatusList.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/terminal/browser/terminalStatusList.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Codicon } from 'vs/base/common/codicons';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport Severity from 'vs/base/common/severity';\nimport { listErrorForeground, listWarningForeground } from 'vs/platform/theme/common/colorRegistry';\nimport { IHoverAction } from 'vs/workbench/services/hover/browser/hover';\n\n/**\n * The set of _internal_ terminal statuses, other components building on the terminal should put\n * their statuses within their component.\n */\nexport const enum TerminalStatus {\n\tBell = 'bell',\n\tDisconnected = 'disconnected',\n\tRelaunchNeeded = 'relaunch-needed',\n}\n\nexport interface ITerminalStatus {\n\t/** An internal string ID used to identify the status. */\n\tid: string;\n\t/**\n\t * The severity of the status, this defines both the color and how likely the status is to be\n\t * the \"primary status\".\n\t */\n\tseverity: Severity;\n\t/**\n\t * An icon representing the status, if this is not specified it will not show up on the terminal\n\t * tab and will use the generic `info` icon when hovering.\n\t */\n\ticon?: Codicon;\n\t/**\n\t * What to show for this status in the terminal's hover.\n\t */\n\ttooltip?: string | undefined;\n\t/**\n\t * Actions to expose on hover.\n\t */\n\thoverActions?: IHoverAction[];\n}\n\nexport interface ITerminalStatusList {\n\t/** Gets the most recent, highest severity status. */\n\treadonly primary: ITerminalStatus | undefined;\n\t/** Gets all active statues. */\n\treadonly statuses: ITerminalStatus[];\n\n\treadonly onDidAddStatus: Event<ITerminalStatus>;\n\treadonly onDidRemoveStatus: Event<ITerminalStatus>;\n\treadonly onDidChangePrimaryStatus: Event<ITerminalStatus | undefined>;\n\n\t/**\n\t * Adds a status to the list.\n\t * @param duration An optional duration in milliseconds of the status, when specified the status\n\t * will remove itself when the duration elapses unless the status gets re-added.\n\t */\n\tadd(status: ITerminalStatus, duration?: number): void;\n\tremove(status: ITerminalStatus): void;\n\tremove(statusId: string): void;\n\ttoggle(status: ITerminalStatus, value: boolean): void;\n}\n\nexport class TerminalStatusList extends Disposable implements ITerminalStatusList {\n\tprivate readonly _statuses: Map<string, ITerminalStatus> = new Map();\n\tprivate readonly _statusTimeouts: Map<string, number> = new Map();\n\n\tprivate readonly _onDidAddStatus = this._register(new Emitter<ITerminalStatus>());\n\tget onDidAddStatus(): Event<ITerminalStatus> { return this._onDidAddStatus.event; }\n\tprivate readonly _onDidRemoveStatus = this._register(new Emitter<ITerminalStatus>());\n\tget onDidRemoveStatus(): Event<ITerminalStatus> { return this._onDidRemoveStatus.event; }\n\tprivate readonly _onDidChangePrimaryStatus = this._register(new Emitter<ITerminalStatus | undefined>());\n\tget onDidChangePrimaryStatus(): Event<ITerminalStatus | undefined> { return this._onDidChangePrimaryStatus.event; }\n\n\tget primary(): ITerminalStatus | undefined {\n\t\tlet result: ITerminalStatus | undefined;\n\t\tfor (const s of this._statuses.values()) {\n\t\t\tif (!result || s.severity >= result.severity) {\n\t\t\t\tresult = s;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tget statuses(): ITerminalStatus[] { return Array.from(this._statuses.values()); }\n\n\tadd(status: ITerminalStatus, duration?: number) {\n\t\tconst outTimeout = this._statusTimeouts.get(status.id);\n\t\tif (outTimeout) {\n\t\t\twindow.clearTimeout(outTimeout);\n\t\t\tthis._statusTimeouts.delete(status.id);\n\t\t}\n\t\tif (duration && duration > 0) {\n\t\t\tconst timeout = window.setTimeout(() => this.remove(status), duration);\n\t\t\tthis._statusTimeouts.set(status.id, timeout);\n\t\t}\n\t\tif (!this._statuses.has(status.id)) {\n\t\t\tconst oldPrimary = this.primary;\n\t\t\tthis._statuses.set(status.id, status);\n\t\t\tthis._onDidAddStatus.fire(status);\n\t\t\tconst newPrimary = this.primary;\n\t\t\tif (oldPrimary !== newPrimary) {\n\t\t\t\tthis._onDidChangePrimaryStatus.fire(newPrimary);\n\t\t\t}\n\t\t}\n\t}\n\n\tremove(status: ITerminalStatus): void;\n\tremove(statusId: string): void;\n\tremove(statusOrId: ITerminalStatus | string): void {\n\t\tconst status = typeof statusOrId === 'string' ? this._statuses.get(statusOrId) : statusOrId;\n\t\t// Verify the status is the same as the one passed in\n\t\tif (status && this._statuses.get(status.id)) {\n\t\t\tconst wasPrimary = this.primary?.id === status.id;\n\t\t\tthis._statuses.delete(status.id);\n\t\t\tthis._onDidRemoveStatus.fire(status);\n\t\t\tif (wasPrimary) {\n\t\t\t\tthis._onDidChangePrimaryStatus.fire(this.primary);\n\t\t\t}\n\t\t}\n\t}\n\n\ttoggle(status: ITerminalStatus, value: boolean) {\n\t\tif (value) {\n\t\t\tthis.add(status);\n\t\t} else {\n\t\t\tthis.remove(status);\n\t\t}\n\t}\n}\n\nexport function getColorForSeverity(severity: Severity): string {\n\tswitch (severity) {\n\t\tcase Severity.Error:\n\t\t\treturn listErrorForeground;\n\t\tcase Severity.Warning:\n\t\t\treturn listWarningForeground;\n\t\tdefault:\n\t\t\treturn '';\n\t}\n}\n"]}