{"version":3,"file":"terminalProfileResolverService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/terminal/browser/terminalProfileResolverService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Schemas } from 'vs/base/common/network';\nimport { env } from 'vs/base/common/process';\nimport { withNullAsUndefined } from 'vs/base/common/types';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IWorkspaceContextService, IWorkspaceFolder } from 'vs/platform/workspace/common/workspace';\nimport { IRemoteTerminalService, ITerminalService } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { IConfigurationResolverService } from 'vs/workbench/services/configurationResolver/common/configurationResolver';\nimport { IHistoryService } from 'vs/workbench/services/history/common/history';\nimport { IProcessEnvironment, OperatingSystem } from 'vs/base/common/platform';\nimport { IShellLaunchConfig } from 'vs/platform/terminal/common/terminal';\nimport { IShellLaunchConfigResolveOptions, ITerminalProfile, ITerminalProfileResolverService } from 'vs/workbench/contrib/terminal/common/terminal';\nimport * as path from 'vs/base/common/path';\nimport { Codicon, iconRegistry } from 'vs/base/common/codicons';\n\nexport interface IProfileContextProvider {\n\tgetDefaultSystemShell: (remoteAuthority: string | undefined, os: OperatingSystem) => Promise<string>;\n\tgetShellEnvironment: (remoteAuthority: string | undefined) => Promise<IProcessEnvironment>;\n}\n\nconst generatedProfileName = 'Generated';\n\nexport abstract class BaseTerminalProfileResolverService implements ITerminalProfileResolverService {\n\tdeclare _serviceBrand: undefined;\n\n\tconstructor(\n\t\tprivate readonly _context: IProfileContextProvider,\n\t\tprivate readonly _configurationService: IConfigurationService,\n\t\tprivate readonly _configurationResolverService: IConfigurationResolverService,\n\t\tprivate readonly _historyService: IHistoryService,\n\t\tprivate readonly _logService: ILogService,\n\t\tprivate readonly _terminalService: ITerminalService,\n\t\tprivate readonly _workspaceContextService: IWorkspaceContextService,\n\t) {\n\t}\n\n\tresolveIcon(shellLaunchConfig: IShellLaunchConfig, os: OperatingSystem): void {\n\t\tif (shellLaunchConfig.executable) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst defaultProfile = this._getRealDefaultProfile(true, os);\n\t\tif (defaultProfile) {\n\t\t\tshellLaunchConfig.icon = defaultProfile.icon;\n\t\t}\n\t}\n\n\tasync resolveShellLaunchConfig(shellLaunchConfig: IShellLaunchConfig, options: IShellLaunchConfigResolveOptions): Promise<void> {\n\t\t// Resolve the shell and shell args\n\t\tlet resolvedProfile: ITerminalProfile;\n\t\tif (shellLaunchConfig.executable) {\n\t\t\tresolvedProfile = await this._resolveProfile({\n\t\t\t\tpath: shellLaunchConfig.executable,\n\t\t\t\targs: shellLaunchConfig.args,\n\t\t\t\tprofileName: generatedProfileName\n\t\t\t}, options);\n\t\t} else {\n\t\t\tresolvedProfile = await this.getDefaultProfile(options);\n\t\t}\n\t\tshellLaunchConfig.executable = resolvedProfile.path;\n\t\tshellLaunchConfig.args = resolvedProfile.args;\n\t\tif (resolvedProfile.env) {\n\t\t\tif (shellLaunchConfig.env) {\n\t\t\t\tshellLaunchConfig.env = { ...shellLaunchConfig.env, ...resolvedProfile.env };\n\t\t\t} else {\n\t\t\t\tshellLaunchConfig.env = resolvedProfile.env;\n\t\t\t}\n\t\t}\n\n\t\t// Verify the icon is valid, and fallback correctly to the generic terminal id if there is\n\t\t// an issue\n\t\tshellLaunchConfig.icon = this._verifyIcon(shellLaunchConfig.icon) || this._verifyIcon(resolvedProfile.icon) || Codicon.terminal.id;\n\t}\n\n\tprivate _verifyIcon(iconId?: string): string | undefined {\n\t\tif (!iconId || !iconRegistry.get(iconId)) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn iconId;\n\t}\n\n\tasync getDefaultShell(options: IShellLaunchConfigResolveOptions): Promise<string> {\n\t\treturn (await this.getDefaultProfile(options)).path;\n\t}\n\n\tasync getDefaultShellArgs(options: IShellLaunchConfigResolveOptions): Promise<string | string[]> {\n\t\treturn (await this.getDefaultProfile(options)).args || [];\n\t}\n\n\tasync getDefaultProfile(options: IShellLaunchConfigResolveOptions): Promise<ITerminalProfile> {\n\t\treturn this._resolveProfile(await this._getUnresolvedDefaultProfile(options), options);\n\t}\n\n\tgetShellEnvironment(remoteAuthority: string | undefined): Promise<IProcessEnvironment> {\n\t\treturn this._context.getShellEnvironment(remoteAuthority);\n\t}\n\n\tprivate async _getUnresolvedDefaultProfile(options: IShellLaunchConfigResolveOptions): Promise<ITerminalProfile> {\n\t\t// If automation shell is allowed, prefer that\n\t\tif (options.allowAutomationShell) {\n\t\t\tconst automationShellProfile = this._getAutomationShellProfile(options);\n\t\t\tif (automationShellProfile) {\n\t\t\t\treturn automationShellProfile;\n\t\t\t}\n\t\t}\n\n\t\t// Return the real default profile if it exists and is valid\n\t\tconst defaultProfile = await this._getRealDefaultProfile(false, options.os);\n\t\tif (defaultProfile) {\n\t\t\treturn defaultProfile;\n\t\t}\n\n\t\t// If there is no real default profile, create a fallback default profile based on the shell\n\t\t// and shellArgs settings in addition to the current environment.\n\t\treturn this._getFallbackDefaultProfile(options);\n\t}\n\n\tprivate _getRealDefaultProfile(sync: true, os: OperatingSystem): ITerminalProfile | undefined;\n\tprivate _getRealDefaultProfile(sync: false, os: OperatingSystem): Promise<ITerminalProfile | undefined>;\n\tprivate _getRealDefaultProfile(sync: boolean, os: OperatingSystem): ITerminalProfile | undefined | Promise<ITerminalProfile | undefined> {\n\t\tconst defaultProfileName = this.getSafeConfigValue('defaultProfile', os);\n\t\tif (defaultProfileName && typeof defaultProfileName === 'string') {\n\t\t\tif (sync) {\n\t\t\t\tconst profiles = this._terminalService.availableProfiles;\n\t\t\t\treturn profiles.find(e => e.profileName === defaultProfileName);\n\t\t\t} else {\n\t\t\t\treturn this._terminalService.availableProfiles.find(e => e.profileName === defaultProfileName);\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate async _getFallbackDefaultProfile(options: IShellLaunchConfigResolveOptions): Promise<ITerminalProfile> {\n\t\tlet executable: string;\n\t\tlet args: string | string[] | undefined;\n\t\tconst shellSetting = this.getSafeConfigValue('shell', options.os);\n\t\tif (this._isValidShell(shellSetting)) {\n\t\t\texecutable = shellSetting;\n\t\t\tconst shellArgsSetting = this.getSafeConfigValue('shellArgs', options.os);\n\t\t\tif (this._isValidShellArgs(shellArgsSetting, options.os)) {\n\t\t\t\targs = shellArgsSetting;\n\t\t\t}\n\t\t} else {\n\t\t\texecutable = await this._context.getDefaultSystemShell(options.remoteAuthority, options.os);\n\t\t}\n\n\t\tif (args === undefined) {\n\t\t\tif (options.os === OperatingSystem.Macintosh && args === undefined) {\n\t\t\t\t// macOS should launch a login shell by default\n\t\t\t\targs = ['--login'];\n\t\t\t} else {\n\t\t\t\t// Resolve undefined to []\n\t\t\t\targs = [];\n\t\t\t}\n\t\t}\n\n\t\tconst icon = this._guessProfileIcon(executable);\n\n\t\treturn {\n\t\t\tprofileName: generatedProfileName,\n\t\t\tpath: executable,\n\t\t\targs,\n\t\t\ticon\n\t\t};\n\t}\n\n\tprivate _getAutomationShellProfile(options: IShellLaunchConfigResolveOptions): ITerminalProfile | undefined {\n\t\tconst automationShell = this.getSafeConfigValue('automationShell', options.os);\n\t\tif (!automationShell || typeof automationShell !== 'string') {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn {\n\t\t\tpath: automationShell,\n\t\t\tprofileName: generatedProfileName\n\t\t};\n\t}\n\n\tprivate async _resolveProfile(profile: ITerminalProfile, options: IShellLaunchConfigResolveOptions): Promise<ITerminalProfile> {\n\t\tif (options.os === OperatingSystem.Windows) {\n\t\t\t// Change Sysnative to System32 if the OS is Windows but NOT WoW64. It's\n\t\t\t// safe to assume that this was used by accident as Sysnative does not\n\t\t\t// exist and will break the terminal in non-WoW64 environments.\n\t\t\tconst env = await this._context.getShellEnvironment(options.remoteAuthority);\n\t\t\tconst isWoW64 = !!env.hasOwnProperty('PROCESSOR_ARCHITEW6432');\n\t\t\tconst windir = env.windir;\n\t\t\tif (!isWoW64 && windir) {\n\t\t\t\tconst sysnativePath = path.join(windir, 'Sysnative').replace(/\\//g, '\\\\').toLowerCase();\n\t\t\t\tif (profile.path && profile.path.toLowerCase().indexOf(sysnativePath) === 0) {\n\t\t\t\t\tprofile.path = path.join(windir, 'System32', profile.path.substr(sysnativePath.length + 1));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Convert / to \\ on Windows for convenience\n\t\t\tif (profile.path) {\n\t\t\t\tprofile.path = profile.path.replace(/\\//g, '\\\\');\n\t\t\t}\n\t\t}\n\n\t\t// Resolve path variables\n\t\tconst env = await this._context.getShellEnvironment(options.remoteAuthority);\n\t\tconst activeWorkspaceRootUri = this._historyService.getLastActiveWorkspaceRoot(Schemas.file);\n\t\tconst lastActiveWorkspace = activeWorkspaceRootUri ? withNullAsUndefined(this._workspaceContextService.getWorkspaceFolder(activeWorkspaceRootUri)) : undefined;\n\t\tprofile.path = this._resolveVariables(profile.path, env, lastActiveWorkspace);\n\n\t\t// Resolve args variables\n\t\tif (profile.args) {\n\t\t\tif (typeof profile.args === 'string') {\n\t\t\t\tprofile.args = this._resolveVariables(profile.args, env, lastActiveWorkspace);\n\t\t\t} else {\n\t\t\t\tfor (let i = 0; i < profile.args.length; i++) {\n\t\t\t\t\tprofile.args[i] = this._resolveVariables(profile.args[i], env, lastActiveWorkspace);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn profile;\n\t}\n\n\tprivate _resolveVariables(value: string, env: IProcessEnvironment, lastActiveWorkspace: IWorkspaceFolder | undefined) {\n\t\ttry {\n\t\t\tvalue = this._configurationResolverService.resolveWithEnvironment(env, lastActiveWorkspace, value);\n\t\t} catch (e) {\n\t\t\tthis._logService.error(`Could not resolve shell`, e);\n\t\t}\n\t\treturn value;\n\t}\n\n\tprivate _getOsKey(os: OperatingSystem): string {\n\t\tswitch (os) {\n\t\t\tcase OperatingSystem.Linux: return 'linux';\n\t\t\tcase OperatingSystem.Macintosh: return 'osx';\n\t\t\tcase OperatingSystem.Windows: return 'windows';\n\t\t}\n\t}\n\n\tprivate _guessProfileIcon(shell: string): string | undefined {\n\t\tconst file = path.parse(shell).name;\n\t\tswitch (file) {\n\t\t\tcase 'bash':\n\t\t\t\treturn Codicon.terminalBash.id;\n\t\t\tcase 'pwsh':\n\t\t\tcase 'powershell':\n\t\t\t\treturn Codicon.terminalPowershell.id;\n\t\t\tcase 'tmux':\n\t\t\t\treturn Codicon.terminalTmux.id;\n\t\t\tcase 'cmd':\n\t\t\t\treturn Codicon.terminalCmd.id;\n\t\t\tdefault:\n\t\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tprivate _isValidShell(shell: unknown): shell is string {\n\t\tif (!shell) {\n\t\t\treturn false;\n\t\t}\n\t\treturn typeof shell === 'string';\n\t}\n\n\tprivate _isValidShellArgs(shellArgs: unknown, os: OperatingSystem): shellArgs is string | string[] | undefined {\n\t\tif (shellArgs === undefined) {\n\t\t\treturn true;\n\t\t}\n\t\tif (os === OperatingSystem.Windows && typeof shellArgs === 'string') {\n\t\t\treturn true;\n\t\t}\n\t\tif (Array.isArray(shellArgs) && shellArgs.every(e => typeof e === 'string')) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t// TODO: Remove when workspace trust is enabled\n\tgetSafeConfigValue(key: string, os: OperatingSystem): unknown | undefined {\n\t\treturn this.getSafeConfigValueFullKey(`terminal.integrated.${key}.${this._getOsKey(os)}`);\n\t}\n\tgetSafeConfigValueFullKey(key: string): unknown | undefined {\n\t\tconst isWorkspaceConfigAllowed = this._configurationService.getValue('terminal.integrated.allowWorkspaceConfiguration');\n\t\tif (isWorkspaceConfigAllowed) {\n\t\t\treturn this._configurationService.getValue(key);\n\t\t} else {\n\t\t\tconst config = this._configurationService.inspect(key);\n\t\t\tconst value = config.user?.value || config.default?.value;\n\t\t\t// Clone if needed to allow extensibility\n\t\t\tif (Array.isArray(value)) {\n\t\t\t\treturn value.slice();\n\t\t\t}\n\t\t\tif (typeof value === 'object') {\n\t\t\t\treturn { ...value };\n\t\t\t}\n\t\t\treturn value;\n\t\t}\n\t}\n}\n\nexport class BrowserTerminalProfileResolverService extends BaseTerminalProfileResolverService {\n\n\tconstructor(\n\t\t@IConfigurationResolverService configurationResolverService: IConfigurationResolverService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IHistoryService historyService: IHistoryService,\n\t\t@ILogService logService: ILogService,\n\t\t@IRemoteTerminalService remoteTerminalService: IRemoteTerminalService,\n\t\t@ITerminalService terminalService: ITerminalService,\n\t\t@IWorkspaceContextService workspaceContextService: IWorkspaceContextService,\n\t) {\n\t\tsuper(\n\t\t\t{\n\t\t\t\tgetDefaultSystemShell: async (remoteAuthority, os) => {\n\t\t\t\t\tif (!remoteAuthority) {\n\t\t\t\t\t\t// Just return basic values, this is only for serverless web and wouldn't be used\n\t\t\t\t\t\treturn os === OperatingSystem.Windows ? 'pwsh' : 'bash';\n\t\t\t\t\t}\n\t\t\t\t\treturn remoteTerminalService.getDefaultSystemShell(os);\n\t\t\t\t},\n\t\t\t\tgetShellEnvironment: async (remoteAuthority) => {\n\t\t\t\t\tif (!remoteAuthority) {\n\t\t\t\t\t\treturn env;\n\t\t\t\t\t}\n\t\t\t\t\treturn remoteTerminalService.getShellEnvironment();\n\t\t\t\t}\n\t\t\t},\n\t\t\tconfigurationService,\n\t\t\tconfigurationResolverService,\n\t\t\thistoryService,\n\t\t\tlogService,\n\t\t\tterminalService,\n\t\t\tworkspaceContextService\n\t\t);\n\t}\n}\n"]}