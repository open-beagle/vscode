{"version":3,"sources":["vs/workbench/contrib/terminal/browser/terminal.contribution.ts"],"names":[],"mappings":"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","file":"terminal.contribution.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport 'vs/css!./media/scrollbar';\nimport 'vs/css!./media/terminal';\nimport 'vs/css!./media/widgets';\nimport 'vs/css!./media/xterm';\nimport * as nls from 'vs/nls';\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { ContextKeyExpr, ContextKeyExpression } from 'vs/platform/contextkey/common/contextkey';\nimport { KeybindingWeight, KeybindingsRegistry, IKeybindings } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport * as panel from 'vs/workbench/browser/panel';\nimport { getQuickNavigateHandler } from 'vs/workbench/browser/quickaccess';\nimport { Extensions as ViewContainerExtensions, IViewContainersRegistry, ViewContainerLocation, IViewsRegistry } from 'vs/workbench/common/views';\nimport { registerTerminalActions, terminalSendSequenceCommand } from 'vs/workbench/contrib/terminal/browser/terminalActions';\nimport { TerminalViewPane } from 'vs/workbench/contrib/terminal/browser/terminalView';\nimport { KEYBINDING_CONTEXT_TERMINAL_SHELL_TYPE_KEY, KEYBINDING_CONTEXT_TERMINAL_FOCUS, TERMINAL_VIEW_ID, TERMINAL_COMMAND_ID } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { registerColors } from 'vs/workbench/contrib/terminal/common/terminalColorRegistry';\nimport { setupTerminalCommands } from 'vs/workbench/contrib/terminal/browser/terminalCommands';\nimport { setupTerminalMenu } from 'vs/workbench/contrib/terminal/common/terminalMenu';\nimport { IConfigurationRegistry, Extensions } from 'vs/platform/configuration/common/configurationRegistry';\nimport { TerminalService } from 'vs/workbench/contrib/terminal/browser/terminalService';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IRemoteTerminalService, ITerminalService } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';\nimport { ViewPaneContainer } from 'vs/workbench/browser/parts/views/viewPaneContainer';\nimport { IQuickAccessRegistry, Extensions as QuickAccessExtensions } from 'vs/platform/quickinput/common/quickAccess';\nimport { TerminalQuickAccessProvider } from 'vs/workbench/contrib/terminal/browser/terminalQuickAccess';\nimport { terminalConfiguration } from 'vs/workbench/contrib/terminal/common/terminalConfiguration';\nimport { CONTEXT_ACCESSIBILITY_MODE_ENABLED } from 'vs/platform/accessibility/common/accessibility';\nimport { terminalViewIcon } from 'vs/workbench/contrib/terminal/browser/terminalIcons';\nimport { RemoteTerminalService } from 'vs/workbench/contrib/terminal/browser/remoteTerminalService';\nimport { isIPad } from 'vs/base/browser/browser';\nimport { WindowsShellType } from 'vs/platform/terminal/common/terminal';\nimport { isWindows } from 'vs/base/common/platform';\n\n// Register services\nregisterSingleton(ITerminalService, TerminalService, true);\nregisterSingleton(IRemoteTerminalService, RemoteTerminalService);\n\n// Register quick accesses\nconst quickAccessRegistry = (Registry.as<IQuickAccessRegistry>(QuickAccessExtensions.Quickaccess));\nconst inTerminalsPicker = 'inTerminalPicker';\nquickAccessRegistry.registerQuickAccessProvider({\n\tctor: TerminalQuickAccessProvider,\n\tprefix: TerminalQuickAccessProvider.PREFIX,\n\tcontextKey: inTerminalsPicker,\n\tplaceholder: nls.localize('tasksQuickAccessPlaceholder', \"Type the name of a terminal to open.\"),\n\thelpEntries: [{ description: nls.localize('tasksQuickAccessHelp', \"Show All Opened Terminals\"), needsEditor: false }]\n});\nconst quickAccessNavigateNextInTerminalPickerId = 'workbench.action.quickOpenNavigateNextInTerminalPicker';\nCommandsRegistry.registerCommand({ id: quickAccessNavigateNextInTerminalPickerId, handler: getQuickNavigateHandler(quickAccessNavigateNextInTerminalPickerId, true) });\nconst quickAccessNavigatePreviousInTerminalPickerId = 'workbench.action.quickOpenNavigatePreviousInTerminalPicker';\nCommandsRegistry.registerCommand({ id: quickAccessNavigatePreviousInTerminalPickerId, handler: getQuickNavigateHandler(quickAccessNavigatePreviousInTerminalPickerId, false) });\n\n// Register configurations\nconst configurationRegistry = Registry.as<IConfigurationRegistry>(Extensions.Configuration);\nconfigurationRegistry.registerConfiguration(terminalConfiguration);\n\n// Register views\nconst VIEW_CONTAINER = Registry.as<IViewContainersRegistry>(ViewContainerExtensions.ViewContainersRegistry).registerViewContainer({\n\tid: TERMINAL_VIEW_ID,\n\ttitle: nls.localize('terminal', \"Terminal\"),\n\ticon: terminalViewIcon,\n\tctorDescriptor: new SyncDescriptor(ViewPaneContainer, [TERMINAL_VIEW_ID, { mergeViewWithContainerWhenSingleView: true, donotShowContainerTitleWhenMergedWithContainer: true }]),\n\tstorageId: TERMINAL_VIEW_ID,\n\thideIfEmpty: true,\n\torder: 3,\n}, ViewContainerLocation.Panel, { donotRegisterOpenCommand: true });\nRegistry.as<panel.PanelRegistry>(panel.Extensions.Panels).setDefaultPanelId(TERMINAL_VIEW_ID);\nRegistry.as<IViewsRegistry>(ViewContainerExtensions.ViewsRegistry).registerViews([{\n\tid: TERMINAL_VIEW_ID,\n\tname: nls.localize('terminal', \"Terminal\"),\n\tcontainerIcon: terminalViewIcon,\n\tcanToggleVisibility: false,\n\tcanMoveView: true,\n\tctorDescriptor: new SyncDescriptor(TerminalViewPane),\n\topenCommandActionDescriptor: {\n\t\tid: TERMINAL_COMMAND_ID.TOGGLE,\n\t\tmnemonicTitle: nls.localize({ key: 'miToggleIntegratedTerminal', comment: ['&& denotes a mnemonic'] }, \"&&Terminal\"),\n\t\tkeybindings: {\n\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.US_BACKTICK,\n\t\t\tmac: { primary: KeyMod.WinCtrl | KeyCode.US_BACKTICK }\n\t\t},\n\t\torder: 3\n\t}\n}], VIEW_CONTAINER);\n\n// Register actions\nregisterTerminalActions();\n\nfunction registerSendSequenceKeybinding(text: string, rule: { when?: ContextKeyExpression } & IKeybindings): void {\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: TERMINAL_COMMAND_ID.SEND_SEQUENCE,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: rule.when || KEYBINDING_CONTEXT_TERMINAL_FOCUS,\n\t\tprimary: rule.primary,\n\t\tmac: rule.mac,\n\t\tlinux: rule.linux,\n\t\twin: rule.win,\n\t\thandler: terminalSendSequenceCommand,\n\t\targs: { text }\n\t});\n}\n\n// The text representation of `^<letter>` is `'A'.charCodeAt(0) + 1`.\nconst CTRL_LETTER_OFFSET = 64;\n\n// An extra Windows-only ctrl+v keybinding is used for pwsh that sends ctrl+v directly to the\n// shell, this gets handled by PSReadLine which properly handles multi-line pastes. This is\n// disabled in accessibility mode as PowerShell does not run PSReadLine when it detects a screen\n// reader. This works even when clipboard.readText is not supported.\nif (isWindows) {\n\tregisterSendSequenceKeybinding(String.fromCharCode('V'.charCodeAt(0) - CTRL_LETTER_OFFSET), { // ctrl+v\n\t\twhen: ContextKeyExpr.and(KEYBINDING_CONTEXT_TERMINAL_FOCUS, ContextKeyExpr.equals(KEYBINDING_CONTEXT_TERMINAL_SHELL_TYPE_KEY, WindowsShellType.PowerShell), CONTEXT_ACCESSIBILITY_MODE_ENABLED.negate()),\n\t\tprimary: KeyMod.CtrlCmd | KeyCode.KEY_V\n\t});\n}\n\n// send ctrl+c to the iPad when the terminal is focused and ctrl+c is pressed to kill the process (work around for #114009)\nif (isIPad) {\n\tregisterSendSequenceKeybinding(String.fromCharCode('C'.charCodeAt(0) - CTRL_LETTER_OFFSET), { // ctrl+c\n\t\twhen: ContextKeyExpr.and(KEYBINDING_CONTEXT_TERMINAL_FOCUS),\n\t\tprimary: KeyMod.WinCtrl | KeyCode.KEY_C\n\t});\n}\n\n// Delete word left: ctrl+w\nregisterSendSequenceKeybinding(String.fromCharCode('W'.charCodeAt(0) - CTRL_LETTER_OFFSET), {\n\tprimary: KeyMod.CtrlCmd | KeyCode.Backspace,\n\tmac: { primary: KeyMod.Alt | KeyCode.Backspace }\n});\nif (isWindows) {\n\t// Delete word left: ctrl+h\n\t// Windows cmd.exe requires ^H to delete full word left\n\tregisterSendSequenceKeybinding(String.fromCharCode('H'.charCodeAt(0) - CTRL_LETTER_OFFSET), {\n\t\twhen: ContextKeyExpr.and(KEYBINDING_CONTEXT_TERMINAL_FOCUS, ContextKeyExpr.equals(KEYBINDING_CONTEXT_TERMINAL_SHELL_TYPE_KEY, WindowsShellType.CommandPrompt)),\n\t\tprimary: KeyMod.CtrlCmd | KeyCode.Backspace,\n\t});\n}\n// Delete word right: alt+d\nregisterSendSequenceKeybinding('\\x1bd', {\n\tprimary: KeyMod.CtrlCmd | KeyCode.Delete,\n\tmac: { primary: KeyMod.Alt | KeyCode.Delete }\n});\n// Delete to line start: ctrl+u\nregisterSendSequenceKeybinding('\\u0015', {\n\tmac: { primary: KeyMod.CtrlCmd | KeyCode.Backspace }\n});\n// Move to line start: ctrl+A\nregisterSendSequenceKeybinding(String.fromCharCode('A'.charCodeAt(0) - 64), {\n\tmac: { primary: KeyMod.CtrlCmd | KeyCode.LeftArrow }\n});\n// Move to line end: ctrl+E\nregisterSendSequenceKeybinding(String.fromCharCode('E'.charCodeAt(0) - 64), {\n\tmac: { primary: KeyMod.CtrlCmd | KeyCode.RightArrow }\n});\n\nsetupTerminalCommands();\nsetupTerminalMenu();\n\nregisterColors();\n"]}