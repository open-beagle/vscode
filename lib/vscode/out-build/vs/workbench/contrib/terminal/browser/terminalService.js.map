{"version":3,"sources":["vs/workbench/contrib/terminal/browser/terminalService.ts"],"names":[],"mappings":"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","file":"terminalService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { timeout } from 'vs/base/common/async';\nimport { debounce, throttle } from 'vs/base/common/decorators';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { basename } from 'vs/base/common/path';\nimport { isMacintosh, isWeb, isWindows, OperatingSystem } from 'vs/base/common/platform';\nimport { FindReplaceState } from 'vs/editor/contrib/find/findState';\nimport * as nls from 'vs/nls';\nimport { ConfigurationTarget, IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IContextKey, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { IInstantiationService, optional } from 'vs/platform/instantiation/common/instantiation';\nimport { IKeyMods, IPickOptions, IQuickInputButton, IQuickInputService, IQuickPickItem, IQuickPickSeparator } from 'vs/platform/quickinput/common/quickInput';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { ILocalTerminalService, IShellLaunchConfig, ITerminalLaunchError, ITerminalsLayoutInfo, ITerminalsLayoutInfoById, TerminalShellType, WindowsShellType } from 'vs/platform/terminal/common/terminal';\nimport { ThemeIcon } from 'vs/platform/theme/common/themeService';\nimport { IViewDescriptorService, IViewsService, ViewContainerLocation } from 'vs/workbench/common/views';\nimport { IRemoteTerminalService, ITerminalExternalLinkProvider, ITerminalInstance, ITerminalService, ITerminalTab, TerminalConnectionState } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { TerminalConfigHelper } from 'vs/workbench/contrib/terminal/browser/terminalConfigHelper';\nimport { TerminalInstance } from 'vs/workbench/contrib/terminal/browser/terminalInstance';\nimport { TerminalTab } from 'vs/workbench/contrib/terminal/browser/terminalTab';\nimport { TerminalViewPane } from 'vs/workbench/contrib/terminal/browser/terminalView';\nimport { IAvailableProfilesRequest, IRemoteTerminalAttachTarget, ITerminalProfile, IStartExtensionTerminalRequest, ITerminalConfigHelper, ITerminalNativeWindowsDelegate, ITerminalProcessExtHostProxy, KEYBINDING_CONTEXT_TERMINAL_ALT_BUFFER_ACTIVE, KEYBINDING_CONTEXT_TERMINAL_FOCUS, KEYBINDING_CONTEXT_TERMINAL_IS_OPEN, KEYBINDING_CONTEXT_TERMINAL_PROCESS_SUPPORTED, KEYBINDING_CONTEXT_TERMINAL_SHELL_TYPE, LinuxDistro, TERMINAL_VIEW_ID, ITerminalProfileObject, ITerminalTypeContribution, KEYBINDING_CONTEXT_TERMINAL_COUNT } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { escapeNonWindowsPath } from 'vs/workbench/contrib/terminal/common/terminalEnvironment';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { IWorkbenchLayoutService } from 'vs/workbench/services/layout/browser/layoutService';\nimport { ILifecycleService, ShutdownReason, WillShutdownEvent } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { configureTerminalProfileIcon } from 'vs/workbench/contrib/terminal/browser/terminalIcons';\nimport { equals } from 'vs/base/common/objects';\nimport { Codicon, iconRegistry } from 'vs/base/common/codicons';\nimport { ITerminalContributionService } from 'vs/workbench/contrib/terminal/common/terminalExtensionPoints';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { URI } from 'vs/base/common/uri';\nimport { ILabelService } from 'vs/platform/label/common/label';\nimport { Schemas } from 'vs/base/common/network';\nimport { VirtualWorkspaceContext } from 'vs/workbench/browser/contextkeys';\nimport { formatMessageForTerminal } from 'vs/workbench/contrib/terminal/common/terminalStrings';\n\ninterface IExtHostReadyEntry {\n\tpromise: Promise<void>;\n\tresolve: () => void;\n}\n\nexport class TerminalService implements ITerminalService {\n\tpublic _serviceBrand: undefined;\n\n\tprivate _isShuttingDown: boolean;\n\tprivate _terminalFocusContextKey: IContextKey<boolean>;\n\tprivate _terminalCountContextKey: IContextKey<number>;\n\tprivate _terminalShellTypeContextKey: IContextKey<string>;\n\tprivate _terminalAltBufferActiveContextKey: IContextKey<boolean>;\n\tprivate _terminalTabs: ITerminalTab[] = [];\n\tprivate _backgroundedTerminalInstances: ITerminalInstance[] = [];\n\tprivate get _terminalInstances(): ITerminalInstance[] {\n\t\treturn this._terminalTabs.reduce((p, c) => p.concat(c.terminalInstances), <ITerminalInstance[]>[]);\n\t}\n\tprivate _findState: FindReplaceState;\n\tprivate _extHostsReady: { [authority: string]: IExtHostReadyEntry | undefined } = {};\n\tprivate _activeTabIndex: number;\n\tprivate _linkProviders: Set<ITerminalExternalLinkProvider> = new Set();\n\tprivate _linkProviderDisposables: Map<ITerminalExternalLinkProvider, IDisposable[]> = new Map();\n\tprivate _processSupportContextKey: IContextKey<boolean>;\n\n\tpublic get activeTabIndex(): number { return this._activeTabIndex; }\n\tpublic get terminalInstances(): ITerminalInstance[] { return this._terminalInstances; }\n\tpublic get terminalTabs(): ITerminalTab[] { return this._terminalTabs; }\n\tpublic get isProcessSupportRegistered(): boolean { return !!this._processSupportContextKey.get(); }\n\n\tprivate _configHelper: TerminalConfigHelper;\n\tprivate _terminalContainer: HTMLElement | undefined;\n\tprivate _nativeWindowsDelegate: ITerminalNativeWindowsDelegate | undefined;\n\tprivate _remoteTerminalsInitPromise: Promise<void> | undefined;\n\tprivate _localTerminalsInitPromise: Promise<void> | undefined;\n\tprivate _connectionState: TerminalConnectionState;\n\tpublic get connectionState(): TerminalConnectionState { return this._connectionState; }\n\tprivate readonly _localTerminalService?: ILocalTerminalService;\n\n\tprivate _availableProfiles: ITerminalProfile[] | undefined;\n\tpublic get availableProfiles(): ITerminalProfile[] {\n\t\tthis._refreshAvailableProfiles();\n\t\treturn this._availableProfiles || [];\n\t}\n\n\tpublic get configHelper(): ITerminalConfigHelper { return this._configHelper; }\n\n\tprivate readonly _onActiveTabChanged = new Emitter<void>();\n\tpublic get onActiveTabChanged(): Event<void> { return this._onActiveTabChanged.event; }\n\tprivate readonly _onInstanceCreated = new Emitter<ITerminalInstance>();\n\tpublic get onInstanceCreated(): Event<ITerminalInstance> { return this._onInstanceCreated.event; }\n\tprivate readonly _onInstanceDisposed = new Emitter<ITerminalInstance>();\n\tpublic get onInstanceDisposed(): Event<ITerminalInstance> { return this._onInstanceDisposed.event; }\n\tprivate readonly _onInstanceProcessIdReady = new Emitter<ITerminalInstance>();\n\tpublic get onInstanceProcessIdReady(): Event<ITerminalInstance> { return this._onInstanceProcessIdReady.event; }\n\tprivate readonly _onInstanceLinksReady = new Emitter<ITerminalInstance>();\n\tpublic get onInstanceLinksReady(): Event<ITerminalInstance> { return this._onInstanceLinksReady.event; }\n\tprivate readonly _onInstanceRequestStartExtensionTerminal = new Emitter<IStartExtensionTerminalRequest>();\n\tpublic get onInstanceRequestStartExtensionTerminal(): Event<IStartExtensionTerminalRequest> { return this._onInstanceRequestStartExtensionTerminal.event; }\n\tprivate readonly _onInstanceDimensionsChanged = new Emitter<ITerminalInstance>();\n\tpublic get onInstanceDimensionsChanged(): Event<ITerminalInstance> { return this._onInstanceDimensionsChanged.event; }\n\tprivate readonly _onInstanceMaximumDimensionsChanged = new Emitter<ITerminalInstance>();\n\tpublic get onInstanceMaximumDimensionsChanged(): Event<ITerminalInstance> { return this._onInstanceMaximumDimensionsChanged.event; }\n\tprivate readonly _onInstancesChanged = new Emitter<void>();\n\tpublic get onInstancesChanged(): Event<void> { return this._onInstancesChanged.event; }\n\tprivate readonly _onInstanceTitleChanged = new Emitter<ITerminalInstance | undefined>();\n\tpublic get onInstanceTitleChanged(): Event<ITerminalInstance | undefined> { return this._onInstanceTitleChanged.event; }\n\tprivate readonly _onActiveInstanceChanged = new Emitter<ITerminalInstance | undefined>();\n\tpublic get onActiveInstanceChanged(): Event<ITerminalInstance | undefined> { return this._onActiveInstanceChanged.event; }\n\tprivate readonly _onInstancePrimaryStatusChanged = new Emitter<ITerminalInstance>();\n\tpublic get onInstancePrimaryStatusChanged(): Event<ITerminalInstance> { return this._onInstancePrimaryStatusChanged.event; }\n\tprivate readonly _onTabDisposed = new Emitter<ITerminalTab>();\n\tpublic get onTabDisposed(): Event<ITerminalTab> { return this._onTabDisposed.event; }\n\tprivate readonly _onRequestAvailableProfiles = new Emitter<IAvailableProfilesRequest>();\n\tpublic get onRequestAvailableProfiles(): Event<IAvailableProfilesRequest> { return this._onRequestAvailableProfiles.event; }\n\tprivate readonly _onDidRegisterProcessSupport = new Emitter<void>();\n\tpublic get onDidRegisterProcessSupport(): Event<void> { return this._onDidRegisterProcessSupport.event; }\n\tprivate readonly _onDidChangeConnectionState = new Emitter<void>();\n\tpublic get onDidChangeConnectionState(): Event<void> { return this._onDidChangeConnectionState.event; }\n\tprivate readonly _onDidChangeAvailableProfiles = new Emitter<ITerminalProfile[]>();\n\tpublic get onDidChangeAvailableProfiles(): Event<ITerminalProfile[]> { return this._onDidChangeAvailableProfiles.event; }\n\tprivate readonly _onPanelMovedToSide = new Emitter<void>();\n\tpublic get onPanelMovedToSide(): Event<void> { return this._onPanelMovedToSide.event; }\n\n\tconstructor(\n\t\t@IContextKeyService private _contextKeyService: IContextKeyService,\n\t\t@IWorkbenchLayoutService private _layoutService: IWorkbenchLayoutService,\n\t\t@ILabelService labelService: ILabelService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t\t@IDialogService private _dialogService: IDialogService,\n\t\t@IInstantiationService private _instantiationService: IInstantiationService,\n\t\t@IRemoteAgentService private _remoteAgentService: IRemoteAgentService,\n\t\t@IQuickInputService private _quickInputService: IQuickInputService,\n\t\t@IConfigurationService private _configurationService: IConfigurationService,\n\t\t@IViewsService private _viewsService: IViewsService,\n\t\t@IViewDescriptorService private readonly _viewDescriptorService: IViewDescriptorService,\n\t\t@IWorkbenchEnvironmentService private readonly _environmentService: IWorkbenchEnvironmentService,\n\t\t@IRemoteTerminalService private readonly _remoteTerminalService: IRemoteTerminalService,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t\t@IExtensionService private readonly _extensionService: IExtensionService,\n\t\t@ITerminalContributionService private readonly _terminalContributionService: ITerminalContributionService,\n\t\t@ICommandService private readonly _commandService: ICommandService,\n\t\t@optional(ILocalTerminalService) localTerminalService: ILocalTerminalService\n\t) {\n\t\tthis._localTerminalService = localTerminalService;\n\n\t\tthis._activeTabIndex = 0;\n\t\tthis._isShuttingDown = false;\n\t\tthis._findState = new FindReplaceState();\n\t\tlifecycleService.onBeforeShutdown(async e => e.veto(this._onBeforeShutdown(e.reason), 'veto.terminal'));\n\t\tlifecycleService.onWillShutdown(e => this._onWillShutdown(e));\n\t\tthis._terminalFocusContextKey = KEYBINDING_CONTEXT_TERMINAL_FOCUS.bindTo(this._contextKeyService);\n\t\tthis._terminalCountContextKey = KEYBINDING_CONTEXT_TERMINAL_COUNT.bindTo(this._contextKeyService);\n\t\tthis._terminalShellTypeContextKey = KEYBINDING_CONTEXT_TERMINAL_SHELL_TYPE.bindTo(this._contextKeyService);\n\t\tthis._terminalAltBufferActiveContextKey = KEYBINDING_CONTEXT_TERMINAL_ALT_BUFFER_ACTIVE.bindTo(this._contextKeyService);\n\t\tthis._configHelper = this._instantiationService.createInstance(TerminalConfigHelper);\n\t\tthis.onTabDisposed(tab => this._removeTab(tab));\n\t\tthis.onActiveTabChanged(() => {\n\t\t\tconst instance = this.getActiveInstance();\n\t\t\tthis._onActiveInstanceChanged.fire(instance ? instance : undefined);\n\t\t});\n\t\t// update detected profiles so for example we detect if you've installed a pwsh\n\t\t// this avoids having poll routinely\n\t\tthis.onInstanceCreated(() => this._refreshAvailableProfiles());\n\t\tthis.onInstancesChanged(() => this._terminalCountContextKey.set(this._terminalInstances.length));\n\t\tthis.onInstanceLinksReady(instance => this._setInstanceLinkProviders(instance));\n\t\tthis._handleInstanceContextKeys();\n\t\tthis._processSupportContextKey = KEYBINDING_CONTEXT_TERMINAL_PROCESS_SUPPORTED.bindTo(this._contextKeyService);\n\t\tthis._processSupportContextKey.set(!isWeb || this._remoteAgentService.getConnection() !== null);\n\n\t\tthis._configurationService.onDidChangeConfiguration(async e => {\n\t\t\tif (e.affectsConfiguration('terminal.integrated.profiles.windows') ||\n\t\t\t\te.affectsConfiguration('terminal.integrated.profiles.osx') ||\n\t\t\t\te.affectsConfiguration('terminal.integrated.profiles.linux') ||\n\t\t\t\te.affectsConfiguration('terminal.integrated.defaultProfile.windows') ||\n\t\t\t\te.affectsConfiguration('terminal.integrated.defaultProfile.osx') ||\n\t\t\t\te.affectsConfiguration('terminal.integrated.defaultProfile.linux') ||\n\t\t\t\te.affectsConfiguration('terminal.integrated.useWslProfiles')) {\n\t\t\t\tthis._refreshAvailableProfiles();\n\t\t\t}\n\t\t});\n\n\t\t// Register a resource formatter for terminal URIs\n\t\tlabelService.registerFormatter({\n\t\t\tscheme: Schemas.vscodeTerminal,\n\t\t\tformatting: {\n\t\t\t\tlabel: '${path}',\n\t\t\t\tseparator: ''\n\t\t\t}\n\t\t});\n\n\t\tconst enableTerminalReconnection = this.configHelper.config.enablePersistentSessions;\n\n\t\tconst conn = this._remoteAgentService.getConnection();\n\t\tconst remoteAuthority = conn ? conn.remoteAuthority : 'null';\n\t\tthis._whenExtHostReady(remoteAuthority).then(() => {\n\t\t\tthis._refreshAvailableProfiles();\n\t\t});\n\n\t\t// Connect to the extension host if it's there, set the connection state to connected when\n\t\t// it's done. This should happen even when there is no extension host.\n\t\tthis._connectionState = TerminalConnectionState.Connecting;\n\t\tlet initPromise: Promise<any>;\n\t\tif (!!this._environmentService.remoteAuthority && enableTerminalReconnection) {\n\t\t\tinitPromise = this._remoteTerminalsInitPromise = this._reconnectToRemoteTerminals();\n\t\t} else if (enableTerminalReconnection) {\n\t\t\tinitPromise = this._localTerminalsInitPromise = this._reconnectToLocalTerminals();\n\t\t} else {\n\t\t\tinitPromise = Promise.resolve();\n\t\t}\n\t\tinitPromise.then(() => this._setConnected());\n\t}\n\n\tprivate _setConnected() {\n\t\tthis._connectionState = TerminalConnectionState.Connected;\n\t\tthis._onDidChangeConnectionState.fire();\n\t}\n\n\tprivate async _reconnectToRemoteTerminals(): Promise<void> {\n\t\t// Reattach to all remote terminals\n\t\tconst layoutInfo = await this._remoteTerminalService.getTerminalLayoutInfo();\n\t\tthis._remoteTerminalService.reduceConnectionGraceTime();\n\t\tconst reconnectCounter = this._recreateTerminalTabs(layoutInfo);\n\t\t/* __GDPR__\n\t\t\t\"terminalReconnection\" : {\n\t\t\t\t\"count\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n\t\t\t}\n\t\t */\n\t\tconst data = {\n\t\t\tcount: reconnectCounter\n\t\t};\n\t\tthis._telemetryService.publicLog('terminalReconnection', data);\n\t\t// now that terminals have been restored,\n\t\t// attach listeners to update remote when terminals are changed\n\t\tthis.attachProcessLayoutListeners(true);\n\t}\n\n\tprivate async _reconnectToLocalTerminals(): Promise<void> {\n\t\tif (!this._localTerminalService) {\n\t\t\treturn;\n\t\t}\n\t\t// Reattach to all local terminals\n\t\tconst layoutInfo = await this._localTerminalService.getTerminalLayoutInfo();\n\t\tif (layoutInfo && layoutInfo.tabs.length > 0) {\n\t\t\tthis._recreateTerminalTabs(layoutInfo);\n\t\t}\n\t\t// now that terminals have been restored,\n\t\t// attach listeners to update local state when terminals are changed\n\t\tthis.attachProcessLayoutListeners(false);\n\t}\n\n\tprivate _recreateTerminalTabs(layoutInfo?: ITerminalsLayoutInfo): number {\n\t\tlet reconnectCounter = 0;\n\t\tlet activeTab: ITerminalTab | undefined;\n\t\tif (layoutInfo) {\n\t\t\tlayoutInfo.tabs.forEach(tabLayout => {\n\t\t\t\tconst terminalLayouts = tabLayout.terminals.filter(t => t.terminal && t.terminal.isOrphan);\n\t\t\t\tif (terminalLayouts.length) {\n\t\t\t\t\treconnectCounter += terminalLayouts.length;\n\t\t\t\t\tlet terminalInstance: ITerminalInstance | undefined;\n\t\t\t\t\tlet tab: ITerminalTab | undefined;\n\t\t\t\t\tterminalLayouts.forEach((terminalLayout) => {\n\t\t\t\t\t\tif (!terminalInstance) {\n\t\t\t\t\t\t\t// create tab and terminal\n\t\t\t\t\t\t\tterminalInstance = this.createTerminal({ attachPersistentProcess: terminalLayout.terminal! });\n\t\t\t\t\t\t\ttab = this.getTabForInstance(terminalInstance);\n\t\t\t\t\t\t\tif (tabLayout.isActive) {\n\t\t\t\t\t\t\t\tactiveTab = tab;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// add split terminals to this tab\n\t\t\t\t\t\t\tthis.splitInstance(terminalInstance, { attachPersistentProcess: terminalLayout.terminal! });\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tconst activeInstance = this.terminalInstances.find(t => {\n\t\t\t\t\t\treturn t.shellLaunchConfig.attachPersistentProcess?.id === tabLayout.activePersistentProcessId;\n\t\t\t\t\t});\n\t\t\t\t\tif (activeInstance) {\n\t\t\t\t\t\tthis.setActiveInstance(activeInstance);\n\t\t\t\t\t}\n\t\t\t\t\ttab?.resizePanes(tabLayout.terminals.map(terminal => terminal.relativeSize));\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (layoutInfo.tabs.length) {\n\t\t\t\tthis.setActiveTabByIndex(activeTab ? this.terminalTabs.indexOf(activeTab) : 0);\n\t\t\t}\n\t\t}\n\t\treturn reconnectCounter;\n\t}\n\n\tprivate attachProcessLayoutListeners(isRemote: boolean): void {\n\t\tthis.onActiveTabChanged(() => isRemote ? this._updateRemoteState() : this._updateLocalState());\n\t\tthis.onActiveInstanceChanged(() => isRemote ? this._updateRemoteState() : this._updateLocalState());\n\t\tthis.onInstancesChanged(() => isRemote ? this._updateRemoteState() : this._updateLocalState());\n\t\t// The state must be updated when the terminal is relaunched, otherwise the persistent\n\t\t// terminal ID will be stale and the process will be leaked.\n\t\tthis.onInstanceProcessIdReady(() => isRemote ? this._updateRemoteState() : this._updateLocalState());\n\t}\n\n\tpublic setNativeWindowsDelegate(delegate: ITerminalNativeWindowsDelegate): void {\n\t\tthis._nativeWindowsDelegate = delegate;\n\t}\n\n\tpublic setLinuxDistro(linuxDistro: LinuxDistro): void {\n\t\tthis._configHelper.setLinuxDistro(linuxDistro);\n\t}\n\n\tprivate _handleInstanceContextKeys(): void {\n\t\tconst terminalIsOpenContext = KEYBINDING_CONTEXT_TERMINAL_IS_OPEN.bindTo(this._contextKeyService);\n\t\tconst updateTerminalContextKeys = () => {\n\t\t\tterminalIsOpenContext.set(this.terminalInstances.length > 0);\n\t\t};\n\t\tthis.onInstancesChanged(() => updateTerminalContextKeys());\n\t}\n\n\tpublic getActiveOrCreateInstance(): ITerminalInstance {\n\t\tconst activeInstance = this.getActiveInstance();\n\t\treturn activeInstance ? activeInstance : this.createTerminal(undefined);\n\t}\n\n\tpublic requestStartExtensionTerminal(proxy: ITerminalProcessExtHostProxy, cols: number, rows: number): Promise<ITerminalLaunchError | undefined> {\n\t\t// The initial request came from the extension host, no need to wait for it\n\t\treturn new Promise<ITerminalLaunchError | undefined>(callback => {\n\t\t\tthis._onInstanceRequestStartExtensionTerminal.fire({ proxy, cols, rows, callback });\n\t\t});\n\t}\n\n\tpublic async extHostReady(remoteAuthority: string): Promise<void> {\n\t\tthis._createExtHostReadyEntry(remoteAuthority);\n\t\tthis._extHostsReady[remoteAuthority]!.resolve();\n\t}\n\n\t@throttle(10000)\n\tprivate async _refreshAvailableProfiles(): Promise<void> {\n\t\tconst result = await this._detectProfiles(true);\n\t\tif (!equals(result, this._availableProfiles)) {\n\t\t\tthis._availableProfiles = result;\n\t\t\tthis._onDidChangeAvailableProfiles.fire(this._availableProfiles);\n\t\t}\n\t}\n\n\tprivate async _detectProfiles(configuredProfilesOnly: boolean): Promise<ITerminalProfile[]> {\n\t\tawait this._extensionService.whenInstalledExtensionsRegistered();\n\t\t// Wait for the remoteAuthority to be ready (and listening for events) before firing\n\t\t// the event to spawn the ext host process\n\t\tconst conn = this._remoteAgentService.getConnection();\n\t\tconst remoteAuthority = conn ? conn.remoteAuthority : 'null';\n\t\tawait this._whenExtHostReady(remoteAuthority);\n\t\treturn new Promise(r => this._onRequestAvailableProfiles.fire({ callback: r, configuredProfilesOnly: configuredProfilesOnly }));\n\t}\n\n\tprivate async _whenExtHostReady(remoteAuthority: string): Promise<void> {\n\t\tthis._createExtHostReadyEntry(remoteAuthority);\n\t\treturn this._extHostsReady[remoteAuthority]!.promise;\n\t}\n\n\tprivate _createExtHostReadyEntry(remoteAuthority: string): void {\n\t\tif (this._extHostsReady[remoteAuthority]) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet resolve!: () => void;\n\t\tconst promise = new Promise<void>(r => resolve = r);\n\t\tthis._extHostsReady[remoteAuthority] = { promise, resolve };\n\t}\n\n\tprivate _onBeforeShutdown(reason: ShutdownReason): boolean | Promise<boolean> {\n\t\tif (this.terminalInstances.length === 0) {\n\t\t\t// No terminal instances, don't veto\n\t\t\treturn false;\n\t\t}\n\n\t\tconst shouldPersistTerminals = this._configHelper.config.enablePersistentSessions && reason === ShutdownReason.RELOAD;\n\t\tif (this.configHelper.config.confirmOnExit && !shouldPersistTerminals) {\n\t\t\treturn this._onBeforeShutdownAsync();\n\t\t}\n\n\t\tthis._isShuttingDown = true;\n\n\t\treturn false;\n\t}\n\n\tprivate async _onBeforeShutdownAsync(): Promise<boolean> {\n\t\t// veto if configured to show confirmation and the user chose not to exit\n\t\tconst veto = await this._showTerminalCloseConfirmation();\n\t\tif (!veto) {\n\t\t\tthis._isShuttingDown = true;\n\t\t}\n\t\treturn veto;\n\t}\n\n\tprivate _onWillShutdown(e: WillShutdownEvent): void {\n\t\t// Don't touch processes if the shutdown was a result of reload as they will be reattached\n\t\tconst shouldPersistTerminals = this._configHelper.config.enablePersistentSessions && e.reason === ShutdownReason.RELOAD;\n\t\tif (shouldPersistTerminals) {\n\t\t\tthis.terminalInstances.forEach(instance => instance.detachFromProcess());\n\t\t\treturn;\n\t\t}\n\n\t\t// Force dispose of all terminal instances\n\t\tthis.terminalInstances.forEach(instance => instance.dispose(true));\n\n\t\tthis._localTerminalService?.setTerminalLayoutInfo(undefined);\n\t}\n\n\tpublic getTabLabels(): string[] {\n\t\treturn this._terminalTabs.filter(tab => tab.terminalInstances.length > 0).map((tab, index) => {\n\t\t\treturn `${index + 1}: ${tab.title ? tab.title : ''}`;\n\t\t});\n\t}\n\n\tpublic getFindState(): FindReplaceState {\n\t\treturn this._findState;\n\t}\n\n\t@debounce(500)\n\tprivate _updateRemoteState(): void {\n\t\tif (!!this._environmentService.remoteAuthority) {\n\t\t\tconst state: ITerminalsLayoutInfoById = {\n\t\t\t\ttabs: this.terminalTabs.map(t => t.getLayoutInfo(t === this.getActiveTab()))\n\t\t\t};\n\t\t\tthis._remoteTerminalService.setTerminalLayoutInfo(state);\n\t\t}\n\t}\n\n\t@debounce(500)\n\tprivate _updateLocalState(): void {\n\t\tconst state: ITerminalsLayoutInfoById = {\n\t\t\ttabs: this.terminalTabs.map(t => t.getLayoutInfo(t === this.getActiveTab()))\n\t\t};\n\t\tthis._localTerminalService!.setTerminalLayoutInfo(state);\n\t}\n\n\tprivate _removeTab(tab: ITerminalTab): void {\n\t\t// Get the index of the tab and remove it from the list\n\t\tconst index = this._terminalTabs.indexOf(tab);\n\t\tconst activeTab = this.getActiveTab();\n\t\tconst activeTabIndex = activeTab ? this._terminalTabs.indexOf(activeTab) : -1;\n\t\tconst wasActiveTab = tab === activeTab;\n\t\tif (index !== -1) {\n\t\t\tthis._terminalTabs.splice(index, 1);\n\t\t}\n\n\t\t// Adjust focus if the tab was active\n\t\tif (wasActiveTab && this._terminalTabs.length > 0) {\n\t\t\tconst newIndex = index < this._terminalTabs.length ? index : this._terminalTabs.length - 1;\n\t\t\tthis.setActiveTabByIndex(newIndex);\n\t\t\tconst activeInstance = this.getActiveInstance();\n\t\t\tif (activeInstance) {\n\t\t\t\tactiveInstance.focus(true);\n\t\t\t}\n\t\t} else if (activeTabIndex >= this._terminalTabs.length) {\n\t\t\tconst newIndex = this._terminalTabs.length - 1;\n\t\t\tthis.setActiveTabByIndex(newIndex);\n\t\t}\n\n\t\t// Hide the panel if there are no more instances, provided that VS Code is not shutting\n\t\t// down. When shutting down the panel is locked in place so that it is restored upon next\n\t\t// launch.\n\t\tif (this._terminalTabs.length === 0 && !this._isShuttingDown) {\n\t\t\tthis.hidePanel();\n\t\t\tthis._onActiveInstanceChanged.fire(undefined);\n\t\t}\n\n\t\t// Fire events\n\t\tthis._onInstancesChanged.fire();\n\t\tif (wasActiveTab) {\n\t\t\tthis._onActiveTabChanged.fire();\n\t\t}\n\t}\n\n\tpublic refreshActiveTab(): void {\n\t\t// Fire active instances changed\n\t\tthis._onActiveTabChanged.fire();\n\t}\n\n\tpublic getActiveTab(): ITerminalTab | null {\n\t\tif (this._activeTabIndex < 0 || this._activeTabIndex >= this._terminalTabs.length) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this._terminalTabs[this._activeTabIndex];\n\t}\n\n\tpublic getActiveInstance(): ITerminalInstance | null {\n\t\tconst tab = this.getActiveTab();\n\t\tif (!tab) {\n\t\t\treturn null;\n\t\t}\n\t\treturn tab.activeInstance;\n\t}\n\n\tpublic doWithActiveInstance<T>(callback: (terminal: ITerminalInstance) => T): T | void {\n\t\tconst instance = this.getActiveInstance();\n\t\tif (instance) {\n\t\t\treturn callback(instance);\n\t\t}\n\t}\n\n\tpublic getInstanceFromId(terminalId: number): ITerminalInstance | undefined {\n\t\tlet bgIndex = -1;\n\t\tthis._backgroundedTerminalInstances.forEach((terminalInstance, i) => {\n\t\t\tif (terminalInstance.instanceId === terminalId) {\n\t\t\t\tbgIndex = i;\n\t\t\t}\n\t\t});\n\t\tif (bgIndex !== -1) {\n\t\t\treturn this._backgroundedTerminalInstances[bgIndex];\n\t\t}\n\t\ttry {\n\t\t\treturn this.terminalInstances[this._getIndexFromId(terminalId)];\n\t\t} catch {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tpublic getInstanceFromIndex(terminalIndex: number): ITerminalInstance {\n\t\treturn this.terminalInstances[terminalIndex];\n\t}\n\n\tpublic setActiveInstance(terminalInstance: ITerminalInstance): void {\n\t\t// If this was a hideFromUser terminal created by the API this was triggered by show,\n\t\t// in which case we need to create the terminal tab\n\t\tif (terminalInstance.shellLaunchConfig.hideFromUser) {\n\t\t\tthis._showBackgroundTerminal(terminalInstance);\n\t\t}\n\t\tthis.setActiveInstanceByIndex(this._getIndexFromId(terminalInstance.instanceId));\n\t}\n\n\tpublic setActiveTabByIndex(tabIndex: number): void {\n\t\tif (tabIndex >= this._terminalTabs.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst didTabChange = this._activeTabIndex !== tabIndex;\n\t\tthis._activeTabIndex = tabIndex;\n\n\t\tthis._terminalTabs.forEach((t, i) => t.setVisible(i === this._activeTabIndex));\n\t\tif (didTabChange) {\n\t\t\tthis._onActiveTabChanged.fire();\n\t\t}\n\t}\n\n\tpublic isAttachedToTerminal(remoteTerm: IRemoteTerminalAttachTarget): boolean {\n\t\treturn this.terminalInstances.some(term => term.processId === remoteTerm.pid);\n\t}\n\n\tpublic async initializeTerminals(): Promise<void> {\n\t\tif (this._remoteTerminalsInitPromise) {\n\t\t\tawait this._remoteTerminalsInitPromise;\n\t\t} else if (this._localTerminalsInitPromise) {\n\t\t\tawait this._localTerminalsInitPromise;\n\t\t}\n\t\tif (this.terminalTabs.length === 0 && this.isProcessSupportRegistered) {\n\t\t\tthis.createTerminal();\n\t\t}\n\t}\n\n\tprivate _getInstanceFromGlobalInstanceIndex(index: number): { tab: ITerminalTab, tabIndex: number, instance: ITerminalInstance, localInstanceIndex: number } | null {\n\t\tlet currentTabIndex = 0;\n\t\twhile (index >= 0 && currentTabIndex < this._terminalTabs.length) {\n\t\t\tconst tab = this._terminalTabs[currentTabIndex];\n\t\t\tconst count = tab.terminalInstances.length;\n\t\t\tif (index < count) {\n\t\t\t\treturn {\n\t\t\t\t\ttab,\n\t\t\t\t\ttabIndex: currentTabIndex,\n\t\t\t\t\tinstance: tab.terminalInstances[index],\n\t\t\t\t\tlocalInstanceIndex: index\n\t\t\t\t};\n\t\t\t}\n\t\t\tindex -= count;\n\t\t\tcurrentTabIndex++;\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic setActiveInstanceByIndex(terminalIndex: number): void {\n\t\tconst query = this._getInstanceFromGlobalInstanceIndex(terminalIndex);\n\t\tif (!query) {\n\t\t\treturn;\n\t\t}\n\n\t\tquery.tab.setActiveInstanceByIndex(query.localInstanceIndex);\n\t\tconst didTabChange = this._activeTabIndex !== query.tabIndex;\n\t\tthis._activeTabIndex = query.tabIndex;\n\t\tthis._terminalTabs.forEach((t, i) => t.setVisible(i === query.tabIndex));\n\n\t\t// Only fire the event if there was a change\n\t\tif (didTabChange) {\n\t\t\tthis._onActiveTabChanged.fire();\n\t\t}\n\t}\n\n\tpublic setActiveTabToNext(): void {\n\t\tif (this._terminalTabs.length <= 1) {\n\t\t\treturn;\n\t\t}\n\t\tlet newIndex = this._activeTabIndex + 1;\n\t\tif (newIndex >= this._terminalTabs.length) {\n\t\t\tnewIndex = 0;\n\t\t}\n\t\tthis.setActiveTabByIndex(newIndex);\n\t}\n\n\tpublic setActiveTabToPrevious(): void {\n\t\tif (this._terminalTabs.length <= 1) {\n\t\t\treturn;\n\t\t}\n\t\tlet newIndex = this._activeTabIndex - 1;\n\t\tif (newIndex < 0) {\n\t\t\tnewIndex = this._terminalTabs.length - 1;\n\t\t}\n\t\tthis.setActiveTabByIndex(newIndex);\n\t}\n\n\tpublic splitInstance(instanceToSplit: ITerminalInstance, shellLaunchConfig?: IShellLaunchConfig): ITerminalInstance | null;\n\tpublic splitInstance(instanceToSplit: ITerminalInstance, profile: ITerminalProfile, cwd?: string | URI): ITerminalInstance | null\n\tpublic splitInstance(instanceToSplit: ITerminalInstance, shellLaunchConfigOrProfile: IShellLaunchConfig | ITerminalProfile = {}, cwd?: string | URI): ITerminalInstance | null {\n\t\tconst tab = this.getTabForInstance(instanceToSplit);\n\t\tif (!tab) {\n\t\t\treturn null;\n\t\t}\n\t\tconst shellLaunchConfig = this._convertProfileToShellLaunchConfig(shellLaunchConfigOrProfile, cwd);\n\t\tconst instance = tab.split(shellLaunchConfig);\n\n\t\tthis._initInstanceListeners(instance);\n\t\tthis._onInstancesChanged.fire();\n\n\t\tthis._terminalTabs.forEach((t, i) => t.setVisible(i === this._activeTabIndex));\n\t\treturn instance;\n\t}\n\n\tprotected _initInstanceListeners(instance: ITerminalInstance): void {\n\t\tinstance.addDisposable(instance.onDisposed(this._onInstanceDisposed.fire, this._onInstanceDisposed));\n\t\tinstance.addDisposable(instance.onTitleChanged(this._onInstanceTitleChanged.fire, this._onInstanceTitleChanged));\n\t\tinstance.addDisposable(instance.onProcessIdReady(this._onInstanceProcessIdReady.fire, this._onInstanceProcessIdReady));\n\t\tinstance.addDisposable(instance.statusList.onDidChangePrimaryStatus(() => this._onInstancePrimaryStatusChanged.fire(instance)));\n\t\tinstance.addDisposable(instance.onLinksReady(this._onInstanceLinksReady.fire, this._onInstanceLinksReady));\n\t\tinstance.addDisposable(instance.onDimensionsChanged(() => {\n\t\t\tthis._onInstanceDimensionsChanged.fire(instance);\n\t\t\tif (this.configHelper.config.enablePersistentSessions && this.isProcessSupportRegistered) {\n\t\t\t\t!!this._environmentService.remoteAuthority ? this._updateRemoteState() : this._updateLocalState();\n\t\t\t}\n\t\t}));\n\t\tinstance.addDisposable(instance.onMaximumDimensionsChanged(() => this._onInstanceMaximumDimensionsChanged.fire(instance)));\n\t\tinstance.addDisposable(instance.onFocus(this._onActiveInstanceChanged.fire, this._onActiveInstanceChanged));\n\t}\n\n\tpublic registerProcessSupport(isSupported: boolean): void {\n\t\tif (!isSupported) {\n\t\t\treturn;\n\t\t}\n\t\tthis._processSupportContextKey.set(isSupported);\n\t\tthis._onDidRegisterProcessSupport.fire();\n\t}\n\n\tpublic registerLinkProvider(linkProvider: ITerminalExternalLinkProvider): IDisposable {\n\t\tconst disposables: IDisposable[] = [];\n\t\tthis._linkProviders.add(linkProvider);\n\t\tfor (const instance of this.terminalInstances) {\n\t\t\tif (instance.areLinksReady) {\n\t\t\t\tdisposables.push(instance.registerLinkProvider(linkProvider));\n\t\t\t}\n\t\t}\n\t\tthis._linkProviderDisposables.set(linkProvider, disposables);\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tconst disposables = this._linkProviderDisposables.get(linkProvider) || [];\n\t\t\t\tfor (const disposable of disposables) {\n\t\t\t\t\tdisposable.dispose();\n\t\t\t\t}\n\t\t\t\tthis._linkProviders.delete(linkProvider);\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate _setInstanceLinkProviders(instance: ITerminalInstance): void {\n\t\tfor (const linkProvider of this._linkProviders) {\n\t\t\tconst disposables = this._linkProviderDisposables.get(linkProvider);\n\t\t\tconst provider = instance.registerLinkProvider(linkProvider);\n\t\t\tdisposables?.push(provider);\n\t\t}\n\t}\n\n\tpublic getTabForInstance(instance: ITerminalInstance): ITerminalTab | undefined {\n\t\treturn this._terminalTabs.find(tab => tab.terminalInstances.indexOf(instance) !== -1);\n\t}\n\n\tpublic async showPanel(focus?: boolean): Promise<void> {\n\t\tconst pane = this._viewsService.getActiveViewWithId(TERMINAL_VIEW_ID) as TerminalViewPane;\n\t\tif (!pane) {\n\t\t\tawait this._viewsService.openView(TERMINAL_VIEW_ID, focus);\n\t\t}\n\t\tif (focus) {\n\t\t\t// Do the focus call asynchronously as going through the\n\t\t\t// command palette will force editor focus\n\t\t\tawait timeout(0);\n\t\t\tconst instance = this.getActiveInstance();\n\t\t\tif (instance) {\n\t\t\t\tawait instance.focusWhenReady(true);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic async focusTabs(): Promise<void> {\n\t\tawait this.showPanel(true);\n\t\tconst pane = this._viewsService.getActiveViewWithId<TerminalViewPane>(TERMINAL_VIEW_ID);\n\t\tpane?.terminalTabbedView?.focusTabs();\n\t}\n\n\tpublic showTabs() {\n\t\tthis._configurationService.updateValue('terminal.integrated.tabs.enabled', true);\n\t}\n\n\tprivate _getIndexFromId(terminalId: number): number {\n\t\tlet terminalIndex = -1;\n\t\tthis.terminalInstances.forEach((terminalInstance, i) => {\n\t\t\tif (terminalInstance.instanceId === terminalId) {\n\t\t\t\tterminalIndex = i;\n\t\t\t}\n\t\t});\n\t\tif (terminalIndex === -1) {\n\t\t\tthrow new Error(`Terminal with ID ${terminalId} does not exist (has it already been disposed?)`);\n\t\t}\n\t\treturn terminalIndex;\n\t}\n\n\tprotected async _showTerminalCloseConfirmation(): Promise<boolean> {\n\t\tlet message: string;\n\t\tif (this.terminalInstances.length === 1) {\n\t\t\tmessage = nls.localize('terminalService.terminalCloseConfirmationSingular', \"There is an active terminal session, do you want to kill it?\");\n\t\t} else {\n\t\t\tmessage = nls.localize('terminalService.terminalCloseConfirmationPlural', \"There are {0} active terminal sessions, do you want to kill them?\", this.terminalInstances.length);\n\t\t}\n\t\tconst res = await this._dialogService.confirm({\n\t\t\tmessage,\n\t\t\ttype: 'warning',\n\t\t});\n\t\treturn !res.confirmed;\n\t}\n\n\tpublic preparePathForTerminalAsync(originalPath: string, executable: string, title: string, shellType: TerminalShellType): Promise<string> {\n\t\treturn new Promise<string>(c => {\n\t\t\tif (!executable) {\n\t\t\t\tc(originalPath);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst hasSpace = originalPath.indexOf(' ') !== -1;\n\t\t\tconst hasParens = originalPath.indexOf('(') !== -1 || originalPath.indexOf(')') !== -1;\n\n\t\t\tconst pathBasename = basename(executable, '.exe');\n\t\t\tconst isPowerShell = pathBasename === 'pwsh' ||\n\t\t\t\ttitle === 'pwsh' ||\n\t\t\t\tpathBasename === 'powershell' ||\n\t\t\t\ttitle === 'powershell';\n\n\t\t\tif (isPowerShell && (hasSpace || originalPath.indexOf('\\'') !== -1)) {\n\t\t\t\tc(`& '${originalPath.replace(/'/g, '\\'\\'')}'`);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (hasParens && isPowerShell) {\n\t\t\t\tc(`& '${originalPath}'`);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isWindows) {\n\t\t\t\t// 17063 is the build number where wsl path was introduced.\n\t\t\t\t// Update Windows uriPath to be executed in WSL.\n\t\t\t\tif (shellType !== undefined) {\n\t\t\t\t\tif (shellType === WindowsShellType.GitBash) {\n\t\t\t\t\t\tc(originalPath.replace(/\\\\/g, '/'));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\telse if (shellType === WindowsShellType.Wsl) {\n\t\t\t\t\t\tif (this._nativeWindowsDelegate && this._nativeWindowsDelegate.getWindowsBuildNumber() >= 17063) {\n\t\t\t\t\t\t\tc(this._nativeWindowsDelegate.getWslPath(originalPath));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tc(originalPath.replace(/\\\\/g, '/'));\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (hasSpace) {\n\t\t\t\t\t\tc('\"' + originalPath + '\"');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tc(originalPath);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst lowerExecutable = executable.toLowerCase();\n\t\t\t\t\tif (this._nativeWindowsDelegate && this._nativeWindowsDelegate.getWindowsBuildNumber() >= 17063 &&\n\t\t\t\t\t\t(lowerExecutable.indexOf('wsl') !== -1 || (lowerExecutable.indexOf('bash.exe') !== -1 && lowerExecutable.toLowerCase().indexOf('git') === -1))) {\n\t\t\t\t\t\tc(this._nativeWindowsDelegate.getWslPath(originalPath));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t} else if (hasSpace) {\n\t\t\t\t\t\tc('\"' + originalPath + '\"');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tc(originalPath);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tc(escapeNonWindowsPath(originalPath));\n\t\t});\n\t}\n\n\tprivate async _getPlatformKey(): Promise<string> {\n\t\tconst env = await this._remoteAgentService.getEnvironment();\n\t\tif (env) {\n\t\t\treturn env.os === OperatingSystem.Windows ? 'windows' : (env.os === OperatingSystem.Macintosh ? 'osx' : 'linux');\n\t\t}\n\t\treturn isWindows ? 'windows' : (isMacintosh ? 'osx' : 'linux');\n\t}\n\n\tpublic async showProfileQuickPick(type: 'setDefault' | 'createInstance', cwd?: string | URI): Promise<ITerminalInstance | undefined> {\n\t\tlet keyMods: IKeyMods | undefined;\n\t\tconst profiles = await this._detectProfiles(false);\n\t\tconst platformKey = await this._getPlatformKey();\n\n\t\tconst options: IPickOptions<IProfileQuickPickItem> = {\n\t\t\tplaceHolder: type === 'createInstance' ? nls.localize('terminal.integrated.selectProfileToCreate', \"Select the terminal profile to create\") : nls.localize('terminal.integrated.chooseDefaultProfile', \"Select your default terminal profile\"),\n\t\t\tonDidTriggerItemButton: async (context) => {\n\t\t\t\tif ('command' in context.item.profile) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst configKey = `terminal.integrated.profiles.${platformKey}`;\n\t\t\t\tconst configProfiles = this._configurationService.getValue<{ [key: string]: ITerminalProfileObject }>(configKey);\n\t\t\t\tconst existingProfiles = configProfiles ? Object.keys(configProfiles) : [];\n\t\t\t\tconst name = await this._quickInputService.input({\n\t\t\t\t\tprompt: nls.localize('enterTerminalProfileName', \"Enter terminal profile name\"),\n\t\t\t\t\tvalue: context.item.profile.profileName,\n\t\t\t\t\tvalidateInput: async input => {\n\t\t\t\t\t\tif (existingProfiles.includes(input)) {\n\t\t\t\t\t\t\treturn nls.localize('terminalProfileAlreadyExists', \"A terminal profile already exists with that name\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tif (!name) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst newConfigValue: { [key: string]: ITerminalProfileObject } = { ...configProfiles } ?? {};\n\t\t\t\tnewConfigValue[name] = {\n\t\t\t\t\tpath: context.item.profile.path,\n\t\t\t\t\targs: context.item.profile.args\n\t\t\t\t};\n\t\t\t\tawait this._configurationService.updateValue(configKey, newConfigValue, ConfigurationTarget.USER);\n\t\t\t},\n\t\t\tonKeyMods: mods => keyMods = mods\n\t\t};\n\n\t\t// Build quick pick items\n\t\tconst quickPickItems: (IProfileQuickPickItem | IQuickPickSeparator)[] = [];\n\t\tconst configProfiles = profiles.filter(e => !e.isAutoDetected);\n\t\tconst autoDetectedProfiles = profiles.filter(e => e.isAutoDetected);\n\t\tif (configProfiles.length > 0) {\n\t\t\tquickPickItems.push({ type: 'separator', label: nls.localize('terminalProfiles', \"profiles\") });\n\t\t\tquickPickItems.push(...configProfiles.map(e => this._createProfileQuickPickItem(e)));\n\t\t}\n\t\t// Add contributed profiles, these cannot be defaults\n\t\tif (type === 'createInstance') {\n\t\t\tquickPickItems.push({ type: 'separator', label: nls.localize('terminalProfiles.contributed', \"contributed\") });\n\t\t\tfor (const contributed of this._terminalContributionService.terminalTypes) {\n\t\t\t\tconst icon = contributed.icon ? (iconRegistry.get(contributed.icon) || Codicon.terminal) : Codicon.terminal;\n\t\t\t\tquickPickItems.push({\n\t\t\t\t\tlabel: `$(${icon.id}) ${contributed.title}`,\n\t\t\t\t\tprofile: contributed\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tif (autoDetectedProfiles.length > 0) {\n\t\t\tquickPickItems.push({ type: 'separator', label: nls.localize('terminalProfiles.detected', \"detected\") });\n\t\t\tquickPickItems.push(...autoDetectedProfiles.map(e => this._createProfileQuickPickItem(e)));\n\t\t}\n\n\t\tconst value = await this._quickInputService.pick(quickPickItems, options);\n\t\tif (!value) {\n\t\t\treturn;\n\t\t}\n\t\tif (type === 'createInstance') {\n\t\t\t// TODO: How to support alt here?\n\t\t\tif ('command' in value.profile) {\n\t\t\t\treturn this._commandService.executeCommand(value.profile.command);\n\t\t\t}\n\n\t\t\tlet instance;\n\t\t\tconst activeInstance = this.getActiveInstance();\n\t\t\tif (keyMods?.alt && activeInstance) {\n\t\t\t\t// create split, only valid if there's an active instance\n\t\t\t\tif (activeInstance) {\n\t\t\t\t\tinstance = this.splitInstance(activeInstance, value.profile, cwd);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tinstance = this.createTerminal(value.profile, cwd);\n\t\t\t}\n\t\t\tif (instance) {\n\t\t\t\tthis.showPanel(true);\n\t\t\t\tthis.setActiveInstance(instance);\n\t\t\t\treturn instance;\n\t\t\t}\n\t\t} else { // setDefault\n\t\t\tif ('command' in value.profile) {\n\t\t\t\treturn; // Should never happen\n\t\t\t}\n\t\t\t// Add the profile to settings if necessary\n\t\t\tif (value.profile.isAutoDetected) {\n\t\t\t\tconst profilesConfig = await this._configurationService.getValue(`terminal.integrated.profiles.${platformKey}`);\n\t\t\t\tif (typeof profilesConfig === 'object') {\n\t\t\t\t\tconst newProfile: ITerminalProfileObject = {\n\t\t\t\t\t\tpath: value.profile.path\n\t\t\t\t\t};\n\t\t\t\t\tif (value.profile.args) {\n\t\t\t\t\t\tnewProfile.args = value.profile.args;\n\t\t\t\t\t}\n\t\t\t\t\t(profilesConfig as { [key: string]: ITerminalProfileObject })[value.profile.profileName] = newProfile;\n\t\t\t\t}\n\t\t\t\tawait this._configurationService.updateValue(`terminal.integrated.profiles.${platformKey}`, profilesConfig, ConfigurationTarget.USER);\n\t\t\t}\n\t\t\t// Set the default profile\n\t\t\tawait this._configurationService.updateValue(`terminal.integrated.defaultProfile.${platformKey}`, value.profile.profileName, ConfigurationTarget.USER);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate _createProfileQuickPickItem(profile: ITerminalProfile): IProfileQuickPickItem {\n\t\tconst buttons: IQuickInputButton[] = [{\n\t\t\ticonClass: ThemeIcon.asClassName(configureTerminalProfileIcon),\n\t\t\ttooltip: nls.localize('createQuickLaunchProfile', \"Configure Terminal Profile\")\n\t\t}];\n\t\tconst icon = profile.icon ? (iconRegistry.get(profile.icon) || Codicon.terminal) : Codicon.terminal;\n\t\tconst label = `$(${icon.id}) ${profile.profileName}`;\n\t\tif (profile.args) {\n\t\t\tif (typeof profile.args === 'string') {\n\t\t\t\treturn { label, description: `${profile.path} ${profile.args}`, profile, buttons };\n\t\t\t}\n\t\t\tconst argsString = profile.args.map(e => {\n\t\t\t\tif (e.includes(' ')) {\n\t\t\t\t\treturn `\"${e.replace('/\"/g', '\\\\\"')}\"`;\n\t\t\t\t}\n\t\t\t\treturn e;\n\t\t\t}).join(' ');\n\t\t\treturn { label, description: `${profile.path} ${argsString}`, profile, buttons };\n\t\t}\n\t\treturn { label, description: profile.path, profile, buttons };\n\t}\n\n\tpublic createInstance(container: HTMLElement | undefined, shellLaunchConfig: IShellLaunchConfig): ITerminalInstance {\n\t\tconst instance = this._instantiationService.createInstance(TerminalInstance,\n\t\t\tthis._terminalFocusContextKey,\n\t\t\tthis._terminalShellTypeContextKey,\n\t\t\tthis._terminalAltBufferActiveContextKey,\n\t\t\tthis._configHelper,\n\t\t\tcontainer,\n\t\t\tshellLaunchConfig\n\t\t);\n\t\tthis._onInstanceCreated.fire(instance);\n\t\treturn instance;\n\t}\n\n\tprivate _convertProfileToShellLaunchConfig(shellLaunchConfigOrProfile?: IShellLaunchConfig | ITerminalProfile, cwd?: string | URI): IShellLaunchConfig {\n\t\t// Profile was provided\n\t\tif (shellLaunchConfigOrProfile && 'profileName' in shellLaunchConfigOrProfile) {\n\t\t\tconst profile = shellLaunchConfigOrProfile;\n\t\t\treturn {\n\t\t\t\texecutable: profile.path,\n\t\t\t\targs: profile.args,\n\t\t\t\tenv: profile.env,\n\t\t\t\ticon: profile.icon,\n\t\t\t\tname: profile.overrideName ? profile.profileName : undefined,\n\t\t\t\tcwd\n\t\t\t};\n\t\t}\n\n\t\t// Shell launch config was provided\n\t\tif (shellLaunchConfigOrProfile) {\n\t\t\tif (cwd) {\n\t\t\t\tshellLaunchConfigOrProfile.cwd = cwd;\n\t\t\t}\n\t\t\treturn shellLaunchConfigOrProfile;\n\t\t}\n\n\t\t// Return empty shell launch config\n\t\treturn {};\n\t}\n\n\tpublic createTerminal(shellLaunchConfig?: IShellLaunchConfig): ITerminalInstance;\n\tpublic createTerminal(profile: ITerminalProfile, cwd?: string | URI): ITerminalInstance;\n\tpublic createTerminal(shellLaunchConfigOrProfile: IShellLaunchConfig | ITerminalProfile, cwd?: string | URI): ITerminalInstance {\n\t\tconst shellLaunchConfig = this._convertProfileToShellLaunchConfig(shellLaunchConfigOrProfile);\n\n\t\tif (cwd) {\n\t\t\tshellLaunchConfig.cwd = cwd;\n\t\t}\n\n\t\tif (!shellLaunchConfig.customPtyImplementation && !this.isProcessSupportRegistered) {\n\t\t\tthrow new Error('Could not create terminal when process support is not registered');\n\t\t}\n\t\tif (shellLaunchConfig.hideFromUser) {\n\t\t\tconst instance = this.createInstance(undefined, shellLaunchConfig);\n\t\t\tthis._backgroundedTerminalInstances.push(instance);\n\t\t\tthis._initInstanceListeners(instance);\n\t\t\treturn instance;\n\t\t}\n\n\t\t// Add welcome message and title annotation for local terminals launched within remote or\n\t\t// virtual workspaces\n\t\tconst isRemoteWorkspace = !!VirtualWorkspaceContext.getValue(this._contextKeyService) ||\n\t\t\tthis._remoteAgentService.getConnection() && (typeof shellLaunchConfig.cwd === 'string' || shellLaunchConfig.cwd?.scheme === Schemas.file);\n\t\tif (isRemoteWorkspace) {\n\t\t\tshellLaunchConfig.initialText = formatMessageForTerminal(nls.localize('localTerminal', \"Warning: This shell is running on your local machine\"), true);\n\t\t\tshellLaunchConfig.description = nls.localize('localTerminalDescription', \"Local\");\n\t\t}\n\n\t\tconst terminalTab = this._instantiationService.createInstance(TerminalTab, this._terminalContainer, shellLaunchConfig);\n\t\tthis._terminalTabs.push(terminalTab);\n\t\tterminalTab.onPanelMovedToSide(() => this._onPanelMovedToSide.fire());\n\n\t\tconst instance = terminalTab.terminalInstances[0];\n\n\t\tterminalTab.addDisposable(terminalTab.onDisposed(this._onTabDisposed.fire, this._onTabDisposed));\n\t\tterminalTab.addDisposable(terminalTab.onInstancesChanged(this._onInstancesChanged.fire, this._onInstancesChanged));\n\t\tthis._initInstanceListeners(instance);\n\t\tthis._onInstancesChanged.fire();\n\t\tif (this.terminalInstances.length === 1) {\n\t\t\t// It's the first instance so it should be made active automatically, this must fire\n\t\t\t// after onInstancesChanged so consumers can react to the instance being added first\n\t\t\tthis.setActiveInstanceByIndex(0);\n\t\t}\n\t\treturn instance;\n\t}\n\n\tprotected _showBackgroundTerminal(instance: ITerminalInstance): void {\n\t\tthis._backgroundedTerminalInstances.splice(this._backgroundedTerminalInstances.indexOf(instance), 1);\n\t\tinstance.shellLaunchConfig.hideFromUser = false;\n\t\tconst terminalTab = this._instantiationService.createInstance(TerminalTab, this._terminalContainer, instance);\n\t\tthis._terminalTabs.push(terminalTab);\n\t\tterminalTab.addDisposable(terminalTab.onDisposed(this._onTabDisposed.fire, this._onTabDisposed));\n\t\tterminalTab.addDisposable(terminalTab.onInstancesChanged(this._onInstancesChanged.fire, this._onInstancesChanged));\n\t\tif (this.terminalInstances.length === 1) {\n\t\t\t// It's the first instance so it should be made active automatically\n\t\t\tthis.setActiveInstanceByIndex(0);\n\t\t}\n\t\tthis._onInstancesChanged.fire();\n\t}\n\n\tpublic async focusFindWidget(): Promise<void> {\n\t\tawait this.showPanel(false);\n\t\tconst pane = this._viewsService.getActiveViewWithId<TerminalViewPane>(TERMINAL_VIEW_ID);\n\t\tpane?.terminalTabbedView?.focusFindWidget();\n\t}\n\n\tpublic hideFindWidget(): void {\n\t\tconst pane = this._viewsService.getActiveViewWithId<TerminalViewPane>(TERMINAL_VIEW_ID);\n\t\tpane?.terminalTabbedView?.hideFindWidget();\n\t}\n\n\tpublic findNext(): void {\n\t\tconst pane = this._viewsService.getActiveViewWithId<TerminalViewPane>(TERMINAL_VIEW_ID);\n\t\tif (pane?.terminalTabbedView) {\n\t\t\tpane.terminalTabbedView.showFindWidget();\n\t\t\tpane.terminalTabbedView.getFindWidget().find(false);\n\t\t}\n\t}\n\n\tpublic findPrevious(): void {\n\t\tconst pane = this._viewsService.getActiveViewWithId<TerminalViewPane>(TERMINAL_VIEW_ID);\n\t\tif (pane?.terminalTabbedView) {\n\t\t\tpane.terminalTabbedView.showFindWidget();\n\t\t\tpane.terminalTabbedView.getFindWidget().find(true);\n\t\t}\n\t}\n\n\tpublic async setContainers(panelContainer: HTMLElement, terminalContainer: HTMLElement): Promise<void> {\n\t\tthis._configHelper.panelContainer = panelContainer;\n\t\tthis._terminalContainer = terminalContainer;\n\t\tthis._terminalTabs.forEach(tab => tab.attachToElement(terminalContainer));\n\t}\n\n\tpublic hidePanel(): void {\n\t\t// Hide the panel if the terminal is in the panel and it has no sibling views\n\t\tconst location = this._viewDescriptorService.getViewLocationById(TERMINAL_VIEW_ID);\n\t\tif (location === ViewContainerLocation.Panel) {\n\t\t\tconst panel = this._viewDescriptorService.getViewContainerByViewId(TERMINAL_VIEW_ID);\n\t\t\tif (panel && this._viewDescriptorService.getViewContainerModel(panel).activeViewDescriptors.length === 1) {\n\t\t\t\tthis._layoutService.setPanelHidden(true);\n\t\t\t}\n\t\t}\n\t}\n}\n\ninterface IProfileQuickPickItem extends IQuickPickItem {\n\tprofile: ITerminalProfile | ITerminalTypeContribution;\n}\n"]}