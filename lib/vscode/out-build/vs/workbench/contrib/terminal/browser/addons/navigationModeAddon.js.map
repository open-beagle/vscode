{"version":3,"file":"navigationModeAddon.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/terminal/browser/addons/navigationModeAddon.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport type { Terminal, ITerminalAddon } from 'xterm';\nimport { addDisposableListener } from 'vs/base/browser/dom';\nimport { INavigationMode } from 'vs/workbench/contrib/terminal/common/terminal';\n\nexport class NavigationModeAddon implements INavigationMode, ITerminalAddon {\n\tprivate _terminal: Terminal | undefined;\n\n\tconstructor(\n\t\tprivate _navigationModeContextKey: IContextKey<boolean>\n\t) { }\n\n\tactivate(terminal: Terminal): void {\n\t\tthis._terminal = terminal;\n\t}\n\n\tdispose() { }\n\n\texitNavigationMode(): void {\n\t\tif (!this._terminal) {\n\t\t\treturn;\n\t\t}\n\t\tthis._terminal.scrollToBottom();\n\t\tthis._terminal.focus();\n\t}\n\n\tfocusPreviousLine(): void {\n\t\tif (!this._terminal || !this._terminal.element) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Focus previous row if a row is already focused\n\t\tif (document.activeElement && document.activeElement.parentElement && document.activeElement.parentElement.classList.contains('xterm-accessibility-tree')) {\n\t\t\tconst element = <HTMLElement | null>document.activeElement.previousElementSibling;\n\t\t\tif (element) {\n\t\t\t\telement.focus();\n\t\t\t\tconst disposable = addDisposableListener(element, 'blur', () => {\n\t\t\t\t\tthis._navigationModeContextKey.set(false);\n\t\t\t\t\tdisposable.dispose();\n\t\t\t\t});\n\t\t\t\tthis._navigationModeContextKey.set(true);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// Ensure a11y tree exists\n\t\tconst treeContainer = this._terminal.element.querySelector('.xterm-accessibility-tree');\n\t\tif (!treeContainer) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Target is row before the cursor\n\t\tconst targetRow = Math.max(this._terminal.buffer.active.cursorY - 1, 0);\n\n\t\t// Check bounds\n\t\tif (treeContainer.childElementCount < targetRow) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Focus\n\t\tconst element = <HTMLElement>treeContainer.childNodes.item(targetRow);\n\t\telement.focus();\n\t\tconst disposable = addDisposableListener(element, 'blur', () => {\n\t\t\tthis._navigationModeContextKey.set(false);\n\t\t\tdisposable.dispose();\n\t\t});\n\t\tthis._navigationModeContextKey.set(true);\n\t}\n\n\tfocusNextLine(): void {\n\t\tif (!this._terminal || !this._terminal.element) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Focus previous row if a row is already focused\n\t\tif (document.activeElement && document.activeElement.parentElement && document.activeElement.parentElement.classList.contains('xterm-accessibility-tree')) {\n\t\t\tconst element = <HTMLElement | null>document.activeElement.nextElementSibling;\n\t\t\tif (element) {\n\t\t\t\telement.focus();\n\t\t\t\tconst disposable = addDisposableListener(element, 'blur', () => {\n\t\t\t\t\tthis._navigationModeContextKey.set(false);\n\t\t\t\t\tdisposable.dispose();\n\t\t\t\t});\n\t\t\t\tthis._navigationModeContextKey.set(true);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// Ensure a11y tree exists\n\t\tconst treeContainer = this._terminal.element.querySelector('.xterm-accessibility-tree');\n\t\tif (!treeContainer) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Target is cursor row\n\t\tconst targetRow = this._terminal.buffer.active.cursorY;\n\n\t\t// Check bounds\n\t\tif (treeContainer.childElementCount < targetRow) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Focus row before cursor\n\t\tconst element = <HTMLElement>treeContainer.childNodes.item(targetRow);\n\t\telement.focus();\n\t\tconst disposable = addDisposableListener(element, 'blur', () => {\n\t\t\tthis._navigationModeContextKey.set(false);\n\t\t\tdisposable.dispose();\n\t\t});\n\t\tthis._navigationModeContextKey.set(true);\n\t}\n}\n"]}