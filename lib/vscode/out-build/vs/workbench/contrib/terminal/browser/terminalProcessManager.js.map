{"version":3,"sources":["vs/workbench/contrib/terminal/browser/terminalProcessManager.ts"],"names":[],"mappings":"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","file":"terminalProcessManager.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as terminalEnvironment from 'vs/workbench/contrib/terminal/common/terminalEnvironment';\nimport { ProcessState, ITerminalProcessManager, ITerminalConfigHelper, IBeforeProcessDataEvent, ITerminalProfileResolverService, ITerminalConfiguration, TERMINAL_CONFIG_SECTION } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { IHistoryService } from 'vs/workbench/services/history/common/history';\nimport { IInstantiationService, optional } from 'vs/platform/instantiation/common/instantiation';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { IConfigurationResolverService } from 'vs/workbench/services/configurationResolver/common/configurationResolver';\nimport { Schemas } from 'vs/base/common/network';\nimport { getRemoteAuthority } from 'vs/platform/remote/common/remoteHosts';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IRemoteTerminalService, ITerminalInstanceService } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { Disposable, dispose, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { withNullAsUndefined } from 'vs/base/common/types';\nimport { EnvironmentVariableInfoChangesActive, EnvironmentVariableInfoStale } from 'vs/workbench/contrib/terminal/browser/environmentVariableInfo';\nimport { IPathService } from 'vs/workbench/services/path/common/pathService';\nimport { IEnvironmentVariableInfo, IEnvironmentVariableService, IMergedEnvironmentVariableCollection } from 'vs/workbench/contrib/terminal/common/environmentVariable';\nimport { IProcessDataEvent, IShellLaunchConfig, ITerminalChildProcess, ITerminalDimensionsOverride, ITerminalEnvironment, ITerminalLaunchError, FlowControlConstants, TerminalShellType, ILocalTerminalService, IOffProcessTerminalService, ITerminalDimensions } from 'vs/platform/terminal/common/terminal';\nimport { TerminalRecorder } from 'vs/platform/terminal/common/terminalRecorder';\nimport { localize } from 'vs/nls';\nimport { formatMessageForTerminal } from 'vs/workbench/contrib/terminal/common/terminalStrings';\nimport { IProcessEnvironment, OperatingSystem, OS } from 'vs/base/common/platform';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ICompleteTerminalConfiguration } from 'vs/workbench/contrib/terminal/common/remoteTerminalChannel';\n\n/** The amount of time to consider terminal errors to be related to the launch */\nconst LAUNCHING_DURATION = 500;\n\n/**\n * The minimum amount of time between latency requests.\n */\nconst LATENCY_MEASURING_INTERVAL = 1000;\n\nenum ProcessType {\n\tProcess,\n\tPsuedoTerminal\n}\n\n/**\n * Holds all state related to the creation and management of terminal processes.\n *\n * Internal definitions:\n * - Process: The process launched with the terminalProcess.ts file, or the pty as a whole\n * - Pty Process: The pseudoterminal parent process (or the conpty/winpty agent process)\n * - Shell Process: The pseudoterminal child process (ie. the shell)\n */\nexport class TerminalProcessManager extends Disposable implements ITerminalProcessManager {\n\tpublic processState: ProcessState = ProcessState.UNINITIALIZED;\n\tpublic ptyProcessReady: Promise<void>;\n\tpublic shellProcessId: number | undefined;\n\tpublic remoteAuthority: string | undefined;\n\tpublic os: OperatingSystem | undefined;\n\tpublic userHome: string | undefined;\n\tpublic isDisconnected: boolean = false;\n\tpublic environmentVariableInfo: IEnvironmentVariableInfo | undefined;\n\n\tprivate _isDisposed: boolean = false;\n\tprivate _process: ITerminalChildProcess | null = null;\n\tprivate _processType: ProcessType = ProcessType.Process;\n\tprivate _preLaunchInputQueue: string[] = [];\n\tprivate _latency: number = -1;\n\tprivate _latencyLastMeasured: number = 0;\n\tprivate _initialCwd: string | undefined;\n\tprivate _extEnvironmentVariableCollection: IMergedEnvironmentVariableCollection | undefined;\n\tprivate _ackDataBufferer: AckDataBufferer;\n\tprivate _hasWrittenData: boolean = false;\n\tprivate _ptyResponsiveListener: IDisposable | undefined;\n\tprivate _ptyListenersAttached: boolean = false;\n\tprivate _dataFilter: SeamlessRelaunchDataFilter;\n\tprivate _processListeners?: IDisposable[];\n\n\tprivate _shellLaunchConfig?: IShellLaunchConfig;\n\tprivate _dimensions: ITerminalDimensions = { cols: 0, rows: 0 };\n\tprivate _isScreenReaderModeEnabled: boolean = false;\n\n\tprivate readonly _onPtyDisconnect = this._register(new Emitter<void>());\n\tpublic get onPtyDisconnect(): Event<void> { return this._onPtyDisconnect.event; }\n\tprivate readonly _onPtyReconnect = this._register(new Emitter<void>());\n\tpublic get onPtyReconnect(): Event<void> { return this._onPtyReconnect.event; }\n\n\tprivate readonly _onProcessReady = this._register(new Emitter<void>());\n\tpublic get onProcessReady(): Event<void> { return this._onProcessReady.event; }\n\tprivate readonly _onBeforeProcessData = this._register(new Emitter<IBeforeProcessDataEvent>());\n\tpublic get onBeforeProcessData(): Event<IBeforeProcessDataEvent> { return this._onBeforeProcessData.event; }\n\tprivate readonly _onProcessData = this._register(new Emitter<IProcessDataEvent>());\n\tpublic get onProcessData(): Event<IProcessDataEvent> { return this._onProcessData.event; }\n\tprivate readonly _onProcessTitle = this._register(new Emitter<string>());\n\tpublic get onProcessTitle(): Event<string> { return this._onProcessTitle.event; }\n\tprivate readonly _onProcessShellTypeChanged = this._register(new Emitter<TerminalShellType>());\n\tpublic get onProcessShellTypeChanged(): Event<TerminalShellType> { return this._onProcessShellTypeChanged.event; }\n\tprivate readonly _onProcessExit = this._register(new Emitter<number | undefined>());\n\tpublic get onProcessExit(): Event<number | undefined> { return this._onProcessExit.event; }\n\tprivate readonly _onProcessOverrideDimensions = this._register(new Emitter<ITerminalDimensionsOverride | undefined>());\n\tpublic get onProcessOverrideDimensions(): Event<ITerminalDimensionsOverride | undefined> { return this._onProcessOverrideDimensions.event; }\n\tprivate readonly _onProcessOverrideShellLaunchConfig = this._register(new Emitter<IShellLaunchConfig>());\n\tpublic get onProcessResolvedShellLaunchConfig(): Event<IShellLaunchConfig> { return this._onProcessOverrideShellLaunchConfig.event; }\n\tprivate readonly _onEnvironmentVariableInfoChange = this._register(new Emitter<IEnvironmentVariableInfo>());\n\tpublic get onEnvironmentVariableInfoChanged(): Event<IEnvironmentVariableInfo> { return this._onEnvironmentVariableInfoChange.event; }\n\n\tpublic get persistentProcessId(): number | undefined { return this._process?.id; }\n\tpublic get shouldPersist(): boolean { return this._process ? this._process.shouldPersist : false; }\n\tpublic get hasWrittenData(): boolean { return this._hasWrittenData; }\n\n\tprivate readonly _localTerminalService?: ILocalTerminalService;\n\n\tconstructor(\n\t\tprivate readonly _instanceId: number,\n\t\tprivate readonly _configHelper: ITerminalConfigHelper,\n\t\t@IHistoryService private readonly _historyService: IHistoryService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@IWorkspaceContextService private readonly _workspaceContextService: IWorkspaceContextService,\n\t\t@IConfigurationResolverService private readonly _configurationResolverService: IConfigurationResolverService,\n\t\t@IWorkbenchEnvironmentService private readonly _workbenchEnvironmentService: IWorkbenchEnvironmentService,\n\t\t@IProductService private readonly _productService: IProductService,\n\t\t@ITerminalInstanceService private readonly _terminalInstanceService: ITerminalInstanceService,\n\t\t@IRemoteAgentService private readonly _remoteAgentService: IRemoteAgentService,\n\t\t@IPathService private readonly _pathService: IPathService,\n\t\t@IEnvironmentVariableService private readonly _environmentVariableService: IEnvironmentVariableService,\n\t\t@IRemoteTerminalService private readonly _remoteTerminalService: IRemoteTerminalService,\n\t\t@ITerminalProfileResolverService private readonly _terminalProfileResolverService: ITerminalProfileResolverService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@optional(ILocalTerminalService) localTerminalService: ILocalTerminalService\n\t) {\n\t\tsuper();\n\t\tthis._localTerminalService = localTerminalService;\n\n\t\tthis.ptyProcessReady = this._createPtyProcessReadyPromise();\n\t\tthis.getLatency();\n\t\tthis._ackDataBufferer = new AckDataBufferer(e => this._process?.acknowledgeDataEvent(e));\n\t\tthis._dataFilter = this._instantiationService.createInstance(SeamlessRelaunchDataFilter);\n\t\tthis._dataFilter.onProcessData(ev => {\n\t\t\tconst data = (typeof ev === 'string' ? ev : ev.data);\n\t\t\tconst trackCommit = (typeof ev === 'string' ? false : ev.trackCommit);\n\t\t\tconst beforeProcessDataEvent: IBeforeProcessDataEvent = { data };\n\t\t\tthis._onBeforeProcessData.fire(beforeProcessDataEvent);\n\t\t\tif (beforeProcessDataEvent.data && beforeProcessDataEvent.data.length > 0) {\n\t\t\t\tthis._onProcessData.fire({ data: beforeProcessDataEvent.data, trackCommit });\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic override dispose(immediate: boolean = false): void {\n\t\tthis._isDisposed = true;\n\t\tif (this._process) {\n\t\t\t// If the process was still connected this dispose came from\n\t\t\t// within VS Code, not the process, so mark the process as\n\t\t\t// killed by the user.\n\t\t\tthis.processState = ProcessState.KILLED_BY_USER;\n\t\t\tthis._process.shutdown(immediate);\n\t\t\tthis._process = null;\n\t\t}\n\t\tsuper.dispose();\n\t}\n\n\tprivate _createPtyProcessReadyPromise(): Promise<void> {\n\t\treturn new Promise<void>(c => {\n\t\t\tconst listener = this.onProcessReady(() => {\n\t\t\t\tthis._logService.debug(`Terminal process ready (shellProcessId: ${this.shellProcessId})`);\n\t\t\t\tlistener.dispose();\n\t\t\t\tc(undefined);\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic detachFromProcess(): void {\n\t\tif (this._process?.detach) {\n\t\t\tthis._process.detach();\n\t\t}\n\t}\n\n\tpublic async createProcess(\n\t\tshellLaunchConfig: IShellLaunchConfig,\n\t\tcols: number,\n\t\trows: number,\n\t\tisScreenReaderModeEnabled: boolean,\n\t\treset: boolean = true\n\t): Promise<ITerminalLaunchError | undefined> {\n\t\tthis._shellLaunchConfig = shellLaunchConfig;\n\t\tthis._dimensions.cols = cols;\n\t\tthis._dimensions.rows = rows;\n\t\tthis._isScreenReaderModeEnabled = isScreenReaderModeEnabled;\n\n\t\tlet newProcess: ITerminalChildProcess;\n\n\t\tif (shellLaunchConfig.customPtyImplementation) {\n\t\t\tthis._processType = ProcessType.PsuedoTerminal;\n\t\t\tnewProcess = shellLaunchConfig.customPtyImplementation(this._instanceId, cols, rows);\n\t\t} else {\n\t\t\tif (shellLaunchConfig.cwd && typeof shellLaunchConfig.cwd === 'object') {\n\t\t\t\tthis.remoteAuthority = getRemoteAuthority(shellLaunchConfig.cwd);\n\t\t\t} else {\n\t\t\t\tthis.remoteAuthority = this._workbenchEnvironmentService.remoteAuthority;\n\t\t\t}\n\t\t\tconst hasRemoteAuthority = !!this.remoteAuthority;\n\n\t\t\t// Create variable resolver\n\t\t\tconst activeWorkspaceRootUri = this._historyService.getLastActiveWorkspaceRoot();\n\t\t\tconst lastActiveWorkspace = activeWorkspaceRootUri ? withNullAsUndefined(this._workspaceContextService.getWorkspaceFolder(activeWorkspaceRootUri)) : undefined;\n\t\t\tconst variableResolver = terminalEnvironment.createVariableResolver(lastActiveWorkspace, await this._terminalProfileResolverService.getShellEnvironment(this.remoteAuthority), this._configurationResolverService);\n\n\t\t\t// resolvedUserHome is needed here as remote resolvers can launch local terminals before\n\t\t\t// they're connected to the remote.\n\t\t\tthis.userHome = this._pathService.resolvedUserHome?.fsPath;\n\t\t\tthis.os = OS;\n\t\t\tif (hasRemoteAuthority) {\n\t\t\t\tconst userHomeUri = await this._pathService.userHome();\n\t\t\t\tthis.userHome = userHomeUri.path;\n\t\t\t\tconst remoteEnv = await this._remoteAgentService.getEnvironment();\n\t\t\t\tif (!remoteEnv) {\n\t\t\t\t\tthrow new Error(`Failed to get remote environment for remote authority \"${this.remoteAuthority}\"`);\n\t\t\t\t}\n\t\t\t\tthis.userHome = remoteEnv.userHome.path;\n\t\t\t\tthis.os = remoteEnv.os;\n\n\t\t\t\t// this is a copy of what the merged environment collection is on the remote side\n\t\t\t\tawait this._setupEnvVariableInfo(variableResolver, shellLaunchConfig);\n\n\t\t\t\tconst shouldPersist = !shellLaunchConfig.isFeatureTerminal && this._configHelper.config.enablePersistentSessions;\n\t\t\t\tif (shellLaunchConfig.attachPersistentProcess) {\n\t\t\t\t\tconst result = await this._remoteTerminalService.attachToProcess(shellLaunchConfig.attachPersistentProcess.id);\n\t\t\t\t\tif (result) {\n\t\t\t\t\t\tnewProcess = result;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._logService.trace(`Attach to process failed for terminal ${shellLaunchConfig.attachPersistentProcess}`);\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tawait this._terminalProfileResolverService.resolveShellLaunchConfig(shellLaunchConfig, {\n\t\t\t\t\t\tremoteAuthority: this.remoteAuthority,\n\t\t\t\t\t\tos: this.os\n\t\t\t\t\t});\n\t\t\t\t\tconst terminalConfig = this._configurationService.getValue<ITerminalConfiguration>(TERMINAL_CONFIG_SECTION);\n\t\t\t\t\tconst configuration: ICompleteTerminalConfiguration = {\n\t\t\t\t\t\t'terminal.integrated.automationShell.windows': this._terminalProfileResolverService.getSafeConfigValueFullKey('terminal.integrated.automationShell.windows') as string,\n\t\t\t\t\t\t'terminal.integrated.automationShell.osx': this._terminalProfileResolverService.getSafeConfigValueFullKey('terminal.integrated.automationShell.osx') as string,\n\t\t\t\t\t\t'terminal.integrated.automationShell.linux': this._terminalProfileResolverService.getSafeConfigValueFullKey('terminal.integrated.automationShell.linux') as string,\n\t\t\t\t\t\t'terminal.integrated.shell.windows': this._terminalProfileResolverService.getSafeConfigValueFullKey('terminal.integrated.shell.windows') as string,\n\t\t\t\t\t\t'terminal.integrated.shell.osx': this._terminalProfileResolverService.getSafeConfigValueFullKey('terminal.integrated.shell.osx') as string,\n\t\t\t\t\t\t'terminal.integrated.shell.linux': this._terminalProfileResolverService.getSafeConfigValueFullKey('terminal.integrated.shell.linux') as string,\n\t\t\t\t\t\t'terminal.integrated.shellArgs.windows': this._terminalProfileResolverService.getSafeConfigValueFullKey('terminal.integrated.shellArgs.windows') as string | string[],\n\t\t\t\t\t\t'terminal.integrated.shellArgs.osx': this._terminalProfileResolverService.getSafeConfigValueFullKey('terminal.integrated.shellArgs.osx') as string | string[],\n\t\t\t\t\t\t'terminal.integrated.shellArgs.linux': this._terminalProfileResolverService.getSafeConfigValueFullKey('terminal.integrated.shellArgs.linux') as string | string[],\n\t\t\t\t\t\t'terminal.integrated.env.windows': this._terminalProfileResolverService.getSafeConfigValueFullKey('terminal.integrated.env.windows') as ITerminalEnvironment,\n\t\t\t\t\t\t'terminal.integrated.env.osx': this._terminalProfileResolverService.getSafeConfigValueFullKey('terminal.integrated.env.osx') as ITerminalEnvironment,\n\t\t\t\t\t\t'terminal.integrated.env.linux': this._terminalProfileResolverService.getSafeConfigValueFullKey('terminal.integrated.env.linux') as ITerminalEnvironment,\n\t\t\t\t\t\t'terminal.integrated.inheritEnv': terminalConfig.inheritEnv,\n\t\t\t\t\t\t'terminal.integrated.cwd': this._terminalProfileResolverService.getSafeConfigValueFullKey('terminal.integrated.cwd') as string,\n\t\t\t\t\t\t'terminal.integrated.detectLocale': terminalConfig.detectLocale\n\t\t\t\t\t};\n\t\t\t\t\tnewProcess = await this._remoteTerminalService.createProcess(shellLaunchConfig, configuration, activeWorkspaceRootUri, cols, rows, shouldPersist, this._configHelper);\n\t\t\t\t}\n\t\t\t\tif (!this._isDisposed) {\n\t\t\t\t\tthis._setupPtyHostListeners(this._remoteTerminalService);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!this._localTerminalService) {\n\t\t\t\t\tthis._logService.trace(`Tried to launch a local terminal which is not supported in this window`);\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\tif (shellLaunchConfig.attachPersistentProcess) {\n\t\t\t\t\tconst result = await this._localTerminalService.attachToProcess(shellLaunchConfig.attachPersistentProcess.id);\n\t\t\t\t\tif (result) {\n\t\t\t\t\t\tnewProcess = result;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._logService.trace(`Attach to process failed for terminal ${shellLaunchConfig.attachPersistentProcess}`);\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tnewProcess = await this._launchLocalProcess(this._localTerminalService, shellLaunchConfig, cols, rows, this.userHome, isScreenReaderModeEnabled, variableResolver);\n\t\t\t\t}\n\t\t\t\tif (!this._isDisposed) {\n\t\t\t\t\tthis._setupPtyHostListeners(this._localTerminalService);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// If the process was disposed during its creation, shut it down and return failure\n\t\tif (this._isDisposed) {\n\t\t\tnewProcess.shutdown(false);\n\t\t\treturn undefined;\n\t\t}\n\n\t\tthis._process = newProcess;\n\n\t\tthis.processState = ProcessState.LAUNCHING;\n\n\t\tthis._dataFilter.newProcess(this._process, reset);\n\n\t\tif (this._processListeners) {\n\t\t\tdispose(this._processListeners);\n\t\t}\n\t\tthis._processListeners = [\n\t\t\tnewProcess.onProcessReady((e: { pid: number, cwd: string }) => {\n\t\t\t\tthis.shellProcessId = e.pid;\n\t\t\t\tthis._initialCwd = e.cwd;\n\t\t\t\tthis._onProcessReady.fire();\n\n\t\t\t\tif (this._preLaunchInputQueue.length > 0 && this._process) {\n\t\t\t\t\t// Send any queued data that's waiting\n\t\t\t\t\tnewProcess.input(this._preLaunchInputQueue.join(''));\n\t\t\t\t\tthis._preLaunchInputQueue.length = 0;\n\t\t\t\t}\n\t\t\t}),\n\t\t\tnewProcess.onProcessTitleChanged(title => this._onProcessTitle.fire(title)),\n\t\t\tnewProcess.onProcessShellTypeChanged(type => this._onProcessShellTypeChanged.fire(type)),\n\t\t\tnewProcess.onProcessExit(exitCode => this._onExit(exitCode))\n\t\t];\n\t\tif (newProcess.onProcessOverrideDimensions) {\n\t\t\tthis._processListeners.push(newProcess.onProcessOverrideDimensions(e => this._onProcessOverrideDimensions.fire(e)));\n\t\t}\n\t\tif (newProcess.onProcessResolvedShellLaunchConfig) {\n\t\t\tthis._processListeners.push(newProcess.onProcessResolvedShellLaunchConfig(e => this._onProcessOverrideShellLaunchConfig.fire(e)));\n\t\t}\n\n\t\tsetTimeout(() => {\n\t\t\tif (this.processState === ProcessState.LAUNCHING) {\n\t\t\t\tthis.processState = ProcessState.RUNNING;\n\t\t\t}\n\t\t}, LAUNCHING_DURATION);\n\n\t\tconst result = await newProcess.start();\n\t\tif (result) {\n\t\t\t// Error\n\t\t\treturn result;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tpublic async relaunch(shellLaunchConfig: IShellLaunchConfig, cols: number, rows: number, isScreenReaderModeEnabled: boolean, reset: boolean): Promise<ITerminalLaunchError | undefined> {\n\t\tthis.ptyProcessReady = this._createPtyProcessReadyPromise();\n\t\tthis._logService.trace(`Relaunching terminal instance ${this._instanceId}`);\n\n\t\t// Fire reconnect if needed to ensure the terminal is usable again\n\t\tif (this.isDisconnected) {\n\t\t\tthis.isDisconnected = false;\n\t\t\tthis._onPtyReconnect.fire();\n\t\t}\n\n\t\t// Clear data written flag to re-enable seamless relaunch if this relaunch was manually\n\t\t// triggered\n\t\tthis._hasWrittenData = false;\n\n\t\treturn this.createProcess(shellLaunchConfig, cols, rows, isScreenReaderModeEnabled, reset);\n\t}\n\n\t// Fetch any extension environment additions and apply them\n\tprivate async _setupEnvVariableInfo(variableResolver: terminalEnvironment.VariableResolver | undefined, shellLaunchConfig: IShellLaunchConfig): Promise<IProcessEnvironment> {\n\t\t// const platformKey = isWindows ? 'windows' : (isMacintosh ? 'osx' : 'linux');\n\t\t// this._configurationService.getValue<ITerminalEnvironment | undefined>(`terminal.integrated.env.${platformKey}`);\n\t\tconst envFromConfigValue = this._terminalProfileResolverService.getSafeConfigValue('env', OS) as ITerminalEnvironment | undefined;\n\t\tthis._configHelper.showRecommendations(shellLaunchConfig);\n\t\tconst baseEnv = await (this._configHelper.config.inheritEnv\n\t\t\t? this._terminalProfileResolverService.getShellEnvironment(this.remoteAuthority)\n\t\t\t: this._terminalInstanceService.getMainProcessParentEnv());\n\t\tconst env = terminalEnvironment.createTerminalEnvironment(shellLaunchConfig, envFromConfigValue, variableResolver, this._productService.version, this._configHelper.config.detectLocale, baseEnv);\n\n\t\tif (!shellLaunchConfig.strictEnv && !shellLaunchConfig.hideFromUser) {\n\t\t\tthis._extEnvironmentVariableCollection = this._environmentVariableService.mergedCollection;\n\t\t\tthis._register(this._environmentVariableService.onDidChangeCollections(newCollection => this._onEnvironmentVariableCollectionChange(newCollection)));\n\t\t\t// For remote terminals, this is a copy of the mergedEnvironmentCollection created on\n\t\t\t// the remote side. Since the environment collection is synced between the remote and\n\t\t\t// local sides immediately this is a fairly safe way of enabling the env var diffing and\n\t\t\t// info widget. While technically these could differ due to the slight change of a race\n\t\t\t// condition, the chance is minimal plus the impact on the user is also not that great\n\t\t\t// if it happens - it's not worth adding plumbing to sync back the resolved collection.\n\t\t\tthis._extEnvironmentVariableCollection.applyToProcessEnvironment(env, variableResolver);\n\t\t\tif (this._extEnvironmentVariableCollection.map.size > 0) {\n\t\t\t\tthis.environmentVariableInfo = new EnvironmentVariableInfoChangesActive(this._extEnvironmentVariableCollection);\n\t\t\t\tthis._onEnvironmentVariableInfoChange.fire(this.environmentVariableInfo);\n\t\t\t}\n\t\t}\n\t\treturn env;\n\t}\n\n\tprivate async _launchLocalProcess(\n\t\tlocalTerminalService: ILocalTerminalService,\n\t\tshellLaunchConfig: IShellLaunchConfig,\n\t\tcols: number,\n\t\trows: number,\n\t\tuserHome: string | undefined,\n\t\tisScreenReaderModeEnabled: boolean,\n\t\tvariableResolver: terminalEnvironment.VariableResolver | undefined\n\t): Promise<ITerminalChildProcess> {\n\t\tawait this._terminalProfileResolverService.resolveShellLaunchConfig(shellLaunchConfig, {\n\t\t\tremoteAuthority: undefined,\n\t\t\tos: OS\n\t\t});\n\n\t\tconst activeWorkspaceRootUri = this._historyService.getLastActiveWorkspaceRoot(Schemas.file);\n\n\t\tconst initialCwd = terminalEnvironment.getCwd(\n\t\t\tshellLaunchConfig,\n\t\t\tuserHome,\n\t\t\tvariableResolver,\n\t\t\tactiveWorkspaceRootUri,\n\t\t\tthis._configHelper.config.cwd,\n\t\t\tthis._logService\n\t\t);\n\n\t\tconst env = await this._setupEnvVariableInfo(variableResolver, shellLaunchConfig);\n\n\t\tconst useConpty = this._configHelper.config.windowsEnableConpty && !isScreenReaderModeEnabled;\n\t\tconst shouldPersist = this._configHelper.config.enablePersistentSessions && !shellLaunchConfig.isFeatureTerminal;\n\n\t\treturn await localTerminalService.createProcess(shellLaunchConfig, initialCwd, cols, rows, env, useConpty, shouldPersist);\n\t}\n\n\tprivate _setupPtyHostListeners(offProcessTerminalService: IOffProcessTerminalService) {\n\t\tif (this._ptyListenersAttached) {\n\t\t\treturn;\n\t\t}\n\t\tthis._ptyListenersAttached = true;\n\n\t\t// Mark the process as disconnected is the pty host is unresponsive, the responsive event\n\t\t// will fire only when the pty host was already unresponsive\n\t\tthis._register(offProcessTerminalService.onPtyHostUnresponsive(() => {\n\t\t\tthis.isDisconnected = true;\n\t\t\tthis._onPtyDisconnect.fire();\n\t\t}));\n\t\tthis._ptyResponsiveListener = offProcessTerminalService.onPtyHostResponsive(() => {\n\t\t\tthis.isDisconnected = false;\n\t\t\tthis._onPtyReconnect.fire();\n\t\t});\n\t\tthis._register(toDisposable(() => this._ptyResponsiveListener?.dispose()));\n\n\t\t// When the pty host restarts, reconnect is no longer possible so dispose the responsive\n\t\t// listener\n\t\tthis._register(offProcessTerminalService.onPtyHostRestart(async () => {\n\t\t\t// When the pty host restarts, reconnect is no longer possible\n\t\t\tif (!this.isDisconnected) {\n\t\t\t\tthis.isDisconnected = true;\n\t\t\t\tthis._onPtyDisconnect.fire();\n\t\t\t}\n\t\t\tthis._ptyResponsiveListener?.dispose();\n\t\t\tthis._ptyResponsiveListener = undefined;\n\t\t\tif (this._shellLaunchConfig) {\n\t\t\t\tif (this._shellLaunchConfig.isFeatureTerminal) {\n\t\t\t\t\t// Indicate the process is exited (and gone forever) only for feature terminals\n\t\t\t\t\t// so they can react to the exit, this is particularly important for tasks so\n\t\t\t\t\t// that it knows that the process is not still active. Note that this is not\n\t\t\t\t\t// done for regular terminals because otherwise the terminal instance would be\n\t\t\t\t\t// disposed.\n\t\t\t\t\tthis._onExit(-1);\n\t\t\t\t} else {\n\t\t\t\t\t// For normal terminals write a message indicating what happened and relaunch\n\t\t\t\t\t// using the previous shellLaunchConfig\n\t\t\t\t\tlet message = localize('ptyHostRelaunch', \"Restarting the terminal because the connection to the shell process was lost...\");\n\t\t\t\t\tthis._onProcessData.fire({ data: formatMessageForTerminal(message), trackCommit: false });\n\t\t\t\t\tawait this.relaunch(this._shellLaunchConfig, this._dimensions.cols, this._dimensions.rows, this._isScreenReaderModeEnabled, false);\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t}\n\n\tpublic setDimensions(cols: number, rows: number): Promise<void>;\n\tpublic setDimensions(cols: number, rows: number, sync: false): Promise<void>;\n\tpublic setDimensions(cols: number, rows: number, sync: true): void;\n\tpublic setDimensions(cols: number, rows: number, sync?: boolean): Promise<void> | void {\n\t\tif (sync) {\n\t\t\tthis._resize(cols, rows);\n\t\t\treturn;\n\t\t}\n\n\t\treturn this.ptyProcessReady.then(() => this._resize(cols, rows));\n\t}\n\n\tprivate _resize(cols: number, rows: number) {\n\t\tif (!this._process) {\n\t\t\treturn;\n\t\t}\n\t\t// The child process could already be terminated\n\t\ttry {\n\t\t\tthis._process!.resize(cols, rows);\n\t\t} catch (error) {\n\t\t\t// We tried to write to a closed pipe / channel.\n\t\t\tif (error.code !== 'EPIPE' && error.code !== 'ERR_IPC_CHANNEL_CLOSED') {\n\t\t\t\tthrow (error);\n\t\t\t}\n\t\t}\n\t\tthis._dimensions.cols = cols;\n\t\tthis._dimensions.rows = rows;\n\t}\n\n\tpublic async write(data: string): Promise<void> {\n\t\tawait this.ptyProcessReady;\n\t\tthis._dataFilter.disableSeamlessRelaunch();\n\t\tthis._hasWrittenData = true;\n\t\tif (this.shellProcessId || this._processType === ProcessType.PsuedoTerminal) {\n\t\t\tif (this._process) {\n\t\t\t\t// Send data if the pty is ready\n\t\t\t\tthis._process.input(data);\n\t\t\t}\n\t\t} else {\n\t\t\t// If the pty is not ready, queue the data received to send later\n\t\t\tthis._preLaunchInputQueue.push(data);\n\t\t}\n\t}\n\n\tpublic async processBinary(data: string): Promise<void> {\n\t\tawait this.ptyProcessReady;\n\t\tthis._dataFilter.disableSeamlessRelaunch();\n\t\tthis._hasWrittenData = true;\n\t\tthis._process?.processBinary(data);\n\t}\n\n\tpublic getInitialCwd(): Promise<string> {\n\t\treturn Promise.resolve(this._initialCwd ? this._initialCwd : '');\n\t}\n\n\tpublic getCwd(): Promise<string> {\n\t\tif (!this._process) {\n\t\t\treturn Promise.resolve('');\n\t\t}\n\t\treturn this._process.getCwd();\n\t}\n\n\tpublic async getLatency(): Promise<number> {\n\t\tawait this.ptyProcessReady;\n\t\tif (!this._process) {\n\t\t\treturn Promise.resolve(0);\n\t\t}\n\t\tif (this._latencyLastMeasured === 0 || this._latencyLastMeasured + LATENCY_MEASURING_INTERVAL < Date.now()) {\n\t\t\tconst latencyRequest = this._process.getLatency();\n\t\t\tthis._latency = await latencyRequest;\n\t\t\tthis._latencyLastMeasured = Date.now();\n\t\t}\n\t\treturn Promise.resolve(this._latency);\n\t}\n\n\tpublic acknowledgeDataEvent(charCount: number): void {\n\t\tthis._ackDataBufferer.ack(charCount);\n\t}\n\n\tprivate _onExit(exitCode: number | undefined): void {\n\t\tthis._process = null;\n\n\t\t// If the process is marked as launching then mark the process as killed\n\t\t// during launch. This typically means that there is a problem with the\n\t\t// shell and args.\n\t\tif (this.processState === ProcessState.LAUNCHING) {\n\t\t\tthis.processState = ProcessState.KILLED_DURING_LAUNCH;\n\t\t}\n\n\t\t// If TerminalInstance did not know about the process exit then it was\n\t\t// triggered by the process, not on VS Code's side.\n\t\tif (this.processState === ProcessState.RUNNING) {\n\t\t\tthis.processState = ProcessState.KILLED_BY_PROCESS;\n\t\t}\n\n\t\tthis._onProcessExit.fire(exitCode);\n\t}\n\n\tprivate _onEnvironmentVariableCollectionChange(newCollection: IMergedEnvironmentVariableCollection): void {\n\t\tconst diff = this._extEnvironmentVariableCollection!.diff(newCollection);\n\t\tif (diff === undefined) {\n\t\t\treturn;\n\t\t}\n\t\tthis.environmentVariableInfo = this._instantiationService.createInstance(EnvironmentVariableInfoStale, diff, this._instanceId);\n\t\tthis._onEnvironmentVariableInfoChange.fire(this.environmentVariableInfo);\n\t}\n}\n\nclass AckDataBufferer {\n\tprivate _unsentCharCount: number = 0;\n\n\tconstructor(\n\t\tprivate readonly _callback: (charCount: number) => void\n\t) {\n\t}\n\n\tack(charCount: number) {\n\t\tthis._unsentCharCount += charCount;\n\t\twhile (this._unsentCharCount > FlowControlConstants.CharCountAckSize) {\n\t\t\tthis._unsentCharCount -= FlowControlConstants.CharCountAckSize;\n\t\t\tthis._callback(FlowControlConstants.CharCountAckSize);\n\t\t}\n\t}\n}\n\nconst enum SeamlessRelaunchConstants {\n\t/**\n\t * How long to record data events for new terminals.\n\t */\n\tRecordTerminalDuration = 10000,\n\t/**\n\t * The maximum duration after a relaunch occurs to trigger a swap.\n\t */\n\tSwapWaitMaximumDuration = 3000\n}\n\n/**\n * Filters data events from the process and supports seamlessly restarting swapping out the process\n * with another, delaying the swap in output in order to minimize flickering/clearing of the\n * terminal.\n */\nclass SeamlessRelaunchDataFilter extends Disposable {\n\tprivate _firstRecorder?: TerminalRecorder;\n\tprivate _secondRecorder?: TerminalRecorder;\n\tprivate _firstDisposable?: IDisposable;\n\tprivate _secondDisposable?: IDisposable;\n\tprivate _dataListener?: IDisposable;\n\tprivate _activeProcess?: ITerminalChildProcess;\n\tprivate _disableSeamlessRelaunch: boolean = false;\n\n\tprivate _swapTimeout?: number;\n\n\tprivate readonly _onProcessData = this._register(new Emitter<string | IProcessDataEvent>());\n\tpublic get onProcessData(): Event<string | IProcessDataEvent> { return this._onProcessData.event; }\n\n\tconstructor(\n\t\t@ILogService private readonly _logService: ILogService\n\t) {\n\t\tsuper();\n\t}\n\n\tnewProcess(process: ITerminalChildProcess, reset: boolean) {\n\t\t// Stop listening to the old process and trigger delayed shutdown (for hang issue #71966)\n\t\tthis._dataListener?.dispose();\n\t\tthis._activeProcess?.shutdown(false);\n\n\t\tthis._activeProcess = process;\n\n\t\t// Start firing events immediately if:\n\t\t// - there's no recorder, which means it's a new terminal\n\t\t// - this is not a reset, so seamless relaunch isn't necessary\n\t\t// - seamless relaunch is disabled because the terminal has accepted input\n\t\tif (!this._firstRecorder || !reset || this._disableSeamlessRelaunch) {\n\t\t\tthis._firstDisposable?.dispose();\n\t\t\t[this._firstRecorder, this._firstDisposable] = this._createRecorder(process);\n\t\t\tif (this._disableSeamlessRelaunch && reset) {\n\t\t\t\tthis._onProcessData.fire('\\x1bc');\n\t\t\t}\n\t\t\tthis._dataListener = process.onProcessData(e => this._onProcessData.fire(e));\n\t\t\tthis._disableSeamlessRelaunch = false;\n\t\t\treturn;\n\t\t}\n\n\t\t// Trigger a swap if there was a recent relaunch\n\t\tif (this._secondRecorder) {\n\t\t\tthis.triggerSwap();\n\t\t}\n\n\t\tthis._swapTimeout = window.setTimeout(() => this.triggerSwap(), SeamlessRelaunchConstants.SwapWaitMaximumDuration);\n\n\t\t// Pause all outgoing data events\n\t\tthis._dataListener?.dispose();\n\n\t\tthis._firstDisposable?.dispose();\n\t\tconst recorder = this._createRecorder(process);\n\t\t[this._secondRecorder, this._secondDisposable] = recorder;\n\t}\n\n\t/**\n\t * Disables seamless relaunch for the active process\n\t */\n\tdisableSeamlessRelaunch() {\n\t\tthis._disableSeamlessRelaunch = true;\n\t\tthis._stopRecording();\n\t\tthis.triggerSwap();\n\t}\n\n\t/**\n\t * Trigger the swap of the processes if needed (eg. timeout, input)\n\t */\n\ttriggerSwap() {\n\t\t// Clear the swap timeout if it exists\n\t\tif (this._swapTimeout) {\n\t\t\twindow.clearTimeout(this._swapTimeout);\n\t\t\tthis._swapTimeout = undefined;\n\t\t}\n\n\t\t// Do nothing if there's nothing being recorder\n\t\tif (!this._firstRecorder) {\n\t\t\treturn;\n\t\t}\n\t\t// Clear the first recorder if no second process was attached before the swap trigger\n\t\tif (!this._secondRecorder) {\n\t\t\tthis._firstRecorder = undefined;\n\t\t\tthis._firstDisposable?.dispose();\n\t\t\treturn;\n\t\t}\n\n\t\t// Generate data for each recorder\n\t\tconst firstData = this._getDataFromRecorder(this._firstRecorder);\n\t\tconst secondData = this._getDataFromRecorder(this._secondRecorder);\n\n\t\t// Re-write the terminal if the data differs\n\t\tif (firstData === secondData) {\n\t\t\tthis._logService.trace(`Seamless terminal relaunch - identical content`);\n\t\t} else {\n\t\t\tthis._logService.trace(`Seamless terminal relaunch - resetting content`);\n\t\t\t// Fire full reset (RIS) followed by the new data so the update happens in the same frame\n\t\t\tthis._onProcessData.fire({ data: `\\x1bc${secondData}`, trackCommit: false });\n\t\t}\n\n\t\t// Set up the new data listener\n\t\tthis._dataListener?.dispose();\n\t\tthis._dataListener = this._activeProcess!.onProcessData(e => this._onProcessData.fire(e));\n\n\t\t// Replace first recorder with second\n\t\tthis._firstRecorder = this._secondRecorder;\n\t\tthis._firstDisposable?.dispose();\n\t\tthis._firstDisposable = this._secondDisposable;\n\t\tthis._secondRecorder = undefined;\n\t}\n\n\tprivate _stopRecording() {\n\t\t// Continue recording if a swap is coming\n\t\tif (this._swapTimeout) {\n\t\t\treturn;\n\t\t}\n\t\t// Stop recording\n\t\tthis._firstRecorder = undefined;\n\t\tthis._firstDisposable?.dispose();\n\t\tthis._secondRecorder = undefined;\n\t\tthis._secondDisposable?.dispose();\n\t}\n\n\tprivate _createRecorder(process: ITerminalChildProcess): [TerminalRecorder, IDisposable] {\n\t\tconst recorder = new TerminalRecorder(0, 0);\n\t\tconst disposable = process.onProcessData(e => recorder.recordData(typeof e === 'string' ? e : e.data));\n\t\treturn [recorder, disposable];\n\t}\n\n\tprivate _getDataFromRecorder(recorder: TerminalRecorder): string {\n\t\treturn recorder.generateReplayEvent().events.filter(e => !!e.data).map(e => e.data).join('');\n\t}\n}\n"]}