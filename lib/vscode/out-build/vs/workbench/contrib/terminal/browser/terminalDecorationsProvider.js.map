{"version":3,"sources":["vs/workbench/contrib/terminal/browser/terminalDecorationsProvider.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAgBhG,IAAa,2BAA2B,GAAxC,MAAa,2BAA2B;QAIvC,YACoC,gBAAkC;YAAlC,qBAAgB,GAAhB,gBAAgB,CAAkB;YAJ7D,UAAK,GAAW,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAO,EAAE,IAAU,CAAC,CAAC;YACtC,iBAAY,GAAG,IAAI,eAAO,EAAS,CAAC;YAKpD,IAAI,CAAC,gBAAgB,CAAC,8BAA8B,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QACjG,CAAC;QAED,IAAI,WAAW;YACd,OAAO,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;QAChC,CAAC;QAED,kBAAkB,CAAC,QAAa;;YAC/B,IAAI,QAAQ,CAAC,MAAM,KAAK,iBAAO,CAAC,cAAc,EAAE;gBAC/C,OAAO,SAAS,CAAC;aACjB;YAED,MAAM,UAAU,GAAG,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;YAC/C,IAAI,CAAC,UAAU,EAAE;gBAChB,OAAO,SAAS,CAAC;aACjB;YAED,MAAM,QAAQ,GAAG,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;YACtF,MAAM,aAAa,GAAG,MAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,UAAU,0CAAE,OAAO,CAAC;YACpD,IAAI,CAAC,CAAA,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,IAAI,CAAA,EAAE;gBACzB,OAAO,SAAS,CAAC;aACjB;YAED,OAAO;gBACN,KAAK,EAAE,CAAA,GAAA,wCAAmB,CAAA,CAAC,aAAa,CAAC,QAAQ,CAAC;gBAClD,MAAM,EAAE,aAAa,CAAC,IAAI;gBAC1B,OAAO,EAAE,aAAa,CAAC,OAAO;aAC9B,CAAC;QACH,CAAC;QAED,OAAO;YACN,IAAI,CAAC,OAAO,EAAE,CAAC;QAChB,CAAC;KACD,CAAA;IAxCY,2BAA2B;QAKrC,WAAA,2BAAgB,CAAA;OALN,2BAA2B,CAwCvC;IAxCY,kEAA2B","file":"terminalDecorationsProvider.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { localize } from 'vs/nls';\nimport { ITerminalService } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { IDecorationData, IDecorationsProvider } from 'vs/workbench/services/decorations/browser/decorations';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { Schemas } from 'vs/base/common/network';\nimport { getColorForSeverity } from 'vs/workbench/contrib/terminal/browser/terminalStatusList';\n\nexport interface ITerminalDecorationData {\n\ttooltip: string,\n\tstatusIcon: string,\n\tcolor: string\n}\n\nexport class TerminalDecorationsProvider implements IDecorationsProvider {\n\treadonly label: string = localize('label', \"Terminal\");\n\tprivate readonly _onDidChange = new Emitter<URI[]>();\n\n\tconstructor(\n\t\t@ITerminalService private readonly _terminalService: ITerminalService\n\t) {\n\t\tthis._terminalService.onInstancePrimaryStatusChanged(e => this._onDidChange.fire([e.resource]));\n\t}\n\n\tget onDidChange(): Event<URI[]> {\n\t\treturn this._onDidChange.event;\n\t}\n\n\tprovideDecorations(resource: URI): IDecorationData | undefined {\n\t\tif (resource.scheme !== Schemas.vscodeTerminal) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst instanceId = parseInt(resource.fragment);\n\t\tif (!instanceId) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst instance = this._terminalService.getInstanceFromId(parseInt(resource.fragment));\n\t\tconst primaryStatus = instance?.statusList?.primary;\n\t\tif (!primaryStatus?.icon) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn {\n\t\t\tcolor: getColorForSeverity(primaryStatus.severity),\n\t\t\tletter: primaryStatus.icon,\n\t\t\ttooltip: primaryStatus.tooltip\n\t\t};\n\t}\n\n\tdispose(): void {\n\t\tthis.dispose();\n\t}\n}\n"]}