{"version":3,"sources":["vs/workbench/contrib/terminal/browser/links/terminalLinkManager.ts"],"names":[],"mappings":"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","file":"terminalLinkManager.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { URI } from 'vs/base/common/uri';\nimport { DisposableStore, IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { TerminalWidgetManager } from 'vs/workbench/contrib/terminal/browser/widgets/widgetManager';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ITerminalProcessManager, ITerminalConfiguration, TERMINAL_CONFIG_SECTION } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { ITextEditorSelection } from 'vs/platform/editor/common/editor';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport type { Terminal, IViewportRange, ILinkProvider } from 'xterm';\nimport { Schemas } from 'vs/base/common/network';\nimport { posix, win32 } from 'vs/base/common/path';\nimport { ITerminalExternalLinkProvider, ITerminalInstance } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { OperatingSystem, isMacintosh, OS, isWindows } from 'vs/base/common/platform';\nimport { IMarkdownString, MarkdownString } from 'vs/base/common/htmlContent';\nimport { TerminalProtocolLinkProvider } from 'vs/workbench/contrib/terminal/browser/links/terminalProtocolLinkProvider';\nimport { TerminalValidatedLocalLinkProvider, lineAndColumnClause, unixLocalLinkClause, winLocalLinkClause, winDrivePrefix, winLineAndColumnMatchIndex, unixLineAndColumnMatchIndex, lineAndColumnClauseGroupCount } from 'vs/workbench/contrib/terminal/browser/links/terminalValidatedLocalLinkProvider';\nimport { TerminalWordLinkProvider } from 'vs/workbench/contrib/terminal/browser/links/terminalWordLinkProvider';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { XTermCore } from 'vs/workbench/contrib/terminal/browser/xterm-private';\nimport { TerminalHover, ILinkHoverTargetOptions } from 'vs/workbench/contrib/terminal/browser/widgets/terminalHoverWidget';\nimport { TerminalLink } from 'vs/workbench/contrib/terminal/browser/links/terminalLink';\nimport { TerminalExternalLinkProviderAdapter } from 'vs/workbench/contrib/terminal/browser/links/terminalExternalLinkProviderAdapter';\nimport { ITunnelService } from 'vs/platform/remote/common/tunnel';\n\nexport type XtermLinkMatcherHandler = (event: MouseEvent | undefined, link: string) => Promise<void>;\nexport type XtermLinkMatcherValidationCallback = (uri: string, callback: (isValid: boolean) => void) => void;\n\ninterface IPath {\n\tjoin(...paths: string[]): string;\n\tnormalize(path: string): string;\n\tsep: '\\\\' | '/';\n}\n\n/**\n * An object responsible for managing registration of link matchers and link providers.\n */\nexport class TerminalLinkManager extends DisposableStore {\n\tprivate _widgetManager: TerminalWidgetManager | undefined;\n\tprivate _processCwd: string | undefined;\n\tprivate _standardLinkProviders: ILinkProvider[] = [];\n\tprivate _standardLinkProvidersDisposables: IDisposable[] = [];\n\n\tconstructor(\n\t\tprivate _xterm: Terminal,\n\t\tprivate readonly _processManager: ITerminalProcessManager,\n\t\t@IOpenerService private readonly _openerService: IOpenerService,\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@IFileService private readonly _fileService: IFileService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@ITunnelService private readonly _tunnelService: ITunnelService\n\t) {\n\t\tsuper();\n\n\t\t// Protocol links\n\t\tconst wrappedActivateCallback = this._wrapLinkHandler((_, link) => this._handleProtocolLink(link));\n\t\tconst protocolProvider = this._instantiationService.createInstance(TerminalProtocolLinkProvider, this._xterm, wrappedActivateCallback, this._tooltipCallback.bind(this));\n\t\tthis._standardLinkProviders.push(protocolProvider);\n\n\t\t// Validated local links\n\t\tif (this._configurationService.getValue<ITerminalConfiguration>(TERMINAL_CONFIG_SECTION).enableFileLinks) {\n\t\t\tconst wrappedTextLinkActivateCallback = this._wrapLinkHandler((_, link) => this._handleLocalLink(link));\n\t\t\tconst validatedProvider = this._instantiationService.createInstance(TerminalValidatedLocalLinkProvider,\n\t\t\t\tthis._xterm,\n\t\t\t\tthis._processManager.os || OS,\n\t\t\t\twrappedTextLinkActivateCallback,\n\t\t\t\tthis._wrapLinkHandler.bind(this),\n\t\t\t\tthis._tooltipCallback.bind(this),\n\t\t\t\tasync (link, cb) => cb(await this._resolvePath(link)));\n\t\t\tthis._standardLinkProviders.push(validatedProvider);\n\t\t}\n\n\t\t// Word links\n\t\tconst wordProvider = this._instantiationService.createInstance(TerminalWordLinkProvider, this._xterm, this._wrapLinkHandler.bind(this), this._tooltipCallback.bind(this));\n\t\tthis._standardLinkProviders.push(wordProvider);\n\n\t\tthis._registerStandardLinkProviders();\n\t}\n\n\tprivate _tooltipCallback(link: TerminalLink, viewportRange: IViewportRange, modifierDownCallback?: () => void, modifierUpCallback?: () => void) {\n\t\tif (!this._widgetManager) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst core = (this._xterm as any)._core as XTermCore;\n\t\tconst cellDimensions = {\n\t\t\twidth: core._renderService.dimensions.actualCellWidth,\n\t\t\theight: core._renderService.dimensions.actualCellHeight\n\t\t};\n\t\tconst terminalDimensions = {\n\t\t\twidth: this._xterm.cols,\n\t\t\theight: this._xterm.rows\n\t\t};\n\n\t\t// Don't pass the mouse event as this avoids the modifier check\n\t\tthis._showHover({\n\t\t\tviewportRange,\n\t\t\tcellDimensions,\n\t\t\tterminalDimensions,\n\t\t\tmodifierDownCallback,\n\t\t\tmodifierUpCallback\n\t\t}, this._getLinkHoverString(link.text, link.label), (text) => link.activate(undefined, text), link);\n\t}\n\n\tprivate _showHover(\n\t\ttargetOptions: ILinkHoverTargetOptions,\n\t\ttext: IMarkdownString,\n\t\tlinkHandler: (url: string) => void,\n\t\tlink?: TerminalLink\n\t) {\n\t\tif (this._widgetManager) {\n\t\t\tconst widget = this._instantiationService.createInstance(TerminalHover, targetOptions, text, linkHandler);\n\t\t\tconst attached = this._widgetManager.attachWidget(widget);\n\t\t\tif (attached) {\n\t\t\t\tlink?.onInvalidated(() => attached.dispose());\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic setWidgetManager(widgetManager: TerminalWidgetManager): void {\n\t\tthis._widgetManager = widgetManager;\n\t}\n\n\tpublic set processCwd(processCwd: string) {\n\t\tthis._processCwd = processCwd;\n\t}\n\n\tprivate _registerStandardLinkProviders(): void {\n\t\tdispose(this._standardLinkProvidersDisposables);\n\t\tthis._standardLinkProvidersDisposables = [];\n\t\tfor (const p of this._standardLinkProviders) {\n\t\t\tthis._standardLinkProvidersDisposables.push(this._xterm.registerLinkProvider(p));\n\t\t}\n\t}\n\n\tpublic registerExternalLinkProvider(instance: ITerminalInstance, linkProvider: ITerminalExternalLinkProvider): IDisposable {\n\t\tconst wrappedLinkProvider = this._instantiationService.createInstance(TerminalExternalLinkProviderAdapter, this._xterm, instance, linkProvider, this._wrapLinkHandler.bind(this), this._tooltipCallback.bind(this));\n\t\tconst newLinkProvider = this._xterm.registerLinkProvider(wrappedLinkProvider);\n\t\t// Re-register the standard link providers so they are a lower priority that the new one\n\t\tthis._registerStandardLinkProviders();\n\t\treturn newLinkProvider;\n\t}\n\n\tprotected _wrapLinkHandler(handler: (event: MouseEvent | undefined, link: string) => void): XtermLinkMatcherHandler {\n\t\treturn async (event: MouseEvent | undefined, link: string) => {\n\t\t\t// Prevent default electron link handling so Alt+Click mode works normally\n\t\t\tevent?.preventDefault();\n\n\t\t\t// Require correct modifier on click\n\t\t\tif (event && !this._isLinkActivationModifierDown(event)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Just call the handler if there is no before listener\n\t\t\thandler(event, link);\n\t\t};\n\t}\n\n\tprotected get _localLinkRegex(): RegExp {\n\t\tif (!this._processManager) {\n\t\t\tthrow new Error('Process manager is required');\n\t\t}\n\t\tconst baseLocalLinkClause = this._processManager.os === OperatingSystem.Windows ? winLocalLinkClause : unixLocalLinkClause;\n\t\t// Append line and column number regex\n\t\treturn new RegExp(`${baseLocalLinkClause}(${lineAndColumnClause})`);\n\t}\n\n\tprivate async _handleLocalLink(link: string): Promise<void> {\n\t\t// TODO: This gets resolved again but doesn't need to as it's already validated\n\t\tconst resolvedLink = await this._resolvePath(link);\n\t\tif (!resolvedLink) {\n\t\t\treturn;\n\t\t}\n\t\tconst lineColumnInfo: LineColumnInfo = this.extractLineColumnInfo(link);\n\t\tconst selection: ITextEditorSelection = {\n\t\t\tstartLineNumber: lineColumnInfo.lineNumber,\n\t\t\tstartColumn: lineColumnInfo.columnNumber\n\t\t};\n\t\tawait this._editorService.openEditor({ resource: resolvedLink.uri, options: { pinned: true, selection } });\n\t}\n\n\tprivate _handleHypertextLink(url: string): void {\n\t\tthis._openerService.open(url, {\n\t\t\tallowTunneling: !!(this._processManager && this._processManager.remoteAuthority),\n\t\t\tallowContributedOpeners: true,\n\t\t});\n\t}\n\n\tprivate async _handleProtocolLink(link: string): Promise<void> {\n\t\t// Check if it's a file:/// link, hand off to local link handler so to open an editor and\n\t\t// respect line/col attachment\n\t\tconst uri = URI.parse(link);\n\t\tif (uri.scheme === Schemas.file) {\n\t\t\t// Just using fsPath here is unsafe: https://github.com/microsoft/vscode/issues/109076\n\t\t\tconst fsPath = uri.fsPath;\n\t\t\tthis._handleLocalLink(((this.osPath.sep === posix.sep) && isWindows) ? fsPath.replace(/\\\\/g, posix.sep) : fsPath);\n\t\t\treturn;\n\t\t}\n\n\t\t// Open as a web link if it's not a file\n\t\tthis._handleHypertextLink(link);\n\t}\n\n\tprotected _isLinkActivationModifierDown(event: MouseEvent): boolean {\n\t\tconst editorConf = this._configurationService.getValue<{ multiCursorModifier: 'ctrlCmd' | 'alt' }>('editor');\n\t\tif (editorConf.multiCursorModifier === 'ctrlCmd') {\n\t\t\treturn !!event.altKey;\n\t\t}\n\t\treturn isMacintosh ? event.metaKey : event.ctrlKey;\n\t}\n\n\tprivate _getLinkHoverString(uri: string, label: string | undefined): IMarkdownString {\n\t\tconst editorConf = this._configurationService.getValue<{ multiCursorModifier: 'ctrlCmd' | 'alt' }>('editor');\n\n\t\tlet clickLabel = '';\n\t\tif (editorConf.multiCursorModifier === 'ctrlCmd') {\n\t\t\tif (isMacintosh) {\n\t\t\t\tclickLabel = nls.localize('terminalLinkHandler.followLinkAlt.mac', \"option + click\");\n\t\t\t} else {\n\t\t\t\tclickLabel = nls.localize('terminalLinkHandler.followLinkAlt', \"alt + click\");\n\t\t\t}\n\t\t} else {\n\t\t\tif (isMacintosh) {\n\t\t\t\tclickLabel = nls.localize('terminalLinkHandler.followLinkCmd', \"cmd + click\");\n\t\t\t} else {\n\t\t\t\tclickLabel = nls.localize('terminalLinkHandler.followLinkCtrl', \"ctrl + click\");\n\t\t\t}\n\t\t}\n\n\t\tlet fallbackLabel: string;\n\t\tif (this._tunnelService.canTunnel(URI.parse(uri))) {\n\t\t\tfallbackLabel = nls.localize('followForwardedLink', \"Follow link using forwarded port\");\n\t\t} else {\n\t\t\tfallbackLabel = nls.localize('followLink', \"Follow link\");\n\t\t}\n\n\t\tconst markdown = new MarkdownString('', true);\n\t\t// Escapes markdown in label & uri\n\t\tif (label) {\n\t\t\tlabel = markdown.appendText(label).value;\n\t\t\tmarkdown.value = '';\n\t\t}\n\t\tif (uri) {\n\t\t\turi = markdown.appendText(uri).value;\n\t\t\tmarkdown.value = '';\n\t\t}\n\n\t\tlabel = label || fallbackLabel;\n\t\t// Use the label when uri is '' so the link displays correctly\n\t\turi = uri || label;\n\t\t// Although if there is a space in the uri, just replace it completely\n\t\tif (/(\\s|&nbsp;)/.test(uri)) {\n\t\t\turi = nls.localize('followLinkUrl', 'Link');\n\t\t}\n\n\t\treturn markdown.appendMarkdown(`[${label}](${uri}) (${clickLabel})`);\n\t}\n\n\tprivate get osPath(): IPath {\n\t\tif (!this._processManager) {\n\t\t\tthrow new Error('Process manager is required');\n\t\t}\n\t\tif (this._processManager.os === OperatingSystem.Windows) {\n\t\t\treturn win32;\n\t\t}\n\t\treturn posix;\n\t}\n\n\tprotected _preprocessPath(link: string): string | null {\n\t\tif (!this._processManager) {\n\t\t\tthrow new Error('Process manager is required');\n\t\t}\n\t\tif (link.charAt(0) === '~') {\n\t\t\t// Resolve ~ -> userHome\n\t\t\tif (!this._processManager.userHome) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tlink = this.osPath.join(this._processManager.userHome, link.substring(1));\n\t\t} else if (link.charAt(0) !== '/' && link.charAt(0) !== '~') {\n\t\t\t// Resolve workspace path . | .. | <relative_path> -> <path>/. | <path>/.. | <path>/<relative_path>\n\t\t\tif (this._processManager.os === OperatingSystem.Windows) {\n\t\t\t\tif (!link.match('^' + winDrivePrefix) && !link.startsWith('\\\\\\\\?\\\\')) {\n\t\t\t\t\tif (!this._processCwd) {\n\t\t\t\t\t\t// Abort if no workspace is open\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\tlink = this.osPath.join(this._processCwd, link);\n\t\t\t\t} else {\n\t\t\t\t\t// Remove \\\\?\\ from paths so that they share the same underlying\n\t\t\t\t\t// uri and don't open multiple tabs for the same file\n\t\t\t\t\tlink = link.replace(/^\\\\\\\\\\?\\\\/, '');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!this._processCwd) {\n\t\t\t\t\t// Abort if no workspace is open\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tlink = this.osPath.join(this._processCwd, link);\n\t\t\t}\n\t\t}\n\t\tlink = this.osPath.normalize(link);\n\n\t\treturn link;\n\t}\n\n\tprivate async _resolvePath(link: string): Promise<{ uri: URI, isDirectory: boolean } | undefined> {\n\t\tif (!this._processManager) {\n\t\t\tthrow new Error('Process manager is required');\n\t\t}\n\n\t\tconst preprocessedLink = this._preprocessPath(link);\n\t\tif (!preprocessedLink) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst linkUrl = this.extractLinkUrl(preprocessedLink);\n\t\tif (!linkUrl) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\ttry {\n\t\t\tlet uri: URI;\n\t\t\tif (this._processManager.remoteAuthority) {\n\t\t\t\turi = URI.from({\n\t\t\t\t\tscheme: Schemas.vscodeRemote,\n\t\t\t\t\tauthority: this._processManager.remoteAuthority,\n\t\t\t\t\tpath: linkUrl\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\turi = URI.file(linkUrl);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tconst stat = await this._fileService.resolve(uri);\n\t\t\t\treturn { uri, isDirectory: stat.isDirectory };\n\t\t\t}\n\t\t\tcatch (e) {\n\t\t\t\t// Does not exist\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t} catch {\n\t\t\t// Errors in parsing the path\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\t/**\n\t * Returns line and column number of URl if that is present.\n\t *\n\t * @param link Url link which may contain line and column number.\n\t */\n\tpublic extractLineColumnInfo(link: string): LineColumnInfo {\n\t\tconst matches: string[] | null = this._localLinkRegex.exec(link);\n\t\tconst lineColumnInfo: LineColumnInfo = {\n\t\t\tlineNumber: 1,\n\t\t\tcolumnNumber: 1\n\t\t};\n\n\t\tif (!matches || !this._processManager) {\n\t\t\treturn lineColumnInfo;\n\t\t}\n\n\t\tconst lineAndColumnMatchIndex = this._processManager.os === OperatingSystem.Windows ? winLineAndColumnMatchIndex : unixLineAndColumnMatchIndex;\n\t\tfor (let i = 0; i < lineAndColumnClause.length; i++) {\n\t\t\tconst lineMatchIndex = lineAndColumnMatchIndex + (lineAndColumnClauseGroupCount * i);\n\t\t\tconst rowNumber = matches[lineMatchIndex];\n\t\t\tif (rowNumber) {\n\t\t\t\tlineColumnInfo['lineNumber'] = parseInt(rowNumber, 10);\n\t\t\t\t// Check if column number exists\n\t\t\t\tconst columnNumber = matches[lineMatchIndex + 2];\n\t\t\t\tif (columnNumber) {\n\t\t\t\t\tlineColumnInfo['columnNumber'] = parseInt(columnNumber, 10);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn lineColumnInfo;\n\t}\n\n\t/**\n\t * Returns url from link as link may contain line and column information.\n\t *\n\t * @param link url link which may contain line and column number.\n\t */\n\tpublic extractLinkUrl(link: string): string | null {\n\t\tconst matches: string[] | null = this._localLinkRegex.exec(link);\n\t\tif (!matches) {\n\t\t\treturn null;\n\t\t}\n\t\treturn matches[1];\n\t}\n}\n\nexport interface LineColumnInfo {\n\tlineNumber: number;\n\tcolumnNumber: number;\n}\n"]}