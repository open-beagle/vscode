{"version":3,"file":"localPty.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/terminal/electron-sandbox/localPty.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { ILocalPtyService } from 'vs/platform/terminal/electron-sandbox/terminal';\nimport { IProcessDataEvent, IShellLaunchConfig, ITerminalChildProcess, ITerminalDimensionsOverride, ITerminalLaunchError, TerminalShellType } from 'vs/platform/terminal/common/terminal';\nimport { IPtyHostProcessReplayEvent } from 'vs/platform/terminal/common/terminalProcess';\n\n/**\n * Responsible for establishing and maintaining a connection with an existing terminal process\n * created on the local pty host.\n */\nexport class LocalPty extends Disposable implements ITerminalChildProcess {\n\tprivate _inReplay = false;\n\n\tprivate readonly _onProcessData = this._register(new Emitter<IProcessDataEvent | string>());\n\tpublic readonly onProcessData = this._onProcessData.event;\n\tprivate readonly _onProcessReplay = this._register(new Emitter<IPtyHostProcessReplayEvent>());\n\tpublic readonly onProcessReplay = this._onProcessReplay.event;\n\tprivate readonly _onProcessExit = this._register(new Emitter<number | undefined>());\n\tpublic readonly onProcessExit = this._onProcessExit.event;\n\tprivate readonly _onProcessReady = this._register(new Emitter<{ pid: number, cwd: string }>());\n\tpublic readonly onProcessReady = this._onProcessReady.event;\n\tprivate readonly _onProcessTitleChanged = this._register(new Emitter<string>());\n\tpublic readonly onProcessTitleChanged = this._onProcessTitleChanged.event;\n\tprivate readonly _onProcessOverrideDimensions = this._register(new Emitter<ITerminalDimensionsOverride | undefined>());\n\tpublic readonly onProcessOverrideDimensions = this._onProcessOverrideDimensions.event;\n\tprivate readonly _onProcessResolvedShellLaunchConfig = this._register(new Emitter<IShellLaunchConfig>());\n\tpublic readonly onProcessResolvedShellLaunchConfig = this._onProcessResolvedShellLaunchConfig.event;\n\tprivate readonly _onProcessShellTypeChanged = this._register(new Emitter<TerminalShellType>());\n\tpublic readonly onProcessShellTypeChanged = this._onProcessShellTypeChanged.event;\n\n\tconstructor(\n\t\treadonly id: number,\n\t\treadonly shouldPersist: boolean,\n\t\t@ILocalPtyService private readonly _localPtyService: ILocalPtyService\n\t) {\n\t\tsuper();\n\t}\n\n\tstart(): Promise<ITerminalLaunchError | undefined> {\n\t\treturn this._localPtyService.start(this.id);\n\t}\n\tdetach(): void {\n\t\tthis._localPtyService.detachFromProcess(this.id);\n\t}\n\tshutdown(immediate: boolean): void {\n\t\tthis._localPtyService.shutdown(this.id, immediate);\n\t}\n\tasync processBinary(data: string): Promise<void> {\n\t\tif (this._inReplay) {\n\t\t\treturn;\n\t\t}\n\t\treturn this._localPtyService.processBinary(this.id, data);\n\t}\n\tinput(data: string): void {\n\t\tif (this._inReplay) {\n\t\t\treturn;\n\t\t}\n\t\tthis._localPtyService.input(this.id, data);\n\t}\n\tresize(cols: number, rows: number): void {\n\t\tif (this._inReplay) {\n\t\t\treturn;\n\t\t}\n\t\tthis._localPtyService.resize(this.id, cols, rows);\n\t}\n\tgetInitialCwd(): Promise<string> {\n\t\treturn this._localPtyService.getInitialCwd(this.id);\n\t}\n\tgetCwd(): Promise<string> {\n\t\treturn this._localPtyService.getCwd(this.id);\n\t}\n\tgetLatency(): Promise<number> {\n\t\t// TODO: The idea here was to add the result plus the time it took to get the latency\n\t\treturn this._localPtyService.getLatency(this.id);\n\t}\n\tacknowledgeDataEvent(charCount: number): void {\n\t\tif (this._inReplay) {\n\t\t\treturn;\n\t\t}\n\t\tthis._localPtyService.acknowledgeDataEvent(this.id, charCount);\n\t}\n\n\thandleData(e: string | IProcessDataEvent) {\n\t\tthis._onProcessData.fire(e);\n\t}\n\thandleExit(e: number | undefined) {\n\t\tthis._onProcessExit.fire(e);\n\t}\n\thandleReady(e: { pid: number, cwd: string }) {\n\t\tthis._onProcessReady.fire(e);\n\t}\n\thandleTitleChanged(e: string) {\n\t\tthis._onProcessTitleChanged.fire(e);\n\t}\n\thandleShellTypeChanged(e: TerminalShellType) {\n\t\tthis._onProcessShellTypeChanged.fire(e);\n\t}\n\thandleOverrideDimensions(e: ITerminalDimensionsOverride | undefined) {\n\t\tthis._onProcessOverrideDimensions.fire(e);\n\t}\n\thandleResolvedShellLaunchConfig(e: IShellLaunchConfig) {\n\t\tthis._onProcessResolvedShellLaunchConfig.fire(e);\n\t}\n\n\tasync handleReplay(e: IPtyHostProcessReplayEvent) {\n\t\ttry {\n\t\t\tthis._inReplay = true;\n\t\t\tfor (const innerEvent of e.events) {\n\t\t\t\tif (innerEvent.cols !== 0 || innerEvent.rows !== 0) {\n\t\t\t\t\t// never override with 0x0 as that is a marker for an unknown initial size\n\t\t\t\t\tthis._onProcessOverrideDimensions.fire({ cols: innerEvent.cols, rows: innerEvent.rows, forceExactSize: true });\n\t\t\t\t}\n\t\t\t\tconst e: IProcessDataEvent = { data: innerEvent.data, trackCommit: true };\n\t\t\t\tthis._onProcessData.fire(e);\n\t\t\t\tawait e.writePromise;\n\t\t\t}\n\t\t} finally {\n\t\t\tthis._inReplay = false;\n\t\t}\n\n\t\t// remove size override\n\t\tthis._onProcessOverrideDimensions.fire(undefined);\n\t}\n}\n"]}