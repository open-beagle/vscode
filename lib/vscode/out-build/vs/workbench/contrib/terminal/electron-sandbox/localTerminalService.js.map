{"version":3,"sources":["vs/workbench/contrib/terminal/electron-sandbox/localTerminalService.ts"],"names":[],"mappings":"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","file":"localTerminalService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IProcessEnvironment, OperatingSystem } from 'vs/base/common/platform';\nimport { localize } from 'vs/nls';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { ILabelService } from 'vs/platform/label/common/label';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { INotificationHandle, INotificationService, IPromptChoice, Severity } from 'vs/platform/notification/common/notification';\nimport { ILocalTerminalService, IShellLaunchConfig, ITerminalChildProcess, ITerminalsLayoutInfo, ITerminalsLayoutInfoById } from 'vs/platform/terminal/common/terminal';\nimport { IGetTerminalLayoutInfoArgs, IProcessDetails, ISetTerminalLayoutInfoArgs } from 'vs/platform/terminal/common/terminalProcess';\nimport { ILocalPtyService } from 'vs/platform/terminal/electron-sandbox/terminal';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { LocalPty } from 'vs/workbench/contrib/terminal/electron-sandbox/localPty';\nimport { IShellEnvironmentService } from 'vs/workbench/services/environment/electron-sandbox/shellEnvironmentService';\n\nexport class LocalTerminalService extends Disposable implements ILocalTerminalService {\n\tpublic _serviceBrand: undefined;\n\n\tprivate readonly _ptys: Map<number, LocalPty> = new Map();\n\tprivate _isPtyHostUnresponsive: boolean = false;\n\n\tprivate readonly _onPtyHostUnresponsive = this._register(new Emitter<void>());\n\treadonly onPtyHostUnresponsive = this._onPtyHostUnresponsive.event;\n\tprivate readonly _onPtyHostResponsive = this._register(new Emitter<void>());\n\treadonly onPtyHostResponsive = this._onPtyHostResponsive.event;\n\tprivate readonly _onPtyHostRestart = this._register(new Emitter<void>());\n\treadonly onPtyHostRestart = this._onPtyHostRestart.event;\n\n\tconstructor(\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@IWorkspaceContextService private readonly _workspaceContextService: IWorkspaceContextService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@ILocalPtyService private readonly _localPtyService: ILocalPtyService,\n\t\t@ILabelService private readonly _labelService: ILabelService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@IShellEnvironmentService private readonly _shellEnvironmentService: IShellEnvironmentService\n\t) {\n\t\tsuper();\n\n\t\t// Attach process listeners\n\t\tthis._localPtyService.onProcessData(e => this._ptys.get(e.id)?.handleData(e.event));\n\t\tthis._localPtyService.onProcessExit(e => {\n\t\t\tconst pty = this._ptys.get(e.id);\n\t\t\tif (pty) {\n\t\t\t\tpty.handleExit(e.event);\n\t\t\t\tthis._ptys.delete(e.id);\n\t\t\t}\n\t\t});\n\t\tthis._localPtyService.onProcessReady(e => this._ptys.get(e.id)?.handleReady(e.event));\n\t\tthis._localPtyService.onProcessTitleChanged(e => this._ptys.get(e.id)?.handleTitleChanged(e.event));\n\t\tthis._localPtyService.onProcessOverrideDimensions(e => this._ptys.get(e.id)?.handleOverrideDimensions(e.event));\n\t\tthis._localPtyService.onProcessResolvedShellLaunchConfig(e => this._ptys.get(e.id)?.handleResolvedShellLaunchConfig(e.event));\n\t\tthis._localPtyService.onProcessReplay(e => this._ptys.get(e.id)?.handleReplay(e.event));\n\n\t\t// Attach pty host listeners\n\t\tif (this._localPtyService.onPtyHostExit) {\n\t\t\tthis._register(this._localPtyService.onPtyHostExit(() => {\n\t\t\t\tthis._logService.error(`The terminal's pty host process exited, the connection to all terminal processes was lost`);\n\t\t\t}));\n\t\t}\n\t\tlet unresponsiveNotification: INotificationHandle | undefined;\n\t\tif (this._localPtyService.onPtyHostStart) {\n\t\t\tthis._register(this._localPtyService.onPtyHostStart(() => {\n\t\t\t\tthis._logService.info(`ptyHost restarted`);\n\t\t\t\tthis._onPtyHostRestart.fire();\n\t\t\t\tunresponsiveNotification?.close();\n\t\t\t\tunresponsiveNotification = undefined;\n\t\t\t\tthis._isPtyHostUnresponsive = false;\n\t\t\t}));\n\t\t}\n\t\tif (this._localPtyService.onPtyHostUnresponsive) {\n\t\t\tthis._register(this._localPtyService.onPtyHostUnresponsive(() => {\n\t\t\t\tconst choices: IPromptChoice[] = [{\n\t\t\t\t\tlabel: localize('restartPtyHost', \"Restart pty host\"),\n\t\t\t\t\trun: () => this._localPtyService.restartPtyHost!()\n\t\t\t\t}];\n\t\t\t\tunresponsiveNotification = notificationService.prompt(Severity.Error, localize('nonResponsivePtyHost', \"The connection to the terminal's pty host process is unresponsive, the terminals may stop working.\"), choices);\n\t\t\t\tthis._isPtyHostUnresponsive = true;\n\t\t\t\tthis._onPtyHostUnresponsive.fire();\n\t\t\t}));\n\t\t}\n\t\tif (this._localPtyService.onPtyHostResponsive) {\n\t\t\tthis._register(this._localPtyService.onPtyHostResponsive(() => {\n\t\t\t\tif (!this._isPtyHostUnresponsive) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis._logService.info('The pty host became responsive again');\n\t\t\t\tunresponsiveNotification?.close();\n\t\t\t\tunresponsiveNotification = undefined;\n\t\t\t\tthis._isPtyHostUnresponsive = false;\n\t\t\t\tthis._onPtyHostResponsive.fire();\n\t\t\t}));\n\t\t}\n\t}\n\n\tpublic async createProcess(shellLaunchConfig: IShellLaunchConfig, cwd: string, cols: number, rows: number, env: IProcessEnvironment, windowsEnableConpty: boolean, shouldPersist: boolean): Promise<ITerminalChildProcess> {\n\t\tconst executableEnv = await this._shellEnvironmentService.getShellEnv();\n\t\tconst id = await this._localPtyService.createProcess(shellLaunchConfig, cwd, cols, rows, env, executableEnv, windowsEnableConpty, shouldPersist, this._getWorkspaceId(), this._getWorkspaceName());\n\t\tconst pty = this._instantiationService.createInstance(LocalPty, id, shouldPersist);\n\t\tthis._ptys.set(id, pty);\n\t\treturn pty;\n\t}\n\n\tpublic async attachToProcess(id: number): Promise<ITerminalChildProcess | undefined> {\n\t\ttry {\n\t\t\tawait this._localPtyService.attachToProcess(id);\n\t\t\tconst pty = this._instantiationService.createInstance(LocalPty, id, true);\n\t\t\tthis._ptys.set(id, pty);\n\t\t\treturn pty;\n\t\t} catch (e) {\n\t\t\tthis._logService.trace(`Couldn't attach to process ${e.message}`);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tpublic async listProcesses(): Promise<IProcessDetails[]> {\n\t\treturn this._localPtyService.listProcesses();\n\t}\n\n\tpublic async reduceConnectionGraceTime(): Promise<void> {\n\t\tthis._localPtyService.reduceConnectionGraceTime();\n\t}\n\n\tpublic async getDefaultSystemShell(osOverride?: OperatingSystem): Promise<string> {\n\t\treturn this._localPtyService.getDefaultSystemShell(osOverride);\n\t}\n\n\tpublic async getShellEnvironment(): Promise<IProcessEnvironment> {\n\t\treturn this._localPtyService.getShellEnvironment();\n\t}\n\n\tpublic async setTerminalLayoutInfo(layoutInfo?: ITerminalsLayoutInfoById): Promise<void> {\n\t\tconst args: ISetTerminalLayoutInfoArgs = {\n\t\t\tworkspaceId: this._getWorkspaceId(),\n\t\t\ttabs: layoutInfo ? layoutInfo.tabs : []\n\t\t};\n\t\tawait this._localPtyService.setTerminalLayoutInfo(args);\n\t}\n\n\tpublic async getTerminalLayoutInfo(): Promise<ITerminalsLayoutInfo | undefined> {\n\t\tconst layoutArgs: IGetTerminalLayoutInfoArgs = {\n\t\t\tworkspaceId: this._getWorkspaceId()\n\t\t};\n\t\tlet result = await this._localPtyService.getTerminalLayoutInfo(layoutArgs);\n\t\treturn result;\n\t}\n\n\tprivate _getWorkspaceId(): string {\n\t\treturn this._workspaceContextService.getWorkspace().id;\n\t}\n\n\tprivate _getWorkspaceName(): string {\n\t\treturn this._labelService.getWorkspaceLabel(this._workspaceContextService.getWorkspace());\n\t}\n}\n"]}