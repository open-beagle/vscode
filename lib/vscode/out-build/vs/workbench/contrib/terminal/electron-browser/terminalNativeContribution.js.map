{"version":3,"file":"terminalNativeContribution.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/terminal/electron-browser/terminalNativeContribution.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAahG,IAAa,0BAA0B,GAAvC,MAAa,0BAA2B,SAAQ,sBAAU;QAGzD,YACoC,gBAAkC,EACrC,oBAA2C,EAC7C,kBAAuC,EACxC,iBAAqC;YAElE,KAAK,EAAE,CAAC;YAL2B,qBAAgB,GAAhB,gBAAgB,CAAkB;YACrC,yBAAoB,GAApB,oBAAoB,CAAuB;YAC7C,uBAAkB,GAAlB,kBAAkB,CAAqB;YACxC,sBAAiB,GAAjB,iBAAiB,CAAoB;YAIlE,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,sBAAW,CAAC,CAAC;YAClD,IAAI,CAAC,gBAAgB,CAAC,wBAAwB,CAAC;gBAC9C,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC;gBACvC,qBAAqB,EAAE,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,IAAI,CAAC;aAC7D,CAAC,CAAC;QACJ,CAAC;QAED;;;WAGG;QACK,WAAW,CAAC,IAAY;YAC/B,IAAI,CAAA,GAAA,2CAAqB,CAAA,EAAE,GAAG,KAAK,EAAE;gBACpC,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;aACnE;YACD,OAAO,IAAI,OAAO,CAAS,CAAC,CAAC,EAAE;gBAC9B,MAAM,IAAI,GAAG,CAAA,GAAA,wBAAQ,CAAA,CAAC,UAAU,EAAE,CAAC,IAAI,EAAE,WAAW,CAAA,GAAA,0CAAoB,CAAA,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,EAAE;oBAChH,CAAC,CAAC,CAAA,GAAA,0CAAoB,CAAA,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;gBACxC,CAAC,CAAC,CAAC;gBACH,IAAI,CAAC,KAAM,CAAC,GAAG,EAAE,CAAC;YACnB,CAAC,CAAC,CAAC;QACJ,CAAC;QAEO,sBAAsB;YAC7B,OAAO,CAAA,GAAA,2CAAqB,CAAA,EAAE,CAAC;QAChC,CAAC;KACD,CAAA;IArCY,0BAA0B;QAIpC,WAAA,2BAAgB,CAAA;QAChB,WAAA,qCAAqB,CAAA;QACrB,WAAA,wCAAmB,CAAA;QACnB,WAAA,2BAAkB,CAAA;OAPR,0BAA0B,CAqCtC;IArCY,gEAA0B","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { escapeNonWindowsPath } from 'vs/workbench/contrib/terminal/common/terminalEnvironment';\nimport { execFile } from 'child_process';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { INativeHostService } from 'vs/platform/native/electron-sandbox/native';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { ITerminalService } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { getWindowsBuildNumber } from 'vs/platform/terminal/node/terminalEnvironment';\nimport { linuxDistro } from 'vs/workbench/contrib/terminal/node/terminal';\n\nexport class TerminalNativeContribution extends Disposable implements IWorkbenchContribution {\n\tpublic _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@ITerminalService private readonly _terminalService: ITerminalService,\n\t\t@IInstantiationService readonly instantiationService: IInstantiationService,\n\t\t@IRemoteAgentService readonly remoteAgentService: IRemoteAgentService,\n\t\t@INativeHostService readonly nativeHostService: INativeHostService\n\t) {\n\t\tsuper();\n\n\t\tthis._terminalService.setLinuxDistro(linuxDistro);\n\t\tthis._terminalService.setNativeWindowsDelegate({\n\t\t\tgetWslPath: this._getWslPath.bind(this),\n\t\t\tgetWindowsBuildNumber: this._getWindowsBuildNumber.bind(this)\n\t\t});\n\t}\n\n\t/**\n\t * Converts a path to a path on WSL using the wslpath utility.\n\t * @param path The original path.\n\t */\n\tprivate _getWslPath(path: string): Promise<string> {\n\t\tif (getWindowsBuildNumber() < 17063) {\n\t\t\tthrow new Error('wslpath does not exist on Windows build < 17063');\n\t\t}\n\t\treturn new Promise<string>(c => {\n\t\t\tconst proc = execFile('bash.exe', ['-c', `wslpath ${escapeNonWindowsPath(path)}`], {}, (error, stdout, stderr) => {\n\t\t\t\tc(escapeNonWindowsPath(stdout.trim()));\n\t\t\t});\n\t\t\tproc.stdin!.end();\n\t\t});\n\t}\n\n\tprivate _getWindowsBuildNumber(): number {\n\t\treturn getWindowsBuildNumber();\n\t}\n}\n"]}