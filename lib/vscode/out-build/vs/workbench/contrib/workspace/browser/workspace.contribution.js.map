{"version":3,"sources":["vs/workbench/contrib/workspace/browser/workspace.contribution.ts"],"names":[],"mappings":"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","file":"workspace.contribution.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./workspaceTrustEditor';\nimport { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';\nimport { Disposable, MutableDisposable } from 'vs/base/common/lifecycle';\nimport { localize } from 'vs/nls';\nimport { Action2, MenuId, MenuRegistry, registerAction2 } from 'vs/platform/actions/common/actions';\nimport { ConfigurationScope, Extensions as ConfigurationExtensions, IConfigurationRegistry } from 'vs/platform/configuration/common/configurationRegistry';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { Severity } from 'vs/platform/notification/common/notification';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IWorkspaceTrustManagementService, IWorkspaceTrustRequestService, WorkspaceTrustRequestOptions, workspaceTrustToString } from 'vs/platform/workspace/common/workspaceTrust';\nimport { Extensions as WorkbenchExtensions, IWorkbenchContribution, IWorkbenchContributionsRegistry } from 'vs/workbench/common/contributions';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { Codicon } from 'vs/base/common/codicons';\nimport { ThemeColor } from 'vs/workbench/api/common/extHostTypes';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { ContextKeyExpr, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { IStatusbarEntry, IStatusbarEntryAccessor, IStatusbarService, StatusbarAlignment } from 'vs/workbench/services/statusbar/common/statusbar';\nimport { IEditorRegistry, EditorDescriptor } from 'vs/workbench/browser/editor';\nimport { WorkspaceTrustEditor } from 'vs/workbench/contrib/workspace/browser/workspaceTrustEditor';\nimport { WorkspaceTrustEditorInput } from 'vs/workbench/services/workspaces/browser/workspaceTrustEditorInput';\nimport { isWorkspaceTrustEnabled, WorkspaceTrustContext, WORKSPACE_TRUST_ENABLED, WORKSPACE_TRUST_STARTUP_PROMPT } from 'vs/workbench/services/workspaces/common/workspaceTrust';\nimport { EditorInput, IEditorInputSerializer, IEditorInputFactoryRegistry, EditorExtensions } from 'vs/workbench/common/editor';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { isWeb } from 'vs/base/common/platform';\nimport { IsWebContext } from 'vs/platform/contextkey/common/contextkeys';\nimport { dirname, resolve } from 'vs/base/common/path';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport product from 'vs/platform/product/common/product';\nimport { MarkdownString } from 'vs/base/common/htmlContent';\nimport { isSingleFolderWorkspaceIdentifier, toWorkspaceIdentifier } from 'vs/platform/workspaces/common/workspaces';\nimport { Schemas } from 'vs/base/common/network';\nimport { STATUS_BAR_PROMINENT_ITEM_BACKGROUND, STATUS_BAR_PROMINENT_ITEM_FOREGROUND } from 'vs/workbench/common/theme';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\n\nconst STARTUP_PROMPT_SHOWN_KEY = 'workspace.trust.startupPrompt.shown';\n\n\n/*\n * Trust Request UX Handler\n */\nexport class WorkspaceTrustRequestHandler extends Disposable implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@IWorkspaceContextService private readonly workspaceContextService: IWorkspaceContextService,\n\t\t@IWorkspaceTrustManagementService private readonly workspaceTrustManagementService: IWorkspaceTrustManagementService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IWorkspaceTrustRequestService private readonly workspaceTrustRequestService: IWorkspaceTrustRequestService,\n\t) {\n\t\tsuper();\n\n\t\tif (isWorkspaceTrustEnabled(configurationService)) {\n\t\t\tthis.registerListeners();\n\t\t\tthis.showModalOnStart();\n\t\t}\n\t}\n\n\tprivate get startupPromptSetting(): 'always' | 'once' | 'never' {\n\t\treturn this.configurationService.getValue(WORKSPACE_TRUST_STARTUP_PROMPT);\n\t}\n\n\tprivate get useWorkspaceLanguage(): boolean {\n\t\treturn !isSingleFolderWorkspaceIdentifier(toWorkspaceIdentifier(this.workspaceContextService.getWorkspace()));\n\t}\n\n\tprivate get modalTitle(): string {\n\t\treturn this.useWorkspaceLanguage ?\n\t\t\tlocalize('workspaceTrust', \"Do you trust the authors of the files in this workspace?\") :\n\t\t\tlocalize('folderTrust', \"Do you trust the authors of the files in this folder?\");\n\t}\n\n\tprivate async doShowModal(question: string, trustedOption: { label: string, sublabel: string }, untrustedOption: { label: string, sublabel: string }, markdownStrings: string[], trustParentString?: string): Promise<void> {\n\t\tconst result = await this.dialogService.show(\n\t\t\tSeverity.Info,\n\t\t\tquestion,\n\t\t\t[\n\t\t\t\ttrustedOption.label,\n\t\t\t\tuntrustedOption.label,\n\t\t\t],\n\t\t\t{\n\t\t\t\tcheckbox: trustParentString ? {\n\t\t\t\t\tlabel: trustParentString\n\t\t\t\t} : undefined,\n\t\t\t\tcustom: {\n\t\t\t\t\tbuttonDetails: [\n\t\t\t\t\t\ttrustedOption.sublabel,\n\t\t\t\t\t\tuntrustedOption.sublabel\n\t\t\t\t\t],\n\t\t\t\t\tdisableCloseAction: true,\n\t\t\t\t\ticon: Codicon.shield,\n\t\t\t\t\tmarkdownDetails: markdownStrings.map(md => { return { markdown: new MarkdownString(md) }; })\n\t\t\t\t},\n\t\t\t}\n\t\t);\n\n\t\t// Dialog result\n\t\tswitch (result.choice) {\n\t\t\tcase 0:\n\t\t\t\tif (result.checkboxChecked) {\n\t\t\t\t\tthis.workspaceTrustManagementService.setParentFolderTrust(true);\n\t\t\t\t} else {\n\t\t\t\t\tthis.workspaceTrustRequestService.completeRequest(true);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tthis.workspaceTrustRequestService.cancelRequest();\n\t\t\t\tbreak;\n\t\t}\n\n\t\tthis.storageService.store(STARTUP_PROMPT_SHOWN_KEY, true, StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t}\n\n\tprivate showModalOnStart(): void {\n\t\tif (this.workspaceTrustManagementService.isWorkpaceTrusted()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.startupPromptSetting === 'never') {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.startupPromptSetting === 'once' && this.storageService.getBoolean(STARTUP_PROMPT_SHOWN_KEY, StorageScope.WORKSPACE, false)) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet checkboxText: string | undefined;\n\t\tconst workspaceIdentifier = toWorkspaceIdentifier(this.workspaceContextService.getWorkspace())!;\n\t\tconst isSingleFolderWorkspace = isSingleFolderWorkspaceIdentifier(workspaceIdentifier);\n\t\tif (isSingleFolderWorkspaceIdentifier(workspaceIdentifier) && workspaceIdentifier.uri.scheme === Schemas.file) {\n\t\t\tcheckboxText = localize('checkboxString', \"I trust the authors of all files in the parent folder\");\n\t\t}\n\n\t\t// Show Workspace Trust Start Dialog\n\t\tthis.doShowModal(\n\t\t\tthis.modalTitle,\n\t\t\t{ label: localize('trustOption', \"Yes, I trust the authors\"), sublabel: isSingleFolderWorkspace ? localize('trustFolderOptionDescription', \"Trust folder and enable all features\") : localize('trustWorkspaceOptionDescription', \"Trust workspace and enable all features\") },\n\t\t\t{ label: localize('dontTrustOption', \"No, I don't trust the authors\"), sublabel: isSingleFolderWorkspace ? localize('dontTrustFolderOptionDescription', \"Browse folder in restricted mode\") : localize('dontTrustWorkspaceOptionDescription', \"Browse workspace in restricted mode\") },\n\t\t\t[\n\t\t\t\t!isSingleFolderWorkspace ?\n\t\t\t\t\tlocalize('workspaceStartupTrustDetails', \"{0} provides advanced editing features that may automatically execute files in this workspace.\", product.nameShort) :\n\t\t\t\t\tlocalize('folderStartupTrustDetails', \"{0} provides advanced editing features that may automatically execute files in this folder.\", product.nameShort),\n\t\t\t\tlocalize('startupTrustRequestLearnMore', \"If you don't trust the authors of these files, we recommend to continue in restricted mode as the files may be malicious. See [our docs](https://aka.ms/vscode-workspace-trust) to learn more.\")\n\t\t\t],\n\t\t\tcheckboxText\n\t\t);\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.workspaceTrustRequestService.onDidInitiateWorkspaceTrustRequest(async requestOptions => {\n\t\t\tif (requestOptions.modal) {\n\t\t\t\t// Message\n\t\t\t\tconst defaultMessage = localize('immediateTrustRequestMessage', \"A feature you are trying to use may be a security risk if you do not trust the source of the files or folders you currently have open.\");\n\t\t\t\tconst message = requestOptions.message ?? defaultMessage;\n\n\t\t\t\t// Buttons\n\t\t\t\tconst buttons = requestOptions.buttons ?? [\n\t\t\t\t\t{ label: this.useWorkspaceLanguage ? localize('grantWorkspaceTrustButton', \"Trust Workspace & Continue\") : localize('grantFolderTrustButton', \"Trust Folder & Continue\"), type: 'ContinueWithTrust' },\n\t\t\t\t\t{ label: localize('manageWorkspaceTrustButton', \"Manage\"), type: 'Manage' }\n\t\t\t\t];\n\t\t\t\t// Add Cancel button if not provided\n\t\t\t\tif (!buttons.some(b => b.type === 'Cancel')) {\n\t\t\t\t\tbuttons.push({ label: localize('cancelWorkspaceTrustButton', \"Cancel\"), type: 'Cancel' });\n\t\t\t\t}\n\n\t\t\t\t// Dialog\n\t\t\t\tconst result = await this.dialogService.show(\n\t\t\t\t\tSeverity.Info,\n\t\t\t\t\tthis.modalTitle,\n\t\t\t\t\tbuttons.map(b => b.label),\n\t\t\t\t\t{\n\t\t\t\t\t\tcancelId: buttons.findIndex(b => b.type === 'Cancel'),\n\t\t\t\t\t\tcustom: {\n\t\t\t\t\t\t\ticon: Codicon.shield,\n\t\t\t\t\t\t\tmarkdownDetails: [\n\t\t\t\t\t\t\t\t{ markdown: new MarkdownString(message) },\n\t\t\t\t\t\t\t\t{ markdown: new MarkdownString(localize('immediateTrustRequestLearnMore', \"If you don't trust the authors of these files, we do not recommend continuing as the files may be malicious. See [our docs](https://aka.ms/vscode-workspace-trust) to learn more.\")) }\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\t// Dialog result\n\t\t\t\tswitch (buttons[result.choice].type) {\n\t\t\t\t\tcase 'ContinueWithTrust':\n\t\t\t\t\t\tthis.workspaceTrustRequestService.completeRequest(true);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'ContinueWithoutTrust':\n\t\t\t\t\t\tthis.workspaceTrustRequestService.completeRequest(undefined);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Manage':\n\t\t\t\t\t\tthis.workspaceTrustRequestService.cancelRequest();\n\t\t\t\t\t\tawait this.commandService.executeCommand('workbench.trust.manage');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Cancel':\n\t\t\t\t\t\tthis.workspaceTrustRequestService.cancelRequest();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this.workspaceContextService.onWillChangeWorkspaceFolders(e => {\n\t\t\tif (e.fromCache) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!isWorkspaceTrustEnabled(this.configurationService)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst trusted = this.workspaceTrustManagementService.isWorkpaceTrusted();\n\n\t\t\treturn e.join(new Promise(async resolve => {\n\t\t\t\t// Workspace is trusted and there are added/changed folders\n\t\t\t\tif (trusted && (e.changes.added.length || e.changes.changed.length)) {\n\t\t\t\t\tconst addedFoldersTrustInfo = e.changes.added.map(folder => this.workspaceTrustManagementService.getFolderTrustInfo(folder.uri));\n\t\t\t\t\tif (!addedFoldersTrustInfo.map(i => i.trusted).every(trusted => trusted)) {\n\t\t\t\t\t\tconst result = await this.dialogService.show(\n\t\t\t\t\t\t\tSeverity.Info,\n\t\t\t\t\t\t\tlocalize('addWorkspaceFolderMessage', \"Do you trust the authors of the files in this folder?\"),\n\t\t\t\t\t\t\t[localize('yes', 'Yes'), localize('no', 'No')],\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdetail: localize('addWorkspaceFolderDetail', \"You are adding files to a trusted workspace that are not currently trusted. Do you trust the authors of these new files?\"),\n\t\t\t\t\t\t\t\tcancelId: 1,\n\t\t\t\t\t\t\t\tcustom: { icon: Codicon.shield }\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// Mark added/changed folders as trusted\n\t\t\t\t\t\tthis.workspaceTrustManagementService.setFoldersTrust(addedFoldersTrustInfo.map(i => i.uri), result.choice === 0);\n\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tresolve();\n\t\t\t}));\n\t\t}));\n\t}\n}\n\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(WorkspaceTrustRequestHandler, LifecyclePhase.Ready);\n\n/*\n * Status Bar Entry\n */\nclass WorkspaceTrustStatusbarItem extends Disposable implements IWorkbenchContribution {\n\tprivate readonly entryId = `status.workspaceTrust.${this.workspaceService.getWorkspace().id}`;\n\tprivate readonly statusBarEntryAccessor: MutableDisposable<IStatusbarEntryAccessor>;\n\tprivate pendingRequestContextKey = WorkspaceTrustContext.PendingRequest.key;\n\tprivate contextKeys = new Set([this.pendingRequestContextKey]);\n\n\tconstructor(\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IStatusbarService private readonly statusbarService: IStatusbarService,\n\t\t@IWorkspaceTrustManagementService private readonly workspaceTrustManagementService: IWorkspaceTrustManagementService,\n\t\t@IWorkspaceContextService private readonly workspaceService: IWorkspaceContextService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService\n\t) {\n\t\tsuper();\n\n\t\tthis.statusBarEntryAccessor = this._register(new MutableDisposable<IStatusbarEntryAccessor>());\n\n\t\tif (isWorkspaceTrustEnabled(configurationService)) {\n\t\t\tconst entry = this.getStatusbarEntry(this.workspaceTrustManagementService.isWorkpaceTrusted());\n\t\t\tthis.statusBarEntryAccessor.value = this.statusbarService.addEntry(entry, this.entryId, localize('status.WorkspaceTrust', \"Workspace Trust\"), StatusbarAlignment.LEFT, 0.99 * Number.MAX_VALUE /* Right of remote indicator */);\n\t\t\tthis._register(this.workspaceTrustManagementService.onDidChangeTrust(trusted => this.updateStatusbarEntry(trusted)));\n\t\t\tthis._register(this.contextKeyService.onDidChangeContext((contextChange) => {\n\t\t\t\tif (contextChange.affectsSome(this.contextKeys)) {\n\t\t\t\t\tthis.updateVisibility(this.workspaceTrustManagementService.isWorkpaceTrusted());\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\tthis.updateVisibility(this.workspaceTrustManagementService.isWorkpaceTrusted());\n\t\t}\n\t}\n\n\tprivate getStatusbarEntry(trusted: boolean): IStatusbarEntry {\n\t\tconst text = workspaceTrustToString(trusted);\n\t\tconst backgroundColor = new ThemeColor(STATUS_BAR_PROMINENT_ITEM_BACKGROUND);\n\t\tconst color = new ThemeColor(STATUS_BAR_PROMINENT_ITEM_FOREGROUND);\n\n\t\treturn {\n\t\t\ttext: trusted ? `$(shield)` : `$(shield) ${text}`,\n\t\t\tariaLabel: trusted ? localize('status.ariaTrusted', \"This workspace is trusted.\") : localize('status.ariaUntrusted', \"Restricted Mode: Some features are disabled because this workspace is not trusted.\"),\n\t\t\ttooltip: trusted ? localize('status.tooltipTrusted', \"This workspace is trusted.\") : localize('status.tooltipUntrusted', \"Some features are disabled because this workspace is not trusted.\"),\n\t\t\tcommand: 'workbench.trust.manage',\n\t\t\tbackgroundColor,\n\t\t\tcolor\n\t\t};\n\t}\n\n\tprivate updateVisibility(trusted: boolean): void {\n\t\tconst pendingRequest = this.contextKeyService.getContextKeyValue(this.pendingRequestContextKey) === true;\n\t\tthis.statusbarService.updateEntryVisibility(this.entryId, !trusted || pendingRequest);\n\t}\n\n\tprivate updateStatusbarEntry(trusted: boolean): void {\n\t\tthis.statusBarEntryAccessor.value?.update(this.getStatusbarEntry(trusted));\n\t\tthis.updateVisibility(trusted);\n\t}\n}\n\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(\n\tWorkspaceTrustStatusbarItem,\n\tLifecyclePhase.Starting\n);\n\n/**\n * Trusted Workspace GUI Editor\n */\nclass WorkspaceTrustEditorInputSerializer implements IEditorInputSerializer {\n\n\tcanSerialize(editorInput: EditorInput): boolean {\n\t\treturn true;\n\t}\n\n\tserialize(input: WorkspaceTrustEditorInput): string {\n\t\treturn '{}';\n\t}\n\n\tdeserialize(instantiationService: IInstantiationService, serializedEditorInput: string): WorkspaceTrustEditorInput {\n\t\treturn instantiationService.createInstance(WorkspaceTrustEditorInput);\n\t}\n}\n\nRegistry.as<IEditorInputFactoryRegistry>(EditorExtensions.EditorInputFactories)\n\t.registerEditorInputSerializer(WorkspaceTrustEditorInput.ID, WorkspaceTrustEditorInputSerializer);\n\nRegistry.as<IEditorRegistry>(EditorExtensions.Editors).registerEditor(\n\tEditorDescriptor.create(\n\t\tWorkspaceTrustEditor,\n\t\tWorkspaceTrustEditor.ID,\n\t\tlocalize('workspaceTrustEditor', \"Workspace Trust Editor\")\n\t),\n\t[\n\t\tnew SyncDescriptor(WorkspaceTrustEditorInput)\n\t]\n);\n\n/*\n * Actions\n */\n\n// Manage Workspace Trust\nregisterAction2(class extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.trust.manage',\n\t\t\ttitle: {\n\t\t\t\toriginal: 'Manage Workspace Trust',\n\t\t\t\tvalue: localize('manageWorkspaceTrust', \"Manage Workspace Trust\")\n\t\t\t},\n\t\t\tcategory: localize('workspacesCategory', \"Workspaces\"),\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.GlobalActivity,\n\t\t\t\tgroup: '6_workspace_trust',\n\t\t\t\torder: 40,\n\t\t\t\twhen: ContextKeyExpr.and(IsWebContext.negate(), ContextKeyExpr.equals(`config.${WORKSPACE_TRUST_ENABLED}`, true), WorkspaceTrustContext.PendingRequest.negate())\n\t\t\t},\n\t\t});\n\t}\n\n\trun(accessor: ServicesAccessor) {\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst instantiationService = accessor.get(IInstantiationService);\n\n\t\tconst input = instantiationService.createInstance(WorkspaceTrustEditorInput);\n\n\t\teditorService.openEditor(input, { pinned: true, revealIfOpened: true });\n\t\treturn;\n\t}\n});\n\nMenuRegistry.appendMenuItem(MenuId.GlobalActivity, {\n\tcommand: {\n\t\tid: 'workbench.trust.manage',\n\t\ttitle: localize('manageWorkspaceTrustPending', \"Manage Workspace Trust (1)\"),\n\t},\n\tgroup: '6_workspace_trust',\n\torder: 40,\n\twhen: ContextKeyExpr.and(IsWebContext.negate(), ContextKeyExpr.equals(`config.${WORKSPACE_TRUST_ENABLED}`, true), WorkspaceTrustContext.PendingRequest)\n});\n\n/*\n * Configuration\n */\nRegistry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration)\n\t.registerConfiguration({\n\t\tid: 'security',\n\t\tscope: ConfigurationScope.APPLICATION,\n\t\ttitle: localize('securityConfigurationTitle', \"Security\"),\n\t\ttype: 'object',\n\t\torder: 7,\n\t\tproperties: {\n\t\t\t[WORKSPACE_TRUST_ENABLED]: {\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\tincluded: !isWeb,\n\t\t\t\tdescription: localize('workspace.trust.description', \"Controls whether or not workspace trust is enabled within VS Code.\"),\n\t\t\t\tscope: ConfigurationScope.APPLICATION\n\t\t\t},\n\t\t\t[WORKSPACE_TRUST_STARTUP_PROMPT]: {\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: 'once',\n\t\t\t\tincluded: !isWeb,\n\t\t\t\tdescription: localize('workspace.trust.startupPrompt.description', \"Controls when the startup prompt to trust a workspace is shown.\"),\n\t\t\t\tscope: ConfigurationScope.APPLICATION,\n\t\t\t\tenum: ['always', 'once', 'never'],\n\t\t\t\tenumDescriptions: [\n\t\t\t\t\tlocalize('workspace.trust.startupPrompt.always', \"Ask for trust every time an untrusted workspace is opened.\"),\n\t\t\t\t\tlocalize('workspace.trust.startupPrompt.once', \"Ask for trust the first time an untrusted workspace is opened.\"),\n\t\t\t\t\tlocalize('workspace.trust.startupPrompt.never', \"Do not ask for trust when an untrusted workspace is opened.\"),\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t});\n\n/**\n * Telemetry\n */\nclass WorkspaceTrustTelemetryContribution extends Disposable implements IWorkbenchContribution {\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IWorkspaceContextService private readonly workspaceContextService: IWorkspaceContextService,\n\t\t@IWorkspaceTrustManagementService private readonly workspaceTrustManagementService: IWorkspaceTrustManagementService,\n\t\t@IWorkspaceTrustRequestService private readonly workspaceTrustRequestService: IWorkspaceTrustRequestService\n\t) {\n\t\tsuper();\n\n\t\tthis._register(this.workspaceTrustManagementService.onDidChangeTrust(isTrusted => this.logWorkspaceTrustChangeEvent(isTrusted)));\n\t\tthis._register(this.workspaceTrustRequestService.onDidInitiateWorkspaceTrustRequest(options => this.logWorkspaceTrustRequest(options)));\n\n\t\tthis.logInitialWorkspaceTrustInfo();\n\t}\n\n\tprivate logInitialWorkspaceTrustInfo(): void {\n\t\tif (!isWorkspaceTrustEnabled(this.configurationService)) {\n\t\t\treturn;\n\t\t}\n\n\t\ttype WorkspaceTrustInfoEventClassification = {\n\t\t\ttrustedFoldersCount: { classification: 'SystemMetaData', purpose: 'FeatureInsight', isMeasurement: true };\n\t\t};\n\n\t\ttype WorkspaceTrustInfoEvent = {\n\t\t\ttrustedFoldersCount: number,\n\t\t};\n\n\t\tthis.telemetryService.publicLog2<WorkspaceTrustInfoEvent, WorkspaceTrustInfoEventClassification>('workspaceTrustFolderCounts', {\n\t\t\ttrustedFoldersCount: this.workspaceTrustManagementService.getTrustedFolders().length,\n\t\t});\n\t}\n\n\tprivate logWorkspaceTrustChangeEvent(isTrusted: boolean): void {\n\t\tif (!isWorkspaceTrustEnabled(this.configurationService)) {\n\t\t\treturn;\n\t\t}\n\n\t\ttype WorkspaceTrustStateChangedEvent = {\n\t\t\tworkspaceId: string,\n\t\t\tisTrusted: boolean\n\t\t};\n\n\t\ttype WorkspaceTrustStateChangedEventClassification = {\n\t\t\tworkspaceId: { classification: 'SystemMetaData', purpose: 'FeatureInsight' };\n\t\t\tisTrusted: { classification: 'SystemMetaData', purpose: 'FeatureInsight', isMeasurement: true };\n\t\t};\n\n\t\tthis.telemetryService.publicLog2<WorkspaceTrustStateChangedEvent, WorkspaceTrustStateChangedEventClassification>('workspaceTrustStateChanged', {\n\t\t\tworkspaceId: this.workspaceContextService.getWorkspace().id,\n\t\t\tisTrusted: isTrusted\n\t\t});\n\n\t\tif (isTrusted) {\n\t\t\ttype WorkspaceTrustFolderInfoEventClassification = {\n\t\t\t\ttrustedFolderDepth: { classification: 'SystemMetaData', purpose: 'FeatureInsight', isMeasurement: true };\n\t\t\t\tworkspaceFolderDepth: { classification: 'SystemMetaData', purpose: 'FeatureInsight', isMeasurement: true };\n\t\t\t\tdelta: { classification: 'SystemMetaData', purpose: 'FeatureInsight', isMeasurement: true };\n\t\t\t};\n\n\t\t\ttype WorkspaceTrustFolderInfoEvent = {\n\t\t\t\ttrustedFolderDepth: number,\n\t\t\t\tworkspaceFolderDepth: number,\n\t\t\t\tdelta: number\n\t\t\t};\n\n\t\t\tconst getDepth = (folder: string): number => {\n\t\t\t\tlet resolvedPath = resolve(folder);\n\n\t\t\t\tlet depth = 0;\n\t\t\t\twhile (dirname(resolvedPath) !== resolvedPath && depth < 100) {\n\t\t\t\t\tresolvedPath = dirname(resolvedPath);\n\t\t\t\t\tdepth++;\n\t\t\t\t}\n\n\t\t\t\treturn depth;\n\t\t\t};\n\n\t\t\tfor (const folder of this.workspaceContextService.getWorkspace().folders) {\n\t\t\t\tconst { trusted, uri } = this.workspaceTrustManagementService.getFolderTrustInfo(folder.uri);\n\t\t\t\tif (!trusted) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst workspaceFolderDepth = getDepth(folder.uri.fsPath);\n\t\t\t\tconst trustedFolderDepth = getDepth(uri.fsPath);\n\t\t\t\tconst delta = workspaceFolderDepth - trustedFolderDepth;\n\n\t\t\t\tthis.telemetryService.publicLog2<WorkspaceTrustFolderInfoEvent, WorkspaceTrustFolderInfoEventClassification>('workspaceFolderDepthBelowTrustedFolder', { workspaceFolderDepth, trustedFolderDepth, delta });\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async logWorkspaceTrustRequest(options: WorkspaceTrustRequestOptions): Promise<void> {\n\t\tif (!isWorkspaceTrustEnabled(this.configurationService)) {\n\t\t\treturn;\n\t\t}\n\n\t\ttype WorkspaceTrustRequestedEventClassification = {\n\t\t\tmodal: { classification: 'SystemMetaData', purpose: 'FeatureInsight', isMeasurement: true };\n\t\t\tworkspaceId: { classification: 'SystemMetaData', purpose: 'FeatureInsight' };\n\t\t\textensions: { classification: 'SystemMetaData', purpose: 'FeatureInsight' };\n\t\t};\n\n\t\ttype WorkspaceTrustRequestedEvent = {\n\t\t\tmodal: boolean,\n\t\t\tworkspaceId: string,\n\t\t\textensions: string[]\n\t\t};\n\n\t\tthis.telemetryService.publicLog2<WorkspaceTrustRequestedEvent, WorkspaceTrustRequestedEventClassification>('workspaceTrustRequested', {\n\t\t\tmodal: options.modal,\n\t\t\tworkspaceId: this.workspaceContextService.getWorkspace().id,\n\t\t\textensions: (await this.extensionService.getExtensions()).filter(ext => !!ext.capabilities?.untrustedWorkspaces).map(ext => ext.identifier.value)\n\t\t});\n\t}\n}\n\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench)\n\t.registerWorkbenchContribution(WorkspaceTrustTelemetryContribution, LifecyclePhase.Restored);\n"]}