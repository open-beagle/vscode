{"version":3,"file":"experimentalPrompt.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/experiments/browser/experimentalPrompt.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IViewletService } from 'vs/workbench/services/viewlet/browser/viewlet';\nimport { INotificationService, Severity, IPromptChoice } from 'vs/platform/notification/common/notification';\nimport { IExperimentService, IExperiment, ExperimentActionType, IExperimentActionPromptProperties, IExperimentActionPromptCommand, ExperimentState } from 'vs/workbench/contrib/experiments/common/experimentService';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IExtensionsViewPaneContainer } from 'vs/workbench/contrib/extensions/common/extensions';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { language } from 'vs/base/common/platform';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { URI } from 'vs/base/common/uri';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\n\nexport class ExperimentalPrompts extends Disposable implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IExperimentService private readonly experimentService: IExperimentService,\n\t\t@IViewletService private readonly viewletService: IViewletService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IOpenerService private readonly openerService: IOpenerService,\n\t\t@ICommandService private readonly commandService: ICommandService\n\n\t) {\n\t\tsuper();\n\t\tthis._register(this.experimentService.onExperimentEnabled(e => {\n\t\t\tif (e.action && e.action.type === ExperimentActionType.Prompt && e.state === ExperimentState.Run) {\n\t\t\t\tthis.showExperimentalPrompts(e);\n\t\t\t}\n\t\t}, this));\n\t}\n\n\tprivate showExperimentalPrompts(experiment: IExperiment): void {\n\t\tif (!experiment || !experiment.enabled || !experiment.action || experiment.state !== ExperimentState.Run) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst logTelemetry = (commandText?: string) => {\n\t\t\t/* __GDPR__\n\t\t\t\t\"experimentalPrompts\" : {\n\t\t\t\t\t\"experimentId\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\t\"commandText\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\t\"cancelled\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n\t\t\t\t}\n\t\t\t*/\n\t\t\tthis.telemetryService.publicLog('experimentalPrompts', {\n\t\t\t\texperimentId: experiment.id,\n\t\t\t\tcommandText,\n\t\t\t\tcancelled: !commandText\n\t\t\t});\n\t\t};\n\n\t\tconst actionProperties = (<IExperimentActionPromptProperties>experiment.action.properties);\n\t\tconst promptText = ExperimentalPrompts.getLocalizedText(actionProperties.promptText, language || '');\n\t\tif (!actionProperties || !promptText) {\n\t\t\treturn;\n\t\t}\n\t\tif (!actionProperties.commands) {\n\t\t\tactionProperties.commands = [];\n\t\t}\n\n\t\tconst choices: IPromptChoice[] = actionProperties.commands.map((command: IExperimentActionPromptCommand) => {\n\t\t\tconst commandText = ExperimentalPrompts.getLocalizedText(command.text, language || '');\n\t\t\treturn {\n\t\t\t\tlabel: commandText,\n\t\t\t\trun: () => {\n\t\t\t\t\tlogTelemetry(commandText);\n\t\t\t\t\tif (command.externalLink) {\n\t\t\t\t\t\tthis.openerService.open(URI.parse(command.externalLink));\n\t\t\t\t\t} else if (command.curatedExtensionsKey && Array.isArray(command.curatedExtensionsList)) {\n\t\t\t\t\t\tthis.viewletService.openViewlet('workbench.view.extensions', true)\n\t\t\t\t\t\t\t.then(viewlet => viewlet?.getViewPaneContainer() as IExtensionsViewPaneContainer)\n\t\t\t\t\t\t\t.then(viewlet => {\n\t\t\t\t\t\t\t\tif (viewlet) {\n\t\t\t\t\t\t\t\t\tviewlet.search('curated:' + command.curatedExtensionsKey);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t} else if (command.codeCommand) {\n\t\t\t\t\t\tthis.commandService.executeCommand(command.codeCommand.id, ...command.codeCommand.arguments);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.experimentService.markAsCompleted(experiment.id);\n\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\n\t\tthis.notificationService.prompt(Severity.Info, promptText, choices, {\n\t\t\tonCancel: () => {\n\t\t\t\tlogTelemetry();\n\t\t\t\tthis.experimentService.markAsCompleted(experiment.id);\n\t\t\t}\n\t\t});\n\t}\n\n\tstatic getLocalizedText(text: string | { [key: string]: string; }, displayLanguage: string): string {\n\t\tif (typeof text === 'string') {\n\t\t\treturn text;\n\t\t}\n\t\tconst msgInEnglish = text['en'] || text['en-us'];\n\t\tdisplayLanguage = displayLanguage.toLowerCase();\n\t\tif (!text[displayLanguage] && displayLanguage.indexOf('-') === 2) {\n\t\t\tdisplayLanguage = displayLanguage.substr(0, 2);\n\t\t}\n\t\treturn text[displayLanguage] || msgInEnglish;\n\t}\n}\n"]}