{"version":3,"file":"experimentalPrompts.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/experiments/test/electron-browser/experimentalPrompts.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { Emitter } from 'vs/base/common/event';\nimport { TestInstantiationService } from 'vs/platform/instantiation/test/common/instantiationServiceMock';\nimport { ILifecycleService } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { INotificationService, IPromptChoice, IPromptOptions, Severity } from 'vs/platform/notification/common/notification';\nimport { TestNotificationService } from 'vs/platform/notification/test/common/testNotificationService';\nimport { IStorageService, StorageScope } from 'vs/platform/storage/common/storage';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { NullTelemetryService } from 'vs/platform/telemetry/common/telemetryUtils';\nimport { ExperimentalPrompts } from 'vs/workbench/contrib/experiments/browser/experimentalPrompt';\nimport { ExperimentActionType, ExperimentState, IExperiment, IExperimentActionPromptProperties, IExperimentService, LocalizedPromptText } from 'vs/workbench/contrib/experiments/common/experimentService';\nimport { TestExperimentService } from 'vs/workbench/contrib/experiments/test/electron-browser/experimentService.test';\nimport { TestLifecycleService } from 'vs/workbench/test/browser/workbenchTestServices';\nimport { TestCommandService } from 'vs/editor/test/browser/editorTestServices';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\n\nsuite('Experimental Prompts', () => {\n\tlet instantiationService: TestInstantiationService;\n\tlet experimentService: TestExperimentService;\n\tlet experimentalPrompt: ExperimentalPrompts;\n\tlet commandService: TestCommandService;\n\tlet onExperimentEnabledEvent: Emitter<IExperiment>;\n\n\tlet storageData: { [key: string]: any; } = {};\n\tconst promptText = 'Hello there! Can you see this?';\n\tconst experiment: IExperiment =\n\t{\n\t\tid: 'experiment1',\n\t\tenabled: true,\n\t\traw: undefined,\n\t\tstate: ExperimentState.Run,\n\t\taction: {\n\t\t\ttype: ExperimentActionType.Prompt,\n\t\t\tproperties: {\n\t\t\t\tpromptText,\n\t\t\t\tcommands: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttext: 'Yes',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttext: 'No'\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t};\n\n\tsuiteSetup(() => {\n\t\tinstantiationService = new TestInstantiationService();\n\n\t\tinstantiationService.stub(ILifecycleService, new TestLifecycleService());\n\t\tinstantiationService.stub(ITelemetryService, NullTelemetryService);\n\n\t\tonExperimentEnabledEvent = new Emitter<IExperiment>();\n\n\t});\n\n\tsetup(() => {\n\t\tstorageData = {};\n\t\tinstantiationService.stub(IStorageService, <Partial<IStorageService>>{\n\t\t\tget: (a: string, b: StorageScope, c?: string) => a === 'experiments.experiment1' ? JSON.stringify(storageData) : c,\n\t\t\tstore: (a, b, c, d) => {\n\t\t\t\tif (a === 'experiments.experiment1') {\n\t\t\t\t\tstorageData = JSON.parse(b + '');\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tinstantiationService.stub(INotificationService, new TestNotificationService());\n\t\texperimentService = instantiationService.createInstance(TestExperimentService);\n\t\texperimentService.onExperimentEnabled = onExperimentEnabledEvent.event;\n\t\tinstantiationService.stub(IExperimentService, experimentService);\n\t\tcommandService = instantiationService.createInstance(TestCommandService);\n\t\tinstantiationService.stub(ICommandService, commandService);\n\t});\n\n\tteardown(() => {\n\t\tif (experimentService) {\n\t\t\texperimentService.dispose();\n\t\t}\n\t\tif (experimentalPrompt) {\n\t\t\texperimentalPrompt.dispose();\n\t\t}\n\t});\n\n\ttest('Show experimental prompt if experiment should be run. Choosing negative option should mark experiment as complete', () => {\n\n\t\tstorageData = {\n\t\t\tenabled: true,\n\t\t\tstate: ExperimentState.Run\n\t\t};\n\n\t\tinstantiationService.stub(INotificationService, {\n\t\t\tprompt: (a: Severity, b: string, c: IPromptChoice[]) => {\n\t\t\t\tassert.strictEqual(b, promptText);\n\t\t\t\tassert.strictEqual(c.length, 2);\n\t\t\t\tc[1].run();\n\t\t\t\treturn undefined!;\n\t\t\t}\n\t\t});\n\n\t\texperimentalPrompt = instantiationService.createInstance(ExperimentalPrompts);\n\t\tonExperimentEnabledEvent.fire(experiment);\n\n\t\treturn Promise.resolve(null).then(result => {\n\t\t\tassert.strictEqual(storageData['state'], ExperimentState.Complete);\n\t\t});\n\n\t});\n\n\ttest('runs experiment command', () => {\n\n\t\tstorageData = {\n\t\t\tenabled: true,\n\t\t\tstate: ExperimentState.Run\n\t\t};\n\n\t\tconst stub = instantiationService.stub(ICommandService, 'executeCommand', () => undefined);\n\t\tinstantiationService.stub(INotificationService, {\n\t\t\tprompt: (a: Severity, b: string, c: IPromptChoice[], options: IPromptOptions) => {\n\t\t\t\tc[0].run();\n\t\t\t\treturn undefined!;\n\t\t\t}\n\t\t});\n\n\t\texperimentalPrompt = instantiationService.createInstance(ExperimentalPrompts);\n\t\tonExperimentEnabledEvent.fire({\n\t\t\t...experiment,\n\t\t\taction: {\n\t\t\t\ttype: ExperimentActionType.Prompt,\n\t\t\t\tproperties: {\n\t\t\t\t\tpromptText,\n\t\t\t\t\tcommands: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: 'Yes',\n\t\t\t\t\t\t\tcodeCommand: { id: 'greet', arguments: ['world'] }\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn Promise.resolve(null).then(result => {\n\t\t\tassert.deepStrictEqual(stub.args[0], ['greet', 'world']);\n\t\t\tassert.strictEqual(storageData['state'], ExperimentState.Complete);\n\t\t});\n\n\t});\n\n\ttest('Show experimental prompt if experiment should be run. Cancelling should mark experiment as complete', () => {\n\n\t\tstorageData = {\n\t\t\tenabled: true,\n\t\t\tstate: ExperimentState.Run\n\t\t};\n\n\t\tinstantiationService.stub(INotificationService, {\n\t\t\tprompt: (a: Severity, b: string, c: IPromptChoice[], options: IPromptOptions) => {\n\t\t\t\tassert.strictEqual(b, promptText);\n\t\t\t\tassert.strictEqual(c.length, 2);\n\t\t\t\toptions.onCancel!();\n\t\t\t\treturn undefined!;\n\t\t\t}\n\t\t});\n\n\t\texperimentalPrompt = instantiationService.createInstance(ExperimentalPrompts);\n\t\tonExperimentEnabledEvent.fire(experiment);\n\n\t\treturn Promise.resolve(null).then(result => {\n\t\t\tassert.strictEqual(storageData['state'], ExperimentState.Complete);\n\t\t});\n\n\t});\n\n\ttest('Test getPromptText', () => {\n\t\tconst simpleTextCase: IExperimentActionPromptProperties = {\n\t\t\tpromptText: 'My simple prompt',\n\t\t\tcommands: []\n\t\t};\n\t\tconst multipleLocaleCase: IExperimentActionPromptProperties = {\n\t\t\tpromptText: {\n\t\t\t\ten: 'My simple prompt for en',\n\t\t\t\tde: 'My simple prompt for de',\n\t\t\t\t'en-au': 'My simple prompt for Austrailian English',\n\t\t\t\t'en-us': 'My simple prompt for US English'\n\t\t\t},\n\t\t\tcommands: []\n\t\t};\n\t\tconst englishUSTextCase: IExperimentActionPromptProperties = {\n\t\t\tpromptText: {\n\t\t\t\t'en-us': 'My simple prompt for en'\n\t\t\t},\n\t\t\tcommands: []\n\t\t};\n\t\tconst noEnglishTextCase: IExperimentActionPromptProperties = {\n\t\t\tpromptText: {\n\t\t\t\t'de-de': 'My simple prompt for German'\n\t\t\t},\n\t\t\tcommands: []\n\t\t};\n\n\t\tassert.strictEqual(ExperimentalPrompts.getLocalizedText(simpleTextCase.promptText, 'any-language'), simpleTextCase.promptText);\n\t\tconst multipleLocalePromptText = multipleLocaleCase.promptText as LocalizedPromptText;\n\t\tassert.strictEqual(ExperimentalPrompts.getLocalizedText(multipleLocaleCase.promptText, 'en'), multipleLocalePromptText['en']);\n\t\tassert.strictEqual(ExperimentalPrompts.getLocalizedText(multipleLocaleCase.promptText, 'de'), multipleLocalePromptText['de']);\n\t\tassert.strictEqual(ExperimentalPrompts.getLocalizedText(multipleLocaleCase.promptText, 'en-au'), multipleLocalePromptText['en-au']);\n\t\tassert.strictEqual(ExperimentalPrompts.getLocalizedText(multipleLocaleCase.promptText, 'en-gb'), multipleLocalePromptText['en']);\n\t\tassert.strictEqual(ExperimentalPrompts.getLocalizedText(multipleLocaleCase.promptText, 'fr'), multipleLocalePromptText['en']);\n\t\tassert.strictEqual(ExperimentalPrompts.getLocalizedText(englishUSTextCase.promptText, 'fr'), (englishUSTextCase.promptText as LocalizedPromptText)['en-us']);\n\t\tassert.strictEqual(!!ExperimentalPrompts.getLocalizedText(noEnglishTextCase.promptText, 'fr'), false);\n\t});\n});\n"]}