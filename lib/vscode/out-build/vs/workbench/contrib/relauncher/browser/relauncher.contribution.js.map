{"version":3,"sources":["vs/workbench/contrib/relauncher/browser/relauncher.contribution.ts"],"names":[],"mappings":"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","file":"relauncher.contribution.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDisposable, dispose, Disposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { IWorkbenchContributionsRegistry, IWorkbenchContribution, Extensions as WorkbenchExtensions } from 'vs/workbench/common/contributions';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IWindowsConfiguration } from 'vs/platform/windows/common/windows';\nimport { IHostService } from 'vs/workbench/services/host/browser/host';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { localize } from 'vs/nls';\nimport { IWorkspaceContextService, WorkbenchState } from 'vs/platform/workspace/common/workspace';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { RunOnceScheduler } from 'vs/base/common/async';\nimport { URI } from 'vs/base/common/uri';\nimport { isEqual } from 'vs/base/common/resources';\nimport { isMacintosh, isNative, isLinux } from 'vs/base/common/platform';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { IProductService } from 'vs/platform/product/common/productService';\n\ninterface IConfiguration extends IWindowsConfiguration {\n\tupdate: { mode: string; };\n\tdebug: { console: { wordWrap: boolean } };\n\teditor: { accessibilitySupport: 'on' | 'off' | 'auto' };\n\tsecurity: { workspace: { trust: { enabled: boolean } } }\n}\n\nexport class SettingsChangeRelauncher extends Disposable implements IWorkbenchContribution {\n\n\tprivate titleBarStyle: 'native' | 'custom' | undefined;\n\tprivate nativeTabs: boolean | undefined;\n\tprivate nativeFullScreen: boolean | undefined;\n\tprivate clickThroughInactive: boolean | undefined;\n\tprivate updateMode: string | undefined;\n\tprivate accessibilitySupport: 'on' | 'off' | 'auto' | undefined;\n\tprivate workspaceTrustEnabled: boolean | undefined;\n\n\tconstructor(\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IDialogService private readonly dialogService: IDialogService\n\t) {\n\t\tsuper();\n\n\t\tthis.onConfigurationChange(configurationService.getValue<IConfiguration>(), false);\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(e => this.onConfigurationChange(this.configurationService.getValue<IConfiguration>(), true)));\n\t}\n\n\tprivate onConfigurationChange(config: IConfiguration, notify: boolean): void {\n\t\tlet changed = false;\n\n\t\tif (isNative) {\n\n\t\t\t// Titlebar style\n\t\t\tif (typeof config.window?.titleBarStyle === 'string' && config.window?.titleBarStyle !== this.titleBarStyle && (config.window.titleBarStyle === 'native' || config.window.titleBarStyle === 'custom')) {\n\t\t\t\tthis.titleBarStyle = config.window.titleBarStyle;\n\t\t\t\tchanged = true;\n\t\t\t}\n\n\t\t\t// macOS: Native tabs\n\t\t\tif (isMacintosh && typeof config.window?.nativeTabs === 'boolean' && config.window.nativeTabs !== this.nativeTabs) {\n\t\t\t\tthis.nativeTabs = config.window.nativeTabs;\n\t\t\t\tchanged = true;\n\t\t\t}\n\n\t\t\t// macOS: Native fullscreen\n\t\t\tif (isMacintosh && typeof config.window?.nativeFullScreen === 'boolean' && config.window.nativeFullScreen !== this.nativeFullScreen) {\n\t\t\t\tthis.nativeFullScreen = config.window.nativeFullScreen;\n\t\t\t\tchanged = true;\n\t\t\t}\n\n\t\t\t// macOS: Click through (accept first mouse)\n\t\t\tif (isMacintosh && typeof config.window?.clickThroughInactive === 'boolean' && config.window.clickThroughInactive !== this.clickThroughInactive) {\n\t\t\t\tthis.clickThroughInactive = config.window.clickThroughInactive;\n\t\t\t\tchanged = true;\n\t\t\t}\n\n\t\t\t// Update channel\n\t\t\tif (typeof config.update?.mode === 'string' && config.update.mode !== this.updateMode) {\n\t\t\t\tthis.updateMode = config.update.mode;\n\t\t\t\tchanged = true;\n\t\t\t}\n\n\t\t\t// On linux turning on accessibility support will also pass this flag to the chrome renderer, thus a restart is required\n\t\t\tif (isLinux && typeof config.editor?.accessibilitySupport === 'string' && config.editor.accessibilitySupport !== this.accessibilitySupport) {\n\t\t\t\tthis.accessibilitySupport = config.editor.accessibilitySupport;\n\t\t\t\tif (this.accessibilitySupport === 'on') {\n\t\t\t\t\tchanged = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Workspace trust\n\t\t\tif (typeof config.security?.workspace.trust.enabled === 'boolean' && config.security?.workspace.trust.enabled !== this.workspaceTrustEnabled) {\n\t\t\t\tthis.workspaceTrustEnabled = config.security.workspace.trust.enabled;\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t}\n\n\t\t// Notify only when changed and we are the focused window (avoids notification spam across windows)\n\t\tif (notify && changed) {\n\t\t\tthis.doConfirm(\n\t\t\t\tisNative ?\n\t\t\t\t\tlocalize('relaunchSettingMessage', \"A setting has changed that requires a restart to take effect.\") :\n\t\t\t\t\tlocalize('relaunchSettingMessageWeb', \"A setting has changed that requires a reload to take effect.\"),\n\t\t\t\tisNative ?\n\t\t\t\t\tlocalize('relaunchSettingDetail', \"Press the restart button to restart {0} and enable the setting.\", this.productService.nameLong) :\n\t\t\t\t\tlocalize('relaunchSettingDetailWeb', \"Press the reload button to reload {0} and enable the setting.\", this.productService.nameLong),\n\t\t\t\tisNative ?\n\t\t\t\t\tlocalize('restart', \"&&Restart\") :\n\t\t\t\t\tlocalize('restartWeb', \"&&Reload\"),\n\t\t\t\t() => this.hostService.restart()\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate async doConfirm(message: string, detail: string, primaryButton: string, confirmed: () => void): Promise<void> {\n\t\tif (this.hostService.hasFocus) {\n\t\t\tconst res = await this.dialogService.confirm({ type: 'info', message, detail, primaryButton });\n\t\t\tif (res.confirmed) {\n\t\t\t\tconfirmed();\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport class WorkspaceChangeExtHostRelauncher extends Disposable implements IWorkbenchContribution {\n\n\tprivate firstFolderResource?: URI;\n\tprivate extensionHostRestarter: RunOnceScheduler;\n\n\tprivate onDidChangeWorkspaceFoldersUnbind: IDisposable | undefined;\n\n\tconstructor(\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IExtensionService extensionService: IExtensionService,\n\t\t@IHostService hostService: IHostService,\n\t\t@IWorkbenchEnvironmentService environmentService: IWorkbenchEnvironmentService\n\t) {\n\t\tsuper();\n\n\t\tthis.extensionHostRestarter = this._register(new RunOnceScheduler(() => {\n\t\t\tif (!!environmentService.extensionTestsLocationURI) {\n\t\t\t\treturn; // no restart when in tests: see https://github.com/microsoft/vscode/issues/66936\n\t\t\t}\n\n\t\t\tif (environmentService.remoteAuthority) {\n\t\t\t\thostService.reload(); // TODO@aeschli, workaround\n\t\t\t} else if (isNative) {\n\t\t\t\textensionService.restartExtensionHost();\n\t\t\t}\n\t\t}, 10));\n\n\t\tthis.contextService.getCompleteWorkspace()\n\t\t\t.then(workspace => {\n\t\t\t\tthis.firstFolderResource = workspace.folders.length > 0 ? workspace.folders[0].uri : undefined;\n\t\t\t\tthis.handleWorkbenchState();\n\t\t\t\tthis._register(this.contextService.onDidChangeWorkbenchState(() => setTimeout(() => this.handleWorkbenchState())));\n\t\t\t});\n\n\t\tthis._register(toDisposable(() => {\n\t\t\tif (this.onDidChangeWorkspaceFoldersUnbind) {\n\t\t\t\tthis.onDidChangeWorkspaceFoldersUnbind.dispose();\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate handleWorkbenchState(): void {\n\n\t\t// React to folder changes when we are in workspace state\n\t\tif (this.contextService.getWorkbenchState() === WorkbenchState.WORKSPACE) {\n\n\t\t\t// Update our known first folder path if we entered workspace\n\t\t\tconst workspace = this.contextService.getWorkspace();\n\t\t\tthis.firstFolderResource = workspace.folders.length > 0 ? workspace.folders[0].uri : undefined;\n\n\t\t\t// Install workspace folder listener\n\t\t\tif (!this.onDidChangeWorkspaceFoldersUnbind) {\n\t\t\t\tthis.onDidChangeWorkspaceFoldersUnbind = this.contextService.onDidChangeWorkspaceFolders(() => this.onDidChangeWorkspaceFolders());\n\t\t\t}\n\t\t}\n\n\t\t// Ignore the workspace folder changes in EMPTY or FOLDER state\n\t\telse {\n\t\t\tdispose(this.onDidChangeWorkspaceFoldersUnbind);\n\t\t\tthis.onDidChangeWorkspaceFoldersUnbind = undefined;\n\t\t}\n\t}\n\n\tprivate onDidChangeWorkspaceFolders(): void {\n\t\tconst workspace = this.contextService.getWorkspace();\n\n\t\t// Restart extension host if first root folder changed (impact on deprecated workspace.rootPath API)\n\t\tconst newFirstFolderResource = workspace.folders.length > 0 ? workspace.folders[0].uri : undefined;\n\t\tif (!isEqual(this.firstFolderResource, newFirstFolderResource)) {\n\t\t\tthis.firstFolderResource = newFirstFolderResource;\n\n\t\t\tthis.extensionHostRestarter.schedule(); // buffer calls to extension host restart\n\t\t}\n\t}\n}\n\nconst workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench);\nworkbenchRegistry.registerWorkbenchContribution(SettingsChangeRelauncher, LifecyclePhase.Restored);\nworkbenchRegistry.registerWorkbenchContribution(WorkspaceChangeExtHostRelauncher, LifecyclePhase.Restored);\n"]}