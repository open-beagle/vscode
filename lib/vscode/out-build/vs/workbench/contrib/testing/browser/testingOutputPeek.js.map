{"version":3,"sources":["vs/workbench/contrib/testing/browser/testingOutputPeek.ts"],"names":[],"mappings":"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","file":"testingOutputPeek.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from 'vs/base/browser/dom';\nimport { alert } from 'vs/base/browser/ui/aria/aria';\nimport { Codicon } from 'vs/base/common/codicons';\nimport { Color } from 'vs/base/common/color';\nimport { KeyCode } from 'vs/base/common/keyCodes';\nimport { Disposable, IReference, MutableDisposable } from 'vs/base/common/lifecycle';\nimport { clamp } from 'vs/base/common/numbers';\nimport { count } from 'vs/base/common/strings';\nimport { URI } from 'vs/base/common/uri';\nimport { ICodeEditor, isCodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { EditorAction2 } from 'vs/editor/browser/editorExtensions';\nimport { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';\nimport { EmbeddedCodeEditorWidget, EmbeddedDiffEditorWidget } from 'vs/editor/browser/widget/embeddedCodeEditorWidget';\nimport { IDiffEditorOptions, IEditorOptions } from 'vs/editor/common/config/editorOptions';\nimport { IEditorContribution } from 'vs/editor/common/editorCommon';\nimport { IResolvedTextEditorModel, ITextModelService } from 'vs/editor/common/services/resolverService';\nimport { getOuterEditor, IPeekViewService, peekViewTitleBackground, peekViewTitleForeground, peekViewTitleInfoForeground, PeekViewWidget } from 'vs/editor/contrib/peekView/peekView';\nimport { localize } from 'vs/nls';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ContextKeyExpr, IContextKey, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { ITextEditorOptions } from 'vs/platform/editor/common/editor';\nimport { createDecorator, IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { IColorTheme, IThemeService } from 'vs/platform/theme/common/themeService';\nimport { EditorModel } from 'vs/workbench/common/editor';\nimport { testingPeekBorder } from 'vs/workbench/contrib/testing/browser/theme';\nimport { AutoOpenPeekViewWhen, getTestingConfiguration, TestingConfigKeys } from 'vs/workbench/contrib/testing/common/configuration';\nimport { Testing } from 'vs/workbench/contrib/testing/common/constants';\nimport { ITestItem, ITestMessage, TestResultItem } from 'vs/workbench/contrib/testing/common/testCollection';\nimport { TestingContextKeys } from 'vs/workbench/contrib/testing/common/testingContextKeys';\nimport { isFailedState } from 'vs/workbench/contrib/testing/common/testingStates';\nimport { buildTestUri, parseTestUri, TestUriType } from 'vs/workbench/contrib/testing/common/testingUri';\nimport { ITestResult, TestResultItemChange, TestResultItemChangeReason } from 'vs/workbench/contrib/testing/common/testResult';\nimport { ITestResultService, ResultChangeEvent } from 'vs/workbench/contrib/testing/common/testResultService';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\n\ninterface ITestDto {\n\ttest: ITestItem,\n\tmessageIndex: number;\n\tmessages: ITestMessage[];\n\texpectedUri: URI;\n\tactualUri: URI;\n\tmessageUri: URI;\n}\n\nexport interface ITestingPeekOpener {\n\t_serviceBrand: undefined;\n\n\t/**\n\t * Tries to peek the first test error, if the item is in a failed state.\n\t * @returns a boolean indicating whether a peek was opened\n\t */\n\ttryPeekFirstError(result: ITestResult, test: TestResultItem, options?: Partial<ITextEditorOptions>): Promise<boolean>;\n}\n\nexport const ITestingPeekOpener = createDecorator<ITestingPeekOpener>('testingPeekOpener');\n\nexport class TestingPeekOpener extends Disposable implements ITestingPeekOpener {\n\tdeclare _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configuration: IConfigurationService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@ICodeEditorService private readonly codeEditorService: ICodeEditorService,\n\t\t@ITestResultService testResults: ITestResultService,\n\t) {\n\t\tsuper();\n\t\tthis._register(testResults.onTestChanged(this.openPeekOnFailure, this));\n\t}\n\n\t/**\n\t * Tries to peek the first test error, if the item is in a failed state.\n\t * @returns a boolean if a peek was opened\n\t */\n\tpublic async tryPeekFirstError(result: ITestResult, test: TestResultItem, options?: Partial<ITextEditorOptions>) {\n\t\tconst candidate = this.getCandidateMessage(test);\n\t\tif (!candidate) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst message = candidate.message;\n\t\tconst pane = await this.editorService.openEditor({\n\t\t\tresource: message.location!.uri,\n\t\t\toptions: { selection: message.location!.range, revealIfOpened: true, ...options }\n\t\t});\n\n\t\tconst control = pane?.getControl();\n\t\tif (!isCodeEditor(control)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tTestingOutputPeekController.get(control).show(buildTestUri({\n\t\t\ttype: TestUriType.ResultMessage,\n\t\t\ttaskIndex: candidate.taskId,\n\t\t\tmessageIndex: candidate.index,\n\t\t\tresultId: result.id,\n\t\t\ttestExtId: test.item.extId,\n\t\t}));\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Opens the peek view on a test failure, based on user preferences.\n\t */\n\tprivate openPeekOnFailure(evt: TestResultItemChange) {\n\t\tif (evt.reason !== TestResultItemChangeReason.OwnStateChange) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst candidate = this.getCandidateMessage(evt.item);\n\t\tif (!candidate) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (evt.result.isAutoRun && !getTestingConfiguration(this.configuration, TestingConfigKeys.AutoOpenPeekViewDuringAutoRun)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst editors = this.codeEditorService.listCodeEditors();\n\t\tconst cfg = getTestingConfiguration(this.configuration, TestingConfigKeys.AutoOpenPeekView);\n\n\t\t// don't show the peek if the user asked to only auto-open peeks for visible tests,\n\t\t// and this test is not in any of the editors' models.\n\t\tconst testUri = evt.item.item.uri.toString();\n\t\tif (cfg === AutoOpenPeekViewWhen.FailureVisible && (!testUri || !editors.some(e => e.getModel()?.uri.toString() === testUri))) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst controllers = editors.map(TestingOutputPeekController.get);\n\t\tif (controllers.some(c => c?.isVisible)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.tryPeekFirstError(evt.result, evt.item);\n\t}\n\n\tprivate getCandidateMessage(test: TestResultItem) {\n\t\tfor (let taskId = 0; taskId < test.tasks.length; taskId++) {\n\t\t\tconst { messages, state } = test.tasks[taskId];\n\t\t\tif (!isFailedState(state)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst index = messages.findIndex(m => !!m.location);\n\t\t\tif (index === -1) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\treturn { taskId, index, message: messages[index] };\n\t\t}\n\n\t\treturn undefined;\n\t}\n}\n\n/**\n * Adds output/message peek functionality to code editors.\n */\nexport class TestingOutputPeekController extends Disposable implements IEditorContribution {\n\t/**\n\t * Gets the controller associated with the given code editor.\n\t */\n\tpublic static get(editor: ICodeEditor): TestingOutputPeekController {\n\t\treturn editor.getContribution<TestingOutputPeekController>(Testing.OutputPeekContributionId);\n\t}\n\n\t/**\n\t * Currently-shown peek view.\n\t */\n\tprivate readonly peek = this._register(new MutableDisposable<TestingOutputPeek>());\n\n\t/**\n\t * URI of the currently-visible peek, if any.\n\t */\n\tprivate currentPeekUri: URI | undefined;\n\n\t/**\n\t * Context key updated when the peek is visible/hidden.\n\t */\n\tprivate readonly visible: IContextKey<boolean>;\n\n\t/**\n\t * Gets whether a peek is currently shown in the associated editor.\n\t */\n\tpublic get isVisible() {\n\t\treturn this.peek.value;\n\t}\n\n\tconstructor(\n\t\tprivate readonly editor: ICodeEditor,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ITestResultService private readonly testResults: ITestResultService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t) {\n\t\tsuper();\n\t\tthis.visible = TestingContextKeys.isPeekVisible.bindTo(contextKeyService);\n\t\tthis._register(editor.onDidChangeModel(() => this.peek.clear()));\n\t\tthis._register(testResults.onResultsChanged(this.closePeekOnRunStart, this));\n\t\tthis._register(testResults.onTestChanged(this.closePeekOnTestChange, this));\n\t}\n\n\t/**\n\t * Toggles peek visibility for the URI.\n\t */\n\tpublic toggle(uri: URI) {\n\t\tif (this.currentPeekUri?.toString() === uri.toString()) {\n\t\t\tthis.peek.clear();\n\t\t} else {\n\t\t\tthis.show(uri);\n\t\t}\n\t}\n\n\t/**\n\t * Shows a peek for the message in th editor.\n\t */\n\tpublic async show(uri: URI) {\n\t\tconst dto = this.retrieveTest(uri);\n\t\tif (!dto) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst message = dto.messages[dto.messageIndex];\n\t\tif (!message?.location) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ctor = message.actualOutput !== undefined && message.expectedOutput !== undefined\n\t\t\t? TestingDiffOutputPeek : TestingMessageOutputPeek;\n\t\tconst isNew = !(this.peek.value instanceof ctor);\n\t\tif (isNew) {\n\t\t\tthis.peek.value = this.instantiationService.createInstance(ctor, this.editor);\n\t\t\tthis.peek.value.onDidClose(() => {\n\t\t\t\tthis.visible.set(false);\n\t\t\t\tthis.currentPeekUri = undefined;\n\t\t\t\tthis.peek.value = undefined;\n\t\t\t});\n\t\t}\n\n\t\tif (isNew) {\n\t\t\tthis.visible.set(true);\n\t\t\tthis.peek.value!.create();\n\t\t}\n\n\t\talert(message.message.toString());\n\t\tthis.peek.value!.setModel(dto);\n\t\tthis.currentPeekUri = uri;\n\t}\n\n\t/**\n\t * Disposes the peek view, if any.\n\t */\n\tpublic removePeek() {\n\t\tthis.peek.clear();\n\t}\n\n\t/**\n\t * Removes the peek view if it's being displayed on the given test ID.\n\t */\n\tpublic removeIfPeekingForTest(testId: string) {\n\t\tif (this.peek.value?.currentTest()?.extId === testId) {\n\t\t\tthis.peek.clear();\n\t\t}\n\t}\n\n\t/**\n\t * If the test we're currently showing has its state change to something\n\t * else, then clear the peek.\n\t */\n\tprivate closePeekOnTestChange(evt: TestResultItemChange) {\n\t\tif (evt.reason !== TestResultItemChangeReason.OwnStateChange || evt.previous === evt.item.ownComputedState) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.removeIfPeekingForTest(evt.item.item.extId);\n\t}\n\n\tprivate closePeekOnRunStart(evt: ResultChangeEvent) {\n\t\tif ('started' in evt) {\n\t\t\tthis.peek.clear();\n\t\t}\n\t}\n\n\tprivate retrieveTest(uri: URI): ITestDto | undefined {\n\t\tconst parts = parseTestUri(uri);\n\t\tif (!parts) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst test = this.testResults.getResult(parts.resultId)?.getStateById(parts.testExtId);\n\t\tif (!test || !test.tasks[parts.taskIndex]) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn test && {\n\t\t\ttest: test.item,\n\t\t\tmessages: test.tasks[parts.taskIndex].messages,\n\t\t\tmessageIndex: parts.messageIndex,\n\t\t\texpectedUri: buildTestUri({ ...parts, type: TestUriType.ResultExpectedOutput }),\n\t\t\tactualUri: buildTestUri({ ...parts, type: TestUriType.ResultActualOutput }),\n\t\t\tmessageUri: buildTestUri({ ...parts, type: TestUriType.ResultMessage }),\n\t\t};\n\t}\n}\n\nabstract class TestingOutputPeek extends PeekViewWidget {\n\tprotected model = new MutableDisposable();\n\tprotected dimension?: dom.Dimension;\n\n\tconstructor(\n\t\teditor: ICodeEditor,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IPeekViewService peekViewService: IPeekViewService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@ITextModelService protected readonly modelService: ITextModelService,\n\t) {\n\t\tsuper(editor, { showFrame: false, showArrow: true, isResizeable: true, isAccessible: true, className: 'test-output-peek' }, instantiationService);\n\n\t\tTestingContextKeys.isInPeek.bindTo(contextKeyService);\n\t\tthis._disposables.add(themeService.onDidColorThemeChange(this.applyTheme, this));\n\t\tthis._disposables.add(this.model);\n\t\tthis.applyTheme(themeService.getColorTheme());\n\t\tpeekViewService.addExclusiveWidget(editor, this);\n\t}\n\n\tprivate applyTheme(theme: IColorTheme) {\n\t\tconst borderColor = theme.getColor(testingPeekBorder) || Color.transparent;\n\t\tthis.style({\n\t\t\tarrowColor: borderColor,\n\t\t\tframeColor: borderColor,\n\t\t\theaderBackgroundColor: theme.getColor(peekViewTitleBackground) || Color.transparent,\n\t\t\tprimaryHeadingColor: theme.getColor(peekViewTitleForeground),\n\t\t\tsecondaryHeadingColor: theme.getColor(peekViewTitleInfoForeground)\n\t\t});\n\t}\n\n\t/**\n\t * Updates the test to be shown.\n\t */\n\tpublic abstract setModel(dto: ITestDto): Promise<void>;\n\n\t/**\n\t * Returns the test whose data is currently shown in the peek view.\n\t */\n\tpublic abstract currentTest(): ITestItem | undefined;\n\n\t/**\n\t * @override\n\t */\n\tprotected override _doLayoutBody(height: number, width: number) {\n\t\tsuper._doLayoutBody(height, width);\n\t\tthis.dimension = new dom.Dimension(width, height);\n\t}\n}\n\nconst commonEditorOptions: IEditorOptions = {\n\tscrollBeyondLastLine: false,\n\tscrollbar: {\n\t\tverticalScrollbarSize: 14,\n\t\thorizontal: 'auto',\n\t\tuseShadows: true,\n\t\tverticalHasArrows: false,\n\t\thorizontalHasArrows: false,\n\t\talwaysConsumeMouseWheel: false\n\t},\n\tfixedOverflowWidgets: true,\n\treadOnly: true,\n\tminimap: {\n\t\tenabled: false\n\t},\n};\n\nconst diffEditorOptions: IDiffEditorOptions = {\n\t...commonEditorOptions,\n\tenableSplitViewResizing: true,\n\tisInEmbeddedEditor: true,\n\trenderOverviewRuler: false,\n\tignoreTrimWhitespace: false,\n\trenderSideBySide: true,\n\toriginalAriaLabel: localize('testingOutputExpected', 'Expected result'),\n\tmodifiedAriaLabel: localize('testingOutputActual', 'Actual result'),\n};\n\nclass TestingDiffOutputPeek extends TestingOutputPeek {\n\tprivate readonly diff = this._disposables.add(new MutableDisposable<EmbeddedDiffEditorWidget>());\n\tprivate test: ITestItem | undefined;\n\n\t/**\n\t * @override\n\t */\n\tprotected _fillBody(containerElement: HTMLElement): void {\n\t\tconst diffContainer = dom.append(containerElement, dom.$('div.preview.inline'));\n\t\tconst preview = this.diff.value = this.instantiationService.createInstance(EmbeddedDiffEditorWidget, diffContainer, diffEditorOptions, this.editor);\n\n\t\tif (this.dimension) {\n\t\t\tpreview.layout(this.dimension);\n\t\t}\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic async setModel({ test, messages, messageIndex, expectedUri, actualUri }: ITestDto) {\n\t\tconst message = messages[messageIndex];\n\t\tif (!message?.location) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.test = test;\n\t\tthis.show(message.location.range, hintDiffPeekHeight(message));\n\t\tthis.setTitle(message.message.toString().split('\\n')[0], test.label);\n\n\t\tconst [original, modified] = await Promise.all([\n\t\t\tthis.modelService.createModelReference(expectedUri),\n\t\t\tthis.modelService.createModelReference(actualUri),\n\t\t]);\n\n\t\tconst model = this.model.value = new SimpleDiffEditorModel(original, modified);\n\t\tif (!this.diff.value) {\n\t\t\tthis.model.value = undefined;\n\t\t} else {\n\t\t\tthis.diff.value.setModel(model);\n\t\t}\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic currentTest() {\n\t\treturn this.test;\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprotected override _doLayoutBody(height: number, width: number) {\n\t\tsuper._doLayoutBody(height, width);\n\t\tthis.diff.value?.layout(this.dimension);\n\t}\n}\n\nclass TestingMessageOutputPeek extends TestingOutputPeek {\n\tprivate readonly preview = this._disposables.add(new MutableDisposable<EmbeddedCodeEditorWidget>());\n\tprivate test: ITestItem | undefined;\n\n\t/**\n\t * @override\n\t */\n\tprotected _fillBody(containerElement: HTMLElement): void {\n\t\tconst diffContainer = dom.append(containerElement, dom.$('div.preview.inline'));\n\t\tconst preview = this.preview.value = this.instantiationService.createInstance(EmbeddedCodeEditorWidget, diffContainer, commonEditorOptions, this.editor);\n\n\t\tif (this.dimension) {\n\t\t\tpreview.layout(this.dimension);\n\t\t}\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic async setModel({ messages, test, messageIndex, messageUri }: ITestDto) {\n\t\tconst message = messages[messageIndex];\n\t\tif (!message?.location) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.test = test;\n\t\tthis.show(message.location.range, hintPeekStrHeight(message.message.toString()));\n\t\tthis.setTitle(message.message.toString(), test.label);\n\n\t\tconst modelRef = this.model.value = await this.modelService.createModelReference(messageUri);\n\t\tif (this.preview.value) {\n\t\t\tthis.preview.value.setModel(modelRef.object.textEditorModel);\n\t\t} else {\n\t\t\tthis.model.value = undefined;\n\t\t}\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic currentTest() {\n\t\treturn this.test;\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprotected override _doLayoutBody(height: number, width: number) {\n\t\tsuper._doLayoutBody(height, width);\n\t\tthis.preview.value?.layout(this.dimension);\n\t}\n}\n\nconst hintDiffPeekHeight = (message: ITestMessage) =>\n\tMath.max(hintPeekStrHeight(message.actualOutput), hintPeekStrHeight(message.expectedOutput));\n\nconst hintPeekStrHeight = (str: string | undefined) => clamp(count(str || '', '\\n'), 5, 20);\n\nclass SimpleDiffEditorModel extends EditorModel {\n\tpublic readonly original = this._original.object.textEditorModel;\n\tpublic readonly modified = this._modified.object.textEditorModel;\n\n\tconstructor(\n\t\tprivate readonly _original: IReference<IResolvedTextEditorModel>,\n\t\tprivate readonly _modified: IReference<IResolvedTextEditorModel>,\n\t) {\n\t\tsuper();\n\t}\n\n\tpublic override dispose() {\n\t\tsuper.dispose();\n\t\tthis._original.dispose();\n\t\tthis._modified.dispose();\n\t}\n}\n\nfunction getOuterEditorFromDiffEditor(accessor: ServicesAccessor): ICodeEditor | null {\n\tconst diffEditors = accessor.get(ICodeEditorService).listDiffEditors();\n\n\tfor (const diffEditor of diffEditors) {\n\t\tif (diffEditor.hasTextFocus() && diffEditor instanceof EmbeddedDiffEditorWidget) {\n\t\t\treturn diffEditor.getParentEditor();\n\t\t}\n\t}\n\n\treturn getOuterEditor(accessor);\n}\n\nexport class CloseTestPeek extends EditorAction2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.closeTestPeek',\n\t\t\ttitle: localize('close', 'Close'),\n\t\t\ticon: Codicon.close,\n\t\t\tprecondition: ContextKeyExpr.and(\n\t\t\t\tContextKeyExpr.or(TestingContextKeys.isInPeek, TestingContextKeys.isPeekVisible),\n\t\t\t\tContextKeyExpr.not('config.editor.stablePeek')\n\t\t\t),\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.EditorContrib - 101,\n\t\t\t\tprimary: KeyCode.Escape\n\t\t\t}\n\t\t});\n\t}\n\n\trunEditorCommand(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst parent = getOuterEditorFromDiffEditor(accessor);\n\t\tTestingOutputPeekController.get(parent ?? editor).removePeek();\n\t}\n}\n"]}