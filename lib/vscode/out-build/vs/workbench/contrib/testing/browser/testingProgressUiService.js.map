{"version":3,"sources":["vs/workbench/contrib/testing/browser/testingProgressUiService.ts"],"names":[],"mappings":"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","file":"testingProgressUiService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { RunOnceScheduler } from 'vs/base/common/async';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable, MutableDisposable } from 'vs/base/common/lifecycle';\nimport { localize } from 'vs/nls';\nimport { createDecorator, IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { ProgressLocation, UnmanagedProgress } from 'vs/platform/progress/common/progress';\nimport { TestResultState } from 'vs/workbench/api/common/extHostTypes';\nimport { TestStateCount } from 'vs/workbench/contrib/testing/common/testResult';\nimport { ITestResultService } from 'vs/workbench/contrib/testing/common/testResultService';\n\nexport interface ITestingProgressUiService {\n\treadonly _serviceBrand: undefined;\n\treadonly onCountChange: Event<CountSummary>;\n\treadonly onTextChange: Event<string>;\n}\n\nexport const ITestingProgressUiService = createDecorator<ITestingProgressUiService>('testingProgressUiService');\n\nexport class TestingProgressUiService extends Disposable implements ITestingProgressUiService {\n\tdeclare _serviceBrand: undefined;\n\n\tprivate readonly current = this._register(new MutableDisposable<UnmanagedProgress>());\n\tprivate readonly updateCountsEmitter = new Emitter<CountSummary>();\n\tprivate readonly updateTextEmitter = new Emitter<string>();\n\n\tpublic readonly onCountChange = this.updateCountsEmitter.event;\n\tpublic readonly onTextChange = this.updateTextEmitter.event;\n\n\tconstructor(\n\t\t@ITestResultService private readonly resultService: ITestResultService,\n\t\t@IInstantiationService private readonly instantiaionService: IInstantiationService,\n\t) {\n\t\tsuper();\n\n\t\tconst scheduler = this._register(new RunOnceScheduler(() => this.updateProgress(), 200));\n\n\t\tthis._register(resultService.onResultsChanged(() => {\n\t\t\tif (!scheduler.isScheduled()) {\n\t\t\t\tscheduler.schedule();\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(resultService.onTestChanged(() => {\n\t\t\tif (!scheduler.isScheduled()) {\n\t\t\t\tscheduler.schedule();\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate updateProgress() {\n\t\tconst allResults = this.resultService.results;\n\t\tconst running = allResults.filter(r => r.completedAt === undefined);\n\t\tif (!running.length) {\n\t\t\tif (allResults.length) {\n\t\t\t\tconst collected = collectTestStateCounts(false, allResults[0].counts);\n\t\t\t\tthis.updateCountsEmitter.fire(collected);\n\t\t\t\tthis.updateTextEmitter.fire(getTestProgressText(false, collected));\n\t\t\t}\n\n\t\t\tthis.current.clear();\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.current.value) {\n\t\t\tthis.current.value = this.instantiaionService.createInstance(UnmanagedProgress, { location: ProgressLocation.Window });\n\t\t}\n\n\t\tconst collected = collectTestStateCounts(true, ...running.map(r => r.counts));\n\t\tthis.updateCountsEmitter.fire(collected);\n\n\t\tconst message = getTestProgressText(true, collected);\n\t\tthis.updateTextEmitter.fire(message);\n\t\tthis.current.value.report({ message });\n\t}\n}\n\ntype CountSummary = ReturnType<typeof collectTestStateCounts>;\n\n\nconst collectTestStateCounts = (isRunning: boolean, ...counts: ReadonlyArray<TestStateCount>) => {\n\tlet passed = 0;\n\tlet failed = 0;\n\tlet skipped = 0;\n\tlet running = 0;\n\tlet queued = 0;\n\n\tfor (const count of counts) {\n\t\tfailed += count[TestResultState.Errored] + count[TestResultState.Failed];\n\t\tpassed += count[TestResultState.Passed];\n\t\tskipped += count[TestResultState.Skipped];\n\t\trunning += count[TestResultState.Running];\n\t\tqueued += count[TestResultState.Queued];\n\t}\n\n\treturn {\n\t\tisRunning,\n\t\tpassed,\n\t\tfailed,\n\t\trunSoFar: passed + failed,\n\t\ttotalWillBeRun: passed + failed + queued + running,\n\t\tskipped,\n\t};\n};\n\nconst getTestProgressText = (running: boolean, { passed, runSoFar, skipped, failed }: CountSummary) => {\n\tlet percent = passed / runSoFar * 100;\n\tif (failed > 0) {\n\t\t// fix: prevent from rounding to 100 if there's any failed test\n\t\tpercent = Math.min(percent, 99.9);\n\t} else if (runSoFar === 0) {\n\t\tpercent = 0;\n\t}\n\n\tif (running) {\n\t\tif (runSoFar === 0) {\n\t\t\treturn localize('testProgress.runningInitial', 'Running tests...', passed, runSoFar, percent.toPrecision(3));\n\t\t} else if (skipped === 0) {\n\t\t\treturn localize('testProgress.running', 'Running tests, {0}/{1} passed ({2}%)', passed, runSoFar, percent.toPrecision(3));\n\t\t} else {\n\t\t\treturn localize('testProgressWithSkip.running', 'Running tests, {0}/{1} tests passed ({2}%, {3} skipped)', passed, runSoFar, percent.toPrecision(3), skipped);\n\t\t}\n\t} else {\n\t\tif (skipped === 0) {\n\t\t\treturn localize('testProgress.completed', '{0}/{1} tests passed ({2}%)', passed, runSoFar, percent.toPrecision(3));\n\t\t} else {\n\t\t\treturn localize('testProgressWithSkip.completed', '{0}/{1} tests passed ({2}%, {3} skipped)', passed, runSoFar, percent.toPrecision(3), skipped);\n\t\t}\n\t}\n};\n"]}