{"version":3,"file":"nodeHelper.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/testing/browser/explorerProjections/nodeHelper.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IIdentityProvider } from 'vs/base/browser/ui/list/list';\nimport { ObjectTree } from 'vs/base/browser/ui/tree/objectTree';\nimport { ITreeElement } from 'vs/base/browser/ui/tree/tree';\nimport { IActionableTestTreeElement, TestExplorerTreeElement, TestItemTreeElement, TestTreeWorkspaceFolder } from 'vs/workbench/contrib/testing/browser/explorerProjections/index';\n\nexport const testIdentityProvider: IIdentityProvider<TestItemTreeElement> = {\n\tgetId(element) {\n\t\treturn element.treeId;\n\t}\n};\n\n/**\n * Removes nodes from the set whose parents don't exist in the tree. This is\n * useful to remove nodes that are queued to be updated or rendered, who will\n * be rendered by a call to setChildren.\n */\nexport const pruneNodesWithParentsNotInTree = <T extends TestItemTreeElement>(nodes: Set<T | null>, tree: ObjectTree<TestExplorerTreeElement, any>) => {\n\tfor (const node of nodes) {\n\t\tif (node && node.parent && !tree.hasElement(node.parent)) {\n\t\t\tnodes.delete(node);\n\t\t}\n\t}\n};\n\n/**\n * Returns whether there are any children for other nodes besides this one\n * in the tree.\n *\n * This is used for omitting test provider nodes if there's only a single\n * test provider in the workspace (the common case)\n */\nexport const peersHaveChildren = (node: IActionableTestTreeElement, roots: () => Iterable<IActionableTestTreeElement>) => {\n\tfor (const child of node.parent ? node.parent.children : roots()) {\n\t\tif (child !== node && child.children.size) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n};\n\nexport const enum NodeRenderDirective {\n\t/** Omit node and all its children */\n\tOmit,\n\t/** Concat children with parent */\n\tConcat\n}\n\nexport type NodeRenderFn = (\n\tn: TestExplorerTreeElement,\n\trecurse: (items: Iterable<TestExplorerTreeElement>) => Iterable<ITreeElement<TestExplorerTreeElement>>,\n) => ITreeElement<TestExplorerTreeElement> | NodeRenderDirective;\n\nconst pruneNodesNotInTree = (nodes: Set<TestExplorerTreeElement | null>, tree: ObjectTree<TestExplorerTreeElement, any>) => {\n\tfor (const node of nodes) {\n\t\tif (node && !tree.hasElement(node)) {\n\t\t\tnodes.delete(node);\n\t\t}\n\t}\n};\n\n/**\n * Helper to gather and bulk-apply tree updates.\n */\nexport class NodeChangeList<T extends (TestItemTreeElement | TestTreeWorkspaceFolder)> {\n\tprivate changedParents = new Set<T | null>();\n\tprivate updatedNodes = new Set<TestExplorerTreeElement>();\n\tprivate omittedNodes = new WeakSet<TestExplorerTreeElement>();\n\tprivate isFirstApply = true;\n\n\tpublic updated(node: TestExplorerTreeElement) {\n\t\tthis.updatedNodes.add(node);\n\t}\n\n\tpublic addedOrRemoved(node: TestExplorerTreeElement) {\n\t\tthis.changedParents.add(this.getNearestNotOmittedParent(node));\n\t}\n\n\tpublic applyTo(\n\t\ttree: ObjectTree<TestExplorerTreeElement, any>,\n\t\trenderNode: NodeRenderFn,\n\t\troots: () => Iterable<T>,\n\t) {\n\t\tpruneNodesNotInTree(this.changedParents, tree);\n\t\tpruneNodesNotInTree(this.updatedNodes, tree);\n\n\t\tconst diffDepth = this.isFirstApply ? Infinity : 0;\n\t\tthis.isFirstApply = false;\n\n\t\tfor (let parent of this.changedParents) {\n\t\t\twhile (parent && typeof renderNode(parent, () => []) !== 'object') {\n\t\t\t\tparent = parent.parent as T | null;\n\t\t\t}\n\n\t\t\tif (parent === null || tree.hasElement(parent)) {\n\t\t\t\ttree.setChildren(\n\t\t\t\t\tparent,\n\t\t\t\t\tthis.renderNodeList(renderNode, parent === null ? roots() : parent.children),\n\t\t\t\t\t{ diffIdentityProvider: testIdentityProvider, diffDepth },\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tfor (const node of this.updatedNodes) {\n\t\t\tif (tree.hasElement(node)) {\n\t\t\t\ttree.rerender(node);\n\t\t\t}\n\t\t}\n\n\t\tthis.changedParents.clear();\n\t\tthis.updatedNodes.clear();\n\t}\n\n\tprivate getNearestNotOmittedParent(node: TestExplorerTreeElement | null) {\n\t\tlet parent = node && node.parent;\n\t\twhile (parent && this.omittedNodes.has(parent)) {\n\t\t\tparent = parent.parent;\n\t\t}\n\n\t\treturn parent as T;\n\t}\n\n\tprivate *renderNodeList(renderNode: NodeRenderFn, nodes: Iterable<TestExplorerTreeElement>): Iterable<ITreeElement<TestExplorerTreeElement>> {\n\t\tfor (const node of nodes) {\n\t\t\tconst rendered = renderNode(node, this.renderNodeList.bind(this, renderNode));\n\t\t\tif (rendered === NodeRenderDirective.Omit) {\n\t\t\t\tthis.omittedNodes.add(node);\n\t\t\t} else if (rendered === NodeRenderDirective.Concat) {\n\t\t\t\tthis.omittedNodes.add(node);\n\t\t\t\tif ('children' in node) {\n\t\t\t\t\tfor (const nested of this.renderNodeList(renderNode, node.children)) {\n\t\t\t\t\t\tyield nested;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.omittedNodes.delete(node);\n\t\t\t\tyield rendered;\n\t\t\t}\n\t\t}\n\t}\n}\n"]}