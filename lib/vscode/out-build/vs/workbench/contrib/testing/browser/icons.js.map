{"version":3,"sources":["vs/workbench/contrib/testing/browser/icons.ts"],"names":[],"mappings":"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","file":"icons.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Codicon } from 'vs/base/common/codicons';\nimport { localize } from 'vs/nls';\nimport { registerIcon } from 'vs/platform/theme/common/iconRegistry';\nimport { registerThemingParticipant, ThemeIcon } from 'vs/platform/theme/common/themeService';\nimport { TestResultState } from 'vs/workbench/api/common/extHostTypes';\nimport { testingColorRunAction, testStatesToIconColors } from 'vs/workbench/contrib/testing/browser/theme';\n\nexport const testingViewIcon = registerIcon('test-view-icon', Codicon.beaker, localize('testViewIcon', 'View icon of the test view.'));\nexport const testingRunIcon = registerIcon('testing-run-icon', Codicon.run, localize('testingRunIcon', 'Icon of the \"run test\" action.'));\nexport const testingRunAllIcon = registerIcon('testing-run-all-icon', Codicon.runAll, localize('testingRunAllIcon', 'Icon of the \"run all tests\" action.'));\nexport const testingDebugIcon = registerIcon('testing-debug-icon', Codicon.debugAlt, localize('testingDebugIcon', 'Icon of the \"debug test\" action.'));\nexport const testingCancelIcon = registerIcon('testing-cancel-icon', Codicon.close, localize('testingCancelIcon', 'Icon to cancel ongoing test runs.'));\nexport const testingFilterIcon = registerIcon('testing-filter', Codicon.filter, localize('filterIcon', 'Icon for the \\'Filter\\' action in the testing view.'));\nexport const testingAutorunIcon = registerIcon('testing-autorun', Codicon.debugRerun, localize('autoRunIcon', 'Icon for the \\'Autorun\\' toggle in the testing view.'));\nexport const testingHiddenIcon = registerIcon('testing-hidden', Codicon.eyeClosed, localize('hiddenIcon', 'Icon shown beside hidden tests, when they\\'ve been shown.'));\n\nexport const testingShowAsList = registerIcon('testing-show-as-list-icon', Codicon.listTree, localize('testingShowAsList', 'Icon shown when the test explorer is disabled as a tree.'));\nexport const testingShowAsTree = registerIcon('testing-show-as-list-icon', Codicon.listFlat, localize('testingShowAsTree', 'Icon shown when the test explorer is disabled as a list.'));\n\nexport const testingStatesToIcons = new Map<TestResultState, ThemeIcon>([\n\t[TestResultState.Errored, registerIcon('testing-error-icon', Codicon.issues, localize('testingErrorIcon', 'Icon shown for tests that have an error.'))],\n\t[TestResultState.Failed, registerIcon('testing-failed-icon', Codicon.error, localize('testingFailedIcon', 'Icon shown for tests that failed.'))],\n\t[TestResultState.Passed, registerIcon('testing-passed-icon', Codicon.pass, localize('testingPassedIcon', 'Icon shown for tests that passed.'))],\n\t[TestResultState.Queued, registerIcon('testing-queued-icon', Codicon.history, localize('testingQueuedIcon', 'Icon shown for tests that are queued.'))],\n\t[TestResultState.Running, ThemeIcon.modify(Codicon.loading, 'spin')],\n\t[TestResultState.Skipped, registerIcon('testing-skipped-icon', Codicon.debugStepOver, localize('testingSkippedIcon', 'Icon shown for tests that are skipped.'))],\n\t[TestResultState.Unset, registerIcon('testing-unset-icon', Codicon.circleOutline, localize('testingUnsetIcon', 'Icon shown for tests that are in an unset state.'))],\n]);\n\nregisterThemingParticipant((theme, collector) => {\n\tfor (const [state, icon] of testingStatesToIcons.entries()) {\n\t\tconst color = testStatesToIconColors[state];\n\t\tif (!color) {\n\t\t\tcontinue;\n\t\t}\n\t\tcollector.addRule(`.monaco-workbench ${ThemeIcon.asCSSSelector(icon)} {\n\t\t\tcolor: ${theme.getColor(color)} !important;\n\t\t}`);\n\t}\n\n\tcollector.addRule(`\n\t\t.monaco-editor ${ThemeIcon.asCSSSelector(testingRunIcon)},\n\t\t.monaco-editor ${ThemeIcon.asCSSSelector(testingRunAllIcon)} {\n\t\t\tcolor: ${theme.getColor(testingColorRunAction)};\n\t\t}\n\t`);\n});\n"]}