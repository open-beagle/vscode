{"version":3,"file":"index.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/testing/browser/explorerProjections/index.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAyGhG,IAAI,SAAS,GAAG,CAAC,CAAC;IAElB,MAAM,KAAK,GAAG,GAAG,EAAE,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC;IAExC,MAAa,uBAAuB;QA+CnC,YAA4B,MAAwB;YAAxB,WAAM,GAAN,MAAM,CAAkB;YA9CpD;;eAEG;YACa,WAAM,GAAG,IAAI,CAAC;YAE9B;;eAEG;YACa,aAAQ,GAAG,IAAI,GAAG,EAAuB,CAAC;YAE1D;;eAEG;YACa,WAAM,GAAG,KAAK,EAAE,CAAC;YAEjC;;eAEG;YACa,UAAK,GAAG,CAAC,CAAC;YAgB1B;;eAEG;YACI,UAAK,GAAG,8BAAe,CAAC,KAAK,CAAC;QASmB,CAAC;QA1BzD;;WAEG;QACH,IAAW,QAAQ;YAClB,OAAO,mBAAQ,CAAC,YAAY,CAAC,mBAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC5E,CAAC;QAED;;WAEG;QACH,IAAW,UAAU;YACpB,OAAO,mBAAQ,CAAC,YAAY,CAAC,mBAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;QAC9E,CAAC;QAOD;;WAEG;QACH,IAAW,KAAK;YACf,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;QACzB,CAAC;KAGD;IAhDD,0DAgDC;IAED,MAAa,mBAAmB;QAmE/B,YACiB,IAAsB,EACtB,MAAqD;YADrD,SAAI,GAAJ,IAAI,CAAkB;YACtB,WAAM,GAAN,MAAM,CAA+C;YApEtE;;eAEG;YACa,aAAQ,GAAG,IAAI,GAAG,EAA2B,CAAC;YAE9D;;eAEG;YACa,WAAM,GAAG,KAAK,EAAE,CAAC;YAEjC;;eAEG;YACI,UAAK,GAAW,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC;YA+B7C;;eAEG;YACI,YAAO,GAAG,KAAK,CAAC;YAEvB;;eAEG;YACI,UAAK,GAAG,8BAAe,CAAC,KAAK,CAAC;YAErC;;eAEG;YACI,aAAQ,GAAG,8BAAe,CAAC,KAAK,CAAC;QAYpC,CAAC;QAtDL;;WAEG;QACH,IAAW,MAAM;YAChB,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;QAC3B,CAAC;QAED;;WAEG;QACH,IAAW,QAAQ;YAClB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ;gBAC7B,CAAC,CAAC,mBAAQ,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;gBACvE,CAAC,CAAC,mBAAQ,CAAC,KAAK,EAAE,CAAC;QACrB,CAAC;QAED;;WAEG;QACH,IAAW,UAAU;YACpB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU;gBAC/B,CAAC,CAAC,mBAAQ,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;gBACvE,CAAC,CAAC,mBAAQ,CAAC,KAAK,EAAE,CAAC;QACrB,CAAC;QAED,IAAW,WAAW;YACrB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC;QACnC,CAAC;QAiBD;;WAEG;QACH,IAAW,KAAK;YACf,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;QAC7B,CAAC;KAMD;IAvED,kDAuEC;IAED,MAAa,oBAAoB;QAQhC,YACiB,OAAiC,EACjC,MAA+B;YAD/B,YAAO,GAAP,OAAO,CAA0B;YACjC,WAAM,GAAN,MAAM,CAAyB;YAThC,WAAM,GAAG,KAAK,EAAE,CAAC;YACjB,aAAQ,GAAG,IAAI,GAAG,EAAS,CAAC;QASxC,CAAC;QAPL,IAAW,WAAW;YACrB,OAAO,OAAO,IAAI,CAAC,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;QAC7E,CAAC;KAMD;IAZD,oDAYC;IAEM,MAAM,2BAA2B,GAAG,CAAC,CAAU,EAAwD,EAAE,CAC/G,CAAC,YAAY,mBAAmB,IAAI,CAAC,YAAY,uBAAuB,CAAC;IAD7D,QAAA,2BAA2B,+BACkC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ObjectTree } from 'vs/base/browser/ui/tree/objectTree';\nimport { Event } from 'vs/base/common/event';\nimport { FuzzyScore } from 'vs/base/common/filters';\nimport { IMarkdownString } from 'vs/base/common/htmlContent';\nimport { Iterable } from 'vs/base/common/iterator';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { Position } from 'vs/editor/common/core/position';\nimport { IWorkspaceFolder } from 'vs/platform/workspace/common/workspace';\nimport { TestResultState } from 'vs/workbench/api/common/extHostTypes';\nimport { InternalTestItem, TestIdWithSrc } from 'vs/workbench/contrib/testing/common/testCollection';\n\n/**\n * Describes a rendering of tests in the explorer view. Different\n * implementations of this are used for trees and lists, and groupings.\n * Originally this was implemented as inline logic within the ViewModel and\n * using a single IncrementalTestChangeCollector, but this became hairy\n * with status projections.\n */\nexport interface ITestTreeProjection extends IDisposable {\n\t/**\n\t * Event that fires when the projection changes.\n\t */\n\tonUpdate: Event<void>;\n\n\t/**\n\t * Fired when an element in the tree is expanded.\n\t */\n\texpandElement(element: TestItemTreeElement, depth: number): void;\n\n\t/**\n\t * Gets an element by its extension-assigned ID.\n\t */\n\tgetElementByTestId(testId: string): TestItemTreeElement | undefined;\n\n\t/**\n\t * Gets the test at the given position in th editor. Should be fast,\n\t * since it is called on each cursor move.\n\t */\n\tgetTestAtPosition(uri: URI, position: Position): TestItemTreeElement | undefined;\n\n\t/**\n\t * Gets whether any test is defined in the given URI.\n\t */\n\thasTestInDocument(uri: URI): boolean;\n\n\t/**\n\t * Applies pending update to the tree.\n\t */\n\tapplyTo(tree: ObjectTree<TestExplorerTreeElement, FuzzyScore>): void;\n}\n\n/**\n * Interface describing the workspace folder and test item tree elements.\n */\nexport interface IActionableTestTreeElement {\n\t/**\n\t * Parent tree item.\n\t */\n\tparent: IActionableTestTreeElement | null;\n\n\t/**\n\t * Unique ID of the element in the tree.\n\t */\n\ttreeId: string;\n\n\t/**\n\t * Test children of this item.\n\t */\n\tchildren: Set<TestExplorerTreeElement>;\n\n\t/**\n\t * Depth of the element in the tree.\n\t */\n\tdepth: number;\n\n\t/**\n\t * Folder associated with this element.\n\t */\n\tfolder: IWorkspaceFolder;\n\n\t/**\n\t * Tests to debug when the 'debug' context action is taken on this item.\n\t */\n\tdebuggable: Iterable<TestIdWithSrc>;\n\n\t/**\n\t * Tests to run when the 'debug' context action is taken on this item.\n\t */\n\trunnable: Iterable<TestIdWithSrc>;\n\n\t/**\n\t * State to show on the item. This is generally the item's computed state\n\t * from its children.\n\t */\n\tstate: TestResultState;\n\n\t/**\n\t * Label for the item.\n\t */\n\tlabel: string;\n}\n\nlet idCounter = 0;\n\nconst getId = () => String(idCounter++);\n\nexport class TestTreeWorkspaceFolder implements IActionableTestTreeElement {\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly parent = null;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly children = new Set<TestItemTreeElement>();\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly treeId = getId();\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly depth = 0;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic get runnable() {\n\t\treturn Iterable.concatNested(Iterable.map(this.children, c => c.runnable));\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic get debuggable() {\n\t\treturn Iterable.concatNested(Iterable.map(this.children, c => c.debuggable));\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic state = TestResultState.Unset;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic get label() {\n\t\treturn this.folder.name;\n\t}\n\n\tconstructor(public readonly folder: IWorkspaceFolder) { }\n}\n\nexport class TestItemTreeElement implements IActionableTestTreeElement {\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly children = new Set<TestExplorerTreeElement>();\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly treeId = getId();\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic depth: number = this.parent.depth + 1;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic get folder(): IWorkspaceFolder {\n\t\treturn this.parent.folder;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic get runnable() {\n\t\treturn this.test.item.runnable\n\t\t\t? Iterable.single({ testId: this.test.item.extId, src: this.test.src })\n\t\t\t: Iterable.empty();\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic get debuggable() {\n\t\treturn this.test.item.debuggable\n\t\t\t? Iterable.single({ testId: this.test.item.extId, src: this.test.src })\n\t\t\t: Iterable.empty();\n\t}\n\n\tpublic get description() {\n\t\treturn this.test.item.description;\n\t}\n\n\t/**\n\t * Whether the node's test result is 'retired' -- from an outdated test run.\n\t */\n\tpublic retired = false;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic state = TestResultState.Unset;\n\n\t/**\n\t * Own, non-computed state.\n\t */\n\tpublic ownState = TestResultState.Unset;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic get label() {\n\t\treturn this.test.item.label;\n\t}\n\n\tconstructor(\n\t\tpublic readonly test: InternalTestItem,\n\t\tpublic readonly parent: TestItemTreeElement | TestTreeWorkspaceFolder,\n\t) { }\n}\n\nexport class TestTreeErrorMessage {\n\tpublic readonly treeId = getId();\n\tpublic readonly children = new Set<never>();\n\n\tpublic get description() {\n\t\treturn typeof this.message === 'string' ? this.message : this.message.value;\n\t}\n\n\tconstructor(\n\t\tpublic readonly message: string | IMarkdownString,\n\t\tpublic readonly parent: TestExplorerTreeElement,\n\t) { }\n}\n\nexport const isActionableTestTreeElement = (t: unknown): t is (TestItemTreeElement | TestTreeWorkspaceFolder) =>\n\tt instanceof TestItemTreeElement || t instanceof TestTreeWorkspaceFolder;\n\nexport type TestExplorerTreeElement = TestItemTreeElement | TestTreeWorkspaceFolder | TestTreeErrorMessage;\n"]}