{"version":3,"sources":["vs/workbench/contrib/testing/browser/testing.contribution.ts"],"names":[],"mappings":"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","file":"testing.contribution.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { registerEditorContribution } from 'vs/editor/browser/editorExtensions';\nimport { localize } from 'vs/nls';\nimport { registerAction2 } from 'vs/platform/actions/common/actions';\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { Extensions as ConfigurationExtensions, IConfigurationRegistry } from 'vs/platform/configuration/common/configurationRegistry';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { Extensions as WorkbenchExtensions, IWorkbenchContributionsRegistry } from 'vs/workbench/common/contributions';\nimport { Extensions as ViewContainerExtensions, IViewContainersRegistry, IViewsRegistry, IViewsService, ViewContainerLocation } from 'vs/workbench/common/views';\nimport { testingViewIcon } from 'vs/workbench/contrib/testing/browser/icons';\nimport { TestingDecorations } from 'vs/workbench/contrib/testing/browser/testingDecorations';\nimport { ITestExplorerFilterState, TestExplorerFilterState } from 'vs/workbench/contrib/testing/browser/testingExplorerFilter';\nimport { TestingExplorerView } from 'vs/workbench/contrib/testing/browser/testingExplorerView';\nimport { CloseTestPeek, ITestingPeekOpener, TestingOutputPeekController, TestingPeekOpener } from 'vs/workbench/contrib/testing/browser/testingOutputPeek';\nimport { ITestingOutputTerminalService, TestingOutputTerminalService } from 'vs/workbench/contrib/testing/browser/testingOutputTerminalService';\nimport { ITestingProgressUiService, TestingProgressUiService } from 'vs/workbench/contrib/testing/browser/testingProgressUiService';\nimport { TestingViewPaneContainer } from 'vs/workbench/contrib/testing/browser/testingViewPaneContainer';\nimport { testingConfiguation } from 'vs/workbench/contrib/testing/common/configuration';\nimport { Testing } from 'vs/workbench/contrib/testing/common/constants';\nimport { TestIdPath, TestIdWithSrc } from 'vs/workbench/contrib/testing/common/testCollection';\nimport { ITestingAutoRun, TestingAutoRun } from 'vs/workbench/contrib/testing/common/testingAutoRun';\nimport { TestingContentProvider } from 'vs/workbench/contrib/testing/common/testingContentProvider';\nimport { TestingContextKeys } from 'vs/workbench/contrib/testing/common/testingContextKeys';\nimport { ITestResultService, TestResultService } from 'vs/workbench/contrib/testing/common/testResultService';\nimport { ITestResultStorage, TestResultStorage } from 'vs/workbench/contrib/testing/common/testResultStorage';\nimport { ITestService } from 'vs/workbench/contrib/testing/common/testService';\nimport { TestService } from 'vs/workbench/contrib/testing/common/testServiceImpl';\nimport { IWorkspaceTestCollectionService, WorkspaceTestCollectionService } from 'vs/workbench/contrib/testing/common/workspaceTestCollectionService';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport * as Action from './testExplorerActions';\n\nregisterSingleton(ITestService, TestService);\nregisterSingleton(ITestResultStorage, TestResultStorage);\nregisterSingleton(ITestResultService, TestResultService);\nregisterSingleton(ITestExplorerFilterState, TestExplorerFilterState);\nregisterSingleton(ITestingAutoRun, TestingAutoRun, true);\nregisterSingleton(ITestingOutputTerminalService, TestingOutputTerminalService, true);\nregisterSingleton(ITestingPeekOpener, TestingPeekOpener);\nregisterSingleton(ITestingProgressUiService, TestingProgressUiService);\nregisterSingleton(IWorkspaceTestCollectionService, WorkspaceTestCollectionService);\n\nconst viewContainer = Registry.as<IViewContainersRegistry>(ViewContainerExtensions.ViewContainersRegistry).registerViewContainer({\n\tid: Testing.ViewletId,\n\ttitle: localize('test', \"Testing\"),\n\tctorDescriptor: new SyncDescriptor(TestingViewPaneContainer),\n\ticon: testingViewIcon,\n\talwaysUseContainerInfo: true,\n\torder: 6,\n\thideIfEmpty: true,\n}, ViewContainerLocation.Sidebar);\n\nconst viewsRegistry = Registry.as<IViewsRegistry>(ViewContainerExtensions.ViewsRegistry);\n\nviewsRegistry.registerViewWelcomeContent(Testing.ExplorerViewId, {\n\tcontent: localize('noTestProvidersRegistered', \"No tests have been found in this workspace yet.\"),\n});\n\nviewsRegistry.registerViewWelcomeContent(Testing.ExplorerViewId, {\n\tcontent: localize(\n\t\t{\n\t\t\tkey: 'searchMarketplaceForTestExtensions',\n\t\t\tcomment: ['Please do not translate the word \"commmand\", it is part of our internal syntax which must not change'],\n\t\t},\n\t\t\"[Find Test Extensions](command:{0})\",\n\t\t'testing.searchForTestExtension'\n\t),\n\torder: 10\n});\n\nviewsRegistry.registerViews([{\n\tid: Testing.ExplorerViewId,\n\tname: localize('testExplorer', \"Test Explorer\"),\n\tctorDescriptor: new SyncDescriptor(TestingExplorerView),\n\tcanToggleVisibility: true,\n\tworkspace: true,\n\tcanMoveView: true,\n\tweight: 80,\n\torder: -999,\n\tcontainerIcon: testingViewIcon,\n\t// temporary until release, at which point we can show the welcome view:\n\twhen: ContextKeyExpr.greater(TestingContextKeys.providerCount.key, 0),\n}], viewContainer);\n\nregisterAction2(Action.AutoRunOffAction);\nregisterAction2(Action.AutoRunOnAction);\nregisterAction2(Action.CancelTestRunAction);\nregisterAction2(Action.ClearTestResultsAction);\nregisterAction2(Action.CollapseAllAction);\nregisterAction2(Action.DebugAllAction);\nregisterAction2(Action.DebugAtCursor);\nregisterAction2(Action.DebugCurrentFile);\nregisterAction2(Action.DebugFailedTests);\nregisterAction2(Action.DebugLastRun);\nregisterAction2(Action.DebugSelectedAction);\nregisterAction2(Action.EditFocusedTest);\nregisterAction2(Action.RefreshTestsAction);\nregisterAction2(Action.ReRunFailedTests);\nregisterAction2(Action.ReRunLastRun);\nregisterAction2(Action.RunAllAction);\nregisterAction2(Action.RunAtCursor);\nregisterAction2(Action.RunCurrentFile);\nregisterAction2(Action.RunSelectedAction);\nregisterAction2(Action.SearchForTestExtension);\nregisterAction2(Action.ShowMostRecentOutputAction);\nregisterAction2(Action.TestingSortByLocationAction);\nregisterAction2(Action.TestingSortByNameAction);\nregisterAction2(Action.TestingViewAsListAction);\nregisterAction2(Action.TestingViewAsTreeAction);\nregisterAction2(CloseTestPeek);\n\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(TestingContentProvider, LifecyclePhase.Restored);\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(TestingPeekOpener, LifecyclePhase.Eventually);\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(TestingProgressUiService, LifecyclePhase.Eventually);\n\nregisterEditorContribution(Testing.OutputPeekContributionId, TestingOutputPeekController);\nregisterEditorContribution(Testing.DecorationsContributionId, TestingDecorations);\n\nCommandsRegistry.registerCommand({\n\tid: 'vscode.runTests',\n\thandler: async (accessor: ServicesAccessor, tests: TestIdWithSrc[]) => {\n\t\tconst testService = accessor.get(ITestService);\n\t\ttestService.runTests({ debug: false, tests: tests.filter(t => t.src && t.testId) });\n\t}\n});\n\nCommandsRegistry.registerCommand({\n\tid: 'vscode.debugTests',\n\thandler: async (accessor: ServicesAccessor, tests: TestIdWithSrc[]) => {\n\t\tconst testService = accessor.get(ITestService);\n\t\ttestService.runTests({ debug: true, tests: tests.filter(t => t.src && t.testId) });\n\t}\n});\n\nCommandsRegistry.registerCommand({\n\tid: 'vscode.revealTestInExplorer',\n\thandler: async (accessor: ServicesAccessor, pathToTest: TestIdPath) => {\n\t\taccessor.get(ITestExplorerFilterState).reveal.value = pathToTest;\n\t\taccessor.get(IViewsService).openView(Testing.ExplorerViewId);\n\t}\n});\n\nCommandsRegistry.registerCommand({\n\tid: 'vscode.peekTestError',\n\thandler: async (accessor: ServicesAccessor, extId: string) => {\n\t\tconst lookup = accessor.get(ITestResultService).getStateById(extId);\n\t\tif (lookup) {\n\t\t\taccessor.get(ITestingPeekOpener).tryPeekFirstError(lookup[0], lookup[1]);\n\t\t}\n\t}\n});\n\nRegistry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration).registerConfiguration(testingConfiguation);\n"]}