{"version":3,"sources":["vs/workbench/contrib/testing/browser/testExplorerActions.ts"],"names":[],"mappings":"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","file":"testExplorerActions.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Action } from 'vs/base/common/actions';\nimport { flatten } from 'vs/base/common/arrays';\nimport { Codicon } from 'vs/base/common/codicons';\nimport { Iterable } from 'vs/base/common/iterator';\nimport { KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport { isDefined } from 'vs/base/common/types';\nimport { isCodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { Range } from 'vs/editor/common/core/range';\nimport { localize } from 'vs/nls';\nimport { Action2, MenuId } from 'vs/platform/actions/common/actions';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { ContextKeyAndExpr, ContextKeyEqualsExpr, ContextKeyFalseExpr, ContextKeyTrueExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { IProgressService, ProgressLocation } from 'vs/platform/progress/common/progress';\nimport { ThemeIcon } from 'vs/platform/theme/common/themeService';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { ExtHostTestingResource } from 'vs/workbench/api/common/extHost.protocol';\nimport { ViewAction } from 'vs/workbench/browser/parts/views/viewPane';\nimport { FocusedViewContext } from 'vs/workbench/common/views';\nimport { IExtensionsViewPaneContainer, VIEWLET_ID as EXTENSIONS_VIEWLET_ID } from 'vs/workbench/contrib/extensions/common/extensions';\nimport { REVEAL_IN_EXPLORER_COMMAND_ID } from 'vs/workbench/contrib/files/browser/fileCommands';\nimport { TestItemTreeElement } from 'vs/workbench/contrib/testing/browser/explorerProjections/index';\nimport * as icons from 'vs/workbench/contrib/testing/browser/icons';\nimport { ITestExplorerFilterState } from 'vs/workbench/contrib/testing/browser/testingExplorerFilter';\nimport { TestingExplorerView, TestingExplorerViewModel } from 'vs/workbench/contrib/testing/browser/testingExplorerView';\nimport { TestingOutputPeekController } from 'vs/workbench/contrib/testing/browser/testingOutputPeek';\nimport { ITestingOutputTerminalService } from 'vs/workbench/contrib/testing/browser/testingOutputTerminalService';\nimport { TestExplorerViewMode, TestExplorerViewSorting, Testing } from 'vs/workbench/contrib/testing/common/constants';\nimport { InternalTestItem, ITestItem, TestIdPath, TestIdWithSrc } from 'vs/workbench/contrib/testing/common/testCollection';\nimport { ITestingAutoRun } from 'vs/workbench/contrib/testing/common/testingAutoRun';\nimport { TestingContextKeys } from 'vs/workbench/contrib/testing/common/testingContextKeys';\nimport { isFailedState } from 'vs/workbench/contrib/testing/common/testingStates';\nimport { getPathForTestInResult, ITestResult } from 'vs/workbench/contrib/testing/common/testResult';\nimport { ITestResultService } from 'vs/workbench/contrib/testing/common/testResultService';\nimport { getAllTestsInHierarchy, getTestByPath, ITestService, waitForAllRoots } from 'vs/workbench/contrib/testing/common/testService';\nimport { IWorkspaceTestCollectionService } from 'vs/workbench/contrib/testing/common/workspaceTestCollectionService';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IViewletService } from 'vs/workbench/services/viewlet/browser/viewlet';\n\nconst category = localize('testing.category', 'Test');\n\nconst enum ActionOrder {\n\t// Navigation:\n\tRun = 10,\n\tDebug,\n\tAutoRun,\n\tCollapse,\n\n\t// Submenu:\n\tDisplayMode,\n\tSort,\n\tRefresh,\n}\n\nexport class HideOrShowTestAction extends Action {\n\tconstructor(\n\t\tprivate readonly testId: string,\n\t\t@ITestService private readonly testService: ITestService,\n\t) {\n\t\tsuper(\n\t\t\t'testing.hideOrShowTest',\n\t\t\ttestService.excludeTests.value.has(testId) ? localize('unhideTest', 'Unhide Test') : localize('hideTest', 'Hide Test'),\n\t\t);\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic override run() {\n\t\tthis.testService.setTestExcluded(this.testId);\n\t\treturn Promise.resolve();\n\t}\n}\n\nexport class DebugAction extends Action {\n\tconstructor(\n\t\tprivate readonly tests: Iterable<TestIdWithSrc>,\n\t\tisRunning: boolean,\n\t\t@ITestService private readonly testService: ITestService\n\t) {\n\t\tsuper(\n\t\t\t'testing.run',\n\t\t\tlocalize('debug test', 'Debug Test'),\n\t\t\t'test-action ' + ThemeIcon.asClassName(icons.testingDebugIcon),\n\t\t\t/* enabled= */ !isRunning\n\t\t);\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic override run(): Promise<any> {\n\t\treturn this.testService.runTests({\n\t\t\ttests: [...this.tests],\n\t\t\tdebug: true,\n\t\t});\n\t}\n}\n\nexport class RunAction extends Action {\n\tconstructor(\n\t\tprivate readonly tests: Iterable<TestIdWithSrc>,\n\t\tisRunning: boolean,\n\t\t@ITestService private readonly testService: ITestService\n\t) {\n\t\tsuper(\n\t\t\t'testing.run',\n\t\t\tlocalize('run test', 'Run Test'),\n\t\t\t'test-action ' + ThemeIcon.asClassName(icons.testingRunIcon),\n\t\t\t/* enabled= */ !isRunning,\n\t\t);\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic override run(): Promise<any> {\n\t\treturn this.testService.runTests({\n\t\t\ttests: [...this.tests],\n\t\t\tdebug: false,\n\t\t});\n\t}\n}\n\nabstract class RunOrDebugSelectedAction extends ViewAction<TestingExplorerView> {\n\tconstructor(id: string, title: string, icon: ThemeIcon, private readonly debug: boolean) {\n\t\tsuper({\n\t\t\tid,\n\t\t\ttitle,\n\t\t\ticon,\n\t\t\tviewId: Testing.ExplorerViewId,\n\t\t\tf1: true,\n\t\t\tcategory,\n\t\t\tprecondition: FocusedViewContext.isEqualTo(Testing.ExplorerViewId),\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic runInView(accessor: ServicesAccessor, view: TestingExplorerView): Promise<ITestResult | undefined> {\n\t\tconst tests = this.getActionableTests(accessor.get(IWorkspaceTestCollectionService), view.viewModel);\n\t\tif (!tests.length) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\treturn accessor.get(ITestService).runTests({ tests, debug: this.debug });\n\t}\n\n\tprivate getActionableTests(testCollection: IWorkspaceTestCollectionService, viewModel: TestingExplorerViewModel) {\n\t\tconst selected = viewModel.getSelectedTests();\n\t\tconst tests: TestIdWithSrc[] = [];\n\t\tif (!selected.length) {\n\t\t\tfor (const folder of testCollection.workspaceFolders()) {\n\t\t\t\tfor (const child of folder.getChildren()) {\n\t\t\t\t\tif (this.filter(child)) {\n\t\t\t\t\t\ttests.push({ testId: child.item.extId, src: child.src });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (const treeElement of selected) {\n\t\t\t\tif (treeElement instanceof TestItemTreeElement && this.filter(treeElement.test)) {\n\t\t\t\t\ttests.push({ testId: treeElement.test.item.extId, src: treeElement.test.src });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn tests;\n\t}\n\n\tprotected abstract filter(item: InternalTestItem): boolean;\n}\n\nexport class RunSelectedAction extends RunOrDebugSelectedAction {\n\tconstructor(\n\t) {\n\t\tsuper(\n\t\t\t'testing.runSelected',\n\t\t\tlocalize('runSelectedTests', 'Run Selected Tests'),\n\t\t\ticons.testingRunIcon,\n\t\t\tfalse,\n\t\t);\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic filter({ item }: InternalTestItem) {\n\t\treturn item.runnable;\n\t}\n}\n\nexport class DebugSelectedAction extends RunOrDebugSelectedAction {\n\tconstructor() {\n\t\tsuper(\n\t\t\t'testing.debugSelected',\n\t\t\tlocalize('debugSelectedTests', 'Debug Selected Tests'),\n\t\t\ticons.testingDebugIcon,\n\t\t\ttrue,\n\t\t);\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic filter({ item }: InternalTestItem) {\n\t\treturn item.debuggable;\n\t}\n}\n\nconst showDiscoveringWhile = <R>(progress: IProgressService, task: Promise<R>): Promise<R> => {\n\treturn progress.withProgress(\n\t\t{\n\t\t\tlocation: ProgressLocation.Window,\n\t\t\ttitle: localize('discoveringTests', 'Discovering Tests'),\n\t\t},\n\t\t() => task,\n\t);\n};\n\nabstract class RunOrDebugAllAllAction extends Action2 {\n\tconstructor(id: string, title: string, icon: ThemeIcon, private readonly debug: boolean, private noTestsFoundError: string) {\n\t\tsuper({\n\t\t\tid,\n\t\t\ttitle,\n\t\t\ticon,\n\t\t\tf1: true,\n\t\t\tcategory,\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\torder: debug ? ActionOrder.Debug : ActionOrder.Run,\n\t\t\t\tgroup: 'navigation',\n\t\t\t\twhen: ContextKeyAndExpr.create([\n\t\t\t\t\tContextKeyEqualsExpr.create('view', Testing.ExplorerViewId),\n\t\t\t\t\tTestingContextKeys.isRunning.isEqualTo(false),\n\t\t\t\t\tdebug\n\t\t\t\t\t\t? TestingContextKeys.hasDebuggableTests.isEqualTo(true)\n\t\t\t\t\t\t: TestingContextKeys.hasRunnableTests.isEqualTo(true),\n\t\t\t\t])\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor) {\n\t\tconst testService = accessor.get(ITestService);\n\t\tconst workspace = accessor.get(IWorkspaceContextService);\n\t\tconst notifications = accessor.get(INotificationService);\n\t\tconst progress = accessor.get(IProgressService);\n\n\t\tconst tests: TestIdWithSrc[] = [];\n\t\tconst todo = workspace.getWorkspace().folders.map(async (folder) => {\n\t\t\tconst ref = testService.subscribeToDiffs(ExtHostTestingResource.Workspace, folder.uri);\n\t\t\ttry {\n\t\t\t\tawait waitForAllRoots(ref.object);\n\t\t\t\tfor (const root of ref.object.rootIds) {\n\t\t\t\t\tconst node = ref.object.getNodeById(root);\n\t\t\t\t\tif (node && (this.debug ? node.item.debuggable : node.item.runnable)) {\n\t\t\t\t\t\ttests.push({ testId: node.item.extId, src: node.src });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tref.dispose();\n\t\t\t}\n\t\t});\n\n\t\tawait showDiscoveringWhile(progress, Promise.all(todo));\n\n\t\tif (tests.length === 0) {\n\t\t\tnotifications.info(this.noTestsFoundError);\n\t\t\treturn;\n\t\t}\n\n\t\tawait testService.runTests({ tests, debug: this.debug });\n\t}\n}\n\nexport class RunAllAction extends RunOrDebugAllAllAction {\n\tconstructor() {\n\t\tsuper(\n\t\t\t'testing.runAll',\n\t\t\tlocalize('runAllTests', 'Run All Tests'),\n\t\t\ticons.testingRunAllIcon,\n\t\t\tfalse,\n\t\t\tlocalize('noTestProvider', 'No tests found in this workspace. You may need to install a test provider extension'),\n\t\t);\n\t}\n}\n\nexport class DebugAllAction extends RunOrDebugAllAllAction {\n\tconstructor() {\n\t\tsuper(\n\t\t\t'testing.debugAll',\n\t\t\tlocalize('debugAllTests', 'Debug All Tests'),\n\t\t\ticons.testingDebugIcon,\n\t\t\ttrue,\n\t\t\tlocalize('noDebugTestProvider', 'No debuggable tests found in this workspace. You may need to install a test provider extension'),\n\t\t);\n\t}\n}\n\nexport class CancelTestRunAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'testing.cancelRun',\n\t\t\ttitle: localize('testing.cancelRun', \"Cancel Test Run\"),\n\t\t\ticon: icons.testingCancelIcon,\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\torder: ActionOrder.Run,\n\t\t\t\tgroup: 'navigation',\n\t\t\t\twhen: ContextKeyAndExpr.create([\n\t\t\t\t\tContextKeyEqualsExpr.create('view', Testing.ExplorerViewId),\n\t\t\t\t\tContextKeyEqualsExpr.create(TestingContextKeys.isRunning.serialize(), true),\n\t\t\t\t])\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic async run(accessor: ServicesAccessor) {\n\t\tconst testService = accessor.get(ITestService);\n\t\tfor (const run of testService.testRuns) {\n\t\t\ttestService.cancelTestRun(run);\n\t\t}\n\t}\n}\n\nexport class TestingViewAsListAction extends ViewAction<TestingExplorerView> {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'testing.viewAsList',\n\t\t\tviewId: Testing.ExplorerViewId,\n\t\t\ttitle: localize('testing.viewAsList', \"View as List\"),\n\t\t\tf1: false,\n\t\t\ttoggled: TestingContextKeys.viewMode.isEqualTo(TestExplorerViewMode.List),\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\torder: ActionOrder.DisplayMode,\n\t\t\t\tgroup: 'viewAs',\n\t\t\t\twhen: ContextKeyEqualsExpr.create('view', Testing.ExplorerViewId)\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic runInView(_accessor: ServicesAccessor, view: TestingExplorerView) {\n\t\tview.viewModel.viewMode = TestExplorerViewMode.List;\n\t}\n}\n\nexport class TestingViewAsTreeAction extends ViewAction<TestingExplorerView> {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'testing.viewAsTree',\n\t\t\tviewId: Testing.ExplorerViewId,\n\t\t\ttitle: localize('testing.viewAsTree', \"View as Tree\"),\n\t\t\tf1: false,\n\t\t\ttoggled: TestingContextKeys.viewMode.isEqualTo(TestExplorerViewMode.Tree),\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\torder: ActionOrder.DisplayMode,\n\t\t\t\tgroup: 'viewAs',\n\t\t\t\twhen: ContextKeyEqualsExpr.create('view', Testing.ExplorerViewId)\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic runInView(_accessor: ServicesAccessor, view: TestingExplorerView) {\n\t\tview.viewModel.viewMode = TestExplorerViewMode.Tree;\n\t}\n}\n\n\nexport class TestingSortByNameAction extends ViewAction<TestingExplorerView> {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'testing.sortByName',\n\t\t\tviewId: Testing.ExplorerViewId,\n\t\t\ttitle: localize('testing.sortByName', \"Sort by Name\"),\n\t\t\tf1: false,\n\t\t\ttoggled: TestingContextKeys.viewSorting.isEqualTo(TestExplorerViewSorting.ByName),\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\torder: ActionOrder.Sort,\n\t\t\t\tgroup: 'sortBy',\n\t\t\t\twhen: ContextKeyEqualsExpr.create('view', Testing.ExplorerViewId)\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic runInView(_accessor: ServicesAccessor, view: TestingExplorerView) {\n\t\tview.viewModel.viewSorting = TestExplorerViewSorting.ByName;\n\t}\n}\n\nexport class TestingSortByLocationAction extends ViewAction<TestingExplorerView> {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'testing.sortByLocation',\n\t\t\tviewId: Testing.ExplorerViewId,\n\t\t\ttitle: localize('testing.sortByLocation', \"Sort by Location\"),\n\t\t\tf1: false,\n\t\t\ttoggled: TestingContextKeys.viewSorting.isEqualTo(TestExplorerViewSorting.ByLocation),\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\torder: ActionOrder.Sort,\n\t\t\t\tgroup: 'sortBy',\n\t\t\t\twhen: ContextKeyEqualsExpr.create('view', Testing.ExplorerViewId)\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic runInView(_accessor: ServicesAccessor, view: TestingExplorerView) {\n\t\tview.viewModel.viewSorting = TestExplorerViewSorting.ByLocation;\n\t}\n}\n\nexport class ShowMostRecentOutputAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'testing.showMostRecentOutput',\n\t\t\ttitle: localize('testing.showMostRecentOutput', \"Show Output\"),\n\t\t\tf1: true,\n\t\t\tcategory,\n\t\t\ticon: Codicon.terminal,\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\torder: ActionOrder.Collapse,\n\t\t\t\tgroup: 'navigation',\n\t\t\t\twhen: ContextKeyEqualsExpr.create('view', Testing.ExplorerViewId)\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor) {\n\t\tconst result = accessor.get(ITestResultService).results[0];\n\t\taccessor.get(ITestingOutputTerminalService).open(result);\n\t}\n}\n\n\nexport class CollapseAllAction extends ViewAction<TestingExplorerView> {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'testing.collapseAll',\n\t\t\tviewId: Testing.ExplorerViewId,\n\t\t\ttitle: localize('testing.collapseAll', \"Collapse All Tests\"),\n\t\t\tf1: false,\n\t\t\ticon: Codicon.collapseAll,\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\torder: ActionOrder.Collapse,\n\t\t\t\tgroup: 'navigation',\n\t\t\t\twhen: ContextKeyEqualsExpr.create('view', Testing.ExplorerViewId)\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic runInView(_accessor: ServicesAccessor, view: TestingExplorerView) {\n\t\tview.viewModel.collapseAll();\n\t}\n}\n\nexport class RefreshTestsAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'testing.refreshTests',\n\t\t\ttitle: localize('testing.refresh', \"Refresh Tests\"),\n\t\t\tcategory,\n\t\t\tf1: true,\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\torder: ActionOrder.Refresh,\n\t\t\t\tgroup: 'refresh',\n\t\t\t\twhen: ContextKeyEqualsExpr.create('view', Testing.ExplorerViewId)\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic run(accessor: ServicesAccessor) {\n\t\taccessor.get(ITestService).resubscribeToAllTests();\n\t}\n}\n\nexport class ClearTestResultsAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'testing.clearTestResults',\n\t\t\ttitle: localize('testing.clearResults', \"Clear All Results\"),\n\t\t\tcategory,\n\t\t\tf1: true\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic run(accessor: ServicesAccessor) {\n\t\taccessor.get(ITestResultService).clear();\n\t}\n}\n\nexport class EditFocusedTest extends ViewAction<TestingExplorerView> {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'testing.editFocusedTest',\n\t\t\tviewId: Testing.ExplorerViewId,\n\t\t\ttitle: localize('testing.editFocusedTest', \"Go to Test\"),\n\t\t\tf1: false,\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.TestItem,\n\t\t\t},\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.EditorContrib - 10,\n\t\t\t\twhen: FocusedViewContext.isEqualTo(Testing.ExplorerViewId),\n\t\t\t\tprimary: KeyCode.Enter | KeyMod.Alt,\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic override async run(accessor: ServicesAccessor, test?: ITestItem, preserveFocus?: boolean) {\n\t\tif (test) {\n\t\t\tawait this.runForTest(accessor, test, preserveFocus);\n\t\t} else {\n\t\t\tawait super.run(accessor);\n\t\t}\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic runInView(accessor: ServicesAccessor, view: TestingExplorerView) {\n\t\tconst selected = view.viewModel.tree.getFocus().find(isDefined);\n\t\tif (selected instanceof TestItemTreeElement) {\n\t\t\tthis.runForTest(accessor, selected.test.item, false);\n\t\t}\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprivate async runForTest(accessor: ServicesAccessor, test: ITestItem, preserveFocus = true) {\n\t\tconst commandService = accessor.get(ICommandService);\n\t\tconst fileService = accessor.get(IFileService);\n\t\tconst editorService = accessor.get(IEditorService);\n\n\t\taccessor.get(ITestExplorerFilterState).reveal.value = [test.extId];\n\n\t\tlet isFile = true;\n\t\ttry {\n\t\t\tif (!(await fileService.resolve(test.uri)).isFile) {\n\t\t\t\tisFile = false;\n\t\t\t}\n\t\t} catch {\n\t\t\t// ignored\n\t\t}\n\n\t\tif (!isFile) {\n\t\t\tawait commandService.executeCommand(REVEAL_IN_EXPLORER_COMMAND_ID, test.uri);\n\t\t\treturn;\n\t\t}\n\n\t\tconst pane = await editorService.openEditor({\n\t\t\tresource: test.uri,\n\t\t\toptions: {\n\t\t\t\tselection: test.range\n\t\t\t\t\t? { startColumn: test.range.startColumn, startLineNumber: test.range.startLineNumber }\n\t\t\t\t\t: undefined,\n\t\t\t\tpreserveFocus,\n\t\t\t},\n\t\t});\n\n\t\t// if the user selected a failed test and now they didn't, hide the peek\n\t\tconst control = pane?.getControl();\n\t\tif (isCodeEditor(control)) {\n\t\t\tTestingOutputPeekController.get(control).removePeek();\n\t\t}\n\t}\n}\n\nabstract class ToggleAutoRun extends Action2 {\n\tconstructor(title: string, whenToggleIs: boolean) {\n\t\tsuper({\n\t\t\tid: 'testing.toggleautoRun',\n\t\t\ttitle,\n\t\t\tf1: true,\n\t\t\ticon: icons.testingAutorunIcon,\n\t\t\ttoggled: whenToggleIs === true ? ContextKeyTrueExpr.INSTANCE : ContextKeyFalseExpr.INSTANCE,\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\torder: ActionOrder.AutoRun,\n\t\t\t\tgroup: 'navigation',\n\t\t\t\twhen: ContextKeyAndExpr.create([\n\t\t\t\t\tContextKeyEqualsExpr.create('view', Testing.ExplorerViewId),\n\t\t\t\t\tTestingContextKeys.autoRun.isEqualTo(whenToggleIs)\n\t\t\t\t])\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic run(accessor: ServicesAccessor) {\n\t\taccessor.get(ITestingAutoRun).toggle();\n\t}\n}\n\nexport class AutoRunOnAction extends ToggleAutoRun {\n\tconstructor() {\n\t\tsuper(localize('testing.turnOnAutoRun', \"Turn On Auto Run\"), false);\n\t}\n}\n\nexport class AutoRunOffAction extends ToggleAutoRun {\n\tconstructor() {\n\t\tsuper(localize('testing.turnOffAutoRun', \"Turn Off Auto Run\"), true);\n\t}\n}\n\n\nabstract class RunOrDebugAtCursor extends Action2 {\n\t/**\n\t * @override\n\t */\n\tpublic async run(accessor: ServicesAccessor) {\n\t\tconst control = accessor.get(IEditorService).activeTextEditorControl;\n\t\tconst position = control?.getPosition();\n\t\tconst model = control?.getModel();\n\t\tif (!position || !model || !('uri' in model)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst testService = accessor.get(ITestService);\n\t\tconst collection = testService.subscribeToDiffs(ExtHostTestingResource.TextDocument, model.uri);\n\n\t\tlet bestDepth = -1;\n\t\tlet bestNode: InternalTestItem | undefined;\n\n\t\ttry {\n\t\t\tawait showDiscoveringWhile(accessor.get(IProgressService), getAllTestsInHierarchy(collection.object));\n\n\t\t\tconst queue: [depth: number, nodes: Iterable<string>][] = [[0, collection.object.rootIds]];\n\t\t\twhile (queue.length > 0) {\n\t\t\t\tconst [depth, candidates] = queue.pop()!;\n\t\t\t\tfor (const id of candidates) {\n\t\t\t\t\tconst candidate = collection.object.getNodeById(id);\n\t\t\t\t\tif (candidate) {\n\t\t\t\t\t\tif (depth > bestDepth && this.filter(candidate) && candidate.item.range && Range.containsPosition(candidate.item.range, position)) {\n\t\t\t\t\t\t\tbestDepth = depth;\n\t\t\t\t\t\t\tbestNode = candidate;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tqueue.push([depth + 1, candidate.children]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (bestNode) {\n\t\t\t\tawait this.runTest(testService, bestNode);\n\t\t\t}\n\t\t} finally {\n\t\t\tcollection.dispose();\n\t\t}\n\t}\n\n\tprotected abstract filter(node: InternalTestItem): boolean;\n\n\tprotected abstract runTest(service: ITestService, node: InternalTestItem): Promise<ITestResult>;\n}\n\nexport class RunAtCursor extends RunOrDebugAtCursor {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'testing.runAtCursor',\n\t\t\ttitle: localize('testing.runAtCursor', \"Run Test at Cursor\"),\n\t\t\tf1: true,\n\t\t\tcategory,\n\t\t});\n\t}\n\n\tprotected filter(node: InternalTestItem): boolean {\n\t\treturn node.item.runnable;\n\t}\n\n\tprotected runTest(service: ITestService, internalTest: InternalTestItem): Promise<ITestResult> {\n\t\treturn service.runTests({\n\t\t\tdebug: false,\n\t\t\ttests: [{ testId: internalTest.item.extId, src: internalTest.src }],\n\t\t});\n\t}\n}\n\nexport class DebugAtCursor extends RunOrDebugAtCursor {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'testing.debugAtCursor',\n\t\t\ttitle: localize('testing.debugAtCursor', \"Debug Test at Cursor\"),\n\t\t\tf1: true,\n\t\t\tcategory,\n\t\t});\n\t}\n\n\tprotected filter(node: InternalTestItem): boolean {\n\t\treturn node.item.debuggable;\n\t}\n\n\tprotected runTest(service: ITestService, internalTest: InternalTestItem): Promise<ITestResult> {\n\t\treturn service.runTests({\n\t\t\tdebug: true,\n\t\t\ttests: [{ testId: internalTest.item.extId, src: internalTest.src }],\n\t\t});\n\t}\n}\n\nabstract class RunOrDebugCurrentFile extends Action2 {\n\t/**\n\t * @override\n\t */\n\tpublic async run(accessor: ServicesAccessor) {\n\t\tconst control = accessor.get(IEditorService).activeTextEditorControl;\n\t\tconst position = control?.getPosition();\n\t\tconst model = control?.getModel();\n\t\tif (!position || !model || !('uri' in model)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst testService = accessor.get(ITestService);\n\t\tconst collection = testService.subscribeToDiffs(ExtHostTestingResource.TextDocument, model.uri);\n\n\t\ttry {\n\t\t\tawait waitForAllRoots(collection.object);\n\n\t\t\tconst roots = [...collection.object.rootIds]\n\t\t\t\t.map(r => collection.object.getNodeById(r))\n\t\t\t\t.filter(isDefined)\n\t\t\t\t.filter(n => this.filter(n));\n\n\t\t\tif (roots.length) {\n\t\t\t\tawait this.runTest(testService, roots);\n\t\t\t}\n\t\t} finally {\n\t\t\tcollection.dispose();\n\t\t}\n\t}\n\n\tprotected abstract filter(node: InternalTestItem): boolean;\n\n\tprotected abstract runTest(service: ITestService, node: InternalTestItem[]): Promise<ITestResult>;\n}\n\nexport class RunCurrentFile extends RunOrDebugCurrentFile {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'testing.runCurrentFile',\n\t\t\ttitle: localize('testing.runCurrentFile', \"Run Tests in Current File\"),\n\t\t\tf1: true,\n\t\t\tcategory,\n\t\t});\n\t}\n\n\tprotected filter(node: InternalTestItem): boolean {\n\t\treturn node.item.runnable;\n\t}\n\n\tprotected runTest(service: ITestService, internalTests: InternalTestItem[]): Promise<ITestResult> {\n\t\treturn service.runTests({\n\t\t\tdebug: false,\n\t\t\ttests: internalTests.map(t => ({ testId: t.item.extId, src: t.src })),\n\t\t});\n\t}\n}\n\nexport class DebugCurrentFile extends RunOrDebugCurrentFile {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'testing.debugCurrentFile',\n\t\t\ttitle: localize('testing.debugCurrentFile', \"Debug Tests in Current File\"),\n\t\t\tf1: true,\n\t\t\tcategory,\n\t\t});\n\t}\n\n\tprotected filter(node: InternalTestItem): boolean {\n\t\treturn node.item.debuggable;\n\t}\n\n\tprotected runTest(service: ITestService, internalTests: InternalTestItem[]): Promise<ITestResult> {\n\t\treturn service.runTests({\n\t\t\tdebug: true,\n\t\t\ttests: internalTests.map(t => ({ testId: t.item.extId, src: t.src }))\n\t\t});\n\t}\n}\n\nabstract class RunOrDebugExtsById extends Action2 {\n\t/**\n\t * @override\n\t */\n\tpublic async run(accessor: ServicesAccessor) {\n\t\tconst testService = accessor.get(ITestService);\n\t\tconst paths = [...this.getTestExtIdsToRun(accessor)];\n\t\tif (paths.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst workspaceTests = accessor.get(IWorkspaceTestCollectionService).subscribeToWorkspaceTests();\n\n\t\ttry {\n\t\t\tconst todo = Promise.all(workspaceTests.workspaceFolderCollections.map(\n\t\t\t\t([, c]) => Promise.all(paths.map(p => getTestByPath(c, p))),\n\t\t\t));\n\n\t\t\tconst tests = flatten(await showDiscoveringWhile(accessor.get(IProgressService), todo)).filter(isDefined);\n\t\t\tif (tests.length) {\n\t\t\t\tawait this.runTest(testService, tests);\n\t\t\t}\n\t\t} finally {\n\t\t\tworkspaceTests.dispose();\n\t\t}\n\t}\n\n\tprotected abstract getTestExtIdsToRun(accessor: ServicesAccessor): Iterable<TestIdPath>;\n\n\tprotected abstract filter(node: InternalTestItem): boolean;\n\n\tprotected abstract runTest(service: ITestService, node: InternalTestItem[]): Promise<ITestResult>;\n}\n\nabstract class RunOrDebugFailedTests extends RunOrDebugExtsById {\n\t/**\n\t * @inheritdoc\n\t */\n\tprotected getTestExtIdsToRun(accessor: ServicesAccessor): Iterable<TestIdPath> {\n\t\tconst { results } = accessor.get(ITestResultService);\n\t\tconst paths = new Set<string>();\n\t\tconst sep = '$$TEST SEP$$';\n\t\tfor (let i = results.length - 1; i >= 0; i--) {\n\t\t\tconst resultSet = results[i];\n\t\t\tfor (const test of resultSet.tests) {\n\t\t\t\tconst path = getPathForTestInResult(test, resultSet).join(sep);\n\t\t\t\tif (isFailedState(test.ownComputedState)) {\n\t\t\t\t\tpaths.add(path);\n\t\t\t\t} else {\n\t\t\t\t\tpaths.delete(path);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn Iterable.map(paths, p => p.split(sep));\n\t}\n}\n\nabstract class RunOrDebugLastRun extends RunOrDebugExtsById {\n\t/**\n\t * @inheritdoc\n\t */\n\tprotected *getTestExtIdsToRun(accessor: ServicesAccessor): Iterable<TestIdPath> {\n\t\tconst lastResult = accessor.get(ITestResultService).results[0];\n\t\tif (!lastResult) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const test of lastResult.tests) {\n\t\t\tif (test.direct) {\n\t\t\t\tyield getPathForTestInResult(test, lastResult);\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport class ReRunFailedTests extends RunOrDebugFailedTests {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'testing.reRunFailTests',\n\t\t\ttitle: localize('testing.reRunFailTests', \"Rerun Failed Tests\"),\n\t\t\tf1: true,\n\t\t\tcategory,\n\t\t});\n\t}\n\n\tprotected filter(node: InternalTestItem): boolean {\n\t\treturn node.item.runnable;\n\t}\n\n\tprotected runTest(service: ITestService, internalTests: InternalTestItem[]): Promise<ITestResult> {\n\t\treturn service.runTests({\n\t\t\tdebug: false,\n\t\t\ttests: internalTests.map(t => ({ testId: t.item.extId, src: t.src })),\n\t\t});\n\t}\n}\n\nexport class DebugFailedTests extends RunOrDebugFailedTests {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'testing.debugFailTests',\n\t\t\ttitle: localize('testing.debugFailTests', \"Debug Failed Tests\"),\n\t\t\tf1: true,\n\t\t\tcategory,\n\t\t});\n\t}\n\n\tprotected filter(node: InternalTestItem): boolean {\n\t\treturn node.item.debuggable;\n\t}\n\n\tprotected runTest(service: ITestService, internalTests: InternalTestItem[]): Promise<ITestResult> {\n\t\treturn service.runTests({\n\t\t\tdebug: true,\n\t\t\ttests: internalTests.map(t => ({ testId: t.item.extId, src: t.src })),\n\t\t});\n\t}\n}\n\nexport class ReRunLastRun extends RunOrDebugLastRun {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'testing.reRunLastRun',\n\t\t\ttitle: localize('testing.reRunLastRun', \"Rerun Last Run\"),\n\t\t\tf1: true,\n\t\t\tcategory,\n\t\t});\n\t}\n\n\tprotected filter(node: InternalTestItem): boolean {\n\t\treturn node.item.runnable;\n\t}\n\n\tprotected runTest(service: ITestService, internalTests: InternalTestItem[]): Promise<ITestResult> {\n\t\treturn service.runTests({\n\t\t\tdebug: false,\n\t\t\ttests: internalTests.map(t => ({ testId: t.item.extId, src: t.src })),\n\t\t});\n\t}\n}\n\nexport class DebugLastRun extends RunOrDebugLastRun {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'testing.debugLastRun',\n\t\t\ttitle: localize('testing.debugLastRun', \"Debug Last Run\"),\n\t\t\tf1: true,\n\t\t\tcategory,\n\t\t});\n\t}\n\n\tprotected filter(node: InternalTestItem): boolean {\n\t\treturn node.item.debuggable;\n\t}\n\n\tprotected runTest(service: ITestService, internalTests: InternalTestItem[]): Promise<ITestResult> {\n\t\treturn service.runTests({\n\t\t\tdebug: true,\n\t\t\ttests: internalTests.map(t => ({ testId: t.item.extId, src: t.src })),\n\t\t});\n\t}\n}\n\nexport class SearchForTestExtension extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'testing.searchForTestExtension',\n\t\t\ttitle: localize('testing.searchForTestExtension', \"Search for Test Extension\"),\n\t\t\tf1: false,\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor) {\n\t\tconst viewletService = accessor.get(IViewletService);\n\t\tconst viewlet = (await viewletService.openViewlet(EXTENSIONS_VIEWLET_ID, true))?.getViewPaneContainer() as IExtensionsViewPaneContainer;\n\t\tviewlet.search('tag:testing @sort:installs');\n\t\tviewlet.focus();\n\t}\n}\n"]}