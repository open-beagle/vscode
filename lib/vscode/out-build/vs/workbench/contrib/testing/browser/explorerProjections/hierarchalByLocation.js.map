{"version":3,"file":"hierarchalByLocation.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/testing/browser/explorerProjections/hierarchalByLocation.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ObjectTree } from 'vs/base/browser/ui/tree/objectTree';\nimport { Emitter } from 'vs/base/common/event';\nimport { FuzzyScore } from 'vs/base/common/filters';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { Position } from 'vs/editor/common/core/position';\nimport { IWorkspaceFolder, IWorkspaceFoldersChangeEvent } from 'vs/platform/workspace/common/workspace';\nimport { TestResultState } from 'vs/workbench/api/common/extHostTypes';\nimport { TestItemTreeElement, ITestTreeProjection, IActionableTestTreeElement, TestExplorerTreeElement, TestTreeErrorMessage, isActionableTestTreeElement } from 'vs/workbench/contrib/testing/browser/explorerProjections/index';\nimport { ByLocationTestItemElement, ByLocationFolderElement } from 'vs/workbench/contrib/testing/browser/explorerProjections/hierarchalNodes';\nimport { TestLocationStore } from 'vs/workbench/contrib/testing/browser/explorerProjections/locationStore';\nimport { NodeChangeList, NodeRenderDirective, NodeRenderFn, peersHaveChildren } from 'vs/workbench/contrib/testing/browser/explorerProjections/nodeHelper';\nimport { IComputedStateAccessor, refreshComputedState } from 'vs/workbench/contrib/testing/common/getComputedState';\nimport { InternalTestItem, TestDiffOpType, TestItemExpandState, TestsDiff } from 'vs/workbench/contrib/testing/common/testCollection';\nimport { ITestResultService } from 'vs/workbench/contrib/testing/common/testResultService';\nimport { TestSubscriptionListener } from 'vs/workbench/contrib/testing/common/workspaceTestCollectionService';\nimport { mapFind } from 'vs/base/common/arrays';\nimport { Iterable } from 'vs/base/common/iterator';\n\nconst computedStateAccessor: IComputedStateAccessor<IActionableTestTreeElement> = {\n\tgetOwnState: i => i instanceof TestItemTreeElement ? i.ownState : TestResultState.Unset,\n\tgetCurrentComputedState: i => i.state,\n\tsetComputedState: (i, s) => i.state = s,\n\tgetChildren: i => Iterable.filter(i.children.values(), isActionableTestTreeElement),\n\t*getParents(i) {\n\t\tfor (let parent = i.parent; parent; parent = parent.parent) {\n\t\t\tyield parent;\n\t\t}\n\t},\n};\n\n/**\n * Projection that lists tests in their traditional tree view.\n */\nexport class HierarchicalByLocationProjection extends Disposable implements ITestTreeProjection {\n\tprivate readonly updateEmitter = new Emitter<void>();\n\tprotected readonly changes = new NodeChangeList<ByLocationTestItemElement | ByLocationFolderElement>();\n\tprivate readonly locations = new TestLocationStore<ByLocationTestItemElement>();\n\n\t/**\n\t * Root folders and contained items.\n\t */\n\tprotected readonly folders = new Map<string, {\n\t\troot: ByLocationFolderElement;\n\t\titems: Map<string, ByLocationTestItemElement>,\n\t}>();\n\n\t/**\n\t * Gets root elements of the tree.\n\t */\n\tprotected get roots() {\n\t\treturn Iterable.map(this.folders.values(), f => f.root);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly onUpdate = this.updateEmitter.event;\n\n\tconstructor(protected readonly listener: TestSubscriptionListener, @ITestResultService private readonly results: ITestResultService) {\n\t\tsuper();\n\t\tthis._register(listener.onDiff(([folder, diff]) => this.applyDiff(folder, diff)));\n\t\tthis._register(listener.onFolderChange(this.applyFolderChange, this));\n\n\t\t// when test results are cleared, recalculate all state\n\t\tthis._register(results.onResultsChanged((evt) => {\n\t\t\tif (!('removed' in evt)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const { items } of this.folders.values()) {\n\t\t\t\tfor (const inTree of [...items.values()].sort((a, b) => b.depth - a.depth)) {\n\t\t\t\t\tconst lookup = this.results.getStateById(inTree.test.item.extId)?.[1];\n\t\t\t\t\tconst computed = lookup?.computedState ?? TestResultState.Unset;\n\n\t\t\t\t\tif (lookup) {\n\t\t\t\t\t\tinTree.ownState = lookup.ownComputedState;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (computed !== inTree.state) {\n\t\t\t\t\t\tinTree.state = computed;\n\t\t\t\t\t\tthis.addUpdated(inTree);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.updateEmitter.fire();\n\t\t}));\n\n\t\t// when test states change, reflect in the tree\n\t\t// todo: optimize this to avoid needing to iterate\n\t\tthis._register(results.onTestChanged(({ item: result }) => {\n\t\t\tfor (const { items } of this.folders.values()) {\n\t\t\t\tconst item = items.get(result.item.extId);\n\t\t\t\tif (item) {\n\t\t\t\t\titem.retired = result.retired;\n\t\t\t\t\trefreshComputedState(computedStateAccessor, item, this.addUpdated, result.computedState);\n\t\t\t\t\tthis.addUpdated(item);\n\t\t\t\t\tthis.updateEmitter.fire();\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tfor (const [folder, collection] of listener.workspaceFolderCollections) {\n\t\t\tconst { items } = this.getOrCreateFolderElement(folder.folder);\n\t\t\tfor (const node of collection.all) {\n\t\t\t\tthis.storeItem(items, this.createItem(node, folder.folder));\n\t\t\t}\n\t\t}\n\n\t\tfor (const folder of this.folders.values()) {\n\t\t\tthis.changes.addedOrRemoved(folder.root);\n\t\t}\n\t}\n\n\t/**\n\t * Gets the depth of children to expanded automatically for the node,\n\t */\n\tprotected getRevealDepth(element: ByLocationTestItemElement): number | undefined {\n\t\treturn element.depth === 1 ? 0 : undefined;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic getElementByTestId(testId: string): TestItemTreeElement | undefined {\n\t\treturn mapFind(this.folders.values(), f => f.items.get(testId));\n\t}\n\n\tprivate applyFolderChange(evt: IWorkspaceFoldersChangeEvent) {\n\t\tfor (const folder of evt.removed) {\n\t\t\tconst existing = this.folders.get(folder.uri.toString());\n\t\t\tif (existing) {\n\t\t\t\tthis.folders.delete(folder.uri.toString());\n\t\t\t\tthis.changes.addedOrRemoved(existing.root);\n\t\t\t}\n\t\t\tthis.updateEmitter.fire();\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic getTestAtPosition(uri: URI, position: Position) {\n\t\treturn this.locations.getTestAtPosition(uri, position);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic hasTestInDocument(uri: URI) {\n\t\treturn this.locations.hasTestInDocument(uri);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tprivate applyDiff(folder: IWorkspaceFolder, diff: TestsDiff) {\n\t\tconst { items } = this.getOrCreateFolderElement(folder);\n\n\t\tfor (const op of diff) {\n\t\t\tswitch (op[0]) {\n\t\t\t\tcase TestDiffOpType.Add: {\n\t\t\t\t\tconst item = this.createItem(op[1], folder);\n\t\t\t\t\tthis.storeItem(items, item);\n\t\t\t\t\tthis.changes.addedOrRemoved(item);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tcase TestDiffOpType.Update: {\n\t\t\t\t\tconst patch = op[1];\n\t\t\t\t\tconst existing = items.get(patch.extId);\n\t\t\t\t\tif (!existing) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst locationChanged = !!patch.item?.range;\n\t\t\t\t\tif (locationChanged) { this.locations.remove(existing); }\n\t\t\t\t\texisting.update(patch);\n\t\t\t\t\tif (locationChanged) { this.locations.add(existing); }\n\t\t\t\t\tthis.addUpdated(existing);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tcase TestDiffOpType.Remove: {\n\t\t\t\t\tconst toRemove = items.get(op[1]);\n\t\t\t\t\tif (!toRemove) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.changes.addedOrRemoved(toRemove);\n\n\t\t\t\t\tconst queue: Iterable<TestExplorerTreeElement>[] = [[toRemove]];\n\t\t\t\t\twhile (queue.length) {\n\t\t\t\t\t\tfor (const item of queue.pop()!) {\n\t\t\t\t\t\t\tif (item instanceof ByLocationTestItemElement) {\n\t\t\t\t\t\t\t\tqueue.push(this.unstoreItem(items, item));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (diff.length !== 0) {\n\t\t\tthis.updateEmitter.fire();\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic applyTo(tree: ObjectTree<TestExplorerTreeElement, FuzzyScore>) {\n\t\tthis.changes.applyTo(tree, this.renderNode, () => this.roots);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic expandElement(element: TestItemTreeElement, depth: number): void {\n\t\tif (!(element instanceof ByLocationTestItemElement)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (element.test.expand === TestItemExpandState.NotExpandable) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst folder = element.folder;\n\t\tconst collection = this.listener.workspaceFolderCollections.find(([f]) => f.folder === folder);\n\t\tcollection?.[1].expand(element.test.item.extId, depth);\n\t}\n\n\tprotected createItem(item: InternalTestItem, folder: IWorkspaceFolder): ByLocationTestItemElement {\n\t\tconst { items, root } = this.getOrCreateFolderElement(folder);\n\t\tconst parent = item.parent ? items.get(item.parent)! : root;\n\t\treturn new ByLocationTestItemElement(item, parent, n => this.changes.addedOrRemoved(n));\n\t}\n\n\tprotected getOrCreateFolderElement(folder: IWorkspaceFolder) {\n\t\tlet f = this.folders.get(folder.uri.toString());\n\t\tif (!f) {\n\t\t\tf = { root: new ByLocationFolderElement(folder), items: new Map() };\n\t\t\tthis.changes.addedOrRemoved(f.root);\n\t\t\tthis.folders.set(folder.uri.toString(), f);\n\t\t}\n\n\t\treturn f;\n\t}\n\n\tprotected readonly addUpdated = (item: IActionableTestTreeElement) => {\n\t\tconst cast = item as ByLocationTestItemElement | ByLocationFolderElement;\n\t\tthis.changes.updated(cast);\n\t};\n\n\tprotected renderNode: NodeRenderFn = (node, recurse) => {\n\t\tif (node instanceof TestTreeErrorMessage) {\n\t\t\treturn { element: node };\n\t\t}\n\n\t\t// Omit the workspace folder or controller root if there are no siblings\n\t\tif (node.depth < 2 && !peersHaveChildren(node, () => this.roots)) {\n\t\t\treturn NodeRenderDirective.Concat;\n\t\t}\n\n\t\t// Omit folders/roots that have no child tests\n\t\tif (node.depth < 2 && node.children.size === 0) {\n\t\t\treturn NodeRenderDirective.Omit;\n\t\t}\n\n\t\tif (!(node instanceof ByLocationTestItemElement)) {\n\t\t\treturn { element: node, children: recurse(node.children) };\n\t\t}\n\n\t\treturn {\n\t\t\telement: node,\n\t\t\tcollapsible: node.test.expand !== TestItemExpandState.NotExpandable,\n\t\t\tcollapsed: node.test.expand === TestItemExpandState.Expandable ? true : undefined,\n\t\t\tchildren: recurse(node.children),\n\t\t};\n\t};\n\n\tprotected unstoreItem(items: Map<string, TestItemTreeElement>, treeElement: ByLocationTestItemElement) {\n\t\ttreeElement.parent.children.delete(treeElement);\n\t\titems.delete(treeElement.test.item.extId);\n\t\tthis.locations.remove(treeElement);\n\t\treturn treeElement.children;\n\t}\n\n\tprotected storeItem(items: Map<string, TestItemTreeElement>, treeElement: ByLocationTestItemElement) {\n\t\ttreeElement.parent.children.add(treeElement);\n\t\titems.set(treeElement.test.item.extId, treeElement);\n\t\tthis.locations.add(treeElement);\n\n\t\tconst reveal = this.getRevealDepth(treeElement);\n\t\tif (reveal !== undefined) {\n\t\t\tthis.expandElement(treeElement, reveal);\n\t\t}\n\n\t\tconst prevState = this.results.getStateById(treeElement.test.item.extId)?.[1];\n\t\tif (prevState) {\n\t\t\ttreeElement.retired = prevState.retired;\n\t\t\trefreshComputedState(computedStateAccessor, treeElement, this.addUpdated, prevState.computedState);\n\t\t}\n\t}\n}\n"]}