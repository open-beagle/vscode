{"version":3,"sources":["vs/workbench/contrib/testing/browser/theme.ts"],"names":[],"mappings":"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","file":"theme.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Color, RGBA } from 'vs/base/common/color';\nimport { localize } from 'vs/nls';\nimport { editorErrorForeground, editorForeground, editorHintForeground, editorInfoForeground, editorWarningForeground, inputActiveOptionBackground, inputActiveOptionBorder, inputActiveOptionForeground, registerColor } from 'vs/platform/theme/common/colorRegistry';\nimport { registerThemingParticipant } from 'vs/platform/theme/common/themeService';\nimport { TestMessageSeverity, TestResultState } from 'vs/workbench/api/common/extHostTypes';\nimport { ACTIVITY_BAR_BADGE_BACKGROUND } from 'vs/workbench/common/theme';\n\nexport const testingColorIconFailed = registerColor('testing.iconFailed', {\n\tdark: '#f14c4c',\n\tlight: '#f14c4c',\n\thc: '#000000'\n}, localize('testing.iconFailed', \"Color for the 'failed' icon in the test explorer.\"));\n\nexport const testingColorIconErrored = registerColor('testing.iconErrored', {\n\tdark: '#f14c4c',\n\tlight: '#f14c4c',\n\thc: '#000000'\n}, localize('testing.iconErrored', \"Color for the 'Errored' icon in the test explorer.\"));\n\nexport const testingColorIconPassed = registerColor('testing.iconPassed', {\n\tdark: '#73c991',\n\tlight: '#73c991',\n\thc: '#000000'\n}, localize('testing.iconPassed', \"Color for the 'passed' icon in the test explorer.\"));\n\nexport const testingColorRunAction = registerColor('testing.runAction', {\n\tdark: testingColorIconPassed,\n\tlight: testingColorIconPassed,\n\thc: testingColorIconPassed\n}, localize('testing.runAction', \"Color for 'run' icons in the editor.\"));\n\nexport const testingColorIconQueued = registerColor('testing.iconQueued', {\n\tdark: '#cca700',\n\tlight: '#cca700',\n\thc: '#000000'\n}, localize('testing.iconQueued', \"Color for the 'Queued' icon in the test explorer.\"));\n\nexport const testingColorIconUnset = registerColor('testing.iconUnset', {\n\tdark: '#848484',\n\tlight: '#848484',\n\thc: '#848484'\n}, localize('testing.iconUnset', \"Color for the 'Unset' icon in the test explorer.\"));\n\nexport const testingColorIconSkipped = registerColor('testing.iconSkipped', {\n\tdark: '#848484',\n\tlight: '#848484',\n\thc: '#848484'\n}, localize('testing.iconSkipped', \"Color for the 'Skipped' icon in the test explorer.\"));\n\nexport const testingPeekBorder = registerColor('testing.peekBorder', {\n\tdark: editorErrorForeground,\n\tlight: editorErrorForeground,\n\thc: editorErrorForeground,\n}, localize('testing.peekBorder', 'Color of the peek view borders and arrow.'));\n\nexport const testMessageSeverityColors: {\n\t[K in TestMessageSeverity]: {\n\t\tdecorationForeground: string,\n\t\tmarginBackground: string,\n\t};\n} = {\n\t[TestMessageSeverity.Error]: {\n\t\tdecorationForeground: registerColor(\n\t\t\t'testing.message.error.decorationForeground',\n\t\t\t{ dark: editorErrorForeground, light: editorErrorForeground, hc: editorForeground },\n\t\t\tlocalize('testing.message.error.decorationForeground', 'Text color of test error messages shown inline in the editor.')\n\t\t),\n\t\tmarginBackground: registerColor(\n\t\t\t'testing.message.error.lineBackground',\n\t\t\t{ dark: new Color(new RGBA(255, 0, 0, 0.2)), light: new Color(new RGBA(255, 0, 0, 0.2)), hc: null },\n\t\t\tlocalize('testing.message.error.marginBackground', 'Margin color beside error messages shown inline in the editor.')\n\t\t),\n\t},\n\t[TestMessageSeverity.Warning]: {\n\t\tdecorationForeground: registerColor(\n\t\t\t'testing.message.warning.decorationForeground',\n\t\t\t{ dark: editorWarningForeground, light: editorWarningForeground, hc: editorForeground },\n\t\t\tlocalize('testing.message.warning.decorationForeground', 'Text color of test warning messages shown inline in the editor.')\n\t\t),\n\t\tmarginBackground: registerColor(\n\t\t\t'testing.message.warning.lineBackground',\n\t\t\t{ dark: new Color(new RGBA(255, 208, 0, 0.2)), light: new Color(new RGBA(255, 208, 0, 0.2)), hc: null },\n\t\t\tlocalize('testing.message.warning.marginBackground', 'Margin color beside warning messages shown inline in the editor.')\n\t\t),\n\t},\n\t[TestMessageSeverity.Information]: {\n\t\tdecorationForeground: registerColor(\n\t\t\t'testing.message.info.decorationForeground',\n\t\t\t{ dark: editorInfoForeground, light: editorInfoForeground, hc: editorForeground },\n\t\t\tlocalize('testing.message.info.decorationForeground', 'Text color of test info messages shown inline in the editor.')\n\t\t),\n\t\tmarginBackground: registerColor(\n\t\t\t'testing.message.info.lineBackground',\n\t\t\t{ dark: new Color(new RGBA(0, 127, 255, 0.2)), light: new Color(new RGBA(0, 127, 255, 0.2)), hc: null },\n\t\t\tlocalize('testing.message.info.marginBackground', 'Margin color beside info messages shown inline in the editor.')\n\t\t),\n\t},\n\t[TestMessageSeverity.Hint]: {\n\t\tdecorationForeground: registerColor(\n\t\t\t'testing.message.hint.decorationForeground',\n\t\t\t{ dark: editorHintForeground, light: editorHintForeground, hc: editorForeground },\n\t\t\tlocalize('testing.message.hint.decorationForeground', 'Text color of test hint messages shown inline in the editor.')\n\t\t),\n\t\tmarginBackground: registerColor(\n\t\t\t'testing.message.hint.lineBackground',\n\t\t\t{ dark: null, light: null, hc: editorForeground },\n\t\t\tlocalize('testing.message.hint.marginBackground', 'Margin color beside hint messages shown inline in the editor.')\n\t\t),\n\t},\n};\n\nexport const testStatesToIconColors: { [K in TestResultState]?: string } = {\n\t[TestResultState.Errored]: testingColorIconErrored,\n\t[TestResultState.Failed]: testingColorIconFailed,\n\t[TestResultState.Passed]: testingColorIconPassed,\n\t[TestResultState.Queued]: testingColorIconQueued,\n\t[TestResultState.Unset]: testingColorIconUnset,\n\t[TestResultState.Skipped]: testingColorIconUnset,\n};\n\n\nregisterThemingParticipant((theme, collector) => {\n\t//#region test states\n\tfor (const [state, { marginBackground }] of Object.entries(testMessageSeverityColors)) {\n\t\tcollector.addRule(`.monaco-editor .testing-inline-message-severity-${state} {\n\t\t\tbackground: ${theme.getColor(marginBackground)};\n\t\t}`);\n\t}\n\t//#endregion test states\n\n\t//#region active buttons\n\tconst inputActiveOptionBorderColor = theme.getColor(inputActiveOptionBorder);\n\tif (inputActiveOptionBorderColor) {\n\t\tcollector.addRule(`.testing-filter-action-item > .monaco-action-bar .testing-filter-button.checked { border-color: ${inputActiveOptionBorderColor}; }`);\n\t}\n\tconst inputActiveOptionForegroundColor = theme.getColor(inputActiveOptionForeground);\n\tif (inputActiveOptionForegroundColor) {\n\t\tcollector.addRule(`.testing-filter-action-item > .monaco-action-bar .testing-filter-button.checked { color: ${inputActiveOptionForegroundColor}; }`);\n\t}\n\tconst inputActiveOptionBackgroundColor = theme.getColor(inputActiveOptionBackground);\n\tif (inputActiveOptionBackgroundColor) {\n\t\tcollector.addRule(`.testing-filter-action-item > .monaco-action-bar .testing-filter-button.checked { background-color: ${inputActiveOptionBackgroundColor}; }`);\n\t}\n\tconst badgeColor = theme.getColor(ACTIVITY_BAR_BADGE_BACKGROUND);\n\tcollector.addRule(`.monaco-workbench .part > .title > .title-actions .action-label.codicon-testing-autorun::after { background-color: ${badgeColor}; }`);\n\t//#endregion\n});\n"]}