{"version":3,"file":"locationStore.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/testing/browser/explorerProjections/locationStore.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAQzF,MAAM,cAAc,GAAG,CAAC,CAA4B,EAAE,CAA4B,EAAE,EAAE;QAC5F,IAAI,CAAC,KAAK,SAAS,IAAI,CAAC,KAAK,SAAS,EAAE;YACvC,OAAO,CAAC,KAAK,CAAC,CAAC;SACf;QAED,OAAO,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;IAC9E,CAAC,CAAC;IANW,QAAA,cAAc,kBAMzB;IAEF;;;OAGG;IACH,MAAa,iBAAiB;QAA9B;YACkB,eAAU,GAAG,IAAI,GAAG,EAAe,CAAC;QAmDtD,CAAC;QAjDO,iBAAiB,CAAC,GAAQ;;YAChC,OAAO,CAAC,CAAC,CAAA,MAAA,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,0CAAE,MAAM,CAAA,CAAC;QACtD,CAAC;QAEM,iBAAiB,CAAC,GAAQ,EAAE,QAAkB;YACpD,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;YAClD,IAAI,CAAC,KAAK,EAAE;gBACX,OAAO;aACP;YAED,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;;gBACxB,MAAM,KAAK,GAAG,MAAA,IAAI,CAAC,QAAQ,0CAAE,KAAK,CAAC;gBACnC,OAAO,KAAK,IAAI,aAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;YAC9D,CAAC,CAAC,CAAC;QACJ,CAAC;QAEM,MAAM,CAAC,IAAO,EAAE,YAAY,GAAG,IAAI,CAAC,QAAQ;YAClD,IAAI,CAAC,YAAY,EAAE;gBAClB,OAAO;aACP;YAED,MAAM,GAAG,GAAG,YAAY,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;YACxC,MAAM,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACrC,IAAI,CAAC,GAAG,EAAE;gBACT,OAAO;aACP;YAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACpC,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;oBACpB,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;oBACjB,OAAO;iBACP;aACD;QACF,CAAC;QAEM,GAAG,CAAC,IAAO;YACjB,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;gBACnB,OAAO;aACP;YAED,MAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;YACzC,MAAM,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACrC,IAAI,CAAC,GAAG,EAAE;gBACT,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;gBACjC,OAAO;aACP;YAED,GAAG,CAAC,MAAM,CAAC,CAAA,GAAA,0BAAiB,CAAA,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;QACxE,CAAC;KACD;IApDD,8CAoDC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { findFirstInSorted } from 'vs/base/common/arrays';\nimport { URI } from 'vs/base/common/uri';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { IRichLocation } from 'vs/workbench/contrib/testing/common/testCollection';\n\nexport const locationsEqual = (a: IRichLocation | undefined, b: IRichLocation | undefined) => {\n\tif (a === undefined || b === undefined) {\n\t\treturn b === a;\n\t}\n\n\treturn a.uri.toString() === b.uri.toString() && a.range.equalsRange(b.range);\n};\n\n/**\n * Stores and looks up test-item-like-objects by their uri/range. Used to\n * implement the 'reveal' action efficiently.\n */\nexport class TestLocationStore<T extends { location?: IRichLocation, depth: number }> {\n\tprivate readonly itemsByUri = new Map<string, T[]>();\n\n\tpublic hasTestInDocument(uri: URI) {\n\t\treturn !!this.itemsByUri.get(uri.toString())?.length;\n\t}\n\n\tpublic getTestAtPosition(uri: URI, position: Position) {\n\t\tconst tests = this.itemsByUri.get(uri.toString());\n\t\tif (!tests) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn tests.find(test => {\n\t\t\tconst range = test.location?.range;\n\t\t\treturn range && Range.lift(range).containsPosition(position);\n\t\t});\n\t}\n\n\tpublic remove(item: T, fromLocation = item.location) {\n\t\tif (!fromLocation) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst key = fromLocation.uri.toString();\n\t\tconst arr = this.itemsByUri.get(key);\n\t\tif (!arr) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\tif (arr[i] === item) {\n\t\t\t\tarr.splice(i, 1);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic add(item: T) {\n\t\tif (!item.location) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst key = item.location.uri.toString();\n\t\tconst arr = this.itemsByUri.get(key);\n\t\tif (!arr) {\n\t\t\tthis.itemsByUri.set(key, [item]);\n\t\t\treturn;\n\t\t}\n\n\t\tarr.splice(findFirstInSorted(arr, x => x.depth < item.depth), 0, item);\n\t}\n}\n"]}