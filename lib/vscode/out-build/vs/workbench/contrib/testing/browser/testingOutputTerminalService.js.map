{"version":3,"sources":["vs/workbench/contrib/testing/browser/testingOutputTerminalService.ts"],"names":[],"mappings":"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","file":"testingOutputTerminalService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DeferredPromise } from 'vs/base/common/async';\nimport { Emitter } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { listenStream } from 'vs/base/common/stream';\nimport { isDefined } from 'vs/base/common/types';\nimport { localize } from 'vs/nls';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IProcessDataEvent, ITerminalChildProcess, ITerminalLaunchError, TerminalShellType } from 'vs/platform/terminal/common/terminal';\nimport { ITerminalInstance, ITerminalService } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { ITestResult } from 'vs/workbench/contrib/testing/common/testResult';\nimport { ITestResultService } from 'vs/workbench/contrib/testing/common/testResultService';\n\n\nexport interface ITestingOutputTerminalService {\n\t_serviceBrand: undefined;\n\n\t/**\n\t * Opens a terminal for the given test's output.\n\t */\n\topen(result: ITestResult): Promise<void>;\n}\n\nconst friendlyDate = (date: number) => {\n\tconst d = new Date(date);\n\treturn d.getHours() + ':' + String(d.getMinutes()).padStart(2, '0') + ':' + String(d.getSeconds()).padStart(2, '0');\n};\n\nconst getTitle = (result: ITestResult | undefined) => {\n\treturn result\n\t\t? localize('testOutputTerminalTitleWithDate', 'Test Output at {0}', friendlyDate(result.completedAt ?? Date.now()))\n\t\t: genericTitle;\n};\n\nconst genericTitle = localize('testOutputTerminalTitle', 'Test Output');\n\nexport const ITestingOutputTerminalService = createDecorator<ITestingOutputTerminalService>('ITestingOutputTerminalService');\n\nexport class TestingOutputTerminalService implements ITestingOutputTerminalService {\n\t_serviceBrand: undefined;\n\n\tprivate outputTerminals = new WeakMap<ITerminalInstance, TestOutputProcess>();\n\n\tconstructor(\n\t\t@ITerminalService private readonly terminalService: ITerminalService,\n\t\t@ITestResultService resultService: ITestResultService,\n\t) {\n\t\t// If a result terminal is currently active and we start a new test run,\n\t\t// stream live results there automatically.\n\t\tresultService.onResultsChanged(evt => {\n\t\t\tconst active = this.terminalService.getActiveInstance();\n\t\t\tif (!('started' in evt) || !active) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst output = this.outputTerminals.get(active);\n\t\t\tif (output && output.ended) {\n\t\t\t\tthis.showResultsInTerminal(active, output, evt.started);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic async open(result: ITestResult | undefined): Promise<void> {\n\t\tconst testOutputPtys = this.terminalService.terminalInstances\n\t\t\t.map(t => {\n\t\t\t\tconst output = this.outputTerminals.get(t);\n\t\t\t\treturn output ? [t, output] as const : undefined;\n\t\t\t})\n\t\t\t.filter(isDefined);\n\n\t\t// If there's an existing terminal for the attempted reveal, show that instead.\n\t\tconst existing = testOutputPtys.find(([, o]) => o.resultId === result?.id);\n\t\tif (existing) {\n\t\t\tthis.terminalService.setActiveInstance(existing[0]);\n\t\t\tthis.terminalService.showPanel();\n\t\t\treturn;\n\t\t}\n\n\t\t// Try to reuse ended terminals, otherwise make a new one\n\t\tconst ended = testOutputPtys.find(([, o]) => o.ended);\n\t\tif (ended) {\n\t\t\tended[1].clear();\n\t\t\tthis.showResultsInTerminal(ended[0], ended[1], result);\n\t\t}\n\n\t\tconst output = new TestOutputProcess();\n\t\tthis.showResultsInTerminal(this.terminalService.createTerminal({\n\t\t\tisFeatureTerminal: true,\n\t\t\tcustomPtyImplementation: () => output,\n\t\t\tname: getTitle(result),\n\t\t}), output, result);\n\t}\n\n\tprivate async showResultsInTerminal(terminal: ITerminalInstance, output: TestOutputProcess, result: ITestResult | undefined) {\n\t\tthis.outputTerminals.set(terminal, output);\n\t\toutput.resetFor(result?.id, getTitle(result));\n\t\tthis.terminalService.setActiveInstance(terminal);\n\t\tthis.terminalService.showPanel();\n\n\t\tif (!result) {\n\t\t\t// seems like it takes a tick for listeners to be registered\n\t\t\toutput.ended = true;\n\t\t\tsetTimeout(() => output.pushData(localize('testNoRunYet', '\\r\\nNo tests have been run, yet.\\r\\n')));\n\t\t\treturn;\n\t\t}\n\n\t\tconst [stream] = await Promise.all([result.getOutput(), output.started]);\n\t\tlet hadData = false;\n\t\tlistenStream(stream, {\n\t\t\tonData: d => {\n\t\t\t\thadData = true;\n\t\t\t\toutput.pushData(d.toString());\n\t\t\t},\n\t\t\tonError: err => output.pushData(`\\r\\n\\r\\n${err.stack || err.message}`),\n\t\t\tonEnd: () => {\n\t\t\t\tif (!hadData) {\n\t\t\t\t\toutput.pushData(`\\x1b[2m${localize('runNoOutout', 'The test run did not record any output.')}\\x1b[0m`);\n\t\t\t\t}\n\n\t\t\t\tconst completedAt = result.completedAt ? new Date(result.completedAt) : new Date();\n\t\t\t\tconst text = localize('runFinished', 'Test run finished at {0}', completedAt.toLocaleString());\n\t\t\t\toutput.pushData(`\\r\\n\\r\\n\\x1b[1m> ${text} <\\x1b[0m\\r\\n\\r\\n`);\n\t\t\t\toutput.ended = true;\n\t\t\t},\n\t\t});\n\t}\n}\n\nclass TestOutputProcess extends Disposable implements ITerminalChildProcess {\n\tprivate processDataEmitter = this._register(new Emitter<string | IProcessDataEvent>());\n\tprivate titleEmitter = this._register(new Emitter<string>());\n\tprivate readonly startedDeferred = new DeferredPromise<void>();\n\n\t/** Whether the associated test has ended (indicating the terminal can be reused) */\n\tpublic ended = true;\n\t/** Result currently being displayed */\n\tpublic resultId: string | undefined;\n\t/** Promise resolved when the terminal is ready to take data */\n\tpublic readonly started = this.startedDeferred.p;\n\n\tpublic pushData(data: string | IProcessDataEvent) {\n\t\tthis.processDataEmitter.fire(data);\n\t}\n\n\tpublic clear() {\n\t\tthis.processDataEmitter.fire('\\x1bc');\n\t}\n\n\tpublic resetFor(resultId: string | undefined, title: string) {\n\t\tthis.ended = false;\n\t\tthis.resultId = resultId;\n\t\tthis.titleEmitter.fire(title);\n\t}\n\n\t//#region implementation\n\tpublic readonly id = 0;\n\tpublic readonly shouldPersist = false;\n\n\tpublic readonly onProcessData = this.processDataEmitter.event;\n\tpublic readonly onProcessExit = this._register(new Emitter<number | undefined>()).event;\n\tpublic readonly onProcessReady = this._register(new Emitter<{ pid: number; cwd: string; }>()).event;\n\tpublic readonly onProcessTitleChanged = this.titleEmitter.event;\n\tpublic readonly onProcessShellTypeChanged = this._register(new Emitter<TerminalShellType>()).event;\n\n\tpublic start(): Promise<ITerminalLaunchError | undefined> {\n\t\tthis.startedDeferred.complete();\n\t\treturn Promise.resolve(undefined);\n\t}\n\tpublic shutdown(): void {\n\t\t// no-op\n\t}\n\tpublic input(): void {\n\t\t// not supported\n\t}\n\tpublic processBinary(): Promise<void> {\n\t\treturn Promise.resolve();\n\t}\n\tpublic resize(): void {\n\t\t// no-op\n\t}\n\tpublic acknowledgeDataEvent(): void {\n\t\t// no-op, flow control not currently implemented\n\t}\n\n\tpublic getInitialCwd(): Promise<string> {\n\t\treturn Promise.resolve('');\n\t}\n\n\tpublic getCwd(): Promise<string> {\n\t\treturn Promise.resolve('');\n\t}\n\n\tpublic getLatency(): Promise<number> {\n\t\treturn Promise.resolve(0);\n\t}\n\t//#endregion\n}\n"]}