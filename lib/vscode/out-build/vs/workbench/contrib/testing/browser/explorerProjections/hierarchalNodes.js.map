{"version":3,"file":"hierarchalNodes.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/testing/browser/explorerProjections/hierarchalNodes.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAKhG;;OAEG;IACH,MAAa,yBAA0B,SAAQ,2BAAmB;QAKjE,YACC,IAAsB,EACtB,MAA2D,EACxC,cAAoD;YAEvE,KAAK,iCAAM,IAAI,KAAE,IAAI,oBAAO,IAAI,CAAC,IAAI,MAAM,MAAM,CAAC,CAAC;YAFhC,mBAAc,GAAd,cAAc,CAAsC;YAGvE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YACrB,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAC7B,CAAC;QAEM,MAAM,CAAC,KAAsB;YACnC,CAAA,GAAA,oCAAmB,CAAA,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YACtC,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAC7B,CAAC;QAEO,oBAAoB;YAC3B,IAAI,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;gBAC7C,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBACrC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBACtC,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;aAC5B;iBAAM,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;gBACpD,IAAI,CAAC,UAAU,GAAG,IAAI,4BAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;gBACvE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBACnC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;aACrC;QACF,CAAC;KACD;IA/BD,8DA+BC;IAED;;OAEG;IACH,MAAa,uBAAwB,SAAQ,+BAAuB;QAApE;;YAC0B,aAAQ,GAAG,IAAI,GAAG,EAA6B,CAAC;QAC1E,CAAC;KAAA;IAFD,0DAEC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { TestExplorerTreeElement, TestItemTreeElement, TestTreeErrorMessage, TestTreeWorkspaceFolder } from 'vs/workbench/contrib/testing/browser/explorerProjections/index';\nimport { applyTestItemUpdate, InternalTestItem, ITestItemUpdate } from 'vs/workbench/contrib/testing/common/testCollection';\n\n/**\n * Test tree element element that groups be hierarchy.\n */\nexport class ByLocationTestItemElement extends TestItemTreeElement {\n\tprivate errorChild?: TestTreeErrorMessage;\n\n\tpublic override readonly parent: ByLocationFolderElement | ByLocationTestItemElement;\n\n\tconstructor(\n\t\ttest: InternalTestItem,\n\t\tparent: ByLocationFolderElement | ByLocationTestItemElement,\n\t\tprotected readonly addedOrRemoved: (n: TestExplorerTreeElement) => void,\n\t) {\n\t\tsuper({ ...test, item: { ...test.item } }, parent);\n\t\tthis.parent = parent;\n\t\tthis.updateErrorVisiblity();\n\t}\n\n\tpublic update(patch: ITestItemUpdate) {\n\t\tapplyTestItemUpdate(this.test, patch);\n\t\tthis.updateErrorVisiblity();\n\t}\n\n\tprivate updateErrorVisiblity() {\n\t\tif (this.errorChild && !this.test.item.error) {\n\t\t\tthis.addedOrRemoved(this.errorChild);\n\t\t\tthis.children.delete(this.errorChild);\n\t\t\tthis.errorChild = undefined;\n\t\t} else if (this.test.item.error && !this.errorChild) {\n\t\t\tthis.errorChild = new TestTreeErrorMessage(this.test.item.error, this);\n\t\t\tthis.children.add(this.errorChild);\n\t\t\tthis.addedOrRemoved(this.errorChild);\n\t\t}\n\t}\n}\n\n/**\n * Workspace folder in the location view.\n */\nexport class ByLocationFolderElement extends TestTreeWorkspaceFolder {\n\tpublic override readonly children = new Set<ByLocationTestItemElement>();\n}\n"]}