{"version":3,"file":"testingUri.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/testing/common/testingUri.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAInF,QAAA,gBAAgB,GAAG,kBAAkB,CAAC;IAEnD,IAAkB,WAIjB;IAJD,WAAkB,WAAW;QAC5B,+DAAa,CAAA;QACb,yEAAkB,CAAA;QAClB,6EAAoB,CAAA;IACrB,CAAC,EAJiB,WAAW,GAAX,mBAAW,KAAX,mBAAW,QAI5B;IAsBD,IAAW,YAOV;IAPD,WAAW,YAAY;QACtB,mCAAmB,CAAA;QAEnB,oCAAoB,CAAA;QACpB,6BAAa,CAAA;QACb,6CAA6B,CAAA;QAC7B,iDAAiC,CAAA;IAClC,CAAC,EAPU,YAAY,KAAZ,YAAY,QAOtB;IAEM,MAAM,YAAY,GAAG,CAAC,GAAQ,EAA6B,EAAE;QACnE,MAAM,IAAI,GAAG,GAAG,CAAC,SAAS,CAAC;QAC3B,MAAM,CAAC,UAAU,EAAE,GAAG,OAAO,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAE9D,IAAI,OAAO,CAAC,CAAC,CAAC,6BAA0B,EAAE;YACzC,MAAM,SAAS,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;YACrC,MAAM,KAAK,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;YACjC,MAAM,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;YACxB,MAAM,SAAS,GAAG,GAAG,CAAC,KAAK,CAAC;YAC5B,IAAI,IAAI,4BAAyB,EAAE;gBAClC,QAAQ,IAAI,EAAE;oBACb;wBACC,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,SAAS,EAAE,SAAS,EAAE,YAAY,EAAE,KAAK,EAAE,IAAI,uBAA2B,EAAE,CAAC;oBAC7G;wBACC,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,SAAS,EAAE,SAAS,EAAE,YAAY,EAAE,KAAK,EAAE,IAAI,4BAAgC,EAAE,CAAC;oBAClH;wBACC,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,SAAS,EAAE,SAAS,EAAE,YAAY,EAAE,KAAK,EAAE,IAAI,8BAAkC,EAAE,CAAC;iBACpH;aACD;SACD;QAED,OAAO,SAAS,CAAC;IAClB,CAAC,CAAC;IAtBW,QAAA,YAAY,gBAsBvB;IAEK,MAAM,YAAY,GAAG,CAAC,MAAqB,EAAO,EAAE;QAC1D,MAAM,QAAQ,GAAG;YAChB,MAAM,EAAE,wBAAgB;YACxB,SAAS,yBAAsB;SAC/B,CAAC;QACF,MAAM,MAAM,GAAG,CAAC,UAAkB,EAAE,GAAG,SAA8B,EAAE,EAAE,CACxE,SAAG,CAAC,IAAI,iCACJ,QAAQ,KACX,KAAK,EAAE,MAAM,CAAC,SAAS,EACvB,IAAI,EAAE,CAAC,EAAE,EAAE,UAAU,4BAAyB,GAAG,SAAS,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,IACpE,CAAC;QAEJ,QAAQ,MAAM,CAAC,IAAI,EAAE;YACpB;gBACC,OAAO,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,SAAS,EAAE,MAAM,CAAC,YAAY,oCAA4B,CAAC;YAClG;gBACC,OAAO,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,SAAS,EAAE,MAAM,CAAC,YAAY,wCAA8B,CAAC;YACpG;gBACC,OAAO,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,SAAS,EAAE,MAAM,CAAC,YAAY,oBAAoB,CAAC;YAC1F;gBACC,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;SACrC;IACF,CAAC,CAAC;IAtBW,QAAA,YAAY,gBAsBvB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\n\nexport const TEST_DATA_SCHEME = 'vscode-test-data';\n\nexport const enum TestUriType {\n\tResultMessage,\n\tResultActualOutput,\n\tResultExpectedOutput,\n}\n\ninterface IResultTestUri {\n\tresultId: string;\n\ttaskIndex: number;\n\ttestExtId: string;\n}\n\ninterface IResultTestMessageReference extends IResultTestUri {\n\ttype: TestUriType.ResultMessage;\n\tmessageIndex: number;\n}\n\ninterface IResultTestOutputReference extends IResultTestUri {\n\ttype: TestUriType.ResultActualOutput | TestUriType.ResultExpectedOutput;\n\tmessageIndex: number;\n}\n\nexport type ParsedTestUri =\n\t| IResultTestMessageReference\n\t| IResultTestOutputReference;\n\nconst enum TestUriParts {\n\tResults = 'results',\n\n\tMessages = 'message',\n\tText = 'text',\n\tActualOutput = 'actualOutput',\n\tExpectedOutput = 'expectedOutput',\n}\n\nexport const parseTestUri = (uri: URI): ParsedTestUri | undefined => {\n\tconst type = uri.authority;\n\tconst [locationId, ...request] = uri.path.slice(1).split('/');\n\n\tif (request[0] === TestUriParts.Messages) {\n\t\tconst taskIndex = Number(request[1]);\n\t\tconst index = Number(request[2]);\n\t\tconst part = request[3];\n\t\tconst testExtId = uri.query;\n\t\tif (type === TestUriParts.Results) {\n\t\t\tswitch (part) {\n\t\t\t\tcase TestUriParts.Text:\n\t\t\t\t\treturn { resultId: locationId, taskIndex, testExtId, messageIndex: index, type: TestUriType.ResultMessage };\n\t\t\t\tcase TestUriParts.ActualOutput:\n\t\t\t\t\treturn { resultId: locationId, taskIndex, testExtId, messageIndex: index, type: TestUriType.ResultActualOutput };\n\t\t\t\tcase TestUriParts.ExpectedOutput:\n\t\t\t\t\treturn { resultId: locationId, taskIndex, testExtId, messageIndex: index, type: TestUriType.ResultExpectedOutput };\n\t\t\t}\n\t\t}\n\t}\n\n\treturn undefined;\n};\n\nexport const buildTestUri = (parsed: ParsedTestUri): URI => {\n\tconst uriParts = {\n\t\tscheme: TEST_DATA_SCHEME,\n\t\tauthority: TestUriParts.Results\n\t};\n\tconst msgRef = (locationId: string, ...remaining: (string | number)[]) =>\n\t\tURI.from({\n\t\t\t...uriParts,\n\t\t\tquery: parsed.testExtId,\n\t\t\tpath: ['', locationId, TestUriParts.Messages, ...remaining].join('/'),\n\t\t});\n\n\tswitch (parsed.type) {\n\t\tcase TestUriType.ResultActualOutput:\n\t\t\treturn msgRef(parsed.resultId, parsed.taskIndex, parsed.messageIndex, TestUriParts.ActualOutput);\n\t\tcase TestUriType.ResultExpectedOutput:\n\t\t\treturn msgRef(parsed.resultId, parsed.taskIndex, parsed.messageIndex, TestUriParts.ExpectedOutput);\n\t\tcase TestUriType.ResultMessage:\n\t\t\treturn msgRef(parsed.resultId, parsed.taskIndex, parsed.messageIndex, TestUriParts.Text);\n\t\tdefault:\n\t\t\tthrow new Error('Invalid test uri');\n\t}\n};\n"]}