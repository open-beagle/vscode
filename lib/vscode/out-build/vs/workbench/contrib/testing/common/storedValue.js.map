{"version":3,"file":"storedValue.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/testing/common/storedValue.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAUhG,MAAM,oBAAoB,GAAmC;QAC5D,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;QAC/B,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;KACjC,CAAC;IASF;;OAEG;IACH,IAAa,WAAW,GAAxB,MAAa,WAAW;QAWvB,YACC,OAA+B,EACG,OAAwB;;YAAxB,YAAO,GAAP,OAAO,CAAiB;YAP3D;;eAEG;YACa,gBAAW,GAAG,aAAK,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC,GAAG,CAAC,CAAC;YAMlG,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;YACvB,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;YAC3B,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;YAC7B,IAAI,CAAC,aAAa,GAAG,MAAA,OAAO,CAAC,aAAa,mCAAI,oBAAoB,CAAC;QACpE,CAAC;QAYM,GAAG,CAAC,YAAgB;YAC1B,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;YACrD,OAAO,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QACnF,CAAC;QAED;;;WAGG;QACI,KAAK,CAAC,KAAQ;YACpB,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAC5F,CAAC;QAED;;WAEG;QACI,MAAM;YACZ,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAC3C,CAAC;KACD,CAAA;IAlDY,WAAW;QAarB,WAAA,yBAAe,CAAA;OAbL,WAAW,CAkDvB;IAlDY,kCAAW","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\n\nexport interface IStoredValueSerialization<T> {\n\tdeserialize(data: string): T;\n\tserialize(data: T): string;\n}\n\nconst defaultSerialization: IStoredValueSerialization<any> = {\n\tdeserialize: d => JSON.parse(d),\n\tserialize: d => JSON.stringify(d),\n};\n\ninterface IStoredValueOptions<T> {\n\tkey: string;\n\tscope: StorageScope;\n\ttarget: StorageTarget;\n\tserialization?: IStoredValueSerialization<T>;\n}\n\n/**\n * todo@connor4312: is this worthy to be in common?\n */\nexport class StoredValue<T> {\n\tprivate readonly serialization: IStoredValueSerialization<T>;\n\tprivate readonly key: string;\n\tprivate readonly scope: StorageScope;\n\tprivate readonly target: StorageTarget;\n\n\t/**\n\t * Emitted whenever the value is updated or deleted.\n\t */\n\tpublic readonly onDidChange = Event.filter(this.storage.onDidChangeValue, e => e.key === this.key);\n\n\tconstructor(\n\t\toptions: IStoredValueOptions<T>,\n\t\t@IStorageService private readonly storage: IStorageService,\n\t) {\n\t\tthis.key = options.key;\n\t\tthis.scope = options.scope;\n\t\tthis.target = options.target;\n\t\tthis.serialization = options.serialization ?? defaultSerialization;\n\t}\n\n\t/**\n\t * Reads the value, returning the undefined if it's not set.\n\t */\n\tpublic get(): T | undefined;\n\n\t/**\n\t * Reads the value, returning the default value if it's not set.\n\t */\n\tpublic get(defaultValue: T): T;\n\n\tpublic get(defaultValue?: T): T | undefined {\n\t\tconst value = this.storage.get(this.key, this.scope);\n\t\treturn value === undefined ? defaultValue : this.serialization.deserialize(value);\n\t}\n\n\t/**\n\t * Persists changes to the value.\n\t * @param value\n\t */\n\tpublic store(value: T) {\n\t\tthis.storage.store(this.key, this.serialization.serialize(value), this.scope, this.target);\n\t}\n\n\t/**\n\t * Delete an element stored under the provided key from storage.\n\t */\n\tpublic delete() {\n\t\tthis.storage.remove(this.key, this.scope);\n\t}\n}\n"]}