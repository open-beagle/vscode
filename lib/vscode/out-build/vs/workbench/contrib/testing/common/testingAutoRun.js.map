{"version":3,"file":"testingAutoRun.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/testing/common/testingAutoRun.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { RunOnceScheduler } from 'vs/base/common/async';\nimport { CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { Disposable, DisposableStore, MutableDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IContextKey, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { AutoRunMode, getTestingConfiguration, TestingConfigKeys } from 'vs/workbench/contrib/testing/common/configuration';\nimport { TestDiffOpType, TestIdWithMaybeSrc } from 'vs/workbench/contrib/testing/common/testCollection';\nimport { TestingContextKeys } from 'vs/workbench/contrib/testing/common/testingContextKeys';\nimport { TestResultItemChangeReason } from 'vs/workbench/contrib/testing/common/testResult';\nimport { ITestResultService } from 'vs/workbench/contrib/testing/common/testResultService';\nimport { ITestService } from 'vs/workbench/contrib/testing/common/testService';\nimport { IWorkspaceTestCollectionService } from 'vs/workbench/contrib/testing/common/workspaceTestCollectionService';\n\nexport interface ITestingAutoRun {\n\t/**\n\t * Toggles autorun on or off.\n\t */\n\ttoggle(): void;\n}\n\nexport const ITestingAutoRun = createDecorator<ITestingAutoRun>('testingAutoRun');\n\nexport class TestingAutoRun extends Disposable implements ITestingAutoRun {\n\tprivate enabled: IContextKey<boolean>;\n\tprivate runner = this._register(new MutableDisposable());\n\n\tconstructor(\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@ITestService private readonly testService: ITestService,\n\t\t@ITestResultService private readonly results: ITestResultService,\n\t\t@IConfigurationService private readonly configuration: IConfigurationService,\n\t\t@IWorkspaceTestCollectionService private readonly workspaceTests: IWorkspaceTestCollectionService,\n\t) {\n\t\tsuper();\n\t\tthis.enabled = TestingContextKeys.autoRun.bindTo(contextKeyService);\n\n\t\tthis._register(configuration.onDidChangeConfiguration(evt => {\n\t\t\tif (evt.affectsConfiguration(TestingConfigKeys.AutoRunMode) && this.enabled.get()) {\n\t\t\t\tthis.runner.value = this.makeRunner();\n\t\t\t}\n\t\t}));\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic toggle(): void {\n\t\tconst enabled = this.enabled.get();\n\t\tif (enabled) {\n\t\t\tthis.runner.value = undefined;\n\t\t} else {\n\t\t\tthis.runner.value = this.makeRunner();\n\t\t}\n\n\t\tthis.enabled.set(!enabled);\n\t}\n\n\t/**\n\t * Creates the runner. Is triggered when tests are marked as retired.\n\t * Runs them on a debounce.\n\t */\n\tprivate makeRunner() {\n\t\tlet isRunning = false;\n\t\tconst rerunIds = new Map<string, TestIdWithMaybeSrc>();\n\t\tconst store = new DisposableStore();\n\t\tconst cts = new CancellationTokenSource();\n\t\tstore.add(toDisposable(() => cts.dispose(true)));\n\n\t\tlet delay = getTestingConfiguration(this.configuration, TestingConfigKeys.AutoRunDelay);\n\n\t\tstore.add(this.configuration.onDidChangeConfiguration(() => {\n\t\t\tdelay = getTestingConfiguration(this.configuration, TestingConfigKeys.AutoRunDelay);\n\t\t}));\n\n\t\tconst scheduler = store.add(new RunOnceScheduler(async () => {\n\t\t\tconst tests = [...rerunIds.values()];\n\n\t\t\tisRunning = true;\n\t\t\trerunIds.clear();\n\t\t\tawait this.testService.runTests({ debug: false, tests, isAutoRun: true });\n\t\t\tisRunning = false;\n\n\t\t\tif (rerunIds.size > 0) {\n\t\t\t\tscheduler.schedule(delay);\n\t\t\t}\n\t\t}, delay));\n\n\t\tconst addToRerun = (test: TestIdWithMaybeSrc) => {\n\t\t\trerunIds.set(`${test.testId}/${test.src?.controller}`, test);\n\t\t\tif (!isRunning) {\n\t\t\t\tscheduler.schedule(delay);\n\t\t\t}\n\t\t};\n\n\t\tstore.add(this.results.onTestChanged(evt => {\n\t\t\tif (evt.reason === TestResultItemChangeReason.Retired) {\n\t\t\t\taddToRerun({ testId: evt.item.item.extId });\n\t\t\t}\n\t\t}));\n\n\t\tif (getTestingConfiguration(this.configuration, TestingConfigKeys.AutoRunMode) === AutoRunMode.AllInWorkspace) {\n\t\t\tconst sub = this.workspaceTests.subscribeToWorkspaceTests();\n\t\t\tstore.add(sub);\n\n\t\t\tsub.waitForAllRoots(cts.token).then(() => {\n\t\t\t\tif (!cts.token.isCancellationRequested) {\n\t\t\t\t\tfor (const [, collection] of sub.workspaceFolderCollections) {\n\t\t\t\t\t\tfor (const rootId of collection.rootIds) {\n\t\t\t\t\t\t\tconst root = collection.getNodeById(rootId);\n\t\t\t\t\t\t\tif (root) { addToRerun({ testId: root.item.extId, src: root.src }); }\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tstore.add(sub.onDiff(([, diff]) => {\n\t\t\t\tfor (const entry of diff) {\n\t\t\t\t\tif (entry[0] === TestDiffOpType.Add) {\n\t\t\t\t\t\taddToRerun({ testId: entry[1].item.extId, src: entry[1].src });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\n\t\treturn store;\n\t}\n}\n"]}