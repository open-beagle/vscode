{"version":3,"file":"testingContentProvider.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/testing/common/testingContentProvider.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAUhG;;;OAGG;IACH,IAAa,sBAAsB,GAAnC,MAAa,sBAAsB;QAClC,YACoB,wBAA2C,EAC9B,YAA2B,EACtB,aAAiC;YADtC,iBAAY,GAAZ,YAAY,CAAe;YACtB,kBAAa,GAAb,aAAa,CAAoB;YAEtE,wBAAwB,CAAC,gCAAgC,CAAC,6BAAgB,EAAE,IAAI,CAAC,CAAC;QACnF,CAAC;QAED;;WAEG;QACI,KAAK,CAAC,kBAAkB,CAAC,QAAa;;YAC5C,MAAM,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;YACtD,IAAI,QAAQ,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,EAAE;gBACvC,OAAO,QAAQ,CAAC;aAChB;YAED,MAAM,MAAM,GAAG,CAAA,GAAA,yBAAY,CAAA,CAAC,QAAQ,CAAC,CAAC;YACtC,IAAI,CAAC,MAAM,EAAE;gBACZ,OAAO,IAAI,CAAC;aACZ;YAED,MAAM,IAAI,GAAG,MAAA,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,0CAAE,YAAY,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;YAE3F,IAAI,CAAC,IAAI,EAAE;gBACV,OAAO,IAAI,CAAC;aACZ;YAED,IAAI,IAAwB,CAAC;YAC7B,QAAQ,MAAM,CAAC,IAAI,EAAE;gBACpB;oBACC,IAAI,GAAG,MAAA,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,YAAY,CAAC,0CAAE,YAAY,CAAC;oBAChF,MAAM;gBACP;oBACC,IAAI,GAAG,MAAA,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,YAAY,CAAC,0CAAE,cAAc,CAAC;oBAClF,MAAM;gBACP;oBACC,IAAI,GAAG,MAAA,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,YAAY,CAAC,0CAAE,OAAO,CAAC,QAAQ,EAAE,CAAC;oBACtF,MAAM;aACP;YAED,IAAI,IAAI,KAAK,SAAS,EAAE;gBACvB,OAAO,IAAI,CAAC;aACZ;YAED,OAAO,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;QAClE,CAAC;KACD,CAAA;IAhDY,sBAAsB;QAEhC,WAAA,mCAAiB,CAAA;QACjB,WAAA,4BAAa,CAAA;QACb,WAAA,sCAAkB,CAAA;OAJR,sBAAsB,CAgDlC;IAhDY,wDAAsB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { ITextModelContentProvider, ITextModelService } from 'vs/editor/common/services/resolverService';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { parseTestUri, TestUriType, TEST_DATA_SCHEME } from 'vs/workbench/contrib/testing/common/testingUri';\nimport { ITestResultService } from 'vs/workbench/contrib/testing/common/testResultService';\n\n/**\n * A content provider that returns various outputs for tests. This is used\n * in the inline peek view.\n */\nexport class TestingContentProvider implements IWorkbenchContribution, ITextModelContentProvider {\n\tconstructor(\n\t\t@ITextModelService textModelResolverService: ITextModelService,\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@ITestResultService private readonly resultService: ITestResultService,\n\t) {\n\t\ttextModelResolverService.registerTextModelContentProvider(TEST_DATA_SCHEME, this);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic async provideTextContent(resource: URI): Promise<ITextModel | null> {\n\t\tconst existing = this.modelService.getModel(resource);\n\t\tif (existing && !existing.isDisposed()) {\n\t\t\treturn existing;\n\t\t}\n\n\t\tconst parsed = parseTestUri(resource);\n\t\tif (!parsed) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst test = this.resultService.getResult(parsed.resultId)?.getStateById(parsed.testExtId);\n\n\t\tif (!test) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet text: string | undefined;\n\t\tswitch (parsed.type) {\n\t\t\tcase TestUriType.ResultActualOutput:\n\t\t\t\ttext = test.tasks[parsed.taskIndex].messages[parsed.messageIndex]?.actualOutput;\n\t\t\t\tbreak;\n\t\t\tcase TestUriType.ResultExpectedOutput:\n\t\t\t\ttext = test.tasks[parsed.taskIndex].messages[parsed.messageIndex]?.expectedOutput;\n\t\t\t\tbreak;\n\t\t\tcase TestUriType.ResultMessage:\n\t\t\t\ttext = test.tasks[parsed.taskIndex].messages[parsed.messageIndex]?.message.toString();\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (text === undefined) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this.modelService.createModel(text, null, resource, true);\n\t}\n}\n"]}