{"version":3,"file":"testResult.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/testing/common/testResult.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { newWriteableBufferStream, VSBuffer, VSBufferReadableStream, VSBufferWriteableStream } from 'vs/base/common/buffer';\nimport { Emitter } from 'vs/base/common/event';\nimport { Lazy } from 'vs/base/common/lazy';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { Range } from 'vs/editor/common/core/range';\nimport { TestResultState } from 'vs/workbench/api/common/extHostTypes';\nimport { IComputedStateAccessor, refreshComputedState } from 'vs/workbench/contrib/testing/common/getComputedState';\nimport { ExtensionRunTestsRequest, ISerializedTestResults, ITestItem, ITestMessage, ITestRunTask, ITestTaskState, RunTestsRequest, TestIdPath, TestResultItem } from 'vs/workbench/contrib/testing/common/testCollection';\nimport { maxPriority, statesInOrder } from 'vs/workbench/contrib/testing/common/testingStates';\n\nexport interface ITestResult {\n\t/**\n\t * Count of the number of tests in each run state.\n\t */\n\treadonly counts: Readonly<TestStateCount>;\n\n\t/**\n\t * Unique ID of this set of test results.\n\t */\n\treadonly id: string;\n\n\t/**\n\t * If the test is completed, the unix milliseconds time at which it was\n\t * completed. If undefined, the test is still running.\n\t */\n\treadonly completedAt: number | undefined;\n\n\t/**\n\t * Whether this test result is triggered from an auto run.\n\t */\n\treadonly isAutoRun?: boolean;\n\n\t/**\n\t * Gets all tests involved in the run.\n\t */\n\ttests: IterableIterator<TestResultItem>;\n\n\t/**\n\t * List of this result's subtasks.\n\t */\n\ttasks: ReadonlyArray<ITestRunTask>;\n\n\t/**\n\t * Gets the state of the test by its extension-assigned ID.\n\t */\n\tgetStateById(testExtId: string): TestResultItem | undefined;\n\n\t/**\n\t * Loads the output of the result as a stream.\n\t */\n\tgetOutput(): Promise<VSBufferReadableStream>;\n\n\t/**\n\t * Serializes the test result. Used to save and restore results\n\t * in the workspace.\n\t */\n\ttoJSON(): ISerializedTestResults | undefined;\n}\n\nexport const getPathForTestInResult = (test: TestResultItem, results: ITestResult): TestIdPath => {\n\tconst path = [test];\n\twhile (true) {\n\t\tconst parentId = path[0].parent;\n\t\tconst parent = parentId && results.getStateById(parentId);\n\t\tif (!parent) {\n\t\t\tbreak;\n\t\t}\n\n\t\tpath.unshift(parent);\n\t}\n\n\treturn path.map(t => t.item.extId);\n};\n\n/**\n * Count of the number of tests in each run state.\n */\nexport type TestStateCount = { [K in TestResultState]: number };\n\nexport const makeEmptyCounts = () => {\n\tconst o: Partial<TestStateCount> = {};\n\tfor (const state of statesInOrder) {\n\t\to[state] = 0;\n\t}\n\n\treturn o as TestStateCount;\n};\n\nexport const sumCounts = (counts: Iterable<TestStateCount>) => {\n\tconst total = makeEmptyCounts();\n\tfor (const count of counts) {\n\t\tfor (const state of statesInOrder) {\n\t\t\ttotal[state] += count[state];\n\t\t}\n\t}\n\n\treturn total;\n};\n\n/**\n * Deals with output of a {@link LiveTestResult}. By default we pass-through\n * data into the underlying write stream, but if a client requests to read it\n * we splice in the written data and then continue streaming incoming data.\n */\nexport class LiveOutputController {\n\t/** Set on close() to a promise that is resolved once closing is complete */\n\tprivate closed?: Promise<void>;\n\t/** Data written so far. This is available until the file closes. */\n\tprivate previouslyWritten: VSBuffer[] | undefined = [];\n\n\tprivate readonly dataEmitter = new Emitter<VSBuffer>();\n\tprivate readonly endEmitter = new Emitter<void>();\n\n\tconstructor(\n\t\tprivate readonly writer: Lazy<[VSBufferWriteableStream, Promise<void>]>,\n\t\tprivate readonly reader: () => Promise<VSBufferReadableStream>,\n\t) { }\n\n\t/**\n\t * Appends data to the output.\n\t */\n\tpublic append(data: VSBuffer): Promise<void> | void {\n\t\tif (this.closed) {\n\t\t\treturn this.closed;\n\t\t}\n\n\t\tthis.previouslyWritten?.push(data);\n\t\tthis.dataEmitter.fire(data);\n\n\t\treturn this.writer.getValue()[0].write(data);\n\t}\n\n\t/**\n\t * Reads the value of the stream.\n\t */\n\tpublic read() {\n\t\tif (!this.previouslyWritten) {\n\t\t\treturn this.reader();\n\t\t}\n\n\t\tconst stream = newWriteableBufferStream();\n\t\tfor (const chunk of this.previouslyWritten) {\n\t\t\tstream.write(chunk);\n\t\t}\n\n\t\tconst disposable = new DisposableStore();\n\t\tdisposable.add(this.dataEmitter.event(d => stream.write(d)));\n\t\tdisposable.add(this.endEmitter.event(() => stream.end()));\n\t\tstream.on('end', () => disposable.dispose());\n\n\t\treturn Promise.resolve(stream);\n\t}\n\n\t/**\n\t * Closes the output, signalling no more writes will be made.\n\t * @returns a promise that resolves when the output is written\n\t */\n\tpublic close(): Promise<void> {\n\t\tif (this.closed) {\n\t\t\treturn this.closed;\n\t\t}\n\n\t\tif (!this.writer.hasValue()) {\n\t\t\tthis.closed = Promise.resolve();\n\t\t} else {\n\t\t\tconst [stream, ended] = this.writer.getValue();\n\t\t\tstream.end();\n\t\t\tthis.closed = ended;\n\t\t}\n\n\t\tthis.endEmitter.fire();\n\t\tthis.closed.then(() => {\n\t\t\tthis.previouslyWritten = undefined;\n\t\t\tthis.dataEmitter.dispose();\n\t\t\tthis.endEmitter.dispose();\n\t\t});\n\n\t\treturn this.closed;\n\t}\n}\n\ninterface TestResultItemWithChildren extends TestResultItem {\n\t/** Children in the run */\n\tchildren: TestResultItemWithChildren[];\n}\n\nconst itemToNode = (item: ITestItem, parent: string | null): TestResultItemWithChildren => ({\n\tparent,\n\titem: { ...item },\n\tchildren: [],\n\ttasks: [],\n\townComputedState: TestResultState.Unset,\n\tcomputedState: TestResultState.Unset,\n\tretired: false,\n});\n\nexport const enum TestResultItemChangeReason {\n\tRetired,\n\tParentRetired,\n\tComputedStateChange,\n\tOwnStateChange,\n}\n\nexport type TestResultItemChange = { item: TestResultItem; result: ITestResult } & (\n\t| { reason: TestResultItemChangeReason.Retired | TestResultItemChangeReason.ParentRetired | TestResultItemChangeReason.ComputedStateChange }\n\t| { reason: TestResultItemChangeReason.OwnStateChange; previous: TestResultState }\n);\n\n/**\n * Results of a test. These are created when the test initially started running\n * and marked as \"complete\" when the run finishes.\n */\nexport class LiveTestResult implements ITestResult {\n\tprivate readonly completeEmitter = new Emitter<void>();\n\tprivate readonly changeEmitter = new Emitter<TestResultItemChange>();\n\tprivate readonly testById = new Map<string, TestResultItemWithChildren>();\n\tprivate _completedAt?: number;\n\n\tpublic readonly onChange = this.changeEmitter.event;\n\tpublic readonly onComplete = this.completeEmitter.event;\n\tpublic readonly tasks: ITestRunTask[] = [];\n\n\t/**\n\t * Test IDs directly included in this run.\n\t */\n\tpublic readonly includedIds: ReadonlySet<string>;\n\n\t/**\n\t * Test IDs excluded from this run.\n\t */\n\tpublic readonly excludedIds: ReadonlySet<string>;\n\n\t/**\n\t * Gets whether this test is from an auto-run.\n\t */\n\tpublic readonly isAutoRun: boolean;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic get completedAt() {\n\t\treturn this._completedAt;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly counts: { [K in TestResultState]: number } = makeEmptyCounts();\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic get tests() {\n\t\treturn this.testById.values();\n\t}\n\n\tprivate readonly computedStateAccessor: IComputedStateAccessor<TestResultItemWithChildren> = {\n\t\tgetOwnState: i => i.ownComputedState,\n\t\tgetCurrentComputedState: i => i.computedState,\n\t\tsetComputedState: (i, s) => i.computedState = s,\n\t\tgetChildren: i => i.children,\n\t\tgetParents: i => {\n\t\t\tconst { testById: testByExtId } = this;\n\t\t\treturn (function* () {\n\t\t\t\tfor (let parentId = i.parent; parentId;) {\n\t\t\t\t\tconst parent = testByExtId.get(parentId);\n\t\t\t\t\tif (!parent) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tyield parent;\n\t\t\t\t\tparentId = parent.parent;\n\t\t\t\t}\n\t\t\t})();\n\t\t},\n\t};\n\n\tconstructor(\n\t\tpublic readonly id: string,\n\t\tpublic readonly output: LiveOutputController,\n\t\tprivate readonly req: ExtensionRunTestsRequest | RunTestsRequest,\n\t) {\n\t\tthis.isAutoRun = 'isAutoRun' in this.req && !!this.req.isAutoRun;\n\t\tthis.includedIds = new Set(req.tests.map(t => typeof t === 'string' ? t : t.testId));\n\t\tthis.excludedIds = new Set(req.exclude);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic getStateById(extTestId: string) {\n\t\treturn this.testById.get(extTestId);\n\t}\n\n\t/**\n\t * Adds a new run task to the results.\n\t */\n\tpublic addTask(task: ITestRunTask) {\n\t\tconst index = this.tasks.length;\n\t\tthis.tasks.push(task);\n\n\t\tfor (const test of this.tests) {\n\t\t\ttest.tasks.push({ duration: undefined, messages: [], state: TestResultState.Unset });\n\t\t\tthis.fireUpdateAndRefresh(test, index, TestResultState.Queued);\n\t\t}\n\t}\n\n\t/**\n\t * Add the chain of tests to the run. The first test in the chain should\n\t * be either a test root, or a previously-known test.\n\t */\n\tpublic addTestChainToRun(chain: ReadonlyArray<ITestItem>) {\n\t\tlet parent = this.testById.get(chain[0].extId);\n\t\tif (!parent) { // must be a test root\n\t\t\tparent = this.addTestToRun(chain[0], null);\n\t\t}\n\n\t\tfor (let i = 1; i < chain.length; i++) {\n\t\t\tparent = this.addTestToRun(chain[i], parent.item.extId);\n\t\t}\n\n\t\tfor (let i = 0; i < this.tasks.length; i++) {\n\t\t\tthis.fireUpdateAndRefresh(parent, i, TestResultState.Queued);\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Updates the state of the test by its internal ID.\n\t */\n\tpublic updateState(testId: string, taskId: string, state: TestResultState, duration?: number) {\n\t\tconst entry = this.testById.get(testId);\n\t\tif (!entry) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst index = this.mustGetTaskIndex(taskId);\n\t\tif (duration !== undefined) {\n\t\t\tentry.tasks[index].duration = duration;\n\t\t}\n\n\t\tthis.fireUpdateAndRefresh(entry, index, state);\n\t}\n\n\t/**\n\t * Appends a message for the test in the run.\n\t */\n\tpublic appendMessage(testId: string, taskId: string, message: ITestMessage) {\n\t\tconst entry = this.testById.get(testId);\n\t\tif (!entry) {\n\t\t\treturn;\n\t\t}\n\n\t\tentry.tasks[this.mustGetTaskIndex(taskId)].messages.push(message);\n\t\tthis.changeEmitter.fire({\n\t\t\titem: entry,\n\t\t\tresult: this,\n\t\t\treason: TestResultItemChangeReason.OwnStateChange,\n\t\t\tprevious: entry.ownComputedState,\n\t\t});\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic getOutput() {\n\t\treturn this.output.read();\n\t}\n\n\t/**\n\t * Marks a test as retired. This can trigger it to be rerun in live mode.\n\t */\n\tpublic retire(testId: string) {\n\t\tconst root = this.testById.get(testId);\n\t\tif (!root || root.retired) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst queue = [[root]];\n\t\twhile (queue.length) {\n\t\t\tfor (const entry of queue.pop()!) {\n\t\t\t\tif (!entry.retired) {\n\t\t\t\t\tentry.retired = true;\n\t\t\t\t\tqueue.push(entry.children);\n\t\t\t\t\tthis.changeEmitter.fire({\n\t\t\t\t\t\tresult: this,\n\t\t\t\t\t\titem: entry,\n\t\t\t\t\t\treason: entry === root\n\t\t\t\t\t\t\t? TestResultItemChangeReason.Retired\n\t\t\t\t\t\t\t: TestResultItemChangeReason.ParentRetired\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Marks the task in the test run complete.\n\t */\n\tpublic markTaskComplete(taskId: string) {\n\t\tthis.tasks[this.mustGetTaskIndex(taskId)].running = false;\n\t\tthis.setAllToState(\n\t\t\tTestResultState.Unset,\n\t\t\ttaskId,\n\t\t\tt => t.state === TestResultState.Queued || t.state === TestResultState.Running,\n\t\t);\n\t}\n\n\t/**\n\t * Notifies the service that all tests are complete.\n\t */\n\tpublic markComplete() {\n\t\tif (this._completedAt !== undefined) {\n\t\t\tthrow new Error('cannot complete a test result multiple times');\n\t\t}\n\n\t\tfor (const task of this.tasks) {\n\t\t\tif (task.running) {\n\t\t\t\tthis.markTaskComplete(task.id);\n\t\t\t}\n\t\t}\n\n\t\tthis._completedAt = Date.now();\n\t\tthis.completeEmitter.fire();\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic toJSON(): ISerializedTestResults | undefined {\n\t\treturn this.completedAt && !('persist' in this.req && this.req.persist === false)\n\t\t\t? this.doSerialize.getValue()\n\t\t\t: undefined;\n\t}\n\n\t/**\n\t * Updates all tests in the collection to the given state.\n\t */\n\tprotected setAllToState(state: TestResultState, taskId: string, when: (task: ITestTaskState, item: TestResultItem) => boolean) {\n\t\tconst index = this.mustGetTaskIndex(taskId);\n\t\tfor (const test of this.testById.values()) {\n\t\t\tif (when(test.tasks[index], test)) {\n\t\t\t\tthis.fireUpdateAndRefresh(test, index, state);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate fireUpdateAndRefresh(entry: TestResultItem, taskIndex: number, newState: TestResultState) {\n\t\tconst previousOwnComputed = entry.ownComputedState;\n\t\tentry.tasks[taskIndex].state = newState;\n\t\tconst newOwnComputed = maxPriority(...entry.tasks.map(t => t.state));\n\t\tif (newOwnComputed === previousOwnComputed) {\n\t\t\treturn;\n\t\t}\n\n\t\tentry.ownComputedState = newOwnComputed;\n\t\tthis.counts[previousOwnComputed]--;\n\t\tthis.counts[newOwnComputed]++;\n\t\trefreshComputedState(this.computedStateAccessor, entry, t =>\n\t\t\tthis.changeEmitter.fire(\n\t\t\t\tt === entry\n\t\t\t\t\t? { item: entry, result: this, reason: TestResultItemChangeReason.OwnStateChange, previous: previousOwnComputed }\n\t\t\t\t\t: { item: t, result: this, reason: TestResultItemChangeReason.ComputedStateChange }\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate addTestToRun(item: ITestItem, parent: string | null) {\n\t\tconst node = itemToNode(item, parent);\n\t\tnode.direct = this.includedIds.has(item.extId);\n\t\tthis.testById.set(item.extId, node);\n\t\tthis.counts[TestResultState.Unset]++;\n\n\t\tif (parent) {\n\t\t\tthis.testById.get(parent)?.children.push(node);\n\t\t}\n\n\t\tif (this.tasks.length) {\n\t\t\tfor (let i = 0; i < this.tasks.length; i++) {\n\t\t\t\tnode.tasks.push({ duration: undefined, messages: [], state: TestResultState.Queued });\n\t\t\t}\n\t\t}\n\n\t\treturn node;\n\t}\n\n\tprivate mustGetTaskIndex(taskId: string) {\n\t\tconst index = this.tasks.findIndex(t => t.id === taskId);\n\t\tif (index === -1) {\n\t\t\tthrow new Error(`Unknown task ${taskId} in updateState`);\n\t\t}\n\n\t\treturn index;\n\t}\n\n\tprivate readonly doSerialize = new Lazy((): ISerializedTestResults => ({\n\t\tid: this.id,\n\t\tcompletedAt: this.completedAt!,\n\t\ttasks: this.tasks,\n\t\titems: [...this.testById.values()].map(entry => ({\n\t\t\t...entry,\n\t\t\tretired: undefined,\n\t\t\tsrc: undefined,\n\t\t\tchildren: [...entry.children.map(c => c.item.extId)],\n\t\t})),\n\t}));\n}\n\n/**\n * Test results hydrated from a previously-serialized test run.\n */\nexport class HydratedTestResult implements ITestResult {\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly counts = makeEmptyCounts();\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly id: string;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly completedAt: number;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly tasks: ITestRunTask[];\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic get tests() {\n\t\treturn this.testById.values();\n\t}\n\n\tprivate readonly testById = new Map<string, TestResultItem>();\n\n\tconstructor(\n\t\tprivate readonly serialized: ISerializedTestResults,\n\t\tprivate readonly outputLoader: () => Promise<VSBufferReadableStream>,\n\t\tprivate readonly persist = true,\n\t) {\n\t\tthis.id = serialized.id;\n\t\tthis.completedAt = serialized.completedAt;\n\t\tthis.tasks = serialized.tasks;\n\n\t\tfor (const item of serialized.items) {\n\t\t\tconst cast: TestResultItem = { ...item, retired: true };\n\t\t\tcast.item.uri = URI.revive(cast.item.uri);\n\n\t\t\tfor (const task of cast.tasks) {\n\t\t\t\tfor (const message of task.messages) {\n\t\t\t\t\tif (message.location) {\n\t\t\t\t\t\tmessage.location.uri = URI.revive(message.location.uri);\n\t\t\t\t\t\tmessage.location.range = Range.lift(message.location.range);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.counts[item.ownComputedState]++;\n\t\t\tthis.testById.set(item.item.extId, cast);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic getStateById(extTestId: string) {\n\t\treturn this.testById.get(extTestId);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic getOutput() {\n\t\treturn this.outputLoader();\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic toJSON(): ISerializedTestResults | undefined {\n\t\treturn this.persist ? this.serialized : undefined;\n\t}\n}\n"]}