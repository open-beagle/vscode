{"version":3,"file":"testCollection.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/testing/common/testCollection.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IMarkdownString } from 'vs/base/common/htmlContent';\nimport { URI } from 'vs/base/common/uri';\nimport { IRange, Range } from 'vs/editor/common/core/range';\nimport { ExtHostTestingResource } from 'vs/workbench/api/common/extHost.protocol';\nimport { TestMessageSeverity, TestResultState } from 'vs/workbench/api/common/extHostTypes';\n\nexport type TestIdWithSrc = Required<TestIdWithMaybeSrc>;\n\nexport interface TestIdWithMaybeSrc {\n\ttestId: string;\n\tsrc?: { controller: string; tree: number };\n}\n\n/**\n * Defines the path to a test, as a list of test IDs. The last element of the\n * array is the test ID, and the predecessors are its parents, in order.\n */\nexport type TestIdPath = string[];\n\n/**\n * Request to the main thread to run a set of tests.\n */\nexport interface RunTestsRequest {\n\ttests: TestIdWithMaybeSrc[];\n\texclude?: string[];\n\tdebug: boolean;\n\tisAutoRun?: boolean;\n}\n\n/**\n * Request to the main thread to run a set of tests.\n */\nexport interface ExtensionRunTestsRequest {\n\tid: string;\n\ttests: string[];\n\texclude: string[];\n\tdebug: boolean;\n\tpersist: boolean;\n}\n\n/**\n * Request from the main thread to run tests for a single controller.\n */\nexport interface RunTestForProviderRequest {\n\trunId: string;\n\texcludeExtIds: string[];\n\ttests: TestIdWithSrc[];\n\tdebug: boolean;\n}\n\n/**\n * Location with a fully-instantiated Range and URI.\n */\nexport interface IRichLocation {\n\trange: Range;\n\turi: URI;\n}\n\nexport interface ITestMessage {\n\tmessage: string | IMarkdownString;\n\tseverity: TestMessageSeverity;\n\texpectedOutput: string | undefined;\n\tactualOutput: string | undefined;\n\tlocation: IRichLocation | undefined;\n}\n\nexport interface ITestTaskState {\n\tstate: TestResultState;\n\tduration: number | undefined;\n\tmessages: ITestMessage[];\n}\n\nexport interface ITestRunTask {\n\tid: string;\n\tname: string | undefined;\n\trunning: boolean;\n}\n\n/**\n * The TestItem from .d.ts, as a plain object without children.\n */\nexport interface ITestItem {\n\t/** ID of the test given by the test controller */\n\textId: string;\n\tlabel: string;\n\tchildren?: never;\n\turi: URI;\n\trange: IRange | null;\n\tdescription: string | null;\n\terror: string | IMarkdownString | null;\n\trunnable: boolean;\n\tdebuggable: boolean;\n}\n\nexport const enum TestItemExpandState {\n\tNotExpandable,\n\tExpandable,\n\tBusyExpanding,\n\tExpanded,\n}\n\n/**\n * TestItem-like shape, butm with an ID and children as strings.\n */\nexport interface InternalTestItem {\n\tsrc: { controller: string; tree: number };\n\texpand: TestItemExpandState;\n\tparent: string | null;\n\titem: ITestItem;\n}\n\n/**\n * A partial update made to an existing InternalTestItem.\n */\nexport interface ITestItemUpdate {\n\textId: string;\n\texpand?: TestItemExpandState;\n\titem?: Partial<ITestItem>;\n}\n\nexport const applyTestItemUpdate = (internal: InternalTestItem | ITestItemUpdate, patch: ITestItemUpdate) => {\n\tif (patch.expand !== undefined) {\n\t\tinternal.expand = patch.expand;\n\t}\n\tif (patch.item !== undefined) {\n\t\tinternal.item = internal.item ? Object.assign(internal.item, patch.item) : patch.item;\n\t}\n};\n\n/**\n * Test result item used in the main thread.\n */\nexport interface TestResultItem {\n\t/** Parent ID, if any */\n\tparent: string | null;\n\t/** Raw test item properties */\n\titem: ITestItem;\n\t/** State of this test in various tasks */\n\ttasks: ITestTaskState[];\n\t/** State of this test as a computation of its tasks */\n\townComputedState: TestResultState;\n\t/** Computed state based on children */\n\tcomputedState: TestResultState;\n\t/** True if the test is outdated */\n\tretired: boolean;\n\t/** True if the test was directly requested by the run (is not a child or parent) */\n\tdirect?: boolean;\n}\n\nexport type SerializedTestResultItem = Omit<TestResultItem, 'children' | 'expandable' | 'retired'>\n\t& { children: string[], retired: undefined };\n\n/**\n * Test results serialized for transport and storage.\n */\nexport interface ISerializedTestResults {\n\t/** ID of these test results */\n\tid: string;\n\t/** Time the results were compelted */\n\tcompletedAt: number;\n\t/** Raw output, given for tests published by extensiosn */\n\toutput?: string;\n\t/** Subset of test result items */\n\titems: SerializedTestResultItem[];\n\t/** Tasks involved in the run. */\n\ttasks: ITestRunTask[];\n}\n\nexport const enum TestDiffOpType {\n\t/** Adds a new test (with children) */\n\tAdd,\n\t/** Shallow-updates an existing test */\n\tUpdate,\n\t/** Removes a test (and all its children) */\n\tRemove,\n\t/** Changes the number of controllers who are yet to publish their collection roots. */\n\tIncrementPendingExtHosts,\n\t/** Retires a test/result */\n\tRetire,\n}\n\nexport type TestsDiffOp =\n\t| [op: TestDiffOpType.Add, item: InternalTestItem]\n\t| [op: TestDiffOpType.Update, item: ITestItemUpdate]\n\t| [op: TestDiffOpType.Remove, itemId: string]\n\t| [op: TestDiffOpType.Retire, itemId: string]\n\t| [op: TestDiffOpType.IncrementPendingExtHosts, amount: number];\n\n/**\n * Utility function to get a unique string for a subscription to a resource,\n * useful to keep maps of document or workspace folder subscription info.\n */\nexport const getTestSubscriptionKey = (resource: ExtHostTestingResource, uri: URI) => `${resource}:${uri.toString()}`;\n\n/**\n * Request from the ext host or main thread to indicate that tests have\n * changed. It's assumed that any item upserted *must* have its children\n * previously also upserted, or upserted as part of the same operation.\n * Children that no longer exist in an upserted item will be removed.\n */\nexport type TestsDiff = TestsDiffOp[];\n\n/**\n * @private\n */\nexport interface IncrementalTestCollectionItem extends InternalTestItem {\n\tchildren: Set<string>;\n}\n\n/**\n * The IncrementalChangeCollector is used in the IncrementalTestCollection\n * and called with diff changes as they're applied. This is used in the\n * ext host to create a cohesive change event from a diff.\n */\nexport class IncrementalChangeCollector<T> {\n\t/**\n\t * A node was added.\n\t */\n\tpublic add(node: T): void { }\n\n\t/**\n\t * A node in the collection was updated.\n\t */\n\tpublic update(node: T): void { }\n\n\t/**\n\t * A node was removed.\n\t */\n\tpublic remove(node: T, isNestedOperation: boolean): void { }\n\n\t/**\n\t * Called when the diff has been applied.\n\t */\n\tpublic complete(): void { }\n}\n\n/**\n * Maintains tests in this extension host sent from the main thread.\n */\nexport abstract class AbstractIncrementalTestCollection<T extends IncrementalTestCollectionItem>  {\n\t/**\n\t * Map of item IDs to test item objects.\n\t */\n\tprotected readonly items = new Map<string, T>();\n\n\t/**\n\t * ID of test root items.\n\t */\n\tprotected readonly roots = new Set<string>();\n\n\t/**\n\t * Number of 'busy' controllers.\n\t */\n\tprotected busyControllerCount = 0;\n\n\t/**\n\t * Number of pending roots.\n\t */\n\tprotected pendingRootCount = 0;\n\n\t/**\n\t * Applies the diff to the collection.\n\t */\n\tpublic apply(diff: TestsDiff) {\n\t\tconst changes = this.createChangeCollector();\n\n\t\tfor (const op of diff) {\n\t\t\tswitch (op[0]) {\n\t\t\t\tcase TestDiffOpType.Add: {\n\t\t\t\t\tconst internalTest = op[1];\n\t\t\t\t\tif (!internalTest.parent) {\n\t\t\t\t\t\tthis.roots.add(internalTest.item.extId);\n\t\t\t\t\t\tconst created = this.createItem(internalTest);\n\t\t\t\t\t\tthis.items.set(internalTest.item.extId, created);\n\t\t\t\t\t\tchanges.add(created);\n\t\t\t\t\t} else if (this.items.has(internalTest.parent)) {\n\t\t\t\t\t\tconst parent = this.items.get(internalTest.parent)!;\n\t\t\t\t\t\tparent.children.add(internalTest.item.extId);\n\t\t\t\t\t\tconst created = this.createItem(internalTest, parent);\n\t\t\t\t\t\tthis.items.set(internalTest.item.extId, created);\n\t\t\t\t\t\tchanges.add(created);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (internalTest.expand === TestItemExpandState.BusyExpanding) {\n\t\t\t\t\t\tthis.busyControllerCount++;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tcase TestDiffOpType.Update: {\n\t\t\t\t\tconst patch = op[1];\n\t\t\t\t\tconst existing = this.items.get(patch.extId);\n\t\t\t\t\tif (!existing) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (patch.expand !== undefined) {\n\t\t\t\t\t\tif (existing.expand === TestItemExpandState.BusyExpanding) {\n\t\t\t\t\t\t\tthis.busyControllerCount--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (patch.expand === TestItemExpandState.BusyExpanding) {\n\t\t\t\t\t\t\tthis.busyControllerCount++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tapplyTestItemUpdate(existing, patch);\n\t\t\t\t\tchanges.update(existing);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tcase TestDiffOpType.Remove: {\n\t\t\t\t\tconst toRemove = this.items.get(op[1]);\n\t\t\t\t\tif (!toRemove) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (toRemove.parent) {\n\t\t\t\t\t\tconst parent = this.items.get(toRemove.parent)!;\n\t\t\t\t\t\tparent.children.delete(toRemove.item.extId);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.roots.delete(toRemove.item.extId);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst queue: Iterable<string>[] = [[op[1]]];\n\t\t\t\t\twhile (queue.length) {\n\t\t\t\t\t\tfor (const itemId of queue.pop()!) {\n\t\t\t\t\t\t\tconst existing = this.items.get(itemId);\n\t\t\t\t\t\t\tif (existing) {\n\t\t\t\t\t\t\t\tqueue.push(existing.children);\n\t\t\t\t\t\t\t\tthis.items.delete(itemId);\n\t\t\t\t\t\t\t\tchanges.remove(existing, existing !== toRemove);\n\n\t\t\t\t\t\t\t\tif (existing.expand === TestItemExpandState.BusyExpanding) {\n\t\t\t\t\t\t\t\t\tthis.busyControllerCount--;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tcase TestDiffOpType.Retire:\n\t\t\t\t\tthis.retireTest(op[1]);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase TestDiffOpType.IncrementPendingExtHosts:\n\t\t\t\t\tthis.updatePendingRoots(op[1]);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tchanges.complete();\n\t}\n\n\t/**\n\t * Called when the extension signals a test result should be retired.\n\t */\n\tprotected retireTest(testId: string) {\n\t\t// no-op\n\t}\n\n\t/**\n\t * Updates the number of test root sources who are yet to report. When\n\t * the total pending test roots reaches 0, the roots for all controllers\n\t * will exist in the collection.\n\t */\n\tpublic updatePendingRoots(delta: number) {\n\t\tthis.pendingRootCount += delta;\n\t}\n\n\t/**\n\t * Called before a diff is applied to create a new change collector.\n\t */\n\tprotected createChangeCollector() {\n\t\treturn new IncrementalChangeCollector<T>();\n\t}\n\n\t/**\n\t * Creates a new item for the collection from the internal test item.\n\t */\n\tprotected abstract createItem(internal: InternalTestItem, parent?: T): T;\n}\n"]}