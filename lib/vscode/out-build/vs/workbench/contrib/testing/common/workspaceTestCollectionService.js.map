{"version":3,"file":"workspaceTestCollectionService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/testing/common/workspaceTestCollectionService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { Emitter } from 'vs/base/common/event';\nimport { Iterable } from 'vs/base/common/iterator';\nimport { Disposable, DisposableStore, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { createDecorator, IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IWorkspaceContextService, IWorkspaceFolder, IWorkspaceFoldersChangeEvent } from 'vs/platform/workspace/common/workspace';\nimport { ExtHostTestingResource } from 'vs/workbench/api/common/extHost.protocol';\nimport { IncrementalTestCollectionItem, TestsDiff } from 'vs/workbench/contrib/testing/common/testCollection';\nimport { IMainThreadTestCollection, ITestService, waitForAllRoots } from 'vs/workbench/contrib/testing/common/testService';\n\nexport interface ITestSubscriptionFolder {\n\tfolder: IWorkspaceFolder;\n\tgetChildren(): Iterable<IncrementalTestCollectionItem>;\n}\n\nexport interface ITestSubscriptionItem extends IncrementalTestCollectionItem {\n\troot: ITestSubscriptionFolder;\n}\n\nexport class TestSubscriptionListener extends Disposable {\n\tprivate onDiffEmitter = new Emitter<[workspaceFolder: IWorkspaceFolder, diff: TestsDiff]>();\n\tprivate onFolderChangeEmitter = new Emitter<IWorkspaceFoldersChangeEvent>();\n\n\tpublic readonly onDiff = this.onDiffEmitter.event;\n\tpublic readonly onFolderChange = this.onFolderChangeEmitter.event;\n\n\tpublic get workspaceFolders() {\n\t\treturn this.subscription.workspaceFolders;\n\t}\n\n\tpublic get workspaceFolderCollections() {\n\t\treturn this.subscription.workspaceFolderCollections;\n\t}\n\n\tconstructor(public readonly subscription: TestSubscription, public readonly onDispose: () => void) {\n\t\tsuper();\n\t\tthis._register(toDisposable(onDispose));\n\t}\n\n\tpublic async waitForAllRoots(token?: CancellationToken) {\n\t\tawait Promise.all(this.subscription.workspaceFolderCollections.map(([, c]) => waitForAllRoots(c, token)));\n\t}\n\n\tpublic publishFolderChange(evt: IWorkspaceFoldersChangeEvent) {\n\t\tthis.onFolderChangeEmitter.fire(evt);\n\t}\n\n\tpublic publishDiff(folder: IWorkspaceFolder, diff: TestsDiff) {\n\t\tthis.onDiffEmitter.fire([folder, diff]);\n\t}\n}\n\n/**\n * Maintains an observable set of tests in the core.\n */\nexport interface IWorkspaceTestCollectionService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Gets all workspace folders we're listening to.\n\t */\n\tworkspaceFolders(): ReadonlyArray<ITestSubscriptionFolder>;\n\n\t/**\n\t * Adds a listener that receives updates about tests.\n\t */\n\tsubscribeToWorkspaceTests(): TestSubscriptionListener;\n}\n\nexport const IWorkspaceTestCollectionService = createDecorator<IWorkspaceTestCollectionService>('ITestingViewService');\n\nexport class WorkspaceTestCollectionService implements IWorkspaceTestCollectionService {\n\tdeclare _serviceBrand: undefined;\n\n\tprivate subscription?: TestSubscription;\n\n\tpublic workspaceFolders() {\n\t\treturn this.subscription?.workspaceFolders || [];\n\t}\n\n\tconstructor(@IInstantiationService protected instantiationService: IInstantiationService) { }\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic subscribeToWorkspaceTests(): TestSubscriptionListener {\n\t\tif (!this.subscription) {\n\t\t\tthis.subscription = this.instantiationService.createInstance(TestSubscription);\n\t\t}\n\n\t\tconst listener = new TestSubscriptionListener(this.subscription, () => {\n\t\t\tif (!this.subscription) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.subscription.removeListener(listener);\n\t\t\tif (this.subscription.listenerCount === 0) {\n\t\t\t\tthis.subscription.dispose();\n\t\t\t\tthis.subscription = undefined;\n\t\t\t}\n\t\t});\n\n\t\tthis.subscription.addListener(listener);\n\t\treturn listener;\n\t}\n}\n\n\nclass TestSubscription extends Disposable {\n\tprivate listeners = new Set<TestSubscriptionListener>();\n\tprivate pendingRootChangeEmitter = new Emitter<number>();\n\tprivate busyProvidersChangeEmitter = new Emitter<number>();\n\tprivate readonly collectionsForWorkspaces = new Map<string, {\n\t\tlistener: IDisposable,\n\t\tfolder: ITestSubscriptionFolder,\n\t\tcollection: IMainThreadTestCollection,\n\t}>();\n\n\tpublic readonly onPendingRootProvidersChange = this.pendingRootChangeEmitter.event;\n\tpublic readonly onBusyProvidersChange = this.busyProvidersChangeEmitter.event;\n\n\tpublic get busyProviders() {\n\t\tlet total = 0;\n\t\tfor (const { collection } of this.collectionsForWorkspaces.values()) {\n\t\t\ttotal += collection.busyProviders;\n\t\t}\n\n\t\treturn total;\n\t}\n\n\tpublic get pendingRootProviders() {\n\t\tlet total = 0;\n\t\tfor (const { collection } of this.collectionsForWorkspaces.values()) {\n\t\t\ttotal += collection.pendingRootProviders;\n\t\t}\n\n\t\treturn total;\n\t}\n\n\tpublic get listenerCount() {\n\t\treturn this.listeners.size;\n\t}\n\n\tpublic get workspaceFolders() {\n\t\treturn [...this.collectionsForWorkspaces.values()].map(v => v.folder);\n\t}\n\n\tpublic get workspaceFolderCollections() {\n\t\treturn [...this.collectionsForWorkspaces.values()].map(v => [v.folder, v.collection] as const);\n\t}\n\n\t/**\n\t * Returns whether there are any subscriptions with non-empty providers.\n\t */\n\tpublic get isEmpty() {\n\t\tfor (const { collection } of this.collectionsForWorkspaces.values()) {\n\t\t\tif (Iterable.some(collection.all, t => !!t.parent)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tconstructor(\n\t\t@IWorkspaceContextService workspaceContext: IWorkspaceContextService,\n\t\t@ITestService private readonly testService: ITestService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(toDisposable(() => {\n\t\t\tfor (const { listener } of this.collectionsForWorkspaces.values()) {\n\t\t\t\tlistener.dispose();\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(workspaceContext.onDidChangeWorkspaceFolders(evt => {\n\t\t\tfor (const folder of evt.added) {\n\t\t\t\tthis.subscribeToWorkspace(folder);\n\t\t\t}\n\n\t\t\tfor (const folder of evt.removed) {\n\t\t\t\tconst existing = this.collectionsForWorkspaces.get(folder.uri.toString());\n\t\t\t\tif (existing) {\n\t\t\t\t\tthis.collectionsForWorkspaces.delete(folder.uri.toString());\n\t\t\t\t\texisting.listener.dispose();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const listener of this.listeners) {\n\t\t\t\tlistener.publishFolderChange(evt);\n\t\t\t}\n\t\t}));\n\n\t\tfor (const folder of workspaceContext.getWorkspace().folders) {\n\t\t\tthis.subscribeToWorkspace(folder);\n\t\t}\n\t}\n\n\tpublic addListener(listener: TestSubscriptionListener) {\n\t\tthis.listeners.add(listener);\n\t}\n\n\tpublic removeListener(listener: TestSubscriptionListener) {\n\t\tthis.listeners.delete(listener);\n\t}\n\n\tprivate subscribeToWorkspace(folder: IWorkspaceFolder) {\n\t\tconst folderNode: ITestSubscriptionFolder = {\n\t\t\tfolder,\n\t\t\tgetChildren: function* () {\n\t\t\t\tfor (const rootId of ref.object.rootIds) {\n\t\t\t\t\tconst node = ref.object.getNodeById(rootId);\n\t\t\t\t\tif (node) {\n\t\t\t\t\t\tyield node;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t};\n\n\t\tconst ref = this.testService.subscribeToDiffs(\n\t\t\tExtHostTestingResource.Workspace,\n\t\t\tfolder.uri,\n\t\t\tdiff => {\n\t\t\t\tfor (const listener of this.listeners) {\n\t\t\t\t\tlistener.publishDiff(folder, diff);\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\n\t\tconst disposable = new DisposableStore();\n\t\tdisposable.add(ref);\n\t\tdisposable.add(ref.object.onBusyProvidersChange(\n\t\t\t() => this.pendingRootChangeEmitter.fire(this.pendingRootProviders)));\n\t\tdisposable.add(ref.object.onBusyProvidersChange(\n\t\t\t() => this.busyProvidersChangeEmitter.fire(this.busyProviders)));\n\n\t\tthis.collectionsForWorkspaces.set(folder.uri.toString(), {\n\t\t\tlistener: disposable,\n\t\t\tcollection: ref.object,\n\t\t\tfolder: folderNode,\n\t\t});\n\t}\n}\n"]}