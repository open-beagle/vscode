{"version":3,"file":"testResultService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/testing/common/testResultService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAgEnF,QAAA,kBAAkB,GAAG,CAAA,GAAA,+BAAe,CAAA,CAAqB,mBAAmB,CAAC,CAAC;IAE3F,IAAa,iBAAiB,GAA9B,MAAa,iBAAiB;QAiC7B,YACqB,iBAAqC,EACpB,OAA2B;YAA3B,YAAO,GAAP,OAAO,CAAoB;YAjCzD,wBAAmB,GAAG,IAAI,eAAO,EAAqB,CAAC;YACvD,aAAQ,GAAkB,EAAE,CAAC;YAC7B,sBAAiB,GAAG,IAAI,eAAO,EAAwB,CAAC;YAUhE;;eAEG;YACa,qBAAgB,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC;YAElE;;eAEG;YACa,kBAAa,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC;YAG5C,gBAAW,GAAG,CAAA,GAAA,iBAAI,CAAA,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;gBAC3E,KAAK,IAAI,CAAC,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;oBAC5C,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;iBACrB;YACF,CAAC,CAAC,CAAC,CAAC;YAEe,qBAAgB,GAAG,IAAI,wBAAgB,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,kBAAkB,EAAE,EAAE,GAAG,CAAC,CAAC;YAMhG,IAAI,CAAC,SAAS,GAAG,uCAAkB,CAAC,SAAS,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;QACzE,CAAC;QAhCD;;WAEG;QACH,IAAW,OAAO;YACjB,IAAI,CAAC,WAAW,EAAE,CAAC;YACnB,OAAO,IAAI,CAAC,QAAQ,CAAC;QACtB,CAAC;QA4BD;;WAEG;QACI,YAAY,CAAC,KAAa;YAChC,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,OAAO,EAAE;gBAClC,MAAM,MAAM,GAAG,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;gBAC1C,IAAI,MAAM,IAAI,MAAM,CAAC,aAAa,KAAK,8BAAe,CAAC,KAAK,EAAE;oBAC7D,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;iBACxB;aACD;YAED,OAAO,SAAS,CAAC;QAClB,CAAC;QAED;;WAEG;QACI,gBAAgB,CAAC,GAA+C;YACtE,IAAI,IAAI,IAAI,GAAG,EAAE;gBAChB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,2BAAc,CAAC,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;aAC5F;iBAAM;gBACN,MAAM,EAAE,GAAG,CAAA,GAAA,mBAAY,CAAA,EAAE,CAAC;gBAC1B,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,2BAAc,CAAC,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;aACpF;QACF,CAAC;QAED;;WAEG;QACI,IAAI,CAAwB,MAAS;YAC3C,IAAI,MAAM,CAAC,WAAW,KAAK,SAAS,EAAE;gBACrC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;aAC7B;iBAAM;gBACN,MAAM,KAAK,GAAG,CAAA,GAAA,0BAAiB,CAAA,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,KAAK,SAAS,IAAI,CAAC,CAAC,WAAW,IAAI,MAAM,CAAC,WAAY,CAAC,CAAC;gBACxH,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;gBACtC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,CAAC;aACjC;YAED,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,sCAAkB,EAAE;gBAC7C,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;aACnB;YAED,IAAI,MAAM,YAAY,2BAAc,EAAE;gBACrC,MAAM,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;gBACjD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;gBACrE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBACzB,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC,CAAC;aACnD;iBAAM;gBACN,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC;gBACpD,sEAAsE;gBACtE,mEAAmE;gBACnE,qCAAqC;gBACrC,KAAK,MAAM,IAAI,IAAI,MAAM,CAAC,KAAK,EAAE;oBAChC,KAAK,MAAM,WAAW,IAAI,IAAI,CAAC,OAAO,EAAE;wBACvC,IAAI,WAAW,KAAK,MAAM,EAAE;4BAC3B,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,6BAAgD,EAAE,CAAC,CAAC;4BACtG,MAAM;yBACN;6BAAM,IAAI,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,SAAS,EAAE;4BACnE,MAAM;yBACN;qBACD;iBACD;aACD;YAED,OAAO,MAAM,CAAC;QACf,CAAC;QAED;;WAEG;QACI,SAAS,CAAC,EAAU;YAC1B,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;QAC5C,CAAC;QAED;;WAEG;QACI,KAAK;YACX,MAAM,IAAI,GAAkB,EAAE,CAAC;YAC/B,MAAM,OAAO,GAAkB,EAAE,CAAC;YAClC,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,OAAO,EAAE;gBAClC,IAAI,MAAM,CAAC,WAAW,KAAK,SAAS,EAAE;oBACrC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;iBACrB;qBAAM;oBACN,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;iBAClB;aACD;YAED,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;YACrB,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,CAAC;YACjC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;QAC5C,CAAC;QAEO,UAAU,CAAC,MAAsB;YACxC,IAAI,CAAC,MAAM,EAAE,CAAC;YACd,IAAI,CAAC,eAAe,EAAE,CAAC;YACvB,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,CAAC;YACjC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,MAAM,EAAE,CAAC,CAAC;QACtD,CAAC;QAEO,MAAM;YACb,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,eAAC,OAAA,CAAC,MAAA,CAAC,CAAC,WAAW,mCAAI,MAAM,CAAC,gBAAgB,CAAC,GAAG,CAAC,MAAA,CAAC,CAAC,WAAW,mCAAI,MAAM,CAAC,gBAAgB,CAAC,CAAA,EAAA,CAAC,CAAC;QACtH,CAAC;QAEO,eAAe;YACtB,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,WAAW,KAAK,SAAS,CAAC,CAAC;QAC1F,CAAC;QAES,KAAK,CAAC,kBAAkB;YACjC,qEAAqE;YACrE,0BAA0B;YAC1B,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;YACzB,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACpC,CAAC;KACD,CAAA;IA1JY,iBAAiB;QAkC3B,WAAA,+BAAkB,CAAA;QAClB,WAAA,sCAAkB,CAAA;OAnCR,iBAAiB,CA0J7B;IA1JY,8CAAiB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { findFirstInSorted } from 'vs/base/common/arrays';\nimport { RunOnceScheduler } from 'vs/base/common/async';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { once } from 'vs/base/common/functional';\nimport { generateUuid } from 'vs/base/common/uuid';\nimport { IContextKey, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { TestResultState } from 'vs/workbench/api/common/extHostTypes';\nimport { ExtensionRunTestsRequest, RunTestsRequest, TestResultItem } from 'vs/workbench/contrib/testing/common/testCollection';\nimport { TestingContextKeys } from 'vs/workbench/contrib/testing/common/testingContextKeys';\nimport { ITestResult, LiveTestResult, TestResultItemChange, TestResultItemChangeReason } from 'vs/workbench/contrib/testing/common/testResult';\nimport { ITestResultStorage, RETAIN_MAX_RESULTS } from 'vs/workbench/contrib/testing/common/testResultStorage';\n\nexport type ResultChangeEvent =\n\t| { completed: LiveTestResult }\n\t| { started: LiveTestResult }\n\t| { inserted: ITestResult }\n\t| { removed: ITestResult[] };\n\nexport interface ITestResultService {\n\treadonly _serviceBrand: undefined;\n\t/**\n\t * Fired after any results are added, removed, or completed.\n\t */\n\treadonly onResultsChanged: Event<ResultChangeEvent>;\n\n\t/**\n\t * Fired when a test changed it state, or its computed state is updated.\n\t */\n\treadonly onTestChanged: Event<TestResultItemChange>;\n\n\t/**\n\t * List of known test results.\n\t */\n\treadonly results: ReadonlyArray<ITestResult>;\n\n\t/**\n\t * Discards all completed test results.\n\t */\n\tclear(): void;\n\n\t/**\n\t * Creates a new, live test result.\n\t */\n\tcreateLiveResult(req: RunTestsRequest | ExtensionRunTestsRequest): LiveTestResult;\n\n\t/**\n\t * Adds a new test result to the collection.\n\t */\n\tpush<T extends ITestResult>(result: T): T;\n\n\t/**\n\t * Looks up a set of test results by ID.\n\t */\n\tgetResult(resultId: string): ITestResult | undefined;\n\n\t/**\n\t * Looks up a test's most recent state, by its extension-assigned ID.\n\t */\n\tgetStateById(extId: string): [results: ITestResult, item: TestResultItem] | undefined;\n}\n\nexport const ITestResultService = createDecorator<ITestResultService>('testResultService');\n\nexport class TestResultService implements ITestResultService {\n\tdeclare _serviceBrand: undefined;\n\tprivate changeResultEmitter = new Emitter<ResultChangeEvent>();\n\tprivate _results: ITestResult[] = [];\n\tprivate testChangeEmitter = new Emitter<TestResultItemChange>();\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic get results() {\n\t\tthis.loadResults();\n\t\treturn this._results;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly onResultsChanged = this.changeResultEmitter.event;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly onTestChanged = this.testChangeEmitter.event;\n\n\tprivate readonly isRunning: IContextKey<boolean>;\n\tprivate readonly loadResults = once(() => this.storage.read().then(loaded => {\n\t\tfor (let i = loaded.length - 1; i >= 0; i--) {\n\t\t\tthis.push(loaded[i]);\n\t\t}\n\t}));\n\n\tprotected readonly persistScheduler = new RunOnceScheduler(() => this.persistImmediately(), 500);\n\n\tconstructor(\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@ITestResultStorage private readonly storage: ITestResultStorage,\n\t) {\n\t\tthis.isRunning = TestingContextKeys.isRunning.bindTo(contextKeyService);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic getStateById(extId: string): [results: ITestResult, item: TestResultItem] | undefined {\n\t\tfor (const result of this.results) {\n\t\t\tconst lookup = result.getStateById(extId);\n\t\t\tif (lookup && lookup.computedState !== TestResultState.Unset) {\n\t\t\t\treturn [result, lookup];\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic createLiveResult(req: RunTestsRequest | ExtensionRunTestsRequest) {\n\t\tif ('id' in req) {\n\t\t\treturn this.push(new LiveTestResult(req.id, this.storage.getOutputController(req.id), req));\n\t\t} else {\n\t\t\tconst id = generateUuid();\n\t\t\treturn this.push(new LiveTestResult(id, this.storage.getOutputController(id), req));\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic push<T extends ITestResult>(result: T): T {\n\t\tif (result.completedAt === undefined) {\n\t\t\tthis.results.unshift(result);\n\t\t} else {\n\t\t\tconst index = findFirstInSorted(this.results, r => r.completedAt !== undefined && r.completedAt <= result.completedAt!);\n\t\t\tthis.results.splice(index, 0, result);\n\t\t\tthis.persistScheduler.schedule();\n\t\t}\n\n\t\tif (this.results.length > RETAIN_MAX_RESULTS) {\n\t\t\tthis.results.pop();\n\t\t}\n\n\t\tif (result instanceof LiveTestResult) {\n\t\t\tresult.onComplete(() => this.onComplete(result));\n\t\t\tresult.onChange(this.testChangeEmitter.fire, this.testChangeEmitter);\n\t\t\tthis.isRunning.set(true);\n\t\t\tthis.changeResultEmitter.fire({ started: result });\n\t\t} else {\n\t\t\tthis.changeResultEmitter.fire({ inserted: result });\n\t\t\t// If this is not a new result, go through each of its tests. For each\n\t\t\t// test for which the new result is the most recently inserted, fir\n\t\t\t// a change event so that UI updates.\n\t\t\tfor (const item of result.tests) {\n\t\t\t\tfor (const otherResult of this.results) {\n\t\t\t\t\tif (otherResult === result) {\n\t\t\t\t\t\tthis.testChangeEmitter.fire({ item, result, reason: TestResultItemChangeReason.ComputedStateChange });\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else if (otherResult.getStateById(item.item.extId) !== undefined) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic getResult(id: string) {\n\t\treturn this.results.find(r => r.id === id);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic clear() {\n\t\tconst keep: ITestResult[] = [];\n\t\tconst removed: ITestResult[] = [];\n\t\tfor (const result of this.results) {\n\t\t\tif (result.completedAt !== undefined) {\n\t\t\t\tremoved.push(result);\n\t\t\t} else {\n\t\t\t\tkeep.push(result);\n\t\t\t}\n\t\t}\n\n\t\tthis._results = keep;\n\t\tthis.persistScheduler.schedule();\n\t\tthis.changeResultEmitter.fire({ removed });\n\t}\n\n\tprivate onComplete(result: LiveTestResult) {\n\t\tthis.resort();\n\t\tthis.updateIsRunning();\n\t\tthis.persistScheduler.schedule();\n\t\tthis.changeResultEmitter.fire({ completed: result });\n\t}\n\n\tprivate resort() {\n\t\tthis.results.sort((a, b) => (b.completedAt ?? Number.MAX_SAFE_INTEGER) - (a.completedAt ?? Number.MAX_SAFE_INTEGER));\n\t}\n\n\tprivate updateIsRunning() {\n\t\tthis.isRunning.set(this.results.length > 0 && this.results[0].completedAt === undefined);\n\t}\n\n\tprotected async persistImmediately() {\n\t\t// ensure results are loaded before persisting to avoid deleting once\n\t\t// that we don't have yet.\n\t\tawait this.loadResults();\n\t\tthis.storage.persist(this.results);\n\t}\n}\n"]}