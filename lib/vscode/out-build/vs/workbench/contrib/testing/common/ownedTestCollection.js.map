{"version":3,"file":"ownedTestCollection.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/testing/common/ownedTestCollection.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { mapFind } from 'vs/base/common/arrays';\nimport { DeferredPromise, isThenable, RunOnceScheduler } from 'vs/base/common/async';\nimport { CancellationToken, CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { IDisposable, IReference } from 'vs/base/common/lifecycle';\nimport { assertNever } from 'vs/base/common/types';\nimport { ExtHostTestItemEvent, ExtHostTestItemEventType, getPrivateApiFor } from 'vs/workbench/api/common/extHostTestingPrivateApi';\nimport * as Convert from 'vs/workbench/api/common/extHostTypeConverters';\nimport { TestItemImpl, TestItemStatus } from 'vs/workbench/api/common/extHostTypes';\nimport { applyTestItemUpdate, InternalTestItem, TestDiffOpType, TestItemExpandState, TestsDiff, TestsDiffOp } from 'vs/workbench/contrib/testing/common/testCollection';\n\ntype TestItemRaw = Convert.TestItem.Raw;\n\nexport interface IHierarchyProvider {\n\tgetChildren(node: TestItemRaw, token: CancellationToken): Iterable<TestItemRaw> | AsyncIterable<TestItemRaw> | undefined | null;\n}\n\n/**\n * @private\n */\nexport class OwnedTestCollection {\n\tprotected readonly testIdsToInternal = new Map<number, TestTree<OwnedCollectionTestItem>>();\n\n\t/**\n\t * Gets test information by ID, if it was defined and still exists in this\n\t * extension host.\n\t */\n\tpublic getTestById(id: string, preferTree?: number): undefined | [\n\t\ttree: TestTree<OwnedCollectionTestItem>,\n\t\ttest: OwnedCollectionTestItem,\n\t] {\n\t\tif (preferTree !== undefined) {\n\t\t\tconst tree = this.testIdsToInternal.get(preferTree);\n\t\t\tconst test = tree?.get(id);\n\t\t\tif (test) {\n\t\t\t\treturn [tree!, test];\n\t\t\t}\n\t\t}\n\t\treturn mapFind(this.testIdsToInternal.values(), t => {\n\t\t\tconst owned = t.get(id);\n\t\t\treturn owned && [t, owned];\n\t\t});\n\t}\n\n\t/**\n\t * Creates a new test collection for a specific hierarchy for a workspace\n\t * or document observation.\n\t */\n\tpublic createForHierarchy(publishDiff: (diff: TestsDiff) => void = () => undefined) {\n\t\treturn new SingleUseTestCollection(this.createIdMap(treeIdCounter++), publishDiff);\n\t}\n\n\tprotected createIdMap(id: number): IReference<TestTree<OwnedCollectionTestItem>> {\n\t\tconst tree = new TestTree<OwnedCollectionTestItem>(id);\n\t\tthis.testIdsToInternal.set(tree.id, tree);\n\t\treturn { object: tree, dispose: () => this.testIdsToInternal.delete(tree.id) };\n\t}\n}\n/**\n * @private\n */\nexport interface OwnedCollectionTestItem extends InternalTestItem {\n\tactual: TestItemImpl;\n\t/**\n\t * Number of levels of items below this one that are expanded. May be infinite.\n\t */\n\texpandLevels?: number;\n\tinitialExpand?: DeferredPromise<void>;\n\tdiscoverCts?: CancellationTokenSource;\n}\n\n/**\n * Enum for describing relative positions of tests. Similar to\n * `node.compareDocumentPosition` in the DOM.\n */\nexport const enum TestPosition {\n\t/** Neither a nor b are a child of one another. They may share a common parent, though. */\n\tDisconnected,\n\t/** b is a child of a */\n\tIsChild,\n\t/** b is a parent of a */\n\tIsParent,\n\t/** a === b */\n\tIsSame,\n}\n\nlet treeIdCounter = 0;\n\n/**\n * Test tree is (or will be after debt week 2020-03) the standard collection\n * for test trees. Internally it indexes tests by their extension ID in\n * a map.\n */\nexport class TestTree<T extends InternalTestItem> {\n\tprivate readonly map = new Map<string, T>();\n\tprivate readonly _roots = new Set<T>();\n\tpublic readonly roots: ReadonlySet<T> = this._roots;\n\n\tconstructor(public readonly id: number) { }\n\n\t/**\n\t * Gets the size of the tree.\n\t */\n\tpublic get size() {\n\t\treturn this.map.size;\n\t}\n\n\t/**\n\t * Adds a new test to the tree if it doesn't exist.\n\t * @throws if a duplicate item is inserted\n\t */\n\tpublic add(test: T) {\n\t\tif (this.map.has(test.item.extId)) {\n\t\t\tthrow new Error(`Attempted to insert a duplicate test item ID ${test.item.extId}`);\n\t\t}\n\n\t\tthis.map.set(test.item.extId, test);\n\t\tif (!test.parent) {\n\t\t\tthis._roots.add(test);\n\t\t}\n\t}\n\n\t/**\n\t * Gets whether the test exists in the tree.\n\t */\n\tpublic has(testId: string) {\n\t\treturn this.map.has(testId);\n\t}\n\n\t/**\n\t * Removes a test ID from the tree. This is NOT recursive.\n\t */\n\tpublic delete(testId: string) {\n\t\tconst existing = this.map.get(testId);\n\t\tif (!existing) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis.map.delete(testId);\n\t\tthis._roots.delete(existing);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Gets a test item by ID from the tree.\n\t */\n\tpublic get(testId: string) {\n\t\treturn this.map.get(testId);\n\t}\n\n\t/**\n * Compares the positions of the two items in the test tree.\n\t */\n\tpublic comparePositions(aOrId: T | string, bOrId: T | string) {\n\t\tconst a = typeof aOrId === 'string' ? this.map.get(aOrId) : aOrId;\n\t\tconst b = typeof bOrId === 'string' ? this.map.get(bOrId) : bOrId;\n\t\tif (!a || !b) {\n\t\t\treturn TestPosition.Disconnected;\n\t\t}\n\n\t\tif (a === b) {\n\t\t\treturn TestPosition.IsSame;\n\t\t}\n\n\t\tfor (let p = this.map.get(b.parent!); p; p = this.map.get(p.parent!)) {\n\t\t\tif (p === a) {\n\t\t\t\treturn TestPosition.IsChild;\n\t\t\t}\n\t\t}\n\n\t\tfor (let p = this.map.get(a.parent!); p; p = this.map.get(p.parent!)) {\n\t\t\tif (p === b) {\n\t\t\t\treturn TestPosition.IsParent;\n\t\t\t}\n\t\t}\n\n\t\treturn TestPosition.Disconnected;\n\t}\n\n\t/**\n\t * Iterates over all test in the tree.\n\t */\n\t[Symbol.iterator]() {\n\t\treturn this.map.values();\n\t}\n}\n\n/**\n * Maintains tests created and registered for a single set of hierarchies\n * for a workspace or document.\n * @private\n */\nexport class SingleUseTestCollection implements IDisposable {\n\tprotected readonly testItemToInternal = new Map<TestItemRaw, OwnedCollectionTestItem>();\n\tprotected diff: TestsDiff = [];\n\tprivate readonly debounceSendDiff = new RunOnceScheduler(() => this.flushDiff(), 200);\n\n\tpublic get treeId() {\n\t\treturn this.testIdToInternal.object.id;\n\t}\n\n\tconstructor(\n\t\tprivate readonly testIdToInternal: IReference<TestTree<OwnedCollectionTestItem>>,\n\t\tprivate readonly publishDiff: (diff: TestsDiff) => void,\n\t) { }\n\n\t/**\n\t * Adds a new root node to the collection.\n\t */\n\tpublic addRoot(item: TestItemRaw, controllerId: string) {\n\t\tthis.addItem(item, controllerId, null);\n\t}\n\n\t/**\n\t * Gets test information by its reference, if it was defined and still exists\n\t * in this extension host.\n\t */\n\tpublic getTestByReference(item: TestItemRaw) {\n\t\treturn this.testItemToInternal.get(item);\n\t}\n\n\t/**\n\t * Gets a diff of all changes that have been made, and clears the diff queue.\n\t */\n\tpublic collectDiff() {\n\t\tconst diff = this.diff;\n\t\tthis.diff = [];\n\t\treturn diff;\n\t}\n\n\t/**\n\t * Pushes a new diff entry onto the collected diff list.\n\t */\n\tpublic pushDiff(diff: TestsDiffOp) {\n\t\t// Try to merge updates, since they're invoked per-property\n\t\tconst last = this.diff[this.diff.length - 1];\n\t\tif (last && diff[0] === TestDiffOpType.Update) {\n\t\t\tif (last[0] === TestDiffOpType.Update && last[1].extId === diff[1].extId) {\n\t\t\t\tapplyTestItemUpdate(last[1], diff[1]);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (last[0] === TestDiffOpType.Add && last[1].item.extId === diff[1].extId) {\n\t\t\t\tapplyTestItemUpdate(last[1], diff[1]);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tthis.diff.push(diff);\n\n\t\tif (!this.debounceSendDiff.isScheduled()) {\n\t\t\tthis.debounceSendDiff.schedule();\n\t\t}\n\t}\n\n\t/**\n\t * Expands the test and the given number of `levels` of children. If levels\n\t * is < 0, then all children will be expanded. If it's 0, then only this\n\t * item will be expanded.\n\t */\n\tpublic expand(testId: string, levels: number): Promise<void> | void {\n\t\tconst internal = this.testIdToInternal.object.get(testId);\n\t\tif (!internal) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (internal.expandLevels === undefined || levels > internal.expandLevels) {\n\t\t\tinternal.expandLevels = levels;\n\t\t}\n\n\t\t// try to avoid awaiting things if the provider returns synchronously in\n\t\t// order to keep everything in a single diff and DOM update.\n\t\tif (internal.expand === TestItemExpandState.Expandable) {\n\t\t\tconst r = this.refreshChildren(internal);\n\t\t\treturn !r.isSettled\n\t\t\t\t? r.p.then(() => this.expandChildren(internal, levels - 1))\n\t\t\t\t: this.expandChildren(internal, levels - 1);\n\t\t} else if (internal.expand === TestItemExpandState.Expanded) {\n\t\t\treturn internal.initialExpand?.isSettled === false\n\t\t\t\t? internal.initialExpand.p.then(() => this.expandChildren(internal, levels - 1))\n\t\t\t\t: this.expandChildren(internal, levels - 1);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic dispose() {\n\t\tfor (const item of this.testItemToInternal.values()) {\n\t\t\titem.discoverCts?.dispose(true);\n\t\t\tgetPrivateApiFor(item.actual).bus.dispose();\n\t\t}\n\n\t\tthis.diff = [];\n\t\tthis.testIdToInternal.dispose();\n\t\tthis.debounceSendDiff.dispose();\n\t}\n\n\tprivate onTestItemEvent(internal: OwnedCollectionTestItem, evt: ExtHostTestItemEvent) {\n\t\tconst extId = internal?.actual.id;\n\n\t\tswitch (evt[0]) {\n\t\t\tcase ExtHostTestItemEventType.Invalidated:\n\t\t\t\tthis.pushDiff([TestDiffOpType.Retire, extId]);\n\t\t\t\tbreak;\n\n\t\t\tcase ExtHostTestItemEventType.Disposed:\n\t\t\t\tthis.removeItem(internal);\n\t\t\t\tbreak;\n\n\t\t\tcase ExtHostTestItemEventType.NewChild:\n\t\t\t\tthis.addItem(evt[1], internal.src.controller, internal);\n\t\t\t\tbreak;\n\n\t\t\tcase ExtHostTestItemEventType.SetProp:\n\t\t\t\tconst [_, key, value] = evt;\n\t\t\t\tswitch (key) {\n\t\t\t\t\tcase 'status':\n\t\t\t\t\t\tthis.updateExpandability(internal);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'range':\n\t\t\t\t\t\tthis.pushDiff([TestDiffOpType.Update, { extId, item: { range: Convert.Range.from(value) }, }]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'error':\n\t\t\t\t\t\tthis.pushDiff([TestDiffOpType.Update, { extId, item: { error: Convert.MarkdownString.fromStrict(value) || null }, }]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthis.pushDiff([TestDiffOpType.Update, { extId, item: { [key]: value ?? null } }]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tassertNever(evt[0]);\n\t\t}\n\t}\n\n\tprivate addItem(actual: TestItemRaw, controllerId: string, parent: OwnedCollectionTestItem | null) {\n\t\tif (!(actual instanceof TestItemImpl)) {\n\t\t\tthrow new Error(`TestItems provided to the VS Code API must extend \\`vscode.TestItem\\`, but ${actual.id} did not`);\n\t\t}\n\n\t\tif (this.testItemToInternal.has(actual)) {\n\t\t\tthrow new Error(`Attempted to add a single TestItem ${actual.id} multiple times to the tree`);\n\t\t}\n\n\t\tif (this.testIdToInternal.object.has(actual.id)) {\n\t\t\tthrow new Error(`Attempted to insert a duplicate test item ID ${actual.id}`);\n\t\t}\n\n\t\tconst parentId = parent ? parent.item.extId : null;\n\t\tconst expand = actual.resolveHandler ? TestItemExpandState.Expandable : TestItemExpandState.NotExpandable;\n\t\t// always expand root node to know if there are tests (and whether to show the welcome view)\n\t\tconst pExpandLvls = parent ? parent.expandLevels : 1;\n\t\tconst src = { controller: controllerId, tree: this.testIdToInternal.object.id };\n\t\tconst internal: OwnedCollectionTestItem = {\n\t\t\tactual,\n\t\t\tparent: parentId,\n\t\t\titem: Convert.TestItem.from(actual),\n\t\t\texpandLevels: pExpandLvls /* intentionally undefined or 0 */ ? pExpandLvls - 1 : undefined,\n\t\t\texpand: TestItemExpandState.NotExpandable, // updated by `updateExpandability` down below\n\t\t\tsrc,\n\t\t};\n\n\t\tthis.testIdToInternal.object.add(internal);\n\t\tthis.testItemToInternal.set(actual, internal);\n\t\tthis.pushDiff([TestDiffOpType.Add, { parent: parentId, src, expand, item: internal.item }]);\n\n\t\tconst api = getPrivateApiFor(actual);\n\t\tapi.parent = parent?.actual;\n\t\tapi.bus.event(this.onTestItemEvent.bind(this, internal));\n\n\t\t// important that this comes after binding the event bus otherwise we\n\t\t// might miss a synchronous discovery completion\n\t\tthis.updateExpandability(internal);\n\n\t\t// Discover any existing children that might have already been added\n\t\tfor (const child of api.children.values()) {\n\t\t\tif (!this.testItemToInternal.has(child)) {\n\t\t\t\tthis.addItem(child, controllerId, internal);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Updates the `expand` state of the item. Should be called whenever the\n\t * resolved state of the item changes. Can automatically expand the item\n\t * if requested by a consumer.\n\t */\n\tprivate updateExpandability(internal: OwnedCollectionTestItem) {\n\t\tlet newState: TestItemExpandState;\n\t\tif (!internal.actual.resolveHandler) {\n\t\t\tnewState = TestItemExpandState.NotExpandable;\n\t\t} else if (internal.actual.status === TestItemStatus.Pending) {\n\t\t\tnewState = internal.discoverCts\n\t\t\t\t? TestItemExpandState.BusyExpanding\n\t\t\t\t: TestItemExpandState.Expandable;\n\t\t} else {\n\t\t\tinternal.initialExpand?.complete();\n\t\t\tnewState = TestItemExpandState.Expanded;\n\t\t}\n\n\t\tif (newState === internal.expand) {\n\t\t\treturn;\n\t\t}\n\n\t\tinternal.expand = newState;\n\t\tthis.pushDiff([TestDiffOpType.Update, { extId: internal.actual.id, expand: newState }]);\n\n\t\tif (newState === TestItemExpandState.Expandable && internal.expandLevels !== undefined) {\n\t\t\tthis.refreshChildren(internal);\n\t\t}\n\t}\n\n\t/**\n\t * Expands all children of the item, \"levels\" deep. If levels is 0, only\n\t * the children will be expanded. If it's 1, the children and their children\n\t * will be expanded. If it's <0, it's a no-op.\n\t */\n\tprivate expandChildren(internal: OwnedCollectionTestItem, levels: number): Promise<void> | void {\n\t\tif (levels < 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst asyncChildren = [...internal.actual.children.values()]\n\t\t\t.map(c => this.expand(c.id, levels))\n\t\t\t.filter(isThenable);\n\n\t\tif (asyncChildren.length) {\n\t\t\treturn Promise.all(asyncChildren).then(() => { });\n\t\t}\n\t}\n\n\t/**\n\t * Calls `discoverChildren` on the item, refreshing all its tests.\n\t */\n\tprivate refreshChildren(internal: OwnedCollectionTestItem) {\n\t\tif (internal.discoverCts) {\n\t\t\tinternal.discoverCts.dispose(true);\n\t\t}\n\n\t\tif (!internal.actual.resolveHandler) {\n\t\t\tconst p = new DeferredPromise<void>();\n\t\t\tp.complete();\n\t\t\treturn p;\n\t\t}\n\n\t\tinternal.expand = TestItemExpandState.BusyExpanding;\n\t\tinternal.discoverCts = new CancellationTokenSource();\n\t\tthis.pushExpandStateUpdate(internal);\n\n\t\tinternal.initialExpand = new DeferredPromise<void>();\n\t\tinternal.actual.resolveHandler(internal.discoverCts.token);\n\n\t\treturn internal.initialExpand;\n\t}\n\n\tprivate pushExpandStateUpdate(internal: OwnedCollectionTestItem) {\n\t\tthis.pushDiff([TestDiffOpType.Update, { extId: internal.actual.id, expand: internal.expand }]);\n\t}\n\n\tprivate removeItem(internal: OwnedCollectionTestItem) {\n\t\tthis.pushDiff([TestDiffOpType.Remove, internal.actual.id]);\n\n\t\tconst queue: (OwnedCollectionTestItem | undefined)[] = [internal];\n\t\twhile (queue.length) {\n\t\t\tconst item = queue.pop();\n\t\t\tif (!item) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\titem.discoverCts?.dispose(true);\n\t\t\tthis.testIdToInternal.object.delete(item.item.extId);\n\t\t\tthis.testItemToInternal.delete(item.actual);\n\t\t\tfor (const child of item.actual.children.values()) {\n\t\t\t\tqueue.push(this.testIdToInternal.object.get(child.id));\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic flushDiff() {\n\t\tconst diff = this.collectDiff();\n\t\tif (diff.length) {\n\t\t\tthis.publishDiff(diff);\n\t\t}\n\t}\n}\n"]}