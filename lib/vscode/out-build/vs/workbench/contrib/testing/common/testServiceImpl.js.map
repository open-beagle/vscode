{"version":3,"sources":["vs/workbench/contrib/testing/common/testServiceImpl.ts"],"names":[],"mappings":"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","file":"testServiceImpl.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { groupBy, mapFind } from 'vs/base/common/arrays';\nimport { disposableTimeout } from 'vs/base/common/async';\nimport { CancellationToken, CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { Emitter } from 'vs/base/common/event';\nimport { Disposable, IDisposable, IReference, toDisposable } from 'vs/base/common/lifecycle';\nimport { isDefined } from 'vs/base/common/types';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { localize } from 'vs/nls';\nimport { IContextKey, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { IWorkspaceTrustRequestService } from 'vs/platform/workspace/common/workspaceTrust';\nimport { ExtHostTestingResource } from 'vs/workbench/api/common/extHost.protocol';\nimport { MutableObservableValue } from 'vs/workbench/contrib/testing/common/observableValue';\nimport { StoredValue } from 'vs/workbench/contrib/testing/common/storedValue';\nimport { AbstractIncrementalTestCollection, getTestSubscriptionKey, IncrementalTestCollectionItem, InternalTestItem, RunTestsRequest, TestDiffOpType, TestIdWithSrc, TestsDiff } from 'vs/workbench/contrib/testing/common/testCollection';\nimport { TestingContextKeys } from 'vs/workbench/contrib/testing/common/testingContextKeys';\nimport { ITestResult, LiveTestResult } from 'vs/workbench/contrib/testing/common/testResult';\nimport { ITestResultService } from 'vs/workbench/contrib/testing/common/testResultService';\nimport { IMainThreadTestCollection, ITestRootProvider, ITestService, MainTestController, TestDiffListener } from 'vs/workbench/contrib/testing/common/testService';\n\ntype TestLocationIdent = { resource: ExtHostTestingResource, uri: URI };\n\nconst workspaceUnsubscribeDelay = 30_000;\nconst documentUnsubscribeDelay = 5_000;\n\nexport class TestService extends Disposable implements ITestService {\n\tdeclare readonly _serviceBrand: undefined;\n\tprivate testControllers = new Map<string, MainTestController>();\n\tprivate readonly testSubscriptions = new Map<string, {\n\t\tcollection: MainThreadTestCollection;\n\t\tident: TestLocationIdent;\n\t\tonDiff: Emitter<TestsDiff>;\n\t\tdisposeTimeout?: IDisposable,\n\t\tlisteners: number;\n\t}>();\n\n\tprivate readonly subscribeEmitter = new Emitter<TestLocationIdent>();\n\tprivate readonly unsubscribeEmitter = new Emitter<TestLocationIdent>();\n\tprivate readonly busyStateChangeEmitter = new Emitter<TestLocationIdent & { busy: boolean }>();\n\tprivate readonly changeProvidersEmitter = new Emitter<{ delta: number }>();\n\tprivate readonly providerCount: IContextKey<number>;\n\tprivate readonly hasRunnable: IContextKey<boolean>;\n\tprivate readonly hasDebuggable: IContextKey<boolean>;\n\tprivate readonly runningTests = new Map<RunTestsRequest, CancellationTokenSource>();\n\tprivate readonly rootProviders = new Set<ITestRootProvider>();\n\n\tpublic readonly excludeTests = MutableObservableValue.stored(new StoredValue<ReadonlySet<string>>({\n\t\tkey: 'excludedTestItems',\n\t\tscope: StorageScope.WORKSPACE,\n\t\ttarget: StorageTarget.USER,\n\t\tserialization: {\n\t\t\tdeserialize: v => new Set(JSON.parse(v)),\n\t\t\tserialize: v => JSON.stringify([...v])\n\t\t},\n\t}, this.storageService), new Set());\n\n\tconstructor(\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@ITestResultService private readonly testResults: ITestResultService,\n\t\t@IWorkspaceTrustRequestService private readonly workspaceTrustRequestService: IWorkspaceTrustRequestService,\n\t) {\n\t\tsuper();\n\t\tthis.providerCount = TestingContextKeys.providerCount.bindTo(contextKeyService);\n\t\tthis.hasDebuggable = TestingContextKeys.hasDebuggableTests.bindTo(contextKeyService);\n\t\tthis.hasRunnable = TestingContextKeys.hasRunnableTests.bindTo(contextKeyService);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic async expandTest(test: TestIdWithSrc, levels: number) {\n\t\tawait this.testControllers.get(test.src.controller)?.expandTest(test, levels);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic clearExcludedTests() {\n\t\tthis.excludeTests.value = new Set();\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic setTestExcluded(testId: string, exclude = !this.excludeTests.value.has(testId)) {\n\t\tconst newSet = new Set(this.excludeTests.value);\n\t\tif (exclude) {\n\t\t\tnewSet.add(testId);\n\t\t} else {\n\t\t\tnewSet.delete(testId);\n\t\t}\n\n\t\tif (newSet.size !== this.excludeTests.value.size) {\n\t\t\tthis.excludeTests.value = newSet;\n\t\t}\n\t}\n\n\t/**\n\t * Gets currently running tests.\n\t */\n\tpublic get testRuns() {\n\t\treturn this.runningTests.keys();\n\t}\n\n\t/**\n\t * Gets the current provider count.\n\t */\n\tpublic get providers() {\n\t\treturn this.providerCount.get() || 0;\n\t}\n\n\t/**\n\t * Fired when extension hosts should pull events from their test factories.\n\t */\n\tpublic readonly onShouldSubscribe = this.subscribeEmitter.event;\n\n\t/**\n\t * Fired when extension hosts should stop pulling events from their test factories.\n\t */\n\tpublic readonly onShouldUnsubscribe = this.unsubscribeEmitter.event;\n\n\t/**\n\t * Fired when the number of providers change.\n\t */\n\tpublic readonly onDidChangeProviders = this.changeProvidersEmitter.event;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly onBusyStateChange = this.busyStateChangeEmitter.event;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic get subscriptions() {\n\t\treturn [...this.testSubscriptions].map(([, s]) => s.ident);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic cancelTestRun(req: RunTestsRequest) {\n\t\tthis.runningTests.get(req)?.cancel();\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic async lookupTest(test: TestIdWithSrc) {\n\t\tfor (const { collection } of this.testSubscriptions.values()) {\n\t\t\tconst node = collection.getNodeById(test.testId);\n\t\t\tif (node) {\n\t\t\t\treturn node;\n\t\t\t}\n\t\t}\n\n\t\treturn this.testControllers.get(test.src.controller)?.lookupTest(test);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic registerRootProvider(provider: ITestRootProvider) {\n\t\tif (this.rootProviders.has(provider)) {\n\t\t\treturn toDisposable(() => { });\n\t\t}\n\n\t\tthis.rootProviders.add(provider);\n\t\tfor (const { collection } of this.testSubscriptions.values()) {\n\t\t\tcollection.updatePendingRoots(1);\n\t\t}\n\n\t\treturn toDisposable(() => {\n\t\t\tif (this.rootProviders.delete(provider)) {\n\t\t\t\tfor (const { collection } of this.testSubscriptions.values()) {\n\t\t\t\t\tcollection.updatePendingRoots(-1);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic async runTests(req: RunTestsRequest, token = CancellationToken.None): Promise<ITestResult> {\n\t\tif (!req.exclude) {\n\t\t\treq.exclude = [...this.excludeTests.value];\n\t\t}\n\n\t\tconst result = this.testResults.createLiveResult(req);\n\t\tconst trust = await this.workspaceTrustRequestService.requestWorkspaceTrust({\n\t\t\tmodal: true,\n\t\t\tmessage: localize('testTrust', \"Running tests may execute code in your workspace.\"),\n\t\t});\n\n\t\tif (!trust) {\n\t\t\tresult.markComplete();\n\t\t\treturn result;\n\t\t}\n\n\t\tconst testsWithIds = req.tests.map(test => {\n\t\t\tif (test.src) {\n\t\t\t\treturn test as TestIdWithSrc;\n\t\t\t}\n\n\t\t\tconst subscribed = mapFind(this.testSubscriptions.values(), s => s.collection.getNodeById(test.testId));\n\t\t\tif (!subscribed) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\treturn { testId: test.testId, src: subscribed.src };\n\t\t}).filter(isDefined);\n\n\t\ttry {\n\t\t\tconst tests = groupBy(testsWithIds, (a, b) => a.src.controller === b.src.controller ? 0 : 1);\n\t\t\tconst cancelSource = new CancellationTokenSource(token);\n\t\t\tthis.runningTests.set(req, cancelSource);\n\n\t\t\tconst requests = tests.map(\n\t\t\t\tgroup => this.testControllers.get(group[0].src.controller)?.runTests(\n\t\t\t\t\t{\n\t\t\t\t\t\trunId: result.id,\n\t\t\t\t\t\tdebug: req.debug,\n\t\t\t\t\t\texcludeExtIds: req.exclude ?? [],\n\t\t\t\t\t\ttests: group,\n\t\t\t\t\t},\n\t\t\t\t\tcancelSource.token,\n\t\t\t\t).catch(err => {\n\t\t\t\t\tthis.notificationService.error(localize('testError', 'An error occurred attempting to run tests: {0}', err.message));\n\t\t\t\t})\n\t\t\t);\n\n\t\t\tawait Promise.all(requests);\n\t\t\treturn result;\n\t\t} finally {\n\t\t\tthis.runningTests.delete(req);\n\t\t\tresult.markComplete();\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic resubscribeToAllTests() {\n\t\tfor (const subscription of this.testSubscriptions.values()) {\n\t\t\tthis.unsubscribeEmitter.fire(subscription.ident);\n\t\t\tconst diff = subscription.collection.clear();\n\t\t\tsubscription.onDiff.fire(diff);\n\t\t\tsubscription.collection.pendingRootProviders = this.rootProviders.size;\n\t\t\tthis.subscribeEmitter.fire(subscription.ident);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic subscribeToDiffs(resource: ExtHostTestingResource, uri: URI, acceptDiff?: TestDiffListener): IReference<IMainThreadTestCollection> {\n\t\tconst subscriptionKey = getTestSubscriptionKey(resource, uri);\n\t\tlet subscription = this.testSubscriptions.get(subscriptionKey);\n\t\tif (!subscription) {\n\t\t\tsubscription = {\n\t\t\t\tident: { resource, uri },\n\t\t\t\tcollection: new MainThreadTestCollection(\n\t\t\t\t\tthis.rootProviders.size,\n\t\t\t\t\tthis.expandTest.bind(this),\n\t\t\t\t),\n\t\t\t\tlisteners: 0,\n\t\t\t\tonDiff: new Emitter(),\n\t\t\t};\n\n\t\t\tsubscription.collection.onDidRetireTest(testId => {\n\t\t\t\tfor (const result of this.testResults.results) {\n\t\t\t\t\tif (result instanceof LiveTestResult) {\n\t\t\t\t\t\tresult.retire(testId);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.subscribeEmitter.fire({ resource, uri });\n\t\t\tthis.testSubscriptions.set(subscriptionKey, subscription);\n\t\t} else if (subscription.disposeTimeout) {\n\t\t\tsubscription.disposeTimeout.dispose();\n\t\t\tsubscription.disposeTimeout = undefined;\n\t\t}\n\n\t\tsubscription.listeners++;\n\n\t\tif (acceptDiff) {\n\t\t\tacceptDiff(subscription.collection.getReviverDiff());\n\t\t}\n\n\t\tconst listener = acceptDiff && subscription.onDiff.event(acceptDiff);\n\t\treturn {\n\t\t\tobject: subscription.collection,\n\t\t\tdispose: () => {\n\t\t\t\tlistener?.dispose();\n\n\t\t\t\tif (--subscription!.listeners > 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\n\t\t\t\tsubscription!.disposeTimeout = disposableTimeout(\n\t\t\t\t\t() => {\n\t\t\t\t\t\tthis.unsubscribeEmitter.fire({ resource, uri });\n\t\t\t\t\t\tthis.testSubscriptions.delete(subscriptionKey);\n\t\t\t\t\t},\n\t\t\t\t\tresource === ExtHostTestingResource.TextDocument ? documentUnsubscribeDelay : workspaceUnsubscribeDelay,\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic publishDiff(resource: ExtHostTestingResource, uri: UriComponents, diff: TestsDiff) {\n\t\tconst sub = this.testSubscriptions.get(getTestSubscriptionKey(resource, URI.revive(uri)));\n\t\tif (!sub) {\n\t\t\treturn;\n\t\t}\n\n\t\tsub.collection.apply(diff);\n\t\tsub.onDiff.fire(diff);\n\t\tthis.hasDebuggable.set(!!this.findTest(t => t.item.debuggable));\n\t\tthis.hasRunnable.set(!!this.findTest(t => t.item.runnable));\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic registerTestController(id: string, controller: MainTestController): IDisposable {\n\t\tthis.testControllers.set(id, controller);\n\t\tthis.providerCount.set(this.testControllers.size);\n\t\tthis.changeProvidersEmitter.fire({ delta: 1 });\n\n\t\treturn toDisposable(() => {\n\t\t\tif (this.testControllers.delete(id)) {\n\t\t\t\tthis.providerCount.set(this.testControllers.size);\n\t\t\t\tthis.changeProvidersEmitter.fire({ delta: -1 });\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate findTest(predicate: (t: InternalTestItem) => boolean): InternalTestItem | undefined {\n\t\tfor (const { collection } of this.testSubscriptions.values()) {\n\t\t\tfor (const test of collection.all) {\n\t\t\t\tif (predicate(test)) {\n\t\t\t\t\treturn test;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n}\n\nexport class MainThreadTestCollection extends AbstractIncrementalTestCollection<IncrementalTestCollectionItem> implements IMainThreadTestCollection {\n\tprivate pendingRootChangeEmitter = new Emitter<number>();\n\tprivate busyProvidersChangeEmitter = new Emitter<number>();\n\tprivate retireTestEmitter = new Emitter<string>();\n\tprivate expandPromises = new WeakMap<IncrementalTestCollectionItem, {\n\t\tpendingLvl: number;\n\t\tdoneLvl: number;\n\t\tprom: Promise<void>;\n\t}>();\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic get pendingRootProviders() {\n\t\treturn this.pendingRootCount;\n\t}\n\n\t/**\n\t * Sets the number of pending root providers.\n\t */\n\tpublic set pendingRootProviders(count: number) {\n\t\tthis.pendingRootCount = count;\n\t\tthis.pendingRootChangeEmitter.fire(count);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic get busyProviders() {\n\t\treturn this.busyControllerCount;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic get rootIds() {\n\t\treturn this.roots;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic get all() {\n\t\treturn this.getIterator();\n\t}\n\n\tpublic readonly onPendingRootProvidersChange = this.pendingRootChangeEmitter.event;\n\tpublic readonly onBusyProvidersChange = this.busyProvidersChangeEmitter.event;\n\tpublic readonly onDidRetireTest = this.retireTestEmitter.event;\n\n\tconstructor(pendingRootProviders: number, private readonly expandActual: (src: TestIdWithSrc, levels: number) => Promise<void>) {\n\t\tsuper();\n\t\tthis.pendingRootCount = pendingRootProviders;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic expand(testId: string, levels: number): Promise<void> {\n\t\tconst test = this.items.get(testId);\n\t\tif (!test) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\t// simple cache to avoid duplicate/unnecessary expansion calls\n\t\tconst existing = this.expandPromises.get(test);\n\t\tif (existing && existing.pendingLvl >= levels) {\n\t\t\treturn existing.prom;\n\t\t}\n\n\t\tconst prom = this.expandActual({ src: test.src, testId: test.item.extId }, levels);\n\t\tconst record = { doneLvl: existing ? existing.doneLvl : -1, pendingLvl: levels, prom };\n\t\tthis.expandPromises.set(test, record);\n\n\t\treturn prom.then(() => {\n\t\t\trecord.doneLvl = levels;\n\t\t});\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic getNodeById(id: string) {\n\t\treturn this.items.get(id);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic getReviverDiff() {\n\t\tconst ops: TestsDiff = [[TestDiffOpType.IncrementPendingExtHosts, this.pendingRootCount]];\n\n\t\tconst queue = [this.roots];\n\t\twhile (queue.length) {\n\t\t\tfor (const child of queue.pop()!) {\n\t\t\t\tconst item = this.items.get(child)!;\n\t\t\t\tops.push([TestDiffOpType.Add, {\n\t\t\t\t\tsrc: item.src,\n\t\t\t\t\texpand: item.expand,\n\t\t\t\t\titem: item.item,\n\t\t\t\t\tparent: item.parent,\n\t\t\t\t}]);\n\t\t\t\tqueue.push(item.children);\n\t\t\t}\n\t\t}\n\n\t\treturn ops;\n\t}\n\n\n\t/**\n\t * Applies the diff to the collection.\n\t */\n\tpublic override apply(diff: TestsDiff) {\n\t\tlet prevBusy = this.busyControllerCount;\n\t\tlet prevPendingRoots = this.pendingRootCount;\n\t\tsuper.apply(diff);\n\n\t\tif (prevBusy !== this.busyControllerCount) {\n\t\t\tthis.busyProvidersChangeEmitter.fire(this.busyControllerCount);\n\t\t}\n\t\tif (prevPendingRoots !== this.pendingRootCount) {\n\t\t\tthis.pendingRootChangeEmitter.fire(this.pendingRootCount);\n\t\t}\n\t}\n\n\t/**\n\t * Clears everything from the collection, and returns a diff that applies\n\t * that action.\n\t */\n\tpublic clear() {\n\t\tconst ops: TestsDiff = [];\n\t\tfor (const root of this.roots) {\n\t\t\tops.push([TestDiffOpType.Remove, root]);\n\t\t}\n\n\t\tthis.roots.clear();\n\t\tthis.items.clear();\n\n\t\treturn ops;\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprotected createItem(internal: InternalTestItem): IncrementalTestCollectionItem {\n\t\treturn { ...internal, children: new Set() };\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprotected override retireTest(testId: string) {\n\t\tthis.retireTestEmitter.fire(testId);\n\t}\n\n\tprivate *getIterator() {\n\t\tconst queue = [this.rootIds];\n\t\twhile (queue.length) {\n\t\t\tfor (const id of queue.pop()!) {\n\t\t\t\tconst node = this.getNodeById(id)!;\n\t\t\t\tyield node;\n\t\t\t\tqueue.push(node.children);\n\t\t\t}\n\t\t}\n\t}\n}\n"]}