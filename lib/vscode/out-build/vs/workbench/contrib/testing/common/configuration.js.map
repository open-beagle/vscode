{"version":3,"sources":["vs/workbench/contrib/testing/common/configuration.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAMhG,IAAkB,iBAMjB;IAND,WAAkB,iBAAiB;QAClC,2DAAsC,CAAA;QACtC,yDAAoC,CAAA;QACpC,2EAAsD,CAAA;QACtD,qGAAgF,CAAA;QAChF,oEAA+C,CAAA;IAChD,CAAC,EANiB,iBAAiB,GAAjB,yBAAiB,KAAjB,yBAAiB,QAMlC;IAED,IAAkB,oBAGjB;IAHD,WAAkB,oBAAoB;QACrC,mEAA2C,CAAA;QAC3C,2DAAmC,CAAA;IACpC,CAAC,EAHiB,oBAAoB,GAApB,4BAAoB,KAApB,4BAAoB,QAGrC;IAED,IAAkB,WAGjB;IAHD,WAAkB,WAAW;QAC5B,qCAAsB,CAAA;QACtB,0CAA2B,CAAA;IAC5B,CAAC,EAHiB,WAAW,GAAX,mBAAW,KAAX,mBAAW,QAG5B;IAEY,QAAA,mBAAmB,GAAuB;QACtD,EAAE,EAAE,SAAS;QACb,KAAK,EAAE,EAAE;QACT,KAAK,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAwB,EAAE,IAAS,CAAC;QACpD,IAAI,EAAE,QAAQ;QACd,UAAU,EAAE;YACX,0CAA+B,EAAE;gBAChC,WAAW,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAsB,EAAE,IAA6C,CAAC;gBAC5F,IAAI,EAAE;;;iBAGL;gBACD,OAAO,4BAA4B;gBACnC,gBAAgB,EAAE;oBACjB,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAqC,EAAE,IAAiH,CAAC;oBAClK,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAwC,EAAE,IAA0H,CAAC;iBAC9K;aACD;YACD,4CAAgC,EAAE;gBACjC,IAAI,EAAE,SAAS;gBACf,OAAO,EAAE,CAAC;gBACV,WAAW,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAuB,EAAE,IAA+F,CAAC;gBAC/I,OAAO,EAAE,IAAI;aACb;YACD,4DAAoC,EAAE;gBACrC,WAAW,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAmC,EAAE,IAA8D,CAAC;gBAC1H,IAAI,EAAE;;;iBAGL;gBACD,OAAO,iDAAqC;gBAC5C,gBAAgB,EAAE;oBACjB,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAmD,EAAE,IAAoD,CAAC;oBACnH,CAAA,GAAA,cAAQ,CAAA,CAAC,CAA4D,EAAE,IAA6D,CAAC;iBACrI;aACD;YACD,sFAAiD,EAAE;gBAClD,WAAW,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAgD,EAAE,IAA4E,CAAC;gBACrJ,IAAI,EAAE,SAAS;gBACf,OAAO,EAAE,KAAK;aACd;YACD,qDAAqC,EAAE;gBACtC,WAAW,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAA2B,EAAE,IAAgF,CAAC;gBACpI,IAAI,EAAE,SAAS;gBACf,OAAO,EAAE,IAAI;aACb;SACD;KACD,CAAC;IAUK,MAAM,uBAAuB,GAAG,CAA8B,MAA6B,EAAE,GAAM,EAAE,EAAE,CAAC,MAAM,CAAC,QAAQ,CAA2B,GAAG,CAAC,CAAC;IAAjJ,QAAA,uBAAuB,2BAA0H","file":"configuration.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IConfigurationNode } from 'vs/platform/configuration/common/configurationRegistry';\n\nexport const enum TestingConfigKeys {\n\tAutoRunDelay = 'testing.autoRun.delay',\n\tAutoRunMode = 'testing.autoRun.mode',\n\tAutoOpenPeekView = 'testing.automaticallyOpenPeekView',\n\tAutoOpenPeekViewDuringAutoRun = 'testing.automaticallyOpenPeekViewDuringAutoRun',\n\tFollowRunningTest = 'testing.followRunningTest',\n}\n\nexport const enum AutoOpenPeekViewWhen {\n\tFailureVisible = 'failureInVisibleDocument',\n\tFailureAnywhere = 'failureAnywhere',\n}\n\nexport const enum AutoRunMode {\n\tAllInWorkspace = 'all',\n\tOnlyPreviouslyRun = 'rerun',\n}\n\nexport const testingConfiguation: IConfigurationNode = {\n\tid: 'testing',\n\torder: 21,\n\ttitle: localize('testConfigurationTitle', \"Testing\"),\n\ttype: 'object',\n\tproperties: {\n\t\t[TestingConfigKeys.AutoRunMode]: {\n\t\t\tdescription: localize('testing.autoRun.mode', \"Controls which tests are automatically run.\"),\n\t\t\tenum: [\n\t\t\t\tAutoRunMode.AllInWorkspace,\n\t\t\t\tAutoRunMode.OnlyPreviouslyRun,\n\t\t\t],\n\t\t\tdefault: AutoRunMode.AllInWorkspace,\n\t\t\tenumDescriptions: [\n\t\t\t\tlocalize('testing.autoRun.mode.allInWorkspace', \"Automatically runs all discovered test when auto-run is toggled. Reruns individual tests when they are changed.\"),\n\t\t\t\tlocalize('testing.autoRun.mode.onlyPreviouslyRun', \"Reruns individual tests when they are changed. Will not automatically run any tests that have not been already executed.\")\n\t\t\t],\n\t\t},\n\t\t[TestingConfigKeys.AutoRunDelay]: {\n\t\t\ttype: 'integer',\n\t\t\tminimum: 0,\n\t\t\tdescription: localize('testing.autoRun.delay', \"How long to wait, in milliseconds, after a test is marked as outdated and starting a new run.\"),\n\t\t\tdefault: 1000,\n\t\t},\n\t\t[TestingConfigKeys.AutoOpenPeekView]: {\n\t\t\tdescription: localize('testing.automaticallyOpenPeekView', \"Configures when the error peek view is automatically opened.\"),\n\t\t\tenum: [\n\t\t\t\tAutoOpenPeekViewWhen.FailureAnywhere,\n\t\t\t\tAutoOpenPeekViewWhen.FailureVisible,\n\t\t\t],\n\t\t\tdefault: AutoOpenPeekViewWhen.FailureVisible,\n\t\t\tenumDescriptions: [\n\t\t\t\tlocalize('testing.automaticallyOpenPeekView.failureAnywhere', \"Open automatically no matter where the failure is.\"),\n\t\t\t\tlocalize('testing.automaticallyOpenPeekView.failureInVisibleDocument', \"Open automatically when a test fails in a visible document.\")\n\t\t\t],\n\t\t},\n\t\t[TestingConfigKeys.AutoOpenPeekViewDuringAutoRun]: {\n\t\t\tdescription: localize('testing.automaticallyOpenPeekViewDuringAutoRun', \"Controls whether to automatically open the peek view during auto-run mode.\"),\n\t\t\ttype: 'boolean',\n\t\t\tdefault: false,\n\t\t},\n\t\t[TestingConfigKeys.FollowRunningTest]: {\n\t\t\tdescription: localize('testing.followRunningTest', 'Controls whether the running test should be followed in the test explorer view'),\n\t\t\ttype: 'boolean',\n\t\t\tdefault: true,\n\t\t},\n\t}\n};\n\nexport interface ITestingConfiguration {\n\t[TestingConfigKeys.AutoRunMode]: AutoRunMode;\n\t[TestingConfigKeys.AutoRunDelay]: number;\n\t[TestingConfigKeys.AutoOpenPeekView]: AutoOpenPeekViewWhen;\n\t[TestingConfigKeys.AutoOpenPeekViewDuringAutoRun]: boolean;\n\t[TestingConfigKeys.FollowRunningTest]: boolean;\n}\n\nexport const getTestingConfiguration = <K extends TestingConfigKeys>(config: IConfigurationService, key: K) => config.getValue<ITestingConfiguration[K]>(key);\n"]}