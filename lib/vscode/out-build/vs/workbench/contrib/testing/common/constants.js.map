{"version":3,"sources":["vs/workbench/contrib/testing/common/constants.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAKhG,IAAkB,OAOjB;IAPD,WAAkB,OAAO;QACxB,iFAAiF;QACjF,sDAA2C,CAAA;QAC3C,oDAAyC,CAAA;QACzC,wEAA6D,CAAA;QAC7D,0EAA+D,CAAA;QAC/D,4EAAiE,CAAA;IAClE,CAAC,EAPiB,OAAO,GAAP,eAAO,KAAP,eAAO,QAOxB;IAED,IAAkB,oBAGjB;IAHD,WAAkB,oBAAoB;QACrC,qCAAa,CAAA;QACb,qCAAa,CAAA;IACd,CAAC,EAHiB,oBAAoB,GAApB,4BAAoB,KAApB,4BAAoB,QAGrC;IAED,IAAkB,uBAGjB;IAHD,WAAkB,uBAAuB;QACxC,kDAAuB,CAAA;QACvB,0CAAe,CAAA;IAChB,CAAC,EAHiB,uBAAuB,GAAvB,+BAAuB,KAAvB,+BAAuB,QAGxC;IAED,IAAkB,uBAIjB;IAJD,WAAkB,uBAAuB;QACxC,gDAAqB,CAAA;QACrB,mDAAwB,CAAA;QACxB,sCAAW,CAAA;IACZ,CAAC,EAJiB,uBAAuB,GAAvB,+BAAuB,KAAvB,+BAAuB,QAIxC;IAEY,QAAA,cAAc,GAAuC;QACjE,CAAC,8BAAe,CAAC,OAAO,CAAC,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAmB,EAAE,IAAS,CAAC;QACnE,CAAC,8BAAe,CAAC,MAAM,CAAC,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAkB,EAAE,IAAQ,CAAC;QAChE,CAAC,8BAAe,CAAC,MAAM,CAAC,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAkB,EAAE,IAAQ,CAAC;QAChE,CAAC,8BAAe,CAAC,MAAM,CAAC,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAkB,EAAE,IAAQ,CAAC;QAChE,CAAC,8BAAe,CAAC,OAAO,CAAC,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAmB,EAAE,IAAS,CAAC;QACnE,CAAC,8BAAe,CAAC,OAAO,CAAC,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAmB,EAAE,IAAS,CAAC;QACnE,CAAC,8BAAe,CAAC,KAAK,CAAC,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAiB,EAAE,IAAO,CAAC;KAC7D,CAAC","file":"constants.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { TestResultState } from 'vs/workbench/api/common/extHostTypes';\n\nexport const enum Testing {\n\t// marked as \"extension\" so that any existing test extensions are assigned to it.\n\tViewletId = 'workbench.view.extension.test',\n\tExplorerViewId = 'workbench.view.testing',\n\tOutputPeekContributionId = 'editor.contrib.testingOutputPeek',\n\tDecorationsContributionId = 'editor.contrib.testingDecorations',\n\tFilterActionId = 'workbench.actions.treeView.testExplorer.filter',\n}\n\nexport const enum TestExplorerViewMode {\n\tList = 'list',\n\tTree = 'true'\n}\n\nexport const enum TestExplorerViewSorting {\n\tByLocation = 'location',\n\tByName = 'name',\n}\n\nexport const enum TestExplorerStateFilter {\n\tOnlyFailed = 'failed',\n\tOnlyExecuted = 'excuted',\n\tAll = 'all',\n}\n\nexport const testStateNames: { [K in TestResultState]: string } = {\n\t[TestResultState.Errored]: localize('testState.errored', 'Errored'),\n\t[TestResultState.Failed]: localize('testState.failed', 'Failed'),\n\t[TestResultState.Passed]: localize('testState.passed', 'Passed'),\n\t[TestResultState.Queued]: localize('testState.queued', 'Queued'),\n\t[TestResultState.Running]: localize('testState.running', 'Running'),\n\t[TestResultState.Skipped]: localize('testState.skipped', 'Skipped'),\n\t[TestResultState.Unset]: localize('testState.unset', 'Unset'),\n};\n"]}