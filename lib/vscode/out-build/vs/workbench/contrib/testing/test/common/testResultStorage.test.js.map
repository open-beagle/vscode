{"version":3,"file":"testResultStorage.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/testing/test/common/testResultStorage.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { range } from 'vs/base/common/arrays';\nimport { NullLogService } from 'vs/platform/log/common/log';\nimport { ITestResult, LiveTestResult } from 'vs/workbench/contrib/testing/common/testResult';\nimport { InMemoryResultStorage, RETAIN_MAX_RESULTS } from 'vs/workbench/contrib/testing/common/testResultStorage';\nimport { Convert, testStubs, testStubsChain } from 'vs/workbench/contrib/testing/common/testStubs';\nimport { emptyOutputController } from 'vs/workbench/contrib/testing/test/common/testResultService.test';\nimport { TestStorageService } from 'vs/workbench/test/common/workbenchTestServices';\n\nsuite('Workbench - Test Result Storage', () => {\n\tlet storage: InMemoryResultStorage;\n\n\tconst makeResult = (addMessage?: string) => {\n\t\tconst t = new LiveTestResult(\n\t\t\t'',\n\t\t\temptyOutputController(),\n\t\t\t{\n\t\t\t\ttests: [],\n\t\t\t\texclude: [],\n\t\t\t\tdebug: false,\n\t\t\t\tid: 'x',\n\t\t\t\tpersist: true,\n\t\t\t}\n\t\t);\n\n\t\tt.addTask({ id: 't', name: undefined, running: true });\n\t\tconst tests = testStubs.nested();\n\t\tt.addTestChainToRun(testStubsChain(tests, ['id-a', 'id-aa']).map(Convert.TestItem.from));\n\n\t\tif (addMessage) {\n\t\t\tt.appendMessage('id-a', 't', {\n\t\t\t\tmessage: addMessage,\n\t\t\t\tactualOutput: undefined,\n\t\t\t\texpectedOutput: undefined,\n\t\t\t\tlocation: undefined,\n\t\t\t\tseverity: 0,\n\t\t\t});\n\t\t}\n\t\tt.markComplete();\n\t\treturn t;\n\t};\n\n\tconst assertStored = async (stored: ITestResult[]) =>\n\t\tassert.deepStrictEqual((await storage.read()).map(r => r.id), stored.map(s => s.id));\n\n\tsetup(async () => {\n\t\tstorage = new InMemoryResultStorage(new TestStorageService(), new NullLogService());\n\t});\n\n\ttest('stores a single result', async () => {\n\t\tconst r = range(5).map(() => makeResult());\n\t\tawait storage.persist(r);\n\t\tawait assertStored(r);\n\t});\n\n\ttest('deletes old results', async () => {\n\t\tconst r = range(5).map(() => makeResult());\n\t\tawait storage.persist(r);\n\t\tconst r2 = [makeResult(), ...r.slice(0, 3)];\n\t\tawait storage.persist(r2);\n\t\tawait assertStored(r2);\n\t});\n\n\ttest('limits stored results', async () => {\n\t\tconst r = range(100).map(() => makeResult());\n\t\tawait storage.persist(r);\n\t\tawait assertStored(r.slice(0, RETAIN_MAX_RESULTS));\n\t});\n\n\ttest('limits stored result by budget', async () => {\n\t\tconst r = range(100).map(() => makeResult('a'.repeat(2048)));\n\t\tawait storage.persist(r);\n\t\tawait assertStored(r.slice(0, 44));\n\t});\n\n\ttest('always stores the min number of results', async () => {\n\t\tconst r = range(20).map(() => makeResult('a'.repeat(1024 * 10)));\n\t\tawait storage.persist(r);\n\t\tawait assertStored(r.slice(0, 16));\n\t});\n\n\ttest('takes into account existing stored bytes', async () => {\n\t\tconst r = range(10).map(() => makeResult('a'.repeat(1024 * 10)));\n\t\tawait storage.persist(r);\n\t\tawait assertStored(r);\n\n\t\tconst r2 = [...r, ...range(10).map(() => makeResult('a'.repeat(1024 * 10)))];\n\t\tawait storage.persist(r2);\n\t\tawait assertStored(r2.slice(0, 16));\n\t});\n});\n"]}