{"version":3,"file":"hierarchalByName.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/testing/test/browser/explorerProjections/hierarchalByName.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { timeout } from 'vs/base/common/async';\nimport { HierarchicalByNameProjection } from 'vs/workbench/contrib/testing/browser/explorerProjections/hierarchalByName';\nimport { testStubs } from 'vs/workbench/contrib/testing/common/testStubs';\nimport { makeTestWorkspaceFolder, TestTreeTestHarness } from 'vs/workbench/contrib/testing/test/browser/testObjectTree';\n\nsuite('Workbench - Testing Explorer Hierarchal by Name Projection', () => {\n\tlet harness: TestTreeTestHarness;\n\tconst folder1 = makeTestWorkspaceFolder('f1');\n\tconst folder2 = makeTestWorkspaceFolder('f2');\n\tsetup(() => {\n\t\tharness = new TestTreeTestHarness([folder1, folder2], l => new HierarchicalByNameProjection(l, {\n\t\t\tonResultsChanged: () => undefined,\n\t\t\tonTestChanged: () => undefined,\n\t\t\tgetStateById: () => ({ state: { state: 0 }, computedState: 0 }),\n\t\t} as any));\n\t});\n\n\tteardown(() => {\n\t\tharness.dispose();\n\t});\n\n\ttest('renders initial tree', async () => {\n\t\tawait timeout(1000);\n\t\tharness.c.addRoot(testStubs.nested(), 'a');\n\t\tharness.flush(folder1);\n\t\tassert.deepStrictEqual(harness.tree.getRendered(), [\n\t\t\t{ e: 'aa' }, { e: 'ab' }, { e: 'b' }\n\t\t]);\n\t});\n\n\ttest('updates render if a second folder is added', async () => {\n\t\tharness.c.addRoot(testStubs.nested('id1-'), 'a');\n\t\tharness.flush(folder1);\n\t\tharness.c.addRoot(testStubs.nested('id2-'), 'a');\n\t\tharness.flush(folder2);\n\t\tassert.deepStrictEqual(harness.flush(folder1), [\n\t\t\t{ e: 'f1', children: [{ e: 'aa' }, { e: 'ab' }, { e: 'b' }] },\n\t\t\t{ e: 'f2', children: [{ e: 'aa' }, { e: 'ab' }, { e: 'b' }] },\n\t\t]);\n\t});\n\n\ttest('updates render if second folder is removed', async () => {\n\t\tharness.c.addRoot(testStubs.nested('id1-'), 'a');\n\t\tharness.flush(folder1);\n\t\tharness.c.addRoot(testStubs.nested('id2-'), 'a');\n\t\tharness.flush(folder2);\n\t\tharness.onFolderChange.fire({ added: [], changed: [], removed: [folder1] });\n\t\tassert.deepStrictEqual(harness.flush(folder1), [\n\t\t\t{ e: 'aa' }, { e: 'ab' }, { e: 'b' },\n\t\t]);\n\t});\n\n\ttest('updates render if second test provider appears', async () => {\n\t\tawait timeout(100);\n\t\tharness.c.addRoot(testStubs.nested(), 'a');\n\t\tharness.flush(folder1);\n\t\tharness.c.addRoot(testStubs.test('root2', undefined, [testStubs.test('c')]), 'b');\n\t\tharness.flush(folder1);\n\t\tawait timeout(10);\n\t\tharness.flush(folder1);\n\t\tawait timeout(10);\n\t\tassert.deepStrictEqual(harness.tree.getRendered(), [\n\t\t\t{ e: 'root', children: [{ e: 'aa' }, { e: 'ab' }, { e: 'b' }] },\n\t\t\t{ e: 'root2', children: [{ e: 'c' }] },\n\t\t]);\n\t});\n\n\ttest('updates nodes if they add children', async () => {\n\t\tconst tests = testStubs.nested();\n\t\tharness.c.addRoot(tests, 'a');\n\t\tharness.flush(folder1);\n\n\t\ttests.children.get('id-a')!.addChild(testStubs.test('ac'));\n\n\t\tassert.deepStrictEqual(harness.flush(folder1), [\n\t\t\t{ e: 'aa' },\n\t\t\t{ e: 'ab' },\n\t\t\t{ e: 'ac' },\n\t\t\t{ e: 'b' }\n\t\t]);\n\t});\n\n\ttest('updates nodes if they remove children', async () => {\n\t\tconst tests = testStubs.nested();\n\t\tharness.c.addRoot(tests, 'a');\n\t\tharness.flush(folder1);\n\n\t\ttests.children.get('id-a')!.children.get('id-ab')!.dispose();\n\n\t\tassert.deepStrictEqual(harness.flush(folder1), [\n\t\t\t{ e: 'aa' },\n\t\t\t{ e: 'b' }\n\t\t]);\n\t});\n\n\ttest('swaps when node is no longer leaf', async () => {\n\t\tconst tests = testStubs.nested();\n\t\tharness.c.addRoot(tests, 'a');\n\t\tharness.flush(folder1);\n\n\t\ttests.children.get('id-b')!.addChild(testStubs.test('ba'));\n\n\t\tassert.deepStrictEqual(harness.flush(folder1), [\n\t\t\t{ e: 'aa' },\n\t\t\t{ e: 'ab' },\n\t\t\t{ e: 'ba' },\n\t\t]);\n\t});\n\n\ttest('swaps when node is no longer runnable', async () => {\n\t\tconst tests = testStubs.nested();\n\t\tharness.c.addRoot(tests, 'a');\n\t\tharness.flush(folder1);\n\n\t\tconst child = testStubs.test('ba');\n\t\ttests.children.get('id-b')!.addChild(child);\n\t\tharness.flush(folder1);\n\n\t\tchild.runnable = false;\n\n\t\tassert.deepStrictEqual(harness.flush(folder1), [\n\t\t\t{ e: 'aa' },\n\t\t\t{ e: 'ab' },\n\t\t\t{ e: 'b' },\n\t\t]);\n\t});\n});\n\n"]}