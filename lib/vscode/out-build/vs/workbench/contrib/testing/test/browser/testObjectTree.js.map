{"version":3,"file":"testObjectTree.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/testing/test/browser/testObjectTree.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ObjectTree } from 'vs/base/browser/ui/tree/objectTree';\nimport { Emitter } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { IWorkspaceFolder, IWorkspaceFolderData, IWorkspaceFoldersChangeEvent } from 'vs/platform/workspace/common/workspace';\nimport { TestItemTreeElement, ITestTreeProjection, TestExplorerTreeElement } from 'vs/workbench/contrib/testing/browser/explorerProjections/index';\nimport { TestsDiff } from 'vs/workbench/contrib/testing/common/testCollection';\nimport { TestSubscriptionListener } from 'vs/workbench/contrib/testing/common/workspaceTestCollectionService';\nimport { TestOwnedTestCollection, TestSingleUseCollection } from 'vs/workbench/contrib/testing/test/common/ownedTestCollection';\n\ntype SerializedTree = { e: string; children?: SerializedTree[] };\n\nconst element = document.createElement('div');\nelement.style.height = '1000px';\nelement.style.width = '200px';\n\nexport class TestObjectTree<T> extends ObjectTree<T, any> {\n\tconstructor(serializer: (node: T) => string) {\n\t\tsuper(\n\t\t\t'test',\n\t\t\telement,\n\t\t\t{\n\t\t\t\tgetHeight: () => 20,\n\t\t\t\tgetTemplateId: () => 'default'\n\t\t\t},\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\tdisposeTemplate: () => undefined,\n\t\t\t\t\trenderElement: (node, _index, container: HTMLElement) => {\n\t\t\t\t\t\tcontainer.textContent = `${node.depth}:${serializer(node.element)}`;\n\t\t\t\t\t},\n\t\t\t\t\trenderTemplate: c => c,\n\t\t\t\t\ttemplateId: 'default'\n\t\t\t\t}\n\t\t\t],\n\t\t\t{\n\t\t\t\tsorter: {\n\t\t\t\t\tcompare: (a, b) => serializer(a).localeCompare(serializer(b))\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t\tthis.layout(1000, 200);\n\t}\n\n\tpublic getModel() {\n\t\treturn this.model;\n\t}\n\n\tpublic getRendered() {\n\t\tconst elements = element.querySelectorAll('.monaco-tl-contents');\n\t\tconst sorted = [...elements].sort((a, b) => pos(a) - pos(b));\n\t\tlet chain: SerializedTree[] = [{ e: '', children: [] }];\n\t\tfor (const element of sorted) {\n\t\t\tconst [depthStr, label] = element.textContent!.split(':');\n\t\t\tconst depth = Number(depthStr);\n\t\t\tconst parent = chain[depth - 1];\n\t\t\tconst child = { e: label };\n\t\t\tparent.children = parent.children?.concat(child) ?? [child];\n\t\t\tchain[depth] = child;\n\t\t}\n\n\t\treturn chain[0].children;\n\t}\n}\n\nconst pos = (element: Element) => Number(element.parentElement!.parentElement!.getAttribute('aria-posinset'));\n\nexport const makeTestWorkspaceFolder = (name: string): IWorkspaceFolder => ({\n\tname,\n\turi: URI.file(`/${name}`),\n\tindex: 0,\n\ttoResource: path => URI.file(`/${name}/${path}`)\n});\n\n// names are hard\nexport class TestTreeTestHarness<T extends ITestTreeProjection = ITestTreeProjection> extends Disposable {\n\tprivate readonly owned = new TestOwnedTestCollection();\n\tprivate readonly onDiff = this._register(new Emitter<[IWorkspaceFolderData, TestsDiff]>());\n\tpublic readonly onFolderChange = this._register(new Emitter<IWorkspaceFoldersChangeEvent>());\n\tpublic readonly c: TestSingleUseCollection = this._register(this.owned.createForHierarchy(d => this.c.setDiff(d /* don't clear during testing */)));\n\tprivate isProcessingDiff = false;\n\tpublic readonly projection: T;\n\tpublic readonly tree: TestObjectTree<TestExplorerTreeElement>;\n\n\tconstructor(folders: IWorkspaceFolderData[], makeTree: (listener: TestSubscriptionListener) => T) {\n\t\tsuper();\n\t\tthis.projection = this._register(makeTree({\n\t\t\tworkspaceFolderCollections: folders.map(folder => [{ folder }, {\n\t\t\t\texpand: (testId: string, levels: number) => {\n\t\t\t\t\tthis.c.expand(testId, levels);\n\t\t\t\t\tif (!this.isProcessingDiff) {\n\t\t\t\t\t\tthis.onDiff.fire([folder, this.c.collectDiff()]);\n\t\t\t\t\t}\n\t\t\t\t\treturn Promise.resolve();\n\t\t\t\t},\n\t\t\t\tall: [],\n\t\t\t}]),\n\t\t\tonDiff: this.onDiff.event,\n\t\t\tonFolderChange: this.onFolderChange.event,\n\t\t} as any));\n\t\tthis.tree = this._register(new TestObjectTree(t => 'label' in t ? t.label : t.message.toString()));\n\t\tthis._register(this.tree.onDidChangeCollapseState(evt => {\n\t\t\tif (evt.node.element instanceof TestItemTreeElement) {\n\t\t\t\tthis.projection.expandElement(evt.node.element, evt.deep ? Infinity : 0);\n\t\t\t}\n\t\t}));\n\t}\n\n\tpublic flush(folder: IWorkspaceFolderData) {\n\t\tthis.isProcessingDiff = true;\n\t\twhile (this.c.currentDiff.length) {\n\t\t\tthis.onDiff.fire([folder!, this.c.collectDiff()]);\n\t\t}\n\t\tthis.isProcessingDiff = false;\n\n\t\tthis.projection.applyTo(this.tree);\n\t\treturn this.tree.getRendered();\n\t}\n}\n"]}