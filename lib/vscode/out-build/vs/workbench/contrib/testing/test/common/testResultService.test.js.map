{"version":3,"file":"testResultService.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/testing/test/common/testResultService.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { timeout } from 'vs/base/common/async';\nimport { bufferToStream, newWriteableBufferStream, VSBuffer } from 'vs/base/common/buffer';\nimport { Lazy } from 'vs/base/common/lazy';\nimport { MockContextKeyService } from 'vs/platform/keybinding/test/common/mockKeybindingService';\nimport { NullLogService } from 'vs/platform/log/common/log';\nimport { ITestTaskState, TestResultItem } from 'vs/workbench/contrib/testing/common/testCollection';\nimport { HydratedTestResult, LiveOutputController, LiveTestResult, makeEmptyCounts, TestResultItemChange, TestResultItemChangeReason } from 'vs/workbench/contrib/testing/common/testResult';\nimport { TestResultService } from 'vs/workbench/contrib/testing/common/testResultService';\nimport { InMemoryResultStorage, ITestResultStorage } from 'vs/workbench/contrib/testing/common/testResultStorage';\nimport { Convert, ReExportedTestRunState as TestRunState, TestItemImpl, TestResultState, testStubs, testStubsChain } from 'vs/workbench/contrib/testing/common/testStubs';\nimport { getInitializedMainTestCollection } from 'vs/workbench/contrib/testing/test/common/ownedTestCollection';\nimport { TestStorageService } from 'vs/workbench/test/common/workbenchTestServices';\n\nexport const emptyOutputController = () => new LiveOutputController(\n\tnew Lazy(() => [newWriteableBufferStream(), Promise.resolve()]),\n\t() => Promise.resolve(bufferToStream(VSBuffer.alloc(0))),\n);\n\nsuite('Workbench - Test Results Service', () => {\n\tconst getLabelsIn = (it: Iterable<TestResultItem>) => [...it].map(t => t.item.label).sort();\n\tconst getChangeSummary = () => [...changed]\n\t\t.map(c => ({ reason: c.reason, label: c.item.item.label }))\n\t\t.sort((a, b) => a.label.localeCompare(b.label));\n\n\tlet r: TestLiveTestResult;\n\tlet changed = new Set<TestResultItemChange>();\n\tlet tests: TestItemImpl;\n\n\tconst defaultOpts = {\n\t\texclude: [],\n\t\tdebug: false,\n\t\tid: 'x',\n\t\tpersist: true,\n\t};\n\n\tclass TestLiveTestResult extends LiveTestResult {\n\t\tpublic override setAllToState(state: TestResultState, taskId: string, when: (task: ITestTaskState, item: TestResultItem) => boolean) {\n\t\t\tsuper.setAllToState(state, taskId, when);\n\t\t}\n\t}\n\n\tsetup(async () => {\n\t\tchanged = new Set();\n\t\tr = new TestLiveTestResult(\n\t\t\t'foo',\n\t\t\temptyOutputController(),\n\t\t\t{ ...defaultOpts, tests: ['id-a'] },\n\t\t);\n\n\t\tr.onChange(e => changed.add(e));\n\t\tr.addTask({ id: 't', name: undefined, running: true });\n\n\t\ttests = testStubs.nested();\n\t\tr.addTestChainToRun(testStubsChain(tests, ['id-a', 'id-aa']).map(Convert.TestItem.from));\n\t\tr.addTestChainToRun(testStubsChain(tests, ['id-a', 'id-ab'], 1).map(Convert.TestItem.from));\n\t});\n\n\tsuite('LiveTestResult', () => {\n\t\ttest('is empty if no tests are yet present', async () => {\n\t\t\tassert.deepStrictEqual(getLabelsIn(new TestLiveTestResult(\n\t\t\t\t'foo',\n\t\t\t\temptyOutputController(),\n\t\t\t\t{ ...defaultOpts, tests: ['id-a'] },\n\t\t\t).tests), []);\n\t\t});\n\n\t\ttest('initially queues with update', () => {\n\t\t\tassert.deepStrictEqual(getChangeSummary(), [\n\t\t\t\t{ label: 'a', reason: TestResultItemChangeReason.ComputedStateChange },\n\t\t\t\t{ label: 'aa', reason: TestResultItemChangeReason.OwnStateChange },\n\t\t\t\t{ label: 'ab', reason: TestResultItemChangeReason.OwnStateChange },\n\t\t\t\t{ label: 'root', reason: TestResultItemChangeReason.ComputedStateChange },\n\t\t\t]);\n\t\t});\n\n\t\ttest('initializes with the subtree of requested tests', () => {\n\t\t\tassert.deepStrictEqual(getLabelsIn(r.tests), ['a', 'aa', 'ab', 'root']);\n\t\t});\n\n\t\ttest('initializes with valid counts', () => {\n\t\t\tassert.deepStrictEqual(r.counts, {\n\t\t\t\t...makeEmptyCounts(),\n\t\t\t\t[TestRunState.Queued]: 2,\n\t\t\t\t[TestRunState.Unset]: 2,\n\t\t\t});\n\t\t});\n\n\t\ttest('setAllToState', () => {\n\t\t\tchanged.clear();\n\t\t\tr.setAllToState(TestRunState.Queued, 't', (_, t) => t.item.label !== 'root');\n\t\t\tassert.deepStrictEqual(r.counts, {\n\t\t\t\t...makeEmptyCounts(),\n\t\t\t\t[TestRunState.Unset]: 1,\n\t\t\t\t[TestRunState.Queued]: 3,\n\t\t\t});\n\n\t\t\tr.setAllToState(TestRunState.Passed, 't', (_, t) => t.item.label !== 'root');\n\t\t\tassert.deepStrictEqual(r.counts, {\n\t\t\t\t...makeEmptyCounts(),\n\t\t\t\t[TestRunState.Unset]: 1,\n\t\t\t\t[TestRunState.Passed]: 3,\n\t\t\t});\n\n\t\t\tassert.deepStrictEqual(r.getStateById('id-a')?.ownComputedState, TestRunState.Passed);\n\t\t\tassert.deepStrictEqual(r.getStateById('id-a')?.tasks[0].state, TestRunState.Passed);\n\t\t\tassert.deepStrictEqual(getChangeSummary(), [\n\t\t\t\t{ label: 'a', reason: TestResultItemChangeReason.OwnStateChange },\n\t\t\t\t{ label: 'aa', reason: TestResultItemChangeReason.OwnStateChange },\n\t\t\t\t{ label: 'ab', reason: TestResultItemChangeReason.OwnStateChange },\n\t\t\t\t{ label: 'root', reason: TestResultItemChangeReason.ComputedStateChange },\n\t\t\t]);\n\t\t});\n\n\t\ttest('updateState', () => {\n\t\t\tchanged.clear();\n\t\t\tr.updateState('id-aa', 't', TestRunState.Running);\n\t\t\tassert.deepStrictEqual(r.counts, {\n\t\t\t\t...makeEmptyCounts(),\n\t\t\t\t[TestRunState.Unset]: 2,\n\t\t\t\t[TestRunState.Running]: 1,\n\t\t\t\t[TestRunState.Queued]: 1,\n\t\t\t});\n\t\t\tassert.deepStrictEqual(r.getStateById('id-aa')?.ownComputedState, TestRunState.Running);\n\t\t\t// update computed state:\n\t\t\tassert.deepStrictEqual(r.getStateById('id-root')?.computedState, TestRunState.Running);\n\t\t\tassert.deepStrictEqual(getChangeSummary(), [\n\t\t\t\t{ label: 'a', reason: TestResultItemChangeReason.ComputedStateChange },\n\t\t\t\t{ label: 'aa', reason: TestResultItemChangeReason.OwnStateChange },\n\t\t\t\t{ label: 'root', reason: TestResultItemChangeReason.ComputedStateChange },\n\t\t\t]);\n\t\t});\n\n\t\ttest('retire', () => {\n\t\t\tchanged.clear();\n\t\t\tr.retire('id-a');\n\t\t\tassert.deepStrictEqual(getChangeSummary(), [\n\t\t\t\t{ label: 'a', reason: TestResultItemChangeReason.Retired },\n\t\t\t\t{ label: 'aa', reason: TestResultItemChangeReason.ParentRetired },\n\t\t\t\t{ label: 'ab', reason: TestResultItemChangeReason.ParentRetired },\n\t\t\t]);\n\n\t\t\tchanged.clear();\n\t\t\tr.retire('id-a');\n\t\t\tassert.strictEqual(changed.size, 0);\n\t\t});\n\n\t\ttest('ignores outside run', () => {\n\t\t\tchanged.clear();\n\t\t\tr.updateState('id-b', 't', TestRunState.Running);\n\t\t\tassert.deepStrictEqual(r.counts, {\n\t\t\t\t...makeEmptyCounts(),\n\t\t\t\t[TestRunState.Queued]: 2,\n\t\t\t\t[TestRunState.Unset]: 2,\n\t\t\t});\n\t\t\tassert.deepStrictEqual(r.getStateById('id-b'), undefined);\n\t\t});\n\n\t\ttest('markComplete', () => {\n\t\t\tr.setAllToState(TestRunState.Queued, 't', () => true);\n\t\t\tr.updateState('id-aa', 't', TestRunState.Passed);\n\t\t\tchanged.clear();\n\n\t\t\tr.markComplete();\n\n\t\t\tassert.deepStrictEqual(r.counts, {\n\t\t\t\t...makeEmptyCounts(),\n\t\t\t\t[TestRunState.Passed]: 1,\n\t\t\t\t[TestRunState.Unset]: 3,\n\t\t\t});\n\n\t\t\tassert.deepStrictEqual(r.getStateById('id-root')?.ownComputedState, TestRunState.Unset);\n\t\t\tassert.deepStrictEqual(r.getStateById('id-aa')?.ownComputedState, TestRunState.Passed);\n\t\t});\n\t});\n\n\tsuite('service', () => {\n\t\tlet storage: ITestResultStorage;\n\t\tlet results: TestResultService;\n\n\t\tclass TestTestResultService extends TestResultService {\n\t\t\toverride persistScheduler = { schedule: () => this.persistImmediately() } as any;\n\t\t}\n\n\t\tsetup(() => {\n\t\t\tstorage = new InMemoryResultStorage(new TestStorageService(), new NullLogService());\n\t\t\tresults = new TestTestResultService(new MockContextKeyService(), storage);\n\t\t});\n\n\t\ttest('pushes new result', () => {\n\t\t\tresults.push(r);\n\t\t\tassert.deepStrictEqual(results.results, [r]);\n\t\t});\n\n\t\ttest('serializes and re-hydrates', async () => {\n\t\t\tresults.push(r);\n\t\t\tr.updateState('id-aa', 't', TestRunState.Passed);\n\t\t\tr.markComplete();\n\t\t\tawait timeout(0); // allow persistImmediately async to happen\n\n\t\t\tresults = new TestResultService(\n\t\t\t\tnew MockContextKeyService(),\n\t\t\t\tstorage,\n\t\t\t);\n\n\t\t\tassert.strictEqual(0, results.results.length);\n\t\t\tawait timeout(0); // allow load promise to resolve\n\t\t\tassert.strictEqual(1, results.results.length);\n\n\t\t\tconst [rehydrated, actual] = results.getStateById('id-root')!;\n\t\t\tconst expected: any = { ...r.getStateById('id-root')! };\n\t\t\tdelete expected.tasks[0].duration; // delete undefined props that don't survive serialization\n\t\t\tdelete expected.item.range;\n\t\t\tdelete expected.item.description;\n\t\t\texpected.item.uri = actual.item.uri;\n\n\t\t\tassert.deepStrictEqual(actual, { ...expected, src: undefined, retired: true, children: ['id-a'] });\n\t\t\tassert.deepStrictEqual(rehydrated.counts, r.counts);\n\t\t\tassert.strictEqual(typeof rehydrated.completedAt, 'number');\n\t\t});\n\n\t\ttest('clears results but keeps ongoing tests', async () => {\n\t\t\tresults.push(r);\n\t\t\tr.markComplete();\n\n\t\t\tconst r2 = results.push(new LiveTestResult(\n\t\t\t\t'',\n\t\t\t\temptyOutputController(),\n\t\t\t\t{ ...defaultOpts, tests: [] }\n\t\t\t));\n\t\t\tresults.clear();\n\n\t\t\tassert.deepStrictEqual(results.results, [r2]);\n\t\t});\n\n\t\ttest('keeps ongoing tests on top', async () => {\n\t\t\tresults.push(r);\n\t\t\tconst r2 = results.push(new LiveTestResult(\n\t\t\t\t'',\n\t\t\t\temptyOutputController(),\n\t\t\t\t{ ...defaultOpts, tests: [] }\n\t\t\t));\n\n\t\t\tassert.deepStrictEqual(results.results, [r2, r]);\n\t\t\tr2.markComplete();\n\t\t\tassert.deepStrictEqual(results.results, [r, r2]);\n\t\t\tr.markComplete();\n\t\t\tassert.deepStrictEqual(results.results, [r, r2]);\n\t\t});\n\n\t\tconst makeHydrated = async (completedAt = 42, state = TestRunState.Passed) => new HydratedTestResult({\n\t\t\tcompletedAt,\n\t\t\tid: 'some-id',\n\t\t\ttasks: [{ id: 't', running: false, name: undefined }],\n\t\t\titems: [{\n\t\t\t\t...(await getInitializedMainTestCollection()).getNodeById('id-a')!,\n\t\t\t\ttasks: [{ state, duration: 0, messages: [] }],\n\t\t\t\tcomputedState: state,\n\t\t\t\townComputedState: state,\n\t\t\t\tretired: undefined,\n\t\t\t\tchildren: [],\n\t\t\t}]\n\t\t}, () => Promise.resolve(bufferToStream(VSBuffer.alloc(0))));\n\n\t\ttest('pushes hydrated results', async () => {\n\t\t\tresults.push(r);\n\t\t\tconst hydrated = await makeHydrated();\n\t\t\tresults.push(hydrated);\n\t\t\tassert.deepStrictEqual(results.results, [r, hydrated]);\n\t\t});\n\n\t\ttest('inserts in correct order', async () => {\n\t\t\tresults.push(r);\n\t\t\tconst hydrated1 = await makeHydrated();\n\t\t\tresults.push(hydrated1);\n\t\t\tassert.deepStrictEqual(results.results, [r, hydrated1]);\n\t\t});\n\n\t\ttest('inserts in correct order 2', async () => {\n\t\t\tresults.push(r);\n\t\t\tconst hydrated1 = await makeHydrated();\n\t\t\tresults.push(hydrated1);\n\t\t\tconst hydrated2 = await makeHydrated(30);\n\t\t\tresults.push(hydrated2);\n\t\t\tassert.deepStrictEqual(results.results, [r, hydrated1, hydrated2]);\n\t\t});\n\t});\n});\n"]}