{"version":3,"file":"ownedTestCollection.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/testing/test/common/ownedTestCollection.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAQhG,MAAa,uBAAwB,SAAQ,6CAAuB;QACnE,IAAW,cAAc;YACxB,OAAO,IAAI,CAAC,kBAAkB,CAAC;QAChC,CAAC;QAED,IAAW,WAAW;YACrB,OAAO,IAAI,CAAC,IAAI,CAAC;QAClB,CAAC;QAEM,OAAO,CAAC,IAAe;YAC7B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QAClB,CAAC;KACD;IAZD,0DAYC;IAED,MAAa,uBAAwB,SAAQ,yCAAmB;QAC/D,IAAW,YAAY;YACtB,OAAO,mBAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAE,CAAC;QACzD,CAAC;QAEe,kBAAkB,CAAC,cAAyC,GAAG,EAAE,CAAC,SAAS;YAC1F,OAAO,IAAI,uBAAuB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC;QACtE,CAAC;KACD;IARD,0DAQC;IAED;;;OAGG;IACI,MAAM,gCAAgC,GAAG,KAAK,EAAE,IAAI,GAAG,qBAAS,CAAC,MAAM,EAAE,EAAE,EAAE;QACnF,MAAM,CAAC,GAAG,IAAI,0CAAwB,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC;QACzF,MAAM,SAAS,GAAG,IAAI,uBAAuB,CAAC,EAAE,MAAM,EAAE,IAAI,8BAAQ,CAAC,CAAC,CAAC,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC,SAAS,EAAE,EAAE,GAAG,EAAE,CAAC,SAAS,CAAC,CAAC;QACtH,SAAS,CAAC,OAAO,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;QACpC,MAAM,SAAS,CAAC,MAAM,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;QAC5C,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC,CAAC;QACjC,OAAO,CAAC,CAAC;IACV,CAAC,CAAC;IAPW,QAAA,gCAAgC,oCAO3C","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Iterable } from 'vs/base/common/iterator';\nimport { OwnedTestCollection, SingleUseTestCollection, TestTree } from 'vs/workbench/contrib/testing/common/ownedTestCollection';\nimport { TestsDiff } from 'vs/workbench/contrib/testing/common/testCollection';\nimport { MainThreadTestCollection } from 'vs/workbench/contrib/testing/common/testServiceImpl';\nimport { testStubs } from 'vs/workbench/contrib/testing/common/testStubs';\n\nexport class TestSingleUseCollection extends SingleUseTestCollection {\n\tpublic get itemToInternal() {\n\t\treturn this.testItemToInternal;\n\t}\n\n\tpublic get currentDiff() {\n\t\treturn this.diff;\n\t}\n\n\tpublic setDiff(diff: TestsDiff) {\n\t\tthis.diff = diff;\n\t}\n}\n\nexport class TestOwnedTestCollection extends OwnedTestCollection {\n\tpublic get idToInternal() {\n\t\treturn Iterable.first(this.testIdsToInternal.values())!;\n\t}\n\n\tpublic override createForHierarchy(publishDiff: (diff: TestsDiff) => void = () => undefined) {\n\t\treturn new TestSingleUseCollection(this.createIdMap(0), publishDiff);\n\t}\n}\n\n/**\n * Gets a main thread test collection initialized with the given set of\n * roots/stubs.\n */\nexport const getInitializedMainTestCollection = async (root = testStubs.nested()) => {\n\tconst c = new MainThreadTestCollection(0, async (t, l) => singleUse.expand(t.testId, l));\n\tconst singleUse = new TestSingleUseCollection({ object: new TestTree(0), dispose: () => undefined }, () => undefined);\n\tsingleUse.addRoot(root, 'provider');\n\tawait singleUse.expand('id-root', Infinity);\n\tc.apply(singleUse.collectDiff());\n\treturn c;\n};\n"]}