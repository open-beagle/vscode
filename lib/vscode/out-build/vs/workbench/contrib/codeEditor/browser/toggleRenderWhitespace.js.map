{"version":3,"sources":["vs/workbench/contrib/codeEditor/browser/toggleRenderWhitespace.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAUhG,IAAa,4BAA4B,GAAzC,MAAa,4BAA6B,SAAQ,gBAAM;QAKvD,YACC,EAAU,EACV,KAAa,EAC2B,qBAA4C;YAEpF,KAAK,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;YAFuB,0BAAqB,GAArB,qBAAqB,CAAuB;QAGrF,CAAC;QAEe,GAAG;YAClB,MAAM,gBAAgB,GAAG,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAS,yBAAyB,CAAC,CAAC;YAEhG,IAAI,mBAA2B,CAAC;YAChC,IAAI,gBAAgB,KAAK,MAAM,EAAE;gBAChC,mBAAmB,GAAG,KAAK,CAAC;aAC5B;iBAAM;gBACN,mBAAmB,GAAG,MAAM,CAAC;aAC7B;YAED,OAAO,IAAI,CAAC,qBAAqB,CAAC,WAAW,CAAC,yBAAyB,EAAE,mBAAmB,CAAC,CAAC;QAC/F,CAAC;KACD,CAAA;IAvBuB,+BAAE,GAAG,sCAAsC,CAAC;IAC5C,kCAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,CAAwB,EAAE,IAA0B,CAAC,CAAC;IAHtF,4BAA4B;QAQtC,WAAA,qCAAqB,CAAA;OARX,4BAA4B,CAyBxC;IAzBY,oEAA4B;IA2BzC,MAAM,QAAQ,GAAG,mBAAQ,CAAC,EAAE,CAA2B,oBAAgB,CAAC,gBAAgB,CAAC,CAAC;IAC1F,QAAQ,CAAC,uBAAuB,CAAC,8BAAoB,CAAC,IAAI,CAAC,4BAA4B,CAAC,EAAE,gCAAgC,EAAE,oBAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAEnJ,sBAAY,CAAC,cAAc,CAAC,gBAAM,CAAC,eAAe,EAAE;QACnD,KAAK,EAAE,UAAU;QACjB,OAAO,EAAE;YACR,EAAE,EAAE,4BAA4B,CAAC,EAAE;YACnC,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAuE,CAArE,CAAuE,EAApE,EAAE,AAAuF,CAAC,yBAA9D,EAAE,OAAO,EAAE,CAAC,uBAAuB,CAAC;YACzF,OAAO,EAAE,2BAAc,CAAC,SAAS,CAAC,gCAAgC,EAAE,MAAM,CAAC;SAC3E;QACD,KAAK,EAAE,CAAC;KACR,CAAC,CAAC","file":"toggleRenderWhitespace.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { Action } from 'vs/base/common/actions';\nimport { MenuId, MenuRegistry, SyncActionDescriptor } from 'vs/platform/actions/common/actions';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { CATEGORIES, Extensions as ActionExtensions, IWorkbenchActionRegistry } from 'vs/workbench/common/actions';\n\nexport class ToggleRenderWhitespaceAction extends Action {\n\n\tpublic static readonly ID = 'editor.action.toggleRenderWhitespace';\n\tpublic static readonly LABEL = nls.localize('toggleRenderWhitespace', \"Toggle Render Whitespace\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic override run(): Promise<any> {\n\t\tconst renderWhitespace = this._configurationService.getValue<string>('editor.renderWhitespace');\n\n\t\tlet newRenderWhitespace: string;\n\t\tif (renderWhitespace === 'none') {\n\t\t\tnewRenderWhitespace = 'all';\n\t\t} else {\n\t\t\tnewRenderWhitespace = 'none';\n\t\t}\n\n\t\treturn this._configurationService.updateValue('editor.renderWhitespace', newRenderWhitespace);\n\t}\n}\n\nconst registry = Registry.as<IWorkbenchActionRegistry>(ActionExtensions.WorkbenchActions);\nregistry.registerWorkbenchAction(SyncActionDescriptor.from(ToggleRenderWhitespaceAction), 'View: Toggle Render Whitespace', CATEGORIES.View.value);\n\nMenuRegistry.appendMenuItem(MenuId.MenubarViewMenu, {\n\tgroup: '5_editor',\n\tcommand: {\n\t\tid: ToggleRenderWhitespaceAction.ID,\n\t\ttitle: nls.localize({ key: 'miToggleRenderWhitespace', comment: ['&& denotes a mnemonic'] }, \"&&Render Whitespace\"),\n\t\ttoggled: ContextKeyExpr.notEquals('config.editor.renderWhitespace', 'none')\n\t},\n\torder: 4\n});\n"]}