{"version":3,"sources":["vs/workbench/contrib/codeEditor/browser/toggleWordWrap.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAsBhG,MAAM,sBAAsB,GAAG,wBAAwB,CAAC;IACxD,MAAM,qBAAqB,GAAG,oBAAoB,CAAC;IACnD,MAAM,yBAAyB,GAAG,wBAAwB,CAAC;IAC3D,MAAM,oBAAoB,GAAG,IAAI,0BAAa,CAAU,mBAAmB,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;IAC1F,MAAM,gBAAgB,GAAG,IAAI,0BAAa,CAAU,gBAAgB,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAgB,EAAE,IAAsD,CAAC,CAAC,CAAC;IASrK;;OAEG;IACH,SAAgB,mBAAmB,CAAC,KAAiB,EAAE,KAAqC,EAAE,iBAAqC;QAClI,iBAAiB,CAAC,yBAAyB,CAAC,KAAK,EAAE,sBAAsB,EAAE,KAAK,CAAC,CAAC;IACnF,CAAC;IAFD,kDAEC;IAED;;OAEG;IACH,SAAS,kBAAkB,CAAC,KAAiB,EAAE,iBAAqC;QACnF,OAAO,iBAAiB,CAAC,yBAAyB,CAAC,KAAK,EAAE,sBAAsB,CAAC,CAAC;IACnF,CAAC;IAED,MAAM,mBAAmB,GAAG,8BAA8B,CAAC;IAC3D,MAAM,oBAAqB,SAAQ,+BAAY;QAE9C;YACC,KAAK,CAAC;gBACL,EAAE,EAAE,mBAAmB;gBACvB,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAiB,EAAE,IAAwB,CAAC;gBAChE,KAAK,EAAE,wBAAwB;gBAC/B,YAAY,EAAE,SAAS;gBACvB,MAAM,EAAE;oBACP,MAAM,EAAE,IAAI;oBACZ,OAAO,EAAE,8BAA0B;oBACnC,MAAM,yBAAgC;iBACtC;aACD,CAAC,CAAC;QACJ,CAAC;QAEM,GAAG,CAAC,QAA0B,EAAE,MAAmB;YACzD,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,EAAE;gBAC/B,OAAO;aACP;YAED,MAAM,iBAAiB,GAAG,QAAQ,CAAC,GAAG,CAAC,sCAAkB,CAAC,CAAC;YAC3D,MAAM,KAAK,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;YAEhC,yBAAyB;YACzB,MAAM,cAAc,GAAG,kBAAkB,CAAC,KAAK,EAAE,iBAAiB,CAAC,CAAC;YAEpE,wBAAwB;YACxB,IAAI,QAAwC,CAAC;YAC7C,IAAI,cAAc,EAAE;gBACnB,QAAQ,GAAG,IAAI,CAAC;aAChB;iBAAM;gBACN,MAAM,kBAAkB,GAAG,MAAM,CAAC,SAAS,wBAA2B,CAAC;gBACvE,MAAM,gBAAgB,GAAG,CAAC,kBAAkB,CAAC,cAAc,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;gBACnF,QAAQ,GAAG,EAAE,gBAAgB,EAAE,CAAC;aAChC;YAED,sBAAsB;YACtB,qEAAqE;YACrE,mBAAmB,CAAC,KAAK,EAAE,QAAQ,EAAE,iBAAiB,CAAC,CAAC;QACzD,CAAC;KACD;IAED,IAAM,wBAAwB,GAA9B,MAAM,wBAAyB,SAAQ,sBAAU;QAIhD,YACkB,OAAoB,EACA,kBAAsC,EACtC,kBAAsC;YAE3E,KAAK,EAAE,CAAC;YAJS,YAAO,GAAP,OAAO,CAAa;YACA,uBAAkB,GAAlB,kBAAkB,CAAoB;YACtC,uBAAkB,GAAlB,kBAAkB,CAAoB;YAI3E,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;YAC1C,MAAM,YAAY,GAAG,OAAO,CAAC,GAAG,wBAA2B,CAAC;YAC5D,MAAM,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,qBAAqB,EAAE,YAAY,CAAC,kBAAkB,CAAC,CAAC;YACrH,MAAM,sBAAsB,GAAG,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,yBAAyB,EAAE,YAAY,CAAC,sBAAsB,CAAC,CAAC;YACjI,IAAI,6BAA6B,GAAG,KAAK,CAAC;YAE1C,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,wBAAwB,CAAC,CAAC,CAAC,EAAE,EAAE;gBACrD,IAAI,CAAC,CAAC,CAAC,UAAU,wBAA2B,EAAE;oBAC7C,OAAO;iBACP;gBACD,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;gBAC1C,MAAM,YAAY,GAAG,OAAO,CAAC,GAAG,wBAA2B,CAAC;gBAC5D,kBAAkB,CAAC,GAAG,CAAC,YAAY,CAAC,kBAAkB,CAAC,CAAC;gBACxD,sBAAsB,CAAC,GAAG,CAAC,YAAY,CAAC,sBAAsB,CAAC,CAAC;gBAChE,IAAI,CAAC,6BAA6B,EAAE;oBACnC,sDAAsD;oBACtD,sBAAsB,EAAE,CAAC;iBACzB;YACF,CAAC,CAAC,CAAC,CAAC;YAEJ,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,EAAE;gBAC7C,sBAAsB,EAAE,CAAC;YAC1B,CAAC,CAAC,CAAC,CAAC;YAEJ,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC,iCAAiC,CAAC,GAAG,EAAE;gBACxE,sBAAsB,EAAE,CAAC;YAC1B,CAAC,CAAC,CAAC,CAAC;YAEJ,MAAM,sBAAsB,GAAG,GAAG,EAAE;gBACnC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;oBACrC,OAAO;iBACP;gBAED,MAAM,cAAc,GAAG,kBAAkB,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC;gBAE5F,kBAAkB;gBAClB,IAAI;oBACH,6BAA6B,GAAG,IAAI,CAAC;oBACrC,IAAI,CAAC,mBAAmB,CAAC,cAAc,CAAC,CAAC;iBACzC;wBAAS;oBACT,6BAA6B,GAAG,KAAK,CAAC;iBACtC;YACF,CAAC,CAAC;QACH,CAAC;QAEO,mBAAmB,CAAC,KAAqC;YAChE,MAAM,iBAAiB,GAAG,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC,SAAS,CAAC;YACrE,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC;gBAC1B,iBAAiB,EAAE,iBAAiB;aACpC,CAAC,CAAC;QACJ,CAAC;KACD,CAAA;IA5DuB,2BAAE,GAAG,yCAAyC,CAAC;IAFjE,wBAAwB;QAM3B,WAAA,+BAAkB,CAAA;QAClB,WAAA,sCAAkB,CAAA;OAPf,wBAAwB,CA8D7B;IAED,SAAS,iBAAiB,CAAC,MAA0B;QACpD,IAAI,CAAC,MAAM,EAAE;YACZ,OAAO,KAAK,CAAC;SACb;QACD,IAAI,MAAM,CAAC,eAAe,CAAC,qDAAiC,CAAC,EAAE,CAAC,EAAE;YACjE,4BAA4B;YAC5B,OAAO,KAAK,CAAC;SACb;QACD,IAAI,MAAM,CAAC,cAAc,EAAE;YAC1B,wBAAwB;YACxB,OAAO,KAAK,CAAC;SACb;QACD,oCAAoC;QACpC,MAAM,KAAK,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;QAChC,IAAI,CAAC,KAAK,EAAE;YACX,OAAO,KAAK,CAAC;SACb;QACD,IAAI,KAAK,CAAC,GAAG,CAAC,MAAM,KAAK,QAAQ,EAAE;YAClC,mBAAmB;YACnB,OAAO,KAAK,CAAC;SACb;QACD,OAAO,IAAI,CAAC;IACb,CAAC;IAED,IAAM,+BAA+B,GAArC,MAAM,+BAA+B;QAOpC,YACkC,cAA8B,EAC1B,kBAAsC,EACtC,eAAmC;YAFvC,mBAAc,GAAd,cAAc,CAAgB;YAC1B,uBAAkB,GAAlB,kBAAkB,CAAoB;YACtC,oBAAe,GAAf,eAAe,CAAoB;YAExE,MAAM,CAAC,gBAAgB,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,IAAI,CAAC,CAAC;YAC7D,MAAM,CAAC,gBAAgB,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,IAAI,CAAC,CAAC;YAC5D,IAAI,CAAC,cAAc,CAAC,uBAAuB,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;YAClE,IAAI,CAAC,kBAAkB,GAAG,oBAAoB,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;YAC5E,IAAI,CAAC,eAAe,GAAG,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;YACrE,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;YAC1B,IAAI,CAAC,qBAAqB,GAAG,IAAI,2BAAe,EAAE,CAAC;YACnD,IAAI,CAAC,OAAO,EAAE,CAAC;QAChB,CAAC;QAEO,OAAO;YACd,MAAM,YAAY,GAAG,IAAI,CAAC,kBAAkB,CAAC,oBAAoB,EAAE,IAAI,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,EAAE,CAAC;YACrH,IAAI,IAAI,CAAC,aAAa,KAAK,YAAY,EAAE;gBACxC,YAAY;gBACZ,OAAO;aACP;YACD,IAAI,CAAC,qBAAqB,CAAC,KAAK,EAAE,CAAC;YACnC,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;YAElC,IAAI,YAAY,EAAE;gBACjB,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,YAAY,CAAC,gBAAgB,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,qBAAqB,EAAE,CAAC,CAAC,CAAC;gBAClG,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,YAAY,CAAC,wBAAwB,CAAC,CAAC,CAAC,EAAE,EAAE;oBAC1E,IAAI,CAAC,CAAC,UAAU,wBAA2B,EAAE;wBAC5C,IAAI,CAAC,qBAAqB,EAAE,CAAC;qBAC7B;gBACF,CAAC,CAAC,CAAC,CAAC;gBACJ,IAAI,CAAC,qBAAqB,EAAE,CAAC;aAC7B;QACF,CAAC;QAEO,qBAAqB;YAC5B,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE;gBAC3C,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;aACrC;iBAAM;gBACN,MAAM,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,wBAA2B,CAAC;gBAC7E,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,YAAY,CAAC,cAAc,KAAK,CAAC,CAAC,CAAC,CAAC;aAC1D;QACF,CAAC;QAEO,UAAU,CAAC,iBAA0B,EAAE,UAAmB;YACjE,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;YAC/C,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QACtC,CAAC;KACD,CAAA;IAvDK,+BAA+B;QAQlC,WAAA,8BAAc,CAAA;QACd,WAAA,sCAAkB,CAAA;QAClB,WAAA,+BAAkB,CAAA;OAVf,+BAA+B,CAuDpC;IAED,MAAM,iBAAiB,GAAG,mBAAQ,CAAC,EAAE,CAAkC,0BAAU,CAAC,SAAS,CAAC,CAAC;IAC7F,iBAAiB,CAAC,6BAA6B,CAAC,+BAA+B,gBAAuB,CAAC;IAEvG,CAAA,GAAA,6CAA0B,CAAA,CAAC,wBAAwB,CAAC,EAAE,EAAE,wBAAwB,CAAC,CAAC;IAElF,CAAA,GAAA,uCAAoB,CAAA,CAAC,oBAAoB,CAAC,CAAC;IAE3C,sBAAY,CAAC,cAAc,CAAC,gBAAM,CAAC,WAAW,EAAE;QAC/C,OAAO,EAAE;YACR,EAAE,EAAE,mBAAmB;YACvB,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAgB,EAAE,IAAgC,CAAC;YACvE,IAAI,EAAE,kBAAO,CAAC,QAAQ;SACtB;QACD,KAAK,EAAE,YAAY;QACnB,KAAK,EAAE,CAAC;QACR,IAAI,EAAE,2BAAc,CAAC,GAAG,CACvB,2BAAc,CAAC,GAAG,CAAC,yBAAyB,CAAC,EAC7C,2BAAc,CAAC,GAAG,CAAC,qBAAqB,CAAC,CACzC;KACD,CAAC,CAAC;IACH,sBAAY,CAAC,cAAc,CAAC,gBAAM,CAAC,WAAW,EAAE;QAC/C,OAAO,EAAE;YACR,EAAE,EAAE,mBAAmB;YACvB,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAc,EAAE,IAA+B,CAAC;YACpE,IAAI,EAAE,kBAAO,CAAC,QAAQ;SACtB;QACD,KAAK,EAAE,YAAY;QACnB,KAAK,EAAE,CAAC;QACR,IAAI,EAAE,2BAAc,CAAC,GAAG,CACvB,qCAAiB,CAAC,YAAY,CAAC,MAAM,EAAE,EACvC,2BAAc,CAAC,GAAG,CAAC,yBAAyB,CAAC,EAC7C,2BAAc,CAAC,GAAG,CAAC,qBAAqB,CAAC,CACzC;KACD,CAAC,CAAC;IAGH,YAAY;IACZ,sBAAY,CAAC,cAAc,CAAC,gBAAM,CAAC,eAAe,EAAE;QACnD,KAAK,EAAE,UAAU;QACjB,OAAO,EAAE;YACR,EAAE,EAAE,mBAAmB;YACvB,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,CAA+D,CAA7D,CAA+D,EAA5D,EAAE,AAA8E,CAAC,iBAA7D,EAAE,OAAO,EAAE,CAAC,uBAAuB,CAAC;YACjF,OAAO,EAAE,gBAAgB;YACzB,YAAY,EAAE,oBAAoB;SAClC;QACD,KAAK,EAAE,CAAC;KACR,CAAC,CAAC","file":"toggleWordWrap.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport { Disposable, DisposableStore } from 'vs/base/common/lifecycle';\nimport { IActiveCodeEditor, ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { EditorAction, ServicesAccessor, registerEditorAction, registerEditorContribution } from 'vs/editor/browser/editorExtensions';\nimport { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';\nimport { EditorOption } from 'vs/editor/common/config/editorOptions';\nimport { IEditorContribution } from 'vs/editor/common/editorCommon';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { MenuId, MenuRegistry } from 'vs/platform/actions/common/actions';\nimport { ContextKeyExpr, IContextKey, IContextKeyService, RawContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { DefaultSettingsEditorContribution } from 'vs/workbench/contrib/preferences/browser/preferencesEditor';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { Codicon } from 'vs/base/common/codicons';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IWorkbenchContribution, IWorkbenchContributionsRegistry, Extensions } from 'vs/workbench/common/contributions';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\n\nconst transientWordWrapState = 'transientWordWrapState';\nconst isWordWrapMinifiedKey = 'isWordWrapMinified';\nconst isDominatedByLongLinesKey = 'isDominatedByLongLines';\nconst CAN_TOGGLE_WORD_WRAP = new RawContextKey<boolean>('canToggleWordWrap', false, true);\nconst EDITOR_WORD_WRAP = new RawContextKey<boolean>('editorWordWrap', false, nls.localize('editorWordWrap', 'Whether the editor is currently using word wrapping.'));\n\n/**\n * State written/read by the toggle word wrap action and associated with a particular model.\n */\ninterface IWordWrapTransientState {\n\treadonly wordWrapOverride: 'on' | 'off';\n}\n\n/**\n * Store (in memory) the word wrap state for a particular model.\n */\nexport function writeTransientState(model: ITextModel, state: IWordWrapTransientState | null, codeEditorService: ICodeEditorService): void {\n\tcodeEditorService.setTransientModelProperty(model, transientWordWrapState, state);\n}\n\n/**\n * Read (in memory) the word wrap state for a particular model.\n */\nfunction readTransientState(model: ITextModel, codeEditorService: ICodeEditorService): IWordWrapTransientState | null {\n\treturn codeEditorService.getTransientModelProperty(model, transientWordWrapState);\n}\n\nconst TOGGLE_WORD_WRAP_ID = 'editor.action.toggleWordWrap';\nclass ToggleWordWrapAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TOGGLE_WORD_WRAP_ID,\n\t\t\tlabel: nls.localize('toggle.wordwrap', \"View: Toggle Word Wrap\"),\n\t\t\talias: 'View: Toggle Word Wrap',\n\t\t\tprecondition: undefined,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: null,\n\t\t\t\tprimary: KeyMod.Alt | KeyCode.KEY_Z,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tif (!canToggleWordWrap(editor)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst codeEditorService = accessor.get(ICodeEditorService);\n\t\tconst model = editor.getModel();\n\n\t\t// Read the current state\n\t\tconst transientState = readTransientState(model, codeEditorService);\n\n\t\t// Compute the new state\n\t\tlet newState: IWordWrapTransientState | null;\n\t\tif (transientState) {\n\t\t\tnewState = null;\n\t\t} else {\n\t\t\tconst actualWrappingInfo = editor.getOption(EditorOption.wrappingInfo);\n\t\t\tconst wordWrapOverride = (actualWrappingInfo.wrappingColumn === -1 ? 'on' : 'off');\n\t\t\tnewState = { wordWrapOverride };\n\t\t}\n\n\t\t// Write the new state\n\t\t// (this will cause an event and the controller will apply the state)\n\t\twriteTransientState(model, newState, codeEditorService);\n\t}\n}\n\nclass ToggleWordWrapController extends Disposable implements IEditorContribution {\n\n\tpublic static readonly ID = 'editor.contrib.toggleWordWrapController';\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\t@IContextKeyService private readonly _contextKeyService: IContextKeyService,\n\t\t@ICodeEditorService private readonly _codeEditorService: ICodeEditorService\n\t) {\n\t\tsuper();\n\n\t\tconst options = this._editor.getOptions();\n\t\tconst wrappingInfo = options.get(EditorOption.wrappingInfo);\n\t\tconst isWordWrapMinified = this._contextKeyService.createKey(isWordWrapMinifiedKey, wrappingInfo.isWordWrapMinified);\n\t\tconst isDominatedByLongLines = this._contextKeyService.createKey(isDominatedByLongLinesKey, wrappingInfo.isDominatedByLongLines);\n\t\tlet currentlyApplyingEditorConfig = false;\n\n\t\tthis._register(_editor.onDidChangeConfiguration((e) => {\n\t\t\tif (!e.hasChanged(EditorOption.wrappingInfo)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst options = this._editor.getOptions();\n\t\t\tconst wrappingInfo = options.get(EditorOption.wrappingInfo);\n\t\t\tisWordWrapMinified.set(wrappingInfo.isWordWrapMinified);\n\t\t\tisDominatedByLongLines.set(wrappingInfo.isDominatedByLongLines);\n\t\t\tif (!currentlyApplyingEditorConfig) {\n\t\t\t\t// I am not the cause of the word wrap getting changed\n\t\t\t\tensureWordWrapSettings();\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(_editor.onDidChangeModel((e) => {\n\t\t\tensureWordWrapSettings();\n\t\t}));\n\n\t\tthis._register(_codeEditorService.onDidChangeTransientModelProperty(() => {\n\t\t\tensureWordWrapSettings();\n\t\t}));\n\n\t\tconst ensureWordWrapSettings = () => {\n\t\t\tif (!canToggleWordWrap(this._editor)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst transientState = readTransientState(this._editor.getModel(), this._codeEditorService);\n\n\t\t\t// Apply the state\n\t\t\ttry {\n\t\t\t\tcurrentlyApplyingEditorConfig = true;\n\t\t\t\tthis._applyWordWrapState(transientState);\n\t\t\t} finally {\n\t\t\t\tcurrentlyApplyingEditorConfig = false;\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate _applyWordWrapState(state: IWordWrapTransientState | null): void {\n\t\tconst wordWrapOverride2 = state ? state.wordWrapOverride : 'inherit';\n\t\tthis._editor.updateOptions({\n\t\t\twordWrapOverride2: wordWrapOverride2\n\t\t});\n\t}\n}\n\nfunction canToggleWordWrap(editor: ICodeEditor | null): editor is IActiveCodeEditor {\n\tif (!editor) {\n\t\treturn false;\n\t}\n\tif (editor.getContribution(DefaultSettingsEditorContribution.ID)) {\n\t\t// in the settings editor...\n\t\treturn false;\n\t}\n\tif (editor.isSimpleWidget) {\n\t\t// in a simple widget...\n\t\treturn false;\n\t}\n\t// Ensure correct word wrap settings\n\tconst model = editor.getModel();\n\tif (!model) {\n\t\treturn false;\n\t}\n\tif (model.uri.scheme === 'output') {\n\t\t// in output editor\n\t\treturn false;\n\t}\n\treturn true;\n}\n\nclass EditorWordWrapContextKeyTracker implements IWorkbenchContribution {\n\n\tprivate readonly _canToggleWordWrap: IContextKey<boolean>;\n\tprivate readonly _editorWordWrap: IContextKey<boolean>;\n\tprivate _activeEditor: ICodeEditor | null;\n\tprivate readonly _activeEditorListener: DisposableStore;\n\n\tconstructor(\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@ICodeEditorService private readonly _codeEditorService: ICodeEditorService,\n\t\t@IContextKeyService private readonly _contextService: IContextKeyService,\n\t) {\n\t\twindow.addEventListener('focus', () => this._update(), true);\n\t\twindow.addEventListener('blur', () => this._update(), true);\n\t\tthis._editorService.onDidActiveEditorChange(() => this._update());\n\t\tthis._canToggleWordWrap = CAN_TOGGLE_WORD_WRAP.bindTo(this._contextService);\n\t\tthis._editorWordWrap = EDITOR_WORD_WRAP.bindTo(this._contextService);\n\t\tthis._activeEditor = null;\n\t\tthis._activeEditorListener = new DisposableStore();\n\t\tthis._update();\n\t}\n\n\tprivate _update(): void {\n\t\tconst activeEditor = this._codeEditorService.getFocusedCodeEditor() || this._codeEditorService.getActiveCodeEditor();\n\t\tif (this._activeEditor === activeEditor) {\n\t\t\t// no change\n\t\t\treturn;\n\t\t}\n\t\tthis._activeEditorListener.clear();\n\t\tthis._activeEditor = activeEditor;\n\n\t\tif (activeEditor) {\n\t\t\tthis._activeEditorListener.add(activeEditor.onDidChangeModel(() => this._updateFromCodeEditor()));\n\t\t\tthis._activeEditorListener.add(activeEditor.onDidChangeConfiguration((e) => {\n\t\t\t\tif (e.hasChanged(EditorOption.wrappingInfo)) {\n\t\t\t\t\tthis._updateFromCodeEditor();\n\t\t\t\t}\n\t\t\t}));\n\t\t\tthis._updateFromCodeEditor();\n\t\t}\n\t}\n\n\tprivate _updateFromCodeEditor(): void {\n\t\tif (!canToggleWordWrap(this._activeEditor)) {\n\t\t\treturn this._setValues(false, false);\n\t\t} else {\n\t\t\tconst wrappingInfo = this._activeEditor.getOption(EditorOption.wrappingInfo);\n\t\t\tthis._setValues(true, wrappingInfo.wrappingColumn !== -1);\n\t\t}\n\t}\n\n\tprivate _setValues(canToggleWordWrap: boolean, isWordWrap: boolean): void {\n\t\tthis._canToggleWordWrap.set(canToggleWordWrap);\n\t\tthis._editorWordWrap.set(isWordWrap);\n\t}\n}\n\nconst workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(Extensions.Workbench);\nworkbenchRegistry.registerWorkbenchContribution(EditorWordWrapContextKeyTracker, LifecyclePhase.Ready);\n\nregisterEditorContribution(ToggleWordWrapController.ID, ToggleWordWrapController);\n\nregisterEditorAction(ToggleWordWrapAction);\n\nMenuRegistry.appendMenuItem(MenuId.EditorTitle, {\n\tcommand: {\n\t\tid: TOGGLE_WORD_WRAP_ID,\n\t\ttitle: nls.localize('unwrapMinified', \"Disable wrapping for this file\"),\n\t\ticon: Codicon.wordWrap\n\t},\n\tgroup: 'navigation',\n\torder: 1,\n\twhen: ContextKeyExpr.and(\n\t\tContextKeyExpr.has(isDominatedByLongLinesKey),\n\t\tContextKeyExpr.has(isWordWrapMinifiedKey)\n\t)\n});\nMenuRegistry.appendMenuItem(MenuId.EditorTitle, {\n\tcommand: {\n\t\tid: TOGGLE_WORD_WRAP_ID,\n\t\ttitle: nls.localize('wrapMinified', \"Enable wrapping for this file\"),\n\t\ticon: Codicon.wordWrap\n\t},\n\tgroup: 'navigation',\n\torder: 1,\n\twhen: ContextKeyExpr.and(\n\t\tEditorContextKeys.inDiffEditor.negate(),\n\t\tContextKeyExpr.has(isDominatedByLongLinesKey),\n\t\tContextKeyExpr.not(isWordWrapMinifiedKey)\n\t)\n});\n\n\n// View menu\nMenuRegistry.appendMenuItem(MenuId.MenubarViewMenu, {\n\tgroup: '5_editor',\n\tcommand: {\n\t\tid: TOGGLE_WORD_WRAP_ID,\n\t\ttitle: nls.localize({ key: 'miToggleWordWrap', comment: ['&& denotes a mnemonic'] }, \"Toggle &&Word Wrap\"),\n\t\ttoggled: EDITOR_WORD_WRAP,\n\t\tprecondition: CAN_TOGGLE_WORD_WRAP\n\t},\n\torder: 1\n});\n"]}