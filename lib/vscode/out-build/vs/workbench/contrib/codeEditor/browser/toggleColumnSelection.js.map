{"version":3,"sources":["vs/workbench/contrib/codeEditor/browser/toggleColumnSelection.ts"],"names":[],"mappings":"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","file":"toggleColumnSelection.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { Action } from 'vs/base/common/actions';\nimport { MenuId, MenuRegistry, SyncActionDescriptor } from 'vs/platform/actions/common/actions';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { Extensions as ActionExtensions, IWorkbenchActionRegistry } from 'vs/workbench/common/actions';\nimport { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';\nimport { EditorOption } from 'vs/editor/common/config/editorOptions';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { CoreNavigationCommands } from 'vs/editor/browser/controller/coreCommands';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { CursorColumns } from 'vs/editor/common/controller/cursorCommon';\n\nexport class ToggleColumnSelectionAction extends Action {\n\tpublic static readonly ID = 'editor.action.toggleColumnSelection';\n\tpublic static readonly LABEL = nls.localize('toggleColumnSelection', \"Toggle Column Selection Mode\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@ICodeEditorService private readonly _codeEditorService: ICodeEditorService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tprivate _getCodeEditor(): ICodeEditor | null {\n\t\tconst codeEditor = this._codeEditorService.getFocusedCodeEditor();\n\t\tif (codeEditor) {\n\t\t\treturn codeEditor;\n\t\t}\n\t\treturn this._codeEditorService.getActiveCodeEditor();\n\t}\n\n\tpublic override async run(): Promise<any> {\n\t\tconst oldValue = this._configurationService.getValue<boolean>('editor.columnSelection');\n\t\tconst codeEditor = this._getCodeEditor();\n\t\tawait this._configurationService.updateValue('editor.columnSelection', !oldValue);\n\t\tconst newValue = this._configurationService.getValue<boolean>('editor.columnSelection');\n\t\tif (!codeEditor || codeEditor !== this._getCodeEditor() || oldValue === newValue || !codeEditor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\t\tconst viewModel = codeEditor._getViewModel();\n\t\tif (codeEditor.getOption(EditorOption.columnSelection)) {\n\t\t\tconst selection = codeEditor.getSelection();\n\t\t\tconst modelSelectionStart = new Position(selection.selectionStartLineNumber, selection.selectionStartColumn);\n\t\t\tconst viewSelectionStart = viewModel.coordinatesConverter.convertModelPositionToViewPosition(modelSelectionStart);\n\t\t\tconst modelPosition = new Position(selection.positionLineNumber, selection.positionColumn);\n\t\t\tconst viewPosition = viewModel.coordinatesConverter.convertModelPositionToViewPosition(modelPosition);\n\n\t\t\tCoreNavigationCommands.MoveTo.runCoreEditorCommand(viewModel, {\n\t\t\t\tposition: modelSelectionStart,\n\t\t\t\tviewPosition: viewSelectionStart\n\t\t\t});\n\t\t\tconst visibleColumn = CursorColumns.visibleColumnFromColumn2(viewModel.cursorConfig, viewModel, viewPosition);\n\t\t\tCoreNavigationCommands.ColumnSelect.runCoreEditorCommand(viewModel, {\n\t\t\t\tposition: modelPosition,\n\t\t\t\tviewPosition: viewPosition,\n\t\t\t\tdoColumnSelect: true,\n\t\t\t\tmouseColumn: visibleColumn + 1\n\t\t\t});\n\t\t} else {\n\t\t\tconst columnSelectData = viewModel.getCursorColumnSelectData();\n\t\t\tconst fromViewColumn = CursorColumns.columnFromVisibleColumn2(viewModel.cursorConfig, viewModel, columnSelectData.fromViewLineNumber, columnSelectData.fromViewVisualColumn);\n\t\t\tconst fromPosition = viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(columnSelectData.fromViewLineNumber, fromViewColumn));\n\t\t\tconst toViewColumn = CursorColumns.columnFromVisibleColumn2(viewModel.cursorConfig, viewModel, columnSelectData.toViewLineNumber, columnSelectData.toViewVisualColumn);\n\t\t\tconst toPosition = viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(columnSelectData.toViewLineNumber, toViewColumn));\n\n\t\t\tcodeEditor.setSelection(new Selection(fromPosition.lineNumber, fromPosition.column, toPosition.lineNumber, toPosition.column));\n\t\t}\n\t}\n}\n\nconst registry = Registry.as<IWorkbenchActionRegistry>(ActionExtensions.WorkbenchActions);\nregistry.registerWorkbenchAction(SyncActionDescriptor.from(ToggleColumnSelectionAction), 'Toggle Column Selection Mode');\n\nMenuRegistry.appendMenuItem(MenuId.MenubarSelectionMenu, {\n\tgroup: '4_config',\n\tcommand: {\n\t\tid: ToggleColumnSelectionAction.ID,\n\t\ttitle: nls.localize({ key: 'miColumnSelection', comment: ['&& denotes a mnemonic'] }, \"Column &&Selection Mode\"),\n\t\ttoggled: ContextKeyExpr.equals('config.editor.columnSelection', true)\n\t},\n\torder: 2\n});\n"]}