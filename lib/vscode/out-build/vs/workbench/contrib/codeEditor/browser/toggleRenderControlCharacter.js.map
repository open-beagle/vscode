{"version":3,"sources":["vs/workbench/contrib/codeEditor/browser/toggleRenderControlCharacter.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAUhG,IAAa,kCAAkC,GAA/C,MAAa,kCAAmC,SAAQ,gBAAM;QAK7D,YACC,EAAU,EACV,KAAa,EAC2B,qBAA4C;YAEpF,KAAK,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;YAFuB,0BAAqB,GAArB,qBAAqB,CAAuB;QAGrF,CAAC;QAEe,GAAG;YAClB,IAAI,0BAA0B,GAAG,CAAC,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAU,gCAAgC,CAAC,CAAC;YACjH,OAAO,IAAI,CAAC,qBAAqB,CAAC,WAAW,CAAC,gCAAgC,EAAE,0BAA0B,CAAC,CAAC;QAC7G,CAAC;KACD,CAAA;IAfuB,qCAAE,GAAG,4CAA4C,CAAC;IAClD,wCAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,CAA+B,EAAE,IAA2B,CAAC,CAAC;IAH9F,kCAAkC;QAQ5C,WAAA,qCAAqB,CAAA;OARX,kCAAkC,CAiB9C;IAjBY,gFAAkC;IAmB/C,MAAM,QAAQ,GAAG,mBAAQ,CAAC,EAAE,CAA2B,oBAAgB,CAAC,gBAAgB,CAAC,CAAC;IAC1F,QAAQ,CAAC,uBAAuB,CAAC,8BAAoB,CAAC,IAAI,CAAC,kCAAkC,CAAC,EAAE,iCAAiC,EAAE,oBAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAE1J,sBAAY,CAAC,cAAc,CAAC,gBAAM,CAAC,eAAe,EAAE;QACnD,KAAK,EAAE,UAAU;QACjB,OAAO,EAAE;YACR,EAAE,EAAE,kCAAkC,CAAC,EAAE;YACzC,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,CAA8E,CAA5E,CAA8E,EAA3E,EAAE,AAAsG,CAAC,gCAAtE,EAAE,OAAO,EAAE,CAAC,uBAAuB,CAAC;YAChG,OAAO,EAAE,2BAAc,CAAC,MAAM,CAAC,uCAAuC,EAAE,IAAI,CAAC;SAC7E;QACD,KAAK,EAAE,CAAC;KACR,CAAC,CAAC","file":"toggleRenderControlCharacter.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { Action } from 'vs/base/common/actions';\nimport { MenuId, MenuRegistry, SyncActionDescriptor } from 'vs/platform/actions/common/actions';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { CATEGORIES, Extensions as ActionExtensions, IWorkbenchActionRegistry } from 'vs/workbench/common/actions';\n\nexport class ToggleRenderControlCharacterAction extends Action {\n\n\tpublic static readonly ID = 'editor.action.toggleRenderControlCharacter';\n\tpublic static readonly LABEL = nls.localize('toggleRenderControlCharacters', \"Toggle Control Characters\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic override run(): Promise<any> {\n\t\tlet newRenderControlCharacters = !this._configurationService.getValue<boolean>('editor.renderControlCharacters');\n\t\treturn this._configurationService.updateValue('editor.renderControlCharacters', newRenderControlCharacters);\n\t}\n}\n\nconst registry = Registry.as<IWorkbenchActionRegistry>(ActionExtensions.WorkbenchActions);\nregistry.registerWorkbenchAction(SyncActionDescriptor.from(ToggleRenderControlCharacterAction), 'View: Toggle Control Characters', CATEGORIES.View.value);\n\nMenuRegistry.appendMenuItem(MenuId.MenubarViewMenu, {\n\tgroup: '5_editor',\n\tcommand: {\n\t\tid: ToggleRenderControlCharacterAction.ID,\n\t\ttitle: nls.localize({ key: 'miToggleRenderControlCharacters', comment: ['&& denotes a mnemonic'] }, \"Render &&Control Characters\"),\n\t\ttoggled: ContextKeyExpr.equals('config.editor.renderControlCharacters', true)\n\t},\n\torder: 5\n});\n"]}