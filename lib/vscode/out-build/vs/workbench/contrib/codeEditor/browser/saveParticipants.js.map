{"version":3,"sources":["vs/workbench/contrib/codeEditor/browser/saveParticipants.ts"],"names":[],"mappings":"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","file":"saveParticipants.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport * as strings from 'vs/base/common/strings';\nimport { IActiveCodeEditor, isCodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';\nimport { trimTrailingWhitespace } from 'vs/editor/common/commands/trimTrailingWhitespaceCommand';\nimport { EditOperation } from 'vs/editor/common/core/editOperation';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { CodeActionTriggerType, CodeActionProvider } from 'vs/editor/common/modes';\nimport { getCodeActions } from 'vs/editor/contrib/codeAction/codeAction';\nimport { applyCodeAction } from 'vs/editor/contrib/codeAction/codeActionCommands';\nimport { CodeActionKind } from 'vs/editor/contrib/codeAction/types';\nimport { formatDocumentRangesWithSelectedProvider, formatDocumentWithSelectedProvider, FormattingMode } from 'vs/editor/contrib/format/format';\nimport { SnippetController2 } from 'vs/editor/contrib/snippet/snippetController2';\nimport { localize } from 'vs/nls';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IProgressStep, IProgress, Progress } from 'vs/platform/progress/common/progress';\nimport { ITextFileService, ITextFileSaveParticipant, ITextFileEditorModel } from 'vs/workbench/services/textfile/common/textfiles';\nimport { SaveReason } from 'vs/workbench/common/editor';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IWorkbenchContribution, Extensions as WorkbenchContributionsExtensions, IWorkbenchContributionsRegistry } from 'vs/workbench/common/contributions';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { getModifiedRanges } from 'vs/workbench/contrib/format/browser/formatModified';\nimport { ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\n\nexport class TrimWhitespaceParticipant implements ITextFileSaveParticipant {\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ICodeEditorService private readonly codeEditorService: ICodeEditorService\n\t) {\n\t\t// Nothing\n\t}\n\n\tasync participate(model: ITextFileEditorModel, env: { reason: SaveReason; }): Promise<void> {\n\t\tif (!model.textEditorModel) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.configurationService.getValue('files.trimTrailingWhitespace', { overrideIdentifier: model.textEditorModel.getLanguageIdentifier().language, resource: model.resource })) {\n\t\t\tthis.doTrimTrailingWhitespace(model.textEditorModel, env.reason === SaveReason.AUTO);\n\t\t}\n\t}\n\n\tprivate doTrimTrailingWhitespace(model: ITextModel, isAutoSaved: boolean): void {\n\t\tlet prevSelection: Selection[] = [];\n\t\tlet cursors: Position[] = [];\n\n\t\tconst editor = findEditor(model, this.codeEditorService);\n\t\tif (editor) {\n\t\t\t// Find `prevSelection` in any case do ensure a good undo stack when pushing the edit\n\t\t\t// Collect active cursors in `cursors` only if `isAutoSaved` to avoid having the cursors jump\n\t\t\tprevSelection = editor.getSelections();\n\t\t\tif (isAutoSaved) {\n\t\t\t\tcursors = prevSelection.map(s => s.getPosition());\n\t\t\t\tconst snippetsRange = SnippetController2.get(editor).getSessionEnclosingRange();\n\t\t\t\tif (snippetsRange) {\n\t\t\t\t\tfor (let lineNumber = snippetsRange.startLineNumber; lineNumber <= snippetsRange.endLineNumber; lineNumber++) {\n\t\t\t\t\t\tcursors.push(new Position(lineNumber, model.getLineMaxColumn(lineNumber)));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst ops = trimTrailingWhitespace(model, cursors);\n\t\tif (!ops.length) {\n\t\t\treturn; // Nothing to do\n\t\t}\n\n\t\tmodel.pushEditOperations(prevSelection, ops, (_edits) => prevSelection);\n\t}\n}\n\nfunction findEditor(model: ITextModel, codeEditorService: ICodeEditorService): IActiveCodeEditor | null {\n\tlet candidate: IActiveCodeEditor | null = null;\n\n\tif (model.isAttachedToEditor()) {\n\t\tfor (const editor of codeEditorService.listCodeEditors()) {\n\t\t\tif (editor.hasModel() && editor.getModel() === model) {\n\t\t\t\tif (editor.hasTextFocus()) {\n\t\t\t\t\treturn editor; // favour focused editor if there are multiple\n\t\t\t\t}\n\n\t\t\t\tcandidate = editor;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn candidate;\n}\n\nexport class FinalNewLineParticipant implements ITextFileSaveParticipant {\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ICodeEditorService private readonly codeEditorService: ICodeEditorService\n\t) {\n\t\t// Nothing\n\t}\n\n\tasync participate(model: ITextFileEditorModel, _env: { reason: SaveReason; }): Promise<void> {\n\t\tif (!model.textEditorModel) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.configurationService.getValue('files.insertFinalNewline', { overrideIdentifier: model.textEditorModel.getLanguageIdentifier().language, resource: model.resource })) {\n\t\t\tthis.doInsertFinalNewLine(model.textEditorModel);\n\t\t}\n\t}\n\n\tprivate doInsertFinalNewLine(model: ITextModel): void {\n\t\tconst lineCount = model.getLineCount();\n\t\tconst lastLine = model.getLineContent(lineCount);\n\t\tconst lastLineIsEmptyOrWhitespace = strings.lastNonWhitespaceIndex(lastLine) === -1;\n\n\t\tif (!lineCount || lastLineIsEmptyOrWhitespace) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst edits = [EditOperation.insert(new Position(lineCount, model.getLineMaxColumn(lineCount)), model.getEOL())];\n\t\tconst editor = findEditor(model, this.codeEditorService);\n\t\tif (editor) {\n\t\t\teditor.executeEdits('insertFinalNewLine', edits, editor.getSelections());\n\t\t} else {\n\t\t\tmodel.pushEditOperations([], edits, () => null);\n\t\t}\n\t}\n}\n\nexport class TrimFinalNewLinesParticipant implements ITextFileSaveParticipant {\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ICodeEditorService private readonly codeEditorService: ICodeEditorService\n\t) {\n\t\t// Nothing\n\t}\n\n\tasync participate(model: ITextFileEditorModel, env: { reason: SaveReason; }): Promise<void> {\n\t\tif (!model.textEditorModel) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.configurationService.getValue('files.trimFinalNewlines', { overrideIdentifier: model.textEditorModel.getLanguageIdentifier().language, resource: model.resource })) {\n\t\t\tthis.doTrimFinalNewLines(model.textEditorModel, env.reason === SaveReason.AUTO);\n\t\t}\n\t}\n\n\t/**\n\t * returns 0 if the entire file is empty or whitespace only\n\t */\n\tprivate findLastLineWithContent(model: ITextModel): number {\n\t\tfor (let lineNumber = model.getLineCount(); lineNumber >= 1; lineNumber--) {\n\t\t\tconst lineContent = model.getLineContent(lineNumber);\n\t\t\tif (strings.lastNonWhitespaceIndex(lineContent) !== -1) {\n\t\t\t\t// this line has content\n\t\t\t\treturn lineNumber;\n\t\t\t}\n\t\t}\n\t\t// no line has content\n\t\treturn 0;\n\t}\n\n\tprivate doTrimFinalNewLines(model: ITextModel, isAutoSaved: boolean): void {\n\t\tconst lineCount = model.getLineCount();\n\n\t\t// Do not insert new line if file does not end with new line\n\t\tif (lineCount === 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet prevSelection: Selection[] = [];\n\t\tlet cannotTouchLineNumber = 0;\n\t\tconst editor = findEditor(model, this.codeEditorService);\n\t\tif (editor) {\n\t\t\tprevSelection = editor.getSelections();\n\t\t\tif (isAutoSaved) {\n\t\t\t\tfor (let i = 0, len = prevSelection.length; i < len; i++) {\n\t\t\t\t\tconst positionLineNumber = prevSelection[i].positionLineNumber;\n\t\t\t\t\tif (positionLineNumber > cannotTouchLineNumber) {\n\t\t\t\t\t\tcannotTouchLineNumber = positionLineNumber;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst lastLineNumberWithContent = this.findLastLineWithContent(model);\n\t\tconst deleteFromLineNumber = Math.max(lastLineNumberWithContent + 1, cannotTouchLineNumber + 1);\n\t\tconst deletionRange = model.validateRange(new Range(deleteFromLineNumber, 1, lineCount, model.getLineMaxColumn(lineCount)));\n\n\t\tif (deletionRange.isEmpty()) {\n\t\t\treturn;\n\t\t}\n\n\t\tmodel.pushEditOperations(prevSelection, [EditOperation.delete(deletionRange)], _edits => prevSelection);\n\n\t\tif (editor) {\n\t\t\teditor.setSelections(prevSelection);\n\t\t}\n\t}\n}\n\nclass FormatOnSaveParticipant implements ITextFileSaveParticipant {\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ICodeEditorService private readonly codeEditorService: ICodeEditorService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t) {\n\t\t// Nothing\n\t}\n\n\tasync participate(model: ITextFileEditorModel, env: { reason: SaveReason; }, progress: IProgress<IProgressStep>, token: CancellationToken): Promise<void> {\n\t\tif (!model.textEditorModel) {\n\t\t\treturn;\n\t\t}\n\t\tif (env.reason === SaveReason.AUTO) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst textEditorModel = model.textEditorModel;\n\t\tconst overrides = { overrideIdentifier: textEditorModel.getLanguageIdentifier().language, resource: textEditorModel.uri };\n\n\t\tconst nestedProgress = new Progress<{ displayName?: string, extensionId?: ExtensionIdentifier }>(provider => {\n\t\t\tprogress.report({\n\t\t\t\tmessage: localize(\n\t\t\t\t\t'formatting',\n\t\t\t\t\t\"Running '{0}' Formatter ([configure](command:workbench.action.openSettings?%5B%22editor.formatOnSave%22%5D)).\",\n\t\t\t\t\tprovider.displayName || provider.extensionId && provider.extensionId.value || '???'\n\t\t\t\t)\n\t\t\t});\n\t\t});\n\n\t\tconst enabled = this.configurationService.getValue<boolean>('editor.formatOnSave', overrides);\n\t\tif (!enabled) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst editorOrModel = findEditor(textEditorModel, this.codeEditorService) || textEditorModel;\n\t\tconst mode = this.configurationService.getValue<'file' | 'modifications'>('editor.formatOnSaveMode', overrides);\n\t\tif (mode === 'modifications') {\n\t\t\t// format modifications\n\t\t\tconst ranges = await this.instantiationService.invokeFunction(getModifiedRanges, isCodeEditor(editorOrModel) ? editorOrModel.getModel() : editorOrModel);\n\t\t\tif (ranges) {\n\t\t\t\tawait this.instantiationService.invokeFunction(formatDocumentRangesWithSelectedProvider, editorOrModel, ranges, FormattingMode.Silent, nestedProgress, token);\n\t\t\t}\n\t\t} else {\n\t\t\t// format the whole file\n\t\t\tawait this.instantiationService.invokeFunction(formatDocumentWithSelectedProvider, editorOrModel, FormattingMode.Silent, nestedProgress, token);\n\t\t}\n\t}\n}\n\nclass CodeActionOnSaveParticipant implements ITextFileSaveParticipant {\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t) { }\n\n\tasync participate(model: ITextFileEditorModel, env: { reason: SaveReason; }, progress: IProgress<IProgressStep>, token: CancellationToken): Promise<void> {\n\t\tif (!model.textEditorModel) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Do not run code actions on auto save\n\t\tif (env.reason !== SaveReason.EXPLICIT) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst textEditorModel = model.textEditorModel;\n\n\t\tconst settingsOverrides = { overrideIdentifier: textEditorModel.getLanguageIdentifier().language, resource: model.resource };\n\t\tconst setting = this.configurationService.getValue<{ [kind: string]: boolean } | string[]>('editor.codeActionsOnSave', settingsOverrides);\n\t\tif (!setting) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst settingItems: string[] = Array.isArray(setting)\n\t\t\t? setting\n\t\t\t: Object.keys(setting).filter(x => setting[x]);\n\n\t\tconst codeActionsOnSave = this.createCodeActionsOnSave(settingItems);\n\n\t\tif (!Array.isArray(setting)) {\n\t\t\tcodeActionsOnSave.sort((a, b) => {\n\t\t\t\tif (CodeActionKind.SourceFixAll.contains(a)) {\n\t\t\t\t\tif (CodeActionKind.SourceFixAll.contains(b)) {\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tif (CodeActionKind.SourceFixAll.contains(b)) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\treturn 0;\n\t\t\t});\n\t\t}\n\n\t\tif (!codeActionsOnSave.length) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst excludedActions = Array.isArray(setting)\n\t\t\t? []\n\t\t\t: Object.keys(setting)\n\t\t\t\t.filter(x => setting[x] === false)\n\t\t\t\t.map(x => new CodeActionKind(x));\n\n\t\tprogress.report({ message: localize('codeaction', \"Quick Fixes\") });\n\t\tawait this.applyOnSaveActions(textEditorModel, codeActionsOnSave, excludedActions, progress, token);\n\t}\n\n\tprivate createCodeActionsOnSave(settingItems: readonly string[]): CodeActionKind[] {\n\t\tconst kinds = settingItems.map(x => new CodeActionKind(x));\n\n\t\t// Remove subsets\n\t\treturn kinds.filter(kind => {\n\t\t\treturn kinds.every(otherKind => otherKind.equals(kind) || !otherKind.contains(kind));\n\t\t});\n\t}\n\n\tprivate async applyOnSaveActions(model: ITextModel, codeActionsOnSave: readonly CodeActionKind[], excludes: readonly CodeActionKind[], progress: IProgress<IProgressStep>, token: CancellationToken): Promise<void> {\n\n\t\tconst getActionProgress = new class implements IProgress<CodeActionProvider> {\n\t\t\tprivate _names = new Set<string>();\n\t\t\tprivate _report(): void {\n\t\t\t\tprogress.report({\n\t\t\t\t\tmessage: localize(\n\t\t\t\t\t\t'codeaction.get',\n\t\t\t\t\t\t\"Getting code actions from '{0}' ([configure](command:workbench.action.openSettings?%5B%22editor.codeActionsOnSave%22%5D)).\",\n\t\t\t\t\t\t[...this._names].map(name => `'${name}'`).join(', ')\n\t\t\t\t\t)\n\t\t\t\t});\n\t\t\t}\n\t\t\treport(provider: CodeActionProvider) {\n\t\t\t\tif (provider.displayName && !this._names.has(provider.displayName)) {\n\t\t\t\t\tthis._names.add(provider.displayName);\n\t\t\t\t\tthis._report();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tfor (const codeActionKind of codeActionsOnSave) {\n\t\t\tconst actionsToRun = await this.getActionsToRun(model, codeActionKind, excludes, getActionProgress, token);\n\t\t\ttry {\n\t\t\t\tfor (const action of actionsToRun.validActions) {\n\t\t\t\t\tprogress.report({ message: localize('codeAction.apply', \"Applying code action '{0}'.\", action.action.title) });\n\t\t\t\t\tawait this.instantiationService.invokeFunction(applyCodeAction, action);\n\t\t\t\t}\n\t\t\t} catch {\n\t\t\t\t// Failure to apply a code action should not block other on save actions\n\t\t\t} finally {\n\t\t\t\tactionsToRun.dispose();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate getActionsToRun(model: ITextModel, codeActionKind: CodeActionKind, excludes: readonly CodeActionKind[], progress: IProgress<CodeActionProvider>, token: CancellationToken) {\n\t\treturn getCodeActions(model, model.getFullModelRange(), {\n\t\t\ttype: CodeActionTriggerType.Auto,\n\t\t\tfilter: { include: codeActionKind, excludes: excludes, includeSourceActions: true },\n\t\t}, progress, token);\n\t}\n}\n\nexport class SaveParticipantsContribution extends Disposable implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService\n\t) {\n\t\tsuper();\n\n\t\tthis.registerSaveParticipants();\n\t}\n\n\tprivate registerSaveParticipants(): void {\n\t\tthis._register(this.textFileService.files.addSaveParticipant(this.instantiationService.createInstance(TrimWhitespaceParticipant)));\n\t\tthis._register(this.textFileService.files.addSaveParticipant(this.instantiationService.createInstance(CodeActionOnSaveParticipant)));\n\t\tthis._register(this.textFileService.files.addSaveParticipant(this.instantiationService.createInstance(FormatOnSaveParticipant)));\n\t\tthis._register(this.textFileService.files.addSaveParticipant(this.instantiationService.createInstance(FinalNewLineParticipant)));\n\t\tthis._register(this.textFileService.files.addSaveParticipant(this.instantiationService.createInstance(TrimFinalNewLinesParticipant)));\n\t}\n}\n\nconst workbenchContributionsRegistry = Registry.as<IWorkbenchContributionsRegistry>(WorkbenchContributionsExtensions.Workbench);\nworkbenchContributionsRegistry.registerWorkbenchContribution(SaveParticipantsContribution, LifecyclePhase.Restored);\n"]}