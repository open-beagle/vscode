{"version":3,"file":"saveParticipant.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/codeEditor/test/browser/saveParticipant.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAehG,KAAK,CAAC,mBAAmB,EAAE;QAE1B,IAAI,oBAA2C,CAAC;QAChD,IAAI,QAA6B,CAAC;QAElC,KAAK,CAAC,GAAG,EAAE;YACV,oBAAoB,GAAG,CAAA,GAAA,qDAA6B,CAAA,EAAE,CAAC;YACvD,QAAQ,GAAG,oBAAoB,CAAC,cAAc,CAAC,2CAAmB,CAAC,CAAC;QACrE,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,GAAG,EAAE;YACgB,QAAQ,CAAC,eAAe,CAAC,KAAM,CAAC,OAAO,EAAE,CAAC;QACxE,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,uBAAuB,EAAE,KAAK;YAClC,MAAM,KAAK,GAAG,oBAAoB,CAAC,cAAc,CAAC,yCAAmB,EAAE,kBAAU,CAAC,IAAI,CAAC,IAAI,EAAE,0BAA0B,CAAC,EAAE,MAAM,EAAE,SAAS,CAAiC,CAAC;YAE7K,MAAM,KAAK,CAAC,OAAO,EAAE,CAAC;YACtB,MAAM,aAAa,GAAG,IAAI,mDAAwB,EAAE,CAAC;YACrD,aAAa,CAAC,oBAAoB,CAAC,OAAO,EAAE,EAAE,oBAAoB,EAAE,IAAI,EAAE,CAAC,CAAC;YAC5E,MAAM,WAAW,GAAG,IAAI,0CAAuB,CAAC,aAAa,EAAE,SAAU,CAAC,CAAC;YAE3E,8BAA8B;YAC9B,IAAI,WAAW,GAAG,EAAE,CAAC;YACrB,KAAK,CAAC,eAAe,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;YAC5C,MAAM,WAAW,CAAC,WAAW,CAAC,KAAK,EAAE,EAAE,MAAM,kBAAqB,EAAE,CAAC,CAAC;YACtE,MAAM,CAAC,WAAW,CAAC,CAAA,GAAA,4BAAgB,CAAA,CAAC,KAAK,CAAC,cAAc,EAAG,CAAC,EAAE,WAAW,CAAC,CAAC;YAE3E,yCAAyC;YACzC,WAAW,GAAG,iBAAiB,KAAK,CAAC,eAAe,CAAC,MAAM,EAAE,EAAE,CAAC;YAChE,KAAK,CAAC,eAAe,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;YAC5C,MAAM,WAAW,CAAC,WAAW,CAAC,KAAK,EAAE,EAAE,MAAM,kBAAqB,EAAE,CAAC,CAAC;YACtE,MAAM,CAAC,WAAW,CAAC,CAAA,GAAA,4BAAgB,CAAA,CAAC,KAAK,CAAC,cAAc,EAAG,CAAC,EAAE,WAAW,CAAC,CAAC;YAE3E,qCAAqC;YACrC,WAAW,GAAG,gBAAgB,CAAC;YAC/B,KAAK,CAAC,eAAe,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;YAC5C,MAAM,WAAW,CAAC,WAAW,CAAC,KAAK,EAAE,EAAE,MAAM,kBAAqB,EAAE,CAAC,CAAC;YACtE,MAAM,CAAC,WAAW,CAAC,CAAA,GAAA,4BAAgB,CAAA,CAAC,KAAK,CAAC,cAAc,EAAG,CAAC,EAAE,GAAG,WAAW,GAAG,KAAK,CAAC,eAAe,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;YAEjH,oCAAoC;YACpC,WAAW,GAAG,iBAAiB,KAAK,CAAC,eAAe,CAAC,MAAM,EAAE,iBAAiB,KAAK,CAAC,eAAe,CAAC,MAAM,EAAE,gBAAgB,CAAC;YAC7H,KAAK,CAAC,eAAe,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;YAC5C,MAAM,WAAW,CAAC,WAAW,CAAC,KAAK,EAAE,EAAE,MAAM,kBAAqB,EAAE,CAAC,CAAC;YACtE,MAAM,CAAC,WAAW,CAAC,CAAA,GAAA,4BAAgB,CAAA,CAAC,KAAK,CAAC,cAAc,EAAG,CAAC,EAAE,GAAG,WAAW,GAAG,KAAK,CAAC,eAAe,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;QAClH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,sBAAsB,EAAE,KAAK;YACjC,MAAM,KAAK,GAAG,oBAAoB,CAAC,cAAc,CAAC,yCAAmB,EAAE,kBAAU,CAAC,IAAI,CAAC,IAAI,EAAE,+BAA+B,CAAC,EAAE,MAAM,EAAE,SAAS,CAAiC,CAAC;YAElL,MAAM,KAAK,CAAC,OAAO,EAAE,CAAC;YACtB,MAAM,aAAa,GAAG,IAAI,mDAAwB,EAAE,CAAC;YACrD,aAAa,CAAC,oBAAoB,CAAC,OAAO,EAAE,EAAE,mBAAmB,EAAE,IAAI,EAAE,CAAC,CAAC;YAC3E,MAAM,WAAW,GAAG,IAAI,+CAA4B,CAAC,aAAa,EAAE,SAAU,CAAC,CAAC;YAChF,MAAM,WAAW,GAAG,eAAe,CAAC;YACpC,MAAM,GAAG,GAAG,GAAG,KAAK,CAAC,eAAe,CAAC,MAAM,EAAE,EAAE,CAAC;YAEhD,mDAAmD;YACnD,IAAI,WAAW,GAAG,GAAG,WAAW,EAAE,CAAC;YACnC,KAAK,CAAC,eAAe,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;YAC5C,MAAM,WAAW,CAAC,WAAW,CAAC,KAAK,EAAE,EAAE,MAAM,kBAAqB,EAAE,CAAC,CAAC;YACtE,MAAM,CAAC,WAAW,CAAC,CAAA,GAAA,4BAAgB,CAAA,CAAC,KAAK,CAAC,cAAc,EAAG,CAAC,EAAE,WAAW,CAAC,CAAC;YAE3E,sDAAsD;YACtD,WAAW,GAAG,GAAG,WAAW,GAAG,GAAG,EAAE,CAAC;YACrC,KAAK,CAAC,eAAe,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;YAC5C,MAAM,WAAW,CAAC,WAAW,CAAC,KAAK,EAAE,EAAE,MAAM,kBAAqB,EAAE,CAAC,CAAC;YACtE,MAAM,CAAC,WAAW,CAAC,CAAA,GAAA,4BAAgB,CAAA,CAAC,KAAK,CAAC,cAAc,EAAG,CAAC,EAAE,WAAW,CAAC,CAAC;YAE3E,mDAAmD;YACnD,WAAW,GAAG,GAAG,WAAW,GAAG,GAAG,GAAG,GAAG,EAAE,CAAC;YAC3C,KAAK,CAAC,eAAe,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;YAC5C,MAAM,WAAW,CAAC,WAAW,CAAC,KAAK,EAAE,EAAE,MAAM,kBAAqB,EAAE,CAAC,CAAC;YACtE,MAAM,CAAC,WAAW,CAAC,CAAA,GAAA,4BAAgB,CAAA,CAAC,KAAK,CAAC,cAAc,EAAG,CAAC,EAAE,GAAG,WAAW,GAAG,GAAG,EAAE,CAAC,CAAC;YAEtF,4DAA4D;YAC5D,WAAW,GAAG,GAAG,WAAW,GAAG,GAAG,GAAG,WAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,CAAC;YACrE,KAAK,CAAC,eAAe,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;YAC5C,MAAM,WAAW,CAAC,WAAW,CAAC,KAAK,EAAE,EAAE,MAAM,kBAAqB,EAAE,CAAC,CAAC;YACtE,MAAM,CAAC,WAAW,CAAC,CAAA,GAAA,4BAAgB,CAAA,CAAC,KAAK,CAAC,cAAc,EAAG,CAAC,EAAE,GAAG,WAAW,GAAG,GAAG,GAAG,WAAW,GAAG,GAAG,EAAE,CAAC,CAAC;QAC3G,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,gCAAgC,EAAE,KAAK;YAC3C,MAAM,KAAK,GAAG,oBAAoB,CAAC,cAAc,CAAC,yCAAmB,EAAE,kBAAU,CAAC,IAAI,CAAC,IAAI,EAAE,+BAA+B,CAAC,EAAE,MAAM,EAAE,SAAS,CAAiC,CAAC;YAElL,MAAM,KAAK,CAAC,OAAO,EAAE,CAAC;YACtB,MAAM,aAAa,GAAG,IAAI,mDAAwB,EAAE,CAAC;YACrD,aAAa,CAAC,oBAAoB,CAAC,OAAO,EAAE,EAAE,mBAAmB,EAAE,IAAI,EAAE,CAAC,CAAC;YAC3E,MAAM,WAAW,GAAG,IAAI,+CAA4B,CAAC,aAAa,EAAE,SAAU,CAAC,CAAC;YAChF,MAAM,WAAW,GAAG,eAAe,CAAC;YAEpC,cAAc;YACd,IAAI,WAAW,GAAG,GAAG,WAAW,EAAE,CAAC;YACnC,KAAK,CAAC,eAAe,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;YAE5C,sCAAsC;YACtC,IAAI,SAAS,GAAG,CAAC,EAAE,KAAK,EAAE,IAAI,aAAK,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,gBAAgB,EAAE,KAAK,EAAE,CAAC,CAAC;YACzF,KAAK,CAAC,eAAe,CAAC,kBAAkB,CAAC,CAAC,IAAI,qBAAS,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,SAAS,EAAE,GAAG,EAAE,GAAG,OAAO,CAAC,IAAI,qBAAS,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAEpI,OAAO;YACP,MAAM,KAAK,CAAC,eAAe,CAAC,IAAI,EAAE,CAAC;YACnC,MAAM,CAAC,WAAW,CAAC,CAAA,GAAA,4BAAgB,CAAA,CAAC,KAAK,CAAC,cAAc,EAAG,CAAC,EAAE,GAAG,WAAW,EAAE,CAAC,CAAC;YAEhF,sDAAsD;YACtD,MAAM,WAAW,CAAC,WAAW,CAAC,KAAK,EAAE,EAAE,MAAM,kBAAqB,EAAE,CAAC,CAAC;YACtE,MAAM,KAAK,CAAC,eAAe,CAAC,IAAI,EAAE,CAAC;YACnC,MAAM,CAAC,WAAW,CAAC,CAAA,GAAA,4BAAgB,CAAA,CAAC,KAAK,CAAC,cAAc,EAAG,CAAC,EAAE,GAAG,WAAW,GAAG,CAAC,CAAC;QAClF,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,gCAAgC,EAAE,KAAK;YAC3C,MAAM,KAAK,GAAG,oBAAoB,CAAC,cAAc,CAAC,yCAAmB,EAAE,kBAAU,CAAC,IAAI,CAAC,IAAI,EAAE,+BAA+B,CAAC,EAAE,MAAM,EAAE,SAAS,CAAiC,CAAC;YAElL,MAAM,KAAK,CAAC,OAAO,EAAE,CAAC;YACtB,MAAM,aAAa,GAAG,IAAI,mDAAwB,EAAE,CAAC;YACrD,aAAa,CAAC,oBAAoB,CAAC,OAAO,EAAE,EAAE,mBAAmB,EAAE,IAAI,EAAE,CAAC,CAAC;YAC3E,MAAM,WAAW,GAAG,IAAI,+CAA4B,CAAC,aAAa,EAAE,SAAU,CAAC,CAAC;YAChF,MAAM,WAAW,GAAG,MAAM,CAAC;YAC3B,MAAM,GAAG,GAAG,GAAG,KAAK,CAAC,eAAe,CAAC,MAAM,EAAE,EAAE,CAAC;YAChD,IAAI,OAAO,GAAG,GAAG,WAAW,GAAG,GAAG,GAAG,GAAG,EAAE,CAAC;YAC3C,KAAK,CAAC,eAAe,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YAExC,kBAAkB;YAClB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;gBAC5B,MAAM,WAAW,CAAC,WAAW,CAAC,KAAK,EAAE,EAAE,MAAM,kBAAqB,EAAE,CAAC,CAAC;aACtE;YAED,mBAAmB;YACnB,MAAM,CAAC,WAAW,CAAC,CAAA,GAAA,4BAAgB,CAAA,CAAC,KAAK,CAAC,cAAc,EAAG,CAAC,EAAE,GAAG,WAAW,GAAG,GAAG,EAAE,CAAC,CAAC;YAEtF,sDAAsD;YACtD,MAAM,KAAK,CAAC,eAAe,CAAC,IAAI,EAAE,CAAC;YACnC,MAAM,CAAC,WAAW,CAAC,CAAA,GAAA,4BAAgB,CAAA,CAAC,KAAK,CAAC,cAAc,EAAG,CAAC,EAAE,GAAG,WAAW,GAAG,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC;YAC5F,MAAM,KAAK,CAAC,eAAe,CAAC,IAAI,EAAE,CAAC;YACnC,MAAM,CAAC,WAAW,CAAC,CAAA,GAAA,4BAAgB,CAAA,CAAC,KAAK,CAAC,cAAc,EAAG,CAAC,EAAE,GAAG,WAAW,GAAG,GAAG,EAAE,CAAC,CAAC;QACvF,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,iBAAiB,EAAE,KAAK;YAC5B,MAAM,KAAK,GAAG,oBAAoB,CAAC,cAAc,CAAC,yCAAmB,EAAE,kBAAU,CAAC,IAAI,CAAC,IAAI,EAAE,+BAA+B,CAAC,EAAE,MAAM,EAAE,SAAS,CAAiC,CAAC;YAElL,MAAM,KAAK,CAAC,OAAO,EAAE,CAAC;YACtB,MAAM,aAAa,GAAG,IAAI,mDAAwB,EAAE,CAAC;YACrD,aAAa,CAAC,oBAAoB,CAAC,OAAO,EAAE,EAAE,wBAAwB,EAAE,IAAI,EAAE,CAAC,CAAC;YAChF,MAAM,WAAW,GAAG,IAAI,4CAAyB,CAAC,aAAa,EAAE,SAAU,CAAC,CAAC;YAC7E,MAAM,WAAW,GAAG,MAAM,CAAC;YAC3B,IAAI,OAAO,GAAG,GAAG,WAAW,IAAI,CAAC;YACjC,KAAK,CAAC,eAAe,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YAExC,kBAAkB;YAClB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;gBAC5B,MAAM,WAAW,CAAC,WAAW,CAAC,KAAK,EAAE,EAAE,MAAM,kBAAqB,EAAE,CAAC,CAAC;aACtE;YAED,mBAAmB;YACnB,MAAM,CAAC,WAAW,CAAC,CAAA,GAAA,4BAAgB,CAAA,CAAC,KAAK,CAAC,cAAc,EAAG,CAAC,EAAE,GAAG,WAAW,EAAE,CAAC,CAAC;QACjF,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { FinalNewLineParticipant, TrimFinalNewLinesParticipant, TrimWhitespaceParticipant } from 'vs/workbench/contrib/codeEditor/browser/saveParticipants';\nimport { TestConfigurationService } from 'vs/platform/configuration/test/common/testConfigurationService';\nimport { workbenchInstantiationService, TestServiceAccessor } from 'vs/workbench/test/browser/workbenchTestServices';\nimport { toResource } from 'vs/base/test/common/utils';\nimport { Range } from 'vs/editor/common/core/range';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { TextFileEditorModel } from 'vs/workbench/services/textfile/common/textFileEditorModel';\nimport { IResolvedTextFileEditorModel, snapshotToString } from 'vs/workbench/services/textfile/common/textfiles';\nimport { SaveReason } from 'vs/workbench/common/editor';\nimport { TextFileEditorModelManager } from 'vs/workbench/services/textfile/common/textFileEditorModelManager';\n\nsuite('Save Participants', function () {\n\n\tlet instantiationService: IInstantiationService;\n\tlet accessor: TestServiceAccessor;\n\n\tsetup(() => {\n\t\tinstantiationService = workbenchInstantiationService();\n\t\taccessor = instantiationService.createInstance(TestServiceAccessor);\n\t});\n\n\tteardown(() => {\n\t\t(<TextFileEditorModelManager>accessor.textFileService.files).dispose();\n\t});\n\n\ttest('insert final new line', async function () {\n\t\tconst model = instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/final_new_line.txt'), 'utf8', undefined) as IResolvedTextFileEditorModel;\n\n\t\tawait model.resolve();\n\t\tconst configService = new TestConfigurationService();\n\t\tconfigService.setUserConfiguration('files', { 'insertFinalNewline': true });\n\t\tconst participant = new FinalNewLineParticipant(configService, undefined!);\n\n\t\t// No new line for empty lines\n\t\tlet lineContent = '';\n\t\tmodel.textEditorModel.setValue(lineContent);\n\t\tawait participant.participate(model, { reason: SaveReason.EXPLICIT });\n\t\tassert.strictEqual(snapshotToString(model.createSnapshot()!), lineContent);\n\n\t\t// No new line if last line already empty\n\t\tlineContent = `Hello New Line${model.textEditorModel.getEOL()}`;\n\t\tmodel.textEditorModel.setValue(lineContent);\n\t\tawait participant.participate(model, { reason: SaveReason.EXPLICIT });\n\t\tassert.strictEqual(snapshotToString(model.createSnapshot()!), lineContent);\n\n\t\t// New empty line added (single line)\n\t\tlineContent = 'Hello New Line';\n\t\tmodel.textEditorModel.setValue(lineContent);\n\t\tawait participant.participate(model, { reason: SaveReason.EXPLICIT });\n\t\tassert.strictEqual(snapshotToString(model.createSnapshot()!), `${lineContent}${model.textEditorModel.getEOL()}`);\n\n\t\t// New empty line added (multi line)\n\t\tlineContent = `Hello New Line${model.textEditorModel.getEOL()}Hello New Line${model.textEditorModel.getEOL()}Hello New Line`;\n\t\tmodel.textEditorModel.setValue(lineContent);\n\t\tawait participant.participate(model, { reason: SaveReason.EXPLICIT });\n\t\tassert.strictEqual(snapshotToString(model.createSnapshot()!), `${lineContent}${model.textEditorModel.getEOL()}`);\n\t});\n\n\ttest('trim final new lines', async function () {\n\t\tconst model = instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/trim_final_new_line.txt'), 'utf8', undefined) as IResolvedTextFileEditorModel;\n\n\t\tawait model.resolve();\n\t\tconst configService = new TestConfigurationService();\n\t\tconfigService.setUserConfiguration('files', { 'trimFinalNewlines': true });\n\t\tconst participant = new TrimFinalNewLinesParticipant(configService, undefined!);\n\t\tconst textContent = 'Trim New Line';\n\t\tconst eol = `${model.textEditorModel.getEOL()}`;\n\n\t\t// No new line removal if last line is not new line\n\t\tlet lineContent = `${textContent}`;\n\t\tmodel.textEditorModel.setValue(lineContent);\n\t\tawait participant.participate(model, { reason: SaveReason.EXPLICIT });\n\t\tassert.strictEqual(snapshotToString(model.createSnapshot()!), lineContent);\n\n\t\t// No new line removal if last line is single new line\n\t\tlineContent = `${textContent}${eol}`;\n\t\tmodel.textEditorModel.setValue(lineContent);\n\t\tawait participant.participate(model, { reason: SaveReason.EXPLICIT });\n\t\tassert.strictEqual(snapshotToString(model.createSnapshot()!), lineContent);\n\n\t\t// Remove new line (single line with two new lines)\n\t\tlineContent = `${textContent}${eol}${eol}`;\n\t\tmodel.textEditorModel.setValue(lineContent);\n\t\tawait participant.participate(model, { reason: SaveReason.EXPLICIT });\n\t\tassert.strictEqual(snapshotToString(model.createSnapshot()!), `${textContent}${eol}`);\n\n\t\t// Remove new lines (multiple lines with multiple new lines)\n\t\tlineContent = `${textContent}${eol}${textContent}${eol}${eol}${eol}`;\n\t\tmodel.textEditorModel.setValue(lineContent);\n\t\tawait participant.participate(model, { reason: SaveReason.EXPLICIT });\n\t\tassert.strictEqual(snapshotToString(model.createSnapshot()!), `${textContent}${eol}${textContent}${eol}`);\n\t});\n\n\ttest('trim final new lines bug#39750', async function () {\n\t\tconst model = instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/trim_final_new_line.txt'), 'utf8', undefined) as IResolvedTextFileEditorModel;\n\n\t\tawait model.resolve();\n\t\tconst configService = new TestConfigurationService();\n\t\tconfigService.setUserConfiguration('files', { 'trimFinalNewlines': true });\n\t\tconst participant = new TrimFinalNewLinesParticipant(configService, undefined!);\n\t\tconst textContent = 'Trim New Line';\n\n\t\t// single line\n\t\tlet lineContent = `${textContent}`;\n\t\tmodel.textEditorModel.setValue(lineContent);\n\n\t\t// apply edits and push to undo stack.\n\t\tlet textEdits = [{ range: new Range(1, 14, 1, 14), text: '.', forceMoveMarkers: false }];\n\t\tmodel.textEditorModel.pushEditOperations([new Selection(1, 14, 1, 14)], textEdits, () => { return [new Selection(1, 15, 1, 15)]; });\n\n\t\t// undo\n\t\tawait model.textEditorModel.undo();\n\t\tassert.strictEqual(snapshotToString(model.createSnapshot()!), `${textContent}`);\n\n\t\t// trim final new lines should not mess the undo stack\n\t\tawait participant.participate(model, { reason: SaveReason.EXPLICIT });\n\t\tawait model.textEditorModel.redo();\n\t\tassert.strictEqual(snapshotToString(model.createSnapshot()!), `${textContent}.`);\n\t});\n\n\ttest('trim final new lines bug#46075', async function () {\n\t\tconst model = instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/trim_final_new_line.txt'), 'utf8', undefined) as IResolvedTextFileEditorModel;\n\n\t\tawait model.resolve();\n\t\tconst configService = new TestConfigurationService();\n\t\tconfigService.setUserConfiguration('files', { 'trimFinalNewlines': true });\n\t\tconst participant = new TrimFinalNewLinesParticipant(configService, undefined!);\n\t\tconst textContent = 'Test';\n\t\tconst eol = `${model.textEditorModel.getEOL()}`;\n\t\tlet content = `${textContent}${eol}${eol}`;\n\t\tmodel.textEditorModel.setValue(content);\n\n\t\t// save many times\n\t\tfor (let i = 0; i < 10; i++) {\n\t\t\tawait participant.participate(model, { reason: SaveReason.EXPLICIT });\n\t\t}\n\n\t\t// confirm trimming\n\t\tassert.strictEqual(snapshotToString(model.createSnapshot()!), `${textContent}${eol}`);\n\n\t\t// undo should go back to previous content immediately\n\t\tawait model.textEditorModel.undo();\n\t\tassert.strictEqual(snapshotToString(model.createSnapshot()!), `${textContent}${eol}${eol}`);\n\t\tawait model.textEditorModel.redo();\n\t\tassert.strictEqual(snapshotToString(model.createSnapshot()!), `${textContent}${eol}`);\n\t});\n\n\ttest('trim whitespace', async function () {\n\t\tconst model = instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/trim_final_new_line.txt'), 'utf8', undefined) as IResolvedTextFileEditorModel;\n\n\t\tawait model.resolve();\n\t\tconst configService = new TestConfigurationService();\n\t\tconfigService.setUserConfiguration('files', { 'trimTrailingWhitespace': true });\n\t\tconst participant = new TrimWhitespaceParticipant(configService, undefined!);\n\t\tconst textContent = 'Test';\n\t\tlet content = `${textContent} \t`;\n\t\tmodel.textEditorModel.setValue(content);\n\n\t\t// save many times\n\t\tfor (let i = 0; i < 10; i++) {\n\t\t\tawait participant.participate(model, { reason: SaveReason.EXPLICIT });\n\t\t}\n\n\t\t// confirm trimming\n\t\tassert.strictEqual(snapshotToString(model.createSnapshot()!), `${textContent}`);\n\t});\n});\n"]}