{"version":3,"file":"webviewService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/webview/electron-browser/webviewService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAUhG,IAAa,sBAAsB,GAAnC,MAAa,sBAAuB,SAAQ,+BAAc;QAEzD,YACwB,oBAA2C,EAC1B,cAAqC;YAE7E,KAAK,CAAC,oBAAoB,CAAC,CAAC;YAFY,mBAAc,GAAd,cAAc,CAAuB;QAG9E,CAAC;QAEQ,oBAAoB,CAC5B,EAAU,EACV,OAAuB,EACvB,cAAqC,EACrC,SAAkD;;YAElD,MAAM,UAAU,GAAG,MAAA,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAS,iCAAiC,CAAC,mCAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC;YACxH,MAAM,OAAO,GAAG,IAAI,CAAC,qBAAqB,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,4CAAqB,CAAC,CAAC,CAAC,4CAA2B,EAAE,EAAE,EAAE,OAAO,EAAE,cAAc,EAAE,SAAS,EAAE,IAAI,CAAC,yBAAyB,CAAC,CAAC;YACpM,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;YAClC,OAAO,OAAO,CAAC;QAChB,CAAC;QAEQ,oBAAoB,CAC5B,EAAU,EACV,OAAuB,EACvB,cAAqC,EACrC,SAAkD;YAElD,MAAM,OAAO,GAAG,IAAI,CAAC,qBAAqB,CAAC,cAAc,CAAC,yDAA2B,EAAE,EAAE,EAAE,OAAO,EAAE,cAAc,EAAE,SAAS,CAAC,CAAC;YAC/H,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;YAClC,OAAO,OAAO,CAAC;QAChB,CAAC;KACD,CAAA;IA/BY,sBAAsB;QAGhC,WAAA,qCAAqB,CAAA;QACrB,WAAA,qCAAqB,CAAA;OAJX,sBAAsB,CA+BlC;IA/BY,wDAAsB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { DynamicWebviewEditorOverlay } from 'vs/workbench/contrib/webview/browser/dynamicWebviewEditorOverlay';\nimport { WebviewContentOptions, WebviewElement, WebviewExtensionDescription, WebviewOptions, WebviewOverlay } from 'vs/workbench/contrib/webview/browser/webview';\nimport { WebviewService } from 'vs/workbench/contrib/webview/browser/webviewService';\nimport { ElectronIframeWebview } from 'vs/workbench/contrib/webview/electron-sandbox/iframeWebviewElement';\nimport { ElectronWebviewBasedWebview } from 'vs/workbench/contrib/webview/electron-browser/webviewElement';\n\nexport class ElectronWebviewService extends WebviewService {\n\n\tconstructor(\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IConfigurationService private readonly _configService: IConfigurationService,\n\t) {\n\t\tsuper(instantiationService);\n\t}\n\n\toverride createWebviewElement(\n\t\tid: string,\n\t\toptions: WebviewOptions,\n\t\tcontentOptions: WebviewContentOptions,\n\t\textension: WebviewExtensionDescription | undefined,\n\t): WebviewElement {\n\t\tconst useIframes = this._configService.getValue<string>('webview.experimental.useIframes') ?? !options.enableFindWidget;\n\t\tconst webview = this._instantiationService.createInstance(useIframes ? ElectronIframeWebview : ElectronWebviewBasedWebview, id, options, contentOptions, extension, this._webviewThemeDataProvider);\n\t\tthis.addWebviewListeners(webview);\n\t\treturn webview;\n\t}\n\n\toverride createWebviewOverlay(\n\t\tid: string,\n\t\toptions: WebviewOptions,\n\t\tcontentOptions: WebviewContentOptions,\n\t\textension: WebviewExtensionDescription | undefined,\n\t): WebviewOverlay {\n\t\tconst webview = this._instantiationService.createInstance(DynamicWebviewEditorOverlay, id, options, contentOptions, extension);\n\t\tthis.addWebviewListeners(webview);\n\t\treturn webview;\n\t}\n}\n"]}