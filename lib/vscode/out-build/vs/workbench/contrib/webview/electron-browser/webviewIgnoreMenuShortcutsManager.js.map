{"version":3,"file":"webviewIgnoreMenuShortcutsManager.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/webview/electron-browser/webviewIgnoreMenuShortcutsManager.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAYhG,MAAa,iCAAiC;QAO7C,YACC,oBAA2C,EAC3C,kBAAuC;YAPvB,cAAS,GAAG,IAAI,GAAG,EAAc,CAAC;YASlD,IAAI,CAAC,uBAAuB,GAAG,oBAAoB,CAAC,QAAQ,CAAS,sBAAsB,CAAC,KAAK,QAAQ,CAAC;YAE1G,IAAI,CAAC,kBAAkB,GAAG,kBAAY,CAAC,SAAS,CAAyB,kBAAkB,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC;QACpH,CAAC;QAEM,GAAG,CAAC,OAAmB;YAC7B,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAE5B,MAAM,WAAW,GAAG,IAAI,2BAAe,EAAE,CAAC;YAE1C,IAAI,IAAI,CAAC,mCAAmC,EAAE;gBAC7C,IAAI,CAAC,gCAAgC,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;aACrD;YAED,WAAW,CAAC,GAAG,CAAC,CAAA,GAAA,2BAAqB,CAAA,CAAC,OAAO,EAAE,aAAa,EAAE,CAAC,KAAK,EAAE,EAAE;gBACvE,QAAQ,KAAK,CAAC,OAAO,EAAE;oBACtB;wBACC,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;wBAClC,MAAM;oBAEP;wBACC,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC;wBACnC,OAAO;iBACR;YACF,CAAC,CAAC,CAAC,CAAC;YAEJ,OAAO,CAAA,GAAA,wBAAY,CAAA,CAAC,GAAG,EAAE;gBACxB,WAAW,CAAC,OAAO,EAAE,CAAC;gBACtB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YAChC,CAAC,CAAC,CAAC;QACJ,CAAC;QAED,IAAY,mCAAmC;YAC9C,OAAO,sBAAW,IAAI,IAAI,CAAC,uBAAuB,CAAC;QACpD,CAAC;QAEO,sBAAsB,CAAC,KAAc;YAC5C,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,SAAS,EAAE;gBACrC,IAAI,CAAC,gCAAgC,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;aACtD;QACF,CAAC;QAEO,gCAAgC,CAAC,OAAmB,EAAE,KAAc;YAC3E,IAAI,IAAI,CAAC,mCAAmC,EAAE;gBAC7C,IAAI,CAAC,kBAAkB,CAAC,sBAAsB,CAAC,EAAE,aAAa,EAAE,OAAO,CAAC,gBAAgB,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;aACrG;QACF,CAAC;KACD;IA1DD,8EA0DC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { WebviewTag } from 'electron';\nimport { addDisposableListener } from 'vs/base/browser/dom';\nimport { DisposableStore, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { isMacintosh } from 'vs/base/common/platform';\nimport { ProxyChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IMainProcessService } from 'vs/platform/ipc/electron-sandbox/services';\nimport { IWebviewManagerService } from 'vs/platform/webview/common/webviewManagerService';\nimport { WebviewMessageChannels } from 'vs/workbench/contrib/webview/browser/baseWebviewElement';\n\nexport class WebviewIgnoreMenuShortcutsManager {\n\n\tprivate readonly _webviews = new Set<WebviewTag>();\n\tprivate readonly _isUsingNativeTitleBars: boolean;\n\n\tprivate readonly webviewMainService: IWebviewManagerService;\n\n\tconstructor(\n\t\tconfigurationService: IConfigurationService,\n\t\tmainProcessService: IMainProcessService,\n\t) {\n\t\tthis._isUsingNativeTitleBars = configurationService.getValue<string>('window.titleBarStyle') === 'native';\n\n\t\tthis.webviewMainService = ProxyChannel.toService<IWebviewManagerService>(mainProcessService.getChannel('webview'));\n\t}\n\n\tpublic add(webview: WebviewTag): IDisposable {\n\t\tthis._webviews.add(webview);\n\n\t\tconst disposables = new DisposableStore();\n\n\t\tif (this.shouldToggleMenuShortcutsEnablement) {\n\t\t\tthis.setIgnoreMenuShortcutsForWebview(webview, true);\n\t\t}\n\n\t\tdisposables.add(addDisposableListener(webview, 'ipc-message', (event) => {\n\t\t\tswitch (event.channel) {\n\t\t\t\tcase WebviewMessageChannels.didFocus:\n\t\t\t\t\tthis.setIgnoreMenuShortcuts(true);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase WebviewMessageChannels.didBlur:\n\t\t\t\t\tthis.setIgnoreMenuShortcuts(false);\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t}));\n\n\t\treturn toDisposable(() => {\n\t\t\tdisposables.dispose();\n\t\t\tthis._webviews.delete(webview);\n\t\t});\n\t}\n\n\tprivate get shouldToggleMenuShortcutsEnablement() {\n\t\treturn isMacintosh || this._isUsingNativeTitleBars;\n\t}\n\n\tprivate setIgnoreMenuShortcuts(value: boolean) {\n\t\tfor (const webview of this._webviews) {\n\t\t\tthis.setIgnoreMenuShortcutsForWebview(webview, value);\n\t\t}\n\t}\n\n\tprivate setIgnoreMenuShortcutsForWebview(webview: WebviewTag, value: boolean) {\n\t\tif (this.shouldToggleMenuShortcutsEnablement) {\n\t\t\tthis.webviewMainService.setIgnoreMenuShortcuts({ webContentsId: webview.getWebContentsId() }, value);\n\t\t}\n\t}\n}\n"]}