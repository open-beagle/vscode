{"version":3,"file":"iframeWebviewElement.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/webview/electron-sandbox/iframeWebviewElement.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAmBhG;;OAEG;IACH,IAAa,qBAAqB,GAAlC,MAAa,qBAAsB,SAAQ,8BAAa;QAIvD,YACC,EAAU,EACV,OAAuB,EACvB,cAAqC,EACrC,SAAkD,EAClD,wBAAkD,EAClC,aAA6B,EAC/B,WAAyB,EACtB,cAA+B,EAC7B,gBAAmC,EACxB,kBAAgD,EAC7C,+BAAgE,EACpF,UAAuB,EACb,oBAA2C,EAC7C,kBAAuC,EACtC,iBAAuC,EACzC,iBAAqC;YAEzD,KAAK,CAAC,EAAE,EAAE,OAAO,EAAE,cAAc,EAAE,SAAS,EAAE,wBAAwB,EACrE,oBAAoB,EAAE,WAAW,EAAE,UAAU,EAAE,iBAAiB,EAAE,+BAA+B,EAAE,cAAc,EAAE,gBAAgB,EAAE,aAAa,EAAE,kBAAkB,CAAC,CAAC;YAEzK,IAAI,CAAC,uBAAuB,GAAG,IAAI,mEAAgC,CAAC,oBAAoB,EAAE,kBAAkB,EAAE,iBAAiB,CAAC,CAAC;YAEjI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,6BAAkC,GAAG,EAAE;gBAC5D,IAAI,CAAC,uBAAuB,CAAC,QAAQ,EAAE,CAAC;YACzC,CAAC,CAAC,CAAC,CAAC;YAEJ,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,2BAAiC,GAAG,EAAE;gBAC3D,IAAI,CAAC,uBAAuB,CAAC,OAAO,EAAE,CAAC;YACxC,CAAC,CAAC,CAAC,CAAC;QACL,CAAC;QAEkB,WAAW,CAAC,SAAkD,EAAE,OAAuB;YACzG,KAAK,CAAC,WAAW,CAAC,SAAS,EAAE,OAAO,EAAE;gBACrC,QAAQ,EAAE,UAAU;gBACpB,wBAAwB,EAAE,IAAI,CAAC,uBAAuB;aACtD,CAAC,CAAC;QACJ,CAAC;QAED,IAAuB,sBAAsB;YAC5C,MAAM,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,uBAAwB,CAAC,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;YAChG,IAAI,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE;gBAC1C,OAAO,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;aAC9C;YACD,OAAO,QAAQ,CAAC;QACjB,CAAC;QAED,IAAuB,uBAAuB;YAC7C,OAAO,WAAW,IAAI,CAAC,EAAE,0BAA0B,CAAC;QACrD,CAAC;QAEkB,KAAK,CAAC,aAAa,CAAC,OAAe,EAAE,IAAU;;YACjE,MAAA,IAAI,CAAC,OAAO,0CAAE,aAAa,CAAE,WAAW,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,GAAG,CAAC,CAAC;QACxE,CAAC;KAED,CAAA;IA3DY,qBAAqB;QAU/B,WAAA,uBAAc,CAAA;QACd,WAAA,oBAAY,CAAA;QACZ,WAAA,yBAAe,CAAA;QACf,WAAA,6BAAiB,CAAA;QACjB,WAAA,iDAA4B,CAAA;QAC5B,YAAA,yDAA+B,CAAA;QAC/B,YAAA,iBAAW,CAAA;QACX,YAAA,qCAAqB,CAAA;QACrB,YAAA,8BAAmB,CAAA;QACnB,YAAA,mCAAoB,CAAA;QACpB,YAAA,2BAAkB,CAAA;OApBR,qBAAqB,CA2DjC;IA3DY,sDAAqB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { IMainProcessService } from 'vs/platform/ipc/electron-sandbox/services';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { INativeHostService } from 'vs/platform/native/electron-sandbox/native';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { IRemoteAuthorityResolverService } from 'vs/platform/remote/common/remoteAuthorityResolver';\nimport { ITunnelService } from 'vs/platform/remote/common/tunnel';\nimport { IRequestService } from 'vs/platform/request/common/request';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { WebviewMessageChannels } from 'vs/workbench/contrib/webview/browser/baseWebviewElement';\nimport { WebviewThemeDataProvider } from 'vs/workbench/contrib/webview/browser/themeing';\nimport { WebviewContentOptions, WebviewExtensionDescription, WebviewOptions } from 'vs/workbench/contrib/webview/browser/webview';\nimport { IFrameWebview } from 'vs/workbench/contrib/webview/browser/webviewElement';\nimport { WindowIgnoreMenuShortcutsManager } from 'vs/workbench/contrib/webview/electron-sandbox/windowIgnoreMenuShortcutsManager';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\n\n/**\n * Webview backed by an iframe but that uses Electron APIs to power the webview.\n */\nexport class ElectronIframeWebview extends IFrameWebview {\n\n\tprivate readonly _webviewKeyboardHandler: WindowIgnoreMenuShortcutsManager;\n\n\tconstructor(\n\t\tid: string,\n\t\toptions: WebviewOptions,\n\t\tcontentOptions: WebviewContentOptions,\n\t\textension: WebviewExtensionDescription | undefined,\n\t\twebviewThemeDataProvider: WebviewThemeDataProvider,\n\t\t@ITunnelService tunnelService: ITunnelService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IRequestService requestService: IRequestService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IWorkbenchEnvironmentService environmentService: IWorkbenchEnvironmentService,\n\t\t@IRemoteAuthorityResolverService _remoteAuthorityResolverService: IRemoteAuthorityResolverService,\n\t\t@ILogService logService: ILogService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IMainProcessService mainProcessService: IMainProcessService,\n\t\t@INotificationService noficationService: INotificationService,\n\t\t@INativeHostService nativeHostService: INativeHostService,\n\t) {\n\t\tsuper(id, options, contentOptions, extension, webviewThemeDataProvider,\n\t\t\tconfigurationService, fileService, logService, noficationService, _remoteAuthorityResolverService, requestService, telemetryService, tunnelService, environmentService);\n\n\t\tthis._webviewKeyboardHandler = new WindowIgnoreMenuShortcutsManager(configurationService, mainProcessService, nativeHostService);\n\n\t\tthis._register(this.on(WebviewMessageChannels.didFocus, () => {\n\t\t\tthis._webviewKeyboardHandler.didFocus();\n\t\t}));\n\n\t\tthis._register(this.on(WebviewMessageChannels.didBlur, () => {\n\t\t\tthis._webviewKeyboardHandler.didBlur();\n\t\t}));\n\t}\n\n\tprotected override initElement(extension: WebviewExtensionDescription | undefined, options: WebviewOptions) {\n\t\tsuper.initElement(extension, options, {\n\t\t\tplatform: 'electron',\n\t\t\t'vscode-resource-origin': this.webviewResourceEndpoint,\n\t\t});\n\t}\n\n\tprotected override get webviewContentEndpoint(): string {\n\t\tconst endpoint = this._environmentService.webviewExternalEndpoint!.replace('{{uuid}}', this.id);\n\t\tif (endpoint[endpoint.length - 1] === '/') {\n\t\t\treturn endpoint.slice(0, endpoint.length - 1);\n\t\t}\n\t\treturn endpoint;\n\t}\n\n\tprotected override get webviewResourceEndpoint(): string {\n\t\treturn `https://${this.id}.vscode-webview-test.com`;\n\t}\n\n\tprotected override async doPostMessage(channel: string, data?: any): Promise<void> {\n\t\tthis.element?.contentWindow!.postMessage({ channel, args: data }, '*');\n\t}\n\n}\n"]}