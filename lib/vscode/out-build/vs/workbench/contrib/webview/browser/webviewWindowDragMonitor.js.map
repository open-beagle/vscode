{"version":3,"file":"webviewWindowDragMonitor.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/webview/browser/webviewWindowDragMonitor.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAMhG;;;;;OAKG;IACH,MAAa,wBAAyB,SAAQ,sBAAU;QACvD,YAAY,UAAqC;YAChD,KAAK,EAAE,CAAC;YAER,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,qBAAqB,CAAC,MAAM,EAAE,GAAG,CAAC,SAAS,CAAC,UAAU,EAAE,GAAG,EAAE;;gBAC/E,MAAA,UAAU,EAAE,0CAAE,kBAAkB,EAAE,CAAC;YACpC,CAAC,CAAC,CAAC,CAAC;YAEJ,MAAM,SAAS,GAAG,GAAG,EAAE;;gBACtB,MAAA,UAAU,EAAE,0CAAE,gBAAgB,EAAE,CAAC;YAClC,CAAC,CAAC;YAEF,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,qBAAqB,CAAC,MAAM,EAAE,GAAG,CAAC,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,CAAC;YACrF,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,qBAAqB,CAAC,MAAM,EAAE,GAAG,CAAC,SAAS,CAAC,UAAU,EAAE,YAAY,CAAC,EAAE;gBACzF,IAAI,YAAY,CAAC,OAAO,KAAK,CAAC,EAAE;oBAC/B,SAAS,EAAE,CAAC;iBACZ;YACF,CAAC,CAAC,CAAC,CAAC;QACL,CAAC;KACD;IAnBD,4DAmBC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as DOM from 'vs/base/browser/dom';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { Webview } from 'vs/workbench/contrib/webview/browser/webview';\n\n/**\n * Allows webviews to monitor when an element in the VS Code editor is being dragged/dropped.\n *\n * This is required since webview end up eating the drag event. VS Code needs to see this\n * event so it can handle editor element drag drop.\n */\nexport class WebviewWindowDragMonitor extends Disposable {\n\tconstructor(getWebview: () => Webview | undefined) {\n\t\tsuper();\n\n\t\tthis._register(DOM.addDisposableListener(window, DOM.EventType.DRAG_START, () => {\n\t\t\tgetWebview()?.windowDidDragStart();\n\t\t}));\n\n\t\tconst onDragEnd = () => {\n\t\t\tgetWebview()?.windowDidDragEnd();\n\t\t};\n\n\t\tthis._register(DOM.addDisposableListener(window, DOM.EventType.DRAG_END, onDragEnd));\n\t\tthis._register(DOM.addDisposableListener(window, DOM.EventType.MOUSE_MOVE, currentEvent => {\n\t\t\tif (currentEvent.buttons === 0) {\n\t\t\t\tonDragEnd();\n\t\t\t}\n\t\t}));\n\t}\n}\n"]}