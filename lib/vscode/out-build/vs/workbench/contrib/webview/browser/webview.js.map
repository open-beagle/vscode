{"version":3,"file":"webview.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/webview/browser/webview.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAchG;;OAEG;IACU,QAAA,8CAA8C,GAAG,IAAI,0BAAa,CAAU,0BAA0B,EAAE,KAAK,CAAC,CAAC;IAC/G,QAAA,8CAA8C,GAAG,IAAI,0BAAa,CAAU,0BAA0B,EAAE,KAAK,CAAC,CAAC;IAC/G,QAAA,8CAA8C,GAAG,IAAI,0BAAa,CAAU,0BAA0B,EAAE,KAAK,CAAC,CAAC;IAE/G,QAAA,eAAe,GAAG,CAAA,GAAA,+BAAe,CAAA,CAAkB,gBAAgB,CAAC,CAAC;IAuClF,IAAkB,qBAGjB;IAHD,WAAkB,qBAAqB;QACtC,8DAAqC,CAAA;QACrC,sDAA6B,CAAA;IAC9B,CAAC,EAHiB,qBAAqB,GAArB,6BAAqB,KAArB,6BAAqB,QAGtC;IAwBD,SAAgB,6BAA6B,CAAC,CAAwB,EAAE,CAAwB;QAC/F,OAAO,CACN,CAAC,CAAC,uBAAuB,KAAK,CAAC,CAAC,uBAAuB;eACpD,CAAC,CAAC,YAAY,KAAK,CAAC,CAAC,YAAY;eACjC,CAAA,GAAA,eAAM,CAAA,CAAC,CAAC,CAAC,kBAAkB,EAAE,CAAC,CAAC,kBAAkB,EAAE,mBAAO,CAAC;eAC3D,CAAA,GAAA,eAAM,CAAA,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,iBAAiB,KAAK,CAAC,CAAC,iBAAiB,IAAI,CAAC,CAAC,WAAW,KAAK,CAAC,CAAC,WAAW,CAAC;eAC9H,CAAC,CAAC,iBAAiB,KAAK,CAAC,CAAC,iBAAiB,CAC9C,CAAC;IACH,CAAC;IARD,sEAQC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Dimension } from 'vs/base/browser/dom';\nimport { IMouseWheelEvent } from 'vs/base/browser/mouseEvent';\nimport { equals } from 'vs/base/common/arrays';\nimport { Event } from 'vs/base/common/event';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { isEqual } from 'vs/base/common/resources';\nimport { URI } from 'vs/base/common/uri';\nimport { IContextKeyService, RawContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IWebviewPortMapping } from 'vs/platform/webview/common/webviewPortMapping';\n\n/**\n * Set when the find widget in a webview is visible.\n */\nexport const KEYBINDING_CONTEXT_WEBVIEW_FIND_WIDGET_VISIBLE = new RawContextKey<boolean>('webviewFindWidgetVisible', false);\nexport const KEYBINDING_CONTEXT_WEBVIEW_FIND_WIDGET_FOCUSED = new RawContextKey<boolean>('webviewFindWidgetFocused', false);\nexport const KEYBINDING_CONTEXT_WEBVIEW_FIND_WIDGET_ENABLED = new RawContextKey<boolean>('webviewFindWidgetEnabled', false);\n\nexport const IWebviewService = createDecorator<IWebviewService>('webviewService');\n\nexport interface IWebviewService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * The currently focused webview.\n\t */\n\treadonly activeWebview: Webview | undefined;\n\n\t/**\n\t * Fired when the currently focused webview changes.\n\t */\n\treadonly onDidChangeActiveWebview: Event<Webview | undefined>;\n\n\t/**\n\t * Create a basic webview dom element.\n\t */\n\tcreateWebviewElement(\n\t\tid: string,\n\t\toptions: WebviewOptions,\n\t\tcontentOptions: WebviewContentOptions,\n\t\textension: WebviewExtensionDescription | undefined,\n\t): WebviewElement;\n\n\t/**\n\t * Create a lazily created webview element that is overlaid on top of another element.\n\t *\n\t * Allows us to avoid re-parenting the webview (which destroys its contents) when\n\t * moving webview around the workbench.\n\t */\n\tcreateWebviewOverlay(\n\t\tid: string,\n\t\toptions: WebviewOptions,\n\t\tcontentOptions: WebviewContentOptions,\n\t\textension: WebviewExtensionDescription | undefined,\n\t): WebviewOverlay;\n}\n\nexport const enum WebviewContentPurpose {\n\tNotebookRenderer = 'notebookRenderer',\n\tCustomEditor = 'customEditor',\n}\n\nexport type WebviewStyles = { [key: string]: string | number; };\n\nexport interface WebviewOptions {\n\t// The purpose of the webview; this is (currently) only used for filtering in js-debug\n\treadonly purpose?: WebviewContentPurpose;\n\treadonly customClasses?: string;\n\treadonly enableFindWidget?: boolean;\n\treadonly tryRestoreScrollPosition?: boolean;\n\treadonly retainContextWhenHidden?: boolean;\n\treadonly serviceWorkerFetchIgnoreSubdomain?: boolean;\n\ttransformCssVariables?(styles: Readonly<WebviewStyles>): Readonly<WebviewStyles>;\n}\n\nexport interface WebviewContentOptions {\n\treadonly useRootAuthority?: boolean;\n\treadonly allowMultipleAPIAcquire?: boolean;\n\treadonly allowScripts?: boolean;\n\treadonly localResourceRoots?: ReadonlyArray<URI>;\n\treadonly portMapping?: ReadonlyArray<IWebviewPortMapping>;\n\treadonly enableCommandUris?: boolean;\n}\n\nexport function areWebviewContentOptionsEqual(a: WebviewContentOptions, b: WebviewContentOptions): boolean {\n\treturn (\n\t\ta.allowMultipleAPIAcquire === b.allowMultipleAPIAcquire\n\t\t&& a.allowScripts === b.allowScripts\n\t\t&& equals(a.localResourceRoots, b.localResourceRoots, isEqual)\n\t\t&& equals(a.portMapping, b.portMapping, (a, b) => a.extensionHostPort === b.extensionHostPort && a.webviewPort === b.webviewPort)\n\t\t&& a.enableCommandUris === b.enableCommandUris\n\t);\n}\n\nexport interface WebviewExtensionDescription {\n\treadonly location: URI;\n\treadonly id: ExtensionIdentifier;\n}\n\nexport interface IDataLinkClickEvent {\n\tdataURL: string;\n\tdownloadName?: string;\n}\n\nexport interface WebviewMessageReceivedEvent {\n\treadonly message: any;\n\treadonly transfer?: readonly ArrayBuffer[];\n}\n\nexport interface Webview extends IDisposable {\n\n\treadonly id: string;\n\n\thtml: string;\n\tcontentOptions: WebviewContentOptions;\n\tlocalResourcesRoot: readonly URI[];\n\textension: WebviewExtensionDescription | undefined;\n\tinitialScrollProgress: number;\n\tstate: string | undefined;\n\n\treadonly isFocused: boolean;\n\n\treadonly onDidFocus: Event<void>;\n\treadonly onDidBlur: Event<void>;\n\treadonly onDidDispose: Event<void>;\n\n\treadonly onDidClickLink: Event<string>;\n\treadonly onDidScroll: Event<{ scrollYPercentage: number }>;\n\treadonly onDidWheel: Event<IMouseWheelEvent>;\n\treadonly onDidUpdateState: Event<string | undefined>;\n\treadonly onDidReload: Event<void>;\n\treadonly onMessage: Event<WebviewMessageReceivedEvent>;\n\treadonly onMissingCsp: Event<ExtensionIdentifier>;\n\n\tpostMessage(message: any, transfer?: readonly ArrayBuffer[]): void;\n\n\tfocus(): void;\n\treload(): void;\n\n\tshowFind(): void;\n\thideFind(): void;\n\trunFindAction(previous: boolean): void;\n\n\tselectAll(): void;\n\tcopy(): void;\n\tpaste(): void;\n\tcut(): void;\n\tundo(): void;\n\tredo(): void;\n\n\twindowDidDragStart(): void;\n\twindowDidDragEnd(): void;\n}\n\n/**\n * Basic webview rendered in the dom\n */\nexport interface WebviewElement extends Webview {\n\tmountTo(parent: HTMLElement): void;\n}\n\n/**\n * Dynamically created webview drawn over another element.\n */\nexport interface WebviewOverlay extends Webview {\n\treadonly container: HTMLElement;\n\toptions: WebviewOptions;\n\n\tclaim(owner: any, scopedContextKeyService: IContextKeyService | undefined): void;\n\trelease(owner: any): void;\n\n\tlayoutWebviewOverElement(element: HTMLElement, dimension?: Dimension): void;\n}\n"]}