{"version":3,"file":"webviewService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/webview/browser/webviewService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAUhG,IAAa,cAAc,GAA3B,MAAa,cAAe,SAAQ,sBAAU;QAK7C,YAC2C,qBAA4C;YAEtF,KAAK,EAAE,CAAC;YAFkC,0BAAqB,GAArB,qBAAqB,CAAuB;YAiBtE,8BAAyB,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,eAAO,EAAuB,CAAC,CAAC;YAChF,6BAAwB,GAAG,IAAI,CAAC,yBAAyB,CAAC,KAAK,CAAC;YAf/E,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC,qBAAqB,CAAC,cAAc,CAAC,mCAAwB,CAAC,CAAC;QACtG,CAAC;QAID,IAAW,aAAa,KAAK,OAAO,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;QAElD,mBAAmB,CAAC,KAA0B;YACrD,IAAI,KAAK,KAAK,IAAI,CAAC,cAAc,EAAE;gBAClC,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;gBAC5B,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aAC3C;QACF,CAAC;QAKD,oBAAoB,CACnB,EAAU,EACV,OAAuB,EACvB,cAAqC,EACrC,SAAkD;YAElD,MAAM,OAAO,GAAG,IAAI,CAAC,qBAAqB,CAAC,cAAc,CAAC,8BAAa,EAAE,EAAE,EAAE,OAAO,EAAE,cAAc,EAAE,SAAS,EAAE,IAAI,CAAC,yBAAyB,CAAC,CAAC;YACjJ,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;YAClC,OAAO,OAAO,CAAC;QAChB,CAAC;QAED,oBAAoB,CACnB,EAAU,EACV,OAAuB,EACvB,cAAqC,EACrC,SAAkD;YAElD,MAAM,OAAO,GAAG,IAAI,CAAC,qBAAqB,CAAC,cAAc,CAAC,yDAA2B,EAAE,EAAE,EAAE,OAAO,EAAE,cAAc,EAAE,SAAS,CAAC,CAAC;YAC/H,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;YAClC,OAAO,OAAO,CAAC;QAChB,CAAC;QAES,mBAAmB,CAAC,OAAgB;YAC7C,OAAO,CAAC,UAAU,CAAC,GAAG,EAAE;gBACvB,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;YACnC,CAAC,CAAC,CAAC;YAEH,MAAM,MAAM,GAAG,GAAG,EAAE;gBACnB,IAAI,IAAI,CAAC,cAAc,KAAK,OAAO,EAAE;oBACpC,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC;iBACpC;YACF,CAAC,CAAC;YAEF,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YAC1B,OAAO,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;QAC9B,CAAC;KACD,CAAA;IA9DY,cAAc;QAMxB,WAAA,qCAAqB,CAAA;OANX,cAAc,CA8D1B;IA9DY,wCAAc","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { WebviewThemeDataProvider } from 'vs/workbench/contrib/webview/browser/themeing';\nimport { IWebviewService, Webview, WebviewContentOptions, WebviewElement, WebviewExtensionDescription, WebviewOptions, WebviewOverlay } from 'vs/workbench/contrib/webview/browser/webview';\nimport { IFrameWebview } from 'vs/workbench/contrib/webview/browser/webviewElement';\nimport { DynamicWebviewEditorOverlay } from './dynamicWebviewEditorOverlay';\n\nexport class WebviewService extends Disposable implements IWebviewService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprotected readonly _webviewThemeDataProvider: WebviewThemeDataProvider;\n\n\tconstructor(\n\t\t@IInstantiationService protected readonly _instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\t\tthis._webviewThemeDataProvider = this._instantiationService.createInstance(WebviewThemeDataProvider);\n\t}\n\n\tprivate _activeWebview?: Webview;\n\n\tpublic get activeWebview() { return this._activeWebview; }\n\n\tprivate updateActiveWebview(value: Webview | undefined) {\n\t\tif (value !== this._activeWebview) {\n\t\t\tthis._activeWebview = value;\n\t\t\tthis._onDidChangeActiveWebview.fire(value);\n\t\t}\n\t}\n\n\tprivate readonly _onDidChangeActiveWebview = this._register(new Emitter<Webview | undefined>());\n\tpublic readonly onDidChangeActiveWebview = this._onDidChangeActiveWebview.event;\n\n\tcreateWebviewElement(\n\t\tid: string,\n\t\toptions: WebviewOptions,\n\t\tcontentOptions: WebviewContentOptions,\n\t\textension: WebviewExtensionDescription | undefined,\n\t): WebviewElement {\n\t\tconst webview = this._instantiationService.createInstance(IFrameWebview, id, options, contentOptions, extension, this._webviewThemeDataProvider);\n\t\tthis.addWebviewListeners(webview);\n\t\treturn webview;\n\t}\n\n\tcreateWebviewOverlay(\n\t\tid: string,\n\t\toptions: WebviewOptions,\n\t\tcontentOptions: WebviewContentOptions,\n\t\textension: WebviewExtensionDescription | undefined,\n\t): WebviewOverlay {\n\t\tconst webview = this._instantiationService.createInstance(DynamicWebviewEditorOverlay, id, options, contentOptions, extension);\n\t\tthis.addWebviewListeners(webview);\n\t\treturn webview;\n\t}\n\n\tprotected addWebviewListeners(webview: Webview) {\n\t\twebview.onDidFocus(() => {\n\t\t\tthis.updateActiveWebview(webview);\n\t\t});\n\n\t\tconst onBlur = () => {\n\t\t\tif (this._activeWebview === webview) {\n\t\t\t\tthis.updateActiveWebview(undefined);\n\t\t\t}\n\t\t};\n\n\t\twebview.onDidBlur(onBlur);\n\t\twebview.onDidDispose(onBlur);\n\t}\n}\n"]}