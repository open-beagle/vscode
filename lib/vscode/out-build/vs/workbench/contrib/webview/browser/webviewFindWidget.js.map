{"version":3,"file":"webviewFindWidget.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/webview/browser/webviewFindWidget.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAgBhG,IAAa,iBAAiB,GAA9B,MAAa,iBAAkB,SAAQ,mCAAgB;QAGtD,YACkB,SAA8B,EAC1B,kBAAuC,EACxC,iBAAqC;YAEzD,KAAK,CAAC,kBAAkB,EAAE,iBAAiB,CAAC,CAAC;YAJ5B,cAAS,GAAT,SAAS,CAAqB;YAK/C,IAAI,CAAC,kBAAkB,GAAG,wDAA8C,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;YAEnG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,aAAa,CAAC,SAAS,CAAC,EAAE;gBAClD,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;YAC/B,CAAC,CAAC,CAAC,CAAC;QACL,CAAC;QAEM,IAAI,CAAC,QAAiB;YAC5B,MAAM,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC;YAC5B,IAAI,GAAG,EAAE;gBACR,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;aACnC;QACF,CAAC;QAEe,IAAI;YACnB,KAAK,CAAC,IAAI,EAAE,CAAC;YACb,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YAC9B,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;QACxB,CAAC;QAEM,cAAc;YACpB,MAAM,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC;YAC5B,IAAI,GAAG,EAAE;gBACR,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;aAC9B;iBAAM;gBACN,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;aAC/B;YACD,OAAO,KAAK,CAAC;QACd,CAAC;QAES,mBAAmB;YAC5B,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACnC,CAAC;QAES,kBAAkB;YAC3B,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,CAAC;QACjC,CAAC;QAES,4BAA4B,KAAK,CAAC;QAElC,2BAA2B,KAAK,CAAC;QAEjC,SAAS,KAAK,CAAC;KACzB,CAAA;IApDY,iBAAiB;QAK3B,WAAA,iCAAmB,CAAA;QACnB,WAAA,+BAAkB,CAAA;OANR,iBAAiB,CAoD7B;IApDY,8CAAiB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { SimpleFindWidget } from 'vs/workbench/contrib/codeEditor/browser/find/simpleFindWidget';\nimport { IContextKeyService, IContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { IContextViewService } from 'vs/platform/contextview/browser/contextView';\nimport { KEYBINDING_CONTEXT_WEBVIEW_FIND_WIDGET_FOCUSED } from 'vs/workbench/contrib/webview/browser/webview';\nimport { Event } from 'vs/base/common/event';\n\nexport interface WebviewFindDelegate {\n\treadonly hasFindResult: Event<boolean>;\n\tfind(value: string, previous: boolean): void;\n\tstartFind(value: string): void;\n\tstopFind(keepSelection?: boolean): void;\n\tfocus(): void;\n}\n\nexport class WebviewFindWidget extends SimpleFindWidget {\n\tprotected _findWidgetFocused: IContextKey<boolean>;\n\n\tconstructor(\n\t\tprivate readonly _delegate: WebviewFindDelegate,\n\t\t@IContextViewService contextViewService: IContextViewService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService\n\t) {\n\t\tsuper(contextViewService, contextKeyService);\n\t\tthis._findWidgetFocused = KEYBINDING_CONTEXT_WEBVIEW_FIND_WIDGET_FOCUSED.bindTo(contextKeyService);\n\n\t\tthis._register(_delegate.hasFindResult(hasResult => {\n\t\t\tthis.updateButtons(hasResult);\n\t\t}));\n\t}\n\n\tpublic find(previous: boolean) {\n\t\tconst val = this.inputValue;\n\t\tif (val) {\n\t\t\tthis._delegate.find(val, previous);\n\t\t}\n\t}\n\n\tpublic override hide() {\n\t\tsuper.hide();\n\t\tthis._delegate.stopFind(true);\n\t\tthis._delegate.focus();\n\t}\n\n\tpublic onInputChanged() {\n\t\tconst val = this.inputValue;\n\t\tif (val) {\n\t\t\tthis._delegate.startFind(val);\n\t\t} else {\n\t\t\tthis._delegate.stopFind(false);\n\t\t}\n\t\treturn false;\n\t}\n\n\tprotected onFocusTrackerFocus() {\n\t\tthis._findWidgetFocused.set(true);\n\t}\n\n\tprotected onFocusTrackerBlur() {\n\t\tthis._findWidgetFocused.reset();\n\t}\n\n\tprotected onFindInputFocusTrackerFocus() { }\n\n\tprotected onFindInputFocusTrackerBlur() { }\n\n\tprotected findFirst() { }\n}\n"]}