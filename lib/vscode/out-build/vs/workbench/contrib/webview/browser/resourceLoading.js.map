{"version":3,"file":"resourceLoading.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/webview/browser/resourceLoading.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBufferReadableStream } from 'vs/base/common/buffer';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { isUNC } from 'vs/base/common/extpath';\nimport { Schemas } from 'vs/base/common/network';\nimport { sep } from 'vs/base/common/path';\nimport { URI } from 'vs/base/common/uri';\nimport { IHeaders } from 'vs/base/parts/request/common/request';\nimport { FileOperationError, FileOperationResult, IFileService } from 'vs/platform/files/common/files';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IRemoteConnectionData } from 'vs/platform/remote/common/remoteAuthorityResolver';\nimport { IRequestService } from 'vs/platform/request/common/request';\nimport { getWebviewContentMimeType } from 'vs/platform/webview/common/mimeTypes';\n\nexport namespace WebviewResourceResponse {\n\texport enum Type { Success, Failed, AccessDenied, NotModified }\n\n\texport class StreamSuccess {\n\t\treadonly type = Type.Success;\n\n\t\tconstructor(\n\t\t\tpublic readonly stream: VSBufferReadableStream,\n\t\t\tpublic readonly etag: string | undefined,\n\t\t\tpublic readonly mimeType: string,\n\t\t) { }\n\t}\n\n\texport const Failed = { type: Type.Failed } as const;\n\texport const AccessDenied = { type: Type.AccessDenied } as const;\n\n\texport class NotModified {\n\t\treadonly type = Type.NotModified;\n\n\t\tconstructor(\n\t\t\tpublic readonly mimeType: string,\n\t\t) { }\n\t}\n\n\texport type StreamResponse = StreamSuccess | typeof Failed | typeof AccessDenied | NotModified;\n}\n\nexport async function loadLocalResource(\n\trequestUri: URI,\n\tifNoneMatch: string | undefined,\n\toptions: {\n\t\textensionLocation: URI | undefined;\n\t\troots: ReadonlyArray<URI>;\n\t\tremoteConnectionData?: IRemoteConnectionData | null;\n\t\tuseRootAuthority?: boolean;\n\t},\n\tfileService: IFileService,\n\trequestService: IRequestService,\n\tlogService: ILogService,\n\ttoken: CancellationToken,\n): Promise<WebviewResourceResponse.StreamResponse> {\n\tlogService.debug(`loadLocalResource - being. requestUri=${requestUri}`);\n\n\tconst resourceToLoad = getResourceToLoad(requestUri, options.roots, options.extensionLocation, options.useRootAuthority);\n\n\tlogService.debug(`loadLocalResource - found resource to load. requestUri=${requestUri}, resourceToLoad=${resourceToLoad}`);\n\n\tif (!resourceToLoad) {\n\t\treturn WebviewResourceResponse.AccessDenied;\n\t}\n\n\tconst mime = getWebviewContentMimeType(requestUri); // Use the original path for the mime\n\n\tif (resourceToLoad.scheme === Schemas.http || resourceToLoad.scheme === Schemas.https) {\n\t\tconst headers: IHeaders = {};\n\t\tif (ifNoneMatch) {\n\t\t\theaders['If-None-Match'] = ifNoneMatch;\n\t\t}\n\n\t\tconst response = await requestService.request({\n\t\t\turl: resourceToLoad.toString(true),\n\t\t\theaders: headers\n\t\t}, token);\n\n\t\tlogService.debug(`loadLocalResource - Loaded over http(s). requestUri=${requestUri}, response=${response.res.statusCode}`);\n\n\t\tswitch (response.res.statusCode) {\n\t\t\tcase 200:\n\t\t\t\treturn new WebviewResourceResponse.StreamSuccess(response.stream, response.res.headers['etag'], mime);\n\n\t\t\tcase 304: // Not modified\n\t\t\t\treturn new WebviewResourceResponse.NotModified(mime);\n\n\t\t\tdefault:\n\t\t\t\treturn WebviewResourceResponse.Failed;\n\t\t}\n\t}\n\n\ttry {\n\t\tconst result = await fileService.readFileStream(resourceToLoad, { etag: ifNoneMatch });\n\t\treturn new WebviewResourceResponse.StreamSuccess(result.value, result.etag, mime);\n\t} catch (err) {\n\t\tif (err instanceof FileOperationError) {\n\t\t\tconst result = err.fileOperationResult;\n\n\t\t\t// NotModified status is expected and can be handled gracefully\n\t\t\tif (result === FileOperationResult.FILE_NOT_MODIFIED_SINCE) {\n\t\t\t\treturn new WebviewResourceResponse.NotModified(mime);\n\t\t\t}\n\t\t}\n\n\t\t// Otherwise the error is unexpected.\n\t\tlogService.debug(`loadLocalResource - Error using fileReader. requestUri=${requestUri}`);\n\t\tconsole.log(err);\n\n\t\treturn WebviewResourceResponse.Failed;\n\t}\n}\n\nfunction getResourceToLoad(\n\trequestUri: URI,\n\troots: ReadonlyArray<URI>,\n\textensionLocation: URI | undefined,\n\tuseRootAuthority: boolean | undefined\n): URI | undefined {\n\tfor (const root of roots) {\n\t\tif (containsResource(root, requestUri)) {\n\t\t\treturn normalizeResourcePath(requestUri, extensionLocation, useRootAuthority ? root.authority : undefined);\n\t\t}\n\t}\n\n\treturn undefined;\n}\n\nfunction normalizeResourcePath(resource: URI, extensionLocation: URI | undefined, useRemoteAuthority: string | undefined): URI {\n\t// If we are loading a file resource from a webview created by a remote extension, rewrite the uri to go remote\n\tif (useRemoteAuthority || (resource.scheme === Schemas.file && extensionLocation?.scheme === Schemas.vscodeRemote)) {\n\t\treturn URI.from({\n\t\t\tscheme: Schemas.vscodeRemote,\n\t\t\tauthority: useRemoteAuthority ?? extensionLocation!.authority,\n\t\t\tpath: '/vscode-resource',\n\t\t\tquery: JSON.stringify({\n\t\t\t\trequestResourcePath: resource.path\n\t\t\t})\n\t\t});\n\t}\n\treturn resource;\n}\n\nfunction containsResource(root: URI, resource: URI): boolean {\n\tlet rootPath = root.fsPath + (root.fsPath.endsWith(sep) ? '' : sep);\n\tlet resourceFsPath = resource.fsPath;\n\n\tif (isUNC(root.fsPath) && isUNC(resource.fsPath)) {\n\t\trootPath = rootPath.toLowerCase();\n\t\tresourceFsPath = resourceFsPath.toLowerCase();\n\t}\n\n\treturn resourceFsPath.startsWith(rootPath);\n}\n"]}