{"version":3,"sources":["vs/workbench/contrib/extensions/electron-sandbox/extensionsActions.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAUhG,IAAa,0BAA0B,GAAvC,MAAa,0BAA2B,SAAQ,gBAAM;QAKrD,YACC,EAAU,EACV,KAAa,EACwB,iBAAqC,EAC3C,WAAyB,EACH,kBAAsD;YAE3G,KAAK,CAAC,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;YAJG,sBAAiB,GAAjB,iBAAiB,CAAoB;YAC3C,gBAAW,GAAX,WAAW,CAAc;YACH,uBAAkB,GAAlB,kBAAkB,CAAoC;QAG5G,CAAC;QAEQ,KAAK,CAAC,GAAG;YACjB,MAAM,cAAc,GAAG,SAAG,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,CAAC;YACxE,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;YAE5D,IAAI,UAAe,CAAC;YACpB,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC9C,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;aACvC;iBAAM;gBACN,UAAU,GAAG,cAAc,CAAC;aAC5B;YAED,IAAI,UAAU,CAAC,MAAM,KAAK,iBAAO,CAAC,IAAI,EAAE;gBACvC,OAAO,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;aAClE;QACF,CAAC;KACD,CAAA;IA5BgB,6BAAE,GAAG,kDAAkD,CAAC;IACxD,gCAAK,GAAG,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAsB,EAAE,IAAwB,CAAC,CAAC;IAHvE,0BAA0B;QAQpC,WAAA,2BAAkB,CAAA;QAClB,WAAA,oBAAY,CAAA;QACZ,WAAA,uDAAkC,CAAA;OAVxB,0BAA0B,CA8BtC;IA9BY,gEAA0B","file":"extensionsActions.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { Action } from 'vs/base/common/actions';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { URI } from 'vs/base/common/uri';\nimport { INativeWorkbenchEnvironmentService } from 'vs/workbench/services/environment/electron-sandbox/environmentService';\nimport { INativeHostService } from 'vs/platform/native/electron-sandbox/native';\nimport { Schemas } from 'vs/base/common/network';\n\nexport class OpenExtensionsFolderAction extends Action {\n\n\tstatic readonly ID = 'workbench.extensions.action.openExtensionsFolder';\n\tstatic readonly LABEL = localize('openExtensionsFolder', \"Open Extensions Folder\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@INativeHostService private readonly nativeHostService: INativeHostService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@INativeWorkbenchEnvironmentService private readonly environmentService: INativeWorkbenchEnvironmentService\n\t) {\n\t\tsuper(id, label, undefined, true);\n\t}\n\n\toverride async run(): Promise<void> {\n\t\tconst extensionsHome = URI.file(this.environmentService.extensionsPath);\n\t\tconst file = await this.fileService.resolve(extensionsHome);\n\n\t\tlet itemToShow: URI;\n\t\tif (file.children && file.children.length > 0) {\n\t\t\titemToShow = file.children[0].resource;\n\t\t} else {\n\t\t\titemToShow = extensionsHome;\n\t\t}\n\n\t\tif (itemToShow.scheme === Schemas.file) {\n\t\t\treturn this.nativeHostService.showItemInFolder(itemToShow.fsPath);\n\t\t}\n\t}\n}\n\n"]}