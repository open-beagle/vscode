{"version":3,"sources":["vs/workbench/contrib/extensions/electron-browser/debugExtensionHostAction.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAWhG,IAAa,wBAAwB,GAArC,MAAa,wBAAyB,SAAQ,gBAAM;QAKnD,YACiC,aAA4B,EACvB,kBAAsC,EAC1C,cAA8B,EAC3B,iBAAoC,EACtC,cAA+B;YAEjE,KAAK,CAAC,wBAAwB,CAAC,EAAE,EAAE,wBAAwB,CAAC,KAAK,EAAE,wBAAwB,CAAC,SAAS,CAAC,CAAC;YANvE,kBAAa,GAAb,aAAa,CAAe;YACvB,uBAAkB,GAAlB,kBAAkB,CAAoB;YAC1C,mBAAc,GAAd,cAAc,CAAgB;YAC3B,sBAAiB,GAAjB,iBAAiB,CAAmB;YACtC,mBAAc,GAAd,cAAc,CAAiB;QAGlE,CAAC;QAEQ,KAAK,CAAC,GAAG;YAEjB,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;YACvE,IAAI,CAAC,WAAW,EAAE;gBACjB,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC;oBAC7C,IAAI,EAAE,MAAM;oBACZ,OAAO,EAAE,GAAG,CAAC,QAAQ,CAAC,UAAU,EAAE,oBAAoB,CAAC;oBACvD,MAAM,EAAE,GAAG,CAAC,QAAQ,CAAC,UAAU,EAAE,yFAAyF,EAAE,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC;oBACzJ,aAAa,EAAE,GAAG,CAAC,QAAQ,CAAC,UAAU,EAAE,WAAW,CAAC;oBACpD,eAAe,EAAE,GAAG,CAAC,QAAQ,CAAC,QAAQ,EAAE,UAAU,CAAC;iBACnD,CAAC,CAAC;gBACH,IAAI,GAAG,CAAC,SAAS,EAAE;oBAClB,MAAM,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,EAAE,OAAO,EAAE,CAAC,wBAAwB,CAAA,GAAA,kBAAU,CAAA,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;iBAC9F;gBAED,OAAO;aACP;YAED,OAAO,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,SAAS,EAAE;gBACnD,IAAI,EAAE,MAAM;gBACZ,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,gCAAgC,EAAE,uBAAuB,CAAC;gBAC7E,OAAO,EAAE,QAAQ;gBACjB,IAAI,EAAE,WAAW;aACjB,CAAC,CAAC;QACJ,CAAC;KACD,CAAA;IAvCgB,2BAAE,GAAG,gDAAgD,CAAC;IACtD,8BAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,CAAoB,EAAE,IAAgC,CAAC,CAAC;IAC7E,kCAAS,GAAG,sBAAsB,CAAC;IAHvC,wBAAwB;QAMlC,WAAA,qBAAa,CAAA;QACb,WAAA,2BAAkB,CAAA;QAClB,WAAA,wBAAc,CAAA;QACd,WAAA,8BAAiB,CAAA;QACjB,WAAA,gCAAe,CAAA;OAVL,wBAAwB,CAwCpC;IAxCY,4DAAwB","file":"debugExtensionHostAction.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { Action } from 'vs/base/common/actions';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { INativeHostService } from 'vs/platform/native/electron-sandbox/native';\nimport { IDebugService } from 'vs/workbench/contrib/debug/common/debug';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { randomPort } from 'vs/base/node/ports';\n\nexport class DebugExtensionHostAction extends Action {\n\tstatic readonly ID = 'workbench.extensions.action.debugExtensionHost';\n\tstatic readonly LABEL = nls.localize('debugExtensionHost', \"Start Debugging Extension Host\");\n\tstatic readonly CSS_CLASS = 'debug-extension-host';\n\n\tconstructor(\n\t\t@IDebugService private readonly _debugService: IDebugService,\n\t\t@INativeHostService private readonly _nativeHostService: INativeHostService,\n\t\t@IDialogService private readonly _dialogService: IDialogService,\n\t\t@IExtensionService private readonly _extensionService: IExtensionService,\n\t\t@IProductService private readonly productService: IProductService\n\t) {\n\t\tsuper(DebugExtensionHostAction.ID, DebugExtensionHostAction.LABEL, DebugExtensionHostAction.CSS_CLASS);\n\t}\n\n\toverride async run(): Promise<any> {\n\n\t\tconst inspectPort = await this._extensionService.getInspectPort(false);\n\t\tif (!inspectPort) {\n\t\t\tconst res = await this._dialogService.confirm({\n\t\t\t\ttype: 'info',\n\t\t\t\tmessage: nls.localize('restart1', \"Profile Extensions\"),\n\t\t\t\tdetail: nls.localize('restart2', \"In order to profile extensions a restart is required. Do you want to restart '{0}' now?\", this.productService.nameLong),\n\t\t\t\tprimaryButton: nls.localize('restart3', \"&&Restart\"),\n\t\t\t\tsecondaryButton: nls.localize('cancel', \"&&Cancel\")\n\t\t\t});\n\t\t\tif (res.confirmed) {\n\t\t\t\tawait this._nativeHostService.relaunch({ addArgs: [`--inspect-extensions=${randomPort()}`] });\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\treturn this._debugService.startDebugging(undefined, {\n\t\t\ttype: 'node',\n\t\t\tname: nls.localize('debugExtensionHost.launch.name', \"Attach Extension Host\"),\n\t\t\trequest: 'attach',\n\t\t\tport: inspectPort\n\t\t});\n\t}\n}\n"]}