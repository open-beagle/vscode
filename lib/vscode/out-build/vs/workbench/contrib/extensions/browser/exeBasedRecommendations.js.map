{"version":3,"sources":["vs/workbench/contrib/extensions/browser/exeBasedRecommendations.ts"],"names":[],"mappings":"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","file":"exeBasedRecommendations.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IExtensionTipsService, IExecutableBasedExtensionTip } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { ExtensionRecommendations, ExtensionRecommendation } from 'vs/workbench/contrib/extensions/browser/extensionRecommendations';\nimport { localize } from 'vs/nls';\nimport { basename } from 'vs/base/common/path';\nimport { ExtensionRecommendationReason } from 'vs/workbench/services/extensionRecommendations/common/extensionRecommendations';\n\nexport class ExeBasedRecommendations extends ExtensionRecommendations {\n\n\tprivate _otherTips: IExecutableBasedExtensionTip[] = [];\n\tprivate _importantTips: IExecutableBasedExtensionTip[] = [];\n\n\tget otherRecommendations(): ReadonlyArray<ExtensionRecommendation> { return this._otherTips.map(tip => this.toExtensionRecommendation(tip)); }\n\tget importantRecommendations(): ReadonlyArray<ExtensionRecommendation> { return this._importantTips.map(tip => this.toExtensionRecommendation(tip)); }\n\n\tget recommendations(): ReadonlyArray<ExtensionRecommendation> { return [...this.importantRecommendations, ...this.otherRecommendations]; }\n\n\tconstructor(\n\t\t@IExtensionTipsService private readonly extensionTipsService: IExtensionTipsService,\n\t) {\n\t\tsuper();\n\t}\n\n\tgetRecommendations(exe: string): { important: ExtensionRecommendation[], others: ExtensionRecommendation[] } {\n\t\tconst important = this._importantTips\n\t\t\t.filter(tip => tip.exeName.toLowerCase() === exe.toLowerCase())\n\t\t\t.map(tip => this.toExtensionRecommendation(tip));\n\n\t\tconst others = this._otherTips\n\t\t\t.filter(tip => tip.exeName.toLowerCase() === exe.toLowerCase())\n\t\t\t.map(tip => this.toExtensionRecommendation(tip));\n\n\t\treturn { important, others };\n\t}\n\n\tprotected async doActivate(): Promise<void> {\n\t\tthis._otherTips = await this.extensionTipsService.getOtherExecutableBasedTips();\n\t\tawait this.fetchImportantExeBasedRecommendations();\n\t}\n\n\tprivate _importantExeBasedRecommendations: Promise<Map<string, IExecutableBasedExtensionTip>> | undefined;\n\tprivate async fetchImportantExeBasedRecommendations(): Promise<Map<string, IExecutableBasedExtensionTip>> {\n\t\tif (!this._importantExeBasedRecommendations) {\n\t\t\tthis._importantExeBasedRecommendations = this.doFetchImportantExeBasedRecommendations();\n\t\t}\n\t\treturn this._importantExeBasedRecommendations;\n\t}\n\n\tprivate async doFetchImportantExeBasedRecommendations(): Promise<Map<string, IExecutableBasedExtensionTip>> {\n\t\tconst importantExeBasedRecommendations = new Map<string, IExecutableBasedExtensionTip>();\n\t\tthis._importantTips = await this.extensionTipsService.getImportantExecutableBasedTips();\n\t\tthis._importantTips.forEach(tip => importantExeBasedRecommendations.set(tip.extensionId.toLowerCase(), tip));\n\t\treturn importantExeBasedRecommendations;\n\t}\n\n\tprivate toExtensionRecommendation(tip: IExecutableBasedExtensionTip): ExtensionRecommendation {\n\t\treturn {\n\t\t\textensionId: tip.extensionId.toLowerCase(),\n\t\t\treason: {\n\t\t\t\treasonId: ExtensionRecommendationReason.Executable,\n\t\t\t\treasonText: localize('exeBasedRecommendation', \"This extension is recommended because you have {0} installed.\", tip.exeFriendlyName || basename(tip.windowsPath!))\n\t\t\t}\n\t\t};\n\t}\n\n}\n\n"]}