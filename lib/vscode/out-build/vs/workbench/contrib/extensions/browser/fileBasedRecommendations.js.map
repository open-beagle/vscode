{"version":3,"sources":["vs/workbench/contrib/extensions/browser/fileBasedRecommendations.ts"],"names":[],"mappings":"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","file":"fileBasedRecommendations.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { ExtensionRecommendations, ExtensionRecommendation } from 'vs/workbench/contrib/extensions/browser/extensionRecommendations';\nimport { INotificationService, Severity } from 'vs/platform/notification/common/notification';\nimport { EnablementState } from 'vs/workbench/services/extensionManagement/common/extensionManagement';\nimport { ExtensionRecommendationReason, IExtensionIgnoredRecommendationsService } from 'vs/workbench/services/extensionRecommendations/common/extensionRecommendations';\nimport { IExtensionsViewPaneContainer, IExtensionsWorkbenchService, IExtension } from 'vs/workbench/contrib/extensions/common/extensions';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { localize } from 'vs/nls';\nimport { StorageScope, IStorageService, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { ImportantExtensionTip } from 'vs/base/common/product';\nimport { forEach, IStringDictionary } from 'vs/base/common/collections';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { Schemas } from 'vs/base/common/network';\nimport { basename, extname } from 'vs/base/common/resources';\nimport { match } from 'vs/base/common/glob';\nimport { URI } from 'vs/base/common/uri';\nimport { MIME_UNKNOWN, guessMimeTypes } from 'vs/base/common/mime';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { IViewletService } from 'vs/workbench/services/viewlet/browser/viewlet';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { setImmediate } from 'vs/base/common/platform';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { IExtensionRecommendationNotificationService, RecommendationsNotificationResult, RecommendationSource } from 'vs/platform/extensionRecommendations/common/extensionRecommendations';\nimport { distinct } from 'vs/base/common/arrays';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\n\ntype FileExtensionSuggestionClassification = {\n\tuserReaction: { classification: 'SystemMetaData', purpose: 'FeatureInsight' };\n\tfileExtension: { classification: 'PublicNonPersonalData', purpose: 'FeatureInsight' };\n};\n\nconst promptedRecommendationsStorageKey = 'fileBasedRecommendations/promptedRecommendations';\nconst promptedFileExtensionsStorageKey = 'fileBasedRecommendations/promptedFileExtensions';\nconst recommendationsStorageKey = 'extensionsAssistant/recommendations';\nconst searchMarketplace = localize('searchMarketplace', \"Search Marketplace\");\nconst milliSecondsInADay = 1000 * 60 * 60 * 24;\n\nexport class FileBasedRecommendations extends ExtensionRecommendations {\n\n\tprivate readonly extensionTips = new Map<string, string>();\n\tprivate readonly importantExtensionTips = new Map<string, ImportantExtensionTip>();\n\n\tprivate readonly fileBasedRecommendationsByPattern = new Map<string, string[]>();\n\tprivate readonly fileBasedRecommendationsByLanguage = new Map<string, string[]>();\n\tprivate readonly fileBasedRecommendations = new Map<string, { recommendedTime: number }>();\n\tprivate readonly processedFileExtensions: string[] = [];\n\tprivate readonly processedLanguages: string[] = [];\n\n\tget recommendations(): ReadonlyArray<ExtensionRecommendation> {\n\t\tconst recommendations: ExtensionRecommendation[] = [];\n\t\t[...this.fileBasedRecommendations.keys()]\n\t\t\t.sort((a, b) => {\n\t\t\t\tif (this.fileBasedRecommendations.get(a)!.recommendedTime === this.fileBasedRecommendations.get(b)!.recommendedTime) {\n\t\t\t\t\tif (this.importantExtensionTips.has(a)) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t\tif (this.importantExtensionTips.has(b)) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this.fileBasedRecommendations.get(a)!.recommendedTime > this.fileBasedRecommendations.get(b)!.recommendedTime ? -1 : 1;\n\t\t\t})\n\t\t\t.forEach(extensionId => {\n\t\t\t\trecommendations.push({\n\t\t\t\t\textensionId,\n\t\t\t\t\treason: {\n\t\t\t\t\t\treasonId: ExtensionRecommendationReason.File,\n\t\t\t\t\t\treasonText: localize('fileBasedRecommendation', \"This extension is recommended based on the files you recently opened.\")\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\treturn recommendations;\n\t}\n\n\tget importantRecommendations(): ReadonlyArray<ExtensionRecommendation> {\n\t\treturn this.recommendations.filter(e => this.importantExtensionTips.has(e.extensionId));\n\t}\n\n\tget otherRecommendations(): ReadonlyArray<ExtensionRecommendation> {\n\t\treturn this.recommendations.filter(e => !this.importantExtensionTips.has(e.extensionId));\n\t}\n\n\tconstructor(\n\t\t@IExtensionsWorkbenchService private readonly extensionsWorkbenchService: IExtensionsWorkbenchService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IViewletService private readonly viewletService: IViewletService,\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@IModeService private readonly modeService: IModeService,\n\t\t@IProductService productService: IProductService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IExtensionRecommendationNotificationService private readonly extensionRecommendationNotificationService: IExtensionRecommendationNotificationService,\n\t\t@IExtensionIgnoredRecommendationsService private readonly extensionIgnoredRecommendationsService: IExtensionIgnoredRecommendationsService,\n\t) {\n\t\tsuper();\n\n\t\tif (productService.extensionTips) {\n\t\t\tforEach(productService.extensionTips, ({ key, value }) => this.extensionTips.set(key.toLowerCase(), value));\n\t\t}\n\t\tif (productService.extensionImportantTips) {\n\t\t\tforEach(productService.extensionImportantTips, ({ key, value }) => this.importantExtensionTips.set(key.toLowerCase(), value));\n\t\t}\n\t}\n\n\tprotected async doActivate(): Promise<void> {\n\t\tawait this.extensionService.whenInstalledExtensionsRegistered();\n\n\t\tconst allRecommendations: string[] = [];\n\n\t\t// group extension recommendations by pattern, like {**/*.md} -> [ext.foo1, ext.bar2]\n\t\tfor (const [extensionId, pattern] of this.extensionTips) {\n\t\t\tconst ids = this.fileBasedRecommendationsByPattern.get(pattern) || [];\n\t\t\tids.push(extensionId);\n\t\t\tthis.fileBasedRecommendationsByPattern.set(pattern, ids);\n\t\t\tallRecommendations.push(extensionId);\n\t\t}\n\t\tfor (const [extensionId, value] of this.importantExtensionTips) {\n\t\t\tif (value.pattern) {\n\t\t\t\tconst ids = this.fileBasedRecommendationsByPattern.get(value.pattern) || [];\n\t\t\t\tids.push(extensionId);\n\t\t\t\tthis.fileBasedRecommendationsByPattern.set(value.pattern, ids);\n\t\t\t}\n\t\t\tif (value.languages) {\n\t\t\t\tfor (const language of value.languages) {\n\t\t\t\t\tconst ids = this.fileBasedRecommendationsByLanguage.get(language) || [];\n\t\t\t\t\tids.push(extensionId);\n\t\t\t\t\tthis.fileBasedRecommendationsByLanguage.set(language, ids);\n\t\t\t\t}\n\t\t\t}\n\t\t\tallRecommendations.push(extensionId);\n\t\t}\n\n\t\tconst cachedRecommendations = this.getCachedRecommendations();\n\t\tconst now = Date.now();\n\t\t// Retire existing recommendations if they are older than a week or are not part of this.productService.extensionTips anymore\n\t\tforEach(cachedRecommendations, ({ key, value }) => {\n\t\t\tconst diff = (now - value) / milliSecondsInADay;\n\t\t\tif (diff <= 7 && allRecommendations.indexOf(key) > -1) {\n\t\t\t\tthis.fileBasedRecommendations.set(key.toLowerCase(), { recommendedTime: value });\n\t\t\t}\n\t\t});\n\n\t\tthis._register(this.modelService.onModelAdded(model => this.onModelAdded(model)));\n\t\tthis.modelService.getModels().forEach(model => this.onModelAdded(model));\n\t}\n\n\tprivate onModelAdded(model: ITextModel): void {\n\t\tconst uri = model.uri;\n\t\tconst supportedSchemes = [Schemas.untitled, Schemas.file, Schemas.vscodeRemote];\n\t\tif (!uri || !supportedSchemes.includes(uri.scheme)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.promptRecommendationsForModel(model);\n\t\tconst disposables = new DisposableStore();\n\t\tdisposables.add(model.onDidChangeLanguage(() => this.promptRecommendationsForModel(model)));\n\t\tdisposables.add(model.onWillDispose(() => disposables.dispose()));\n\t}\n\n\t/**\n\t * Prompt the user to either install the recommended extension for the file type in the current editor model\n\t * or prompt to search the marketplace if it has extensions that can support the file type\n\t */\n\tprivate promptRecommendationsForModel(model: ITextModel): void {\n\t\tconst uri = model.uri;\n\t\tconst language = model.getLanguageIdentifier().language;\n\t\tconst fileExtension = extname(uri).toLowerCase();\n\t\tif (this.processedLanguages.includes(language) && this.processedFileExtensions.includes(fileExtension)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.processedLanguages.push(language);\n\t\tthis.processedFileExtensions.push(fileExtension);\n\n\t\t// re-schedule this bit of the operation to be off the critical path - in case glob-match is slow\n\t\tsetImmediate(() => this.promptRecommendations(uri, language, fileExtension));\n\t}\n\n\tprivate async promptRecommendations(uri: URI, language: string, fileExtension: string): Promise<void> {\n\t\tconst importantRecommendations: string[] = (this.fileBasedRecommendationsByLanguage.get(language) || []).filter(extensionId => this.importantExtensionTips.has(extensionId));\n\t\tlet languageName: string | null = importantRecommendations.length ? this.modeService.getLanguageName(language) : null;\n\n\t\tconst fileBasedRecommendations: string[] = [...importantRecommendations];\n\t\tfor (let [pattern, extensionIds] of this.fileBasedRecommendationsByPattern) {\n\t\t\textensionIds = extensionIds.filter(extensionId => !importantRecommendations.includes(extensionId));\n\t\t\tif (!extensionIds.length) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (!match(pattern, uri.toString())) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfor (const extensionId of extensionIds) {\n\t\t\t\tfileBasedRecommendations.push(extensionId);\n\t\t\t\tconst importantExtensionTip = this.importantExtensionTips.get(extensionId);\n\t\t\t\tif (importantExtensionTip && importantExtensionTip.pattern === pattern) {\n\t\t\t\t\timportantRecommendations.push(extensionId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Update file based recommendations\n\t\tfor (const recommendation of fileBasedRecommendations) {\n\t\t\tconst filedBasedRecommendation = this.fileBasedRecommendations.get(recommendation) || { recommendedTime: Date.now(), sources: [] };\n\t\t\tfiledBasedRecommendation.recommendedTime = Date.now();\n\t\t\tthis.fileBasedRecommendations.set(recommendation, filedBasedRecommendation);\n\t\t}\n\n\t\tthis.storeCachedRecommendations();\n\n\t\tif (this.extensionRecommendationNotificationService.hasToIgnoreRecommendationNotifications()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst installed = await this.extensionsWorkbenchService.queryLocal();\n\t\tif (importantRecommendations.length &&\n\t\t\tawait this.promptRecommendedExtensionForFileType(languageName || basename(uri), language, importantRecommendations, installed)) {\n\t\t\treturn;\n\t\t}\n\n\t\tfileExtension = fileExtension.substr(1); // Strip the dot\n\t\tif (!fileExtension) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst mimeTypes = guessMimeTypes(uri);\n\t\tif (mimeTypes.length !== 1 || mimeTypes[0] !== MIME_UNKNOWN) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.promptRecommendedExtensionForFileExtension(fileExtension, installed);\n\t}\n\n\tprivate async promptRecommendedExtensionForFileType(name: string, language: string, recommendations: string[], installed: IExtension[]): Promise<boolean> {\n\n\t\trecommendations = this.filterIgnoredOrNotAllowed(recommendations);\n\t\tif (recommendations.length === 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\trecommendations = this.filterInstalled(recommendations, installed);\n\t\tif (recommendations.length === 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst extensionId = recommendations[0];\n\t\tconst entry = this.importantExtensionTips.get(extensionId);\n\t\tif (!entry) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst promptedRecommendations = this.getPromptedRecommendations();\n\t\tif (promptedRecommendations[language] && promptedRecommendations[language].includes(extensionId)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis.extensionRecommendationNotificationService.promptImportantExtensionsInstallNotification([extensionId], localize('reallyRecommended', \"Do you want to install the recommended extensions for {0}?\", name), `@id:${extensionId}`, RecommendationSource.FILE)\n\t\t\t.then(result => {\n\t\t\t\tif (result === RecommendationsNotificationResult.Accepted) {\n\t\t\t\t\tthis.addToPromptedRecommendations(language, [extensionId]);\n\t\t\t\t}\n\t\t\t});\n\t\treturn true;\n\t}\n\n\tprivate getPromptedRecommendations(): IStringDictionary<string[]> {\n\t\treturn JSON.parse(this.storageService.get(promptedRecommendationsStorageKey, StorageScope.GLOBAL, '{}'));\n\t}\n\n\tprivate addToPromptedRecommendations(exeName: string, extensions: string[]) {\n\t\tconst promptedRecommendations = this.getPromptedRecommendations();\n\t\tpromptedRecommendations[exeName] = extensions;\n\t\tthis.storageService.store(promptedRecommendationsStorageKey, JSON.stringify(promptedRecommendations), StorageScope.GLOBAL, StorageTarget.USER);\n\t}\n\n\tprivate getPromptedFileExtensions(): string[] {\n\t\treturn JSON.parse(this.storageService.get(promptedFileExtensionsStorageKey, StorageScope.GLOBAL, '[]'));\n\t}\n\n\tprivate addToPromptedFileExtensions(fileExtension: string) {\n\t\tconst promptedFileExtensions = this.getPromptedFileExtensions();\n\t\tpromptedFileExtensions.push(fileExtension);\n\t\tthis.storageService.store(promptedFileExtensionsStorageKey, JSON.stringify(distinct(promptedFileExtensions)), StorageScope.GLOBAL, StorageTarget.USER);\n\t}\n\n\tprivate async promptRecommendedExtensionForFileExtension(fileExtension: string, installed: IExtension[]): Promise<void> {\n\t\tconst fileExtensionSuggestionIgnoreList = <string[]>JSON.parse(this.storageService.get('extensionsAssistant/fileExtensionsSuggestionIgnore', StorageScope.GLOBAL, '[]'));\n\t\tif (fileExtensionSuggestionIgnoreList.indexOf(fileExtension) > -1) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst promptedFileExtensions = this.getPromptedFileExtensions();\n\t\tif (promptedFileExtensions.includes(fileExtension)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst text = `ext:${fileExtension}`;\n\t\tconst pager = await this.extensionsWorkbenchService.queryGallery({ text, pageSize: 100 }, CancellationToken.None);\n\t\tif (pager.firstPage.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst installedExtensionsIds = installed.reduce((result, i) => { result.add(i.identifier.id.toLowerCase()); return result; }, new Set<string>());\n\t\tif (pager.firstPage.some(e => installedExtensionsIds.has(e.identifier.id.toLowerCase()))) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.notificationService.prompt(\n\t\t\tSeverity.Info,\n\t\t\tlocalize('showLanguageExtensions', \"The Marketplace has extensions that can help with '.{0}' files\", fileExtension),\n\t\t\t[{\n\t\t\t\tlabel: searchMarketplace,\n\t\t\t\trun: () => {\n\t\t\t\t\tthis.addToPromptedFileExtensions(fileExtension);\n\t\t\t\t\tthis.telemetryService.publicLog2<{ userReaction: string, fileExtension: string }, FileExtensionSuggestionClassification>('fileExtensionSuggestion:popup', { userReaction: 'ok', fileExtension });\n\t\t\t\t\tthis.viewletService.openViewlet('workbench.view.extensions', true)\n\t\t\t\t\t\t.then(viewlet => viewlet?.getViewPaneContainer() as IExtensionsViewPaneContainer)\n\t\t\t\t\t\t.then(viewlet => {\n\t\t\t\t\t\t\tviewlet.search(`ext:${fileExtension}`);\n\t\t\t\t\t\t\tviewlet.focus();\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tlabel: localize('dontShowAgainExtension', \"Don't Show Again for '.{0}' files\", fileExtension),\n\t\t\t\trun: () => {\n\t\t\t\t\tfileExtensionSuggestionIgnoreList.push(fileExtension);\n\t\t\t\t\tthis.storageService.store(\n\t\t\t\t\t\t'extensionsAssistant/fileExtensionsSuggestionIgnore',\n\t\t\t\t\t\tJSON.stringify(fileExtensionSuggestionIgnoreList),\n\t\t\t\t\t\tStorageScope.GLOBAL,\n\t\t\t\t\t\tStorageTarget.USER);\n\t\t\t\t\tthis.telemetryService.publicLog2<{ userReaction: string, fileExtension: string }, FileExtensionSuggestionClassification>('fileExtensionSuggestion:popup', { userReaction: 'neverShowAgain', fileExtension });\n\t\t\t\t}\n\t\t\t}],\n\t\t\t{\n\t\t\t\tsticky: true,\n\t\t\t\tonCancel: () => {\n\t\t\t\t\tthis.telemetryService.publicLog2<{ userReaction: string, fileExtension: string }, FileExtensionSuggestionClassification>('fileExtensionSuggestion:popup', { userReaction: 'cancelled', fileExtension });\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate filterIgnoredOrNotAllowed(recommendationsToSuggest: string[]): string[] {\n\t\tconst ignoredRecommendations = [...this.extensionIgnoredRecommendationsService.ignoredRecommendations, ...this.extensionRecommendationNotificationService.ignoredRecommendations];\n\t\treturn recommendationsToSuggest.filter(id => !ignoredRecommendations.includes(id));\n\t}\n\n\tprivate filterInstalled(recommendationsToSuggest: string[], installed: IExtension[]): string[] {\n\t\tconst installedExtensionsIds = installed.reduce((result, i) => {\n\t\t\tif (i.enablementState !== EnablementState.DisabledByExtensionKind) {\n\t\t\t\tresult.add(i.identifier.id.toLowerCase());\n\t\t\t}\n\t\t\treturn result;\n\t\t}, new Set<string>());\n\t\treturn recommendationsToSuggest.filter(id => !installedExtensionsIds.has(id.toLowerCase()));\n\t}\n\n\tprivate getCachedRecommendations(): IStringDictionary<number> {\n\t\tlet storedRecommendations = JSON.parse(this.storageService.get(recommendationsStorageKey, StorageScope.GLOBAL, '[]'));\n\t\tif (Array.isArray(storedRecommendations)) {\n\t\t\tstoredRecommendations = storedRecommendations.reduce((result, id) => { result[id] = Date.now(); return result; }, <IStringDictionary<number>>{});\n\t\t}\n\t\tconst result: IStringDictionary<number> = {};\n\t\tforEach(storedRecommendations, ({ key, value }) => {\n\t\t\tif (typeof value === 'number') {\n\t\t\t\tresult[key.toLowerCase()] = value;\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t}\n\n\tprivate storeCachedRecommendations(): void {\n\t\tconst storedRecommendations: IStringDictionary<number> = {};\n\t\tthis.fileBasedRecommendations.forEach((value, key) => storedRecommendations[key] = value.recommendedTime);\n\t\tthis.storageService.store(recommendationsStorageKey, JSON.stringify(storedRecommendations), StorageScope.GLOBAL, StorageTarget.MACHINE);\n\t}\n}\n\n"]}