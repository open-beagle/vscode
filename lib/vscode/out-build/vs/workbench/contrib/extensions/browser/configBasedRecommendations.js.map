{"version":3,"sources":["vs/workbench/contrib/extensions/browser/configBasedRecommendations.ts"],"names":[],"mappings":"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","file":"configBasedRecommendations.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IExtensionTipsService, IConfigBasedExtensionTip } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { ExtensionRecommendations, ExtensionRecommendation } from 'vs/workbench/contrib/extensions/browser/extensionRecommendations';\nimport { localize } from 'vs/nls';\nimport { ExtensionRecommendationReason } from 'vs/workbench/services/extensionRecommendations/common/extensionRecommendations';\nimport { IWorkspaceContextService, IWorkspaceFoldersChangeEvent } from 'vs/platform/workspace/common/workspace';\nimport { Emitter } from 'vs/base/common/event';\n\nexport class ConfigBasedRecommendations extends ExtensionRecommendations {\n\n\tprivate importantTips: IConfigBasedExtensionTip[] = [];\n\tprivate otherTips: IConfigBasedExtensionTip[] = [];\n\n\tprivate _onDidChangeRecommendations = this._register(new Emitter<void>());\n\treadonly onDidChangeRecommendations = this._onDidChangeRecommendations.event;\n\n\tprivate _otherRecommendations: ExtensionRecommendation[] = [];\n\tget otherRecommendations(): ReadonlyArray<ExtensionRecommendation> { return this._otherRecommendations; }\n\n\tprivate _importantRecommendations: ExtensionRecommendation[] = [];\n\tget importantRecommendations(): ReadonlyArray<ExtensionRecommendation> { return this._importantRecommendations; }\n\n\tget recommendations(): ReadonlyArray<ExtensionRecommendation> { return [...this.importantRecommendations, ...this.otherRecommendations]; }\n\n\tconstructor(\n\t\t@IExtensionTipsService private readonly extensionTipsService: IExtensionTipsService,\n\t\t@IWorkspaceContextService private readonly workspaceContextService: IWorkspaceContextService,\n\t) {\n\t\tsuper();\n\t}\n\n\tprotected async doActivate(): Promise<void> {\n\t\tawait this.fetch();\n\t\tthis._register(this.workspaceContextService.onDidChangeWorkspaceFolders(e => this.onWorkspaceFoldersChanged(e)));\n\t}\n\n\tprivate async fetch(): Promise<void> {\n\t\tconst workspace = this.workspaceContextService.getWorkspace();\n\t\tconst importantTips: Map<string, IConfigBasedExtensionTip> = new Map<string, IConfigBasedExtensionTip>();\n\t\tconst otherTips: Map<string, IConfigBasedExtensionTip> = new Map<string, IConfigBasedExtensionTip>();\n\t\tfor (const folder of workspace.folders) {\n\t\t\tconst configBasedTips = await this.extensionTipsService.getConfigBasedTips(folder.uri);\n\t\t\tfor (const tip of configBasedTips) {\n\t\t\t\tif (tip.important) {\n\t\t\t\t\timportantTips.set(tip.extensionId, tip);\n\t\t\t\t} else {\n\t\t\t\t\totherTips.set(tip.extensionId, tip);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.importantTips = [...importantTips.values()];\n\t\tthis.otherTips = [...otherTips.values()].filter(tip => !importantTips.has(tip.extensionId));\n\t\tthis._otherRecommendations = this.otherTips.map(tip => this.toExtensionRecommendation(tip));\n\t\tthis._importantRecommendations = this.importantTips.map(tip => this.toExtensionRecommendation(tip));\n\t}\n\n\tprivate async onWorkspaceFoldersChanged(event: IWorkspaceFoldersChangeEvent): Promise<void> {\n\t\tif (event.added.length) {\n\t\t\tconst oldImportantRecommended = this.importantTips;\n\t\t\tawait this.fetch();\n\t\t\t// Suggest only if at least one of the newly added recommendations was not suggested before\n\t\t\tif (this.importantTips.some(current => oldImportantRecommended.every(old => current.extensionId !== old.extensionId))) {\n\t\t\t\tthis._onDidChangeRecommendations.fire();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate toExtensionRecommendation(tip: IConfigBasedExtensionTip): ExtensionRecommendation {\n\t\treturn {\n\t\t\textensionId: tip.extensionId,\n\t\t\treason: {\n\t\t\t\treasonId: ExtensionRecommendationReason.WorkspaceConfig,\n\t\t\t\treasonText: localize('exeBasedRecommendation', \"This extension is recommended because of the current workspace configuration\")\n\t\t\t}\n\t\t};\n\t}\n\n}\n"]}