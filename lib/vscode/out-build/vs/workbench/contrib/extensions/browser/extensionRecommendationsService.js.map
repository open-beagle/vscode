{"version":3,"file":"extensionRecommendationsService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/extensions/browser/extensionRecommendationsService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IExtensionManagementService, IExtensionGalleryService, InstallOperation, DidInstallExtensionEvent } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { IExtensionRecommendationsService, ExtensionRecommendationReason, IExtensionIgnoredRecommendationsService } from 'vs/workbench/services/extensionRecommendations/common/extensionRecommendations';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { distinct, shuffle } from 'vs/base/common/arrays';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { LifecyclePhase, ILifecycleService } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { DynamicWorkspaceRecommendations } from 'vs/workbench/contrib/extensions/browser/dynamicWorkspaceRecommendations';\nimport { ExeBasedRecommendations } from 'vs/workbench/contrib/extensions/browser/exeBasedRecommendations';\nimport { ExperimentalRecommendations } from 'vs/workbench/contrib/extensions/browser/experimentalRecommendations';\nimport { WorkspaceRecommendations } from 'vs/workbench/contrib/extensions/browser/workspaceRecommendations';\nimport { FileBasedRecommendations } from 'vs/workbench/contrib/extensions/browser/fileBasedRecommendations';\nimport { KeymapRecommendations } from 'vs/workbench/contrib/extensions/browser/keymapRecommendations';\nimport { ExtensionRecommendation } from 'vs/workbench/contrib/extensions/browser/extensionRecommendations';\nimport { ConfigBasedRecommendations } from 'vs/workbench/contrib/extensions/browser/configBasedRecommendations';\nimport { IExtensionRecommendationNotificationService } from 'vs/platform/extensionRecommendations/common/extensionRecommendations';\n\ntype IgnoreRecommendationClassification = {\n\trecommendationReason: { classification: 'SystemMetaData', purpose: 'FeatureInsight', isMeasurement: true };\n\textensionId: { classification: 'PublicNonPersonalData', purpose: 'FeatureInsight' };\n};\n\nexport class ExtensionRecommendationsService extends Disposable implements IExtensionRecommendationsService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\t// Recommendations\n\tprivate readonly fileBasedRecommendations: FileBasedRecommendations;\n\tprivate readonly workspaceRecommendations: WorkspaceRecommendations;\n\tprivate readonly experimentalRecommendations: ExperimentalRecommendations;\n\tprivate readonly configBasedRecommendations: ConfigBasedRecommendations;\n\tprivate readonly exeBasedRecommendations: ExeBasedRecommendations;\n\tprivate readonly dynamicWorkspaceRecommendations: DynamicWorkspaceRecommendations;\n\tprivate readonly keymapRecommendations: KeymapRecommendations;\n\n\tpublic readonly activationPromise: Promise<void>;\n\tprivate sessionSeed: number;\n\n\tprivate _onDidChangeRecommendations = this._register(new Emitter<void>());\n\treadonly onDidChangeRecommendations = this._onDidChangeRecommendations.event;\n\n\tconstructor(\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@ILifecycleService private readonly lifecycleService: ILifecycleService,\n\t\t@IExtensionGalleryService private readonly galleryService: IExtensionGalleryService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@IExtensionManagementService private readonly extensionManagementService: IExtensionManagementService,\n\t\t@IExtensionIgnoredRecommendationsService private readonly extensionRecommendationsManagementService: IExtensionIgnoredRecommendationsService,\n\t\t@IExtensionRecommendationNotificationService private readonly extensionRecommendationNotificationService: IExtensionRecommendationNotificationService,\n\t) {\n\t\tsuper();\n\n\t\tthis.workspaceRecommendations = instantiationService.createInstance(WorkspaceRecommendations);\n\t\tthis.fileBasedRecommendations = instantiationService.createInstance(FileBasedRecommendations);\n\t\tthis.experimentalRecommendations = instantiationService.createInstance(ExperimentalRecommendations);\n\t\tthis.configBasedRecommendations = instantiationService.createInstance(ConfigBasedRecommendations);\n\t\tthis.exeBasedRecommendations = instantiationService.createInstance(ExeBasedRecommendations);\n\t\tthis.dynamicWorkspaceRecommendations = instantiationService.createInstance(DynamicWorkspaceRecommendations);\n\t\tthis.keymapRecommendations = instantiationService.createInstance(KeymapRecommendations);\n\n\t\tif (!this.isEnabled()) {\n\t\t\tthis.sessionSeed = 0;\n\t\t\tthis.activationPromise = Promise.resolve();\n\t\t\treturn;\n\t\t}\n\n\t\tthis.sessionSeed = +new Date();\n\n\t\t// Activation\n\t\tthis.activationPromise = this.activate();\n\n\t\tthis._register(this.extensionManagementService.onDidInstallExtension(e => this.onDidInstallExtension(e)));\n\t}\n\n\tprivate async activate(): Promise<void> {\n\t\tawait this.lifecycleService.when(LifecyclePhase.Restored);\n\n\t\t// activate all recommendations\n\t\tawait Promise.all([\n\t\t\tthis.workspaceRecommendations.activate(),\n\t\t\tthis.fileBasedRecommendations.activate(),\n\t\t\tthis.experimentalRecommendations.activate(),\n\t\t\tthis.keymapRecommendations.activate(),\n\t\t]);\n\n\t\tthis._register(Event.any(this.workspaceRecommendations.onDidChangeRecommendations, this.configBasedRecommendations.onDidChangeRecommendations, this.extensionRecommendationsManagementService.onDidChangeIgnoredRecommendations)(() => this._onDidChangeRecommendations.fire()));\n\t\tthis._register(this.extensionRecommendationsManagementService.onDidChangeGlobalIgnoredRecommendation(({ extensionId, isRecommended }) => {\n\t\t\tif (!isRecommended) {\n\t\t\t\tconst reason = this.getAllRecommendationsWithReason()[extensionId];\n\t\t\t\tif (reason && reason.reasonId) {\n\t\t\t\t\tthis.telemetryService.publicLog2<{ extensionId: string, recommendationReason: ExtensionRecommendationReason }, IgnoreRecommendationClassification>('extensionsRecommendations:ignoreRecommendation', { extensionId, recommendationReason: reason.reasonId });\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tawait this.promptWorkspaceRecommendations();\n\t}\n\n\tprivate isEnabled(): boolean {\n\t\treturn this.galleryService.isEnabled() && !this.environmentService.isExtensionDevelopment;\n\t}\n\n\tprivate async activateProactiveRecommendations(): Promise<void> {\n\t\tawait Promise.all([this.dynamicWorkspaceRecommendations.activate(), this.exeBasedRecommendations.activate(), this.configBasedRecommendations.activate()]);\n\t}\n\n\tgetAllRecommendationsWithReason(): { [id: string]: { reasonId: ExtensionRecommendationReason, reasonText: string }; } {\n\t\t/* Activate proactive recommendations */\n\t\tthis.activateProactiveRecommendations();\n\n\t\tconst output: { [id: string]: { reasonId: ExtensionRecommendationReason, reasonText: string }; } = Object.create(null);\n\n\t\tconst allRecommendations = [\n\t\t\t...this.dynamicWorkspaceRecommendations.recommendations,\n\t\t\t...this.configBasedRecommendations.recommendations,\n\t\t\t...this.exeBasedRecommendations.recommendations,\n\t\t\t...this.experimentalRecommendations.recommendations,\n\t\t\t...this.fileBasedRecommendations.recommendations,\n\t\t\t...this.workspaceRecommendations.recommendations,\n\t\t\t...this.keymapRecommendations.recommendations,\n\t\t];\n\n\t\tfor (const { extensionId, reason } of allRecommendations) {\n\t\t\tif (this.isExtensionAllowedToBeRecommended(extensionId)) {\n\t\t\t\toutput[extensionId.toLowerCase()] = reason;\n\t\t\t}\n\t\t}\n\n\t\treturn output;\n\t}\n\n\tasync getConfigBasedRecommendations(): Promise<{ important: string[], others: string[] }> {\n\t\tawait this.configBasedRecommendations.activate();\n\t\treturn {\n\t\t\timportant: this.toExtensionRecommendations(this.configBasedRecommendations.importantRecommendations),\n\t\t\tothers: this.toExtensionRecommendations(this.configBasedRecommendations.otherRecommendations)\n\t\t};\n\t}\n\n\tasync getOtherRecommendations(): Promise<string[]> {\n\t\tawait this.activateProactiveRecommendations();\n\n\t\tconst recommendations = [\n\t\t\t...this.configBasedRecommendations.otherRecommendations,\n\t\t\t...this.exeBasedRecommendations.otherRecommendations,\n\t\t\t...this.dynamicWorkspaceRecommendations.recommendations,\n\t\t\t...this.experimentalRecommendations.recommendations\n\t\t];\n\n\t\tconst extensionIds = distinct(recommendations.map(e => e.extensionId))\n\t\t\t.filter(extensionId => this.isExtensionAllowedToBeRecommended(extensionId));\n\n\t\tshuffle(extensionIds, this.sessionSeed);\n\n\t\treturn extensionIds;\n\t}\n\n\tasync getImportantRecommendations(): Promise<string[]> {\n\t\tawait this.activateProactiveRecommendations();\n\n\t\tconst recommendations = [\n\t\t\t...this.fileBasedRecommendations.importantRecommendations,\n\t\t\t...this.configBasedRecommendations.importantRecommendations,\n\t\t\t...this.exeBasedRecommendations.importantRecommendations,\n\t\t];\n\n\t\tconst extensionIds = distinct(recommendations.map(e => e.extensionId))\n\t\t\t.filter(extensionId => this.isExtensionAllowedToBeRecommended(extensionId));\n\n\t\tshuffle(extensionIds, this.sessionSeed);\n\n\t\treturn extensionIds;\n\t}\n\n\tgetKeymapRecommendations(): string[] {\n\t\treturn this.toExtensionRecommendations(this.keymapRecommendations.recommendations);\n\t}\n\n\tasync getWorkspaceRecommendations(): Promise<string[]> {\n\t\tif (!this.isEnabled()) {\n\t\t\treturn [];\n\t\t}\n\t\tawait this.workspaceRecommendations.activate();\n\t\treturn this.toExtensionRecommendations(this.workspaceRecommendations.recommendations);\n\t}\n\n\tasync getExeBasedRecommendations(exe?: string): Promise<{ important: string[], others: string[] }> {\n\t\tawait this.exeBasedRecommendations.activate();\n\t\tconst { important, others } = exe ? this.exeBasedRecommendations.getRecommendations(exe)\n\t\t\t: { important: this.exeBasedRecommendations.importantRecommendations, others: this.exeBasedRecommendations.otherRecommendations };\n\t\treturn { important: this.toExtensionRecommendations(important), others: this.toExtensionRecommendations(others) };\n\t}\n\n\tgetFileBasedRecommendations(): string[] {\n\t\treturn this.toExtensionRecommendations(this.fileBasedRecommendations.recommendations);\n\t}\n\n\tprivate onDidInstallExtension(e: DidInstallExtensionEvent): void {\n\t\tif (e.gallery && e.operation === InstallOperation.Install) {\n\t\t\tconst extRecommendations = this.getAllRecommendationsWithReason() || {};\n\t\t\tconst recommendationReason = extRecommendations[e.gallery.identifier.id.toLowerCase()];\n\t\t\tif (recommendationReason) {\n\t\t\t\t/* __GDPR__\n\t\t\t\t\t\"extensionGallery:install:recommendations\" : {\n\t\t\t\t\t\t\"recommendationReason\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n\t\t\t\t\t\t\"${include}\": [\n\t\t\t\t\t\t\t\"${GalleryExtensionTelemetryData}\"\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t*/\n\t\t\t\tthis.telemetryService.publicLog('extensionGallery:install:recommendations', { ...e.gallery.telemetryData, recommendationReason: recommendationReason.reasonId });\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate toExtensionRecommendations(recommendations: ReadonlyArray<ExtensionRecommendation>): string[] {\n\t\tconst extensionIds = distinct(recommendations.map(e => e.extensionId))\n\t\t\t.filter(extensionId => this.isExtensionAllowedToBeRecommended(extensionId));\n\n\t\treturn extensionIds;\n\t}\n\n\tprivate isExtensionAllowedToBeRecommended(extensionId: string): boolean {\n\t\treturn !this.extensionRecommendationsManagementService.ignoredRecommendations.includes(extensionId.toLowerCase());\n\t}\n\n\tprivate async promptWorkspaceRecommendations(): Promise<void> {\n\t\tconst allowedRecommendations = [...this.workspaceRecommendations.recommendations, ...this.configBasedRecommendations.importantRecommendations]\n\t\t\t.map(({ extensionId }) => extensionId)\n\t\t\t.filter(extensionId => this.isExtensionAllowedToBeRecommended(extensionId));\n\n\t\tif (allowedRecommendations.length) {\n\t\t\tawait this.extensionRecommendationNotificationService.promptWorkspaceRecommendations(allowedRecommendations);\n\t\t}\n\t}\n\n\n\n}\n"]}