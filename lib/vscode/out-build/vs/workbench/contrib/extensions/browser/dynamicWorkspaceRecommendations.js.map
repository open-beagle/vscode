{"version":3,"sources":["vs/workbench/contrib/extensions/browser/dynamicWorkspaceRecommendations.ts"],"names":[],"mappings":"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","file":"dynamicWorkspaceRecommendations.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IExtensionTipsService } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { IWorkspaceContextService, WorkbenchState, IWorkspaceFolder } from 'vs/platform/workspace/common/workspace';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { isNonEmptyArray } from 'vs/base/common/arrays';\nimport { IWorkspaceTagsService } from 'vs/workbench/contrib/tags/common/workspaceTags';\nimport { isNumber } from 'vs/base/common/types';\nimport { ExtensionRecommendations, ExtensionRecommendation } from 'vs/workbench/contrib/extensions/browser/extensionRecommendations';\nimport { ExtensionRecommendationReason } from 'vs/workbench/services/extensionRecommendations/common/extensionRecommendations';\nimport { localize } from 'vs/nls';\n\ntype DynamicWorkspaceRecommendationsClassification = {\n\tcount: { classification: 'SystemMetaData', purpose: 'FeatureInsight', isMeasurement: true };\n\tcache: { classification: 'SystemMetaData', purpose: 'FeatureInsight', isMeasurement: true };\n};\n\ntype IStoredDynamicWorkspaceRecommendations = { recommendations: string[], timestamp: number };\nconst dynamicWorkspaceRecommendationsStorageKey = 'extensionsAssistant/dynamicWorkspaceRecommendations';\nconst milliSecondsInADay = 1000 * 60 * 60 * 24;\n\nexport class DynamicWorkspaceRecommendations extends ExtensionRecommendations {\n\n\tprivate _recommendations: ExtensionRecommendation[] = [];\n\tget recommendations(): ReadonlyArray<ExtensionRecommendation> { return this._recommendations; }\n\n\tconstructor(\n\t\t@IExtensionTipsService private readonly extensionTipsService: IExtensionTipsService,\n\t\t@IWorkspaceTagsService private readonly workspaceTagsService: IWorkspaceTagsService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t) {\n\t\tsuper();\n\t}\n\n\tprotected async doActivate(): Promise<void> {\n\t\tawait this.fetch();\n\t\tthis._register(this.contextService.onDidChangeWorkbenchState(() => this._recommendations = []));\n\t}\n\n\t/**\n\t * Fetch extensions used by others on the same workspace as recommendations\n\t */\n\tprivate async fetch(): Promise<void> {\n\t\tthis._register(this.contextService.onDidChangeWorkbenchState(() => this._recommendations = []));\n\n\t\tif (this._recommendations.length\n\t\t\t|| this.contextService.getWorkbenchState() !== WorkbenchState.FOLDER\n\t\t\t|| !this.fileService.canHandleResource(this.contextService.getWorkspace().folders[0].uri)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst folder = this.contextService.getWorkspace().folders[0];\n\t\tconst cachedDynamicWorkspaceRecommendations = this.getCachedDynamicWorkspaceRecommendations();\n\t\tif (cachedDynamicWorkspaceRecommendations) {\n\t\t\tthis._recommendations = cachedDynamicWorkspaceRecommendations.map(id => this.toExtensionRecommendation(id, folder));\n\t\t\tthis.telemetryService.publicLog2<{ count: number, cache: number }, DynamicWorkspaceRecommendationsClassification>('dynamicWorkspaceRecommendations', { count: this._recommendations.length, cache: 1 });\n\t\t\treturn;\n\t\t}\n\n\t\tconst [hashedRemotes1, hashedRemotes2] = await Promise.all([this.workspaceTagsService.getHashedRemotesFromUri(folder.uri, false), this.workspaceTagsService.getHashedRemotesFromUri(folder.uri, true)]);\n\t\tconst hashedRemotes = (hashedRemotes1 || []).concat(hashedRemotes2 || []);\n\t\tif (!hashedRemotes.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst workspacesTips = await this.extensionTipsService.getAllWorkspacesTips();\n\t\tif (!workspacesTips.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const hashedRemote of hashedRemotes) {\n\t\t\tconst workspaceTip = workspacesTips.filter(workspaceTip => isNonEmptyArray(workspaceTip.remoteSet) && workspaceTip.remoteSet.indexOf(hashedRemote) > -1)[0];\n\t\t\tif (workspaceTip) {\n\t\t\t\tthis._recommendations = workspaceTip.recommendations.map(id => this.toExtensionRecommendation(id, folder));\n\t\t\t\tthis.storageService.store(dynamicWorkspaceRecommendationsStorageKey, JSON.stringify(<IStoredDynamicWorkspaceRecommendations>{ recommendations: workspaceTip.recommendations, timestamp: Date.now() }), StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\t\t\tthis.telemetryService.publicLog2<{ count: number, cache: number }, DynamicWorkspaceRecommendationsClassification>('dynamicWorkspaceRecommendations', { count: this._recommendations.length, cache: 0 });\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate getCachedDynamicWorkspaceRecommendations(): string[] | undefined {\n\t\ttry {\n\t\t\tconst storedDynamicWorkspaceRecommendations: IStoredDynamicWorkspaceRecommendations = JSON.parse(this.storageService.get(dynamicWorkspaceRecommendationsStorageKey, StorageScope.WORKSPACE, '{}'));\n\t\t\tif (isNonEmptyArray(storedDynamicWorkspaceRecommendations.recommendations)\n\t\t\t\t&& isNumber(storedDynamicWorkspaceRecommendations.timestamp)\n\t\t\t\t&& storedDynamicWorkspaceRecommendations.timestamp > 0\n\t\t\t\t&& (Date.now() - storedDynamicWorkspaceRecommendations.timestamp) / milliSecondsInADay < 14) {\n\t\t\t\treturn storedDynamicWorkspaceRecommendations.recommendations;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthis.storageService.remove(dynamicWorkspaceRecommendationsStorageKey, StorageScope.WORKSPACE);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate toExtensionRecommendation(extensionId: string, folder: IWorkspaceFolder): ExtensionRecommendation {\n\t\treturn {\n\t\t\textensionId: extensionId.toLowerCase(),\n\t\t\treason: {\n\t\t\t\treasonId: ExtensionRecommendationReason.DynamicWorkspace,\n\t\t\t\treasonText: localize('dynamicWorkspaceRecommendation', \"This extension may interest you because it's popular among users of the {0} repository.\", folder.name)\n\t\t\t}\n\t\t};\n\t}\n}\n\n"]}