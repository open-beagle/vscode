{"version":3,"sources":["vs/workbench/contrib/extensions/browser/extensionRecommendationNotificationService.ts"],"names":[],"mappings":"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","file":"extensionRecommendationNotificationService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IAction } from 'vs/base/common/actions';\nimport { distinct } from 'vs/base/common/arrays';\nimport { CancelablePromise, createCancelablePromise, Promises, raceCancellablePromises, raceCancellation, timeout } from 'vs/base/common/async';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { isPromiseCanceledError } from 'vs/base/common/errors';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { DisposableStore, MutableDisposable } from 'vs/base/common/lifecycle';\nimport { localize } from 'vs/nls';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { areSameExtensions } from 'vs/platform/extensionManagement/common/extensionManagementUtil';\nimport { IExtensionRecommendationNotificationService, RecommendationsNotificationResult, RecommendationSource, RecommendationSourceToString } from 'vs/platform/extensionRecommendations/common/extensionRecommendations';\nimport { IInstantiationService, optional } from 'vs/platform/instantiation/common/instantiation';\nimport { INotificationHandle, INotificationService, IPromptChoice, IPromptChoiceWithMenu, Severity } from 'vs/platform/notification/common/notification';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IUserDataAutoSyncEnablementService, IUserDataSyncResourceEnablementService, SyncResource } from 'vs/platform/userDataSync/common/userDataSync';\nimport { SearchExtensionsAction } from 'vs/workbench/contrib/extensions/browser/extensionsActions';\nimport { IExtension, IExtensionsWorkbenchService } from 'vs/workbench/contrib/extensions/common/extensions';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { ITASExperimentService } from 'vs/workbench/services/experiment/common/experimentService';\nimport { EnablementState, IWorkbenchExtensionManagementService, IWorkbenchExtensionEnablementService } from 'vs/workbench/services/extensionManagement/common/extensionManagement';\nimport { IExtensionIgnoredRecommendationsService } from 'vs/workbench/services/extensionRecommendations/common/extensionRecommendations';\n\ntype ExtensionRecommendationsNotificationClassification = {\n\tuserReaction: { classification: 'SystemMetaData', purpose: 'FeatureInsight' };\n\textensionId?: { classification: 'PublicNonPersonalData', purpose: 'FeatureInsight' };\n\tsource: { classification: 'SystemMetaData', purpose: 'FeatureInsight' };\n};\n\ntype ExtensionWorkspaceRecommendationsNotificationClassification = {\n\tuserReaction: { classification: 'SystemMetaData', purpose: 'FeatureInsight' };\n};\n\nconst ignoreImportantExtensionRecommendationStorageKey = 'extensionsAssistant/importantRecommendationsIgnore';\nconst donotShowWorkspaceRecommendationsStorageKey = 'extensionsAssistant/workspaceRecommendationsIgnore';\nconst choiceNever = localize('neverShowAgain', \"Don't Show Again\");\n\ntype RecommendationsNotificationActions = {\n\tonDidInstallRecommendedExtensions(extensions: IExtension[]): void;\n\tonDidShowRecommendedExtensions(extensions: IExtension[]): void;\n\tonDidCancelRecommendedExtensions(extensions: IExtension[]): void;\n\tonDidNeverShowRecommendedExtensionsAgain(extensions: IExtension[]): void;\n};\n\nclass RecommendationsNotification {\n\n\tprivate _onDidClose = new Emitter<void>();\n\treadonly onDidClose = this._onDidClose.event;\n\n\tprivate _onDidChangeVisibility = new Emitter<boolean>();\n\treadonly onDidChangeVisibility = this._onDidChangeVisibility.event;\n\n\tprivate notificationHandle: INotificationHandle | undefined;\n\tprivate cancelled: boolean = false;\n\n\tconstructor(\n\t\tprivate readonly severity: Severity,\n\t\tprivate readonly message: string,\n\t\tprivate readonly choices: IPromptChoice[],\n\t\tprivate readonly notificationService: INotificationService\n\t) { }\n\n\tshow(): void {\n\t\tif (!this.notificationHandle) {\n\t\t\tthis.updateNotificationHandle(this.notificationService.prompt(this.severity, this.message, this.choices, { sticky: true, onCancel: () => this.cancelled = true }));\n\t\t}\n\t}\n\n\thide(): void {\n\t\tif (this.notificationHandle) {\n\t\t\tthis.onDidCloseDisposable.clear();\n\t\t\tthis.notificationHandle.close();\n\t\t\tthis.cancelled = false;\n\t\t\tthis.updateNotificationHandle(this.notificationService.prompt(this.severity, this.message, this.choices, { silent: true, sticky: false, onCancel: () => this.cancelled = true }));\n\t\t}\n\t}\n\n\tisCancelled(): boolean {\n\t\treturn this.cancelled;\n\t}\n\n\tprivate onDidCloseDisposable = new MutableDisposable();\n\tprivate onDidChangeVisibilityDisposable = new MutableDisposable();\n\tprivate updateNotificationHandle(notificationHandle: INotificationHandle) {\n\t\tthis.onDidCloseDisposable.clear();\n\t\tthis.onDidChangeVisibilityDisposable.clear();\n\t\tthis.notificationHandle = notificationHandle;\n\n\t\tthis.onDidCloseDisposable.value = this.notificationHandle.onDidClose(() => {\n\t\t\tthis.onDidCloseDisposable.dispose();\n\t\t\tthis.onDidChangeVisibilityDisposable.dispose();\n\n\t\t\tthis._onDidClose.fire();\n\n\t\t\tthis._onDidClose.dispose();\n\t\t\tthis._onDidChangeVisibility.dispose();\n\t\t});\n\t\tthis.onDidChangeVisibilityDisposable.value = this.notificationHandle.onDidChangeVisibility((e) => this._onDidChangeVisibility.fire(e));\n\t}\n}\n\ntype PendingRecommendationsNotification = { recommendationsNotification: RecommendationsNotification, source: RecommendationSource, token: CancellationToken };\ntype VisibleRecommendationsNotification = { recommendationsNotification: RecommendationsNotification, source: RecommendationSource, from: number };\n\nexport class ExtensionRecommendationNotificationService implements IExtensionRecommendationNotificationService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly tasExperimentService: ITASExperimentService | undefined;\n\n\t// Ignored Important Recommendations\n\tget ignoredRecommendations(): string[] {\n\t\treturn distinct([...(<string[]>JSON.parse(this.storageService.get(ignoreImportantExtensionRecommendationStorageKey, StorageScope.GLOBAL, '[]')))].map(i => i.toLowerCase()));\n\t}\n\n\tprivate recommendedExtensions: string[] = [];\n\tprivate recommendationSources: RecommendationSource[] = [];\n\n\tprivate hideVisibleNotificationPromise: CancelablePromise<void> | undefined;\n\tprivate visibleNotification: VisibleRecommendationsNotification | undefined;\n\tprivate pendingNotificaitons: PendingRecommendationsNotification[] = [];\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IExtensionsWorkbenchService private readonly extensionsWorkbenchService: IExtensionsWorkbenchService,\n\t\t@IWorkbenchExtensionManagementService private readonly extensionManagementService: IWorkbenchExtensionManagementService,\n\t\t@IWorkbenchExtensionEnablementService private readonly extensionEnablementService: IWorkbenchExtensionEnablementService,\n\t\t@IExtensionIgnoredRecommendationsService private readonly extensionIgnoredRecommendationsService: IExtensionIgnoredRecommendationsService,\n\t\t@IUserDataAutoSyncEnablementService private readonly userDataAutoSyncEnablementService: IUserDataAutoSyncEnablementService,\n\t\t@IUserDataSyncResourceEnablementService private readonly userDataSyncResourceEnablementService: IUserDataSyncResourceEnablementService,\n\t\t@IWorkbenchEnvironmentService private readonly workbenchEnvironmentService: IWorkbenchEnvironmentService,\n\t\t@optional(ITASExperimentService) tasExperimentService: ITASExperimentService,\n\t) {\n\t\tthis.tasExperimentService = tasExperimentService;\n\t}\n\n\thasToIgnoreRecommendationNotifications(): boolean {\n\t\tconst config = this.configurationService.getValue<{ ignoreRecommendations: boolean, showRecommendationsOnlyOnDemand?: boolean }>('extensions');\n\t\treturn config.ignoreRecommendations || !!config.showRecommendationsOnlyOnDemand;\n\t}\n\n\tasync promptImportantExtensionsInstallNotification(extensionIds: string[], message: string, searchValue: string, source: RecommendationSource): Promise<RecommendationsNotificationResult> {\n\t\tconst ignoredRecommendations = [...this.extensionIgnoredRecommendationsService.ignoredRecommendations, ...this.ignoredRecommendations];\n\t\textensionIds = extensionIds.filter(id => !ignoredRecommendations.includes(id));\n\t\tif (!extensionIds.length) {\n\t\t\treturn RecommendationsNotificationResult.Ignored;\n\t\t}\n\n\t\treturn this.promptRecommendationsNotification(extensionIds, message, searchValue, source, {\n\t\t\tonDidInstallRecommendedExtensions: (extensions: IExtension[]) => extensions.forEach(extension => this.telemetryService.publicLog2<{ userReaction: string, extensionId: string, source: string }, ExtensionRecommendationsNotificationClassification>('extensionRecommendations:popup', { userReaction: 'install', extensionId: extension.identifier.id, source: RecommendationSourceToString(source) })),\n\t\t\tonDidShowRecommendedExtensions: (extensions: IExtension[]) => extensions.forEach(extension => this.telemetryService.publicLog2<{ userReaction: string, extensionId: string, source: string }, ExtensionRecommendationsNotificationClassification>('extensionRecommendations:popup', { userReaction: 'show', extensionId: extension.identifier.id, source: RecommendationSourceToString(source) })),\n\t\t\tonDidCancelRecommendedExtensions: (extensions: IExtension[]) => extensions.forEach(extension => this.telemetryService.publicLog2<{ userReaction: string, extensionId: string, source: string }, ExtensionRecommendationsNotificationClassification>('extensionRecommendations:popup', { userReaction: 'cancelled', extensionId: extension.identifier.id, source: RecommendationSourceToString(source) })),\n\t\t\tonDidNeverShowRecommendedExtensionsAgain: (extensions: IExtension[]) => {\n\t\t\t\tfor (const extension of extensions) {\n\t\t\t\t\tthis.addToImportantRecommendationsIgnore(extension.identifier.id);\n\t\t\t\t\tthis.telemetryService.publicLog2<{ userReaction: string, extensionId: string, source: string }, ExtensionRecommendationsNotificationClassification>('extensionRecommendations:popup', { userReaction: 'neverShowAgain', extensionId: extension.identifier.id, source: RecommendationSourceToString(source) });\n\t\t\t\t}\n\t\t\t\tthis.notificationService.prompt(\n\t\t\t\t\tSeverity.Info,\n\t\t\t\t\tlocalize('ignoreExtensionRecommendations', \"Do you want to ignore all extension recommendations?\"),\n\t\t\t\t\t[{\n\t\t\t\t\t\tlabel: localize('ignoreAll', \"Yes, Ignore All\"),\n\t\t\t\t\t\trun: () => this.setIgnoreRecommendationsConfig(true)\n\t\t\t\t\t}, {\n\t\t\t\t\t\tlabel: localize('no', \"No\"),\n\t\t\t\t\t\trun: () => this.setIgnoreRecommendationsConfig(false)\n\t\t\t\t\t}]\n\t\t\t\t);\n\t\t\t},\n\t\t});\n\t}\n\n\tasync promptWorkspaceRecommendations(recommendations: string[]): Promise<void> {\n\t\tif (this.storageService.getBoolean(donotShowWorkspaceRecommendationsStorageKey, StorageScope.WORKSPACE, false)) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet installed = await this.extensionManagementService.getInstalled();\n\t\tinstalled = installed.filter(l => this.extensionEnablementService.getEnablementState(l) !== EnablementState.DisabledByExtensionKind); // Filter extensions disabled by kind\n\t\trecommendations = recommendations.filter(extensionId => installed.every(local => !areSameExtensions({ id: extensionId }, local.identifier)));\n\t\tif (!recommendations.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst result = await this.promptRecommendationsNotification(recommendations, localize('workspaceRecommended', \"Do you want to install the recommended extensions for this repository?\"), '@recommended ', RecommendationSource.WORKSPACE, {\n\t\t\tonDidInstallRecommendedExtensions: () => this.telemetryService.publicLog2<{ userReaction: string }, ExtensionWorkspaceRecommendationsNotificationClassification>('extensionWorkspaceRecommendations:popup', { userReaction: 'install' }),\n\t\t\tonDidShowRecommendedExtensions: () => this.telemetryService.publicLog2<{ userReaction: string }, ExtensionWorkspaceRecommendationsNotificationClassification>('extensionWorkspaceRecommendations:popup', { userReaction: 'show' }),\n\t\t\tonDidCancelRecommendedExtensions: () => this.telemetryService.publicLog2<{ userReaction: string }, ExtensionWorkspaceRecommendationsNotificationClassification>('extensionWorkspaceRecommendations:popup', { userReaction: 'cancelled' }),\n\t\t\tonDidNeverShowRecommendedExtensionsAgain: () => this.telemetryService.publicLog2<{ userReaction: string }, ExtensionWorkspaceRecommendationsNotificationClassification>('extensionWorkspaceRecommendations:popup', { userReaction: 'neverShowAgain' }),\n\t\t});\n\n\t\tif (result === RecommendationsNotificationResult.Accepted) {\n\t\t\tthis.storageService.store(donotShowWorkspaceRecommendationsStorageKey, true, StorageScope.WORKSPACE, StorageTarget.USER);\n\t\t}\n\n\t}\n\n\tprivate async promptRecommendationsNotification(extensionIds: string[], message: string, searchValue: string, source: RecommendationSource, recommendationsNotificationActions: RecommendationsNotificationActions): Promise<RecommendationsNotificationResult> {\n\n\t\tif (this.hasToIgnoreRecommendationNotifications()) {\n\t\t\treturn RecommendationsNotificationResult.Ignored;\n\t\t}\n\n\t\t// Do not show exe based recommendations in remote window\n\t\tif (source === RecommendationSource.EXE && this.workbenchEnvironmentService.remoteAuthority) {\n\t\t\treturn RecommendationsNotificationResult.IncompatibleWindow;\n\t\t}\n\n\t\t// Ignore exe recommendation if the window\n\t\t// \t\t=> has shown an exe based recommendation already\n\t\t// \t\t=> or has shown any two recommendations already\n\t\tif (source === RecommendationSource.EXE && (this.recommendationSources.includes(RecommendationSource.EXE) || this.recommendationSources.length >= 2)) {\n\t\t\treturn RecommendationsNotificationResult.TooMany;\n\t\t}\n\n\t\tthis.recommendationSources.push(source);\n\n\t\t// Ignore exe recommendation if recommendations are already shown\n\t\tif (source === RecommendationSource.EXE && extensionIds.every(id => this.recommendedExtensions.includes(id))) {\n\t\t\treturn RecommendationsNotificationResult.Ignored;\n\t\t}\n\n\t\tconst extensions = await this.getInstallableExtensions(extensionIds);\n\t\tif (!extensions.length) {\n\t\t\treturn RecommendationsNotificationResult.Ignored;\n\t\t}\n\n\t\tif (this.tasExperimentService && extensionIds.indexOf('ms-vscode-remote.remote-wsl') !== -1) {\n\t\t\tawait this.tasExperimentService.getTreatment<boolean>('wslpopupaa');\n\t\t}\n\n\t\tthis.recommendedExtensions = distinct([...this.recommendedExtensions, ...extensionIds]);\n\n\t\treturn raceCancellablePromises([\n\t\t\tthis.showRecommendationsNotification(extensions, message, searchValue, source, recommendationsNotificationActions),\n\t\t\tthis.waitUntilRecommendationsAreInstalled(extensions)\n\t\t]);\n\n\t}\n\n\tprivate showRecommendationsNotification(extensions: IExtension[], message: string, searchValue: string, source: RecommendationSource,\n\t\t{ onDidInstallRecommendedExtensions, onDidShowRecommendedExtensions, onDidCancelRecommendedExtensions, onDidNeverShowRecommendedExtensionsAgain }: RecommendationsNotificationActions): CancelablePromise<RecommendationsNotificationResult> {\n\t\treturn createCancelablePromise<RecommendationsNotificationResult>(async token => {\n\t\t\tlet accepted = false;\n\t\t\tconst choices: (IPromptChoice | IPromptChoiceWithMenu)[] = [];\n\t\t\tconst installExtensions = async (isMachineScoped?: boolean) => {\n\t\t\t\tthis.runAction(this.instantiationService.createInstance(SearchExtensionsAction, searchValue));\n\t\t\t\tonDidInstallRecommendedExtensions(extensions);\n\t\t\t\tawait Promises.settled([\n\t\t\t\t\tPromises.settled(extensions.map(extension => this.extensionsWorkbenchService.open(extension, { pinned: true }))),\n\t\t\t\t\tthis.extensionManagementService.installExtensions(extensions.map(e => e.gallery!), { isMachineScoped })\n\t\t\t\t]);\n\t\t\t};\n\t\t\tchoices.push({\n\t\t\t\tlabel: localize('install', \"Install\"),\n\t\t\t\trun: () => installExtensions(),\n\t\t\t\tmenu: this.userDataAutoSyncEnablementService.isEnabled() && this.userDataSyncResourceEnablementService.isResourceEnabled(SyncResource.Extensions) ? [{\n\t\t\t\t\tlabel: localize('install and do no sync', \"Install (Do not sync)\"),\n\t\t\t\t\trun: () => installExtensions(true)\n\t\t\t\t}] : undefined,\n\t\t\t});\n\t\t\tchoices.push(...[{\n\t\t\t\tlabel: localize('show recommendations', \"Show Recommendations\"),\n\t\t\t\trun: async () => {\n\t\t\t\t\tonDidShowRecommendedExtensions(extensions);\n\t\t\t\t\tfor (const extension of extensions) {\n\t\t\t\t\t\tthis.extensionsWorkbenchService.open(extension, { pinned: true });\n\t\t\t\t\t}\n\t\t\t\t\tthis.runAction(this.instantiationService.createInstance(SearchExtensionsAction, searchValue));\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tlabel: choiceNever,\n\t\t\t\tisSecondary: true,\n\t\t\t\trun: () => {\n\t\t\t\t\tonDidNeverShowRecommendedExtensionsAgain(extensions);\n\t\t\t\t}\n\t\t\t}]);\n\t\t\ttry {\n\t\t\t\taccepted = await this.doShowRecommendationsNotification(Severity.Info, message, choices, source, token);\n\t\t\t} catch (error) {\n\t\t\t\tif (!isPromiseCanceledError(error)) {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (accepted) {\n\t\t\t\treturn RecommendationsNotificationResult.Accepted;\n\t\t\t} else {\n\t\t\t\tonDidCancelRecommendedExtensions(extensions);\n\t\t\t\treturn RecommendationsNotificationResult.Cancelled;\n\t\t\t}\n\n\t\t});\n\t}\n\n\tprivate waitUntilRecommendationsAreInstalled(extensions: IExtension[]): CancelablePromise<RecommendationsNotificationResult.Accepted> {\n\t\tconst installedExtensions: string[] = [];\n\t\tconst disposables = new DisposableStore();\n\t\treturn createCancelablePromise(async token => {\n\t\t\tdisposables.add(token.onCancellationRequested(e => disposables.dispose()));\n\t\t\treturn new Promise<RecommendationsNotificationResult.Accepted>((c, e) => {\n\t\t\t\tdisposables.add(this.extensionManagementService.onInstallExtension(e => {\n\t\t\t\t\tinstalledExtensions.push(e.identifier.id.toLowerCase());\n\t\t\t\t\tif (extensions.every(e => installedExtensions.includes(e.identifier.id.toLowerCase()))) {\n\t\t\t\t\t\tc(RecommendationsNotificationResult.Accepted);\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Show recommendations in Queue\n\t * At any time only one recommendation is shown\n\t * If a new recommendation comes in\n\t * \t\t=> If no recommendation is visible, show it immediately\n\t *\t\t=> Otherwise, add to the pending queue\n\t * \t\t\t=> If it is not exe based and has higher or same priority as current, hide the current notification after showing it for 3s.\n\t * \t\t\t=> Otherwise wait until the current notification is hidden.\n\t */\n\tprivate async doShowRecommendationsNotification(severity: Severity, message: string, choices: IPromptChoice[], source: RecommendationSource, token: CancellationToken): Promise<boolean> {\n\t\tconst disposables = new DisposableStore();\n\t\ttry {\n\t\t\tconst recommendationsNotification = new RecommendationsNotification(severity, message, choices, this.notificationService);\n\t\t\tEvent.once(Event.filter(recommendationsNotification.onDidChangeVisibility, e => !e))(() => this.showNextNotification());\n\t\t\tif (this.visibleNotification) {\n\t\t\t\tconst index = this.pendingNotificaitons.length;\n\t\t\t\ttoken.onCancellationRequested(() => this.pendingNotificaitons.splice(index, 1), disposables);\n\t\t\t\tthis.pendingNotificaitons.push({ recommendationsNotification, source, token });\n\t\t\t\tif (source !== RecommendationSource.EXE && source <= this.visibleNotification!.source) {\n\t\t\t\t\tthis.hideVisibleNotification(3000);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.visibleNotification = { recommendationsNotification, source, from: Date.now() };\n\t\t\t\trecommendationsNotification.show();\n\t\t\t}\n\t\t\tawait raceCancellation(Event.toPromise(recommendationsNotification.onDidClose), token);\n\t\t\treturn !recommendationsNotification.isCancelled();\n\t\t} finally {\n\t\t\tdisposables.dispose();\n\t\t}\n\t}\n\n\tprivate showNextNotification(): void {\n\t\tconst index = this.getNextPendingNotificationIndex();\n\t\tconst [nextNotificaiton] = index > -1 ? this.pendingNotificaitons.splice(index, 1) : [];\n\n\t\t// Show the next notification after a delay of 500ms (after the current notification is dismissed)\n\t\ttimeout(nextNotificaiton ? 500 : 0)\n\t\t\t.then(() => {\n\t\t\t\tthis.unsetVisibileNotification();\n\t\t\t\tif (nextNotificaiton) {\n\t\t\t\t\tthis.visibleNotification = { recommendationsNotification: nextNotificaiton.recommendationsNotification, source: nextNotificaiton.source, from: Date.now() };\n\t\t\t\t\tnextNotificaiton.recommendationsNotification.show();\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\t/**\n\t * Return the recent high priroity pending notification\n\t */\n\tprivate getNextPendingNotificationIndex(): number {\n\t\tlet index = this.pendingNotificaitons.length - 1;\n\t\tif (this.pendingNotificaitons.length) {\n\t\t\tfor (let i = 0; i < this.pendingNotificaitons.length; i++) {\n\t\t\t\tif (this.pendingNotificaitons[i].source <= this.pendingNotificaitons[index].source) {\n\t\t\t\t\tindex = i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn index;\n\t}\n\n\tprivate hideVisibleNotification(timeInMillis: number): void {\n\t\tif (this.visibleNotification && !this.hideVisibleNotificationPromise) {\n\t\t\tconst visibleNotification = this.visibleNotification;\n\t\t\tthis.hideVisibleNotificationPromise = timeout(Math.max(timeInMillis - (Date.now() - visibleNotification.from), 0));\n\t\t\tthis.hideVisibleNotificationPromise.then(() => visibleNotification!.recommendationsNotification.hide());\n\t\t}\n\t}\n\n\tprivate unsetVisibileNotification(): void {\n\t\tthis.hideVisibleNotificationPromise?.cancel();\n\t\tthis.hideVisibleNotificationPromise = undefined;\n\t\tthis.visibleNotification = undefined;\n\t}\n\n\tprivate async getInstallableExtensions(extensionIds: string[]): Promise<IExtension[]> {\n\t\tconst extensions: IExtension[] = [];\n\t\tif (extensionIds.length) {\n\t\t\tconst pager = await this.extensionsWorkbenchService.queryGallery({ names: extensionIds, pageSize: extensionIds.length, source: 'install-recommendations' }, CancellationToken.None);\n\t\t\tfor (const extension of pager.firstPage) {\n\t\t\t\tif (extension.gallery && (await this.extensionManagementService.canInstall(extension.gallery))) {\n\t\t\t\t\textensions.push(extension);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn extensions;\n\t}\n\n\tprivate async runAction(action: IAction): Promise<void> {\n\t\ttry {\n\t\t\tawait action.run();\n\t\t} finally {\n\t\t\taction.dispose();\n\t\t}\n\t}\n\n\tprivate addToImportantRecommendationsIgnore(id: string) {\n\t\tconst importantRecommendationsIgnoreList = [...this.ignoredRecommendations];\n\t\tif (!importantRecommendationsIgnoreList.includes(id.toLowerCase())) {\n\t\t\timportantRecommendationsIgnoreList.push(id.toLowerCase());\n\t\t\tthis.storageService.store(ignoreImportantExtensionRecommendationStorageKey, JSON.stringify(importantRecommendationsIgnoreList), StorageScope.GLOBAL, StorageTarget.USER);\n\t\t}\n\t}\n\n\tprivate setIgnoreRecommendationsConfig(configVal: boolean) {\n\t\tthis.configurationService.updateValue('extensions.ignoreRecommendations', configVal);\n\t}\n}\n"]}