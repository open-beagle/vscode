{"version":3,"sources":["vs/workbench/contrib/extensions/browser/extensionsActivationProgress.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAUhG,IAAa,2BAA2B,GAAxC,MAAa,2BAA2B;QAIvC,YACoB,gBAAmC,EACpC,eAAiC,EACtC,UAAuB;YAGpC,MAAM,OAAO,GAAG;gBACf,QAAQ,iBAAyB;gBACjC,KAAK,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAY,EAAE,IAA0B,CAAC;aACzD,CAAC;YAEF,IAAI,CAAC,SAAS,GAAG,gBAAgB,CAAC,qBAAqB,CAAC,CAAC,CAAC,EAAE;gBAC3D,UAAU,CAAC,KAAK,CAAC,yBAAyB,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;gBACrD,eAAe,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,UAAU,EAAE,CAAA,GAAA,eAAO,CAAA,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YACzF,CAAC,CAAC,CAAC;QACJ,CAAC;QAED,OAAO;YACN,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;QAC1B,CAAC;KACD,CAAA;IAxBY,2BAA2B;QAKrC,WAAA,8BAAiB,CAAA;QACjB,WAAA,2BAAgB,CAAA;QAChB,WAAA,iBAAW,CAAA;OAPD,2BAA2B,CAwBvC;IAxBY,kEAA2B","file":"extensionsActivationProgress.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { IProgressService, ProgressLocation } from 'vs/platform/progress/common/progress';\nimport { localize } from 'vs/nls';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { timeout } from 'vs/base/common/async';\nimport { ILogService } from 'vs/platform/log/common/log';\n\nexport class ExtensionActivationProgress implements IWorkbenchContribution {\n\n\tprivate readonly _listener: IDisposable;\n\n\tconstructor(\n\t\t@IExtensionService extensionService: IExtensionService,\n\t\t@IProgressService progressService: IProgressService,\n\t\t@ILogService logService: ILogService,\n\t) {\n\n\t\tconst options = {\n\t\t\tlocation: ProgressLocation.Window,\n\t\t\ttitle: localize('activation', \"Activating Extensions...\")\n\t\t};\n\n\t\tthis._listener = extensionService.onWillActivateByEvent(e => {\n\t\t\tlogService.trace('onWillActivateByEvent: ', e.event);\n\t\t\tprogressService.withProgress(options, _ => Promise.race([e.activation, timeout(5000)]));\n\t\t});\n\t}\n\n\tdispose(): void {\n\t\tthis._listener.dispose();\n\t}\n}\n"]}