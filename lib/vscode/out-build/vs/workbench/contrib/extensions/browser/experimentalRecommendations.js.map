{"version":3,"file":"experimentalRecommendations.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/extensions/browser/experimentalRecommendations.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAOhG,IAAa,2BAA2B,GAAxC,MAAa,2BAA4B,SAAQ,mDAAwB;QAKxE,YACsC,iBAAqC;YAE1E,KAAK,EAAE,CAAC;YAF6B,sBAAiB,GAAjB,iBAAiB,CAAoB;YAJnE,qBAAgB,GAA8B,EAAE,CAAC;QAOzD,CAAC;QAND,IAAI,eAAe,KAA6C,OAAO,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;QAQ/F;;WAEG;QACO,KAAK,CAAC,UAAU;;YACzB,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,oBAAoB,CAAC,wCAAoB,CAAC,oBAAoB,CAAC,CAAC;YACjH,KAAK,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,WAAW,EAAE;gBAC5C,IAAI,KAAK,gBAAwB,IAAI,CAAA,GAAA,wBAAe,CAAA,CAAC,MAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,UAAU,0CAAE,eAAe,CAAC,KAAI,MAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,UAAU,0CAAE,oBAAoB,CAAA,EAAE;oBACtI,MAAM,CAAC,UAAU,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,WAAmB,EAAE,EAAE,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC;wBAC7F,WAAW,EAAE,WAAW,CAAC,WAAW,EAAE;wBACtC,MAAM,EAAE;4BACP,QAAQ,sBAA4C;4BACpD,UAAU,EAAE,MAAM,CAAC,UAAU,CAAC,oBAAoB;yBAClD;qBACD,CAAC,CAAC,CAAC;iBACJ;aACD;QACF,CAAC;KAED,CAAA;IA7BY,2BAA2B;QAMrC,WAAA,sCAAkB,CAAA;OANR,2BAA2B,CA6BvC;IA7BY,kEAA2B","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isNonEmptyArray } from 'vs/base/common/arrays';\nimport { ExtensionRecommendations, ExtensionRecommendation } from 'vs/workbench/contrib/extensions/browser/extensionRecommendations';\nimport { ExtensionRecommendationReason } from 'vs/workbench/services/extensionRecommendations/common/extensionRecommendations';\nimport { IExperimentService, ExperimentActionType, ExperimentState } from 'vs/workbench/contrib/experiments/common/experimentService';\n\nexport class ExperimentalRecommendations extends ExtensionRecommendations {\n\n\tprivate _recommendations: ExtensionRecommendation[] = [];\n\tget recommendations(): ReadonlyArray<ExtensionRecommendation> { return this._recommendations; }\n\n\tconstructor(\n\t\t@IExperimentService private readonly experimentService: IExperimentService,\n\t) {\n\t\tsuper();\n\t}\n\n\t/**\n\t * Fetch extensions used by others on the same workspace as recommendations\n\t */\n\tprotected async doActivate(): Promise<void> {\n\t\tconst experiments = await this.experimentService.getExperimentsByType(ExperimentActionType.AddToRecommendations);\n\t\tfor (const { action, state } of experiments) {\n\t\t\tif (state === ExperimentState.Run && isNonEmptyArray(action?.properties?.recommendations) && action?.properties?.recommendationReason) {\n\t\t\t\taction.properties.recommendations.forEach((extensionId: string) => this._recommendations.push({\n\t\t\t\t\textensionId: extensionId.toLowerCase(),\n\t\t\t\t\treason: {\n\t\t\t\t\t\treasonId: ExtensionRecommendationReason.Experimental,\n\t\t\t\t\t\treasonText: action.properties.recommendationReason\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t}\n\t\t}\n\t}\n\n}\n\n"]}