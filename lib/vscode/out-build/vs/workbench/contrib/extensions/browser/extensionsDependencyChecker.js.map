{"version":3,"sources":["vs/workbench/contrib/extensions/browser/extensionsDependencyChecker.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAgBhG,IAAa,0BAA0B,GAAvC,MAAa,0BAA2B,SAAQ,sBAAU;QAEzD,YACqC,gBAAmC,EACzB,0BAAuD,EAC9D,mBAAyC,EACjD,WAAyB;YAExD,KAAK,EAAE,CAAC;YAL4B,qBAAgB,GAAhB,gBAAgB,CAAmB;YACzB,+BAA0B,GAA1B,0BAA0B,CAA6B;YAC9D,wBAAmB,GAAnB,mBAAmB,CAAsB;YACjD,gBAAW,GAAX,WAAW,CAAc;YAGxD,2BAAgB,CAAC,eAAe,CAAC,iDAAiD,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,0BAA0B,EAAE,CAAC,CAAC;YAC7H,sBAAY,CAAC,cAAc,CAAC,gBAAM,CAAC,cAAc,EAAE;gBAClD,OAAO,EAAE;oBACR,EAAE,EAAE,iDAAiD;oBACrD,QAAQ,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAY,EAAE,IAAY,CAAC;oBAC9C,KAAK,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAA2B,EAAE,IAA8B,CAAC;iBAC5E;aACD,CAAC,CAAC;QACJ,CAAC;QAEO,KAAK,CAAC,iCAAiC;YAC9C,MAAM,sBAAsB,GAAG,MAAM,IAAI,CAAC,yBAAyB,EAAE,CAAC;YACtE,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,0BAA0B,CAAC,UAAU,EAAE,CAAC;YAC3E,OAAO,sBAAsB,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA,GAAA,2CAAiB,CAAA,CAAC,CAAC,CAAC,UAAU,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;QAClH,CAAC;QAEO,KAAK,CAAC,yBAAyB;YACtC,MAAM,iBAAiB,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,aAAa,EAAE,CAAC;YACtE,MAAM,oBAAoB,GAAgB,iBAAiB,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,OAAO,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,GAAG,EAAU,CAAC,CAAC;YACvK,MAAM,mBAAmB,GAAgB,IAAI,GAAG,EAAU,CAAC;YAC3D,KAAK,MAAM,SAAS,IAAI,iBAAiB,EAAE;gBAC1C,IAAI,SAAS,CAAC,qBAAqB,EAAE;oBACpC,SAAS,CAAC,qBAAqB,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;wBAC7C,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,EAAE;4BACjD,mBAAmB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;yBAC7B;oBACF,CAAC,CAAC,CAAC;iBACH;aACD;YACD,OAAO,CAAC,GAAG,mBAAmB,CAAC,MAAM,EAAE,CAAC,CAAC;QAC1C,CAAC;QAEO,KAAK,CAAC,0BAA0B;YACvC,MAAM,mBAAmB,GAAG,MAAM,IAAI,CAAC,iCAAiC,EAAE,CAAC;YAC3E,IAAI,mBAAmB,CAAC,MAAM,EAAE;gBAC/B,MAAM,UAAU,GAAG,CAAC,MAAM,IAAI,CAAC,0BAA0B,CAAC,YAAY,CAAC,EAAE,KAAK,EAAE,mBAAmB,EAAE,QAAQ,EAAE,mBAAmB,CAAC,MAAM,EAAE,EAAE,gCAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC;gBAChL,IAAI,UAAU,CAAC,MAAM,EAAE;oBACtB,MAAM,gBAAQ,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,CAAC,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;oBACxG,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC;wBAC/B,QAAQ,EAAE,uBAAQ,CAAC,IAAI;wBACvB,OAAO,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAkC,EAAE,IAAyE,CAAC;wBAChI,OAAO,EAAE;4BACR,OAAO,EAAE,CAAC,IAAI,gBAAM,CAAC,QAAQ,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAQ,EAAE,IAAe,CAAC,EAAE,EAAE,EAAE,IAAI,EAC3E,GAAG,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC;yBAClC;qBACD,CAAC,CAAC;iBACH;aACD;iBAAM;gBACN,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAiB,EAAE,IAA+C,CAAC,CAAC,CAAC;aAC5G;QACF,CAAC;KACD,CAAA;IA5DY,0BAA0B;QAGpC,WAAA,8BAAiB,CAAA;QACjB,WAAA,wCAA2B,CAAA;QAC3B,WAAA,mCAAoB,CAAA;QACpB,WAAA,mBAAY,CAAA;OANF,0BAA0B,CA4DtC;IA5DY,gEAA0B","file":"extensionsDependencyChecker.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IExtensionsWorkbenchService } from 'vs/workbench/contrib/extensions/common/extensions';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { MenuRegistry, MenuId } from 'vs/platform/actions/common/actions';\nimport { localize } from 'vs/nls';\nimport { areSameExtensions } from 'vs/platform/extensionManagement/common/extensionManagementUtil';\nimport { INotificationService, Severity } from 'vs/platform/notification/common/notification';\nimport { Action } from 'vs/base/common/actions';\nimport { IHostService } from 'vs/workbench/services/host/browser/host';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { Promises } from 'vs/base/common/async';\n\nexport class ExtensionDependencyChecker extends Disposable implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IExtensionsWorkbenchService private readonly extensionsWorkbenchService: IExtensionsWorkbenchService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IHostService private readonly hostService: IHostService\n\t) {\n\t\tsuper();\n\t\tCommandsRegistry.registerCommand('workbench.extensions.installMissingDependencies', () => this.installMissingDependencies());\n\t\tMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\t\t\tcommand: {\n\t\t\t\tid: 'workbench.extensions.installMissingDependencies',\n\t\t\t\tcategory: localize('extensions', \"Extensions\"),\n\t\t\t\ttitle: localize('auto install missing deps', \"Install Missing Dependencies\")\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async getUninstalledMissingDependencies(): Promise<string[]> {\n\t\tconst allMissingDependencies = await this.getAllMissingDependencies();\n\t\tconst localExtensions = await this.extensionsWorkbenchService.queryLocal();\n\t\treturn allMissingDependencies.filter(id => localExtensions.every(l => !areSameExtensions(l.identifier, { id })));\n\t}\n\n\tprivate async getAllMissingDependencies(): Promise<string[]> {\n\t\tconst runningExtensions = await this.extensionService.getExtensions();\n\t\tconst runningExtensionsIds: Set<string> = runningExtensions.reduce((result, r) => { result.add(r.identifier.value.toLowerCase()); return result; }, new Set<string>());\n\t\tconst missingDependencies: Set<string> = new Set<string>();\n\t\tfor (const extension of runningExtensions) {\n\t\t\tif (extension.extensionDependencies) {\n\t\t\t\textension.extensionDependencies.forEach(dep => {\n\t\t\t\t\tif (!runningExtensionsIds.has(dep.toLowerCase())) {\n\t\t\t\t\t\tmissingDependencies.add(dep);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn [...missingDependencies.values()];\n\t}\n\n\tprivate async installMissingDependencies(): Promise<void> {\n\t\tconst missingDependencies = await this.getUninstalledMissingDependencies();\n\t\tif (missingDependencies.length) {\n\t\t\tconst extensions = (await this.extensionsWorkbenchService.queryGallery({ names: missingDependencies, pageSize: missingDependencies.length }, CancellationToken.None)).firstPage;\n\t\t\tif (extensions.length) {\n\t\t\t\tawait Promises.settled(extensions.map(extension => this.extensionsWorkbenchService.install(extension)));\n\t\t\t\tthis.notificationService.notify({\n\t\t\t\t\tseverity: Severity.Info,\n\t\t\t\t\tmessage: localize('finished installing missing deps', \"Finished installing missing dependencies. Please reload the window now.\"),\n\t\t\t\t\tactions: {\n\t\t\t\t\t\tprimary: [new Action('realod', localize('reload', \"Reload Window\"), '', true,\n\t\t\t\t\t\t\t() => this.hostService.reload())]\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthis.notificationService.info(localize('no missing deps', \"There are no missing dependencies to install.\"));\n\t\t}\n\t}\n}\n"]}