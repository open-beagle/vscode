{"version":3,"sources":["vs/workbench/contrib/extensions/browser/extensionsQuickAccess.ts"],"names":[],"mappings":"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","file":"extensionsQuickAccess.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IQuickPickSeparator } from 'vs/platform/quickinput/common/quickInput';\nimport { IPickerQuickAccessItem, PickerQuickAccessProvider } from 'vs/platform/quickinput/browser/pickerQuickAccess';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { localize } from 'vs/nls';\nimport { IViewletService } from 'vs/workbench/services/viewlet/browser/viewlet';\nimport { VIEWLET_ID, IExtensionsViewPaneContainer } from 'vs/workbench/contrib/extensions/common/extensions';\nimport { IExtensionGalleryService, IExtensionManagementService, IGalleryExtension } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\n\nexport class InstallExtensionQuickAccessProvider extends PickerQuickAccessProvider<IPickerQuickAccessItem> {\n\n\tstatic PREFIX = 'ext install ';\n\n\tconstructor(\n\t\t@IViewletService private readonly viewletService: IViewletService,\n\t\t@IExtensionGalleryService private readonly galleryService: IExtensionGalleryService,\n\t\t@IExtensionManagementService private readonly extensionsService: IExtensionManagementService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tsuper(InstallExtensionQuickAccessProvider.PREFIX);\n\t}\n\n\tprotected getPicks(filter: string, disposables: DisposableStore, token: CancellationToken): Array<IPickerQuickAccessItem | IQuickPickSeparator> | Promise<Array<IPickerQuickAccessItem | IQuickPickSeparator>> {\n\n\t\t// Nothing typed\n\t\tif (!filter) {\n\t\t\treturn [{\n\t\t\t\tlabel: localize('type', \"Type an extension name to install or search.\")\n\t\t\t}];\n\t\t}\n\n\t\tconst genericSearchPickItem: IPickerQuickAccessItem = {\n\t\t\tlabel: localize('searchFor', \"Press Enter to search for extension '{0}'.\", filter),\n\t\t\taccept: () => this.searchExtension(filter)\n\t\t};\n\n\t\t// Extension ID typed: try to find it\n\t\tif (/\\./.test(filter)) {\n\t\t\treturn this.getPicksForExtensionId(filter, genericSearchPickItem, token);\n\t\t}\n\n\t\t// Extension name typed: offer to search it\n\t\treturn [genericSearchPickItem];\n\t}\n\n\tprivate async getPicksForExtensionId(filter: string, fallback: IPickerQuickAccessItem, token: CancellationToken): Promise<Array<IPickerQuickAccessItem | IQuickPickSeparator>> {\n\t\ttry {\n\t\t\tconst galleryResult = await this.galleryService.query({ names: [filter], pageSize: 1 }, token);\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\treturn []; // return early if canceled\n\t\t\t}\n\n\t\t\tconst galleryExtension = galleryResult.firstPage[0];\n\t\t\tif (!galleryExtension) {\n\t\t\t\treturn [fallback];\n\t\t\t}\n\n\t\t\treturn [{\n\t\t\t\tlabel: localize('install', \"Press Enter to install extension '{0}'.\", filter),\n\t\t\t\taccept: () => this.installExtension(galleryExtension, filter)\n\t\t\t}];\n\t\t} catch (error) {\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\treturn []; // expected error\n\t\t\t}\n\n\t\t\tthis.logService.error(error);\n\n\t\t\treturn [fallback];\n\t\t}\n\t}\n\n\tprivate async installExtension(extension: IGalleryExtension, name: string): Promise<void> {\n\t\ttry {\n\t\t\tawait openExtensionsViewlet(this.viewletService, `@id:${name}`);\n\t\t\tawait this.extensionsService.installFromGallery(extension);\n\t\t} catch (error) {\n\t\t\tthis.notificationService.error(error);\n\t\t}\n\t}\n\n\tprivate async searchExtension(name: string): Promise<void> {\n\t\topenExtensionsViewlet(this.viewletService, name);\n\t}\n}\n\nexport class ManageExtensionsQuickAccessProvider extends PickerQuickAccessProvider<IPickerQuickAccessItem> {\n\n\tstatic PREFIX = 'ext ';\n\n\tconstructor(@IViewletService private readonly viewletService: IViewletService) {\n\t\tsuper(ManageExtensionsQuickAccessProvider.PREFIX);\n\t}\n\n\tprotected getPicks(): Array<IPickerQuickAccessItem | IQuickPickSeparator> {\n\t\treturn [{\n\t\t\tlabel: localize('manage', \"Press Enter to manage your extensions.\"),\n\t\t\taccept: () => openExtensionsViewlet(this.viewletService)\n\t\t}];\n\t}\n}\n\nasync function openExtensionsViewlet(viewletService: IViewletService, search = ''): Promise<void> {\n\tconst viewlet = await viewletService.openViewlet(VIEWLET_ID, true);\n\tconst view = viewlet?.getViewPaneContainer() as IExtensionsViewPaneContainer | undefined;\n\tview?.search(search);\n\tview?.focus();\n}\n"]}