{"version":3,"sources":["vs/workbench/contrib/extensions/common/extensionsInput.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAUhG,MAAa,eAAgB,SAAQ,oBAAW;QAe/C,YACiB,SAAqB;YAErC,KAAK,EAAE,CAAC;YAFQ,cAAS,GAAT,SAAS,CAAY;QAGtC,CAAC;QAfD,IAAa,MAAM;YAClB,OAAO,eAAe,CAAC,EAAE,CAAC;QAC3B,CAAC;QAED,IAAa,QAAQ;YACpB,OAAO,SAAG,CAAC,IAAI,CAAC;gBACf,MAAM,EAAE,iBAAO,CAAC,SAAS;gBACzB,IAAI,EAAE,CAAA,GAAA,WAAI,CAAA,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,EAAE,WAAW,CAAC;aACrD,CAAC,CAAC;QACJ,CAAC;QAQQ,OAAO;YACf,OAAO,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAqB,EAAE,IAAgB,EAAE,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;QACtF,CAAC;QAEQ,QAAQ;YAChB,OAAO,KAAK,CAAC;QACd,CAAC;QAEQ,OAAO,CAAC,KAAc;YAC9B,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBACzB,OAAO,IAAI,CAAC;aACZ;YAED,OAAO,KAAK,YAAY,eAAe,IAAI,CAAA,GAAA,2CAAiB,CAAA,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,KAAK,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QACrH,CAAC;;IAnCF,0CAoCC;IAlCgB,kBAAE,GAAG,6BAA6B,CAAC","file":"extensionsInput.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Schemas } from 'vs/base/common/network';\nimport { URI } from 'vs/base/common/uri';\nimport { localize } from 'vs/nls';\nimport { EditorInput } from 'vs/workbench/common/editor';\nimport { IExtension } from 'vs/workbench/contrib/extensions/common/extensions';\nimport { areSameExtensions } from 'vs/platform/extensionManagement/common/extensionManagementUtil';\nimport { join } from 'vs/base/common/path';\n\nexport class ExtensionsInput extends EditorInput {\n\n\tstatic readonly ID = 'workbench.extensions.input2';\n\n\toverride get typeId(): string {\n\t\treturn ExtensionsInput.ID;\n\t}\n\n\toverride get resource() {\n\t\treturn URI.from({\n\t\t\tscheme: Schemas.extension,\n\t\t\tpath: join(this.extension.identifier.id, 'extension')\n\t\t});\n\t}\n\n\tconstructor(\n\t\tpublic readonly extension: IExtension\n\t) {\n\t\tsuper();\n\t}\n\n\toverride getName(): string {\n\t\treturn localize('extensionsInputName', \"Extension: {0}\", this.extension.displayName);\n\t}\n\n\toverride canSplit(): boolean {\n\t\treturn false;\n\t}\n\n\toverride matches(other: unknown): boolean {\n\t\tif (super.matches(other)) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn other instanceof ExtensionsInput && areSameExtensions(this.extension.identifier, other.extension.identifier);\n\t}\n}\n"]}