{"version":3,"file":"extensionRecommendationsService.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/extensions/test/electron-browser/extensionRecommendationsService.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as sinon from 'sinon';\nimport * as assert from 'assert';\nimport * as uuid from 'vs/base/common/uuid';\nimport {\n\tIExtensionGalleryService, IGalleryExtensionAssets, IGalleryExtension, IExtensionManagementService,\n\tDidInstallExtensionEvent, DidUninstallExtensionEvent, InstallExtensionEvent, IExtensionIdentifier, IExtensionTipsService\n} from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { IWorkbenchExtensionEnablementService } from 'vs/workbench/services/extensionManagement/common/extensionManagement';\nimport { ExtensionGalleryService } from 'vs/platform/extensionManagement/common/extensionGalleryService';\nimport { TestInstantiationService } from 'vs/platform/instantiation/test/common/instantiationServiceMock';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { NullTelemetryService } from 'vs/platform/telemetry/common/telemetryUtils';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { TestLifecycleService } from 'vs/workbench/test/browser/workbenchTestServices';\nimport { TestContextService, TestStorageService } from 'vs/workbench/test/common/workbenchTestServices';\nimport { TestSharedProcessService } from 'vs/workbench/test/electron-browser/workbenchTestServices';\nimport { TestNotificationService } from 'vs/platform/notification/test/common/testNotificationService';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { URI } from 'vs/base/common/uri';\nimport { testWorkspace } from 'vs/platform/workspace/test/common/testWorkspace';\nimport { TestConfigurationService } from 'vs/platform/configuration/test/common/testConfigurationService';\nimport { IPager } from 'vs/base/common/paging';\nimport { getGalleryExtensionId } from 'vs/platform/extensionManagement/common/extensionManagementUtil';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { ConfigurationKey, IExtensionsWorkbenchService } from 'vs/workbench/contrib/extensions/common/extensions';\nimport { TestExtensionEnablementService } from 'vs/workbench/services/extensionManagement/test/browser/extensionEnablementService.test';\nimport { IURLService } from 'vs/platform/url/common/url';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { ILifecycleService } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { INotificationService, Severity, IPromptChoice, IPromptOptions } from 'vs/platform/notification/common/notification';\nimport { NativeURLService } from 'vs/platform/url/common/urlService';\nimport { IExperimentService } from 'vs/workbench/contrib/experiments/common/experimentService';\nimport { TestExperimentService } from 'vs/workbench/contrib/experiments/test/electron-browser/experimentService.test';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { ExtensionType } from 'vs/platform/extensions/common/extensions';\nimport { ISharedProcessService } from 'vs/platform/ipc/electron-sandbox/services';\nimport { FileService } from 'vs/platform/files/common/fileService';\nimport { NullLogService, ILogService } from 'vs/platform/log/common/log';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { ExtensionTipsService } from 'vs/platform/extensionManagement/electron-sandbox/extensionTipsService';\nimport { ExtensionRecommendationsService } from 'vs/workbench/contrib/extensions/browser/extensionRecommendationsService';\nimport { NoOpWorkspaceTagsService } from 'vs/workbench/contrib/tags/browser/workspaceTagsService';\nimport { IWorkspaceTagsService } from 'vs/workbench/contrib/tags/common/workspaceTags';\nimport { ExtensionsWorkbenchService } from 'vs/workbench/contrib/extensions/browser/extensionsWorkbenchService';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { IWorkpsaceExtensionsConfigService, WorkspaceExtensionsConfigService } from 'vs/workbench/services/extensionRecommendations/common/workspaceExtensionsConfig';\nimport { IExtensionIgnoredRecommendationsService } from 'vs/workbench/services/extensionRecommendations/common/extensionRecommendations';\nimport { ExtensionIgnoredRecommendationsService } from 'vs/workbench/services/extensionRecommendations/common/extensionIgnoredRecommendationsService';\nimport { IExtensionRecommendationNotificationService } from 'vs/platform/extensionRecommendations/common/extensionRecommendations';\nimport { ExtensionRecommendationNotificationService } from 'vs/workbench/contrib/extensions/browser/extensionRecommendationNotificationService';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { MockContextKeyService } from 'vs/platform/keybinding/test/common/mockKeybindingService';\nimport { InMemoryFileSystemProvider } from 'vs/platform/files/common/inMemoryFilesystemProvider';\nimport { joinPath } from 'vs/base/common/resources';\nimport { VSBuffer } from 'vs/base/common/buffer';\n\nconst mockExtensionGallery: IGalleryExtension[] = [\n\taGalleryExtension('MockExtension1', {\n\t\tdisplayName: 'Mock Extension 1',\n\t\tversion: '1.5',\n\t\tpublisherId: 'mockPublisher1Id',\n\t\tpublisher: 'mockPublisher1',\n\t\tpublisherDisplayName: 'Mock Publisher 1',\n\t\tdescription: 'Mock Description',\n\t\tinstallCount: 1000,\n\t\trating: 4,\n\t\tratingCount: 100\n\t}, {\n\t\tdependencies: ['pub.1'],\n\t}, {\n\t\tmanifest: { uri: 'uri:manifest', fallbackUri: 'fallback:manifest' },\n\t\treadme: { uri: 'uri:readme', fallbackUri: 'fallback:readme' },\n\t\tchangelog: { uri: 'uri:changelog', fallbackUri: 'fallback:changlog' },\n\t\tdownload: { uri: 'uri:download', fallbackUri: 'fallback:download' },\n\t\ticon: { uri: 'uri:icon', fallbackUri: 'fallback:icon' },\n\t\tlicense: { uri: 'uri:license', fallbackUri: 'fallback:license' },\n\t\trepository: { uri: 'uri:repository', fallbackUri: 'fallback:repository' },\n\t\tcoreTranslations: []\n\t}),\n\taGalleryExtension('MockExtension2', {\n\t\tdisplayName: 'Mock Extension 2',\n\t\tversion: '1.5',\n\t\tpublisherId: 'mockPublisher2Id',\n\t\tpublisher: 'mockPublisher2',\n\t\tpublisherDisplayName: 'Mock Publisher 2',\n\t\tdescription: 'Mock Description',\n\t\tinstallCount: 1000,\n\t\trating: 4,\n\t\tratingCount: 100\n\t}, {\n\t\tdependencies: ['pub.1', 'pub.2'],\n\t}, {\n\t\tmanifest: { uri: 'uri:manifest', fallbackUri: 'fallback:manifest' },\n\t\treadme: { uri: 'uri:readme', fallbackUri: 'fallback:readme' },\n\t\tchangelog: { uri: 'uri:changelog', fallbackUri: 'fallback:changlog' },\n\t\tdownload: { uri: 'uri:download', fallbackUri: 'fallback:download' },\n\t\ticon: { uri: 'uri:icon', fallbackUri: 'fallback:icon' },\n\t\tlicense: { uri: 'uri:license', fallbackUri: 'fallback:license' },\n\t\trepository: { uri: 'uri:repository', fallbackUri: 'fallback:repository' },\n\t\tcoreTranslations: []\n\t})\n];\n\nconst mockExtensionLocal = [\n\t{\n\t\ttype: ExtensionType.User,\n\t\tidentifier: mockExtensionGallery[0].identifier,\n\t\tmanifest: {\n\t\t\tname: mockExtensionGallery[0].name,\n\t\t\tpublisher: mockExtensionGallery[0].publisher,\n\t\t\tversion: mockExtensionGallery[0].version\n\t\t},\n\t\tmetadata: null,\n\t\tpath: 'somepath',\n\t\treadmeUrl: 'some readmeUrl',\n\t\tchangelogUrl: 'some changelogUrl'\n\t},\n\t{\n\t\ttype: ExtensionType.User,\n\t\tidentifier: mockExtensionGallery[1].identifier,\n\t\tmanifest: {\n\t\t\tname: mockExtensionGallery[1].name,\n\t\t\tpublisher: mockExtensionGallery[1].publisher,\n\t\t\tversion: mockExtensionGallery[1].version\n\t\t},\n\t\tmetadata: null,\n\t\tpath: 'somepath',\n\t\treadmeUrl: 'some readmeUrl',\n\t\tchangelogUrl: 'some changelogUrl'\n\t}\n];\n\nconst mockTestData = {\n\trecommendedExtensions: [\n\t\t'mockPublisher1.mockExtension1',\n\t\t'MOCKPUBLISHER2.mockextension2',\n\t\t'badlyformattedextension',\n\t\t'MOCKPUBLISHER2.mockextension2',\n\t\t'unknown.extension'\n\t],\n\tvalidRecommendedExtensions: [\n\t\t'mockPublisher1.mockExtension1',\n\t\t'MOCKPUBLISHER2.mockextension2'\n\t]\n};\n\nfunction aPage<T>(...objects: T[]): IPager<T> {\n\treturn { firstPage: objects, total: objects.length, pageSize: objects.length, getPage: () => null! };\n}\n\nconst noAssets: IGalleryExtensionAssets = {\n\tchangelog: null,\n\tdownload: null!,\n\ticon: null!,\n\tlicense: null,\n\tmanifest: null,\n\treadme: null,\n\trepository: null,\n\tcoreTranslations: []\n};\n\nfunction aGalleryExtension(name: string, properties: any = {}, galleryExtensionProperties: any = {}, assets: IGalleryExtensionAssets = noAssets): IGalleryExtension {\n\tconst galleryExtension = <IGalleryExtension>Object.create({ name, publisher: 'pub', version: '1.0.0', properties: {}, assets: {}, ...properties });\n\tgalleryExtension.properties = { ...galleryExtension.properties, dependencies: [], ...galleryExtensionProperties };\n\tgalleryExtension.assets = { ...galleryExtension.assets, ...assets };\n\tgalleryExtension.identifier = { id: getGalleryExtensionId(galleryExtension.publisher, galleryExtension.name), uuid: uuid.generateUuid() };\n\treturn <IGalleryExtension>galleryExtension;\n}\n\nsuite('ExtensionRecommendationsService Test', () => {\n\tlet workspaceService: IWorkspaceContextService;\n\tlet instantiationService: TestInstantiationService;\n\tlet testConfigurationService: TestConfigurationService;\n\tlet testObject: ExtensionRecommendationsService;\n\tlet installEvent: Emitter<InstallExtensionEvent>,\n\t\tdidInstallEvent: Emitter<DidInstallExtensionEvent>,\n\t\tuninstallEvent: Emitter<IExtensionIdentifier>,\n\t\tdidUninstallEvent: Emitter<DidUninstallExtensionEvent>;\n\tlet prompted: boolean;\n\tlet promptedEmitter = new Emitter<void>();\n\tlet onModelAddedEvent: Emitter<ITextModel>;\n\tlet experimentService: TestExperimentService;\n\n\tsuiteSetup(() => {\n\t\tinstantiationService = new TestInstantiationService();\n\t\tinstallEvent = new Emitter<InstallExtensionEvent>();\n\t\tdidInstallEvent = new Emitter<DidInstallExtensionEvent>();\n\t\tuninstallEvent = new Emitter<IExtensionIdentifier>();\n\t\tdidUninstallEvent = new Emitter<DidUninstallExtensionEvent>();\n\t\tinstantiationService.stub(IExtensionGalleryService, ExtensionGalleryService);\n\t\tinstantiationService.stub(ISharedProcessService, TestSharedProcessService);\n\t\tinstantiationService.stub(ILifecycleService, new TestLifecycleService());\n\t\ttestConfigurationService = new TestConfigurationService();\n\t\tinstantiationService.stub(IConfigurationService, testConfigurationService);\n\t\tinstantiationService.stub(INotificationService, new TestNotificationService());\n\t\tinstantiationService.stub(IContextKeyService, new MockContextKeyService());\n\t\tinstantiationService.stub(IExtensionManagementService, <Partial<IExtensionManagementService>>{\n\t\t\tonInstallExtension: installEvent.event,\n\t\t\tonDidInstallExtension: didInstallEvent.event,\n\t\t\tonUninstallExtension: uninstallEvent.event,\n\t\t\tonDidUninstallExtension: didUninstallEvent.event,\n\t\t\tasync getInstalled() { return []; },\n\t\t\tasync canInstall() { return true; },\n\t\t\tasync getExtensionsReport() { return []; },\n\t\t});\n\t\tinstantiationService.stub(IExtensionService, <Partial<IExtensionService>>{\n\t\t\tasync whenInstalledExtensionsRegistered() { return true; }\n\t\t});\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, new TestExtensionEnablementService(instantiationService));\n\t\tinstantiationService.stub(ITelemetryService, NullTelemetryService);\n\t\tinstantiationService.stub(IURLService, NativeURLService);\n\t\tinstantiationService.stub(IWorkspaceTagsService, new NoOpWorkspaceTagsService());\n\t\tinstantiationService.stub(IStorageService, new TestStorageService());\n\t\tinstantiationService.stub(ILogService, new NullLogService());\n\t\tinstantiationService.stub(IProductService, <Partial<IProductService>>{\n\t\t\textensionTips: {\n\t\t\t\t'ms-dotnettools.csharp': '{**/*.cs,**/project.json,**/global.json,**/*.csproj,**/*.sln,**/appsettings.json}',\n\t\t\t\t'msjsdiag.debugger-for-chrome': '{**/*.ts,**/*.tsx,**/*.js,**/*.jsx,**/*.es6,**/*.mjs,**/*.cjs,**/.babelrc}',\n\t\t\t\t'lukehoban.Go': '**/*.go'\n\t\t\t},\n\t\t\textensionImportantTips: {\n\t\t\t\t'ms-python.python': {\n\t\t\t\t\t'name': 'Python',\n\t\t\t\t\t'pattern': '{**/*.py}'\n\t\t\t\t},\n\t\t\t\t'ms-vscode.PowerShell': {\n\t\t\t\t\t'name': 'PowerShell',\n\t\t\t\t\t'pattern': '{**/*.ps,**/*.ps1}'\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\texperimentService = instantiationService.createInstance(TestExperimentService);\n\t\tinstantiationService.stub(IExperimentService, experimentService);\n\t\tinstantiationService.set(IExtensionsWorkbenchService, instantiationService.createInstance(ExtensionsWorkbenchService));\n\t\tinstantiationService.stub(IExtensionTipsService, instantiationService.createInstance(ExtensionTipsService));\n\n\t\tonModelAddedEvent = new Emitter<ITextModel>();\n\t});\n\n\tsuiteTeardown(() => {\n\t\tif (experimentService) {\n\t\t\texperimentService.dispose();\n\t\t}\n\t});\n\n\tsetup(() => {\n\t\tinstantiationService.stub(IEnvironmentService, <Partial<IEnvironmentService>>{});\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', []);\n\t\tinstantiationService.stub(IExtensionGalleryService, 'isEnabled', true);\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage<IGalleryExtension>(...mockExtensionGallery));\n\n\t\tprompted = false;\n\n\t\tclass TestNotificationService2 extends TestNotificationService {\n\t\t\tpublic override prompt(severity: Severity, message: string, choices: IPromptChoice[], options?: IPromptOptions) {\n\t\t\t\tprompted = true;\n\t\t\t\tpromptedEmitter.fire();\n\t\t\t\treturn super.prompt(severity, message, choices, options);\n\t\t\t}\n\t\t}\n\n\t\tinstantiationService.stub(INotificationService, new TestNotificationService2());\n\n\t\ttestConfigurationService.setUserConfiguration(ConfigurationKey, { ignoreRecommendations: false });\n\t\tinstantiationService.stub(IModelService, <IModelService>{\n\t\t\tgetModels(): any { return []; },\n\t\t\tonModelAdded: onModelAddedEvent.event\n\t\t});\n\t});\n\n\tteardown(() => (<ExtensionRecommendationsService>testObject).dispose());\n\n\tfunction setUpFolderWorkspace(folderName: string, recommendedExtensions: string[], ignoredRecommendations: string[] = []): Promise<void> {\n\t\treturn setUpFolder(folderName, recommendedExtensions, ignoredRecommendations);\n\t}\n\n\tasync function setUpFolder(folderName: string, recommendedExtensions: string[], ignoredRecommendations: string[] = []): Promise<void> {\n\t\tconst ROOT = URI.file('tests').with({ scheme: 'vscode-tests' });\n\t\tconst logService = new NullLogService();\n\t\tconst fileService = new FileService(logService);\n\t\tconst fileSystemProvider = new InMemoryFileSystemProvider();\n\t\tfileService.registerProvider(ROOT.scheme, fileSystemProvider);\n\n\t\tconst folderDir = joinPath(ROOT, folderName);\n\t\tconst workspaceSettingsDir = joinPath(folderDir, '.vscode');\n\t\tawait fileService.createFolder(workspaceSettingsDir);\n\t\tconst configPath = joinPath(workspaceSettingsDir, 'extensions.json');\n\t\tawait fileService.writeFile(configPath, VSBuffer.fromString(JSON.stringify({\n\t\t\t'recommendations': recommendedExtensions,\n\t\t\t'unwantedRecommendations': ignoredRecommendations,\n\t\t}, null, '\\t')));\n\n\t\tconst myWorkspace = testWorkspace(folderDir);\n\n\t\tinstantiationService.stub(IFileService, fileService);\n\t\tworkspaceService = new TestContextService(myWorkspace);\n\t\tinstantiationService.stub(IWorkspaceContextService, workspaceService);\n\t\tinstantiationService.stub(IWorkpsaceExtensionsConfigService, instantiationService.createInstance(WorkspaceExtensionsConfigService));\n\t\tinstantiationService.stub(IExtensionIgnoredRecommendationsService, instantiationService.createInstance(ExtensionIgnoredRecommendationsService));\n\t\tinstantiationService.stub(IExtensionRecommendationNotificationService, instantiationService.createInstance(ExtensionRecommendationNotificationService));\n\t}\n\n\tfunction testNoPromptForValidRecommendations(recommendations: string[]) {\n\t\treturn setUpFolderWorkspace('myFolder', recommendations).then(() => {\n\t\t\ttestObject = instantiationService.createInstance(ExtensionRecommendationsService);\n\t\t\treturn testObject.activationPromise.then(() => {\n\t\t\t\tassert.strictEqual(Object.keys(testObject.getAllRecommendationsWithReason()).length, recommendations.length);\n\t\t\t\tassert.ok(!prompted);\n\t\t\t});\n\t\t});\n\t}\n\n\tfunction testNoPromptOrRecommendationsForValidRecommendations(recommendations: string[]) {\n\t\treturn setUpFolderWorkspace('myFolder', mockTestData.validRecommendedExtensions).then(() => {\n\t\t\ttestObject = instantiationService.createInstance(ExtensionRecommendationsService);\n\t\t\tassert.ok(!prompted);\n\n\t\t\treturn testObject.getWorkspaceRecommendations().then(() => {\n\t\t\t\tassert.strictEqual(Object.keys(testObject.getAllRecommendationsWithReason()).length, 0);\n\t\t\t\tassert.ok(!prompted);\n\t\t\t});\n\t\t});\n\t}\n\n\ttest('ExtensionRecommendationsService: No Prompt for valid workspace recommendations when galleryService is absent', () => {\n\t\tconst galleryQuerySpy = sinon.spy();\n\t\tinstantiationService.stub(IExtensionGalleryService, { query: galleryQuerySpy, isEnabled: () => false });\n\n\t\treturn testNoPromptOrRecommendationsForValidRecommendations(mockTestData.validRecommendedExtensions)\n\t\t\t.then(() => assert.ok(galleryQuerySpy.notCalled));\n\t});\n\n\ttest('ExtensionRecommendationsService: No Prompt for valid workspace recommendations during extension development', () => {\n\t\tinstantiationService.stub(IEnvironmentService, { extensionDevelopmentLocationURI: [URI.file('/folder/file')], isExtensionDevelopment: true });\n\t\treturn testNoPromptOrRecommendationsForValidRecommendations(mockTestData.validRecommendedExtensions);\n\t});\n\n\ttest('ExtensionRecommendationsService: No workspace recommendations or prompts when extensions.json has empty array', () => {\n\t\treturn testNoPromptForValidRecommendations([]);\n\t});\n\n\ttest('ExtensionRecommendationsService: Prompt for valid workspace recommendations', async () => {\n\t\tawait setUpFolderWorkspace('myFolder', mockTestData.recommendedExtensions);\n\t\ttestObject = instantiationService.createInstance(ExtensionRecommendationsService);\n\n\t\tawait Event.toPromise(promptedEmitter.event);\n\t\tconst recommendations = Object.keys(testObject.getAllRecommendationsWithReason());\n\t\tassert.strictEqual(recommendations.length, mockTestData.validRecommendedExtensions.length);\n\t\tmockTestData.validRecommendedExtensions.forEach(x => {\n\t\t\tassert.strictEqual(recommendations.indexOf(x.toLowerCase()) > -1, true);\n\t\t});\n\n\t});\n\n\ttest('ExtensionRecommendationsService: No Prompt for valid workspace recommendations if they are already installed', () => {\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', mockExtensionLocal);\n\t\treturn testNoPromptForValidRecommendations(mockTestData.validRecommendedExtensions);\n\t});\n\n\ttest('ExtensionRecommendationsService: No Prompt for valid workspace recommendations with casing mismatch if they are already installed', () => {\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', mockExtensionLocal);\n\t\treturn testNoPromptForValidRecommendations(mockTestData.validRecommendedExtensions.map(x => x.toUpperCase()));\n\t});\n\n\ttest('ExtensionRecommendationsService: No Prompt for valid workspace recommendations if ignoreRecommendations is set', () => {\n\t\ttestConfigurationService.setUserConfiguration(ConfigurationKey, { ignoreRecommendations: true });\n\t\treturn testNoPromptForValidRecommendations(mockTestData.validRecommendedExtensions);\n\t});\n\n\ttest('ExtensionRecommendationsService: No Prompt for valid workspace recommendations if ignoreRecommendations is set', () => {\n\t\ttestConfigurationService.setUserConfiguration(ConfigurationKey, { ignoreRecommendations: true });\n\t\treturn setUpFolderWorkspace('myFolder', mockTestData.validRecommendedExtensions).then(() => {\n\t\t\ttestObject = instantiationService.createInstance(ExtensionRecommendationsService);\n\t\t\treturn testObject.activationPromise.then(() => {\n\t\t\t\tassert.ok(!prompted);\n\t\t\t});\n\t\t});\n\t});\n\n\ttest('ExtensionRecommendationsService: No Prompt for valid workspace recommendations if showRecommendationsOnlyOnDemand is set', () => {\n\t\ttestConfigurationService.setUserConfiguration(ConfigurationKey, { showRecommendationsOnlyOnDemand: true });\n\t\treturn setUpFolderWorkspace('myFolder', mockTestData.validRecommendedExtensions).then(() => {\n\t\t\ttestObject = instantiationService.createInstance(ExtensionRecommendationsService);\n\t\t\treturn testObject.activationPromise.then(() => {\n\t\t\t\tassert.ok(!prompted);\n\t\t\t});\n\t\t});\n\t});\n\n\ttest('ExtensionRecommendationsService: No Prompt for valid workspace recommendations if ignoreRecommendations is set for current workspace', () => {\n\t\tinstantiationService.get(IStorageService).store('extensionsAssistant/workspaceRecommendationsIgnore', true, StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\treturn testNoPromptForValidRecommendations(mockTestData.validRecommendedExtensions);\n\t});\n\n\ttest('ExtensionRecommendationsService: No Recommendations of globally ignored recommendations', () => {\n\t\tinstantiationService.get(IStorageService).store('extensionsAssistant/workspaceRecommendationsIgnore', true, StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\tinstantiationService.get(IStorageService).store('extensionsAssistant/recommendations', '[\"ms-dotnettools.csharp\", \"ms-python.python\", \"ms-vscode.vscode-typescript-tslint-plugin\"]', StorageScope.GLOBAL, StorageTarget.MACHINE);\n\t\tinstantiationService.get(IStorageService).store('extensionsAssistant/ignored_recommendations', '[\"ms-dotnettools.csharp\", \"mockpublisher2.mockextension2\"]', StorageScope.GLOBAL, StorageTarget.MACHINE);\n\n\t\treturn setUpFolderWorkspace('myFolder', mockTestData.validRecommendedExtensions).then(() => {\n\t\t\ttestObject = instantiationService.createInstance(ExtensionRecommendationsService);\n\t\t\treturn testObject.activationPromise.then(() => {\n\t\t\t\tconst recommendations = testObject.getAllRecommendationsWithReason();\n\t\t\t\tassert.ok(!recommendations['ms-dotnettools.csharp']); // stored recommendation that has been globally ignored\n\t\t\t\tassert.ok(recommendations['ms-python.python']); // stored recommendation\n\t\t\t\tassert.ok(recommendations['mockpublisher1.mockextension1']); // workspace recommendation\n\t\t\t\tassert.ok(!recommendations['mockpublisher2.mockextension2']); // workspace recommendation that has been globally ignored\n\t\t\t});\n\t\t});\n\t});\n\n\ttest('ExtensionRecommendationsService: No Recommendations of workspace ignored recommendations', () => {\n\t\tconst ignoredRecommendations = ['ms-dotnettools.csharp', 'mockpublisher2.mockextension2']; // ignore a stored recommendation and a workspace recommendation.\n\t\tconst storedRecommendations = '[\"ms-dotnettools.csharp\", \"ms-python.python\"]';\n\t\tinstantiationService.get(IStorageService).store('extensionsAssistant/workspaceRecommendationsIgnore', true, StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\tinstantiationService.get(IStorageService).store('extensionsAssistant/recommendations', storedRecommendations, StorageScope.GLOBAL, StorageTarget.MACHINE);\n\n\t\treturn setUpFolderWorkspace('myFolder', mockTestData.validRecommendedExtensions, ignoredRecommendations).then(() => {\n\t\t\ttestObject = instantiationService.createInstance(ExtensionRecommendationsService);\n\t\t\treturn testObject.activationPromise.then(() => {\n\t\t\t\tconst recommendations = testObject.getAllRecommendationsWithReason();\n\t\t\t\tassert.ok(!recommendations['ms-dotnettools.csharp']); // stored recommendation that has been workspace ignored\n\t\t\t\tassert.ok(recommendations['ms-python.python']); // stored recommendation\n\t\t\t\tassert.ok(recommendations['mockpublisher1.mockextension1']); // workspace recommendation\n\t\t\t\tassert.ok(!recommendations['mockpublisher2.mockextension2']); // workspace recommendation that has been workspace ignored\n\t\t\t});\n\t\t});\n\t});\n\n\ttest.skip('ExtensionRecommendationsService: Able to retrieve collection of all ignored recommendations', async () => {\n\n\t\tconst storageService = instantiationService.get(IStorageService);\n\t\tconst workspaceIgnoredRecommendations = ['ms-dotnettools.csharp']; // ignore a stored recommendation and a workspace recommendation.\n\t\tconst storedRecommendations = '[\"ms-dotnettools.csharp\", \"ms-python.python\"]';\n\t\tconst globallyIgnoredRecommendations = '[\"mockpublisher2.mockextension2\"]'; // ignore a workspace recommendation.\n\t\tstorageService.store('extensionsAssistant/workspaceRecommendationsIgnore', true, StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\tstorageService.store('extensionsAssistant/recommendations', storedRecommendations, StorageScope.GLOBAL, StorageTarget.MACHINE);\n\t\tstorageService.store('extensionsAssistant/ignored_recommendations', globallyIgnoredRecommendations, StorageScope.GLOBAL, StorageTarget.MACHINE);\n\n\t\tawait setUpFolderWorkspace('myFolder', mockTestData.validRecommendedExtensions, workspaceIgnoredRecommendations);\n\t\ttestObject = instantiationService.createInstance(ExtensionRecommendationsService);\n\t\tawait testObject.activationPromise;\n\n\t\tconst recommendations = testObject.getAllRecommendationsWithReason();\n\t\tassert.ok(recommendations['ms-python.python'], 'ms-python.python extension shall exist');\n\t\tassert.ok(!recommendations['mockpublisher2.mockextension2'], 'mockpublisher2.mockextension2 extension shall not exist');\n\t\tassert.ok(!recommendations['ms-dotnettools.csharp'], 'ms-dotnettools.csharp extension shall not exist');\n\t});\n\n\ttest('ExtensionRecommendationsService: Able to dynamically ignore/unignore global recommendations', async () => {\n\t\tconst storageService = instantiationService.get(IStorageService);\n\n\t\tconst storedRecommendations = '[\"ms-dotnettools.csharp\", \"ms-python.python\"]';\n\t\tconst globallyIgnoredRecommendations = '[\"mockpublisher2.mockextension2\"]'; // ignore a workspace recommendation.\n\t\tstorageService.store('extensionsAssistant/workspaceRecommendationsIgnore', true, StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\tstorageService.store('extensionsAssistant/recommendations', storedRecommendations, StorageScope.GLOBAL, StorageTarget.MACHINE);\n\t\tstorageService.store('extensionsAssistant/ignored_recommendations', globallyIgnoredRecommendations, StorageScope.GLOBAL, StorageTarget.MACHINE);\n\n\t\tawait setUpFolderWorkspace('myFolder', mockTestData.validRecommendedExtensions);\n\t\tconst extensionIgnoredRecommendationsService = instantiationService.get(IExtensionIgnoredRecommendationsService);\n\t\ttestObject = instantiationService.createInstance(ExtensionRecommendationsService);\n\t\tawait testObject.activationPromise;\n\n\t\tlet recommendations = testObject.getAllRecommendationsWithReason();\n\t\tassert.ok(recommendations['ms-python.python']);\n\t\tassert.ok(recommendations['mockpublisher1.mockextension1']);\n\t\tassert.ok(!recommendations['mockpublisher2.mockextension2']);\n\n\t\textensionIgnoredRecommendationsService.toggleGlobalIgnoredRecommendation('mockpublisher1.mockextension1', true);\n\n\t\trecommendations = testObject.getAllRecommendationsWithReason();\n\t\tassert.ok(recommendations['ms-python.python']);\n\t\tassert.ok(!recommendations['mockpublisher1.mockextension1']);\n\t\tassert.ok(!recommendations['mockpublisher2.mockextension2']);\n\n\t\textensionIgnoredRecommendationsService.toggleGlobalIgnoredRecommendation('mockpublisher1.mockextension1', false);\n\n\t\trecommendations = testObject.getAllRecommendationsWithReason();\n\t\tassert.ok(recommendations['ms-python.python']);\n\t\tassert.ok(recommendations['mockpublisher1.mockextension1']);\n\t\tassert.ok(!recommendations['mockpublisher2.mockextension2']);\n\t});\n\n\ttest('test global extensions are modified and recommendation change event is fired when an extension is ignored', async () => {\n\t\tconst storageService = instantiationService.get(IStorageService);\n\t\tconst changeHandlerTarget = sinon.spy();\n\t\tconst ignoredExtensionId = 'Some.Extension';\n\n\t\tstorageService.store('extensionsAssistant/workspaceRecommendationsIgnore', true, StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\tstorageService.store('extensionsAssistant/ignored_recommendations', '[\"ms-vscode.vscode\"]', StorageScope.GLOBAL, StorageTarget.MACHINE);\n\n\t\tawait setUpFolderWorkspace('myFolder', []);\n\t\ttestObject = instantiationService.createInstance(ExtensionRecommendationsService);\n\t\tconst extensionIgnoredRecommendationsService = instantiationService.get(IExtensionIgnoredRecommendationsService);\n\t\textensionIgnoredRecommendationsService.onDidChangeGlobalIgnoredRecommendation(changeHandlerTarget);\n\t\textensionIgnoredRecommendationsService.toggleGlobalIgnoredRecommendation(ignoredExtensionId, true);\n\t\tawait testObject.activationPromise;\n\n\t\tassert.ok(changeHandlerTarget.calledOnce);\n\t\tassert.ok(changeHandlerTarget.getCall(0).calledWithMatch({ extensionId: ignoredExtensionId.toLowerCase(), isRecommended: false }));\n\t});\n\n\ttest('ExtensionRecommendationsService: Get file based recommendations from storage (old format)', () => {\n\t\tconst storedRecommendations = '[\"ms-dotnettools.csharp\", \"ms-python.python\", \"ms-vscode.vscode-typescript-tslint-plugin\"]';\n\t\tinstantiationService.get(IStorageService).store('extensionsAssistant/recommendations', storedRecommendations, StorageScope.GLOBAL, StorageTarget.MACHINE);\n\n\t\treturn setUpFolderWorkspace('myFolder', []).then(() => {\n\t\t\ttestObject = instantiationService.createInstance(ExtensionRecommendationsService);\n\t\t\treturn testObject.activationPromise.then(() => {\n\t\t\t\tconst recommendations = testObject.getFileBasedRecommendations();\n\t\t\t\tassert.strictEqual(recommendations.length, 2);\n\t\t\t\tassert.ok(recommendations.some(extensionId => extensionId === 'ms-dotnettools.csharp')); // stored recommendation that exists in product.extensionTips\n\t\t\t\tassert.ok(recommendations.some(extensionId => extensionId === 'ms-python.python')); // stored recommendation that exists in product.extensionImportantTips\n\t\t\t\tassert.ok(recommendations.every(extensionId => extensionId !== 'ms-vscode.vscode-typescript-tslint-plugin')); // stored recommendation that is no longer in neither product.extensionTips nor product.extensionImportantTips\n\t\t\t});\n\t\t});\n\t});\n\n\ttest('ExtensionRecommendationsService: Get file based recommendations from storage (new format)', () => {\n\t\tconst milliSecondsInADay = 1000 * 60 * 60 * 24;\n\t\tconst now = Date.now();\n\t\tconst tenDaysOld = 10 * milliSecondsInADay;\n\t\tconst storedRecommendations = `{\"ms-dotnettools.csharp\": ${now}, \"ms-python.python\": ${now}, \"ms-vscode.vscode-typescript-tslint-plugin\": ${now}, \"lukehoban.Go\": ${tenDaysOld}}`;\n\t\tinstantiationService.get(IStorageService).store('extensionsAssistant/recommendations', storedRecommendations, StorageScope.GLOBAL, StorageTarget.MACHINE);\n\n\t\treturn setUpFolderWorkspace('myFolder', []).then(() => {\n\t\t\ttestObject = instantiationService.createInstance(ExtensionRecommendationsService);\n\t\t\treturn testObject.activationPromise.then(() => {\n\t\t\t\tconst recommendations = testObject.getFileBasedRecommendations();\n\t\t\t\tassert.strictEqual(recommendations.length, 2);\n\t\t\t\tassert.ok(recommendations.some(extensionId => extensionId === 'ms-dotnettools.csharp')); // stored recommendation that exists in product.extensionTips\n\t\t\t\tassert.ok(recommendations.some(extensionId => extensionId === 'ms-python.python')); // stored recommendation that exists in product.extensionImportantTips\n\t\t\t\tassert.ok(recommendations.every(extensionId => extensionId !== 'ms-vscode.vscode-typescript-tslint-plugin')); // stored recommendation that is no longer in neither product.extensionTips nor product.extensionImportantTips\n\t\t\t\tassert.ok(recommendations.every(extensionId => extensionId !== 'lukehoban.Go')); //stored recommendation that is older than a week\n\t\t\t});\n\t\t});\n\t});\n});\n"]}