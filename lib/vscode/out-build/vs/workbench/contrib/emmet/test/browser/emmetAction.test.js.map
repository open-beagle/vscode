{"version":3,"file":"emmetAction.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/emmet/test/browser/emmetAction.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAOhG,EAAE;IACF,yDAAyD;IACzD,IAAI;IACJ,2BAA2B;IAC3B,mBAAmB;IACnB,wBAAwB;IACxB,kEAAkE;IAClE,yBAAyB;IACzB,aAAa;IACb,iBAAiB;IACjB,cAAc;IACd,gBAAgB;IAChB,UAAU;IACV,4BAA4B;IAC5B,MAAM;IACN,iDAAiD;IACjD,EAAE;IAEF,MAAM,wBAAwB;QAG7B,YAAY,SAAiB;YAC5B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC5B,CAAC;QAEM,UAAU,CAAC,IAAY;YAC7B,OAAO,IAAI,CAAC,SAAS,CAAC;QACvB,CAAC;KACD;IAED,KAAK,CAAC,OAAO,EAAE,GAAG,EAAE;QAEnB,IAAI,CAAC,6CAA6C,EAAE,GAAG,EAAE;YACxD,CAAA,GAAA,mCAAkB,CAAA,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,MAAM,EAAE,EAAE;gBAErC,SAAS,aAAa,CAAC,IAAY,EAAE,SAAiB,EAAE,gBAAyB,EAAE,sBAA+B;oBACjH,MAAM,gBAAgB,GAAe,EAAE,CAAC;oBACxC,MAAM,kBAAkB,GAAG,IAAI,0BAAkB,CAAC,IAAI,EAAE,gBAAgB,CAAC,CAAC;oBAC1E,MAAM,0BAA0B,GAAgC;wBAC/D,qBAAqB,EAAE,CAAC,UAAsB,EAAE,EAAE;4BACjD,IAAI,UAAU,KAAK,gBAAgB,EAAE;gCACpC,OAAO,kBAAkB,CAAC;6BAC1B;4BACD,MAAM,IAAI,KAAK,CAAC,YAAY,CAAC,CAAC;wBAC/B,CAAC;qBACD,CAAC;oBACF,MAAM,KAAK,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;oBAChC,IAAI,CAAC,KAAK,EAAE;wBACX,MAAM,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;qBACtC;oBAED,KAAK,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;oBAClC,IAAI,UAAU,GAAG,gCAAiB,CAAC,WAAW,CAAC,0BAA0B,EAAE,MAAM,EAAE,IAAI,wBAAwB,CAAC,SAAS,CAAC,CAAC,CAAC;oBAC5H,IAAI,CAAC,UAAU,EAAE;wBAChB,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;qBACpC;oBAED,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC;oBAC1D,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,UAAU,EAAE,sBAAsB,CAAC,CAAC;gBACnE,CAAC;gBAED,sDAAsD;gBACtD,aAAa,CAAC,UAAU,EAAE,oBAAoB,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC;gBACpE,aAAa,CAAC,YAAY,EAAE,sBAAsB,EAAE,YAAY,EAAE,MAAM,CAAC,CAAC;gBAC1E,aAAa,CAAC,UAAU,EAAE,oBAAoB,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC;gBACpE,aAAa,CAAC,eAAe,EAAE,6BAA6B,EAAE,eAAe,EAAE,MAAM,CAAC,CAAC;gBAEvF,0DAA0D;gBAC1D,+DAA+D;gBAC/D,kEAAkE;YAEnE,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IGrammarContributions, ILanguageIdentifierResolver, EmmetEditorAction } from 'vs/workbench/contrib/emmet/browser/emmetActions';\nimport { withTestCodeEditor } from 'vs/editor/test/browser/testCodeEditor';\nimport * as assert from 'assert';\nimport { LanguageId, LanguageIdentifier } from 'vs/editor/common/modes';\n\n//\n// To run the emmet tests only change .vscode/launch.json\n// {\n// \t\"name\": \"Stacks Tests\",\n// \t\"type\": \"node\",\n// \t\"request\": \"launch\",\n// \t\"program\": \"${workspaceFolder}/node_modules/mocha/bin/_mocha\",\n// \t\"stopOnEntry\": false,\n// \t\"args\": [\n// \t\t\"--timeout\",\n// \t\t\"999999\",\n// \t\t\"--colors\",\n// \t\t\"-g\",\n// \t\t\"Stacks\"   <<<--- Emmet\n// \t],\n// Select the 'Stacks Tests' launch config and F5\n//\n\nclass MockGrammarContributions implements IGrammarContributions {\n\tprivate scopeName: string;\n\n\tconstructor(scopeName: string) {\n\t\tthis.scopeName = scopeName;\n\t}\n\n\tpublic getGrammar(mode: string): string {\n\t\treturn this.scopeName;\n\t}\n}\n\nsuite('Emmet', () => {\n\n\ttest('Get language mode and parent mode for emmet', () => {\n\t\twithTestCodeEditor([], {}, (editor) => {\n\n\t\t\tfunction testIsEnabled(mode: string, scopeName: string, expectedLanguage?: string, expectedParentLanguage?: string) {\n\t\t\t\tconst customLanguageId: LanguageId = 73;\n\t\t\t\tconst languageIdentifier = new LanguageIdentifier(mode, customLanguageId);\n\t\t\t\tconst languageIdentifierResolver: ILanguageIdentifierResolver = {\n\t\t\t\t\tgetLanguageIdentifier: (languageId: LanguageId) => {\n\t\t\t\t\t\tif (languageId === customLanguageId) {\n\t\t\t\t\t\t\treturn languageIdentifier;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow new Error('Unexpected');\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tconst model = editor.getModel();\n\t\t\t\tif (!model) {\n\t\t\t\t\tassert.fail('Editor model not found');\n\t\t\t\t}\n\n\t\t\t\tmodel.setMode(languageIdentifier);\n\t\t\t\tlet langOutput = EmmetEditorAction.getLanguage(languageIdentifierResolver, editor, new MockGrammarContributions(scopeName));\n\t\t\t\tif (!langOutput) {\n\t\t\t\t\tassert.fail('langOutput not found');\n\t\t\t\t}\n\n\t\t\t\tassert.strictEqual(langOutput.language, expectedLanguage);\n\t\t\t\tassert.strictEqual(langOutput.parentMode, expectedParentLanguage);\n\t\t\t}\n\n\t\t\t// syntaxes mapped using the scope name of the grammar\n\t\t\ttestIsEnabled('markdown', 'text.html.markdown', 'markdown', 'html');\n\t\t\ttestIsEnabled('handlebars', 'text.html.handlebars', 'handlebars', 'html');\n\t\t\ttestIsEnabled('nunjucks', 'text.html.nunjucks', 'nunjucks', 'html');\n\t\t\ttestIsEnabled('laravel-blade', 'text.html.php.laravel-blade', 'laravel-blade', 'html');\n\n\t\t\t// languages that have different Language Id and scopeName\n\t\t\t// testIsEnabled('razor', 'text.html.cshtml', 'razor', 'html');\n\t\t\t// testIsEnabled('HTML (Eex)', 'text.html.elixir', 'boo', 'html');\n\n\t\t});\n\t});\n});\n"]}