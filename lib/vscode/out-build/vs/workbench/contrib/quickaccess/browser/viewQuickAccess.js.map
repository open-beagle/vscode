{"version":3,"sources":["vs/workbench/contrib/quickaccess/browser/viewQuickAccess.ts"],"names":[],"mappings":"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","file":"viewQuickAccess.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { IQuickPickSeparator, IQuickInputService, ItemActivation } from 'vs/platform/quickinput/common/quickInput';\nimport { IPickerQuickAccessItem, PickerQuickAccessProvider } from 'vs/platform/quickinput/browser/pickerQuickAccess';\nimport { IViewletService } from 'vs/workbench/services/viewlet/browser/viewlet';\nimport { IViewDescriptorService, IViewsService, ViewContainer } from 'vs/workbench/common/views';\nimport { IOutputService } from 'vs/workbench/contrib/output/common/output';\nimport { ITerminalService } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { IPanelService, IPanelIdentifier } from 'vs/workbench/services/panel/common/panelService';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { ViewletDescriptor } from 'vs/workbench/browser/viewlet';\nimport { matchesFuzzy } from 'vs/base/common/filters';\nimport { fuzzyContains } from 'vs/base/common/strings';\nimport { withNullAsUndefined } from 'vs/base/common/types';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { Action2 } from 'vs/platform/actions/common/actions';\nimport { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { KeyMod, KeyCode } from 'vs/base/common/keyCodes';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { CATEGORIES } from 'vs/workbench/common/actions';\n\ninterface IViewQuickPickItem extends IPickerQuickAccessItem {\n\tcontainerLabel: string;\n}\n\nexport class ViewQuickAccessProvider extends PickerQuickAccessProvider<IViewQuickPickItem> {\n\n\tstatic PREFIX = 'view ';\n\n\tconstructor(\n\t\t@IViewletService private readonly viewletService: IViewletService,\n\t\t@IViewDescriptorService private readonly viewDescriptorService: IViewDescriptorService,\n\t\t@IViewsService private readonly viewsService: IViewsService,\n\t\t@IOutputService private readonly outputService: IOutputService,\n\t\t@ITerminalService private readonly terminalService: ITerminalService,\n\t\t@IPanelService private readonly panelService: IPanelService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService\n\t) {\n\t\tsuper(ViewQuickAccessProvider.PREFIX, {\n\t\t\tnoResultsPick: {\n\t\t\t\tlabel: localize('noViewResults', \"No matching views\"),\n\t\t\t\tcontainerLabel: ''\n\t\t\t}\n\t\t});\n\t}\n\n\tprotected getPicks(filter: string): Array<IViewQuickPickItem | IQuickPickSeparator> {\n\t\tconst filteredViewEntries = this.doGetViewPickItems().filter(entry => {\n\t\t\tif (!filter) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// Match fuzzy on label\n\t\t\tentry.highlights = { label: withNullAsUndefined(matchesFuzzy(filter, entry.label, true)) };\n\n\t\t\t// Return if we have a match on label or container\n\t\t\treturn entry.highlights.label || fuzzyContains(entry.containerLabel, filter);\n\t\t});\n\n\t\t// Map entries to container labels\n\t\tconst mapEntryToContainer = new Map<string, string>();\n\t\tfor (const entry of filteredViewEntries) {\n\t\t\tif (!mapEntryToContainer.has(entry.label)) {\n\t\t\t\tmapEntryToContainer.set(entry.label, entry.containerLabel);\n\t\t\t}\n\t\t}\n\n\t\t// Add separators for containers\n\t\tconst filteredViewEntriesWithSeparators: Array<IViewQuickPickItem | IQuickPickSeparator> = [];\n\t\tlet lastContainer: string | undefined = undefined;\n\t\tfor (const entry of filteredViewEntries) {\n\t\t\tif (lastContainer !== entry.containerLabel) {\n\t\t\t\tlastContainer = entry.containerLabel;\n\n\t\t\t\t// When the entry container has a parent container, set container\n\t\t\t\t// label as Parent / Child. For example, `Views / Explorer`.\n\t\t\t\tlet separatorLabel: string;\n\t\t\t\tif (mapEntryToContainer.has(lastContainer)) {\n\t\t\t\t\tseparatorLabel = `${mapEntryToContainer.get(lastContainer)} / ${lastContainer}`;\n\t\t\t\t} else {\n\t\t\t\t\tseparatorLabel = lastContainer;\n\t\t\t\t}\n\n\t\t\t\tfilteredViewEntriesWithSeparators.push({ type: 'separator', label: separatorLabel });\n\n\t\t\t}\n\n\t\t\tfilteredViewEntriesWithSeparators.push(entry);\n\t\t}\n\n\t\treturn filteredViewEntriesWithSeparators;\n\t}\n\n\tprivate doGetViewPickItems(): Array<IViewQuickPickItem> {\n\t\tconst viewEntries: Array<IViewQuickPickItem> = [];\n\n\t\tconst getViewEntriesForViewlet = (viewlet: ViewletDescriptor, viewContainer: ViewContainer): IViewQuickPickItem[] => {\n\t\t\tconst viewContainerModel = this.viewDescriptorService.getViewContainerModel(viewContainer);\n\t\t\tconst result: IViewQuickPickItem[] = [];\n\t\t\tfor (const view of viewContainerModel.allViewDescriptors) {\n\t\t\t\tif (this.contextKeyService.contextMatchesRules(view.when)) {\n\t\t\t\t\tresult.push({\n\t\t\t\t\t\tlabel: view.name,\n\t\t\t\t\t\tcontainerLabel: viewlet.name,\n\t\t\t\t\t\taccept: () => this.viewsService.openView(view.id, true)\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn result;\n\t\t};\n\n\t\t// Viewlets\n\t\tconst viewlets = this.viewletService.getViewlets();\n\t\tfor (const viewlet of viewlets) {\n\t\t\tif (this.includeViewContainer(viewlet)) {\n\t\t\t\tviewEntries.push({\n\t\t\t\t\tlabel: viewlet.name,\n\t\t\t\t\tcontainerLabel: localize('views', \"Side Bar\"),\n\t\t\t\t\taccept: () => this.viewletService.openViewlet(viewlet.id, true)\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// Panels\n\t\tconst panels = this.panelService.getPanels();\n\t\tfor (const panel of panels) {\n\t\t\tif (this.includeViewContainer(panel)) {\n\t\t\t\tviewEntries.push({\n\t\t\t\t\tlabel: panel.name,\n\t\t\t\t\tcontainerLabel: localize('panels', \"Panel\"),\n\t\t\t\t\taccept: () => this.panelService.openPanel(panel.id, true)\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// Viewlet Views\n\t\tfor (const viewlet of viewlets) {\n\t\t\tconst viewContainer = this.viewDescriptorService.getViewContainerById(viewlet.id);\n\t\t\tif (viewContainer) {\n\t\t\t\tviewEntries.push(...getViewEntriesForViewlet(viewlet, viewContainer));\n\t\t\t}\n\t\t}\n\n\t\t// Terminals\n\t\tthis.terminalService.terminalTabs.forEach((tab, tabIndex) => {\n\t\t\ttab.terminalInstances.forEach((terminal, terminalIndex) => {\n\t\t\t\tconst label = localize('terminalTitle', \"{0}: {1}\", `${tabIndex + 1}.${terminalIndex + 1}`, terminal.title);\n\t\t\t\tviewEntries.push({\n\t\t\t\t\tlabel,\n\t\t\t\t\tcontainerLabel: localize('terminals', \"Terminal\"),\n\t\t\t\t\taccept: async () => {\n\t\t\t\t\t\tawait this.terminalService.showPanel(true);\n\n\t\t\t\t\t\tthis.terminalService.setActiveInstance(terminal);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\t// Output Channels\n\t\tconst channels = this.outputService.getChannelDescriptors();\n\t\tfor (const channel of channels) {\n\t\t\tconst label = channel.log ? localize('logChannel', \"Log ({0})\", channel.label) : channel.label;\n\t\t\tviewEntries.push({\n\t\t\t\tlabel,\n\t\t\t\tcontainerLabel: localize('channels', \"Output\"),\n\t\t\t\taccept: () => this.outputService.showChannel(channel.id)\n\t\t\t});\n\t\t}\n\n\t\treturn viewEntries;\n\t}\n\n\tprivate includeViewContainer(container: ViewletDescriptor | IPanelIdentifier): boolean {\n\t\tconst viewContainer = this.viewDescriptorService.getViewContainerById(container.id);\n\t\tif (viewContainer?.hideIfEmpty) {\n\t\t\treturn this.viewDescriptorService.getViewContainerModel(viewContainer).activeViewDescriptors.length > 0;\n\t\t}\n\n\t\treturn true;\n\t}\n}\n\n\n//#region Actions\n\nexport class OpenViewPickerAction extends Action2 {\n\n\tstatic readonly ID = 'workbench.action.openView';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: OpenViewPickerAction.ID,\n\t\t\ttitle: { value: localize('openView', \"Open View\"), original: 'Open View' },\n\t\t\tcategory: CATEGORIES.View,\n\t\t\tf1: true\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\taccessor.get(IQuickInputService).quickAccess.show(ViewQuickAccessProvider.PREFIX);\n\t}\n}\n\nexport class QuickAccessViewPickerAction extends Action2 {\n\n\tstatic readonly ID = 'workbench.action.quickOpenView';\n\tstatic readonly KEYBINDING = {\n\t\tprimary: KeyMod.CtrlCmd | KeyCode.KEY_Q,\n\t\tmac: { primary: KeyMod.WinCtrl | KeyCode.KEY_Q },\n\t\tlinux: { primary: 0 }\n\t};\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: QuickAccessViewPickerAction.ID,\n\t\t\ttitle: { value: localize('quickOpenView', \"Quick Open View\"), original: 'Quick Open View' },\n\t\t\tcategory: CATEGORIES.View,\n\t\t\tf1: true,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\twhen: undefined,\n\t\t\t\t...QuickAccessViewPickerAction.KEYBINDING\n\t\t\t}\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst keybindingService = accessor.get(IKeybindingService);\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\n\t\tconst keys = keybindingService.lookupKeybindings(QuickAccessViewPickerAction.ID);\n\n\t\tquickInputService.quickAccess.show(ViewQuickAccessProvider.PREFIX, { quickNavigateConfiguration: { keybindings: keys }, itemActivation: ItemActivation.FIRST });\n\t}\n}\n\n//#endregion\n"]}