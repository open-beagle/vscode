{"version":3,"sources":["vs/workbench/contrib/quickaccess/browser/commandsQuickAccess.ts"],"names":[],"mappings":"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","file":"commandsQuickAccess.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { ICommandQuickPick, CommandsHistory } from 'vs/platform/quickinput/browser/commandsQuickAccess';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IMenuService, MenuId, MenuItemAction, SubmenuItemAction, Action2 } from 'vs/platform/actions/common/actions';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { timeout } from 'vs/base/common/async';\nimport { DisposableStore, toDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { AbstractEditorCommandsQuickAccessProvider } from 'vs/editor/contrib/quickAccess/commandsQuickAccess';\nimport { IEditor } from 'vs/editor/common/editorCommon';\nimport { Language } from 'vs/base/common/platform';\nimport { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { DefaultQuickAccessFilterValue } from 'vs/platform/quickinput/common/quickAccess';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IWorkbenchQuickAccessConfiguration } from 'vs/workbench/browser/quickaccess';\nimport { Codicon } from 'vs/base/common/codicons';\nimport { IQuickInputService } from 'vs/platform/quickinput/common/quickInput';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { KeyMod, KeyCode } from 'vs/base/common/keyCodes';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { TriggerAction } from 'vs/platform/quickinput/browser/pickerQuickAccess';\nimport { IPreferencesService } from 'vs/workbench/services/preferences/common/preferences';\nimport { stripIcons } from 'vs/base/common/iconLabels';\nimport { isFirefox } from 'vs/base/browser/browser';\n\nexport class CommandsQuickAccessProvider extends AbstractEditorCommandsQuickAccessProvider {\n\n\t// If extensions are not yet registered, we wait for a little moment to give them\n\t// a chance to register so that the complete set of commands shows up as result\n\t// We do not want to delay functionality beyond that time though to keep the commands\n\t// functional.\n\tprivate readonly extensionRegistrationRace = Promise.race([\n\t\ttimeout(800),\n\t\tthis.extensionService.whenInstalledExtensionsRegistered()\n\t]);\n\n\tprotected get activeTextEditorControl(): IEditor | undefined { return this.editorService.activeTextEditorControl; }\n\n\tget defaultFilterValue(): DefaultQuickAccessFilterValue | undefined {\n\t\tif (this.configuration.preserveInput) {\n\t\t\treturn DefaultQuickAccessFilterValue.LAST;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tconstructor(\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IMenuService private readonly menuService: IMenuService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@ICommandService commandService: ICommandService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IEditorGroupsService private readonly editorGroupService: IEditorGroupsService,\n\t\t@IPreferencesService private readonly preferencesService: IPreferencesService,\n\t) {\n\t\tsuper({\n\t\t\tshowAlias: !Language.isDefaultVariant(),\n\t\t\tnoResultsPick: {\n\t\t\t\tlabel: localize('noCommandResults', \"No matching commands\"),\n\t\t\t\tcommandId: ''\n\t\t\t}\n\t\t}, instantiationService, keybindingService, commandService, telemetryService, notificationService);\n\t}\n\n\tprivate get configuration() {\n\t\tconst commandPaletteConfig = this.configurationService.getValue<IWorkbenchQuickAccessConfiguration>().workbench.commandPalette;\n\n\t\treturn {\n\t\t\tpreserveInput: commandPaletteConfig.preserveInput\n\t\t};\n\t}\n\n\tprotected async getCommandPicks(disposables: DisposableStore, token: CancellationToken): Promise<Array<ICommandQuickPick>> {\n\n\t\t// wait for extensions registration or 800ms once\n\t\tawait this.extensionRegistrationRace;\n\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn [\n\t\t\t...this.getCodeEditorCommandPicks(),\n\t\t\t...this.getGlobalCommandPicks(disposables)\n\t\t].map(c => ({\n\t\t\t...c,\n\t\t\tbuttons: [{\n\t\t\t\ticonClass: Codicon.gear.classNames,\n\t\t\t\ttooltip: localize('configure keybinding', \"Configure Keybinding\"),\n\t\t\t}],\n\t\t\ttrigger: (): TriggerAction => {\n\t\t\t\tthis.preferencesService.openGlobalKeybindingSettings(false, { query: `@command:${c.commandId}` });\n\t\t\t\treturn TriggerAction.CLOSE_PICKER;\n\t\t\t},\n\t\t}));\n\t}\n\n\tprivate getGlobalCommandPicks(disposables: DisposableStore): ICommandQuickPick[] {\n\t\tconst globalCommandPicks: ICommandQuickPick[] = [];\n\t\tconst scopedContextKeyService = this.editorService.activeEditorPane?.scopedContextKeyService || this.editorGroupService.activeGroup.scopedContextKeyService;\n\t\tconst globalCommandsMenu = this.menuService.createMenu(MenuId.CommandPalette, scopedContextKeyService);\n\t\tconst globalCommandsMenuActions = globalCommandsMenu.getActions()\n\t\t\t.reduce((r, [, actions]) => [...r, ...actions], <Array<MenuItemAction | SubmenuItemAction | string>>[])\n\t\t\t.filter(action => action instanceof MenuItemAction && action.enabled) as MenuItemAction[];\n\n\t\tfor (const action of globalCommandsMenuActions) {\n\n\t\t\t// Label\n\t\t\tlet label = (typeof action.item.title === 'string' ? action.item.title : action.item.title.value) || action.item.id;\n\n\t\t\t// Category\n\t\t\tconst category = typeof action.item.category === 'string' ? action.item.category : action.item.category?.value;\n\t\t\tif (category) {\n\t\t\t\tlabel = localize('commandWithCategory', \"{0}: {1}\", category, label);\n\t\t\t}\n\n\t\t\t// Alias\n\t\t\tconst aliasLabel = typeof action.item.title !== 'string' ? action.item.title.original : undefined;\n\t\t\tconst aliasCategory = (category && action.item.category && typeof action.item.category !== 'string') ? action.item.category.original : undefined;\n\t\t\tconst commandAlias = (aliasLabel && category) ?\n\t\t\t\taliasCategory ? `${aliasCategory}: ${aliasLabel}` : `${category}: ${aliasLabel}` :\n\t\t\t\taliasLabel;\n\n\t\t\tglobalCommandPicks.push({\n\t\t\t\tcommandId: action.item.id,\n\t\t\t\tcommandAlias,\n\t\t\t\tlabel: stripIcons(label)\n\t\t\t});\n\t\t}\n\n\t\t// Cleanup\n\t\tglobalCommandsMenu.dispose();\n\t\tdisposables.add(toDisposable(() => dispose(globalCommandsMenuActions)));\n\n\t\treturn globalCommandPicks;\n\t}\n}\n\n//#region Actions\n\nexport class ShowAllCommandsAction extends Action2 {\n\n\tstatic readonly ID = 'workbench.action.showCommands';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: ShowAllCommandsAction.ID,\n\t\t\ttitle: { value: localize('showTriggerActions', \"Show All Commands\"), original: 'Show All Commands' },\n\t\t\tf1: true,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\twhen: undefined,\n\t\t\t\tprimary: !isFirefox ? (KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_P) : undefined,\n\t\t\t\tsecondary: [KeyCode.F1]\n\t\t\t}\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\taccessor.get(IQuickInputService).quickAccess.show(CommandsQuickAccessProvider.PREFIX);\n\t}\n}\n\nexport class ClearCommandHistoryAction extends Action2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.action.clearCommandHistory',\n\t\t\ttitle: { value: localize('clearCommandHistory', \"Clear Command History\"), original: 'Clear Command History' },\n\t\t\tf1: true\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst configurationService = accessor.get(IConfigurationService);\n\t\tconst storageService = accessor.get(IStorageService);\n\n\t\tconst commandHistoryLength = CommandsHistory.getConfiguredCommandHistoryLength(configurationService);\n\t\tif (commandHistoryLength > 0) {\n\t\t\tCommandsHistory.clearHistory(configurationService, storageService);\n\t\t}\n\t}\n}\n\n//#endregion\n"]}