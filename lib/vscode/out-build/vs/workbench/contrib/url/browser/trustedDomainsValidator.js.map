{"version":3,"sources":["vs/workbench/contrib/url/browser/trustedDomainsValidator.ts"],"names":[],"mappings":"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","file":"trustedDomainsValidator.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Schemas } from 'vs/base/common/network';\nimport Severity from 'vs/base/common/severity';\nimport { URI } from 'vs/base/common/uri';\nimport { localize } from 'vs/nls';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { IOpenerService, matchesScheme } from 'vs/platform/opener/common/opener';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IQuickInputService } from 'vs/platform/quickinput/common/quickInput';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { configureOpenerTrustedDomainsHandler, readAuthenticationTrustedDomains, readStaticTrustedDomains, readWorkspaceTrustedDomains } from 'vs/workbench/contrib/url/browser/trustedDomains';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IdleValue } from 'vs/base/common/async';\nimport { IAuthenticationService } from 'vs/workbench/services/authentication/browser/authenticationService';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { testUrlMatchesGlob } from 'vs/workbench/contrib/url/common/urlGlob';\n\ntype TrustedDomainsDialogActionClassification = {\n\taction: { classification: 'SystemMetaData', purpose: 'FeatureInsight' };\n};\n\nexport class OpenerValidatorContributions implements IWorkbenchContribution {\n\n\tprivate _readWorkspaceTrustedDomainsResult: IdleValue<Promise<string[]>>;\n\tprivate _readAuthenticationTrustedDomainsResult: IdleValue<Promise<string[]>>;\n\n\tconstructor(\n\t\t@IOpenerService private readonly _openerService: IOpenerService,\n\t\t@IStorageService private readonly _storageService: IStorageService,\n\t\t@IDialogService private readonly _dialogService: IDialogService,\n\t\t@IProductService private readonly _productService: IProductService,\n\t\t@IQuickInputService private readonly _quickInputService: IQuickInputService,\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@IClipboardService private readonly _clipboardService: IClipboardService,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@IAuthenticationService private readonly _authenticationService: IAuthenticationService,\n\t\t@IWorkspaceContextService private readonly _workspaceContextService: IWorkspaceContextService,\n\t) {\n\t\tthis._openerService.registerValidator({ shouldOpen: r => this.validateLink(r) });\n\n\t\tthis._readAuthenticationTrustedDomainsResult = new IdleValue(() =>\n\t\t\tthis._instantiationService.invokeFunction(readAuthenticationTrustedDomains));\n\t\tthis._authenticationService.onDidRegisterAuthenticationProvider(() => {\n\t\t\tthis._readAuthenticationTrustedDomainsResult?.dispose();\n\t\t\tthis._readAuthenticationTrustedDomainsResult = new IdleValue(() =>\n\t\t\t\tthis._instantiationService.invokeFunction(readAuthenticationTrustedDomains));\n\t\t});\n\n\t\tthis._readWorkspaceTrustedDomainsResult = new IdleValue(() =>\n\t\t\tthis._instantiationService.invokeFunction(readWorkspaceTrustedDomains));\n\t\tthis._workspaceContextService.onDidChangeWorkspaceFolders(() => {\n\t\t\tthis._readWorkspaceTrustedDomainsResult?.dispose();\n\t\t\tthis._readWorkspaceTrustedDomainsResult = new IdleValue(() =>\n\t\t\t\tthis._instantiationService.invokeFunction(readWorkspaceTrustedDomains));\n\t\t});\n\t}\n\n\tasync validateLink(resource: URI | string): Promise<boolean> {\n\t\tif (!matchesScheme(resource, Schemas.http) && !matchesScheme(resource, Schemas.https)) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst originalResource = resource;\n\t\tif (typeof resource === 'string') {\n\t\t\tresource = URI.parse(resource);\n\t\t}\n\t\tconst { scheme, authority, path, query, fragment } = resource;\n\n\t\tconst domainToOpen = `${scheme}://${authority}`;\n\t\tconst [workspaceDomains, userDomains] = await Promise.all([this._readWorkspaceTrustedDomainsResult.value, this._readAuthenticationTrustedDomainsResult.value]);\n\t\tconst { defaultTrustedDomains, trustedDomains, } = this._instantiationService.invokeFunction(readStaticTrustedDomains);\n\t\tconst allTrustedDomains = [...defaultTrustedDomains, ...trustedDomains, ...userDomains, ...workspaceDomains];\n\n\t\tif (isURLDomainTrusted(resource, allTrustedDomains)) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\tlet formattedLink = `${scheme}://${authority}${path}`;\n\n\t\t\tconst linkTail = `${query ? '?' + query : ''}${fragment ? '#' + fragment : ''}`;\n\n\n\t\t\tconst remainingLength = Math.max(0, 60 - formattedLink.length);\n\t\t\tconst linkTailLengthToKeep = Math.min(Math.max(5, remainingLength), linkTail.length);\n\n\t\t\tif (linkTailLengthToKeep === linkTail.length) {\n\t\t\t\tformattedLink += linkTail;\n\t\t\t} else {\n\t\t\t\t// keep the first char ? or #\n\t\t\t\t// add ... and keep the tail end as much as possible\n\t\t\t\tformattedLink += linkTail.charAt(0) + '...' + linkTail.substring(linkTail.length - linkTailLengthToKeep + 1);\n\t\t\t}\n\n\t\t\tconst { choice } = await this._dialogService.show(\n\t\t\t\tSeverity.Info,\n\t\t\t\tlocalize(\n\t\t\t\t\t'openExternalLinkAt',\n\t\t\t\t\t'Do you want {0} to open the external website?',\n\t\t\t\t\tthis._productService.nameShort\n\t\t\t\t),\n\t\t\t\t[\n\t\t\t\t\tlocalize('open', 'Open'),\n\t\t\t\t\tlocalize('copy', 'Copy'),\n\t\t\t\t\tlocalize('cancel', 'Cancel'),\n\t\t\t\t\tlocalize('configureTrustedDomains', 'Configure Trusted Domains')\n\t\t\t\t],\n\t\t\t\t{\n\t\t\t\t\tdetail: typeof originalResource === 'string' ? originalResource : formattedLink,\n\t\t\t\t\tcancelId: 2\n\t\t\t\t}\n\t\t\t);\n\n\t\t\t// Open Link\n\t\t\tif (choice === 0) {\n\t\t\t\tthis._telemetryService.publicLog2<{ action: string }, TrustedDomainsDialogActionClassification>(\n\t\t\t\t\t'trustedDomains.dialogAction',\n\t\t\t\t\t{ action: 'open' }\n\t\t\t\t);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t// Copy Link\n\t\t\telse if (choice === 1) {\n\t\t\t\tthis._telemetryService.publicLog2<{ action: string }, TrustedDomainsDialogActionClassification>(\n\t\t\t\t\t'trustedDomains.dialogAction',\n\t\t\t\t\t{ action: 'copy' }\n\t\t\t\t);\n\t\t\t\tthis._clipboardService.writeText(typeof originalResource === 'string' ? originalResource : resource.toString(true));\n\t\t\t}\n\t\t\t// Configure Trusted Domains\n\t\t\telse if (choice === 3) {\n\t\t\t\tthis._telemetryService.publicLog2<{ action: string }, TrustedDomainsDialogActionClassification>(\n\t\t\t\t\t'trustedDomains.dialogAction',\n\t\t\t\t\t{ action: 'configure' }\n\t\t\t\t);\n\n\t\t\t\tconst pickedDomains = await configureOpenerTrustedDomainsHandler(\n\t\t\t\t\ttrustedDomains,\n\t\t\t\t\tdomainToOpen,\n\t\t\t\t\tresource,\n\t\t\t\t\tthis._quickInputService,\n\t\t\t\t\tthis._storageService,\n\t\t\t\t\tthis._editorService,\n\t\t\t\t\tthis._telemetryService,\n\t\t\t\t);\n\t\t\t\t// Trust all domains\n\t\t\t\tif (pickedDomains.indexOf('*') !== -1) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t// Trust current domain\n\t\t\t\tif (isURLDomainTrusted(resource, pickedDomains)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tthis._telemetryService.publicLog2<{ action: string }, TrustedDomainsDialogActionClassification>(\n\t\t\t\t'trustedDomains.dialogAction',\n\t\t\t\t{ action: 'cancel' }\n\t\t\t);\n\n\t\t\treturn false;\n\t\t}\n\t}\n}\n\nconst rLocalhost = /^localhost(:\\d+)?$/i;\nconst r127 = /^127.0.0.1(:\\d+)?$/;\n\nfunction isLocalhostAuthority(authority: string) {\n\treturn rLocalhost.test(authority) || r127.test(authority);\n}\n\n/**\n * Case-normalize some case-insensitive URLs, such as github.\n */\nfunction normalizeURL(url: string | URI): string {\n\tconst caseInsensitiveAuthorities = ['github.com'];\n\ttry {\n\t\tconst parsed = typeof url === 'string' ? URI.parse(url, true) : url;\n\t\tif (caseInsensitiveAuthorities.includes(parsed.authority)) {\n\t\t\treturn parsed.with({ path: parsed.path.toLowerCase() }).toString(true);\n\t\t} else {\n\t\t\treturn parsed.toString(true);\n\t\t}\n\t} catch { return url.toString(); }\n}\n\n/**\n * Check whether a domain like https://www.microsoft.com matches\n * the list of trusted domains.\n *\n * - Schemes must match\n * - There's no subdomain matching. For example https://microsoft.com doesn't match https://www.microsoft.com\n * - Star matches all subdomains. For example https://*.microsoft.com matches https://www.microsoft.com and https://foo.bar.microsoft.com\n */\nexport function isURLDomainTrusted(url: URI, trustedDomains: string[]) {\n\turl = URI.parse(normalizeURL(url));\n\ttrustedDomains = trustedDomains.map(normalizeURL);\n\n\tif (isLocalhostAuthority(url.authority)) {\n\t\treturn true;\n\t}\n\n\tfor (let i = 0; i < trustedDomains.length; i++) {\n\t\tif (trustedDomains[i] === '*') {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (testUrlMatchesGlob(url.toString(), trustedDomains[i])) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n"]}