{"version":3,"file":"trustedDomainsFileSystemProvider.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/url/browser/trustedDomainsFileSystemProvider.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { parse } from 'vs/base/common/json';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { FileDeleteOptions, FileOverwriteOptions, FileSystemProviderCapabilities, FileType, FileWriteOptions, IFileService, IStat, IWatchOptions, IFileSystemProviderWithFileReadWriteCapability } from 'vs/platform/files/common/files';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { readTrustedDomains, TRUSTED_DOMAINS_CONTENT_STORAGE_KEY, TRUSTED_DOMAINS_STORAGE_KEY } from 'vs/workbench/contrib/url/browser/trustedDomains';\nimport { assertIsDefined } from 'vs/base/common/types';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\n\nconst TRUSTED_DOMAINS_SCHEMA = 'trustedDomains';\n\nconst TRUSTED_DOMAINS_STAT: IStat = {\n\ttype: FileType.File,\n\tctime: Date.now(),\n\tmtime: Date.now(),\n\tsize: 0\n};\n\nconst CONFIG_HELP_TEXT_PRE = `// Links matching one or more entries in the list below can be opened without link protection.\n// The following examples show what entries can look like:\n// - \"https://microsoft.com\": Matches this specific domain using https\n// - \"https://microsoft.com:8080\": Matches this specific domain on this port using https\n// - \"https://microsoft.com:*\": Matches this specific domain on any port using https\n// - \"https://microsoft.com/foo\": Matches https://microsoft.com/foo and https://microsoft.com/foo/bar,\n//   but not https://microsoft.com/foobar or https://microsoft.com/bar\n// - \"https://*.microsoft.com\": Match all domains ending in \"microsoft.com\" using https\n// - \"microsoft.com\": Match this specific domain using either http or https\n// - \"*.microsoft.com\": Match all domains ending in \"microsoft.com\" using either http or https\n// - \"http://192.168.0.1: Matches this specific IP using http\n// - \"http://192.168.0.*: Matches all IP's with this prefix using http\n// - \"*\": Match all domains using either http or https\n//\n`;\n\nconst CONFIG_HELP_TEXT_AFTER = `//\n// You can use the \"Manage Trusted Domains\" command to open this file.\n// Save this file to apply the trusted domains rules.\n`;\n\nconst CONFIG_PLACEHOLDER_TEXT = `[\n\t// \"https://microsoft.com\"\n]`;\n\nfunction computeTrustedDomainContent(defaultTrustedDomains: string[], trustedDomains: string[], userTrustedDomains: string[], workspaceTrustedDomains: string[], configuring?: string) {\n\tlet content = CONFIG_HELP_TEXT_PRE;\n\n\tif (defaultTrustedDomains.length > 0) {\n\t\tcontent += `// By default, VS Code trusts \"localhost\" as well as the following domains:\\n`;\n\t\tdefaultTrustedDomains.forEach(d => {\n\t\t\tcontent += `// - \"${d}\"\\n`;\n\t\t});\n\t} else {\n\t\tcontent += `// By default, VS Code trusts \"localhost\".\\n`;\n\t}\n\n\tif (userTrustedDomains.length) {\n\t\tcontent += `//\\n// Additionally, the following domains are trusted based on your logged-in Accounts:\\n`;\n\t\tuserTrustedDomains.forEach(d => {\n\t\t\tcontent += `// - \"${d}\"\\n`;\n\t\t});\n\t}\n\n\tif (workspaceTrustedDomains.length) {\n\t\tcontent += `//\\n// Further, the following domains are trusted based on your workspace configuration:\\n`;\n\t\tworkspaceTrustedDomains.forEach(d => {\n\t\t\tcontent += `// - \"${d}\"\\n`;\n\t\t});\n\t}\n\n\tcontent += CONFIG_HELP_TEXT_AFTER;\n\n\tcontent += configuring ? `\\n// Currently configuring trust for ${configuring}\\n` : '';\n\n\tif (trustedDomains.length === 0) {\n\t\tcontent += CONFIG_PLACEHOLDER_TEXT;\n\t} else {\n\t\tcontent += JSON.stringify(trustedDomains, null, 2);\n\t}\n\n\treturn content;\n}\n\nexport class TrustedDomainsFileSystemProvider implements IFileSystemProviderWithFileReadWriteCapability, IWorkbenchContribution {\n\treadonly capabilities = FileSystemProviderCapabilities.FileReadWrite;\n\n\treadonly onDidChangeCapabilities = Event.None;\n\treadonly onDidChangeFile = Event.None;\n\n\tconstructor(\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t) {\n\t\tthis.fileService.registerProvider(TRUSTED_DOMAINS_SCHEMA, this);\n\t}\n\n\tstat(resource: URI): Promise<IStat> {\n\t\treturn Promise.resolve(TRUSTED_DOMAINS_STAT);\n\t}\n\n\tasync readFile(resource: URI): Promise<Uint8Array> {\n\t\tlet trustedDomainsContent = this.storageService.get(\n\t\t\tTRUSTED_DOMAINS_CONTENT_STORAGE_KEY,\n\t\t\tStorageScope.GLOBAL\n\t\t);\n\n\t\tconst configuring: string | undefined = resource.fragment;\n\n\t\tconst { defaultTrustedDomains, trustedDomains, userDomains, workspaceDomains } = await this.instantiationService.invokeFunction(readTrustedDomains);\n\t\tif (\n\t\t\t!trustedDomainsContent ||\n\t\t\ttrustedDomainsContent.indexOf(CONFIG_HELP_TEXT_PRE) === -1 ||\n\t\t\ttrustedDomainsContent.indexOf(CONFIG_HELP_TEXT_AFTER) === -1 ||\n\t\t\ttrustedDomainsContent.indexOf(configuring ?? '') === -1 ||\n\t\t\t[...defaultTrustedDomains, ...trustedDomains, ...userDomains, ...workspaceDomains].some(d => !assertIsDefined(trustedDomainsContent).includes(d))\n\t\t) {\n\t\t\ttrustedDomainsContent = computeTrustedDomainContent(defaultTrustedDomains, trustedDomains, userDomains, workspaceDomains, configuring);\n\t\t}\n\n\t\tconst buffer = VSBuffer.fromString(trustedDomainsContent).buffer;\n\t\treturn buffer;\n\t}\n\n\twriteFile(resource: URI, content: Uint8Array, opts: FileWriteOptions): Promise<void> {\n\t\ttry {\n\t\t\tconst trustedDomainsContent = VSBuffer.wrap(content).toString();\n\t\t\tconst trustedDomains = parse(trustedDomainsContent);\n\n\t\t\tthis.storageService.store(TRUSTED_DOMAINS_CONTENT_STORAGE_KEY, trustedDomainsContent, StorageScope.GLOBAL, StorageTarget.USER);\n\t\t\tthis.storageService.store(\n\t\t\t\tTRUSTED_DOMAINS_STORAGE_KEY,\n\t\t\t\tJSON.stringify(trustedDomains) || '',\n\t\t\t\tStorageScope.GLOBAL,\n\t\t\t\tStorageTarget.USER\n\t\t\t);\n\t\t} catch (err) { }\n\n\t\treturn Promise.resolve();\n\t}\n\n\twatch(resource: URI, opts: IWatchOptions): IDisposable {\n\t\treturn {\n\t\t\tdispose() {\n\t\t\t\treturn;\n\t\t\t}\n\t\t};\n\t}\n\tmkdir(resource: URI): Promise<void> {\n\t\treturn Promise.resolve(undefined!);\n\t}\n\treaddir(resource: URI): Promise<[string, FileType][]> {\n\t\treturn Promise.resolve(undefined!);\n\t}\n\tdelete(resource: URI, opts: FileDeleteOptions): Promise<void> {\n\t\treturn Promise.resolve(undefined!);\n\t}\n\trename(from: URI, to: URI, opts: FileOverwriteOptions): Promise<void> {\n\t\treturn Promise.resolve(undefined!);\n\t}\n}\n"]}