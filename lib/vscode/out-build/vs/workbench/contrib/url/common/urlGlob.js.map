{"version":3,"file":"urlGlob.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/url/common/urlGlob.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nexport const testUrlMatchesGlob = (url: string, globUrl: string): boolean => {\n\tconst normalize = (url: string) => url.replace(/\\/+$/, '');\n\tglobUrl = normalize(globUrl);\n\turl = normalize(url);\n\n\tconst memo = Array.from({ length: url.length + 1 }).map(() =>\n\t\tArray.from({ length: globUrl.length + 1 }).map(() => undefined),\n\t);\n\n\tif (/^[^./:]*:\\/\\//.test(globUrl)) {\n\t\treturn doUrlMatch(memo, url, globUrl, 0, 0);\n\t}\n\n\tconst scheme = /^(https?):\\/\\//.exec(url)?.[1];\n\tif (scheme) {\n\t\treturn doUrlMatch(memo, url, `${scheme}://${globUrl}`, 0, 0);\n\t}\n\n\treturn false;\n};\n\nconst doUrlMatch = (\n\tmemo: (boolean | undefined)[][],\n\turl: string,\n\tglobUrl: string,\n\turlOffset: number,\n\tglobUrlOffset: number,\n): boolean => {\n\tif (memo[urlOffset]?.[globUrlOffset] !== undefined) {\n\t\treturn memo[urlOffset][globUrlOffset]!;\n\t}\n\n\tconst options = [];\n\n\t// Endgame.\n\t// Fully exact match\n\tif (urlOffset === url.length) {\n\t\treturn globUrlOffset === globUrl.length;\n\t}\n\n\t// Some path remaining in url\n\tif (globUrlOffset === globUrl.length) {\n\t\tconst remaining = url.slice(urlOffset);\n\t\treturn remaining[0] === '/';\n\t}\n\n\tif (url[urlOffset] === globUrl[globUrlOffset]) {\n\t\t// Exact match.\n\t\toptions.push(doUrlMatch(memo, url, globUrl, urlOffset + 1, globUrlOffset + 1));\n\t}\n\n\tif (globUrl[globUrlOffset] + globUrl[globUrlOffset + 1] === '*.') {\n\t\t// Any subdomain match. Either consume one thing that's not a / or : and don't advance base or consume nothing and do.\n\t\tif (!['/', ':'].includes(url[urlOffset])) {\n\t\t\toptions.push(doUrlMatch(memo, url, globUrl, urlOffset + 1, globUrlOffset));\n\t\t}\n\t\toptions.push(doUrlMatch(memo, url, globUrl, urlOffset, globUrlOffset + 2));\n\t}\n\n\tif (globUrl[globUrlOffset] === '*') {\n\t\t// Any match. Either consume one thing and don't advance base or consume nothing and do.\n\t\tif (urlOffset + 1 === url.length) {\n\t\t\t// If we're at the end of the input url consume one from both.\n\t\t\toptions.push(doUrlMatch(memo, url, globUrl, urlOffset + 1, globUrlOffset + 1));\n\t\t} else {\n\t\t\toptions.push(doUrlMatch(memo, url, globUrl, urlOffset + 1, globUrlOffset));\n\t\t}\n\t\toptions.push(doUrlMatch(memo, url, globUrl, urlOffset, globUrlOffset + 1));\n\t}\n\n\tif (globUrl[globUrlOffset] + globUrl[globUrlOffset + 1] === ':*') {\n\t\t// any port match. Consume a port if it exists otherwise nothing. Always comsume the base.\n\t\tif (url[urlOffset] === ':') {\n\t\t\tlet endPortIndex = urlOffset + 1;\n\t\t\tdo { endPortIndex++; } while (/[0-9]/.test(url[endPortIndex]));\n\t\t\toptions.push(doUrlMatch(memo, url, globUrl, endPortIndex, globUrlOffset + 2));\n\t\t} else {\n\t\t\toptions.push(doUrlMatch(memo, url, globUrl, urlOffset, globUrlOffset + 2));\n\t\t}\n\t}\n\n\treturn (memo[urlOffset][globUrlOffset] = options.some(a => a === true));\n};\n"]}