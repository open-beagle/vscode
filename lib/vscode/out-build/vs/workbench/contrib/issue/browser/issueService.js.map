{"version":3,"file":"issueService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/issue/browser/issueService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAUnF,QAAA,gBAAgB,GAAG,CAAA,GAAA,+BAAe,CAAA,CAAmB,iBAAiB,CAAC,CAAC;IAWrF,IAAa,eAAe,GAA5B,MAAa,eAAe;QAG3B,YAC+C,0BAAuD,EACpE,aAA6B,EAC5B,cAA+B;YAFnB,+BAA0B,GAA1B,0BAA0B,CAA6B;YACpE,kBAAa,GAAb,aAAa,CAAgB;YAC5B,mBAAc,GAAd,cAAc,CAAiB;QAC9D,CAAC;QAEL,KAAK,CAAC,YAAY,CAAC,OAA8B;YAChD,IAAI,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC;YACvD,IAAI,OAAO,CAAC,WAAW,EAAE;gBACxB,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;gBACjF,IAAI,kBAAkB,EAAE;oBACvB,aAAa,GAAG,kBAAkB,GAAG,aAAa,CAAC;iBACnD;aACD;YAED,IAAI,aAAa,EAAE;gBAClB,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,SAAG,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;aACxE;iBAAM;gBACN,MAAM,IAAI,KAAK,CAAC,0CAA0C,OAAO,CAAC,WAAW,EAAE,CAAC,CAAC;aACjF;QACF,CAAC;QAEO,KAAK,CAAC,qBAAqB,CAAC,WAAmB;;YACtD,IAAI,aAAa,GAAG,EAAE,CAAC;YAEvB,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,0BAA0B,CAAC,YAAY,cAAoB,CAAC;YAC1F,MAAM,iBAAiB,GAAG,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,KAAK,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;YACzF,MAAM,OAAO,GAAG,MAAA,iBAAiB,aAAjB,iBAAiB,uBAAjB,iBAAiB,CAAE,QAAQ,CAAC,IAAI,0CAAE,GAAG,CAAC;YACtD,MAAM,YAAY,GAAG,MAAA,iBAAiB,aAAjB,iBAAiB,uBAAjB,iBAAiB,CAAE,QAAQ,CAAC,UAAU,0CAAE,GAAG,CAAC;YAEjE,iDAAiD;YACjD,IAAI,OAAO,IAAI,OAAO,CAAC,KAAK,CAAC,+BAA+B,CAAC,EAAE;gBAC9D,aAAa,GAAG,CAAA,GAAA,sCAAkB,CAAA,CAAC,OAAO,CAAC,CAAC;aAC5C;iBAAM,IAAI,YAAY,IAAI,YAAY,CAAC,KAAK,CAAC,+BAA+B,CAAC,EAAE;gBAC/E,aAAa,GAAG,CAAA,GAAA,sCAAkB,CAAA,CAAC,YAAY,CAAC,CAAC;aACjD;YAED,OAAO,aAAa,CAAC;QACtB,CAAC;KACD,CAAA;IA1CY,eAAe;QAIzB,WAAA,iDAA2B,CAAA;QAC3B,WAAA,uBAAc,CAAA;QACd,WAAA,gCAAe,CAAA;OANL,eAAe,CA0C3B;IA1CY,0CAAe","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { normalizeGitHubUrl } from 'vs/platform/issue/common/issueReporterUtil';\nimport { IExtensionManagementService } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { ExtensionType } from 'vs/platform/extensions/common/extensions';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { IProductService } from 'vs/platform/product/common/productService';\n\nexport const IWebIssueService = createDecorator<IWebIssueService>('webIssueService');\n\nexport interface IIssueReporterOptions {\n\textensionId?: string;\n}\n\nexport interface IWebIssueService {\n\treadonly _serviceBrand: undefined;\n\topenReporter(options?: IIssueReporterOptions): Promise<void>;\n}\n\nexport class WebIssueService implements IWebIssueService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@IExtensionManagementService private readonly extensionManagementService: IExtensionManagementService,\n\t\t@IOpenerService private readonly openerService: IOpenerService,\n\t\t@IProductService private readonly productService: IProductService\n\t) { }\n\n\tasync openReporter(options: IIssueReporterOptions): Promise<void> {\n\t\tlet repositoryUrl = this.productService.reportIssueUrl;\n\t\tif (options.extensionId) {\n\t\t\tconst extensionGitHubUrl = await this.getExtensionGitHubUrl(options.extensionId);\n\t\t\tif (extensionGitHubUrl) {\n\t\t\t\trepositoryUrl = extensionGitHubUrl + '/issues/new';\n\t\t\t}\n\t\t}\n\n\t\tif (repositoryUrl) {\n\t\t\treturn this.openerService.open(URI.parse(repositoryUrl)).then(_ => { });\n\t\t} else {\n\t\t\tthrow new Error(`Unable to find issue reporting url for ${options.extensionId}`);\n\t\t}\n\t}\n\n\tprivate async getExtensionGitHubUrl(extensionId: string): Promise<string> {\n\t\tlet repositoryUrl = '';\n\n\t\tconst extensions = await this.extensionManagementService.getInstalled(ExtensionType.User);\n\t\tconst selectedExtension = extensions.filter(ext => ext.identifier.id === extensionId)[0];\n\t\tconst bugsUrl = selectedExtension?.manifest.bugs?.url;\n\t\tconst extensionUrl = selectedExtension?.manifest.repository?.url;\n\n\t\t// If given, try to match the extension's bug url\n\t\tif (bugsUrl && bugsUrl.match(/^https?:\\/\\/github\\.com\\/(.*)/)) {\n\t\t\trepositoryUrl = normalizeGitHubUrl(bugsUrl);\n\t\t} else if (extensionUrl && extensionUrl.match(/^https?:\\/\\/github\\.com\\/(.*)/)) {\n\t\t\trepositoryUrl = normalizeGitHubUrl(extensionUrl);\n\t\t}\n\n\t\treturn repositoryUrl;\n\t}\n}\n"]}