{"version":3,"sources":["vs/workbench/contrib/issue/browser/issue.web.contribution.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;IAchG,IAAM,yBAAyB,GAA/B,MAAM,yBAAyB;QAE9B,YAAsC,cAA+B;YAA/B,mBAAc,GAAd,cAAc,CAAiB;YACpE,IAAI,cAAc,CAAC,cAAc,EAAE;gBAClC,MAAM,4BAA4B,GAAG,GAAG,CAAC,QAAQ,CAAC,CAAkH,CAAhH,CAAkH,EAA/G,EAAE,AAA2H,CAAC,CAAC,oBAAvG,EAAE,OAAO,EAAE,CAAC,sEAAsE,CAAC;gBAElK,2BAAgB,CAAC,eAAe,CAAC,oCAAyB,EAAE,UAAU,QAAQ,EAAE,IAAuC;oBACtH,IAAI,WAA+B,CAAC;oBACpC,IAAI,IAAI,EAAE;wBACT,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;4BACxB,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC;yBACrB;6BAAM;4BACN,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;yBAC/B;qBACD;oBAED,OAAO,QAAQ,CAAC,GAAG,CAAC,+BAAgB,CAAC,CAAC,YAAY,CAAC,EAAE,WAAW,EAAE,CAAC,CAAC;gBACrE,CAAC,CAAC,CAAC;gBAEH,MAAM,OAAO,GAAmB;oBAC/B,EAAE,EAAE,oCAAyB;oBAC7B,KAAK,EAAE,EAAE,KAAK,EAAE,4BAA4B,EAAE,QAAQ,EAAE,cAAc,EAAE;oBACxE,QAAQ,EAAE,oBAAU,CAAC,IAAI;iBACzB,CAAC;gBAEF,sBAAY,CAAC,cAAc,CAAC,gBAAM,CAAC,cAAc,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;aAChE;QACF,CAAC;KACD,CAAA;IA5BK,yBAAyB;QAEjB,WAAA,gCAAe,CAAA;OAFvB,yBAAyB,CA4B9B;IAED,mBAAQ,CAAC,EAAE,CAAkC,0BAAmB,CAAC,SAAS,CAAC,CAAC,6BAA6B,CAAC,yBAAyB,mBAA0B,CAAC;IAE9J,2BAAgB,CAAC,eAAe,CAAC,yBAAyB,EAAE,CAAC,QAAQ,EAAE,EAAE;QACxE,OAAO,GAAG,CAAC,QAAQ,CAAC,CAAmB,EAAE,IAAyD,CAAC,CAAC;IACrG,CAAC,CAAC,CAAC;IAEH,CAAA,GAAA,8BAAiB,CAAA,CAAC,+BAAgB,EAAE,8BAAe,EAAE,IAAI,CAAC,CAAC","file":"issue.web.contribution.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { ICommandAction, MenuId, MenuRegistry } from 'vs/platform/actions/common/actions';\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { CATEGORIES } from 'vs/workbench/common/actions';\nimport { Extensions as WorkbenchExtensions, IWorkbenchContribution, IWorkbenchContributionsRegistry } from 'vs/workbench/common/contributions';\nimport { IWebIssueService, WebIssueService } from 'vs/workbench/contrib/issue/browser/issueService';\nimport { OpenIssueReporterArgs, OpenIssueReporterActionId } from 'vs/workbench/contrib/issue/common/commands';\n\nclass RegisterIssueContribution implements IWorkbenchContribution {\n\n\tconstructor(@IProductService readonly productService: IProductService) {\n\t\tif (productService.reportIssueUrl) {\n\t\t\tconst OpenIssueReporterActionLabel = nls.localize({ key: 'reportIssueInEnglish', comment: ['Translate this to \"Report Issue in English\" in all languages please!'] }, \"Report Issue\");\n\n\t\t\tCommandsRegistry.registerCommand(OpenIssueReporterActionId, function (accessor, args?: [string] | OpenIssueReporterArgs) {\n\t\t\t\tlet extensionId: string | undefined;\n\t\t\t\tif (args) {\n\t\t\t\t\tif (Array.isArray(args)) {\n\t\t\t\t\t\t[extensionId] = args;\n\t\t\t\t\t} else {\n\t\t\t\t\t\textensionId = args.extensionId;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn accessor.get(IWebIssueService).openReporter({ extensionId });\n\t\t\t});\n\n\t\t\tconst command: ICommandAction = {\n\t\t\t\tid: OpenIssueReporterActionId,\n\t\t\t\ttitle: { value: OpenIssueReporterActionLabel, original: 'Report Issue' },\n\t\t\t\tcategory: CATEGORIES.Help\n\t\t\t};\n\n\t\t\tMenuRegistry.appendMenuItem(MenuId.CommandPalette, { command });\n\t\t}\n\t}\n}\n\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(RegisterIssueContribution, LifecyclePhase.Starting);\n\nCommandsRegistry.registerCommand('_issues.getSystemStatus', (accessor) => {\n\treturn nls.localize('statusUnsupported', \"The --status argument is not yet supported in browsers.\");\n});\n\nregisterSingleton(IWebIssueService, WebIssueService, true);\n"]}