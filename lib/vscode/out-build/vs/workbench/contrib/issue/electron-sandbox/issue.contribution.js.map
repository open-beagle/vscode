{"version":3,"sources":["vs/workbench/contrib/issue/electron-sandbox/issue.contribution.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAgBhG,MAAM,wBAAwB,GAAG,mBAAQ,CAAC,EAAE,CAA2B,oBAAU,CAAC,gBAAgB,CAAC,CAAC;IAEpG,IAAI,CAAC,CAAC,iBAAO,CAAC,cAAc,EAAE;QAC7B,wBAAwB,CAAC,uBAAuB,CAAC,8BAAoB,CAAC,IAAI,CAAC,wDAAyC,CAAC,EAAE,gCAAgC,EAAE,oBAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAEhL,MAAM,4BAA4B,GAAG,GAAG,CAAC,QAAQ,CAAC,CAAkH,CAAhH,CAAkH,EAA/G,EAAE,AAA8H,CAAC,CAAC,oBAA1G,EAAE,OAAO,EAAE,CAAC,sEAAsE,CAAC;QAElK,2BAAgB,CAAC,eAAe,CAAC,oCAAyB,EAAE,UAAU,QAAQ,EAAE,IAAuC;YACtH,MAAM,IAAI,GAA+B,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC;gBAC3D,CAAC,CAAC,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE;gBAC1B,CAAC,CAAC,IAAI,IAAI,EAAE,CAAC;YAEd,OAAO,QAAQ,CAAC,GAAG,CAAC,8BAAsB,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QAChE,CAAC,CAAC,CAAC;QAEH,MAAM,OAAO,GAAmB;YAC/B,EAAE,EAAE,oCAAyB;YAC7B,KAAK,EAAE,EAAE,KAAK,EAAE,4BAA4B,EAAE,QAAQ,EAAE,cAAc,EAAE;YACxE,QAAQ,EAAE,oBAAU,CAAC,IAAI;SACzB,CAAC;QAEF,sBAAY,CAAC,cAAc,CAAC,gBAAM,CAAC,cAAc,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;KAChE;IAED,wBAAwB,CAAC,uBAAuB,CAAC,8BAAoB,CAAC,IAAI,CAAC,kCAAmB,CAAC,EAAE,kCAAkC,EAAE,oBAAU,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IAEjK,CAAA,GAAA,8BAAiB,CAAA,CAAC,8BAAsB,EAAE,oCAAqB,EAAE,IAAI,CAAC,CAAC;IAEvE,2BAAgB,CAAC,eAAe,CAAC,yBAAyB,EAAE,CAAC,QAAQ,EAAE,EAAE;QACxE,OAAO,QAAQ,CAAC,GAAG,CAAC,qBAAa,CAAC,CAAC,eAAe,EAAE,CAAC;IACtD,CAAC,CAAC,CAAC","file":"issue.contribution.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport * as nls from 'vs/nls';\nimport product from 'vs/platform/product/common/product';\nimport { SyncActionDescriptor, ICommandAction, MenuRegistry, MenuId } from 'vs/platform/actions/common/actions';\nimport { IWorkbenchActionRegistry, Extensions, CATEGORIES } from 'vs/workbench/common/actions';\nimport { ReportPerformanceIssueUsingReporterAction, OpenProcessExplorer } from 'vs/workbench/contrib/issue/electron-sandbox/issueActions';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IWorkbenchIssueService } from 'vs/workbench/services/issue/common/issue';\nimport { WorkbenchIssueService } from 'vs/workbench/services/issue/electron-sandbox/issueService';\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { IssueReporterData } from 'vs/platform/issue/common/issue';\nimport { IIssueService } from 'vs/platform/issue/electron-sandbox/issue';\nimport { OpenIssueReporterArgs, OpenIssueReporterActionId } from 'vs/workbench/contrib/issue/common/commands';\n\nconst workbenchActionsRegistry = Registry.as<IWorkbenchActionRegistry>(Extensions.WorkbenchActions);\n\nif (!!product.reportIssueUrl) {\n\tworkbenchActionsRegistry.registerWorkbenchAction(SyncActionDescriptor.from(ReportPerformanceIssueUsingReporterAction), 'Help: Report Performance Issue', CATEGORIES.Help.value);\n\n\tconst OpenIssueReporterActionLabel = nls.localize({ key: 'reportIssueInEnglish', comment: ['Translate this to \"Report Issue in English\" in all languages please!'] }, \"Report Issue...\");\n\n\tCommandsRegistry.registerCommand(OpenIssueReporterActionId, function (accessor, args?: [string] | OpenIssueReporterArgs) {\n\t\tconst data: Partial<IssueReporterData> = Array.isArray(args)\n\t\t\t? { extensionId: args[0] }\n\t\t\t: args || {};\n\n\t\treturn accessor.get(IWorkbenchIssueService).openReporter(data);\n\t});\n\n\tconst command: ICommandAction = {\n\t\tid: OpenIssueReporterActionId,\n\t\ttitle: { value: OpenIssueReporterActionLabel, original: 'Report Issue' },\n\t\tcategory: CATEGORIES.Help\n\t};\n\n\tMenuRegistry.appendMenuItem(MenuId.CommandPalette, { command });\n}\n\nworkbenchActionsRegistry.registerWorkbenchAction(SyncActionDescriptor.from(OpenProcessExplorer), 'Developer: Open Process Explorer', CATEGORIES.Developer.value);\n\nregisterSingleton(IWorkbenchIssueService, WorkbenchIssueService, true);\n\nCommandsRegistry.registerCommand('_issues.getSystemStatus', (accessor) => {\n\treturn accessor.get(IIssueService).getSystemStatus();\n});\n"]}