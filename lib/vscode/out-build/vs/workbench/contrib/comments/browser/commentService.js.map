{"version":3,"file":"commentService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/comments/browser/commentService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CommentThreadChangedEvent, CommentInfo, Comment, CommentReaction, CommentingRanges, CommentThread } from 'vs/editor/common/modes';\nimport { createDecorator, IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { Range, IRange } from 'vs/editor/common/core/range';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { ICommentThreadChangedEvent } from 'vs/workbench/contrib/comments/common/commentModel';\nimport { MainThreadCommentController } from 'vs/workbench/api/browser/mainThreadComments';\nimport { CommentMenus } from 'vs/workbench/contrib/comments/browser/commentMenus';\n\nexport const ICommentService = createDecorator<ICommentService>('commentService');\n\nexport interface IResourceCommentThreadEvent {\n\tresource: URI;\n\tcommentInfos: ICommentInfo[];\n}\n\nexport interface ICommentInfo extends CommentInfo {\n\towner: string;\n\tlabel?: string;\n}\n\nexport interface IWorkspaceCommentThreadsEvent {\n\townerId: string;\n\tcommentThreads: CommentThread[];\n}\n\nexport interface ICommentService {\n\treadonly _serviceBrand: undefined;\n\treadonly onDidSetResourceCommentInfos: Event<IResourceCommentThreadEvent>;\n\treadonly onDidSetAllCommentThreads: Event<IWorkspaceCommentThreadsEvent>;\n\treadonly onDidUpdateCommentThreads: Event<ICommentThreadChangedEvent>;\n\treadonly onDidChangeActiveCommentThread: Event<CommentThread | null>;\n\treadonly onDidChangeActiveCommentingRange: Event<{ range: Range, commentingRangesInfo: CommentingRanges }>;\n\treadonly onDidSetDataProvider: Event<void>;\n\treadonly onDidDeleteDataProvider: Event<string>;\n\tsetDocumentComments(resource: URI, commentInfos: ICommentInfo[]): void;\n\tsetWorkspaceComments(owner: string, commentsByResource: CommentThread[]): void;\n\tremoveWorkspaceComments(owner: string): void;\n\tregisterCommentController(owner: string, commentControl: MainThreadCommentController): void;\n\tunregisterCommentController(owner: string): void;\n\tgetCommentController(owner: string): MainThreadCommentController | undefined;\n\tcreateCommentThreadTemplate(owner: string, resource: URI, range: Range): void;\n\tupdateCommentThreadTemplate(owner: string, threadHandle: number, range: Range): Promise<void>;\n\tgetCommentMenus(owner: string): CommentMenus;\n\tupdateComments(ownerId: string, event: CommentThreadChangedEvent): void;\n\tdisposeCommentThread(ownerId: string, threadId: string): void;\n\tgetComments(resource: URI): Promise<(ICommentInfo | null)[]>;\n\tgetCommentingRanges(resource: URI): Promise<IRange[]>;\n\thasReactionHandler(owner: string): boolean;\n\ttoggleReaction(owner: string, resource: URI, thread: CommentThread, comment: Comment, reaction: CommentReaction): Promise<void>;\n\tsetActiveCommentThread(commentThread: CommentThread | null): void;\n}\n\nexport class CommentService extends Disposable implements ICommentService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidSetDataProvider: Emitter<void> = this._register(new Emitter<void>());\n\treadonly onDidSetDataProvider: Event<void> = this._onDidSetDataProvider.event;\n\n\tprivate readonly _onDidDeleteDataProvider: Emitter<string> = this._register(new Emitter<string>());\n\treadonly onDidDeleteDataProvider: Event<string> = this._onDidDeleteDataProvider.event;\n\n\tprivate readonly _onDidSetResourceCommentInfos: Emitter<IResourceCommentThreadEvent> = this._register(new Emitter<IResourceCommentThreadEvent>());\n\treadonly onDidSetResourceCommentInfos: Event<IResourceCommentThreadEvent> = this._onDidSetResourceCommentInfos.event;\n\n\tprivate readonly _onDidSetAllCommentThreads: Emitter<IWorkspaceCommentThreadsEvent> = this._register(new Emitter<IWorkspaceCommentThreadsEvent>());\n\treadonly onDidSetAllCommentThreads: Event<IWorkspaceCommentThreadsEvent> = this._onDidSetAllCommentThreads.event;\n\n\tprivate readonly _onDidUpdateCommentThreads: Emitter<ICommentThreadChangedEvent> = this._register(new Emitter<ICommentThreadChangedEvent>());\n\treadonly onDidUpdateCommentThreads: Event<ICommentThreadChangedEvent> = this._onDidUpdateCommentThreads.event;\n\n\tprivate readonly _onDidChangeActiveCommentThread = this._register(new Emitter<CommentThread | null>());\n\treadonly onDidChangeActiveCommentThread = this._onDidChangeActiveCommentThread.event;\n\n\tprivate readonly _onDidChangeActiveCommentingRange: Emitter<{\n\t\trange: Range, commentingRangesInfo:\n\t\tCommentingRanges\n\t}> = this._register(new Emitter<{\n\t\trange: Range, commentingRangesInfo:\n\t\tCommentingRanges\n\t}>());\n\treadonly onDidChangeActiveCommentingRange: Event<{ range: Range, commentingRangesInfo: CommentingRanges }> = this._onDidChangeActiveCommentingRange.event;\n\n\tprivate _commentControls = new Map<string, MainThreadCommentController>();\n\tprivate _commentMenus = new Map<string, CommentMenus>();\n\n\tconstructor(\n\t\t@IInstantiationService protected instantiationService: IInstantiationService\n\t) {\n\t\tsuper();\n\t}\n\n\tsetActiveCommentThread(commentThread: CommentThread | null) {\n\t\tthis._onDidChangeActiveCommentThread.fire(commentThread);\n\t}\n\n\tsetDocumentComments(resource: URI, commentInfos: ICommentInfo[]): void {\n\t\tthis._onDidSetResourceCommentInfos.fire({ resource, commentInfos });\n\t}\n\n\tsetWorkspaceComments(owner: string, commentsByResource: CommentThread[]): void {\n\t\tthis._onDidSetAllCommentThreads.fire({ ownerId: owner, commentThreads: commentsByResource });\n\t}\n\n\tremoveWorkspaceComments(owner: string): void {\n\t\tthis._onDidSetAllCommentThreads.fire({ ownerId: owner, commentThreads: [] });\n\t}\n\n\tregisterCommentController(owner: string, commentControl: MainThreadCommentController): void {\n\t\tthis._commentControls.set(owner, commentControl);\n\t\tthis._onDidSetDataProvider.fire();\n\t}\n\n\tunregisterCommentController(owner: string): void {\n\t\tthis._commentControls.delete(owner);\n\t\tthis._onDidDeleteDataProvider.fire(owner);\n\t}\n\n\tgetCommentController(owner: string): MainThreadCommentController | undefined {\n\t\treturn this._commentControls.get(owner);\n\t}\n\n\tcreateCommentThreadTemplate(owner: string, resource: URI, range: Range): void {\n\t\tconst commentController = this._commentControls.get(owner);\n\n\t\tif (!commentController) {\n\t\t\treturn;\n\t\t}\n\n\t\tcommentController.createCommentThreadTemplate(resource, range);\n\t}\n\n\tasync updateCommentThreadTemplate(owner: string, threadHandle: number, range: Range) {\n\t\tconst commentController = this._commentControls.get(owner);\n\n\t\tif (!commentController) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait commentController.updateCommentThreadTemplate(threadHandle, range);\n\t}\n\n\tdisposeCommentThread(owner: string, threadId: string) {\n\t\tlet controller = this.getCommentController(owner);\n\t\tif (controller) {\n\t\t\tcontroller.deleteCommentThreadMain(threadId);\n\t\t}\n\t}\n\n\tgetCommentMenus(owner: string): CommentMenus {\n\t\tif (this._commentMenus.get(owner)) {\n\t\t\treturn this._commentMenus.get(owner)!;\n\t\t}\n\n\t\tlet menu = this.instantiationService.createInstance(CommentMenus);\n\t\tthis._commentMenus.set(owner, menu);\n\t\treturn menu;\n\t}\n\n\tupdateComments(ownerId: string, event: CommentThreadChangedEvent): void {\n\t\tconst evt: ICommentThreadChangedEvent = Object.assign({}, event, { owner: ownerId });\n\t\tthis._onDidUpdateCommentThreads.fire(evt);\n\t}\n\n\tasync toggleReaction(owner: string, resource: URI, thread: CommentThread, comment: Comment, reaction: CommentReaction): Promise<void> {\n\t\tconst commentController = this._commentControls.get(owner);\n\n\t\tif (commentController) {\n\t\t\treturn commentController.toggleReaction(resource, thread, comment, reaction, CancellationToken.None);\n\t\t} else {\n\t\t\tthrow new Error('Not supported');\n\t\t}\n\t}\n\n\thasReactionHandler(owner: string): boolean {\n\t\tconst commentProvider = this._commentControls.get(owner);\n\n\t\tif (commentProvider) {\n\t\t\treturn !!commentProvider.features.reactionHandler;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tasync getComments(resource: URI): Promise<(ICommentInfo | null)[]> {\n\t\tlet commentControlResult: Promise<ICommentInfo | null>[] = [];\n\n\t\tthis._commentControls.forEach(control => {\n\t\t\tcommentControlResult.push(control.getDocumentComments(resource, CancellationToken.None)\n\t\t\t\t.catch(e => {\n\t\t\t\t\tconsole.log(e);\n\t\t\t\t\treturn null;\n\t\t\t\t}));\n\t\t});\n\n\t\treturn Promise.all(commentControlResult);\n\t}\n\n\tasync getCommentingRanges(resource: URI): Promise<IRange[]> {\n\t\tlet commentControlResult: Promise<IRange[]>[] = [];\n\n\t\tthis._commentControls.forEach(control => {\n\t\t\tcommentControlResult.push(control.getCommentingRanges(resource, CancellationToken.None));\n\t\t});\n\n\t\tlet ret = await Promise.all(commentControlResult);\n\t\treturn ret.reduce((prev, curr) => { prev.push(...curr); return prev; }, []);\n\t}\n}\n"]}