{"version":3,"sources":["vs/workbench/contrib/comments/browser/reactionsAction.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAQhG,MAAa,qBAAsB,SAAQ,gBAAM;QAIhD,YAAY,kBAA8B,EAAE,KAAc;YACzD,KAAK,CAAC,qBAAqB,CAAC,EAAE,EAAE,KAAK,IAAI,GAAG,CAAC,QAAQ,CAAC,CAAe,EAAE,IAAmB,CAAC,EAAE,kBAAkB,EAAE,IAAI,CAAC,CAAC;YAHhH,iBAAY,GAAc,EAAE,CAAC;YAIpC,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;QAC9C,CAAC;QACQ,GAAG;YACX,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAC1B,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC9B,CAAC;QACD,IAAI,WAAW;YACd,OAAO,IAAI,CAAC,YAAY,CAAC;QAC1B,CAAC;QACD,IAAI,WAAW,CAAC,OAAkB;YACjC,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC;QAC7B,CAAC;;IAjBF,sDAkBC;IAjBgB,wBAAE,GAAG,8BAA8B,CAAC;IAkBrD,MAAa,sBAAuB,SAAQ,gCAAc;QACzD,YAAY,MAAsB;YACjC,KAAK,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;QACzB,CAAC;QACQ,WAAW;YACnB,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;gBAChB,OAAO;aACP;YAED,IAAI,MAAM,GAAG,IAAI,CAAC,SAAS,EAAoB,CAAC;YAChD,IAAI,MAAM,CAAC,KAAK,EAAE;gBACjB,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;aACvC;YAED,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE;gBACjB,IAAI,aAAa,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC;gBACzE,aAAa,CAAC,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC;aACvC;iBAAM;gBACN,IAAI,YAAY,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC;gBACnE,YAAY,CAAC,KAAK,CAAC,OAAO,GAAG,EAAE,CAAC;gBAChC,IAAI,GAAG,GAAG,SAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBAClC,YAAY,CAAC,KAAK,CAAC,eAAe,GAAG,QAAQ,GAAG,IAAI,CAAC;gBACrD,YAAY,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;aAClC;YACD,IAAI,MAAM,CAAC,KAAK,EAAE;gBACjB,IAAI,aAAa,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC;gBACzE,aAAa,CAAC,SAAS,GAAG,GAAG,MAAM,CAAC,KAAK,EAAE,CAAC;aAC5C;QACF,CAAC;KACD;IA7BD,wDA6BC;IACD,MAAa,cAAe,SAAQ,gBAAM;QAEzC,YAAY,EAAU,EAAE,QAAgB,EAAE,EAAE,WAAmB,EAAE,EAAE,UAAmB,IAAI,EAAE,cAA8C,EAAS,IAAoB,EAAS,KAAc;YAC7L,KAAK,CAAC,cAAc,CAAC,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,cAAc,CAAC,CAAC;YAD+E,SAAI,GAAJ,IAAI,CAAgB;YAAS,UAAK,GAAL,KAAK,CAAS;QAE9L,CAAC;;IAJF,wCAKC;IAJgB,iBAAE,GAAG,yBAAyB,CAAC","file":"reactionsAction.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport * as dom from 'vs/base/browser/dom';\nimport { Action, IAction } from 'vs/base/common/actions';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { ActionViewItem } from 'vs/base/browser/ui/actionbar/actionViewItems';\n\nexport class ToggleReactionsAction extends Action {\n\tstatic readonly ID = 'toolbar.toggle.pickReactions';\n\tprivate _menuActions: IAction[] = [];\n\tprivate toggleDropdownMenu: () => void;\n\tconstructor(toggleDropdownMenu: () => void, title?: string) {\n\t\tsuper(ToggleReactionsAction.ID, title || nls.localize('pickReactions', \"Pick Reactions...\"), 'toggle-reactions', true);\n\t\tthis.toggleDropdownMenu = toggleDropdownMenu;\n\t}\n\toverride run(): Promise<any> {\n\t\tthis.toggleDropdownMenu();\n\t\treturn Promise.resolve(true);\n\t}\n\tget menuActions() {\n\t\treturn this._menuActions;\n\t}\n\tset menuActions(actions: IAction[]) {\n\t\tthis._menuActions = actions;\n\t}\n}\nexport class ReactionActionViewItem extends ActionViewItem {\n\tconstructor(action: ReactionAction) {\n\t\tsuper(null, action, {});\n\t}\n\toverride updateLabel(): void {\n\t\tif (!this.label) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet action = this.getAction() as ReactionAction;\n\t\tif (action.class) {\n\t\t\tthis.label.classList.add(action.class);\n\t\t}\n\n\t\tif (!action.icon) {\n\t\t\tlet reactionLabel = dom.append(this.label, dom.$('span.reaction-label'));\n\t\t\treactionLabel.innerText = action.label;\n\t\t} else {\n\t\t\tlet reactionIcon = dom.append(this.label, dom.$('.reaction-icon'));\n\t\t\treactionIcon.style.display = '';\n\t\t\tlet uri = URI.revive(action.icon);\n\t\t\treactionIcon.style.backgroundImage = `url('${uri}')`;\n\t\t\treactionIcon.title = action.label;\n\t\t}\n\t\tif (action.count) {\n\t\t\tlet reactionCount = dom.append(this.label, dom.$('span.reaction-count'));\n\t\t\treactionCount.innerText = `${action.count}`;\n\t\t}\n\t}\n}\nexport class ReactionAction extends Action {\n\tstatic readonly ID = 'toolbar.toggle.reaction';\n\tconstructor(id: string, label: string = '', cssClass: string = '', enabled: boolean = true, actionCallback?: (event?: any) => Promise<any>, public icon?: UriComponents, public count?: number) {\n\t\tsuper(ReactionAction.ID, label, cssClass, enabled, actionCallback);\n\t}\n}\n"]}