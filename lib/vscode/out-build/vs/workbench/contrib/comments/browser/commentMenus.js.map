{"version":3,"file":"commentMenus.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/comments/browser/commentMenus.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAShG,IAAa,YAAY,GAAzB,MAAa,YAAY;QACxB,YACgC,WAAyB;YAAzB,gBAAW,GAAX,WAAW,CAAc;QACrD,CAAC;QAEL,4BAA4B,CAAC,aAA4B,EAAE,iBAAqC;YAC/F,OAAO,IAAI,CAAC,OAAO,CAAC,gBAAM,CAAC,kBAAkB,EAAE,iBAAiB,CAAC,CAAC;QACnE,CAAC;QAED,uBAAuB,CAAC,aAA4B,EAAE,iBAAqC;YAC1F,OAAO,IAAI,CAAC,OAAO,CAAC,gBAAM,CAAC,oBAAoB,EAAE,iBAAiB,CAAC,CAAC;QACrE,CAAC;QAED,sBAAsB,CAAC,OAAgB,EAAE,iBAAqC;YAC7E,OAAO,IAAI,CAAC,OAAO,CAAC,gBAAM,CAAC,YAAY,EAAE,iBAAiB,CAAC,CAAC;QAC7D,CAAC;QAED,iBAAiB,CAAC,OAAgB,EAAE,iBAAqC;YACxE,OAAO,IAAI,CAAC,OAAO,CAAC,gBAAM,CAAC,cAAc,EAAE,iBAAiB,CAAC,CAAC;QAC/D,CAAC;QAEO,OAAO,CAAC,MAAc,EAAE,iBAAqC;YACpE,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,EAAE,iBAAiB,CAAC,CAAC;YAEpE,MAAM,OAAO,GAAc,EAAE,CAAC;YAC9B,MAAM,SAAS,GAAc,EAAE,CAAC;YAChC,MAAM,MAAM,GAAG,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC;YAEtC,CAAA,GAAA,2DAAiC,CAAA,CAAC,IAAI,EAAE,EAAE,iBAAiB,EAAE,IAAI,EAAE,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;YAEvF,OAAO,IAAI,CAAC;QACb,CAAC;QAED,OAAO;QAEP,CAAC;KACD,CAAA;IApCY,YAAY;QAEtB,WAAA,sBAAY,CAAA;OAFF,YAAY,CAoCxB;IApCY,oCAAY","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { IMenuService, MenuId, IMenu } from 'vs/platform/actions/common/actions';\nimport { IAction } from 'vs/base/common/actions';\nimport { Comment, CommentThread } from 'vs/editor/common/modes';\nimport { createAndFillInContextMenuActions } from 'vs/platform/actions/browser/menuEntryActionViewItem';\n\nexport class CommentMenus implements IDisposable {\n\tconstructor(\n\t\t@IMenuService private readonly menuService: IMenuService\n\t) { }\n\n\tgetCommentThreadTitleActions(commentThread: CommentThread, contextKeyService: IContextKeyService): IMenu {\n\t\treturn this.getMenu(MenuId.CommentThreadTitle, contextKeyService);\n\t}\n\n\tgetCommentThreadActions(commentThread: CommentThread, contextKeyService: IContextKeyService): IMenu {\n\t\treturn this.getMenu(MenuId.CommentThreadActions, contextKeyService);\n\t}\n\n\tgetCommentTitleActions(comment: Comment, contextKeyService: IContextKeyService): IMenu {\n\t\treturn this.getMenu(MenuId.CommentTitle, contextKeyService);\n\t}\n\n\tgetCommentActions(comment: Comment, contextKeyService: IContextKeyService): IMenu {\n\t\treturn this.getMenu(MenuId.CommentActions, contextKeyService);\n\t}\n\n\tprivate getMenu(menuId: MenuId, contextKeyService: IContextKeyService): IMenu {\n\t\tconst menu = this.menuService.createMenu(menuId, contextKeyService);\n\n\t\tconst primary: IAction[] = [];\n\t\tconst secondary: IAction[] = [];\n\t\tconst result = { primary, secondary };\n\n\t\tcreateAndFillInContextMenuActions(menu, { shouldForwardArgs: true }, result, 'inline');\n\n\t\treturn menu;\n\t}\n\n\tdispose(): void {\n\n\t}\n}\n"]}