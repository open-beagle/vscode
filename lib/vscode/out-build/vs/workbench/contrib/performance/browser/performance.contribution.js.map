{"version":3,"sources":["vs/workbench/contrib/performance/browser/performance.contribution.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAahG,8BAA8B;IAE9B,mBAAQ,CAAC,EAAE,CAAkC,0BAAU,CAAC,SAAS,CAAC,CAAC,6BAA6B,CAC/F,gCAAe,gBAEf,CAAC;IAEF,mBAAQ,CAAC,EAAE,CAA8B,yBAAgB,CAAC,oBAAoB,CAAC,CAAC,6BAA6B,CAC5G,8BAAa,CAAC,EAAE,EAChB;QACC,YAAY;YACX,OAAO,IAAI,CAAC;QACb,CAAC;QACD,SAAS;YACR,OAAO,EAAE,CAAC;QACX,CAAC;QACD,WAAW,CAAC,oBAA2C;YACtD,OAAO,oBAAoB,CAAC,cAAc,CAAC,8BAAa,CAAC,CAAC;QAC3D,CAAC;KACD,CACD,CAAC;IAGF,CAAA,GAAA,yBAAe,CAAA,CAAC,KAAM,SAAQ,iBAAO;QAEpC;YACC,KAAK,CAAC;gBACL,EAAE,EAAE,eAAe;gBACnB,KAAK,EAAE,EAAE,KAAK,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAY,EAAE,IAAqB,CAAC,EAAE,QAAQ,EAAE,qBAAqB,EAAE;gBAChG,QAAQ,EAAE,oBAAU,CAAC,SAAS;gBAC9B,EAAE,EAAE,IAAI;aACR,CAAC,CAAC;QACJ,CAAC;QAED,GAAG,CAAC,QAA0B;YAC7B,MAAM,aAAa,GAAG,QAAQ,CAAC,GAAG,CAAC,8BAAc,CAAC,CAAC;YACnD,MAAM,YAAY,GAAG,QAAQ,CAAC,GAAG,CAAC,qCAAqB,CAAC,CAAC;YACzD,OAAO,aAAa,CAAC,UAAU,CAAC,YAAY,CAAC,cAAc,CAAC,8BAAa,CAAC,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;QAC/F,CAAC;KACD,CAAC,CAAC","file":"performance.contribution.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { registerAction2, Action2 } from 'vs/platform/actions/common/actions';\nimport { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { CATEGORIES } from 'vs/workbench/common/actions';\nimport { Extensions, IWorkbenchContributionsRegistry } from 'vs/workbench/common/contributions';\nimport { EditorExtensions, IEditorInputSerializer, IEditorInputFactoryRegistry } from 'vs/workbench/common/editor';\nimport { PerfviewContrib, PerfviewInput } from 'vs/workbench/contrib/performance/browser/perfviewEditor';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\n\n// -- startup performance view\n\nRegistry.as<IWorkbenchContributionsRegistry>(Extensions.Workbench).registerWorkbenchContribution(\n\tPerfviewContrib,\n\tLifecyclePhase.Ready\n);\n\nRegistry.as<IEditorInputFactoryRegistry>(EditorExtensions.EditorInputFactories).registerEditorInputSerializer(\n\tPerfviewInput.Id,\n\tclass implements IEditorInputSerializer {\n\t\tcanSerialize(): boolean {\n\t\t\treturn true;\n\t\t}\n\t\tserialize(): string {\n\t\t\treturn '';\n\t\t}\n\t\tdeserialize(instantiationService: IInstantiationService): PerfviewInput {\n\t\t\treturn instantiationService.createInstance(PerfviewInput);\n\t\t}\n\t}\n);\n\n\nregisterAction2(class extends Action2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'perfview.show',\n\t\t\ttitle: { value: localize('show.label', \"Startup Performance\"), original: 'Startup Performance' },\n\t\t\tcategory: CATEGORIES.Developer,\n\t\t\tf1: true\n\t\t});\n\t}\n\n\trun(accessor: ServicesAccessor) {\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst instaService = accessor.get(IInstantiationService);\n\t\treturn editorService.openEditor(instaService.createInstance(PerfviewInput), { pinned: true });\n\t}\n});\n"]}