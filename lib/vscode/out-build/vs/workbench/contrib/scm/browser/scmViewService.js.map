{"version":3,"file":"scmViewService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/scm/browser/scmViewService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { ISCMViewService, ISCMRepository, ISCMService, ISCMViewVisibleRepositoryChangeEvent, ISCMMenus, ISCMProvider } from 'vs/workbench/contrib/scm/common/scm';\nimport { Iterable } from 'vs/base/common/iterator';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { SCMMenus } from 'vs/workbench/contrib/scm/browser/menus';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { debounce } from 'vs/base/common/decorators';\nimport { ILogService } from 'vs/platform/log/common/log';\n\nfunction getProviderStorageKey(provider: ISCMProvider): string {\n\treturn `${provider.contextValue}:${provider.label}${provider.rootUri ? `:${provider.rootUri.toString()}` : ''}`;\n}\n\nexport interface ISCMViewServiceState {\n\treadonly all: string[];\n\treadonly visible: number[];\n}\n\nexport class SCMViewService implements ISCMViewService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\treadonly menus: ISCMMenus;\n\n\tprivate didFinishLoading: boolean = false;\n\tprivate provisionalVisibleRepository: ISCMRepository | undefined;\n\tprivate previousState: ISCMViewServiceState | undefined;\n\tprivate disposables = new DisposableStore();\n\n\tprivate _visibleRepositoriesSet = new Set<ISCMRepository>();\n\tprivate _visibleRepositories: ISCMRepository[] = [];\n\n\tget visibleRepositories(): ISCMRepository[] {\n\t\treturn this._visibleRepositories;\n\t}\n\n\tset visibleRepositories(visibleRepositories: ISCMRepository[]) {\n\t\tconst set = new Set(visibleRepositories);\n\t\tconst added = new Set<ISCMRepository>();\n\t\tconst removed = new Set<ISCMRepository>();\n\n\t\tfor (const repository of visibleRepositories) {\n\t\t\tif (!this._visibleRepositoriesSet.has(repository)) {\n\t\t\t\tadded.add(repository);\n\t\t\t}\n\t\t}\n\n\t\tfor (const repository of this._visibleRepositories) {\n\t\t\tif (!set.has(repository)) {\n\t\t\t\tremoved.add(repository);\n\t\t\t}\n\t\t}\n\n\t\tif (added.size === 0 && removed.size === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._visibleRepositories = visibleRepositories;\n\t\tthis._visibleRepositoriesSet = set;\n\t\tthis._onDidSetVisibleRepositories.fire({ added, removed });\n\n\t\tif (this._focusedRepository && removed.has(this._focusedRepository)) {\n\t\t\tthis.focus(this._visibleRepositories[0]);\n\t\t}\n\t}\n\n\tprivate _onDidChangeRepositories = new Emitter<ISCMViewVisibleRepositoryChangeEvent>();\n\tprivate _onDidSetVisibleRepositories = new Emitter<ISCMViewVisibleRepositoryChangeEvent>();\n\treadonly onDidChangeVisibleRepositories = Event.any(\n\t\tthis._onDidSetVisibleRepositories.event,\n\t\tEvent.debounce(\n\t\t\tthis._onDidChangeRepositories.event,\n\t\t\t(last, e) => {\n\t\t\t\tif (!last) {\n\t\t\t\t\treturn e;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tadded: Iterable.concat(last.added, e.added),\n\t\t\t\t\tremoved: Iterable.concat(last.removed, e.removed),\n\t\t\t\t};\n\t\t\t}, 0)\n\t);\n\n\tprivate _focusedRepository: ISCMRepository | undefined;\n\n\tget focusedRepository(): ISCMRepository | undefined {\n\t\treturn this._focusedRepository;\n\t}\n\n\tprivate _onDidFocusRepository = new Emitter<ISCMRepository | undefined>();\n\treadonly onDidFocusRepository = this._onDidFocusRepository.event;\n\n\tconstructor(\n\t\t@ISCMService private readonly scmService: ISCMService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tthis.menus = instantiationService.createInstance(SCMMenus);\n\n\t\tscmService.onDidAddRepository(this.onDidAddRepository, this, this.disposables);\n\t\tscmService.onDidRemoveRepository(this.onDidRemoveRepository, this, this.disposables);\n\n\t\tfor (const repository of scmService.repositories) {\n\t\t\tthis.onDidAddRepository(repository);\n\t\t}\n\n\t\ttry {\n\t\t\tthis.previousState = JSON.parse(storageService.get('scm:view:visibleRepositories', StorageScope.WORKSPACE, ''));\n\t\t\tthis.eventuallyFinishLoading();\n\t\t} catch {\n\t\t\t// noop\n\t\t}\n\n\t\tstorageService.onWillSaveState(this.onWillSaveState, this, this.disposables);\n\t}\n\n\tprivate onDidAddRepository(repository: ISCMRepository): void {\n\t\tthis.logService.trace('SCMViewService#onDidAddRepository', getProviderStorageKey(repository.provider));\n\n\t\tif (!this.didFinishLoading) {\n\t\t\tthis.eventuallyFinishLoading();\n\t\t}\n\n\t\tlet removed: Iterable<ISCMRepository> = Iterable.empty();\n\n\t\tif (this.previousState) {\n\t\t\tconst index = this.previousState.all.indexOf(getProviderStorageKey(repository.provider));\n\n\t\t\tif (index === -1) { // saw a repo we did not expect\n\t\t\t\tthis.logService.trace('SCMViewService#onDidAddRepository', 'This is a new repository, so we stop the heuristics');\n\n\t\t\t\tconst added: ISCMRepository[] = [];\n\t\t\t\tfor (const repo of this.scmService.repositories) { // all should be visible\n\t\t\t\t\tif (!this._visibleRepositoriesSet.has(repo)) {\n\t\t\t\t\t\tadded.push(repository);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._visibleRepositories = [...this.scmService.repositories];\n\t\t\t\tthis._visibleRepositoriesSet = new Set(this.scmService.repositories);\n\t\t\t\tthis._onDidChangeRepositories.fire({ added, removed: Iterable.empty() });\n\t\t\t\tthis.finishLoading();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst visible = this.previousState.visible.indexOf(index) > -1;\n\n\t\t\tif (!visible) {\n\t\t\t\tif (this._visibleRepositories.length === 0) { // should make it visible, until other repos come along\n\t\t\t\t\tthis.provisionalVisibleRepository = repository;\n\t\t\t\t} else {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (this.provisionalVisibleRepository) {\n\t\t\t\t\tthis._visibleRepositories = [];\n\t\t\t\t\tthis._visibleRepositoriesSet = new Set();\n\t\t\t\t\tremoved = [this.provisionalVisibleRepository];\n\t\t\t\t\tthis.provisionalVisibleRepository = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._visibleRepositories.push(repository);\n\t\tthis._visibleRepositoriesSet.add(repository);\n\t\tthis._onDidChangeRepositories.fire({ added: [repository], removed });\n\n\t\tif (!this._focusedRepository) {\n\t\t\tthis.focus(repository);\n\t\t}\n\t}\n\n\tprivate onDidRemoveRepository(repository: ISCMRepository): void {\n\t\tthis.logService.trace('SCMViewService#onDidRemoveRepository', getProviderStorageKey(repository.provider));\n\n\t\tif (!this.didFinishLoading) {\n\t\t\tthis.eventuallyFinishLoading();\n\t\t}\n\n\t\tconst index = this._visibleRepositories.indexOf(repository);\n\n\t\tif (index > -1) {\n\t\t\tlet added: Iterable<ISCMRepository> = Iterable.empty();\n\n\t\t\tthis._visibleRepositories.splice(index, 1);\n\t\t\tthis._visibleRepositoriesSet.delete(repository);\n\n\t\t\tif (this._visibleRepositories.length === 0 && this.scmService.repositories.length > 0) {\n\t\t\t\tconst first = this.scmService.repositories[0];\n\n\t\t\t\tthis._visibleRepositories.push(first);\n\t\t\t\tthis._visibleRepositoriesSet.add(first);\n\t\t\t\tadded = [first];\n\t\t\t}\n\n\t\t\tthis._onDidChangeRepositories.fire({ added, removed: [repository] });\n\t\t}\n\n\t\tif (this._focusedRepository === repository) {\n\t\t\tthis.focus(this._visibleRepositories[0]);\n\t\t}\n\t}\n\n\tisVisible(repository: ISCMRepository): boolean {\n\t\treturn this._visibleRepositoriesSet.has(repository);\n\t}\n\n\ttoggleVisibility(repository: ISCMRepository, visible?: boolean): void {\n\t\tif (typeof visible === 'undefined') {\n\t\t\tvisible = !this.isVisible(repository);\n\t\t} else if (this.isVisible(repository) === visible) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (visible) {\n\t\t\tthis.visibleRepositories = [...this.visibleRepositories, repository];\n\t\t} else {\n\t\t\tconst index = this.visibleRepositories.indexOf(repository);\n\n\t\t\tif (index > -1) {\n\t\t\t\tthis.visibleRepositories = [\n\t\t\t\t\t...this.visibleRepositories.slice(0, index),\n\t\t\t\t\t...this.visibleRepositories.slice(index + 1)\n\t\t\t\t];\n\t\t\t}\n\t\t}\n\t}\n\n\tfocus(repository: ISCMRepository | undefined): void {\n\t\tif (repository && !this.visibleRepositories.includes(repository)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._focusedRepository = repository;\n\t\tthis._onDidFocusRepository.fire(repository);\n\t}\n\n\tprivate onWillSaveState(): void {\n\t\tif (!this.didFinishLoading) { // don't remember state, if the workbench didn't really finish loading\n\t\t\treturn;\n\t\t}\n\n\t\tconst all = this.scmService.repositories.map(r => getProviderStorageKey(r.provider));\n\t\tconst visible = this.visibleRepositories.map(r => all.indexOf(getProviderStorageKey(r.provider)));\n\t\tconst raw = JSON.stringify({ all, visible });\n\n\t\tthis.storageService.store('scm:view:visibleRepositories', raw, StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t}\n\n\t@debounce(2000)\n\tprivate eventuallyFinishLoading(): void {\n\t\tthis.logService.trace('SCMViewService#eventuallyFinishLoading');\n\t\tthis.finishLoading();\n\t}\n\n\tprivate finishLoading(): void {\n\t\tif (this.didFinishLoading) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.logService.trace('SCMViewService#finishLoading');\n\t\tthis.didFinishLoading = true;\n\t\tthis.previousState = undefined;\n\t}\n\n\tdispose(): void {\n\t\tthis.disposables.dispose();\n\t\tthis._onDidChangeRepositories.dispose();\n\t\tthis._onDidSetVisibleRepositories.dispose();\n\t}\n}\n"]}