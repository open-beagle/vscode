{"version":3,"file":"scmService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/scm/common/scmService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { ISCMService, ISCMProvider, ISCMInput, ISCMRepository, IInputValidator, ISCMInputChangeEvent, SCMInputChangeReason, InputValidationType, IInputValidation } from './scm';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IContextKey, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { HistoryNavigator2 } from 'vs/base/common/history';\n\nclass SCMInput implements ISCMInput {\n\n\tprivate _value = '';\n\n\tget value(): string {\n\t\treturn this._value;\n\t}\n\n\tprivate readonly _onDidChange = new Emitter<ISCMInputChangeEvent>();\n\treadonly onDidChange: Event<ISCMInputChangeEvent> = this._onDidChange.event;\n\n\tprivate _placeholder = '';\n\n\tget placeholder(): string {\n\t\treturn this._placeholder;\n\t}\n\n\tset placeholder(placeholder: string) {\n\t\tthis._placeholder = placeholder;\n\t\tthis._onDidChangePlaceholder.fire(placeholder);\n\t}\n\n\tprivate readonly _onDidChangePlaceholder = new Emitter<string>();\n\treadonly onDidChangePlaceholder: Event<string> = this._onDidChangePlaceholder.event;\n\n\tprivate _visible = true;\n\n\tget visible(): boolean {\n\t\treturn this._visible;\n\t}\n\n\tset visible(visible: boolean) {\n\t\tthis._visible = visible;\n\t\tthis._onDidChangeVisibility.fire(visible);\n\t}\n\n\tprivate readonly _onDidChangeVisibility = new Emitter<boolean>();\n\treadonly onDidChangeVisibility: Event<boolean> = this._onDidChangeVisibility.event;\n\n\tsetFocus(): void {\n\t\tthis._onDidChangeFocus.fire();\n\t}\n\n\tprivate readonly _onDidChangeFocus = new Emitter<void>();\n\treadonly onDidChangeFocus: Event<void> = this._onDidChangeFocus.event;\n\n\tshowValidationMessage(message: string, type: InputValidationType): void {\n\t\tthis._onDidChangeValidationMessage.fire({ message: message, type: type });\n\t}\n\n\tprivate readonly _onDidChangeValidationMessage = new Emitter<IInputValidation>();\n\treadonly onDidChangeValidationMessage: Event<IInputValidation> = this._onDidChangeValidationMessage.event;\n\n\n\tprivate _validateInput: IInputValidator = () => Promise.resolve(undefined);\n\n\tget validateInput(): IInputValidator {\n\t\treturn this._validateInput;\n\t}\n\n\tset validateInput(validateInput: IInputValidator) {\n\t\tthis._validateInput = validateInput;\n\t\tthis._onDidChangeValidateInput.fire();\n\t}\n\n\tprivate readonly _onDidChangeValidateInput = new Emitter<void>();\n\treadonly onDidChangeValidateInput: Event<void> = this._onDidChangeValidateInput.event;\n\n\tprivate historyNavigator: HistoryNavigator2<string>;\n\n\tconstructor(\n\t\treadonly repository: ISCMRepository,\n\t\t@IStorageService private storageService: IStorageService\n\t) {\n\t\tconst historyKey = `scm/input:${this.repository.provider.label}:${this.repository.provider.rootUri?.path}`;\n\t\tlet history: string[] | undefined;\n\t\tlet rawHistory = this.storageService.get(historyKey, StorageScope.GLOBAL, '');\n\n\t\tif (rawHistory) {\n\t\t\ttry {\n\t\t\t\thistory = JSON.parse(rawHistory);\n\t\t\t} catch {\n\t\t\t\t// noop\n\t\t\t}\n\t\t}\n\n\t\tif (!history || history.length === 0) {\n\t\t\thistory = [this._value];\n\t\t} else {\n\t\t\tthis._value = history[history.length - 1];\n\t\t}\n\n\t\tthis.historyNavigator = new HistoryNavigator2(history, 50);\n\n\t\tthis.storageService.onWillSaveState(e => {\n\t\t\tif (this.historyNavigator.isAtEnd()) {\n\t\t\t\tthis.historyNavigator.replaceLast(this._value);\n\t\t\t}\n\n\t\t\tif (this.repository.provider.rootUri) {\n\t\t\t\tthis.storageService.store(historyKey, JSON.stringify([...this.historyNavigator]), StorageScope.GLOBAL, StorageTarget.USER);\n\t\t\t}\n\t\t});\n\t}\n\n\tsetValue(value: string, transient: boolean, reason?: SCMInputChangeReason) {\n\t\tif (value === this._value) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!transient) {\n\t\t\tthis.historyNavigator.replaceLast(this._value);\n\t\t\tthis.historyNavigator.add(value);\n\t\t}\n\n\t\tthis._value = value;\n\t\tthis._onDidChange.fire({ value, reason });\n\t}\n\n\tshowNextHistoryValue(): void {\n\t\tif (this.historyNavigator.isAtEnd()) {\n\t\t\treturn;\n\t\t} else if (!this.historyNavigator.has(this.value)) {\n\t\t\tthis.historyNavigator.replaceLast(this._value);\n\t\t\tthis.historyNavigator.resetCursor();\n\t\t}\n\n\t\tconst value = this.historyNavigator.next();\n\t\tthis.setValue(value, true, SCMInputChangeReason.HistoryNext);\n\t}\n\n\tshowPreviousHistoryValue(): void {\n\t\tif (this.historyNavigator.isAtEnd()) {\n\t\t\tthis.historyNavigator.replaceLast(this._value);\n\t\t} else if (!this.historyNavigator.has(this._value)) {\n\t\t\tthis.historyNavigator.replaceLast(this._value);\n\t\t\tthis.historyNavigator.resetCursor();\n\t\t}\n\n\t\tconst value = this.historyNavigator.previous();\n\t\tthis.setValue(value, true, SCMInputChangeReason.HistoryPrevious);\n\t}\n}\n\nclass SCMRepository implements ISCMRepository {\n\n\tprivate _selected = false;\n\tget selected(): boolean {\n\t\treturn this._selected;\n\t}\n\n\tprivate readonly _onDidChangeSelection = new Emitter<boolean>();\n\treadonly onDidChangeSelection: Event<boolean> = this._onDidChangeSelection.event;\n\n\treadonly input: ISCMInput = new SCMInput(this, this.storageService);\n\n\tconstructor(\n\t\tpublic readonly provider: ISCMProvider,\n\t\tprivate disposable: IDisposable,\n\t\t@IStorageService private storageService: IStorageService\n\t) { }\n\n\tsetSelected(selected: boolean): void {\n\t\tif (this._selected === selected) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._selected = selected;\n\t\tthis._onDidChangeSelection.fire(selected);\n\t}\n\n\tdispose(): void {\n\t\tthis.disposable.dispose();\n\t\tthis.provider.dispose();\n\t}\n}\n\nexport class SCMService implements ISCMService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate _providerIds = new Set<string>();\n\tprivate _repositories: ISCMRepository[] = [];\n\tget repositories(): ISCMRepository[] { return [...this._repositories]; }\n\n\tprivate providerCount: IContextKey<number>;\n\n\tprivate readonly _onDidAddProvider = new Emitter<ISCMRepository>();\n\treadonly onDidAddRepository: Event<ISCMRepository> = this._onDidAddProvider.event;\n\n\tprivate readonly _onDidRemoveProvider = new Emitter<ISCMRepository>();\n\treadonly onDidRemoveRepository: Event<ISCMRepository> = this._onDidRemoveProvider.event;\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IStorageService private storageService: IStorageService\n\t) {\n\t\tthis.providerCount = contextKeyService.createKey('scm.providerCount', 0);\n\t}\n\n\tregisterSCMProvider(provider: ISCMProvider): ISCMRepository {\n\t\tthis.logService.trace('SCMService#registerSCMProvider');\n\n\t\tif (this._providerIds.has(provider.id)) {\n\t\t\tthrow new Error(`SCM Provider ${provider.id} already exists.`);\n\t\t}\n\n\t\tthis._providerIds.add(provider.id);\n\n\t\tconst disposable = toDisposable(() => {\n\t\t\tconst index = this._repositories.indexOf(repository);\n\n\t\t\tif (index < 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._providerIds.delete(provider.id);\n\t\t\tthis._repositories.splice(index, 1);\n\t\t\tthis._onDidRemoveProvider.fire(repository);\n\n\t\t\tthis.providerCount.set(this._repositories.length);\n\t\t});\n\n\t\tconst repository = new SCMRepository(provider, disposable, this.storageService);\n\t\tthis._repositories.push(repository);\n\t\tthis._onDidAddProvider.fire(repository);\n\n\t\tthis.providerCount.set(this._repositories.length);\n\t\treturn repository;\n\t}\n}\n"]}