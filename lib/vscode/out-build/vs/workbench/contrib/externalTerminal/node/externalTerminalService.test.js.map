{"version":3,"file":"externalTerminalService.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/externalTerminal/node/externalTerminalService.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { deepEqual, equal } from 'assert';\nimport { WindowsExternalTerminalService, LinuxExternalTerminalService, MacExternalTerminalService } from 'vs/workbench/contrib/externalTerminal/node/externalTerminalService';\nimport { DEFAULT_TERMINAL_OSX } from 'vs/workbench/contrib/externalTerminal/node/externalTerminal';\n\nsuite('ExternalTerminalService', () => {\n\tlet mockOnExit: Function;\n\tlet mockOnError: Function;\n\tlet mockConfig: any;\n\n\tsetup(() => {\n\t\tmockConfig = {\n\t\t\tterminal: {\n\t\t\t\texplorerKind: 'external',\n\t\t\t\texternal: {\n\t\t\t\t\twindowsExec: 'testWindowsShell',\n\t\t\t\t\tosxExec: 'testOSXShell',\n\t\t\t\t\tlinuxExec: 'testLinuxShell'\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tmockOnExit = (s: any) => s;\n\t\tmockOnError = (e: any) => e;\n\t});\n\n\ttest(`WinTerminalService - uses terminal from configuration`, done => {\n\t\tlet testShell = 'cmd';\n\t\tlet testCwd = 'path/to/workspace';\n\t\tlet mockSpawner = {\n\t\t\tspawn: (command: any, args: any, opts: any) => {\n\t\t\t\t// assert\n\t\t\t\tequal(command, testShell, 'shell should equal expected');\n\t\t\t\tequal(args[args.length - 1], mockConfig.terminal.external.windowsExec, 'terminal should equal expected');\n\t\t\t\tequal(opts.cwd, testCwd, 'opts.cwd should equal expected');\n\t\t\t\tdone();\n\t\t\t\treturn {\n\t\t\t\t\ton: (evt: any) => evt\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t\tlet testService = new WindowsExternalTerminalService(mockConfig);\n\t\t(<any>testService).spawnTerminal(\n\t\t\tmockSpawner,\n\t\t\tmockConfig,\n\t\t\ttestShell,\n\t\t\ttestCwd,\n\t\t\tmockOnExit,\n\t\t\tmockOnError\n\t\t);\n\t});\n\n\ttest(`WinTerminalService - uses default terminal when configuration.terminal.external.windowsExec is undefined`, done => {\n\t\tlet testShell = 'cmd';\n\t\tlet testCwd = 'path/to/workspace';\n\t\tlet mockSpawner = {\n\t\t\tspawn: (command: any, args: any, opts: any) => {\n\t\t\t\t// assert\n\t\t\t\tequal(args[args.length - 1], WindowsExternalTerminalService.getDefaultTerminalWindows(), 'terminal should equal expected');\n\t\t\t\tdone();\n\t\t\t\treturn {\n\t\t\t\t\ton: (evt: any) => evt\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t\tmockConfig.terminal.external.windowsExec = undefined;\n\t\tlet testService = new WindowsExternalTerminalService(mockConfig);\n\t\t(<any>testService).spawnTerminal(\n\t\t\tmockSpawner,\n\t\t\tmockConfig,\n\t\t\ttestShell,\n\t\t\ttestCwd,\n\t\t\tmockOnExit,\n\t\t\tmockOnError\n\t\t);\n\t});\n\n\ttest(`WinTerminalService - uses default terminal when configuration.terminal.external.windowsExec is undefined`, done => {\n\t\tlet testShell = 'cmd';\n\t\tlet testCwd = 'c:/foo';\n\t\tlet mockSpawner = {\n\t\t\tspawn: (command: any, args: any, opts: any) => {\n\t\t\t\t// assert\n\t\t\t\tequal(opts.cwd, 'C:/foo', 'cwd should be uppercase regardless of the case that\\'s passed in');\n\t\t\t\tdone();\n\t\t\t\treturn {\n\t\t\t\t\ton: (evt: any) => evt\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t\tlet testService = new WindowsExternalTerminalService(mockConfig);\n\t\t(<any>testService).spawnTerminal(\n\t\t\tmockSpawner,\n\t\t\tmockConfig,\n\t\t\ttestShell,\n\t\t\ttestCwd,\n\t\t\tmockOnExit,\n\t\t\tmockOnError\n\t\t);\n\t});\n\n\ttest(`WinTerminalService - cmder should be spawned differently`, done => {\n\t\tlet testShell = 'cmd';\n\t\tmockConfig.terminal.external.windowsExec = 'cmder';\n\t\tlet testCwd = 'c:/foo';\n\t\tlet mockSpawner = {\n\t\t\tspawn: (command: any, args: any, opts: any) => {\n\t\t\t\t// assert\n\t\t\t\tdeepEqual(args, ['C:/foo']);\n\t\t\t\tequal(opts, undefined);\n\t\t\t\tdone();\n\t\t\t\treturn { on: (evt: any) => evt };\n\t\t\t}\n\t\t};\n\t\tlet testService = new WindowsExternalTerminalService(mockConfig);\n\t\t(<any>testService).spawnTerminal(\n\t\t\tmockSpawner,\n\t\t\tmockConfig,\n\t\t\ttestShell,\n\t\t\ttestCwd,\n\t\t\tmockOnExit,\n\t\t\tmockOnError\n\t\t);\n\t});\n\n\ttest(`WinTerminalService - windows terminal should open workspace directory`, done => {\n\t\tlet testShell = 'wt';\n\t\tlet testCwd = 'c:/foo';\n\t\tlet mockSpawner = {\n\t\t\tspawn: (command: any, args: any, opts: any) => {\n\t\t\t\t// assert\n\t\t\t\tequal(opts.cwd, 'C:/foo');\n\t\t\t\tdone();\n\t\t\t\treturn { on: (evt: any) => evt };\n\t\t\t}\n\t\t};\n\t\tlet testService = new WindowsExternalTerminalService(mockConfig);\n\t\t(<any>testService).spawnTerminal(\n\t\t\tmockSpawner,\n\t\t\tmockConfig,\n\t\t\ttestShell,\n\t\t\ttestCwd,\n\t\t\tmockOnExit,\n\t\t\tmockOnError\n\t\t);\n\t});\n\n\ttest(`MacTerminalService - uses terminal from configuration`, done => {\n\t\tlet testCwd = 'path/to/workspace';\n\t\tlet mockSpawner = {\n\t\t\tspawn: (command: any, args: any, opts: any) => {\n\t\t\t\t// assert\n\t\t\t\tequal(args[1], mockConfig.terminal.external.osxExec, 'terminal should equal expected');\n\t\t\t\tdone();\n\t\t\t\treturn {\n\t\t\t\t\ton: (evt: any) => evt\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t\tlet testService = new MacExternalTerminalService(mockConfig);\n\t\t(<any>testService).spawnTerminal(\n\t\t\tmockSpawner,\n\t\t\tmockConfig,\n\t\t\ttestCwd,\n\t\t\tmockOnExit,\n\t\t\tmockOnError\n\t\t);\n\t});\n\n\ttest(`MacTerminalService - uses default terminal when configuration.terminal.external.osxExec is undefined`, done => {\n\t\tlet testCwd = 'path/to/workspace';\n\t\tlet mockSpawner = {\n\t\t\tspawn: (command: any, args: any, opts: any) => {\n\t\t\t\t// assert\n\t\t\t\tequal(args[1], DEFAULT_TERMINAL_OSX, 'terminal should equal expected');\n\t\t\t\tdone();\n\t\t\t\treturn {\n\t\t\t\t\ton: (evt: any) => evt\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t\tmockConfig.terminal.external.osxExec = undefined;\n\t\tlet testService = new MacExternalTerminalService(mockConfig);\n\t\t(<any>testService).spawnTerminal(\n\t\t\tmockSpawner,\n\t\t\tmockConfig,\n\t\t\ttestCwd,\n\t\t\tmockOnExit,\n\t\t\tmockOnError\n\t\t);\n\t});\n\n\ttest(`LinuxTerminalService - uses terminal from configuration`, done => {\n\t\tlet testCwd = 'path/to/workspace';\n\t\tlet mockSpawner = {\n\t\t\tspawn: (command: any, args: any, opts: any) => {\n\t\t\t\t// assert\n\t\t\t\tequal(command, mockConfig.terminal.external.linuxExec, 'terminal should equal expected');\n\t\t\t\tequal(opts.cwd, testCwd, 'opts.cwd should equal expected');\n\t\t\t\tdone();\n\t\t\t\treturn {\n\t\t\t\t\ton: (evt: any) => evt\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t\tlet testService = new LinuxExternalTerminalService(mockConfig);\n\t\t(<any>testService).spawnTerminal(\n\t\t\tmockSpawner,\n\t\t\tmockConfig,\n\t\t\ttestCwd,\n\t\t\tmockOnExit,\n\t\t\tmockOnError\n\t\t);\n\t});\n\n\ttest(`LinuxTerminalService - uses default terminal when configuration.terminal.external.linuxExec is undefined`, done => {\n\t\tLinuxExternalTerminalService.getDefaultTerminalLinuxReady().then(defaultTerminalLinux => {\n\t\t\tlet testCwd = 'path/to/workspace';\n\t\t\tlet mockSpawner = {\n\t\t\t\tspawn: (command: any, args: any, opts: any) => {\n\t\t\t\t\t// assert\n\t\t\t\t\tequal(command, defaultTerminalLinux, 'terminal should equal expected');\n\t\t\t\t\tdone();\n\t\t\t\t\treturn {\n\t\t\t\t\t\ton: (evt: any) => evt\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t};\n\t\t\tmockConfig.terminal.external.linuxExec = undefined;\n\t\t\tlet testService = new LinuxExternalTerminalService(mockConfig);\n\t\t\t(<any>testService).spawnTerminal(\n\t\t\t\tmockSpawner,\n\t\t\t\tmockConfig,\n\t\t\t\ttestCwd,\n\t\t\t\tmockOnExit,\n\t\t\t\tmockOnError\n\t\t\t);\n\t\t});\n\t});\n});\n"]}