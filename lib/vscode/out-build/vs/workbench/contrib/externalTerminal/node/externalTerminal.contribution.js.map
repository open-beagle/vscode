{"version":3,"sources":["vs/workbench/contrib/externalTerminal/node/externalTerminal.contribution.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAmBhG,MAAM,8BAA8B,GAAG,6CAA6C,CAAC;IACrF,yCAAmB,CAAC,gCAAgC,CAAC;QACpD,EAAE,EAAE,8BAA8B;QAClC,OAAO,EAAE,qCAA6B,iBAAgB;QACtD,IAAI,EAAE,kDAAuC;QAC7C,MAAM,4BAAmC;QACzC,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,EAAE;YAC3B,MAAM,cAAc,GAAG,QAAQ,CAAC,GAAG,CAAC,yBAAe,CAAC,CAAC;YACrD,6CAA6C;YAC7C,MAAM,eAAe,GAAG,QAAQ,CAAC,GAAG,CAAC,2CAAwB,CAAC,CAAC;YAC/D,MAAM,IAAI,GAAG,cAAc,CAAC,0BAA0B,CAAC,iBAAO,CAAC,IAAI,CAAC,CAAC;YACrE,IAAI,IAAI,EAAE;gBACT,eAAe,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aAC1C;iBAAM;gBACN,8DAA8D;gBAC9D,MAAM,UAAU,GAAG,cAAc,CAAC,iBAAiB,CAAC,iBAAO,CAAC,IAAI,CAAC,CAAC;gBAClE,IAAI,UAAU,EAAE;oBACf,eAAe,CAAC,YAAY,CAAC,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;iBAC/D;qBAAM;oBACN,MAAM,WAAW,GAAG,QAAQ,CAAC,GAAG,CAAC,0BAAY,CAAC,CAAC;oBAC/C,MAAM,QAAQ,GAAG,MAAM,WAAW,CAAC,QAAQ,EAAE,CAAC;oBAC9C,eAAe,CAAC,YAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;iBAC9C;aACD;QACF,CAAC;KACD,CAAC,CAAC;IAEH,sBAAY,CAAC,cAAc,CAAC,gBAAM,CAAC,cAAc,EAAE;QAClD,OAAO,EAAE;YACR,EAAE,EAAE,8BAA8B;YAClC,KAAK,EAAE,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAqB,EAAE,IAA4B,CAAC,EAAE,QAAQ,EAAE,4BAA4B,EAAE;SAC3H;KACD,CAAC,CAAC;IAEH,IAAI,oBAAS,EAAE;QACd,CAAA,GAAA,8BAAiB,CAAA,CAAC,2CAAwB,EAAE,wDAA8B,EAAE,IAAI,CAAC,CAAC;KAClF;SAAM,IAAI,sBAAW,EAAE;QACvB,CAAA,GAAA,8BAAiB,CAAA,CAAC,2CAAwB,EAAE,oDAA0B,EAAE,IAAI,CAAC,CAAC;KAC9E;SAAM,IAAI,kBAAO,EAAE;QACnB,CAAA,GAAA,8BAAiB,CAAA,CAAC,2CAAwB,EAAE,sDAA4B,EAAE,IAAI,CAAC,CAAC;KAChF;IAED,sDAA4B,CAAC,4BAA4B,EAAE,CAAC,IAAI,CAAC,oBAAoB,CAAC,EAAE;QACvF,IAAI,qBAAqB,GAAG,mBAAQ,CAAC,EAAE,CAAyB,kCAAU,CAAC,aAAa,CAAC,CAAC;QAC1F,qBAAqB,CAAC,qBAAqB,CAAC;YAC3C,EAAE,EAAE,kBAAkB;YACtB,KAAK,EAAE,GAAG;YACV,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,CAA4B,EAAE,IAAmB,CAAC;YACtE,IAAI,EAAE,QAAQ;YACd,UAAU,EAAE;gBACX,uBAAuB,EAAE;oBACxB,IAAI,EAAE,QAAQ;oBACd,IAAI,EAAE;wBACL,YAAY;wBACZ,UAAU;qBACV;oBACD,gBAAgB,EAAE;wBACjB,GAAG,CAAC,QAAQ,CAAC,CAAkC,EAAE,IAAoC,CAAC;wBACtF,GAAG,CAAC,QAAQ,CAAC,CAAgC,EAAE,IAAuC,CAAC;qBACvF;oBACD,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,CAA6B,EAAE,IAA6C,CAAC;oBACvG,OAAO,EAAE,YAAY;iBACrB;gBACD,+BAA+B,EAAE;oBAChC,IAAI,EAAE,QAAQ;oBACd,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,CAA+B,EAAE,IAA8C,CAAC;oBAC1G,OAAO,EAAE,wDAA8B,CAAC,yBAAyB,EAAE;oBACnE,KAAK,qBAAgC;iBACrC;gBACD,2BAA2B,EAAE;oBAC5B,IAAI,EAAE,QAAQ;oBACd,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,CAA2B,EAAE,IAAwD,CAAC;oBAChH,OAAO,EAAE,uCAAoB;oBAC7B,KAAK,qBAAgC;iBACrC;gBACD,6BAA6B,EAAE;oBAC9B,IAAI,EAAE,QAAQ;oBACd,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,CAA6B,EAAE,IAA4C,CAAC;oBACtG,OAAO,EAAE,oBAAoB;oBAC7B,KAAK,qBAAgC;iBACrC;aACD;SACD,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","file":"externalTerminal.contribution.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport * as paths from 'vs/base/common/path';\nimport { IExternalTerminalService } from 'vs/workbench/contrib/externalTerminal/common/externalTerminal';\nimport { MenuId, MenuRegistry } from 'vs/platform/actions/common/actions';\nimport { KeyMod, KeyCode } from 'vs/base/common/keyCodes';\nimport { KEYBINDING_CONTEXT_TERMINAL_NOT_FOCUSED } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { IHistoryService } from 'vs/workbench/services/history/common/history';\nimport { KeybindingsRegistry, KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { Schemas } from 'vs/base/common/network';\nimport { IPathService } from 'vs/workbench/services/path/common/pathService';\nimport { WindowsExternalTerminalService, MacExternalTerminalService, LinuxExternalTerminalService } from 'vs/workbench/contrib/externalTerminal/node/externalTerminalService';\nimport { IConfigurationRegistry, Extensions, ConfigurationScope } from 'vs/platform/configuration/common/configurationRegistry';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { isWindows, isMacintosh, isLinux } from 'vs/base/common/platform';\nimport { DEFAULT_TERMINAL_OSX } from 'vs/workbench/contrib/externalTerminal/node/externalTerminal';\n\nconst OPEN_NATIVE_CONSOLE_COMMAND_ID = 'workbench.action.terminal.openNativeConsole';\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: OPEN_NATIVE_CONSOLE_COMMAND_ID,\n\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_C,\n\twhen: KEYBINDING_CONTEXT_TERMINAL_NOT_FOCUSED,\n\tweight: KeybindingWeight.WorkbenchContrib,\n\thandler: async (accessor) => {\n\t\tconst historyService = accessor.get(IHistoryService);\n\t\t// Open external terminal in local workspaces\n\t\tconst terminalService = accessor.get(IExternalTerminalService);\n\t\tconst root = historyService.getLastActiveWorkspaceRoot(Schemas.file);\n\t\tif (root) {\n\t\t\tterminalService.openTerminal(root.fsPath);\n\t\t} else {\n\t\t\t// Opens current file's folder, if no folder is open in editor\n\t\t\tconst activeFile = historyService.getLastActiveFile(Schemas.file);\n\t\t\tif (activeFile) {\n\t\t\t\tterminalService.openTerminal(paths.dirname(activeFile.fsPath));\n\t\t\t} else {\n\t\t\t\tconst pathService = accessor.get(IPathService);\n\t\t\t\tconst userHome = await pathService.userHome();\n\t\t\t\tterminalService.openTerminal(userHome.fsPath);\n\t\t\t}\n\t\t}\n\t}\n});\n\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: OPEN_NATIVE_CONSOLE_COMMAND_ID,\n\t\ttitle: { value: nls.localize('globalConsoleAction', \"Open New External Terminal\"), original: 'Open New External Terminal' }\n\t}\n});\n\nif (isWindows) {\n\tregisterSingleton(IExternalTerminalService, WindowsExternalTerminalService, true);\n} else if (isMacintosh) {\n\tregisterSingleton(IExternalTerminalService, MacExternalTerminalService, true);\n} else if (isLinux) {\n\tregisterSingleton(IExternalTerminalService, LinuxExternalTerminalService, true);\n}\n\nLinuxExternalTerminalService.getDefaultTerminalLinuxReady().then(defaultTerminalLinux => {\n\tlet configurationRegistry = Registry.as<IConfigurationRegistry>(Extensions.Configuration);\n\tconfigurationRegistry.registerConfiguration({\n\t\tid: 'externalTerminal',\n\t\torder: 100,\n\t\ttitle: nls.localize('terminalConfigurationTitle', \"External Terminal\"),\n\t\ttype: 'object',\n\t\tproperties: {\n\t\t\t'terminal.explorerKind': {\n\t\t\t\ttype: 'string',\n\t\t\t\tenum: [\n\t\t\t\t\t'integrated',\n\t\t\t\t\t'external'\n\t\t\t\t],\n\t\t\t\tenumDescriptions: [\n\t\t\t\t\tnls.localize('terminal.explorerKind.integrated', \"Use VS Code's integrated terminal.\"),\n\t\t\t\t\tnls.localize('terminal.explorerKind.external', \"Use the configured external terminal.\")\n\t\t\t\t],\n\t\t\t\tdescription: nls.localize('explorer.openInTerminalKind', \"Customizes what kind of terminal to launch.\"),\n\t\t\t\tdefault: 'integrated'\n\t\t\t},\n\t\t\t'terminal.external.windowsExec': {\n\t\t\t\ttype: 'string',\n\t\t\t\tdescription: nls.localize('terminal.external.windowsExec', \"Customizes which terminal to run on Windows.\"),\n\t\t\t\tdefault: WindowsExternalTerminalService.getDefaultTerminalWindows(),\n\t\t\t\tscope: ConfigurationScope.APPLICATION\n\t\t\t},\n\t\t\t'terminal.external.osxExec': {\n\t\t\t\ttype: 'string',\n\t\t\t\tdescription: nls.localize('terminal.external.osxExec', \"Customizes which terminal application to run on macOS.\"),\n\t\t\t\tdefault: DEFAULT_TERMINAL_OSX,\n\t\t\t\tscope: ConfigurationScope.APPLICATION\n\t\t\t},\n\t\t\t'terminal.external.linuxExec': {\n\t\t\t\ttype: 'string',\n\t\t\t\tdescription: nls.localize('terminal.external.linuxExec', \"Customizes which terminal to run on Linux.\"),\n\t\t\t\tdefault: defaultTerminalLinux,\n\t\t\t\tscope: ConfigurationScope.APPLICATION\n\t\t\t}\n\t\t}\n\t});\n});\n"]}