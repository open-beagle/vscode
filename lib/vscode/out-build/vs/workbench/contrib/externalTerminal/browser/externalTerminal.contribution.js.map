{"version":3,"sources":["vs/workbench/contrib/externalTerminal/browser/externalTerminal.contribution.ts"],"names":[],"mappings":"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","file":"externalTerminal.contribution.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { URI } from 'vs/base/common/uri';\nimport { IExternalTerminalConfiguration, IExternalTerminalService } from 'vs/workbench/contrib/externalTerminal/common/externalTerminal';\nimport { MenuId, MenuRegistry, IMenuItem } from 'vs/platform/actions/common/actions';\nimport { ITerminalService as IIntegratedTerminalService } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { ResourceContextKey } from 'vs/workbench/common/resources';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { IListService } from 'vs/platform/list/browser/listService';\nimport { getMultiSelectedResources, IExplorerService } from 'vs/workbench/contrib/files/browser/files';\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { Schemas } from 'vs/base/common/network';\nimport { distinct } from 'vs/base/common/arrays';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { optional } from 'vs/platform/instantiation/common/instantiation';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { IWorkbenchContribution, IWorkbenchContributionsRegistry, Extensions as WorkbenchExtensions } from 'vs/workbench/common/contributions';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { isWeb, isWindows } from 'vs/base/common/platform';\nimport { dirname, basename } from 'vs/base/common/path';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { Registry } from 'vs/platform/registry/common/platform';\n\nconst OPEN_IN_TERMINAL_COMMAND_ID = 'openInTerminal';\nCommandsRegistry.registerCommand({\n\tid: OPEN_IN_TERMINAL_COMMAND_ID,\n\thandler: (accessor, resource: URI) => {\n\t\tconst configurationService = accessor.get(IConfigurationService);\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst fileService = accessor.get(IFileService);\n\t\tconst terminalService: IExternalTerminalService | undefined = accessor.get(IExternalTerminalService, optional);\n\t\tconst integratedTerminalService = accessor.get(IIntegratedTerminalService);\n\t\tconst remoteAgentService = accessor.get(IRemoteAgentService);\n\n\t\tconst resources = getMultiSelectedResources(resource, accessor.get(IListService), editorService, accessor.get(IExplorerService));\n\t\treturn fileService.resolveAll(resources.map(r => ({ resource: r }))).then(async stats => {\n\t\t\tconst targets = distinct(stats.filter(data => data.success));\n\t\t\t// Always use integrated terminal when using a remote\n\t\t\tconst useIntegratedTerminal = remoteAgentService.getConnection() || configurationService.getValue<IExternalTerminalConfiguration>().terminal.explorerKind === 'integrated';\n\t\t\tif (useIntegratedTerminal) {\n\n\n\t\t\t\t// TODO: Use uri for cwd in createterminal\n\n\n\t\t\t\tconst opened: { [path: string]: boolean } = {};\n\t\t\t\ttargets.map(({ stat }) => {\n\t\t\t\t\tconst resource = stat!.resource;\n\t\t\t\t\tif (stat!.isDirectory) {\n\t\t\t\t\t\treturn resource;\n\t\t\t\t\t}\n\t\t\t\t\treturn URI.from({\n\t\t\t\t\t\tscheme: resource.scheme,\n\t\t\t\t\t\tauthority: resource.authority,\n\t\t\t\t\t\tfragment: resource.fragment,\n\t\t\t\t\t\tquery: resource.query,\n\t\t\t\t\t\tpath: dirname(resource.path)\n\t\t\t\t\t});\n\t\t\t\t}).forEach(cwd => {\n\t\t\t\t\tif (opened[cwd.path]) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\topened[cwd.path] = true;\n\t\t\t\t\tconst instance = integratedTerminalService.createTerminal({ cwd });\n\t\t\t\t\tif (instance && (resources.length === 1 || !resource || cwd.path === resource.path || cwd.path === dirname(resource.path))) {\n\t\t\t\t\t\tintegratedTerminalService.setActiveInstance(instance);\n\t\t\t\t\t\tintegratedTerminalService.showPanel(true);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tdistinct(targets.map(({ stat }) => stat!.isDirectory ? stat!.resource.fsPath : dirname(stat!.resource.fsPath))).forEach(cwd => {\n\t\t\t\t\tterminalService!.openTerminal(cwd);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n});\n\nexport class ExternalTerminalContribution extends Disposable implements IWorkbenchContribution {\n\tprivate _openInTerminalMenuItem: IMenuItem;\n\n\tconstructor(\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService\n\t) {\n\t\tsuper();\n\n\t\tthis._openInTerminalMenuItem = {\n\t\t\tgroup: 'navigation',\n\t\t\torder: 30,\n\t\t\tcommand: {\n\t\t\t\tid: OPEN_IN_TERMINAL_COMMAND_ID,\n\t\t\t\ttitle: nls.localize('scopedConsoleAction', \"Open in Terminal\")\n\t\t\t},\n\t\t\twhen: ContextKeyExpr.or(ResourceContextKey.Scheme.isEqualTo(Schemas.file), ResourceContextKey.Scheme.isEqualTo(Schemas.vscodeRemote))\n\t\t};\n\t\tMenuRegistry.appendMenuItem(MenuId.OpenEditorsContext, this._openInTerminalMenuItem);\n\t\tMenuRegistry.appendMenuItem(MenuId.ExplorerContext, this._openInTerminalMenuItem);\n\n\t\tthis._configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration('terminal.explorerKind') || e.affectsConfiguration('terminal.external')) {\n\t\t\t\tthis._refreshOpenInTerminalMenuItemTitle();\n\t\t\t}\n\t\t});\n\t\tthis._refreshOpenInTerminalMenuItemTitle();\n\t}\n\n\tprivate _refreshOpenInTerminalMenuItemTitle(): void {\n\t\tif (isWeb) {\n\t\t\tthis._openInTerminalMenuItem.command.title = nls.localize('scopedConsoleAction.integrated', \"Open in Integrated Terminal\");\n\t\t\treturn;\n\t\t}\n\n\t\tconst config = this._configurationService.getValue<IExternalTerminalConfiguration>().terminal;\n\t\tif (config.explorerKind === 'integrated') {\n\t\t\tthis._openInTerminalMenuItem.command.title = nls.localize('scopedConsoleAction.integrated', \"Open in Integrated Terminal\");\n\t\t\treturn;\n\t\t}\n\n\t\tif (isWindows && config.external.windowsExec) {\n\t\t\tconst file = basename(config.external.windowsExec);\n\t\t\tif (file === 'wt' || file === 'wt.exe') {\n\t\t\t\tthis._openInTerminalMenuItem.command.title = nls.localize('scopedConsoleAction.wt', \"Open in Windows Terminal\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tthis._openInTerminalMenuItem.command.title = nls.localize('scopedConsoleAction.external', \"Open in External Terminal\");\n\t}\n}\n\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(ExternalTerminalContribution, LifecyclePhase.Restored);\n"]}