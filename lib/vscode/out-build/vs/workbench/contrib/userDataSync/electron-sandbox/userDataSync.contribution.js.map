{"version":3,"sources":["vs/workbench/contrib/userDataSync/electron-sandbox/userDataSync.contribution.ts"],"names":[],"mappings":"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","file":"userDataSync.contribution.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IWorkbenchContributionsRegistry, Extensions as WorkbenchExtensions, IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { IUserDataSyncUtilService, SyncStatus, UserDataSyncError, UserDataSyncErrorCode, IUserDataAutoSyncService } from 'vs/platform/userDataSync/common/userDataSync';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { ISharedProcessService } from 'vs/platform/ipc/electron-sandbox/services';\nimport { UserDataSycnUtilServiceChannel } from 'vs/platform/userDataSync/common/userDataSyncIpc';\nimport { registerAction2, Action2, MenuId } from 'vs/platform/actions/common/actions';\nimport { localize } from 'vs/nls';\nimport { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { INativeHostService } from 'vs/platform/native/electron-sandbox/native';\nimport { INotificationService, Severity } from 'vs/platform/notification/common/notification';\nimport { Action } from 'vs/base/common/actions';\nimport { IWorkbenchIssueService } from 'vs/workbench/services/issue/common/issue';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { CONTEXT_SYNC_STATE, SHOW_SYNC_LOG_COMMAND_ID, SYNC_TITLE } from 'vs/workbench/services/userDataSync/common/userDataSync';\n\nclass UserDataSyncServicesContribution implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IUserDataSyncUtilService userDataSyncUtilService: IUserDataSyncUtilService,\n\t\t@ISharedProcessService sharedProcessService: ISharedProcessService,\n\t) {\n\t\tsharedProcessService.registerChannel('userDataSyncUtil', new UserDataSycnUtilServiceChannel(userDataSyncUtilService));\n\t}\n}\n\nclass UserDataSyncReportIssueContribution extends Disposable implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IUserDataAutoSyncService userDataAutoSyncService: IUserDataAutoSyncService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IWorkbenchIssueService private readonly workbenchIssueService: IWorkbenchIssueService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t) {\n\t\tsuper();\n\t\tthis._register(userDataAutoSyncService.onError(error => this.onAutoSyncError(error)));\n\t}\n\n\tprivate onAutoSyncError(error: UserDataSyncError): void {\n\t\tswitch (error.code) {\n\t\t\tcase UserDataSyncErrorCode.LocalTooManyRequests:\n\t\t\tcase UserDataSyncErrorCode.TooManyRequests:\n\t\t\t\tconst operationId = error.operationId ? localize('operationId', \"Operation Id: {0}\", error.operationId) : undefined;\n\t\t\t\tconst message = localize({ key: 'too many requests', comment: ['Settings Sync is the name of the feature'] }, \"Settings sync is disabled because the current device is making too many requests. Please report an issue by providing the sync logs.\");\n\t\t\t\tthis.notificationService.notify({\n\t\t\t\t\tseverity: Severity.Error,\n\t\t\t\t\tmessage: operationId ? `${message} ${operationId}` : message,\n\t\t\t\t\tsource: error.operationId ? localize('settings sync', \"Settings Sync. Operation Id: {0}\", error.operationId) : undefined,\n\t\t\t\t\tactions: {\n\t\t\t\t\t\tprimary: [\n\t\t\t\t\t\t\tnew Action('Show Sync Logs', localize('show sync logs', \"Show Log\"), undefined, true, () => this.commandService.executeCommand(SHOW_SYNC_LOG_COMMAND_ID)),\n\t\t\t\t\t\t\tnew Action('Report Issue', localize('report issue', \"Report Issue\"), undefined, true, () => this.workbenchIssueService.openReporter())\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t}\n\t}\n}\n\nconst workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench);\nworkbenchRegistry.registerWorkbenchContribution(UserDataSyncServicesContribution, LifecyclePhase.Starting);\nworkbenchRegistry.registerWorkbenchContribution(UserDataSyncReportIssueContribution, LifecyclePhase.Restored);\n\nregisterAction2(class OpenSyncBackupsFolder extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.userData.actions.openSyncBackupsFolder',\n\t\t\ttitle: { value: localize('Open Backup folder', \"Open Local Backups Folder\"), original: 'Open Local Backups Folder' },\n\t\t\tcategory: { value: SYNC_TITLE, original: `Settings Sync` },\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\twhen: CONTEXT_SYNC_STATE.notEqualsTo(SyncStatus.Uninitialized),\n\t\t\t}\n\t\t});\n\t}\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst syncHome = accessor.get(IEnvironmentService).userDataSyncHome;\n\t\tconst nativeHostService = accessor.get(INativeHostService);\n\t\tconst fileService = accessor.get(IFileService);\n\t\tconst notificationService = accessor.get(INotificationService);\n\t\tif (await fileService.exists(syncHome)) {\n\t\t\tconst folderStat = await fileService.resolve(syncHome);\n\t\t\tconst item = folderStat.children && folderStat.children[0] ? folderStat.children[0].resource : syncHome;\n\t\t\treturn nativeHostService.showItemInFolder(item.fsPath);\n\t\t} else {\n\t\t\tnotificationService.info(localize('no backups', \"Local backups folder does not exist\"));\n\t\t}\n\t}\n});\n"]}