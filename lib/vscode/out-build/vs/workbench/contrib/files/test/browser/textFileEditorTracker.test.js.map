{"version":3,"file":"textFileEditorTracker.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/files/test/browser/textFileEditorTracker.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAyBhG,KAAK,CAAC,+BAA+B,EAAE,GAAG,EAAE;QAE3C,MAAM,WAAW,GAAG,IAAI,2BAAe,EAAE,CAAC;QAE1C,KAAK,CAAC,GAAG,EAAE;YACV,WAAW,CAAC,GAAG,CAAC,CAAA,GAAA,8CAAsB,CAAA,EAAE,CAAC,CAAC;YAC1C,WAAW,CAAC,GAAG,CAAC,CAAA,GAAA,kDAA0B,CAAA,EAAE,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,GAAG,EAAE;YACb,WAAW,CAAC,KAAK,EAAE,CAAC;QACrB,CAAC,CAAC,CAAC;QAEH,KAAK,UAAU,aAAa,CAAC,eAAe,GAAG,KAAK;YACnD,MAAM,oBAAoB,GAAG,CAAA,GAAA,qDAA6B,CAAA,EAAE,CAAC;YAE7D,IAAI,eAAe,EAAE;gBACpB,MAAM,oBAAoB,GAAG,IAAI,mDAAwB,EAAE,CAAC;gBAC5D,oBAAoB,CAAC,oBAAoB,CAAC,OAAO,EAAE,EAAE,QAAQ,EAAE,YAAY,EAAE,aAAa,EAAE,CAAC,EAAE,CAAC,CAAC;gBAEjG,oBAAoB,CAAC,IAAI,CAAC,qCAAqB,EAAE,oBAAoB,CAAC,CAAC;gBAEvE,oBAAoB,CAAC,IAAI,CAAC,sDAA0B,EAAE,IAAI,qDAA6B,CAClE,oBAAoB,CAAC,cAAc,CAAC,6CAAqB,CAAC,EAC9E,oBAAoB,CACpB,CAAC,CAAC;aACH;YAED,MAAM,IAAI,GAAG,MAAM,CAAA,GAAA,wCAAgB,CAAA,CAAC,oBAAoB,EAAE,WAAW,CAAC,CAAC;YAEvE,oBAAoB,CAAC,IAAI,CAAC,0CAAoB,EAAE,IAAI,CAAC,CAAC;YAEtD,MAAM,aAAa,GAAkB,oBAAoB,CAAC,cAAc,CAAC,6BAAa,CAAC,CAAC;YACxF,oBAAoB,CAAC,IAAI,CAAC,8BAAc,EAAE,aAAa,CAAC,CAAC;YAEzD,MAAM,QAAQ,GAAG,oBAAoB,CAAC,cAAc,CAAC,2CAAmB,CAAC,CAAC;YAC1E,WAAW,CAAC,GAAG,CAA8B,QAAQ,CAAC,eAAe,CAAC,KAAM,CAAC,CAAC;YAE9E,WAAW,CAAC,GAAG,CAAC,oBAAoB,CAAC,cAAc,CAAC,6CAAqB,CAAC,CAAC,CAAC;YAE5E,OAAO,QAAQ,CAAC;QACjB,CAAC;QAED,IAAI,CAAC,iCAAiC,EAAE,KAAK;YAC5C,MAAM,QAAQ,GAAG,MAAM,aAAa,EAAE,CAAC;YAEvC,MAAM,QAAQ,GAAG,kBAAU,CAAC,IAAI,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC;YAE1D,MAAM,KAAK,GAAG,MAAM,QAAQ,CAAC,eAAe,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAiC,CAAC;YAErG,KAAK,CAAC,eAAe,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;YAC7C,MAAM,CAAC,WAAW,CAAC,CAAA,GAAA,4BAAgB,CAAA,CAAC,KAAK,CAAC,cAAc,EAAG,CAAC,EAAE,YAAY,CAAC,CAAC;YAE5E,MAAM,KAAK,CAAC,IAAI,EAAE,CAAC;YAEnB,yBAAyB;YACzB,QAAQ,CAAC,WAAW,CAAC,eAAe,CAAC,IAAI,wBAAgB,CAAC,CAAC,EAAE,QAAQ,EAAE,IAAI,iBAAwB,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;YAEhH,MAAM,CAAA,GAAA,eAAO,CAAA,CAAC,CAAC,CAAC,CAAC,CAAC,oCAAoC;YAEtD,MAAM,CAAC,WAAW,CAAC,CAAA,GAAA,4BAAgB,CAAA,CAAC,KAAK,CAAC,cAAc,EAAG,CAAC,EAAE,YAAY,CAAC,CAAC;QAC7E,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,uCAAuC,EAAE,KAAK;YAClD,MAAM,QAAQ,GAAG,kBAAU,CAAC,IAAI,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC;YAE1D,MAAM,2DAA2D,CAAC,QAAQ,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QAC3F,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,iEAAiE,EAAE,KAAK;YAC5E,MAAM,QAAQ,GAAG,kBAAU,CAAC,IAAI,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC;YAE1D,MAAM,2DAA2D,CAAC,QAAQ,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;QAC1F,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,uDAAuD,EAAE,KAAK;YAClE,MAAM,QAAQ,GAAG,kBAAU,CAAC,IAAI,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC;YAE1D,MAAM,2DAA2D,CAAC,QAAQ,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;QAC1F,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,yEAAyE,EAAE,KAAK;YACpF,MAAM,QAAQ,GAAG,kBAAU,CAAC,IAAI,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC;YAE1D,MAAM,2DAA2D,CAAC,QAAQ,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QACzF,CAAC,CAAC,CAAC;QAEH,KAAK,UAAU,2DAA2D,CAAC,QAAa,EAAE,QAAiB,EAAE,KAAc;YAC1H,MAAM,QAAQ,GAAG,MAAM,aAAa,CAAC,QAAQ,CAAC,CAAC;YAE/C,MAAM,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,4BAAoB,EAAE,CAAC,CAAC,CAAC;YAExF,IAAI,KAAK,EAAE;gBACV,QAAQ,CAAC,eAAe,CAAC,iBAAiB,CAAC,IAAI,0BAAkB,CAAC,eAAe,4BAAuC,CAAC,CAAC;aAC1H;YAED,MAAM,KAAK,GAAG,MAAM,QAAQ,CAAC,eAAe,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAiC,CAAC;YAErG,KAAK,CAAC,eAAe,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;YAE7C,IAAI,QAAQ,EAAE;gBACb,MAAM,KAAK,CAAC,IAAI,EAAE,CAAC;gBACnB,MAAM,CAAA,GAAA,eAAO,CAAA,CAAC,GAAG,CAAC,CAAC;gBACnB,IAAI,KAAK,EAAE;oBACV,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,4BAAoB,EAAE,CAAC,CAAC,CAAC;iBACvF;qBAAM;oBACN,MAAM,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,4BAAoB,EAAE,CAAC,CAAC,CAAC;iBACxF;aACD;iBAAM;gBACN,MAAM,kBAAkB,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;gBACjD,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,4BAAoB,EAAE,CAAC,CAAC,CAAC;aACvF;QACF,CAAC;QAED,IAAI,CAAC,gDAAgD,EAAE,KAAK;;YAC3D,MAAM,QAAQ,GAAG,MAAM,aAAa,EAAE,CAAC;YAEvC,MAAM,cAAc,GAAG,QAAQ,CAAC,aAAa,CAAC,iBAAiB,CAAC,EAAE,aAAa,EAAE,IAAI,EAAE,CAA4B,CAAC;YACpH,MAAM,KAAK,GAAG,WAAW,CAAC,GAAG,CAAC,MAAM,cAAc,CAAC,OAAO,EAAE,CAAC,CAAC;YAE9D,MAAM,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC;YAE5D,MAAA,KAAK,CAAC,eAAe,0CAAE,QAAQ,CAAC,YAAY,CAAC,CAAC;YAE9C,MAAM,kBAAkB,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;YACjD,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;QAEH,SAAS,kBAAkB,CAAC,aAA6B;YACxD,OAAO,aAAK,CAAC,SAAS,CAAC,aAAK,CAAC,IAAI,CAAC,aAAa,CAAC,uBAAuB,CAAC,CAAC,CAAC;QAC3E,CAAC;QAED,IAAI,CAAC,wCAAwC,EAAE,KAAK;YACnD,MAAM,QAAQ,GAAG,MAAM,aAAa,EAAE,CAAC;YAEvC,MAAM,QAAQ,GAAG,kBAAU,CAAC,IAAI,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC;YAE1D,MAAM,QAAQ,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,CAAC,aAAa,CAAC,iBAAiB,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;YAEjH,QAAQ,CAAC,WAAW,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YACrC,QAAQ,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YAEpC,MAAM,sBAAsB,CAAC,QAAQ,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC;QAClE,CAAC,CAAC,CAAC;QAEH,SAAS,sBAAsB,CAAC,eAAiC,EAAE,QAAa;YAC/E,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE;gBAC5B,MAAM,QAAQ,GAAG,eAAe,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE;oBACvD,IAAI,CAAA,GAAA,mBAAO,CAAA,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAE;wBACxC,QAAQ,CAAC,OAAO,EAAE,CAAC;wBACnB,OAAO,EAAE,CAAC;qBACV;gBACF,CAAC,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;QACJ,CAAC;IACF,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { Event } from 'vs/base/common/event';\nimport { TextFileEditorTracker } from 'vs/workbench/contrib/files/browser/editors/textFileEditorTracker';\nimport { toResource } from 'vs/base/test/common/utils';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { workbenchInstantiationService, TestServiceAccessor, TestFilesConfigurationService, registerTestFileEditor, registerTestResourceEditor, createEditorPart } from 'vs/workbench/test/browser/workbenchTestServices';\nimport { IResolvedTextFileEditorModel, snapshotToString, ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';\nimport { FileChangesEvent, FileChangeType, FileOperationError, FileOperationResult } from 'vs/platform/files/common/files';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { timeout } from 'vs/base/common/async';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { TextFileEditorModelManager } from 'vs/workbench/services/textfile/common/textFileEditorModelManager';\nimport { EditorService } from 'vs/workbench/services/editor/browser/editorService';\nimport { UntitledTextEditorInput } from 'vs/workbench/services/untitled/common/untitledTextEditorInput';\nimport { isEqual } from 'vs/base/common/resources';\nimport { URI } from 'vs/base/common/uri';\nimport { TestConfigurationService } from 'vs/platform/configuration/test/common/testConfigurationService';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IFilesConfigurationService } from 'vs/workbench/services/filesConfiguration/common/filesConfigurationService';\nimport { MockContextKeyService } from 'vs/platform/keybinding/test/common/mockKeybindingService';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { FILE_EDITOR_INPUT_ID } from 'vs/workbench/contrib/files/common/files';\n\nsuite('Files - TextFileEditorTracker', () => {\n\n\tconst disposables = new DisposableStore();\n\n\tsetup(() => {\n\t\tdisposables.add(registerTestFileEditor());\n\t\tdisposables.add(registerTestResourceEditor());\n\t});\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\tasync function createTracker(autoSaveEnabled = false): Promise<TestServiceAccessor> {\n\t\tconst instantiationService = workbenchInstantiationService();\n\n\t\tif (autoSaveEnabled) {\n\t\t\tconst configurationService = new TestConfigurationService();\n\t\t\tconfigurationService.setUserConfiguration('files', { autoSave: 'afterDelay', autoSaveDelay: 1 });\n\n\t\t\tinstantiationService.stub(IConfigurationService, configurationService);\n\n\t\t\tinstantiationService.stub(IFilesConfigurationService, new TestFilesConfigurationService(\n\t\t\t\t<IContextKeyService>instantiationService.createInstance(MockContextKeyService),\n\t\t\t\tconfigurationService\n\t\t\t));\n\t\t}\n\n\t\tconst part = await createEditorPart(instantiationService, disposables);\n\n\t\tinstantiationService.stub(IEditorGroupsService, part);\n\n\t\tconst editorService: EditorService = instantiationService.createInstance(EditorService);\n\t\tinstantiationService.stub(IEditorService, editorService);\n\n\t\tconst accessor = instantiationService.createInstance(TestServiceAccessor);\n\t\tdisposables.add((<TextFileEditorModelManager>accessor.textFileService.files));\n\n\t\tdisposables.add(instantiationService.createInstance(TextFileEditorTracker));\n\n\t\treturn accessor;\n\t}\n\n\ttest('file change event updates model', async function () {\n\t\tconst accessor = await createTracker();\n\n\t\tconst resource = toResource.call(this, '/path/index.txt');\n\n\t\tconst model = await accessor.textFileService.files.resolve(resource) as IResolvedTextFileEditorModel;\n\n\t\tmodel.textEditorModel.setValue('Super Good');\n\t\tassert.strictEqual(snapshotToString(model.createSnapshot()!), 'Super Good');\n\n\t\tawait model.save();\n\n\t\t// change event (watcher)\n\t\taccessor.fileService.fireFileChanges(new FileChangesEvent([{ resource, type: FileChangeType.UPDATED }], false));\n\n\t\tawait timeout(0); // due to event updating model async\n\n\t\tassert.strictEqual(snapshotToString(model.createSnapshot()!), 'Hello Html');\n\t});\n\n\ttest('dirty text file model opens as editor', async function () {\n\t\tconst resource = toResource.call(this, '/path/index.txt');\n\n\t\tawait testDirtyTextFileModelOpensEditorDependingOnAutoSaveSetting(resource, false, false);\n\t});\n\n\ttest('dirty text file model does not open as editor if autosave is ON', async function () {\n\t\tconst resource = toResource.call(this, '/path/index.txt');\n\n\t\tawait testDirtyTextFileModelOpensEditorDependingOnAutoSaveSetting(resource, true, false);\n\t});\n\n\ttest('dirty text file model opens as editor when save fails', async function () {\n\t\tconst resource = toResource.call(this, '/path/index.txt');\n\n\t\tawait testDirtyTextFileModelOpensEditorDependingOnAutoSaveSetting(resource, false, true);\n\t});\n\n\ttest('dirty text file model opens as editor when save fails if autosave is ON', async function () {\n\t\tconst resource = toResource.call(this, '/path/index.txt');\n\n\t\tawait testDirtyTextFileModelOpensEditorDependingOnAutoSaveSetting(resource, true, true);\n\t});\n\n\tasync function testDirtyTextFileModelOpensEditorDependingOnAutoSaveSetting(resource: URI, autoSave: boolean, error: boolean): Promise<void> {\n\t\tconst accessor = await createTracker(autoSave);\n\n\t\tassert.ok(!accessor.editorService.isOpened({ resource, typeId: FILE_EDITOR_INPUT_ID }));\n\n\t\tif (error) {\n\t\t\taccessor.textFileService.setWriteErrorOnce(new FileOperationError('fail to write', FileOperationResult.FILE_OTHER_ERROR));\n\t\t}\n\n\t\tconst model = await accessor.textFileService.files.resolve(resource) as IResolvedTextFileEditorModel;\n\n\t\tmodel.textEditorModel.setValue('Super Good');\n\n\t\tif (autoSave) {\n\t\t\tawait model.save();\n\t\t\tawait timeout(100);\n\t\t\tif (error) {\n\t\t\t\tassert.ok(accessor.editorService.isOpened({ resource, typeId: FILE_EDITOR_INPUT_ID }));\n\t\t\t} else {\n\t\t\t\tassert.ok(!accessor.editorService.isOpened({ resource, typeId: FILE_EDITOR_INPUT_ID }));\n\t\t\t}\n\t\t} else {\n\t\t\tawait awaitEditorOpening(accessor.editorService);\n\t\t\tassert.ok(accessor.editorService.isOpened({ resource, typeId: FILE_EDITOR_INPUT_ID }));\n\t\t}\n\t}\n\n\ttest('dirty untitled text file model opens as editor', async function () {\n\t\tconst accessor = await createTracker();\n\n\t\tconst untitledEditor = accessor.editorService.createEditorInput({ forceUntitled: true }) as UntitledTextEditorInput;\n\t\tconst model = disposables.add(await untitledEditor.resolve());\n\n\t\tassert.ok(!accessor.editorService.isOpened(untitledEditor));\n\n\t\tmodel.textEditorModel?.setValue('Super Good');\n\n\t\tawait awaitEditorOpening(accessor.editorService);\n\t\tassert.ok(accessor.editorService.isOpened(untitledEditor));\n\t});\n\n\tfunction awaitEditorOpening(editorService: IEditorService): Promise<void> {\n\t\treturn Event.toPromise(Event.once(editorService.onDidActiveEditorChange));\n\t}\n\n\ttest('non-dirty files reload on window focus', async function () {\n\t\tconst accessor = await createTracker();\n\n\t\tconst resource = toResource.call(this, '/path/index.txt');\n\n\t\tawait accessor.editorService.openEditor(accessor.editorService.createEditorInput({ resource, forceFile: true }));\n\n\t\taccessor.hostService.setFocus(false);\n\t\taccessor.hostService.setFocus(true);\n\n\t\tawait awaitModelResolveEvent(accessor.textFileService, resource);\n\t});\n\n\tfunction awaitModelResolveEvent(textFileService: ITextFileService, resource: URI): Promise<void> {\n\t\treturn new Promise(resolve => {\n\t\t\tconst listener = textFileService.files.onDidResolve(e => {\n\t\t\t\tif (isEqual(e.model.resource, resource)) {\n\t\t\t\t\tlistener.dispose();\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n});\n"]}