{"version":3,"file":"editorAutoSave.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/files/test/browser/editorAutoSave.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { Event } from 'vs/base/common/event';\nimport { toResource } from 'vs/base/test/common/utils';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { TestFilesConfigurationService, workbenchInstantiationService, TestServiceAccessor, registerTestFileEditor, createEditorPart } from 'vs/workbench/test/browser/workbenchTestServices';\nimport { IResolvedTextFileEditorModel, ITextFileEditorModel } from 'vs/workbench/services/textfile/common/textfiles';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { TextFileEditorModelManager } from 'vs/workbench/services/textfile/common/textFileEditorModelManager';\nimport { EditorService } from 'vs/workbench/services/editor/browser/editorService';\nimport { EditorAutoSave } from 'vs/workbench/browser/parts/editor/editorAutoSave';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { TestConfigurationService } from 'vs/platform/configuration/test/common/testConfigurationService';\nimport { IFilesConfigurationService } from 'vs/workbench/services/filesConfiguration/common/filesConfigurationService';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { MockContextKeyService } from 'vs/platform/keybinding/test/common/mockKeybindingService';\n\nsuite('EditorAutoSave', () => {\n\n\tconst disposables = new DisposableStore();\n\n\tsetup(() => {\n\t\tdisposables.add(registerTestFileEditor());\n\t});\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\tasync function createEditorAutoSave(autoSaveConfig: object): Promise<TestServiceAccessor> {\n\t\tconst instantiationService = workbenchInstantiationService();\n\n\t\tconst configurationService = new TestConfigurationService();\n\t\tconfigurationService.setUserConfiguration('files', autoSaveConfig);\n\t\tinstantiationService.stub(IConfigurationService, configurationService);\n\n\t\tinstantiationService.stub(IFilesConfigurationService, new TestFilesConfigurationService(\n\t\t\t<IContextKeyService>instantiationService.createInstance(MockContextKeyService),\n\t\t\tconfigurationService\n\t\t));\n\n\t\tconst part = await createEditorPart(instantiationService, disposables);\n\n\t\tinstantiationService.stub(IEditorGroupsService, part);\n\n\t\tconst editorService: EditorService = instantiationService.createInstance(EditorService);\n\t\tinstantiationService.stub(IEditorService, editorService);\n\n\t\tconst accessor = instantiationService.createInstance(TestServiceAccessor);\n\t\tdisposables.add((<TextFileEditorModelManager>accessor.textFileService.files));\n\n\t\tdisposables.add(instantiationService.createInstance(EditorAutoSave));\n\n\t\treturn accessor;\n\t}\n\n\ttest('editor auto saves after short delay if configured', async function () {\n\t\tconst accessor = await createEditorAutoSave({ autoSave: 'afterDelay', autoSaveDelay: 1 });\n\n\t\tconst resource = toResource.call(this, '/path/index.txt');\n\n\t\tconst model = await accessor.textFileService.files.resolve(resource) as IResolvedTextFileEditorModel;\n\t\tmodel.textEditorModel.setValue('Super Good');\n\n\t\tassert.ok(model.isDirty());\n\n\t\tawait awaitModelSaved(model);\n\n\t\tassert.ok(!model.isDirty());\n\t});\n\n\ttest('editor auto saves on focus change if configured', async function () {\n\t\tconst accessor = await createEditorAutoSave({ autoSave: 'onFocusChange' });\n\n\t\tconst resource = toResource.call(this, '/path/index.txt');\n\t\tawait accessor.editorService.openEditor({ resource, forceFile: true });\n\n\t\tconst model = await accessor.textFileService.files.resolve(resource) as IResolvedTextFileEditorModel;\n\t\tmodel.textEditorModel.setValue('Super Good');\n\n\t\tassert.ok(model.isDirty());\n\n\t\tawait accessor.editorService.openEditor({ resource: toResource.call(this, '/path/index_other.txt') });\n\n\t\tawait awaitModelSaved(model);\n\n\t\tassert.ok(!model.isDirty());\n\t});\n\n\tfunction awaitModelSaved(model: ITextFileEditorModel): Promise<void> {\n\t\treturn Event.toPromise(Event.once(model.onDidChangeDirty));\n\t}\n});\n"]}