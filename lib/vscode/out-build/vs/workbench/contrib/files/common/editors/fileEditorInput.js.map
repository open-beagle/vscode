{"version":3,"sources":["vs/workbench/contrib/files/common/editors/fileEditorInput.ts"],"names":[],"mappings":"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","file":"fileEditorInput.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { URI } from 'vs/base/common/uri';\nimport { IFileEditorInput, Verbosity, GroupIdentifier, IMoveResult, isTextEditorPane } from 'vs/workbench/common/editor';\nimport { AbstractTextResourceEditorInput } from 'vs/workbench/common/editor/textResourceEditorInput';\nimport { BinaryEditorModel } from 'vs/workbench/common/editor/binaryEditorModel';\nimport { FileOperationError, FileOperationResult, IFileService } from 'vs/platform/files/common/files';\nimport { ITextFileService, TextFileEditorModelState, TextFileResolveReason, TextFileOperationError, TextFileOperationResult, ITextFileEditorModel, EncodingMode } from 'vs/workbench/services/textfile/common/textfiles';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IReference, dispose, DisposableStore } from 'vs/base/common/lifecycle';\nimport { ITextModelService } from 'vs/editor/common/services/resolverService';\nimport { FILE_EDITOR_INPUT_ID, TEXT_FILE_EDITOR_ID, BINARY_FILE_EDITOR_ID } from 'vs/workbench/contrib/files/common/files';\nimport { ILabelService } from 'vs/platform/label/common/label';\nimport { IFilesConfigurationService } from 'vs/workbench/services/filesConfiguration/common/filesConfigurationService';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { isEqual } from 'vs/base/common/resources';\nimport { Event } from 'vs/base/common/event';\nimport { IEditorViewState } from 'vs/editor/common/editorCommon';\nimport { Schemas } from 'vs/base/common/network';\n\nconst enum ForceOpenAs {\n\tNone,\n\tText,\n\tBinary\n}\n\n/**\n * A file editor input is the input type for the file editor of file system resources.\n */\nexport class FileEditorInput extends AbstractTextResourceEditorInput implements IFileEditorInput {\n\n\toverride get typeId(): string {\n\t\treturn FILE_EDITOR_INPUT_ID;\n\t}\n\n\tprivate preferredName: string | undefined;\n\tprivate preferredDescription: string | undefined;\n\tprivate preferredEncoding: string | undefined;\n\tprivate preferredMode: string | undefined;\n\n\tprivate forceOpenAs: ForceOpenAs = ForceOpenAs.None;\n\n\tprivate model: ITextFileEditorModel | undefined = undefined;\n\tprivate cachedTextFileModelReference: IReference<ITextFileEditorModel> | undefined = undefined;\n\n\tprivate readonly modelListeners = this._register(new DisposableStore());\n\n\tconstructor(\n\t\tresource: URI,\n\t\tpreferredResource: URI | undefined,\n\t\tpreferredName: string | undefined,\n\t\tpreferredDescription: string | undefined,\n\t\tpreferredEncoding: string | undefined,\n\t\tpreferredMode: string | undefined,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ITextFileService textFileService: ITextFileService,\n\t\t@ITextModelService private readonly textModelResolverService: ITextModelService,\n\t\t@ILabelService labelService: ILabelService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IFilesConfigurationService filesConfigurationService: IFilesConfigurationService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IEditorGroupsService editorGroupService: IEditorGroupsService\n\t) {\n\t\tsuper(resource, preferredResource, editorService, editorGroupService, textFileService, labelService, fileService, filesConfigurationService);\n\n\t\tthis.model = this.textFileService.files.get(resource);\n\n\t\tif (preferredName) {\n\t\t\tthis.setPreferredName(preferredName);\n\t\t}\n\n\t\tif (preferredDescription) {\n\t\t\tthis.setPreferredDescription(preferredDescription);\n\t\t}\n\n\t\tif (preferredEncoding) {\n\t\t\tthis.setPreferredEncoding(preferredEncoding);\n\t\t}\n\n\t\tif (preferredMode) {\n\t\t\tthis.setPreferredMode(preferredMode);\n\t\t}\n\n\t\t// If a file model already exists, make sure to wire it in\n\t\tif (this.model) {\n\t\t\tthis.registerModelListeners(this.model);\n\t\t}\n\t}\n\n\tprotected override registerListeners(): void {\n\t\tsuper.registerListeners();\n\n\t\t// Attach to model that matches our resource once created\n\t\tthis._register(this.textFileService.files.onDidCreate(model => this.onDidCreateTextFileModel(model)));\n\t}\n\n\tprivate onDidCreateTextFileModel(model: ITextFileEditorModel): void {\n\n\t\t// Once the text file model is created, we keep it inside\n\t\t// the input to be able to implement some methods properly\n\t\tif (isEqual(model.resource, this.resource)) {\n\t\t\tthis.model = model;\n\n\t\t\tthis.registerModelListeners(model);\n\t\t}\n\t}\n\n\tprivate registerModelListeners(model: ITextFileEditorModel): void {\n\n\t\t// Clear any old\n\t\tthis.modelListeners.clear();\n\n\t\t// re-emit some events from the model\n\t\tthis.modelListeners.add(model.onDidChangeDirty(() => this._onDidChangeDirty.fire()));\n\t\tthis.modelListeners.add(model.onDidChangeOrphaned(() => this._onDidChangeLabel.fire()));\n\n\t\t// important: treat save errors as potential dirty change because\n\t\t// a file that is in save conflict or error will report dirty even\n\t\t// if auto save is turned on.\n\t\tthis.modelListeners.add(model.onDidSaveError(() => this._onDidChangeDirty.fire()));\n\n\t\t// remove model association once it gets disposed\n\t\tthis.modelListeners.add(Event.once(model.onWillDispose)(() => {\n\t\t\tthis.modelListeners.clear();\n\t\t\tthis.model = undefined;\n\t\t}));\n\t}\n\n\toverride getName(): string {\n\t\treturn this.preferredName || this.decorateLabel(super.getName());\n\t}\n\n\tsetPreferredName(name: string): void {\n\t\tif (!this.allowLabelOverride()) {\n\t\t\treturn; // block for specific schemes we own\n\t\t}\n\n\t\tif (this.preferredName !== name) {\n\t\t\tthis.preferredName = name;\n\n\t\t\tthis._onDidChangeLabel.fire();\n\t\t}\n\t}\n\n\tprivate allowLabelOverride(): boolean {\n\t\treturn this.resource.scheme !== Schemas.file && this.resource.scheme !== Schemas.vscodeRemote && this.resource.scheme !== Schemas.userData;\n\t}\n\n\tgetPreferredName(): string | undefined {\n\t\treturn this.preferredName;\n\t}\n\n\toverride getDescription(verbosity?: Verbosity): string | undefined {\n\t\treturn this.preferredDescription || super.getDescription(verbosity);\n\t}\n\n\tsetPreferredDescription(description: string): void {\n\t\tif (!this.allowLabelOverride()) {\n\t\t\treturn; // block for specific schemes we own\n\t\t}\n\n\t\tif (this.preferredDescription !== description) {\n\t\t\tthis.preferredDescription = description;\n\n\t\t\tthis._onDidChangeLabel.fire();\n\t\t}\n\t}\n\n\tgetPreferredDescription(): string | undefined {\n\t\treturn this.preferredDescription;\n\t}\n\n\toverride getTitle(verbosity: Verbosity): string {\n\t\tswitch (verbosity) {\n\t\t\tcase Verbosity.SHORT:\n\t\t\t\treturn this.decorateLabel(super.getName());\n\t\t\tcase Verbosity.MEDIUM:\n\t\t\tcase Verbosity.LONG:\n\t\t\t\treturn this.decorateLabel(super.getTitle(verbosity));\n\t\t}\n\t}\n\n\tprivate decorateLabel(label: string): string {\n\t\tconst orphaned = this.model?.hasState(TextFileEditorModelState.ORPHAN);\n\t\tconst readonly = this.isReadonly();\n\t\treturn decorateFileEditorLabel(label, { orphaned: !!orphaned, readonly });\n\t}\n\n\tgetEncoding(): string | undefined {\n\t\tif (this.model) {\n\t\t\treturn this.model.getEncoding();\n\t\t}\n\n\t\treturn this.preferredEncoding;\n\t}\n\n\tgetPreferredEncoding(): string | undefined {\n\t\treturn this.preferredEncoding;\n\t}\n\n\tasync setEncoding(encoding: string, mode: EncodingMode): Promise<void> {\n\t\tthis.setPreferredEncoding(encoding);\n\n\t\treturn this.model?.setEncoding(encoding, mode);\n\t}\n\n\tsetPreferredEncoding(encoding: string): void {\n\t\tthis.preferredEncoding = encoding;\n\n\t\t// encoding is a good hint to open the file as text\n\t\tthis.setForceOpenAsText();\n\t}\n\n\tgetPreferredMode(): string | undefined {\n\t\treturn this.preferredMode;\n\t}\n\n\tsetMode(mode: string): void {\n\t\tthis.setPreferredMode(mode);\n\n\t\tthis.model?.setMode(mode);\n\t}\n\n\tsetPreferredMode(mode: string): void {\n\t\tthis.preferredMode = mode;\n\n\t\t// mode is a good hint to open the file as text\n\t\tthis.setForceOpenAsText();\n\t}\n\n\tsetForceOpenAsText(): void {\n\t\tthis.forceOpenAs = ForceOpenAs.Text;\n\t}\n\n\tsetForceOpenAsBinary(): void {\n\t\tthis.forceOpenAs = ForceOpenAs.Binary;\n\t}\n\n\toverride isDirty(): boolean {\n\t\treturn !!(this.model?.isDirty());\n\t}\n\n\toverride isReadonly(): boolean {\n\t\tif (this.model) {\n\t\t\treturn this.model.isReadonly();\n\t\t}\n\n\t\treturn super.isReadonly();\n\t}\n\n\toverride isSaving(): boolean {\n\t\tif (this.model?.hasState(TextFileEditorModelState.SAVED) || this.model?.hasState(TextFileEditorModelState.CONFLICT) || this.model?.hasState(TextFileEditorModelState.ERROR)) {\n\t\t\treturn false; // require the model to be dirty and not in conflict or error state\n\t\t}\n\n\t\t// Note: currently not checking for ModelState.PENDING_SAVE for a reason\n\t\t// because we currently miss an event for this state change on editors\n\t\t// and it could result in bad UX where an editor can be closed even though\n\t\t// it shows up as dirty and has not finished saving yet.\n\n\t\treturn super.isSaving();\n\t}\n\n\toverride getPreferredEditorId(candidates: string[]): string {\n\t\treturn this.forceOpenAs === ForceOpenAs.Binary ? BINARY_FILE_EDITOR_ID : TEXT_FILE_EDITOR_ID;\n\t}\n\n\toverride resolve(): Promise<ITextFileEditorModel | BinaryEditorModel> {\n\n\t\t// Resolve as binary\n\t\tif (this.forceOpenAs === ForceOpenAs.Binary) {\n\t\t\treturn this.doResolveAsBinary();\n\t\t}\n\n\t\t// Resolve as text\n\t\treturn this.doResolveAsText();\n\t}\n\n\tprivate async doResolveAsText(): Promise<ITextFileEditorModel | BinaryEditorModel> {\n\t\ttry {\n\n\t\t\t// Resolve resource via text file service and only allow\n\t\t\t// to open binary files if we are instructed so\n\t\t\tawait this.textFileService.files.resolve(this.resource, {\n\t\t\t\tmode: this.preferredMode,\n\t\t\t\tencoding: this.preferredEncoding,\n\t\t\t\treload: { async: true }, // trigger a reload of the model if it exists already but do not wait to show the model\n\t\t\t\tallowBinary: this.forceOpenAs === ForceOpenAs.Text,\n\t\t\t\treason: TextFileResolveReason.EDITOR\n\t\t\t});\n\n\t\t\t// This is a bit ugly, because we first resolve the model and then resolve a model reference. the reason being that binary\n\t\t\t// or very large files do not resolve to a text file model but should be opened as binary files without text. First calling into\n\t\t\t// resolve() ensures we are not creating model references for these kind of resources.\n\t\t\t// In addition we have a bit of payload to take into account (encoding, reload) that the text resolver does not handle yet.\n\t\t\tif (!this.cachedTextFileModelReference) {\n\t\t\t\tthis.cachedTextFileModelReference = await this.textModelResolverService.createModelReference(this.resource) as IReference<ITextFileEditorModel>;\n\t\t\t}\n\n\t\t\tconst model = this.cachedTextFileModelReference.object;\n\n\t\t\t// It is possible that this input was disposed before the model\n\t\t\t// finished resolving. As such, we need to make sure to dispose\n\t\t\t// the model reference to not leak it.\n\t\t\tif (this.isDisposed()) {\n\t\t\t\tthis.disposeModelReference();\n\t\t\t}\n\n\t\t\treturn model;\n\t\t} catch (error) {\n\n\t\t\t// In case of an error that indicates that the file is binary or too large, just return with the binary editor model\n\t\t\tif (\n\t\t\t\t(<TextFileOperationError>error).textFileOperationResult === TextFileOperationResult.FILE_IS_BINARY ||\n\t\t\t\t(<FileOperationError>error).fileOperationResult === FileOperationResult.FILE_TOO_LARGE\n\t\t\t) {\n\t\t\t\treturn this.doResolveAsBinary();\n\t\t\t}\n\n\t\t\t// Bubble any other error up\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate async doResolveAsBinary(): Promise<BinaryEditorModel> {\n\t\tconst model = this.instantiationService.createInstance(BinaryEditorModel, this.preferredResource, this.getName());\n\t\tawait model.resolve();\n\n\t\treturn model;\n\t}\n\n\tisResolved(): boolean {\n\t\treturn !!this.model;\n\t}\n\n\toverride rename(group: GroupIdentifier, target: URI): IMoveResult {\n\t\treturn {\n\t\t\teditor: {\n\t\t\t\tresource: target,\n\t\t\t\tencoding: this.getEncoding(),\n\t\t\t\toptions: {\n\t\t\t\t\tviewState: this.getViewStateFor(group)\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate getViewStateFor(group: GroupIdentifier): IEditorViewState | undefined {\n\t\tfor (const editorPane of this.editorService.visibleEditorPanes) {\n\t\t\tif (editorPane.group.id === group && this.matches(editorPane.input)) {\n\t\t\t\tif (isTextEditorPane(editorPane)) {\n\t\t\t\t\treturn editorPane.getViewState();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\toverride matches(otherInput: unknown): boolean {\n\t\tif (otherInput === this) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (otherInput instanceof FileEditorInput) {\n\t\t\treturn isEqual(otherInput.resource, this.resource);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\toverride dispose(): void {\n\n\t\t// Model\n\t\tthis.model = undefined;\n\n\t\t// Model reference\n\t\tthis.disposeModelReference();\n\n\t\tsuper.dispose();\n\t}\n\n\tprivate disposeModelReference(): void {\n\t\tdispose(this.cachedTextFileModelReference);\n\t\tthis.cachedTextFileModelReference = undefined;\n\t}\n}\n\nexport function decorateFileEditorLabel(label: string, state: { orphaned: boolean, readonly: boolean }): string {\n\tif (state.orphaned && state.readonly) {\n\t\treturn localize('orphanedReadonlyFile', \"{0} (deleted, read-only)\", label);\n\t}\n\n\tif (state.orphaned) {\n\t\treturn localize('orphanedFile', \"{0} (deleted)\", label);\n\t}\n\n\tif (state.readonly) {\n\t\treturn localize('readonlyFile', \"{0} (read-only)\", label);\n\t}\n\n\treturn label;\n}\n"]}