{"version":3,"sources":["vs/workbench/contrib/files/browser/explorerViewlet.ts"],"names":[],"mappings":"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","file":"explorerViewlet.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./media/explorerviewlet';\nimport { localize } from 'vs/nls';\nimport { VIEWLET_ID, ExplorerViewletVisibleContext, IFilesConfiguration, OpenEditorsVisibleContext, VIEW_ID } from 'vs/workbench/contrib/files/common/files';\nimport { IViewletViewOptions } from 'vs/workbench/browser/parts/views/viewsViewlet';\nimport { IConfigurationService, IConfigurationChangeEvent } from 'vs/platform/configuration/common/configuration';\nimport { ExplorerView } from 'vs/workbench/contrib/files/browser/views/explorerView';\nimport { EmptyView } from 'vs/workbench/contrib/files/browser/views/emptyView';\nimport { OpenEditorsView } from 'vs/workbench/contrib/files/browser/views/openEditorsView';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { IWorkspaceContextService, WorkbenchState } from 'vs/platform/workspace/common/workspace';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';\nimport { IContextKeyService, IContextKey, ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { IViewsRegistry, IViewDescriptor, Extensions, ViewContainer, IViewContainersRegistry, ViewContainerLocation, IViewDescriptorService, ViewContentGroups } from 'vs/workbench/common/views';\nimport { IContextMenuService } from 'vs/platform/contextview/browser/contextView';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { IWorkbenchLayoutService } from 'vs/workbench/services/layout/browser/layoutService';\nimport { DelegatingEditorService } from 'vs/workbench/services/editor/browser/editorService';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IEditorPane } from 'vs/workbench/common/editor';\nimport { ViewPaneContainer } from 'vs/workbench/browser/parts/views/viewPaneContainer';\nimport { ViewPane } from 'vs/workbench/browser/parts/views/viewPane';\nimport { KeyChord, KeyMod, KeyCode } from 'vs/base/common/keyCodes';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IProgressService, ProgressLocation } from 'vs/platform/progress/common/progress';\nimport { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';\nimport { WorkbenchStateContext, RemoteNameContext } from 'vs/workbench/browser/contextkeys';\nimport { IsWebContext } from 'vs/platform/contextkey/common/contextkeys';\nimport { AddRootFolderAction, OpenFolderAction, OpenFileFolderAction } from 'vs/workbench/browser/actions/workspaceActions';\nimport { isMacintosh } from 'vs/base/common/platform';\nimport { Codicon } from 'vs/base/common/codicons';\nimport { registerIcon } from 'vs/platform/theme/common/iconRegistry';\n\nconst explorerViewIcon = registerIcon('explorer-view-icon', Codicon.files, localize('explorerViewIcon', 'View icon of the explorer view.'));\nconst openEditorsViewIcon = registerIcon('open-editors-view-icon', Codicon.book, localize('openEditorsIcon', 'View icon of the open editors view.'));\n\nexport class ExplorerViewletViewsContribution extends Disposable implements IWorkbenchContribution {\n\n\tprivate openEditorsVisibleContextKey!: IContextKey<boolean>;\n\n\tconstructor(\n\t\t@IWorkspaceContextService private readonly workspaceContextService: IWorkspaceContextService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IProgressService progressService: IProgressService\n\t) {\n\t\tsuper();\n\n\t\tprogressService.withProgress({ location: ProgressLocation.Explorer }, () => workspaceContextService.getCompleteWorkspace()).finally(() => {\n\t\t\tthis.registerViews();\n\n\t\t\tthis.openEditorsVisibleContextKey = OpenEditorsVisibleContext.bindTo(contextKeyService);\n\t\t\tthis.updateOpenEditorsVisibility();\n\n\t\t\tthis._register(workspaceContextService.onDidChangeWorkbenchState(() => this.registerViews()));\n\t\t\tthis._register(workspaceContextService.onDidChangeWorkspaceFolders(() => this.registerViews()));\n\t\t\tthis._register(this.configurationService.onDidChangeConfiguration(e => this.onConfigurationUpdated(e)));\n\t\t});\n\t}\n\n\tprivate registerViews(): void {\n\t\tconst viewDescriptors = viewsRegistry.getViews(VIEW_CONTAINER);\n\n\t\tlet viewDescriptorsToRegister: IViewDescriptor[] = [];\n\t\tlet viewDescriptorsToDeregister: IViewDescriptor[] = [];\n\n\t\tconst openEditorsViewDescriptor = this.createOpenEditorsViewDescriptor();\n\t\tif (!viewDescriptors.some(v => v.id === openEditorsViewDescriptor.id)) {\n\t\t\tviewDescriptorsToRegister.push(openEditorsViewDescriptor);\n\t\t}\n\n\t\tconst explorerViewDescriptor = this.createExplorerViewDescriptor();\n\t\tconst registeredExplorerViewDescriptor = viewDescriptors.find(v => v.id === explorerViewDescriptor.id);\n\t\tconst emptyViewDescriptor = this.createEmptyViewDescriptor();\n\t\tconst registeredEmptyViewDescriptor = viewDescriptors.find(v => v.id === emptyViewDescriptor.id);\n\n\t\tif (this.workspaceContextService.getWorkbenchState() === WorkbenchState.EMPTY || this.workspaceContextService.getWorkspace().folders.length === 0) {\n\t\t\tif (registeredExplorerViewDescriptor) {\n\t\t\t\tviewDescriptorsToDeregister.push(registeredExplorerViewDescriptor);\n\t\t\t}\n\t\t\tif (!registeredEmptyViewDescriptor) {\n\t\t\t\tviewDescriptorsToRegister.push(emptyViewDescriptor);\n\t\t\t}\n\t\t} else {\n\t\t\tif (registeredEmptyViewDescriptor) {\n\t\t\t\tviewDescriptorsToDeregister.push(registeredEmptyViewDescriptor);\n\t\t\t}\n\t\t\tif (!registeredExplorerViewDescriptor) {\n\t\t\t\tviewDescriptorsToRegister.push(explorerViewDescriptor);\n\t\t\t}\n\t\t}\n\n\t\tif (viewDescriptorsToRegister.length) {\n\t\t\tviewsRegistry.registerViews(viewDescriptorsToRegister, VIEW_CONTAINER);\n\t\t}\n\t\tif (viewDescriptorsToDeregister.length) {\n\t\t\tviewsRegistry.deregisterViews(viewDescriptorsToDeregister, VIEW_CONTAINER);\n\t\t}\n\t}\n\n\tprivate createOpenEditorsViewDescriptor(): IViewDescriptor {\n\t\treturn {\n\t\t\tid: OpenEditorsView.ID,\n\t\t\tname: OpenEditorsView.NAME,\n\t\t\tctorDescriptor: new SyncDescriptor(OpenEditorsView),\n\t\t\tcontainerIcon: openEditorsViewIcon,\n\t\t\torder: 0,\n\t\t\twhen: OpenEditorsVisibleContext,\n\t\t\tcanToggleVisibility: true,\n\t\t\tcanMoveView: true,\n\t\t\tcollapsed: false,\n\t\t\thideByDefault: true,\n\t\t\tfocusCommand: {\n\t\t\t\tid: 'workbench.files.action.focusOpenEditorsView',\n\t\t\t\tkeybindings: { primary: KeyChord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyCode.KEY_E) }\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate createEmptyViewDescriptor(): IViewDescriptor {\n\t\treturn {\n\t\t\tid: EmptyView.ID,\n\t\t\tname: EmptyView.NAME,\n\t\t\tcontainerIcon: explorerViewIcon,\n\t\t\tctorDescriptor: new SyncDescriptor(EmptyView),\n\t\t\torder: 1,\n\t\t\tcanToggleVisibility: true,\n\t\t\tfocusCommand: {\n\t\t\t\tid: 'workbench.explorer.fileView.focus'\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate createExplorerViewDescriptor(): IViewDescriptor {\n\t\treturn {\n\t\t\tid: VIEW_ID,\n\t\t\tname: localize('folders', \"Folders\"),\n\t\t\tcontainerIcon: explorerViewIcon,\n\t\t\tctorDescriptor: new SyncDescriptor(ExplorerView),\n\t\t\torder: 1,\n\t\t\tcanToggleVisibility: false,\n\t\t\tfocusCommand: {\n\t\t\t\tid: 'workbench.explorer.fileView.focus'\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate onConfigurationUpdated(e: IConfigurationChangeEvent): void {\n\t\tif (e.affectsConfiguration('explorer.openEditors.visible')) {\n\t\t\tthis.updateOpenEditorsVisibility();\n\t\t}\n\t}\n\n\tprivate updateOpenEditorsVisibility(): void {\n\t\tthis.openEditorsVisibleContextKey.set(this.workspaceContextService.getWorkbenchState() === WorkbenchState.EMPTY || this.configurationService.getValue('explorer.openEditors.visible') !== 0);\n\t}\n}\n\nexport class ExplorerViewPaneContainer extends ViewPaneContainer {\n\n\tprivate viewletVisibleContextKey: IContextKey<boolean>;\n\n\tconstructor(\n\t\t@IWorkbenchLayoutService layoutService: IWorkbenchLayoutService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IWorkspaceContextService contextService: IWorkspaceContextService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IEditorGroupsService private readonly editorGroupService: IEditorGroupsService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t@IExtensionService extensionService: IExtensionService,\n\t\t@IViewDescriptorService viewDescriptorService: IViewDescriptorService\n\t) {\n\n\t\tsuper(VIEWLET_ID, { mergeViewWithContainerWhenSingleView: true }, instantiationService, configurationService, layoutService, contextMenuService, telemetryService, extensionService, themeService, storageService, contextService, viewDescriptorService);\n\n\t\tthis.viewletVisibleContextKey = ExplorerViewletVisibleContext.bindTo(contextKeyService);\n\n\t\tthis._register(this.contextService.onDidChangeWorkspaceName(e => this.updateTitleArea()));\n\t}\n\n\toverride create(parent: HTMLElement): void {\n\t\tsuper.create(parent);\n\t\tparent.classList.add('explorer-viewlet');\n\t}\n\n\tprotected override createView(viewDescriptor: IViewDescriptor, options: IViewletViewOptions): ViewPane {\n\t\tif (viewDescriptor.id === VIEW_ID) {\n\t\t\t// Create a delegating editor service for the explorer to be able to delay the refresh in the opened\n\t\t\t// editors view above. This is a workaround for being able to double click on a file to make it pinned\n\t\t\t// without causing the animation in the opened editors view to kick in and change scroll position.\n\t\t\t// We try to be smart and only use the delay if we recognize that the user action is likely to cause\n\t\t\t// a new entry in the opened editors view.\n\t\t\tconst delegatingEditorService = this.instantiationService.createInstance(DelegatingEditorService, async (group, delegate): Promise<IEditorPane | undefined> => {\n\t\t\t\tlet openEditorsView = this.getOpenEditorsView();\n\t\t\t\tif (openEditorsView) {\n\t\t\t\t\tlet delay = 0;\n\n\t\t\t\t\tconst config = this.configurationService.getValue<IFilesConfiguration>();\n\t\t\t\t\tconst delayEditorOpeningInOpenedEditors = !!config.workbench?.editor?.enablePreview; // No need to delay if preview is disabled\n\n\t\t\t\t\tconst activeGroup = this.editorGroupService.activeGroup;\n\t\t\t\t\tif (delayEditorOpeningInOpenedEditors && group === activeGroup && !activeGroup.previewEditor) {\n\t\t\t\t\t\tdelay = 250; // a new editor entry is likely because there is either no group or no preview in group\n\t\t\t\t\t}\n\n\t\t\t\t\topenEditorsView.setStructuralRefreshDelay(delay);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\treturn await delegate();\n\t\t\t\t} catch (error) {\n\t\t\t\t\treturn undefined; // ignore\n\t\t\t\t} finally {\n\t\t\t\t\tif (openEditorsView) {\n\t\t\t\t\t\topenEditorsView.setStructuralRefreshDelay(0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst explorerInstantiator = this.instantiationService.createChild(new ServiceCollection([IEditorService, delegatingEditorService]));\n\t\t\treturn explorerInstantiator.createInstance(ExplorerView, options);\n\t\t}\n\t\treturn super.createView(viewDescriptor, options);\n\t}\n\n\tpublic getExplorerView(): ExplorerView {\n\t\treturn <ExplorerView>this.getView(VIEW_ID);\n\t}\n\n\tpublic getOpenEditorsView(): OpenEditorsView {\n\t\treturn <OpenEditorsView>this.getView(OpenEditorsView.ID);\n\t}\n\n\tpublic override setVisible(visible: boolean): void {\n\t\tthis.viewletVisibleContextKey.set(visible);\n\t\tsuper.setVisible(visible);\n\t}\n\n\toverride focus(): void {\n\t\tconst explorerView = this.getView(VIEW_ID);\n\t\tif (explorerView && this.panes.every(p => !p.isExpanded())) {\n\t\t\texplorerView.setExpanded(true);\n\t\t}\n\t\tif (explorerView?.isExpanded()) {\n\t\t\texplorerView.focus();\n\t\t} else {\n\t\t\tsuper.focus();\n\t\t}\n\t}\n}\n\nconst viewContainerRegistry = Registry.as<IViewContainersRegistry>(Extensions.ViewContainersRegistry);\n\n/**\n * Explorer viewlet container.\n */\nexport const VIEW_CONTAINER: ViewContainer = viewContainerRegistry.registerViewContainer({\n\tid: VIEWLET_ID,\n\ttitle: localize('explore', \"Explorer\"),\n\tctorDescriptor: new SyncDescriptor(ExplorerViewPaneContainer),\n\tstorageId: 'workbench.explorer.views.state',\n\ticon: explorerViewIcon,\n\talwaysUseContainerInfo: true,\n\torder: 0,\n\topenCommandActionDescriptor: {\n\t\tid: VIEWLET_ID,\n\t\ttitle: localize('explore', \"Explorer\"),\n\t\tmnemonicTitle: localize({ key: 'miViewExplorer', comment: ['&& denotes a mnemonic'] }, \"&&Explorer\"),\n\t\tkeybindings: { primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_E },\n\t\torder: 0\n\t},\n}, ViewContainerLocation.Sidebar, { isDefault: true });\n\nconst viewsRegistry = Registry.as<IViewsRegistry>(Extensions.ViewsRegistry);\nviewsRegistry.registerViewWelcomeContent(EmptyView.ID, {\n\tcontent: localize({ key: 'noWorkspaceHelp', comment: ['Please do not translate the word \"commmand\", it is part of our internal syntax which must not change'] },\n\t\t\"You have not yet added a folder to the workspace.\\n[Add Folder](command:{0})\", AddRootFolderAction.ID),\n\twhen: WorkbenchStateContext.isEqualTo('workspace'),\n\tgroup: ViewContentGroups.Open,\n\torder: 1\n});\n\nconst commandId = isMacintosh ? OpenFileFolderAction.ID : OpenFolderAction.ID;\nviewsRegistry.registerViewWelcomeContent(EmptyView.ID, {\n\tcontent: localize({ key: 'remoteNoFolderHelp', comment: ['Please do not translate the word \"commmand\", it is part of our internal syntax which must not change'] },\n\t\t\"Connected to remote.\\n[Open Folder](command:{0})\", commandId),\n\twhen: ContextKeyExpr.and(WorkbenchStateContext.notEqualsTo('workspace'), RemoteNameContext.notEqualsTo(''), IsWebContext.toNegated()),\n\tgroup: ViewContentGroups.Open,\n\torder: 1\n});\n\nviewsRegistry.registerViewWelcomeContent(EmptyView.ID, {\n\tcontent: localize({ key: 'noFolderHelp', comment: ['Please do not translate the word \"commmand\", it is part of our internal syntax which must not change'] },\n\t\t\"You have not yet opened a folder.\\n[Open Folder](command:{0})\", commandId),\n\twhen: ContextKeyExpr.or(ContextKeyExpr.and(WorkbenchStateContext.notEqualsTo('workspace'), RemoteNameContext.isEqualTo('')), ContextKeyExpr.and(WorkbenchStateContext.notEqualsTo('workspace'), IsWebContext)),\n\tgroup: ViewContentGroups.Open,\n\torder: 1\n});\n"]}