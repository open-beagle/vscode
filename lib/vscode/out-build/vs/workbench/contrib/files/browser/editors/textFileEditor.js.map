{"version":3,"sources":["vs/workbench/contrib/files/browser/editors/textFileEditor.ts"],"names":[],"mappings":"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","file":"textFileEditor.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { toErrorMessage } from 'vs/base/common/errorMessage';\nimport { isFunction, assertIsDefined } from 'vs/base/common/types';\nimport { isValidBasename } from 'vs/base/common/extpath';\nimport { basename } from 'vs/base/common/resources';\nimport { toAction } from 'vs/base/common/actions';\nimport { VIEWLET_ID, TEXT_FILE_EDITOR_ID } from 'vs/workbench/contrib/files/common/files';\nimport { ITextFileService, TextFileOperationError, TextFileOperationResult } from 'vs/workbench/services/textfile/common/textfiles';\nimport { BaseTextEditor } from 'vs/workbench/browser/parts/editor/textEditor';\nimport { EditorOptions, TextEditorOptions, IEditorInput, IEditorOpenContext } from 'vs/workbench/common/editor';\nimport { BinaryEditorModel } from 'vs/workbench/common/editor/binaryEditorModel';\nimport { FileEditorInput } from 'vs/workbench/contrib/files/common/editors/fileEditorInput';\nimport { IViewletService } from 'vs/workbench/services/viewlet/browser/viewlet';\nimport { FileOperationError, FileOperationResult, FileChangesEvent, IFileService, FileOperationEvent, FileOperation } from 'vs/platform/files/common/files';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { ITextResourceConfigurationService } from 'vs/editor/common/services/textResourceConfigurationService';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { ScrollType } from 'vs/editor/common/editorCommon';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { createErrorWithActions } from 'vs/base/common/errors';\nimport { EditorActivation, EditorOverride, IEditorOptions } from 'vs/platform/editor/common/editor';\nimport { IUriIdentityService } from 'vs/workbench/services/uriIdentity/common/uriIdentity';\nimport { IExplorerService } from 'vs/workbench/contrib/files/browser/files';\n\n/**\n * An implementation of editor for file system resources.\n */\nexport class TextFileEditor extends BaseTextEditor {\n\n\tstatic readonly ID = TEXT_FILE_EDITOR_ID;\n\n\tconstructor(\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IViewletService private readonly viewletService: IViewletService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@ITextResourceConfigurationService textResourceConfigurationService: ITextResourceConfigurationService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IEditorGroupsService editorGroupService: IEditorGroupsService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@IExplorerService private readonly explorerService: IExplorerService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService\n\t) {\n\t\tsuper(TextFileEditor.ID, telemetryService, instantiationService, storageService, textResourceConfigurationService, themeService, editorService, editorGroupService);\n\n\t\t// Clear view state for deleted files\n\t\tthis._register(this.fileService.onDidFilesChange(e => this.onDidFilesChange(e)));\n\n\t\t// Move view state for moved files\n\t\tthis._register(this.fileService.onDidRunOperation(e => this.onDidRunOperation(e)));\n\n\t\t// Listen to file system provider changes\n\t\tthis._register(this.fileService.onDidChangeFileSystemProviderCapabilities(e => this.onDidFileSystemProviderChange(e.scheme)));\n\t\tthis._register(this.fileService.onDidChangeFileSystemProviderRegistrations(e => this.onDidFileSystemProviderChange(e.scheme)));\n\t}\n\n\tprivate onDidFilesChange(e: FileChangesEvent): void {\n\t\tconst deleted = e.getDeleted();\n\t\tif (deleted?.length) {\n\t\t\tthis.clearTextEditorViewState(deleted.map(({ resource }) => resource));\n\t\t}\n\t}\n\n\tprivate onDidRunOperation(e: FileOperationEvent): void {\n\t\tif (e.operation === FileOperation.MOVE && e.target) {\n\t\t\tthis.moveTextEditorViewState(e.resource, e.target.resource, this.uriIdentityService.extUri);\n\t\t}\n\t}\n\n\tprivate onDidFileSystemProviderChange(scheme: string): void {\n\t\tconst control = this.getControl();\n\t\tconst input = this.input;\n\t\tif (control && input?.resource.scheme === scheme) {\n\t\t\tcontrol.updateOptions({ readOnly: input.isReadonly() });\n\t\t}\n\t}\n\n\tprotected override onWillCloseEditorInGroup(editor: IEditorInput): void {\n\n\t\t// React to editors closing to preserve or clear view state. This needs to happen\n\t\t// in the onWillCloseEditor because at that time the editor has not yet\n\t\t// been disposed and we can safely persist the view state still as needed.\n\t\tthis.doSaveOrClearTextEditorViewState(editor);\n\t}\n\n\toverride getTitle(): string {\n\t\treturn this.input ? this.input.getName() : localize('textFileEditor', \"Text File Editor\");\n\t}\n\n\toverride get input(): FileEditorInput | undefined {\n\t\treturn this._input as FileEditorInput;\n\t}\n\n\toverride async setInput(input: FileEditorInput, options: EditorOptions | undefined, context: IEditorOpenContext, token: CancellationToken): Promise<void> {\n\n\t\t// Update/clear view settings if input changes\n\t\tthis.doSaveOrClearTextEditorViewState(this.input);\n\n\t\t// Set input and resolve\n\t\tawait super.setInput(input, options, context, token);\n\t\ttry {\n\t\t\tconst resolvedModel = await input.resolve();\n\n\t\t\t// Check for cancellation\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// There is a special case where the text editor has to handle binary file editor input: if a binary file\n\t\t\t// has been resolved and cached before, it maybe an actual instance of BinaryEditorModel. In this case our text\n\t\t\t// editor has to open this model using the binary editor. We return early in this case.\n\t\t\tif (resolvedModel instanceof BinaryEditorModel) {\n\t\t\t\treturn this.openAsBinary(input, options);\n\t\t\t}\n\n\t\t\tconst textFileModel = resolvedModel;\n\n\t\t\t// Editor\n\t\t\tconst textEditor = assertIsDefined(this.getControl());\n\t\t\ttextEditor.setModel(textFileModel.textEditorModel);\n\n\t\t\t// Always restore View State if any associated and not disabled via settings\n\t\t\tif (this.shouldRestoreTextEditorViewState(input, context)) {\n\t\t\t\tconst editorViewState = this.loadTextEditorViewState(input.resource);\n\t\t\t\tif (editorViewState) {\n\t\t\t\t\ttextEditor.restoreViewState(editorViewState);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// TextOptions (avoiding instanceof here for a reason, do not change!)\n\t\t\tif (options && isFunction((<TextEditorOptions>options).apply)) {\n\t\t\t\t(<TextEditorOptions>options).apply(textEditor, ScrollType.Immediate);\n\t\t\t}\n\n\t\t\t// Since the resolved model provides information about being readonly\n\t\t\t// or not, we apply it here to the editor even though the editor input\n\t\t\t// was already asked for being readonly or not. The rationale is that\n\t\t\t// a resolved model might have more specific information about being\n\t\t\t// readonly or not that the input did not have.\n\t\t\ttextEditor.updateOptions({ readOnly: textFileModel.isReadonly() });\n\t\t} catch (error) {\n\t\t\tthis.handleSetInputError(error, input, options);\n\t\t}\n\t}\n\n\tprotected handleSetInputError(error: Error, input: FileEditorInput, options: EditorOptions | undefined): void {\n\n\t\t// In case we tried to open a file inside the text editor and the response\n\t\t// indicates that this is not a text file, reopen the file through the binary\n\t\t// editor.\n\t\tif ((<TextFileOperationError>error).textFileOperationResult === TextFileOperationResult.FILE_IS_BINARY) {\n\t\t\treturn this.openAsBinary(input, options);\n\t\t}\n\n\t\t// Similar, handle case where we were asked to open a folder in the text editor.\n\t\tif ((<FileOperationError>error).fileOperationResult === FileOperationResult.FILE_IS_DIRECTORY) {\n\t\t\tthis.openAsFolder(input);\n\n\t\t\tthrow new Error(localize('openFolderError', \"File is a directory\"));\n\t\t}\n\n\t\t// Offer to create a file from the error if we have a file not found and the name is valid\n\t\tif ((<FileOperationError>error).fileOperationResult === FileOperationResult.FILE_NOT_FOUND && isValidBasename(basename(input.preferredResource))) {\n\t\t\tthrow createErrorWithActions(toErrorMessage(error), {\n\t\t\t\tactions: [\n\t\t\t\t\ttoAction({\n\t\t\t\t\t\tid: 'workbench.files.action.createMissingFile', label: localize('createFile', \"Create File\"), run: async () => {\n\t\t\t\t\t\t\tawait this.textFileService.create([{ resource: input.preferredResource }]);\n\n\t\t\t\t\t\t\treturn this.editorService.openEditor({\n\t\t\t\t\t\t\t\tresource: input.preferredResource,\n\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\tpinned: true // new file gets pinned by default\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t]\n\t\t\t});\n\t\t}\n\n\t\t// Otherwise make sure the error bubbles up\n\t\tthrow error;\n\t}\n\n\tprivate openAsBinary(input: FileEditorInput, options: EditorOptions | undefined): void {\n\t\tinput.setForceOpenAsBinary();\n\n\t\t// Make sure to not steal away the currently active group\n\t\t// because we are triggering another openEditor() call\n\t\t// and do not control the initial intent that resulted\n\t\t// in us now opening as binary.\n\t\tconst preservingOptions: IEditorOptions = { activation: EditorActivation.PRESERVE, override: EditorOverride.DISABLED };\n\t\tif (options) {\n\t\t\toptions.overwrite(preservingOptions);\n\t\t} else {\n\t\t\toptions = EditorOptions.create(preservingOptions);\n\t\t}\n\n\t\tthis.editorService.openEditor(input, options, this.group);\n\t}\n\n\tprivate async openAsFolder(input: FileEditorInput): Promise<void> {\n\t\tif (!this.group) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Since we cannot open a folder, we have to restore the previous input if any and close the editor\n\t\tawait this.group.closeEditor(this.input);\n\n\t\t// Best we can do is to reveal the folder in the explorer\n\t\tif (this.contextService.isInsideWorkspace(input.preferredResource)) {\n\t\t\tawait this.viewletService.openViewlet(VIEWLET_ID);\n\n\t\t\tthis.explorerService.select(input.preferredResource, true);\n\t\t}\n\t}\n\n\toverride clearInput(): void {\n\n\t\t// Update/clear editor view state in settings\n\t\tthis.doSaveOrClearTextEditorViewState(this.input);\n\n\t\t// Clear Model\n\t\tconst textEditor = this.getControl();\n\t\tif (textEditor) {\n\t\t\ttextEditor.setModel(null);\n\t\t}\n\n\t\t// Pass to super\n\t\tsuper.clearInput();\n\t}\n\n\tprotected override saveState(): void {\n\n\t\t// Update/clear editor view State\n\t\tthis.doSaveOrClearTextEditorViewState(this.input);\n\n\t\tsuper.saveState();\n\t}\n\n\tprivate doSaveOrClearTextEditorViewState(input: IEditorInput | undefined): void {\n\t\tif (!(input instanceof FileEditorInput)) {\n\t\t\treturn; // ensure we have an input to handle view state for\n\t\t}\n\n\t\t// If the user configured to not restore view state, we clear the view\n\t\t// state unless the editor is still opened in the group.\n\t\tif (!this.shouldRestoreTextEditorViewState(input) && (!this.group || !this.group.contains(input))) {\n\t\t\tthis.clearTextEditorViewState([input.resource], this.group);\n\t\t}\n\n\t\t// Otherwise we save the view state to restore it later\n\t\telse if (!input.isDisposed()) {\n\t\t\tthis.saveTextEditorViewState(input.resource);\n\t\t}\n\t}\n}\n"]}