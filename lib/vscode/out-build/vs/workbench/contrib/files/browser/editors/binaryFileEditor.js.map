{"version":3,"sources":["vs/workbench/contrib/files/browser/editors/binaryFileEditor.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAchG;;OAEG;IACH,IAAa,gBAAgB,GAA7B,MAAa,gBAAiB,SAAQ,uCAAwB;QAI7D,YACoB,gBAAmC,EACvC,YAA2B,EACT,aAA6B,EACrB,qBAA6C,EACrE,cAA+B;YAEhD,KAAK,CACJ,gBAAgB,CAAC,EAAE,EACnB;gBACC,YAAY,EAAE,CAAC,KAAK,EAAE,OAAO,EAAE,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,OAAO,CAAC;aACnE,EACD,gBAAgB,EAChB,YAAY,EACZ,cAAc,CACd,CAAC;YAZ+B,kBAAa,GAAb,aAAa,CAAgB;YACrB,0BAAqB,GAArB,qBAAqB,CAAwB;QAYvF,CAAC;QAEO,KAAK,CAAC,YAAY,CAAC,KAAkB,EAAE,OAAkC;;YAChF,IAAI,KAAK,YAAY,iCAAe,IAAI,IAAI,CAAC,KAAK,EAAE;gBAEnD,oEAAoE;gBACpE,KAAK,CAAC,kBAAkB,EAAE,CAAC;gBAE3B,gEAAgE;gBAChE,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,qBAAqB,CAAC,KAAK,kCAAO,OAAO,KAAE,QAAQ,EAAE,uBAAc,CAAC,IAAI,KAAK,IAAI,CAAC,KAAK,CAAC,CAAC;gBAEjJ,IAAI,UAAU,GAAG,MAAA,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,OAAO,mCAAI,OAAO,CAAC;gBACpD,UAAU,mCAAQ,UAAU,KAAE,QAAQ,EAAE,uBAAc,CAAC,QAAQ,GAAE,CAAC;gBAClE,0DAA0D;gBAC1D,MAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;wBACxC,MAAM,EAAE,KAAK;wBACb,WAAW,EAAE,MAAA,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,MAAM,mCAAI,KAAK;wBAC5C,OAAO,EAAE,UAAU;qBACnB,CAAC,EAAE,MAAA,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,KAAK,mCAAI,IAAI,CAAC,KAAK,CAAC,CAAC;aACzC;QACF,CAAC;QAEQ,QAAQ;YAChB,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAkB,EAAE,IAAoB,CAAC,CAAC;QAC/F,CAAC;KACD,CAAA;IA3CgB,mBAAE,GAAG,6BAAqB,CAAC;IAF/B,gBAAgB;QAK1B,WAAA,6BAAiB,CAAA;QACjB,WAAA,4BAAa,CAAA;QACb,WAAA,8BAAc,CAAA;QACd,WAAA,8CAAsB,CAAA;QACtB,WAAA,yBAAe,CAAA;OATL,gBAAgB,CA6C5B;IA7CY,4CAAgB","file":"binaryFileEditor.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { BaseBinaryResourceEditor } from 'vs/workbench/browser/parts/editor/binaryEditor';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { EditorInput, EditorOptions } from 'vs/workbench/common/editor';\nimport { FileEditorInput } from 'vs/workbench/contrib/files/common/editors/fileEditorInput';\nimport { BINARY_FILE_EDITOR_ID } from 'vs/workbench/contrib/files/common/files';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { EditorOverride } from 'vs/platform/editor/common/editor';\nimport { IEditorOverrideService } from 'vs/workbench/services/editor/common/editorOverrideService';\n\n/**\n * An implementation of editor for binary files that cannot be displayed.\n */\nexport class BinaryFileEditor extends BaseBinaryResourceEditor {\n\n\tstatic readonly ID = BINARY_FILE_EDITOR_ID;\n\n\tconstructor(\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IEditorOverrideService private readonly editorOverrideService: IEditorOverrideService,\n\t\t@IStorageService storageService: IStorageService\n\t) {\n\t\tsuper(\n\t\t\tBinaryFileEditor.ID,\n\t\t\t{\n\t\t\t\topenInternal: (input, options) => this.openInternal(input, options)\n\t\t\t},\n\t\t\ttelemetryService,\n\t\t\tthemeService,\n\t\t\tstorageService\n\t\t);\n\t}\n\n\tprivate async openInternal(input: EditorInput, options: EditorOptions | undefined): Promise<void> {\n\t\tif (input instanceof FileEditorInput && this.group) {\n\n\t\t\t// Enforce to open the input as text to enable our text based viewer\n\t\t\tinput.setForceOpenAsText();\n\n\t\t\t// Try to let the user pick an override if there is one availabe\n\t\t\tconst overridenInput = await this.editorOverrideService.resolveEditorOverride(input, { ...options, override: EditorOverride.PICK, }, this.group);\n\n\t\t\tlet newOptions = overridenInput?.options ?? options;\n\t\t\tnewOptions = { ...newOptions, override: EditorOverride.DISABLED };\n\t\t\t// Replace the overrriden input, with the text based input\n\t\t\tawait this.editorService.replaceEditors([{\n\t\t\t\teditor: input,\n\t\t\t\treplacement: overridenInput?.editor ?? input,\n\t\t\t\toptions: newOptions,\n\t\t\t}], overridenInput?.group ?? this.group);\n\t\t}\n\t}\n\n\toverride getTitle(): string {\n\t\treturn this.input ? this.input.getName() : localize('binaryFileEditor', \"Binary File Viewer\");\n\t}\n}\n"]}