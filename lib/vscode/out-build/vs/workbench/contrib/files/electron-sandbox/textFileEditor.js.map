{"version":3,"sources":["vs/workbench/contrib/files/electron-sandbox/textFileEditor.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAyBhG;;OAEG;IACH,IAAa,oBAAoB,GAAjC,MAAa,oBAAqB,SAAQ,+BAAc;QAEvD,YACoB,gBAAmC,EACxC,WAAyB,EACtB,cAA+B,EACzB,oBAA2C,EACxC,cAAwC,EACjD,cAA+B,EACb,gCAAmE,EACtF,aAA6B,EAC9B,YAA2B,EACpB,kBAAwC,EAC5C,eAAiC,EACd,iBAAqC,EACpC,kBAAuC,EAC3D,eAAiC,EAC9B,kBAAuC,EAC1B,cAA+B;YAEjE,KAAK,CAAC,gBAAgB,EAAE,WAAW,EAAE,cAAc,EAAE,oBAAoB,EAAE,cAAc,EAAE,cAAc,EAAE,gCAAgC,EAAE,aAAa,EAAE,YAAY,EAAE,kBAAkB,EAAE,eAAe,EAAE,eAAe,EAAE,kBAAkB,CAAC,CAAC;YAN/M,sBAAiB,GAAjB,iBAAiB,CAAoB;YACpC,uBAAkB,GAAlB,kBAAkB,CAAqB;YAG3C,mBAAc,GAAd,cAAc,CAAiB;QAGlE,CAAC;QAEkB,mBAAmB,CAAC,KAAY,EAAE,KAAsB,EAAE,OAAkC;YAE9G,qEAAqE;YACrE,IAAyB,KAAM,CAAC,mBAAmB,sCAAkD,EAAE;gBACtG,MAAM,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,8BAAsB,EAAE,CAAC,IAAI,CAAC,gCAAgC,CAAC,QAAQ,CAAS,SAAS,EAAE,gCAAgC,CAAC,IAAI,mCAA2B,CAAC,CAAC;gBAE1L,MAAM,CAAA,GAAA,+BAAsB,CAAA,CAAC,CAAA,GAAA,cAAQ,CAAA,CAAC,CAA0B,EAAE,IAAmF,EAAE,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,EAAE;oBACtL,OAAO,EAAE;wBACR,CAAA,GAAA,kBAAQ,CAAA,CAAC;4BACR,EAAE,EAAE,0DAA0D,EAAE,KAAK,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAkC,EAAE,IAAqB,EAAE,WAAW,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE;gCAClK,OAAO,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC;oCACtC,OAAO,EAAE;wCACR,gBAAgB,WAAW,EAAE;qCAC7B;iCACD,CAAC,CAAC;4BACJ,CAAC;yBACD,CAAC;wBACF,CAAA,GAAA,kBAAQ,CAAA,CAAC;4BACR,EAAE,EAAE,8CAA8C,EAAE,KAAK,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAsB,EAAE,IAAwB,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE;gCAChI,OAAO,IAAI,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,SAAS,EAAE,EAAE,KAAK,EAAE,gCAAgC,EAAE,CAAC,CAAC;4BAC3G,CAAC;yBACD,CAAC;qBACF;iBACD,CAAC,CAAC;aACH;YAED,qCAAqC;YACrC,KAAK,CAAC,mBAAmB,CAAC,KAAK,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;QAClD,CAAC;KACD,CAAA;IApDY,oBAAoB;QAG9B,WAAA,6BAAiB,CAAA;QACjB,WAAA,oBAAY,CAAA;QACZ,WAAA,yBAAe,CAAA;QACf,WAAA,qCAAqB,CAAA;QACrB,WAAA,oCAAwB,CAAA;QACxB,WAAA,yBAAe,CAAA;QACf,WAAA,oEAAiC,CAAA;QACjC,WAAA,8BAAc,CAAA;QACd,WAAA,4BAAa,CAAA;QACb,WAAA,0CAAoB,CAAA;QACpB,YAAA,4BAAgB,CAAA;QAChB,YAAA,2BAAkB,CAAA;QAClB,YAAA,iCAAmB,CAAA;QACnB,YAAA,wBAAgB,CAAA;QAChB,YAAA,iCAAmB,CAAA;QACnB,YAAA,gCAAe,CAAA;OAlBL,oBAAoB,CAoDhC;IApDY,oDAAoB","file":"textFileEditor.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { TextFileEditor } from 'vs/workbench/contrib/files/browser/editors/textFileEditor';\nimport { FileEditorInput } from 'vs/workbench/contrib/files/common/editors/fileEditorInput';\nimport { EditorOptions } from 'vs/workbench/common/editor';\nimport { FileOperationError, FileOperationResult, IFileService, MIN_MAX_MEMORY_SIZE_MB, FALLBACK_MAX_MEMORY_SIZE_MB } from 'vs/platform/files/common/files';\nimport { createErrorWithActions } from 'vs/base/common/errors';\nimport { toAction } from 'vs/base/common/actions';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IViewletService } from 'vs/workbench/services/viewlet/browser/viewlet';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { ITextResourceConfigurationService } from 'vs/editor/common/services/textResourceConfigurationService';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';\nimport { IPreferencesService } from 'vs/workbench/services/preferences/common/preferences';\nimport { INativeHostService } from 'vs/platform/native/electron-sandbox/native';\nimport { IUriIdentityService } from 'vs/workbench/services/uriIdentity/common/uriIdentity';\nimport { IExplorerService } from 'vs/workbench/contrib/files/browser/files';\nimport { IProductService } from 'vs/platform/product/common/productService';\n\n/**\n * An implementation of editor for file system resources.\n */\nexport class NativeTextFileEditor extends TextFileEditor {\n\n\tconstructor(\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IViewletService viewletService: IViewletService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IWorkspaceContextService contextService: IWorkspaceContextService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@ITextResourceConfigurationService textResourceConfigurationService: ITextResourceConfigurationService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IEditorGroupsService editorGroupService: IEditorGroupsService,\n\t\t@ITextFileService textFileService: ITextFileService,\n\t\t@INativeHostService private readonly nativeHostService: INativeHostService,\n\t\t@IPreferencesService private readonly preferencesService: IPreferencesService,\n\t\t@IExplorerService explorerService: IExplorerService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t\t@IProductService private readonly productService: IProductService\n\t) {\n\t\tsuper(telemetryService, fileService, viewletService, instantiationService, contextService, storageService, textResourceConfigurationService, editorService, themeService, editorGroupService, textFileService, explorerService, uriIdentityService);\n\t}\n\n\tprotected override handleSetInputError(error: Error, input: FileEditorInput, options: EditorOptions | undefined): void {\n\n\t\t// Allow to restart with higher memory limit if the file is too large\n\t\tif ((<FileOperationError>error).fileOperationResult === FileOperationResult.FILE_EXCEEDS_MEMORY_LIMIT) {\n\t\t\tconst memoryLimit = Math.max(MIN_MAX_MEMORY_SIZE_MB, +this.textResourceConfigurationService.getValue<number>(undefined, 'files.maxMemoryForLargeFilesMB') || FALLBACK_MAX_MEMORY_SIZE_MB);\n\n\t\t\tthrow createErrorWithActions(localize('fileTooLargeForHeapError', \"To open a file of this size, you need to restart and allow {0} to use more memory\", this.productService.nameShort), {\n\t\t\t\tactions: [\n\t\t\t\t\ttoAction({\n\t\t\t\t\t\tid: 'workbench.window.action.relaunchWithIncreasedMemoryLimit', label: localize('relaunchWithIncreasedMemoryLimit', \"Restart with {0} MB\", memoryLimit), run: () => {\n\t\t\t\t\t\t\treturn this.nativeHostService.relaunch({\n\t\t\t\t\t\t\t\taddArgs: [\n\t\t\t\t\t\t\t\t\t`--max-memory=${memoryLimit}`\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}),\n\t\t\t\t\ttoAction({\n\t\t\t\t\t\tid: 'workbench.window.action.configureMemoryLimit', label: localize('configureMemoryLimit', 'Configure Memory Limit'), run: () => {\n\t\t\t\t\t\t\treturn this.preferencesService.openGlobalSettings(undefined, { query: 'files.maxMemoryForLargeFilesMB' });\n\t\t\t\t\t\t}\n\t\t\t\t\t}),\n\t\t\t\t]\n\t\t\t});\n\t\t}\n\n\t\t// Fallback to handling in super type\n\t\tsuper.handleSetInputError(error, input, options);\n\t}\n}\n"]}