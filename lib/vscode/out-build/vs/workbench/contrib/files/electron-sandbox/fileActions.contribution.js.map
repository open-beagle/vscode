{"version":3,"sources":["vs/workbench/contrib/files/electron-sandbox/fileActions.contribution.ts"],"names":[],"mappings":"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","file":"fileActions.contribution.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { URI } from 'vs/base/common/uri';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { isWindows, isMacintosh } from 'vs/base/common/platform';\nimport { Schemas } from 'vs/base/common/network';\nimport { INativeHostService } from 'vs/platform/native/electron-sandbox/native';\nimport { KeybindingsRegistry, KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { KeyMod, KeyCode, KeyChord } from 'vs/base/common/keyCodes';\nimport { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { getMultiSelectedResources, IExplorerService } from 'vs/workbench/contrib/files/browser/files';\nimport { IListService } from 'vs/platform/list/browser/listService';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { revealResourcesInOS } from 'vs/workbench/contrib/files/electron-sandbox/fileCommands';\nimport { MenuRegistry, MenuId } from 'vs/platform/actions/common/actions';\nimport { ResourceContextKey } from 'vs/workbench/common/resources';\nimport { appendToCommandPalette, appendEditorTitleContextMenuItem } from 'vs/workbench/contrib/files/browser/fileActions.contribution';\nimport { SideBySideEditor, EditorResourceAccessor } from 'vs/workbench/common/editor';\nimport { ContextKeyOrExpr } from 'vs/platform/contextkey/common/contextkey';\n\nconst REVEAL_IN_OS_COMMAND_ID = 'revealFileInOS';\nconst REVEAL_IN_OS_LABEL = isWindows ? nls.localize('revealInWindows', \"Reveal in File Explorer\") : isMacintosh ? nls.localize('revealInMac', \"Reveal in Finder\") : nls.localize('openContainer', \"Open Containing Folder\");\nconst REVEAL_IN_OS_WHEN_CONTEXT = ContextKeyOrExpr.create([ResourceContextKey.Scheme.isEqualTo(Schemas.file), ResourceContextKey.Scheme.isEqualTo(Schemas.userData)]);\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: REVEAL_IN_OS_COMMAND_ID,\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: EditorContextKeys.focus.toNegated(),\n\tprimary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KEY_R,\n\twin: {\n\t\tprimary: KeyMod.Shift | KeyMod.Alt | KeyCode.KEY_R\n\t},\n\thandler: (accessor: ServicesAccessor, resource: URI | object) => {\n\t\tconst resources = getMultiSelectedResources(resource, accessor.get(IListService), accessor.get(IEditorService), accessor.get(IExplorerService));\n\t\trevealResourcesInOS(resources, accessor.get(INativeHostService), accessor.get(IWorkspaceContextService));\n\t}\n});\n\nconst REVEAL_ACTIVE_FILE_IN_OS_COMMAND_ID = 'workbench.action.files.revealActiveFileInWindows';\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: undefined,\n\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyCode.KEY_R),\n\tid: REVEAL_ACTIVE_FILE_IN_OS_COMMAND_ID,\n\thandler: (accessor: ServicesAccessor) => {\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst activeInput = editorService.activeEditor;\n\t\tconst resource = EditorResourceAccessor.getOriginalUri(activeInput, { filterByScheme: Schemas.file, supportSideBySide: SideBySideEditor.PRIMARY });\n\t\tconst resources = resource ? [resource] : [];\n\t\trevealResourcesInOS(resources, accessor.get(INativeHostService), accessor.get(IWorkspaceContextService));\n\t}\n});\n\nappendEditorTitleContextMenuItem(REVEAL_IN_OS_COMMAND_ID, REVEAL_IN_OS_LABEL, REVEAL_IN_OS_WHEN_CONTEXT);\n\n// Menu registration - open editors\n\nconst revealInOsCommand = {\n\tid: REVEAL_IN_OS_COMMAND_ID,\n\ttitle: REVEAL_IN_OS_LABEL\n};\nMenuRegistry.appendMenuItem(MenuId.OpenEditorsContext, {\n\tgroup: 'navigation',\n\torder: 20,\n\tcommand: revealInOsCommand,\n\twhen: REVEAL_IN_OS_WHEN_CONTEXT\n});\n\n// Menu registration - explorer\n\nMenuRegistry.appendMenuItem(MenuId.ExplorerContext, {\n\tgroup: 'navigation',\n\torder: 20,\n\tcommand: revealInOsCommand,\n\twhen: REVEAL_IN_OS_WHEN_CONTEXT\n});\n\n// Command Palette\n\nconst category = { value: nls.localize('filesCategory', \"File\"), original: 'File' };\nappendToCommandPalette(REVEAL_IN_OS_COMMAND_ID, { value: REVEAL_IN_OS_LABEL, original: isWindows ? 'Reveal in File Explorer' : isMacintosh ? 'Reveal in Finder' : 'Open Containing Folder' }, category, REVEAL_IN_OS_WHEN_CONTEXT);\n"]}