{"version":3,"sources":["vs/workbench/contrib/bulkEdit/browser/bulkEditService.ts"],"names":[],"mappings":"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","file":"bulkEditService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { ICodeEditor, isCodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { IBulkEditOptions, IBulkEditResult, IBulkEditService, IBulkEditPreviewHandler, ResourceEdit, ResourceFileEdit, ResourceTextEdit } from 'vs/editor/browser/services/bulkEditService';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IProgress, IProgressStep, Progress } from 'vs/platform/progress/common/progress';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { EditorOption } from 'vs/editor/common/config/editorOptions';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { BulkTextEdits } from 'vs/workbench/contrib/bulkEdit/browser/bulkTextEdits';\nimport { BulkFileEdits } from 'vs/workbench/contrib/bulkEdit/browser/bulkFileEdits';\nimport { BulkCellEdits, ResourceNotebookCellEdit } from 'vs/workbench/contrib/bulkEdit/browser/bulkCellEdits';\nimport { UndoRedoGroup, UndoRedoSource } from 'vs/platform/undoRedo/common/undoRedo';\nimport { LinkedList } from 'vs/base/common/linkedList';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { ILifecycleService } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\n\nclass BulkEdit {\n\n\tconstructor(\n\t\tprivate readonly _label: string | undefined,\n\t\tprivate readonly _editor: ICodeEditor | undefined,\n\t\tprivate readonly _progress: IProgress<IProgressStep>,\n\t\tprivate readonly _token: CancellationToken,\n\t\tprivate readonly _edits: ResourceEdit[],\n\t\tprivate readonly _undoRedoGroup: UndoRedoGroup,\n\t\tprivate readonly _undoRedoSource: UndoRedoSource | undefined,\n\t\tprivate readonly _confirmBeforeUndo: boolean,\n\t\t@IInstantiationService private readonly _instaService: IInstantiationService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\n\t}\n\n\tariaMessage(): string {\n\t\tconst editCount = this._edits.length;\n\t\tconst resourceCount = this._edits.length;\n\t\tif (editCount === 0) {\n\t\t\treturn localize('summary.0', \"Made no edits\");\n\t\t} else if (editCount > 1 && resourceCount > 1) {\n\t\t\treturn localize('summary.nm', \"Made {0} text edits in {1} files\", editCount, resourceCount);\n\t\t} else {\n\t\t\treturn localize('summary.n0', \"Made {0} text edits in one file\", editCount, resourceCount);\n\t\t}\n\t}\n\n\tasync perform(): Promise<void> {\n\n\t\tif (this._edits.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ranges: number[] = [1];\n\t\tfor (let i = 1; i < this._edits.length; i++) {\n\t\t\tif (Object.getPrototypeOf(this._edits[i - 1]) === Object.getPrototypeOf(this._edits[i])) {\n\t\t\t\tranges[ranges.length - 1]++;\n\t\t\t} else {\n\t\t\t\tranges.push(1);\n\t\t\t}\n\t\t}\n\n\t\t// Show infinte progress when there is only 1 item since we do not know how long it takes\n\t\tconst increment = this._edits.length > 1 ? 0 : undefined;\n\t\tthis._progress.report({ increment, total: 100 });\n\t\t// Increment by percentage points since progress API expects that\n\t\tconst progress: IProgress<void> = { report: _ => this._progress.report({ increment: 100 / this._edits.length }) };\n\n\t\tlet index = 0;\n\t\tfor (let range of ranges) {\n\t\t\tif (this._token.isCancellationRequested) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tconst group = this._edits.slice(index, index + range);\n\t\t\tif (group[0] instanceof ResourceFileEdit) {\n\t\t\t\tawait this._performFileEdits(<ResourceFileEdit[]>group, this._undoRedoGroup, this._undoRedoSource, this._confirmBeforeUndo, progress);\n\t\t\t} else if (group[0] instanceof ResourceTextEdit) {\n\t\t\t\tawait this._performTextEdits(<ResourceTextEdit[]>group, this._undoRedoGroup, this._undoRedoSource, progress);\n\t\t\t} else if (group[0] instanceof ResourceNotebookCellEdit) {\n\t\t\t\tawait this._performCellEdits(<ResourceNotebookCellEdit[]>group, this._undoRedoGroup, this._undoRedoSource, progress);\n\t\t\t} else {\n\t\t\t\tconsole.log('UNKNOWN EDIT');\n\t\t\t}\n\t\t\tindex = index + range;\n\t\t}\n\t}\n\n\tprivate async _performFileEdits(edits: ResourceFileEdit[], undoRedoGroup: UndoRedoGroup, undoRedoSource: UndoRedoSource | undefined, confirmBeforeUndo: boolean, progress: IProgress<void>) {\n\t\tthis._logService.debug('_performFileEdits', JSON.stringify(edits));\n\t\tconst model = this._instaService.createInstance(BulkFileEdits, this._label || localize('workspaceEdit', \"Workspace Edit\"), undoRedoGroup, undoRedoSource, confirmBeforeUndo, progress, this._token, edits);\n\t\tawait model.apply();\n\t}\n\n\tprivate async _performTextEdits(edits: ResourceTextEdit[], undoRedoGroup: UndoRedoGroup, undoRedoSource: UndoRedoSource | undefined, progress: IProgress<void>): Promise<void> {\n\t\tthis._logService.debug('_performTextEdits', JSON.stringify(edits));\n\t\tconst model = this._instaService.createInstance(BulkTextEdits, this._label || localize('workspaceEdit', \"Workspace Edit\"), this._editor, undoRedoGroup, undoRedoSource, progress, this._token, edits);\n\t\tawait model.apply();\n\t}\n\n\tprivate async _performCellEdits(edits: ResourceNotebookCellEdit[], undoRedoGroup: UndoRedoGroup, undoRedoSource: UndoRedoSource | undefined, progress: IProgress<void>): Promise<void> {\n\t\tthis._logService.debug('_performCellEdits', JSON.stringify(edits));\n\t\tconst model = this._instaService.createInstance(BulkCellEdits, undoRedoGroup, undoRedoSource, progress, this._token, edits);\n\t\tawait model.apply();\n\t}\n}\n\nexport class BulkEditService implements IBulkEditService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _activeUndoRedoGroups = new LinkedList<UndoRedoGroup>();\n\tprivate _previewHandler?: IBulkEditPreviewHandler;\n\n\tconstructor(\n\t\t@IInstantiationService private readonly _instaService: IInstantiationService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@ILifecycleService private readonly _lifecycleService: ILifecycleService,\n\t\t@IDialogService private readonly _dialogService: IDialogService\n\t) { }\n\n\tsetPreviewHandler(handler: IBulkEditPreviewHandler): IDisposable {\n\t\tthis._previewHandler = handler;\n\t\treturn toDisposable(() => {\n\t\t\tif (this._previewHandler === handler) {\n\t\t\t\tthis._previewHandler = undefined;\n\t\t\t}\n\t\t});\n\t}\n\n\thasPreviewHandler(): boolean {\n\t\treturn Boolean(this._previewHandler);\n\t}\n\n\tasync apply(edits: ResourceEdit[], options?: IBulkEditOptions): Promise<IBulkEditResult> {\n\n\t\tif (edits.length === 0) {\n\t\t\treturn { ariaSummary: localize('nothing', \"Made no edits\") };\n\t\t}\n\n\t\tif (this._previewHandler && (options?.showPreview || edits.some(value => value.metadata?.needsConfirmation))) {\n\t\t\tedits = await this._previewHandler(edits, options);\n\t\t}\n\n\t\tlet codeEditor = options?.editor;\n\t\t// try to find code editor\n\t\tif (!codeEditor) {\n\t\t\tlet candidate = this._editorService.activeTextEditorControl;\n\t\t\tif (isCodeEditor(candidate)) {\n\t\t\t\tcodeEditor = candidate;\n\t\t\t}\n\t\t}\n\n\t\tif (codeEditor && codeEditor.getOption(EditorOption.readOnly)) {\n\t\t\t// If the code editor is readonly still allow bulk edits to be applied #68549\n\t\t\tcodeEditor = undefined;\n\t\t}\n\n\t\t// undo-redo-group: if a group id is passed then try to find it\n\t\t// in the list of active edits. otherwise (or when not found)\n\t\t// create a separate undo-redo-group\n\t\tlet undoRedoGroup: UndoRedoGroup | undefined;\n\t\tlet undoRedoGroupRemove = () => { };\n\t\tif (typeof options?.undoRedoGroupId === 'number') {\n\t\t\tfor (let candidate of this._activeUndoRedoGroups) {\n\t\t\t\tif (candidate.id === options.undoRedoGroupId) {\n\t\t\t\t\tundoRedoGroup = candidate;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!undoRedoGroup) {\n\t\t\tundoRedoGroup = new UndoRedoGroup();\n\t\t\tundoRedoGroupRemove = this._activeUndoRedoGroups.push(undoRedoGroup);\n\t\t}\n\n\t\tconst label = options?.quotableLabel || options?.label;\n\t\tconst bulkEdit = this._instaService.createInstance(\n\t\t\tBulkEdit,\n\t\t\tlabel,\n\t\t\tcodeEditor,\n\t\t\toptions?.progress ?? Progress.None,\n\t\t\toptions?.token ?? CancellationToken.None,\n\t\t\tedits,\n\t\t\tundoRedoGroup,\n\t\t\toptions?.undoRedoSource,\n\t\t\t!!options?.confirmBeforeUndo\n\t\t);\n\n\t\tlet listener: IDisposable | undefined;\n\t\ttry {\n\t\t\tlistener = this._lifecycleService.onBeforeShutdown(e => e.veto(this.shouldVeto(label), 'veto.blukEditService'));\n\t\t\tawait bulkEdit.perform();\n\t\t\treturn { ariaSummary: bulkEdit.ariaMessage() };\n\t\t} catch (err) {\n\t\t\t// console.log('apply FAILED');\n\t\t\t// console.log(err);\n\t\t\tthis._logService.error(err);\n\t\t\tthrow err;\n\t\t} finally {\n\t\t\tlistener?.dispose();\n\t\t\tundoRedoGroupRemove();\n\t\t}\n\t}\n\n\tprivate async shouldVeto(label: string | undefined): Promise<boolean> {\n\t\tlabel = label || localize('fileOperation', \"File operation\");\n\t\tconst result = await this._dialogService.confirm({\n\t\t\tmessage: localize('areYouSureQuiteBulkEdit', \"Are you sure you want to quit? '{0}' is in progress.\", label),\n\t\t\tprimaryButton: localize('quit', \"Quit\")\n\t\t});\n\n\t\treturn !result.confirmed;\n\t}\n}\n\nregisterSingleton(IBulkEditService, BulkEditService, true);\n"]}