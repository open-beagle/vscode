{"version":3,"file":"bulkCellEdits.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/bulkEdit/browser/bulkCellEdits.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAahG,MAAa,wBAAyB,SAAQ,8BAAY;QAEzD,YACU,QAAa,EACb,QAA4B,EAC5B,SAAkB,EAC3B,QAAgC;YAEhC,KAAK,CAAC,QAAQ,CAAC,CAAC;YALP,aAAQ,GAAR,QAAQ,CAAK;YACb,aAAQ,GAAR,QAAQ,CAAoB;YAC5B,cAAS,GAAT,SAAS,CAAS;QAI5B,CAAC;KACD;IAVD,4DAUC;IAED,IAAa,aAAa,GAA1B,MAAa,aAAa;QAEzB,YACkB,cAA6B,EAC9C,cAA0C,EACzB,SAA0B,EAC1B,MAAyB,EACzB,MAAkC,EACG,qBAA0D;YAL/F,mBAAc,GAAd,cAAc,CAAe;YAE7B,cAAS,GAAT,SAAS,CAAiB;YAC1B,WAAM,GAAN,MAAM,CAAmB;YACzB,WAAM,GAAN,MAAM,CAA4B;YACG,0BAAqB,GAArB,qBAAqB,CAAqC;QAC7G,CAAC;QAEL,KAAK,CAAC,KAAK;YAEV,MAAM,eAAe,GAAG,CAAA,GAAA,gBAAO,CAAA,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAA,GAAA,iBAAO,CAAA,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;YAE9G,KAAK,IAAI,KAAK,IAAI,eAAe,EAAE;gBAClC,IAAI,IAAI,CAAC,MAAM,CAAC,uBAAuB,EAAE;oBACxC,MAAM;iBACN;gBACD,MAAM,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;gBACtB,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;gBAErE,cAAc;gBACd,IAAI,OAAO,KAAK,CAAC,SAAS,KAAK,QAAQ,IAAI,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,KAAK,KAAK,CAAC,SAAS,EAAE;oBAC7F,GAAG,CAAC,OAAO,EAAE,CAAC;oBACd,MAAM,IAAI,KAAK,CAAC,aAAa,KAAK,CAAC,QAAQ,+BAA+B,CAAC,CAAC;iBAC5E;gBAED,cAAc;gBACd,MAAM,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;gBACjD,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,KAAK,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG,EAAE,CAAC,SAAS,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;gBAC7F,GAAG,CAAC,OAAO,EAAE,CAAC;gBAEd,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;aACjC;QACF,CAAC;KACD,CAAA;IApCY,aAAa;QAQvB,WAAA,wEAAmC,CAAA;OARzB,aAAa,CAoCzB;IApCY,sCAAa","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { groupBy } from 'vs/base/common/arrays';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { compare } from 'vs/base/common/strings';\nimport { URI } from 'vs/base/common/uri';\nimport { ResourceEdit } from 'vs/editor/browser/services/bulkEditService';\nimport { WorkspaceEditMetadata } from 'vs/editor/common/modes';\nimport { IProgress } from 'vs/platform/progress/common/progress';\nimport { UndoRedoGroup, UndoRedoSource } from 'vs/platform/undoRedo/common/undoRedo';\nimport { ICellEditOperation } from 'vs/workbench/contrib/notebook/common/notebookCommon';\nimport { INotebookEditorModelResolverService } from 'vs/workbench/contrib/notebook/common/notebookEditorModelResolverService';\n\nexport class ResourceNotebookCellEdit extends ResourceEdit {\n\n\tconstructor(\n\t\treadonly resource: URI,\n\t\treadonly cellEdit: ICellEditOperation,\n\t\treadonly versionId?: number,\n\t\tmetadata?: WorkspaceEditMetadata\n\t) {\n\t\tsuper(metadata);\n\t}\n}\n\nexport class BulkCellEdits {\n\n\tconstructor(\n\t\tprivate readonly _undoRedoGroup: UndoRedoGroup,\n\t\tundoRedoSource: UndoRedoSource | undefined,\n\t\tprivate readonly _progress: IProgress<void>,\n\t\tprivate readonly _token: CancellationToken,\n\t\tprivate readonly _edits: ResourceNotebookCellEdit[],\n\t\t@INotebookEditorModelResolverService private readonly _notebookModelService: INotebookEditorModelResolverService,\n\t) { }\n\n\tasync apply(): Promise<void> {\n\n\t\tconst editsByNotebook = groupBy(this._edits, (a, b) => compare(a.resource.toString(), b.resource.toString()));\n\n\t\tfor (let group of editsByNotebook) {\n\t\t\tif (this._token.isCancellationRequested) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tconst [first] = group;\n\t\t\tconst ref = await this._notebookModelService.resolve(first.resource);\n\n\t\t\t// check state\n\t\t\tif (typeof first.versionId === 'number' && ref.object.notebook.versionId !== first.versionId) {\n\t\t\t\tref.dispose();\n\t\t\t\tthrow new Error(`Notebook '${first.resource}' has changed in the meantime`);\n\t\t\t}\n\n\t\t\t// apply edits\n\t\t\tconst edits = group.map(entry => entry.cellEdit);\n\t\t\tref.object.notebook.applyEdits(edits, true, undefined, () => undefined, this._undoRedoGroup);\n\t\t\tref.dispose();\n\n\t\t\tthis._progress.report(undefined);\n\t\t}\n\t}\n}\n"]}