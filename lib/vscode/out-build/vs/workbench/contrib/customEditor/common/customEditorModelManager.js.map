{"version":3,"file":"customEditorModelManager.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/customEditor/common/customEditorModelManager.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAOhG,MAAa,wBAAwB;QAArC;YAEkB,gBAAW,GAAG,IAAI,GAAG,EAIlC,CAAC;QAsDN,CAAC;QApDO,KAAK,CAAC,GAAG,CAAC,QAAa,EAAE,QAAgB;YAC/C,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;YACzC,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACxC,OAAO,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,KAAK,CAAC;QACrB,CAAC;QAEM,SAAS,CAAC,QAAa,EAAE,QAAgB;YAC/C,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;YAEzC,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACxC,IAAI,CAAC,KAAK,EAAE;gBACX,OAAO,SAAS,CAAC;aACjB;YAED,KAAK,CAAC,OAAO,EAAE,CAAC;YAEhB,OAAO,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;gBAC/B,OAAO;oBACN,MAAM,EAAE,KAAK;oBACb,OAAO,EAAE,CAAA,GAAA,iBAAI,CAAA,CAAC,GAAG,EAAE;wBAClB,IAAI,EAAE,KAAM,CAAC,OAAO,IAAI,CAAC,EAAE;4BAC1B,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;4BACnC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;yBAC7B;oBACF,CAAC,CAAC;iBACF,CAAC;YACH,CAAC,CAAC,CAAC;QACJ,CAAC;QAEM,GAAG,CAAC,QAAa,EAAE,QAAgB,EAAE,KAAkC;YAC7E,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;YACzC,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAC3C,IAAI,QAAQ,EAAE;gBACb,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;aACxC;YAED,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;YAC3D,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,QAAQ,CAAE,CAAC;QAC5C,CAAC;QAEM,uBAAuB,CAAC,QAAgB;YAC9C,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC,WAAW,EAAE;gBAC5C,IAAI,KAAK,CAAC,QAAQ,KAAK,QAAQ,EAAE;oBAChC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;oBACnC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;iBAC7B;aACD;QACF,CAAC;QAEO,GAAG,CAAC,QAAa,EAAE,QAAgB;YAC1C,OAAO,GAAG,QAAQ,CAAC,QAAQ,EAAE,MAAM,QAAQ,EAAE,CAAC;QAC/C,CAAC;KACD;IA5DD,4DA4DC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IReference } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { ICustomEditorModel, ICustomEditorModelManager } from 'vs/workbench/contrib/customEditor/common/customEditor';\nimport { once } from 'vs/base/common/functional';\n\nexport class CustomEditorModelManager implements ICustomEditorModelManager {\n\n\tprivate readonly _references = new Map<string, {\n\t\treadonly viewType: string,\n\t\treadonly model: Promise<ICustomEditorModel>,\n\t\tcounter: number\n\t}>();\n\n\tpublic async get(resource: URI, viewType: string): Promise<ICustomEditorModel | undefined> {\n\t\tconst key = this.key(resource, viewType);\n\t\tconst entry = this._references.get(key);\n\t\treturn entry?.model;\n\t}\n\n\tpublic tryRetain(resource: URI, viewType: string): Promise<IReference<ICustomEditorModel>> | undefined {\n\t\tconst key = this.key(resource, viewType);\n\n\t\tconst entry = this._references.get(key);\n\t\tif (!entry) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tentry.counter++;\n\n\t\treturn entry.model.then(model => {\n\t\t\treturn {\n\t\t\t\tobject: model,\n\t\t\t\tdispose: once(() => {\n\t\t\t\t\tif (--entry!.counter <= 0) {\n\t\t\t\t\t\tentry.model.then(x => x.dispose());\n\t\t\t\t\t\tthis._references.delete(key);\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t};\n\t\t});\n\t}\n\n\tpublic add(resource: URI, viewType: string, model: Promise<ICustomEditorModel>): Promise<IReference<ICustomEditorModel>> {\n\t\tconst key = this.key(resource, viewType);\n\t\tconst existing = this._references.get(key);\n\t\tif (existing) {\n\t\t\tthrow new Error('Model already exists');\n\t\t}\n\n\t\tthis._references.set(key, { viewType, model, counter: 0 });\n\t\treturn this.tryRetain(resource, viewType)!;\n\t}\n\n\tpublic disposeAllModelsForView(viewType: string): void {\n\t\tfor (const [key, value] of this._references) {\n\t\t\tif (value.viewType === viewType) {\n\t\t\t\tvalue.model.then(x => x.dispose());\n\t\t\t\tthis._references.delete(key);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate key(resource: URI, viewType: string): string {\n\t\treturn `${resource.toString()}@@@${viewType}`;\n\t}\n}\n"]}