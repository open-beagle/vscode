{"version":3,"sources":["vs/workbench/contrib/customEditor/common/extensionPoint.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAQhG,IAAU,MAAM,CAKf;IALD,WAAU,MAAM;QACF,eAAQ,GAAG,UAAU,CAAC;QACtB,kBAAW,GAAG,aAAa,CAAC;QAC5B,eAAQ,GAAG,UAAU,CAAC;QACtB,eAAQ,GAAG,UAAU,CAAC;IACpC,CAAC,EALS,MAAM,KAAN,MAAM,QAKf;IASD,MAAM,yBAAyB,GAAgB;QAC9C,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,CAA2B,EAAE,IAA6B,CAAC;QACrF,IAAI,EAAE,OAAO;QACb,eAAe,EAAE,CAAC;gBACjB,IAAI,EAAE,CAAC;wBACN,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,IAAI;wBACvB,CAAC,MAAM,CAAC,WAAW,CAAC,EAAE,IAAI;wBAC1B,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC;gCACnB,eAAe,EAAE,IAAI;6BACrB,CAAC;qBACF,CAAC;aACF,CAAC;QACF,KAAK,EAAE;YACN,IAAI,EAAE,QAAQ;YACd,QAAQ,EAAE;gBACT,MAAM,CAAC,QAAQ;gBACf,MAAM,CAAC,WAAW;gBAClB,MAAM,CAAC,QAAQ;aACf;YACD,UAAU,EAAE;gBACX,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE;oBAClB,IAAI,EAAE,QAAQ;oBACd,mBAAmB,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAsB,EAAE,IAA6W,CAAC;iBACxa;gBACD,CAAC,MAAM,CAAC,WAAW,CAAC,EAAE;oBACrB,IAAI,EAAE,QAAQ;oBACd,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAyB,EAAE,IAA0G,CAAC;iBAChK;gBACD,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE;oBAClB,IAAI,EAAE,OAAO;oBACb,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAsB,EAAE,IAAqD,CAAC;oBACxG,KAAK,EAAE;wBACN,IAAI,EAAE,QAAQ;wBACd,eAAe,EAAE,CAAC;gCACjB,IAAI,EAAE;oCACL,eAAe,EAAE,IAAI;iCACrB;6BACD,CAAC;wBACF,UAAU,EAAE;4BACX,eAAe,EAAE;gCAChB,IAAI,EAAE,QAAQ;gCACd,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAsC,EAAE,IAA6C,CAAC;6BAChH;yBACD;qBACD;iBACD;gBACD,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE;oBAClB,IAAI,EAAE,QAAQ;oBACd,0BAA0B,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAsB,EAAE,IAAsK,CAAC;oBACxO,IAAI,EAAE;;;qBAGL;oBACD,wBAAwB,EAAE;wBACzB,GAAG,CAAC,QAAQ,CAAC,CAA8B,EAAE,IAAkJ,CAAC;wBAChM,GAAG,CAAC,QAAQ,CAAC,CAA6B,EAAE,IAA2I,CAAC;qBACxL;oBACD,OAAO,EAAE,SAAS;iBAClB;aACD;SACD;KACD,CAAC;IAEW,QAAA,2BAA2B,GAAG,uCAAkB,CAAC,sBAAsB,CAAiC;QACpH,cAAc,EAAE,eAAe;QAC/B,IAAI,EAAE,CAAC,wCAAiB,CAAC;QACzB,UAAU,EAAE,yBAAyB;KACrC,CAAC,CAAC","file":"extensionPoint.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IJSONSchema } from 'vs/base/common/jsonSchema';\nimport * as nls from 'vs/nls';\nimport { CustomEditorPriority, CustomEditorSelector } from 'vs/workbench/contrib/customEditor/common/customEditor';\nimport { ExtensionsRegistry } from 'vs/workbench/services/extensions/common/extensionsRegistry';\nimport { languagesExtPoint } from 'vs/workbench/services/mode/common/workbenchModeService';\n\nnamespace Fields {\n\texport const viewType = 'viewType';\n\texport const displayName = 'displayName';\n\texport const selector = 'selector';\n\texport const priority = 'priority';\n}\n\nexport interface ICustomEditorsExtensionPoint {\n\treadonly [Fields.viewType]: string;\n\treadonly [Fields.displayName]: string;\n\treadonly [Fields.selector]?: readonly CustomEditorSelector[];\n\treadonly [Fields.priority]?: string;\n}\n\nconst CustomEditorsContribution: IJSONSchema = {\n\tdescription: nls.localize('contributes.customEditors', 'Contributed custom editors.'),\n\ttype: 'array',\n\tdefaultSnippets: [{\n\t\tbody: [{\n\t\t\t[Fields.viewType]: '$1',\n\t\t\t[Fields.displayName]: '$2',\n\t\t\t[Fields.selector]: [{\n\t\t\t\tfilenamePattern: '$3'\n\t\t\t}],\n\t\t}]\n\t}],\n\titems: {\n\t\ttype: 'object',\n\t\trequired: [\n\t\t\tFields.viewType,\n\t\t\tFields.displayName,\n\t\t\tFields.selector,\n\t\t],\n\t\tproperties: {\n\t\t\t[Fields.viewType]: {\n\t\t\t\ttype: 'string',\n\t\t\t\tmarkdownDescription: nls.localize('contributes.viewType', 'Identifier for the custom editor. This must be unique across all custom editors, so we recommend including your extension id as part of `viewType`. The `viewType` is used when registering custom editors with `vscode.registerCustomEditorProvider` and in the `onCustomEditor:${id}` [activation event](https://code.visualstudio.com/api/references/activation-events).'),\n\t\t\t},\n\t\t\t[Fields.displayName]: {\n\t\t\t\ttype: 'string',\n\t\t\t\tdescription: nls.localize('contributes.displayName', 'Human readable name of the custom editor. This is displayed to users when selecting which editor to use.'),\n\t\t\t},\n\t\t\t[Fields.selector]: {\n\t\t\t\ttype: 'array',\n\t\t\t\tdescription: nls.localize('contributes.selector', 'Set of globs that the custom editor is enabled for.'),\n\t\t\t\titems: {\n\t\t\t\t\ttype: 'object',\n\t\t\t\t\tdefaultSnippets: [{\n\t\t\t\t\t\tbody: {\n\t\t\t\t\t\t\tfilenamePattern: '$1',\n\t\t\t\t\t\t}\n\t\t\t\t\t}],\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\tfilenamePattern: {\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\tdescription: nls.localize('contributes.selector.filenamePattern', 'Glob that the custom editor is enabled for.'),\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t[Fields.priority]: {\n\t\t\t\ttype: 'string',\n\t\t\t\tmarkdownDeprecationMessage: nls.localize('contributes.priority', 'Controls if the custom editor is enabled automatically when the user opens a file. This may be overridden by users using the `workbench.editorAssociations` setting.'),\n\t\t\t\tenum: [\n\t\t\t\t\tCustomEditorPriority.default,\n\t\t\t\t\tCustomEditorPriority.option,\n\t\t\t\t],\n\t\t\t\tmarkdownEnumDescriptions: [\n\t\t\t\t\tnls.localize('contributes.priority.default', 'The editor is automatically used when the user opens a resource, provided that no other default custom editors are registered for that resource.'),\n\t\t\t\t\tnls.localize('contributes.priority.option', 'The editor is not automatically used when the user opens a resource, but a user can switch to the editor using the `Reopen With` command.'),\n\t\t\t\t],\n\t\t\t\tdefault: 'default'\n\t\t\t}\n\t\t}\n\t}\n};\n\nexport const customEditorsExtensionPoint = ExtensionsRegistry.registerExtensionPoint<ICustomEditorsExtensionPoint[]>({\n\textensionPoint: 'customEditors',\n\tdeps: [languagesExtPoint],\n\tjsonSchema: CustomEditorsContribution\n});\n"]}