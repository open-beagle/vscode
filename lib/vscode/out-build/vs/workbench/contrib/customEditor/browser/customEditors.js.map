{"version":3,"file":"customEditors.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/customEditor/browser/customEditors.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { coalesce } from 'vs/base/common/arrays';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { extname, isEqual } from 'vs/base/common/resources';\nimport { URI } from 'vs/base/common/uri';\nimport { RedoCommand, UndoCommand } from 'vs/editor/browser/editorExtensions';\nimport { IContextKey, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { FileOperation, IFileService } from 'vs/platform/files/common/files';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport * as colorRegistry from 'vs/platform/theme/common/colorRegistry';\nimport { registerThemingParticipant } from 'vs/platform/theme/common/themeService';\nimport { EditorInput, EditorExtensions, GroupIdentifier, IEditorInput, IEditorInputFactoryRegistry } from 'vs/workbench/common/editor';\nimport { DiffEditorInput } from 'vs/workbench/common/editor/diffEditorInput';\nimport { CONTEXT_ACTIVE_CUSTOM_EDITOR_ID, CONTEXT_FOCUSED_CUSTOM_EDITOR_IS_EDITABLE, CustomEditorCapabilities, CustomEditorInfo, CustomEditorInfoCollection, ICustomEditorService } from 'vs/workbench/contrib/customEditor/common/customEditor';\nimport { CustomEditorModelManager } from 'vs/workbench/contrib/customEditor/common/customEditorModelManager';\nimport { IEditorGroup, IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { ContributedEditorPriority, IEditorAssociationsRegistry, IEditorOverrideService, IEditorType, IEditorTypesHandler } from 'vs/workbench/services/editor/common/editorOverrideService';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IUriIdentityService } from 'vs/workbench/services/uriIdentity/common/uriIdentity';\nimport { ContributedCustomEditors } from '../common/contributedCustomEditors';\nimport { CustomEditorInput } from './customEditorInput';\n\nexport class CustomEditorService extends Disposable implements ICustomEditorService, IEditorTypesHandler {\n\t_serviceBrand: any;\n\n\tprivate readonly _contributedEditors: ContributedCustomEditors;\n\tprivate readonly _editorOverrideDisposables: IDisposable[] = [];\n\tprivate readonly _editorCapabilities = new Map<string, CustomEditorCapabilities>();\n\n\tprivate readonly _models = new CustomEditorModelManager();\n\n\tprivate readonly _activeCustomEditorId: IContextKey<string>;\n\tprivate readonly _focusedCustomEditorIsEditable: IContextKey<boolean>;\n\n\tprivate readonly _onDidChangeEditorTypes = this._register(new Emitter<void>());\n\tpublic readonly onDidChangeEditorTypes: Event<void> = this._onDidChangeEditorTypes.event;\n\n\tprivate readonly _fileEditorInputFactory = Registry.as<IEditorInputFactoryRegistry>(EditorExtensions.EditorInputFactories).getFileEditorInputFactory();\n\n\tconstructor(\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IEditorGroupsService private readonly editorGroupService: IEditorGroupsService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@IEditorOverrideService private readonly extensionContributedEditorService: IEditorOverrideService,\n\t) {\n\t\tsuper();\n\n\t\tthis._activeCustomEditorId = CONTEXT_ACTIVE_CUSTOM_EDITOR_ID.bindTo(contextKeyService);\n\t\tthis._focusedCustomEditorIsEditable = CONTEXT_FOCUSED_CUSTOM_EDITOR_IS_EDITABLE.bindTo(contextKeyService);\n\n\t\tthis._contributedEditors = this._register(new ContributedCustomEditors(storageService));\n\t\tthis.registerContributionPoints();\n\n\t\tthis._register(this._contributedEditors.onChange(() => {\n\t\t\tthis.registerContributionPoints();\n\t\t\tthis.updateContexts();\n\t\t\tthis._onDidChangeEditorTypes.fire();\n\t\t}));\n\t\tthis._register(Registry.as<IEditorAssociationsRegistry>(EditorExtensions.Associations).registerEditorTypesHandler('Custom Editor', this));\n\t\tthis._register(this.editorService.onDidActiveEditorChange(() => this.updateContexts()));\n\n\t\tthis._register(fileService.onDidRunOperation(e => {\n\t\t\tif (e.isOperation(FileOperation.MOVE)) {\n\t\t\t\tthis.handleMovedFileInOpenedFileEditors(e.resource, this.uriIdentityService.asCanonicalUri(e.target.resource));\n\t\t\t}\n\t\t}));\n\n\t\tconst PRIORITY = 105;\n\t\tthis._register(UndoCommand.addImplementation(PRIORITY, 'custom-editor', () => {\n\t\t\treturn this.withActiveCustomEditor(editor => editor.undo());\n\t\t}));\n\t\tthis._register(RedoCommand.addImplementation(PRIORITY, 'custom-editor', () => {\n\t\t\treturn this.withActiveCustomEditor(editor => editor.redo());\n\t\t}));\n\n\t\tthis.updateContexts();\n\t}\n\n\tgetEditorTypes(): IEditorType[] {\n\t\treturn [...this._contributedEditors];\n\t}\n\n\tprivate withActiveCustomEditor(f: (editor: CustomEditorInput) => void | Promise<void>): boolean | Promise<void> {\n\t\tconst activeEditor = this.editorService.activeEditor;\n\t\tif (activeEditor instanceof CustomEditorInput) {\n\t\t\tconst result = f(activeEditor);\n\t\t\tif (result) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate registerContributionPoints(): void {\n\t\t// Clear all previous contributions we know\n\t\tthis._editorOverrideDisposables.forEach(d => d.dispose());\n\t\tfor (const contributedEditor of this._contributedEditors) {\n\t\t\tfor (const globPattern of contributedEditor.selector) {\n\t\t\t\tif (!globPattern.filenamePattern) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthis._editorOverrideDisposables.push(this._register(this.extensionContributedEditorService.registerContributionPoint(\n\t\t\t\t\tglobPattern.filenamePattern,\n\t\t\t\t\t{\n\t\t\t\t\t\tid: contributedEditor.id,\n\t\t\t\t\t\tlabel: contributedEditor.displayName,\n\t\t\t\t\t\tdetail: contributedEditor.providerDisplayName,\n\t\t\t\t\t\tdescribes: (currentEditor) => currentEditor instanceof CustomEditorInput && currentEditor.viewType === contributedEditor.id,\n\t\t\t\t\t\tpriority: contributedEditor.priority,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tsinglePerResource: () => !this.getCustomEditorCapabilities(contributedEditor.id)?.supportsMultipleEditorsPerDocument ?? true\n\t\t\t\t\t},\n\t\t\t\t\t(resource, options, group) => {\n\t\t\t\t\t\treturn { editor: CustomEditorInput.create(this.instantiationService, resource, contributedEditor.id, group.id) };\n\t\t\t\t\t},\n\t\t\t\t\t(diffEditorInput, options, group) => {\n\t\t\t\t\t\treturn { editor: this.createDiffEditorInput(diffEditorInput, contributedEditor.id, group) };\n\t\t\t\t\t}\n\t\t\t\t)));\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate createDiffEditorInput(\n\t\teditor: DiffEditorInput,\n\t\teditorID: string,\n\t\tgroup: IEditorGroup\n\t): DiffEditorInput {\n\t\tconst createEditorForSubInput = (subInput: IEditorInput, editorID: string, customClasses: string): EditorInput | undefined => {\n\t\t\t// We check before calling this call back that both resources are defined\n\t\t\tconst input = CustomEditorInput.create(this.instantiationService, subInput.resource!, editorID, group.id, { customClasses });\n\t\t\treturn input instanceof EditorInput ? input : undefined;\n\t\t};\n\n\t\tconst modifiedOverride = createEditorForSubInput(editor.modifiedInput, editorID, 'modified');\n\t\tconst originalOverride = createEditorForSubInput(editor.originalInput, editorID, 'original');\n\n\t\treturn this.instantiationService.createInstance(DiffEditorInput, editor.getName(), editor.getDescription(), originalOverride || editor.originalInput, modifiedOverride || editor.modifiedInput, true);\n\t}\n\n\tpublic get models() { return this._models; }\n\n\tpublic getCustomEditor(viewType: string): CustomEditorInfo | undefined {\n\t\treturn this._contributedEditors.get(viewType);\n\t}\n\n\tpublic getContributedCustomEditors(resource: URI): CustomEditorInfoCollection {\n\t\treturn new CustomEditorInfoCollection(this._contributedEditors.getContributedEditors(resource));\n\t}\n\n\tpublic getUserConfiguredCustomEditors(resource: URI): CustomEditorInfoCollection {\n\t\tconst resourceAssocations = this.extensionContributedEditorService.getAssociationsForResource(resource);\n\t\treturn new CustomEditorInfoCollection(\n\t\t\tcoalesce(resourceAssocations\n\t\t\t\t.map(association => this._contributedEditors.get(association.viewType))));\n\t}\n\n\tpublic getAllCustomEditors(resource: URI): CustomEditorInfoCollection {\n\t\treturn new CustomEditorInfoCollection([\n\t\t\t...this.getUserConfiguredCustomEditors(resource).allEditors,\n\t\t\t...this.getContributedCustomEditors(resource).allEditors,\n\t\t]);\n\t}\n\n\tpublic registerCustomEditorCapabilities(viewType: string, options: CustomEditorCapabilities): IDisposable {\n\t\tif (this._editorCapabilities.has(viewType)) {\n\t\t\tthrow new Error(`Capabilities for ${viewType} already set`);\n\t\t}\n\t\tthis._editorCapabilities.set(viewType, options);\n\t\treturn toDisposable(() => {\n\t\t\tthis._editorCapabilities.delete(viewType);\n\t\t});\n\t}\n\n\tpublic getCustomEditorCapabilities(viewType: string): CustomEditorCapabilities | undefined {\n\t\treturn this._editorCapabilities.get(viewType);\n\t}\n\n\tprivate updateContexts() {\n\t\tconst activeEditorPane = this.editorService.activeEditorPane;\n\t\tconst resource = activeEditorPane?.input?.resource;\n\t\tif (!resource) {\n\t\t\tthis._activeCustomEditorId.reset();\n\t\t\tthis._focusedCustomEditorIsEditable.reset();\n\t\t\treturn;\n\t\t}\n\n\t\tthis._activeCustomEditorId.set(activeEditorPane?.input instanceof CustomEditorInput ? activeEditorPane.input.viewType : '');\n\t\tthis._focusedCustomEditorIsEditable.set(activeEditorPane?.input instanceof CustomEditorInput);\n\t}\n\n\tprivate async handleMovedFileInOpenedFileEditors(oldResource: URI, newResource: URI): Promise<void> {\n\t\tif (extname(oldResource).toLowerCase() === extname(newResource).toLowerCase()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst possibleEditors = this.getAllCustomEditors(newResource);\n\n\t\t// See if we have any non-optional custom editor for this resource\n\t\tif (!possibleEditors.allEditors.some(editor => editor.priority !== ContributedEditorPriority.option)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If so, check all editors to see if there are any file editors open for the new resource\n\t\tconst editorsToReplace = new Map<GroupIdentifier, IEditorInput[]>();\n\t\tfor (const group of this.editorGroupService.groups) {\n\t\t\tfor (const editor of group.editors) {\n\t\t\t\tif (this._fileEditorInputFactory.isFileEditorInput(editor)\n\t\t\t\t\t&& !(editor instanceof CustomEditorInput)\n\t\t\t\t\t&& isEqual(editor.resource, newResource)\n\t\t\t\t) {\n\t\t\t\t\tlet entry = editorsToReplace.get(group.id);\n\t\t\t\t\tif (!entry) {\n\t\t\t\t\t\tentry = [];\n\t\t\t\t\t\teditorsToReplace.set(group.id, entry);\n\t\t\t\t\t}\n\t\t\t\t\tentry.push(editor);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!editorsToReplace.size) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const [group, entries] of editorsToReplace) {\n\t\t\tthis.editorService.replaceEditors(entries.map(editor => {\n\t\t\t\tlet replacement: IEditorInput;\n\t\t\t\tif (possibleEditors.defaultEditor) {\n\t\t\t\t\tconst viewType = possibleEditors.defaultEditor.id;\n\t\t\t\t\treplacement = CustomEditorInput.create(this.instantiationService, newResource, viewType!, group);\n\t\t\t\t} else {\n\t\t\t\t\treplacement = this.editorService.createEditorInput({ resource: newResource });\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\teditor,\n\t\t\t\t\treplacement,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tpreserveFocus: true,\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}), group);\n\t\t}\n\t}\n}\n\nregisterThemingParticipant((theme, collector) => {\n\tconst shadow = theme.getColor(colorRegistry.scrollbarShadow);\n\tif (shadow) {\n\t\tcollector.addRule(`.webview.modified { box-shadow: -6px 0 5px -5px ${shadow}; }`);\n\t}\n});\n"]}