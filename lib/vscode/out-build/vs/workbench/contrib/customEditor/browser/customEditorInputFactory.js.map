{"version":3,"file":"customEditorInputFactory.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/customEditor/browser/customEditorInputFactory.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { ICustomEditorInputFactory, IEditorInput } from 'vs/workbench/common/editor';\nimport { CustomEditorInput } from 'vs/workbench/contrib/customEditor/browser/customEditorInput';\nimport { IWebviewService, WebviewContentOptions, WebviewContentPurpose, WebviewExtensionDescription, WebviewOptions } from 'vs/workbench/contrib/webview/browser/webview';\nimport { SerializedWebviewOptions, DeserializedWebview, reviveWebviewExtensionDescription, SerializedWebview, WebviewEditorInputSerializer, restoreWebviewContentOptions, restoreWebviewOptions } from 'vs/workbench/contrib/webviewPanel/browser/webviewEditorInputSerializer';\nimport { IWebviewWorkbenchService } from 'vs/workbench/contrib/webviewPanel/browser/webviewWorkbenchService';\nimport { IWorkingCopyBackupService } from 'vs/workbench/services/workingCopy/common/workingCopyBackup';\nimport { IWorkingCopyBackupMeta, NO_TYPE_ID } from 'vs/workbench/services/workingCopy/common/workingCopy';\n\nexport interface CustomDocumentBackupData extends IWorkingCopyBackupMeta {\n\treadonly viewType: string;\n\treadonly editorResource: UriComponents;\n\tbackupId: string;\n\n\treadonly extension: undefined | {\n\t\treadonly location: UriComponents;\n\t\treadonly id: string;\n\t};\n\n\treadonly webview: {\n\t\treadonly id: string;\n\t\treadonly options: SerializedWebviewOptions;\n\t\treadonly state: any;\n\t};\n}\n\ninterface SerializedCustomEditor extends SerializedWebview {\n\treadonly editorResource: UriComponents;\n\treadonly dirty: boolean;\n\treadonly backupId?: string;\n}\n\n\ninterface DeserializedCustomEditor extends DeserializedWebview {\n\treadonly editorResource: URI;\n\treadonly dirty: boolean;\n\treadonly backupId?: string;\n}\n\n\nexport class CustomEditorInputSerializer extends WebviewEditorInputSerializer {\n\n\tpublic static override readonly ID = CustomEditorInput.typeId;\n\n\tpublic constructor(\n\t\t@IWebviewWorkbenchService webviewWorkbenchService: IWebviewWorkbenchService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@IWebviewService private readonly _webviewService: IWebviewService,\n\t) {\n\t\tsuper(webviewWorkbenchService);\n\t}\n\n\tpublic override serialize(input: CustomEditorInput): string | undefined {\n\t\tconst dirty = input.isDirty();\n\t\tconst data: SerializedCustomEditor = {\n\t\t\t...this.toJson(input),\n\t\t\teditorResource: input.resource.toJSON(),\n\t\t\tdirty,\n\t\t\tbackupId: dirty ? input.backupId : undefined,\n\t\t};\n\n\t\ttry {\n\t\t\treturn JSON.stringify(data);\n\t\t} catch {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tprotected override fromJson(data: SerializedCustomEditor): DeserializedCustomEditor {\n\t\treturn {\n\t\t\t...super.fromJson(data),\n\t\t\teditorResource: URI.from(data.editorResource),\n\t\t\tdirty: data.dirty,\n\t\t};\n\t}\n\n\tpublic override deserialize(\n\t\t_instantiationService: IInstantiationService,\n\t\tserializedEditorInput: string\n\t): CustomEditorInput {\n\t\tconst data = this.fromJson(JSON.parse(serializedEditorInput));\n\t\tconst webview = reviveWebview(this._webviewService, data);\n\t\tconst customInput = this._instantiationService.createInstance(CustomEditorInput, data.editorResource, data.viewType, data.id, webview, { startsDirty: data.dirty, backupId: data.backupId });\n\t\tif (typeof data.group === 'number') {\n\t\t\tcustomInput.updateGroup(data.group);\n\t\t}\n\t\treturn customInput;\n\t}\n}\n\nfunction reviveWebview(webviewService: IWebviewService, data: { id: string, state: any, webviewOptions: WebviewOptions, contentOptions: WebviewContentOptions, extension?: WebviewExtensionDescription, }) {\n\tconst webview = webviewService.createWebviewOverlay(data.id, {\n\t\tpurpose: WebviewContentPurpose.CustomEditor,\n\t\tenableFindWidget: data.webviewOptions.enableFindWidget,\n\t\tretainContextWhenHidden: data.webviewOptions.retainContextWhenHidden\n\t}, data.contentOptions, data.extension);\n\twebview.state = data.state;\n\treturn webview;\n}\n\nexport const customEditorInputFactory = new class implements ICustomEditorInputFactory {\n\tpublic createCustomEditorInput(resource: URI, instantiationService: IInstantiationService): Promise<IEditorInput> {\n\t\treturn instantiationService.invokeFunction(async accessor => {\n\t\t\tconst webviewService = accessor.get<IWebviewService>(IWebviewService);\n\t\t\tconst workingCopyBackupService = accessor.get<IWorkingCopyBackupService>(IWorkingCopyBackupService);\n\n\t\t\tconst backup = await workingCopyBackupService.resolve<CustomDocumentBackupData>({ resource, typeId: NO_TYPE_ID });\n\t\t\tif (!backup?.meta) {\n\t\t\t\tthrow new Error(`No backup found for custom editor: ${resource}`);\n\t\t\t}\n\n\t\t\tconst backupData = backup.meta;\n\t\t\tconst id = backupData.webview.id;\n\t\t\tconst extension = reviveWebviewExtensionDescription(backupData.extension?.id, backupData.extension?.location);\n\t\t\tconst webview = reviveWebview(webviewService, {\n\t\t\t\tid,\n\t\t\t\twebviewOptions: restoreWebviewOptions(backupData.webview.options),\n\t\t\t\tcontentOptions: restoreWebviewContentOptions(backupData.webview.options),\n\t\t\t\tstate: backupData.webview.state,\n\t\t\t\textension,\n\t\t\t});\n\n\t\t\tconst editor = instantiationService.createInstance(CustomEditorInput, URI.revive(backupData.editorResource), backupData.viewType, id, webview, { backupId: backupData.backupId });\n\t\t\teditor.updateGroup(0);\n\t\t\treturn editor;\n\t\t});\n\t}\n\n\tpublic canResolveBackup(editorInput: IEditorInput, backupResource: URI): boolean {\n\t\tif (editorInput instanceof CustomEditorInput) {\n\t\t\tif (editorInput.resource.path === backupResource.path && backupResource.authority === editorInput.viewType) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n};\n"]}