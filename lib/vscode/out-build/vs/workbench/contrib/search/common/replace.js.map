{"version":3,"file":"replace.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/search/common/replace.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAMnF,QAAA,eAAe,GAAG,CAAA,GAAA,+BAAe,CAAA,CAAkB,gBAAgB,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Match, FileMatch, FileMatchOrMatch } from 'vs/workbench/contrib/search/common/searchModel';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IProgress, IProgressStep } from 'vs/platform/progress/common/progress';\n\nexport const IReplaceService = createDecorator<IReplaceService>('replaceService');\n\nexport interface IReplaceService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Replaces the given match in the file that match belongs to\n\t */\n\treplace(match: Match): Promise<any>;\n\n\t/**\n\t *\tReplace all the matches from the given file matches in the files\n\t *  You can also pass the progress runner to update the progress of replacing.\n\t */\n\treplace(files: FileMatch[], progress?: IProgress<IProgressStep>): Promise<any>;\n\n\t/**\n\t * Opens the replace preview for given file match or match\n\t */\n\topenReplacePreview(element: FileMatchOrMatch, preserveFocus?: boolean, sideBySide?: boolean, pinned?: boolean): Promise<any>;\n\n\t/**\n\t * Update the replace preview for the given file.\n\t * If `override` is `true`, then replace preview is constructed from source model\n\t */\n\tupdateReplacePreview(file: FileMatch, override?: boolean): Promise<void>;\n}\n"]}