{"version":3,"sources":["vs/workbench/contrib/search/common/queryBuilder.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IA+EhG,IAAa,YAAY,GAAzB,MAAa,YAAY;QAExB,YACyC,oBAA2C,EACxC,uBAAiD,EACrD,mBAAyC,EACjD,WAAyB;YAHhB,yBAAoB,GAApB,oBAAoB,CAAuB;YACxC,4BAAuB,GAAvB,uBAAuB,CAA0B;YACrD,wBAAmB,GAAnB,mBAAmB,CAAsB;YACjD,gBAAW,GAAX,WAAW,CAAc;QAEzD,CAAC;QAED,IAAI,CAAC,cAA4B,EAAE,eAAuB,EAAE,UAAoC,EAAE;YACjG,cAAc,GAAG,IAAI,CAAC,iBAAiB,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;YACjE,MAAM,YAAY,GAAG,IAAI,CAAC,oBAAoB,CAAC,QAAQ,EAAwB,CAAC;YAEhF,MAAM,cAAc,GAAG,eAAe,IAAI,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;gBACvE,MAAM,YAAY,GAAG,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAuB,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC;gBACpG,OAAO,CAAC,YAAY,CAAC,MAAM,CAAC,UAAU,CAAC;YACxC,CAAC,CAAC,CAAC;YAEH,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,GAAG,CAAC,6BAAiB,CAAC,EAAE,OAAO,CAAC,CAAC;YACvF,OAAO,gCACH,WAAW,KACd,IAAI,gBACJ,cAAc,EACd,cAAc,EAAE,OAAO,CAAC,cAAc,EACtC,WAAW,EAAE,OAAO,CAAC,WAAW,EAChC,QAAQ,EAAE,YAAY,CAAC,MAAM,CAAC,QAAQ,IAAI,cAAc,IAAI,KAAK,EACjE,aAAa,EAAE,OAAO,CAAC,aAAa,EACpC,YAAY,EAAE,OAAO,CAAC,YAAY,EAClC,kCAAkC,EAAE,OAAO,CAAC,wBAAwB,IAAI,OAAO,CAAC,oBAAoB,GACpG,CAAC;QACH,CAAC;QAED;;WAEG;QACK,iBAAiB,CAAC,YAA0B,EAAE,OAAiC;YACtF,MAAM,YAAY,GAAG,IAAI,CAAC,oBAAoB,CAAC,QAAQ,EAAwB,CAAC;YAEhF,IAAI,YAAY,CAAC,QAAQ,EAAE;gBAC1B,YAAY,CAAC,OAAO,GAAG,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;aACrE;YAED,MAAM,UAAU,mCACZ,YAAY,KACf,cAAc,EAAE,YAAY,CAAC,MAAM,CAAC,cAAc,GAClD,CAAC;YAEF,IAAI,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,OAAO,CAAC,EAAE;gBAChD,UAAU,CAAC,eAAe,GAAG,IAAI,CAAC;aAClC;YAED,IAAI,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,EAAE;gBACnC,UAAU,CAAC,WAAW,GAAG,IAAI,CAAC;aAC9B;YAED,OAAO,UAAU,CAAC;QACnB,CAAC;QAED,IAAI,CAAC,OAAuC,EAAE,UAAoC,EAAE;YACnF,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YACvD,OAAO,gCACH,WAAW,KACd,IAAI,gBACJ,WAAW,EAAE,OAAO,CAAC,WAAW;oBAC/B,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,EAAE;oBAC5B,CAAC,CAAC,OAAO,CAAC,WAAW,EACtB,MAAM,EAAE,OAAO,CAAC,MAAM,EACtB,WAAW,EAAE,OAAO,CAAC,WAAW,EAChC,QAAQ,EAAE,OAAO,CAAC,QAAQ,GAC1B,CAAC;QACH,CAAC;QAEO,oBAAoB,CAAC,OAAsC,EAAE,cAAmC;YACvG,IAAI,CAAC,OAAO,EAAE;gBACb,OAAO,EAAE,CAAC;aACV;YAED,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;YAC7F,OAAO,cAAc;gBACpB,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC;gBAChC,CAAC,CAAC,EAAE,OAAO,EAAE,wBAAwB,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC;QAC7F,CAAC;QAEO,WAAW,CAAC,kBAAkD,EAAE,EAAE,UAAsC,EAAE;YACjH,MAAM,sBAAsB,GAAqB,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,cAAc,EAAE,OAAO,CAAC,cAAc,CAAC,CAAC;YAC3H,MAAM,sBAAsB,GAAqB,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,cAAc,EAAE,OAAO,CAAC,cAAc,CAAC,CAAC;YAE3H,4EAA4E;YAC5E,MAAM,iBAAiB,GAAG,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC;YACrD,MAAM,aAAa,GAAG,CAAC,sBAAsB,CAAC,WAAW,IAAI,sBAAsB,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;gBACvG,sBAAsB,CAAC,WAAW,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,2BAA2B,CAAC,UAAU,EAAE,OAAO,EAAE,sBAAsB,CAAC,CAAC,CAAC,CAAC;gBACrI,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,qBAAqB,CAAC,MAAM,EAAE,OAAO,EAAE,sBAAsB,EAAE,iBAAiB,CAAC,CAAC,CAAC;iBACrH,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAmB,CAAC;YAE7C,MAAM,UAAU,GAA2B;gBAC1C,OAAO,EAAE,OAAO,CAAC,OAAO;gBACxB,aAAa;gBACb,gBAAgB,EAAE,CAAC,CAAC,CAAC,sBAAsB,CAAC,WAAW,IAAI,sBAAsB,CAAC,WAAW,CAAC,MAAM,CAAC;gBACrG,kBAAkB,EAAE,OAAO,CAAC,kBAAkB;gBAE9C,cAAc,EAAE,sBAAsB,CAAC,OAAO;gBAC9C,cAAc,EAAE,sBAAsB,CAAC,OAAO;gBAC9C,eAAe,EAAE,OAAO,CAAC,eAAe;gBACxC,UAAU,EAAE,OAAO,CAAC,UAAU;aAC9B,CAAC;YAEF,IAAI,OAAO,CAAC,eAAe,EAAE;gBAC5B,MAAM,WAAW,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;gBAChJ,MAAM,kBAAkB,GAAG,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAA,GAAA,4BAAmB,CAAA,CAAC,UAAU,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;gBACxG,MAAM,qBAAqB,GAAG,IAAI,CAAC,uBAAuB,CAAC,kBAAkB,CAAC,CAAC;gBAC/E,uCAAY,UAAU,GAAK,qBAAqB,EAAG;aACnD;YAED,6HAA6H;YAC7H,MAAM,kBAAkB,GAAG,OAAO,CAAC,kBAAkB,IAAI,OAAO,CAAC,kBAAkB,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC,CAAA,GAAA,4BAAmB,CAAA,CAAC,UAAU,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;YAC3J,UAAU,CAAC,kBAAkB,GAAG,kBAAkB,IAAI,kBAAkB,CAAC,MAAM,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,SAAS,CAAC;YAEjH,OAAO,UAAU,CAAC;QACnB,CAAC;QAEO,uBAAuB,CAAC,KAAY;YAC3C,MAAM,aAAa,GAAmB,EAAE,CAAC;YACzC,MAAM,eAAe,GAA8B,IAAI,iBAAW,EAAE,CAAC;YACrE,MAAM,cAAc,GAAqB,EAAE,CAAC;YAC5C,IAAI,eAAe,GAAG,KAAK,CAAC;YAC5B,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;;gBACpB,IAAI,IAAI,CAAC,MAAM,KAAK,iBAAO,CAAC,WAAW,EAAE;oBAAE,OAAO;iBAAE;gBAEpD,MAAM,cAAc,GAAG,CAAA,GAAA,0BAAc,CAAA,CAAC,IAAI,CAAC,CAAC;gBAC5C,2FAA2F;gBAC3F,IAAI,cAAc,EAAE;oBACnB,MAAM,UAAU,GAAG,MAAA,MAAA,IAAI,CAAC,uBAAuB,CAAC,kBAAkB,CAAC,IAAI,CAAC,0CAAE,GAAG,mCAAI,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;oBAEhI,IAAI,WAAW,GAAG,eAAe,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;oBAClD,IAAI,CAAC,WAAW,EAAE;wBACjB,eAAe,GAAG,IAAI,CAAC;wBACvB,WAAW,GAAG,EAAE,MAAM,EAAE,UAAU,EAAE,cAAc,EAAE,EAAE,EAAE,CAAC;wBACzD,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;wBAChC,eAAe,CAAC,GAAG,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;qBAC7C;oBAED,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;oBAC9D,CAAA,GAAA,uBAAe,CAAA,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;iBAChF;qBAAM;oBACN,IAAI,IAAI,CAAC,MAAM,EAAE;wBAChB,eAAe,GAAG,IAAI,CAAC;wBACvB,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;qBACnC;iBACD;YACF,CAAC,CAAC,CAAC;YAEH,OAAO;gBACN,aAAa;gBACb,cAAc;gBACd,gBAAgB,EAAE,IAAI;gBACtB,cAAc,EAAE,eAAe,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE;aAC9D,CAAC;QACH,CAAC;QAED;;WAEG;QACK,eAAe,CAAC,cAA4B,EAAE,OAAiC;YACtF,IAAI,OAAO,CAAC,WAAW,EAAE;gBACxB,IAAI,cAAc,CAAC,QAAQ,EAAE;oBAC5B,wEAAwE;oBACxE,IAAI,OAAO,CAAC,0BAA0B,CAAC,cAAc,CAAC,OAAO,EAAE,IAAI,CAAC,EAAE;wBACrE,OAAO,IAAI,CAAC;qBACZ;iBACD;qBAAM,IAAI,OAAO,CAAC,0BAA0B,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE;oBACtE,OAAO,IAAI,CAAC;iBACZ;aACD;YAED,OAAO,CAAC,CAAC,cAAc,CAAC,eAAe,CAAC;QACzC,CAAC;QAEO,WAAW,CAAC,cAA4B;YAC/C,IAAI,cAAc,CAAC,WAAW,EAAE;gBAC/B,OAAO,IAAI,CAAC;aACZ;YAED,IAAI,cAAc,CAAC,QAAQ,IAAI,CAAA,GAAA,wCAAsB,CAAA,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE;gBAC9E,OAAO,IAAI,CAAC;aACZ;YAED,IAAI,cAAc,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;gBAC9C,OAAO,IAAI,CAAC;aACZ;YAED,OAAO,CAAC,CAAC,cAAc,CAAC,WAAW,CAAC;QACrC,CAAC;QAED;;;;;WAKG;QACH,gBAAgB,CAAC,OAA0B;YAC1C,MAAM,YAAY,GAAG,CAAC,OAAe,EAAE,EAAE;gBACxC,0FAA0F;gBAC1F,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,kBAAkB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACrE,CAAC,CAAC;YAEF,MAAM,QAAQ,GAAG,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;YAC9E,MAAM,QAAQ,GAAG,QAAQ;iBACvB,GAAG,CAAC,OAAO,CAAC,EAAE;gBACd,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC;gBACnD,IAAI,QAAQ,EAAE;oBACb,OAAO,CAAA,GAAA,kBAAS,CAAA,CAAC,OAAO,EAAE,QAAQ,CAAC,MAAM,KAAK,iBAAO,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;iBAC9F;gBAED,OAAO,OAAO,CAAC;YAChB,CAAC,CAAC,CAAC;YACJ,MAAM,MAAM,GAAG,WAAW,CAAC,OAAO,CAAC,QAAQ,EAC1C,OAAO,CAAC,EAAE,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC;YAEpE,MAAM,oBAAoB,GAAG,CAAC,MAAM,CAAC,YAAY,IAAI,EAAE,CAAC;iBACtD,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;iBAC/B,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;iBAChC,GAAG,CAAC,CAAC,CAAC,EAAE;gBACR,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;oBACjB,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,0BAA0B;iBACvC;gBAED,OAAO,gBAAgB,CAAC,CAAC,CAAC,CAAC;YAC5B,CAAC,CAAC,CAAC;YAEJ,MAAM,MAAM,GAAqB,EAAE,CAAC;YACpC,MAAM,WAAW,GAAG,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,WAAW,IAAI,EAAE,CAAC,CAAC;YAC5E,IAAI,WAAW,IAAI,WAAW,CAAC,MAAM,EAAE;gBACtC,MAAM,CAAC,WAAW,GAAG,WAAW,CAAC;aACjC;YAED,MAAM,YAAY,GAAG,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;YAC1D,MAAM,cAAc,GAAG,wBAAwB,CAAC,GAAG,YAAY,CAAC,CAAC;YACjE,IAAI,cAAc,EAAE;gBACnB,MAAM,CAAC,OAAO,GAAG,cAAc,CAAC;aAChC;YAED,OAAO,MAAM,CAAC;QACf,CAAC;QAEO,oBAAoB,CAAC,YAAkC,EAAE,OAAmC;YACnG,OAAO,OAAO,CAAC,wBAAwB,CAAC,CAAC;gBACxC,SAAS,CAAC,CAAC;gBACX,CAAA,GAAA,oBAAW,CAAA,CAAC,YAAY,EAAE,CAAC,OAAO,CAAC,8BAA8B,CAAC,CAAC;QACrE,CAAC;QAED;;WAEG;QACK,wBAAwB,CAAC,WAAqB;YACrD,IAAI,CAAC,WAAW,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE;gBACxC,sCAAsC;gBACtC,OAAO,EAAE,CAAC;aACV;YAED,MAAM,mBAAmB,GAAG,MAAM,CAAC,OAAO,CACzC,WAAW,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;gBAC5B,mEAAmE;gBACnE,IAAI,EAAE,WAAW,EAAE,WAAW,EAAE,GAAG,iBAAiB,CAAC,UAAU,CAAC,CAAC;gBAEjE,IAAI,WAAW,EAAE;oBAChB,WAAW,GAAG,oBAAoB,CAAC,WAAW,CAAC,CAAC;iBAChD;gBAED,gGAAgG;gBAChG,MAAM,WAAW,GAAG,IAAI,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC;gBAE1D,4EAA4E;gBAC5E,OAAO,MAAM,CAAC,OAAO,CACpB,WAAW,CAAC,GAAG,CAAC,iBAAiB,CAAC,EAAE,CAAC,IAAI,CAAC,2BAA2B,CAAC,iBAAiB,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC;YAC1G,CAAC,CAAC,CAAC,CAAC;YAEL,MAAM,oBAAoB,GAAG,IAAI,GAAG,EAA8B,CAAC;YACnE,mBAAmB,CAAC,OAAO,CAAC,oBAAoB,CAAC,EAAE;gBAClD,MAAM,GAAG,GAAG,oBAAoB,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;gBACvD,MAAM,QAAQ,GAAG,oBAAoB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBAC/C,IAAI,QAAQ,EAAE;oBACb,IAAI,oBAAoB,CAAC,OAAO,EAAE;wBACjC,QAAQ,CAAC,OAAO,GAAG,QAAQ,CAAC,OAAO,IAAI,EAAE,CAAC;wBAC1C,QAAQ,CAAC,OAAO,CAAC,oBAAoB,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC;qBACtD;iBACD;qBAAM;oBACN,oBAAoB,CAAC,GAAG,CAAC,GAAG,EAAE;wBAC7B,UAAU,EAAE,oBAAoB,CAAC,UAAU;wBAC3C,OAAO,EAAE,oBAAoB,CAAC,OAAO,CAAC,CAAC,CAAC,wBAAwB,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS;qBAC1G,CAAC,CAAC;iBACH;YACF,CAAC,CAAC,CAAC;YAEH,OAAO,KAAK,CAAC,IAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,CAAC,CAAC;QAClD,CAAC;QAED;;WAEG;QACK,mBAAmB,CAAC,UAAkB;YAC7C,IAAI,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE;gBAChC,MAAM,gBAAgB,GAAG,IAAI,CAAC,uBAAuB,CAAC,YAAY,EAAE,CAAC,OAAO,CAAC;gBAC7E,IAAI,gBAAgB,CAAC,CAAC,CAAC,IAAI,gBAAgB,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,KAAK,iBAAO,CAAC,IAAI,EAAE;oBAC3E,OAAO,CAAC;4BACP,UAAU,EAAE,gBAAgB,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC;yBAC9D,CAAC,CAAC;iBACH;gBAED,iFAAiF;gBACjF,0IAA0I;gBAC1I,OAAO,CAAC;wBACP,UAAU,EAAE,SAAG,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;qBAChD,CAAC,CAAC;aACH;YAED,IAAI,IAAI,CAAC,uBAAuB,CAAC,iBAAiB,EAAE,mBAA0B,EAAE;gBAC/E,MAAM,YAAY,GAAG,IAAI,CAAC,uBAAuB,CAAC,YAAY,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;gBAEhF,UAAU,GAAG,gBAAgB,CAAC,UAAU,CAAC,CAAC;gBAC1C,IAAI,UAAU,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,UAAU,KAAK,IAAI,EAAE;oBACxD,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;oBACvE,OAAO,CAAC;4BACP,UAAU,EAAE,YAAY,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC;yBACrD,CAAC,CAAC;iBACH;gBAED,MAAM,cAAc,GAAG,oBAAoB,CAAC,UAAU,CAAC,CAAC;gBACxD,OAAO,CAAC;wBACP,UAAU,EAAE,YAAY;wBACxB,OAAO,EAAE,cAAc;qBACvB,CAAC,CAAC;aACH;iBAAM,IAAI,UAAU,KAAK,IAAI,IAAI,UAAU,KAAK,KAAK,EAAE;gBACvD,OAAO,EAAE,CAAC,CAAC,+EAA+E;aAC1F;iBAAM;gBACN,MAAM,uBAAuB,GAAG,UAAU,CAAC,KAAK,CAAC,mCAAmC,CAAC,CAAC;gBACtF,IAAI,uBAAuB,EAAE;oBAC5B,MAAM,cAAc,GAAG,uBAAuB,CAAC,CAAC,CAAC,CAAC;oBAClD,MAAM,aAAa,GAAG,IAAI,CAAC,uBAAuB,CAAC,YAAY,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,KAAK,cAAc,CAAC,CAAC;oBAC3H,IAAI,aAAa,CAAC,MAAM,EAAE;wBACzB,OAAO,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;4BAC/B,MAAM,YAAY,GAAG,uBAAuB,CAAC,CAAC,CAAC,CAAC;4BAChD,OAAO;gCACN,UAAU,EAAE,IAAI,CAAC,GAAG;gCACpB,OAAO,EAAE,YAAY,IAAI,oBAAoB,CAAC,YAAY,CAAC;6BAC3D,CAAC;wBACH,CAAC,CAAC,CAAC;qBACH;yBAAM;wBACN,2BAA2B;wBAC3B,MAAM,uBAAuB,GAAG,GAAG,CAAC,QAAQ,CAAC,CAA4B,EAAE,IAAsC,EAAE,cAAc,CAAC,CAAC;wBACnI,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;qBACzC;iBACD;qBAAM;oBACN,mCAAmC;iBACnC;aACD;YAED,OAAO,EAAE,CAAC;QACX,CAAC;QAEO,2BAA2B,CAAC,iBAAwC,EAAE,WAAoB;YACjG,MAAM,OAAO,GAAG,iBAAiB,CAAC,OAAO,IAAI,WAAW,CAAC,CAAC;gBACzD,GAAG,iBAAiB,CAAC,OAAO,IAAI,WAAW,EAAE,CAAC,CAAC;gBAC/C,iBAAiB,CAAC,OAAO,IAAI,WAAW,CAAC;YAE1C,MAAM,OAAO,GAAG;gBACf;oBACC,UAAU,EAAE,iBAAiB,CAAC,UAAU;oBACxC,OAAO;iBACP;aAAC,CAAC;YAEJ,IAAI,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;gBACvC,OAAO,CAAC,IAAI,CAAC;oBACZ,UAAU,EAAE,iBAAiB,CAAC,UAAU;oBACxC,OAAO,EAAE,OAAO,GAAG,KAAK;iBACxB,CAAC,CAAC;aACH;YAED,OAAO,OAAO,CAAC;QAChB,CAAC;QAEO,2BAA2B,CAAC,UAA8B,EAAE,OAAmC,EAAE,kBAAoC;YAC5I,MAAM,UAAU,GAAG,IAAI,CAAC,qBAAqB,CAAC,CAAA,GAAA,6BAAiB,CAAA,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,OAAO,EAAE,kBAAkB,EAAE,KAAK,CAAC,CAAC;YAC5H,IAAI,CAAC,UAAU,EAAE;gBAChB,OAAO,IAAI,CAAC;aACZ;YAED,uCACI,UAAU,GACV;gBACF,cAAc,EAAE,UAAU,CAAC,OAAO;aAClC,EACA;QACH,CAAC;QAEO,qBAAqB,CAAC,MAAoC,EAAE,OAAmC,EAAE,kBAAoC,EAAE,iBAA0B;YACxK,IAAI,kCAAgE,CAAC;YACrE,MAAM,SAAS,GAAG,SAAG,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC;YAC1D,IAAI,kBAAkB,CAAC,WAAW,EAAE;gBACnC,MAAM,2BAA2B,GAAG,kBAAkB,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,CAAA,GAAA,mBAAO,CAAA,CAAC,EAAE,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACtH,IAAI,2BAA2B,IAAI,CAAC,2BAA2B,CAAC,OAAO,EAAE;oBACxE,4BAA4B;oBAC5B,OAAO,IAAI,CAAC;iBACZ;qBAAM,IAAI,2BAA2B,EAAE;oBACvC,kCAAkC,GAAG,2BAA2B,CAAC,OAAO,CAAC;iBACzE;aACD;YAED,MAAM,YAAY,GAAG,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAuB,EAAE,QAAQ,EAAE,SAAS,EAAE,CAAC,CAAC;YACvG,MAAM,eAAe,GAAG,IAAI,CAAC,oBAAoB,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;YACzE,MAAM,cAAc,mCAChB,CAAC,eAAe,IAAI,EAAE,CAAC,GACvB,CAAC,kCAAkC,IAAI,EAAE,CAAC,CAC7C,CAAC;YAEF,MAAM,UAAU,GAAG,SAAG,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAA,GAAA,oBAAQ,CAAA,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC;YACtE,OAAqB;gBACpB,MAAM,EAAE,SAAS;gBACjB,UAAU,EAAE,iBAAiB,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,SAAS;gBACtD,cAAc,EAAE,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,SAAS;gBACnF,YAAY,EAAE,YAAY,CAAC,KAAK,IAAI,YAAY,CAAC,KAAK,CAAC,QAAQ;gBAC/D,oBAAoB,EAAE,OAAO,OAAO,CAAC,oBAAoB,KAAK,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,cAAc;gBAC5I,0BAA0B,EAAE,OAAO,OAAO,CAAC,0BAA0B,KAAK,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,oBAAoB;gBACpK,cAAc,EAAE,OAAO,OAAO,CAAC,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,cAAc;aAC1H,CAAC;QACH,CAAC;KACD,CAAA;IA1aY,YAAY;QAGtB,WAAA,qCAAqB,CAAA;QACrB,WAAA,oCAAwB,CAAA;QACxB,WAAA,0CAAoB,CAAA;QACpB,WAAA,0BAAY,CAAA;OANF,YAAY,CA0axB;IA1aY,oCAAY;IA4azB,SAAS,iBAAiB,CAAC,UAAkB;QAC5C,MAAM,aAAa,GAAG,UAAU,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;QAC7D,IAAI,aAAa,EAAE;YAClB,MAAM,WAAW,GAAG,aAAa,CAAC,KAAK,CAAC;YACxC,MAAM,cAAc,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;YACjF,IAAI,cAAc,EAAE;gBACnB,IAAI,WAAW,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,cAAc,CAAC,KAAK,CAAC,CAAC;gBAC7D,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE;oBAChC,4FAA4F;oBAC5F,WAAW,IAAI,GAAG,CAAC;iBACnB;gBAED,OAAO;oBACN,WAAW;oBACX,WAAW,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,KAAK,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;iBAC/D,CAAC;aACF;SACD;QAED,6BAA6B;QAC7B,OAAO;YACN,WAAW,EAAE,UAAU;SACvB,CAAC;IACH,CAAC;IAED,SAAS,wBAAwB,CAAC,GAAG,QAAkB;QACtD,OAAO,QAAQ,CAAC,MAAM,CAAC,CAAC;YACvB,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC,OAAO,IAAI,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACzF,SAAS,CAAC;IACZ,CAAC;IAED,SAAS,gBAAgB,CAAC,OAAe;QACxC,OAAO,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,GAAG,CAAC;aACtC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;aAClB,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;IAC3B,CAAC;IAED;;OAEG;IACH,SAAS,gBAAgB,CAAC,OAAe;QACxC,MAAM,QAAQ,GAAG;YAChB,MAAM,OAAO,KAAK;YAClB,MAAM,OAAO,EAAE;SACf,CAAC;QAEF,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC,CAAC;IAC1D,CAAC;IAED,SAAS,gBAAgB,CAAC,OAAe;QACxC,OAAO,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;IACpC,CAAC;IAED;;OAEG;IACH,SAAS,oBAAoB,CAAC,OAAe;QAC5C,OAAO,gBAAgB,CAAC,OAAO,CAAC;aAC9B,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC;aACpB,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;IACxB,CAAC;IAED;;OAEG;IACH,SAAgB,iCAAiC,CAAC,SAAgB,EAAE,cAAwC;QAC3G,SAAS,GAAG,MAAM,CAAC,QAAQ,CAAC,SAAS,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;QAExE,MAAM,WAAW,GAAa,EAAE,CAAC;QACjC,MAAM,SAAS,GAAG,cAAc,CAAC,YAAY,EAAE,CAAC;QAEhD,IAAI,SAAS,EAAE;YACd,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;gBAC5B,IAAI,UAA8B,CAAC;gBACnC,IAAI,cAAc,CAAC,iBAAiB,EAAE,mBAA0B,EAAE;oBACjE,wDAAwD;oBACxD,UAAU,GAAG,CAAA,GAAA,wBAAY,CAAA,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAC,8BAA8B;oBAC7F,IAAI,UAAU,IAAI,UAAU,KAAK,GAAG,EAAE;wBACrC,UAAU,GAAG,IAAI,GAAG,UAAU,CAAC;qBAC/B;iBACD;qBAAM;oBACN,MAAM,YAAY,GAAG,cAAc,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;oBACjE,IAAI,YAAY,EAAE;wBACjB,MAAM,cAAc,GAAG,YAAY,CAAC,IAAI,CAAC;wBACzC,oHAAoH;wBACpH,MAAM,cAAc,GAAG,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,KAAK,cAAc,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC;wBACvG,IAAI,cAAc,EAAE;4BACnB,MAAM,OAAO,GAAG,CAAA,GAAA,wBAAY,CAAA,CAAC,YAAY,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAC,8BAA8B;4BACxF,IAAI,OAAO,KAAK,EAAE,EAAE;gCACnB,UAAU,GAAG,KAAK,YAAY,CAAC,IAAI,EAAE,CAAC;6BACtC;iCAAM;gCACN,UAAU,GAAG,KAAK,YAAY,CAAC,IAAI,IAAI,OAAO,EAAE,CAAC;6BACjD;yBACD;6BAAM;4BACN,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,iCAAiC;yBAC/D;qBACD;iBACD;gBAED,IAAI,UAAU,EAAE;oBACf,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;iBAC7B;YACF,CAAC,CAAC,CAAC;SACH;QACD,OAAO,WAAW,CAAC;IACpB,CAAC;IAxCD,8EAwCC","file":"queryBuilder.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as arrays from 'vs/base/common/arrays';\nimport * as collections from 'vs/base/common/collections';\nimport * as glob from 'vs/base/common/glob';\nimport { untildify } from 'vs/base/common/labels';\nimport { ResourceMap } from 'vs/base/common/map';\nimport { Schemas } from 'vs/base/common/network';\nimport * as path from 'vs/base/common/path';\nimport { isEqual, basename, relativePath, isAbsolutePath } from 'vs/base/common/resources';\nimport * as strings from 'vs/base/common/strings';\nimport { assertIsDefined } from 'vs/base/common/types';\nimport { URI, URI as uri } from 'vs/base/common/uri';\nimport { isMultilineRegexSource } from 'vs/editor/common/model/textModelSearch';\nimport * as nls from 'vs/nls';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IWorkspaceContextService, IWorkspaceFolderData, toWorkspaceFolder, WorkbenchState } from 'vs/platform/workspace/common/workspace';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { IPathService } from 'vs/workbench/services/path/common/pathService';\nimport { getExcludes, ICommonQueryProps, IFileQuery, IFolderQuery, IPatternInfo, ISearchConfiguration, ITextQuery, ITextSearchPreviewOptions, pathIncludedInQuery, QueryType } from 'vs/workbench/services/search/common/search';\n\n/**\n * One folder to search and a glob expression that should be applied.\n */\nexport interface IOneSearchPathPattern {\n\tsearchPath: uri;\n\tpattern?: string;\n}\n\n/**\n * One folder to search and a set of glob expressions that should be applied.\n */\nexport interface ISearchPathPattern {\n\tsearchPath: uri;\n\tpattern?: glob.IExpression;\n}\n\n/**\n * A set of search paths and a set of glob expressions that should be applied.\n */\nexport interface ISearchPathsInfo {\n\tsearchPaths?: ISearchPathPattern[];\n\tpattern?: glob.IExpression;\n}\n\nexport interface ICommonQueryBuilderOptions {\n\t_reason?: string;\n\texcludePattern?: string | string[];\n\tincludePattern?: string | string[];\n\textraFileResources?: uri[];\n\n\t/** Parse the special ./ syntax supported by the searchview, and expand foo to ** /foo */\n\texpandPatterns?: boolean;\n\n\tmaxResults?: number;\n\tmaxFileSize?: number;\n\tdisregardIgnoreFiles?: boolean;\n\tdisregardGlobalIgnoreFiles?: boolean;\n\tdisregardExcludeSettings?: boolean;\n\tdisregardSearchExcludeSettings?: boolean;\n\tignoreSymlinks?: boolean;\n\tonlyOpenEditors?: boolean;\n}\n\nexport interface IFileQueryBuilderOptions extends ICommonQueryBuilderOptions {\n\tfilePattern?: string;\n\texists?: boolean;\n\tsortByScore?: boolean;\n\tcacheKey?: string;\n}\n\nexport interface ITextQueryBuilderOptions extends ICommonQueryBuilderOptions {\n\tpreviewOptions?: ITextSearchPreviewOptions;\n\tfileEncoding?: string;\n\tbeforeContext?: number;\n\tafterContext?: number;\n\tisSmartCase?: boolean;\n}\n\nexport class QueryBuilder {\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IWorkspaceContextService private readonly workspaceContextService: IWorkspaceContextService,\n\t\t@IEditorGroupsService private readonly editorGroupsService: IEditorGroupsService,\n\t\t@IPathService private readonly pathService: IPathService\n\t) {\n\t}\n\n\ttext(contentPattern: IPatternInfo, folderResources?: uri[], options: ITextQueryBuilderOptions = {}): ITextQuery {\n\t\tcontentPattern = this.getContentPattern(contentPattern, options);\n\t\tconst searchConfig = this.configurationService.getValue<ISearchConfiguration>();\n\n\t\tconst fallbackToPCRE = folderResources && folderResources.some(folder => {\n\t\t\tconst folderConfig = this.configurationService.getValue<ISearchConfiguration>({ resource: folder });\n\t\t\treturn !folderConfig.search.useRipgrep;\n\t\t});\n\n\t\tconst commonQuery = this.commonQuery(folderResources?.map(toWorkspaceFolder), options);\n\t\treturn <ITextQuery>{\n\t\t\t...commonQuery,\n\t\t\ttype: QueryType.Text,\n\t\t\tcontentPattern,\n\t\t\tpreviewOptions: options.previewOptions,\n\t\t\tmaxFileSize: options.maxFileSize,\n\t\t\tusePCRE2: searchConfig.search.usePCRE2 || fallbackToPCRE || false,\n\t\t\tbeforeContext: options.beforeContext,\n\t\t\tafterContext: options.afterContext,\n\t\t\tuserDisabledExcludesAndIgnoreFiles: options.disregardExcludeSettings && options.disregardIgnoreFiles\n\t\t};\n\t}\n\n\t/**\n\t * Adjusts input pattern for config\n\t */\n\tprivate getContentPattern(inputPattern: IPatternInfo, options: ITextQueryBuilderOptions): IPatternInfo {\n\t\tconst searchConfig = this.configurationService.getValue<ISearchConfiguration>();\n\n\t\tif (inputPattern.isRegExp) {\n\t\t\tinputPattern.pattern = inputPattern.pattern.replace(/\\r?\\n/g, '\\\\n');\n\t\t}\n\n\t\tconst newPattern = {\n\t\t\t...inputPattern,\n\t\t\twordSeparators: searchConfig.editor.wordSeparators\n\t\t};\n\n\t\tif (this.isCaseSensitive(inputPattern, options)) {\n\t\t\tnewPattern.isCaseSensitive = true;\n\t\t}\n\n\t\tif (this.isMultiline(inputPattern)) {\n\t\t\tnewPattern.isMultiline = true;\n\t\t}\n\n\t\treturn newPattern;\n\t}\n\n\tfile(folders: (IWorkspaceFolderData | URI)[], options: IFileQueryBuilderOptions = {}): IFileQuery {\n\t\tconst commonQuery = this.commonQuery(folders, options);\n\t\treturn <IFileQuery>{\n\t\t\t...commonQuery,\n\t\t\ttype: QueryType.File,\n\t\t\tfilePattern: options.filePattern\n\t\t\t\t? options.filePattern.trim()\n\t\t\t\t: options.filePattern,\n\t\t\texists: options.exists,\n\t\t\tsortByScore: options.sortByScore,\n\t\t\tcacheKey: options.cacheKey,\n\t\t};\n\t}\n\n\tprivate handleIncludeExclude(pattern: string | string[] | undefined, expandPatterns: boolean | undefined): ISearchPathsInfo {\n\t\tif (!pattern) {\n\t\t\treturn {};\n\t\t}\n\n\t\tpattern = Array.isArray(pattern) ? pattern.map(normalizeSlashes) : normalizeSlashes(pattern);\n\t\treturn expandPatterns\n\t\t\t? this.parseSearchPaths(pattern)\n\t\t\t: { pattern: patternListToIExpression(...(Array.isArray(pattern) ? pattern : [pattern])) };\n\t}\n\n\tprivate commonQuery(folderResources: (IWorkspaceFolderData | URI)[] = [], options: ICommonQueryBuilderOptions = {}): ICommonQueryProps<uri> {\n\t\tconst includeSearchPathsInfo: ISearchPathsInfo = this.handleIncludeExclude(options.includePattern, options.expandPatterns);\n\t\tconst excludeSearchPathsInfo: ISearchPathsInfo = this.handleIncludeExclude(options.excludePattern, options.expandPatterns);\n\n\t\t// Build folderQueries from searchPaths, if given, otherwise folderResources\n\t\tconst includeFolderName = folderResources.length > 1;\n\t\tconst folderQueries = (includeSearchPathsInfo.searchPaths && includeSearchPathsInfo.searchPaths.length ?\n\t\t\tincludeSearchPathsInfo.searchPaths.map(searchPath => this.getFolderQueryForSearchPath(searchPath, options, excludeSearchPathsInfo)) :\n\t\t\tfolderResources.map(folder => this.getFolderQueryForRoot(folder, options, excludeSearchPathsInfo, includeFolderName)))\n\t\t\t.filter(query => !!query) as IFolderQuery[];\n\n\t\tconst queryProps: ICommonQueryProps<uri> = {\n\t\t\t_reason: options._reason,\n\t\t\tfolderQueries,\n\t\t\tusingSearchPaths: !!(includeSearchPathsInfo.searchPaths && includeSearchPathsInfo.searchPaths.length),\n\t\t\textraFileResources: options.extraFileResources,\n\n\t\t\texcludePattern: excludeSearchPathsInfo.pattern,\n\t\t\tincludePattern: includeSearchPathsInfo.pattern,\n\t\t\tonlyOpenEditors: options.onlyOpenEditors,\n\t\t\tmaxResults: options.maxResults\n\t\t};\n\n\t\tif (options.onlyOpenEditors) {\n\t\t\tconst openEditors = arrays.coalesce(arrays.flatten(this.editorGroupsService.groups.map(group => group.editors.map(editor => editor.resource))));\n\t\t\tconst openEditorsInQuery = openEditors.filter(editor => pathIncludedInQuery(queryProps, editor.fsPath));\n\t\t\tconst openEditorsQueryProps = this.commonQueryFromFileList(openEditorsInQuery);\n\t\t\treturn { ...queryProps, ...openEditorsQueryProps };\n\t\t}\n\n\t\t// Filter extraFileResources against global include/exclude patterns - they are already expected to not belong to a workspace\n\t\tconst extraFileResources = options.extraFileResources && options.extraFileResources.filter(extraFile => pathIncludedInQuery(queryProps, extraFile.fsPath));\n\t\tqueryProps.extraFileResources = extraFileResources && extraFileResources.length ? extraFileResources : undefined;\n\n\t\treturn queryProps;\n\t}\n\n\tprivate commonQueryFromFileList(files: URI[]): ICommonQueryProps<URI> {\n\t\tconst folderQueries: IFolderQuery[] = [];\n\t\tconst foldersToSearch: ResourceMap<IFolderQuery> = new ResourceMap();\n\t\tconst includePattern: glob.IExpression = {};\n\t\tlet hasIncludedFile = false;\n\t\tfiles.forEach(file => {\n\t\t\tif (file.scheme === Schemas.walkThrough) { return; }\n\n\t\t\tconst providerExists = isAbsolutePath(file);\n\t\t\t// Special case userdata as we don't have a search provider for it, but it can be searched.\n\t\t\tif (providerExists) {\n\t\t\t\tconst searchRoot = this.workspaceContextService.getWorkspaceFolder(file)?.uri ?? file.with({ path: path.dirname(file.fsPath) });\n\n\t\t\t\tlet folderQuery = foldersToSearch.get(searchRoot);\n\t\t\t\tif (!folderQuery) {\n\t\t\t\t\thasIncludedFile = true;\n\t\t\t\t\tfolderQuery = { folder: searchRoot, includePattern: {} };\n\t\t\t\t\tfolderQueries.push(folderQuery);\n\t\t\t\t\tfoldersToSearch.set(searchRoot, folderQuery);\n\t\t\t\t}\n\n\t\t\t\tconst relPath = path.relative(searchRoot.fsPath, file.fsPath);\n\t\t\t\tassertIsDefined(folderQuery.includePattern)[relPath.replace(/\\\\/g, '/')] = true;\n\t\t\t} else {\n\t\t\t\tif (file.fsPath) {\n\t\t\t\t\thasIncludedFile = true;\n\t\t\t\t\tincludePattern[file.fsPath] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn {\n\t\t\tfolderQueries,\n\t\t\tincludePattern,\n\t\t\tusingSearchPaths: true,\n\t\t\texcludePattern: hasIncludedFile ? undefined : { '**/*': true }\n\t\t};\n\t}\n\n\t/**\n\t * Resolve isCaseSensitive flag based on the query and the isSmartCase flag, for search providers that don't support smart case natively.\n\t */\n\tprivate isCaseSensitive(contentPattern: IPatternInfo, options: ITextQueryBuilderOptions): boolean {\n\t\tif (options.isSmartCase) {\n\t\t\tif (contentPattern.isRegExp) {\n\t\t\t\t// Consider it case sensitive if it contains an unescaped capital letter\n\t\t\t\tif (strings.containsUppercaseCharacter(contentPattern.pattern, true)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t} else if (strings.containsUppercaseCharacter(contentPattern.pattern)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn !!contentPattern.isCaseSensitive;\n\t}\n\n\tprivate isMultiline(contentPattern: IPatternInfo): boolean {\n\t\tif (contentPattern.isMultiline) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (contentPattern.isRegExp && isMultilineRegexSource(contentPattern.pattern)) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (contentPattern.pattern.indexOf('\\n') >= 0) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn !!contentPattern.isMultiline;\n\t}\n\n\t/**\n\t * Take the includePattern as seen in the search viewlet, and split into components that look like searchPaths, and\n\t * glob patterns. Glob patterns are expanded from 'foo/bar' to '{foo/bar/**, **\\/foo/bar}.\n\t *\n\t * Public for test.\n\t */\n\tparseSearchPaths(pattern: string | string[]): ISearchPathsInfo {\n\t\tconst isSearchPath = (segment: string) => {\n\t\t\t// A segment is a search path if it is an absolute path or starts with ./, ../, .\\, or ..\\\n\t\t\treturn path.isAbsolute(segment) || /^\\.\\.?([\\/\\\\]|$)/.test(segment);\n\t\t};\n\n\t\tconst patterns = Array.isArray(pattern) ? pattern : splitGlobPattern(pattern);\n\t\tconst segments = patterns\n\t\t\t.map(segment => {\n\t\t\t\tconst userHome = this.pathService.resolvedUserHome;\n\t\t\t\tif (userHome) {\n\t\t\t\t\treturn untildify(segment, userHome.scheme === Schemas.file ? userHome.fsPath : userHome.path);\n\t\t\t\t}\n\n\t\t\t\treturn segment;\n\t\t\t});\n\t\tconst groups = collections.groupBy(segments,\n\t\t\tsegment => isSearchPath(segment) ? 'searchPaths' : 'exprSegments');\n\n\t\tconst expandedExprSegments = (groups.exprSegments || [])\n\t\t\t.map(s => strings.rtrim(s, '/'))\n\t\t\t.map(s => strings.rtrim(s, '\\\\'))\n\t\t\t.map(p => {\n\t\t\t\tif (p[0] === '.') {\n\t\t\t\t\tp = '*' + p; // convert \".js\" to \"*.js\"\n\t\t\t\t}\n\n\t\t\t\treturn expandGlobalGlob(p);\n\t\t\t});\n\n\t\tconst result: ISearchPathsInfo = {};\n\t\tconst searchPaths = this.expandSearchPathPatterns(groups.searchPaths || []);\n\t\tif (searchPaths && searchPaths.length) {\n\t\t\tresult.searchPaths = searchPaths;\n\t\t}\n\n\t\tconst exprSegments = arrays.flatten(expandedExprSegments);\n\t\tconst includePattern = patternListToIExpression(...exprSegments);\n\t\tif (includePattern) {\n\t\t\tresult.pattern = includePattern;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate getExcludesForFolder(folderConfig: ISearchConfiguration, options: ICommonQueryBuilderOptions): glob.IExpression | undefined {\n\t\treturn options.disregardExcludeSettings ?\n\t\t\tundefined :\n\t\t\tgetExcludes(folderConfig, !options.disregardSearchExcludeSettings);\n\t}\n\n\t/**\n\t * Split search paths (./ or ../ or absolute paths in the includePatterns) into absolute paths and globs applied to those paths\n\t */\n\tprivate expandSearchPathPatterns(searchPaths: string[]): ISearchPathPattern[] {\n\t\tif (!searchPaths || !searchPaths.length) {\n\t\t\t// No workspace => ignore search paths\n\t\t\treturn [];\n\t\t}\n\n\t\tconst expandedSearchPaths = arrays.flatten(\n\t\t\tsearchPaths.map(searchPath => {\n\t\t\t\t// 1 open folder => just resolve the search paths to absolute paths\n\t\t\t\tlet { pathPortion, globPortion } = splitGlobFromPath(searchPath);\n\n\t\t\t\tif (globPortion) {\n\t\t\t\t\tglobPortion = normalizeGlobPattern(globPortion);\n\t\t\t\t}\n\n\t\t\t\t// One pathPortion to multiple expanded search paths (e.g. duplicate matching workspace folders)\n\t\t\t\tconst oneExpanded = this.expandOneSearchPath(pathPortion);\n\n\t\t\t\t// Expanded search paths to multiple resolved patterns (with ** and without)\n\t\t\t\treturn arrays.flatten(\n\t\t\t\t\toneExpanded.map(oneExpandedResult => this.resolveOneSearchPathPattern(oneExpandedResult, globPortion)));\n\t\t\t}));\n\n\t\tconst searchPathPatternMap = new Map<string, ISearchPathPattern>();\n\t\texpandedSearchPaths.forEach(oneSearchPathPattern => {\n\t\t\tconst key = oneSearchPathPattern.searchPath.toString();\n\t\t\tconst existing = searchPathPatternMap.get(key);\n\t\t\tif (existing) {\n\t\t\t\tif (oneSearchPathPattern.pattern) {\n\t\t\t\t\texisting.pattern = existing.pattern || {};\n\t\t\t\t\texisting.pattern[oneSearchPathPattern.pattern] = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsearchPathPatternMap.set(key, {\n\t\t\t\t\tsearchPath: oneSearchPathPattern.searchPath,\n\t\t\t\t\tpattern: oneSearchPathPattern.pattern ? patternListToIExpression(oneSearchPathPattern.pattern) : undefined\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn Array.from(searchPathPatternMap.values());\n\t}\n\n\t/**\n\t * Takes a searchPath like `./a/foo` or `../a/foo` and expands it to absolute paths for all the workspaces it matches.\n\t */\n\tprivate expandOneSearchPath(searchPath: string): IOneSearchPathPattern[] {\n\t\tif (path.isAbsolute(searchPath)) {\n\t\t\tconst workspaceFolders = this.workspaceContextService.getWorkspace().folders;\n\t\t\tif (workspaceFolders[0] && workspaceFolders[0].uri.scheme !== Schemas.file) {\n\t\t\t\treturn [{\n\t\t\t\t\tsearchPath: workspaceFolders[0].uri.with({ path: searchPath })\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\t// Currently only local resources can be searched for with absolute search paths.\n\t\t\t// TODO convert this to a workspace folder + pattern, so excludes will be resolved properly for an absolute path inside a workspace folder\n\t\t\treturn [{\n\t\t\t\tsearchPath: uri.file(path.normalize(searchPath))\n\t\t\t}];\n\t\t}\n\n\t\tif (this.workspaceContextService.getWorkbenchState() === WorkbenchState.FOLDER) {\n\t\t\tconst workspaceUri = this.workspaceContextService.getWorkspace().folders[0].uri;\n\n\t\t\tsearchPath = normalizeSlashes(searchPath);\n\t\t\tif (searchPath.startsWith('../') || searchPath === '..') {\n\t\t\t\tconst resolvedPath = path.posix.resolve(workspaceUri.path, searchPath);\n\t\t\t\treturn [{\n\t\t\t\t\tsearchPath: workspaceUri.with({ path: resolvedPath })\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tconst cleanedPattern = normalizeGlobPattern(searchPath);\n\t\t\treturn [{\n\t\t\t\tsearchPath: workspaceUri,\n\t\t\t\tpattern: cleanedPattern\n\t\t\t}];\n\t\t} else if (searchPath === './' || searchPath === '.\\\\') {\n\t\t\treturn []; // ./ or ./**/foo makes sense for single-folder but not multi-folder workspaces\n\t\t} else {\n\t\t\tconst relativeSearchPathMatch = searchPath.match(/\\.[\\/\\\\]([^\\/\\\\]+)(?:[\\/\\\\](.+))?/);\n\t\t\tif (relativeSearchPathMatch) {\n\t\t\t\tconst searchPathRoot = relativeSearchPathMatch[1];\n\t\t\t\tconst matchingRoots = this.workspaceContextService.getWorkspace().folders.filter(folder => folder.name === searchPathRoot);\n\t\t\t\tif (matchingRoots.length) {\n\t\t\t\t\treturn matchingRoots.map(root => {\n\t\t\t\t\t\tconst patternMatch = relativeSearchPathMatch[2];\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tsearchPath: root.uri,\n\t\t\t\t\t\t\tpattern: patternMatch && normalizeGlobPattern(patternMatch)\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\t// No root folder with name\n\t\t\t\t\tconst searchPathNotFoundError = nls.localize('search.noWorkspaceWithName', \"Workspace folder does not exist: {0}\", searchPathRoot);\n\t\t\t\t\tthrow new Error(searchPathNotFoundError);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Malformed ./ search path, ignore\n\t\t\t}\n\t\t}\n\n\t\treturn [];\n\t}\n\n\tprivate resolveOneSearchPathPattern(oneExpandedResult: IOneSearchPathPattern, globPortion?: string): IOneSearchPathPattern[] {\n\t\tconst pattern = oneExpandedResult.pattern && globPortion ?\n\t\t\t`${oneExpandedResult.pattern}/${globPortion}` :\n\t\t\toneExpandedResult.pattern || globPortion;\n\n\t\tconst results = [\n\t\t\t{\n\t\t\t\tsearchPath: oneExpandedResult.searchPath,\n\t\t\t\tpattern\n\t\t\t}];\n\n\t\tif (pattern && !pattern.endsWith('**')) {\n\t\t\tresults.push({\n\t\t\t\tsearchPath: oneExpandedResult.searchPath,\n\t\t\t\tpattern: pattern + '/**'\n\t\t\t});\n\t\t}\n\n\t\treturn results;\n\t}\n\n\tprivate getFolderQueryForSearchPath(searchPath: ISearchPathPattern, options: ICommonQueryBuilderOptions, searchPathExcludes: ISearchPathsInfo): IFolderQuery | null {\n\t\tconst rootConfig = this.getFolderQueryForRoot(toWorkspaceFolder(searchPath.searchPath), options, searchPathExcludes, false);\n\t\tif (!rootConfig) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn {\n\t\t\t...rootConfig,\n\t\t\t...{\n\t\t\t\tincludePattern: searchPath.pattern\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate getFolderQueryForRoot(folder: (IWorkspaceFolderData | URI), options: ICommonQueryBuilderOptions, searchPathExcludes: ISearchPathsInfo, includeFolderName: boolean): IFolderQuery | null {\n\t\tlet thisFolderExcludeSearchPathPattern: glob.IExpression | undefined;\n\t\tconst folderUri = URI.isUri(folder) ? folder : folder.uri;\n\t\tif (searchPathExcludes.searchPaths) {\n\t\t\tconst thisFolderExcludeSearchPath = searchPathExcludes.searchPaths.filter(sp => isEqual(sp.searchPath, folderUri))[0];\n\t\t\tif (thisFolderExcludeSearchPath && !thisFolderExcludeSearchPath.pattern) {\n\t\t\t\t// entire folder is excluded\n\t\t\t\treturn null;\n\t\t\t} else if (thisFolderExcludeSearchPath) {\n\t\t\t\tthisFolderExcludeSearchPathPattern = thisFolderExcludeSearchPath.pattern;\n\t\t\t}\n\t\t}\n\n\t\tconst folderConfig = this.configurationService.getValue<ISearchConfiguration>({ resource: folderUri });\n\t\tconst settingExcludes = this.getExcludesForFolder(folderConfig, options);\n\t\tconst excludePattern: glob.IExpression = {\n\t\t\t...(settingExcludes || {}),\n\t\t\t...(thisFolderExcludeSearchPathPattern || {})\n\t\t};\n\n\t\tconst folderName = URI.isUri(folder) ? basename(folder) : folder.name;\n\t\treturn <IFolderQuery>{\n\t\t\tfolder: folderUri,\n\t\t\tfolderName: includeFolderName ? folderName : undefined,\n\t\t\texcludePattern: Object.keys(excludePattern).length > 0 ? excludePattern : undefined,\n\t\t\tfileEncoding: folderConfig.files && folderConfig.files.encoding,\n\t\t\tdisregardIgnoreFiles: typeof options.disregardIgnoreFiles === 'boolean' ? options.disregardIgnoreFiles : !folderConfig.search.useIgnoreFiles,\n\t\t\tdisregardGlobalIgnoreFiles: typeof options.disregardGlobalIgnoreFiles === 'boolean' ? options.disregardGlobalIgnoreFiles : !folderConfig.search.useGlobalIgnoreFiles,\n\t\t\tignoreSymlinks: typeof options.ignoreSymlinks === 'boolean' ? options.ignoreSymlinks : !folderConfig.search.followSymlinks,\n\t\t};\n\t}\n}\n\nfunction splitGlobFromPath(searchPath: string): { pathPortion: string, globPortion?: string } {\n\tconst globCharMatch = searchPath.match(/[\\*\\{\\}\\(\\)\\[\\]\\?]/);\n\tif (globCharMatch) {\n\t\tconst globCharIdx = globCharMatch.index;\n\t\tconst lastSlashMatch = searchPath.substr(0, globCharIdx).match(/[/|\\\\][^/\\\\]*$/);\n\t\tif (lastSlashMatch) {\n\t\t\tlet pathPortion = searchPath.substr(0, lastSlashMatch.index);\n\t\t\tif (!pathPortion.match(/[/\\\\]/)) {\n\t\t\t\t// If the last slash was the only slash, then we now have '' or 'C:' or '.'. Append a slash.\n\t\t\t\tpathPortion += '/';\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tpathPortion,\n\t\t\t\tglobPortion: searchPath.substr((lastSlashMatch.index || 0) + 1)\n\t\t\t};\n\t\t}\n\t}\n\n\t// No glob char, or malformed\n\treturn {\n\t\tpathPortion: searchPath\n\t};\n}\n\nfunction patternListToIExpression(...patterns: string[]): glob.IExpression {\n\treturn patterns.length ?\n\t\tpatterns.reduce((glob, cur) => { glob[cur] = true; return glob; }, Object.create(null)) :\n\t\tundefined;\n}\n\nfunction splitGlobPattern(pattern: string): string[] {\n\treturn glob.splitGlobAware(pattern, ',')\n\t\t.map(s => s.trim())\n\t\t.filter(s => !!s.length);\n}\n\n/**\n * Note - we used {} here previously but ripgrep can't handle nested {} patterns. See https://github.com/microsoft/vscode/issues/32761\n */\nfunction expandGlobalGlob(pattern: string): string[] {\n\tconst patterns = [\n\t\t`**/${pattern}/**`,\n\t\t`**/${pattern}`\n\t];\n\n\treturn patterns.map(p => p.replace(/\\*\\*\\/\\*\\*/g, '**'));\n}\n\nfunction normalizeSlashes(pattern: string): string {\n\treturn pattern.replace(/\\\\/g, '/');\n}\n\n/**\n * Normalize slashes, remove `./` and trailing slashes\n */\nfunction normalizeGlobPattern(pattern: string): string {\n\treturn normalizeSlashes(pattern)\n\t\t.replace(/^\\.\\//, '')\n\t\t.replace(/\\/+$/g, '');\n}\n\n/**\n * Construct an include pattern from a list of folders uris to search in.\n */\nexport function resolveResourcesForSearchIncludes(resources: URI[], contextService: IWorkspaceContextService): string[] {\n\tresources = arrays.distinct(resources, resource => resource.toString());\n\n\tconst folderPaths: string[] = [];\n\tconst workspace = contextService.getWorkspace();\n\n\tif (resources) {\n\t\tresources.forEach(resource => {\n\t\t\tlet folderPath: string | undefined;\n\t\t\tif (contextService.getWorkbenchState() === WorkbenchState.FOLDER) {\n\t\t\t\t// Show relative path from the root for single-root mode\n\t\t\t\tfolderPath = relativePath(workspace.folders[0].uri, resource); // always uses forward slashes\n\t\t\t\tif (folderPath && folderPath !== '.') {\n\t\t\t\t\tfolderPath = './' + folderPath;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst owningFolder = contextService.getWorkspaceFolder(resource);\n\t\t\t\tif (owningFolder) {\n\t\t\t\t\tconst owningRootName = owningFolder.name;\n\t\t\t\t\t// If this root is the only one with its basename, use a relative ./ path. If there is another, use an absolute path\n\t\t\t\t\tconst isUniqueFolder = workspace.folders.filter(folder => folder.name === owningRootName).length === 1;\n\t\t\t\t\tif (isUniqueFolder) {\n\t\t\t\t\t\tconst relPath = relativePath(owningFolder.uri, resource); // always uses forward slashes\n\t\t\t\t\t\tif (relPath === '') {\n\t\t\t\t\t\t\tfolderPath = `./${owningFolder.name}`;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfolderPath = `./${owningFolder.name}/${relPath}`;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfolderPath = resource.fsPath; // TODO rob: handle non-file URIs\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (folderPath) {\n\t\t\t\tfolderPaths.push(folderPath);\n\t\t\t}\n\t\t});\n\t}\n\treturn folderPaths;\n}\n"]}