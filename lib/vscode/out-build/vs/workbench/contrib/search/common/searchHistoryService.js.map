{"version":3,"file":"searchHistoryService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/search/common/searchHistoryService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAenF,QAAA,qBAAqB,GAAG,CAAA,GAAA,+BAAe,CAAA,CAAwB,sBAAsB,CAAC,CAAC;IASpG,IAAa,oBAAoB,GAAjC,MAAa,oBAAoB;QAQhC,YACmC,cAA+B;YAA/B,mBAAc,GAAd,cAAc,CAAiB;YAJjD,uBAAkB,GAAG,IAAI,eAAO,EAAQ,CAAC;YACjD,sBAAiB,GAAgB,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC;QAIpE,CAAC;QAEL,YAAY;YACX,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,oBAAoB,CAAC,kBAAkB,oBAAyB,CAAC;YAC5F,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,CAAC;QAChC,CAAC;QAED,IAAI;YACH,IAAI,MAAwC,CAAC;YAC7C,MAAM,GAAG,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,oBAAoB,CAAC,kBAAkB,oBAAyB,CAAC;YAErG,IAAI,GAAG,EAAE;gBACR,IAAI;oBACH,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;iBACzB;gBAAC,OAAO,CAAC,EAAE;oBACX,eAAe;iBACf;aACD;YAED,OAAO,MAAM,IAAI,EAAE,CAAC;QACrB,CAAC;QAED,IAAI,CAAC,OAA6B;YACjC,IAAI,CAAA,GAAA,qBAAa,CAAA,CAAC,OAAO,CAAC,EAAE;gBAC3B,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,oBAAoB,CAAC,kBAAkB,oBAAyB,CAAC;aAC5F;iBAAM;gBACN,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,oBAAoB,CAAC,kBAAkB,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,kCAA6C,CAAC;aACxI;QACF,CAAC;KACD,CAAA;IApCwB,uCAAkB,GAAG,0BAA0B,CAAC;IAH5D,oBAAoB;QAS9B,WAAA,yBAAe,CAAA;OATL,oBAAoB,CAuChC;IAvCY,oDAAoB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { isEmptyObject } from 'vs/base/common/types';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\n\nexport interface ISearchHistoryService {\n\treadonly _serviceBrand: undefined;\n\tonDidClearHistory: Event<void>;\n\tclearHistory(): void;\n\tload(): ISearchHistoryValues;\n\tsave(history: ISearchHistoryValues): void;\n}\n\nexport const ISearchHistoryService = createDecorator<ISearchHistoryService>('searchHistoryService');\n\nexport interface ISearchHistoryValues {\n\tsearch?: string[];\n\treplace?: string[];\n\tinclude?: string[];\n\texclude?: string[];\n}\n\nexport class SearchHistoryService implements ISearchHistoryService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate static readonly SEARCH_HISTORY_KEY = 'workbench.search.history';\n\n\tprivate readonly _onDidClearHistory = new Emitter<void>();\n\treadonly onDidClearHistory: Event<void> = this._onDidClearHistory.event;\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService\n\t) { }\n\n\tclearHistory(): void {\n\t\tthis.storageService.remove(SearchHistoryService.SEARCH_HISTORY_KEY, StorageScope.WORKSPACE);\n\t\tthis._onDidClearHistory.fire();\n\t}\n\n\tload(): ISearchHistoryValues {\n\t\tlet result: ISearchHistoryValues | undefined;\n\t\tconst raw = this.storageService.get(SearchHistoryService.SEARCH_HISTORY_KEY, StorageScope.WORKSPACE);\n\n\t\tif (raw) {\n\t\t\ttry {\n\t\t\t\tresult = JSON.parse(raw);\n\t\t\t} catch (e) {\n\t\t\t\t// Invalid data\n\t\t\t}\n\t\t}\n\n\t\treturn result || {};\n\t}\n\n\tsave(history: ISearchHistoryValues): void {\n\t\tif (isEmptyObject(history)) {\n\t\t\tthis.storageService.remove(SearchHistoryService.SEARCH_HISTORY_KEY, StorageScope.WORKSPACE);\n\t\t} else {\n\t\t\tthis.storageService.store(SearchHistoryService.SEARCH_HISTORY_KEY, JSON.stringify(history), StorageScope.WORKSPACE, StorageTarget.USER);\n\t\t}\n\t}\n}\n"]}