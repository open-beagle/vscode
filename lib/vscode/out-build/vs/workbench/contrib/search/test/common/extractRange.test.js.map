{"version":3,"file":"extractRange.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/search/test/common/extractRange.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { extractRangeFromFilter } from 'vs/workbench/contrib/search/common/search';\n\nsuite('extractRangeFromFilter', () => {\n\n\ttest('basics', async function () {\n\t\tassert.ok(!extractRangeFromFilter(''));\n\t\tassert.ok(!extractRangeFromFilter('/some/path'));\n\t\tassert.ok(!extractRangeFromFilter('/some/path/file.txt'));\n\n\t\tfor (const lineSep of [':', '#', '(', ':line ']) {\n\t\t\tfor (const colSep of [':', '#', ',']) {\n\t\t\t\tconst base = '/some/path/file.txt';\n\n\t\t\t\tlet res = extractRangeFromFilter(`${base}${lineSep}20`);\n\t\t\t\tassert.strictEqual(res?.filter, base);\n\t\t\t\tassert.strictEqual(res?.range.startLineNumber, 20);\n\t\t\t\tassert.strictEqual(res?.range.startColumn, 1);\n\n\t\t\t\tres = extractRangeFromFilter(`${base}${lineSep}20${colSep}`);\n\t\t\t\tassert.strictEqual(res?.filter, base);\n\t\t\t\tassert.strictEqual(res?.range.startLineNumber, 20);\n\t\t\t\tassert.strictEqual(res?.range.startColumn, 1);\n\n\t\t\t\tres = extractRangeFromFilter(`${base}${lineSep}20${colSep}3`);\n\t\t\t\tassert.strictEqual(res?.filter, base);\n\t\t\t\tassert.strictEqual(res?.range.startLineNumber, 20);\n\t\t\t\tassert.strictEqual(res?.range.startColumn, 3);\n\t\t\t}\n\t\t}\n\t});\n\n\ttest('allow space after path', async function () {\n\t\tconst res = extractRangeFromFilter('/some/path/file.txt (19,20)');\n\n\t\tassert.strictEqual(res?.filter, '/some/path/file.txt');\n\t\tassert.strictEqual(res?.range.startLineNumber, 19);\n\t\tassert.strictEqual(res?.range.startColumn, 20);\n\t});\n\n\ttest('unless', async function () {\n\t\tconst res = extractRangeFromFilter('/some/path/file.txt@ (19,20)', ['@']);\n\n\t\tassert.ok(!res);\n\t});\n});\n"]}