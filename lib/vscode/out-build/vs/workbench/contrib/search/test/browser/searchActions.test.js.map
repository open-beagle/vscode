{"version":3,"file":"searchActions.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/search/test/browser/searchActions.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { Keybinding } from 'vs/base/common/keyCodes';\nimport { OS } from 'vs/base/common/platform';\nimport { URI } from 'vs/base/common/uri';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { ModelServiceImpl } from 'vs/editor/common/services/modelServiceImpl';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { TestConfigurationService } from 'vs/platform/configuration/test/common/testConfigurationService';\nimport { TestInstantiationService } from 'vs/platform/instantiation/test/common/instantiationServiceMock';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { USLayoutResolvedKeybinding } from 'vs/platform/keybinding/common/usLayoutResolvedKeybinding';\nimport { IFileMatch } from 'vs/workbench/services/search/common/search';\nimport { ReplaceAction } from 'vs/workbench/contrib/search/browser/searchActions';\nimport { FileMatch, FileMatchOrMatch, Match } from 'vs/workbench/contrib/search/common/searchModel';\nimport { MockObjectTree } from 'vs/workbench/contrib/search/test/browser/mockSearchTree';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { TestThemeService } from 'vs/platform/theme/test/common/testThemeService';\n\nsuite('Search Actions', () => {\n\n\tlet instantiationService: TestInstantiationService;\n\tlet counter: number;\n\n\tsetup(() => {\n\t\tinstantiationService = new TestInstantiationService();\n\t\tinstantiationService.stub(IModelService, stubModelService(instantiationService));\n\t\tinstantiationService.stub(IKeybindingService, {});\n\t\tinstantiationService.stub(IKeybindingService, 'resolveKeybinding', (keybinding: Keybinding) => [new USLayoutResolvedKeybinding(keybinding, OS)]);\n\t\tinstantiationService.stub(IKeybindingService, 'lookupKeybinding', (id: string) => null);\n\t\tcounter = 0;\n\t});\n\n\ttest('get next element to focus after removing a match when it has next sibling file', function () {\n\t\tconst fileMatch1 = aFileMatch();\n\t\tconst fileMatch2 = aFileMatch();\n\t\tconst data = [fileMatch1, aMatch(fileMatch1), aMatch(fileMatch1), fileMatch2, aMatch(fileMatch2), aMatch(fileMatch2)];\n\t\tconst tree = aTree(data);\n\t\tconst target = data[2];\n\t\tconst testObject: ReplaceAction = instantiationService.createInstance(ReplaceAction, tree, target, null);\n\n\t\tconst actual = testObject.getElementToFocusAfterRemoved(tree, target);\n\t\tassert.strictEqual(data[4], actual);\n\t});\n\n\ttest('get next element to focus after removing a match when it does not have next sibling match', function () {\n\t\tconst fileMatch1 = aFileMatch();\n\t\tconst fileMatch2 = aFileMatch();\n\t\tconst data = [fileMatch1, aMatch(fileMatch1), aMatch(fileMatch1), fileMatch2, aMatch(fileMatch2), aMatch(fileMatch2)];\n\t\tconst tree = aTree(data);\n\t\tconst target = data[5];\n\t\tconst testObject: ReplaceAction = instantiationService.createInstance(ReplaceAction, tree, target, null);\n\n\t\tconst actual = testObject.getElementToFocusAfterRemoved(tree, target);\n\t\tassert.strictEqual(data[4], actual);\n\t});\n\n\ttest('get next element to focus after removing a match when it does not have next sibling match and previous match is file match', function () {\n\t\tconst fileMatch1 = aFileMatch();\n\t\tconst fileMatch2 = aFileMatch();\n\t\tconst data = [fileMatch1, aMatch(fileMatch1), aMatch(fileMatch1), fileMatch2, aMatch(fileMatch2)];\n\t\tconst tree = aTree(data);\n\t\tconst target = data[4];\n\t\tconst testObject: ReplaceAction = instantiationService.createInstance(ReplaceAction, tree, target, null);\n\n\t\tconst actual = testObject.getElementToFocusAfterRemoved(tree, target);\n\t\tassert.strictEqual(data[2], actual);\n\t});\n\n\ttest('get next element to focus after removing a match when it is the only match', function () {\n\t\tconst fileMatch1 = aFileMatch();\n\t\tconst data = [fileMatch1, aMatch(fileMatch1)];\n\t\tconst tree = aTree(data);\n\t\tconst target = data[1];\n\t\tconst testObject: ReplaceAction = instantiationService.createInstance(ReplaceAction, tree, target, null);\n\n\t\tconst actual = testObject.getElementToFocusAfterRemoved(tree, target);\n\t\tassert.strictEqual(undefined, actual);\n\t});\n\n\ttest('get next element to focus after removing a file match when it has next sibling', function () {\n\t\tconst fileMatch1 = aFileMatch();\n\t\tconst fileMatch2 = aFileMatch();\n\t\tconst fileMatch3 = aFileMatch();\n\t\tconst data = [fileMatch1, aMatch(fileMatch1), fileMatch2, aMatch(fileMatch2), fileMatch3, aMatch(fileMatch3)];\n\t\tconst tree = aTree(data);\n\t\tconst target = data[2];\n\t\tconst testObject: ReplaceAction = instantiationService.createInstance(ReplaceAction, tree, target, null);\n\n\t\tconst actual = testObject.getElementToFocusAfterRemoved(tree, target);\n\t\tassert.strictEqual(data[4], actual);\n\t});\n\n\ttest('get next element to focus after removing a file match when it has no next sibling', function () {\n\t\tconst fileMatch1 = aFileMatch();\n\t\tconst fileMatch2 = aFileMatch();\n\t\tconst fileMatch3 = aFileMatch();\n\t\tconst data = [fileMatch1, aMatch(fileMatch1), fileMatch2, aMatch(fileMatch2), fileMatch3, aMatch(fileMatch3)];\n\t\tconst tree = aTree(data);\n\t\tconst target = data[4];\n\t\tconst testObject: ReplaceAction = instantiationService.createInstance(ReplaceAction, tree, target, null);\n\n\t\tconst actual = testObject.getElementToFocusAfterRemoved(tree, target);\n\t\tassert.strictEqual(data[3], actual);\n\t});\n\n\ttest('get next element to focus after removing a file match when it is only match', function () {\n\t\tconst fileMatch1 = aFileMatch();\n\t\tconst data = [fileMatch1, aMatch(fileMatch1)];\n\t\tconst tree = aTree(data);\n\t\tconst target = data[0];\n\t\tconst testObject: ReplaceAction = instantiationService.createInstance(ReplaceAction, tree, target, null);\n\n\t\tconst actual = testObject.getElementToFocusAfterRemoved(tree, target);\n\t\tassert.strictEqual(undefined, actual);\n\t});\n\n\tfunction aFileMatch(): FileMatch {\n\t\tconst rawMatch: IFileMatch = {\n\t\t\tresource: URI.file('somepath' + ++counter),\n\t\t\tresults: []\n\t\t};\n\t\treturn instantiationService.createInstance(FileMatch, null, null, null, null, rawMatch);\n\t}\n\n\tfunction aMatch(fileMatch: FileMatch): Match {\n\t\tconst line = ++counter;\n\t\tconst match = new Match(\n\t\t\tfileMatch,\n\t\t\t['some match'],\n\t\t\t{\n\t\t\t\tstartLineNumber: 0,\n\t\t\t\tstartColumn: 0,\n\t\t\t\tendLineNumber: 0,\n\t\t\t\tendColumn: 2\n\t\t\t},\n\t\t\t{\n\t\t\t\tstartLineNumber: line,\n\t\t\t\tstartColumn: 0,\n\t\t\t\tendLineNumber: line,\n\t\t\t\tendColumn: 2\n\t\t\t}\n\t\t);\n\t\tfileMatch.add(match);\n\t\treturn match;\n\t}\n\n\tfunction aTree(elements: FileMatchOrMatch[]): any {\n\t\treturn new MockObjectTree(elements);\n\t}\n\n\tfunction stubModelService(instantiationService: TestInstantiationService): IModelService {\n\t\tinstantiationService.stub(IConfigurationService, new TestConfigurationService());\n\t\tinstantiationService.stub(IThemeService, new TestThemeService());\n\t\treturn instantiationService.createInstance(ModelServiceImpl);\n\t}\n});\n"]}