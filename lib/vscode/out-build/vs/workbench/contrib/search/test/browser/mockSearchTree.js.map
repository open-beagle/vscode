{"version":3,"file":"mockSearchTree.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/search/test/browser/mockSearchTree.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAMhG,MAAM,SAAS,GAAG,IAAI,eAAO,EAAE,CAAC,KAAK,CAAC;IAEtC;;OAEG;IACH,MAAa,cAAc;QAsB1B,YAAoB,QAAe;YAAf,aAAQ,GAAR,QAAQ,CAAO;QAAI,CAAC;QApBxC,IAAI,gBAAgB,KAAK,OAAO,SAAS,CAAC,CAAC,CAAC;QAC5C,IAAI,oBAAoB,KAAK,OAAO,SAAS,CAAC,CAAC,CAAC;QAChD,IAAI,SAAS,KAAK,OAAO,SAAS,CAAC,CAAC,CAAC;QAErC,IAAI,YAAY,KAAK,OAAO,SAAS,CAAC,CAAC,CAAC;QACxC,IAAI,eAAe,KAAK,OAAO,SAAS,CAAC,CAAC,CAAC;QAC3C,IAAI,aAAa,KAAK,OAAO,SAAS,CAAC,CAAC,CAAC;QAEzC,IAAI,SAAS,KAAK,OAAO,SAAS,CAAC,CAAC,CAAC;QACrC,IAAI,OAAO,KAAK,OAAO,SAAS,CAAC,CAAC,CAAC;QACnC,IAAI,UAAU,KAAK,OAAO,SAAS,CAAC,CAAC,CAAC;QAEtC,IAAI,UAAU,KAAK,OAAO,SAAS,CAAC,CAAC,CAAC;QACtC,IAAI,SAAS,KAAK,OAAO,SAAS,CAAC,CAAC,CAAC;QAErC,IAAI,wBAAwB,KAAK,OAAO,SAAS,CAAC,CAAC,CAAC;QACpD,IAAI,0BAA0B,KAAK,OAAO,SAAS,CAAC,CAAC,CAAC;QAEtD,IAAI,YAAY,KAAK,OAAO,SAAS,CAAC,CAAC,CAAC;QAIxC,QAAQ,KAAW,CAAC;QAEpB,QAAQ,CAAC,QAAc,EAAE,YAAqB,KAAK;YAClD,OAAO,IAAI,CAAC;QACb,CAAC;QAED,MAAM,CAAC,QAAc,EAAE,YAAqB,KAAK;YAChD,OAAO,IAAI,CAAC;QACb,CAAC;QAED,QAAQ,CAAC,KAAY;YACpB,MAAM,QAAQ,GAAG,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;gBACtD,SAAS,CAAC;YAEX,OAAO,IAAI,cAAc,CAAC,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACpD,CAAC;QAED,OAAO;QACP,CAAC;KACD;IA3CD,wCA2CC;IAED,MAAM,cAAc;QACnB,YAAoB,QAAa,EAAU,QAAQ,CAAC;YAAhC,aAAQ,GAAR,QAAQ,CAAK;YAAU,UAAK,GAAL,KAAK,CAAI;QAAI,CAAC;QAEzD,OAAO;YACN,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAClC,CAAC;QAED,QAAQ;YACP,OAAO,IAAI,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QACpC,CAAC;QAED,KAAK;YACJ,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;YACf,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAClC,CAAC;QAED,IAAI;YACH,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;YACtC,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAClC,CAAC;QAED,IAAI;YACH,OAAO,IAAI,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QACpC,CAAC;KACD","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ITreeNavigator } from 'vs/base/browser/ui/tree/tree';\nimport { Emitter } from 'vs/base/common/event';\nimport { IDisposable } from 'vs/base/common/lifecycle';\n\nconst someEvent = new Emitter().event;\n\n/**\n * Add stub methods as needed\n */\nexport class MockObjectTree<T, TRef> implements IDisposable {\n\n\tget onDidChangeFocus() { return someEvent; }\n\tget onDidChangeSelection() { return someEvent; }\n\tget onDidOpen() { return someEvent; }\n\n\tget onMouseClick() { return someEvent; }\n\tget onMouseDblClick() { return someEvent; }\n\tget onContextMenu() { return someEvent; }\n\n\tget onKeyDown() { return someEvent; }\n\tget onKeyUp() { return someEvent; }\n\tget onKeyPress() { return someEvent; }\n\n\tget onDidFocus() { return someEvent; }\n\tget onDidBlur() { return someEvent; }\n\n\tget onDidChangeCollapseState() { return someEvent; }\n\tget onDidChangeRenderNodeCount() { return someEvent; }\n\n\tget onDidDispose() { return someEvent; }\n\n\tconstructor(private elements: any[]) { }\n\n\tdomFocus(): void { }\n\n\tcollapse(location: TRef, recursive: boolean = false): boolean {\n\t\treturn true;\n\t}\n\n\texpand(location: TRef, recursive: boolean = false): boolean {\n\t\treturn true;\n\t}\n\n\tnavigate(start?: TRef): ITreeNavigator<T> {\n\t\tconst startIdx = start ? this.elements.indexOf(start) :\n\t\t\tundefined;\n\n\t\treturn new ArrayNavigator(this.elements, startIdx);\n\t}\n\n\tdispose(): void {\n\t}\n}\n\nclass ArrayNavigator<T> implements ITreeNavigator<T> {\n\tconstructor(private elements: T[], private index = 0) { }\n\n\tcurrent(): T | null {\n\t\treturn this.elements[this.index];\n\t}\n\n\tprevious(): T | null {\n\t\treturn this.elements[--this.index];\n\t}\n\n\tfirst(): T | null {\n\t\tthis.index = 0;\n\t\treturn this.elements[this.index];\n\t}\n\n\tlast(): T | null {\n\t\tthis.index = this.elements.length - 1;\n\t\treturn this.elements[this.index];\n\t}\n\n\tnext(): T | null {\n\t\treturn this.elements[++this.index];\n\t}\n}\n"]}