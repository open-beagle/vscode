{"version":3,"file":"queryBuilder.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/search/test/browser/queryBuilder.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as assert from 'assert';\nimport { IExpression } from 'vs/base/common/glob';\nimport { join } from 'vs/base/common/path';\nimport { isWindows } from 'vs/base/common/platform';\nimport { URI as uri } from 'vs/base/common/uri';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { TestConfigurationService } from 'vs/platform/configuration/test/common/testConfigurationService';\nimport { TestInstantiationService } from 'vs/platform/instantiation/test/common/instantiationServiceMock';\nimport { IWorkspaceContextService, toWorkspaceFolder } from 'vs/platform/workspace/common/workspace';\nimport { toWorkspaceFolders } from 'vs/platform/workspaces/common/workspaces';\nimport { ISearchPathsInfo, QueryBuilder } from 'vs/workbench/contrib/search/common/queryBuilder';\nimport { IPathService } from 'vs/workbench/services/path/common/pathService';\nimport { IFileQuery, IFolderQuery, IPatternInfo, ITextQuery, QueryType } from 'vs/workbench/services/search/common/search';\nimport { TestPathService, TestEnvironmentService } from 'vs/workbench/test/browser/workbenchTestServices';\nimport { TestContextService } from 'vs/workbench/test/common/workbenchTestServices';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { Workspace } from 'vs/platform/workspace/test/common/testWorkspace';\nimport { extUriBiasedIgnorePathCase } from 'vs/base/common/resources';\n\nconst DEFAULT_EDITOR_CONFIG = {};\nconst DEFAULT_USER_CONFIG = { useRipgrep: true, useIgnoreFiles: true, useGlobalIgnoreFiles: true };\nconst DEFAULT_QUERY_PROPS = {};\nconst DEFAULT_TEXT_QUERY_PROPS = { usePCRE2: false };\n\nsuite('QueryBuilder', () => {\n\tconst PATTERN_INFO: IPatternInfo = { pattern: 'a' };\n\tconst ROOT_1 = fixPath('/foo/root1');\n\tconst ROOT_1_URI = getUri(ROOT_1);\n\tconst ROOT_1_NAMED_FOLDER = toWorkspaceFolder(ROOT_1_URI);\n\tconst WS_CONFIG_PATH = getUri('/bar/test.code-workspace'); // location of the workspace file (not important except that it is a file URI)\n\n\tlet instantiationService: TestInstantiationService;\n\tlet queryBuilder: QueryBuilder;\n\tlet mockConfigService: TestConfigurationService;\n\tlet mockContextService: TestContextService;\n\tlet mockWorkspace: Workspace;\n\n\tsetup(() => {\n\t\tinstantiationService = new TestInstantiationService();\n\n\t\tmockConfigService = new TestConfigurationService();\n\t\tmockConfigService.setUserConfiguration('search', DEFAULT_USER_CONFIG);\n\t\tmockConfigService.setUserConfiguration('editor', DEFAULT_EDITOR_CONFIG);\n\t\tinstantiationService.stub(IConfigurationService, mockConfigService);\n\n\t\tmockContextService = new TestContextService();\n\t\tmockWorkspace = new Workspace('workspace', [toWorkspaceFolder(ROOT_1_URI)]);\n\t\tmockContextService.setWorkspace(mockWorkspace);\n\n\t\tinstantiationService.stub(IWorkspaceContextService, mockContextService);\n\t\tinstantiationService.stub(IEnvironmentService, TestEnvironmentService);\n\t\tinstantiationService.stub(IPathService, new TestPathService());\n\n\t\tqueryBuilder = instantiationService.createInstance(QueryBuilder);\n\t});\n\n\ttest('simple text pattern', () => {\n\t\tassertEqualTextQueries(\n\t\t\tqueryBuilder.text(PATTERN_INFO),\n\t\t\t{\n\t\t\t\tfolderQueries: [],\n\t\t\t\tcontentPattern: PATTERN_INFO,\n\t\t\t\ttype: QueryType.Text\n\t\t\t});\n\t});\n\n\ttest('normalize literal newlines', () => {\n\t\tassertEqualTextQueries(\n\t\t\tqueryBuilder.text({ pattern: 'foo\\nbar', isRegExp: true }),\n\t\t\t{\n\t\t\t\tfolderQueries: [],\n\t\t\t\tcontentPattern: {\n\t\t\t\t\tpattern: 'foo\\\\nbar',\n\t\t\t\t\tisRegExp: true,\n\t\t\t\t\tisMultiline: true\n\t\t\t\t},\n\t\t\t\ttype: QueryType.Text\n\t\t\t});\n\n\t\tassertEqualTextQueries(\n\t\t\tqueryBuilder.text({ pattern: 'foo\\nbar', isRegExp: false }),\n\t\t\t{\n\t\t\t\tfolderQueries: [],\n\t\t\t\tcontentPattern: {\n\t\t\t\t\tpattern: 'foo\\nbar',\n\t\t\t\t\tisRegExp: false,\n\t\t\t\t\tisMultiline: true\n\t\t\t\t},\n\t\t\t\ttype: QueryType.Text\n\t\t\t});\n\t});\n\n\ttest('splits include pattern when expandPatterns enabled', () => {\n\t\tassertEqualQueries(\n\t\t\tqueryBuilder.file(\n\t\t\t\t[ROOT_1_NAMED_FOLDER],\n\t\t\t\t{ includePattern: '**/foo, **/bar', expandPatterns: true },\n\t\t\t),\n\t\t\t{\n\t\t\t\tfolderQueries: [{\n\t\t\t\t\tfolder: ROOT_1_URI\n\t\t\t\t}],\n\t\t\t\ttype: QueryType.File,\n\t\t\t\tincludePattern: {\n\t\t\t\t\t'**/foo': true,\n\t\t\t\t\t'**/foo/**': true,\n\t\t\t\t\t'**/bar': true,\n\t\t\t\t\t'**/bar/**': true,\n\t\t\t\t}\n\t\t\t});\n\t});\n\n\ttest('does not split include pattern when expandPatterns disabled', () => {\n\t\tassertEqualQueries(\n\t\t\tqueryBuilder.file(\n\t\t\t\t[ROOT_1_NAMED_FOLDER],\n\t\t\t\t{ includePattern: '**/foo, **/bar' },\n\t\t\t),\n\t\t\t{\n\t\t\t\tfolderQueries: [{\n\t\t\t\t\tfolder: ROOT_1_URI\n\t\t\t\t}],\n\t\t\t\ttype: QueryType.File,\n\t\t\t\tincludePattern: {\n\t\t\t\t\t'**/foo, **/bar': true\n\t\t\t\t}\n\t\t\t});\n\t});\n\n\ttest('includePattern array', () => {\n\t\tassertEqualQueries(\n\t\t\tqueryBuilder.file(\n\t\t\t\t[ROOT_1_NAMED_FOLDER],\n\t\t\t\t{ includePattern: ['**/foo', '**/bar'] },\n\t\t\t),\n\t\t\t{\n\t\t\t\tfolderQueries: [{\n\t\t\t\t\tfolder: ROOT_1_URI\n\t\t\t\t}],\n\t\t\t\ttype: QueryType.File,\n\t\t\t\tincludePattern: {\n\t\t\t\t\t'**/foo': true,\n\t\t\t\t\t'**/bar': true\n\t\t\t\t}\n\t\t\t});\n\t});\n\n\ttest('includePattern array with expandPatterns', () => {\n\t\tassertEqualQueries(\n\t\t\tqueryBuilder.file(\n\t\t\t\t[ROOT_1_NAMED_FOLDER],\n\t\t\t\t{ includePattern: ['**/foo', '**/bar'], expandPatterns: true },\n\t\t\t),\n\t\t\t{\n\t\t\t\tfolderQueries: [{\n\t\t\t\t\tfolder: ROOT_1_URI\n\t\t\t\t}],\n\t\t\t\ttype: QueryType.File,\n\t\t\t\tincludePattern: {\n\t\t\t\t\t'**/foo': true,\n\t\t\t\t\t'**/foo/**': true,\n\t\t\t\t\t'**/bar': true,\n\t\t\t\t\t'**/bar/**': true,\n\t\t\t\t}\n\t\t\t});\n\t});\n\n\ttest('folderResources', () => {\n\t\tassertEqualTextQueries(\n\t\t\tqueryBuilder.text(\n\t\t\t\tPATTERN_INFO,\n\t\t\t\t[ROOT_1_URI]\n\t\t\t),\n\t\t\t{\n\t\t\t\tcontentPattern: PATTERN_INFO,\n\t\t\t\tfolderQueries: [{ folder: ROOT_1_URI }],\n\t\t\t\ttype: QueryType.Text\n\t\t\t});\n\t});\n\n\ttest('simple exclude setting', () => {\n\t\tmockConfigService.setUserConfiguration('search', {\n\t\t\t...DEFAULT_USER_CONFIG,\n\t\t\texclude: {\n\t\t\t\t'bar/**': true,\n\t\t\t\t'foo/**': {\n\t\t\t\t\t'when': '$(basename).ts'\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tassertEqualTextQueries(\n\t\t\tqueryBuilder.text(\n\t\t\t\tPATTERN_INFO,\n\t\t\t\t[ROOT_1_URI],\n\t\t\t\t{\n\t\t\t\t\texpandPatterns: true // verify that this doesn't affect patterns from configuration\n\t\t\t\t}\n\t\t\t),\n\t\t\t{\n\t\t\t\tcontentPattern: PATTERN_INFO,\n\t\t\t\tfolderQueries: [{\n\t\t\t\t\tfolder: ROOT_1_URI,\n\t\t\t\t\texcludePattern: {\n\t\t\t\t\t\t'bar/**': true,\n\t\t\t\t\t\t'foo/**': {\n\t\t\t\t\t\t\t'when': '$(basename).ts'\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}],\n\t\t\t\ttype: QueryType.Text\n\t\t\t});\n\t});\n\n\ttest('simple include', () => {\n\t\tassertEqualTextQueries(\n\t\t\tqueryBuilder.text(\n\t\t\t\tPATTERN_INFO,\n\t\t\t\t[ROOT_1_URI],\n\t\t\t\t{\n\t\t\t\t\tincludePattern: 'bar',\n\t\t\t\t\texpandPatterns: true\n\t\t\t\t}\n\t\t\t),\n\t\t\t{\n\t\t\t\tcontentPattern: PATTERN_INFO,\n\t\t\t\tfolderQueries: [{\n\t\t\t\t\tfolder: ROOT_1_URI\n\t\t\t\t}],\n\t\t\t\tincludePattern: {\n\t\t\t\t\t'**/bar': true,\n\t\t\t\t\t'**/bar/**': true\n\t\t\t\t},\n\t\t\t\ttype: QueryType.Text\n\t\t\t});\n\n\t\tassertEqualTextQueries(\n\t\t\tqueryBuilder.text(\n\t\t\t\tPATTERN_INFO,\n\t\t\t\t[ROOT_1_URI],\n\t\t\t\t{\n\t\t\t\t\tincludePattern: 'bar'\n\t\t\t\t}\n\t\t\t),\n\t\t\t{\n\t\t\t\tcontentPattern: PATTERN_INFO,\n\t\t\t\tfolderQueries: [{\n\t\t\t\t\tfolder: ROOT_1_URI\n\t\t\t\t}],\n\t\t\t\tincludePattern: {\n\t\t\t\t\t'bar': true\n\t\t\t\t},\n\t\t\t\ttype: QueryType.Text\n\t\t\t});\n\t});\n\n\ttest('simple include with ./ syntax', () => {\n\n\t\tassertEqualTextQueries(\n\t\t\tqueryBuilder.text(\n\t\t\t\tPATTERN_INFO,\n\t\t\t\t[ROOT_1_URI],\n\t\t\t\t{\n\t\t\t\t\tincludePattern: './bar',\n\t\t\t\t\texpandPatterns: true\n\t\t\t\t}\n\t\t\t),\n\t\t\t{\n\t\t\t\tcontentPattern: PATTERN_INFO,\n\t\t\t\tfolderQueries: [{\n\t\t\t\t\tfolder: ROOT_1_URI,\n\t\t\t\t\tincludePattern: {\n\t\t\t\t\t\t'bar': true,\n\t\t\t\t\t\t'bar/**': true\n\t\t\t\t\t}\n\t\t\t\t}],\n\t\t\t\ttype: QueryType.Text\n\t\t\t});\n\n\t\tassertEqualTextQueries(\n\t\t\tqueryBuilder.text(\n\t\t\t\tPATTERN_INFO,\n\t\t\t\t[ROOT_1_URI],\n\t\t\t\t{\n\t\t\t\t\tincludePattern: '.\\\\bar',\n\t\t\t\t\texpandPatterns: true\n\t\t\t\t}\n\t\t\t),\n\t\t\t{\n\t\t\t\tcontentPattern: PATTERN_INFO,\n\t\t\t\tfolderQueries: [{\n\t\t\t\t\tfolder: ROOT_1_URI,\n\t\t\t\t\tincludePattern: {\n\t\t\t\t\t\t'bar': true,\n\t\t\t\t\t\t'bar/**': true\n\t\t\t\t\t}\n\t\t\t\t}],\n\t\t\t\ttype: QueryType.Text\n\t\t\t});\n\t});\n\n\ttest('exclude setting and searchPath', () => {\n\t\tmockConfigService.setUserConfiguration('search', {\n\t\t\t...DEFAULT_USER_CONFIG,\n\t\t\texclude: {\n\t\t\t\t'foo/**/*.js': true,\n\t\t\t\t'bar/**': {\n\t\t\t\t\t'when': '$(basename).ts'\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tassertEqualTextQueries(\n\t\t\tqueryBuilder.text(\n\t\t\t\tPATTERN_INFO,\n\t\t\t\t[ROOT_1_URI],\n\t\t\t\t{\n\t\t\t\t\tincludePattern: './foo',\n\t\t\t\t\texpandPatterns: true\n\t\t\t\t}\n\t\t\t),\n\t\t\t{\n\t\t\t\tcontentPattern: PATTERN_INFO,\n\t\t\t\tfolderQueries: [{\n\t\t\t\t\tfolder: ROOT_1_URI,\n\t\t\t\t\tincludePattern: {\n\t\t\t\t\t\t'foo': true,\n\t\t\t\t\t\t'foo/**': true\n\t\t\t\t\t},\n\t\t\t\t\texcludePattern: {\n\t\t\t\t\t\t'foo/**/*.js': true,\n\t\t\t\t\t\t'bar/**': {\n\t\t\t\t\t\t\t'when': '$(basename).ts'\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}],\n\t\t\t\ttype: QueryType.Text\n\t\t\t});\n\t});\n\n\ttest('multiroot exclude settings', () => {\n\t\tconst ROOT_2 = fixPath('/project/root2');\n\t\tconst ROOT_2_URI = getUri(ROOT_2);\n\t\tconst ROOT_3 = fixPath('/project/root3');\n\t\tconst ROOT_3_URI = getUri(ROOT_3);\n\t\tmockWorkspace.folders = toWorkspaceFolders([{ path: ROOT_1_URI.fsPath }, { path: ROOT_2_URI.fsPath }, { path: ROOT_3_URI.fsPath }], WS_CONFIG_PATH, extUriBiasedIgnorePathCase);\n\t\tmockWorkspace.configuration = uri.file(fixPath('/config'));\n\n\t\tmockConfigService.setUserConfiguration('search', {\n\t\t\t...DEFAULT_USER_CONFIG,\n\t\t\texclude: { 'foo/**/*.js': true }\n\t\t}, ROOT_1_URI);\n\n\t\tmockConfigService.setUserConfiguration('search', {\n\t\t\t...DEFAULT_USER_CONFIG,\n\t\t\texclude: { 'bar': true }\n\t\t}, ROOT_2_URI);\n\n\t\t// There are 3 roots, the first two have search.exclude settings, test that the correct basic query is returned\n\t\tassertEqualTextQueries(\n\t\t\tqueryBuilder.text(\n\t\t\t\tPATTERN_INFO,\n\t\t\t\t[ROOT_1_URI, ROOT_2_URI, ROOT_3_URI]\n\t\t\t),\n\t\t\t{\n\t\t\t\tcontentPattern: PATTERN_INFO,\n\t\t\t\tfolderQueries: [\n\t\t\t\t\t{ folder: ROOT_1_URI, excludePattern: patternsToIExpression('foo/**/*.js') },\n\t\t\t\t\t{ folder: ROOT_2_URI, excludePattern: patternsToIExpression('bar') },\n\t\t\t\t\t{ folder: ROOT_3_URI }\n\t\t\t\t],\n\t\t\t\ttype: QueryType.Text\n\t\t\t}\n\t\t);\n\n\t\t// Now test that it merges the root excludes when an 'include' is used\n\t\tassertEqualTextQueries(\n\t\t\tqueryBuilder.text(\n\t\t\t\tPATTERN_INFO,\n\t\t\t\t[ROOT_1_URI, ROOT_2_URI, ROOT_3_URI],\n\t\t\t\t{\n\t\t\t\t\tincludePattern: './root2/src',\n\t\t\t\t\texpandPatterns: true\n\t\t\t\t}\n\t\t\t),\n\t\t\t{\n\t\t\t\tcontentPattern: PATTERN_INFO,\n\t\t\t\tfolderQueries: [\n\t\t\t\t\t{\n\t\t\t\t\t\tfolder: ROOT_2_URI,\n\t\t\t\t\t\tincludePattern: {\n\t\t\t\t\t\t\t'src': true,\n\t\t\t\t\t\t\t'src/**': true\n\t\t\t\t\t\t},\n\t\t\t\t\t\texcludePattern: {\n\t\t\t\t\t\t\t'bar': true\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\ttype: QueryType.Text\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('simple exclude input pattern', () => {\n\t\tassertEqualTextQueries(\n\t\t\tqueryBuilder.text(\n\t\t\t\tPATTERN_INFO,\n\t\t\t\t[ROOT_1_URI],\n\t\t\t\t{\n\t\t\t\t\texcludePattern: 'foo',\n\t\t\t\t\texpandPatterns: true\n\t\t\t\t}\n\t\t\t),\n\t\t\t{\n\t\t\t\tcontentPattern: PATTERN_INFO,\n\t\t\t\tfolderQueries: [{\n\t\t\t\t\tfolder: ROOT_1_URI\n\t\t\t\t}],\n\t\t\t\ttype: QueryType.Text,\n\t\t\t\texcludePattern: patternsToIExpression(...globalGlob('foo'))\n\t\t\t});\n\t});\n\n\ttest('file pattern trimming', () => {\n\t\tconst content = 'content';\n\t\tassertEqualQueries(\n\t\t\tqueryBuilder.file(\n\t\t\t\t[],\n\t\t\t\t{ filePattern: ` ${content} ` }\n\t\t\t),\n\t\t\t{\n\t\t\t\tfolderQueries: [],\n\t\t\t\tfilePattern: content,\n\t\t\t\ttype: QueryType.File\n\t\t\t});\n\t});\n\n\ttest('exclude ./ syntax', () => {\n\t\tassertEqualTextQueries(\n\t\t\tqueryBuilder.text(\n\t\t\t\tPATTERN_INFO,\n\t\t\t\t[ROOT_1_URI],\n\t\t\t\t{\n\t\t\t\t\texcludePattern: './bar',\n\t\t\t\t\texpandPatterns: true\n\t\t\t\t}\n\t\t\t),\n\t\t\t{\n\t\t\t\tcontentPattern: PATTERN_INFO,\n\t\t\t\tfolderQueries: [{\n\t\t\t\t\tfolder: ROOT_1_URI,\n\t\t\t\t\texcludePattern: patternsToIExpression('bar', 'bar/**'),\n\t\t\t\t}],\n\t\t\t\ttype: QueryType.Text\n\t\t\t});\n\n\t\tassertEqualTextQueries(\n\t\t\tqueryBuilder.text(\n\t\t\t\tPATTERN_INFO,\n\t\t\t\t[ROOT_1_URI],\n\t\t\t\t{\n\t\t\t\t\texcludePattern: './bar/**/*.ts',\n\t\t\t\t\texpandPatterns: true\n\t\t\t\t}\n\t\t\t),\n\t\t\t{\n\t\t\t\tcontentPattern: PATTERN_INFO,\n\t\t\t\tfolderQueries: [{\n\t\t\t\t\tfolder: ROOT_1_URI,\n\t\t\t\t\texcludePattern: patternsToIExpression('bar/**/*.ts', 'bar/**/*.ts/**'),\n\t\t\t\t}],\n\t\t\t\ttype: QueryType.Text\n\t\t\t});\n\n\t\tassertEqualTextQueries(\n\t\t\tqueryBuilder.text(\n\t\t\t\tPATTERN_INFO,\n\t\t\t\t[ROOT_1_URI],\n\t\t\t\t{\n\t\t\t\t\texcludePattern: '.\\\\bar\\\\**\\\\*.ts',\n\t\t\t\t\texpandPatterns: true\n\t\t\t\t}\n\t\t\t),\n\t\t\t{\n\t\t\t\tcontentPattern: PATTERN_INFO,\n\t\t\t\tfolderQueries: [{\n\t\t\t\t\tfolder: ROOT_1_URI,\n\t\t\t\t\texcludePattern: patternsToIExpression('bar/**/*.ts', 'bar/**/*.ts/**'),\n\t\t\t\t}],\n\t\t\t\ttype: QueryType.Text\n\t\t\t});\n\t});\n\n\ttest('extraFileResources', () => {\n\t\tassertEqualTextQueries(\n\t\t\tqueryBuilder.text(\n\t\t\t\tPATTERN_INFO,\n\t\t\t\t[ROOT_1_URI],\n\t\t\t\t{ extraFileResources: [getUri('/foo/bar.js')] }\n\t\t\t),\n\t\t\t{\n\t\t\t\tcontentPattern: PATTERN_INFO,\n\t\t\t\tfolderQueries: [{\n\t\t\t\t\tfolder: ROOT_1_URI\n\t\t\t\t}],\n\t\t\t\textraFileResources: [getUri('/foo/bar.js')],\n\t\t\t\ttype: QueryType.Text\n\t\t\t});\n\n\t\tassertEqualTextQueries(\n\t\t\tqueryBuilder.text(\n\t\t\t\tPATTERN_INFO,\n\t\t\t\t[ROOT_1_URI],\n\t\t\t\t{\n\t\t\t\t\textraFileResources: [getUri('/foo/bar.js')],\n\t\t\t\t\texcludePattern: '*.js',\n\t\t\t\t\texpandPatterns: true\n\t\t\t\t}\n\t\t\t),\n\t\t\t{\n\t\t\t\tcontentPattern: PATTERN_INFO,\n\t\t\t\tfolderQueries: [{\n\t\t\t\t\tfolder: ROOT_1_URI\n\t\t\t\t}],\n\t\t\t\texcludePattern: patternsToIExpression(...globalGlob('*.js')),\n\t\t\t\ttype: QueryType.Text\n\t\t\t});\n\n\t\tassertEqualTextQueries(\n\t\t\tqueryBuilder.text(\n\t\t\t\tPATTERN_INFO,\n\t\t\t\t[ROOT_1_URI],\n\t\t\t\t{\n\t\t\t\t\textraFileResources: [getUri('/foo/bar.js')],\n\t\t\t\t\tincludePattern: '*.txt',\n\t\t\t\t\texpandPatterns: true\n\t\t\t\t}\n\t\t\t),\n\t\t\t{\n\t\t\t\tcontentPattern: PATTERN_INFO,\n\t\t\t\tfolderQueries: [{\n\t\t\t\t\tfolder: ROOT_1_URI\n\t\t\t\t}],\n\t\t\t\tincludePattern: patternsToIExpression(...globalGlob('*.txt')),\n\t\t\t\ttype: QueryType.Text\n\t\t\t});\n\t});\n\n\tsuite('parseSearchPaths', () => {\n\t\ttest('simple includes', () => {\n\t\t\tfunction testSimpleIncludes(includePattern: string, expectedPatterns: string[]): void {\n\t\t\t\tassert.deepStrictEqual(\n\t\t\t\t\tqueryBuilder.parseSearchPaths(includePattern),\n\t\t\t\t\t{\n\t\t\t\t\t\tpattern: patternsToIExpression(...expectedPatterns)\n\t\t\t\t\t},\n\t\t\t\t\tincludePattern);\n\t\t\t}\n\n\t\t\t[\n\t\t\t\t['a', ['**/a/**', '**/a']],\n\t\t\t\t['a/b', ['**/a/b', '**/a/b/**']],\n\t\t\t\t['a/b,  c', ['**/a/b', '**/c', '**/a/b/**', '**/c/**']],\n\t\t\t\t['a,.txt', ['**/a', '**/a/**', '**/*.txt', '**/*.txt/**']],\n\t\t\t\t['a,,,b', ['**/a', '**/a/**', '**/b', '**/b/**']],\n\t\t\t\t['**/a,b/**', ['**/a', '**/a/**', '**/b/**']]\n\t\t\t].forEach(([includePattern, expectedPatterns]) => testSimpleIncludes(<string>includePattern, <string[]>expectedPatterns));\n\t\t});\n\n\t\tfunction testIncludes(includePattern: string, expectedResult: ISearchPathsInfo): void {\n\t\t\tassertEqualSearchPathResults(\n\t\t\t\tqueryBuilder.parseSearchPaths(includePattern),\n\t\t\t\texpectedResult,\n\t\t\t\tincludePattern);\n\t\t}\n\n\t\tfunction testIncludesDataItem([includePattern, expectedResult]: [string, ISearchPathsInfo]): void {\n\t\t\ttestIncludes(includePattern, expectedResult);\n\t\t}\n\n\t\ttest('absolute includes', () => {\n\t\t\tconst cases: [string, ISearchPathsInfo][] = [\n\t\t\t\t[\n\t\t\t\t\tfixPath('/foo/bar'),\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [{ searchPath: getUri('/foo/bar') }]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tfixPath('/foo/bar') + ',' + 'a',\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [{ searchPath: getUri('/foo/bar') }],\n\t\t\t\t\t\tpattern: patternsToIExpression(...globalGlob('a'))\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tfixPath('/foo/bar') + ',' + fixPath('/1/2'),\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [{ searchPath: getUri('/foo/bar') }, { searchPath: getUri('/1/2') }]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tfixPath('/foo/bar') + ',' + fixPath('/foo/../foo/bar/fooar/..'),\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [{\n\t\t\t\t\t\t\tsearchPath: getUri('/foo/bar')\n\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tfixPath('/foo/bar/**/*.ts'),\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [{\n\t\t\t\t\t\t\tsearchPath: getUri('/foo/bar'),\n\t\t\t\t\t\t\tpattern: patternsToIExpression('**/*.ts', '**/*.ts/**')\n\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tfixPath('/foo/bar/*a/b/c'),\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [{\n\t\t\t\t\t\t\tsearchPath: getUri('/foo/bar'),\n\t\t\t\t\t\t\tpattern: patternsToIExpression('*a/b/c', '*a/b/c/**')\n\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tfixPath('/*a/b/c'),\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [{\n\t\t\t\t\t\t\tsearchPath: getUri('/'),\n\t\t\t\t\t\t\tpattern: patternsToIExpression('*a/b/c', '*a/b/c/**')\n\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tfixPath('/foo/{b,c}ar'),\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [{\n\t\t\t\t\t\t\tsearchPath: getUri('/foo'),\n\t\t\t\t\t\t\tpattern: patternsToIExpression('{b,c}ar', '{b,c}ar/**')\n\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t];\n\t\t\tcases.forEach(testIncludesDataItem);\n\t\t});\n\n\t\ttest('relative includes w/single root folder', () => {\n\t\t\tconst cases: [string, ISearchPathsInfo][] = [\n\t\t\t\t[\n\t\t\t\t\t'./a',\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [{\n\t\t\t\t\t\t\tsearchPath: ROOT_1_URI,\n\t\t\t\t\t\t\tpattern: patternsToIExpression('a', 'a/**')\n\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'./a/',\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [{\n\t\t\t\t\t\t\tsearchPath: ROOT_1_URI,\n\t\t\t\t\t\t\tpattern: patternsToIExpression('a', 'a/**')\n\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'./a/*b/c',\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [{\n\t\t\t\t\t\t\tsearchPath: ROOT_1_URI,\n\t\t\t\t\t\t\tpattern: patternsToIExpression('a/*b/c', 'a/*b/c/**')\n\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'./a/*b/c, ' + fixPath('/project/foo'),\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsearchPath: ROOT_1_URI,\n\t\t\t\t\t\t\t\tpattern: patternsToIExpression('a/*b/c', 'a/*b/c/**')\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsearchPath: getUri('/project/foo')\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'./a/b/,./c/d',\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [{\n\t\t\t\t\t\t\tsearchPath: ROOT_1_URI,\n\t\t\t\t\t\t\tpattern: patternsToIExpression('a/b', 'a/b/**', 'c/d', 'c/d/**')\n\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'../',\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [{\n\t\t\t\t\t\t\tsearchPath: getUri('/foo')\n\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'..',\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [{\n\t\t\t\t\t\t\tsearchPath: getUri('/foo')\n\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'..\\\\bar',\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [{\n\t\t\t\t\t\t\tsearchPath: getUri('/foo/bar')\n\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t];\n\t\t\tcases.forEach(testIncludesDataItem);\n\t\t});\n\n\t\ttest('relative includes w/two root folders', () => {\n\t\t\tconst ROOT_2 = '/project/root2';\n\t\t\tmockWorkspace.folders = toWorkspaceFolders([{ path: ROOT_1_URI.fsPath }, { path: getUri(ROOT_2).fsPath }], WS_CONFIG_PATH, extUriBiasedIgnorePathCase);\n\t\t\tmockWorkspace.configuration = uri.file(fixPath('config'));\n\n\t\t\tconst cases: [string, ISearchPathsInfo][] = [\n\t\t\t\t[\n\t\t\t\t\t'./root1',\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [{\n\t\t\t\t\t\t\tsearchPath: getUri(ROOT_1)\n\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'./root2',\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [{\n\t\t\t\t\t\t\tsearchPath: getUri(ROOT_2),\n\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'./root1/a/**/b, ./root2/**/*.txt',\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsearchPath: ROOT_1_URI,\n\t\t\t\t\t\t\t\tpattern: patternsToIExpression('a/**/b', 'a/**/b/**')\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsearchPath: getUri(ROOT_2),\n\t\t\t\t\t\t\t\tpattern: patternsToIExpression('**/*.txt', '**/*.txt/**')\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t];\n\t\t\tcases.forEach(testIncludesDataItem);\n\t\t});\n\n\t\ttest('include ./foldername', () => {\n\t\t\tconst ROOT_2 = '/project/root2';\n\t\t\tconst ROOT_1_FOLDERNAME = 'foldername';\n\t\t\tmockWorkspace.folders = toWorkspaceFolders([{ path: ROOT_1_URI.fsPath, name: ROOT_1_FOLDERNAME }, { path: getUri(ROOT_2).fsPath }], WS_CONFIG_PATH, extUriBiasedIgnorePathCase);\n\t\t\tmockWorkspace.configuration = uri.file(fixPath('config'));\n\n\t\t\tconst cases: [string, ISearchPathsInfo][] = [\n\t\t\t\t[\n\t\t\t\t\t'./foldername',\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [{\n\t\t\t\t\t\t\tsearchPath: ROOT_1_URI\n\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'./foldername/foo',\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [{\n\t\t\t\t\t\t\tsearchPath: ROOT_1_URI,\n\t\t\t\t\t\t\tpattern: patternsToIExpression('foo', 'foo/**')\n\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t];\n\t\t\tcases.forEach(testIncludesDataItem);\n\t\t});\n\n\t\ttest('relative includes w/multiple ambiguous root folders', () => {\n\t\t\tconst ROOT_2 = '/project/rootB';\n\t\t\tconst ROOT_3 = '/otherproject/rootB';\n\t\t\tmockWorkspace.folders = toWorkspaceFolders([{ path: ROOT_1_URI.fsPath }, { path: getUri(ROOT_2).fsPath }, { path: getUri(ROOT_3).fsPath }], WS_CONFIG_PATH, extUriBiasedIgnorePathCase);\n\t\t\tmockWorkspace.configuration = uri.file(fixPath('/config'));\n\n\t\t\tconst cases: [string, ISearchPathsInfo][] = [\n\t\t\t\t[\n\t\t\t\t\t'',\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: undefined\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'./',\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: undefined\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'./root1',\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [{\n\t\t\t\t\t\t\tsearchPath: getUri(ROOT_1)\n\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'./root1,./',\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [{\n\t\t\t\t\t\t\tsearchPath: getUri(ROOT_1)\n\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'./rootB',\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsearchPath: getUri(ROOT_2),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsearchPath: getUri(ROOT_3),\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'./rootB/a/**/b, ./rootB/b/**/*.txt',\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsearchPath: getUri(ROOT_2),\n\t\t\t\t\t\t\t\tpattern: patternsToIExpression('a/**/b', 'a/**/b/**', 'b/**/*.txt', 'b/**/*.txt/**')\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsearchPath: getUri(ROOT_3),\n\t\t\t\t\t\t\t\tpattern: patternsToIExpression('a/**/b', 'a/**/b/**', 'b/**/*.txt', 'b/**/*.txt/**')\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'./root1/**/foo/, bar/',\n\t\t\t\t\t{\n\t\t\t\t\t\tpattern: patternsToIExpression('**/bar', '**/bar/**'),\n\t\t\t\t\t\tsearchPaths: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsearchPath: ROOT_1_URI,\n\t\t\t\t\t\t\t\tpattern: patternsToIExpression('**/foo', '**/foo/**')\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t];\n\t\t\tcases.forEach(testIncludesDataItem);\n\t\t});\n\t});\n\n\tsuite('smartCase', () => {\n\t\ttest('no flags -> no change', () => {\n\t\t\tconst query = queryBuilder.text(\n\t\t\t\t{\n\t\t\t\t\tpattern: 'a'\n\t\t\t\t},\n\t\t\t\t[]);\n\n\t\t\tassert(!query.contentPattern.isCaseSensitive);\n\t\t});\n\n\t\ttest('maintains isCaseSensitive when smartCase not set', () => {\n\t\t\tconst query = queryBuilder.text(\n\t\t\t\t{\n\t\t\t\t\tpattern: 'a',\n\t\t\t\t\tisCaseSensitive: true\n\t\t\t\t},\n\t\t\t\t[]);\n\n\t\t\tassert(query.contentPattern.isCaseSensitive);\n\t\t});\n\n\t\ttest('maintains isCaseSensitive when smartCase set', () => {\n\t\t\tconst query = queryBuilder.text(\n\t\t\t\t{\n\t\t\t\t\tpattern: 'a',\n\t\t\t\t\tisCaseSensitive: true\n\t\t\t\t},\n\t\t\t\t[],\n\t\t\t\t{\n\t\t\t\t\tisSmartCase: true\n\t\t\t\t});\n\n\t\t\tassert(query.contentPattern.isCaseSensitive);\n\t\t});\n\n\t\ttest('smartCase determines not case sensitive', () => {\n\t\t\tconst query = queryBuilder.text(\n\t\t\t\t{\n\t\t\t\t\tpattern: 'abcd'\n\t\t\t\t},\n\t\t\t\t[],\n\t\t\t\t{\n\t\t\t\t\tisSmartCase: true\n\t\t\t\t});\n\n\t\t\tassert(!query.contentPattern.isCaseSensitive);\n\t\t});\n\n\t\ttest('smartCase determines case sensitive', () => {\n\t\t\tconst query = queryBuilder.text(\n\t\t\t\t{\n\t\t\t\t\tpattern: 'abCd'\n\t\t\t\t},\n\t\t\t\t[],\n\t\t\t\t{\n\t\t\t\t\tisSmartCase: true\n\t\t\t\t});\n\n\t\t\tassert(query.contentPattern.isCaseSensitive);\n\t\t});\n\n\t\ttest('smartCase determines not case sensitive (regex)', () => {\n\t\t\tconst query = queryBuilder.text(\n\t\t\t\t{\n\t\t\t\t\tpattern: 'ab\\\\Sd',\n\t\t\t\t\tisRegExp: true\n\t\t\t\t},\n\t\t\t\t[],\n\t\t\t\t{\n\t\t\t\t\tisSmartCase: true\n\t\t\t\t});\n\n\t\t\tassert(!query.contentPattern.isCaseSensitive);\n\t\t});\n\n\t\ttest('smartCase determines case sensitive (regex)', () => {\n\t\t\tconst query = queryBuilder.text(\n\t\t\t\t{\n\t\t\t\t\tpattern: 'ab[A-Z]d',\n\t\t\t\t\tisRegExp: true\n\t\t\t\t},\n\t\t\t\t[],\n\t\t\t\t{\n\t\t\t\t\tisSmartCase: true\n\t\t\t\t});\n\n\t\t\tassert(query.contentPattern.isCaseSensitive);\n\t\t});\n\t});\n\n\tsuite('file', () => {\n\t\ttest('simple file query', () => {\n\t\t\tconst cacheKey = 'asdf';\n\t\t\tconst query = queryBuilder.file(\n\t\t\t\t[ROOT_1_NAMED_FOLDER],\n\t\t\t\t{\n\t\t\t\t\tcacheKey,\n\t\t\t\t\tsortByScore: true\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tassert.strictEqual(query.folderQueries.length, 1);\n\t\t\tassert.strictEqual(query.cacheKey, cacheKey);\n\t\t\tassert(query.sortByScore);\n\t\t});\n\t});\n});\n\nfunction assertEqualTextQueries(actual: ITextQuery, expected: ITextQuery): void {\n\texpected = {\n\t\t...DEFAULT_TEXT_QUERY_PROPS,\n\t\t...expected\n\t};\n\n\treturn assertEqualQueries(actual, expected);\n}\n\nexport function assertEqualQueries(actual: ITextQuery | IFileQuery, expected: ITextQuery | IFileQuery): void {\n\texpected = {\n\t\t...DEFAULT_QUERY_PROPS,\n\t\t...expected\n\t};\n\n\tconst folderQueryToCompareObject = (fq: IFolderQuery) => {\n\t\treturn {\n\t\t\tpath: fq.folder.fsPath,\n\t\t\texcludePattern: normalizeExpression(fq.excludePattern),\n\t\t\tincludePattern: normalizeExpression(fq.includePattern),\n\t\t\tfileEncoding: fq.fileEncoding\n\t\t};\n\t};\n\n\t// Avoid comparing URI objects, not a good idea\n\tif (expected.folderQueries) {\n\t\tassert.deepStrictEqual(actual.folderQueries.map(folderQueryToCompareObject), expected.folderQueries.map(folderQueryToCompareObject));\n\t\tactual.folderQueries = [];\n\t\texpected.folderQueries = [];\n\t}\n\n\tif (expected.extraFileResources) {\n\t\tassert.deepStrictEqual(actual.extraFileResources!.map(extraFile => extraFile.fsPath), expected.extraFileResources.map(extraFile => extraFile.fsPath));\n\t\tdelete expected.extraFileResources;\n\t\tdelete actual.extraFileResources;\n\t}\n\n\tdelete actual.usingSearchPaths;\n\tactual.includePattern = normalizeExpression(actual.includePattern);\n\tactual.excludePattern = normalizeExpression(actual.excludePattern);\n\tcleanUndefinedQueryValues(actual);\n\n\tassert.deepEqual(actual, expected);\n}\n\nexport function assertEqualSearchPathResults(actual: ISearchPathsInfo, expected: ISearchPathsInfo, message?: string): void {\n\tcleanUndefinedQueryValues(actual);\n\tassert.deepStrictEqual(actual.pattern, expected.pattern, message);\n\n\tassert.strictEqual(actual.searchPaths && actual.searchPaths.length, expected.searchPaths && expected.searchPaths.length);\n\tif (actual.searchPaths) {\n\t\tactual.searchPaths.forEach((searchPath, i) => {\n\t\t\tconst expectedSearchPath = expected.searchPaths![i];\n\t\t\tassert.deepStrictEqual(searchPath.pattern, expectedSearchPath.pattern);\n\t\t\tassert.strictEqual(searchPath.searchPath.toString(), expectedSearchPath.searchPath.toString());\n\t\t});\n\t}\n}\n\n/**\n * Recursively delete all undefined property values from the search query, to make it easier to\n * assert.deepStrictEqual with some expected object.\n */\nexport function cleanUndefinedQueryValues(q: any): void {\n\tfor (const key in q) {\n\t\tif (q[key] === undefined) {\n\t\t\tdelete q[key];\n\t\t} else if (typeof q[key] === 'object') {\n\t\t\tcleanUndefinedQueryValues(q[key]);\n\t\t}\n\t}\n\n\treturn q;\n}\n\nexport function globalGlob(pattern: string): string[] {\n\treturn [\n\t\t`**/${pattern}/**`,\n\t\t`**/${pattern}`\n\t];\n}\n\nexport function patternsToIExpression(...patterns: string[]): IExpression {\n\treturn patterns.length ?\n\t\tpatterns.reduce((glob, cur) => { glob[cur] = true; return glob; }, Object.create(null)) :\n\t\tundefined;\n}\n\nexport function getUri(...slashPathParts: string[]): uri {\n\treturn uri.file(fixPath(...slashPathParts));\n}\n\nexport function fixPath(...slashPathParts: string[]): string {\n\tif (isWindows && slashPathParts.length && !slashPathParts[0].match(/^c:/i)) {\n\t\tslashPathParts.unshift('c:');\n\t}\n\n\treturn join(...slashPathParts);\n}\n\nexport function normalizeExpression(expression: IExpression | undefined): IExpression | undefined {\n\tif (!expression) {\n\t\treturn expression;\n\t}\n\n\tconst normalized = Object.create(null);\n\tObject.keys(expression).forEach(key => {\n\t\tnormalized[key.replace(/\\\\/g, '/')] = expression[key];\n\t});\n\n\treturn normalized;\n}\n"]}