{"version":3,"file":"queryBuilder.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/search/test/electron-browser/queryBuilder.test.ts"],"names":[],"mappings":";;;IAgBA,MAAM,qBAAqB,GAAG,EAAE,CAAC;IACjC,MAAM,mBAAmB,GAAG,EAAE,UAAU,EAAE,IAAI,EAAE,cAAc,EAAE,IAAI,EAAE,oBAAoB,EAAE,IAAI,EAAE,CAAC;IAEnG,KAAK,CAAC,cAAc,EAAE,GAAG,EAAE;QAC1B,MAAM,MAAM,GAAG,CAAA,GAAA,2BAAO,CAAA,CAAC,YAAY,CAAC,CAAC;QACrC,MAAM,UAAU,GAAG,CAAA,GAAA,0BAAM,CAAA,CAAC,MAAM,CAAC,CAAC;QAElC,IAAI,oBAA8C,CAAC;QACnD,IAAI,YAA0B,CAAC;QAC/B,IAAI,iBAA2C,CAAC;QAChD,IAAI,kBAAsC,CAAC;QAC3C,IAAI,aAAwB,CAAC;QAE7B,KAAK,CAAC,KAAK,IAAI,EAAE;YAChB,oBAAoB,GAAG,IAAI,mDAAwB,EAAE,CAAC;YAEtD,iBAAiB,GAAG,IAAI,mDAAwB,EAAE,CAAC;YACnD,iBAAiB,CAAC,oBAAoB,CAAC,QAAQ,EAAE,mBAAmB,CAAC,CAAC;YACtE,iBAAiB,CAAC,oBAAoB,CAAC,QAAQ,EAAE,qBAAqB,CAAC,CAAC;YACxE,oBAAoB,CAAC,IAAI,CAAC,qCAAqB,EAAE,iBAAiB,CAAC,CAAC;YAEpE,kBAAkB,GAAG,IAAI,0CAAkB,EAAE,CAAC;YAC9C,aAAa,GAAG,IAAI,yBAAS,CAAC,WAAW,EAAE,CAAC,CAAA,GAAA,6BAAiB,CAAA,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YAC5E,kBAAkB,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;YAE/C,oBAAoB,CAAC,IAAI,CAAC,oCAAwB,EAAE,kBAAkB,CAAC,CAAC;YACxE,oBAAoB,CAAC,IAAI,CAAC,iCAAmB,EAAE,8CAAsB,CAAC,CAAC;YACvE,oBAAoB,CAAC,IAAI,CAAC,0BAAY,EAAE,IAAI,6CAAqB,EAAE,CAAC,CAAC;YAErE,YAAY,GAAG,oBAAoB,CAAC,cAAc,CAAC,2BAAY,CAAC,CAAC;YACjE,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,4CAA4C;QACnG,CAAC,CAAC,CAAC;QAEH,KAAK,CAAC,kBAAkB,EAAE,GAAG,EAAE;YAE9B,SAAS,YAAY,CAAC,cAAsB,EAAE,cAAgC;gBAC7E,CAAA,GAAA,gDAA4B,CAAA,CAC3B,YAAY,CAAC,gBAAgB,CAAC,cAAc,CAAC,EAC7C,cAAc,EACd,cAAc,CAAC,CAAC;YAClB,CAAC;YAED,SAAS,oBAAoB,CAAC,CAAC,cAAc,EAAE,cAAc,CAA6B;gBACzF,YAAY,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC;YAC9C,CAAC;YAED,IAAI,CAAC,qBAAqB,EAAE,GAAG,EAAE;gBAChC,MAAM,QAAQ,GAAG,8CAAsB,CAAC,QAAQ,CAAC;gBACjD,MAAM,KAAK,GAAiC;oBAC3C;wBACC,WAAW;wBACX;4BACC,WAAW,EAAE,CAAC,EAAE,UAAU,EAAE,CAAA,GAAA,0BAAM,CAAA,CAAC,QAAQ,CAAC,MAAM,EAAE,UAAU,CAAC,EAAE,CAAC;yBAClE;qBACD;oBACD;wBACC,cAAc;wBACd;4BACC,WAAW,EAAE,CAAC,EAAE,UAAU,EAAE,CAAA,GAAA,0BAAM,CAAA,CAAC,QAAQ,CAAC,MAAM,EAAE,UAAU,CAAC,EAAE,CAAC;4BAClE,OAAO,EAAE,CAAA,GAAA,yCAAqB,CAAA,CAAC,GAAG,CAAA,GAAA,8BAAU,CAAA,CAAC,GAAG,CAAC,CAAC;yBAClD;qBACD;oBACD;wBACC,CAAA,GAAA,2BAAO,CAAA,CAAC,YAAY,CAAC;wBACrB;4BACC,WAAW,EAAE,CAAC,EAAE,UAAU,EAAE,CAAA,GAAA,0BAAM,CAAA,CAAC,YAAY,CAAC,EAAE,CAAC;yBACnD;qBACD;iBACD,CAAC;gBACF,KAAK,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;YACrC,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { TestConfigurationService } from 'vs/platform/configuration/test/common/testConfigurationService';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { TestInstantiationService } from 'vs/platform/instantiation/test/common/instantiationServiceMock';\nimport { IWorkspaceContextService, toWorkspaceFolder } from 'vs/platform/workspace/common/workspace';\nimport { ISearchPathsInfo, QueryBuilder } from 'vs/workbench/contrib/search/common/queryBuilder';\nimport { TestEnvironmentService, TestNativePathService } from 'vs/workbench/test/electron-browser/workbenchTestServices';\nimport { assertEqualSearchPathResults, getUri, patternsToIExpression, globalGlob, fixPath } from 'vs/workbench/contrib/search/test/browser/queryBuilder.test';\nimport { TestContextService } from 'vs/workbench/test/common/workbenchTestServices';\nimport { IPathService } from 'vs/workbench/services/path/common/pathService';\nimport { Workspace } from 'vs/platform/workspace/test/common/testWorkspace';\n\nconst DEFAULT_EDITOR_CONFIG = {};\nconst DEFAULT_USER_CONFIG = { useRipgrep: true, useIgnoreFiles: true, useGlobalIgnoreFiles: true };\n\nsuite('QueryBuilder', () => {\n\tconst ROOT_1 = fixPath('/foo/root1');\n\tconst ROOT_1_URI = getUri(ROOT_1);\n\n\tlet instantiationService: TestInstantiationService;\n\tlet queryBuilder: QueryBuilder;\n\tlet mockConfigService: TestConfigurationService;\n\tlet mockContextService: TestContextService;\n\tlet mockWorkspace: Workspace;\n\n\tsetup(async () => {\n\t\tinstantiationService = new TestInstantiationService();\n\n\t\tmockConfigService = new TestConfigurationService();\n\t\tmockConfigService.setUserConfiguration('search', DEFAULT_USER_CONFIG);\n\t\tmockConfigService.setUserConfiguration('editor', DEFAULT_EDITOR_CONFIG);\n\t\tinstantiationService.stub(IConfigurationService, mockConfigService);\n\n\t\tmockContextService = new TestContextService();\n\t\tmockWorkspace = new Workspace('workspace', [toWorkspaceFolder(ROOT_1_URI)]);\n\t\tmockContextService.setWorkspace(mockWorkspace);\n\n\t\tinstantiationService.stub(IWorkspaceContextService, mockContextService);\n\t\tinstantiationService.stub(IEnvironmentService, TestEnvironmentService);\n\t\tinstantiationService.stub(IPathService, new TestNativePathService());\n\n\t\tqueryBuilder = instantiationService.createInstance(QueryBuilder);\n\t\tawait new Promise(resolve => setTimeout(resolve, 5)); // Wait for IPathService.userHome to resolve\n\t});\n\n\tsuite('parseSearchPaths', () => {\n\n\t\tfunction testIncludes(includePattern: string, expectedResult: ISearchPathsInfo): void {\n\t\t\tassertEqualSearchPathResults(\n\t\t\t\tqueryBuilder.parseSearchPaths(includePattern),\n\t\t\t\texpectedResult,\n\t\t\t\tincludePattern);\n\t\t}\n\n\t\tfunction testIncludesDataItem([includePattern, expectedResult]: [string, ISearchPathsInfo]): void {\n\t\t\ttestIncludes(includePattern, expectedResult);\n\t\t}\n\n\t\ttest('includes with tilde', () => {\n\t\t\tconst userHome = TestEnvironmentService.userHome;\n\t\t\tconst cases: [string, ISearchPathsInfo][] = [\n\t\t\t\t[\n\t\t\t\t\t'~/foo/bar',\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [{ searchPath: getUri(userHome.fsPath, '/foo/bar') }]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'~/foo/bar, a',\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [{ searchPath: getUri(userHome.fsPath, '/foo/bar') }],\n\t\t\t\t\t\tpattern: patternsToIExpression(...globalGlob('a'))\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tfixPath('/foo/~/bar'),\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [{ searchPath: getUri('/foo/~/bar') }]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t];\n\t\t\tcases.forEach(testIncludesDataItem);\n\t\t});\n\t});\n});\n"]}