{"version":3,"sources":["vs/workbench/contrib/logs/common/logs.contribution.ts"],"names":[],"mappings":"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","file":"logs.contribution.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { join } from 'vs/base/common/path';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IWorkbenchActionRegistry, Extensions as WorkbenchActionExtensions, CATEGORIES } from 'vs/workbench/common/actions';\nimport { Action2, registerAction2, SyncActionDescriptor } from 'vs/platform/actions/common/actions';\nimport { SetLogLevelAction, OpenWindowSessionLogFileAction } from 'vs/workbench/contrib/logs/common/logsActions';\nimport * as Constants from 'vs/workbench/contrib/logs/common/logConstants';\nimport { IWorkbenchContribution, IWorkbenchContributionsRegistry, Extensions as WorkbenchExtensions } from 'vs/workbench/common/contributions';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { IFileService, FileChangeType, whenProviderRegistered } from 'vs/platform/files/common/files';\nimport { URI } from 'vs/base/common/uri';\nimport { IOutputChannelRegistry, Extensions as OutputExt } from 'vs/workbench/services/output/common/output';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { ILogService, LogLevel } from 'vs/platform/log/common/log';\nimport { dirname } from 'vs/base/common/resources';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { isWeb } from 'vs/base/common/platform';\nimport { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { LogsDataCleaner } from 'vs/workbench/contrib/logs/common/logsDataCleaner';\nimport { IOutputService } from 'vs/workbench/contrib/output/common/output';\n\nconst workbenchActionsRegistry = Registry.as<IWorkbenchActionRegistry>(WorkbenchActionExtensions.WorkbenchActions);\nworkbenchActionsRegistry.registerWorkbenchAction(SyncActionDescriptor.from(SetLogLevelAction), 'Developer: Set Log Level...', CATEGORIES.Developer.value);\n\nclass LogOutputChannels extends Disposable implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\t\tthis.registerCommonContributions();\n\t\tif (isWeb) {\n\t\t\tthis.registerWebContributions();\n\t\t} else {\n\t\t\tthis.registerNativeContributions();\n\t\t}\n\t}\n\n\tprivate registerCommonContributions(): void {\n\t\tthis.registerLogChannel(Constants.userDataSyncLogChannelId, nls.localize('userDataSyncLog', \"Settings Sync\"), this.environmentService.userDataSyncLogResource);\n\t\tthis.registerLogChannel(Constants.rendererLogChannelId, nls.localize('rendererLog', \"Window\"), this.environmentService.logFile);\n\n\t\tconst registerTelemetryChannel = (level: LogLevel) => {\n\t\t\tif (level === LogLevel.Trace && !Registry.as<IOutputChannelRegistry>(OutputExt.OutputChannels).getChannel(Constants.telemetryLogChannelId)) {\n\t\t\t\tthis.registerLogChannel(Constants.telemetryLogChannelId, nls.localize('telemetryLog', \"Telemetry\"), this.environmentService.telemetryLogResource);\n\t\t\t}\n\t\t};\n\t\tregisterTelemetryChannel(this.logService.getLevel());\n\t\tthis.logService.onDidChangeLogLevel(registerTelemetryChannel);\n\n\t\tregisterAction2(class ShowWindowLogAction extends Action2 {\n\t\t\tconstructor() {\n\t\t\t\tsuper({\n\t\t\t\t\tid: Constants.showWindowLogActionId,\n\t\t\t\t\ttitle: { value: nls.localize('show window log', \"Show Window Log\"), original: 'Show Window Log' },\n\t\t\t\t\tcategory: CATEGORIES.Developer,\n\t\t\t\t\tf1: true\n\t\t\t\t});\n\t\t\t}\n\t\t\tasync run(servicesAccessor: ServicesAccessor): Promise<void> {\n\t\t\t\tconst outputService = servicesAccessor.get(IOutputService);\n\t\t\t\toutputService.showChannel(Constants.rendererLogChannelId);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate registerWebContributions(): void {\n\t\tthis.instantiationService.createInstance(LogsDataCleaner);\n\n\t\tconst workbenchActionsRegistry = Registry.as<IWorkbenchActionRegistry>(WorkbenchActionExtensions.WorkbenchActions);\n\t\tworkbenchActionsRegistry.registerWorkbenchAction(SyncActionDescriptor.from(OpenWindowSessionLogFileAction), 'Developer: Open Window Log File (Session)...', CATEGORIES.Developer.value);\n\t}\n\n\tprivate registerNativeContributions(): void {\n\t\tthis.registerLogChannel(Constants.mainLogChannelId, nls.localize('mainLog', \"Main\"), URI.file(join(this.environmentService.logsPath, `main.log`)));\n\t\tthis.registerLogChannel(Constants.sharedLogChannelId, nls.localize('sharedLog', \"Shared\"), URI.file(join(this.environmentService.logsPath, `sharedprocess.log`)));\n\t}\n\n\tprivate async registerLogChannel(id: string, label: string, file: URI): Promise<void> {\n\t\tawait whenProviderRegistered(file, this.fileService);\n\t\tconst outputChannelRegistry = Registry.as<IOutputChannelRegistry>(OutputExt.OutputChannels);\n\n\t\t/* watch first and then check if file exists so that to avoid missing file creation event after watching #102117 */\n\t\tconst watcher = this.fileService.watch(dirname(file));\n\t\tconst exists = await this.fileService.exists(file);\n\t\tif (exists) {\n\t\t\twatcher.dispose();\n\t\t\toutputChannelRegistry.registerChannel({ id, label, file, log: true });\n\t\t\treturn;\n\t\t}\n\n\t\tconst disposable = this.fileService.onDidFilesChange(e => {\n\t\t\tif (e.contains(file, FileChangeType.ADDED, FileChangeType.UPDATED)) {\n\t\t\t\twatcher.dispose();\n\t\t\t\tdisposable.dispose();\n\t\t\t\toutputChannelRegistry.registerChannel({ id, label, file, log: true });\n\t\t\t}\n\t\t});\n\t}\n\n}\n\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(LogOutputChannels, LifecyclePhase.Restored);\n"]}