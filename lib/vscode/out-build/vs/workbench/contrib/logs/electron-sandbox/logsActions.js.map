{"version":3,"sources":["vs/workbench/contrib/logs/electron-sandbox/logsActions.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAUhG,IAAa,oBAAoB,GAAjC,MAAa,oBAAqB,SAAQ,gBAAM;QAK/C,YAAY,EAAU,EAAE,KAAa,EACiB,kBAAsD,EACtE,iBAAqC;YAE1E,KAAK,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;YAHoC,uBAAkB,GAAlB,kBAAkB,CAAoC;YACtE,sBAAiB,GAAjB,iBAAiB,CAAoB;QAG3E,CAAC;QAEQ,GAAG;YACX,OAAO,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,SAAG,CAAC,IAAI,CAAC,CAAA,GAAA,WAAI,CAAA,CAAC,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;QACrH,CAAC;KACD,CAAA;IAbgB,uBAAE,GAAG,iCAAiC,CAAC;IACvC,0BAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,CAAgB,EAAE,IAAkB,CAAC,CAAC;IAH/D,oBAAoB;QAM9B,WAAA,uDAAkC,CAAA;QAClC,WAAA,2BAAkB,CAAA;OAPR,oBAAoB,CAehC;IAfY,oDAAoB;IAiBjC,IAAa,6BAA6B,GAA1C,MAAa,6BAA8B,SAAQ,gBAAM;QAKxD,YAAY,EAAU,EAAE,KAAa,EACiB,iBAAqD,EAC3E,WAAyB,EACnB,iBAAqC;YAE1E,KAAK,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;YAJoC,sBAAiB,GAAjB,iBAAiB,CAAoC;YAC3E,gBAAW,GAAX,WAAW,CAAc;YACnB,sBAAiB,GAAjB,iBAAiB,CAAoB;QAG3E,CAAC;QAEQ,KAAK,CAAC,GAAG;YACjB,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC,CAAC;YAC1F,IAAI,UAAU,CAAC,QAAQ,IAAI,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE;gBAClD,OAAO,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;aACvF;QACF,CAAC;KACD,CAAA;IAjBgB,gCAAE,GAAG,0CAA0C,CAAC;IAChD,mCAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,CAAyB,EAAE,IAA4B,CAAC,CAAC;IAHlF,6BAA6B;QAMvC,WAAA,uDAAkC,CAAA;QAClC,WAAA,oBAAY,CAAA;QACZ,WAAA,2BAAkB,CAAA;OARR,6BAA6B,CAmBzC;IAnBY,sEAA6B","file":"logsActions.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Action } from 'vs/base/common/actions';\nimport { join } from 'vs/base/common/path';\nimport { URI } from 'vs/base/common/uri';\nimport * as nls from 'vs/nls';\nimport { INativeHostService } from 'vs/platform/native/electron-sandbox/native';\nimport { INativeWorkbenchEnvironmentService } from 'vs/workbench/services/environment/electron-sandbox/environmentService';\nimport { IFileService } from 'vs/platform/files/common/files';\n\nexport class OpenLogsFolderAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.openLogsFolder';\n\tstatic readonly LABEL = nls.localize('openLogsFolder', \"Open Logs Folder\");\n\n\tconstructor(id: string, label: string,\n\t\t@INativeWorkbenchEnvironmentService private readonly environmentService: INativeWorkbenchEnvironmentService,\n\t\t@INativeHostService private readonly nativeHostService: INativeHostService,\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\toverride run(): Promise<void> {\n\t\treturn this.nativeHostService.showItemInFolder(URI.file(join(this.environmentService.logsPath, 'main.log')).fsPath);\n\t}\n}\n\nexport class OpenExtensionLogsFolderAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.openExtensionLogsFolder';\n\tstatic readonly LABEL = nls.localize('openExtensionLogsFolder', \"Open Extension Logs Folder\");\n\n\tconstructor(id: string, label: string,\n\t\t@INativeWorkbenchEnvironmentService private readonly environmentSerice: INativeWorkbenchEnvironmentService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@INativeHostService private readonly nativeHostService: INativeHostService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\toverride async run(): Promise<void> {\n\t\tconst folderStat = await this.fileService.resolve(this.environmentSerice.extHostLogsPath);\n\t\tif (folderStat.children && folderStat.children[0]) {\n\t\t\treturn this.nativeHostService.showItemInFolder(folderStat.children[0].resource.fsPath);\n\t\t}\n\t}\n}\n"]}