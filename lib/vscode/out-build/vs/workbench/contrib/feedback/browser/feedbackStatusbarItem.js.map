{"version":3,"sources":["vs/workbench/contrib/feedback/browser/feedbackStatusbarItem.ts"],"names":[],"mappings":"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","file":"feedbackStatusbarItem.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { FeedbackWidget, IFeedback, IFeedbackDelegate } from 'vs/workbench/contrib/feedback/browser/feedback';\nimport { IContextViewService } from 'vs/platform/contextview/browser/contextView';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { IStatusbarService, StatusbarAlignment, IStatusbarEntry, IStatusbarEntryAccessor } from 'vs/workbench/services/statusbar/common/statusbar';\nimport { localize } from 'vs/nls';\nimport { CommandsRegistry, ICommandService } from 'vs/platform/commands/common/commands';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { URI } from 'vs/base/common/uri';\nimport { MenuRegistry, MenuId } from 'vs/platform/actions/common/actions';\nimport { CATEGORIES } from 'vs/workbench/common/actions';\nimport { assertIsDefined } from 'vs/base/common/types';\nimport { IWorkbenchLayoutService } from 'vs/workbench/services/layout/browser/layoutService';\nimport { HIDE_NOTIFICATIONS_CENTER, HIDE_NOTIFICATION_TOAST } from 'vs/workbench/browser/parts/notifications/notificationsCommands';\n\nclass TwitterFeedbackService implements IFeedbackDelegate {\n\n\tprivate static TWITTER_URL: string = 'https://twitter.com/intent/tweet';\n\tprivate static VIA_NAME: string = 'code';\n\tprivate static HASHTAGS: string[] = ['HappyCoding'];\n\n\tprivate combineHashTagsAsString(): string {\n\t\treturn TwitterFeedbackService.HASHTAGS.join(',');\n\t}\n\n\tsubmitFeedback(feedback: IFeedback, openerService: IOpenerService): void {\n\t\tconst queryString = `?${feedback.sentiment === 1 ? `hashtags=${this.combineHashTagsAsString()}&` : ''}ref_src=twsrc%5Etfw&related=twitterapi%2Ctwitter&text=${encodeURIComponent(feedback.feedback)}&tw_p=tweetbutton&via=${TwitterFeedbackService.VIA_NAME}`;\n\t\tconst url = TwitterFeedbackService.TWITTER_URL + queryString;\n\n\t\topenerService.open(URI.parse(url));\n\t}\n\n\tgetCharacterLimit(sentiment: number): number {\n\t\tlet length: number = 0;\n\t\tif (sentiment === 1) {\n\t\t\tTwitterFeedbackService.HASHTAGS.forEach(element => {\n\t\t\t\tlength += element.length + 2;\n\t\t\t});\n\t\t}\n\n\t\tif (TwitterFeedbackService.VIA_NAME) {\n\t\t\tlength += ` via @${TwitterFeedbackService.VIA_NAME}`.length;\n\t\t}\n\n\t\treturn 280 - length;\n\t}\n}\n\nexport class FeedbackStatusbarConribution extends Disposable implements IWorkbenchContribution {\n\n\tprivate static readonly TOGGLE_FEEDBACK_COMMAND = 'help.tweetFeedback';\n\n\tprivate widget: FeedbackWidget | undefined;\n\tprivate entry: IStatusbarEntryAccessor | undefined;\n\n\tconstructor(\n\t\t@IStatusbarService private readonly statusbarService: IStatusbarService,\n\t\t@IProductService productService: IProductService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IContextViewService private readonly contextViewService: IContextViewService,\n\t\t@IWorkbenchLayoutService private readonly layoutService: IWorkbenchLayoutService,\n\t\t@ICommandService private readonly commandService: ICommandService\n\t) {\n\t\tsuper();\n\n\t\tif (productService.sendASmile) {\n\t\t\tthis.createFeedbackStatusEntry();\n\t\t\tthis.registerListeners();\n\t\t}\n\t}\n\n\tprivate createFeedbackStatusEntry(): void {\n\n\t\t// Status entry\n\t\tthis.entry = this._register(this.statusbarService.addEntry(this.getStatusEntry(), 'status.feedback', localize('status.feedback', \"Tweet Feedback\"), StatusbarAlignment.RIGHT, -100 /* towards the end of the right hand side */));\n\n\t\t// Command to toggle\n\t\tCommandsRegistry.registerCommand(FeedbackStatusbarConribution.TOGGLE_FEEDBACK_COMMAND, () => this.toggleFeedback());\n\t\tMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\t\t\tcommand: {\n\t\t\t\tid: FeedbackStatusbarConribution.TOGGLE_FEEDBACK_COMMAND,\n\t\t\t\tcategory: CATEGORIES.Help,\n\t\t\t\ttitle: localize('status.feedback', \"Tweet Feedback\")\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Hide feedback widget whenever notifications appear\n\t\tthis._register(this.layoutService.onDidChangeNotificationsVisibility(visible => {\n\t\t\tif (visible) {\n\t\t\t\tthis.widget?.hide();\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate createFeedbackWidget(): void {\n\t\tconst statusContainer = document.getElementById('status.feedback');\n\t\tif (statusContainer) {\n\t\t\tconst icon = assertIsDefined(statusContainer.getElementsByClassName('codicon').item(0) as HTMLElement | null);\n\n\t\t\tthis.widget = this._register(this.instantiationService.createInstance(FeedbackWidget, icon, {\n\t\t\t\tcontextViewProvider: this.contextViewService,\n\t\t\t\tfeedbackService: this.instantiationService.createInstance(TwitterFeedbackService),\n\t\t\t\tonFeedbackVisibilityChange: visible => this.entry?.update(this.getStatusEntry(visible))\n\t\t\t}));\n\t\t}\n\t}\n\n\tprivate toggleFeedback(): void {\n\t\tif (!this.widget) {\n\t\t\tthis.createFeedbackWidget();\n\t\t}\n\n\t\t// Hide when visible\n\t\tif (this.widget?.isVisible()) {\n\t\t\tthis.widget.hide();\n\t\t}\n\n\t\t// Show when hidden\n\t\telse {\n\t\t\tthis.commandService.executeCommand(HIDE_NOTIFICATION_TOAST);\n\t\t\tthis.commandService.executeCommand(HIDE_NOTIFICATIONS_CENTER);\n\t\t\tthis.widget?.show();\n\t\t}\n\t}\n\n\tprivate getStatusEntry(showBeak?: boolean): IStatusbarEntry {\n\t\treturn {\n\t\t\ttext: '$(feedback)',\n\t\t\tariaLabel: localize('status.feedback', \"Tweet Feedback\"),\n\t\t\ttooltip: localize('status.feedback', \"Tweet Feedback\"),\n\t\t\tcommand: FeedbackStatusbarConribution.TOGGLE_FEEDBACK_COMMAND,\n\t\t\tshowBeak\n\t\t};\n\t}\n}\n"]}