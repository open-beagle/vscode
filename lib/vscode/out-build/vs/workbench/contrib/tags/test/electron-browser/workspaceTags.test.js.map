{"version":3,"file":"workspaceTags.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/tags/test/electron-browser/workspaceTags.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport * as crypto from 'crypto';\nimport { getHashedRemotesFromConfig } from 'vs/workbench/contrib/tags/electron-sandbox/workspaceTags';\n\nfunction hash(value: string): string {\n\treturn crypto.createHash('sha1').update(value.toString()).digest('hex');\n}\n\nsuite('Telemetry - WorkspaceTags', () => {\n\n\ttest('Single remote hashed', async function () {\n\t\tassert.deepStrictEqual(await getHashedRemotesFromConfig(remote('https://username:password@github3.com/username/repository.git')), [hash('github3.com/username/repository.git')]);\n\t\tassert.deepStrictEqual(await getHashedRemotesFromConfig(remote('ssh://user@git.server.org/project.git')), [hash('git.server.org/project.git')]);\n\t\tassert.deepStrictEqual(await getHashedRemotesFromConfig(remote('user@git.server.org:project.git')), [hash('git.server.org/project.git')]);\n\t\tassert.deepStrictEqual(await getHashedRemotesFromConfig(remote('/opt/git/project.git')), []);\n\n\t\t// Strip .git\n\t\tassert.deepStrictEqual(await getHashedRemotesFromConfig(remote('https://username:password@github3.com/username/repository.git'), true), [hash('github3.com/username/repository')]);\n\t\tassert.deepStrictEqual(await getHashedRemotesFromConfig(remote('ssh://user@git.server.org/project.git'), true), [hash('git.server.org/project')]);\n\t\tassert.deepStrictEqual(await getHashedRemotesFromConfig(remote('user@git.server.org:project.git'), true), [hash('git.server.org/project')]);\n\t\tassert.deepStrictEqual(await getHashedRemotesFromConfig(remote('/opt/git/project.git'), true), []);\n\n\t\t// Compare Striped .git with no .git\n\t\tassert.deepStrictEqual(await getHashedRemotesFromConfig(remote('https://username:password@github3.com/username/repository.git'), true), await getHashedRemotesFromConfig(remote('https://username:password@github3.com/username/repository')));\n\t\tassert.deepStrictEqual(await getHashedRemotesFromConfig(remote('ssh://user@git.server.org/project.git'), true), await getHashedRemotesFromConfig(remote('ssh://user@git.server.org/project')));\n\t\tassert.deepStrictEqual(await getHashedRemotesFromConfig(remote('user@git.server.org:project.git'), true), [hash('git.server.org/project')]);\n\t\tassert.deepStrictEqual(await getHashedRemotesFromConfig(remote('/opt/git/project.git'), true), await getHashedRemotesFromConfig(remote('/opt/git/project')));\n\t});\n\n\ttest('Multiple remotes hashed', async function () {\n\t\tconst config = ['https://github.com/microsoft/vscode.git', 'https://git.example.com/gitproject.git'].map(remote).join(' ');\n\t\tassert.deepStrictEqual(await getHashedRemotesFromConfig(config), [hash('github.com/microsoft/vscode.git'), hash('git.example.com/gitproject.git')]);\n\n\t\t// Strip .git\n\t\tassert.deepStrictEqual(await getHashedRemotesFromConfig(config, true), [hash('github.com/microsoft/vscode'), hash('git.example.com/gitproject')]);\n\n\t\t// Compare Striped .git with no .git\n\t\tconst noDotGitConfig = ['https://github.com/microsoft/vscode', 'https://git.example.com/gitproject'].map(remote).join(' ');\n\t\tassert.deepStrictEqual(await getHashedRemotesFromConfig(config, true), await getHashedRemotesFromConfig(noDotGitConfig));\n\t});\n\n\tfunction remote(url: string): string {\n\t\treturn `[remote \"origin\"]\n\turl = ${url}\n\tfetch = +refs/heads/*:refs/remotes/origin/*\n`;\n\t}\n});\n"]}