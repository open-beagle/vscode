{"version":3,"file":"workspaceTags.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/tags/electron-sandbox/workspaceTags.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { sha1Hex } from 'vs/base/browser/hash';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { URI } from 'vs/base/common/uri';\nimport { IFileService, IFileStat } from 'vs/platform/files/common/files';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { ITextFileService, } from 'vs/workbench/services/textfile/common/textfiles';\nimport { IWorkspaceTagsService, Tags } from 'vs/workbench/contrib/tags/common/workspaceTags';\nimport { IDiagnosticsService, IWorkspaceInformation } from 'vs/platform/diagnostics/common/diagnostics';\nimport { IRequestService } from 'vs/platform/request/common/request';\nimport { isWindows } from 'vs/base/common/platform';\nimport { getRemotes, AllowedSecondLevelDomains, getDomainsOfRemotes } from 'vs/platform/extensionManagement/common/configRemotes';\nimport { INativeHostService } from 'vs/platform/native/electron-sandbox/native';\nimport { IProductService } from 'vs/platform/product/common/productService';\n\nexport async function getHashedRemotesFromConfig(text: string, stripEndingDotGit: boolean = false): Promise<string[]> {\n\treturn Promise.all(getRemotes(text, stripEndingDotGit).map(remote => sha1Hex(remote)));\n}\n\nexport class WorkspaceTags implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IRequestService private readonly requestService: IRequestService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@IWorkspaceTagsService private readonly workspaceTagsService: IWorkspaceTagsService,\n\t\t@IDiagnosticsService private readonly diagnosticsService: IDiagnosticsService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@INativeHostService private readonly nativeHostService: INativeHostService\n\t) {\n\t\tif (this.telemetryService.isOptedIn) {\n\t\t\tthis.report();\n\t\t}\n\t}\n\n\tprivate async report(): Promise<void> {\n\t\t// Windows-only Edition Event\n\t\tthis.reportWindowsEdition();\n\n\t\t// Workspace Tags\n\t\tthis.workspaceTagsService.getTags()\n\t\t\t.then(tags => this.reportWorkspaceTags(tags), error => onUnexpectedError(error));\n\n\t\t// Cloud Stats\n\t\tthis.reportCloudStats();\n\n\t\tthis.reportProxyStats();\n\n\t\tthis.getWorkspaceInformation().then(stats => this.diagnosticsService.reportWorkspaceStats(stats));\n\t}\n\n\tprivate async reportWindowsEdition(): Promise<void> {\n\t\tif (!isWindows) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet value = await this.nativeHostService.windowsGetStringRegKey('HKEY_LOCAL_MACHINE', 'SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion', 'EditionID');\n\t\tif (value === undefined) {\n\t\t\tvalue = 'Unknown';\n\t\t}\n\n\t\tthis.telemetryService.publicLog2<{ edition: string }, { edition: { classification: 'SystemMetaData', purpose: 'BusinessInsight' } }>('windowsEdition', { edition: value });\n\t}\n\n\tprivate async getWorkspaceInformation(): Promise<IWorkspaceInformation> {\n\t\tconst workspace = this.contextService.getWorkspace();\n\t\tconst state = this.contextService.getWorkbenchState();\n\t\tconst telemetryId = await this.workspaceTagsService.getTelemetryWorkspaceId(workspace, state);\n\t\treturn this.telemetryService.getTelemetryInfo().then(info => {\n\t\t\treturn {\n\t\t\t\tid: workspace.id,\n\t\t\t\ttelemetryId,\n\t\t\t\trendererSessionId: info.sessionId,\n\t\t\t\tfolders: workspace.folders,\n\t\t\t\tconfiguration: workspace.configuration\n\t\t\t};\n\t\t});\n\t}\n\n\tprivate reportWorkspaceTags(tags: Tags): void {\n\t\t/* __GDPR__\n\t\t\t\"workspce.tags\" : {\n\t\t\t\t\"${include}\": [\n\t\t\t\t\t\"${WorkspaceTags}\"\n\t\t\t\t]\n\t\t\t}\n\t\t*/\n\t\tthis.telemetryService.publicLog('workspce.tags', tags);\n\t}\n\n\tprivate reportRemoteDomains(workspaceUris: URI[]): void {\n\t\tPromise.all<string[]>(workspaceUris.map(workspaceUri => {\n\t\t\tconst path = workspaceUri.path;\n\t\t\tconst uri = workspaceUri.with({ path: `${path !== '/' ? path : ''}/.git/config` });\n\t\t\treturn this.fileService.exists(uri).then(exists => {\n\t\t\t\tif (!exists) {\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\t\t\t\treturn this.textFileService.read(uri, { acceptTextOnly: true }).then(\n\t\t\t\t\tcontent => getDomainsOfRemotes(content.value, AllowedSecondLevelDomains),\n\t\t\t\t\terr => [] // ignore missing or binary file\n\t\t\t\t);\n\t\t\t});\n\t\t})).then(domains => {\n\t\t\tconst set = domains.reduce((set, list) => list.reduce((set, item) => set.add(item), set), new Set<string>());\n\t\t\tconst list: string[] = [];\n\t\t\tset.forEach(item => list.push(item));\n\t\t\t/* __GDPR__\n\t\t\t\t\"workspace.remotes\" : {\n\t\t\t\t\t\"domains\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\t\t\t\t}\n\t\t\t*/\n\t\t\tthis.telemetryService.publicLog('workspace.remotes', { domains: list.sort() });\n\t\t}, onUnexpectedError);\n\t}\n\n\tprivate reportRemotes(workspaceUris: URI[]): void {\n\t\tPromise.all<string[]>(workspaceUris.map(workspaceUri => {\n\t\t\treturn this.workspaceTagsService.getHashedRemotesFromUri(workspaceUri, true);\n\t\t})).then(hashedRemotes => {\n\t\t\t/* __GDPR__\n\t\t\t\t\t\"workspace.hashedRemotes\" : {\n\t\t\t\t\t\t\"remotes\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\t\t\t\t\t}\n\t\t\t\t*/\n\t\t\tthis.telemetryService.publicLog('workspace.hashedRemotes', { remotes: hashedRemotes });\n\t\t}, onUnexpectedError);\n\t}\n\n\t/* __GDPR__FRAGMENT__\n\t\t\"AzureTags\" : {\n\t\t\t\"node\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n\t\t}\n\t*/\n\tprivate reportAzureNode(workspaceUris: URI[], tags: Tags): Promise<Tags> {\n\t\t// TODO: should also work for `node_modules` folders several levels down\n\t\tconst uris = workspaceUris.map(workspaceUri => {\n\t\t\tconst path = workspaceUri.path;\n\t\t\treturn workspaceUri.with({ path: `${path !== '/' ? path : ''}/node_modules` });\n\t\t});\n\t\treturn this.fileService.resolveAll(uris.map(resource => ({ resource }))).then(\n\t\t\tresults => {\n\t\t\t\tconst names = (<IFileStat[]>[]).concat(...results.map(result => result.success ? (result.stat!.children || []) : [])).map(c => c.name);\n\t\t\t\tconst referencesAzure = WorkspaceTags.searchArray(names, /azure/i);\n\t\t\t\tif (referencesAzure) {\n\t\t\t\t\ttags['node'] = true;\n\t\t\t\t}\n\t\t\t\treturn tags;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\treturn tags;\n\t\t\t});\n\t}\n\n\tprivate static searchArray(arr: string[], regEx: RegExp): boolean | undefined {\n\t\treturn arr.some(v => v.search(regEx) > -1) || undefined;\n\t}\n\n\t/* __GDPR__FRAGMENT__\n\t\t\"AzureTags\" : {\n\t\t\t\"java\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n\t\t}\n\t*/\n\tprivate reportAzureJava(workspaceUris: URI[], tags: Tags): Promise<Tags> {\n\t\treturn Promise.all(workspaceUris.map(workspaceUri => {\n\t\t\tconst path = workspaceUri.path;\n\t\t\tconst uri = workspaceUri.with({ path: `${path !== '/' ? path : ''}/pom.xml` });\n\t\t\treturn this.fileService.exists(uri).then(exists => {\n\t\t\t\tif (!exists) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn this.textFileService.read(uri, { acceptTextOnly: true }).then(\n\t\t\t\t\tcontent => !!content.value.match(/azure/i),\n\t\t\t\t\terr => false\n\t\t\t\t);\n\t\t\t});\n\t\t})).then(javas => {\n\t\t\tif (javas.indexOf(true) !== -1) {\n\t\t\t\ttags['java'] = true;\n\t\t\t}\n\t\t\treturn tags;\n\t\t});\n\t}\n\n\tprivate reportAzure(uris: URI[]) {\n\t\tconst tags: Tags = Object.create(null);\n\t\tthis.reportAzureNode(uris, tags).then((tags) => {\n\t\t\treturn this.reportAzureJava(uris, tags);\n\t\t}).then((tags) => {\n\t\t\tif (Object.keys(tags).length) {\n\t\t\t\t/* __GDPR__\n\t\t\t\t\t\"workspace.azure\" : {\n\t\t\t\t\t\t\"${include}\": [\n\t\t\t\t\t\t\t\"${AzureTags}\"\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t*/\n\t\t\t\tthis.telemetryService.publicLog('workspace.azure', tags);\n\t\t\t}\n\t\t}).then(undefined, onUnexpectedError);\n\t}\n\n\tprivate reportCloudStats(): void {\n\t\tconst uris = this.contextService.getWorkspace().folders.map(folder => folder.uri);\n\t\tif (uris.length && this.fileService) {\n\t\t\tthis.reportRemoteDomains(uris);\n\t\t\tthis.reportRemotes(uris);\n\t\t\tthis.reportAzure(uris);\n\t\t}\n\t}\n\n\tprivate reportProxyStats() {\n\t\tconst downloadUrl = this.productService.downloadUrl;\n\t\tif (!downloadUrl) {\n\t\t\treturn;\n\t\t}\n\t\tthis.requestService.resolveProxy(downloadUrl)\n\t\t\t.then(proxy => {\n\t\t\t\tlet type = proxy ? String(proxy).trim().split(/\\s+/, 1)[0] : 'EMPTY';\n\t\t\t\tif (['DIRECT', 'PROXY', 'HTTPS', 'SOCKS', 'EMPTY'].indexOf(type) === -1) {\n\t\t\t\t\ttype = 'UNKNOWN';\n\t\t\t\t}\n\t\t\t\ttype ResolveProxyStatsClassification = {\n\t\t\t\t\ttype: { classification: 'SystemMetaData', purpose: 'PerformanceAndHealth' };\n\t\t\t\t};\n\t\t\t\tthis.telemetryService.publicLog2<{ type: String }, ResolveProxyStatsClassification>('resolveProxy.stats', { type });\n\t\t\t}).then(undefined, onUnexpectedError);\n\t}\n}\n"]}