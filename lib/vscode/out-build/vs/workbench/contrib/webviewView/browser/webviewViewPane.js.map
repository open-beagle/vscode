{"version":3,"file":"webviewViewPane.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/webviewView/browser/webviewViewPane.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as DOM from 'vs/base/browser/dom';\nimport { CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { Emitter } from 'vs/base/common/event';\nimport { DisposableStore, MutableDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { setImmediate } from 'vs/base/common/platform';\nimport { MenuId } from 'vs/platform/actions/common/actions';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { IContextMenuService } from 'vs/platform/contextview/browser/contextView';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { IProgressService } from 'vs/platform/progress/common/progress';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { ViewPane } from 'vs/workbench/browser/parts/views/viewPane';\nimport { IViewletViewOptions } from 'vs/workbench/browser/parts/views/viewsViewlet';\nimport { Memento, MementoObject } from 'vs/workbench/common/memento';\nimport { IViewDescriptorService, IViewsService } from 'vs/workbench/common/views';\nimport { IWebviewService, WebviewOverlay } from 'vs/workbench/contrib/webview/browser/webview';\nimport { WebviewWindowDragMonitor } from 'vs/workbench/contrib/webview/browser/webviewWindowDragMonitor';\nimport { IWebviewViewService, WebviewView } from 'vs/workbench/contrib/webviewView/browser/webviewViewService';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\n\ndeclare const ResizeObserver: any;\n\nconst storageKeys = {\n\twebviewState: 'webviewState',\n} as const;\n\nexport class WebviewViewPane extends ViewPane {\n\n\tprivate readonly _webview = this._register(new MutableDisposable<WebviewOverlay>());\n\tprivate readonly _webviewDisposables = this._register(new DisposableStore());\n\tprivate _activated = false;\n\n\tprivate _container?: HTMLElement;\n\tprivate _resizeObserver?: any;\n\n\tprivate readonly defaultTitle: string;\n\tprivate setTitle: string | undefined;\n\n\tprivate readonly memento: Memento;\n\tprivate readonly viewState: MementoObject;\n\n\tconstructor(\n\t\toptions: IViewletViewOptions,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IViewDescriptorService viewDescriptorService: IViewDescriptorService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IOpenerService openerService: IOpenerService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IProgressService private readonly progressService: IProgressService,\n\t\t@IWebviewService private readonly webviewService: IWebviewService,\n\t\t@IWebviewViewService private readonly webviewViewService: IWebviewViewService,\n\t\t@IViewsService private readonly viewService: IViewsService,\n\t) {\n\t\tsuper({ ...options, titleMenuId: MenuId.ViewTitle }, keybindingService, contextMenuService, configurationService, contextKeyService, viewDescriptorService, instantiationService, openerService, themeService, telemetryService);\n\t\tthis.defaultTitle = this.title;\n\n\t\tthis.memento = new Memento(`webviewView.${this.id}`, storageService);\n\t\tthis.viewState = this.memento.getMemento(StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\n\t\tthis._register(this.onDidChangeBodyVisibility(() => this.updateTreeVisibility()));\n\n\t\tthis._register(this.webviewViewService.onNewResolverRegistered(e => {\n\t\t\tif (e.viewType === this.id) {\n\t\t\t\t// Potentially re-activate if we have a new resolver\n\t\t\t\tthis.updateTreeVisibility();\n\t\t\t}\n\t\t}));\n\n\t\tthis.updateTreeVisibility();\n\t}\n\n\tprivate readonly _onDidChangeVisibility = this._register(new Emitter<boolean>());\n\treadonly onDidChangeVisibility = this._onDidChangeVisibility.event;\n\n\tprivate readonly _onDispose = this._register(new Emitter<void>());\n\treadonly onDispose = this._onDispose.event;\n\n\toverride dispose() {\n\t\tthis._onDispose.fire();\n\n\t\tsuper.dispose();\n\t}\n\n\toverride focus(): void {\n\t\tsuper.focus();\n\t\tthis._webview.value?.focus();\n\t}\n\n\toverride renderBody(container: HTMLElement): void {\n\t\tsuper.renderBody(container);\n\n\t\tthis._container = container;\n\n\t\tif (!this._resizeObserver) {\n\t\t\tthis._resizeObserver = new ResizeObserver(() => {\n\t\t\t\tsetImmediate(() => {\n\t\t\t\t\tif (this._container) {\n\t\t\t\t\t\tthis._webview.value?.layoutWebviewOverElement(this._container);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tthis._register(toDisposable(() => {\n\t\t\t\tthis._resizeObserver.disconnect();\n\t\t\t}));\n\t\t\tthis._resizeObserver.observe(container);\n\t\t}\n\t}\n\n\tpublic override saveState() {\n\t\tif (this._webview.value) {\n\t\t\tthis.viewState[storageKeys.webviewState] = this._webview.value.state;\n\t\t}\n\n\t\tthis.memento.saveMemento();\n\t\tsuper.saveState();\n\t}\n\n\tprotected override layoutBody(height: number, width: number): void {\n\t\tsuper.layoutBody(height, width);\n\n\t\tif (!this._webview.value) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._container) {\n\t\t\tthis._webview.value.layoutWebviewOverElement(this._container, new DOM.Dimension(width, height));\n\t\t}\n\t}\n\n\tprivate updateTreeVisibility() {\n\t\tif (this.isBodyVisible()) {\n\t\t\tthis.activate();\n\t\t\tthis._webview.value?.claim(this, undefined);\n\t\t} else {\n\t\t\tthis._webview.value?.release(this);\n\t\t}\n\t}\n\n\tprivate activate() {\n\t\tif (!this._activated) {\n\t\t\tthis._activated = true;\n\n\t\t\tconst webviewId = `webviewView-${this.id.replace(/[^a-z0-9]/gi, '-')}`.toLowerCase();\n\t\t\tconst webview = this.webviewService.createWebviewOverlay(webviewId, {}, {}, undefined);\n\t\t\twebview.state = this.viewState[storageKeys.webviewState];\n\t\t\tthis._webview.value = webview;\n\n\t\t\tif (this._container) {\n\t\t\t\tthis._webview.value?.layoutWebviewOverElement(this._container);\n\t\t\t}\n\n\t\t\tthis._webviewDisposables.add(toDisposable(() => {\n\t\t\t\tthis._webview.value?.release(this);\n\t\t\t}));\n\n\t\t\tthis._webviewDisposables.add(webview.onDidUpdateState(() => {\n\t\t\t\tthis.viewState[storageKeys.webviewState] = webview.state;\n\t\t\t}));\n\n\t\t\tthis._webviewDisposables.add(new WebviewWindowDragMonitor(() => this._webview.value));\n\n\t\t\tconst source = this._webviewDisposables.add(new CancellationTokenSource());\n\n\t\t\tthis.withProgress(async () => {\n\t\t\t\tawait this.extensionService.activateByEvent(`onView:${this.id}`);\n\n\t\t\t\tlet self = this;\n\t\t\t\tconst webviewView: WebviewView = {\n\t\t\t\t\twebview,\n\t\t\t\t\tonDidChangeVisibility: this.onDidChangeBodyVisibility,\n\t\t\t\t\tonDispose: this.onDispose,\n\n\t\t\t\t\tget title(): string | undefined { return self.setTitle; },\n\t\t\t\t\tset title(value: string | undefined) { self.updateTitle(value); },\n\n\t\t\t\t\tget description(): string | undefined { return self.titleDescription; },\n\t\t\t\t\tset description(value: string | undefined) { self.updateTitleDescription(value); },\n\n\t\t\t\t\tdispose: () => {\n\t\t\t\t\t\t// Only reset and clear the webview itself. Don't dispose of the view container\n\t\t\t\t\t\tthis._activated = false;\n\t\t\t\t\t\tthis._webview.clear();\n\t\t\t\t\t\tthis._webviewDisposables.clear();\n\t\t\t\t\t},\n\n\t\t\t\t\tshow: (preserveFocus) => {\n\t\t\t\t\t\tthis.viewService.openView(this.id, !preserveFocus);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tawait this.webviewViewService.resolve(this.id, webviewView, source.token);\n\t\t\t});\n\t\t}\n\t}\n\n\tprotected override updateTitle(value: string | undefined) {\n\t\tthis.setTitle = value;\n\t\tsuper.updateTitle(typeof value === 'string' ? value : this.defaultTitle);\n\t}\n\n\tprivate async withProgress(task: () => Promise<void>): Promise<void> {\n\t\treturn this.progressService.withProgress({ location: this.id, delay: 500 }, task);\n\t}\n}\n"]}