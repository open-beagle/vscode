{"version":3,"file":"notebookEditorModel.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/notebook/test/notebookEditorModel.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAoBhG,KAAK,CAAC,qBAAqB,EAAE;QAE5B,MAAM,YAAY,GAAG,IAAI,2CAAoB,EAAE,CAAC;QAChD,MAAM,cAAc,GAAG,IAAI,KAAM,SAAQ,CAAA,GAAA,WAAI,CAAA,EAAoB;SAAI,CAAC;QACtE,MAAM,aAAa,GAAG,IAAI,KAAM,SAAQ,CAAA,GAAA,WAAI,CAAA,EAA6B;SAAI,CAAC;QAC9E,MAAM,mBAAmB,GAAG,IAAI,KAAM,SAAQ,CAAA,GAAA,WAAI,CAAA,EAAwB;SAAI,CAAC;QAC/E,MAAM,yBAAyB,GAAG,IAAI,KAAM,SAAQ,CAAA,GAAA,WAAI,CAAA,EAA8B;SAAI,CAAC;QAC3F,MAAM,WAAW,GAAG,IAAI,KAAM,SAAQ,CAAA,GAAA,WAAI,CAAA,EAAgB;YAAlC;;gBACd,qBAAgB,GAAG,aAAK,CAAC,IAAI,CAAC;YACxC,CAAC;SAAA,CAAC;QACF,MAAM,YAAY,GAAG,IAAI,KAAM,SAAQ,CAAA,GAAA,WAAI,CAAA,EAAiB;YAClD,mBAAmB,CAAC,GAAQ,IAAI,OAAO,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;SACjE,CAAC;QAEF,MAAM,oBAAoB,GAAG,IAAI,KAAM,SAAQ,CAAA,GAAA,WAAI,CAAA,EAA4B;SAAI,CAAC;QAEpF,IAAI,CAAC,kBAAkB,EAAE;YAExB,MAAM,EAAE,GAAG,SAAG,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;YAC3C,MAAM,EAAE,GAAG,SAAG,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;YAE3C,MAAM,MAAM,GAAmB,EAAE,CAAC;YAClC,MAAM,kBAAkB,GAAG,IAAI,KAAM,SAAQ,CAAA,GAAA,WAAI,CAAA,EAAuB;gBAC9D,mBAAmB,CAAC,IAAkB;oBAC9C,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBAClB,OAAO,sBAAU,CAAC,IAAI,CAAC;gBACxB,CAAC;aACD,CAAC;YAEF,IAAI,gDAA0B,CAAC,EAAE,EAAE,KAAK,EAAE,oBAAoB,EAAE,YAAY,EAAE,cAAc,EAAE,kBAAkB,EAAE,aAAa,EAAE,WAAW,EAAE,mBAAmB,EAAE,IAAI,oBAAc,EAAE,EAAE,yBAAyB,EAAE,YAAY,CAAC,CAAC;YAClO,IAAI,gDAA0B,CAAC,EAAE,EAAE,KAAK,EAAE,oBAAoB,EAAE,YAAY,EAAE,cAAc,EAAE,kBAAkB,EAAE,aAAa,EAAE,WAAW,EAAE,mBAAmB,EAAE,IAAI,oBAAc,EAAE,EAAE,yBAAyB,EAAE,YAAY,CAAC,CAAC;YAElO,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACrC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAA,GAAA,mBAAO,CAAA,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC,CAAC;QAC5E,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { Event } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { isEqual } from 'vs/base/common/resources';\nimport { URI } from 'vs/base/common/uri';\nimport { mock } from 'vs/base/test/common/mock';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { InstantiationService } from 'vs/platform/instantiation/common/instantiationService';\nimport { ILabelService } from 'vs/platform/label/common/label';\nimport { NullLogService } from 'vs/platform/log/common/log';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { ComplexNotebookEditorModel } from 'vs/workbench/contrib/notebook/common/notebookEditorModel';\nimport { INotebookContentProvider, INotebookService } from 'vs/workbench/contrib/notebook/common/notebookService';\nimport { IWorkingCopyBackupService } from 'vs/workbench/services/workingCopy/common/workingCopyBackup';\nimport { IUntitledTextEditorService } from 'vs/workbench/services/untitled/common/untitledTextEditorService';\nimport { IWorkingCopyService } from 'vs/workbench/services/workingCopy/common/workingCopyService';\nimport { IWorkingCopy } from 'vs/workbench/services/workingCopy/common/workingCopy';\n\nsuite('NotebookEditorModel', function () {\n\n\tconst instaService = new InstantiationService();\n\tconst notebokService = new class extends mock<INotebookService>() { };\n\tconst backupService = new class extends mock<IWorkingCopyBackupService>() { };\n\tconst notificationService = new class extends mock<INotificationService>() { };\n\tconst untitledTextEditorService = new class extends mock<IUntitledTextEditorService>() { };\n\tconst fileService = new class extends mock<IFileService>() {\n\t\toverride onDidFilesChange = Event.None;\n\t};\n\tconst labelService = new class extends mock<ILabelService>() {\n\t\toverride getUriBasenameLabel(uri: URI) { return uri.toString(); }\n\t};\n\n\tconst notebookDataProvider = new class extends mock<INotebookContentProvider>() { };\n\n\ttest('working copy uri', function () {\n\n\t\tconst r1 = URI.parse('foo-files:///my.nb');\n\t\tconst r2 = URI.parse('bar-files:///my.nb');\n\n\t\tconst copies: IWorkingCopy[] = [];\n\t\tconst workingCopyService = new class extends mock<IWorkingCopyService>() {\n\t\t\toverride registerWorkingCopy(copy: IWorkingCopy) {\n\t\t\t\tcopies.push(copy);\n\t\t\t\treturn Disposable.None;\n\t\t\t}\n\t\t};\n\n\t\tnew ComplexNotebookEditorModel(r1, 'fff', notebookDataProvider, instaService, notebokService, workingCopyService, backupService, fileService, notificationService, new NullLogService(), untitledTextEditorService, labelService);\n\t\tnew ComplexNotebookEditorModel(r2, 'fff', notebookDataProvider, instaService, notebokService, workingCopyService, backupService, fileService, notificationService, new NullLogService(), untitledTextEditorService, labelService);\n\n\t\tassert.strictEqual(copies.length, 2);\n\t\tassert.strictEqual(!isEqual(copies[0].resource, copies[1].resource), true);\n\t});\n});\n"]}