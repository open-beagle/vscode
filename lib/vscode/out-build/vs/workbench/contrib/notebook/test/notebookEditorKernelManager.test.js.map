{"version":3,"file":"notebookEditorKernelManager.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/notebook/test/notebookEditorKernelManager.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport * as sinon from 'sinon';\nimport { URI } from 'vs/base/common/uri';\nimport { assertThrowsAsync } from 'vs/base/test/common/utils';\nimport { ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\nimport { NotebookEditorKernelManager } from 'vs/workbench/contrib/notebook/browser/notebookEditorKernelManager';\nimport { NotebookViewModel } from 'vs/workbench/contrib/notebook/browser/viewModel/notebookViewModel';\nimport { NotebookTextModel } from 'vs/workbench/contrib/notebook/common/model/notebookTextModel';\nimport { CellKind, INotebookKernel, IOutputDto, NotebookCellMetadata } from 'vs/workbench/contrib/notebook/common/notebookCommon';\nimport { setupInstantiationService, withTestNotebook as _withTestNotebook } from 'vs/workbench/contrib/notebook/test/testNotebookEditor';\nimport { Event } from 'vs/base/common/event';\nimport { INotebookKernelBindEvent, INotebookKernelService } from 'vs/workbench/contrib/notebook/common/notebookKernelService';\nimport { NotebookKernelService } from 'vs/workbench/contrib/notebook/browser/notebookKernelServiceImpl';\nimport { INotebookService } from 'vs/workbench/contrib/notebook/common/notebookService';\nimport { mock } from 'vs/base/test/common/mock';\nimport { TestInstantiationService } from 'vs/platform/instantiation/test/common/instantiationServiceMock';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\n\nsuite('NotebookEditorKernelManager', () => {\n\n\tlet instantiationService: TestInstantiationService;\n\tlet kernelService: INotebookKernelService;\n\tconst dispoables = new DisposableStore();\n\n\tsetup(function () {\n\n\t\tdispoables.clear();\n\n\t\tinstantiationService = setupInstantiationService();\n\n\t\tinstantiationService.stub(INotebookService, new class extends mock<INotebookService>() {\n\t\t\toverride onDidAddNotebookDocument = Event.None;\n\t\t\toverride onDidRemoveNotebookDocument = Event.None;\n\t\t\toverride getNotebookTextModels() { return []; }\n\t\t});\n\n\t\tkernelService = instantiationService.createInstance(NotebookKernelService);\n\t\tinstantiationService.set(INotebookKernelService, kernelService);\n\n\t});\n\n\tasync function withTestNotebook(cells: [string, string, CellKind, IOutputDto[], NotebookCellMetadata][], callback: (viewModel: NotebookViewModel, textModel: NotebookTextModel) => void | Promise<void>) {\n\t\treturn _withTestNotebook(cells, (editor) => callback(editor.viewModel, editor.viewModel.notebookDocument));\n\t}\n\n\t// test('ctor', () => {\n\t// \tinstantiationService.createInstance(NotebookEditorKernelManager, { activeKernel: undefined, viewModel: undefined });\n\t// \tconst contextKeyService = instantiationService.get(IContextKeyService);\n\n\t// \tassert.strictEqual(contextKeyService.getContextKeyValue(NOTEBOOK_KERNEL_COUNT.key), 0);\n\t// });\n\n\ttest('cell is not runnable when no kernel is selected', async () => {\n\t\tawait withTestNotebook(\n\t\t\t[],\n\t\t\tasync (viewModel) => {\n\t\t\t\tconst kernelManager = instantiationService.createInstance(NotebookEditorKernelManager);\n\n\t\t\t\tconst cell = viewModel.createCell(1, 'var c = 3', 'javascript', CellKind.Code, {}, [], true);\n\t\t\t\tawait assertThrowsAsync(async () => await kernelManager.executeNotebookCell(cell));\n\t\t\t});\n\t});\n\n\ttest('cell is not runnable when kernel does not support the language', async () => {\n\t\tawait withTestNotebook(\n\t\t\t[],\n\t\t\tasync (viewModel) => {\n\n\t\t\t\tkernelService.registerKernel(new TestNotebookKernel({ languages: ['testlang'] }));\n\t\t\t\tconst kernelManager = instantiationService.createInstance(NotebookEditorKernelManager);\n\t\t\t\tconst cell = viewModel.createCell(1, 'var c = 3', 'javascript', CellKind.Code, {}, [], true);\n\t\t\t\tawait assertThrowsAsync(async () => await kernelManager.executeNotebookCell(cell));\n\n\t\t\t});\n\t});\n\n\ttest('cell is runnable when kernel does support the language', async () => {\n\t\tawait withTestNotebook(\n\t\t\t[],\n\t\t\tasync (viewModel) => {\n\t\t\t\tconst kernel = new TestNotebookKernel({ languages: ['javascript'] });\n\t\t\t\tkernelService.registerKernel(kernel);\n\t\t\t\tconst kernelManager = instantiationService.createInstance(NotebookEditorKernelManager);\n\t\t\t\tconst executeSpy = sinon.spy();\n\t\t\t\tkernel.executeNotebookCellsRequest = executeSpy;\n\n\t\t\t\tconst cell = viewModel.createCell(0, 'var c = 3', 'javascript', CellKind.Code, {}, [], true);\n\t\t\t\tawait kernelManager.executeNotebookCells(viewModel.notebookDocument, [cell]);\n\t\t\t\tassert.strictEqual(executeSpy.calledOnce, true);\n\t\t\t});\n\t});\n\n\ttest('select kernel when running cell', async function () {\n\t\t// https://github.com/microsoft/vscode/issues/121904\n\n\t\treturn withTestNotebook([], async viewModel => {\n\t\t\tassert.strictEqual(kernelService.getMatchingKernel(viewModel.notebookDocument).all.length, 0);\n\n\t\t\tlet didExecute = false;\n\t\t\tconst kernel = new class extends TestNotebookKernel {\n\t\t\t\tconstructor() {\n\t\t\t\t\tsuper({ languages: ['javascript'] });\n\t\t\t\t\tthis.id = 'mySpecialId';\n\t\t\t\t}\n\n\t\t\t\toverride async executeNotebookCellsRequest() {\n\t\t\t\t\tdidExecute = true;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tkernelService.registerKernel(kernel);\n\t\t\tconst kernelManager = instantiationService.createInstance(NotebookEditorKernelManager);\n\n\t\t\tlet event: INotebookKernelBindEvent | undefined;\n\t\t\tkernelService.onDidChangeNotebookKernelBinding(e => event = e);\n\n\t\t\tconst cell = viewModel.createCell(0, 'var c = 3', 'javascript', CellKind.Code, {}, [], true);\n\t\t\tawait kernelManager.executeNotebookCells(viewModel.notebookDocument, [cell]);\n\n\t\t\tassert.strictEqual(didExecute, true);\n\t\t\tassert.ok(event !== undefined);\n\t\t\tassert.strictEqual(event.newKernel, kernel.id);\n\t\t\tassert.strictEqual(event.oldKernel, undefined);\n\t\t});\n\t});\n});\n\nclass TestNotebookKernel implements INotebookKernel {\n\tid: string = 'test';\n\tlabel: string = '';\n\tviewType = '*';\n\tonDidChange = Event.None;\n\textension: ExtensionIdentifier = new ExtensionIdentifier('test');\n\tlocalResourceRoot: URI = URI.file('/test');\n\tdescription?: string | undefined;\n\tdetail?: string | undefined;\n\tpreloadUris: URI[] = [];\n\tpreloadProvides: string[] = [];\n\tsupportedLanguages: string[] = [];\n\texecuteNotebookCellsRequest(): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tcancelNotebookCellExecution(): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tconstructor(opts?: { languages: string[] }) {\n\t\tthis.supportedLanguages = opts?.languages ?? ['text/plain'];\n\t}\n}\n"]}