{"version":3,"file":"testNotebookEditor.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/notebook/test/testNotebookEditor.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as DOM from 'vs/base/browser/dom';\nimport { IListRenderer, IListVirtualDelegate } from 'vs/base/browser/ui/list/list';\nimport { NotImplementedError } from 'vs/base/common/errors';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { URI } from 'vs/base/common/uri';\nimport { ITextModelService } from 'vs/editor/common/services/resolverService';\nimport { ContextKeyService } from 'vs/platform/contextkey/browser/contextKeyService';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { TestInstantiationService } from 'vs/platform/instantiation/test/common/instantiationServiceMock';\nimport { IListService, ListService } from 'vs/platform/list/browser/listService';\nimport { IUndoRedoService } from 'vs/platform/undoRedo/common/undoRedo';\nimport { EditorModel, IEditorInput } from 'vs/workbench/common/editor';\nimport { ICellViewModel, IActiveNotebookEditor } from 'vs/workbench/contrib/notebook/browser/notebookBrowser';\nimport { NotebookEventDispatcher } from 'vs/workbench/contrib/notebook/browser/viewModel/eventDispatcher';\nimport { CellViewModel, NotebookViewModel } from 'vs/workbench/contrib/notebook/browser/viewModel/notebookViewModel';\nimport { NotebookCellTextModel } from 'vs/workbench/contrib/notebook/common/model/notebookCellTextModel';\nimport { NotebookTextModel } from 'vs/workbench/contrib/notebook/common/model/notebookTextModel';\nimport { CellKind, CellUri, INotebookDiffEditorModel, INotebookEditorModel, IOutputDto, IResolvedNotebookEditorModel, NotebookCellMetadata, notebookDocumentMetadataDefaults } from 'vs/workbench/contrib/notebook/common/notebookCommon';\nimport { ICellRange } from 'vs/workbench/contrib/notebook/common/notebookRange';\nimport { TextModelResolverService } from 'vs/workbench/services/textmodelResolver/common/textModelResolverService';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { ModelServiceImpl } from 'vs/editor/common/services/modelServiceImpl';\nimport { UndoRedoService } from 'vs/platform/undoRedo/common/undoRedoService';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { TestConfigurationService } from 'vs/platform/configuration/test/common/testConfigurationService';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { TestThemeService } from 'vs/platform/theme/test/common/testThemeService';\nimport { NotebookCellList } from 'vs/workbench/contrib/notebook/browser/view/notebookCellList';\nimport { ListViewInfoAccessor } from 'vs/workbench/contrib/notebook/browser/notebookEditorWidget';\nimport { mock } from 'vs/base/test/common/mock';\nimport { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';\nimport { BrowserClipboardService } from 'vs/platform/clipboard/browser/clipboardService';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { ModeServiceImpl } from 'vs/editor/common/services/modeServiceImpl';\nimport { ILogService, NullLogService } from 'vs/platform/log/common/log';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { TestStorageService } from 'vs/workbench/test/common/workbenchTestServices';\nimport { IWorkspaceTrustRequestService } from 'vs/platform/workspace/common/workspaceTrust';\nimport { TestWorkspaceTrustRequestService } from 'vs/workbench/services/workspaces/test/common/testWorkspaceTrustService';\n\nexport class TestCell extends NotebookCellTextModel {\n\tconstructor(\n\t\tpublic viewType: string,\n\t\thandle: number,\n\t\tpublic source: string,\n\t\tlanguage: string,\n\t\tcellKind: CellKind,\n\t\toutputs: IOutputDto[],\n\t\tmodeService: IModeService,\n\t) {\n\t\tsuper(CellUri.generate(URI.parse('test:///fake/notebook'), handle), handle, source, language, cellKind, outputs, undefined, { transientCellMetadata: {}, transientDocumentMetadata: {}, transientOutputs: false }, modeService);\n\t}\n}\n\nexport class NotebookEditorTestModel extends EditorModel implements INotebookEditorModel {\n\tprivate _dirty = false;\n\n\tprotected readonly _onDidSave = this._register(new Emitter<void>());\n\treadonly onDidSave = this._onDidSave.event;\n\n\tprotected readonly _onDidChangeDirty = this._register(new Emitter<void>());\n\treadonly onDidChangeDirty = this._onDidChangeDirty.event;\n\n\tprivate readonly _onDidChangeContent = this._register(new Emitter<void>());\n\treadonly onDidChangeContent: Event<void> = this._onDidChangeContent.event;\n\n\n\tget viewType() {\n\t\treturn this._notebook.viewType;\n\t}\n\n\tget resource() {\n\t\treturn this._notebook.uri;\n\t}\n\n\tget notebook() {\n\t\treturn this._notebook;\n\t}\n\n\tconstructor(\n\t\tprivate _notebook: NotebookTextModel\n\t) {\n\t\tsuper();\n\n\t\tif (_notebook && _notebook.onDidChangeContent) {\n\t\t\tthis._register(_notebook.onDidChangeContent(() => {\n\t\t\t\tthis._dirty = true;\n\t\t\t\tthis._onDidChangeDirty.fire();\n\t\t\t\tthis._onDidChangeContent.fire();\n\t\t\t}));\n\t\t}\n\t}\n\tisReadonly(): boolean {\n\t\treturn false;\n\t}\n\n\tisDirty() {\n\t\treturn this._dirty;\n\t}\n\n\tgetNotebook(): NotebookTextModel {\n\t\treturn this._notebook;\n\t}\n\n\tasync load(): Promise<IResolvedNotebookEditorModel> {\n\t\treturn this;\n\t}\n\n\tasync save(): Promise<boolean> {\n\t\tif (this._notebook) {\n\t\t\tthis._dirty = false;\n\t\t\tthis._onDidChangeDirty.fire();\n\t\t\tthis._onDidSave.fire();\n\t\t\t// todo, flush all states\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tsaveAs(): Promise<IEditorInput | undefined> {\n\t\tthrow new NotImplementedError();\n\t}\n\n\trevert(): Promise<void> {\n\t\tthrow new NotImplementedError();\n\t}\n}\n\nexport function setupInstantiationService() {\n\tconst instantiationService = new TestInstantiationService();\n\tinstantiationService.stub(IModeService, new ModeServiceImpl());\n\tinstantiationService.stub(IUndoRedoService, instantiationService.createInstance(UndoRedoService));\n\tinstantiationService.stub(IConfigurationService, new TestConfigurationService());\n\tinstantiationService.stub(IThemeService, new TestThemeService());\n\tinstantiationService.stub(IModelService, instantiationService.createInstance(ModelServiceImpl));\n\tinstantiationService.stub(ITextModelService, <ITextModelService>instantiationService.createInstance(TextModelResolverService));\n\tinstantiationService.stub(IContextKeyService, instantiationService.createInstance(ContextKeyService));\n\tinstantiationService.stub(IListService, instantiationService.createInstance(ListService));\n\tinstantiationService.stub(IClipboardService, new BrowserClipboardService());\n\tinstantiationService.stub(ILogService, new NullLogService());\n\tinstantiationService.stub(IStorageService, new TestStorageService());\n\tinstantiationService.stub(IWorkspaceTrustRequestService, new TestWorkspaceTrustRequestService(true));\n\n\treturn instantiationService;\n}\n\nfunction _createTestNotebookEditor(instantiationService: TestInstantiationService, cells: [source: string, lang: string, kind: CellKind, output?: IOutputDto[], metadata?: NotebookCellMetadata][]): IActiveNotebookEditor {\n\n\tconst viewType = 'notebook';\n\tconst notebook = instantiationService.createInstance(NotebookTextModel, viewType, URI.parse('test'), cells.map(cell => {\n\t\treturn {\n\t\t\tsource: cell[0],\n\t\t\tlanguage: cell[1],\n\t\t\tcellKind: cell[2],\n\t\t\toutputs: cell[3] ?? [],\n\t\t\tmetadata: cell[4]\n\t\t};\n\t}), notebookDocumentMetadataDefaults, { transientCellMetadata: {}, transientDocumentMetadata: {}, transientOutputs: false });\n\n\tconst model = new NotebookEditorTestModel(notebook);\n\tconst eventDispatcher = new NotebookEventDispatcher();\n\tconst viewModel: NotebookViewModel = instantiationService.createInstance(NotebookViewModel, viewType, model.notebook, eventDispatcher, null);\n\n\tconst cellList = createNotebookCellList(instantiationService);\n\tcellList.attachViewModel(viewModel);\n\tconst listViewInfoAccessor = new ListViewInfoAccessor(cellList);\n\n\tconst notebookEditor: IActiveNotebookEditor = new class extends mock<IActiveNotebookEditor>() {\n\t\toverride dispose() {\n\t\t\tviewModel.dispose();\n\t\t}\n\t\toverride onDidChangeModel: Event<NotebookTextModel | undefined> = new Emitter<NotebookTextModel | undefined>().event;\n\t\toverride get viewModel() { return viewModel; }\n\t\toverride hasModel(): this is IActiveNotebookEditor {\n\t\t\treturn !!this.viewModel;\n\t\t}\n\t\toverride getFocus() { return viewModel.getFocus(); }\n\t\toverride getSelections() { return viewModel.getSelections(); }\n\t\toverride getViewIndex(cell: ICellViewModel) { return listViewInfoAccessor.getViewIndex(cell); }\n\t\toverride getCellRangeFromViewRange(startIndex: number, endIndex: number) { return listViewInfoAccessor.getCellRangeFromViewRange(startIndex, endIndex); }\n\t\toverride revealCellRangeInView() { }\n\t\toverride setHiddenAreas(_ranges: ICellRange[]): boolean {\n\t\t\treturn cellList.setHiddenAreas(_ranges, true);\n\t\t}\n\t\toverride getActiveCell() {\n\t\t\tconst elements = cellList.getFocusedElements();\n\n\t\t\tif (elements && elements.length) {\n\t\t\t\treturn elements[0];\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t}\n\t\toverride hasOutputTextSelection() {\n\t\t\treturn false;\n\t\t}\n\t};\n\n\treturn notebookEditor;\n}\n\nexport function createTestNotebookEditor(cells: [source: string, lang: string, kind: CellKind, output?: IOutputDto[], metadata?: NotebookCellMetadata][]): IActiveNotebookEditor {\n\treturn _createTestNotebookEditor(setupInstantiationService(), cells);\n}\n\nexport async function withTestNotebookDiffModel<R = any>(originalCells: [source: string, lang: string, kind: CellKind, output?: IOutputDto[], metadata?: NotebookCellMetadata][], modifiedCells: [source: string, lang: string, kind: CellKind, output?: IOutputDto[], metadata?: NotebookCellMetadata][], callback: (diffModel: INotebookDiffEditorModel, accessor: TestInstantiationService) => Promise<R> | R): Promise<R> {\n\tconst instantiationService = setupInstantiationService();\n\tconst originalNotebook = createTestNotebookEditor(originalCells);\n\tconst modifiedNotebook = createTestNotebookEditor(modifiedCells);\n\tconst originalResource = new class extends mock<IResolvedNotebookEditorModel>() {\n\t\toverride get notebook() {\n\t\t\treturn originalNotebook.viewModel.notebookDocument;\n\t\t}\n\t};\n\n\tconst modifiedResource = new class extends mock<IResolvedNotebookEditorModel>() {\n\t\toverride get notebook() {\n\t\t\treturn modifiedNotebook.viewModel.notebookDocument;\n\t\t}\n\t};\n\n\tconst model = new class extends mock<INotebookDiffEditorModel>() {\n\t\toverride get original() {\n\t\t\treturn originalResource;\n\t\t}\n\t\toverride get modified() {\n\t\t\treturn modifiedResource;\n\t\t}\n\t};\n\n\tconst res = await callback(model, instantiationService);\n\tif (res instanceof Promise) {\n\t\tres.finally(() => {\n\t\t\toriginalNotebook.dispose();\n\t\t\tmodifiedNotebook.dispose();\n\t\t});\n\t} else {\n\t\toriginalNotebook.dispose();\n\t\tmodifiedNotebook.dispose();\n\t}\n\treturn res;\n}\n\nexport async function withTestNotebook<R = any>(cells: [source: string, lang: string, kind: CellKind, output?: IOutputDto[], metadata?: NotebookCellMetadata][], callback: (editor: IActiveNotebookEditor, accessor: TestInstantiationService) => Promise<R> | R): Promise<R> {\n\tconst instantiationService = setupInstantiationService();\n\tconst notebookEditor = _createTestNotebookEditor(instantiationService, cells);\n\n\tconst res = await callback(notebookEditor, instantiationService);\n\tif (res instanceof Promise) {\n\t\tres.finally(() => notebookEditor.dispose());\n\t} else {\n\t\tnotebookEditor.dispose();\n\t}\n\treturn res;\n}\n\nexport function createNotebookCellList(instantiationService: TestInstantiationService) {\n\tconst delegate: IListVirtualDelegate<CellViewModel> = {\n\t\tgetHeight(element: CellViewModel) { return element.getHeight(17); },\n\t\tgetTemplateId() { return 'template'; }\n\t};\n\n\tconst renderer: IListRenderer<number, void> = {\n\t\ttemplateId: 'template',\n\t\trenderTemplate() { },\n\t\trenderElement() { },\n\t\tdisposeTemplate() { }\n\t};\n\n\tconst cellList: NotebookCellList = instantiationService.createInstance(\n\t\tNotebookCellList,\n\t\t'NotebookCellList',\n\t\tDOM.$('container'),\n\t\tDOM.$('body'),\n\t\tdelegate,\n\t\t[renderer],\n\t\tinstantiationService.get<IContextKeyService>(IContextKeyService),\n\t\t{\n\t\t\tsupportDynamicHeights: true,\n\t\t\tmultipleSelectionSupport: true,\n\t\t\tenableKeyboardNavigation: true,\n\t\t\tfocusNextPreviousDelegate: {\n\t\t\t\tonFocusNext: (applyFocusNext: () => void) => { applyFocusNext(); },\n\t\t\t\tonFocusPrevious: (applyFocusPrevious: () => void) => { applyFocusPrevious(); },\n\t\t\t}\n\t\t}\n\t);\n\n\treturn cellList;\n}\n"]}