{"version":3,"file":"notebookEditorModelResolverServiceImpl.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/notebook/common/notebookEditorModelResolverServiceImpl.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { URI } from 'vs/base/common/uri';\nimport { CellUri, IResolvedNotebookEditorModel, NOTEBOOK_WORKING_COPY_TYPE_PREFIX } from 'vs/workbench/contrib/notebook/common/notebookCommon';\nimport { ComplexNotebookEditorModel, NotebookFileWorkingCopyModel, NotebookFileWorkingCopyModelFactory, SimpleNotebookEditorModel } from 'vs/workbench/contrib/notebook/common/notebookEditorModel';\nimport { combinedDisposable, dispose, IDisposable, IReference, ReferenceCollection, toDisposable } from 'vs/base/common/lifecycle';\nimport { ComplexNotebookProviderInfo, INotebookService, SimpleNotebookProviderInfo } from 'vs/workbench/contrib/notebook/common/notebookService';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { FileWorkingCopyManager, IFileWorkingCopyManager } from 'vs/workbench/services/workingCopy/common/fileWorkingCopyManager';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { IUriIdentityService } from 'vs/workbench/services/uriIdentity/common/uriIdentity';\nimport { INotebookEditorModelResolverService } from 'vs/workbench/contrib/notebook/common/notebookEditorModelResolverService';\nimport { ResourceMap } from 'vs/base/common/map';\n\nclass NotebookModelReferenceCollection extends ReferenceCollection<Promise<IResolvedNotebookEditorModel>> {\n\n\tprivate readonly _workingCopyManagers = new Map<string, IFileWorkingCopyManager<NotebookFileWorkingCopyModel>>();\n\tprivate readonly _modelListener = new Map<IResolvedNotebookEditorModel, IDisposable>();\n\n\tprivate readonly _onDidSaveNotebook = new Emitter<URI>();\n\treadonly onDidSaveNotebook: Event<URI> = this._onDidSaveNotebook.event;\n\n\tprivate readonly _onDidChangeDirty = new Emitter<IResolvedNotebookEditorModel>();\n\treadonly onDidChangeDirty: Event<IResolvedNotebookEditorModel> = this._onDidChangeDirty.event;\n\n\tprivate readonly _dirtyStates = new ResourceMap<boolean>();\n\n\tconstructor(\n\t\t@IInstantiationService readonly _instantiationService: IInstantiationService,\n\t\t@INotebookService private readonly _notebookService: INotebookService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\t\tsuper();\n\t}\n\n\tdispose(): void {\n\t\tthis._onDidSaveNotebook.dispose();\n\t\tthis._onDidChangeDirty.dispose();\n\t\tdispose(this._modelListener.values());\n\t\tdispose(this._workingCopyManagers.values());\n\t}\n\n\tisDirty(resource: URI): boolean {\n\t\treturn this._dirtyStates.get(resource) ?? false;\n\t}\n\n\tprotected async createReferencedObject(key: string, viewType: string): Promise<IResolvedNotebookEditorModel> {\n\t\tconst uri = URI.parse(key);\n\t\tconst info = await this._notebookService.withNotebookDataProvider(uri, viewType);\n\n\t\tlet result: IResolvedNotebookEditorModel;\n\n\t\tif (info instanceof ComplexNotebookProviderInfo) {\n\t\t\tconst model = this._instantiationService.createInstance(ComplexNotebookEditorModel, uri, viewType, info.controller);\n\t\t\tresult = await model.load();\n\n\t\t} else if (info instanceof SimpleNotebookProviderInfo) {\n\t\t\tconst workingCopyTypeId = `${NOTEBOOK_WORKING_COPY_TYPE_PREFIX}${viewType}`;\n\t\t\tlet workingCopyManager = this._workingCopyManagers.get(workingCopyTypeId);\n\t\t\tif (!workingCopyManager) {\n\t\t\t\tworkingCopyManager = <IFileWorkingCopyManager<NotebookFileWorkingCopyModel>><any>this._instantiationService.createInstance(\n\t\t\t\t\tFileWorkingCopyManager,\n\t\t\t\t\tworkingCopyTypeId,\n\t\t\t\t\tnew NotebookFileWorkingCopyModelFactory(viewType, this._notebookService)\n\t\t\t\t);\n\t\t\t\tthis._workingCopyManagers.set(workingCopyTypeId, workingCopyManager);\n\t\t\t}\n\t\t\tconst model = this._instantiationService.createInstance(SimpleNotebookEditorModel, uri, viewType, workingCopyManager);\n\t\t\tresult = await model.load();\n\n\t\t} else {\n\t\t\tthrow new Error(`CANNOT open ${key}, no provider found`);\n\t\t}\n\n\t\t// Whenever a notebook model is dirty we automatically reference it so that\n\t\t// we can ensure that at least one reference exists. That guarantees that\n\t\t// a model with unsaved changes is never disposed.\n\t\tlet onDirtyAutoReference: IReference<any> | undefined;\n\n\t\tthis._modelListener.set(result, combinedDisposable(\n\t\t\tresult.onDidSave(() => this._onDidSaveNotebook.fire(result.resource)),\n\t\t\tresult.onDidChangeDirty(() => {\n\t\t\t\tconst isDirty = result.isDirty();\n\t\t\t\tthis._dirtyStates.set(result.resource, isDirty);\n\n\t\t\t\t// isDirty -> add reference\n\t\t\t\t// !isDirty -> free reference\n\t\t\t\tif (isDirty && !onDirtyAutoReference) {\n\t\t\t\t\tonDirtyAutoReference = this.acquire(key, viewType);\n\t\t\t\t} else if (onDirtyAutoReference) {\n\t\t\t\t\tonDirtyAutoReference.dispose();\n\t\t\t\t\tonDirtyAutoReference = undefined;\n\t\t\t\t}\n\n\t\t\t\tthis._onDidChangeDirty.fire(result);\n\t\t\t}),\n\t\t\ttoDisposable(() => onDirtyAutoReference?.dispose()),\n\t\t));\n\t\treturn result;\n\t}\n\n\tprotected destroyReferencedObject(_key: string, object: Promise<IResolvedNotebookEditorModel>): void {\n\t\tobject.then(model => {\n\t\t\tthis._modelListener.get(model)?.dispose();\n\t\t\tthis._modelListener.delete(model);\n\t\t\tmodel.dispose();\n\t\t}).catch(err => {\n\t\t\tthis._logService.critical('FAILED to destory notebook', err);\n\t\t});\n\t}\n}\n\nexport class NotebookModelResolverServiceImpl implements INotebookEditorModelResolverService {\n\n\treadonly _serviceBrand: undefined;\n\n\tprivate readonly _data: NotebookModelReferenceCollection;\n\n\treadonly onDidSaveNotebook: Event<URI>;\n\treadonly onDidChangeDirty: Event<IResolvedNotebookEditorModel>;\n\n\tconstructor(\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@INotebookService private readonly _notebookService: INotebookService,\n\t\t@IExtensionService private readonly _extensionService: IExtensionService,\n\t\t@IUriIdentityService private readonly _uriIdentService: IUriIdentityService,\n\t) {\n\t\tthis._data = instantiationService.createInstance(NotebookModelReferenceCollection);\n\t\tthis.onDidSaveNotebook = this._data.onDidSaveNotebook;\n\t\tthis.onDidChangeDirty = this._data.onDidChangeDirty;\n\t}\n\n\tdispose() {\n\t\tthis._data.dispose();\n\t}\n\n\tisDirty(resource: URI): boolean {\n\t\treturn this._data.isDirty(resource);\n\t}\n\n\tasync resolve(resource: URI, viewType?: string): Promise<IReference<IResolvedNotebookEditorModel>> {\n\n\t\tif (resource.scheme === CellUri.scheme) {\n\t\t\tthrow new Error(`CANNOT open a cell-uri as notebook. Tried with ${resource.toString()}`);\n\t\t}\n\n\t\tresource = this._uriIdentService.asCanonicalUri(resource);\n\n\t\tconst existingViewType = this._notebookService.getNotebookTextModel(resource)?.viewType;\n\t\tif (!viewType) {\n\t\t\tif (existingViewType) {\n\t\t\t\tviewType = existingViewType;\n\t\t\t} else {\n\t\t\t\tawait this._extensionService.whenInstalledExtensionsRegistered();\n\t\t\t\tconst providers = this._notebookService.getContributedNotebookProviders(resource);\n\t\t\t\tconst exclusiveProvider = providers.find(provider => provider.exclusive);\n\t\t\t\tviewType = exclusiveProvider?.id || providers[0]?.id;\n\t\t\t}\n\t\t}\n\n\t\tif (!viewType) {\n\t\t\tthrow new Error(`Missing viewType for '${resource}'`);\n\t\t}\n\n\t\tif (existingViewType && existingViewType !== viewType) {\n\t\t\tthrow new Error(`A notebook with view type '${existingViewType}' already exists for '${resource}', CANNOT create another notebook with view type ${viewType}`);\n\t\t}\n\n\t\tconst reference = this._data.acquire(resource.toString(), viewType);\n\t\tconst model = await reference.object;\n\t\treturn {\n\t\t\tobject: model,\n\t\t\tdispose() {\n\t\t\t\treference.dispose();\n\t\t\t}\n\t\t};\n\t}\n}\n"]}