{"version":3,"file":"notebookOutputRenderer.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/notebook/common/notebookOutputRenderer.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAShG,MAAM,cAAc;QAInB,YAAY,KAAuB;YAClC,IAAI,CAAC,KAAK,GAAG,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC;YAC5B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC;QACpC,CAAC;QAED,mFAAmF;QAC5E,OAAO,CAAC,SAAgC;YAC9C,qEAAqE;YACrE,yDAAyD;YACzD,OAAO,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/C,CAAC;KACD;IAED,MAAa,0BAA0B;QAetC,YAAY,UAQX;;YAdD,6CAA6C;YACpC,aAAQ,GAAuB,EAAE,CAAC;YAc1C,IAAI,CAAC,EAAE,GAAG,UAAU,CAAC,EAAE,CAAC;YACxB,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC,SAAS,CAAC,UAAU,CAAC;YACnD,IAAI,CAAC,iBAAiB,GAAG,UAAU,CAAC,SAAS,CAAC,iBAAiB,CAAC;YAChE,IAAI,CAAC,UAAU,GAAG,CAAA,GAAA,oBAAQ,CAAA,CAAC,IAAI,CAAC,iBAAiB,EAAE,UAAU,CAAC,UAAU,CAAC,CAAC;YAC1E,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC,WAAW,CAAC;YAC1C,IAAI,CAAC,SAAS,GAAG,UAAU,CAAC,SAAS,CAAC;YACtC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;YACxE,IAAI,CAAC,gBAAgB,GAAG,IAAI,cAAc,CAAC,MAAA,UAAU,CAAC,YAAY,mCAAI,mBAAQ,CAAC,KAAK,EAAE,CAAC,CAAC;YACxF,IAAI,CAAC,oBAAoB,GAAG,IAAI,cAAc,CAAC,MAAA,UAAU,CAAC,oBAAoB,mCAAI,mBAAQ,CAAC,KAAK,EAAE,CAAC,CAAC;QACrG,CAAC;QAED,oBAAoB,CAAC,QAAgB;YACpC,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,EAAE;gBACxC,qBAAmC;aACnC;YAED,IAAI,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE;gBAClC,wCAAsD;aACtD;YAED,IAAI,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAE;gBACtC,4CAA0D;aAC1D;YAED,oBAAkC;QACnC,CAAC;QAED,OAAO,CAAC,QAAgB,EAAE,cAAqC;YAC9D,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,EAAE;gBACxC,qBAAmC;aACnC;YAED,IAAI,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE;gBAClC,OAAO,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,cAAc,CAAC;oBACnD,CAAC;oBACD,CAAC,cAA4B,CAAC;aAC/B;YAED,OAAO,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,cAAc,CAAC;gBACvD,CAAC;gBACD,CAAC,aAA2B,CAAC;QAC/B,CAAC;QAEO,mBAAmB,CAAC,QAAgB;YAC3C,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,KAAK,QAAQ,CAAC,CAAC;QACtH,CAAC;KACD;IAtED,gEAsEC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as glob from 'vs/base/common/glob';\nimport { Iterable } from 'vs/base/common/iterator';\nimport { joinPath } from 'vs/base/common/resources';\nimport { URI } from 'vs/base/common/uri';\nimport { ExtensionIdentifier, IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { INotebookRendererInfo, NotebookRendererMatch } from 'vs/workbench/contrib/notebook/common/notebookCommon';\n\nclass DependencyList {\n\tprivate readonly value: ReadonlySet<string>;\n\tpublic readonly defined: boolean;\n\n\tconstructor(value: Iterable<string>) {\n\t\tthis.value = new Set(value);\n\t\tthis.defined = this.value.size > 0;\n\t}\n\n\t/** Gets whether any of the 'available' dependencies match the ones in this list */\n\tpublic matches(available: ReadonlyArray<string>) {\n\t\t// For now this is simple, but this may expand to support globs later\n\t\t// @see https://github.com/microsoft/vscode/issues/119899\n\t\treturn available.some(v => this.value.has(v));\n\t}\n}\n\nexport class NotebookOutputRendererInfo implements INotebookRendererInfo {\n\n\treadonly id: string;\n\treadonly entrypoint: URI;\n\treadonly displayName: string;\n\treadonly extensionLocation: URI;\n\treadonly extensionId: ExtensionIdentifier;\n\treadonly hardDependencies: DependencyList;\n\treadonly optionalDependencies: DependencyList;\n\t// todo: re-add preloads in pure renderer API\n\treadonly preloads: ReadonlyArray<URI> = [];\n\n\tprivate readonly mimeTypes: readonly string[];\n\tprivate readonly mimeTypeGlobs: glob.ParsedPattern[];\n\n\tconstructor(descriptor: {\n\t\treadonly id: string;\n\t\treadonly displayName: string;\n\t\treadonly entrypoint: string;\n\t\treadonly mimeTypes: readonly string[];\n\t\treadonly extension: IExtensionDescription;\n\t\treadonly dependencies: readonly string[] | undefined;\n\t\treadonly optionalDependencies: readonly string[] | undefined;\n\t}) {\n\t\tthis.id = descriptor.id;\n\t\tthis.extensionId = descriptor.extension.identifier;\n\t\tthis.extensionLocation = descriptor.extension.extensionLocation;\n\t\tthis.entrypoint = joinPath(this.extensionLocation, descriptor.entrypoint);\n\t\tthis.displayName = descriptor.displayName;\n\t\tthis.mimeTypes = descriptor.mimeTypes;\n\t\tthis.mimeTypeGlobs = this.mimeTypes.map(pattern => glob.parse(pattern));\n\t\tthis.hardDependencies = new DependencyList(descriptor.dependencies ?? Iterable.empty());\n\t\tthis.optionalDependencies = new DependencyList(descriptor.optionalDependencies ?? Iterable.empty());\n\t}\n\n\tmatchesWithoutKernel(mimeType: string) {\n\t\tif (!this.matchesMimeTypeOnly(mimeType)) {\n\t\t\treturn NotebookRendererMatch.Never;\n\t\t}\n\n\t\tif (this.hardDependencies.defined) {\n\t\t\treturn NotebookRendererMatch.WithHardKernelDependency;\n\t\t}\n\n\t\tif (this.optionalDependencies.defined) {\n\t\t\treturn NotebookRendererMatch.WithOptionalKernelDependency;\n\t\t}\n\n\t\treturn NotebookRendererMatch.Pure;\n\t}\n\n\tmatches(mimeType: string, kernelProvides: ReadonlyArray<string>) {\n\t\tif (!this.matchesMimeTypeOnly(mimeType)) {\n\t\t\treturn NotebookRendererMatch.Never;\n\t\t}\n\n\t\tif (this.hardDependencies.defined) {\n\t\t\treturn this.hardDependencies.matches(kernelProvides)\n\t\t\t\t? NotebookRendererMatch.WithHardKernelDependency\n\t\t\t\t: NotebookRendererMatch.Never;\n\t\t}\n\n\t\treturn this.optionalDependencies.matches(kernelProvides)\n\t\t\t? NotebookRendererMatch.WithOptionalKernelDependency\n\t\t\t: NotebookRendererMatch.Pure;\n\t}\n\n\tprivate matchesMimeTypeOnly(mimeType: string) {\n\t\treturn this.mimeTypeGlobs.some(pattern => pattern(mimeType)) || this.mimeTypes.some(pattern => pattern === mimeType);\n\t}\n}\n"]}