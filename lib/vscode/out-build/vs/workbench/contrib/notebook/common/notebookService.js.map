{"version":3,"file":"notebookService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/notebook/common/notebookService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAgBnF,QAAA,gBAAgB,GAAG,CAAA,GAAA,+BAAe,CAAA,CAAmB,iBAAiB,CAAC,CAAC;IAuBrF,MAAa,2BAA2B;QACvC,YACU,QAAgB,EAChB,UAAoC,EACpC,aAA2C;YAF3C,aAAQ,GAAR,QAAQ,CAAQ;YAChB,eAAU,GAAV,UAAU,CAA0B;YACpC,kBAAa,GAAb,aAAa,CAA8B;QACjD,CAAC;KACL;IAND,kEAMC;IAED,MAAa,0BAA0B;QACtC,YACU,QAAgB,EAChB,UAA+B,EAC/B,aAA2C;YAF3C,aAAQ,GAAR,QAAQ,CAAQ;YAChB,eAAU,GAAV,UAAU,CAAqB;YAC/B,kBAAa,GAAb,aAAa,CAA8B;QACjD,CAAC;KACL;IAND,gEAMC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { URI } from 'vs/base/common/uri';\nimport { NotebookProviderInfo } from 'vs/workbench/contrib/notebook/common/notebookProvider';\nimport { NotebookExtensionDescription } from 'vs/workbench/api/common/extHost.protocol';\nimport { Event } from 'vs/base/common/event';\nimport { INotebookRendererInfo, NotebookDataDto, TransientOptions, INotebookExclusiveDocumentFilter, IOrderedMimeType, IOutputDto, INotebookMarkupRendererInfo } from 'vs/workbench/contrib/notebook/common/notebookCommon';\nimport { NotebookTextModel } from 'vs/workbench/contrib/notebook/common/model/notebookTextModel';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { NotebookCellTextModel } from 'vs/workbench/contrib/notebook/common/model/notebookCellTextModel';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { IRelativePattern } from 'vs/base/common/glob';\nimport { VSBuffer } from 'vs/base/common/buffer';\n\n\nexport const INotebookService = createDecorator<INotebookService>('notebookService');\n\nexport interface INotebookContentProvider {\n\tviewOptions?: { displayName: string; filenamePattern: (string | IRelativePattern | INotebookExclusiveDocumentFilter)[]; exclusive: boolean; };\n\toptions: TransientOptions;\n\n\topen(uri: URI, backupId: string | undefined, untitledDocumentData: VSBuffer | undefined, token: CancellationToken): Promise<{ data: NotebookDataDto, transientOptions: TransientOptions; }>;\n\tsave(uri: URI, token: CancellationToken): Promise<boolean>;\n\tsaveAs(uri: URI, target: URI, token: CancellationToken): Promise<boolean>;\n\tbackup(uri: URI, token: CancellationToken): Promise<string>;\n}\n\nexport interface INotebookSerializer {\n\toptions: TransientOptions;\n\tdataToNotebook(data: VSBuffer): Promise<NotebookDataDto>\n\tnotebookToData(data: NotebookDataDto): Promise<VSBuffer>;\n}\n\nexport interface INotebookRawData {\n\tdata: NotebookDataDto;\n\ttransientOptions: TransientOptions;\n}\n\nexport class ComplexNotebookProviderInfo {\n\tconstructor(\n\t\treadonly viewType: string,\n\t\treadonly controller: INotebookContentProvider,\n\t\treadonly extensionData: NotebookExtensionDescription\n\t) { }\n}\n\nexport class SimpleNotebookProviderInfo {\n\tconstructor(\n\t\treadonly viewType: string,\n\t\treadonly serializer: INotebookSerializer,\n\t\treadonly extensionData: NotebookExtensionDescription\n\t) { }\n}\n\nexport interface INotebookService {\n\treadonly _serviceBrand: undefined;\n\tcanResolve(viewType: string): Promise<boolean>;\n\n\tonDidCreateNotebookDocument: Event<NotebookTextModel>;\n\tonDidAddNotebookDocument: Event<NotebookTextModel>;\n\tonDidRemoveNotebookDocument: Event<NotebookTextModel>;\n\n\tregisterNotebookController(viewType: string, extensionData: NotebookExtensionDescription, controller: INotebookContentProvider): IDisposable;\n\tregisterNotebookSerializer(viewType: string, extensionData: NotebookExtensionDescription, serializer: INotebookSerializer): IDisposable;\n\twithNotebookDataProvider(resource: URI, viewType?: string): Promise<ComplexNotebookProviderInfo | SimpleNotebookProviderInfo>;\n\n\tgetMimeTypeInfo(textModel: NotebookTextModel, kernelProvides: readonly string[] | undefined, output: IOutputDto): readonly IOrderedMimeType[];\n\n\tgetRendererInfo(id: string): INotebookRendererInfo | undefined;\n\tgetMarkupRendererInfo(): INotebookMarkupRendererInfo[];\n\n\t/** Updates the preferred renderer for the given mimetype in the workspace. */\n\tupdateMimePreferredRenderer(mimeType: string, rendererId: string): void;\n\n\tcreateNotebookTextModel(viewType: string, uri: URI, data: NotebookDataDto, transientOptions: TransientOptions): NotebookTextModel;\n\tgetNotebookTextModel(uri: URI): NotebookTextModel | undefined;\n\tgetNotebookTextModels(): Iterable<NotebookTextModel>;\n\tlistNotebookDocuments(): readonly NotebookTextModel[];\n\n\tgetContributedNotebookProviders(resource?: URI): readonly NotebookProviderInfo[];\n\tgetContributedNotebookProvider(viewType: string): NotebookProviderInfo | undefined;\n\tgetNotebookProviderResourceRoots(): URI[];\n\n\tsetToCopy(items: NotebookCellTextModel[], isCopy: boolean): void;\n\tgetToCopy(): { items: NotebookCellTextModel[], isCopy: boolean; } | undefined;\n}\n"]}