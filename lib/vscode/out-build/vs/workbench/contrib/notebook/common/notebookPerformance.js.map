{"version":3,"file":"notebookPerformance.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/notebook/common/notebookPerformance.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAQhG,MAAM,SAAS,GAAG,IAAI,GAAG,EAA2B,CAAC;IAErD,SAAgB,IAAI,CAAC,QAAa,EAAE,IAAc;QACjD,MAAM,GAAG,GAAG,QAAQ,CAAC,QAAQ,EAAE,CAAC;QAChC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;YACxB,IAAI,QAAQ,GAAoB,EAAE,CAAC;YACnC,QAAQ,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAC5B,SAAS,CAAC,GAAG,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;SAC7B;aAAM;YACN,IAAI,SAAS,CAAC,GAAG,CAAC,GAAG,CAAE,CAAC,IAAI,CAAC,EAAE;gBAC9B,OAAO,CAAC,KAAK,CAAC,8CAA8C,IAAI,EAAE,CAAC,CAAC;gBACpE,OAAO;aACP;YACD,SAAS,CAAC,GAAG,CAAC,GAAG,CAAE,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;SACvC;IACF,CAAC;IAbD,oBAaC;IAED,SAAgB,UAAU,CAAC,QAAa;QACvC,MAAM,GAAG,GAAG,QAAQ,CAAC,QAAQ,EAAE,CAAC;QAEhC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IACvB,CAAC;IAJD,gCAIC;IAED,SAAgB,gBAAgB,CAAC,QAAa;QAC7C,MAAM,GAAG,GAAG,QAAQ,CAAC,QAAQ,EAAE,CAAC;QAEhC,MAAM,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC;QAC5C,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QACtB,OAAO,QAAQ,CAAC;IACjB,CAAC;IAND,4CAMC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\n\nexport type PerfName = 'startTime' | 'extensionActivated' | 'inputLoaded' | 'webviewCommLoaded' | 'customMarkdownLoaded' | 'editorLoaded';\n\ntype PerformanceMark = { [key in PerfName]?: number };\n\nconst perfMarks = new Map<string, PerformanceMark>();\n\nexport function mark(resource: URI, name: PerfName): void {\n\tconst key = resource.toString();\n\tif (!perfMarks.has(key)) {\n\t\tlet perfMark: PerformanceMark = {};\n\t\tperfMark[name] = Date.now();\n\t\tperfMarks.set(key, perfMark);\n\t} else {\n\t\tif (perfMarks.get(key)![name]) {\n\t\t\tconsole.error(`Skipping overwrite of notebook perf value: ${name}`);\n\t\t\treturn;\n\t\t}\n\t\tperfMarks.get(key)![name] = Date.now();\n\t}\n}\n\nexport function clearMarks(resource: URI): void {\n\tconst key = resource.toString();\n\n\tperfMarks.delete(key);\n}\n\nexport function getAndClearMarks(resource: URI): PerformanceMark | null {\n\tconst key = resource.toString();\n\n\tconst perfMark = perfMarks.get(key) || null;\n\tperfMarks.delete(key);\n\treturn perfMark;\n}\n"]}