{"version":3,"file":"notebookCellOutputTextModel.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/notebook/common/model/notebookCellOutputTextModel.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAMhG,IAAI,OAAO,GAAG,CAAC,CAAC;IAChB,MAAa,2BAA4B,SAAQ,sBAAU;QAiB1D,YACU,UAAsB;YAE/B,KAAK,EAAE,CAAC;YAFC,eAAU,GAAV,UAAU,CAAY;YAjBhC,WAAM,GAAG,OAAO,EAAE,CAAC;YACX,qBAAgB,GAAG,IAAI,eAAO,EAAQ,CAAC;YAC/C,oBAAe,GAAG,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC;QAkB9C,CAAC;QAhBD,IAAI,OAAO;YACV,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,IAAI,EAAE,CAAC;QACtC,CAAC;QAED,IAAI,QAAQ;YACX,OAAO,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC;QACjC,CAAC;QAED,IAAI,QAAQ;YACX,OAAO,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC;QACjC,CAAC;QAQD,WAAW,CAAC,KAAuB;YAClC,IAAI,CAAC,UAAU,CAAC,OAAO,GAAG,KAAK,CAAC;YAChC,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC;QAC9B,CAAC;QAED,UAAU,CAAC,KAAuB;YACjC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC;YACvC,iCAAiC;YACjC,4HAA4H;YAC5H,kHAAkH;YAClH,4FAA4F;YAC5F,mDAAmD;YACnD,KAAK;YACL,IAAI;YAEJ,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC;QAC9B,CAAC;QAED,MAAM;YACL,OAAO;gBACN,oBAAoB;gBACpB,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC,QAAQ;gBAClC,OAAO,EAAE,IAAI,CAAC,UAAU,CAAC,OAAO;gBAChC,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC,QAAQ;aAClC,CAAC;QACH,CAAC;KACD;IAjDD,kEAiDC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { ICellOutput, IOutputDto, IOutputItemDto } from 'vs/workbench/contrib/notebook/common/notebookCommon';\n\nlet _handle = 0;\nexport class NotebookCellOutputTextModel extends Disposable implements ICellOutput {\n\thandle = _handle++;\n\tprivate _onDidChangeData = new Emitter<void>();\n\tonDidChangeData = this._onDidChangeData.event;\n\n\tget outputs() {\n\t\treturn this._rawOutput.outputs || [];\n\t}\n\n\tget metadata(): Record<string, any> | undefined {\n\t\treturn this._rawOutput.metadata;\n\t}\n\n\tget outputId(): string {\n\t\treturn this._rawOutput.outputId;\n\t}\n\n\tconstructor(\n\t\treadonly _rawOutput: IOutputDto\n\t) {\n\t\tsuper();\n\t}\n\n\treplaceData(items: IOutputItemDto[]) {\n\t\tthis._rawOutput.outputs = items;\n\t\tthis._onDidChangeData.fire();\n\t}\n\n\tappendData(items: IOutputItemDto[]) {\n\t\tthis._rawOutput.outputs.push(...items);\n\t\t// for (const property in data) {\n\t\t// \tif ((property === 'text/plain' || property === 'application/x.notebook.stream') && this._data[property] !== undefined) {\n\t\t// \t\tconst original = (isArray(this._data[property]) ? this._data[property] : [this._data[property]]) as string[];\n\t\t// \t\tconst more = (isArray(data[property]) ? data[property] : [data[property]]) as string[];\n\t\t// \t\tthis._data[property] = [...original, ...more];\n\t\t// \t}\n\t\t// }\n\n\t\tthis._onDidChangeData.fire();\n\t}\n\n\ttoJSON(): IOutputDto {\n\t\treturn {\n\t\t\t// data: this._data,\n\t\t\tmetadata: this._rawOutput.metadata,\n\t\t\toutputs: this._rawOutput.outputs,\n\t\t\toutputId: this._rawOutput.outputId\n\t\t};\n\t}\n}\n"]}