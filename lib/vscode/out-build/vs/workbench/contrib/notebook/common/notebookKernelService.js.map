{"version":3,"file":"notebookKernelService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/notebook/common/notebookKernelService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAqBnF,QAAA,sBAAsB,GAAG,CAAA,GAAA,+BAAe,CAAA,CAAyB,wBAAwB,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { INotebookKernel } from 'vs/workbench/contrib/notebook/common/notebookCommon';\n\nexport interface INotebookKernelBindEvent {\n\tnotebook: URI;\n\toldKernel: string | undefined;\n\tnewKernel: string | undefined;\n}\n\nexport interface INotebookKernelMatchResult {\n\treadonly selected: INotebookKernel | undefined;\n\treadonly all: INotebookKernel[];\n}\n\nexport interface INotebookTextModelLike { uri: URI; viewType: string; }\n\nexport const INotebookKernelService = createDecorator<INotebookKernelService>('INotebookKernelService');\n\nexport interface INotebookKernelService {\n\t_serviceBrand: undefined;\n\n\treadonly onDidAddKernel: Event<INotebookKernel>;\n\treadonly onDidRemoveKernel: Event<INotebookKernel>;\n\treadonly onDidChangeNotebookKernelBinding: Event<INotebookKernelBindEvent>;\n\treadonly onDidChangeNotebookAffinity: Event<void>\n\n\tregisterKernel(kernel: INotebookKernel): IDisposable;\n\n\tgetMatchingKernel(notebook: INotebookTextModelLike): INotebookKernelMatchResult;\n\n\t/**\n\t * Bind a notebook document to a kernel. A notebook is only bound to one kernel\n\t * but a kernel can be bound to many notebooks (depending on its configuration)\n\t */\n\tselectKernelForNotebook(kernel: INotebookKernel, notebook: INotebookTextModelLike): void;\n\n\t/**\n\t * Bind a notebook type to a kernel.\n\t * @param viewType\n\t * @param kernel\n\t */\n\tselectKernelForNotebookType(kernel: INotebookKernel, viewType: string): void;\n\n\t/**\n\t * Set a perference of a kernel for a certain notebook. Higher values win, `undefined` removes the preference\n\t */\n\tupdateKernelNotebookAffinity(kernel: INotebookKernel, notebook: URI, preference: number | undefined): void;\n\n}\n"]}