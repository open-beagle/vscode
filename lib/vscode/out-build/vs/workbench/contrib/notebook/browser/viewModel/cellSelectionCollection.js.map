{"version":3,"file":"cellSelectionCollection.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/notebook/browser/viewModel/cellSelectionCollection.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAMhG,SAAS,WAAW,CAAC,CAAe,EAAE,CAAe;QACpD,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,MAAM,EAAE;YAC1B,OAAO,KAAK,CAAC;SACb;QAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAClC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE;gBACvD,OAAO,KAAK,CAAC;aACb;SACD;QAED,OAAO,IAAI,CAAC;IACb,CAAC;IAED,wDAAwD;IACxD,oIAAoI;IACpI,MAAa,+BAAgC,SAAQ,sBAAU;QAG9D;YACC,KAAK,EAAE,CAAC;YAHQ,0BAAqB,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,eAAO,EAAU,CAAC,CAAC;YAMvE,aAAQ,GAAsB,IAAI,CAAC;YAEnC,gBAAW,GAAiB,EAAE,CAAC;QAJvC,CAAC;QAHD,IAAI,oBAAoB,KAAoB,OAAO,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC,CAAC;QAStF,IAAI,UAAU;YACb,OAAO,IAAI,CAAC,WAAW,CAAC;QACzB,CAAC;QAED,IAAI,SAAS;YACZ,OAAO,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;QAC5B,CAAC;QAED,IAAI,KAAK;;YACR,OAAO,MAAA,IAAI,CAAC,QAAQ,mCAAI,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC;QAC9C,CAAC;QAED,QAAQ,CAAC,OAA0B,EAAE,UAAwB,EAAE,cAAuB,EAAE,MAAwB;YAC/G,MAAM,OAAO,GAAG,OAAO,KAAK,IAAI,CAAC,QAAQ,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;YAExF,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;YACxB,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;YAC9B,IAAI,OAAO,IAAI,cAAc,EAAE;gBAC9B,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aACxC;QACF,CAAC;QAED,QAAQ,CAAC,SAA4B,EAAE,cAAuB,EAAE,MAAwB;YACvF,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,EAAE,cAAc,EAAE,MAAM,CAAC,CAAC;QACpE,CAAC;QAED,aAAa,CAAC,UAAwB,EAAE,cAAuB,EAAE,MAAwB;YACxF,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAU,EAAE,cAAc,EAAE,MAAM,CAAC,CAAC;QAClE,CAAC;KACD;IAxCD,0EAwCC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { ICellRange } from 'vs/workbench/contrib/notebook/common/notebookRange';\n\nfunction rangesEqual(a: ICellRange[], b: ICellRange[]) {\n\tif (a.length !== b.length) {\n\t\treturn false;\n\t}\n\n\tfor (let i = 0; i < a.length; i++) {\n\t\tif (a[i].start !== b[i].start || a[i].end !== b[i].end) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\n// Handle first, then we migrate to ICellRange competely\n// Challenge is List View talks about `element`, which needs extra work to convert to ICellRange as we support Folding and Cell Move\nexport class NotebookCellSelectionCollection extends Disposable {\n\tprivate readonly _onDidChangeSelection = this._register(new Emitter<string>());\n\tget onDidChangeSelection(): Event<string> { return this._onDidChangeSelection.event; }\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tprivate _primary: ICellRange | null = null;\n\n\tprivate _selections: ICellRange[] = [];\n\n\tget selections(): ICellRange[] {\n\t\treturn this._selections;\n\t}\n\n\tget selection(): ICellRange {\n\t\treturn this._selections[0];\n\t}\n\n\tget focus(): ICellRange {\n\t\treturn this._primary ?? { start: 0, end: 0 };\n\t}\n\n\tsetState(primary: ICellRange | null, selections: ICellRange[], forceEventEmit: boolean, source: 'view' | 'model') {\n\t\tconst changed = primary !== this._primary || !rangesEqual(this._selections, selections);\n\n\t\tthis._primary = primary;\n\t\tthis._selections = selections;\n\t\tif (changed || forceEventEmit) {\n\t\t\tthis._onDidChangeSelection.fire(source);\n\t\t}\n\t}\n\n\tsetFocus(selection: ICellRange | null, forceEventEmit: boolean, source: 'view' | 'model') {\n\t\tthis.setState(selection, this._selections, forceEventEmit, source);\n\t}\n\n\tsetSelections(selections: ICellRange[], forceEventEmit: boolean, source: 'view' | 'model') {\n\t\tthis.setState(this._primary, selections, forceEventEmit, source);\n\t}\n}\n"]}