{"version":3,"file":"cellOutputViewModel.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/notebook/browser/viewModel/cellOutputViewModel.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAQhG,IAAI,MAAM,GAAG,CAAC,CAAC;IACf,MAAa,mBAAoB,SAAQ,sBAAU;QAelD,YACU,aAAoC,EAC5B,cAA2B,EAC3B,gBAAkC;YAEnD,KAAK,EAAE,CAAC;YAJC,kBAAa,GAAb,aAAa,CAAuB;YAC5B,mBAAc,GAAd,cAAc,CAAa;YAC3B,qBAAgB,GAAhB,gBAAgB,CAAkB;YAjBpD,iBAAY,GAAG,MAAM,EAAE,CAAC;YAKhB,oBAAe,GAAW,CAAC,CAAC,CAAC;QAerC,CAAC;QAnBD,IAAI,KAAK;YACR,OAAO,IAAI,CAAC,cAAc,CAAC;QAC5B,CAAC;QAGD,IAAI,cAAc;YACjB,OAAO,IAAI,CAAC,eAAe,CAAC;QAC7B,CAAC;QAED,IAAI,cAAc,CAAC,KAAa;YAC/B,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;QAC9B,CAAC;QAUD,aAAa;YACZ,yFAAyF;YACzF,OAAO,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,CAAA,GAAA,oCAAmB,CAAA,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;QAC9E,CAAC;QAED,gBAAgB,CAAC,SAA4B,EAAE,cAA6C;YAC3F,MAAM,SAAS,GAAG,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,SAAS,EAAE,cAAc,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;YAC/F,IAAI,IAAI,CAAC,eAAe,KAAK,CAAC,CAAC,EAAE;gBAChC,+EAA+E;gBAC/E,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,UAAU,KAAK,uCAAsB,IAAI,QAAQ,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;aAC1I;YAED,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;QAC1C,CAAC;QAED,SAAS;YACR,OAAO;gBACN,OAAO,EAAE,IAAI,CAAC,cAAc,CAAC,OAAO;gBACpC,+BAA+B;aAC/B,CAAC;QACH,CAAC;KACD;IA5CD,kDA4CC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { ICellOutputViewModel, IGenericCellViewModel } from 'vs/workbench/contrib/notebook/browser/notebookBrowser';\nimport { NotebookTextModel } from 'vs/workbench/contrib/notebook/common/model/notebookTextModel';\nimport { ICellOutput, IOrderedMimeType, mimeTypeIsMergeable, RENDERER_NOT_AVAILABLE } from 'vs/workbench/contrib/notebook/common/notebookCommon';\nimport { INotebookService } from 'vs/workbench/contrib/notebook/common/notebookService';\n\nlet handle = 0;\nexport class CellOutputViewModel extends Disposable implements ICellOutputViewModel {\n\toutputHandle = handle++;\n\tget model(): ICellOutput {\n\t\treturn this._outputRawData;\n\t}\n\n\tprivate _pickedMimeType: number = -1;\n\tget pickedMimeType() {\n\t\treturn this._pickedMimeType;\n\t}\n\n\tset pickedMimeType(value: number) {\n\t\tthis._pickedMimeType = value;\n\t}\n\n\tconstructor(\n\t\treadonly cellViewModel: IGenericCellViewModel,\n\t\tprivate readonly _outputRawData: ICellOutput,\n\t\tprivate readonly _notebookService: INotebookService\n\t) {\n\t\tsuper();\n\t}\n\n\tsupportAppend() {\n\t\t// if there is any mime type that's not mergeable then the whole output is not mergeable.\n\t\treturn this._outputRawData.outputs.every(op => mimeTypeIsMergeable(op.mime));\n\t}\n\n\tresolveMimeTypes(textModel: NotebookTextModel, kernelProvides: readonly string[] | undefined): [readonly IOrderedMimeType[], number] {\n\t\tconst mimeTypes = this._notebookService.getMimeTypeInfo(textModel, kernelProvides, this.model);\n\t\tif (this._pickedMimeType === -1) {\n\t\t\t// there is at least one mimetype which is safe and can be rendered by the core\n\t\t\tthis._pickedMimeType = Math.max(mimeTypes.findIndex(mimeType => mimeType.rendererId !== RENDERER_NOT_AVAILABLE && mimeType.isTrusted), 0);\n\t\t}\n\n\t\treturn [mimeTypes, this._pickedMimeType];\n\t}\n\n\ttoRawJSON() {\n\t\treturn {\n\t\t\toutputs: this._outputRawData.outputs,\n\t\t\t// TODO@rebronix, no id, right?\n\t\t};\n\t}\n}\n"]}