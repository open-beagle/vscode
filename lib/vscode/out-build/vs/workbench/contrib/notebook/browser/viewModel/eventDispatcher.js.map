{"version":3,"file":"eventDispatcher.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/notebook/browser/viewModel/eventDispatcher.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAMhG,IAAY,qBAIX;IAJD,WAAY,qBAAqB;QAChC,mFAAiB,CAAA;QACjB,uFAAmB,CAAA;QACnB,yFAAoB,CAAA;IACrB,CAAC,EAJW,qBAAqB,GAArB,6BAAqB,KAArB,6BAAqB,QAIhC;IAED,MAAa,0BAA0B;QAGtC,YAAqB,MAAiC,EAAW,KAAyB;YAArE,WAAM,GAAN,MAAM,CAA2B;YAAW,UAAK,GAAL,KAAK,CAAoB;YAF1E,SAAI,GAAG,qBAAqB,CAAC,aAAa,CAAC;QAI3D,CAAC;KACD;IAND,gEAMC;IAGD,MAAa,4BAA4B;QAGxC,YAAqB,MAAgC;YAAhC,WAAM,GAAN,MAAM,CAA0B;YAFrC,SAAI,GAAG,qBAAqB,CAAC,eAAe,CAAC;QAI7D,CAAC;KACD;IAND,oEAMC;IAED,MAAa,6BAA6B;QAGzC,YAAqB,MAAqC,EAAW,IAAoB;YAApE,WAAM,GAAN,MAAM,CAA+B;YAAW,SAAI,GAAJ,IAAI,CAAgB;YAFzE,SAAI,GAAG,qBAAqB,CAAC,gBAAgB,CAAC;QAI9D,CAAC;KACD;IAND,sEAMC;IAKD,MAAa,uBAAuB;QAQnC;YAPmB,uBAAkB,GAAG,IAAI,eAAO,EAA8B,CAAC;YACzE,sBAAiB,GAAG,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC;YACxC,yBAAoB,GAAG,IAAI,eAAO,EAAgC,CAAC;YAC7E,wBAAmB,GAAG,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC;YAC5C,0BAAqB,GAAG,IAAI,eAAO,EAAiC,CAAC;YAC/E,yBAAoB,GAAG,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC;QAGjE,CAAC;QAED,IAAI,CAAC,MAA2B;YAC/B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;gBAClD,MAAM,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;gBAEpB,QAAQ,CAAC,CAAC,IAAI,EAAE;oBACf,KAAK,qBAAqB,CAAC,aAAa;wBACvC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBAChC,MAAM;oBACP,KAAK,qBAAqB,CAAC,eAAe;wBACzC,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBAClC,MAAM;oBACP,KAAK,qBAAqB,CAAC,gBAAgB;wBAC1C,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBACnC,MAAM;iBACP;aACD;QACF,CAAC;KACD;IA5BD,0DA4BC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from 'vs/base/common/event';\nimport { NotebookDocumentMetadata } from 'vs/workbench/contrib/notebook/common/notebookCommon';\nimport { NotebookLayoutChangeEvent, NotebookLayoutInfo, CellViewModelStateChangeEvent, ICellViewModel } from 'vs/workbench/contrib/notebook/browser/notebookBrowser';\n\nexport enum NotebookViewEventType {\n\tLayoutChanged = 1,\n\tMetadataChanged = 2,\n\tCellStateChanged = 3\n}\n\nexport class NotebookLayoutChangedEvent {\n\tpublic readonly type = NotebookViewEventType.LayoutChanged;\n\n\tconstructor(readonly source: NotebookLayoutChangeEvent, readonly value: NotebookLayoutInfo) {\n\n\t}\n}\n\n\nexport class NotebookMetadataChangedEvent {\n\tpublic readonly type = NotebookViewEventType.MetadataChanged;\n\n\tconstructor(readonly source: NotebookDocumentMetadata) {\n\n\t}\n}\n\nexport class NotebookCellStateChangedEvent {\n\tpublic readonly type = NotebookViewEventType.CellStateChanged;\n\n\tconstructor(readonly source: CellViewModelStateChangeEvent, readonly cell: ICellViewModel) {\n\n\t}\n}\n\n\nexport type NotebookViewEvent = NotebookLayoutChangedEvent | NotebookMetadataChangedEvent | NotebookCellStateChangedEvent;\n\nexport class NotebookEventDispatcher {\n\tprotected readonly _onDidChangeLayout = new Emitter<NotebookLayoutChangedEvent>();\n\treadonly onDidChangeLayout = this._onDidChangeLayout.event;\n\tprotected readonly _onDidChangeMetadata = new Emitter<NotebookMetadataChangedEvent>();\n\treadonly onDidChangeMetadata = this._onDidChangeMetadata.event;\n\tprotected readonly _onDidChangeCellState = new Emitter<NotebookCellStateChangedEvent>();\n\treadonly onDidChangeCellState = this._onDidChangeCellState.event;\n\n\tconstructor() {\n\t}\n\n\temit(events: NotebookViewEvent[]) {\n\t\tfor (let i = 0, len = events.length; i < len; i++) {\n\t\t\tconst e = events[i];\n\n\t\t\tswitch (e.type) {\n\t\t\t\tcase NotebookViewEventType.LayoutChanged:\n\t\t\t\t\tthis._onDidChangeLayout.fire(e);\n\t\t\t\t\tbreak;\n\t\t\t\tcase NotebookViewEventType.MetadataChanged:\n\t\t\t\t\tthis._onDidChangeMetadata.fire(e);\n\t\t\t\t\tbreak;\n\t\t\t\tcase NotebookViewEventType.CellStateChanged:\n\t\t\t\t\tthis._onDidChangeCellState.fire(e);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\n\n"]}