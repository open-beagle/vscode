{"version":3,"sources":["vs/workbench/contrib/notebook/browser/contrib/layout/layoutActions.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAShG,MAAM,4BAA4B,GAAG,oCAAoC,CAAC;IAE1E,MAAa,+BAAgC,SAAQ,iBAAO;QAC3D;YACC,KAAK,CAAC;gBACL,EAAE,EAAE,4BAA4B;gBAChC,KAAK,EAAE,EAAE,KAAK,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAoC,EAAE,IAA8B,CAAC,EAAE,QAAQ,EAAE,8BAA8B,EAAE;gBAC1I,IAAI,EAAE,CAAC;wBACN,EAAE,EAAE,gBAAM,CAAC,iBAAiB;wBAC5B,KAAK,EAAE,MAAM;wBACb,KAAK,EAAE,CAAC;qBACR,CAAC;gBACF,QAAQ,EAAE,uCAAyB;gBACnC,EAAE,EAAE,KAAK;aACT,CAAC,CAAC;QACJ,CAAC;QAED,KAAK,CAAC,GAAG,CAAC,QAA0B,EAAE,OAAY;YACjD,MAAM,MAAM,GAAG,OAAO,IAAI,OAAO,CAAC,EAAE,CAAC,CAAC,CAAE,OAAkC,CAAC,cAAc,CAAC,CAAC,CAAC,SAAS,CAAC;YACtG,IAAI,MAAM,IAAI,MAAM,CAAC,QAAQ,EAAE,EAAE;gBAChC,eAAe;gBACf,MAAM,QAAQ,GAAG,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC;gBAC3C,MAAM,oBAAoB,GAAG,QAAQ,CAAC,GAAG,CAAC,qCAAqB,CAAC,CAAC;gBACjE,MAAM,eAAe,GAAG,oBAAoB,CAAC,QAAQ,CAAqC,kCAAiB,CAAC,CAAC;gBAC7G,MAAM,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,eAAe,CAAC,CAAC;gBACjE,MAAM,oBAAoB,CAAC,WAAW,CAAC,kCAAiB,EAAE,SAAS,CAAC,CAAC;aACrE;QACF,CAAC;QAED,cAAc,CAAC,QAAgB,EAAE,eAAmD;;YACnF,IAAI,OAAO,eAAe,KAAK,QAAQ,EAAE;gBACxC,SAAS;gBACT,IAAI,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE;oBAC9D,iBAAiB;oBACjB,MAAM,YAAY,GAAG,eAAe,KAAK,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC;oBACpE,IAAI,MAAM,GAA8B;wBACvC,OAAO,EAAE,eAAe;qBACxB,CAAC;oBACF,MAAM,CAAC,QAAQ,CAAC,GAAG,YAAY,CAAC;oBAChC,OAAO,MAAM,CAAC;iBACd;qBAAM;oBACN,mBAAmB;oBACnB,IAAI,MAAM,GAA8B;wBACvC,OAAO,EAAE,OAAO;qBAChB,CAAC;oBACF,MAAM,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC;oBAC1B,OAAO,MAAM,CAAC;iBACd;aACD;iBAAM;gBACN,MAAM,QAAQ,GAAG,MAAA,MAAA,eAAe,CAAC,QAAQ,CAAC,mCAAI,eAAe,CAAC,SAAS,CAAC,mCAAI,OAAO,CAAC;gBACpF,MAAM,YAAY,GAAG,QAAQ,KAAK,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC;gBAC7D,IAAI,SAAS,qBACT,eAAe,CAClB,CAAC;gBACF,SAAS,CAAC,QAAQ,CAAC,GAAG,YAAY,CAAC;gBACnC,OAAO,SAAS,CAAC;aACjB;QAEF,CAAC;KACD;IAzDD,0EAyDC;IACD,CAAA,GAAA,yBAAe,CAAA,CAAC,+BAA+B,CAAC,CAAC","file":"layoutActions.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { Action2, MenuId, registerAction2 } from 'vs/platform/actions/common/actions';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { INotebookActionContext, NOTEBOOK_ACTIONS_CATEGORY } from 'vs/workbench/contrib/notebook/browser/contrib/coreActions';\nimport { CellToolbarLocKey } from 'vs/workbench/contrib/notebook/common/notebookCommon';\n\nconst TOGGLE_CELL_TOOLBAR_POSITION = 'notebook.toggleCellToolbarPosition';\n\nexport class ToggleCellToolbarPositionAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TOGGLE_CELL_TOOLBAR_POSITION,\n\t\t\ttitle: { value: localize('notebook.toggleCellToolbarPosition', \"Toggle Cell Toolbar Position\"), original: 'Toggle Cell Toolbar Position' },\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.NotebookCellTitle,\n\t\t\t\tgroup: 'View',\n\t\t\t\torder: 1\n\t\t\t}],\n\t\t\tcategory: NOTEBOOK_ACTIONS_CATEGORY,\n\t\t\tf1: false\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, context: any): Promise<void> {\n\t\tconst editor = context && context.ui ? (context as INotebookActionContext).notebookEditor : undefined;\n\t\tif (editor && editor.hasModel()) {\n\t\t\t// from toolbar\n\t\t\tconst viewType = editor.viewModel.viewType;\n\t\t\tconst configurationService = accessor.get(IConfigurationService);\n\t\t\tconst toolbarPosition = configurationService.getValue<string | { [key: string]: string }>(CellToolbarLocKey);\n\t\t\tconst newConfig = this.togglePosition(viewType, toolbarPosition);\n\t\t\tawait configurationService.updateValue(CellToolbarLocKey, newConfig);\n\t\t}\n\t}\n\n\ttogglePosition(viewType: string, toolbarPosition: string | { [key: string]: string }): { [key: string]: string } {\n\t\tif (typeof toolbarPosition === 'string') {\n\t\t\t// legacy\n\t\t\tif (['left', 'right', 'hidden'].indexOf(toolbarPosition) >= 0) {\n\t\t\t\t// valid position\n\t\t\t\tconst newViewValue = toolbarPosition === 'right' ? 'left' : 'right';\n\t\t\t\tlet config: { [key: string]: string } = {\n\t\t\t\t\tdefault: toolbarPosition\n\t\t\t\t};\n\t\t\t\tconfig[viewType] = newViewValue;\n\t\t\t\treturn config;\n\t\t\t} else {\n\t\t\t\t// invalid position\n\t\t\t\tlet config: { [key: string]: string } = {\n\t\t\t\t\tdefault: 'right',\n\t\t\t\t};\n\t\t\t\tconfig[viewType] = 'left';\n\t\t\t\treturn config;\n\t\t\t}\n\t\t} else {\n\t\t\tconst oldValue = toolbarPosition[viewType] ?? toolbarPosition['default'] ?? 'right';\n\t\t\tconst newViewValue = oldValue === 'right' ? 'left' : 'right';\n\t\t\tlet newConfig = {\n\t\t\t\t...toolbarPosition\n\t\t\t};\n\t\t\tnewConfig[viewType] = newViewValue;\n\t\t\treturn newConfig;\n\t\t}\n\n\t}\n}\nregisterAction2(ToggleCellToolbarPositionAction);\n\n"]}