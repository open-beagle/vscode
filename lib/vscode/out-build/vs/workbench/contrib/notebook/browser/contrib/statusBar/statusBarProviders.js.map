{"version":3,"sources":["vs/workbench/contrib/notebook/browser/contrib/statusBar/statusBarProviders.ts"],"names":[],"mappings":"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","file":"statusBarProviders.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { isWindows } from 'vs/base/common/platform';\nimport { URI } from 'vs/base/common/uri';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { localize } from 'vs/nls';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { Extensions as WorkbenchExtensions, IWorkbenchContributionsRegistry } from 'vs/workbench/common/contributions';\nimport { CHANGE_CELL_LANGUAGE } from 'vs/workbench/contrib/notebook/browser/notebookBrowser';\nimport { INotebookCellStatusBarService } from 'vs/workbench/contrib/notebook/common/notebookCellStatusBarService';\nimport { CellKind, CellStatusbarAlignment, INotebookCellStatusBarItem, INotebookCellStatusBarItemList, INotebookCellStatusBarItemProvider } from 'vs/workbench/contrib/notebook/common/notebookCommon';\nimport { NotebookSelector } from 'vs/workbench/contrib/notebook/common/notebookSelector';\nimport { INotebookService } from 'vs/workbench/contrib/notebook/common/notebookService';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\n\nclass CellStatusBarPlaceholderProvider implements INotebookCellStatusBarItemProvider {\n\treadonly selector: NotebookSelector = {\n\t\tpattern: '**/*'\n\t};\n\n\tconstructor(\n\t\t@INotebookService private readonly _notebookService: INotebookService,\n\t) { }\n\n\tasync provideCellStatusBarItems(uri: URI, index: number, token: CancellationToken): Promise<INotebookCellStatusBarItemList | undefined> {\n\t\tconst doc = this._notebookService.getNotebookTextModel(uri);\n\t\tconst cell = doc?.cells[index];\n\t\tif (!cell || typeof cell.metadata.runState !== 'undefined' || typeof cell.metadata.lastRunSuccess !== 'undefined') {\n\t\t\treturn;\n\t\t}\n\n\t\tlet text: string;\n\t\tif (cell.cellKind === CellKind.Code) {\n\t\t\ttext = isWindows ?\n\t\t\t\tlocalize('notebook.cell.status.codeExecuteTipWin', \"Press Ctrl+Alt+Enter to execute cell\") :\n\t\t\t\tlocalize('notebook.cell.status.codeExecuteTipNotWin', \"Press Ctrl+Enter to execute cell\");\n\t\t} else {\n\t\t\ttext = localize('notebook.cell.status.markdownExecuteTip', \"Press Escape to stop editing\");\n\t\t}\n\n\t\tconst item = <INotebookCellStatusBarItem>{\n\t\t\ttext,\n\t\t\ttooltip: text,\n\t\t\talignment: CellStatusbarAlignment.Left,\n\t\t\topacity: '0.7',\n\t\t\tonlyShowWhenActive: true\n\t\t};\n\t\treturn {\n\t\t\titems: [item]\n\t\t};\n\t}\n}\n\nclass CellStatusBarLanguagePickerProvider implements INotebookCellStatusBarItemProvider {\n\treadonly selector: NotebookSelector = {\n\t\tpattern: '**/*'\n\t};\n\n\tconstructor(\n\t\t@INotebookService private readonly _notebookService: INotebookService,\n\t\t@IModeService private readonly _modeService: IModeService,\n\t) { }\n\n\tasync provideCellStatusBarItems(uri: URI, index: number, _token: CancellationToken): Promise<INotebookCellStatusBarItemList | undefined> {\n\t\tconst doc = this._notebookService.getNotebookTextModel(uri);\n\t\tconst cell = doc?.cells[index];\n\t\tif (!cell) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst modeId = cell.cellKind === CellKind.Markdown ?\n\t\t\t'markdown' :\n\t\t\t(this._modeService.getModeIdForLanguageName(cell.language) || cell.language);\n\t\tconst text = this._modeService.getLanguageName(modeId) || this._modeService.getLanguageName('plaintext');\n\t\tconst item = <INotebookCellStatusBarItem>{\n\t\t\ttext,\n\t\t\tcommand: CHANGE_CELL_LANGUAGE,\n\t\t\ttooltip: localize('notebook.cell.status.language', \"Select Cell Language Mode\"),\n\t\t\talignment: CellStatusbarAlignment.Right,\n\t\t\tpriority: -Number.MAX_SAFE_INTEGER\n\t\t};\n\t\treturn {\n\t\t\titems: [item]\n\t\t};\n\t}\n}\n\nclass BuiltinCellStatusBarProviders extends Disposable {\n\tconstructor(\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@INotebookCellStatusBarService notebookCellStatusBarService: INotebookCellStatusBarService) {\n\t\tsuper();\n\n\t\tconst builtinProviders = [\n\t\t\tCellStatusBarPlaceholderProvider,\n\t\t\tCellStatusBarLanguagePickerProvider,\n\t\t];\n\t\tbuiltinProviders.forEach(p => {\n\t\t\tthis._register(notebookCellStatusBarService.registerCellStatusBarItemProvider(instantiationService.createInstance(p)));\n\t\t});\n\t}\n}\n\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(BuiltinCellStatusBarProviders, LifecyclePhase.Restored);\n"]}