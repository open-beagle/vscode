{"version":3,"file":"notebookCellStatusBarServiceImpl.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/notebook/browser/notebookCellStatusBarServiceImpl.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAWhG,MAAa,4BAA6B,SAAQ,sBAAU;QAU3D;YACC,KAAK,EAAE,CAAC;YATD,0BAAqB,GAAG,IAAI,eAAO,EAAQ,CAAC;YAC3C,yBAAoB,GAAgB,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC;YAEtE,sBAAiB,GAAG,IAAI,eAAO,EAAQ,CAAC;YACvC,qBAAgB,GAAgB,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC;YAE9D,eAAU,GAAyC,EAAE,CAAC;QAI9D,CAAC;QAED,iCAAiC,CAAC,QAA4C;YAC7E,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC/B,IAAI,cAAuC,CAAC;YAC5C,IAAI,QAAQ,CAAC,yBAAyB,EAAE;gBACvC,cAAc,GAAG,QAAQ,CAAC,yBAAyB,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC,CAAC;aACzF;YAED,IAAI,CAAC,qBAAqB,CAAC,IAAI,EAAE,CAAC;YAElC,OAAO,CAAA,GAAA,wBAAY,CAAA,CAAC,GAAG,EAAE;gBACxB,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,OAAO,EAAE,CAAC;gBAC1B,MAAM,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,QAAQ,CAAC,CAAC;gBAC3D,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;YAChC,CAAC,CAAC,CAAC;QACJ,CAAC;QAED,KAAK,CAAC,wBAAwB,CAAC,MAAW,EAAE,SAAiB,EAAE,QAAgB,EAAE,KAAwB;YACxG,MAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAA,GAAA,wBAAK,CAAA,CAAC,CAAC,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;YACvF,OAAO,MAAM,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,EAAC,CAAC,EAAC,EAAE;;gBAChD,IAAI;oBACH,OAAO,MAAA,MAAM,CAAC,CAAC,yBAAyB,CAAC,MAAM,EAAE,SAAS,EAAE,KAAK,CAAC,mCAAI,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;iBACpF;gBAAC,OAAO,CAAC,EAAE;oBACX,CAAA,GAAA,kCAAyB,CAAA,CAAC,CAAC,CAAC,CAAC;oBAC7B,OAAO,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;iBACrB;YACF,CAAC,CAAC,CAAC,CAAC;QACL,CAAC;KAGD;IA3CD,oEA2CC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { onUnexpectedExternalError } from 'vs/base/common/errors';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { INotebookCellStatusBarService } from 'vs/workbench/contrib/notebook/common/notebookCellStatusBarService';\nimport { INotebookCellStatusBarItemList, INotebookCellStatusBarItemProvider } from 'vs/workbench/contrib/notebook/common/notebookCommon';\nimport { score } from 'vs/workbench/contrib/notebook/common/notebookSelector';\n\nexport class NotebookCellStatusBarService extends Disposable implements INotebookCellStatusBarService {\n\n\tprivate _onDidChangeProviders = new Emitter<void>();\n\treadonly onDidChangeProviders: Event<void> = this._onDidChangeProviders.event;\n\n\tprivate _onDidChangeItems = new Emitter<void>();\n\treadonly onDidChangeItems: Event<void> = this._onDidChangeItems.event;\n\n\tprivate _providers: INotebookCellStatusBarItemProvider[] = [];\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tregisterCellStatusBarItemProvider(provider: INotebookCellStatusBarItemProvider): IDisposable {\n\t\tthis._providers.push(provider);\n\t\tlet changeListener: IDisposable | undefined;\n\t\tif (provider.onDidChangeStatusBarItems) {\n\t\t\tchangeListener = provider.onDidChangeStatusBarItems(() => this._onDidChangeItems.fire());\n\t\t}\n\n\t\tthis._onDidChangeProviders.fire();\n\n\t\treturn toDisposable(() => {\n\t\t\tchangeListener?.dispose();\n\t\t\tconst idx = this._providers.findIndex(p => p === provider);\n\t\t\tthis._providers.splice(idx, 1);\n\t\t});\n\t}\n\n\tasync getStatusBarItemsForCell(docUri: URI, cellIndex: number, viewType: string, token: CancellationToken): Promise<INotebookCellStatusBarItemList[]> {\n\t\tconst providers = this._providers.filter(p => score(p.selector, docUri, viewType) > 0);\n\t\treturn await Promise.all(providers.map(async p => {\n\t\t\ttry {\n\t\t\t\treturn await p.provideCellStatusBarItems(docUri, cellIndex, token) ?? { items: [] };\n\t\t\t} catch (e) {\n\t\t\t\tonUnexpectedExternalError(e);\n\t\t\t\treturn { items: [] };\n\t\t\t}\n\t\t}));\n\t}\n\n\treadonly _serviceBrand: undefined;\n}\n"]}