{"version":3,"file":"diffNestedCellViewModel.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/notebook/browser/diff/diffNestedCellViewModel.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAYhG,IAAa,uBAAuB,GAApC,MAAa,uBAAwB,SAAQ,sBAAU;QA4DtD,YACU,SAAgC,EACf,gBAAkC;YAE5D,KAAK,EAAE,CAAC;YAHC,cAAS,GAAT,SAAS,CAAuB;YACf,qBAAgB,GAAhB,gBAAgB,CAAkB;YApC1C,sBAAiB,GAA2C,IAAI,CAAC,SAAS,CAAC,IAAI,eAAO,EAAiC,CAAC,CAAC;YAEpI,oBAAe,GAAY,KAAK,CAAC;YAUjC,mBAAc,GAAY,KAAK,CAAC;YAgB9B,sBAAiB,GAAa,EAAE,CAAC;YACjC,gBAAW,GAA6B,IAAI,CAAC;YACpC,6BAAwB,GAAG,IAAI,eAAO,EAAQ,CAAC;YACzD,4BAAuB,GAAG,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC;YAQtE,IAAI,CAAC,GAAG,GAAG,CAAA,GAAA,mBAAY,CAAA,EAAE,CAAC;YAE1B,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,yCAAmB,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;YAC5H,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC,OAAO,EAAE,EAAE;gBAC5D,OAAO,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;oBAClC,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC/E,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,yCAAmB,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;gBAC/I,CAAC,CAAC,CAAC;gBAEH,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;gBACxB,IAAI,CAAC,wBAAwB,CAAC,IAAI,EAAE,CAAC;YACtC,CAAC,CAAC,CAAC,CAAC;YACJ,IAAI,CAAC,iBAAiB,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACnE,CAAC;QA5ED,IAAI,EAAE;YACL,OAAO,IAAI,CAAC,GAAG,CAAC;QACjB,CAAC;QAED,IAAI,OAAO;YACV,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;QAC/B,CAAC;QAED,IAAI,QAAQ;YACX,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC;QAChC,CAAC;QAED,IAAI,QAAQ;YACX,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC;QAChC,CAAC;QAED,IAAI,GAAG;YACN,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC;QAC3B,CAAC;QAED,IAAI,MAAM;YACT,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;QAC9B,CAAC;QAKD,IAAW,eAAe;YACzB,OAAO,IAAI,CAAC,eAAe,CAAC;QAC7B,CAAC;QAED,IAAW,eAAe,CAAC,CAAU;YACpC,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC;YACzB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,sBAAsB,EAAE,IAAI,EAAE,CAAC,CAAC;QAC/D,CAAC;QAGD,IAAW,eAAe;YACzB,OAAO,IAAI,CAAC,cAAc,CAAC;QAC5B,CAAC;QAED,IAAW,eAAe,CAAC,CAAU;YACpC,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC;YACxB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,sBAAsB,EAAE,IAAI,EAAE,CAAC,CAAC;QAC/D,CAAC;QAID,IAAI,iBAAiB;YACpB,OAAO,IAAI,CAAC,iBAAiB,CAAC;QAC/B,CAAC;QA4BO,iBAAiB;YACxB,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;gBACtB,MAAM,MAAM,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;gBAC9D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBACvD,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;iBACtC;gBAED,IAAI,CAAC,WAAW,GAAG,IAAI,qCAAiB,CAAC,MAAM,CAAC,CAAC;aACjD;QACF,CAAC;QAED,eAAe,CAAC,KAAa;YAC5B,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAEzB,IAAI,KAAK,IAAI,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE;gBAC3C,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;aAC9C;YAED,OAAO,IAAI,CAAC,WAAY,CAAC,mBAAmB,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;QACzD,CAAC;QAED,kBAAkB,CAAC,KAAa,EAAE,MAAc;YAC/C,IAAI,KAAK,IAAI,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE;gBAC3C,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;aAC9C;YAED,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACzB,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC;YACvC,IAAI,IAAI,CAAC,WAAY,CAAC,WAAW,CAAC,KAAK,EAAE,MAAM,CAAC,EAAE;gBACjD,IAAI,CAAC,wBAAwB,CAAC,IAAI,EAAE,CAAC;aACrC;QACF,CAAC;QAED,oBAAoB;;YACnB,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAEzB,OAAO,MAAA,MAAA,IAAI,CAAC,WAAW,0CAAE,aAAa,EAAE,mCAAI,CAAC,CAAC;QAC/C,CAAC;KACD,CAAA;IAtHY,uBAAuB;QA8DjC,WAAA,kCAAgB,CAAA;OA9DN,uBAAuB,CAsHnC;IAtHY,0DAAuB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { generateUuid } from 'vs/base/common/uuid';\nimport { PrefixSumComputer } from 'vs/editor/common/viewModel/prefixSumComputer';\nimport { IDiffNestedCellViewModel } from 'vs/workbench/contrib/notebook/browser/diff/notebookDiffEditorBrowser';\nimport { CellViewModelStateChangeEvent, ICellOutputViewModel, IGenericCellViewModel } from 'vs/workbench/contrib/notebook/browser/notebookBrowser';\nimport { CellOutputViewModel } from 'vs/workbench/contrib/notebook/browser/viewModel/cellOutputViewModel';\nimport { NotebookCellTextModel } from 'vs/workbench/contrib/notebook/common/model/notebookCellTextModel';\nimport { INotebookService } from 'vs/workbench/contrib/notebook/common/notebookService';\n\nexport class DiffNestedCellViewModel extends Disposable implements IDiffNestedCellViewModel, IGenericCellViewModel {\n\tprivate _id: string;\n\tget id() {\n\t\treturn this._id;\n\t}\n\n\tget outputs() {\n\t\treturn this.textModel.outputs;\n\t}\n\n\tget language() {\n\t\treturn this.textModel.language;\n\t}\n\n\tget metadata() {\n\t\treturn this.textModel.metadata;\n\t}\n\n\tget uri() {\n\t\treturn this.textModel.uri;\n\t}\n\n\tget handle() {\n\t\treturn this.textModel.handle;\n\t}\n\n\tprotected readonly _onDidChangeState: Emitter<CellViewModelStateChangeEvent> = this._register(new Emitter<CellViewModelStateChangeEvent>());\n\n\tprivate _hoveringOutput: boolean = false;\n\tpublic get outputIsHovered(): boolean {\n\t\treturn this._hoveringOutput;\n\t}\n\n\tpublic set outputIsHovered(v: boolean) {\n\t\tthis._hoveringOutput = v;\n\t\tthis._onDidChangeState.fire({ outputIsHoveredChanged: true });\n\t}\n\n\tprivate _focusOnOutput: boolean = false;\n\tpublic get outputIsFocused(): boolean {\n\t\treturn this._focusOnOutput;\n\t}\n\n\tpublic set outputIsFocused(v: boolean) {\n\t\tthis._focusOnOutput = v;\n\t\tthis._onDidChangeState.fire({ outputIsFocusedChanged: true });\n\t}\n\n\tprivate _outputViewModels: ICellOutputViewModel[];\n\n\tget outputsViewModels() {\n\t\treturn this._outputViewModels;\n\t}\n\n\tprotected _outputCollection: number[] = [];\n\tprotected _outputsTop: PrefixSumComputer | null = null;\n\tprotected readonly _onDidChangeOutputLayout = new Emitter<void>();\n\treadonly onDidChangeOutputLayout = this._onDidChangeOutputLayout.event;\n\n\n\tconstructor(\n\t\treadonly textModel: NotebookCellTextModel,\n\t\t@INotebookService private _notebookService: INotebookService\n\t) {\n\t\tsuper();\n\t\tthis._id = generateUuid();\n\n\t\tthis._outputViewModels = this.textModel.outputs.map(output => new CellOutputViewModel(this, output, this._notebookService));\n\t\tthis._register(this.textModel.onDidChangeOutputs((splices) => {\n\t\t\tsplices.reverse().forEach(splice => {\n\t\t\t\tthis._outputCollection.splice(splice[0], splice[1], ...splice[2].map(() => 0));\n\t\t\t\tthis._outputViewModels.splice(splice[0], splice[1], ...splice[2].map(output => new CellOutputViewModel(this, output, this._notebookService)));\n\t\t\t});\n\n\t\t\tthis._outputsTop = null;\n\t\t\tthis._onDidChangeOutputLayout.fire();\n\t\t}));\n\t\tthis._outputCollection = new Array(this.textModel.outputs.length);\n\t}\n\n\tprivate _ensureOutputsTop() {\n\t\tif (!this._outputsTop) {\n\t\t\tconst values = new Uint32Array(this._outputCollection.length);\n\t\t\tfor (let i = 0; i < this._outputCollection.length; i++) {\n\t\t\t\tvalues[i] = this._outputCollection[i];\n\t\t\t}\n\n\t\t\tthis._outputsTop = new PrefixSumComputer(values);\n\t\t}\n\t}\n\n\tgetOutputOffset(index: number): number {\n\t\tthis._ensureOutputsTop();\n\n\t\tif (index >= this._outputCollection.length) {\n\t\t\tthrow new Error('Output index out of range!');\n\t\t}\n\n\t\treturn this._outputsTop!.getAccumulatedValue(index - 1);\n\t}\n\n\tupdateOutputHeight(index: number, height: number): void {\n\t\tif (index >= this._outputCollection.length) {\n\t\t\tthrow new Error('Output index out of range!');\n\t\t}\n\n\t\tthis._ensureOutputsTop();\n\t\tthis._outputCollection[index] = height;\n\t\tif (this._outputsTop!.changeValue(index, height)) {\n\t\t\tthis._onDidChangeOutputLayout.fire();\n\t\t}\n\t}\n\n\tgetOutputTotalHeight() {\n\t\tthis._ensureOutputsTop();\n\n\t\treturn this._outputsTop?.getTotalValue() ?? 0;\n\t}\n}\n"]}