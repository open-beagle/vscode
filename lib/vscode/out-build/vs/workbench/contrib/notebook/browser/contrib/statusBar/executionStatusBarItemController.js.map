{"version":3,"sources":["vs/workbench/contrib/notebook/browser/contrib/statusBar/executionStatusBarItemController.ts"],"names":[],"mappings":"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","file":"executionStatusBarItemController.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { RunOnceScheduler } from 'vs/base/common/async';\nimport { Event } from 'vs/base/common/event';\nimport { Disposable, dispose, IDisposable } from 'vs/base/common/lifecycle';\nimport { localize } from 'vs/nls';\nimport { themeColorFromId } from 'vs/platform/theme/common/themeService';\nimport { ICellVisibilityChangeEvent, NotebookVisibleCellObserver } from 'vs/workbench/contrib/notebook/browser/contrib/statusBar/notebookVisibleCellObserver';\nimport { ICellViewModel, INotebookEditor, INotebookEditorContribution } from 'vs/workbench/contrib/notebook/browser/notebookBrowser';\nimport { registerNotebookContribution } from 'vs/workbench/contrib/notebook/browser/notebookEditorExtensions';\nimport { cellStatusIconError, cellStatusIconSuccess } from 'vs/workbench/contrib/notebook/browser/notebookEditorWidget';\nimport { NotebookViewModel } from 'vs/workbench/contrib/notebook/browser/viewModel/notebookViewModel';\nimport { CellStatusbarAlignment, INotebookCellStatusBarItem, NotebookCellExecutionState } from 'vs/workbench/contrib/notebook/common/notebookCommon';\n\nexport class NotebookStatusBarController extends Disposable implements INotebookEditorContribution {\n\tstatic id: string = 'workbench.notebook.statusBar';\n\n\tprivate readonly _visibleCells = new Map<number, IDisposable[]>();\n\n\tprivate readonly _observer: NotebookVisibleCellObserver;\n\n\tconstructor(\n\t\tprivate readonly _notebookEditor: INotebookEditor,\n\t) {\n\t\tsuper();\n\t\tthis._observer = this._register(new NotebookVisibleCellObserver(this._notebookEditor));\n\t\tthis._register(this._observer.onDidChangeVisibleCells(this._updateVisibleCells, this));\n\n\t\tthis._updateEverything();\n\t}\n\n\tprivate _updateEverything(): void {\n\t\tthis._visibleCells.forEach(dispose);\n\t\tthis._visibleCells.clear();\n\t\tthis._updateVisibleCells({ added: this._observer.visibleCells, removed: [] });\n\t}\n\n\tprivate _updateVisibleCells(e: ICellVisibilityChangeEvent): void {\n\t\tconst vm = this._notebookEditor.viewModel;\n\t\tif (!vm) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (let newCell of e.added) {\n\t\t\tconst helpers = [\n\t\t\t\tnew ExecutionStateCellStatusBarHelper(vm, newCell),\n\t\t\t\tnew TimerCellStatusBarHelper(vm, newCell)\n\t\t\t];\n\t\t\tthis._visibleCells.set(newCell.handle, helpers);\n\t\t}\n\n\t\tfor (let oldCell of e.removed) {\n\t\t\tthis._visibleCells.get(oldCell.handle)?.forEach(dispose);\n\t\t\tthis._visibleCells.delete(oldCell.handle);\n\t\t}\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\n\t\tthis._visibleCells.forEach(dispose);\n\t\tthis._visibleCells.clear();\n\t}\n}\n\n/**\n * Shows the cell's execution state in the cell status bar. When the \"executing\" state is shown, it will be shown for a minimum brief time.\n */\nclass ExecutionStateCellStatusBarHelper extends Disposable {\n\tprivate static readonly MIN_SPINNER_TIME = 500;\n\n\tprivate _currentItemIds: string[] = [];\n\n\tprivate _currentExecutingStateTimer: any;\n\n\tconstructor(\n\t\tprivate readonly _notebookViewModel: NotebookViewModel,\n\t\tprivate readonly _cell: ICellViewModel,\n\t) {\n\t\tsuper();\n\n\t\tthis._update();\n\t\tthis._register(this._cell.model.onDidChangeMetadata(() => this._update()));\n\t}\n\n\tprivate async _update() {\n\t\tconst items = this._getItemsForCell(this._cell);\n\t\tif (Array.isArray(items)) {\n\t\t\tthis._currentItemIds = this._notebookViewModel.deltaCellStatusBarItems(this._currentItemIds, [{ handle: this._cell.handle, items }]);\n\t\t}\n\t}\n\n\t/**\n\t *\tReturns undefined if there should be no change, and an empty array if all items should be removed.\n\t */\n\tprivate _getItemsForCell(cell: ICellViewModel): INotebookCellStatusBarItem[] | undefined {\n\t\tif (this._currentExecutingStateTimer) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst item = this._getItemForState(cell.metadata?.runState, cell.metadata?.lastRunSuccess);\n\n\t\t// Show the execution spinner for a minimum time\n\t\tif (cell.metadata?.runState === NotebookCellExecutionState.Executing) {\n\t\t\tthis._currentExecutingStateTimer = setTimeout(() => {\n\t\t\t\tthis._currentExecutingStateTimer = undefined;\n\t\t\t\tif (cell.metadata?.runState !== NotebookCellExecutionState.Executing) {\n\t\t\t\t\tthis._update();\n\t\t\t\t}\n\t\t\t}, ExecutionStateCellStatusBarHelper.MIN_SPINNER_TIME);\n\t\t}\n\n\t\treturn item ? [item] : [];\n\t}\n\n\tprivate _getItemForState(runState: NotebookCellExecutionState | undefined, lastRunSuccess: boolean | undefined): INotebookCellStatusBarItem | undefined {\n\t\tif (runState === NotebookCellExecutionState.Idle && lastRunSuccess) {\n\t\t\treturn <INotebookCellStatusBarItem>{\n\t\t\t\ttext: '$(notebook-state-success)',\n\t\t\t\tcolor: themeColorFromId(cellStatusIconSuccess),\n\t\t\t\ttooltip: localize('notebook.cell.status.success', \"Success\"),\n\t\t\t\talignment: CellStatusbarAlignment.Left,\n\t\t\t\tpriority: Number.MAX_SAFE_INTEGER\n\t\t\t};\n\t\t} else if (runState === NotebookCellExecutionState.Idle && lastRunSuccess === false) {\n\t\t\treturn <INotebookCellStatusBarItem>{\n\t\t\t\ttext: '$(notebook-state-error)',\n\t\t\t\tcolor: themeColorFromId(cellStatusIconError),\n\t\t\t\ttooltip: localize('notebook.cell.status.failed', \"Failed\"),\n\t\t\t\talignment: CellStatusbarAlignment.Left,\n\t\t\t\tpriority: Number.MAX_SAFE_INTEGER\n\t\t\t};\n\t\t} else if (runState === NotebookCellExecutionState.Pending) {\n\t\t\treturn <INotebookCellStatusBarItem>{\n\t\t\t\ttext: '$(notebook-state-pending)',\n\t\t\t\ttooltip: localize('notebook.cell.status.pending', \"Pending\"),\n\t\t\t\talignment: CellStatusbarAlignment.Left,\n\t\t\t\tpriority: Number.MAX_SAFE_INTEGER\n\t\t\t};\n\t\t} else if (runState === NotebookCellExecutionState.Executing) {\n\t\t\treturn <INotebookCellStatusBarItem>{\n\t\t\t\ttext: '$(notebook-state-executing~spin)',\n\t\t\t\ttooltip: localize('notebook.cell.status.executing', \"Executing\"),\n\t\t\t\talignment: CellStatusbarAlignment.Left,\n\t\t\t\tpriority: Number.MAX_SAFE_INTEGER\n\t\t\t};\n\t\t}\n\n\t\treturn;\n\t}\n\n\toverride dispose() {\n\t\tsuper.dispose();\n\n\t\tthis._notebookViewModel.deltaCellStatusBarItems(this._currentItemIds, [{ handle: this._cell.handle, items: [] }]);\n\t}\n}\n\nclass TimerCellStatusBarHelper extends Disposable {\n\tprivate static UPDATE_INTERVAL = 100;\n\tprivate _currentItemIds: string[] = [];\n\n\tprivate _scheduler: RunOnceScheduler;\n\n\tconstructor(\n\t\tprivate readonly _notebookViewModel: NotebookViewModel,\n\t\tprivate readonly _cell: ICellViewModel,\n\t) {\n\t\tsuper();\n\n\t\tthis._scheduler = this._register(new RunOnceScheduler(() => this._update(), TimerCellStatusBarHelper.UPDATE_INTERVAL));\n\t\tthis._update();\n\t\tthis._register(\n\t\t\tEvent.filter(this._cell.model.onDidChangeMetadata, e => !!e.runStateChanged)\n\t\t\t\t(() => this._update()));\n\t}\n\n\tprivate async _update() {\n\t\tlet item: INotebookCellStatusBarItem | undefined;\n\t\tif (this._cell.metadata?.runState === NotebookCellExecutionState.Executing) {\n\t\t\tconst startTime = this._cell.metadata.runStartTime;\n\t\t\tconst adjustment = this._cell.metadata.runStartTimeAdjustment;\n\t\t\tif (typeof startTime === 'number') {\n\t\t\t\titem = this._getTimeItem(startTime, Date.now(), adjustment);\n\t\t\t\tthis._scheduler.schedule();\n\t\t\t}\n\t\t} else if (this._cell.metadata?.runState === NotebookCellExecutionState.Idle) {\n\t\t\tconst startTime = this._cell.metadata.runStartTime;\n\t\t\tconst endTime = this._cell.metadata.runEndTime;\n\t\t\tif (typeof startTime === 'number' && typeof endTime === 'number') {\n\t\t\t\titem = this._getTimeItem(startTime, endTime);\n\t\t\t}\n\t\t}\n\n\t\tconst items = item ? [item] : [];\n\t\tthis._currentItemIds = this._notebookViewModel.deltaCellStatusBarItems(this._currentItemIds, [{ handle: this._cell.handle, items }]);\n\t}\n\n\tprivate _getTimeItem(startTime: number, endTime: number, adjustment: number = 0): INotebookCellStatusBarItem {\n\t\tconst duration = endTime - startTime + adjustment;\n\t\treturn <INotebookCellStatusBarItem>{\n\t\t\ttext: this._formatDuration(duration),\n\t\t\talignment: CellStatusbarAlignment.Left,\n\t\t\tpriority: Number.MAX_SAFE_INTEGER - 1\n\t\t};\n\t}\n\n\tprivate _formatDuration(duration: number) {\n\t\tconst seconds = Math.floor(duration / 1000);\n\t\tconst tenths = String(duration - seconds * 1000).charAt(0);\n\n\t\treturn `${seconds}.${tenths}s`;\n\t}\n\n\toverride dispose() {\n\t\tsuper.dispose();\n\n\t\tthis._notebookViewModel.deltaCellStatusBarItems(this._currentItemIds, [{ handle: this._cell.handle, items: [] }]);\n\t}\n}\n\nregisterNotebookContribution(NotebookStatusBarController.id, NotebookStatusBarController);\n"]}