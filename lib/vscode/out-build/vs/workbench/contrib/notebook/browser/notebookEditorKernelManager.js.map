{"version":3,"sources":["vs/workbench/contrib/notebook/browser/notebookEditorKernelManager.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAUhG,IAAa,2BAA2B,GAAxC,MAAa,2BAA4B,SAAQ,sBAAU;QAE1D,YACmC,eAAgC,EACzB,sBAA8C,EACvC,6BAA4D;YAE5G,KAAK,EAAE,CAAC;YAJ0B,oBAAe,GAAf,eAAe,CAAiB;YACzB,2BAAsB,GAAtB,sBAAsB,CAAwB;YACvC,kCAA6B,GAA7B,6BAA6B,CAA+B;QAG7G,CAAC;QAED,4BAA4B,CAAC,QAA4B;YACxD,gDAAgD;YAChD,MAAM,IAAI,GAAG,IAAI,CAAC,sBAAsB,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;YACrE,IAAI,IAAI,CAAC,QAAQ,EAAE;gBAClB,OAAO,IAAI,CAAC,QAAQ,CAAC;aACrB;YACD,IAAI,IAAI,CAAC,GAAG,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC1B,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACnB;YACD,OAAO,SAAS,CAAC;QAClB,CAAC;QAED,KAAK,CAAC,oBAAoB,CAAC,QAA4B,EAAE,KAA+B;YACvF,MAAM,OAAO,GAAG,GAAG,CAAC,QAAQ,CAAC,CAAkB,EAAE,IAA8D,CAAC,CAAC;YACjH,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,6BAA6B,CAAC,qBAAqB,CAAC;gBAC5E,KAAK,EAAE,IAAI;gBACX,OAAO;aACP,CAAC,CAAC;YACH,IAAI,CAAC,KAAK,EAAE;gBACX,OAAO;aACP;YAED,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,EAAE;gBAC/B,OAAO;aACP;YAED,IAAI,MAAM,GAAG,IAAI,CAAC,4BAA4B,CAAC,QAAQ,CAAC,CAAC;YACzD,IAAI,CAAC,MAAM,EAAE;gBACZ,MAAM,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,uBAAuB,CAAC,CAAC;gBACnE,MAAM,GAAG,IAAI,CAAC,4BAA4B,CAAC,QAAQ,CAAC,CAAC;aACrD;YAED,IAAI,CAAC,MAAM,EAAE;gBACZ,OAAO;aACP;YAED,MAAM,WAAW,GAAa,EAAE,CAAC;YACjC,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;gBACzB,IAAI,IAAI,CAAC,QAAQ,KAAK,yBAAQ,CAAC,IAAI,EAAE;oBACpC,SAAS;iBACT;gBACD,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;oBACvD,SAAS;iBACT;gBACD,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aAC9B;YAED,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC3B,IAAI,CAAC,sBAAsB,CAAC,uBAAuB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;gBACtE,MAAM,MAAM,CAAC,2BAA2B,CAAC,QAAQ,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;aACpE;QACF,CAAC;QAED,KAAK,CAAC,mBAAmB,CAAC,QAA4B,EAAE,KAA+B;YACtF,IAAI,MAAM,GAAG,IAAI,CAAC,4BAA4B,CAAC,QAAQ,CAAC,CAAC;YACzD,IAAI,MAAM,EAAE;gBACX,MAAM,MAAM,CAAC,2BAA2B,CAAC,QAAQ,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;aAC/F;QACF,CAAC;KACD,CAAA;IArEY,2BAA2B;QAGrC,WAAA,0BAAe,CAAA;QACf,WAAA,8CAAsB,CAAA;QACtB,WAAA,8CAA6B,CAAA;OALnB,2BAA2B,CAqEvC;IArEY,kEAA2B","file":"notebookEditorKernelManager.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { ICellViewModel } from 'vs/workbench/contrib/notebook/browser/notebookBrowser';\nimport { CellKind, INotebookKernel, INotebookTextModel } from 'vs/workbench/contrib/notebook/common/notebookCommon';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { INotebookKernelService } from 'vs/workbench/contrib/notebook/common/notebookKernelService';\nimport { IWorkspaceTrustRequestService } from 'vs/platform/workspace/common/workspaceTrust';\n\nexport class NotebookEditorKernelManager extends Disposable {\n\n\tconstructor(\n\t\t@ICommandService private readonly _commandService: ICommandService,\n\t\t@INotebookKernelService private readonly _notebookKernelService: INotebookKernelService,\n\t\t@IWorkspaceTrustRequestService private readonly _workspaceTrustRequestService: IWorkspaceTrustRequestService,\n\t) {\n\t\tsuper();\n\t}\n\n\tgetSelectedOrSuggestedKernel(notebook: INotebookTextModel): INotebookKernel | undefined {\n\t\t// returns SELECTED or the ONLY available kernel\n\t\tconst info = this._notebookKernelService.getMatchingKernel(notebook);\n\t\tif (info.selected) {\n\t\t\treturn info.selected;\n\t\t}\n\t\tif (info.all.length === 1) {\n\t\t\treturn info.all[0];\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tasync executeNotebookCells(notebook: INotebookTextModel, cells: Iterable<ICellViewModel>): Promise<void> {\n\t\tconst message = nls.localize('notebookRunTrust', \"Executing a notebook cell will run code from this workspace.\");\n\t\tconst trust = await this._workspaceTrustRequestService.requestWorkspaceTrust({\n\t\t\tmodal: true,\n\t\t\tmessage\n\t\t});\n\t\tif (!trust) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!notebook.metadata.trusted) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet kernel = this.getSelectedOrSuggestedKernel(notebook);\n\t\tif (!kernel) {\n\t\t\tawait this._commandService.executeCommand('notebook.selectKernel');\n\t\t\tkernel = this.getSelectedOrSuggestedKernel(notebook);\n\t\t}\n\n\t\tif (!kernel) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst cellHandles: number[] = [];\n\t\tfor (const cell of cells) {\n\t\t\tif (cell.cellKind !== CellKind.Code) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (!kernel.supportedLanguages.includes(cell.language)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tcellHandles.push(cell.handle);\n\t\t}\n\n\t\tif (cellHandles.length > 0) {\n\t\t\tthis._notebookKernelService.selectKernelForNotebook(kernel, notebook);\n\t\t\tawait kernel.executeNotebookCellsRequest(notebook.uri, cellHandles);\n\t\t}\n\t}\n\n\tasync cancelNotebookCells(notebook: INotebookTextModel, cells: Iterable<ICellViewModel>): Promise<void> {\n\t\tlet kernel = this.getSelectedOrSuggestedKernel(notebook);\n\t\tif (kernel) {\n\t\t\tawait kernel.cancelNotebookCellExecution(notebook.uri, Array.from(cells, cell => cell.handle));\n\t\t}\n\t}\n}\n"]}