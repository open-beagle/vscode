{"version":3,"file":"notebookBrowser.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/notebook/browser/notebookBrowser.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IMouseWheelEvent } from 'vs/base/browser/mouseEvent';\nimport { IListContextMenuEvent, IListEvent, IListMouseEvent } from 'vs/base/browser/ui/list/list';\nimport { IListOptions, IListStyles } from 'vs/base/browser/ui/list/listWidget';\nimport { ProgressBar } from 'vs/base/browser/ui/progressbar/progressbar';\nimport { ToolBar } from 'vs/base/browser/ui/toolbar/toolbar';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { DisposableStore, IDisposable } from 'vs/base/common/lifecycle';\nimport { ScrollEvent } from 'vs/base/common/scrollable';\nimport { URI } from 'vs/base/common/uri';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { FontInfo } from 'vs/editor/common/config/fontInfo';\nimport { IPosition } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { FindMatch, IReadonlyTextBuffer, ITextModel } from 'vs/editor/common/model';\nimport { ContextKeyExpr, RawContextKey, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { OutputRenderer } from 'vs/workbench/contrib/notebook/browser/view/output/outputRenderer';\nimport { CellViewModel, IModelDecorationsChangeAccessor, NotebookViewModel } from 'vs/workbench/contrib/notebook/browser/viewModel/notebookViewModel';\nimport { NotebookCellTextModel } from 'vs/workbench/contrib/notebook/common/model/notebookCellTextModel';\nimport { CellKind, NotebookCellMetadata, INotebookKernel, IOrderedMimeType, INotebookRendererInfo, ICellOutput, IOutputItemDto, INotebookCellStatusBarItem } from 'vs/workbench/contrib/notebook/common/notebookCommon';\nimport { ICellRange, cellRangesToIndexes, reduceRanges } from 'vs/workbench/contrib/notebook/common/notebookRange';\nimport { Webview } from 'vs/workbench/contrib/webview/browser/webview';\nimport { NotebookTextModel } from 'vs/workbench/contrib/notebook/common/model/notebookTextModel';\nimport { IMenu } from 'vs/platform/actions/common/actions';\nimport { EditorOptions, IEditorPane } from 'vs/workbench/common/editor';\nimport { IResourceEditorInput } from 'vs/platform/editor/common/editor';\nimport { IConstructorSignature1 } from 'vs/platform/instantiation/common/instantiation';\nimport { CellEditorStatusBar } from 'vs/workbench/contrib/notebook/browser/view/renderers/cellWidgets';\nimport { INotebookWebviewMessage } from 'vs/workbench/contrib/notebook/browser/view/renderers/backLayerWebView';\n\nexport const NOTEBOOK_EDITOR_ID = 'workbench.editor.notebook';\nexport const NOTEBOOK_DIFF_EDITOR_ID = 'workbench.editor.notebookTextDiffEditor';\n\n//#region Context Keys\nexport const KEYBINDING_CONTEXT_NOTEBOOK_FIND_WIDGET_FOCUSED = new RawContextKey<boolean>('notebookFindWidgetFocused', false);\n\n// Is Notebook\nexport const NOTEBOOK_IS_ACTIVE_EDITOR = ContextKeyExpr.equals('activeEditor', NOTEBOOK_EDITOR_ID);\nexport const NOTEBOOK_DIFF_IS_ACTIVE_EDITOR = ContextKeyExpr.equals('activeEditor', NOTEBOOK_DIFF_EDITOR_ID);\n\n// Editor keys\nexport const NOTEBOOK_EDITOR_FOCUSED = new RawContextKey<boolean>('notebookEditorFocused', false);\nexport const NOTEBOOK_CELL_LIST_FOCUSED = new RawContextKey<boolean>('notebookCellListFocused', false);\nexport const NOTEBOOK_OUTPUT_FOCUSED = new RawContextKey<boolean>('notebookOutputFocused', false);\nexport const NOTEBOOK_EDITOR_EDITABLE = new RawContextKey<boolean>('notebookEditable', true);\nexport const NOTEBOOK_HAS_RUNNING_CELL = new RawContextKey<boolean>('notebookHasRunningCell', false);\n\n// Cell keys\nexport const NOTEBOOK_VIEW_TYPE = new RawContextKey<string>('notebookViewType', undefined);\nexport const NOTEBOOK_CELL_TYPE = new RawContextKey<string>('notebookCellType', undefined); // code, markdown\nexport const NOTEBOOK_CELL_EDITABLE = new RawContextKey<boolean>('notebookCellEditable', false); // bool\nexport const NOTEBOOK_CELL_FOCUSED = new RawContextKey<boolean>('notebookCellFocused', false); // bool\nexport const NOTEBOOK_CELL_EDITOR_FOCUSED = new RawContextKey<boolean>('notebookCellEditorFocused', false); // bool\nexport const NOTEBOOK_CELL_MARKDOWN_EDIT_MODE = new RawContextKey<boolean>('notebookCellMarkdownEditMode', false); // bool\nexport const NOTEBOOK_CELL_LINE_NUMBERS = new RawContextKey<'on' | 'off' | 'inherit'>('notebookCellLineNumbers', 'inherit'); // off, none, inherit\nexport type NotebookCellExecutionStateContext = 'idle' | 'pending' | 'executing' | 'succeeded' | 'failed';\nexport const NOTEBOOK_CELL_EXECUTION_STATE = new RawContextKey<NotebookCellExecutionStateContext>('notebookCellExecutionState', undefined);\nexport const NOTEBOOK_CELL_HAS_OUTPUTS = new RawContextKey<boolean>('notebookCellHasOutputs', false); // bool\nexport const NOTEBOOK_CELL_INPUT_COLLAPSED = new RawContextKey<boolean>('notebookCellInputIsCollapsed', false); // bool\nexport const NOTEBOOK_CELL_OUTPUT_COLLAPSED = new RawContextKey<boolean>('notebookCellOutputIsCollapsed', false); // bool\n// Kernels\nexport const NOTEBOOK_KERNEL_COUNT = new RawContextKey<number>('notebookKernelCount', 0);\nexport const NOTEBOOK_INTERRUPTIBLE_KERNEL = new RawContextKey<boolean>('notebookInterruptibleKernel', false);\n\n//#endregion\n\n//#region Shared commands\nexport const EXPAND_CELL_INPUT_COMMAND_ID = 'notebook.cell.expandCellInput';\nexport const EXECUTE_CELL_COMMAND_ID = 'notebook.cell.execute';\nexport const CHANGE_CELL_LANGUAGE = 'notebook.cell.changeLanguage';\nexport const QUIT_EDIT_CELL_COMMAND_ID = 'notebook.cell.quitEdit';\n\n//#endregion\n\n//#region  Output related types\nexport const enum RenderOutputType {\n\tMainframe,\n\tHtml,\n\tExtension\n}\n\nexport interface IRenderMainframeOutput {\n\ttype: RenderOutputType.Mainframe;\n\tsupportAppend?: boolean;\n\tinitHeight?: number;\n}\n\nexport interface IRenderPlainHtmlOutput {\n\ttype: RenderOutputType.Html;\n\tsource: IDisplayOutputViewModel;\n\thtmlContent: string;\n}\n\nexport interface IRenderOutputViaExtension {\n\ttype: RenderOutputType.Extension;\n\tsource: IDisplayOutputViewModel;\n\tmimeType: string;\n\trenderer: INotebookRendererInfo;\n}\n\nexport type IInsetRenderOutput = IRenderPlainHtmlOutput | IRenderOutputViaExtension;\nexport type IRenderOutput = IRenderMainframeOutput | IInsetRenderOutput;\n\nexport interface ICellOutputViewModel {\n\tcellViewModel: IGenericCellViewModel;\n\t/**\n\t * When rendering an output, `model` should always be used as we convert legacy `text/error` output to `display_data` output under the hood.\n\t */\n\tmodel: ICellOutput;\n\tresolveMimeTypes(textModel: NotebookTextModel, kernelProvides: readonly string[] | undefined): [readonly IOrderedMimeType[], number];\n\tpickedMimeType: number;\n\tsupportAppend(): boolean;\n\ttoRawJSON(): any;\n}\n\nexport interface IDisplayOutputViewModel extends ICellOutputViewModel {\n\tresolveMimeTypes(textModel: NotebookTextModel, kernelProvides: readonly string[] | undefined): [readonly IOrderedMimeType[], number];\n\tpickedMimeType: number;\n}\n\n\n//#endregion\n\n//#region Shared types between the Notebook Editor and Notebook Diff Editor, they are mostly used for output rendering\n\nexport interface IGenericCellViewModel {\n\tid: string;\n\thandle: number;\n\turi: URI;\n\tmetadata: NotebookCellMetadata | undefined;\n\toutputIsHovered: boolean;\n\toutputIsFocused: boolean;\n\toutputsViewModels: ICellOutputViewModel[];\n\tgetOutputOffset(index: number): number;\n\tupdateOutputHeight(index: number, height: number, source?: string): void;\n}\n\nexport interface IDisplayOutputLayoutUpdateRequest {\n\treadonly cell: IGenericCellViewModel;\n\toutput: IDisplayOutputViewModel;\n\tcellTop: number;\n\toutputOffset: number;\n\tforceDisplay: boolean;\n}\n\nexport interface ICommonCellInfo {\n\tcellId: string;\n\tcellHandle: number;\n\tcellUri: URI;\n}\n\nexport interface INotebookCellOutputLayoutInfo {\n\twidth: number;\n\theight: number;\n\tfontInfo: FontInfo;\n}\n\nexport interface IFocusNotebookCellOptions {\n\treadonly skipReveal?: boolean;\n}\n\nexport interface ICommonNotebookEditor {\n\tgetCellOutputLayoutInfo(cell: IGenericCellViewModel): INotebookCellOutputLayoutInfo;\n\ttriggerScroll(event: IMouseWheelEvent): void;\n\tgetCellByInfo(cellInfo: ICommonCellInfo): IGenericCellViewModel;\n\tgetCellById(cellId: string): IGenericCellViewModel | undefined;\n\ttoggleNotebookCellSelection(cell: IGenericCellViewModel): void;\n\tfocusNotebookCell(cell: IGenericCellViewModel, focus: 'editor' | 'container' | 'output', options?: IFocusNotebookCellOptions): void;\n\tfocusNextNotebookCell(cell: IGenericCellViewModel, focus: 'editor' | 'container' | 'output'): void;\n\tupdateOutputHeight(cellInfo: ICommonCellInfo, output: IDisplayOutputViewModel, height: number, isInit: boolean, source?: string): void;\n\tscheduleOutputHeightAck(cellInfo: ICommonCellInfo, outputId: string, height: number): void;\n\tupdateMarkdownCellHeight(cellId: string, height: number, isInit: boolean): void;\n\tsetMarkdownCellEditState(cellId: string, editState: CellEditState): void;\n\tmarkdownCellDragStart(cellId: string, position: { clientY: number }): void;\n\tmarkdownCellDrag(cellId: string, position: { clientY: number }): void;\n\tmarkdownCellDrop(cellId: string, position: { clientY: number, ctrlKey: boolean, altKey: boolean }): void;\n\tmarkdownCellDragEnd(cellId: string): void;\n}\n\n//#endregion\n\nexport interface NotebookLayoutInfo {\n\twidth: number;\n\theight: number;\n\tfontInfo: FontInfo;\n}\n\nexport interface NotebookLayoutChangeEvent {\n\twidth?: boolean;\n\theight?: boolean;\n\tfontInfo?: boolean;\n}\n\nexport enum CodeCellLayoutState {\n\tUninitialized,\n\tEstimated,\n\tFromCache,\n\tMeasured\n}\n\nexport interface CodeCellLayoutInfo {\n\treadonly fontInfo: FontInfo | null;\n\treadonly editorHeight: number;\n\treadonly editorWidth: number;\n\treadonly totalHeight: number;\n\treadonly outputContainerOffset: number;\n\treadonly outputTotalHeight: number;\n\treadonly outputShowMoreContainerHeight: number;\n\treadonly outputShowMoreContainerOffset: number;\n\treadonly indicatorHeight: number;\n\treadonly bottomToolbarOffset: number;\n\treadonly layoutState: CodeCellLayoutState;\n}\n\nexport interface CodeCellLayoutChangeEvent {\n\tsource?: string;\n\teditorHeight?: boolean;\n\toutputHeight?: boolean;\n\toutputShowMoreContainerHeight?: number;\n\ttotalHeight?: boolean;\n\touterWidth?: number;\n\tfont?: FontInfo;\n}\n\nexport interface MarkdownCellLayoutInfo {\n\treadonly fontInfo: FontInfo | null;\n\treadonly editorWidth: number;\n\treadonly editorHeight: number;\n\treadonly bottomToolbarOffset: number;\n\treadonly totalHeight: number;\n}\n\nexport interface MarkdownCellLayoutChangeEvent {\n\tfont?: FontInfo;\n\touterWidth?: number;\n\ttotalHeight?: number;\n}\n\nexport interface ICellViewModel extends IGenericCellViewModel {\n\treadonly model: NotebookCellTextModel;\n\treadonly id: string;\n\treadonly textBuffer: IReadonlyTextBuffer;\n\treadonly layoutInfo: { totalHeight: number; };\n\treadonly onDidChangeLayout: Event<{ totalHeight?: boolean | number; outerWidth?: number; }>;\n\treadonly onDidChangeCellStatusBarItems: Event<void>;\n\treadonly editStateSource: string;\n\tdragging: boolean;\n\thandle: number;\n\turi: URI;\n\tlanguage: string;\n\tcellKind: CellKind;\n\tlineNumbers: 'on' | 'off' | 'inherit';\n\tfocusMode: CellFocusMode;\n\toutputIsHovered: boolean;\n\tgetText(): string;\n\tgetTextLength(): number;\n\tgetHeight(lineHeight: number): number;\n\tmetadata: NotebookCellMetadata | undefined;\n\ttextModel: ITextModel | undefined;\n\thasModel(): this is IEditableCellViewModel;\n\tresolveTextModel(): Promise<ITextModel>;\n\tgetSelectionsStartPosition(): IPosition[] | undefined;\n\tgetCellDecorations(): INotebookCellDecorationOptions[];\n\tgetCellStatusBarItems(): INotebookCellStatusBarItem[];\n\tgetEditState(): CellEditState;\n\tupdateEditState(state: CellEditState, source: string): void;\n}\n\nexport interface IEditableCellViewModel extends ICellViewModel {\n\ttextModel: ITextModel;\n}\n\nexport interface INotebookEditorMouseEvent {\n\treadonly event: MouseEvent;\n\treadonly target: CellViewModel;\n}\n\nexport interface INotebookEditorContribution {\n\t/**\n\t * Dispose this contribution.\n\t */\n\tdispose(): void;\n\t/**\n\t * Store view state.\n\t */\n\tsaveViewState?(): unknown;\n\t/**\n\t * Restore view state.\n\t */\n\trestoreViewState?(state: unknown): void;\n}\n\nexport interface INotebookCellDecorationOptions {\n\tclassName?: string;\n\tgutterClassName?: string;\n\toutputClassName?: string;\n\ttopClassName?: string;\n}\n\nexport interface INotebookDeltaDecoration {\n\thandle: number;\n\toptions: INotebookCellDecorationOptions;\n}\n\nexport interface INotebookDeltaCellStatusBarItems {\n\thandle: number;\n\titems: INotebookCellStatusBarItem[];\n}\n\nexport class NotebookEditorOptions extends EditorOptions {\n\n\treadonly cellOptions?: IResourceEditorInput;\n\treadonly cellSelections?: ICellRange[];\n\treadonly isReadOnly?: boolean;\n\n\tconstructor(options: Partial<NotebookEditorOptions>) {\n\t\tsuper();\n\t\tthis.overwrite(options);\n\t\tthis.cellOptions = options.cellOptions;\n\t\tthis.cellSelections = options.cellSelections;\n\t\tthis.isReadOnly = options.isReadOnly;\n\t}\n\n\twith(options: Partial<NotebookEditorOptions>): NotebookEditorOptions {\n\t\treturn new NotebookEditorOptions({ ...this, ...options });\n\t}\n}\n\nexport type INotebookEditorContributionCtor = IConstructorSignature1<INotebookEditor, INotebookEditorContribution>;\n\nexport interface INotebookEditorContributionDescription {\n\tid: string;\n\tctor: INotebookEditorContributionCtor;\n}\n\nexport interface INotebookEditorCreationOptions {\n\treadonly isEmbedded?: boolean;\n\treadonly contributions?: INotebookEditorContributionDescription[];\n}\n\nexport interface IActiveNotebookEditor extends INotebookEditor {\n\tviewModel: NotebookViewModel;\n\tgetFocus(): ICellRange;\n}\n\nexport interface INotebookEditor extends ICommonNotebookEditor {\n\n\t// from the old IEditor\n\treadonly onDidChangeVisibleRanges: Event<void>;\n\treadonly onDidChangeSelection: Event<void>;\n\tgetSelections(): ICellRange[];\n\tvisibleRanges: ICellRange[];\n\ttextModel?: NotebookTextModel;\n\tgetId(): string;\n\thasFocus(): boolean;\n\n\tisEmbedded: boolean;\n\n\tcursorNavigationMode: boolean;\n\n\t/**\n\t * Notebook view model attached to the current editor\n\t */\n\tviewModel: NotebookViewModel | undefined;\n\thasModel(): this is IActiveNotebookEditor;\n\n\t/**\n\t * An event emitted when the model of this editor has changed.\n\t * @event\n\t */\n\treadonly onDidChangeModel: Event<NotebookTextModel | undefined>;\n\treadonly onDidFocusEditorWidget: Event<void>;\n\treadonly onDidScroll: Event<void>;\n\n\treadonly onDidChangeActiveCell: Event<void>;\n\tisDisposed: boolean;\n\tdispose(): void;\n\n\tgetId(): string;\n\tgetDomNode(): HTMLElement;\n\tgetOverflowContainerDomNode(): HTMLElement;\n\tgetInnerWebview(): Webview | undefined;\n\tgetSelectionViewModels(): ICellViewModel[];\n\n\t/**\n\t * Focus the notebook editor cell list\n\t */\n\tfocus(): void;\n\n\thasFocus(): boolean;\n\thasWebviewFocus(): boolean;\n\n\thasOutputTextSelection(): boolean;\n\tsetOptions(options: NotebookEditorOptions | undefined): Promise<void>;\n\n\t/**\n\t * Select & focus cell\n\t */\n\tfocusElement(cell: ICellViewModel): void;\n\n\t/**\n\t * Layout info for the notebook editor\n\t */\n\tgetLayoutInfo(): NotebookLayoutInfo;\n\n\tgetVisibleRangesPlusViewportAboveBelow(): ICellRange[];\n\n\t/**\n\t * Fetch the output renderers for notebook outputs.\n\t */\n\tgetOutputRenderer(): OutputRenderer;\n\n\t/**\n\t * Insert a new cell around `cell`\n\t */\n\tinsertNotebookCell(cell: ICellViewModel | undefined, type: CellKind, direction?: 'above' | 'below', initialText?: string, ui?: boolean): CellViewModel | null;\n\n\t/**\n\t * Split a given cell into multiple cells of the same type using the selection start positions.\n\t */\n\tsplitNotebookCell(cell: ICellViewModel): Promise<CellViewModel[] | null>;\n\n\t/**\n\t * Delete a cell from the notebook\n\t */\n\tdeleteNotebookCell(cell: ICellViewModel): Promise<boolean>;\n\n\t/**\n\t * Move a cell up one spot\n\t */\n\tmoveCellUp(cell: ICellViewModel): Promise<ICellViewModel | null>;\n\n\t/**\n\t * Move a cell down one spot\n\t */\n\tmoveCellDown(cell: ICellViewModel): Promise<ICellViewModel | null>;\n\n\t/**\n\t * Move a cell to a specific position\n\t */\n\tmoveCellsToIdx(index: number, length: number, toIdx: number): Promise<ICellViewModel | null>;\n\n\t/**\n\t * Focus the container of a cell (the monaco editor inside is not focused).\n\t */\n\tfocusNotebookCell(cell: ICellViewModel, focus: 'editor' | 'container' | 'output'): void;\n\n\tfocusNextNotebookCell(cell: ICellViewModel, focus: 'editor' | 'container' | 'output'): void;\n\n\treadonly activeKernel: INotebookKernel | undefined;\n\n\t/**\n\t * Execute the given notebook cells\n\t */\n\texecuteNotebookCells(cells?: Iterable<ICellViewModel>): Promise<void>\n\n\t/**\n\t * Cancel the given notebook cells\n\t */\n\tcancelNotebookCells(cells?: Iterable<ICellViewModel>): Promise<void>\n\n\t/**\n\t * Get current active cell\n\t */\n\tgetActiveCell(): ICellViewModel | undefined;\n\n\t/**\n\t * Layout the cell with a new height\n\t */\n\tlayoutNotebookCell(cell: ICellViewModel, height: number): Promise<void>;\n\n\tcreateMarkdownPreview(cell: ICellViewModel): Promise<void>;\n\tunhideMarkdownPreviews(cells: readonly ICellViewModel[]): Promise<void>;\n\thideMarkdownPreviews(cells: readonly ICellViewModel[]): Promise<void>;\n\n\t/**\n\t * Render the output in webview layer\n\t */\n\tcreateOutput(cell: ICellViewModel, output: IInsetRenderOutput, offset: number): Promise<void>;\n\n\t/**\n\t * Remove the output from the webview layer\n\t */\n\tremoveInset(output: IDisplayOutputViewModel): void;\n\n\t/**\n\t * Hide the inset in the webview layer without removing it\n\t */\n\thideInset(output: IDisplayOutputViewModel): void;\n\n\n\tonDidReceiveMessage: Event<INotebookWebviewMessage>;\n\n\t/**\n\t * Send message to the webview for outputs.\n\t */\n\tpostMessage(forRendererId: string | undefined, message: any): void;\n\n\t/**\n\t * Remove class name on the notebook editor root DOM node.\n\t */\n\taddClassName(className: string): void;\n\n\t/**\n\t * Remove class name on the notebook editor root DOM node.\n\t */\n\tremoveClassName(className: string): void;\n\n\tdeltaCellOutputContainerClassNames(cellId: string, added: string[], removed: string[]): void;\n\n\t/**\n\t * Trigger the editor to scroll from scroll event programmatically\n\t */\n\ttriggerScroll(event: IMouseWheelEvent): void;\n\n\t/**\n\t * The range will be revealed with as little scrolling as possible.\n\t */\n\trevealCellRangeInView(range: ICellRange): void;\n\n\t/**\n\t * Reveal cell into viewport.\n\t */\n\trevealInView(cell: ICellViewModel): void;\n\n\t/**\n\t * Reveal cell into the top of viewport.\n\t */\n\trevealInViewAtTop(cell: ICellViewModel): void;\n\n\t/**\n\t * Reveal cell into viewport center.\n\t */\n\trevealInCenter(cell: ICellViewModel): void;\n\n\t/**\n\t * Reveal cell into viewport center if cell is currently out of the viewport.\n\t */\n\trevealInCenterIfOutsideViewport(cell: ICellViewModel): void;\n\n\t/**\n\t * Reveal a line in notebook cell into viewport with minimal scrolling.\n\t */\n\trevealLineInViewAsync(cell: ICellViewModel, line: number): Promise<void>;\n\n\t/**\n\t * Reveal a line in notebook cell into viewport center.\n\t */\n\trevealLineInCenterAsync(cell: ICellViewModel, line: number): Promise<void>;\n\n\t/**\n\t * Reveal a line in notebook cell into viewport center.\n\t */\n\trevealLineInCenterIfOutsideViewportAsync(cell: ICellViewModel, line: number): Promise<void>;\n\n\t/**\n\t * Reveal a range in notebook cell into viewport with minimal scrolling.\n\t */\n\trevealRangeInViewAsync(cell: ICellViewModel, range: Range): Promise<void>;\n\n\t/**\n\t * Reveal a range in notebook cell into viewport center.\n\t */\n\trevealRangeInCenterAsync(cell: ICellViewModel, range: Range): Promise<void>;\n\n\t/**\n\t * Reveal a range in notebook cell into viewport center.\n\t */\n\trevealRangeInCenterIfOutsideViewportAsync(cell: ICellViewModel, range: Range): Promise<void>;\n\n\t/**\n\t * Get the view index of a cell\n\t */\n\tgetViewIndex(cell: ICellViewModel): number;\n\n\t/**\n\t * Get the view height of a cell (from the list view)\n\t */\n\tgetViewHeight(cell: ICellViewModel): number;\n\n\t/**\n\t * @param startIndex Inclusive\n\t * @param endIndex Exclusive\n\t */\n\tgetCellRangeFromViewRange(startIndex: number, endIndex: number): ICellRange | undefined;\n\n\t/**\n\t * @param startIndex Inclusive\n\t * @param endIndex Exclusive\n\t */\n\tgetCellsFromViewRange(startIndex: number, endIndex: number): ReadonlyArray<ICellViewModel>;\n\n\t/**\n\t * Set hidden areas on cell text models.\n\t */\n\tsetHiddenAreas(_ranges: ICellRange[]): boolean;\n\n\tsetCellEditorSelection(cell: ICellViewModel, selection: Range): void;\n\n\tdeltaCellDecorations(oldDecorations: string[], newDecorations: INotebookDeltaDecoration[]): string[];\n\n\t/**\n\t * Change the decorations on cells.\n\t * The notebook is virtualized and this method should be called to create/delete editor decorations safely.\n\t */\n\tchangeModelDecorations<T>(callback: (changeAccessor: IModelDecorationsChangeAccessor) => T): T | null;\n\n\tsetEditorDecorations(key: string, range: ICellRange): void;\n\tremoveEditorDecorations(key: string): void;\n\n\t/**\n\t * An event emitted on a \"mouseup\".\n\t * @event\n\t */\n\tonMouseUp(listener: (e: INotebookEditorMouseEvent) => void): IDisposable;\n\n\t/**\n\t * An event emitted on a \"mousedown\".\n\t * @event\n\t */\n\tonMouseDown(listener: (e: INotebookEditorMouseEvent) => void): IDisposable;\n\n\t/**\n\t * Get a contribution of this editor.\n\t * @id Unique identifier of the contribution.\n\t * @return The contribution or null if contribution not found.\n\t */\n\tgetContribution<T extends INotebookEditorContribution>(id: string): T;\n\n\tgetCellByInfo(cellInfo: ICommonCellInfo): ICellViewModel;\n\tgetCellById(cellId: string): ICellViewModel | undefined;\n\tupdateOutputHeight(cellInfo: ICommonCellInfo, output: IDisplayOutputViewModel, height: number, isInit: boolean, source?: string): void;\n}\n\nexport interface INotebookCellList {\n\tisDisposed: boolean;\n\tviewModel: NotebookViewModel | null;\n\treadonly contextKeyService: IContextKeyService;\n\telement(index: number): ICellViewModel | undefined;\n\telementAt(position: number): ICellViewModel | undefined;\n\telementHeight(element: ICellViewModel): number;\n\tonWillScroll: Event<ScrollEvent>;\n\tonDidScroll: Event<ScrollEvent>;\n\tonDidChangeFocus: Event<IListEvent<ICellViewModel>>;\n\tonDidChangeContentHeight: Event<number>;\n\tonDidChangeVisibleRanges: Event<void>;\n\tvisibleRanges: ICellRange[];\n\tscrollTop: number;\n\tscrollHeight: number;\n\tscrollLeft: number;\n\tlength: number;\n\trowsContainer: HTMLElement;\n\treadonly onDidRemoveOutputs: Event<readonly ICellOutputViewModel[]>;\n\treadonly onDidHideOutputs: Event<readonly ICellOutputViewModel[]>;\n\treadonly onDidRemoveCellsFromView: Event<readonly ICellViewModel[]>;\n\treadonly onMouseUp: Event<IListMouseEvent<CellViewModel>>;\n\treadonly onMouseDown: Event<IListMouseEvent<CellViewModel>>;\n\treadonly onContextMenu: Event<IListContextMenuEvent<CellViewModel>>;\n\tdetachViewModel(): void;\n\tattachViewModel(viewModel: NotebookViewModel): void;\n\tclear(): void;\n\tgetViewIndex(cell: ICellViewModel): number | undefined;\n\tgetViewIndex2(modelIndex: number): number | undefined;\n\tgetModelIndex(cell: CellViewModel): number | undefined;\n\tgetModelIndex2(viewIndex: number): number | undefined;\n\tgetVisibleRangesPlusViewportAboveBelow(): ICellRange[];\n\tfocusElement(element: ICellViewModel): void;\n\tselectElements(elements: ICellViewModel[]): void;\n\tgetFocusedElements(): ICellViewModel[];\n\tgetSelectedElements(): ICellViewModel[];\n\trevealElementsInView(range: ICellRange): void;\n\trevealElementInView(element: ICellViewModel): void;\n\trevealElementInViewAtTop(element: ICellViewModel): void;\n\trevealElementInCenterIfOutsideViewport(element: ICellViewModel): void;\n\trevealElementInCenter(element: ICellViewModel): void;\n\trevealElementInCenterIfOutsideViewportAsync(element: ICellViewModel): Promise<void>;\n\trevealElementLineInViewAsync(element: ICellViewModel, line: number): Promise<void>;\n\trevealElementLineInCenterAsync(element: ICellViewModel, line: number): Promise<void>;\n\trevealElementLineInCenterIfOutsideViewportAsync(element: ICellViewModel, line: number): Promise<void>;\n\trevealElementRangeInViewAsync(element: ICellViewModel, range: Range): Promise<void>;\n\trevealElementRangeInCenterAsync(element: ICellViewModel, range: Range): Promise<void>;\n\trevealElementRangeInCenterIfOutsideViewportAsync(element: ICellViewModel, range: Range): Promise<void>;\n\tsetHiddenAreas(_ranges: ICellRange[], triggerViewUpdate: boolean): boolean;\n\tdomElementOfElement(element: ICellViewModel): HTMLElement | null;\n\tfocusView(): void;\n\tgetAbsoluteTopOfElement(element: ICellViewModel): number;\n\ttriggerScrollFromMouseWheelEvent(browserEvent: IMouseWheelEvent): void;\n\tupdateElementHeight2(element: ICellViewModel, size: number): void;\n\tdomFocus(): void;\n\tsetCellSelection(element: ICellViewModel, range: Range): void;\n\tstyle(styles: IListStyles): void;\n\tgetRenderHeight(): number;\n\tupdateOptions(options: IListOptions<ICellViewModel>): void;\n\tlayout(height?: number, width?: number): void;\n\tdispose(): void;\n}\n\nexport interface BaseCellRenderTemplate {\n\trootContainer: HTMLElement;\n\teditorPart: HTMLElement;\n\tcollapsedPart: HTMLElement;\n\texpandButton: HTMLElement;\n\tcontextKeyService: IContextKeyService;\n\tcontainer: HTMLElement;\n\tcellContainer: HTMLElement;\n\tdecorationContainer: HTMLElement;\n\ttoolbar: ToolBar;\n\tdeleteToolbar: ToolBar;\n\tbetweenCellToolbar: ToolBar;\n\tfocusIndicatorLeft: HTMLElement;\n\tfocusIndicatorRight: HTMLElement;\n\tdisposables: DisposableStore;\n\telementDisposables: DisposableStore;\n\tbottomCellContainer: HTMLElement;\n\tcurrentRenderedCell?: ICellViewModel;\n\tstatusBar: CellEditorStatusBar;\n\ttitleMenu: IMenu;\n\ttoJSON: () => object;\n}\n\nexport interface MarkdownCellRenderTemplate extends BaseCellRenderTemplate {\n\teditorContainer: HTMLElement;\n\tfoldingIndicator: HTMLElement;\n\tfocusIndicatorBottom: HTMLElement;\n\tcurrentEditor?: ICodeEditor;\n\treadonly useRenderer: boolean;\n}\n\nexport interface CodeCellRenderTemplate extends BaseCellRenderTemplate {\n\trunToolbar: ToolBar;\n\trunButtonContainer: HTMLElement;\n\texecutionOrderLabel: HTMLElement;\n\toutputContainer: HTMLElement;\n\toutputShowMoreContainer: HTMLElement;\n\tfocusSinkElement: HTMLElement;\n\teditor: ICodeEditor;\n\tprogressBar: ProgressBar;\n\tfocusIndicatorRight: HTMLElement;\n\tfocusIndicatorBottom: HTMLElement;\n\tdragHandle: HTMLElement;\n}\n\nexport function isCodeCellRenderTemplate(templateData: BaseCellRenderTemplate): templateData is CodeCellRenderTemplate {\n\treturn !!(templateData as CodeCellRenderTemplate).runToolbar;\n}\n\nexport interface IOutputTransformContribution {\n\tgetType(): RenderOutputType;\n\tgetMimetypes(): string[];\n\t/**\n\t * Dispose this contribution.\n\t */\n\tdispose(): void;\n\n\t/**\n\t * Returns contents to place in the webview inset, or the {@link IRenderNoOutput}.\n\t * This call is allowed to have side effects, such as placing output\n\t * directly into the container element.\n\t */\n\trender(output: ICellOutputViewModel, items: IOutputItemDto[], container: HTMLElement, notebookUri: URI | undefined): IRenderOutput;\n}\n\nexport interface CellFindMatch {\n\tcell: CellViewModel;\n\tmatches: FindMatch[];\n}\n\nexport enum CellRevealType {\n\tLine,\n\tRange\n}\n\nexport enum CellRevealPosition {\n\tTop,\n\tCenter,\n\tBottom\n}\n\nexport enum CellEditState {\n\t/**\n\t * Default state.\n\t * For markdown cell, it's Markdown preview.\n\t * For code cell, the browser focus should be on the container instead of the editor\n\t */\n\tPreview,\n\n\n\t/**\n\t * Eding mode. Source for markdown or code is rendered in editors and the state will be persistent.\n\t */\n\tEditing\n}\n\nexport enum CellFocusMode {\n\tContainer,\n\tEditor\n}\n\nexport enum CursorAtBoundary {\n\tNone,\n\tTop,\n\tBottom,\n\tBoth\n}\n\nexport interface CellViewModelStateChangeEvent {\n\treadonly metadataChanged?: boolean;\n\treadonly runStateChanged?: boolean;\n\treadonly selectionChanged?: boolean;\n\treadonly focusModeChanged?: boolean;\n\treadonly editStateChanged?: boolean;\n\treadonly languageChanged?: boolean;\n\treadonly foldingStateChanged?: boolean;\n\treadonly contentChanged?: boolean;\n\treadonly outputIsHoveredChanged?: boolean;\n\treadonly outputIsFocusedChanged?: boolean;\n\treadonly cellIsHoveredChanged?: boolean;\n\treadonly cellLineNumberChanged?: boolean;\n}\n\nexport function cellRangesEqual(a: ICellRange[], b: ICellRange[]) {\n\ta = reduceCellRanges(a);\n\tb = reduceCellRanges(b);\n\tif (a.length !== b.length) {\n\t\treturn false;\n\t}\n\n\tfor (let i = 0; i < a.length; i++) {\n\t\tif (a[i].start !== b[i].start || a[i].end !== b[i].end) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\n\n/**\n * @param _ranges\n */\nexport function reduceCellRanges(_ranges: ICellRange[]): ICellRange[] {\n\tif (!_ranges.length) {\n\t\treturn [];\n\t}\n\n\tconst ranges = _ranges.sort((a, b) => a.start - b.start);\n\tconst result: ICellRange[] = [];\n\tlet currentRangeStart = ranges[0].start;\n\tlet currentRangeEnd = ranges[0].end + 1;\n\n\tfor (let i = 0, len = ranges.length; i < len; i++) {\n\t\tconst range = ranges[i];\n\n\t\tif (range.start > currentRangeEnd) {\n\t\t\tresult.push({ start: currentRangeStart, end: currentRangeEnd - 1 });\n\t\t\tcurrentRangeStart = range.start;\n\t\t\tcurrentRangeEnd = range.end + 1;\n\t\t} else if (range.end + 1 > currentRangeEnd) {\n\t\t\tcurrentRangeEnd = range.end + 1;\n\t\t}\n\t}\n\n\tresult.push({ start: currentRangeStart, end: currentRangeEnd - 1 });\n\treturn result;\n}\n\nexport function getVisibleCells(cells: CellViewModel[], hiddenRanges: ICellRange[]) {\n\tif (!hiddenRanges.length) {\n\t\treturn cells;\n\t}\n\n\tlet start = 0;\n\tlet hiddenRangeIndex = 0;\n\tconst result: CellViewModel[] = [];\n\n\twhile (start < cells.length && hiddenRangeIndex < hiddenRanges.length) {\n\t\tif (start < hiddenRanges[hiddenRangeIndex].start) {\n\t\t\tresult.push(...cells.slice(start, hiddenRanges[hiddenRangeIndex].start));\n\t\t}\n\n\t\tstart = hiddenRanges[hiddenRangeIndex].end + 1;\n\t\thiddenRangeIndex++;\n\t}\n\n\tif (start < cells.length) {\n\t\tresult.push(...cells.slice(start));\n\t}\n\n\treturn result;\n}\n\nexport function getNotebookEditorFromEditorPane(editorPane?: IEditorPane): INotebookEditor | undefined {\n\treturn editorPane?.getId() === NOTEBOOK_EDITOR_ID ? editorPane.getControl() as INotebookEditor | undefined : undefined;\n}\n\nlet EDITOR_TOP_PADDING = 12;\nconst editorTopPaddingChangeEmitter = new Emitter<void>();\n\nexport const EditorTopPaddingChangeEvent = editorTopPaddingChangeEmitter.event;\n\nexport function updateEditorTopPadding(top: number) {\n\tEDITOR_TOP_PADDING = top;\n\teditorTopPaddingChangeEmitter.fire();\n}\n\nexport function getEditorTopPadding() {\n\treturn EDITOR_TOP_PADDING;\n}\n\n/**\n * ranges: model selections\n * this will convert model selections to view indexes first, and then include the hidden ranges in the list view\n */\nexport function expandCellRangesWithHiddenCells(editor: INotebookEditor, viewModel: NotebookViewModel, ranges: ICellRange[]) {\n\t// assuming ranges are sorted and no overlap\n\tconst indexes = cellRangesToIndexes(ranges);\n\tlet modelRanges: ICellRange[] = [];\n\tindexes.forEach(index => {\n\t\tconst viewCell = viewModel.viewCells[index];\n\n\t\tif (!viewCell) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewIndex = editor.getViewIndex(viewCell);\n\t\tif (viewIndex < 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst nextViewIndex = viewIndex + 1;\n\t\tconst range = editor.getCellRangeFromViewRange(viewIndex, nextViewIndex);\n\n\t\tif (range) {\n\t\t\tmodelRanges.push(range);\n\t\t}\n\t});\n\n\treturn reduceRanges(modelRanges);\n}\n\n/**\n * Return a set of ranges for the cells matching the given predicate\n */\nexport function getRanges(cells: ICellViewModel[], included: (cell: ICellViewModel) => boolean): ICellRange[] {\n\tconst ranges: ICellRange[] = [];\n\tlet currentRange: ICellRange | undefined;\n\n\tcells.forEach((cell, idx) => {\n\t\tif (included(cell)) {\n\t\t\tif (!currentRange) {\n\t\t\t\tcurrentRange = { start: idx, end: idx + 1 };\n\t\t\t\tranges.push(currentRange);\n\t\t\t} else {\n\t\t\t\tcurrentRange.end = idx + 1;\n\t\t\t}\n\t\t} else {\n\t\t\tcurrentRange = undefined;\n\t\t}\n\t});\n\n\treturn ranges;\n}\n"]}