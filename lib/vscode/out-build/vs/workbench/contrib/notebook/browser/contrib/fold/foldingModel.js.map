{"version":3,"file":"foldingModel.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/notebook/browser/contrib/fold/foldingModel.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { TrackedRangeStickiness } from 'vs/editor/common/model';\nimport { FoldingRegion, FoldingRegions } from 'vs/editor/contrib/folding/foldingRanges';\nimport { IFoldingRangeData, sanitizeRanges } from 'vs/editor/contrib/folding/syntaxRangeProvider';\nimport { CellViewModel, NotebookViewModel } from 'vs/workbench/contrib/notebook/browser/viewModel/notebookViewModel';\nimport { CellKind } from 'vs/workbench/contrib/notebook/common/notebookCommon';\nimport { cellRangesToIndexes, ICellRange } from 'vs/workbench/contrib/notebook/common/notebookRange';\n\ntype RegionFilter = (r: FoldingRegion) => boolean;\ntype RegionFilterWithLevel = (r: FoldingRegion, level: number) => boolean;\n\n\nexport class FoldingModel {\n\tprivate _viewModel: NotebookViewModel | null = null;\n\tprivate readonly _viewModelStore = new DisposableStore();\n\tprivate _regions: FoldingRegions;\n\tget regions() {\n\t\treturn this._regions;\n\t}\n\n\tprivate readonly _onDidFoldingRegionChanges = new Emitter<void>();\n\treadonly onDidFoldingRegionChanged: Event<void> = this._onDidFoldingRegionChanges.event;\n\n\tprivate _foldingRangeDecorationIds: string[] = [];\n\n\tconstructor() {\n\t\tthis._regions = new FoldingRegions(new Uint32Array(0), new Uint32Array(0));\n\t}\n\n\tdispose() {\n\t\tthis._onDidFoldingRegionChanges.dispose();\n\t\tthis._viewModelStore.dispose();\n\t}\n\n\tdetachViewModel() {\n\t\tthis._viewModelStore.clear();\n\t\tthis._viewModel = null;\n\t}\n\n\tattachViewModel(model: NotebookViewModel) {\n\t\tthis._viewModel = model;\n\n\t\tthis._viewModelStore.add(this._viewModel.onDidChangeViewCells(() => {\n\t\t\tthis.recompute();\n\t\t}));\n\n\t\tthis._viewModelStore.add(this._viewModel.onDidChangeSelection(() => {\n\t\t\tif (!this._viewModel) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst indexes = cellRangesToIndexes(this._viewModel.getSelections());\n\n\t\t\tlet changed = false;\n\n\t\t\tindexes.forEach(index => {\n\t\t\t\tlet regionIndex = this.regions.findRange(index + 1);\n\n\t\t\t\twhile (regionIndex !== -1) {\n\t\t\t\t\tif (this._regions.isCollapsed(regionIndex) && index > this._regions.getStartLineNumber(regionIndex) - 1) {\n\t\t\t\t\t\tthis._regions.setCollapsed(regionIndex, false);\n\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t}\n\t\t\t\t\tregionIndex = this._regions.getParentIndex(regionIndex);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (changed) {\n\t\t\t\tthis._onDidFoldingRegionChanges.fire();\n\t\t\t}\n\n\t\t}));\n\n\t\tthis.recompute();\n\t}\n\n\tgetRegionAtLine(lineNumber: number): FoldingRegion | null {\n\t\tif (this._regions) {\n\t\t\tlet index = this._regions.findRange(lineNumber);\n\t\t\tif (index >= 0) {\n\t\t\t\treturn this._regions.toRegion(index);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetRegionsInside(region: FoldingRegion | null, filter?: RegionFilter | RegionFilterWithLevel): FoldingRegion[] {\n\t\tlet result: FoldingRegion[] = [];\n\t\tlet index = region ? region.regionIndex + 1 : 0;\n\t\tlet endLineNumber = region ? region.endLineNumber : Number.MAX_VALUE;\n\n\t\tif (filter && filter.length === 2) {\n\t\t\tconst levelStack: FoldingRegion[] = [];\n\t\t\tfor (let i = index, len = this._regions.length; i < len; i++) {\n\t\t\t\tlet current = this._regions.toRegion(i);\n\t\t\t\tif (this._regions.getStartLineNumber(i) < endLineNumber) {\n\t\t\t\t\twhile (levelStack.length > 0 && !current.containedBy(levelStack[levelStack.length - 1])) {\n\t\t\t\t\t\tlevelStack.pop();\n\t\t\t\t\t}\n\t\t\t\t\tlevelStack.push(current);\n\t\t\t\t\tif (filter(current, levelStack.length)) {\n\t\t\t\t\t\tresult.push(current);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (let i = index, len = this._regions.length; i < len; i++) {\n\t\t\t\tlet current = this._regions.toRegion(i);\n\t\t\t\tif (this._regions.getStartLineNumber(i) < endLineNumber) {\n\t\t\t\t\tif (!filter || (filter as RegionFilter)(current)) {\n\t\t\t\t\t\tresult.push(current);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tgetAllRegionsAtLine(lineNumber: number, filter?: (r: FoldingRegion, level: number) => boolean): FoldingRegion[] {\n\t\tlet result: FoldingRegion[] = [];\n\t\tif (this._regions) {\n\t\t\tlet index = this._regions.findRange(lineNumber);\n\t\t\tlet level = 1;\n\t\t\twhile (index >= 0) {\n\t\t\t\tlet current = this._regions.toRegion(index);\n\t\t\t\tif (!filter || filter(current, level)) {\n\t\t\t\t\tresult.push(current);\n\t\t\t\t}\n\t\t\t\tlevel++;\n\t\t\t\tindex = current.parentIndex;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tsetCollapsed(index: number, newState: boolean) {\n\t\tthis._regions.setCollapsed(index, newState);\n\t}\n\n\trecompute() {\n\t\tif (!this._viewModel) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewModel = this._viewModel;\n\t\tconst cells = viewModel.viewCells;\n\t\tconst stack: { index: number, level: number, endIndex: number }[] = [];\n\n\t\tfor (let i = 0; i < cells.length; i++) {\n\t\t\tconst cell = cells[i];\n\n\t\t\tif (cell.cellKind === CellKind.Code) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst content = cell.getText();\n\n\t\t\tconst matches = content.match(/^[ \\t]*(\\#+)/gm);\n\n\t\t\tlet min = 7;\n\t\t\tif (matches && matches.length) {\n\t\t\t\tfor (let j = 0; j < matches.length; j++) {\n\t\t\t\t\tmin = Math.min(min, matches[j].length);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (min < 7) {\n\t\t\t\t// header 1 to 6\n\t\t\t\tstack.push({ index: i, level: min, endIndex: 0 });\n\t\t\t}\n\t\t}\n\n\t\t// calcualte folding ranges\n\t\tconst rawFoldingRanges: IFoldingRangeData[] = stack.map((entry, startIndex) => {\n\t\t\tlet end: number | undefined = undefined;\n\t\t\tfor (let i = startIndex + 1; i < stack.length; ++i) {\n\t\t\t\tif (stack[i].level <= entry.level) {\n\t\t\t\t\tend = stack[i].index - 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst endIndex = end !== undefined ? end : cells.length - 1;\n\n\t\t\t// one based\n\t\t\treturn {\n\t\t\t\tstart: entry.index + 1,\n\t\t\t\tend: endIndex + 1,\n\t\t\t\trank: 1\n\t\t\t};\n\t\t}).filter(range => range.start !== range.end);\n\n\t\tconst newRegions = sanitizeRanges(rawFoldingRanges, 5000);\n\n\t\t// restore collased state\n\t\tlet i = 0;\n\t\tconst nextCollapsed = () => {\n\t\t\twhile (i < this._regions.length) {\n\t\t\t\tconst isCollapsed = this._regions.isCollapsed(i);\n\t\t\t\ti++;\n\t\t\t\tif (isCollapsed) {\n\t\t\t\t\treturn i - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn -1;\n\t\t};\n\n\t\tlet k = 0;\n\t\tlet collapsedIndex = nextCollapsed();\n\n\t\twhile (collapsedIndex !== -1 && k < newRegions.length) {\n\t\t\t// get the latest range\n\t\t\tconst decRange = viewModel.getTrackedRange(this._foldingRangeDecorationIds[collapsedIndex]);\n\t\t\tif (decRange) {\n\t\t\t\tconst collasedStartIndex = decRange.start;\n\n\t\t\t\twhile (k < newRegions.length) {\n\t\t\t\t\tconst startIndex = newRegions.getStartLineNumber(k) - 1;\n\t\t\t\t\tif (collasedStartIndex >= startIndex) {\n\t\t\t\t\t\tnewRegions.setCollapsed(k, collasedStartIndex === startIndex);\n\t\t\t\t\t\tk++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcollapsedIndex = nextCollapsed();\n\t\t}\n\n\t\twhile (k < newRegions.length) {\n\t\t\tnewRegions.setCollapsed(k, false);\n\t\t\tk++;\n\t\t}\n\n\t\tconst cellRanges: ICellRange[] = [];\n\t\tfor (let i = 0; i < newRegions.length; i++) {\n\t\t\tconst region = newRegions.toRegion(i);\n\t\t\tcellRanges.push({ start: region.startLineNumber - 1, end: region.endLineNumber - 1 });\n\t\t}\n\n\t\t// remove old tracked ranges and add new ones\n\t\t// TODO@rebornix, implement delta\n\t\tthis._foldingRangeDecorationIds.forEach(id => viewModel.setTrackedRange(id, null, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter));\n\t\tthis._foldingRangeDecorationIds = cellRanges.map(region => viewModel.setTrackedRange(null, region, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter)).filter(str => str !== null) as string[];\n\n\t\tthis._regions = newRegions;\n\t\tthis._onDidFoldingRegionChanges.fire();\n\t}\n\n\tgetMemento(): ICellRange[] {\n\t\tconst collapsedRanges: ICellRange[] = [];\n\t\tlet i = 0;\n\t\twhile (i < this._regions.length) {\n\t\t\tconst isCollapsed = this._regions.isCollapsed(i);\n\n\t\t\tif (isCollapsed) {\n\t\t\t\tconst region = this._regions.toRegion(i);\n\t\t\t\tcollapsedRanges.push({ start: region.startLineNumber - 1, end: region.endLineNumber - 1 });\n\t\t\t}\n\n\t\t\ti++;\n\t\t}\n\n\t\treturn collapsedRanges;\n\t}\n\n\tpublic applyMemento(state: ICellRange[]): boolean {\n\t\tif (!this._viewModel) {\n\t\t\treturn false;\n\t\t}\n\n\t\tlet i = 0;\n\t\tlet k = 0;\n\n\t\twhile (k < state.length && i < this._regions.length) {\n\t\t\t// get the latest range\n\t\t\tconst decRange = this._viewModel.getTrackedRange(this._foldingRangeDecorationIds[i]);\n\t\t\tif (decRange) {\n\t\t\t\tconst collasedStartIndex = state[k].start;\n\n\t\t\t\twhile (i < this._regions.length) {\n\t\t\t\t\tconst startIndex = this._regions.getStartLineNumber(i) - 1;\n\t\t\t\t\tif (collasedStartIndex >= startIndex) {\n\t\t\t\t\t\tthis._regions.setCollapsed(i, collasedStartIndex === startIndex);\n\t\t\t\t\t\ti++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tk++;\n\t\t}\n\n\t\twhile (i < this._regions.length) {\n\t\t\tthis._regions.setCollapsed(i, false);\n\t\t\ti++;\n\t\t}\n\n\t\treturn true;\n\t}\n}\n\nexport enum CellFoldingState {\n\tNone,\n\tExpanded,\n\tCollapsed\n}\n\nexport interface EditorFoldingStateDelegate {\n\tgetCellIndex(cell: CellViewModel): number;\n\tgetFoldingState(index: number): CellFoldingState;\n}\n\nexport function updateFoldingStateAtIndex(foldingModel: FoldingModel, index: number, collapsed: boolean) {\n\tconst range = foldingModel.regions.findRange(index + 1);\n\tfoldingModel.setCollapsed(range, collapsed);\n}\n"]}