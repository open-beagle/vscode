{"version":3,"file":"notebookVisibleCellObserver.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/notebook/browser/contrib/statusBar/notebookVisibleCellObserver.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { diffSets } from 'vs/base/common/collections';\nimport { Emitter } from 'vs/base/common/event';\nimport { Disposable, DisposableStore } from 'vs/base/common/lifecycle';\nimport { isDefined } from 'vs/base/common/types';\nimport { INotebookEditor } from 'vs/workbench/contrib/notebook/browser/notebookBrowser';\nimport { CellViewModel } from 'vs/workbench/contrib/notebook/browser/viewModel/notebookViewModel';\nimport { cellRangesToIndexes } from 'vs/workbench/contrib/notebook/common/notebookRange';\n\nexport interface ICellVisibilityChangeEvent {\n\tadded: CellViewModel[];\n\tremoved: CellViewModel[];\n}\n\nexport class NotebookVisibleCellObserver extends Disposable {\n\tprivate readonly _onDidChangeVisibleCells = this._register(new Emitter<ICellVisibilityChangeEvent>());\n\treadonly onDidChangeVisibleCells = this._onDidChangeVisibleCells.event;\n\n\tprivate readonly _viewModelDisposables = this._register(new DisposableStore());\n\n\tprivate _visibleCells: CellViewModel[] = [];\n\n\tget visibleCells(): CellViewModel[] {\n\t\treturn this._visibleCells;\n\t}\n\n\tconstructor(private readonly _notebookEditor: INotebookEditor) {\n\t\tsuper();\n\n\t\tthis._register(this._notebookEditor.onDidChangeVisibleRanges(this._updateVisibleCells, this));\n\t\tthis._register(this._notebookEditor.onDidChangeModel(this._onModelChange, this));\n\t\tthis._updateVisibleCells();\n\t}\n\n\tprivate _onModelChange() {\n\t\tthis._viewModelDisposables.clear();\n\t\tconst vm = this._notebookEditor.viewModel;\n\t\tif (vm) {\n\t\t\tthis._viewModelDisposables.add(vm.onDidChangeViewCells(() => this.updateEverything()));\n\t\t}\n\n\t\tthis.updateEverything();\n\t}\n\n\tprotected updateEverything(): void {\n\t\tthis._onDidChangeVisibleCells.fire({ added: [], removed: Array.from(this._visibleCells) });\n\t\tthis._visibleCells = [];\n\t\tthis._updateVisibleCells();\n\t}\n\n\tprivate _updateVisibleCells(): void {\n\t\tconst vm = this._notebookEditor.viewModel;\n\t\tif (!vm) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst rangesWithEnd = this._notebookEditor.visibleRanges\n\t\t\t.map(range => ({ start: range.start, end: range.end + 1 }));\n\t\tconst newVisibleCells = cellRangesToIndexes(rangesWithEnd)\n\t\t\t.map(index => vm.cellAt(index))\n\t\t\t.filter(isDefined);\n\t\tconst newVisibleHandles = new Set(newVisibleCells.map(cell => cell.handle));\n\t\tconst oldVisibleHandles = new Set(this._visibleCells.map(cell => cell.handle));\n\t\tconst diff = diffSets(oldVisibleHandles, newVisibleHandles);\n\n\t\tconst added = diff.added\n\t\t\t.map(handle => vm.getCellByHandle(handle))\n\t\t\t.filter(isDefined);\n\t\tconst removed = diff.removed\n\t\t\t.map(handle => vm.getCellByHandle(handle))\n\t\t\t.filter(isDefined);\n\n\t\tthis._visibleCells = newVisibleCells;\n\t\tthis._onDidChangeVisibleCells.fire({\n\t\t\tadded,\n\t\t\tremoved\n\t\t});\n\t}\n}\n"]}