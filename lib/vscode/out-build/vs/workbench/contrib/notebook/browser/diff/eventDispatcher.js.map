{"version":3,"file":"eventDispatcher.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/notebook/browser/diff/eventDispatcher.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAMhG,IAAY,yBAKX;IALD,WAAY,yBAAyB;QACpC,2FAAiB,CAAA;QACjB,mGAAqB,CAAA;QACrB,uBAAuB;QACvB,uBAAuB;IACxB,CAAC,EALW,yBAAyB,GAAzB,iCAAyB,KAAzB,iCAAyB,QAKpC;IAED,MAAa,8BAA8B;QAG1C,YAAqB,MAAiC,EAAW,KAAyB;YAArE,WAAM,GAAN,MAAM,CAA2B;YAAW,UAAK,GAAL,KAAK,CAAoB;YAF1E,SAAI,GAAG,yBAAyB,CAAC,aAAa,CAAC;QAI/D,CAAC;KACD;IAND,wEAMC;IAED,MAAa,8BAA8B;QAG1C,YAAqB,MAA8B;YAA9B,WAAM,GAAN,MAAM,CAAwB;YAFnC,SAAI,GAAG,yBAAyB,CAAC,iBAAiB,CAAC;QAInE,CAAC;KACD;IAND,wEAMC;IAID,MAAa,iCAAiC;QAM7C;YALmB,uBAAkB,GAAG,IAAI,eAAO,EAAkC,CAAC;YAC7E,sBAAiB,GAAG,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC;YACxC,2BAAsB,GAAG,IAAI,eAAO,EAAkC,CAAC;YACjF,0BAAqB,GAAG,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC;QAGnE,CAAC;QAED,IAAI,CAAC,MAA+B;YACnC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;gBAClD,MAAM,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;gBAEpB,QAAQ,CAAC,CAAC,IAAI,EAAE;oBACf,KAAK,yBAAyB,CAAC,aAAa;wBAC3C,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBAChC,MAAM;oBACP,KAAK,yBAAyB,CAAC,iBAAiB;wBAC/C,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBACpC,MAAM;iBACP;aACD;QACF,CAAC;KACD;IAvBD,8EAuBC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from 'vs/base/common/event';\nimport { IDiffElementLayoutInfo } from 'vs/workbench/contrib/notebook/browser/diff/notebookDiffEditorBrowser';\nimport { NotebookLayoutChangeEvent, NotebookLayoutInfo } from 'vs/workbench/contrib/notebook/browser/notebookBrowser';\n\nexport enum NotebookDiffViewEventType {\n\tLayoutChanged = 1,\n\tCellLayoutChanged = 2\n\t// MetadataChanged = 2,\n\t// CellStateChanged = 3\n}\n\nexport class NotebookDiffLayoutChangedEvent {\n\tpublic readonly type = NotebookDiffViewEventType.LayoutChanged;\n\n\tconstructor(readonly source: NotebookLayoutChangeEvent, readonly value: NotebookLayoutInfo) {\n\n\t}\n}\n\nexport class NotebookCellLayoutChangedEvent {\n\tpublic readonly type = NotebookDiffViewEventType.CellLayoutChanged;\n\n\tconstructor(readonly source: IDiffElementLayoutInfo) {\n\n\t}\n}\n\nexport type NotebookDiffViewEvent = NotebookDiffLayoutChangedEvent | NotebookCellLayoutChangedEvent;\n\nexport class NotebookDiffEditorEventDispatcher {\n\tprotected readonly _onDidChangeLayout = new Emitter<NotebookDiffLayoutChangedEvent>();\n\treadonly onDidChangeLayout = this._onDidChangeLayout.event;\n\tprotected readonly _onDidChangeCellLayout = new Emitter<NotebookCellLayoutChangedEvent>();\n\treadonly onDidChangeCellLayout = this._onDidChangeCellLayout.event;\n\n\tconstructor() {\n\t}\n\n\temit(events: NotebookDiffViewEvent[]) {\n\t\tfor (let i = 0, len = events.length; i < len; i++) {\n\t\t\tconst e = events[i];\n\n\t\t\tswitch (e.type) {\n\t\t\t\tcase NotebookDiffViewEventType.LayoutChanged:\n\t\t\t\t\tthis._onDidChangeLayout.fire(e);\n\t\t\t\t\tbreak;\n\t\t\t\tcase NotebookDiffViewEventType.CellLayoutChanged:\n\t\t\t\t\tthis._onDidChangeCellLayout.fire(e);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\n"]}