{"version":3,"file":"notebookKernelServiceImpl.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/notebook/browser/notebookKernelServiceImpl.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { DisposableStore, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { INotebookKernel, INotebookTextModel } from 'vs/workbench/contrib/notebook/common/notebookCommon';\nimport { INotebookKernelBindEvent, INotebookKernelMatchResult, INotebookKernelService, INotebookTextModelLike } from 'vs/workbench/contrib/notebook/common/notebookKernelService';\nimport { LRUCache, ResourceMap } from 'vs/base/common/map';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { URI } from 'vs/base/common/uri';\nimport { INotebookService } from 'vs/workbench/contrib/notebook/common/notebookService';\nimport { runWhenIdle } from 'vs/base/common/async';\n\nclass KernelInfo {\n\n\tprivate static _logicClock = 0;\n\n\treadonly kernel: INotebookKernel;\n\tpublic score: number;\n\treadonly time: number;\n\n\treadonly notebookPriorities = new ResourceMap<number>();\n\n\tconstructor(kernel: INotebookKernel) {\n\t\tthis.kernel = kernel;\n\t\tthis.score = -1;\n\t\tthis.time = KernelInfo._logicClock++;\n\t}\n}\n\nclass NotebookTextModelLikeId {\n\tstatic str(k: INotebookTextModelLike): string {\n\t\treturn `${k.viewType}/${k.uri.toString()}`;\n\t}\n\tstatic obj(s: string): INotebookTextModelLike {\n\t\tconst idx = s.indexOf('/');\n\t\treturn {\n\t\t\tviewType: s.substr(0, idx),\n\t\t\turi: URI.parse(s.substr(idx + 1))\n\t\t};\n\t}\n}\n\nexport class NotebookKernelService implements INotebookKernelService {\n\n\tdeclare _serviceBrand: undefined;\n\n\tprivate readonly _disposables = new DisposableStore();\n\tprivate readonly _kernels = new Map<string, KernelInfo>();\n\n\tprivate readonly _typeBindings = new LRUCache<string, string>(100, 0.7);\n\tprivate readonly _notebookBindings = new LRUCache<string, string>(1000, 0.7);\n\n\tprivate readonly _onDidChangeNotebookKernelBinding = new Emitter<INotebookKernelBindEvent>();\n\tprivate readonly _onDidAddKernel = new Emitter<INotebookKernel>();\n\tprivate readonly _onDidRemoveKernel = new Emitter<INotebookKernel>();\n\tprivate readonly _onDidChangeNotebookAffinity = new Emitter<void>();\n\n\treadonly onDidChangeNotebookKernelBinding: Event<INotebookKernelBindEvent> = this._onDidChangeNotebookKernelBinding.event;\n\treadonly onDidAddKernel: Event<INotebookKernel> = this._onDidAddKernel.event;\n\treadonly onDidRemoveKernel: Event<INotebookKernel> = this._onDidRemoveKernel.event;\n\treadonly onDidChangeNotebookAffinity: Event<void> = this._onDidChangeNotebookAffinity.event;\n\n\tprivate static _storageNotebookBinding = 'notebook.controller2NotebookBindings';\n\tprivate static _storageTypeBinding = 'notebook.controller2TypeBindings';\n\n\tconstructor(\n\t\t@INotebookService private readonly _notebookService: INotebookService,\n\t\t@IStorageService private readonly _storageService: IStorageService,\n\t) {\n\n\t\t// auto associate kernels to new notebook documents, also emit event when\n\t\t// a notebook has been closed (but don't update the memento)\n\t\tthis._disposables.add(_notebookService.onDidAddNotebookDocument(this._tryAutoBindNotebook, this));\n\t\tthis._disposables.add(_notebookService.onDidRemoveNotebookDocument(notebook => {\n\t\t\tconst kernelId = this._notebookBindings.get(NotebookTextModelLikeId.str(notebook));\n\t\t\tif (kernelId) {\n\t\t\t\tthis._onDidChangeNotebookKernelBinding.fire({ notebook: notebook.uri, oldKernel: kernelId, newKernel: undefined });\n\t\t\t}\n\t\t}));\n\n\t\t// restore from storage\n\t\ttry {\n\t\t\tconst data = JSON.parse(this._storageService.get(NotebookKernelService._storageNotebookBinding, StorageScope.WORKSPACE, '[]'));\n\t\t\tthis._notebookBindings.fromJSON(data);\n\t\t} catch {\n\t\t\t// ignore\n\t\t}\n\t\ttry {\n\t\t\tconst data = JSON.parse(this._storageService.get(NotebookKernelService._storageTypeBinding, StorageScope.GLOBAL, '[]'));\n\t\t\tthis._typeBindings.fromJSON(data);\n\t\t} catch {\n\t\t\t// ignore\n\t\t}\n\t}\n\n\tdispose() {\n\t\tthis._disposables.dispose();\n\t\tthis._onDidChangeNotebookKernelBinding.dispose();\n\t\tthis._onDidAddKernel.dispose();\n\t\tthis._onDidRemoveKernel.dispose();\n\t\tthis._kernels.clear();\n\t}\n\n\tprivate _persistSoonHandle?: IDisposable;\n\n\tprivate _persistMementos(): void {\n\t\tthis._persistSoonHandle?.dispose();\n\t\tthis._persistSoonHandle = runWhenIdle(() => {\n\t\t\tthis._storageService.store(NotebookKernelService._storageNotebookBinding, JSON.stringify(this._notebookBindings), StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\t\tthis._storageService.store(NotebookKernelService._storageTypeBinding, JSON.stringify(this._typeBindings), StorageScope.GLOBAL, StorageTarget.USER);\n\t\t}, 100);\n\t}\n\n\tprivate static _score(kernel: INotebookKernel, notebook: INotebookTextModelLike): number {\n\t\tif (kernel.viewType === '*') {\n\t\t\treturn 5;\n\t\t} else if (kernel.viewType === notebook.viewType) {\n\t\t\treturn 10;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tprivate _tryAutoBindNotebook(notebook: INotebookTextModel, onlyThisKernel?: INotebookKernel): void {\n\n\t\tconst id = this._notebookBindings.get(NotebookTextModelLikeId.str(notebook));\n\t\tif (!id) {\n\t\t\t// no kernel associated\n\t\t\treturn;\n\t\t}\n\t\tconst existingKernel = this._kernels.get(id);\n\t\tif (!existingKernel || !NotebookKernelService._score(existingKernel.kernel, notebook)) {\n\t\t\t// associated kernel not known, not matching\n\t\t\treturn;\n\t\t}\n\t\tif (!onlyThisKernel || existingKernel.kernel === onlyThisKernel) {\n\t\t\tthis._onDidChangeNotebookKernelBinding.fire({ notebook: notebook.uri, oldKernel: undefined, newKernel: existingKernel.kernel.id });\n\t\t}\n\t}\n\n\tregisterKernel(kernel: INotebookKernel): IDisposable {\n\t\tif (this._kernels.has(kernel.id)) {\n\t\t\tthrow new Error(`NOTEBOOK CONTROLLER with id '${kernel.id}' already exists`);\n\t\t}\n\n\t\tthis._kernels.set(kernel.id, new KernelInfo(kernel));\n\t\tthis._onDidAddKernel.fire(kernel);\n\n\t\t// auto associate the new kernel to existing notebooks it was\n\t\t// associated to in the past.\n\t\tfor (const notebook of this._notebookService.getNotebookTextModels()) {\n\t\t\tthis._tryAutoBindNotebook(notebook, kernel);\n\t\t}\n\n\t\treturn toDisposable(() => {\n\t\t\tif (this._kernels.delete(kernel.id)) {\n\t\t\t\tthis._onDidRemoveKernel.fire(kernel);\n\t\t\t}\n\t\t\tfor (const [key, candidate] of Array.from(this._notebookBindings)) {\n\t\t\t\tif (candidate === kernel.id) {\n\t\t\t\t\tthis._onDidChangeNotebookKernelBinding.fire({ notebook: NotebookTextModelLikeId.obj(key).uri, oldKernel: kernel.id, newKernel: undefined });\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tgetMatchingKernel(notebook: INotebookTextModelLike): INotebookKernelMatchResult {\n\n\t\t// all applicable kernels\n\t\tconst kernels: { kernel: INotebookKernel, instanceAffinity: number, typeAffinity: number, score: number }[] = [];\n\t\tfor (const info of this._kernels.values()) {\n\t\t\tconst score = NotebookKernelService._score(info.kernel, notebook);\n\t\t\tif (score) {\n\t\t\t\tkernels.push({\n\t\t\t\t\tscore,\n\t\t\t\t\tkernel: info.kernel,\n\t\t\t\t\tinstanceAffinity: info.notebookPriorities.get(notebook.uri) ?? 1 /* vscode.NotebookControllerPriority.Default */,\n\t\t\t\t\ttypeAffinity: this._typeBindings.get(info.kernel.viewType) === info.kernel.id ? 1 : 0\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tconst all = kernels\n\t\t\t.sort((a, b) => b.instanceAffinity - a.instanceAffinity || b.typeAffinity - a.typeAffinity || a.score - b.score || a.kernel.label.localeCompare(b.kernel.label))\n\t\t\t.map(obj => obj.kernel);\n\n\t\t// bound kernel\n\t\tconst selectedId = this._notebookBindings.get(NotebookTextModelLikeId.str(notebook));\n\t\tconst selected = selectedId ? this._kernels.get(selectedId)?.kernel : undefined;\n\n\t\treturn { all, selected };\n\t}\n\n\t// default kernel for notebookType\n\tselectKernelForNotebookType(kernel: INotebookKernel, typeId: string): void {\n\t\tconst existing = this._typeBindings.get(typeId);\n\t\tif (existing !== kernel.id) {\n\t\t\tthis._typeBindings.set(typeId, kernel.id);\n\t\t\tthis._persistMementos();\n\t\t\tthis._onDidChangeNotebookAffinity.fire();\n\t\t}\n\t}\n\n\t// a notebook has one kernel, a kernel has N notebooks\n\t// notebook <-1----N-> kernel\n\tselectKernelForNotebook(kernel: INotebookKernel, notebook: INotebookTextModelLike): void {\n\t\tconst key = NotebookTextModelLikeId.str(notebook);\n\t\tconst oldKernel = this._notebookBindings.get(key);\n\t\tif (oldKernel !== kernel?.id) {\n\t\t\tif (kernel) {\n\t\t\t\tthis._notebookBindings.set(key, kernel.id);\n\t\t\t} else {\n\t\t\t\tthis._notebookBindings.delete(key);\n\t\t\t}\n\t\t\tthis._onDidChangeNotebookKernelBinding.fire({ notebook: notebook.uri, oldKernel, newKernel: kernel.id });\n\t\t\tthis._persistMementos();\n\t\t}\n\t}\n\n\tupdateKernelNotebookAffinity(kernel: INotebookKernel, notebook: URI, preference: number | undefined): void {\n\t\tconst info = this._kernels.get(kernel.id);\n\t\tif (!info) {\n\t\t\tthrow new Error(`UNKNOWN kernel '${kernel.id}'`);\n\t\t}\n\t\tif (preference === undefined) {\n\t\t\tinfo.notebookPriorities.delete(notebook);\n\t\t} else {\n\t\t\tinfo.notebookPriorities.set(notebook, preference);\n\t\t}\n\t\tthis._onDidChangeNotebookAffinity.fire();\n\t}\n}\n"]}