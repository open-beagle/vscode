{"version":3,"sources":["vs/workbench/contrib/notebook/browser/contrib/format/formatting.ts"],"names":[],"mappings":"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","file":"formatting.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { registerAction2, Action2, MenuId } from 'vs/platform/actions/common/actions';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { localize } from 'vs/nls';\nimport { NOTEBOOK_IS_ACTIVE_EDITOR, NOTEBOOK_EDITOR_EDITABLE, getNotebookEditorFromEditorPane } from 'vs/workbench/contrib/notebook/browser/notebookBrowser';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport { ServicesAccessor, IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { NOTEBOOK_ACTIONS_CATEGORY } from 'vs/workbench/contrib/notebook/browser/contrib/coreActions';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { ITextModelService } from 'vs/editor/common/services/resolverService';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { getDocumentFormattingEditsUntilResult, formatDocumentWithSelectedProvider, FormattingMode } from 'vs/editor/contrib/format/format';\nimport { IEditorWorkerService } from 'vs/editor/common/services/editorWorkerService';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IBulkEditService, ResourceTextEdit } from 'vs/editor/browser/services/bulkEditService';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { registerEditorAction, EditorAction } from 'vs/editor/browser/editorExtensions';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { Progress } from 'vs/platform/progress/common/progress';\n\n// format notebook\nregisterAction2(class extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'notebook.format',\n\t\t\ttitle: { value: localize('format.title', \"Format Notebook\"), original: 'Format Notebook' },\n\t\t\tcategory: NOTEBOOK_ACTIONS_CATEGORY,\n\t\t\tprecondition: ContextKeyExpr.and(NOTEBOOK_IS_ACTIVE_EDITOR, NOTEBOOK_EDITOR_EDITABLE),\n\t\t\tkeybinding: {\n\t\t\t\twhen: EditorContextKeys.editorTextFocus.toNegated(),\n\t\t\t\tprimary: KeyMod.Shift | KeyMod.Alt | KeyCode.KEY_F,\n\t\t\t\tlinux: { primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_I },\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib\n\t\t\t},\n\t\t\tf1: true,\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.EditorContext,\n\t\t\t\twhen: ContextKeyExpr.and(EditorContextKeys.inCompositeEditor, EditorContextKeys.hasDocumentFormattingProvider),\n\t\t\t\tgroup: '1_modification',\n\t\t\t\torder: 1.3\n\t\t\t}\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst textModelService = accessor.get(ITextModelService);\n\t\tconst editorWorkerService = accessor.get(IEditorWorkerService);\n\t\tconst bulkEditService = accessor.get(IBulkEditService);\n\n\t\tconst editor = getNotebookEditorFromEditorPane(editorService.activeEditorPane);\n\t\tif (!editor || !editor.viewModel) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst notebook = editor.viewModel.notebookDocument;\n\t\tconst disposable = new DisposableStore();\n\t\ttry {\n\n\t\t\tconst edits: ResourceTextEdit[] = [];\n\n\t\t\tfor (const cell of notebook.cells) {\n\n\t\t\t\tconst ref = await textModelService.createModelReference(cell.uri);\n\t\t\t\tdisposable.add(ref);\n\n\t\t\t\tconst model = ref.object.textEditorModel;\n\n\t\t\t\tconst formatEdits = await getDocumentFormattingEditsUntilResult(\n\t\t\t\t\teditorWorkerService, model,\n\t\t\t\t\tmodel.getOptions(), CancellationToken.None\n\t\t\t\t);\n\n\t\t\t\tif (formatEdits) {\n\t\t\t\t\tfor (let edit of formatEdits) {\n\t\t\t\t\t\tedits.push(new ResourceTextEdit(model.uri, edit, model.getVersionId()));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tawait bulkEditService.apply(edits, { label: localize('label', \"Format Notebook\") });\n\n\t\t} finally {\n\t\t\tdisposable.dispose();\n\t\t}\n\t}\n});\n\n// format cell\nregisterEditorAction(class FormatCellAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'notebook.formatCell',\n\t\t\tlabel: localize('formatCell.label', \"Format Cell\"),\n\t\t\talias: 'Format Cell',\n\t\t\tprecondition: ContextKeyExpr.and(NOTEBOOK_IS_ACTIVE_EDITOR, NOTEBOOK_EDITOR_EDITABLE, EditorContextKeys.inCompositeEditor, EditorContextKeys.writable, EditorContextKeys.hasDocumentFormattingProvider),\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: ContextKeyExpr.and(EditorContextKeys.editorTextFocus),\n\t\t\t\tprimary: KeyMod.Shift | KeyMod.Alt | KeyCode.KEY_F,\n\t\t\t\tlinux: { primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_I },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t},\n\t\t\tcontextMenuOpts: {\n\t\t\t\tgroup: '1_modification',\n\t\t\t\torder: 1.301\n\t\t\t}\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, editor: ICodeEditor): Promise<void> {\n\t\tif (editor.hasModel()) {\n\t\t\tconst instaService = accessor.get(IInstantiationService);\n\t\t\tawait instaService.invokeFunction(formatDocumentWithSelectedProvider, editor, FormattingMode.Explicit, Progress.None, CancellationToken.None);\n\t\t}\n\t}\n});\n"]}