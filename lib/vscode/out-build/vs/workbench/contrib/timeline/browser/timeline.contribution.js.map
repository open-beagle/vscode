{"version":3,"sources":["vs/workbench/contrib/timeline/browser/timeline.contribution.ts"],"names":[],"mappings":"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","file":"timeline.contribution.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IViewsRegistry, IViewDescriptor, Extensions as ViewExtensions } from 'vs/workbench/common/views';\nimport { VIEW_CONTAINER } from 'vs/workbench/contrib/files/browser/explorerViewlet';\nimport { ITimelineService, TimelinePaneId } from 'vs/workbench/contrib/timeline/common/timeline';\nimport { TimelineHasProviderContext, TimelineService } from 'vs/workbench/contrib/timeline/common/timelineService';\nimport { TimelinePane } from './timelinePane';\nimport { IConfigurationRegistry, Extensions as ConfigurationExtensions } from 'vs/platform/configuration/common/configurationRegistry';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { MenuId, MenuRegistry } from 'vs/platform/actions/common/actions';\nimport { ICommandHandler, CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { ExplorerFolderContext } from 'vs/workbench/contrib/files/common/files';\nimport { ResourceContextKey } from 'vs/workbench/common/resources';\nimport { Codicon } from 'vs/base/common/codicons';\nimport { registerIcon } from 'vs/platform/theme/common/iconRegistry';\n\n\nconst timelineViewIcon = registerIcon('timeline-view-icon', Codicon.history, localize('timelineViewIcon', 'View icon of the timeline view.'));\nconst timelineOpenIcon = registerIcon('timeline-open', Codicon.history, localize('timelineOpenIcon', 'Icon for the open timeline action.'));\n\nexport class TimelinePaneDescriptor implements IViewDescriptor {\n\treadonly id = TimelinePaneId;\n\treadonly name = TimelinePane.TITLE;\n\treadonly containerIcon = timelineViewIcon;\n\treadonly ctorDescriptor = new SyncDescriptor(TimelinePane);\n\treadonly order = 2;\n\treadonly weight = 30;\n\treadonly collapsed = true;\n\treadonly canToggleVisibility = true;\n\treadonly hideByDefault = false;\n\treadonly canMoveView = true;\n\treadonly when = TimelineHasProviderContext;\n\n\tfocusCommand = { id: 'timeline.focus' };\n}\n\n// Configuration\nconst configurationRegistry = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration);\nconfigurationRegistry.registerConfiguration({\n\tid: 'timeline',\n\torder: 1001,\n\ttitle: localize('timelineConfigurationTitle', \"Timeline\"),\n\ttype: 'object',\n\tproperties: {\n\t\t'timeline.excludeSources': {\n\t\t\ttype: [\n\t\t\t\t'array',\n\t\t\t\t'null'\n\t\t\t],\n\t\t\tdefault: null,\n\t\t\tdescription: localize('timeline.excludeSources', \"An array of Timeline sources that should be excluded from the Timeline view.\"),\n\t\t},\n\t\t'timeline.pageSize': {\n\t\t\ttype: ['number', 'null'],\n\t\t\tdefault: null,\n\t\t\tmarkdownDescription: localize('timeline.pageSize', \"The number of items to show in the Timeline view by default and when loading more items. Setting to `null` (the default) will automatically choose a page size based on the visible area of the Timeline view.\"),\n\t\t},\n\t\t'timeline.pageOnScroll': {\n\t\t\ttype: 'boolean',\n\t\t\tdefault: false,\n\t\t\tdescription: localize('timeline.pageOnScroll', \"Experimental. Controls whether the Timeline view will load the next page of items when you scroll to the end of the list.\"),\n\t\t},\n\t}\n});\n\nRegistry.as<IViewsRegistry>(ViewExtensions.ViewsRegistry).registerViews([new TimelinePaneDescriptor()], VIEW_CONTAINER);\n\nnamespace OpenTimelineAction {\n\n\texport const ID = 'files.openTimeline';\n\texport const LABEL = localize('files.openTimeline', \"Open Timeline\");\n\n\texport function handler(): ICommandHandler {\n\t\treturn (accessor, arg) => {\n\t\t\tconst service = accessor.get(ITimelineService);\n\t\t\treturn service.setUri(arg);\n\t\t};\n\t}\n}\n\nCommandsRegistry.registerCommand(OpenTimelineAction.ID, OpenTimelineAction.handler());\n\nMenuRegistry.appendMenuItem(MenuId.ExplorerContext, ({\n\tgroup: '4_timeline',\n\torder: 1,\n\tcommand: {\n\t\tid: OpenTimelineAction.ID,\n\t\ttitle: OpenTimelineAction.LABEL,\n\t\ticon: timelineOpenIcon\n\t},\n\twhen: ContextKeyExpr.and(ExplorerFolderContext.toNegated(), ResourceContextKey.HasResource, TimelineHasProviderContext)\n}));\n\nregisterSingleton(ITimelineService, TimelineService, true);\n"]}