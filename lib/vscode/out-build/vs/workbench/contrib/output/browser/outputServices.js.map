{"version":3,"file":"outputServices.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/output/browser/outputServices.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { URI } from 'vs/base/common/uri';\nimport { IDisposable, dispose, Disposable } from 'vs/base/common/lifecycle';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IOutputChannel, IOutputService, OUTPUT_VIEW_ID, OUTPUT_SCHEME, LOG_SCHEME, LOG_MIME, OUTPUT_MIME } from 'vs/workbench/contrib/output/common/output';\nimport { IOutputChannelDescriptor, Extensions, IOutputChannelRegistry } from 'vs/workbench/services/output/common/output';\nimport { OutputLinkProvider } from 'vs/workbench/contrib/output/common/outputLinkProvider';\nimport { ITextModelService, ITextModelContentProvider } from 'vs/editor/common/services/resolverService';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { ILifecycleService } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { IOutputChannelModel, IOutputChannelModelService } from 'vs/workbench/contrib/output/common/outputChannelModel';\nimport { IViewsService } from 'vs/workbench/common/views';\nimport { OutputViewPane } from 'vs/workbench/contrib/output/browser/outputView';\n\nconst OUTPUT_ACTIVE_CHANNEL_KEY = 'output.activechannel';\n\nclass OutputChannel extends Disposable implements IOutputChannel {\n\n\tscrollLock: boolean = false;\n\treadonly model: IOutputChannelModel;\n\treadonly id: string;\n\treadonly label: string;\n\treadonly uri: URI;\n\n\tconstructor(\n\t\treadonly outputChannelDescriptor: IOutputChannelDescriptor,\n\t\t@IOutputChannelModelService outputChannelModelService: IOutputChannelModelService\n\t) {\n\t\tsuper();\n\t\tthis.id = outputChannelDescriptor.id;\n\t\tthis.label = outputChannelDescriptor.label;\n\t\tthis.uri = URI.from({ scheme: OUTPUT_SCHEME, path: this.id });\n\t\tthis.model = this._register(outputChannelModelService.createOutputChannelModel(this.id, this.uri, outputChannelDescriptor.log ? LOG_MIME : OUTPUT_MIME, outputChannelDescriptor.file));\n\t}\n\n\tappend(output: string): void {\n\t\tthis.model.append(output);\n\t}\n\n\tupdate(): void {\n\t\tthis.model.update();\n\t}\n\n\tclear(till?: number): void {\n\t\tthis.model.clear(till);\n\t}\n}\n\nexport class OutputService extends Disposable implements IOutputService, ITextModelContentProvider {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate channels: Map<string, OutputChannel> = new Map<string, OutputChannel>();\n\tprivate activeChannelIdInStorage: string;\n\tprivate activeChannel?: OutputChannel;\n\n\tprivate readonly _onActiveOutputChannel = this._register(new Emitter<string>());\n\treadonly onActiveOutputChannel: Event<string> = this._onActiveOutputChannel.event;\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ITextModelService textModelResolverService: ITextModelService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@ILifecycleService private readonly lifecycleService: ILifecycleService,\n\t\t@IViewsService private readonly viewsService: IViewsService,\n\t) {\n\t\tsuper();\n\t\tthis.activeChannelIdInStorage = this.storageService.get(OUTPUT_ACTIVE_CHANNEL_KEY, StorageScope.WORKSPACE, '');\n\n\t\t// Register as text model content provider for output\n\t\ttextModelResolverService.registerTextModelContentProvider(OUTPUT_SCHEME, this);\n\t\tinstantiationService.createInstance(OutputLinkProvider);\n\n\t\t// Create output channels for already registered channels\n\t\tconst registry = Registry.as<IOutputChannelRegistry>(Extensions.OutputChannels);\n\t\tfor (const channelIdentifier of registry.getChannels()) {\n\t\t\tthis.onDidRegisterChannel(channelIdentifier.id);\n\t\t}\n\t\tthis._register(registry.onDidRegisterChannel(this.onDidRegisterChannel, this));\n\n\t\t// Set active channel to first channel if not set\n\t\tif (!this.activeChannel) {\n\t\t\tconst channels = this.getChannelDescriptors();\n\t\t\tthis.setActiveChannel(channels && channels.length > 0 ? this.getChannel(channels[0].id) : undefined);\n\t\t}\n\n\t\tthis._register(this.lifecycleService.onDidShutdown(() => this.dispose()));\n\t}\n\n\tprovideTextContent(resource: URI): Promise<ITextModel> | null {\n\t\tconst channel = <OutputChannel>this.getChannel(resource.path);\n\t\tif (channel) {\n\t\t\treturn channel.model.loadModel();\n\t\t}\n\t\treturn null;\n\t}\n\n\tasync showChannel(id: string, preserveFocus?: boolean): Promise<void> {\n\t\tconst channel = this.getChannel(id);\n\t\tif (this.activeChannel?.id !== channel?.id) {\n\t\t\tthis.setActiveChannel(channel);\n\t\t\tthis._onActiveOutputChannel.fire(id);\n\t\t}\n\t\tconst outputView = await this.viewsService.openView<OutputViewPane>(OUTPUT_VIEW_ID, !preserveFocus);\n\t\tif (outputView && channel) {\n\t\t\toutputView.showChannel(channel, !!preserveFocus);\n\t\t}\n\t}\n\n\tgetChannel(id: string): OutputChannel | undefined {\n\t\treturn this.channels.get(id);\n\t}\n\n\tgetChannelDescriptor(id: string): IOutputChannelDescriptor | undefined {\n\t\treturn Registry.as<IOutputChannelRegistry>(Extensions.OutputChannels).getChannel(id);\n\t}\n\n\tgetChannelDescriptors(): IOutputChannelDescriptor[] {\n\t\treturn Registry.as<IOutputChannelRegistry>(Extensions.OutputChannels).getChannels();\n\t}\n\n\tgetActiveChannel(): IOutputChannel | undefined {\n\t\treturn this.activeChannel;\n\t}\n\n\tprivate async onDidRegisterChannel(channelId: string): Promise<void> {\n\t\tconst channel = this.createChannel(channelId);\n\t\tthis.channels.set(channelId, channel);\n\t\tif (!this.activeChannel || this.activeChannelIdInStorage === channelId) {\n\t\t\tthis.setActiveChannel(channel);\n\t\t\tthis._onActiveOutputChannel.fire(channelId);\n\t\t\tconst outputView = this.viewsService.getActiveViewWithId<OutputViewPane>(OUTPUT_VIEW_ID);\n\t\t\tif (outputView) {\n\t\t\t\toutputView.showChannel(channel, true);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate createChannel(id: string): OutputChannel {\n\t\tconst channelDisposables: IDisposable[] = [];\n\t\tconst channel = this.instantiateChannel(id);\n\t\tchannel.model.onDispose(() => {\n\t\t\tif (this.activeChannel === channel) {\n\t\t\t\tconst channels = this.getChannelDescriptors();\n\t\t\t\tconst channel = channels.length ? this.getChannel(channels[0].id) : undefined;\n\t\t\t\tthis.setActiveChannel(channel);\n\t\t\t\tif (this.activeChannel) {\n\t\t\t\t\tthis._onActiveOutputChannel.fire(this.activeChannel.id);\n\t\t\t\t}\n\t\t\t}\n\t\t\tRegistry.as<IOutputChannelRegistry>(Extensions.OutputChannels).removeChannel(id);\n\t\t\tdispose(channelDisposables);\n\t\t}, channelDisposables);\n\n\t\treturn channel;\n\t}\n\n\tprivate instantiateChannel(id: string): OutputChannel {\n\t\tconst channelData = Registry.as<IOutputChannelRegistry>(Extensions.OutputChannels).getChannel(id);\n\t\tif (!channelData) {\n\t\t\tthis.logService.error(`Channel '${id}' is not registered yet`);\n\t\t\tthrow new Error(`Channel '${id}' is not registered yet`);\n\t\t}\n\t\treturn this.instantiationService.createInstance(OutputChannel, channelData);\n\t}\n\n\tprivate setActiveChannel(channel: OutputChannel | undefined): void {\n\t\tthis.activeChannel = channel;\n\n\t\tif (this.activeChannel) {\n\t\t\tthis.storageService.store(OUTPUT_ACTIVE_CHANNEL_KEY, this.activeChannel.id, StorageScope.WORKSPACE, StorageTarget.USER);\n\t\t} else {\n\t\t\tthis.storageService.remove(OUTPUT_ACTIVE_CHANNEL_KEY, StorageScope.WORKSPACE);\n\t\t}\n\t}\n}\n\nexport class LogContentProvider {\n\n\tprivate channelModels: Map<string, IOutputChannelModel> = new Map<string, IOutputChannelModel>();\n\n\tconstructor(\n\t\t@IOutputService private readonly outputService: IOutputService,\n\t\t@IOutputChannelModelService private readonly outputChannelModelService: IOutputChannelModelService\n\t) {\n\t}\n\n\tprovideTextContent(resource: URI): Promise<ITextModel> | null {\n\t\tif (resource.scheme === LOG_SCHEME) {\n\t\t\tlet channelModel = this.getChannelModel(resource);\n\t\t\tif (channelModel) {\n\t\t\t\treturn channelModel.loadModel();\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate getChannelModel(resource: URI): IOutputChannelModel | undefined {\n\t\tconst channelId = resource.path;\n\t\tlet channelModel = this.channelModels.get(channelId);\n\t\tif (!channelModel) {\n\t\t\tconst channelDisposables: IDisposable[] = [];\n\t\t\tconst outputChannelDescriptor = this.outputService.getChannelDescriptors().filter(({ id }) => id === channelId)[0];\n\t\t\tif (outputChannelDescriptor && outputChannelDescriptor.file) {\n\t\t\t\tchannelModel = this.outputChannelModelService.createOutputChannelModel(channelId, resource, outputChannelDescriptor.log ? LOG_MIME : OUTPUT_MIME, outputChannelDescriptor.file);\n\t\t\t\tchannelModel.onDispose(() => dispose(channelDisposables), channelDisposables);\n\t\t\t\tthis.channelModels.set(channelId, channelModel);\n\t\t\t}\n\t\t}\n\t\treturn channelModel;\n\t}\n}\n"]}