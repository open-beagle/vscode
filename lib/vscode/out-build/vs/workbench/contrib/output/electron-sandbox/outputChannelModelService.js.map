{"version":3,"file":"outputChannelModelService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/output/electron-sandbox/outputChannelModelService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { join } from 'vs/base/common/path';\nimport * as resources from 'vs/base/common/resources';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { URI } from 'vs/base/common/uri';\nimport { ThrottledDelayer } from 'vs/base/common/async';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { ILogger, ILoggerService, ILogService } from 'vs/platform/log/common/log';\nimport { IOutputChannelModel, AbstractFileOutputChannelModel, IOutputChannelModelService, AbstractOutputChannelModelService, BufferredOutputChannel } from 'vs/workbench/contrib/output/common/outputChannelModel';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { toLocalISOString } from 'vs/base/common/date';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { INativeHostService } from 'vs/platform/native/electron-sandbox/native';\nimport { VSBuffer } from 'vs/base/common/buffer';\n\nclass OutputChannelBackedByFile extends AbstractFileOutputChannelModel implements IOutputChannelModel {\n\n\tprivate logger: ILogger;\n\tprivate appendedMessage: string;\n\tprivate loadingFromFileInProgress: boolean;\n\tprivate resettingDelayer: ThrottledDelayer<void>;\n\tprivate readonly rotatingFilePath: URI;\n\n\tconstructor(\n\t\tid: string,\n\t\tmodelUri: URI,\n\t\tmimeType: string,\n\t\tfile: URI,\n\t\t@IFileService fileService: IFileService,\n\t\t@IModelService modelService: IModelService,\n\t\t@IModeService modeService: IModeService,\n\t\t@ILoggerService loggerService: ILoggerService\n\t) {\n\t\tsuper(modelUri, mimeType, file, fileService, modelService, modeService);\n\t\tthis.appendedMessage = '';\n\t\tthis.loadingFromFileInProgress = false;\n\n\t\t// Donot rotate to check for the file reset\n\t\tthis.logger = loggerService.createLogger(this.file, { always: true, donotRotate: true, donotUseFormatters: true });\n\n\t\tconst rotatingFilePathDirectory = resources.dirname(this.file);\n\t\tthis.rotatingFilePath = resources.joinPath(rotatingFilePathDirectory, `${id}.1.log`);\n\n\t\tthis._register(fileService.watch(rotatingFilePathDirectory));\n\t\tthis._register(fileService.onDidFilesChange(e => {\n\t\t\tif (e.contains(this.rotatingFilePath)) {\n\t\t\t\tthis.resettingDelayer.trigger(() => this.resetModel());\n\t\t\t}\n\t\t}));\n\n\t\tthis.resettingDelayer = new ThrottledDelayer<void>(50);\n\t}\n\n\tappend(message: string): void {\n\t\t// update end offset always as message is read\n\t\tthis.endOffset = this.endOffset + VSBuffer.fromString(message).byteLength;\n\t\tif (this.loadingFromFileInProgress) {\n\t\t\tthis.appendedMessage += message;\n\t\t} else {\n\t\t\tthis.write(message);\n\t\t\tif (this.model) {\n\t\t\t\tthis.appendedMessage += message;\n\t\t\t\tif (!this.modelUpdater.isScheduled()) {\n\t\t\t\t\tthis.modelUpdater.schedule();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\toverride clear(till?: number): void {\n\t\tsuper.clear(till);\n\t\tthis.appendedMessage = '';\n\t}\n\n\tloadModel(): Promise<ITextModel> {\n\t\tthis.loadingFromFileInProgress = true;\n\t\tif (this.modelUpdater.isScheduled()) {\n\t\t\tthis.modelUpdater.cancel();\n\t\t}\n\t\tthis.appendedMessage = '';\n\t\treturn this.loadFile()\n\t\t\t.then(content => {\n\t\t\t\tif (this.endOffset !== this.startOffset + VSBuffer.fromString(content).byteLength) {\n\t\t\t\t\t// Queue content is not written into the file\n\t\t\t\t\t// Flush it and load file again\n\t\t\t\t\tthis.flush();\n\t\t\t\t\treturn this.loadFile();\n\t\t\t\t}\n\t\t\t\treturn content;\n\t\t\t})\n\t\t\t.then(content => {\n\t\t\t\tif (this.appendedMessage) {\n\t\t\t\t\tthis.write(this.appendedMessage);\n\t\t\t\t\tthis.appendedMessage = '';\n\t\t\t\t}\n\t\t\t\tthis.loadingFromFileInProgress = false;\n\t\t\t\treturn this.createModel(content);\n\t\t\t});\n\t}\n\n\tprivate resetModel(): Promise<void> {\n\t\tthis.startOffset = 0;\n\t\tthis.endOffset = 0;\n\t\tif (this.model) {\n\t\t\treturn this.loadModel().then(() => undefined);\n\t\t}\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tprivate loadFile(): Promise<string> {\n\t\treturn this.fileService.readFile(this.file, { position: this.startOffset })\n\t\t\t.then(content => this.appendedMessage ? content.value + this.appendedMessage : content.value.toString());\n\t}\n\n\tprotected override updateModel(): void {\n\t\tif (this.model && this.appendedMessage) {\n\t\t\tthis.appendToModel(this.appendedMessage);\n\t\t\tthis.appendedMessage = '';\n\t\t}\n\t}\n\n\tprivate write(content: string): void {\n\t\tthis.logger.info(content);\n\t}\n\n\tprivate flush(): void {\n\t\tthis.logger.flush();\n\t}\n}\n\nclass DelegatedOutputChannelModel extends Disposable implements IOutputChannelModel {\n\n\tprivate readonly _onDidAppendedContent: Emitter<void> = this._register(new Emitter<void>());\n\treadonly onDidAppendedContent: Event<void> = this._onDidAppendedContent.event;\n\n\tprivate readonly _onDispose: Emitter<void> = this._register(new Emitter<void>());\n\treadonly onDispose: Event<void> = this._onDispose.event;\n\n\tprivate readonly outputChannelModel: Promise<IOutputChannelModel>;\n\n\tconstructor(\n\t\tid: string,\n\t\tmodelUri: URI,\n\t\tmimeType: string,\n\t\toutputDir: Promise<URI>,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t) {\n\t\tsuper();\n\t\tthis.outputChannelModel = this.createOutputChannelModel(id, modelUri, mimeType, outputDir);\n\t}\n\n\tprivate async createOutputChannelModel(id: string, modelUri: URI, mimeType: string, outputDirPromise: Promise<URI>): Promise<IOutputChannelModel> {\n\t\tlet outputChannelModel: IOutputChannelModel;\n\t\ttry {\n\t\t\tconst outputDir = await outputDirPromise;\n\t\t\tconst file = resources.joinPath(outputDir, `${id}.log`);\n\t\t\t// Make sure file exists before creating the channel\n\t\t\tawait this.fileService.createFile(file);\n\t\t\toutputChannelModel = this.instantiationService.createInstance(OutputChannelBackedByFile, id, modelUri, mimeType, file);\n\t\t} catch (e) {\n\t\t\t// Do not crash if spdlog rotating logger cannot be loaded (workaround for https://github.com/microsoft/vscode/issues/47883)\n\t\t\tthis.logService.error(e);\n\t\t\tthis.telemetryService.publicLog2('output.channel.creation.error');\n\t\t\toutputChannelModel = this.instantiationService.createInstance(BufferredOutputChannel, modelUri, mimeType);\n\t\t}\n\t\tthis._register(outputChannelModel);\n\t\tthis._register(outputChannelModel.onDidAppendedContent(() => this._onDidAppendedContent.fire()));\n\t\tthis._register(outputChannelModel.onDispose(() => this._onDispose.fire()));\n\t\treturn outputChannelModel;\n\t}\n\n\tappend(output: string): void {\n\t\tthis.outputChannelModel.then(outputChannelModel => outputChannelModel.append(output));\n\t}\n\n\tupdate(): void {\n\t\tthis.outputChannelModel.then(outputChannelModel => outputChannelModel.update());\n\t}\n\n\tloadModel(): Promise<ITextModel> {\n\t\treturn this.outputChannelModel.then(outputChannelModel => outputChannelModel.loadModel());\n\t}\n\n\tclear(till?: number): void {\n\t\tthis.outputChannelModel.then(outputChannelModel => outputChannelModel.clear(till));\n\t}\n\n}\n\nexport class OutputChannelModelService extends AbstractOutputChannelModelService implements IOutputChannelModelService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@INativeHostService private readonly nativeHostService: INativeHostService\n\t) {\n\t\tsuper(instantiationService);\n\t}\n\n\toverride createOutputChannelModel(id: string, modelUri: URI, mimeType: string, file?: URI): IOutputChannelModel {\n\t\treturn file ? super.createOutputChannelModel(id, modelUri, mimeType, file) :\n\t\t\tthis.instantiationService.createInstance(DelegatedOutputChannelModel, id, modelUri, mimeType, this.outputDir);\n\t}\n\n\tprivate _outputDir: Promise<URI> | null = null;\n\tprivate get outputDir(): Promise<URI> {\n\t\tif (!this._outputDir) {\n\t\t\tconst outputDir = URI.file(join(this.environmentService.logsPath, `output_${this.nativeHostService.windowId}_${toLocalISOString(new Date()).replace(/-|:|\\.\\d+Z$/g, '')}`));\n\t\t\tthis._outputDir = this.fileService.createFolder(outputDir).then(() => outputDir);\n\t\t}\n\t\treturn this._outputDir;\n\t}\n\n}\n\nregisterSingleton(IOutputChannelModelService, OutputChannelModelService);\n"]}