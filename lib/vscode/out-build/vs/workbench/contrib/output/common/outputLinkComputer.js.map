{"version":3,"file":"outputLinkComputer.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/output/common/outputLinkComputer.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IMirrorModel, IWorkerContext } from 'vs/editor/common/services/editorSimpleWorker';\nimport { ILink } from 'vs/editor/common/modes';\nimport { URI } from 'vs/base/common/uri';\nimport * as extpath from 'vs/base/common/extpath';\nimport * as resources from 'vs/base/common/resources';\nimport * as strings from 'vs/base/common/strings';\nimport { Range } from 'vs/editor/common/core/range';\nimport { isWindows } from 'vs/base/common/platform';\nimport { Schemas } from 'vs/base/common/network';\n\nexport interface ICreateData {\n\tworkspaceFolders: string[];\n}\n\nexport interface IResourceCreator {\n\ttoResource: (folderRelativePath: string) => URI | null;\n}\n\nexport class OutputLinkComputer {\n\tprivate patterns = new Map<URI /* folder uri */, RegExp[]>();\n\n\tconstructor(private ctx: IWorkerContext, createData: ICreateData) {\n\t\tthis.computePatterns(createData);\n\t}\n\n\tprivate computePatterns(createData: ICreateData): void {\n\n\t\t// Produce patterns for each workspace root we are configured with\n\t\t// This means that we will be able to detect links for paths that\n\t\t// contain any of the workspace roots as segments.\n\t\tconst workspaceFolders = createData.workspaceFolders\n\t\t\t.sort((resourceStrA, resourceStrB) => resourceStrB.length - resourceStrA.length) // longest paths first (for https://github.com/microsoft/vscode/issues/88121)\n\t\t\t.map(resourceStr => URI.parse(resourceStr));\n\n\t\tfor (const workspaceFolder of workspaceFolders) {\n\t\t\tconst patterns = OutputLinkComputer.createPatterns(workspaceFolder);\n\t\t\tthis.patterns.set(workspaceFolder, patterns);\n\t\t}\n\t}\n\n\tprivate getModel(uri: string): IMirrorModel | undefined {\n\t\tconst models = this.ctx.getMirrorModels();\n\n\t\treturn models.find(model => model.uri.toString() === uri);\n\t}\n\n\tcomputeLinks(uri: string): ILink[] {\n\t\tconst model = this.getModel(uri);\n\t\tif (!model) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst links: ILink[] = [];\n\t\tconst lines = strings.splitLines(model.getValue());\n\n\t\t// For each workspace root patterns\n\t\tfor (const [folderUri, folderPatterns] of this.patterns) {\n\t\t\tconst resourceCreator: IResourceCreator = {\n\t\t\t\ttoResource: (folderRelativePath: string): URI | null => {\n\t\t\t\t\tif (typeof folderRelativePath === 'string') {\n\t\t\t\t\t\treturn resources.joinPath(folderUri, folderRelativePath);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tfor (let i = 0, len = lines.length; i < len; i++) {\n\t\t\t\tlinks.push(...OutputLinkComputer.detectLinks(lines[i], i + 1, folderPatterns, resourceCreator));\n\t\t\t}\n\t\t}\n\n\t\treturn links;\n\t}\n\n\tstatic createPatterns(workspaceFolder: URI): RegExp[] {\n\t\tconst patterns: RegExp[] = [];\n\n\t\tconst workspaceFolderPath = workspaceFolder.scheme === Schemas.file ? workspaceFolder.fsPath : workspaceFolder.path;\n\t\tconst workspaceFolderVariants = [workspaceFolderPath];\n\t\tif (isWindows && workspaceFolder.scheme === Schemas.file) {\n\t\t\tworkspaceFolderVariants.push(extpath.toSlashes(workspaceFolderPath));\n\t\t}\n\n\t\tfor (const workspaceFolderVariant of workspaceFolderVariants) {\n\t\t\tconst validPathCharacterPattern = '[^\\\\s\\\\(\\\\):<>\"]';\n\t\t\tconst validPathCharacterOrSpacePattern = `(?:${validPathCharacterPattern}| ${validPathCharacterPattern})`;\n\t\t\tconst pathPattern = `${validPathCharacterOrSpacePattern}+\\\\.${validPathCharacterPattern}+`;\n\t\t\tconst strictPathPattern = `${validPathCharacterPattern}+`;\n\n\t\t\t// Example: /workspaces/express/server.js on line 8, column 13\n\t\t\tpatterns.push(new RegExp(strings.escapeRegExpCharacters(workspaceFolderVariant) + `(${pathPattern}) on line ((\\\\d+)(, column (\\\\d+))?)`, 'gi'));\n\n\t\t\t// Example: /workspaces/express/server.js:line 8, column 13\n\t\t\tpatterns.push(new RegExp(strings.escapeRegExpCharacters(workspaceFolderVariant) + `(${pathPattern}):line ((\\\\d+)(, column (\\\\d+))?)`, 'gi'));\n\n\t\t\t// Example: /workspaces/mankala/Features.ts(45): error\n\t\t\t// Example: /workspaces/mankala/Features.ts (45): error\n\t\t\t// Example: /workspaces/mankala/Features.ts(45,18): error\n\t\t\t// Example: /workspaces/mankala/Features.ts (45,18): error\n\t\t\t// Example: /workspaces/mankala/Features Special.ts (45,18): error\n\t\t\tpatterns.push(new RegExp(strings.escapeRegExpCharacters(workspaceFolderVariant) + `(${pathPattern})(\\\\s?\\\\((\\\\d+)(,(\\\\d+))?)\\\\)`, 'gi'));\n\n\t\t\t// Example: at /workspaces/mankala/Game.ts\n\t\t\t// Example: at /workspaces/mankala/Game.ts:336\n\t\t\t// Example: at /workspaces/mankala/Game.ts:336:9\n\t\t\tpatterns.push(new RegExp(strings.escapeRegExpCharacters(workspaceFolderVariant) + `(${strictPathPattern})(:(\\\\d+))?(:(\\\\d+))?`, 'gi'));\n\t\t}\n\n\t\treturn patterns;\n\t}\n\n\t/**\n\t * Detect links. Made static to allow for tests.\n\t */\n\tstatic detectLinks(line: string, lineIndex: number, patterns: RegExp[], resourceCreator: IResourceCreator): ILink[] {\n\t\tconst links: ILink[] = [];\n\n\t\tpatterns.forEach(pattern => {\n\t\t\tpattern.lastIndex = 0; // the holy grail of software development\n\n\t\t\tlet match: RegExpExecArray | null;\n\t\t\tlet offset = 0;\n\t\t\twhile ((match = pattern.exec(line)) !== null) {\n\n\t\t\t\t// Convert the relative path information to a resource that we can use in links\n\t\t\t\tconst folderRelativePath = strings.rtrim(match[1], '.').replace(/\\\\/g, '/'); // remove trailing \".\" that likely indicate end of sentence\n\t\t\t\tlet resourceString: string | undefined;\n\t\t\t\ttry {\n\t\t\t\t\tconst resource = resourceCreator.toResource(folderRelativePath);\n\t\t\t\t\tif (resource) {\n\t\t\t\t\t\tresourceString = resource.toString();\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tcontinue; // we might find an invalid URI and then we dont want to loose all other links\n\t\t\t\t}\n\n\t\t\t\t// Append line/col information to URI if matching\n\t\t\t\tif (match[3]) {\n\t\t\t\t\tconst lineNumber = match[3];\n\n\t\t\t\t\tif (match[5]) {\n\t\t\t\t\t\tconst columnNumber = match[5];\n\t\t\t\t\t\tresourceString = strings.format('{0}#{1},{2}', resourceString, lineNumber, columnNumber);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresourceString = strings.format('{0}#{1}', resourceString, lineNumber);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst fullMatch = strings.rtrim(match[0], '.'); // remove trailing \".\" that likely indicate end of sentence\n\n\t\t\t\tconst index = line.indexOf(fullMatch, offset);\n\t\t\t\toffset = index + fullMatch.length;\n\n\t\t\t\tconst linkRange = {\n\t\t\t\t\tstartColumn: index + 1,\n\t\t\t\t\tstartLineNumber: lineIndex,\n\t\t\t\t\tendColumn: index + 1 + fullMatch.length,\n\t\t\t\t\tendLineNumber: lineIndex\n\t\t\t\t};\n\n\t\t\t\tif (links.some(link => Range.areIntersectingOrTouching(link.range, linkRange))) {\n\t\t\t\t\treturn; // Do not detect duplicate links\n\t\t\t\t}\n\n\t\t\t\tlinks.push({\n\t\t\t\t\trange: linkRange,\n\t\t\t\t\turl: resourceString\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn links;\n\t}\n}\n\nexport function create(ctx: IWorkerContext, createData: ICreateData): OutputLinkComputer {\n\treturn new OutputLinkComputer(ctx, createData);\n}\n"]}