{"version":3,"file":"output.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/contrib/output/common/output.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAQhG;;OAEG;IACU,QAAA,WAAW,GAAG,oBAAoB,CAAC;IAEhD;;OAEG;IACU,QAAA,aAAa,GAAG,QAAQ,CAAC;IAEtC;;OAEG;IACU,QAAA,cAAc,GAAG,KAAK,CAAC;IAEpC;;OAEG;IACU,QAAA,QAAQ,GAAG,wBAAwB,CAAC;IAEjD;;OAEG;IACU,QAAA,UAAU,GAAG,KAAK,CAAC;IAEhC;;OAEG;IACU,QAAA,WAAW,GAAG,KAAK,CAAC;IAEjC;;OAEG;IACU,QAAA,cAAc,GAAG,wBAAwB,CAAC;IAE1C,QAAA,iBAAiB,GAAG,eAAe,CAAC;IAEpC,QAAA,iBAAiB,GAAG,KAAK,CAAC,mDAAmD,GAAG,GAAG,CAAC,gCAAgC,CAAC;IAErH,QAAA,iBAAiB,GAAG,IAAI,0BAAa,CAAU,UAAU,EAAE,KAAK,CAAC,CAAC;IAElE,QAAA,yBAAyB,GAAG,IAAI,0BAAa,CAAU,iBAAiB,EAAE,KAAK,CAAC,CAAC;IAEjF,QAAA,0BAA0B,GAAG,IAAI,0BAAa,CAAU,uBAAuB,EAAE,KAAK,CAAC,CAAC;IAExF,QAAA,cAAc,GAAG,CAAA,GAAA,+BAAe,CAAA,CAAiB,yBAAiB,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { RawContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { IOutputChannelDescriptor } from 'vs/workbench/services/output/common/output';\nimport { URI } from 'vs/base/common/uri';\n\n/**\n * Mime type used by the output editor.\n */\nexport const OUTPUT_MIME = 'text/x-code-output';\n\n/**\n * Output resource scheme.\n */\nexport const OUTPUT_SCHEME = 'output';\n\n/**\n * Id used by the output editor.\n */\nexport const OUTPUT_MODE_ID = 'Log';\n\n/**\n * Mime type used by the log output editor.\n */\nexport const LOG_MIME = 'text/x-code-log-output';\n\n/**\n * Log resource scheme.\n */\nexport const LOG_SCHEME = 'log';\n\n/**\n * Id used by the log output editor.\n */\nexport const LOG_MODE_ID = 'log';\n\n/**\n * Output view id\n */\nexport const OUTPUT_VIEW_ID = 'workbench.panel.output';\n\nexport const OUTPUT_SERVICE_ID = 'outputService';\n\nexport const MAX_OUTPUT_LENGTH = 10000 /* Max. number of output lines to show in output */ * 100 /* Guestimated chars per line */;\n\nexport const CONTEXT_IN_OUTPUT = new RawContextKey<boolean>('inOutput', false);\n\nexport const CONTEXT_ACTIVE_LOG_OUTPUT = new RawContextKey<boolean>('activeLogOutput', false);\n\nexport const CONTEXT_OUTPUT_SCROLL_LOCK = new RawContextKey<boolean>(`outputView.scrollLock`, false);\n\nexport const IOutputService = createDecorator<IOutputService>(OUTPUT_SERVICE_ID);\n\n/**\n * The output service to manage output from the various processes running.\n */\nexport interface IOutputService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Given the channel id returns the output channel instance.\n\t * Channel should be first registered via OutputChannelRegistry.\n\t */\n\tgetChannel(id: string): IOutputChannel | undefined;\n\n\t/**\n\t * Given the channel id returns the registered output channel descriptor.\n\t */\n\tgetChannelDescriptor(id: string): IOutputChannelDescriptor | undefined;\n\n\t/**\n\t * Returns an array of all known output channels descriptors.\n\t */\n\tgetChannelDescriptors(): IOutputChannelDescriptor[];\n\n\t/**\n\t * Returns the currently active channel.\n\t * Only one channel can be active at a given moment.\n\t */\n\tgetActiveChannel(): IOutputChannel | undefined;\n\n\t/**\n\t * Show the channel with the passed id.\n\t */\n\tshowChannel(id: string, preserveFocus?: boolean): Promise<void>;\n\n\t/**\n\t * Allows to register on active output channel change.\n\t */\n\tonActiveOutputChannel: Event<string>;\n}\n\nexport interface IOutputChannel {\n\n\t/**\n\t * Identifier of the output channel.\n\t */\n\tid: string;\n\n\t/**\n\t * Label of the output channel to be displayed to the user.\n\t */\n\tlabel: string;\n\n\t/**\n\t * URI of the output channel.\n\t */\n\turi: URI;\n\n\t/**\n\t * Appends output to the channel.\n\t */\n\tappend(output: string): void;\n\n\t/**\n\t * Update the channel.\n\t */\n\tupdate(): void;\n\n\t/**\n\t * Clears all received output for this channel.\n\t */\n\tclear(till?: number): void;\n\n\t/**\n\t * Disposes the output channel.\n\t */\n\tdispose(): void;\n}\n"]}