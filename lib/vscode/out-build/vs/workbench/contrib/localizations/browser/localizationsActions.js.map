{"version":3,"sources":["vs/workbench/contrib/localizations/browser/localizationsActions.ts"],"names":[],"mappings":"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","file":"localizationsActions.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { Action } from 'vs/base/common/actions';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { ILocalizationsService } from 'vs/platform/localizations/common/localizations';\nimport { IQuickInputService, IQuickPickItem } from 'vs/platform/quickinput/common/quickInput';\nimport { IJSONEditingService } from 'vs/workbench/services/configuration/common/jsonEditing';\nimport { IHostService } from 'vs/workbench/services/host/browser/host';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { language } from 'vs/base/common/platform';\nimport { IExtensionsViewPaneContainer, VIEWLET_ID as EXTENSIONS_VIEWLET_ID } from 'vs/workbench/contrib/extensions/common/extensions';\nimport { IViewletService } from 'vs/workbench/services/viewlet/browser/viewlet';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { IProductService } from 'vs/platform/product/common/productService';\n\nexport class ConfigureLocaleAction extends Action {\n\tpublic static readonly ID = 'workbench.action.configureLocale';\n\tpublic static readonly LABEL = localize('configureLocale', \"Configure Display Language\");\n\n\tconstructor(id: string, label: string,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@ILocalizationsService private readonly localizationService: ILocalizationsService,\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@IJSONEditingService private readonly jsonEditingService: IJSONEditingService,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IViewletService private readonly viewletService: IViewletService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IProductService private readonly productService: IProductService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tprivate async getLanguageOptions(): Promise<IQuickPickItem[]> {\n\t\tconst availableLanguages = await this.localizationService.getLanguageIds();\n\t\tavailableLanguages.sort();\n\n\t\treturn availableLanguages\n\t\t\t.map(language => { return { label: language }; })\n\t\t\t.concat({ label: localize('installAdditionalLanguages', \"Install additional languages...\") });\n\t}\n\n\tpublic override async run(): Promise<void> {\n\t\tconst languageOptions = await this.getLanguageOptions();\n\t\tconst currentLanguageIndex = languageOptions.findIndex(l => l.label === language);\n\n\t\ttry {\n\t\t\tconst selectedLanguage = await this.quickInputService.pick(languageOptions,\n\t\t\t\t{\n\t\t\t\t\tcanPickMany: false,\n\t\t\t\t\tplaceHolder: localize('chooseDisplayLanguage', \"Select Display Language\"),\n\t\t\t\t\tactiveItem: languageOptions[currentLanguageIndex]\n\t\t\t\t});\n\n\t\t\tif (selectedLanguage === languageOptions[languageOptions.length - 1]) {\n\t\t\t\treturn this.viewletService.openViewlet(EXTENSIONS_VIEWLET_ID, true)\n\t\t\t\t\t.then(viewlet => viewlet?.getViewPaneContainer())\n\t\t\t\t\t.then(viewlet => {\n\t\t\t\t\t\tconst extensionsViewlet = viewlet as IExtensionsViewPaneContainer;\n\t\t\t\t\t\textensionsViewlet.search('@category:\"language packs\"');\n\t\t\t\t\t\textensionsViewlet.focus();\n\t\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (selectedLanguage) {\n\t\t\t\tawait this.jsonEditingService.write(this.environmentService.argvResource, [{ path: ['locale'], value: selectedLanguage.label }], true);\n\t\t\t\tconst restart = await this.dialogService.confirm({\n\t\t\t\t\ttype: 'info',\n\t\t\t\t\tmessage: localize('relaunchDisplayLanguageMessage', \"A restart is required for the change in display language to take effect.\"),\n\t\t\t\t\tdetail: localize('relaunchDisplayLanguageDetail', \"Press the restart button to restart {0} and change the display language.\", this.productService.nameLong),\n\t\t\t\t\tprimaryButton: localize('restart', \"&&Restart\")\n\t\t\t\t});\n\n\t\t\t\tif (restart.confirmed) {\n\t\t\t\t\tthis.hostService.restart();\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthis.notificationService.error(e);\n\t\t}\n\t}\n}\n"]}