{"version":3,"file":"colorRegistry.releaseTest.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/test/electron-browser/colorRegistry.releaseTest.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IColorRegistry, Extensions, ColorContribution } from 'vs/platform/theme/common/colorRegistry';\nimport { asText } from 'vs/platform/request/common/request';\nimport * as fs from 'fs';\nimport * as pfs from 'vs/base/node/pfs';\nimport * as path from 'vs/base/common/path';\nimport * as assert from 'assert';\nimport { getPathFromAmdModule } from 'vs/base/test/node/testUtils';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { RequestService } from 'vs/platform/request/node/requestService';\nimport { TestConfigurationService } from 'vs/platform/configuration/test/common/testConfigurationService';\nimport 'vs/workbench/workbench.desktop.main';\nimport { NullLogService } from 'vs/platform/log/common/log';\nimport { TestEnvironmentService } from 'vs/workbench/test/electron-browser/workbenchTestServices';\n\ninterface ColorInfo {\n\tdescription: string;\n\toffset: number;\n\tlength: number;\n}\n\ninterface DescriptionDiff {\n\tdocDescription: string;\n\tspecDescription: string;\n}\n\nexport const experimental: string[] = []; // 'settings.modifiedItemForeground', 'editorUnnecessary.foreground' ];\n\nsuite('Color Registry', function () {\n\n\ttest('all colors documented in theme-color.md', async function () {\n\t\tconst reqContext = await new RequestService(new TestConfigurationService(), TestEnvironmentService, new NullLogService()).request({ url: 'https://raw.githubusercontent.com/microsoft/vscode-docs/vnext/api/references/theme-color.md' }, CancellationToken.None);\n\t\tconst content = (await asText(reqContext))!;\n\n\t\tconst expression = /\\-\\s*\\`([\\w\\.]+)\\`: (.*)/g;\n\n\t\tlet m: RegExpExecArray | null;\n\t\tlet colorsInDoc: { [id: string]: ColorInfo } = Object.create(null);\n\t\tlet nColorsInDoc = 0;\n\t\twhile (m = expression.exec(content)) {\n\t\t\tcolorsInDoc[m[1]] = { description: m[2], offset: m.index, length: m.length };\n\t\t\tnColorsInDoc++;\n\t\t}\n\t\tassert.ok(nColorsInDoc > 0, 'theme-color.md contains to color descriptions');\n\n\t\tlet missing = Object.create(null);\n\t\tlet descriptionDiffs: { [id: string]: DescriptionDiff } = Object.create(null);\n\n\t\tlet themingRegistry = Registry.as<IColorRegistry>(Extensions.ColorContribution);\n\t\tfor (let color of themingRegistry.getColors()) {\n\t\t\tif (!colorsInDoc[color.id]) {\n\t\t\t\tif (!color.deprecationMessage) {\n\t\t\t\t\tmissing[color.id] = getDescription(color);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlet docDescription = colorsInDoc[color.id].description;\n\t\t\t\tlet specDescription = getDescription(color);\n\t\t\t\tif (docDescription !== specDescription) {\n\t\t\t\t\tdescriptionDiffs[color.id] = { docDescription, specDescription };\n\t\t\t\t}\n\t\t\t\tdelete colorsInDoc[color.id];\n\t\t\t}\n\t\t}\n\t\tlet colorsInExtensions = await getColorsFromExtension();\n\t\tfor (let colorId in colorsInExtensions) {\n\t\t\tif (!colorsInDoc[colorId]) {\n\t\t\t\tmissing[colorId] = colorsInExtensions[colorId];\n\t\t\t} else {\n\t\t\t\tdelete colorsInDoc[colorId];\n\t\t\t}\n\t\t}\n\t\tfor (let colorId of experimental) {\n\t\t\tif (missing[colorId]) {\n\t\t\t\tdelete missing[colorId];\n\t\t\t}\n\t\t\tif (colorsInDoc[colorId]) {\n\t\t\t\tassert.fail(`Color ${colorId} found in doc but marked experimental. Please remove from experimental list.`);\n\t\t\t}\n\t\t}\n\n\t\tlet undocumentedKeys = Object.keys(missing).map(k => `\\`${k}\\`: ${missing[k]}`);\n\t\tassert.deepStrictEqual(undocumentedKeys, [], 'Undocumented colors ids');\n\n\t\tlet superfluousKeys = Object.keys(colorsInDoc);\n\t\tassert.deepStrictEqual(superfluousKeys, [], 'Colors ids in doc that do not exist');\n\n\t});\n});\n\nfunction getDescription(color: ColorContribution) {\n\tlet specDescription = color.description;\n\tif (color.deprecationMessage) {\n\t\tspecDescription = specDescription + ' ' + color.deprecationMessage;\n\t}\n\treturn specDescription;\n}\n\nasync function getColorsFromExtension(): Promise<{ [id: string]: string }> {\n\tlet extPath = getPathFromAmdModule(require, '../../../../../extensions');\n\tlet extFolders = await pfs.readDirsInDir(extPath);\n\tlet result: { [id: string]: string } = Object.create(null);\n\tfor (let folder of extFolders) {\n\t\ttry {\n\t\t\tlet packageJSON = JSON.parse((await fs.promises.readFile(path.join(extPath, folder, 'package.json'))).toString());\n\t\t\tlet contributes = packageJSON['contributes'];\n\t\t\tif (contributes) {\n\t\t\t\tlet colors = contributes['colors'];\n\t\t\t\tif (colors) {\n\t\t\t\t\tfor (let color of colors) {\n\t\t\t\t\t\tlet colorId = color['id'];\n\t\t\t\t\t\tif (colorId) {\n\t\t\t\t\t\t\tresult[colorId] = colorId['description'];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t// ignore\n\t\t}\n\n\t}\n\treturn result;\n}\n"]}