{"version":3,"file":"workbenchTestServices.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/test/electron-browser/workbenchTestServices.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { workbenchInstantiationService as browserWorkbenchInstantiationService, ITestInstantiationService, TestLifecycleService, TestFilesConfigurationService, TestFileService, TestFileDialogService, TestPathService, TestEncodingOracle, TestProductService } from 'vs/workbench/test/browser/workbenchTestServices';\nimport { Event } from 'vs/base/common/event';\nimport { ISharedProcessService } from 'vs/platform/ipc/electron-sandbox/services';\nimport { NativeTextFileService, } from 'vs/workbench/services/textfile/electron-sandbox/nativeTextFileService';\nimport { INativeHostService } from 'vs/platform/native/electron-sandbox/native';\nimport { FileOperationError, IFileService } from 'vs/platform/files/common/files';\nimport { IUntitledTextEditorService } from 'vs/workbench/services/untitled/common/untitledTextEditorService';\nimport { ILifecycleService } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { INativeWorkbenchConfiguration, INativeWorkbenchEnvironmentService, NativeWorkbenchEnvironmentService } from 'vs/workbench/services/environment/electron-sandbox/environmentService';\nimport { IDialogService, IFileDialogService, INativeOpenDialogOptions } from 'vs/platform/dialogs/common/dialogs';\nimport { ITextResourceConfigurationService } from 'vs/editor/common/services/textResourceConfigurationService';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IFilesConfigurationService } from 'vs/workbench/services/filesConfiguration/common/filesConfigurationService';\nimport { ITextModelService } from 'vs/editor/common/services/resolverService';\nimport { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';\nimport { URI } from 'vs/base/common/uri';\nimport { IReadTextFileOptions, ITextFileStreamContent, ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';\nimport { createTextBufferFactoryFromStream } from 'vs/editor/common/model/textModel';\nimport { IOpenEmptyWindowOptions, IWindowOpenable, IOpenWindowOptions, IOpenedWindow } from 'vs/platform/windows/common/windows';\nimport { parseArgs, OPTIONS } from 'vs/platform/environment/node/argv';\nimport { LogLevel, ILogService } from 'vs/platform/log/common/log';\nimport { IPathService } from 'vs/workbench/services/path/common/pathService';\nimport { IWorkingCopyFileService } from 'vs/workbench/services/workingCopy/common/workingCopyFileService';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { ModelServiceImpl } from 'vs/editor/common/services/modelServiceImpl';\nimport { IWorkingCopyBackupService } from 'vs/workbench/services/workingCopy/common/workingCopyBackup';\nimport { NodeTestWorkingCopyBackupService } from 'vs/workbench/services/workingCopy/test/electron-browser/workingCopyBackupService.test';\nimport { IWorkingCopyService } from 'vs/workbench/services/workingCopy/common/workingCopyService';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { TestContextService } from 'vs/workbench/test/common/workbenchTestServices';\nimport { IUriIdentityService } from 'vs/workbench/services/uriIdentity/common/uriIdentity';\nimport { MouseInputEvent } from 'vs/base/parts/sandbox/common/electronTypes';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { IOSProperties, IOSStatistics } from 'vs/platform/native/common/native';\nimport { homedir, release, tmpdir, hostname } from 'os';\nimport { IEnvironmentService, INativeEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { getUserDataPath } from 'vs/platform/environment/node/userDataPath';\nimport product from 'vs/platform/product/common/product';\nimport { IElevatedFileService } from 'vs/workbench/services/files/common/elevatedFileService';\n\nconst args = parseArgs(process.argv, OPTIONS);\n\nexport const TestWorkbenchConfiguration: INativeWorkbenchConfiguration = {\n\twindowId: 0,\n\tmachineId: 'testMachineId',\n\tlogLevel: LogLevel.Error,\n\tmainPid: 0,\n\tpartsSplashPath: '',\n\tappRoot: '',\n\tuserEnv: {},\n\texecPath: process.execPath,\n\tperfMarks: [],\n\tcolorScheme: { dark: true, highContrast: false },\n\tos: { release: release(), hostname: hostname() },\n\tproduct,\n\thomeDir: homedir(),\n\ttmpDir: tmpdir(),\n\tuserDataDir: getUserDataPath(args),\n\t...args\n};\n\nexport const TestEnvironmentService = new NativeWorkbenchEnvironmentService(TestWorkbenchConfiguration, TestProductService);\n\nexport class TestTextFileService extends NativeTextFileService {\n\tprivate resolveTextContentError!: FileOperationError | null;\n\n\tconstructor(\n\t\t@IFileService fileService: IFileService,\n\t\t@IUntitledTextEditorService untitledTextEditorService: IUntitledTextEditorService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IModelService modelService: IModelService,\n\t\t@INativeWorkbenchEnvironmentService environmentService: INativeWorkbenchEnvironmentService,\n\t\t@IDialogService dialogService: IDialogService,\n\t\t@IFileDialogService fileDialogService: IFileDialogService,\n\t\t@ITextResourceConfigurationService textResourceConfigurationService: ITextResourceConfigurationService,\n\t\t@IProductService productService: IProductService,\n\t\t@IFilesConfigurationService filesConfigurationService: IFilesConfigurationService,\n\t\t@ITextModelService textModelService: ITextModelService,\n\t\t@ICodeEditorService codeEditorService: ICodeEditorService,\n\t\t@IPathService pathService: IPathService,\n\t\t@IWorkingCopyFileService workingCopyFileService: IWorkingCopyFileService,\n\t\t@ILogService logService: ILogService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t\t@IModeService modeService: IModeService,\n\t\t@IElevatedFileService elevatedFileService: IElevatedFileService\n\t) {\n\t\tsuper(\n\t\t\tfileService,\n\t\t\tuntitledTextEditorService,\n\t\t\tlifecycleService,\n\t\t\tinstantiationService,\n\t\t\tmodelService,\n\t\t\tenvironmentService,\n\t\t\tdialogService,\n\t\t\tfileDialogService,\n\t\t\ttextResourceConfigurationService,\n\t\t\tfilesConfigurationService,\n\t\t\ttextModelService,\n\t\t\tcodeEditorService,\n\t\t\tpathService,\n\t\t\tworkingCopyFileService,\n\t\t\turiIdentityService,\n\t\t\tmodeService,\n\t\t\televatedFileService,\n\t\t\tlogService\n\t\t);\n\t}\n\n\tsetResolveTextContentErrorOnce(error: FileOperationError): void {\n\t\tthis.resolveTextContentError = error;\n\t}\n\n\toverride async readStream(resource: URI, options?: IReadTextFileOptions): Promise<ITextFileStreamContent> {\n\t\tif (this.resolveTextContentError) {\n\t\t\tconst error = this.resolveTextContentError;\n\t\t\tthis.resolveTextContentError = null;\n\n\t\t\tthrow error;\n\t\t}\n\n\t\tconst content = await this.fileService.readFileStream(resource, options);\n\t\treturn {\n\t\t\tresource: content.resource,\n\t\t\tname: content.name,\n\t\t\tmtime: content.mtime,\n\t\t\tctime: content.ctime,\n\t\t\tetag: content.etag,\n\t\t\tencoding: 'utf8',\n\t\t\tvalue: await createTextBufferFactoryFromStream(content.value),\n\t\t\tsize: 10\n\t\t};\n\t}\n}\n\nexport class TestNativeTextFileServiceWithEncodingOverrides extends NativeTextFileService {\n\n\tprivate _testEncoding: TestEncodingOracle | undefined;\n\toverride get encoding(): TestEncodingOracle {\n\t\tif (!this._testEncoding) {\n\t\t\tthis._testEncoding = this._register(this.instantiationService.createInstance(TestEncodingOracle));\n\t\t}\n\n\t\treturn this._testEncoding;\n\t}\n}\n\nexport class TestSharedProcessService implements ISharedProcessService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tgetChannel(channelName: string): any { return undefined; }\n\n\tregisterChannel(channelName: string, channel: any): void { }\n}\n\nexport class TestNativeHostService implements INativeHostService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\treadonly windowId = -1;\n\n\tonDidOpenWindow: Event<number> = Event.None;\n\tonDidMaximizeWindow: Event<number> = Event.None;\n\tonDidUnmaximizeWindow: Event<number> = Event.None;\n\tonDidFocusWindow: Event<number> = Event.None;\n\tonDidBlurWindow: Event<number> = Event.None;\n\tonDidResumeOS: Event<unknown> = Event.None;\n\tonDidChangeColorScheme = Event.None;\n\tonDidChangePassword = Event.None;\n\tonDidChangeDisplay = Event.None;\n\n\twindowCount = Promise.resolve(1);\n\tgetWindowCount(): Promise<number> { return this.windowCount; }\n\n\tasync getWindows(): Promise<IOpenedWindow[]> { return []; }\n\tasync getActiveWindowId(): Promise<number | undefined> { return undefined; }\n\n\topenWindow(options?: IOpenEmptyWindowOptions): Promise<void>;\n\topenWindow(toOpen: IWindowOpenable[], options?: IOpenWindowOptions): Promise<void>;\n\topenWindow(arg1?: IOpenEmptyWindowOptions | IWindowOpenable[], arg2?: IOpenWindowOptions): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tasync toggleFullScreen(): Promise<void> { }\n\tasync handleTitleDoubleClick(): Promise<void> { }\n\tasync isMaximized(): Promise<boolean> { return true; }\n\tasync maximizeWindow(): Promise<void> { }\n\tasync unmaximizeWindow(): Promise<void> { }\n\tasync minimizeWindow(): Promise<void> { }\n\tasync setMinimumSize(width: number | undefined, height: number | undefined): Promise<void> { }\n\tasync focusWindow(options?: { windowId?: number | undefined; } | undefined): Promise<void> { }\n\tasync showMessageBox(options: Electron.MessageBoxOptions): Promise<Electron.MessageBoxReturnValue> { throw new Error('Method not implemented.'); }\n\tasync showSaveDialog(options: Electron.SaveDialogOptions): Promise<Electron.SaveDialogReturnValue> { throw new Error('Method not implemented.'); }\n\tasync showOpenDialog(options: Electron.OpenDialogOptions): Promise<Electron.OpenDialogReturnValue> { throw new Error('Method not implemented.'); }\n\tasync pickFileFolderAndOpen(options: INativeOpenDialogOptions): Promise<void> { }\n\tasync pickFileAndOpen(options: INativeOpenDialogOptions): Promise<void> { }\n\tasync pickFolderAndOpen(options: INativeOpenDialogOptions): Promise<void> { }\n\tasync pickWorkspaceAndOpen(options: INativeOpenDialogOptions): Promise<void> { }\n\tasync showItemInFolder(path: string): Promise<void> { }\n\tasync setRepresentedFilename(path: string): Promise<void> { }\n\tasync isAdmin(): Promise<boolean> { return false; }\n\tasync writeElevated(source: URI, target: URI): Promise<void> { }\n\tasync getOSProperties(): Promise<IOSProperties> { return Object.create(null); }\n\tasync getOSStatistics(): Promise<IOSStatistics> { return Object.create(null); }\n\tasync getOSVirtualMachineHint(): Promise<number> { return 0; }\n\tasync killProcess(): Promise<void> { }\n\tasync setDocumentEdited(edited: boolean): Promise<void> { }\n\tasync openExternal(url: string): Promise<boolean> { return false; }\n\tasync updateTouchBar(): Promise<void> { }\n\tasync moveItemToTrash(): Promise<boolean> { return false; }\n\tasync newWindowTab(): Promise<void> { }\n\tasync showPreviousWindowTab(): Promise<void> { }\n\tasync showNextWindowTab(): Promise<void> { }\n\tasync moveWindowTabToNewWindow(): Promise<void> { }\n\tasync mergeAllWindowTabs(): Promise<void> { }\n\tasync toggleWindowTabsBar(): Promise<void> { }\n\tasync notifyReady(): Promise<void> { }\n\tasync relaunch(options?: { addArgs?: string[] | undefined; removeArgs?: string[] | undefined; } | undefined): Promise<void> { }\n\tasync reload(): Promise<void> { }\n\tasync closeWindow(): Promise<void> { }\n\tasync closeWindowById(): Promise<void> { }\n\tasync quit(): Promise<void> { }\n\tasync exit(code: number): Promise<void> { }\n\tasync openDevTools(options?: Electron.OpenDevToolsOptions | undefined): Promise<void> { }\n\tasync toggleDevTools(): Promise<void> { }\n\tasync toggleSharedProcessWindow(): Promise<void> { }\n\tasync resolveProxy(url: string): Promise<string | undefined> { return undefined; }\n\tasync readClipboardText(type?: 'selection' | 'clipboard' | undefined): Promise<string> { return ''; }\n\tasync writeClipboardText(text: string, type?: 'selection' | 'clipboard' | undefined): Promise<void> { }\n\tasync readClipboardFindText(): Promise<string> { return ''; }\n\tasync writeClipboardFindText(text: string): Promise<void> { }\n\tasync writeClipboardBuffer(format: string, buffer: Uint8Array, type?: 'selection' | 'clipboard' | undefined): Promise<void> { }\n\tasync readClipboardBuffer(format: string): Promise<Uint8Array> { return Uint8Array.from([]); }\n\tasync hasClipboard(format: string, type?: 'selection' | 'clipboard' | undefined): Promise<boolean> { return false; }\n\tasync sendInputEvent(event: MouseInputEvent): Promise<void> { }\n\tasync windowsGetStringRegKey(hive: 'HKEY_CURRENT_USER' | 'HKEY_LOCAL_MACHINE' | 'HKEY_CLASSES_ROOT' | 'HKEY_USERS' | 'HKEY_CURRENT_CONFIG', path: string, name: string): Promise<string | undefined> { return undefined; }\n\tasync getPassword(service: string, account: string): Promise<string | null> { return null; }\n\tasync setPassword(service: string, account: string, password: string): Promise<void> { }\n\tasync deletePassword(service: string, account: string): Promise<boolean> { return false; }\n\tasync findPassword(service: string): Promise<string | null> { return null; }\n\tasync findCredentials(service: string): Promise<{ account: string; password: string; }[]> { return []; }\n}\n\nexport function workbenchInstantiationService(): ITestInstantiationService {\n\tconst instantiationService = browserWorkbenchInstantiationService({\n\t\ttextFileService: insta => <ITextFileService>insta.createInstance(TestTextFileService),\n\t\tpathService: insta => <IPathService>insta.createInstance(TestNativePathService)\n\t});\n\n\tinstantiationService.stub(INativeHostService, new TestNativeHostService());\n\tinstantiationService.stub(IEnvironmentService, TestEnvironmentService);\n\tinstantiationService.stub(INativeEnvironmentService, TestEnvironmentService);\n\tinstantiationService.stub(IWorkbenchEnvironmentService, TestEnvironmentService);\n\tinstantiationService.stub(INativeWorkbenchEnvironmentService, TestEnvironmentService);\n\n\treturn instantiationService;\n}\n\nexport class TestServiceAccessor {\n\tconstructor(\n\t\t@ILifecycleService public lifecycleService: TestLifecycleService,\n\t\t@ITextFileService public textFileService: TestTextFileService,\n\t\t@IFilesConfigurationService public filesConfigurationService: TestFilesConfigurationService,\n\t\t@IWorkspaceContextService public contextService: TestContextService,\n\t\t@IModelService public modelService: ModelServiceImpl,\n\t\t@IFileService public fileService: TestFileService,\n\t\t@INativeHostService public nativeHostService: TestNativeHostService,\n\t\t@IFileDialogService public fileDialogService: TestFileDialogService,\n\t\t@IWorkingCopyBackupService public workingCopyBackupService: NodeTestWorkingCopyBackupService,\n\t\t@IWorkingCopyService public workingCopyService: IWorkingCopyService,\n\t\t@IEditorService public editorService: IEditorService\n\t) {\n\t}\n}\n\nexport class TestNativePathService extends TestPathService {\n\n\tconstructor() {\n\t\tsuper(URI.file(homedir()));\n\t}\n}\n"]}