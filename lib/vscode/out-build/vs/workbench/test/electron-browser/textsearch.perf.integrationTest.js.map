{"version":3,"file":"textsearch.perf.integrationTest.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/test/electron-browser/textsearch.perf.integrationTest.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport * as fs from 'fs';\nimport * as minimist from 'minimist';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport * as path from 'vs/base/common/path';\nimport { URI } from 'vs/base/common/uri';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { ModelServiceImpl } from 'vs/editor/common/services/modelServiceImpl';\nimport { ITextResourcePropertiesService } from 'vs/editor/common/services/textResourceConfigurationService';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { TestConfigurationService } from 'vs/platform/configuration/test/common/testConfigurationService';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { TestDialogService } from 'vs/platform/dialogs/test/common/testDialogService';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';\nimport { InstantiationService } from 'vs/platform/instantiation/common/instantiationService';\nimport { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';\nimport { ILogService, NullLogService } from 'vs/platform/log/common/log';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { TestNotificationService } from 'vs/platform/notification/test/common/testNotificationService';\nimport { ClassifiedEvent, GDPRClassification, StrictPropertyCheck } from 'vs/platform/telemetry/common/gdprTypings';\nimport { ITelemetryInfo, ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { TestThemeService } from 'vs/platform/theme/test/common/testThemeService';\nimport { IUndoRedoService } from 'vs/platform/undoRedo/common/undoRedo';\nimport { UndoRedoService } from 'vs/platform/undoRedo/common/undoRedoService';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { testWorkspace } from 'vs/platform/workspace/test/common/testWorkspace';\nimport 'vs/workbench/contrib/search/browser/search.contribution'; // load contributions\nimport { ITextQueryBuilderOptions, QueryBuilder } from 'vs/workbench/contrib/search/common/queryBuilder';\nimport { SearchModel } from 'vs/workbench/contrib/search/common/searchModel';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { ISearchService } from 'vs/workbench/services/search/common/search';\nimport { LocalSearchService } from 'vs/workbench/services/search/electron-browser/searchService';\nimport { IUntitledTextEditorService, UntitledTextEditorService } from 'vs/workbench/services/untitled/common/untitledTextEditorService';\nimport { TestEditorGroupsService, TestEditorService } from 'vs/workbench/test/browser/workbenchTestServices';\nimport { TestContextService, TestTextResourcePropertiesService } from 'vs/workbench/test/common/workbenchTestServices';\nimport { TestEnvironmentService } from 'vs/workbench/test/electron-browser/workbenchTestServices';\n\n\n\n// declare var __dirname: string;\n\n// Checkout sources to run against:\n// git clone --separate-git-dir=testGit --no-checkout --single-branch https://chromium.googlesource.com/chromium/src testWorkspace\n// cd testWorkspace; git checkout 39a7f93d67f7\n// Run from repository root folder with (test.bat on Windows): ./scripts/test-int-mocha.sh --grep TextSearch.performance --timeout 500000 --testWorkspace <path>\nsuite.skip('TextSearch performance (integration)', () => {\n\n\ttest('Measure', () => {\n\t\tif (process.env['VSCODE_PID']) {\n\t\t\treturn undefined; // TODO@Rob find out why test fails when run from within VS Code\n\t\t}\n\n\t\tconst n = 3;\n\t\tconst argv = minimist(process.argv);\n\t\tconst testWorkspaceArg = argv['testWorkspace'];\n\t\tconst testWorkspacePath = testWorkspaceArg ? path.resolve(testWorkspaceArg) : __dirname;\n\t\tif (!fs.existsSync(testWorkspacePath)) {\n\t\t\tthrow new Error(`--testWorkspace doesn't exist`);\n\t\t}\n\n\t\tconst telemetryService = new TestTelemetryService();\n\t\tconst configurationService = new TestConfigurationService();\n\t\tconst textResourcePropertiesService = new TestTextResourcePropertiesService(configurationService);\n\t\tconst logService = new NullLogService();\n\t\tconst dialogService = new TestDialogService();\n\t\tconst notificationService = new TestNotificationService();\n\t\tconst undoRedoService = new UndoRedoService(dialogService, notificationService);\n\t\tconst instantiationService = new InstantiationService(new ServiceCollection(\n\t\t\t[ITelemetryService, telemetryService],\n\t\t\t[IConfigurationService, configurationService],\n\t\t\t[ITextResourcePropertiesService, textResourcePropertiesService],\n\t\t\t[IDialogService, dialogService],\n\t\t\t[INotificationService, notificationService],\n\t\t\t[IUndoRedoService, undoRedoService],\n\t\t\t[IModelService, new ModelServiceImpl(configurationService, textResourcePropertiesService, new TestThemeService(), logService, undoRedoService)],\n\t\t\t[IWorkspaceContextService, new TestContextService(testWorkspace(URI.file(testWorkspacePath)))],\n\t\t\t[IEditorService, new TestEditorService()],\n\t\t\t[IEditorGroupsService, new TestEditorGroupsService()],\n\t\t\t[IEnvironmentService, TestEnvironmentService],\n\t\t\t[IUntitledTextEditorService, new SyncDescriptor(UntitledTextEditorService)],\n\t\t\t[ISearchService, new SyncDescriptor(LocalSearchService)],\n\t\t\t[ILogService, logService]\n\t\t));\n\n\t\tconst queryOptions: ITextQueryBuilderOptions = {\n\t\t\tmaxResults: 2048\n\t\t};\n\n\t\tconst searchModel: SearchModel = instantiationService.createInstance(SearchModel);\n\t\tfunction runSearch(): Promise<any> {\n\t\t\tconst queryBuilder: QueryBuilder = instantiationService.createInstance(QueryBuilder);\n\t\t\tconst query = queryBuilder.text({ pattern: 'static_library(' }, [URI.file(testWorkspacePath)], queryOptions);\n\n\t\t\t// Wait for the 'searchResultsFinished' event, which is fired after the search() promise is resolved\n\t\t\tconst onSearchResultsFinished = Event.filter(telemetryService.eventLogged, e => e.name === 'searchResultsFinished');\n\t\t\tEvent.once(onSearchResultsFinished)(onComplete);\n\n\t\t\tfunction onComplete(): void {\n\t\t\t\ttry {\n\t\t\t\t\tconst allEvents = telemetryService.events.map(e => JSON.stringify(e)).join('\\n');\n\t\t\t\t\tassert.strictEqual(telemetryService.events.length, 3, 'Expected 3 telemetry events, got:\\n' + allEvents);\n\n\t\t\t\t\tconst [firstRenderEvent, resultsShownEvent, resultsFinishedEvent] = telemetryService.events;\n\t\t\t\t\tassert.strictEqual(firstRenderEvent.name, 'searchResultsFirstRender');\n\t\t\t\t\tassert.strictEqual(resultsShownEvent.name, 'searchResultsShown');\n\t\t\t\t\tassert.strictEqual(resultsFinishedEvent.name, 'searchResultsFinished');\n\n\t\t\t\t\ttelemetryService.events = [];\n\n\t\t\t\t\tresolve!(resultsFinishedEvent);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t// Fail the runSearch() promise\n\t\t\t\t\terror!(e);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet resolve: (result: any) => void;\n\t\t\tlet error: (error: Error) => void;\n\t\t\treturn new Promise((_resolve, _error) => {\n\t\t\t\tresolve = _resolve;\n\t\t\t\terror = _error;\n\n\t\t\t\t// Don't wait on this promise, we're waiting on the event fired above\n\t\t\t\tsearchModel.search(query).then(\n\t\t\t\t\tnull,\n\t\t\t\t\t_error);\n\t\t\t});\n\t\t}\n\n\t\tconst finishedEvents: any[] = [];\n\t\treturn runSearch() // Warm-up first\n\t\t\t.then(() => {\n\t\t\t\tif (testWorkspaceArg) { // Don't measure by default\n\t\t\t\t\tlet i = n;\n\t\t\t\t\treturn (function iterate(): Promise<undefined> | undefined {\n\t\t\t\t\t\tif (!i--) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn runSearch()\n\t\t\t\t\t\t\t.then((resultsFinishedEvent: any) => {\n\t\t\t\t\t\t\t\tconsole.log(`Iteration ${n - i}: ${resultsFinishedEvent.data.duration / 1000}s`);\n\t\t\t\t\t\t\t\tfinishedEvents.push(resultsFinishedEvent);\n\t\t\t\t\t\t\t\treturn iterate();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t})()!.then(() => {\n\t\t\t\t\t\tconst totalTime = finishedEvents.reduce((sum, e) => sum + e.data.duration, 0);\n\t\t\t\t\t\tconsole.log(`Avg duration: ${totalTime / n / 1000}s`);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t});\n\t});\n});\n\nclass TestTelemetryService implements ITelemetryService {\n\tpublic _serviceBrand: undefined;\n\tpublic isOptedIn = true;\n\tpublic sendErrorTelemetry = true;\n\n\tpublic events: any[] = [];\n\n\tprivate readonly emitter = new Emitter<any>();\n\n\tpublic get eventLogged(): Event<any> {\n\t\treturn this.emitter.event;\n\t}\n\n\tpublic setEnabled(value: boolean): void {\n\t}\n\n\tpublic setExperimentProperty(name: string, value: string): void {\n\t}\n\n\tpublic publicLog(eventName: string, data?: any): Promise<void> {\n\t\tconst event = { name: eventName, data: data };\n\t\tthis.events.push(event);\n\t\tthis.emitter.fire(event);\n\t\treturn Promise.resolve();\n\t}\n\n\tpublic publicLog2<E extends ClassifiedEvent<T> = never, T extends GDPRClassification<T> = never>(eventName: string, data?: StrictPropertyCheck<T, E>) {\n\t\treturn this.publicLog(eventName, data as any);\n\t}\n\n\tpublic publicLogError(eventName: string, data?: any): Promise<void> {\n\t\treturn this.publicLog(eventName, data);\n\t}\n\n\tpublic publicLogError2<E extends ClassifiedEvent<T> = never, T extends GDPRClassification<T> = never>(eventName: string, data?: StrictPropertyCheck<T, E>) {\n\t\treturn this.publicLogError(eventName, data as any);\n\t}\n\n\tpublic getTelemetryInfo(): Promise<ITelemetryInfo> {\n\t\treturn Promise.resolve({\n\t\t\tinstanceId: 'someValue.instanceId',\n\t\t\tsessionId: 'someValue.sessionId',\n\t\t\tmachineId: 'someValue.machineId',\n\t\t\tfirstSessionDate: 'someValue.firstSessionDate'\n\t\t});\n\t}\n}\n"]}