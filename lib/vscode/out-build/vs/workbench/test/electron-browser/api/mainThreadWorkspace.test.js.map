{"version":3,"file":"mainThreadWorkspace.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/test/electron-browser/api/mainThreadWorkspace.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { workbenchInstantiationService } from 'vs/workbench/test/electron-browser/workbenchTestServices';\nimport { TestInstantiationService } from 'vs/platform/instantiation/test/common/instantiationServiceMock';\nimport { ISearchService, IFileQuery } from 'vs/workbench/services/search/common/search';\nimport { MainThreadWorkspace } from 'vs/workbench/api/browser/mainThreadWorkspace';\nimport * as assert from 'assert';\nimport { SingleProxyRPCProtocol } from 'vs/workbench/test/browser/api/testRPCProtocol';\nimport { CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { TestConfigurationService } from 'vs/platform/configuration/test/common/testConfigurationService';\n\nsuite('MainThreadWorkspace', () => {\n\n\tlet configService: TestConfigurationService;\n\tlet instantiationService: TestInstantiationService;\n\n\tsetup(() => {\n\t\tinstantiationService = workbenchInstantiationService() as TestInstantiationService;\n\n\t\tconfigService = instantiationService.get(IConfigurationService) as TestConfigurationService;\n\t\tconfigService.setUserConfiguration('search', {});\n\t});\n\n\ttest('simple', () => {\n\t\tinstantiationService.stub(ISearchService, {\n\t\t\tfileSearch(query: IFileQuery) {\n\t\t\t\tassert.strictEqual(query.folderQueries.length, 1);\n\t\t\t\tassert.strictEqual(query.folderQueries[0].disregardIgnoreFiles, true);\n\n\t\t\t\tassert.deepEqual(query.includePattern, { 'foo': true });\n\t\t\t\tassert.strictEqual(query.maxResults, 10);\n\n\t\t\t\treturn Promise.resolve({ results: [], messages: [] });\n\t\t\t}\n\t\t});\n\n\t\tconst mtw: MainThreadWorkspace = instantiationService.createInstance(<any>MainThreadWorkspace, SingleProxyRPCProtocol({ $initializeWorkspace: () => { } }));\n\t\treturn mtw.$startFileSearch('foo', null, null, 10, new CancellationTokenSource().token);\n\t});\n\n\ttest('exclude defaults', () => {\n\t\tconfigService.setUserConfiguration('search', {\n\t\t\t'exclude': { 'searchExclude': true }\n\t\t});\n\t\tconfigService.setUserConfiguration('files', {\n\t\t\t'exclude': { 'filesExclude': true }\n\t\t});\n\n\t\tinstantiationService.stub(ISearchService, {\n\t\t\tfileSearch(query: IFileQuery) {\n\t\t\t\tassert.strictEqual(query.folderQueries.length, 1);\n\t\t\t\tassert.strictEqual(query.folderQueries[0].disregardIgnoreFiles, true);\n\t\t\t\tassert.deepStrictEqual(query.folderQueries[0].excludePattern, { 'filesExclude': true });\n\n\t\t\t\treturn Promise.resolve({ results: [], messages: [] });\n\t\t\t}\n\t\t});\n\n\t\tconst mtw: MainThreadWorkspace = instantiationService.createInstance(<any>MainThreadWorkspace, SingleProxyRPCProtocol({ $initializeWorkspace: () => { } }));\n\t\treturn mtw.$startFileSearch('', null, null, 10, new CancellationTokenSource().token);\n\t});\n\n\ttest('disregard excludes', () => {\n\t\tconfigService.setUserConfiguration('search', {\n\t\t\t'exclude': { 'searchExclude': true }\n\t\t});\n\t\tconfigService.setUserConfiguration('files', {\n\t\t\t'exclude': { 'filesExclude': true }\n\t\t});\n\n\t\tinstantiationService.stub(ISearchService, {\n\t\t\tfileSearch(query: IFileQuery) {\n\t\t\t\tassert.strictEqual(query.folderQueries[0].excludePattern, undefined);\n\t\t\t\tassert.deepStrictEqual(query.excludePattern, undefined);\n\n\t\t\t\treturn Promise.resolve({ results: [], messages: [] });\n\t\t\t}\n\t\t});\n\n\t\tconst mtw: MainThreadWorkspace = instantiationService.createInstance(<any>MainThreadWorkspace, SingleProxyRPCProtocol({ $initializeWorkspace: () => { } }));\n\t\treturn mtw.$startFileSearch('', null, false, 10, new CancellationTokenSource().token);\n\t});\n\n\ttest('exclude string', () => {\n\t\tinstantiationService.stub(ISearchService, {\n\t\t\tfileSearch(query: IFileQuery) {\n\t\t\t\tassert.strictEqual(query.folderQueries[0].excludePattern, undefined);\n\t\t\t\tassert.deepEqual(query.excludePattern, { 'exclude/**': true });\n\n\t\t\t\treturn Promise.resolve({ results: [], messages: [] });\n\t\t\t}\n\t\t});\n\n\t\tconst mtw: MainThreadWorkspace = instantiationService.createInstance(<any>MainThreadWorkspace, SingleProxyRPCProtocol({ $initializeWorkspace: () => { } }));\n\t\treturn mtw.$startFileSearch('', null, 'exclude/**', 10, new CancellationTokenSource().token);\n\t});\n});\n"]}