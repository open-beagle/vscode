{"version":3,"file":"viewlet.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/test/browser/viewlet.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { ViewletDescriptor, Extensions, Viewlet, ViewletRegistry } from 'vs/workbench/browser/viewlet';\nimport { isFunction } from 'vs/base/common/types';\n\nsuite('Viewlets', () => {\n\n\tclass TestViewlet extends Viewlet {\n\n\t\tconstructor() {\n\t\t\tsuper('id', null!, null!, null!, null!, null!, null!, null!, null!, null!);\n\t\t}\n\n\t\toverride layout(dimension: any): void {\n\t\t\tthrow new Error('Method not implemented.');\n\t\t}\n\n\t\tcreateViewPaneContainer() { return null!; }\n\t}\n\n\ttest('ViewletDescriptor API', function () {\n\t\tlet d = ViewletDescriptor.create(TestViewlet, 'id', 'name', 'class', 5);\n\t\tassert.strictEqual(d.id, 'id');\n\t\tassert.strictEqual(d.name, 'name');\n\t\tassert.strictEqual(d.cssClass, 'class');\n\t\tassert.strictEqual(d.order, 5);\n\t});\n\n\ttest('Editor Aware ViewletDescriptor API', function () {\n\t\tlet d = ViewletDescriptor.create(TestViewlet, 'id', 'name', 'class', 5);\n\t\tassert.strictEqual(d.id, 'id');\n\t\tassert.strictEqual(d.name, 'name');\n\n\t\td = ViewletDescriptor.create(TestViewlet, 'id', 'name', 'class', 5);\n\t\tassert.strictEqual(d.id, 'id');\n\t\tassert.strictEqual(d.name, 'name');\n\t});\n\n\ttest('Viewlet extension point and registration', function () {\n\t\tassert(isFunction(Registry.as<ViewletRegistry>(Extensions.Viewlets).registerViewlet));\n\t\tassert(isFunction(Registry.as<ViewletRegistry>(Extensions.Viewlets).getViewlet));\n\t\tassert(isFunction(Registry.as<ViewletRegistry>(Extensions.Viewlets).getViewlets));\n\n\t\tlet oldCount = Registry.as<ViewletRegistry>(Extensions.Viewlets).getViewlets().length;\n\t\tlet d = ViewletDescriptor.create(TestViewlet, 'reg-test-id', 'name');\n\t\tRegistry.as<ViewletRegistry>(Extensions.Viewlets).registerViewlet(d);\n\n\t\tassert(d === Registry.as<ViewletRegistry>(Extensions.Viewlets).getViewlet('reg-test-id'));\n\t\tassert.strictEqual(oldCount + 1, Registry.as<ViewletRegistry>(Extensions.Viewlets).getViewlets().length);\n\t});\n});\n"]}