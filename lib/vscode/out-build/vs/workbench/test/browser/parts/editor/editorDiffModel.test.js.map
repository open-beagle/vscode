{"version":3,"file":"editorDiffModel.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/test/browser/parts/editor/editorDiffModel.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAWhG,KAAK,CAAC,wBAAwB,EAAE,GAAG,EAAE;QAEpC,IAAI,oBAA2C,CAAC;QAChD,IAAI,QAA6B,CAAC;QAElC,KAAK,CAAC,GAAG,EAAE;YACV,oBAAoB,GAAG,CAAA,GAAA,qDAA6B,CAAA,EAAE,CAAC;YACvD,QAAQ,GAAG,oBAAoB,CAAC,cAAc,CAAC,2CAAmB,CAAC,CAAC;QACrE,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,qBAAqB,EAAE,KAAK,IAAI,EAAE;YACtC,MAAM,OAAO,GAAG,QAAQ,CAAC,wBAAwB,CAAC,gCAAgC,CAAC,MAAM,EAAE;gBAC1F,kBAAkB,EAAE,KAAK,WAAW,QAAa;oBAChD,IAAI,QAAQ,CAAC,MAAM,KAAK,MAAM,EAAE;wBAC/B,IAAI,YAAY,GAAG,YAAY,CAAC;wBAChC,IAAI,iBAAiB,GAAG,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;wBAE5D,OAAO,QAAQ,CAAC,YAAY,CAAC,WAAW,CAAC,YAAY,EAAE,iBAAiB,EAAE,QAAQ,CAAC,CAAC;qBACpF;oBAED,OAAO,IAAI,CAAC;gBACb,CAAC;aACD,CAAC,CAAC;YAEH,IAAI,KAAK,GAAG,oBAAoB,CAAC,cAAc,CAAC,yCAAmB,EAAE,SAAG,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,IAAK,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,EAAE,MAAM,EAAE,aAAa,EAAE,SAAS,CAAC,CAAC;YACxK,IAAI,UAAU,GAAG,oBAAoB,CAAC,cAAc,CAAC,yCAAmB,EAAE,SAAG,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,IAAK,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,aAAa,EAAE,SAAS,CAAC,CAAC;YAC9K,IAAI,SAAS,GAAG,oBAAoB,CAAC,cAAc,CAAC,iCAAe,EAAE,MAAM,EAAE,aAAa,EAAE,KAAK,EAAE,UAAU,EAAE,SAAS,CAAC,CAAC;YAE1H,IAAI,KAAK,GAAG,MAAM,SAAS,CAAC,OAAO,EAAyB,CAAC;YAE7D,MAAM,CAAC,KAAK,CAAC,CAAC;YACd,MAAM,CAAC,KAAK,YAAY,yCAAmB,CAAC,CAAC;YAE7C,IAAI,eAAe,GAAG,KAAK,CAAC,mBAAoB,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;YACjC,MAAM,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;YAEjC,KAAK,GAAG,MAAM,SAAS,CAAC,OAAO,EAAyB,CAAC;YACzD,MAAM,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,CAAC;YAE3B,MAAM,CAAC,eAAe,KAAK,KAAK,CAAC,mBAAmB,CAAC,CAAC;YACtD,SAAS,CAAC,OAAO,EAAE,CAAC;YACpB,MAAM,CAAC,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;YAEnC,OAAO,CAAC,OAAO,EAAE,CAAC;QACnB,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { TextDiffEditorModel } from 'vs/workbench/common/editor/textDiffEditorModel';\nimport { DiffEditorInput } from 'vs/workbench/common/editor/diffEditorInput';\nimport { ResourceEditorInput } from 'vs/workbench/common/editor/resourceEditorInput';\nimport { URI } from 'vs/base/common/uri';\nimport { workbenchInstantiationService, TestServiceAccessor } from 'vs/workbench/test/browser/workbenchTestServices';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\n\nsuite('Workbench editor model', () => {\n\n\tlet instantiationService: IInstantiationService;\n\tlet accessor: TestServiceAccessor;\n\n\tsetup(() => {\n\t\tinstantiationService = workbenchInstantiationService();\n\t\taccessor = instantiationService.createInstance(TestServiceAccessor);\n\t});\n\n\ttest('TextDiffEditorModel', async () => {\n\t\tconst dispose = accessor.textModelResolverService.registerTextModelContentProvider('test', {\n\t\t\tprovideTextContent: async function (resource: URI): Promise<ITextModel | null> {\n\t\t\t\tif (resource.scheme === 'test') {\n\t\t\t\t\tlet modelContent = 'Hello Test';\n\t\t\t\t\tlet languageSelection = accessor.modeService.create('json');\n\n\t\t\t\t\treturn accessor.modelService.createModel(modelContent, languageSelection, resource);\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\n\t\tlet input = instantiationService.createInstance(ResourceEditorInput, URI.from({ scheme: 'test', authority: null!, path: 'thePath' }), 'name', 'description', undefined);\n\t\tlet otherInput = instantiationService.createInstance(ResourceEditorInput, URI.from({ scheme: 'test', authority: null!, path: 'thePath' }), 'name2', 'description', undefined);\n\t\tlet diffInput = instantiationService.createInstance(DiffEditorInput, 'name', 'description', input, otherInput, undefined);\n\n\t\tlet model = await diffInput.resolve() as TextDiffEditorModel;\n\n\t\tassert(model);\n\t\tassert(model instanceof TextDiffEditorModel);\n\n\t\tlet diffEditorModel = model.textDiffEditorModel!;\n\t\tassert(diffEditorModel.original);\n\t\tassert(diffEditorModel.modified);\n\n\t\tmodel = await diffInput.resolve() as TextDiffEditorModel;\n\t\tassert(model.isResolved());\n\n\t\tassert(diffEditorModel !== model.textDiffEditorModel);\n\t\tdiffInput.dispose();\n\t\tassert(!model.textDiffEditorModel);\n\n\t\tdispose.dispose();\n\t});\n});\n"]}