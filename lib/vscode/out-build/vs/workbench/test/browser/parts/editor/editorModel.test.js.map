{"version":3,"file":"editorModel.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/test/browser/parts/editor/editorModel.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { TestInstantiationService } from 'vs/platform/instantiation/test/common/instantiationServiceMock';\nimport { EditorModel } from 'vs/workbench/common/editor';\nimport { BaseTextEditorModel } from 'vs/workbench/common/editor/textEditorModel';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { ModeServiceImpl } from 'vs/editor/common/services/modeServiceImpl';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { TestConfigurationService } from 'vs/platform/configuration/test/common/testConfigurationService';\nimport { ModelServiceImpl } from 'vs/editor/common/services/modelServiceImpl';\nimport { ITextBufferFactory } from 'vs/editor/common/model';\nimport { URI } from 'vs/base/common/uri';\nimport { createTextBufferFactory } from 'vs/editor/common/model/textModel';\nimport { ITextResourcePropertiesService } from 'vs/editor/common/services/textResourceConfigurationService';\nimport { IUndoRedoService } from 'vs/platform/undoRedo/common/undoRedo';\nimport { UndoRedoService } from 'vs/platform/undoRedo/common/undoRedoService';\nimport { TestDialogService } from 'vs/platform/dialogs/test/common/testDialogService';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { TestNotificationService } from 'vs/platform/notification/test/common/testNotificationService';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { TestTextResourcePropertiesService } from 'vs/workbench/test/common/workbenchTestServices';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { TestThemeService } from 'vs/platform/theme/test/common/testThemeService';\n\nsuite('Workbench editor model', () => {\n\n\tclass MyEditorModel extends EditorModel { }\n\tclass MyTextEditorModel extends BaseTextEditorModel {\n\t\toverride createTextEditorModel(value: ITextBufferFactory, resource?: URI, preferredMode?: string) {\n\t\t\treturn super.createTextEditorModel(value, resource, preferredMode);\n\t\t}\n\n\t\toverride isReadonly(): boolean {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tfunction stubModelService(instantiationService: TestInstantiationService): IModelService {\n\t\tconst dialogService = new TestDialogService();\n\t\tconst notificationService = new TestNotificationService();\n\t\tconst undoRedoService = new UndoRedoService(dialogService, notificationService);\n\t\tinstantiationService.stub(IConfigurationService, new TestConfigurationService());\n\t\tinstantiationService.stub(ITextResourcePropertiesService, new TestTextResourcePropertiesService(instantiationService.get(IConfigurationService)));\n\t\tinstantiationService.stub(IDialogService, dialogService);\n\t\tinstantiationService.stub(INotificationService, notificationService);\n\t\tinstantiationService.stub(IUndoRedoService, undoRedoService);\n\t\tinstantiationService.stub(IThemeService, new TestThemeService());\n\n\t\treturn instantiationService.createInstance(ModelServiceImpl);\n\t}\n\n\tlet instantiationService: TestInstantiationService;\n\tlet modeService: IModeService;\n\n\tsetup(() => {\n\t\tinstantiationService = new TestInstantiationService();\n\t\tmodeService = instantiationService.stub(IModeService, ModeServiceImpl);\n\t});\n\n\ttest('EditorModel', async () => {\n\t\tlet counter = 0;\n\n\t\tconst model = new MyEditorModel();\n\n\t\tmodel.onWillDispose(() => {\n\t\t\tassert(true);\n\t\t\tcounter++;\n\t\t});\n\n\t\tawait model.resolve();\n\t\tassert.strictEqual(model.isDisposed(), false);\n\t\tassert.strictEqual(model.isResolved(), true);\n\t\tmodel.dispose();\n\t\tassert.strictEqual(counter, 1);\n\t\tassert.strictEqual(model.isDisposed(), true);\n\t});\n\n\ttest('BaseTextEditorModel', async () => {\n\t\tlet modelService = stubModelService(instantiationService);\n\n\t\tconst model = new MyTextEditorModel(modelService, modeService);\n\t\tawait model.resolve();\n\n\t\tmodel.createTextEditorModel(createTextBufferFactory('foo'), null!, 'text/plain');\n\t\tassert.strictEqual(model.isResolved(), true);\n\t\tmodel.dispose();\n\t});\n});\n"]}