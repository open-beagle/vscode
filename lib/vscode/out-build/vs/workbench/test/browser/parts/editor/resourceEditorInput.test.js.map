{"version":3,"file":"resourceEditorInput.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/test/browser/parts/editor/resourceEditorInput.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAWhG,KAAK,CAAC,uBAAuB,EAAE,GAAG,EAAE;QAEnC,IAAI,oBAA2C,CAAC;QAChD,IAAI,QAA6B,CAAC;QAElC,KAAK,CAAC,GAAG,EAAE;YACV,oBAAoB,GAAG,CAAA,GAAA,qDAA6B,CAAA,EAAE,CAAC;YACvD,QAAQ,GAAG,oBAAoB,CAAC,cAAc,CAAC,2CAAmB,CAAC,CAAC;QACrE,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,EAAE,KAAK,IAAI,EAAE;YACzB,MAAM,QAAQ,GAAG,SAAG,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE,SAAS,EAAE,IAAK,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,CAAC;YACrF,QAAQ,CAAC,YAAY,CAAC,WAAW,CAAC,oBAAoB,EAAE,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,QAAQ,CAAC,CAAC;YAEvG,MAAM,KAAK,GAAwB,oBAAoB,CAAC,cAAc,CAAC,yCAAmB,EAAE,QAAQ,EAAE,UAAU,EAAE,iBAAiB,EAAE,SAAS,CAAC,CAAC;YAEhJ,MAAM,KAAK,GAAG,MAAM,KAAK,CAAC,OAAO,EAAE,CAAC;YAEpC,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;YACjB,MAAM,CAAC,WAAW,CAAC,CAAA,GAAA,4BAAgB,CAAA,CAAC,CAAE,KAA6B,CAAC,cAAc,EAAG,CAAC,CAAC,EAAE,oBAAoB,CAAC,CAAC;QAChH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,aAAa,EAAE,KAAK,IAAI,EAAE;;YAC9B,6BAAa,CAAC,gBAAgB,CAAC;gBAC9B,EAAE,EAAE,qBAAqB;aACzB,CAAC,CAAC;YAEH,MAAM,QAAQ,GAAG,SAAG,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE,SAAS,EAAE,IAAK,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,CAAC;YACrF,QAAQ,CAAC,YAAY,CAAC,WAAW,CAAC,oBAAoB,EAAE,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,QAAQ,CAAC,CAAC;YAEvG,MAAM,KAAK,GAAwB,oBAAoB,CAAC,cAAc,CAAC,yCAAmB,EAAE,QAAQ,EAAE,UAAU,EAAE,iBAAiB,EAAE,qBAAqB,CAAC,CAAC;YAE5J,MAAM,KAAK,GAAG,MAAM,KAAK,CAAC,OAAO,EAAE,CAAC;YACpC,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;YACjB,MAAM,CAAC,WAAW,CAAC,MAAA,KAAK,CAAC,eAAe,0CAAE,SAAS,EAAE,EAAE,qBAAqB,CAAC,CAAC;YAE9E,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YACtB,MAAM,CAAC,WAAW,CAAC,MAAA,KAAK,CAAC,eAAe,0CAAE,SAAS,EAAE,EAAE,iCAAiB,CAAC,CAAC;QAC3E,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { URI } from 'vs/base/common/uri';\nimport { ResourceEditorInput } from 'vs/workbench/common/editor/resourceEditorInput';\nimport { ResourceEditorModel } from 'vs/workbench/common/editor/resourceEditorModel';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { workbenchInstantiationService, TestServiceAccessor } from 'vs/workbench/test/browser/workbenchTestServices';\nimport { snapshotToString } from 'vs/workbench/services/textfile/common/textfiles';\nimport { ModesRegistry, PLAINTEXT_MODE_ID } from 'vs/editor/common/modes/modesRegistry';\n\nsuite('Resource text editors', () => {\n\n\tlet instantiationService: IInstantiationService;\n\tlet accessor: TestServiceAccessor;\n\n\tsetup(() => {\n\t\tinstantiationService = workbenchInstantiationService();\n\t\taccessor = instantiationService.createInstance(TestServiceAccessor);\n\t});\n\n\ttest('basics', async () => {\n\t\tconst resource = URI.from({ scheme: 'inmemory', authority: null!, path: 'thePath' });\n\t\taccessor.modelService.createModel('function test() {}', accessor.modeService.create('text'), resource);\n\n\t\tconst input: ResourceEditorInput = instantiationService.createInstance(ResourceEditorInput, resource, 'The Name', 'The Description', undefined);\n\n\t\tconst model = await input.resolve();\n\n\t\tassert.ok(model);\n\t\tassert.strictEqual(snapshotToString(((model as ResourceEditorModel).createSnapshot()!)), 'function test() {}');\n\t});\n\n\ttest('custom mode', async () => {\n\t\tModesRegistry.registerLanguage({\n\t\t\tid: 'resource-input-test',\n\t\t});\n\n\t\tconst resource = URI.from({ scheme: 'inmemory', authority: null!, path: 'thePath' });\n\t\taccessor.modelService.createModel('function test() {}', accessor.modeService.create('text'), resource);\n\n\t\tconst input: ResourceEditorInput = instantiationService.createInstance(ResourceEditorInput, resource, 'The Name', 'The Description', 'resource-input-test');\n\n\t\tconst model = await input.resolve();\n\t\tassert.ok(model);\n\t\tassert.strictEqual(model.textEditorModel?.getModeId(), 'resource-input-test');\n\n\t\tinput.setMode('text');\n\t\tassert.strictEqual(model.textEditorModel?.getModeId(), PLAINTEXT_MODE_ID);\n\t});\n});\n"]}