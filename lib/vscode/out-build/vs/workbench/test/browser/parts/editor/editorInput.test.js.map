{"version":3,"file":"editorInput.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/test/browser/parts/editor/editorInput.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAOhG,KAAK,CAAC,wBAAwB,EAAE,GAAG,EAAE;QAEpC,MAAM,aAAc,SAAQ,oBAAW;YAAvC;;gBACU,aAAQ,GAAG,SAAS,CAAC;YAI/B,CAAC;YAFA,IAAa,MAAM,KAAa,OAAO,eAAe,CAAC,CAAC,CAAC;YAChD,OAAO,KAAU,OAAO,IAAI,CAAC,CAAC,CAAC;SACxC;QAED,IAAI,CAAC,aAAa,EAAE,GAAG,EAAE;YACxB,IAAI,OAAO,GAAG,CAAC,CAAC;YAChB,IAAI,KAAK,GAAG,IAAI,aAAa,EAAE,CAAC;YAChC,IAAI,UAAU,GAAG,IAAI,aAAa,EAAE,CAAC;YAErC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;YACnC,MAAM,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YAExB,KAAK,CAAC,aAAa,CAAC,GAAG,EAAE;gBACxB,MAAM,CAAC,IAAI,CAAC,CAAC;gBACb,OAAO,EAAE,CAAC;YACX,CAAC,CAAC,CAAC;YAEH,KAAK,CAAC,OAAO,EAAE,CAAC;YAChB,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,iBAAiB,EAAE,GAAG,EAAE;YAC5B,MAAM,oBAAoB,GAAG,CAAA,GAAA,qDAA6B,CAAA,EAAE,CAAC;YAE7D,IAAI,OAAO,GAAG,CAAC,CAAC;YAChB,IAAI,KAAK,GAAG,IAAI,aAAa,EAAE,CAAC;YAChC,KAAK,CAAC,aAAa,CAAC,GAAG,EAAE;gBACxB,MAAM,CAAC,IAAI,CAAC,CAAC;gBACb,OAAO,EAAE,CAAC;YACX,CAAC,CAAC,CAAC;YAEH,IAAI,UAAU,GAAG,IAAI,aAAa,EAAE,CAAC;YACrC,UAAU,CAAC,aAAa,CAAC,GAAG,EAAE;gBAC7B,MAAM,CAAC,IAAI,CAAC,CAAC;gBACb,OAAO,EAAE,CAAC;YACX,CAAC,CAAC,CAAC;YAEH,IAAI,SAAS,GAAG,oBAAoB,CAAC,cAAc,CAAC,iCAAe,EAAE,MAAM,EAAE,aAAa,EAAE,KAAK,EAAE,UAAU,EAAE,SAAS,CAAC,CAAC;YAE1H,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;YACnD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,aAAa,EAAE,UAAU,CAAC,CAAC;YACxD,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;YACrC,MAAM,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;YACvC,MAAM,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;YAEjC,SAAS,CAAC,OAAO,EAAE,CAAC;YACpB,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,qDAAqD,EAAE;YAC3D,MAAM,oBAAoB,GAAG,CAAA,GAAA,qDAA6B,CAAA,EAAE,CAAC;YAE7D,IAAI,OAAO,GAAG,CAAC,CAAC;YAChB,IAAI,KAAK,GAAG,IAAI,aAAa,EAAE,CAAC;YAChC,IAAI,UAAU,GAAG,IAAI,aAAa,EAAE,CAAC;YAErC,IAAI,SAAS,GAAG,oBAAoB,CAAC,cAAc,CAAC,iCAAe,EAAE,MAAM,EAAE,aAAa,EAAE,KAAK,EAAE,UAAU,EAAE,SAAS,CAAC,CAAC;YAC1H,SAAS,CAAC,aAAa,CAAC,GAAG,EAAE;gBAC5B,OAAO,EAAE,CAAC;gBACV,MAAM,CAAC,IAAI,CAAC,CAAC;YACd,CAAC,CAAC,CAAC;YAEH,KAAK,CAAC,OAAO,EAAE,CAAC;YAEhB,KAAK,GAAG,IAAI,aAAa,EAAE,CAAC;YAC5B,UAAU,GAAG,IAAI,aAAa,EAAE,CAAC;YAEjC,IAAI,UAAU,GAAG,oBAAoB,CAAC,cAAc,CAAC,iCAAe,EAAE,MAAM,EAAE,aAAa,EAAE,KAAK,EAAE,UAAU,EAAE,SAAS,CAAC,CAAC;YAC3H,UAAU,CAAC,aAAa,CAAC,GAAG,EAAE;gBAC7B,OAAO,EAAE,CAAC;gBACV,MAAM,CAAC,IAAI,CAAC,CAAC;YACd,CAAC,CAAC,CAAC;YAEH,UAAU,CAAC,OAAO,EAAE,CAAC;YACrB,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { EditorInput } from 'vs/workbench/common/editor';\nimport { DiffEditorInput } from 'vs/workbench/common/editor/diffEditorInput';\nimport { workbenchInstantiationService } from 'vs/workbench/test/browser/workbenchTestServices';\n\nsuite('Workbench editor input', () => {\n\n\tclass MyEditorInput extends EditorInput {\n\t\treadonly resource = undefined;\n\n\t\toverride get typeId(): string { return 'myEditorInput'; }\n\t\toverride resolve(): any { return null; }\n\t}\n\n\ttest('EditorInput', () => {\n\t\tlet counter = 0;\n\t\tlet input = new MyEditorInput();\n\t\tlet otherInput = new MyEditorInput();\n\n\t\tassert(input.matches(input));\n\t\tassert(!input.matches(otherInput));\n\t\tassert(!input.matches(null));\n\t\tassert(input.getName());\n\n\t\tinput.onWillDispose(() => {\n\t\t\tassert(true);\n\t\t\tcounter++;\n\t\t});\n\n\t\tinput.dispose();\n\t\tassert.strictEqual(counter, 1);\n\t});\n\n\ttest('DiffEditorInput', () => {\n\t\tconst instantiationService = workbenchInstantiationService();\n\n\t\tlet counter = 0;\n\t\tlet input = new MyEditorInput();\n\t\tinput.onWillDispose(() => {\n\t\t\tassert(true);\n\t\t\tcounter++;\n\t\t});\n\n\t\tlet otherInput = new MyEditorInput();\n\t\totherInput.onWillDispose(() => {\n\t\t\tassert(true);\n\t\t\tcounter++;\n\t\t});\n\n\t\tlet diffInput = instantiationService.createInstance(DiffEditorInput, 'name', 'description', input, otherInput, undefined);\n\n\t\tassert.strictEqual(diffInput.originalInput, input);\n\t\tassert.strictEqual(diffInput.modifiedInput, otherInput);\n\t\tassert(diffInput.matches(diffInput));\n\t\tassert(!diffInput.matches(otherInput));\n\t\tassert(!diffInput.matches(null));\n\n\t\tdiffInput.dispose();\n\t\tassert.strictEqual(counter, 0);\n\t});\n\n\ttest('DiffEditorInput disposes when input inside disposes', function () {\n\t\tconst instantiationService = workbenchInstantiationService();\n\n\t\tlet counter = 0;\n\t\tlet input = new MyEditorInput();\n\t\tlet otherInput = new MyEditorInput();\n\n\t\tlet diffInput = instantiationService.createInstance(DiffEditorInput, 'name', 'description', input, otherInput, undefined);\n\t\tdiffInput.onWillDispose(() => {\n\t\t\tcounter++;\n\t\t\tassert(true);\n\t\t});\n\n\t\tinput.dispose();\n\n\t\tinput = new MyEditorInput();\n\t\totherInput = new MyEditorInput();\n\n\t\tlet diffInput2 = instantiationService.createInstance(DiffEditorInput, 'name', 'description', input, otherInput, undefined);\n\t\tdiffInput2.onWillDispose(() => {\n\t\t\tcounter++;\n\t\t\tassert(true);\n\t\t});\n\n\t\totherInput.dispose();\n\t\tassert.strictEqual(counter, 2);\n\t});\n});\n"]}