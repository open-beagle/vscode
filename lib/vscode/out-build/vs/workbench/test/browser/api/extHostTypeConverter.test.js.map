{"version":3,"file":"extHostTypeConverter.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/test/browser/api/extHostTypeConverter.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\nimport * as assert from 'assert';\nimport { MarkdownString } from 'vs/workbench/api/common/extHostTypeConverters';\nimport { isEmptyObject } from 'vs/base/common/types';\nimport { forEach } from 'vs/base/common/collections';\nimport { LogLevel as _MainLogLevel } from 'vs/platform/log/common/log';\nimport { URI } from 'vs/base/common/uri';\n\nsuite('ExtHostTypeConverter', function () {\n\tfunction size<T>(from: Record<any, any>): number {\n\t\tlet count = 0;\n\t\tfor (let key in from) {\n\t\t\tif (Object.prototype.hasOwnProperty.call(from, key)) {\n\t\t\t\tcount += 1;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\n\ttest('MarkdownConvert - uris', function () {\n\n\t\tlet data = MarkdownString.from('Hello');\n\t\tassert.strictEqual(isEmptyObject(data.uris), true);\n\t\tassert.strictEqual(data.value, 'Hello');\n\n\t\tdata = MarkdownString.from('Hello [link](foo)');\n\t\tassert.strictEqual(data.value, 'Hello [link](foo)');\n\t\tassert.strictEqual(isEmptyObject(data.uris), true); // no scheme, no uri\n\n\t\tdata = MarkdownString.from('Hello [link](www.noscheme.bad)');\n\t\tassert.strictEqual(data.value, 'Hello [link](www.noscheme.bad)');\n\t\tassert.strictEqual(isEmptyObject(data.uris), true); // no scheme, no uri\n\n\t\tdata = MarkdownString.from('Hello [link](foo:path)');\n\t\tassert.strictEqual(data.value, 'Hello [link](foo:path)');\n\t\tassert.strictEqual(size(data.uris!), 1);\n\t\tassert.ok(!!data.uris!['foo:path']);\n\n\t\tdata = MarkdownString.from('hello@foo.bar');\n\t\tassert.strictEqual(data.value, 'hello@foo.bar');\n\t\tassert.strictEqual(size(data.uris!), 1);\n\t\t// assert.ok(!!data.uris!['mailto:hello@foo.bar']);\n\n\t\tdata = MarkdownString.from('*hello* [click](command:me)');\n\t\tassert.strictEqual(data.value, '*hello* [click](command:me)');\n\t\tassert.strictEqual(size(data.uris!), 1);\n\t\tassert.ok(!!data.uris!['command:me']);\n\n\t\tdata = MarkdownString.from('*hello* [click](file:///somepath/here). [click](file:///somepath/here)');\n\t\tassert.strictEqual(data.value, '*hello* [click](file:///somepath/here). [click](file:///somepath/here)');\n\t\tassert.strictEqual(size(data.uris!), 1);\n\t\tassert.ok(!!data.uris!['file:///somepath/here']);\n\n\t\tdata = MarkdownString.from('*hello* [click](file:///somepath/here). [click](file:///somepath/here)');\n\t\tassert.strictEqual(data.value, '*hello* [click](file:///somepath/here). [click](file:///somepath/here)');\n\t\tassert.strictEqual(size(data.uris!), 1);\n\t\tassert.ok(!!data.uris!['file:///somepath/here']);\n\n\t\tdata = MarkdownString.from('*hello* [click](file:///somepath/here). [click](file:///somepath/here2)');\n\t\tassert.strictEqual(data.value, '*hello* [click](file:///somepath/here). [click](file:///somepath/here2)');\n\t\tassert.strictEqual(size(data.uris!), 2);\n\t\tassert.ok(!!data.uris!['file:///somepath/here']);\n\t\tassert.ok(!!data.uris!['file:///somepath/here2']);\n\t});\n\n\ttest('NPM script explorer running a script from the hover does not work #65561', function () {\n\n\t\tlet data = MarkdownString.from('*hello* [click](command:npm.runScriptFromHover?%7B%22documentUri%22%3A%7B%22%24mid%22%3A1%2C%22external%22%3A%22file%3A%2F%2F%2Fc%253A%2Ffoo%2Fbaz.ex%22%2C%22path%22%3A%22%2Fc%3A%2Ffoo%2Fbaz.ex%22%2C%22scheme%22%3A%22file%22%7D%2C%22script%22%3A%22dev%22%7D)');\n\t\t// assert that both uri get extracted but that the latter is only decoded once...\n\t\tassert.strictEqual(size(data.uris!), 2);\n\t\tforEach(data.uris!, entry => {\n\t\t\tif (entry.value.scheme === 'file') {\n\t\t\t\tassert.ok(URI.revive(entry.value).toString().indexOf('file:///c%3A') === 0);\n\t\t\t} else {\n\t\t\t\tassert.strictEqual(entry.value.scheme, 'command');\n\t\t\t}\n\t\t});\n\t});\n});\n"]}