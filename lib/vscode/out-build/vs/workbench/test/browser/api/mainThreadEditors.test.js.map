{"version":3,"file":"mainThreadEditors.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/test/browser/api/mainThreadEditors.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { MainThreadDocumentsAndEditors } from 'vs/workbench/api/browser/mainThreadDocumentsAndEditors';\nimport { SingleProxyRPCProtocol, TestRPCProtocol } from './testRPCProtocol';\nimport { TestConfigurationService } from 'vs/platform/configuration/test/common/testConfigurationService';\nimport { ModelServiceImpl } from 'vs/editor/common/services/modelServiceImpl';\nimport { TestCodeEditorService } from 'vs/editor/test/browser/editorTestServices';\nimport { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';\nimport { ExtHostDocumentsAndEditorsShape, ExtHostContext, ExtHostDocumentsShape, IWorkspaceTextEditDto, WorkspaceEditType } from 'vs/workbench/api/common/extHost.protocol';\nimport { mock } from 'vs/base/test/common/mock';\nimport { Event } from 'vs/base/common/event';\nimport { MainThreadTextEditors } from 'vs/workbench/api/browser/mainThreadEditors';\nimport { URI } from 'vs/base/common/uri';\nimport { Range } from 'vs/editor/common/core/range';\nimport { Position } from 'vs/editor/common/core/position';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { EditOperation } from 'vs/editor/common/core/editOperation';\nimport { TestFileService, TestEditorService, TestEditorGroupsService, TestEnvironmentService, TestLifecycleService } from 'vs/workbench/test/browser/workbenchTestServices';\nimport { BulkEditService } from 'vs/workbench/contrib/bulkEdit/browser/bulkEditService';\nimport { NullLogService, ILogService } from 'vs/platform/log/common/log';\nimport { ITextModelService, IResolvedTextEditorModel } from 'vs/editor/common/services/resolverService';\nimport { IReference, ImmortalReference } from 'vs/base/common/lifecycle';\nimport { IPanelService } from 'vs/workbench/services/panel/common/panelService';\nimport { LabelService } from 'vs/workbench/services/label/common/labelService';\nimport { TestThemeService } from 'vs/platform/theme/test/common/testThemeService';\nimport { IEditorWorkerService } from 'vs/editor/common/services/editorWorkerService';\nimport { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { InstantiationService } from 'vs/platform/instantiation/common/instantiationService';\nimport { IBulkEditService } from 'vs/editor/browser/services/bulkEditService';\nimport { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { ILabelService } from 'vs/platform/label/common/label';\nimport { IWorkingCopyFileService, IMoveOperation, IDeleteOperation, ICopyOperation, ICreateFileOperation, ICreateOperation } from 'vs/workbench/services/workingCopy/common/workingCopyFileService';\nimport { UndoRedoService } from 'vs/platform/undoRedo/common/undoRedoService';\nimport { TestDialogService } from 'vs/platform/dialogs/test/common/testDialogService';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { IUndoRedoService } from 'vs/platform/undoRedo/common/undoRedo';\nimport { TestNotificationService } from 'vs/platform/notification/test/common/testNotificationService';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { TestTextResourcePropertiesService, TestContextService } from 'vs/workbench/test/common/workbenchTestServices';\nimport { IUriIdentityService } from 'vs/workbench/services/uriIdentity/common/uriIdentity';\nimport { extUri } from 'vs/base/common/resources';\nimport { ITextSnapshot } from 'vs/editor/common/model';\nimport { ILifecycleService } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\n\nsuite('MainThreadEditors', () => {\n\n\tconst resource = URI.parse('foo:bar');\n\n\tlet modelService: IModelService;\n\tlet editors: MainThreadTextEditors;\n\n\tconst movedResources = new Map<URI, URI>();\n\tconst copiedResources = new Map<URI, URI>();\n\tconst createdResources = new Set<URI>();\n\tconst deletedResources = new Set<URI>();\n\n\tsetup(() => {\n\n\t\tmovedResources.clear();\n\t\tcopiedResources.clear();\n\t\tcreatedResources.clear();\n\t\tdeletedResources.clear();\n\n\n\t\tconst configService = new TestConfigurationService();\n\t\tconst dialogService = new TestDialogService();\n\t\tconst notificationService = new TestNotificationService();\n\t\tconst undoRedoService = new UndoRedoService(dialogService, notificationService);\n\t\tmodelService = new ModelServiceImpl(configService, new TestTextResourcePropertiesService(configService), new TestThemeService(), new NullLogService(), undoRedoService);\n\n\n\t\tconst services = new ServiceCollection();\n\t\tservices.set(IBulkEditService, new SyncDescriptor(BulkEditService));\n\t\tservices.set(ILabelService, new SyncDescriptor(LabelService));\n\t\tservices.set(ILogService, new NullLogService());\n\t\tservices.set(IWorkspaceContextService, new TestContextService());\n\t\tservices.set(IEnvironmentService, TestEnvironmentService);\n\t\tservices.set(IWorkbenchEnvironmentService, TestEnvironmentService);\n\t\tservices.set(IConfigurationService, configService);\n\t\tservices.set(IDialogService, dialogService);\n\t\tservices.set(INotificationService, notificationService);\n\t\tservices.set(IUndoRedoService, undoRedoService);\n\t\tservices.set(IModelService, modelService);\n\t\tservices.set(ICodeEditorService, new TestCodeEditorService());\n\t\tservices.set(IFileService, new TestFileService());\n\t\tservices.set(IEditorService, new TestEditorService());\n\t\tservices.set(ILifecycleService, new TestLifecycleService());\n\t\tservices.set(IEditorGroupsService, new TestEditorGroupsService());\n\t\tservices.set(ITextFileService, new class extends mock<ITextFileService>() {\n\t\t\toverride isDirty() { return false; }\n\t\t\toverride files = <any>{\n\t\t\t\tonDidSave: Event.None,\n\t\t\t\tonDidRevert: Event.None,\n\t\t\t\tonDidChangeDirty: Event.None\n\t\t\t};\n\t\t\toverride create(operations: { resource: URI }[]) {\n\t\t\t\tfor (const o of operations) {\n\t\t\t\t\tcreatedResources.add(o.resource);\n\t\t\t\t}\n\t\t\t\treturn Promise.resolve(Object.create(null));\n\t\t\t}\n\t\t\toverride async getEncodedReadable(resource: URI, value?: string | ITextSnapshot): Promise<any> {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t});\n\t\tservices.set(IWorkingCopyFileService, new class extends mock<IWorkingCopyFileService>() {\n\t\t\toverride onDidRunWorkingCopyFileOperation = Event.None;\n\t\t\toverride createFolder(operations: ICreateOperation[]): any {\n\t\t\t\tthis.create(operations);\n\t\t\t}\n\t\t\toverride create(operations: ICreateFileOperation[]) {\n\t\t\t\tfor (const operation of operations) {\n\t\t\t\t\tcreatedResources.add(operation.resource);\n\t\t\t\t}\n\t\t\t\treturn Promise.resolve(Object.create(null));\n\t\t\t}\n\t\t\toverride move(operations: IMoveOperation[]) {\n\t\t\t\tconst { source, target } = operations[0].file;\n\t\t\t\tmovedResources.set(source, target);\n\t\t\t\treturn Promise.resolve(Object.create(null));\n\t\t\t}\n\t\t\toverride copy(operations: ICopyOperation[]) {\n\t\t\t\tconst { source, target } = operations[0].file;\n\t\t\t\tcopiedResources.set(source, target);\n\t\t\t\treturn Promise.resolve(Object.create(null));\n\t\t\t}\n\t\t\toverride delete(operations: IDeleteOperation[]) {\n\t\t\t\tfor (const operation of operations) {\n\t\t\t\t\tdeletedResources.add(operation.resource);\n\t\t\t\t}\n\t\t\t\treturn Promise.resolve(undefined);\n\t\t\t}\n\t\t});\n\t\tservices.set(ITextModelService, new class extends mock<ITextModelService>() {\n\t\t\toverride createModelReference(resource: URI): Promise<IReference<IResolvedTextEditorModel>> {\n\t\t\t\tconst textEditorModel = new class extends mock<IResolvedTextEditorModel>() {\n\t\t\t\t\toverride textEditorModel = modelService.getModel(resource)!;\n\t\t\t\t};\n\t\t\t\ttextEditorModel.isReadonly = () => false;\n\t\t\t\treturn Promise.resolve(new ImmortalReference(textEditorModel));\n\t\t\t}\n\t\t});\n\t\tservices.set(IEditorWorkerService, new class extends mock<IEditorWorkerService>() {\n\n\t\t});\n\t\tservices.set(IPanelService, new class extends mock<IPanelService>() implements IPanelService {\n\t\t\toverride onDidPanelOpen = Event.None;\n\t\t\toverride onDidPanelClose = Event.None;\n\t\t\toverride getActivePanel() {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t});\n\t\tservices.set(IUriIdentityService, new class extends mock<IUriIdentityService>() {\n\t\t\toverride get extUri() { return extUri; }\n\t\t});\n\n\t\tconst instaService = new InstantiationService(services);\n\n\t\tconst rpcProtocol = new TestRPCProtocol();\n\t\trpcProtocol.set(ExtHostContext.ExtHostDocuments, new class extends mock<ExtHostDocumentsShape>() {\n\t\t\toverride $acceptModelChanged(): void {\n\t\t\t}\n\t\t});\n\t\trpcProtocol.set(ExtHostContext.ExtHostDocumentsAndEditors, new class extends mock<ExtHostDocumentsAndEditorsShape>() {\n\t\t\toverride $acceptDocumentsAndEditorsDelta(): void {\n\t\t\t}\n\t\t});\n\n\t\tconst documentAndEditor = instaService.createInstance(MainThreadDocumentsAndEditors, rpcProtocol);\n\n\t\teditors = instaService.createInstance(MainThreadTextEditors, documentAndEditor, SingleProxyRPCProtocol(null));\n\t});\n\n\ttest(`applyWorkspaceEdit returns false if model is changed by user`, () => {\n\n\t\tlet model = modelService.createModel('something', null, resource);\n\n\t\tlet workspaceResourceEdit: IWorkspaceTextEditDto = {\n\t\t\t_type: WorkspaceEditType.Text,\n\t\t\tresource: resource,\n\t\t\tmodelVersionId: model.getVersionId(),\n\t\t\tedit: {\n\t\t\t\ttext: 'asdfg',\n\t\t\t\trange: new Range(1, 1, 1, 1)\n\t\t\t}\n\t\t};\n\n\t\t// Act as if the user edited the model\n\t\tmodel.applyEdits([EditOperation.insert(new Position(0, 0), 'something')]);\n\n\t\treturn editors.$tryApplyWorkspaceEdit({ edits: [workspaceResourceEdit] }).then((result) => {\n\t\t\tassert.strictEqual(result, false);\n\t\t});\n\t});\n\n\ttest(`issue #54773: applyWorkspaceEdit checks model version in race situation`, () => {\n\n\t\tlet model = modelService.createModel('something', null, resource);\n\n\t\tlet workspaceResourceEdit1: IWorkspaceTextEditDto = {\n\t\t\t_type: WorkspaceEditType.Text,\n\t\t\tresource: resource,\n\t\t\tmodelVersionId: model.getVersionId(),\n\t\t\tedit: {\n\t\t\t\ttext: 'asdfg',\n\t\t\t\trange: new Range(1, 1, 1, 1)\n\t\t\t}\n\t\t};\n\t\tlet workspaceResourceEdit2: IWorkspaceTextEditDto = {\n\t\t\t_type: WorkspaceEditType.Text,\n\t\t\tresource: resource,\n\t\t\tmodelVersionId: model.getVersionId(),\n\t\t\tedit: {\n\t\t\t\ttext: 'asdfg',\n\t\t\t\trange: new Range(1, 1, 1, 1)\n\t\t\t}\n\t\t};\n\n\t\tlet p1 = editors.$tryApplyWorkspaceEdit({ edits: [workspaceResourceEdit1] }).then((result) => {\n\t\t\t// first edit request succeeds\n\t\t\tassert.strictEqual(result, true);\n\t\t});\n\t\tlet p2 = editors.$tryApplyWorkspaceEdit({ edits: [workspaceResourceEdit2] }).then((result) => {\n\t\t\t// second edit request fails\n\t\t\tassert.strictEqual(result, false);\n\t\t});\n\t\treturn Promise.all([p1, p2]);\n\t});\n\n\ttest(`applyWorkspaceEdit with only resource edit`, () => {\n\t\treturn editors.$tryApplyWorkspaceEdit({\n\t\t\tedits: [\n\t\t\t\t{ _type: WorkspaceEditType.File, oldUri: resource, newUri: resource, options: undefined },\n\t\t\t\t{ _type: WorkspaceEditType.File, oldUri: undefined, newUri: resource, options: undefined },\n\t\t\t\t{ _type: WorkspaceEditType.File, oldUri: resource, newUri: undefined, options: undefined }\n\t\t\t]\n\t\t}).then((result) => {\n\t\t\tassert.strictEqual(result, true);\n\t\t\tassert.strictEqual(movedResources.get(resource), resource);\n\t\t\tassert.strictEqual(createdResources.has(resource), true);\n\t\t\tassert.strictEqual(deletedResources.has(resource), true);\n\t\t});\n\t});\n});\n"]}