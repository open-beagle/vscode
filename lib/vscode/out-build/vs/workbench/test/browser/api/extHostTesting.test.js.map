{"version":3,"file":"extHostTesting.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/test/browser/api/extHostTesting.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { URI } from 'vs/base/common/uri';\nimport { createDefaultDocumentTestRoot, TestItemFilteredWrapper } from 'vs/workbench/api/common/extHostTesting';\nimport * as convert from 'vs/workbench/api/common/extHostTypeConverters';\nimport { TestDiffOpType, TestItemExpandState } from 'vs/workbench/contrib/testing/common/testCollection';\nimport { stubTest, TestItemImpl, testStubs } from 'vs/workbench/contrib/testing/common/testStubs';\nimport { TestOwnedTestCollection, TestSingleUseCollection } from 'vs/workbench/contrib/testing/test/common/ownedTestCollection';\nimport { TestItem, TextDocument } from 'vscode';\n\nconst simplify = (item: TestItem<unknown>) => ({\n\tid: item.id,\n\tlabel: item.label,\n\turi: item.uri,\n\trange: item.range,\n\trunnable: item.runnable,\n\tdebuggable: item.debuggable,\n});\n\nconst assertTreesEqual = (a: TestItem<unknown> | undefined, b: TestItem<unknown> | undefined) => {\n\tif (!a) {\n\t\tthrow new assert.AssertionError({ message: 'Expected a to be defined', actual: a });\n\t}\n\n\tif (!b) {\n\t\tthrow new assert.AssertionError({ message: 'Expected b to be defined', actual: b });\n\t}\n\n\tassert.deepStrictEqual(simplify(a), simplify(b));\n\n\tconst aChildren = [...a.children.keys()].slice().sort();\n\tconst bChildren = [...b.children.keys()].slice().sort();\n\tassert.strictEqual(aChildren.length, bChildren.length, `expected ${a.label}.children.length == ${b.label}.children.length`);\n\taChildren.forEach(key => assertTreesEqual(a.children.get(key), b.children.get(key)));\n};\n\n// const assertTreeListEqual = (a: ReadonlyArray<TestItem>, b: ReadonlyArray<TestItem>) => {\n// \tassert.strictEqual(a.length, b.length, `expected a.length == n.length`);\n// \ta.forEach((_, i) => assertTreesEqual(a[i], b[i]));\n// };\n\n// class TestMirroredCollection extends MirroredTestCollection {\n// \tpublic changeEvent!: TestChangeEvent;\n\n// \tconstructor() {\n// \t\tsuper();\n// \t\tthis.onDidChangeTests(evt => this.changeEvent = evt);\n// \t}\n\n// \tpublic get length() {\n// \t\treturn this.items.size;\n// \t}\n// }\n\nsuite('ExtHost Testing', () => {\n\tlet single: TestSingleUseCollection;\n\tlet owned: TestOwnedTestCollection;\n\tsetup(() => {\n\t\towned = new TestOwnedTestCollection();\n\t\tsingle = owned.createForHierarchy(d => single.setDiff(d /* don't clear during testing */));\n\t});\n\n\tteardown(() => {\n\t\tsingle.dispose();\n\t\tassert.strictEqual(!owned.idToInternal?.size, true, 'expected owned ids to be empty after dispose');\n\t});\n\n\tsuite('OwnedTestCollection', () => {\n\t\ttest('adds a root recursively', () => {\n\t\t\tconst tests = testStubs.nested();\n\t\t\tsingle.addRoot(tests, 'pid');\n\t\t\tsingle.expand('id-root', Infinity);\n\t\t\tassert.deepStrictEqual(single.collectDiff(), [\n\t\t\t\t[\n\t\t\t\t\tTestDiffOpType.Add,\n\t\t\t\t\t{ src: { tree: 0, controller: 'pid' }, parent: null, expand: TestItemExpandState.BusyExpanding, item: { ...convert.TestItem.from(stubTest('root')) } }\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tTestDiffOpType.Add,\n\t\t\t\t\t{ src: { tree: 0, controller: 'pid' }, parent: 'id-root', expand: TestItemExpandState.Expandable, item: { ...convert.TestItem.from(stubTest('a')) } }\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tTestDiffOpType.Add,\n\t\t\t\t\t{ src: { tree: 0, controller: 'pid' }, parent: 'id-root', expand: TestItemExpandState.NotExpandable, item: convert.TestItem.from(stubTest('b')) }\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tTestDiffOpType.Update,\n\t\t\t\t\t{ extId: 'id-root', expand: TestItemExpandState.Expanded }\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tTestDiffOpType.Update,\n\t\t\t\t\t{ extId: 'id-a', expand: TestItemExpandState.BusyExpanding }\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tTestDiffOpType.Add,\n\t\t\t\t\t{ src: { tree: 0, controller: 'pid' }, parent: 'id-a', expand: TestItemExpandState.NotExpandable, item: convert.TestItem.from(stubTest('aa')) }\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tTestDiffOpType.Add,\n\t\t\t\t\t{ src: { tree: 0, controller: 'pid' }, parent: 'id-a', expand: TestItemExpandState.NotExpandable, item: convert.TestItem.from(stubTest('ab')) }\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tTestDiffOpType.Update,\n\t\t\t\t\t{ extId: 'id-a', expand: TestItemExpandState.Expanded }\n\t\t\t\t],\n\t\t\t]);\n\t\t});\n\n\t\ttest('no-ops if items not changed', () => {\n\t\t\tconst tests = testStubs.nested();\n\t\t\tsingle.addRoot(tests, 'pid');\n\t\t\tsingle.collectDiff();\n\t\t\tassert.deepStrictEqual(single.collectDiff(), []);\n\t\t});\n\n\t\ttest('watches property mutations', () => {\n\t\t\tconst tests = testStubs.nested();\n\t\t\tsingle.addRoot(tests, 'pid');\n\t\t\tsingle.expand('id-root', Infinity);\n\t\t\tsingle.collectDiff();\n\t\t\ttests.children.get('id-a')!.description = 'Hello world'; /* item a */\n\n\t\t\tassert.deepStrictEqual(single.collectDiff(), [\n\t\t\t\t[\n\t\t\t\t\tTestDiffOpType.Update,\n\t\t\t\t\t{ extId: 'id-a', item: { description: 'Hello world' } }],\n\t\t\t]);\n\t\t});\n\n\t\ttest('removes children', () => {\n\t\t\tconst tests = testStubs.nested();\n\t\t\tsingle.addRoot(tests, 'pid');\n\t\t\tsingle.expand('id-root', Infinity);\n\t\t\tsingle.collectDiff();\n\t\t\ttests.children.get('id-a')!.dispose();\n\n\t\t\tassert.deepStrictEqual(single.collectDiff(), [\n\t\t\t\t[TestDiffOpType.Remove, 'id-a'],\n\t\t\t]);\n\t\t\tassert.deepStrictEqual([...owned.idToInternal].map(n => n.item.extId).sort(), ['id-b', 'id-root']);\n\t\t\tassert.strictEqual(single.itemToInternal.size, 2);\n\t\t});\n\n\t\ttest('adds new children', () => {\n\t\t\tconst tests = testStubs.nested();\n\t\t\tsingle.addRoot(tests, 'pid');\n\t\t\tsingle.expand('id-root', Infinity);\n\t\t\tsingle.collectDiff();\n\t\t\tconst child = stubTest('ac');\n\t\t\ttests.children.get('id-a')!.addChild(child);\n\n\t\t\tassert.deepStrictEqual(single.collectDiff(), [\n\t\t\t\t[TestDiffOpType.Add, {\n\t\t\t\t\tsrc: { tree: 0, controller: 'pid' },\n\t\t\t\t\tparent: 'id-a',\n\t\t\t\t\texpand: TestItemExpandState.NotExpandable,\n\t\t\t\t\titem: convert.TestItem.from(child),\n\t\t\t\t}],\n\t\t\t]);\n\t\t\tassert.deepStrictEqual(\n\t\t\t\t[...owned.idToInternal].map(n => n.item.extId).sort(),\n\t\t\t\t['id-a', 'id-aa', 'id-ab', 'id-ac', 'id-b', 'id-root'],\n\t\t\t);\n\t\t\tassert.strictEqual(single.itemToInternal.size, 6);\n\t\t});\n\t});\n\n\n\tsuite('MirroredTestCollection', () => {\n\t\t// todo@connor4312: re-renable when we figure out what observing looks like we async children\n\t\t// \tlet m: TestMirroredCollection;\n\t\t// \tsetup(() => m = new TestMirroredCollection());\n\n\t\t// \ttest('mirrors creation of the root', () => {\n\t\t// \t\tconst tests = testStubs.nested();\n\t\t// \t\tsingle.addRoot(tests, 'pid');\n\t\t// \t\tsingle.expand('id-root', Infinity);\n\t\t// \t\tm.apply(single.collectDiff());\n\t\t// \t\tassertTreesEqual(m.rootTestItems[0], owned.getTestById('id-root')![1].actual);\n\t\t// \t\tassert.strictEqual(m.length, single.itemToInternal.size);\n\t\t// \t});\n\n\t\t// \ttest('mirrors node deletion', () => {\n\t\t// \t\tconst tests = testStubs.nested();\n\t\t// \t\tsingle.addRoot(tests, 'pid');\n\t\t// \t\tm.apply(single.collectDiff());\n\t\t// \t\tsingle.expand('id-root', Infinity);\n\t\t// \t\ttests.children!.splice(0, 1);\n\t\t// \t\tsingle.onItemChange(tests, 'pid');\n\t\t// \t\tsingle.expand('id-root', Infinity);\n\t\t// \t\tm.apply(single.collectDiff());\n\n\t\t// \t\tassertTreesEqual(m.rootTestItems[0], owned.getTestById('id-root')![1].actual);\n\t\t// \t\tassert.strictEqual(m.length, single.itemToInternal.size);\n\t\t// \t});\n\n\t\t// \ttest('mirrors node addition', () => {\n\t\t// \t\tconst tests = testStubs.nested();\n\t\t// \t\tsingle.addRoot(tests, 'pid');\n\t\t// \t\tm.apply(single.collectDiff());\n\t\t// \t\ttests.children![0].children!.push(stubTest('ac'));\n\t\t// \t\tsingle.onItemChange(tests, 'pid');\n\t\t// \t\tm.apply(single.collectDiff());\n\n\t\t// \t\tassertTreesEqual(m.rootTestItems[0], owned.getTestById('id-root')![1].actual);\n\t\t// \t\tassert.strictEqual(m.length, single.itemToInternal.size);\n\t\t// \t});\n\n\t\t// \ttest('mirrors node update', () => {\n\t\t// \t\tconst tests = testStubs.nested();\n\t\t// \t\tsingle.addRoot(tests, 'pid');\n\t\t// \t\tm.apply(single.collectDiff());\n\t\t// \t\ttests.children![0].description = 'Hello world'; /* item a */\n\t\t// \t\tsingle.onItemChange(tests, 'pid');\n\t\t// \t\tm.apply(single.collectDiff());\n\n\t\t// \t\tassertTreesEqual(m.rootTestItems[0], owned.getTestById('id-root')![1].actual);\n\t\t// \t});\n\n\t\t// \tsuite('MirroredChangeCollector', () => {\n\t\t// \t\tlet tests = testStubs.nested();\n\t\t// \t\tsetup(() => {\n\t\t// \t\t\ttests = testStubs.nested();\n\t\t// \t\t\tsingle.addRoot(tests, 'pid');\n\t\t// \t\t\tm.apply(single.collectDiff());\n\t\t// \t\t});\n\n\t\t// \t\ttest('creates change for root', () => {\n\t\t// \t\t\tassertTreeListEqual(m.changeEvent.added, [\n\t\t// \t\t\t\ttests,\n\t\t// \t\t\t\ttests.children[0],\n\t\t// \t\t\t\ttests.children![0].children![0],\n\t\t// \t\t\t\ttests.children![0].children![1],\n\t\t// \t\t\t\ttests.children[1],\n\t\t// \t\t\t]);\n\t\t// \t\t\tassertTreeListEqual(m.changeEvent.removed, []);\n\t\t// \t\t\tassertTreeListEqual(m.changeEvent.updated, []);\n\t\t// \t\t});\n\n\t\t// \t\ttest('creates change for delete', () => {\n\t\t// \t\t\tconst rm = tests.children.shift()!;\n\t\t// \t\t\tsingle.onItemChange(tests, 'pid');\n\t\t// \t\t\tm.apply(single.collectDiff());\n\n\t\t// \t\t\tassertTreeListEqual(m.changeEvent.added, []);\n\t\t// \t\t\tassertTreeListEqual(m.changeEvent.removed, [\n\t\t// \t\t\t\t{ ...rm },\n\t\t// \t\t\t\t{ ...rm.children![0] },\n\t\t// \t\t\t\t{ ...rm.children![1] },\n\t\t// \t\t\t]);\n\t\t// \t\t\tassertTreeListEqual(m.changeEvent.updated, []);\n\t\t// \t\t});\n\n\t\t// \t\ttest('creates change for update', () => {\n\t\t// \t\t\ttests.children[0].label = 'updated!';\n\t\t// \t\t\tsingle.onItemChange(tests, 'pid');\n\t\t// \t\t\tm.apply(single.collectDiff());\n\n\t\t// \t\t\tassertTreeListEqual(m.changeEvent.added, []);\n\t\t// \t\t\tassertTreeListEqual(m.changeEvent.removed, []);\n\t\t// \t\t\tassertTreeListEqual(m.changeEvent.updated, [tests.children[0]]);\n\t\t// \t\t});\n\n\t\t// \t\ttest('is a no-op if a node is added and removed', () => {\n\t\t// \t\t\tconst nested = testStubs.nested('id2-');\n\t\t// \t\t\ttests.children.push(nested);\n\t\t// \t\t\tsingle.onItemChange(tests, 'pid');\n\t\t// \t\t\ttests.children.pop();\n\t\t// \t\t\tsingle.onItemChange(tests, 'pid');\n\t\t// \t\t\tconst previousEvent = m.changeEvent;\n\t\t// \t\t\tm.apply(single.collectDiff());\n\t\t// \t\t\tassert.strictEqual(m.changeEvent, previousEvent);\n\t\t// \t\t});\n\n\t\t// \t\ttest('is a single-op if a node is added and changed', () => {\n\t\t// \t\t\tconst child = stubTest('c');\n\t\t// \t\t\ttests.children.push(child);\n\t\t// \t\t\tsingle.onItemChange(tests, 'pid');\n\t\t// \t\t\tchild.label = 'd';\n\t\t// \t\t\tsingle.onItemChange(tests, 'pid');\n\t\t// \t\t\tm.apply(single.collectDiff());\n\n\t\t// \t\t\tassertTreeListEqual(m.changeEvent.added, [child]);\n\t\t// \t\t\tassertTreeListEqual(m.changeEvent.removed, []);\n\t\t// \t\t\tassertTreeListEqual(m.changeEvent.updated, []);\n\t\t// \t\t});\n\n\t\t// \t\ttest('gets the common ancestor (1)', () => {\n\t\t// \t\t\ttests.children![0].children![0].label = 'za';\n\t\t// \t\t\ttests.children![0].children![1].label = 'zb';\n\t\t// \t\t\tsingle.onItemChange(tests, 'pid');\n\t\t// \t\t\tm.apply(single.collectDiff());\n\n\t\t// \t\t});\n\n\t\t// \t\ttest('gets the common ancestor (2)', () => {\n\t\t// \t\t\ttests.children![0].children![0].label = 'za';\n\t\t// \t\t\ttests.children![1].label = 'ab';\n\t\t// \t\t\tsingle.onItemChange(tests, 'pid');\n\t\t// \t\t\tm.apply(single.collectDiff());\n\t\t// \t\t});\n\t\t// \t});\n\n\t\tsuite('TestItemFilteredWrapper', () => {\n\t\t\tconst textDocumentFilter = {\n\t\t\t\turi: URI.parse('file:///foo.ts'),\n\t\t\t} as TextDocument;\n\n\t\t\tlet testsWithLocation: TestItemImpl;\n\t\t\tsetup(async () => {\n\t\t\t\ttestsWithLocation =\n\t\t\t\t\tstubTest('root', undefined, [\n\t\t\t\t\t\tstubTest('a', undefined, [\n\t\t\t\t\t\t\tstubTest('aa', undefined, undefined, URI.parse('file:///foo.ts')),\n\t\t\t\t\t\t\tstubTest('ab', undefined, undefined, URI.parse('file:///foo.ts'))\n\t\t\t\t\t\t], URI.parse('file:///foo.ts')),\n\t\t\t\t\t\tstubTest('b', undefined, [\n\t\t\t\t\t\t\tstubTest('ba', undefined, undefined, URI.parse('file:///bar.ts')),\n\t\t\t\t\t\t\tstubTest('bb', undefined, undefined, URI.parse('file:///bar.ts'))\n\t\t\t\t\t\t], URI.parse('file:///bar.ts')),\n\t\t\t\t\t\tstubTest('c', undefined, undefined, URI.parse('file:///baz.ts')),\n\t\t\t\t\t]);\n\n\t\t\t\t// todo: this is not used, don't think it's needed anymore\n\t\t\t\tawait createDefaultDocumentTestRoot<void>(\n\t\t\t\t\t{\n\t\t\t\t\t\tcreateWorkspaceTestRoot: () => testsWithLocation as TestItem<void>,\n\t\t\t\t\t\trunTests() {\n\t\t\t\t\t\t\tthrow new Error('no implemented');\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\ttextDocumentFilter,\n\t\t\t\t\tundefined,\n\t\t\t\t\tCancellationToken.None\n\t\t\t\t);\n\t\t\t});\n\n\t\t\tteardown(() => {\n\t\t\t\tTestItemFilteredWrapper.removeFilter(textDocumentFilter);\n\t\t\t});\n\n\t\t\ttest('gets all actual properties', () => {\n\t\t\t\tconst testItem = stubTest('test1');\n\t\t\t\tconst wrapper = TestItemFilteredWrapper.getWrapperForTestItem(testItem, textDocumentFilter);\n\n\t\t\t\tassert.strictEqual(testItem.debuggable, wrapper.debuggable);\n\t\t\t\tassert.strictEqual(testItem.description, wrapper.description);\n\t\t\t\tassert.strictEqual(testItem.label, wrapper.label);\n\t\t\t\tassert.strictEqual(testItem.uri, wrapper.uri);\n\t\t\t\tassert.strictEqual(testItem.runnable, wrapper.runnable);\n\t\t\t});\n\n\t\t\ttest('gets no children if nothing matches Uri filter', () => {\n\t\t\t\tconst tests = testStubs.nested();\n\t\t\t\tconst wrapper = TestItemFilteredWrapper.getWrapperForTestItem(tests, textDocumentFilter);\n\t\t\t\twrapper.resolveHandler?.(CancellationToken.None);\n\t\t\t\tassert.strictEqual(wrapper.children.size, 0);\n\t\t\t});\n\n\t\t\ttest('filter is applied to children', () => {\n\t\t\t\tconst wrapper = TestItemFilteredWrapper.getWrapperForTestItem(testsWithLocation, textDocumentFilter);\n\t\t\t\tassert.strictEqual(wrapper.label, 'root');\n\t\t\t\twrapper.resolveHandler?.(CancellationToken.None);\n\n\t\t\t\tconst children = [...wrapper.children.values()];\n\t\t\t\tassert.strictEqual(children.length, 1);\n\t\t\t\tassert.strictEqual(children[0] instanceof TestItemFilteredWrapper, true);\n\t\t\t\tassert.strictEqual(children[0].label, 'a');\n\t\t\t});\n\n\t\t\ttest('can get if node has matching filter', () => {\n\t\t\t\tconst rootWrapper = TestItemFilteredWrapper.getWrapperForTestItem(testsWithLocation, textDocumentFilter);\n\t\t\t\trootWrapper.resolveHandler?.(CancellationToken.None);\n\n\t\t\t\tconst invisible = testsWithLocation.children.get('id-b')!;\n\t\t\t\tconst invisibleWrapper = TestItemFilteredWrapper.getWrapperForTestItem(invisible, textDocumentFilter);\n\t\t\t\tconst visible = testsWithLocation.children.get('id-a')!;\n\t\t\t\tconst visibleWrapper = TestItemFilteredWrapper.getWrapperForTestItem(visible, textDocumentFilter);\n\n\t\t\t\t// The root is always visible\n\t\t\t\tassert.strictEqual(rootWrapper.hasNodeMatchingFilter, true);\n\t\t\t\tassert.strictEqual(invisibleWrapper.hasNodeMatchingFilter, false);\n\t\t\t\tassert.strictEqual(visibleWrapper.hasNodeMatchingFilter, true);\n\t\t\t});\n\n\t\t\ttest('can reset cached value of hasNodeMatchingFilter', () => {\n\t\t\t\tconst wrapper = TestItemFilteredWrapper.getWrapperForTestItem(testsWithLocation, textDocumentFilter);\n\t\t\t\twrapper.resolveHandler?.(CancellationToken.None);\n\n\t\t\t\tconst invisible = testsWithLocation.children.get('id-b')!;\n\t\t\t\tconst invisibleWrapper = TestItemFilteredWrapper.getWrapperForTestItem(invisible, textDocumentFilter);\n\n\t\t\t\tassert.strictEqual(wrapper.children.get('id-b'), undefined);\n\t\t\t\tassert.strictEqual(invisibleWrapper.hasNodeMatchingFilter, false);\n\n\t\t\t\tinvisible.addChild(stubTest('bc', undefined, undefined, URI.parse('file:///foo.ts')));\n\t\t\t\tassert.strictEqual(invisibleWrapper.hasNodeMatchingFilter, true);\n\t\t\t\tassert.strictEqual(invisibleWrapper.children.size, 1);\n\t\t\t\tassert.strictEqual(wrapper.children.get('id-b'), invisibleWrapper);\n\t\t\t});\n\n\t\t\t// test('can reset cached value of hasNodeMatchingFilter of parents up to visible parent', () => {\n\t\t\t// \tconst rootWrapper = TestItemFilteredWrapper.getWrapperForTestItem(testsWithLocation, textDocumentFilter);\n\n\t\t\t// \tconst invisibleParent = testsWithLocation.children.get('id-b')!;\n\t\t\t// \tconst invisibleParentWrapper = TestItemFilteredWrapper.getWrapperForTestItem(invisibleParent, textDocumentFilter);\n\t\t\t// \tconst invisible = invisibleParent.children.get('id-bb')!;\n\t\t\t// \tconst invisibleWrapper = TestItemFilteredWrapper.getWrapperForTestItem(invisible, textDocumentFilter);\n\n\t\t\t// \tassert.strictEqual(invisibleParentWrapper.hasNodeMatchingFilter, false);\n\t\t\t// \tinvisible.location = location1 as any;\n\t\t\t// \tassert.strictEqual(invisibleParentWrapper.hasNodeMatchingFilter, false);\n\t\t\t// \tinvisibleWrapper.reset();\n\t\t\t// \tassert.strictEqual(invisibleParentWrapper.hasNodeMatchingFilter, true);\n\n\t\t\t// \t// the root should be undefined due to the reset.\n\t\t\t// \tassert.strictEqual((rootWrapper as any).matchesFilter, undefined);\n\t\t\t// });\n\t\t});\n\t});\n});\n"]}