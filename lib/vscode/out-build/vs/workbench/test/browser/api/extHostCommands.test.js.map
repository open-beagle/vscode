{"version":3,"file":"extHostCommands.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/test/browser/api/extHostCommands.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { ExtHostCommands } from 'vs/workbench/api/common/extHostCommands';\nimport { MainThreadCommandsShape } from 'vs/workbench/api/common/extHost.protocol';\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { SingleProxyRPCProtocol } from './testRPCProtocol';\nimport { mock } from 'vs/base/test/common/mock';\nimport { NullLogService } from 'vs/platform/log/common/log';\n\nsuite('ExtHostCommands', function () {\n\n\ttest('dispose calls unregister', function () {\n\n\t\tlet lastUnregister: string;\n\n\t\tconst shape = new class extends mock<MainThreadCommandsShape>() {\n\t\t\toverride $registerCommand(id: string): void {\n\t\t\t\t//\n\t\t\t}\n\t\t\toverride $unregisterCommand(id: string): void {\n\t\t\t\tlastUnregister = id;\n\t\t\t}\n\t\t};\n\n\t\tconst commands = new ExtHostCommands(\n\t\t\tSingleProxyRPCProtocol(shape),\n\t\t\tnew NullLogService()\n\t\t);\n\t\tcommands.registerCommand(true, 'foo', (): any => { }).dispose();\n\t\tassert.strictEqual(lastUnregister!, 'foo');\n\t\tassert.strictEqual(CommandsRegistry.getCommand('foo'), undefined);\n\n\t});\n\n\ttest('dispose bubbles only once', function () {\n\n\t\tlet unregisterCounter = 0;\n\n\t\tconst shape = new class extends mock<MainThreadCommandsShape>() {\n\t\t\toverride $registerCommand(id: string): void {\n\t\t\t\t//\n\t\t\t}\n\t\t\toverride $unregisterCommand(id: string): void {\n\t\t\t\tunregisterCounter += 1;\n\t\t\t}\n\t\t};\n\n\t\tconst commands = new ExtHostCommands(\n\t\t\tSingleProxyRPCProtocol(shape),\n\t\t\tnew NullLogService()\n\t\t);\n\t\tconst reg = commands.registerCommand(true, 'foo', (): any => { });\n\t\treg.dispose();\n\t\treg.dispose();\n\t\treg.dispose();\n\t\tassert.strictEqual(unregisterCounter, 1);\n\t});\n\n\ttest('execute with retry', async function () {\n\n\t\tlet count = 0;\n\n\t\tconst shape = new class extends mock<MainThreadCommandsShape>() {\n\t\t\toverride $registerCommand(id: string): void {\n\t\t\t\t//\n\t\t\t}\n\t\t\toverride async $executeCommand<T>(id: string, args: any[], retry: boolean): Promise<T | undefined> {\n\t\t\t\tcount++;\n\t\t\t\tassert.strictEqual(retry, count === 1);\n\t\t\t\tif (count === 1) {\n\t\t\t\t\tassert.strictEqual(retry, true);\n\t\t\t\t\tthrow new Error('$executeCommand:retry');\n\t\t\t\t} else {\n\t\t\t\t\tassert.strictEqual(retry, false);\n\t\t\t\t\treturn <any>17;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tconst commands = new ExtHostCommands(\n\t\t\tSingleProxyRPCProtocol(shape),\n\t\t\tnew NullLogService()\n\t\t);\n\n\t\tconst result = await commands.executeCommand('fooo', [this, true]);\n\t\tassert.strictEqual(result, 17);\n\t\tassert.strictEqual(count, 2);\n\t});\n});\n"]}