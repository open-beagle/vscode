{"version":3,"file":"mainThreadDocumentContentProviders.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/test/browser/api/mainThreadDocumentContentProviders.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAYhG,KAAK,CAAC,oCAAoC,EAAE;QAE3C,IAAI,CAAC,+BAA+B,EAAE;YAErC,IAAI,GAAG,GAAG,SAAG,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;YAChC,IAAI,KAAK,GAAG,CAAA,GAAA,iCAAe,CAAA,CAAC,GAAG,EAAE,SAAS,EAAE,SAAS,EAAE,GAAG,CAAC,CAAC;YAE5D,IAAI,SAAS,GAAG,IAAI,uEAAkC,CAAC,IAAI,iCAAe,EAAE,EAAE,IAAK,EAAE,IAAK,EACzF,IAAI,KAAM,SAAQ,CAAA,GAAA,WAAI,CAAA,EAAiB;gBAC7B,QAAQ,CAAC,IAAS;oBAC1B,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;oBACpD,OAAO,KAAK,CAAC;gBACd,CAAC;aACD,EACD,IAAI,KAAM,SAAQ,CAAA,GAAA,WAAI,CAAA,EAAwB;gBACpC,uBAAuB,CAAC,IAAS,EAAE,IAA4B;oBACvE,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE,GAAG,CAAC,CAAC;oBAC1C,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBAC9B,CAAC;aACD,CACD,CAAC;YAEF,OAAO,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBAC5C,IAAI,cAAc,GAAG,CAAC,CAAC;gBACvB,KAAK,CAAC,kBAAkB,CAAC,CAAC,CAAC,EAAE;oBAC5B,cAAc,IAAI,CAAC,CAAC;oBACpB,IAAI;wBACH,MAAM,CAAC,EAAE,CAAC,cAAc,IAAI,CAAC,CAAC,CAAC;qBAC/B;oBAAC,OAAO,GAAG,EAAE;wBACb,MAAM,CAAC,GAAG,CAAC,CAAC;qBACZ;oBACD,IAAI,KAAK,CAAC,QAAQ,EAAE,KAAK,SAAS,EAAE;wBACnC,OAAO,EAAE,CAAC;qBACV;gBACF,CAAC,CAAC,CAAC;gBACH,SAAS,CAAC,wBAAwB,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;gBAChD,SAAS,CAAC,wBAAwB,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;YACpD,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { URI } from 'vs/base/common/uri';\nimport { MainThreadDocumentContentProviders } from 'vs/workbench/api/browser/mainThreadDocumentContentProviders';\nimport { createTextModel } from 'vs/editor/test/common/editorTestUtils';\nimport { mock } from 'vs/base/test/common/mock';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { IEditorWorkerService } from 'vs/editor/common/services/editorWorkerService';\nimport { TestRPCProtocol } from 'vs/workbench/test/browser/api/testRPCProtocol';\nimport { TextEdit } from 'vs/editor/common/modes';\n\nsuite('MainThreadDocumentContentProviders', function () {\n\n\ttest('events are processed properly', function () {\n\n\t\tlet uri = URI.parse('test:uri');\n\t\tlet model = createTextModel('1', undefined, undefined, uri);\n\n\t\tlet providers = new MainThreadDocumentContentProviders(new TestRPCProtocol(), null!, null!,\n\t\t\tnew class extends mock<IModelService>() {\n\t\t\t\toverride getModel(_uri: URI) {\n\t\t\t\t\tassert.strictEqual(uri.toString(), _uri.toString());\n\t\t\t\t\treturn model;\n\t\t\t\t}\n\t\t\t},\n\t\t\tnew class extends mock<IEditorWorkerService>() {\n\t\t\t\toverride computeMoreMinimalEdits(_uri: URI, data: TextEdit[] | undefined) {\n\t\t\t\t\tassert.strictEqual(model.getValue(), '1');\n\t\t\t\t\treturn Promise.resolve(data);\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\n\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\tlet expectedEvents = 1;\n\t\t\tmodel.onDidChangeContent(e => {\n\t\t\t\texpectedEvents -= 1;\n\t\t\t\ttry {\n\t\t\t\t\tassert.ok(expectedEvents >= 0);\n\t\t\t\t} catch (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t}\n\t\t\t\tif (model.getValue() === '1\\n2\\n3') {\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t});\n\t\t\tproviders.$onVirtualDocumentChange(uri, '1\\n2');\n\t\t\tproviders.$onVirtualDocumentChange(uri, '1\\n2\\n3');\n\t\t});\n\t});\n});\n"]}