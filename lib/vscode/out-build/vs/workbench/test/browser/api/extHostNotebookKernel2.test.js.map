{"version":3,"file":"extHostNotebookKernel2.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/test/browser/api/extHostNotebookKernel2.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { TestRPCProtocol } from 'vs/workbench/test/browser/api/testRPCProtocol';\nimport { ExtHostNotebookController } from 'vs/workbench/api/common/extHostNotebook';\nimport { nullExtensionDescription } from 'vs/workbench/services/extensions/common/extensions';\nimport { mock } from 'vs/workbench/test/common/workbenchTestServices';\nimport { INotebookKernelDto2, MainContext, MainThreadCommandsShape, MainThreadNotebookKernelsShape } from 'vs/workbench/api/common/extHost.protocol';\nimport { ExtHostNotebookKernels } from 'vs/workbench/api/common/extHostNotebookKernels';\nimport { ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\nimport { IExtHostInitDataService } from 'vs/workbench/api/common/extHostInitDataService';\n\nsuite('NotebookKernel', function () {\n\n\tlet rpcProtocol: TestRPCProtocol;\n\tlet extHostNotebookKernels: ExtHostNotebookKernels;\n\n\tconst kernelData = new Map<number, INotebookKernelDto2>();\n\n\tsetup(async function () {\n\n\t\tkernelData.clear();\n\n\t\trpcProtocol = new TestRPCProtocol();\n\t\trpcProtocol.set(MainContext.MainThreadCommands, new class extends mock<MainThreadCommandsShape>() {\n\t\t\toverride $registerCommand() { }\n\t\t});\n\t\trpcProtocol.set(MainContext.MainThreadNotebookKernels, new class extends mock<MainThreadNotebookKernelsShape>() {\n\t\t\toverride async $addKernel(handle: number, data: INotebookKernelDto2): Promise<void> {\n\t\t\t\tkernelData.set(handle, data);\n\t\t\t}\n\t\t\toverride $removeKernel(handle: number) {\n\t\t\t\tkernelData.delete(handle);\n\t\t\t}\n\t\t\toverride $updateKernel(handle: number, data: Partial<INotebookKernelDto2>) {\n\t\t\t\tassert.strictEqual(kernelData.has(handle), true);\n\t\t\t\tkernelData.set(handle, { ...kernelData.get(handle)!, ...data, });\n\t\t\t}\n\t\t});\n\n\t\textHostNotebookKernels = new ExtHostNotebookKernels(\n\t\t\trpcProtocol,\n\t\t\tnew class extends mock<IExtHostInitDataService>() { },\n\t\t\tnew class extends mock<ExtHostNotebookController>() { }\n\t\t);\n\t});\n\n\ttest('create/dispose kernel', async function () {\n\n\t\tconst kernel = extHostNotebookKernels.createNotebookController(nullExtensionDescription, 'foo', '*', 'Foo');\n\n\t\tassert.throws(() => (<any>kernel).id = 'dd');\n\t\tassert.throws(() => (<any>kernel).viewType = 'dd');\n\n\t\tassert.ok(kernel);\n\t\tassert.strictEqual(kernel.id, 'foo');\n\t\tassert.strictEqual(kernel.label, 'Foo');\n\t\tassert.strictEqual(kernel.viewType, '*');\n\n\t\tawait rpcProtocol.sync();\n\t\tassert.strictEqual(kernelData.size, 1);\n\n\t\tlet [first] = kernelData.values();\n\t\tassert.strictEqual(first.id, 'nullExtensionDescription/foo');\n\t\tassert.strictEqual(ExtensionIdentifier.equals(first.extensionId, nullExtensionDescription.identifier), true);\n\t\tassert.strictEqual(first.label, 'Foo');\n\t\tassert.strictEqual(first.viewType, '*');\n\n\t\tkernel.dispose();\n\t\tawait rpcProtocol.sync();\n\t\tassert.strictEqual(kernelData.size, 0);\n\t});\n\n\ttest('update kernel', async function () {\n\n\t\tconst kernel = extHostNotebookKernels.createNotebookController(nullExtensionDescription, 'foo', '*', 'Foo');\n\n\t\tawait rpcProtocol.sync();\n\t\tassert.ok(kernel);\n\n\t\tlet [first] = kernelData.values();\n\t\tassert.strictEqual(first.id, 'nullExtensionDescription/foo');\n\t\tassert.strictEqual(first.label, 'Foo');\n\n\t\tkernel.label = 'Far';\n\t\tassert.strictEqual(kernel.label, 'Far');\n\n\t\tawait rpcProtocol.sync();\n\t\t[first] = kernelData.values();\n\t\tassert.strictEqual(first.id, 'nullExtensionDescription/foo');\n\t\tassert.strictEqual(first.label, 'Far');\n\t});\n});\n"]}