{"version":3,"file":"extHostMessagerService.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/test/browser/api/extHostMessagerService.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAYhG,MAAM,kBAAkB,GAAG,IAAI;QAE9B,IAAI;YACH,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;QACpC,CAAC;QAED,OAAO;YACN,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;QACpC,CAAC;QAED,KAAK;YACJ,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;QACpC,CAAC;QAED,KAAK;YACJ,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;QACpC,CAAC;KACD,CAAC;IAEF,MAAM,mBAAmB,GAAoB;QAC5C,aAAa,EAAE,SAAS;QACxB,oBAAoB,EAAE,GAAG,EAAE,CAAC,sBAAU,CAAC,IAAI;QAC3C,mBAAmB,EAAE,GAAG,EAAE,CAAC,sBAAU,CAAC,IAAI;QAC1C,cAAc,EAAE,CAAC,SAAiB,EAAE,GAAG,IAAW,EAAgB,EAAE;YACnE,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QACnC,CAAC;KACD,CAAC;IAEF,MAAM,wBAAwB,GAAG,IAAI;QAAA;YAEpC,yBAAoB,GAAyB,aAAK,CAAC,IAAI,CAAC;YACxD,4BAAuB,GAAyB,aAAK,CAAC,IAAI,CAAC;QAsB5D,CAAC;QArBA,MAAM,CAAC,GAAG,IAAW;YACpB,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;QACpC,CAAC;QACD,IAAI,CAAC,GAAG,IAAW;YAClB,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;QACpC,CAAC;QACD,IAAI,CAAC,GAAG,IAAW;YAClB,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;QACpC,CAAC;QACD,KAAK,CAAC,GAAG,IAAW;YACnB,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;QACpC,CAAC;QACD,MAAM,CAAC,QAAkB,EAAE,OAAe,EAAE,OAAwB,EAAE,OAAwB;YAC7F,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;QACpC,CAAC;QACD,MAAM,CAAC,OAAuB,EAAE,OAA+B;YAC9D,OAAO,sBAAU,CAAC,IAAI,CAAC;QACxB,CAAC;QACD,SAAS,CAAC,MAA2B;YACpC,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;QACrC,CAAC;KACD,CAAC;IAEF,MAAM,wBAAwB;QAG7B,YAAoB,UAAiD;YAAjD,eAAU,GAAV,UAAU,CAAuC;YAGrE,yBAAoB,GAAyB,aAAK,CAAC,IAAI,CAAC;YACxD,4BAAuB,GAAyB,aAAK,CAAC,IAAI,CAAC;QAH3D,CAAC;QAID,MAAM,CAAC,YAA2B;YACjC,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;YAE9B,OAAO,IAAI,+BAAgB,EAAE,CAAC;QAC/B,CAAC;QACD,IAAI,CAAC,OAAY;YAChB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC5C,CAAC;QACD,IAAI,CAAC,OAAY;YAChB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC5C,CAAC;QACD,KAAK,CAAC,OAAY;YACjB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC5C,CAAC;QACD,MAAM,CAAC,QAAkB,EAAE,OAAe,EAAE,OAAwB,EAAE,OAAwB;YAC7F,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;QAC3C,CAAC;QACD,MAAM,CAAC,OAAe,EAAE,OAA+B;YACtD,OAAO,sBAAU,CAAC,IAAI,CAAC;QACxB,CAAC;QACD,SAAS,CAAC,MAA2B;YACpC,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC5C,CAAC;KACD;IAED,KAAK,CAAC,uBAAuB,EAAE;QAE9B,IAAI,CAAC,2BAA2B,EAAE,KAAK;YAEtC,IAAI,OAAO,GAAG,IAAI,mDAAwB,CAAC,IAAK,EAAE,IAAI,wBAAwB,CAAC,YAAY,CAAC,EAAE;gBAC7F,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,OAAQ,CAAC,OAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;gBAC7D,QAAQ,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC,YAAY,CAAC,OAAQ,CAAC,OAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;YACtE,CAAC,CAAC,EAAE,mBAAmB,EAAE,kBAAkB,CAAC,CAAC;YAE7C,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,YAAY,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,iBAAiB,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;YACnH,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;QAEH,KAAK,CAAC,OAAO,EAAE,GAAG,EAAE;YACnB,IAAI,CAAC,sBAAsB,EAAE,KAAK,IAAI,EAAE;gBACvC,MAAM,OAAO,GAAG,IAAI,mDAAwB,CAAC,IAAK,EAAE,wBAAwB,EAAE,mBAAmB,EAAE,IAAI,KAAM,SAAQ,CAAA,GAAA,WAAI,CAAA,EAAkB;oBACjI,IAAI,CAAC,QAAkB,EAAE,OAAe,EAAE,OAAiB;wBACnE,MAAM,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;wBAChC,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;wBACjC,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;wBACtC,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;wBACzC,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;oBACvC,CAAC;iBACiB,CAAC,CAAC;gBAErB,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,YAAY,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,iBAAiB,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;gBACjI,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;YAChC,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;gBACnD,MAAM,OAAO,GAAG,IAAI,mDAAwB,CAAC,IAAK,EAAE,wBAAwB,EAAE,mBAAmB,EAAE,IAAI,KAAM,SAAQ,CAAA,GAAA,WAAI,CAAA,EAAkB;oBACjI,IAAI;wBACZ,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;oBACvC,CAAC;iBACiB,CAAC,CAAC;gBAErB,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,YAAY,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,iBAAiB,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;gBACjI,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;YACvC,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;gBACtD,MAAM,OAAO,GAAG,IAAI,mDAAwB,CAAC,IAAK,EAAE,wBAAwB,EAAE,mBAAmB,EAAE,IAAI,KAAM,SAAQ,CAAA,GAAA,WAAI,CAAA,EAAkB;oBACjI,IAAI,CAAC,QAAkB,EAAE,OAAe,EAAE,OAAiB;wBACnE,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;wBACtC,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;oBACvC,CAAC;iBACiB,CAAC,CAAC;gBAErB,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,YAAY,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,iBAAiB,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;gBAChI,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;YAChC,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { MainThreadMessageService } from 'vs/workbench/api/browser/mainThreadMessageService';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { INotificationService, INotification, NoOpNotification, INotificationHandle, Severity, IPromptChoice, IPromptOptions, IStatusMessageOptions, NotificationsFilter } from 'vs/platform/notification/common/notification';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { mock } from 'vs/base/test/common/mock';\nimport { IDisposable, Disposable } from 'vs/base/common/lifecycle';\nimport * as platform from 'vs/base/common/platform';\nimport { Event } from 'vs/base/common/event';\n\nconst emptyDialogService = new class implements IDialogService {\n\tdeclare readonly _serviceBrand: undefined;\n\tshow(): never {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tconfirm(): never {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tabout(): never {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tinput(): never {\n\t\tthrow new Error('not implemented');\n\t}\n};\n\nconst emptyCommandService: ICommandService = {\n\t_serviceBrand: undefined,\n\tonWillExecuteCommand: () => Disposable.None,\n\tonDidExecuteCommand: () => Disposable.None,\n\texecuteCommand: (commandId: string, ...args: any[]): Promise<any> => {\n\t\treturn Promise.resolve(undefined);\n\t}\n};\n\nconst emptyNotificationService = new class implements INotificationService {\n\tdeclare readonly _serviceBrand: undefined;\n\tonDidAddNotification: Event<INotification> = Event.None;\n\tonDidRemoveNotification: Event<INotification> = Event.None;\n\tnotify(...args: any[]): never {\n\t\tthrow new Error('not implemented');\n\t}\n\tinfo(...args: any[]): never {\n\t\tthrow new Error('not implemented');\n\t}\n\twarn(...args: any[]): never {\n\t\tthrow new Error('not implemented');\n\t}\n\terror(...args: any[]): never {\n\t\tthrow new Error('not implemented');\n\t}\n\tprompt(severity: Severity, message: string, choices: IPromptChoice[], options?: IPromptOptions): INotificationHandle {\n\t\tthrow new Error('not implemented');\n\t}\n\tstatus(message: string | Error, options?: IStatusMessageOptions): IDisposable {\n\t\treturn Disposable.None;\n\t}\n\tsetFilter(filter: NotificationsFilter): void {\n\t\tthrow new Error('not implemented.');\n\t}\n};\n\nclass EmptyNotificationService implements INotificationService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(private withNotify: (notification: INotification) => void) {\n\t}\n\n\tonDidAddNotification: Event<INotification> = Event.None;\n\tonDidRemoveNotification: Event<INotification> = Event.None;\n\tnotify(notification: INotification): INotificationHandle {\n\t\tthis.withNotify(notification);\n\n\t\treturn new NoOpNotification();\n\t}\n\tinfo(message: any): void {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\twarn(message: any): void {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\terror(message: any): void {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tprompt(severity: Severity, message: string, choices: IPromptChoice[], options?: IPromptOptions): INotificationHandle {\n\t\tthrow new Error('Method not implemented');\n\t}\n\tstatus(message: string, options?: IStatusMessageOptions): IDisposable {\n\t\treturn Disposable.None;\n\t}\n\tsetFilter(filter: NotificationsFilter): void {\n\t\tthrow new Error('Method not implemented.');\n\t}\n}\n\nsuite('ExtHostMessageService', function () {\n\n\ttest('propagte handle on select', async function () {\n\n\t\tlet service = new MainThreadMessageService(null!, new EmptyNotificationService(notification => {\n\t\t\tassert.strictEqual(notification.actions!.primary!.length, 1);\n\t\t\tplatform.setImmediate(() => notification.actions!.primary![0].run());\n\t\t}), emptyCommandService, emptyDialogService);\n\n\t\tconst handle = await service.$showMessage(1, 'h', {}, [{ handle: 42, title: 'a thing', isCloseAffordance: true }]);\n\t\tassert.strictEqual(handle, 42);\n\t});\n\n\tsuite('modal', () => {\n\t\ttest('calls dialog service', async () => {\n\t\t\tconst service = new MainThreadMessageService(null!, emptyNotificationService, emptyCommandService, new class extends mock<IDialogService>() {\n\t\t\t\toverride show(severity: Severity, message: string, buttons: string[]) {\n\t\t\t\t\tassert.strictEqual(severity, 1);\n\t\t\t\t\tassert.strictEqual(message, 'h');\n\t\t\t\t\tassert.strictEqual(buttons.length, 2);\n\t\t\t\t\tassert.strictEqual(buttons[1], 'Cancel');\n\t\t\t\t\treturn Promise.resolve({ choice: 0 });\n\t\t\t\t}\n\t\t\t} as IDialogService);\n\n\t\t\tconst handle = await service.$showMessage(1, 'h', { modal: true }, [{ handle: 42, title: 'a thing', isCloseAffordance: false }]);\n\t\t\tassert.strictEqual(handle, 42);\n\t\t});\n\n\t\ttest('returns undefined when cancelled', async () => {\n\t\t\tconst service = new MainThreadMessageService(null!, emptyNotificationService, emptyCommandService, new class extends mock<IDialogService>() {\n\t\t\t\toverride show() {\n\t\t\t\t\treturn Promise.resolve({ choice: 1 });\n\t\t\t\t}\n\t\t\t} as IDialogService);\n\n\t\t\tconst handle = await service.$showMessage(1, 'h', { modal: true }, [{ handle: 42, title: 'a thing', isCloseAffordance: false }]);\n\t\t\tassert.strictEqual(handle, undefined);\n\t\t});\n\n\t\ttest('hides Cancel button when not needed', async () => {\n\t\t\tconst service = new MainThreadMessageService(null!, emptyNotificationService, emptyCommandService, new class extends mock<IDialogService>() {\n\t\t\t\toverride show(severity: Severity, message: string, buttons: string[]) {\n\t\t\t\t\tassert.strictEqual(buttons.length, 1);\n\t\t\t\t\treturn Promise.resolve({ choice: 0 });\n\t\t\t\t}\n\t\t\t} as IDialogService);\n\n\t\t\tconst handle = await service.$showMessage(1, 'h', { modal: true }, [{ handle: 42, title: 'a thing', isCloseAffordance: true }]);\n\t\t\tassert.strictEqual(handle, 42);\n\t\t});\n\t});\n});\n"]}