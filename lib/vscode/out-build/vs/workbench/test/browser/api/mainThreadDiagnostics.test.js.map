{"version":3,"file":"mainThreadDiagnostics.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/test/browser/api/mainThreadDiagnostics.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAYhG,KAAK,CAAC,uBAAuB,EAAE;QAE9B,IAAI,aAA4B,CAAC;QAEjC,KAAK,CAAC;YACL,aAAa,GAAG,IAAI,6BAAa,EAAE,CAAC;QACrC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,0BAA0B,EAAE;YAEhC,IAAI,IAAI,GAAG,IAAI,6CAAqB,CACnC,IAAI;gBAAA;oBACH,oBAAe,GAAG,EAAE,CAAC;oBACrB,sBAAiB,wBAAkC;gBASpD,CAAC;gBARA,gBAAgB,KAAK,CAAC;gBACtB,GAAG,CAAC,CAAM,IAAS,OAAO,IAAI,CAAC,CAAC,CAAC;gBACjC,QAAQ;oBACP,OAAO;wBACN,oBAAoB,KAAK,CAAC;qBAC1B,CAAC;gBACH,CAAC;gBACD,KAAK,KAAU,OAAO,IAAI,CAAC,CAAC,CAAC;aAC7B,EACD,aAAa,EACb,IAAI,KAAM,SAAQ,CAAA,GAAA,4BAAI,CAAA,EAAuB;gBACnC,cAAc,CAAC,GAAQ,IAAI,OAAO,GAAG,CAAC,CAAC,CAAC;aACjD,CACD,CAAC;YAEF,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC,CAAC,SAAG,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;4BACzC,IAAI,EAAE,KAAK;4BACX,eAAe,EAAE,CAAC;4BAClB,WAAW,EAAE,CAAC;4BACd,aAAa,EAAE,CAAC;4BAChB,SAAS,EAAE,CAAC;4BACZ,OAAO,EAAE,OAAO;4BAChB,QAAQ,EAAE,CAAC;4BACX,MAAM,EAAE,IAAI;yBACZ,CAAC,CAAC,CAAC,CAAC,CAAC;YAEN,MAAM,CAAC,WAAW,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACnD,IAAI,CAAC,OAAO,EAAE,CAAC;YACf,MAAM,CAAC,WAAW,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { MarkerService } from 'vs/platform/markers/common/markerService';\nimport { MainThreadDiagnostics } from 'vs/workbench/api/browser/mainThreadDiagnostics';\nimport { URI } from 'vs/base/common/uri';\nimport { IExtHostContext } from 'vs/workbench/api/common/extHost.protocol';\nimport { mock } from 'vs/workbench/test/common/workbenchTestServices';\nimport { IUriIdentityService } from 'vs/workbench/services/uriIdentity/common/uriIdentity';\nimport { ExtensionHostKind } from 'vs/workbench/services/extensions/common/extensions';\n\n\nsuite('MainThreadDiagnostics', function () {\n\n\tlet markerService: MarkerService;\n\n\tsetup(function () {\n\t\tmarkerService = new MarkerService();\n\t});\n\n\ttest('clear markers on dispose', function () {\n\n\t\tlet diag = new MainThreadDiagnostics(\n\t\t\tnew class implements IExtHostContext {\n\t\t\t\tremoteAuthority = '';\n\t\t\t\textensionHostKind = ExtensionHostKind.LocalProcess;\n\t\t\t\tassertRegistered() { }\n\t\t\t\tset(v: any): any { return null; }\n\t\t\t\tgetProxy(): any {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t$acceptMarkersChange() { }\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tdrain(): any { return null; }\n\t\t\t},\n\t\t\tmarkerService,\n\t\t\tnew class extends mock<IUriIdentityService>() {\n\t\t\t\toverride asCanonicalUri(uri: URI) { return uri; }\n\t\t\t}\n\t\t);\n\n\t\tdiag.$changeMany('foo', [[URI.file('a'), [{\n\t\t\tcode: '666',\n\t\t\tstartLineNumber: 1,\n\t\t\tstartColumn: 1,\n\t\t\tendLineNumber: 1,\n\t\t\tendColumn: 1,\n\t\t\tmessage: 'fffff',\n\t\t\tseverity: 1,\n\t\t\tsource: 'me'\n\t\t}]]]);\n\n\t\tassert.strictEqual(markerService.read().length, 1);\n\t\tdiag.dispose();\n\t\tassert.strictEqual(markerService.read().length, 0);\n\t});\n});\n"]}