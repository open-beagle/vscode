{"version":3,"file":"extHostBulkEdits.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/test/browser/api/extHostBulkEdits.test.ts"],"names":[],"mappings":";;;IAeA,KAAK,CAAC,qCAAqC,EAAE,GAAG,EAAE;QAEjD,MAAM,QAAQ,GAAG,SAAG,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QACtC,IAAI,SAA2B,CAAC;QAChC,IAAI,sBAAyC,CAAC;QAE9C,KAAK,CAAC,GAAG,EAAE;YACV,sBAAsB,GAAG,IAAK,CAAC;YAE/B,IAAI,WAAW,GAAG,IAAI,iCAAe,EAAE,CAAC;YACxC,WAAW,CAAC,GAAG,CAAC,8BAAW,CAAC,mBAAmB,EAAE,IAAI,KAAM,SAAQ,CAAA,GAAA,WAAI,CAAA,EAA4B;gBACzF,sBAAsB,CAAC,uBAA0C;oBACzE,sBAAsB,GAAG,uBAAuB,CAAC;oBACjD,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBAC9B,CAAC;aACD,CAAC,CAAC;YACH,MAAM,mBAAmB,GAAG,IAAI,uDAA0B,CAAC,CAAA,GAAA,wCAAsB,CAAA,CAAC,IAAI,CAAC,EAAE,IAAI,oBAAc,EAAE,CAAC,CAAC;YAC/G,mBAAmB,CAAC,+BAA+B,CAAC;gBACnD,cAAc,EAAE,CAAC;wBAChB,OAAO,EAAE,KAAK;wBACd,MAAM,EAAE,KAAK;wBACb,GAAG,EAAE,QAAQ;wBACb,SAAS,EAAE,IAAI;wBACf,KAAK,EAAE,CAAC,KAAK,CAAC;wBACd,GAAG,EAAE,IAAI;qBACT,CAAC;aACF,CAAC,CAAC;YACH,SAAS,GAAG,IAAI,mCAAgB,CAAC,WAAW,EAAE,mBAAmB,CAAC,CAAC;QACpE,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;YACxD,IAAI,IAAI,GAAG,IAAI,YAAY,CAAC,aAAa,EAAE,CAAC;YAC5C,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,YAAY,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;YACpE,MAAM,SAAS,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;YACzC,MAAM,CAAC,WAAW,CAAC,sBAAsB,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAC3D,MAAM,CAAC,KAAK,CAAC,GAAG,sBAAsB,CAAC,KAAK,CAAC;YAC7C,CAAA,GAAA,kBAAU,CAAA,CAAC,KAAK,CAAC,KAAK,iBAA2B,CAAC,CAAC;YACnD,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,sDAAsD,EAAE,KAAK,IAAI,EAAE;YACvE,IAAI,IAAI,GAAG,IAAI,YAAY,CAAC,aAAa,EAAE,CAAC;YAC5C,IAAI,CAAC,OAAO,CAAC,SAAG,CAAC,KAAK,CAAC,UAAU,CAAC,EAAE,IAAI,YAAY,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;YACjF,MAAM,SAAS,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;YACzC,MAAM,CAAC,WAAW,CAAC,sBAAsB,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAC3D,MAAM,CAAC,KAAK,CAAC,GAAG,sBAAsB,CAAC,KAAK,CAAC;YAC7C,CAAA,GAAA,kBAAU,CAAA,CAAC,KAAK,CAAC,KAAK,iBAA2B,CAAC,CAAC;YACnD,MAAM,CAAC,EAAE,CAAC,OAAO,KAAK,CAAC,cAAc,KAAK,WAAW,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;IAEJ,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as assert from 'assert';\nimport * as extHostTypes from 'vs/workbench/api/common/extHostTypes';\nimport { MainContext, IWorkspaceEditDto, WorkspaceEditType, MainThreadBulkEditsShape } from 'vs/workbench/api/common/extHost.protocol';\nimport { URI } from 'vs/base/common/uri';\nimport { mock } from 'vs/base/test/common/mock';\nimport { ExtHostDocumentsAndEditors } from 'vs/workbench/api/common/extHostDocumentsAndEditors';\nimport { SingleProxyRPCProtocol, TestRPCProtocol } from 'vs/workbench/test/browser/api/testRPCProtocol';\nimport { NullLogService } from 'vs/platform/log/common/log';\nimport { assertType } from 'vs/base/common/types';\nimport { ExtHostBulkEdits } from 'vs/workbench/api/common/extHostBulkEdits';\n\nsuite('ExtHostBulkEdits.applyWorkspaceEdit', () => {\n\n\tconst resource = URI.parse('foo:bar');\n\tlet bulkEdits: ExtHostBulkEdits;\n\tlet workspaceResourceEdits: IWorkspaceEditDto;\n\n\tsetup(() => {\n\t\tworkspaceResourceEdits = null!;\n\n\t\tlet rpcProtocol = new TestRPCProtocol();\n\t\trpcProtocol.set(MainContext.MainThreadBulkEdits, new class extends mock<MainThreadBulkEditsShape>() {\n\t\t\toverride $tryApplyWorkspaceEdit(_workspaceResourceEdits: IWorkspaceEditDto): Promise<boolean> {\n\t\t\t\tworkspaceResourceEdits = _workspaceResourceEdits;\n\t\t\t\treturn Promise.resolve(true);\n\t\t\t}\n\t\t});\n\t\tconst documentsAndEditors = new ExtHostDocumentsAndEditors(SingleProxyRPCProtocol(null), new NullLogService());\n\t\tdocumentsAndEditors.$acceptDocumentsAndEditorsDelta({\n\t\t\taddedDocuments: [{\n\t\t\t\tisDirty: false,\n\t\t\t\tmodeId: 'foo',\n\t\t\t\turi: resource,\n\t\t\t\tversionId: 1337,\n\t\t\t\tlines: ['foo'],\n\t\t\t\tEOL: '\\n',\n\t\t\t}]\n\t\t});\n\t\tbulkEdits = new ExtHostBulkEdits(rpcProtocol, documentsAndEditors);\n\t});\n\n\ttest('uses version id if document available', async () => {\n\t\tlet edit = new extHostTypes.WorkspaceEdit();\n\t\tedit.replace(resource, new extHostTypes.Range(0, 0, 0, 0), 'hello');\n\t\tawait bulkEdits.applyWorkspaceEdit(edit);\n\t\tassert.strictEqual(workspaceResourceEdits.edits.length, 1);\n\t\tconst [first] = workspaceResourceEdits.edits;\n\t\tassertType(first._type === WorkspaceEditType.Text);\n\t\tassert.strictEqual(first.modelVersionId, 1337);\n\t});\n\n\ttest('does not use version id if document is not available', async () => {\n\t\tlet edit = new extHostTypes.WorkspaceEdit();\n\t\tedit.replace(URI.parse('foo:bar2'), new extHostTypes.Range(0, 0, 0, 0), 'hello');\n\t\tawait bulkEdits.applyWorkspaceEdit(edit);\n\t\tassert.strictEqual(workspaceResourceEdits.edits.length, 1);\n\t\tconst [first] = workspaceResourceEdits.edits;\n\t\tassertType(first._type === WorkspaceEditType.Text);\n\t\tassert.ok(typeof first.modelVersionId === 'undefined');\n\t});\n\n});\n"]}