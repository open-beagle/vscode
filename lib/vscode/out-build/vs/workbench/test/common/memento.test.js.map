{"version":3,"file":"memento.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/test/common/memento.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { StorageScope, IStorageService, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { Memento } from 'vs/workbench/common/memento';\nimport { TestStorageService } from 'vs/workbench/test/common/workbenchTestServices';\n\nsuite('Memento', () => {\n\tlet context: StorageScope | undefined = undefined;\n\tlet storage: IStorageService;\n\n\tsetup(() => {\n\t\tstorage = new TestStorageService();\n\t});\n\n\ttest('Loading and Saving Memento with Scopes', () => {\n\t\tlet myMemento = new Memento('memento.test', storage);\n\n\t\t// Global\n\t\tlet memento = myMemento.getMemento(StorageScope.GLOBAL, StorageTarget.MACHINE);\n\t\tmemento.foo = [1, 2, 3];\n\t\tlet globalMemento = myMemento.getMemento(StorageScope.GLOBAL, StorageTarget.MACHINE);\n\t\tassert.deepStrictEqual(globalMemento, memento);\n\n\t\t// Workspace\n\t\tmemento = myMemento.getMemento(StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\tassert(memento);\n\t\tmemento.foo = 'Hello World';\n\n\t\tmyMemento.saveMemento();\n\n\t\t// Global\n\t\tmemento = myMemento.getMemento(StorageScope.GLOBAL, StorageTarget.MACHINE);\n\t\tassert.deepStrictEqual(memento, { foo: [1, 2, 3] });\n\t\tglobalMemento = myMemento.getMemento(StorageScope.GLOBAL, StorageTarget.MACHINE);\n\t\tassert.deepStrictEqual(globalMemento, memento);\n\n\t\t// Workspace\n\t\tmemento = myMemento.getMemento(StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\tassert.deepStrictEqual(memento, { foo: 'Hello World' });\n\n\t\t// Assert the Mementos are stored properly in storage\n\t\tassert.deepStrictEqual(JSON.parse(storage.get('memento/memento.test', StorageScope.GLOBAL)!), { foo: [1, 2, 3] });\n\n\t\tassert.deepStrictEqual(JSON.parse(storage.get('memento/memento.test', StorageScope.WORKSPACE)!), { foo: 'Hello World' });\n\n\t\t// Delete Global\n\t\tmemento = myMemento.getMemento(context!, StorageTarget.MACHINE);\n\t\tdelete memento.foo;\n\n\t\t// Delete Workspace\n\t\tmemento = myMemento.getMemento(StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\tdelete memento.foo;\n\n\t\tmyMemento.saveMemento();\n\n\t\t// Global\n\t\tmemento = myMemento.getMemento(context!, StorageTarget.MACHINE);\n\t\tassert.deepStrictEqual(memento, {});\n\n\t\t// Workspace\n\t\tmemento = myMemento.getMemento(StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\tassert.deepStrictEqual(memento, {});\n\n\t\t// Assert the Mementos are also removed from storage\n\t\tassert.strictEqual(storage.get('memento/memento.test', StorageScope.GLOBAL, null!), null);\n\n\t\tassert.strictEqual(storage.get('memento/memento.test', StorageScope.WORKSPACE, null!), null);\n\t});\n\n\ttest('Save and Load', () => {\n\t\tlet myMemento = new Memento('memento.test', storage);\n\n\t\t// Global\n\t\tlet memento = myMemento.getMemento(context!, StorageTarget.MACHINE);\n\t\tmemento.foo = [1, 2, 3];\n\n\t\t// Workspace\n\t\tmemento = myMemento.getMemento(StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\tassert(memento);\n\t\tmemento.foo = 'Hello World';\n\n\t\tmyMemento.saveMemento();\n\n\t\t// Global\n\t\tmemento = myMemento.getMemento(context!, StorageTarget.MACHINE);\n\t\tassert.deepStrictEqual(memento, { foo: [1, 2, 3] });\n\t\tlet globalMemento = myMemento.getMemento(StorageScope.GLOBAL, StorageTarget.MACHINE);\n\t\tassert.deepStrictEqual(globalMemento, memento);\n\n\t\t// Workspace\n\t\tmemento = myMemento.getMemento(StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\tassert.deepStrictEqual(memento, { foo: 'Hello World' });\n\n\t\t// Global\n\t\tmemento = myMemento.getMemento(context!, StorageTarget.MACHINE);\n\t\tmemento.foo = [4, 5, 6];\n\n\t\t// Workspace\n\t\tmemento = myMemento.getMemento(StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\tassert(memento);\n\t\tmemento.foo = 'World Hello';\n\n\t\tmyMemento.saveMemento();\n\n\t\t// Global\n\t\tmemento = myMemento.getMemento(context!, StorageTarget.MACHINE);\n\t\tassert.deepStrictEqual(memento, { foo: [4, 5, 6] });\n\t\tglobalMemento = myMemento.getMemento(StorageScope.GLOBAL, StorageTarget.MACHINE);\n\t\tassert.deepStrictEqual(globalMemento, memento);\n\n\t\t// Workspace\n\t\tmemento = myMemento.getMemento(StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\tassert.deepStrictEqual(memento, { foo: 'World Hello' });\n\n\t\t// Delete Global\n\t\tmemento = myMemento.getMemento(context!, StorageTarget.MACHINE);\n\t\tdelete memento.foo;\n\n\t\t// Delete Workspace\n\t\tmemento = myMemento.getMemento(StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\tdelete memento.foo;\n\n\t\tmyMemento.saveMemento();\n\n\t\t// Global\n\t\tmemento = myMemento.getMemento(context!, StorageTarget.MACHINE);\n\t\tassert.deepStrictEqual(memento, {});\n\n\t\t// Workspace\n\t\tmemento = myMemento.getMemento(StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\tassert.deepStrictEqual(memento, {});\n\t});\n\n\ttest('Save and Load - 2 Components with same id', () => {\n\t\tlet myMemento = new Memento('memento.test', storage);\n\t\tlet myMemento2 = new Memento('memento.test', storage);\n\n\t\t// Global\n\t\tlet memento = myMemento.getMemento(context!, StorageTarget.MACHINE);\n\t\tmemento.foo = [1, 2, 3];\n\n\t\tmemento = myMemento2.getMemento(context!, StorageTarget.MACHINE);\n\t\tmemento.bar = [1, 2, 3];\n\n\t\t// Workspace\n\t\tmemento = myMemento.getMemento(StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\tassert(memento);\n\t\tmemento.foo = 'Hello World';\n\n\t\tmemento = myMemento2.getMemento(StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\tassert(memento);\n\t\tmemento.bar = 'Hello World';\n\n\t\tmyMemento.saveMemento();\n\t\tmyMemento2.saveMemento();\n\n\t\t// Global\n\t\tmemento = myMemento.getMemento(context!, StorageTarget.MACHINE);\n\t\tassert.deepStrictEqual(memento, { foo: [1, 2, 3], bar: [1, 2, 3] });\n\t\tlet globalMemento = myMemento.getMemento(StorageScope.GLOBAL, StorageTarget.MACHINE);\n\t\tassert.deepStrictEqual(globalMemento, memento);\n\n\t\tmemento = myMemento2.getMemento(context!, StorageTarget.MACHINE);\n\t\tassert.deepStrictEqual(memento, { foo: [1, 2, 3], bar: [1, 2, 3] });\n\t\tglobalMemento = myMemento2.getMemento(StorageScope.GLOBAL, StorageTarget.MACHINE);\n\t\tassert.deepStrictEqual(globalMemento, memento);\n\n\t\t// Workspace\n\t\tmemento = myMemento.getMemento(StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\tassert.deepStrictEqual(memento, { foo: 'Hello World', bar: 'Hello World' });\n\n\t\tmemento = myMemento2.getMemento(StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\tassert.deepStrictEqual(memento, { foo: 'Hello World', bar: 'Hello World' });\n\t});\n});\n"]}