{"version":3,"file":"workbenchTestServices.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/test/common/workbenchTestServices.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { join } from 'vs/base/common/path';\nimport { basename, isEqual, isEqualOrParent } from 'vs/base/common/resources';\nimport { URI } from 'vs/base/common/uri';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IWorkspaceContextService, IWorkspace, WorkbenchState, IWorkspaceFolder, IWorkspaceFoldersChangeEvent, Workspace, IWorkspaceFoldersWillChangeEvent } from 'vs/platform/workspace/common/workspace';\nimport { TestWorkspace } from 'vs/platform/workspace/test/common/testWorkspace';\nimport { ISingleFolderWorkspaceIdentifier, IWorkspaceIdentifier } from 'vs/platform/workspaces/common/workspaces';\nimport { ITextResourcePropertiesService } from 'vs/editor/common/services/textResourceConfigurationService';\nimport { isLinux, isMacintosh } from 'vs/base/common/platform';\nimport { InMemoryStorageService, WillSaveStateReason } from 'vs/platform/storage/common/storage';\nimport { IWorkingCopy, IWorkingCopyBackup, WorkingCopyCapabilities } from 'vs/workbench/services/workingCopy/common/workingCopy';\nimport { NullExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { IWorkingCopyFileService, IWorkingCopyFileOperationParticipant, WorkingCopyFileEvent, IDeleteOperation, ICopyOperation, IMoveOperation, IFileOperationUndoRedoInfo, ICreateFileOperation, ICreateOperation } from 'vs/workbench/services/workingCopy/common/workingCopyFileService';\nimport { IDisposable, Disposable } from 'vs/base/common/lifecycle';\nimport { IFileStatWithMetadata } from 'vs/platform/files/common/files';\nimport { ISaveOptions, IRevertOptions } from 'vs/workbench/common/editor';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport product from 'vs/platform/product/common/product';\n\nexport class TestTextResourcePropertiesService implements ITextResourcePropertiesService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t) {\n\t}\n\n\tgetEOL(resource: URI, language?: string): string {\n\t\tconst eol = this.configurationService.getValue<string>('files.eol', { overrideIdentifier: language, resource });\n\t\tif (eol && eol !== 'auto') {\n\t\t\treturn eol;\n\t\t}\n\t\treturn (isLinux || isMacintosh) ? '\\n' : '\\r\\n';\n\t}\n}\n\nexport class TestContextService implements IWorkspaceContextService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate workspace: Workspace;\n\tprivate options: object;\n\n\tprivate readonly _onDidChangeWorkspaceName: Emitter<void>;\n\tget onDidChangeWorkspaceName(): Event<void> { return this._onDidChangeWorkspaceName.event; }\n\n\tprivate readonly _onWillChangeWorkspaceFolders: Emitter<IWorkspaceFoldersWillChangeEvent>;\n\tget onWillChangeWorkspaceFolders(): Event<IWorkspaceFoldersWillChangeEvent> { return this._onWillChangeWorkspaceFolders.event; }\n\n\tprivate readonly _onDidChangeWorkspaceFolders: Emitter<IWorkspaceFoldersChangeEvent>;\n\tget onDidChangeWorkspaceFolders(): Event<IWorkspaceFoldersChangeEvent> { return this._onDidChangeWorkspaceFolders.event; }\n\n\tprivate readonly _onDidChangeWorkbenchState: Emitter<WorkbenchState>;\n\tget onDidChangeWorkbenchState(): Event<WorkbenchState> { return this._onDidChangeWorkbenchState.event; }\n\n\tconstructor(workspace = TestWorkspace, options = null) {\n\t\tthis.workspace = workspace;\n\t\tthis.options = options || Object.create(null);\n\t\tthis._onDidChangeWorkspaceName = new Emitter<void>();\n\t\tthis._onWillChangeWorkspaceFolders = new Emitter<IWorkspaceFoldersWillChangeEvent>();\n\t\tthis._onDidChangeWorkspaceFolders = new Emitter<IWorkspaceFoldersChangeEvent>();\n\t\tthis._onDidChangeWorkbenchState = new Emitter<WorkbenchState>();\n\t}\n\n\tgetFolders(): IWorkspaceFolder[] {\n\t\treturn this.workspace ? this.workspace.folders : [];\n\t}\n\n\tgetWorkbenchState(): WorkbenchState {\n\t\tif (this.workspace.configuration) {\n\t\t\treturn WorkbenchState.WORKSPACE;\n\t\t}\n\n\t\tif (this.workspace.folders.length) {\n\t\t\treturn WorkbenchState.FOLDER;\n\t\t}\n\n\t\treturn WorkbenchState.EMPTY;\n\t}\n\n\tgetCompleteWorkspace(): Promise<IWorkspace> {\n\t\treturn Promise.resolve(this.getWorkspace());\n\t}\n\n\tgetWorkspace(): IWorkspace {\n\t\treturn this.workspace;\n\t}\n\n\tgetWorkspaceFolder(resource: URI): IWorkspaceFolder | null {\n\t\treturn this.workspace.getFolder(resource);\n\t}\n\n\tsetWorkspace(workspace: any): void {\n\t\tthis.workspace = workspace;\n\t}\n\n\tgetOptions() {\n\t\treturn this.options;\n\t}\n\n\tupdateOptions() { }\n\n\tisInsideWorkspace(resource: URI): boolean {\n\t\tif (resource && this.workspace) {\n\t\t\treturn isEqualOrParent(resource, this.workspace.folders[0].uri);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\ttoResource(workspaceRelativePath: string): URI {\n\t\treturn URI.file(join('C:\\\\', workspaceRelativePath));\n\t}\n\n\tisCurrentWorkspace(workspaceIdOrFolder: IWorkspaceIdentifier | ISingleFolderWorkspaceIdentifier | URI): boolean {\n\t\treturn URI.isUri(workspaceIdOrFolder) && isEqual(this.workspace.folders[0].uri, workspaceIdOrFolder);\n\t}\n}\n\nexport class TestStorageService extends InMemoryStorageService {\n\n\toverride emitWillSaveState(reason: WillSaveStateReason): void {\n\t\tsuper.emitWillSaveState(reason);\n\t}\n}\n\nexport class TestWorkingCopy extends Disposable implements IWorkingCopy {\n\n\tprivate readonly _onDidChangeDirty = this._register(new Emitter<void>());\n\treadonly onDidChangeDirty = this._onDidChangeDirty.event;\n\n\tprivate readonly _onDidChangeContent = this._register(new Emitter<void>());\n\treadonly onDidChangeContent = this._onDidChangeContent.event;\n\n\treadonly capabilities = WorkingCopyCapabilities.None;\n\n\treadonly name = basename(this.resource);\n\n\tprivate dirty = false;\n\n\tconstructor(public readonly resource: URI, isDirty = false, public readonly typeId = 'testWorkingCopyType') {\n\t\tsuper();\n\n\t\tthis.dirty = isDirty;\n\t}\n\n\tsetDirty(dirty: boolean): void {\n\t\tif (this.dirty !== dirty) {\n\t\t\tthis.dirty = dirty;\n\t\t\tthis._onDidChangeDirty.fire();\n\t\t}\n\t}\n\n\tsetContent(content: string): void {\n\t\tthis._onDidChangeContent.fire();\n\t}\n\n\tisDirty(): boolean {\n\t\treturn this.dirty;\n\t}\n\n\tasync save(options?: ISaveOptions): Promise<boolean> {\n\t\treturn true;\n\t}\n\n\tasync revert(options?: IRevertOptions): Promise<void> {\n\t\tthis.setDirty(false);\n\t}\n\n\tasync backup(token: CancellationToken): Promise<IWorkingCopyBackup> {\n\t\treturn {};\n\t}\n}\n\nexport class TestWorkingCopyFileService implements IWorkingCopyFileService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tonWillRunWorkingCopyFileOperation: Event<WorkingCopyFileEvent> = Event.None;\n\tonDidFailWorkingCopyFileOperation: Event<WorkingCopyFileEvent> = Event.None;\n\tonDidRunWorkingCopyFileOperation: Event<WorkingCopyFileEvent> = Event.None;\n\n\taddFileOperationParticipant(participant: IWorkingCopyFileOperationParticipant): IDisposable { return Disposable.None; }\n\n\tasync delete(operations: IDeleteOperation[], token: CancellationToken, undoInfo?: IFileOperationUndoRedoInfo): Promise<void> { }\n\n\tregisterWorkingCopyProvider(provider: (resourceOrFolder: URI) => IWorkingCopy[]): IDisposable { return Disposable.None; }\n\n\tgetDirty(resource: URI): IWorkingCopy[] { return []; }\n\n\tcreate(operations: ICreateFileOperation[], token: CancellationToken, undoInfo?: IFileOperationUndoRedoInfo): Promise<IFileStatWithMetadata[]> { throw new Error('Method not implemented.'); }\n\tcreateFolder(operations: ICreateOperation[], token: CancellationToken, undoInfo?: IFileOperationUndoRedoInfo): Promise<IFileStatWithMetadata[]> { throw new Error('Method not implemented.'); }\n\n\tmove(operations: IMoveOperation[], token: CancellationToken, undoInfo?: IFileOperationUndoRedoInfo): Promise<IFileStatWithMetadata[]> { throw new Error('Method not implemented.'); }\n\n\tcopy(operations: ICopyOperation[], token: CancellationToken, undoInfo?: IFileOperationUndoRedoInfo): Promise<IFileStatWithMetadata[]> { throw new Error('Method not implemented.'); }\n}\n\nexport function mock<T>(): Ctor<T> {\n\treturn function () { } as any;\n}\n\nexport interface Ctor<T> {\n\tnew(): T;\n}\n\nexport class TestExtensionService extends NullExtensionService { }\n\nexport const TestProductService = { _serviceBrand: undefined, ...product };\n"]}