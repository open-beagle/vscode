{"version":3,"file":"workbench.web.api.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/workbench.web.api.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAyjB/F,oFArjBuB,SAAG,OAqjBvB;IA6BH,yFA9kBQ,cAAQ,OA8kBR;IA3BR,sFAjjBQ,aAAK,OAijBR;IACL,wFAljBe,eAAO,OAkjBf;IAEP,2FAnjBQ,sBAAU,OAmjBR;IAvZX,IAAK,WAIJ;IAJD,WAAK,WAAW;QACf,4BAAa,CAAA;QACb,8BAAe,CAAA;QACf,mCAAoB,CAAA;IACrB,CAAC,EAJI,WAAW,KAAX,WAAW,QAIf;IA8SD;;;;;OAKG;IACH,IAAI,OAAO,GAAG,KAAK,CAAC;IACpB,IAAI,uBAAiC,CAAC;IACtC,MAAM,gBAAgB,GAAG,IAAI,OAAO,CAAa,OAAO,CAAC,EAAE,CAAC,uBAAuB,GAAG,OAAO,CAAC,CAAC;IAC/F,SAAS,MAAM,CAAC,UAAuB,EAAE,OAAsC;QAE9E,0BAA0B;QAC1B,CAAA,GAAA,kBAAI,CAAA,CAAC,2BAA2B,CAAC,CAAC;QAElC,wEAAwE;QACxE,qEAAqE;QACrE,IAAI,OAAO,EAAE;YACZ,MAAM,IAAI,KAAK,CAAC,uDAAuD,CAAC,CAAC;SACzE;aAAM;YACN,OAAO,GAAG,IAAI,CAAC;SACf;QAED,2BAA2B;QAC3B,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;YACpC,KAAK,MAAM,OAAO,IAAI,OAAO,CAAC,QAAQ,EAAE;gBACvC,2BAAgB,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE,EAAE,CAAC,QAAQ,EAAE,GAAG,IAAI,EAAE,EAAE;oBAClE,+DAA+D;oBAC/D,yDAAyD;oBACzD,OAAO,OAAO,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,CAAC;gBACjC,CAAC,CAAC,CAAC;aACH;SACD;QAED,wCAAwC;QACxC,IAAI,qBAAqB,GAA2B,SAAS,CAAC;QAC9D,CAAA,GAAA,eAAI,CAAA,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;YAC1C,qBAAqB,GAAG,SAAS,CAAC;YAClC,uBAAuB,CAAC,SAAS,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,OAAO,CAAA,GAAA,wBAAY,CAAA,CAAC,GAAG,EAAE;YACxB,IAAI,qBAAqB,EAAE;gBAC1B,qBAAqB,CAAC,QAAQ,EAAE,CAAC;aACjC;iBAAM;gBACN,gBAAgB,CAAC,IAAI,CAAC,qBAAqB,CAAC,EAAE,CAAC,qBAAqB,CAAC,QAAQ,EAAE,CAAC,CAAC;aACjF;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;IA4CA,wBAAM;IAzCP,oBAAoB;IAEpB,IAAU,QAAQ,CAcjB;IAdD,WAAU,QAAQ;QAEjB;;;;;;UAME;QACK,KAAK,UAAU,cAAc,CAAC,OAAe,EAAE,GAAG,IAAW;YACnE,MAAM,SAAS,GAAG,MAAM,gBAAgB,CAAC;YAEzC,OAAO,SAAS,CAAC,QAAQ,CAAC,cAAc,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;QAC5D,CAAC;QAJqB,uBAAc,iBAInC,CAAA;IACF,CAAC,EAdS,QAAQ,KAAR,QAAQ,QAcjB;IAsFA,4BAAQ;IApFT,IAAU,GAAG,CAkBZ;IAlBD,WAAU,GAAG;QAEZ;;;;;;;;;;WAUG;QACI,KAAK,UAAU,wBAAwB;YAC7C,MAAM,SAAS,GAAG,MAAM,gBAAgB,CAAC;YAEzC,OAAO,SAAS,CAAC,GAAG,CAAC,wBAAwB,EAAE,CAAC;QACjD,CAAC;QAJqB,4BAAwB,2BAI7C,CAAA;IACF,CAAC,EAlBS,GAAG,KAAH,GAAG,QAkBZ;IAiFA,kBAAG;;AAMJ,YAAY","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/workbench/workbench.web.main';\nimport { main } from 'vs/workbench/browser/web.main';\nimport { UriComponents, URI } from 'vs/base/common/uri';\nimport { IWebSocketFactory, IWebSocket } from 'vs/platform/remote/browser/browserSocketFactory';\nimport { IExtensionManifest } from 'vs/platform/extensions/common/extensions';\nimport { IURLCallbackProvider } from 'vs/workbench/services/url/browser/urlService';\nimport { LogLevel } from 'vs/platform/log/common/log';\nimport { IUpdateProvider, IUpdate } from 'vs/workbench/services/update/browser/updateService';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { Disposable, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { IWorkspaceProvider, IWorkspace } from 'vs/workbench/services/host/browser/browserHostService';\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { IProductConfiguration } from 'vs/base/common/product';\nimport { mark } from 'vs/base/common/performance';\nimport { ICredentialsProvider } from 'vs/workbench/services/credentials/common/credentials';\nimport { TunnelProviderFeatures } from 'vs/platform/remote/common/tunnel';\n\ninterface IResourceUriProvider {\n\t(uri: URI): URI;\n}\n\ninterface IStaticExtension {\n\tpackageJSON: IExtensionManifest;\n\textensionLocation: UriComponents;\n\tisBuiltin?: boolean;\n}\n\ninterface ICommonTelemetryPropertiesResolver {\n\t(): { [key: string]: any };\n}\n\ninterface IExternalUriResolver {\n\t(uri: URI): Promise<URI>;\n}\n\ninterface ITunnelProvider {\n\n\t/**\n\t * Support for creating tunnels.\n\t */\n\ttunnelFactory?: ITunnelFactory;\n\n\t/**\n\t * Support for filtering candidate ports.\n\t */\n\tshowPortCandidate?: IShowPortCandidate;\n\n\t/**\n\t * The features that the tunnel provider supports.\n\t */\n\tfeatures?: TunnelProviderFeatures;\n}\n\ninterface ITunnelFactory {\n\t(tunnelOptions: ITunnelOptions, tunnelCreationOptions: TunnelCreationOptions): Promise<ITunnel> | undefined;\n}\n\ninterface ITunnelOptions {\n\n\tremoteAddress: { port: number, host: string };\n\n\t/**\n\t * The desired local port. If this port can't be used, then another will be chosen.\n\t */\n\tlocalAddressPort?: number;\n\n\tlabel?: string;\n\n\tpublic?: boolean;\n}\n\nexport interface TunnelCreationOptions {\n\n\t/**\n\t * True when the local operating system will require elevation to use the requested local port.\n\t */\n\televationRequired?: boolean;\n}\n\ninterface ITunnel {\n\n\tremoteAddress: { port: number, host: string };\n\n\t/**\n\t * The complete local address(ex. localhost:1234)\n\t */\n\tlocalAddress: string;\n\n\tpublic?: boolean;\n\n\t/**\n\t * Implementers of Tunnel should fire onDidDispose when dispose is called.\n\t */\n\tonDidDispose: Event<void>;\n\n\tdispose(): Promise<void> | void;\n}\n\ninterface IShowPortCandidate {\n\t(host: string, port: number, detail: string): Promise<boolean>;\n}\n\ninterface ICommand {\n\n\t/**\n\t * An identifier for the command. Commands can be executed from extensions\n\t * using the `vscode.commands.executeCommand` API using that command ID.\n\t */\n\tid: string,\n\n\t/**\n\t * A function that is being executed with any arguments passed over. The\n\t * return type will be send back to the caller.\n\t *\n\t * Note: arguments and return type should be serializable so that they can\n\t * be exchanged across processes boundaries.\n\t */\n\thandler: (...args: any[]) => unknown;\n}\n\ninterface IHomeIndicator {\n\n\t/**\n\t * The link to open when clicking the home indicator.\n\t */\n\thref: string;\n\n\t/**\n\t * The icon name for the home indicator. This needs to be one of the existing\n\t * icons from our Codicon icon set. For example `sync`.\n\t */\n\ticon: string;\n\n\t/**\n\t * A tooltip that will appear while hovering over the home indicator.\n\t */\n\ttitle: string;\n}\n\ninterface IWindowIndicator {\n\n\t/**\n\t * Triggering this event will cause the window indicator to update.\n\t */\n\tonDidChange: Event<void>;\n\n\t/**\n\t * Label of the window indicator may include octicons\n\t * e.g. `$(remote) label`\n\t */\n\tlabel: string;\n\n\t/**\n\t * Tooltip of the window indicator should not include\n\t * octicons and be descriptive.\n\t */\n\ttooltip: string;\n\n\t/**\n\t * If provided, overrides the default command that\n\t * is executed when clicking on the window indicator.\n\t */\n\tcommand?: string;\n}\n\nenum ColorScheme {\n\tDARK = 'dark',\n\tLIGHT = 'light',\n\tHIGH_CONTRAST = 'hc'\n}\n\ninterface IInitialColorTheme {\n\n\t/**\n\t * Initial color theme type.\n\t */\n\tthemeType: ColorScheme;\n\n\t/**\n\t * A list of workbench colors to apply initially.\n\t */\n\tcolors?: { [colorId: string]: string };\n}\n\ninterface IDefaultView {\n\treadonly id: string;\n}\n\ninterface IDefaultEditor {\n\treadonly uri: UriComponents;\n\treadonly openOnlyIfExists?: boolean;\n\treadonly openWith?: string;\n}\n\ninterface IDefaultLayout {\n\treadonly views?: IDefaultView[];\n\treadonly editors?: IDefaultEditor[];\n\t/** Forces this layout to be applied even if this isn't the first time the workspace has been opened */\n\treadonly force?: boolean;\n}\n\ninterface IProductQualityChangeHandler {\n\n\t/**\n\t * Handler is being called when the user wants to switch between\n\t * `insider` or `stable` product qualities.\n\t */\n\t(newQuality: 'insider' | 'stable'): void;\n}\n\n/**\n * Settings sync options\n */\ninterface ISettingsSyncOptions {\n\n\t/**\n\t * Is settings sync enabled\n\t */\n\treadonly enabled: boolean;\n\n\t/**\n\t * Version of extensions sync state.\n\t * Extensions sync state will be reset if version is provided and different from previous version.\n\t */\n\treadonly extensionsSyncStateVersion?: string;\n\n\t/**\n\t * Handler is being called when the user changes Settings Sync enablement.\n\t */\n\tenablementHandler?(enablement: boolean): void;\n}\n\ninterface IWorkbenchConstructionOptions {\n\n\t//#region Connection related configuration\n\n\t/**\n\t * The remote authority is the IP:PORT from where the workbench is served\n\t * from. It is for example being used for the websocket connections as address.\n\t */\n\treadonly remoteAuthority?: string;\n\n\t/**\n\t * The connection token to send to the server.\n\t */\n\treadonly connectionToken?: string;\n\n\t/**\n\t * An endpoint to serve iframe content (\"webview\") from. This is required\n\t * to provide full security isolation from the workbench host.\n\t */\n\treadonly webviewEndpoint?: string;\n\n\t/**\n\t * An URL pointing to the web worker extension host <iframe> src.\n\t */\n\treadonly webWorkerExtensionHostIframeSrc?: string;\n\n\t/**\n\t * A factory for web sockets.\n\t */\n\treadonly webSocketFactory?: IWebSocketFactory;\n\n\t/**\n\t * A provider for resource URIs.\n\t */\n\treadonly resourceUriProvider?: IResourceUriProvider;\n\n\t/**\n\t * Resolves an external uri before it is opened.\n\t */\n\treadonly resolveExternalUri?: IExternalUriResolver;\n\n\t/**\n\t * A provider for supplying tunneling functionality,\n\t * such as creating tunnels and showing candidate ports to forward.\n\t */\n\treadonly tunnelProvider?: ITunnelProvider;\n\n\t/**\n\t * Endpoints to be used for proxying authentication code exchange calls in the browser.\n\t */\n\treadonly codeExchangeProxyEndpoints?: { [providerId: string]: string }\n\n\t//#endregion\n\n\n\t//#region Workbench configuration\n\n\t/**\n\t * A handler for opening workspaces and providing the initial workspace.\n\t */\n\treadonly workspaceProvider?: IWorkspaceProvider;\n\n\t/**\n\t * Enables Settings Sync by default.\n\t *\n\t * Syncs with the current authenticated user account (provided in [credentialsProvider](#credentialsProvider)) by default.\n\t *\n\t * @deprecated Instead use [settingsSyncOptions](#settingsSyncOptions) to enable/disable settings sync in the workbench.\n\t */\n\treadonly enableSyncByDefault?: boolean;\n\n\t/**\n\t * Settings sync options\n\t */\n\treadonly settingsSyncOptions?: ISettingsSyncOptions;\n\n\t/**\n\t * The credentials provider to store and retrieve secrets.\n\t */\n\treadonly credentialsProvider?: ICredentialsProvider;\n\n\t/**\n\t * Add static extensions that cannot be uninstalled but only be disabled.\n\t */\n\treadonly staticExtensions?: readonly IStaticExtension[];\n\n\t/**\n\t * [TEMPORARY]: This will be removed soon.\n\t * Enable inlined extensions.\n\t * Defaults to true.\n\t */\n\treadonly _enableBuiltinExtensions?: boolean;\n\n\t/**\n\t * Support for URL callbacks.\n\t */\n\treadonly urlCallbackProvider?: IURLCallbackProvider;\n\n\t/**\n\t * Support adding additional properties to telemetry.\n\t */\n\treadonly resolveCommonTelemetryProperties?: ICommonTelemetryPropertiesResolver;\n\n\t/**\n\t * A set of optional commands that should be registered with the commands\n\t * registry.\n\t *\n\t * Note: commands can be called from extensions if the identifier is known!\n\t */\n\treadonly commands?: readonly ICommand[];\n\n\t/**\n\t * Optional default layout to apply on first time the workspace is opened (uness `force` is specified).\n\t */\n\treadonly defaultLayout?: IDefaultLayout;\n\n\t/**\n\t * Optional configuration default overrides contributed to the workbench.\n\t */\n\treadonly configurationDefaults?: Record<string, any>;\n\n\t//#endregion\n\n\n\t//#region Update/Quality related\n\n\t/**\n\t * Support for update reporting\n\t */\n\treadonly updateProvider?: IUpdateProvider;\n\n\t/**\n\t * Support for product quality switching\n\t */\n\treadonly productQualityChangeHandler?: IProductQualityChangeHandler;\n\n\t//#endregion\n\n\n\t//#region Branding\n\n\t/**\n\t * Optional home indicator to appear above the hamburger menu in the activity bar.\n\t */\n\treadonly homeIndicator?: IHomeIndicator;\n\n\t/**\n\t * Optional override for the product configuration properties.\n\t */\n\treadonly productConfiguration?: Partial<IProductConfiguration>;\n\n\t/**\n\t * Optional override for properties of the window indicator in the status bar.\n\t */\n\treadonly windowIndicator?: IWindowIndicator;\n\n\t/**\n\t * Specifies the default theme type (LIGHT, DARK..) and allows to provide initial colors that are shown\n\t * until the color theme that is specified in the settings (`editor.colorTheme`) is loaded and applied.\n\t * Once there are persisted colors from a last run these will be used.\n\t *\n\t * The idea is that the colors match the main colors from the theme defined in the `configurationDefaults`.\n\t */\n\treadonly initialColorTheme?: IInitialColorTheme;\n\n\t//#endregion\n\n\n\t//#region Development options\n\n\treadonly developmentOptions?: IDevelopmentOptions;\n\n\t//#endregion\n\n}\n\ninterface IDevelopmentOptions {\n\n\t/**\n\t * Current logging level. Default is `LogLevel.Info`.\n\t */\n\treadonly logLevel?: LogLevel;\n\n\t/**\n\t * Location of a module containing extension tests to run once the workbench is open.\n\t */\n\treadonly extensionTestsPath?: UriComponents;\n\n\t/**\n\t * Add extensions under development.\n\t */\n\treadonly extensions?: readonly IStaticExtension[];\n\n\t/**\n\t * Whether to enable the smoke test driver.\n\t */\n\treadonly enableSmokeTestDriver?: boolean;\n}\n\ninterface IPerformanceMark {\n\n\t/**\n\t * The name of a performace marker.\n\t */\n\treadonly name: string;\n\n\t/**\n\t * The UNIX timestamp at which the marker has been set.\n\t */\n\treadonly startTime: number;\n}\n\ninterface IWorkbench {\n\n\tcommands: {\n\t\t/**\n\t\t * @see [executeCommand](#commands.executeCommand)\n\t\t */\n\t\texecuteCommand(command: string, ...args: any[]): Promise<unknown>;\n\t}\n\n\tenv: {\n\t\t/**\n\t\t * @see [retrievePerformanceMarks](#commands.retrievePerformanceMarks)\n\t\t */\n\t\tretrievePerformanceMarks(): Promise<[string, readonly IPerformanceMark[]][]>;\n\t}\n\n\t/**\n\t * Triggers shutdown of the workbench programmatically. After this method is\n\t * called, the workbench is not usable anymore and the page needs to reload\n\t * or closed.\n\t *\n\t * This will also remove any `beforeUnload` handlers that would bring up a\n\t * confirmation dialog.\n\t */\n\tshutdown: () => void;\n}\n\n/**\n * Creates the workbench with the provided options in the provided container.\n *\n * @param domElement the container to create the workbench in\n * @param options for setting up the workbench\n */\nlet created = false;\nlet workbenchPromiseResolve: Function;\nconst workbenchPromise = new Promise<IWorkbench>(resolve => workbenchPromiseResolve = resolve);\nfunction create(domElement: HTMLElement, options: IWorkbenchConstructionOptions): IDisposable {\n\n\t// Mark start of workbench\n\tmark('code/didLoadWorkbenchMain');\n\n\t// Assert that the workbench is not created more than once. We currently\n\t// do not support this and require a full context switch to clean-up.\n\tif (created) {\n\t\tthrow new Error('Unable to create the VSCode workbench more than once.');\n\t} else {\n\t\tcreated = true;\n\t}\n\n\t// Register commands if any\n\tif (Array.isArray(options.commands)) {\n\t\tfor (const command of options.commands) {\n\t\t\tCommandsRegistry.registerCommand(command.id, (accessor, ...args) => {\n\t\t\t\t// we currently only pass on the arguments but not the accessor\n\t\t\t\t// to the command to reduce our exposure of internal API.\n\t\t\t\treturn command.handler(...args);\n\t\t\t});\n\t\t}\n\t}\n\n\t// Startup workbench and resolve waiters\n\tlet instantiatedWorkbench: IWorkbench | undefined = undefined;\n\tmain(domElement, options).then(workbench => {\n\t\tinstantiatedWorkbench = workbench;\n\t\tworkbenchPromiseResolve(workbench);\n\t});\n\n\treturn toDisposable(() => {\n\t\tif (instantiatedWorkbench) {\n\t\t\tinstantiatedWorkbench.shutdown();\n\t\t} else {\n\t\t\tworkbenchPromise.then(instantiatedWorkbench => instantiatedWorkbench.shutdown());\n\t\t}\n\t});\n}\n\n\n//#region API Facade\n\nnamespace commands {\n\n\t/**\n\t* Allows to execute any command if known with the provided arguments.\n\t*\n\t* @param command Identifier of the command to execute.\n\t* @param rest Parameters passed to the command function.\n\t* @return A promise that resolves to the returned value of the given command.\n\t*/\n\texport async function executeCommand(command: string, ...args: any[]): Promise<unknown> {\n\t\tconst workbench = await workbenchPromise;\n\n\t\treturn workbench.commands.executeCommand(command, ...args);\n\t}\n}\n\nnamespace env {\n\n\t/**\n\t * Retrieve performance marks that have been collected during startup. This function\n\t * returns tuples of source and marks. A source is a dedicated context, like\n\t * the renderer or an extension host.\n\t *\n\t * *Note* that marks can be collected on different machines and in different processes\n\t * and that therefore \"different clocks\" are used. So, comparing `startTime`-properties\n\t * across contexts should be taken with a grain of salt.\n\t *\n\t * @returns A promise that resolves to tuples of source and marks.\n\t */\n\texport async function retrievePerformanceMarks(): Promise<[string, readonly IPerformanceMark[]][]> {\n\t\tconst workbench = await workbenchPromise;\n\n\t\treturn workbench.env.retrievePerformanceMarks();\n\t}\n}\n\nexport {\n\n\t// Factory\n\tcreate,\n\tIWorkbenchConstructionOptions,\n\tIWorkbench,\n\n\t// Basic Types\n\tURI,\n\tUriComponents,\n\tEvent,\n\tEmitter,\n\tIDisposable,\n\tDisposable,\n\n\t// Workspace\n\tIWorkspace,\n\tIWorkspaceProvider,\n\n\t// WebSockets\n\tIWebSocketFactory,\n\tIWebSocket,\n\n\t// Resources\n\tIResourceUriProvider,\n\n\t// Credentials\n\tICredentialsProvider,\n\n\t// Static Extensions\n\tIStaticExtension,\n\tIExtensionManifest,\n\n\t// Callbacks\n\tIURLCallbackProvider,\n\n\t// LogLevel\n\tLogLevel,\n\n\t// SettingsSync\n\tISettingsSyncOptions,\n\n\t// Updates/Quality\n\tIUpdateProvider,\n\tIUpdate,\n\tIProductQualityChangeHandler,\n\n\t// Telemetry\n\tICommonTelemetryPropertiesResolver,\n\n\t// External Uris\n\tIExternalUriResolver,\n\n\t// Tunnel\n\tITunnelProvider,\n\tITunnelFactory,\n\tITunnel,\n\tITunnelOptions,\n\n\t// Ports\n\tIShowPortCandidate,\n\n\t// Commands\n\tICommand,\n\tcommands,\n\n\t// Branding\n\tIHomeIndicator,\n\tIProductConfiguration,\n\tIWindowIndicator,\n\tIInitialColorTheme,\n\n\t// Default layout\n\tIDefaultView,\n\tIDefaultEditor,\n\tIDefaultLayout,\n\n\t// Env\n\tIPerformanceMark,\n\tenv,\n\n\t// Development\n\tIDevelopmentOptions\n};\n\n//#endregion\n"]}