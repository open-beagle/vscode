{"version":3,"sources":["vs/workbench/electron-sandbox/parts/dialogs/dialogHandler.ts"],"names":[],"mappings":"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","file":"dialogHandler.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { fromNow } from 'vs/base/common/date';\nimport { mnemonicButtonLabel } from 'vs/base/common/labels';\nimport { isLinux, isLinuxSnap, isWindows } from 'vs/base/common/platform';\nimport Severity from 'vs/base/common/severity';\nimport { MessageBoxOptions } from 'vs/base/parts/sandbox/common/electronTypes';\nimport { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';\nimport { IConfirmation, IConfirmationResult, IDialogHandler, IDialogOptions, IShowResult } from 'vs/platform/dialogs/common/dialogs';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { INativeHostService } from 'vs/platform/native/electron-sandbox/native';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { process } from 'vs/base/parts/sandbox/electron-sandbox/globals';\n\ninterface IMassagedMessageBoxOptions {\n\n\t/**\n\t * OS massaged message box options.\n\t */\n\toptions: MessageBoxOptions;\n\n\t/**\n\t * Since the massaged result of the message box options potentially\n\t * changes the order of buttons, we have to keep a map of these\n\t * changes so that we can still return the correct index to the caller.\n\t */\n\tbuttonIndexMap: number[];\n}\n\nexport class NativeDialogHandler implements IDialogHandler {\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@INativeHostService private readonly nativeHostService: INativeHostService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IClipboardService private readonly clipboardService: IClipboardService\n\t) {\n\t}\n\n\tasync confirm(confirmation: IConfirmation): Promise<IConfirmationResult> {\n\t\tthis.logService.trace('DialogService#confirm', confirmation.message);\n\n\t\tconst { options, buttonIndexMap } = this.massageMessageBoxOptions(this.getConfirmOptions(confirmation));\n\n\t\tconst result = await this.nativeHostService.showMessageBox(options);\n\t\treturn {\n\t\t\tconfirmed: buttonIndexMap[result.response] === 0 ? true : false,\n\t\t\tcheckboxChecked: result.checkboxChecked\n\t\t};\n\t}\n\n\tprivate getConfirmOptions(confirmation: IConfirmation): MessageBoxOptions {\n\t\tconst buttons: string[] = [];\n\t\tif (confirmation.primaryButton) {\n\t\t\tbuttons.push(confirmation.primaryButton);\n\t\t} else {\n\t\t\tbuttons.push(localize({ key: 'yesButton', comment: ['&& denotes a mnemonic'] }, \"&&Yes\"));\n\t\t}\n\n\t\tif (confirmation.secondaryButton) {\n\t\t\tbuttons.push(confirmation.secondaryButton);\n\t\t} else if (typeof confirmation.secondaryButton === 'undefined') {\n\t\t\tbuttons.push(localize('cancelButton', \"Cancel\"));\n\t\t}\n\n\t\tconst opts: MessageBoxOptions = {\n\t\t\ttitle: confirmation.title,\n\t\t\tmessage: confirmation.message,\n\t\t\tbuttons,\n\t\t\tcancelId: 1\n\t\t};\n\n\t\tif (confirmation.detail) {\n\t\t\topts.detail = confirmation.detail;\n\t\t}\n\n\t\tif (confirmation.type) {\n\t\t\topts.type = confirmation.type;\n\t\t}\n\n\t\tif (confirmation.checkbox) {\n\t\t\topts.checkboxLabel = confirmation.checkbox.label;\n\t\t\topts.checkboxChecked = confirmation.checkbox.checked;\n\t\t}\n\n\t\treturn opts;\n\t}\n\n\tasync show(severity: Severity, message: string, buttons: string[], dialogOptions?: IDialogOptions): Promise<IShowResult> {\n\t\tthis.logService.trace('DialogService#show', message);\n\n\t\tconst { options, buttonIndexMap } = this.massageMessageBoxOptions({\n\t\t\tmessage,\n\t\t\tbuttons,\n\t\t\ttype: (severity === Severity.Info) ? 'question' : (severity === Severity.Error) ? 'error' : (severity === Severity.Warning) ? 'warning' : 'none',\n\t\t\tcancelId: dialogOptions ? dialogOptions.cancelId : undefined,\n\t\t\tdetail: dialogOptions ? dialogOptions.detail : undefined,\n\t\t\tcheckboxLabel: dialogOptions?.checkbox?.label ?? undefined,\n\t\t\tcheckboxChecked: dialogOptions?.checkbox?.checked ?? undefined\n\t\t});\n\n\t\tconst result = await this.nativeHostService.showMessageBox(options);\n\t\treturn { choice: buttonIndexMap[result.response], checkboxChecked: result.checkboxChecked };\n\t}\n\n\tprivate massageMessageBoxOptions(options: MessageBoxOptions): IMassagedMessageBoxOptions {\n\t\tlet buttonIndexMap = (options.buttons || []).map((button, index) => index);\n\t\tlet buttons = (options.buttons || []).map(button => mnemonicButtonLabel(button));\n\t\tlet cancelId = options.cancelId;\n\n\t\t// Linux: order of buttons is reverse\n\t\t// macOS: also reverse, but the OS handles this for us!\n\t\tif (isLinux) {\n\t\t\tbuttons = buttons.reverse();\n\t\t\tbuttonIndexMap = buttonIndexMap.reverse();\n\t\t}\n\n\t\t// Default Button (always first one)\n\t\toptions.defaultId = buttonIndexMap[0];\n\n\t\t// Cancel Button\n\t\tif (typeof cancelId === 'number') {\n\n\t\t\t// Ensure the cancelId is the correct one from our mapping\n\t\t\tcancelId = buttonIndexMap[cancelId];\n\n\t\t\t// macOS/Linux: the cancel button should always be to the left of the primary action\n\t\t\t// if we see more than 2 buttons, move the cancel one to the left of the primary\n\t\t\tif (!isWindows && buttons.length > 2 && cancelId !== 1) {\n\t\t\t\tconst cancelButton = buttons[cancelId];\n\t\t\t\tbuttons.splice(cancelId, 1);\n\t\t\t\tbuttons.splice(1, 0, cancelButton);\n\n\t\t\t\tconst cancelButtonIndex = buttonIndexMap[cancelId];\n\t\t\t\tbuttonIndexMap.splice(cancelId, 1);\n\t\t\t\tbuttonIndexMap.splice(1, 0, cancelButtonIndex);\n\n\t\t\t\tcancelId = 1;\n\t\t\t}\n\t\t}\n\n\t\toptions.buttons = buttons;\n\t\toptions.cancelId = cancelId;\n\t\toptions.noLink = true;\n\t\toptions.title = options.title || this.productService.nameLong;\n\n\t\treturn { options, buttonIndexMap };\n\t}\n\n\tinput(): never {\n\t\tthrow new Error('Unsupported'); // we have no native API for password dialogs in Electron\n\t}\n\n\tasync about(): Promise<void> {\n\t\tlet version = this.productService.version;\n\t\tif (this.productService.target) {\n\t\t\tversion = `${version} (${this.productService.target} setup)`;\n\t\t} else if (this.productService.darwinUniversalAssetId) {\n\t\t\tversion = `${version} (Universal)`;\n\t\t}\n\n\t\tconst osProps = await this.nativeHostService.getOSProperties();\n\n\t\tconst detailString = (useAgo: boolean): string => {\n\t\t\treturn localize({ key: 'aboutDetail', comment: ['Electron, Chrome, Node.js and V8 are product names that need no translation'] },\n\t\t\t\t\"Version: {0}\\nCommit: {1}\\nDate: {2}\\nElectron: {3}\\nChrome: {4}\\nNode.js: {5}\\nV8: {6}\\nOS: {7}\",\n\t\t\t\tversion,\n\t\t\t\tthis.productService.commit || 'Unknown',\n\t\t\t\tthis.productService.date ? `${this.productService.date}${useAgo ? ' (' + fromNow(new Date(this.productService.date), true) + ')' : ''}` : 'Unknown',\n\t\t\t\tprocess.versions['electron'],\n\t\t\t\tprocess.versions['chrome'],\n\t\t\t\tprocess.versions['node'],\n\t\t\t\tprocess.versions['v8'],\n\t\t\t\t`${osProps.type} ${osProps.arch} ${osProps.release}${isLinuxSnap ? ' snap' : ''}`\n\t\t\t);\n\t\t};\n\n\t\tconst detail = detailString(true);\n\t\tconst detailToCopy = detailString(false);\n\n\t\tconst ok = localize('okButton', \"OK\");\n\t\tconst copy = mnemonicButtonLabel(localize({ key: 'copy', comment: ['&& denotes a mnemonic'] }, \"&&Copy\"));\n\t\tlet buttons: string[];\n\t\tif (isLinux) {\n\t\t\tbuttons = [copy, ok];\n\t\t} else {\n\t\t\tbuttons = [ok, copy];\n\t\t}\n\n\t\tconst result = await this.nativeHostService.showMessageBox({\n\t\t\ttitle: this.productService.nameLong,\n\t\t\ttype: 'info',\n\t\t\tmessage: this.productService.nameLong,\n\t\t\tdetail: `\\n${detail}`,\n\t\t\tbuttons,\n\t\t\tnoLink: true,\n\t\t\tdefaultId: buttons.indexOf(ok),\n\t\t\tcancelId: buttons.indexOf(ok)\n\t\t});\n\n\t\tif (buttons[result.response] === copy) {\n\t\t\tthis.clipboardService.writeText(detailToCopy);\n\t\t}\n\t}\n}\n"]}