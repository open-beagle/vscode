{"version":3,"file":"sandbox.simpleservices.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/electron-sandbox/sandbox.simpleservices.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/* eslint-disable code-import-patterns */\n\nimport { URI } from 'vs/base/common/uri';\nimport { InMemoryFileSystemProvider } from 'vs/platform/files/common/inMemoryFilesystemProvider';\nimport { Event } from 'vs/base/common/event';\nimport { IAddressProvider } from 'vs/platform/remote/common/remoteAgentConnection';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IExtensionService, NullExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { IProcessEnvironment, isWindows, OperatingSystem } from 'vs/base/common/platform';\nimport { IWebviewService, WebviewContentOptions, WebviewElement, WebviewExtensionDescription, WebviewOptions, WebviewOverlay } from 'vs/workbench/contrib/webview/browser/webview';\nimport { ITunnelProvider, ITunnelService, RemoteTunnel, TunnelProviderFeatures } from 'vs/platform/remote/common/tunnel';\nimport { Disposable, IDisposable } from 'vs/base/common/lifecycle';\nimport { joinPath } from 'vs/base/common/resources';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { TerminalInstanceService } from 'vs/workbench/contrib/terminal/browser/terminalInstanceService';\nimport { ITerminalInstanceService } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { SearchService } from 'vs/workbench/services/search/common/searchService';\nimport { ISearchService } from 'vs/workbench/services/search/common/search';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IUriIdentityService } from 'vs/workbench/services/uriIdentity/common/uriIdentity';\nimport { INativeWorkbenchEnvironmentService } from 'vs/workbench/services/environment/electron-sandbox/environmentService';\nimport { IShellLaunchConfigResolveOptions, ITerminalProfile, ITerminalProfileResolverService } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { IShellLaunchConfig } from 'vs/platform/terminal/common/terminal';\n\n//#region Environment\n\n//#region Workspace\n\nexport const simpleWorkspaceDir = URI.file(isWindows ? '\\\\simpleWorkspace' : '/simpleWorkspace');\n\n//#endregion\n\n\n//#region Files\n\nclass SimpleFileSystemProvider extends InMemoryFileSystemProvider { }\n\nexport const simpleFileSystemProvider = new SimpleFileSystemProvider();\n\nexport async function initFileSystem(environmentService: INativeWorkbenchEnvironmentService, fileService: IFileService): Promise<void> {\n\tawait fileService.createFolder(environmentService.userHome);\n\tawait fileService.createFolder(environmentService.tmpDir);\n\n\tconst userData = URI.file(environmentService.userDataPath);\n\tawait fileService.writeFile(joinPath(userData, 'User', 'settings.json'), VSBuffer.fromString(JSON.stringify({\n\t\t'window.zoomLevel': 1,\n\t\t'workbench.colorTheme': 'Default Light+',\n\t}, undefined, '\\t')));\n\n\tawait fileService.writeFile(joinPath(userData, 'User', 'keybindings.json'), VSBuffer.fromString(JSON.stringify([\n\t\t{\n\t\t\t'key': 'f12',\n\t\t\t'command': 'workbench.action.toggleDevTools'\n\t\t}\n\t], undefined, '\\t')));\n}\n\nfunction createWorkspaceFile(parent: string, name: string, content: string = ''): void {\n\tsimpleFileSystemProvider.writeFile(joinPath(simpleWorkspaceDir, parent, name), VSBuffer.fromString(content).buffer, { create: true, overwrite: true, unlock: false });\n}\n\nfunction createWorkspaceFolder(name: string): void {\n\tsimpleFileSystemProvider.mkdir(joinPath(simpleWorkspaceDir, name));\n}\n\ncreateWorkspaceFolder('');\ncreateWorkspaceFolder('src');\ncreateWorkspaceFolder('test');\n\ncreateWorkspaceFile('', '.gitignore', `out\nnode_modules\n.vscode-test/\n*.vsix\n`);\n\ncreateWorkspaceFile('', '.vscodeignore', `.vscode/**\n.vscode-test/**\nout/test/**\nsrc/**\n.gitignore\nvsc-extension-quickstart.md\n**/tsconfig.json\n**/tslint.json\n**/*.map\n**/*.ts`);\n\ncreateWorkspaceFile('', 'CHANGELOG.md', `# Change Log\nAll notable changes to the \"test-ts\" extension will be documented in this file.\n\nCheck [Keep a Changelog](http://keepachangelog.com/) for recommendations on how to structure this file.\n\n## [Unreleased]\n- Initial release`);\ncreateWorkspaceFile('', 'package.json', `{\n\t\"name\": \"test-ts\",\n\t\"displayName\": \"test-ts\",\n\t\"description\": \"\",\n\t\"version\": \"0.0.1\",\n\t\"engines\": {\n\t\t\"vscode\": \"^1.31.0\"\n\t},\n\t\"categories\": [\n\t\t\"Other\"\n\t],\n\t\"activationEvents\": [\n\t\t\"onCommand:extension.helloWorld\"\n\t],\n\t\"main\": \"./out/extension.js\",\n\t\"contributes\": {\n\t\t\"commands\": [\n\t\t\t{\n\t\t\t\t\"command\": \"extension.helloWorld\",\n\t\t\t\t\"title\": \"Hello World\"\n\t\t\t}\n\t\t]\n\t},\n\t\"scripts\": {\n\t\t\"vscode:prepublish\": \"npm run compile\",\n\t\t\"compile\": \"tsc -p ./\",\n\t\t\"watch\": \"tsc -watch -p ./\",\n\t\t\"postinstall\": \"node ./node_modules/vscode/bin/install\",\n\t\t\"test\": \"npm run compile && node ./node_modules/vscode/bin/test\"\n\t},\n\t\"devDependencies\": {\n\t\t\"typescript\": \"^3.3.1\",\n\t\t\"vscode\": \"^1.1.28\",\n\t\t\"tslint\": \"^5.12.1\",\n\t\t\"@types/node\": \"^8.10.25\",\n\t\t\"@types/mocha\": \"^2.2.42\"\n\t}\n}\n`);\n\ncreateWorkspaceFile('', 'tsconfig.json', `{\n\t\"compilerOptions\": {\n\t\t\"module\": \"commonjs\",\n\t\t\"target\": \"es6\",\n\t\t\"outDir\": \"out\",\n\t\t\"lib\": [\n\t\t\t\"es6\"\n\t\t],\n\t\t\"sourceMap\": true,\n\t\t\"rootDir\": \"src\",\n\t\t\"strict\": true   /* enable all strict type-checking options */\n\t\t/* Additional Checks */\n\t\t// \"noImplicitReturns\": true, /* Report error when not all code paths in function return a value. */\n\t\t// \"noFallthroughCasesInSwitch\": true, /* Report errors for fallthrough cases in switch statement. */\n\t\t// \"noUnusedParameters\": true,  /* Report errors on unused parameters. */\n\t},\n\t\"exclude\": [\n\t\t\"node_modules\",\n\t\t\".vscode-test\"\n\t]\n}\n`);\n\ncreateWorkspaceFile('', 'tslint.json', `{\n\t\"rules\": {\n\t\t\"no-string-throw\": true,\n\t\t\"no-unused-expression\": true,\n\t\t\"no-duplicate-variable\": true,\n\t\t\"curly\": true,\n\t\t\"class-name\": true,\n\t\t\"semicolon\": [\n\t\t\ttrue,\n\t\t\t\"always\"\n\t\t],\n\t\t\"triple-equals\": true\n\t},\n\t\"defaultSeverity\": \"warning\"\n}\n`);\n\ncreateWorkspaceFile('src', 'extension.ts', `// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from 'vscode';\n\n// this method is called when your extension is activated\n// your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n\n\t// Use the console to output diagnostic information (console.log) and errors (console.error)\n\t// This line of code will only be executed once when your extension is activated\n\t\tconsole.log('Congratulations, your extension \"test-ts\" is now active!');\n\n\t// The command has been defined in the package.json file\n\t// Now provide the implementation of the command with registerCommand\n\t// The commandId parameter must match the command field in package.json\n\tlet disposable = vscode.commands.registerCommand('extension.helloWorld', () => {\n\t\t// The code you place here will be executed every time your command is executed\n\n\t\t// Display a message box to the user\n\t\tvscode.window.showInformationMessage('Hello World!');\n\t});\n\n\tcontext.subscriptions.push(disposable);\n}\n\n// this method is called when your extension is deactivated\nexport function deactivate() {}\n`);\n\ncreateWorkspaceFile('test', 'extension.test.ts', `//\n// Note: This example test is leveraging the Mocha test framework.\n// Please refer to their documentation on https://mochajs.org/ for help.\n//\n\n// The module 'assert' provides assertion methods from node\nimport * as assert from 'assert';\n\n// You can import and use all API from the 'vscode' module\n// as well as import your extension to test it\n// import * as vscode from 'vscode';\n// import * as myExtension from '../extension';\n\n// Defines a Mocha test suite to group tests of similar kind together\nsuite(\"Extension Tests\", function () {\n\n\t// Defines a Mocha unit test\n\ttest(\"Something 1\", function() {\n\t\tassert.strictEqual(-1, [1, 2, 3].indexOf(5));\n\t\tassert.strictEqual(-1, [1, 2, 3].indexOf(0));\n\t});\n});`);\n\ncreateWorkspaceFile('test', 'index.ts', `//\n// PLEASE DO NOT MODIFY / DELETE UNLESS YOU KNOW WHAT YOU ARE DOING\n//\n// This file is providing the test runner to use when running extension tests.\n// By default the test runner in use is Mocha based.\n//\n// You can provide your own test runner if you want to override it by exporting\n// a function run(testRoot: string, clb: (error:Error) => void) that the extension\n// host can call to run the tests. The test runner is expected to use console.log\n// to report the results back to the caller. When the tests are finished, return\n// a possible error to the callback or null if none.\n\nimport * as testRunner from 'vscode/lib/testrunner';\n\n// You can directly control Mocha options by configuring the test runner below\n// See https://github.com/mochajs/mocha/wiki/Using-mocha-programmatically#set-options\n// for more info\ntestRunner.configure({\n\tui: 'tdd', \t\t// the TDD UI is being used in extension.test.ts (suite, test, etc.)\n\tuseColors: true // colored output from test results\n});\n\nmodule.exports = testRunner;`);\n\n//#endregion\n\n\n//#region Extensions\n\nclass SimpleExtensionService extends NullExtensionService { }\n\nregisterSingleton(IExtensionService, SimpleExtensionService);\n\n//#endregion\n\n\n//#region Webview\n\nclass SimpleWebviewService implements IWebviewService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\treadonly activeWebview = undefined;\n\treadonly onDidChangeActiveWebview = Event.None;\n\n\tcreateWebviewElement(id: string, options: WebviewOptions, contentOptions: WebviewContentOptions, extension: WebviewExtensionDescription | undefined): WebviewElement { throw new Error('Method not implemented.'); }\n\tcreateWebviewOverlay(id: string, options: WebviewOptions, contentOptions: WebviewContentOptions, extension: WebviewExtensionDescription | undefined): WebviewOverlay { throw new Error('Method not implemented.'); }\n}\n\nregisterSingleton(IWebviewService, SimpleWebviewService);\n\n//#endregion\n\n\n//#region Tunnel\n\nclass SimpleTunnelService implements ITunnelService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\ttunnels: Promise<readonly RemoteTunnel[]> = Promise.resolve([]);\n\tcanElevate: boolean = false;\n\tcanMakePublic = false;\n\tonTunnelOpened = Event.None;\n\tonTunnelClosed = Event.None;\n\n\tcanTunnel(uri: URI): boolean { return false; }\n\topenTunnel(addressProvider: IAddressProvider | undefined, remoteHost: string | undefined, remotePort: number, localPort?: number): Promise<RemoteTunnel> | undefined { return undefined; }\n\tasync changeTunnelPrivacy(remoteHost: string, remotePort: number, isPublic: boolean): Promise<RemoteTunnel | undefined> { return undefined; }\n\tasync closeTunnel(remoteHost: string, remotePort: number): Promise<void> { }\n\tsetTunnelProvider(provider: ITunnelProvider | undefined, features: TunnelProviderFeatures): IDisposable { return Disposable.None; }\n}\n\nregisterSingleton(ITunnelService, SimpleTunnelService);\n\n//#endregion\n\n\n//#region Terminal Instance\n\nclass SimpleTerminalInstanceService extends TerminalInstanceService { }\n\nregisterSingleton(ITerminalInstanceService, SimpleTerminalInstanceService);\n\n//#endregion\n\n\n//#region Terminal Profile Resolver Service\n\nclass SimpleTerminalProfileResolverService implements ITerminalProfileResolverService {\n\n\t_serviceBrand: undefined;\n\n\tresolveIcon(shellLaunchConfig: IShellLaunchConfig, os: OperatingSystem): void { }\n\tasync resolveShellLaunchConfig(shellLaunchConfig: IShellLaunchConfig, options: IShellLaunchConfigResolveOptions): Promise<void> { }\n\tgetDefaultProfile(options: IShellLaunchConfigResolveOptions): Promise<ITerminalProfile> { throw new Error('Method not implemented.'); }\n\tgetDefaultShell(options: IShellLaunchConfigResolveOptions): Promise<string> { throw new Error('Method not implemented.'); }\n\tgetDefaultShellArgs(options: IShellLaunchConfigResolveOptions): Promise<string | string[]> { throw new Error('Method not implemented.'); }\n\tgetShellEnvironment(remoteAuthority: string | undefined): Promise<IProcessEnvironment> { throw new Error('Method not implemented.'); }\n\tgetSafeConfigValue(key: string, os: OperatingSystem): unknown | undefined { throw new Error('Method not implemented.'); }\n\tgetSafeConfigValueFullKey(key: string): unknown | undefined { throw new Error('Method not implemented.'); }\n}\n\nregisterSingleton(ITerminalProfileResolverService, SimpleTerminalProfileResolverService);\n\n\n//#region Search Service\n\nclass SimpleSearchService extends SearchService {\n\tconstructor(\n\t\t@IModelService modelService: IModelService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@ILogService logService: ILogService,\n\t\t@IExtensionService extensionService: IExtensionService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t) {\n\t\tsuper(modelService, editorService, telemetryService, logService, extensionService, fileService, uriIdentityService);\n\t}\n}\n\nregisterSingleton(ISearchService, SimpleSearchService);\n\n//#endregion\n"]}