{"version":3,"file":"shared.desktop.main.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/electron-sandbox/shared.desktop.main.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport product from 'vs/platform/product/common/product';\nimport { zoomLevelToZoomFactor } from 'vs/platform/windows/common/windows';\nimport { Workbench } from 'vs/workbench/browser/workbench';\nimport { NativeWindow } from 'vs/workbench/electron-sandbox/window';\nimport { setZoomLevel, setZoomFactor, setFullscreen } from 'vs/base/browser/browser';\nimport { domContentLoaded } from 'vs/base/browser/dom';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { URI } from 'vs/base/common/uri';\nimport { WorkspaceService } from 'vs/workbench/services/configuration/browser/configurationService';\nimport { INativeWorkbenchConfiguration, INativeWorkbenchEnvironmentService, NativeWorkbenchEnvironmentService } from 'vs/workbench/services/environment/electron-sandbox/environmentService';\nimport { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';\nimport { isSingleFolderWorkspaceIdentifier, isWorkspaceIdentifier, IWorkspaceInitializationPayload, reviveIdentifier } from 'vs/platform/workspaces/common/workspaces';\nimport { ILoggerService, ILogService } from 'vs/platform/log/common/log';\nimport { NativeStorageService } from 'vs/platform/storage/electron-sandbox/storageService';\nimport { Schemas } from 'vs/base/common/network';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { IWorkbenchConfigurationService } from 'vs/workbench/services/configuration/common/configuration';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IMainProcessService } from 'vs/platform/ipc/electron-sandbox/services';\nimport { RemoteAuthorityResolverService } from 'vs/platform/remote/electron-sandbox/remoteAuthorityResolverService';\nimport { IRemoteAuthorityResolverService } from 'vs/platform/remote/common/remoteAuthorityResolver';\nimport { RemoteAgentService } from 'vs/workbench/services/remote/electron-sandbox/remoteAgentServiceImpl';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { FileService } from 'vs/platform/files/common/fileService';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { RemoteFileSystemProvider } from 'vs/workbench/services/remote/common/remoteAgentFileSystemChannel';\nimport { ConfigurationCache } from 'vs/workbench/services/configuration/electron-sandbox/configurationCache';\nimport { ISignService } from 'vs/platform/sign/common/sign';\nimport { basename } from 'vs/base/common/path';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { INativeHostService } from 'vs/platform/native/electron-sandbox/native';\nimport { NativeHostService } from 'vs/platform/native/electron-sandbox/nativeHostService';\nimport { IUriIdentityService } from 'vs/workbench/services/uriIdentity/common/uriIdentity';\nimport { UriIdentityService } from 'vs/workbench/services/uriIdentity/common/uriIdentityService';\nimport { KeyboardLayoutService } from 'vs/workbench/services/keybinding/electron-sandbox/nativeKeyboardLayout';\nimport { IKeyboardLayoutService } from 'vs/platform/keyboardLayout/common/keyboardLayout';\nimport { ElectronIPCMainProcessService } from 'vs/platform/ipc/electron-sandbox/mainProcessService';\nimport { LoggerChannelClient, LogLevelChannelClient } from 'vs/platform/log/common/logIpc';\nimport { ProxyChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { NativeLogService } from 'vs/workbench/services/log/electron-sandbox/logService';\nimport { WorkspaceTrustManagementService } from 'vs/workbench/services/workspaces/common/workspaceTrust';\nimport { IWorkspaceTrustManagementService } from 'vs/platform/workspace/common/workspaceTrust';\nimport { registerWindowDriver } from 'vs/platform/driver/electron-sandbox/driver';\n\nexport abstract class SharedDesktopMain extends Disposable {\n\n\tconstructor(\n\t\tprotected readonly configuration: INativeWorkbenchConfiguration\n\t) {\n\t\tsuper();\n\n\t\tthis.init();\n\t}\n\n\tprivate init(): void {\n\n\t\t// Massage configuration file URIs\n\t\tthis.reviveUris();\n\n\t\t// Browser config\n\t\tconst zoomLevel = this.configuration.zoomLevel || 0;\n\t\tsetZoomFactor(zoomLevelToZoomFactor(zoomLevel));\n\t\tsetZoomLevel(zoomLevel, true /* isTrusted */);\n\t\tsetFullscreen(!!this.configuration.fullscreen);\n\t}\n\n\tprivate reviveUris() {\n\n\t\t// Workspace\n\t\tconst workspace = reviveIdentifier(this.configuration.workspace);\n\t\tif (isWorkspaceIdentifier(workspace) || isSingleFolderWorkspaceIdentifier(workspace)) {\n\t\t\tthis.configuration.workspace = workspace;\n\t\t}\n\n\t\t// Files\n\t\tconst filesToWait = this.configuration.filesToWait;\n\t\tconst filesToWaitPaths = filesToWait?.paths;\n\t\t[filesToWaitPaths, this.configuration.filesToOpenOrCreate, this.configuration.filesToDiff].forEach(paths => {\n\t\t\tif (Array.isArray(paths)) {\n\t\t\t\tpaths.forEach(path => {\n\t\t\t\t\tif (path.fileUri) {\n\t\t\t\t\t\tpath.fileUri = URI.revive(path.fileUri);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tif (filesToWait) {\n\t\t\tfilesToWait.waitMarkerFileUri = URI.revive(filesToWait.waitMarkerFileUri);\n\t\t}\n\t}\n\n\tasync open(): Promise<void> {\n\n\t\t// Init services and wait for DOM to be ready in parallel\n\t\tconst [services] = await Promise.all([this.initServices(), domContentLoaded()]);\n\n\t\t// Create Workbench\n\t\tconst workbench = new Workbench(document.body, services.serviceCollection, services.logService);\n\n\t\t// Listeners\n\t\tthis.registerListeners(workbench, services.storageService);\n\n\t\t// Startup\n\t\tconst instantiationService = workbench.startup();\n\n\t\t// Window\n\t\tthis._register(instantiationService.createInstance(NativeWindow));\n\n\t\t// Logging\n\t\tservices.logService.trace('workbench configuration', JSON.stringify(this.configuration));\n\n\t\t// Driver\n\t\tif (this.configuration.driver) {\n\t\t\tinstantiationService.invokeFunction(async accessor => this._register(await registerWindowDriver(accessor, this.configuration.windowId)));\n\t\t}\n\t}\n\n\tprivate registerListeners(workbench: Workbench, storageService: NativeStorageService): void {\n\n\t\t// Workbench Lifecycle\n\t\tthis._register(workbench.onWillShutdown(event => event.join(storageService.close(), 'join.closeStorage')));\n\t\tthis._register(workbench.onDidShutdown(() => this.dispose()));\n\t}\n\n\tprotected abstract registerFileSystemProviders(environmentService: INativeWorkbenchEnvironmentService, fileService: IFileService, logService: ILogService, nativeHostService: INativeHostService): void | Promise<void>;\n\n\tprivate async initServices(): Promise<{ serviceCollection: ServiceCollection, logService: ILogService, storageService: NativeStorageService }> {\n\t\tconst serviceCollection = new ServiceCollection();\n\n\n\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t\t//\n\t\t// NOTE: Please do NOT register services here. Use `registerSingleton()`\n\t\t//       from `workbench.common.main.ts` if the service is shared between\n\t\t//       desktop and web or `workbench.sandbox.main.ts` if the service\n\t\t//       is desktop only.\n\t\t//\n\t\t//       DO NOT add services to `workbench.desktop.main.ts`, always add\n\t\t//       to `workbench.sandbox.main.ts` to support our Electron sandbox\n\t\t//\n\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\n\t\t// Main Process\n\t\tconst mainProcessService = this._register(new ElectronIPCMainProcessService(this.configuration.windowId));\n\t\tserviceCollection.set(IMainProcessService, mainProcessService);\n\n\t\t// Product\n\t\tconst productService: IProductService = { _serviceBrand: undefined, ...product };\n\t\tserviceCollection.set(IProductService, productService);\n\n\t\t// Environment\n\t\tconst environmentService = new NativeWorkbenchEnvironmentService(this.configuration, productService);\n\t\tserviceCollection.set(INativeWorkbenchEnvironmentService, environmentService);\n\n\t\t// Logger\n\t\tconst logLevelChannelClient = new LogLevelChannelClient(mainProcessService.getChannel('logLevel'));\n\t\tconst loggerService = new LoggerChannelClient(environmentService.configuration.logLevel, logLevelChannelClient.onDidChangeLogLevel, mainProcessService.getChannel('logger'));\n\t\tserviceCollection.set(ILoggerService, loggerService);\n\n\t\t// Log\n\t\tconst logService = this._register(new NativeLogService(`renderer${this.configuration.windowId}`, environmentService.configuration.logLevel, loggerService, logLevelChannelClient, environmentService));\n\t\tserviceCollection.set(ILogService, logService);\n\n\t\t// Remote\n\t\tconst remoteAuthorityResolverService = new RemoteAuthorityResolverService();\n\t\tserviceCollection.set(IRemoteAuthorityResolverService, remoteAuthorityResolverService);\n\n\n\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t\t//\n\t\t// NOTE: Please do NOT register services here. Use `registerSingleton()`\n\t\t//       from `workbench.common.main.ts` if the service is shared between\n\t\t//       desktop and web or `workbench.sandbox.main.ts` if the service\n\t\t//       is desktop only.\n\t\t//\n\t\t//       DO NOT add services to `workbench.desktop.main.ts`, always add\n\t\t//       to `workbench.sandbox.main.ts` to support our Electron sandbox\n\t\t//\n\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\n\t\t// Sign\n\t\tconst signService = ProxyChannel.toService<ISignService>(mainProcessService.getChannel('sign'));\n\t\tserviceCollection.set(ISignService, signService);\n\n\t\t// Remote Agent\n\t\tconst remoteAgentService = this._register(new RemoteAgentService(environmentService, productService, remoteAuthorityResolverService, signService, logService));\n\t\tserviceCollection.set(IRemoteAgentService, remoteAgentService);\n\n\t\t// Native Host\n\t\tconst nativeHostService = new NativeHostService(this.configuration.windowId, mainProcessService) as INativeHostService;\n\t\tserviceCollection.set(INativeHostService, nativeHostService);\n\n\t\t// Files\n\t\tconst fileService = this._register(new FileService(logService));\n\t\tserviceCollection.set(IFileService, fileService);\n\n\t\tconst result = this.registerFileSystemProviders(environmentService, fileService, logService, nativeHostService);\n\t\tif (result instanceof Promise) {\n\t\t\tawait result;\n\t\t}\n\n\t\t// Uri Identity\n\t\tconst uriIdentityService = new UriIdentityService(fileService);\n\t\tserviceCollection.set(IUriIdentityService, uriIdentityService);\n\n\n\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t\t//\n\t\t// NOTE: Please do NOT register services here. Use `registerSingleton()`\n\t\t//       from `workbench.common.main.ts` if the service is shared between\n\t\t//       desktop and web or `workbench.sandbox.main.ts` if the service\n\t\t//       is desktop only.\n\t\t//\n\t\t//       DO NOT add services to `workbench.desktop.main.ts`, always add\n\t\t//       to `workbench.sandbox.main.ts` to support our Electron sandbox\n\t\t//\n\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\n\t\tconst connection = remoteAgentService.getConnection();\n\t\tif (connection) {\n\t\t\tconst remoteFileSystemProvider = this._register(new RemoteFileSystemProvider(remoteAgentService));\n\t\t\tfileService.registerProvider(Schemas.vscodeRemote, remoteFileSystemProvider);\n\t\t}\n\n\t\tconst payload = this.resolveWorkspaceInitializationPayload(environmentService);\n\n\t\tconst [configurationService, storageService] = await Promise.all([\n\t\t\tthis.createWorkspaceService(payload, environmentService, fileService, remoteAgentService, uriIdentityService, logService).then(service => {\n\n\t\t\t\t// Workspace\n\t\t\t\tserviceCollection.set(IWorkspaceContextService, service);\n\n\t\t\t\t// Configuration\n\t\t\t\tserviceCollection.set(IWorkbenchConfigurationService, service);\n\n\t\t\t\treturn service;\n\t\t\t}),\n\n\t\t\tthis.createStorageService(payload, environmentService, mainProcessService).then(service => {\n\n\t\t\t\t// Storage\n\t\t\t\tserviceCollection.set(IStorageService, service);\n\n\t\t\t\treturn service;\n\t\t\t}),\n\n\t\t\tthis.createKeyboardLayoutService(mainProcessService).then(service => {\n\n\t\t\t\t// KeyboardLayout\n\t\t\t\tserviceCollection.set(IKeyboardLayoutService, service);\n\n\t\t\t\treturn service;\n\t\t\t})\n\t\t]);\n\n\t\t// Workspace Trust Service\n\t\tconst workspaceTrustManagementService = new WorkspaceTrustManagementService(configurationService, environmentService, storageService, uriIdentityService, configurationService);\n\t\tserviceCollection.set(IWorkspaceTrustManagementService, workspaceTrustManagementService);\n\n\t\t// Update workspace trust so that configuration is updated accordingly\n\t\tconfigurationService.updateWorkspaceTrust(workspaceTrustManagementService.isWorkpaceTrusted());\n\t\tthis._register(workspaceTrustManagementService.onDidChangeTrust(() => configurationService.updateWorkspaceTrust(workspaceTrustManagementService.isWorkpaceTrusted())));\n\n\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t\t//\n\t\t// NOTE: Please do NOT register services here. Use `registerSingleton()`\n\t\t//       from `workbench.common.main.ts` if the service is shared between\n\t\t//       desktop and web or `workbench.sandbox.main.ts` if the service\n\t\t//       is desktop only.\n\t\t//\n\t\t//       DO NOT add services to `workbench.desktop.main.ts`, always add\n\t\t//       to `workbench.sandbox.main.ts` to support our Electron sandbox\n\t\t//\n\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\n\t\treturn { serviceCollection, logService, storageService };\n\t}\n\n\tprivate resolveWorkspaceInitializationPayload(environmentService: INativeWorkbenchEnvironmentService): IWorkspaceInitializationPayload {\n\t\tlet workspaceInitializationPayload: IWorkspaceInitializationPayload | undefined = this.configuration.workspace;\n\n\t\t// Fallback to empty workspace if we have no payload yet.\n\t\tif (!workspaceInitializationPayload) {\n\t\t\tlet id: string;\n\t\t\tif (this.configuration.backupPath) {\n\t\t\t\tid = basename(this.configuration.backupPath); // we know the backupPath must be a unique path so we leverage its name as workspace ID\n\t\t\t} else if (environmentService.isExtensionDevelopment) {\n\t\t\t\tid = 'ext-dev'; // extension development window never stores backups and is a singleton\n\t\t\t} else {\n\t\t\t\tthrow new Error('Unexpected window configuration without backupPath');\n\t\t\t}\n\n\t\t\tworkspaceInitializationPayload = { id };\n\t\t}\n\n\t\treturn workspaceInitializationPayload;\n\t}\n\n\tprivate async createWorkspaceService(payload: IWorkspaceInitializationPayload, environmentService: INativeWorkbenchEnvironmentService, fileService: FileService, remoteAgentService: IRemoteAgentService, uriIdentityService: IUriIdentityService, logService: ILogService): Promise<WorkspaceService> {\n\t\tconst workspaceService = new WorkspaceService({ remoteAuthority: environmentService.remoteAuthority, configurationCache: new ConfigurationCache(URI.file(environmentService.userDataPath), fileService) }, environmentService, fileService, remoteAgentService, uriIdentityService, logService);\n\n\t\ttry {\n\t\t\tawait workspaceService.initialize(payload);\n\n\t\t\treturn workspaceService;\n\t\t} catch (error) {\n\t\t\tonUnexpectedError(error);\n\n\t\t\treturn workspaceService;\n\t\t}\n\t}\n\n\tprivate async createStorageService(payload: IWorkspaceInitializationPayload, environmentService: INativeWorkbenchEnvironmentService, mainProcessService: IMainProcessService): Promise<NativeStorageService> {\n\t\tconst storageService = new NativeStorageService(payload, mainProcessService, environmentService);\n\n\t\ttry {\n\t\t\tawait storageService.initialize();\n\n\t\t\treturn storageService;\n\t\t} catch (error) {\n\t\t\tonUnexpectedError(error);\n\n\t\t\treturn storageService;\n\t\t}\n\t}\n\n\tprivate async createKeyboardLayoutService(mainProcessService: IMainProcessService): Promise<KeyboardLayoutService> {\n\t\tconst keyboardLayoutService = new KeyboardLayoutService(mainProcessService);\n\n\t\ttry {\n\t\t\tawait keyboardLayoutService.initialize();\n\n\t\t\treturn keyboardLayoutService;\n\t\t} catch (error) {\n\t\t\tonUnexpectedError(error);\n\n\t\t\treturn keyboardLayoutService;\n\t\t}\n\t}\n}\n"]}