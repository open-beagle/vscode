{"version":3,"file":"progressIndicator.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/progress/test/browser/progressIndicator.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { IEditorControl } from 'vs/workbench/common/editor';\nimport { CompositeScope, CompositeProgressIndicator } from 'vs/workbench/services/progress/browser/progressIndicator';\nimport { IViewletService } from 'vs/workbench/services/viewlet/browser/viewlet';\nimport { IPanelService } from 'vs/workbench/services/panel/common/panelService';\nimport { IViewlet } from 'vs/workbench/common/viewlet';\nimport { TestViewletService, TestPanelService, TestViewsService } from 'vs/workbench/test/browser/workbenchTestServices';\nimport { Event } from 'vs/base/common/event';\nimport { IView, IViewPaneContainer, IViewsService } from 'vs/workbench/common/views';\n\nclass TestViewlet implements IViewlet {\n\n\tconstructor(private id: string) { }\n\n\treadonly onDidBlur = Event.None;\n\treadonly onDidFocus = Event.None;\n\n\thasFocus() { return false; }\n\tgetId(): string { return this.id; }\n\tgetTitle(): string { return this.id; }\n\tgetControl(): IEditorControl { return null!; }\n\tfocus(): void { }\n\tgetOptimalWidth(): number { return 10; }\n\topenView<T extends IView>(id: string, focus?: boolean): T | undefined { return undefined; }\n\tgetViewPaneContainer(): IViewPaneContainer { return null!; }\n\tsaveState(): void { }\n}\n\nclass TestCompositeScope extends CompositeScope {\n\tisActive: boolean = false;\n\n\tconstructor(viewletService: IViewletService, panelService: IPanelService, viewsService: IViewsService, scopeId: string) {\n\t\tsuper(viewletService, panelService, viewsService, scopeId);\n\t}\n\n\tonScopeActivated() { this.isActive = true; }\n\tonScopeDeactivated() { this.isActive = false; }\n}\n\nclass TestProgressBar {\n\tfTotal: number = 0;\n\tfWorked: number = 0;\n\tfInfinite: boolean = false;\n\tfDone: boolean = false;\n\n\tinfinite() {\n\t\tthis.fDone = null!;\n\t\tthis.fInfinite = true;\n\n\t\treturn this;\n\t}\n\n\ttotal(total: number) {\n\t\tthis.fDone = null!;\n\t\tthis.fTotal = total;\n\n\t\treturn this;\n\t}\n\n\thasTotal() {\n\t\treturn !!this.fTotal;\n\t}\n\n\tworked(worked: number) {\n\t\tthis.fDone = null!;\n\n\t\tif (this.fWorked) {\n\t\t\tthis.fWorked += worked;\n\t\t} else {\n\t\t\tthis.fWorked = worked;\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tdone() {\n\t\tthis.fDone = true;\n\n\t\tthis.fInfinite = null!;\n\t\tthis.fWorked = null!;\n\t\tthis.fTotal = null!;\n\n\t\treturn this;\n\t}\n\n\tstop() {\n\t\treturn this.done();\n\t}\n\n\tshow(): void { }\n\n\thide(): void { }\n}\n\nsuite('Progress Indicator', () => {\n\n\ttest('CompositeScope', () => {\n\t\tlet viewletService = new TestViewletService();\n\t\tlet panelService = new TestPanelService();\n\t\tlet viewsService = new TestViewsService();\n\t\tlet service = new TestCompositeScope(viewletService, panelService, viewsService, 'test.scopeId');\n\t\tconst testViewlet = new TestViewlet('test.scopeId');\n\n\t\tassert(!service.isActive);\n\t\tviewletService.onDidViewletOpenEmitter.fire(testViewlet);\n\t\tassert(service.isActive);\n\n\t\tviewletService.onDidViewletCloseEmitter.fire(testViewlet);\n\t\tassert(!service.isActive);\n\n\t\tviewsService.onDidChangeViewVisibilityEmitter.fire({ id: 'test.scopeId', visible: true });\n\t\tassert(service.isActive);\n\n\t\tviewsService.onDidChangeViewVisibilityEmitter.fire({ id: 'test.scopeId', visible: false });\n\t\tassert(!service.isActive);\n\t});\n\n\ttest('CompositeProgressIndicator', async () => {\n\t\tlet testProgressBar = new TestProgressBar();\n\t\tlet viewletService = new TestViewletService();\n\t\tlet panelService = new TestPanelService();\n\t\tlet viewsService = new TestViewsService();\n\t\tlet service = new CompositeProgressIndicator((<any>testProgressBar), 'test.scopeId', true, viewletService, panelService, viewsService);\n\n\t\t// Active: Show (Infinite)\n\t\tlet fn = service.show(true);\n\t\tassert.strictEqual(true, testProgressBar.fInfinite);\n\t\tfn.done();\n\t\tassert.strictEqual(true, testProgressBar.fDone);\n\n\t\t// Active: Show (Total / Worked)\n\t\tfn = service.show(100);\n\t\tassert.strictEqual(false, !!testProgressBar.fInfinite);\n\t\tassert.strictEqual(100, testProgressBar.fTotal);\n\t\tfn.worked(20);\n\t\tassert.strictEqual(20, testProgressBar.fWorked);\n\t\tfn.total(80);\n\t\tassert.strictEqual(80, testProgressBar.fTotal);\n\t\tfn.done();\n\t\tassert.strictEqual(true, testProgressBar.fDone);\n\n\t\t// Inactive: Show (Infinite)\n\t\tconst testViewlet = new TestViewlet('test.scopeId');\n\t\tviewletService.onDidViewletCloseEmitter.fire(testViewlet);\n\t\tservice.show(true);\n\t\tassert.strictEqual(false, !!testProgressBar.fInfinite);\n\t\tviewletService.onDidViewletOpenEmitter.fire(testViewlet);\n\t\tassert.strictEqual(true, testProgressBar.fInfinite);\n\n\t\t// Inactive: Show (Total / Worked)\n\t\tviewletService.onDidViewletCloseEmitter.fire(testViewlet);\n\t\tfn = service.show(100);\n\t\tfn.total(80);\n\t\tfn.worked(20);\n\t\tassert.strictEqual(false, !!testProgressBar.fTotal);\n\t\tviewletService.onDidViewletOpenEmitter.fire(testViewlet);\n\t\tassert.strictEqual(20, testProgressBar.fWorked);\n\t\tassert.strictEqual(80, testProgressBar.fTotal);\n\n\t\t// Acive: Show While\n\t\tlet p = Promise.resolve(null);\n\t\tawait service.showWhile(p);\n\t\tassert.strictEqual(true, testProgressBar.fDone);\n\t\tviewletService.onDidViewletCloseEmitter.fire(testViewlet);\n\t\tp = Promise.resolve(null);\n\t\tawait service.showWhile(p);\n\t\tassert.strictEqual(true, testProgressBar.fDone);\n\t\tviewletService.onDidViewletOpenEmitter.fire(testViewlet);\n\t\tassert.strictEqual(true, testProgressBar.fDone);\n\n\t\t// Visible view: Show (Infinite)\n\t\tviewsService.onDidChangeViewVisibilityEmitter.fire({ id: 'test.scopeId', visible: true });\n\t\tfn = service.show(true);\n\t\tassert.strictEqual(true, testProgressBar.fInfinite);\n\t\tfn.done();\n\t\tassert.strictEqual(true, testProgressBar.fDone);\n\n\t\t// Hidden view: Show (Infinite)\n\t\tviewsService.onDidChangeViewVisibilityEmitter.fire({ id: 'test.scopeId', visible: false });\n\t\tservice.show(true);\n\t\tassert.strictEqual(false, !!testProgressBar.fInfinite);\n\t\tviewsService.onDidChangeViewVisibilityEmitter.fire({ id: 'test.scopeId', visible: true });\n\t\tassert.strictEqual(true, testProgressBar.fInfinite);\n\t});\n});\n"]}