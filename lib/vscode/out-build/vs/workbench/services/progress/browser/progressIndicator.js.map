{"version":3,"file":"progressIndicator.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/progress/browser/progressIndicator.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { isUndefinedOrNull } from 'vs/base/common/types';\nimport { ProgressBar } from 'vs/base/browser/ui/progressbar/progressbar';\nimport { IViewletService } from 'vs/workbench/services/viewlet/browser/viewlet';\nimport { IPanelService } from 'vs/workbench/services/panel/common/panelService';\nimport { IProgressRunner, IProgressIndicator, emptyProgressRunner } from 'vs/platform/progress/common/progress';\nimport { IEditorGroupView } from 'vs/workbench/browser/parts/editor/editor';\nimport { IViewsService } from 'vs/workbench/common/views';\n\nexport class ProgressBarIndicator extends Disposable implements IProgressIndicator {\n\n\tconstructor(protected progressbar: ProgressBar) {\n\t\tsuper();\n\t}\n\n\tshow(infinite: true, delay?: number): IProgressRunner;\n\tshow(total: number, delay?: number): IProgressRunner;\n\tshow(infiniteOrTotal: true | number, delay?: number): IProgressRunner {\n\t\tif (typeof infiniteOrTotal === 'boolean') {\n\t\t\tthis.progressbar.infinite().show(delay);\n\t\t} else {\n\t\t\tthis.progressbar.total(infiniteOrTotal).show(delay);\n\t\t}\n\n\t\treturn {\n\t\t\ttotal: (total: number) => {\n\t\t\t\tthis.progressbar.total(total);\n\t\t\t},\n\n\t\t\tworked: (worked: number) => {\n\t\t\t\tif (this.progressbar.hasTotal()) {\n\t\t\t\t\tthis.progressbar.worked(worked);\n\t\t\t\t} else {\n\t\t\t\t\tthis.progressbar.infinite().show();\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tdone: () => {\n\t\t\t\tthis.progressbar.stop().hide();\n\t\t\t}\n\t\t};\n\t}\n\n\tasync showWhile(promise: Promise<unknown>, delay?: number): Promise<void> {\n\t\ttry {\n\t\t\tthis.progressbar.infinite().show(delay);\n\n\t\t\tawait promise;\n\t\t} catch (error) {\n\t\t\t// ignore\n\t\t} finally {\n\t\t\tthis.progressbar.stop().hide();\n\t\t}\n\t}\n}\n\nexport class EditorProgressIndicator extends ProgressBarIndicator {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(progressBar: ProgressBar, private readonly group: IEditorGroupView) {\n\t\tsuper(progressBar);\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners() {\n\t\tthis._register(this.group.onDidCloseEditor(e => {\n\t\t\tif (this.group.isEmpty) {\n\t\t\t\tthis.progressbar.stop().hide();\n\t\t\t}\n\t\t}));\n\t}\n\n\toverride show(infinite: true, delay?: number): IProgressRunner;\n\toverride show(total: number, delay?: number): IProgressRunner;\n\toverride show(infiniteOrTotal: true | number, delay?: number): IProgressRunner {\n\n\t\t// No editor open: ignore any progress reporting\n\t\tif (this.group.isEmpty) {\n\t\t\treturn emptyProgressRunner;\n\t\t}\n\n\t\tif (infiniteOrTotal === true) {\n\t\t\treturn super.show(true, delay);\n\t\t}\n\n\t\treturn super.show(infiniteOrTotal, delay);\n\t}\n\n\toverride async showWhile(promise: Promise<unknown>, delay?: number): Promise<void> {\n\n\t\t// No editor open: ignore any progress reporting\n\t\tif (this.group.isEmpty) {\n\t\t\ttry {\n\t\t\t\tawait promise;\n\t\t\t} catch (error) {\n\t\t\t\t// ignore\n\t\t\t}\n\t\t}\n\n\t\treturn super.showWhile(promise, delay);\n\t}\n}\n\nnamespace ProgressIndicatorState {\n\n\texport const enum Type {\n\t\tNone,\n\t\tDone,\n\t\tInfinite,\n\t\tWhile,\n\t\tWork\n\t}\n\n\texport const None = { type: Type.None } as const;\n\texport const Done = { type: Type.Done } as const;\n\texport const Infinite = { type: Type.Infinite } as const;\n\n\texport class While {\n\t\treadonly type = Type.While;\n\n\t\tconstructor(\n\t\t\treadonly whilePromise: Promise<unknown>,\n\t\t\treadonly whileStart: number,\n\t\t\treadonly whileDelay: number,\n\t\t) { }\n\t}\n\n\texport class Work {\n\t\treadonly type = Type.Work;\n\n\t\tconstructor(\n\t\t\treadonly total: number | undefined,\n\t\t\treadonly worked: number | undefined\n\t\t) { }\n\t}\n\n\texport type State =\n\t\ttypeof None\n\t\t| typeof Done\n\t\t| typeof Infinite\n\t\t| While\n\t\t| Work;\n}\n\nexport abstract class CompositeScope extends Disposable {\n\n\tconstructor(\n\t\tprivate viewletService: IViewletService,\n\t\tprivate panelService: IPanelService,\n\t\tprivate viewsService: IViewsService,\n\t\tprivate scopeId: string\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tregisterListeners(): void {\n\t\tthis._register(this.viewsService.onDidChangeViewVisibility(e => e.visible ? this.onScopeOpened(e.id) : this.onScopeClosed(e.id)));\n\n\t\tthis._register(this.viewletService.onDidViewletOpen(viewlet => this.onScopeOpened(viewlet.getId())));\n\t\tthis._register(this.panelService.onDidPanelOpen(({ panel }) => this.onScopeOpened(panel.getId())));\n\n\t\tthis._register(this.viewletService.onDidViewletClose(viewlet => this.onScopeClosed(viewlet.getId())));\n\t\tthis._register(this.panelService.onDidPanelClose(panel => this.onScopeClosed(panel.getId())));\n\t}\n\n\tprivate onScopeClosed(scopeId: string) {\n\t\tif (scopeId === this.scopeId) {\n\t\t\tthis.onScopeDeactivated();\n\t\t}\n\t}\n\n\tprivate onScopeOpened(scopeId: string) {\n\t\tif (scopeId === this.scopeId) {\n\t\t\tthis.onScopeActivated();\n\t\t}\n\t}\n\n\tabstract onScopeActivated(): void;\n\n\tabstract onScopeDeactivated(): void;\n}\n\nexport class CompositeProgressIndicator extends CompositeScope implements IProgressIndicator {\n\tprivate isActive: boolean;\n\tprivate progressbar: ProgressBar;\n\tprivate progressState: ProgressIndicatorState.State = ProgressIndicatorState.None;\n\n\tconstructor(\n\t\tprogressbar: ProgressBar,\n\t\tscopeId: string,\n\t\tisActive: boolean,\n\t\t@IViewletService viewletService: IViewletService,\n\t\t@IPanelService panelService: IPanelService,\n\t\t@IViewsService viewsService: IViewsService\n\t) {\n\t\tsuper(viewletService, panelService, viewsService, scopeId);\n\n\t\tthis.progressbar = progressbar;\n\t\tthis.isActive = isActive || isUndefinedOrNull(scopeId); // If service is unscoped, enable by default\n\t}\n\n\tonScopeDeactivated(): void {\n\t\tthis.isActive = false;\n\n\t\tthis.progressbar.stop().hide();\n\t}\n\n\tonScopeActivated(): void {\n\t\tthis.isActive = true;\n\n\t\t// Return early if progress state indicates that progress is done\n\t\tif (this.progressState.type === ProgressIndicatorState.Done.type) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Replay Infinite Progress from Promise\n\t\tif (this.progressState.type === ProgressIndicatorState.Type.While) {\n\t\t\tlet delay: number | undefined;\n\t\t\tif (this.progressState.whileDelay > 0) {\n\t\t\t\tconst remainingDelay = this.progressState.whileDelay - (Date.now() - this.progressState.whileStart);\n\t\t\t\tif (remainingDelay > 0) {\n\t\t\t\t\tdelay = remainingDelay;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.doShowWhile(delay);\n\t\t}\n\n\t\t// Replay Infinite Progress\n\t\telse if (this.progressState.type === ProgressIndicatorState.Type.Infinite) {\n\t\t\tthis.progressbar.infinite().show();\n\t\t}\n\n\t\t// Replay Finite Progress (Total & Worked)\n\t\telse if (this.progressState.type === ProgressIndicatorState.Type.Work) {\n\t\t\tif (this.progressState.total) {\n\t\t\t\tthis.progressbar.total(this.progressState.total).show();\n\t\t\t}\n\n\t\t\tif (this.progressState.worked) {\n\t\t\t\tthis.progressbar.worked(this.progressState.worked).show();\n\t\t\t}\n\t\t}\n\t}\n\n\tshow(infinite: true, delay?: number): IProgressRunner;\n\tshow(total: number, delay?: number): IProgressRunner;\n\tshow(infiniteOrTotal: true | number, delay?: number): IProgressRunner {\n\n\t\t// Sort out Arguments\n\t\tif (typeof infiniteOrTotal === 'boolean') {\n\t\t\tthis.progressState = ProgressIndicatorState.Infinite;\n\t\t} else {\n\t\t\tthis.progressState = new ProgressIndicatorState.Work(infiniteOrTotal, undefined);\n\t\t}\n\n\t\t// Active: Show Progress\n\t\tif (this.isActive) {\n\n\t\t\t// Infinite: Start Progressbar and Show after Delay\n\t\t\tif (this.progressState.type === ProgressIndicatorState.Type.Infinite) {\n\t\t\t\tthis.progressbar.infinite().show(delay);\n\t\t\t}\n\n\t\t\t// Finite: Start Progressbar and Show after Delay\n\t\t\telse if (this.progressState.type === ProgressIndicatorState.Type.Work && typeof this.progressState.total === 'number') {\n\t\t\t\tthis.progressbar.total(this.progressState.total).show(delay);\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\ttotal: (total: number) => {\n\t\t\t\tthis.progressState = new ProgressIndicatorState.Work(\n\t\t\t\t\ttotal,\n\t\t\t\t\tthis.progressState.type === ProgressIndicatorState.Type.Work ? this.progressState.worked : undefined);\n\n\t\t\t\tif (this.isActive) {\n\t\t\t\t\tthis.progressbar.total(total);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tworked: (worked: number) => {\n\n\t\t\t\t// Verify first that we are either not active or the progressbar has a total set\n\t\t\t\tif (!this.isActive || this.progressbar.hasTotal()) {\n\t\t\t\t\tthis.progressState = new ProgressIndicatorState.Work(\n\t\t\t\t\t\tthis.progressState.type === ProgressIndicatorState.Type.Work ? this.progressState.total : undefined,\n\t\t\t\t\t\tthis.progressState.type === ProgressIndicatorState.Type.Work && typeof this.progressState.worked === 'number' ? this.progressState.worked + worked : worked);\n\n\t\t\t\t\tif (this.isActive) {\n\t\t\t\t\t\tthis.progressbar.worked(worked);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Otherwise the progress bar does not support worked(), we fallback to infinite() progress\n\t\t\t\telse {\n\t\t\t\t\tthis.progressState = ProgressIndicatorState.Infinite;\n\t\t\t\t\tthis.progressbar.infinite().show();\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tdone: () => {\n\t\t\t\tthis.progressState = ProgressIndicatorState.Done;\n\n\t\t\t\tif (this.isActive) {\n\t\t\t\t\tthis.progressbar.stop().hide();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tasync showWhile(promise: Promise<unknown>, delay?: number): Promise<void> {\n\n\t\t// Join with existing running promise to ensure progress is accurate\n\t\tif (this.progressState.type === ProgressIndicatorState.Type.While) {\n\t\t\tpromise = Promise.all([promise, this.progressState.whilePromise]);\n\t\t}\n\n\t\t// Keep Promise in State\n\t\tthis.progressState = new ProgressIndicatorState.While(promise, delay || 0, Date.now());\n\n\t\ttry {\n\t\t\tthis.doShowWhile(delay);\n\n\t\t\tawait promise;\n\t\t} catch (error) {\n\t\t\t// ignore\n\t\t} finally {\n\n\t\t\t// If this is not the last promise in the list of joined promises, skip this\n\t\t\tif (this.progressState.type !== ProgressIndicatorState.Type.While || this.progressState.whilePromise === promise) {\n\n\t\t\t\t// The while promise is either null or equal the promise we last hooked on\n\t\t\t\tthis.progressState = ProgressIndicatorState.None;\n\n\t\t\t\tif (this.isActive) {\n\t\t\t\t\tthis.progressbar.stop().hide();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate doShowWhile(delay?: number): void {\n\n\t\t// Show Progress when active\n\t\tif (this.isActive) {\n\t\t\tthis.progressbar.infinite().show(delay);\n\t\t}\n\t}\n}\n"]}