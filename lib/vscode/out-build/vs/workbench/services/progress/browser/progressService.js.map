{"version":3,"sources":["vs/workbench/services/progress/browser/progressService.ts"],"names":[],"mappings":"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","file":"progressService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./media/progressService';\n\nimport { localize } from 'vs/nls';\nimport { IDisposable, dispose, DisposableStore, Disposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { IProgressService, IProgressOptions, IProgressStep, ProgressLocation, IProgress, Progress, IProgressCompositeOptions, IProgressNotificationOptions, IProgressRunner, IProgressIndicator, IProgressWindowOptions } from 'vs/platform/progress/common/progress';\nimport { IViewletService } from 'vs/workbench/services/viewlet/browser/viewlet';\nimport { StatusbarAlignment, IStatusbarService, IStatusbarEntryAccessor, IStatusbarEntry } from 'vs/workbench/services/statusbar/common/statusbar';\nimport { timeout } from 'vs/base/common/async';\nimport { ProgressBadge, IActivityService } from 'vs/workbench/services/activity/common/activity';\nimport { INotificationService, Severity, INotificationHandle } from 'vs/platform/notification/common/notification';\nimport { Action } from 'vs/base/common/actions';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { ILayoutService } from 'vs/platform/layout/browser/layoutService';\nimport { Dialog } from 'vs/base/browser/ui/dialog/dialog';\nimport { attachDialogStyler } from 'vs/platform/theme/common/styler';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { StandardKeyboardEvent } from 'vs/base/browser/keyboardEvent';\nimport { EventHelper } from 'vs/base/browser/dom';\nimport { IPanelService } from 'vs/workbench/services/panel/common/panelService';\nimport { parseLinkedText } from 'vs/base/common/linkedText';\nimport { IViewsService, IViewDescriptorService, ViewContainerLocation } from 'vs/workbench/common/views';\n\nexport class ProgressService extends Disposable implements IProgressService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@IActivityService private readonly activityService: IActivityService,\n\t\t@IViewletService private readonly viewletService: IViewletService,\n\t\t@IViewDescriptorService private readonly viewDescriptorService: IViewDescriptorService,\n\t\t@IViewsService private readonly viewsService: IViewsService,\n\t\t@IPanelService private readonly panelService: IPanelService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IStatusbarService private readonly statusbarService: IStatusbarService,\n\t\t@ILayoutService private readonly layoutService: ILayoutService,\n\t\t@IThemeService private readonly themeService: IThemeService,\n\t\t@IKeybindingService private readonly keybindingService: IKeybindingService\n\t) {\n\t\tsuper();\n\t}\n\n\tasync withProgress<R = unknown>(options: IProgressOptions, task: (progress: IProgress<IProgressStep>) => Promise<R>, onDidCancel?: (choice?: number) => void): Promise<R> {\n\t\tconst { location } = options;\n\t\tif (typeof location === 'string') {\n\t\t\tif (this.viewletService.getProgressIndicator(location)) {\n\t\t\t\treturn this.withViewletProgress(location, task, { ...options, location });\n\t\t\t}\n\n\t\t\tif (this.panelService.getProgressIndicator(location)) {\n\t\t\t\treturn this.withPanelProgress(location, task, { ...options, location });\n\t\t\t}\n\n\t\t\tif (this.viewsService.getViewProgressIndicator(location)) {\n\t\t\t\treturn this.withViewProgress(location, task, { ...options, location });\n\t\t\t}\n\n\t\t\tthrow new Error(`Bad progress location: ${location}`);\n\t\t}\n\n\t\tswitch (location) {\n\t\t\tcase ProgressLocation.Notification:\n\t\t\t\treturn this.withNotificationProgress({ ...options, location }, task, onDidCancel);\n\t\t\tcase ProgressLocation.Window:\n\t\t\t\tif ((options as IProgressWindowOptions).command) {\n\t\t\t\t\t// Window progress with command get's shown in the status bar\n\t\t\t\t\treturn this.withWindowProgress({ ...options, location }, task);\n\t\t\t\t}\n\t\t\t\t// Window progress without command can be shown as silent notification\n\t\t\t\t// which will first appear in the status bar and can then be brought to\n\t\t\t\t// the front when clicking.\n\t\t\t\treturn this.withNotificationProgress({ delay: 150 /* default for ProgressLocation.Window */, ...options, silent: true, location: ProgressLocation.Notification }, task, onDidCancel);\n\t\t\tcase ProgressLocation.Explorer:\n\t\t\t\treturn this.withViewletProgress('workbench.view.explorer', task, { ...options, location });\n\t\t\tcase ProgressLocation.Scm:\n\t\t\t\treturn this.withViewletProgress('workbench.view.scm', task, { ...options, location });\n\t\t\tcase ProgressLocation.Extensions:\n\t\t\t\treturn this.withViewletProgress('workbench.view.extensions', task, { ...options, location });\n\t\t\tcase ProgressLocation.Dialog:\n\t\t\t\treturn this.withDialogProgress(options, task, onDidCancel);\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Bad progress location: ${location}`);\n\t\t}\n\t}\n\n\tprivate readonly windowProgressStack: [IProgressOptions, Progress<IProgressStep>][] = [];\n\tprivate windowProgressStatusEntry: IStatusbarEntryAccessor | undefined = undefined;\n\n\tprivate withWindowProgress<R = unknown>(options: IProgressWindowOptions, callback: (progress: IProgress<{ message?: string }>) => Promise<R>): Promise<R> {\n\t\tconst task: [IProgressWindowOptions, Progress<IProgressStep>] = [options, new Progress<IProgressStep>(() => this.updateWindowProgress())];\n\n\t\tconst promise = callback(task[1]);\n\n\t\tlet delayHandle: any = setTimeout(() => {\n\t\t\tdelayHandle = undefined;\n\t\t\tthis.windowProgressStack.unshift(task);\n\t\t\tthis.updateWindowProgress();\n\n\t\t\t// show progress for at least 150ms\n\t\t\tPromise.all([\n\t\t\t\ttimeout(150),\n\t\t\t\tpromise\n\t\t\t]).finally(() => {\n\t\t\t\tconst idx = this.windowProgressStack.indexOf(task);\n\t\t\t\tthis.windowProgressStack.splice(idx, 1);\n\t\t\t\tthis.updateWindowProgress();\n\t\t\t});\n\t\t}, 150);\n\n\t\t// cancel delay if promise finishes below 150ms\n\t\treturn promise.finally(() => clearTimeout(delayHandle));\n\t}\n\n\tprivate updateWindowProgress(idx: number = 0) {\n\n\t\t// We still have progress to show\n\t\tif (idx < this.windowProgressStack.length) {\n\t\t\tconst [options, progress] = this.windowProgressStack[idx];\n\n\t\t\tlet progressTitle = options.title;\n\t\t\tlet progressMessage = progress.value && progress.value.message;\n\t\t\tlet progressCommand = (<IProgressWindowOptions>options).command;\n\t\t\tlet text: string;\n\t\t\tlet title: string;\n\t\t\tconst source = options.source && typeof options.source !== 'string' ? options.source.label : options.source;\n\n\t\t\tif (progressTitle && progressMessage) {\n\t\t\t\t// <title>: <message>\n\t\t\t\ttext = localize('progress.text2', \"{0}: {1}\", progressTitle, progressMessage);\n\t\t\t\ttitle = source ? localize('progress.title3', \"[{0}] {1}: {2}\", source, progressTitle, progressMessage) : text;\n\n\t\t\t} else if (progressTitle) {\n\t\t\t\t// <title>\n\t\t\t\ttext = progressTitle;\n\t\t\t\ttitle = source ? localize('progress.title2', \"[{0}]: {1}\", source, progressTitle) : text;\n\n\t\t\t} else if (progressMessage) {\n\t\t\t\t// <message>\n\t\t\t\ttext = progressMessage;\n\t\t\t\ttitle = source ? localize('progress.title2', \"[{0}]: {1}\", source, progressMessage) : text;\n\n\t\t\t} else {\n\t\t\t\t// no title, no message -> no progress. try with next on stack\n\t\t\t\tthis.updateWindowProgress(idx + 1);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst statusEntryProperties: IStatusbarEntry = {\n\t\t\t\ttext,\n\t\t\t\tshowProgress: true,\n\t\t\t\tariaLabel: text,\n\t\t\t\ttooltip: title,\n\t\t\t\tcommand: progressCommand\n\t\t\t};\n\n\t\t\tif (this.windowProgressStatusEntry) {\n\t\t\t\tthis.windowProgressStatusEntry.update(statusEntryProperties);\n\t\t\t} else {\n\t\t\t\tthis.windowProgressStatusEntry = this.statusbarService.addEntry(statusEntryProperties, 'status.progress', localize('status.progress', \"Progress Message\"), StatusbarAlignment.LEFT);\n\t\t\t}\n\t\t}\n\n\t\t// Progress is done so we remove the status entry\n\t\telse {\n\t\t\tthis.windowProgressStatusEntry?.dispose();\n\t\t\tthis.windowProgressStatusEntry = undefined;\n\t\t}\n\t}\n\n\tprivate withNotificationProgress<P extends Promise<R>, R = unknown>(options: IProgressNotificationOptions, callback: (progress: IProgress<IProgressStep>) => P, onDidCancel?: (choice?: number) => void): P {\n\n\t\tconst progressStateModel = new class extends Disposable {\n\n\t\t\tprivate readonly _onDidReport = this._register(new Emitter<IProgressStep>());\n\t\t\treadonly onDidReport = this._onDidReport.event;\n\n\t\t\tprivate readonly _onWillDispose = this._register(new Emitter<void>());\n\t\t\treadonly onWillDispose = this._onWillDispose.event;\n\n\t\t\tprivate _step: IProgressStep | undefined = undefined;\n\t\t\tget step() { return this._step; }\n\n\t\t\tprivate _done = false;\n\t\t\tget done() { return this._done; }\n\n\t\t\treadonly promise: P;\n\n\t\t\tconstructor() {\n\t\t\t\tsuper();\n\n\t\t\t\tthis.promise = callback(this);\n\n\t\t\t\tthis.promise.finally(() => {\n\t\t\t\t\tthis.dispose();\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treport(step: IProgressStep): void {\n\t\t\t\tthis._step = step;\n\n\t\t\t\tthis._onDidReport.fire(step);\n\t\t\t}\n\n\t\t\tcancel(choice?: number): void {\n\t\t\t\tonDidCancel?.(choice);\n\n\t\t\t\tthis.dispose();\n\t\t\t}\n\n\t\t\toverride dispose(): void {\n\t\t\t\tthis._done = true;\n\t\t\t\tthis._onWillDispose.fire();\n\n\t\t\t\tsuper.dispose();\n\t\t\t}\n\t\t};\n\n\t\tconst createWindowProgress = () => {\n\n\t\t\t// Create a promise that we can resolve as needed\n\t\t\t// when the outside calls dispose on us\n\t\t\tlet promiseResolve: () => void;\n\t\t\tconst promise = new Promise<void>(resolve => promiseResolve = resolve);\n\n\t\t\tthis.withWindowProgress({\n\t\t\t\tlocation: ProgressLocation.Window,\n\t\t\t\ttitle: options.title ? parseLinkedText(options.title).toString() : undefined, // convert markdown links => string\n\t\t\t\tcommand: 'notifications.showList'\n\t\t\t}, progress => {\n\n\t\t\t\tfunction reportProgress(step: IProgressStep) {\n\t\t\t\t\tif (step.message) {\n\t\t\t\t\t\tprogress.report({\n\t\t\t\t\t\t\tmessage: parseLinkedText(step.message).toString()  // convert markdown links => string\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Apply any progress that was made already\n\t\t\t\tif (progressStateModel.step) {\n\t\t\t\t\treportProgress(progressStateModel.step);\n\t\t\t\t}\n\n\t\t\t\t// Continue to report progress as it happens\n\t\t\t\tconst onDidReportListener = progressStateModel.onDidReport(step => reportProgress(step));\n\t\t\t\tpromise.finally(() => onDidReportListener.dispose());\n\n\t\t\t\t// When the progress model gets disposed, we are done as well\n\t\t\t\tEvent.once(progressStateModel.onWillDispose)(() => promiseResolve());\n\n\t\t\t\treturn promise;\n\t\t\t});\n\n\t\t\t// Dispose means completing our promise\n\t\t\treturn toDisposable(() => promiseResolve());\n\t\t};\n\n\t\tconst createNotification = (message: string, silent: boolean, increment?: number): INotificationHandle => {\n\t\t\tconst notificationDisposables = new DisposableStore();\n\n\t\t\tconst primaryActions = options.primaryActions ? Array.from(options.primaryActions) : [];\n\t\t\tconst secondaryActions = options.secondaryActions ? Array.from(options.secondaryActions) : [];\n\n\t\t\tif (options.buttons) {\n\t\t\t\toptions.buttons.forEach((button, index) => {\n\t\t\t\t\tconst buttonAction = new class extends Action {\n\t\t\t\t\t\tconstructor() {\n\t\t\t\t\t\t\tsuper(`progress.button.${button}`, button, undefined, true);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\toverride async run(): Promise<void> {\n\t\t\t\t\t\t\tprogressStateModel.cancel(index);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tnotificationDisposables.add(buttonAction);\n\n\t\t\t\t\tprimaryActions.push(buttonAction);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (options.cancellable) {\n\t\t\t\tconst cancelAction = new class extends Action {\n\t\t\t\t\tconstructor() {\n\t\t\t\t\t\tsuper('progress.cancel', localize('cancel', \"Cancel\"), undefined, true);\n\t\t\t\t\t}\n\n\t\t\t\t\toverride async run(): Promise<void> {\n\t\t\t\t\t\tprogressStateModel.cancel();\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tnotificationDisposables.add(cancelAction);\n\n\t\t\t\tprimaryActions.push(cancelAction);\n\t\t\t}\n\n\t\t\tconst notification = this.notificationService.notify({\n\t\t\t\tseverity: Severity.Info,\n\t\t\t\tmessage,\n\t\t\t\tsource: options.source,\n\t\t\t\tactions: { primary: primaryActions, secondary: secondaryActions },\n\t\t\t\tprogress: typeof increment === 'number' && increment >= 0 ? { total: 100, worked: increment } : { infinite: true },\n\t\t\t\tsilent\n\t\t\t});\n\n\t\t\t// Switch to window based progress once the notification\n\t\t\t// changes visibility to hidden and is still ongoing.\n\t\t\t// Remove that window based progress once the notification\n\t\t\t// shows again.\n\t\t\tlet windowProgressDisposable: IDisposable | undefined = undefined;\n\t\t\tconst onVisibilityChange = (visible: boolean) => {\n\t\t\t\t// Clear any previous running window progress\n\t\t\t\tdispose(windowProgressDisposable);\n\n\t\t\t\t// Create new window progress if notification got hidden\n\t\t\t\tif (!visible && !progressStateModel.done) {\n\t\t\t\t\twindowProgressDisposable = createWindowProgress();\n\t\t\t\t}\n\t\t\t};\n\t\t\tnotificationDisposables.add(notification.onDidChangeVisibility(onVisibilityChange));\n\t\t\tif (silent) {\n\t\t\t\tonVisibilityChange(false);\n\t\t\t}\n\n\t\t\t// Clear upon dispose\n\t\t\tEvent.once(notification.onDidClose)(() => notificationDisposables.dispose());\n\n\t\t\treturn notification;\n\t\t};\n\n\t\tconst updateProgress = (notification: INotificationHandle, increment?: number): void => {\n\t\t\tif (typeof increment === 'number' && increment >= 0) {\n\t\t\t\tnotification.progress.total(100); // always percentage based\n\t\t\t\tnotification.progress.worked(increment);\n\t\t\t} else {\n\t\t\t\tnotification.progress.infinite();\n\t\t\t}\n\t\t};\n\n\t\tlet notificationHandle: INotificationHandle | undefined;\n\t\tlet notificationTimeout: any | undefined;\n\t\tlet titleAndMessage: string | undefined; // hoisted to make sure a delayed notification shows the most recent message\n\n\t\tconst updateNotification = (step?: IProgressStep): void => {\n\n\t\t\t// full message (inital or update)\n\t\t\tif (step?.message && options.title) {\n\t\t\t\ttitleAndMessage = `${options.title}: ${step.message}`; // always prefix with overall title if we have it (https://github.com/microsoft/vscode/issues/50932)\n\t\t\t} else {\n\t\t\t\ttitleAndMessage = options.title || step?.message;\n\t\t\t}\n\n\t\t\tif (!notificationHandle && titleAndMessage) {\n\n\t\t\t\t// create notification now or after a delay\n\t\t\t\tif (typeof options.delay === 'number' && options.delay > 0) {\n\t\t\t\t\tif (typeof notificationTimeout !== 'number') {\n\t\t\t\t\t\tnotificationTimeout = setTimeout(() => notificationHandle = createNotification(titleAndMessage!, !!options.silent, step?.increment), options.delay);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tnotificationHandle = createNotification(titleAndMessage, !!options.silent, step?.increment);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (notificationHandle) {\n\t\t\t\tif (titleAndMessage) {\n\t\t\t\t\tnotificationHandle.updateMessage(titleAndMessage);\n\t\t\t\t}\n\n\t\t\t\tif (typeof step?.increment === 'number') {\n\t\t\t\t\tupdateProgress(notificationHandle, step.increment);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Show initially\n\t\tupdateNotification(progressStateModel.step);\n\t\tconst listener = progressStateModel.onDidReport(step => updateNotification(step));\n\t\tEvent.once(progressStateModel.onWillDispose)(() => listener.dispose());\n\n\t\t// Clean up eventually\n\t\t(async () => {\n\t\t\ttry {\n\n\t\t\t\t// with a delay we only wait for the finish of the promise\n\t\t\t\tif (typeof options.delay === 'number' && options.delay > 0) {\n\t\t\t\t\tawait progressStateModel.promise;\n\t\t\t\t}\n\n\t\t\t\t// without a delay we show the notification for at least 800ms\n\t\t\t\t// to reduce the chance of the notification flashing up and hiding\n\t\t\t\telse {\n\t\t\t\t\tawait Promise.all([timeout(800), progressStateModel.promise]);\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tclearTimeout(notificationTimeout);\n\t\t\t\tnotificationHandle?.close();\n\t\t\t}\n\t\t})();\n\n\t\treturn progressStateModel.promise;\n\t}\n\n\tprivate withViewletProgress<P extends Promise<R>, R = unknown>(viewletId: string, task: (progress: IProgress<IProgressStep>) => P, options: IProgressCompositeOptions): P {\n\n\t\t// show in viewlet\n\t\tconst promise = this.withCompositeProgress(this.viewletService.getProgressIndicator(viewletId), task, options);\n\n\t\t// show on activity bar\n\t\tthis.showOnActivityBar<P, R>(viewletId, options, promise);\n\n\t\treturn promise;\n\t}\n\n\tprivate withViewProgress<P extends Promise<R>, R = unknown>(viewId: string, task: (progress: IProgress<IProgressStep>) => P, options: IProgressCompositeOptions): P {\n\n\t\t// show in viewlet\n\t\tconst promise = this.withCompositeProgress(this.viewsService.getViewProgressIndicator(viewId), task, options);\n\n\t\tconst location = this.viewDescriptorService.getViewLocationById(viewId);\n\t\tif (location !== ViewContainerLocation.Sidebar) {\n\t\t\treturn promise;\n\t\t}\n\n\t\tconst viewletId = this.viewDescriptorService.getViewContainerByViewId(viewId)?.id;\n\t\tif (viewletId === undefined) {\n\t\t\treturn promise;\n\t\t}\n\n\t\t// show on activity bar\n\t\tthis.showOnActivityBar(viewletId, options, promise);\n\n\t\treturn promise;\n\t}\n\n\tprivate showOnActivityBar<P extends Promise<R>, R = unknown>(viewletId: string, options: IProgressCompositeOptions, promise: P) {\n\t\tlet activityProgress: IDisposable;\n\t\tlet delayHandle: any = setTimeout(() => {\n\t\t\tdelayHandle = undefined;\n\t\t\tconst handle = this.activityService.showViewContainerActivity(viewletId, { badge: new ProgressBadge(() => ''), clazz: 'progress-badge', priority: 100 });\n\t\t\tconst startTimeVisible = Date.now();\n\t\t\tconst minTimeVisible = 300;\n\t\t\tactivityProgress = {\n\t\t\t\tdispose() {\n\t\t\t\t\tconst d = Date.now() - startTimeVisible;\n\t\t\t\t\tif (d < minTimeVisible) {\n\t\t\t\t\t\t// should at least show for Nms\n\t\t\t\t\t\tsetTimeout(() => handle.dispose(), minTimeVisible - d);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// shown long enough\n\t\t\t\t\t\thandle.dispose();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}, options.delay || 300);\n\t\tpromise.finally(() => {\n\t\t\tclearTimeout(delayHandle);\n\t\t\tdispose(activityProgress);\n\t\t});\n\t}\n\n\tprivate withPanelProgress<P extends Promise<R>, R = unknown>(panelid: string, task: (progress: IProgress<IProgressStep>) => P, options: IProgressCompositeOptions): P {\n\n\t\t// show in panel\n\t\treturn this.withCompositeProgress(this.panelService.getProgressIndicator(panelid), task, options);\n\t}\n\n\tprivate withCompositeProgress<P extends Promise<R>, R = unknown>(progressIndicator: IProgressIndicator | undefined, task: (progress: IProgress<IProgressStep>) => P, options: IProgressCompositeOptions): P {\n\t\tlet progressRunner: IProgressRunner | undefined = undefined;\n\n\t\tconst promise = task({\n\t\t\treport: progress => {\n\t\t\t\tif (!progressRunner) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (typeof progress.increment === 'number') {\n\t\t\t\t\tprogressRunner.worked(progress.increment);\n\t\t\t\t}\n\n\t\t\t\tif (typeof progress.total === 'number') {\n\t\t\t\t\tprogressRunner.total(progress.total);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tif (progressIndicator) {\n\t\t\tif (typeof options.total === 'number') {\n\t\t\t\tprogressRunner = progressIndicator.show(options.total, options.delay);\n\t\t\t\tpromise.catch(() => undefined /* ignore */).finally(() => progressRunner ? progressRunner.done() : undefined);\n\t\t\t} else {\n\t\t\t\tprogressIndicator.showWhile(promise, options.delay);\n\t\t\t}\n\t\t}\n\n\t\treturn promise;\n\t}\n\n\tprivate withDialogProgress<P extends Promise<R>, R = unknown>(options: IProgressOptions, task: (progress: IProgress<IProgressStep>) => P, onDidCancel?: (choice?: number) => void): P {\n\t\tconst disposables = new DisposableStore();\n\t\tconst allowableCommands = [\n\t\t\t'workbench.action.quit',\n\t\t\t'workbench.action.reloadWindow',\n\t\t\t'copy',\n\t\t\t'cut',\n\t\t\t'editor.action.clipboardCopyAction',\n\t\t\t'editor.action.clipboardCutAction'\n\t\t];\n\n\t\tlet dialog: Dialog;\n\n\t\tconst createDialog = (message: string) => {\n\n\t\t\tconst buttons = options.buttons || [];\n\t\t\tbuttons.push(options.cancellable ? localize('cancel', \"Cancel\") : localize('dismiss', \"Dismiss\"));\n\n\t\t\tdialog = new Dialog(\n\t\t\t\tthis.layoutService.container,\n\t\t\t\tmessage,\n\t\t\t\tbuttons,\n\t\t\t\t{\n\t\t\t\t\ttype: 'pending',\n\t\t\t\t\tcancelId: buttons.length - 1,\n\t\t\t\t\tkeyEventProcessor: (event: StandardKeyboardEvent) => {\n\t\t\t\t\t\tconst resolved = this.keybindingService.softDispatch(event, this.layoutService.container);\n\t\t\t\t\t\tif (resolved?.commandId) {\n\t\t\t\t\t\t\tif (!allowableCommands.includes(resolved.commandId)) {\n\t\t\t\t\t\t\t\tEventHelper.stop(event, true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tdisposables.add(dialog);\n\t\t\tdisposables.add(attachDialogStyler(dialog, this.themeService));\n\n\t\t\tdialog.show().then((dialogResult) => {\n\t\t\t\tif (typeof onDidCancel === 'function') {\n\t\t\t\t\tonDidCancel(dialogResult.button);\n\t\t\t\t}\n\n\t\t\t\tdispose(dialog);\n\t\t\t});\n\n\t\t\treturn dialog;\n\t\t};\n\n\t\tconst updateDialog = (message?: string) => {\n\t\t\tif (message && !dialog) {\n\t\t\t\tdialog = createDialog(message);\n\t\t\t} else if (message) {\n\t\t\t\tdialog.updateMessage(message);\n\t\t\t}\n\t\t};\n\n\t\tconst promise = task({\n\t\t\treport: progress => {\n\t\t\t\tupdateDialog(progress.message);\n\t\t\t}\n\t\t});\n\n\t\tpromise.finally(() => {\n\t\t\tdispose(disposables);\n\t\t});\n\n\t\treturn promise;\n\t}\n}\n\nregisterSingleton(IProgressService, ProgressService, true);\n"]}