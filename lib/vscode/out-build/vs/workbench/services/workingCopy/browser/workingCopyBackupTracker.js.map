{"version":3,"file":"workingCopyBackupTracker.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/workingCopy/browser/workingCopyBackupTracker.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAYhG,IAAa,+BAA+B,GAA5C,MAAa,+BAAgC,SAAQ,mDAAwB;QAE5E,YAC4B,wBAAmD,EAClD,yBAAqD,EAC5D,kBAAuC,EACzC,gBAAmC,EACzC,UAAuB,EACT,wBAAmD,EAC9D,aAA6B;YAE7C,KAAK,CAAC,wBAAwB,EAAE,kBAAkB,EAAE,UAAU,EAAE,gBAAgB,EAAE,yBAAyB,EAAE,wBAAwB,EAAE,aAAa,CAAC,CAAC;QACvJ,CAAC;QAES,gBAAgB,CAAC,MAAsB;YAEhD,4DAA4D;YAC5D,+DAA+D;YAC/D,+DAA+D;YAC/D,gCAAgC;YAEhC,MAAM,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,CAAC,kBAAkB,CAAC;YACtE,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE;gBAC/B,OAAO,KAAK,CAAC,CAAC,oBAAoB;aAClC;YAED,IAAI,CAAC,IAAI,CAAC,yBAAyB,CAAC,gBAAgB,EAAE;gBACrD,OAAO,IAAI,CAAC,CAAC,6BAA6B;aAC1C;YAED,KAAK,MAAM,gBAAgB,IAAI,kBAAkB,EAAE;gBAClD,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,aAAa,CAAC,gBAAgB,EAAE,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,CAAC,EAAE;oBAC7G,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,8BAA8B,CAAC,CAAC;oBAErD,OAAO,IAAI,CAAC,CAAC,6BAA6B;iBAC1C;aACD;YAED,OAAO,KAAK,CAAC,CAAC,8BAA8B;QAC7C,CAAC;KACD,CAAA;IAxCY,+BAA+B;QAGzC,WAAA,6CAAyB,CAAA;QACzB,WAAA,sDAA0B,CAAA;QAC1B,WAAA,wCAAmB,CAAA;QACnB,WAAA,6BAAiB,CAAA;QACjB,WAAA,iBAAW,CAAA;QACX,WAAA,oDAAyB,CAAA;QACzB,WAAA,8BAAc,CAAA;OATJ,+BAA+B,CAwC3C;IAxCY,0EAA+B","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IWorkingCopyBackupService } from 'vs/workbench/services/workingCopy/common/workingCopyBackup';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { IFilesConfigurationService } from 'vs/workbench/services/filesConfiguration/common/filesConfigurationService';\nimport { IWorkingCopyService } from 'vs/workbench/services/workingCopy/common/workingCopyService';\nimport { ILifecycleService, ShutdownReason } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { WorkingCopyBackupTracker } from 'vs/workbench/services/workingCopy/common/workingCopyBackupTracker';\nimport { IWorkingCopyEditorService } from 'vs/workbench/services/workingCopy/common/workingCopyEditorService';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\n\nexport class BrowserWorkingCopyBackupTracker extends WorkingCopyBackupTracker implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IWorkingCopyBackupService workingCopyBackupService: IWorkingCopyBackupService,\n\t\t@IFilesConfigurationService filesConfigurationService: IFilesConfigurationService,\n\t\t@IWorkingCopyService workingCopyService: IWorkingCopyService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t\t@ILogService logService: ILogService,\n\t\t@IWorkingCopyEditorService workingCopyEditorService: IWorkingCopyEditorService,\n\t\t@IEditorService editorService: IEditorService\n\t) {\n\t\tsuper(workingCopyBackupService, workingCopyService, logService, lifecycleService, filesConfigurationService, workingCopyEditorService, editorService);\n\t}\n\n\tprotected onBeforeShutdown(reason: ShutdownReason): boolean | Promise<boolean> {\n\n\t\t// Web: we cannot perform long running in the shutdown phase\n\t\t// As such we need to check sync if there are any dirty working\n\t\t// copies that have not been backed up yet and then prevent the\n\t\t// shutdown if that is the case.\n\n\t\tconst dirtyWorkingCopies = this.workingCopyService.dirtyWorkingCopies;\n\t\tif (!dirtyWorkingCopies.length) {\n\t\t\treturn false; // no dirty: no veto\n\t\t}\n\n\t\tif (!this.filesConfigurationService.isHotExitEnabled) {\n\t\t\treturn true; // dirty without backup: veto\n\t\t}\n\n\t\tfor (const dirtyWorkingCopy of dirtyWorkingCopies) {\n\t\t\tif (!this.workingCopyBackupService.hasBackupSync(dirtyWorkingCopy, this.getContentVersion(dirtyWorkingCopy))) {\n\t\t\t\tthis.logService.warn('Unload veto: pending backups');\n\n\t\t\t\treturn true; // dirty without backup: veto\n\t\t\t}\n\t\t}\n\n\t\treturn false; // dirty with backups: no veto\n\t}\n}\n"]}