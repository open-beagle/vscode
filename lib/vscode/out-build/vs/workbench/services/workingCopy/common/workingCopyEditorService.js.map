{"version":3,"file":"workingCopyEditorService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/workingCopy/common/workingCopyEditorService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAUnF,QAAA,yBAAyB,GAAG,CAAA,GAAA,+BAAe,CAAA,CAA4B,0BAA0B,CAAC,CAAC;IAyChH,IAAa,wBAAwB,GAArC,MAAa,wBAAyB,SAAQ,sBAAU;QASvD,YAA6C,aAA6B;YACzE,KAAK,EAAE,CAAC;YADoC,kBAAa,GAAb,aAAa,CAAgB;YALzD,0BAAqB,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,eAAO,EAA6B,CAAC,CAAC;YACzF,yBAAoB,GAAG,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC;YAEhD,aAAQ,GAAG,IAAI,GAAG,EAA6B,CAAC;QAIjE,CAAC;QAED,eAAe,CAAC,OAAkC;YAEjD,oCAAoC;YACpC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAC3B,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAEzC,OAAO,CAAA,GAAA,wBAAY,CAAA,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;QAC1D,CAAC;QAED,UAAU,CAAC,WAAyB;YACnC,KAAK,MAAM,gBAAgB,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,8BAAmC,EAAE;gBAChG,IAAI,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,gBAAgB,CAAC,MAAM,CAAC,EAAE;oBACtD,OAAO,gBAAgB,CAAC;iBACxB;aACD;YAED,OAAO,SAAS,CAAC;QAClB,CAAC;QAEO,MAAM,CAAC,WAAyB,EAAE,MAAoB;YAC7D,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACpC,IAAI,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,OAAO,CAAC,MAAM,CAAC,WAAW,EAAE,MAAM,CAAC,EAAE;oBACxE,OAAO,IAAI,CAAC;iBACZ;aACD;YAED,OAAO,KAAK,CAAC;QACd,CAAC;KACD,CAAA;IAzCY,wBAAwB;QASvB,WAAA,8BAAc,CAAA;OATf,wBAAwB,CAyCpC;IAzCY,4DAAwB;IA2CrC,mBAAmB;IACnB,CAAA,GAAA,8BAAiB,CAAA,CAAC,iCAAyB,EAAE,wBAAwB,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { EditorsOrder, IEditorIdentifier, IEditorInput } from 'vs/workbench/common/editor';\nimport { IWorkingCopy, IWorkingCopyIdentifier } from 'vs/workbench/services/workingCopy/common/workingCopy';\nimport { Disposable, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\n\nexport const IWorkingCopyEditorService = createDecorator<IWorkingCopyEditorService>('workingCopyEditorService');\n\nexport interface IWorkingCopyEditorHandler {\n\n\t/**\n\t * Whether the handler is capable of opening the specific backup in\n\t * an editor.\n\t */\n\thandles(workingCopy: IWorkingCopyIdentifier): boolean;\n\n\t/**\n\t * Whether the provided working copy is opened in the provided editor.\n\t */\n\tisOpen(workingCopy: IWorkingCopyIdentifier, editor: IEditorInput): boolean;\n\n\t/**\n\t * Create an editor that is suitable of opening the provided working copy.\n\t */\n\tcreateEditor(workingCopy: IWorkingCopyIdentifier): IEditorInput;\n}\n\nexport interface IWorkingCopyEditorService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * An event fired whenever a handler is registered.\n\t */\n\treadonly onDidRegisterHandler: Event<IWorkingCopyEditorHandler>;\n\n\t/**\n\t * Register a handler to the working copy editor service.\n\t */\n\tregisterHandler(handler: IWorkingCopyEditorHandler): IDisposable;\n\n\t/**\n\t * Finds the first editor that can handle the provided working copy.\n\t */\n\tfindEditor(workingCopy: IWorkingCopy): IEditorIdentifier | undefined;\n}\n\nexport class WorkingCopyEditorService extends Disposable implements IWorkingCopyEditorService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidRegisterHandler = this._register(new Emitter<IWorkingCopyEditorHandler>());\n\treadonly onDidRegisterHandler = this._onDidRegisterHandler.event;\n\n\tprivate readonly handlers = new Set<IWorkingCopyEditorHandler>();\n\n\tconstructor(@IEditorService private readonly editorService: IEditorService) {\n\t\tsuper();\n\t}\n\n\tregisterHandler(handler: IWorkingCopyEditorHandler): IDisposable {\n\n\t\t// Add to registry and emit as event\n\t\tthis.handlers.add(handler);\n\t\tthis._onDidRegisterHandler.fire(handler);\n\n\t\treturn toDisposable(() => this.handlers.delete(handler));\n\t}\n\n\tfindEditor(workingCopy: IWorkingCopy): IEditorIdentifier | undefined {\n\t\tfor (const editorIdentifier of this.editorService.getEditors(EditorsOrder.MOST_RECENTLY_ACTIVE)) {\n\t\t\tif (this.isOpen(workingCopy, editorIdentifier.editor)) {\n\t\t\t\treturn editorIdentifier;\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate isOpen(workingCopy: IWorkingCopy, editor: IEditorInput): boolean {\n\t\tfor (const handler of this.handlers) {\n\t\t\tif (handler.handles(workingCopy) && handler.isOpen(workingCopy, editor)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n}\n\n// Register Service\nregisterSingleton(IWorkingCopyEditorService, WorkingCopyEditorService);\n"]}