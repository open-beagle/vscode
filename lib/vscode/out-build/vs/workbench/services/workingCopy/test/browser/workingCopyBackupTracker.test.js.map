{"version":3,"file":"workingCopyBackupTracker.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/workingCopy/test/browser/workingCopyBackupTracker.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { URI } from 'vs/base/common/uri';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { EditorPart } from 'vs/workbench/browser/parts/editor/editorPart';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { EditorService } from 'vs/workbench/services/editor/browser/editorService';\nimport { IUntitledTextResourceEditorInput } from 'vs/workbench/common/editor';\nimport { IWorkingCopyBackupService } from 'vs/workbench/services/workingCopy/common/workingCopyBackup';\nimport { toResource } from 'vs/base/test/common/utils';\nimport { IFilesConfigurationService } from 'vs/workbench/services/filesConfiguration/common/filesConfigurationService';\nimport { IWorkingCopyService } from 'vs/workbench/services/workingCopy/common/workingCopyService';\nimport { IWorkingCopyBackup } from 'vs/workbench/services/workingCopy/common/workingCopy';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { ILifecycleService, LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { WorkingCopyBackupTracker } from 'vs/workbench/services/workingCopy/common/workingCopyBackupTracker';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { UntitledTextEditorInput } from 'vs/workbench/services/untitled/common/untitledTextEditorInput';\nimport { createEditorPart, InMemoryTestWorkingCopyBackupService, registerTestResourceEditor, TestServiceAccessor, toTypedWorkingCopyId, toUntypedWorkingCopyId, workbenchInstantiationService } from 'vs/workbench/test/browser/workbenchTestServices';\nimport { TestWorkingCopy } from 'vs/workbench/test/common/workbenchTestServices';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { timeout } from 'vs/base/common/async';\nimport { BrowserWorkingCopyBackupTracker } from 'vs/workbench/services/workingCopy/browser/workingCopyBackupTracker';\nimport { DisposableStore, dispose, IDisposable } from 'vs/base/common/lifecycle';\nimport { IWorkingCopyEditorHandler, IWorkingCopyEditorService } from 'vs/workbench/services/workingCopy/common/workingCopyEditorService';\nimport { bufferToReadable, VSBuffer } from 'vs/base/common/buffer';\nimport { isWindows } from 'vs/base/common/platform';\nimport { Schemas } from 'vs/base/common/network';\n\nsuite('WorkingCopyBackupTracker (browser)', function () {\n\tlet accessor: TestServiceAccessor;\n\tlet disposables = new DisposableStore();\n\n\tsetup(() => {\n\t\tdisposables.add(registerTestResourceEditor());\n\t});\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\tclass TestWorkingCopyBackupTracker extends BrowserWorkingCopyBackupTracker {\n\n\t\tconstructor(\n\t\t\t@IWorkingCopyBackupService workingCopyBackupService: IWorkingCopyBackupService,\n\t\t\t@IFilesConfigurationService filesConfigurationService: IFilesConfigurationService,\n\t\t\t@IWorkingCopyService workingCopyService: IWorkingCopyService,\n\t\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t\t\t@ILogService logService: ILogService,\n\t\t\t@IWorkingCopyEditorService workingCopyEditorService: IWorkingCopyEditorService,\n\t\t\t@IEditorService editorService: IEditorService\n\t\t) {\n\t\t\tsuper(workingCopyBackupService, filesConfigurationService, workingCopyService, lifecycleService, logService, workingCopyEditorService, editorService);\n\t\t}\n\n\t\tprotected override getBackupScheduleDelay(): number {\n\t\t\treturn 10; // Reduce timeout for tests\n\t\t}\n\n\t\tgetUnrestoredBackups() {\n\t\t\treturn this.unrestoredBackups;\n\t\t}\n\n\t\toverride async restoreBackups(handler: IWorkingCopyEditorHandler): Promise<void> {\n\t\t\treturn super.restoreBackups(handler);\n\t\t}\n\t}\n\n\tclass TestUntitledTextEditorInput extends UntitledTextEditorInput {\n\n\t\tresolved = false;\n\n\t\toverride resolve() {\n\t\t\tthis.resolved = true;\n\n\t\t\treturn super.resolve();\n\t\t}\n\t}\n\n\tasync function createTracker(): Promise<{ accessor: TestServiceAccessor, part: EditorPart, tracker: WorkingCopyBackupTracker, workingCopyBackupService: InMemoryTestWorkingCopyBackupService, instantiationService: IInstantiationService, cleanup: () => void }> {\n\t\tconst disposables = new DisposableStore();\n\n\t\tconst workingCopyBackupService = new InMemoryTestWorkingCopyBackupService();\n\t\tconst instantiationService = workbenchInstantiationService();\n\t\tinstantiationService.stub(IWorkingCopyBackupService, workingCopyBackupService);\n\n\t\tconst part = await createEditorPart(instantiationService, disposables);\n\n\t\tdisposables.add(registerTestResourceEditor());\n\n\t\tinstantiationService.stub(IEditorGroupsService, part);\n\n\t\tconst editorService: EditorService = instantiationService.createInstance(EditorService);\n\t\tinstantiationService.stub(IEditorService, editorService);\n\n\t\taccessor = instantiationService.createInstance(TestServiceAccessor);\n\n\t\tconst tracker = disposables.add(instantiationService.createInstance(TestWorkingCopyBackupTracker));\n\n\t\treturn { accessor, part, tracker, workingCopyBackupService: workingCopyBackupService, instantiationService, cleanup: () => disposables.dispose() };\n\t}\n\n\tasync function untitledBackupTest(untitled: IUntitledTextResourceEditorInput = {}): Promise<void> {\n\t\tconst { accessor, cleanup, workingCopyBackupService } = await createTracker();\n\n\t\tconst untitledEditor = (await accessor.editorService.openEditor(untitled))?.input as UntitledTextEditorInput;\n\n\t\tconst untitledModel = await untitledEditor.resolve();\n\n\t\tif (!untitled?.contents) {\n\t\t\tuntitledModel.textEditorModel?.setValue('Super Good');\n\t\t}\n\n\t\tawait workingCopyBackupService.joinBackupResource();\n\n\t\tassert.strictEqual(workingCopyBackupService.hasBackupSync(untitledModel), true);\n\n\t\tuntitledModel.dispose();\n\n\t\tawait workingCopyBackupService.joinDiscardBackup();\n\n\t\tassert.strictEqual(workingCopyBackupService.hasBackupSync(untitledModel), false);\n\n\t\tcleanup();\n\t}\n\n\ttest('Track backups (untitled)', function () {\n\t\treturn untitledBackupTest();\n\t});\n\n\ttest('Track backups (untitled with initial contents)', function () {\n\t\treturn untitledBackupTest({ contents: 'Foo Bar' });\n\t});\n\n\ttest('Track backups (custom)', async function () {\n\t\tconst { accessor, cleanup, workingCopyBackupService } = await createTracker();\n\n\t\tclass TestBackupWorkingCopy extends TestWorkingCopy {\n\n\t\t\tbackupDelay = 0;\n\n\t\t\tconstructor(resource: URI) {\n\t\t\t\tsuper(resource);\n\n\t\t\t\taccessor.workingCopyService.registerWorkingCopy(this);\n\t\t\t}\n\n\t\t\toverride async backup(token: CancellationToken): Promise<IWorkingCopyBackup> {\n\t\t\t\tawait timeout(this.backupDelay);\n\n\t\t\t\treturn {};\n\t\t\t}\n\t\t}\n\n\t\tconst resource = toResource.call(this, '/path/custom.txt');\n\t\tconst customWorkingCopy = new TestBackupWorkingCopy(resource);\n\n\t\t// Normal\n\t\tcustomWorkingCopy.setDirty(true);\n\t\tawait workingCopyBackupService.joinBackupResource();\n\t\tassert.strictEqual(workingCopyBackupService.hasBackupSync(customWorkingCopy), true);\n\n\t\tcustomWorkingCopy.setDirty(false);\n\t\tcustomWorkingCopy.setDirty(true);\n\t\tawait workingCopyBackupService.joinBackupResource();\n\t\tassert.strictEqual(workingCopyBackupService.hasBackupSync(customWorkingCopy), true);\n\n\t\tcustomWorkingCopy.setDirty(false);\n\t\tawait workingCopyBackupService.joinDiscardBackup();\n\t\tassert.strictEqual(workingCopyBackupService.hasBackupSync(customWorkingCopy), false);\n\n\t\t// Cancellation\n\t\tcustomWorkingCopy.setDirty(true);\n\t\tawait timeout(0);\n\t\tcustomWorkingCopy.setDirty(false);\n\t\tawait workingCopyBackupService.joinDiscardBackup();\n\t\tassert.strictEqual(workingCopyBackupService.hasBackupSync(customWorkingCopy), false);\n\n\t\tcustomWorkingCopy.dispose();\n\t\tcleanup();\n\t});\n\n\tasync function restoreBackupsInit(): Promise<[TestWorkingCopyBackupTracker, TestServiceAccessor, IDisposable]> {\n\t\tconst fooFile = URI.file(isWindows ? 'c:\\\\Foo' : '/Foo');\n\t\tconst barFile = URI.file(isWindows ? 'c:\\\\Bar' : '/Bar');\n\t\tconst untitledFile1 = URI.from({ scheme: Schemas.untitled, path: 'Untitled-1' });\n\t\tconst untitledFile2 = URI.from({ scheme: Schemas.untitled, path: 'Untitled-2' });\n\n\t\tconst disposables = new DisposableStore();\n\n\t\tconst workingCopyBackupService = new InMemoryTestWorkingCopyBackupService();\n\t\tconst instantiationService = workbenchInstantiationService();\n\t\tinstantiationService.stub(IWorkingCopyBackupService, workingCopyBackupService);\n\n\t\tconst part = await createEditorPart(instantiationService, disposables);\n\n\t\tinstantiationService.stub(IEditorGroupsService, part);\n\n\t\tconst editorService: EditorService = instantiationService.createInstance(EditorService);\n\t\tinstantiationService.stub(IEditorService, editorService);\n\n\t\taccessor = instantiationService.createInstance(TestServiceAccessor);\n\n\t\t// Backup 2 normal files and 2 untitled files\n\t\tconst untitledFile1WorkingCopyId = toUntypedWorkingCopyId(untitledFile1);\n\t\tconst untitledFile2WorkingCopyId = toTypedWorkingCopyId(untitledFile2);\n\t\tawait workingCopyBackupService.backup(untitledFile1WorkingCopyId, bufferToReadable(VSBuffer.fromString('untitled-1')));\n\t\tawait workingCopyBackupService.backup(untitledFile2WorkingCopyId, bufferToReadable(VSBuffer.fromString('untitled-2')));\n\n\t\tconst fooFileWorkingCopyId = toUntypedWorkingCopyId(fooFile);\n\t\tconst barFileWorkingCopyId = toTypedWorkingCopyId(barFile);\n\t\tawait workingCopyBackupService.backup(fooFileWorkingCopyId, bufferToReadable(VSBuffer.fromString('fooFile')));\n\t\tawait workingCopyBackupService.backup(barFileWorkingCopyId, bufferToReadable(VSBuffer.fromString('barFile')));\n\n\t\tconst tracker = disposables.add(instantiationService.createInstance(TestWorkingCopyBackupTracker));\n\n\t\taccessor.lifecycleService.phase = LifecyclePhase.Restored;\n\n\t\treturn [tracker, accessor, disposables];\n\t}\n\n\ttest('Restore backups (basics, some handled)', async function () {\n\t\tconst [tracker, accessor, disposables] = await restoreBackupsInit();\n\n\t\tassert.strictEqual(tracker.getUnrestoredBackups().size, 0);\n\n\t\tlet handlesCounter = 0;\n\t\tlet isOpenCounter = 0;\n\t\tlet createEditorCounter = 0;\n\n\t\tawait tracker.restoreBackups({\n\t\t\thandles: workingCopy => {\n\t\t\t\thandlesCounter++;\n\n\t\t\t\treturn workingCopy.typeId === 'testBackupTypeId';\n\t\t\t},\n\t\t\tisOpen: (workingCopy, editor) => {\n\t\t\t\tisOpenCounter++;\n\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tcreateEditor: workingCopy => {\n\t\t\t\tcreateEditorCounter++;\n\n\t\t\t\treturn accessor.instantiationService.createInstance(TestUntitledTextEditorInput, accessor.untitledTextEditorService.create({ initialValue: 'foo' }));\n\t\t\t}\n\t\t});\n\n\t\tassert.strictEqual(handlesCounter, 4);\n\t\tassert.strictEqual(isOpenCounter, 0);\n\t\tassert.strictEqual(createEditorCounter, 2);\n\n\t\tassert.strictEqual(accessor.editorService.count, 2);\n\t\tassert.ok(accessor.editorService.editors.every(editor => editor.isDirty()));\n\t\tassert.strictEqual(tracker.getUnrestoredBackups().size, 2);\n\n\t\tfor (const editor of accessor.editorService.editors) {\n\t\t\tassert.ok(editor instanceof TestUntitledTextEditorInput);\n\t\t\tassert.strictEqual(editor.resolved, true);\n\t\t}\n\n\t\tdispose(disposables);\n\t});\n\n\ttest('Restore backups (basics, none handled)', async function () {\n\t\tconst [tracker, accessor, disposables] = await restoreBackupsInit();\n\n\t\tawait tracker.restoreBackups({\n\t\t\thandles: workingCopy => false,\n\t\t\tisOpen: (workingCopy, editor) => { throw new Error('unexpected'); },\n\t\t\tcreateEditor: workingCopy => { throw new Error('unexpected'); }\n\t\t});\n\n\t\tassert.strictEqual(accessor.editorService.count, 0);\n\t\tassert.strictEqual(tracker.getUnrestoredBackups().size, 4);\n\n\t\tdispose(disposables);\n\t});\n\n\ttest('Restore backups (basics, error case)', async function () {\n\t\tconst [tracker, , disposables] = await restoreBackupsInit();\n\n\t\ttry {\n\t\t\tawait tracker.restoreBackups({\n\t\t\t\thandles: workingCopy => true,\n\t\t\t\tisOpen: (workingCopy, editor) => { throw new Error('unexpected'); },\n\t\t\t\tcreateEditor: workingCopy => { throw new Error('unexpected'); }\n\t\t\t});\n\t\t} catch (error) {\n\t\t\t// ignore\n\t\t}\n\n\t\tassert.strictEqual(tracker.getUnrestoredBackups().size, 4);\n\n\t\tdispose(disposables);\n\t});\n\n\ttest('Restore backups (multiple handlers)', async function () {\n\t\tconst [tracker, accessor, disposables] = await restoreBackupsInit();\n\n\t\tconst firstHandler = tracker.restoreBackups({\n\t\t\thandles: workingCopy => {\n\t\t\t\treturn workingCopy.typeId === 'testBackupTypeId';\n\t\t\t},\n\t\t\tisOpen: (workingCopy, editor) => {\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tcreateEditor: workingCopy => {\n\t\t\t\treturn accessor.instantiationService.createInstance(TestUntitledTextEditorInput, accessor.untitledTextEditorService.create({ initialValue: 'foo' }));\n\t\t\t}\n\t\t});\n\n\t\tconst secondHandler = tracker.restoreBackups({\n\t\t\thandles: workingCopy => {\n\t\t\t\treturn workingCopy.typeId.length === 0;\n\t\t\t},\n\t\t\tisOpen: (workingCopy, editor) => {\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tcreateEditor: workingCopy => {\n\t\t\t\treturn accessor.instantiationService.createInstance(TestUntitledTextEditorInput, accessor.untitledTextEditorService.create({ initialValue: 'foo' }));\n\t\t\t}\n\t\t});\n\n\t\tawait Promise.all([firstHandler, secondHandler]);\n\n\t\tassert.strictEqual(accessor.editorService.count, 4);\n\t\tassert.ok(accessor.editorService.editors.every(editor => editor.isDirty()));\n\t\tassert.strictEqual(tracker.getUnrestoredBackups().size, 0);\n\n\t\tfor (const editor of accessor.editorService.editors) {\n\t\t\tassert.ok(editor instanceof TestUntitledTextEditorInput);\n\t\t\tassert.strictEqual(editor.resolved, true);\n\t\t}\n\n\t\tdispose(disposables);\n\t});\n\n\ttest('Restore backups (editors already opened)', async function () {\n\t\tconst [tracker, accessor, disposables] = await restoreBackupsInit();\n\n\t\tassert.strictEqual(tracker.getUnrestoredBackups().size, 0);\n\n\t\tlet handlesCounter = 0;\n\t\tlet isOpenCounter = 0;\n\n\t\tconst editor1 = accessor.instantiationService.createInstance(TestUntitledTextEditorInput, accessor.untitledTextEditorService.create({ initialValue: 'foo' }));\n\t\tconst editor2 = accessor.instantiationService.createInstance(TestUntitledTextEditorInput, accessor.untitledTextEditorService.create({ initialValue: 'foo' }));\n\n\t\tawait accessor.editorService.openEditors([{ editor: editor1 }, { editor: editor2 }]);\n\n\t\teditor1.resolved = false;\n\t\teditor2.resolved = false;\n\n\t\tawait tracker.restoreBackups({\n\t\t\thandles: workingCopy => {\n\t\t\t\thandlesCounter++;\n\n\t\t\t\treturn workingCopy.typeId === 'testBackupTypeId';\n\t\t\t},\n\t\t\tisOpen: (workingCopy, editor) => {\n\t\t\t\tisOpenCounter++;\n\n\t\t\t\treturn true;\n\t\t\t},\n\t\t\tcreateEditor: workingCopy => { throw new Error('unexpected'); }\n\t\t});\n\n\t\tassert.strictEqual(handlesCounter, 4);\n\t\tassert.strictEqual(isOpenCounter, 4);\n\n\t\tassert.strictEqual(accessor.editorService.count, 2);\n\t\tassert.strictEqual(tracker.getUnrestoredBackups().size, 2);\n\n\t\tfor (const editor of accessor.editorService.editors) {\n\t\t\tassert.ok(editor instanceof TestUntitledTextEditorInput);\n\t\t\tassert.strictEqual(editor.resolved, true);\n\t\t}\n\n\t\tdispose(disposables);\n\t});\n});\n"]}