{"version":3,"file":"workingCopyBackupService.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/workingCopy/test/electron-browser/workingCopyBackupService.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { isWindows } from 'vs/base/common/platform';\nimport { tmpdir } from 'os';\nimport { createHash } from 'crypto';\nimport { insert } from 'vs/base/common/arrays';\nimport { hash } from 'vs/base/common/hash';\nimport { isEqual } from 'vs/base/common/resources';\nimport { promises, existsSync, readFileSync, writeFileSync, mkdirSync } from 'fs';\nimport { dirname, join } from 'vs/base/common/path';\nimport { readdirSync, rimraf, writeFile } from 'vs/base/node/pfs';\nimport { URI } from 'vs/base/common/uri';\nimport { WorkingCopyBackupsModel, hashIdentifier } from 'vs/workbench/services/workingCopy/common/workingCopyBackupService';\nimport { createTextModel } from 'vs/editor/test/common/editorTestUtils';\nimport { getPathFromAmdModule, getRandomTestPath } from 'vs/base/test/node/testUtils';\nimport { Schemas } from 'vs/base/common/network';\nimport { FileService } from 'vs/platform/files/common/fileService';\nimport { NullLogService } from 'vs/platform/log/common/log';\nimport { DiskFileSystemProvider } from 'vs/platform/files/node/diskFileSystemProvider';\nimport { NativeWorkbenchEnvironmentService } from 'vs/workbench/services/environment/electron-sandbox/environmentService';\nimport { toBufferOrReadable } from 'vs/workbench/services/textfile/common/textfiles';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { NativeWorkingCopyBackupService } from 'vs/workbench/services/workingCopy/electron-sandbox/workingCopyBackupService';\nimport { FileUserDataProvider } from 'vs/workbench/services/userData/common/fileUserDataProvider';\nimport { bufferToReadable, bufferToStream, streamToBuffer, VSBuffer, VSBufferReadable, VSBufferReadableStream } from 'vs/base/common/buffer';\nimport { TestWorkbenchConfiguration } from 'vs/workbench/test/electron-browser/workbenchTestServices';\nimport { TestProductService, toTypedWorkingCopyId, toUntypedWorkingCopyId } from 'vs/workbench/test/browser/workbenchTestServices';\nimport { CancellationToken, CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { IWorkingCopyBackupMeta, IWorkingCopyIdentifier } from 'vs/workbench/services/workingCopy/common/workingCopy';\nimport { consumeStream } from 'vs/base/common/stream';\n\nclass TestWorkbenchEnvironmentService extends NativeWorkbenchEnvironmentService {\n\n\tconstructor(testDir: string, backupPath: string) {\n\t\tsuper({ ...TestWorkbenchConfiguration, backupPath, 'user-data-dir': testDir }, TestProductService);\n\t}\n}\n\nexport class NodeTestWorkingCopyBackupService extends NativeWorkingCopyBackupService {\n\n\toverride readonly fileService: IFileService;\n\n\tprivate backupResourceJoiners: Function[];\n\tprivate discardBackupJoiners: Function[];\n\tdiscardedBackups: IWorkingCopyIdentifier[];\n\tprivate pendingBackupsArr: Promise<void>[];\n\tprivate diskFileSystemProvider: DiskFileSystemProvider;\n\n\tconstructor(testDir: string, workspaceBackupPath: string) {\n\t\tconst environmentService = new TestWorkbenchEnvironmentService(testDir, workspaceBackupPath);\n\t\tconst logService = new NullLogService();\n\t\tconst fileService = new FileService(logService);\n\t\tsuper(environmentService, fileService, logService);\n\n\t\tthis.diskFileSystemProvider = new DiskFileSystemProvider(logService);\n\t\tfileService.registerProvider(Schemas.file, this.diskFileSystemProvider);\n\t\tfileService.registerProvider(Schemas.userData, new FileUserDataProvider(Schemas.file, this.diskFileSystemProvider, Schemas.userData, logService));\n\n\t\tthis.fileService = fileService;\n\t\tthis.backupResourceJoiners = [];\n\t\tthis.discardBackupJoiners = [];\n\t\tthis.discardedBackups = [];\n\t\tthis.pendingBackupsArr = [];\n\t}\n\n\tasync waitForAllBackups(): Promise<void> {\n\t\tawait Promise.all(this.pendingBackupsArr);\n\t}\n\n\tjoinBackupResource(): Promise<void> {\n\t\treturn new Promise(resolve => this.backupResourceJoiners.push(resolve));\n\t}\n\n\toverride async backup(identifier: IWorkingCopyIdentifier, content?: VSBufferReadableStream | VSBufferReadable, versionId?: number, meta?: any, token?: CancellationToken): Promise<void> {\n\t\tconst p = super.backup(identifier, content, versionId, meta, token);\n\t\tconst removeFromPendingBackups = insert(this.pendingBackupsArr, p.then(undefined, undefined));\n\n\t\ttry {\n\t\t\tawait p;\n\t\t} finally {\n\t\t\tremoveFromPendingBackups();\n\t\t}\n\n\t\twhile (this.backupResourceJoiners.length) {\n\t\t\tthis.backupResourceJoiners.pop()!();\n\t\t}\n\t}\n\n\tjoinDiscardBackup(): Promise<void> {\n\t\treturn new Promise(resolve => this.discardBackupJoiners.push(resolve));\n\t}\n\n\toverride async discardBackup(identifier: IWorkingCopyIdentifier): Promise<void> {\n\t\tawait super.discardBackup(identifier);\n\t\tthis.discardedBackups.push(identifier);\n\n\t\twhile (this.discardBackupJoiners.length) {\n\t\t\tthis.discardBackupJoiners.pop()!();\n\t\t}\n\t}\n\n\tasync getBackupContents(identifier: IWorkingCopyIdentifier): Promise<string> {\n\t\tconst backupResource = this.toBackupResource(identifier);\n\n\t\tconst fileContents = await this.fileService.readFile(backupResource);\n\n\t\treturn fileContents.value.toString();\n\t}\n\n\tdispose() {\n\t\tthis.diskFileSystemProvider.dispose();\n\t}\n}\n\nsuite('WorkingCopyBackupService', () => {\n\n\tlet testDir: string;\n\tlet backupHome: string;\n\tlet workspacesJsonPath: string;\n\tlet workspaceBackupPath: string;\n\n\tlet service: NodeTestWorkingCopyBackupService;\n\n\tlet workspaceResource = URI.file(isWindows ? 'c:\\\\workspace' : '/workspace');\n\tlet fooFile = URI.file(isWindows ? 'c:\\\\Foo' : '/Foo');\n\tlet customFile = URI.parse('customScheme://some/path');\n\tlet customFileWithFragment = URI.parse('customScheme2://some/path#fragment');\n\tlet barFile = URI.file(isWindows ? 'c:\\\\Bar' : '/Bar');\n\tlet fooBarFile = URI.file(isWindows ? 'c:\\\\Foo Bar' : '/Foo Bar');\n\tlet untitledFile = URI.from({ scheme: Schemas.untitled, path: 'Untitled-1' });\n\n\tsetup(async () => {\n\t\ttestDir = getRandomTestPath(tmpdir(), 'vsctests', 'workingcopybackupservice');\n\t\tbackupHome = join(testDir, 'Backups');\n\t\tworkspacesJsonPath = join(backupHome, 'workspaces.json');\n\t\tworkspaceBackupPath = join(backupHome, hash(workspaceResource.fsPath).toString(16));\n\n\t\tservice = new NodeTestWorkingCopyBackupService(testDir, workspaceBackupPath);\n\n\t\tawait promises.mkdir(backupHome, { recursive: true });\n\n\t\treturn writeFile(workspacesJsonPath, '');\n\t});\n\n\tteardown(() => {\n\t\tservice.dispose();\n\t\treturn rimraf(testDir);\n\t});\n\n\tsuite('hashIdentifier', () => {\n\t\ttest('should correctly hash the identifier for untitled scheme URIs', () => {\n\t\t\tconst uri = URI.from({ scheme: Schemas.untitled, path: 'Untitled-1' });\n\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t\t\t// If these hashes change people will lose their backed up files\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\t\t\tconst untypedBackupHash = hashIdentifier(toUntypedWorkingCopyId(uri));\n\t\t\tassert.strictEqual(untypedBackupHash, '-7f9c1a2e');\n\t\t\tassert.strictEqual(untypedBackupHash, hash(uri.fsPath).toString(16));\n\n\t\t\tconst typedBackupHash = hashIdentifier({ typeId: 'hashTest', resource: uri });\n\t\t\tif (isWindows) {\n\t\t\t\tassert.strictEqual(typedBackupHash, '-17c47cdc');\n\t\t\t} else {\n\t\t\t\tassert.strictEqual(typedBackupHash, '-8ad5f4f');\n\t\t\t}\n\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t\t\t// If these hashes collide people will lose their backed up files\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\t\t\tassert.notStrictEqual(untypedBackupHash, typedBackupHash);\n\t\t});\n\n\t\ttest('should correctly hash the identifier for file scheme URIs', () => {\n\t\t\tconst uri = URI.file('/foo');\n\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t\t\t// If these hashes change people will lose their backed up files\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\t\t\tconst untypedBackupHash = hashIdentifier(toUntypedWorkingCopyId(uri));\n\t\t\tif (isWindows) {\n\t\t\t\tassert.strictEqual(untypedBackupHash, '20ffaa13');\n\t\t\t} else {\n\t\t\t\tassert.strictEqual(untypedBackupHash, '20eb3560');\n\t\t\t}\n\t\t\tassert.strictEqual(untypedBackupHash, hash(uri.fsPath).toString(16));\n\n\t\t\tconst typedBackupHash = hashIdentifier({ typeId: 'hashTest', resource: uri });\n\t\t\tif (isWindows) {\n\t\t\t\tassert.strictEqual(typedBackupHash, '-55fc55db');\n\t\t\t} else {\n\t\t\t\tassert.strictEqual(typedBackupHash, '51e56bf');\n\t\t\t}\n\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t\t\t// If these hashes collide people will lose their backed up files\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\t\t\tassert.notStrictEqual(untypedBackupHash, typedBackupHash);\n\t\t});\n\n\t\ttest('should correctly hash the identifier for custom scheme URIs', () => {\n\t\t\tconst uri = URI.from({\n\t\t\t\tscheme: 'vscode-custom',\n\t\t\t\tpath: 'somePath'\n\t\t\t});\n\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t\t\t// If these hashes change people will lose their backed up files\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\t\t\tconst untypedBackupHash = hashIdentifier(toUntypedWorkingCopyId(uri));\n\t\t\tassert.strictEqual(untypedBackupHash, '-44972d98');\n\t\t\tassert.strictEqual(untypedBackupHash, hash(uri.toString()).toString(16));\n\n\t\t\tconst typedBackupHash = hashIdentifier({ typeId: 'hashTest', resource: uri });\n\t\t\tassert.strictEqual(typedBackupHash, '502149c7');\n\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t\t\t// If these hashes collide people will lose their backed up files\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\t\t\tassert.notStrictEqual(untypedBackupHash, typedBackupHash);\n\t\t});\n\n\t\ttest('should not fail for URIs without path', () => {\n\t\t\tconst uri = URI.from({\n\t\t\t\tscheme: 'vscode-fragment',\n\t\t\t\tfragment: 'frag'\n\t\t\t});\n\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t\t\t// If these hashes change people will lose their backed up files\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\t\t\tconst untypedBackupHash = hashIdentifier(toUntypedWorkingCopyId(uri));\n\t\t\tassert.strictEqual(untypedBackupHash, '-2f6b2f1b');\n\t\t\tassert.strictEqual(untypedBackupHash, hash(uri.toString()).toString(16));\n\n\t\t\tconst typedBackupHash = hashIdentifier({ typeId: 'hashTest', resource: uri });\n\t\t\tassert.strictEqual(typedBackupHash, '6e82ca57');\n\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t\t\t// If these hashes collide people will lose their backed up files\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\t\t\tassert.notStrictEqual(untypedBackupHash, typedBackupHash);\n\t\t});\n\t});\n\n\tsuite('getBackupResource', () => {\n\t\ttest('should get the correct backup path for text files', () => {\n\n\t\t\t// Format should be: <backupHome>/<workspaceHash>/<scheme>/<filePathHash>\n\t\t\tconst backupResource = fooFile;\n\t\t\tconst workspaceHash = hash(workspaceResource.fsPath).toString(16);\n\n\t\t\t// No Type ID\n\t\t\tlet backupId = toUntypedWorkingCopyId(backupResource);\n\t\t\tlet filePathHash = hashIdentifier(backupId);\n\t\t\tlet expectedPath = URI.file(join(backupHome, workspaceHash, Schemas.file, filePathHash)).with({ scheme: Schemas.userData }).toString();\n\t\t\tassert.strictEqual(service.toBackupResource(backupId).toString(), expectedPath);\n\n\t\t\t// With Type ID\n\t\t\tbackupId = toTypedWorkingCopyId(backupResource);\n\t\t\tfilePathHash = hashIdentifier(backupId);\n\t\t\texpectedPath = URI.file(join(backupHome, workspaceHash, Schemas.file, filePathHash)).with({ scheme: Schemas.userData }).toString();\n\t\t\tassert.strictEqual(service.toBackupResource(backupId).toString(), expectedPath);\n\t\t});\n\n\t\ttest('should get the correct backup path for untitled files', () => {\n\n\t\t\t// Format should be: <backupHome>/<workspaceHash>/<scheme>/<filePathHash>\n\t\t\tconst backupResource = URI.from({ scheme: Schemas.untitled, path: 'Untitled-1' });\n\t\t\tconst workspaceHash = hash(workspaceResource.fsPath).toString(16);\n\n\t\t\t// No Type ID\n\t\t\tlet backupId = toUntypedWorkingCopyId(backupResource);\n\t\t\tlet filePathHash = hashIdentifier(backupId);\n\t\t\tlet expectedPath = URI.file(join(backupHome, workspaceHash, Schemas.untitled, filePathHash)).with({ scheme: Schemas.userData }).toString();\n\t\t\tassert.strictEqual(service.toBackupResource(backupId).toString(), expectedPath);\n\n\t\t\t// With Type ID\n\t\t\tbackupId = toTypedWorkingCopyId(backupResource);\n\t\t\tfilePathHash = hashIdentifier(backupId);\n\t\t\texpectedPath = URI.file(join(backupHome, workspaceHash, Schemas.untitled, filePathHash)).with({ scheme: Schemas.userData }).toString();\n\t\t\tassert.strictEqual(service.toBackupResource(backupId).toString(), expectedPath);\n\t\t});\n\n\t\ttest('should get the correct backup path for custom files', () => {\n\n\t\t\t// Format should be: <backupHome>/<workspaceHash>/<scheme>/<filePathHash>\n\t\t\tconst backupResource = URI.from({ scheme: 'custom', path: 'custom/file.txt' });\n\t\t\tconst workspaceHash = hash(workspaceResource.fsPath).toString(16);\n\n\t\t\t// No Type ID\n\t\t\tlet backupId = toUntypedWorkingCopyId(backupResource);\n\t\t\tlet filePathHash = hashIdentifier(backupId);\n\t\t\tlet expectedPath = URI.file(join(backupHome, workspaceHash, 'custom', filePathHash)).with({ scheme: Schemas.userData }).toString();\n\t\t\tassert.strictEqual(service.toBackupResource(backupId).toString(), expectedPath);\n\n\t\t\t// With Type ID\n\t\t\tbackupId = toTypedWorkingCopyId(backupResource);\n\t\t\tfilePathHash = hashIdentifier(backupId);\n\t\t\texpectedPath = URI.file(join(backupHome, workspaceHash, 'custom', filePathHash)).with({ scheme: Schemas.userData }).toString();\n\t\t\tassert.strictEqual(service.toBackupResource(backupId).toString(), expectedPath);\n\t\t});\n\t});\n\n\tsuite('backup', () => {\n\n\t\tfunction toExpectedPreamble(identifier: IWorkingCopyIdentifier, content = '', meta?: object): string {\n\t\t\treturn `${identifier.resource.toString()} ${JSON.stringify({ ...meta, typeId: identifier.typeId })}\\n${content}`;\n\t\t}\n\n\t\ttest('no text', async () => {\n\t\t\tconst identifier = toUntypedWorkingCopyId(fooFile);\n\t\t\tconst backupPath = join(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\n\t\t\tawait service.backup(identifier);\n\t\t\tassert.strictEqual(readdirSync(join(workspaceBackupPath, 'file')).length, 1);\n\t\t\tassert.strictEqual(existsSync(backupPath), true);\n\t\t\tassert.strictEqual(readFileSync(backupPath).toString(), toExpectedPreamble(identifier));\n\t\t\tassert.ok(service.hasBackupSync(identifier));\n\t\t});\n\n\t\ttest('text file', async () => {\n\t\t\tconst identifier = toUntypedWorkingCopyId(fooFile);\n\t\t\tconst backupPath = join(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\n\t\t\tawait service.backup(identifier, bufferToReadable(VSBuffer.fromString('test')));\n\t\t\tassert.strictEqual(readdirSync(join(workspaceBackupPath, 'file')).length, 1);\n\t\t\tassert.strictEqual(existsSync(backupPath), true);\n\t\t\tassert.strictEqual(readFileSync(backupPath).toString(), toExpectedPreamble(identifier, 'test'));\n\t\t\tassert.ok(service.hasBackupSync(identifier));\n\t\t});\n\n\t\ttest('text file (with version)', async () => {\n\t\t\tconst identifier = toUntypedWorkingCopyId(fooFile);\n\t\t\tconst backupPath = join(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\n\t\t\tawait service.backup(identifier, bufferToReadable(VSBuffer.fromString('test')), 666);\n\t\t\tassert.strictEqual(readdirSync(join(workspaceBackupPath, 'file')).length, 1);\n\t\t\tassert.strictEqual(existsSync(backupPath), true);\n\t\t\tassert.strictEqual(readFileSync(backupPath).toString(), toExpectedPreamble(identifier, 'test'));\n\t\t\tassert.ok(!service.hasBackupSync(identifier, 555));\n\t\t\tassert.ok(service.hasBackupSync(identifier, 666));\n\t\t});\n\n\t\ttest('text file (with meta)', async () => {\n\t\t\tconst identifier = toUntypedWorkingCopyId(fooFile);\n\t\t\tconst backupPath = join(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\t\t\tconst meta = { etag: '678', orphaned: true };\n\n\t\t\tawait service.backup(identifier, bufferToReadable(VSBuffer.fromString('test')), undefined, meta);\n\t\t\tassert.strictEqual(readdirSync(join(workspaceBackupPath, 'file')).length, 1);\n\t\t\tassert.strictEqual(existsSync(backupPath), true);\n\t\t\tassert.strictEqual(readFileSync(backupPath).toString(), toExpectedPreamble(identifier, 'test', meta));\n\t\t\tassert.ok(service.hasBackupSync(identifier));\n\t\t});\n\n\t\ttest('text file with whitespace in name and type (with meta)', async () => {\n\t\t\tlet fileWithSpace = URI.file(isWindows ? 'c:\\\\Foo \\n Bar' : '/Foo \\n Bar');\n\t\t\tconst identifier = toTypedWorkingCopyId(fileWithSpace, ' test id \\n');\n\t\t\tconst backupPath = join(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\t\t\tconst meta = { etag: '678 \\n k', orphaned: true };\n\n\t\t\tawait service.backup(identifier, bufferToReadable(VSBuffer.fromString('test')), undefined, meta);\n\t\t\tassert.strictEqual(readdirSync(join(workspaceBackupPath, 'file')).length, 1);\n\t\t\tassert.strictEqual(existsSync(backupPath), true);\n\t\t\tassert.strictEqual(readFileSync(backupPath).toString(), toExpectedPreamble(identifier, 'test', meta));\n\t\t\tassert.ok(service.hasBackupSync(identifier));\n\t\t});\n\n\t\ttest('text file with unicode character in name and type (with meta)', async () => {\n\t\t\tlet fileWithUnicode = URI.file(isWindows ? 'c:\\\\so𒀅meࠄ' : '/so𒀅meࠄ');\n\t\t\tconst identifier = toTypedWorkingCopyId(fileWithUnicode, ' test so𒀅meࠄ id \\n');\n\t\t\tconst backupPath = join(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\t\t\tconst meta = { etag: '678so𒀅meࠄ', orphaned: true };\n\n\t\t\tawait service.backup(identifier, bufferToReadable(VSBuffer.fromString('test')), undefined, meta);\n\t\t\tassert.strictEqual(readdirSync(join(workspaceBackupPath, 'file')).length, 1);\n\t\t\tassert.strictEqual(existsSync(backupPath), true);\n\t\t\tassert.strictEqual(readFileSync(backupPath).toString(), toExpectedPreamble(identifier, 'test', meta));\n\t\t\tassert.ok(service.hasBackupSync(identifier));\n\t\t});\n\n\t\ttest('untitled file', async () => {\n\t\t\tconst identifier = toUntypedWorkingCopyId(untitledFile);\n\t\t\tconst backupPath = join(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\n\t\t\tawait service.backup(identifier, bufferToReadable(VSBuffer.fromString('test')));\n\t\t\tassert.strictEqual(readdirSync(join(workspaceBackupPath, 'untitled')).length, 1);\n\t\t\tassert.strictEqual(existsSync(backupPath), true);\n\t\t\tassert.strictEqual(readFileSync(backupPath).toString(), toExpectedPreamble(identifier, 'test'));\n\t\t\tassert.ok(service.hasBackupSync(identifier));\n\t\t});\n\n\t\ttest('text file (readable)', async () => {\n\t\t\tconst identifier = toUntypedWorkingCopyId(fooFile);\n\t\t\tconst backupPath = join(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\t\t\tconst model = createTextModel('test');\n\n\t\t\tawait service.backup(identifier, toBufferOrReadable(model.createSnapshot()));\n\t\t\tassert.strictEqual(readdirSync(join(workspaceBackupPath, 'file')).length, 1);\n\t\t\tassert.strictEqual(existsSync(backupPath), true);\n\t\t\tassert.strictEqual(readFileSync(backupPath).toString(), toExpectedPreamble(identifier, 'test'));\n\t\t\tassert.ok(service.hasBackupSync(identifier));\n\n\t\t\tmodel.dispose();\n\t\t});\n\n\t\ttest('untitled file (readable)', async () => {\n\t\t\tconst identifier = toUntypedWorkingCopyId(untitledFile);\n\t\t\tconst backupPath = join(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\t\t\tconst model = createTextModel('test');\n\n\t\t\tawait service.backup(identifier, toBufferOrReadable(model.createSnapshot()));\n\t\t\tassert.strictEqual(readdirSync(join(workspaceBackupPath, 'untitled')).length, 1);\n\t\t\tassert.strictEqual(existsSync(backupPath), true);\n\t\t\tassert.strictEqual(readFileSync(backupPath).toString(), toExpectedPreamble(identifier, 'test'));\n\n\t\t\tmodel.dispose();\n\t\t});\n\n\t\ttest('text file (large file, stream)', () => {\n\t\t\tconst largeString = (new Array(30 * 1024)).join('Large String\\n');\n\n\t\t\treturn testLargeTextFile(largeString, bufferToStream(VSBuffer.fromString(largeString)));\n\t\t});\n\n\t\ttest('text file (large file, readable)', async () => {\n\t\t\tconst largeString = (new Array(30 * 1024)).join('Large String\\n');\n\t\t\tconst model = createTextModel(largeString);\n\n\t\t\tawait testLargeTextFile(largeString, toBufferOrReadable(model.createSnapshot()));\n\n\t\t\tmodel.dispose();\n\t\t});\n\n\t\tasync function testLargeTextFile(largeString: string, buffer: VSBufferReadable | VSBufferReadableStream) {\n\t\t\tconst identifier = toUntypedWorkingCopyId(fooFile);\n\t\t\tconst backupPath = join(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\n\t\t\tawait service.backup(identifier, buffer, undefined, { largeTest: true });\n\t\t\tassert.strictEqual(readdirSync(join(workspaceBackupPath, 'file')).length, 1);\n\t\t\tassert.strictEqual(existsSync(backupPath), true);\n\t\t\tassert.strictEqual(readFileSync(backupPath).toString(), toExpectedPreamble(identifier, largeString, { largeTest: true }));\n\t\t\tassert.ok(service.hasBackupSync(identifier));\n\t\t}\n\n\t\ttest('untitled file (large file, readable)', async () => {\n\t\t\tconst identifier = toUntypedWorkingCopyId(untitledFile);\n\t\t\tconst backupPath = join(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\t\t\tconst largeString = (new Array(30 * 1024)).join('Large String\\n');\n\t\t\tconst model = createTextModel(largeString);\n\n\t\t\tawait service.backup(identifier, toBufferOrReadable(model.createSnapshot()));\n\t\t\tassert.strictEqual(readdirSync(join(workspaceBackupPath, 'untitled')).length, 1);\n\t\t\tassert.strictEqual(existsSync(backupPath), true);\n\t\t\tassert.strictEqual(readFileSync(backupPath).toString(), toExpectedPreamble(identifier, largeString));\n\t\t\tassert.ok(service.hasBackupSync(identifier));\n\n\t\t\tmodel.dispose();\n\t\t});\n\n\t\ttest('cancellation', async () => {\n\t\t\tconst identifier = toUntypedWorkingCopyId(fooFile);\n\t\t\tconst backupPath = join(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\n\t\t\tconst cts = new CancellationTokenSource();\n\t\t\tconst promise = service.backup(identifier, undefined, undefined, undefined, cts.token);\n\t\t\tcts.cancel();\n\t\t\tawait promise;\n\n\t\t\tassert.strictEqual(existsSync(backupPath), false);\n\t\t\tassert.ok(!service.hasBackupSync(identifier));\n\t\t});\n\n\t\ttest('multiple same resource, different type id', async () => {\n\t\t\tconst backupId1 = toUntypedWorkingCopyId(fooFile);\n\t\t\tconst backupId2 = toTypedWorkingCopyId(fooFile, 'type1');\n\t\t\tconst backupId3 = toTypedWorkingCopyId(fooFile, 'type2');\n\n\t\t\tawait service.backup(backupId1);\n\t\t\tawait service.backup(backupId2);\n\t\t\tawait service.backup(backupId3);\n\n\t\t\tassert.strictEqual(readdirSync(join(workspaceBackupPath, 'file')).length, 3);\n\n\t\t\tfor (const backupId of [backupId1, backupId2, backupId3]) {\n\t\t\t\tconst fooBackupPath = join(workspaceBackupPath, backupId.resource.scheme, hashIdentifier(backupId));\n\t\t\t\tassert.strictEqual(existsSync(fooBackupPath), true);\n\t\t\t\tassert.strictEqual(readFileSync(fooBackupPath).toString(), toExpectedPreamble(backupId));\n\t\t\t\tassert.ok(service.hasBackupSync(backupId));\n\t\t\t}\n\t\t});\n\t});\n\n\tsuite('discardBackup', () => {\n\n\t\ttest('text file', async () => {\n\t\t\tconst identifier = toUntypedWorkingCopyId(fooFile);\n\t\t\tconst backupPath = join(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\n\t\t\tawait service.backup(identifier, bufferToReadable(VSBuffer.fromString('test')));\n\t\t\tassert.strictEqual(readdirSync(join(workspaceBackupPath, 'file')).length, 1);\n\t\t\tassert.ok(service.hasBackupSync(identifier));\n\n\t\t\tawait service.discardBackup(identifier);\n\t\t\tassert.strictEqual(existsSync(backupPath), false);\n\t\t\tassert.strictEqual(readdirSync(join(workspaceBackupPath, 'file')).length, 0);\n\t\t\tassert.ok(!service.hasBackupSync(identifier));\n\t\t});\n\n\t\ttest('untitled file', async () => {\n\t\t\tconst identifier = toUntypedWorkingCopyId(untitledFile);\n\t\t\tconst backupPath = join(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\n\t\t\tawait service.backup(identifier, bufferToReadable(VSBuffer.fromString('test')));\n\t\t\tassert.strictEqual(readdirSync(join(workspaceBackupPath, 'untitled')).length, 1);\n\n\t\t\tawait service.discardBackup(identifier);\n\t\t\tassert.strictEqual(existsSync(backupPath), false);\n\t\t\tassert.strictEqual(readdirSync(join(workspaceBackupPath, 'untitled')).length, 0);\n\t\t});\n\n\t\ttest('multiple same resource, different type id', async () => {\n\t\t\tconst backupId1 = toUntypedWorkingCopyId(fooFile);\n\t\t\tconst backupId2 = toTypedWorkingCopyId(fooFile, 'type1');\n\t\t\tconst backupId3 = toTypedWorkingCopyId(fooFile, 'type2');\n\n\t\t\tawait service.backup(backupId1);\n\t\t\tawait service.backup(backupId2);\n\t\t\tawait service.backup(backupId3);\n\n\t\t\tassert.strictEqual(readdirSync(join(workspaceBackupPath, 'file')).length, 3);\n\n\t\t\tfor (const backupId of [backupId1, backupId2, backupId3]) {\n\t\t\t\tconst backupPath = join(workspaceBackupPath, backupId.resource.scheme, hashIdentifier(backupId));\n\t\t\t\tawait service.discardBackup(backupId);\n\t\t\t\tassert.strictEqual(existsSync(backupPath), false);\n\t\t\t}\n\t\t\tassert.strictEqual(readdirSync(join(workspaceBackupPath, 'file')).length, 0);\n\t\t});\n\t});\n\n\tsuite('discardBackups (all)', () => {\n\t\ttest('text file', async () => {\n\t\t\tconst backupId1 = toUntypedWorkingCopyId(fooFile);\n\t\t\tconst backupId2 = toUntypedWorkingCopyId(barFile);\n\t\t\tconst backupId3 = toTypedWorkingCopyId(barFile);\n\n\t\t\tawait service.backup(backupId1, bufferToReadable(VSBuffer.fromString('test')));\n\t\t\tassert.strictEqual(readdirSync(join(workspaceBackupPath, 'file')).length, 1);\n\n\t\t\tawait service.backup(backupId2, bufferToReadable(VSBuffer.fromString('test')));\n\t\t\tassert.strictEqual(readdirSync(join(workspaceBackupPath, 'file')).length, 2);\n\n\t\t\tawait service.backup(backupId3, bufferToReadable(VSBuffer.fromString('test')));\n\t\t\tassert.strictEqual(readdirSync(join(workspaceBackupPath, 'file')).length, 3);\n\n\t\t\tawait service.discardBackups();\n\t\t\tfor (const backupId of [backupId1, backupId2, backupId3]) {\n\t\t\t\tconst backupPath = join(workspaceBackupPath, backupId.resource.scheme, hashIdentifier(backupId));\n\t\t\t\tassert.strictEqual(existsSync(backupPath), false);\n\t\t\t}\n\n\t\t\tassert.strictEqual(existsSync(join(workspaceBackupPath, 'file')), false);\n\t\t});\n\n\t\ttest('untitled file', async () => {\n\t\t\tconst backupId = toUntypedWorkingCopyId(untitledFile);\n\t\t\tconst backupPath = join(workspaceBackupPath, backupId.resource.scheme, hashIdentifier(backupId));\n\n\t\t\tawait service.backup(backupId, bufferToReadable(VSBuffer.fromString('test')));\n\t\t\tassert.strictEqual(readdirSync(join(workspaceBackupPath, 'untitled')).length, 1);\n\n\t\t\tawait service.discardBackups();\n\t\t\tassert.strictEqual(existsSync(backupPath), false);\n\t\t\tassert.strictEqual(existsSync(join(workspaceBackupPath, 'untitled')), false);\n\t\t});\n\n\t\ttest('can backup after discarding all', async () => {\n\t\t\tawait service.discardBackups();\n\t\t\tawait service.backup(toUntypedWorkingCopyId(untitledFile), bufferToReadable(VSBuffer.fromString('test')));\n\t\t\tassert.strictEqual(existsSync(workspaceBackupPath), true);\n\t\t});\n\t});\n\n\tsuite('discardBackups (except some)', () => {\n\t\ttest('text file', async () => {\n\t\t\tconst backupId1 = toUntypedWorkingCopyId(fooFile);\n\t\t\tconst backupId2 = toUntypedWorkingCopyId(barFile);\n\t\t\tconst backupId3 = toTypedWorkingCopyId(barFile);\n\n\t\t\tawait service.backup(backupId1, bufferToReadable(VSBuffer.fromString('test')));\n\t\t\tassert.strictEqual(readdirSync(join(workspaceBackupPath, 'file')).length, 1);\n\n\t\t\tawait service.backup(backupId2, bufferToReadable(VSBuffer.fromString('test')));\n\t\t\tassert.strictEqual(readdirSync(join(workspaceBackupPath, 'file')).length, 2);\n\n\t\t\tawait service.backup(backupId3, bufferToReadable(VSBuffer.fromString('test')));\n\t\t\tassert.strictEqual(readdirSync(join(workspaceBackupPath, 'file')).length, 3);\n\n\t\t\tawait service.discardBackups([backupId2, backupId3]);\n\n\t\t\tlet backupPath = join(workspaceBackupPath, backupId1.resource.scheme, hashIdentifier(backupId1));\n\t\t\tassert.strictEqual(existsSync(backupPath), false);\n\n\t\t\tbackupPath = join(workspaceBackupPath, backupId2.resource.scheme, hashIdentifier(backupId2));\n\t\t\tassert.strictEqual(existsSync(backupPath), true);\n\n\t\t\tbackupPath = join(workspaceBackupPath, backupId3.resource.scheme, hashIdentifier(backupId3));\n\t\t\tassert.strictEqual(existsSync(backupPath), true);\n\n\t\t\tawait service.discardBackups([backupId1]);\n\n\t\t\tfor (const backupId of [backupId1, backupId2, backupId3]) {\n\t\t\t\tconst backupPath = join(workspaceBackupPath, backupId.resource.scheme, hashIdentifier(backupId));\n\t\t\t\tassert.strictEqual(existsSync(backupPath), false);\n\t\t\t}\n\t\t});\n\n\t\ttest('untitled file', async () => {\n\t\t\tconst backupId = toUntypedWorkingCopyId(untitledFile);\n\t\t\tconst backupPath = join(workspaceBackupPath, backupId.resource.scheme, hashIdentifier(backupId));\n\n\t\t\tawait service.backup(backupId, bufferToReadable(VSBuffer.fromString('test')));\n\t\t\tassert.strictEqual(existsSync(backupPath), true);\n\t\t\tassert.strictEqual(readdirSync(join(workspaceBackupPath, 'untitled')).length, 1);\n\n\t\t\tawait service.discardBackups([backupId]);\n\t\t\tassert.strictEqual(existsSync(backupPath), true);\n\t\t});\n\t});\n\n\tsuite('getBackups', () => {\n\t\ttest('text file', async () => {\n\t\t\tawait service.backup(toUntypedWorkingCopyId(fooFile), bufferToReadable(VSBuffer.fromString('test')));\n\t\t\tawait service.backup(toTypedWorkingCopyId(fooFile, 'type1'), bufferToReadable(VSBuffer.fromString('test')));\n\t\t\tawait service.backup(toTypedWorkingCopyId(fooFile, 'type2'), bufferToReadable(VSBuffer.fromString('test')));\n\n\t\t\tlet backups = await service.getBackups();\n\t\t\tassert.strictEqual(backups.length, 3);\n\n\t\t\tfor (const backup of backups) {\n\t\t\t\tif (backup.typeId === '') {\n\t\t\t\t\tassert.strictEqual(backup.resource.toString(), fooFile.toString());\n\t\t\t\t} else if (backup.typeId === 'type1') {\n\t\t\t\t\tassert.strictEqual(backup.resource.toString(), fooFile.toString());\n\t\t\t\t} else if (backup.typeId === 'type2') {\n\t\t\t\t\tassert.strictEqual(backup.resource.toString(), fooFile.toString());\n\t\t\t\t} else {\n\t\t\t\t\tassert.fail('Unexpected backup');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tawait service.backup(toUntypedWorkingCopyId(barFile), bufferToReadable(VSBuffer.fromString('test')));\n\n\t\t\tbackups = await service.getBackups();\n\t\t\tassert.strictEqual(backups.length, 4);\n\t\t});\n\n\t\ttest('untitled file', async () => {\n\t\t\tawait service.backup(toUntypedWorkingCopyId(untitledFile), bufferToReadable(VSBuffer.fromString('test')));\n\t\t\tawait service.backup(toTypedWorkingCopyId(untitledFile, 'type1'), bufferToReadable(VSBuffer.fromString('test')));\n\t\t\tawait service.backup(toTypedWorkingCopyId(untitledFile, 'type2'), bufferToReadable(VSBuffer.fromString('test')));\n\n\t\t\tconst backups = await service.getBackups();\n\t\t\tassert.strictEqual(backups.length, 3);\n\n\t\t\tfor (const backup of backups) {\n\t\t\t\tif (backup.typeId === '') {\n\t\t\t\t\tassert.strictEqual(backup.resource.toString(), untitledFile.toString());\n\t\t\t\t} else if (backup.typeId === 'type1') {\n\t\t\t\t\tassert.strictEqual(backup.resource.toString(), untitledFile.toString());\n\t\t\t\t} else if (backup.typeId === 'type2') {\n\t\t\t\t\tassert.strictEqual(backup.resource.toString(), untitledFile.toString());\n\t\t\t\t} else {\n\t\t\t\t\tassert.fail('Unexpected backup');\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\n\tsuite('resolve', () => {\n\n\t\tinterface IBackupTestMetaData extends IWorkingCopyBackupMeta {\n\t\t\tmtime?: number;\n\t\t\tsize?: number;\n\t\t\tetag?: string;\n\t\t\torphaned?: boolean;\n\t\t}\n\n\t\ttest('should restore the original contents (untitled file)', async () => {\n\t\t\tconst contents = 'test\\nand more stuff';\n\n\t\t\tawait testResolveBackup(untitledFile, contents);\n\t\t});\n\n\t\ttest('should restore the original contents (untitled file with metadata)', async () => {\n\t\t\tconst contents = 'test\\nand more stuff';\n\n\t\t\tconst meta = {\n\t\t\t\tetag: 'the Etag',\n\t\t\t\tsize: 666,\n\t\t\t\tmtime: Date.now(),\n\t\t\t\torphaned: true\n\t\t\t};\n\n\t\t\tawait testResolveBackup(untitledFile, contents, meta);\n\t\t});\n\n\t\ttest('should restore the original contents (untitled file empty with metadata)', async () => {\n\t\t\tconst contents = '';\n\n\t\t\tconst meta = {\n\t\t\t\tetag: 'the Etag',\n\t\t\t\tsize: 666,\n\t\t\t\tmtime: Date.now(),\n\t\t\t\torphaned: true\n\t\t\t};\n\n\t\t\tawait testResolveBackup(untitledFile, contents, meta);\n\t\t});\n\n\t\ttest('should restore the original contents (untitled large file with metadata)', async () => {\n\t\t\tconst contents = (new Array(30 * 1024)).join('Large String\\n');\n\n\t\t\tconst meta = {\n\t\t\t\tetag: 'the Etag',\n\t\t\t\tsize: 666,\n\t\t\t\tmtime: Date.now(),\n\t\t\t\torphaned: true\n\t\t\t};\n\n\t\t\tawait testResolveBackup(untitledFile, contents, meta);\n\t\t});\n\n\t\ttest('should restore the original contents (text file)', async () => {\n\t\t\tconst contents = [\n\t\t\t\t'Lorem ipsum ',\n\t\t\t\t'dolor öäü sit amet ',\n\t\t\t\t'consectetur ',\n\t\t\t\t'adipiscing ßß elit'\n\t\t\t].join('');\n\n\t\t\tawait testResolveBackup(fooFile, contents);\n\t\t});\n\n\t\ttest('should restore the original contents (text file - custom scheme)', async () => {\n\t\t\tconst contents = [\n\t\t\t\t'Lorem ipsum ',\n\t\t\t\t'dolor öäü sit amet ',\n\t\t\t\t'consectetur ',\n\t\t\t\t'adipiscing ßß elit'\n\t\t\t].join('');\n\n\t\t\tawait testResolveBackup(customFile, contents);\n\t\t});\n\n\t\ttest('should restore the original contents (text file with metadata)', async () => {\n\t\t\tconst contents = [\n\t\t\t\t'Lorem ipsum ',\n\t\t\t\t'dolor öäü sit amet ',\n\t\t\t\t'adipiscing ßß elit',\n\t\t\t\t'consectetur '\n\t\t\t].join('');\n\n\t\t\tconst meta = {\n\t\t\t\tetag: 'theEtag',\n\t\t\t\tsize: 888,\n\t\t\t\tmtime: Date.now(),\n\t\t\t\torphaned: false\n\t\t\t};\n\n\t\t\tawait testResolveBackup(fooFile, contents, meta);\n\t\t});\n\n\t\ttest('should restore the original contents (empty text file with metadata)', async () => {\n\t\t\tconst contents = '';\n\n\t\t\tconst meta = {\n\t\t\t\tetag: 'theEtag',\n\t\t\t\tsize: 888,\n\t\t\t\tmtime: Date.now(),\n\t\t\t\torphaned: false\n\t\t\t};\n\n\t\t\tawait testResolveBackup(fooFile, contents, meta);\n\t\t});\n\n\t\ttest('should restore the original contents (large text file with metadata)', async () => {\n\t\t\tconst contents = (new Array(30 * 1024)).join('Large String\\n');\n\n\t\t\tconst meta = {\n\t\t\t\tetag: 'theEtag',\n\t\t\t\tsize: 888,\n\t\t\t\tmtime: Date.now(),\n\t\t\t\torphaned: false\n\t\t\t};\n\n\t\t\tawait testResolveBackup(fooFile, contents, meta);\n\t\t});\n\n\t\ttest('should restore the original contents (text file with metadata changed once)', async () => {\n\t\t\tconst contents = [\n\t\t\t\t'Lorem ipsum ',\n\t\t\t\t'dolor öäü sit amet ',\n\t\t\t\t'adipiscing ßß elit',\n\t\t\t\t'consectetur '\n\t\t\t].join('');\n\n\t\t\tconst meta = {\n\t\t\t\tetag: 'theEtag',\n\t\t\t\tsize: 888,\n\t\t\t\tmtime: Date.now(),\n\t\t\t\torphaned: false\n\t\t\t};\n\n\t\t\tawait testResolveBackup(fooFile, contents, meta);\n\n\t\t\t// Change meta and test again\n\t\t\tmeta.size = 999;\n\t\t\tawait testResolveBackup(fooFile, contents, meta);\n\t\t});\n\n\t\ttest('should restore the original contents (text file with metadata and fragment URI)', async () => {\n\t\t\tconst contents = [\n\t\t\t\t'Lorem ipsum ',\n\t\t\t\t'dolor öäü sit amet ',\n\t\t\t\t'adipiscing ßß elit',\n\t\t\t\t'consectetur '\n\t\t\t].join('');\n\n\t\t\tconst meta = {\n\t\t\t\tetag: 'theEtag',\n\t\t\t\tsize: 888,\n\t\t\t\tmtime: Date.now(),\n\t\t\t\torphaned: false\n\t\t\t};\n\n\t\t\tawait testResolveBackup(customFileWithFragment, contents, meta);\n\t\t});\n\n\t\ttest('should restore the original contents (text file with space in name with metadata)', async () => {\n\t\t\tconst contents = [\n\t\t\t\t'Lorem ipsum ',\n\t\t\t\t'dolor öäü sit amet ',\n\t\t\t\t'adipiscing ßß elit',\n\t\t\t\t'consectetur '\n\t\t\t].join('');\n\n\t\t\tconst meta = {\n\t\t\t\tetag: 'theEtag',\n\t\t\t\tsize: 888,\n\t\t\t\tmtime: Date.now(),\n\t\t\t\torphaned: false\n\t\t\t};\n\n\t\t\tawait testResolveBackup(fooBarFile, contents, meta);\n\t\t});\n\n\t\ttest('should restore the original contents (text file with too large metadata to persist)', async () => {\n\t\t\tconst contents = [\n\t\t\t\t'Lorem ipsum ',\n\t\t\t\t'dolor öäü sit amet ',\n\t\t\t\t'adipiscing ßß elit',\n\t\t\t\t'consectetur '\n\t\t\t].join('');\n\n\t\t\tconst meta = {\n\t\t\t\tetag: (new Array(100 * 1024)).join('Large String'),\n\t\t\t\tsize: 888,\n\t\t\t\tmtime: Date.now(),\n\t\t\t\torphaned: false\n\t\t\t};\n\n\t\t\tawait testResolveBackup(fooFile, contents, meta, true);\n\t\t});\n\n\t\tasync function testResolveBackup(resource: URI, contents: string, meta?: IBackupTestMetaData, expectNoMeta?: boolean) {\n\t\t\tawait doTestResolveBackup(toUntypedWorkingCopyId(resource), contents, meta, expectNoMeta);\n\t\t\tawait doTestResolveBackup(toTypedWorkingCopyId(resource), contents, meta, expectNoMeta);\n\t\t}\n\n\t\tasync function doTestResolveBackup(identifier: IWorkingCopyIdentifier, contents: string, meta?: IBackupTestMetaData, expectNoMeta?: boolean) {\n\t\t\tawait service.backup(identifier, bufferToReadable(VSBuffer.fromString(contents)), 1, meta);\n\n\t\t\tconst backup = await service.resolve<IBackupTestMetaData>(identifier);\n\t\t\tassert.ok(backup);\n\t\t\tassert.strictEqual(contents, (await streamToBuffer(backup.value)).toString());\n\n\t\t\tif (expectNoMeta || !meta) {\n\t\t\t\tassert.strictEqual(backup.meta, undefined);\n\t\t\t} else {\n\t\t\t\tassert.ok(backup.meta);\n\t\t\t\tassert.strictEqual(backup.meta.etag, meta.etag);\n\t\t\t\tassert.strictEqual(backup.meta.size, meta.size);\n\t\t\t\tassert.strictEqual(backup.meta.mtime, meta.mtime);\n\t\t\t\tassert.strictEqual(backup.meta.orphaned, meta.orphaned);\n\n\t\t\t\tassert.strictEqual(Object.keys(meta).length, Object.keys(backup.meta).length);\n\t\t\t}\n\t\t}\n\n\t\ttest('should restore the original contents (text file with broken metadata)', async () => {\n\t\t\tawait testShouldRestoreOriginalContentsWithBrokenBackup(toUntypedWorkingCopyId(fooFile));\n\t\t\tawait testShouldRestoreOriginalContentsWithBrokenBackup(toTypedWorkingCopyId(fooFile));\n\t\t});\n\n\t\tasync function testShouldRestoreOriginalContentsWithBrokenBackup(identifier: IWorkingCopyIdentifier): Promise<void> {\n\t\t\tconst contents = [\n\t\t\t\t'Lorem ipsum ',\n\t\t\t\t'dolor öäü sit amet ',\n\t\t\t\t'adipiscing ßß elit',\n\t\t\t\t'consectetur '\n\t\t\t].join('');\n\n\t\t\tconst meta = {\n\t\t\t\tetag: 'theEtag',\n\t\t\t\tsize: 888,\n\t\t\t\tmtime: Date.now(),\n\t\t\t\torphaned: false\n\t\t\t};\n\n\t\t\tawait service.backup(identifier, bufferToReadable(VSBuffer.fromString(contents)), 1, meta);\n\n\t\t\tconst backupPath = join(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\n\t\t\tconst fileContents = readFileSync(backupPath).toString();\n\t\t\tassert.strictEqual(fileContents.indexOf(identifier.resource.toString()), 0);\n\n\t\t\tconst metaIndex = fileContents.indexOf('{');\n\t\t\tconst newFileContents = fileContents.substring(0, metaIndex) + '{{' + fileContents.substr(metaIndex);\n\t\t\twriteFileSync(backupPath, newFileContents);\n\n\t\t\tconst backup = await service.resolve(identifier);\n\t\t\tassert.ok(backup);\n\t\t\tassert.strictEqual(contents, (await streamToBuffer(backup.value)).toString());\n\t\t\tassert.strictEqual(backup.meta, undefined);\n\t\t}\n\n\t\ttest('should ignore invalid backups (empty file)', async () => {\n\t\t\tconst contents = 'test\\nand more stuff';\n\n\t\t\tawait service.backup(toUntypedWorkingCopyId(fooFile), bufferToReadable(VSBuffer.fromString(contents)), 1);\n\n\t\t\tlet backup = await service.resolve(toUntypedWorkingCopyId(fooFile));\n\t\t\tassert.ok(backup);\n\n\t\t\tawait service.fileService.writeFile(service.toBackupResource(toUntypedWorkingCopyId(fooFile)), VSBuffer.fromString(''));\n\n\t\t\tbackup = await service.resolve<IBackupTestMetaData>(toUntypedWorkingCopyId(fooFile));\n\t\t\tassert.ok(!backup);\n\t\t});\n\n\t\ttest('should ignore invalid backups (no preamble)', async () => {\n\t\t\tconst contents = 'testand more stuff';\n\n\t\t\tawait service.backup(toUntypedWorkingCopyId(fooFile), bufferToReadable(VSBuffer.fromString(contents)), 1);\n\n\t\t\tlet backup = await service.resolve(toUntypedWorkingCopyId(fooFile));\n\t\t\tassert.ok(backup);\n\n\t\t\tawait service.fileService.writeFile(service.toBackupResource(toUntypedWorkingCopyId(fooFile)), VSBuffer.fromString(contents));\n\n\t\t\tbackup = await service.resolve<IBackupTestMetaData>(toUntypedWorkingCopyId(fooFile));\n\t\t\tassert.ok(!backup);\n\t\t});\n\n\t\ttest('file with binary data', async () => {\n\t\t\tconst identifier = toUntypedWorkingCopyId(fooFile);\n\n\t\t\tconst sourceDir = getPathFromAmdModule(require, './fixtures');\n\n\t\t\tconst buffer = await promises.readFile(join(sourceDir, 'binary.txt'));\n\t\t\tconst hash = createHash('md5').update(buffer).digest('base64');\n\n\t\t\tawait service.backup(identifier, bufferToReadable(VSBuffer.wrap(buffer)), undefined, { binaryTest: 'true' });\n\n\t\t\tconst backup = await service.resolve(toUntypedWorkingCopyId(fooFile));\n\t\t\tassert.ok(backup);\n\n\t\t\tconst backupBuffer = await consumeStream(backup.value, chunks => VSBuffer.concat(chunks));\n\t\t\tassert.strictEqual(backupBuffer.buffer.byteLength, buffer.byteLength);\n\n\t\t\tconst backupHash = createHash('md5').update(backupBuffer.buffer).digest('base64');\n\n\t\t\tassert.strictEqual(hash, backupHash);\n\t\t});\n\t});\n\n\tsuite('WorkingCopyBackupsModel', () => {\n\n\t\ttest('simple', async () => {\n\t\t\tconst model = await WorkingCopyBackupsModel.create(URI.file(workspaceBackupPath), service.fileService);\n\n\t\t\tconst resource1 = URI.file('test.html');\n\n\t\t\tassert.strictEqual(model.has(resource1), false);\n\n\t\t\tmodel.add(resource1);\n\n\t\t\tassert.strictEqual(model.has(resource1), true);\n\t\t\tassert.strictEqual(model.has(resource1, 0), true);\n\t\t\tassert.strictEqual(model.has(resource1, 1), false);\n\t\t\tassert.strictEqual(model.has(resource1, 1, { foo: 'bar' }), false);\n\n\t\t\tmodel.remove(resource1);\n\n\t\t\tassert.strictEqual(model.has(resource1), false);\n\n\t\t\tmodel.add(resource1);\n\n\t\t\tassert.strictEqual(model.has(resource1), true);\n\t\t\tassert.strictEqual(model.has(resource1, 0), true);\n\t\t\tassert.strictEqual(model.has(resource1, 1), false);\n\n\t\t\tmodel.clear();\n\n\t\t\tassert.strictEqual(model.has(resource1), false);\n\n\t\t\tmodel.add(resource1, 1);\n\n\t\t\tassert.strictEqual(model.has(resource1), true);\n\t\t\tassert.strictEqual(model.has(resource1, 0), false);\n\t\t\tassert.strictEqual(model.has(resource1, 1), true);\n\n\t\t\tconst resource2 = URI.file('test1.html');\n\t\t\tconst resource3 = URI.file('test2.html');\n\t\t\tconst resource4 = URI.file('test3.html');\n\n\t\t\tmodel.add(resource2);\n\t\t\tmodel.add(resource3);\n\t\t\tmodel.add(resource4, undefined, { foo: 'bar' });\n\n\t\t\tassert.strictEqual(model.has(resource1), true);\n\t\t\tassert.strictEqual(model.has(resource2), true);\n\t\t\tassert.strictEqual(model.has(resource3), true);\n\n\t\t\tassert.strictEqual(model.has(resource4), true);\n\t\t\tassert.strictEqual(model.has(resource4, undefined, { foo: 'bar' }), true);\n\t\t\tassert.strictEqual(model.has(resource4, undefined, { bar: 'foo' }), false);\n\n\t\t\tconst resource5 = URI.file('test4.html');\n\t\t\tmodel.move(resource4, resource5);\n\t\t\tassert.strictEqual(model.has(resource4), false);\n\t\t\tassert.strictEqual(model.has(resource5), true);\n\t\t});\n\n\t\ttest('create', async () => {\n\t\t\tconst fooBackupPath = join(workspaceBackupPath, fooFile.scheme, hashIdentifier(toUntypedWorkingCopyId(fooFile)));\n\t\t\tawait promises.mkdir(dirname(fooBackupPath), { recursive: true });\n\t\t\twriteFileSync(fooBackupPath, 'foo');\n\t\t\tconst model = await WorkingCopyBackupsModel.create(URI.file(workspaceBackupPath), service.fileService);\n\n\t\t\tassert.strictEqual(model.has(URI.file(fooBackupPath)), true);\n\t\t});\n\n\t\ttest('get', async () => {\n\t\t\tconst model = await WorkingCopyBackupsModel.create(URI.file(workspaceBackupPath), service.fileService);\n\n\t\t\tassert.deepStrictEqual(model.get(), []);\n\n\t\t\tconst file1 = URI.file('/root/file/foo.html');\n\t\t\tconst file2 = URI.file('/root/file/bar.html');\n\t\t\tconst untitled = URI.file('/root/untitled/bar.html');\n\n\t\t\tmodel.add(file1);\n\t\t\tmodel.add(file2);\n\t\t\tmodel.add(untitled);\n\n\t\t\tassert.deepStrictEqual(model.get().map(f => f.fsPath), [file1.fsPath, file2.fsPath, untitled.fsPath]);\n\t\t});\n\t});\n\n\tsuite('Hash migration', () => {\n\n\t\ttest('works', async () => {\n\t\t\tconst fooBackupId = toUntypedWorkingCopyId(fooFile);\n\t\t\tconst untitledBackupId = toUntypedWorkingCopyId(untitledFile);\n\t\t\tconst customBackupId = toUntypedWorkingCopyId(customFile);\n\n\t\t\tconst fooBackupPath = join(workspaceBackupPath, fooFile.scheme, hashIdentifier(fooBackupId));\n\t\t\tconst untitledBackupPath = join(workspaceBackupPath, untitledFile.scheme, hashIdentifier(untitledBackupId));\n\t\t\tconst customFileBackupPath = join(workspaceBackupPath, customFile.scheme, hashIdentifier(customBackupId));\n\n\t\t\t// Prepare backups of the old MD5 hash format\n\t\t\tmkdirSync(join(workspaceBackupPath, fooFile.scheme), { recursive: true });\n\t\t\tmkdirSync(join(workspaceBackupPath, untitledFile.scheme), { recursive: true });\n\t\t\tmkdirSync(join(workspaceBackupPath, customFile.scheme), { recursive: true });\n\t\t\twriteFileSync(join(workspaceBackupPath, fooFile.scheme, '8a8589a2f1c9444b89add38166f50229'), `${fooFile.toString()}\\ntest file`);\n\t\t\twriteFileSync(join(workspaceBackupPath, untitledFile.scheme, '13264068d108c6901b3592ea654fcd57'), `${untitledFile.toString()}\\ntest untitled`);\n\t\t\twriteFileSync(join(workspaceBackupPath, customFile.scheme, 'bf018572af7b38746b502893bd0adf6c'), `${customFile.toString()}\\ntest custom`);\n\n\t\t\tservice.reinitialize(URI.file(workspaceBackupPath));\n\n\t\t\tconst backups = await service.getBackups();\n\t\t\tassert.strictEqual(backups.length, 3);\n\t\t\tassert.ok(backups.some(backup => isEqual(backup.resource, fooFile)));\n\t\t\tassert.ok(backups.some(backup => isEqual(backup.resource, untitledFile)));\n\t\t\tassert.ok(backups.some(backup => isEqual(backup.resource, customFile)));\n\n\t\t\tassert.strictEqual(readdirSync(join(workspaceBackupPath, fooFile.scheme)).length, 1);\n\t\t\tassert.strictEqual(existsSync(fooBackupPath), true);\n\t\t\tassert.strictEqual(readFileSync(fooBackupPath).toString(), `${fooFile.toString()}\\ntest file`);\n\t\t\tassert.ok(service.hasBackupSync(fooBackupId));\n\n\t\t\tassert.strictEqual(readdirSync(join(workspaceBackupPath, untitledFile.scheme)).length, 1);\n\t\t\tassert.strictEqual(existsSync(untitledBackupPath), true);\n\t\t\tassert.strictEqual(readFileSync(untitledBackupPath).toString(), `${untitledFile.toString()}\\ntest untitled`);\n\t\t\tassert.ok(service.hasBackupSync(untitledBackupId));\n\n\t\t\tassert.strictEqual(readdirSync(join(workspaceBackupPath, customFile.scheme)).length, 1);\n\t\t\tassert.strictEqual(existsSync(customFileBackupPath), true);\n\t\t\tassert.strictEqual(readFileSync(customFileBackupPath).toString(), `${customFile.toString()}\\ntest custom`);\n\t\t\tassert.ok(service.hasBackupSync(customBackupId));\n\t\t});\n\t});\n\n\tsuite('typeId migration', () => {\n\n\t\ttest('works (when meta is missing)', async () => {\n\t\t\tconst fooBackupId = toUntypedWorkingCopyId(fooFile);\n\t\t\tconst untitledBackupId = toUntypedWorkingCopyId(untitledFile);\n\t\t\tconst customBackupId = toUntypedWorkingCopyId(customFile);\n\n\t\t\tconst fooBackupPath = join(workspaceBackupPath, fooFile.scheme, hashIdentifier(fooBackupId));\n\t\t\tconst untitledBackupPath = join(workspaceBackupPath, untitledFile.scheme, hashIdentifier(untitledBackupId));\n\t\t\tconst customFileBackupPath = join(workspaceBackupPath, customFile.scheme, hashIdentifier(customBackupId));\n\n\t\t\t// Prepare backups of the old format without meta\n\t\t\tmkdirSync(join(workspaceBackupPath, fooFile.scheme), { recursive: true });\n\t\t\tmkdirSync(join(workspaceBackupPath, untitledFile.scheme), { recursive: true });\n\t\t\tmkdirSync(join(workspaceBackupPath, customFile.scheme), { recursive: true });\n\t\t\twriteFileSync(fooBackupPath, `${fooFile.toString()}\\ntest file`);\n\t\t\twriteFileSync(untitledBackupPath, `${untitledFile.toString()}\\ntest untitled`);\n\t\t\twriteFileSync(customFileBackupPath, `${customFile.toString()}\\ntest custom`);\n\n\t\t\tservice.reinitialize(URI.file(workspaceBackupPath));\n\n\t\t\tconst backups = await service.getBackups();\n\t\t\tassert.strictEqual(backups.length, 3);\n\t\t\tassert.ok(backups.some(backup => isEqual(backup.resource, fooFile)));\n\t\t\tassert.ok(backups.some(backup => isEqual(backup.resource, untitledFile)));\n\t\t\tassert.ok(backups.some(backup => isEqual(backup.resource, customFile)));\n\t\t\tassert.ok(backups.every(backup => backup.typeId === ''));\n\t\t});\n\n\t\ttest('works (when typeId in meta is missing)', async () => {\n\t\t\tconst fooBackupId = toUntypedWorkingCopyId(fooFile);\n\t\t\tconst untitledBackupId = toUntypedWorkingCopyId(untitledFile);\n\t\t\tconst customBackupId = toUntypedWorkingCopyId(customFile);\n\n\t\t\tconst fooBackupPath = join(workspaceBackupPath, fooFile.scheme, hashIdentifier(fooBackupId));\n\t\t\tconst untitledBackupPath = join(workspaceBackupPath, untitledFile.scheme, hashIdentifier(untitledBackupId));\n\t\t\tconst customFileBackupPath = join(workspaceBackupPath, customFile.scheme, hashIdentifier(customBackupId));\n\n\t\t\t// Prepare backups of the old format without meta\n\t\t\tmkdirSync(join(workspaceBackupPath, fooFile.scheme), { recursive: true });\n\t\t\tmkdirSync(join(workspaceBackupPath, untitledFile.scheme), { recursive: true });\n\t\t\tmkdirSync(join(workspaceBackupPath, customFile.scheme), { recursive: true });\n\t\t\twriteFileSync(fooBackupPath, `${fooFile.toString()} ${JSON.stringify({ foo: 'bar' })}\\ntest file`);\n\t\t\twriteFileSync(untitledBackupPath, `${untitledFile.toString()} ${JSON.stringify({ foo: 'bar' })}\\ntest untitled`);\n\t\t\twriteFileSync(customFileBackupPath, `${customFile.toString()} ${JSON.stringify({ foo: 'bar' })}\\ntest custom`);\n\n\t\t\tservice.reinitialize(URI.file(workspaceBackupPath));\n\n\t\t\tconst backups = await service.getBackups();\n\t\t\tassert.strictEqual(backups.length, 3);\n\t\t\tassert.ok(backups.some(backup => isEqual(backup.resource, fooFile)));\n\t\t\tassert.ok(backups.some(backup => isEqual(backup.resource, untitledFile)));\n\t\t\tassert.ok(backups.some(backup => isEqual(backup.resource, customFile)));\n\t\t\tassert.ok(backups.every(backup => backup.typeId === ''));\n\t\t});\n\t});\n});\n"]}