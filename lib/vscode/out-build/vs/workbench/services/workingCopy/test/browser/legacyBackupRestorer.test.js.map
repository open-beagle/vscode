{"version":3,"file":"legacyBackupRestorer.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/workingCopy/test/browser/legacyBackupRestorer.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { isWindows } from 'vs/base/common/platform';\nimport { URI } from 'vs/base/common/uri';\nimport { bufferToReadable, VSBuffer } from 'vs/base/common/buffer';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { EditorService } from 'vs/workbench/services/editor/browser/editorService';\nimport { IWorkingCopyBackupService } from 'vs/workbench/services/workingCopy/common/workingCopyBackup';\nimport { Schemas } from 'vs/base/common/network';\nimport { isEqual } from 'vs/base/common/resources';\nimport { createEditorPart, InMemoryTestWorkingCopyBackupService, registerTestResourceEditor, TestServiceAccessor, toUntypedWorkingCopyId, workbenchInstantiationService } from 'vs/workbench/test/browser/workbenchTestServices';\nimport { LegacyWorkingCopyBackupRestorer } from 'vs/workbench/services/workingCopy/common/legacyBackupRestorer';\nimport { BrowserWorkingCopyBackupTracker } from 'vs/workbench/services/workingCopy/browser/workingCopyBackupTracker';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\n\nsuite('LegacyWorkingCopyBackupRestorer', () => {\n\n\tclass TestBackupRestorer extends LegacyWorkingCopyBackupRestorer {\n\t\toverride async doRestoreLegacyBackups(): Promise<void> {\n\t\t\treturn super.doRestoreLegacyBackups();\n\t\t}\n\t}\n\n\tlet accessor: TestServiceAccessor;\n\tlet disposables = new DisposableStore();\n\n\tconst fooFile = URI.file(isWindows ? 'c:\\\\Foo' : '/Foo');\n\tconst barFile = URI.file(isWindows ? 'c:\\\\Bar' : '/Bar');\n\tconst untitledFile1 = URI.from({ scheme: Schemas.untitled, path: 'Untitled-1' });\n\tconst untitledFile2 = URI.from({ scheme: Schemas.untitled, path: 'Untitled-2' });\n\n\tsetup(() => {\n\t\tdisposables.add(registerTestResourceEditor());\n\t});\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\ttest('Restore backups', async function () {\n\t\tconst workingCopyBackupService = new InMemoryTestWorkingCopyBackupService();\n\t\tconst instantiationService = workbenchInstantiationService();\n\t\tinstantiationService.stub(IWorkingCopyBackupService, workingCopyBackupService);\n\n\t\tconst part = await createEditorPart(instantiationService, disposables);\n\n\t\tinstantiationService.stub(IEditorGroupsService, part);\n\n\t\tconst editorService: EditorService = instantiationService.createInstance(EditorService);\n\t\tinstantiationService.stub(IEditorService, editorService);\n\n\t\taccessor = instantiationService.createInstance(TestServiceAccessor);\n\n\t\tdisposables.add(instantiationService.createInstance(BrowserWorkingCopyBackupTracker));\n\t\tconst restorer = instantiationService.createInstance(TestBackupRestorer);\n\n\t\t// Backup 2 normal files and 2 untitled files\n\t\tawait workingCopyBackupService.backup(toUntypedWorkingCopyId(untitledFile1), bufferToReadable(VSBuffer.fromString('untitled-1')));\n\t\tawait workingCopyBackupService.backup(toUntypedWorkingCopyId(untitledFile2), bufferToReadable(VSBuffer.fromString('untitled-2')));\n\t\tawait workingCopyBackupService.backup(toUntypedWorkingCopyId(fooFile), bufferToReadable(VSBuffer.fromString('fooFile')));\n\t\tawait workingCopyBackupService.backup(toUntypedWorkingCopyId(barFile), bufferToReadable(VSBuffer.fromString('barFile')));\n\n\t\t// Verify backups restored and opened as dirty\n\t\tawait restorer.doRestoreLegacyBackups();\n\t\tassert.strictEqual(editorService.count, 4);\n\t\tassert.ok(editorService.editors.every(editor => editor.isDirty()));\n\n\t\tlet counter = 0;\n\t\tfor (const editor of editorService.editors) {\n\t\t\tconst resource = editor.resource;\n\t\t\tif (isEqual(resource, untitledFile1)) {\n\t\t\t\tconst model = await accessor.textFileService.untitled.resolve({ untitledResource: resource });\n\t\t\t\tif (model.textEditorModel?.getValue() !== 'untitled-1') {\n\t\t\t\t\tconst backupContents = await workingCopyBackupService.getBackupContents(model);\n\t\t\t\t\tassert.fail(`Unable to restore backup for resource ${untitledFile1.toString()}. Backup contents: ${backupContents}`);\n\t\t\t\t}\n\t\t\t\tmodel.dispose();\n\t\t\t\tcounter++;\n\t\t\t} else if (isEqual(resource, untitledFile2)) {\n\t\t\t\tconst model = await accessor.textFileService.untitled.resolve({ untitledResource: resource });\n\t\t\t\tif (model.textEditorModel?.getValue() !== 'untitled-2') {\n\t\t\t\t\tconst backupContents = await workingCopyBackupService.getBackupContents(model);\n\t\t\t\t\tassert.fail(`Unable to restore backup for resource ${untitledFile2.toString()}. Backup contents: ${backupContents}`);\n\t\t\t\t}\n\t\t\t\tmodel.dispose();\n\t\t\t\tcounter++;\n\t\t\t} else if (isEqual(resource, fooFile)) {\n\t\t\t\tconst model = accessor.textFileService.files.get(fooFile);\n\t\t\t\tawait model?.resolve();\n\t\t\t\tif (model?.textEditorModel?.getValue() !== 'fooFile') {\n\t\t\t\t\tconst backupContents = await workingCopyBackupService.getBackupContents(model!);\n\t\t\t\t\tassert.fail(`Unable to restore backup for resource ${fooFile.toString()}. Backup contents: ${backupContents}`);\n\t\t\t\t}\n\t\t\t\tcounter++;\n\t\t\t} else {\n\t\t\t\tconst model = accessor.textFileService.files.get(barFile);\n\t\t\t\tawait model?.resolve();\n\t\t\t\tif (model?.textEditorModel?.getValue() !== 'barFile') {\n\t\t\t\t\tconst backupContents = await workingCopyBackupService.getBackupContents(model!);\n\t\t\t\t\tassert.fail(`Unable to restore backup for resource ${barFile.toString()}. Backup contents: ${backupContents}`);\n\t\t\t\t}\n\t\t\t\tcounter++;\n\t\t\t}\n\t\t}\n\n\t\tassert.strictEqual(counter, 4);\n\t});\n});\n"]}