{"version":3,"file":"experimentService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/experiment/common/experimentService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation'; import * as platform from 'vs/base/common/platform';\nimport type { IKeyValueStorage, IExperimentationTelemetry, IExperimentationFilterProvider, ExperimentationService as TASClient } from 'tas-client-umd';\nimport { MementoObject, Memento } from 'vs/workbench/common/memento';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { ITelemetryData } from 'vs/base/common/actions';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IProductService } from 'vs/platform/product/common/productService';\n\nexport const ITASExperimentService = createDecorator<ITASExperimentService>('TASExperimentService');\n\nexport interface ITASExperimentService {\n\treadonly _serviceBrand: undefined;\n\tgetTreatment<T extends string | number | boolean>(name: string): Promise<T | undefined>;\n\tgetCurrentExperiments(): Promise<string[] | undefined>;\n}\n\nconst storageKey = 'VSCode.ABExp.FeatureData';\nconst refetchInterval = 0; // no polling\n\nclass MementoKeyValueStorage implements IKeyValueStorage {\n\tprivate mementoObj: MementoObject;\n\tconstructor(private memento: Memento) {\n\t\tthis.mementoObj = memento.getMemento(StorageScope.GLOBAL, StorageTarget.MACHINE);\n\t}\n\n\tasync getValue<T>(key: string, defaultValue?: T | undefined): Promise<T | undefined> {\n\t\tconst value = await this.mementoObj[key];\n\t\treturn value || defaultValue;\n\t}\n\n\tsetValue<T>(key: string, value: T): void {\n\t\tthis.mementoObj[key] = value;\n\t\tthis.memento.saveMemento();\n\t}\n}\n\nclass ExperimentServiceTelemetry implements IExperimentationTelemetry {\n\tprivate _lastAssignmentContext: string | undefined;\n\tconstructor(\n\t\tprivate telemetryService: ITelemetryService,\n\t\tprivate productService: IProductService\n\t) { }\n\n\tget assignmentContext(): string[] | undefined {\n\t\treturn this._lastAssignmentContext?.split(';');\n\t}\n\n\t// __GDPR__COMMON__ \"VSCode.ABExp.Features\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\t// __GDPR__COMMON__ \"abexp.assignmentcontext\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\tsetSharedProperty(name: string, value: string): void {\n\t\tif (name === this.productService.tasConfig?.assignmentContextTelemetryPropertyName) {\n\t\t\tthis._lastAssignmentContext = value;\n\t\t}\n\n\t\tthis.telemetryService.setExperimentProperty(name, value);\n\t}\n\n\tpostEvent(eventName: string, props: Map<string, string>): void {\n\t\tconst data: ITelemetryData = {};\n\t\tfor (const [key, value] of props.entries()) {\n\t\t\tdata[key] = value;\n\t\t}\n\n\t\t/* __GDPR__\n\t\t\t\"query-expfeature\" : {\n\t\t\t\t\"ABExp.queriedFeature\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\t\t\t}\n\t\t*/\n\t\tthis.telemetryService.publicLog(eventName, data);\n\t}\n}\n\nclass ExperimentServiceFilterProvider implements IExperimentationFilterProvider {\n\tconstructor(\n\t\tprivate version: string,\n\t\tprivate appName: string,\n\t\tprivate machineId: string,\n\t\tprivate targetPopulation: TargetPopulation\n\t) { }\n\n\tgetFilterValue(filter: string): string | null {\n\t\tswitch (filter) {\n\t\t\tcase Filters.ApplicationVersion:\n\t\t\t\treturn this.version; // productService.version\n\t\t\tcase Filters.Build:\n\t\t\t\treturn this.appName; // productService.nameLong\n\t\t\tcase Filters.ClientId:\n\t\t\t\treturn this.machineId;\n\t\t\tcase Filters.Language:\n\t\t\t\treturn platform.language;\n\t\t\tcase Filters.ExtensionName:\n\t\t\t\treturn 'vscode-core'; // always return vscode-core for exp service\n\t\t\tcase Filters.TargetPopulation:\n\t\t\t\treturn this.targetPopulation;\n\t\t\tdefault:\n\t\t\t\treturn '';\n\t\t}\n\t}\n\n\tgetFilters(): Map<string, any> {\n\t\tlet filters: Map<string, any> = new Map<string, any>();\n\t\tlet filterValues = Object.values(Filters);\n\t\tfor (let value of filterValues) {\n\t\t\tfilters.set(value, this.getFilterValue(value));\n\t\t}\n\n\t\treturn filters;\n\t}\n}\n\n/*\nBased upon the official VSCode currently existing filters in the\nExP backend for the VSCode cluster.\nhttps://experimentation.visualstudio.com/Analysis%20and%20Experimentation/_git/AnE.ExP.TAS.TachyonHost.Configuration?path=%2FConfigurations%2Fvscode%2Fvscode.json&version=GBmaster\n\"X-MSEdge-Market\": \"detection.market\",\n\"X-FD-Corpnet\": \"detection.corpnet\",\n\"X-VSCode–AppVersion\": \"appversion\",\n\"X-VSCode-Build\": \"build\",\n\"X-MSEdge-ClientId\": \"clientid\",\n\"X-VSCode-ExtensionName\": \"extensionname\",\n\"X-VSCode-TargetPopulation\": \"targetpopulation\",\n\"X-VSCode-Language\": \"language\"\n*/\n\nenum Filters {\n\t/**\n\t * The market in which the extension is distributed.\n\t */\n\tMarket = 'X-MSEdge-Market',\n\n\t/**\n\t * The corporation network.\n\t */\n\tCorpNet = 'X-FD-Corpnet',\n\n\t/**\n\t * Version of the application which uses experimentation service.\n\t */\n\tApplicationVersion = 'X-VSCode-AppVersion',\n\n\t/**\n\t * Insiders vs Stable.\n\t */\n\tBuild = 'X-VSCode-Build',\n\n\t/**\n\t * Client Id which is used as primary unit for the experimentation.\n\t */\n\tClientId = 'X-MSEdge-ClientId',\n\n\t/**\n\t * Extension header.\n\t */\n\tExtensionName = 'X-VSCode-ExtensionName',\n\n\t/**\n\t * The language in use by VS Code\n\t */\n\tLanguage = 'X-VSCode-Language',\n\n\t/**\n\t * The target population.\n\t * This is used to separate internal, early preview, GA, etc.\n\t */\n\tTargetPopulation = 'X-VSCode-TargetPopulation',\n}\n\nenum TargetPopulation {\n\tTeam = 'team',\n\tInternal = 'internal',\n\tInsiders = 'insider',\n\tPublic = 'public',\n}\n\nexport class ExperimentService implements ITASExperimentService {\n\t_serviceBrand: undefined;\n\tprivate tasClient: Promise<TASClient> | undefined;\n\tprivate telemetry: ExperimentServiceTelemetry | undefined;\n\tprivate static MEMENTO_ID = 'experiment.service.memento';\n\tprivate networkInitialized = false;\n\n\tprivate overrideInitDelay: Promise<void>;\n\n\tprivate get experimentsEnabled(): boolean {\n\t\treturn this.configurationService.getValue('workbench.enableExperiments') === true;\n\t}\n\n\tconstructor(\n\t\t@ITelemetryService private telemetryService: ITelemetryService,\n\t\t@IStorageService private storageService: IStorageService,\n\t\t@IConfigurationService private configurationService: IConfigurationService,\n\t\t@IProductService private productService: IProductService\n\t) {\n\n\t\tif (productService.tasConfig && this.experimentsEnabled && this.telemetryService.isOptedIn) {\n\t\t\tthis.tasClient = this.setupTASClient();\n\t\t}\n\n\t\t// For development purposes, configure the delay until tas local tas treatment ovverrides are available\n\t\tconst overrideDelay = this.configurationService.getValue<number>('experiments.overrideDelay') ?? 0;\n\t\tthis.overrideInitDelay = new Promise(resolve => setTimeout(resolve, overrideDelay));\n\t}\n\n\tasync getTreatment<T extends string | number | boolean>(name: string): Promise<T | undefined> {\n\t\t// For development purposes, allow overriding tas assignments to test variants locally.\n\t\tawait this.overrideInitDelay;\n\t\tconst override = this.configurationService.getValue<T>('experiments.override.' + name);\n\t\tif (override !== undefined) {\n\t\t\ttype TAASClientOverrideTreatmentData = { treatmentName: string; };\n\t\t\ttype TAASClientOverrideTreatmentClassification = { treatmentName: { classification: 'SystemMetaData', purpose: 'PerformanceAndHealth', }; };\n\t\t\tthis.telemetryService.publicLog2<TAASClientOverrideTreatmentData, TAASClientOverrideTreatmentClassification>('tasClientOverrideTreatment', { treatmentName: name, });\n\t\t\treturn override;\n\t\t}\n\n\t\tconst startSetup = Date.now();\n\n\t\tif (!this.tasClient) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (!this.experimentsEnabled) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tlet result: T | undefined;\n\t\tconst client = await this.tasClient;\n\t\tif (this.networkInitialized) {\n\t\t\tresult = client.getTreatmentVariable<T>('vscode', name);\n\t\t} else {\n\t\t\tresult = await client.getTreatmentVariableAsync<T>('vscode', name, true);\n\t\t}\n\n\t\ttype TAASClientReadTreatmentData = {\n\t\t\ttreatmentName: string;\n\t\t\ttreatmentValue: string;\n\t\t\treadTime: number;\n\t\t};\n\n\t\ttype TAASClientReadTreatmentCalssification = {\n\t\t\ttreatmentValue: { classification: 'SystemMetaData', purpose: 'PerformanceAndHealth', };\n\t\t\ttreatmentName: { classification: 'SystemMetaData', purpose: 'PerformanceAndHealth', };\n\t\t\treadTime: { classification: 'SystemMetaData', purpose: 'PerformanceAndHealth', isMeasurement: true };\n\t\t};\n\t\tthis.telemetryService.publicLog2<TAASClientReadTreatmentData, TAASClientReadTreatmentCalssification>('tasClientReadTreatmentComplete',\n\t\t\t{ readTime: Date.now() - startSetup, treatmentName: name, treatmentValue: JSON.stringify(result) });\n\n\t\treturn result;\n\t}\n\n\tasync getCurrentExperiments(): Promise<string[] | undefined> {\n\t\tif (!this.tasClient) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (!this.experimentsEnabled) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tawait this.tasClient;\n\n\t\treturn this.telemetry?.assignmentContext;\n\t}\n\n\tprivate async setupTASClient(): Promise<TASClient> {\n\t\tconst startSetup = Date.now();\n\t\tconst telemetryInfo = await this.telemetryService.getTelemetryInfo();\n\t\tconst targetPopulation = telemetryInfo.msftInternal ? TargetPopulation.Internal : (this.productService.quality === 'stable' ? TargetPopulation.Public : TargetPopulation.Insiders);\n\t\tconst machineId = telemetryInfo.machineId;\n\t\tconst filterProvider = new ExperimentServiceFilterProvider(\n\t\t\tthis.productService.version,\n\t\t\tthis.productService.nameLong,\n\t\t\tmachineId,\n\t\t\ttargetPopulation\n\t\t);\n\n\t\tconst keyValueStorage = new MementoKeyValueStorage(new Memento(ExperimentService.MEMENTO_ID, this.storageService));\n\n\t\tthis.telemetry = new ExperimentServiceTelemetry(this.telemetryService, this.productService);\n\n\t\tconst tasConfig = this.productService.tasConfig!;\n\t\tconst tasClient = new (await import('tas-client-umd')).ExperimentationService({\n\t\t\tfilterProviders: [filterProvider],\n\t\t\ttelemetry: this.telemetry,\n\t\t\tstorageKey: storageKey,\n\t\t\tkeyValueStorage: keyValueStorage,\n\t\t\tfeaturesTelemetryPropertyName: tasConfig.featuresTelemetryPropertyName,\n\t\t\tassignmentContextTelemetryPropertyName: tasConfig.assignmentContextTelemetryPropertyName,\n\t\t\ttelemetryEventName: tasConfig.telemetryEventName,\n\t\t\tendpoint: tasConfig.endpoint,\n\t\t\trefetchInterval: refetchInterval,\n\t\t});\n\n\t\tawait tasClient.initializePromise;\n\n\t\ttasClient.initialFetch.then(() => this.networkInitialized = true);\n\n\t\ttype TAASClientSetupData = { setupTime: number; };\n\t\ttype TAASClientSetupCalssification = { setupTime: { classification: 'SystemMetaData', purpose: 'PerformanceAndHealth', isMeasurement: true }; };\n\t\tthis.telemetryService.publicLog2<TAASClientSetupData, TAASClientSetupCalssification>('tasClientSetupComplete', { setupTime: Date.now() - startSetup });\n\n\t\treturn tasClient;\n\t}\n}\n\nregisterSingleton(ITASExperimentService, ExperimentService, false);\n"]}