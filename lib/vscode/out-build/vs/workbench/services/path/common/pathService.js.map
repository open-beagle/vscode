{"version":3,"file":"pathService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/path/common/pathService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Schemas } from 'vs/base/common/network';\nimport { IPath, win32, posix } from 'vs/base/common/path';\nimport { OperatingSystem, OS } from 'vs/base/common/platform';\nimport { URI } from 'vs/base/common/uri';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\n\nexport const IPathService = createDecorator<IPathService>('pathService');\n\n/**\n * Provides access to path related properties that will match the\n * environment. If the environment is connected to a remote, the\n * path properties will match that of the remotes operating system.\n */\nexport interface IPathService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * The correct path library to use for the target environment. If\n\t * the environment is connected to a remote, this will be the\n\t * path library of the remote file system. Otherwise it will be\n\t * the local file system's path library depending on the OS.\n\t */\n\treadonly path: Promise<IPath>;\n\n\t/**\n\t * Determines the best default URI scheme for the current workspace.\n\t * It uses information about whether we're running remote, in browser,\n\t * or native combined with information about the current workspace to\n\t * find the best default scheme.\n\t */\n\treadonly defaultUriScheme: string;\n\n\t/**\n\t * Converts the given path to a file URI to use for the target\n\t * environment. If the environment is connected to a remote, it\n\t * will use the path separators according to the remote file\n\t * system. Otherwise it will use the local file system's path\n\t * separators.\n\t */\n\tfileURI(path: string): Promise<URI>;\n\n\t/**\n\t * Resolves the user-home directory for the target environment.\n\t * If the envrionment is connected to a remote, this will be the\n\t * remote's user home directory, otherwise the local one unless\n\t * `preferLocal` is set to `true`.\n\t */\n\tuserHome(options?: { preferLocal: boolean }): Promise<URI>;\n\n\t/**\n\t * @deprecated use `userHome` instead.\n\t */\n\treadonly resolvedUserHome: URI | undefined;\n}\n\nexport abstract class AbstractPathService implements IPathService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate resolveOS: Promise<OperatingSystem>;\n\n\tprivate resolveUserHome: Promise<URI>;\n\tprivate maybeUnresolvedUserHome: URI | undefined;\n\n\tabstract readonly defaultUriScheme: string;\n\n\tconstructor(\n\t\tprivate localUserHome: URI,\n\t\t@IRemoteAgentService private readonly remoteAgentService: IRemoteAgentService\n\t) {\n\n\t\t// OS\n\t\tthis.resolveOS = (async () => {\n\t\t\tconst env = await this.remoteAgentService.getEnvironment();\n\n\t\t\treturn env?.os || OS;\n\t\t})();\n\n\t\t// User Home\n\t\tthis.resolveUserHome = (async () => {\n\t\t\tconst env = await this.remoteAgentService.getEnvironment();\n\t\t\tconst userHome = this.maybeUnresolvedUserHome = env?.userHome || localUserHome;\n\n\n\t\t\treturn userHome;\n\t\t})();\n\t}\n\n\tasync userHome(options?: { preferLocal: boolean }): Promise<URI> {\n\t\treturn options?.preferLocal ? this.localUserHome : this.resolveUserHome;\n\t}\n\n\tget resolvedUserHome(): URI | undefined {\n\t\treturn this.maybeUnresolvedUserHome;\n\t}\n\n\tget path(): Promise<IPath> {\n\t\treturn this.resolveOS.then(os => {\n\t\t\treturn os === OperatingSystem.Windows ?\n\t\t\t\twin32 :\n\t\t\t\tposix;\n\t\t});\n\t}\n\n\tasync fileURI(_path: string): Promise<URI> {\n\t\tlet authority = '';\n\n\t\t// normalize to fwd-slashes on windows,\n\t\t// on other systems bwd-slashes are valid\n\t\t// filename character, eg /f\\oo/ba\\r.txt\n\t\tconst os = await this.resolveOS;\n\t\tif (os === OperatingSystem.Windows) {\n\t\t\t_path = _path.replace(/\\\\/g, '/');\n\t\t}\n\n\t\t// check for authority as used in UNC shares\n\t\t// or use the path as given\n\t\tif (_path[0] === '/' && _path[1] === '/') {\n\t\t\tconst idx = _path.indexOf('/', 2);\n\t\t\tif (idx === -1) {\n\t\t\t\tauthority = _path.substring(2);\n\t\t\t\t_path = '/';\n\t\t\t} else {\n\t\t\t\tauthority = _path.substring(2, idx);\n\t\t\t\t_path = _path.substring(idx) || '/';\n\t\t\t}\n\t\t}\n\n\t\treturn URI.from({\n\t\t\tscheme: Schemas.file,\n\t\t\tauthority,\n\t\t\tpath: _path,\n\t\t\tquery: '',\n\t\t\tfragment: ''\n\t\t});\n\t}\n}\n"]}