{"version":3,"file":"uriIdentityService.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/uriIdentity/test/common/uriIdentityService.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAShG,KAAK,CAAC,cAAc,EAAE;QAErB,MAAM,eAAgB,SAAQ,CAAA,GAAA,4BAAI,CAAA,EAAgB;YAKjD,YAAqB,IAAiD;gBACrE,KAAK,EAAE,CAAC;gBADY,SAAI,GAAJ,IAAI,CAA6C;gBAH7D,8CAAyC,GAAG,aAAK,CAAC,IAAI,CAAC;gBACvD,+CAA0C,GAAG,aAAK,CAAC,IAAI,CAAC;YAIjE,CAAC;YACQ,iBAAiB,CAAC,GAAQ;gBAClC,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YAClC,CAAC;YACQ,aAAa,CAAC,GAAQ,EAAE,IAAoC;;gBACpE,MAAM,IAAI,GAAG,MAAA,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,mCAAI,CAAC,CAAC;gBAC5C,OAAO,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC;YAC7B,CAAC;SACD;QAED,IAAI,QAA4B,CAAC;QAEjC,KAAK,CAAC;YACL,QAAQ,GAAG,IAAI,uCAAkB,CAAC,IAAI,eAAe,CAAC,IAAI,GAAG,CAAC;gBAC7D,CAAC,KAAK,+BAAmD;gBACzD,CAAC,KAAK,EAAE,CAAC,CAAC;aACV,CAAC,CAAC,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;QAEH,SAAS,eAAe,CAAC,KAAU,EAAE,QAAa,EAAE,UAA8B,QAAQ;YACzF,MAAM,MAAM,GAAG,OAAO,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;YAC7C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;YAC3D,MAAM,CAAC,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;QACrD,CAAC;QAED,IAAI,CAAC,kBAAkB,EAAE;YACxB,IAAI,CAAC,GAAG,SAAG,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;YACpC,IAAI,EAAE,GAAG,SAAG,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;YACrC,IAAI,CAAC,GAAG,SAAG,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;YACpC,IAAI,EAAE,GAAG,SAAG,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;YAErC,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;YACzD,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YAEzD,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;YAC1D,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,yBAAyB,EAAE;YAE/B,IAAI,CAAC,GAAG,SAAG,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;YACpC,IAAI,EAAE,GAAG,SAAG,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;YACrC,IAAI,CAAC,GAAG,SAAG,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;YACpC,IAAI,EAAE,GAAG,SAAG,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;YAErC,eAAe,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACtB,eAAe,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;YAEvB,eAAe,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACtB,eAAe,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,iBAAiB;QAC3C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,gCAAgC,EAAE;YACtC,IAAI,CAAC,GAAG,SAAG,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;YACpC,eAAe,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACtB,eAAe,CAAC,SAAG,CAAC,KAAK,CAAC,kBAAkB,CAAC,EAAE,CAAC,CAAC,CAAC;YAClD,eAAe,CAAC,SAAG,CAAC,KAAK,CAAC,kBAAkB,CAAC,EAAE,CAAC,CAAC,CAAC;YAClD,eAAe,CAAC,SAAG,CAAC,KAAK,CAAC,yBAAyB,CAAC,EAAE,CAAC,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,iCAAiC,EAAE;YAEvC,IAAI,CAAC,GAAG,SAAG,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;YAEpC,eAAe,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACtB,eAAe,CAAC,SAAG,CAAC,KAAK,CAAC,uBAAuB,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;YAClF,eAAe,CAAC,SAAG,CAAC,KAAK,CAAC,uBAAuB,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;YAClF,eAAe,CAAC,SAAG,CAAC,KAAK,CAAC,uBAAuB,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;YAClF,eAAe,CAAC,SAAG,CAAC,KAAK,CAAC,8BAA8B,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;YAEzF,IAAI,CAAC,GAAG,SAAG,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC;YACzC,eAAe,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACtB,eAAe,CAAC,SAAG,CAAC,KAAK,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;YACvE,eAAe,CAAC,SAAG,CAAC,KAAK,CAAC,oBAAoB,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,wCAAwC;QACxH,CAAC,CAAC,CAAC;IAEJ,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { UriIdentityService } from 'vs/workbench/services/uriIdentity/common/uriIdentityService';\nimport { mock } from 'vs/workbench/test/common/workbenchTestServices';\nimport { IFileService, FileSystemProviderCapabilities } from 'vs/platform/files/common/files';\nimport { URI } from 'vs/base/common/uri';\nimport { Event } from 'vs/base/common/event';\n\nsuite('URI Identity', function () {\n\n\tclass FakeFileService extends mock<IFileService>() {\n\n\t\toverride onDidChangeFileSystemProviderCapabilities = Event.None;\n\t\toverride onDidChangeFileSystemProviderRegistrations = Event.None;\n\n\t\tconstructor(readonly data: Map<string, FileSystemProviderCapabilities>) {\n\t\t\tsuper();\n\t\t}\n\t\toverride canHandleResource(uri: URI) {\n\t\t\treturn this.data.has(uri.scheme);\n\t\t}\n\t\toverride hasCapability(uri: URI, flag: FileSystemProviderCapabilities): boolean {\n\t\t\tconst mask = this.data.get(uri.scheme) ?? 0;\n\t\t\treturn Boolean(mask & flag);\n\t\t}\n\t}\n\n\tlet _service: UriIdentityService;\n\n\tsetup(function () {\n\t\t_service = new UriIdentityService(new FakeFileService(new Map([\n\t\t\t['bar', FileSystemProviderCapabilities.PathCaseSensitive],\n\t\t\t['foo', 0]\n\t\t])));\n\t});\n\n\tfunction assertCanonical(input: URI, expected: URI, service: UriIdentityService = _service) {\n\t\tconst actual = service.asCanonicalUri(input);\n\t\tassert.strictEqual(actual.toString(), expected.toString());\n\t\tassert.ok(service.extUri.isEqual(actual, expected));\n\t}\n\n\ttest('extUri (isEqual)', function () {\n\t\tlet a = URI.parse('foo://bar/bang');\n\t\tlet a1 = URI.parse('foo://bar/BANG');\n\t\tlet b = URI.parse('bar://bar/bang');\n\t\tlet b1 = URI.parse('bar://bar/BANG');\n\n\t\tassert.strictEqual(_service.extUri.isEqual(a, a1), true);\n\t\tassert.strictEqual(_service.extUri.isEqual(a1, a), true);\n\n\t\tassert.strictEqual(_service.extUri.isEqual(b, b1), false);\n\t\tassert.strictEqual(_service.extUri.isEqual(b1, b), false);\n\t});\n\n\ttest('asCanonicalUri (casing)', function () {\n\n\t\tlet a = URI.parse('foo://bar/bang');\n\t\tlet a1 = URI.parse('foo://bar/BANG');\n\t\tlet b = URI.parse('bar://bar/bang');\n\t\tlet b1 = URI.parse('bar://bar/BANG');\n\n\t\tassertCanonical(a, a);\n\t\tassertCanonical(a1, a);\n\n\t\tassertCanonical(b, b);\n\t\tassertCanonical(b1, b1); // case sensitive\n\t});\n\n\ttest('asCanonicalUri (normalization)', function () {\n\t\tlet a = URI.parse('foo://bar/bang');\n\t\tassertCanonical(a, a);\n\t\tassertCanonical(URI.parse('foo://bar/./bang'), a);\n\t\tassertCanonical(URI.parse('foo://bar/./bang'), a);\n\t\tassertCanonical(URI.parse('foo://bar/./foo/../bang'), a);\n\t});\n\n\ttest('asCanonicalUri (keep fragement)', function () {\n\n\t\tlet a = URI.parse('foo://bar/bang');\n\n\t\tassertCanonical(a, a);\n\t\tassertCanonical(URI.parse('foo://bar/./bang#frag'), a.with({ fragment: 'frag' }));\n\t\tassertCanonical(URI.parse('foo://bar/./bang#frag'), a.with({ fragment: 'frag' }));\n\t\tassertCanonical(URI.parse('foo://bar/./bang#frag'), a.with({ fragment: 'frag' }));\n\t\tassertCanonical(URI.parse('foo://bar/./foo/../bang#frag'), a.with({ fragment: 'frag' }));\n\n\t\tlet b = URI.parse('foo://bar/bazz#frag');\n\t\tassertCanonical(b, b);\n\t\tassertCanonical(URI.parse('foo://bar/bazz'), b.with({ fragment: '' }));\n\t\tassertCanonical(URI.parse('foo://bar/BAZZ#DDD'), b.with({ fragment: 'DDD' })); // lower-case path, but fragment is kept\n\t});\n\n});\n"]}