{"version":3,"file":"clipboardService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/clipboard/electron-sandbox/clipboardService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAShG,IAAa,sBAAsB,GAAnC,MAAa,sBAAsB;QAMlC,YACsC,iBAAqC;YAArC,sBAAiB,GAAjB,iBAAiB,CAAoB;QACvE,CAAC;QAEL,KAAK,CAAC,SAAS,CAAC,IAAY,EAAE,IAAgC;YAC7D,OAAO,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAC9D,CAAC;QAED,KAAK,CAAC,QAAQ,CAAC,IAAgC;YAC9C,OAAO,IAAI,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;QACvD,CAAC;QAED,KAAK,CAAC,YAAY;YACjB,IAAI,sBAAW,EAAE;gBAChB,OAAO,IAAI,CAAC,iBAAiB,CAAC,qBAAqB,EAAE,CAAC;aACtD;YAED,OAAO,EAAE,CAAC;QACX,CAAC;QAED,KAAK,CAAC,aAAa,CAAC,IAAY;YAC/B,IAAI,sBAAW,EAAE;gBAChB,OAAO,IAAI,CAAC,iBAAiB,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;aAC3D;QACF,CAAC;QAED,KAAK,CAAC,cAAc,CAAC,SAAgB;YACpC,IAAI,SAAS,CAAC,MAAM,EAAE;gBACrB,OAAO,IAAI,CAAC,iBAAiB,CAAC,oBAAoB,CAAC,sBAAsB,CAAC,WAAW,EAAE,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC,CAAC;aAC1H;QACF,CAAC;QAED,KAAK,CAAC,aAAa;YAClB,OAAO,IAAI,CAAC,iBAAiB,CAAC,MAAM,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,sBAAsB,CAAC,WAAW,CAAC,CAAC,CAAC;QACrH,CAAC;QAED,KAAK,CAAC,YAAY;YACjB,OAAO,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,sBAAsB,CAAC,WAAW,CAAC,CAAC;QAChF,CAAC;QAEO,iBAAiB,CAAC,SAAgB;YACzC,OAAO,iBAAQ,CAAC,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC;QAChF,CAAC;QAEO,iBAAiB,CAAC,MAAkB;YAC3C,IAAI,CAAC,MAAM,EAAE;gBACZ,OAAO,EAAE,CAAC;aACV;YAED,MAAM,WAAW,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;YACtC,IAAI,CAAC,WAAW,EAAE;gBACjB,OAAO,EAAE,CAAC;aACV;YAED,IAAI;gBACH,OAAO,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,SAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;aACtD;YAAC,OAAO,KAAK,EAAE;gBACf,OAAO,EAAE,CAAC,CAAC,8BAA8B;aACzC;QACF,CAAC;KACD,CAAA;IAhEwB,kCAAW,GAAG,gBAAgB,CAAC,CAAC,6BAA6B;IAFzE,sBAAsB;QAOhC,WAAA,2BAAkB,CAAA;OAPR,sBAAsB,CAkElC;IAlEY,wDAAsB;IAoEnC,CAAA,GAAA,8BAAiB,CAAA,CAAC,oCAAiB,EAAE,sBAAsB,EAAE,IAAI,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';\nimport { URI } from 'vs/base/common/uri';\nimport { isMacintosh } from 'vs/base/common/platform';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { INativeHostService } from 'vs/platform/native/electron-sandbox/native';\nimport { VSBuffer } from 'vs/base/common/buffer';\n\nexport class NativeClipboardService implements IClipboardService {\n\n\tprivate static readonly FILE_FORMAT = 'code/file-list'; // Clipboard format for files\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@INativeHostService private readonly nativeHostService: INativeHostService\n\t) { }\n\n\tasync writeText(text: string, type?: 'selection' | 'clipboard'): Promise<void> {\n\t\treturn this.nativeHostService.writeClipboardText(text, type);\n\t}\n\n\tasync readText(type?: 'selection' | 'clipboard'): Promise<string> {\n\t\treturn this.nativeHostService.readClipboardText(type);\n\t}\n\n\tasync readFindText(): Promise<string> {\n\t\tif (isMacintosh) {\n\t\t\treturn this.nativeHostService.readClipboardFindText();\n\t\t}\n\n\t\treturn '';\n\t}\n\n\tasync writeFindText(text: string): Promise<void> {\n\t\tif (isMacintosh) {\n\t\t\treturn this.nativeHostService.writeClipboardFindText(text);\n\t\t}\n\t}\n\n\tasync writeResources(resources: URI[]): Promise<void> {\n\t\tif (resources.length) {\n\t\t\treturn this.nativeHostService.writeClipboardBuffer(NativeClipboardService.FILE_FORMAT, this.resourcesToBuffer(resources));\n\t\t}\n\t}\n\n\tasync readResources(): Promise<URI[]> {\n\t\treturn this.bufferToResources(await this.nativeHostService.readClipboardBuffer(NativeClipboardService.FILE_FORMAT));\n\t}\n\n\tasync hasResources(): Promise<boolean> {\n\t\treturn this.nativeHostService.hasClipboard(NativeClipboardService.FILE_FORMAT);\n\t}\n\n\tprivate resourcesToBuffer(resources: URI[]): Uint8Array {\n\t\treturn VSBuffer.fromString(resources.map(r => r.toString()).join('\\n')).buffer;\n\t}\n\n\tprivate bufferToResources(buffer: Uint8Array): URI[] {\n\t\tif (!buffer) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst bufferValue = buffer.toString();\n\t\tif (!bufferValue) {\n\t\t\treturn [];\n\t\t}\n\n\t\ttry {\n\t\t\treturn bufferValue.split('\\n').map(f => URI.parse(f));\n\t\t} catch (error) {\n\t\t\treturn []; // do not trust clipboard data\n\t\t}\n\t}\n}\n\nregisterSingleton(IClipboardService, NativeClipboardService, true);\n"]}