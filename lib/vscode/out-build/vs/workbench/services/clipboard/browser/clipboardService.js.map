{"version":3,"sources":["vs/workbench/services/clipboard/browser/clipboardService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAYhG,IAAa,uBAAuB,GAApC,MAAa,uBAAwB,SAAQ,0CAA2B;QAEvE,YACwC,mBAAyC,EAC/C,aAA6B,EACf,kBAAgD;YAE/F,KAAK,EAAE,CAAC;YAJ+B,wBAAmB,GAAnB,mBAAmB,CAAsB;YAC/C,kBAAa,GAAb,aAAa,CAAgB;YACf,uBAAkB,GAAlB,kBAAkB,CAA8B;QAGhG,CAAC;QAEQ,KAAK,CAAC,QAAQ,CAAC,IAAa;YACpC,IAAI,IAAI,EAAE;gBACT,OAAO,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;aAC5B;YAED,IAAI;gBACH,OAAO,MAAM,SAAS,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;aAC5C;YAAC,OAAO,KAAK,EAAE;gBACf,IAAI,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,yBAAyB,EAAE;oBACxD,OAAO,EAAE,CAAC,CAAC,oFAAoF;iBAC/F;gBAED,OAAO,IAAI,OAAO,CAAS,OAAO,CAAC,EAAE;oBAEpC,4FAA4F;oBAC5F,MAAM,QAAQ,GAAG,IAAI,2BAAe,EAAE,CAAC;oBACvC,MAAM,MAAM,GAAG,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAC7C,uBAAQ,CAAC,KAAK,EACd,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAgB,EAAE,IAAoI,CAAC,EAChK,CAAC;4BACA,KAAK,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAO,EAAE,IAAO,CAAC;4BACjC,GAAG,EAAE,KAAK,IAAI,EAAE;gCACf,QAAQ,CAAC,OAAO,EAAE,CAAC;gCACnB,OAAO,CAAC,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;4BACpC,CAAC;yBACD,EAAE;4BACF,KAAK,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAW,EAAE,IAAY,CAAC;4BAC1C,GAAG,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,iDAAiD,CAAC;yBACrF,CAAC,EACF;wBACC,MAAM,EAAE,IAAI;qBACZ,CACD,CAAC;oBAEF,0DAA0D;oBAC1D,QAAQ,CAAC,GAAG,CAAC,CAAA,GAAA,iBAAI,CAAA,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBAC1D,CAAC,CAAC,CAAC;aACH;QACF,CAAC;KACD,CAAA;IAjDY,uBAAuB;QAGjC,WAAA,mCAAoB,CAAA;QACpB,WAAA,uBAAc,CAAA;QACd,WAAA,iDAA4B,CAAA;OALlB,uBAAuB,CAiDnC;IAjDY,0DAAuB;IAmDpC,CAAA,GAAA,8BAAiB,CAAA,CAAC,oCAAiB,EAAE,uBAAuB,EAAE,IAAI,CAAC,CAAC","file":"clipboardService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';\nimport { BrowserClipboardService as BaseBrowserClipboardService } from 'vs/platform/clipboard/browser/clipboardService';\nimport { INotificationService, Severity } from 'vs/platform/notification/common/notification';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { once } from 'vs/base/common/functional';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\n\nexport class BrowserClipboardService extends BaseBrowserClipboardService {\n\n\tconstructor(\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IOpenerService private readonly openerService: IOpenerService,\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService\n\t) {\n\t\tsuper();\n\t}\n\n\toverride async readText(type?: string): Promise<string> {\n\t\tif (type) {\n\t\t\treturn super.readText(type);\n\t\t}\n\n\t\ttry {\n\t\t\treturn await navigator.clipboard.readText();\n\t\t} catch (error) {\n\t\t\tif (!!this.environmentService.extensionTestsLocationURI) {\n\t\t\t\treturn ''; // do not ask for input in tests (https://github.com/microsoft/vscode/issues/112264)\n\t\t\t}\n\n\t\t\treturn new Promise<string>(resolve => {\n\n\t\t\t\t// Inform user about permissions problem (https://github.com/microsoft/vscode/issues/112089)\n\t\t\t\tconst listener = new DisposableStore();\n\t\t\t\tconst handle = this.notificationService.prompt(\n\t\t\t\t\tSeverity.Error,\n\t\t\t\t\tlocalize('clipboardError', \"Unable to read from the browser's clipboard. Please make sure you have granted access for this website to read from the clipboard.\"),\n\t\t\t\t\t[{\n\t\t\t\t\t\tlabel: localize('retry', \"Retry\"),\n\t\t\t\t\t\trun: async () => {\n\t\t\t\t\t\t\tlistener.dispose();\n\t\t\t\t\t\t\tresolve(await this.readText(type));\n\t\t\t\t\t\t}\n\t\t\t\t\t}, {\n\t\t\t\t\t\tlabel: localize('learnMore', \"Learn More\"),\n\t\t\t\t\t\trun: () => this.openerService.open('https://go.microsoft.com/fwlink/?linkid=2151362')\n\t\t\t\t\t}],\n\t\t\t\t\t{\n\t\t\t\t\t\tsticky: true\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\t// Always resolve the promise once the notification closes\n\t\t\t\tlistener.add(once(handle.onDidClose)(() => resolve('')));\n\t\t\t});\n\t\t}\n\t}\n}\n\nregisterSingleton(IClipboardService, BrowserClipboardService, true);\n"]}