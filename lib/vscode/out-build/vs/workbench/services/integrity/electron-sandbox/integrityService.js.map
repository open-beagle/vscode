{"version":3,"sources":["vs/workbench/services/integrity/electron-sandbox/integrityService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAoBhG,MAAM,gBAAgB;QAMrB,YAAY,cAA+B;YAC1C,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;YACrC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;QAC3B,CAAC;QAEO,KAAK;YACZ,IAAI,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,gBAAgB,CAAC,GAAG,iBAAsB,CAAC;YACnF,IAAI,CAAC,SAAS,EAAE;gBACf,OAAO,IAAI,CAAC;aACZ;YACD,IAAI;gBACH,OAAO,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;aAC7B;YAAC,OAAO,GAAG,EAAE;gBACb,OAAO,IAAI,CAAC;aACZ;QACF,CAAC;QAED,GAAG;YACF,OAAO,IAAI,CAAC,KAAK,CAAC;QACnB,CAAC;QAED,GAAG,CAAC,IAAyB;YAC5B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;YAClB,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,gBAAgB,CAAC,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,kCAA6C,CAAC;QACzH,CAAC;;IA7BuB,oBAAG,GAAG,kBAAkB,CAAC;IAgClD,IAAa,oBAAoB,GAAjC,MAAa,oBAAoB;QAOhC,YACwC,mBAAyC,EAC/D,cAA+B,EACZ,gBAAmC,EACtC,aAA6B,EAC5B,cAA+B,EAC9B,eAAiC;YAL7B,wBAAmB,GAAnB,mBAAmB,CAAsB;YAE5C,qBAAgB,GAAhB,gBAAgB,CAAmB;YACtC,kBAAa,GAAb,aAAa,CAAgB;YAC5B,mBAAc,GAAd,cAAc,CAAiB;YAC9B,oBAAe,GAAf,eAAe,CAAkB;YAEpE,IAAI,CAAC,QAAQ,GAAG,IAAI,gBAAgB,CAAC,cAAc,CAAC,CAAC;YAErD,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;YAErC,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;gBACtB,IAAI,CAAC,CAAC,MAAM,EAAE;oBACb,OAAO,CAAC,cAAc;iBACtB;gBAED,IAAI,CAAC,OAAO,EAAE,CAAC;YAChB,CAAC,CAAC,CAAC;QACJ,CAAC;QAEO,OAAO;YACd,MAAM,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;YACvC,IAAI,CAAA,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,cAAc,KAAI,UAAU,CAAC,MAAM,KAAK,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE;gBACnF,OAAO,CAAC,gBAAgB;aACxB;YAED,MAAM,uBAAuB,GAAG,IAAI,CAAC,cAAc,CAAC,uBAAuB,CAAC;YAC5E,MAAM,OAAO,GAAG,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAkB,EAAE,IAAgE,EAAE,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;YAC9I,IAAI,uBAAuB,EAAE;gBAC5B,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAC9B,kBAAQ,CAAC,OAAO,EAChB,OAAO,EACP;oBACC;wBACC,KAAK,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAA2B,EAAE,IAAkB,CAAC;wBAChE,GAAG,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,SAAG,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAC;qBACtE;oBACD;wBACC,KAAK,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAyB,EAAE,IAAkB,CAAC;wBAC9D,WAAW,EAAE,IAAI;wBACjB,GAAG,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,cAAc,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC;qBAC1F;iBACD,EACD,EAAE,MAAM,EAAE,IAAI,EAAE,CAChB,CAAC;aACF;iBAAM;gBACN,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC;oBAC/B,QAAQ,EAAE,kBAAQ,CAAC,OAAO;oBAC1B,OAAO;oBACP,MAAM,EAAE,IAAI;iBACZ,CAAC,CAAC;aACH;QACF,CAAC;QAED,MAAM;YACL,OAAO,IAAI,CAAC,cAAc,CAAC;QAC5B,CAAC;QAEO,KAAK,CAAC,OAAO;YACpB,MAAM,iBAAiB,GAAG,IAAI,CAAC,cAAc,CAAC,SAAS,IAAI,EAAE,CAAC;YAE9D,MAAM,IAAI,CAAC,gBAAgB,CAAC,IAAI,oBAA2B,CAAC;YAE5D,MAAM,UAAU,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,iBAAiB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YAE3I,IAAI,MAAM,GAAG,IAAI,CAAC;YAClB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;gBACtD,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE;oBAC1B,MAAM,GAAG,KAAK,CAAC;oBACf,MAAM;iBACN;aACD;YAED,OAAO;gBACN,MAAM,EAAE,MAAM;gBACd,KAAK,EAAE,UAAU;aACjB,CAAC;QACH,CAAC;QAEO,KAAK,CAAC,QAAQ,CAAC,QAAgB,EAAE,QAAgB;YACxD,MAAM,OAAO,GAAG,oBAAU,CAAC,SAAS,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;YAExD,IAAI;gBACH,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;gBAE9D,OAAO,oBAAoB,CAAC,mBAAmB,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;aAC7E;YAAC,OAAO,KAAK,EAAE;gBACf,OAAO,oBAAoB,CAAC,mBAAmB,CAAC,OAAO,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAC;aACvE;QACF,CAAC;QAEO,MAAM,CAAC,mBAAmB,CAAC,GAAQ,EAAE,MAAc,EAAE,QAAgB;YAC5E,OAAO;gBACN,GAAG,EAAE,GAAG;gBACR,MAAM,EAAE,MAAM;gBACd,QAAQ,EAAE,QAAQ;gBAClB,MAAM,EAAE,CAAC,MAAM,KAAK,QAAQ,CAAC;aAC7B,CAAC;QACH,CAAC;KACD,CAAA;IA3GY,oBAAoB;QAQ9B,WAAA,mCAAoB,CAAA;QACpB,WAAA,yBAAe,CAAA;QACf,WAAA,6BAAiB,CAAA;QACjB,WAAA,uBAAc,CAAA;QACd,WAAA,gCAAe,CAAA;QACf,WAAA,kCAAgB,CAAA;OAbN,oBAAoB,CA2GhC;IA3GY,oDAAoB;IA6GjC,CAAA,GAAA,8BAAiB,CAAA,CAAC,6BAAiB,EAAE,oBAAoB,EAAE,IAAI,CAAC,CAAC","file":"integrityService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport Severity from 'vs/base/common/severity';\nimport { URI } from 'vs/base/common/uri';\nimport { ChecksumPair, IIntegrityService, IntegrityTestResult } from 'vs/workbench/services/integrity/common/integrity';\nimport { ILifecycleService, LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { FileAccess } from 'vs/base/common/network';\nimport { IChecksumService } from 'vs/platform/checksum/common/checksumService';\n\ninterface IStorageData {\n\tdontShowPrompt: boolean;\n\tcommit: string | undefined;\n}\n\nclass IntegrityStorage {\n\tprivate static readonly KEY = 'integrityService';\n\n\tprivate storageService: IStorageService;\n\tprivate value: IStorageData | null;\n\n\tconstructor(storageService: IStorageService) {\n\t\tthis.storageService = storageService;\n\t\tthis.value = this._read();\n\t}\n\n\tprivate _read(): IStorageData | null {\n\t\tlet jsonValue = this.storageService.get(IntegrityStorage.KEY, StorageScope.GLOBAL);\n\t\tif (!jsonValue) {\n\t\t\treturn null;\n\t\t}\n\t\ttry {\n\t\t\treturn JSON.parse(jsonValue);\n\t\t} catch (err) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tget(): IStorageData | null {\n\t\treturn this.value;\n\t}\n\n\tset(data: IStorageData | null): void {\n\t\tthis.value = data;\n\t\tthis.storageService.store(IntegrityStorage.KEY, JSON.stringify(this.value), StorageScope.GLOBAL, StorageTarget.MACHINE);\n\t}\n}\n\nexport class IntegrityServiceImpl implements IIntegrityService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate _storage: IntegrityStorage;\n\tprivate _isPurePromise: Promise<IntegrityTestResult>;\n\n\tconstructor(\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@ILifecycleService private readonly lifecycleService: ILifecycleService,\n\t\t@IOpenerService private readonly openerService: IOpenerService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IChecksumService private readonly checksumService: IChecksumService\n\t) {\n\t\tthis._storage = new IntegrityStorage(storageService);\n\n\t\tthis._isPurePromise = this._isPure();\n\n\t\tthis.isPure().then(r => {\n\t\t\tif (r.isPure) {\n\t\t\t\treturn; // all is good\n\t\t\t}\n\n\t\t\tthis._prompt();\n\t\t});\n\t}\n\n\tprivate _prompt(): void {\n\t\tconst storedData = this._storage.get();\n\t\tif (storedData?.dontShowPrompt && storedData.commit === this.productService.commit) {\n\t\t\treturn; // Do not prompt\n\t\t}\n\n\t\tconst checksumFailMoreInfoUrl = this.productService.checksumFailMoreInfoUrl;\n\t\tconst message = localize('integrity.prompt', \"Your {0} installation appears to be corrupt. Please reinstall.\", this.productService.nameShort);\n\t\tif (checksumFailMoreInfoUrl) {\n\t\t\tthis.notificationService.prompt(\n\t\t\t\tSeverity.Warning,\n\t\t\t\tmessage,\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: localize('integrity.moreInformation', \"More Information\"),\n\t\t\t\t\t\trun: () => this.openerService.open(URI.parse(checksumFailMoreInfoUrl))\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: localize('integrity.dontShowAgain', \"Don't Show Again\"),\n\t\t\t\t\t\tisSecondary: true,\n\t\t\t\t\t\trun: () => this._storage.set({ dontShowPrompt: true, commit: this.productService.commit })\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t{ sticky: true }\n\t\t\t);\n\t\t} else {\n\t\t\tthis.notificationService.notify({\n\t\t\t\tseverity: Severity.Warning,\n\t\t\t\tmessage,\n\t\t\t\tsticky: true\n\t\t\t});\n\t\t}\n\t}\n\n\tisPure(): Promise<IntegrityTestResult> {\n\t\treturn this._isPurePromise;\n\t}\n\n\tprivate async _isPure(): Promise<IntegrityTestResult> {\n\t\tconst expectedChecksums = this.productService.checksums || {};\n\n\t\tawait this.lifecycleService.when(LifecyclePhase.Eventually);\n\n\t\tconst allResults = await Promise.all(Object.keys(expectedChecksums).map(filename => this._resolve(filename, expectedChecksums[filename])));\n\n\t\tlet isPure = true;\n\t\tfor (let i = 0, len = allResults.length; i < len; i++) {\n\t\t\tif (!allResults[i].isPure) {\n\t\t\t\tisPure = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tisPure: isPure,\n\t\t\tproof: allResults\n\t\t};\n\t}\n\n\tprivate async _resolve(filename: string, expected: string): Promise<ChecksumPair> {\n\t\tconst fileUri = FileAccess.asFileUri(filename, require);\n\n\t\ttry {\n\t\t\tconst checksum = await this.checksumService.checksum(fileUri);\n\n\t\t\treturn IntegrityServiceImpl._createChecksumPair(fileUri, checksum, expected);\n\t\t} catch (error) {\n\t\t\treturn IntegrityServiceImpl._createChecksumPair(fileUri, '', expected);\n\t\t}\n\t}\n\n\tprivate static _createChecksumPair(uri: URI, actual: string, expected: string): ChecksumPair {\n\t\treturn {\n\t\t\turi: uri,\n\t\t\tactual: actual,\n\t\t\texpected: expected,\n\t\t\tisPure: (actual === expected)\n\t\t};\n\t}\n}\n\nregisterSingleton(IIntegrityService, IntegrityServiceImpl, true);\n"]}