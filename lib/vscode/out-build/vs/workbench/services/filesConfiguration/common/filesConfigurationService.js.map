{"version":3,"file":"filesConfigurationService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/filesConfiguration/common/filesConfigurationService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { RawContextKey, IContextKey, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IFilesConfiguration, AutoSaveConfiguration, HotExitConfiguration } from 'vs/platform/files/common/files';\nimport { equals } from 'vs/base/common/objects';\nimport { URI } from 'vs/base/common/uri';\nimport { isWeb } from 'vs/base/common/platform';\n\nexport const AutoSaveAfterShortDelayContext = new RawContextKey<boolean>('autoSaveAfterShortDelayContext', false, true);\n\nexport interface IAutoSaveConfiguration {\n\tautoSaveDelay?: number;\n\tautoSaveFocusChange: boolean;\n\tautoSaveApplicationChange: boolean;\n}\n\nexport const enum AutoSaveMode {\n\tOFF,\n\tAFTER_SHORT_DELAY,\n\tAFTER_LONG_DELAY,\n\tON_FOCUS_CHANGE,\n\tON_WINDOW_CHANGE\n}\n\nexport const IFilesConfigurationService = createDecorator<IFilesConfigurationService>('filesConfigurationService');\n\nexport interface IFilesConfigurationService {\n\n\treadonly _serviceBrand: undefined;\n\n\t//#region Auto Save\n\n\treadonly onAutoSaveConfigurationChange: Event<IAutoSaveConfiguration>;\n\n\tgetAutoSaveConfiguration(): IAutoSaveConfiguration;\n\n\tgetAutoSaveMode(): AutoSaveMode;\n\n\ttoggleAutoSave(): Promise<void>;\n\n\t//#endregion\n\n\treadonly onFilesAssociationChange: Event<void>;\n\n\treadonly isHotExitEnabled: boolean;\n\n\treadonly hotExitConfiguration: string | undefined;\n\n\tpreventSaveConflicts(resource: URI, language?: string): boolean;\n}\n\nexport class FilesConfigurationService extends Disposable implements IFilesConfigurationService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate static DEFAULT_AUTO_SAVE_MODE = isWeb ? AutoSaveConfiguration.AFTER_DELAY : AutoSaveConfiguration.OFF;\n\n\tprivate readonly _onAutoSaveConfigurationChange = this._register(new Emitter<IAutoSaveConfiguration>());\n\treadonly onAutoSaveConfigurationChange = this._onAutoSaveConfigurationChange.event;\n\n\tprivate readonly _onFilesAssociationChange = this._register(new Emitter<void>());\n\treadonly onFilesAssociationChange = this._onFilesAssociationChange.event;\n\n\tprivate configuredAutoSaveDelay?: number;\n\tprivate configuredAutoSaveOnFocusChange: boolean | undefined;\n\tprivate configuredAutoSaveOnWindowChange: boolean | undefined;\n\n\tprivate autoSaveAfterShortDelayContext: IContextKey<boolean>;\n\n\tprivate currentFilesAssociationConfig: { [key: string]: string; };\n\n\tprivate currentHotExitConfig: string;\n\n\tconstructor(\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) {\n\t\tsuper();\n\n\t\tthis.autoSaveAfterShortDelayContext = AutoSaveAfterShortDelayContext.bindTo(contextKeyService);\n\n\t\tconst configuration = configurationService.getValue<IFilesConfiguration>();\n\n\t\tthis.currentFilesAssociationConfig = configuration?.files?.associations;\n\t\tthis.currentHotExitConfig = configuration?.files?.hotExit || HotExitConfiguration.ON_EXIT;\n\n\t\tthis.onFilesConfigurationChange(configuration);\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Files configuration changes\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration('files')) {\n\t\t\t\tthis.onFilesConfigurationChange(this.configurationService.getValue<IFilesConfiguration>());\n\t\t\t}\n\t\t}));\n\t}\n\n\tprotected onFilesConfigurationChange(configuration: IFilesConfiguration): void {\n\n\t\t// Auto Save\n\t\tconst autoSaveMode = configuration?.files?.autoSave || FilesConfigurationService.DEFAULT_AUTO_SAVE_MODE;\n\t\tswitch (autoSaveMode) {\n\t\t\tcase AutoSaveConfiguration.AFTER_DELAY:\n\t\t\t\tthis.configuredAutoSaveDelay = configuration?.files?.autoSaveDelay;\n\t\t\t\tthis.configuredAutoSaveOnFocusChange = false;\n\t\t\t\tthis.configuredAutoSaveOnWindowChange = false;\n\t\t\t\tbreak;\n\n\t\t\tcase AutoSaveConfiguration.ON_FOCUS_CHANGE:\n\t\t\t\tthis.configuredAutoSaveDelay = undefined;\n\t\t\t\tthis.configuredAutoSaveOnFocusChange = true;\n\t\t\t\tthis.configuredAutoSaveOnWindowChange = false;\n\t\t\t\tbreak;\n\n\t\t\tcase AutoSaveConfiguration.ON_WINDOW_CHANGE:\n\t\t\t\tthis.configuredAutoSaveDelay = undefined;\n\t\t\t\tthis.configuredAutoSaveOnFocusChange = false;\n\t\t\t\tthis.configuredAutoSaveOnWindowChange = true;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthis.configuredAutoSaveDelay = undefined;\n\t\t\t\tthis.configuredAutoSaveOnFocusChange = false;\n\t\t\t\tthis.configuredAutoSaveOnWindowChange = false;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tthis.autoSaveAfterShortDelayContext.set(this.getAutoSaveMode() === AutoSaveMode.AFTER_SHORT_DELAY);\n\n\t\t// Emit as event\n\t\tthis._onAutoSaveConfigurationChange.fire(this.getAutoSaveConfiguration());\n\n\t\t// Check for change in files associations\n\t\tconst filesAssociation = configuration?.files?.associations;\n\t\tif (!equals(this.currentFilesAssociationConfig, filesAssociation)) {\n\t\t\tthis.currentFilesAssociationConfig = filesAssociation;\n\t\t\tthis._onFilesAssociationChange.fire();\n\t\t}\n\n\t\t// Hot exit\n\t\tconst hotExitMode = configuration?.files?.hotExit;\n\t\tif (hotExitMode === HotExitConfiguration.OFF || hotExitMode === HotExitConfiguration.ON_EXIT_AND_WINDOW_CLOSE) {\n\t\t\tthis.currentHotExitConfig = hotExitMode;\n\t\t} else {\n\t\t\tthis.currentHotExitConfig = HotExitConfiguration.ON_EXIT;\n\t\t}\n\t}\n\n\tgetAutoSaveMode(): AutoSaveMode {\n\t\tif (this.configuredAutoSaveOnFocusChange) {\n\t\t\treturn AutoSaveMode.ON_FOCUS_CHANGE;\n\t\t}\n\n\t\tif (this.configuredAutoSaveOnWindowChange) {\n\t\t\treturn AutoSaveMode.ON_WINDOW_CHANGE;\n\t\t}\n\n\t\tif (this.configuredAutoSaveDelay && this.configuredAutoSaveDelay > 0) {\n\t\t\treturn this.configuredAutoSaveDelay <= 1000 ? AutoSaveMode.AFTER_SHORT_DELAY : AutoSaveMode.AFTER_LONG_DELAY;\n\t\t}\n\n\t\treturn AutoSaveMode.OFF;\n\t}\n\n\tgetAutoSaveConfiguration(): IAutoSaveConfiguration {\n\t\treturn {\n\t\t\tautoSaveDelay: this.configuredAutoSaveDelay && this.configuredAutoSaveDelay > 0 ? this.configuredAutoSaveDelay : undefined,\n\t\t\tautoSaveFocusChange: !!this.configuredAutoSaveOnFocusChange,\n\t\t\tautoSaveApplicationChange: !!this.configuredAutoSaveOnWindowChange\n\t\t};\n\t}\n\n\tasync toggleAutoSave(): Promise<void> {\n\t\tconst currentSetting = this.configurationService.getValue('files.autoSave');\n\n\t\tlet newAutoSaveValue: string;\n\t\tif ([AutoSaveConfiguration.AFTER_DELAY, AutoSaveConfiguration.ON_FOCUS_CHANGE, AutoSaveConfiguration.ON_WINDOW_CHANGE].some(setting => setting === currentSetting)) {\n\t\t\tnewAutoSaveValue = AutoSaveConfiguration.OFF;\n\t\t} else {\n\t\t\tnewAutoSaveValue = AutoSaveConfiguration.AFTER_DELAY;\n\t\t}\n\n\t\treturn this.configurationService.updateValue('files.autoSave', newAutoSaveValue);\n\t}\n\n\tget isHotExitEnabled(): boolean {\n\t\treturn this.currentHotExitConfig !== HotExitConfiguration.OFF;\n\t}\n\n\tget hotExitConfiguration(): string {\n\t\treturn this.currentHotExitConfig;\n\t}\n\n\tpreventSaveConflicts(resource: URI, language?: string): boolean {\n\t\treturn this.configurationService.getValue('files.saveConflictResolution', { resource, overrideIdentifier: language }) !== 'overwriteFileOnDisk';\n\t}\n}\n\nregisterSingleton(IFilesConfigurationService, FilesConfigurationService);\n"]}