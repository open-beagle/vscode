{"version":3,"file":"textModelResolverService.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/textmodelResolver/test/browser/textModelResolverService.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { URI } from 'vs/base/common/uri';\nimport { ResourceEditorInput } from 'vs/workbench/common/editor/resourceEditorInput';\nimport { ResourceEditorModel } from 'vs/workbench/common/editor/resourceEditorModel';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { workbenchInstantiationService, TestServiceAccessor, TestTextFileEditorModelManager } from 'vs/workbench/test/browser/workbenchTestServices';\nimport { toResource } from 'vs/base/test/common/utils';\nimport { TextFileEditorModel } from 'vs/workbench/services/textfile/common/textFileEditorModel';\nimport { snapshotToString } from 'vs/workbench/services/textfile/common/textfiles';\nimport { TextFileEditorModelManager } from 'vs/workbench/services/textfile/common/textFileEditorModelManager';\nimport { Event } from 'vs/base/common/event';\nimport { timeout } from 'vs/base/common/async';\nimport { UntitledTextEditorInput } from 'vs/workbench/services/untitled/common/untitledTextEditorInput';\nimport { createTextBufferFactory } from 'vs/editor/common/model/textModel';\n\nsuite('Workbench - TextModelResolverService', () => {\n\n\tlet instantiationService: IInstantiationService;\n\tlet accessor: TestServiceAccessor;\n\tlet model: TextFileEditorModel;\n\n\tsetup(() => {\n\t\tinstantiationService = workbenchInstantiationService();\n\t\taccessor = instantiationService.createInstance(TestServiceAccessor);\n\t});\n\n\tteardown(() => {\n\t\tmodel?.dispose();\n\t\t(<TextFileEditorModelManager>accessor.textFileService.files).dispose();\n\t});\n\n\ttest('resolve resource', async () => {\n\t\tconst disposable = accessor.textModelResolverService.registerTextModelContentProvider('test', {\n\t\t\tprovideTextContent: async function (resource: URI): Promise<ITextModel | null> {\n\t\t\t\tif (resource.scheme === 'test') {\n\t\t\t\t\tlet modelContent = 'Hello Test';\n\t\t\t\t\tlet languageSelection = accessor.modeService.create('json');\n\n\t\t\t\t\treturn accessor.modelService.createModel(modelContent, languageSelection, resource);\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\n\t\tlet resource = URI.from({ scheme: 'test', authority: null!, path: 'thePath' });\n\t\tlet input: ResourceEditorInput = instantiationService.createInstance(ResourceEditorInput, resource, 'The Name', 'The Description', undefined);\n\n\t\tconst model = await input.resolve();\n\t\tassert.ok(model);\n\t\tassert.strictEqual(snapshotToString(((model as ResourceEditorModel).createSnapshot()!)), 'Hello Test');\n\t\tlet disposed = false;\n\t\tlet disposedPromise = new Promise<void>(resolve => {\n\t\t\tEvent.once(model.onWillDispose)(() => {\n\t\t\t\tdisposed = true;\n\t\t\t\tresolve();\n\t\t\t});\n\t\t});\n\t\tinput.dispose();\n\n\t\tawait disposedPromise;\n\t\tassert.strictEqual(disposed, true);\n\t\tdisposable.dispose();\n\t});\n\n\ttest('resolve file', async function () {\n\t\tconst textModel = instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/file_resolver.txt'), 'utf8', undefined);\n\t\t(<TestTextFileEditorModelManager>accessor.textFileService.files).add(textModel.resource, textModel);\n\n\t\tawait textModel.resolve();\n\n\t\tconst ref = await accessor.textModelResolverService.createModelReference(textModel.resource);\n\n\t\tconst model = ref.object;\n\t\tconst editorModel = model.textEditorModel;\n\n\t\tassert.ok(editorModel);\n\t\tassert.strictEqual(editorModel.getValue(), 'Hello Html');\n\n\t\tlet disposed = false;\n\t\tEvent.once(model.onWillDispose)(() => {\n\t\t\tdisposed = true;\n\t\t});\n\n\t\tref.dispose();\n\t\tawait timeout(0);  // due to the reference resolving the model first which is async\n\t\tassert.strictEqual(disposed, true);\n\t});\n\n\ttest('resolved dirty file eventually disposes', async function () {\n\t\tconst textModel = instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/file_resolver.txt'), 'utf8', undefined);\n\t\t(<TestTextFileEditorModelManager>accessor.textFileService.files).add(textModel.resource, textModel);\n\n\t\tawait textModel.resolve();\n\n\t\ttextModel.updateTextEditorModel(createTextBufferFactory('make dirty'));\n\n\t\tconst ref = await accessor.textModelResolverService.createModelReference(textModel.resource);\n\n\t\tlet disposed = false;\n\t\tEvent.once(textModel.onWillDispose)(() => {\n\t\t\tdisposed = true;\n\t\t});\n\n\t\tref.dispose();\n\t\tawait timeout(0);\n\t\tassert.strictEqual(disposed, false); // not disposed because model still dirty\n\n\t\ttextModel.revert();\n\n\t\tawait timeout(0);\n\t\tassert.strictEqual(disposed, true); // now disposed because model got reverted\n\t});\n\n\ttest('resolved dirty file does not dispose when new reference created', async function () {\n\t\tconst textModel = instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/file_resolver.txt'), 'utf8', undefined);\n\t\t(<TestTextFileEditorModelManager>accessor.textFileService.files).add(textModel.resource, textModel);\n\n\t\tawait textModel.resolve();\n\n\t\ttextModel.updateTextEditorModel(createTextBufferFactory('make dirty'));\n\n\t\tconst ref1 = await accessor.textModelResolverService.createModelReference(textModel.resource);\n\n\t\tlet disposed = false;\n\t\tEvent.once(textModel.onWillDispose)(() => {\n\t\t\tdisposed = true;\n\t\t});\n\n\t\tref1.dispose();\n\t\tawait timeout(0);\n\t\tassert.strictEqual(disposed, false); // not disposed because model still dirty\n\n\t\tconst ref2 = await accessor.textModelResolverService.createModelReference(textModel.resource);\n\n\t\ttextModel.revert();\n\n\t\tawait timeout(0);\n\t\tassert.strictEqual(disposed, false); // not disposed because we got another ref meanwhile\n\n\t\tref2.dispose();\n\n\t\tawait timeout(0);\n\t\tassert.strictEqual(disposed, true); // now disposed because last ref got disposed\n\t});\n\n\ttest('resolve untitled', async () => {\n\t\tconst service = accessor.untitledTextEditorService;\n\t\tconst untitledModel = service.create();\n\t\tconst input = instantiationService.createInstance(UntitledTextEditorInput, untitledModel);\n\n\t\tawait input.resolve();\n\t\tconst ref = await accessor.textModelResolverService.createModelReference(input.resource);\n\t\tconst model = ref.object;\n\t\tassert.strictEqual(untitledModel, model);\n\t\tconst editorModel = model.textEditorModel;\n\t\tassert.ok(editorModel);\n\t\tref.dispose();\n\t\tinput.dispose();\n\t\tmodel.dispose();\n\t});\n\n\ttest('even loading documents should be refcounted', async () => {\n\t\tlet resolveModel!: Function;\n\t\tlet waitForIt = new Promise(resolve => resolveModel = resolve);\n\n\t\tconst disposable = accessor.textModelResolverService.registerTextModelContentProvider('test', {\n\t\t\tprovideTextContent: async (resource: URI): Promise<ITextModel> => {\n\t\t\t\tawait waitForIt;\n\n\t\t\t\tlet modelContent = 'Hello Test';\n\t\t\t\tlet languageSelection = accessor.modeService.create('json');\n\t\t\t\treturn accessor.modelService.createModel(modelContent, languageSelection, resource);\n\t\t\t}\n\t\t});\n\n\t\tconst uri = URI.from({ scheme: 'test', authority: null!, path: 'thePath' });\n\n\t\tconst modelRefPromise1 = accessor.textModelResolverService.createModelReference(uri);\n\t\tconst modelRefPromise2 = accessor.textModelResolverService.createModelReference(uri);\n\n\t\tresolveModel();\n\n\t\tconst modelRef1 = await modelRefPromise1;\n\t\tconst model1 = modelRef1.object;\n\t\tconst modelRef2 = await modelRefPromise2;\n\t\tconst model2 = modelRef2.object;\n\t\tconst textModel = model1.textEditorModel;\n\n\t\tassert.strictEqual(model1, model2, 'they are the same model');\n\t\tassert(!textModel.isDisposed(), 'the text model should not be disposed');\n\n\t\tmodelRef1.dispose();\n\t\tassert(!textModel.isDisposed(), 'the text model should still not be disposed');\n\n\t\tlet p1 = new Promise<void>(resolve => textModel.onWillDispose(resolve));\n\t\tmodelRef2.dispose();\n\n\t\tawait p1;\n\t\tassert(textModel.isDisposed(), 'the text model should finally be disposed');\n\n\t\tdisposable.dispose();\n\t});\n});\n"]}