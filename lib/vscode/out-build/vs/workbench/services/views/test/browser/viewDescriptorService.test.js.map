{"version":3,"file":"viewDescriptorService.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/views/test/browser/viewDescriptorService.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { IViewsRegistry, IViewDescriptor, IViewContainersRegistry, Extensions as ViewContainerExtensions, IViewDescriptorService, ViewContainerLocation, ViewContainer } from 'vs/workbench/common/views';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { workbenchInstantiationService } from 'vs/workbench/test/browser/workbenchTestServices';\nimport { TestInstantiationService } from 'vs/platform/instantiation/test/common/instantiationServiceMock';\nimport { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';\nimport { ViewDescriptorService } from 'vs/workbench/services/views/browser/viewDescriptorService';\nimport { assertIsDefined } from 'vs/base/common/types';\nimport { ContextKeyService } from 'vs/platform/contextkey/browser/contextKeyService';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\n\nconst ViewsRegistry = Registry.as<IViewsRegistry>(ViewContainerExtensions.ViewsRegistry);\nconst sidebarContainer = Registry.as<IViewContainersRegistry>(ViewContainerExtensions.ViewContainersRegistry).registerViewContainer({ id: 'testSidebar', title: 'test', ctorDescriptor: new SyncDescriptor(<any>{}) }, ViewContainerLocation.Sidebar);\nconst panelContainer = Registry.as<IViewContainersRegistry>(ViewContainerExtensions.ViewContainersRegistry).registerViewContainer({ id: 'testPanel', title: 'test', ctorDescriptor: new SyncDescriptor(<any>{}) }, ViewContainerLocation.Panel);\n\nsuite('ViewDescriptorService', () => {\n\n\tlet viewDescriptorService: IViewDescriptorService;\n\n\tsetup(() => {\n\t\tconst instantiationService: TestInstantiationService = <TestInstantiationService>workbenchInstantiationService();\n\t\tinstantiationService.stub(IContextKeyService, instantiationService.createInstance(ContextKeyService));\n\t\tviewDescriptorService = instantiationService.createInstance(ViewDescriptorService);\n\t});\n\n\tteardown(() => {\n\t\tViewsRegistry.deregisterViews(ViewsRegistry.getViews(sidebarContainer), sidebarContainer);\n\t\tViewsRegistry.deregisterViews(ViewsRegistry.getViews(panelContainer), panelContainer);\n\t});\n\n\ttest('Empty Containers', function () {\n\t\tconst sidebarViews = viewDescriptorService.getViewContainerModel(sidebarContainer);\n\t\tconst panelViews = viewDescriptorService.getViewContainerModel(panelContainer);\n\t\tassert.strictEqual(sidebarViews.allViewDescriptors.length, 0, 'The sidebar container should have no views yet.');\n\t\tassert.strictEqual(panelViews.allViewDescriptors.length, 0, 'The panel container should have no views yet.');\n\t});\n\n\ttest('Register/Deregister', () => {\n\t\tconst viewDescriptors: IViewDescriptor[] = [\n\t\t\t{\n\t\t\t\tid: 'view1',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: 'Test View 1',\n\t\t\t\tcanMoveView: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view2',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: 'Test View 2',\n\t\t\t\tcanMoveView: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view3',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: 'Test View 3',\n\t\t\t\tcanMoveView: true\n\t\t\t}\n\t\t];\n\n\n\t\tViewsRegistry.registerViews(viewDescriptors.slice(0, 2), sidebarContainer);\n\t\tViewsRegistry.registerViews(viewDescriptors.slice(2), panelContainer);\n\n\n\t\tlet sidebarViews = viewDescriptorService.getViewContainerModel(sidebarContainer);\n\t\tlet panelViews = viewDescriptorService.getViewContainerModel(panelContainer);\n\n\t\tassert.strictEqual(sidebarViews.activeViewDescriptors.length, 2, 'Sidebar should have 2 views');\n\t\tassert.strictEqual(panelViews.activeViewDescriptors.length, 1, 'Panel should have 1 view');\n\n\t\tViewsRegistry.deregisterViews(viewDescriptors.slice(0, 2), sidebarContainer);\n\t\tViewsRegistry.deregisterViews(viewDescriptors.slice(2), panelContainer);\n\n\n\t\tsidebarViews = viewDescriptorService.getViewContainerModel(sidebarContainer);\n\t\tpanelViews = viewDescriptorService.getViewContainerModel(panelContainer);\n\n\t\tassert.strictEqual(sidebarViews.activeViewDescriptors.length, 0, 'Sidebar should have no views');\n\t\tassert.strictEqual(panelViews.activeViewDescriptors.length, 0, 'Panel should have no views');\n\t});\n\n\ttest('move views to existing containers', async function () {\n\t\tconst viewDescriptors: IViewDescriptor[] = [\n\t\t\t{\n\t\t\t\tid: 'view1',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: 'Test View 1',\n\t\t\t\tcanMoveView: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view2',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: 'Test View 2',\n\t\t\t\tcanMoveView: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view3',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: 'Test View 3',\n\t\t\t\tcanMoveView: true\n\t\t\t}\n\t\t];\n\n\t\tViewsRegistry.registerViews(viewDescriptors.slice(0, 2), sidebarContainer);\n\t\tViewsRegistry.registerViews(viewDescriptors.slice(2), panelContainer);\n\n\t\tviewDescriptorService.moveViewsToContainer(viewDescriptors.slice(2), sidebarContainer);\n\t\tviewDescriptorService.moveViewsToContainer(viewDescriptors.slice(0, 2), panelContainer);\n\n\t\tlet sidebarViews = viewDescriptorService.getViewContainerModel(sidebarContainer);\n\t\tlet panelViews = viewDescriptorService.getViewContainerModel(panelContainer);\n\n\t\tassert.strictEqual(sidebarViews.activeViewDescriptors.length, 1, 'Sidebar should have 2 views');\n\t\tassert.strictEqual(panelViews.activeViewDescriptors.length, 2, 'Panel should have 1 view');\n\n\t\tassert.notStrictEqual(sidebarViews.activeViewDescriptors.indexOf(viewDescriptors[2]), -1, `Sidebar should have ${viewDescriptors[2].name}`);\n\t\tassert.notStrictEqual(panelViews.activeViewDescriptors.indexOf(viewDescriptors[0]), -1, `Panel should have ${viewDescriptors[0].name}`);\n\t\tassert.notStrictEqual(panelViews.activeViewDescriptors.indexOf(viewDescriptors[1]), -1, `Panel should have ${viewDescriptors[1].name}`);\n\t});\n\n\ttest('move views to generated containers', async function () {\n\t\tconst viewDescriptors: IViewDescriptor[] = [\n\t\t\t{\n\t\t\t\tid: 'view1',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: 'Test View 1',\n\t\t\t\tcanMoveView: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view2',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: 'Test View 2',\n\t\t\t\tcanMoveView: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view3',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: 'Test View 3',\n\t\t\t\tcanMoveView: true\n\t\t\t}\n\t\t];\n\n\t\tViewsRegistry.registerViews(viewDescriptors.slice(0, 2), sidebarContainer);\n\t\tViewsRegistry.registerViews(viewDescriptors.slice(2), panelContainer);\n\n\t\tviewDescriptorService.moveViewToLocation(viewDescriptors[0], ViewContainerLocation.Panel);\n\t\tviewDescriptorService.moveViewToLocation(viewDescriptors[2], ViewContainerLocation.Sidebar);\n\n\t\tlet sidebarViews = viewDescriptorService.getViewContainerModel(sidebarContainer);\n\t\tlet panelViews = viewDescriptorService.getViewContainerModel(panelContainer);\n\n\t\tassert.strictEqual(sidebarViews.activeViewDescriptors.length, 1, 'Sidebar container should have 1 view');\n\t\tassert.strictEqual(panelViews.activeViewDescriptors.length, 0, 'Panel container should have no views');\n\n\t\tconst generatedPanel = assertIsDefined(viewDescriptorService.getViewContainerByViewId(viewDescriptors[0].id));\n\t\tconst generatedSidebar = assertIsDefined(viewDescriptorService.getViewContainerByViewId(viewDescriptors[2].id));\n\n\t\tassert.strictEqual(viewDescriptorService.getViewContainerLocation(generatedPanel), ViewContainerLocation.Panel, 'Generated Panel should be in located in the panel');\n\t\tassert.strictEqual(viewDescriptorService.getViewContainerLocation(generatedSidebar), ViewContainerLocation.Sidebar, 'Generated Sidebar should be in located in the sidebar');\n\n\t\tassert.strictEqual(viewDescriptorService.getViewContainerLocation(generatedPanel), viewDescriptorService.getViewLocationById(viewDescriptors[0].id), 'Panel view location and container location should match');\n\t\tassert.strictEqual(viewDescriptorService.getViewContainerLocation(generatedSidebar), viewDescriptorService.getViewLocationById(viewDescriptors[2].id), 'Sidebar view location and container location should match');\n\n\t\tassert.strictEqual(viewDescriptorService.getDefaultContainerById(viewDescriptors[2].id), panelContainer, `${viewDescriptors[2].name} has wrong default container`);\n\t\tassert.strictEqual(viewDescriptorService.getDefaultContainerById(viewDescriptors[0].id), sidebarContainer, `${viewDescriptors[0].name} has wrong default container`);\n\n\t\tviewDescriptorService.moveViewToLocation(viewDescriptors[0], ViewContainerLocation.Sidebar);\n\t\tviewDescriptorService.moveViewToLocation(viewDescriptors[2], ViewContainerLocation.Panel);\n\n\t\tsidebarViews = viewDescriptorService.getViewContainerModel(sidebarContainer);\n\t\tpanelViews = viewDescriptorService.getViewContainerModel(panelContainer);\n\n\t\tassert.strictEqual(sidebarViews.activeViewDescriptors.length, 1, 'Sidebar should have 2 views');\n\t\tassert.strictEqual(panelViews.activeViewDescriptors.length, 0, 'Panel should have 1 view');\n\n\t\tassert.strictEqual(viewDescriptorService.getViewLocationById(viewDescriptors[0].id), ViewContainerLocation.Sidebar, 'View should be located in the sidebar');\n\t\tassert.strictEqual(viewDescriptorService.getViewLocationById(viewDescriptors[2].id), ViewContainerLocation.Panel, 'View should be located in the panel');\n\t});\n\n\ttest('move view events', async function () {\n\t\tconst viewDescriptors: IViewDescriptor[] = [\n\t\t\t{\n\t\t\t\tid: 'view1',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: 'Test View 1',\n\t\t\t\tcanMoveView: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view2',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: 'Test View 2',\n\t\t\t\tcanMoveView: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view3',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: 'Test View 3',\n\t\t\t\tcanMoveView: true\n\t\t\t}\n\t\t];\n\n\n\t\tlet expectedSequence = '';\n\t\tlet actualSequence = '';\n\t\tconst disposables = [];\n\n\t\tconst containerMoveString = (view: IViewDescriptor, from: ViewContainer, to: ViewContainer) => {\n\t\t\treturn `Moved ${view.id} from ${from.id} to ${to.id}\\n`;\n\t\t};\n\n\t\tconst locationMoveString = (view: IViewDescriptor, from: ViewContainerLocation, to: ViewContainerLocation) => {\n\t\t\treturn `Moved ${view.id} from ${from === ViewContainerLocation.Sidebar ? 'Sidebar' : 'Panel'} to ${to === ViewContainerLocation.Sidebar ? 'Sidebar' : 'Panel'}\\n`;\n\t\t};\n\t\tdisposables.push(viewDescriptorService.onDidChangeContainer(({ views, from, to }) => {\n\t\t\tviews.forEach(view => {\n\t\t\t\tactualSequence += containerMoveString(view, from, to);\n\t\t\t});\n\t\t}));\n\n\t\tdisposables.push(viewDescriptorService.onDidChangeLocation(({ views, from, to }) => {\n\t\t\tviews.forEach(view => {\n\t\t\t\tactualSequence += locationMoveString(view, from, to);\n\t\t\t});\n\t\t}));\n\n\t\tViewsRegistry.registerViews(viewDescriptors.slice(0, 2), sidebarContainer);\n\t\tViewsRegistry.registerViews(viewDescriptors.slice(2), panelContainer);\n\n\t\texpectedSequence += locationMoveString(viewDescriptors[0], ViewContainerLocation.Sidebar, ViewContainerLocation.Panel);\n\t\tviewDescriptorService.moveViewToLocation(viewDescriptors[0], ViewContainerLocation.Panel);\n\t\texpectedSequence += containerMoveString(viewDescriptors[0], sidebarContainer, viewDescriptorService.getViewContainerByViewId(viewDescriptors[0].id)!);\n\n\t\texpectedSequence += locationMoveString(viewDescriptors[2], ViewContainerLocation.Panel, ViewContainerLocation.Sidebar);\n\t\tviewDescriptorService.moveViewToLocation(viewDescriptors[2], ViewContainerLocation.Sidebar);\n\t\texpectedSequence += containerMoveString(viewDescriptors[2], panelContainer, viewDescriptorService.getViewContainerByViewId(viewDescriptors[2].id)!);\n\n\n\t\texpectedSequence += locationMoveString(viewDescriptors[0], ViewContainerLocation.Panel, ViewContainerLocation.Sidebar);\n\t\texpectedSequence += containerMoveString(viewDescriptors[0], viewDescriptorService.getViewContainerByViewId(viewDescriptors[0].id)!, sidebarContainer);\n\t\tviewDescriptorService.moveViewsToContainer([viewDescriptors[0]], sidebarContainer);\n\n\t\texpectedSequence += locationMoveString(viewDescriptors[2], ViewContainerLocation.Sidebar, ViewContainerLocation.Panel);\n\t\texpectedSequence += containerMoveString(viewDescriptors[2], viewDescriptorService.getViewContainerByViewId(viewDescriptors[2].id)!, panelContainer);\n\t\tviewDescriptorService.moveViewsToContainer([viewDescriptors[2]], panelContainer);\n\n\t\texpectedSequence += locationMoveString(viewDescriptors[0], ViewContainerLocation.Sidebar, ViewContainerLocation.Panel);\n\t\texpectedSequence += containerMoveString(viewDescriptors[0], sidebarContainer, panelContainer);\n\t\tviewDescriptorService.moveViewsToContainer([viewDescriptors[0]], panelContainer);\n\n\t\texpectedSequence += locationMoveString(viewDescriptors[2], ViewContainerLocation.Panel, ViewContainerLocation.Sidebar);\n\t\texpectedSequence += containerMoveString(viewDescriptors[2], panelContainer, sidebarContainer);\n\t\tviewDescriptorService.moveViewsToContainer([viewDescriptors[2]], sidebarContainer);\n\n\t\texpectedSequence += locationMoveString(viewDescriptors[1], ViewContainerLocation.Sidebar, ViewContainerLocation.Panel);\n\t\texpectedSequence += locationMoveString(viewDescriptors[2], ViewContainerLocation.Sidebar, ViewContainerLocation.Panel);\n\t\texpectedSequence += containerMoveString(viewDescriptors[1], sidebarContainer, panelContainer);\n\t\texpectedSequence += containerMoveString(viewDescriptors[2], sidebarContainer, panelContainer);\n\t\tviewDescriptorService.moveViewsToContainer([viewDescriptors[1], viewDescriptors[2]], panelContainer);\n\n\t\tassert.strictEqual(actualSequence, expectedSequence, 'Event sequence not matching expected sequence');\n\t});\n\n});\n"]}