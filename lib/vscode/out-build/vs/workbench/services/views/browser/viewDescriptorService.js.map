{"version":3,"sources":["vs/workbench/services/views/browser/viewDescriptorService.ts"],"names":[],"mappings":"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","file":"viewDescriptorService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ViewContainerLocation, IViewDescriptorService, ViewContainer, IViewsRegistry, IViewContainersRegistry, IViewDescriptor, Extensions as ViewExtensions, ViewVisibilityState, defaultViewIcon, ViewContainerLocationToString } from 'vs/workbench/common/views';\nimport { IContextKey, RawContextKey, IContextKeyService, ContextKeyExpr, ContextKeyEqualsExpr, ContextKeyFalseExpr, ContextKeyOrExpr, ContextKeyTrueExpr, ContextKeyAndExpr, ContextKeyDefinedExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { IStorageService, StorageScope, IStorageValueChangeEvent, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { toDisposable, DisposableStore, Disposable, IDisposable } from 'vs/base/common/lifecycle';\nimport { ViewPaneContainer, ViewPaneContainerAction, ViewsSubMenu } from 'vs/workbench/browser/parts/views/viewPaneContainer';\nimport { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { generateUuid } from 'vs/base/common/uuid';\nimport { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { getViewsStateStorageId, ViewContainerModel } from 'vs/workbench/services/views/common/viewContainerModel';\nimport { registerAction2, Action2, MenuId } from 'vs/platform/actions/common/actions';\nimport { localize } from 'vs/nls';\n\ninterface ICachedViewContainerInfo {\n\tcontainerId: string;\n}\n\nfunction getViewContainerStorageId(viewContainerId: string): string { return `${viewContainerId}.state`; }\n\nexport class ViewDescriptorService extends Disposable implements IViewDescriptorService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate static readonly CACHED_VIEW_POSITIONS = 'views.cachedViewPositions';\n\tprivate static readonly CACHED_VIEW_CONTAINER_LOCATIONS = 'views.cachedViewContainerLocations';\n\tprivate static readonly COMMON_CONTAINER_ID_PREFIX = 'workbench.views.service';\n\n\tprivate readonly _onDidChangeContainer: Emitter<{ views: IViewDescriptor[], from: ViewContainer, to: ViewContainer }> = this._register(new Emitter<{ views: IViewDescriptor[], from: ViewContainer, to: ViewContainer }>());\n\treadonly onDidChangeContainer: Event<{ views: IViewDescriptor[], from: ViewContainer, to: ViewContainer }> = this._onDidChangeContainer.event;\n\n\tprivate readonly _onDidChangeLocation: Emitter<{ views: IViewDescriptor[], from: ViewContainerLocation, to: ViewContainerLocation }> = this._register(new Emitter<{ views: IViewDescriptor[], from: ViewContainerLocation, to: ViewContainerLocation }>());\n\treadonly onDidChangeLocation: Event<{ views: IViewDescriptor[], from: ViewContainerLocation, to: ViewContainerLocation }> = this._onDidChangeLocation.event;\n\n\tprivate readonly _onDidChangeContainerLocation: Emitter<{ viewContainer: ViewContainer, from: ViewContainerLocation, to: ViewContainerLocation }> = this._register(new Emitter<{ viewContainer: ViewContainer, from: ViewContainerLocation, to: ViewContainerLocation }>());\n\treadonly onDidChangeContainerLocation: Event<{ viewContainer: ViewContainer, from: ViewContainerLocation, to: ViewContainerLocation }> = this._onDidChangeContainerLocation.event;\n\n\tprivate readonly viewContainerModels: Map<ViewContainer, { viewContainerModel: ViewContainerModel, disposable: IDisposable; }>;\n\tprivate readonly viewsVisibilityActionDisposables: Map<ViewContainer, DisposableStore>;\n\tprivate readonly activeViewContextKeys: Map<string, IContextKey<boolean>>;\n\tprivate readonly movableViewContextKeys: Map<string, IContextKey<boolean>>;\n\tprivate readonly defaultViewLocationContextKeys: Map<string, IContextKey<boolean>>;\n\tprivate readonly defaultViewContainerLocationContextKeys: Map<string, IContextKey<boolean>>;\n\n\tprivate readonly viewsRegistry: IViewsRegistry;\n\tprivate readonly viewContainersRegistry: IViewContainersRegistry;\n\n\tprivate cachedViewInfo: Map<string, ICachedViewContainerInfo>;\n\tprivate cachedViewContainerInfo: Map<string, ViewContainerLocation>;\n\n\tprivate _cachedViewPositionsValue: string | undefined;\n\tprivate get cachedViewPositionsValue(): string {\n\t\tif (!this._cachedViewPositionsValue) {\n\t\t\tthis._cachedViewPositionsValue = this.getStoredCachedViewPositionsValue();\n\t\t}\n\n\t\treturn this._cachedViewPositionsValue;\n\t}\n\n\tprivate set cachedViewPositionsValue(value: string) {\n\t\tif (this.cachedViewPositionsValue !== value) {\n\t\t\tthis._cachedViewPositionsValue = value;\n\t\t\tthis.setStoredCachedViewPositionsValue(value);\n\t\t}\n\t}\n\n\tprivate _cachedViewContainerLocationsValue: string | undefined;\n\tprivate get cachedViewContainerLocationsValue(): string {\n\t\tif (!this._cachedViewContainerLocationsValue) {\n\t\t\tthis._cachedViewContainerLocationsValue = this.getStoredCachedViewContainerLocationsValue();\n\t\t}\n\n\t\treturn this._cachedViewContainerLocationsValue;\n\t}\n\n\tprivate set cachedViewContainerLocationsValue(value: string) {\n\t\tif (this._cachedViewContainerLocationsValue !== value) {\n\t\t\tthis._cachedViewContainerLocationsValue = value;\n\t\t\tthis.setStoredCachedViewContainerLocationsValue(value);\n\t\t}\n\t}\n\n\tprivate readonly _onDidChangeViewContainers = this._register(new Emitter<{ added: ReadonlyArray<{ container: ViewContainer, location: ViewContainerLocation }>, removed: ReadonlyArray<{ container: ViewContainer, location: ViewContainerLocation }> }>());\n\treadonly onDidChangeViewContainers = this._onDidChangeViewContainers.event;\n\tget viewContainers(): ReadonlyArray<ViewContainer> { return this.viewContainersRegistry.all; }\n\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t) {\n\t\tsuper();\n\n\t\tthis.viewContainerModels = new Map<ViewContainer, { viewContainerModel: ViewContainerModel, disposable: IDisposable; }>();\n\t\tthis.viewsVisibilityActionDisposables = new Map<ViewContainer, DisposableStore>();\n\t\tthis.activeViewContextKeys = new Map<string, IContextKey<boolean>>();\n\t\tthis.movableViewContextKeys = new Map<string, IContextKey<boolean>>();\n\t\tthis.defaultViewLocationContextKeys = new Map<string, IContextKey<boolean>>();\n\t\tthis.defaultViewContainerLocationContextKeys = new Map<string, IContextKey<boolean>>();\n\n\t\tthis.viewContainersRegistry = Registry.as<IViewContainersRegistry>(ViewExtensions.ViewContainersRegistry);\n\t\tthis.viewsRegistry = Registry.as<IViewsRegistry>(ViewExtensions.ViewsRegistry);\n\n\t\tthis.cachedViewContainerInfo = this.getCachedViewContainerLocations();\n\t\tthis.cachedViewInfo = this.getCachedViewPositions();\n\n\t\t// Register all containers that were registered before this ctor\n\t\tthis.viewContainers.forEach(viewContainer => this.onDidRegisterViewContainer(viewContainer));\n\n\t\tthis._register(this.viewsRegistry.onViewsRegistered(views => this.onDidRegisterViews(views)));\n\t\tthis._register(this.viewsRegistry.onViewsDeregistered(({ views, viewContainer }) => this.onDidDeregisterViews(views, viewContainer)));\n\n\t\tthis._register(this.viewsRegistry.onDidChangeContainer(({ views, from, to }) => this.moveViews(views, from, to)));\n\n\t\tthis._register(this.viewContainersRegistry.onDidRegister(({ viewContainer }) => {\n\t\t\tthis.onDidRegisterViewContainer(viewContainer);\n\t\t\tthis._onDidChangeViewContainers.fire({ added: [{ container: viewContainer, location: this.getViewContainerLocation(viewContainer) }], removed: [] });\n\t\t}));\n\n\t\tthis._register(this.viewContainersRegistry.onDidDeregister(({ viewContainer }) => {\n\t\t\tthis.onDidDeregisterViewContainer(viewContainer);\n\t\t\tthis._onDidChangeViewContainers.fire({ removed: [{ container: viewContainer, location: this.getViewContainerLocation(viewContainer) }], added: [] });\n\t\t}));\n\n\t\tthis._register(toDisposable(() => {\n\t\t\tthis.viewContainerModels.forEach(({ disposable }) => disposable.dispose());\n\t\t\tthis.viewContainerModels.clear();\n\t\t\tthis.viewsVisibilityActionDisposables.forEach(disposables => disposables.dispose());\n\t\t\tthis.viewsVisibilityActionDisposables.clear();\n\t\t}));\n\n\t\tthis._register(this.storageService.onDidChangeValue((e) => { this.onDidStorageChange(e); }));\n\n\t\tthis._register(this.extensionService.onDidRegisterExtensions(() => this.onDidRegisterExtensions()));\n\t}\n\n\tprivate registerGroupedViews(groupedViews: Map<string, { cachedContainerInfo?: ICachedViewContainerInfo, views: IViewDescriptor[] }>): void {\n\t\t// Register views that have already been registered to their correct view containers\n\t\tfor (const containerId of groupedViews.keys()) {\n\t\t\tconst viewContainer = this.viewContainersRegistry.get(containerId);\n\t\t\tconst containerData = groupedViews.get(containerId)!;\n\n\t\t\t// The container has not been registered yet\n\t\t\tif (!viewContainer || !this.viewContainerModels.has(viewContainer)) {\n\t\t\t\tif (containerData.cachedContainerInfo && this.isGeneratedContainerId(containerData.cachedContainerInfo.containerId)) {\n\t\t\t\t\tif (!this.viewContainersRegistry.get(containerId)) {\n\t\t\t\t\t\tthis.registerGeneratedViewContainer(this.cachedViewContainerInfo.get(containerId)!, containerId);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Registration of a generated container handles registration of its views\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Filter out views that have already been added to the view container model\n\t\t\t// This is needed when statically-registered views are moved to\n\t\t\t// other statically registered containers as they will both try to add on startup\n\t\t\tconst viewsToAdd = containerData.views.filter(view => this.getViewContainerModel(viewContainer).allViewDescriptors.filter(vd => vd.id === view.id).length === 0);\n\t\t\tthis.addViews(viewContainer, viewsToAdd);\n\t\t}\n\t}\n\n\tprivate deregisterGroupedViews(groupedViews: Map<string, { cachedContainerInfo?: ICachedViewContainerInfo, views: IViewDescriptor[] }>): void {\n\t\t// Register views that have already been registered to their correct view containers\n\t\tfor (const viewContainerId of groupedViews.keys()) {\n\t\t\tconst viewContainer = this.viewContainersRegistry.get(viewContainerId);\n\n\t\t\t// The container has not been registered yet\n\t\t\tif (!viewContainer || !this.viewContainerModels.has(viewContainer)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tthis.removeViews(viewContainer, groupedViews.get(viewContainerId)!.views);\n\t\t}\n\t}\n\n\tprivate fallbackOrphanedViews(): void {\n\t\tfor (const [viewId, containerInfo] of this.cachedViewInfo.entries()) {\n\t\t\tconst containerId = containerInfo.containerId;\n\n\t\t\t// check if cached view container is registered\n\t\t\tif (this.viewContainersRegistry.get(containerId)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// check if view has been registered to default location\n\t\t\tconst viewContainer = this.viewsRegistry.getViewContainer(viewId);\n\t\t\tconst viewDescriptor = this.getViewDescriptorById(viewId);\n\t\t\tif (viewContainer && viewDescriptor) {\n\t\t\t\tthis.addViews(viewContainer, [viewDescriptor]);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onDidRegisterExtensions(): void {\n\t\t// If an extension is uninstalled, this method will handle resetting views to default locations\n\t\tthis.fallbackOrphanedViews();\n\n\t\t// Clean up empty generated view containers\n\t\tfor (const viewContainerId of [...this.cachedViewContainerInfo.keys()]) {\n\t\t\tthis.cleanUpViewContainer(viewContainerId);\n\t\t}\n\t}\n\n\tprivate onDidRegisterViews(views: { views: IViewDescriptor[], viewContainer: ViewContainer }[]): void {\n\t\tthis.contextKeyService.bufferChangeEvents(() => {\n\t\t\tviews.forEach(({ views, viewContainer }) => {\n\t\t\t\t// When views are registered, we need to regroup them based on the cache\n\t\t\t\tconst regroupedViews = this.regroupViews(viewContainer.id, views);\n\n\t\t\t\t// Once they are grouped, try registering them which occurs\n\t\t\t\t// if the container has already been registered within this service\n\t\t\t\t// or we can generate the container from the source view id\n\t\t\t\tthis.registerGroupedViews(regroupedViews);\n\n\t\t\t\tviews.forEach(viewDescriptor => this.getOrCreateMovableViewContextKey(viewDescriptor).set(!!viewDescriptor.canMoveView));\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate isGeneratedContainerId(id: string): boolean {\n\t\treturn id.startsWith(ViewDescriptorService.COMMON_CONTAINER_ID_PREFIX);\n\t}\n\n\tprivate onDidDeregisterViews(views: IViewDescriptor[], viewContainer: ViewContainer): void {\n\t\t// When views are registered, we need to regroup them based on the cache\n\t\tconst regroupedViews = this.regroupViews(viewContainer.id, views);\n\t\tthis.deregisterGroupedViews(regroupedViews);\n\t\tthis.contextKeyService.bufferChangeEvents(() => {\n\t\t\tviews.forEach(viewDescriptor => this.getOrCreateMovableViewContextKey(viewDescriptor).set(false));\n\t\t});\n\t}\n\n\tprivate regroupViews(containerId: string, views: IViewDescriptor[]): Map<string, { cachedContainerInfo?: ICachedViewContainerInfo, views: IViewDescriptor[] }> {\n\t\tconst ret = new Map<string, { cachedContainerInfo?: ICachedViewContainerInfo, views: IViewDescriptor[] }>();\n\n\t\tviews.forEach(viewDescriptor => {\n\t\t\tconst containerInfo = this.cachedViewInfo.get(viewDescriptor.id);\n\t\t\tconst correctContainerId = containerInfo?.containerId || containerId;\n\n\t\t\tconst containerData = ret.get(correctContainerId) || { cachedContainerInfo: containerInfo, views: [] };\n\t\t\tcontainerData.views.push(viewDescriptor);\n\t\t\tret.set(correctContainerId, containerData);\n\t\t});\n\n\t\treturn ret;\n\t}\n\n\tgetViewDescriptorById(viewId: string): IViewDescriptor | null {\n\t\treturn this.viewsRegistry.getView(viewId);\n\t}\n\n\tgetViewLocationById(viewId: string): ViewContainerLocation | null {\n\t\tconst container = this.getViewContainerByViewId(viewId);\n\t\tif (container === null) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this.getViewContainerLocation(container);\n\t}\n\n\tgetViewContainerByViewId(viewId: string): ViewContainer | null {\n\t\tconst containerId = this.cachedViewInfo.get(viewId)?.containerId;\n\n\t\treturn containerId ?\n\t\t\tthis.viewContainersRegistry.get(containerId) ?? null :\n\t\t\tthis.viewsRegistry.getViewContainer(viewId);\n\t}\n\n\tgetViewContainerLocation(viewContainer: ViewContainer): ViewContainerLocation {\n\t\tconst location = this.cachedViewContainerInfo.get(viewContainer.id);\n\t\treturn location !== undefined ? location : this.getDefaultViewContainerLocation(viewContainer);\n\t}\n\n\tgetDefaultViewContainerLocation(viewContainer: ViewContainer): ViewContainerLocation {\n\t\treturn this.viewContainersRegistry.getViewContainerLocation(viewContainer);\n\t}\n\n\tgetDefaultContainerById(viewId: string): ViewContainer | null {\n\t\treturn this.viewsRegistry.getViewContainer(viewId) ?? null;\n\t}\n\n\tgetViewContainerModel(container: ViewContainer): ViewContainerModel {\n\t\treturn this.getOrRegisterViewContainerModel(container);\n\t}\n\n\tgetViewContainerById(id: string): ViewContainer | null {\n\t\treturn this.viewContainersRegistry.get(id) || null;\n\t}\n\n\tgetViewContainersByLocation(location: ViewContainerLocation): ViewContainer[] {\n\t\treturn this.viewContainers.filter(v => this.getViewContainerLocation(v) === location);\n\t}\n\n\tgetDefaultViewContainer(location: ViewContainerLocation): ViewContainer | undefined {\n\t\treturn this.viewContainersRegistry.getDefaultViewContainer(location);\n\t}\n\n\tmoveViewContainerToLocation(viewContainer: ViewContainer, location: ViewContainerLocation, requestedIndex?: number): void {\n\t\tconst from = this.getViewContainerLocation(viewContainer);\n\t\tconst to = location;\n\t\tif (from !== to) {\n\t\t\tthis.cachedViewContainerInfo.set(viewContainer.id, to);\n\n\t\t\tconst defaultLocation = this.isGeneratedContainerId(viewContainer.id) ? true : this.getViewContainerLocation(viewContainer) === this.getDefaultViewContainerLocation(viewContainer);\n\t\t\tthis.getOrCreateDefaultViewContainerLocationContextKey(viewContainer).set(defaultLocation);\n\n\t\t\tviewContainer.requestedIndex = requestedIndex;\n\t\t\tthis._onDidChangeContainerLocation.fire({ viewContainer, from, to });\n\n\t\t\tconst views = this.getViewsByContainer(viewContainer);\n\t\t\tthis._onDidChangeLocation.fire({ views, from, to });\n\n\t\t\tthis.saveViewContainerLocationsToCache();\n\t\t}\n\t}\n\n\tmoveViewToLocation(view: IViewDescriptor, location: ViewContainerLocation): void {\n\t\tlet container = this.registerGeneratedViewContainer(location);\n\t\tthis.moveViewsToContainer([view], container);\n\t}\n\n\tmoveViewsToContainer(views: IViewDescriptor[], viewContainer: ViewContainer, visibilityState?: ViewVisibilityState): void {\n\t\tif (!views.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst from = this.getViewContainerByViewId(views[0].id);\n\t\tconst to = viewContainer;\n\n\t\tif (from && to && from !== to) {\n\t\t\tthis.moveViews(views, from, to, visibilityState);\n\t\t\tthis.cleanUpViewContainer(from.id);\n\t\t}\n\t}\n\n\treset(): void {\n\t\tthis.viewContainers.forEach(viewContainer => {\n\t\t\tconst viewContainerModel = this.getViewContainerModel(viewContainer);\n\n\t\t\tviewContainerModel.allViewDescriptors.forEach(viewDescriptor => {\n\t\t\t\tconst defaultContainer = this.getDefaultContainerById(viewDescriptor.id);\n\t\t\t\tconst currentContainer = this.getViewContainerByViewId(viewDescriptor.id);\n\n\t\t\t\tif (currentContainer && defaultContainer && currentContainer !== defaultContainer) {\n\t\t\t\t\tthis.moveViews([viewDescriptor], currentContainer, defaultContainer);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst defaultContainerLocation = this.getDefaultViewContainerLocation(viewContainer);\n\t\t\tconst currentContainerLocation = this.getViewContainerLocation(viewContainer);\n\t\t\tif (defaultContainerLocation !== null && currentContainerLocation !== defaultContainerLocation) {\n\t\t\t\tthis.moveViewContainerToLocation(viewContainer, defaultContainerLocation);\n\t\t\t}\n\n\t\t\tthis.cleanUpViewContainer(viewContainer.id);\n\t\t});\n\n\t\tthis.cachedViewContainerInfo.clear();\n\t\tthis.saveViewContainerLocationsToCache();\n\t\tthis.cachedViewInfo.clear();\n\t\tthis.saveViewPositionsToCache();\n\t}\n\n\tisViewContainerRemovedPermanently(viewContainerId: string): boolean {\n\t\treturn this.isGeneratedContainerId(viewContainerId) && !this.cachedViewContainerInfo.has(viewContainerId);\n\t}\n\n\tprivate moveViews(views: IViewDescriptor[], from: ViewContainer, to: ViewContainer, visibilityState: ViewVisibilityState = ViewVisibilityState.Expand): void {\n\t\tthis.removeViews(from, views);\n\t\tthis.addViews(to, views, visibilityState);\n\n\t\tconst oldLocation = this.getViewContainerLocation(from);\n\t\tconst newLocation = this.getViewContainerLocation(to);\n\n\t\tif (oldLocation !== newLocation) {\n\t\t\tthis._onDidChangeLocation.fire({ views, from: oldLocation, to: newLocation });\n\t\t}\n\n\t\tthis._onDidChangeContainer.fire({ views, from, to });\n\n\t\tthis.saveViewPositionsToCache();\n\n\t\tconst containerToString = (container: ViewContainer): string => {\n\t\t\tif (container.id.startsWith(ViewDescriptorService.COMMON_CONTAINER_ID_PREFIX)) {\n\t\t\t\treturn 'custom';\n\t\t\t}\n\n\t\t\tif (!container.extensionId) {\n\t\t\t\treturn container.id;\n\t\t\t}\n\n\t\t\treturn 'extension';\n\t\t};\n\n\t\t// Log on cache update to avoid duplicate events in other windows\n\t\tconst viewCount = views.length;\n\t\tconst fromContainer = containerToString(from);\n\t\tconst toContainer = containerToString(to);\n\t\tconst fromLocation = oldLocation === ViewContainerLocation.Panel ? 'panel' : 'sidebar';\n\t\tconst toLocation = newLocation === ViewContainerLocation.Panel ? 'panel' : 'sidebar';\n\n\t\tinterface ViewDescriptorServiceMoveViewsEvent {\n\t\t\tviewCount: number;\n\t\t\tfromContainer: string;\n\t\t\ttoContainer: string;\n\t\t\tfromLocation: string;\n\t\t\ttoLocation: string;\n\t\t}\n\n\t\ttype ViewDescriptorServiceMoveViewsClassification = {\n\t\t\tviewCount: { classification: 'SystemMetaData', purpose: 'FeatureInsight' };\n\t\t\tfromContainer: { classification: 'SystemMetaData', purpose: 'FeatureInsight' };\n\t\t\ttoContainer: { classification: 'SystemMetaData', purpose: 'FeatureInsight' };\n\t\t\tfromLocation: { classification: 'SystemMetaData', purpose: 'FeatureInsight' };\n\t\t\ttoLocation: { classification: 'SystemMetaData', purpose: 'FeatureInsight' };\n\t\t};\n\n\t\tthis.telemetryService.publicLog2<ViewDescriptorServiceMoveViewsEvent, ViewDescriptorServiceMoveViewsClassification>('viewDescriptorService.moveViews', { viewCount, fromContainer, toContainer, fromLocation, toLocation });\n\t}\n\n\tprivate cleanUpViewContainer(viewContainerId: string): void {\n\t\t// Skip if container is not generated\n\t\tif (!this.isGeneratedContainerId(viewContainerId)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Skip if container has views registered\n\t\tconst viewContainer = this.getViewContainerById(viewContainerId);\n\t\tif (viewContainer && this.getViewContainerModel(viewContainer)?.allViewDescriptors.length) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Skip if container has views in the cache\n\t\tif ([...this.cachedViewInfo.values()].some(({ containerId }) => containerId === viewContainerId)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Deregister the container\n\t\tif (viewContainer) {\n\t\t\tthis.viewContainersRegistry.deregisterViewContainer(viewContainer);\n\t\t}\n\n\t\t// Clean up caches of container\n\t\tthis.cachedViewContainerInfo.delete(viewContainerId);\n\t\tthis.cachedViewContainerLocationsValue = JSON.stringify([...this.cachedViewContainerInfo]);\n\t\tthis.storageService.remove(getViewsStateStorageId(viewContainer?.storageId || getViewContainerStorageId(viewContainerId)), StorageScope.GLOBAL);\n\t}\n\n\tprivate registerGeneratedViewContainer(location: ViewContainerLocation, existingId?: string): ViewContainer {\n\t\tconst id = existingId || this.generateContainerId(location);\n\n\t\tconst container = this.viewContainersRegistry.registerViewContainer({\n\t\t\tid,\n\t\t\tctorDescriptor: new SyncDescriptor(ViewPaneContainer, [id, { mergeViewWithContainerWhenSingleView: true, donotShowContainerTitleWhenMergedWithContainer: true }]),\n\t\t\ttitle: id, // we don't want to see this so using id\n\t\t\ticon: location === ViewContainerLocation.Sidebar ? defaultViewIcon : undefined,\n\t\t\tstorageId: getViewContainerStorageId(id),\n\t\t\thideIfEmpty: true\n\t\t}, location, { donotRegisterOpenCommand: true });\n\n\t\tconst cachedInfo = this.cachedViewContainerInfo.get(container.id);\n\t\tif (cachedInfo !== location) {\n\t\t\tthis.cachedViewContainerInfo.set(container.id, location);\n\t\t\tthis.saveViewContainerLocationsToCache();\n\t\t}\n\n\t\tthis.getOrCreateDefaultViewContainerLocationContextKey(container).set(true);\n\n\t\treturn container;\n\t}\n\n\tprivate getCachedViewPositions(): Map<string, ICachedViewContainerInfo> {\n\t\tconst result = new Map<string, ICachedViewContainerInfo>(JSON.parse(this.cachedViewPositionsValue));\n\n\t\t// Sanitize cache\n\t\tfor (const [viewId, containerInfo] of result.entries()) {\n\t\t\tif (!containerInfo) {\n\t\t\t\tresult.delete(viewId);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Verify a view that is in a generated has cached container info\n\t\t\tconst generated = this.isGeneratedContainerId(containerInfo.containerId);\n\t\t\tconst missingCacheData = this.cachedViewContainerInfo.get(containerInfo.containerId) === undefined;\n\t\t\tif (generated && missingCacheData) {\n\t\t\t\tresult.delete(viewId);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate getCachedViewContainerLocations(): Map<string, ViewContainerLocation> {\n\t\treturn new Map<string, ViewContainerLocation>(JSON.parse(this.cachedViewContainerLocationsValue));\n\t}\n\n\tprivate onDidStorageChange(e: IStorageValueChangeEvent): void {\n\t\tif (e.key === ViewDescriptorService.CACHED_VIEW_POSITIONS && e.scope === StorageScope.GLOBAL\n\t\t\t&& this.cachedViewPositionsValue !== this.getStoredCachedViewPositionsValue() /* This checks if current window changed the value or not */) {\n\t\t\tthis._cachedViewPositionsValue = this.getStoredCachedViewPositionsValue();\n\n\t\t\tconst newCachedPositions = this.getCachedViewPositions();\n\n\t\t\tfor (let viewId of newCachedPositions.keys()) {\n\t\t\t\tconst viewDescriptor = this.getViewDescriptorById(viewId);\n\t\t\t\tif (!viewDescriptor) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst prevViewContainer = this.getViewContainerByViewId(viewId);\n\t\t\t\tconst newViewContainerInfo = newCachedPositions.get(viewId)!;\n\t\t\t\t// Verify if we need to create the destination container\n\t\t\t\tif (!this.viewContainersRegistry.get(newViewContainerInfo.containerId)) {\n\t\t\t\t\tconst location = this.cachedViewContainerInfo.get(newViewContainerInfo.containerId);\n\t\t\t\t\tif (location !== undefined) {\n\t\t\t\t\t\tthis.registerGeneratedViewContainer(location, newViewContainerInfo.containerId);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Try moving to the new container\n\t\t\t\tconst newViewContainer = this.viewContainersRegistry.get(newViewContainerInfo.containerId);\n\t\t\t\tif (prevViewContainer && newViewContainer && newViewContainer !== prevViewContainer) {\n\t\t\t\t\tconst viewDescriptor = this.getViewDescriptorById(viewId);\n\t\t\t\t\tif (viewDescriptor) {\n\t\t\t\t\t\tthis.moveViews([viewDescriptor], prevViewContainer, newViewContainer);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If a value is not present in the cache, it must be reset to default\n\t\t\tthis.viewContainers.forEach(viewContainer => {\n\t\t\t\tconst viewContainerModel = this.getViewContainerModel(viewContainer);\n\t\t\t\tviewContainerModel.allViewDescriptors.forEach(viewDescriptor => {\n\t\t\t\t\tif (!newCachedPositions.has(viewDescriptor.id)) {\n\t\t\t\t\t\tconst currentContainer = this.getViewContainerByViewId(viewDescriptor.id);\n\t\t\t\t\t\tconst defaultContainer = this.getDefaultContainerById(viewDescriptor.id);\n\t\t\t\t\t\tif (currentContainer && defaultContainer && currentContainer !== defaultContainer) {\n\t\t\t\t\t\t\tthis.moveViews([viewDescriptor], currentContainer, defaultContainer);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.cachedViewInfo.delete(viewDescriptor.id);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tthis.cachedViewInfo = this.getCachedViewPositions();\n\t\t}\n\n\n\t\tif (e.key === ViewDescriptorService.CACHED_VIEW_CONTAINER_LOCATIONS && e.scope === StorageScope.GLOBAL\n\t\t\t&& this.cachedViewContainerLocationsValue !== this.getStoredCachedViewContainerLocationsValue() /* This checks if current window changed the value or not */) {\n\t\t\tthis._cachedViewContainerLocationsValue = this.getStoredCachedViewContainerLocationsValue();\n\t\t\tconst newCachedLocations = this.getCachedViewContainerLocations();\n\n\t\t\tfor (const [containerId, location] of newCachedLocations.entries()) {\n\t\t\t\tconst container = this.getViewContainerById(containerId);\n\t\t\t\tif (container) {\n\t\t\t\t\tif (location !== this.getViewContainerLocation(container)) {\n\t\t\t\t\t\tthis.moveViewContainerToLocation(container, location);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.viewContainers.forEach(viewContainer => {\n\t\t\t\tif (!newCachedLocations.has(viewContainer.id)) {\n\t\t\t\t\tconst currentLocation = this.getViewContainerLocation(viewContainer);\n\t\t\t\t\tconst defaultLocation = this.getDefaultViewContainerLocation(viewContainer);\n\n\t\t\t\t\tif (currentLocation !== defaultLocation) {\n\t\t\t\t\t\tthis.moveViewContainerToLocation(viewContainer, defaultLocation);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.cachedViewContainerInfo = this.getCachedViewContainerLocations();\n\t\t}\n\t}\n\n\t// Generated Container Id Format\n\t// {Common Prefix}.{Location}.{Uniqueness Id}\n\t// Old Format (deprecated)\n\t// {Common Prefix}.{Uniqueness Id}.{Source View Id}\n\tprivate generateContainerId(location: ViewContainerLocation): string {\n\t\treturn `${ViewDescriptorService.COMMON_CONTAINER_ID_PREFIX}.${location === ViewContainerLocation.Panel ? 'panel' : 'sidebar'}.${generateUuid()}`;\n\t}\n\n\tprivate getStoredCachedViewPositionsValue(): string {\n\t\treturn this.storageService.get(ViewDescriptorService.CACHED_VIEW_POSITIONS, StorageScope.GLOBAL, '[]');\n\t}\n\n\tprivate setStoredCachedViewPositionsValue(value: string): void {\n\t\tthis.storageService.store(ViewDescriptorService.CACHED_VIEW_POSITIONS, value, StorageScope.GLOBAL, StorageTarget.USER);\n\t}\n\n\tprivate getStoredCachedViewContainerLocationsValue(): string {\n\t\treturn this.storageService.get(ViewDescriptorService.CACHED_VIEW_CONTAINER_LOCATIONS, StorageScope.GLOBAL, '[]');\n\t}\n\n\tprivate setStoredCachedViewContainerLocationsValue(value: string): void {\n\t\tthis.storageService.store(ViewDescriptorService.CACHED_VIEW_CONTAINER_LOCATIONS, value, StorageScope.GLOBAL, StorageTarget.USER);\n\t}\n\n\tprivate saveViewPositionsToCache(): void {\n\t\tthis.viewContainers.forEach(viewContainer => {\n\t\t\tconst viewContainerModel = this.getViewContainerModel(viewContainer);\n\t\t\tviewContainerModel.allViewDescriptors.forEach(viewDescriptor => {\n\t\t\t\tthis.cachedViewInfo.set(viewDescriptor.id, {\n\t\t\t\t\tcontainerId: viewContainer.id\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\t// Do no save default positions to the cache\n\t\t// so that default changes can be recognized\n\t\t// https://github.com/microsoft/vscode/issues/90414\n\t\tfor (const [viewId, containerInfo] of this.cachedViewInfo) {\n\t\t\tconst defaultContainer = this.getDefaultContainerById(viewId);\n\t\t\tif (defaultContainer?.id === containerInfo.containerId) {\n\t\t\t\tthis.cachedViewInfo.delete(viewId);\n\t\t\t}\n\t\t}\n\n\t\tthis.cachedViewPositionsValue = JSON.stringify([...this.cachedViewInfo]);\n\t}\n\n\tprivate saveViewContainerLocationsToCache(): void {\n\t\tfor (const [containerId, location] of this.cachedViewContainerInfo) {\n\t\t\tconst container = this.getViewContainerById(containerId);\n\t\t\tif (container && location === this.getDefaultViewContainerLocation(container) && !this.isGeneratedContainerId(containerId)) {\n\t\t\t\tthis.cachedViewContainerInfo.delete(containerId);\n\t\t\t}\n\t\t}\n\n\t\tthis.cachedViewContainerLocationsValue = JSON.stringify([...this.cachedViewContainerInfo]);\n\t}\n\n\tprivate getViewsByContainer(viewContainer: ViewContainer): IViewDescriptor[] {\n\t\tconst result = this.viewsRegistry.getViews(viewContainer).filter(viewDescriptor => {\n\t\t\tconst cachedContainer = this.cachedViewInfo.get(viewDescriptor.id)?.containerId || viewContainer.id;\n\t\t\treturn cachedContainer === viewContainer.id;\n\t\t});\n\n\t\tfor (const [viewId, containerInfo] of this.cachedViewInfo.entries()) {\n\t\t\tif (!containerInfo || containerInfo.containerId !== viewContainer.id) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (this.viewsRegistry.getViewContainer(viewId) === viewContainer) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst viewDescriptor = this.getViewDescriptorById(viewId);\n\t\t\tif (viewDescriptor) {\n\t\t\t\tresult.push(viewDescriptor);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate onDidRegisterViewContainer(viewContainer: ViewContainer): void {\n\t\tconst defaultLocation = this.isGeneratedContainerId(viewContainer.id) ? true : this.getViewContainerLocation(viewContainer) === this.getDefaultViewContainerLocation(viewContainer);\n\t\tthis.getOrCreateDefaultViewContainerLocationContextKey(viewContainer).set(defaultLocation);\n\t\tthis.getOrRegisterViewContainerModel(viewContainer);\n\t}\n\n\tprivate getOrRegisterViewContainerModel(viewContainer: ViewContainer): ViewContainerModel {\n\t\tlet viewContainerModel = this.viewContainerModels.get(viewContainer)?.viewContainerModel;\n\n\t\tif (!viewContainerModel) {\n\t\t\tconst disposables = new DisposableStore();\n\t\t\tviewContainerModel = disposables.add(this.instantiationService.createInstance(ViewContainerModel, viewContainer));\n\n\t\t\tthis.onDidChangeActiveViews({ added: viewContainerModel.activeViewDescriptors, removed: [] });\n\t\t\tviewContainerModel.onDidChangeActiveViewDescriptors(changed => this.onDidChangeActiveViews(changed), this, disposables);\n\n\t\t\tthis.onDidChangeVisibleViews({ added: [...viewContainerModel.visibleViewDescriptors], removed: [] });\n\t\t\tviewContainerModel.onDidAddVisibleViewDescriptors(added => this.onDidChangeVisibleViews({ added: added.map(({ viewDescriptor }) => viewDescriptor), removed: [] }), this, disposables);\n\t\t\tviewContainerModel.onDidRemoveVisibleViewDescriptors(removed => this.onDidChangeVisibleViews({ added: [], removed: removed.map(({ viewDescriptor }) => viewDescriptor) }), this, disposables);\n\n\t\t\tthis.registerViewsVisibilityActions(viewContainerModel);\n\t\t\tdisposables.add(Event.any(\n\t\t\t\tviewContainerModel.onDidChangeActiveViewDescriptors,\n\t\t\t\tviewContainerModel.onDidAddVisibleViewDescriptors,\n\t\t\t\tviewContainerModel.onDidRemoveVisibleViewDescriptors,\n\t\t\t\tviewContainerModel.onDidMoveVisibleViewDescriptors\n\t\t\t)(e => this.registerViewsVisibilityActions(viewContainerModel!)));\n\t\t\tdisposables.add(toDisposable(() => {\n\t\t\t\tthis.viewsVisibilityActionDisposables.get(viewContainer)?.dispose();\n\t\t\t\tthis.viewsVisibilityActionDisposables.delete(viewContainer);\n\t\t\t}));\n\n\t\t\tdisposables.add(this.registerResetViewContainerAction(viewContainer));\n\n\t\t\tthis.viewContainerModels.set(viewContainer, { viewContainerModel: viewContainerModel, disposable: disposables });\n\n\t\t\t// Register all views that were statically registered to this container\n\t\t\t// Potentially, this is registering something that was handled by another container\n\t\t\t// addViews() handles this by filtering views that are already registered\n\t\t\tthis.onDidRegisterViews([{ views: this.viewsRegistry.getViews(viewContainer), viewContainer }]);\n\n\t\t\t// Add views that were registered prior to this view container\n\t\t\tconst viewsToRegister = this.getViewsByContainer(viewContainer).filter(view => this.getDefaultContainerById(view.id) !== viewContainer);\n\t\t\tif (viewsToRegister.length) {\n\t\t\t\tthis.addViews(viewContainer, viewsToRegister);\n\t\t\t\tthis.contextKeyService.bufferChangeEvents(() => {\n\t\t\t\t\tviewsToRegister.forEach(viewDescriptor => this.getOrCreateMovableViewContextKey(viewDescriptor).set(!!viewDescriptor.canMoveView));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\treturn viewContainerModel;\n\t}\n\n\tprivate onDidDeregisterViewContainer(viewContainer: ViewContainer): void {\n\t\tconst viewContainerModelItem = this.viewContainerModels.get(viewContainer);\n\t\tif (viewContainerModelItem) {\n\t\t\tviewContainerModelItem.disposable.dispose();\n\t\t\tthis.viewContainerModels.delete(viewContainer);\n\t\t}\n\t}\n\n\tprivate onDidChangeActiveViews({ added, removed }: { added: ReadonlyArray<IViewDescriptor>, removed: ReadonlyArray<IViewDescriptor>; }): void {\n\t\tthis.contextKeyService.bufferChangeEvents(() => {\n\t\t\tadded.forEach(viewDescriptor => this.getOrCreateActiveViewContextKey(viewDescriptor).set(true));\n\t\t\tremoved.forEach(viewDescriptor => this.getOrCreateActiveViewContextKey(viewDescriptor).set(false));\n\t\t});\n\t}\n\n\tprivate onDidChangeVisibleViews({ added, removed }: { added: IViewDescriptor[], removed: IViewDescriptor[]; }): void {\n\t\tthis.contextKeyService.bufferChangeEvents(() => {\n\t\t\tadded.forEach(viewDescriptor => this.getOrCreateVisibleViewContextKey(viewDescriptor).set(true));\n\t\t\tremoved.forEach(viewDescriptor => this.getOrCreateVisibleViewContextKey(viewDescriptor).set(false));\n\t\t});\n\t}\n\n\tprivate registerViewsVisibilityActions(viewContainerModel: ViewContainerModel): void {\n\t\tlet disposables = this.viewsVisibilityActionDisposables.get(viewContainerModel.viewContainer);\n\t\tif (!disposables) {\n\t\t\tdisposables = new DisposableStore();\n\t\t\tthis.viewsVisibilityActionDisposables.set(viewContainerModel.viewContainer, disposables);\n\t\t}\n\t\tdisposables.clear();\n\t\tviewContainerModel.activeViewDescriptors.forEach((viewDescriptor, index) => {\n\t\t\tif (!viewDescriptor.remoteAuthority) {\n\t\t\t\tdisposables?.add(registerAction2(class extends ViewPaneContainerAction<ViewPaneContainer> {\n\t\t\t\t\tconstructor() {\n\t\t\t\t\t\tsuper({\n\t\t\t\t\t\t\tid: `${viewDescriptor.id}.toggleVisibility`,\n\t\t\t\t\t\t\tviewPaneContainerId: viewContainerModel.viewContainer.id,\n\t\t\t\t\t\t\tprecondition: viewDescriptor.canToggleVisibility && (!viewContainerModel.isVisible(viewDescriptor.id) || viewContainerModel.visibleViewDescriptors.length > 1) ? ContextKeyTrueExpr.INSTANCE : ContextKeyFalseExpr.INSTANCE,\n\t\t\t\t\t\t\ttoggled: ContextKeyDefinedExpr.create(`${viewDescriptor.id}.visible`),\n\t\t\t\t\t\t\ttitle: viewDescriptor.name,\n\t\t\t\t\t\t\tmenu: [{\n\t\t\t\t\t\t\t\tid: ViewsSubMenu,\n\t\t\t\t\t\t\t\tgroup: '1_toggleViews',\n\t\t\t\t\t\t\t\twhen: ContextKeyAndExpr.create([\n\t\t\t\t\t\t\t\t\tContextKeyEqualsExpr.create('viewContainer', viewContainerModel.viewContainer.id),\n\t\t\t\t\t\t\t\t\tContextKeyEqualsExpr.create('viewContainerLocation', ViewContainerLocationToString(ViewContainerLocation.Sidebar)),\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\torder: index,\n\t\t\t\t\t\t\t}, {\n\t\t\t\t\t\t\t\tid: MenuId.ViewContainerTitleContext,\n\t\t\t\t\t\t\t\twhen: ContextKeyAndExpr.create([\n\t\t\t\t\t\t\t\t\tContextKeyEqualsExpr.create('viewContainer', viewContainerModel.viewContainer.id),\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\torder: index,\n\t\t\t\t\t\t\t\tgroup: '1_toggleVisibility'\n\t\t\t\t\t\t\t}, {\n\t\t\t\t\t\t\t\tid: MenuId.ViewTitleContext,\n\t\t\t\t\t\t\t\twhen: ContextKeyAndExpr.create([\n\t\t\t\t\t\t\t\t\tviewContainerModel.visibleViewDescriptors.length > 1 ? ContextKeyOrExpr.create(viewContainerModel.visibleViewDescriptors.map(v => ContextKeyEqualsExpr.create('view', v.id))) : ContextKeyFalseExpr.INSTANCE\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\torder: index,\n\t\t\t\t\t\t\t\tgroup: '2_toggleVisibility'\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tasync runInViewPaneContainer(serviceAccessor: ServicesAccessor, viewPaneContainer: ViewPaneContainer): Promise<void> {\n\t\t\t\t\t\tviewPaneContainer.toggleViewVisibility(viewDescriptor.id);\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t\tdisposables?.add(registerAction2(class extends ViewPaneContainerAction<ViewPaneContainer> {\n\t\t\t\t\tconstructor() {\n\t\t\t\t\t\tsuper({\n\t\t\t\t\t\t\tid: `${viewDescriptor.id}.removeView`,\n\t\t\t\t\t\t\tviewPaneContainerId: viewContainerModel.viewContainer.id,\n\t\t\t\t\t\t\ttitle: localize('hideView', \"Hide '{0}'\", viewDescriptor.name),\n\t\t\t\t\t\t\tprecondition: viewDescriptor.canToggleVisibility && (!viewContainerModel.isVisible(viewDescriptor.id) || viewContainerModel.visibleViewDescriptors.length > 1) ? ContextKeyTrueExpr.INSTANCE : ContextKeyFalseExpr.INSTANCE,\n\t\t\t\t\t\t\tmenu: [{\n\t\t\t\t\t\t\t\tid: MenuId.ViewTitleContext,\n\t\t\t\t\t\t\t\twhen: ContextKeyAndExpr.create([\n\t\t\t\t\t\t\t\t\tContextKeyEqualsExpr.create('view', viewDescriptor.id),\n\t\t\t\t\t\t\t\t\tContextKeyDefinedExpr.create(`${viewDescriptor.id}.visible`),\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\tgroup: '1_hide',\n\t\t\t\t\t\t\t\torder: 1\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tasync runInViewPaneContainer(serviceAccessor: ServicesAccessor, viewPaneContainer: ViewPaneContainer): Promise<void> {\n\t\t\t\t\t\tviewPaneContainer.toggleViewVisibility(viewDescriptor.id);\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate registerResetViewContainerAction(viewContainer: ViewContainer): IDisposable {\n\t\tconst that = this;\n\t\treturn registerAction2(class ResetViewLocationAction extends Action2 {\n\t\t\tconstructor() {\n\t\t\t\tsuper({\n\t\t\t\t\tid: `${viewContainer.id}.resetViewContainerLocation`,\n\t\t\t\t\ttitle: {\n\t\t\t\t\t\toriginal: 'Reset Location',\n\t\t\t\t\t\tvalue: localize('resetViewLocation', \"Reset Location\")\n\t\t\t\t\t},\n\t\t\t\t\tmenu: [{\n\t\t\t\t\t\tid: MenuId.ViewContainerTitleContext,\n\t\t\t\t\t\twhen: ContextKeyExpr.or(\n\t\t\t\t\t\t\tContextKeyExpr.and(\n\t\t\t\t\t\t\t\tContextKeyExpr.equals('viewContainer', viewContainer.id),\n\t\t\t\t\t\t\t\tContextKeyExpr.equals(`${viewContainer.id}.defaultViewContainerLocation`, false)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t}],\n\t\t\t\t});\n\t\t\t}\n\t\t\trun(): void {\n\t\t\t\tthat.moveViewContainerToLocation(viewContainer, that.getDefaultViewContainerLocation(viewContainer));\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate addViews(container: ViewContainer, views: IViewDescriptor[], visibilityState: ViewVisibilityState = ViewVisibilityState.Default): void {\n\t\t// Update in memory cache\n\t\tthis.contextKeyService.bufferChangeEvents(() => {\n\t\t\tviews.forEach(view => {\n\t\t\t\tthis.cachedViewInfo.set(view.id, { containerId: container.id });\n\t\t\t\tthis.getOrCreateDefaultViewLocationContextKey(view).set(this.getDefaultContainerById(view.id) === container);\n\t\t\t});\n\t\t});\n\n\t\tthis.getViewContainerModel(container).add(views.map(view => {\n\t\t\treturn {\n\t\t\t\tviewDescriptor: view,\n\t\t\t\tcollapsed: visibilityState === ViewVisibilityState.Default ? undefined : false,\n\t\t\t\tvisible: visibilityState === ViewVisibilityState.Default ? undefined : true\n\t\t\t};\n\t\t}));\n\t}\n\n\tprivate removeViews(container: ViewContainer, views: IViewDescriptor[]): void {\n\t\t// Set view default location keys to false\n\t\tthis.contextKeyService.bufferChangeEvents(() => {\n\t\t\tviews.forEach(view => this.getOrCreateDefaultViewLocationContextKey(view).set(false));\n\t\t});\n\n\t\t// Remove the views\n\t\tthis.getViewContainerModel(container).remove(views);\n\t}\n\n\tprivate getOrCreateActiveViewContextKey(viewDescriptor: IViewDescriptor): IContextKey<boolean> {\n\t\tconst activeContextKeyId = `${viewDescriptor.id}.active`;\n\t\tlet contextKey = this.activeViewContextKeys.get(activeContextKeyId);\n\t\tif (!contextKey) {\n\t\t\tcontextKey = new RawContextKey(activeContextKeyId, false).bindTo(this.contextKeyService);\n\t\t\tthis.activeViewContextKeys.set(activeContextKeyId, contextKey);\n\t\t}\n\t\treturn contextKey;\n\t}\n\n\tprivate getOrCreateVisibleViewContextKey(viewDescriptor: IViewDescriptor): IContextKey<boolean> {\n\t\tconst activeContextKeyId = `${viewDescriptor.id}.visible`;\n\t\tlet contextKey = this.activeViewContextKeys.get(activeContextKeyId);\n\t\tif (!contextKey) {\n\t\t\tcontextKey = new RawContextKey(activeContextKeyId, false).bindTo(this.contextKeyService);\n\t\t\tthis.activeViewContextKeys.set(activeContextKeyId, contextKey);\n\t\t}\n\t\treturn contextKey;\n\t}\n\n\tprivate getOrCreateMovableViewContextKey(viewDescriptor: IViewDescriptor): IContextKey<boolean> {\n\t\tconst movableViewContextKeyId = `${viewDescriptor.id}.canMove`;\n\t\tlet contextKey = this.movableViewContextKeys.get(movableViewContextKeyId);\n\t\tif (!contextKey) {\n\t\t\tcontextKey = new RawContextKey(movableViewContextKeyId, false).bindTo(this.contextKeyService);\n\t\t\tthis.movableViewContextKeys.set(movableViewContextKeyId, contextKey);\n\t\t}\n\t\treturn contextKey;\n\t}\n\n\tprivate getOrCreateDefaultViewLocationContextKey(viewDescriptor: IViewDescriptor): IContextKey<boolean> {\n\t\tconst defaultViewLocationContextKeyId = `${viewDescriptor.id}.defaultViewLocation`;\n\t\tlet contextKey = this.defaultViewLocationContextKeys.get(defaultViewLocationContextKeyId);\n\t\tif (!contextKey) {\n\t\t\tcontextKey = new RawContextKey(defaultViewLocationContextKeyId, false).bindTo(this.contextKeyService);\n\t\t\tthis.defaultViewLocationContextKeys.set(defaultViewLocationContextKeyId, contextKey);\n\t\t}\n\t\treturn contextKey;\n\t}\n\n\tprivate getOrCreateDefaultViewContainerLocationContextKey(viewContainer: ViewContainer): IContextKey<boolean> {\n\t\tconst defaultViewContainerLocationContextKeyId = `${viewContainer.id}.defaultViewContainerLocation`;\n\t\tlet contextKey = this.defaultViewContainerLocationContextKeys.get(defaultViewContainerLocationContextKeyId);\n\t\tif (!contextKey) {\n\t\t\tcontextKey = new RawContextKey(defaultViewContainerLocationContextKeyId, false).bindTo(this.contextKeyService);\n\t\t\tthis.defaultViewContainerLocationContextKeys.set(defaultViewContainerLocationContextKeyId, contextKey);\n\t\t}\n\t\treturn contextKey;\n\t}\n}\n\nregisterSingleton(IViewDescriptorService, ViewDescriptorService);\n"]}