{"version":3,"file":"environmentService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/environment/electron-sandbox/environmentService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IWorkbenchConfiguration, IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { INativeWindowConfiguration, IOSConfiguration } from 'vs/platform/windows/common/windows';\nimport { IEnvironmentService, INativeEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { refineServiceDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { AbstractNativeEnvironmentService } from 'vs/platform/environment/common/environmentService';\nimport { memoize } from 'vs/base/common/decorators';\nimport { URI } from 'vs/base/common/uri';\nimport { Schemas } from 'vs/base/common/network';\nimport { join } from 'vs/base/common/path';\nimport { IProductService } from 'vs/platform/product/common/productService';\n\nexport const INativeWorkbenchEnvironmentService = refineServiceDecorator<IEnvironmentService, INativeWorkbenchEnvironmentService>(IEnvironmentService);\n\nexport interface INativeWorkbenchConfiguration extends IWorkbenchConfiguration, INativeWindowConfiguration { }\n\n/**\n * A subclass of the `IWorkbenchEnvironmentService` to be used only in native\n * environments (Windows, Linux, macOS) but not e.g. web.\n */\nexport interface INativeWorkbenchEnvironmentService extends IWorkbenchEnvironmentService, INativeEnvironmentService {\n\n\treadonly machineId: string;\n\n\treadonly crashReporterDirectory?: string;\n\treadonly crashReporterId?: string;\n\n\treadonly execPath: string;\n\n\treadonly log?: string;\n\n\treadonly os: IOSConfiguration;\n\n\t/**\n\t * @deprecated this property will go away eventually as it\n\t * duplicates many properties of the environment service\n\t *\n\t * Please consider using the environment service directly\n\t * if you can.\n\t */\n\treadonly configuration: INativeWorkbenchConfiguration;\n}\n\nexport class NativeWorkbenchEnvironmentService extends AbstractNativeEnvironmentService implements INativeWorkbenchEnvironmentService {\n\n\t@memoize\n\tget machineId() { return this.configuration.machineId; }\n\n\t@memoize\n\tget remoteAuthority() { return this.configuration.remoteAuthority; }\n\n\t@memoize\n\tget execPath() { return this.configuration.execPath; }\n\n\t@memoize\n\toverride get userRoamingDataHome(): URI { return this.appSettingsHome.with({ scheme: Schemas.userData }); }\n\n\t@memoize\n\tget logFile(): URI { return URI.file(join(this.logsPath, `renderer${this.configuration.windowId}.log`)); }\n\n\t@memoize\n\tget extHostLogsPath(): URI { return URI.file(join(this.logsPath, `exthost${this.configuration.windowId}`)); }\n\n\t@memoize\n\tget webviewExternalEndpoint(): string { return `${Schemas.vscodeWebview}://{{uuid}}`; }\n\n\t@memoize\n\tget webviewResourceRoot(): string {\n\t\t// On desktop, this endpoint is only used for the service worker to identify resource loads and\n\t\t// should never actually be requested.\n\t\t//\n\t\t// Required due to https://github.com/electron/electron/issues/28528\n\t\treturn 'https://{{uuid}}.vscode-webview-test.com/vscode-resource/{{resource}}';\n\t}\n\n\t@memoize\n\tget webviewCspSource(): string {\n\t\tconst uri = URI.parse(this.webviewResourceRoot.replace('{{uuid}}', '*'));\n\t\treturn `${uri.scheme}://${uri.authority}`;\n\t}\n\n\t@memoize\n\tget skipReleaseNotes(): boolean { return !!this.args['skip-release-notes']; }\n\n\t@memoize\n\tget logExtensionHostCommunication(): boolean { return !!this.args.logExtensionHostCommunication; }\n\n\t@memoize\n\tget extensionEnabledProposedApi(): string[] | undefined {\n\t\tif (Array.isArray(this.args['enable-proposed-api'])) {\n\t\t\treturn this.args['enable-proposed-api'];\n\t\t}\n\n\t\tif ('enable-proposed-api' in this.args) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tget os(): IOSConfiguration {\n\t\treturn this.configuration.os;\n\t}\n\n\tconstructor(\n\t\treadonly configuration: INativeWorkbenchConfiguration,\n\t\tproductService: IProductService\n\t) {\n\t\tsuper(configuration, { homeDir: configuration.homeDir, tmpDir: configuration.tmpDir, userDataDir: configuration.userDataDir }, productService);\n\t}\n}\n"]}