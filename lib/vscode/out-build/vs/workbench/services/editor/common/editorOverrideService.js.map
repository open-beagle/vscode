{"version":3,"sources":["vs/workbench/services/editor/common/editorOverrideService.ts"],"names":[],"mappings":"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","file":"editorOverrideService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as glob from 'vs/base/common/glob';\nimport { Event } from 'vs/base/common/event';\nimport { IJSONSchema } from 'vs/base/common/jsonSchema';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { Schemas } from 'vs/base/common/network';\nimport { posix } from 'vs/base/common/path';\nimport { basename } from 'vs/base/common/resources';\nimport { URI } from 'vs/base/common/uri';\nimport { localize } from 'vs/nls';\nimport { workbenchConfigurationNodeBase } from 'vs/workbench/common/configuration';\nimport { Extensions as ConfigurationExtensions, IConfigurationNode, IConfigurationRegistry } from 'vs/platform/configuration/common/configurationRegistry';\nimport { IEditorOptions, ITextEditorOptions } from 'vs/platform/editor/common/editor';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { EditorExtensions, IEditorInput, IEditorInputWithOptions, IEditorInputWithOptionsAndGroup } from 'vs/workbench/common/editor';\nimport { DiffEditorInput } from 'vs/workbench/common/editor/diffEditorInput';\nimport { IEditorGroup } from 'vs/workbench/services/editor/common/editorGroupsService';\n\nexport const IEditorOverrideService = createDecorator<IEditorOverrideService>('editorOverrideService');\n\n//#region Editor Associations\n\n// Static values for editor contributions\n\nexport type EditorAssociation = {\n\treadonly viewType: string;\n\treadonly filenamePattern?: string;\n};\n\nexport type EditorAssociations = readonly EditorAssociation[];\n\nexport const editorsAssociationsSettingId = 'workbench.editorAssociations';\n\nexport const DEFAULT_EDITOR_ASSOCIATION: IEditorType = {\n\tid: 'default',\n\tdisplayName: localize('promptOpenWith.defaultEditor.displayName', \"Text Editor\"),\n\tproviderDisplayName: localize('builtinProviderDisplayName', \"Built-in\")\n};\n\nconst configurationRegistry = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration);\n\nconst editorTypeSchemaAddition: IJSONSchema = {\n\ttype: 'string',\n\tenum: []\n};\n\nconst editorAssociationsConfigurationNode: IConfigurationNode = {\n\t...workbenchConfigurationNodeBase,\n\tproperties: {\n\t\t'workbench.editorAssociations': {\n\t\t\ttype: 'array',\n\t\t\tmarkdownDescription: localize('editor.editorAssociations', \"Configure which editor to use for specific file types.\"),\n\t\t\titems: {\n\t\t\t\ttype: 'object',\n\t\t\t\tdefaultSnippets: [{\n\t\t\t\t\tbody: {\n\t\t\t\t\t\t'viewType': '$1',\n\t\t\t\t\t\t'filenamePattern': '$2'\n\t\t\t\t\t}\n\t\t\t\t}],\n\t\t\t\tproperties: {\n\t\t\t\t\t'viewType': {\n\t\t\t\t\t\tanyOf: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdescription: localize('editor.editorAssociations.viewType', \"The unique id of the editor to use.\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\teditorTypeSchemaAddition\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t'filenamePattern': {\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdescription: localize('editor.editorAssociations.filenamePattern', \"Glob pattern specifying which files the editor should be used for.\"),\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\nexport interface IEditorType {\n\treadonly id: string;\n\treadonly displayName: string;\n\treadonly providerDisplayName: string;\n}\n\nexport interface IEditorTypesHandler {\n\treadonly onDidChangeEditorTypes: Event<void>;\n\n\tgetEditorTypes(): IEditorType[];\n}\n\nexport interface IEditorAssociationsRegistry {\n\n\t/**\n\t * Register handlers for editor types\n\t */\n\tregisterEditorTypesHandler(id: string, handler: IEditorTypesHandler): IDisposable;\n}\n\nclass EditorAssociationsRegistry implements IEditorAssociationsRegistry {\n\n\tprivate readonly editorTypesHandlers = new Map<string, IEditorTypesHandler>();\n\n\tregisterEditorTypesHandler(id: string, handler: IEditorTypesHandler): IDisposable {\n\t\tif (this.editorTypesHandlers.has(id)) {\n\t\t\tthrow new Error(`An editor type handler with ${id} was already registered.`);\n\t\t}\n\n\t\tthis.editorTypesHandlers.set(id, handler);\n\t\tthis.updateEditorAssociationsSchema();\n\n\t\tconst editorTypeChangeEvent = handler.onDidChangeEditorTypes(() => {\n\t\t\tthis.updateEditorAssociationsSchema();\n\t\t});\n\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\teditorTypeChangeEvent.dispose();\n\t\t\t\tthis.editorTypesHandlers.delete(id);\n\t\t\t\tthis.updateEditorAssociationsSchema();\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate updateEditorAssociationsSchema() {\n\t\tconst enumValues: string[] = [];\n\t\tconst enumDescriptions: string[] = [];\n\n\t\tconst editorTypes: IEditorType[] = [DEFAULT_EDITOR_ASSOCIATION];\n\n\t\tfor (const [, handler] of this.editorTypesHandlers) {\n\t\t\teditorTypes.push(...handler.getEditorTypes());\n\t\t}\n\n\t\tfor (const { id, providerDisplayName } of editorTypes) {\n\t\t\tenumValues.push(id);\n\t\t\tenumDescriptions.push(localize('editorAssociations.viewType.sourceDescription', \"Source: {0}\", providerDisplayName));\n\t\t}\n\n\t\teditorTypeSchemaAddition.enum = enumValues;\n\t\teditorTypeSchemaAddition.enumDescriptions = enumDescriptions;\n\n\t\tconfigurationRegistry.notifyConfigurationSchemaUpdated(editorAssociationsConfigurationNode);\n\t}\n}\n\nRegistry.add(EditorExtensions.Associations, new EditorAssociationsRegistry());\nconfigurationRegistry.registerConfiguration(editorAssociationsConfigurationNode);\n//#endregion\n\n//#region EditorOverrideService types\nexport enum ContributedEditorPriority {\n\tbuiltin = 'builtin',\n\toption = 'option',\n\texclusive = 'exclusive',\n\tdefault = 'default'\n}\n\nexport type ContributionPointOptions = {\n\t/**\n\t * If your editor cannot be opened in multiple groups for the same resource\n\t */\n\tsinglePerResource?: boolean | (() => boolean);\n\t/**\n\t * If your editor supports diffs\n\t */\n\tcanHandleDiff?: boolean | (() => boolean);\n\n\t/**\n\t * Whether or not you can support opening the given resource.\n\t * If omitted we assume you can open everything\n\t */\n\tcanSupportResource?: (resource: URI) => boolean;\n};\n\nexport type ContributedEditorInfo = {\n\tid: string;\n\tdescribes: (currentEditor: IEditorInput) => boolean;\n\tlabel: string;\n\tdetail?: string;\n\tpriority: ContributedEditorPriority;\n};\n\nexport type EditorInputFactoryFunction = (resource: URI, options: IEditorOptions | ITextEditorOptions | undefined, group: IEditorGroup) => IEditorInputWithOptions;\n\nexport type DiffEditorInputFactoryFunction = (diffEditorInput: DiffEditorInput, options: IEditorOptions | ITextEditorOptions | undefined, group: IEditorGroup) => IEditorInputWithOptions;\n\nexport interface IEditorOverrideService {\n\treadonly _serviceBrand: undefined;\n\t/**\n\t * Given a resource finds the editor associations that match it from the user's settings\n\t * @param resource The resource to match\n\t * @return The matching associations\n\t */\n\tgetAssociationsForResource(resource: URI): EditorAssociations;\n\n\t/**\n\t * Updates the user's association to include a specific editor ID as a default for the given glob pattern\n\t * @param globPattern The glob pattern (must be a string as settings don't support relative glob)\n\t * @param editorID The ID of the editor to make a user default\n\t */\n\tupdateUserAssociations(globPattern: string, editorID: string): void;\n\n\t/**\n\t * Registers a specific editor contribution.\n\t * @param globPattern The glob pattern for this contribution point\n\t * @param editorInfo Information about the contribution point\n\t * @param options Specific options which apply to this contribution\n\t * @param createEditorInput The factory method for creating inputs\n\t */\n\tregisterContributionPoint(\n\t\tglobPattern: string | glob.IRelativePattern,\n\t\teditorInfo: ContributedEditorInfo,\n\t\toptions: ContributionPointOptions,\n\t\tcreateEditorInput: EditorInputFactoryFunction,\n\t\tcreateDiffEditorInput?: DiffEditorInputFactoryFunction\n\t): IDisposable;\n\n\t/**\n\t * Given an editor determines if there's a suitable override for it, if so returns an IEditorInputWithOptions for opening\n\t * @param editor The editor to override\n\t * @param options The current options for the editor\n\t * @param group The current group\n\t * @returns An IEditorInputWithOptionsAndGroup if there is an available override or undefined if there is not\n\t */\n\tresolveEditorOverride(editor: IEditorInput, options: IEditorOptions | ITextEditorOptions | undefined, group: IEditorGroup): Promise<IEditorInputWithOptionsAndGroup | undefined>;\n}\n\n//#endregion\n\n//#region Util functions\nexport function priorityToRank(priority: ContributedEditorPriority): number {\n\tswitch (priority) {\n\t\tcase ContributedEditorPriority.exclusive:\n\t\t\treturn 5;\n\t\tcase ContributedEditorPriority.default:\n\t\t\treturn 4;\n\t\tcase ContributedEditorPriority.builtin:\n\t\t\treturn 3;\n\t\t// Text editor is priority 2\n\t\tcase ContributedEditorPriority.option:\n\t\tdefault:\n\t\t\treturn 1;\n\t}\n}\n\nexport function globMatchesResource(globPattern: string | glob.IRelativePattern, resource: URI): boolean {\n\tconst excludedSchemes = new Set([\n\t\tSchemas.extension,\n\t\tSchemas.webviewPanel,\n\t]);\n\t// We want to say that the above schemes match no glob patterns\n\tif (excludedSchemes.has(resource.scheme)) {\n\t\treturn false;\n\t}\n\tconst matchOnPath = typeof globPattern === 'string' && globPattern.indexOf(posix.sep) >= 0;\n\tconst target = matchOnPath ? `${resource.scheme}:${resource.path}` : basename(resource);\n\treturn glob.match(globPattern, target.toLowerCase());\n}\n//#endregion\n"]}