{"version":3,"file":"editorService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/editor/browser/editorService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IResourceEditorInput, ITextEditorOptions, IEditorOptions, EditorActivation, EditorOverride, IResourceEditorInputIdentifier } from 'vs/platform/editor/common/editor';\nimport { SideBySideEditor, IEditorInput, IEditorPane, GroupIdentifier, IFileEditorInput, IUntitledTextResourceEditorInput, IResourceDiffEditorInput, IEditorInputFactoryRegistry, EditorExtensions, EditorInput, SideBySideEditorInput, IEditorInputWithOptions, isEditorInputWithOptions, EditorOptions, TextEditorOptions, IEditorIdentifier, IEditorCloseEvent, ITextEditorPane, ITextDiffEditorPane, IRevertOptions, SaveReason, EditorsOrder, isTextEditorPane, IWorkbenchEditorConfiguration, EditorResourceAccessor, IVisibleEditorPane, IEditorInputWithOptionsAndGroup } from 'vs/workbench/common/editor';\nimport { ResourceEditorInput } from 'vs/workbench/common/editor/resourceEditorInput';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { ResourceMap } from 'vs/base/common/map';\nimport { IUntitledTextEditorService } from 'vs/workbench/services/untitled/common/untitledTextEditorService';\nimport { IFileService, FileOperationEvent, FileOperation, FileChangesEvent, FileChangeType } from 'vs/platform/files/common/files';\nimport { Schemas } from 'vs/base/common/network';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { URI } from 'vs/base/common/uri';\nimport { basename, joinPath, isEqual } from 'vs/base/common/resources';\nimport { DiffEditorInput } from 'vs/workbench/common/editor/diffEditorInput';\nimport { IEditorGroupsService, IEditorGroup, GroupsOrder, IEditorReplacement, GroupChangeKind, preferredSideBySideGroupDirection } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { IResourceEditorInputType, SIDE_GROUP, IResourceEditorReplacement, IOpenEditorOverrideHandler, IEditorService, SIDE_GROUP_TYPE, ACTIVE_GROUP_TYPE, ISaveEditorsOptions, ISaveAllEditorsOptions, IRevertAllEditorsOptions, IBaseSaveRevertAllEditorOptions, IOpenEditorOverrideEntry } from 'vs/workbench/services/editor/common/editorService';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { Disposable, IDisposable, dispose, toDisposable, DisposableStore } from 'vs/base/common/lifecycle';\nimport { coalesce, distinct, firstOrDefault, insert } from 'vs/base/common/arrays';\nimport { isCodeEditor, isDiffEditor, ICodeEditor, IDiffEditor, isCompositeEditor } from 'vs/editor/browser/editorBrowser';\nimport { IEditorGroupView, EditorServiceImpl } from 'vs/workbench/browser/parts/editor/editor';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { isUndefined, withNullAsUndefined } from 'vs/base/common/types';\nimport { EditorsObserver } from 'vs/workbench/browser/parts/editor/editorsObserver';\nimport { IEditorViewState } from 'vs/editor/common/editorCommon';\nimport { IUntitledTextEditorModel } from 'vs/workbench/services/untitled/common/untitledTextEditorModel';\nimport { UntitledTextEditorInput } from 'vs/workbench/services/untitled/common/untitledTextEditorInput';\nimport { Promises, timeout } from 'vs/base/common/async';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { indexOfPath } from 'vs/base/common/extpath';\nimport { IUriIdentityService } from 'vs/workbench/services/uriIdentity/common/uriIdentity';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { ContributedEditorPriority, DEFAULT_EDITOR_ASSOCIATION, IEditorOverrideService } from 'vs/workbench/services/editor/common/editorOverrideService';\n\ntype CachedEditorInput = ResourceEditorInput | IFileEditorInput | UntitledTextEditorInput;\ntype OpenInEditorGroup = IEditorGroup | GroupIdentifier | SIDE_GROUP_TYPE | ACTIVE_GROUP_TYPE;\n\nexport class EditorService extends Disposable implements EditorServiceImpl {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\t//#region events\n\n\tprivate readonly _onDidActiveEditorChange = this._register(new Emitter<void>());\n\treadonly onDidActiveEditorChange = this._onDidActiveEditorChange.event;\n\n\tprivate readonly _onDidVisibleEditorsChange = this._register(new Emitter<void>());\n\treadonly onDidVisibleEditorsChange = this._onDidVisibleEditorsChange.event;\n\n\tprivate readonly _onDidCloseEditor = this._register(new Emitter<IEditorCloseEvent>());\n\treadonly onDidCloseEditor = this._onDidCloseEditor.event;\n\n\tprivate readonly _onDidOpenEditorFail = this._register(new Emitter<IEditorIdentifier>());\n\treadonly onDidOpenEditorFail = this._onDidOpenEditorFail.event;\n\n\tprivate readonly _onDidMostRecentlyActiveEditorsChange = this._register(new Emitter<void>());\n\treadonly onDidMostRecentlyActiveEditorsChange = this._onDidMostRecentlyActiveEditorsChange.event;\n\n\t//#endregion\n\n\tprivate readonly fileEditorInputFactory = Registry.as<IEditorInputFactoryRegistry>(EditorExtensions.EditorInputFactories).getFileEditorInputFactory();\n\n\tconstructor(\n\t\t@IEditorGroupsService private readonly editorGroupService: IEditorGroupsService,\n\t\t@IUntitledTextEditorService private readonly untitledTextEditorService: IUntitledTextEditorService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IEditorOverrideService private readonly editorOverrideService: IEditorOverrideService,\n\t) {\n\t\tsuper();\n\n\t\tthis.onConfigurationUpdated(configurationService.getValue<IWorkbenchEditorConfiguration>());\n\n\t\tthis.registerListeners();\n\n\t\t// Register the default editor to the override service\n\t\t// so that it shows up in the editors picker\n\t\tthis.registerDefaultOverride();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Editor & group changes\n\t\tthis.editorGroupService.whenReady.then(() => this.onEditorGroupsReady());\n\t\tthis.editorGroupService.onDidChangeActiveGroup(group => this.handleActiveEditorChange(group));\n\t\tthis.editorGroupService.onDidAddGroup(group => this.registerGroupListeners(group as IEditorGroupView));\n\t\tthis.editorsObserver.onDidMostRecentlyActiveEditorsChange(() => this._onDidMostRecentlyActiveEditorsChange.fire());\n\n\t\t// Out of workspace file watchers\n\t\tthis._register(this.onDidVisibleEditorsChange(() => this.handleVisibleEditorsChange()));\n\n\t\t// File changes & operations\n\t\t// Note: there is some duplication with the two file event handlers- Since we cannot always rely on the disk events\n\t\t// carrying all necessary data in all environments, we also use the file operation events to make sure operations are handled.\n\t\t// In any case there is no guarantee if the local event is fired first or the disk one. Thus, code must handle the case\n\t\t// that the event ordering is random as well as might not carry all information needed.\n\t\tthis._register(this.fileService.onDidRunOperation(e => this.onDidRunFileOperation(e)));\n\t\tthis._register(this.fileService.onDidFilesChange(e => this.onDidFilesChange(e)));\n\n\t\t// Configuration\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(e => this.onConfigurationUpdated(this.configurationService.getValue<IWorkbenchEditorConfiguration>())));\n\t}\n\n\t//#region Editor & group event handlers\n\n\tprivate lastActiveEditor: IEditorInput | undefined = undefined;\n\n\tprivate onEditorGroupsReady(): void {\n\n\t\t// Register listeners to each opened group\n\t\tfor (const group of this.editorGroupService.groups) {\n\t\t\tthis.registerGroupListeners(group as IEditorGroupView);\n\t\t}\n\n\t\t// Fire initial set of editor events if there is an active editor\n\t\tif (this.activeEditor) {\n\t\t\tthis.doHandleActiveEditorChangeEvent();\n\t\t\tthis._onDidVisibleEditorsChange.fire();\n\t\t}\n\t}\n\n\tprivate handleActiveEditorChange(group: IEditorGroup): void {\n\t\tif (group !== this.editorGroupService.activeGroup) {\n\t\t\treturn; // ignore if not the active group\n\t\t}\n\n\t\tif (!this.lastActiveEditor && !group.activeEditor) {\n\t\t\treturn; // ignore if we still have no active editor\n\t\t}\n\n\t\tthis.doHandleActiveEditorChangeEvent();\n\t}\n\n\tprivate doHandleActiveEditorChangeEvent(): void {\n\n\t\t// Remember as last active\n\t\tconst activeGroup = this.editorGroupService.activeGroup;\n\t\tthis.lastActiveEditor = withNullAsUndefined(activeGroup.activeEditor);\n\n\t\t// Fire event to outside parties\n\t\tthis._onDidActiveEditorChange.fire();\n\t}\n\n\tprivate registerGroupListeners(group: IEditorGroupView): void {\n\t\tconst groupDisposables = new DisposableStore();\n\n\t\tgroupDisposables.add(group.onDidGroupChange(e => {\n\t\t\tif (e.kind === GroupChangeKind.EDITOR_ACTIVE) {\n\t\t\t\tthis.handleActiveEditorChange(group);\n\t\t\t\tthis._onDidVisibleEditorsChange.fire();\n\t\t\t}\n\t\t}));\n\n\t\tgroupDisposables.add(group.onDidCloseEditor(event => {\n\t\t\tthis._onDidCloseEditor.fire(event);\n\t\t}));\n\n\t\tgroupDisposables.add(group.onDidOpenEditorFail(editor => {\n\t\t\tthis._onDidOpenEditorFail.fire({ editor, groupId: group.id });\n\t\t}));\n\n\t\tEvent.once(group.onWillDispose)(() => {\n\t\t\tdispose(groupDisposables);\n\t\t});\n\t}\n\n\t//#endregion\n\n\t//#region Visible Editors Change: Install file watchers for out of workspace resources that became visible\n\n\tprivate readonly activeOutOfWorkspaceWatchers = new ResourceMap<IDisposable>();\n\n\tprivate handleVisibleEditorsChange(): void {\n\t\tconst visibleOutOfWorkspaceResources = new ResourceMap<URI>();\n\n\t\tfor (const editor of this.visibleEditors) {\n\t\t\tconst resources = distinct(coalesce([\n\t\t\t\tEditorResourceAccessor.getCanonicalUri(editor, { supportSideBySide: SideBySideEditor.PRIMARY }),\n\t\t\t\tEditorResourceAccessor.getCanonicalUri(editor, { supportSideBySide: SideBySideEditor.SECONDARY })\n\t\t\t]), resource => resource.toString());\n\n\t\t\tfor (const resource of resources) {\n\t\t\t\tif (this.fileService.canHandleResource(resource) && !this.contextService.isInsideWorkspace(resource)) {\n\t\t\t\t\tvisibleOutOfWorkspaceResources.set(resource, resource);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Handle no longer visible out of workspace resources\n\t\tfor (const resource of this.activeOutOfWorkspaceWatchers.keys()) {\n\t\t\tif (!visibleOutOfWorkspaceResources.get(resource)) {\n\t\t\t\tdispose(this.activeOutOfWorkspaceWatchers.get(resource));\n\t\t\t\tthis.activeOutOfWorkspaceWatchers.delete(resource);\n\t\t\t}\n\t\t}\n\n\t\t// Handle newly visible out of workspace resources\n\t\tfor (const resource of visibleOutOfWorkspaceResources.keys()) {\n\t\t\tif (!this.activeOutOfWorkspaceWatchers.get(resource)) {\n\t\t\t\tconst disposable = this.fileService.watch(resource);\n\t\t\t\tthis.activeOutOfWorkspaceWatchers.set(resource, disposable);\n\t\t\t}\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region File Changes: Move & Deletes to move or close opend editors\n\n\tprivate onDidRunFileOperation(e: FileOperationEvent): void {\n\n\t\t// Handle moves specially when file is opened\n\t\tif (e.isOperation(FileOperation.MOVE)) {\n\t\t\tthis.handleMovedFile(e.resource, e.target.resource);\n\t\t}\n\n\t\t// Handle deletes\n\t\tif (e.isOperation(FileOperation.DELETE) || e.isOperation(FileOperation.MOVE)) {\n\t\t\tthis.handleDeletedFile(e.resource, false, e.target ? e.target.resource : undefined);\n\t\t}\n\t}\n\n\tprivate onDidFilesChange(e: FileChangesEvent): void {\n\t\tif (e.gotDeleted()) {\n\t\t\tthis.handleDeletedFile(e, true);\n\t\t}\n\t}\n\n\tprivate handleMovedFile(source: URI, target: URI): void {\n\t\tfor (const group of this.editorGroupService.groups) {\n\t\t\tlet replacements: (IResourceEditorReplacement | IEditorReplacement)[] = [];\n\n\t\t\tfor (const editor of group.editors) {\n\t\t\t\tconst resource = editor.resource;\n\t\t\t\tif (!resource || !this.uriIdentityService.extUri.isEqualOrParent(resource, source)) {\n\t\t\t\t\tcontinue; // not matching our resource\n\t\t\t\t}\n\n\t\t\t\t// Determine new resulting target resource\n\t\t\t\tlet targetResource: URI;\n\t\t\t\tif (this.uriIdentityService.extUri.isEqual(source, resource)) {\n\t\t\t\t\ttargetResource = target; // file got moved\n\t\t\t\t} else {\n\t\t\t\t\tconst index = indexOfPath(resource.path, source.path, this.uriIdentityService.extUri.ignorePathCasing(resource));\n\t\t\t\t\ttargetResource = joinPath(target, resource.path.substr(index + source.path.length + 1)); // parent folder got moved\n\t\t\t\t}\n\n\t\t\t\t// Delegate rename() to editor instance\n\t\t\t\tconst moveResult = editor.rename(group.id, targetResource);\n\t\t\t\tif (!moveResult) {\n\t\t\t\t\treturn; // not target - ignore\n\t\t\t\t}\n\n\t\t\t\tconst optionOverrides = {\n\t\t\t\t\tpreserveFocus: true,\n\t\t\t\t\tpinned: group.isPinned(editor),\n\t\t\t\t\tsticky: group.isSticky(editor),\n\t\t\t\t\tindex: group.getIndexOfEditor(editor),\n\t\t\t\t\tinactive: !group.isActive(editor)\n\t\t\t\t};\n\n\t\t\t\t// Construct a replacement with our extra options mixed in\n\t\t\t\tif (moveResult.editor instanceof EditorInput) {\n\t\t\t\t\treplacements.push({\n\t\t\t\t\t\teditor,\n\t\t\t\t\t\treplacement: moveResult.editor,\n\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t...moveResult.options,\n\t\t\t\t\t\t\t...optionOverrides\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treplacements.push({\n\t\t\t\t\t\teditor: { resource: editor.resource },\n\t\t\t\t\t\treplacement: {\n\t\t\t\t\t\t\t...moveResult.editor,\n\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t...moveResult.editor.options,\n\t\t\t\t\t\t\t\t...optionOverrides\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Apply replacements\n\t\t\tif (replacements.length) {\n\t\t\t\tthis.replaceEditors(replacements, group);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate closeOnFileDelete: boolean = false;\n\n\tprivate onConfigurationUpdated(configuration: IWorkbenchEditorConfiguration): void {\n\t\tif (typeof configuration.workbench?.editor?.closeOnFileDelete === 'boolean') {\n\t\t\tthis.closeOnFileDelete = configuration.workbench.editor.closeOnFileDelete;\n\t\t} else {\n\t\t\tthis.closeOnFileDelete = false; // default\n\t\t}\n\t}\n\n\tprivate handleDeletedFile(arg1: URI | FileChangesEvent, isExternal: boolean, movedTo?: URI): void {\n\t\tfor (const editor of this.getAllNonDirtyEditors({ includeUntitled: false, supportSideBySide: true })) {\n\t\t\t(async () => {\n\t\t\t\tconst resource = editor.resource;\n\t\t\t\tif (!resource) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Handle deletes in opened editors depending on:\n\t\t\t\t// - the user has not disabled the setting closeOnFileDelete\n\t\t\t\t// - the file change is local\n\t\t\t\t// - the input is  a file that is not resolved (we need to dispose because we cannot restore otherwise since we do not have the contents)\n\t\t\t\tif (this.closeOnFileDelete || !isExternal || (this.fileEditorInputFactory.isFileEditorInput(editor) && !editor.isResolved())) {\n\n\t\t\t\t\t// Do NOT close any opened editor that matches the resource path (either equal or being parent) of the\n\t\t\t\t\t// resource we move to (movedTo). Otherwise we would close a resource that has been renamed to the same\n\t\t\t\t\t// path but different casing.\n\t\t\t\t\tif (movedTo && this.uriIdentityService.extUri.isEqualOrParent(resource, movedTo)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet matches = false;\n\t\t\t\t\tif (arg1 instanceof FileChangesEvent) {\n\t\t\t\t\t\tmatches = arg1.contains(resource, FileChangeType.DELETED);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmatches = this.uriIdentityService.extUri.isEqualOrParent(resource, arg1);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!matches) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// We have received reports of users seeing delete events even though the file still\n\t\t\t\t\t// exists (network shares issue: https://github.com/microsoft/vscode/issues/13665).\n\t\t\t\t\t// Since we do not want to close an editor without reason, we have to check if the\n\t\t\t\t\t// file is really gone and not just a faulty file event.\n\t\t\t\t\t// This only applies to external file events, so we need to check for the isExternal\n\t\t\t\t\t// flag.\n\t\t\t\t\tlet exists = false;\n\t\t\t\t\tif (isExternal && this.fileService.canHandleResource(resource)) {\n\t\t\t\t\t\tawait timeout(100);\n\t\t\t\t\t\texists = await this.fileService.exists(resource);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!exists && !editor.isDisposed()) {\n\t\t\t\t\t\teditor.dispose();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})();\n\t\t}\n\t}\n\n\tprivate getAllNonDirtyEditors(options: { includeUntitled: boolean, supportSideBySide: boolean }): IEditorInput[] {\n\t\tconst editors: IEditorInput[] = [];\n\n\t\tfunction conditionallyAddEditor(editor: IEditorInput): void {\n\t\t\tif (editor.isUntitled() && !options.includeUntitled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (editor.isDirty()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\teditors.push(editor);\n\t\t}\n\n\t\tfor (const editor of this.editors) {\n\t\t\tif (options.supportSideBySide && editor instanceof SideBySideEditorInput) {\n\t\t\t\tconditionallyAddEditor(editor.primary);\n\t\t\t\tconditionallyAddEditor(editor.secondary);\n\t\t\t} else {\n\t\t\t\tconditionallyAddEditor(editor);\n\t\t\t}\n\t\t}\n\n\t\treturn editors;\n\t}\n\n\t//#endregion\n\n\t//#region Editor accessors\n\n\tprivate readonly editorsObserver = this._register(this.instantiationService.createInstance(EditorsObserver));\n\n\tget activeEditorPane(): IVisibleEditorPane | undefined {\n\t\treturn this.editorGroupService.activeGroup?.activeEditorPane;\n\t}\n\n\tget activeTextEditorControl(): ICodeEditor | IDiffEditor | undefined {\n\t\tconst activeEditorPane = this.activeEditorPane;\n\t\tif (activeEditorPane) {\n\t\t\tconst activeControl = activeEditorPane.getControl();\n\t\t\tif (isCodeEditor(activeControl) || isDiffEditor(activeControl)) {\n\t\t\t\treturn activeControl;\n\t\t\t}\n\t\t\tif (isCompositeEditor(activeControl) && isCodeEditor(activeControl.activeCodeEditor)) {\n\t\t\t\treturn activeControl.activeCodeEditor;\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tget activeTextEditorMode(): string | undefined {\n\t\tlet activeCodeEditor: ICodeEditor | undefined = undefined;\n\n\t\tconst activeTextEditorControl = this.activeTextEditorControl;\n\t\tif (isDiffEditor(activeTextEditorControl)) {\n\t\t\tactiveCodeEditor = activeTextEditorControl.getModifiedEditor();\n\t\t} else {\n\t\t\tactiveCodeEditor = activeTextEditorControl;\n\t\t}\n\n\t\treturn activeCodeEditor?.getModel()?.getLanguageIdentifier().language;\n\t}\n\n\tget count(): number {\n\t\treturn this.editorsObserver.count;\n\t}\n\n\tget editors(): IEditorInput[] {\n\t\treturn this.getEditors(EditorsOrder.SEQUENTIAL).map(({ editor }) => editor);\n\t}\n\n\tgetEditors(order: EditorsOrder, options?: { excludeSticky?: boolean }): readonly IEditorIdentifier[] {\n\t\tswitch (order) {\n\n\t\t\t// MRU\n\t\t\tcase EditorsOrder.MOST_RECENTLY_ACTIVE:\n\t\t\t\tif (options?.excludeSticky) {\n\t\t\t\t\treturn this.editorsObserver.editors.filter(({ groupId, editor }) => !this.editorGroupService.getGroup(groupId)?.isSticky(editor));\n\t\t\t\t}\n\n\t\t\t\treturn this.editorsObserver.editors;\n\n\t\t\t// Sequential\n\t\t\tcase EditorsOrder.SEQUENTIAL:\n\t\t\t\tconst editors: IEditorIdentifier[] = [];\n\n\t\t\t\tfor (const group of this.editorGroupService.getGroups(GroupsOrder.GRID_APPEARANCE)) {\n\t\t\t\t\teditors.push(...group.getEditors(EditorsOrder.SEQUENTIAL, options).map(editor => ({ editor, groupId: group.id })));\n\t\t\t\t}\n\n\t\t\t\treturn editors;\n\t\t}\n\t}\n\n\tget activeEditor(): IEditorInput | undefined {\n\t\tconst activeGroup = this.editorGroupService.activeGroup;\n\n\t\treturn activeGroup ? withNullAsUndefined(activeGroup.activeEditor) : undefined;\n\t}\n\n\tget visibleEditorPanes(): IVisibleEditorPane[] {\n\t\treturn coalesce(this.editorGroupService.groups.map(group => group.activeEditorPane));\n\t}\n\n\tget visibleTextEditorControls(): Array<ICodeEditor | IDiffEditor> {\n\t\tconst visibleTextEditorControls: Array<ICodeEditor | IDiffEditor> = [];\n\t\tfor (const visibleEditorPane of this.visibleEditorPanes) {\n\t\t\tconst control = visibleEditorPane.getControl();\n\t\t\tif (isCodeEditor(control) || isDiffEditor(control)) {\n\t\t\t\tvisibleTextEditorControls.push(control);\n\t\t\t}\n\t\t}\n\n\t\treturn visibleTextEditorControls;\n\t}\n\n\tget visibleEditors(): IEditorInput[] {\n\t\treturn coalesce(this.editorGroupService.groups.map(group => group.activeEditor));\n\t}\n\n\t//#endregion\n\n\t//#region editor overrides\n\n\tprivate readonly openEditorOverrides: IOpenEditorOverrideHandler[] = [];\n\n\toverrideOpenEditor(handler: IOpenEditorOverrideHandler): IDisposable {\n\t\tconst remove = insert(this.openEditorOverrides, handler);\n\n\t\treturn toDisposable(() => remove());\n\t}\n\n\tgetEditorOverrides(resource: URI, options: IEditorOptions | undefined, group: IEditorGroup | undefined): [IOpenEditorOverrideHandler, IOpenEditorOverrideEntry][] {\n\t\tconst overrides: [IOpenEditorOverrideHandler, IOpenEditorOverrideEntry][] = [];\n\n\t\t// Collect contributed editor open overrides\n\t\tfor (const openEditorOverride of this.openEditorOverrides) {\n\t\t\tif (typeof openEditorOverride.getEditorOverrides === 'function') {\n\t\t\t\ttry {\n\t\t\t\t\toverrides.push(...openEditorOverride.getEditorOverrides(resource, options, group).map(val => [openEditorOverride, val] as [IOpenEditorOverrideHandler, IOpenEditorOverrideEntry]));\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.logService.error(`Unexpected error getting editor overrides: ${error}`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Ensure the default one is always present\n\t\tif (!overrides.some(([, entry]) => entry.id === DEFAULT_EDITOR_ASSOCIATION.id)) {\n\t\t\toverrides.unshift(this.getDefaultEditorOverride(resource));\n\t\t}\n\n\t\treturn overrides;\n\t}\n\n\tprivate registerDefaultOverride(): void {\n\t\tthis._register(this.editorOverrideService.registerContributionPoint(\n\t\t\t'*',\n\t\t\t{\n\t\t\t\tid: DEFAULT_EDITOR_ASSOCIATION.id,\n\t\t\t\tlabel: DEFAULT_EDITOR_ASSOCIATION.displayName,\n\t\t\t\tdetail: DEFAULT_EDITOR_ASSOCIATION.providerDisplayName,\n\t\t\t\tdescribes: (currentEditor) => this.fileEditorInputFactory.isFileEditorInput(currentEditor) && currentEditor.matches(this.activeEditor),\n\t\t\t\tpriority: ContributedEditorPriority.builtin\n\t\t\t},\n\t\t\t{},\n\t\t\tresource => ({ editor: this.createEditorInput({ resource }) }),\n\t\t\tdiffEditor => ({ editor: diffEditor })\n\t\t));\n\t}\n\n\tprivate getDefaultEditorOverride(resource: URI): [IOpenEditorOverrideHandler, IOpenEditorOverrideEntry] {\n\t\treturn [\n\t\t\t{\n\t\t\t\topen: (editor: IEditorInput, options: IEditorOptions | ITextEditorOptions | undefined, group: IEditorGroup) => {\n\t\t\t\t\tconst resource = EditorResourceAccessor.getOriginalUri(editor);\n\t\t\t\t\tif (!resource) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst fileEditorInput = this.createEditorInput({ resource, forceFile: true });\n\t\t\t\t\tconst textOptions: IEditorOptions | ITextEditorOptions = { ...options, override: EditorOverride.DISABLED };\n\t\t\t\t\treturn {\n\t\t\t\t\t\toverride: (async () => {\n\n\t\t\t\t\t\t\t// Try to replace existing editors for resource\n\t\t\t\t\t\t\tconst existingEditor = firstOrDefault(this.findEditors(resource, group));\n\t\t\t\t\t\t\tif (existingEditor && !fileEditorInput.matches(existingEditor)) {\n\t\t\t\t\t\t\t\tawait this.replaceEditors([{\n\t\t\t\t\t\t\t\t\teditor: existingEditor,\n\t\t\t\t\t\t\t\t\treplacement: fileEditorInput,\n\t\t\t\t\t\t\t\t\tforceReplaceDirty: existingEditor.resource?.scheme === Schemas.untitled,\n\t\t\t\t\t\t\t\t\toptions: options ? EditorOptions.create(options) : undefined,\n\t\t\t\t\t\t\t\t}], group);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn this.openEditor(fileEditorInput, textOptions, group);\n\t\t\t\t\t\t})()\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: DEFAULT_EDITOR_ASSOCIATION.id,\n\t\t\t\tlabel: DEFAULT_EDITOR_ASSOCIATION.displayName,\n\t\t\t\tdetail: DEFAULT_EDITOR_ASSOCIATION.providerDisplayName,\n\t\t\t\tactive: this.fileEditorInputFactory.isFileEditorInput(this.activeEditor) && isEqual(this.activeEditor.resource, resource),\n\t\t\t}\n\t\t];\n\t}\n\n\tprivate doOverrideOpenEditor(editor: IEditorInput, options: IEditorOptions | undefined, group: IEditorGroup): Promise<IEditorPane | undefined> | undefined {\n\t\tfor (const openEditorOverride of this.openEditorOverrides) {\n\t\t\tconst result = openEditorOverride.open(editor, options, group);\n\t\t\tconst override = result?.override;\n\t\t\tif (override) {\n\t\t\t\treturn override;\n\t\t\t}\n\t\t}\n\n\t\treturn;\n\t}\n\n\t//#endregion\n\n\t//#region openEditor()\n\n\topenEditor(editor: IEditorInput, options?: IEditorOptions | ITextEditorOptions, group?: OpenInEditorGroup): Promise<IEditorPane | undefined>;\n\topenEditor(editor: IResourceEditorInput | IUntitledTextResourceEditorInput, group?: OpenInEditorGroup): Promise<ITextEditorPane | undefined>;\n\topenEditor(editor: IResourceDiffEditorInput, group?: OpenInEditorGroup): Promise<ITextDiffEditorPane | undefined>;\n\tasync openEditor(editor: IEditorInput | IResourceEditorInputType, optionsOrGroup?: IEditorOptions | ITextEditorOptions | OpenInEditorGroup, group?: OpenInEditorGroup): Promise<IEditorPane | undefined> {\n\t\tconst result = this.doResolveEditorOpenRequest(editor, optionsOrGroup, group);\n\t\tif (result) {\n\t\t\tconst [resolvedGroup, resolvedEditor, resolvedOptions] = result;\n\n\t\t\t// Override handling: pick editor or open specific\n\t\t\tif (resolvedOptions?.override === EditorOverride.PICK || typeof resolvedOptions?.override === 'string') {\n\t\t\t\tconst resolvedInputWithOptionsAndGroup = await this.editorOverrideService.resolveEditorOverride(resolvedEditor, resolvedOptions, resolvedGroup);\n\t\t\t\tif (!resolvedInputWithOptionsAndGroup) {\n\t\t\t\t\treturn undefined; // no editor was picked or registered for the identifier\n\t\t\t\t}\n\n\t\t\t\treturn (resolvedInputWithOptionsAndGroup.group ?? resolvedGroup).openEditor(resolvedInputWithOptionsAndGroup.editor, resolvedInputWithOptionsAndGroup.options ?? resolvedOptions);\n\t\t\t}\n\n\t\t\t// Override handling: ask providers to override\n\t\t\tif (resolvedOptions?.override !== EditorOverride.DISABLED) {\n\t\t\t\t// TODO@lramos15 this will get cleaned up soon, but since the override\n\t\t\t\t// service no longer uses the override flow we must check that\n\t\t\t\tconst resolvedInputWithOptionsAndGroup = await this.editorOverrideService.resolveEditorOverride(resolvedEditor, resolvedOptions, resolvedGroup);\n\t\t\t\t// If we didn't override try the legacy overrides\n\t\t\t\tif (!resolvedInputWithOptionsAndGroup || resolvedEditor.matches(resolvedInputWithOptionsAndGroup.editor)) {\n\t\t\t\t\tconst override = this.doOverrideOpenEditor(resolvedEditor, resolvedOptions, resolvedGroup);\n\t\t\t\t\tif (override) {\n\t\t\t\t\t\treturn override;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\treturn (resolvedInputWithOptionsAndGroup.group ?? resolvedGroup).openEditor(resolvedInputWithOptionsAndGroup.editor, resolvedInputWithOptionsAndGroup.options ?? resolvedOptions);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Override handling: disabled\n\t\t\treturn resolvedGroup.openEditor(resolvedEditor, resolvedOptions);\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tdoResolveEditorOpenRequest(editor: IEditorInput | IResourceEditorInputType, optionsOrGroup?: IEditorOptions | ITextEditorOptions | OpenInEditorGroup, group?: OpenInEditorGroup): [IEditorGroup, EditorInput, EditorOptions | undefined] | undefined {\n\t\tlet resolvedGroup: IEditorGroup | undefined;\n\t\tlet candidateGroup: OpenInEditorGroup | undefined;\n\n\t\tlet typedEditor: EditorInput | undefined;\n\t\tlet typedOptions: EditorOptions | undefined;\n\n\t\t// Typed Editor Support\n\t\tif (editor instanceof EditorInput) {\n\t\t\ttypedEditor = editor;\n\t\t\ttypedOptions = this.toOptions(optionsOrGroup as IEditorOptions);\n\n\t\t\tcandidateGroup = group;\n\t\t\tresolvedGroup = this.findTargetGroup(typedEditor, typedOptions, candidateGroup);\n\t\t}\n\n\t\t// Untyped Text Editor Support\n\t\telse {\n\t\t\tconst textInput = editor as IResourceEditorInputType;\n\t\t\ttypedEditor = this.createEditorInput(textInput);\n\t\t\tif (typedEditor) {\n\t\t\t\ttypedOptions = TextEditorOptions.from(textInput);\n\n\t\t\t\tcandidateGroup = optionsOrGroup as OpenInEditorGroup;\n\t\t\t\tresolvedGroup = this.findTargetGroup(typedEditor, typedOptions, candidateGroup);\n\t\t\t}\n\t\t}\n\n\t\tif (typedEditor && resolvedGroup) {\n\t\t\tif (\n\t\t\t\tthis.editorGroupService.activeGroup !== resolvedGroup && \t// only if target group is not already active\n\t\t\t\ttypedOptions && !typedOptions.inactive &&\t\t\t\t\t// never for inactive editors\n\t\t\t\ttypedOptions.preserveFocus &&\t\t\t\t\t\t\t\t// only if preserveFocus\n\t\t\t\ttypeof typedOptions.activation !== 'number' &&\t\t\t\t// only if activation is not already defined (either true or false)\n\t\t\t\tcandidateGroup !== SIDE_GROUP\t\t\t\t\t\t\t\t// never for the SIDE_GROUP\n\t\t\t) {\n\t\t\t\t// If the resolved group is not the active one, we typically\n\t\t\t\t// want the group to become active. There are a few cases\n\t\t\t\t// where we stay away from encorcing this, e.g. if the caller\n\t\t\t\t// is already providing `activation`.\n\t\t\t\t//\n\t\t\t\t// Specifically for historic reasons we do not activate a\n\t\t\t\t// group is it is opened as `SIDE_GROUP` with `preserveFocus:true`.\n\t\t\t\t// repeated Alt-clicking of files in the explorer always open\n\t\t\t\t// into the same side group and not cause a group to be created each time.\n\t\t\t\ttypedOptions.overwrite({ activation: EditorActivation.ACTIVATE });\n\t\t\t}\n\n\t\t\treturn [resolvedGroup, typedEditor, typedOptions];\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate findTargetGroup(editor: IEditorInput, options?: IEditorOptions, group?: OpenInEditorGroup): IEditorGroup {\n\t\tlet targetGroup: IEditorGroup | undefined;\n\n\t\t// Group: Instance of Group\n\t\tif (group && typeof group !== 'number') {\n\t\t\ttargetGroup = group;\n\t\t}\n\n\t\t// Group: Side by Side\n\t\telse if (group === SIDE_GROUP) {\n\t\t\ttargetGroup = this.findSideBySideGroup();\n\t\t}\n\n\t\t// Group: Specific Group\n\t\telse if (typeof group === 'number' && group >= 0) {\n\t\t\ttargetGroup = this.editorGroupService.getGroup(group);\n\t\t}\n\n\t\t// Group: Unspecified without a specific index to open\n\t\telse if (!options || typeof options.index !== 'number') {\n\t\t\tconst groupsByLastActive = this.editorGroupService.getGroups(GroupsOrder.MOST_RECENTLY_ACTIVE);\n\n\t\t\t// Respect option to reveal an editor if it is already visible in any group\n\t\t\tif (options?.revealIfVisible) {\n\t\t\t\tfor (const group of groupsByLastActive) {\n\t\t\t\t\tif (group.isActive(editor)) {\n\t\t\t\t\t\ttargetGroup = group;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Respect option to reveal an editor if it is open (not necessarily visible)\n\t\t\t// Still prefer to reveal an editor in a group where the editor is active though.\n\t\t\tif (!targetGroup) {\n\t\t\t\tif (options?.revealIfOpened || this.configurationService.getValue<boolean>('workbench.editor.revealIfOpen')) {\n\t\t\t\t\tlet groupWithInputActive: IEditorGroup | undefined = undefined;\n\t\t\t\t\tlet groupWithInputOpened: IEditorGroup | undefined = undefined;\n\n\t\t\t\t\tfor (const group of groupsByLastActive) {\n\t\t\t\t\t\tif (group.contains(editor)) {\n\t\t\t\t\t\t\tif (!groupWithInputOpened) {\n\t\t\t\t\t\t\t\tgroupWithInputOpened = group;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (!groupWithInputActive && group.isActive(editor)) {\n\t\t\t\t\t\t\t\tgroupWithInputActive = group;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (groupWithInputOpened && groupWithInputActive) {\n\t\t\t\t\t\t\tbreak; // we found all groups we wanted\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prefer a target group where the input is visible\n\t\t\t\t\ttargetGroup = groupWithInputActive || groupWithInputOpened;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Fallback to active group if target not valid\n\t\tif (!targetGroup) {\n\t\t\ttargetGroup = this.editorGroupService.activeGroup;\n\t\t}\n\n\t\treturn targetGroup;\n\t}\n\n\tprivate findSideBySideGroup(): IEditorGroup {\n\t\tconst direction = preferredSideBySideGroupDirection(this.configurationService);\n\n\t\tlet neighbourGroup = this.editorGroupService.findGroup({ direction });\n\t\tif (!neighbourGroup) {\n\t\t\tneighbourGroup = this.editorGroupService.addGroup(this.editorGroupService.activeGroup, direction);\n\t\t}\n\n\t\treturn neighbourGroup;\n\t}\n\n\tprivate toOptions(options?: IEditorOptions | ITextEditorOptions | EditorOptions): EditorOptions {\n\t\tif (!options || options instanceof EditorOptions) {\n\t\t\treturn options as EditorOptions;\n\t\t}\n\n\t\tconst textOptions: ITextEditorOptions = options;\n\t\tif (textOptions.selection || textOptions.viewState) {\n\t\t\treturn TextEditorOptions.create(options);\n\t\t}\n\n\t\treturn EditorOptions.create(options);\n\t}\n\n\t//#endregion\n\n\t//#region openEditors()\n\n\topenEditors(editors: IEditorInputWithOptions[], group?: OpenInEditorGroup): Promise<IEditorPane[]>;\n\topenEditors(editors: IResourceEditorInputType[], group?: OpenInEditorGroup): Promise<IEditorPane[]>;\n\tasync openEditors(editors: Array<IEditorInputWithOptions | IResourceEditorInputType>, group?: OpenInEditorGroup): Promise<IEditorPane[]> {\n\n\t\t// Convert to typed editors and options\n\t\tconst typedEditors: IEditorInputWithOptions[] = editors.map(editor => {\n\t\t\tif (isEditorInputWithOptions(editor)) {\n\t\t\t\treturn editor;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\teditor: this.createEditorInput(editor),\n\t\t\t\toptions: TextEditorOptions.from(editor)\n\t\t\t};\n\t\t});\n\n\t\t// Find target groups to open\n\t\tconst mapGroupToEditorsCandidates = new Map<IEditorGroup, IEditorInputWithOptions[]>();\n\t\tif (group === SIDE_GROUP) {\n\t\t\tmapGroupToEditorsCandidates.set(this.findSideBySideGroup(), typedEditors);\n\t\t} else {\n\t\t\tfor (const typedEditor of typedEditors) {\n\t\t\t\tconst targetGroup = this.findTargetGroup(typedEditor.editor, typedEditor.options, group);\n\n\t\t\t\tlet targetGroupEditors = mapGroupToEditorsCandidates.get(targetGroup);\n\t\t\t\tif (!targetGroupEditors) {\n\t\t\t\t\ttargetGroupEditors = [];\n\t\t\t\t\tmapGroupToEditorsCandidates.set(targetGroup, targetGroupEditors);\n\t\t\t\t}\n\n\t\t\t\ttargetGroupEditors.push(typedEditor);\n\t\t\t}\n\t\t}\n\n\t\t// Resolve overrides\n\t\tconst mapGroupToEditors = new Map<IEditorGroup, IEditorInputWithOptions[]>();\n\t\tfor (const [group, editorsWithOptions] of mapGroupToEditorsCandidates) {\n\t\t\tfor (const { editor, options } of editorsWithOptions) {\n\t\t\t\tlet editorOverride: IEditorInputWithOptionsAndGroup | undefined;\n\t\t\t\tif (options?.override !== EditorOverride.DISABLED) {\n\t\t\t\t\teditorOverride = await this.editorOverrideService.resolveEditorOverride(editor, options, group);\n\t\t\t\t}\n\n\t\t\t\tconst targetGroup = editorOverride?.group ?? group;\n\t\t\t\tlet targetGroupEditors = mapGroupToEditors.get(targetGroup);\n\t\t\t\tif (!targetGroupEditors) {\n\t\t\t\t\ttargetGroupEditors = [];\n\t\t\t\t\tmapGroupToEditors.set(targetGroup, targetGroupEditors);\n\t\t\t\t}\n\n\t\t\t\ttargetGroupEditors.push(editorOverride ?? { editor, options });\n\t\t\t}\n\t\t}\n\n\t\t// Open in target groups\n\t\tconst result: Promise<IEditorPane | null>[] = [];\n\t\tfor (const [group, editorsWithOptions] of mapGroupToEditors) {\n\t\t\tresult.push(group.openEditors(editorsWithOptions));\n\t\t}\n\n\t\treturn coalesce(await Promises.settled(result));\n\t}\n\n\t//#endregion\n\n\t//#region isOpened()\n\n\tisOpened(editor: IResourceEditorInputIdentifier): boolean {\n\t\treturn this.editorsObserver.hasEditor({\n\t\t\tresource: this.asCanonicalEditorResource(editor.resource),\n\t\t\ttypeId: editor.typeId\n\t\t});\n\t}\n\n\t//#endregion\n\n\t//#region findEditors()\n\n\tfindEditors(resource: URI): readonly IEditorIdentifier[];\n\tfindEditors(editor: IResourceEditorInputIdentifier): readonly IEditorIdentifier[];\n\tfindEditors(resource: URI, group: IEditorGroup | GroupIdentifier): readonly IEditorInput[];\n\tfindEditors(editor: IResourceEditorInputIdentifier, group: IEditorGroup | GroupIdentifier): IEditorInput | undefined;\n\tfindEditors(arg1: URI | IResourceEditorInputIdentifier, arg2?: IEditorGroup | GroupIdentifier): readonly IEditorIdentifier[] | readonly IEditorInput[] | IEditorInput | undefined;\n\tfindEditors(arg1: URI | IResourceEditorInputIdentifier, arg2?: IEditorGroup | GroupIdentifier): readonly IEditorIdentifier[] | readonly IEditorInput[] | IEditorInput | undefined {\n\t\tconst resource = URI.isUri(arg1) ? arg1 : arg1.resource;\n\t\tconst typeId = URI.isUri(arg1) ? undefined : arg1.typeId;\n\n\t\t// Do a quick check for the resource via the editor observer\n\t\t// which is a very efficient way to find an editor by resource\n\t\tif (!this.editorsObserver.hasEditors(resource)) {\n\t\t\tif (URI.isUri(arg1) || isUndefined(arg2)) {\n\t\t\t\treturn [];\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Search only in specific group\n\t\tif (!isUndefined(arg2)) {\n\t\t\tconst targetGroup = typeof arg2 === 'number' ? this.editorGroupService.getGroup(arg2) : arg2;\n\n\t\t\t// Resource provided: result is an array\n\t\t\tif (URI.isUri(arg1)) {\n\t\t\t\tif (!targetGroup) {\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\n\t\t\t\treturn targetGroup.findEditors(resource);\n\t\t\t}\n\n\t\t\t// Editor identifier provided, result is single\n\t\t\telse {\n\t\t\t\tif (!targetGroup) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\tconst editors = targetGroup.findEditors(resource);\n\t\t\t\tfor (const editor of editors) {\n\t\t\t\t\tif (editor.typeId === typeId) {\n\t\t\t\t\t\treturn editor;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}\n\n\t\t// Search across all groups in MRU order\n\t\telse {\n\t\t\tconst result: IEditorIdentifier[] = [];\n\n\t\t\tfor (const group of this.editorGroupService.getGroups(GroupsOrder.MOST_RECENTLY_ACTIVE)) {\n\t\t\t\tconst editors: IEditorInput[] = [];\n\n\t\t\t\t// Resource provided: result is an array\n\t\t\t\tif (URI.isUri(arg1)) {\n\t\t\t\t\teditors.push(...this.findEditors(arg1, group));\n\t\t\t\t}\n\n\t\t\t\t// Editor identifier provided, result is single\n\t\t\t\telse {\n\t\t\t\t\tconst editor = this.findEditors(arg1, group);\n\t\t\t\t\tif (editor) {\n\t\t\t\t\t\teditors.push(editor);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tresult.push(...editors.map(editor => ({ editor, groupId: group.id })));\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region replaceEditors()\n\n\tasync replaceEditors(editors: IResourceEditorReplacement[], group: IEditorGroup | GroupIdentifier): Promise<void>;\n\tasync replaceEditors(editors: IEditorReplacement[], group: IEditorGroup | GroupIdentifier): Promise<void>;\n\tasync replaceEditors(editors: Array<IEditorReplacement | IResourceEditorReplacement>, group: IEditorGroup | GroupIdentifier): Promise<void> {\n\t\tconst typedEditors: IEditorReplacement[] = [];\n\t\tconst targetGroup = typeof group === 'number' ? this.editorGroupService.getGroup(group) : group;\n\n\t\tfor (const replaceEditorArg of editors) {\n\t\t\tif (replaceEditorArg.editor instanceof EditorInput) {\n\t\t\t\tconst replacementArg = replaceEditorArg as IEditorReplacement;\n\t\t\t\tif (replacementArg.options?.override !== EditorOverride.DISABLED && targetGroup) {\n\t\t\t\t\tconst override = await this.editorOverrideService.resolveEditorOverride(replacementArg.replacement, replacementArg.options, targetGroup);\n\t\t\t\t\treplacementArg.options = override?.options ?? replacementArg.options;\n\t\t\t\t\treplacementArg.replacement = override?.editor ?? replacementArg.replacement;\n\t\t\t\t}\n\t\t\t\ttypedEditors.push({\n\t\t\t\t\teditor: replacementArg.editor,\n\t\t\t\t\treplacement: replacementArg.replacement,\n\t\t\t\t\tforceReplaceDirty: replacementArg.forceReplaceDirty,\n\t\t\t\t\toptions: this.toOptions(replacementArg.options)\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconst replacementArg = replaceEditorArg as IResourceEditorReplacement;\n\n\t\t\t\ttypedEditors.push({\n\t\t\t\t\teditor: this.createEditorInput(replacementArg.editor),\n\t\t\t\t\treplacement: this.createEditorInput(replacementArg.replacement),\n\t\t\t\t\toptions: this.toOptions(replacementArg.replacement.options)\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (targetGroup) {\n\t\t\treturn targetGroup.replaceEditors(typedEditors);\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region createEditorInput()\n\n\tprivate readonly editorInputCache = new ResourceMap<CachedEditorInput>();\n\n\tcreateEditorInput(input: IEditorInputWithOptions | IEditorInput | IResourceEditorInputType): EditorInput {\n\n\t\t// Typed Editor Input Support (EditorInput)\n\t\tif (input instanceof EditorInput) {\n\t\t\treturn input;\n\t\t}\n\n\t\t// Typed Editor Input Support (IEditorInputWithOptions)\n\t\tconst editorInputWithOptions = input as IEditorInputWithOptions;\n\t\tif (editorInputWithOptions.editor instanceof EditorInput) {\n\t\t\treturn editorInputWithOptions.editor;\n\t\t}\n\n\t\t// Diff Editor Support\n\t\tconst resourceDiffInput = input as IResourceDiffEditorInput;\n\t\tif (resourceDiffInput.leftResource && resourceDiffInput.rightResource) {\n\t\t\tconst leftInput = this.createEditorInput({ resource: resourceDiffInput.leftResource, forceFile: resourceDiffInput.forceFile });\n\t\t\tconst rightInput = this.createEditorInput({ resource: resourceDiffInput.rightResource, forceFile: resourceDiffInput.forceFile });\n\n\t\t\treturn this.instantiationService.createInstance(DiffEditorInput,\n\t\t\t\tresourceDiffInput.label,\n\t\t\t\tresourceDiffInput.description,\n\t\t\t\tleftInput,\n\t\t\t\trightInput,\n\t\t\t\tundefined\n\t\t\t);\n\t\t}\n\n\t\t// Untitled file support\n\t\tconst untitledInput = input as IUntitledTextResourceEditorInput;\n\t\tif (untitledInput.forceUntitled || !untitledInput.resource || (untitledInput.resource && untitledInput.resource.scheme === Schemas.untitled)) {\n\t\t\tconst untitledOptions = {\n\t\t\t\tmode: untitledInput.mode,\n\t\t\t\tinitialValue: untitledInput.contents,\n\t\t\t\tencoding: untitledInput.encoding\n\t\t\t};\n\n\t\t\t// Untitled resource: use as hint for an existing untitled editor\n\t\t\tlet untitledModel: IUntitledTextEditorModel;\n\t\t\tif (untitledInput.resource?.scheme === Schemas.untitled) {\n\t\t\t\tuntitledModel = this.untitledTextEditorService.create({ untitledResource: untitledInput.resource, ...untitledOptions });\n\t\t\t}\n\n\t\t\t// Other resource: use as hint for associated filepath\n\t\t\telse {\n\t\t\t\tuntitledModel = this.untitledTextEditorService.create({ associatedResource: untitledInput.resource, ...untitledOptions });\n\t\t\t}\n\n\t\t\treturn this.createOrGetCached(untitledModel.resource, () => {\n\n\t\t\t\t// Factory function for new untitled editor\n\t\t\t\tconst input = this.instantiationService.createInstance(UntitledTextEditorInput, untitledModel);\n\n\t\t\t\t// We dispose the untitled model once the editor\n\t\t\t\t// is being disposed. Even though we may have not\n\t\t\t\t// created the model initially, the lifecycle for\n\t\t\t\t// untitled is tightly coupled with the editor\n\t\t\t\t// lifecycle for now.\n\t\t\t\tEvent.once(input.onWillDispose)(() => untitledModel.dispose());\n\n\t\t\t\treturn input;\n\t\t\t}) as EditorInput;\n\t\t}\n\n\t\t// Resource Editor Support\n\t\tconst resourceEditorInput = input as IResourceEditorInput;\n\t\tif (resourceEditorInput.resource instanceof URI) {\n\n\t\t\t// Derive the label from the path if not provided explicitly\n\t\t\tconst label = resourceEditorInput.label || basename(resourceEditorInput.resource);\n\n\t\t\t// We keep track of the preferred resource this input is to be created\n\t\t\t// with but it may be different from the canonical resource (see below)\n\t\t\tconst preferredResource = resourceEditorInput.resource;\n\n\t\t\t// From this moment on, only operate on the canonical resource\n\t\t\t// to ensure we reduce the chance of opening the same resource\n\t\t\t// with different resource forms (e.g. path casing on Windows)\n\t\t\tconst canonicalResource = this.asCanonicalEditorResource(preferredResource);\n\n\t\t\treturn this.createOrGetCached(canonicalResource, () => {\n\n\t\t\t\t// File\n\t\t\t\tif (resourceEditorInput.forceFile || this.fileService.canHandleResource(canonicalResource)) {\n\t\t\t\t\treturn this.fileEditorInputFactory.createFileEditorInput(canonicalResource, preferredResource, resourceEditorInput.label, resourceEditorInput.description, resourceEditorInput.encoding, resourceEditorInput.mode, this.instantiationService);\n\t\t\t\t}\n\n\t\t\t\t// Resource\n\t\t\t\treturn this.instantiationService.createInstance(ResourceEditorInput, canonicalResource, resourceEditorInput.label, resourceEditorInput.description, resourceEditorInput.mode);\n\t\t\t}, cachedInput => {\n\n\t\t\t\t// Untitled\n\t\t\t\tif (cachedInput instanceof UntitledTextEditorInput) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Files\n\t\t\t\telse if (!(cachedInput instanceof ResourceEditorInput)) {\n\t\t\t\t\tcachedInput.setPreferredResource(preferredResource);\n\n\t\t\t\t\tif (resourceEditorInput.label) {\n\t\t\t\t\t\tcachedInput.setPreferredName(resourceEditorInput.label);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (resourceEditorInput.description) {\n\t\t\t\t\t\tcachedInput.setPreferredDescription(resourceEditorInput.description);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (resourceEditorInput.encoding) {\n\t\t\t\t\t\tcachedInput.setPreferredEncoding(resourceEditorInput.encoding);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (resourceEditorInput.mode) {\n\t\t\t\t\t\tcachedInput.setPreferredMode(resourceEditorInput.mode);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Resources\n\t\t\t\telse {\n\t\t\t\t\tif (label) {\n\t\t\t\t\t\tcachedInput.setName(label);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (resourceEditorInput.description) {\n\t\t\t\t\t\tcachedInput.setDescription(resourceEditorInput.description);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (resourceEditorInput.mode) {\n\t\t\t\t\t\tcachedInput.setPreferredMode(resourceEditorInput.mode);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}) as EditorInput;\n\t\t}\n\n\t\tthrow new Error('Unknown input type');\n\t}\n\n\tprivate _modelService: IModelService | undefined = undefined;\n\tprivate get modelService(): IModelService | undefined {\n\t\tif (!this._modelService) {\n\t\t\tthis._modelService = this.instantiationService.invokeFunction(accessor => accessor.get(IModelService));\n\t\t}\n\n\t\treturn this._modelService;\n\t}\n\n\tprivate asCanonicalEditorResource(resource: URI): URI {\n\t\tconst canonicalResource: URI = this.uriIdentityService.asCanonicalUri(resource);\n\n\t\t// In the unlikely case that a model exists for the original resource but\n\t\t// differs from the canonical resource, we print a warning as this means\n\t\t// the model will not be able to be opened as editor.\n\t\tif (!isEqual(resource, canonicalResource) && this.modelService?.getModel(resource)) {\n\t\t\tthis.logService.warn(`EditorService: a model exists for a resource that is not canonical: ${resource.toString(true)}`);\n\t\t}\n\n\t\treturn canonicalResource;\n\t}\n\n\tprivate createOrGetCached(resource: URI, factoryFn: () => CachedEditorInput, cachedFn?: (input: CachedEditorInput) => void): CachedEditorInput {\n\n\t\t// Return early if already cached\n\t\tlet input = this.editorInputCache.get(resource);\n\t\tif (input) {\n\t\t\tif (cachedFn) {\n\t\t\t\tcachedFn(input);\n\t\t\t}\n\n\t\t\treturn input;\n\t\t}\n\n\t\t// Otherwise create and add to cache\n\t\tinput = factoryFn();\n\t\tthis.editorInputCache.set(resource, input);\n\t\tEvent.once(input.onWillDispose)(() => this.editorInputCache.delete(resource));\n\n\t\treturn input;\n\t}\n\n\t//#endregion\n\n\t//#region save/revert\n\n\tasync save(editors: IEditorIdentifier | IEditorIdentifier[], options?: ISaveEditorsOptions): Promise<boolean> {\n\n\t\t// Convert to array\n\t\tif (!Array.isArray(editors)) {\n\t\t\teditors = [editors];\n\t\t}\n\n\t\t// Make sure to not save the same editor multiple times\n\t\t// by using the `matches()` method to find duplicates\n\t\tconst uniqueEditors = this.getUniqueEditors(editors);\n\n\t\t// Split editors up into a bucket that is saved in parallel\n\t\t// and sequentially. Unless \"Save As\", all non-untitled editors\n\t\t// can be saved in parallel to speed up the operation. Remaining\n\t\t// editors are potentially bringing up some UI and thus run\n\t\t// sequentially.\n\t\tconst editorsToSaveParallel: IEditorIdentifier[] = [];\n\t\tconst editorsToSaveSequentially: IEditorIdentifier[] = [];\n\t\tif (options?.saveAs) {\n\t\t\teditorsToSaveSequentially.push(...uniqueEditors);\n\t\t} else {\n\t\t\tfor (const { groupId, editor } of uniqueEditors) {\n\t\t\t\tif (editor.isUntitled()) {\n\t\t\t\t\teditorsToSaveSequentially.push({ groupId, editor });\n\t\t\t\t} else {\n\t\t\t\t\teditorsToSaveParallel.push({ groupId, editor });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Editors to save in parallel\n\t\tconst saveResults = await Promises.settled(editorsToSaveParallel.map(({ groupId, editor }) => {\n\n\t\t\t// Use save as a hint to pin the editor if used explicitly\n\t\t\tif (options?.reason === SaveReason.EXPLICIT) {\n\t\t\t\tthis.editorGroupService.getGroup(groupId)?.pinEditor(editor);\n\t\t\t}\n\n\t\t\t// Save\n\t\t\treturn editor.save(groupId, options);\n\t\t}));\n\n\t\t// Editors to save sequentially\n\t\tfor (const { groupId, editor } of editorsToSaveSequentially) {\n\t\t\tif (editor.isDisposed()) {\n\t\t\t\tcontinue; // might have been disposed from the save already\n\t\t\t}\n\n\t\t\t// Preserve view state by opening the editor first if the editor\n\t\t\t// is untitled or we \"Save As\". This also allows the user to review\n\t\t\t// the contents of the editor before making a decision.\n\t\t\tlet viewState: IEditorViewState | undefined = undefined;\n\t\t\tconst editorPane = await this.openEditor(editor, undefined, groupId);\n\t\t\tif (isTextEditorPane(editorPane)) {\n\t\t\t\tviewState = editorPane.getViewState();\n\t\t\t}\n\n\t\t\tconst result = options?.saveAs ? await editor.saveAs(groupId, options) : await editor.save(groupId, options);\n\t\t\tsaveResults.push(result);\n\n\t\t\tif (!result) {\n\t\t\t\tbreak; // failed or cancelled, abort\n\t\t\t}\n\n\t\t\t// Replace editor preserving viewstate (either across all groups or\n\t\t\t// only selected group) if the resulting editor is different from the\n\t\t\t// current one.\n\t\t\tif (!result.matches(editor)) {\n\t\t\t\tconst targetGroups = editor.isUntitled() ? this.editorGroupService.groups.map(group => group.id) /* untitled replaces across all groups */ : [groupId];\n\t\t\t\tfor (const group of targetGroups) {\n\t\t\t\t\tawait this.replaceEditors([{ editor, replacement: result, options: { pinned: true, viewState } }], group);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn saveResults.every(result => !!result);\n\t}\n\n\tsaveAll(options?: ISaveAllEditorsOptions): Promise<boolean> {\n\t\treturn this.save(this.getAllDirtyEditors(options), options);\n\t}\n\n\tasync revert(editors: IEditorIdentifier | IEditorIdentifier[], options?: IRevertOptions): Promise<boolean> {\n\n\t\t// Convert to array\n\t\tif (!Array.isArray(editors)) {\n\t\t\teditors = [editors];\n\t\t}\n\n\t\t// Make sure to not revert the same editor multiple times\n\t\t// by using the `matches()` method to find duplicates\n\t\tconst uniqueEditors = this.getUniqueEditors(editors);\n\n\t\tawait Promises.settled(uniqueEditors.map(async ({ groupId, editor }) => {\n\n\t\t\t// Use revert as a hint to pin the editor\n\t\t\tthis.editorGroupService.getGroup(groupId)?.pinEditor(editor);\n\n\t\t\treturn editor.revert(groupId, options);\n\t\t}));\n\n\t\treturn !uniqueEditors.some(({ editor }) => editor.isDirty());\n\t}\n\n\tasync revertAll(options?: IRevertAllEditorsOptions): Promise<boolean> {\n\t\treturn this.revert(this.getAllDirtyEditors(options), options);\n\t}\n\n\tprivate getAllDirtyEditors(options?: IBaseSaveRevertAllEditorOptions): IEditorIdentifier[] {\n\t\tconst editors: IEditorIdentifier[] = [];\n\n\t\tfor (const group of this.editorGroupService.getGroups(GroupsOrder.MOST_RECENTLY_ACTIVE)) {\n\t\t\tfor (const editor of group.getEditors(EditorsOrder.MOST_RECENTLY_ACTIVE)) {\n\t\t\t\tif (!editor.isDirty()) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (!options?.includeUntitled && editor.isUntitled()) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (options?.excludeSticky && group.isSticky(editor)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\teditors.push({ groupId: group.id, editor });\n\t\t\t}\n\t\t}\n\n\t\treturn editors;\n\t}\n\n\tprivate getUniqueEditors(editors: IEditorIdentifier[]): IEditorIdentifier[] {\n\t\tconst uniqueEditors: IEditorIdentifier[] = [];\n\t\tfor (const { editor, groupId } of editors) {\n\t\t\tif (uniqueEditors.some(uniqueEditor => uniqueEditor.editor.matches(editor))) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tuniqueEditors.push({ editor, groupId });\n\t\t}\n\n\t\treturn uniqueEditors;\n\t}\n\n\t//#endregion\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\n\t\t// Dispose remaining watchers if any\n\t\tthis.activeOutOfWorkspaceWatchers.forEach(disposable => dispose(disposable));\n\t\tthis.activeOutOfWorkspaceWatchers.clear();\n\t}\n}\n\nexport interface IEditorOpenHandler {\n\t(\n\t\tgroup: IEditorGroup,\n\t\tdelegate: () => Promise<IEditorPane | undefined>,\n\t): Promise<IEditorPane | undefined>;\n}\n\n/**\n * The delegating workbench editor service can be used to override the behaviour of the openEditor()\n * method by providing a IEditorOpenHandler. All calls are being delegated to the existing editor\n * service otherwise.\n */\nexport class DelegatingEditorService implements IEditorService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\tprivate editorOpenHandler: IEditorOpenHandler,\n\t\t@IEditorService private editorService: EditorService\n\t) { }\n\n\topenEditor(editor: IEditorInput, options?: IEditorOptions | ITextEditorOptions, group?: OpenInEditorGroup): Promise<IEditorPane | undefined>;\n\topenEditor(editor: IResourceEditorInput | IUntitledTextResourceEditorInput, group?: OpenInEditorGroup): Promise<ITextEditorPane | undefined>;\n\topenEditor(editor: IResourceDiffEditorInput, group?: OpenInEditorGroup): Promise<ITextDiffEditorPane | undefined>;\n\tasync openEditor(editor: IEditorInput | IResourceEditorInputType, optionsOrGroup?: IEditorOptions | ITextEditorOptions | OpenInEditorGroup, group?: OpenInEditorGroup): Promise<IEditorPane | undefined> {\n\t\tconst result = this.editorService.doResolveEditorOpenRequest(editor, optionsOrGroup, group);\n\t\tif (result) {\n\t\t\tconst [resolvedGroup, resolvedEditor, resolvedOptions] = result;\n\n\t\t\treturn this.editorOpenHandler(resolvedGroup, () => this.editorService.openEditor(resolvedEditor, resolvedOptions, resolvedGroup));\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\t//#region Delegate to IEditorService\n\n\tget onDidActiveEditorChange(): Event<void> { return this.editorService.onDidActiveEditorChange; }\n\tget onDidVisibleEditorsChange(): Event<void> { return this.editorService.onDidVisibleEditorsChange; }\n\tget onDidCloseEditor(): Event<IEditorCloseEvent> { return this.editorService.onDidCloseEditor; }\n\n\tget activeEditor(): IEditorInput | undefined { return this.editorService.activeEditor; }\n\tget activeEditorPane(): IVisibleEditorPane | undefined { return this.editorService.activeEditorPane; }\n\tget activeTextEditorControl(): ICodeEditor | IDiffEditor | undefined { return this.editorService.activeTextEditorControl; }\n\tget activeTextEditorMode(): string | undefined { return this.editorService.activeTextEditorMode; }\n\tget visibleEditors(): readonly IEditorInput[] { return this.editorService.visibleEditors; }\n\tget visibleEditorPanes(): readonly IVisibleEditorPane[] { return this.editorService.visibleEditorPanes; }\n\tget visibleTextEditorControls(): readonly (ICodeEditor | IDiffEditor)[] { return this.editorService.visibleTextEditorControls; }\n\tget editors(): readonly IEditorInput[] { return this.editorService.editors; }\n\tget count(): number { return this.editorService.count; }\n\n\tgetEditors(order: EditorsOrder, options?: { excludeSticky?: boolean }): readonly IEditorIdentifier[] { return this.editorService.getEditors(order, options); }\n\n\topenEditors(editors: IEditorInputWithOptions[], group?: OpenInEditorGroup): Promise<IEditorPane[]>;\n\topenEditors(editors: IResourceEditorInputType[], group?: OpenInEditorGroup): Promise<IEditorPane[]>;\n\topenEditors(editors: Array<IEditorInputWithOptions | IResourceEditorInputType>, group?: OpenInEditorGroup): Promise<IEditorPane[]> {\n\t\treturn this.editorService.openEditors(editors, group);\n\t}\n\n\treplaceEditors(editors: IResourceEditorReplacement[], group: IEditorGroup | GroupIdentifier): Promise<void>;\n\treplaceEditors(editors: IEditorReplacement[], group: IEditorGroup | GroupIdentifier): Promise<void>;\n\treplaceEditors(editors: Array<IEditorReplacement | IResourceEditorReplacement>, group: IEditorGroup | GroupIdentifier): Promise<void> {\n\t\treturn this.editorService.replaceEditors(editors, group);\n\t}\n\n\tisOpened(editor: IResourceEditorInputIdentifier): boolean { return this.editorService.isOpened(editor); }\n\n\tfindEditors(resource: URI): readonly IEditorIdentifier[];\n\tfindEditors(resource: IResourceEditorInputIdentifier): readonly IEditorIdentifier[];\n\tfindEditors(resource: URI, group: IEditorGroup | GroupIdentifier): readonly IEditorInput[];\n\tfindEditors(resource: IResourceEditorInputIdentifier, group: IEditorGroup | GroupIdentifier): IEditorInput | undefined;\n\tfindEditors(arg1: URI | IResourceEditorInputIdentifier, arg2?: IEditorGroup | GroupIdentifier): readonly IEditorIdentifier[] | readonly IEditorInput[] | IEditorInput | undefined { return this.editorService.findEditors(arg1, arg2); }\n\n\toverrideOpenEditor(handler: IOpenEditorOverrideHandler): IDisposable { return this.editorService.overrideOpenEditor(handler); }\n\tgetEditorOverrides(resource: URI, options: IEditorOptions | undefined, group: IEditorGroup | undefined) { return this.editorService.getEditorOverrides(resource, options, group); }\n\n\tcreateEditorInput(input: IResourceEditorInputType): IEditorInput { return this.editorService.createEditorInput(input); }\n\n\tsave(editors: IEditorIdentifier | IEditorIdentifier[], options?: ISaveEditorsOptions): Promise<boolean> { return this.editorService.save(editors, options); }\n\tsaveAll(options?: ISaveAllEditorsOptions): Promise<boolean> { return this.editorService.saveAll(options); }\n\n\trevert(editors: IEditorIdentifier | IEditorIdentifier[], options?: IRevertOptions): Promise<boolean> { return this.editorService.revert(editors, options); }\n\trevertAll(options?: IRevertAllEditorsOptions): Promise<boolean> { return this.editorService.revertAll(options); }\n\n\t//#endregion\n}\n\nregisterSingleton(IEditorService, EditorService);\n"]}