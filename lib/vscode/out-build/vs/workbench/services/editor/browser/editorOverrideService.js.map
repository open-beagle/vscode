{"version":3,"sources":["vs/workbench/services/editor/browser/editorOverrideService.ts"],"names":[],"mappings":"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","file":"editorOverrideService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as glob from 'vs/base/common/glob';\nimport { distinct, firstOrDefault, flatten, insert } from 'vs/base/common/arrays';\nimport { Disposable, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { basename, extname, isEqual } from 'vs/base/common/resources';\nimport { URI } from 'vs/base/common/uri';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { EditorActivation, EditorOverride, IEditorOptions, ITextEditorOptions } from 'vs/platform/editor/common/editor';\nimport { EditorResourceAccessor, IEditorInput, IEditorInputWithOptions, IEditorInputWithOptionsAndGroup } from 'vs/workbench/common/editor';\nimport { IEditorGroup, IEditorGroupsService, preferredSideBySideGroupDirection } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { Schemas } from 'vs/base/common/network';\nimport { DiffEditorInput } from 'vs/workbench/common/editor/diffEditorInput';\nimport { ContributedEditorInfo, ContributedEditorPriority, ContributionPointOptions, DEFAULT_EDITOR_ASSOCIATION, DiffEditorInputFactoryFunction, EditorAssociation, EditorAssociations, EditorInputFactoryFunction, editorsAssociationsSettingId, globMatchesResource, IEditorOverrideService, priorityToRank } from 'vs/workbench/services/editor/common/editorOverrideService';\nimport { IKeyMods, IQuickInputService, IQuickPickItem, IQuickPickSeparator } from 'vs/platform/quickinput/common/quickInput';\nimport { localize } from 'vs/nls';\nimport { Codicon } from 'vs/base/common/codicons';\nimport { INotificationService, Severity } from 'vs/platform/notification/common/notification';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\n\ninterface IContributedEditorInput extends IEditorInput {\n\tviewType?: string;\n}\n\ninterface ContributionPoint {\n\tglobPattern: string | glob.IRelativePattern,\n\teditorInfo: ContributedEditorInfo,\n\toptions?: ContributionPointOptions,\n\tcreateEditorInput: EditorInputFactoryFunction\n\tcreateDiffEditorInput?: DiffEditorInputFactoryFunction\n}\n\ntype ContributionPoints = Array<ContributionPoint>;\n\nexport class EditorOverrideService extends Disposable implements IEditorOverrideService {\n\treadonly _serviceBrand: undefined;\n\n\tprivate _contributionPoints: Map<string | glob.IRelativePattern, ContributionPoints> = new Map<string | glob.IRelativePattern, ContributionPoints>();\n\tprivate static readonly overrideCacheStorageID = 'editorOverrideService.cache';\n\tprivate cache: Set<string> | undefined;\n\n\tconstructor(\n\t\t@IEditorGroupsService private readonly editorGroupService: IEditorGroupsService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService\n\t) {\n\t\tsuper();\n\t\t// Read in the cache on statup\n\t\tthis.cache = new Set<string>(JSON.parse(this.storageService.get(EditorOverrideService.overrideCacheStorageID, StorageScope.GLOBAL, JSON.stringify([]))));\n\t\tthis.storageService.remove(EditorOverrideService.overrideCacheStorageID, StorageScope.GLOBAL);\n\n\t\tthis._register(this.storageService.onWillSaveState(() => {\n\t\t\t// We want to store the glob patterns we would activate on, this allows us to know if we need to await the ext host on startup for opening a resource\n\t\t\tthis.cacheContributionPoints();\n\t\t}));\n\n\t\t// When extensions have registered we no longer need the cache\n\t\tthis.extensionService.onDidRegisterExtensions(() => {\n\t\t\tthis.cache = undefined;\n\t\t});\n\t}\n\n\tasync resolveEditorOverride(editor: IEditorInput, options: IEditorOptions | ITextEditorOptions | undefined, group: IEditorGroup): Promise<IEditorInputWithOptionsAndGroup | undefined> {\n\t\t// If it was an override before we await for the extensions to activate and then proceed with overriding or else they won't be registered\n\t\tif (this.cache && editor.resource && this.resourceMatchesCache(editor.resource)) {\n\t\t\tawait this.extensionService.whenInstalledExtensionsRegistered();\n\t\t}\n\n\t\tif (options?.override === EditorOverride.DISABLED) {\n\t\t\tthrow new Error(`Calling resolve editor override when override is explicitly disabled!`);\n\t\t}\n\n\t\t// Always ensure inputs have populated resource fields\n\t\tif (editor instanceof DiffEditorInput) {\n\t\t\tif ((!editor.modifiedInput.resource || !editor.originalInput.resource)) {\n\t\t\t\treturn { editor, options, group };\n\t\t\t}\n\t\t} else if (!editor.resource) {\n\t\t\treturn { editor, options, group };\n\t\t}\n\n\t\tlet override = typeof options?.override === 'string' ? options.override : undefined;\n\t\t// If the editor passed in already has a type and the user didn't explicitly override the editor choice, use the editor type.\n\t\toverride = override ?? (editor as IContributedEditorInput).viewType;\n\n\t\tif (options?.override === EditorOverride.PICK) {\n\t\t\tconst picked = await this.doPickEditorOverride(editor, options, group);\n\t\t\t// If the picker was cancelled we will stop resolving the override\n\t\t\tif (!picked) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Deconstruct the return picked options and overrides if the user selected something\n\t\t\toverride = picked[0].override as string | undefined;\n\t\t\toptions = picked[0];\n\t\t\tgroup = picked[1] ?? group;\n\t\t}\n\n\t\t// Resolved the override as much as possible, now find a given contribution\n\t\tconst { contributionPoint, conflictingDefault } = this.getContributionPoint(editor instanceof DiffEditorInput ? editor.modifiedInput.resource! : editor.resource!, override);\n\t\tconst selectedContribution = contributionPoint;\n\t\tif (!selectedContribution) {\n\t\t\treturn { editor, options, group };\n\t\t}\n\n\t\tconst handlesDiff = typeof selectedContribution.options?.canHandleDiff === 'function' ? selectedContribution.options.canHandleDiff() : selectedContribution.options?.canHandleDiff;\n\t\tif (editor instanceof DiffEditorInput && handlesDiff === false) {\n\t\t\treturn { editor, options, group };\n\t\t}\n\n\t\t// If it's the currently active editor we shouldn't do anything\n\t\tif (selectedContribution.editorInfo.describes(editor)) {\n\t\t\treturn;\n\t\t}\n\t\tconst input = await this.doOverrideEditorInput(editor, options, group, selectedContribution);\n\t\tif (conflictingDefault && input) {\n\t\t\t// Wait one second to give the user ample time to see the current editor then ask them to configure a default\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.doHandleConflictingDefaults(selectedContribution.editorInfo.label, input.editor, input.options ?? options, group);\n\t\t\t}, 1200);\n\t\t}\n\t\t// Add the group as we might've changed it with the quickpick\n\t\tif (input) {\n\t\t\tthis.sendOverrideTelemetry(input.editor);\n\t\t\treturn { ...input, group };\n\t\t}\n\t\treturn input;\n\t}\n\n\tregisterContributionPoint(\n\t\tglobPattern: string | glob.IRelativePattern,\n\t\teditorInfo: ContributedEditorInfo,\n\t\toptions: ContributionPointOptions,\n\t\tcreateEditorInput: EditorInputFactoryFunction,\n\t\tcreateDiffEditorInput?: DiffEditorInputFactoryFunction\n\t): IDisposable {\n\t\tif (this._contributionPoints.get(globPattern) === undefined) {\n\t\t\tthis._contributionPoints.set(globPattern, []);\n\t\t}\n\t\tconst remove = insert(this._contributionPoints.get(globPattern)!, {\n\t\t\tglobPattern,\n\t\t\teditorInfo,\n\t\t\toptions,\n\t\t\tcreateEditorInput,\n\t\t\tcreateDiffEditorInput\n\t\t});\n\t\treturn toDisposable(() => remove());\n\t}\n\n\thasContributionPoint(schemeOrGlob: string): boolean {\n\t\treturn this._contributionPoints.has(schemeOrGlob);\n\t}\n\n\tgetAssociationsForResource(resource: URI): EditorAssociations {\n\t\tconst rawAssociations = this.configurationService.getValue<EditorAssociations>(editorsAssociationsSettingId) || [];\n\t\treturn rawAssociations.filter(association => association.filenamePattern && globMatchesResource(association.filenamePattern, resource));\n\t}\n\n\tupdateUserAssociations(globPattern: string, editorID: string): void {\n\t\tconst newAssociation: EditorAssociation = { viewType: editorID, filenamePattern: globPattern };\n\t\tconst currentAssociations = [...this.configurationService.getValue<EditorAssociations>(editorsAssociationsSettingId)];\n\n\t\t// First try updating existing association\n\t\tfor (let i = 0; i < currentAssociations.length; ++i) {\n\t\t\tconst existing = currentAssociations[i];\n\t\t\tif (existing.filenamePattern === newAssociation.filenamePattern) {\n\t\t\t\tcurrentAssociations.splice(i, 1, newAssociation);\n\t\t\t\tthis.configurationService.updateValue(editorsAssociationsSettingId, currentAssociations);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// Otherwise, create a new one\n\t\tcurrentAssociations.unshift(newAssociation);\n\t\tthis.configurationService.updateValue(editorsAssociationsSettingId, currentAssociations);\n\t}\n\n\tprivate findMatchingContributions(resource: URI): ContributionPoint[] {\n\t\tlet contributions: ContributionPoint[] = [];\n\t\t// Then all glob patterns\n\t\tfor (const key of this._contributionPoints.keys()) {\n\t\t\tconst contributionPoints = this._contributionPoints.get(key)!;\n\t\t\tfor (const contributionPoint of contributionPoints) {\n\t\t\t\tif (globMatchesResource(key, resource)) {\n\t\t\t\t\tcontributions.push(contributionPoint);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Return the contributions sorted by their priority\n\t\treturn contributions.sort((a, b) => priorityToRank(b.editorInfo.priority) - priorityToRank(a.editorInfo.priority));\n\t}\n\n\t/**\n\t * Given a resource and an override selects the best possible contribution point\n\t * @returns The contribution point and whether there was another default which conflicted with it\n\t */\n\tprivate getContributionPoint(resource: URI, override: string | undefined): { contributionPoint: ContributionPoint | undefined, conflictingDefault: boolean } {\n\t\tconst findMatchingContribPoint = (contributionPoints: ContributionPoints, viewType: string) => {\n\t\t\treturn contributionPoints.find((contribPoint) => {\n\t\t\t\tif (contribPoint.options && contribPoint.options.canSupportResource !== undefined) {\n\t\t\t\t\treturn contribPoint.editorInfo.id === viewType && contribPoint.options.canSupportResource(resource);\n\t\t\t\t}\n\t\t\t\treturn contribPoint.editorInfo.id === viewType;\n\t\t\t});\n\t\t};\n\t\tif (override) {\n\t\t\t// Specific overried passed in doesn't have to match the reosurce, it can be anything\n\t\t\tconst contributionPoints = flatten(Array.from(this._contributionPoints.values()));\n\t\t\treturn {\n\t\t\t\tcontributionPoint: findMatchingContribPoint(contributionPoints, override),\n\t\t\t\tconflictingDefault: false\n\t\t\t};\n\t\t}\n\n\t\tlet contributionPoints = this.findMatchingContributions(resource);\n\n\t\tconst associationsFromSetting = this.getAssociationsForResource(resource);\n\t\t// We only want built-in+ if no user defined setting is found, else we won't override\n\t\tconst possibleContributionPoints = contributionPoints.filter(contribPoint => priorityToRank(contribPoint.editorInfo.priority) >= priorityToRank(ContributedEditorPriority.builtin) && contribPoint.editorInfo.id !== DEFAULT_EDITOR_ASSOCIATION.id);\n\t\t// If the contribution is exclusive we use that, else use the user setting, else use the built-in+ contribution\n\t\tconst selectedViewType = possibleContributionPoints[0]?.editorInfo.priority === ContributedEditorPriority.exclusive ?\n\t\t\tpossibleContributionPoints[0]?.editorInfo.id :\n\t\t\tassociationsFromSetting[0]?.viewType || possibleContributionPoints[0]?.editorInfo.id;\n\n\t\tlet conflictingDefault = false;\n\t\tif (associationsFromSetting.length === 0 && possibleContributionPoints.length > 1) {\n\t\t\tconflictingDefault = true;\n\t\t}\n\n\t\treturn {\n\t\t\tcontributionPoint: findMatchingContribPoint(contributionPoints, selectedViewType),\n\t\t\tconflictingDefault\n\t\t};\n\t}\n\n\tprivate async doOverrideEditorInput(editor: IEditorInput, options: IEditorOptions | ITextEditorOptions | undefined, group: IEditorGroup, selectedContribution: ContributionPoint): Promise<IEditorInputWithOptions | undefined> {\n\n\t\t// If no activation option is provided, populate it.\n\t\tif (options && typeof options.activation === 'undefined') {\n\t\t\toptions = { ...options, activation: options.preserveFocus ? EditorActivation.RESTORE : undefined };\n\t\t}\n\n\t\t// If it's a diff editor we trigger the create diff editor input\n\t\tif (editor instanceof DiffEditorInput) {\n\t\t\tif (!selectedContribution.createDiffEditorInput) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst inputWithOptions = selectedContribution.createDiffEditorInput(editor, options, group);\n\t\t\treturn inputWithOptions;\n\t\t}\n\n\t\t// We only call this function from one place and there we do the check to ensure editor.resource is not undefined\n\t\tconst resource = editor.resource!;\n\n\t\t// Respect options passed back\n\t\tconst inputWithOptions = selectedContribution.createEditorInput(resource, options, group);\n\t\toptions = inputWithOptions.options ?? options;\n\t\tconst input = inputWithOptions.editor;\n\n\t\t// If the editor states it can only be opened once per resource we must close all existing ones first\n\t\tconst singleEditorPerResource = typeof selectedContribution.options?.singlePerResource === 'function' ? selectedContribution.options.singlePerResource() : selectedContribution.options?.singlePerResource;\n\t\tif (singleEditorPerResource) {\n\t\t\tthis.closeExistingEditorsForResource(resource, selectedContribution.editorInfo.id, group);\n\t\t}\n\n\t\treturn { editor: input, options };\n\t}\n\n\tprivate closeExistingEditorsForResource(\n\t\tresource: URI,\n\t\tviewType: string,\n\t\ttargetGroup: IEditorGroup,\n\t): void {\n\t\tconst editorInfoForResource = this.findExistingEditorsForResource(resource, viewType);\n\t\tif (!editorInfoForResource.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst editorToUse = editorInfoForResource[0];\n\n\t\t// Replace all other editors\n\t\tfor (const { editor, group } of editorInfoForResource) {\n\t\t\tif (editor !== editorToUse.editor) {\n\t\t\t\tgroup.closeEditor(editor);\n\t\t\t}\n\t\t}\n\n\t\tif (targetGroup.id !== editorToUse.group.id) {\n\t\t\teditorToUse.group.closeEditor(editorToUse.editor);\n\t\t}\n\t\treturn;\n\t}\n\n\t/**\n\t * Given a resource and a viewType, returns all editors open for that resouce and viewType.\n\t * @param resource The resource specified\n\t * @param viewType The viewtype\n\t * @returns A list of editors\n\t */\n\tprivate findExistingEditorsForResource(\n\t\tresource: URI,\n\t\tviewType: string,\n\t): Array<{ editor: IEditorInput, group: IEditorGroup }> {\n\t\tconst out: Array<{ editor: IEditorInput, group: IEditorGroup }> = [];\n\t\tconst orderedGroups = distinct([\n\t\t\t...this.editorGroupService.groups,\n\t\t]);\n\n\t\tfor (const group of orderedGroups) {\n\t\t\tfor (const editor of group.editors) {\n\t\t\t\tif (isEqual(editor.resource, resource) && (editor as IContributedEditorInput).viewType === viewType) {\n\t\t\t\t\tout.push({ editor, group });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn out;\n\t}\n\n\tprivate async doHandleConflictingDefaults(editorName: string, currentEditor: IContributedEditorInput, options: IEditorOptions | undefined, group: IEditorGroup) {\n\t\tconst makeCurrentEditorDefault = () => {\n\t\t\tconst viewType = currentEditor.viewType;\n\t\t\tif (viewType) {\n\t\t\t\tthis.updateUserAssociations(`*${extname(currentEditor.resource!)}`, viewType);\n\t\t\t}\n\t\t};\n\n\t\tconst handle = this.notificationService.prompt(Severity.Warning,\n\t\t\tlocalize('editorOverride.conflictingDefaults', 'Multiple editors want to be your default editor for this resource.'),\n\t\t\t[{\n\t\t\t\tlabel: localize('editorOverride.configureDefault', 'Configure Default'),\n\t\t\t\trun: async () => {\n\t\t\t\t\t// Show the picker and tell it to update the setting to whatever the user selected\n\t\t\t\t\tconst picked = await this.doPickEditorOverride(currentEditor, options, group, true);\n\t\t\t\t\tif (!picked) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst replacementEditor = await this.resolveEditorOverride(currentEditor, picked[0], picked[1] ?? group);\n\t\t\t\t\tif (!replacementEditor) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t// Replace the current editor with the picked one\n\t\t\t\t\t(replacementEditor.group ?? picked[1] ?? group).replaceEditors([\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\teditor: currentEditor,\n\t\t\t\t\t\t\treplacement: replacementEditor.editor,\n\t\t\t\t\t\t\toptions: replacementEditor.options ?? picked[0],\n\t\t\t\t\t\t}\n\t\t\t\t\t]);\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: localize('editorOverride.keepDefault', 'Keep {0}', editorName),\n\t\t\t\trun: makeCurrentEditorDefault\n\t\t\t}\n\t\t\t]);\n\t\t// If the user pressed X we assume they want to keep the current editor as default\n\t\tconst onCloseListener = handle.onDidClose(() => {\n\t\t\tmakeCurrentEditorDefault();\n\t\t\tonCloseListener.dispose();\n\t\t});\n\t}\n\n\tprivate mapContributionsToQuickPickEntry(resource: URI, group: IEditorGroup, alwaysUpdateSetting?: boolean) {\n\t\tconst currentEditor = firstOrDefault(group.findEditors(resource));\n\t\t// If untitled, we want all contribution points\n\t\tlet contributionPoints = resource.scheme === Schemas.untitled ? distinct(flatten(Array.from(this._contributionPoints.values())), (contrib) => contrib.editorInfo.id) : this.findMatchingContributions(resource);\n\n\t\t// Not the most efficient way to do this, but we want to ensure the text editor is at the top of the quickpick\n\t\tcontributionPoints = contributionPoints.sort((a, b) => {\n\t\t\tif (a.editorInfo.id === DEFAULT_EDITOR_ASSOCIATION.id) {\n\t\t\t\treturn -1;\n\t\t\t} else if (b.editorInfo.id === DEFAULT_EDITOR_ASSOCIATION.id) {\n\t\t\t\treturn 1;\n\t\t\t} else {\n\t\t\t\treturn priorityToRank(b.editorInfo.priority) - priorityToRank(a.editorInfo.priority);\n\t\t\t}\n\t\t});\n\t\tconst contribGroups: { defaults: Array<IQuickPickSeparator | IQuickPickItem>, optional: Array<IQuickPickSeparator | IQuickPickItem> } = {\n\t\t\tdefaults: [\n\t\t\t\t{ type: 'separator', label: localize('editorOverride.picker.default', 'Defaults') }\n\t\t\t],\n\t\t\toptional: [\n\t\t\t\t{ type: 'separator', label: localize('editorOverride.picker.optional', 'Optional') }\n\t\t\t],\n\t\t};\n\t\t// Get the matching contribtuions and call resolve whether they're active for the picker\n\t\tcontributionPoints.forEach(contribPoint => {\n\t\t\tconst isActive = currentEditor ? contribPoint.editorInfo.describes(currentEditor) : false;\n\t\t\tconst quickPickEntry = {\n\t\t\t\tid: contribPoint.editorInfo.id,\n\t\t\t\tlabel: contribPoint.editorInfo.label,\n\t\t\t\tdescription: isActive ? localize('promptOpenWith.currentlyActive', \"Currently Active\") : undefined,\n\t\t\t\tdetail: contribPoint.editorInfo.detail ?? contribPoint.editorInfo.priority,\n\t\t\t\tbuttons: alwaysUpdateSetting ? [] : [{\n\t\t\t\t\ticonClass: Codicon.gear.classNames,\n\t\t\t\t\ttooltip: localize('promptOpenWith.setDefaultTooltip', \"Set as default editor for '{0}' files\", extname(resource))\n\t\t\t\t}],\n\t\t\t};\n\t\t\tif (contribPoint.editorInfo.priority === ContributedEditorPriority.option) {\n\t\t\t\tcontribGroups.optional.push(quickPickEntry);\n\t\t\t} else {\n\t\t\t\tcontribGroups.defaults.push(quickPickEntry);\n\t\t\t}\n\t\t});\n\t\treturn [...contribGroups.defaults, ...contribGroups.optional];\n\t}\n\n\tprivate async doPickEditorOverride(editor: IEditorInput, options: IEditorOptions | undefined, group: IEditorGroup, alwaysUpdateSetting?: boolean): Promise<[IEditorOptions, IEditorGroup | undefined] | undefined> {\n\n\t\ttype EditorOverridePick = {\n\t\t\treadonly item: IQuickPickItem;\n\t\t\treadonly keyMods?: IKeyMods;\n\t\t\treadonly openInBackground: boolean;\n\t\t};\n\n\t\tconst resource = EditorResourceAccessor.getOriginalUri(editor);\n\n\t\tif (!resource) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Text editor has the lowest priority because we\n\t\tconst editorOverridePicks = this.mapContributionsToQuickPickEntry(resource, group, alwaysUpdateSetting);\n\n\t\t// Create editor override picker\n\t\tconst editorOverridePicker = this.quickInputService.createQuickPick<IQuickPickItem>();\n\t\tconst placeHolderMessage = alwaysUpdateSetting ?\n\t\t\tlocalize('prompOpenWith.updateDefaultPlaceHolder', \"Select new default editor for '{0}'\", basename(resource)) :\n\t\t\tlocalize('promptOpenWith.placeHolder', \"Select editor for '{0}'\", basename(resource));\n\t\teditorOverridePicker.placeholder = placeHolderMessage;\n\t\teditorOverridePicker.canAcceptInBackground = true;\n\t\teditorOverridePicker.items = editorOverridePicks;\n\t\tconst firstItem = editorOverridePicker.items.find(item => item.type === 'item') as IQuickPickItem | undefined;\n\t\tif (firstItem) {\n\t\t\teditorOverridePicker.selectedItems = [firstItem];\n\t\t}\n\n\t\t// Prompt the user to select an override\n\t\tconst picked: EditorOverridePick | undefined = await new Promise<EditorOverridePick | undefined>(resolve => {\n\t\t\teditorOverridePicker.onDidAccept(e => {\n\t\t\t\tlet result: EditorOverridePick | undefined = undefined;\n\n\t\t\t\tif (editorOverridePicker.selectedItems.length === 1) {\n\t\t\t\t\tresult = {\n\t\t\t\t\t\titem: editorOverridePicker.selectedItems[0],\n\t\t\t\t\t\tkeyMods: editorOverridePicker.keyMods,\n\t\t\t\t\t\topenInBackground: e.inBackground\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// If asked to always update the setting then update it even if the gear isn't clicked\n\t\t\t\tif (alwaysUpdateSetting && result?.item.id) {\n\t\t\t\t\tthis.updateUserAssociations(`*${extname(resource)}`, result.item.id,);\n\t\t\t\t}\n\n\t\t\t\tresolve(result);\n\t\t\t});\n\n\t\t\teditorOverridePicker.onDidTriggerItemButton(e => {\n\n\t\t\t\t// Trigger opening and close picker\n\t\t\t\tresolve({ item: e.item, openInBackground: false });\n\n\t\t\t\t// Persist setting\n\t\t\t\tif (resource && e.item && e.item.id) {\n\t\t\t\t\tthis.updateUserAssociations(`*${extname(resource)}`, e.item.id,);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\teditorOverridePicker.show();\n\t\t});\n\n\t\t// Close picker\n\t\teditorOverridePicker.dispose();\n\n\t\t// If the user picked an override, look at how the picker was\n\t\t// used (e.g. modifier keys, open in background) and create the\n\t\t// options and group to use accordingly\n\t\tif (picked) {\n\n\t\t\t// Figure out target group\n\t\t\tlet targetGroup: IEditorGroup | undefined;\n\t\t\tif (picked.keyMods?.alt || picked.keyMods?.ctrlCmd) {\n\t\t\t\tconst direction = preferredSideBySideGroupDirection(this.configurationService);\n\t\t\t\ttargetGroup = this.editorGroupService.findGroup({ direction }, group.id);\n\t\t\t\ttargetGroup = targetGroup ?? this.editorGroupService.addGroup(group, direction);\n\t\t\t}\n\n\t\t\t// Figure out options\n\t\t\tconst targetOptions: IEditorOptions = {\n\t\t\t\t...options,\n\t\t\t\toverride: picked.item.id,\n\t\t\t\tpreserveFocus: picked.openInBackground || options?.preserveFocus,\n\t\t\t};\n\n\t\t\treturn [targetOptions, targetGroup];\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate sendOverrideTelemetry(chosenInput: IContributedEditorInput): void {\n\t\ttype editorOverrideClassification = {\n\t\t\tviewType: { classification: 'PublicNonPersonalData', purpose: 'FeatureInsight' };\n\t\t};\n\t\ttype editorOverrideEvent = {\n\t\t\tviewType: string\n\t\t};\n\t\tif (chosenInput.viewType) {\n\t\t\tthis.telemetryService.publicLog2<editorOverrideEvent, editorOverrideClassification>('override.viewType', { viewType: chosenInput.viewType });\n\t\t}\n\t}\n\n\tprivate cacheContributionPoints() {\n\t\t// Create a set to store contributed glob patterns\n\t\tconst cacheStorage: Set<string> = new Set<string>();\n\n\t\t// Store just the relative pattern pieces without any path info\n\t\tfor (const globPattern of this._contributionPoints.keys()) {\n\t\t\tconst contribPoint = this._contributionPoints.get(globPattern)!;\n\t\t\tconst nonOptional = !!contribPoint.find(c => c.editorInfo.priority !== ContributedEditorPriority.option && c.editorInfo.id !== DEFAULT_EDITOR_ASSOCIATION.id);\n\t\t\t// Don't keep a cache of the optional ones as those wouldn't be opened on start anyways\n\t\t\tif (!nonOptional) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (glob.isRelativePattern(globPattern)) {\n\t\t\t\tcacheStorage.add(`${globPattern.pattern}`);\n\t\t\t} else {\n\t\t\t\tcacheStorage.add(globPattern);\n\t\t\t}\n\t\t}\n\n\t\t// Also store the users settings as those would have to activate on startup as well\n\t\tconst userAssociations = this.configurationService.getValue<EditorAssociations>(editorsAssociationsSettingId) || [];\n\t\tfor (const association of userAssociations) {\n\t\t\tif (association.filenamePattern) {\n\t\t\t\tcacheStorage.add(association.filenamePattern);\n\t\t\t}\n\t\t}\n\t\tthis.storageService.store(EditorOverrideService.overrideCacheStorageID, JSON.stringify(Array.from(cacheStorage)), StorageScope.GLOBAL, StorageTarget.MACHINE);\n\t}\n\n\tprivate resourceMatchesCache(resource: URI): boolean {\n\t\tif (!this.cache) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (const cacheEntry of this.cache) {\n\t\t\tif (globMatchesResource(cacheEntry, resource)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n\nregisterSingleton(IEditorOverrideService, EditorOverrideService);\n"]}