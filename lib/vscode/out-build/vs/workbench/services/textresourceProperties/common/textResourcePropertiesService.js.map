{"version":3,"file":"textResourcePropertiesService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/textresourceProperties/common/textResourcePropertiesService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAahG,IAAa,6BAA6B,GAA1C,MAAa,6BAA6B;QAMzC,YACyC,oBAA2C,EAC9D,kBAAuC,EACb,kBAAgD,EAC7D,cAA+B;YAHzB,yBAAoB,GAApB,oBAAoB,CAAuB;YAEpC,uBAAkB,GAAlB,kBAAkB,CAA8B;YAC7D,mBAAc,GAAd,cAAc,CAAiB;YAN1D,sBAAiB,GAAmC,IAAI,CAAC;YAQhE,kBAAkB,CAAC,cAAc,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,IAAI,CAAC,iBAAiB,GAAG,SAAS,CAAC,CAAC;QAC3F,CAAC;QAED,MAAM,CAAC,QAAc,EAAE,QAAiB;YACvC,MAAM,GAAG,GAAG,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAS,WAAW,EAAE,EAAE,kBAAkB,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC,CAAC;YAChH,IAAI,GAAG,IAAI,GAAG,KAAK,MAAM,EAAE;gBAC1B,OAAO,GAAG,CAAC;aACX;YACD,MAAM,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YAChC,OAAO,EAAE,kBAA0B,IAAI,EAAE,sBAA8B,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC;QACzF,CAAC;QAEO,KAAK,CAAC,QAAc;YAC3B,IAAI,EAAE,GAAG,aAAE,CAAC;YAEZ,MAAM,eAAe,GAAG,IAAI,CAAC,kBAAkB,CAAC,eAAe,CAAC;YAChE,IAAI,eAAe,EAAE;gBACpB,IAAI,QAAQ,IAAI,QAAQ,CAAC,MAAM,KAAK,iBAAO,CAAC,IAAI,EAAE;oBACjD,MAAM,UAAU,GAAG,yBAAyB,eAAe,EAAE,CAAC;oBAC9D,EAAE,GAAG,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC,CAAC,uBAAuB,CAAC,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,UAAU,qBAA0B,aAAE,CAAC,CAAC;oBACxJ,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,UAAU,EAAE,EAAE,qCAAgD,CAAC;iBACzF;aACD;YAED,OAAO,EAAE,CAAC;QACX,CAAC;KACD,CAAA;IAtCY,6BAA6B;QAOvC,WAAA,qCAAqB,CAAA;QACrB,WAAA,wCAAmB,CAAA;QACnB,WAAA,iDAA4B,CAAA;QAC5B,WAAA,yBAAe,CAAA;OAVL,6BAA6B,CAsCzC;IAtCY,sEAA6B;IAwC1C,CAAA,GAAA,8BAAiB,CAAA,CAAC,iEAA8B,EAAE,6BAA6B,EAAE,IAAI,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ITextResourcePropertiesService } from 'vs/editor/common/services/textResourceConfigurationService';\nimport { OperatingSystem, OS } from 'vs/base/common/platform';\nimport { Schemas } from 'vs/base/common/network';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IRemoteAgentEnvironment } from 'vs/platform/remote/common/remoteAgentEnvironment';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\n\nexport class TextResourcePropertiesService implements ITextResourcePropertiesService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate remoteEnvironment: IRemoteAgentEnvironment | null = null;\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IRemoteAgentService remoteAgentService: IRemoteAgentService,\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IStorageService private readonly storageService: IStorageService\n\t) {\n\t\tremoteAgentService.getEnvironment().then(remoteEnv => this.remoteEnvironment = remoteEnv);\n\t}\n\n\tgetEOL(resource?: URI, language?: string): string {\n\t\tconst eol = this.configurationService.getValue<string>('files.eol', { overrideIdentifier: language, resource });\n\t\tif (eol && eol !== 'auto') {\n\t\t\treturn eol;\n\t\t}\n\t\tconst os = this.getOS(resource);\n\t\treturn os === OperatingSystem.Linux || os === OperatingSystem.Macintosh ? '\\n' : '\\r\\n';\n\t}\n\n\tprivate getOS(resource?: URI): OperatingSystem {\n\t\tlet os = OS;\n\n\t\tconst remoteAuthority = this.environmentService.remoteAuthority;\n\t\tif (remoteAuthority) {\n\t\t\tif (resource && resource.scheme !== Schemas.file) {\n\t\t\t\tconst osCacheKey = `resource.authority.os.${remoteAuthority}`;\n\t\t\t\tos = this.remoteEnvironment ? this.remoteEnvironment.os : /* Get it from cache */ this.storageService.getNumber(osCacheKey, StorageScope.WORKSPACE, OS);\n\t\t\t\tthis.storageService.store(osCacheKey, os, StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\t\t}\n\t\t}\n\n\t\treturn os;\n\t}\n}\n\nregisterSingleton(ITextResourcePropertiesService, TextResourcePropertiesService, true);\n"]}