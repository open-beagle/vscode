{"version":3,"file":"statusbar.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/statusbar/common/statusbar.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAQnF,QAAA,iBAAiB,GAAG,CAAA,GAAA,+BAAe,CAAA,CAAoB,kBAAkB,CAAC,CAAC;IAExF,IAAkB,kBAGjB;IAHD,WAAkB,kBAAkB;QACnC,2DAAI,CAAA;QACJ,6DAAK,CAAA;IACN,CAAC,EAHiB,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QAGnC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { ThemeColor } from 'vs/platform/theme/common/themeService';\nimport { Event } from 'vs/base/common/event';\nimport { Command } from 'vs/editor/common/modes';\n\nexport const IStatusbarService = createDecorator<IStatusbarService>('statusbarService');\n\nexport const enum StatusbarAlignment {\n\tLEFT,\n\tRIGHT\n}\n\n/**\n * A declarative way of describing a status bar entry\n */\nexport interface IStatusbarEntry {\n\n\t/**\n\t * The text to show for the entry. You can embed icons in the text by leveraging the syntax:\n\t *\n\t * `My text ${icon name} contains icons like ${icon name} this one.`\n\t */\n\treadonly text: string;\n\n\t/**\n\t * Text to be read out by the screen reader.\n\t */\n\treadonly ariaLabel: string;\n\n\t/**\n\t * Role of the status bar entry which defines how a screen reader interacts with it.\n\t * Default is 'button'.\n\t */\n\treadonly role?: string;\n\n\t/**\n\t * An optional tooltip text to show when you hover over the entry\n\t */\n\treadonly tooltip?: string;\n\n\t/**\n\t * An optional color to use for the entry\n\t */\n\treadonly color?: string | ThemeColor;\n\n\t/**\n\t * An optional background color to use for the entry\n\t */\n\treadonly backgroundColor?: string | ThemeColor;\n\n\t/**\n\t * An optional id of a command that is known to the workbench to execute on click\n\t */\n\treadonly command?: string | Command;\n\n\t/**\n\t * Whether to show a beak above the status bar entry.\n\t */\n\treadonly showBeak?: boolean;\n\n\t/**\n\t * Will enable a spinning icon in front of the text to indicate progress.\n\t */\n\treadonly showProgress?: boolean;\n}\n\nexport interface IStatusbarService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Adds an entry to the statusbar with the given alignment and priority. Use the returned accessor\n\t * to update or remove the statusbar entry.\n\t *\n\t * @param id  identifier of the entry is needed to allow users to hide entries via settings\n\t * @param name human readable name the entry is about\n\t * @param alignment either LEFT or RIGHT\n\t * @param priority items get arranged from highest priority to lowest priority from left to right\n\t * in their respective alignment slot\n\t */\n\taddEntry(entry: IStatusbarEntry, id: string, name: string, alignment: StatusbarAlignment, priority?: number): IStatusbarEntryAccessor;\n\n\t/**\n\t * An event that is triggered when an entry's visibility is changed.\n\t */\n\treadonly onDidChangeEntryVisibility: Event<{ id: string, visible: boolean }>;\n\n\t/**\n\t * Return if an entry is visible or not.\n\t */\n\tisEntryVisible(id: string): boolean;\n\n\t/**\n\t * Allows to update an entry's visibility with the provided ID.\n\t */\n\tupdateEntryVisibility(id: string, visible: boolean): void;\n\n\t/**\n\t * Focused the status bar. If one of the status bar entries was focused, focuses it directly.\n\t */\n\tfocus(preserveEntryFocus?: boolean): void;\n\n\t/**\n\t * Focuses the next status bar entry. If none focused, focuses the first.\n\t */\n\tfocusNextEntry(): void;\n\n\t/**\n\t * Focuses the previous status bar entry. If none focused, focuses the last.\n\t */\n\tfocusPreviousEntry(): void;\n\n\t/**\n\t *\tReturns true if a status bar entry is focused.\n\t */\n\tisEntryFocused(): boolean;\n}\n\nexport interface IStatusbarEntryAccessor extends IDisposable {\n\n\t/**\n\t * Allows to update an existing status bar entry.\n\t */\n\tupdate(properties: IStatusbarEntry): void;\n}\n"]}