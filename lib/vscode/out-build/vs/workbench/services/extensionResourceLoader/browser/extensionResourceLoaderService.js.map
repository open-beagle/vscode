{"version":3,"file":"extensionResourceLoaderService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/extensionResourceLoader/browser/extensionResourceLoaderService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;IAQhG,IAAM,8BAA8B,GAApC,MAAM,8BAA8B;QAInC,YACgC,YAA0B;YAA1B,iBAAY,GAAZ,YAAY,CAAc;QACtD,CAAC;QAEL,KAAK,CAAC,qBAAqB,CAAC,GAAQ;YACnC,GAAG,GAAG,oBAAU,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;YAEnC,IAAI,GAAG,CAAC,MAAM,KAAK,iBAAO,CAAC,IAAI,IAAI,GAAG,CAAC,MAAM,KAAK,iBAAO,CAAC,KAAK,EAAE;gBAChE,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;gBACrD,OAAO,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;aAC/B;YAED,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;YACjD,IAAI,QAAQ,CAAC,MAAM,KAAK,GAAG,EAAE;gBAC5B,MAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;aACrC;YACD,OAAO,QAAQ,CAAC,IAAI,EAAE,CAAC;QAExB,CAAC;KACD,CAAA;IAvBK,8BAA8B;QAKjC,WAAA,oBAAY,CAAA;OALT,8BAA8B,CAuBnC;IAED,CAAA,GAAA,8BAAiB,CAAA,CAAC,yDAA+B,EAAE,8BAA8B,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { IExtensionResourceLoaderService } from 'vs/workbench/services/extensionResourceLoader/common/extensionResourceLoader';\nimport { FileAccess, Schemas } from 'vs/base/common/network';\n\nclass ExtensionResourceLoaderService implements IExtensionResourceLoaderService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@IFileService private readonly _fileService: IFileService\n\t) { }\n\n\tasync readExtensionResource(uri: URI): Promise<string> {\n\t\turi = FileAccess.asBrowserUri(uri);\n\n\t\tif (uri.scheme !== Schemas.http && uri.scheme !== Schemas.https) {\n\t\t\tconst result = await this._fileService.readFile(uri);\n\t\t\treturn result.value.toString();\n\t\t}\n\n\t\tconst response = await fetch(uri.toString(true));\n\t\tif (response.status !== 200) {\n\t\t\tthrow new Error(response.statusText);\n\t\t}\n\t\treturn response.text();\n\n\t}\n}\n\nregisterSingleton(IExtensionResourceLoaderService, ExtensionResourceLoaderService);\n"]}