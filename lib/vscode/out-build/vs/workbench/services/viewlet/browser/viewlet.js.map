{"version":3,"file":"viewlet.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/viewlet/browser/viewlet.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAQnF,QAAA,eAAe,GAAG,CAAA,GAAA,+BAAe,CAAA,CAAkB,gBAAgB,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IViewlet } from 'vs/workbench/common/viewlet';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { Event } from 'vs/base/common/event';\nimport { ViewletDescriptor } from 'vs/workbench/browser/viewlet';\nimport { IProgressIndicator } from 'vs/platform/progress/common/progress';\n\nexport const IViewletService = createDecorator<IViewletService>('viewletService');\n\nexport interface IViewletService {\n\n\treadonly _serviceBrand: undefined;\n\n\treadonly onDidViewletRegister: Event<ViewletDescriptor>;\n\treadonly onDidViewletDeregister: Event<ViewletDescriptor>;\n\treadonly onDidViewletOpen: Event<IViewlet>;\n\treadonly onDidViewletClose: Event<IViewlet>;\n\n\t/**\n\t * Opens a viewlet with the given identifier and pass keyboard focus to it if specified.\n\t */\n\topenViewlet(id: string | undefined, focus?: boolean): Promise<IViewlet | undefined>;\n\n\t/**\n\t * Returns the current active viewlet if any.\n\t */\n\tgetActiveViewlet(): IViewlet | undefined;\n\n\t/**\n\t * Returns the viewlet by id.\n\t */\n\tgetViewlet(id: string): ViewletDescriptor | undefined;\n\n\t/**\n\t * Returns all enabled viewlets\n\t */\n\tgetViewlets(): ViewletDescriptor[];\n\n\t/**\n\t * Returns the progress indicator for the side bar.\n\t */\n\tgetProgressIndicator(id: string): IProgressIndicator | undefined;\n\n\t/**\n\t * Hide the active viewlet.\n\t */\n\thideActiveViewlet(): void;\n\n\t/**\n\t * Return the last active viewlet id.\n\t */\n\tgetLastActiveViewletId(): string;\n}\n"]}