{"version":3,"sources":["vs/workbench/services/userDataSync/common/userDataSync.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAyCnF,QAAA,6BAA6B,GAAG,CAAA,GAAA,+BAAe,CAAA,CAAgC,+BAA+B,CAAC,CAAC;IA0B7H,SAAgB,gBAAgB,CAAC,MAAoB;QACpD,QAAQ,MAAM,EAAE;YACf,8BAA0B,CAAC,CAAC,OAAO,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAU,EAAE,IAAU,CAAC,CAAC;YACpE,oCAA6B,CAAC,CAAC,OAAO,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAa,EAAE,IAAoB,CAAC,CAAC;YACpF,8BAA0B,CAAC,CAAC,OAAO,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAU,EAAE,IAAe,CAAC,CAAC;YACzE,kCAA4B,CAAC,CAAC,OAAO,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAY,EAAE,IAAY,CAAC,CAAC;YAC1E,oCAA6B,CAAC,CAAC,OAAO,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAgB,EAAE,IAAU,CAAC,CAAC;SAC7E;IACF,CAAC;IARD,4CAQC;IAED,IAAkB,aAIjB;IAJD,WAAkB,aAAa;QAC9B,gDAA+B,CAAA;QAC/B,4CAA2B,CAAA;QAC3B,wCAAuB,CAAA;IACxB,CAAC,EAJiB,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAI9B;IAEY,QAAA,UAAU,GAAG,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAe,EAAE,IAAe,CAAC,CAAC;IAExD,QAAA,cAAc,GAAG,CAAA,GAAA,2BAAY,CAAA,CAAC,yBAAyB,EAAE,kBAAO,CAAC,IAAI,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAc,EAAE,IAAsC,CAAC,CAAC,CAAC;IAEtJ,WAAW;IACE,QAAA,kBAAkB,GAAG,IAAI,0BAAa,CAAS,YAAY,sCAA2B,CAAC;IACvF,QAAA,uBAAuB,GAAG,IAAI,0BAAa,CAAU,aAAa,EAAE,KAAK,CAAC,CAAC;IAC3E,QAAA,qBAAqB,GAAG,IAAI,0BAAa,CAAS,2BAA2B,sCAA8B,CAAC;IAC5G,QAAA,6BAA6B,GAAG,IAAI,0BAAa,CAAU,yBAAyB,EAAE,KAAK,CAAC,CAAC;IAC7F,QAAA,+BAA+B,GAAG,IAAI,0BAAa,CAAU,sBAAsB,EAAE,KAAK,CAAC,CAAC;IAEzG,WAAW;IACE,QAAA,yBAAyB,GAAG,0CAA0C,CAAC;IACvE,QAAA,wBAAwB,GAAG,wCAAwC,CAAC;IAEjF,QAAQ;IACK,QAAA,sBAAsB,GAAG,qBAAqB,CAAC;IAC/C,QAAA,mBAAmB,GAAG,6BAA6B,CAAC","file":"userDataSync.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IAuthenticationProvider, SyncStatus, SyncResource, Change, MergeState } from 'vs/platform/userDataSync/common/userDataSync';\nimport { Event } from 'vs/base/common/event';\nimport { RawContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { localize } from 'vs/nls';\nimport { URI } from 'vs/base/common/uri';\nimport { Codicon } from 'vs/base/common/codicons';\nimport { registerIcon } from 'vs/platform/theme/common/iconRegistry';\n\nexport interface IUserDataSyncAccount {\n\treadonly authenticationProviderId: string;\n\treadonly accountName: string;\n\treadonly accountId: string;\n}\n\nexport interface IUserDataSyncPreview {\n\treadonly onDidChangeResources: Event<ReadonlyArray<IUserDataSyncResource>>;\n\treadonly resources: ReadonlyArray<IUserDataSyncResource>;\n\n\taccept(syncResource: SyncResource, resource: URI, content?: string | null): Promise<void>;\n\tmerge(resource?: URI): Promise<void>;\n\tdiscard(resource?: URI): Promise<void>;\n\tpull(): Promise<void>;\n\tpush(): Promise<void>;\n\tapply(): Promise<void>;\n\tcancel(): Promise<void>;\n}\n\nexport interface IUserDataSyncResource {\n\treadonly syncResource: SyncResource;\n\treadonly local: URI;\n\treadonly remote: URI;\n\treadonly merged: URI;\n\treadonly accepted: URI;\n\treadonly localChange: Change;\n\treadonly remoteChange: Change;\n\treadonly mergeState: MergeState;\n}\n\nexport const IUserDataSyncWorkbenchService = createDecorator<IUserDataSyncWorkbenchService>('IUserDataSyncWorkbenchService');\nexport interface IUserDataSyncWorkbenchService {\n\t_serviceBrand: any;\n\n\treadonly enabled: boolean;\n\treadonly authenticationProviders: IAuthenticationProvider[];\n\n\treadonly all: IUserDataSyncAccount[];\n\treadonly current: IUserDataSyncAccount | undefined;\n\n\treadonly accountStatus: AccountStatus;\n\treadonly onDidChangeAccountStatus: Event<AccountStatus>;\n\n\treadonly userDataSyncPreview: IUserDataSyncPreview;\n\n\tturnOn(): Promise<void>;\n\tturnoff(everyWhere: boolean): Promise<void>;\n\tsignIn(): Promise<void>;\n\n\tresetSyncedData(): Promise<void>;\n\tshowSyncActivity(): Promise<void>;\n\tsyncNow(): Promise<void>;\n\n\tsynchroniseUserDataSyncStoreType(): Promise<void>;\n}\n\nexport function getSyncAreaLabel(source: SyncResource): string {\n\tswitch (source) {\n\t\tcase SyncResource.Settings: return localize('settings', \"Settings\");\n\t\tcase SyncResource.Keybindings: return localize('keybindings', \"Keyboard Shortcuts\");\n\t\tcase SyncResource.Snippets: return localize('snippets', \"User Snippets\");\n\t\tcase SyncResource.Extensions: return localize('extensions', \"Extensions\");\n\t\tcase SyncResource.GlobalState: return localize('ui state label', \"UI State\");\n\t}\n}\n\nexport const enum AccountStatus {\n\tUninitialized = 'uninitialized',\n\tUnavailable = 'unavailable',\n\tAvailable = 'available',\n}\n\nexport const SYNC_TITLE = localize('sync category', \"Settings Sync\");\n\nexport const SYNC_VIEW_ICON = registerIcon('settings-sync-view-icon', Codicon.sync, localize('syncViewIcon', 'View icon of the Settings Sync view.'));\n\n// Contexts\nexport const CONTEXT_SYNC_STATE = new RawContextKey<string>('syncStatus', SyncStatus.Uninitialized);\nexport const CONTEXT_SYNC_ENABLEMENT = new RawContextKey<boolean>('syncEnabled', false);\nexport const CONTEXT_ACCOUNT_STATE = new RawContextKey<string>('userDataSyncAccountStatus', AccountStatus.Uninitialized);\nexport const CONTEXT_ENABLE_ACTIVITY_VIEWS = new RawContextKey<boolean>(`enableSyncActivityViews`, false);\nexport const CONTEXT_ENABLE_SYNC_MERGES_VIEW = new RawContextKey<boolean>(`enableSyncMergesView`, false);\n\n// Commands\nexport const CONFIGURE_SYNC_COMMAND_ID = 'workbench.userDataSync.actions.configure';\nexport const SHOW_SYNC_LOG_COMMAND_ID = 'workbench.userDataSync.actions.showLog';\n\n// VIEWS\nexport const SYNC_VIEW_CONTAINER_ID = 'workbench.view.sync';\nexport const SYNC_MERGES_VIEW_ID = 'workbench.views.sync.merges';\n"]}