{"version":3,"file":"userDataSyncUtil.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/userDataSync/common/userDataSyncUtil.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;IAWhG,IAAM,uBAAuB,GAA7B,MAAM,uBAAuB;QAI5B,YACsC,kBAAsC,EACvC,gBAAmC,EACtB,6BAA6D,EAC1D,gCAAmE;YAHlF,uBAAkB,GAAlB,kBAAkB,CAAoB;YACvC,qBAAgB,GAAhB,gBAAgB,CAAmB;YACtB,kCAA6B,GAA7B,6BAA6B,CAAgC;YAC1D,qCAAgC,GAAhC,gCAAgC,CAAmC;QACpH,CAAC;QAEL,KAAK,CAAC,6BAA6B;YAClC,OAAO,CAAA,GAAA,wCAAyB,CAAA,EAAE,CAAC;QACpC,CAAC;QAED,KAAK,CAAC,mBAAmB,CAAC,YAAsB;YAC/C,MAAM,IAAI,GAA8B,EAAE,CAAC;YAC3C,KAAK,MAAM,WAAW,IAAI,YAAY,EAAE;gBACvC,IAAI,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,oBAAoB,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aAC/H;YACD,OAAO,IAAI,CAAC;QACb,CAAC;QAED,KAAK,CAAC,wBAAwB,CAAC,QAAa;YAC3C,IAAI;gBACH,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;gBAClF,MAAM,EAAE,YAAY,EAAE,OAAO,EAAE,GAAG,cAAc,CAAC,MAAM,CAAC,eAAe,CAAC,UAAU,EAAE,CAAC;gBACrF,MAAM,GAAG,GAAG,cAAc,CAAC,MAAM,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC;gBAC3D,cAAc,CAAC,OAAO,EAAE,CAAC;gBACzB,OAAO,EAAE,GAAG,EAAE,YAAY,EAAE,OAAO,EAAE,CAAC;aACtC;YAAC,OAAO,CAAC,EAAE;aACX;YACD,OAAO;gBACN,GAAG,EAAE,IAAI,CAAC,6BAA6B,CAAC,MAAM,CAAC,QAAQ,CAAC;gBACxD,YAAY,EAAE,IAAI,CAAC,gCAAgC,CAAC,QAAQ,CAAU,QAAQ,EAAE,qBAAqB,CAAC;gBACtG,OAAO,EAAE,IAAI,CAAC,gCAAgC,CAAC,QAAQ,CAAC,QAAQ,EAAE,gBAAgB,CAAC;aACnF,CAAC;QACH,CAAC;KAED,CAAA;IAvCK,uBAAuB;QAK1B,WAAA,+BAAkB,CAAA;QAClB,WAAA,mCAAiB,CAAA;QACjB,WAAA,iEAA8B,CAAA;QAC9B,WAAA,oEAAiC,CAAA;OAR9B,uBAAuB,CAuC5B;IAED,CAAA,GAAA,8BAAiB,CAAA,CAAC,uCAAwB,EAAE,uBAAuB,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { IUserDataSyncUtilService, getDefaultIgnoredSettings } from 'vs/platform/userDataSync/common/userDataSync';\nimport { IStringDictionary } from 'vs/base/common/collections';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { FormattingOptions } from 'vs/base/common/jsonFormatter';\nimport { URI } from 'vs/base/common/uri';\nimport { ITextModelService } from 'vs/editor/common/services/resolverService';\nimport { ITextResourcePropertiesService, ITextResourceConfigurationService } from 'vs/editor/common/services/textResourceConfigurationService';\n\nclass UserDataSyncUtilService implements IUserDataSyncUtilService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@IKeybindingService private readonly keybindingsService: IKeybindingService,\n\t\t@ITextModelService private readonly textModelService: ITextModelService,\n\t\t@ITextResourcePropertiesService private readonly textResourcePropertiesService: ITextResourcePropertiesService,\n\t\t@ITextResourceConfigurationService private readonly textResourceConfigurationService: ITextResourceConfigurationService,\n\t) { }\n\n\tasync resolveDefaultIgnoredSettings(): Promise<string[]> {\n\t\treturn getDefaultIgnoredSettings();\n\t}\n\n\tasync resolveUserBindings(userBindings: string[]): Promise<IStringDictionary<string>> {\n\t\tconst keys: IStringDictionary<string> = {};\n\t\tfor (const userbinding of userBindings) {\n\t\t\tkeys[userbinding] = this.keybindingsService.resolveUserBinding(userbinding).map(part => part.getUserSettingsLabel()).join(' ');\n\t\t}\n\t\treturn keys;\n\t}\n\n\tasync resolveFormattingOptions(resource: URI): Promise<FormattingOptions> {\n\t\ttry {\n\t\t\tconst modelReference = await this.textModelService.createModelReference(resource);\n\t\t\tconst { insertSpaces, tabSize } = modelReference.object.textEditorModel.getOptions();\n\t\t\tconst eol = modelReference.object.textEditorModel.getEOL();\n\t\t\tmodelReference.dispose();\n\t\t\treturn { eol, insertSpaces, tabSize };\n\t\t} catch (e) {\n\t\t}\n\t\treturn {\n\t\t\teol: this.textResourcePropertiesService.getEOL(resource),\n\t\t\tinsertSpaces: this.textResourceConfigurationService.getValue<boolean>(resource, 'editor.insertSpaces'),\n\t\t\ttabSize: this.textResourceConfigurationService.getValue(resource, 'editor.tabSize')\n\t\t};\n\t}\n\n}\n\nregisterSingleton(IUserDataSyncUtilService, UserDataSyncUtilService);\n"]}