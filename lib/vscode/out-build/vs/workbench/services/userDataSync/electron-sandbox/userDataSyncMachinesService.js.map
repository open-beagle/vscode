{"version":3,"file":"userDataSyncMachinesService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/userDataSync/electron-sandbox/userDataSyncMachinesService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;IAShG,IAAM,2BAA2B,GAAjC,MAAM,2BAA4B,SAAQ,sBAAU;QAQnD,YACwB,oBAA2C;YAElE,KAAK,EAAE,CAAC;YACR,IAAI,CAAC,OAAO,GAAG,oBAAoB,CAAC,UAAU,CAAC,sBAAsB,CAAC,CAAC;QACxE,CAAC;QAPD,IAAI,WAAW,KAAkB,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAO,aAAa,CAAC,CAAC,CAAC,CAAC;QASnF,WAAW;YACV,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAyB,aAAa,CAAC,CAAC;QACjE,CAAC;QAED,iBAAiB;YAChB,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAC/C,CAAC;QAED,oBAAoB;YACnB,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;QAClD,CAAC;QAED,aAAa,CAAC,SAAiB,EAAE,IAAY;YAC5C,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC;QAC9D,CAAC;QAED,aAAa,CAAC,SAAiB,EAAE,OAAgB;YAChD,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC;QACjE,CAAC;KAED,CAAA;IAnCK,2BAA2B;QAS9B,WAAA,gCAAqB,CAAA;OATlB,2BAA2B,CAmChC;IAED,CAAA,GAAA,8BAAiB,CAAA,CAAC,mDAA4B,EAAE,2BAA2B,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ISharedProcessService } from 'vs/platform/ipc/electron-sandbox/services';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IUserDataSyncMachinesService, IUserDataSyncMachine } from 'vs/platform/userDataSync/common/userDataSyncMachines';\nimport { Event } from 'vs/base/common/event';\n\nclass UserDataSyncMachinesService extends Disposable implements IUserDataSyncMachinesService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly channel: IChannel;\n\n\tget onDidChange(): Event<void> { return this.channel.listen<void>('onDidChange'); }\n\n\tconstructor(\n\t\t@ISharedProcessService sharedProcessService: ISharedProcessService\n\t) {\n\t\tsuper();\n\t\tthis.channel = sharedProcessService.getChannel('userDataSyncMachines');\n\t}\n\n\tgetMachines(): Promise<IUserDataSyncMachine[]> {\n\t\treturn this.channel.call<IUserDataSyncMachine[]>('getMachines');\n\t}\n\n\taddCurrentMachine(): Promise<void> {\n\t\treturn this.channel.call('addCurrentMachine');\n\t}\n\n\tremoveCurrentMachine(): Promise<void> {\n\t\treturn this.channel.call('removeCurrentMachine');\n\t}\n\n\trenameMachine(machineId: string, name: string): Promise<void> {\n\t\treturn this.channel.call('renameMachine', [machineId, name]);\n\t}\n\n\tsetEnablement(machineId: string, enabled: boolean): Promise<void> {\n\t\treturn this.channel.call('setEnablement', [machineId, enabled]);\n\t}\n\n}\n\nregisterSingleton(IUserDataSyncMachinesService, UserDataSyncMachinesService);\n"]}