{"version":3,"file":"userDataSyncAccountService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/userDataSync/electron-sandbox/userDataSyncAccountService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAShG,IAAa,0BAA0B,GAAvC,MAAa,0BAA2B,SAAQ,sBAAU;QAczD,YACwB,oBAA2C;YAElE,KAAK,EAAE,CAAC;YAND,wBAAmB,GAA8C,IAAI,CAAC,SAAS,CAAC,IAAI,eAAO,EAAoC,CAAC,CAAC;YAChI,uBAAkB,GAA4C,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC;YAMrG,IAAI,CAAC,OAAO,GAAG,oBAAoB,CAAC,UAAU,CAAC,qBAAqB,CAAC,CAAC;YACtE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAmC,iBAAiB,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;gBACrF,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;gBACxB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAmC,oBAAoB,CAAC,CAAC,OAAO,CAAC,EAAE;oBACpG,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;oBACxB,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBACxC,CAAC,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACJ,CAAC;QAnBD,IAAI,OAAO,KAAuC,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;QAEzE,IAAI,aAAa,KAAqB,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAU,eAAe,CAAC,CAAC,CAAC,CAAC;QAmB7F,aAAa,CAAC,OAAyC;YACtD,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC;QACpD,CAAC;KAED,CAAA;IAhCY,0BAA0B;QAepC,WAAA,gCAAqB,CAAA;OAfX,0BAA0B,CAgCtC;IAhCY,gEAA0B;IAkCvC,CAAA,GAAA,8BAAiB,CAAA,CAAC,iDAA2B,EAAE,0BAA0B,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { ISharedProcessService } from 'vs/platform/ipc/electron-sandbox/services';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { IUserDataSyncAccountService, IUserDataSyncAccount } from 'vs/platform/userDataSync/common/userDataSyncAccount';\n\nexport class UserDataSyncAccountService extends Disposable implements IUserDataSyncAccountService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly channel: IChannel;\n\n\tprivate _account: IUserDataSyncAccount | undefined;\n\tget account(): IUserDataSyncAccount | undefined { return this._account; }\n\n\tget onTokenFailed(): Event<boolean> { return this.channel.listen<boolean>('onTokenFailed'); }\n\n\tprivate _onDidChangeAccount: Emitter<IUserDataSyncAccount | undefined> = this._register(new Emitter<IUserDataSyncAccount | undefined>());\n\treadonly onDidChangeAccount: Event<IUserDataSyncAccount | undefined> = this._onDidChangeAccount.event;\n\n\tconstructor(\n\t\t@ISharedProcessService sharedProcessService: ISharedProcessService,\n\t) {\n\t\tsuper();\n\t\tthis.channel = sharedProcessService.getChannel('userDataSyncAccount');\n\t\tthis.channel.call<IUserDataSyncAccount | undefined>('_getInitialData').then(account => {\n\t\t\tthis._account = account;\n\t\t\tthis._register(this.channel.listen<IUserDataSyncAccount | undefined>('onDidChangeAccount')(account => {\n\t\t\t\tthis._account = account;\n\t\t\t\tthis._onDidChangeAccount.fire(account);\n\t\t\t}));\n\t\t});\n\t}\n\n\tupdateAccount(account: IUserDataSyncAccount | undefined): Promise<undefined> {\n\t\treturn this.channel.call('updateAccount', account);\n\t}\n\n}\n\nregisterSingleton(IUserDataSyncAccountService, UserDataSyncAccountService);\n"]}