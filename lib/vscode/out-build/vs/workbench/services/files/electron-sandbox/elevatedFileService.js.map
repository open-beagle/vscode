{"version":3,"file":"elevatedFileService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/files/electron-sandbox/elevatedFileService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAYhG,IAAa,yBAAyB,GAAtC,MAAa,yBAAyB;QAIrC,YACsC,iBAAqC,EAC3C,WAAyB,EACH,kBAAsD;YAFtE,sBAAiB,GAAjB,iBAAiB,CAAoB;YAC3C,gBAAW,GAAX,WAAW,CAAc;YACH,uBAAkB,GAAlB,kBAAkB,CAAoC;QACxG,CAAC;QAEL,WAAW,CAAC,QAAa;YACxB,wDAAwD;YACxD,uDAAuD;YACvD,mBAAmB;YACnB,qDAAqD;YACrD,OAAO,QAAQ,CAAC,MAAM,KAAK,iBAAO,CAAC,IAAI,CAAC;QACzC,CAAC;QAED,KAAK,CAAC,iBAAiB,CAAC,QAAa,EAAE,KAA2D,EAAE,OAA2B;YAC9H,MAAM,MAAM,GAAG,SAAG,CAAC,IAAI,CAAC,CAAA,GAAA,WAAI,CAAA,CAAC,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,iBAAiB,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACxJ,IAAI;gBACH,8BAA8B;gBAC9B,MAAM,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;gBAEzD,wBAAwB;gBACxB,MAAM,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,MAAM,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;aACtE;oBAAS;gBAET,WAAW;gBACX,MAAM,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;aACnC;YAED,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,eAAe,EAAE,IAAI,EAAE,CAAC,CAAC;QACtE,CAAC;KACD,CAAA;IAlCY,yBAAyB;QAKnC,WAAA,2BAAkB,CAAA;QAClB,WAAA,oBAAY,CAAA;QACZ,WAAA,uDAAkC,CAAA;OAPxB,yBAAyB,CAkCrC;IAlCY,8DAAyB;IAoCtC,CAAA,GAAA,8BAAiB,CAAA,CAAC,0CAAoB,EAAE,yBAAyB,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer, VSBufferReadable, VSBufferReadableStream } from 'vs/base/common/buffer';\nimport { Schemas } from 'vs/base/common/network';\nimport { join } from 'vs/base/common/path';\nimport { URI } from 'vs/base/common/uri';\nimport { IFileService, IFileStatWithMetadata, IWriteFileOptions } from 'vs/platform/files/common/files';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { INativeHostService } from 'vs/platform/native/electron-sandbox/native';\nimport { INativeWorkbenchEnvironmentService } from 'vs/workbench/services/environment/electron-sandbox/environmentService';\nimport { IElevatedFileService } from 'vs/workbench/services/files/common/elevatedFileService';\n\nexport class NativeElevatedFileService implements IElevatedFileService {\n\n\treadonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@INativeHostService private readonly nativeHostService: INativeHostService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@INativeWorkbenchEnvironmentService private readonly environmentService: INativeWorkbenchEnvironmentService\n\t) { }\n\n\tisSupported(resource: URI): boolean {\n\t\t// Saving elevated is currently only supported for local\n\t\t// files for as long as we have no generic support from\n\t\t// the file service\n\t\t// (https://github.com/microsoft/vscode/issues/48659)\n\t\treturn resource.scheme === Schemas.file;\n\t}\n\n\tasync writeFileElevated(resource: URI, value: VSBuffer | VSBufferReadable | VSBufferReadableStream, options?: IWriteFileOptions): Promise<IFileStatWithMetadata> {\n\t\tconst source = URI.file(join(this.environmentService.userDataPath, `code-elevated-${Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 6)}`));\n\t\ttry {\n\t\t\t// write into a tmp file first\n\t\t\tawait this.fileService.writeFile(source, value, options);\n\n\t\t\t// then sudo prompt copy\n\t\t\tawait this.nativeHostService.writeElevated(source, resource, options);\n\t\t} finally {\n\n\t\t\t// clean up\n\t\t\tawait this.fileService.del(source);\n\t\t}\n\n\t\treturn this.fileService.resolve(resource, { resolveMetadata: true });\n\t}\n}\n\nregisterSingleton(IElevatedFileService, NativeElevatedFileService);\n"]}