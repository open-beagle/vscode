{"version":3,"file":"elevatedFileService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/files/common/elevatedFileService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAOnF,QAAA,oBAAoB,GAAG,CAAA,GAAA,+BAAe,CAAA,CAAuB,qBAAqB,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { URI } from 'vs/base/common/uri';\nimport { VSBuffer, VSBufferReadable, VSBufferReadableStream } from 'vs/base/common/buffer';\nimport { IFileStatWithMetadata, IWriteFileOptions } from 'vs/platform/files/common/files';\n\nexport const IElevatedFileService = createDecorator<IElevatedFileService>('elevatedFileService');\n\nexport interface IElevatedFileService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Whether saving elevated is supported for the provided resource.\n\t */\n\tisSupported(resource: URI): boolean;\n\n\t/**\n\t * Attempts to write to the target resource elevated. This may bring\n\t * up a dialog to ask for admin username / password.\n\t */\n\twriteFileElevated(resource: URI, value: VSBuffer | VSBufferReadable | VSBufferReadableStream, options?: IWriteFileOptions): Promise<IFileStatWithMetadata>;\n}\n"]}