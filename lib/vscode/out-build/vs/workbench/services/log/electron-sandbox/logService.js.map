{"version":3,"file":"logService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/log/electron-sandbox/logService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAOhG,MAAa,gBAAiB,SAAQ,gBAAU;QAE/C,YAAY,IAAY,EAAE,QAAkB,EAAE,aAAkC,EAAE,YAAmC,EAAE,kBAAsD;YAE5K,MAAM,WAAW,GAAG,IAAI,2BAAe,EAAE,CAAC;YAE1C,kEAAkE;YAClE,MAAM,OAAO,GAAc,EAAE,CAAC;YAC9B,IAAI,kBAAkB,CAAC,sBAAsB,IAAI,CAAC,CAAC,kBAAkB,CAAC,yBAAyB,EAAE;gBAChG,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,uBAAuB,EAAE,CAAC,CAAC;aACtD;YAED,qCAAqC;iBAChC;gBACJ,OAAO,CAAC,IAAI,CACX,WAAW,CAAC,GAAG,CAAC,IAAI,mBAAa,CAAC,QAAQ,CAAC,CAAC,EAC5C,WAAW,CAAC,GAAG,CAAC,aAAa,CAAC,YAAY,CAAC,kBAAkB,CAAC,OAAO,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,CACjF,CAAC;aACF;YAED,MAAM,eAAe,GAAG,WAAW,CAAC,GAAG,CAAC,IAAI,yBAAmB,CAAC,OAAO,CAAC,CAAC,CAAC;YAC1E,MAAM,cAAc,GAAG,WAAW,CAAC,GAAG,CAAC,IAAI,2BAAkB,CAAC,YAAY,EAAE,eAAe,CAAC,CAAC,CAAC;YAC9F,KAAK,CAAC,cAAc,CAAC,CAAC;YAEtB,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;QAC7B,CAAC;KACD;IA1BD,4CA0BC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { LogService, ConsoleLogger, MultiplexLogService, ILogger, LogLevel } from 'vs/platform/log/common/log';\nimport { INativeWorkbenchEnvironmentService } from 'vs/workbench/services/environment/electron-sandbox/environmentService';\nimport { LogLevelChannelClient, FollowerLogService, LoggerChannelClient } from 'vs/platform/log/common/logIpc';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\n\nexport class NativeLogService extends LogService {\n\n\tconstructor(name: string, logLevel: LogLevel, loggerService: LoggerChannelClient, loggerClient: LogLevelChannelClient, environmentService: INativeWorkbenchEnvironmentService) {\n\n\t\tconst disposables = new DisposableStore();\n\n\t\t// Extension development test CLI: forward everything to main side\n\t\tconst loggers: ILogger[] = [];\n\t\tif (environmentService.isExtensionDevelopment && !!environmentService.extensionTestsLocationURI) {\n\t\t\tloggers.push(loggerService.createConsoleMainLogger());\n\t\t}\n\n\t\t// Normal logger: spdylog and console\n\t\telse {\n\t\t\tloggers.push(\n\t\t\t\tdisposables.add(new ConsoleLogger(logLevel)),\n\t\t\t\tdisposables.add(loggerService.createLogger(environmentService.logFile, { name }))\n\t\t\t);\n\t\t}\n\n\t\tconst multiplexLogger = disposables.add(new MultiplexLogService(loggers));\n\t\tconst followerLogger = disposables.add(new FollowerLogService(loggerClient, multiplexLogger));\n\t\tsuper(followerLogger);\n\n\t\tthis._register(disposables);\n\t}\n}\n"]}