{"version":3,"sources":["vs/workbench/services/preferences/browser/preferencesService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAyChG,MAAM,4BAA4B,GAAG,MAAM,CAAC;IAE5C,IAAa,kBAAkB,GAA/B,MAAa,kBAAmB,SAAQ,sBAAU;QAejD,YACkC,aAA6B,EACvB,kBAAwC,EAC5C,eAAiC,EAC5B,oBAA2C,EAC5C,mBAAyC,EACrC,cAAwC,EAC3C,oBAA2C,EAC7C,kBAAuC,EACzC,gBAAmC,EACnC,wBAA2C,EAC3D,iBAAqC,EACzB,YAA2B,EACrB,kBAAuC,EAC9C,WAAyB,EACxB,YAA2B,EACrB,kBAAuC,EAC3C,cAA+B;YAEjE,KAAK,EAAE,CAAC;YAlByB,kBAAa,GAAb,aAAa,CAAgB;YACvB,uBAAkB,GAAlB,kBAAkB,CAAsB;YAC5C,oBAAe,GAAf,eAAe,CAAkB;YAC5B,yBAAoB,GAApB,oBAAoB,CAAuB;YAC5C,wBAAmB,GAAnB,mBAAmB,CAAsB;YACrC,mBAAc,GAAd,cAAc,CAA0B;YAC3C,yBAAoB,GAApB,oBAAoB,CAAuB;YAC7C,uBAAkB,GAAlB,kBAAkB,CAAqB;YACzC,qBAAgB,GAAhB,gBAAgB,CAAmB;YACnC,6BAAwB,GAAxB,wBAAwB,CAAmB;YAE/C,iBAAY,GAAZ,YAAY,CAAe;YACrB,uBAAkB,GAAlB,kBAAkB,CAAqB;YAC9C,gBAAW,GAAX,WAAW,CAAc;YACxB,iBAAY,GAAZ,YAAY,CAAe;YACrB,uBAAkB,GAAlB,kBAAkB,CAAqB;YAC3C,mBAAc,GAAd,cAAc,CAAiB;YA5B1D,4BAAuB,GAAkC,IAAI,CAAC;YAErD,eAAU,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,eAAO,EAAQ,CAAC,CAAC;YAE1D,mCAA8B,GAAG,CAAC,CAAC;YAEnC,wCAAmC,GAAG,CAAC,CAAC;YAExC,qCAAgC,GAAG,CAAC,CAAC;YAmCpC,+BAA0B,GAAG,SAAG,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,OAAO,CAAC,OAAO,CAAC,MAAM,EAAE,SAAS,EAAE,iBAAiB,EAAE,IAAI,EAAE,mBAAmB,EAAE,CAAC,CAAC;YAC3H,+BAA0B,GAAG,SAAG,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,OAAO,CAAC,OAAO,CAAC,MAAM,EAAE,SAAS,EAAE,iBAAiB,EAAE,IAAI,EAAE,uBAAuB,EAAE,CAAC,CAAC;YAbvJ,uFAAuF;YACvF,0DAA0D;YAC1D,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,sBAAsB,CAAC,GAAG,EAAE;gBAC5D,MAAM,KAAK,GAAG,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;gBACrE,IAAI,CAAC,KAAK,EAAE;oBACX,gDAAgD;oBAChD,OAAO;iBACP;gBACD,YAAY,CAAC,WAAW,CAAC,KAAK,EAAE,CAAA,GAAA,8CAA0B,CAAA,CAAC,iBAAiB,CAAC,CAAC,CAAC;YAChF,CAAC,CAAC,CAAC,CAAC;QACL,CAAC;QAKD,IAAI,oBAAoB;YACvB,OAAO,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC;QACjD,CAAC;QAED,IAAI,yBAAyB;YAC5B,IAAI,IAAI,CAAC,cAAc,CAAC,iBAAiB,EAAE,kBAAyB,EAAE;gBACrE,OAAO,IAAI,CAAC;aACZ;YACD,MAAM,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC;YACrD,OAAO,SAAS,CAAC,aAAa,IAAI,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,kCAAoB,CAAC,CAAC;QACzF,CAAC;QAED,IAAI,oBAAoB;YACvB,OAAO,IAAI,CAAC,oBAAoB,CAAC,cAAc,CAAC,6CAAoB,CAAC,CAAC;QACvE,CAAC;QAED,yBAAyB,CAAC,QAAa;YACtC,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;YAChE,OAAO,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,kCAAoB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QAChE,CAAC;QAED,YAAY,CAAC,GAAQ;YACpB,IAAI,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,EAAE;gBAExC,MAAM,MAAM,GAAG,IAAI,CAAC,iDAAiD,CAAC,GAAG,CAAC,CAAC;gBAC3E,MAAM,iBAAiB,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;gBAC3D,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,EAAE,EAAE,iBAAiB,EAAE,GAAG,CAAC,CAAC,CAAC;gBAExF,IAAI,eAA4C,CAAC;gBACjD,IAAI,CAAC,oBAAoB,CAAC,wBAAwB,CAAC,CAAC,CAAC,EAAE;oBACtD,IAAI,CAAC,CAAC,MAAM,oBAAgC,EAAE;wBAC7C,MAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;wBAC9C,IAAI,CAAC,KAAK,EAAE;4BACX,gDAAgD;4BAChD,OAAO;yBACP;wBACD,eAAe,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;wBAClD,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,EAAE,eAAe,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;wBACvE,eAAe,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;qBACpC;gBACF,CAAC,CAAC,CAAC;gBAEH,4EAA4E;gBAC5E,IAAI,CAAC,eAAe,EAAE;oBACrB,eAAe,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;oBAClD,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,EAAE,eAAe,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;iBACvE;gBAED,OAAO,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;aAC9B;YAED,IAAI,IAAI,CAAC,0BAA0B,CAAC,QAAQ,EAAE,KAAK,GAAG,CAAC,QAAQ,EAAE,EAAE;gBAClE,MAAM,6BAA6B,GAAG,IAAI,CAAC,oBAAoB,CAAC,cAAc,CAAC,iDAA6B,EAAE,IAAI,CAAC,kBAAkB,oBAAgC,CAAC,CAAC;gBACvK,MAAM,iBAAiB,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;gBAC3D,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,6BAA6B,CAAC,OAAO,EAAE,iBAAiB,EAAE,GAAG,CAAC,CAAC,CAAC;gBAC3H,OAAO,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;aAC9B;YAED,IAAI,IAAI,CAAC,0BAA0B,CAAC,QAAQ,EAAE,KAAK,GAAG,CAAC,QAAQ,EAAE,EAAE;gBAClE,MAAM,6BAA6B,GAAG,IAAI,CAAC,oBAAoB,CAAC,cAAc,CAAC,iDAA6B,EAAE,GAAG,CAAC,CAAC;gBACnH,MAAM,iBAAiB,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;gBAC3D,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,6BAA6B,CAAC,OAAO,EAAE,iBAAiB,EAAE,GAAG,CAAC,CAAC,CAAC;gBAC3H,OAAO,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;aAC9B;YAED,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC9B,CAAC;QAED,KAAK,CAAC,4BAA4B,CAAC,GAAQ;YAC1C,IAAI,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,EAAE;gBACxC,OAAO,IAAI,CAAC,gCAAgC,CAAC,GAAG,CAAC,CAAC;aAClD;YAED,IAAI,IAAI,CAAC,oBAAoB,CAAC,QAAQ,EAAE,KAAK,GAAG,CAAC,QAAQ,EAAE,EAAE;gBAC5D,OAAO,IAAI,CAAC,iCAAiC,qBAAiC,GAAG,CAAC,CAAC;aACnF;YAED,MAAM,oBAAoB,GAAG,MAAM,IAAI,CAAC,sBAAsB,mBAA+B,CAAC;YAC9F,IAAI,oBAAoB,IAAI,oBAAoB,CAAC,QAAQ,EAAE,KAAK,GAAG,CAAC,QAAQ,EAAE,EAAE;gBAC/E,OAAO,IAAI,CAAC,iCAAiC,oBAAgC,oBAAoB,CAAC,CAAC;aACnG;YAED,IAAI,IAAI,CAAC,cAAc,CAAC,iBAAiB,EAAE,sBAA6B,EAAE;gBACzE,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,sBAAsB,2BAAuC,GAAG,CAAC,CAAC;gBACjG,IAAI,WAAW,IAAI,WAAW,CAAC,QAAQ,EAAE,KAAK,GAAG,CAAC,QAAQ,EAAE,EAAE;oBAC7D,OAAO,IAAI,CAAC,iCAAiC,2BAAuC,GAAG,CAAC,CAAC;iBACzF;aACD;YAED,MAAM,iBAAiB,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,cAAc,EAAE,CAAC;YACzE,MAAM,iBAAiB,GAAG,iBAAiB,CAAC,CAAC,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC;YACpF,IAAI,iBAAiB,IAAI,iBAAiB,CAAC,QAAQ,EAAE,KAAK,GAAG,CAAC,QAAQ,EAAE,EAAE;gBACzE,OAAO,IAAI,CAAC,iCAAiC,sBAAkC,GAAG,CAAC,CAAC;aACpF;YAED,OAAO,IAAI,CAAC;QACb,CAAC;QAED,sBAAsB;YACrB,OAAO,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,0BAA0B,EAAE,CAAC,CAAC;QACrF,CAAC;QAED,mBAAmB;YAClB,OAAO,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,oBAAoB,EAAE,CAAC,CAAC;QAC/E,CAAC;QAED,YAAY,CAAC,UAA+B,EAAE,KAAyB;YACtE,UAAU,GAAG,OAAO,UAAU,KAAK,WAAW,CAAC,CAAC;gBAC/C,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,2BAA2B,CAAC,KAAK,MAAM,CAAC,CAAC;gBAC5E,UAAU,CAAC;YAEZ,IAAI,CAAC,UAAU,EAAE;gBAChB,OAAO,IAAI,CAAC,aAAa,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;aAC5C;YAED,MAAM,WAAW,GAAG,IAAI,CAAC,4BAA4B,EAAE,IAAI,IAAI,CAAC,uBAAuB,CAAC;YACxF,MAAM,QAAQ,GAAG,WAAW,CAAC,CAAC,CAAC,WAAW,CAAC,OAAO,CAAC,QAAS,CAAC,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC;YACzF,MAAM,MAAM,GAAG,IAAI,CAAC,0CAA0C,CAAC,QAAQ,CAAC,CAAC;YACzE,OAAO,IAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,QAAQ,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;QACtE,CAAC;QAEO,aAAa,CAAC,OAAgC;YACrD,MAAM,KAAK,GAAG,IAAI,CAAC,oBAAoB,CAAC;YACxC,OAAO,mCACH,OAAO,KACV,WAAW,EAAE,IAAI,GACjB,CAAC;YACF,OAAO,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC,mCAAqB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,uBAAc,CAAC,QAAQ,EAAE,CAAC;iBAClI,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,gBAAiB,CAAC,CAAC;QACrE,CAAC;QAED,kBAAkB,CAAC,UAAoB,EAAE,OAAgC,EAAE,KAAoB;YAC9F,UAAU,GAAG,OAAO,UAAU,KAAK,WAAW,CAAC,CAAC;gBAC/C,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,2BAA2B,CAAC,KAAK,MAAM,CAAC,CAAC;gBAC5E,UAAU,CAAC;YAEZ,OAAO,UAAU,CAAC,CAAC;gBAClB,IAAI,CAAC,oBAAoB,qBAAiC,IAAI,CAAC,oBAAoB,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;gBACtG,IAAI,CAAC,qBAAqB,qBAAiC,SAAS,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;QACxF,CAAC;QAED,KAAK,CAAC,kBAAkB;YACvB,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,cAAc,EAAE,CAAC;YACnE,IAAI,WAAW,EAAE;gBAChB,MAAM,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,YAAY,EAAE,4BAA4B,CAAC,CAAC;gBACrF,OAAO,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE,WAAW,CAAC,YAAY,EAAE,OAAO,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,cAAc,EAAE,IAAI,EAAE,QAAQ,EAAE,uBAAc,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;aACjK;YACD,OAAO,SAAS,CAAC;QAClB,CAAC;QAED,qBAAqB,CAAC,UAAoB,EAAE,OAAgC,EAAE,KAAoB;YACjG,UAAU,GAAG,OAAO,UAAU,KAAK,WAAW,CAAC,CAAC;gBAC/C,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,2BAA2B,CAAC,KAAK,MAAM,CAAC,CAAC;gBAC5E,UAAU,CAAC;YAEZ,IAAI,CAAC,IAAI,CAAC,yBAAyB,EAAE;gBACpC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAiB,EAAE,IAA0E,CAAC,CAAC,CAAC;gBAC3I,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;aAC5B;YAED,OAAO,UAAU,CAAC,CAAC;gBAClB,IAAI,CAAC,oBAAoB,oBAAgC,IAAI,CAAC,yBAAyB,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;gBAC1G,IAAI,CAAC,qBAAqB,oBAAgC,SAAS,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;QACvF,CAAC;QAED,KAAK,CAAC,kBAAkB,CAAC,MAAW,EAAE,UAAoB,EAAE,OAAgC,EAAE,KAAoB;YACjH,UAAU,GAAG,OAAO,UAAU,KAAK,WAAW,CAAC,CAAC;gBAC/C,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,2BAA2B,CAAC,KAAK,MAAM,CAAC,CAAC;gBAC5E,UAAU,CAAC;YACZ,MAAM,iBAAiB,GAAG,MAAM,IAAI,CAAC,sBAAsB,2BAAuC,MAAM,CAAC,CAAC;YAC1G,IAAI,UAAU,EAAE;gBACf,IAAI,iBAAiB,EAAE;oBACtB,OAAO,IAAI,CAAC,oBAAoB,2BAAuC,iBAAiB,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;iBAC1G;gBACD,OAAO,OAAO,CAAC,MAAM,CAAC,wBAAwB,MAAM,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;aACnE;YACD,OAAO,IAAI,CAAC,qBAAqB,2BAAuC,MAAM,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;QACjG,CAAC;QAED,cAAc,CAAC,MAA2B,EAAE,QAAa;YACxD,MAAM,gBAAgB,GAAG,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC;YAC7D,IAAI,CAAA,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAE,KAAK,aAAY,+CAAsB,EAAE;gBAC9D,OAAO,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,QAAQ,EAAE,gBAAgB,CAAC,KAAK,EAAE,gBAAgB,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,CAAC;aACrH;iBAAM;gBACN,OAAO,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,CAAC;aACnE;QACF,CAAC;QAED,KAAK,CAAC,4BAA4B,CAAC,OAAgB,EAAE,OAAmC;YAIvF,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAsD,iBAAiB,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;YAEtH,OAAO,mBAAK,MAAM,EAAE,IAAI,EAAE,cAAc,EAAE,IAAI,IAAK,OAAO,CAAE,CAAC;YAC7D,IAAI,OAAO,EAAE;gBACZ,MAAM,aAAa,GAAG,KAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,CAAwB,EAAE,IAA+D,CAAC,GAAG,QAAQ,CAAC;gBACjJ,MAAM,mBAAmB,GAAG,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,CAAC;gBACxE,MAAM,sBAAsB,GAAG,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,2CAA2C,CAAC,CAAC;gBAEjH,sCAAsC;gBACtC,MAAM,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,EAAE,aAAa,CAAC,CAAC;gBACjE,IAAI,sBAAsB,EAAE;oBAC3B,MAAM,iBAAiB,GAAG,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC;oBAC9D,MAAM,eAAe,GAAG,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,iBAAiB,CAAC,EAAE,gBAAuB,CAAC;oBACrG,MAAM,OAAO,CAAC,GAAG,CAAC;wBACjB,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,0BAA0B,EAAE,OAAO,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,aAAa,EAAE,IAAI,EAAE,cAAc,EAAE,IAAI,EAAE,QAAQ,EAAE,uBAAc,CAAC,QAAQ,EAAE,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAoB,EAAE,IAAqB,CAAC,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC;wBACxQ,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE,mBAAmB,EAAE,OAAO,EAAE,EAAE,eAAe,CAAC,EAAE,CAAC;qBAC7F,CAAC,CAAC;iBACH;qBAAM;oBACN,MAAM,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE,mBAAmB,EAAE,OAAO,EAAE,CAAC,CAAC;iBAChF;aAED;iBAAM;gBACN,MAAM,MAAM,GAAG,CAAC,MAAM,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,IAAI,CAAC,oBAAoB,CAAC,cAAc,CAAC,+CAAsB,CAAC,kCAAO,OAAO,KAAE,QAAQ,EAAE,uBAAc,CAAC,QAAQ,IAAG,CAA2B,CAAC;gBACpM,IAAI,OAAO,CAAC,KAAK,EAAE;oBAClB,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;iBAC7B;aACD;QAEF,CAAC;QAED,0BAA0B;YACzB,OAAO,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,0BAA0B,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAoB,EAAE,IAAqB,CAAC,EAAE,CAAC,CAAC;QACvJ,CAAC;QAEO,KAAK,CAAC,oBAAoB,CAAC,mBAAwC,EAAE,QAAa,EAAE,OAAgC,EAAE,QAAsB,IAAI,CAAC,kBAAkB,CAAC,WAAW;YACtL,MAAM,WAAW,GAAG,IAAI,CAAC,4BAA4B,CAAC,KAAK,CAAC,CAAC;YAC7D,IAAI,WAAW,EAAE;gBAChB,MAAM,mBAAmB,GAAG,WAAW,CAAC,OAAO,CAAC,QAAQ,CAAC;gBACzD,IAAI,mBAAmB,IAAI,mBAAmB,CAAC,MAAM,KAAK,QAAQ,CAAC,MAAM,EAAE;oBAC1E,OAAO,IAAI,CAAC,gBAAgB,CAAC,mBAAmB,EAAE,QAAQ,EAAE,WAAW,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;iBACzF;aACD;YACD,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,mBAAmB,EAAE,QAAQ,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;YACxF,IAAI,MAAM,KAAI,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,aAAa,CAAA,EAAE;gBACrC,MAAM,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;aACpG;YACD,OAAO,MAAM,CAAC;QACf,CAAC;QAEO,qBAAqB,CAAC,mBAAwC,EAAE,SAAe,EAAE,OAAgC,EAAE,QAAsB,IAAI,CAAC,kBAAkB,CAAC,WAAW;YACnL,MAAM,eAAe,mCACjB,OAAO,KACV,MAAM,EAAE,mBAAmB,EAC3B,SAAS,GACT,CAAC;YACF,OAAO,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC;QAC5C,CAAC;QAEO,cAAc,CAAC,mBAAwC,EAAE,QAAa,EAAE,OAAgC,EAAE,KAAoB;YACrI,MAAM,aAAa,GAAG,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,oCAAsB,CAAC,CAAC;YACnF,IAAI,aAAa,EAAE;gBAClB,OAAO,IAAI,CAAC,eAAe,CAAC,mBAAmB,EAAE,QAAQ,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;aAC3E;YAED,MAAM,mBAAmB,GAAG,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,6CAA+B,CAAC,CAAC;YAElG,OAAO,IAAI,CAAC,sCAAsC,CAAC,mBAAmB,EAAE,QAAQ,CAAC;iBAC/E,IAAI,CAAC,2BAA2B,CAAC,EAAE;gBACnC,OAAO,mCAAQ,OAAO,KAAE,MAAM,EAAE,IAAI,GAAE,CAAC;gBAEvC,IAAI,mBAAmB,EAAE;oBACxB,MAAM,iBAAiB,GAAG,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC;oBAC9D,MAAM,eAAe,GAAG,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,iBAAiB,CAAC,EAAE,gBAAuB,CAAC;oBACrG,OAAO,OAAO,CAAC,GAAG,CAAC;wBAClB,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,0BAA0B,EAAE,OAAO,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,aAAa,EAAE,IAAI,EAAE,cAAc,EAAE,IAAI,EAAE,QAAQ,EAAE,uBAAc,CAAC,QAAQ,EAAE,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAiB,EAAE,IAAkB,CAAC,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC;wBAClQ,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,2BAA2B,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,cAAc,EAAE,IAAI,EAAE,QAAQ,EAAE,uBAAc,CAAC,QAAQ,EAAE,EAAE,eAAe,CAAC,EAAE,CAAC;qBACzJ,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,aAAa,EAAE,MAAM,CAAC,EAAE,EAAE,CAAC,CAAA,GAAA,2BAAmB,CAAA,CAAC,MAAM,CAAC,CAAC,CAAC;iBAClE;qBAAM;oBACN,OAAO,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,2BAA2B,EAAE,mCAAqB,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,KAAK,CAAC,CAAC;iBAChH;YACF,CAAC,CAAC,CAAC;QACL,CAAC;QAEO,eAAe,CAAC,mBAAwC,EAAE,QAAa,EAAE,OAAgC,EAAE,KAAoB;YACtI,OAAO,IAAI,CAAC,sCAAsC,CAAC,mBAAmB,EAAE,QAAQ,CAAC;iBAC/E,IAAI,CAAC,2BAA2B,CAAC,EAAE;gBACnC,IAAI,CAAC,OAAO,EAAE;oBACb,OAAO,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;iBAC3B;qBAAM;oBACN,OAAO,mCAAQ,OAAO,KAAE,MAAM,EAAE,IAAI,GAAE,CAAC;iBACvC;gBAED,MAAM,6BAA6B,GAAG,IAAI,CAAC,oBAAoB,CAAC,cAAc,CAAC,sDAA6B,EAAE,IAAI,CAAC,0BAA0B,CAAC,mBAAmB,CAAC,CAAC,CAAC;gBACpK,MAAM,sBAAsB,GAAG,IAAI,+CAAsB,CAAC,IAAI,CAAC,6BAA6B,CAAC,mBAAmB,EAAE,QAAQ,CAAC,EAAE,2BAA2B,CAAC,cAAc,EAAE,EAAE,6BAA6B,EAAe,2BAA2B,CAAC,CAAC;gBACpP,IAAI,CAAC,uBAAuB,GAAG,sBAAsB,CAAC;gBACtD,OAAO,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,sBAAsB,EAAE,mCAAqB,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,KAAK,CAAC,CAAC;YAC5G,CAAC,CAAC,CAAC;QACL,CAAC;QAEM,0BAA0B;YAChC,OAAO,IAAI,CAAC,oBAAoB,CAAC,cAAc,CAAC,wCAAoB,EAAE,IAAI,CAAC,kBAAkB,oBAAgC,CAAC,CAAC;QAChI,CAAC;QAEO,KAAK,CAAC,gBAAgB,CAAC,MAA2B,EAAE,QAAa,EAAE,KAA6B,EAAE,KAAmB,EAAE,OAAgC;YAC9J,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;YACxE,IAAI,CAAC,WAAW,EAAE;gBACjB,OAAO,OAAO,CAAC,MAAM,CAAC,0BAA0B,QAAQ,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;aACvE;YACD,OAAO,IAAI,CAAC,sCAAsC,CAAC,MAAM,EAAE,WAAW,CAAC;iBACrE,IAAI,CAAC,OAAO,CAAC,EAAE;gBACf,OAAO,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;oBACxC,MAAM,WAAW,GAAG,IAAI,+CAAsB,CAAC,IAAI,CAAC,6BAA6B,CAAC,MAAM,EAAE,QAAQ,CAAC,EAAE,OAAO,CAAC,cAAc,EAAE,EAAE,IAAI,CAAC,oBAAoB,CAAC,cAAc,CAAC,sDAA6B,EAAE,IAAI,CAAC,0BAA0B,CAAC,MAAM,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;oBAE1P,OAAO,KAAK,CAAC,cAAc,CAAC,CAAC;4BAC5B,MAAM,EAAE,KAAK;4BACb,WAAW,EAAE,WAAW;4BACxB,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC,mCAAqB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS;yBACpE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;wBACb,IAAI,CAAC,uBAAuB,GAAG,WAAW,CAAC;wBAC3C,OAAO,KAAK,CAAC,gBAAiB,CAAC;oBAChC,CAAC,CAAC,CAAC;gBACJ,CAAC,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;QACL,CAAC;QAEO,4BAA4B,CAAC,QAAsB,IAAI,CAAC,kBAAkB,CAAC,WAAW;YAC7F,OAA+B,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,YAAY,+CAAsB,CAAC,CAAC,CAAC,CAAC,CAAC;QAClG,CAAC;QAEO,0CAA0C,CAAC,QAAa;YAC/D,IAAI,IAAI,CAAC,oBAAoB,CAAC,QAAQ,EAAE,KAAK,QAAQ,CAAC,QAAQ,EAAE,EAAE;gBACjE,0BAAsC;aACtC;YAED,MAAM,yBAAyB,GAAG,IAAI,CAAC,yBAAyB,CAAC;YACjE,IAAI,yBAAyB,IAAI,yBAAyB,CAAC,QAAQ,EAAE,KAAK,QAAQ,CAAC,QAAQ,EAAE,EAAE;gBAC9F,yBAAqC;aACrC;YAED,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;YAChE,IAAI,MAAM,EAAE;gBACX,gCAA4C;aAC5C;YAED,0BAAsC;QACvC,CAAC;QAEO,iDAAiD,CAAC,GAAQ;YACjE,OAAO,IAAI,CAAC,kCAAkC,CAAC,GAAG,CAAC,CAAC,CAAC;kCACtB,CAAC;gBAC/B,IAAI,CAAC,+BAA+B,CAAC,GAAG,CAAC,CAAC,CAAC;6CACL,CAAC;sCACR,CAAC;QAClC,CAAC;QAEO,yBAAyB,CAAC,GAAQ;YACzC,OAAO,IAAI,CAAC,6BAA6B,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,kCAAkC,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,+BAA+B,CAAC,GAAG,CAAC,CAAC;QAC7I,CAAC;QAEO,6BAA6B,CAAC,GAAQ;YAC7C,OAAO,GAAG,CAAC,SAAS,KAAK,iBAAiB,IAAI,GAAG,CAAC,MAAM,KAAK,OAAO,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,2BAA2B,CAAC,CAAC;QACtI,CAAC;QAEO,kCAAkC,CAAC,GAAQ;YAClD,OAAO,GAAG,CAAC,SAAS,KAAK,iBAAiB,IAAI,GAAG,CAAC,MAAM,KAAK,OAAO,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,oCAAoC,CAAC,CAAC;QAC/I,CAAC;QAEO,+BAA+B,CAAC,GAAQ;YAC/C,OAAO,GAAG,CAAC,SAAS,KAAK,iBAAiB,IAAI,GAAG,CAAC,MAAM,KAAK,OAAO,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,mCAAmC,CAAC,CAAC;QAC9I,CAAC;QAEO,0BAA0B,CAAC,mBAAwC;YAC1E,QAAQ,mBAAmB,EAAE;gBAC5B;oBACC,OAAO,SAAG,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,OAAO,CAAC,OAAO,CAAC,MAAM,EAAE,SAAS,EAAE,iBAAiB,EAAE,IAAI,EAAE,IAAI,IAAI,CAAC,mCAAmC,EAAE,yBAAyB,EAAE,CAAC,CAAC;gBAClK;oBACC,OAAO,SAAG,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,OAAO,CAAC,OAAO,CAAC,MAAM,EAAE,SAAS,EAAE,iBAAiB,EAAE,IAAI,EAAE,IAAI,IAAI,CAAC,gCAAgC,EAAE,wBAAwB,EAAE,CAAC,CAAC;aAC9J;YACD,OAAO,SAAG,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,OAAO,CAAC,OAAO,CAAC,MAAM,EAAE,SAAS,EAAE,iBAAiB,EAAE,IAAI,EAAE,IAAI,IAAI,CAAC,8BAA8B,EAAE,gBAAgB,EAAE,CAAC,CAAC;QACpJ,CAAC;QAEO,6BAA6B,CAAC,MAA2B,EAAE,QAAa;YAC/E,MAAM,IAAI,GAAG,CAAA,GAAA,mCAAqB,CAAA,CAAC,MAAM,EAAE,QAAQ,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;YAC1E,OAAO,MAAM,6BAAyC,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAoB,EAAE,IAAuB,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QACnI,CAAC;QAEO,sCAAsC,CAAC,MAA2B,EAAE,QAAa;YACxF,OAAO,IAAI,CAAC,yBAAyB,CAAC,MAAM,EAAE,QAAQ,CAAC;iBACrD,IAAI,CAAC,GAAG,EAAE,CAAc,IAAI,CAAC,aAAa,CAAC,iBAAiB,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;QAC/E,CAAC;QAEO,iCAAiC,CAAC,mBAAwC,EAAE,WAAgB;YACnG,MAAM,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC;YACrD,IAAI,SAAS,CAAC,aAAa,IAAI,SAAS,CAAC,aAAa,CAAC,QAAQ,EAAE,KAAK,WAAW,CAAC,QAAQ,EAAE,EAAE;gBAC7F,OAAO,IAAI,CAAC,wBAAwB,CAAC,oBAAoB,CAAC,WAAW,CAAC;qBACpE,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,IAAI,CAAC,oBAAoB,CAAC,cAAc,CAAC,qDAAiC,EAAE,SAAS,EAAE,mBAAmB,CAAC,CAAC,CAAC;aACjI;YACD,OAAO,IAAI,CAAC,wBAAwB,CAAC,oBAAoB,CAAC,WAAW,CAAC;iBACpE,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,IAAI,CAAC,oBAAoB,CAAC,cAAc,CAAC,uCAAmB,EAAE,SAAS,EAAE,mBAAmB,CAAC,CAAC,CAAC;QACpH,CAAC;QAEO,gCAAgC,CAAC,kBAAuB;YAC/D,OAAO,IAAI,CAAC,wBAAwB,CAAC,oBAAoB,CAAC,kBAAkB,CAAC;iBAC3E,IAAI,CAAC,SAAS,CAAC,EAAE;gBACjB,MAAM,MAAM,GAAG,IAAI,CAAC,iDAAiD,CAAC,kBAAkB,CAAC,CAAC;gBAC1F,OAAO,IAAI,CAAC,oBAAoB,CAAC,cAAc,CAAC,8CAA0B,EAAE,kBAAkB,EAAE,SAAS,EAAE,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC,CAAC;YAC7I,CAAC,CAAC,CAAC;QACL,CAAC;QAEO,kBAAkB,CAAC,MAA2B;YACrD,IAAI,MAAM,sBAAkC,EAAE;gBAC7C,IAAI,CAAC,IAAI,CAAC,qCAAqC,EAAE;oBAChD,IAAI,CAAC,qCAAqC,GAAG,IAAI,mCAAe,CAAC,IAAI,CAAC,2BAA2B,EAAE,EAAE,MAAM,CAAC,CAAC;iBAC7G;gBACD,OAAO,IAAI,CAAC,qCAAqC,CAAC;aAClD;YACD,IAAI,MAAM,6BAAyC,EAAE;gBACpD,IAAI,CAAC,IAAI,CAAC,kCAAkC,EAAE;oBAC7C,IAAI,CAAC,kCAAkC,GAAG,IAAI,mCAAe,CAAC,IAAI,CAAC,2BAA2B,EAAE,EAAE,MAAM,CAAC,CAAC;iBAC1G;gBACD,OAAO,IAAI,CAAC,kCAAkC,CAAC;aAC/C;YACD,IAAI,CAAC,IAAI,CAAC,gCAAgC,EAAE;gBAC3C,IAAI,CAAC,gCAAgC,GAAG,IAAI,mCAAe,CAAC,IAAI,CAAC,2BAA2B,EAAE,EAAE,MAAM,CAAC,CAAC;aACxG;YACD,OAAO,IAAI,CAAC,gCAAgC,CAAC;QAC9C,CAAC;QAEM,KAAK,CAAC,sBAAsB,CAAC,mBAAwC,EAAE,QAAc;YAC3F,QAAQ,mBAAmB,EAAE;gBAC5B,kBAA8B;gBAC9B;oBACC,OAAO,IAAI,CAAC,oBAAoB,CAAC;gBAClC;oBACC,MAAM,iBAAiB,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,cAAc,EAAE,CAAC;oBACzE,OAAO,iBAAiB,CAAC,CAAC,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC;gBAClE;oBACC,OAAO,IAAI,CAAC,yBAAyB,CAAC;gBACvC;oBACC,IAAI,QAAQ,EAAE;wBACb,OAAO,IAAI,CAAC,yBAAyB,CAAC,QAAQ,CAAC,CAAC;qBAChD;aACF;YACD,OAAO,IAAI,CAAC;QACb,CAAC;QAEO,KAAK,CAAC,yBAAyB,CAAC,MAA2B,EAAE,QAAa;YACjF,IAAI,IAAI,CAAC,cAAc,CAAC,iBAAiB,EAAE,sBAA6B,IAAI,MAAM,sBAAkC,EAAE;gBACrH,MAAM,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC,aAAa,CAAC;gBACzE,IAAI,CAAC,eAAe,EAAE;oBACrB,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;iBAClC;gBAED,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,eAAe,CAAC;qBAC/C,IAAI,CAAC,OAAO,CAAC,EAAE;oBACf,IAAI,MAAM,CAAC,IAAI,CAAC,CAAA,GAAA,YAAK,CAAA,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE;wBACjE,OAAO,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,UAAU,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;qBACrH;oBACD,OAAO,SAAS,CAAC;gBAClB,CAAC,CAAC,CAAC;aACJ;YACD,MAAM,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,4BAA4B,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;QACtF,CAAC;QAEO,KAAK,CAAC,iBAAiB,CAAC,QAAa,EAAE,QAAgB;YAC9D,IAAI;gBACH,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,cAAc,EAAE,IAAI,EAAE,CAAC,CAAC;aACpE;YAAC,OAAO,KAAK,EAAE;gBACf,IAAyB,KAAM,CAAC,mBAAmB,2BAAuC,EAAE;oBAC3F,IAAI;wBACH,MAAM,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;wBACrD,OAAO;qBACP;oBAAC,OAAO,MAAM,EAAE;wBAChB,MAAM,IAAI,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAqB,EAAE,IAA+B,EAAE,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,QAAQ,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,EAAE,CAAA,GAAA,wBAAe,CAAA,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;qBAC5K;iBACD;qBAAM;oBACN,MAAM,KAAK,CAAC;iBACZ;aAED;QACF,CAAC;QAEO,2BAA2B;YAClC,OAAO;gBACN,gBAAgB;gBAChB,iBAAiB;gBACjB,mBAAmB;gBACnB,gBAAgB;gBAChB,yBAAyB;gBACzB,oBAAoB;gBACpB,4BAA4B;gBAC5B,qBAAqB;gBACrB,iBAAiB;gBACjB,eAAe;gBACf,oBAAoB;gBACpB,gCAAgC;aAChC,CAAC;QACH,CAAC;QAEO,KAAK,CAAC,aAAa,CAAC,UAAkB,EAAE,IAAa,EAAE,MAAmB,EAAE,gBAAqB;YACxG,MAAM,UAAU,GAAG,MAAM,CAAC,CAAC,CAAC,CAAA,GAAA,6BAAa,CAAA,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;YACtE,IAAI,CAAC,UAAU,EAAE;gBAChB,OAAO;aACP;YACD,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,4BAA4B,CAAC,gBAAgB,CAAC,CAAC;YAChF,IAAI,CAAC,aAAa,EAAE;gBACnB,OAAO;aACP;YACD,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,UAAU,EAAE,IAAI,EAAE,aAAa,EAAE,UAAU,CAAC,CAAC;YAC7F,IAAI,QAAQ,EAAE;gBACb,UAAU,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;gBACjC,UAAU,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC;gBAC3C,UAAU,CAAC,KAAK,EAAE,CAAC;gBACnB,IAAI,IAAI,EAAE;oBACT,MAAM,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,8BAA8B,CAAC,CAAC;iBACzE;aACD;QACF,CAAC;QAEO,KAAK,CAAC,mBAAmB,CAAC,UAAkB,EAAE,IAAa,EAAE,aAAgD,EAAE,UAAuB;YAC7I,MAAM,KAAK,GAAG,UAAU,CAAC,QAAQ,EAAE,CAAC;YACpC,IAAI,CAAC,KAAK,EAAE;gBACX,OAAO,IAAI,CAAC;aACZ;YACD,MAAM,MAAM,GAAG,mBAAQ,CAAC,EAAE,CAAyB,kCAAU,CAAC,aAAa,CAAC,CAAC,0BAA0B,EAAE,CAAC,UAAU,CAAC,CAAC;YACtH,IAAI,CAAC,MAAM,IAAI,CAAC,iDAAyB,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;gBAC3D,OAAO,IAAI,CAAC;aACZ;YAED,IAAI,QAAQ,GAAG,IAAI,CAAC;YACpB,MAAM,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,yBAAyB,CAAC;YACvE,IAAI,OAAO,GAAG,aAAa,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;YACtD,IAAI,CAAC,OAAO,IAAI,IAAI,EAAE;gBACrB,MAAM,YAAY,GAAG,CAAC,IAAI,KAAK,QAAQ,IAAI,IAAI,KAAK,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAA,GAAA,uCAAe,CAAA,CAAC,IAAI,CAAC,CAAC;gBAClJ,IAAI,YAAY,KAAK,SAAS,EAAE;oBAC/B,MAAM,GAAG,GAAG,aAAa,YAAY,qDAAiC,CAAC,CAAC,CAAC,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;oBACjH,MAAM,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,aAAa,CAAC,GAAI,EAAE,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,YAAY,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;oBACrG,OAAO,GAAG,aAAa,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;iBAClD;aACD;YAED,IAAI,OAAO,EAAE;gBACZ,IAAI,IAAI,EAAE;oBACT,QAAQ,GAAG,EAAE,UAAU,EAAE,OAAO,CAAC,UAAU,CAAC,eAAe,EAAE,MAAM,EAAE,OAAO,CAAC,UAAU,CAAC,WAAW,GAAG,CAAC,EAAE,CAAC;oBAC1G,IAAI,IAAI,KAAK,QAAQ,IAAI,IAAI,KAAK,OAAO,EAAE;wBAC1C,UAAU,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;wBACjC,MAAM,kCAAmB,CAAC,eAAe,CAAC,gBAAgB,CAAC,IAAI,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;wBACnF,QAAQ,GAAG,EAAE,UAAU,EAAE,QAAQ,CAAC,UAAU,GAAG,CAAC,EAAE,MAAM,EAAE,KAAK,CAAC,gBAAgB,CAAC,QAAQ,CAAC,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC;wBAC5G,MAAM,wBAAwB,GAAG,KAAK,CAAC,+BAA+B,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;wBAC5F,IAAI,wBAAwB,EAAE;4BAC7B,+CAA+C;4BAC/C,UAAU,CAAC,WAAW,CAAC,EAAE,UAAU,EAAE,QAAQ,CAAC,UAAU,EAAE,MAAM,EAAE,wBAAwB,EAAE,CAAC,CAAC;4BAC9F,MAAM,kCAAmB,CAAC,eAAe,CAAC,gBAAgB,CAAC,IAAI,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;4BACnF,QAAQ,GAAG,EAAE,UAAU,EAAE,QAAQ,CAAC,UAAU,EAAE,MAAM,EAAE,KAAK,CAAC,gBAAgB,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC;yBACpG;qBACD;iBACD;qBAAM;oBACN,QAAQ,GAAG,EAAE,UAAU,EAAE,OAAO,CAAC,QAAQ,CAAC,eAAe,EAAE,MAAM,EAAE,OAAO,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;iBAClG;aACD;YAED,OAAO,QAAQ,CAAC;QACjB,CAAC;QAEe,OAAO;YACtB,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;YACvB,KAAK,CAAC,OAAO,EAAE,CAAC;QACjB,CAAC;KACD,CAAA;IAlmBY,kBAAkB;QAgB5B,WAAA,8BAAc,CAAA;QACd,WAAA,0CAAoB,CAAA;QACpB,WAAA,4BAAgB,CAAA;QAChB,WAAA,qCAAqB,CAAA;QACrB,WAAA,mCAAoB,CAAA;QACpB,WAAA,oCAAwB,CAAA;QACxB,WAAA,qCAAqB,CAAA;QACrB,WAAA,iCAAmB,CAAA;QACnB,WAAA,6BAAiB,CAAA;QACjB,WAAA,mCAAiB,CAAA;QACjB,YAAA,+BAAkB,CAAA;QAClB,YAAA,4BAAa,CAAA;QACb,YAAA,iCAAmB,CAAA;QACnB,YAAA,0BAAY,CAAA;QACZ,YAAA,qBAAa,CAAA;QACb,YAAA,wCAAmB,CAAA;QACnB,YAAA,0BAAe,CAAA;OAhCL,kBAAkB,CAkmB9B;IAlmBY,gDAAkB;IAomB/B,CAAA,GAAA,8BAAiB,CAAA,CAAC,iCAAmB,EAAE,kBAAkB,CAAC,CAAC","file":"preferencesService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from 'vs/base/common/event';\nimport { parse } from 'vs/base/common/json';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport * as network from 'vs/base/common/network';\nimport { URI } from 'vs/base/common/uri';\nimport { getCodeEditor, ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { IPosition } from 'vs/editor/common/core/position';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { ITextModelService } from 'vs/editor/common/services/resolverService';\nimport * as nls from 'vs/nls';\nimport { ConfigurationTarget, IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { FileOperationError, FileOperationResult } from 'vs/platform/files/common/files';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { ILabelService } from 'vs/platform/label/common/label';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IWorkspaceContextService, WorkbenchState } from 'vs/platform/workspace/common/workspace';\nimport { EditorInput, IEditorPane } from 'vs/workbench/common/editor';\nimport { IJSONEditingService } from 'vs/workbench/services/configuration/common/jsonEditing';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { GroupDirection, IEditorGroup, IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { DEFAULT_SETTINGS_EDITOR_SETTING, FOLDER_SETTINGS_PATH, getSettingsTargetName, IKeybindingsEditorOptions, IKeybindingsEditorPane, IPreferencesEditorModel, IPreferencesService, ISetting, ISettingsEditorOptions, SettingsEditorOptions, USE_SPLIT_JSON_SETTING } from 'vs/workbench/services/preferences/common/preferences';\nimport { DefaultPreferencesEditorInput, KeybindingsEditorInput, PreferencesEditorInput, SettingsEditor2Input } from 'vs/workbench/services/preferences/browser/preferencesEditorInput';\nimport { defaultKeybindingsContents, DefaultKeybindingsEditorModel, DefaultSettings, DefaultSettingsEditorModel, Settings2EditorModel, SettingsEditorModel, WorkspaceConfigurationEditorModel, DefaultRawSettingsEditorModel } from 'vs/workbench/services/preferences/common/preferencesModels';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';\nimport { withNullAsUndefined } from 'vs/base/common/types';\nimport { getDefaultValue, IConfigurationRegistry, Extensions, OVERRIDE_PROPERTY_PATTERN } from 'vs/platform/configuration/common/configurationRegistry';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { CoreEditingCommands } from 'vs/editor/browser/controller/coreCommands';\nimport { getErrorMessage } from 'vs/base/common/errors';\nimport { EditorOverride } from 'vs/platform/editor/common/editor';\n\nconst emptyEditableSettingsContent = '{\\n}';\n\nexport class PreferencesService extends Disposable implements IPreferencesService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate lastOpenedSettingsInput: PreferencesEditorInput | null = null;\n\n\tprivate readonly _onDispose = this._register(new Emitter<void>());\n\n\tprivate _defaultUserSettingsUriCounter = 0;\n\tprivate _defaultUserSettingsContentModel: DefaultSettings | undefined;\n\tprivate _defaultWorkspaceSettingsUriCounter = 0;\n\tprivate _defaultWorkspaceSettingsContentModel: DefaultSettings | undefined;\n\tprivate _defaultFolderSettingsUriCounter = 0;\n\tprivate _defaultFolderSettingsContentModel: DefaultSettings | undefined;\n\n\tconstructor(\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IEditorGroupsService private readonly editorGroupService: IEditorGroupsService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@ITextModelService private readonly textModelResolverService: ITextModelService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@IJSONEditingService private readonly jsonEditingService: IJSONEditingService,\n\t\t@IModeService private readonly modeService: IModeService,\n\t\t@ILabelService private readonly labelService: ILabelService,\n\t\t@IRemoteAgentService private readonly remoteAgentService: IRemoteAgentService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t) {\n\t\tsuper();\n\t\t// The default keybindings.json updates based on keyboard layouts, so here we make sure\n\t\t// if a model has been given out we update it accordingly.\n\t\tthis._register(keybindingService.onDidUpdateKeybindings(() => {\n\t\t\tconst model = modelService.getModel(this.defaultKeybindingsResource);\n\t\t\tif (!model) {\n\t\t\t\t// model has not been given out => nothing to do\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tmodelService.updateModel(model, defaultKeybindingsContents(keybindingService));\n\t\t}));\n\t}\n\n\treadonly defaultKeybindingsResource = URI.from({ scheme: network.Schemas.vscode, authority: 'defaultsettings', path: '/keybindings.json' });\n\tprivate readonly defaultSettingsRawResource = URI.from({ scheme: network.Schemas.vscode, authority: 'defaultsettings', path: '/defaultSettings.json' });\n\n\tget userSettingsResource(): URI {\n\t\treturn this.environmentService.settingsResource;\n\t}\n\n\tget workspaceSettingsResource(): URI | null {\n\t\tif (this.contextService.getWorkbenchState() === WorkbenchState.EMPTY) {\n\t\t\treturn null;\n\t\t}\n\t\tconst workspace = this.contextService.getWorkspace();\n\t\treturn workspace.configuration || workspace.folders[0].toResource(FOLDER_SETTINGS_PATH);\n\t}\n\n\tget settingsEditor2Input(): SettingsEditor2Input {\n\t\treturn this.instantiationService.createInstance(SettingsEditor2Input);\n\t}\n\n\tgetFolderSettingsResource(resource: URI): URI | null {\n\t\tconst folder = this.contextService.getWorkspaceFolder(resource);\n\t\treturn folder ? folder.toResource(FOLDER_SETTINGS_PATH) : null;\n\t}\n\n\tresolveModel(uri: URI): Promise<ITextModel | null> {\n\t\tif (this.isDefaultSettingsResource(uri)) {\n\n\t\t\tconst target = this.getConfigurationTargetFromDefaultSettingsResource(uri);\n\t\t\tconst languageSelection = this.modeService.create('jsonc');\n\t\t\tconst model = this._register(this.modelService.createModel('', languageSelection, uri));\n\n\t\t\tlet defaultSettings: DefaultSettings | undefined;\n\t\t\tthis.configurationService.onDidChangeConfiguration(e => {\n\t\t\t\tif (e.source === ConfigurationTarget.DEFAULT) {\n\t\t\t\t\tconst model = this.modelService.getModel(uri);\n\t\t\t\t\tif (!model) {\n\t\t\t\t\t\t// model has not been given out => nothing to do\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tdefaultSettings = this.getDefaultSettings(target);\n\t\t\t\t\tthis.modelService.updateModel(model, defaultSettings.getContent(true));\n\t\t\t\t\tdefaultSettings._onDidChange.fire();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Check if Default settings is already created and updated in above promise\n\t\t\tif (!defaultSettings) {\n\t\t\t\tdefaultSettings = this.getDefaultSettings(target);\n\t\t\t\tthis.modelService.updateModel(model, defaultSettings.getContent(true));\n\t\t\t}\n\n\t\t\treturn Promise.resolve(model);\n\t\t}\n\n\t\tif (this.defaultSettingsRawResource.toString() === uri.toString()) {\n\t\t\tconst defaultRawSettingsEditorModel = this.instantiationService.createInstance(DefaultRawSettingsEditorModel, this.getDefaultSettings(ConfigurationTarget.USER_LOCAL));\n\t\t\tconst languageSelection = this.modeService.create('jsonc');\n\t\t\tconst model = this._register(this.modelService.createModel(defaultRawSettingsEditorModel.content, languageSelection, uri));\n\t\t\treturn Promise.resolve(model);\n\t\t}\n\n\t\tif (this.defaultKeybindingsResource.toString() === uri.toString()) {\n\t\t\tconst defaultKeybindingsEditorModel = this.instantiationService.createInstance(DefaultKeybindingsEditorModel, uri);\n\t\t\tconst languageSelection = this.modeService.create('jsonc');\n\t\t\tconst model = this._register(this.modelService.createModel(defaultKeybindingsEditorModel.content, languageSelection, uri));\n\t\t\treturn Promise.resolve(model);\n\t\t}\n\n\t\treturn Promise.resolve(null);\n\t}\n\n\tasync createPreferencesEditorModel(uri: URI): Promise<IPreferencesEditorModel<any> | null> {\n\t\tif (this.isDefaultSettingsResource(uri)) {\n\t\t\treturn this.createDefaultSettingsEditorModel(uri);\n\t\t}\n\n\t\tif (this.userSettingsResource.toString() === uri.toString()) {\n\t\t\treturn this.createEditableSettingsEditorModel(ConfigurationTarget.USER_LOCAL, uri);\n\t\t}\n\n\t\tconst workspaceSettingsUri = await this.getEditableSettingsURI(ConfigurationTarget.WORKSPACE);\n\t\tif (workspaceSettingsUri && workspaceSettingsUri.toString() === uri.toString()) {\n\t\t\treturn this.createEditableSettingsEditorModel(ConfigurationTarget.WORKSPACE, workspaceSettingsUri);\n\t\t}\n\n\t\tif (this.contextService.getWorkbenchState() === WorkbenchState.WORKSPACE) {\n\t\t\tconst settingsUri = await this.getEditableSettingsURI(ConfigurationTarget.WORKSPACE_FOLDER, uri);\n\t\t\tif (settingsUri && settingsUri.toString() === uri.toString()) {\n\t\t\t\treturn this.createEditableSettingsEditorModel(ConfigurationTarget.WORKSPACE_FOLDER, uri);\n\t\t\t}\n\t\t}\n\n\t\tconst remoteEnvironment = await this.remoteAgentService.getEnvironment();\n\t\tconst remoteSettingsUri = remoteEnvironment ? remoteEnvironment.settingsPath : null;\n\t\tif (remoteSettingsUri && remoteSettingsUri.toString() === uri.toString()) {\n\t\t\treturn this.createEditableSettingsEditorModel(ConfigurationTarget.USER_REMOTE, uri);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\topenRawDefaultSettings(): Promise<IEditorPane | undefined> {\n\t\treturn this.editorService.openEditor({ resource: this.defaultSettingsRawResource });\n\t}\n\n\topenRawUserSettings(): Promise<IEditorPane | undefined> {\n\t\treturn this.editorService.openEditor({ resource: this.userSettingsResource });\n\t}\n\n\topenSettings(jsonEditor: boolean | undefined, query: string | undefined): Promise<IEditorPane | undefined> {\n\t\tjsonEditor = typeof jsonEditor === 'undefined' ?\n\t\t\tthis.configurationService.getValue('workbench.settings.editor') === 'json' :\n\t\t\tjsonEditor;\n\n\t\tif (!jsonEditor) {\n\t\t\treturn this.openSettings2({ query: query });\n\t\t}\n\n\t\tconst editorInput = this.getActiveSettingsEditorInput() || this.lastOpenedSettingsInput;\n\t\tconst resource = editorInput ? editorInput.primary.resource! : this.userSettingsResource;\n\t\tconst target = this.getConfigurationTargetFromSettingsResource(resource);\n\t\treturn this.openOrSwitchSettings(target, resource, { query: query });\n\t}\n\n\tprivate openSettings2(options?: ISettingsEditorOptions): Promise<IEditorPane> {\n\t\tconst input = this.settingsEditor2Input;\n\t\toptions = {\n\t\t\t...options,\n\t\t\tfocusSearch: true\n\t\t};\n\t\treturn this.editorService.openEditor(input, options ? SettingsEditorOptions.create(options) : { override: EditorOverride.DISABLED })\n\t\t\t.then(() => this.editorGroupService.activeGroup.activeEditorPane!);\n\t}\n\n\topenGlobalSettings(jsonEditor?: boolean, options?: ISettingsEditorOptions, group?: IEditorGroup): Promise<IEditorPane | undefined> {\n\t\tjsonEditor = typeof jsonEditor === 'undefined' ?\n\t\t\tthis.configurationService.getValue('workbench.settings.editor') === 'json' :\n\t\t\tjsonEditor;\n\n\t\treturn jsonEditor ?\n\t\t\tthis.openOrSwitchSettings(ConfigurationTarget.USER_LOCAL, this.userSettingsResource, options, group) :\n\t\t\tthis.openOrSwitchSettings2(ConfigurationTarget.USER_LOCAL, undefined, options, group);\n\t}\n\n\tasync openRemoteSettings(): Promise<IEditorPane | undefined> {\n\t\tconst environment = await this.remoteAgentService.getEnvironment();\n\t\tif (environment) {\n\t\t\tawait this.createIfNotExists(environment.settingsPath, emptyEditableSettingsContent);\n\t\t\treturn this.editorService.openEditor({ resource: environment.settingsPath, options: { pinned: true, revealIfOpened: true, override: EditorOverride.DISABLED } });\n\t\t}\n\t\treturn undefined;\n\t}\n\n\topenWorkspaceSettings(jsonEditor?: boolean, options?: ISettingsEditorOptions, group?: IEditorGroup): Promise<IEditorPane | undefined> {\n\t\tjsonEditor = typeof jsonEditor === 'undefined' ?\n\t\t\tthis.configurationService.getValue('workbench.settings.editor') === 'json' :\n\t\t\tjsonEditor;\n\n\t\tif (!this.workspaceSettingsResource) {\n\t\t\tthis.notificationService.info(nls.localize('openFolderFirst', \"Open a folder or workspace first to create workspace or folder settings.\"));\n\t\t\treturn Promise.reject(null);\n\t\t}\n\n\t\treturn jsonEditor ?\n\t\t\tthis.openOrSwitchSettings(ConfigurationTarget.WORKSPACE, this.workspaceSettingsResource, options, group) :\n\t\t\tthis.openOrSwitchSettings2(ConfigurationTarget.WORKSPACE, undefined, options, group);\n\t}\n\n\tasync openFolderSettings(folder: URI, jsonEditor?: boolean, options?: ISettingsEditorOptions, group?: IEditorGroup): Promise<IEditorPane | undefined> {\n\t\tjsonEditor = typeof jsonEditor === 'undefined' ?\n\t\t\tthis.configurationService.getValue('workbench.settings.editor') === 'json' :\n\t\t\tjsonEditor;\n\t\tconst folderSettingsUri = await this.getEditableSettingsURI(ConfigurationTarget.WORKSPACE_FOLDER, folder);\n\t\tif (jsonEditor) {\n\t\t\tif (folderSettingsUri) {\n\t\t\t\treturn this.openOrSwitchSettings(ConfigurationTarget.WORKSPACE_FOLDER, folderSettingsUri, options, group);\n\t\t\t}\n\t\t\treturn Promise.reject(`Invalid folder URI - ${folder.toString()}`);\n\t\t}\n\t\treturn this.openOrSwitchSettings2(ConfigurationTarget.WORKSPACE_FOLDER, folder, options, group);\n\t}\n\n\tswitchSettings(target: ConfigurationTarget, resource: URI): Promise<void> {\n\t\tconst activeEditorPane = this.editorService.activeEditorPane;\n\t\tif (activeEditorPane?.input instanceof PreferencesEditorInput) {\n\t\t\treturn this.doSwitchSettings(target, resource, activeEditorPane.input, activeEditorPane.group).then(() => undefined);\n\t\t} else {\n\t\t\treturn this.doOpenSettings(target, resource).then(() => undefined);\n\t\t}\n\t}\n\n\tasync openGlobalKeybindingSettings(textual: boolean, options?: IKeybindingsEditorOptions): Promise<void> {\n\t\ttype OpenKeybindingsClassification = {\n\t\t\ttextual: { classification: 'SystemMetaData', purpose: 'FeatureInsight', isMeasurement: true };\n\t\t};\n\t\tthis.telemetryService.publicLog2<{ textual: boolean }, OpenKeybindingsClassification>('openKeybindings', { textual });\n\n\t\toptions = { pinned: true, revealIfOpened: true, ...options };\n\t\tif (textual) {\n\t\t\tconst emptyContents = '// ' + nls.localize('emptyKeybindingsHeader', \"Place your key bindings in this file to override the defaults\") + '\\n[\\n]';\n\t\t\tconst editableKeybindings = this.environmentService.keybindingsResource;\n\t\t\tconst openDefaultKeybindings = !!this.configurationService.getValue('workbench.settings.openDefaultKeybindings');\n\n\t\t\t// Create as needed and open in editor\n\t\t\tawait this.createIfNotExists(editableKeybindings, emptyContents);\n\t\t\tif (openDefaultKeybindings) {\n\t\t\t\tconst activeEditorGroup = this.editorGroupService.activeGroup;\n\t\t\t\tconst sideEditorGroup = this.editorGroupService.addGroup(activeEditorGroup.id, GroupDirection.RIGHT);\n\t\t\t\tawait Promise.all([\n\t\t\t\t\tthis.editorService.openEditor({ resource: this.defaultKeybindingsResource, options: { pinned: true, preserveFocus: true, revealIfOpened: true, override: EditorOverride.DISABLED }, label: nls.localize('defaultKeybindings', \"Default Keybindings\"), description: '' }),\n\t\t\t\t\tthis.editorService.openEditor({ resource: editableKeybindings, options }, sideEditorGroup.id)\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tawait this.editorService.openEditor({ resource: editableKeybindings, options });\n\t\t\t}\n\n\t\t} else {\n\t\t\tconst editor = (await this.editorService.openEditor(this.instantiationService.createInstance(KeybindingsEditorInput), { ...options, override: EditorOverride.DISABLED })) as IKeybindingsEditorPane;\n\t\t\tif (options.query) {\n\t\t\t\teditor.search(options.query);\n\t\t\t}\n\t\t}\n\n\t}\n\n\topenDefaultKeybindingsFile(): Promise<IEditorPane | undefined> {\n\t\treturn this.editorService.openEditor({ resource: this.defaultKeybindingsResource, label: nls.localize('defaultKeybindings', \"Default Keybindings\") });\n\t}\n\n\tprivate async openOrSwitchSettings(configurationTarget: ConfigurationTarget, resource: URI, options?: ISettingsEditorOptions, group: IEditorGroup = this.editorGroupService.activeGroup): Promise<IEditorPane | undefined> {\n\t\tconst editorInput = this.getActiveSettingsEditorInput(group);\n\t\tif (editorInput) {\n\t\t\tconst editorInputResource = editorInput.primary.resource;\n\t\t\tif (editorInputResource && editorInputResource.fsPath !== resource.fsPath) {\n\t\t\t\treturn this.doSwitchSettings(configurationTarget, resource, editorInput, group, options);\n\t\t\t}\n\t\t}\n\t\tconst editor = await this.doOpenSettings(configurationTarget, resource, options, group);\n\t\tif (editor && options?.revealSetting) {\n\t\t\tawait this.revealSetting(options.revealSetting.key, !!options.revealSetting.edit, editor, resource);\n\t\t}\n\t\treturn editor;\n\t}\n\n\tprivate openOrSwitchSettings2(configurationTarget: ConfigurationTarget, folderUri?: URI, options?: ISettingsEditorOptions, group: IEditorGroup = this.editorGroupService.activeGroup): Promise<IEditorPane | undefined> {\n\t\tconst settingsOptions: ISettingsEditorOptions = {\n\t\t\t...options,\n\t\t\ttarget: configurationTarget,\n\t\t\tfolderUri\n\t\t};\n\t\treturn this.openSettings2(settingsOptions);\n\t}\n\n\tprivate doOpenSettings(configurationTarget: ConfigurationTarget, resource: URI, options?: ISettingsEditorOptions, group?: IEditorGroup): Promise<IEditorPane | undefined> {\n\t\tconst openSplitJSON = !!this.configurationService.getValue(USE_SPLIT_JSON_SETTING);\n\t\tif (openSplitJSON) {\n\t\t\treturn this.doOpenSplitJSON(configurationTarget, resource, options, group);\n\t\t}\n\n\t\tconst openDefaultSettings = !!this.configurationService.getValue(DEFAULT_SETTINGS_EDITOR_SETTING);\n\n\t\treturn this.getOrCreateEditableSettingsEditorInput(configurationTarget, resource)\n\t\t\t.then(editableSettingsEditorInput => {\n\t\t\t\toptions = { ...options, pinned: true };\n\n\t\t\t\tif (openDefaultSettings) {\n\t\t\t\t\tconst activeEditorGroup = this.editorGroupService.activeGroup;\n\t\t\t\t\tconst sideEditorGroup = this.editorGroupService.addGroup(activeEditorGroup.id, GroupDirection.RIGHT);\n\t\t\t\t\treturn Promise.all([\n\t\t\t\t\t\tthis.editorService.openEditor({ resource: this.defaultSettingsRawResource, options: { pinned: true, preserveFocus: true, revealIfOpened: true, override: EditorOverride.DISABLED }, label: nls.localize('defaultSettings', \"Default Settings\"), description: '' }),\n\t\t\t\t\t\tthis.editorService.openEditor(editableSettingsEditorInput, { pinned: true, revealIfOpened: true, override: EditorOverride.DISABLED }, sideEditorGroup.id)\n\t\t\t\t\t]).then(([defaultEditor, editor]) => withNullAsUndefined(editor));\n\t\t\t\t} else {\n\t\t\t\t\treturn this.editorService.openEditor(editableSettingsEditorInput, SettingsEditorOptions.create(options), group);\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tprivate doOpenSplitJSON(configurationTarget: ConfigurationTarget, resource: URI, options?: ISettingsEditorOptions, group?: IEditorGroup): Promise<IEditorPane | undefined> {\n\t\treturn this.getOrCreateEditableSettingsEditorInput(configurationTarget, resource)\n\t\t\t.then(editableSettingsEditorInput => {\n\t\t\t\tif (!options) {\n\t\t\t\t\toptions = { pinned: true };\n\t\t\t\t} else {\n\t\t\t\t\toptions = { ...options, pinned: true };\n\t\t\t\t}\n\n\t\t\t\tconst defaultPreferencesEditorInput = this.instantiationService.createInstance(DefaultPreferencesEditorInput, this.getDefaultSettingsResource(configurationTarget));\n\t\t\t\tconst preferencesEditorInput = new PreferencesEditorInput(this.getPreferencesEditorInputName(configurationTarget, resource), editableSettingsEditorInput.getDescription(), defaultPreferencesEditorInput, <EditorInput>editableSettingsEditorInput);\n\t\t\t\tthis.lastOpenedSettingsInput = preferencesEditorInput;\n\t\t\t\treturn this.editorService.openEditor(preferencesEditorInput, SettingsEditorOptions.create(options), group);\n\t\t\t});\n\t}\n\n\tpublic createSettings2EditorModel(): Settings2EditorModel {\n\t\treturn this.instantiationService.createInstance(Settings2EditorModel, this.getDefaultSettings(ConfigurationTarget.USER_LOCAL));\n\t}\n\n\tprivate async doSwitchSettings(target: ConfigurationTarget, resource: URI, input: PreferencesEditorInput, group: IEditorGroup, options?: ISettingsEditorOptions): Promise<IEditorPane> {\n\t\tconst settingsURI = await this.getEditableSettingsURI(target, resource);\n\t\tif (!settingsURI) {\n\t\t\treturn Promise.reject(`Invalid settings URI - ${resource.toString()}`);\n\t\t}\n\t\treturn this.getOrCreateEditableSettingsEditorInput(target, settingsURI)\n\t\t\t.then(toInput => {\n\t\t\t\treturn group.openEditor(input).then(() => {\n\t\t\t\t\tconst replaceWith = new PreferencesEditorInput(this.getPreferencesEditorInputName(target, resource), toInput.getDescription(), this.instantiationService.createInstance(DefaultPreferencesEditorInput, this.getDefaultSettingsResource(target)), toInput);\n\n\t\t\t\t\treturn group.replaceEditors([{\n\t\t\t\t\t\teditor: input,\n\t\t\t\t\t\treplacement: replaceWith,\n\t\t\t\t\t\toptions: options ? SettingsEditorOptions.create(options) : undefined\n\t\t\t\t\t}]).then(() => {\n\t\t\t\t\t\tthis.lastOpenedSettingsInput = replaceWith;\n\t\t\t\t\t\treturn group.activeEditorPane!;\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t}\n\n\tprivate getActiveSettingsEditorInput(group: IEditorGroup = this.editorGroupService.activeGroup): PreferencesEditorInput {\n\t\treturn <PreferencesEditorInput>group.editors.filter(e => e instanceof PreferencesEditorInput)[0];\n\t}\n\n\tprivate getConfigurationTargetFromSettingsResource(resource: URI): ConfigurationTarget {\n\t\tif (this.userSettingsResource.toString() === resource.toString()) {\n\t\t\treturn ConfigurationTarget.USER_LOCAL;\n\t\t}\n\n\t\tconst workspaceSettingsResource = this.workspaceSettingsResource;\n\t\tif (workspaceSettingsResource && workspaceSettingsResource.toString() === resource.toString()) {\n\t\t\treturn ConfigurationTarget.WORKSPACE;\n\t\t}\n\n\t\tconst folder = this.contextService.getWorkspaceFolder(resource);\n\t\tif (folder) {\n\t\t\treturn ConfigurationTarget.WORKSPACE_FOLDER;\n\t\t}\n\n\t\treturn ConfigurationTarget.USER_LOCAL;\n\t}\n\n\tprivate getConfigurationTargetFromDefaultSettingsResource(uri: URI) {\n\t\treturn this.isDefaultWorkspaceSettingsResource(uri) ?\n\t\t\tConfigurationTarget.WORKSPACE :\n\t\t\tthis.isDefaultFolderSettingsResource(uri) ?\n\t\t\t\tConfigurationTarget.WORKSPACE_FOLDER :\n\t\t\t\tConfigurationTarget.USER_LOCAL;\n\t}\n\n\tprivate isDefaultSettingsResource(uri: URI): boolean {\n\t\treturn this.isDefaultUserSettingsResource(uri) || this.isDefaultWorkspaceSettingsResource(uri) || this.isDefaultFolderSettingsResource(uri);\n\t}\n\n\tprivate isDefaultUserSettingsResource(uri: URI): boolean {\n\t\treturn uri.authority === 'defaultsettings' && uri.scheme === network.Schemas.vscode && !!uri.path.match(/\\/(\\d+\\/)?settings\\.json$/);\n\t}\n\n\tprivate isDefaultWorkspaceSettingsResource(uri: URI): boolean {\n\t\treturn uri.authority === 'defaultsettings' && uri.scheme === network.Schemas.vscode && !!uri.path.match(/\\/(\\d+\\/)?workspaceSettings\\.json$/);\n\t}\n\n\tprivate isDefaultFolderSettingsResource(uri: URI): boolean {\n\t\treturn uri.authority === 'defaultsettings' && uri.scheme === network.Schemas.vscode && !!uri.path.match(/\\/(\\d+\\/)?resourceSettings\\.json$/);\n\t}\n\n\tprivate getDefaultSettingsResource(configurationTarget: ConfigurationTarget): URI {\n\t\tswitch (configurationTarget) {\n\t\t\tcase ConfigurationTarget.WORKSPACE:\n\t\t\t\treturn URI.from({ scheme: network.Schemas.vscode, authority: 'defaultsettings', path: `/${this._defaultWorkspaceSettingsUriCounter++}/workspaceSettings.json` });\n\t\t\tcase ConfigurationTarget.WORKSPACE_FOLDER:\n\t\t\t\treturn URI.from({ scheme: network.Schemas.vscode, authority: 'defaultsettings', path: `/${this._defaultFolderSettingsUriCounter++}/resourceSettings.json` });\n\t\t}\n\t\treturn URI.from({ scheme: network.Schemas.vscode, authority: 'defaultsettings', path: `/${this._defaultUserSettingsUriCounter++}/settings.json` });\n\t}\n\n\tprivate getPreferencesEditorInputName(target: ConfigurationTarget, resource: URI): string {\n\t\tconst name = getSettingsTargetName(target, resource, this.contextService);\n\t\treturn target === ConfigurationTarget.WORKSPACE_FOLDER ? nls.localize('folderSettingsName', \"{0} (Folder Settings)\", name) : name;\n\t}\n\n\tprivate getOrCreateEditableSettingsEditorInput(target: ConfigurationTarget, resource: URI): Promise<EditorInput> {\n\t\treturn this.createSettingsIfNotExists(target, resource)\n\t\t\t.then(() => <EditorInput>this.editorService.createEditorInput({ resource }));\n\t}\n\n\tprivate createEditableSettingsEditorModel(configurationTarget: ConfigurationTarget, settingsUri: URI): Promise<SettingsEditorModel> {\n\t\tconst workspace = this.contextService.getWorkspace();\n\t\tif (workspace.configuration && workspace.configuration.toString() === settingsUri.toString()) {\n\t\t\treturn this.textModelResolverService.createModelReference(settingsUri)\n\t\t\t\t.then(reference => this.instantiationService.createInstance(WorkspaceConfigurationEditorModel, reference, configurationTarget));\n\t\t}\n\t\treturn this.textModelResolverService.createModelReference(settingsUri)\n\t\t\t.then(reference => this.instantiationService.createInstance(SettingsEditorModel, reference, configurationTarget));\n\t}\n\n\tprivate createDefaultSettingsEditorModel(defaultSettingsUri: URI): Promise<DefaultSettingsEditorModel> {\n\t\treturn this.textModelResolverService.createModelReference(defaultSettingsUri)\n\t\t\t.then(reference => {\n\t\t\t\tconst target = this.getConfigurationTargetFromDefaultSettingsResource(defaultSettingsUri);\n\t\t\t\treturn this.instantiationService.createInstance(DefaultSettingsEditorModel, defaultSettingsUri, reference, this.getDefaultSettings(target));\n\t\t\t});\n\t}\n\n\tprivate getDefaultSettings(target: ConfigurationTarget): DefaultSettings {\n\t\tif (target === ConfigurationTarget.WORKSPACE) {\n\t\t\tif (!this._defaultWorkspaceSettingsContentModel) {\n\t\t\t\tthis._defaultWorkspaceSettingsContentModel = new DefaultSettings(this.getMostCommonlyUsedSettings(), target);\n\t\t\t}\n\t\t\treturn this._defaultWorkspaceSettingsContentModel;\n\t\t}\n\t\tif (target === ConfigurationTarget.WORKSPACE_FOLDER) {\n\t\t\tif (!this._defaultFolderSettingsContentModel) {\n\t\t\t\tthis._defaultFolderSettingsContentModel = new DefaultSettings(this.getMostCommonlyUsedSettings(), target);\n\t\t\t}\n\t\t\treturn this._defaultFolderSettingsContentModel;\n\t\t}\n\t\tif (!this._defaultUserSettingsContentModel) {\n\t\t\tthis._defaultUserSettingsContentModel = new DefaultSettings(this.getMostCommonlyUsedSettings(), target);\n\t\t}\n\t\treturn this._defaultUserSettingsContentModel;\n\t}\n\n\tpublic async getEditableSettingsURI(configurationTarget: ConfigurationTarget, resource?: URI): Promise<URI | null> {\n\t\tswitch (configurationTarget) {\n\t\t\tcase ConfigurationTarget.USER:\n\t\t\tcase ConfigurationTarget.USER_LOCAL:\n\t\t\t\treturn this.userSettingsResource;\n\t\t\tcase ConfigurationTarget.USER_REMOTE:\n\t\t\t\tconst remoteEnvironment = await this.remoteAgentService.getEnvironment();\n\t\t\t\treturn remoteEnvironment ? remoteEnvironment.settingsPath : null;\n\t\t\tcase ConfigurationTarget.WORKSPACE:\n\t\t\t\treturn this.workspaceSettingsResource;\n\t\t\tcase ConfigurationTarget.WORKSPACE_FOLDER:\n\t\t\t\tif (resource) {\n\t\t\t\t\treturn this.getFolderSettingsResource(resource);\n\t\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate async createSettingsIfNotExists(target: ConfigurationTarget, resource: URI): Promise<void> {\n\t\tif (this.contextService.getWorkbenchState() === WorkbenchState.WORKSPACE && target === ConfigurationTarget.WORKSPACE) {\n\t\t\tconst workspaceConfig = this.contextService.getWorkspace().configuration;\n\t\t\tif (!workspaceConfig) {\n\t\t\t\treturn Promise.resolve(undefined);\n\t\t\t}\n\n\t\t\treturn this.textFileService.read(workspaceConfig)\n\t\t\t\t.then(content => {\n\t\t\t\t\tif (Object.keys(parse(content.value)).indexOf('settings') === -1) {\n\t\t\t\t\t\treturn this.jsonEditingService.write(resource, [{ path: ['settings'], value: {} }], true).then(undefined, () => { });\n\t\t\t\t\t}\n\t\t\t\t\treturn undefined;\n\t\t\t\t});\n\t\t}\n\t\tawait this.createIfNotExists(resource, emptyEditableSettingsContent).then(() => { });\n\t}\n\n\tprivate async createIfNotExists(resource: URI, contents: string): Promise<void> {\n\t\ttry {\n\t\t\tawait this.textFileService.read(resource, { acceptTextOnly: true });\n\t\t} catch (error) {\n\t\t\tif ((<FileOperationError>error).fileOperationResult === FileOperationResult.FILE_NOT_FOUND) {\n\t\t\t\ttry {\n\t\t\t\t\tawait this.textFileService.write(resource, contents);\n\t\t\t\t\treturn;\n\t\t\t\t} catch (error2) {\n\t\t\t\t\tthrow new Error(nls.localize('fail.createSettings', \"Unable to create '{0}' ({1}).\", this.labelService.getUriLabel(resource, { relative: true }), getErrorMessage(error2)));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t}\n\t}\n\n\tprivate getMostCommonlyUsedSettings(): string[] {\n\t\treturn [\n\t\t\t'files.autoSave',\n\t\t\t'editor.fontSize',\n\t\t\t'editor.fontFamily',\n\t\t\t'editor.tabSize',\n\t\t\t'editor.renderWhitespace',\n\t\t\t'editor.cursorStyle',\n\t\t\t'editor.multiCursorModifier',\n\t\t\t'editor.insertSpaces',\n\t\t\t'editor.wordWrap',\n\t\t\t'files.exclude',\n\t\t\t'files.associations',\n\t\t\t'workbench.editor.enablePreview'\n\t\t];\n\t}\n\n\tprivate async revealSetting(settingKey: string, edit: boolean, editor: IEditorPane, settingsResource: URI): Promise<void> {\n\t\tconst codeEditor = editor ? getCodeEditor(editor.getControl()) : null;\n\t\tif (!codeEditor) {\n\t\t\treturn;\n\t\t}\n\t\tconst settingsModel = await this.createPreferencesEditorModel(settingsResource);\n\t\tif (!settingsModel) {\n\t\t\treturn;\n\t\t}\n\t\tconst position = await this.getPositionToReveal(settingKey, edit, settingsModel, codeEditor);\n\t\tif (position) {\n\t\t\tcodeEditor.setPosition(position);\n\t\t\tcodeEditor.revealPositionNearTop(position);\n\t\t\tcodeEditor.focus();\n\t\t\tif (edit) {\n\t\t\t\tawait this.commandService.executeCommand('editor.action.triggerSuggest');\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async getPositionToReveal(settingKey: string, edit: boolean, settingsModel: IPreferencesEditorModel<ISetting>, codeEditor: ICodeEditor): Promise<IPosition | null> {\n\t\tconst model = codeEditor.getModel();\n\t\tif (!model) {\n\t\t\treturn null;\n\t\t}\n\t\tconst schema = Registry.as<IConfigurationRegistry>(Extensions.Configuration).getConfigurationProperties()[settingKey];\n\t\tif (!schema && !OVERRIDE_PROPERTY_PATTERN.test(settingKey)) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet position = null;\n\t\tconst type = schema ? schema.type : 'object' /* Override Identifier */;\n\t\tlet setting = settingsModel.getPreference(settingKey);\n\t\tif (!setting && edit) {\n\t\t\tconst defaultValue = (type === 'object' || type === 'array') ? this.configurationService.inspect(settingKey).defaultValue : getDefaultValue(type);\n\t\t\tif (defaultValue !== undefined) {\n\t\t\t\tconst key = settingsModel instanceof WorkspaceConfigurationEditorModel ? ['settings', settingKey] : [settingKey];\n\t\t\t\tawait this.jsonEditingService.write(settingsModel.uri!, [{ path: key, value: defaultValue }], false);\n\t\t\t\tsetting = settingsModel.getPreference(settingKey);\n\t\t\t}\n\t\t}\n\n\t\tif (setting) {\n\t\t\tif (edit) {\n\t\t\t\tposition = { lineNumber: setting.valueRange.startLineNumber, column: setting.valueRange.startColumn + 1 };\n\t\t\t\tif (type === 'object' || type === 'array') {\n\t\t\t\t\tcodeEditor.setPosition(position);\n\t\t\t\t\tawait CoreEditingCommands.LineBreakInsert.runEditorCommand(null, codeEditor, null);\n\t\t\t\t\tposition = { lineNumber: position.lineNumber + 1, column: model.getLineMaxColumn(position.lineNumber + 1) };\n\t\t\t\t\tconst firstNonWhiteSpaceColumn = model.getLineFirstNonWhitespaceColumn(position.lineNumber);\n\t\t\t\t\tif (firstNonWhiteSpaceColumn) {\n\t\t\t\t\t\t// Line has some text. Insert another new line.\n\t\t\t\t\t\tcodeEditor.setPosition({ lineNumber: position.lineNumber, column: firstNonWhiteSpaceColumn });\n\t\t\t\t\t\tawait CoreEditingCommands.LineBreakInsert.runEditorCommand(null, codeEditor, null);\n\t\t\t\t\t\tposition = { lineNumber: position.lineNumber, column: model.getLineMaxColumn(position.lineNumber) };\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tposition = { lineNumber: setting.keyRange.startLineNumber, column: setting.keyRange.startColumn };\n\t\t\t}\n\t\t}\n\n\t\treturn position;\n\t}\n\n\tpublic override dispose(): void {\n\t\tthis._onDispose.fire();\n\t\tsuper.dispose();\n\t}\n}\n\nregisterSingleton(IPreferencesService, PreferencesService);\n"]}