{"version":3,"sources":["vs/workbench/services/preferences/common/preferences.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAqBhG,IAAY,gBAaX;IAbD,WAAY,gBAAgB;QAC3B,iCAAa,CAAA;QACb,iCAAa,CAAA;QACb,qCAAiB,CAAA;QACjB,uCAAmB,CAAA;QACnB,qCAAiB,CAAA;QACjB,uCAAmB,CAAA;QACnB,qDAAiC,CAAA;QACjC,uCAAmB,CAAA;QACnB,uCAAmB,CAAA;QACnB,wDAAoC,CAAA;QACpC,sDAAkC,CAAA;QAClC,qCAAiB,CAAA;IAClB,CAAC,EAbW,gBAAgB,GAAhB,wBAAgB,KAAhB,wBAAgB,QAa3B;IA0ID,MAAa,qBAAsB,SAAQ,sBAAa;QAWvD,MAAM,CAAU,MAAM,CAAC,OAA+B;YACrD,MAAM,UAAU,GAAG,IAAI,qBAAqB,EAAE,CAAC;YAC/C,OAAO,mCACa;gBAClB,QAAQ,EAAE,uBAAc,CAAC,QAAQ;gBACjC,MAAM,EAAE,IAAI;aACZ,GACE,OAAO,CACV,CAAC;YACF,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;YAE9B,UAAU,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;YACnC,UAAU,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;YACzC,UAAU,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;YACjC,UAAU,CAAC,aAAa,GAAG,OAAO,CAAC,aAAa,CAAC;YACjD,UAAU,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;YAE7C,OAAO,UAAU,CAAC;QACnB,CAAC;KACD;IA9BD,sDA8BC;IASY,QAAA,mBAAmB,GAAG,CAAA,GAAA,+BAAe,CAAA,CAAsB,oBAAoB,CAAC,CAAC;IAyB9F,SAAgB,qBAAqB,CAAC,MAA2B,EAAE,QAAa,EAAE,uBAAiD;QAClI,QAAQ,MAAM,EAAE;YACf,kBAA8B;YAC9B;gBACC,OAAO,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAoB,EAAE,IAAe,CAAC,CAAC;YACxD;gBACC,OAAO,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAyB,EAAE,IAAoB,CAAC,CAAC;YAClE;gBACC,MAAM,MAAM,GAAG,uBAAuB,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;gBACpE,OAAO,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;SAClC;QACD,OAAO,EAAE,CAAC;IACX,CAAC;IAZD,sDAYC;IA4DY,QAAA,oBAAoB,GAAG,uBAAuB,CAAC;IAC/C,QAAA,+BAA+B,GAAG,wCAAwC,CAAC;IAC3E,QAAA,sBAAsB,GAAG,iCAAiC,CAAC","file":"preferences.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IStringDictionary } from 'vs/base/common/collections';\nimport { Event } from 'vs/base/common/event';\nimport { URI } from 'vs/base/common/uri';\nimport { IRange } from 'vs/editor/common/core/range';\nimport { IJSONSchemaMap, IJSONSchema } from 'vs/base/common/jsonSchema';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { localize } from 'vs/nls';\nimport { ConfigurationTarget } from 'vs/platform/configuration/common/configuration';\nimport { ConfigurationScope, IConfigurationExtensionInfo } from 'vs/platform/configuration/common/configurationRegistry';\nimport { EditorOverride, IEditorOptions } from 'vs/platform/editor/common/editor';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { EditorOptions, IEditorPane } from 'vs/workbench/common/editor';\nimport { IEditorGroup } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { Settings2EditorModel } from 'vs/workbench/services/preferences/common/preferencesModels';\nimport { IMatch } from 'vs/base/common/filters';\nimport { ResolvedKeybinding } from 'vs/base/common/keyCodes';\nimport { ResolvedKeybindingItem } from 'vs/platform/keybinding/common/resolvedKeybindingItem';\n\nexport enum SettingValueType {\n\tNull = 'null',\n\tEnum = 'enum',\n\tString = 'string',\n\tInteger = 'integer',\n\tNumber = 'number',\n\tBoolean = 'boolean',\n\tArrayOfString = 'array-of-string',\n\tExclude = 'exclude',\n\tComplex = 'complex',\n\tNullableInteger = 'nullable-integer',\n\tNullableNumber = 'nullable-number',\n\tObject = 'object'\n}\n\nexport interface ISettingsGroup {\n\tid: string;\n\trange: IRange;\n\ttitle: string;\n\ttitleRange: IRange;\n\tsections: ISettingsSection[];\n\textensionInfo?: IConfigurationExtensionInfo;\n}\n\nexport interface ISettingsSection {\n\ttitleRange?: IRange;\n\ttitle?: string;\n\tsettings: ISetting[];\n}\n\nexport interface ISetting {\n\trange: IRange;\n\tkey: string;\n\tkeyRange: IRange;\n\tvalue: any;\n\tvalueRange: IRange;\n\tdescription: string[];\n\tdescriptionIsMarkdown?: boolean;\n\tdescriptionRanges: IRange[];\n\toverrides?: ISetting[];\n\toverrideOf?: ISetting;\n\tdeprecationMessage?: string;\n\tdeprecationMessageIsMarkdown?: boolean;\n\n\tscope?: ConfigurationScope;\n\ttype?: string | string[];\n\tarrayItemType?: string;\n\tobjectProperties?: IJSONSchemaMap,\n\tobjectPatternProperties?: IJSONSchemaMap,\n\tobjectAdditionalProperties?: boolean | IJSONSchema,\n\tenum?: string[];\n\tenumDescriptions?: string[];\n\tenumDescriptionsAreMarkdown?: boolean;\n\ttags?: string[];\n\tdisallowSyncIgnore?: boolean;\n\trestricted?: boolean;\n\textensionInfo?: IConfigurationExtensionInfo;\n\tvalidator?: (value: any) => string | null;\n\tenumItemLabels?: string[];\n}\n\nexport interface IExtensionSetting extends ISetting {\n\textensionName?: string;\n\textensionPublisher?: string;\n}\n\nexport interface ISearchResult {\n\tfilterMatches: ISettingMatch[];\n\texactMatch?: boolean;\n\tmetadata?: IFilterMetadata;\n}\n\nexport interface ISearchResultGroup {\n\tid: string;\n\tlabel: string;\n\tresult: ISearchResult;\n\torder: number;\n}\n\nexport interface IFilterResult {\n\tquery?: string;\n\tfilteredGroups: ISettingsGroup[];\n\tallGroups: ISettingsGroup[];\n\tmatches: IRange[];\n\tmetadata?: IStringDictionary<IFilterMetadata>;\n\texactMatch?: boolean;\n}\n\nexport interface ISettingMatch {\n\tsetting: ISetting;\n\tmatches: IRange[] | null;\n\tscore: number;\n}\n\nexport interface IScoredResults {\n\t[key: string]: IRemoteSetting;\n}\n\nexport interface IRemoteSetting {\n\tscore: number;\n\tkey: string;\n\tid: string;\n\tdefaultValue: string;\n\tdescription: string;\n\tpackageId: string;\n\textensionName?: string;\n\textensionPublisher?: string;\n}\n\nexport interface IFilterMetadata {\n\trequestUrl: string;\n\trequestBody: string;\n\ttimestamp: number;\n\tduration: number;\n\tscoredResults: IScoredResults;\n\n\t/** The number of requests made, since requests are split by number of filters */\n\trequestCount?: number;\n\n\t/** The name of the server that actually served the request */\n\tcontext: string;\n}\n\nexport interface IPreferencesEditorModel<T> {\n\turi?: URI;\n\tgetPreference(key: string): T | undefined;\n\tdispose(): void;\n}\n\nexport type IGroupFilter = (group: ISettingsGroup) => boolean | null;\nexport type ISettingMatcher = (setting: ISetting, group: ISettingsGroup) => { matches: IRange[], score: number } | null;\n\nexport interface ISettingsEditorModel extends IPreferencesEditorModel<ISetting> {\n\treadonly onDidChangeGroups: Event<void>;\n\tsettingsGroups: ISettingsGroup[];\n\tfilterSettings(filter: string, groupFilter: IGroupFilter, settingMatcher: ISettingMatcher): ISettingMatch[];\n\tfindValueMatches(filter: string, setting: ISetting): IRange[];\n\tupdateResultGroup(id: string, resultGroup: ISearchResultGroup | undefined): IFilterResult | undefined;\n}\n\nexport interface ISettingsEditorOptions extends IEditorOptions {\n\ttarget?: ConfigurationTarget;\n\tfolderUri?: URI;\n\tquery?: string;\n\trevealSetting?: {\n\t\tkey: string;\n\t\tedit?: boolean;\n\t};\n\tfocusSearch?: boolean;\n}\n\nexport class SettingsEditorOptions extends EditorOptions implements ISettingsEditorOptions {\n\n\ttarget?: ConfigurationTarget;\n\tfolderUri?: URI;\n\tquery?: string;\n\trevealSetting?: {\n\t\tkey: string;\n\t\tedit?: boolean;\n\t};\n\tfocusSearch?: boolean;\n\n\tstatic override create(options: ISettingsEditorOptions): SettingsEditorOptions {\n\t\tconst newOptions = new SettingsEditorOptions();\n\t\toptions = {\n\t\t\t...<IEditorOptions>{\n\t\t\t\toverride: EditorOverride.DISABLED,\n\t\t\t\tpinned: true\n\t\t\t},\n\t\t\t...options\n\t\t};\n\t\tnewOptions.overwrite(options);\n\n\t\tnewOptions.target = options.target;\n\t\tnewOptions.folderUri = options.folderUri;\n\t\tnewOptions.query = options.query;\n\t\tnewOptions.revealSetting = options.revealSetting;\n\t\tnewOptions.focusSearch = options.focusSearch;\n\n\t\treturn newOptions;\n\t}\n}\n\nexport interface IKeybindingsEditorModel<T> extends IPreferencesEditorModel<T> {\n}\n\nexport interface IKeybindingsEditorOptions extends IEditorOptions {\n\tquery?: string;\n}\n\nexport const IPreferencesService = createDecorator<IPreferencesService>('preferencesService');\n\nexport interface IPreferencesService {\n\treadonly _serviceBrand: undefined;\n\n\tuserSettingsResource: URI;\n\tworkspaceSettingsResource: URI | null;\n\tgetFolderSettingsResource(resource: URI): URI | null;\n\n\tresolveModel(uri: URI): Promise<ITextModel | null>;\n\tcreatePreferencesEditorModel<T>(uri: URI): Promise<IPreferencesEditorModel<T> | null>;\n\tcreateSettings2EditorModel(): Settings2EditorModel; // TODO\n\n\topenRawDefaultSettings(): Promise<IEditorPane | undefined>;\n\topenSettings(jsonEditor: boolean | undefined, query: string | undefined): Promise<IEditorPane | undefined>;\n\topenGlobalSettings(jsonEditor?: boolean, options?: ISettingsEditorOptions, group?: IEditorGroup): Promise<IEditorPane | undefined>;\n\topenRemoteSettings(): Promise<IEditorPane | undefined>;\n\topenWorkspaceSettings(jsonEditor?: boolean, options?: ISettingsEditorOptions, group?: IEditorGroup): Promise<IEditorPane | undefined>;\n\topenFolderSettings(folder: URI, jsonEditor?: boolean, options?: ISettingsEditorOptions, group?: IEditorGroup): Promise<IEditorPane | undefined>;\n\tswitchSettings(target: ConfigurationTarget, resource: URI): Promise<void>;\n\topenGlobalKeybindingSettings(textual: boolean, options?: IKeybindingsEditorOptions): Promise<void>;\n\topenDefaultKeybindingsFile(): Promise<IEditorPane | undefined>;\n\tgetEditableSettingsURI(configurationTarget: ConfigurationTarget, resource?: URI): Promise<URI | null>;\n}\n\nexport function getSettingsTargetName(target: ConfigurationTarget, resource: URI, workspaceContextService: IWorkspaceContextService): string {\n\tswitch (target) {\n\t\tcase ConfigurationTarget.USER:\n\t\tcase ConfigurationTarget.USER_LOCAL:\n\t\t\treturn localize('userSettingsTarget', \"User Settings\");\n\t\tcase ConfigurationTarget.WORKSPACE:\n\t\t\treturn localize('workspaceSettingsTarget', \"Workspace Settings\");\n\t\tcase ConfigurationTarget.WORKSPACE_FOLDER:\n\t\t\tconst folder = workspaceContextService.getWorkspaceFolder(resource);\n\t\t\treturn folder ? folder.name : '';\n\t}\n\treturn '';\n}\n\nexport interface KeybindingMatch {\n\tctrlKey?: boolean;\n\tshiftKey?: boolean;\n\taltKey?: boolean;\n\tmetaKey?: boolean;\n\tkeyCode?: boolean;\n}\n\nexport interface KeybindingMatches {\n\tfirstPart: KeybindingMatch;\n\tchordPart: KeybindingMatch;\n}\n\nexport interface IKeybindingItemEntry {\n\tid: string;\n\ttemplateId: string;\n\tkeybindingItem: IKeybindingItem;\n\tcommandIdMatches?: IMatch[];\n\tcommandLabelMatches?: IMatch[];\n\tcommandDefaultLabelMatches?: IMatch[];\n\tsourceMatches?: IMatch[];\n\twhenMatches?: IMatch[];\n\tkeybindingMatches?: KeybindingMatches;\n}\n\nexport interface IKeybindingItem {\n\tkeybinding: ResolvedKeybinding;\n\tkeybindingItem: ResolvedKeybindingItem;\n\tcommandLabel: string;\n\tcommandDefaultLabel: string;\n\tcommand: string;\n\tsource: string;\n\twhen: string;\n}\n\nexport interface IKeybindingsEditorPane extends IEditorPane {\n\n\treadonly activeKeybindingEntry: IKeybindingItemEntry | null;\n\treadonly onDefineWhenExpression: Event<IKeybindingItemEntry>;\n\treadonly onLayout: Event<void>;\n\n\tsearch(filter: string): void;\n\tfocusSearch(): void;\n\tclearSearchResults(): void;\n\tfocusKeybindings(): void;\n\trecordSearchKeys(): void;\n\ttoggleSortByPrecedence(): void;\n\tselectKeybinding(keybindingEntry: IKeybindingItemEntry): void;\n\tdefineKeybinding(keybindingEntry: IKeybindingItemEntry, add: boolean): Promise<void>;\n\tdefineWhenExpression(keybindingEntry: IKeybindingItemEntry): void;\n\tupdateKeybinding(keybindingEntry: IKeybindingItemEntry, key: string, when: string | undefined): Promise<any>;\n\tremoveKeybinding(keybindingEntry: IKeybindingItemEntry): Promise<any>;\n\tresetKeybinding(keybindingEntry: IKeybindingItemEntry): Promise<any>;\n\tcopyKeybinding(keybindingEntry: IKeybindingItemEntry): Promise<void>;\n\tcopyKeybindingCommand(keybindingEntry: IKeybindingItemEntry): Promise<void>;\n\tshowSimilarKeybindings(keybindingEntry: IKeybindingItemEntry): void;\n}\n\nexport const FOLDER_SETTINGS_PATH = '.vscode/settings.json';\nexport const DEFAULT_SETTINGS_EDITOR_SETTING = 'workbench.settings.openDefaultSettings';\nexport const USE_SPLIT_JSON_SETTING = 'workbench.settings.useSplitJSON';\n"]}