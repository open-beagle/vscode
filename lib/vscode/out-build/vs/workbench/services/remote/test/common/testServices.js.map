{"version":3,"file":"testServices.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/remote/test/common/testServices.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAUhG,MAAa,sBAAsB;QAAnC;YAEC,kBAAa,GAAmB;gBAC/B,OAAO,KAAK,CAAC;aACb,CAAC;QAgCH,CAAC;QA/BA,aAAa;YACZ,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC5C,CAAC;QACD,cAAc;YACb,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC5C,CAAC;QACD,iBAAiB;YAChB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC5C,CAAC;QACD,mBAAmB;YAClB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC5C,CAAC;QACD,cAAc,CAAC,cAAsC;YACpD,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC5C,CAAC;QACD,mBAAmB,CAAC,iBAAsB,EAAE,SAAkB;YAC7D,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC5C,CAAC;QACD,iBAAiB,CAAC,OAA+B;YAChD,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC5C,CAAC;QACD,gBAAgB;YACf,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC5C,CAAC;QACD,YAAY,CAAC,SAAiB,EAAE,IAAqB;YACpD,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC5C,CAAC;QACD,cAAc;YACb,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC5C,CAAC;KAED;IApCD,wDAoCC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { IDiagnosticInfoOptions, IDiagnosticInfo } from 'vs/platform/diagnostics/common/diagnostics';\nimport { ExtensionIdentifier, IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { ISocketFactory } from 'vs/platform/remote/common/remoteAgentConnection';\nimport { IRemoteAgentEnvironment } from 'vs/platform/remote/common/remoteAgentEnvironment';\nimport { ITelemetryData } from 'vs/platform/telemetry/common/telemetry';\nimport { IRemoteAgentConnection, IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\n\nexport class TestRemoteAgentService implements IRemoteAgentService {\n\t_serviceBrand: undefined;\n\tsocketFactory: ISocketFactory = {\n\t\tconnect() { }\n\t};\n\tgetConnection(): IRemoteAgentConnection | null {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tgetEnvironment(): Promise<IRemoteAgentEnvironment | null> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tgetRawEnvironment(): Promise<IRemoteAgentEnvironment | null> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\twhenExtensionsReady(): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tscanExtensions(skipExtensions?: ExtensionIdentifier[]): Promise<IExtensionDescription[]> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tscanSingleExtension(extensionLocation: URI, isBuiltin: boolean): Promise<IExtensionDescription | null> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tgetDiagnosticInfo(options: IDiagnosticInfoOptions): Promise<IDiagnosticInfo | undefined> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tdisableTelemetry(): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tlogTelemetry(eventName: string, data?: ITelemetryData): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tflushTelemetry(): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n}\n"]}