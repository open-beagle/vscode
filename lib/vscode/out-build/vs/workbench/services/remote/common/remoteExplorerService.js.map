{"version":3,"file":"remoteExplorerService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/remote/common/remoteExplorerService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { ALL_INTERFACES_ADDRESSES, isAllInterfaces, isLocalhost, ITunnelService, LOCALHOST_ADDRESSES, PortAttributesProvider, ProvidedOnAutoForward, ProvidedPortAttributes, RemoteTunnel } from 'vs/platform/remote/common/tunnel';\nimport { Disposable, IDisposable } from 'vs/base/common/lifecycle';\nimport { IEditableData } from 'vs/workbench/common/views';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { TunnelInformation, TunnelDescription, IRemoteAuthorityResolverService } from 'vs/platform/remote/common/remoteAuthorityResolver';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { IAddressProvider } from 'vs/platform/remote/common/remoteAgentConnection';\nimport { ThemeIcon } from 'vs/platform/theme/common/themeService';\nimport { isNumber, isObject, isString } from 'vs/base/common/types';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { hash } from 'vs/base/common/hash';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { flatten } from 'vs/base/common/arrays';\n\nexport const IRemoteExplorerService = createDecorator<IRemoteExplorerService>('remoteExplorerService');\nexport const REMOTE_EXPLORER_TYPE_KEY: string = 'remote.explorerType';\nconst TUNNELS_TO_RESTORE = 'remote.tunnels.toRestore';\nexport const TUNNEL_VIEW_ID = '~remote.forwardedPorts';\nexport const TUNNEL_VIEW_CONTAINER_ID = '~remote.forwardedPortsContainer';\nexport const PORT_AUTO_FORWARD_SETTING = 'remote.autoForwardPorts';\nexport const PORT_AUTO_SOURCE_SETTING = 'remote.autoForwardPortsSource';\nexport const PORT_AUTO_SOURCE_SETTING_PROCESS = 'process';\nexport const PORT_AUTO_SOURCE_SETTING_OUTPUT = 'output';\n\nexport enum TunnelType {\n\tCandidate = 'Candidate',\n\tDetected = 'Detected',\n\tForwarded = 'Forwarded',\n\tAdd = 'Add'\n}\n\nexport enum TunnelPrivacy {\n\tConstantPrivate = 'ConstantPrivate', // private, and changing is unsupported\n\tPrivate = 'Private',\n\tPublic = 'Public'\n}\n\nexport interface ITunnelItem {\n\ttunnelType: TunnelType;\n\tremoteHost: string;\n\tremotePort: number;\n\tlocalAddress?: string;\n\tlocalPort?: number;\n\tname?: string;\n\tcloseable?: boolean;\n\tsource: string;\n\tprivacy?: TunnelPrivacy;\n\tprocessDescription?: string;\n\treadonly icon?: ThemeIcon;\n\treadonly label: string;\n}\n\nexport enum TunnelEditId {\n\tNone = 0,\n\tNew = 1,\n\tLabel = 2,\n\tLocalPort = 3\n}\n\nexport interface Tunnel {\n\tremoteHost: string;\n\tremotePort: number;\n\tlocalAddress: string;\n\tlocalPort?: number;\n\tname?: string;\n\tcloseable?: boolean;\n\tprivacy: TunnelPrivacy;\n\trunningProcess: string | undefined;\n\thasRunningProcess?: boolean;\n\tpid: number | undefined;\n\tsource?: string;\n\tuserForwarded: boolean;\n}\n\nexport function makeAddress(host: string, port: number): string {\n\treturn host + ':' + port;\n}\n\nexport function parseAddress(address: string): { host: string, port: number } | undefined {\n\tconst matches = address.match(/^([0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\:|localhost:|[a-zA-Z]+:)?([0-9]+)$/);\n\tif (!matches) {\n\t\treturn undefined;\n\t}\n\treturn { host: matches[1]?.substring(0, matches[1].length - 1) || 'localhost', port: Number(matches[2]) };\n}\n\nexport function mapHasAddress<T>(map: Map<string, T>, host: string, port: number): T | undefined {\n\tconst initialAddress = map.get(makeAddress(host, port));\n\tif (initialAddress) {\n\t\treturn initialAddress;\n\t}\n\n\tif (isLocalhost(host)) {\n\t\t// Do localhost checks\n\t\tfor (const testHost of LOCALHOST_ADDRESSES) {\n\t\t\tconst testAddress = makeAddress(testHost, port);\n\t\t\tif (map.has(testAddress)) {\n\t\t\t\treturn map.get(testAddress);\n\t\t\t}\n\t\t}\n\t} else if (isAllInterfaces(host)) {\n\t\t// Do all interfaces checks\n\t\tfor (const testHost of ALL_INTERFACES_ADDRESSES) {\n\t\t\tconst testAddress = makeAddress(testHost, port);\n\t\t\tif (map.has(testAddress)) {\n\t\t\t\treturn map.get(testAddress);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn undefined;\n}\n\nexport function mapHasAddressLocalhostOrAllInterfaces<T>(map: Map<string, T>, host: string, port: number): T | undefined {\n\tconst originalAddress = mapHasAddress(map, host, port);\n\tif (originalAddress) {\n\t\treturn originalAddress;\n\t}\n\tconst otherHost = isAllInterfaces(host) ? 'localhost' : (isLocalhost(host) ? '0.0.0.0' : undefined);\n\tif (otherHost) {\n\t\treturn mapHasAddress(map, otherHost, port);\n\t}\n\treturn undefined;\n}\n\nexport enum OnPortForward {\n\tNotify = 'notify',\n\tOpenBrowser = 'openBrowser',\n\tOpenPreview = 'openPreview',\n\tSilent = 'silent',\n\tIgnore = 'ignore'\n}\n\ninterface Attributes {\n\tlabel: string | undefined;\n\tonAutoForward: OnPortForward | undefined,\n\televateIfNeeded: boolean | undefined;\n}\n\ninterface PortRange { start: number, end: number }\n\ninterface PortAttributes extends Attributes {\n\tkey: number | PortRange | RegExp;\n}\n\nexport class PortsAttributes extends Disposable {\n\tprivate static SETTING = 'remote.portsAttributes';\n\tprivate static DEFAULTS = 'remote.otherPortsAttributes';\n\tprivate static RANGE = /^(\\d+)\\-(\\d+)$/;\n\tprivate portsAttributes: PortAttributes[] = [];\n\tprivate defaultPortAttributes: Attributes | undefined;\n\tprivate _onDidChangeAttributes = new Emitter<void>();\n\tpublic readonly onDidChangeAttributes = this._onDidChangeAttributes.event;\n\n\tconstructor(private readonly configurationService: IConfigurationService) {\n\t\tsuper();\n\t\tthis._register(configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration(PortsAttributes.SETTING) || e.affectsConfiguration(PortsAttributes.DEFAULTS)) {\n\t\t\t\tthis.updateAttributes();\n\t\t\t}\n\t\t}));\n\t\tthis.updateAttributes();\n\t}\n\n\tprivate updateAttributes() {\n\t\tthis.portsAttributes = this.readSetting();\n\t\tthis._onDidChangeAttributes.fire();\n\t}\n\n\tgetAttributes(port: number, commandLine?: string): Attributes | undefined {\n\t\tlet index = this.findNextIndex(port, commandLine, this.portsAttributes, 0);\n\t\tconst attributes: Attributes = {\n\t\t\tlabel: undefined,\n\t\t\tonAutoForward: undefined,\n\t\t\televateIfNeeded: undefined\n\t\t};\n\t\twhile (index >= 0) {\n\t\t\tconst found = this.portsAttributes[index];\n\t\t\tif (found.key === port) {\n\t\t\t\tattributes.onAutoForward = found.onAutoForward ?? attributes.onAutoForward;\n\t\t\t\tattributes.elevateIfNeeded = (found.elevateIfNeeded !== undefined) ? found.elevateIfNeeded : attributes.elevateIfNeeded;\n\t\t\t\tattributes.label = found.label ?? attributes.label;\n\t\t\t} else {\n\t\t\t\t// It's a range or regex, which means that if the attribute is already set, we keep it\n\t\t\t\tattributes.onAutoForward = attributes.onAutoForward ?? found.onAutoForward;\n\t\t\t\tattributes.elevateIfNeeded = (attributes.elevateIfNeeded !== undefined) ? attributes.elevateIfNeeded : found.elevateIfNeeded;\n\t\t\t\tattributes.label = attributes.label ?? found.label;\n\t\t\t}\n\t\t\tindex = this.findNextIndex(port, commandLine, this.portsAttributes, index + 1);\n\t\t}\n\t\tif (attributes.onAutoForward !== undefined || attributes.elevateIfNeeded !== undefined || attributes.label !== undefined) {\n\t\t\treturn attributes;\n\t\t}\n\n\t\t// If we find no matches, then use the other port attributes.\n\t\treturn this.getOtherAttributes();\n\t}\n\n\tprivate hasStartEnd(value: number | PortRange | RegExp): value is PortRange {\n\t\treturn ((<any>value).start !== undefined) && ((<any>value).end !== undefined);\n\t}\n\n\tprivate findNextIndex(port: number, commandLine: string | undefined, attributes: PortAttributes[], fromIndex: number): number {\n\t\tif (fromIndex >= attributes.length) {\n\t\t\treturn -1;\n\t\t}\n\t\tconst sliced = attributes.slice(fromIndex);\n\t\tconst foundIndex = sliced.findIndex((value) => {\n\t\t\tif (isNumber(value.key)) {\n\t\t\t\treturn value.key === port;\n\t\t\t} else if (this.hasStartEnd(value.key)) {\n\t\t\t\treturn port >= value.key.start && port <= value.key.end;\n\t\t\t} else {\n\t\t\t\treturn commandLine ? value.key.test(commandLine) : false;\n\t\t\t}\n\t\t});\n\t\treturn foundIndex >= 0 ? foundIndex + fromIndex : -1;\n\t}\n\n\tprivate readSetting(): PortAttributes[] {\n\t\tconst settingValue = this.configurationService.getValue(PortsAttributes.SETTING);\n\t\tif (!settingValue || !isObject(settingValue)) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst attributes: PortAttributes[] = [];\n\t\tfor (let attributesKey in settingValue) {\n\t\t\tif (attributesKey === undefined) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst setting = (<any>settingValue)[attributesKey];\n\t\t\tlet key: number | { start: number, end: number } | RegExp | undefined = undefined;\n\t\t\tif (Number(attributesKey)) {\n\t\t\t\tkey = Number(attributesKey);\n\t\t\t} else if (isString(attributesKey)) {\n\t\t\t\tif (PortsAttributes.RANGE.test(attributesKey)) {\n\t\t\t\t\tconst match = (<string>attributesKey).match(PortsAttributes.RANGE);\n\t\t\t\t\tkey = { start: Number(match![1]), end: Number(match![2]) };\n\t\t\t\t} else {\n\t\t\t\t\tlet regTest: RegExp | undefined = undefined;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tregTest = RegExp(attributesKey);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t// The user entered an invalid regular expression.\n\t\t\t\t\t}\n\t\t\t\t\tif (regTest) {\n\t\t\t\t\t\tkey = regTest;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!key) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tattributes.push({\n\t\t\t\tkey: key,\n\t\t\t\televateIfNeeded: setting.elevateIfPrivileged,\n\t\t\t\tonAutoForward: setting.onAutoForward,\n\t\t\t\tlabel: setting.label\n\t\t\t});\n\t\t}\n\n\t\tconst defaults = <any>this.configurationService.getValue(PortsAttributes.DEFAULTS);\n\t\tif (defaults) {\n\t\t\tthis.defaultPortAttributes = {\n\t\t\t\televateIfNeeded: defaults.elevateIfNeeded,\n\t\t\t\tlabel: defaults.label,\n\t\t\t\tonAutoForward: defaults.onAutoForward\n\t\t\t};\n\t\t}\n\n\t\treturn this.sortAttributes(attributes);\n\t}\n\n\tprivate sortAttributes(attributes: PortAttributes[]): PortAttributes[] {\n\t\tfunction getVal(item: PortAttributes, thisRef: PortsAttributes) {\n\t\t\tif (isNumber(item.key)) {\n\t\t\t\treturn item.key;\n\t\t\t} else if (thisRef.hasStartEnd(item.key)) {\n\t\t\t\treturn item.key.start;\n\t\t\t} else {\n\t\t\t\treturn Number.MAX_VALUE;\n\t\t\t}\n\t\t}\n\n\t\treturn attributes.sort((a, b) => {\n\t\t\treturn getVal(a, this) - getVal(b, this);\n\t\t});\n\t}\n\n\tprivate getOtherAttributes() {\n\t\treturn this.defaultPortAttributes;\n\t}\n\n\tstatic providedActionToAction(providedAction: ProvidedOnAutoForward | undefined) {\n\t\tswitch (providedAction) {\n\t\t\tcase ProvidedOnAutoForward.Notify: return OnPortForward.Notify;\n\t\t\tcase ProvidedOnAutoForward.OpenBrowser: return OnPortForward.OpenBrowser;\n\t\t\tcase ProvidedOnAutoForward.OpenPreview: return OnPortForward.OpenPreview;\n\t\t\tcase ProvidedOnAutoForward.Silent: return OnPortForward.Silent;\n\t\t\tcase ProvidedOnAutoForward.Ignore: return OnPortForward.Ignore;\n\t\t\tdefault: return undefined;\n\t\t}\n\t}\n}\n\nexport class TunnelModel extends Disposable {\n\treadonly forwarded: Map<string, Tunnel>;\n\treadonly detected: Map<string, Tunnel>;\n\tprivate remoteTunnels: Map<string, RemoteTunnel>;\n\tprivate _onForwardPort: Emitter<Tunnel | void> = new Emitter();\n\tpublic onForwardPort: Event<Tunnel | void> = this._onForwardPort.event;\n\tprivate _onClosePort: Emitter<{ host: string, port: number }> = new Emitter();\n\tpublic onClosePort: Event<{ host: string, port: number }> = this._onClosePort.event;\n\tprivate _onPortName: Emitter<{ host: string, port: number }> = new Emitter();\n\tpublic onPortName: Event<{ host: string, port: number }> = this._onPortName.event;\n\tprivate _candidates: Map<string, CandidatePort> | undefined;\n\tprivate _onCandidatesChanged: Emitter<Map<string, { host: string, port: number }>> = new Emitter();\n\t// onCandidateChanged returns the removed candidates\n\tpublic onCandidatesChanged: Event<Map<string, { host: string, port: number }>> = this._onCandidatesChanged.event;\n\tprivate _candidateFilter: ((candidates: CandidatePort[]) => Promise<CandidatePort[]>) | undefined;\n\tprivate tunnelRestoreValue: Promise<string | undefined>;\n\tprivate _onEnvironmentTunnelsSet: Emitter<void> = new Emitter();\n\tpublic onEnvironmentTunnelsSet: Event<void> = this._onEnvironmentTunnelsSet.event;\n\tprivate _environmentTunnelsSet: boolean = false;\n\tprivate configPortsAttributes: PortsAttributes;\n\tprivate restoreListener: IDisposable | undefined;\n\n\tprivate portAttributesProviders: PortAttributesProvider[] = [];\n\n\tconstructor(\n\t\t@ITunnelService private readonly tunnelService: ITunnelService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IRemoteAuthorityResolverService private readonly remoteAuthorityResolverService: IRemoteAuthorityResolverService,\n\t\t@IWorkspaceContextService private readonly workspaceContextService: IWorkspaceContextService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tsuper();\n\t\tthis.configPortsAttributes = new PortsAttributes(configurationService);\n\t\tthis.tunnelRestoreValue = this.getTunnelRestoreValue();\n\t\tthis._register(this.configPortsAttributes.onDidChangeAttributes(this.updateAttributes, this));\n\t\tthis.forwarded = new Map();\n\t\tthis.remoteTunnels = new Map();\n\t\tthis.tunnelService.tunnels.then(tunnels => {\n\t\t\ttunnels.forEach(tunnel => {\n\t\t\t\tif (tunnel.localAddress) {\n\t\t\t\t\tconst key = makeAddress(tunnel.tunnelRemoteHost, tunnel.tunnelRemotePort);\n\t\t\t\t\tconst matchingCandidate = mapHasAddressLocalhostOrAllInterfaces(this._candidates ?? new Map(), tunnel.tunnelRemoteHost, tunnel.tunnelRemotePort);\n\t\t\t\t\tthis.forwarded.set(key, {\n\t\t\t\t\t\tremotePort: tunnel.tunnelRemotePort,\n\t\t\t\t\t\tremoteHost: tunnel.tunnelRemoteHost,\n\t\t\t\t\t\tlocalAddress: tunnel.localAddress,\n\t\t\t\t\t\tlocalPort: tunnel.tunnelLocalPort,\n\t\t\t\t\t\trunningProcess: matchingCandidate?.detail,\n\t\t\t\t\t\thasRunningProcess: !!matchingCandidate,\n\t\t\t\t\t\tpid: matchingCandidate?.pid,\n\t\t\t\t\t\tprivacy: this.makeTunnelPrivacy(tunnel.public),\n\t\t\t\t\t\tuserForwarded: true\n\t\t\t\t\t});\n\t\t\t\t\tthis.remoteTunnels.set(key, tunnel);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tthis.detected = new Map();\n\t\tthis._register(this.tunnelService.onTunnelOpened(async (tunnel) => {\n\t\t\tconst key = makeAddress(tunnel.tunnelRemoteHost, tunnel.tunnelRemotePort);\n\t\t\tif ((!this.forwarded.has(key)) && tunnel.localAddress) {\n\t\t\t\tconst matchingCandidate = mapHasAddressLocalhostOrAllInterfaces(this._candidates ?? new Map(), tunnel.tunnelRemoteHost, tunnel.tunnelRemotePort);\n\t\t\t\tthis.forwarded.set(key, {\n\t\t\t\t\tremoteHost: tunnel.tunnelRemoteHost,\n\t\t\t\t\tremotePort: tunnel.tunnelRemotePort,\n\t\t\t\t\tlocalAddress: tunnel.localAddress,\n\t\t\t\t\tlocalPort: tunnel.tunnelLocalPort,\n\t\t\t\t\tcloseable: true,\n\t\t\t\t\trunningProcess: matchingCandidate?.detail,\n\t\t\t\t\thasRunningProcess: !!matchingCandidate,\n\t\t\t\t\tpid: matchingCandidate?.pid,\n\t\t\t\t\tprivacy: this.makeTunnelPrivacy(tunnel.public),\n\t\t\t\t\tuserForwarded: true\n\t\t\t\t});\n\t\t\t}\n\t\t\tawait this.storeForwarded();\n\t\t\tthis.remoteTunnels.set(key, tunnel);\n\t\t\tthis._onForwardPort.fire(this.forwarded.get(key)!);\n\t\t}));\n\t\tthis._register(this.tunnelService.onTunnelClosed(async (address) => {\n\t\t\tconst key = makeAddress(address.host, address.port);\n\t\t\tif (this.forwarded.has(key)) {\n\t\t\t\tthis.forwarded.delete(key);\n\t\t\t\tawait this.storeForwarded();\n\t\t\t\tthis._onClosePort.fire(address);\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate makeTunnelPrivacy(isPublic: boolean) {\n\t\treturn isPublic ? TunnelPrivacy.Public : this.tunnelService.canMakePublic ? TunnelPrivacy.Private : TunnelPrivacy.ConstantPrivate;\n\t}\n\n\tprivate async getStorageKey(): Promise<string> {\n\t\tconst workspace = this.workspaceContextService.getWorkspace();\n\t\tconst workspaceHash = workspace.configuration ? hash(workspace.configuration.path) : (workspace.folders.length > 0 ? hash(workspace.folders[0].uri.path) : undefined);\n\t\treturn `${TUNNELS_TO_RESTORE}.${this.environmentService.remoteAuthority}.${workspaceHash}`;\n\t}\n\n\tprivate async getTunnelRestoreValue(): Promise<string | undefined> {\n\t\tconst deprecatedValue = this.storageService.get(TUNNELS_TO_RESTORE, StorageScope.WORKSPACE);\n\t\tif (deprecatedValue) {\n\t\t\tthis.storageService.remove(TUNNELS_TO_RESTORE, StorageScope.WORKSPACE);\n\t\t\tawait this.storeForwarded();\n\t\t\treturn deprecatedValue;\n\t\t}\n\n\t\treturn this.storageService.get(await this.getStorageKey(), StorageScope.GLOBAL);\n\t}\n\n\tasync restoreForwarded() {\n\t\tif (this.configurationService.getValue('remote.restoreForwardedPorts')) {\n\t\t\tconst tunnelRestoreValue = await this.tunnelRestoreValue;\n\t\t\tif (tunnelRestoreValue) {\n\t\t\t\tconst tunnels = <Tunnel[] | undefined>JSON.parse(tunnelRestoreValue) ?? [];\n\t\t\t\tthis.logService.trace(`ForwardedPorts: (TunnelModel) restoring ports ${tunnels.map(tunnel => tunnel.remotePort).join(', ')}`);\n\t\t\t\tfor (let tunnel of tunnels) {\n\t\t\t\t\tif (!mapHasAddressLocalhostOrAllInterfaces(this.detected, tunnel.remoteHost, tunnel.remotePort)) {\n\t\t\t\t\t\tawait this.forward({ host: tunnel.remoteHost, port: tunnel.remotePort }, tunnel.localPort, tunnel.name, undefined, undefined, tunnel.privacy === TunnelPrivacy.Public);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!this.restoreListener) {\n\t\t\t// It's possible that at restore time the value hasn't synced.\n\t\t\tconst key = await this.getStorageKey();\n\t\t\tthis.restoreListener = this._register(this.storageService.onDidChangeValue(async (e) => {\n\t\t\t\tif (e.key === key) {\n\t\t\t\t\tthis.tunnelRestoreValue = Promise.resolve(this.storageService.get(await this.getStorageKey(), StorageScope.GLOBAL));\n\t\t\t\t\tawait this.restoreForwarded();\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\t}\n\n\tprivate async storeForwarded() {\n\t\tif (this.configurationService.getValue('remote.restoreForwardedPorts')) {\n\t\t\tthis.storageService.store(await this.getStorageKey(), JSON.stringify(Array.from(this.forwarded.values()).filter(value => value.userForwarded)), StorageScope.GLOBAL, StorageTarget.USER);\n\t\t}\n\t}\n\n\tasync forward(remote: { host: string, port: number }, local?: number, name?: string, source?: string, elevateIfNeeded?: boolean, isPublic?: boolean, restore: boolean = true): Promise<RemoteTunnel | void> {\n\t\tconst existingTunnel = mapHasAddressLocalhostOrAllInterfaces(this.forwarded, remote.host, remote.port);\n\t\tconst port = local !== undefined ? local : remote.port;\n\t\tconst attributes = (await this.getAttributes([port]))?.get(port);\n\n\t\tif (!existingTunnel) {\n\t\t\tconst authority = this.environmentService.remoteAuthority;\n\t\t\tconst addressProvider: IAddressProvider | undefined = authority ? {\n\t\t\t\tgetAddress: async () => { return (await this.remoteAuthorityResolverService.resolveAuthority(authority)).authority; }\n\t\t\t} : undefined;\n\n\t\t\tconst tunnel = await this.tunnelService.openTunnel(addressProvider, remote.host, remote.port, local, (!elevateIfNeeded) ? attributes?.elevateIfNeeded : elevateIfNeeded, isPublic);\n\t\t\tif (tunnel && tunnel.localAddress) {\n\t\t\t\tconst matchingCandidate = mapHasAddressLocalhostOrAllInterfaces<CandidatePort>(this._candidates ?? new Map(), remote.host, remote.port);\n\t\t\t\tconst newForward: Tunnel = {\n\t\t\t\t\tremoteHost: tunnel.tunnelRemoteHost,\n\t\t\t\t\tremotePort: tunnel.tunnelRemotePort,\n\t\t\t\t\tlocalPort: tunnel.tunnelLocalPort,\n\t\t\t\t\tname: attributes?.label ?? name,\n\t\t\t\t\tcloseable: true,\n\t\t\t\t\tlocalAddress: tunnel.localAddress,\n\t\t\t\t\trunningProcess: matchingCandidate?.detail,\n\t\t\t\t\thasRunningProcess: !!matchingCandidate,\n\t\t\t\t\tpid: matchingCandidate?.pid,\n\t\t\t\t\tsource,\n\t\t\t\t\tprivacy: this.makeTunnelPrivacy(tunnel.public),\n\t\t\t\t\tuserForwarded: restore\n\t\t\t\t};\n\t\t\t\tconst key = makeAddress(remote.host, remote.port);\n\t\t\t\tthis.forwarded.set(key, newForward);\n\t\t\t\tthis.remoteTunnels.set(key, tunnel);\n\t\t\t\tawait this.storeForwarded();\n\t\t\t\tthis._onForwardPort.fire(newForward);\n\t\t\t\treturn tunnel;\n\t\t\t}\n\t\t} else {\n\t\t\tif (attributes?.label ?? name) {\n\t\t\t\texistingTunnel.name = attributes?.label ?? name;\n\t\t\t}\n\t\t\tthis._onForwardPort.fire();\n\t\t\treturn mapHasAddressLocalhostOrAllInterfaces(this.remoteTunnels, remote.host, remote.port);\n\t\t}\n\t}\n\n\tasync name(host: string, port: number, name: string) {\n\t\tconst existingForwarded = mapHasAddressLocalhostOrAllInterfaces(this.forwarded, host, port);\n\t\tconst key = makeAddress(host, port);\n\t\tif (existingForwarded) {\n\t\t\texistingForwarded.name = name;\n\t\t\tawait this.storeForwarded();\n\t\t\tthis._onPortName.fire({ host, port });\n\t\t\treturn;\n\t\t} else if (this.detected.has(key)) {\n\t\t\tthis.detected.get(key)!.name = name;\n\t\t\tthis._onPortName.fire({ host, port });\n\t\t}\n\t}\n\n\tasync close(host: string, port: number): Promise<void> {\n\t\treturn this.tunnelService.closeTunnel(host, port);\n\t}\n\n\taddress(host: string, port: number): string | undefined {\n\t\tconst key = makeAddress(host, port);\n\t\treturn (this.forwarded.get(key) || this.detected.get(key))?.localAddress;\n\t}\n\n\tpublic get environmentTunnelsSet(): boolean {\n\t\treturn this._environmentTunnelsSet;\n\t}\n\n\taddEnvironmentTunnels(tunnels: TunnelDescription[] | undefined): void {\n\t\tif (tunnels) {\n\t\t\ttunnels.forEach(tunnel => {\n\t\t\t\tconst matchingCandidate = mapHasAddressLocalhostOrAllInterfaces(this._candidates ?? new Map(), tunnel.remoteAddress.host, tunnel.remoteAddress.port);\n\t\t\t\tthis.detected.set(makeAddress(tunnel.remoteAddress.host, tunnel.remoteAddress.port), {\n\t\t\t\t\tremoteHost: tunnel.remoteAddress.host,\n\t\t\t\t\tremotePort: tunnel.remoteAddress.port,\n\t\t\t\t\tlocalAddress: typeof tunnel.localAddress === 'string' ? tunnel.localAddress : makeAddress(tunnel.localAddress.host, tunnel.localAddress.port),\n\t\t\t\t\tcloseable: false,\n\t\t\t\t\trunningProcess: matchingCandidate?.detail,\n\t\t\t\t\thasRunningProcess: !!matchingCandidate,\n\t\t\t\t\tpid: matchingCandidate?.pid,\n\t\t\t\t\tprivacy: TunnelPrivacy.ConstantPrivate,\n\t\t\t\t\tuserForwarded: false\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\tthis._environmentTunnelsSet = true;\n\t\tthis._onEnvironmentTunnelsSet.fire();\n\t\tthis._onForwardPort.fire();\n\t}\n\n\tsetCandidateFilter(filter: ((candidates: CandidatePort[]) => Promise<CandidatePort[]>) | undefined): void {\n\t\tthis._candidateFilter = filter;\n\t}\n\n\tasync setCandidates(candidates: CandidatePort[]) {\n\t\tlet processedCandidates = candidates;\n\t\tif (this._candidateFilter) {\n\t\t\t// When an extension provides a filter, we do the filtering on the extension host before the candidates are set here.\n\t\t\t// However, when the filter doesn't come from an extension we filter here.\n\t\t\tprocessedCandidates = await this._candidateFilter(candidates);\n\t\t}\n\t\tconst removedCandidates = this.updateInResponseToCandidates(processedCandidates);\n\t\tthis.logService.trace(`ForwardedPorts: (TunnelModel) removed candidates ${Array.from(removedCandidates.values()).map(candidate => candidate.port).join(', ')}`);\n\t\tthis._onCandidatesChanged.fire(removedCandidates);\n\t}\n\n\t// Returns removed candidates\n\tprivate updateInResponseToCandidates(candidates: CandidatePort[]): Map<string, { host: string, port: number }> {\n\t\tconst removedCandidates = this._candidates ?? new Map();\n\t\tconst candidatesMap = new Map();\n\t\tthis._candidates = candidatesMap;\n\t\tcandidates.forEach(value => {\n\t\t\tconst addressKey = makeAddress(value.host, value.port);\n\t\t\tcandidatesMap.set(addressKey, {\n\t\t\t\thost: value.host,\n\t\t\t\tport: value.port,\n\t\t\t\tdetail: value.detail,\n\t\t\t\tpid: value.pid\n\t\t\t});\n\t\t\tif (removedCandidates.has(addressKey)) {\n\t\t\t\tremovedCandidates.delete(addressKey);\n\t\t\t}\n\t\t\tconst forwardedValue = mapHasAddressLocalhostOrAllInterfaces(this.forwarded, value.host, value.port);\n\t\t\tif (forwardedValue) {\n\t\t\t\tforwardedValue.runningProcess = value.detail;\n\t\t\t\tforwardedValue.hasRunningProcess = true;\n\t\t\t\tforwardedValue.pid = value.pid;\n\t\t\t}\n\t\t});\n\t\tremovedCandidates.forEach((_value, key) => {\n\t\t\tconst parsedAddress = parseAddress(key);\n\t\t\tif (!parsedAddress) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst forwardedValue = mapHasAddressLocalhostOrAllInterfaces(this.forwarded, parsedAddress.host, parsedAddress.port);\n\t\t\tif (forwardedValue) {\n\t\t\t\tforwardedValue.runningProcess = undefined;\n\t\t\t\tforwardedValue.hasRunningProcess = false;\n\t\t\t\tforwardedValue.pid = undefined;\n\t\t\t}\n\t\t\tconst detectedValue = mapHasAddressLocalhostOrAllInterfaces(this.detected, parsedAddress.host, parsedAddress.port);\n\t\t\tif (detectedValue) {\n\t\t\t\tdetectedValue.runningProcess = undefined;\n\t\t\t\tdetectedValue.hasRunningProcess = false;\n\t\t\t\tdetectedValue.pid = undefined;\n\t\t\t}\n\t\t});\n\t\treturn removedCandidates;\n\t}\n\n\tget candidates(): CandidatePort[] {\n\t\treturn this._candidates ? Array.from(this._candidates.values()) : [];\n\t}\n\n\tget candidatesOrUndefined(): CandidatePort[] | undefined {\n\t\treturn this._candidates ? this.candidates : undefined;\n\t}\n\n\tprivate async updateAttributes() {\n\t\t// If the label changes in the attributes, we should update it.\n\t\tfor (let forwarded of this.forwarded.values()) {\n\t\t\tconst attributes = (await this.getAttributes([forwarded.remotePort], false))?.get(forwarded.remotePort);\n\t\t\tif (attributes && attributes.label && attributes.label !== forwarded.name) {\n\t\t\t\tawait this.name(forwarded.remoteHost, forwarded.remotePort, attributes.label);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync getAttributes(ports: number[], checkProviders: boolean = true): Promise<Map<number, Attributes> | undefined> {\n\t\tconst matchingCandidates: Map<number, CandidatePort> = new Map();\n\t\tconst pidToPortsMapping: Map<number | undefined, number[]> = new Map();\n\t\tports.forEach(port => {\n\t\t\tconst matchingCandidate = mapHasAddressLocalhostOrAllInterfaces<CandidatePort>(this._candidates ?? new Map(), LOCALHOST_ADDRESSES[0], port);\n\t\t\tif (matchingCandidate) {\n\t\t\t\tmatchingCandidates.set(port, matchingCandidate);\n\t\t\t\tif (!pidToPortsMapping.has(matchingCandidate.pid)) {\n\t\t\t\t\tpidToPortsMapping.set(matchingCandidate.pid, []);\n\t\t\t\t}\n\t\t\t\tpidToPortsMapping.get(matchingCandidate.pid)?.push(port);\n\t\t\t}\n\t\t});\n\n\t\tconst configAttributes: Map<number, Attributes> = new Map();\n\t\tports.forEach(port => {\n\t\t\tconst attributes = this.configPortsAttributes.getAttributes(port, matchingCandidates.get(port)?.detail);\n\t\t\tif (attributes) {\n\t\t\t\tconfigAttributes.set(port, attributes);\n\t\t\t}\n\t\t});\n\t\tif ((this.portAttributesProviders.length === 0) || !checkProviders) {\n\t\t\treturn (configAttributes.size > 0) ? configAttributes : undefined;\n\t\t}\n\n\t\t// Group calls to provide attributes by pid.\n\t\tconst allProviderResults = await Promise.all(flatten(this.portAttributesProviders.map(provider => {\n\t\t\treturn Array.from(pidToPortsMapping.entries()).map(entry => {\n\t\t\t\tconst portGroup = entry[1];\n\t\t\t\tconst matchingCandidate = matchingCandidates.get(portGroup[0]);\n\t\t\t\treturn provider.providePortAttributes(portGroup,\n\t\t\t\t\tmatchingCandidate?.pid, matchingCandidate?.detail, new CancellationTokenSource().token);\n\t\t\t});\n\t\t})));\n\t\tconst providedAttributes: Map<number, ProvidedPortAttributes> = new Map();\n\t\tallProviderResults.forEach(attributes => attributes.forEach(attribute => {\n\t\t\tif (attribute) {\n\t\t\t\tprovidedAttributes.set(attribute.port, attribute);\n\t\t\t}\n\t\t}));\n\n\t\tif (!configAttributes && !providedAttributes) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Merge. The config wins.\n\t\tconst mergedAttributes: Map<number, Attributes> = new Map();\n\t\tports.forEach(port => {\n\t\t\tconst config = configAttributes.get(port);\n\t\t\tconst provider = providedAttributes.get(port);\n\t\t\tmergedAttributes.set(port, {\n\t\t\t\televateIfNeeded: config?.elevateIfNeeded,\n\t\t\t\tlabel: config?.label,\n\t\t\t\tonAutoForward: config?.onAutoForward ?? PortsAttributes.providedActionToAction(provider?.autoForwardAction)\n\t\t\t});\n\t\t});\n\n\t\treturn mergedAttributes;\n\t}\n\n\taddAttributesProvider(provider: PortAttributesProvider) {\n\t\tthis.portAttributesProviders.push(provider);\n\t}\n}\n\nexport interface CandidatePort {\n\thost: string;\n\tport: number;\n\tdetail?: string;\n\tpid?: number;\n}\n\nexport interface IRemoteExplorerService {\n\treadonly _serviceBrand: undefined;\n\tonDidChangeTargetType: Event<string[]>;\n\ttargetType: string[];\n\treadonly tunnelModel: TunnelModel;\n\tonDidChangeEditable: Event<{ tunnel: ITunnelItem, editId: TunnelEditId } | undefined>;\n\tsetEditable(tunnelItem: ITunnelItem | undefined, editId: TunnelEditId, data: IEditableData | null): void;\n\tgetEditableData(tunnelItem: ITunnelItem | undefined, editId?: TunnelEditId): IEditableData | undefined;\n\tforward(remote: { host: string, port: number }, localPort?: number, name?: string, source?: string, elevateIfNeeded?: boolean, isPublic?: boolean, restore?: boolean): Promise<RemoteTunnel | void>;\n\tclose(remote: { host: string, port: number }): Promise<void>;\n\tsetTunnelInformation(tunnelInformation: TunnelInformation | undefined): void;\n\tsetCandidateFilter(filter: ((candidates: CandidatePort[]) => Promise<CandidatePort[]>) | undefined): IDisposable;\n\tonFoundNewCandidates(candidates: CandidatePort[]): void;\n\trestore(): Promise<void>;\n\tenablePortsFeatures(): void;\n\tonEnabledPortsFeatures: Event<void>;\n\tportsFeaturesEnabled: boolean;\n\treadonly namedProcesses: Map<number, string>;\n}\n\nclass RemoteExplorerService implements IRemoteExplorerService {\n\tpublic _serviceBrand: undefined;\n\tprivate _targetType: string[] = [];\n\tprivate readonly _onDidChangeTargetType: Emitter<string[]> = new Emitter<string[]>();\n\tpublic readonly onDidChangeTargetType: Event<string[]> = this._onDidChangeTargetType.event;\n\tprivate _tunnelModel: TunnelModel;\n\tprivate _editable: { tunnelItem: ITunnelItem | undefined, editId: TunnelEditId, data: IEditableData } | undefined;\n\tprivate readonly _onDidChangeEditable: Emitter<{ tunnel: ITunnelItem, editId: TunnelEditId } | undefined> = new Emitter();\n\tpublic readonly onDidChangeEditable: Event<{ tunnel: ITunnelItem, editId: TunnelEditId } | undefined> = this._onDidChangeEditable.event;\n\tprivate readonly _onEnabledPortsFeatures: Emitter<void> = new Emitter();\n\tpublic readonly onEnabledPortsFeatures: Event<void> = this._onEnabledPortsFeatures.event;\n\tprivate _portsFeaturesEnabled: boolean = false;\n\tpublic readonly namedProcesses = new Map<number, string>();\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@ITunnelService tunnelService: ITunnelService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IWorkbenchEnvironmentService environmentService: IWorkbenchEnvironmentService,\n\t\t@IRemoteAuthorityResolverService remoteAuthorityResolverService: IRemoteAuthorityResolverService,\n\t\t@IWorkspaceContextService workspaceContextService: IWorkspaceContextService,\n\t\t@ILogService logService: ILogService\n\t) {\n\t\tthis._tunnelModel = new TunnelModel(tunnelService, storageService, configurationService, environmentService, remoteAuthorityResolverService, workspaceContextService, logService);\n\t}\n\n\tset targetType(name: string[]) {\n\t\t// Can just compare the first element of the array since there are no target overlaps\n\t\tconst current: string = this._targetType.length > 0 ? this._targetType[0] : '';\n\t\tconst newName: string = name.length > 0 ? name[0] : '';\n\t\tif (current !== newName) {\n\t\t\tthis._targetType = name;\n\t\t\tthis.storageService.store(REMOTE_EXPLORER_TYPE_KEY, this._targetType.toString(), StorageScope.WORKSPACE, StorageTarget.USER);\n\t\t\tthis.storageService.store(REMOTE_EXPLORER_TYPE_KEY, this._targetType.toString(), StorageScope.GLOBAL, StorageTarget.USER);\n\t\t\tthis._onDidChangeTargetType.fire(this._targetType);\n\t\t}\n\t}\n\tget targetType(): string[] {\n\t\treturn this._targetType;\n\t}\n\n\tget tunnelModel(): TunnelModel {\n\t\treturn this._tunnelModel;\n\t}\n\n\tforward(remote: { host: string, port: number }, local?: number, name?: string, source?: string, elevateIfNeeded?: boolean, isPublic?: boolean, restore?: boolean): Promise<RemoteTunnel | void> {\n\t\treturn this.tunnelModel.forward(remote, local, name, source, elevateIfNeeded, isPublic, restore);\n\t}\n\n\tclose(remote: { host: string, port: number }): Promise<void> {\n\t\treturn this.tunnelModel.close(remote.host, remote.port);\n\t}\n\n\tsetTunnelInformation(tunnelInformation: TunnelInformation | undefined): void {\n\t\tthis.tunnelModel.addEnvironmentTunnels(tunnelInformation?.environmentTunnels);\n\t}\n\n\tsetEditable(tunnelItem: ITunnelItem | undefined, editId: TunnelEditId, data: IEditableData | null): void {\n\t\tconsole.log('setting edit ' + data);\n\t\tif (!data) {\n\t\t\tthis._editable = undefined;\n\t\t} else {\n\t\t\tthis._editable = { tunnelItem, data, editId };\n\t\t}\n\t\tthis._onDidChangeEditable.fire(tunnelItem ? { tunnel: tunnelItem, editId } : undefined);\n\t}\n\n\tgetEditableData(tunnelItem: ITunnelItem | undefined, editId: TunnelEditId): IEditableData | undefined {\n\t\treturn (this._editable &&\n\t\t\t((!tunnelItem && (tunnelItem === this._editable.tunnelItem)) ||\n\t\t\t\t(tunnelItem && (this._editable.tunnelItem?.remotePort === tunnelItem.remotePort) && (this._editable.tunnelItem.remoteHost === tunnelItem.remoteHost)\n\t\t\t\t\t&& (this._editable.editId === editId)))) ?\n\t\t\tthis._editable.data : undefined;\n\t}\n\n\tsetCandidateFilter(filter: (candidates: CandidatePort[]) => Promise<CandidatePort[]>): IDisposable {\n\t\tif (!filter) {\n\t\t\treturn {\n\t\t\t\tdispose: () => { }\n\t\t\t};\n\t\t}\n\t\tthis.tunnelModel.setCandidateFilter(filter);\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tthis.tunnelModel.setCandidateFilter(undefined);\n\t\t\t}\n\t\t};\n\t}\n\n\tonFoundNewCandidates(candidates: CandidatePort[]): void {\n\t\tthis.tunnelModel.setCandidates(candidates);\n\t}\n\n\trestore(): Promise<void> {\n\t\treturn this.tunnelModel.restoreForwarded();\n\t}\n\n\tenablePortsFeatures(): void {\n\t\tthis._portsFeaturesEnabled = true;\n\t\tthis._onEnabledPortsFeatures.fire();\n\t}\n\n\tget portsFeaturesEnabled(): boolean {\n\t\treturn this._portsFeaturesEnabled;\n\t}\n}\n\nregisterSingleton(IRemoteExplorerService, RemoteExplorerService, true);\n"]}