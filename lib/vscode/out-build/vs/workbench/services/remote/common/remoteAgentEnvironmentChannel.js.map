{"version":3,"file":"remoteAgentEnvironmentChannel.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/remote/common/remoteAgentEnvironmentChannel.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as platform from 'vs/base/common/platform';\nimport * as performance from 'vs/base/common/performance';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { IChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { IExtensionDescription, ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\nimport { IRemoteAgentEnvironment } from 'vs/platform/remote/common/remoteAgentEnvironment';\nimport { IDiagnosticInfoOptions, IDiagnosticInfo } from 'vs/platform/diagnostics/common/diagnostics';\nimport { ITelemetryData } from 'vs/platform/telemetry/common/telemetry';\n\nexport interface IGetEnvironmentDataArguments {\n\tremoteAuthority: string;\n}\n\nexport interface IScanExtensionsArguments {\n\tlanguage: string;\n\tremoteAuthority: string;\n\textensionDevelopmentPath: UriComponents[] | undefined;\n\tskipExtensions: ExtensionIdentifier[];\n}\n\nexport interface IScanSingleExtensionArguments {\n\tlanguage: string;\n\tremoteAuthority: string;\n\tisBuiltin: boolean;\n\textensionLocation: UriComponents;\n}\n\nexport interface IRemoteAgentEnvironmentDTO {\n\tpid: number;\n\tconnectionToken: string;\n\tappRoot: UriComponents;\n\tsettingsPath: UriComponents;\n\tlogsPath: UriComponents;\n\textensionsPath: UriComponents;\n\textensionHostLogsPath: UriComponents;\n\tglobalStorageHome: UriComponents;\n\tworkspaceStorageHome: UriComponents;\n\tuserHome: UriComponents;\n\tos: platform.OperatingSystem;\n\tmarks: performance.PerformanceMark[];\n\tuseHostProxy: boolean;\n}\n\nexport class RemoteExtensionEnvironmentChannelClient {\n\n\tstatic async getEnvironmentData(channel: IChannel, remoteAuthority: string): Promise<IRemoteAgentEnvironment> {\n\t\tconst args: IGetEnvironmentDataArguments = {\n\t\t\tremoteAuthority\n\t\t};\n\n\t\tconst data = await channel.call<IRemoteAgentEnvironmentDTO>('getEnvironmentData', args);\n\n\t\treturn {\n\t\t\tpid: data.pid,\n\t\t\tconnectionToken: data.connectionToken,\n\t\t\tappRoot: URI.revive(data.appRoot),\n\t\t\tsettingsPath: URI.revive(data.settingsPath),\n\t\t\tlogsPath: URI.revive(data.logsPath),\n\t\t\textensionsPath: URI.revive(data.extensionsPath),\n\t\t\textensionHostLogsPath: URI.revive(data.extensionHostLogsPath),\n\t\t\tglobalStorageHome: URI.revive(data.globalStorageHome),\n\t\t\tworkspaceStorageHome: URI.revive(data.workspaceStorageHome),\n\t\t\tuserHome: URI.revive(data.userHome),\n\t\t\tos: data.os,\n\t\t\tmarks: data.marks,\n\t\t\tuseHostProxy: data.useHostProxy\n\t\t};\n\t}\n\n\tstatic async whenExtensionsReady(channel: IChannel): Promise<void> {\n\t\tawait channel.call<void>('whenExtensionsReady');\n\t}\n\n\tstatic async scanExtensions(channel: IChannel, remoteAuthority: string, extensionDevelopmentPath: URI[] | undefined, skipExtensions: ExtensionIdentifier[]): Promise<IExtensionDescription[]> {\n\t\tconst args: IScanExtensionsArguments = {\n\t\t\tlanguage: platform.language,\n\t\t\tremoteAuthority,\n\t\t\textensionDevelopmentPath,\n\t\t\tskipExtensions\n\t\t};\n\n\t\tconst extensions = await channel.call<IExtensionDescription[]>('scanExtensions', args);\n\t\textensions.forEach(ext => { (<any>ext).extensionLocation = URI.revive(ext.extensionLocation); });\n\n\t\treturn extensions;\n\t}\n\n\tstatic async scanSingleExtension(channel: IChannel, remoteAuthority: string, isBuiltin: boolean, extensionLocation: URI): Promise<IExtensionDescription | null> {\n\t\tconst args: IScanSingleExtensionArguments = {\n\t\t\tlanguage: platform.language,\n\t\t\tremoteAuthority,\n\t\t\tisBuiltin,\n\t\t\textensionLocation\n\t\t};\n\n\t\tconst extension = await channel.call<IExtensionDescription | null>('scanSingleExtension', args);\n\t\tif (extension) {\n\t\t\t(<any>extension).extensionLocation = URI.revive(extension.extensionLocation);\n\t\t}\n\t\treturn extension;\n\t}\n\n\tstatic getDiagnosticInfo(channel: IChannel, options: IDiagnosticInfoOptions): Promise<IDiagnosticInfo> {\n\t\treturn channel.call<IDiagnosticInfo>('getDiagnosticInfo', options);\n\t}\n\n\tstatic disableTelemetry(channel: IChannel): Promise<void> {\n\t\treturn channel.call<void>('disableTelemetry');\n\t}\n\n\tstatic logTelemetry(channel: IChannel, eventName: string, data: ITelemetryData): Promise<void> {\n\t\treturn channel.call<void>('logTelemetry', { eventName, data });\n\t}\n\n\tstatic flushTelemetry(channel: IChannel): Promise<void> {\n\t\treturn channel.call<void>('flushTelemetry');\n\t}\n}\n"]}