{"version":3,"sources":["vs/workbench/services/remote/browser/remoteAgentServiceImpl.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAoBhG,IAAa,kBAAkB,GAA/B,MAAa,kBAAmB,SAAQ,uDAA0B;QAEjE,YACC,gBAAsD,EACxB,kBAAgD,EAC7D,cAA+B,EACf,8BAA+D,EAClF,WAAyB,EAC1B,UAAuB;YAEpC,KAAK,CAAC,IAAI,2CAAoB,CAAC,gBAAgB,CAAC,EAAE,kBAAkB,EAAE,cAAc,EAAE,8BAA8B,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC;QAChJ,CAAC;KACD,CAAA;IAZY,kBAAkB;QAI5B,WAAA,iDAA4B,CAAA;QAC5B,WAAA,gCAAe,CAAA;QACf,WAAA,yDAA+B,CAAA;QAC/B,WAAA,mBAAY,CAAA;QACZ,WAAA,iBAAW,CAAA;OARD,kBAAkB,CAY9B;IAZY,gDAAkB;IAc/B,IAAM,+CAA+C,GAArD,MAAM,+CAA+C;QAEpD,YACsB,kBAAuC,EAC3B,cAA8B,EAChC,YAA0B,EACV,mBAAiD,EAC5D,iBAAoC;YAHvC,mBAAc,GAAd,cAAc,CAAgB;YAChC,iBAAY,GAAZ,YAAY,CAAc;YACV,wBAAmB,GAAnB,mBAAmB,CAA8B;YAC5D,sBAAiB,GAAjB,iBAAiB,CAAmB;YAExE,iFAAiF;YACjF,kBAAkB,CAAC,iBAAiB,EAAE;iBACpC,IAAI,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,EAAE;gBAYxB,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAsE,yBAAyB,EAAE;oBACjI,GAAG,EAAE,IAAI;oBACT,UAAU,EAAE,CAAA,GAAA,2BAAa,CAAA,CAAC,IAAI,CAAC,mBAAmB,CAAC,eAAe,CAAC;oBACnE,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;iBAC/B,CAAC,CAAC;gBAEH,IAAI,CAAC,sDAA4B,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE;oBACjD,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC;iBAClC;YACF,CAAC,CAAC,CAAC;QACL,CAAC;QAEO,KAAK,CAAC,uBAAuB,CAAC,GAAQ;YAC7C,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,IAAI,CACzC,uBAAQ,CAAC,KAAK,EACd,GAAG,CAAC,QAAQ,CAAC,CAAiB,EAAE,IAAmE,CAAC,EACpG;gBACC,GAAG,CAAC,QAAQ,CAAC,CAAQ,EAAE,IAAQ,CAAC;aAChC,EACD;gBACC,MAAM,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAuB,EAAE,IAA4D,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC;aACnI,CACD,CAAC;YAEF,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC,EAAE;gBACrB,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC;aAC3B;QACF,CAAC;KAED,CAAA;IApDK,+CAA+C;QAGlD,WAAA,wCAAmB,CAAA;QACnB,WAAA,wBAAc,CAAA;QACd,WAAA,mBAAY,CAAA;QACZ,WAAA,iDAA4B,CAAA;QAC5B,WAAA,6BAAiB,CAAA;OAPd,+CAA+C,CAoDpD;IAED,MAAM,iBAAiB,GAAG,mBAAQ,CAAC,EAAE,CAAkC,0BAAU,CAAC,SAAS,CAAC,CAAC;IAC7F,iBAAiB,CAAC,6BAA6B,CAAC,+CAA+C,gBAAuB,CAAC","file":"remoteAgentServiceImpl.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { IRemoteAuthorityResolverService, RemoteAuthorityResolverError } from 'vs/platform/remote/common/remoteAuthorityResolver';\nimport { AbstractRemoteAgentService } from 'vs/workbench/services/remote/common/abstractRemoteAgentService';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IWebSocketFactory, BrowserSocketFactory } from 'vs/platform/remote/browser/browserSocketFactory';\nimport { ISignService } from 'vs/platform/sign/common/sign';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { Severity } from 'vs/platform/notification/common/notification';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IWorkbenchContribution, IWorkbenchContributionsRegistry, Extensions } from 'vs/workbench/common/contributions';\nimport { IHostService } from 'vs/workbench/services/host/browser/host';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { getRemoteName } from 'vs/platform/remote/common/remoteHosts';\n\nexport class RemoteAgentService extends AbstractRemoteAgentService implements IRemoteAgentService {\n\n\tconstructor(\n\t\twebSocketFactory: IWebSocketFactory | null | undefined,\n\t\t@IWorkbenchEnvironmentService environmentService: IWorkbenchEnvironmentService,\n\t\t@IProductService productService: IProductService,\n\t\t@IRemoteAuthorityResolverService remoteAuthorityResolverService: IRemoteAuthorityResolverService,\n\t\t@ISignService signService: ISignService,\n\t\t@ILogService logService: ILogService\n\t) {\n\t\tsuper(new BrowserSocketFactory(webSocketFactory), environmentService, productService, remoteAuthorityResolverService, signService, logService);\n\t}\n}\n\nclass RemoteConnectionFailureNotificationContribution implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IRemoteAgentService remoteAgentService: IRemoteAgentService,\n\t\t@IDialogService private readonly _dialogService: IDialogService,\n\t\t@IHostService private readonly _hostService: IHostService,\n\t\t@IWorkbenchEnvironmentService private readonly _environmentService: IWorkbenchEnvironmentService,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t) {\n\t\t// Let's cover the case where connecting to fetch the remote extension info fails\n\t\tremoteAgentService.getRawEnvironment()\n\t\t\t.then(undefined, (err) => {\n\n\t\t\t\ttype RemoteConnectionFailureClassification = {\n\t\t\t\t\tweb: { classification: 'SystemMetaData', purpose: 'PerformanceAndHealth' };\n\t\t\t\t\tremoteName: { classification: 'SystemMetaData', purpose: 'PerformanceAndHealth' };\n\t\t\t\t\tmessage: { classification: 'SystemMetaData', purpose: 'PerformanceAndHealth' };\n\t\t\t\t};\n\t\t\t\ttype RemoteConnectionFailureEvent = {\n\t\t\t\t\tweb: boolean;\n\t\t\t\t\tremoteName: string | undefined;\n\t\t\t\t\tmessage: string;\n\t\t\t\t};\n\t\t\t\tthis._telemetryService.publicLog2<RemoteConnectionFailureEvent, RemoteConnectionFailureClassification>('remoteConnectionFailure', {\n\t\t\t\t\tweb: true,\n\t\t\t\t\tremoteName: getRemoteName(this._environmentService.remoteAuthority),\n\t\t\t\t\tmessage: err ? err.message : ''\n\t\t\t\t});\n\n\t\t\t\tif (!RemoteAuthorityResolverError.isHandled(err)) {\n\t\t\t\t\tthis._presentConnectionError(err);\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tprivate async _presentConnectionError(err: any): Promise<void> {\n\t\tconst res = await this._dialogService.show(\n\t\t\tSeverity.Error,\n\t\t\tnls.localize('connectionError', \"An unexpected error occurred that requires a reload of this page.\"),\n\t\t\t[\n\t\t\t\tnls.localize('reload', \"Reload\")\n\t\t\t],\n\t\t\t{\n\t\t\t\tdetail: nls.localize('connectionErrorDetail', \"The workbench failed to connect to the server (Error: {0})\", err ? err.message : '')\n\t\t\t}\n\t\t);\n\n\t\tif (res.choice === 0) {\n\t\t\tthis._hostService.reload();\n\t\t}\n\t}\n\n}\n\nconst workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(Extensions.Workbench);\nworkbenchRegistry.registerWorkbenchContribution(RemoteConnectionFailureNotificationContribution, LifecyclePhase.Ready);\n"]}