{"version":3,"file":"tunnelServiceImpl.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/remote/browser/tunnelServiceImpl.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAShG,IAAa,aAAa,GAA1B,MAAa,aAAc,SAAQ,8BAAqB;QACvD,YACc,UAAuB,EACE,kBAAgD;YAEtF,KAAK,CAAC,UAAU,CAAC,CAAC;YAFoB,uBAAkB,GAAlB,kBAAkB,CAA8B;QAGvF,CAAC;QAES,oBAAoB,CAAC,gBAAkC,EAAE,UAAkB,EAAE,UAAkB,EAAE,SAA6B,EAAE,eAAwB,EAAE,QAAiB;YACpL,MAAM,QAAQ,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;YAC/D,IAAI,QAAQ,EAAE;gBACb,EAAE,QAAQ,CAAC,QAAQ,CAAC;gBACpB,OAAO,QAAQ,CAAC,KAAK,CAAC;aACtB;YAED,IAAI,IAAI,CAAC,eAAe,EAAE;gBACzB,OAAO,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,eAAe,EAAE,UAAU,EAAE,UAAU,EAAE,SAAS,EAAE,eAAe,EAAE,QAAQ,CAAC,CAAC;aACnH;YACD,OAAO,SAAS,CAAC;QAClB,CAAC;QAEQ,SAAS,CAAC,GAAQ;YAC1B,OAAO,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,eAAe,CAAC;QAC1E,CAAC;KACD,CAAA;IAxBY,aAAa;QAEvB,WAAA,iBAAW,CAAA;QACX,WAAA,iDAA4B,CAAA;OAHlB,aAAa,CAwBzB;IAxBY,sCAAa;IA0B1B,CAAA,GAAA,8BAAiB,CAAA,CAAC,uBAAc,EAAE,aAAa,EAAE,IAAI,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IAddressProvider } from 'vs/platform/remote/common/remoteAgentConnection';\nimport { AbstractTunnelService, ITunnelService, RemoteTunnel } from 'vs/platform/remote/common/tunnel';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\n\nexport class TunnelService extends AbstractTunnelService {\n\tconstructor(\n\t\t@ILogService logService: ILogService,\n\t\t@IWorkbenchEnvironmentService private environmentService: IWorkbenchEnvironmentService\n\t) {\n\t\tsuper(logService);\n\t}\n\n\tprotected retainOrCreateTunnel(_addressProvider: IAddressProvider, remoteHost: string, remotePort: number, localPort: number | undefined, elevateIfNeeded: boolean, isPublic: boolean): Promise<RemoteTunnel | undefined> | undefined {\n\t\tconst existing = this.getTunnelFromMap(remoteHost, remotePort);\n\t\tif (existing) {\n\t\t\t++existing.refcount;\n\t\t\treturn existing.value;\n\t\t}\n\n\t\tif (this._tunnelProvider) {\n\t\t\treturn this.createWithProvider(this._tunnelProvider, remoteHost, remotePort, localPort, elevateIfNeeded, isPublic);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\toverride canTunnel(uri: URI): boolean {\n\t\treturn super.canTunnel(uri) && !!this.environmentService.remoteAuthority;\n\t}\n}\n\nregisterSingleton(ITunnelService, TunnelService, true);\n"]}