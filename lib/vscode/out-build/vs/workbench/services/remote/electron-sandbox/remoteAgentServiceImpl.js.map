{"version":3,"sources":["vs/workbench/services/remote/electron-sandbox/remoteAgentServiceImpl.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAkBhG,IAAa,kBAAkB,GAA/B,MAAa,kBAAmB,SAAQ,uDAA0B;QACjE,YAC+B,kBAAgD,EAC7D,cAA+B,EACf,8BAA+D,EAClF,WAAyB,EAC1B,UAAuB;YAEpC,KAAK,CAAC,IAAI,2CAAoB,CAAC,IAAI,CAAC,EAAE,kBAAkB,EAAE,cAAc,EAAE,8BAA8B,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC;QACpI,CAAC;KACD,CAAA;IAVY,kBAAkB;QAE5B,WAAA,iDAA4B,CAAA;QAC5B,WAAA,gCAAe,CAAA;QACf,WAAA,yDAA+B,CAAA;QAC/B,WAAA,mBAAY,CAAA;QACZ,WAAA,iBAAW,CAAA;OAND,kBAAkB,CAU9B;IAVY,gDAAkB;IAY/B,IAAM,+CAA+C,GAArD,MAAM,+CAA+C;QAEpD,YACsB,kBAAuC,EACtC,mBAAyC,EACjC,kBAAgD,EAC3D,gBAAmC;YAEtD,iFAAiF;YACjF,kBAAkB,CAAC,iBAAiB,EAAE;iBACpC,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,EAAE;gBAYtB,gBAAgB,CAAC,UAAU,CAAsE,yBAAyB,EAAE;oBAC3H,GAAG,EAAE,KAAK;oBACV,UAAU,EAAE,CAAA,GAAA,2BAAa,CAAA,CAAC,kBAAkB,CAAC,eAAe,CAAC;oBAC7D,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;iBAC/B,CAAC,CAAC;gBAEH,IAAI,CAAC,sDAA4B,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE;oBACjD,mBAAmB,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAiB,EAAE,IAAoE,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;iBACzJ;YACF,CAAC,CAAC,CAAC;QACL,CAAC;KAED,CAAA;IAlCK,+CAA+C;QAGlD,WAAA,wCAAmB,CAAA;QACnB,WAAA,mCAAoB,CAAA;QACpB,WAAA,iDAA4B,CAAA;QAC5B,WAAA,6BAAiB,CAAA;OANd,+CAA+C,CAkCpD;IAED,MAAM,iBAAiB,GAAG,mBAAQ,CAAC,EAAE,CAAkC,0BAAU,CAAC,SAAS,CAAC,CAAC;IAC7F,iBAAiB,CAAC,6BAA6B,CAAC,+CAA+C,gBAAuB,CAAC","file":"remoteAgentServiceImpl.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { IRemoteAuthorityResolverService, RemoteAuthorityResolverError } from 'vs/platform/remote/common/remoteAuthorityResolver';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { BrowserSocketFactory } from 'vs/platform/remote/browser/browserSocketFactory';\nimport { AbstractRemoteAgentService } from 'vs/workbench/services/remote/common/abstractRemoteAgentService';\nimport { ISignService } from 'vs/platform/sign/common/sign';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IWorkbenchContribution, IWorkbenchContributionsRegistry, Extensions } from 'vs/workbench/common/contributions';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { getRemoteName } from 'vs/platform/remote/common/remoteHosts';\n\nexport class RemoteAgentService extends AbstractRemoteAgentService implements IRemoteAgentService {\n\tconstructor(\n\t\t@IWorkbenchEnvironmentService environmentService: IWorkbenchEnvironmentService,\n\t\t@IProductService productService: IProductService,\n\t\t@IRemoteAuthorityResolverService remoteAuthorityResolverService: IRemoteAuthorityResolverService,\n\t\t@ISignService signService: ISignService,\n\t\t@ILogService logService: ILogService,\n\t) {\n\t\tsuper(new BrowserSocketFactory(null), environmentService, productService, remoteAuthorityResolverService, signService, logService);\n\t}\n}\n\nclass RemoteConnectionFailureNotificationContribution implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IRemoteAgentService remoteAgentService: IRemoteAgentService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@IWorkbenchEnvironmentService environmentService: IWorkbenchEnvironmentService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t) {\n\t\t// Let's cover the case where connecting to fetch the remote extension info fails\n\t\tremoteAgentService.getRawEnvironment()\n\t\t\t.then(undefined, err => {\n\n\t\t\t\ttype RemoteConnectionFailureClassification = {\n\t\t\t\t\tweb: { classification: 'SystemMetaData', purpose: 'PerformanceAndHealth' };\n\t\t\t\t\tremoteName: { classification: 'SystemMetaData', purpose: 'PerformanceAndHealth' };\n\t\t\t\t\tmessage: { classification: 'SystemMetaData', purpose: 'PerformanceAndHealth' };\n\t\t\t\t};\n\t\t\t\ttype RemoteConnectionFailureEvent = {\n\t\t\t\t\tweb: boolean;\n\t\t\t\t\tremoteName: string | undefined;\n\t\t\t\t\tmessage: string;\n\t\t\t\t};\n\t\t\t\ttelemetryService.publicLog2<RemoteConnectionFailureEvent, RemoteConnectionFailureClassification>('remoteConnectionFailure', {\n\t\t\t\t\tweb: false,\n\t\t\t\t\tremoteName: getRemoteName(environmentService.remoteAuthority),\n\t\t\t\t\tmessage: err ? err.message : '',\n\t\t\t\t});\n\n\t\t\t\tif (!RemoteAuthorityResolverError.isHandled(err)) {\n\t\t\t\t\tnotificationService.error(nls.localize('connectionError', \"Failed to connect to the remote extension host server (Error: {0})\", err ? err.message : ''));\n\t\t\t\t}\n\t\t\t});\n\t}\n\n}\n\nconst workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(Extensions.Workbench);\nworkbenchRegistry.registerWorkbenchContribution(RemoteConnectionFailureNotificationContribution, LifecyclePhase.Ready);\n"]}