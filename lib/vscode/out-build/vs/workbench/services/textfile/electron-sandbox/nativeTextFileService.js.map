{"version":3,"file":"nativeTextFileService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/textfile/electron-sandbox/nativeTextFileService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IA0BhG,IAAa,qBAAqB,GAAlC,MAAa,qBAAsB,SAAQ,yCAAuB;QAIjE,YACe,WAAyB,EACX,yBAAqD,EAC9D,gBAAmC,EAC/B,oBAA2C,EACnD,YAA2B,EACN,kBAAsD,EAC1E,aAA6B,EACzB,iBAAqC,EACtB,gCAAmE,EAC1E,yBAAqD,EAC9D,gBAAmC,EAClC,iBAAqC,EAC3C,WAAyB,EACd,sBAA+C,EACnD,kBAAuC,EAC9C,WAAyB,EACjB,mBAAyC,EAClD,UAAuB;YAEpC,KAAK,CAAC,WAAW,EAAE,yBAAyB,EAAE,gBAAgB,EAAE,oBAAoB,EAAE,YAAY,EAAE,kBAAkB,EAAE,aAAa,EAAE,iBAAiB,EAAE,gCAAgC,EAAE,yBAAyB,EAAE,gBAAgB,EAAE,iBAAiB,EAAE,WAAW,EAAE,sBAAsB,EAAE,kBAAkB,EAAE,WAAW,EAAE,UAAU,EAAE,mBAAmB,CAAC,CAAC;YAEnW,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;QAC9C,CAAC;QAEkB,iBAAiB;YACnC,KAAK,CAAC,iBAAiB,EAAE,CAAC;YAE1B,YAAY;YACZ,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,EAAE,gBAAgB,CAAC,CAAC,CAAC;QACpG,CAAC;QAEO,KAAK,CAAC,cAAc;YAC3B,IAAI,mBAA2C,CAAC;YAEhD,qEAAqE;YACrE,oEAAoE;YACpE,gCAAgC;YAChC,sDAAsD;YACtD,OAAO,CAAC,mBAAmB,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,sBAAuC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;gBACnI,MAAM,gBAAQ,CAAC,OAAO,CAAC,mBAAmB,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,SAAS,sBAAuC,CAAC,CAAC,CAAC;aACjH;QACF,CAAC;QAEQ,KAAK,CAAC,IAAI,CAAC,QAAa,EAAE,OAA8B;YAEhE,8BAA8B;YAC9B,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;YAErC,OAAO,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QACtC,CAAC;QAEQ,KAAK,CAAC,UAAU,CAAC,QAAa,EAAE,OAA8B;YAEtE,8BAA8B;YAC9B,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;YAErC,OAAO,KAAK,CAAC,UAAU,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QAC5C,CAAC;QAEO,YAAY,CAAC,OAA8B;YAClD,IAAI,cAAoC,CAAC;YACzC,IAAI,CAAC,OAAO,EAAE;gBACb,cAAc,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;aACrC;iBAAM;gBACN,cAAc,GAAG,OAAO,CAAC;aACzB;YAED,IAAI,aAAkD,CAAC;YACvD,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE;gBAC3B,aAAa,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBACpC,cAAc,CAAC,MAAM,GAAG,aAAa,CAAC;aACtC;iBAAM;gBACN,aAAa,GAAG,cAAc,CAAC,MAAM,CAAC;aACtC;YAED,IAAI,OAAO,aAAa,CAAC,IAAI,KAAK,QAAQ,EAAE;gBAC3C,aAAa,CAAC,IAAI,GAAG,CAAA,GAAA,yBAAiB,CAAA,CAAC,iBAAO,CAAC,IAAI,KAAK,MAAM,CAAC,CAAC,cAAW,CAAC,cAAW,CAAC,CAAC,WAAW,CAAC;aACrG;YAED,IAAI,OAAO,aAAa,CAAC,MAAM,KAAK,QAAQ,EAAE;gBAC7C,MAAM,SAAS,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;gBAC7D,aAAa,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,SAAS,KAAK,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,gBAAQ,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAA,GAAA,yBAAiB,CAAA,CAAC,iBAAO,CAAC,IAAI,KAAK,MAAM,CAAC,CAAC,cAAW,CAAC,cAAW,CAAC,CAAC,WAAW,CAAC,CAAC;aAC7L;YAED,OAAO,cAAc,CAAC;QACvB,CAAC;KACD,CAAA;IA3FY,qBAAqB;QAK/B,WAAA,oBAAY,CAAA;QACZ,WAAA,sDAA0B,CAAA;QAC1B,WAAA,6BAAiB,CAAA;QACjB,WAAA,qCAAqB,CAAA;QACrB,WAAA,4BAAa,CAAA;QACb,WAAA,uDAAkC,CAAA;QAClC,WAAA,wBAAc,CAAA;QACd,WAAA,4BAAkB,CAAA;QAClB,WAAA,oEAAiC,CAAA;QACjC,WAAA,sDAA0B,CAAA;QAC1B,YAAA,mCAAiB,CAAA;QACjB,YAAA,sCAAkB,CAAA;QAClB,YAAA,0BAAY,CAAA;QACZ,YAAA,gDAAuB,CAAA;QACvB,YAAA,iCAAmB,CAAA;QACnB,YAAA,0BAAY,CAAA;QACZ,YAAA,0CAAoB,CAAA;QACpB,YAAA,iBAAW,CAAA;OAtBD,qBAAqB,CA2FjC;IA3FY,sDAAqB;IA6FlC,CAAA,GAAA,8BAAiB,CAAA,CAAC,4BAAgB,EAAE,qBAAqB,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { process } from 'vs/base/parts/sandbox/electron-sandbox/globals';\nimport { AbstractTextFileService } from 'vs/workbench/services/textfile/browser/textFileService';\nimport { ITextFileService, ITextFileStreamContent, ITextFileContent, IReadTextFileOptions, TextFileEditorModelState, ITextFileEditorModel } from 'vs/workbench/services/textfile/common/textfiles';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { URI } from 'vs/base/common/uri';\nimport { IFileService, ByteSize, getPlatformLimits, Arch } from 'vs/platform/files/common/files';\nimport { ITextResourceConfigurationService } from 'vs/editor/common/services/textResourceConfigurationService';\nimport { IUntitledTextEditorService } from 'vs/workbench/services/untitled/common/untitledTextEditorService';\nimport { ILifecycleService } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { INativeWorkbenchEnvironmentService } from 'vs/workbench/services/environment/electron-sandbox/environmentService';\nimport { IDialogService, IFileDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { IFilesConfigurationService } from 'vs/workbench/services/filesConfiguration/common/filesConfigurationService';\nimport { ITextModelService } from 'vs/editor/common/services/resolverService';\nimport { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';\nimport { IPathService } from 'vs/workbench/services/path/common/pathService';\nimport { IWorkingCopyFileService } from 'vs/workbench/services/workingCopy/common/workingCopyFileService';\nimport { IUriIdentityService } from 'vs/workbench/services/uriIdentity/common/uriIdentity';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { IElevatedFileService } from 'vs/workbench/services/files/common/elevatedFileService';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { Promises } from 'vs/base/common/async';\n\nexport class NativeTextFileService extends AbstractTextFileService {\n\n\tprotected override readonly environmentService: INativeWorkbenchEnvironmentService;\n\n\tconstructor(\n\t\t@IFileService fileService: IFileService,\n\t\t@IUntitledTextEditorService untitledTextEditorService: IUntitledTextEditorService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IModelService modelService: IModelService,\n\t\t@INativeWorkbenchEnvironmentService environmentService: INativeWorkbenchEnvironmentService,\n\t\t@IDialogService dialogService: IDialogService,\n\t\t@IFileDialogService fileDialogService: IFileDialogService,\n\t\t@ITextResourceConfigurationService textResourceConfigurationService: ITextResourceConfigurationService,\n\t\t@IFilesConfigurationService filesConfigurationService: IFilesConfigurationService,\n\t\t@ITextModelService textModelService: ITextModelService,\n\t\t@ICodeEditorService codeEditorService: ICodeEditorService,\n\t\t@IPathService pathService: IPathService,\n\t\t@IWorkingCopyFileService workingCopyFileService: IWorkingCopyFileService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t\t@IModeService modeService: IModeService,\n\t\t@IElevatedFileService elevatedFileService: IElevatedFileService,\n\t\t@ILogService logService: ILogService\n\t) {\n\t\tsuper(fileService, untitledTextEditorService, lifecycleService, instantiationService, modelService, environmentService, dialogService, fileDialogService, textResourceConfigurationService, filesConfigurationService, textModelService, codeEditorService, pathService, workingCopyFileService, uriIdentityService, modeService, logService, elevatedFileService);\n\n\t\tthis.environmentService = environmentService;\n\t}\n\n\tprotected override registerListeners(): void {\n\t\tsuper.registerListeners();\n\n\t\t// Lifecycle\n\t\tthis.lifecycleService.onWillShutdown(event => event.join(this.onWillShutdown(), 'join.textFiles'));\n\t}\n\n\tprivate async onWillShutdown(): Promise<void> {\n\t\tlet modelsPendingToSave: ITextFileEditorModel[];\n\n\t\t// As long as models are pending to be saved, we prolong the shutdown\n\t\t// until that has happened to ensure we are not shutting down in the\n\t\t// middle of writing to the file\n\t\t// (https://github.com/microsoft/vscode/issues/116600)\n\t\twhile ((modelsPendingToSave = this.files.models.filter(model => model.hasState(TextFileEditorModelState.PENDING_SAVE))).length > 0) {\n\t\t\tawait Promises.settled(modelsPendingToSave.map(model => model.joinState(TextFileEditorModelState.PENDING_SAVE)));\n\t\t}\n\t}\n\n\toverride async read(resource: URI, options?: IReadTextFileOptions): Promise<ITextFileContent> {\n\n\t\t// ensure size & memory limits\n\t\toptions = this.ensureLimits(options);\n\n\t\treturn super.read(resource, options);\n\t}\n\n\toverride async readStream(resource: URI, options?: IReadTextFileOptions): Promise<ITextFileStreamContent> {\n\n\t\t// ensure size & memory limits\n\t\toptions = this.ensureLimits(options);\n\n\t\treturn super.readStream(resource, options);\n\t}\n\n\tprivate ensureLimits(options?: IReadTextFileOptions): IReadTextFileOptions {\n\t\tlet ensuredOptions: IReadTextFileOptions;\n\t\tif (!options) {\n\t\t\tensuredOptions = Object.create(null);\n\t\t} else {\n\t\t\tensuredOptions = options;\n\t\t}\n\n\t\tlet ensuredLimits: { size?: number; memory?: number; };\n\t\tif (!ensuredOptions.limits) {\n\t\t\tensuredLimits = Object.create(null);\n\t\t\tensuredOptions.limits = ensuredLimits;\n\t\t} else {\n\t\t\tensuredLimits = ensuredOptions.limits;\n\t\t}\n\n\t\tif (typeof ensuredLimits.size !== 'number') {\n\t\t\tensuredLimits.size = getPlatformLimits(process.arch === 'ia32' ? Arch.IA32 : Arch.OTHER).maxFileSize;\n\t\t}\n\n\t\tif (typeof ensuredLimits.memory !== 'number') {\n\t\t\tconst maxMemory = this.environmentService.args['max-memory'];\n\t\t\tensuredLimits.memory = Math.max(typeof maxMemory === 'string' ? parseInt(maxMemory) * ByteSize.MB || 0 : 0, getPlatformLimits(process.arch === 'ia32' ? Arch.IA32 : Arch.OTHER).maxHeapSize);\n\t\t}\n\n\t\treturn ensuredOptions;\n\t}\n}\n\nregisterSingleton(ITextFileService, NativeTextFileService);\n"]}