{"version":3,"file":"nativeTextFileService.io.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/textfile/test/electron-browser/nativeTextFileService.io.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAsBhG,CAAA,GAAA,sBAAU,CAAA,CAAC,mCAAmC,EAAE;QAC/C,MAAM,WAAW,GAAG,IAAI,2BAAe,EAAE,CAAC;QAE1C,IAAI,OAAyB,CAAC;QAC9B,IAAI,OAAe,CAAC;QAIpB,SAAS,QAAQ,CAAC,IAAY,EAAE,QAAyB;YACxD,OAAO,aAAQ,CAAC,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QAC1C,CAAC;QAED,CAAA,GAAA,iCAAW,CAAA,CAAC;YACX,KAAK,EAAE,KAAK,IAAI,EAAE;gBACjB,MAAM,oBAAoB,GAAG,CAAA,GAAA,qDAA6B,CAAA,EAAE,CAAC;gBAE7D,MAAM,UAAU,GAAG,IAAI,oBAAc,EAAE,CAAC;gBACxC,MAAM,WAAW,GAAG,IAAI,yBAAW,CAAC,UAAU,CAAC,CAAC;gBAEhD,MAAM,YAAY,GAAG,IAAI,+CAAsB,CAAC,UAAU,CAAC,CAAC;gBAC5D,WAAW,CAAC,GAAG,CAAC,WAAW,CAAC,gBAAgB,CAAC,iBAAO,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC,CAAC;gBAC1E,WAAW,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;gBAE9B,MAAM,UAAU,GAAG,IAAI,qCAAiB,EAAE,CAAC;gBAC3C,UAAU,CAAC,GAAG,CAAC,oBAAY,EAAE,WAAW,CAAC,CAAC;gBAE1C,UAAU,CAAC,GAAG,CAAC,gDAAuB,EAAE,IAAI,+CAAsB,CAAC,WAAW,EAAE,IAAI,uCAAkB,EAAE,EAAE,oBAAoB,EAAE,IAAI,uCAAkB,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;gBAEtK,OAAO,GAAG,oBAAoB,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,cAAc,CAAC,sEAA8C,CAAC,CAAC;gBAEtH,OAAO,GAAG,CAAA,GAAA,6BAAiB,CAAA,CAAC,CAAA,GAAA,WAAM,CAAA,EAAE,EAAE,UAAU,EAAE,iBAAiB,CAAC,CAAC;gBACrE,MAAM,SAAS,GAAG,CAAA,GAAA,gCAAoB,CAAA,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;gBAE9D,MAAM,CAAA,GAAA,UAAI,CAAA,CAAC,SAAS,EAAE,OAAO,EAAE,EAAE,gBAAgB,EAAE,KAAK,EAAE,CAAC,CAAC;gBAE5D,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC;YAC7B,CAAC;YAED,QAAQ,EAAE,GAAG,EAAE;gBACe,OAAO,CAAC,KAAM,CAAC,OAAO,EAAE,CAAC;gBAEtD,WAAW,CAAC,KAAK,EAAE,CAAC;gBAEpB,OAAO,CAAA,GAAA,YAAM,CAAA,CAAC,OAAO,CAAC,CAAC;YACxB,CAAC;YAED,MAAM,EAAN,YAAM;YACN,IAAI,EAAE,aAAQ,CAAC,IAAI;YACnB,QAAQ;YACR,mBAAmB,EAAnB,mCAAmB;SACnB,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { tmpdir } from 'os';\nimport { promises } from 'fs';\nimport { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { TextFileEditorModelManager } from 'vs/workbench/services/textfile/common/textFileEditorModelManager';\nimport { Schemas } from 'vs/base/common/network';\nimport { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';\nimport { rimraf, copy, exists } from 'vs/base/node/pfs';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { FileService } from 'vs/platform/files/common/fileService';\nimport { NullLogService } from 'vs/platform/log/common/log';\nimport { flakySuite, getRandomTestPath, getPathFromAmdModule } from 'vs/base/test/node/testUtils';\nimport { DiskFileSystemProvider } from 'vs/platform/files/node/diskFileSystemProvider';\nimport { detectEncodingByBOM } from 'vs/workbench/services/textfile/test/node/encoding/encoding.test';\nimport { workbenchInstantiationService, TestNativeTextFileServiceWithEncodingOverrides } from 'vs/workbench/test/electron-browser/workbenchTestServices';\nimport createSuite from 'vs/workbench/services/textfile/test/common/textFileService.io.test';\nimport { IWorkingCopyFileService, WorkingCopyFileService } from 'vs/workbench/services/workingCopy/common/workingCopyFileService';\nimport { WorkingCopyService } from 'vs/workbench/services/workingCopy/common/workingCopyService';\nimport { UriIdentityService } from 'vs/workbench/services/uriIdentity/common/uriIdentityService';\n\nflakySuite('Files - NativeTextFileService i/o', function () {\n\tconst disposables = new DisposableStore();\n\n\tlet service: ITextFileService;\n\tlet testDir: string;\n\n\tfunction readFile(path: string): Promise<Buffer>;\n\tfunction readFile(path: string, encoding: BufferEncoding): Promise<string>;\n\tfunction readFile(path: string, encoding?: BufferEncoding): Promise<Buffer | string> {\n\t\treturn promises.readFile(path, encoding);\n\t}\n\n\tcreateSuite({\n\t\tsetup: async () => {\n\t\t\tconst instantiationService = workbenchInstantiationService();\n\n\t\t\tconst logService = new NullLogService();\n\t\t\tconst fileService = new FileService(logService);\n\n\t\t\tconst fileProvider = new DiskFileSystemProvider(logService);\n\t\t\tdisposables.add(fileService.registerProvider(Schemas.file, fileProvider));\n\t\t\tdisposables.add(fileProvider);\n\n\t\t\tconst collection = new ServiceCollection();\n\t\t\tcollection.set(IFileService, fileService);\n\n\t\t\tcollection.set(IWorkingCopyFileService, new WorkingCopyFileService(fileService, new WorkingCopyService(), instantiationService, new UriIdentityService(fileService)));\n\n\t\t\tservice = instantiationService.createChild(collection).createInstance(TestNativeTextFileServiceWithEncodingOverrides);\n\n\t\t\ttestDir = getRandomTestPath(tmpdir(), 'vsctests', 'textfileservice');\n\t\t\tconst sourceDir = getPathFromAmdModule(require, './fixtures');\n\n\t\t\tawait copy(sourceDir, testDir, { preserveSymlinks: false });\n\n\t\t\treturn { service, testDir };\n\t\t},\n\n\t\tteardown: () => {\n\t\t\t(<TextFileEditorModelManager>service.files).dispose();\n\n\t\t\tdisposables.clear();\n\n\t\t\treturn rimraf(testDir);\n\t\t},\n\n\t\texists,\n\t\tstat: promises.stat,\n\t\treadFile,\n\t\tdetectEncodingByBOM\n\t});\n});\n"]}