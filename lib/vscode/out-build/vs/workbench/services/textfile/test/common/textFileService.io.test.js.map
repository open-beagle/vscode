{"version":3,"file":"textFileService.io.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/textfile/test/common/textFileService.io.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { ITextFileService, snapshotToString, TextFileOperationError, TextFileOperationResult, stringToSnapshot } from 'vs/workbench/services/textfile/common/textfiles';\nimport { URI } from 'vs/base/common/uri';\nimport { join, basename } from 'vs/base/common/path';\nimport { UTF16le, UTF8_with_bom, UTF16be, UTF8, UTF16le_BOM, UTF16be_BOM, UTF8_BOM } from 'vs/workbench/services/textfile/common/encoding';\nimport { bufferToStream, VSBuffer } from 'vs/base/common/buffer';\nimport { createTextModel } from 'vs/editor/test/common/editorTestUtils';\nimport { ITextSnapshot, DefaultEndOfLine } from 'vs/editor/common/model';\nimport { isWindows } from 'vs/base/common/platform';\nimport { createTextBufferFactoryFromStream } from 'vs/editor/common/model/textModel';\n\nexport interface Params {\n\tsetup(): Promise<{\n\t\tservice: ITextFileService,\n\t\ttestDir: string\n\t}>\n\tteardown(): Promise<void>\n\n\texists(fsPath: string): Promise<boolean>;\n\tstat(fsPath: string): Promise<{ size: number }>;\n\treadFile(fsPath: string): Promise<VSBuffer | Buffer>;\n\treadFile(fsPath: string, encoding: string): Promise<string>;\n\treadFile(fsPath: string, encoding?: string): Promise<VSBuffer | Buffer | string>;\n\tdetectEncodingByBOM(fsPath: string): Promise<typeof UTF16be | typeof UTF16le | typeof UTF8_with_bom | null>;\n}\n\n/**\n * Allows us to reuse test suite across different environments.\n *\n * It introduces a bit of complexity with setup and teardown, however\n * it helps us to ensure that tests are added for all environments at once,\n * hence helps us catch bugs better.\n */\nexport default function createSuite(params: Params) {\n\tlet service: ITextFileService;\n\tlet testDir = '';\n\tconst { exists, stat, readFile, detectEncodingByBOM } = params;\n\n\tsetup(async () => {\n\t\tconst result = await params.setup();\n\t\tservice = result.service;\n\t\ttestDir = result.testDir;\n\t});\n\n\tteardown(async () => {\n\t\tawait params.teardown();\n\t});\n\n\ttest('create - no encoding - content empty', async () => {\n\t\tconst resource = URI.file(join(testDir, 'small_new.txt'));\n\n\t\tawait service.create([{ resource }]);\n\n\t\tconst res = await readFile(resource.fsPath);\n\t\tassert.strictEqual(res.byteLength, 0 /* no BOM */);\n\t});\n\n\ttest('create - no encoding - content provided (string)', async () => {\n\t\tconst resource = URI.file(join(testDir, 'small_new.txt'));\n\n\t\tawait service.create([{ resource, value: 'Hello World' }]);\n\n\t\tconst res = await readFile(resource.fsPath);\n\t\tassert.strictEqual(res.toString(), 'Hello World');\n\t\tassert.strictEqual(res.byteLength, 'Hello World'.length);\n\t});\n\n\ttest('create - no encoding - content provided (snapshot)', async () => {\n\t\tconst resource = URI.file(join(testDir, 'small_new.txt'));\n\n\t\tawait service.create([{ resource, value: stringToSnapshot('Hello World') }]);\n\n\t\tconst res = await readFile(resource.fsPath);\n\t\tassert.strictEqual(res.toString(), 'Hello World');\n\t\tassert.strictEqual(res.byteLength, 'Hello World'.length);\n\t});\n\n\ttest('create - UTF 16 LE - no content', async () => {\n\t\tconst resource = URI.file(join(testDir, 'small_new.utf16le'));\n\n\t\tawait service.create([{ resource }]);\n\n\t\tassert.strictEqual(await exists(resource.fsPath), true);\n\n\t\tconst detectedEncoding = await detectEncodingByBOM(resource.fsPath);\n\t\tassert.strictEqual(detectedEncoding, UTF16le);\n\n\t\tconst res = await readFile(resource.fsPath);\n\t\tassert.strictEqual(res.byteLength, UTF16le_BOM.length);\n\t});\n\n\ttest('create - UTF 16 LE - content provided', async () => {\n\t\tconst resource = URI.file(join(testDir, 'small_new.utf16le'));\n\n\t\tawait service.create([{ resource, value: 'Hello World' }]);\n\n\t\tassert.strictEqual(await exists(resource.fsPath), true);\n\n\t\tconst detectedEncoding = await detectEncodingByBOM(resource.fsPath);\n\t\tassert.strictEqual(detectedEncoding, UTF16le);\n\n\t\tconst res = await readFile(resource.fsPath);\n\t\tassert.strictEqual(res.byteLength, 'Hello World'.length * 2 /* UTF16 2bytes per char */ + UTF16le_BOM.length);\n\t});\n\n\ttest('create - UTF 16 BE - no content', async () => {\n\t\tconst resource = URI.file(join(testDir, 'small_new.utf16be'));\n\n\t\tawait service.create([{ resource }]);\n\n\t\tassert.strictEqual(await exists(resource.fsPath), true);\n\n\t\tconst detectedEncoding = await detectEncodingByBOM(resource.fsPath);\n\t\tassert.strictEqual(detectedEncoding, UTF16be);\n\n\t\tconst res = await readFile(resource.fsPath);\n\t\tassert.strictEqual(res.byteLength, UTF16le_BOM.length);\n\t});\n\n\ttest('create - UTF 16 BE - content provided', async () => {\n\t\tconst resource = URI.file(join(testDir, 'small_new.utf16be'));\n\n\t\tawait service.create([{ resource, value: 'Hello World' }]);\n\n\t\tassert.strictEqual(await exists(resource.fsPath), true);\n\n\t\tconst detectedEncoding = await detectEncodingByBOM(resource.fsPath);\n\t\tassert.strictEqual(detectedEncoding, UTF16be);\n\n\t\tconst res = await readFile(resource.fsPath);\n\t\tassert.strictEqual(res.byteLength, 'Hello World'.length * 2 /* UTF16 2bytes per char */ + UTF16be_BOM.length);\n\t});\n\n\ttest('create - UTF 8 BOM - no content', async () => {\n\t\tconst resource = URI.file(join(testDir, 'small_new.utf8bom'));\n\n\t\tawait service.create([{ resource }]);\n\n\t\tassert.strictEqual(await exists(resource.fsPath), true);\n\n\t\tconst detectedEncoding = await detectEncodingByBOM(resource.fsPath);\n\t\tassert.strictEqual(detectedEncoding, UTF8_with_bom);\n\n\t\tconst res = await readFile(resource.fsPath);\n\t\tassert.strictEqual(res.byteLength, UTF8_BOM.length);\n\t});\n\n\ttest('create - UTF 8 BOM - content provided', async () => {\n\t\tconst resource = URI.file(join(testDir, 'small_new.utf8bom'));\n\n\t\tawait service.create([{ resource, value: 'Hello World' }]);\n\n\t\tassert.strictEqual(await exists(resource.fsPath), true);\n\n\t\tconst detectedEncoding = await detectEncodingByBOM(resource.fsPath);\n\t\tassert.strictEqual(detectedEncoding, UTF8_with_bom);\n\n\t\tconst res = await readFile(resource.fsPath);\n\t\tassert.strictEqual(res.byteLength, 'Hello World'.length + UTF8_BOM.length);\n\t});\n\n\ttest('create - UTF 8 BOM - empty content - snapshot', async () => {\n\t\tconst resource = URI.file(join(testDir, 'small_new.utf8bom'));\n\n\t\tawait service.create([{ resource, value: createTextModel('').createSnapshot() }]);\n\n\t\tassert.strictEqual(await exists(resource.fsPath), true);\n\n\t\tconst detectedEncoding = await detectEncodingByBOM(resource.fsPath);\n\t\tassert.strictEqual(detectedEncoding, UTF8_with_bom);\n\n\t\tconst res = await readFile(resource.fsPath);\n\t\tassert.strictEqual(res.byteLength, UTF8_BOM.length);\n\t});\n\n\ttest('create - UTF 8 BOM - content provided - snapshot', async () => {\n\t\tconst resource = URI.file(join(testDir, 'small_new.utf8bom'));\n\n\t\tawait service.create([{ resource, value: createTextModel('Hello World').createSnapshot() }]);\n\n\t\tassert.strictEqual(await exists(resource.fsPath), true);\n\n\t\tconst detectedEncoding = await detectEncodingByBOM(resource.fsPath);\n\t\tassert.strictEqual(detectedEncoding, UTF8_with_bom);\n\n\t\tconst res = await readFile(resource.fsPath);\n\t\tassert.strictEqual(res.byteLength, 'Hello World'.length + UTF8_BOM.length);\n\t});\n\n\ttest('write - use encoding (UTF 16 BE) - small content as string', async () => {\n\t\tawait testEncoding(URI.file(join(testDir, 'small.txt')), UTF16be, 'Hello\\nWorld', 'Hello\\nWorld');\n\t});\n\n\ttest('write - use encoding (UTF 16 BE) - small content as snapshot', async () => {\n\t\tawait testEncoding(URI.file(join(testDir, 'small.txt')), UTF16be, createTextModel('Hello\\nWorld').createSnapshot(), 'Hello\\nWorld');\n\t});\n\n\ttest('write - use encoding (UTF 16 BE) - large content as string', async () => {\n\t\tawait testEncoding(URI.file(join(testDir, 'lorem.txt')), UTF16be, 'Hello\\nWorld', 'Hello\\nWorld');\n\t});\n\n\ttest('write - use encoding (UTF 16 BE) - large content as snapshot', async () => {\n\t\tawait testEncoding(URI.file(join(testDir, 'lorem.txt')), UTF16be, createTextModel('Hello\\nWorld').createSnapshot(), 'Hello\\nWorld');\n\t});\n\n\tasync function testEncoding(resource: URI, encoding: string, content: string | ITextSnapshot, expectedContent: string) {\n\t\tawait service.write(resource, content, { encoding });\n\n\t\tconst detectedEncoding = await detectEncodingByBOM(resource.fsPath);\n\t\tassert.strictEqual(detectedEncoding, encoding);\n\n\t\tconst resolved = await service.readStream(resource);\n\t\tassert.strictEqual(resolved.encoding, encoding);\n\n\t\tassert.strictEqual(snapshotToString(resolved.value.create(isWindows ? DefaultEndOfLine.CRLF : DefaultEndOfLine.LF).textBuffer.createSnapshot(false)), expectedContent);\n\t}\n\n\ttest('write - use encoding (cp1252)', async () => {\n\t\tconst filePath = join(testDir, 'some_cp1252.txt');\n\t\tconst contents = await readFile(filePath, 'utf8');\n\t\tconst eol = /\\r\\n/.test(contents) ? '\\r\\n' : '\\n';\n\t\tawait testEncodingKeepsData(URI.file(filePath), 'cp1252', ['ObjectCount = LoadObjects(\"Öffentlicher Ordner\");', '', 'Private = \"Persönliche Information\"', ''].join(eol));\n\t});\n\n\ttest('write - use encoding (shiftjis)', async () => {\n\t\tawait testEncodingKeepsData(URI.file(join(testDir, 'some_shiftjis.txt')), 'shiftjis', '中文abc');\n\t});\n\n\ttest('write - use encoding (gbk)', async () => {\n\t\tawait testEncodingKeepsData(URI.file(join(testDir, 'some_gbk.txt')), 'gbk', '中国abc');\n\t});\n\n\ttest('write - use encoding (cyrillic)', async () => {\n\t\tawait testEncodingKeepsData(URI.file(join(testDir, 'some_cyrillic.txt')), 'cp866', 'АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя');\n\t});\n\n\ttest('write - use encoding (big5)', async () => {\n\t\tawait testEncodingKeepsData(URI.file(join(testDir, 'some_big5.txt')), 'cp950', '中文abc');\n\t});\n\n\tasync function testEncodingKeepsData(resource: URI, encoding: string, expected: string) {\n\t\tlet resolved = await service.readStream(resource, { encoding });\n\t\tconst content = snapshotToString(resolved.value.create(isWindows ? DefaultEndOfLine.CRLF : DefaultEndOfLine.LF).textBuffer.createSnapshot(false));\n\t\tassert.strictEqual(content, expected);\n\n\t\tawait service.write(resource, content, { encoding });\n\n\t\tresolved = await service.readStream(resource, { encoding });\n\t\tassert.strictEqual(snapshotToString(resolved.value.create(DefaultEndOfLine.CRLF).textBuffer.createSnapshot(false)), content);\n\n\t\tawait service.write(resource, createTextModel(content).createSnapshot(), { encoding });\n\n\t\tresolved = await service.readStream(resource, { encoding });\n\t\tassert.strictEqual(snapshotToString(resolved.value.create(DefaultEndOfLine.CRLF).textBuffer.createSnapshot(false)), content);\n\t}\n\n\ttest('write - no encoding - content as string', async () => {\n\t\tconst resource = URI.file(join(testDir, 'small.txt'));\n\n\t\tconst content = (await readFile(resource.fsPath)).toString();\n\n\t\tawait service.write(resource, content);\n\n\t\tconst resolved = await service.readStream(resource);\n\t\tassert.strictEqual(resolved.value.getFirstLineText(999999), content);\n\t});\n\n\ttest('write - no encoding - content as snapshot', async () => {\n\t\tconst resource = URI.file(join(testDir, 'small.txt'));\n\n\t\tconst content = (await readFile(resource.fsPath)).toString();\n\n\t\tawait service.write(resource, createTextModel(content).createSnapshot());\n\n\t\tconst resolved = await service.readStream(resource);\n\t\tassert.strictEqual(resolved.value.getFirstLineText(999999), content);\n\t});\n\n\ttest('write - encoding preserved (UTF 16 LE) - content as string', async () => {\n\t\tconst resource = URI.file(join(testDir, 'some_utf16le.css'));\n\n\t\tconst resolved = await service.readStream(resource);\n\t\tassert.strictEqual(resolved.encoding, UTF16le);\n\n\t\tawait testEncoding(URI.file(join(testDir, 'some_utf16le.css')), UTF16le, 'Hello\\nWorld', 'Hello\\nWorld');\n\t});\n\n\ttest('write - encoding preserved (UTF 16 LE) - content as snapshot', async () => {\n\t\tconst resource = URI.file(join(testDir, 'some_utf16le.css'));\n\n\t\tconst resolved = await service.readStream(resource);\n\t\tassert.strictEqual(resolved.encoding, UTF16le);\n\n\t\tawait testEncoding(URI.file(join(testDir, 'some_utf16le.css')), UTF16le, createTextModel('Hello\\nWorld').createSnapshot(), 'Hello\\nWorld');\n\t});\n\n\ttest('write - UTF8 variations - content as string', async () => {\n\t\tconst resource = URI.file(join(testDir, 'index.html'));\n\n\t\tlet detectedEncoding = await detectEncodingByBOM(resource.fsPath);\n\t\tassert.strictEqual(detectedEncoding, null);\n\n\t\tconst content = (await readFile(resource.fsPath)).toString() + 'updates';\n\t\tawait service.write(resource, content, { encoding: UTF8_with_bom });\n\n\t\tdetectedEncoding = await detectEncodingByBOM(resource.fsPath);\n\t\tassert.strictEqual(detectedEncoding, UTF8_with_bom);\n\n\t\t// ensure BOM preserved if enforced\n\t\tawait service.write(resource, content, { encoding: UTF8_with_bom });\n\t\tdetectedEncoding = await detectEncodingByBOM(resource.fsPath);\n\t\tassert.strictEqual(detectedEncoding, UTF8_with_bom);\n\n\t\t// allow to remove BOM\n\t\tawait service.write(resource, content, { encoding: UTF8 });\n\t\tdetectedEncoding = await detectEncodingByBOM(resource.fsPath);\n\t\tassert.strictEqual(detectedEncoding, null);\n\n\t\t// BOM does not come back\n\t\tawait service.write(resource, content, { encoding: UTF8 });\n\t\tdetectedEncoding = await detectEncodingByBOM(resource.fsPath);\n\t\tassert.strictEqual(detectedEncoding, null);\n\t});\n\n\ttest('write - UTF8 variations - content as snapshot', async () => {\n\t\tconst resource = URI.file(join(testDir, 'index.html'));\n\n\t\tlet detectedEncoding = await detectEncodingByBOM(resource.fsPath);\n\t\tassert.strictEqual(detectedEncoding, null);\n\n\t\tconst model = createTextModel((await readFile(resource.fsPath)).toString() + 'updates');\n\t\tawait service.write(resource, model.createSnapshot(), { encoding: UTF8_with_bom });\n\n\t\tdetectedEncoding = await detectEncodingByBOM(resource.fsPath);\n\t\tassert.strictEqual(detectedEncoding, UTF8_with_bom);\n\n\t\t// ensure BOM preserved if enforced\n\t\tawait service.write(resource, model.createSnapshot(), { encoding: UTF8_with_bom });\n\t\tdetectedEncoding = await detectEncodingByBOM(resource.fsPath);\n\t\tassert.strictEqual(detectedEncoding, UTF8_with_bom);\n\n\t\t// allow to remove BOM\n\t\tawait service.write(resource, model.createSnapshot(), { encoding: UTF8 });\n\t\tdetectedEncoding = await detectEncodingByBOM(resource.fsPath);\n\t\tassert.strictEqual(detectedEncoding, null);\n\n\t\t// BOM does not come back\n\t\tawait service.write(resource, model.createSnapshot(), { encoding: UTF8 });\n\t\tdetectedEncoding = await detectEncodingByBOM(resource.fsPath);\n\t\tassert.strictEqual(detectedEncoding, null);\n\t});\n\n\ttest('write - preserve UTF8 BOM - content as string', async () => {\n\t\tconst resource = URI.file(join(testDir, 'some_utf8_bom.txt'));\n\n\t\tlet detectedEncoding = await detectEncodingByBOM(resource.fsPath);\n\t\tassert.strictEqual(detectedEncoding, UTF8_with_bom);\n\n\t\tawait service.write(resource, 'Hello World', { encoding: detectedEncoding! });\n\t\tdetectedEncoding = await detectEncodingByBOM(resource.fsPath);\n\t\tassert.strictEqual(detectedEncoding, UTF8_with_bom);\n\t});\n\n\ttest('write - ensure BOM in empty file - content as string', async () => {\n\t\tconst resource = URI.file(join(testDir, 'small.txt'));\n\n\t\tawait service.write(resource, '', { encoding: UTF8_with_bom });\n\n\t\tlet detectedEncoding = await detectEncodingByBOM(resource.fsPath);\n\t\tassert.strictEqual(detectedEncoding, UTF8_with_bom);\n\t});\n\n\ttest('write - ensure BOM in empty file - content as snapshot', async () => {\n\t\tconst resource = URI.file(join(testDir, 'small.txt'));\n\n\t\tawait service.write(resource, createTextModel('').createSnapshot(), { encoding: UTF8_with_bom });\n\n\t\tlet detectedEncoding = await detectEncodingByBOM(resource.fsPath);\n\t\tassert.strictEqual(detectedEncoding, UTF8_with_bom);\n\t});\n\n\ttest('readStream - small text', async () => {\n\t\tconst resource = URI.file(join(testDir, 'small.txt'));\n\n\t\tawait testReadStream(resource);\n\t});\n\n\ttest('readStream - large text', async () => {\n\t\tconst resource = URI.file(join(testDir, 'lorem.txt'));\n\n\t\tawait testReadStream(resource);\n\t});\n\n\tasync function testReadStream(resource: URI): Promise<void> {\n\t\tconst result = await service.readStream(resource);\n\n\t\tassert.strictEqual(result.name, basename(resource.fsPath));\n\t\tassert.strictEqual(result.size, (await stat(resource.fsPath)).size);\n\n\t\tconst content = (await readFile(resource.fsPath)).toString();\n\t\tassert.strictEqual(\n\t\t\tsnapshotToString(result.value.create(DefaultEndOfLine.LF).textBuffer.createSnapshot(false)),\n\t\t\tsnapshotToString(createTextModel(content).createSnapshot(false)));\n\t}\n\n\ttest('read - small text', async () => {\n\t\tconst resource = URI.file(join(testDir, 'small.txt'));\n\n\t\tawait testRead(resource);\n\t});\n\n\ttest('read - large text', async () => {\n\t\tconst resource = URI.file(join(testDir, 'lorem.txt'));\n\n\t\tawait testRead(resource);\n\t});\n\n\tasync function testRead(resource: URI): Promise<void> {\n\t\tconst result = await service.read(resource);\n\n\t\tassert.strictEqual(result.name, basename(resource.fsPath));\n\t\tassert.strictEqual(result.size, (await stat(resource.fsPath)).size);\n\t\tassert.strictEqual(result.value, (await readFile(resource.fsPath)).toString());\n\t}\n\n\ttest('readStream - encoding picked up (CP1252)', async () => {\n\t\tconst resource = URI.file(join(testDir, 'some_small_cp1252.txt'));\n\t\tconst encoding = 'windows1252';\n\n\t\tconst result = await service.readStream(resource, { encoding });\n\t\tassert.strictEqual(result.encoding, encoding);\n\t\tassert.strictEqual(result.value.getFirstLineText(999999), 'Private = \"Persönlicheß Information\"');\n\t});\n\n\ttest('read - encoding picked up (CP1252)', async () => {\n\t\tconst resource = URI.file(join(testDir, 'some_small_cp1252.txt'));\n\t\tconst encoding = 'windows1252';\n\n\t\tconst result = await service.read(resource, { encoding });\n\t\tassert.strictEqual(result.encoding, encoding);\n\t\tassert.strictEqual(result.value, 'Private = \"Persönlicheß Information\"');\n\t});\n\n\ttest('read - encoding picked up (binary)', async () => {\n\t\tconst resource = URI.file(join(testDir, 'some_small_cp1252.txt'));\n\t\tconst encoding = 'binary';\n\n\t\tconst result = await service.read(resource, { encoding });\n\t\tassert.strictEqual(result.encoding, encoding);\n\t\tassert.strictEqual(result.value, 'Private = \"Persönlicheß Information\"');\n\t});\n\n\ttest('read - encoding picked up (base64)', async () => {\n\t\tconst resource = URI.file(join(testDir, 'some_small_cp1252.txt'));\n\t\tconst encoding = 'base64';\n\n\t\tconst result = await service.read(resource, { encoding });\n\t\tassert.strictEqual(result.encoding, encoding);\n\t\tassert.strictEqual(result.value, btoa('Private = \"Persönlicheß Information\"'));\n\t});\n\n\ttest('readStream - user overrides BOM', async () => {\n\t\tconst resource = URI.file(join(testDir, 'some_utf16le.css'));\n\n\t\tconst result = await service.readStream(resource, { encoding: 'windows1252' });\n\t\tassert.strictEqual(result.encoding, 'windows1252');\n\t});\n\n\ttest('readStream - BOM removed', async () => {\n\t\tconst resource = URI.file(join(testDir, 'some_utf8_bom.txt'));\n\n\t\tconst result = await service.readStream(resource);\n\t\tassert.strictEqual(result.value.getFirstLineText(999999), 'This is some UTF 8 with BOM file.');\n\t});\n\n\ttest('readStream - invalid encoding', async () => {\n\t\tconst resource = URI.file(join(testDir, 'index.html'));\n\n\t\tconst result = await service.readStream(resource, { encoding: 'superduper' });\n\t\tassert.strictEqual(result.encoding, 'utf8');\n\t});\n\n\ttest('readStream - encoding override', async () => {\n\t\tconst resource = URI.file(join(testDir, 'some.utf16le'));\n\n\t\tconst result = await service.readStream(resource, { encoding: 'windows1252' });\n\t\tassert.strictEqual(result.encoding, 'utf16le');\n\t\tassert.strictEqual(result.value.getFirstLineText(999999), 'This is some UTF 16 with BOM file.');\n\t});\n\n\ttest('readStream - large Big5', async () => {\n\t\tawait testLargeEncoding('big5', '中文abc');\n\t});\n\n\ttest('readStream - large CP1252', async () => {\n\t\tawait testLargeEncoding('cp1252', 'öäüß');\n\t});\n\n\ttest('readStream - large Cyrillic', async () => {\n\t\tawait testLargeEncoding('cp866', 'АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя');\n\t});\n\n\ttest('readStream - large GBK', async () => {\n\t\tawait testLargeEncoding('gbk', '中国abc');\n\t});\n\n\ttest('readStream - large ShiftJIS', async () => {\n\t\tawait testLargeEncoding('shiftjis', '中文abc');\n\t});\n\n\ttest('readStream - large UTF8 BOM', async () => {\n\t\tawait testLargeEncoding('utf8bom', 'öäüß');\n\t});\n\n\ttest('readStream - large UTF16 LE', async () => {\n\t\tawait testLargeEncoding('utf16le', 'öäüß');\n\t});\n\n\ttest('readStream - large UTF16 BE', async () => {\n\t\tawait testLargeEncoding('utf16be', 'öäüß');\n\t});\n\n\tasync function testLargeEncoding(encoding: string, needle: string): Promise<void> {\n\t\tconst resource = URI.file(join(testDir, `lorem_${encoding}.txt`));\n\n\t\t// Verify via `ITextFileService.readStream`\n\t\tconst result = await service.readStream(resource, { encoding });\n\t\tassert.strictEqual(result.encoding, encoding);\n\n\t\tlet contents = snapshotToString(result.value.create(DefaultEndOfLine.LF).textBuffer.createSnapshot(false));\n\n\t\tassert.strictEqual(contents.indexOf(needle), 0);\n\t\tassert.ok(contents.indexOf(needle, 10) > 0);\n\n\t\t// Verify via `ITextFileService.getDecodedTextFactory`\n\t\tconst rawFile = await params.readFile(resource.fsPath);\n\t\tlet rawFileVSBuffer: VSBuffer;\n\t\tif (rawFile instanceof VSBuffer) {\n\t\t\trawFileVSBuffer = rawFile;\n\t\t} else {\n\t\t\trawFileVSBuffer = VSBuffer.wrap(rawFile);\n\t\t}\n\n\t\tconst factory = await createTextBufferFactoryFromStream(await service.getDecodedStream(resource, bufferToStream(rawFileVSBuffer), { encoding }));\n\n\t\tcontents = snapshotToString(factory.create(DefaultEndOfLine.LF).textBuffer.createSnapshot(false));\n\n\t\tassert.strictEqual(contents.indexOf(needle), 0);\n\t\tassert.ok(contents.indexOf(needle, 10) > 0);\n\t}\n\n\ttest('readStream - UTF16 LE (no BOM)', async () => {\n\t\tconst resource = URI.file(join(testDir, 'utf16_le_nobom.txt'));\n\n\t\tconst result = await service.readStream(resource);\n\t\tassert.strictEqual(result.encoding, 'utf16le');\n\t});\n\n\ttest('readStream - UTF16 BE (no BOM)', async () => {\n\t\tconst resource = URI.file(join(testDir, 'utf16_be_nobom.txt'));\n\n\t\tconst result = await service.readStream(resource);\n\t\tassert.strictEqual(result.encoding, 'utf16be');\n\t});\n\n\ttest('readStream - autoguessEncoding', async () => {\n\t\tconst resource = URI.file(join(testDir, 'some_cp1252.txt'));\n\n\t\tconst result = await service.readStream(resource, { autoGuessEncoding: true });\n\t\tassert.strictEqual(result.encoding, 'windows1252');\n\t});\n\n\ttest('readStream - FILE_IS_BINARY', async () => {\n\t\tconst resource = URI.file(join(testDir, 'binary.txt'));\n\n\t\tlet error: TextFileOperationError | undefined = undefined;\n\t\ttry {\n\t\t\tawait service.readStream(resource, { acceptTextOnly: true });\n\t\t} catch (err) {\n\t\t\terror = err;\n\t\t}\n\n\t\tassert.ok(error);\n\t\tassert.strictEqual(error!.textFileOperationResult, TextFileOperationResult.FILE_IS_BINARY);\n\n\t\tconst result = await service.readStream(URI.file(join(testDir, 'small.txt')), { acceptTextOnly: true });\n\t\tassert.strictEqual(result.name, 'small.txt');\n\t});\n\n\ttest('read - FILE_IS_BINARY', async () => {\n\t\tconst resource = URI.file(join(testDir, 'binary.txt'));\n\n\t\tlet error: TextFileOperationError | undefined = undefined;\n\t\ttry {\n\t\t\tawait service.read(resource, { acceptTextOnly: true });\n\t\t} catch (err) {\n\t\t\terror = err;\n\t\t}\n\n\t\tassert.ok(error);\n\t\tassert.strictEqual(error!.textFileOperationResult, TextFileOperationResult.FILE_IS_BINARY);\n\n\t\tconst result = await service.read(URI.file(join(testDir, 'small.txt')), { acceptTextOnly: true });\n\t\tassert.strictEqual(result.name, 'small.txt');\n\t});\n}\n"]}