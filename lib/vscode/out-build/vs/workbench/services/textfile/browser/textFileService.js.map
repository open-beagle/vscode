{"version":3,"sources":["vs/workbench/services/textfile/browser/textFileService.ts"],"names":[],"mappings":"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","file":"textFileService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { URI } from 'vs/base/common/uri';\nimport { IEncodingSupport, ITextFileService, ITextFileStreamContent, ITextFileContent, IResourceEncodings, IReadTextFileOptions, IWriteTextFileOptions, toBufferOrReadable, TextFileOperationError, TextFileOperationResult, ITextFileSaveOptions, ITextFileEditorModelManager, IResourceEncoding, stringToSnapshot, ITextFileSaveAsOptions, IReadTextFileEncodingOptions } from 'vs/workbench/services/textfile/common/textfiles';\nimport { IRevertOptions } from 'vs/workbench/common/editor';\nimport { ILifecycleService } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { IFileService, FileOperationError, FileOperationResult, IFileStatWithMetadata, ICreateFileOptions, IFileStreamContent } from 'vs/platform/files/common/files';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { IUntitledTextEditorService, IUntitledTextEditorModelManager } from 'vs/workbench/services/untitled/common/untitledTextEditorService';\nimport { UntitledTextEditorModel } from 'vs/workbench/services/untitled/common/untitledTextEditorModel';\nimport { TextFileEditorModelManager } from 'vs/workbench/services/textfile/common/textFileEditorModelManager';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { Schemas } from 'vs/base/common/network';\nimport { createTextBufferFactoryFromSnapshot, createTextBufferFactoryFromStream } from 'vs/editor/common/model/textModel';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { joinPath, dirname, basename, toLocalResource, extname, isEqual } from 'vs/base/common/resources';\nimport { IDialogService, IFileDialogService, IConfirmation } from 'vs/platform/dialogs/common/dialogs';\nimport { VSBuffer, VSBufferReadable, bufferToStream, VSBufferReadableStream } from 'vs/base/common/buffer';\nimport { ITextSnapshot, ITextModel } from 'vs/editor/common/model';\nimport { ITextResourceConfigurationService } from 'vs/editor/common/services/textResourceConfigurationService';\nimport { PLAINTEXT_MODE_ID } from 'vs/editor/common/modes/modesRegistry';\nimport { IFilesConfigurationService } from 'vs/workbench/services/filesConfiguration/common/filesConfigurationService';\nimport { ITextModelService, IResolvedTextEditorModel } from 'vs/editor/common/services/resolverService';\nimport { BaseTextEditorModel } from 'vs/workbench/common/editor/textEditorModel';\nimport { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';\nimport { IPathService } from 'vs/workbench/services/path/common/pathService';\nimport { isValidBasename } from 'vs/base/common/extpath';\nimport { IWorkingCopyFileService, IFileOperationUndoRedoInfo, ICreateFileOperation } from 'vs/workbench/services/workingCopy/common/workingCopyFileService';\nimport { IUriIdentityService } from 'vs/workbench/services/uriIdentity/common/uriIdentity';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { WORKSPACE_EXTENSION } from 'vs/platform/workspaces/common/workspaces';\nimport { UTF8, UTF8_with_bom, UTF16be, UTF16le, encodingExists, toEncodeReadable, toDecodeStream, IDecodeStreamResult } from 'vs/workbench/services/textfile/common/encoding';\nimport { consumeStream, ReadableStream } from 'vs/base/common/stream';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IElevatedFileService } from 'vs/workbench/services/files/common/elevatedFileService';\n\n/**\n * The workbench file service implementation implements the raw file service spec and adds additional methods on top.\n */\nexport abstract class AbstractTextFileService extends Disposable implements ITextFileService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\treadonly files: ITextFileEditorModelManager = this._register(this.instantiationService.createInstance(TextFileEditorModelManager));\n\n\treadonly untitled: IUntitledTextEditorModelManager = this.untitledTextEditorService;\n\n\tconstructor(\n\t\t@IFileService protected readonly fileService: IFileService,\n\t\t@IUntitledTextEditorService private untitledTextEditorService: IUntitledTextEditorService,\n\t\t@ILifecycleService protected readonly lifecycleService: ILifecycleService,\n\t\t@IInstantiationService protected readonly instantiationService: IInstantiationService,\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@IWorkbenchEnvironmentService protected readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IFileDialogService private readonly fileDialogService: IFileDialogService,\n\t\t@ITextResourceConfigurationService protected readonly textResourceConfigurationService: ITextResourceConfigurationService,\n\t\t@IFilesConfigurationService protected readonly filesConfigurationService: IFilesConfigurationService,\n\t\t@ITextModelService private readonly textModelService: ITextModelService,\n\t\t@ICodeEditorService private readonly codeEditorService: ICodeEditorService,\n\t\t@IPathService private readonly pathService: IPathService,\n\t\t@IWorkingCopyFileService private readonly workingCopyFileService: IWorkingCopyFileService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@IModeService private readonly modeService: IModeService,\n\t\t@ILogService protected readonly logService: ILogService,\n\t\t@IElevatedFileService private readonly elevatedFileService: IElevatedFileService\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprotected registerListeners(): void {\n\n\t\t// Lifecycle\n\t\tthis.lifecycleService.onDidShutdown(() => this.dispose());\n\t}\n\n\t//#region text file read / write / create\n\n\tprivate _encoding: EncodingOracle | undefined;\n\n\tget encoding(): EncodingOracle {\n\t\tif (!this._encoding) {\n\t\t\tthis._encoding = this._register(this.instantiationService.createInstance(EncodingOracle));\n\t\t}\n\n\t\treturn this._encoding;\n\t}\n\n\tasync read(resource: URI, options?: IReadTextFileOptions): Promise<ITextFileContent> {\n\t\tconst [bufferStream, decoder] = await this.doRead(resource, {\n\t\t\t...options,\n\t\t\t// optimization: since we know that the caller does not\n\t\t\t// care about buffering, we indicate this to the reader.\n\t\t\t// this reduces all the overhead the buffered reading\n\t\t\t// has (open, read, close) if the provider supports\n\t\t\t// unbuffered reading.\n\t\t\tpreferUnbuffered: true\n\t\t});\n\n\t\treturn {\n\t\t\t...bufferStream,\n\t\t\tencoding: decoder.detected.encoding || UTF8,\n\t\t\tvalue: await consumeStream(decoder.stream, strings => strings.join(''))\n\t\t};\n\t}\n\n\tasync readStream(resource: URI, options?: IReadTextFileOptions): Promise<ITextFileStreamContent> {\n\t\tconst [bufferStream, decoder] = await this.doRead(resource, options);\n\n\t\treturn {\n\t\t\t...bufferStream,\n\t\t\tencoding: decoder.detected.encoding || UTF8,\n\t\t\tvalue: await createTextBufferFactoryFromStream(decoder.stream)\n\t\t};\n\t}\n\n\tprivate async doRead(resource: URI, options?: IReadTextFileOptions & { preferUnbuffered?: boolean }): Promise<[IFileStreamContent, IDecodeStreamResult]> {\n\n\t\t// read stream raw (either buffered or unbuffered)\n\t\tlet bufferStream: IFileStreamContent;\n\t\tif (options?.preferUnbuffered) {\n\t\t\tconst content = await this.fileService.readFile(resource, options);\n\t\t\tbufferStream = {\n\t\t\t\t...content,\n\t\t\t\tvalue: bufferToStream(content.value)\n\t\t\t};\n\t\t} else {\n\t\t\tbufferStream = await this.fileService.readFileStream(resource, options);\n\t\t}\n\n\t\t// read through encoding library\n\t\tconst decoder = await this.doGetDecodedStream(resource, bufferStream.value, options);\n\n\t\t// validate binary\n\t\tif (options?.acceptTextOnly && decoder.detected.seemsBinary) {\n\t\t\tthrow new TextFileOperationError(localize('fileBinaryError', \"File seems to be binary and cannot be opened as text\"), TextFileOperationResult.FILE_IS_BINARY, options);\n\t\t}\n\n\t\treturn [bufferStream, decoder];\n\t}\n\n\tasync create(operations: { resource: URI, value?: string | ITextSnapshot, options?: ICreateFileOptions }[], undoInfo?: IFileOperationUndoRedoInfo): Promise<readonly IFileStatWithMetadata[]> {\n\t\tconst operationsWithContents: ICreateFileOperation[] = await Promise.all(operations.map(async operation => {\n\t\t\tconst contents = await this.getEncodedReadable(operation.resource, operation.value);\n\t\t\treturn {\n\t\t\t\tresource: operation.resource,\n\t\t\t\tcontents,\n\t\t\t\toverwrite: operation.options?.overwrite\n\t\t\t};\n\t\t}));\n\n\t\treturn this.workingCopyFileService.create(operationsWithContents, CancellationToken.None, undoInfo);\n\t}\n\n\tasync write(resource: URI, value: string | ITextSnapshot, options?: IWriteTextFileOptions): Promise<IFileStatWithMetadata> {\n\t\tconst readable = await this.getEncodedReadable(resource, value, options);\n\n\t\tif (options?.writeElevated && this.elevatedFileService.isSupported(resource)) {\n\t\t\treturn this.elevatedFileService.writeFileElevated(resource, readable, options);\n\t\t}\n\n\t\treturn this.fileService.writeFile(resource, readable, options);\n\t}\n\n\tasync getEncodedReadable(resource: URI, value: ITextSnapshot): Promise<VSBufferReadable>;\n\tasync getEncodedReadable(resource: URI, value: string): Promise<VSBuffer>;\n\tasync getEncodedReadable(resource: URI, value?: ITextSnapshot): Promise<VSBufferReadable | undefined>;\n\tasync getEncodedReadable(resource: URI, value?: string): Promise<VSBuffer | undefined>;\n\tasync getEncodedReadable(resource: URI, value?: string | ITextSnapshot): Promise<VSBuffer | VSBufferReadable | undefined>;\n\tasync getEncodedReadable(resource: URI, value: string | ITextSnapshot, options?: IWriteTextFileOptions): Promise<VSBuffer | VSBufferReadable>;\n\tasync getEncodedReadable(resource: URI, value?: string | ITextSnapshot, options?: IWriteTextFileOptions): Promise<VSBuffer | VSBufferReadable | undefined> {\n\n\t\t// check for encoding\n\t\tconst { encoding, addBOM } = await this.encoding.getWriteEncoding(resource, options);\n\n\t\t// when encoding is standard skip encoding step\n\t\tif (encoding === UTF8 && !addBOM) {\n\t\t\treturn typeof value === 'undefined'\n\t\t\t\t? undefined\n\t\t\t\t: toBufferOrReadable(value);\n\t\t}\n\n\t\t// otherwise create encoded readable\n\t\tvalue = value || '';\n\t\tconst snapshot = typeof value === 'string' ? stringToSnapshot(value) : value;\n\t\treturn toEncodeReadable(snapshot, encoding, { addBOM });\n\t}\n\n\tasync getDecodedStream(resource: URI, value: VSBufferReadableStream, options?: IReadTextFileEncodingOptions): Promise<ReadableStream<string>> {\n\t\treturn (await this.doGetDecodedStream(resource, value, options)).stream;\n\t}\n\n\tprivate doGetDecodedStream(resource: URI, stream: VSBufferReadableStream, options?: IReadTextFileEncodingOptions): Promise<IDecodeStreamResult> {\n\n\t\t// read through encoding library\n\t\treturn toDecodeStream(stream, {\n\t\t\tguessEncoding: options?.autoGuessEncoding || this.textResourceConfigurationService.getValue(resource, 'files.autoGuessEncoding'),\n\t\t\toverwriteEncoding: detectedEncoding => this.encoding.getReadEncoding(resource, options, detectedEncoding)\n\t\t});\n\t}\n\n\t//#endregion\n\n\n\t//#region save\n\n\tasync save(resource: URI, options?: ITextFileSaveOptions): Promise<URI | undefined> {\n\n\t\t// Untitled\n\t\tif (resource.scheme === Schemas.untitled) {\n\t\t\tconst model = this.untitled.get(resource);\n\t\t\tif (model) {\n\t\t\t\tlet targetUri: URI | undefined;\n\n\t\t\t\t// Untitled with associated file path don't need to prompt\n\t\t\t\tif (model.hasAssociatedFilePath) {\n\t\t\t\t\ttargetUri = await this.suggestSavePath(resource);\n\t\t\t\t}\n\n\t\t\t\t// Otherwise ask user\n\t\t\t\telse {\n\t\t\t\t\ttargetUri = await this.fileDialogService.pickFileToSave(await this.suggestSavePath(resource), options?.availableFileSystems);\n\t\t\t\t}\n\n\t\t\t\t// Save as if target provided\n\t\t\t\tif (targetUri) {\n\t\t\t\t\treturn this.saveAs(resource, targetUri, options);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// File\n\t\telse {\n\t\t\tconst model = this.files.get(resource);\n\t\t\tif (model) {\n\t\t\t\treturn await model.save(options) ? resource : undefined;\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tasync saveAs(source: URI, target?: URI, options?: ITextFileSaveAsOptions): Promise<URI | undefined> {\n\n\t\t// Get to target resource\n\t\tif (!target) {\n\t\t\ttarget = await this.fileDialogService.pickFileToSave(await this.suggestSavePath(options?.suggestedTarget ?? source), options?.availableFileSystems);\n\t\t}\n\n\t\tif (!target) {\n\t\t\treturn; // user canceled\n\t\t}\n\n\t\t// Just save if target is same as models own resource\n\t\tif (isEqual(source, target)) {\n\t\t\treturn this.save(source, { ...options, force: true  /* force to save, even if not dirty (https://github.com/microsoft/vscode/issues/99619) */ });\n\t\t}\n\n\t\t// If the target is different but of same identity, we\n\t\t// move the source to the target, knowing that the\n\t\t// underlying file system cannot have both and then save.\n\t\t// However, this will only work if the source exists\n\t\t// and is not orphaned, so we need to check that too.\n\t\tif (this.fileService.canHandleResource(source) && this.uriIdentityService.extUri.isEqual(source, target) && (await this.fileService.exists(source))) {\n\t\t\tawait this.workingCopyFileService.move([{ file: { source, target } }], CancellationToken.None);\n\n\t\t\t// At this point we don't know whether we have a\n\t\t\t// model for the source or the target URI so we\n\t\t\t// simply try to save with both resources.\n\t\t\tconst success = await this.save(source, options);\n\t\t\tif (!success) {\n\t\t\t\tawait this.save(target, options);\n\t\t\t}\n\n\t\t\treturn target;\n\t\t}\n\n\t\t// Do it\n\t\treturn this.doSaveAs(source, target, options);\n\t}\n\n\tprivate async doSaveAs(source: URI, target: URI, options?: ITextFileSaveOptions): Promise<URI | undefined> {\n\t\tlet success = false;\n\n\t\t// If the source is an existing text file model, we can directly\n\t\t// use that model to copy the contents to the target destination\n\t\tconst textFileModel = this.files.get(source);\n\t\tif (textFileModel?.isResolved()) {\n\t\t\tsuccess = await this.doSaveAsTextFile(textFileModel, source, target, options);\n\t\t}\n\n\t\t// Otherwise if the source can be handled by the file service\n\t\t// we can simply invoke the copy() function to save as\n\t\telse if (this.fileService.canHandleResource(source)) {\n\t\t\tawait this.fileService.copy(source, target, true);\n\n\t\t\tsuccess = true;\n\t\t}\n\n\t\t// Next, if the source does not seem to be a file, we try to\n\t\t// resolve a text model from the resource to get at the\n\t\t// contents and additional meta data (e.g. encoding).\n\t\telse if (this.textModelService.canHandleResource(source)) {\n\t\t\tconst modelReference = await this.textModelService.createModelReference(source);\n\t\t\ttry {\n\t\t\t\tsuccess = await this.doSaveAsTextFile(modelReference.object, source, target, options);\n\t\t\t} finally {\n\t\t\t\tmodelReference.dispose(); // free up our use of the reference\n\t\t\t}\n\t\t}\n\n\t\t// Finally we simply check if we can find a editor model that\n\t\t// would give us access to the contents.\n\t\telse {\n\t\t\tconst textModel = this.modelService.getModel(source);\n\t\t\tif (textModel) {\n\t\t\t\tsuccess = await this.doSaveAsTextFile(textModel, source, target, options);\n\t\t\t}\n\t\t}\n\n\t\t// Revert the source if result is success\n\t\tif (success) {\n\t\t\tawait this.revert(source);\n\n\t\t\treturn target;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate async doSaveAsTextFile(sourceModel: IResolvedTextEditorModel | ITextModel, source: URI, target: URI, options?: ITextFileSaveOptions): Promise<boolean> {\n\n\t\t// Find source encoding if any\n\t\tlet sourceModelEncoding: string | undefined = undefined;\n\t\tconst sourceModelWithEncodingSupport = (sourceModel as unknown as IEncodingSupport);\n\t\tif (typeof sourceModelWithEncodingSupport.getEncoding === 'function') {\n\t\t\tsourceModelEncoding = sourceModelWithEncodingSupport.getEncoding();\n\t\t}\n\n\t\t// Prefer an existing model if it is already resolved for the given target resource\n\t\tlet targetExists: boolean = false;\n\t\tlet targetModel = this.files.get(target);\n\t\tif (targetModel?.isResolved()) {\n\t\t\ttargetExists = true;\n\t\t}\n\n\t\t// Otherwise create the target file empty if it does not exist already and resolve it from there\n\t\telse {\n\t\t\ttargetExists = await this.fileService.exists(target);\n\n\t\t\t// create target file adhoc if it does not exist yet\n\t\t\tif (!targetExists) {\n\t\t\t\tawait this.create([{ resource: target, value: '' }]);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\ttargetModel = await this.files.resolve(target, { encoding: sourceModelEncoding });\n\t\t\t} catch (error) {\n\t\t\t\t// if the target already exists and was not created by us, it is possible\n\t\t\t\t// that we cannot resolve the target as text model if it is binary or too\n\t\t\t\t// large. in that case we have to delete the target file first and then\n\t\t\t\t// re-run the operation.\n\t\t\t\tif (targetExists) {\n\t\t\t\t\tif (\n\t\t\t\t\t\t(<TextFileOperationError>error).textFileOperationResult === TextFileOperationResult.FILE_IS_BINARY ||\n\t\t\t\t\t\t(<FileOperationError>error).fileOperationResult === FileOperationResult.FILE_TOO_LARGE\n\t\t\t\t\t) {\n\t\t\t\t\t\tawait this.fileService.del(target);\n\n\t\t\t\t\t\treturn this.doSaveAsTextFile(sourceModel, source, target, options);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\t// Confirm to overwrite if we have an untitled file with associated file where\n\t\t// the file actually exists on disk and we are instructed to save to that file\n\t\t// path. This can happen if the file was created after the untitled file was opened.\n\t\t// See https://github.com/microsoft/vscode/issues/67946\n\t\tlet write: boolean;\n\t\tif (sourceModel instanceof UntitledTextEditorModel && sourceModel.hasAssociatedFilePath && targetExists && this.uriIdentityService.extUri.isEqual(target, toLocalResource(sourceModel.resource, this.environmentService.remoteAuthority, this.pathService.defaultUriScheme))) {\n\t\t\twrite = await this.confirmOverwrite(target);\n\t\t} else {\n\t\t\twrite = true;\n\t\t}\n\n\t\tif (!write) {\n\t\t\treturn false;\n\t\t}\n\n\t\tlet sourceTextModel: ITextModel | undefined = undefined;\n\t\tif (sourceModel instanceof BaseTextEditorModel) {\n\t\t\tif (sourceModel.isResolved()) {\n\t\t\t\tsourceTextModel = sourceModel.textEditorModel;\n\t\t\t}\n\t\t} else {\n\t\t\tsourceTextModel = sourceModel as ITextModel;\n\t\t}\n\n\t\tlet targetTextModel: ITextModel | undefined = undefined;\n\t\tif (targetModel.isResolved()) {\n\t\t\ttargetTextModel = targetModel.textEditorModel;\n\t\t}\n\n\t\t// take over model value, encoding and mode (only if more specific) from source model\n\t\tif (sourceTextModel && targetTextModel) {\n\n\t\t\t// encoding\n\t\t\ttargetModel.updatePreferredEncoding(sourceModelEncoding);\n\n\t\t\t// content\n\t\t\tthis.modelService.updateModel(targetTextModel, createTextBufferFactoryFromSnapshot(sourceTextModel.createSnapshot()));\n\n\t\t\t// mode\n\t\t\tconst sourceMode = sourceTextModel.getLanguageIdentifier();\n\t\t\tconst targetMode = targetTextModel.getLanguageIdentifier();\n\t\t\tif (sourceMode.language !== PLAINTEXT_MODE_ID && targetMode.language === PLAINTEXT_MODE_ID) {\n\t\t\t\ttargetTextModel.setMode(sourceMode); // only use if more specific than plain/text\n\t\t\t}\n\n\t\t\t// transient properties\n\t\t\tconst sourceTransientProperties = this.codeEditorService.getTransientModelProperties(sourceTextModel);\n\t\t\tif (sourceTransientProperties) {\n\t\t\t\tfor (const [key, value] of sourceTransientProperties) {\n\t\t\t\t\tthis.codeEditorService.setTransientModelProperty(targetTextModel, key, value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// save model\n\t\treturn targetModel.save(options);\n\t}\n\n\tprivate async confirmOverwrite(resource: URI): Promise<boolean> {\n\t\tconst confirm: IConfirmation = {\n\t\t\tmessage: localize('confirmOverwrite', \"'{0}' already exists. Do you want to replace it?\", basename(resource)),\n\t\t\tdetail: localize('irreversible', \"A file or folder with the name '{0}' already exists in the folder '{1}'. Replacing it will overwrite its current contents.\", basename(resource), basename(dirname(resource))),\n\t\t\tprimaryButton: localize({ key: 'replaceButtonLabel', comment: ['&& denotes a mnemonic'] }, \"&&Replace\"),\n\t\t\ttype: 'warning'\n\t\t};\n\n\t\treturn (await this.dialogService.confirm(confirm)).confirmed;\n\t}\n\n\tprivate async suggestSavePath(resource: URI): Promise<URI> {\n\n\t\t// Just take the resource as is if the file service can handle it\n\t\tif (this.fileService.canHandleResource(resource)) {\n\t\t\treturn resource;\n\t\t}\n\n\t\tconst remoteAuthority = this.environmentService.remoteAuthority;\n\n\t\t// Otherwise try to suggest a path that can be saved\n\t\tlet suggestedFilename: string | undefined = undefined;\n\t\tif (resource.scheme === Schemas.untitled) {\n\t\t\tconst model = this.untitledTextEditorService.get(resource);\n\t\t\tif (model) {\n\n\t\t\t\t// Untitled with associated file path\n\t\t\t\tif (model.hasAssociatedFilePath) {\n\t\t\t\t\treturn toLocalResource(resource, remoteAuthority, this.pathService.defaultUriScheme);\n\t\t\t\t}\n\n\t\t\t\t// Untitled without associated file path: use name\n\t\t\t\t// of untitled model if it is a valid path name\n\t\t\t\tlet untitledName = model.name;\n\t\t\t\tif (!isValidBasename(untitledName)) {\n\t\t\t\t\tuntitledName = basename(resource);\n\t\t\t\t}\n\n\t\t\t\t// Add mode file extension if specified\n\t\t\t\tconst mode = model.getMode();\n\t\t\t\tif (mode && mode !== PLAINTEXT_MODE_ID) {\n\t\t\t\t\tsuggestedFilename = this.suggestFilename(mode, untitledName);\n\t\t\t\t} else {\n\t\t\t\t\tsuggestedFilename = untitledName;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Fallback to basename of resource\n\t\tif (!suggestedFilename) {\n\t\t\tsuggestedFilename = basename(resource);\n\t\t}\n\n\t\t// Try to place where last active file was if any\n\t\t// Otherwise fallback to user home\n\t\treturn joinPath(await this.fileDialogService.defaultFilePath(), suggestedFilename);\n\t}\n\n\tsuggestFilename(mode: string, untitledName: string) {\n\t\tconst languageName = this.modeService.getLanguageName(mode);\n\t\tif (!languageName) {\n\t\t\treturn untitledName;\n\t\t}\n\n\t\tconst extension = this.modeService.getExtensions(languageName)[0];\n\t\tif (extension) {\n\t\t\tif (!untitledName.endsWith(extension)) {\n\t\t\t\treturn untitledName + extension;\n\t\t\t}\n\t\t}\n\n\t\tconst filename = this.modeService.getFilenames(languageName)[0];\n\t\treturn filename || untitledName;\n\t}\n\n\t//#endregion\n\n\t//#region revert\n\n\tasync revert(resource: URI, options?: IRevertOptions): Promise<void> {\n\n\t\t// Untitled\n\t\tif (resource.scheme === Schemas.untitled) {\n\t\t\tconst model = this.untitled.get(resource);\n\t\t\tif (model) {\n\t\t\t\treturn model.revert(options);\n\t\t\t}\n\t\t}\n\n\t\t// File\n\t\telse {\n\t\t\tconst model = this.files.get(resource);\n\t\t\tif (model && (model.isDirty() || options?.force)) {\n\t\t\t\treturn model.revert(options);\n\t\t\t}\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region dirty\n\n\tisDirty(resource: URI): boolean {\n\t\tconst model = resource.scheme === Schemas.untitled ? this.untitled.get(resource) : this.files.get(resource);\n\t\tif (model) {\n\t\t\treturn model.isDirty();\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t//#endregion\n}\n\nexport interface IEncodingOverride {\n\tparent?: URI;\n\textension?: string;\n\tencoding: string;\n}\n\nexport class EncodingOracle extends Disposable implements IResourceEncodings {\n\n\tprivate _encodingOverrides: IEncodingOverride[];\n\tprotected get encodingOverrides(): IEncodingOverride[] { return this._encodingOverrides; }\n\tprotected set encodingOverrides(value: IEncodingOverride[]) { this._encodingOverrides = value; }\n\n\tconstructor(\n\t\t@ITextResourceConfigurationService private textResourceConfigurationService: ITextResourceConfigurationService,\n\t\t@IWorkbenchEnvironmentService private environmentService: IWorkbenchEnvironmentService,\n\t\t@IWorkspaceContextService private contextService: IWorkspaceContextService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService\n\t) {\n\t\tsuper();\n\n\t\tthis._encodingOverrides = this.getDefaultEncodingOverrides();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Workspace Folder Change\n\t\tthis._register(this.contextService.onDidChangeWorkspaceFolders(() => this.encodingOverrides = this.getDefaultEncodingOverrides()));\n\t}\n\n\tprivate getDefaultEncodingOverrides(): IEncodingOverride[] {\n\t\tconst defaultEncodingOverrides: IEncodingOverride[] = [];\n\n\t\t// Global settings\n\t\tdefaultEncodingOverrides.push({ parent: this.environmentService.userRoamingDataHome, encoding: UTF8 });\n\n\t\t// Workspace files (via extension and via untitled workspaces location)\n\t\tdefaultEncodingOverrides.push({ extension: WORKSPACE_EXTENSION, encoding: UTF8 });\n\t\tdefaultEncodingOverrides.push({ parent: this.environmentService.untitledWorkspacesHome, encoding: UTF8 });\n\n\t\t// Folder Settings\n\t\tthis.contextService.getWorkspace().folders.forEach(folder => {\n\t\t\tdefaultEncodingOverrides.push({ parent: joinPath(folder.uri, '.vscode'), encoding: UTF8 });\n\t\t});\n\n\t\treturn defaultEncodingOverrides;\n\t}\n\n\tasync getWriteEncoding(resource: URI, options?: IWriteTextFileOptions): Promise<{ encoding: string, addBOM: boolean }> {\n\t\tconst { encoding, hasBOM } = await this.getPreferredWriteEncoding(resource, options ? options.encoding : undefined);\n\n\t\treturn { encoding, addBOM: hasBOM };\n\t}\n\n\tasync getPreferredWriteEncoding(resource: URI, preferredEncoding?: string): Promise<IResourceEncoding> {\n\t\tconst resourceEncoding = await this.getEncodingForResource(resource, preferredEncoding);\n\n\t\treturn {\n\t\t\tencoding: resourceEncoding,\n\t\t\thasBOM: resourceEncoding === UTF16be || resourceEncoding === UTF16le || resourceEncoding === UTF8_with_bom // enforce BOM for certain encodings\n\t\t};\n\t}\n\n\tgetReadEncoding(resource: URI, options: IReadTextFileEncodingOptions | undefined, detectedEncoding: string | null): Promise<string> {\n\t\tlet preferredEncoding: string | undefined;\n\n\t\t// Encoding passed in as option\n\t\tif (options?.encoding) {\n\t\t\tif (detectedEncoding === UTF8_with_bom && options.encoding === UTF8) {\n\t\t\t\tpreferredEncoding = UTF8_with_bom; // indicate the file has BOM if we are to resolve with UTF 8\n\t\t\t} else {\n\t\t\t\tpreferredEncoding = options.encoding; // give passed in encoding highest priority\n\t\t\t}\n\t\t}\n\n\t\t// Encoding detected\n\t\telse if (detectedEncoding) {\n\t\t\tpreferredEncoding = detectedEncoding;\n\t\t}\n\n\t\t// Encoding configured\n\t\telse if (this.textResourceConfigurationService.getValue(resource, 'files.encoding') === UTF8_with_bom) {\n\t\t\tpreferredEncoding = UTF8; // if we did not detect UTF 8 BOM before, this can only be UTF 8 then\n\t\t}\n\n\t\treturn this.getEncodingForResource(resource, preferredEncoding);\n\t}\n\n\tprivate async getEncodingForResource(resource: URI, preferredEncoding?: string): Promise<string> {\n\t\tlet fileEncoding: string;\n\n\t\tconst override = this.getEncodingOverride(resource);\n\t\tif (override) {\n\t\t\tfileEncoding = override; // encoding override always wins\n\t\t} else if (preferredEncoding) {\n\t\t\tfileEncoding = preferredEncoding; // preferred encoding comes second\n\t\t} else {\n\t\t\tfileEncoding = this.textResourceConfigurationService.getValue(resource, 'files.encoding'); // and last we check for settings\n\t\t}\n\n\t\tif (fileEncoding !== UTF8) {\n\t\t\tif (!fileEncoding || !(await encodingExists(fileEncoding))) {\n\t\t\t\tfileEncoding = UTF8; // the default is UTF-8\n\t\t\t}\n\t\t}\n\n\t\treturn fileEncoding;\n\t}\n\n\tprivate getEncodingOverride(resource: URI): string | undefined {\n\t\tif (this.encodingOverrides?.length) {\n\t\t\tfor (const override of this.encodingOverrides) {\n\n\t\t\t\t// check if the resource is child of encoding override path\n\t\t\t\tif (override.parent && this.uriIdentityService.extUri.isEqualOrParent(resource, override.parent)) {\n\t\t\t\t\treturn override.encoding;\n\t\t\t\t}\n\n\t\t\t\t// check if the resource extension is equal to encoding override\n\t\t\t\tif (override.extension && extname(resource) === `.${override.extension}`) {\n\t\t\t\t\treturn override.encoding;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n}\n"]}