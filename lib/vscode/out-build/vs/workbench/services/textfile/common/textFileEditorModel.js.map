{"version":3,"file":"textFileEditorModel.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/textfile/common/textFileEditorModel.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from 'vs/base/common/event';\nimport { URI } from 'vs/base/common/uri';\nimport { assertIsDefined, withNullAsUndefined } from 'vs/base/common/types';\nimport { EncodingMode, ITextFileService, TextFileEditorModelState, ITextFileEditorModel, ITextFileStreamContent, ITextFileResolveOptions, IResolvedTextFileEditorModel, ITextFileSaveOptions, TextFileResolveReason } from 'vs/workbench/services/textfile/common/textfiles';\nimport { IRevertOptions, SaveReason } from 'vs/workbench/common/editor';\nimport { BaseTextEditorModel } from 'vs/workbench/common/editor/textEditorModel';\nimport { IWorkingCopyBackupService, IResolvedWorkingCopyBackup } from 'vs/workbench/services/workingCopy/common/workingCopyBackup';\nimport { IFileService, FileOperationError, FileOperationResult, FileChangesEvent, FileChangeType, IFileStatWithMetadata, ETAG_DISABLED, FileSystemProviderCapabilities } from 'vs/platform/files/common/files';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { timeout, TaskSequentializer } from 'vs/base/common/async';\nimport { ITextBufferFactory, ITextModel } from 'vs/editor/common/model';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { basename } from 'vs/base/common/path';\nimport { IWorkingCopyService } from 'vs/workbench/services/workingCopy/common/workingCopyService';\nimport { IWorkingCopyBackup, WorkingCopyCapabilities, NO_TYPE_ID, IWorkingCopyBackupMeta } from 'vs/workbench/services/workingCopy/common/workingCopy';\nimport { IFilesConfigurationService } from 'vs/workbench/services/filesConfiguration/common/filesConfigurationService';\nimport { ILabelService } from 'vs/platform/label/common/label';\nimport { CancellationToken, CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { UTF8 } from 'vs/workbench/services/textfile/common/encoding';\nimport { createTextBufferFactoryFromStream } from 'vs/editor/common/model/textModel';\n\ninterface IBackupMetaData extends IWorkingCopyBackupMeta {\n\tmtime: number;\n\tctime: number;\n\tsize: number;\n\tetag: string;\n\torphaned: boolean;\n}\n\n/**\n * The text file editor model listens to changes to its underlying code editor model and saves these changes through the file service back to the disk.\n */\nexport class TextFileEditorModel extends BaseTextEditorModel implements ITextFileEditorModel {\n\n\t//#region Events\n\n\tprivate readonly _onDidChangeContent = this._register(new Emitter<void>());\n\treadonly onDidChangeContent = this._onDidChangeContent.event;\n\n\tprivate readonly _onDidResolve = this._register(new Emitter<TextFileResolveReason>());\n\treadonly onDidResolve = this._onDidResolve.event;\n\n\tprivate readonly _onDidChangeDirty = this._register(new Emitter<void>());\n\treadonly onDidChangeDirty = this._onDidChangeDirty.event;\n\n\tprivate readonly _onDidSaveError = this._register(new Emitter<void>());\n\treadonly onDidSaveError = this._onDidSaveError.event;\n\n\tprivate readonly _onDidSave = this._register(new Emitter<SaveReason>());\n\treadonly onDidSave = this._onDidSave.event;\n\n\tprivate readonly _onDidRevert = this._register(new Emitter<void>());\n\treadonly onDidRevert = this._onDidRevert.event;\n\n\tprivate readonly _onDidChangeEncoding = this._register(new Emitter<void>());\n\treadonly onDidChangeEncoding = this._onDidChangeEncoding.event;\n\n\tprivate readonly _onDidChangeOrphaned = this._register(new Emitter<void>());\n\treadonly onDidChangeOrphaned = this._onDidChangeOrphaned.event;\n\n\t//#endregion\n\n\treadonly typeId = NO_TYPE_ID; // IMPORTANT: never change this to not break existing assumptions (e.g. backups)\n\n\treadonly capabilities = WorkingCopyCapabilities.None;\n\n\treadonly name = basename(this.labelService.getUriLabel(this.resource));\n\n\tprivate contentEncoding: string | undefined; // encoding as reported from disk\n\n\tprivate versionId = 0;\n\tprivate bufferSavedVersionId: number | undefined;\n\tprivate ignoreDirtyOnModelContentChange = false;\n\n\tprivate static readonly UNDO_REDO_SAVE_PARTICIPANTS_AUTO_SAVE_THROTTLE_THRESHOLD = 500;\n\tprivate lastModelContentChangeFromUndoRedo: number | undefined = undefined;\n\n\tprivate lastResolvedFileStat: IFileStatWithMetadata | undefined;\n\n\tprivate readonly saveSequentializer = new TaskSequentializer();\n\n\tprivate dirty = false;\n\tprivate inConflictMode = false;\n\tprivate inOrphanMode = false;\n\tprivate inErrorMode = false;\n\n\tconstructor(\n\t\tpublic readonly resource: URI,\n\t\tprivate preferredEncoding: string | undefined,\t// encoding as chosen by the user\n\t\tprivate preferredMode: string | undefined,\t\t// mode as chosen by the user\n\t\t@IModeService modeService: IModeService,\n\t\t@IModelService modelService: IModelService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@IWorkingCopyBackupService private readonly workingCopyBackupService: IWorkingCopyBackupService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IWorkingCopyService private readonly workingCopyService: IWorkingCopyService,\n\t\t@IFilesConfigurationService private readonly filesConfigurationService: IFilesConfigurationService,\n\t\t@ILabelService private readonly labelService: ILabelService\n\t) {\n\t\tsuper(modelService, modeService);\n\n\t\t// Make known to working copy service\n\t\tthis._register(this.workingCopyService.registerWorkingCopy(this));\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.fileService.onDidFilesChange(e => this.onDidFilesChange(e)));\n\t\tthis._register(this.filesConfigurationService.onFilesAssociationChange(e => this.onFilesAssociationChange()));\n\t}\n\n\tprivate async onDidFilesChange(e: FileChangesEvent): Promise<void> {\n\t\tlet fileEventImpactsModel = false;\n\t\tlet newInOrphanModeGuess: boolean | undefined;\n\n\t\t// If we are currently orphaned, we check if the model file was added back\n\t\tif (this.inOrphanMode) {\n\t\t\tconst modelFileAdded = e.contains(this.resource, FileChangeType.ADDED);\n\t\t\tif (modelFileAdded) {\n\t\t\t\tnewInOrphanModeGuess = false;\n\t\t\t\tfileEventImpactsModel = true;\n\t\t\t}\n\t\t}\n\n\t\t// Otherwise we check if the model file was deleted\n\t\telse {\n\t\t\tconst modelFileDeleted = e.contains(this.resource, FileChangeType.DELETED);\n\t\t\tif (modelFileDeleted) {\n\t\t\t\tnewInOrphanModeGuess = true;\n\t\t\t\tfileEventImpactsModel = true;\n\t\t\t}\n\t\t}\n\n\t\tif (fileEventImpactsModel && this.inOrphanMode !== newInOrphanModeGuess) {\n\t\t\tlet newInOrphanModeValidated: boolean = false;\n\t\t\tif (newInOrphanModeGuess) {\n\t\t\t\t// We have received reports of users seeing delete events even though the file still\n\t\t\t\t// exists (network shares issue: https://github.com/microsoft/vscode/issues/13665).\n\t\t\t\t// Since we do not want to mark the model as orphaned, we have to check if the\n\t\t\t\t// file is really gone and not just a faulty file event.\n\t\t\t\tawait timeout(100);\n\n\t\t\t\tif (this.isDisposed()) {\n\t\t\t\t\tnewInOrphanModeValidated = true;\n\t\t\t\t} else {\n\t\t\t\t\tconst exists = await this.fileService.exists(this.resource);\n\t\t\t\t\tnewInOrphanModeValidated = !exists;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.inOrphanMode !== newInOrphanModeValidated && !this.isDisposed()) {\n\t\t\t\tthis.setOrphaned(newInOrphanModeValidated);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate setOrphaned(orphaned: boolean): void {\n\t\tif (this.inOrphanMode !== orphaned) {\n\t\t\tthis.inOrphanMode = orphaned;\n\t\t\tthis._onDidChangeOrphaned.fire();\n\t\t}\n\t}\n\n\tprivate onFilesAssociationChange(): void {\n\t\tif (!this.isResolved()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst firstLineText = this.getFirstLineText(this.textEditorModel);\n\t\tconst languageSelection = this.getOrCreateMode(this.resource, this.modeService, this.preferredMode, firstLineText);\n\n\t\tthis.modelService.setMode(this.textEditorModel, languageSelection);\n\t}\n\n\toverride setMode(mode: string): void {\n\t\tsuper.setMode(mode);\n\n\t\tthis.preferredMode = mode;\n\t}\n\n\t//#region Backup\n\n\tasync backup(token: CancellationToken): Promise<IWorkingCopyBackup> {\n\n\t\t// Fill in metadata if we are resolved\n\t\tlet meta: IBackupMetaData | undefined = undefined;\n\t\tif (this.lastResolvedFileStat) {\n\t\t\tmeta = {\n\t\t\t\tmtime: this.lastResolvedFileStat.mtime,\n\t\t\t\tctime: this.lastResolvedFileStat.ctime,\n\t\t\t\tsize: this.lastResolvedFileStat.size,\n\t\t\t\tetag: this.lastResolvedFileStat.etag,\n\t\t\t\torphaned: this.inOrphanMode\n\t\t\t};\n\t\t}\n\n\t\t// Fill in content the same way we would do when\n\t\t// saving the file via the text file service\n\t\t// encoding support (hardcode UTF-8)\n\t\tconst content = await this.textFileService.getEncodedReadable(this.resource, withNullAsUndefined(this.createSnapshot()), { encoding: UTF8 });\n\n\t\treturn { meta, content };\n\t}\n\n\t//#endregion\n\n\t//#region Revert\n\n\tasync revert(options?: IRevertOptions): Promise<void> {\n\t\tif (!this.isResolved()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Unset flags\n\t\tconst wasDirty = this.dirty;\n\t\tconst undo = this.doSetDirty(false);\n\n\t\t// Force read from disk unless reverting soft\n\t\tconst softUndo = options?.soft;\n\t\tif (!softUndo) {\n\t\t\ttry {\n\t\t\t\tawait this.resolve({ forceReadFromFile: true });\n\t\t\t} catch (error) {\n\n\t\t\t\t// FileNotFound means the file got deleted meanwhile, so ignore it\n\t\t\t\tif ((<FileOperationError>error).fileOperationResult !== FileOperationResult.FILE_NOT_FOUND) {\n\n\t\t\t\t\t// Set flags back to previous values, we are still dirty if revert failed\n\t\t\t\t\tundo();\n\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Emit file change event\n\t\tthis._onDidRevert.fire();\n\n\t\t// Emit dirty change event\n\t\tif (wasDirty) {\n\t\t\tthis._onDidChangeDirty.fire();\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region Resolve\n\n\toverride async resolve(options?: ITextFileResolveOptions): Promise<void> {\n\t\tthis.logService.trace('[text file model] resolve() - enter', this.resource.toString(true));\n\n\t\t// Return early if we are disposed\n\t\tif (this.isDisposed()) {\n\t\t\tthis.logService.trace('[text file model] resolve() - exit - without resolving because model is disposed', this.resource.toString(true));\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Unless there are explicit contents provided, it is important that we do not\n\t\t// resolve a model that is dirty or is in the process of saving to prevent data\n\t\t// loss.\n\t\tif (!options?.contents && (this.dirty || this.saveSequentializer.hasPending())) {\n\t\t\tthis.logService.trace('[text file model] resolve() - exit - without resolving because model is dirty or being saved', this.resource.toString(true));\n\n\t\t\treturn;\n\t\t}\n\n\t\treturn this.doResolve(options);\n\t}\n\n\tprivate async doResolve(options?: ITextFileResolveOptions): Promise<void> {\n\n\t\t// First check if we have contents to use for the model\n\t\tif (options?.contents) {\n\t\t\treturn this.resolveFromBuffer(options.contents, options);\n\t\t}\n\n\t\t// Second, check if we have a backup to resolve from (only for new models)\n\t\tconst isNewModel = !this.isResolved();\n\t\tif (isNewModel) {\n\t\t\tconst resolvedFromBackup = await this.resolveFromBackup(options);\n\t\t\tif (resolvedFromBackup) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// Finally, resolve from file resource\n\t\treturn this.resolveFromFile(options);\n\t}\n\n\tprivate async resolveFromBuffer(buffer: ITextBufferFactory, options?: ITextFileResolveOptions): Promise<void> {\n\t\tthis.logService.trace('[text file model] resolveFromBuffer()', this.resource.toString(true));\n\n\t\t// Try to resolve metdata from disk\n\t\tlet mtime: number;\n\t\tlet ctime: number;\n\t\tlet size: number;\n\t\tlet etag: string;\n\t\ttry {\n\t\t\tconst metadata = await this.fileService.resolve(this.resource, { resolveMetadata: true });\n\t\t\tmtime = metadata.mtime;\n\t\t\tctime = metadata.ctime;\n\t\t\tsize = metadata.size;\n\t\t\tetag = metadata.etag;\n\n\t\t\t// Clear orphaned state when resolving was successful\n\t\t\tthis.setOrphaned(false);\n\t\t} catch (error) {\n\n\t\t\t// Put some fallback values in error case\n\t\t\tmtime = Date.now();\n\t\t\tctime = Date.now();\n\t\t\tsize = 0;\n\t\t\tetag = ETAG_DISABLED;\n\n\t\t\t// Apply orphaned state based on error code\n\t\t\tthis.setOrphaned(error.fileOperationResult === FileOperationResult.FILE_NOT_FOUND);\n\t\t}\n\n\t\tconst preferredEncoding = await this.textFileService.encoding.getPreferredWriteEncoding(this.resource, this.preferredEncoding);\n\n\t\t// Resolve with buffer\n\t\tthis.resolveFromContent({\n\t\t\tresource: this.resource,\n\t\t\tname: this.name,\n\t\t\tmtime,\n\t\t\tctime,\n\t\t\tsize,\n\t\t\tetag,\n\t\t\tvalue: buffer,\n\t\t\tencoding: preferredEncoding.encoding\n\t\t}, true /* dirty (resolved from buffer) */, options);\n\t}\n\n\tprivate async resolveFromBackup(options?: ITextFileResolveOptions): Promise<boolean> {\n\n\t\t// Resolve backup if any\n\t\tconst backup = await this.workingCopyBackupService.resolve<IBackupMetaData>(this);\n\n\t\t// Resolve preferred encoding if we need it\n\t\tlet encoding = UTF8;\n\t\tif (backup) {\n\t\t\tencoding = (await this.textFileService.encoding.getPreferredWriteEncoding(this.resource, this.preferredEncoding)).encoding;\n\t\t}\n\n\t\t// Abort if someone else managed to resolve the model by now\n\t\tlet isNewModel = !this.isResolved();\n\t\tif (!isNewModel) {\n\t\t\tthis.logService.trace('[text file model] resolveFromBackup() - exit - without resolving because previously new model got created meanwhile', this.resource.toString(true));\n\n\t\t\treturn true; // imply that resolving has happened in another operation\n\t\t}\n\n\t\t// Try to resolve from backup if we have any\n\t\tif (backup) {\n\t\t\tawait this.doResolveFromBackup(backup, encoding, options);\n\n\t\t\treturn true;\n\t\t}\n\n\t\t// Otherwise signal back that resolving did not happen\n\t\treturn false;\n\t}\n\n\tprivate async doResolveFromBackup(backup: IResolvedWorkingCopyBackup<IBackupMetaData>, encoding: string, options?: ITextFileResolveOptions): Promise<void> {\n\t\tthis.logService.trace('[text file model] doResolveFromBackup()', this.resource.toString(true));\n\n\t\t// Resolve with backup\n\t\tthis.resolveFromContent({\n\t\t\tresource: this.resource,\n\t\t\tname: this.name,\n\t\t\tmtime: backup.meta ? backup.meta.mtime : Date.now(),\n\t\t\tctime: backup.meta ? backup.meta.ctime : Date.now(),\n\t\t\tsize: backup.meta ? backup.meta.size : 0,\n\t\t\tetag: backup.meta ? backup.meta.etag : ETAG_DISABLED, // etag disabled if unknown!\n\t\t\tvalue: await createTextBufferFactoryFromStream(await this.textFileService.getDecodedStream(this.resource, backup.value, { encoding: UTF8 })),\n\t\t\tencoding\n\t\t}, true /* dirty (resolved from backup) */, options);\n\n\t\t// Restore orphaned flag based on state\n\t\tif (backup.meta?.orphaned) {\n\t\t\tthis.setOrphaned(true);\n\t\t}\n\t}\n\n\tprivate async resolveFromFile(options?: ITextFileResolveOptions): Promise<void> {\n\t\tthis.logService.trace('[text file model] resolveFromFile()', this.resource.toString(true));\n\n\t\tconst forceReadFromFile = options?.forceReadFromFile;\n\t\tconst allowBinary = this.isResolved() /* always allow if we resolved previously */ || options?.allowBinary;\n\n\t\t// Decide on etag\n\t\tlet etag: string | undefined;\n\t\tif (forceReadFromFile) {\n\t\t\tetag = ETAG_DISABLED; // disable ETag if we enforce to read from disk\n\t\t} else if (this.lastResolvedFileStat) {\n\t\t\tetag = this.lastResolvedFileStat.etag; // otherwise respect etag to support caching\n\t\t}\n\n\t\t// Remember current version before doing any long running operation\n\t\t// to ensure we are not changing a model that was changed meanwhile\n\t\tconst currentVersionId = this.versionId;\n\n\t\t// Resolve Content\n\t\ttry {\n\t\t\tconst content = await this.textFileService.readStream(this.resource, { acceptTextOnly: !allowBinary, etag, encoding: this.preferredEncoding });\n\n\t\t\t// Clear orphaned state when resolving was successful\n\t\t\tthis.setOrphaned(false);\n\n\t\t\t// Return early if the model content has changed\n\t\t\t// meanwhile to prevent loosing any changes\n\t\t\tif (currentVersionId !== this.versionId) {\n\t\t\t\tthis.logService.trace('[text file model] resolveFromFile() - exit - without resolving because model content changed', this.resource.toString(true));\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treturn this.resolveFromContent(content, false /* not dirty (resolved from file) */, options);\n\t\t} catch (error) {\n\t\t\tconst result = error.fileOperationResult;\n\n\t\t\t// Apply orphaned state based on error code\n\t\t\tthis.setOrphaned(result === FileOperationResult.FILE_NOT_FOUND);\n\n\t\t\t// NotModified status is expected and can be handled gracefully\n\t\t\t// if we are resolved\n\t\t\tif (this.isResolved() && result === FileOperationResult.FILE_NOT_MODIFIED_SINCE) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Unless we are forced to read from the file, Ignore when a model has been resolved once\n\t\t\t// and the file was deleted meanwhile. Since we already have the model resolved, we can return\n\t\t\t// to this state and update the orphaned flag to indicate that this model has no version on\n\t\t\t// disk anymore.\n\t\t\tif (this.isResolved() && result === FileOperationResult.FILE_NOT_FOUND && !forceReadFromFile) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Otherwise bubble up the error\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate resolveFromContent(content: ITextFileStreamContent, dirty: boolean, options?: ITextFileResolveOptions): void {\n\t\tthis.logService.trace('[text file model] resolveFromContent() - enter', this.resource.toString(true));\n\n\t\t// Return early if we are disposed\n\t\tif (this.isDisposed()) {\n\t\t\tthis.logService.trace('[text file model] resolveFromContent() - exit - because model is disposed', this.resource.toString(true));\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Update our resolved disk stat model\n\t\tthis.updateLastResolvedFileStat({\n\t\t\tresource: this.resource,\n\t\t\tname: content.name,\n\t\t\tmtime: content.mtime,\n\t\t\tctime: content.ctime,\n\t\t\tsize: content.size,\n\t\t\tetag: content.etag,\n\t\t\tisFile: true,\n\t\t\tisDirectory: false,\n\t\t\tisSymbolicLink: false\n\t\t});\n\n\t\t// Keep the original encoding to not loose it when saving\n\t\tconst oldEncoding = this.contentEncoding;\n\t\tthis.contentEncoding = content.encoding;\n\n\t\t// Handle events if encoding changed\n\t\tif (this.preferredEncoding) {\n\t\t\tthis.updatePreferredEncoding(this.contentEncoding); // make sure to reflect the real encoding of the file (never out of sync)\n\t\t} else if (oldEncoding !== this.contentEncoding) {\n\t\t\tthis._onDidChangeEncoding.fire();\n\t\t}\n\n\t\t// Update Existing Model\n\t\tif (this.textEditorModel) {\n\t\t\tthis.doUpdateTextModel(content.value);\n\t\t}\n\n\t\t// Create New Model\n\t\telse {\n\t\t\tthis.doCreateTextModel(content.resource, content.value);\n\t\t}\n\n\t\t// Update model dirty flag. This is very important to call\n\t\t// in both cases of dirty or not because it conditionally\n\t\t// updates the `bufferSavedVersionId` to determine the\n\t\t// version when to consider the model as saved again (e.g.\n\t\t// when undoing back to the saved state)\n\t\tthis.setDirty(!!dirty);\n\n\t\t// Emit as event\n\t\tthis._onDidResolve.fire(options?.reason ?? TextFileResolveReason.OTHER);\n\t}\n\n\tprivate doCreateTextModel(resource: URI, value: ITextBufferFactory): void {\n\t\tthis.logService.trace('[text file model] doCreateTextModel()', this.resource.toString(true));\n\n\t\t// Create model\n\t\tconst textModel = this.createTextEditorModel(value, resource, this.preferredMode);\n\n\t\t// Model Listeners\n\t\tthis.installModelListeners(textModel);\n\t}\n\n\tprivate doUpdateTextModel(value: ITextBufferFactory): void {\n\t\tthis.logService.trace('[text file model] doUpdateTextModel()', this.resource.toString(true));\n\n\t\t// Update model value in a block that ignores content change events for dirty tracking\n\t\tthis.ignoreDirtyOnModelContentChange = true;\n\t\ttry {\n\t\t\tthis.updateTextEditorModel(value, this.preferredMode);\n\t\t} finally {\n\t\t\tthis.ignoreDirtyOnModelContentChange = false;\n\t\t}\n\t}\n\n\tprivate installModelListeners(model: ITextModel): void {\n\n\t\t// See https://github.com/microsoft/vscode/issues/30189\n\t\t// This code has been extracted to a different method because it caused a memory leak\n\t\t// where `value` was captured in the content change listener closure scope.\n\n\t\t// Content Change\n\t\tthis._register(model.onDidChangeContent(e => this.onModelContentChanged(model, e.isUndoing || e.isRedoing)));\n\t}\n\n\tprivate onModelContentChanged(model: ITextModel, isUndoingOrRedoing: boolean): void {\n\t\tthis.logService.trace(`[text file model] onModelContentChanged() - enter`, this.resource.toString(true));\n\n\t\t// In any case increment the version id because it tracks the textual content state of the model at all times\n\t\tthis.versionId++;\n\t\tthis.logService.trace(`[text file model] onModelContentChanged() - new versionId ${this.versionId}`, this.resource.toString(true));\n\n\t\t// Remember when the user changed the model through a undo/redo operation.\n\t\t// We need this information to throttle save participants to fix\n\t\t// https://github.com/microsoft/vscode/issues/102542\n\t\tif (isUndoingOrRedoing) {\n\t\t\tthis.lastModelContentChangeFromUndoRedo = Date.now();\n\t\t}\n\n\t\t// We mark check for a dirty-state change upon model content change, unless:\n\t\t// - explicitly instructed to ignore it (e.g. from model.resolve())\n\t\t// - the model is readonly (in that case we never assume the change was done by the user)\n\t\tif (!this.ignoreDirtyOnModelContentChange && !this.isReadonly()) {\n\n\t\t\t// The contents changed as a matter of Undo and the version reached matches the saved one\n\t\t\t// In this case we clear the dirty flag and emit a SAVED event to indicate this state.\n\t\t\tif (model.getAlternativeVersionId() === this.bufferSavedVersionId) {\n\t\t\t\tthis.logService.trace('[text file model] onModelContentChanged() - model content changed back to last saved version', this.resource.toString(true));\n\n\t\t\t\t// Clear flags\n\t\t\t\tconst wasDirty = this.dirty;\n\t\t\t\tthis.setDirty(false);\n\n\t\t\t\t// Emit revert event if we were dirty\n\t\t\t\tif (wasDirty) {\n\t\t\t\t\tthis._onDidRevert.fire();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Otherwise the content has changed and we signal this as becoming dirty\n\t\t\telse {\n\t\t\t\tthis.logService.trace('[text file model] onModelContentChanged() - model content changed and marked as dirty', this.resource.toString(true));\n\n\t\t\t\t// Mark as dirty\n\t\t\t\tthis.setDirty(true);\n\t\t\t}\n\t\t}\n\n\t\t// Emit as event\n\t\tthis._onDidChangeContent.fire();\n\t}\n\n\t//#endregion\n\n\t//#region Dirty\n\n\tisDirty(): this is IResolvedTextFileEditorModel {\n\t\treturn this.dirty;\n\t}\n\n\tsetDirty(dirty: boolean): void {\n\t\tif (!this.isResolved()) {\n\t\t\treturn; // only resolved models can be marked dirty\n\t\t}\n\n\t\t// Track dirty state and version id\n\t\tconst wasDirty = this.dirty;\n\t\tthis.doSetDirty(dirty);\n\n\t\t// Emit as Event if dirty changed\n\t\tif (dirty !== wasDirty) {\n\t\t\tthis._onDidChangeDirty.fire();\n\t\t}\n\t}\n\n\tprivate doSetDirty(dirty: boolean): () => void {\n\t\tconst wasDirty = this.dirty;\n\t\tconst wasInConflictMode = this.inConflictMode;\n\t\tconst wasInErrorMode = this.inErrorMode;\n\t\tconst oldBufferSavedVersionId = this.bufferSavedVersionId;\n\n\t\tif (!dirty) {\n\t\t\tthis.dirty = false;\n\t\t\tthis.inConflictMode = false;\n\t\t\tthis.inErrorMode = false;\n\t\t\tthis.updateSavedVersionId();\n\t\t} else {\n\t\t\tthis.dirty = true;\n\t\t}\n\n\t\t// Return function to revert this call\n\t\treturn () => {\n\t\t\tthis.dirty = wasDirty;\n\t\t\tthis.inConflictMode = wasInConflictMode;\n\t\t\tthis.inErrorMode = wasInErrorMode;\n\t\t\tthis.bufferSavedVersionId = oldBufferSavedVersionId;\n\t\t};\n\t}\n\n\t//#endregion\n\n\t//#region Save\n\n\tasync save(options: ITextFileSaveOptions = Object.create(null)): Promise<boolean> {\n\t\tif (!this.isResolved()) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.isReadonly()) {\n\t\t\tthis.logService.trace('[text file model] save() - ignoring request for readonly resource', this.resource.toString(true));\n\n\t\t\treturn false; // if model is readonly we do not attempt to save at all\n\t\t}\n\n\t\tif (\n\t\t\t(this.hasState(TextFileEditorModelState.CONFLICT) || this.hasState(TextFileEditorModelState.ERROR)) &&\n\t\t\t(options.reason === SaveReason.AUTO || options.reason === SaveReason.FOCUS_CHANGE || options.reason === SaveReason.WINDOW_CHANGE)\n\t\t) {\n\t\t\tthis.logService.trace('[text file model] save() - ignoring auto save request for model that is in conflict or error', this.resource.toString(true));\n\n\t\t\treturn false; // if model is in save conflict or error, do not save unless save reason is explicit\n\t\t}\n\n\t\t// Actually do save and log\n\t\tthis.logService.trace('[text file model] save() - enter', this.resource.toString(true));\n\t\tawait this.doSave(options);\n\t\tthis.logService.trace('[text file model] save() - exit', this.resource.toString(true));\n\n\t\treturn true;\n\t}\n\n\tprivate async doSave(options: ITextFileSaveOptions): Promise<void> {\n\t\tif (typeof options.reason !== 'number') {\n\t\t\toptions.reason = SaveReason.EXPLICIT;\n\t\t}\n\n\t\tlet versionId = this.versionId;\n\t\tthis.logService.trace(`[text file model] doSave(${versionId}) - enter with versionId ${versionId}`, this.resource.toString(true));\n\n\t\t// Lookup any running pending save for this versionId and return it if found\n\t\t//\n\t\t// Scenario: user invoked the save action multiple times quickly for the same contents\n\t\t//           while the save was not yet finished to disk\n\t\t//\n\t\tif (this.saveSequentializer.hasPending(versionId)) {\n\t\t\tthis.logService.trace(`[text file model] doSave(${versionId}) - exit - found a pending save for versionId ${versionId}`, this.resource.toString(true));\n\n\t\t\treturn this.saveSequentializer.pending;\n\t\t}\n\n\t\t// Return early if not dirty (unless forced)\n\t\t//\n\t\t// Scenario: user invoked save action even though the model is not dirty\n\t\tif (!options.force && !this.dirty) {\n\t\t\tthis.logService.trace(`[text file model] doSave(${versionId}) - exit - because not dirty and/or versionId is different (this.isDirty: ${this.dirty}, this.versionId: ${this.versionId})`, this.resource.toString(true));\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Return if currently saving by storing this save request as the next save that should happen.\n\t\t// Never ever must 2 saves execute at the same time because this can lead to dirty writes and race conditions.\n\t\t//\n\t\t// Scenario A: auto save was triggered and is currently busy saving to disk. this takes long enough that another auto save\n\t\t//             kicks in.\n\t\t// Scenario B: save is very slow (e.g. network share) and the user manages to change the buffer and trigger another save\n\t\t//             while the first save has not returned yet.\n\t\t//\n\t\tif (this.saveSequentializer.hasPending()) {\n\t\t\tthis.logService.trace(`[text file model] doSave(${versionId}) - exit - because busy saving`, this.resource.toString(true));\n\n\t\t\t// Indicate to the save sequentializer that we want to\n\t\t\t// cancel the pending operation so that ours can run\n\t\t\t// before the pending one finishes.\n\t\t\t// Currently this will try to cancel pending save\n\t\t\t// participants but never a pending save.\n\t\t\tthis.saveSequentializer.cancelPending();\n\n\t\t\t// Register this as the next upcoming save and return\n\t\t\treturn this.saveSequentializer.setNext(() => this.doSave(options));\n\t\t}\n\n\t\t// Push all edit operations to the undo stack so that the user has a chance to\n\t\t// Ctrl+Z back to the saved version.\n\t\tif (this.isResolved()) {\n\t\t\tthis.textEditorModel.pushStackElement();\n\t\t}\n\n\t\tconst saveCancellation = new CancellationTokenSource();\n\n\t\treturn this.saveSequentializer.setPending(versionId, (async () => {\n\n\t\t\t// A save participant can still change the model now and since we are so close to saving\n\t\t\t// we do not want to trigger another auto save or similar, so we block this\n\t\t\t// In addition we update our version right after in case it changed because of a model change\n\t\t\t//\n\t\t\t// Save participants can also be skipped through API.\n\t\t\tif (this.isResolved() && !options.skipSaveParticipants) {\n\t\t\t\ttry {\n\n\t\t\t\t\t// Measure the time it took from the last undo/redo operation to this save. If this\n\t\t\t\t\t// time is below `UNDO_REDO_SAVE_PARTICIPANTS_THROTTLE_THRESHOLD`, we make sure to\n\t\t\t\t\t// delay the save participant for the remaining time if the reason is auto save.\n\t\t\t\t\t//\n\t\t\t\t\t// This fixes the following issue:\n\t\t\t\t\t// - the user has configured auto save with delay of 100ms or shorter\n\t\t\t\t\t// - the user has a save participant enabled that modifies the file on each save\n\t\t\t\t\t// - the user types into the file and the file gets saved\n\t\t\t\t\t// - the user triggers undo operation\n\t\t\t\t\t// - this will undo the save participant change but trigger the save participant right after\n\t\t\t\t\t// - the user has no chance to undo over the save participant\n\t\t\t\t\t//\n\t\t\t\t\t// Reported as: https://github.com/microsoft/vscode/issues/102542\n\t\t\t\t\tif (options.reason === SaveReason.AUTO && typeof this.lastModelContentChangeFromUndoRedo === 'number') {\n\t\t\t\t\t\tconst timeFromUndoRedoToSave = Date.now() - this.lastModelContentChangeFromUndoRedo;\n\t\t\t\t\t\tif (timeFromUndoRedoToSave < TextFileEditorModel.UNDO_REDO_SAVE_PARTICIPANTS_AUTO_SAVE_THROTTLE_THRESHOLD) {\n\t\t\t\t\t\t\tawait timeout(TextFileEditorModel.UNDO_REDO_SAVE_PARTICIPANTS_AUTO_SAVE_THROTTLE_THRESHOLD - timeFromUndoRedoToSave);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Run save participants unless save was cancelled meanwhile\n\t\t\t\t\tif (!saveCancellation.token.isCancellationRequested) {\n\t\t\t\t\t\tawait this.textFileService.files.runSaveParticipants(this, { reason: options.reason ?? SaveReason.EXPLICIT }, saveCancellation.token);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.logService.error(`[text file model] runSaveParticipants(${versionId}) - resulted in an error: ${error.toString()}`, this.resource.toString(true));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// It is possible that a subsequent save is cancelling this\n\t\t\t// running save. As such we return early when we detect that\n\t\t\t// However, we do not pass the token into the file service\n\t\t\t// because that is an atomic operation currently without\n\t\t\t// cancellation support, so we dispose the cancellation if\n\t\t\t// it was not cancelled yet.\n\t\t\tif (saveCancellation.token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tsaveCancellation.dispose();\n\t\t\t}\n\n\t\t\t// We have to protect against being disposed at this point. It could be that the save() operation\n\t\t\t// was triggerd followed by a dispose() operation right after without waiting. Typically we cannot\n\t\t\t// be disposed if we are dirty, but if we are not dirty, save() and dispose() can still be triggered\n\t\t\t// one after the other without waiting for the save() to complete. If we are disposed(), we risk\n\t\t\t// saving contents to disk that are stale (see https://github.com/microsoft/vscode/issues/50942).\n\t\t\t// To fix this issue, we will not store the contents to disk when we got disposed.\n\t\t\tif (this.isDisposed()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// We require a resolved model from this point on, since we are about to write data to disk.\n\t\t\tif (!this.isResolved()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// update versionId with its new value (if pre-save changes happened)\n\t\t\tversionId = this.versionId;\n\n\t\t\t// Clear error flag since we are trying to save again\n\t\t\tthis.inErrorMode = false;\n\n\t\t\t// Save to Disk. We mark the save operation as currently pending with\n\t\t\t// the latest versionId because it might have changed from a save\n\t\t\t// participant triggering\n\t\t\tthis.logService.trace(`[text file model] doSave(${versionId}) - before write()`, this.resource.toString(true));\n\t\t\tconst lastResolvedFileStat = assertIsDefined(this.lastResolvedFileStat);\n\t\t\tconst resolvedTextFileEditorModel = this;\n\t\t\treturn this.saveSequentializer.setPending(versionId, (async () => {\n\t\t\t\ttry {\n\t\t\t\t\tconst stat = await this.textFileService.write(lastResolvedFileStat.resource, resolvedTextFileEditorModel.createSnapshot(), {\n\t\t\t\t\t\tmtime: lastResolvedFileStat.mtime,\n\t\t\t\t\t\tencoding: this.getEncoding(),\n\t\t\t\t\t\tetag: (options.ignoreModifiedSince || !this.filesConfigurationService.preventSaveConflicts(lastResolvedFileStat.resource, resolvedTextFileEditorModel.getMode())) ? ETAG_DISABLED : lastResolvedFileStat.etag,\n\t\t\t\t\t\tunlock: options.writeUnlock,\n\t\t\t\t\t\twriteElevated: options.writeElevated\n\t\t\t\t\t});\n\n\t\t\t\t\tthis.handleSaveSuccess(stat, versionId, options);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.handleSaveError(error, versionId, options);\n\t\t\t\t}\n\t\t\t})());\n\t\t})(), () => saveCancellation.cancel());\n\t}\n\n\tprivate handleSaveSuccess(stat: IFileStatWithMetadata, versionId: number, options: ITextFileSaveOptions): void {\n\n\t\t// Updated resolved stat with updated stat\n\t\tthis.updateLastResolvedFileStat(stat);\n\n\t\t// Update dirty state unless model has changed meanwhile\n\t\tif (versionId === this.versionId) {\n\t\t\tthis.logService.trace(`[text file model] handleSaveSuccess(${versionId}) - setting dirty to false because versionId did not change`, this.resource.toString(true));\n\t\t\tthis.setDirty(false);\n\t\t} else {\n\t\t\tthis.logService.trace(`[text file model] handleSaveSuccess(${versionId}) - not setting dirty to false because versionId did change meanwhile`, this.resource.toString(true));\n\t\t}\n\n\t\t// Update orphan state given save was successful\n\t\tthis.setOrphaned(false);\n\n\t\t// Emit Save Event\n\t\tthis._onDidSave.fire(options.reason ?? SaveReason.EXPLICIT);\n\t}\n\n\tprivate handleSaveError(error: Error, versionId: number, options: ITextFileSaveOptions): void {\n\t\tthis.logService.error(`[text file model] handleSaveError(${versionId}) - exit - resulted in a save error: ${error.toString()}`, this.resource.toString(true));\n\n\t\t// Return early if the save() call was made asking to\n\t\t// handle the save error itself.\n\t\tif (options.ignoreErrorHandler) {\n\t\t\tthrow error;\n\t\t}\n\n\t\t// In any case of an error, we mark the model as dirty to prevent data loss\n\t\t// It could be possible that the write corrupted the file on disk (e.g. when\n\t\t// an error happened after truncating the file) and as such we want to preserve\n\t\t// the model contents to prevent data loss.\n\t\tthis.setDirty(true);\n\n\t\t// Flag as error state in the model\n\t\tthis.inErrorMode = true;\n\n\t\t// Look out for a save conflict\n\t\tif ((<FileOperationError>error).fileOperationResult === FileOperationResult.FILE_MODIFIED_SINCE) {\n\t\t\tthis.inConflictMode = true;\n\t\t}\n\n\t\t// Show to user\n\t\tthis.textFileService.files.saveErrorHandler.onSaveError(error, this);\n\n\t\t// Emit as event\n\t\tthis._onDidSaveError.fire();\n\t}\n\n\tprivate updateSavedVersionId(): void {\n\t\t// we remember the models alternate version id to remember when the version\n\t\t// of the model matches with the saved version on disk. we need to keep this\n\t\t// in order to find out if the model changed back to a saved version (e.g.\n\t\t// when undoing long enough to reach to a version that is saved and then to\n\t\t// clear the dirty flag)\n\t\tif (this.isResolved()) {\n\t\t\tthis.bufferSavedVersionId = this.textEditorModel.getAlternativeVersionId();\n\t\t}\n\t}\n\n\tprivate updateLastResolvedFileStat(newFileStat: IFileStatWithMetadata): void {\n\n\t\t// First resolve - just take\n\t\tif (!this.lastResolvedFileStat) {\n\t\t\tthis.lastResolvedFileStat = newFileStat;\n\t\t}\n\n\t\t// Subsequent resolve - make sure that we only assign it if the mtime is equal or has advanced.\n\t\t// This prevents race conditions from resolving and saving. If a save comes in late after a revert\n\t\t// was called, the mtime could be out of sync.\n\t\telse if (this.lastResolvedFileStat.mtime <= newFileStat.mtime) {\n\t\t\tthis.lastResolvedFileStat = newFileStat;\n\t\t}\n\t}\n\n\t//#endregion\n\n\thasState(state: TextFileEditorModelState): boolean {\n\t\tswitch (state) {\n\t\t\tcase TextFileEditorModelState.CONFLICT:\n\t\t\t\treturn this.inConflictMode;\n\t\t\tcase TextFileEditorModelState.DIRTY:\n\t\t\t\treturn this.dirty;\n\t\t\tcase TextFileEditorModelState.ERROR:\n\t\t\t\treturn this.inErrorMode;\n\t\t\tcase TextFileEditorModelState.ORPHAN:\n\t\t\t\treturn this.inOrphanMode;\n\t\t\tcase TextFileEditorModelState.PENDING_SAVE:\n\t\t\t\treturn this.saveSequentializer.hasPending();\n\t\t\tcase TextFileEditorModelState.SAVED:\n\t\t\t\treturn !this.dirty;\n\t\t}\n\t}\n\n\tjoinState(state: TextFileEditorModelState.PENDING_SAVE): Promise<void> {\n\t\treturn this.saveSequentializer.pending ?? Promise.resolve();\n\t}\n\n\toverride getMode(this: IResolvedTextFileEditorModel): string;\n\toverride getMode(): string | undefined;\n\toverride getMode(): string | undefined {\n\t\tif (this.textEditorModel) {\n\t\t\treturn this.textEditorModel.getModeId();\n\t\t}\n\n\t\treturn this.preferredMode;\n\t}\n\n\t//#region Encoding\n\n\tgetEncoding(): string | undefined {\n\t\treturn this.preferredEncoding || this.contentEncoding;\n\t}\n\n\tasync setEncoding(encoding: string, mode: EncodingMode): Promise<void> {\n\t\tif (!this.isNewEncoding(encoding)) {\n\t\t\treturn; // return early if the encoding is already the same\n\t\t}\n\n\t\t// Encode: Save with encoding\n\t\tif (mode === EncodingMode.Encode) {\n\t\t\tthis.updatePreferredEncoding(encoding);\n\n\t\t\t// Save\n\t\t\tif (!this.isDirty()) {\n\t\t\t\tthis.versionId++; // needs to increment because we change the model potentially\n\t\t\t\tthis.setDirty(true);\n\t\t\t}\n\n\t\t\tif (!this.inConflictMode) {\n\t\t\t\tawait this.save();\n\t\t\t}\n\t\t}\n\n\t\t// Decode: Resolve with encoding\n\t\telse {\n\t\t\tif (this.isDirty()) {\n\t\t\t\tawait this.save();\n\t\t\t}\n\n\t\t\tthis.updatePreferredEncoding(encoding);\n\n\t\t\tawait this.resolve({\n\t\t\t\tforceReadFromFile: true\t// because encoding has changed\n\t\t\t});\n\t\t}\n\t}\n\n\tupdatePreferredEncoding(encoding: string | undefined): void {\n\t\tif (!this.isNewEncoding(encoding)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.preferredEncoding = encoding;\n\n\t\t// Emit\n\t\tthis._onDidChangeEncoding.fire();\n\t}\n\n\tprivate isNewEncoding(encoding: string | undefined): boolean {\n\t\tif (this.preferredEncoding === encoding) {\n\t\t\treturn false; // return early if the encoding is already the same\n\t\t}\n\n\t\tif (!this.preferredEncoding && this.contentEncoding === encoding) {\n\t\t\treturn false; // also return if we don't have a preferred encoding but the content encoding is already the same\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t//#endregion\n\n\toverride isResolved(): this is IResolvedTextFileEditorModel {\n\t\treturn !!this.textEditorModel;\n\t}\n\n\toverride isReadonly(): boolean {\n\t\treturn this.fileService.hasCapability(this.resource, FileSystemProviderCapabilities.Readonly);\n\t}\n\n\toverride dispose(): void {\n\t\tthis.logService.trace('[text file model] dispose()', this.resource.toString(true));\n\n\t\tthis.inConflictMode = false;\n\t\tthis.inOrphanMode = false;\n\t\tthis.inErrorMode = false;\n\n\t\tsuper.dispose();\n\t}\n}\n"]}