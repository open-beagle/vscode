{"version":3,"file":"encoding.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/textfile/common/encoding.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAKnF,QAAA,IAAI,GAAG,MAAM,CAAC;IACd,QAAA,aAAa,GAAG,SAAS,CAAC;IAC1B,QAAA,OAAO,GAAG,SAAS,CAAC;IACpB,QAAA,OAAO,GAAG,SAAS,CAAC;IAIjC,SAAgB,aAAa,CAAC,QAAgB;QAC7C,OAAO,CAAC,YAAI,EAAE,qBAAa,EAAE,eAAO,EAAE,eAAO,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,WAAW,KAAK,QAAQ,CAAC,CAAC;IAC9F,CAAC;IAFD,sCAEC;IAEY,QAAA,WAAW,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAC3B,QAAA,WAAW,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAC3B,QAAA,QAAQ,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IAE3C,MAAM,kCAAkC,GAAG,GAAG,CAAC,CAAE,wEAAwE;IACzH,MAAM,2BAA2B,GAAG,GAAG,CAAC,CAAI,wEAAwE;IACpH,MAAM,6BAA6B,GAAG,GAAG,GAAG,CAAC,CAAC,CAAG,wEAAwE;IACzH,MAAM,6BAA6B,GAAG,GAAG,GAAG,GAAG,CAAC,CAAE,qEAAqE;IAmBvH,MAAM,aAAa;QAsClB,YAA4B,gBAAgC;YAAhC,qBAAgB,GAAhB,gBAAgB,CAAgB;QAAI,CAAC;QApCjE;;;;;;;;;WASG;QACH,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,QAAgB;YACnC,IAAI,OAAO,GAA+B,SAAS,CAAC;YACpD,IAAI,QAAQ,KAAK,YAAI,EAAE;gBACtB,MAAM,KAAK,GAAG,sDAAa,gBAAgB,2BAAC,CAAC;gBAC7C,OAAO,GAAG,KAAK,CAAC,UAAU,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC;aACrD;iBAAM;gBACN,MAAM,eAAe,GAAG,IAAI,WAAW,EAAE,CAAC;gBAC1C,OAAO,GAAG;oBACT,KAAK,CAAC,MAAkB;wBACvB,OAAO,eAAe,CAAC,MAAM,CAAC,MAAM,EAAE;4BACrC,6DAA6D;4BAC7D,6DAA6D;4BAC7D,aAAa;4BACb,MAAM,EAAE,IAAI;yBACZ,CAAC,CAAC;oBACJ,CAAC;oBAED,GAAG;wBACF,OAAO,eAAe,CAAC,MAAM,EAAE,CAAC;oBACjC,CAAC;iBACD,CAAC;aACF;YAED,OAAO,IAAI,aAAa,CAAC,OAAO,CAAC,CAAC;QACnC,CAAC;QAID,KAAK,CAAC,MAAkB;YACvB,OAAO,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAC5C,CAAC;QAED,GAAG;YACF,OAAO,IAAI,CAAC,gBAAgB,CAAC,GAAG,EAAE,CAAC;QACpC,CAAC;KACD;IAED,SAAgB,cAAc,CAAC,MAA8B,EAAE,OAA6B;;QAC3F,MAAM,4BAA4B,GAAG,CAAA,MAAA,OAAO,CAAC,4BAA4B,mCAAI,OAAO,CAAC,aAAa,EAAC,CAAC,CAAC,6BAA6B,CAAC,CAAC,CAAC,2BAA2B,CAAC;QAEjK,OAAO,IAAI,OAAO,CAAsB,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAC3D,MAAM,MAAM,GAAG,CAAA,GAAA,2BAAkB,CAAA,CAAS,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;YAEvE,MAAM,cAAc,GAAe,EAAE,CAAC;YACtC,IAAI,aAAa,GAAG,CAAC,CAAC;YAEtB,IAAI,OAAO,GAA+B,SAAS,CAAC;YAEpD,MAAM,aAAa,GAAG,KAAK,IAAI,EAAE;gBAChC,IAAI;oBAEH,8BAA8B;oBAC9B,MAAM,QAAQ,GAAG,MAAM,wBAAwB,CAAC;wBAC/C,MAAM,EAAE,iBAAQ,CAAC,MAAM,CAAC,cAAc,CAAC;wBACvC,SAAS,EAAE,aAAa;qBACxB,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC;oBAE1B,0CAA0C;oBAC1C,QAAQ,CAAC,QAAQ,GAAG,MAAM,OAAO,CAAC,iBAAiB,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;oBAEvE,oCAAoC;oBACpC,OAAO,GAAG,MAAM,aAAa,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;oBACxD,MAAM,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,iBAAQ,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,CAAC;oBACtE,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;oBAEtB,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC;oBAC1B,aAAa,GAAG,CAAC,CAAC;oBAElB,uEAAuE;oBACvE,OAAO,CAAC;wBACP,MAAM,EAAE,MAAM;wBACd,QAAQ;qBACR,CAAC,CAAC;iBACH;gBAAC,OAAO,KAAK,EAAE;oBACf,MAAM,CAAC,KAAK,CAAC,CAAC;iBACd;YACF,CAAC,CAAC;YAEF,CAAA,GAAA,qBAAY,CAAA,CAAC,MAAM,EAAE;gBACpB,MAAM,EAAE,KAAK,EAAC,KAAK,EAAC,EAAE;oBAErB,kDAAkD;oBAClD,IAAI,OAAO,EAAE;wBACZ,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;qBAC1C;oBAED,iEAAiE;yBAC5D;wBACJ,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBAC3B,aAAa,IAAI,KAAK,CAAC,UAAU,CAAC;wBAElC,6DAA6D;wBAC7D,IAAI,aAAa,IAAI,4BAA4B,EAAE;4BAElD,+CAA+C;4BAC/C,MAAM,CAAC,KAAK,EAAE,CAAC;4BAEf,MAAM,aAAa,EAAE,CAAC;4BAEtB,8CAA8C;4BAC9C,4CAA4C;4BAC5C,UAAU,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC;yBAClC;qBACD;gBACF,CAAC;gBACD,OAAO,EAAE,KAAK,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC;gBACrC,KAAK,EAAE,KAAK,IAAI,EAAE;oBAEjB,oDAAoD;oBACpD,oDAAoD;oBACpD,2CAA2C;oBAC3C,IAAI,CAAC,OAAO,EAAE;wBACb,MAAM,aAAa,EAAE,CAAC;qBACtB;oBAED,oDAAoD;oBACpD,MAAM,CAAC,GAAG,CAAC,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,GAAG,EAAE,CAAC,CAAC;gBAC5B,CAAC;aACD,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACJ,CAAC;IAnFD,wCAmFC;IAEM,KAAK,UAAU,gBAAgB,CAAC,QAA0B,EAAE,QAAgB,EAAE,OAA8B;QAClH,MAAM,KAAK,GAAG,sDAAa,gBAAgB,2BAAC,CAAC;QAC7C,MAAM,OAAO,GAAG,KAAK,CAAC,UAAU,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE,OAAO,CAAC,CAAC;QAEpE,IAAI,YAAY,GAAG,KAAK,CAAC;QACzB,IAAI,IAAI,GAAG,KAAK,CAAC;QAEjB,OAAO;YACN,IAAI;gBACH,IAAI,IAAI,EAAE;oBACT,OAAO,IAAI,CAAC;iBACZ;gBAED,MAAM,KAAK,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC;gBAC9B,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;oBAC9B,IAAI,GAAG,IAAI,CAAC;oBAEZ,0DAA0D;oBAC1D,4DAA4D;oBAC5D,iDAAiD;oBACjD,IAAI,CAAC,YAAY,KAAI,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,MAAM,CAAA,EAAE;wBACrC,QAAQ,QAAQ,EAAE;4BACjB,KAAK,YAAI,CAAC;4BACV,KAAK,qBAAa;gCACjB,OAAO,iBAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,gBAAQ,CAAC,CAAC,CAAC;4BACjD,KAAK,eAAO;gCACX,OAAO,iBAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,mBAAW,CAAC,CAAC,CAAC;4BACpD,KAAK,eAAO;gCACX,OAAO,iBAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,mBAAW,CAAC,CAAC,CAAC;yBACpD;qBACD;oBAED,MAAM,SAAS,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;oBAChC,IAAI,SAAS,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;wBACtC,YAAY,GAAG,IAAI,CAAC;wBAEpB,OAAO,iBAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;qBAChC;oBAED,OAAO,IAAI,CAAC;iBACZ;gBAED,YAAY,GAAG,IAAI,CAAC;gBAEpB,OAAO,iBAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;YAC5C,CAAC;SACD,CAAC;IACH,CAAC;IA/CD,4CA+CC;IAEM,KAAK,UAAU,cAAc,CAAC,QAAgB;QACpD,MAAM,KAAK,GAAG,sDAAa,gBAAgB,2BAAC,CAAC;QAE7C,OAAO,KAAK,CAAC,cAAc,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC;IACvD,CAAC;IAJD,wCAIC;IAED,SAAgB,cAAc,CAAC,GAAkB;QAChD,IAAI,GAAG,KAAK,qBAAa,IAAI,GAAG,KAAK,IAAI,EAAE;YAC1C,OAAO,YAAI,CAAC,CAAC,8EAA8E;SAC3F;QAED,OAAO,GAAG,CAAC;IACZ,CAAC;IAND,wCAMC;IAED,SAAgB,6BAA6B,CAAC,MAAuB,EAAE,SAAiB;QACvF,IAAI,CAAC,MAAM,IAAI,SAAS,GAAG,mBAAW,CAAC,MAAM,EAAE;YAC9C,OAAO,IAAI,CAAC;SACZ;QAED,MAAM,EAAE,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QAC/B,MAAM,EAAE,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QAE/B,YAAY;QACZ,IAAI,EAAE,KAAK,mBAAW,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,mBAAW,CAAC,CAAC,CAAC,EAAE;YACnD,OAAO,eAAO,CAAC;SACf;QAED,YAAY;QACZ,IAAI,EAAE,KAAK,mBAAW,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,mBAAW,CAAC,CAAC,CAAC,EAAE;YACnD,OAAO,eAAO,CAAC;SACf;QAED,IAAI,SAAS,GAAG,gBAAQ,CAAC,MAAM,EAAE;YAChC,OAAO,IAAI,CAAC;SACZ;QAED,MAAM,EAAE,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QAE/B,QAAQ;QACR,IAAI,EAAE,KAAK,gBAAQ,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,gBAAQ,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,gBAAQ,CAAC,CAAC,CAAC,EAAE;YACnE,OAAO,qBAAa,CAAC;SACrB;QAED,OAAO,IAAI,CAAC;IACb,CAAC;IA9BD,sEA8BC;IAED,sEAAsE;IACtE,iFAAiF;IACjF,iFAAiF;IACjF,uDAAuD;IACvD,sDAAsD;IACtD,MAAM,gBAAgB,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;IAEvD;;OAEG;IACH,KAAK,UAAU,qBAAqB,CAAC,MAAgB;QACpD,MAAM,SAAS,GAAG,sDAAa,WAAW,2BAAC,CAAC;QAE5C,0FAA0F;QAC1F,MAAM,aAAa,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,6BAA6B,CAAC,CAAC;QAErE,iFAAiF;QACjF,sFAAsF;QACtF,sEAAsE;QACtE,MAAM,YAAY,GAAG,YAAY,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QAExD,MAAM,OAAO,GAAG,SAAS,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QAC/C,IAAI,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE;YAClC,OAAO,IAAI,CAAC;SACZ;QAED,MAAM,GAAG,GAAG,OAAO,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;QAC3C,IAAI,CAAC,IAAI,gBAAgB,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;YACvC,OAAO,IAAI,CAAC,CAAC,iDAAiD;SAC9D;QAED,OAAO,mBAAmB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IAC9C,CAAC;IAED,MAAM,4BAA4B,GAA+B;QAChE,QAAQ,EAAE,OAAO;QACjB,MAAM,EAAE,OAAO;KACf,CAAC;IAEF,SAAS,mBAAmB,CAAC,YAAoB;QAChD,MAAM,sBAAsB,GAAG,YAAY,CAAC,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC;QACvF,MAAM,MAAM,GAAG,4BAA4B,CAAC,sBAAsB,CAAC,CAAC;QAEpE,OAAO,MAAM,IAAI,sBAAsB,CAAC;IACzC,CAAC;IAED,SAAS,YAAY,CAAC,MAAkB;QACvC,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACvC,MAAM,IAAI,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;SACzC;QAED,OAAO,MAAM,CAAC;IACf,CAAC;IAED;;;;OAIG;IACH,SAAgB,eAAe,CAAC,GAAW;QAC1C,QAAQ,GAAG,EAAE;YACZ,KAAK,UAAU;gBACd,OAAO,WAAW,CAAC;YACpB,KAAK,SAAS;gBACb,OAAO,UAAU,CAAC;YACnB,KAAK,SAAS;gBACb,OAAO,UAAU,CAAC;YACnB,KAAK,WAAW;gBACf,OAAO,YAAY,CAAC;YACrB,KAAK,OAAO;gBACX,OAAO,QAAQ,CAAC;YACjB,KAAK,OAAO;gBACX,OAAO,QAAQ,CAAC;YACjB,KAAK,OAAO;gBACX,OAAO,QAAQ,CAAC;YACjB,KAAK,OAAO;gBACX,OAAO,QAAQ,CAAC;YACjB,KAAK,UAAU;gBACd,OAAO,aAAa,CAAC;YACtB,KAAK,SAAS;gBACb,OAAO,MAAM,CAAC;YACf;gBACC,MAAM,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;gBACpC,IAAI,CAAC,EAAE;oBACN,OAAO,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;iBACzB;gBAED,OAAO,GAAG,CAAC;SACZ;IACF,CAAC;IA9BD,0CA8BC;IAcD,SAAgB,wBAAwB,CAAC,EAAE,MAAM,EAAE,SAAS,EAAe,EAAE,iBAA2B;QAEvG,wDAAwD;QACxD,IAAI,QAAQ,GAAG,6BAA6B,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;QAEhE,0DAA0D;QAC1D,8DAA8D;QAC9D,IAAI,WAAW,GAAG,KAAK,CAAC;QACxB,IAAI,QAAQ,KAAK,eAAO,IAAI,QAAQ,KAAK,eAAO,IAAI,MAAM,EAAE;YAC3D,IAAI,cAAc,GAAG,IAAI,CAAC,CAAC,iBAAiB;YAC5C,IAAI,cAAc,GAAG,IAAI,CAAC,CAAC,iBAAiB;YAC5C,IAAI,gBAAgB,GAAG,KAAK,CAAC;YAE7B,2EAA2E;YAC3E,4EAA4E;YAC5E,mEAAmE;YACnE,2EAA2E;YAC3E,4EAA4E;YAC5E,gDAAgD;YAChD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,IAAI,CAAC,GAAG,kCAAkC,EAAE,CAAC,EAAE,EAAE;gBAC7E,MAAM,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,6CAA6C;gBAC7E,MAAM,UAAU,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBAE/C,IAAI,UAAU,EAAE;oBACf,gBAAgB,GAAG,IAAI,CAAC;iBACxB;gBAED,mCAAmC;gBACnC,IAAI,cAAc,IAAI,CAAC,QAAQ,IAAI,CAAC,UAAU,IAAI,CAAC,QAAQ,IAAI,UAAU,CAAC,EAAE;oBAC3E,cAAc,GAAG,KAAK,CAAC;iBACvB;gBAED,mCAAmC;gBACnC,IAAI,cAAc,IAAI,CAAC,QAAQ,IAAI,UAAU,IAAI,CAAC,QAAQ,IAAI,CAAC,UAAU,CAAC,EAAE;oBAC3E,cAAc,GAAG,KAAK,CAAC;iBACvB;gBAED,2EAA2E;gBAC3E,IAAI,UAAU,IAAI,CAAC,cAAc,IAAI,CAAC,cAAc,EAAE;oBACrD,MAAM;iBACN;aACD;YAED,iCAAiC;YACjC,IAAI,gBAAgB,EAAE;gBACrB,IAAI,cAAc,EAAE;oBACnB,QAAQ,GAAG,eAAO,CAAC;iBACnB;qBAAM,IAAI,cAAc,EAAE;oBAC1B,QAAQ,GAAG,eAAO,CAAC;iBACnB;qBAAM;oBACN,WAAW,GAAG,IAAI,CAAC;iBACnB;aACD;SACD;QAED,oCAAoC;QACpC,IAAI,iBAAiB,IAAI,CAAC,WAAW,IAAI,CAAC,QAAQ,IAAI,MAAM,EAAE;YAC7D,OAAO,qBAAqB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE;gBAC/E,OAAO;oBACN,WAAW,EAAE,KAAK;oBAClB,QAAQ,EAAE,eAAe;iBACzB,CAAC;YACH,CAAC,CAAC,CAAC;SACH;QAED,OAAO,EAAE,WAAW,EAAE,QAAQ,EAAE,CAAC;IAClC,CAAC;IAlED,4DAkEC;IAEY,QAAA,mBAAmB,GAA2H;QAC1J,IAAI,EAAE;YACL,SAAS,EAAE,OAAO;YAClB,UAAU,EAAE,OAAO;YACnB,KAAK,EAAE,CAAC;YACR,KAAK,EAAE,SAAS;SAChB;QACD,OAAO,EAAE;YACR,SAAS,EAAE,gBAAgB;YAC3B,UAAU,EAAE,gBAAgB;YAC5B,UAAU,EAAE,IAAI;YAChB,KAAK,EAAE,CAAC;YACR,KAAK,EAAE,MAAM;SACb;QACD,OAAO,EAAE;YACR,SAAS,EAAE,WAAW;YACtB,UAAU,EAAE,WAAW;YACvB,KAAK,EAAE,CAAC;SACR;QACD,OAAO,EAAE;YACR,SAAS,EAAE,WAAW;YACtB,UAAU,EAAE,WAAW;YACvB,KAAK,EAAE,CAAC;SACR;QACD,WAAW,EAAE;YACZ,SAAS,EAAE,wBAAwB;YACnC,UAAU,EAAE,cAAc;YAC1B,KAAK,EAAE,CAAC;SACR;QACD,QAAQ,EAAE;YACT,SAAS,EAAE,sBAAsB;YACjC,UAAU,EAAE,YAAY;YACxB,KAAK,EAAE,CAAC;SACR;QACD,QAAQ,EAAE;YACT,SAAS,EAAE,sBAAsB;YACjC,UAAU,EAAE,YAAY;YACxB,KAAK,EAAE,CAAC;SACR;QACD,SAAS,EAAE;YACV,SAAS,EAAE,uBAAuB;YAClC,UAAU,EAAE,aAAa;YACzB,KAAK,EAAE,CAAC;SACR;QACD,QAAQ,EAAE;YACT,SAAS,EAAE,qBAAqB;YAChC,UAAU,EAAE,WAAW;YACvB,KAAK,EAAE,CAAC;SACR;QACD,KAAK,EAAE;YACN,SAAS,EAAE,cAAc;YACzB,UAAU,EAAE,OAAO;YACnB,KAAK,EAAE,EAAE;SACT;QACD,WAAW,EAAE;YACZ,SAAS,EAAE,uBAAuB;YAClC,UAAU,EAAE,cAAc;YAC1B,KAAK,EAAE,EAAE;SACT;QACD,QAAQ,EAAE;YACT,SAAS,EAAE,qBAAqB;YAChC,UAAU,EAAE,YAAY;YACxB,KAAK,EAAE,EAAE;SACT;QACD,WAAW,EAAE;YACZ,SAAS,EAAE,uBAAuB;YAClC,UAAU,EAAE,cAAc;YAC1B,KAAK,EAAE,EAAE;SACT;QACD,QAAQ,EAAE;YACT,SAAS,EAAE,qBAAqB;YAChC,UAAU,EAAE,YAAY;YACxB,KAAK,EAAE,EAAE;SACT;QACD,SAAS,EAAE;YACV,SAAS,EAAE,sBAAsB;YACjC,UAAU,EAAE,aAAa;YACzB,KAAK,EAAE,EAAE;SACT;QACD,WAAW,EAAE;YACZ,SAAS,EAAE,iCAAiC;YAC5C,UAAU,EAAE,cAAc;YAC1B,KAAK,EAAE,EAAE;SACT;QACD,QAAQ,EAAE;YACT,SAAS,EAAE,+BAA+B;YAC1C,UAAU,EAAE,YAAY;YACxB,KAAK,EAAE,EAAE;SACT;QACD,KAAK,EAAE;YACN,SAAS,EAAE,2BAA2B;YACtC,UAAU,EAAE,QAAQ;YACpB,KAAK,EAAE,EAAE;SACT;QACD,WAAW,EAAE;YACZ,SAAS,EAAE,yBAAyB;YACpC,UAAU,EAAE,cAAc;YAC1B,KAAK,EAAE,EAAE;SACT;QACD,KAAK,EAAE;YACN,SAAS,EAAE,mBAAmB;YAC9B,UAAU,EAAE,QAAQ;YACpB,KAAK,EAAE,EAAE;SACT;QACD,QAAQ,EAAE;YACT,SAAS,EAAE,uBAAuB;YAClC,UAAU,EAAE,YAAY;YACxB,KAAK,EAAE,EAAE;SACT;QACD,KAAK,EAAE;YACN,SAAS,EAAE,mBAAmB;YAC9B,UAAU,EAAE,QAAQ;YACpB,KAAK,EAAE,EAAE;SACT;QACD,KAAK,EAAE;YACN,SAAS,EAAE,mBAAmB;YAC9B,UAAU,EAAE,QAAQ;YACpB,KAAK,EAAE,EAAE;SACT;QACD,SAAS,EAAE;YACV,SAAS,EAAE,wBAAwB;YACnC,UAAU,EAAE,aAAa;YACzB,KAAK,EAAE,EAAE;SACT;QACD,WAAW,EAAE;YACZ,SAAS,EAAE,sBAAsB;YACjC,UAAU,EAAE,cAAc;YAC1B,KAAK,EAAE,EAAE;SACT;QACD,QAAQ,EAAE;YACT,SAAS,EAAE,oBAAoB;YAC/B,UAAU,EAAE,YAAY;YACxB,KAAK,EAAE,EAAE;SACT;QACD,WAAW,EAAE;YACZ,SAAS,EAAE,uBAAuB;YAClC,UAAU,EAAE,cAAc;YAC1B,KAAK,EAAE,EAAE;SACT;QACD,QAAQ,EAAE;YACT,SAAS,EAAE,qBAAqB;YAChC,UAAU,EAAE,YAAY;YACxB,KAAK,EAAE,EAAE;SACT;QACD,SAAS,EAAE;YACV,SAAS,EAAE,sBAAsB;YACjC,UAAU,EAAE,aAAa;YACzB,KAAK,EAAE,EAAE;SACT;QACD,SAAS,EAAE;YACV,SAAS,EAAE,wBAAwB;YACnC,UAAU,EAAE,aAAa;YACzB,KAAK,EAAE,EAAE;SACT;QACD,WAAW,EAAE;YACZ,SAAS,EAAE,wBAAwB;YACnC,UAAU,EAAE,cAAc;YAC1B,KAAK,EAAE,EAAE;SACT;QACD,QAAQ,EAAE;YACT,SAAS,EAAE,sBAAsB;YACjC,UAAU,EAAE,YAAY;YACxB,KAAK,EAAE,EAAE;SACT;QACD,WAAW,EAAE;YACZ,SAAS,EAAE,2BAA2B;YACtC,UAAU,EAAE,cAAc;YAC1B,KAAK,EAAE,EAAE;SACT;QACD,GAAG,EAAE;YACJ,SAAS,EAAE,0BAA0B;YACrC,UAAU,EAAE,KAAK;YACjB,KAAK,EAAE,EAAE;SACT;QACD,OAAO,EAAE;YACR,SAAS,EAAE,8BAA8B;YACzC,UAAU,EAAE,SAAS;YACrB,KAAK,EAAE,EAAE;SACT;QACD,KAAK,EAAE;YACN,SAAS,EAAE,4BAA4B;YACvC,UAAU,EAAE,MAAM;YAClB,KAAK,EAAE,EAAE;SACT;QACD,SAAS,EAAE;YACV,SAAS,EAAE,kCAAkC;YAC7C,UAAU,EAAE,YAAY;YACxB,KAAK,EAAE,EAAE;SACT;QACD,QAAQ,EAAE;YACT,SAAS,EAAE,sBAAsB;YACjC,UAAU,EAAE,WAAW;YACvB,KAAK,EAAE,EAAE;SACT;QACD,KAAK,EAAE;YACN,SAAS,EAAE,mBAAmB;YAC9B,UAAU,EAAE,QAAQ;YACpB,KAAK,EAAE,EAAE;SACT;QACD,KAAK,EAAE;YACN,SAAS,EAAE,iBAAiB;YAC5B,UAAU,EAAE,QAAQ;YACpB,KAAK,EAAE,EAAE;SACT;QACD,UAAU,EAAE;YACX,SAAS,EAAE,oBAAoB;YAC/B,UAAU,EAAE,aAAa;YACzB,KAAK,EAAE,EAAE;SACT;QACD,SAAS,EAAE;YACV,SAAS,EAAE,0BAA0B;YACrC,UAAU,EAAE,aAAa;YACzB,KAAK,EAAE,EAAE;SACT;QACD,MAAM,EAAE;YACP,SAAS,EAAE,oBAAoB;YAC/B,UAAU,EAAE,SAAS;YACrB,KAAK,EAAE,EAAE;SACT;QACD,KAAK,EAAE;YACN,SAAS,EAAE,gBAAgB;YAC3B,UAAU,EAAE,QAAQ;YACpB,KAAK,EAAE,EAAE;SACT;QACD,MAAM,EAAE;YACP,SAAS,EAAE,8BAA8B;YACzC,UAAU,EAAE,SAAS;YACrB,KAAK,EAAE,EAAE;SACT;QACD,KAAK,EAAE;YACN,SAAS,EAAE,qBAAqB;YAChC,UAAU,EAAE,QAAQ;YACpB,KAAK,EAAE,EAAE;SACT;QACD,KAAK,EAAE;YACN,SAAS,EAAE,+BAA+B;YAC1C,UAAU,EAAE,QAAQ;YACpB,KAAK,EAAE,EAAE;SACT;KACD,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Readable, ReadableStream, newWriteableStream, listenStream } from 'vs/base/common/stream';\nimport { VSBuffer, VSBufferReadable, VSBufferReadableStream } from 'vs/base/common/buffer';\n\nexport const UTF8 = 'utf8';\nexport const UTF8_with_bom = 'utf8bom';\nexport const UTF16be = 'utf16be';\nexport const UTF16le = 'utf16le';\n\nexport type UTF_ENCODING = typeof UTF8 | typeof UTF8_with_bom | typeof UTF16be | typeof UTF16le;\n\nexport function isUTFEncoding(encoding: string): encoding is UTF_ENCODING {\n\treturn [UTF8, UTF8_with_bom, UTF16be, UTF16le].some(utfEncoding => utfEncoding === encoding);\n}\n\nexport const UTF16be_BOM = [0xFE, 0xFF];\nexport const UTF16le_BOM = [0xFF, 0xFE];\nexport const UTF8_BOM = [0xEF, 0xBB, 0xBF];\n\nconst ZERO_BYTE_DETECTION_BUFFER_MAX_LEN = 512; \t// number of bytes to look at to decide about a file being binary or not\nconst NO_ENCODING_GUESS_MIN_BYTES = 512; \t\t\t// when not auto guessing the encoding, small number of bytes are enough\nconst AUTO_ENCODING_GUESS_MIN_BYTES = 512 * 8; \t\t// with auto guessing we want a lot more content to be read for guessing\nconst AUTO_ENCODING_GUESS_MAX_BYTES = 512 * 128; \t// set an upper limit for the number of bytes we pass on to jschardet\n\nexport interface IDecodeStreamOptions {\n\tguessEncoding: boolean;\n\tminBytesRequiredForDetection?: number;\n\n\toverwriteEncoding(detectedEncoding: string | null): Promise<string>;\n}\n\nexport interface IDecodeStreamResult {\n\tstream: ReadableStream<string>;\n\tdetected: IDetectedEncodingResult;\n}\n\nexport interface IDecoderStream {\n\twrite(buffer: Uint8Array): string;\n\tend(): string | undefined;\n}\n\nclass DecoderStream implements IDecoderStream {\n\n\t/**\n\t * This stream will only load iconv-lite lazily if the encoding\n\t * is not UTF-8. This ensures that for most common cases we do\n\t * not pay the price of loading the module from disk.\n\t *\n\t * We still need to be careful when converting UTF-8 to a string\n\t * though because we read the file in chunks of Buffer and thus\n\t * need to decode it via TextDecoder helper that is available\n\t * in browser and node.js environments.\n\t */\n\tstatic async create(encoding: string): Promise<DecoderStream> {\n\t\tlet decoder: IDecoderStream | undefined = undefined;\n\t\tif (encoding !== UTF8) {\n\t\t\tconst iconv = await import('iconv-lite-umd');\n\t\t\tdecoder = iconv.getDecoder(toNodeEncoding(encoding));\n\t\t} else {\n\t\t\tconst utf8TextDecoder = new TextDecoder();\n\t\t\tdecoder = {\n\t\t\t\twrite(buffer: Uint8Array): string {\n\t\t\t\t\treturn utf8TextDecoder.decode(buffer, {\n\t\t\t\t\t\t// Signal to TextDecoder that potentially more data is coming\n\t\t\t\t\t\t// and that we are calling `decode` in the end to consume any\n\t\t\t\t\t\t// remainders\n\t\t\t\t\t\tstream: true\n\t\t\t\t\t});\n\t\t\t\t},\n\n\t\t\t\tend(): string | undefined {\n\t\t\t\t\treturn utf8TextDecoder.decode();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\treturn new DecoderStream(decoder);\n\t}\n\n\tprivate constructor(private iconvLiteDecoder: IDecoderStream) { }\n\n\twrite(buffer: Uint8Array): string {\n\t\treturn this.iconvLiteDecoder.write(buffer);\n\t}\n\n\tend(): string | undefined {\n\t\treturn this.iconvLiteDecoder.end();\n\t}\n}\n\nexport function toDecodeStream(source: VSBufferReadableStream, options: IDecodeStreamOptions): Promise<IDecodeStreamResult> {\n\tconst minBytesRequiredForDetection = options.minBytesRequiredForDetection ?? options.guessEncoding ? AUTO_ENCODING_GUESS_MIN_BYTES : NO_ENCODING_GUESS_MIN_BYTES;\n\n\treturn new Promise<IDecodeStreamResult>((resolve, reject) => {\n\t\tconst target = newWriteableStream<string>(strings => strings.join(''));\n\n\t\tconst bufferedChunks: VSBuffer[] = [];\n\t\tlet bytesBuffered = 0;\n\n\t\tlet decoder: IDecoderStream | undefined = undefined;\n\n\t\tconst createDecoder = async () => {\n\t\t\ttry {\n\n\t\t\t\t// detect encoding from buffer\n\t\t\t\tconst detected = await detectEncodingFromBuffer({\n\t\t\t\t\tbuffer: VSBuffer.concat(bufferedChunks),\n\t\t\t\t\tbytesRead: bytesBuffered\n\t\t\t\t}, options.guessEncoding);\n\n\t\t\t\t// ensure to respect overwrite of encoding\n\t\t\t\tdetected.encoding = await options.overwriteEncoding(detected.encoding);\n\n\t\t\t\t// decode and write buffered content\n\t\t\t\tdecoder = await DecoderStream.create(detected.encoding);\n\t\t\t\tconst decoded = decoder.write(VSBuffer.concat(bufferedChunks).buffer);\n\t\t\t\ttarget.write(decoded);\n\n\t\t\t\tbufferedChunks.length = 0;\n\t\t\t\tbytesBuffered = 0;\n\n\t\t\t\t// signal to the outside our detected encoding and final decoder stream\n\t\t\t\tresolve({\n\t\t\t\t\tstream: target,\n\t\t\t\t\tdetected\n\t\t\t\t});\n\t\t\t} catch (error) {\n\t\t\t\treject(error);\n\t\t\t}\n\t\t};\n\n\t\tlistenStream(source, {\n\t\t\tonData: async chunk => {\n\n\t\t\t\t// if the decoder is ready, we just write directly\n\t\t\t\tif (decoder) {\n\t\t\t\t\ttarget.write(decoder.write(chunk.buffer));\n\t\t\t\t}\n\n\t\t\t\t// otherwise we need to buffer the data until the stream is ready\n\t\t\t\telse {\n\t\t\t\t\tbufferedChunks.push(chunk);\n\t\t\t\t\tbytesBuffered += chunk.byteLength;\n\n\t\t\t\t\t// buffered enough data for encoding detection, create stream\n\t\t\t\t\tif (bytesBuffered >= minBytesRequiredForDetection) {\n\n\t\t\t\t\t\t// pause stream here until the decoder is ready\n\t\t\t\t\t\tsource.pause();\n\n\t\t\t\t\t\tawait createDecoder();\n\n\t\t\t\t\t\t// resume stream now that decoder is ready but\n\t\t\t\t\t\t// outside of this stack to reduce recursion\n\t\t\t\t\t\tsetTimeout(() => source.resume());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tonError: error => target.error(error), // simply forward to target\n\t\t\tonEnd: async () => {\n\n\t\t\t\t// we were still waiting for data to do the encoding\n\t\t\t\t// detection. thus, wrap up starting the stream even\n\t\t\t\t// without all the data to get things going\n\t\t\t\tif (!decoder) {\n\t\t\t\t\tawait createDecoder();\n\t\t\t\t}\n\n\t\t\t\t// end the target with the remainders of the decoder\n\t\t\t\ttarget.end(decoder?.end());\n\t\t\t}\n\t\t});\n\t});\n}\n\nexport async function toEncodeReadable(readable: Readable<string>, encoding: string, options?: { addBOM?: boolean }): Promise<VSBufferReadable> {\n\tconst iconv = await import('iconv-lite-umd');\n\tconst encoder = iconv.getEncoder(toNodeEncoding(encoding), options);\n\n\tlet bytesWritten = false;\n\tlet done = false;\n\n\treturn {\n\t\tread() {\n\t\t\tif (done) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst chunk = readable.read();\n\t\t\tif (typeof chunk !== 'string') {\n\t\t\t\tdone = true;\n\n\t\t\t\t// If we are instructed to add a BOM but we detect that no\n\t\t\t\t// bytes have been written, we must ensure to return the BOM\n\t\t\t\t// ourselves so that we comply with the contract.\n\t\t\t\tif (!bytesWritten && options?.addBOM) {\n\t\t\t\t\tswitch (encoding) {\n\t\t\t\t\t\tcase UTF8:\n\t\t\t\t\t\tcase UTF8_with_bom:\n\t\t\t\t\t\t\treturn VSBuffer.wrap(Uint8Array.from(UTF8_BOM));\n\t\t\t\t\t\tcase UTF16be:\n\t\t\t\t\t\t\treturn VSBuffer.wrap(Uint8Array.from(UTF16be_BOM));\n\t\t\t\t\t\tcase UTF16le:\n\t\t\t\t\t\t\treturn VSBuffer.wrap(Uint8Array.from(UTF16le_BOM));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst leftovers = encoder.end();\n\t\t\t\tif (leftovers && leftovers.length > 0) {\n\t\t\t\t\tbytesWritten = true;\n\n\t\t\t\t\treturn VSBuffer.wrap(leftovers);\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tbytesWritten = true;\n\n\t\t\treturn VSBuffer.wrap(encoder.write(chunk));\n\t\t}\n\t};\n}\n\nexport async function encodingExists(encoding: string): Promise<boolean> {\n\tconst iconv = await import('iconv-lite-umd');\n\n\treturn iconv.encodingExists(toNodeEncoding(encoding));\n}\n\nexport function toNodeEncoding(enc: string | null): string {\n\tif (enc === UTF8_with_bom || enc === null) {\n\t\treturn UTF8; // iconv does not distinguish UTF 8 with or without BOM, so we need to help it\n\t}\n\n\treturn enc;\n}\n\nexport function detectEncodingByBOMFromBuffer(buffer: VSBuffer | null, bytesRead: number): typeof UTF8_with_bom | typeof UTF16le | typeof UTF16be | null {\n\tif (!buffer || bytesRead < UTF16be_BOM.length) {\n\t\treturn null;\n\t}\n\n\tconst b0 = buffer.readUInt8(0);\n\tconst b1 = buffer.readUInt8(1);\n\n\t// UTF-16 BE\n\tif (b0 === UTF16be_BOM[0] && b1 === UTF16be_BOM[1]) {\n\t\treturn UTF16be;\n\t}\n\n\t// UTF-16 LE\n\tif (b0 === UTF16le_BOM[0] && b1 === UTF16le_BOM[1]) {\n\t\treturn UTF16le;\n\t}\n\n\tif (bytesRead < UTF8_BOM.length) {\n\t\treturn null;\n\t}\n\n\tconst b2 = buffer.readUInt8(2);\n\n\t// UTF-8\n\tif (b0 === UTF8_BOM[0] && b1 === UTF8_BOM[1] && b2 === UTF8_BOM[2]) {\n\t\treturn UTF8_with_bom;\n\t}\n\n\treturn null;\n}\n\n// we explicitly ignore a specific set of encodings from auto guessing\n// - ASCII: we never want this encoding (most UTF-8 files would happily detect as\n//          ASCII files and then you could not type non-ASCII characters anymore)\n// - UTF-16: we have our own detection logic for UTF-16\n// - UTF-32: we do not support this encoding in VSCode\nconst IGNORE_ENCODINGS = ['ascii', 'utf-16', 'utf-32'];\n\n/**\n * Guesses the encoding from buffer.\n */\nasync function guessEncodingByBuffer(buffer: VSBuffer): Promise<string | null> {\n\tconst jschardet = await import('jschardet');\n\n\t// ensure to limit buffer for guessing due to https://github.com/aadsm/jschardet/issues/53\n\tconst limitedBuffer = buffer.slice(0, AUTO_ENCODING_GUESS_MAX_BYTES);\n\n\t// before guessing jschardet calls toString('binary') on input if it is a Buffer,\n\t// since we are using it inside browser environment as well we do conversion ourselves\n\t// https://github.com/aadsm/jschardet/blob/v2.1.1/src/index.js#L36-L40\n\tconst binaryString = encodeLatin1(limitedBuffer.buffer);\n\n\tconst guessed = jschardet.detect(binaryString);\n\tif (!guessed || !guessed.encoding) {\n\t\treturn null;\n\t}\n\n\tconst enc = guessed.encoding.toLowerCase();\n\tif (0 <= IGNORE_ENCODINGS.indexOf(enc)) {\n\t\treturn null; // see comment above why we ignore some encodings\n\t}\n\n\treturn toIconvLiteEncoding(guessed.encoding);\n}\n\nconst JSCHARDET_TO_ICONV_ENCODINGS: { [name: string]: string } = {\n\t'ibm866': 'cp866',\n\t'big5': 'cp950'\n};\n\nfunction toIconvLiteEncoding(encodingName: string): string {\n\tconst normalizedEncodingName = encodingName.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();\n\tconst mapped = JSCHARDET_TO_ICONV_ENCODINGS[normalizedEncodingName];\n\n\treturn mapped || normalizedEncodingName;\n}\n\nfunction encodeLatin1(buffer: Uint8Array): string {\n\tlet result = '';\n\tfor (let i = 0; i < buffer.length; i++) {\n\t\tresult += String.fromCharCode(buffer[i]);\n\t}\n\n\treturn result;\n}\n\n/**\n * The encodings that are allowed in a settings file don't match the canonical encoding labels specified by WHATWG.\n * See https://encoding.spec.whatwg.org/#names-and-labels\n * Iconv-lite strips all non-alphanumeric characters, but ripgrep doesn't. For backcompat, allow these labels.\n */\nexport function toCanonicalName(enc: string): string {\n\tswitch (enc) {\n\t\tcase 'shiftjis':\n\t\t\treturn 'shift-jis';\n\t\tcase 'utf16le':\n\t\t\treturn 'utf-16le';\n\t\tcase 'utf16be':\n\t\t\treturn 'utf-16be';\n\t\tcase 'big5hkscs':\n\t\t\treturn 'big5-hkscs';\n\t\tcase 'eucjp':\n\t\t\treturn 'euc-jp';\n\t\tcase 'euckr':\n\t\t\treturn 'euc-kr';\n\t\tcase 'koi8r':\n\t\t\treturn 'koi8-r';\n\t\tcase 'koi8u':\n\t\t\treturn 'koi8-u';\n\t\tcase 'macroman':\n\t\t\treturn 'x-mac-roman';\n\t\tcase 'utf8bom':\n\t\t\treturn 'utf8';\n\t\tdefault:\n\t\t\tconst m = enc.match(/windows(\\d+)/);\n\t\t\tif (m) {\n\t\t\t\treturn 'windows-' + m[1];\n\t\t\t}\n\n\t\t\treturn enc;\n\t}\n}\n\nexport interface IDetectedEncodingResult {\n\tencoding: string | null;\n\tseemsBinary: boolean;\n}\n\nexport interface IReadResult {\n\tbuffer: VSBuffer | null;\n\tbytesRead: number;\n}\n\nexport function detectEncodingFromBuffer(readResult: IReadResult, autoGuessEncoding?: false): IDetectedEncodingResult;\nexport function detectEncodingFromBuffer(readResult: IReadResult, autoGuessEncoding?: boolean): Promise<IDetectedEncodingResult>;\nexport function detectEncodingFromBuffer({ buffer, bytesRead }: IReadResult, autoGuessEncoding?: boolean): Promise<IDetectedEncodingResult> | IDetectedEncodingResult {\n\n\t// Always first check for BOM to find out about encoding\n\tlet encoding = detectEncodingByBOMFromBuffer(buffer, bytesRead);\n\n\t// Detect 0 bytes to see if file is binary or UTF-16 LE/BE\n\t// unless we already know that this file has a UTF-16 encoding\n\tlet seemsBinary = false;\n\tif (encoding !== UTF16be && encoding !== UTF16le && buffer) {\n\t\tlet couldBeUTF16LE = true; // e.g. 0xAA 0x00\n\t\tlet couldBeUTF16BE = true; // e.g. 0x00 0xAA\n\t\tlet containsZeroByte = false;\n\n\t\t// This is a simplified guess to detect UTF-16 BE or LE by just checking if\n\t\t// the first 512 bytes have the 0-byte at a specific location. For UTF-16 LE\n\t\t// this would be the odd byte index and for UTF-16 BE the even one.\n\t\t// Note: this can produce false positives (a binary file that uses a 2-byte\n\t\t// encoding of the same format as UTF-16) and false negatives (a UTF-16 file\n\t\t// that is using 4 bytes to encode a character).\n\t\tfor (let i = 0; i < bytesRead && i < ZERO_BYTE_DETECTION_BUFFER_MAX_LEN; i++) {\n\t\t\tconst isEndian = (i % 2 === 1); // assume 2-byte sequences typical for UTF-16\n\t\t\tconst isZeroByte = (buffer.readUInt8(i) === 0);\n\n\t\t\tif (isZeroByte) {\n\t\t\t\tcontainsZeroByte = true;\n\t\t\t}\n\n\t\t\t// UTF-16 LE: expect e.g. 0xAA 0x00\n\t\t\tif (couldBeUTF16LE && (isEndian && !isZeroByte || !isEndian && isZeroByte)) {\n\t\t\t\tcouldBeUTF16LE = false;\n\t\t\t}\n\n\t\t\t// UTF-16 BE: expect e.g. 0x00 0xAA\n\t\t\tif (couldBeUTF16BE && (isEndian && isZeroByte || !isEndian && !isZeroByte)) {\n\t\t\t\tcouldBeUTF16BE = false;\n\t\t\t}\n\n\t\t\t// Return if this is neither UTF16-LE nor UTF16-BE and thus treat as binary\n\t\t\tif (isZeroByte && !couldBeUTF16LE && !couldBeUTF16BE) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Handle case of 0-byte included\n\t\tif (containsZeroByte) {\n\t\t\tif (couldBeUTF16LE) {\n\t\t\t\tencoding = UTF16le;\n\t\t\t} else if (couldBeUTF16BE) {\n\t\t\t\tencoding = UTF16be;\n\t\t\t} else {\n\t\t\t\tseemsBinary = true;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Auto guess encoding if configured\n\tif (autoGuessEncoding && !seemsBinary && !encoding && buffer) {\n\t\treturn guessEncodingByBuffer(buffer.slice(0, bytesRead)).then(guessedEncoding => {\n\t\t\treturn {\n\t\t\t\tseemsBinary: false,\n\t\t\t\tencoding: guessedEncoding\n\t\t\t};\n\t\t});\n\t}\n\n\treturn { seemsBinary, encoding };\n}\n\nexport const SUPPORTED_ENCODINGS: { [encoding: string]: { labelLong: string; labelShort: string; order: number; encodeOnly?: boolean; alias?: string } } = {\n\tutf8: {\n\t\tlabelLong: 'UTF-8',\n\t\tlabelShort: 'UTF-8',\n\t\torder: 1,\n\t\talias: 'utf8bom'\n\t},\n\tutf8bom: {\n\t\tlabelLong: 'UTF-8 with BOM',\n\t\tlabelShort: 'UTF-8 with BOM',\n\t\tencodeOnly: true,\n\t\torder: 2,\n\t\talias: 'utf8'\n\t},\n\tutf16le: {\n\t\tlabelLong: 'UTF-16 LE',\n\t\tlabelShort: 'UTF-16 LE',\n\t\torder: 3\n\t},\n\tutf16be: {\n\t\tlabelLong: 'UTF-16 BE',\n\t\tlabelShort: 'UTF-16 BE',\n\t\torder: 4\n\t},\n\twindows1252: {\n\t\tlabelLong: 'Western (Windows 1252)',\n\t\tlabelShort: 'Windows 1252',\n\t\torder: 5\n\t},\n\tiso88591: {\n\t\tlabelLong: 'Western (ISO 8859-1)',\n\t\tlabelShort: 'ISO 8859-1',\n\t\torder: 6\n\t},\n\tiso88593: {\n\t\tlabelLong: 'Western (ISO 8859-3)',\n\t\tlabelShort: 'ISO 8859-3',\n\t\torder: 7\n\t},\n\tiso885915: {\n\t\tlabelLong: 'Western (ISO 8859-15)',\n\t\tlabelShort: 'ISO 8859-15',\n\t\torder: 8\n\t},\n\tmacroman: {\n\t\tlabelLong: 'Western (Mac Roman)',\n\t\tlabelShort: 'Mac Roman',\n\t\torder: 9\n\t},\n\tcp437: {\n\t\tlabelLong: 'DOS (CP 437)',\n\t\tlabelShort: 'CP437',\n\t\torder: 10\n\t},\n\twindows1256: {\n\t\tlabelLong: 'Arabic (Windows 1256)',\n\t\tlabelShort: 'Windows 1256',\n\t\torder: 11\n\t},\n\tiso88596: {\n\t\tlabelLong: 'Arabic (ISO 8859-6)',\n\t\tlabelShort: 'ISO 8859-6',\n\t\torder: 12\n\t},\n\twindows1257: {\n\t\tlabelLong: 'Baltic (Windows 1257)',\n\t\tlabelShort: 'Windows 1257',\n\t\torder: 13\n\t},\n\tiso88594: {\n\t\tlabelLong: 'Baltic (ISO 8859-4)',\n\t\tlabelShort: 'ISO 8859-4',\n\t\torder: 14\n\t},\n\tiso885914: {\n\t\tlabelLong: 'Celtic (ISO 8859-14)',\n\t\tlabelShort: 'ISO 8859-14',\n\t\torder: 15\n\t},\n\twindows1250: {\n\t\tlabelLong: 'Central European (Windows 1250)',\n\t\tlabelShort: 'Windows 1250',\n\t\torder: 16\n\t},\n\tiso88592: {\n\t\tlabelLong: 'Central European (ISO 8859-2)',\n\t\tlabelShort: 'ISO 8859-2',\n\t\torder: 17\n\t},\n\tcp852: {\n\t\tlabelLong: 'Central European (CP 852)',\n\t\tlabelShort: 'CP 852',\n\t\torder: 18\n\t},\n\twindows1251: {\n\t\tlabelLong: 'Cyrillic (Windows 1251)',\n\t\tlabelShort: 'Windows 1251',\n\t\torder: 19\n\t},\n\tcp866: {\n\t\tlabelLong: 'Cyrillic (CP 866)',\n\t\tlabelShort: 'CP 866',\n\t\torder: 20\n\t},\n\tiso88595: {\n\t\tlabelLong: 'Cyrillic (ISO 8859-5)',\n\t\tlabelShort: 'ISO 8859-5',\n\t\torder: 21\n\t},\n\tkoi8r: {\n\t\tlabelLong: 'Cyrillic (KOI8-R)',\n\t\tlabelShort: 'KOI8-R',\n\t\torder: 22\n\t},\n\tkoi8u: {\n\t\tlabelLong: 'Cyrillic (KOI8-U)',\n\t\tlabelShort: 'KOI8-U',\n\t\torder: 23\n\t},\n\tiso885913: {\n\t\tlabelLong: 'Estonian (ISO 8859-13)',\n\t\tlabelShort: 'ISO 8859-13',\n\t\torder: 24\n\t},\n\twindows1253: {\n\t\tlabelLong: 'Greek (Windows 1253)',\n\t\tlabelShort: 'Windows 1253',\n\t\torder: 25\n\t},\n\tiso88597: {\n\t\tlabelLong: 'Greek (ISO 8859-7)',\n\t\tlabelShort: 'ISO 8859-7',\n\t\torder: 26\n\t},\n\twindows1255: {\n\t\tlabelLong: 'Hebrew (Windows 1255)',\n\t\tlabelShort: 'Windows 1255',\n\t\torder: 27\n\t},\n\tiso88598: {\n\t\tlabelLong: 'Hebrew (ISO 8859-8)',\n\t\tlabelShort: 'ISO 8859-8',\n\t\torder: 28\n\t},\n\tiso885910: {\n\t\tlabelLong: 'Nordic (ISO 8859-10)',\n\t\tlabelShort: 'ISO 8859-10',\n\t\torder: 29\n\t},\n\tiso885916: {\n\t\tlabelLong: 'Romanian (ISO 8859-16)',\n\t\tlabelShort: 'ISO 8859-16',\n\t\torder: 30\n\t},\n\twindows1254: {\n\t\tlabelLong: 'Turkish (Windows 1254)',\n\t\tlabelShort: 'Windows 1254',\n\t\torder: 31\n\t},\n\tiso88599: {\n\t\tlabelLong: 'Turkish (ISO 8859-9)',\n\t\tlabelShort: 'ISO 8859-9',\n\t\torder: 32\n\t},\n\twindows1258: {\n\t\tlabelLong: 'Vietnamese (Windows 1258)',\n\t\tlabelShort: 'Windows 1258',\n\t\torder: 33\n\t},\n\tgbk: {\n\t\tlabelLong: 'Simplified Chinese (GBK)',\n\t\tlabelShort: 'GBK',\n\t\torder: 34\n\t},\n\tgb18030: {\n\t\tlabelLong: 'Simplified Chinese (GB18030)',\n\t\tlabelShort: 'GB18030',\n\t\torder: 35\n\t},\n\tcp950: {\n\t\tlabelLong: 'Traditional Chinese (Big5)',\n\t\tlabelShort: 'Big5',\n\t\torder: 36\n\t},\n\tbig5hkscs: {\n\t\tlabelLong: 'Traditional Chinese (Big5-HKSCS)',\n\t\tlabelShort: 'Big5-HKSCS',\n\t\torder: 37\n\t},\n\tshiftjis: {\n\t\tlabelLong: 'Japanese (Shift JIS)',\n\t\tlabelShort: 'Shift JIS',\n\t\torder: 38\n\t},\n\teucjp: {\n\t\tlabelLong: 'Japanese (EUC-JP)',\n\t\tlabelShort: 'EUC-JP',\n\t\torder: 39\n\t},\n\teuckr: {\n\t\tlabelLong: 'Korean (EUC-KR)',\n\t\tlabelShort: 'EUC-KR',\n\t\torder: 40\n\t},\n\twindows874: {\n\t\tlabelLong: 'Thai (Windows 874)',\n\t\tlabelShort: 'Windows 874',\n\t\torder: 41\n\t},\n\tiso885911: {\n\t\tlabelLong: 'Latin/Thai (ISO 8859-11)',\n\t\tlabelShort: 'ISO 8859-11',\n\t\torder: 42\n\t},\n\tkoi8ru: {\n\t\tlabelLong: 'Cyrillic (KOI8-RU)',\n\t\tlabelShort: 'KOI8-RU',\n\t\torder: 43\n\t},\n\tkoi8t: {\n\t\tlabelLong: 'Tajik (KOI8-T)',\n\t\tlabelShort: 'KOI8-T',\n\t\torder: 44\n\t},\n\tgb2312: {\n\t\tlabelLong: 'Simplified Chinese (GB 2312)',\n\t\tlabelShort: 'GB 2312',\n\t\torder: 45\n\t},\n\tcp865: {\n\t\tlabelLong: 'Nordic DOS (CP 865)',\n\t\tlabelShort: 'CP 865',\n\t\torder: 46\n\t},\n\tcp850: {\n\t\tlabelLong: 'Western European DOS (CP 850)',\n\t\tlabelShort: 'CP 850',\n\t\torder: 47\n\t}\n};\n"]}