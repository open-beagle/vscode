{"version":3,"file":"panelService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/panel/common/panelService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IASnF,QAAA,aAAa,GAAG,CAAA,GAAA,+BAAe,CAAA,CAAgB,cAAc,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { IPanel } from 'vs/workbench/common/panel';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IBadge } from 'vs/workbench/services/activity/common/activity';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { IProgressIndicator } from 'vs/platform/progress/common/progress';\n\nexport const IPanelService = createDecorator<IPanelService>('panelService');\n\nexport interface IPanelIdentifier {\n\tid: string;\n\tname: string;\n\tcssClass?: string;\n}\n\nexport interface IPanelService {\n\n\treadonly _serviceBrand: undefined;\n\n\treadonly onDidPanelOpen: Event<{ readonly panel: IPanel, readonly focus: boolean }>;\n\treadonly onDidPanelClose: Event<IPanel>;\n\n\t/**\n\t * Opens a panel with the given identifier and pass keyboard focus to it if specified.\n\t */\n\topenPanel(id?: string, focus?: boolean): Promise<IPanel | undefined>;\n\n\t/**\n\t * Returns the current active panel or null if none\n\t */\n\tgetActivePanel(): IPanel | undefined;\n\n\t/**\n\t * Returns the panel by id.\n\t */\n\tgetPanel(id: string): IPanelIdentifier | undefined;\n\n\t/**\n\t * Returns all built-in panels following the default order\n\t */\n\tgetPanels(): readonly IPanelIdentifier[];\n\n\t/**\n\t * Returns pinned panels following the visual order\n\t */\n\tgetPinnedPanels(): readonly IPanelIdentifier[];\n\n\t/**\n\t * Returns the progress indicator for the panel bar.\n\t */\n\tgetProgressIndicator(id: string): IProgressIndicator | undefined;\n\n\t/**\n\t * Show an activity in a panel.\n\t */\n\tshowActivity(panelId: string, badge: IBadge, clazz?: string): IDisposable;\n\n\t/**\n\t * Hide the currently active panel.\n\t */\n\thideActivePanel(): void;\n\n\t/**\n\t * Get the last active panel ID.\n\t */\n\tgetLastActivePanelId(): string;\n}\n"]}