{"version":3,"file":"fileUserDataProvider.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/userData/test/browser/fileUserDataProvider.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { IFileService, FileChangeType, IFileChange, IFileSystemProviderWithFileReadWriteCapability, IStat, FileType, FileSystemProviderCapabilities } from 'vs/platform/files/common/files';\nimport { FileService } from 'vs/platform/files/common/fileService';\nimport { NullLogService } from 'vs/platform/log/common/log';\nimport { Schemas } from 'vs/base/common/network';\nimport { URI } from 'vs/base/common/uri';\nimport { FileUserDataProvider } from 'vs/workbench/services/userData/common/fileUserDataProvider';\nimport { dirname, isEqual, joinPath } from 'vs/base/common/resources';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { DisposableStore, IDisposable, Disposable } from 'vs/base/common/lifecycle';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { TestProductService } from 'vs/workbench/test/browser/workbenchTestServices';\nimport { InMemoryFileSystemProvider } from 'vs/platform/files/common/inMemoryFilesystemProvider';\nimport { BrowserWorkbenchEnvironmentService } from 'vs/workbench/services/environment/browser/environmentService';\n\nconst ROOT = URI.file('tests').with({ scheme: 'vscode-tests' });\n\nclass TestWorkbenchEnvironmentService extends BrowserWorkbenchEnvironmentService {\n\tconstructor(private readonly appSettingsHome: URI) {\n\t\tsuper(Object.create(null), TestProductService);\n\t}\n\toverride get userRoamingDataHome() { return this.appSettingsHome.with({ scheme: Schemas.userData }); }\n}\n\nsuite('FileUserDataProvider', () => {\n\n\tlet testObject: IFileService;\n\tlet userDataHomeOnDisk: URI;\n\tlet backupWorkspaceHomeOnDisk: URI;\n\tlet environmentService: IWorkbenchEnvironmentService;\n\tconst disposables = new DisposableStore();\n\tlet fileUserDataProvider: FileUserDataProvider;\n\n\tsetup(async () => {\n\t\tconst logService = new NullLogService();\n\t\ttestObject = disposables.add(new FileService(logService));\n\t\tconst fileSystemProvider = disposables.add(new InMemoryFileSystemProvider());\n\t\tdisposables.add(testObject.registerProvider(ROOT.scheme, fileSystemProvider));\n\n\t\tuserDataHomeOnDisk = joinPath(ROOT, 'User');\n\t\tconst backupHome = joinPath(ROOT, 'Backups');\n\t\tbackupWorkspaceHomeOnDisk = joinPath(backupHome, 'workspaceId');\n\t\tawait testObject.createFolder(userDataHomeOnDisk);\n\t\tawait testObject.createFolder(backupWorkspaceHomeOnDisk);\n\n\t\tenvironmentService = new TestWorkbenchEnvironmentService(userDataHomeOnDisk);\n\n\t\tfileUserDataProvider = new FileUserDataProvider(ROOT.scheme, fileSystemProvider, Schemas.userData, logService);\n\t\tdisposables.add(fileUserDataProvider);\n\t\tdisposables.add(testObject.registerProvider(Schemas.userData, fileUserDataProvider));\n\t});\n\n\tteardown(() => disposables.clear());\n\n\ttest('exists return false when file does not exist', async () => {\n\t\tconst exists = await testObject.exists(environmentService.settingsResource);\n\t\tassert.strictEqual(exists, false);\n\t});\n\n\ttest('read file throws error if not exist', async () => {\n\t\ttry {\n\t\t\tawait testObject.readFile(environmentService.settingsResource);\n\t\t\tassert.fail('Should fail since file does not exist');\n\t\t} catch (e) { }\n\t});\n\n\ttest('read existing file', async () => {\n\t\tawait testObject.writeFile(joinPath(userDataHomeOnDisk, 'settings.json'), VSBuffer.fromString('{}'));\n\t\tconst result = await testObject.readFile(environmentService.settingsResource);\n\t\tassert.strictEqual(result.value.toString(), '{}');\n\t});\n\n\ttest('create file', async () => {\n\t\tconst resource = environmentService.settingsResource;\n\t\tconst actual1 = await testObject.createFile(resource, VSBuffer.fromString('{}'));\n\t\tassert.strictEqual(actual1.resource.toString(), resource.toString());\n\t\tconst actual2 = await testObject.readFile(joinPath(userDataHomeOnDisk, 'settings.json'));\n\t\tassert.strictEqual(actual2.value.toString(), '{}');\n\t});\n\n\ttest('write file creates the file if not exist', async () => {\n\t\tconst resource = environmentService.settingsResource;\n\t\tconst actual1 = await testObject.writeFile(resource, VSBuffer.fromString('{}'));\n\t\tassert.strictEqual(actual1.resource.toString(), resource.toString());\n\t\tconst actual2 = await testObject.readFile(joinPath(userDataHomeOnDisk, 'settings.json'));\n\t\tassert.strictEqual(actual2.value.toString(), '{}');\n\t});\n\n\ttest('write to existing file', async () => {\n\t\tconst resource = environmentService.settingsResource;\n\t\tawait testObject.writeFile(joinPath(userDataHomeOnDisk, 'settings.json'), VSBuffer.fromString('{}'));\n\t\tconst actual1 = await testObject.writeFile(resource, VSBuffer.fromString('{a:1}'));\n\t\tassert.strictEqual(actual1.resource.toString(), resource.toString());\n\t\tconst actual2 = await testObject.readFile(joinPath(userDataHomeOnDisk, 'settings.json'));\n\t\tassert.strictEqual(actual2.value.toString(), '{a:1}');\n\t});\n\n\ttest('delete file', async () => {\n\t\tawait testObject.writeFile(joinPath(userDataHomeOnDisk, 'settings.json'), VSBuffer.fromString(''));\n\t\tawait testObject.del(environmentService.settingsResource);\n\t\tconst result = await testObject.exists(joinPath(userDataHomeOnDisk, 'settings.json'));\n\t\tassert.strictEqual(false, result);\n\t});\n\n\ttest('resolve file', async () => {\n\t\tawait testObject.writeFile(joinPath(userDataHomeOnDisk, 'settings.json'), VSBuffer.fromString(''));\n\t\tconst result = await testObject.resolve(environmentService.settingsResource);\n\t\tassert.ok(!result.isDirectory);\n\t\tassert.ok(result.children === undefined);\n\t});\n\n\ttest('exists return false for folder that does not exist', async () => {\n\t\tconst exists = await testObject.exists(environmentService.snippetsHome);\n\t\tassert.strictEqual(exists, false);\n\t});\n\n\ttest('exists return true for folder that exists', async () => {\n\t\tawait testObject.createFolder(joinPath(userDataHomeOnDisk, 'snippets'));\n\t\tconst exists = await testObject.exists(environmentService.snippetsHome);\n\t\tassert.strictEqual(exists, true);\n\t});\n\n\ttest('read file throws error for folder', async () => {\n\t\tawait testObject.createFolder(joinPath(userDataHomeOnDisk, 'snippets'));\n\t\ttry {\n\t\t\tawait testObject.readFile(environmentService.snippetsHome);\n\t\t\tassert.fail('Should fail since read file is not supported for folders');\n\t\t} catch (e) { }\n\t});\n\n\ttest('read file under folder', async () => {\n\t\tawait testObject.createFolder(joinPath(userDataHomeOnDisk, 'snippets'));\n\t\tawait testObject.writeFile(joinPath(userDataHomeOnDisk, 'snippets', 'settings.json'), VSBuffer.fromString('{}'));\n\t\tconst resource = joinPath(environmentService.snippetsHome, 'settings.json');\n\t\tconst actual = await testObject.readFile(resource);\n\t\tassert.strictEqual(actual.resource.toString(), resource.toString());\n\t\tassert.strictEqual(actual.value.toString(), '{}');\n\t});\n\n\ttest('read file under sub folder', async () => {\n\t\tawait testObject.createFolder(joinPath(userDataHomeOnDisk, 'snippets', 'java'));\n\t\tawait testObject.writeFile(joinPath(userDataHomeOnDisk, 'snippets', 'java', 'settings.json'), VSBuffer.fromString('{}'));\n\t\tconst resource = joinPath(environmentService.snippetsHome, 'java/settings.json');\n\t\tconst actual = await testObject.readFile(resource);\n\t\tassert.strictEqual(actual.resource.toString(), resource.toString());\n\t\tassert.strictEqual(actual.value.toString(), '{}');\n\t});\n\n\ttest('create file under folder that exists', async () => {\n\t\tawait testObject.createFolder(joinPath(userDataHomeOnDisk, 'snippets'));\n\t\tconst resource = joinPath(environmentService.snippetsHome, 'settings.json');\n\t\tconst actual1 = await testObject.createFile(resource, VSBuffer.fromString('{}'));\n\t\tassert.strictEqual(actual1.resource.toString(), resource.toString());\n\t\tconst actual2 = await testObject.readFile(joinPath(userDataHomeOnDisk, 'snippets', 'settings.json'));\n\t\tassert.strictEqual(actual2.value.toString(), '{}');\n\t});\n\n\ttest('create file under folder that does not exist', async () => {\n\t\tconst resource = joinPath(environmentService.snippetsHome, 'settings.json');\n\t\tconst actual1 = await testObject.createFile(resource, VSBuffer.fromString('{}'));\n\t\tassert.strictEqual(actual1.resource.toString(), resource.toString());\n\t\tconst actual2 = await testObject.readFile(joinPath(userDataHomeOnDisk, 'snippets', 'settings.json'));\n\t\tassert.strictEqual(actual2.value.toString(), '{}');\n\t});\n\n\ttest('write to not existing file under container that exists', async () => {\n\t\tawait testObject.createFolder(joinPath(userDataHomeOnDisk, 'snippets'));\n\t\tconst resource = joinPath(environmentService.snippetsHome, 'settings.json');\n\t\tconst actual1 = await testObject.writeFile(resource, VSBuffer.fromString('{}'));\n\t\tassert.strictEqual(actual1.resource.toString(), resource.toString());\n\t\tconst actual = await testObject.readFile(joinPath(userDataHomeOnDisk, 'snippets', 'settings.json'));\n\t\tassert.strictEqual(actual.value.toString(), '{}');\n\t});\n\n\ttest('write to not existing file under container that does not exists', async () => {\n\t\tconst resource = joinPath(environmentService.snippetsHome, 'settings.json');\n\t\tconst actual1 = await testObject.writeFile(resource, VSBuffer.fromString('{}'));\n\t\tassert.strictEqual(actual1.resource.toString(), resource.toString());\n\t\tconst actual = await testObject.readFile(joinPath(userDataHomeOnDisk, 'snippets', 'settings.json'));\n\t\tassert.strictEqual(actual.value.toString(), '{}');\n\t});\n\n\ttest('write to existing file under container', async () => {\n\t\tawait testObject.createFolder(joinPath(userDataHomeOnDisk, 'snippets'));\n\t\tawait testObject.writeFile(joinPath(userDataHomeOnDisk, 'snippets', 'settings.json'), VSBuffer.fromString('{}'));\n\t\tconst resource = joinPath(environmentService.snippetsHome, 'settings.json');\n\t\tconst actual1 = await testObject.writeFile(resource, VSBuffer.fromString('{a:1}'));\n\t\tassert.strictEqual(actual1.resource.toString(), resource.toString());\n\t\tconst actual = await testObject.readFile(joinPath(userDataHomeOnDisk, 'snippets', 'settings.json'));\n\t\tassert.strictEqual(actual.value.toString(), '{a:1}');\n\t});\n\n\ttest('write file under sub container', async () => {\n\t\tconst resource = joinPath(environmentService.snippetsHome, 'java/settings.json');\n\t\tconst actual1 = await testObject.writeFile(resource, VSBuffer.fromString('{}'));\n\t\tassert.strictEqual(actual1.resource.toString(), resource.toString());\n\t\tconst actual = await testObject.readFile(joinPath(userDataHomeOnDisk, 'snippets', 'java', 'settings.json'));\n\t\tassert.strictEqual(actual.value.toString(), '{}');\n\t});\n\n\ttest('delete throws error for folder that does not exist', async () => {\n\t\ttry {\n\t\t\tawait testObject.del(environmentService.snippetsHome);\n\t\t\tassert.fail('Should fail the folder does not exist');\n\t\t} catch (e) { }\n\t});\n\n\ttest('delete not existing file under container that exists', async () => {\n\t\tawait testObject.createFolder(joinPath(userDataHomeOnDisk, 'snippets'));\n\t\ttry {\n\t\t\tawait testObject.del(joinPath(environmentService.snippetsHome, 'settings.json'));\n\t\t\tassert.fail('Should fail since file does not exist');\n\t\t} catch (e) { }\n\t});\n\n\ttest('delete not existing file under container that does not exists', async () => {\n\t\ttry {\n\t\t\tawait testObject.del(joinPath(environmentService.snippetsHome, 'settings.json'));\n\t\t\tassert.fail('Should fail since file does not exist');\n\t\t} catch (e) { }\n\t});\n\n\ttest('delete existing file under folder', async () => {\n\t\tawait testObject.createFolder(joinPath(userDataHomeOnDisk, 'snippets'));\n\t\tawait testObject.writeFile(joinPath(userDataHomeOnDisk, 'snippets', 'settings.json'), VSBuffer.fromString('{}'));\n\t\tawait testObject.del(joinPath(environmentService.snippetsHome, 'settings.json'));\n\t\tconst exists = await testObject.exists(joinPath(userDataHomeOnDisk, 'snippets', 'settings.json'));\n\t\tassert.strictEqual(exists, false);\n\t});\n\n\ttest('resolve folder', async () => {\n\t\tawait testObject.createFolder(joinPath(userDataHomeOnDisk, 'snippets'));\n\t\tawait testObject.writeFile(joinPath(userDataHomeOnDisk, 'snippets', 'settings.json'), VSBuffer.fromString('{}'));\n\t\tconst result = await testObject.resolve(environmentService.snippetsHome);\n\t\tassert.ok(result.isDirectory);\n\t\tassert.ok(result.children !== undefined);\n\t\tassert.strictEqual(result.children!.length, 1);\n\t\tassert.strictEqual(result.children![0].resource.toString(), joinPath(environmentService.snippetsHome, 'settings.json').toString());\n\t});\n\n\ttest('read backup file', async () => {\n\t\tawait testObject.writeFile(joinPath(backupWorkspaceHomeOnDisk, 'backup.json'), VSBuffer.fromString('{}'));\n\t\tconst result = await testObject.readFile(joinPath(backupWorkspaceHomeOnDisk.with({ scheme: environmentService.userRoamingDataHome.scheme }), `backup.json`));\n\t\tassert.strictEqual(result.value.toString(), '{}');\n\t});\n\n\ttest('create backup file', async () => {\n\t\tawait testObject.createFile(joinPath(backupWorkspaceHomeOnDisk.with({ scheme: environmentService.userRoamingDataHome.scheme }), `backup.json`), VSBuffer.fromString('{}'));\n\t\tconst result = await testObject.readFile(joinPath(backupWorkspaceHomeOnDisk, 'backup.json'));\n\t\tassert.strictEqual(result.value.toString(), '{}');\n\t});\n\n\ttest('write backup file', async () => {\n\t\tawait testObject.writeFile(joinPath(backupWorkspaceHomeOnDisk, 'backup.json'), VSBuffer.fromString('{}'));\n\t\tawait testObject.writeFile(joinPath(backupWorkspaceHomeOnDisk.with({ scheme: environmentService.userRoamingDataHome.scheme }), `backup.json`), VSBuffer.fromString('{a:1}'));\n\t\tconst result = await testObject.readFile(joinPath(backupWorkspaceHomeOnDisk, 'backup.json'));\n\t\tassert.strictEqual(result.value.toString(), '{a:1}');\n\t});\n\n\ttest('resolve backups folder', async () => {\n\t\tawait testObject.writeFile(joinPath(backupWorkspaceHomeOnDisk, 'backup.json'), VSBuffer.fromString('{}'));\n\t\tconst result = await testObject.resolve(backupWorkspaceHomeOnDisk.with({ scheme: environmentService.userRoamingDataHome.scheme }));\n\t\tassert.ok(result.isDirectory);\n\t\tassert.ok(result.children !== undefined);\n\t\tassert.strictEqual(result.children!.length, 1);\n\t\tassert.strictEqual(result.children![0].resource.toString(), joinPath(backupWorkspaceHomeOnDisk.with({ scheme: environmentService.userRoamingDataHome.scheme }), `backup.json`).toString());\n\t});\n});\n\nclass TestFileSystemProvider implements IFileSystemProviderWithFileReadWriteCapability {\n\n\tconstructor(readonly onDidChangeFile: Event<readonly IFileChange[]>) { }\n\n\treadonly capabilities: FileSystemProviderCapabilities = FileSystemProviderCapabilities.FileReadWrite;\n\n\treadonly onDidChangeCapabilities: Event<void> = Event.None;\n\n\twatch(): IDisposable { return Disposable.None; }\n\n\tstat(): Promise<IStat> { throw new Error('Not Supported'); }\n\n\tmkdir(resource: URI): Promise<void> { throw new Error('Not Supported'); }\n\n\trename(): Promise<void> { throw new Error('Not Supported'); }\n\n\treadFile(resource: URI): Promise<Uint8Array> { throw new Error('Not Supported'); }\n\n\treaddir(resource: URI): Promise<[string, FileType][]> { throw new Error('Not Supported'); }\n\n\twriteFile(): Promise<void> { throw new Error('Not Supported'); }\n\n\tdelete(): Promise<void> { throw new Error('Not Supported'); }\n\n}\n\nsuite('FileUserDataProvider - Watching', () => {\n\n\tlet testObject: FileUserDataProvider;\n\tconst disposables = new DisposableStore();\n\tconst rootFileResource = joinPath(ROOT, 'User');\n\tconst rootUserDataResource = rootFileResource.with({ scheme: Schemas.userData });\n\n\tconst fileEventEmitter: Emitter<readonly IFileChange[]> = new Emitter<readonly IFileChange[]>();\n\tdisposables.add(fileEventEmitter);\n\n\tsetup(() => {\n\t\ttestObject = disposables.add(new FileUserDataProvider(rootFileResource.scheme, new TestFileSystemProvider(fileEventEmitter.event), Schemas.userData, new NullLogService()));\n\t});\n\n\tteardown(() => disposables.clear());\n\n\ttest('file added change event', done => {\n\t\tdisposables.add(testObject.watch(rootUserDataResource, { excludes: [], recursive: false }));\n\t\tconst expected = joinPath(rootUserDataResource, 'settings.json');\n\t\tconst target = joinPath(rootFileResource, 'settings.json');\n\t\tdisposables.add(testObject.onDidChangeFile(e => {\n\t\t\tif (isEqual(e[0].resource, expected) && e[0].type === FileChangeType.ADDED) {\n\t\t\t\tdone();\n\t\t\t}\n\t\t}));\n\t\tfileEventEmitter.fire([{\n\t\t\tresource: target,\n\t\t\ttype: FileChangeType.ADDED\n\t\t}]);\n\t});\n\n\ttest('file updated change event', done => {\n\t\tdisposables.add(testObject.watch(rootUserDataResource, { excludes: [], recursive: false }));\n\t\tconst expected = joinPath(rootUserDataResource, 'settings.json');\n\t\tconst target = joinPath(rootFileResource, 'settings.json');\n\t\tdisposables.add(testObject.onDidChangeFile(e => {\n\t\t\tif (isEqual(e[0].resource, expected) && e[0].type === FileChangeType.UPDATED) {\n\t\t\t\tdone();\n\t\t\t}\n\t\t}));\n\t\tfileEventEmitter.fire([{\n\t\t\tresource: target,\n\t\t\ttype: FileChangeType.UPDATED\n\t\t}]);\n\t});\n\n\ttest('file deleted change event', done => {\n\t\tdisposables.add(testObject.watch(rootUserDataResource, { excludes: [], recursive: false }));\n\t\tconst expected = joinPath(rootUserDataResource, 'settings.json');\n\t\tconst target = joinPath(rootFileResource, 'settings.json');\n\t\tdisposables.add(testObject.onDidChangeFile(e => {\n\t\t\tif (isEqual(e[0].resource, expected) && e[0].type === FileChangeType.DELETED) {\n\t\t\t\tdone();\n\t\t\t}\n\t\t}));\n\t\tfileEventEmitter.fire([{\n\t\t\tresource: target,\n\t\t\ttype: FileChangeType.DELETED\n\t\t}]);\n\t});\n\n\ttest('file under folder created change event', done => {\n\t\tdisposables.add(testObject.watch(rootUserDataResource, { excludes: [], recursive: false }));\n\t\tconst expected = joinPath(rootUserDataResource, 'snippets', 'settings.json');\n\t\tconst target = joinPath(rootFileResource, 'snippets', 'settings.json');\n\t\tdisposables.add(testObject.onDidChangeFile(e => {\n\t\t\tif (isEqual(e[0].resource, expected) && e[0].type === FileChangeType.ADDED) {\n\t\t\t\tdone();\n\t\t\t}\n\t\t}));\n\t\tfileEventEmitter.fire([{\n\t\t\tresource: target,\n\t\t\ttype: FileChangeType.ADDED\n\t\t}]);\n\t});\n\n\ttest('file under folder updated change event', done => {\n\t\tdisposables.add(testObject.watch(rootUserDataResource, { excludes: [], recursive: false }));\n\t\tconst expected = joinPath(rootUserDataResource, 'snippets', 'settings.json');\n\t\tconst target = joinPath(rootFileResource, 'snippets', 'settings.json');\n\t\tdisposables.add(testObject.onDidChangeFile(e => {\n\t\t\tif (isEqual(e[0].resource, expected) && e[0].type === FileChangeType.UPDATED) {\n\t\t\t\tdone();\n\t\t\t}\n\t\t}));\n\t\tfileEventEmitter.fire([{\n\t\t\tresource: target,\n\t\t\ttype: FileChangeType.UPDATED\n\t\t}]);\n\t});\n\n\ttest('file under folder deleted change event', done => {\n\t\tdisposables.add(testObject.watch(rootUserDataResource, { excludes: [], recursive: false }));\n\t\tconst expected = joinPath(rootUserDataResource, 'snippets', 'settings.json');\n\t\tconst target = joinPath(rootFileResource, 'snippets', 'settings.json');\n\t\tdisposables.add(testObject.onDidChangeFile(e => {\n\t\t\tif (isEqual(e[0].resource, expected) && e[0].type === FileChangeType.DELETED) {\n\t\t\t\tdone();\n\t\t\t}\n\t\t}));\n\t\tfileEventEmitter.fire([{\n\t\t\tresource: target,\n\t\t\ttype: FileChangeType.DELETED\n\t\t}]);\n\t});\n\n\ttest('event is not triggered if not watched', async () => {\n\t\tconst target = joinPath(rootFileResource, 'settings.json');\n\t\tlet triggered = false;\n\t\ttestObject.onDidChangeFile(() => triggered = true);\n\t\tfileEventEmitter.fire([{\n\t\t\tresource: target,\n\t\t\ttype: FileChangeType.DELETED\n\t\t}]);\n\t\tif (triggered) {\n\t\t\tassert.fail('event should not be triggered');\n\t\t}\n\t});\n\n\ttest('event is not triggered if not watched 2', async () => {\n\t\tdisposables.add(testObject.watch(rootUserDataResource, { excludes: [], recursive: false }));\n\t\tconst target = joinPath(dirname(rootFileResource), 'settings.json');\n\t\tlet triggered = false;\n\t\ttestObject.onDidChangeFile(() => triggered = true);\n\t\tfileEventEmitter.fire([{\n\t\t\tresource: target,\n\t\t\ttype: FileChangeType.DELETED\n\t\t}]);\n\t\tif (triggered) {\n\t\t\tassert.fail('event should not be triggered');\n\t\t}\n\t});\n\n});\n"]}