{"version":3,"sources":["vs/workbench/services/themes/common/themeConfiguration.ts"],"names":[],"mappings":"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","file":"themeConfiguration.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport * as types from 'vs/base/common/types';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IConfigurationRegistry, Extensions as ConfigurationExtensions, IConfigurationPropertySchema, IConfigurationNode, ConfigurationScope } from 'vs/platform/configuration/common/configurationRegistry';\n\nimport { IJSONSchema } from 'vs/base/common/jsonSchema';\nimport { textmateColorsSchemaId, textmateColorGroupSchemaId } from 'vs/workbench/services/themes/common/colorThemeSchema';\nimport { workbenchColorsSchemaId } from 'vs/platform/theme/common/colorRegistry';\nimport { tokenStylingSchemaId } from 'vs/platform/theme/common/tokenClassificationRegistry';\nimport { ThemeSettings, IWorkbenchColorTheme, IWorkbenchFileIconTheme, IColorCustomizations, ITokenColorCustomizations, IWorkbenchProductIconTheme, ISemanticTokenColorCustomizations, IExperimentalSemanticTokenColorCustomizations, ThemeSettingTarget } from 'vs/workbench/services/themes/common/workbenchThemeService';\nimport { IConfigurationService, ConfigurationTarget } from 'vs/platform/configuration/common/configuration';\nimport { isMacintosh, isWeb, isWindows } from 'vs/base/common/platform';\n\nconst DEFAULT_THEME_DARK_SETTING_VALUE = 'Default Dark+';\nconst DEFAULT_THEME_LIGHT_SETTING_VALUE = 'Default Light+';\nconst DEFAULT_THEME_HC_SETTING_VALUE = 'Default High Contrast';\n\nconst DEFAULT_FILE_ICON_THEME_SETTING_VALUE = 'vs-seti';\n\nexport const DEFAULT_PRODUCT_ICON_THEME_SETTING_VALUE = 'Default';\n\n// Configuration: Themes\nconst configurationRegistry = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration);\n\nconst colorThemeSettingEnum: string[] = [];\nconst colorThemeSettingEnumItemLabels: string[] = [];\nconst colorThemeSettingEnumDescriptions: string[] = [];\n\nconst colorThemeSettingSchema: IConfigurationPropertySchema = {\n\ttype: 'string',\n\tdescription: nls.localize('colorTheme', \"Specifies the color theme used in the workbench.\"),\n\tdefault: isWeb ? DEFAULT_THEME_LIGHT_SETTING_VALUE : DEFAULT_THEME_DARK_SETTING_VALUE,\n\tenum: colorThemeSettingEnum,\n\tenumDescriptions: colorThemeSettingEnumDescriptions,\n\tenumItemLabels: colorThemeSettingEnumItemLabels,\n\terrorMessage: nls.localize('colorThemeError', \"Theme is unknown or not installed.\"),\n};\nconst preferredDarkThemeSettingSchema: IConfigurationPropertySchema = {\n\ttype: 'string', //\n\tmarkdownDescription: nls.localize({ key: 'preferredDarkColorTheme', comment: ['`#{0}#` will become a link to an other setting. Do not remove backtick or #'] }, 'Specifies the preferred color theme for dark OS appearance when `#{0}#` is enabled.', ThemeSettings.DETECT_COLOR_SCHEME),\n\tdefault: DEFAULT_THEME_DARK_SETTING_VALUE,\n\tenum: colorThemeSettingEnum,\n\tenumDescriptions: colorThemeSettingEnumDescriptions,\n\tenumItemLabels: colorThemeSettingEnumItemLabels,\n\terrorMessage: nls.localize('colorThemeError', \"Theme is unknown or not installed.\"),\n};\nconst preferredLightThemeSettingSchema: IConfigurationPropertySchema = {\n\ttype: 'string',\n\tmarkdownDescription: nls.localize({ key: 'preferredLightColorTheme', comment: ['`#{0}#` will become a link to an other setting. Do not remove backtick or #'] }, 'Specifies the preferred color theme for light OS appearance when `#{0}#` is enabled.', ThemeSettings.DETECT_COLOR_SCHEME),\n\tdefault: DEFAULT_THEME_LIGHT_SETTING_VALUE,\n\tenum: colorThemeSettingEnum,\n\tenumDescriptions: colorThemeSettingEnumDescriptions,\n\tenumItemLabels: colorThemeSettingEnumItemLabels,\n\terrorMessage: nls.localize('colorThemeError', \"Theme is unknown or not installed.\"),\n};\nconst preferredHCThemeSettingSchema: IConfigurationPropertySchema = {\n\ttype: 'string',\n\tmarkdownDescription: nls.localize({ key: 'preferredHCColorTheme', comment: ['`#{0}#` will become a link to an other setting. Do not remove backtick or #'] }, 'Specifies the preferred color theme used in high contrast mode when `#{0}#` is enabled.', ThemeSettings.DETECT_HC),\n\tdefault: DEFAULT_THEME_HC_SETTING_VALUE,\n\tenum: colorThemeSettingEnum,\n\tenumDescriptions: colorThemeSettingEnumDescriptions,\n\tenumItemLabels: colorThemeSettingEnumItemLabels,\n\tincluded: isWindows || isMacintosh,\n\terrorMessage: nls.localize('colorThemeError', \"Theme is unknown or not installed.\"),\n};\nconst detectColorSchemeSettingSchema: IConfigurationPropertySchema = {\n\ttype: 'boolean',\n\tmarkdownDescription: nls.localize('detectColorScheme', 'If set, automatically switch to the preferred color theme based on the OS appearance. If the OS appearance is dark, the theme specified at `#{0}#` is used, for light `#{1}#`', ThemeSettings.PREFERRED_DARK_THEME, ThemeSettings.PREFERRED_LIGHT_THEME),\n\tdefault: false\n};\n\nconst colorCustomizationsSchema: IConfigurationPropertySchema = {\n\ttype: 'object',\n\tdescription: nls.localize('workbenchColors', \"Overrides colors from the currently selected color theme.\"),\n\tallOf: [{ $ref: workbenchColorsSchemaId }],\n\tdefault: {},\n\tdefaultSnippets: [{\n\t\tbody: {\n\t\t}\n\t}]\n};\nconst fileIconThemeSettingSchema: IConfigurationPropertySchema = {\n\ttype: ['string', 'null'],\n\tdefault: DEFAULT_FILE_ICON_THEME_SETTING_VALUE,\n\tdescription: nls.localize('iconTheme', \"Specifies the file icon theme used in the workbench or 'null' to not show any file icons.\"),\n\tenum: [null],\n\tenumItemLabels: [nls.localize('noIconThemeLabel', 'None')],\n\tenumDescriptions: [nls.localize('noIconThemeDesc', 'No file icons')],\n\terrorMessage: nls.localize('iconThemeError', \"File icon theme is unknown or not installed.\")\n};\nconst productIconThemeSettingSchema: IConfigurationPropertySchema = {\n\ttype: ['string', 'null'],\n\tdefault: DEFAULT_PRODUCT_ICON_THEME_SETTING_VALUE,\n\tdescription: nls.localize('productIconTheme', \"Specifies the product icon theme used.\"),\n\tenum: [DEFAULT_PRODUCT_ICON_THEME_SETTING_VALUE],\n\tenumItemLabels: [nls.localize('defaultProductIconThemeLabel', 'Default')],\n\tenumDescriptions: [nls.localize('defaultProductIconThemeDesc', 'Default')],\n\terrorMessage: nls.localize('productIconThemeError', \"Product icon theme is unknown or not installed.\")\n};\n\nconst detectHCSchemeSettingSchema: IConfigurationPropertySchema = {\n\ttype: 'boolean',\n\tdefault: true,\n\tmarkdownDescription: nls.localize('autoDetectHighContrast', \"If enabled, will automatically change to high contrast theme if the OS is using a high contrast theme. The high contrast theme to use is specified by `#{0}#`\", ThemeSettings.PREFERRED_HC_THEME),\n\tscope: ConfigurationScope.APPLICATION\n};\n\nconst themeSettingsConfiguration: IConfigurationNode = {\n\tid: 'workbench',\n\torder: 7.1,\n\ttype: 'object',\n\tproperties: {\n\t\t[ThemeSettings.COLOR_THEME]: colorThemeSettingSchema,\n\t\t[ThemeSettings.PREFERRED_DARK_THEME]: preferredDarkThemeSettingSchema,\n\t\t[ThemeSettings.PREFERRED_LIGHT_THEME]: preferredLightThemeSettingSchema,\n\t\t[ThemeSettings.PREFERRED_HC_THEME]: preferredHCThemeSettingSchema,\n\t\t[ThemeSettings.FILE_ICON_THEME]: fileIconThemeSettingSchema,\n\t\t[ThemeSettings.COLOR_CUSTOMIZATIONS]: colorCustomizationsSchema,\n\t\t[ThemeSettings.PRODUCT_ICON_THEME]: productIconThemeSettingSchema\n\t}\n};\nconfigurationRegistry.registerConfiguration(themeSettingsConfiguration);\n\nconst themeSettingsWindowConfiguration: IConfigurationNode = {\n\tid: 'window',\n\torder: 8.1,\n\ttype: 'object',\n\tproperties: {\n\t\t[ThemeSettings.DETECT_HC]: detectHCSchemeSettingSchema,\n\t\t[ThemeSettings.DETECT_COLOR_SCHEME]: detectColorSchemeSettingSchema,\n\t}\n};\nconfigurationRegistry.registerConfiguration(themeSettingsWindowConfiguration);\n\nfunction tokenGroupSettings(description: string): IJSONSchema {\n\treturn {\n\t\tdescription,\n\t\t$ref: textmateColorGroupSchemaId\n\t};\n}\n\nconst tokenColorSchema: IJSONSchema = {\n\tproperties: {\n\t\tcomments: tokenGroupSettings(nls.localize('editorColors.comments', \"Sets the colors and styles for comments\")),\n\t\tstrings: tokenGroupSettings(nls.localize('editorColors.strings', \"Sets the colors and styles for strings literals.\")),\n\t\tkeywords: tokenGroupSettings(nls.localize('editorColors.keywords', \"Sets the colors and styles for keywords.\")),\n\t\tnumbers: tokenGroupSettings(nls.localize('editorColors.numbers', \"Sets the colors and styles for number literals.\")),\n\t\ttypes: tokenGroupSettings(nls.localize('editorColors.types', \"Sets the colors and styles for type declarations and references.\")),\n\t\tfunctions: tokenGroupSettings(nls.localize('editorColors.functions', \"Sets the colors and styles for functions declarations and references.\")),\n\t\tvariables: tokenGroupSettings(nls.localize('editorColors.variables', \"Sets the colors and styles for variables declarations and references.\")),\n\t\ttextMateRules: {\n\t\t\tdescription: nls.localize('editorColors.textMateRules', 'Sets colors and styles using textmate theming rules (advanced).'),\n\t\t\t$ref: textmateColorsSchemaId\n\t\t},\n\t\tsemanticHighlighting: {\n\t\t\tdescription: nls.localize('editorColors.semanticHighlighting', 'Whether semantic highlighting should be enabled for this theme.'),\n\t\t\tdeprecationMessage: nls.localize('editorColors.semanticHighlighting.deprecationMessage', 'Use `enabled` in `editor.semanticTokenColorCustomizations` setting instead.'),\n\t\t\tmarkdownDeprecationMessage: nls.localize('editorColors.semanticHighlighting.deprecationMessageMarkdown', 'Use `enabled` in `#editor.semanticTokenColorCustomizations#` setting instead.'),\n\t\t\ttype: 'boolean'\n\t\t}\n\t}\n};\n\nconst tokenColorCustomizationSchema: IConfigurationPropertySchema = {\n\tdescription: nls.localize('editorColors', \"Overrides editor syntax colors and font style from the currently selected color theme.\"),\n\tdefault: {},\n\tallOf: [tokenColorSchema]\n};\n\nconst semanticTokenColorSchema: IJSONSchema = {\n\ttype: 'object',\n\tproperties: {\n\t\tenabled: {\n\t\t\ttype: 'boolean',\n\t\t\tdescription: nls.localize('editorColors.semanticHighlighting.enabled', 'Whether semantic highlighting is enabled or disabled for this theme'),\n\t\t\tsuggestSortText: '0_enabled'\n\t\t},\n\t\trules: {\n\t\t\t$ref: tokenStylingSchemaId,\n\t\t\tdescription: nls.localize('editorColors.semanticHighlighting.rules', 'Semantic token styling rules for this theme.'),\n\t\t\tsuggestSortText: '0_rules'\n\t\t}\n\t},\n\tadditionalProperties: false\n};\n\nconst semanticTokenColorCustomizationSchema: IConfigurationPropertySchema = {\n\tdescription: nls.localize('semanticTokenColors', \"Overrides editor semantic token color and styles from the currently selected color theme.\"),\n\tdefault: {},\n\tallOf: [{ ...semanticTokenColorSchema, patternProperties: { '^\\\\[': {} } }]\n};\n\nconst experimentalTokenStylingCustomizationSchema: IConfigurationPropertySchema = {\n\tdeprecationMessage: nls.localize('editorColors.experimentalTokenStyling.deprecationMessage', 'Use `editor.semanticTokenColorCustomizations` instead.'),\n\tmarkdownDeprecationMessage: nls.localize('editorColors.experimentalTokenStyling.deprecationMessageMarkdown', 'Use `#editor.semanticTokenColorCustomizations#` instead.'),\n\tdefault: {},\n\tallOf: [{ $ref: tokenStylingSchemaId }],\n};\nconst tokenColorCustomizationConfiguration: IConfigurationNode = {\n\tid: 'editor',\n\torder: 7.2,\n\ttype: 'object',\n\tproperties: {\n\t\t[ThemeSettings.TOKEN_COLOR_CUSTOMIZATIONS]: tokenColorCustomizationSchema,\n\t\t[ThemeSettings.SEMANTIC_TOKEN_COLOR_CUSTOMIZATIONS]: semanticTokenColorCustomizationSchema,\n\t\t[ThemeSettings.TOKEN_COLOR_CUSTOMIZATIONS_EXPERIMENTAL]: experimentalTokenStylingCustomizationSchema\n\t}\n};\n\nconfigurationRegistry.registerConfiguration(tokenColorCustomizationConfiguration);\n\nexport function updateColorThemeConfigurationSchemas(themes: IWorkbenchColorTheme[]) {\n\t// updates enum for the 'workbench.colorTheme` setting\n\tcolorThemeSettingEnum.splice(0, colorThemeSettingEnum.length, ...themes.map(t => t.settingsId));\n\tcolorThemeSettingEnumDescriptions.splice(0, colorThemeSettingEnumDescriptions.length, ...themes.map(t => t.description || ''));\n\tcolorThemeSettingEnumItemLabels.splice(0, colorThemeSettingEnumItemLabels.length, ...themes.map(t => t.label || ''));\n\n\tconst themeSpecificWorkbenchColors: IJSONSchema = { properties: {} };\n\tconst themeSpecificTokenColors: IJSONSchema = { properties: {} };\n\tconst themeSpecificSemanticTokenColors: IJSONSchema = { properties: {} };\n\tconst experimentalThemeSpecificSemanticTokenColors: IJSONSchema = { properties: {} };\n\n\tconst workbenchColors = { $ref: workbenchColorsSchemaId, additionalProperties: false };\n\tconst tokenColors = { properties: tokenColorSchema.properties, additionalProperties: false };\n\tfor (let t of themes) {\n\t\t// add theme specific color customization (\"[Abyss]\":{ ... })\n\t\tconst themeId = `[${t.settingsId}]`;\n\t\tthemeSpecificWorkbenchColors.properties![themeId] = workbenchColors;\n\t\tthemeSpecificTokenColors.properties![themeId] = tokenColors;\n\t\tthemeSpecificSemanticTokenColors.properties![themeId] = semanticTokenColorSchema;\n\t\texperimentalThemeSpecificSemanticTokenColors.properties![themeId] = { $ref: tokenStylingSchemaId, additionalProperties: false };\n\t}\n\n\tcolorCustomizationsSchema.allOf![1] = themeSpecificWorkbenchColors;\n\ttokenColorCustomizationSchema.allOf![1] = themeSpecificTokenColors;\n\tsemanticTokenColorCustomizationSchema.allOf![1] = themeSpecificSemanticTokenColors;\n\texperimentalTokenStylingCustomizationSchema.allOf![1] = experimentalThemeSpecificSemanticTokenColors;\n\n\tconfigurationRegistry.notifyConfigurationSchemaUpdated(themeSettingsConfiguration, tokenColorCustomizationConfiguration);\n}\n\nexport function updateFileIconThemeConfigurationSchemas(themes: IWorkbenchFileIconTheme[]) {\n\tfileIconThemeSettingSchema.enum!.splice(1, Number.MAX_VALUE, ...themes.map(t => t.settingsId));\n\tfileIconThemeSettingSchema.enumItemLabels!.splice(1, Number.MAX_VALUE, ...themes.map(t => t.label));\n\tfileIconThemeSettingSchema.enumDescriptions!.splice(1, Number.MAX_VALUE, ...themes.map(t => t.description || ''));\n\n\tconfigurationRegistry.notifyConfigurationSchemaUpdated(themeSettingsConfiguration);\n}\n\nexport function updateProductIconThemeConfigurationSchemas(themes: IWorkbenchProductIconTheme[]) {\n\tproductIconThemeSettingSchema.enum!.splice(1, Number.MAX_VALUE, ...themes.map(t => t.settingsId));\n\tproductIconThemeSettingSchema.enumItemLabels!.splice(1, Number.MAX_VALUE, ...themes.map(t => t.label));\n\tproductIconThemeSettingSchema.enumDescriptions!.splice(1, Number.MAX_VALUE, ...themes.map(t => t.description || ''));\n\n\tconfigurationRegistry.notifyConfigurationSchemaUpdated(themeSettingsConfiguration);\n}\n\n\nexport class ThemeConfiguration {\n\tconstructor(private configurationService: IConfigurationService) {\n\t}\n\n\tpublic get colorTheme(): string {\n\t\treturn this.configurationService.getValue<string>(ThemeSettings.COLOR_THEME);\n\t}\n\n\tpublic get fileIconTheme(): string | null {\n\t\treturn this.configurationService.getValue<string | null>(ThemeSettings.FILE_ICON_THEME);\n\t}\n\n\tpublic get productIconTheme(): string {\n\t\treturn this.configurationService.getValue<string>(ThemeSettings.PRODUCT_ICON_THEME);\n\t}\n\n\tpublic get colorCustomizations(): IColorCustomizations {\n\t\treturn this.configurationService.getValue<IColorCustomizations>(ThemeSettings.COLOR_CUSTOMIZATIONS) || {};\n\t}\n\n\tpublic get tokenColorCustomizations(): ITokenColorCustomizations {\n\t\treturn this.configurationService.getValue<ITokenColorCustomizations>(ThemeSettings.TOKEN_COLOR_CUSTOMIZATIONS) || {};\n\t}\n\n\tpublic get semanticTokenColorCustomizations(): ISemanticTokenColorCustomizations | undefined {\n\t\treturn this.configurationService.getValue<ISemanticTokenColorCustomizations>(ThemeSettings.SEMANTIC_TOKEN_COLOR_CUSTOMIZATIONS);\n\t}\n\n\tpublic get experimentalSemanticTokenColorCustomizations(): IExperimentalSemanticTokenColorCustomizations | undefined {\n\t\treturn this.configurationService.getValue<IExperimentalSemanticTokenColorCustomizations>(ThemeSettings.TOKEN_COLOR_CUSTOMIZATIONS_EXPERIMENTAL);\n\t}\n\n\tpublic async setColorTheme(theme: IWorkbenchColorTheme, settingsTarget: ThemeSettingTarget): Promise<IWorkbenchColorTheme> {\n\t\tawait this.writeConfiguration(ThemeSettings.COLOR_THEME, theme.settingsId, settingsTarget);\n\t\treturn theme;\n\t}\n\n\tpublic async setFileIconTheme(theme: IWorkbenchFileIconTheme, settingsTarget: ThemeSettingTarget): Promise<IWorkbenchFileIconTheme> {\n\t\tawait this.writeConfiguration(ThemeSettings.FILE_ICON_THEME, theme.settingsId, settingsTarget);\n\t\treturn theme;\n\t}\n\n\tpublic async setProductIconTheme(theme: IWorkbenchProductIconTheme, settingsTarget: ThemeSettingTarget): Promise<IWorkbenchProductIconTheme> {\n\t\tawait this.writeConfiguration(ThemeSettings.PRODUCT_ICON_THEME, theme.settingsId, settingsTarget);\n\t\treturn theme;\n\t}\n\n\tpublic isDefaultColorTheme(): boolean {\n\t\tlet settings = this.configurationService.inspect(ThemeSettings.COLOR_THEME);\n\t\treturn settings && settings.default?.value === settings.value;\n\t}\n\n\tpublic findAutoConfigurationTarget(key: string) {\n\t\tlet settings = this.configurationService.inspect(key);\n\t\tif (!types.isUndefined(settings.workspaceFolderValue)) {\n\t\t\treturn ConfigurationTarget.WORKSPACE_FOLDER;\n\t\t} else if (!types.isUndefined(settings.workspaceValue)) {\n\t\t\treturn ConfigurationTarget.WORKSPACE;\n\t\t} else if (!types.isUndefined(settings.userRemote)) {\n\t\t\treturn ConfigurationTarget.USER_REMOTE;\n\t\t}\n\t\treturn ConfigurationTarget.USER;\n\t}\n\n\tprivate async writeConfiguration(key: string, value: any, settingsTarget: ThemeSettingTarget): Promise<void> {\n\t\tif (settingsTarget === undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet settings = this.configurationService.inspect(key);\n\t\tif (settingsTarget === 'auto') {\n\t\t\treturn this.configurationService.updateValue(key, value);\n\t\t}\n\n\t\tif (settingsTarget === ConfigurationTarget.USER) {\n\t\t\tif (value === settings.userValue) {\n\t\t\t\treturn Promise.resolve(undefined); // nothing to do\n\t\t\t} else if (value === settings.defaultValue) {\n\t\t\t\tif (types.isUndefined(settings.userValue)) {\n\t\t\t\t\treturn Promise.resolve(undefined); // nothing to do\n\t\t\t\t}\n\t\t\t\tvalue = undefined; // remove configuration from user settings\n\t\t\t}\n\t\t} else if (settingsTarget === ConfigurationTarget.WORKSPACE || settingsTarget === ConfigurationTarget.WORKSPACE_FOLDER || settingsTarget === ConfigurationTarget.USER_REMOTE) {\n\t\t\tif (value === settings.value) {\n\t\t\t\treturn Promise.resolve(undefined); // nothing to do\n\t\t\t}\n\t\t}\n\t\treturn this.configurationService.updateValue(key, value, settingsTarget);\n\t}\n}\n"]}