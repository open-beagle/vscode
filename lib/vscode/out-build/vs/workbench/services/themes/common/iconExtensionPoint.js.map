{"version":3,"sources":["vs/workbench/services/themes/common/iconExtensionPoint.ts"],"names":[],"mappings":"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","file":"iconExtensionPoint.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { ExtensionsRegistry } from 'vs/workbench/services/extensions/common/extensionsRegistry';\nimport { IIconRegistry, Extensions as IconRegistryExtensions, IconFontDefinition } from 'vs/platform/theme/common/iconRegistry';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { CSSIcon } from 'vs/base/common/codicons';\nimport { fontIdRegex } from 'vs/workbench/services/themes/common/productIconThemeSchema';\nimport * as resources from 'vs/base/common/resources';\nimport { IExtensionDescription } from 'vs/platform/extensions/common/extensions';\n\ninterface IIconExtensionPoint {\n\tid: string;\n\tdescription: string;\n\tdefault: { fontId: string; fontCharacter: string; } | string;\n}\n\ninterface IIconFontExtensionPoint {\n\tid: string;\n\tsrc: {\n\t\tpath: string;\n\t\tformat: string;\n\t}[];\n}\n\nconst iconRegistry: IIconRegistry = Registry.as<IIconRegistry>(IconRegistryExtensions.IconContribution);\n\nconst iconReferenceSchema = iconRegistry.getIconReferenceSchema();\nconst iconIdPattern = `^${CSSIcon.iconNameSegment}-(${CSSIcon.iconNameSegment})+`;\n\nconst iconConfigurationExtPoint = ExtensionsRegistry.registerExtensionPoint<IIconExtensionPoint[]>({\n\textensionPoint: 'icons',\n\tjsonSchema: {\n\t\tdescription: nls.localize('contributes.icons', 'Contributes extension defined themable icons'),\n\t\ttype: 'array',\n\t\titems: {\n\t\t\ttype: 'object',\n\t\t\tproperties: {\n\t\t\t\tid: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescription: nls.localize('contributes.icon.id', 'The identifier of the themable icon'),\n\t\t\t\t\tpattern: iconIdPattern,\n\t\t\t\t\tpatternErrorMessage: nls.localize('contributes.icon.id.format', 'Identifiers can only contain letters, digits and minuses and need to consist of at least two segments in the form `component-iconname`.'),\n\t\t\t\t},\n\t\t\t\tdescription: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescription: nls.localize('contributes.icon.description', 'The description of the themable icon'),\n\t\t\t\t},\n\t\t\t\tdefault: {\n\t\t\t\t\tanyOf: [\n\t\t\t\t\t\ticonReferenceSchema,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'object',\n\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\tfontId: {\n\t\t\t\t\t\t\t\t\tdescription: nls.localize('contributes.icon.default.fontId', 'The id of the icon font that defines the icon.'),\n\t\t\t\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tfontCharacter: {\n\t\t\t\t\t\t\t\t\tdescription: nls.localize('contributes.icon.default.fontCharacter', 'The character for the icon in the icon font.'),\n\t\t\t\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tdefaultSnippets: [{ body: { fontId: '${1:myIconFont}', fontCharacter: '${2:\\\\\\\\E001}' } }]\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\tdescription: nls.localize('contributes.icon.default', 'The default of the icon. Either a reference to an extisting ThemeIcon or an icon in an icon font.'),\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n});\n\nconst iconFontConfigurationExtPoint = ExtensionsRegistry.registerExtensionPoint<IIconFontExtensionPoint[]>({\n\textensionPoint: 'iconFonts',\n\tjsonSchema: {\n\t\tdescription: nls.localize('contributes.iconFonts', 'Contributes icon fonts to be used by icon contributions.'),\n\t\ttype: 'array',\n\t\titems: {\n\t\t\ttype: 'object',\n\t\t\tproperties: {\n\t\t\t\tid: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescription: nls.localize('contributes.iconFonts.id', 'The ID of the font.'),\n\t\t\t\t\tpattern: fontIdRegex,\n\t\t\t\t\tpatternErrorMessage: nls.localize('contributes.iconFonts.id.formatError', 'The ID must only contain letters, numbers, underscore and minus.')\n\t\t\t\t},\n\t\t\t\tsrc: {\n\t\t\t\t\ttype: 'array',\n\t\t\t\t\tdescription: nls.localize('contributes.iconFonts.src', 'The location of the font.'),\n\t\t\t\t\titems: {\n\t\t\t\t\t\ttype: 'object',\n\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\tpath: {\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdescription: nls.localize('contributes.iconFonts.src.path', 'The font path, relative to the current extension location.'),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tformat: {\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdescription: nls.localize('contributes.iconFonts.src.format', 'The format of the font.'),\n\t\t\t\t\t\t\t\tenum: ['woff', 'woff2', 'truetype', 'opentype', 'embedded-opentype', 'svg']\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\trequired: [\n\t\t\t\t\t\t\t'path',\n\t\t\t\t\t\t\t'format'\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n});\n\nexport class IconExtensionPoint {\n\n\tconstructor() {\n\t\ticonConfigurationExtPoint.setHandler((extensions, delta) => {\n\t\t\tfor (const extension of delta.added) {\n\t\t\t\tconst extensionValue = <IIconExtensionPoint[]>extension.value;\n\t\t\t\tconst collector = extension.collector;\n\n\t\t\t\tif (!extension.description.enableProposedApi) {\n\t\t\t\t\tcollector.error(nls.localize('invalid.icons.proposedAPI', \"'configuration.icons is a proposed contribution point and only available when running out of dev or with the following command line switch: --enable-proposed-api {0}\", extension.description.identifier.value));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!extensionValue || !Array.isArray(extensionValue)) {\n\t\t\t\t\tcollector.error(nls.localize('invalid.icons.configuration', \"'configuration.icons' must be a array\"));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (const iconContribution of extensionValue) {\n\t\t\t\t\tif (typeof iconContribution.id !== 'string' || iconContribution.id.length === 0) {\n\t\t\t\t\t\tcollector.error(nls.localize('invalid.icons.id', \"'configuration.icons.id' must be defined and can not be empty\"));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (!iconContribution.id.match(iconIdPattern)) {\n\t\t\t\t\t\tcollector.error(nls.localize('invalid.icons.id.format', \"'configuration.icons.id' can only contain letter, digits and minuses and need to consist of at least two segments in the form `component-iconname`.\"));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof iconContribution.description !== 'string' || iconContribution.id.length === 0) {\n\t\t\t\t\t\tcollector.error(nls.localize('invalid.icons.description', \"'configuration.icons.description' must be defined and can not be empty\"));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tlet defaultIcon = iconContribution.default;\n\t\t\t\t\tif (typeof defaultIcon === 'string') {\n\t\t\t\t\t\ticonRegistry.registerIcon(iconContribution.id, { id: defaultIcon }, iconContribution.description);\n\t\t\t\t\t} else if (typeof defaultIcon === 'object' && typeof defaultIcon.fontId === 'string' && typeof defaultIcon.fontCharacter === 'string') {\n\t\t\t\t\t\ticonRegistry.registerIcon(iconContribution.id, {\n\t\t\t\t\t\t\tfontId: getFontId(extension.description, defaultIcon.fontId),\n\t\t\t\t\t\t\tfontCharacter: defaultIcon.fontCharacter,\n\t\t\t\t\t\t}, iconContribution.description);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcollector.error(nls.localize('invalid.icons.default', \"'configuration.icons.default' must be either a reference to the id of an other theme icon (string) or a icon definition (object) with properties `fontId` and `fontCharacter`.\"));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const extension of delta.removed) {\n\t\t\t\tconst extensionValue = <IIconExtensionPoint[]>extension.value;\n\t\t\t\tfor (const iconContribution of extensionValue) {\n\t\t\t\t\ticonRegistry.deregisterIcon(iconContribution.id);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport class IconFontExtensionPoint {\n\n\tconstructor() {\n\t\ticonFontConfigurationExtPoint.setHandler((_extensions, delta) => {\n\t\t\tfor (const extension of delta.added) {\n\t\t\t\tconst extensionValue = <IIconFontExtensionPoint[]>extension.value;\n\t\t\t\tconst collector = extension.collector;\n\n\t\t\t\tif (!extension.description.enableProposedApi) {\n\t\t\t\t\tcollector.error(nls.localize('invalid.iconFonts.proposedAPI', \"'configuration.iconFonts is a proposed contribution point and only available when running out of dev or with the following command line switch: --enable-proposed-api {0}\", extension.description.identifier.value));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!extensionValue || !Array.isArray(extensionValue)) {\n\t\t\t\t\tcollector.error(nls.localize('invalid.iconFonts.configuration', \"'configuration.iconFonts' must be a array\"));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (const iconFontContribution of extensionValue) {\n\t\t\t\t\tif (typeof iconFontContribution.id !== 'string' || iconFontContribution.id.length === 0) {\n\t\t\t\t\t\tcollector.error(nls.localize('invalid.iconFonts.id', \"'configuration.iconFonts.id' must be defined and can not be empty\"));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (!iconFontContribution.id.match(fontIdRegex)) {\n\t\t\t\t\t\tcollector.error(nls.localize('invalid.iconFonts.id.format', \"'configuration.iconFonts.id'  must only contain letters, numbers, underscore and minus.\"));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (!Array.isArray(iconFontContribution.src) || !iconFontContribution.src.length) {\n\t\t\t\t\t\tcollector.error(nls.localize('invalid.iconFonts.src', \"'configuration.iconFonts.src' must be an array with locations of the icon font.\"));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst def: IconFontDefinition = { src: [] };\n\t\t\t\t\tfor (const src of iconFontContribution.src) {\n\t\t\t\t\t\tif (typeof src === 'object' && typeof src.path === 'string' && typeof src.format === 'string') {\n\t\t\t\t\t\t\tconst extensionLocation = extension.description.extensionLocation;\n\t\t\t\t\t\t\tconst iconFontLocation = resources.joinPath(extensionLocation, src.path);\n\t\t\t\t\t\t\tif (!resources.isEqualOrParent(iconFontLocation, extensionLocation)) {\n\t\t\t\t\t\t\t\tcollector.warn(nls.localize('invalid.iconFonts.src.path', \"Expected `contributes.iconFonts.src.path` ({0}) to be included inside extension's folder ({0}). This might make the extension non-portable.\", iconFontLocation.path, extensionLocation.path));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdef.src.push({\n\t\t\t\t\t\t\t\tlocation: iconFontLocation,\n\t\t\t\t\t\t\t\tformat: src.format,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcollector.error(nls.localize('invalid.iconFonts.src.item', \"Items of 'configuration.iconFonts.src' must be objects with properties 'path' and 'format'\"));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ticonRegistry.registerIconFont(getFontId(extension.description, iconFontContribution.id), def);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const extension of delta.removed) {\n\t\t\t\tconst extensionValue = <IIconFontExtensionPoint[]>extension.value;\n\t\t\t\tfor (const iconFontContribution of extensionValue) {\n\t\t\t\t\ticonRegistry.deregisterIconFont(getFontId(extension.description, iconFontContribution.id));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction getFontId(description: IExtensionDescription, fontId: string) {\n\treturn `${description.identifier.value}/${fontId}`;\n}\n"]}