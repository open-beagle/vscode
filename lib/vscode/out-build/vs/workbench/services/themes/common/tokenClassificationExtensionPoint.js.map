{"version":3,"sources":["vs/workbench/services/themes/common/tokenClassificationExtensionPoint.ts"],"names":[],"mappings":"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","file":"tokenClassificationExtensionPoint.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { ExtensionsRegistry, ExtensionMessageCollector } from 'vs/workbench/services/extensions/common/extensionsRegistry';\nimport { getTokenClassificationRegistry, ITokenClassificationRegistry, typeAndModifierIdPattern } from 'vs/platform/theme/common/tokenClassificationRegistry';\n\ninterface ITokenTypeExtensionPoint {\n\tid: string;\n\tdescription: string;\n\tsuperType?: string;\n}\n\ninterface ITokenModifierExtensionPoint {\n\tid: string;\n\tdescription: string;\n}\n\ninterface ITokenStyleDefaultExtensionPoint {\n\tlanguage?: string;\n\tscopes: { [selector: string]: string[] };\n}\n\nconst tokenClassificationRegistry: ITokenClassificationRegistry = getTokenClassificationRegistry();\n\nconst tokenTypeExtPoint = ExtensionsRegistry.registerExtensionPoint<ITokenTypeExtensionPoint[]>({\n\textensionPoint: 'semanticTokenTypes',\n\tjsonSchema: {\n\t\tdescription: nls.localize('contributes.semanticTokenTypes', 'Contributes semantic token types.'),\n\t\ttype: 'array',\n\t\titems: {\n\t\t\ttype: 'object',\n\t\t\tproperties: {\n\t\t\t\tid: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescription: nls.localize('contributes.semanticTokenTypes.id', 'The identifier of the semantic token type'),\n\t\t\t\t\tpattern: typeAndModifierIdPattern,\n\t\t\t\t\tpatternErrorMessage: nls.localize('contributes.semanticTokenTypes.id.format', 'Identifiers should be in the form letterOrDigit[_-letterOrDigit]*'),\n\t\t\t\t},\n\t\t\t\tsuperType: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescription: nls.localize('contributes.semanticTokenTypes.superType', 'The super type of the semantic token type'),\n\t\t\t\t\tpattern: typeAndModifierIdPattern,\n\t\t\t\t\tpatternErrorMessage: nls.localize('contributes.semanticTokenTypes.superType.format', 'Super types should be in the form letterOrDigit[_-letterOrDigit]*'),\n\t\t\t\t},\n\t\t\t\tdescription: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescription: nls.localize('contributes.color.description', 'The description of the semantic token type'),\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n});\n\nconst tokenModifierExtPoint = ExtensionsRegistry.registerExtensionPoint<ITokenModifierExtensionPoint[]>({\n\textensionPoint: 'semanticTokenModifiers',\n\tjsonSchema: {\n\t\tdescription: nls.localize('contributes.semanticTokenModifiers', 'Contributes semantic token modifiers.'),\n\t\ttype: 'array',\n\t\titems: {\n\t\t\ttype: 'object',\n\t\t\tproperties: {\n\t\t\t\tid: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescription: nls.localize('contributes.semanticTokenModifiers.id', 'The identifier of the semantic token modifier'),\n\t\t\t\t\tpattern: typeAndModifierIdPattern,\n\t\t\t\t\tpatternErrorMessage: nls.localize('contributes.semanticTokenModifiers.id.format', 'Identifiers should be in the form letterOrDigit[_-letterOrDigit]*')\n\t\t\t\t},\n\t\t\t\tdescription: {\n\t\t\t\t\tdescription: nls.localize('contributes.semanticTokenModifiers.description', 'The description of the semantic token modifier')\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n});\n\nconst tokenStyleDefaultsExtPoint = ExtensionsRegistry.registerExtensionPoint<ITokenStyleDefaultExtensionPoint[]>({\n\textensionPoint: 'semanticTokenScopes',\n\tjsonSchema: {\n\t\tdescription: nls.localize('contributes.semanticTokenScopes', 'Contributes semantic token scope maps.'),\n\t\ttype: 'array',\n\t\titems: {\n\t\t\ttype: 'object',\n\t\t\tproperties: {\n\t\t\t\tlanguage: {\n\t\t\t\t\tdescription: nls.localize('contributes.semanticTokenScopes.languages', 'Lists the languge for which the defaults are.'),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t},\n\t\t\t\tscopes: {\n\t\t\t\t\tdescription: nls.localize('contributes.semanticTokenScopes.scopes', 'Maps a semantic token (described by semantic token selector) to one or more textMate scopes used to represent that token.'),\n\t\t\t\t\ttype: 'object',\n\t\t\t\t\tadditionalProperties: {\n\t\t\t\t\t\ttype: 'array',\n\t\t\t\t\t\titems: {\n\t\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n});\n\n\nexport class TokenClassificationExtensionPoints {\n\n\tconstructor() {\n\t\tfunction validateTypeOrModifier(contribution: ITokenTypeExtensionPoint | ITokenModifierExtensionPoint, extensionPoint: string, collector: ExtensionMessageCollector): boolean {\n\t\t\tif (typeof contribution.id !== 'string' || contribution.id.length === 0) {\n\t\t\t\tcollector.error(nls.localize('invalid.id', \"'configuration.{0}.id' must be defined and can not be empty\", extensionPoint));\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (!contribution.id.match(typeAndModifierIdPattern)) {\n\t\t\t\tcollector.error(nls.localize('invalid.id.format', \"'configuration.{0}.id' must follow the pattern letterOrDigit[-_letterOrDigit]*\", extensionPoint));\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tconst superType = (contribution as ITokenTypeExtensionPoint).superType;\n\t\t\tif (superType && !superType.match(typeAndModifierIdPattern)) {\n\t\t\t\tcollector.error(nls.localize('invalid.superType.format', \"'configuration.{0}.superType' must follow the pattern letterOrDigit[-_letterOrDigit]*\", extensionPoint));\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (typeof contribution.description !== 'string' || contribution.id.length === 0) {\n\t\t\t\tcollector.error(nls.localize('invalid.description', \"'configuration.{0}.description' must be defined and can not be empty\", extensionPoint));\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\ttokenTypeExtPoint.setHandler((extensions, delta) => {\n\t\t\tfor (const extension of delta.added) {\n\t\t\t\tconst extensionValue = <ITokenTypeExtensionPoint[]>extension.value;\n\t\t\t\tconst collector = extension.collector;\n\n\t\t\t\tif (!extensionValue || !Array.isArray(extensionValue)) {\n\t\t\t\t\tcollector.error(nls.localize('invalid.semanticTokenTypeConfiguration', \"'configuration.semanticTokenType' must be an array\"));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tfor (const contribution of extensionValue) {\n\t\t\t\t\tif (validateTypeOrModifier(contribution, 'semanticTokenType', collector)) {\n\t\t\t\t\t\ttokenClassificationRegistry.registerTokenType(contribution.id, contribution.description, contribution.superType);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const extension of delta.removed) {\n\t\t\t\tconst extensionValue = <ITokenTypeExtensionPoint[]>extension.value;\n\t\t\t\tfor (const contribution of extensionValue) {\n\t\t\t\t\ttokenClassificationRegistry.deregisterTokenType(contribution.id);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\ttokenModifierExtPoint.setHandler((extensions, delta) => {\n\t\t\tfor (const extension of delta.added) {\n\t\t\t\tconst extensionValue = <ITokenModifierExtensionPoint[]>extension.value;\n\t\t\t\tconst collector = extension.collector;\n\n\t\t\t\tif (!extensionValue || !Array.isArray(extensionValue)) {\n\t\t\t\t\tcollector.error(nls.localize('invalid.semanticTokenModifierConfiguration', \"'configuration.semanticTokenModifier' must be an array\"));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tfor (const contribution of extensionValue) {\n\t\t\t\t\tif (validateTypeOrModifier(contribution, 'semanticTokenModifier', collector)) {\n\t\t\t\t\t\ttokenClassificationRegistry.registerTokenModifier(contribution.id, contribution.description);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const extension of delta.removed) {\n\t\t\t\tconst extensionValue = <ITokenModifierExtensionPoint[]>extension.value;\n\t\t\t\tfor (const contribution of extensionValue) {\n\t\t\t\t\ttokenClassificationRegistry.deregisterTokenModifier(contribution.id);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\ttokenStyleDefaultsExtPoint.setHandler((extensions, delta) => {\n\t\t\tfor (const extension of delta.added) {\n\t\t\t\tconst extensionValue = <ITokenStyleDefaultExtensionPoint[]>extension.value;\n\t\t\t\tconst collector = extension.collector;\n\n\t\t\t\tif (!extensionValue || !Array.isArray(extensionValue)) {\n\t\t\t\t\tcollector.error(nls.localize('invalid.semanticTokenScopes.configuration', \"'configuration.semanticTokenScopes' must be an array\"));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tfor (const contribution of extensionValue) {\n\t\t\t\t\tif (contribution.language && typeof contribution.language !== 'string') {\n\t\t\t\t\t\tcollector.error(nls.localize('invalid.semanticTokenScopes.language', \"'configuration.semanticTokenScopes.language' must be a string\"));\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (!contribution.scopes || typeof contribution.scopes !== 'object') {\n\t\t\t\t\t\tcollector.error(nls.localize('invalid.semanticTokenScopes.scopes', \"'configuration.semanticTokenScopes.scopes' must be defined as an object\"));\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tfor (let selectorString in contribution.scopes) {\n\t\t\t\t\t\tconst tmScopes = contribution.scopes[selectorString];\n\t\t\t\t\t\tif (!Array.isArray(tmScopes) || tmScopes.some(l => typeof l !== 'string')) {\n\t\t\t\t\t\t\tcollector.error(nls.localize('invalid.semanticTokenScopes.scopes.value', \"'configuration.semanticTokenScopes.scopes' values must be an array of strings\"));\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst selector = tokenClassificationRegistry.parseTokenSelector(selectorString, contribution.language);\n\t\t\t\t\t\t\ttokenClassificationRegistry.registerTokenStyleDefault(selector, { scopesToProbe: tmScopes.map(s => s.split(' ')) });\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tcollector.error(nls.localize('invalid.semanticTokenScopes.scopes.selector', \"configuration.semanticTokenScopes.scopes': Problems parsing selector {0}.\", selectorString));\n\t\t\t\t\t\t\t// invalid selector, ignore\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const extension of delta.removed) {\n\t\t\t\tconst extensionValue = <ITokenStyleDefaultExtensionPoint[]>extension.value;\n\t\t\t\tfor (const contribution of extensionValue) {\n\t\t\t\t\tfor (let selectorString in contribution.scopes) {\n\t\t\t\t\t\tconst tmScopes = contribution.scopes[selectorString];\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst selector = tokenClassificationRegistry.parseTokenSelector(selectorString, contribution.language);\n\t\t\t\t\t\t\ttokenClassificationRegistry.registerTokenStyleDefault(selector, { scopesToProbe: tmScopes.map(s => s.split(' ')) });\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t// invalid selector, ignore\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n\n\n\n"]}