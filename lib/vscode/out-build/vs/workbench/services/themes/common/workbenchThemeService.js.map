{"version":3,"file":"workbenchThemeService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/themes/common/workbenchThemeService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IASnF,QAAA,sBAAsB,GAAG,CAAA,GAAA,sCAAsB,CAAA,CAAwC,4BAAa,CAAC,CAAC;IAEtG,QAAA,cAAc,GAAG,IAAI,CAAC;IACtB,QAAA,aAAa,GAAG,SAAS,CAAC;IAC1B,QAAA,WAAW,GAAG,UAAU,CAAC;IAEzB,QAAA,WAAW,GAAG,uBAAuB,CAAC;IAEnD,IAAY,aAcX;IAdD,WAAY,aAAa;QACxB,qDAAoC,CAAA;QACpC,wDAAuC,CAAA;QACvC,kEAAiD,CAAA;QACjD,uEAAsD,CAAA;QACtD,+EAA8D,CAAA;QAC9D,gGAA+E,CAAA;QAC/E,wGAAuF,CAAA;QAEvF,2EAA0D,CAAA;QAC1D,6EAA4D,CAAA;QAC5D,iFAAgE,CAAA;QAChE,qEAAoD,CAAA;QACpD,4DAA2C,CAAA;IAC5C,CAAC,EAdW,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAcxB;IA0GD,IAAiB,aAAa,CAU7B;IAVD,WAAiB,aAAa;QAC7B,SAAgB,YAAY,CAAC,CAA4B;YACxD,OAAO,CAAC,IAAI,EAAE,YAAY,EAAE,CAAC,CAAC,WAAW,EAAE,mBAAmB,EAAE,CAAC,CAAC,kBAAkB,EAAE,cAAc,EAAE,CAAC,CAAC,aAAa,EAAE,mBAAmB,EAAE,CAAC,CAAC,kBAAkB,EAAE,CAAC;QACpK,CAAC;QAFe,0BAAY,eAE3B,CAAA;QACD,SAAgB,cAAc,CAAC,CAAM;YACpC,IAAI,CAAC,IAAI,CAAA,GAAA,gBAAQ,CAAA,CAAC,CAAC,CAAC,YAAY,CAAC,IAAI,CAAA,GAAA,iBAAS,CAAA,CAAC,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAA,GAAA,gBAAQ,CAAA,CAAC,CAAC,CAAC,cAAc,CAAC,IAAI,CAAA,GAAA,gBAAQ,CAAA,CAAC,CAAC,CAAC,mBAAmB,CAAC,EAAE;gBACvI,OAAO,EAAE,WAAW,EAAE,CAAC,CAAC,YAAY,EAAE,kBAAkB,EAAE,CAAC,CAAC,mBAAmB,EAAE,aAAa,EAAE,CAAC,CAAC,cAAc,EAAE,kBAAkB,EAAE,CAAC,CAAC,mBAAmB,EAAE,CAAC;aAC9J;YACD,OAAO,SAAS,CAAC;QAClB,CAAC;QALe,4BAAc,iBAK7B,CAAA;IACF,CAAC,EAVgB,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAU7B","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { refineServiceDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { Event } from 'vs/base/common/event';\nimport { Color } from 'vs/base/common/color';\nimport { IColorTheme, IThemeService, IFileIconTheme } from 'vs/platform/theme/common/themeService';\nimport { ConfigurationTarget } from 'vs/platform/configuration/common/configuration';\nimport { isBoolean, isString } from 'vs/base/common/types';\n\nexport const IWorkbenchThemeService = refineServiceDecorator<IThemeService, IWorkbenchThemeService>(IThemeService);\n\nexport const VS_LIGHT_THEME = 'vs';\nexport const VS_DARK_THEME = 'vs-dark';\nexport const VS_HC_THEME = 'hc-black';\n\nexport const HC_THEME_ID = 'Default High Contrast';\n\nexport enum ThemeSettings {\n\tCOLOR_THEME = 'workbench.colorTheme',\n\tFILE_ICON_THEME = 'workbench.iconTheme',\n\tPRODUCT_ICON_THEME = 'workbench.productIconTheme',\n\tCOLOR_CUSTOMIZATIONS = 'workbench.colorCustomizations',\n\tTOKEN_COLOR_CUSTOMIZATIONS = 'editor.tokenColorCustomizations',\n\tSEMANTIC_TOKEN_COLOR_CUSTOMIZATIONS = 'editor.semanticTokenColorCustomizations',\n\tTOKEN_COLOR_CUSTOMIZATIONS_EXPERIMENTAL = 'editor.tokenColorCustomizationsExperimental',\n\n\tPREFERRED_DARK_THEME = 'workbench.preferredDarkColorTheme',\n\tPREFERRED_LIGHT_THEME = 'workbench.preferredLightColorTheme',\n\tPREFERRED_HC_THEME = 'workbench.preferredHighContrastColorTheme',\n\tDETECT_COLOR_SCHEME = 'window.autoDetectColorScheme',\n\tDETECT_HC = 'window.autoDetectHighContrast'\n}\n\nexport interface IWorkbenchTheme {\n\treadonly id: string;\n\treadonly label: string;\n\treadonly extensionData?: ExtensionData;\n\treadonly description?: string;\n\treadonly settingsId: string | null;\n}\n\nexport interface IWorkbenchColorTheme extends IWorkbenchTheme, IColorTheme {\n\treadonly settingsId: string;\n\treadonly tokenColors: ITextMateThemingRule[];\n}\n\nexport interface IColorMap {\n\t[id: string]: Color;\n}\n\nexport interface IWorkbenchFileIconTheme extends IWorkbenchTheme, IFileIconTheme {\n}\n\nexport interface IWorkbenchProductIconTheme extends IWorkbenchTheme {\n\treadonly settingsId: string;\n}\n\nexport type ThemeSettingTarget = ConfigurationTarget | undefined | 'auto';\n\n\nexport interface IWorkbenchThemeService extends IThemeService {\n\treadonly _serviceBrand: undefined;\n\tsetColorTheme(themeId: string | undefined, settingsTarget: ThemeSettingTarget): Promise<IWorkbenchColorTheme | null>;\n\tgetColorTheme(): IWorkbenchColorTheme;\n\tgetColorThemes(): Promise<IWorkbenchColorTheme[]>;\n\tonDidColorThemeChange: Event<IWorkbenchColorTheme>;\n\trestoreColorTheme(): void;\n\n\tsetFileIconTheme(iconThemeId: string | undefined, settingsTarget: ThemeSettingTarget): Promise<IWorkbenchFileIconTheme>;\n\tgetFileIconTheme(): IWorkbenchFileIconTheme;\n\tgetFileIconThemes(): Promise<IWorkbenchFileIconTheme[]>;\n\tonDidFileIconThemeChange: Event<IWorkbenchFileIconTheme>;\n\n\tsetProductIconTheme(iconThemeId: string | undefined, settingsTarget: ThemeSettingTarget): Promise<IWorkbenchProductIconTheme>;\n\tgetProductIconTheme(): IWorkbenchProductIconTheme;\n\tgetProductIconThemes(): Promise<IWorkbenchProductIconTheme[]>;\n\tonDidProductIconThemeChange: Event<IWorkbenchProductIconTheme>;\n}\n\nexport interface IColorCustomizations {\n\t[colorIdOrThemeSettingsId: string]: string | IColorCustomizations;\n}\n\nexport interface ITokenColorCustomizations {\n\t[groupIdOrThemeSettingsId: string]: string | ITokenColorizationSetting | ITokenColorCustomizations | undefined | ITextMateThemingRule[] | boolean;\n\tcomments?: string | ITokenColorizationSetting;\n\tstrings?: string | ITokenColorizationSetting;\n\tnumbers?: string | ITokenColorizationSetting;\n\tkeywords?: string | ITokenColorizationSetting;\n\ttypes?: string | ITokenColorizationSetting;\n\tfunctions?: string | ITokenColorizationSetting;\n\tvariables?: string | ITokenColorizationSetting;\n\ttextMateRules?: ITextMateThemingRule[];\n\tsemanticHighlighting?: boolean; // deprecated, use ISemanticTokenColorCustomizations.enabled instead\n}\n\nexport interface ISemanticTokenColorCustomizations {\n\tenabled?: boolean;\n\trules?: ISemanticTokenRules;\n\t[styleRuleOrThemeSettingsId: string]: ISemanticTokenRules | ISemanticTokenColorCustomizations | boolean | undefined;\n}\n\nexport interface IExperimentalSemanticTokenColorCustomizations {\n\t[styleRuleOrThemeSettingsId: string]: ISemanticTokenRules | IExperimentalSemanticTokenColorCustomizations | undefined;\n}\n\nexport interface ISemanticTokenRules {\n\t[selector: string]: string | ISemanticTokenColorizationSetting | undefined;\n}\n\nexport interface ITextMateThemingRule {\n\tname?: string;\n\tscope?: string | string[];\n\tsettings: ITokenColorizationSetting;\n}\n\nexport interface ITokenColorizationSetting {\n\tforeground?: string;\n\tbackground?: string;\n\tfontStyle?: string; /* [italic|underline|bold] */\n}\n\nexport interface ISemanticTokenColorizationSetting {\n\tforeground?: string;\n\tfontStyle?: string; /* [italic|underline|bold] */\n\tbold?: boolean;\n\tunderline?: boolean;\n\titalic?: boolean;\n}\n\nexport interface ExtensionData {\n\textensionId: string;\n\textensionPublisher: string;\n\textensionName: string;\n\textensionIsBuiltin: boolean;\n}\n\nexport namespace ExtensionData {\n\texport function toJSONObject(d: ExtensionData | undefined): any {\n\t\treturn d && { _extensionId: d.extensionId, _extensionIsBuiltin: d.extensionIsBuiltin, _extensionName: d.extensionName, _extensionPublisher: d.extensionPublisher };\n\t}\n\texport function fromJSONObject(o: any): ExtensionData | undefined {\n\t\tif (o && isString(o._extensionId) && isBoolean(o._extensionIsBuiltin) && isString(o._extensionName) && isString(o._extensionPublisher)) {\n\t\t\treturn { extensionId: o._extensionId, extensionIsBuiltin: o._extensionIsBuiltin, extensionName: o._extensionName, extensionPublisher: o._extensionPublisher };\n\t\t}\n\t\treturn undefined;\n\t}\n}\n\nexport interface IThemeExtensionPoint {\n\tid: string;\n\tlabel?: string;\n\tdescription?: string;\n\tpath: string;\n\tuiTheme?: typeof VS_LIGHT_THEME | typeof VS_DARK_THEME | typeof VS_HC_THEME;\n\t_watch: boolean; // unsupported options to watch location\n}\n"]}