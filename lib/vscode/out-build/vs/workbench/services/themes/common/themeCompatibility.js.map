{"version":3,"file":"themeCompatibility.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/themes/common/themeCompatibility.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ITextMateThemingRule, IColorMap } from 'vs/workbench/services/themes/common/workbenchThemeService';\nimport { Color } from 'vs/base/common/color';\nimport * as colorRegistry from 'vs/platform/theme/common/colorRegistry';\n\nimport * as editorColorRegistry from 'vs/editor/common/view/editorColorRegistry';\n\nconst settingToColorIdMapping: { [settingId: string]: string[] } = {};\nfunction addSettingMapping(settingId: string, colorId: string) {\n\tlet colorIds = settingToColorIdMapping[settingId];\n\tif (!colorIds) {\n\t\tsettingToColorIdMapping[settingId] = colorIds = [];\n\t}\n\tcolorIds.push(colorId);\n}\n\nexport function convertSettings(oldSettings: ITextMateThemingRule[], result: { textMateRules: ITextMateThemingRule[], colors: IColorMap }): void {\n\tfor (let rule of oldSettings) {\n\t\tresult.textMateRules.push(rule);\n\t\tif (!rule.scope) {\n\t\t\tlet settings = rule.settings;\n\t\t\tif (!settings) {\n\t\t\t\trule.settings = {};\n\t\t\t} else {\n\t\t\t\tfor (const settingKey in settings) {\n\t\t\t\t\tconst key = <keyof typeof settings>settingKey;\n\t\t\t\t\tlet mappings = settingToColorIdMapping[key];\n\t\t\t\t\tif (mappings) {\n\t\t\t\t\t\tlet colorHex = settings[key];\n\t\t\t\t\t\tif (typeof colorHex === 'string') {\n\t\t\t\t\t\t\tlet color = Color.fromHex(colorHex);\n\t\t\t\t\t\t\tfor (let colorId of mappings) {\n\t\t\t\t\t\t\t\tresult.colors[colorId] = color;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (key !== 'foreground' && key !== 'background' && key !== 'fontStyle') {\n\t\t\t\t\t\tdelete settings[key];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\naddSettingMapping('background', colorRegistry.editorBackground);\naddSettingMapping('foreground', colorRegistry.editorForeground);\naddSettingMapping('selection', colorRegistry.editorSelectionBackground);\naddSettingMapping('inactiveSelection', colorRegistry.editorInactiveSelection);\naddSettingMapping('selectionHighlightColor', colorRegistry.editorSelectionHighlight);\naddSettingMapping('findMatchHighlight', colorRegistry.editorFindMatchHighlight);\naddSettingMapping('currentFindMatchHighlight', colorRegistry.editorFindMatch);\naddSettingMapping('hoverHighlight', colorRegistry.editorHoverHighlight);\naddSettingMapping('wordHighlight', 'editor.wordHighlightBackground'); // inlined to avoid editor/contrib dependenies\naddSettingMapping('wordHighlightStrong', 'editor.wordHighlightStrongBackground');\naddSettingMapping('findRangeHighlight', colorRegistry.editorFindRangeHighlight);\naddSettingMapping('findMatchHighlight', 'peekViewResult.matchHighlightBackground');\naddSettingMapping('referenceHighlight', 'peekViewEditor.matchHighlightBackground');\naddSettingMapping('lineHighlight', editorColorRegistry.editorLineHighlight);\naddSettingMapping('rangeHighlight', editorColorRegistry.editorRangeHighlight);\naddSettingMapping('caret', editorColorRegistry.editorCursorForeground);\naddSettingMapping('invisibles', editorColorRegistry.editorWhitespaces);\naddSettingMapping('guide', editorColorRegistry.editorIndentGuides);\naddSettingMapping('activeGuide', editorColorRegistry.editorActiveIndentGuides);\n\nconst ansiColorMap = ['ansiBlack', 'ansiRed', 'ansiGreen', 'ansiYellow', 'ansiBlue', 'ansiMagenta', 'ansiCyan', 'ansiWhite',\n\t'ansiBrightBlack', 'ansiBrightRed', 'ansiBrightGreen', 'ansiBrightYellow', 'ansiBrightBlue', 'ansiBrightMagenta', 'ansiBrightCyan', 'ansiBrightWhite'\n];\n\nfor (const color of ansiColorMap) {\n\taddSettingMapping(color, 'terminal.' + color);\n}\n"]}