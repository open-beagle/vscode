{"version":3,"file":"browserHostColorSchemeService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/themes/browser/browserHostColorSchemeService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAQhG,IAAa,6BAA6B,GAA1C,MAAa,6BAA8B,SAAQ,sBAAU;QAM5D,YACuC,kBAAgD;YAEtF,KAAK,EAAE,CAAC;YAF8B,uBAAkB,GAAlB,kBAAkB,CAA8B;YAHtE,4BAAuB,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,eAAO,EAAQ,CAAC,CAAC;YAO9E,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAC1B,CAAC;QAEO,iBAAiB;YAExB,MAAM,CAAC,UAAU,CAAC,8BAA8B,CAAC,CAAC,WAAW,CAAC,GAAG,EAAE;gBAClE,IAAI,CAAC,uBAAuB,CAAC,IAAI,EAAE,CAAC;YACrC,CAAC,CAAC,CAAC;YACH,MAAM,CAAC,UAAU,CAAC,yBAAyB,CAAC,CAAC,WAAW,CAAC,GAAG,EAAE;gBAC7D,IAAI,CAAC,uBAAuB,CAAC,IAAI,EAAE,CAAC;YACrC,CAAC,CAAC,CAAC;QACJ,CAAC;QAED,IAAI,sBAAsB;YACzB,OAAO,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC;QAC3C,CAAC;QAED,IAAI,IAAI;YACP,IAAI,MAAM,CAAC,UAAU,CAAC,+BAA+B,CAAC,CAAC,OAAO,EAAE;gBAC/D,OAAO,KAAK,CAAC;aACb;iBAAM,IAAI,MAAM,CAAC,UAAU,CAAC,8BAA8B,CAAC,CAAC,OAAO,EAAE;gBACrE,OAAO,IAAI,CAAC;aACZ;YACD,OAAO,IAAI,CAAC,kBAAkB,CAAC,aAAa,CAAC,WAAW,CAAC,IAAI,CAAC;QAC/D,CAAC;QAED,IAAI,YAAY;YACf,IAAI,MAAM,CAAC,UAAU,CAAC,yBAAyB,CAAC,CAAC,OAAO,EAAE;gBACzD,OAAO,IAAI,CAAC;aACZ;YACD,OAAO,IAAI,CAAC,kBAAkB,CAAC,aAAa,CAAC,WAAW,CAAC,YAAY,CAAC;QACvE,CAAC;KAED,CAAA;IA5CY,6BAA6B;QAOvC,WAAA,iDAA4B,CAAA;OAPlB,6BAA6B,CA4CzC;IA5CY,sEAA6B;IA8C1C,CAAA,GAAA,8BAAiB,CAAA,CAAC,gDAAuB,EAAE,6BAA6B,EAAE,IAAI,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { IHostColorSchemeService } from 'vs/workbench/services/themes/common/hostColorSchemeService';\n\nexport class BrowserHostColorSchemeService extends Disposable implements IHostColorSchemeService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidSchemeChangeEvent = this._register(new Emitter<void>());\n\n\tconstructor(\n\t\t@IWorkbenchEnvironmentService private environmentService: IWorkbenchEnvironmentService\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\twindow.matchMedia('(prefers-color-scheme: dark)').addListener(() => {\n\t\t\tthis._onDidSchemeChangeEvent.fire();\n\t\t});\n\t\twindow.matchMedia('(forced-colors: active)').addListener(() => {\n\t\t\tthis._onDidSchemeChangeEvent.fire();\n\t\t});\n\t}\n\n\tget onDidChangeColorScheme(): Event<void> {\n\t\treturn this._onDidSchemeChangeEvent.event;\n\t}\n\n\tget dark(): boolean {\n\t\tif (window.matchMedia(`(prefers-color-scheme: light)`).matches) {\n\t\t\treturn false;\n\t\t} else if (window.matchMedia(`(prefers-color-scheme: dark)`).matches) {\n\t\t\treturn true;\n\t\t}\n\t\treturn this.environmentService.configuration.colorScheme.dark;\n\t}\n\n\tget highContrast(): boolean {\n\t\tif (window.matchMedia(`(forced-colors: active)`).matches) {\n\t\t\treturn true;\n\t\t}\n\t\treturn this.environmentService.configuration.colorScheme.highContrast;\n\t}\n\n}\n\nregisterSingleton(IHostColorSchemeService, BrowserHostColorSchemeService, true);\n"]}