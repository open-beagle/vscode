{"version":3,"file":"sharedProcessService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/ipc/electron-sandbox/sharedProcessService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAgBhG,IAAa,oBAAoB,GAAjC,MAAa,oBAAqB,SAAQ,sBAAU;QAMnD,YACsC,iBAAqC,EAC5C,UAAuB,EACjB,gBAAmC;YAEvE,KAAK,EAAE,CAAC;YAJ6B,sBAAiB,GAAjB,iBAAiB,CAAoB;YAC5C,eAAU,GAAV,UAAU,CAAa;YACjB,qBAAgB,GAAhB,gBAAgB,CAAmB;YAIvE,IAAI,CAAC,2BAA2B,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;QACnD,CAAC;QAEO,KAAK,CAAC,OAAO;YACpB,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,iCAAiC,CAAC,CAAC;YAEzD,6DAA6D;YAC7D,4DAA4D;YAC5D,4DAA4D;YAC5D,0DAA0D;YAC1D,2DAA2D;YAC3D,iDAAiD;YACjD,+DAA+D;YAC/D,oBAAoB;YACpB,MAAM,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,kBAAyB,EAAE,CAAA,GAAA,eAAO,CAAA,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAEzF,CAAA,GAAA,kBAAI,CAAA,CAAC,+BAA+B,CAAC,CAAC;YAEtC,kDAAkD;YAClD,iDAAiD;YACjD,MAAM,KAAK,GAAG,CAAA,GAAA,mBAAY,CAAA,EAAE,CAAC;YAC7B,wBAAc,CAAC,OAAO,CAAC,0CAA0C,EAAE,gDAAgD,EAAE,KAAK,CAAC,CAAC;YAE5H,0DAA0D;YAC1D,uDAAuD;YACvD,yBAAyB;YACzB,MAAM,sBAAsB,GAAG,aAAK,CAAC,mBAAmB,CAAwD,MAAM,EAAE,SAAS,EAAE,CAAC,CAAe,EAAE,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACjN,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,aAAK,CAAC,SAAS,CAAC,aAAK,CAAC,IAAI,CAAC,aAAK,CAAC,MAAM,CAAC,sBAAsB,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,KAAK,KAAK,IAAI,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC,CAAC,CAAC;YAExI,CAAA,GAAA,kBAAI,CAAA,CAAC,8BAA8B,CAAC,CAAC;YACrC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,yDAAyD,CAAC,CAAC;YAEjF,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,eAAiB,CAAC,IAAI,EAAE,UAAU,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;QACjG,CAAC;QAED,UAAU,CAAC,WAAmB;YAC7B,OAAO,CAAA,GAAA,uBAAiB,CAAA,CAAC,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;QACnH,CAAC;QAED,eAAe,CAAC,WAAmB,EAAE,OAA+B;YACnE,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,UAAU,CAAC,eAAe,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC,CAAC;QACvG,CAAC;KACD,CAAA;IAvDY,oBAAoB;QAO9B,WAAA,2BAAkB,CAAA;QAClB,WAAA,iBAAW,CAAA;QACX,WAAA,6BAAiB,CAAA;OATP,oBAAoB,CAuDhC;IAvDY,oDAAoB;IAyDjC,CAAA,GAAA,8BAAiB,CAAA,CAAC,gCAAqB,EAAE,oBAAoB,EAAE,IAAI,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { ipcMessagePort } from 'vs/base/parts/sandbox/electron-sandbox/globals';\nimport { Client as MessagePortClient } from 'vs/base/parts/ipc/common/ipc.mp';\nimport { IChannel, IServerChannel, getDelayedChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { INativeHostService } from 'vs/platform/native/electron-sandbox/native';\nimport { generateUuid } from 'vs/base/common/uuid';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { ISharedProcessService } from 'vs/platform/ipc/electron-sandbox/services';\nimport { mark } from 'vs/base/common/performance';\nimport { ILifecycleService, LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { timeout } from 'vs/base/common/async';\n\nexport class SharedProcessService extends Disposable implements ISharedProcessService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly withSharedProcessConnection: Promise<MessagePortClient>;\n\n\tconstructor(\n\t\t@INativeHostService private readonly nativeHostService: INativeHostService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@ILifecycleService private readonly lifecycleService: ILifecycleService\n\t) {\n\t\tsuper();\n\n\t\tthis.withSharedProcessConnection = this.connect();\n\t}\n\n\tprivate async connect(): Promise<MessagePortClient> {\n\t\tthis.logService.trace('Renderer->SharedProcess#connect');\n\n\t\t// Our performance tests show that a connection to the shared\n\t\t// process can have significant overhead to the startup time\n\t\t// of the window because the shared process could be created\n\t\t// as a result. As such, make sure we await the `Restored`\n\t\t// phase before making a connection attempt, but also add a\n\t\t// timeout to be safe against possible deadlocks.\n\t\t// TODO@sandbox revisit this when the shared process connection\n\t\t// is more cruicial.\n\t\tawait Promise.race([this.lifecycleService.when(LifecyclePhase.Restored), timeout(2000)]);\n\n\t\tmark('code/willConnectSharedProcess');\n\n\t\t// Ask to create message channel inside the window\n\t\t// and send over a UUID to correlate the response\n\t\tconst nonce = generateUuid();\n\t\tipcMessagePort.connect('vscode:createSharedProcessMessageChannel', 'vscode:createSharedProcessMessageChannelResult', nonce);\n\n\t\t// Wait until the main side has returned the `MessagePort`\n\t\t// We need to filter by the `nonce` to ensure we listen\n\t\t// to the right response.\n\t\tconst onMessageChannelResult = Event.fromDOMEventEmitter<{ nonce: string, port: MessagePort, source: unknown }>(window, 'message', (e: MessageEvent) => ({ nonce: e.data, port: e.ports[0], source: e.source }));\n\t\tconst { port } = await Event.toPromise(Event.once(Event.filter(onMessageChannelResult, e => e.nonce === nonce && e.source === window)));\n\n\t\tmark('code/didConnectSharedProcess');\n\t\tthis.logService.trace('Renderer->SharedProcess#connect: connection established');\n\n\t\treturn this._register(new MessagePortClient(port, `window:${this.nativeHostService.windowId}`));\n\t}\n\n\tgetChannel(channelName: string): IChannel {\n\t\treturn getDelayedChannel(this.withSharedProcessConnection.then(connection => connection.getChannel(channelName)));\n\t}\n\n\tregisterChannel(channelName: string, channel: IServerChannel<string>): void {\n\t\tthis.withSharedProcessConnection.then(connection => connection.registerChannel(channelName, channel));\n\t}\n}\n\nregisterSingleton(ISharedProcessService, SharedProcessService, true);\n"]}