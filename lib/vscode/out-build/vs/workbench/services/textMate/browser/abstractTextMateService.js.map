{"version":3,"sources":["vs/workbench/services/textMate/browser/abstractTextMateService.ts"],"names":[],"mappings":"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","file":"abstractTextMateService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport * as dom from 'vs/base/browser/dom';\nimport { Color } from 'vs/base/common/color';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport * as resources from 'vs/base/common/resources';\nimport * as types from 'vs/base/common/types';\nimport { equals as equalArray } from 'vs/base/common/arrays';\nimport { URI } from 'vs/base/common/uri';\nimport { TokenizationResult, TokenizationResult2 } from 'vs/editor/common/core/token';\nimport { IState, ITokenizationSupport, LanguageId, TokenMetadata, TokenizationRegistry, StandardTokenType, LanguageIdentifier } from 'vs/editor/common/modes';\nimport { nullTokenize2 } from 'vs/editor/common/modes/nullMode';\nimport { generateTokensCSSForColorMap } from 'vs/editor/common/modes/supports/tokenization';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { INotificationService, Severity } from 'vs/platform/notification/common/notification';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { ExtensionMessageCollector } from 'vs/workbench/services/extensions/common/extensionsRegistry';\nimport { ITMSyntaxExtensionPoint, grammarsExtPoint } from 'vs/workbench/services/textMate/common/TMGrammars';\nimport { ITextMateService } from 'vs/workbench/services/textMate/common/textMateService';\nimport { ITextMateThemingRule, IWorkbenchThemeService, IWorkbenchColorTheme } from 'vs/workbench/services/themes/common/workbenchThemeService';\nimport type { IGrammar, StackElement, IOnigLib, IRawTheme } from 'vscode-textmate';\nimport { Disposable, IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IValidGrammarDefinition, IValidEmbeddedLanguagesMap, IValidTokenTypeMap } from 'vs/workbench/services/textMate/common/TMScopeRegistry';\nimport { TMGrammarFactory } from 'vs/workbench/services/textMate/common/TMGrammarFactory';\nimport { IExtensionResourceLoaderService } from 'vs/workbench/services/extensionResourceLoader/common/extensionResourceLoader';\nimport { IProgressService, ProgressLocation } from 'vs/platform/progress/common/progress';\n\nexport abstract class AbstractTextMateService extends Disposable implements ITextMateService {\n\tpublic _serviceBrand: undefined;\n\n\tprivate readonly _onDidEncounterLanguage: Emitter<LanguageId> = this._register(new Emitter<LanguageId>());\n\tpublic readonly onDidEncounterLanguage: Event<LanguageId> = this._onDidEncounterLanguage.event;\n\n\tprivate readonly _styleElement: HTMLStyleElement;\n\tprivate readonly _createdModes: string[];\n\tprivate readonly _encounteredLanguages: boolean[];\n\n\tprivate _debugMode: boolean;\n\tprivate _debugModePrintFunc: (str: string) => void;\n\n\tprivate _grammarDefinitions: IValidGrammarDefinition[] | null;\n\tprivate _grammarFactory: TMGrammarFactory | null;\n\tprivate _tokenizersRegistrations: IDisposable[];\n\tprotected _currentTheme: IRawTheme | null;\n\tprotected _currentTokenColorMap: string[] | null;\n\n\tconstructor(\n\t\t@IModeService private readonly _modeService: IModeService,\n\t\t@IWorkbenchThemeService private readonly _themeService: IWorkbenchThemeService,\n\t\t@IExtensionResourceLoaderService protected readonly _extensionResourceLoaderService: IExtensionResourceLoaderService,\n\t\t@INotificationService private readonly _notificationService: INotificationService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@IStorageService private readonly _storageService: IStorageService,\n\t\t@IProgressService private readonly _progressService: IProgressService\n\t) {\n\t\tsuper();\n\t\tthis._styleElement = dom.createStyleSheet();\n\t\tthis._styleElement.className = 'vscode-tokens-styles';\n\t\tthis._createdModes = [];\n\t\tthis._encounteredLanguages = [];\n\n\t\tthis._debugMode = false;\n\t\tthis._debugModePrintFunc = () => { };\n\n\t\tthis._grammarDefinitions = null;\n\t\tthis._grammarFactory = null;\n\t\tthis._tokenizersRegistrations = [];\n\n\t\tthis._currentTheme = null;\n\t\tthis._currentTokenColorMap = null;\n\n\t\tgrammarsExtPoint.setHandler((extensions) => {\n\t\t\tthis._grammarDefinitions = null;\n\t\t\tif (this._grammarFactory) {\n\t\t\t\tthis._grammarFactory.dispose();\n\t\t\t\tthis._grammarFactory = null;\n\t\t\t\tthis._onDidDisposeGrammarFactory();\n\t\t\t}\n\t\t\tthis._tokenizersRegistrations = dispose(this._tokenizersRegistrations);\n\n\t\t\tthis._grammarDefinitions = [];\n\t\t\tfor (const extension of extensions) {\n\t\t\t\tconst grammars = extension.value;\n\t\t\t\tfor (const grammar of grammars) {\n\t\t\t\t\tif (!this._validateGrammarExtensionPoint(extension.description.extensionLocation, grammar, extension.collector)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tconst grammarLocation = resources.joinPath(extension.description.extensionLocation, grammar.path);\n\n\t\t\t\t\tconst embeddedLanguages: IValidEmbeddedLanguagesMap = Object.create(null);\n\t\t\t\t\tif (grammar.embeddedLanguages) {\n\t\t\t\t\t\tlet scopes = Object.keys(grammar.embeddedLanguages);\n\t\t\t\t\t\tfor (let i = 0, len = scopes.length; i < len; i++) {\n\t\t\t\t\t\t\tlet scope = scopes[i];\n\t\t\t\t\t\t\tlet language = grammar.embeddedLanguages[scope];\n\t\t\t\t\t\t\tif (typeof language !== 'string') {\n\t\t\t\t\t\t\t\t// never hurts to be too careful\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlet languageIdentifier = this._modeService.getLanguageIdentifier(language);\n\t\t\t\t\t\t\tif (languageIdentifier) {\n\t\t\t\t\t\t\t\tembeddedLanguages[scope] = languageIdentifier.id;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst tokenTypes: IValidTokenTypeMap = Object.create(null);\n\t\t\t\t\tif (grammar.tokenTypes) {\n\t\t\t\t\t\tconst scopes = Object.keys(grammar.tokenTypes);\n\t\t\t\t\t\tfor (const scope of scopes) {\n\t\t\t\t\t\t\tconst tokenType = grammar.tokenTypes[scope];\n\t\t\t\t\t\t\tswitch (tokenType) {\n\t\t\t\t\t\t\t\tcase 'string':\n\t\t\t\t\t\t\t\t\ttokenTypes[scope] = StandardTokenType.String;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 'other':\n\t\t\t\t\t\t\t\t\ttokenTypes[scope] = StandardTokenType.Other;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 'comment':\n\t\t\t\t\t\t\t\t\ttokenTypes[scope] = StandardTokenType.Comment;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tlet languageIdentifier: LanguageIdentifier | null = null;\n\t\t\t\t\tif (grammar.language) {\n\t\t\t\t\t\tlanguageIdentifier = this._modeService.getLanguageIdentifier(grammar.language);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._grammarDefinitions.push({\n\t\t\t\t\t\tlocation: grammarLocation,\n\t\t\t\t\t\tlanguage: languageIdentifier ? languageIdentifier.id : undefined,\n\t\t\t\t\t\tscopeName: grammar.scopeName,\n\t\t\t\t\t\tembeddedLanguages: embeddedLanguages,\n\t\t\t\t\t\ttokenTypes: tokenTypes,\n\t\t\t\t\t\tinjectTo: grammar.injectTo,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const createMode of this._createdModes) {\n\t\t\t\tthis._registerDefinitionIfAvailable(createMode);\n\t\t\t}\n\t\t});\n\n\t\tthis._register(this._themeService.onDidColorThemeChange(() => {\n\t\t\tif (this._grammarFactory) {\n\t\t\t\tthis._updateTheme(this._grammarFactory, this._themeService.getColorTheme(), false);\n\t\t\t}\n\t\t}));\n\n\t\t// Generate some color map until the grammar registry is loaded\n\t\tlet colorTheme = this._themeService.getColorTheme();\n\t\tlet defaultForeground: Color = Color.transparent;\n\t\tlet defaultBackground: Color = Color.transparent;\n\t\tfor (let i = 0, len = colorTheme.tokenColors.length; i < len; i++) {\n\t\t\tlet rule = colorTheme.tokenColors[i];\n\t\t\tif (!rule.scope && rule.settings) {\n\t\t\t\tif (rule.settings.foreground) {\n\t\t\t\t\tdefaultForeground = Color.fromHex(rule.settings.foreground);\n\t\t\t\t}\n\t\t\t\tif (rule.settings.background) {\n\t\t\t\t\tdefaultBackground = Color.fromHex(rule.settings.background);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tTokenizationRegistry.setColorMap([null!, defaultForeground, defaultBackground]);\n\n\t\tthis._modeService.onDidCreateMode((mode) => {\n\t\t\tlet modeId = mode.getId();\n\t\t\tthis._createdModes.push(modeId);\n\t\t\tthis._registerDefinitionIfAvailable(modeId);\n\t\t});\n\t}\n\n\tpublic startDebugMode(printFn: (str: string) => void, onStop: () => void): void {\n\t\tif (this._debugMode) {\n\t\t\tthis._notificationService.error(nls.localize('alreadyDebugging', \"Already Logging.\"));\n\t\t\treturn;\n\t\t}\n\n\t\tthis._debugModePrintFunc = printFn;\n\t\tthis._debugMode = true;\n\n\t\tif (this._debugMode) {\n\t\t\tthis._progressService.withProgress(\n\t\t\t\t{\n\t\t\t\t\tlocation: ProgressLocation.Notification,\n\t\t\t\t\tbuttons: [nls.localize('stop', \"Stop\")]\n\t\t\t\t},\n\t\t\t\t(progress) => {\n\t\t\t\t\tprogress.report({\n\t\t\t\t\t\tmessage: nls.localize('progress1', \"Preparing to log TM Grammar parsing. Press Stop when finished.\")\n\t\t\t\t\t});\n\n\t\t\t\t\treturn this._getVSCodeOniguruma().then((vscodeOniguruma) => {\n\t\t\t\t\t\tvscodeOniguruma.setDefaultDebugCall(true);\n\t\t\t\t\t\tprogress.report({\n\t\t\t\t\t\t\tmessage: nls.localize('progress2', \"Now logging TM Grammar parsing. Press Stop when finished.\")\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn new Promise<void>((resolve, reject) => { });\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\t(choice) => {\n\t\t\t\t\tthis._getVSCodeOniguruma().then((vscodeOniguruma) => {\n\t\t\t\t\t\tthis._debugModePrintFunc = () => { };\n\t\t\t\t\t\tthis._debugMode = false;\n\t\t\t\t\t\tvscodeOniguruma.setDefaultDebugCall(false);\n\t\t\t\t\t\tonStop();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate _canCreateGrammarFactory(): boolean {\n\t\t// Check if extension point is ready\n\t\treturn (this._grammarDefinitions ? true : false);\n\t}\n\n\tprivate async _getOrCreateGrammarFactory(): Promise<TMGrammarFactory> {\n\t\tif (this._grammarFactory) {\n\t\t\treturn this._grammarFactory;\n\t\t}\n\n\t\tconst [vscodeTextmate, vscodeOniguruma] = await Promise.all([import('vscode-textmate'), this._getVSCodeOniguruma()]);\n\t\tconst onigLib: Promise<IOnigLib> = Promise.resolve({\n\t\t\tcreateOnigScanner: (sources: string[]) => vscodeOniguruma.createOnigScanner(sources),\n\t\t\tcreateOnigString: (str: string) => vscodeOniguruma.createOnigString(str)\n\t\t});\n\n\t\t// Avoid duplicate instantiations\n\t\tif (this._grammarFactory) {\n\t\t\treturn this._grammarFactory;\n\t\t}\n\n\t\tthis._grammarFactory = new TMGrammarFactory({\n\t\t\tlogTrace: (msg: string) => this._logService.trace(msg),\n\t\t\tlogError: (msg: string, err: any) => this._logService.error(msg, err),\n\t\t\treadFile: (resource: URI) => this._extensionResourceLoaderService.readExtensionResource(resource)\n\t\t}, this._grammarDefinitions || [], vscodeTextmate, onigLib);\n\t\tthis._onDidCreateGrammarFactory(this._grammarDefinitions || []);\n\n\t\tthis._updateTheme(this._grammarFactory, this._themeService.getColorTheme(), true);\n\n\t\treturn this._grammarFactory;\n\t}\n\n\tprivate _registerDefinitionIfAvailable(modeId: string): void {\n\t\tconst languageIdentifier = this._modeService.getLanguageIdentifier(modeId);\n\t\tif (!languageIdentifier) {\n\t\t\treturn;\n\t\t}\n\t\tif (!this._canCreateGrammarFactory()) {\n\t\t\treturn;\n\t\t}\n\t\tconst languageId = languageIdentifier.id;\n\n\t\t// Here we must register the promise ASAP (without yielding!)\n\t\tthis._tokenizersRegistrations.push(TokenizationRegistry.registerPromise(modeId, (async () => {\n\t\t\ttry {\n\t\t\t\tconst grammarFactory = await this._getOrCreateGrammarFactory();\n\t\t\t\tif (!grammarFactory.has(languageId)) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tconst r = await grammarFactory.createGrammar(languageId);\n\t\t\t\tif (!r.grammar) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tconst tokenization = new TMTokenization(r.grammar, r.initialState, r.containsEmbeddedLanguages);\n\t\t\t\ttokenization.onDidEncounterLanguage((languageId) => {\n\t\t\t\t\tif (!this._encounteredLanguages[languageId]) {\n\t\t\t\t\t\tthis._encounteredLanguages[languageId] = true;\n\t\t\t\t\t\tthis._onDidEncounterLanguage.fire(languageId);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn new TMTokenizationSupport(r.languageId, tokenization, this._notificationService, this._configurationService, this._storageService);\n\t\t\t} catch (err) {\n\t\t\t\tonUnexpectedError(err);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t})()));\n\t}\n\n\tprivate static _toColorMap(colorMap: string[]): Color[] {\n\t\tlet result: Color[] = [null!];\n\t\tfor (let i = 1, len = colorMap.length; i < len; i++) {\n\t\t\tresult[i] = Color.fromHex(colorMap[i]);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate _updateTheme(grammarFactory: TMGrammarFactory, colorTheme: IWorkbenchColorTheme, forceUpdate: boolean): void {\n\t\tif (!forceUpdate && this._currentTheme && this._currentTokenColorMap && AbstractTextMateService.equalsTokenRules(this._currentTheme.settings, colorTheme.tokenColors) && equalArray(this._currentTokenColorMap, colorTheme.tokenColorMap)) {\n\t\t\treturn;\n\t\t}\n\t\tthis._currentTheme = { name: colorTheme.label, settings: colorTheme.tokenColors };\n\t\tthis._currentTokenColorMap = colorTheme.tokenColorMap;\n\t\tthis._doUpdateTheme(grammarFactory, this._currentTheme, this._currentTokenColorMap);\n\t}\n\n\tprotected _doUpdateTheme(grammarFactory: TMGrammarFactory, theme: IRawTheme, tokenColorMap: string[]): void {\n\t\tgrammarFactory.setTheme(theme, tokenColorMap);\n\t\tlet colorMap = AbstractTextMateService._toColorMap(tokenColorMap);\n\t\tlet cssRules = generateTokensCSSForColorMap(colorMap);\n\t\tthis._styleElement.textContent = cssRules;\n\t\tTokenizationRegistry.setColorMap(colorMap);\n\t}\n\n\tprivate static equalsTokenRules(a: ITextMateThemingRule[] | null, b: ITextMateThemingRule[] | null): boolean {\n\t\tif (!b || !a || b.length !== a.length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let i = b.length - 1; i >= 0; i--) {\n\t\t\tlet r1 = b[i];\n\t\t\tlet r2 = a[i];\n\t\t\tif (r1.scope !== r2.scope) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet s1 = r1.settings;\n\t\t\tlet s2 = r2.settings;\n\t\t\tif (s1 && s2) {\n\t\t\t\tif (s1.fontStyle !== s2.fontStyle || s1.foreground !== s2.foreground || s1.background !== s2.background) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else if (!s1 || !s2) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate _validateGrammarExtensionPoint(extensionLocation: URI, syntax: ITMSyntaxExtensionPoint, collector: ExtensionMessageCollector): boolean {\n\t\tif (syntax.language && ((typeof syntax.language !== 'string') || !this._modeService.isRegisteredMode(syntax.language))) {\n\t\t\tcollector.error(nls.localize('invalid.language', \"Unknown language in `contributes.{0}.language`. Provided value: {1}\", grammarsExtPoint.name, String(syntax.language)));\n\t\t\treturn false;\n\t\t}\n\t\tif (!syntax.scopeName || (typeof syntax.scopeName !== 'string')) {\n\t\t\tcollector.error(nls.localize('invalid.scopeName', \"Expected string in `contributes.{0}.scopeName`. Provided value: {1}\", grammarsExtPoint.name, String(syntax.scopeName)));\n\t\t\treturn false;\n\t\t}\n\t\tif (!syntax.path || (typeof syntax.path !== 'string')) {\n\t\t\tcollector.error(nls.localize('invalid.path.0', \"Expected string in `contributes.{0}.path`. Provided value: {1}\", grammarsExtPoint.name, String(syntax.path)));\n\t\t\treturn false;\n\t\t}\n\t\tif (syntax.injectTo && (!Array.isArray(syntax.injectTo) || syntax.injectTo.some(scope => typeof scope !== 'string'))) {\n\t\t\tcollector.error(nls.localize('invalid.injectTo', \"Invalid value in `contributes.{0}.injectTo`. Must be an array of language scope names. Provided value: {1}\", grammarsExtPoint.name, JSON.stringify(syntax.injectTo)));\n\t\t\treturn false;\n\t\t}\n\t\tif (syntax.embeddedLanguages && !types.isObject(syntax.embeddedLanguages)) {\n\t\t\tcollector.error(nls.localize('invalid.embeddedLanguages', \"Invalid value in `contributes.{0}.embeddedLanguages`. Must be an object map from scope name to language. Provided value: {1}\", grammarsExtPoint.name, JSON.stringify(syntax.embeddedLanguages)));\n\t\t\treturn false;\n\t\t}\n\n\t\tif (syntax.tokenTypes && !types.isObject(syntax.tokenTypes)) {\n\t\t\tcollector.error(nls.localize('invalid.tokenTypes', \"Invalid value in `contributes.{0}.tokenTypes`. Must be an object map from scope name to token type. Provided value: {1}\", grammarsExtPoint.name, JSON.stringify(syntax.tokenTypes)));\n\t\t\treturn false;\n\t\t}\n\n\t\tconst grammarLocation = resources.joinPath(extensionLocation, syntax.path);\n\t\tif (!resources.isEqualOrParent(grammarLocation, extensionLocation)) {\n\t\t\tcollector.warn(nls.localize('invalid.path.1', \"Expected `contributes.{0}.path` ({1}) to be included inside extension's folder ({2}). This might make the extension non-portable.\", grammarsExtPoint.name, grammarLocation.path, extensionLocation.path));\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic async createGrammar(modeId: string): Promise<IGrammar | null> {\n\t\tconst languageId = this._modeService.getLanguageIdentifier(modeId);\n\t\tif (!languageId) {\n\t\t\treturn null;\n\t\t}\n\t\tconst grammarFactory = await this._getOrCreateGrammarFactory();\n\t\tif (!grammarFactory.has(languageId.id)) {\n\t\t\treturn null;\n\t\t}\n\t\tconst { grammar } = await grammarFactory.createGrammar(languageId.id);\n\t\treturn grammar;\n\t}\n\n\tprotected _onDidCreateGrammarFactory(grammarDefinitions: IValidGrammarDefinition[]): void {\n\t}\n\n\tprotected _onDidDisposeGrammarFactory(): void {\n\t}\n\n\tprivate _vscodeOniguruma: Promise<typeof import('vscode-oniguruma')> | null = null;\n\tprivate _getVSCodeOniguruma(): Promise<typeof import('vscode-oniguruma')> {\n\t\tif (!this._vscodeOniguruma) {\n\t\t\tthis._vscodeOniguruma = this._doGetVSCodeOniguruma();\n\t\t}\n\t\treturn this._vscodeOniguruma;\n\t}\n\n\tprivate async _doGetVSCodeOniguruma(): Promise<typeof import('vscode-oniguruma')> {\n\t\tconst [vscodeOniguruma, wasm] = await Promise.all([import('vscode-oniguruma'), this._loadVSCodeOnigurumWASM()]);\n\t\tconst options = {\n\t\t\tdata: wasm,\n\t\t\tprint: (str: string) => {\n\t\t\t\tthis._debugModePrintFunc(str);\n\t\t\t}\n\t\t};\n\t\tawait vscodeOniguruma.loadWASM(options);\n\t\treturn vscodeOniguruma;\n\t}\n\n\tprotected abstract _loadVSCodeOnigurumWASM(): Promise<Response | ArrayBuffer>;\n}\n\nconst donotAskUpdateKey = 'editor.maxTokenizationLineLength.donotask';\n\nclass TMTokenizationSupport implements ITokenizationSupport {\n\tprivate readonly _languageId: LanguageId;\n\tprivate readonly _actual: TMTokenization;\n\tprivate _tokenizationWarningAlreadyShown: boolean;\n\tprivate _maxTokenizationLineLength: number;\n\n\tconstructor(\n\t\tlanguageId: LanguageId,\n\t\tactual: TMTokenization,\n\t\t@INotificationService private readonly _notificationService: INotificationService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@IStorageService private readonly _storageService: IStorageService\n\t) {\n\t\tthis._languageId = languageId;\n\t\tthis._actual = actual;\n\t\tthis._tokenizationWarningAlreadyShown = !!(this._storageService.getBoolean(donotAskUpdateKey, StorageScope.GLOBAL));\n\t\tthis._maxTokenizationLineLength = this._configurationService.getValue<number>('editor.maxTokenizationLineLength');\n\t\tthis._configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration('editor.maxTokenizationLineLength')) {\n\t\t\t\tthis._maxTokenizationLineLength = this._configurationService.getValue<number>('editor.maxTokenizationLineLength');\n\t\t\t}\n\t\t});\n\t}\n\n\tgetInitialState(): IState {\n\t\treturn this._actual.getInitialState();\n\t}\n\n\ttokenize(line: string, hasEOL: boolean, state: IState, offsetDelta: number): TokenizationResult {\n\t\tthrow new Error('Not supported!');\n\t}\n\n\ttokenize2(line: string, hasEOL: boolean, state: StackElement, offsetDelta: number): TokenizationResult2 {\n\t\tif (offsetDelta !== 0) {\n\t\t\tthrow new Error('Unexpected: offsetDelta should be 0.');\n\t\t}\n\n\t\t// Do not attempt to tokenize if a line is too long\n\t\tif (line.length >= this._maxTokenizationLineLength) {\n\t\t\tif (!this._tokenizationWarningAlreadyShown) {\n\t\t\t\tthis._tokenizationWarningAlreadyShown = true;\n\t\t\t\tthis._notificationService.prompt(\n\t\t\t\t\tSeverity.Warning,\n\t\t\t\t\tnls.localize('too many characters', \"Tokenization is skipped for long lines for performance reasons. The length of a long line can be configured via `editor.maxTokenizationLineLength`.\"),\n\t\t\t\t\t[{\n\t\t\t\t\t\tlabel: nls.localize('neverAgain', \"Don't Show Again\"),\n\t\t\t\t\t\tisSecondary: true,\n\t\t\t\t\t\trun: () => this._storageService.store(donotAskUpdateKey, true, StorageScope.GLOBAL, StorageTarget.USER)\n\t\t\t\t\t}]\n\t\t\t\t);\n\t\t\t}\n\t\t\tconsole.log(`Line (${line.substr(0, 15)}...): longer than ${this._maxTokenizationLineLength} characters, tokenization skipped.`);\n\t\t\treturn nullTokenize2(this._languageId, line, state, offsetDelta);\n\t\t}\n\n\t\treturn this._actual.tokenize2(line, state);\n\t}\n}\n\nclass TMTokenization extends Disposable {\n\n\tprivate readonly _grammar: IGrammar;\n\tprivate readonly _containsEmbeddedLanguages: boolean;\n\tprivate readonly _seenLanguages: boolean[];\n\tprivate readonly _initialState: StackElement;\n\n\tprivate readonly _onDidEncounterLanguage: Emitter<LanguageId> = this._register(new Emitter<LanguageId>());\n\tpublic readonly onDidEncounterLanguage: Event<LanguageId> = this._onDidEncounterLanguage.event;\n\n\tconstructor(grammar: IGrammar, initialState: StackElement, containsEmbeddedLanguages: boolean) {\n\t\tsuper();\n\t\tthis._grammar = grammar;\n\t\tthis._initialState = initialState;\n\t\tthis._containsEmbeddedLanguages = containsEmbeddedLanguages;\n\t\tthis._seenLanguages = [];\n\t}\n\n\tpublic getInitialState(): IState {\n\t\treturn this._initialState;\n\t}\n\n\tpublic tokenize2(line: string, state: StackElement): TokenizationResult2 {\n\t\tlet textMateResult = this._grammar.tokenizeLine2(line, state);\n\n\t\tif (this._containsEmbeddedLanguages) {\n\t\t\tlet seenLanguages = this._seenLanguages;\n\t\t\tlet tokens = textMateResult.tokens;\n\n\t\t\t// Must check if any of the embedded languages was hit\n\t\t\tfor (let i = 0, len = (tokens.length >>> 1); i < len; i++) {\n\t\t\t\tlet metadata = tokens[(i << 1) + 1];\n\t\t\t\tlet languageId = TokenMetadata.getLanguageId(metadata);\n\n\t\t\t\tif (!seenLanguages[languageId]) {\n\t\t\t\t\tseenLanguages[languageId] = true;\n\t\t\t\t\tthis._onDidEncounterLanguage.fire(languageId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet endState: StackElement;\n\t\t// try to save an object if possible\n\t\tif (state.equals(textMateResult.ruleStack)) {\n\t\t\tendState = state;\n\t\t} else {\n\t\t\tendState = textMateResult.ruleStack;\n\n\t\t}\n\n\t\treturn new TokenizationResult2(textMateResult.tokens, endState);\n\t}\n}\n"]}