{"version":3,"file":"textMateService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/textMate/browser/textMateService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAehG,IAAa,eAAe,GAA5B,MAAa,eAAgB,SAAQ,iDAAuB;QAE3D,YACe,WAAyB,EACf,YAAoC,EAC3B,8BAA+D,EAC1E,mBAAyC,EAClD,UAAuB,EACb,oBAA2C,EACjD,cAA+B,EAC9B,eAAiC;YAEnD,KAAK,CAAC,WAAW,EAAE,YAAY,EAAE,8BAA8B,EAAE,mBAAmB,EAAE,UAAU,EAAE,oBAAoB,EAAE,cAAc,EAAE,eAAe,CAAC,CAAC;QAC1J,CAAC;QAES,KAAK,CAAC,uBAAuB;YACtC,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,oBAAU,CAAC,YAAY,CAAC,+BAA+B,EAAE,OAAO,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;YAC/G,8FAA8F;YAC9F,sEAAsE;YACtE,kDAAkD;YAClD,OAAO,MAAM,QAAQ,CAAC,WAAW,EAAE,CAAC;QACrC,CAAC;KACD,CAAA;IAtBY,eAAe;QAGzB,WAAA,0BAAY,CAAA;QACZ,WAAA,8CAAsB,CAAA;QACtB,WAAA,yDAA+B,CAAA;QAC/B,WAAA,mCAAoB,CAAA;QACpB,WAAA,iBAAW,CAAA;QACX,WAAA,qCAAqB,CAAA;QACrB,WAAA,yBAAe,CAAA;QACf,WAAA,2BAAgB,CAAA;OAVN,eAAe,CAsB3B;IAtBY,0CAAe;IAwB5B,CAAA,GAAA,8BAAiB,CAAA,CAAC,kCAAgB,EAAE,eAAe,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ITextMateService } from 'vs/workbench/services/textMate/common/textMateService';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { AbstractTextMateService } from 'vs/workbench/services/textMate/browser/abstractTextMateService';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { IWorkbenchThemeService } from 'vs/workbench/services/themes/common/workbenchThemeService';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { IExtensionResourceLoaderService } from 'vs/workbench/services/extensionResourceLoader/common/extensionResourceLoader';\nimport { IProgressService } from 'vs/platform/progress/common/progress';\nimport { FileAccess } from 'vs/base/common/network';\n\nexport class TextMateService extends AbstractTextMateService {\n\n\tconstructor(\n\t\t@IModeService modeService: IModeService,\n\t\t@IWorkbenchThemeService themeService: IWorkbenchThemeService,\n\t\t@IExtensionResourceLoaderService extensionResourceLoaderService: IExtensionResourceLoaderService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@ILogService logService: ILogService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IProgressService progressService: IProgressService\n\t) {\n\t\tsuper(modeService, themeService, extensionResourceLoaderService, notificationService, logService, configurationService, storageService, progressService);\n\t}\n\n\tprotected async _loadVSCodeOnigurumWASM(): Promise<Response | ArrayBuffer> {\n\t\tconst response = await fetch(FileAccess.asBrowserUri('vscode-oniguruma/../onig.wasm', require).toString(true));\n\t\t// Using the response directly only works if the server sets the MIME type 'application/wasm'.\n\t\t// Otherwise, a TypeError is thrown when using the streaming compiler.\n\t\t// We therefore use the non-streaming compiler :(.\n\t\treturn await response.arrayBuffer();\n\t}\n}\n\nregisterSingleton(ITextMateService, TextMateService);\n"]}