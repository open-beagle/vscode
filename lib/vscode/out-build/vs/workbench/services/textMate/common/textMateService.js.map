{"version":3,"file":"textMateService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/textMate/common/textMateService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAMnF,QAAA,gBAAgB,GAAG,CAAA,GAAA,+BAAe,CAAA,CAAmB,iBAAiB,CAAC,CAAC;IAYrF,iFAAiF;IAEjF,IAAkB,iBAKjB;IALD,WAAkB,iBAAiB;QAClC,2DAAS,CAAA;QACT,+DAAW,CAAA;QACX,6DAAU,CAAA;QACV,2DAAS,CAAA;IACV,CAAC,EALiB,iBAAiB,GAAjB,yBAAiB,KAAjB,yBAAiB,QAKlC;IA4BD;;;;;;;;;;;;;;;;;;;OAmBG;IACH,IAAkB,cAWjB;IAXD,WAAkB,cAAc;QAC/B,2EAAqB,CAAA;QACrB,4EAAsB,CAAA;QACtB,6EAAuB,CAAA;QACvB,+EAAyB,CAAA;QACzB,kFAA4B,CAAA;QAC5B,6EAAqB,CAAA;QACrB,6EAAqB,CAAA;QACrB,8EAAsB,CAAA;QACtB,8EAAsB,CAAA;QACtB,8EAAsB,CAAA;IACvB,CAAC,EAXiB,cAAc,GAAd,sBAAc,KAAd,sBAAc,QAW/B;;AA4BD,qFAAqF","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { LanguageId } from 'vs/editor/common/modes';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\n\nexport const ITextMateService = createDecorator<ITextMateService>('textMateService');\n\nexport interface ITextMateService {\n\treadonly _serviceBrand: undefined;\n\n\tonDidEncounterLanguage: Event<LanguageId>;\n\n\tcreateGrammar(modeId: string): Promise<IGrammar | null>;\n\n\tstartDebugMode(printFn: (str: string) => void, onStop: () => void): void;\n}\n\n// -------------- Types \"liberated\" from vscode-textmate due to usage in /common/\n\nexport const enum StandardTokenType {\n\tOther = 0,\n\tComment = 1,\n\tString = 2,\n\tRegEx = 4,\n}\n/**\n * A grammar\n */\nexport interface IGrammar {\n\t/**\n\t * Tokenize `lineText` using previous line state `prevState`.\n\t */\n\ttokenizeLine(lineText: string, prevState: StackElement | null): ITokenizeLineResult;\n\t/**\n\t * Tokenize `lineText` using previous line state `prevState`.\n\t * The result contains the tokens in binary format, resolved with the following information:\n\t *  - language\n\t *  - token type (regex, string, comment, other)\n\t *  - font style\n\t *  - foreground color\n\t *  - background color\n\t * e.g. for getting the languageId: `(metadata & MetadataConsts.LANGUAGEID_MASK) >>> MetadataConsts.LANGUAGEID_OFFSET`\n\t */\n\ttokenizeLine2(lineText: string, prevState: StackElement | null): ITokenizeLineResult2;\n}\nexport interface ITokenizeLineResult {\n\treadonly tokens: IToken[];\n\t/**\n\t * The `prevState` to be passed on to the next line tokenization.\n\t */\n\treadonly ruleStack: StackElement;\n}\n/**\n * Helpers to manage the \"collapsed\" metadata of an entire StackElement stack.\n * The following assumptions have been made:\n *  - languageId < 256 => needs 8 bits\n *  - unique color count < 512 => needs 9 bits\n *\n * The binary format is:\n * - -------------------------------------------\n *     3322 2222 2222 1111 1111 1100 0000 0000\n *     1098 7654 3210 9876 5432 1098 7654 3210\n * - -------------------------------------------\n *     xxxx xxxx xxxx xxxx xxxx xxxx xxxx xxxx\n *     bbbb bbbb bfff ffff ffFF FTTT LLLL LLLL\n * - -------------------------------------------\n *  - L = LanguageId (8 bits)\n *  - T = StandardTokenType (3 bits)\n *  - F = FontStyle (3 bits)\n *  - f = foreground color (9 bits)\n *  - b = background color (9 bits)\n */\nexport const enum MetadataConsts {\n\tLANGUAGEID_MASK = 255,\n\tTOKEN_TYPE_MASK = 1792,\n\tFONT_STYLE_MASK = 14336,\n\tFOREGROUND_MASK = 8372224,\n\tBACKGROUND_MASK = 4286578688,\n\tLANGUAGEID_OFFSET = 0,\n\tTOKEN_TYPE_OFFSET = 8,\n\tFONT_STYLE_OFFSET = 11,\n\tFOREGROUND_OFFSET = 14,\n\tBACKGROUND_OFFSET = 23,\n}\nexport interface ITokenizeLineResult2 {\n\t/**\n\t * The tokens in binary format. Each token occupies two array indices. For token i:\n\t *  - at offset 2*i => startIndex\n\t *  - at offset 2*i + 1 => metadata\n\t *\n\t */\n\treadonly tokens: Uint32Array;\n\t/**\n\t * The `prevState` to be passed on to the next line tokenization.\n\t */\n\treadonly ruleStack: StackElement;\n}\nexport interface IToken {\n\tstartIndex: number;\n\treadonly endIndex: number;\n\treadonly scopes: string[];\n}\n/**\n * **IMPORTANT** - Immutable!\n */\nexport interface StackElement {\n\t_stackElementBrand: void;\n\treadonly depth: number;\n\tclone(): StackElement;\n\tequals(other: StackElement): boolean;\n}\n// -------------- End Types \"liberated\" from vscode-textmate due to usage in /common/\n"]}