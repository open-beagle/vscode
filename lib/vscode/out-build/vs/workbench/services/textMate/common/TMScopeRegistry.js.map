{"version":3,"file":"TMScopeRegistry.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/textMate/common/TMScopeRegistry.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAwBhG,MAAa,eAAgB,SAAQ,sBAAU;QAI9C;YACC,KAAK,EAAE,CAAC;YACR,IAAI,CAAC,gCAAgC,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC7D,CAAC;QAEM,KAAK;YACX,IAAI,CAAC,gCAAgC,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC7D,CAAC;QAEM,QAAQ,CAAC,GAA4B;YAC3C,IAAI,IAAI,CAAC,gCAAgC,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;gBACzD,MAAM,oBAAoB,GAAG,IAAI,CAAC,gCAAgC,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;gBAClF,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,oBAAoB,CAAC,QAAQ,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAE;oBACpE,OAAO,CAAC,IAAI,CACX,4DAA4D,GAAG,CAAC,SAAS,KAAK;wBAC9E,qBAAqB,oBAAoB,CAAC,QAAQ,CAAC,QAAQ,EAAE,KAAK;wBAClE,qBAAqB,GAAG,CAAC,QAAQ,CAAC,QAAQ,EAAE,EAAE,CAC9C,CAAC;iBACF;aACD;YACD,IAAI,CAAC,gCAAgC,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,GAAG,CAAC;QAC5D,CAAC;QAEM,oBAAoB,CAAC,SAAiB;YAC5C,OAAO,IAAI,CAAC,gCAAgC,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC;QACjE,CAAC;KACD;IA9BD,0CA8BC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as resources from 'vs/base/common/resources';\nimport { URI } from 'vs/base/common/uri';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { StandardTokenType, LanguageId } from 'vs/editor/common/modes';\n\nexport interface IValidGrammarDefinition {\n\tlocation: URI;\n\tlanguage?: LanguageId;\n\tscopeName: string;\n\tembeddedLanguages: IValidEmbeddedLanguagesMap;\n\ttokenTypes: IValidTokenTypeMap;\n\tinjectTo?: string[];\n}\n\nexport interface IValidTokenTypeMap {\n\t[selector: string]: StandardTokenType;\n}\n\nexport interface IValidEmbeddedLanguagesMap {\n\t[scopeName: string]: LanguageId;\n}\n\nexport class TMScopeRegistry extends Disposable {\n\n\tprivate _scopeNameToLanguageRegistration: { [scopeName: string]: IValidGrammarDefinition; };\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis._scopeNameToLanguageRegistration = Object.create(null);\n\t}\n\n\tpublic reset(): void {\n\t\tthis._scopeNameToLanguageRegistration = Object.create(null);\n\t}\n\n\tpublic register(def: IValidGrammarDefinition): void {\n\t\tif (this._scopeNameToLanguageRegistration[def.scopeName]) {\n\t\t\tconst existingRegistration = this._scopeNameToLanguageRegistration[def.scopeName];\n\t\t\tif (!resources.isEqual(existingRegistration.location, def.location)) {\n\t\t\t\tconsole.warn(\n\t\t\t\t\t`Overwriting grammar scope name to file mapping for scope ${def.scopeName}.\\n` +\n\t\t\t\t\t`Old grammar file: ${existingRegistration.location.toString()}.\\n` +\n\t\t\t\t\t`New grammar file: ${def.location.toString()}`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tthis._scopeNameToLanguageRegistration[def.scopeName] = def;\n\t}\n\n\tpublic getGrammarDefinition(scopeName: string): IValidGrammarDefinition | null {\n\t\treturn this._scopeNameToLanguageRegistration[scopeName] || null;\n\t}\n}\n"]}