{"version":3,"sources":["vs/workbench/services/textMate/common/TMGrammarFactory.ts"],"names":[],"mappings":"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","file":"TMGrammarFactory.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { URI } from 'vs/base/common/uri';\nimport { LanguageId } from 'vs/editor/common/modes';\nimport type { IGrammar, Registry, StackElement, IRawTheme, IOnigLib } from 'vscode-textmate';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { TMScopeRegistry, IValidGrammarDefinition, IValidEmbeddedLanguagesMap } from 'vs/workbench/services/textMate/common/TMScopeRegistry';\n\ninterface ITMGrammarFactoryHost {\n\tlogTrace(msg: string): void;\n\tlogError(msg: string, err: any): void;\n\treadFile(resource: URI): Promise<string>;\n}\n\nexport interface ICreateGrammarResult {\n\tlanguageId: LanguageId;\n\tgrammar: IGrammar | null;\n\tinitialState: StackElement;\n\tcontainsEmbeddedLanguages: boolean;\n}\n\nexport class TMGrammarFactory extends Disposable {\n\n\tprivate readonly _host: ITMGrammarFactoryHost;\n\tprivate readonly _initialState: StackElement;\n\tprivate readonly _scopeRegistry: TMScopeRegistry;\n\tprivate readonly _injections: { [scopeName: string]: string[]; };\n\tprivate readonly _injectedEmbeddedLanguages: { [scopeName: string]: IValidEmbeddedLanguagesMap[]; };\n\tprivate readonly _languageToScope2: string[];\n\tprivate readonly _grammarRegistry: Registry;\n\n\tconstructor(host: ITMGrammarFactoryHost, grammarDefinitions: IValidGrammarDefinition[], vscodeTextmate: typeof import('vscode-textmate'), onigLib: Promise<IOnigLib>) {\n\t\tsuper();\n\t\tthis._host = host;\n\t\tthis._initialState = vscodeTextmate.INITIAL;\n\t\tthis._scopeRegistry = this._register(new TMScopeRegistry());\n\t\tthis._injections = {};\n\t\tthis._injectedEmbeddedLanguages = {};\n\t\tthis._languageToScope2 = [];\n\t\tthis._grammarRegistry = this._register(new vscodeTextmate.Registry({\n\t\t\tonigLib: onigLib,\n\t\t\tloadGrammar: async (scopeName: string) => {\n\t\t\t\tconst grammarDefinition = this._scopeRegistry.getGrammarDefinition(scopeName);\n\t\t\t\tif (!grammarDefinition) {\n\t\t\t\t\tthis._host.logTrace(`No grammar found for scope ${scopeName}`);\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tconst location = grammarDefinition.location;\n\t\t\t\ttry {\n\t\t\t\t\tconst content = await this._host.readFile(location);\n\t\t\t\t\treturn vscodeTextmate.parseRawGrammar(content, location.path);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthis._host.logError(`Unable to load and parse grammar for scope ${scopeName} from ${location}`, e);\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t},\n\t\t\tgetInjections: (scopeName: string) => {\n\t\t\t\tconst scopeParts = scopeName.split('.');\n\t\t\t\tlet injections: string[] = [];\n\t\t\t\tfor (let i = 1; i <= scopeParts.length; i++) {\n\t\t\t\t\tconst subScopeName = scopeParts.slice(0, i).join('.');\n\t\t\t\t\tinjections = [...injections, ...(this._injections[subScopeName] || [])];\n\t\t\t\t}\n\t\t\t\treturn injections;\n\t\t\t}\n\t\t}));\n\n\t\tfor (const validGrammar of grammarDefinitions) {\n\t\t\tthis._scopeRegistry.register(validGrammar);\n\n\t\t\tif (validGrammar.injectTo) {\n\t\t\t\tfor (let injectScope of validGrammar.injectTo) {\n\t\t\t\t\tlet injections = this._injections[injectScope];\n\t\t\t\t\tif (!injections) {\n\t\t\t\t\t\tthis._injections[injectScope] = injections = [];\n\t\t\t\t\t}\n\t\t\t\t\tinjections.push(validGrammar.scopeName);\n\t\t\t\t}\n\n\t\t\t\tif (validGrammar.embeddedLanguages) {\n\t\t\t\t\tfor (let injectScope of validGrammar.injectTo) {\n\t\t\t\t\t\tlet injectedEmbeddedLanguages = this._injectedEmbeddedLanguages[injectScope];\n\t\t\t\t\t\tif (!injectedEmbeddedLanguages) {\n\t\t\t\t\t\t\tthis._injectedEmbeddedLanguages[injectScope] = injectedEmbeddedLanguages = [];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tinjectedEmbeddedLanguages.push(validGrammar.embeddedLanguages);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (validGrammar.language) {\n\t\t\t\tthis._languageToScope2[validGrammar.language] = validGrammar.scopeName;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic has(languageId: LanguageId): boolean {\n\t\treturn this._languageToScope2[languageId] ? true : false;\n\t}\n\n\tpublic setTheme(theme: IRawTheme, colorMap: string[]): void {\n\t\tthis._grammarRegistry.setTheme(theme, colorMap);\n\t}\n\n\tpublic getColorMap(): string[] {\n\t\treturn this._grammarRegistry.getColorMap();\n\t}\n\n\tpublic async createGrammar(languageId: LanguageId): Promise<ICreateGrammarResult> {\n\t\tconst scopeName = this._languageToScope2[languageId];\n\t\tif (typeof scopeName !== 'string') {\n\t\t\t// No TM grammar defined\n\t\t\treturn Promise.reject(new Error(nls.localize('no-tm-grammar', \"No TM Grammar registered for this language.\")));\n\t\t}\n\n\t\tconst grammarDefinition = this._scopeRegistry.getGrammarDefinition(scopeName);\n\t\tif (!grammarDefinition) {\n\t\t\t// No TM grammar defined\n\t\t\treturn Promise.reject(new Error(nls.localize('no-tm-grammar', \"No TM Grammar registered for this language.\")));\n\t\t}\n\n\t\tlet embeddedLanguages = grammarDefinition.embeddedLanguages;\n\t\tif (this._injectedEmbeddedLanguages[scopeName]) {\n\t\t\tconst injectedEmbeddedLanguages = this._injectedEmbeddedLanguages[scopeName];\n\t\t\tfor (const injected of injectedEmbeddedLanguages) {\n\t\t\t\tfor (const scope of Object.keys(injected)) {\n\t\t\t\t\tembeddedLanguages[scope] = injected[scope];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst containsEmbeddedLanguages = (Object.keys(embeddedLanguages).length > 0);\n\n\t\tconst grammar = await this._grammarRegistry.loadGrammarWithConfiguration(scopeName, languageId, { embeddedLanguages, tokenTypes: <any>grammarDefinition.tokenTypes });\n\n\t\treturn {\n\t\t\tlanguageId: languageId,\n\t\t\tgrammar: grammar,\n\t\t\tinitialState: this._initialState,\n\t\t\tcontainsEmbeddedLanguages: containsEmbeddedLanguages\n\t\t};\n\t}\n}\n"]}