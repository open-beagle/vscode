{"version":3,"file":"textMateService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/textMate/electron-sandbox/textMateService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IA2BhG,MAAM,sBAAsB,GAAG,KAAK,CAAC;IAErC,MAAM,4BAA6B,SAAQ,sBAAU;QAOpD,YAAY,MAAsB,EAAE,KAAiB;YACpD,KAAK,EAAE,CAAC;YAHD,oBAAe,GAAgC,EAAE,CAAC;YAIzD,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;YACtB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YACpB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;YAEvB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,oBAAoB,EAAE,CAAC,CAAC,CAAC;YACnF,IAAI,CAAC,oBAAoB,EAAE,CAAC;YAE5B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC,EAAE,EAAE;gBACnD,IAAI,IAAI,CAAC,SAAS,EAAE;oBACnB,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,CAAC;oBAC/D,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;iBAC7B;YACF,CAAC,CAAC,CAAC,CAAC;YAEJ,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC,CAAC,EAAE,EAAE;gBACpD,IAAI,IAAI,CAAC,SAAS,EAAE;oBACnB,IAAI,CAAC,OAAO,CAAC,0BAA0B,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,qBAAqB,EAAE,CAAC,EAAE,CAAC,CAAC;iBAC5G;YACF,CAAC,CAAC,CAAC,CAAC;QACL,CAAC;QAEO,oBAAoB;YAC3B,IAAI,IAAI,CAAC,MAAM,CAAC,kBAAkB,EAAE,EAAE;gBACrC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;oBACpB,IAAI,CAAC,UAAU,EAAE,CAAC;iBAClB;aACD;iBAAM;gBACN,IAAI,IAAI,CAAC,SAAS,EAAE;oBACnB,IAAI,CAAC,QAAQ,EAAE,CAAC;iBAChB;aACD;QACF,CAAC;QAEO,UAAU;YACjB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC;gBAC3B,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG;gBACpB,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE;gBACrC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,eAAe,EAAE;gBACpC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;gBACzB,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,qBAAqB,EAAE,CAAC,EAAE;aAClD,CAAC,CAAC;QACJ,CAAC;QAEO,QAAQ;YACf,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;YACvB,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC7D,CAAC;QAEe,OAAO;YACtB,KAAK,CAAC,OAAO,EAAE,CAAC;YAChB,IAAI,CAAC,QAAQ,EAAE,CAAC;QACjB,CAAC;QAEO,QAAQ,CAAC,SAAiB;YACjC,OAAO,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,SAAS,IAAI,SAAS,EAAE;gBACzF,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC;aAC7B;QACF,CAAC;QAEM,SAAS,CAAC,SAAiB,EAAE,SAAsB;YACzD,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;YACzB,MAAM,MAAM,GAAG,oCAAsB,CAAC,WAAW,CAAC,IAAI,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC;YAE7E,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACrD,MAAM,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;gBACvC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBACvC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;wBAC/C,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;qBACrE;iBACD;aACD;YAED,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QAC/B,CAAC;KACD;IAED,IAAa,kBAAkB,GAA/B,MAAa,kBAAkB;QAE9B,YACkB,eAAgC,EACC,+BAAgE;YADjG,oBAAe,GAAf,eAAe,CAAiB;YACC,oCAA+B,GAA/B,+BAA+B,CAAiC;QAEnH,CAAC;QAED,KAAK,CAAC,QAAQ,CAAC,SAAwB;YACtC,MAAM,QAAQ,GAAG,SAAG,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;YACvC,OAAO,IAAI,CAAC,+BAA+B,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC;QAC7E,CAAC;QAED,KAAK,CAAC,SAAS,CAAC,SAAwB,EAAE,SAAiB,EAAE,MAAkB;YAC9E,MAAM,QAAQ,GAAG,SAAG,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;YACvC,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,QAAQ,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;QAC7D,CAAC;KACD,CAAA;IAjBY,kBAAkB;QAI5B,WAAA,yDAA+B,CAAA;OAJrB,kBAAkB,CAiB9B;IAjBY,gDAAkB;IAmB/B,IAAa,eAAe,GAA5B,MAAa,eAAgB,SAAQ,iDAAuB;QAM3D,YACe,WAAyB,EACf,YAAoC,EAC3B,8BAA+D,EAC1E,mBAAyC,EAClD,UAAuB,EACb,oBAA2C,EACjD,cAA+B,EAC9B,eAAiC,EACnB,aAA4B,EACb,mBAAiD;YAEhG,KAAK,CAAC,WAAW,EAAE,YAAY,EAAE,8BAA8B,EAAE,mBAAmB,EAAE,UAAU,EAAE,oBAAoB,EAAE,cAAc,EAAE,eAAe,CAAC,CAAC;YAHzH,kBAAa,GAAb,aAAa,CAAe;YACb,wBAAmB,GAAnB,mBAAmB,CAA8B;YAGhG,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YACpB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;YACzB,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACvC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACpF,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACxF,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;QAC9E,CAAC;QAEO,aAAa,CAAC,KAAiB;YACtC,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;gBACvB,OAAO;aACP;YACD,IAAI,KAAK,CAAC,oBAAoB,EAAE,EAAE;gBACjC,OAAO;aACP;YACD,MAAM,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;YACjC,MAAM,SAAS,GAAG,IAAI,4BAA4B,CAAC,IAAI,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;YAC7E,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC;QACnC,CAAC;QAEO,eAAe,CAAC,KAAiB;YACxC,MAAM,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;YACjC,IAAI,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE;gBAC1B,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,CAAC;gBAChC,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;aAC7B;QACF,CAAC;QAES,KAAK,CAAC,uBAAuB;YACtC,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,IAAI,CAAC,mBAAmB,CAAC,OAAO;gBAC5D,CAAC,CAAC,oBAAU,CAAC,YAAY,CAAC,iFAAiF,EAAE,OAAO,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC;gBACpI,CAAC,CAAC,oBAAU,CAAC,YAAY,CAAC,mEAAmE,EAAE,OAAO,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;YACzH,OAAO,QAAQ,CAAC;QACjB,CAAC;QAEkB,0BAA0B,CAAC,kBAA6C;YAC1F,IAAI,CAAC,WAAW,EAAE,CAAC;YAEnB,IAAI,sBAAsB,EAAE;gBAC3B,MAAM,UAAU,GAAG,IAAI,kBAAkB,CAAC,IAAI,EAAE,IAAI,CAAC,+BAA+B,CAAC,CAAC;gBACtF,MAAM,MAAM,GAAG,CAAA,GAAA,2BAAe,CAAA,CAAiB,IAAI,CAAC,aAAa,EAAE;oBAClE,UAAU,EAAE;wBACX,kBAAkB;qBAClB;oBACD,KAAK,EAAE,gBAAgB;oBACvB,QAAQ,EAAE,gEAAgE;oBAC1E,IAAI,EAAE,UAAU;iBAChB,CAAC,CAAC;gBAEH,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;gBACtB,MAAM,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;oBAChC,IAAI,IAAI,CAAC,OAAO,KAAK,MAAM,EAAE;wBAC5B,2BAA2B;wBAC3B,OAAO;qBACP;oBACD,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;oBAC1B,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,qBAAqB,EAAE;wBACrD,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC;qBAC9E;oBACD,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC9E,CAAC,CAAC,CAAC;aACH;QACF,CAAC;QAEkB,cAAc,CAAC,cAAgC,EAAE,KAAgB,EAAE,QAAkB;YACvG,KAAK,CAAC,cAAc,CAAC,cAAc,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;YACtD,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,qBAAqB,IAAI,IAAI,CAAC,YAAY,EAAE;gBAC1E,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC;aAC9E;QACF,CAAC;QAEkB,2BAA2B;YAC7C,IAAI,CAAC,WAAW,EAAE,CAAC;QACpB,CAAC;QAEO,WAAW;YAClB,KAAK,IAAI,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;gBAC9C,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,CAAC;aAChC;YACD,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAEvC,IAAI,IAAI,CAAC,OAAO,EAAE;gBACjB,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;gBACvB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;aACpB;YACD,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QAC1B,CAAC;QAED,SAAS,CAAC,QAAa,EAAE,SAAiB,EAAE,MAAmB;YAC9D,MAAM,GAAG,GAAG,QAAQ,CAAC,QAAQ,EAAE,CAAC;YAChC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE;gBAC3B,OAAO;aACP;YACD,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;QACpD,CAAC;KACD,CAAA;IAlHY,eAAe;QAOzB,WAAA,0BAAY,CAAA;QACZ,WAAA,8CAAsB,CAAA;QACtB,WAAA,yDAA+B,CAAA;QAC/B,WAAA,mCAAoB,CAAA;QACpB,WAAA,iBAAW,CAAA;QACX,WAAA,qCAAqB,CAAA;QACrB,WAAA,yBAAe,CAAA;QACf,WAAA,2BAAgB,CAAA;QAChB,WAAA,4BAAa,CAAA;QACb,WAAA,iDAA4B,CAAA;OAhBlB,eAAe,CAkH3B;IAlHY,0CAAe;IAoH5B,CAAA,GAAA,8BAAiB,CAAA,CAAC,kCAAgB,EAAE,eAAe,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ITextMateService } from 'vs/workbench/services/textMate/common/textMateService';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { AbstractTextMateService } from 'vs/workbench/services/textMate/browser/abstractTextMateService';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { IWorkbenchThemeService } from 'vs/workbench/services/themes/common/workbenchThemeService';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { createWebWorker, MonacoWebWorker } from 'vs/editor/common/services/webWorker';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport type { IRawTheme } from 'vscode-textmate';\nimport { IValidGrammarDefinition } from 'vs/workbench/services/textMate/common/TMScopeRegistry';\nimport { TextMateWorker } from 'vs/workbench/services/textMate/electron-sandbox/textMateWorker';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { UriComponents, URI } from 'vs/base/common/uri';\nimport { MultilineTokensBuilder } from 'vs/editor/common/model/tokensStore';\nimport { TMGrammarFactory } from 'vs/workbench/services/textMate/common/TMGrammarFactory';\nimport { IModelContentChangedEvent } from 'vs/editor/common/model/textModelEvents';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { IExtensionResourceLoaderService } from 'vs/workbench/services/extensionResourceLoader/common/extensionResourceLoader';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { IProgressService } from 'vs/platform/progress/common/progress';\nimport { FileAccess } from 'vs/base/common/network';\n\nconst RUN_TEXTMATE_IN_WORKER = false;\n\nclass ModelWorkerTextMateTokenizer extends Disposable {\n\n\tprivate readonly _worker: TextMateWorker;\n\tprivate readonly _model: ITextModel;\n\tprivate _isSynced: boolean;\n\tprivate _pendingChanges: IModelContentChangedEvent[] = [];\n\n\tconstructor(worker: TextMateWorker, model: ITextModel) {\n\t\tsuper();\n\t\tthis._worker = worker;\n\t\tthis._model = model;\n\t\tthis._isSynced = false;\n\n\t\tthis._register(this._model.onDidChangeAttached(() => this._onDidChangeAttached()));\n\t\tthis._onDidChangeAttached();\n\n\t\tthis._register(this._model.onDidChangeContent((e) => {\n\t\t\tif (this._isSynced) {\n\t\t\t\tthis._worker.acceptModelChanged(this._model.uri.toString(), e);\n\t\t\t\tthis._pendingChanges.push(e);\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this._model.onDidChangeLanguage((e) => {\n\t\t\tif (this._isSynced) {\n\t\t\t\tthis._worker.acceptModelLanguageChanged(this._model.uri.toString(), this._model.getLanguageIdentifier().id);\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate _onDidChangeAttached(): void {\n\t\tif (this._model.isAttachedToEditor()) {\n\t\t\tif (!this._isSynced) {\n\t\t\t\tthis._beginSync();\n\t\t\t}\n\t\t} else {\n\t\t\tif (this._isSynced) {\n\t\t\t\tthis._endSync();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _beginSync(): void {\n\t\tthis._isSynced = true;\n\t\tthis._worker.acceptNewModel({\n\t\t\turi: this._model.uri,\n\t\t\tversionId: this._model.getVersionId(),\n\t\t\tlines: this._model.getLinesContent(),\n\t\t\tEOL: this._model.getEOL(),\n\t\t\tlanguageId: this._model.getLanguageIdentifier().id,\n\t\t});\n\t}\n\n\tprivate _endSync(): void {\n\t\tthis._isSynced = false;\n\t\tthis._worker.acceptRemovedModel(this._model.uri.toString());\n\t}\n\n\tpublic override dispose() {\n\t\tsuper.dispose();\n\t\tthis._endSync();\n\t}\n\n\tprivate _confirm(versionId: number): void {\n\t\twhile (this._pendingChanges.length > 0 && this._pendingChanges[0].versionId <= versionId) {\n\t\t\tthis._pendingChanges.shift();\n\t\t}\n\t}\n\n\tpublic setTokens(versionId: number, rawTokens: ArrayBuffer): void {\n\t\tthis._confirm(versionId);\n\t\tconst tokens = MultilineTokensBuilder.deserialize(new Uint8Array(rawTokens));\n\n\t\tfor (let i = 0; i < this._pendingChanges.length; i++) {\n\t\t\tconst change = this._pendingChanges[i];\n\t\t\tfor (let j = 0; j < tokens.length; j++) {\n\t\t\t\tfor (let k = 0; k < change.changes.length; k++) {\n\t\t\t\t\ttokens[j].applyEdit(change.changes[k].range, change.changes[k].text);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._model.setTokens(tokens);\n\t}\n}\n\nexport class TextMateWorkerHost {\n\n\tconstructor(\n\t\tprivate readonly textMateService: TextMateService,\n\t\t@IExtensionResourceLoaderService private readonly _extensionResourceLoaderService: IExtensionResourceLoaderService\n\t) {\n\t}\n\n\tasync readFile(_resource: UriComponents): Promise<string> {\n\t\tconst resource = URI.revive(_resource);\n\t\treturn this._extensionResourceLoaderService.readExtensionResource(resource);\n\t}\n\n\tasync setTokens(_resource: UriComponents, versionId: number, tokens: Uint8Array): Promise<void> {\n\t\tconst resource = URI.revive(_resource);\n\t\tthis.textMateService.setTokens(resource, versionId, tokens);\n\t}\n}\n\nexport class TextMateService extends AbstractTextMateService {\n\n\tprivate _worker: MonacoWebWorker<TextMateWorker> | null;\n\tprivate _workerProxy: TextMateWorker | null;\n\tprivate _tokenizers: { [uri: string]: ModelWorkerTextMateTokenizer; };\n\n\tconstructor(\n\t\t@IModeService modeService: IModeService,\n\t\t@IWorkbenchThemeService themeService: IWorkbenchThemeService,\n\t\t@IExtensionResourceLoaderService extensionResourceLoaderService: IExtensionResourceLoaderService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@ILogService logService: ILogService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IProgressService progressService: IProgressService,\n\t\t@IModelService private readonly _modelService: IModelService,\n\t\t@IWorkbenchEnvironmentService private readonly _environmentService: IWorkbenchEnvironmentService,\n\t) {\n\t\tsuper(modeService, themeService, extensionResourceLoaderService, notificationService, logService, configurationService, storageService, progressService);\n\t\tthis._worker = null;\n\t\tthis._workerProxy = null;\n\t\tthis._tokenizers = Object.create(null);\n\t\tthis._register(this._modelService.onModelAdded(model => this._onModelAdded(model)));\n\t\tthis._register(this._modelService.onModelRemoved(model => this._onModelRemoved(model)));\n\t\tthis._modelService.getModels().forEach((model) => this._onModelAdded(model));\n\t}\n\n\tprivate _onModelAdded(model: ITextModel): void {\n\t\tif (!this._workerProxy) {\n\t\t\treturn;\n\t\t}\n\t\tif (model.isTooLargeForSyncing()) {\n\t\t\treturn;\n\t\t}\n\t\tconst key = model.uri.toString();\n\t\tconst tokenizer = new ModelWorkerTextMateTokenizer(this._workerProxy, model);\n\t\tthis._tokenizers[key] = tokenizer;\n\t}\n\n\tprivate _onModelRemoved(model: ITextModel): void {\n\t\tconst key = model.uri.toString();\n\t\tif (this._tokenizers[key]) {\n\t\t\tthis._tokenizers[key].dispose();\n\t\t\tdelete this._tokenizers[key];\n\t\t}\n\t}\n\n\tprotected async _loadVSCodeOnigurumWASM(): Promise<Response | ArrayBuffer> {\n\t\tconst response = await fetch(this._environmentService.isBuilt\n\t\t\t? FileAccess.asBrowserUri('../../../../../../node_modules.asar.unpacked/vscode-oniguruma/release/onig.wasm', require).toString(true)\n\t\t\t: FileAccess.asBrowserUri('../../../../../../node_modules/vscode-oniguruma/release/onig.wasm', require).toString(true));\n\t\treturn response;\n\t}\n\n\tprotected override _onDidCreateGrammarFactory(grammarDefinitions: IValidGrammarDefinition[]): void {\n\t\tthis._killWorker();\n\n\t\tif (RUN_TEXTMATE_IN_WORKER) {\n\t\t\tconst workerHost = new TextMateWorkerHost(this, this._extensionResourceLoaderService);\n\t\t\tconst worker = createWebWorker<TextMateWorker>(this._modelService, {\n\t\t\t\tcreateData: {\n\t\t\t\t\tgrammarDefinitions\n\t\t\t\t},\n\t\t\t\tlabel: 'textMateWorker',\n\t\t\t\tmoduleId: 'vs/workbench/services/textMate/electron-browser/textMateWorker',\n\t\t\t\thost: workerHost\n\t\t\t});\n\n\t\t\tthis._worker = worker;\n\t\t\tworker.getProxy().then((proxy) => {\n\t\t\t\tif (this._worker !== worker) {\n\t\t\t\t\t// disposed in the meantime\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis._workerProxy = proxy;\n\t\t\t\tif (this._currentTheme && this._currentTokenColorMap) {\n\t\t\t\t\tthis._workerProxy.acceptTheme(this._currentTheme, this._currentTokenColorMap);\n\t\t\t\t}\n\t\t\t\tthis._modelService.getModels().forEach((model) => this._onModelAdded(model));\n\t\t\t});\n\t\t}\n\t}\n\n\tprotected override _doUpdateTheme(grammarFactory: TMGrammarFactory, theme: IRawTheme, colorMap: string[]): void {\n\t\tsuper._doUpdateTheme(grammarFactory, theme, colorMap);\n\t\tif (this._currentTheme && this._currentTokenColorMap && this._workerProxy) {\n\t\t\tthis._workerProxy.acceptTheme(this._currentTheme, this._currentTokenColorMap);\n\t\t}\n\t}\n\n\tprotected override _onDidDisposeGrammarFactory(): void {\n\t\tthis._killWorker();\n\t}\n\n\tprivate _killWorker(): void {\n\t\tfor (let key of Object.keys(this._tokenizers)) {\n\t\t\tthis._tokenizers[key].dispose();\n\t\t}\n\t\tthis._tokenizers = Object.create(null);\n\n\t\tif (this._worker) {\n\t\t\tthis._worker.dispose();\n\t\t\tthis._worker = null;\n\t\t}\n\t\tthis._workerProxy = null;\n\t}\n\n\tsetTokens(resource: URI, versionId: number, tokens: ArrayBuffer): void {\n\t\tconst key = resource.toString();\n\t\tif (!this._tokenizers[key]) {\n\t\t\treturn;\n\t\t}\n\t\tthis._tokenizers[key].setTokens(versionId, tokens);\n\t}\n}\n\nregisterSingleton(ITextMateService, TextMateService);\n"]}