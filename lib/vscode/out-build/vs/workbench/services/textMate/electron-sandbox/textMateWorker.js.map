{"version":3,"file":"textMateWorker.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/textMate/electron-sandbox/textMateWorker.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAoChG,MAAM,mBAAoB,SAAQ,iCAAe;QAQhD,YAAY,GAAQ,EAAE,KAAe,EAAE,GAAW,EAAE,SAAiB,EAAE,MAAsB,EAAE,UAAsB;YACpH,KAAK,CAAC,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,SAAS,CAAC,CAAC;YAClC,IAAI,CAAC,uBAAuB,GAAG,IAAI,wCAAsB,EAAE,CAAC;YAC5D,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;YACtB,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;YAC9B,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;YACzB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;YACrB,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC3B,CAAC;QAEe,OAAO;YACtB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YACxB,KAAK,CAAC,OAAO,EAAE,CAAC;QACjB,CAAC;QAEM,YAAY,CAAC,UAAsB;YACzC,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;YAC9B,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC3B,CAAC;QAEQ,QAAQ,CAAC,CAAqB;YACtC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YAClB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAC1C,MAAM,MAAM,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBAC5B,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAA,GAAA,sBAAQ,CAAA,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBACzC,IAAI,CAAC,uBAAuB,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;aAChE;YACD,IAAI,CAAC,aAAa,EAAE,CAAC;QACtB,CAAC;QAEO,kBAAkB;YACzB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;YACrB,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAEzC,MAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC;YACpC,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE;gBACtD,IAAI,IAAI,CAAC,WAAW,IAAI,UAAU,KAAK,IAAI,CAAC,WAAW,IAAI,CAAC,CAAC,EAAE;oBAC9D,OAAO;iBACP;gBAED,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,OAAO,CAAC;gBAC1B,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC;gBACnD,IAAI,CAAC,aAAa,EAAE,CAAC;YACtB,CAAC,CAAC,CAAC;QACJ,CAAC;QAEO,aAAa;YACpB,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;gBACnB,OAAO;aACP;YACD,MAAM,OAAO,GAAG,IAAI,oCAAsB,EAAE,CAAC;YAC7C,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;YAErC,uDAAuD;YACvD,KAAK,IAAI,SAAS,GAAG,IAAI,CAAC,uBAAuB,CAAC,qBAAqB,EAAE,SAAS,GAAG,SAAS,EAAE,SAAS,EAAE,EAAE;gBAC5G,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;gBACpC,MAAM,cAAc,GAAG,IAAI,CAAC,uBAAuB,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;gBAE7E,MAAM,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,EAAgB,cAAe,CAAC,CAAC;gBAC3E,uBAAU,CAAC,kBAAkB,CAAC,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;gBACrD,OAAO,CAAC,GAAG,CAAC,SAAS,GAAG,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;gBACrC,IAAI,CAAC,uBAAuB,CAAC,WAAW,CAAC,SAAS,EAAE,SAAS,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC;gBAC5E,SAAS,GAAG,IAAI,CAAC,uBAAuB,CAAC,qBAAqB,GAAG,CAAC,CAAC,CAAC,0CAA0C;aAC9G;YAED,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,EAAE,OAAO,CAAC,SAAS,EAAE,CAAC,CAAC;QAC1E,CAAC;KACD;IAED,MAAa,cAAc;QAO1B,YAAY,GAAuC,EAAE,UAAuB;YAC3E,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC;YACtB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACnC,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;YACxB,MAAM,kBAAkB,GAAG,UAAU,CAAC,kBAAkB,CAAC,GAAG,CAA0B,CAAC,GAAG,EAAE,EAAE;gBAC7F,OAAO;oBACN,QAAQ,EAAE,SAAG,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC;oBAClC,QAAQ,EAAE,GAAG,CAAC,QAAQ;oBACtB,SAAS,EAAE,GAAG,CAAC,SAAS;oBACxB,iBAAiB,EAAE,GAAG,CAAC,iBAAiB;oBACxC,UAAU,EAAE,GAAG,CAAC,UAAU;oBAC1B,QAAQ,EAAE,GAAG,CAAC,QAAQ;iBACtB,CAAC;YACH,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,CAAC;QACvE,CAAC;QAEO,KAAK,CAAC,qBAAqB,CAAC,kBAA6C;YAChF,OAAO,CAAC,MAAM,CAAC;gBACd,KAAK,EAAE;oBACN,iBAAiB,EAAE,8CAA8C;oBACjE,kBAAkB,EAAE,+CAA+C;iBACnE;aACD,CAAC,CAAC;YACH,MAAM,cAAc,GAAG,sDAAa,iBAAiB,2BAAC,CAAC;YACvD,MAAM,eAAe,GAAG,sDAAa,kBAAkB,2BAAC,CAAC;YACzD,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,oBAAU,CAAC,YAAY,CAAC,+BAA+B,EAAE,OAAO,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;YAC/G,8FAA8F;YAC9F,sEAAsE;YACtE,kDAAkD;YAClD,MAAM,KAAK,GAAG,MAAM,QAAQ,CAAC,WAAW,EAAE,CAAC;YAC3C,MAAM,eAAe,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YAEtC,MAAM,OAAO,GAAsB,OAAO,CAAC,OAAO,CAAC;gBAClD,iBAAiB,EAAE,CAAC,OAAO,EAAE,EAAE,CAAC,eAAe,CAAC,iBAAiB,CAAC,OAAO,CAAC;gBAC1E,gBAAgB,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,eAAe,CAAC,gBAAgB,CAAC,GAAG,CAAC;aAChE,CAAC,CAAC;YAEH,OAAO,IAAI,mCAAgB,CAAC;gBAC3B,QAAQ,EAAE,CAAC,GAAW,EAAE,EAAE,GAAyB,CAAC;gBACpD,QAAQ,EAAE,CAAC,GAAW,EAAE,GAAQ,EAAE,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC;gBAC5D,QAAQ,EAAE,CAAC,QAAa,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC;aAC1D,EAAE,kBAAkB,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC;QACjD,CAAC;QAEM,cAAc,CAAC,IAAmB;YACxC,MAAM,GAAG,GAAG,SAAG,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACjC,MAAM,GAAG,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC;YAC3B,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,IAAI,mBAAmB,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QAC/G,CAAC;QAEM,kBAAkB,CAAC,MAAc,EAAE,CAAqB;YAC9D,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QAClC,CAAC;QAEM,0BAA0B,CAAC,MAAc,EAAE,aAAyB;YAC1E,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;QAClD,CAAC;QAEM,kBAAkB,CAAC,MAAc;YACvC,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;gBACzB,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC;gBAC/B,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;aAC5B;QACF,CAAC;QAEM,KAAK,CAAC,kBAAkB,CAAC,UAAsB;YACrD,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC;YAClD,IAAI,CAAC,cAAc,EAAE;gBACpB,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;aAC7B;YACD,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,EAAE;gBACpC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,GAAG,cAAc,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;aAC1E;YACD,OAAO,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;QACvC,CAAC;QAEM,KAAK,CAAC,WAAW,CAAC,KAAgB,EAAE,QAAkB;YAC5D,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC;YAClD,IAAI,cAAc,EAAE;gBACnB,cAAc,CAAC,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;aACzC;QACF,CAAC;QAEM,UAAU,CAAC,QAAa,EAAE,SAAiB,EAAE,MAAkB;YACrE,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,QAAQ,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;QACnD,CAAC;KACD;IA9FD,wCA8FC;IAED,SAAgB,MAAM,CAAC,GAAuC,EAAE,UAAuB;QACtF,OAAO,IAAI,cAAc,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;IAC5C,CAAC;IAFD,wBAEC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IWorkerContext } from 'vs/editor/common/services/editorSimpleWorker';\nimport { UriComponents, URI } from 'vs/base/common/uri';\nimport { LanguageId } from 'vs/editor/common/modes';\nimport { IValidEmbeddedLanguagesMap, IValidTokenTypeMap, IValidGrammarDefinition } from 'vs/workbench/services/textMate/common/TMScopeRegistry';\nimport { TMGrammarFactory, ICreateGrammarResult } from 'vs/workbench/services/textMate/common/TMGrammarFactory';\nimport { IModelChangedEvent, MirrorTextModel } from 'vs/editor/common/model/mirrorTextModel';\nimport { TextMateWorkerHost } from 'vs/workbench/services/textMate/electron-sandbox/textMateService';\nimport { TokenizationStateStore } from 'vs/editor/common/model/textModelTokens';\nimport type { IGrammar, StackElement, IRawTheme, IOnigLib } from 'vscode-textmate';\nimport { MultilineTokensBuilder, countEOL } from 'vs/editor/common/model/tokensStore';\nimport { LineTokens } from 'vs/editor/common/core/lineTokens';\nimport { FileAccess } from 'vs/base/common/network';\n\nexport interface IValidGrammarDefinitionDTO {\n\tlocation: UriComponents;\n\tlanguage?: LanguageId;\n\tscopeName: string;\n\tembeddedLanguages: IValidEmbeddedLanguagesMap;\n\ttokenTypes: IValidTokenTypeMap;\n\tinjectTo?: string[];\n}\n\nexport interface ICreateData {\n\tgrammarDefinitions: IValidGrammarDefinitionDTO[];\n}\n\nexport interface IRawModelData {\n\turi: UriComponents;\n\tversionId: number;\n\tlines: string[];\n\tEOL: string;\n\tlanguageId: LanguageId;\n}\n\nclass TextMateWorkerModel extends MirrorTextModel {\n\n\tprivate readonly _tokenizationStateStore: TokenizationStateStore;\n\tprivate readonly _worker: TextMateWorker;\n\tprivate _languageId: LanguageId;\n\tprivate _grammar: IGrammar | null;\n\tprivate _isDisposed: boolean;\n\n\tconstructor(uri: URI, lines: string[], eol: string, versionId: number, worker: TextMateWorker, languageId: LanguageId) {\n\t\tsuper(uri, lines, eol, versionId);\n\t\tthis._tokenizationStateStore = new TokenizationStateStore();\n\t\tthis._worker = worker;\n\t\tthis._languageId = languageId;\n\t\tthis._isDisposed = false;\n\t\tthis._grammar = null;\n\t\tthis._resetTokenization();\n\t}\n\n\tpublic override dispose(): void {\n\t\tthis._isDisposed = true;\n\t\tsuper.dispose();\n\t}\n\n\tpublic onLanguageId(languageId: LanguageId): void {\n\t\tthis._languageId = languageId;\n\t\tthis._resetTokenization();\n\t}\n\n\toverride onEvents(e: IModelChangedEvent): void {\n\t\tsuper.onEvents(e);\n\t\tfor (let i = 0; i < e.changes.length; i++) {\n\t\t\tconst change = e.changes[i];\n\t\t\tconst [eolCount] = countEOL(change.text);\n\t\t\tthis._tokenizationStateStore.applyEdits(change.range, eolCount);\n\t\t}\n\t\tthis._ensureTokens();\n\t}\n\n\tprivate _resetTokenization(): void {\n\t\tthis._grammar = null;\n\t\tthis._tokenizationStateStore.flush(null);\n\n\t\tconst languageId = this._languageId;\n\t\tthis._worker.getOrCreateGrammar(languageId).then((r) => {\n\t\t\tif (this._isDisposed || languageId !== this._languageId || !r) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._grammar = r.grammar;\n\t\t\tthis._tokenizationStateStore.flush(r.initialState);\n\t\t\tthis._ensureTokens();\n\t\t});\n\t}\n\n\tprivate _ensureTokens(): void {\n\t\tif (!this._grammar) {\n\t\t\treturn;\n\t\t}\n\t\tconst builder = new MultilineTokensBuilder();\n\t\tconst lineCount = this._lines.length;\n\n\t\t// Validate all states up to and including endLineIndex\n\t\tfor (let lineIndex = this._tokenizationStateStore.invalidLineStartIndex; lineIndex < lineCount; lineIndex++) {\n\t\t\tconst text = this._lines[lineIndex];\n\t\t\tconst lineStartState = this._tokenizationStateStore.getBeginState(lineIndex);\n\n\t\t\tconst r = this._grammar.tokenizeLine2(text, <StackElement>lineStartState!);\n\t\t\tLineTokens.convertToEndOffset(r.tokens, text.length);\n\t\t\tbuilder.add(lineIndex + 1, r.tokens);\n\t\t\tthis._tokenizationStateStore.setEndState(lineCount, lineIndex, r.ruleStack);\n\t\t\tlineIndex = this._tokenizationStateStore.invalidLineStartIndex - 1; // -1 because the outer loop increments it\n\t\t}\n\n\t\tthis._worker._setTokens(this._uri, this._versionId, builder.serialize());\n\t}\n}\n\nexport class TextMateWorker {\n\n\tprivate readonly _host: TextMateWorkerHost;\n\tprivate readonly _models: { [uri: string]: TextMateWorkerModel; };\n\tprivate readonly _grammarCache: Promise<ICreateGrammarResult>[];\n\tprivate readonly _grammarFactory: Promise<TMGrammarFactory | null>;\n\n\tconstructor(ctx: IWorkerContext<TextMateWorkerHost>, createData: ICreateData) {\n\t\tthis._host = ctx.host;\n\t\tthis._models = Object.create(null);\n\t\tthis._grammarCache = [];\n\t\tconst grammarDefinitions = createData.grammarDefinitions.map<IValidGrammarDefinition>((def) => {\n\t\t\treturn {\n\t\t\t\tlocation: URI.revive(def.location),\n\t\t\t\tlanguage: def.language,\n\t\t\t\tscopeName: def.scopeName,\n\t\t\t\tembeddedLanguages: def.embeddedLanguages,\n\t\t\t\ttokenTypes: def.tokenTypes,\n\t\t\t\tinjectTo: def.injectTo,\n\t\t\t};\n\t\t});\n\t\tthis._grammarFactory = this._loadTMGrammarFactory(grammarDefinitions);\n\t}\n\n\tprivate async _loadTMGrammarFactory(grammarDefinitions: IValidGrammarDefinition[]): Promise<TMGrammarFactory> {\n\t\trequire.config({\n\t\t\tpaths: {\n\t\t\t\t'vscode-textmate': '../node_modules/vscode-textmate/release/main',\n\t\t\t\t'vscode-oniguruma': '../node_modules/vscode-oniguruma/release/main',\n\t\t\t}\n\t\t});\n\t\tconst vscodeTextmate = await import('vscode-textmate');\n\t\tconst vscodeOniguruma = await import('vscode-oniguruma');\n\t\tconst response = await fetch(FileAccess.asBrowserUri('vscode-oniguruma/../onig.wasm', require).toString(true));\n\t\t// Using the response directly only works if the server sets the MIME type 'application/wasm'.\n\t\t// Otherwise, a TypeError is thrown when using the streaming compiler.\n\t\t// We therefore use the non-streaming compiler :(.\n\t\tconst bytes = await response.arrayBuffer();\n\t\tawait vscodeOniguruma.loadWASM(bytes);\n\n\t\tconst onigLib: Promise<IOnigLib> = Promise.resolve({\n\t\t\tcreateOnigScanner: (sources) => vscodeOniguruma.createOnigScanner(sources),\n\t\t\tcreateOnigString: (str) => vscodeOniguruma.createOnigString(str)\n\t\t});\n\n\t\treturn new TMGrammarFactory({\n\t\t\tlogTrace: (msg: string) => {/* console.log(msg) */ },\n\t\t\tlogError: (msg: string, err: any) => console.error(msg, err),\n\t\t\treadFile: (resource: URI) => this._host.readFile(resource)\n\t\t}, grammarDefinitions, vscodeTextmate, onigLib);\n\t}\n\n\tpublic acceptNewModel(data: IRawModelData): void {\n\t\tconst uri = URI.revive(data.uri);\n\t\tconst key = uri.toString();\n\t\tthis._models[key] = new TextMateWorkerModel(uri, data.lines, data.EOL, data.versionId, this, data.languageId);\n\t}\n\n\tpublic acceptModelChanged(strURL: string, e: IModelChangedEvent): void {\n\t\tthis._models[strURL].onEvents(e);\n\t}\n\n\tpublic acceptModelLanguageChanged(strURL: string, newLanguageId: LanguageId): void {\n\t\tthis._models[strURL].onLanguageId(newLanguageId);\n\t}\n\n\tpublic acceptRemovedModel(strURL: string): void {\n\t\tif (this._models[strURL]) {\n\t\t\tthis._models[strURL].dispose();\n\t\t\tdelete this._models[strURL];\n\t\t}\n\t}\n\n\tpublic async getOrCreateGrammar(languageId: LanguageId): Promise<ICreateGrammarResult | null> {\n\t\tconst grammarFactory = await this._grammarFactory;\n\t\tif (!grammarFactory) {\n\t\t\treturn Promise.resolve(null);\n\t\t}\n\t\tif (!this._grammarCache[languageId]) {\n\t\t\tthis._grammarCache[languageId] = grammarFactory.createGrammar(languageId);\n\t\t}\n\t\treturn this._grammarCache[languageId];\n\t}\n\n\tpublic async acceptTheme(theme: IRawTheme, colorMap: string[]): Promise<void> {\n\t\tconst grammarFactory = await this._grammarFactory;\n\t\tif (grammarFactory) {\n\t\t\tgrammarFactory.setTheme(theme, colorMap);\n\t\t}\n\t}\n\n\tpublic _setTokens(resource: URI, versionId: number, tokens: Uint8Array): void {\n\t\tthis._host.setTokens(resource, versionId, tokens);\n\t}\n}\n\nexport function create(ctx: IWorkerContext<TextMateWorkerHost>, createData: ICreateData): TextMateWorker {\n\treturn new TextMateWorker(ctx, createData);\n}\n"]}