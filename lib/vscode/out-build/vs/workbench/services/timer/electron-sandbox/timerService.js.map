{"version":3,"file":"timerService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/timer/electron-sandbox/timerService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { INativeHostService } from 'vs/platform/native/electron-sandbox/native';\nimport { INativeWorkbenchEnvironmentService } from 'vs/workbench/services/environment/electron-sandbox/environmentService';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { IUpdateService } from 'vs/platform/update/common/update';\nimport { ILifecycleService } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { IViewletService } from 'vs/workbench/services/viewlet/browser/viewlet';\nimport { IPanelService } from 'vs/workbench/services/panel/common/panelService';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IAccessibilityService } from 'vs/platform/accessibility/common/accessibility';\nimport { IStartupMetrics, AbstractTimerService, Writeable, ITimerService } from 'vs/workbench/services/timer/browser/timerService';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { process } from 'vs/base/parts/sandbox/electron-sandbox/globals';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IWorkbenchLayoutService } from 'vs/workbench/services/layout/browser/layoutService';\n\nexport class TimerService extends AbstractTimerService {\n\n\tconstructor(\n\t\t@INativeHostService private readonly _nativeHostService: INativeHostService,\n\t\t@INativeWorkbenchEnvironmentService private readonly _environmentService: INativeWorkbenchEnvironmentService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t\t@IWorkspaceContextService contextService: IWorkspaceContextService,\n\t\t@IExtensionService extensionService: IExtensionService,\n\t\t@IUpdateService updateService: IUpdateService,\n\t\t@IViewletService viewletService: IViewletService,\n\t\t@IPanelService panelService: IPanelService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IAccessibilityService accessibilityService: IAccessibilityService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IWorkbenchLayoutService layoutService: IWorkbenchLayoutService\n\t) {\n\t\tsuper(lifecycleService, contextService, extensionService, updateService, viewletService, panelService, editorService, accessibilityService, telemetryService, layoutService);\n\t\tthis.setPerformanceMarks('main', _environmentService.configuration.perfMarks);\n\t}\n\n\tprotected _isInitialStartup(): boolean {\n\t\treturn Boolean(this._environmentService.configuration.isInitialStartup);\n\t}\n\tprotected _didUseCachedData(): boolean {\n\t\treturn didUseCachedData();\n\t}\n\tprotected _getWindowCount(): Promise<number> {\n\t\treturn this._nativeHostService.getWindowCount();\n\t}\n\n\tprotected async _extendStartupInfo(info: Writeable<IStartupMetrics>): Promise<void> {\n\t\ttry {\n\t\t\tconst [osProperties, osStatistics, virtualMachineHint] = await Promise.all([\n\t\t\t\tthis._nativeHostService.getOSProperties(),\n\t\t\t\tthis._nativeHostService.getOSStatistics(),\n\t\t\t\tthis._nativeHostService.getOSVirtualMachineHint()\n\t\t\t]);\n\n\t\t\tinfo.totalmem = osStatistics.totalmem;\n\t\t\tinfo.freemem = osStatistics.freemem;\n\t\t\tinfo.platform = osProperties.platform;\n\t\t\tinfo.release = osProperties.release;\n\t\t\tinfo.arch = osProperties.arch;\n\t\t\tinfo.loadavg = osStatistics.loadavg;\n\n\t\t\tconst processMemoryInfo = await process.getProcessMemoryInfo();\n\t\t\tinfo.meminfo = {\n\t\t\t\tworkingSetSize: processMemoryInfo.residentSet,\n\t\t\t\tprivateBytes: processMemoryInfo.private,\n\t\t\t\tsharedBytes: processMemoryInfo.shared\n\t\t\t};\n\n\t\t\tinfo.isVMLikelyhood = Math.round((virtualMachineHint * 100));\n\n\t\t\tconst rawCpus = osProperties.cpus;\n\t\t\tif (rawCpus && rawCpus.length > 0) {\n\t\t\t\tinfo.cpus = { count: rawCpus.length, speed: rawCpus[0].speed, model: rawCpus[0].model };\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// ignore, be on the safe side with these hardware method calls\n\t\t}\n\t}\n}\n\nregisterSingleton(ITimerService, TimerService);\n\n//#region cached data logic\n\nexport function didUseCachedData(): boolean {\n\t// TODO@sandbox need a different way to figure out if cached data was used\n\tif (process.sandboxed) {\n\t\treturn true;\n\t}\n\t// We surely don't use cached data when we don't tell the loader to do so\n\tif (!Boolean((<any>window).require.getConfig().nodeCachedData)) {\n\t\treturn false;\n\t}\n\t// There are loader events that signal if cached data was missing, rejected,\n\t// or used. The former two mean no cached data.\n\tlet cachedDataFound = 0;\n\tfor (const event of require.getStats()) {\n\t\tswitch (event.type) {\n\t\t\tcase LoaderEventType.CachedDataRejected:\n\t\t\t\treturn false;\n\t\t\tcase LoaderEventType.CachedDataFound:\n\t\t\t\tcachedDataFound += 1;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn cachedDataFound > 0;\n}\n\n//#endregion\n"]}