{"version":3,"file":"timerService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/timer/browser/timerService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as perf from 'vs/base/common/performance';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IWorkspaceContextService, WorkbenchState } from 'vs/platform/workspace/common/workspace';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { IUpdateService } from 'vs/platform/update/common/update';\nimport { ILifecycleService, LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { IViewletService } from 'vs/workbench/services/viewlet/browser/viewlet';\nimport { IPanelService } from 'vs/workbench/services/panel/common/panelService';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IAccessibilityService } from 'vs/platform/accessibility/common/accessibility';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { Barrier } from 'vs/base/common/async';\nimport { IWorkbenchLayoutService } from 'vs/workbench/services/layout/browser/layoutService';\n\n/* __GDPR__FRAGMENT__\n\t\"IMemoryInfo\" : {\n\t\t\"workingSetSize\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"privateBytes\": { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"sharedBytes\": { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true }\n\t}\n*/\nexport interface IMemoryInfo {\n\treadonly workingSetSize: number;\n\treadonly privateBytes: number;\n\treadonly sharedBytes: number;\n}\n\n/* __GDPR__FRAGMENT__\n\t\"IStartupMetrics\" : {\n\t\t\"version\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n\t\t\"ellapsed\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"isLatestVersion\": { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n\t\t\"didUseCachedData\": { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n\t\t\"windowKind\": { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n\t\t\"windowCount\": { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n\t\t\"viewletId\": { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n\t\t\"panelId\": { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n\t\t\"editorIds\": { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n\t\t\"timers.ellapsedAppReady\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"timers.ellapsedNlsGeneration\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"timers.ellapsedLoadMainBundle\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"timers.ellapsedCrashReporter\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"timers.ellapsedMainServer\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"timers.ellapsedWindowCreate\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"timers.ellapsedWindowLoad\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"timers.ellapsedWindowLoadToRequire\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"timers.ellapsedWaitForWindowConfig\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"timers.ellapsedWaitForShellEnv\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"timers.ellapsedStorageInit\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"timers.ellapsedWorkspaceServiceInit\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"timers.ellapsedSharedProcesConnected\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"timers.ellapsedRequiredUserDataInit\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"timers.ellapsedOtherUserDataInit\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"timers.ellapsedRequire\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"timers.ellapsedExtensions\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"timers.ellapsedExtensionsReady\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"timers.ellapsedViewletRestore\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"timers.ellapsedPanelRestore\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"timers.ellapsedEditorRestore\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"timers.ellapsedWorkbench\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"platform\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n\t\t\"release\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n\t\t\"arch\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n\t\t\"totalmem\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"freemem\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"meminfo\" : { \"${inline}\": [ \"${IMemoryInfo}\" ] },\n\t\t\"cpus.count\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"cpus.speed\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"cpus.model\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n\t\t\"initialStartup\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"hasAccessibilitySupport\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"isVMLikelyhood\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"emptyWorkbench\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"loadavg\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" }\n\t}\n*/\nexport interface IStartupMetrics {\n\n\t/**\n\t * The version of these metrics.\n\t */\n\treadonly version: 2;\n\n\t/**\n\t * If this started the main process and renderer or just a renderer (new or reloaded).\n\t */\n\treadonly initialStartup: boolean;\n\n\t/**\n\t * No folder, no file, no workspace has been opened\n\t */\n\treadonly emptyWorkbench: boolean;\n\n\t/**\n\t * This is the latest (stable/insider) version. Iff not we should ignore this\n\t * measurement.\n\t */\n\treadonly isLatestVersion: boolean;\n\n\t/**\n\t * Whether we asked for and V8 accepted cached data.\n\t */\n\treadonly didUseCachedData: boolean;\n\n\t/**\n\t * How/why the window was created. See https://github.com/microsoft/vscode/blob/d1f57d871722f4d6ba63e4ef6f06287121ceb045/src/vs/platform/lifecycle/common/lifecycle.ts#L50\n\t */\n\treadonly windowKind: number;\n\n\t/**\n\t * The total number of windows that have been restored/created\n\t */\n\treadonly windowCount: number;\n\n\t/**\n\t * The active viewlet id or `undedined`\n\t */\n\treadonly viewletId?: string;\n\n\t/**\n\t * The active panel id or `undefined`\n\t */\n\treadonly panelId?: string;\n\n\t/**\n\t * The editor input types or `[]`\n\t */\n\treadonly editorIds: string[];\n\n\t/**\n\t * The time it took to create the workbench.\n\t *\n\t * * Happens in the main-process *and* the renderer-process\n\t * * Measured with the *start* and `didStartWorkbench`-performance mark. The *start* is either the start of the\n\t * main process or the start of the renderer.\n\t * * This should be looked at carefully because times vary depending on\n\t *  * This being the first window, the only window, or a reloaded window\n\t *  * Cached data being present and used or not\n\t *  * The numbers and types of editors being restored\n\t *  * The numbers of windows being restored (when starting 'fresh')\n\t *  * The viewlet being restored (esp. when it's a contributed viewlet)\n\t */\n\treadonly ellapsed: number;\n\n\t/**\n\t * Individual timers...\n\t */\n\treadonly timers: {\n\t\t/**\n\t\t * The time it took to receieve the [`ready`](https://electronjs.org/docs/api/app#event-ready)-event. Measured from the first line\n\t\t * of JavaScript code till receiving that event.\n\t\t *\n\t\t * * Happens in the main-process\n\t\t * * Measured with the `main:started` and `main:appReady` performance marks.\n\t\t * * This can be compared between insider and stable builds.\n\t\t * * This should be looked at per OS version and per electron version.\n\t\t * * This is often affected by AV software (and can change with AV software updates outside of our release-cycle).\n\t\t * * It is not our code running here and we can only observe what's happening.\n\t\t */\n\t\treadonly ellapsedAppReady?: number;\n\n\t\t/**\n\t\t * The time it took to generate NLS data.\n\t\t *\n\t\t * * Happens in the main-process\n\t\t * * Measured with the `nlsGeneration:start` and `nlsGeneration:end` performance marks.\n\t\t * * This only happens when a non-english locale is being used.\n\t\t * * It is our code running here and we should monitor this carefully for regressions.\n\t\t */\n\t\treadonly ellapsedNlsGeneration?: number;\n\n\t\t/**\n\t\t * The time it took to load the main bundle.\n\t\t *\n\t\t * * Happens in the main-process\n\t\t * * Measured with the `willLoadMainBundle` and `didLoadMainBundle` performance marks.\n\t\t */\n\t\treadonly ellapsedLoadMainBundle?: number;\n\n\t\t/**\n\t\t * The time it took to start the crash reporter.\n\t\t *\n\t\t * * Happens in the main-process\n\t\t * * Measured with the `willStartCrashReporter` and `didStartCrashReporter` performance marks.\n\t\t */\n\t\treadonly ellapsedCrashReporter?: number;\n\n\t\t/**\n\t\t * The time it took to create the main instance server.\n\t\t *\n\t\t * * Happens in the main-process\n\t\t * * Measured with the `willStartMainServer` and `didStartMainServer` performance marks.\n\t\t */\n\t\treadonly ellapsedMainServer?: number;\n\n\t\t/**\n\t\t * The time it took to create the window.\n\t\t *\n\t\t * * Happens in the main-process\n\t\t * * Measured with the `willCreateCodeWindow` and `didCreateCodeWindow` performance marks.\n\t\t */\n\t\treadonly ellapsedWindowCreate?: number;\n\n\t\t/**\n\t\t * The time it took to create the electron browser window.\n\t\t *\n\t\t * * Happens in the main-process\n\t\t * * Measured with the `willCreateCodeBrowserWindow` and `didCreateCodeBrowserWindow` performance marks.\n\t\t */\n\t\treadonly ellapsedBrowserWindowCreate?: number;\n\n\t\t/**\n\t\t * The time it took to restore and validate window state.\n\t\t *\n\t\t * * Happens in the main-process\n\t\t * * Measured with the `willRestoreCodeWindowState` and `didRestoreCodeWindowState` performance marks.\n\t\t */\n\t\treadonly ellapsedWindowRestoreState?: number;\n\n\t\t/**\n\t\t * The time it took to maximize/show the window.\n\t\t *\n\t\t * * Happens in the main-process\n\t\t * * Measured with the `willMaximizeCodeWindow` and `didMaximizeCodeWindow` performance marks.\n\t\t */\n\t\treadonly ellapsedWindowMaximize?: number;\n\n\t\t/**\n\t\t * The time it took to tell electron to open/restore a renderer (browser window).\n\t\t *\n\t\t * * Happens in the main-process\n\t\t * * Measured with the `main:appReady` and `code/willOpenNewWindow` performance marks.\n\t\t * * This can be compared between insider and stable builds.\n\t\t * * It is our code running here and we should monitor this carefully for regressions.\n\t\t */\n\t\treadonly ellapsedWindowLoad?: number;\n\n\t\t/**\n\t\t * The time it took to create a new renderer (browser window) and to initialize that to the point\n\t\t * of load the main-bundle (`workbench.desktop.main.js`).\n\t\t *\n\t\t * * Happens in the main-process *and* the renderer-process\n\t\t * * Measured with the `code/willOpenNewWindow` and `willLoadWorkbenchMain` performance marks.\n\t\t * * This can be compared between insider and stable builds.\n\t\t * * It is mostly not our code running here and we can only observe what's happening.\n\t\t *\n\t\t */\n\t\treadonly ellapsedWindowLoadToRequire: number;\n\n\t\t/**\n\t\t * The time it took to wait for resolving the window configuration. This time the workbench\n\t\t * will not continue to load and be blocked entirely.\n\t\t *\n\t\t * * Happens in the renderer-process\n\t\t * * Measured with the `willWaitForWindowConfig` and `didWaitForWindowConfig` performance marks.\n\t\t */\n\t\treadonly ellapsedWaitForWindowConfig: number;\n\n\t\t/**\n\t\t * The time it took to wait for resolving the shell environment. This time the workbench\n\t\t * will not continue to load and be blocked entirely.\n\t\t *\n\t\t * * Happens in the renderer-process\n\t\t * * Measured with the `willWaitForShellEnv` and `didWaitForShellEnv` performance marks.\n\t\t */\n\t\treadonly ellapsedWaitForShellEnv: number;\n\n\t\t/**\n\t\t * The time it took to init the storage database connection from the workbench.\n\t\t *\n\t\t * * Happens in the renderer-process\n\t\t * * Measured with the `code/willInitStorage` and `code/didInitStorage` performance marks.\n\t\t */\n\t\treadonly ellapsedStorageInit: number;\n\n\t\t/**\n\t\t * The time it took to initialize the workspace and configuration service.\n\t\t *\n\t\t * * Happens in the renderer-process\n\t\t * * Measured with the `willInitWorkspaceService` and `didInitWorkspaceService` performance marks.\n\t\t */\n\t\treadonly ellapsedWorkspaceServiceInit: number;\n\n\t\t/**\n\t\t * The time it took to connect to the shared process.\n\t\t *\n\t\t * * Happens in the renderer-process\n\t\t * * Measured with the `willConnectSharedProcess` and `didConnectSharedProcess` performance marks.\n\t\t */\n\t\treadonly ellapsedSharedProcesConnected: number;\n\n\t\t/**\n\t\t * The time it took to initialize required user data (settings & global state) using settings sync service.\n\t\t *\n\t\t * * Happens in the renderer-process (only in Web)\n\t\t * * Measured with the `willInitRequiredUserData` and `didInitRequiredUserData` performance marks.\n\t\t */\n\t\treadonly ellapsedRequiredUserDataInit: number;\n\n\t\t/**\n\t\t * The time it took to initialize other user data (keybindings, snippets & extensions) using settings sync service.\n\t\t *\n\t\t * * Happens in the renderer-process (only in Web)\n\t\t * * Measured with the `willInitOtherUserData` and `didInitOtherUserData` performance marks.\n\t\t */\n\t\treadonly ellapsedOtherUserDataInit: number;\n\n\t\t/**\n\t\t * The time it took to load the main-bundle of the workbench, e.g. `workbench.desktop.main.js`.\n\t\t *\n\t\t * * Happens in the renderer-process\n\t\t * * Measured with the `willLoadWorkbenchMain` and `didLoadWorkbenchMain` performance marks.\n\t\t * * This varies *a lot* when V8 cached data could be used or not\n\t\t * * This should be looked at with and without V8 cached data usage and per electron/v8 version\n\t\t * * This is affected by the size of our code bundle (which  grows about 3-5% per release)\n\t\t */\n\t\treadonly ellapsedRequire: number;\n\n\t\t/**\n\t\t * The time it took to read extensions' package.json-files *and* interpret them (invoking\n\t\t * the contribution points).\n\t\t *\n\t\t * * Happens in the renderer-process\n\t\t * * Measured with the `willLoadExtensions` and `didLoadExtensions` performance marks.\n\t\t * * Reading of package.json-files is avoided by caching them all in a single file (after the read,\n\t\t * until another extension is installed)\n\t\t * * Happens in parallel to other things, depends on async timing\n\t\t */\n\t\treadonly ellapsedExtensions: number;\n\n\t\t// the time from start till `didLoadExtensions`\n\t\t// remove?\n\t\treadonly ellapsedExtensionsReady: number;\n\n\t\t/**\n\t\t * The time it took to restore the viewlet.\n\t\t *\n\t\t * * Happens in the renderer-process\n\t\t * * Measured with the `willRestoreViewlet` and `didRestoreViewlet` performance marks.\n\t\t * * This should be looked at per viewlet-type/id.\n\t\t * * Happens in parallel to other things, depends on async timing\n\t\t */\n\t\treadonly ellapsedViewletRestore: number;\n\n\t\t/**\n\t\t * The time it took to restore the panel.\n\t\t *\n\t\t * * Happens in the renderer-process\n\t\t * * Measured with the `willRestorePanel` and `didRestorePanel` performance marks.\n\t\t * * This should be looked at per panel-type/id.\n\t\t * * Happens in parallel to other things, depends on async timing\n\t\t */\n\t\treadonly ellapsedPanelRestore: number;\n\n\t\t/**\n\t\t * The time it took to restore and fully resolve visible editors - that is text editor\n\t\t * and complex editor likes the settings UI or webviews (markdown preview).\n\t\t *\n\t\t * * Happens in the renderer-process\n\t\t * * Measured with the `willRestoreEditors` and `didRestoreEditors` performance marks.\n\t\t * * This should be looked at per editor and per editor type.\n\t\t * * Happens in parallel to other things, depends on async timing\n\t\t */\n\t\treadonly ellapsedEditorRestore: number;\n\n\t\t/**\n\t\t * The time it took to create the workbench.\n\t\t *\n\t\t * * Happens in the renderer-process\n\t\t * * Measured with the `willStartWorkbench` and `didStartWorkbench` performance marks.\n\t\t */\n\t\treadonly ellapsedWorkbench: number;\n\n\t\t/**\n\t\t * This time it took inside the renderer to start the workbench.\n\t\t *\n\t\t * * Happens in the renderer-process\n\t\t * * Measured with the `renderer/started` and `didStartWorkbench` performance marks\n\t\t */\n\t\treadonly ellapsedRenderer: number;\n\t};\n\n\treadonly hasAccessibilitySupport: boolean;\n\treadonly isVMLikelyhood?: number;\n\treadonly platform?: string;\n\treadonly release?: string;\n\treadonly arch?: string;\n\treadonly totalmem?: number;\n\treadonly freemem?: number;\n\treadonly meminfo?: IMemoryInfo;\n\treadonly cpus?: { count: number; speed: number; model: string; };\n\treadonly loadavg?: number[];\n}\n\nexport interface ITimerService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * A promise that resolved when startup timings and perf marks\n\t * are available. This depends on lifecycle phases and extension\n\t * hosts being started.\n\t */\n\twhenReady(): Promise<boolean>;\n\n\t/**\n\t * Startup metrics. Can ONLY be accessed after `whenReady` has resolved.\n\t */\n\treadonly startupMetrics: IStartupMetrics;\n\n\t/**\n\t * Deliver performance marks from a source, like the main process or extension hosts.\n\t * The source argument acts as an identifier and therefore it must be unique.\n\t */\n\tsetPerformanceMarks(source: string, marks: perf.PerformanceMark[]): void;\n\n\t/**\n\t * Get all currently known performance marks by source. There is no sorting of the\n\t * returned tuples but the marks of a tuple are guaranteed to be sorted by start times.\n\t */\n\tgetPerformanceMarks(): [source: string, marks: readonly perf.PerformanceMark[]][];\n}\n\nexport const ITimerService = createDecorator<ITimerService>('timerService');\n\n\nclass PerfMarks {\n\n\tprivate readonly _entries: [string, perf.PerformanceMark[]][] = [];\n\n\tsetMarks(source: string, entries: perf.PerformanceMark[]): void {\n\t\tthis._entries.push([source, entries]);\n\t}\n\n\tgetDuration(from: string, to: string): number {\n\t\tconst fromEntry = this._findEntry(from);\n\t\tif (!fromEntry) {\n\t\t\treturn 0;\n\t\t}\n\t\tconst toEntry = this._findEntry(to);\n\t\tif (!toEntry) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn toEntry.startTime - fromEntry.startTime;\n\t}\n\n\tprivate _findEntry(name: string): perf.PerformanceMark | void {\n\t\tfor (let [, marks] of this._entries) {\n\t\t\tfor (let i = marks.length - 1; i >= 0; i--) {\n\t\t\t\tif (marks[i].name === name) {\n\t\t\t\t\treturn marks[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tgetEntries() {\n\t\treturn this._entries.slice(0);\n\t}\n}\n\nexport type Writeable<T> = { -readonly [P in keyof T]: Writeable<T[P]> };\n\nexport abstract class AbstractTimerService implements ITimerService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _barrier = new Barrier();\n\tprivate readonly _marks = new PerfMarks();\n\tprivate _startupMetrics?: IStartupMetrics;\n\n\tconstructor(\n\t\t@ILifecycleService private readonly _lifecycleService: ILifecycleService,\n\t\t@IWorkspaceContextService private readonly _contextService: IWorkspaceContextService,\n\t\t@IExtensionService private readonly _extensionService: IExtensionService,\n\t\t@IUpdateService private readonly _updateService: IUpdateService,\n\t\t@IViewletService private readonly _viewletService: IViewletService,\n\t\t@IPanelService private readonly _panelService: IPanelService,\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@IAccessibilityService private readonly _accessibilityService: IAccessibilityService,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t\t@IWorkbenchLayoutService layoutService: IWorkbenchLayoutService\n\t) {\n\t\tPromise.all([\n\t\t\tthis._extensionService.whenInstalledExtensionsRegistered(), // extensions registered\n\t\t\t_lifecycleService.when(LifecyclePhase.Restored),\t\t\t// workbench created and parts restored\n\t\t\tlayoutService.whenRestored\t\t\t\t\t\t\t\t\t// layout restored (including visible editors resolved)\n\t\t]).then(() => {\n\t\t\t// set perf mark from renderer\n\t\t\tthis.setPerformanceMarks('renderer', perf.getMarks());\n\t\t\treturn this._computeStartupMetrics();\n\t\t}).then(metrics => {\n\t\t\tthis._startupMetrics = metrics;\n\t\t\tthis._reportStartupTimes(metrics);\n\t\t\tthis._barrier.open();\n\t\t});\n\t}\n\n\twhenReady(): Promise<boolean> {\n\t\treturn this._barrier.wait();\n\t}\n\n\tget startupMetrics(): IStartupMetrics {\n\t\tif (!this._startupMetrics) {\n\t\t\tthrow new Error('illegal state, MUST NOT access startupMetrics before whenReady has resolved');\n\t\t}\n\t\treturn this._startupMetrics;\n\t}\n\n\tsetPerformanceMarks(source: string, marks: perf.PerformanceMark[]): void {\n\t\t// Perf marks are a shared resource because anyone can generate them\n\t\t// and because of that we only accept marks that start with 'code/'\n\t\tthis._marks.setMarks(source, marks.filter(mark => mark.name.startsWith('code/')));\n\t}\n\n\tgetPerformanceMarks(): [source: string, marks: readonly perf.PerformanceMark[]][] {\n\t\treturn this._marks.getEntries();\n\t}\n\n\tprivate _reportStartupTimes(metrics: IStartupMetrics): void {\n\t\t// report IStartupMetrics as telemetry\n\t\t/* __GDPR__\n\t\t\t\"startupTimeVaried\" : {\n\t\t\t\t\"${include}\": [\n\t\t\t\t\t\"${IStartupMetrics}\"\n\t\t\t\t]\n\t\t\t}\n\t\t*/\n\t\tthis._telemetryService.publicLog('startupTimeVaried', metrics);\n\n\n\t\t// report raw timers as telemetry. each mark is send a separate telemetry\n\t\t// event and it is \"normalized\" to a relative timestamp where the first mark\n\t\t// defines the start\n\t\tfor (const [source, marks] of this.getPerformanceMarks()) {\n\t\t\ttype Mark = { source: string; name: string; relativeStartTime: number; startTime: number; };\n\t\t\ttype MarkClassification = {\n\t\t\t\tsource: { classification: 'SystemMetaData', purpose: 'PerformanceAndHealth'; },\n\t\t\t\tname: { classification: 'SystemMetaData', purpose: 'PerformanceAndHealth'; },\n\t\t\t\trelativeStartTime: { classification: 'SystemMetaData', purpose: 'PerformanceAndHealth', isMeasurement: true; },\n\t\t\t\tstartTime: { classification: 'SystemMetaData', purpose: 'PerformanceAndHealth', isMeasurement: true; },\n\t\t\t};\n\n\t\t\tlet lastMark: perf.PerformanceMark = marks[0];\n\t\t\tfor (const mark of marks) {\n\t\t\t\tlet delta = mark.startTime - lastMark.startTime;\n\t\t\t\tthis._telemetryService.publicLog2<Mark, MarkClassification>('startup.timer.mark', {\n\t\t\t\t\tsource,\n\t\t\t\t\tname: mark.name,\n\t\t\t\t\trelativeStartTime: delta,\n\t\t\t\t\tstartTime: mark.startTime\n\t\t\t\t});\n\t\t\t\tlastMark = mark;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async _computeStartupMetrics(): Promise<IStartupMetrics> {\n\t\tconst initialStartup = this._isInitialStartup();\n\t\tconst startMark = initialStartup ? 'code/didStartMain' : 'code/willOpenNewWindow';\n\n\t\tconst activeViewlet = this._viewletService.getActiveViewlet();\n\t\tconst activePanel = this._panelService.getActivePanel();\n\t\tconst info: Writeable<IStartupMetrics> = {\n\t\t\tversion: 2,\n\t\t\tellapsed: this._marks.getDuration(startMark, 'code/didStartWorkbench'),\n\n\t\t\t// reflections\n\t\t\tisLatestVersion: Boolean(await this._updateService.isLatestVersion()),\n\t\t\tdidUseCachedData: this._didUseCachedData(),\n\t\t\twindowKind: this._lifecycleService.startupKind,\n\t\t\twindowCount: await this._getWindowCount(),\n\t\t\tviewletId: activeViewlet?.getId(),\n\t\t\teditorIds: this._editorService.visibleEditors.map(input => input.typeId),\n\t\t\tpanelId: activePanel ? activePanel.getId() : undefined,\n\n\t\t\t// timers\n\t\t\ttimers: {\n\t\t\t\tellapsedAppReady: initialStartup ? this._marks.getDuration('code/didStartMain', 'code/mainAppReady') : undefined,\n\t\t\t\tellapsedNlsGeneration: initialStartup ? this._marks.getDuration('code/willGenerateNls', 'code/didGenerateNls') : undefined,\n\t\t\t\tellapsedLoadMainBundle: initialStartup ? this._marks.getDuration('code/willLoadMainBundle', 'code/didLoadMainBundle') : undefined,\n\t\t\t\tellapsedCrashReporter: initialStartup ? this._marks.getDuration('code/willStartCrashReporter', 'code/didStartCrashReporter') : undefined,\n\t\t\t\tellapsedMainServer: initialStartup ? this._marks.getDuration('code/willStartMainServer', 'code/didStartMainServer') : undefined,\n\t\t\t\tellapsedWindowCreate: initialStartup ? this._marks.getDuration('code/willCreateCodeWindow', 'code/didCreateCodeWindow') : undefined,\n\t\t\t\tellapsedWindowRestoreState: initialStartup ? this._marks.getDuration('code/willRestoreCodeWindowState', 'code/didRestoreCodeWindowState') : undefined,\n\t\t\t\tellapsedBrowserWindowCreate: initialStartup ? this._marks.getDuration('code/willCreateCodeBrowserWindow', 'code/didCreateCodeBrowserWindow') : undefined,\n\t\t\t\tellapsedWindowMaximize: initialStartup ? this._marks.getDuration('code/willMaximizeCodeWindow', 'code/didMaximizeCodeWindow') : undefined,\n\t\t\t\tellapsedWindowLoad: initialStartup ? this._marks.getDuration('code/mainAppReady', 'code/willOpenNewWindow') : undefined,\n\t\t\t\tellapsedWindowLoadToRequire: this._marks.getDuration('code/willOpenNewWindow', 'code/willLoadWorkbenchMain'),\n\t\t\t\tellapsedRequire: this._marks.getDuration('code/willLoadWorkbenchMain', 'code/didLoadWorkbenchMain'),\n\t\t\t\tellapsedWaitForWindowConfig: this._marks.getDuration('code/willWaitForWindowConfig', 'code/didWaitForWindowConfig'),\n\t\t\t\tellapsedWaitForShellEnv: this._marks.getDuration('code/willWaitForShellEnv', 'code/didWaitForShellEnv'),\n\t\t\t\tellapsedStorageInit: this._marks.getDuration('code/willInitStorage', 'code/didInitStorage'),\n\t\t\t\tellapsedSharedProcesConnected: this._marks.getDuration('code/willConnectSharedProcess', 'code/didConnectSharedProcess'),\n\t\t\t\tellapsedWorkspaceServiceInit: this._marks.getDuration('code/willInitWorkspaceService', 'code/didInitWorkspaceService'),\n\t\t\t\tellapsedRequiredUserDataInit: this._marks.getDuration('code/willInitRequiredUserData', 'code/didInitRequiredUserData'),\n\t\t\t\tellapsedOtherUserDataInit: this._marks.getDuration('code/willInitOtherUserData', 'code/didInitOtherUserData'),\n\t\t\t\tellapsedExtensions: this._marks.getDuration('code/willLoadExtensions', 'code/didLoadExtensions'),\n\t\t\t\tellapsedEditorRestore: this._marks.getDuration('code/willRestoreEditors', 'code/didRestoreEditors'),\n\t\t\t\tellapsedViewletRestore: this._marks.getDuration('code/willRestoreViewlet', 'code/didRestoreViewlet'),\n\t\t\t\tellapsedPanelRestore: this._marks.getDuration('code/willRestorePanel', 'code/didRestorePanel'),\n\t\t\t\tellapsedWorkbench: this._marks.getDuration('code/willStartWorkbench', 'code/didStartWorkbench'),\n\t\t\t\tellapsedExtensionsReady: this._marks.getDuration(startMark, 'code/didLoadExtensions'),\n\t\t\t\tellapsedRenderer: this._marks.getDuration('code/didStartRenderer', 'code/didStartWorkbench')\n\t\t\t},\n\n\t\t\t// system info\n\t\t\tplatform: undefined,\n\t\t\trelease: undefined,\n\t\t\tarch: undefined,\n\t\t\ttotalmem: undefined,\n\t\t\tfreemem: undefined,\n\t\t\tmeminfo: undefined,\n\t\t\tcpus: undefined,\n\t\t\tloadavg: undefined,\n\t\t\tisVMLikelyhood: undefined,\n\t\t\tinitialStartup,\n\t\t\thasAccessibilitySupport: this._accessibilityService.isScreenReaderOptimized(),\n\t\t\temptyWorkbench: this._contextService.getWorkbenchState() === WorkbenchState.EMPTY\n\t\t};\n\n\t\tawait this._extendStartupInfo(info);\n\t\treturn info;\n\t}\n\n\tprotected abstract _isInitialStartup(): boolean;\n\n\tprotected abstract _didUseCachedData(): boolean;\n\n\tprotected abstract _getWindowCount(): Promise<number>;\n\n\tprotected abstract _extendStartupInfo(info: Writeable<IStartupMetrics>): Promise<void>;\n}\n\n\nexport class TimerService extends AbstractTimerService {\n\n\tprotected _isInitialStartup(): boolean {\n\t\treturn false;\n\t}\n\tprotected _didUseCachedData(): boolean {\n\t\treturn false;\n\t}\n\tprotected async _getWindowCount(): Promise<number> {\n\t\treturn 1;\n\t}\n\tprotected async _extendStartupInfo(info: Writeable<IStartupMetrics>): Promise<void> {\n\t\tinfo.isVMLikelyhood = 0;\n\t\tinfo.platform = navigator.userAgent;\n\t\tinfo.release = navigator.appVersion;\n\t}\n}\n"]}