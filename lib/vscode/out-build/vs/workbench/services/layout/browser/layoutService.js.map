{"version":3,"file":"layoutService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/layout/browser/layoutService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAUnF,QAAA,uBAAuB,GAAG,CAAA,GAAA,sCAAsB,CAAA,CAA0C,8BAAc,CAAC,CAAC;IAEvH,IAAkB,KAOjB;IAPD,WAAkB,KAAK;QACtB,mDAA0C,CAAA;QAC1C,yDAAgD,CAAA;QAChD,iDAAwC,CAAA;QACxC,6CAAoC,CAAA;QACpC,+CAAsC,CAAA;QACtC,qDAA4C,CAAA;IAC7C,CAAC,EAPiB,KAAK,GAAL,aAAK,KAAL,aAAK,QAOtB;IAED,IAAkB,QAIjB;IAJD,WAAkB,QAAQ;QACzB,uCAAI,CAAA;QACJ,yCAAK,CAAA;QACL,2CAAM,CAAA;IACP,CAAC,EAJiB,QAAQ,GAAR,gBAAQ,KAAR,gBAAQ,QAIzB;IAED,IAAkB,0BAIjB;IAJD,WAAkB,0BAA0B;QAC3C,+EAAM,CAAA;QACN,6EAAK,CAAA;QACL,6FAAa,CAAA;IACd,CAAC,EAJiB,0BAA0B,GAA1B,kCAA0B,KAA1B,kCAA0B,QAI3C;IAED,SAAgB,gBAAgB,CAAC,QAAkB;QAClD,QAAQ,QAAQ,EAAE;YACjB,iBAAkB,CAAC,CAAC,OAAO,MAAM,CAAC;YAClC,kBAAmB,CAAC,CAAC,OAAO,OAAO,CAAC;YACpC,mBAAoB,CAAC,CAAC,OAAO,QAAQ,CAAC;YACtC,OAAO,CAAC,CAAC,OAAO,QAAQ,CAAC;SACzB;IACF,CAAC;IAPD,4CAOC;IAED,MAAM,iBAAiB,GAAiC;QACvD,CAAC,gBAAgB,cAAe,CAAC,cAAe;QAChD,CAAC,gBAAgB,eAAgB,CAAC,eAAgB;QAClD,CAAC,gBAAgB,gBAAiB,CAAC,gBAAiB;KACpD,CAAC;IAEF,SAAgB,kBAAkB,CAAC,GAAW;QAC7C,OAAO,iBAAiB,CAAC,GAAG,CAAC,CAAC;IAC/B,CAAC;IAFD,gDAEC;IAED,SAAgB,kCAAkC,CAAC,OAAmC;QACrF,QAAQ,OAAO,EAAE;YAChB,mBAAsC,CAAC,CAAC,OAAO,QAAQ,CAAC;YACxD,kBAAqC,CAAC,CAAC,OAAO,OAAO,CAAC;YACtD,0BAA6C,CAAC,CAAC,OAAO,UAAU,CAAC;YACjE,OAAO,CAAC,CAAC,OAAO,UAAU,CAAC;SAC3B;IACF,CAAC;IAPD,gFAOC;IAED,MAAM,2BAA2B,GAAmD;QACnF,CAAC,kCAAkC,gBAAmC,CAAC,gBAAmC;QAC1G,CAAC,kCAAkC,eAAkC,CAAC,eAAkC;QACxG,CAAC,kCAAkC,uBAA0C,CAAC,uBAA0C;KACxH,CAAC;IAEF,SAAgB,6BAA6B,CAAC,GAAW;QACxD,OAAO,2BAA2B,CAAC,GAAG,CAAC,CAAC;IACzC,CAAC;IAFD,sEAEC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { refineServiceDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { Event } from 'vs/base/common/event';\nimport { MenuBarVisibility } from 'vs/platform/windows/common/windows';\nimport { ILayoutService } from 'vs/platform/layout/browser/layoutService';\nimport { Part } from 'vs/workbench/browser/part';\nimport { Dimension } from 'vs/base/browser/dom';\nimport { Direction } from 'vs/base/browser/ui/grid/grid';\n\nexport const IWorkbenchLayoutService = refineServiceDecorator<ILayoutService, IWorkbenchLayoutService>(ILayoutService);\n\nexport const enum Parts {\n\tTITLEBAR_PART = 'workbench.parts.titlebar',\n\tACTIVITYBAR_PART = 'workbench.parts.activitybar',\n\tSIDEBAR_PART = 'workbench.parts.sidebar',\n\tPANEL_PART = 'workbench.parts.panel',\n\tEDITOR_PART = 'workbench.parts.editor',\n\tSTATUSBAR_PART = 'workbench.parts.statusbar'\n}\n\nexport const enum Position {\n\tLEFT,\n\tRIGHT,\n\tBOTTOM\n}\n\nexport const enum PanelOpensMaximizedOptions {\n\tALWAYS,\n\tNEVER,\n\tREMEMBER_LAST\n}\n\nexport function positionToString(position: Position): string {\n\tswitch (position) {\n\t\tcase Position.LEFT: return 'left';\n\t\tcase Position.RIGHT: return 'right';\n\t\tcase Position.BOTTOM: return 'bottom';\n\t\tdefault: return 'bottom';\n\t}\n}\n\nconst positionsByString: { [key: string]: Position; } = {\n\t[positionToString(Position.LEFT)]: Position.LEFT,\n\t[positionToString(Position.RIGHT)]: Position.RIGHT,\n\t[positionToString(Position.BOTTOM)]: Position.BOTTOM\n};\n\nexport function positionFromString(str: string): Position {\n\treturn positionsByString[str];\n}\n\nexport function panelOpensMaximizedSettingToString(setting: PanelOpensMaximizedOptions): string {\n\tswitch (setting) {\n\t\tcase PanelOpensMaximizedOptions.ALWAYS: return 'always';\n\t\tcase PanelOpensMaximizedOptions.NEVER: return 'never';\n\t\tcase PanelOpensMaximizedOptions.REMEMBER_LAST: return 'preserve';\n\t\tdefault: return 'preserve';\n\t}\n}\n\nconst panelOpensMaximizedByString: { [key: string]: PanelOpensMaximizedOptions; } = {\n\t[panelOpensMaximizedSettingToString(PanelOpensMaximizedOptions.ALWAYS)]: PanelOpensMaximizedOptions.ALWAYS,\n\t[panelOpensMaximizedSettingToString(PanelOpensMaximizedOptions.NEVER)]: PanelOpensMaximizedOptions.NEVER,\n\t[panelOpensMaximizedSettingToString(PanelOpensMaximizedOptions.REMEMBER_LAST)]: PanelOpensMaximizedOptions.REMEMBER_LAST\n};\n\nexport function panelOpensMaximizedFromString(str: string): PanelOpensMaximizedOptions {\n\treturn panelOpensMaximizedByString[str];\n}\n\nexport interface IWorkbenchLayoutService extends ILayoutService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Emits when the zen mode is enabled or disabled.\n\t */\n\treadonly onDidChangeZenMode: Event<boolean>;\n\n\t/**\n\t * Emits when fullscreen is enabled or disabled.\n\t */\n\treadonly onDidChangeFullscreen: Event<boolean>;\n\n\t/**\n\t * Emits when the window is maximized or unmaximized.\n\t */\n\treadonly onDidChangeWindowMaximized: Event<boolean>;\n\n\t/**\n\t * Emits when centered layout is enabled or disabled.\n\t */\n\treadonly onDidChangeCenteredLayout: Event<boolean>;\n\n\t/**\n\t * Emit when panel position changes.\n\t */\n\treadonly onDidChangePanelPosition: Event<string>;\n\n\t/**\n\t * Emit when part visibility changes\n\t */\n\treadonly onDidChangePartVisibility: Event<void>;\n\n\t/**\n\t * Emit when notifications (toasts or center) visibility changes.\n\t */\n\treadonly onDidChangeNotificationsVisibility: Event<boolean>;\n\n\t/**\n\t * True if a default layout with default editors was applied at startup\n\t */\n\treadonly openedDefaultEditors: boolean;\n\n\t/**\n\t * Run a layout of the workbench.\n\t */\n\tlayout(): void;\n\n\t/**\n\t * Asks the part service if all parts have been fully restored. For editor part\n\t * this means that the contents of visible editors have loaded.\n\t */\n\tisRestored(): boolean;\n\n\t/**\n\t * A promise for to await the `isRestored()` condition to be `true`.\n\t */\n\treadonly whenRestored: Promise<void>;\n\n\t/**\n\t * Returns whether the given part has the keyboard focus or not.\n\t */\n\thasFocus(part: Parts): boolean;\n\n\t/**\n\t * Focuses the part. If the part is not visible this is a noop.\n\t */\n\tfocusPart(part: Parts): void;\n\n\t/**\n\t * Returns the parts HTML element, if there is one.\n\t */\n\tgetContainer(part: Parts): HTMLElement | undefined;\n\n\t/**\n\t * Returns if the part is visible.\n\t */\n\tisVisible(part: Parts): boolean;\n\n\t/**\n\t * Returns if the part is visible.\n\t */\n\tgetDimension(part: Parts): Dimension | undefined;\n\n\t/**\n\t * Set activity bar hidden or not\n\t */\n\tsetActivityBarHidden(hidden: boolean): void;\n\n\t/**\n\t *\n\t * Set editor area hidden or not\n\t */\n\tsetEditorHidden(hidden: boolean): void;\n\n\t/**\n\t * Set sidebar hidden or not\n\t */\n\tsetSideBarHidden(hidden: boolean): void;\n\n\t/**\n\t * Set panel part hidden or not\n\t */\n\tsetPanelHidden(hidden: boolean): void;\n\n\t/**\n\t * Maximizes the panel height if the panel is not already maximized.\n\t * Shrinks the panel to the default starting size if the panel is maximized.\n\t */\n\ttoggleMaximizedPanel(): void;\n\n\t/**\n\t * Returns true if the window has a border.\n\t */\n\thasWindowBorder(): boolean;\n\n\t/**\n\t * Returns the window border width.\n\t */\n\tgetWindowBorderWidth(): number;\n\n\t/**\n\t * Returns the window border radius if any.\n\t */\n\tgetWindowBorderRadius(): string | undefined;\n\n\t/**\n\t * Returns true if the panel is maximized.\n\t */\n\tisPanelMaximized(): boolean;\n\n\t/**\n\t * Gets the current side bar position. Note that the sidebar can be hidden too.\n\t */\n\tgetSideBarPosition(): Position;\n\n\t/**\n\t * Gets the current menubar visibility.\n\t */\n\tgetMenubarVisibility(): MenuBarVisibility;\n\n\t/**\n\t * Toggles the menu bar visibility.\n\t */\n\ttoggleMenuBar(): void;\n\n\t/**\n\t * Gets the current panel position. Note that the panel can be hidden too.\n\t */\n\tgetPanelPosition(): Position;\n\n\t/**\n\t * Sets the panel position.\n\t */\n\tsetPanelPosition(position: Position): void;\n\n\t/**\n\t * Gets the maximum possible size for editor.\n\t */\n\tgetMaximumEditorDimensions(): Dimension;\n\n\t/**\n\t * Toggles the workbench in and out of zen mode - parts get hidden and window goes fullscreen.\n\t */\n\ttoggleZenMode(): void;\n\n\t/**\n\t * Returns whether the centered editor layout is active.\n\t */\n\tisEditorLayoutCentered(): boolean;\n\n\t/**\n\t * Sets the workbench in and out of centered editor layout.\n\t */\n\tcenterEditorLayout(active: boolean): void;\n\n\t/**\n\t * Resizes currently focused part on main access\n\t */\n\tresizePart(part: Parts, sizeChangeWidth: number, sizeChangeHeight: number): void;\n\n\t/**\n\t * Register a part to participate in the layout.\n\t */\n\tregisterPart(part: Part): void;\n\n\t/**\n\t * Returns whether the window is maximized.\n\t */\n\tisWindowMaximized(): boolean;\n\n\t/**\n\t * Updates the maximized state of the window.\n\t */\n\tupdateWindowMaximizedState(maximized: boolean): void;\n\n\t/**\n\t * Returns the next visible view part in a given direction\n\t */\n\tgetVisibleNeighborPart(part: Parts, direction: Direction): Parts | undefined;\n}\n"]}