{"version":3,"file":"requestService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/request/browser/requestService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAUhG,IAAa,qBAAqB,GAAlC,MAAa,qBAAsB,SAAQ,+BAAc;QAExD,YACuC,kBAAuC,EACtD,oBAA2C,EACrD,UAAuB;YAEpC,KAAK,CAAC,oBAAoB,EAAE,UAAU,CAAC,CAAC;YAJF,uBAAkB,GAAlB,kBAAkB,CAAqB;QAK9E,CAAC;QAEQ,KAAK,CAAC,OAAO,CAAC,OAAwB,EAAE,KAAwB;YACxE,IAAI;gBACH,MAAM,OAAO,GAAG,MAAM,KAAK,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;gBACpD,MAAM,UAAU,GAAG,IAAI,CAAC,kBAAkB,CAAC,aAAa,EAAE,CAAC;gBAC3D,IAAI,UAAU,IAAI,OAAO,CAAC,GAAG,CAAC,UAAU,KAAK,GAAG,EAAE;oBACjD,OAAO,IAAI,CAAC,kBAAkB,CAAC,UAAU,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;iBAC3D;gBACD,OAAO,OAAO,CAAC;aACf;YAAC,OAAO,KAAK,EAAE;gBACf,MAAM,UAAU,GAAG,IAAI,CAAC,kBAAkB,CAAC,aAAa,EAAE,CAAC;gBAC3D,IAAI,UAAU,EAAE;oBACf,OAAO,IAAI,CAAC,kBAAkB,CAAC,UAAU,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;iBAC3D;gBACD,MAAM,KAAK,CAAC;aACZ;QACF,CAAC;QAEO,kBAAkB,CAAC,UAAkC,EAAE,OAAwB,EAAE,KAAwB;YAChH,OAAO,UAAU,CAAC,WAAW,CAAC,SAAS,EAAE,OAAO,CAAC,EAAE,CAAC,iCAAoB,CAAC,OAAO,CAAC,OAAO,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;QAC5G,CAAC;KACD,CAAA;IA9BY,qBAAqB;QAG/B,WAAA,wCAAmB,CAAA;QACnB,WAAA,qCAAqB,CAAA;QACrB,WAAA,iBAAW,CAAA;OALD,qBAAqB,CA8BjC;IA9BY,sDAAqB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IRequestOptions, IRequestContext } from 'vs/base/parts/request/common/request';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { RequestChannelClient } from 'vs/platform/request/common/requestIpc';\nimport { IRemoteAgentService, IRemoteAgentConnection } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { RequestService } from 'vs/platform/request/browser/requestService';\n\nexport class BrowserRequestService extends RequestService {\n\n\tconstructor(\n\t\t@IRemoteAgentService private readonly remoteAgentService: IRemoteAgentService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@ILogService logService: ILogService\n\t) {\n\t\tsuper(configurationService, logService);\n\t}\n\n\toverride async request(options: IRequestOptions, token: CancellationToken): Promise<IRequestContext> {\n\t\ttry {\n\t\t\tconst context = await super.request(options, token);\n\t\t\tconst connection = this.remoteAgentService.getConnection();\n\t\t\tif (connection && context.res.statusCode === 405) {\n\t\t\t\treturn this._makeRemoteRequest(connection, options, token);\n\t\t\t}\n\t\t\treturn context;\n\t\t} catch (error) {\n\t\t\tconst connection = this.remoteAgentService.getConnection();\n\t\t\tif (connection) {\n\t\t\t\treturn this._makeRemoteRequest(connection, options, token);\n\t\t\t}\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate _makeRemoteRequest(connection: IRemoteAgentConnection, options: IRequestOptions, token: CancellationToken): Promise<IRequestContext> {\n\t\treturn connection.withChannel('request', channel => RequestChannelClient.request(channel, options, token));\n\t}\n}\n"]}