{"version":3,"file":"lifecycleService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/lifecycle/common/lifecycleService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAShG,IAAsB,wBAAwB,GAA9C,MAAsB,wBAAyB,SAAQ,sBAAU;QAqBhE,YACiC,UAAuB;YAEvD,KAAK,EAAE,CAAC;YAFwB,eAAU,GAAV,UAAU,CAAa;YAlBrC,sBAAiB,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,eAAO,EAAuB,CAAC,CAAC;YACjF,qBAAgB,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC;YAEtC,oBAAe,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,eAAO,EAAqB,CAAC,CAAC;YAC7E,mBAAc,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC;YAElC,mBAAc,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,eAAO,EAAQ,CAAC,CAAC;YAC/D,kBAAa,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC;YAEzC,iBAAY,qBAAsC;YAGpD,WAAM,oBAA2C;YAGxC,cAAS,GAAG,IAAI,GAAG,EAA2B,CAAC;QAMhE,CAAC;QAXD,IAAI,WAAW,KAAkB,OAAO,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;QAG5D,IAAI,KAAK,KAAqB,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QAUnD,IAAI,KAAK,CAAC,KAAqB;YAC9B,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,EAAE;gBACvB,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;aACjD;YAED,IAAI,IAAI,CAAC,MAAM,KAAK,KAAK,EAAE;gBAC1B,OAAO;aACP;YAED,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,oCAAoC,KAAK,GAAG,CAAC,CAAC;YAEpE,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YACpB,CAAA,GAAA,kBAAI,CAAA,CAAC,uBAAuB,CAAA,GAAA,kCAAsB,CAAA,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YAE7D,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAChD,IAAI,OAAO,EAAE;gBACZ,OAAO,CAAC,IAAI,EAAE,CAAC;gBACf,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aACnC;QACF,CAAC;QAED,KAAK,CAAC,IAAI,CAAC,KAAqB;YAC/B,IAAI,KAAK,IAAI,IAAI,CAAC,MAAM,EAAE;gBACzB,OAAO;aACP;YAED,IAAI,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACxC,IAAI,CAAC,OAAO,EAAE;gBACb,OAAO,GAAG,IAAI,eAAO,EAAE,CAAC;gBACxB,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;aACnC;YAED,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;QACtB,CAAC;KAMD,CAAA;IAlEqB,wBAAwB;QAsB3C,WAAA,iBAAW,CAAA;OAtBQ,wBAAwB,CAkE7C;IAlEqB,4DAAwB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from 'vs/base/common/event';\nimport { Barrier } from 'vs/base/common/async';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { ILifecycleService, BeforeShutdownEvent, WillShutdownEvent, StartupKind, LifecyclePhase, LifecyclePhaseToString } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { mark } from 'vs/base/common/performance';\n\nexport abstract class AbstractLifecycleService extends Disposable implements ILifecycleService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprotected readonly _onBeforeShutdown = this._register(new Emitter<BeforeShutdownEvent>());\n\treadonly onBeforeShutdown = this._onBeforeShutdown.event;\n\n\tprotected readonly _onWillShutdown = this._register(new Emitter<WillShutdownEvent>());\n\treadonly onWillShutdown = this._onWillShutdown.event;\n\n\tprotected readonly _onDidShutdown = this._register(new Emitter<void>());\n\treadonly onDidShutdown = this._onDidShutdown.event;\n\n\tprotected _startupKind: StartupKind = StartupKind.NewWindow;\n\tget startupKind(): StartupKind { return this._startupKind; }\n\n\tprivate _phase: LifecyclePhase = LifecyclePhase.Starting;\n\tget phase(): LifecyclePhase { return this._phase; }\n\n\tprivate readonly phaseWhen = new Map<LifecyclePhase, Barrier>();\n\n\tconstructor(\n\t\t@ILogService protected readonly logService: ILogService\n\t) {\n\t\tsuper();\n\t}\n\n\tset phase(value: LifecyclePhase) {\n\t\tif (value < this.phase) {\n\t\t\tthrow new Error('Lifecycle cannot go backwards');\n\t\t}\n\n\t\tif (this._phase === value) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.logService.trace(`lifecycle: phase changed (value: ${value})`);\n\n\t\tthis._phase = value;\n\t\tmark(`code/LifecyclePhase/${LifecyclePhaseToString(value)}`);\n\n\t\tconst barrier = this.phaseWhen.get(this._phase);\n\t\tif (barrier) {\n\t\t\tbarrier.open();\n\t\t\tthis.phaseWhen.delete(this._phase);\n\t\t}\n\t}\n\n\tasync when(phase: LifecyclePhase): Promise<void> {\n\t\tif (phase <= this._phase) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet barrier = this.phaseWhen.get(phase);\n\t\tif (!barrier) {\n\t\t\tbarrier = new Barrier();\n\t\t\tthis.phaseWhen.set(phase, barrier);\n\t\t}\n\n\t\tawait barrier.wait();\n\t}\n\n\t/**\n\t * Subclasses to implement the explicit shutdown method.\n\t */\n\tabstract shutdown(): void;\n}\n"]}