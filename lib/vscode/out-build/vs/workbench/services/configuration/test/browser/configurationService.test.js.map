{"version":3,"file":"configurationService.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/configuration/test/browser/configurationService.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport * as sinon from 'sinon';\nimport { URI } from 'vs/base/common/uri';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IConfigurationRegistry, Extensions as ConfigurationExtensions, ConfigurationScope } from 'vs/platform/configuration/common/configurationRegistry';\nimport { WorkspaceService } from 'vs/workbench/services/configuration/browser/configurationService';\nimport { ISingleFolderWorkspaceIdentifier, IWorkspaceIdentifier } from 'vs/platform/workspaces/common/workspaces';\nimport { ConfigurationEditingErrorCode } from 'vs/workbench/services/configuration/common/configurationEditingService';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { IWorkspaceContextService, WorkbenchState, IWorkspaceFoldersChangeEvent } from 'vs/platform/workspace/common/workspace';\nimport { ConfigurationTarget, IConfigurationService, IConfigurationChangeEvent } from 'vs/platform/configuration/common/configuration';\nimport { workbenchInstantiationService, RemoteFileSystemProvider, TestProductService, TestEnvironmentService, TestTextFileService } from 'vs/workbench/test/browser/workbenchTestServices';\nimport { TestInstantiationService } from 'vs/platform/instantiation/test/common/instantiationServiceMock';\nimport { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';\nimport { ITextModelService } from 'vs/editor/common/services/resolverService';\nimport { TextModelResolverService } from 'vs/workbench/services/textmodelResolver/common/textModelResolverService';\nimport { IJSONEditingService } from 'vs/workbench/services/configuration/common/jsonEditing';\nimport { JSONEditingService } from 'vs/workbench/services/configuration/common/jsonEditingService';\nimport { Schemas } from 'vs/base/common/network';\nimport { joinPath, dirname, basename } from 'vs/base/common/resources';\nimport { isLinux, isMacintosh } from 'vs/base/common/platform';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { FileService } from 'vs/platform/files/common/fileService';\nimport { NullLogService } from 'vs/platform/log/common/log';\nimport { IRemoteAgentEnvironment } from 'vs/platform/remote/common/remoteAgentEnvironment';\nimport { IConfigurationCache } from 'vs/workbench/services/configuration/common/configuration';\nimport { SignService } from 'vs/platform/sign/browser/signService';\nimport { FileUserDataProvider } from 'vs/workbench/services/userData/common/fileUserDataProvider';\nimport { IKeybindingEditingService, KeybindingsEditingService } from 'vs/workbench/services/keybinding/common/keybindingEditing';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { timeout } from 'vs/base/common/async';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { Event } from 'vs/base/common/event';\nimport { UriIdentityService } from 'vs/workbench/services/uriIdentity/common/uriIdentityService';\nimport { InMemoryFileSystemProvider } from 'vs/platform/files/common/inMemoryFilesystemProvider';\nimport { ConfigurationCache as BrowserConfigurationCache } from 'vs/workbench/services/configuration/browser/configurationCache';\nimport { BrowserWorkbenchEnvironmentService } from 'vs/workbench/services/environment/browser/environmentService';\nimport { RemoteAgentService } from 'vs/workbench/services/remote/browser/remoteAgentServiceImpl';\nimport { RemoteAuthorityResolverService } from 'vs/platform/remote/browser/remoteAuthorityResolverService';\nimport { hash } from 'vs/base/common/hash';\n\nfunction convertToWorkspacePayload(folder: URI): ISingleFolderWorkspaceIdentifier {\n\treturn {\n\t\tid: hash(folder.toString()).toString(16),\n\t\turi: folder\n\t};\n}\n\nclass ConfigurationCache extends BrowserConfigurationCache {\n\toverride needsCaching() { return false; }\n}\n\nconst ROOT = URI.file('tests').with({ scheme: 'vscode-tests' });\n\nsuite('WorkspaceContextService - Folder', () => {\n\n\tlet folderName = 'Folder A', folder: URI, testObject: WorkspaceService;\n\tconst disposables = new DisposableStore();\n\n\tsetup(async () => {\n\t\tconst logService = new NullLogService();\n\t\tconst fileService = disposables.add(new FileService(logService));\n\t\tconst fileSystemProvider = disposables.add(new InMemoryFileSystemProvider());\n\t\tfileService.registerProvider(ROOT.scheme, fileSystemProvider);\n\n\t\tfolder = joinPath(ROOT, folderName);\n\t\tawait fileService.createFolder(folder);\n\n\t\tconst environmentService = TestEnvironmentService;\n\t\tfileService.registerProvider(Schemas.userData, disposables.add(new FileUserDataProvider(ROOT.scheme, fileSystemProvider, Schemas.userData, new NullLogService())));\n\t\ttestObject = disposables.add(new WorkspaceService({ configurationCache: new ConfigurationCache() }, environmentService, fileService, new RemoteAgentService(null, environmentService, TestProductService, new RemoteAuthorityResolverService(undefined, undefined), new SignService(undefined), new NullLogService()), new UriIdentityService(fileService), new NullLogService()));\n\t\tawait (<WorkspaceService>testObject).initialize(convertToWorkspacePayload(folder));\n\t});\n\n\tteardown(() => disposables.clear());\n\n\ttest('getWorkspace()', () => {\n\t\tconst actual = testObject.getWorkspace();\n\n\t\tassert.strictEqual(actual.folders.length, 1);\n\t\tassert.strictEqual(actual.folders[0].uri.path, folder.path);\n\t\tassert.strictEqual(actual.folders[0].name, folderName);\n\t\tassert.strictEqual(actual.folders[0].index, 0);\n\t\tassert.ok(!actual.configuration);\n\t});\n\n\ttest('getWorkbenchState()', () => {\n\t\tconst actual = testObject.getWorkbenchState();\n\n\t\tassert.strictEqual(actual, WorkbenchState.FOLDER);\n\t});\n\n\ttest('getWorkspaceFolder()', () => {\n\t\tconst actual = testObject.getWorkspaceFolder(joinPath(folder, 'a'));\n\n\t\tassert.strictEqual(actual, testObject.getWorkspace().folders[0]);\n\t});\n\n\ttest('isCurrentWorkspace() => true', () => {\n\t\tassert.ok(testObject.isCurrentWorkspace(folder));\n\t});\n\n\ttest('isCurrentWorkspace() => false', () => {\n\t\tassert.ok(!testObject.isCurrentWorkspace(joinPath(dirname(folder), 'abc')));\n\t});\n\n\ttest('workspace is complete', () => testObject.getCompleteWorkspace());\n});\n\nsuite('WorkspaceContextService - Workspace', () => {\n\n\tlet testObject: WorkspaceService;\n\tconst disposables = new DisposableStore();\n\n\tsetup(async () => {\n\t\tconst logService = new NullLogService();\n\t\tconst fileService = disposables.add(new FileService(logService));\n\t\tconst fileSystemProvider = disposables.add(new InMemoryFileSystemProvider());\n\t\tfileService.registerProvider(ROOT.scheme, fileSystemProvider);\n\n\t\tconst appSettingsHome = joinPath(ROOT, 'user');\n\t\tconst folderA = joinPath(ROOT, 'a');\n\t\tconst folderB = joinPath(ROOT, 'b');\n\t\tconst configResource = joinPath(ROOT, 'vsctests.code-workspace');\n\t\tconst workspace = { folders: [{ path: folderA.path }, { path: folderB.path }] };\n\n\t\tawait fileService.createFolder(appSettingsHome);\n\t\tawait fileService.createFolder(folderA);\n\t\tawait fileService.createFolder(folderB);\n\t\tawait fileService.writeFile(configResource, VSBuffer.fromString(JSON.stringify(workspace, null, '\\t')));\n\n\t\tconst instantiationService = <TestInstantiationService>workbenchInstantiationService();\n\t\tconst environmentService = TestEnvironmentService;\n\t\tconst remoteAgentService = disposables.add(instantiationService.createInstance(RemoteAgentService, null));\n\t\tinstantiationService.stub(IRemoteAgentService, remoteAgentService);\n\t\tfileService.registerProvider(Schemas.userData, disposables.add(new FileUserDataProvider(ROOT.scheme, fileSystemProvider, Schemas.userData, new NullLogService())));\n\t\ttestObject = disposables.add(new WorkspaceService({ configurationCache: new ConfigurationCache() }, environmentService, fileService, remoteAgentService, new UriIdentityService(fileService), new NullLogService()));\n\n\t\tinstantiationService.stub(IWorkspaceContextService, testObject);\n\t\tinstantiationService.stub(IConfigurationService, testObject);\n\t\tinstantiationService.stub(IEnvironmentService, environmentService);\n\n\t\tawait testObject.initialize(getWorkspaceIdentifier(configResource));\n\t\ttestObject.acquireInstantiationService(instantiationService);\n\t});\n\n\tteardown(() => disposables.clear());\n\n\ttest('workspace folders', () => {\n\t\tconst actual = testObject.getWorkspace().folders;\n\n\t\tassert.strictEqual(actual.length, 2);\n\t\tassert.strictEqual(basename(actual[0].uri), 'a');\n\t\tassert.strictEqual(basename(actual[1].uri), 'b');\n\t});\n\n\ttest('getWorkbenchState()', () => {\n\t\tconst actual = testObject.getWorkbenchState();\n\n\t\tassert.strictEqual(actual, WorkbenchState.WORKSPACE);\n\t});\n\n\n\ttest('workspace is complete', () => testObject.getCompleteWorkspace());\n\n});\n\nsuite('WorkspaceContextService - Workspace Editing', () => {\n\n\tlet testObject: WorkspaceService, fileService: IFileService;\n\tconst disposables = new DisposableStore();\n\n\tsetup(async () => {\n\t\tconst logService = new NullLogService();\n\t\tfileService = disposables.add(new FileService(logService));\n\t\tconst fileSystemProvider = disposables.add(new InMemoryFileSystemProvider());\n\t\tfileService.registerProvider(ROOT.scheme, fileSystemProvider);\n\n\t\tconst appSettingsHome = joinPath(ROOT, 'user');\n\t\tconst folderA = joinPath(ROOT, 'a');\n\t\tconst folderB = joinPath(ROOT, 'b');\n\t\tconst configResource = joinPath(ROOT, 'vsctests.code-workspace');\n\t\tconst workspace = { folders: [{ path: folderA.path }, { path: folderB.path }] };\n\n\t\tawait fileService.createFolder(appSettingsHome);\n\t\tawait fileService.createFolder(folderA);\n\t\tawait fileService.createFolder(folderB);\n\t\tawait fileService.writeFile(configResource, VSBuffer.fromString(JSON.stringify(workspace, null, '\\t')));\n\n\t\tconst instantiationService = <TestInstantiationService>workbenchInstantiationService();\n\t\tconst environmentService = TestEnvironmentService;\n\t\tconst remoteAgentService = instantiationService.createInstance(RemoteAgentService, null);\n\t\tinstantiationService.stub(IRemoteAgentService, remoteAgentService);\n\t\tfileService.registerProvider(Schemas.userData, disposables.add(new FileUserDataProvider(ROOT.scheme, fileSystemProvider, Schemas.userData, new NullLogService())));\n\t\ttestObject = disposables.add(new WorkspaceService({ configurationCache: new ConfigurationCache() }, environmentService, fileService, remoteAgentService, new UriIdentityService(fileService), new NullLogService()));\n\n\t\tinstantiationService.stub(IFileService, fileService);\n\t\tinstantiationService.stub(IWorkspaceContextService, testObject);\n\t\tinstantiationService.stub(IConfigurationService, testObject);\n\t\tinstantiationService.stub(IEnvironmentService, environmentService);\n\n\t\tawait testObject.initialize(getWorkspaceIdentifier(configResource));\n\t\tinstantiationService.stub(ITextFileService, disposables.add(instantiationService.createInstance(TestTextFileService)));\n\t\tinstantiationService.stub(ITextModelService, disposables.add(instantiationService.createInstance(TextModelResolverService)));\n\t\ttestObject.acquireInstantiationService(instantiationService);\n\t});\n\n\tteardown(() => disposables.clear());\n\n\ttest('add folders', async () => {\n\t\tawait testObject.addFolders([{ uri: joinPath(ROOT, 'd') }, { uri: joinPath(ROOT, 'c') }]);\n\t\tconst actual = testObject.getWorkspace().folders;\n\n\t\tassert.strictEqual(actual.length, 4);\n\t\tassert.strictEqual(basename(actual[0].uri), 'a');\n\t\tassert.strictEqual(basename(actual[1].uri), 'b');\n\t\tassert.strictEqual(basename(actual[2].uri), 'd');\n\t\tassert.strictEqual(basename(actual[3].uri), 'c');\n\t});\n\n\ttest('add folders (at specific index)', async () => {\n\t\tawait testObject.addFolders([{ uri: joinPath(ROOT, 'd') }, { uri: joinPath(ROOT, 'c') }], 0);\n\t\tconst actual = testObject.getWorkspace().folders;\n\n\t\tassert.strictEqual(actual.length, 4);\n\t\tassert.strictEqual(basename(actual[0].uri), 'd');\n\t\tassert.strictEqual(basename(actual[1].uri), 'c');\n\t\tassert.strictEqual(basename(actual[2].uri), 'a');\n\t\tassert.strictEqual(basename(actual[3].uri), 'b');\n\t});\n\n\ttest('add folders (at specific wrong index)', async () => {\n\t\tawait testObject.addFolders([{ uri: joinPath(ROOT, 'd') }, { uri: joinPath(ROOT, 'c') }], 10);\n\t\tconst actual = testObject.getWorkspace().folders;\n\n\t\tassert.strictEqual(actual.length, 4);\n\t\tassert.strictEqual(basename(actual[0].uri), 'a');\n\t\tassert.strictEqual(basename(actual[1].uri), 'b');\n\t\tassert.strictEqual(basename(actual[2].uri), 'd');\n\t\tassert.strictEqual(basename(actual[3].uri), 'c');\n\t});\n\n\ttest('add folders (with name)', async () => {\n\t\tawait testObject.addFolders([{ uri: joinPath(ROOT, 'd'), name: 'DDD' }, { uri: joinPath(ROOT, 'c'), name: 'CCC' }]);\n\t\tconst actual = testObject.getWorkspace().folders;\n\n\t\tassert.strictEqual(actual.length, 4);\n\t\tassert.strictEqual(basename(actual[0].uri), 'a');\n\t\tassert.strictEqual(basename(actual[1].uri), 'b');\n\t\tassert.strictEqual(basename(actual[2].uri), 'd');\n\t\tassert.strictEqual(basename(actual[3].uri), 'c');\n\t\tassert.strictEqual(actual[2].name, 'DDD');\n\t\tassert.strictEqual(actual[3].name, 'CCC');\n\t});\n\n\ttest('add folders triggers change event', async () => {\n\t\tconst target = sinon.spy();\n\t\ttestObject.onWillChangeWorkspaceFolders(target);\n\t\ttestObject.onDidChangeWorkspaceFolders(target);\n\n\t\tconst addedFolders = [{ uri: joinPath(ROOT, 'd') }, { uri: joinPath(ROOT, 'c') }];\n\t\tawait testObject.addFolders(addedFolders);\n\n\t\tassert.strictEqual(target.callCount, 2, `Should be called only once but called ${target.callCount} times`);\n\t\tconst actual_1 = (<IWorkspaceFoldersChangeEvent>target.args[1][0]);\n\t\tassert.deepStrictEqual(actual_1.added.map(r => r.uri.toString()), addedFolders.map(a => a.uri.toString()));\n\t\tassert.deepStrictEqual(actual_1.removed, []);\n\t\tassert.deepStrictEqual(actual_1.changed, []);\n\t});\n\n\ttest('remove folders', async () => {\n\t\tawait testObject.removeFolders([testObject.getWorkspace().folders[0].uri]);\n\t\tconst actual = testObject.getWorkspace().folders;\n\n\t\tassert.strictEqual(actual.length, 1);\n\t\tassert.strictEqual(basename(actual[0].uri), 'b');\n\t});\n\n\ttest('remove folders triggers change event', async () => {\n\t\tconst target = sinon.spy();\n\t\ttestObject.onWillChangeWorkspaceFolders(target);\n\t\ttestObject.onDidChangeWorkspaceFolders(target);\n\t\tconst removedFolder = testObject.getWorkspace().folders[0];\n\t\tawait testObject.removeFolders([removedFolder.uri]);\n\n\t\tassert.strictEqual(target.callCount, 2, `Should be called only once but called ${target.callCount} times`);\n\t\tconst actual_1 = (<IWorkspaceFoldersChangeEvent>target.args[1][0]);\n\t\tassert.deepStrictEqual(actual_1.added, []);\n\t\tassert.deepStrictEqual(actual_1.removed.map(r => r.uri.toString()), [removedFolder.uri.toString()]);\n\t\tassert.deepStrictEqual(actual_1.changed.map(c => c.uri.toString()), [testObject.getWorkspace().folders[0].uri.toString()]);\n\t});\n\n\ttest('remove folders and add them back by writing into the file', async () => {\n\t\tconst folders = testObject.getWorkspace().folders;\n\t\tawait testObject.removeFolders([folders[0].uri]);\n\n\t\tconst promise = new Promise<void>((resolve, reject) => {\n\t\t\ttestObject.onDidChangeWorkspaceFolders(actual => {\n\t\t\t\ttry {\n\t\t\t\t\tassert.deepStrictEqual(actual.added.map(r => r.uri.toString()), [folders[0].uri.toString()]);\n\t\t\t\t\tresolve();\n\t\t\t\t} catch (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tconst workspace = { folders: [{ path: folders[0].uri.path }, { path: folders[1].uri.path }] };\n\t\tawait fileService.writeFile(testObject.getWorkspace().configuration!, VSBuffer.fromString(JSON.stringify(workspace, null, '\\t')));\n\t\tawait promise;\n\t});\n\n\ttest('update folders (remove last and add to end)', async () => {\n\t\tconst target = sinon.spy();\n\t\ttestObject.onWillChangeWorkspaceFolders(target);\n\t\ttestObject.onDidChangeWorkspaceFolders(target);\n\t\tconst addedFolders = [{ uri: joinPath(ROOT, 'd') }, { uri: joinPath(ROOT, 'c') }];\n\t\tconst removedFolders = [testObject.getWorkspace().folders[1]].map(f => f.uri);\n\t\tawait testObject.updateFolders(addedFolders, removedFolders);\n\n\t\tassert.strictEqual(target.callCount, 2, `Should be called only once but called ${target.callCount} times`);\n\t\tconst actual_1 = (<IWorkspaceFoldersChangeEvent>target.args[1][0]);\n\t\tassert.deepStrictEqual(actual_1.added.map(r => r.uri.toString()), addedFolders.map(a => a.uri.toString()));\n\t\tassert.deepStrictEqual(actual_1.removed.map(r_1 => r_1.uri.toString()), removedFolders.map(a_1 => a_1.toString()));\n\t\tassert.deepStrictEqual(actual_1.changed, []);\n\t});\n\n\ttest('update folders (rename first via add and remove)', async () => {\n\t\tconst target = sinon.spy();\n\t\ttestObject.onWillChangeWorkspaceFolders(target);\n\t\ttestObject.onDidChangeWorkspaceFolders(target);\n\t\tconst addedFolders = [{ uri: joinPath(ROOT, 'a'), name: 'The Folder' }];\n\t\tconst removedFolders = [testObject.getWorkspace().folders[0]].map(f => f.uri);\n\t\tawait testObject.updateFolders(addedFolders, removedFolders, 0);\n\n\t\tassert.strictEqual(target.callCount, 2, `Should be called only once but called ${target.callCount} times`);\n\t\tconst actual_1 = (<IWorkspaceFoldersChangeEvent>target.args[1][0]);\n\t\tassert.deepStrictEqual(actual_1.added, []);\n\t\tassert.deepStrictEqual(actual_1.removed, []);\n\t\tassert.deepStrictEqual(actual_1.changed.map(r => r.uri.toString()), removedFolders.map(a => a.toString()));\n\t});\n\n\ttest('update folders (remove first and add to end)', async () => {\n\t\tconst target = sinon.spy();\n\t\ttestObject.onWillChangeWorkspaceFolders(target);\n\t\ttestObject.onDidChangeWorkspaceFolders(target);\n\t\tconst addedFolders = [{ uri: joinPath(ROOT, 'd') }, { uri: joinPath(ROOT, 'c') }];\n\t\tconst removedFolders = [testObject.getWorkspace().folders[0]].map(f => f.uri);\n\t\tconst changedFolders = [testObject.getWorkspace().folders[1]].map(f => f.uri);\n\t\tawait testObject.updateFolders(addedFolders, removedFolders);\n\n\t\tassert.strictEqual(target.callCount, 2, `Should be called only once but called ${target.callCount} times`);\n\t\tconst actual_1 = (<IWorkspaceFoldersChangeEvent>target.args[1][0]);\n\t\tassert.deepStrictEqual(actual_1.added.map(r => r.uri.toString()), addedFolders.map(a => a.uri.toString()));\n\t\tassert.deepStrictEqual(actual_1.removed.map(r_1 => r_1.uri.toString()), removedFolders.map(a_1 => a_1.toString()));\n\t\tassert.deepStrictEqual(actual_1.changed.map(r_2 => r_2.uri.toString()), changedFolders.map(a_2 => a_2.toString()));\n\t});\n\n\ttest('reorder folders trigger change event', async () => {\n\t\tconst target = sinon.spy();\n\t\ttestObject.onWillChangeWorkspaceFolders(target);\n\t\ttestObject.onDidChangeWorkspaceFolders(target);\n\t\tconst workspace = { folders: [{ path: testObject.getWorkspace().folders[1].uri.path }, { path: testObject.getWorkspace().folders[0].uri.path }] };\n\t\tawait fileService.writeFile(testObject.getWorkspace().configuration!, VSBuffer.fromString(JSON.stringify(workspace, null, '\\t')));\n\t\tawait testObject.reloadConfiguration();\n\n\t\tassert.strictEqual(target.callCount, 2, `Should be called only once but called ${target.callCount} times`);\n\t\tconst actual_1 = (<IWorkspaceFoldersChangeEvent>target.args[1][0]);\n\t\tassert.deepStrictEqual(actual_1.added, []);\n\t\tassert.deepStrictEqual(actual_1.removed, []);\n\t\tassert.deepStrictEqual(actual_1.changed.map(c => c.uri.toString()), testObject.getWorkspace().folders.map(f => f.uri.toString()).reverse());\n\t});\n\n\ttest('rename folders trigger change event', async () => {\n\t\tconst target = sinon.spy();\n\t\ttestObject.onWillChangeWorkspaceFolders(target);\n\t\ttestObject.onDidChangeWorkspaceFolders(target);\n\t\tconst workspace = { folders: [{ path: testObject.getWorkspace().folders[0].uri.path, name: '1' }, { path: testObject.getWorkspace().folders[1].uri.path }] };\n\t\tfileService.writeFile(testObject.getWorkspace().configuration!, VSBuffer.fromString(JSON.stringify(workspace, null, '\\t')));\n\t\tawait testObject.reloadConfiguration();\n\n\t\tassert.strictEqual(target.callCount, 2, `Should be called only once but called ${target.callCount} times`);\n\t\tconst actual_1 = (<IWorkspaceFoldersChangeEvent>target.args[1][0]);\n\t\tassert.deepStrictEqual(actual_1.added, []);\n\t\tassert.deepStrictEqual(actual_1.removed, []);\n\t\tassert.deepStrictEqual(actual_1.changed.map(c => c.uri.toString()), [testObject.getWorkspace().folders[0].uri.toString()]);\n\t});\n\n});\n\nsuite('WorkspaceService - Initialization', () => {\n\n\tlet configResource: URI, testObject: WorkspaceService, fileService: IFileService, environmentService: BrowserWorkbenchEnvironmentService;\n\tconst configurationRegistry = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration);\n\tconst disposables = new DisposableStore();\n\n\tsuiteSetup(() => {\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'initialization.testSetting1': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.RESOURCE\n\t\t\t\t},\n\t\t\t\t'initialization.testSetting2': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.RESOURCE\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\n\tsetup(async () => {\n\t\tconst logService = new NullLogService();\n\t\tfileService = disposables.add(new FileService(logService));\n\t\tconst fileSystemProvider = disposables.add(new InMemoryFileSystemProvider());\n\t\tfileService.registerProvider(ROOT.scheme, fileSystemProvider);\n\n\t\tconst appSettingsHome = joinPath(ROOT, 'user');\n\t\tconst folderA = joinPath(ROOT, 'a');\n\t\tconst folderB = joinPath(ROOT, 'b');\n\t\tconfigResource = joinPath(ROOT, 'vsctests.code-workspace');\n\t\tconst workspace = { folders: [{ path: folderA.path }, { path: folderB.path }] };\n\n\t\tawait fileService.createFolder(appSettingsHome);\n\t\tawait fileService.createFolder(folderA);\n\t\tawait fileService.createFolder(folderB);\n\t\tawait fileService.writeFile(configResource, VSBuffer.fromString(JSON.stringify(workspace, null, '\\t')));\n\n\t\tconst instantiationService = <TestInstantiationService>workbenchInstantiationService();\n\t\tenvironmentService = TestEnvironmentService;\n\t\tconst remoteAgentService = instantiationService.createInstance(RemoteAgentService, null);\n\t\tinstantiationService.stub(IRemoteAgentService, remoteAgentService);\n\t\tfileService.registerProvider(Schemas.userData, disposables.add(new FileUserDataProvider(ROOT.scheme, fileSystemProvider, Schemas.userData, new NullLogService())));\n\t\ttestObject = disposables.add(new WorkspaceService({ configurationCache: new ConfigurationCache() }, environmentService, fileService, remoteAgentService, new UriIdentityService(fileService), new NullLogService()));\n\t\tinstantiationService.stub(IFileService, fileService);\n\t\tinstantiationService.stub(IWorkspaceContextService, testObject);\n\t\tinstantiationService.stub(IConfigurationService, testObject);\n\t\tinstantiationService.stub(IEnvironmentService, environmentService);\n\n\t\tawait testObject.initialize({ id: '' });\n\t\tinstantiationService.stub(ITextFileService, instantiationService.createInstance(TestTextFileService));\n\t\tinstantiationService.stub(ITextModelService, <ITextModelService>instantiationService.createInstance(TextModelResolverService));\n\t\ttestObject.acquireInstantiationService(instantiationService);\n\t});\n\n\tteardown(() => disposables.clear());\n\n\t(isMacintosh ? test.skip : test)('initialize a folder workspace from an empty workspace with no configuration changes', async () => {\n\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"initialization.testSetting1\": \"userValue\" }'));\n\n\t\tawait testObject.reloadConfiguration();\n\t\tconst target = sinon.spy();\n\t\ttestObject.onDidChangeWorkbenchState(target);\n\t\ttestObject.onDidChangeWorkspaceName(target);\n\t\ttestObject.onWillChangeWorkspaceFolders(target);\n\t\ttestObject.onDidChangeWorkspaceFolders(target);\n\t\ttestObject.onDidChangeConfiguration(target);\n\n\t\tconst folder = joinPath(ROOT, 'a');\n\t\tawait testObject.initialize(convertToWorkspacePayload(folder));\n\n\t\tassert.strictEqual(testObject.getValue('initialization.testSetting1'), 'userValue');\n\t\tassert.strictEqual(target.callCount, 4);\n\t\tassert.deepStrictEqual(target.args[0], [WorkbenchState.FOLDER]);\n\t\tassert.deepStrictEqual(target.args[1], [undefined]);\n\t\tassert.deepStrictEqual((<IWorkspaceFoldersChangeEvent>target.args[3][0]).added.map(f => f.uri.toString()), [folder.toString()]);\n\t\tassert.deepStrictEqual((<IWorkspaceFoldersChangeEvent>target.args[3][0]).removed, []);\n\t\tassert.deepStrictEqual((<IWorkspaceFoldersChangeEvent>target.args[3][0]).changed, []);\n\n\t});\n\n\t(isMacintosh ? test.skip : test)('initialize a folder workspace from an empty workspace with configuration changes', async () => {\n\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"initialization.testSetting1\": \"userValue\" }'));\n\n\t\tawait testObject.reloadConfiguration();\n\t\tconst target = sinon.spy();\n\t\ttestObject.onDidChangeWorkbenchState(target);\n\t\ttestObject.onDidChangeWorkspaceName(target);\n\t\ttestObject.onWillChangeWorkspaceFolders(target);\n\t\ttestObject.onDidChangeWorkspaceFolders(target);\n\t\ttestObject.onDidChangeConfiguration(target);\n\n\t\tconst folder = joinPath(ROOT, 'a');\n\t\tawait fileService.writeFile(joinPath(folder, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"initialization.testSetting1\": \"workspaceValue\" }'));\n\t\tawait testObject.initialize(convertToWorkspacePayload(folder));\n\n\t\tassert.strictEqual(testObject.getValue('initialization.testSetting1'), 'workspaceValue');\n\t\tassert.strictEqual(target.callCount, 5);\n\t\tassert.deepStrictEqual((<IConfigurationChangeEvent>target.args[0][0]).affectedKeys, ['initialization.testSetting1']);\n\t\tassert.deepStrictEqual(target.args[1], [WorkbenchState.FOLDER]);\n\t\tassert.deepStrictEqual(target.args[2], [undefined]);\n\t\tassert.deepStrictEqual((<IWorkspaceFoldersChangeEvent>target.args[4][0]).added.map(f => f.uri.toString()), [folder.toString()]);\n\t\tassert.deepStrictEqual((<IWorkspaceFoldersChangeEvent>target.args[4][0]).removed, []);\n\t\tassert.deepStrictEqual((<IWorkspaceFoldersChangeEvent>target.args[4][0]).changed, []);\n\n\t});\n\n\t(isMacintosh ? test.skip : test)('initialize a multi root workspace from an empty workspace with no configuration changes', async () => {\n\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"initialization.testSetting1\": \"userValue\" }'));\n\n\t\tawait testObject.reloadConfiguration();\n\t\tconst target = sinon.spy();\n\t\ttestObject.onDidChangeWorkbenchState(target);\n\t\ttestObject.onDidChangeWorkspaceName(target);\n\t\ttestObject.onWillChangeWorkspaceFolders(target);\n\t\ttestObject.onDidChangeWorkspaceFolders(target);\n\t\ttestObject.onDidChangeConfiguration(target);\n\n\t\tawait testObject.initialize(getWorkspaceIdentifier(configResource));\n\n\t\tassert.strictEqual(target.callCount, 4);\n\t\tassert.deepStrictEqual(target.args[0], [WorkbenchState.WORKSPACE]);\n\t\tassert.deepStrictEqual(target.args[1], [undefined]);\n\t\tassert.deepStrictEqual((<IWorkspaceFoldersChangeEvent>target.args[3][0]).added.map(folder => folder.uri.toString()), [joinPath(ROOT, 'a').toString(), joinPath(ROOT, 'b').toString()]);\n\t\tassert.deepStrictEqual((<IWorkspaceFoldersChangeEvent>target.args[3][0]).removed, []);\n\t\tassert.deepStrictEqual((<IWorkspaceFoldersChangeEvent>target.args[3][0]).changed, []);\n\n\t});\n\n\t(isMacintosh ? test.skip : test)('initialize a multi root workspace from an empty workspace with configuration changes', async () => {\n\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"initialization.testSetting1\": \"userValue\" }'));\n\n\t\tawait testObject.reloadConfiguration();\n\t\tconst target = sinon.spy();\n\t\ttestObject.onDidChangeWorkbenchState(target);\n\t\ttestObject.onDidChangeWorkspaceName(target);\n\t\ttestObject.onWillChangeWorkspaceFolders(target);\n\t\ttestObject.onDidChangeWorkspaceFolders(target);\n\t\ttestObject.onDidChangeConfiguration(target);\n\n\t\tawait fileService.writeFile(joinPath(ROOT, 'a', '.vscode', 'settings.json'), VSBuffer.fromString('{ \"initialization.testSetting1\": \"workspaceValue1\" }'));\n\t\tawait fileService.writeFile(joinPath(ROOT, 'b', '.vscode', 'settings.json'), VSBuffer.fromString('{ \"initialization.testSetting2\": \"workspaceValue2\" }'));\n\t\tawait testObject.initialize(getWorkspaceIdentifier(configResource));\n\n\t\tassert.strictEqual(target.callCount, 5);\n\t\tassert.deepStrictEqual((<IConfigurationChangeEvent>target.args[0][0]).affectedKeys, ['initialization.testSetting1', 'initialization.testSetting2']);\n\t\tassert.deepStrictEqual(target.args[1], [WorkbenchState.WORKSPACE]);\n\t\tassert.deepStrictEqual(target.args[2], [undefined]);\n\t\tassert.deepStrictEqual((<IWorkspaceFoldersChangeEvent>target.args[4][0]).added.map(folder => folder.uri.toString()), [joinPath(ROOT, 'a').toString(), joinPath(ROOT, 'b').toString()]);\n\t\tassert.deepStrictEqual((<IWorkspaceFoldersChangeEvent>target.args[4][0]).removed, []);\n\t\tassert.deepStrictEqual((<IWorkspaceFoldersChangeEvent>target.args[4][0]).changed, []);\n\n\t});\n\n\t(isMacintosh ? test.skip : test)('initialize a folder workspace from a folder workspace with no configuration changes', async () => {\n\n\t\tawait testObject.initialize(convertToWorkspacePayload(joinPath(ROOT, 'a')));\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"initialization.testSetting1\": \"userValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\t\tconst target = sinon.spy();\n\t\ttestObject.onDidChangeWorkbenchState(target);\n\t\ttestObject.onDidChangeWorkspaceName(target);\n\t\ttestObject.onWillChangeWorkspaceFolders(target);\n\t\ttestObject.onDidChangeWorkspaceFolders(target);\n\t\ttestObject.onDidChangeConfiguration(target);\n\n\t\tawait testObject.initialize(convertToWorkspacePayload(joinPath(ROOT, 'b')));\n\n\t\tassert.strictEqual(testObject.getValue('initialization.testSetting1'), 'userValue');\n\t\tassert.strictEqual(target.callCount, 2);\n\t\tassert.deepStrictEqual((<IWorkspaceFoldersChangeEvent>target.args[1][0]).added.map(folder_1 => folder_1.uri.toString()), [joinPath(ROOT, 'b').toString()]);\n\t\tassert.deepStrictEqual((<IWorkspaceFoldersChangeEvent>target.args[1][0]).removed.map(folder_2 => folder_2.uri.toString()), [joinPath(ROOT, 'a').toString()]);\n\t\tassert.deepStrictEqual((<IWorkspaceFoldersChangeEvent>target.args[1][0]).changed, []);\n\n\t});\n\n\t(isMacintosh ? test.skip : test)('initialize a folder workspace from a folder workspace with configuration changes', async () => {\n\n\t\tawait testObject.initialize(convertToWorkspacePayload(joinPath(ROOT, 'a')));\n\t\tconst target = sinon.spy();\n\t\ttestObject.onDidChangeWorkbenchState(target);\n\t\ttestObject.onDidChangeWorkspaceName(target);\n\t\ttestObject.onWillChangeWorkspaceFolders(target);\n\t\ttestObject.onDidChangeWorkspaceFolders(target);\n\t\ttestObject.onDidChangeConfiguration(target);\n\n\t\tawait fileService.writeFile(joinPath(ROOT, 'b', '.vscode', 'settings.json'), VSBuffer.fromString('{ \"initialization.testSetting1\": \"workspaceValue2\" }'));\n\t\tawait testObject.initialize(convertToWorkspacePayload(joinPath(ROOT, 'b')));\n\n\t\tassert.strictEqual(testObject.getValue('initialization.testSetting1'), 'workspaceValue2');\n\t\tassert.strictEqual(target.callCount, 3);\n\t\tassert.deepStrictEqual((<IConfigurationChangeEvent>target.args[0][0]).affectedKeys, ['initialization.testSetting1']);\n\t\tassert.deepStrictEqual((<IWorkspaceFoldersChangeEvent>target.args[2][0]).added.map(folder_1 => folder_1.uri.toString()), [joinPath(ROOT, 'b').toString()]);\n\t\tassert.deepStrictEqual((<IWorkspaceFoldersChangeEvent>target.args[2][0]).removed.map(folder_2 => folder_2.uri.toString()), [joinPath(ROOT, 'a').toString()]);\n\t\tassert.deepStrictEqual((<IWorkspaceFoldersChangeEvent>target.args[2][0]).changed, []);\n\n\t});\n\n\t(isMacintosh ? test.skip : test)('initialize a multi folder workspace from a folder workspacce triggers change events in the right order', async () => {\n\t\tawait testObject.initialize(convertToWorkspacePayload(joinPath(ROOT, 'a')));\n\t\tconst target = sinon.spy();\n\t\ttestObject.onDidChangeWorkbenchState(target);\n\t\ttestObject.onDidChangeWorkspaceName(target);\n\t\ttestObject.onWillChangeWorkspaceFolders(target);\n\t\ttestObject.onDidChangeWorkspaceFolders(target);\n\t\ttestObject.onDidChangeConfiguration(target);\n\n\t\tawait fileService.writeFile(joinPath(ROOT, 'a', '.vscode', 'settings.json'), VSBuffer.fromString('{ \"initialization.testSetting1\": \"workspaceValue2\" }'));\n\t\tawait testObject.initialize(getWorkspaceIdentifier(configResource));\n\n\t\tassert.strictEqual(target.callCount, 5);\n\t\tassert.deepStrictEqual((<IConfigurationChangeEvent>target.args[0][0]).affectedKeys, ['initialization.testSetting1']);\n\t\tassert.deepStrictEqual(target.args[1], [WorkbenchState.WORKSPACE]);\n\t\tassert.deepStrictEqual(target.args[2], [undefined]);\n\t\tassert.deepStrictEqual((<IWorkspaceFoldersChangeEvent>target.args[4][0]).added.map(folder_1 => folder_1.uri.toString()), [joinPath(ROOT, 'b').toString()]);\n\t\tassert.deepStrictEqual((<IWorkspaceFoldersChangeEvent>target.args[4][0]).removed, []);\n\t\tassert.deepStrictEqual((<IWorkspaceFoldersChangeEvent>target.args[4][0]).changed, []);\n\t});\n\n});\n\nsuite('WorkspaceConfigurationService - Folder', () => {\n\n\tlet testObject: WorkspaceService, workspaceService: WorkspaceService, fileService: IFileService, environmentService: BrowserWorkbenchEnvironmentService;\n\tconst configurationRegistry = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration);\n\tconst disposables: DisposableStore = new DisposableStore();\n\n\tsuiteSetup(() => {\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configurationService.folder.applicationSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.APPLICATION\n\t\t\t\t},\n\t\t\t\t'configurationService.folder.machineSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.MACHINE\n\t\t\t\t},\n\t\t\t\t'configurationService.folder.machineOverridableSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.MACHINE_OVERRIDABLE\n\t\t\t\t},\n\t\t\t\t'configurationService.folder.testSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.RESOURCE\n\t\t\t\t},\n\t\t\t\t'configurationService.folder.languageSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.LANGUAGE_OVERRIDABLE\n\t\t\t\t},\n\t\t\t\t'configurationService.folder.restrictedSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\trestricted: true\n\t\t\t\t},\n\t\t\t}\n\t\t});\n\t});\n\n\tsetup(async () => {\n\t\tconst logService = new NullLogService();\n\t\tfileService = disposables.add(new FileService(logService));\n\t\tconst fileSystemProvider = disposables.add(new InMemoryFileSystemProvider());\n\t\tfileService.registerProvider(ROOT.scheme, fileSystemProvider);\n\n\t\tconst folder = joinPath(ROOT, 'a');\n\t\tawait fileService.createFolder(folder);\n\n\t\tconst instantiationService = <TestInstantiationService>workbenchInstantiationService();\n\t\tenvironmentService = TestEnvironmentService;\n\t\tconst remoteAgentService = instantiationService.createInstance(RemoteAgentService, null);\n\t\tinstantiationService.stub(IRemoteAgentService, remoteAgentService);\n\t\tfileService.registerProvider(Schemas.userData, disposables.add(new FileUserDataProvider(ROOT.scheme, fileSystemProvider, Schemas.userData, new NullLogService())));\n\t\tworkspaceService = testObject = disposables.add(new WorkspaceService({ configurationCache: new ConfigurationCache() }, environmentService, fileService, remoteAgentService, new UriIdentityService(fileService), new NullLogService()));\n\t\tinstantiationService.stub(IFileService, fileService);\n\t\tinstantiationService.stub(IWorkspaceContextService, testObject);\n\t\tinstantiationService.stub(IConfigurationService, testObject);\n\t\tinstantiationService.stub(IEnvironmentService, environmentService);\n\n\t\tawait workspaceService.initialize(convertToWorkspacePayload(folder));\n\t\tinstantiationService.stub(IKeybindingEditingService, instantiationService.createInstance(KeybindingsEditingService));\n\t\tinstantiationService.stub(ITextFileService, instantiationService.createInstance(TestTextFileService));\n\t\tinstantiationService.stub(ITextModelService, <ITextModelService>instantiationService.createInstance(TextModelResolverService));\n\t\tworkspaceService.acquireInstantiationService(instantiationService);\n\t});\n\n\tteardown(() => disposables.clear());\n\n\ttest('defaults', () => {\n\t\tassert.deepStrictEqual(testObject.getValue('configurationService'), { 'folder': { 'applicationSetting': 'isSet', 'machineSetting': 'isSet', 'machineOverridableSetting': 'isSet', 'testSetting': 'isSet', 'languageSetting': 'isSet', 'restrictedSetting': 'isSet' } });\n\t});\n\n\ttest('globals override defaults', async () => {\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.testSetting\": \"userValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.testSetting'), 'userValue');\n\t});\n\n\ttest('globals', async () => {\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"testworkbench.editor.tabs\": true }'));\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.getValue('testworkbench.editor.tabs'), true);\n\t});\n\n\ttest('workspace settings', async () => {\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"testworkbench.editor.icons\": true }'));\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.getValue('testworkbench.editor.icons'), true);\n\t});\n\n\ttest('workspace settings override user settings', async () => {\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.testSetting\": \"userValue\" }'));\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.testSetting\": \"workspaceValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.testSetting'), 'workspaceValue');\n\t});\n\n\ttest('machine overridable settings override user Settings', async () => {\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.machineOverridableSetting\": \"userValue\" }'));\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.machineOverridableSetting\": \"workspaceValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.machineOverridableSetting'), 'workspaceValue');\n\t});\n\n\ttest('workspace settings override user settings after defaults are registered ', async () => {\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.newSetting\": \"userValue\" }'));\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.newSetting\": \"workspaceValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configurationService.folder.newSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet'\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.newSetting'), 'workspaceValue');\n\t});\n\n\ttest('machine overridable settings override user settings after defaults are registered ', async () => {\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.newMachineOverridableSetting\": \"userValue\" }'));\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.newMachineOverridableSetting\": \"workspaceValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configurationService.folder.newMachineOverridableSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.MACHINE_OVERRIDABLE\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.newMachineOverridableSetting'), 'workspaceValue');\n\t});\n\n\ttest('application settings are not read from workspace', async () => {\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.applicationSetting\": \"userValue\" }'));\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.applicationSetting\": \"workspaceValue\" }'));\n\n\t\tawait testObject.reloadConfiguration();\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.applicationSetting'), 'userValue');\n\t});\n\n\ttest('application settings are not read from workspace when workspace folder uri is passed', async () => {\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.applicationSetting\": \"userValue\" }'));\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.applicationSetting\": \"workspaceValue\" }'));\n\n\t\tawait testObject.reloadConfiguration();\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.applicationSetting', { resource: workspaceService.getWorkspace().folders[0].uri }), 'userValue');\n\t});\n\n\ttest('machine settings are not read from workspace', async () => {\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.machineSetting\": \"userValue\" }'));\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.machineSetting\": \"workspaceValue\" }'));\n\n\t\tawait testObject.reloadConfiguration();\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.machineSetting', { resource: workspaceService.getWorkspace().folders[0].uri }), 'userValue');\n\t});\n\n\ttest('machine settings are not read from workspace when workspace folder uri is passed', async () => {\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.machineSetting\": \"userValue\" }'));\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.machineSetting\": \"workspaceValue\" }'));\n\n\t\tawait testObject.reloadConfiguration();\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.machineSetting', { resource: workspaceService.getWorkspace().folders[0].uri }), 'userValue');\n\t});\n\n\ttest('get application scope settings are not loaded after defaults are registered', async () => {\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.applicationSetting-2\": \"userValue\" }'));\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.applicationSetting-2\": \"workspaceValue\" }'));\n\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.applicationSetting-2'), 'workspaceValue');\n\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configurationService.folder.applicationSetting-2': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.APPLICATION\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.applicationSetting-2'), 'userValue');\n\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.applicationSetting-2'), 'userValue');\n\t});\n\n\ttest('get application scope settings are not loaded after defaults are registered when workspace folder uri is passed', async () => {\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.applicationSetting-3\": \"userValue\" }'));\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.applicationSetting-3\": \"workspaceValue\" }'));\n\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.applicationSetting-3', { resource: workspaceService.getWorkspace().folders[0].uri }), 'workspaceValue');\n\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configurationService.folder.applicationSetting-3': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.APPLICATION\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.applicationSetting-3', { resource: workspaceService.getWorkspace().folders[0].uri }), 'userValue');\n\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.applicationSetting-3', { resource: workspaceService.getWorkspace().folders[0].uri }), 'userValue');\n\t});\n\n\ttest('get machine scope settings are not loaded after defaults are registered', async () => {\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.machineSetting-2\": \"userValue\" }'));\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.machineSetting-2\": \"workspaceValue\" }'));\n\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.machineSetting-2'), 'workspaceValue');\n\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configurationService.folder.machineSetting-2': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.MACHINE\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.machineSetting-2'), 'userValue');\n\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.machineSetting-2'), 'userValue');\n\t});\n\n\ttest('get machine scope settings are not loaded after defaults are registered when workspace folder uri is passed', async () => {\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.machineSetting-3\": \"userValue\" }'));\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.machineSetting-3\": \"workspaceValue\" }'));\n\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.machineSetting-3', { resource: workspaceService.getWorkspace().folders[0].uri }), 'workspaceValue');\n\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configurationService.folder.machineSetting-3': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.MACHINE\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.machineSetting-3', { resource: workspaceService.getWorkspace().folders[0].uri }), 'userValue');\n\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.machineSetting-3', { resource: workspaceService.getWorkspace().folders[0].uri }), 'userValue');\n\t});\n\n\ttest('reload configuration emits events after global configuraiton changes', async () => {\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"testworkbench.editor.tabs\": true }'));\n\t\tconst target = sinon.spy();\n\t\ttestObject.onDidChangeConfiguration(target);\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.ok(target.called);\n\t});\n\n\ttest('reload configuration emits events after workspace configuraiton changes', async () => {\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.testSetting\": \"workspaceValue\" }'));\n\t\tconst target = sinon.spy();\n\t\ttestObject.onDidChangeConfiguration(target);\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.ok(target.called);\n\t});\n\n\ttest('reload configuration should not emit event if no changes', async () => {\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"testworkbench.editor.tabs\": true }'));\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.testSetting\": \"workspaceValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\t\tconst target = sinon.spy();\n\t\ttestObject.onDidChangeConfiguration(() => { target(); });\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.ok(!target.called);\n\t});\n\n\ttest('inspect', async () => {\n\t\tlet actual = testObject.inspect('something.missing');\n\t\tassert.strictEqual(actual.defaultValue, undefined);\n\t\tassert.strictEqual(actual.userValue, undefined);\n\t\tassert.strictEqual(actual.workspaceValue, undefined);\n\t\tassert.strictEqual(actual.workspaceFolderValue, undefined);\n\t\tassert.strictEqual(actual.value, undefined);\n\n\t\tactual = testObject.inspect('configurationService.folder.testSetting');\n\t\tassert.strictEqual(actual.defaultValue, 'isSet');\n\t\tassert.strictEqual(actual.userValue, undefined);\n\t\tassert.strictEqual(actual.workspaceValue, undefined);\n\t\tassert.strictEqual(actual.workspaceFolderValue, undefined);\n\t\tassert.strictEqual(actual.value, 'isSet');\n\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.testSetting\": \"userValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\t\tactual = testObject.inspect('configurationService.folder.testSetting');\n\t\tassert.strictEqual(actual.defaultValue, 'isSet');\n\t\tassert.strictEqual(actual.userValue, 'userValue');\n\t\tassert.strictEqual(actual.workspaceValue, undefined);\n\t\tassert.strictEqual(actual.workspaceFolderValue, undefined);\n\t\tassert.strictEqual(actual.value, 'userValue');\n\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.testSetting\": \"workspaceValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\t\tactual = testObject.inspect('configurationService.folder.testSetting');\n\t\tassert.strictEqual(actual.defaultValue, 'isSet');\n\t\tassert.strictEqual(actual.userValue, 'userValue');\n\t\tassert.strictEqual(actual.workspaceValue, 'workspaceValue');\n\t\tassert.strictEqual(actual.workspaceFolderValue, undefined);\n\t\tassert.strictEqual(actual.value, 'workspaceValue');\n\t});\n\n\ttest('keys', async () => {\n\t\tlet actual = testObject.keys();\n\t\tassert.ok(actual.default.indexOf('configurationService.folder.testSetting') !== -1);\n\t\tassert.deepStrictEqual(actual.user, []);\n\t\tassert.deepStrictEqual(actual.workspace, []);\n\t\tassert.deepStrictEqual(actual.workspaceFolder, []);\n\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.testSetting\": \"userValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\t\tactual = testObject.keys();\n\t\tassert.ok(actual.default.indexOf('configurationService.folder.testSetting') !== -1);\n\t\tassert.deepStrictEqual(actual.user, ['configurationService.folder.testSetting']);\n\t\tassert.deepStrictEqual(actual.workspace, []);\n\t\tassert.deepStrictEqual(actual.workspaceFolder, []);\n\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.testSetting\": \"workspaceValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\t\tactual = testObject.keys();\n\t\tassert.ok(actual.default.indexOf('configurationService.folder.testSetting') !== -1);\n\t\tassert.deepStrictEqual(actual.user, ['configurationService.folder.testSetting']);\n\t\tassert.deepStrictEqual(actual.workspace, ['configurationService.folder.testSetting']);\n\t\tassert.deepStrictEqual(actual.workspaceFolder, []);\n\t});\n\n\ttest('update user configuration', () => {\n\t\treturn testObject.updateValue('configurationService.folder.testSetting', 'value', ConfigurationTarget.USER)\n\t\t\t.then(() => assert.strictEqual(testObject.getValue('configurationService.folder.testSetting'), 'value'));\n\t});\n\n\ttest('update workspace configuration', () => {\n\t\treturn testObject.updateValue('tasks.service.testSetting', 'value', ConfigurationTarget.WORKSPACE)\n\t\t\t.then(() => assert.strictEqual(testObject.getValue('tasks.service.testSetting'), 'value'));\n\t});\n\n\ttest('update resource configuration', () => {\n\t\treturn testObject.updateValue('configurationService.folder.testSetting', 'value', { resource: workspaceService.getWorkspace().folders[0].uri }, ConfigurationTarget.WORKSPACE_FOLDER)\n\t\t\t.then(() => assert.strictEqual(testObject.getValue('configurationService.folder.testSetting'), 'value'));\n\t});\n\n\ttest('update resource language configuration', () => {\n\t\treturn testObject.updateValue('configurationService.folder.languageSetting', 'value', { resource: workspaceService.getWorkspace().folders[0].uri }, ConfigurationTarget.WORKSPACE_FOLDER)\n\t\t\t.then(() => assert.strictEqual(testObject.getValue('configurationService.folder.languageSetting'), 'value'));\n\t});\n\n\ttest('update application setting into workspace configuration in a workspace is not supported', () => {\n\t\treturn testObject.updateValue('configurationService.folder.applicationSetting', 'workspaceValue', {}, ConfigurationTarget.WORKSPACE, true)\n\t\t\t.then(() => assert.fail('Should not be supported'), (e) => assert.strictEqual(e.code, ConfigurationEditingErrorCode.ERROR_INVALID_WORKSPACE_CONFIGURATION_APPLICATION));\n\t});\n\n\ttest('update machine setting into workspace configuration in a workspace is not supported', () => {\n\t\treturn testObject.updateValue('configurationService.folder.machineSetting', 'workspaceValue', {}, ConfigurationTarget.WORKSPACE, true)\n\t\t\t.then(() => assert.fail('Should not be supported'), (e) => assert.strictEqual(e.code, ConfigurationEditingErrorCode.ERROR_INVALID_WORKSPACE_CONFIGURATION_MACHINE));\n\t});\n\n\ttest('update tasks configuration', () => {\n\t\treturn testObject.updateValue('tasks', { 'version': '1.0.0', tasks: [{ 'taskName': 'myTask' }] }, ConfigurationTarget.WORKSPACE)\n\t\t\t.then(() => assert.deepStrictEqual(testObject.getValue('tasks'), { 'version': '1.0.0', tasks: [{ 'taskName': 'myTask' }] }));\n\t});\n\n\ttest('update user configuration should trigger change event before promise is resolve', () => {\n\t\tconst target = sinon.spy();\n\t\ttestObject.onDidChangeConfiguration(target);\n\t\treturn testObject.updateValue('configurationService.folder.testSetting', 'value', ConfigurationTarget.USER)\n\t\t\t.then(() => assert.ok(target.called));\n\t});\n\n\ttest('update workspace configuration should trigger change event before promise is resolve', () => {\n\t\tconst target = sinon.spy();\n\t\ttestObject.onDidChangeConfiguration(target);\n\t\treturn testObject.updateValue('configurationService.folder.testSetting', 'value', ConfigurationTarget.WORKSPACE)\n\t\t\t.then(() => assert.ok(target.called));\n\t});\n\n\ttest('update memory configuration', () => {\n\t\treturn testObject.updateValue('configurationService.folder.testSetting', 'memoryValue', ConfigurationTarget.MEMORY)\n\t\t\t.then(() => assert.strictEqual(testObject.getValue('configurationService.folder.testSetting'), 'memoryValue'));\n\t});\n\n\ttest('update memory configuration should trigger change event before promise is resolve', () => {\n\t\tconst target = sinon.spy();\n\t\ttestObject.onDidChangeConfiguration(target);\n\t\treturn testObject.updateValue('configurationService.folder.testSetting', 'memoryValue', ConfigurationTarget.MEMORY)\n\t\t\t.then(() => assert.ok(target.called));\n\t});\n\n\ttest('remove setting from all targets', async () => {\n\t\tconst key = 'configurationService.folder.testSetting';\n\t\tawait testObject.updateValue(key, 'workspaceValue', ConfigurationTarget.WORKSPACE);\n\t\tawait testObject.updateValue(key, 'userValue', ConfigurationTarget.USER);\n\n\t\tawait testObject.updateValue(key, undefined);\n\t\tawait testObject.reloadConfiguration();\n\n\t\tconst actual = testObject.inspect(key, { resource: workspaceService.getWorkspace().folders[0].uri });\n\t\tassert.strictEqual(actual.userValue, undefined);\n\t\tassert.strictEqual(actual.workspaceValue, undefined);\n\t\tassert.strictEqual(actual.workspaceFolderValue, undefined);\n\t});\n\n\ttest('update user configuration to default value when target is not passed', async () => {\n\t\tawait testObject.updateValue('configurationService.folder.testSetting', 'value', ConfigurationTarget.USER);\n\t\tawait testObject.updateValue('configurationService.folder.testSetting', 'isSet');\n\t\tassert.strictEqual(testObject.inspect('configurationService.folder.testSetting').userValue, undefined);\n\t});\n\n\ttest('update user configuration to default value when target is passed', async () => {\n\t\tawait testObject.updateValue('configurationService.folder.testSetting', 'value', ConfigurationTarget.USER);\n\t\tawait testObject.updateValue('configurationService.folder.testSetting', 'isSet', ConfigurationTarget.USER);\n\t\tassert.strictEqual(testObject.inspect('configurationService.folder.testSetting').userValue, 'isSet');\n\t});\n\n\ttest('update task configuration should trigger change event before promise is resolve', () => {\n\t\tconst target = sinon.spy();\n\t\ttestObject.onDidChangeConfiguration(target);\n\t\treturn testObject.updateValue('tasks', { 'version': '1.0.0', tasks: [{ 'taskName': 'myTask' }] }, ConfigurationTarget.WORKSPACE)\n\t\t\t.then(() => assert.ok(target.called));\n\t});\n\n\ttest('no change event when there are no global tasks', async () => {\n\t\tconst target = sinon.spy();\n\t\ttestObject.onDidChangeConfiguration(target);\n\t\tawait timeout(5);\n\t\tassert.ok(target.notCalled);\n\t});\n\n\ttest('change event when there are global tasks', async () => {\n\t\tawait fileService.writeFile(joinPath(environmentService.userRoamingDataHome, 'tasks.json'), VSBuffer.fromString('{ \"version\": \"1.0.0\", \"tasks\": [{ \"taskName\": \"myTask\" }'));\n\t\treturn new Promise<void>((c) => testObject.onDidChangeConfiguration(() => c()));\n\t});\n\n\ttest('creating workspace settings', async () => {\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.testSetting\": \"userValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\t\tawait new Promise<void>(async (c) => {\n\t\t\tconst disposable = testObject.onDidChangeConfiguration(e => {\n\t\t\t\tassert.ok(e.affectsConfiguration('configurationService.folder.testSetting'));\n\t\t\t\tassert.strictEqual(testObject.getValue('configurationService.folder.testSetting'), 'workspaceValue');\n\t\t\t\tdisposable.dispose();\n\t\t\t\tc();\n\t\t\t});\n\t\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.testSetting\": \"workspaceValue\" }'));\n\t\t});\n\t});\n\n\ttest('deleting workspace settings', async () => {\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.testSetting\": \"userValue\" }'));\n\t\tconst workspaceSettingsResource = joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json');\n\t\tawait fileService.writeFile(workspaceSettingsResource, VSBuffer.fromString('{ \"configurationService.folder.testSetting\": \"workspaceValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\t\tconst e = await new Promise<IConfigurationChangeEvent>(async (c) => {\n\t\t\tEvent.once(testObject.onDidChangeConfiguration)(c);\n\t\t\tawait fileService.del(workspaceSettingsResource);\n\t\t});\n\t\tassert.ok(e.affectsConfiguration('configurationService.folder.testSetting'));\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.testSetting'), 'userValue');\n\t});\n\n\ttest('restricted setting is read from workspace when workspace is trusted', async () => {\n\t\ttestObject.updateWorkspaceTrust(true);\n\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.restrictedSetting\": \"userValue\" }'));\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.restrictedSetting\": \"workspaceValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.restrictedSetting', { resource: workspaceService.getWorkspace().folders[0].uri }), 'workspaceValue');\n\t\tassert.ok(testObject.restrictedSettings.default.includes('configurationService.folder.restrictedSetting'));\n\t\tassert.strictEqual(testObject.restrictedSettings.userLocal, undefined);\n\t\tassert.strictEqual(testObject.restrictedSettings.userRemote, undefined);\n\t\tassert.deepStrictEqual(testObject.restrictedSettings.workspace, ['configurationService.folder.restrictedSetting']);\n\t\tassert.strictEqual(testObject.restrictedSettings.workspaceFolder?.size, 1);\n\t\tassert.deepStrictEqual(testObject.restrictedSettings.workspaceFolder?.get(workspaceService.getWorkspace().folders[0].uri), ['configurationService.folder.restrictedSetting']);\n\t});\n\n\ttest('restricted setting is not read from workspace when workspace is changed to trusted', async () => {\n\t\ttestObject.updateWorkspaceTrust(true);\n\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.restrictedSetting\": \"userValue\" }'));\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.restrictedSetting\": \"workspaceValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\n\t\ttestObject.updateWorkspaceTrust(false);\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.restrictedSetting', { resource: workspaceService.getWorkspace().folders[0].uri }), 'userValue');\n\t\tassert.ok(testObject.restrictedSettings.default.includes('configurationService.folder.restrictedSetting'));\n\t\tassert.strictEqual(testObject.restrictedSettings.userLocal, undefined);\n\t\tassert.strictEqual(testObject.restrictedSettings.userRemote, undefined);\n\t\tassert.deepStrictEqual(testObject.restrictedSettings.workspace, ['configurationService.folder.restrictedSetting']);\n\t\tassert.strictEqual(testObject.restrictedSettings.workspaceFolder?.size, 1);\n\t\tassert.deepStrictEqual(testObject.restrictedSettings.workspaceFolder?.get(workspaceService.getWorkspace().folders[0].uri), ['configurationService.folder.restrictedSetting']);\n\t});\n\n\ttest('change event is triggered when workspace is changed to untrusted', async () => {\n\t\ttestObject.updateWorkspaceTrust(true);\n\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.restrictedSetting\": \"userValue\" }'));\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.restrictedSetting\": \"workspaceValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\n\t\tconst promise = Event.toPromise(testObject.onDidChangeConfiguration);\n\t\ttestObject.updateWorkspaceTrust(false);\n\n\t\tconst event = await promise;\n\t\tassert.ok(event.affectedKeys.includes('configurationService.folder.restrictedSetting'));\n\t\tassert.ok(event.affectsConfiguration('configurationService.folder.restrictedSetting'));\n\t});\n\n\ttest('restricted setting is not read from workspace when workspace is not trusted', async () => {\n\t\ttestObject.updateWorkspaceTrust(false);\n\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.restrictedSetting\": \"userValue\" }'));\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.restrictedSetting\": \"workspaceValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.restrictedSetting', { resource: workspaceService.getWorkspace().folders[0].uri }), 'userValue');\n\t\tassert.ok(testObject.restrictedSettings.default.includes('configurationService.folder.restrictedSetting'));\n\t\tassert.strictEqual(testObject.restrictedSettings.userLocal, undefined);\n\t\tassert.strictEqual(testObject.restrictedSettings.userRemote, undefined);\n\t\tassert.deepStrictEqual(testObject.restrictedSettings.workspace, ['configurationService.folder.restrictedSetting']);\n\t\tassert.strictEqual(testObject.restrictedSettings.workspaceFolder?.size, 1);\n\t\tassert.deepStrictEqual(testObject.restrictedSettings.workspaceFolder?.get(workspaceService.getWorkspace().folders[0].uri), ['configurationService.folder.restrictedSetting']);\n\t});\n\n\ttest('restricted setting is read when workspace is changed to trusted', async () => {\n\t\ttestObject.updateWorkspaceTrust(false);\n\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.restrictedSetting\": \"userValue\" }'));\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.restrictedSetting\": \"workspaceValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\n\t\ttestObject.updateWorkspaceTrust(true);\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.restrictedSetting', { resource: workspaceService.getWorkspace().folders[0].uri }), 'workspaceValue');\n\t\tassert.ok(testObject.restrictedSettings.default.includes('configurationService.folder.restrictedSetting'));\n\t\tassert.strictEqual(testObject.restrictedSettings.userLocal, undefined);\n\t\tassert.strictEqual(testObject.restrictedSettings.userRemote, undefined);\n\t\tassert.deepStrictEqual(testObject.restrictedSettings.workspace, ['configurationService.folder.restrictedSetting']);\n\t\tassert.strictEqual(testObject.restrictedSettings.workspaceFolder?.size, 1);\n\t\tassert.deepStrictEqual(testObject.restrictedSettings.workspaceFolder?.get(workspaceService.getWorkspace().folders[0].uri), ['configurationService.folder.restrictedSetting']);\n\t});\n\n\ttest('change event is triggered when workspace is changed to trusted', async () => {\n\t\ttestObject.updateWorkspaceTrust(false);\n\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.restrictedSetting\": \"userValue\" }'));\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.restrictedSetting\": \"workspaceValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\n\t\tconst promise = Event.toPromise(testObject.onDidChangeConfiguration);\n\t\ttestObject.updateWorkspaceTrust(true);\n\n\t\tconst event = await promise;\n\t\tassert.ok(event.affectedKeys.includes('configurationService.folder.restrictedSetting'));\n\t\tassert.ok(event.affectsConfiguration('configurationService.folder.restrictedSetting'));\n\t});\n\n\ttest('adding an restricted setting triggers change event', async () => {\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.restrictedSetting\": \"userValue\" }'));\n\t\ttestObject.updateWorkspaceTrust(false);\n\n\t\tconst promise = Event.toPromise(testObject.onDidChangeRestrictedSettings);\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.restrictedSetting\": \"workspaceValue\" }'));\n\n\t\treturn promise;\n\t});\n});\n\nsuite('WorkspaceConfigurationService-Multiroot', () => {\n\n\tlet workspaceContextService: IWorkspaceContextService, jsonEditingServce: IJSONEditingService, testObject: WorkspaceService, fileService: IFileService, environmentService: BrowserWorkbenchEnvironmentService;\n\tconst configurationRegistry = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration);\n\tconst disposables = new DisposableStore();\n\n\tsuiteSetup(() => {\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configurationService.workspace.testSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet'\n\t\t\t\t},\n\t\t\t\t'configurationService.workspace.applicationSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.APPLICATION\n\t\t\t\t},\n\t\t\t\t'configurationService.workspace.machineSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.MACHINE\n\t\t\t\t},\n\t\t\t\t'configurationService.workspace.machineOverridableSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.MACHINE_OVERRIDABLE\n\t\t\t\t},\n\t\t\t\t'configurationService.workspace.testResourceSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.RESOURCE\n\t\t\t\t},\n\t\t\t\t'configurationService.workspace.testLanguageSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.LANGUAGE_OVERRIDABLE\n\t\t\t\t},\n\t\t\t\t'configurationService.workspace.testRestrictedSetting1': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\trestricted: true,\n\t\t\t\t\tscope: ConfigurationScope.RESOURCE\n\t\t\t\t},\n\t\t\t\t'configurationService.workspace.testRestrictedSetting2': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\trestricted: true,\n\t\t\t\t\tscope: ConfigurationScope.RESOURCE\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\n\tsetup(async () => {\n\t\tconst logService = new NullLogService();\n\t\tfileService = disposables.add(new FileService(logService));\n\t\tconst fileSystemProvider = disposables.add(new InMemoryFileSystemProvider());\n\t\tfileService.registerProvider(ROOT.scheme, fileSystemProvider);\n\n\t\tconst appSettingsHome = joinPath(ROOT, 'user');\n\t\tconst folderA = joinPath(ROOT, 'a');\n\t\tconst folderB = joinPath(ROOT, 'b');\n\t\tconst configResource = joinPath(ROOT, 'vsctests.code-workspace');\n\t\tconst workspace = { folders: [{ path: folderA.path }, { path: folderB.path }] };\n\n\t\tawait fileService.createFolder(appSettingsHome);\n\t\tawait fileService.createFolder(folderA);\n\t\tawait fileService.createFolder(folderB);\n\t\tawait fileService.writeFile(configResource, VSBuffer.fromString(JSON.stringify(workspace, null, '\\t')));\n\n\t\tconst instantiationService = <TestInstantiationService>workbenchInstantiationService();\n\t\tenvironmentService = TestEnvironmentService;\n\t\tconst remoteAgentService = instantiationService.createInstance(RemoteAgentService, null);\n\t\tinstantiationService.stub(IRemoteAgentService, remoteAgentService);\n\t\tfileService.registerProvider(Schemas.userData, disposables.add(new FileUserDataProvider(ROOT.scheme, fileSystemProvider, Schemas.userData, new NullLogService())));\n\t\tconst workspaceService = disposables.add(new WorkspaceService({ configurationCache: new ConfigurationCache() }, environmentService, fileService, remoteAgentService, new UriIdentityService(fileService), new NullLogService()));\n\n\t\tinstantiationService.stub(IFileService, fileService);\n\t\tinstantiationService.stub(IWorkspaceContextService, workspaceService);\n\t\tinstantiationService.stub(IConfigurationService, workspaceService);\n\t\tinstantiationService.stub(IWorkbenchEnvironmentService, environmentService);\n\t\tinstantiationService.stub(IEnvironmentService, environmentService);\n\n\t\tawait workspaceService.initialize(getWorkspaceIdentifier(configResource));\n\t\tinstantiationService.stub(IKeybindingEditingService, instantiationService.createInstance(KeybindingsEditingService));\n\t\tinstantiationService.stub(ITextFileService, instantiationService.createInstance(TestTextFileService));\n\t\tinstantiationService.stub(ITextModelService, <ITextModelService>instantiationService.createInstance(TextModelResolverService));\n\t\tworkspaceService.acquireInstantiationService(instantiationService);\n\n\t\tworkspaceContextService = workspaceService;\n\t\tjsonEditingServce = instantiationService.createInstance(JSONEditingService);\n\t\ttestObject = workspaceService;\n\t});\n\n\tteardown(() => disposables.clear());\n\n\ttest('application settings are not read from workspace', async () => {\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.applicationSetting\": \"userValue\" }'));\n\t\tawait jsonEditingServce.write(workspaceContextService.getWorkspace().configuration!, [{ path: ['settings'], value: { 'configurationService.workspace.applicationSetting': 'workspaceValue' } }], true);\n\n\t\tawait testObject.reloadConfiguration();\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.applicationSetting'), 'userValue');\n\t});\n\n\ttest('application settings are not read from workspace when folder is passed', async () => {\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.applicationSetting\": \"userValue\" }'));\n\t\tawait jsonEditingServce.write(workspaceContextService.getWorkspace().configuration!, [{ path: ['settings'], value: { 'configurationService.workspace.applicationSetting': 'workspaceValue' } }], true);\n\n\t\tawait testObject.reloadConfiguration();\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.applicationSetting', { resource: workspaceContextService.getWorkspace().folders[0].uri }), 'userValue');\n\t});\n\n\ttest('machine settings are not read from workspace', async () => {\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.machineSetting\": \"userValue\" }'));\n\t\tawait jsonEditingServce.write(workspaceContextService.getWorkspace().configuration!, [{ path: ['settings'], value: { 'configurationService.workspace.machineSetting': 'workspaceValue' } }], true);\n\n\t\tawait testObject.reloadConfiguration();\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.machineSetting'), 'userValue');\n\t});\n\n\ttest('machine settings are not read from workspace when folder is passed', async () => {\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.machineSetting\": \"userValue\" }'));\n\t\tawait jsonEditingServce.write(workspaceContextService.getWorkspace().configuration!, [{ path: ['settings'], value: { 'configurationService.workspace.machineSetting': 'workspaceValue' } }], true);\n\n\t\tawait testObject.reloadConfiguration();\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.machineSetting', { resource: workspaceContextService.getWorkspace().folders[0].uri }), 'userValue');\n\t});\n\n\ttest('get application scope settings are not loaded after defaults are registered', async () => {\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"configurationService.workspace.newSetting\": \"userValue\" }'));\n\t\tawait jsonEditingServce.write(workspaceContextService.getWorkspace().configuration!, [{ path: ['settings'], value: { 'configurationService.workspace.newSetting': 'workspaceValue' } }], true);\n\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.newSetting'), 'workspaceValue');\n\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configurationService.workspace.newSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.APPLICATION\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.newSetting'), 'userValue');\n\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.newSetting'), 'userValue');\n\t});\n\n\ttest('get application scope settings are not loaded after defaults are registered when workspace folder is passed', async () => {\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"configurationService.workspace.newSetting-2\": \"userValue\" }'));\n\t\tawait jsonEditingServce.write(workspaceContextService.getWorkspace().configuration!, [{ path: ['settings'], value: { 'configurationService.workspace.newSetting-2': 'workspaceValue' } }], true);\n\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.newSetting-2', { resource: workspaceContextService.getWorkspace().folders[0].uri }), 'workspaceValue');\n\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configurationService.workspace.newSetting-2': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.APPLICATION\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.newSetting-2', { resource: workspaceContextService.getWorkspace().folders[0].uri }), 'userValue');\n\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.newSetting-2', { resource: workspaceContextService.getWorkspace().folders[0].uri }), 'userValue');\n\t});\n\n\ttest('workspace settings override user settings after defaults are registered for machine overridable settings ', async () => {\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"configurationService.workspace.newMachineOverridableSetting\": \"userValue\" }'));\n\t\tawait jsonEditingServce.write(workspaceContextService.getWorkspace().configuration!, [{ path: ['settings'], value: { 'configurationService.workspace.newMachineOverridableSetting': 'workspaceValue' } }], true);\n\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.newMachineOverridableSetting'), 'workspaceValue');\n\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configurationService.workspace.newMachineOverridableSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.MACHINE_OVERRIDABLE\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.newMachineOverridableSetting'), 'workspaceValue');\n\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.newMachineOverridableSetting'), 'workspaceValue');\n\n\t});\n\n\ttest('application settings are not read from workspace folder', async () => {\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"configurationService.workspace.applicationSetting\": \"userValue\" }'));\n\t\tawait fileService.writeFile(workspaceContextService.getWorkspace().folders[0].toResource('.vscode/settings.json'), VSBuffer.fromString('{ \"configurationService.workspace.applicationSetting\": \"workspaceFolderValue\" }'));\n\n\t\tawait testObject.reloadConfiguration();\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.applicationSetting'), 'userValue');\n\t});\n\n\ttest('application settings are not read from workspace folder when workspace folder is passed', async () => {\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"configurationService.workspace.applicationSetting\": \"userValue\" }'));\n\t\tawait fileService.writeFile(workspaceContextService.getWorkspace().folders[0].toResource('.vscode/settings.json'), VSBuffer.fromString('{ \"configurationService.workspace.applicationSetting\": \"workspaceFolderValue\" }'));\n\n\t\tawait testObject.reloadConfiguration();\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.applicationSetting', { resource: workspaceContextService.getWorkspace().folders[0].uri }), 'userValue');\n\t});\n\n\ttest('machine settings are not read from workspace folder', async () => {\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"configurationService.workspace.machineSetting\": \"userValue\" }'));\n\t\tawait fileService.writeFile(workspaceContextService.getWorkspace().folders[0].toResource('.vscode/settings.json'), VSBuffer.fromString('{ \"configurationService.workspace.machineSetting\": \"workspaceFolderValue\" }'));\n\n\t\tawait testObject.reloadConfiguration();\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.machineSetting'), 'userValue');\n\t});\n\n\ttest('machine settings are not read from workspace folder when workspace folder is passed', async () => {\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"configurationService.workspace.machineSetting\": \"userValue\" }'));\n\t\tawait fileService.writeFile(workspaceContextService.getWorkspace().folders[0].toResource('.vscode/settings.json'), VSBuffer.fromString('{ \"configurationService.workspace.machineSetting\": \"workspaceFolderValue\" }'));\n\n\t\tawait testObject.reloadConfiguration();\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.machineSetting', { resource: workspaceContextService.getWorkspace().folders[0].uri }), 'userValue');\n\t});\n\n\ttest('application settings are not read from workspace folder after defaults are registered', async () => {\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"configurationService.workspace.testNewApplicationSetting\": \"userValue\" }'));\n\t\tawait fileService.writeFile(workspaceContextService.getWorkspace().folders[0].toResource('.vscode/settings.json'), VSBuffer.fromString('{ \"configurationService.workspace.testNewApplicationSetting\": \"workspaceFolderValue\" }'));\n\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.testNewApplicationSetting', { resource: workspaceContextService.getWorkspace().folders[0].uri }), 'workspaceFolderValue');\n\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configurationService.workspace.testNewApplicationSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.APPLICATION\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.testNewApplicationSetting', { resource: workspaceContextService.getWorkspace().folders[0].uri }), 'userValue');\n\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.testNewApplicationSetting', { resource: workspaceContextService.getWorkspace().folders[0].uri }), 'userValue');\n\t});\n\n\ttest('application settings are not read from workspace folder after defaults are registered', async () => {\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"configurationService.workspace.testNewMachineSetting\": \"userValue\" }'));\n\t\tawait fileService.writeFile(workspaceContextService.getWorkspace().folders[0].toResource('.vscode/settings.json'), VSBuffer.fromString('{ \"configurationService.workspace.testNewMachineSetting\": \"workspaceFolderValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.testNewMachineSetting', { resource: workspaceContextService.getWorkspace().folders[0].uri }), 'workspaceFolderValue');\n\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configurationService.workspace.testNewMachineSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.MACHINE\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.testNewMachineSetting', { resource: workspaceContextService.getWorkspace().folders[0].uri }), 'userValue');\n\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.testNewMachineSetting', { resource: workspaceContextService.getWorkspace().folders[0].uri }), 'userValue');\n\t});\n\n\ttest('resource setting in folder is read after it is registered later', async () => {\n\t\tawait fileService.writeFile(workspaceContextService.getWorkspace().folders[0].toResource('.vscode/settings.json'), VSBuffer.fromString('{ \"configurationService.workspace.testNewResourceSetting2\": \"workspaceFolderValue\" }'));\n\t\tawait jsonEditingServce.write((workspaceContextService.getWorkspace().configuration!), [{ path: ['settings'], value: { 'configurationService.workspace.testNewResourceSetting2': 'workspaceValue' } }], true);\n\t\tawait testObject.reloadConfiguration();\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configurationService.workspace.testNewResourceSetting2': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.RESOURCE\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.testNewResourceSetting2', { resource: workspaceContextService.getWorkspace().folders[0].uri }), 'workspaceFolderValue');\n\t});\n\n\ttest('resource language setting in folder is read after it is registered later', async () => {\n\t\tawait fileService.writeFile(workspaceContextService.getWorkspace().folders[0].toResource('.vscode/settings.json'), VSBuffer.fromString('{ \"configurationService.workspace.testNewResourceLanguageSetting2\": \"workspaceFolderValue\" }'));\n\t\tawait jsonEditingServce.write((workspaceContextService.getWorkspace().configuration!), [{ path: ['settings'], value: { 'configurationService.workspace.testNewResourceLanguageSetting2': 'workspaceValue' } }], true);\n\t\tawait testObject.reloadConfiguration();\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configurationService.workspace.testNewResourceLanguageSetting2': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.LANGUAGE_OVERRIDABLE\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.testNewResourceLanguageSetting2', { resource: workspaceContextService.getWorkspace().folders[0].uri }), 'workspaceFolderValue');\n\t});\n\n\ttest('machine overridable setting in folder is read after it is registered later', async () => {\n\t\tawait fileService.writeFile(workspaceContextService.getWorkspace().folders[0].toResource('.vscode/settings.json'), VSBuffer.fromString('{ \"configurationService.workspace.testNewMachineOverridableSetting2\": \"workspaceFolderValue\" }'));\n\t\tawait jsonEditingServce.write((workspaceContextService.getWorkspace().configuration!), [{ path: ['settings'], value: { 'configurationService.workspace.testNewMachineOverridableSetting2': 'workspaceValue' } }], true);\n\t\tawait testObject.reloadConfiguration();\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configurationService.workspace.testNewMachineOverridableSetting2': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.MACHINE_OVERRIDABLE\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.testNewMachineOverridableSetting2', { resource: workspaceContextService.getWorkspace().folders[0].uri }), 'workspaceFolderValue');\n\t});\n\n\ttest('inspect', async () => {\n\t\tlet actual = testObject.inspect('something.missing');\n\t\tassert.strictEqual(actual.defaultValue, undefined);\n\t\tassert.strictEqual(actual.userValue, undefined);\n\t\tassert.strictEqual(actual.workspaceValue, undefined);\n\t\tassert.strictEqual(actual.workspaceFolderValue, undefined);\n\t\tassert.strictEqual(actual.value, undefined);\n\n\t\tactual = testObject.inspect('configurationService.workspace.testResourceSetting');\n\t\tassert.strictEqual(actual.defaultValue, 'isSet');\n\t\tassert.strictEqual(actual.userValue, undefined);\n\t\tassert.strictEqual(actual.workspaceValue, undefined);\n\t\tassert.strictEqual(actual.workspaceFolderValue, undefined);\n\t\tassert.strictEqual(actual.value, 'isSet');\n\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"configurationService.workspace.testResourceSetting\": \"userValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\t\tactual = testObject.inspect('configurationService.workspace.testResourceSetting');\n\t\tassert.strictEqual(actual.defaultValue, 'isSet');\n\t\tassert.strictEqual(actual.userValue, 'userValue');\n\t\tassert.strictEqual(actual.workspaceValue, undefined);\n\t\tassert.strictEqual(actual.workspaceFolderValue, undefined);\n\t\tassert.strictEqual(actual.value, 'userValue');\n\n\t\tawait jsonEditingServce.write((workspaceContextService.getWorkspace().configuration!), [{ path: ['settings'], value: { 'configurationService.workspace.testResourceSetting': 'workspaceValue' } }], true);\n\t\tawait testObject.reloadConfiguration();\n\t\tactual = testObject.inspect('configurationService.workspace.testResourceSetting');\n\t\tassert.strictEqual(actual.defaultValue, 'isSet');\n\t\tassert.strictEqual(actual.userValue, 'userValue');\n\t\tassert.strictEqual(actual.workspaceValue, 'workspaceValue');\n\t\tassert.strictEqual(actual.workspaceFolderValue, undefined);\n\t\tassert.strictEqual(actual.value, 'workspaceValue');\n\n\t\tawait fileService.writeFile(workspaceContextService.getWorkspace().folders[0].toResource('.vscode/settings.json'), VSBuffer.fromString('{ \"configurationService.workspace.testResourceSetting\": \"workspaceFolderValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\t\tactual = testObject.inspect('configurationService.workspace.testResourceSetting', { resource: workspaceContextService.getWorkspace().folders[0].uri });\n\t\tassert.strictEqual(actual.defaultValue, 'isSet');\n\t\tassert.strictEqual(actual.userValue, 'userValue');\n\t\tassert.strictEqual(actual.workspaceValue, 'workspaceValue');\n\t\tassert.strictEqual(actual.workspaceFolderValue, 'workspaceFolderValue');\n\t\tassert.strictEqual(actual.value, 'workspaceFolderValue');\n\t});\n\n\ttest('get launch configuration', async () => {\n\t\tconst expectedLaunchConfiguration = {\n\t\t\t'version': '0.1.0',\n\t\t\t'configurations': [\n\t\t\t\t{\n\t\t\t\t\t'type': 'node',\n\t\t\t\t\t'request': 'launch',\n\t\t\t\t\t'name': 'Gulp Build',\n\t\t\t\t\t'program': '${workspaceFolder}/node_modules/gulp/bin/gulp.js',\n\t\t\t\t\t'stopOnEntry': true,\n\t\t\t\t\t'args': [\n\t\t\t\t\t\t'watch-extension:json-client'\n\t\t\t\t\t],\n\t\t\t\t\t'cwd': '${workspaceFolder}'\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t\tawait jsonEditingServce.write((workspaceContextService.getWorkspace().configuration!), [{ path: ['launch'], value: expectedLaunchConfiguration }], true);\n\t\tawait testObject.reloadConfiguration();\n\t\tconst actual = testObject.getValue('launch');\n\t\tassert.deepStrictEqual(actual, expectedLaunchConfiguration);\n\t});\n\n\ttest('inspect launch configuration', async () => {\n\t\tconst expectedLaunchConfiguration = {\n\t\t\t'version': '0.1.0',\n\t\t\t'configurations': [\n\t\t\t\t{\n\t\t\t\t\t'type': 'node',\n\t\t\t\t\t'request': 'launch',\n\t\t\t\t\t'name': 'Gulp Build',\n\t\t\t\t\t'program': '${workspaceFolder}/node_modules/gulp/bin/gulp.js',\n\t\t\t\t\t'stopOnEntry': true,\n\t\t\t\t\t'args': [\n\t\t\t\t\t\t'watch-extension:json-client'\n\t\t\t\t\t],\n\t\t\t\t\t'cwd': '${workspaceFolder}'\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t\tawait jsonEditingServce.write((workspaceContextService.getWorkspace().configuration!), [{ path: ['launch'], value: expectedLaunchConfiguration }], true);\n\t\tawait testObject.reloadConfiguration();\n\t\tconst actual = testObject.inspect('launch').workspaceValue;\n\t\tassert.deepStrictEqual(actual, expectedLaunchConfiguration);\n\t});\n\n\n\ttest('get tasks configuration', async () => {\n\t\tconst expectedTasksConfiguration = {\n\t\t\t'version': '2.0.0',\n\t\t\t'tasks': [\n\t\t\t\t{\n\t\t\t\t\t'label': 'Run Dev',\n\t\t\t\t\t'type': 'shell',\n\t\t\t\t\t'command': './scripts/code.sh',\n\t\t\t\t\t'windows': {\n\t\t\t\t\t\t'command': '.\\\\scripts\\\\code.bat'\n\t\t\t\t\t},\n\t\t\t\t\t'problemMatcher': []\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t\tawait jsonEditingServce.write((workspaceContextService.getWorkspace().configuration!), [{ path: ['tasks'], value: expectedTasksConfiguration }], true);\n\t\tawait testObject.reloadConfiguration();\n\t\tconst actual = testObject.getValue('tasks');\n\t\tassert.deepStrictEqual(actual, expectedTasksConfiguration);\n\t});\n\n\ttest('inspect tasks configuration', async () => {\n\t\tconst expectedTasksConfiguration = {\n\t\t\t'version': '2.0.0',\n\t\t\t'tasks': [\n\t\t\t\t{\n\t\t\t\t\t'label': 'Run Dev',\n\t\t\t\t\t'type': 'shell',\n\t\t\t\t\t'command': './scripts/code.sh',\n\t\t\t\t\t'windows': {\n\t\t\t\t\t\t'command': '.\\\\scripts\\\\code.bat'\n\t\t\t\t\t},\n\t\t\t\t\t'problemMatcher': []\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t\tawait jsonEditingServce.write(workspaceContextService.getWorkspace().configuration!, [{ path: ['tasks'], value: expectedTasksConfiguration }], true);\n\t\tawait testObject.reloadConfiguration();\n\t\tconst actual = testObject.inspect('tasks').workspaceValue;\n\t\tassert.deepStrictEqual(actual, expectedTasksConfiguration);\n\t});\n\n\ttest('update user configuration', async () => {\n\t\tawait testObject.updateValue('configurationService.workspace.testSetting', 'userValue', ConfigurationTarget.USER);\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.testSetting'), 'userValue');\n\t});\n\n\ttest('update user configuration should trigger change event before promise is resolve', async () => {\n\t\tconst target = sinon.spy();\n\t\ttestObject.onDidChangeConfiguration(target);\n\t\tawait testObject.updateValue('configurationService.workspace.testSetting', 'userValue', ConfigurationTarget.USER);\n\t\tassert.ok(target.called);\n\t});\n\n\ttest('update workspace configuration', async () => {\n\t\tawait testObject.updateValue('configurationService.workspace.testSetting', 'workspaceValue', ConfigurationTarget.WORKSPACE);\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.testSetting'), 'workspaceValue');\n\t});\n\n\ttest('update workspace configuration should trigger change event before promise is resolve', async () => {\n\t\tconst target = sinon.spy();\n\t\ttestObject.onDidChangeConfiguration(target);\n\t\tawait testObject.updateValue('configurationService.workspace.testSetting', 'workspaceValue', ConfigurationTarget.WORKSPACE);\n\t\tassert.ok(target.called);\n\t});\n\n\ttest('update application setting into workspace configuration in a workspace is not supported', () => {\n\t\treturn testObject.updateValue('configurationService.workspace.applicationSetting', 'workspaceValue', {}, ConfigurationTarget.WORKSPACE, true)\n\t\t\t.then(() => assert.fail('Should not be supported'), (e) => assert.strictEqual(e.code, ConfigurationEditingErrorCode.ERROR_INVALID_WORKSPACE_CONFIGURATION_APPLICATION));\n\t});\n\n\ttest('update machine setting into workspace configuration in a workspace is not supported', () => {\n\t\treturn testObject.updateValue('configurationService.workspace.machineSetting', 'workspaceValue', {}, ConfigurationTarget.WORKSPACE, true)\n\t\t\t.then(() => assert.fail('Should not be supported'), (e) => assert.strictEqual(e.code, ConfigurationEditingErrorCode.ERROR_INVALID_WORKSPACE_CONFIGURATION_MACHINE));\n\t});\n\n\ttest('update workspace folder configuration', () => {\n\t\tconst workspace = workspaceContextService.getWorkspace();\n\t\treturn testObject.updateValue('configurationService.workspace.testResourceSetting', 'workspaceFolderValue', { resource: workspace.folders[0].uri }, ConfigurationTarget.WORKSPACE_FOLDER)\n\t\t\t.then(() => assert.strictEqual(testObject.getValue('configurationService.workspace.testResourceSetting', { resource: workspace.folders[0].uri }), 'workspaceFolderValue'));\n\t});\n\n\ttest('update resource language configuration in workspace folder', async () => {\n\t\tconst workspace = workspaceContextService.getWorkspace();\n\t\tawait testObject.updateValue('configurationService.workspace.testLanguageSetting', 'workspaceFolderValue', { resource: workspace.folders[0].uri }, ConfigurationTarget.WORKSPACE_FOLDER);\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.testLanguageSetting', { resource: workspace.folders[0].uri }), 'workspaceFolderValue');\n\t});\n\n\ttest('update workspace folder configuration should trigger change event before promise is resolve', async () => {\n\t\tconst workspace = workspaceContextService.getWorkspace();\n\t\tconst target = sinon.spy();\n\t\ttestObject.onDidChangeConfiguration(target);\n\t\tawait testObject.updateValue('configurationService.workspace.testResourceSetting', 'workspaceFolderValue', { resource: workspace.folders[0].uri }, ConfigurationTarget.WORKSPACE_FOLDER);\n\t\tassert.ok(target.called);\n\t});\n\n\ttest('update workspace folder configuration second time should trigger change event before promise is resolve', async () => {\n\t\tconst workspace = workspaceContextService.getWorkspace();\n\t\tawait testObject.updateValue('configurationService.workspace.testResourceSetting', 'workspaceFolderValue', { resource: workspace.folders[0].uri }, ConfigurationTarget.WORKSPACE_FOLDER);\n\t\tconst target = sinon.spy();\n\t\ttestObject.onDidChangeConfiguration(target);\n\t\tawait testObject.updateValue('configurationService.workspace.testResourceSetting', 'workspaceFolderValue2', { resource: workspace.folders[0].uri }, ConfigurationTarget.WORKSPACE_FOLDER);\n\t\tassert.ok(target.called);\n\t});\n\n\ttest('update memory configuration', async () => {\n\t\tawait testObject.updateValue('configurationService.workspace.testSetting', 'memoryValue', ConfigurationTarget.MEMORY);\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.testSetting'), 'memoryValue');\n\t});\n\n\ttest('update memory configuration should trigger change event before promise is resolve', async () => {\n\t\tconst target = sinon.spy();\n\t\ttestObject.onDidChangeConfiguration(target);\n\t\tawait testObject.updateValue('configurationService.workspace.testSetting', 'memoryValue', ConfigurationTarget.MEMORY);\n\t\tassert.ok(target.called);\n\t});\n\n\ttest('remove setting from all targets', async () => {\n\t\tconst workspace = workspaceContextService.getWorkspace();\n\t\tconst key = 'configurationService.workspace.testResourceSetting';\n\t\tawait testObject.updateValue(key, 'workspaceFolderValue', { resource: workspace.folders[0].uri }, ConfigurationTarget.WORKSPACE_FOLDER);\n\t\tawait testObject.updateValue(key, 'workspaceValue', ConfigurationTarget.WORKSPACE);\n\t\tawait testObject.updateValue(key, 'userValue', ConfigurationTarget.USER);\n\n\t\tawait testObject.updateValue(key, undefined, { resource: workspace.folders[0].uri });\n\t\tawait testObject.reloadConfiguration();\n\n\t\tconst actual = testObject.inspect(key, { resource: workspace.folders[0].uri });\n\t\tassert.strictEqual(actual.userValue, undefined);\n\t\tassert.strictEqual(actual.workspaceValue, undefined);\n\t\tassert.strictEqual(actual.workspaceFolderValue, undefined);\n\t});\n\n\ttest('update tasks configuration in a folder', async () => {\n\t\tconst workspace = workspaceContextService.getWorkspace();\n\t\tawait testObject.updateValue('tasks', { 'version': '1.0.0', tasks: [{ 'taskName': 'myTask' }] }, { resource: workspace.folders[0].uri }, ConfigurationTarget.WORKSPACE_FOLDER);\n\t\tassert.deepStrictEqual(testObject.getValue('tasks', { resource: workspace.folders[0].uri }), { 'version': '1.0.0', tasks: [{ 'taskName': 'myTask' }] });\n\t});\n\n\ttest('update launch configuration in a workspace', async () => {\n\t\tconst workspace = workspaceContextService.getWorkspace();\n\t\tawait testObject.updateValue('launch', { 'version': '1.0.0', configurations: [{ 'name': 'myLaunch' }] }, { resource: workspace.folders[0].uri }, ConfigurationTarget.WORKSPACE, true);\n\t\tassert.deepStrictEqual(testObject.getValue('launch'), { 'version': '1.0.0', configurations: [{ 'name': 'myLaunch' }] });\n\t});\n\n\ttest('update tasks configuration in a workspace', async () => {\n\t\tconst workspace = workspaceContextService.getWorkspace();\n\t\tconst tasks = { 'version': '2.0.0', tasks: [{ 'label': 'myTask' }] };\n\t\tawait testObject.updateValue('tasks', tasks, { resource: workspace.folders[0].uri }, ConfigurationTarget.WORKSPACE, true);\n\t\tassert.deepStrictEqual(testObject.getValue('tasks'), tasks);\n\t});\n\n\ttest('configuration of newly added folder is available on configuration change event', async () => {\n\t\tconst workspaceService = <WorkspaceService>testObject;\n\t\tconst uri = workspaceService.getWorkspace().folders[1].uri;\n\t\tawait workspaceService.removeFolders([uri]);\n\t\tawait fileService.writeFile(joinPath(uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.workspace.testResourceSetting\": \"workspaceFolderValue\" }'));\n\n\t\treturn new Promise<void>((c, e) => {\n\t\t\ttestObject.onDidChangeConfiguration(() => {\n\t\t\t\ttry {\n\t\t\t\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.testResourceSetting', { resource: uri }), 'workspaceFolderValue');\n\t\t\t\t\tc();\n\t\t\t\t} catch (error) {\n\t\t\t\t\te(error);\n\t\t\t\t}\n\t\t\t});\n\t\t\tworkspaceService.addFolders([{ uri }]);\n\t\t});\n\t});\n\n\ttest('restricted setting is read from workspace folders when workspace is trusted', async () => {\n\t\ttestObject.updateWorkspaceTrust(true);\n\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"configurationService.workspace.testRestrictedSetting1\": \"userValue\", \"configurationService.workspace.testRestrictedSetting2\": \"userValue\" }'));\n\t\tawait jsonEditingServce.write((workspaceContextService.getWorkspace().configuration!), [{ path: ['settings'], value: { 'configurationService.workspace.testRestrictedSetting1': 'workspaceValue' } }], true);\n\t\tawait fileService.writeFile(joinPath(testObject.getWorkspace().folders[1].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.workspace.testRestrictedSetting2\": \"workspaceFolder2Value\" }'));\n\t\tawait testObject.reloadConfiguration();\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.testRestrictedSetting1', { resource: testObject.getWorkspace().folders[0].uri }), 'workspaceValue');\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.testRestrictedSetting2', { resource: testObject.getWorkspace().folders[1].uri }), 'workspaceFolder2Value');\n\t\tassert.ok(testObject.restrictedSettings.default.includes('configurationService.workspace.testRestrictedSetting1'));\n\t\tassert.ok(testObject.restrictedSettings.default.includes('configurationService.workspace.testRestrictedSetting2'));\n\t\tassert.strictEqual(testObject.restrictedSettings.userLocal, undefined);\n\t\tassert.strictEqual(testObject.restrictedSettings.userRemote, undefined);\n\t\tassert.deepStrictEqual(testObject.restrictedSettings.workspace, ['configurationService.workspace.testRestrictedSetting1']);\n\t\tassert.strictEqual(testObject.restrictedSettings.workspaceFolder?.size, 1);\n\t\tassert.strictEqual(testObject.restrictedSettings.workspaceFolder?.get(testObject.getWorkspace().folders[0].uri), undefined);\n\t\tassert.deepStrictEqual(testObject.restrictedSettings.workspaceFolder?.get(testObject.getWorkspace().folders[1].uri), ['configurationService.workspace.testRestrictedSetting2']);\n\t});\n\n\ttest('restricted setting is not read from workspace when workspace is not trusted', async () => {\n\t\ttestObject.updateWorkspaceTrust(false);\n\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"configurationService.workspace.testRestrictedSetting1\": \"userValue\", \"configurationService.workspace.testRestrictedSetting2\": \"userValue\" }'));\n\t\tawait jsonEditingServce.write((workspaceContextService.getWorkspace().configuration!), [{ path: ['settings'], value: { 'configurationService.workspace.testRestrictedSetting1': 'workspaceValue' } }], true);\n\t\tawait fileService.writeFile(joinPath(testObject.getWorkspace().folders[1].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.workspace.testRestrictedSetting2\": \"workspaceFolder2Value\" }'));\n\t\tawait testObject.reloadConfiguration();\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.testRestrictedSetting1', { resource: testObject.getWorkspace().folders[0].uri }), 'userValue');\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.testRestrictedSetting2', { resource: testObject.getWorkspace().folders[1].uri }), 'userValue');\n\t\tassert.ok(testObject.restrictedSettings.default.includes('configurationService.workspace.testRestrictedSetting1'));\n\t\tassert.ok(testObject.restrictedSettings.default.includes('configurationService.workspace.testRestrictedSetting2'));\n\t\tassert.strictEqual(testObject.restrictedSettings.userLocal, undefined);\n\t\tassert.strictEqual(testObject.restrictedSettings.userRemote, undefined);\n\t\tassert.deepStrictEqual(testObject.restrictedSettings.workspace, ['configurationService.workspace.testRestrictedSetting1']);\n\t\tassert.strictEqual(testObject.restrictedSettings.workspaceFolder?.size, 1);\n\t\tassert.strictEqual(testObject.restrictedSettings.workspaceFolder?.get(testObject.getWorkspace().folders[0].uri), undefined);\n\t\tassert.deepStrictEqual(testObject.restrictedSettings.workspaceFolder?.get(testObject.getWorkspace().folders[1].uri), ['configurationService.workspace.testRestrictedSetting2']);\n\t});\n\n});\n\nsuite('WorkspaceConfigurationService - Remote Folder', () => {\n\n\tlet testObject: WorkspaceService, folder: URI,\n\t\tmachineSettingsResource: URI, remoteSettingsResource: URI, fileSystemProvider: InMemoryFileSystemProvider, resolveRemoteEnvironment: () => void,\n\t\tinstantiationService: TestInstantiationService, fileService: IFileService, environmentService: BrowserWorkbenchEnvironmentService;\n\tconst remoteAuthority = 'configuraiton-tests';\n\tconst configurationRegistry = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration);\n\tconst disposables = new DisposableStore();\n\n\tsuiteSetup(() => {\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configurationService.remote.applicationSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.APPLICATION\n\t\t\t\t},\n\t\t\t\t'configurationService.remote.machineSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.MACHINE\n\t\t\t\t},\n\t\t\t\t'configurationService.remote.machineOverridableSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.MACHINE_OVERRIDABLE\n\t\t\t\t},\n\t\t\t\t'configurationService.remote.testSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.RESOURCE\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\n\tsetup(async () => {\n\t\tconst logService = new NullLogService();\n\t\tfileService = disposables.add(new FileService(logService));\n\t\tfileSystemProvider = disposables.add(new InMemoryFileSystemProvider());\n\t\tfileService.registerProvider(ROOT.scheme, fileSystemProvider);\n\n\t\tconst appSettingsHome = joinPath(ROOT, 'user');\n\t\tfolder = joinPath(ROOT, 'a');\n\t\tawait fileService.createFolder(folder);\n\t\tawait fileService.createFolder(appSettingsHome);\n\t\tmachineSettingsResource = joinPath(ROOT, 'machine-settings.json');\n\t\tremoteSettingsResource = machineSettingsResource.with({ scheme: Schemas.vscodeRemote, authority: remoteAuthority });\n\n\t\tinstantiationService = <TestInstantiationService>workbenchInstantiationService();\n\t\tenvironmentService = TestEnvironmentService;\n\t\tconst remoteEnvironmentPromise = new Promise<Partial<IRemoteAgentEnvironment>>(c => resolveRemoteEnvironment = () => c({ settingsPath: remoteSettingsResource }));\n\t\tconst remoteAgentService = instantiationService.stub(IRemoteAgentService, <Partial<IRemoteAgentService>>{ getEnvironment: () => remoteEnvironmentPromise });\n\t\tfileService.registerProvider(Schemas.userData, disposables.add(new FileUserDataProvider(ROOT.scheme, fileSystemProvider, Schemas.userData, new NullLogService())));\n\t\tconst configurationCache: IConfigurationCache = { read: () => Promise.resolve(''), write: () => Promise.resolve(), remove: () => Promise.resolve(), needsCaching: () => false };\n\t\ttestObject = disposables.add(new WorkspaceService({ configurationCache, remoteAuthority }, environmentService, fileService, remoteAgentService, new UriIdentityService(fileService), new NullLogService()));\n\t\tinstantiationService.stub(IWorkspaceContextService, testObject);\n\t\tinstantiationService.stub(IConfigurationService, testObject);\n\t\tinstantiationService.stub(IEnvironmentService, environmentService);\n\t\tinstantiationService.stub(IFileService, fileService);\n\t});\n\n\tasync function initialize(): Promise<void> {\n\t\tawait testObject.initialize(convertToWorkspacePayload(folder));\n\t\tinstantiationService.stub(ITextFileService, instantiationService.createInstance(TestTextFileService));\n\t\tinstantiationService.stub(ITextModelService, <ITextModelService>instantiationService.createInstance(TextModelResolverService));\n\t\ttestObject.acquireInstantiationService(instantiationService);\n\t}\n\n\tfunction registerRemoteFileSystemProvider(): void {\n\t\tinstantiationService.get(IFileService).registerProvider(Schemas.vscodeRemote, new RemoteFileSystemProvider(fileSystemProvider, remoteAuthority));\n\t}\n\n\tfunction registerRemoteFileSystemProviderOnActivation(): void {\n\t\tconst disposable = instantiationService.get(IFileService).onWillActivateFileSystemProvider(e => {\n\t\t\tif (e.scheme === Schemas.vscodeRemote) {\n\t\t\t\tdisposable.dispose();\n\t\t\t\te.join(Promise.resolve().then(() => registerRemoteFileSystemProvider()));\n\t\t\t}\n\t\t});\n\t}\n\n\tteardown(() => disposables.clear());\n\n\ttest('remote settings override globals', async () => {\n\t\tawait fileService.writeFile(machineSettingsResource, VSBuffer.fromString('{ \"configurationService.remote.machineSetting\": \"remoteValue\" }'));\n\t\tregisterRemoteFileSystemProvider();\n\t\tresolveRemoteEnvironment();\n\t\tawait initialize();\n\t\tassert.strictEqual(testObject.getValue('configurationService.remote.machineSetting'), 'remoteValue');\n\t});\n\n\ttest('remote settings override globals after remote provider is registered on activation', async () => {\n\t\tawait fileService.writeFile(machineSettingsResource, VSBuffer.fromString('{ \"configurationService.remote.machineSetting\": \"remoteValue\" }'));\n\t\tresolveRemoteEnvironment();\n\t\tregisterRemoteFileSystemProviderOnActivation();\n\t\tawait initialize();\n\t\tassert.strictEqual(testObject.getValue('configurationService.remote.machineSetting'), 'remoteValue');\n\t});\n\n\ttest('remote settings override globals after remote environment is resolved', async () => {\n\t\tawait fileService.writeFile(machineSettingsResource, VSBuffer.fromString('{ \"configurationService.remote.machineSetting\": \"remoteValue\" }'));\n\t\tregisterRemoteFileSystemProvider();\n\t\tawait initialize();\n\t\tconst promise = new Promise<void>((c, e) => {\n\t\t\ttestObject.onDidChangeConfiguration(event => {\n\t\t\t\ttry {\n\t\t\t\t\tassert.strictEqual(event.source, ConfigurationTarget.USER);\n\t\t\t\t\tassert.deepStrictEqual(event.affectedKeys, ['configurationService.remote.machineSetting']);\n\t\t\t\t\tassert.strictEqual(testObject.getValue('configurationService.remote.machineSetting'), 'remoteValue');\n\t\t\t\t\tc();\n\t\t\t\t} catch (error) {\n\t\t\t\t\te(error);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\tresolveRemoteEnvironment();\n\t\treturn promise;\n\t});\n\n\ttest('remote settings override globals after remote provider is registered on activation and remote environment is resolved', async () => {\n\t\tawait fileService.writeFile(machineSettingsResource, VSBuffer.fromString('{ \"configurationService.remote.machineSetting\": \"remoteValue\" }'));\n\t\tregisterRemoteFileSystemProviderOnActivation();\n\t\tawait initialize();\n\t\tconst promise = new Promise<void>((c, e) => {\n\t\t\ttestObject.onDidChangeConfiguration(event => {\n\t\t\t\ttry {\n\t\t\t\t\tassert.strictEqual(event.source, ConfigurationTarget.USER);\n\t\t\t\t\tassert.deepStrictEqual(event.affectedKeys, ['configurationService.remote.machineSetting']);\n\t\t\t\t\tassert.strictEqual(testObject.getValue('configurationService.remote.machineSetting'), 'remoteValue');\n\t\t\t\t\tc();\n\t\t\t\t} catch (error) {\n\t\t\t\t\te(error);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\tresolveRemoteEnvironment();\n\t\treturn promise;\n\t});\n\n\ttest('machine settings in local user settings does not override defaults', async () => {\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"configurationService.remote.machineSetting\": \"globalValue\" }'));\n\t\tregisterRemoteFileSystemProvider();\n\t\tresolveRemoteEnvironment();\n\t\tawait initialize();\n\t\tassert.strictEqual(testObject.getValue('configurationService.remote.machineSetting'), 'isSet');\n\t});\n\n\ttest('machine overridable settings in local user settings does not override defaults', async () => {\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"configurationService.remote.machineOverridableSetting\": \"globalValue\" }'));\n\t\tregisterRemoteFileSystemProvider();\n\t\tresolveRemoteEnvironment();\n\t\tawait initialize();\n\t\tassert.strictEqual(testObject.getValue('configurationService.remote.machineOverridableSetting'), 'isSet');\n\t});\n\n\ttest('non machine setting is written in local settings', async () => {\n\t\tregisterRemoteFileSystemProvider();\n\t\tresolveRemoteEnvironment();\n\t\tawait initialize();\n\t\tawait testObject.updateValue('configurationService.remote.applicationSetting', 'applicationValue');\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.inspect('configurationService.remote.applicationSetting').userLocalValue, 'applicationValue');\n\t});\n\n\ttest('machine setting is written in remote settings', async () => {\n\t\tregisterRemoteFileSystemProvider();\n\t\tresolveRemoteEnvironment();\n\t\tawait initialize();\n\t\tawait testObject.updateValue('configurationService.remote.machineSetting', 'machineValue');\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.inspect('configurationService.remote.machineSetting').userRemoteValue, 'machineValue');\n\t});\n\n\ttest('machine overridable setting is written in remote settings', async () => {\n\t\tregisterRemoteFileSystemProvider();\n\t\tresolveRemoteEnvironment();\n\t\tawait initialize();\n\t\tawait testObject.updateValue('configurationService.remote.machineOverridableSetting', 'machineValue');\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.inspect('configurationService.remote.machineOverridableSetting').userRemoteValue, 'machineValue');\n\t});\n\n\ttest('machine settings in local user settings does not override defaults after defalts are registered ', async () => {\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"configurationService.remote.newMachineSetting\": \"userValue\" }'));\n\t\tregisterRemoteFileSystemProvider();\n\t\tresolveRemoteEnvironment();\n\t\tawait initialize();\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configurationService.remote.newMachineSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.MACHINE\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tassert.strictEqual(testObject.getValue('configurationService.remote.newMachineSetting'), 'isSet');\n\t});\n\n\ttest('machine overridable settings in local user settings does not override defaults after defaults are registered ', async () => {\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString('{ \"configurationService.remote.newMachineOverridableSetting\": \"userValue\" }'));\n\t\tregisterRemoteFileSystemProvider();\n\t\tresolveRemoteEnvironment();\n\t\tawait initialize();\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configurationService.remote.newMachineOverridableSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.MACHINE_OVERRIDABLE\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tassert.strictEqual(testObject.getValue('configurationService.remote.newMachineOverridableSetting'), 'isSet');\n\t});\n\n});\n\nsuite('ConfigurationService - Configuration Defaults', () => {\n\n\tconst disposableStore: DisposableStore = new DisposableStore();\n\n\tsuiteSetup(() => {\n\t\tRegistry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration).registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configurationService.defaultOverridesSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t},\n\t\t\t}\n\t\t});\n\t});\n\n\tteardown(() => disposableStore.clear());\n\n\ttest('when default value is not overriden', () => {\n\t\tconst testObject = createConfigurationService({});\n\t\tassert.deepStrictEqual(testObject.getValue('configurationService.defaultOverridesSetting'), 'isSet');\n\t});\n\n\ttest('when default value is overriden', () => {\n\t\tconst testObject = createConfigurationService({ 'configurationService.defaultOverridesSetting': 'overriddenValue' });\n\t\tassert.deepStrictEqual(testObject.getValue('configurationService.defaultOverridesSetting'), 'overriddenValue');\n\t});\n\n\tfunction createConfigurationService(configurationDefaults: Record<string, any>): IConfigurationService {\n\t\tconst remoteAgentService = (<TestInstantiationService>workbenchInstantiationService()).createInstance(RemoteAgentService, null);\n\t\tconst environmentService = new BrowserWorkbenchEnvironmentService({ logsPath: joinPath(ROOT, 'logs'), workspaceId: '', configurationDefaults }, TestProductService);\n\t\tconst fileService = new FileService(new NullLogService());\n\t\treturn disposableStore.add(new WorkspaceService({ configurationCache: new ConfigurationCache() }, environmentService, fileService, remoteAgentService, new UriIdentityService(fileService), new NullLogService()));\n\t}\n\n});\n\nfunction getWorkspaceId(configPath: URI): string {\n\tlet workspaceConfigPath = configPath.toString();\n\tif (!isLinux) {\n\t\tworkspaceConfigPath = workspaceConfigPath.toLowerCase(); // sanitize for platform file system\n\t}\n\treturn hash(workspaceConfigPath).toString(16);\n}\n\nexport function getWorkspaceIdentifier(configPath: URI): IWorkspaceIdentifier {\n\treturn {\n\t\tconfigPath,\n\t\tid: getWorkspaceId(configPath)\n\t};\n}\n"]}