{"version":3,"file":"configurationCache.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/configuration/browser/configurationCache.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAMhG,MAAa,kBAAkB;QAE9B,YAAY,CAAC,QAAa;YACzB,oCAAoC;YACpC,OAAO,CAAC,CAAC,iBAAO,CAAC,IAAI,EAAE,iBAAO,CAAC,QAAQ,EAAE,iBAAO,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACjF,CAAC;QAED,KAAK,CAAC,IAAI,CAAC,GAAqB;YAC/B,OAAO,EAAE,CAAC;QACX,CAAC;QAED,KAAK,CAAC,KAAK,CAAC,GAAqB,EAAE,OAAe;QAClD,CAAC;QAED,KAAK,CAAC,MAAM,CAAC,GAAqB;QAClC,CAAC;KACD;IAhBD,gDAgBC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IConfigurationCache, ConfigurationKey } from 'vs/workbench/services/configuration/common/configuration';\nimport { Schemas } from 'vs/base/common/network';\nimport { URI } from 'vs/base/common/uri';\n\nexport class ConfigurationCache implements IConfigurationCache {\n\n\tneedsCaching(resource: URI): boolean {\n\t\t// Cache all non user data resources\n\t\treturn ![Schemas.file, Schemas.userData, Schemas.tmp].includes(resource.scheme);\n\t}\n\n\tasync read(key: ConfigurationKey): Promise<string> {\n\t\treturn '';\n\t}\n\n\tasync write(key: ConfigurationKey, content: string): Promise<void> {\n\t}\n\n\tasync remove(key: ConfigurationKey): Promise<void> {\n\t}\n}\n"]}