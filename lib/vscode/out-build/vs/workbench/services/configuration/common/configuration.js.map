{"version":3,"file":"configuration.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/configuration/common/configuration.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAUnF,QAAA,yBAAyB,GAAG,SAAS,CAAC;IACtC,QAAA,oBAAoB,GAAG,UAAU,CAAC;IAClC,QAAA,oBAAoB,GAAG,GAAG,iCAAyB,IAAI,4BAAoB,OAAO,CAAC;IAEnF,QAAA,uBAAuB,GAAG,mCAAmC,CAAC;IAC9D,QAAA,oBAAoB,GAAG,gCAAgC,CAAC;IACxD,QAAA,uBAAuB,GAAG,mCAAmC,CAAC;IAC9D,QAAA,yBAAyB,GAAG,qCAAqC,CAAC;IAClE,QAAA,sBAAsB,GAAG,kCAAkC,CAAC;IAC5D,QAAA,cAAc,GAAG,yBAAyB,CAAC;IAC3C,QAAA,aAAa,GAAG,wBAAwB,CAAC;IAEzC,QAAA,oBAAoB,GAAG,qFAAiI,CAAC;IACzJ,QAAA,qBAAqB,GAAG,8GAAqK,CAAC;IAC9L,QAAA,gBAAgB,GAAG,6FAAyI,CAAC;IAC7J,QAAA,aAAa,GAAG,6EAA8G,CAAC;IAE/H,QAAA,uBAAuB,GAAG,OAAO,CAAC;IAClC,QAAA,wBAAwB,GAAG,QAAQ,CAAC;IAEpC,QAAA,mCAAmC,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACvE,2CAAmC,CAAC,+BAAuB,CAAC,GAAG,GAAG,iCAAyB,IAAI,+BAAuB,OAAO,CAAC;IAC9H,2CAAmC,CAAC,gCAAwB,CAAC,GAAG,GAAG,iCAAyB,IAAI,gCAAwB,OAAO,CAAC;IACnH,QAAA,8BAA8B,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAClE,sCAA8B,CAAC,+BAAuB,CAAC,GAAG,GAAG,+BAAuB,OAAO,CAAC;IAa5F,SAAgB,mCAAmC,CAAC,QAA+B;QAClF,MAAM,qBAAqB,GAAG,mBAAQ,CAAC,EAAE,CAAyB,kCAAU,CAAC,aAAa,CAAC,CAAC;QAC5F,OAAO,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE;YAC5B,MAAM,QAAQ,GAAG,qBAAqB,CAAC,0BAA0B,EAAE,CAAC,GAAG,CAAC,CAAC;YACzE,OAAO,QAAQ,CAAC,UAAU,IAAI,QAAQ,CAAC,KAAK,wBAAmC,IAAI,QAAQ,CAAC,KAAK,oBAA+B,CAAC;QAClI,CAAC,CAAC,CAAC;IACJ,CAAC;IAND,kFAMC;IAUY,QAAA,8BAA8B,GAAG,CAAA,GAAA,sCAAsB,CAAA,CAAwD,qCAAqB,CAAC,CAAC;IAmBtI,QAAA,aAAa,GAAG,kDAAkD,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ConfigurationScope, Extensions, IConfigurationRegistry } from 'vs/platform/configuration/common/configurationRegistry';\nimport { URI } from 'vs/base/common/uri';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { refineServiceDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { Event } from 'vs/base/common/event';\nimport { ResourceMap } from 'vs/base/common/map';\nimport { Registry } from 'vs/platform/registry/common/platform';\n\nexport const FOLDER_CONFIG_FOLDER_NAME = '.vscode';\nexport const FOLDER_SETTINGS_NAME = 'settings';\nexport const FOLDER_SETTINGS_PATH = `${FOLDER_CONFIG_FOLDER_NAME}/${FOLDER_SETTINGS_NAME}.json`;\n\nexport const defaultSettingsSchemaId = 'vscode://schemas/settings/default';\nexport const userSettingsSchemaId = 'vscode://schemas/settings/user';\nexport const machineSettingsSchemaId = 'vscode://schemas/settings/machine';\nexport const workspaceSettingsSchemaId = 'vscode://schemas/settings/workspace';\nexport const folderSettingsSchemaId = 'vscode://schemas/settings/folder';\nexport const launchSchemaId = 'vscode://schemas/launch';\nexport const tasksSchemaId = 'vscode://schemas/tasks';\n\nexport const LOCAL_MACHINE_SCOPES = [ConfigurationScope.APPLICATION, ConfigurationScope.WINDOW, ConfigurationScope.RESOURCE, ConfigurationScope.LANGUAGE_OVERRIDABLE];\nexport const REMOTE_MACHINE_SCOPES = [ConfigurationScope.MACHINE, ConfigurationScope.WINDOW, ConfigurationScope.RESOURCE, ConfigurationScope.LANGUAGE_OVERRIDABLE, ConfigurationScope.MACHINE_OVERRIDABLE];\nexport const WORKSPACE_SCOPES = [ConfigurationScope.WINDOW, ConfigurationScope.RESOURCE, ConfigurationScope.LANGUAGE_OVERRIDABLE, ConfigurationScope.MACHINE_OVERRIDABLE];\nexport const FOLDER_SCOPES = [ConfigurationScope.RESOURCE, ConfigurationScope.LANGUAGE_OVERRIDABLE, ConfigurationScope.MACHINE_OVERRIDABLE];\n\nexport const TASKS_CONFIGURATION_KEY = 'tasks';\nexport const LAUNCH_CONFIGURATION_KEY = 'launch';\n\nexport const WORKSPACE_STANDALONE_CONFIGURATIONS = Object.create(null);\nWORKSPACE_STANDALONE_CONFIGURATIONS[TASKS_CONFIGURATION_KEY] = `${FOLDER_CONFIG_FOLDER_NAME}/${TASKS_CONFIGURATION_KEY}.json`;\nWORKSPACE_STANDALONE_CONFIGURATIONS[LAUNCH_CONFIGURATION_KEY] = `${FOLDER_CONFIG_FOLDER_NAME}/${LAUNCH_CONFIGURATION_KEY}.json`;\nexport const USER_STANDALONE_CONFIGURATIONS = Object.create(null);\nUSER_STANDALONE_CONFIGURATIONS[TASKS_CONFIGURATION_KEY] = `${TASKS_CONFIGURATION_KEY}.json`;\n\nexport type ConfigurationKey = { type: 'user' | 'workspaces' | 'folder', key: string };\n\nexport interface IConfigurationCache {\n\n\tneedsCaching(resource: URI): boolean;\n\tread(key: ConfigurationKey): Promise<string>;\n\twrite(key: ConfigurationKey, content: string): Promise<void>;\n\tremove(key: ConfigurationKey): Promise<void>;\n\n}\n\nexport function filterSettingsRequireWorkspaceTrust(settings: ReadonlyArray<string>): ReadonlyArray<string> {\n\tconst configurationRegistry = Registry.as<IConfigurationRegistry>(Extensions.Configuration);\n\treturn settings.filter(key => {\n\t\tconst property = configurationRegistry.getConfigurationProperties()[key];\n\t\treturn property.restricted && property.scope !== ConfigurationScope.APPLICATION && property.scope !== ConfigurationScope.MACHINE;\n\t});\n}\n\nexport type RestrictedSettings = {\n\tdefault: ReadonlyArray<string>;\n\tuserLocal?: ReadonlyArray<string>;\n\tuserRemote?: ReadonlyArray<string>;\n\tworkspace?: ReadonlyArray<string>;\n\tworkspaceFolder?: ResourceMap<ReadonlyArray<string>>;\n};\n\nexport const IWorkbenchConfigurationService = refineServiceDecorator<IConfigurationService, IWorkbenchConfigurationService>(IConfigurationService);\nexport interface IWorkbenchConfigurationService extends IConfigurationService {\n\t/**\n\t * Restricted settings defined in each configuraiton target\n\t */\n\treadonly restrictedSettings: RestrictedSettings;\n\n\t/**\n\t * Event that triggers when the restricted settings changes\n\t */\n\treadonly onDidChangeRestrictedSettings: Event<RestrictedSettings>;\n\n\t/**\n\t * A promise that resolves when the remote configuration is loaded in a remote window.\n\t * The promise is resolved immediately if the window is not remote.\n\t */\n\twhenRemoteConfigurationLoaded(): Promise<void>;\n}\n\nexport const TASKS_DEFAULT = '{\\n\\t\\\"version\\\": \\\"2.0.0\\\",\\n\\t\\\"tasks\\\": []\\n}';\n"]}