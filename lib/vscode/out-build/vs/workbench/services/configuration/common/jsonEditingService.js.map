{"version":3,"sources":["vs/workbench/services/configuration/common/jsonEditingService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAmBhG,IAAa,kBAAkB,GAA/B,MAAa,kBAAkB;QAM9B,YACgC,WAAyB,EACpB,wBAA2C,EAC5C,eAAiC;YAFrC,gBAAW,GAAX,WAAW,CAAc;YACpB,6BAAwB,GAAxB,wBAAwB,CAAmB;YAC5C,oBAAe,GAAf,eAAe,CAAkB;YAEpE,IAAI,CAAC,KAAK,GAAG,IAAI,aAAK,EAAQ,CAAC;QAChC,CAAC;QAED,KAAK,CAAC,QAAa,EAAE,MAAoB,EAAE,IAAa;YACvD,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,oBAAoB,CAAC,QAAQ,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,6CAA6C;QACjJ,CAAC;QAEO,KAAK,CAAC,oBAAoB,CAAC,QAAa,EAAE,MAAoB,EAAE,IAAa;YACpF,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;YAChE,IAAI;gBACH,MAAM,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,MAAM,CAAC,eAAe,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;aACzE;oBAAS;gBACT,SAAS,CAAC,OAAO,EAAE,CAAC;aACpB;QACF,CAAC;QAEO,KAAK,CAAC,aAAa,CAAC,KAAiB,EAAE,MAAoB,EAAE,IAAa;YACjF,IAAI,QAAQ,GAAY,KAAK,CAAC;YAC9B,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE;gBAC3B,MAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC5C,QAAQ,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;aAChD;YACD,IAAI,QAAQ,IAAI,IAAI,EAAE;gBACrB,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;aAC5C;QACF,CAAC;QAEO,kBAAkB,CAAC,IAAU,EAAE,KAAiB;YACvD,MAAM,aAAa,GAAG,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACvD,MAAM,WAAW,GAAG,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;YACnE,MAAM,KAAK,GAAG,IAAI,aAAK,CAAC,aAAa,CAAC,UAAU,EAAE,aAAa,CAAC,MAAM,EAAE,WAAW,CAAC,UAAU,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC;YACpH,IAAI,WAAW,GAAG,KAAK,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;YAC/C,IAAI,IAAI,CAAC,OAAO,KAAK,WAAW,EAAE;gBACjC,MAAM,aAAa,GAAG,WAAW,CAAC,CAAC,CAAC,6BAAa,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,6BAAa,CAAC,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;gBACnI,KAAK,CAAC,kBAAkB,CAAC,CAAC,IAAI,qBAAS,CAAC,aAAa,CAAC,UAAU,EAAE,aAAa,CAAC,MAAM,EAAE,aAAa,CAAC,UAAU,EAAE,aAAa,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,aAAa,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;gBACrK,OAAO,IAAI,CAAC;aACZ;YACD,OAAO,KAAK,CAAC;QACd,CAAC;QAEO,QAAQ,CAAC,KAAiB,EAAE,kBAA8B;YACjE,MAAM,EAAE,OAAO,EAAE,YAAY,EAAE,GAAG,KAAK,CAAC,UAAU,EAAE,CAAC;YACrD,MAAM,GAAG,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC;YAC3B,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,kBAAkB,CAAC;YAE3C,mFAAmF;YACnF,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;gBACjB,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;gBACvF,OAAO,CAAC;wBACP,OAAO;wBACP,MAAM,EAAE,OAAO,CAAC,MAAM;wBACtB,MAAM,EAAE,CAAC;qBACT,CAAC,CAAC;aACH;YAED,OAAO,CAAA,GAAA,sBAAW,CAAA,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE,OAAO,EAAE,YAAY,EAAE,GAAG,EAAE,CAAC,CAAC;QACnF,CAAC;QAEO,KAAK,CAAC,qBAAqB,CAAC,QAAa;YAChD,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YACvD,IAAI,CAAC,MAAM,EAAE;gBACZ,MAAM,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,QAAQ,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC;aACvE;YACD,OAAO,IAAI,CAAC,wBAAwB,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;QACrE,CAAC;QAEO,cAAc,CAAC,KAAiB;YACvC,MAAM,WAAW,GAAsB,EAAE,CAAC;YAC1C,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE,WAAW,EAAE,EAAE,kBAAkB,EAAE,IAAI,EAAE,iBAAiB,EAAE,IAAI,EAAE,CAAC,CAAC;YACjG,OAAO,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC;QAC/B,CAAC;QAEO,KAAK,CAAC,kBAAkB,CAAC,QAAa,EAAE,UAAmB;YAClE,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC;YAE7D,MAAM,KAAK,GAAG,SAAS,CAAC,MAAM,CAAC,eAAe,CAAC;YAE/C,IAAI,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;gBAC/B,SAAS,CAAC,OAAO,EAAE,CAAC;gBACpB,OAAO,IAAI,CAAC,MAAM,4BAA+E,CAAC;aAClG;YAED,oDAAoD;YACpD,IAAI,UAAU,IAAI,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;gBACzD,SAAS,CAAC,OAAO,EAAE,CAAC;gBACpB,OAAO,IAAI,CAAC,MAAM,0BAA6E,CAAC;aAChG;YAED,OAAO,SAAS,CAAC;QAClB,CAAC;QAEO,MAAM,CAAI,IAA0B;YAC3C,MAAM,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;YAC1C,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,8BAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;QAC5D,CAAC;QAEO,cAAc,CAAC,KAA2B;YACjD,QAAQ,KAAK,EAAE;gBACd,cAAc;gBACd,+BAA4C,CAAC,CAAC;oBAC7C,OAAO,GAAG,CAAC,QAAQ,CAAC,CAAkB,EAAE,IAA2G,CAAC,CAAC;iBACrJ;gBACD,6BAA0C,CAAC,CAAC;oBAC3C,OAAO,GAAG,CAAC,QAAQ,CAAC,CAAgB,EAAE,IAA8F,CAAC,CAAC;iBACtI;aACD;QACF,CAAC;KACD,CAAA;IAtHY,kBAAkB;QAO5B,WAAA,oBAAY,CAAA;QACZ,WAAA,mCAAiB,CAAA;QACjB,WAAA,4BAAgB,CAAA;OATN,kBAAkB,CAsH9B;IAtHY,gDAAkB;IAwH/B,CAAA,GAAA,8BAAiB,CAAA,CAAC,iCAAmB,EAAE,kBAAkB,EAAE,IAAI,CAAC,CAAC","file":"jsonEditingService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { URI } from 'vs/base/common/uri';\nimport * as json from 'vs/base/common/json';\nimport { setProperty } from 'vs/base/common/jsonEdit';\nimport { Queue } from 'vs/base/common/async';\nimport { Edit } from 'vs/base/common/jsonFormatter';\nimport { IReference } from 'vs/base/common/lifecycle';\nimport { EditOperation } from 'vs/editor/common/core/editOperation';\nimport { Range } from 'vs/editor/common/core/range';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { ITextModelService, IResolvedTextEditorModel } from 'vs/editor/common/services/resolverService';\nimport { IJSONEditingService, IJSONValue, JSONEditingError, JSONEditingErrorCode } from 'vs/workbench/services/configuration/common/jsonEditing';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\n\nexport class JSONEditingService implements IJSONEditingService {\n\n\tpublic _serviceBrand: undefined;\n\n\tprivate queue: Queue<void>;\n\n\tconstructor(\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@ITextModelService private readonly textModelResolverService: ITextModelService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService\n\t) {\n\t\tthis.queue = new Queue<void>();\n\t}\n\n\twrite(resource: URI, values: IJSONValue[], save: boolean): Promise<void> {\n\t\treturn Promise.resolve(this.queue.queue(() => this.doWriteConfiguration(resource, values, save))); // queue up writes to prevent race conditions\n\t}\n\n\tprivate async doWriteConfiguration(resource: URI, values: IJSONValue[], save: boolean): Promise<void> {\n\t\tconst reference = await this.resolveAndValidate(resource, save);\n\t\ttry {\n\t\t\tawait this.writeToBuffer(reference.object.textEditorModel, values, save);\n\t\t} finally {\n\t\t\treference.dispose();\n\t\t}\n\t}\n\n\tprivate async writeToBuffer(model: ITextModel, values: IJSONValue[], save: boolean): Promise<any> {\n\t\tlet hasEdits: boolean = false;\n\t\tfor (const value of values) {\n\t\t\tconst edit = this.getEdits(model, value)[0];\n\t\t\thasEdits = this.applyEditsToBuffer(edit, model);\n\t\t}\n\t\tif (hasEdits && save) {\n\t\t\treturn this.textFileService.save(model.uri);\n\t\t}\n\t}\n\n\tprivate applyEditsToBuffer(edit: Edit, model: ITextModel): boolean {\n\t\tconst startPosition = model.getPositionAt(edit.offset);\n\t\tconst endPosition = model.getPositionAt(edit.offset + edit.length);\n\t\tconst range = new Range(startPosition.lineNumber, startPosition.column, endPosition.lineNumber, endPosition.column);\n\t\tlet currentText = model.getValueInRange(range);\n\t\tif (edit.content !== currentText) {\n\t\t\tconst editOperation = currentText ? EditOperation.replace(range, edit.content) : EditOperation.insert(startPosition, edit.content);\n\t\t\tmodel.pushEditOperations([new Selection(startPosition.lineNumber, startPosition.column, startPosition.lineNumber, startPosition.column)], [editOperation], () => []);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate getEdits(model: ITextModel, configurationValue: IJSONValue): Edit[] {\n\t\tconst { tabSize, insertSpaces } = model.getOptions();\n\t\tconst eol = model.getEOL();\n\t\tconst { path, value } = configurationValue;\n\n\t\t// With empty path the entire file is being replaced, so we just use JSON.stringify\n\t\tif (!path.length) {\n\t\t\tconst content = JSON.stringify(value, null, insertSpaces ? ' '.repeat(tabSize) : '\\t');\n\t\t\treturn [{\n\t\t\t\tcontent,\n\t\t\t\tlength: content.length,\n\t\t\t\toffset: 0\n\t\t\t}];\n\t\t}\n\n\t\treturn setProperty(model.getValue(), path, value, { tabSize, insertSpaces, eol });\n\t}\n\n\tprivate async resolveModelReference(resource: URI): Promise<IReference<IResolvedTextEditorModel>> {\n\t\tconst exists = await this.fileService.exists(resource);\n\t\tif (!exists) {\n\t\t\tawait this.textFileService.write(resource, '{}', { encoding: 'utf8' });\n\t\t}\n\t\treturn this.textModelResolverService.createModelReference(resource);\n\t}\n\n\tprivate hasParseErrors(model: ITextModel): boolean {\n\t\tconst parseErrors: json.ParseError[] = [];\n\t\tjson.parse(model.getValue(), parseErrors, { allowTrailingComma: true, allowEmptyContent: true });\n\t\treturn parseErrors.length > 0;\n\t}\n\n\tprivate async resolveAndValidate(resource: URI, checkDirty: boolean): Promise<IReference<IResolvedTextEditorModel>> {\n\t\tconst reference = await this.resolveModelReference(resource);\n\n\t\tconst model = reference.object.textEditorModel;\n\n\t\tif (this.hasParseErrors(model)) {\n\t\t\treference.dispose();\n\t\t\treturn this.reject<IReference<IResolvedTextEditorModel>>(JSONEditingErrorCode.ERROR_INVALID_FILE);\n\t\t}\n\n\t\t// Target cannot be dirty if not writing into buffer\n\t\tif (checkDirty && this.textFileService.isDirty(resource)) {\n\t\t\treference.dispose();\n\t\t\treturn this.reject<IReference<IResolvedTextEditorModel>>(JSONEditingErrorCode.ERROR_FILE_DIRTY);\n\t\t}\n\n\t\treturn reference;\n\t}\n\n\tprivate reject<T>(code: JSONEditingErrorCode): Promise<T> {\n\t\tconst message = this.toErrorMessage(code);\n\t\treturn Promise.reject(new JSONEditingError(message, code));\n\t}\n\n\tprivate toErrorMessage(error: JSONEditingErrorCode): string {\n\t\tswitch (error) {\n\t\t\t// User issues\n\t\t\tcase JSONEditingErrorCode.ERROR_INVALID_FILE: {\n\t\t\t\treturn nls.localize('errorInvalidFile', \"Unable to write into the file. Please open the file to correct errors/warnings in the file and try again.\");\n\t\t\t}\n\t\t\tcase JSONEditingErrorCode.ERROR_FILE_DIRTY: {\n\t\t\t\treturn nls.localize('errorFileDirty', \"Unable to write into the file because the file is dirty. Please save the file and try again.\");\n\t\t\t}\n\t\t}\n\t}\n}\n\nregisterSingleton(IJSONEditingService, JSONEditingService, true);\n"]}