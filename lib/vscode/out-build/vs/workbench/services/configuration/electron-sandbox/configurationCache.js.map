{"version":3,"file":"configurationCache.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/configuration/electron-sandbox/configurationCache.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IConfigurationCache, ConfigurationKey } from 'vs/workbench/services/configuration/common/configuration';\nimport { URI } from 'vs/base/common/uri';\nimport { Schemas } from 'vs/base/common/network';\nimport { FileOperationError, FileOperationResult, IFileService } from 'vs/platform/files/common/files';\nimport { joinPath } from 'vs/base/common/resources';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { Queue } from 'vs/base/common/async';\n\nexport class ConfigurationCache implements IConfigurationCache {\n\n\tprivate readonly cachedConfigurations: Map<string, CachedConfiguration> = new Map<string, CachedConfiguration>();\n\n\tconstructor(private readonly cacheHome: URI, private readonly fileService: IFileService) {\n\t}\n\n\tneedsCaching(resource: URI): boolean {\n\t\t// Cache all non native resources\n\t\treturn ![Schemas.file, Schemas.userData].includes(resource.scheme);\n\t}\n\n\tread(key: ConfigurationKey): Promise<string> {\n\t\treturn this.getCachedConfiguration(key).read();\n\t}\n\n\twrite(key: ConfigurationKey, content: string): Promise<void> {\n\t\treturn this.getCachedConfiguration(key).save(content);\n\t}\n\n\tremove(key: ConfigurationKey): Promise<void> {\n\t\treturn this.getCachedConfiguration(key).remove();\n\t}\n\n\tprivate getCachedConfiguration({ type, key }: ConfigurationKey): CachedConfiguration {\n\t\tconst k = `${type}:${key}`;\n\t\tlet cachedConfiguration = this.cachedConfigurations.get(k);\n\t\tif (!cachedConfiguration) {\n\t\t\tcachedConfiguration = new CachedConfiguration({ type, key }, this.cacheHome, this.fileService);\n\t\t\tthis.cachedConfigurations.set(k, cachedConfiguration);\n\t\t}\n\t\treturn cachedConfiguration;\n\t}\n}\n\nclass CachedConfiguration {\n\n\tprivate queue: Queue<void>;\n\tprivate cachedConfigurationFolderResource: URI;\n\tprivate cachedConfigurationFileResource: URI;\n\n\tconstructor(\n\t\t{ type, key }: ConfigurationKey,\n\t\tcacheHome: URI,\n\t\tprivate readonly fileService: IFileService\n\t) {\n\t\tthis.cachedConfigurationFolderResource = joinPath(cacheHome, 'CachedConfigurations', type, key);\n\t\tthis.cachedConfigurationFileResource = joinPath(this.cachedConfigurationFolderResource, type === 'workspaces' ? 'workspace.json' : 'configuration.json');\n\t\tthis.queue = new Queue<void>();\n\t}\n\n\tasync read(): Promise<string> {\n\t\ttry {\n\t\t\tconst content = await this.fileService.readFile(this.cachedConfigurationFileResource);\n\t\t\treturn content.value.toString();\n\t\t} catch (e) {\n\t\t\treturn '';\n\t\t}\n\t}\n\n\tasync save(content: string): Promise<void> {\n\t\tconst created = await this.createCachedFolder();\n\t\tif (created) {\n\t\t\tawait this.queue.queue(async () => {\n\t\t\t\tawait this.fileService.writeFile(this.cachedConfigurationFileResource, VSBuffer.fromString(content));\n\t\t\t});\n\t\t}\n\t}\n\n\tasync remove(): Promise<void> {\n\t\ttry {\n\t\t\tawait this.queue.queue(() => this.fileService.del(this.cachedConfigurationFolderResource, { recursive: true, useTrash: false }));\n\t\t} catch (error) {\n\t\t\tif ((<FileOperationError>error).fileOperationResult !== FileOperationResult.FILE_NOT_FOUND) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async createCachedFolder(): Promise<boolean> {\n\t\tif (await this.fileService.exists(this.cachedConfigurationFolderResource)) {\n\t\t\treturn true;\n\t\t}\n\t\ttry {\n\t\t\tawait this.fileService.createFolder(this.cachedConfigurationFolderResource);\n\t\t\treturn true;\n\t\t} catch (error) {\n\t\t\treturn false;\n\t\t}\n\t}\n}\n\n"]}