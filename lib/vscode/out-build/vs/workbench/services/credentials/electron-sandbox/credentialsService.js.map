{"version":3,"file":"credentialsService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/credentials/electron-sandbox/credentialsService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAQhG,IAAa,wBAAwB,GAArC,MAAa,wBAAyB,SAAQ,sBAAU;QAOvD,YAAiD,iBAAqC;YACrF,KAAK,EAAE,CAAC;YADwC,sBAAiB,GAAjB,iBAAiB,CAAoB;YAH9E,yBAAoB,GAAqC,IAAI,CAAC,SAAS,CAAC,IAAI,eAAO,EAAE,CAAC,CAAC;YACtF,wBAAmB,GAAG,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC;YAK9D,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAC1B,CAAC;QAEO,iBAAiB;YACxB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAC5G,CAAC;QAED,WAAW,CAAC,OAAe,EAAE,OAAe;YAC3C,OAAO,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAC7D,CAAC;QAED,WAAW,CAAC,OAAe,EAAE,OAAe,EAAE,QAAgB;YAC7D,OAAO,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,OAAO,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;QACvE,CAAC;QAED,cAAc,CAAC,OAAe,EAAE,OAAe;YAC9C,OAAO,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAChE,CAAC;QAED,YAAY,CAAC,OAAe;YAC3B,OAAO,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;QACrD,CAAC;QAED,eAAe,CAAC,OAAe;YAC9B,OAAO,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;QACxD,CAAC;KACD,CAAA;IApCY,wBAAwB;QAOvB,WAAA,2BAAkB,CAAA;OAPnB,wBAAwB,CAoCpC;IApCY,4DAAwB;IAsCrC,CAAA,GAAA,8BAAiB,CAAA,CAAC,iCAAmB,EAAE,wBAAwB,EAAE,IAAI,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ICredentialsChangeEvent, ICredentialsService } from 'vs/workbench/services/credentials/common/credentials';\nimport { INativeHostService } from 'vs/platform/native/electron-sandbox/native';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { Emitter } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\n\nexport class KeytarCredentialsService extends Disposable implements ICredentialsService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate _onDidChangePassword: Emitter<ICredentialsChangeEvent> = this._register(new Emitter());\n\treadonly onDidChangePassword = this._onDidChangePassword.event;\n\n\tconstructor(@INativeHostService private readonly nativeHostService: INativeHostService) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.nativeHostService.onDidChangePassword(event => this._onDidChangePassword.fire(event)));\n\t}\n\n\tgetPassword(service: string, account: string): Promise<string | null> {\n\t\treturn this.nativeHostService.getPassword(service, account);\n\t}\n\n\tsetPassword(service: string, account: string, password: string): Promise<void> {\n\t\treturn this.nativeHostService.setPassword(service, account, password);\n\t}\n\n\tdeletePassword(service: string, account: string): Promise<boolean> {\n\t\treturn this.nativeHostService.deletePassword(service, account);\n\t}\n\n\tfindPassword(service: string): Promise<string | null> {\n\t\treturn this.nativeHostService.findPassword(service);\n\t}\n\n\tfindCredentials(service: string): Promise<Array<{ account: string, password: string }>> {\n\t\treturn this.nativeHostService.findCredentials(service);\n\t}\n}\n\nregisterSingleton(ICredentialsService, KeytarCredentialsService, true);\n"]}