{"version":3,"file":"credentialsService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/credentials/browser/credentialsService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ICredentialsService, ICredentialsProvider, ICredentialsChangeEvent } from 'vs/workbench/services/credentials/common/credentials';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { Emitter } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\n\nexport class BrowserCredentialsService extends Disposable implements ICredentialsService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate _onDidChangePassword = this._register(new Emitter<ICredentialsChangeEvent>());\n\treadonly onDidChangePassword = this._onDidChangePassword.event;\n\n\tprivate credentialsProvider: ICredentialsProvider;\n\n\tconstructor(@IWorkbenchEnvironmentService environmentService: IWorkbenchEnvironmentService) {\n\t\tsuper();\n\n\t\tif (environmentService.options && environmentService.options.credentialsProvider) {\n\t\t\tthis.credentialsProvider = environmentService.options.credentialsProvider;\n\t\t} else {\n\t\t\tthis.credentialsProvider = new InMemoryCredentialsProvider();\n\t\t}\n\t}\n\n\tgetPassword(service: string, account: string): Promise<string | null> {\n\t\treturn this.credentialsProvider.getPassword(service, account);\n\t}\n\n\tasync setPassword(service: string, account: string, password: string): Promise<void> {\n\t\tawait this.credentialsProvider.setPassword(service, account, password);\n\n\t\tthis._onDidChangePassword.fire({ service, account });\n\t}\n\n\tdeletePassword(service: string, account: string): Promise<boolean> {\n\t\tconst didDelete = this.credentialsProvider.deletePassword(service, account);\n\t\tthis._onDidChangePassword.fire({ service, account });\n\n\t\treturn didDelete;\n\t}\n\n\tfindPassword(service: string): Promise<string | null> {\n\t\treturn this.credentialsProvider.findPassword(service);\n\t}\n\n\tfindCredentials(service: string): Promise<Array<{ account: string, password: string; }>> {\n\t\treturn this.credentialsProvider.findCredentials(service);\n\t}\n}\n\ninterface ICredential {\n\tservice: string;\n\taccount: string;\n\tpassword: string;\n}\n\nclass InMemoryCredentialsProvider implements ICredentialsProvider {\n\n\tprivate credentials: ICredential[] = [];\n\n\tasync getPassword(service: string, account: string): Promise<string | null> {\n\t\tconst credential = this.doFindPassword(service, account);\n\n\t\treturn credential ? credential.password : null;\n\t}\n\n\tasync setPassword(service: string, account: string, password: string): Promise<void> {\n\t\tthis.deletePassword(service, account);\n\t\tthis.credentials.push({ service, account, password });\n\t}\n\n\tasync deletePassword(service: string, account: string): Promise<boolean> {\n\t\tconst credential = this.doFindPassword(service, account);\n\t\tif (credential) {\n\t\t\tthis.credentials = this.credentials.splice(this.credentials.indexOf(credential), 1);\n\t\t}\n\n\t\treturn !!credential;\n\t}\n\n\tasync findPassword(service: string): Promise<string | null> {\n\t\tconst credential = this.doFindPassword(service);\n\n\t\treturn credential ? credential.password : null;\n\t}\n\n\tprivate doFindPassword(service: string, account?: string): ICredential | undefined {\n\t\treturn this.credentials.find(credential =>\n\t\t\tcredential.service === service && (typeof account !== 'string' || credential.account === account));\n\t}\n\n\tasync findCredentials(service: string): Promise<Array<{ account: string, password: string; }>> {\n\t\treturn this.credentials\n\t\t\t.filter(credential => credential.service === service)\n\t\t\t.map(({ account, password }) => ({ account, password }));\n\t}\n}\n\nregisterSingleton(ICredentialsService, BrowserCredentialsService, true);\n"]}