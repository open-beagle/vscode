{"version":3,"file":"accessibilityService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/accessibility/electron-sandbox/accessibilityService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAuBhG,IAAa,0BAA0B,GAAvC,MAAa,0BAA2B,SAAQ,2CAAoB;QAKnE,YACqC,kBAAsD,EACtE,iBAAqC,EAClC,oBAA2C,EAC9B,iBAAoC,EACnC,iBAAqC;YAE1E,KAAK,CAAC,iBAAiB,EAAE,oBAAoB,CAAC,CAAC;YAHX,sBAAiB,GAAjB,iBAAiB,CAAmB;YACnC,sBAAiB,GAAjB,iBAAiB,CAAoB;YARnE,qBAAgB,GAAG,KAAK,CAAC;YACzB,oCAA+B,GAAwB,SAAS,CAAC;YAUxE,IAAI,CAAC,uBAAuB,CAAC,kBAAkB,CAAC,aAAa,CAAC,oBAAoB,CAAC,CAAC,iBAA8B,CAAC,iBAA8B,CAAC,CAAC;QACpJ,CAAC;QAEQ,KAAK,CAAC,yBAAyB;YACvC,IAAI,CAAC,oBAAS,EAAE;gBACf,OAAO,KAAK,CAAC;aACb;YAED,IAAI,OAAO,IAAI,CAAC,+BAA+B,KAAK,SAAS,EAAE;gBAC9D,MAAM,4BAA4B,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,sBAAsB,CAAC,mBAAmB,EAAE,mDAAmD,EAAE,IAAI,CAAC,CAAC;gBACzK,IAAI,CAAC,+BAA+B,GAAG,CAAC,4BAA4B,KAAK,GAAG,CAAC,CAAC;aAC9E;YAED,OAAO,IAAI,CAAC,+BAA+B,CAAC;QAC7C,CAAC;QAEQ,uBAAuB,CAAC,oBAA0C;YAC1E,KAAK,CAAC,uBAAuB,CAAC,oBAAoB,CAAC,CAAC;YAEpD,IAAI,CAAC,IAAI,CAAC,gBAAgB,IAAI,oBAAoB,oBAAiC,EAAE;gBACpF,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAA2D,eAAe,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;gBAChI,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;aAC7B;QACF,CAAC;KACD,CAAA;IArCY,0BAA0B;QAMpC,WAAA,uDAAkC,CAAA;QAClC,WAAA,+BAAkB,CAAA;QAClB,WAAA,qCAAqB,CAAA;QACrB,WAAA,6BAAiB,CAAA;QACjB,WAAA,2BAAkB,CAAA;OAVR,0BAA0B,CAqCtC;IArCY,gEAA0B;IAuCvC,CAAA,GAAA,8BAAiB,CAAA,CAAC,qCAAqB,EAAE,0BAA0B,EAAE,IAAI,CAAC,CAAC;IAE3E,uLAAuL;IACvL,IAAM,8BAA8B,GAApC,MAAM,8BAA8B;QACnC,YACsB,kBAAuC,EACrC,oBAA2C,EAC9B,kBAAsD;YAE1F,MAAM,0BAA0B,GAAG,GAAG,EAAE;gBACvC,IAAI,oBAAoB,CAAC,uBAAuB,EAAE,EAAE;oBACnD,kBAAkB,CAAC,KAAK,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,8BAA8B,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;iBAC3H;YACF,CAAC,CAAC;YACF,0BAA0B,EAAE,CAAC;YAC7B,oBAAoB,CAAC,gCAAgC,CAAC,0BAA0B,CAAC,CAAC;QACnF,CAAC;KACD,CAAA;IAdK,8BAA8B;QAEjC,WAAA,iCAAmB,CAAA;QACnB,WAAA,qCAAqB,CAAA;QACrB,WAAA,uDAAkC,CAAA;OAJ/B,8BAA8B,CAcnC;IAED,IAAI,kBAAO,EAAE;QACZ,mBAAQ,CAAC,EAAE,CAAkC,0BAAmB,CAAC,SAAS,CAAC,CAAC,6BAA6B,CAAC,8BAA8B,gBAAuB,CAAC;KAChK","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IAccessibilityService, AccessibilitySupport } from 'vs/platform/accessibility/common/accessibility';\nimport { isWindows, isLinux } from 'vs/base/common/platform';\nimport { INativeWorkbenchEnvironmentService } from 'vs/workbench/services/environment/electron-sandbox/environmentService';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { AccessibilityService } from 'vs/platform/accessibility/common/accessibilityService';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IJSONEditingService } from 'vs/workbench/services/configuration/common/jsonEditing';\nimport { IWorkbenchContribution, IWorkbenchContributionsRegistry, Extensions as WorkbenchExtensions } from 'vs/workbench/common/contributions';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { INativeHostService } from 'vs/platform/native/electron-sandbox/native';\n\ninterface AccessibilityMetrics {\n\tenabled: boolean;\n}\ntype AccessibilityMetricsClassification = {\n\tenabled: { classification: 'SystemMetaData', purpose: 'FeatureInsight' };\n};\n\nexport class NativeAccessibilityService extends AccessibilityService implements IAccessibilityService {\n\n\tprivate didSendTelemetry = false;\n\tprivate shouldAlwaysUnderlineAccessKeys: boolean | undefined = undefined;\n\n\tconstructor(\n\t\t@INativeWorkbenchEnvironmentService environmentService: INativeWorkbenchEnvironmentService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t\t@INativeHostService private readonly nativeHostService: INativeHostService\n\t) {\n\t\tsuper(contextKeyService, configurationService);\n\t\tthis.setAccessibilitySupport(environmentService.configuration.accessibilitySupport ? AccessibilitySupport.Enabled : AccessibilitySupport.Disabled);\n\t}\n\n\toverride async alwaysUnderlineAccessKeys(): Promise<boolean> {\n\t\tif (!isWindows) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (typeof this.shouldAlwaysUnderlineAccessKeys !== 'boolean') {\n\t\t\tconst windowsKeyboardAccessibility = await this.nativeHostService.windowsGetStringRegKey('HKEY_CURRENT_USER', 'Control Panel\\\\Accessibility\\\\Keyboard Preference', 'On');\n\t\t\tthis.shouldAlwaysUnderlineAccessKeys = (windowsKeyboardAccessibility === '1');\n\t\t}\n\n\t\treturn this.shouldAlwaysUnderlineAccessKeys;\n\t}\n\n\toverride setAccessibilitySupport(accessibilitySupport: AccessibilitySupport): void {\n\t\tsuper.setAccessibilitySupport(accessibilitySupport);\n\n\t\tif (!this.didSendTelemetry && accessibilitySupport === AccessibilitySupport.Enabled) {\n\t\t\tthis._telemetryService.publicLog2<AccessibilityMetrics, AccessibilityMetricsClassification>('accessibility', { enabled: true });\n\t\t\tthis.didSendTelemetry = true;\n\t\t}\n\t}\n}\n\nregisterSingleton(IAccessibilityService, NativeAccessibilityService, true);\n\n// On linux we do not automatically detect that a screen reader is detected, thus we have to implicitly notify the renderer to enable accessibility when user configures it in settings\nclass LinuxAccessibilityContribution implements IWorkbenchContribution {\n\tconstructor(\n\t\t@IJSONEditingService jsonEditingService: IJSONEditingService,\n\t\t@IAccessibilityService accessibilityService: IAccessibilityService,\n\t\t@INativeWorkbenchEnvironmentService environmentService: INativeWorkbenchEnvironmentService\n\t) {\n\t\tconst forceRendererAccessibility = () => {\n\t\t\tif (accessibilityService.isScreenReaderOptimized()) {\n\t\t\t\tjsonEditingService.write(environmentService.argvResource, [{ path: ['force-renderer-accessibility'], value: true }], true);\n\t\t\t}\n\t\t};\n\t\tforceRendererAccessibility();\n\t\taccessibilityService.onDidChangeScreenReaderOptimized(forceRendererAccessibility);\n\t}\n}\n\nif (isLinux) {\n\tRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(LinuxAccessibilityContribution, LifecyclePhase.Ready);\n}\n"]}