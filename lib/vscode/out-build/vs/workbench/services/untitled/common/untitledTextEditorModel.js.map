{"version":3,"file":"untitledTextEditorModel.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/untitled/common/untitledTextEditorModel.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ISaveOptions } from 'vs/workbench/common/editor';\nimport { BaseTextEditorModel } from 'vs/workbench/common/editor/textEditorModel';\nimport { URI } from 'vs/base/common/uri';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { IWorkingCopyBackupService } from 'vs/workbench/services/workingCopy/common/workingCopyBackup';\nimport { ITextResourceConfigurationService } from 'vs/editor/common/services/textResourceConfigurationService';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { createTextBufferFactory, createTextBufferFactoryFromStream } from 'vs/editor/common/model/textModel';\nimport { ITextEditorModel } from 'vs/editor/common/services/resolverService';\nimport { IWorkingCopyService } from 'vs/workbench/services/workingCopy/common/workingCopyService';\nimport { IWorkingCopy, WorkingCopyCapabilities, IWorkingCopyBackup, NO_TYPE_ID } from 'vs/workbench/services/workingCopy/common/workingCopy';\nimport { IEncodingSupport, IModeSupport, ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';\nimport { IModelContentChangedEvent } from 'vs/editor/common/model/textModelEvents';\nimport { withNullAsUndefined, assertIsDefined } from 'vs/base/common/types';\nimport { ILabelService } from 'vs/platform/label/common/label';\nimport { ensureValidWordDefinition } from 'vs/editor/common/model/wordHelper';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { getCharContainingOffset } from 'vs/base/common/strings';\nimport { UTF8 } from 'vs/workbench/services/textfile/common/encoding';\nimport { bufferToStream, VSBuffer, VSBufferReadableStream } from 'vs/base/common/buffer';\n\nexport interface IUntitledTextEditorModel extends ITextEditorModel, IModeSupport, IEncodingSupport, IWorkingCopy {\n\n\t/**\n\t * Emits an event when the encoding of this untitled model changes.\n\t */\n\treadonly onDidChangeEncoding: Event<void>;\n\n\t/**\n\t * Emits an event when the name of this untitled model changes.\n\t */\n\treadonly onDidChangeName: Event<void>;\n\n\t/**\n\t * Emits an event when this untitled model is reverted.\n\t */\n\treadonly onDidRevert: Event<void>;\n\n\t/**\n\t * Whether this untitled text model has an associated file path.\n\t */\n\treadonly hasAssociatedFilePath: boolean;\n\n\t/**\n\t * Whether this model has an explicit language mode or not.\n\t */\n\treadonly hasModeSetExplicitly: boolean;\n\n\t/**\n\t * Sets the encoding to use for this untitled model.\n\t */\n\tsetEncoding(encoding: string): Promise<void>;\n\n\t/**\n\t * Resolves the untitled model.\n\t */\n\tresolve(): Promise<void>;\n\n\t/**\n\t * Updates the value of the untitled model optionally allowing to ignore dirty.\n\t * The model must be resolved for this method to work.\n\t */\n\tsetValue(value: string, ignoreDirty?: boolean): void;\n}\n\nexport class UntitledTextEditorModel extends BaseTextEditorModel implements IUntitledTextEditorModel {\n\n\tprivate static readonly FIRST_LINE_NAME_MAX_LENGTH = 40;\n\tprivate static readonly FIRST_LINE_NAME_CANDIDATE_MAX_LENGTH = UntitledTextEditorModel.FIRST_LINE_NAME_MAX_LENGTH * 10;\n\n\t//#region Events\n\n\tprivate readonly _onDidChangeContent = this._register(new Emitter<void>());\n\treadonly onDidChangeContent = this._onDidChangeContent.event;\n\n\tprivate readonly _onDidChangeName = this._register(new Emitter<void>());\n\treadonly onDidChangeName = this._onDidChangeName.event;\n\n\tprivate readonly _onDidChangeDirty = this._register(new Emitter<void>());\n\treadonly onDidChangeDirty = this._onDidChangeDirty.event;\n\n\tprivate readonly _onDidChangeEncoding = this._register(new Emitter<void>());\n\treadonly onDidChangeEncoding = this._onDidChangeEncoding.event;\n\n\tprivate readonly _onDidRevert = this._register(new Emitter<void>());\n\treadonly onDidRevert = this._onDidRevert.event;\n\n\t//#endregion\n\n\treadonly typeId = NO_TYPE_ID; // IMPORTANT: never change this to not break existing assumptions (e.g. backups)\n\n\treadonly capabilities = WorkingCopyCapabilities.Untitled;\n\n\tprivate cachedModelFirstLineWords: string | undefined = undefined;\n\tget name(): string {\n\t\t// Take name from first line if present and only if\n\t\t// we have no associated file path. In that case we\n\t\t// prefer the file name as title.\n\t\tif (this.configuredLabelFormat === 'content' && !this.hasAssociatedFilePath && this.cachedModelFirstLineWords) {\n\t\t\treturn this.cachedModelFirstLineWords;\n\t\t}\n\n\t\t// Otherwise fallback to resource\n\t\treturn this.labelService.getUriBasenameLabel(this.resource);\n\t}\n\n\tprivate dirty = this.hasAssociatedFilePath || !!this.initialValue;\n\tprivate ignoreDirtyOnModelContentChange = false;\n\n\tprivate versionId = 0;\n\n\tprivate configuredEncoding: string | undefined;\n\tprivate configuredLabelFormat: 'content' | 'name' = 'content';\n\n\tconstructor(\n\t\tpublic readonly resource: URI,\n\t\tpublic readonly hasAssociatedFilePath: boolean,\n\t\tprivate readonly initialValue: string | undefined,\n\t\tprivate preferredMode: string | undefined,\n\t\tprivate preferredEncoding: string | undefined,\n\t\t@IModeService modeService: IModeService,\n\t\t@IModelService modelService: IModelService,\n\t\t@IWorkingCopyBackupService private readonly workingCopyBackupService: IWorkingCopyBackupService,\n\t\t@ITextResourceConfigurationService private readonly textResourceConfigurationService: ITextResourceConfigurationService,\n\t\t@IWorkingCopyService private readonly workingCopyService: IWorkingCopyService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@ILabelService private readonly labelService: ILabelService,\n\t\t@IEditorService private readonly editorService: IEditorService\n\t) {\n\t\tsuper(modelService, modeService);\n\n\t\t// Make known to working copy service\n\t\tthis._register(this.workingCopyService.registerWorkingCopy(this));\n\n\t\tif (preferredMode) {\n\t\t\tthis.setMode(preferredMode);\n\t\t}\n\n\t\t// Fetch config\n\t\tthis.onConfigurationChange(false);\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Config Changes\n\t\tthis._register(this.textResourceConfigurationService.onDidChangeConfiguration(e => this.onConfigurationChange(true)));\n\t}\n\n\tprivate onConfigurationChange(fromEvent: boolean): void {\n\n\t\t// Encoding\n\t\tconst configuredEncoding = this.textResourceConfigurationService.getValue<string>(this.resource, 'files.encoding');\n\t\tif (this.configuredEncoding !== configuredEncoding) {\n\t\t\tthis.configuredEncoding = configuredEncoding;\n\n\t\t\tif (fromEvent && !this.preferredEncoding) {\n\t\t\t\tthis._onDidChangeEncoding.fire(); // do not fire event if we have a preferred encoding set\n\t\t\t}\n\t\t}\n\n\t\t// Label Format\n\t\tconst configuredLabelFormat = this.textResourceConfigurationService.getValue<string>(this.resource, 'workbench.editor.untitled.labelFormat');\n\t\tif (this.configuredLabelFormat !== configuredLabelFormat && (configuredLabelFormat === 'content' || configuredLabelFormat === 'name')) {\n\t\t\tthis.configuredLabelFormat = configuredLabelFormat;\n\n\t\t\tif (fromEvent) {\n\t\t\t\tthis._onDidChangeName.fire();\n\t\t\t}\n\t\t}\n\t}\n\n\tgetVersionId(): number {\n\t\treturn this.versionId;\n\t}\n\n\tprivate _hasModeSetExplicitly: boolean = false;\n\tget hasModeSetExplicitly(): boolean { return this._hasModeSetExplicitly; }\n\n\toverride setMode(mode: string): void {\n\n\t\t// Remember that an explicit mode was set\n\t\tthis._hasModeSetExplicitly = true;\n\n\t\tlet actualMode: string | undefined = undefined;\n\t\tif (mode === '${activeEditorLanguage}') {\n\t\t\t// support the special '${activeEditorLanguage}' mode by\n\t\t\t// looking up the language mode from the currently\n\t\t\t// active text editor if any\n\t\t\tactualMode = this.editorService.activeTextEditorMode;\n\t\t} else {\n\t\t\tactualMode = mode;\n\t\t}\n\n\t\tthis.preferredMode = actualMode;\n\n\t\tif (actualMode) {\n\t\t\tsuper.setMode(actualMode);\n\t\t}\n\t}\n\n\toverride getMode(): string | undefined {\n\t\tif (this.textEditorModel) {\n\t\t\treturn this.textEditorModel.getModeId();\n\t\t}\n\n\t\treturn this.preferredMode;\n\t}\n\n\tgetEncoding(): string | undefined {\n\t\treturn this.preferredEncoding || this.configuredEncoding;\n\t}\n\n\tasync setEncoding(encoding: string): Promise<void> {\n\t\tconst oldEncoding = this.getEncoding();\n\t\tthis.preferredEncoding = encoding;\n\n\t\t// Emit if it changed\n\t\tif (oldEncoding !== this.preferredEncoding) {\n\t\t\tthis._onDidChangeEncoding.fire();\n\t\t}\n\t}\n\n\tsetValue(value: string, ignoreDirty?: boolean): void {\n\t\tif (ignoreDirty) {\n\t\t\tthis.ignoreDirtyOnModelContentChange = true;\n\t\t}\n\n\t\ttry {\n\t\t\tthis.updateTextEditorModel(createTextBufferFactory(value));\n\t\t} finally {\n\t\t\tthis.ignoreDirtyOnModelContentChange = false;\n\t\t}\n\t}\n\n\toverride isReadonly(): boolean {\n\t\treturn false;\n\t}\n\n\n\t//#region Dirty\n\n\tisDirty(): boolean {\n\t\treturn this.dirty;\n\t}\n\n\tprivate setDirty(dirty: boolean): void {\n\t\tif (this.dirty === dirty) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.dirty = dirty;\n\t\tthis._onDidChangeDirty.fire();\n\t}\n\n\t//#endregion\n\n\n\t//#region Save / Revert / Backup\n\n\tasync save(options?: ISaveOptions): Promise<boolean> {\n\t\tconst target = await this.textFileService.save(this.resource, options);\n\n\t\treturn !!target;\n\t}\n\n\tasync revert(): Promise<void> {\n\t\tthis.setDirty(false);\n\n\t\t// Emit as event\n\t\tthis._onDidRevert.fire();\n\n\t\t// A reverted untitled model is invalid because it has\n\t\t// no actual source on disk to revert to. As such we\n\t\t// dispose the model.\n\t\tthis.dispose();\n\t}\n\n\tasync backup(token: CancellationToken): Promise<IWorkingCopyBackup> {\n\n\t\t// Fill in content the same way we would do when\n\t\t// saving the file via the text file service\n\t\t// encoding support (hardcode UTF-8)\n\t\tconst content = await this.textFileService.getEncodedReadable(this.resource, withNullAsUndefined(this.createSnapshot()), { encoding: UTF8 });\n\n\t\treturn { content };\n\t}\n\n\t//#endregion\n\n\n\t//#region Resolve\n\n\toverride async resolve(): Promise<void> {\n\n\t\t// Create text editor model if not yet done\n\t\tlet createdUntitledModel = false;\n\t\tlet hasBackup = false;\n\t\tif (!this.textEditorModel) {\n\t\t\tlet untitledContents: VSBufferReadableStream;\n\n\t\t\t// Check for backups or use initial value or empty\n\t\t\tconst backup = await this.workingCopyBackupService.resolve(this);\n\t\t\tif (backup) {\n\t\t\t\tuntitledContents = backup.value;\n\t\t\t\thasBackup = true;\n\t\t\t} else {\n\t\t\t\tuntitledContents = bufferToStream(VSBuffer.fromString(this.initialValue || ''));\n\t\t\t}\n\n\t\t\t// Determine untitled contents based on backup\n\t\t\t// or initial value. We must use text file service\n\t\t\t// to create the text factory to respect encodings\n\t\t\t// accordingly.\n\t\t\tconst untitledContentsFactory = await createTextBufferFactoryFromStream(await this.textFileService.getDecodedStream(this.resource, untitledContents, { encoding: UTF8 }));\n\n\t\t\tthis.createTextEditorModel(untitledContentsFactory, this.resource, this.preferredMode);\n\t\t\tcreatedUntitledModel = true;\n\t\t}\n\n\t\t// Otherwise: the untitled model already exists and we must assume\n\t\t// that the value of the model was changed by the user. As such we\n\t\t// do not update the contents, only the mode if configured.\n\t\telse {\n\t\t\tthis.updateTextEditorModel(undefined, this.preferredMode);\n\t\t}\n\n\t\t// Listen to text model events\n\t\tconst textEditorModel = assertIsDefined(this.textEditorModel);\n\t\tthis._register(textEditorModel.onDidChangeContent(e => this.onModelContentChanged(textEditorModel, e)));\n\t\tthis._register(textEditorModel.onDidChangeLanguage(() => this.onConfigurationChange(true))); // mode change can have impact on config\n\n\t\t// Only adjust name and dirty state etc. if we\n\t\t// actually created the untitled model\n\t\tif (createdUntitledModel) {\n\n\t\t\t// Name\n\t\t\tif (hasBackup || this.initialValue) {\n\t\t\t\tthis.updateNameFromFirstLine(textEditorModel);\n\t\t\t}\n\n\t\t\t// Untitled associated to file path are dirty right away as well as untitled with content\n\t\t\tthis.setDirty(this.hasAssociatedFilePath || !!hasBackup || !!this.initialValue);\n\n\t\t\t// If we have initial contents, make sure to emit this\n\t\t\t// as the appropiate events to the outside.\n\t\t\tif (hasBackup || this.initialValue) {\n\t\t\t\tthis._onDidChangeContent.fire();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onModelContentChanged(textEditorModel: ITextModel, e: IModelContentChangedEvent): void {\n\t\tthis.versionId++;\n\n\t\tif (!this.ignoreDirtyOnModelContentChange) {\n\t\t\t// mark the untitled text editor as non-dirty once its content becomes empty and we do\n\t\t\t// not have an associated path set. we never want dirty indicator in that case.\n\t\t\tif (!this.hasAssociatedFilePath && textEditorModel.getLineCount() === 1 && textEditorModel.getLineContent(1) === '') {\n\t\t\t\tthis.setDirty(false);\n\t\t\t}\n\n\t\t\t// turn dirty otherwise\n\t\t\telse {\n\t\t\t\tthis.setDirty(true);\n\t\t\t}\n\t\t}\n\n\t\t// Check for name change if first line changed in the range of 0-FIRST_LINE_NAME_CANDIDATE_MAX_LENGTH columns\n\t\tif (e.changes.some(change => (change.range.startLineNumber === 1 || change.range.endLineNumber === 1) && change.range.startColumn <= UntitledTextEditorModel.FIRST_LINE_NAME_CANDIDATE_MAX_LENGTH)) {\n\t\t\tthis.updateNameFromFirstLine(textEditorModel);\n\t\t}\n\n\t\t// Emit as general content change event\n\t\tthis._onDidChangeContent.fire();\n\t}\n\n\tprivate updateNameFromFirstLine(textEditorModel: ITextModel): void {\n\t\tif (this.hasAssociatedFilePath) {\n\t\t\treturn; // not in case of an associated file path\n\t\t}\n\n\t\t// Determine the first words of the model following these rules:\n\t\t// - cannot be only whitespace (so we trim())\n\t\t// - cannot be only non-alphanumeric characters (so we run word definition regex over it)\n\t\t// - cannot be longer than FIRST_LINE_MAX_TITLE_LENGTH\n\t\t// - normalize multiple whitespaces to a single whitespace\n\n\t\tlet modelFirstWordsCandidate: string | undefined = undefined;\n\n\t\tlet firstLineText = textEditorModel\n\t\t\t.getValueInRange({\n\t\t\t\tstartLineNumber: 1,\n\t\t\t\tendLineNumber: 1,\n\t\t\t\tstartColumn: 1,\n\t\t\t\tendColumn: UntitledTextEditorModel.FIRST_LINE_NAME_CANDIDATE_MAX_LENGTH + 1\t\t// first cap at FIRST_LINE_NAME_CANDIDATE_MAX_LENGTH\n\t\t\t})\n\t\t\t.trim().replace(/\\s+/g, ' '); \t\t\t\t\t\t\t\t\t\t\t\t\t\t// normalize whitespaces\n\t\tfirstLineText = firstLineText.substr(0, getCharContainingOffset(\t\t\t\t\t\t// finally cap at FIRST_LINE_NAME_MAX_LENGTH (grapheme aware #111235)\n\t\t\tfirstLineText,\n\t\t\tUntitledTextEditorModel.FIRST_LINE_NAME_MAX_LENGTH)[0]\n\t\t);\n\n\t\tif (firstLineText && ensureValidWordDefinition().exec(firstLineText)) {\n\t\t\tmodelFirstWordsCandidate = firstLineText;\n\t\t}\n\n\t\tif (modelFirstWordsCandidate !== this.cachedModelFirstLineWords) {\n\t\t\tthis.cachedModelFirstLineWords = modelFirstWordsCandidate;\n\t\t\tthis._onDidChangeName.fire();\n\t\t}\n\t}\n\n\t//#endregion\n}\n"]}