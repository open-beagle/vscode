{"version":3,"file":"hover.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/hover/browser/hover.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAOnF,QAAA,aAAa,GAAG,CAAA,GAAA,+BAAe,CAAA,CAAgB,cAAc,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { IMarkdownString } from 'vs/base/common/htmlContent';\nimport { HoverPosition } from 'vs/base/browser/ui/hover/hoverWidget';\n\nexport const IHoverService = createDecorator<IHoverService>('hoverService');\n\n/**\n * Enables the convenient display of rich markdown-based hovers in the workbench.\n */\nexport interface IHoverService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Shows a hover, provided a hover with the same options object is not already visible.\n\t * @param options A set of options defining the characteristics of the hover.\n\t * @param focus Whether to focus the hover (useful for keyboard accessibility).\n\t *\n\t * **Example:** A simple usage with a single element target.\n\t *\n\t * ```typescript\n\t * showHover({\n\t *   text: new MarkdownString('Hello world'),\n\t *   target: someElement\n\t * });\n\t * ```\n\t */\n\tshowHover(options: IHoverOptions, focus?: boolean): IDisposable | undefined;\n\n\t/**\n\t * Hides the hover if it was visible.\n\t */\n\thideHover(): void;\n}\n\nexport interface IHoverOptions {\n\t/**\n\t * The text to display in the primary section of the hover. The type of text determines the\n\t * default `hideOnHover` behavior.\n\t */\n\ttext: IMarkdownString | string;\n\n\t/**\n\t * The target for the hover. This determines the position of the hover and it will only be\n\t * hidden when the mouse leaves both the hover and the target. A HTMLElement can be used for\n\t * simple cases and a IHoverTarget for more complex cases where multiple elements and/or a\n\t * dispose method is required.\n\t */\n\ttarget: IHoverTarget | HTMLElement;\n\n\t/**\n\t * A set of actions for the hover's \"status bar\".\n\t */\n\tactions?: IHoverAction[];\n\n\t/**\n\t * An optional array of classes to add to the hover element.\n\t */\n\tadditionalClasses?: string[];\n\n\t/**\n\t * An optional  link handler for markdown links, if this is not provided the IOpenerService will\n\t * be used to open the links using its default options.\n\t */\n\tlinkHandler?(url: string): void;\n\n\t/**\n\t * Whether to hide the hover when the mouse leaves the `target` and enters the actual hover.\n\t * This is false by default when text is an `IMarkdownString` and true when `text` is a\n\t * `string`. Note that this will be ignored if any `actions` are provided as hovering is\n\t * required to make them accessible.\n\t *\n\t * In general hiding on hover is desired for:\n\t * - Regular text where selection is not important\n\t * - Markdown that contains no links where selection is not important\n\t */\n\thideOnHover?: boolean;\n\n\t/**\n\t * Position of the hover. Default is to show above the target.\n\t * It will be ignored if there is not enough room to layout the hover in the specified position.\n\t */\n\thoverPosition?: HoverPosition;\n\n\t/**\n\t * Whether to show the hover pointer\n\t */\n\tshowPointer?: boolean;\n\n\t/**\n\t * Whether to show a compact hover\n\t */\n\tcompact?: boolean;\n}\n\nexport interface IHoverAction {\n\t/**\n\t * The label to use in the hover's status bar.\n\t */\n\tlabel: string;\n\n\t/**\n\t * The command ID of the action, this is used to resolve the keybinding to display after the\n\t * action label.\n\t */\n\tcommandId: string;\n\n\t/**\n\t * An optional class of an icon that will be displayed before the label.\n\t */\n\ticonClass?: string;\n\n\t/**\n\t * The callback to run the action.\n\t * @param target The action element that was activated.\n\t */\n\trun(target: HTMLElement): void;\n}\n\n/**\n * A target for a hover.\n */\nexport interface IHoverTarget extends IDisposable {\n\t/**\n\t * A set of target elements used to position the hover. If multiple elements are used the hover\n\t * will try to not overlap any target element. An example use case for this is show a hover for\n\t * wrapped text.\n\t */\n\treadonly targetElements: readonly HTMLElement[];\n\n\t/**\n\t * An optional absolute x coordinate to position the hover with, for example to position the\n\t * hover using `MouseEvent.pageX`.\n\t */\n\tx?: number;\n\n\t/**\n\t * An optional absolute y coordinate to position the hover with, for example to position the\n\t * hover using `MouseEvent.pageY`.\n\t */\n\ty?: number;\n}\n"]}