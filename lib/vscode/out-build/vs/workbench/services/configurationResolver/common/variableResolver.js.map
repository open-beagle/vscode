{"version":3,"sources":["vs/workbench/services/configurationResolver/common/variableResolver.ts"],"names":[],"mappings":"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","file":"variableResolver.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as paths from 'vs/base/common/path';\nimport * as process from 'vs/base/common/process';\nimport * as types from 'vs/base/common/types';\nimport * as objects from 'vs/base/common/objects';\nimport { IStringDictionary } from 'vs/base/common/collections';\nimport { IProcessEnvironment, isWindows, isMacintosh, isLinux } from 'vs/base/common/platform';\nimport { normalizeDriveLetter } from 'vs/base/common/labels';\nimport { localize } from 'vs/nls';\nimport { URI as uri } from 'vs/base/common/uri';\nimport { IConfigurationResolverService } from 'vs/workbench/services/configurationResolver/common/configurationResolver';\nimport { IWorkspaceFolder } from 'vs/platform/workspace/common/workspace';\nimport { ILabelService } from 'vs/platform/label/common/label';\n\nexport interface IVariableResolveContext {\n\tgetFolderUri(folderName: string): uri | undefined;\n\tgetWorkspaceFolderCount(): number;\n\tgetConfigurationValue(folderUri: uri | undefined, section: string): string | undefined;\n\tgetAppRoot(): string | undefined;\n\tgetExecPath(): string | undefined;\n\tgetFilePath(): string | undefined;\n\tgetWorkspaceFolderPathForFile?(): string | undefined;\n\tgetSelectedText(): string | undefined;\n\tgetLineNumber(): string | undefined;\n}\n\nexport class AbstractVariableResolverService implements IConfigurationResolverService {\n\n\tstatic readonly VARIABLE_LHS = '${';\n\tstatic readonly VARIABLE_REGEXP = /\\$\\{(.*?)\\}/g;\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate _context: IVariableResolveContext;\n\tprivate _labelService?: ILabelService;\n\tprivate _envVariablesPromise?: Promise<IProcessEnvironment>;\n\tprotected _contributedVariables: Map<string, () => Promise<string | undefined>> = new Map();\n\n\tconstructor(_context: IVariableResolveContext, _labelService?: ILabelService, _envVariablesPromise?: Promise<IProcessEnvironment>) {\n\t\tthis._context = _context;\n\t\tthis._labelService = _labelService;\n\t\tif (_envVariablesPromise) {\n\t\t\tthis._envVariablesPromise = _envVariablesPromise.then(envVariables => {\n\t\t\t\treturn this.prepareEnv(envVariables);\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate prepareEnv(envVariables: IProcessEnvironment): IProcessEnvironment {\n\t\t// windows env variables are case insensitive\n\t\tif (isWindows) {\n\t\t\tconst ev: IProcessEnvironment = Object.create(null);\n\t\t\tObject.keys(envVariables).forEach(key => {\n\t\t\t\tev[key.toLowerCase()] = envVariables[key];\n\t\t\t});\n\t\t\treturn ev;\n\t\t}\n\t\treturn envVariables;\n\t}\n\n\tpublic resolveWithEnvironment(environment: IProcessEnvironment, root: IWorkspaceFolder | undefined, value: string): string {\n\t\treturn this.recursiveResolve(this.prepareEnv(environment), root ? root.uri : undefined, value);\n\t}\n\n\tpublic async resolveAsync(root: IWorkspaceFolder | undefined, value: string): Promise<string>;\n\tpublic async resolveAsync(root: IWorkspaceFolder | undefined, value: string[]): Promise<string[]>;\n\tpublic async resolveAsync(root: IWorkspaceFolder | undefined, value: IStringDictionary<string>): Promise<IStringDictionary<string>>;\n\tpublic async resolveAsync(root: IWorkspaceFolder | undefined, value: any): Promise<any> {\n\t\treturn this.recursiveResolve(await this._envVariablesPromise, root ? root.uri : undefined, value);\n\t}\n\n\tprivate async resolveAnyBase(workspaceFolder: IWorkspaceFolder | undefined, config: any, commandValueMapping?: IStringDictionary<string>, resolvedVariables?: Map<string, string>): Promise<any> {\n\n\t\tconst result = objects.deepClone(config) as any;\n\n\t\t// hoist platform specific attributes to top level\n\t\tif (isWindows && result.windows) {\n\t\t\tObject.keys(result.windows).forEach(key => result[key] = result.windows[key]);\n\t\t} else if (isMacintosh && result.osx) {\n\t\t\tObject.keys(result.osx).forEach(key => result[key] = result.osx[key]);\n\t\t} else if (isLinux && result.linux) {\n\t\t\tObject.keys(result.linux).forEach(key => result[key] = result.linux[key]);\n\t\t}\n\n\t\t// delete all platform specific sections\n\t\tdelete result.windows;\n\t\tdelete result.osx;\n\t\tdelete result.linux;\n\n\t\t// substitute all variables recursively in string values\n\t\treturn this.recursiveResolve(await this._envVariablesPromise, workspaceFolder ? workspaceFolder.uri : undefined, result, commandValueMapping, resolvedVariables);\n\t}\n\n\tpublic async resolveAnyAsync(workspaceFolder: IWorkspaceFolder | undefined, config: any, commandValueMapping?: IStringDictionary<string>): Promise<any> {\n\t\treturn this.resolveAnyBase(workspaceFolder, config, commandValueMapping);\n\t}\n\n\tprotected async resolveAnyMap(workspaceFolder: IWorkspaceFolder | undefined, config: any, commandValueMapping?: IStringDictionary<string>): Promise<{ newConfig: any, resolvedVariables: Map<string, string> }> {\n\t\tconst resolvedVariables = new Map<string, string>();\n\t\tconst newConfig = await this.resolveAnyBase(workspaceFolder, config, commandValueMapping, resolvedVariables);\n\t\treturn { newConfig, resolvedVariables };\n\t}\n\n\tpublic resolveWithInteractionReplace(folder: IWorkspaceFolder | undefined, config: any, section?: string, variables?: IStringDictionary<string>): Promise<any> {\n\t\tthrow new Error('resolveWithInteractionReplace not implemented.');\n\t}\n\n\tpublic resolveWithInteraction(folder: IWorkspaceFolder | undefined, config: any, section?: string, variables?: IStringDictionary<string>): Promise<Map<string, string> | undefined> {\n\t\tthrow new Error('resolveWithInteraction not implemented.');\n\t}\n\n\tpublic contributeVariable(variable: string, resolution: () => Promise<string | undefined>): void {\n\t\tif (this._contributedVariables.has(variable)) {\n\t\t\tthrow new Error('Variable ' + variable + ' is contributed twice.');\n\t\t} else {\n\t\t\tthis._contributedVariables.set(variable, resolution);\n\t\t}\n\t}\n\n\tprivate recursiveResolve(environment: IProcessEnvironment | undefined, folderUri: uri | undefined, value: any, commandValueMapping?: IStringDictionary<string>, resolvedVariables?: Map<string, string>): any {\n\t\tif (types.isString(value)) {\n\t\t\treturn this.resolveString(environment, folderUri, value, commandValueMapping, resolvedVariables);\n\t\t} else if (types.isArray(value)) {\n\t\t\treturn value.map(s => this.recursiveResolve(environment, folderUri, s, commandValueMapping, resolvedVariables));\n\t\t} else if (types.isObject(value)) {\n\t\t\tlet result: IStringDictionary<string | IStringDictionary<string> | string[]> = Object.create(null);\n\t\t\tObject.keys(value).forEach(key => {\n\t\t\t\tconst replaced = this.resolveString(environment, folderUri, key, commandValueMapping, resolvedVariables);\n\t\t\t\tresult[replaced] = this.recursiveResolve(environment, folderUri, value[key], commandValueMapping, resolvedVariables);\n\t\t\t});\n\t\t\treturn result;\n\t\t}\n\t\treturn value;\n\t}\n\n\tprivate resolveString(environment: IProcessEnvironment | undefined, folderUri: uri | undefined, value: string, commandValueMapping: IStringDictionary<string> | undefined, resolvedVariables?: Map<string, string>): string {\n\n\t\t// loop through all variables occurrences in 'value'\n\t\tconst replaced = value.replace(AbstractVariableResolverService.VARIABLE_REGEXP, (match: string, variable: string) => {\n\t\t\t// disallow attempted nesting, see #77289\n\t\t\tif (variable.includes(AbstractVariableResolverService.VARIABLE_LHS)) {\n\t\t\t\treturn match;\n\t\t\t}\n\n\t\t\tlet resolvedValue = this.evaluateSingleVariable(environment, match, variable, folderUri, commandValueMapping);\n\n\t\t\tif (resolvedVariables) {\n\t\t\t\tresolvedVariables.set(variable, resolvedValue);\n\t\t\t}\n\n\t\t\treturn resolvedValue;\n\t\t});\n\n\t\treturn replaced;\n\t}\n\n\tprivate fsPath(displayUri: uri): string {\n\t\treturn this._labelService ? this._labelService.getUriLabel(displayUri, { noPrefix: true }) : displayUri.fsPath;\n\t}\n\n\tprivate evaluateSingleVariable(environment: IProcessEnvironment | undefined, match: string, variable: string, folderUri: uri | undefined, commandValueMapping: IStringDictionary<string> | undefined): string {\n\n\t\t// try to separate variable arguments from variable name\n\t\tlet argument: string | undefined;\n\t\tconst parts = variable.split(':');\n\t\tif (parts.length > 1) {\n\t\t\tvariable = parts[0];\n\t\t\targument = parts[1];\n\t\t}\n\n\t\t// common error handling for all variables that require an open editor\n\t\tconst getFilePath = (): string => {\n\n\t\t\tconst filePath = this._context.getFilePath();\n\t\t\tif (filePath) {\n\t\t\t\treturn filePath;\n\t\t\t}\n\t\t\tthrow new Error(localize('canNotResolveFile', \"Variable {0} can not be resolved. Please open an editor.\", match));\n\t\t};\n\n\t\t// common error handling for all variables that require an open editor\n\t\tconst getFolderPathForFile = (): string => {\n\n\t\t\tconst filePath = getFilePath();\t\t// throws error if no editor open\n\t\t\tif (this._context.getWorkspaceFolderPathForFile) {\n\t\t\t\tconst folderPath = this._context.getWorkspaceFolderPathForFile();\n\t\t\t\tif (folderPath) {\n\t\t\t\t\treturn folderPath;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrow new Error(localize('canNotResolveFolderForFile', \"Variable {0}: can not find workspace folder of '{1}'.\", match, paths.basename(filePath)));\n\t\t};\n\n\t\t// common error handling for all variables that require an open folder and accept a folder name argument\n\t\tconst getFolderUri = (): uri => {\n\n\t\t\tif (argument) {\n\t\t\t\tconst folder = this._context.getFolderUri(argument);\n\t\t\t\tif (folder) {\n\t\t\t\t\treturn folder;\n\t\t\t\t}\n\t\t\t\tthrow new Error(localize('canNotFindFolder', \"Variable {0} can not be resolved. No such folder '{1}'.\", match, argument));\n\t\t\t}\n\n\t\t\tif (folderUri) {\n\t\t\t\treturn folderUri;\n\t\t\t}\n\n\t\t\tif (this._context.getWorkspaceFolderCount() > 1) {\n\t\t\t\tthrow new Error(localize('canNotResolveWorkspaceFolderMultiRoot', \"Variable {0} can not be resolved in a multi folder workspace. Scope this variable using ':' and a workspace folder name.\", match));\n\t\t\t}\n\t\t\tthrow new Error(localize('canNotResolveWorkspaceFolder', \"Variable {0} can not be resolved. Please open a folder.\", match));\n\t\t};\n\n\n\t\tswitch (variable) {\n\n\t\t\tcase 'env':\n\t\t\t\tif (argument) {\n\t\t\t\t\tif (environment) {\n\t\t\t\t\t\t// Depending on the source of the environment, on Windows, the values may all be lowercase.\n\t\t\t\t\t\tconst env = environment[isWindows ? argument.toLowerCase() : argument];\n\t\t\t\t\t\tif (types.isString(env)) {\n\t\t\t\t\t\t\treturn env;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// For `env` we should do the same as a normal shell does - evaluates undefined envs to an empty string #46436\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\t\t\t\tthrow new Error(localize('missingEnvVarName', \"Variable {0} can not be resolved because no environment variable name is given.\", match));\n\n\t\t\tcase 'config':\n\t\t\t\tif (argument) {\n\t\t\t\t\tconst config = this._context.getConfigurationValue(folderUri, argument);\n\t\t\t\t\tif (types.isUndefinedOrNull(config)) {\n\t\t\t\t\t\tthrow new Error(localize('configNotFound', \"Variable {0} can not be resolved because setting '{1}' not found.\", match, argument));\n\t\t\t\t\t}\n\t\t\t\t\tif (types.isObject(config)) {\n\t\t\t\t\t\tthrow new Error(localize('configNoString', \"Variable {0} can not be resolved because '{1}' is a structured value.\", match, argument));\n\t\t\t\t\t}\n\t\t\t\t\treturn config;\n\t\t\t\t}\n\t\t\t\tthrow new Error(localize('missingConfigName', \"Variable {0} can not be resolved because no settings name is given.\", match));\n\n\t\t\tcase 'command':\n\t\t\t\treturn this.resolveFromMap(match, argument, commandValueMapping, 'command');\n\n\t\t\tcase 'input':\n\t\t\t\treturn this.resolveFromMap(match, argument, commandValueMapping, 'input');\n\n\t\t\tdefault: {\n\n\t\t\t\tswitch (variable) {\n\t\t\t\t\tcase 'workspaceRoot':\n\t\t\t\t\tcase 'workspaceFolder':\n\t\t\t\t\t\treturn normalizeDriveLetter(this.fsPath(getFolderUri()));\n\n\t\t\t\t\tcase 'cwd':\n\t\t\t\t\t\treturn ((folderUri || argument) ? normalizeDriveLetter(this.fsPath(getFolderUri())) : process.cwd());\n\n\t\t\t\t\tcase 'workspaceRootFolderName':\n\t\t\t\t\tcase 'workspaceFolderBasename':\n\t\t\t\t\t\treturn paths.basename(this.fsPath(getFolderUri()));\n\n\t\t\t\t\tcase 'lineNumber':\n\t\t\t\t\t\tconst lineNumber = this._context.getLineNumber();\n\t\t\t\t\t\tif (lineNumber) {\n\t\t\t\t\t\t\treturn lineNumber;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow new Error(localize('canNotResolveLineNumber', \"Variable {0} can not be resolved. Make sure to have a line selected in the active editor.\", match));\n\n\t\t\t\t\tcase 'selectedText':\n\t\t\t\t\t\tconst selectedText = this._context.getSelectedText();\n\t\t\t\t\t\tif (selectedText) {\n\t\t\t\t\t\t\treturn selectedText;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow new Error(localize('canNotResolveSelectedText', \"Variable {0} can not be resolved. Make sure to have some text selected in the active editor.\", match));\n\n\t\t\t\t\tcase 'file':\n\t\t\t\t\t\treturn getFilePath();\n\n\t\t\t\t\tcase 'fileWorkspaceFolder':\n\t\t\t\t\t\treturn getFolderPathForFile();\n\n\t\t\t\t\tcase 'relativeFile':\n\t\t\t\t\t\tif (folderUri || argument) {\n\t\t\t\t\t\t\treturn paths.relative(this.fsPath(getFolderUri()), getFilePath());\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn getFilePath();\n\n\t\t\t\t\tcase 'relativeFileDirname':\n\t\t\t\t\t\tconst dirname = paths.dirname(getFilePath());\n\t\t\t\t\t\tif (folderUri || argument) {\n\t\t\t\t\t\t\tconst relative = paths.relative(this.fsPath(getFolderUri()), dirname);\n\t\t\t\t\t\t\treturn relative.length === 0 ? '.' : relative;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn dirname;\n\n\t\t\t\t\tcase 'fileDirname':\n\t\t\t\t\t\treturn paths.dirname(getFilePath());\n\n\t\t\t\t\tcase 'fileExtname':\n\t\t\t\t\t\treturn paths.extname(getFilePath());\n\n\t\t\t\t\tcase 'fileBasename':\n\t\t\t\t\t\treturn paths.basename(getFilePath());\n\n\t\t\t\t\tcase 'fileBasenameNoExtension':\n\t\t\t\t\t\tconst basename = paths.basename(getFilePath());\n\t\t\t\t\t\treturn (basename.slice(0, basename.length - paths.extname(basename).length));\n\n\t\t\t\t\tcase 'fileDirnameBasename':\n\t\t\t\t\t\treturn paths.basename(paths.dirname(getFilePath()));\n\n\t\t\t\t\tcase 'execPath':\n\t\t\t\t\t\tconst ep = this._context.getExecPath();\n\t\t\t\t\t\tif (ep) {\n\t\t\t\t\t\t\treturn ep;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn match;\n\n\t\t\t\t\tcase 'execInstallFolder':\n\t\t\t\t\t\tconst ar = this._context.getAppRoot();\n\t\t\t\t\t\tif (ar) {\n\t\t\t\t\t\t\treturn ar;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn match;\n\n\t\t\t\t\tcase 'pathSeparator':\n\t\t\t\t\t\treturn paths.sep;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst key = argument ? `${variable}:${argument}` : variable;\n\t\t\t\t\t\t\treturn this.resolveFromMap(match, key, commandValueMapping, undefined);\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\treturn match;\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate resolveFromMap(match: string, argument: string | undefined, commandValueMapping: IStringDictionary<string> | undefined, prefix: string | undefined): string {\n\t\tif (argument && commandValueMapping) {\n\t\t\tconst v = (prefix === undefined) ? commandValueMapping[argument] : commandValueMapping[prefix + ':' + argument];\n\t\t\tif (typeof v === 'string') {\n\t\t\t\treturn v;\n\t\t\t}\n\t\t\tthrow new Error(localize('noValueForCommand', \"Variable {0} can not be resolved because the command has no value.\", match));\n\t\t}\n\t\treturn match;\n\t}\n}\n"]}