{"version":3,"file":"updateService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/update/browser/updateService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAuBhG,IAAa,oBAAoB,GAAjC,MAAa,oBAAqB,SAAQ,sBAAU;QAcnD,YACgD,kBAAgD,EAChE,WAAyB;YAExD,KAAK,EAAE,CAAC;YAHuC,uBAAkB,GAAlB,kBAAkB,CAA8B;YAChE,gBAAW,GAAX,WAAW,CAAc;YAZjD,mBAAc,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,eAAO,EAAS,CAAC,CAAC;YACrD,kBAAa,GAAiB,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC;YAEzD,WAAM,GAAU,cAAK,CAAC,aAAa,CAAC;YAa3C,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;QAC7B,CAAC;QAbD,IAAI,KAAK,KAAY,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QAC1C,IAAI,KAAK,CAAC,KAAY;YACrB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YACpB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACjC,CAAC;QAWD,KAAK,CAAC,eAAe;YACpB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;YAEnD,OAAO,CAAC,CAAC,MAAM,CAAC;QACjB,CAAC;QAED,KAAK,CAAC,eAAe,CAAC,QAAiB;YACtC,MAAM,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;QACxC,CAAC;QAEO,KAAK,CAAC,iBAAiB,CAAC,QAAiB;YAChD,IAAI,IAAI,CAAC,kBAAkB,CAAC,OAAO,IAAI,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,cAAc,EAAE;gBACtF,MAAM,cAAc,GAAG,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,cAAc,CAAC;gBAEtE,gCAAgC;gBAChC,IAAI,CAAC,KAAK,GAAG,cAAK,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;gBAEhD,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,cAAc,EAAE,CAAC;gBACrD,IAAI,MAAM,EAAE;oBACX,sBAAsB;oBACtB,IAAI,CAAC,KAAK,GAAG,cAAK,CAAC,KAAK,CAAC,EAAE,OAAO,EAAE,MAAM,CAAC,OAAO,EAAE,cAAc,EAAE,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC;iBACtF;qBAAM;oBACN,gBAAgB;oBAChB,IAAI,CAAC,KAAK,GAAG,cAAK,CAAC,IAAI,iBAAoB,CAAC;iBAC5C;gBAED,OAAO,MAAM,CAAC;aACd;YAED,OAAO,IAAI,CAAC,CAAC,4BAA4B;QAC1C,CAAC;QAED,KAAK,CAAC,cAAc;YACnB,QAAQ;QACT,CAAC;QAED,KAAK,CAAC,WAAW;YAChB,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;QAC3B,CAAC;QAED,KAAK,CAAC,cAAc;YACnB,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;QAC3B,CAAC;KACD,CAAA;IAlEY,oBAAoB;QAe9B,WAAA,iDAA4B,CAAA;QAC5B,WAAA,mBAAY,CAAA;OAhBF,oBAAoB,CAkEhC;IAlEY,oDAAoB;IAoEjC,CAAA,GAAA,8BAAiB,CAAA,CAAC,uBAAc,EAAE,oBAAoB,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { IUpdateService, State, UpdateType } from 'vs/platform/update/common/update';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { IHostService } from 'vs/workbench/services/host/browser/host';\nimport { Disposable } from 'vs/base/common/lifecycle';\n\nexport interface IUpdate {\n\tversion: string;\n}\n\nexport interface IUpdateProvider {\n\n\t/**\n\t * Should return with the `IUpdate` object if an update is\n\t * available or `null` otherwise to signal that there are\n\t * no updates.\n\t */\n\tcheckForUpdate(): Promise<IUpdate | null>;\n}\n\nexport class BrowserUpdateService extends Disposable implements IUpdateService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate _onStateChange = this._register(new Emitter<State>());\n\treadonly onStateChange: Event<State> = this._onStateChange.event;\n\n\tprivate _state: State = State.Uninitialized;\n\tget state(): State { return this._state; }\n\tset state(state: State) {\n\t\tthis._state = state;\n\t\tthis._onStateChange.fire(state);\n\t}\n\n\tconstructor(\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IHostService private readonly hostService: IHostService\n\t) {\n\t\tsuper();\n\n\t\tthis.checkForUpdates(false);\n\t}\n\n\tasync isLatestVersion(): Promise<boolean> {\n\t\tconst update = await this.doCheckForUpdates(false);\n\n\t\treturn !!update;\n\t}\n\n\tasync checkForUpdates(explicit: boolean): Promise<void> {\n\t\tawait this.doCheckForUpdates(explicit);\n\t}\n\n\tprivate async doCheckForUpdates(explicit: boolean): Promise<IUpdate | null> {\n\t\tif (this.environmentService.options && this.environmentService.options.updateProvider) {\n\t\t\tconst updateProvider = this.environmentService.options.updateProvider;\n\n\t\t\t// State -> Checking for Updates\n\t\t\tthis.state = State.CheckingForUpdates(explicit);\n\n\t\t\tconst update = await updateProvider.checkForUpdate();\n\t\t\tif (update) {\n\t\t\t\t// State -> Downloaded\n\t\t\t\tthis.state = State.Ready({ version: update.version, productVersion: update.version });\n\t\t\t} else {\n\t\t\t\t// State -> Idle\n\t\t\t\tthis.state = State.Idle(UpdateType.Archive);\n\t\t\t}\n\n\t\t\treturn update;\n\t\t}\n\n\t\treturn null; // no update provider to ask\n\t}\n\n\tasync downloadUpdate(): Promise<void> {\n\t\t// no-op\n\t}\n\n\tasync applyUpdate(): Promise<void> {\n\t\tthis.hostService.reload();\n\t}\n\n\tasync quitAndInstall(): Promise<void> {\n\t\tthis.hostService.reload();\n\t}\n}\n\nregisterSingleton(IUpdateService, BrowserUpdateService);\n"]}