{"version":3,"file":"outline.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/outline/browser/outline.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAanF,QAAA,eAAe,GAAG,CAAA,GAAA,+BAAe,CAAA,CAAkB,iBAAiB,CAAC,CAAC;IAEnF,IAAkB,aAIjB;IAJD,WAAkB,aAAa;QAC9B,+DAAe,CAAA;QACf,+DAAe,CAAA;QACf,2DAAa,CAAA;IACd,CAAC,EAJiB,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAI9B;IAmED,IAAkB,iBAKjB;IALD,WAAkB,iBAAiB;QAClC,4CAAyB,CAAA;QACzB,iEAA8C,CAAA;QAC9C,+DAA4C,CAAA;QAC5C,+DAA4C,CAAA;IAC7C,CAAC,EALiB,iBAAiB,GAAjB,yBAAiB,KAAjB,yBAAiB,QAKlC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IListVirtualDelegate } from 'vs/base/browser/ui/list/list';\nimport { IDataSource, ITreeRenderer } from 'vs/base/browser/ui/tree/tree';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { Event } from 'vs/base/common/event';\nimport { FuzzyScore } from 'vs/base/common/filters';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { IEditorOptions } from 'vs/platform/editor/common/editor';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IWorkbenchDataTreeOptions } from 'vs/platform/list/browser/listService';\nimport { IEditorPane } from 'vs/workbench/common/editor';\n\nexport const IOutlineService = createDecorator<IOutlineService>('IOutlineService');\n\nexport const enum OutlineTarget {\n\tOutlinePane = 1,\n\tBreadcrumbs = 2,\n\tQuickPick = 4\n}\n\nexport interface IOutlineService {\n\t_serviceBrand: undefined;\n\tonDidChange: Event<void>;\n\tcanCreateOutline(editor: IEditorPane): boolean;\n\tcreateOutline(editor: IEditorPane, target: OutlineTarget, token: CancellationToken): Promise<IOutline<any> | undefined>;\n\tregisterOutlineCreator(creator: IOutlineCreator<any, any>): IDisposable;\n}\n\nexport interface IOutlineCreator<P extends IEditorPane, E> {\n\tmatches(candidate: IEditorPane): candidate is P;\n\tcreateOutline(editor: P, target: OutlineTarget, token: CancellationToken): Promise<IOutline<E> | undefined>;\n}\n\nexport interface IBreadcrumbsDataSource<E> {\n\tgetBreadcrumbElements(): readonly E[];\n}\n\nexport interface IOutlineComparator<E> {\n\tcompareByPosition(a: E, b: E): number;\n\tcompareByType(a: E, b: E): number;\n\tcompareByName(a: E, b: E): number;\n}\n\nexport interface IQuickPickOutlineElement<E> {\n\treadonly element: E;\n\treadonly label: string;\n\treadonly iconClasses?: string[];\n\treadonly ariaLabel?: string;\n\treadonly description?: string;\n}\n\nexport interface IQuickPickDataSource<E> {\n\tgetQuickPickElements(): IQuickPickOutlineElement<E>[];\n}\n\nexport interface IOutlineListConfig<E> {\n\treadonly breadcrumbsDataSource: IBreadcrumbsDataSource<E>;\n\treadonly treeDataSource: IDataSource<IOutline<E>, E>;\n\treadonly delegate: IListVirtualDelegate<E>;\n\treadonly renderers: ITreeRenderer<E, FuzzyScore, any>[];\n\treadonly comparator: IOutlineComparator<E>;\n\treadonly options: IWorkbenchDataTreeOptions<E, FuzzyScore>;\n\treadonly quickPickDataSource: IQuickPickDataSource<E>;\n}\n\nexport interface OutlineChangeEvent {\n\taffectOnlyActiveElement?: true\n}\n\nexport interface IOutline<E> {\n\n\treadonly config: IOutlineListConfig<E>;\n\treadonly outlineKind: string;\n\n\treadonly isEmpty: boolean;\n\treadonly activeElement: E | undefined;\n\treadonly onDidChange: Event<OutlineChangeEvent>;\n\n\treveal(entry: E, options: IEditorOptions, sideBySide: boolean): Promise<void> | void;\n\tpreview(entry: E): IDisposable;\n\tcaptureViewState(): IDisposable;\n\tdispose(): void;\n}\n\n\nexport const enum OutlineConfigKeys {\n\t'icons' = 'outline.icons',\n\t'problemsEnabled' = 'outline.problems.enabled',\n\t'problemsColors' = 'outline.problems.colors',\n\t'problemsBadges' = 'outline.problems.badges'\n}\n"]}