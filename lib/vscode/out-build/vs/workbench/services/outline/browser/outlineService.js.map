{"version":3,"file":"outlineService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/outline/browser/outlineService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAUhG,MAAM,cAAc;QAApB;YAIkB,eAAU,GAAG,IAAI,uBAAU,EAA6B,CAAC;YAEzD,iBAAY,GAAG,IAAI,eAAO,EAAQ,CAAC;YAC3C,gBAAW,GAAgB,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;QA4B7D,CAAC;QA1BA,gBAAgB,CAAC,IAAiB;YACjC,KAAK,IAAI,OAAO,IAAI,IAAI,CAAC,UAAU,EAAE;gBACpC,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;oBAC1B,OAAO,IAAI,CAAC;iBACZ;aACD;YACD,OAAO,KAAK,CAAC;QACd,CAAC;QAED,KAAK,CAAC,aAAa,CAAC,IAAiB,EAAE,MAAqB,EAAE,KAAwB;YACrF,KAAK,IAAI,OAAO,IAAI,IAAI,CAAC,UAAU,EAAE;gBACpC,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;oBAC1B,OAAO,MAAM,OAAO,CAAC,aAAa,CAAC,IAAI,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;iBACxD;aACD;YACD,OAAO,SAAS,CAAC;QAClB,CAAC;QAED,sBAAsB,CAAC,OAAkC;YACxD,MAAM,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACzC,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;YACzB,OAAO,CAAA,GAAA,wBAAY,CAAA,CAAC,GAAG,EAAE;gBACxB,EAAE,EAAE,CAAC;gBACL,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;YAC1B,CAAC,CAAC,CAAC;QACJ,CAAC;KACD;IAGD,CAAA,GAAA,8BAAiB,CAAA,CAAC,yBAAe,EAAE,cAAc,EAAE,IAAI,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { LinkedList } from 'vs/base/common/linkedList';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IEditorPane } from 'vs/workbench/common/editor';\nimport { IOutline, IOutlineCreator, IOutlineService, OutlineTarget } from 'vs/workbench/services/outline/browser/outline';\nimport { Event, Emitter } from 'vs/base/common/event';\n\nclass OutlineService implements IOutlineService {\n\n\tdeclare _serviceBrand: undefined;\n\n\tprivate readonly _factories = new LinkedList<IOutlineCreator<any, any>>();\n\n\tprivate readonly _onDidChange = new Emitter<void>();\n\treadonly onDidChange: Event<void> = this._onDidChange.event;\n\n\tcanCreateOutline(pane: IEditorPane): boolean {\n\t\tfor (let factory of this._factories) {\n\t\t\tif (factory.matches(pane)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tasync createOutline(pane: IEditorPane, target: OutlineTarget, token: CancellationToken): Promise<IOutline<any> | undefined> {\n\t\tfor (let factory of this._factories) {\n\t\t\tif (factory.matches(pane)) {\n\t\t\t\treturn await factory.createOutline(pane, target, token);\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tregisterOutlineCreator(creator: IOutlineCreator<any, any>): IDisposable {\n\t\tconst rm = this._factories.push(creator);\n\t\tthis._onDidChange.fire();\n\t\treturn toDisposable(() => {\n\t\t\trm();\n\t\t\tthis._onDidChange.fire();\n\t\t});\n\t}\n}\n\n\nregisterSingleton(IOutlineService, OutlineService, true);\n"]}