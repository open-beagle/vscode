{"version":3,"file":"dialogService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/dialogs/common/dialogService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAQhG,MAAa,aAAc,SAAQ,sBAAU;QAA7C;;YAGU,UAAK,GAAkB,IAAI,CAAC,SAAS,CAAC,IAAI,sBAAY,EAAE,CAAC,CAAC;QAqBpE,CAAC;QAnBA,KAAK,CAAC,OAAO,CAAC,YAA2B;YACxC,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,WAAW,EAAE,EAAE,YAAY,EAAE,EAAE,CAAC,CAAC;YAClE,OAAO,MAAM,MAAM,CAAC,MAA6B,CAAC;QACnD,CAAC;QAED,KAAK,CAAC,IAAI,CAAC,QAAkB,EAAE,OAAe,EAAE,OAAiB,EAAE,OAAwB;YAC1F,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,EAAE,CAAC,CAAC;YACtF,OAAO,MAAM,MAAM,CAAC,MAAqB,CAAC;QAC3C,CAAC;QAED,KAAK,CAAC,KAAK,CAAC,QAAkB,EAAE,OAAe,EAAE,OAAiB,EAAE,MAAgB,EAAE,OAAwB;YAC7G,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,EAAE,CAAC,CAAC;YAC/F,OAAO,MAAM,MAAM,CAAC,MAAsB,CAAC;QAC5C,CAAC;QAED,KAAK,CAAC,KAAK;YACV,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACnC,MAAM,MAAM,CAAC,MAAM,CAAC;QACrB,CAAC;KACD;IAxBD,sCAwBC;IAED,CAAA,GAAA,8BAAiB,CAAA,CAAC,wBAAc,EAAE,aAAa,EAAE,IAAI,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport Severity from 'vs/base/common/severity';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IConfirmation, IConfirmationResult, IDialogOptions, IDialogService, IInput, IInputResult, IShowResult } from 'vs/platform/dialogs/common/dialogs';\nimport { DialogsModel, IDialogsModel } from 'vs/workbench/common/dialogs';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\n\nexport class DialogService extends Disposable implements IDialogService {\n\t_serviceBrand: undefined;\n\n\treadonly model: IDialogsModel = this._register(new DialogsModel());\n\n\tasync confirm(confirmation: IConfirmation): Promise<IConfirmationResult> {\n\t\tconst handle = this.model.show({ confirmArgs: { confirmation } });\n\t\treturn await handle.result as IConfirmationResult;\n\t}\n\n\tasync show(severity: Severity, message: string, buttons: string[], options?: IDialogOptions): Promise<IShowResult> {\n\t\tconst handle = this.model.show({ showArgs: { severity, message, buttons, options } });\n\t\treturn await handle.result as IShowResult;\n\t}\n\n\tasync input(severity: Severity, message: string, buttons: string[], inputs: IInput[], options?: IDialogOptions): Promise<IInputResult> {\n\t\tconst handle = this.model.show({ inputArgs: { severity, message, buttons, inputs, options } });\n\t\treturn await handle.result as IInputResult;\n\t}\n\n\tasync about(): Promise<void> {\n\t\tconst handle = this.model.show({});\n\t\tawait handle.result;\n\t}\n}\n\nregisterSingleton(IDialogService, DialogService, true);\n"]}