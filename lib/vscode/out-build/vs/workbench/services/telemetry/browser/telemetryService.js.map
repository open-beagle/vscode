{"version":3,"file":"telemetryService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/telemetry/browser/telemetryService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ITelemetryService, ITelemetryInfo, ITelemetryData } from 'vs/platform/telemetry/common/telemetry';\nimport { NullTelemetryService, combinedAppender, ITelemetryAppender } from 'vs/platform/telemetry/common/telemetryUtils';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { ILoggerService } from 'vs/platform/log/common/log';\nimport { TelemetryService as BaseTelemetryService, ITelemetryServiceConfig } from 'vs/platform/telemetry/common/telemetryService';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { ClassifiedEvent, StrictPropertyCheck, GDPRClassification } from 'vs/platform/telemetry/common/gdprTypings';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { resolveWorkbenchCommonProperties } from 'vs/workbench/services/telemetry/browser/workbenchCommonProperties';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { TelemetryLogAppender } from 'vs/platform/telemetry/common/telemetryLogAppender';\n\nclass WebTelemetryAppender implements ITelemetryAppender {\n\n\tconstructor(private _appender: IRemoteAgentService) { }\n\n\tlog(eventName: string, data: any): void {\n\t\tthis._appender.logTelemetry(eventName, data);\n\t}\n\n\tflush(): Promise<void> {\n\t\treturn this._appender.flushTelemetry();\n\t}\n}\n\nexport class TelemetryService extends Disposable implements ITelemetryService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate impl: ITelemetryService;\n\tpublic readonly sendErrorTelemetry = false;\n\n\tconstructor(\n\t\t@IWorkbenchEnvironmentService environmentService: IWorkbenchEnvironmentService,\n\t\t@ILoggerService loggerService: ILoggerService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IProductService productService: IProductService,\n\t\t@IRemoteAgentService remoteAgentService: IRemoteAgentService\n\t) {\n\t\tsuper();\n\n\t\tif (!!productService.enableTelemetry) {\n\t\t\tconst config: ITelemetryServiceConfig = {\n\t\t\t\tappender: combinedAppender(new WebTelemetryAppender(remoteAgentService), new TelemetryLogAppender(loggerService, environmentService)),\n\t\t\t\tcommonProperties: resolveWorkbenchCommonProperties(storageService, productService.commit, productService.version, environmentService.remoteAuthority, environmentService.options && environmentService.options.resolveCommonTelemetryProperties),\n\t\t\t\tsendErrorTelemetry: false,\n\t\t\t};\n\n\t\t\tthis.impl = this._register(new BaseTelemetryService(config, configurationService));\n\t\t} else {\n\t\t\tthis.impl = NullTelemetryService;\n\t\t}\n\t}\n\n\tsetEnabled(value: boolean): void {\n\t\treturn this.impl.setEnabled(value);\n\t}\n\n\tsetExperimentProperty(name: string, value: string): void {\n\t\treturn this.impl.setExperimentProperty(name, value);\n\t}\n\n\tget isOptedIn(): boolean {\n\t\treturn this.impl.isOptedIn;\n\t}\n\n\tpublicLog(eventName: string, data?: ITelemetryData, anonymizeFilePaths?: boolean): Promise<void> {\n\t\treturn this.impl.publicLog(eventName, data, anonymizeFilePaths);\n\t}\n\n\tpublicLog2<E extends ClassifiedEvent<T> = never, T extends GDPRClassification<T> = never>(eventName: string, data?: StrictPropertyCheck<T, E>, anonymizeFilePaths?: boolean) {\n\t\treturn this.publicLog(eventName, data as ITelemetryData, anonymizeFilePaths);\n\t}\n\n\tpublicLogError(errorEventName: string, data?: ITelemetryData): Promise<void> {\n\t\treturn this.impl.publicLog(errorEventName, data);\n\t}\n\n\tpublicLogError2<E extends ClassifiedEvent<T> = never, T extends GDPRClassification<T> = never>(eventName: string, data?: StrictPropertyCheck<T, E>) {\n\t\treturn this.publicLogError(eventName, data as ITelemetryData);\n\t}\n\n\tgetTelemetryInfo(): Promise<ITelemetryInfo> {\n\t\treturn this.impl.getTelemetryInfo();\n\t}\n}\n\nregisterSingleton(ITelemetryService, TelemetryService);\n"]}