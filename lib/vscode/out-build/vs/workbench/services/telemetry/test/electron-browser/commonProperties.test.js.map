{"version":3,"file":"commonProperties.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/telemetry/test/electron-browser/commonProperties.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport * as fs from 'fs';\nimport { join } from 'vs/base/common/path';\nimport { release, tmpdir, hostname } from 'os';\nimport { resolveWorkbenchCommonProperties } from 'vs/workbench/services/telemetry/electron-sandbox/workbenchCommonProperties';\nimport { getRandomTestPath } from 'vs/base/test/node/testUtils';\nimport { IStorageService, StorageScope, InMemoryStorageService, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { rimraf } from 'vs/base/node/pfs';\nimport { timeout } from 'vs/base/common/async';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { FileService } from 'vs/platform/files/common/fileService';\nimport { NullLogService } from 'vs/platform/log/common/log';\nimport { Schemas } from 'vs/base/common/network';\nimport { DiskFileSystemProvider } from 'vs/platform/files/node/diskFileSystemProvider';\n\nsuite('Telemetry - common properties', function () {\n\tconst parentDir = getRandomTestPath(tmpdir(), 'vsctests', 'telemetryservice');\n\tconst installSource = join(parentDir, 'installSource');\n\n\tconst commit: string = (undefined)!;\n\tconst version: string = (undefined)!;\n\tlet testStorageService: IStorageService;\n\tlet testFileService: IFileService;\n\tlet diskFileSystemProvider: DiskFileSystemProvider;\n\n\tsetup(() => {\n\t\ttestStorageService = new InMemoryStorageService();\n\t\tconst logService = new NullLogService();\n\t\ttestFileService = new FileService(logService);\n\n\t\tdiskFileSystemProvider = new DiskFileSystemProvider(logService);\n\t\ttestFileService.registerProvider(Schemas.file, diskFileSystemProvider);\n\t});\n\n\tteardown(() => {\n\t\tdiskFileSystemProvider.dispose();\n\n\t\treturn rimraf(parentDir);\n\t});\n\n\ttest('default', async function () {\n\t\tawait fs.promises.mkdir(parentDir, { recursive: true });\n\t\tfs.writeFileSync(installSource, 'my.install.source');\n\t\tconst props = await resolveWorkbenchCommonProperties(testStorageService, testFileService, release(), hostname(), commit, version, 'someMachineId', undefined, installSource);\n\t\tassert.ok('commitHash' in props);\n\t\tassert.ok('sessionID' in props);\n\t\tassert.ok('timestamp' in props);\n\t\tassert.ok('common.platform' in props);\n\t\tassert.ok('common.nodePlatform' in props);\n\t\tassert.ok('common.nodeArch' in props);\n\t\tassert.ok('common.timesincesessionstart' in props);\n\t\tassert.ok('common.sequence' in props);\n\t\t// assert.ok('common.version.shell' in first.data); // only when running on electron\n\t\t// assert.ok('common.version.renderer' in first.data);\n\t\tassert.ok('common.platformVersion' in props, 'platformVersion');\n\t\tassert.ok('version' in props);\n\t\tassert.strictEqual(props['common.source'], 'my.install.source');\n\t\tassert.ok('common.firstSessionDate' in props, 'firstSessionDate');\n\t\tassert.ok('common.lastSessionDate' in props, 'lastSessionDate'); // conditional, see below, 'lastSessionDate'ow\n\t\tassert.ok('common.isNewSession' in props, 'isNewSession');\n\t\t// machine id et al\n\t\tassert.ok('common.instanceId' in props, 'instanceId');\n\t\tassert.ok('common.machineId' in props, 'machineId');\n\t\tfs.unlinkSync(installSource);\n\t\tconst props_1 = await resolveWorkbenchCommonProperties(testStorageService, testFileService, release(), hostname(), commit, version, 'someMachineId', undefined, installSource);\n\t\tassert.ok(!('common.source' in props_1));\n\t});\n\n\ttest('lastSessionDate when aviablale', async function () {\n\n\t\ttestStorageService.store('telemetry.lastSessionDate', new Date().toUTCString(), StorageScope.GLOBAL, StorageTarget.MACHINE);\n\n\t\tconst props = await resolveWorkbenchCommonProperties(testStorageService, testFileService, release(), hostname(), commit, version, 'someMachineId', undefined, installSource);\n\t\tassert.ok('common.lastSessionDate' in props); // conditional, see below\n\t\tassert.ok('common.isNewSession' in props);\n\t\tassert.strictEqual(props['common.isNewSession'], '0');\n\t});\n\n\ttest('values chance on ask', async function () {\n\t\tconst props = await resolveWorkbenchCommonProperties(testStorageService, testFileService, release(), hostname(), commit, version, 'someMachineId', undefined, installSource);\n\t\tlet value1 = props['common.sequence'];\n\t\tlet value2 = props['common.sequence'];\n\t\tassert.ok(value1 !== value2, 'seq');\n\n\t\tvalue1 = props['timestamp'];\n\t\tvalue2 = props['timestamp'];\n\t\tassert.ok(value1 !== value2, 'timestamp');\n\n\t\tvalue1 = props['common.timesincesessionstart'];\n\t\tawait timeout(10);\n\t\tvalue2 = props['common.timesincesessionstart'];\n\t\tassert.ok(value1 !== value2, 'timesincesessionstart');\n\t});\n});\n"]}