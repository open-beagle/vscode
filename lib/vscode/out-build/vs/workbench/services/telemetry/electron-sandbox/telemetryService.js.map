{"version":3,"file":"telemetryService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/telemetry/electron-sandbox/telemetryService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ITelemetryService, ITelemetryInfo, ITelemetryData } from 'vs/platform/telemetry/common/telemetry';\nimport { NullTelemetryService } from 'vs/platform/telemetry/common/telemetryUtils';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { INativeWorkbenchEnvironmentService } from 'vs/workbench/services/environment/electron-sandbox/environmentService';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { ISharedProcessService } from 'vs/platform/ipc/electron-sandbox/services';\nimport { TelemetryAppenderClient } from 'vs/platform/telemetry/common/telemetryIpc';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { resolveWorkbenchCommonProperties } from 'vs/workbench/services/telemetry/electron-sandbox/workbenchCommonProperties';\nimport { TelemetryService as BaseTelemetryService, ITelemetryServiceConfig } from 'vs/platform/telemetry/common/telemetryService';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { ClassifiedEvent, StrictPropertyCheck, GDPRClassification } from 'vs/platform/telemetry/common/gdprTypings';\nimport { IFileService } from 'vs/platform/files/common/files';\n\nexport class TelemetryService extends Disposable implements ITelemetryService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate impl: ITelemetryService;\n\tpublic readonly sendErrorTelemetry: boolean;\n\n\tconstructor(\n\t\t@INativeWorkbenchEnvironmentService environmentService: INativeWorkbenchEnvironmentService,\n\t\t@IProductService productService: IProductService,\n\t\t@ISharedProcessService sharedProcessService: ISharedProcessService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IFileService fileService: IFileService\n\t) {\n\t\tsuper();\n\n\t\tif (!environmentService.isExtensionDevelopment && !environmentService.disableTelemetry && !!productService.enableTelemetry) {\n\t\t\tconst channel = sharedProcessService.getChannel('telemetryAppender');\n\t\t\tconst config: ITelemetryServiceConfig = {\n\t\t\t\tappender: new TelemetryAppenderClient(channel),\n\t\t\t\tcommonProperties: resolveWorkbenchCommonProperties(storageService, fileService, environmentService.os.release, environmentService.os.hostname, productService.commit, productService.version, environmentService.machineId, productService.msftInternalDomains, environmentService.installSourcePath, environmentService.remoteAuthority),\n\t\t\t\tpiiPaths: [environmentService.appRoot, environmentService.extensionsPath],\n\t\t\t\tsendErrorTelemetry: true\n\t\t\t};\n\n\t\t\tthis.impl = this._register(new BaseTelemetryService(config, configurationService));\n\t\t} else {\n\t\t\tthis.impl = NullTelemetryService;\n\t\t}\n\n\t\tthis.sendErrorTelemetry = this.impl.sendErrorTelemetry;\n\t}\n\n\tsetEnabled(value: boolean): void {\n\t\treturn this.impl.setEnabled(value);\n\t}\n\n\tsetExperimentProperty(name: string, value: string): void {\n\t\treturn this.impl.setExperimentProperty(name, value);\n\t}\n\n\tget isOptedIn(): boolean {\n\t\treturn this.impl.isOptedIn;\n\t}\n\n\tpublicLog(eventName: string, data?: ITelemetryData, anonymizeFilePaths?: boolean): Promise<void> {\n\t\treturn this.impl.publicLog(eventName, data, anonymizeFilePaths);\n\t}\n\n\tpublicLog2<E extends ClassifiedEvent<T> = never, T extends GDPRClassification<T> = never>(eventName: string, data?: StrictPropertyCheck<T, E>, anonymizeFilePaths?: boolean) {\n\t\treturn this.publicLog(eventName, data as ITelemetryData, anonymizeFilePaths);\n\t}\n\n\tpublicLogError(errorEventName: string, data?: ITelemetryData): Promise<void> {\n\t\treturn this.impl.publicLogError(errorEventName, data);\n\t}\n\n\tpublicLogError2<E extends ClassifiedEvent<T> = never, T extends GDPRClassification<T> = never>(eventName: string, data?: StrictPropertyCheck<T, E>) {\n\t\treturn this.publicLog(eventName, data as ITelemetryData);\n\t}\n\n\n\tgetTelemetryInfo(): Promise<ITelemetryInfo> {\n\t\treturn this.impl.getTelemetryInfo();\n\t}\n}\n\nregisterSingleton(ITelemetryService, TelemetryService);\n"]}