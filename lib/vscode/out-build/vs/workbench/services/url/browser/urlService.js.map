{"version":3,"file":"urlService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/url/browser/urlService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAmChG,IAAa,iBAAiB,GAA9B,MAAa,iBAAkB,SAAQ,+BAAkB;QAIxD,YAC+B,kBAAgD;;YAE9E,KAAK,EAAE,CAAC;YAER,IAAI,CAAC,QAAQ,GAAG,MAAA,kBAAkB,CAAC,OAAO,0CAAE,mBAAmB,CAAC;YAEhE,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAC1B,CAAC;QAEO,iBAAiB;YACxB,IAAI,IAAI,CAAC,QAAQ,EAAE;gBAClB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;aACnF;QACF,CAAC;QAED,MAAM,CAAC,OAAgC;YACtC,IAAI,IAAI,CAAC,QAAQ,EAAE;gBAClB,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;aACrC;YAED,OAAO,SAAG,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;QACpC,CAAC;KACD,CAAA;IA3BY,iBAAiB;QAK3B,WAAA,iDAA4B,CAAA;OALlB,iBAAiB,CA2B7B;IA3BY,8CAAiB;IA6B9B,CAAA,GAAA,8BAAiB,CAAA,CAAC,iBAAW,EAAE,iBAAiB,EAAE,IAAI,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IURLService } from 'vs/platform/url/common/url';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { AbstractURLService } from 'vs/platform/url/common/urlService';\nimport { Event } from 'vs/base/common/event';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\n\nexport interface IURLCallbackProvider {\n\n\t/**\n\t * Indicates that a Uri has been opened outside of VSCode. The Uri\n\t * will be forwarded to all installed Uri handlers in the system.\n\t */\n\treadonly onCallback: Event<URI>;\n\n\t/**\n\t * Creates a Uri that - if opened in a browser - must result in\n\t * the `onCallback` to fire.\n\t *\n\t * The optional `Partial<UriComponents>` must be properly restored for\n\t * the Uri passed to the `onCallback` handler.\n\t *\n\t * For example: if a Uri is to be created with `scheme:\"vscode\"`,\n\t * `authority:\"foo\"` and `path:\"bar\"` the `onCallback` should fire\n\t * with a Uri `vscode://foo/bar`.\n\t *\n\t * If there are additional `query` values in the Uri, they should\n\t * be added to the list of provided `query` arguments from the\n\t * `Partial<UriComponents>`.\n\t */\n\tcreate(options?: Partial<UriComponents>): URI;\n}\n\nexport class BrowserURLService extends AbstractURLService {\n\n\tprivate provider: IURLCallbackProvider | undefined;\n\n\tconstructor(\n\t\t@IWorkbenchEnvironmentService environmentService: IWorkbenchEnvironmentService\n\t) {\n\t\tsuper();\n\n\t\tthis.provider = environmentService.options?.urlCallbackProvider;\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tif (this.provider) {\n\t\t\tthis._register(this.provider.onCallback(uri => this.open(uri, { trusted: true })));\n\t\t}\n\t}\n\n\tcreate(options?: Partial<UriComponents>): URI {\n\t\tif (this.provider) {\n\t\t\treturn this.provider.create(options);\n\t\t}\n\n\t\treturn URI.parse('unsupported://');\n\t}\n}\n\nregisterSingleton(IURLService, BrowserURLService, true);\n"]}