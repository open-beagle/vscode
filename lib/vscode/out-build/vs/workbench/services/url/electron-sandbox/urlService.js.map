{"version":3,"file":"urlService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/url/electron-sandbox/urlService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAkBhG,IAAa,eAAe,GAA5B,MAAa,eAAgB,SAAQ,6BAAgB;QAIpD,YACsB,kBAAuC,EAC5C,aAA6B,EACR,iBAAqC,EACzD,cAA+B;YAEhD,KAAK,CAAC,cAAc,CAAC,CAAC;YAHe,sBAAiB,GAAjB,iBAAiB,CAAoB;YAK1E,IAAI,CAAC,UAAU,GAAG,kBAAY,CAAC,SAAS,CAAc,kBAAkB,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;YAE5F,kBAAkB,CAAC,eAAe,CAAC,YAAY,EAAE,IAAI,0BAAiB,CAAC,IAAI,CAAC,CAAC,CAAC;YAC9E,aAAa,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QACpC,CAAC;QAEQ,MAAM,CAAC,OAAgC;YAC/C,MAAM,GAAG,GAAG,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YAElC,IAAI,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC;YACtB,IAAI,CAAC,KAAK,EAAE;gBACX,KAAK,GAAG,YAAY,kBAAkB,CAAC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAE,CAAC;aAC1E;iBAAM;gBACN,KAAK,IAAI,aAAa,kBAAkB,CAAC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAE,CAAC;aAC5E;YAED,OAAO,GAAG,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;QAC5B,CAAC;QAEQ,KAAK,CAAC,IAAI,CAAC,QAAsB,EAAE,OAA8B;YAEzE,IAAI,CAAC,CAAA,GAAA,sBAAa,CAAA,CAAC,QAAQ,EAAE,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,EAAE;gBAC9D,OAAO,KAAK,CAAC;aACb;YAED,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;gBACjC,QAAQ,GAAG,SAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;aAC/B;YACD,OAAO,MAAM,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QACtD,CAAC;QAED,KAAK,CAAC,SAAS,CAAC,GAAQ,EAAE,OAAyB;YAClD,MAAM,MAAM,GAAG,MAAM,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;YAE9C,IAAI,MAAM,EAAE;gBACX,MAAM,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,mCAAmC,EAAE,CAAC,CAAC;aAC9F;YAED,OAAO,MAAM,CAAC;QACf,CAAC;KACD,CAAA;IApDY,eAAe;QAKzB,WAAA,8BAAmB,CAAA;QACnB,WAAA,uBAAc,CAAA;QACd,WAAA,2BAAkB,CAAA;QAClB,WAAA,gCAAe,CAAA;OARL,eAAe,CAoD3B;IApDY,0CAAe;IAsD5B,CAAA,GAAA,8BAAiB,CAAA,CAAC,iBAAW,EAAE,eAAe,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IURLService, IURLHandler, IOpenURLOptions } from 'vs/platform/url/common/url';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { IMainProcessService } from 'vs/platform/ipc/electron-sandbox/services';\nimport { URLHandlerChannel } from 'vs/platform/url/common/urlIpc';\nimport { IOpenerService, IOpener, matchesScheme } from 'vs/platform/opener/common/opener';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { ProxyChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { INativeHostService } from 'vs/platform/native/electron-sandbox/native';\nimport { NativeURLService } from 'vs/platform/url/common/urlService';\n\nexport interface IRelayOpenURLOptions extends IOpenURLOptions {\n\topenToSide?: boolean;\n\topenExternal?: boolean;\n}\n\nexport class RelayURLService extends NativeURLService implements IURLHandler, IOpener {\n\n\tprivate urlService: IURLService;\n\n\tconstructor(\n\t\t@IMainProcessService mainProcessService: IMainProcessService,\n\t\t@IOpenerService openerService: IOpenerService,\n\t\t@INativeHostService private readonly nativeHostService: INativeHostService,\n\t\t@IProductService productService: IProductService\n\t) {\n\t\tsuper(productService);\n\n\t\tthis.urlService = ProxyChannel.toService<IURLService>(mainProcessService.getChannel('url'));\n\n\t\tmainProcessService.registerChannel('urlHandler', new URLHandlerChannel(this));\n\t\topenerService.registerOpener(this);\n\t}\n\n\toverride create(options?: Partial<UriComponents>): URI {\n\t\tconst uri = super.create(options);\n\n\t\tlet query = uri.query;\n\t\tif (!query) {\n\t\t\tquery = `windowId=${encodeURIComponent(this.nativeHostService.windowId)}`;\n\t\t} else {\n\t\t\tquery += `&windowId=${encodeURIComponent(this.nativeHostService.windowId)}`;\n\t\t}\n\n\t\treturn uri.with({ query });\n\t}\n\n\toverride async open(resource: URI | string, options?: IRelayOpenURLOptions): Promise<boolean> {\n\n\t\tif (!matchesScheme(resource, this.productService.urlProtocol)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (typeof resource === 'string') {\n\t\t\tresource = URI.parse(resource);\n\t\t}\n\t\treturn await this.urlService.open(resource, options);\n\t}\n\n\tasync handleURL(uri: URI, options?: IOpenURLOptions): Promise<boolean> {\n\t\tconst result = await super.open(uri, options);\n\n\t\tif (result) {\n\t\t\tawait this.nativeHostService.focusWindow({ force: true /* Application may not be active */ });\n\t\t}\n\n\t\treturn result;\n\t}\n}\n\nregisterSingleton(IURLService, RelayURLService);\n"]}