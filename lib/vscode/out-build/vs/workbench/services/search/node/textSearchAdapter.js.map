{"version":3,"file":"textSearchAdapter.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/search/node/textSearchAdapter.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAQhG,MAAa,uBAAuB;QAEnC,YAAoB,KAAiB;YAAjB,UAAK,GAAL,KAAK,CAAY;QAAI,CAAC;QAE1C,MAAM,CAAC,KAAwB,EAAE,QAAmD,EAAE,SAA8C;YACnI,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,kBAAkB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,MAAM,CAAC,EAAE;gBACjJ,OAAO,OAAO,CAAC,OAAO,CAA2B;oBAChD,IAAI,EAAE,SAAS;oBACf,QAAQ,EAAE,KAAK;oBACf,KAAK,EAAoB;wBACxB,IAAI,EAAE,eAAe;qBACrB;iBACD,CAAC,CAAC;aACH;YAED,MAAM,oBAAoB,GAAG;gBAC5B,UAAU,CAAC,GAAW;oBACrB,SAAS,CAAC,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC;gBAC7B,CAAC;aACD,CAAC;YACF,MAAM,iBAAiB,GAAG,IAAI,2CAAuB,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,iDAAuB,CAAC,oBAAoB,CAAC,EAAE,GAAG,CAAC,CAAC;YAC1H,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACtC,OAAO,iBAAiB;qBACtB,MAAM,CACN,OAAO,CAAC,EAAE;oBACT,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC,CAAC;gBAC9C,CAAC,EACD,KAAK,CAAC;qBACN,IAAI,CACJ,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,QAAQ,EAAE,IAAI,EAAE,SAAS,EAA8B,CAAC,EACnF,MAAM,CAAC,CAAC;YACX,CAAC,CAAC,CAAC;QACJ,CAAC;KACD;IAjCD,0DAiCC;IAED,SAAS,qBAAqB,CAAC,KAAiB;QAC/C,OAAO;YACN,IAAI,EAAE,KAAK,CAAC,QAAQ,IAAI,KAAK,CAAC,QAAQ,CAAC,MAAM;YAC7C,OAAO,EAAE,KAAK,CAAC,OAAO;YACtB,UAAU,EAAE,CAAC,KAAK,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE;gBACnD,IAAI,CAAC,CAAoB,CAAE,CAAC,MAAM,EAAE;oBACnC,MAAM,CAAC,GAAqB,CAAC,CAAC;oBAC9B,OAAO,GAAG,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;iBAC7D;qBAAM;oBACN,OAAO,GAAG,GAAG,CAAC,CAAC;iBACf;YACF,CAAC,EAAE,CAAC,CAAC;SACL,CAAC;IACH,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport * as pfs from 'vs/base/node/pfs';\nimport { IFileMatch, IProgressMessage, ITextQuery, ITextSearchStats, ITextSearchMatch, ISerializedFileMatch, ISerializedSearchSuccess } from 'vs/workbench/services/search/common/search';\nimport { RipgrepTextSearchEngine } from 'vs/workbench/services/search/node/ripgrepTextSearchEngine';\nimport { NativeTextSearchManager } from 'vs/workbench/services/search/node/textSearchManager';\n\nexport class TextSearchEngineAdapter {\n\n\tconstructor(private query: ITextQuery) { }\n\n\tsearch(token: CancellationToken, onResult: (matches: ISerializedFileMatch[]) => void, onMessage: (message: IProgressMessage) => void): Promise<ISerializedSearchSuccess> {\n\t\tif ((!this.query.folderQueries || !this.query.folderQueries.length) && (!this.query.extraFileResources || !this.query.extraFileResources.length)) {\n\t\t\treturn Promise.resolve(<ISerializedSearchSuccess>{\n\t\t\t\ttype: 'success',\n\t\t\t\tlimitHit: false,\n\t\t\t\tstats: <ITextSearchStats>{\n\t\t\t\t\ttype: 'searchProcess'\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tconst pretendOutputChannel = {\n\t\t\tappendLine(msg: string) {\n\t\t\t\tonMessage({ message: msg });\n\t\t\t}\n\t\t};\n\t\tconst textSearchManager = new NativeTextSearchManager(this.query, new RipgrepTextSearchEngine(pretendOutputChannel), pfs);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\treturn textSearchManager\n\t\t\t\t.search(\n\t\t\t\t\tmatches => {\n\t\t\t\t\t\tonResult(matches.map(fileMatchToSerialized));\n\t\t\t\t\t},\n\t\t\t\t\ttoken)\n\t\t\t\t.then(\n\t\t\t\t\tc => resolve({ limitHit: c.limitHit, type: 'success' } as ISerializedSearchSuccess),\n\t\t\t\t\treject);\n\t\t});\n\t}\n}\n\nfunction fileMatchToSerialized(match: IFileMatch): ISerializedFileMatch {\n\treturn {\n\t\tpath: match.resource && match.resource.fsPath,\n\t\tresults: match.results,\n\t\tnumMatches: (match.results || []).reduce((sum, r) => {\n\t\t\tif (!!(<ITextSearchMatch>r).ranges) {\n\t\t\t\tconst m = <ITextSearchMatch>r;\n\t\t\t\treturn sum + (Array.isArray(m.ranges) ? m.ranges.length : 1);\n\t\t\t} else {\n\t\t\t\treturn sum + 1;\n\t\t\t}\n\t\t}, 0)\n\t};\n}\n"]}