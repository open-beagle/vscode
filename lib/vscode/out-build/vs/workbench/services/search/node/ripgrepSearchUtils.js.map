{"version":3,"file":"ripgrepSearchUtils.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/search/node/ripgrepSearchUtils.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAUhG,SAAgB,UAAU,CAAC,IAAY;QACtC,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE,CAAC;IAC1E,CAAC;IAFD,gCAEC;IAED;;OAEG;IACH,SAAgB,sBAAsB,CAAC,GAAQ,EAAE,IAAY,EAAE,KAAoD,EAAE,cAAwD;QAC5K,MAAM,WAAW,GAAG,CAAA,GAAA,sBAAa,CAAA,CAAC,KAAK,EAAE,kBAAkB,CAAC,CAAC;QAE7D,MAAM,cAAc,GAAG,IAAI,wBAAe,CAAC,IAAI,EAAE,WAAW,EAAE,cAAc,CAAC,CAAC;QAC9E,MAAM,oBAAoB,GAAG,cAAc,CAAC,OAAO,CAAC,OAAO,CAAC;QAC5D,OAAO;YACN,MAAM,EAAE,CAAA,GAAA,sBAAa,CAAA,CAAC,WAAW,EAAE,kBAAkB,CAAC;YACtD,GAAG;YACH,OAAO,EAAE;gBACR,IAAI,EAAE,cAAc,CAAC,OAAO,CAAC,IAAI;gBACjC,OAAO,EAAE,CAAA,GAAA,sBAAa,CAAA,CAAC,oBAAoB,EAAE,kBAAkB,CAAC;aAChE;SACD,CAAC;IACH,CAAC;IAbD,wDAaC;IAED,SAAS,kBAAkB,CAAC,KAA2B;QACtD,OAAO,IAAI,oBAAW,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IACtG,CAAC;IAED,SAAS,kBAAkB,CAAC,KAAkB;QAC7C,OAAO,IAAI,cAAc,CAAC,KAAK,CAAC,KAAK,CAAC,eAAe,EAAE,KAAK,CAAC,WAAW,EAAE,KAAK,CAAC,aAAa,EAAE,KAAK,CAAC,SAAS,CAAC,CAAC;IACjH,CAAC;IAMD,IAAa,aAAa,GAA1B,MAAa,aAAa;QACzB,YAAoB,MAAc,EAAgC,UAAuB;YAArE,WAAM,GAAN,MAAM,CAAQ;YAAgC,eAAU,GAAV,UAAU,CAAa;QAAI,CAAC;QAE9F,UAAU,CAAC,GAAW;YACrB,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,MAAM,SAAS,EAAE,GAAG,CAAC,CAAC;QACrD,CAAC;KACD,CAAA;IANY,aAAa;QACY,WAAA,iBAAW,CAAA;OADpC,aAAa,CAMzB;IANY,sCAAa","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { mapArrayOrNot } from 'vs/base/common/arrays';\nimport { URI } from 'vs/base/common/uri';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { SearchRange, TextSearchMatch } from 'vs/workbench/services/search/common/search';\nimport * as searchExtTypes from 'vs/workbench/services/search/common/searchExtTypes';\n\nexport type Maybe<T> = T | null | undefined;\n\nexport function anchorGlob(glob: string): string {\n\treturn glob.startsWith('**') || glob.startsWith('/') ? glob : `/${glob}`;\n}\n\n/**\n * Create a vscode.TextSearchMatch by using our internal TextSearchMatch type for its previewOptions logic.\n */\nexport function createTextSearchResult(uri: URI, text: string, range: searchExtTypes.Range | searchExtTypes.Range[], previewOptions?: searchExtTypes.TextSearchPreviewOptions): searchExtTypes.TextSearchMatch {\n\tconst searchRange = mapArrayOrNot(range, rangeToSearchRange);\n\n\tconst internalResult = new TextSearchMatch(text, searchRange, previewOptions);\n\tconst internalPreviewRange = internalResult.preview.matches;\n\treturn {\n\t\tranges: mapArrayOrNot(searchRange, searchRangeToRange),\n\t\turi,\n\t\tpreview: {\n\t\t\ttext: internalResult.preview.text,\n\t\t\tmatches: mapArrayOrNot(internalPreviewRange, searchRangeToRange)\n\t\t}\n\t};\n}\n\nfunction rangeToSearchRange(range: searchExtTypes.Range): SearchRange {\n\treturn new SearchRange(range.start.line, range.start.character, range.end.line, range.end.character);\n}\n\nfunction searchRangeToRange(range: SearchRange): searchExtTypes.Range {\n\treturn new searchExtTypes.Range(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\n}\n\nexport interface IOutputChannel {\n\tappendLine(msg: string): void;\n}\n\nexport class OutputChannel implements IOutputChannel {\n\tconstructor(private prefix: string, @ILogService private readonly logService: ILogService) { }\n\n\tappendLine(msg: string): void {\n\t\tthis.logService.debug(`${this.prefix}#search`, msg);\n\t}\n}\n"]}