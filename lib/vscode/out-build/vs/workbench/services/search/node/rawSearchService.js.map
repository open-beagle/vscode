{"version":3,"file":"rawSearchService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/search/node/rawSearchService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as fs from 'fs';\nimport * as gracefulFs from 'graceful-fs';\nimport * as arrays from 'vs/base/common/arrays';\nimport { CancelablePromise, createCancelablePromise } from 'vs/base/common/async';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { canceled } from 'vs/base/common/errors';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { compareItemsByFuzzyScore, FuzzyScorerCache, IItemAccessor, prepareQuery } from 'vs/base/common/fuzzyScorer';\nimport { basename, dirname, join, sep } from 'vs/base/common/path';\nimport { StopWatch } from 'vs/base/common/stopwatch';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { Arch, getPlatformLimits } from 'vs/platform/files/common/files';\nimport { ICachedSearchStats, IFileQuery, IFileSearchProgressItem, IFileSearchStats, IFolderQuery, IProgressMessage, IRawFileMatch, IRawFileQuery, IRawQuery, IRawSearchService, IRawTextQuery, ISearchEngine, ISearchEngineSuccess, ISerializedFileMatch, ISerializedSearchComplete, ISerializedSearchProgressItem, ISerializedSearchSuccess, isFilePatternMatch, ITextQuery } from 'vs/workbench/services/search/common/search';\nimport { Engine as FileSearchEngine } from 'vs/workbench/services/search/node/fileSearch';\nimport { TextSearchEngineAdapter } from 'vs/workbench/services/search/node/textSearchAdapter';\n\ngracefulFs.gracefulify(fs);\n\nexport type IProgressCallback = (p: ISerializedSearchProgressItem) => void;\nexport type IFileProgressCallback = (p: IFileSearchProgressItem) => void;\n\nexport class SearchService implements IRawSearchService {\n\n\tprivate static readonly BATCH_SIZE = 512;\n\n\tprivate caches: { [cacheKey: string]: Cache; } = Object.create(null);\n\n\tfileSearch(config: IRawFileQuery): Event<ISerializedSearchProgressItem | ISerializedSearchComplete> {\n\t\tlet promise: CancelablePromise<ISerializedSearchSuccess>;\n\n\t\tconst query = reviveQuery(config);\n\t\tconst emitter = new Emitter<ISerializedSearchProgressItem | ISerializedSearchComplete>({\n\t\t\tonFirstListenerDidAdd: () => {\n\t\t\t\tpromise = createCancelablePromise(token => {\n\t\t\t\t\treturn this.doFileSearchWithEngine(FileSearchEngine, query, p => emitter.fire(p), token);\n\t\t\t\t});\n\n\t\t\t\tpromise.then(\n\t\t\t\t\tc => emitter.fire(c),\n\t\t\t\t\terr => emitter.fire({ type: 'error', error: { message: err.message, stack: err.stack } }));\n\t\t\t},\n\t\t\tonLastListenerRemove: () => {\n\t\t\t\tpromise.cancel();\n\t\t\t}\n\t\t});\n\n\t\treturn emitter.event;\n\t}\n\n\ttextSearch(rawQuery: IRawTextQuery): Event<ISerializedSearchProgressItem | ISerializedSearchComplete> {\n\t\tlet promise: CancelablePromise<ISerializedSearchComplete>;\n\n\t\tconst query = reviveQuery(rawQuery);\n\t\tconst emitter = new Emitter<ISerializedSearchProgressItem | ISerializedSearchComplete>({\n\t\t\tonFirstListenerDidAdd: () => {\n\t\t\t\tpromise = createCancelablePromise(token => {\n\t\t\t\t\treturn this.ripgrepTextSearch(query, p => emitter.fire(p), token);\n\t\t\t\t});\n\n\t\t\t\tpromise.then(\n\t\t\t\t\tc => emitter.fire(c),\n\t\t\t\t\terr => emitter.fire({ type: 'error', error: { message: err.message, stack: err.stack } }));\n\t\t\t},\n\t\t\tonLastListenerRemove: () => {\n\t\t\t\tpromise.cancel();\n\t\t\t}\n\t\t});\n\n\t\treturn emitter.event;\n\t}\n\n\tprivate ripgrepTextSearch(config: ITextQuery, progressCallback: IProgressCallback, token: CancellationToken): Promise<ISerializedSearchSuccess> {\n\t\tconfig.maxFileSize = getPlatformLimits(process.arch === 'ia32' ? Arch.IA32 : Arch.OTHER).maxFileSize;\n\t\tconst engine = new TextSearchEngineAdapter(config);\n\n\t\treturn engine.search(token, progressCallback, progressCallback);\n\t}\n\n\tdoFileSearch(config: IFileQuery, progressCallback: IProgressCallback, token?: CancellationToken): Promise<ISerializedSearchSuccess> {\n\t\treturn this.doFileSearchWithEngine(FileSearchEngine, config, progressCallback, token);\n\t}\n\n\tdoFileSearchWithEngine(EngineClass: { new(config: IFileQuery): ISearchEngine<IRawFileMatch>; }, config: IFileQuery, progressCallback: IProgressCallback, token?: CancellationToken, batchSize = SearchService.BATCH_SIZE): Promise<ISerializedSearchSuccess> {\n\t\tlet resultCount = 0;\n\t\tconst fileProgressCallback: IFileProgressCallback = progress => {\n\t\t\tif (Array.isArray(progress)) {\n\t\t\t\tresultCount += progress.length;\n\t\t\t\tprogressCallback(progress.map(m => this.rawMatchToSearchItem(m)));\n\t\t\t} else if ((<IRawFileMatch>progress).relativePath) {\n\t\t\t\tresultCount++;\n\t\t\t\tprogressCallback(this.rawMatchToSearchItem(<IRawFileMatch>progress));\n\t\t\t} else {\n\t\t\t\tprogressCallback(<IProgressMessage>progress);\n\t\t\t}\n\t\t};\n\n\t\tif (config.sortByScore) {\n\t\t\tlet sortedSearch = this.trySortedSearchFromCache(config, fileProgressCallback, token);\n\t\t\tif (!sortedSearch) {\n\t\t\t\tconst walkerConfig = config.maxResults ? Object.assign({}, config, { maxResults: null }) : config;\n\t\t\t\tconst engine = new EngineClass(walkerConfig);\n\t\t\t\tsortedSearch = this.doSortedSearch(engine, config, progressCallback, fileProgressCallback, token);\n\t\t\t}\n\n\t\t\treturn new Promise<ISerializedSearchSuccess>((c, e) => {\n\t\t\t\tsortedSearch!.then(([result, rawMatches]) => {\n\t\t\t\t\tconst serializedMatches = rawMatches.map(rawMatch => this.rawMatchToSearchItem(rawMatch));\n\t\t\t\t\tthis.sendProgress(serializedMatches, progressCallback, batchSize);\n\t\t\t\t\tc(result);\n\t\t\t\t}, e);\n\t\t\t});\n\t\t}\n\n\t\tconst engine = new EngineClass(config);\n\n\t\treturn this.doSearch(engine, fileProgressCallback, batchSize, token).then(complete => {\n\t\t\treturn <ISerializedSearchSuccess>{\n\t\t\t\tlimitHit: complete.limitHit,\n\t\t\t\ttype: 'success',\n\t\t\t\tstats: {\n\t\t\t\t\tdetailStats: complete.stats,\n\t\t\t\t\ttype: 'searchProcess',\n\t\t\t\t\tfromCache: false,\n\t\t\t\t\tresultCount,\n\t\t\t\t\tsortingTime: undefined\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t}\n\n\tprivate rawMatchToSearchItem(match: IRawFileMatch): ISerializedFileMatch {\n\t\treturn { path: match.base ? join(match.base, match.relativePath) : match.relativePath };\n\t}\n\n\tprivate doSortedSearch(engine: ISearchEngine<IRawFileMatch>, config: IFileQuery, progressCallback: IProgressCallback, fileProgressCallback: IFileProgressCallback, token?: CancellationToken): Promise<[ISerializedSearchSuccess, IRawFileMatch[]]> {\n\t\tconst emitter = new Emitter<IFileSearchProgressItem>();\n\n\t\tlet allResultsPromise = createCancelablePromise(token => {\n\t\t\tlet results: IRawFileMatch[] = [];\n\n\t\t\tconst innerProgressCallback: IFileProgressCallback = progress => {\n\t\t\t\tif (Array.isArray(progress)) {\n\t\t\t\t\tresults = progress;\n\t\t\t\t} else {\n\t\t\t\t\tfileProgressCallback(progress);\n\t\t\t\t\temitter.fire(progress);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\treturn this.doSearch(engine, innerProgressCallback, -1, token)\n\t\t\t\t.then<[ISearchEngineSuccess, IRawFileMatch[]]>(result => {\n\t\t\t\t\treturn [result, results];\n\t\t\t\t});\n\t\t});\n\n\t\tlet cache: Cache;\n\t\tif (config.cacheKey) {\n\t\t\tcache = this.getOrCreateCache(config.cacheKey);\n\t\t\tconst cacheRow: ICacheRow = {\n\t\t\t\tpromise: allResultsPromise,\n\t\t\t\tevent: emitter.event,\n\t\t\t\tresolved: false\n\t\t\t};\n\t\t\tcache.resultsToSearchCache[config.filePattern || ''] = cacheRow;\n\t\t\tallResultsPromise.then(() => {\n\t\t\t\tcacheRow.resolved = true;\n\t\t\t}, err => {\n\t\t\t\tdelete cache.resultsToSearchCache[config.filePattern || ''];\n\t\t\t});\n\n\t\t\tallResultsPromise = this.preventCancellation(allResultsPromise);\n\t\t}\n\n\t\treturn allResultsPromise.then(([result, results]) => {\n\t\t\tconst scorerCache: FuzzyScorerCache = cache ? cache.scorerCache : Object.create(null);\n\t\t\tconst sortSW = (typeof config.maxResults !== 'number' || config.maxResults > 0) && StopWatch.create(false);\n\t\t\treturn this.sortResults(config, results, scorerCache, token)\n\t\t\t\t.then<[ISerializedSearchSuccess, IRawFileMatch[]]>(sortedResults => {\n\t\t\t\t\t// sortingTime: -1 indicates a \"sorted\" search that was not sorted, i.e. populating the cache when quickaccess is opened.\n\t\t\t\t\t// Contrasting with findFiles which is not sorted and will have sortingTime: undefined\n\t\t\t\t\tconst sortingTime = sortSW ? sortSW.elapsed() : -1;\n\n\t\t\t\t\treturn [{\n\t\t\t\t\t\ttype: 'success',\n\t\t\t\t\t\tstats: {\n\t\t\t\t\t\t\tdetailStats: result.stats,\n\t\t\t\t\t\t\tsortingTime,\n\t\t\t\t\t\t\tfromCache: false,\n\t\t\t\t\t\t\ttype: 'searchProcess',\n\t\t\t\t\t\t\tworkspaceFolderCount: config.folderQueries.length,\n\t\t\t\t\t\t\tresultCount: sortedResults.length\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmessages: result.messages,\n\t\t\t\t\t\tlimitHit: result.limitHit || typeof config.maxResults === 'number' && results.length > config.maxResults\n\t\t\t\t\t} as ISerializedSearchSuccess, sortedResults];\n\t\t\t\t});\n\t\t});\n\t}\n\n\tprivate getOrCreateCache(cacheKey: string): Cache {\n\t\tconst existing = this.caches[cacheKey];\n\t\tif (existing) {\n\t\t\treturn existing;\n\t\t}\n\t\treturn this.caches[cacheKey] = new Cache();\n\t}\n\n\tprivate trySortedSearchFromCache(config: IFileQuery, progressCallback: IFileProgressCallback, token?: CancellationToken): Promise<[ISerializedSearchSuccess, IRawFileMatch[]]> | undefined {\n\t\tconst cache = config.cacheKey && this.caches[config.cacheKey];\n\t\tif (!cache) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst cached = this.getResultsFromCache(cache, config.filePattern || '', progressCallback, token);\n\t\tif (cached) {\n\t\t\treturn cached.then(([result, results, cacheStats]) => {\n\t\t\t\tconst sortSW = StopWatch.create(false);\n\t\t\t\treturn this.sortResults(config, results, cache.scorerCache, token)\n\t\t\t\t\t.then<[ISerializedSearchSuccess, IRawFileMatch[]]>(sortedResults => {\n\t\t\t\t\t\tconst sortingTime = sortSW.elapsed();\n\t\t\t\t\t\tconst stats: IFileSearchStats = {\n\t\t\t\t\t\t\tfromCache: true,\n\t\t\t\t\t\t\tdetailStats: cacheStats,\n\t\t\t\t\t\t\ttype: 'searchProcess',\n\t\t\t\t\t\t\tresultCount: results.length,\n\t\t\t\t\t\t\tsortingTime\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\treturn [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'success',\n\t\t\t\t\t\t\t\tlimitHit: result.limitHit || typeof config.maxResults === 'number' && results.length > config.maxResults,\n\t\t\t\t\t\t\t\tstats\n\t\t\t\t\t\t\t} as ISerializedSearchSuccess,\n\t\t\t\t\t\t\tsortedResults\n\t\t\t\t\t\t];\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate sortResults(config: IFileQuery, results: IRawFileMatch[], scorerCache: FuzzyScorerCache, token?: CancellationToken): Promise<IRawFileMatch[]> {\n\t\t// we use the same compare function that is used later when showing the results using fuzzy scoring\n\t\t// this is very important because we are also limiting the number of results by config.maxResults\n\t\t// and as such we want the top items to be included in this result set if the number of items\n\t\t// exceeds config.maxResults.\n\t\tconst query = prepareQuery(config.filePattern || '');\n\t\tconst compare = (matchA: IRawFileMatch, matchB: IRawFileMatch) => compareItemsByFuzzyScore(matchA, matchB, query, true, FileMatchItemAccessor, scorerCache);\n\n\t\tconst maxResults = typeof config.maxResults === 'number' ? config.maxResults : Number.MAX_VALUE;\n\t\treturn arrays.topAsync(results, compare, maxResults, 10000, token);\n\t}\n\n\tprivate sendProgress(results: ISerializedFileMatch[], progressCb: IProgressCallback, batchSize: number) {\n\t\tif (batchSize && batchSize > 0) {\n\t\t\tfor (let i = 0; i < results.length; i += batchSize) {\n\t\t\t\tprogressCb(results.slice(i, i + batchSize));\n\t\t\t}\n\t\t} else {\n\t\t\tprogressCb(results);\n\t\t}\n\t}\n\n\tprivate getResultsFromCache(cache: Cache, searchValue: string, progressCallback: IFileProgressCallback, token?: CancellationToken): Promise<[ISearchEngineSuccess, IRawFileMatch[], ICachedSearchStats]> | null {\n\t\tconst cacheLookupSW = StopWatch.create(false);\n\n\t\t// Find cache entries by prefix of search value\n\t\tconst hasPathSep = searchValue.indexOf(sep) >= 0;\n\t\tlet cachedRow: ICacheRow | undefined;\n\t\tfor (const previousSearch in cache.resultsToSearchCache) {\n\t\t\t// If we narrow down, we might be able to reuse the cached results\n\t\t\tif (searchValue.startsWith(previousSearch)) {\n\t\t\t\tif (hasPathSep && previousSearch.indexOf(sep) < 0 && previousSearch !== '') {\n\t\t\t\t\tcontinue; // since a path character widens the search for potential more matches, require it in previous search too\n\t\t\t\t}\n\n\t\t\t\tconst row = cache.resultsToSearchCache[previousSearch];\n\t\t\t\tcachedRow = {\n\t\t\t\t\tpromise: this.preventCancellation(row.promise),\n\t\t\t\t\tevent: row.event,\n\t\t\t\t\tresolved: row.resolved\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!cachedRow) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst cacheLookupTime = cacheLookupSW.elapsed();\n\t\tconst cacheFilterSW = StopWatch.create(false);\n\n\t\tconst listener = cachedRow.event(progressCallback);\n\t\tif (token) {\n\t\t\ttoken.onCancellationRequested(() => {\n\t\t\t\tlistener.dispose();\n\t\t\t});\n\t\t}\n\n\t\treturn cachedRow.promise.then<[ISearchEngineSuccess, IRawFileMatch[], ICachedSearchStats]>(([complete, cachedEntries]) => {\n\t\t\tif (token && token.isCancellationRequested) {\n\t\t\t\tthrow canceled();\n\t\t\t}\n\n\t\t\t// Pattern match on results\n\t\t\tconst results: IRawFileMatch[] = [];\n\t\t\tconst normalizedSearchValueLowercase = prepareQuery(searchValue).normalizedLowercase;\n\t\t\tfor (const entry of cachedEntries) {\n\n\t\t\t\t// Check if this entry is a match for the search value\n\t\t\t\tif (!isFilePatternMatch(entry, normalizedSearchValueLowercase)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tresults.push(entry);\n\t\t\t}\n\n\t\t\treturn [complete, results, {\n\t\t\t\tcacheWasResolved: cachedRow!.resolved,\n\t\t\t\tcacheLookupTime,\n\t\t\t\tcacheFilterTime: cacheFilterSW.elapsed(),\n\t\t\t\tcacheEntryCount: cachedEntries.length\n\t\t\t}];\n\t\t});\n\t}\n\n\n\n\tprivate doSearch(engine: ISearchEngine<IRawFileMatch>, progressCallback: IFileProgressCallback, batchSize: number, token?: CancellationToken): Promise<ISearchEngineSuccess> {\n\t\treturn new Promise<ISearchEngineSuccess>((c, e) => {\n\t\t\tlet batch: IRawFileMatch[] = [];\n\t\t\tif (token) {\n\t\t\t\ttoken.onCancellationRequested(() => engine.cancel());\n\t\t\t}\n\n\t\t\tengine.search((match) => {\n\t\t\t\tif (match) {\n\t\t\t\t\tif (batchSize) {\n\t\t\t\t\t\tbatch.push(match);\n\t\t\t\t\t\tif (batchSize > 0 && batch.length >= batchSize) {\n\t\t\t\t\t\t\tprogressCallback(batch);\n\t\t\t\t\t\t\tbatch = [];\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprogressCallback(match);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, (progress) => {\n\t\t\t\tprogressCallback(progress);\n\t\t\t}, (error, complete) => {\n\t\t\t\tif (batch.length) {\n\t\t\t\t\tprogressCallback(batch);\n\t\t\t\t}\n\n\t\t\t\tif (error) {\n\t\t\t\t\te(error);\n\t\t\t\t} else {\n\t\t\t\t\tc(complete);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tclearCache(cacheKey: string): Promise<void> {\n\t\tdelete this.caches[cacheKey];\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\t/**\n\t * Return a CancelablePromise which is not actually cancelable\n\t * TODO@rob - Is this really needed?\n\t */\n\tprivate preventCancellation<C>(promise: CancelablePromise<C>): CancelablePromise<C> {\n\t\treturn new class implements CancelablePromise<C> {\n\t\t\tget [Symbol.toStringTag]() { return this.toString(); }\n\t\t\tcancel() {\n\t\t\t\t// Do nothing\n\t\t\t}\n\t\t\tthen<TResult1 = C, TResult2 = never>(resolve?: ((value: C) => TResult1 | Promise<TResult1>) | undefined | null, reject?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2> {\n\t\t\t\treturn promise.then(resolve, reject);\n\t\t\t}\n\t\t\tcatch(reject?: any) {\n\t\t\t\treturn this.then(undefined, reject);\n\t\t\t}\n\t\t\tfinally(onFinally: any) {\n\t\t\t\treturn promise.finally(onFinally);\n\t\t\t}\n\t\t};\n\t}\n}\n\ninterface ICacheRow {\n\t// TODO@roblou - never actually canceled\n\tpromise: CancelablePromise<[ISearchEngineSuccess, IRawFileMatch[]]>;\n\tresolved: boolean;\n\tevent: Event<IFileSearchProgressItem>;\n}\n\nclass Cache {\n\n\tresultsToSearchCache: { [searchValue: string]: ICacheRow; } = Object.create(null);\n\n\tscorerCache: FuzzyScorerCache = Object.create(null);\n}\n\nconst FileMatchItemAccessor = new class implements IItemAccessor<IRawFileMatch> {\n\n\tgetItemLabel(match: IRawFileMatch): string {\n\t\treturn basename(match.relativePath); // e.g. myFile.txt\n\t}\n\n\tgetItemDescription(match: IRawFileMatch): string {\n\t\treturn dirname(match.relativePath); // e.g. some/path/to/file\n\t}\n\n\tgetItemPath(match: IRawFileMatch): string {\n\t\treturn match.relativePath; // e.g. some/path/to/file/myFile.txt\n\t}\n};\n\nfunction reviveQuery<U extends IRawQuery>(rawQuery: U): U extends IRawTextQuery ? ITextQuery : IFileQuery {\n\treturn {\n\t\t...<any>rawQuery, // TODO\n\t\t...{\n\t\t\tfolderQueries: rawQuery.folderQueries && rawQuery.folderQueries.map(reviveFolderQuery),\n\t\t\textraFileResources: rawQuery.extraFileResources && rawQuery.extraFileResources.map(components => URI.revive(components))\n\t\t}\n\t};\n}\n\nfunction reviveFolderQuery(rawFolderQuery: IFolderQuery<UriComponents>): IFolderQuery<URI> {\n\treturn {\n\t\t...rawFolderQuery,\n\t\tfolder: URI.revive(rawFolderQuery.folder)\n\t};\n}\n"]}