{"version":3,"file":"fileSearch.integrationTest.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/search/test/node/fileSearch.integrationTest.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport * as path from 'vs/base/common/path';\nimport { URI } from 'vs/base/common/uri';\nimport { flakySuite, getPathFromAmdModule } from 'vs/base/test/node/testUtils';\nimport { IFileQuery, IFolderQuery, ISerializedSearchProgressItem, isProgressMessage, QueryType } from 'vs/workbench/services/search/common/search';\nimport { SearchService } from 'vs/workbench/services/search/node/rawSearchService';\n\nconst TEST_FIXTURES = path.normalize(getPathFromAmdModule(require, './fixtures'));\nconst TEST_FIXTURES2 = path.normalize(getPathFromAmdModule(require, './fixtures2'));\nconst EXAMPLES_FIXTURES = path.join(TEST_FIXTURES, 'examples');\nconst MORE_FIXTURES = path.join(TEST_FIXTURES, 'more');\nconst TEST_ROOT_FOLDER: IFolderQuery = { folder: URI.file(TEST_FIXTURES) };\nconst ROOT_FOLDER_QUERY: IFolderQuery[] = [\n\tTEST_ROOT_FOLDER\n];\n\nconst MULTIROOT_QUERIES: IFolderQuery[] = [\n\t{ folder: URI.file(EXAMPLES_FIXTURES), folderName: 'examples_folder' },\n\t{ folder: URI.file(MORE_FIXTURES) }\n];\n\nasync function doSearchTest(query: IFileQuery, expectedResultCount: number | Function): Promise<void> {\n\tconst svc = new SearchService();\n\n\tconst results: ISerializedSearchProgressItem[] = [];\n\tawait svc.doFileSearch(query, e => {\n\t\tif (!isProgressMessage(e)) {\n\t\t\tif (Array.isArray(e)) {\n\t\t\t\tresults.push(...e);\n\t\t\t} else {\n\t\t\t\tresults.push(e);\n\t\t\t}\n\t\t}\n\t});\n\n\tassert.strictEqual(results.length, expectedResultCount, `rg ${results.length} !== ${expectedResultCount}`);\n}\n\nflakySuite('FileSearch-integration', function () {\n\n\ttest('File - simple', () => {\n\t\tconst config: IFileQuery = {\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY\n\t\t};\n\n\t\treturn doSearchTest(config, 14);\n\t});\n\n\ttest('File - filepattern', () => {\n\t\tconst config: IFileQuery = {\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tfilePattern: 'anotherfile'\n\t\t};\n\n\t\treturn doSearchTest(config, 1);\n\t});\n\n\ttest('File - exclude', () => {\n\t\tconst config: IFileQuery = {\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tfilePattern: 'file',\n\t\t\texcludePattern: { '**/anotherfolder/**': true }\n\t\t};\n\n\t\treturn doSearchTest(config, 2);\n\t});\n\n\ttest('File - multiroot', () => {\n\t\tconst config: IFileQuery = {\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: MULTIROOT_QUERIES,\n\t\t\tfilePattern: 'file',\n\t\t\texcludePattern: { '**/anotherfolder/**': true }\n\t\t};\n\n\t\treturn doSearchTest(config, 2);\n\t});\n\n\ttest('File - multiroot with folder name', () => {\n\t\tconst config: IFileQuery = {\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: MULTIROOT_QUERIES,\n\t\t\tfilePattern: 'examples_folder anotherfile'\n\t\t};\n\n\t\treturn doSearchTest(config, 1);\n\t});\n\n\ttest('File - multiroot with folder name and sibling exclude', () => {\n\t\tconst config: IFileQuery = {\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: [\n\t\t\t\t{ folder: URI.file(TEST_FIXTURES), folderName: 'folder1' },\n\t\t\t\t{ folder: URI.file(TEST_FIXTURES2) }\n\t\t\t],\n\t\t\tfilePattern: 'folder1 site',\n\t\t\texcludePattern: { '*.css': { when: '$(basename).less' } }\n\t\t};\n\n\t\treturn doSearchTest(config, 1);\n\t});\n});\n"]}