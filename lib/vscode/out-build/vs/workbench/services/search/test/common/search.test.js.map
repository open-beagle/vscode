{"version":3,"file":"search.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/search/test/common/search.test.ts"],"names":[],"mappings":";;;IAOA,KAAK,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAE9B,MAAM,eAAe,GAA8B;YAClD,UAAU,EAAE,CAAC;YACb,YAAY,EAAE,GAAG;SACjB,CAAC;QAEF,SAAS,6BAA6B,CAAC,IAAY,EAAE,MAAuB;YAC3E,MAAM,CAAC,WAAW,CACjB,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAe,MAAM,CAAC,OAAO,CAAC,OAAQ,CAAC,WAAW,EAAgB,MAAM,CAAC,OAAO,CAAC,OAAQ,CAAC,SAAS,CAAC,EACjI,IAAI,CAAC,CAAC;QACR,CAAC;QAED,IAAI,CAAC,+BAA+B,EAAE,GAAG,EAAE;YAC1C,MAAM,KAAK,GAAG,IAAI,qBAAY,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACxC,MAAM,MAAM,GAAG,IAAI,wBAAe,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;YAC9C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;YAC7C,6BAA6B,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,4BAA4B,EAAE,GAAG,EAAE;YACvC,MAAM,KAAK,GAAG,IAAI,qBAAY,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACxC,MAAM,MAAM,GAAG,IAAI,wBAAe,CAAC,EAAE,EAAE,KAAK,EAAE,eAAe,CAAC,CAAC;YAC/D,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;YAC7C,6BAA6B,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,+BAA+B,EAAE,GAAG,EAAE;YAC1C,MAAM,KAAK,GAAG,IAAI,qBAAY,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACxC,MAAM,MAAM,GAAG,IAAI,wBAAe,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACrD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;YAC7C,6BAA6B,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,4BAA4B,EAAE,GAAG,EAAE;YACvC,MAAM,KAAK,GAAG,IAAI,qBAAY,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACxC,MAAM,MAAM,GAAG,IAAI,wBAAe,CAAC,SAAS,EAAE,KAAK,EAAE,eAAe,CAAC,CAAC;YACtE,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;YAC7C,6BAA6B,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,SAAS,EAAE,GAAG,EAAE;YACpB,MAAM,KAAK,GAAG,IAAI,qBAAY,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;YAC1C,MAAM,MAAM,GAAG,IAAI,wBAAe,CAAC,8BAA8B,EAAE,KAAK,EAAE,eAAe,CAAC,CAAC;YAC3F,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;YAC7C,6BAA6B,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,UAAU,EAAE,GAAG,EAAE;YACrB,MAAM,KAAK,GAAG,IAAI,qBAAY,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACxC,MAAM,MAAM,GAAG,IAAI,wBAAe,CAAC,kIAAkI,EAAE,KAAK,EAAE,eAAe,CAAC,CAAC;YAC/L,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;YAC7C,6BAA6B,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,EAAE,GAAG,EAAE;YACnB,MAAM,KAAK,GAAG,IAAI,qBAAY,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;YAC1C,MAAM,MAAM,GAAG,IAAI,wBAAe,CAAC,kIAAkI,EAAE,KAAK,EAAE,eAAe,CAAC,CAAC;YAC/L,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;YAC7C,6BAA6B,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,kBAAkB,EAAE,GAAG,EAAE;YAC7B,MAAM,cAAc,GAA8B;gBACjD,UAAU,EAAE,CAAC;gBACb,YAAY,EAAE,CAAC;aACf,CAAC;YAEF,MAAM,KAAK,GAAG,IAAI,qBAAY,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACxC,MAAM,MAAM,GAAG,IAAI,wBAAe,CAAC,SAAS,EAAE,KAAK,EAAE,cAAc,CAAC,CAAC;YACrE,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;YAC7C,6BAA6B,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,6BAA6B,EAAE,GAAG,EAAE;YACxC,MAAM,cAAc,GAA8B;gBACjD,UAAU,EAAE,CAAC;gBACb,YAAY,EAAE,KAAK;aACnB,CAAC;YAEF,MAAM,KAAK,GAAG,IAAI,oBAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAC1C,MAAM,MAAM,GAAG,IAAI,wBAAe,CAAC,kBAAkB,EAAE,KAAK,EAAE,cAAc,CAAC,CAAC;YAC9E,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;YAC7C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,kBAAkB,CAAC,CAAC;YAC5D,MAAM,CAAC,WAAW,CAAe,MAAM,CAAC,OAAO,CAAC,OAAQ,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;YAC7E,MAAM,CAAC,WAAW,CAAe,MAAM,CAAC,OAAO,CAAC,OAAQ,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;YACzE,MAAM,CAAC,WAAW,CAAe,MAAM,CAAC,OAAO,CAAC,OAAQ,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;YAC3E,MAAM,CAAC,WAAW,CAAe,MAAM,CAAC,OAAO,CAAC,OAAQ,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;QACxE,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,wCAAwC,EAAE,GAAG,EAAE;YACnD,MAAM,cAAc,GAA8B;gBACjD,UAAU,EAAE,CAAC;gBACb,YAAY,EAAE,EAAE;aAChB,CAAC;YAEF,MAAM,MAAM,GAAG,IAAI,oBAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAC3C,MAAM,MAAM,GAAG,IAAI,oBAAW,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;YAC/C,MAAM,MAAM,GAAG,IAAI,oBAAW,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;YAC/C,MAAM,MAAM,GAAG,IAAI,wBAAe,CAAC,kJAAkJ,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,EAAE,cAAc,CAAC,CAAC;YACjO,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,qBAAY,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,qBAAY,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,qBAAY,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;YACtI,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,uDAAuD,CAAC,CAAC;QAClG,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,qBAAqB,EAAE,GAAG,EAAE;YAChC,MAAM,KAAK,GAAG,IAAI,oBAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAC1C,MAAM,cAAc,GAA8B;gBACjD,UAAU,EAAE,CAAC;gBACb,YAAY,EAAE,KAAK;aACnB,CAAC;YAEF,MAAM,CAAC,WAAW,CAAC,IAAI,wBAAe,CAAC,WAAW,EAAE,KAAK,EAAE,cAAc,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;YACpG,MAAM,CAAC,WAAW,CAAC,IAAI,wBAAe,CAAC,aAAa,EAAE,KAAK,EAAE,cAAc,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QACvG,CAAC,CAAC,CAAC;QAEH,+CAA+C;QAC/C,uDAAuD;QACvD,mBAAmB;QACnB,wBAAwB;QACxB,MAAM;QAEN,8CAA8C;QAC9C,mFAAmF;QACnF,gDAAgD;QAChD,+CAA+C;QAC/C,MAAM;IACP,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as assert from 'assert';\nimport { ITextSearchPreviewOptions, OneLineRange, TextSearchMatch, SearchRange } from 'vs/workbench/services/search/common/search';\n\nsuite('TextSearchResult', () => {\n\n\tconst previewOptions1: ITextSearchPreviewOptions = {\n\t\tmatchLines: 1,\n\t\tcharsPerLine: 100\n\t};\n\n\tfunction assertOneLinePreviewRangeText(text: string, result: TextSearchMatch): void {\n\t\tassert.strictEqual(\n\t\t\tresult.preview.text.substring((<SearchRange>result.preview.matches).startColumn, (<SearchRange>result.preview.matches).endColumn),\n\t\t\ttext);\n\t}\n\n\ttest('empty without preview options', () => {\n\t\tconst range = new OneLineRange(5, 0, 0);\n\t\tconst result = new TextSearchMatch('', range);\n\t\tassert.deepStrictEqual(result.ranges, range);\n\t\tassertOneLinePreviewRangeText('', result);\n\t});\n\n\ttest('empty with preview options', () => {\n\t\tconst range = new OneLineRange(5, 0, 0);\n\t\tconst result = new TextSearchMatch('', range, previewOptions1);\n\t\tassert.deepStrictEqual(result.ranges, range);\n\t\tassertOneLinePreviewRangeText('', result);\n\t});\n\n\ttest('short without preview options', () => {\n\t\tconst range = new OneLineRange(5, 4, 7);\n\t\tconst result = new TextSearchMatch('foo bar', range);\n\t\tassert.deepStrictEqual(result.ranges, range);\n\t\tassertOneLinePreviewRangeText('bar', result);\n\t});\n\n\ttest('short with preview options', () => {\n\t\tconst range = new OneLineRange(5, 4, 7);\n\t\tconst result = new TextSearchMatch('foo bar', range, previewOptions1);\n\t\tassert.deepStrictEqual(result.ranges, range);\n\t\tassertOneLinePreviewRangeText('bar', result);\n\t});\n\n\ttest('leading', () => {\n\t\tconst range = new OneLineRange(5, 25, 28);\n\t\tconst result = new TextSearchMatch('long text very long text foo', range, previewOptions1);\n\t\tassert.deepStrictEqual(result.ranges, range);\n\t\tassertOneLinePreviewRangeText('foo', result);\n\t});\n\n\ttest('trailing', () => {\n\t\tconst range = new OneLineRange(5, 0, 3);\n\t\tconst result = new TextSearchMatch('foo long text very long text long text very long text long text very long text long text very long text long text very long text', range, previewOptions1);\n\t\tassert.deepStrictEqual(result.ranges, range);\n\t\tassertOneLinePreviewRangeText('foo', result);\n\t});\n\n\ttest('middle', () => {\n\t\tconst range = new OneLineRange(5, 30, 33);\n\t\tconst result = new TextSearchMatch('long text very long text long foo text very long text long text very long text long text very long text long text very long text', range, previewOptions1);\n\t\tassert.deepStrictEqual(result.ranges, range);\n\t\tassertOneLinePreviewRangeText('foo', result);\n\t});\n\n\ttest('truncating match', () => {\n\t\tconst previewOptions: ITextSearchPreviewOptions = {\n\t\t\tmatchLines: 1,\n\t\t\tcharsPerLine: 1\n\t\t};\n\n\t\tconst range = new OneLineRange(0, 4, 7);\n\t\tconst result = new TextSearchMatch('foo bar', range, previewOptions);\n\t\tassert.deepStrictEqual(result.ranges, range);\n\t\tassertOneLinePreviewRangeText('b', result);\n\t});\n\n\ttest('one line of multiline match', () => {\n\t\tconst previewOptions: ITextSearchPreviewOptions = {\n\t\t\tmatchLines: 1,\n\t\t\tcharsPerLine: 10000\n\t\t};\n\n\t\tconst range = new SearchRange(5, 4, 6, 3);\n\t\tconst result = new TextSearchMatch('foo bar\\nfoo bar', range, previewOptions);\n\t\tassert.deepStrictEqual(result.ranges, range);\n\t\tassert.strictEqual(result.preview.text, 'foo bar\\nfoo bar');\n\t\tassert.strictEqual((<SearchRange>result.preview.matches).startLineNumber, 0);\n\t\tassert.strictEqual((<SearchRange>result.preview.matches).startColumn, 4);\n\t\tassert.strictEqual((<SearchRange>result.preview.matches).endLineNumber, 1);\n\t\tassert.strictEqual((<SearchRange>result.preview.matches).endColumn, 3);\n\t});\n\n\ttest('compacts multiple ranges on long lines', () => {\n\t\tconst previewOptions: ITextSearchPreviewOptions = {\n\t\t\tmatchLines: 1,\n\t\t\tcharsPerLine: 10\n\t\t};\n\n\t\tconst range1 = new SearchRange(5, 4, 5, 7);\n\t\tconst range2 = new SearchRange(5, 133, 5, 136);\n\t\tconst range3 = new SearchRange(5, 141, 5, 144);\n\t\tconst result = new TextSearchMatch('foo bar 123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890 foo bar baz bar', [range1, range2, range3], previewOptions);\n\t\tassert.deepStrictEqual(result.preview.matches, [new OneLineRange(0, 4, 7), new OneLineRange(0, 42, 45), new OneLineRange(0, 50, 53)]);\n\t\tassert.strictEqual(result.preview.text, 'foo bar 123456⟪ 117 characters skipped ⟫o bar baz bar');\n\t});\n\n\ttest('trims lines endings', () => {\n\t\tconst range = new SearchRange(5, 3, 5, 5);\n\t\tconst previewOptions: ITextSearchPreviewOptions = {\n\t\t\tmatchLines: 1,\n\t\t\tcharsPerLine: 10000\n\t\t};\n\n\t\tassert.strictEqual(new TextSearchMatch('foo bar\\n', range, previewOptions).preview.text, 'foo bar');\n\t\tassert.strictEqual(new TextSearchMatch('foo bar\\r\\n', range, previewOptions).preview.text, 'foo bar');\n\t});\n\n\t// test('all lines of multiline match', () => {\n\t// \tconst previewOptions: ITextSearchPreviewOptions = {\n\t// \t\tmatchLines: 5,\n\t// \t\tcharsPerLine: 10000\n\t// \t};\n\n\t// \tconst range = new SearchRange(5, 4, 6, 3);\n\t// \tconst result = new TextSearchResult('foo bar\\nfoo bar', range, previewOptions);\n\t// \tassert.deepStrictEqual(result.range, range);\n\t// \tassertPreviewRangeText('bar\\nfoo', result);\n\t// });\n});\n"]}