{"version":3,"file":"search.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/search/test/node/search.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport * as path from 'vs/base/common/path';\nimport * as platform from 'vs/base/common/platform';\nimport { joinPath } from 'vs/base/common/resources';\nimport { URI } from 'vs/base/common/uri';\nimport { IFolderQuery, QueryType, IRawFileMatch } from 'vs/workbench/services/search/common/search';\nimport { Engine as FileSearchEngine, FileWalker } from 'vs/workbench/services/search/node/fileSearch';\nimport { flakySuite, getPathFromAmdModule } from 'vs/base/test/node/testUtils';\n\nconst TEST_FIXTURES = path.normalize(getPathFromAmdModule(require, './fixtures'));\nconst EXAMPLES_FIXTURES = URI.file(path.join(TEST_FIXTURES, 'examples'));\nconst MORE_FIXTURES = URI.file(path.join(TEST_FIXTURES, 'more'));\nconst TEST_ROOT_FOLDER: IFolderQuery = { folder: URI.file(TEST_FIXTURES) };\nconst ROOT_FOLDER_QUERY: IFolderQuery[] = [\n\tTEST_ROOT_FOLDER\n];\n\nconst ROOT_FOLDER_QUERY_36438: IFolderQuery[] = [\n\t{ folder: URI.file(path.normalize(getPathFromAmdModule(require, './fixtures2/36438'))) }\n];\n\nconst MULTIROOT_QUERIES: IFolderQuery[] = [\n\t{ folder: EXAMPLES_FIXTURES },\n\t{ folder: MORE_FIXTURES }\n];\n\nflakySuite('FileSearchEngine', () => {\n\n\ttest('Files: *.js', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tfilePattern: '*.js'\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 4);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: maxResults', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tmaxResults: 1\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 1);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: maxResults without Ripgrep', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tmaxResults: 1,\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 1);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: exists', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tincludePattern: { '**/file.txt': true },\n\t\t\texists: true\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error, complete) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 0);\n\t\t\tassert.ok(complete.limitHit);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: not exists', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tincludePattern: { '**/nofile.txt': true },\n\t\t\texists: true\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error, complete) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 0);\n\t\t\tassert.ok(!complete.limitHit);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: exists without Ripgrep', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tincludePattern: { '**/file.txt': true },\n\t\t\texists: true,\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error, complete) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 0);\n\t\t\tassert.ok(complete.limitHit);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: not exists without Ripgrep', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tincludePattern: { '**/nofile.txt': true },\n\t\t\texists: true,\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error, complete) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 0);\n\t\t\tassert.ok(!complete.limitHit);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: examples/com*', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tfilePattern: path.join('examples', 'com*')\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 1);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: examples (fuzzy)', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tfilePattern: 'xl'\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 7);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: multiroot', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: MULTIROOT_QUERIES,\n\t\t\tfilePattern: 'file'\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 3);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: multiroot with includePattern and maxResults', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: MULTIROOT_QUERIES,\n\t\t\tmaxResults: 1,\n\t\t\tincludePattern: {\n\t\t\t\t'*.txt': true,\n\t\t\t\t'*.js': true\n\t\t\t},\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error, complete) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 1);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: multiroot with includePattern and exists', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: MULTIROOT_QUERIES,\n\t\t\texists: true,\n\t\t\tincludePattern: {\n\t\t\t\t'*.txt': true,\n\t\t\t\t'*.js': true\n\t\t\t},\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error, complete) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 0);\n\t\t\tassert.ok(complete.limitHit);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: NPE (CamelCase)', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tfilePattern: 'NullPE'\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 1);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: *.*', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tfilePattern: '*.*'\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 14);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: *.as', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tfilePattern: '*.as'\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 0);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: *.* without derived', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tfilePattern: 'site.*',\n\t\t\texcludePattern: { '**/*.css': { 'when': '$(basename).less' } }\n\t\t});\n\n\t\tlet count = 0;\n\t\tlet res: IRawFileMatch;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tres = result;\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 1);\n\t\t\tassert.strictEqual(path.basename(res.relativePath), 'site.less');\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: *.* exclude folder without wildcard', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tfilePattern: '*.*',\n\t\t\texcludePattern: { 'examples': true }\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 8);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: exclude folder without wildcard #36438', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY_36438,\n\t\t\texcludePattern: { 'modules': true }\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 1);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: include folder without wildcard #36438', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY_36438,\n\t\t\tincludePattern: { 'modules/**': true }\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 1);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: *.* exclude folder with leading wildcard', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tfilePattern: '*.*',\n\t\t\texcludePattern: { '**/examples': true }\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 8);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: *.* exclude folder with trailing wildcard', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tfilePattern: '*.*',\n\t\t\texcludePattern: { 'examples/**': true }\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 8);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: *.* exclude with unicode', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tfilePattern: '*.*',\n\t\t\texcludePattern: { '**/üm laut汉语': true }\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 13);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: *.* include with unicode', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tfilePattern: '*.*',\n\t\t\tincludePattern: { '**/üm laut汉语/*': true }\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 1);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: multiroot with exclude', function (done: () => void) {\n\t\tconst folderQueries: IFolderQuery[] = [\n\t\t\t{\n\t\t\t\tfolder: EXAMPLES_FIXTURES,\n\t\t\t\texcludePattern: {\n\t\t\t\t\t'**/anotherfile.txt': true\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tfolder: MORE_FIXTURES,\n\t\t\t\texcludePattern: {\n\t\t\t\t\t'**/file.txt': true\n\t\t\t\t}\n\t\t\t}\n\t\t];\n\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries,\n\t\t\tfilePattern: '*'\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 5);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: Unicode and Spaces', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tfilePattern: '汉语'\n\t\t});\n\n\t\tlet count = 0;\n\t\tlet res: IRawFileMatch;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tres = result;\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 1);\n\t\t\tassert.strictEqual(path.basename(res.relativePath), '汉语.txt');\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: no results', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tfilePattern: 'nofilematch'\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 0);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: relative path matched once', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tfilePattern: path.normalize(path.join('examples', 'company.js'))\n\t\t});\n\n\t\tlet count = 0;\n\t\tlet res: IRawFileMatch;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tres = result;\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 1);\n\t\t\tassert.strictEqual(path.basename(res.relativePath), 'company.js');\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: Include pattern, single files', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tincludePattern: {\n\t\t\t\t'site.css': true,\n\t\t\t\t'examples/company.js': true,\n\t\t\t\t'examples/subfolder/subfile.txt': true\n\t\t\t}\n\t\t});\n\n\t\tconst res: IRawFileMatch[] = [];\n\t\tengine.search((result) => {\n\t\t\tres.push(result);\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tconst basenames = res.map(r => path.basename(r.relativePath));\n\t\t\tassert.ok(basenames.indexOf('site.css') !== -1, `site.css missing in ${JSON.stringify(basenames)}`);\n\t\t\tassert.ok(basenames.indexOf('company.js') !== -1, `company.js missing in ${JSON.stringify(basenames)}`);\n\t\t\tassert.ok(basenames.indexOf('subfile.txt') !== -1, `subfile.txt missing in ${JSON.stringify(basenames)}`);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: extraFiles only', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: [],\n\t\t\textraFileResources: [\n\t\t\t\tURI.file(path.normalize(path.join(getPathFromAmdModule(require, './fixtures'), 'site.css'))),\n\t\t\t\tURI.file(path.normalize(path.join(getPathFromAmdModule(require, './fixtures'), 'examples', 'company.js'))),\n\t\t\t\tURI.file(path.normalize(path.join(getPathFromAmdModule(require, './fixtures'), 'index.html')))\n\t\t\t],\n\t\t\tfilePattern: '*.js'\n\t\t});\n\n\t\tlet count = 0;\n\t\tlet res: IRawFileMatch;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tres = result;\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 1);\n\t\t\tassert.strictEqual(path.basename(res.relativePath), 'company.js');\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: extraFiles only (with include)', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: [],\n\t\t\textraFileResources: [\n\t\t\t\tURI.file(path.normalize(path.join(getPathFromAmdModule(require, './fixtures'), 'site.css'))),\n\t\t\t\tURI.file(path.normalize(path.join(getPathFromAmdModule(require, './fixtures'), 'examples', 'company.js'))),\n\t\t\t\tURI.file(path.normalize(path.join(getPathFromAmdModule(require, './fixtures'), 'index.html')))\n\t\t\t],\n\t\t\tfilePattern: '*.*',\n\t\t\tincludePattern: { '**/*.css': true }\n\t\t});\n\n\t\tlet count = 0;\n\t\tlet res: IRawFileMatch;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tres = result;\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 1);\n\t\t\tassert.strictEqual(path.basename(res.relativePath), 'site.css');\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: extraFiles only (with exclude)', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: [],\n\t\t\textraFileResources: [\n\t\t\t\tURI.file(path.normalize(path.join(getPathFromAmdModule(require, './fixtures'), 'site.css'))),\n\t\t\t\tURI.file(path.normalize(path.join(getPathFromAmdModule(require, './fixtures'), 'examples', 'company.js'))),\n\t\t\t\tURI.file(path.normalize(path.join(getPathFromAmdModule(require, './fixtures'), 'index.html')))\n\t\t\t],\n\t\t\tfilePattern: '*.*',\n\t\t\texcludePattern: { '**/*.css': true }\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 2);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: no dupes in nested folders', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: [\n\t\t\t\t{ folder: EXAMPLES_FIXTURES },\n\t\t\t\t{ folder: joinPath(EXAMPLES_FIXTURES, 'subfolder') }\n\t\t\t],\n\t\t\tfilePattern: 'subfile.txt'\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 1);\n\t\t\tdone();\n\t\t});\n\t});\n});\n\nflakySuite('FileWalker', () => {\n\n\t(platform.isWindows ? test.skip : test)('Find: exclude subfolder', function (done: () => void) {\n\t\tconst file0 = './more/file.txt';\n\t\tconst file1 = './examples/subfolder/subfile.txt';\n\n\t\tconst walker = new FileWalker({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\texcludePattern: { '**/something': true }\n\t\t});\n\t\tconst cmd1 = walker.spawnFindCmd(TEST_ROOT_FOLDER);\n\t\twalker.readStdout(cmd1, 'utf8', (err1, stdout1) => {\n\t\t\tassert.strictEqual(err1, null);\n\t\t\tassert.notStrictEqual(stdout1!.split('\\n').indexOf(file0), -1, stdout1);\n\t\t\tassert.notStrictEqual(stdout1!.split('\\n').indexOf(file1), -1, stdout1);\n\n\t\t\tconst walker = new FileWalker({\n\t\t\t\ttype: QueryType.File,\n\t\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\t\texcludePattern: { '**/subfolder': true }\n\t\t\t});\n\t\t\tconst cmd2 = walker.spawnFindCmd(TEST_ROOT_FOLDER);\n\t\t\twalker.readStdout(cmd2, 'utf8', (err2, stdout2) => {\n\t\t\t\tassert.strictEqual(err2, null);\n\t\t\t\tassert.notStrictEqual(stdout1!.split('\\n').indexOf(file0), -1, stdout1);\n\t\t\t\tassert.strictEqual(stdout2!.split('\\n').indexOf(file1), -1, stdout2);\n\t\t\t\tdone();\n\t\t\t});\n\t\t});\n\t});\n\n\t(platform.isWindows ? test.skip : test)('Find: folder excludes', function (done: () => void) {\n\t\tconst folderQueries: IFolderQuery[] = [\n\t\t\t{\n\t\t\t\tfolder: URI.file(TEST_FIXTURES),\n\t\t\t\texcludePattern: { '**/subfolder': true }\n\t\t\t}\n\t\t];\n\n\t\tconst file0 = './more/file.txt';\n\t\tconst file1 = './examples/subfolder/subfile.txt';\n\n\t\tconst walker = new FileWalker({ type: QueryType.File, folderQueries });\n\t\tconst cmd1 = walker.spawnFindCmd(folderQueries[0]);\n\t\twalker.readStdout(cmd1, 'utf8', (err1, stdout1) => {\n\t\t\tassert.strictEqual(err1, null);\n\t\t\tassert(outputContains(stdout1!, file0), stdout1);\n\t\t\tassert(!outputContains(stdout1!, file1), stdout1);\n\t\t\tdone();\n\t\t});\n\t});\n\n\t(platform.isWindows ? test.skip : test)('Find: exclude multiple folders', function (done: () => void) {\n\t\tconst file0 = './index.html';\n\t\tconst file1 = './examples/small.js';\n\t\tconst file2 = './more/file.txt';\n\n\t\tconst walker = new FileWalker({ type: QueryType.File, folderQueries: ROOT_FOLDER_QUERY, excludePattern: { '**/something': true } });\n\t\tconst cmd1 = walker.spawnFindCmd(TEST_ROOT_FOLDER);\n\t\twalker.readStdout(cmd1, 'utf8', (err1, stdout1) => {\n\t\t\tassert.strictEqual(err1, null);\n\t\t\tassert.notStrictEqual(stdout1!.split('\\n').indexOf(file0), -1, stdout1);\n\t\t\tassert.notStrictEqual(stdout1!.split('\\n').indexOf(file1), -1, stdout1);\n\t\t\tassert.notStrictEqual(stdout1!.split('\\n').indexOf(file2), -1, stdout1);\n\n\t\t\tconst walker = new FileWalker({ type: QueryType.File, folderQueries: ROOT_FOLDER_QUERY, excludePattern: { '{**/examples,**/more}': true } });\n\t\t\tconst cmd2 = walker.spawnFindCmd(TEST_ROOT_FOLDER);\n\t\t\twalker.readStdout(cmd2, 'utf8', (err2, stdout2) => {\n\t\t\t\tassert.strictEqual(err2, null);\n\t\t\t\tassert.notStrictEqual(stdout1!.split('\\n').indexOf(file0), -1, stdout1);\n\t\t\t\tassert.strictEqual(stdout2!.split('\\n').indexOf(file1), -1, stdout2);\n\t\t\t\tassert.strictEqual(stdout2!.split('\\n').indexOf(file2), -1, stdout2);\n\t\t\t\tdone();\n\t\t\t});\n\t\t});\n\t});\n\n\t(platform.isWindows ? test.skip : test)('Find: exclude folder path suffix', function (done: () => void) {\n\t\tconst file0 = './examples/company.js';\n\t\tconst file1 = './examples/subfolder/subfile.txt';\n\n\t\tconst walker = new FileWalker({ type: QueryType.File, folderQueries: ROOT_FOLDER_QUERY, excludePattern: { '**/examples/something': true } });\n\t\tconst cmd1 = walker.spawnFindCmd(TEST_ROOT_FOLDER);\n\t\twalker.readStdout(cmd1, 'utf8', (err1, stdout1) => {\n\t\t\tassert.strictEqual(err1, null);\n\t\t\tassert.notStrictEqual(stdout1!.split('\\n').indexOf(file0), -1, stdout1);\n\t\t\tassert.notStrictEqual(stdout1!.split('\\n').indexOf(file1), -1, stdout1);\n\n\t\t\tconst walker = new FileWalker({ type: QueryType.File, folderQueries: ROOT_FOLDER_QUERY, excludePattern: { '**/examples/subfolder': true } });\n\t\t\tconst cmd2 = walker.spawnFindCmd(TEST_ROOT_FOLDER);\n\t\t\twalker.readStdout(cmd2, 'utf8', (err2, stdout2) => {\n\t\t\t\tassert.strictEqual(err2, null);\n\t\t\t\tassert.notStrictEqual(stdout1!.split('\\n').indexOf(file0), -1, stdout1);\n\t\t\t\tassert.strictEqual(stdout2!.split('\\n').indexOf(file1), -1, stdout2);\n\t\t\t\tdone();\n\t\t\t});\n\t\t});\n\t});\n\n\t(platform.isWindows ? test.skip : test)('Find: exclude subfolder path suffix', function (done: () => void) {\n\t\tconst file0 = './examples/subfolder/subfile.txt';\n\t\tconst file1 = './examples/subfolder/anotherfolder/anotherfile.txt';\n\n\t\tconst walker = new FileWalker({ type: QueryType.File, folderQueries: ROOT_FOLDER_QUERY, excludePattern: { '**/subfolder/something': true } });\n\t\tconst cmd1 = walker.spawnFindCmd(TEST_ROOT_FOLDER);\n\t\twalker.readStdout(cmd1, 'utf8', (err1, stdout1) => {\n\t\t\tassert.strictEqual(err1, null);\n\t\t\tassert.notStrictEqual(stdout1!.split('\\n').indexOf(file0), -1, stdout1);\n\t\t\tassert.notStrictEqual(stdout1!.split('\\n').indexOf(file1), -1, stdout1);\n\n\t\t\tconst walker = new FileWalker({ type: QueryType.File, folderQueries: ROOT_FOLDER_QUERY, excludePattern: { '**/subfolder/anotherfolder': true } });\n\t\t\tconst cmd2 = walker.spawnFindCmd(TEST_ROOT_FOLDER);\n\t\t\twalker.readStdout(cmd2, 'utf8', (err2, stdout2) => {\n\t\t\t\tassert.strictEqual(err2, null);\n\t\t\t\tassert.notStrictEqual(stdout1!.split('\\n').indexOf(file0), -1, stdout1);\n\t\t\t\tassert.strictEqual(stdout2!.split('\\n').indexOf(file1), -1, stdout2);\n\t\t\t\tdone();\n\t\t\t});\n\t\t});\n\t});\n\n\t(platform.isWindows ? test.skip : test)('Find: exclude folder path', function (done: () => void) {\n\t\tconst file0 = './examples/company.js';\n\t\tconst file1 = './examples/subfolder/subfile.txt';\n\n\t\tconst walker = new FileWalker({ type: QueryType.File, folderQueries: ROOT_FOLDER_QUERY, excludePattern: { 'examples/something': true } });\n\t\tconst cmd1 = walker.spawnFindCmd(TEST_ROOT_FOLDER);\n\t\twalker.readStdout(cmd1, 'utf8', (err1, stdout1) => {\n\t\t\tassert.strictEqual(err1, null);\n\t\t\tassert.notStrictEqual(stdout1!.split('\\n').indexOf(file0), -1, stdout1);\n\t\t\tassert.notStrictEqual(stdout1!.split('\\n').indexOf(file1), -1, stdout1);\n\n\t\t\tconst walker = new FileWalker({ type: QueryType.File, folderQueries: ROOT_FOLDER_QUERY, excludePattern: { 'examples/subfolder': true } });\n\t\t\tconst cmd2 = walker.spawnFindCmd(TEST_ROOT_FOLDER);\n\t\t\twalker.readStdout(cmd2, 'utf8', (err2, stdout2) => {\n\t\t\t\tassert.strictEqual(err2, null);\n\t\t\t\tassert.notStrictEqual(stdout1!.split('\\n').indexOf(file0), -1, stdout1);\n\t\t\t\tassert.strictEqual(stdout2!.split('\\n').indexOf(file1), -1, stdout2);\n\t\t\t\tdone();\n\t\t\t});\n\t\t});\n\t});\n\n\t(platform.isWindows ? test.skip : test)('Find: exclude combination of paths', function (done: () => void) {\n\t\tconst filesIn = [\n\t\t\t'./examples/subfolder/subfile.txt',\n\t\t\t'./examples/company.js',\n\t\t\t'./index.html'\n\t\t];\n\t\tconst filesOut = [\n\t\t\t'./examples/subfolder/anotherfolder/anotherfile.txt',\n\t\t\t'./more/file.txt'\n\t\t];\n\n\t\tconst walker = new FileWalker({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\texcludePattern: {\n\t\t\t\t'**/subfolder/anotherfolder': true,\n\t\t\t\t'**/something/else': true,\n\t\t\t\t'**/more': true,\n\t\t\t\t'**/andmore': true\n\t\t\t}\n\t\t});\n\t\tconst cmd1 = walker.spawnFindCmd(TEST_ROOT_FOLDER);\n\t\twalker.readStdout(cmd1, 'utf8', (err1, stdout1) => {\n\t\t\tassert.strictEqual(err1, null);\n\t\t\tfor (const fileIn of filesIn) {\n\t\t\t\tassert.notStrictEqual(stdout1!.split('\\n').indexOf(fileIn), -1, stdout1);\n\t\t\t}\n\t\t\tfor (const fileOut of filesOut) {\n\t\t\t\tassert.strictEqual(stdout1!.split('\\n').indexOf(fileOut), -1, stdout1);\n\t\t\t}\n\t\t\tdone();\n\t\t});\n\t});\n\n\tfunction outputContains(stdout: string, ...files: string[]): boolean {\n\t\tconst lines = stdout.split('\\n');\n\t\treturn files.every(file => lines.indexOf(file) >= 0);\n\t}\n});\n"]}