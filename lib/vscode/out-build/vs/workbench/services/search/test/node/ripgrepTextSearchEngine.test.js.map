{"version":3,"file":"ripgrepTextSearchEngine.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/search/test/node/ripgrepTextSearchEngine.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { joinPath } from 'vs/base/common/resources';\nimport { URI } from 'vs/base/common/uri';\nimport { fixRegexNewline, IRgMatch, IRgMessage, RipgrepParser, unicodeEscapesToPCRE2, fixNewline } from 'vs/workbench/services/search/node/ripgrepTextSearchEngine';\nimport { Range, TextSearchResult } from 'vs/workbench/services/search/common/searchExtTypes';\n\nsuite('RipgrepTextSearchEngine', () => {\n\ttest('unicodeEscapesToPCRE2', async () => {\n\t\tassert.strictEqual(unicodeEscapesToPCRE2('\\\\u1234'), '\\\\x{1234}');\n\t\tassert.strictEqual(unicodeEscapesToPCRE2('\\\\u1234\\\\u0001'), '\\\\x{1234}\\\\x{0001}');\n\t\tassert.strictEqual(unicodeEscapesToPCRE2('foo\\\\u1234bar'), 'foo\\\\x{1234}bar');\n\t\tassert.strictEqual(unicodeEscapesToPCRE2('\\\\\\\\\\\\u1234'), '\\\\\\\\\\\\x{1234}');\n\t\tassert.strictEqual(unicodeEscapesToPCRE2('foo\\\\\\\\\\\\u1234'), 'foo\\\\\\\\\\\\x{1234}');\n\n\t\tassert.strictEqual(unicodeEscapesToPCRE2('\\\\u{1234}'), '\\\\x{1234}');\n\t\tassert.strictEqual(unicodeEscapesToPCRE2('\\\\u{1234}\\\\u{0001}'), '\\\\x{1234}\\\\x{0001}');\n\t\tassert.strictEqual(unicodeEscapesToPCRE2('foo\\\\u{1234}bar'), 'foo\\\\x{1234}bar');\n\t\tassert.strictEqual(unicodeEscapesToPCRE2('[\\\\u00A0-\\\\u00FF]'), '[\\\\x{00A0}-\\\\x{00FF}]');\n\n\t\tassert.strictEqual(unicodeEscapesToPCRE2('foo\\\\u{123456}7bar'), 'foo\\\\u{123456}7bar');\n\t\tassert.strictEqual(unicodeEscapesToPCRE2('\\\\u123'), '\\\\u123');\n\t\tassert.strictEqual(unicodeEscapesToPCRE2('foo'), 'foo');\n\t\tassert.strictEqual(unicodeEscapesToPCRE2(''), '');\n\t});\n\n\ttest('fixRegexNewline - src', () => {\n\t\tconst ttable = [\n\t\t\t['foo', 'foo'],\n\t\t\t['invalid(', 'invalid('],\n\t\t\t['fo\\\\no', 'fo\\\\r?\\\\no'],\n\t\t\t['f\\\\no\\\\no', 'f\\\\r?\\\\no\\\\r?\\\\no'],\n\t\t\t['f[a-z\\\\n1]', 'f(?:[a-z1]|\\\\r?\\\\n)'],\n\t\t\t['f[\\\\n-a]', 'f[\\\\n-a]'],\n\t\t\t['(?<=\\\\n)\\\\w', '(?<=\\\\n)\\\\w'],\n\t\t\t['fo\\\\n+o', 'fo(?:\\\\r?\\\\n)+o'],\n\t\t];\n\n\t\tfor (const [input, expected] of ttable) {\n\t\t\tassert.strictEqual(fixRegexNewline(input), expected, `${input} -> ${expected}`);\n\t\t}\n\t});\n\n\ttest('fixRegexNewline - re', () => {\n\t\tfunction testFixRegexNewline([inputReg, testStr, shouldMatch]: readonly [string, string, boolean]): void {\n\t\t\tconst fixed = fixRegexNewline(inputReg);\n\t\t\tconst reg = new RegExp(fixed);\n\t\t\tassert.strictEqual(reg.test(testStr), shouldMatch, `${inputReg} => ${reg}, ${testStr}, ${shouldMatch}`);\n\t\t}\n\n\t\t([\n\t\t\t['foo', 'foo', true],\n\n\t\t\t['foo\\\\n', 'foo\\r\\n', true],\n\t\t\t['foo\\\\n\\\\n', 'foo\\n\\n', true],\n\t\t\t['foo\\\\n\\\\n', 'foo\\r\\n\\r\\n', true],\n\t\t\t['foo\\\\n', 'foo\\n', true],\n\t\t\t['foo\\\\nabc', 'foo\\r\\nabc', true],\n\t\t\t['foo\\\\nabc', 'foo\\nabc', true],\n\t\t\t['foo\\\\r\\\\n', 'foo\\r\\n', true],\n\n\t\t\t['foo\\\\n+abc', 'foo\\r\\nabc', true],\n\t\t\t['foo\\\\n+abc', 'foo\\n\\n\\nabc', true],\n\t\t\t['foo\\\\n+abc', 'foo\\r\\n\\r\\n\\r\\nabc', true],\n\t\t\t['foo[\\\\n-9]+abc', 'foo1abc', true],\n\t\t] as const).forEach(testFixRegexNewline);\n\t});\n\n\ttest('fixNewline - matching', () => {\n\t\tfunction testFixNewline([inputReg, testStr, shouldMatch = true]: readonly [string, string, boolean?]): void {\n\t\t\tconst fixed = fixNewline(inputReg);\n\t\t\tconst reg = new RegExp(fixed);\n\t\t\tassert.strictEqual(reg.test(testStr), shouldMatch, `${inputReg} => ${reg}, ${testStr}, ${shouldMatch}`);\n\t\t}\n\n\t\t([\n\t\t\t['foo', 'foo'],\n\n\t\t\t['foo\\n', 'foo\\r\\n'],\n\t\t\t['foo\\n', 'foo\\n'],\n\t\t\t['foo\\nabc', 'foo\\r\\nabc'],\n\t\t\t['foo\\nabc', 'foo\\nabc'],\n\t\t\t['foo\\r\\n', 'foo\\r\\n'],\n\n\t\t\t['foo\\nbarc', 'foobar', false],\n\t\t\t['foobar', 'foo\\nbar', false],\n\t\t] as const).forEach(testFixNewline);\n\t});\n\n\tsuite('RipgrepParser', () => {\n\t\tconst TEST_FOLDER = URI.file('/foo/bar');\n\n\t\tfunction testParser(inputData: string[], expectedResults: TextSearchResult[]): void {\n\t\t\tconst testParser = new RipgrepParser(1000, TEST_FOLDER.fsPath);\n\n\t\t\tconst actualResults: TextSearchResult[] = [];\n\t\t\ttestParser.on('result', r => {\n\t\t\t\tactualResults.push(r);\n\t\t\t});\n\n\t\t\tinputData.forEach(d => testParser.handleData(d));\n\t\t\ttestParser.flush();\n\n\t\t\tassert.deepStrictEqual(actualResults, expectedResults);\n\t\t}\n\n\t\tfunction makeRgMatch(relativePath: string, text: string, lineNumber: number, matchRanges: { start: number, end: number }[]): string {\n\t\t\treturn JSON.stringify(<IRgMessage>{\n\t\t\t\ttype: 'match',\n\t\t\t\tdata: <IRgMatch>{\n\t\t\t\t\tpath: {\n\t\t\t\t\t\ttext: relativePath\n\t\t\t\t\t},\n\t\t\t\t\tlines: {\n\t\t\t\t\t\ttext\n\t\t\t\t\t},\n\t\t\t\t\tline_number: lineNumber,\n\t\t\t\t\tabsolute_offset: 0, // unused\n\t\t\t\t\tsubmatches: matchRanges.map(mr => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t...mr,\n\t\t\t\t\t\t\tmatch: { text: text.substring(mr.start, mr.end) }\n\t\t\t\t\t\t};\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}) + '\\n';\n\t\t}\n\n\t\ttest('single result', () => {\n\t\t\ttestParser(\n\t\t\t\t[\n\t\t\t\t\tmakeRgMatch('file1.js', 'foobar', 4, [{ start: 3, end: 6 }])\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\tpreview: {\n\t\t\t\t\t\t\ttext: 'foobar',\n\t\t\t\t\t\t\tmatches: [new Range(0, 3, 0, 6)]\n\t\t\t\t\t\t},\n\t\t\t\t\t\turi: joinPath(TEST_FOLDER, 'file1.js'),\n\t\t\t\t\t\tranges: [new Range(3, 3, 3, 6)]\n\t\t\t\t\t}\n\t\t\t\t]);\n\t\t});\n\n\t\ttest('multiple results', () => {\n\t\t\ttestParser(\n\t\t\t\t[\n\t\t\t\t\tmakeRgMatch('file1.js', 'foobar', 4, [{ start: 3, end: 6 }]),\n\t\t\t\t\tmakeRgMatch('app/file2.js', 'foobar', 4, [{ start: 3, end: 6 }]),\n\t\t\t\t\tmakeRgMatch('app2/file3.js', 'foobar', 4, [{ start: 3, end: 6 }]),\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\tpreview: {\n\t\t\t\t\t\t\ttext: 'foobar',\n\t\t\t\t\t\t\tmatches: [new Range(0, 3, 0, 6)]\n\t\t\t\t\t\t},\n\t\t\t\t\t\turi: joinPath(TEST_FOLDER, 'file1.js'),\n\t\t\t\t\t\tranges: [new Range(3, 3, 3, 6)]\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tpreview: {\n\t\t\t\t\t\t\ttext: 'foobar',\n\t\t\t\t\t\t\tmatches: [new Range(0, 3, 0, 6)]\n\t\t\t\t\t\t},\n\t\t\t\t\t\turi: joinPath(TEST_FOLDER, 'app/file2.js'),\n\t\t\t\t\t\tranges: [new Range(3, 3, 3, 6)]\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tpreview: {\n\t\t\t\t\t\t\ttext: 'foobar',\n\t\t\t\t\t\t\tmatches: [new Range(0, 3, 0, 6)]\n\t\t\t\t\t\t},\n\t\t\t\t\t\turi: joinPath(TEST_FOLDER, 'app2/file3.js'),\n\t\t\t\t\t\tranges: [new Range(3, 3, 3, 6)]\n\t\t\t\t\t}\n\t\t\t\t]);\n\t\t});\n\n\t\ttest('chopped-up input chunks', () => {\n\t\t\tconst dataStrs = [\n\t\t\t\tmakeRgMatch('file1.js', 'foo bar', 4, [{ start: 3, end: 7 }]),\n\t\t\t\tmakeRgMatch('app/file2.js', 'foobar', 4, [{ start: 3, end: 6 }]),\n\t\t\t\tmakeRgMatch('app2/file3.js', 'foobar', 4, [{ start: 3, end: 6 }]),\n\t\t\t];\n\n\t\t\tconst dataStr0Space = dataStrs[0].indexOf(' ');\n\t\t\ttestParser(\n\t\t\t\t[\n\t\t\t\t\tdataStrs[0].substring(0, dataStr0Space + 1),\n\t\t\t\t\tdataStrs[0].substring(dataStr0Space + 1),\n\t\t\t\t\t'\\n',\n\t\t\t\t\tdataStrs[1].trim(),\n\t\t\t\t\t'\\n' + dataStrs[2].substring(0, 25),\n\t\t\t\t\tdataStrs[2].substring(25)\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\tpreview: {\n\t\t\t\t\t\t\ttext: 'foo bar',\n\t\t\t\t\t\t\tmatches: [new Range(0, 3, 0, 7)]\n\t\t\t\t\t\t},\n\t\t\t\t\t\turi: joinPath(TEST_FOLDER, 'file1.js'),\n\t\t\t\t\t\tranges: [new Range(3, 3, 3, 7)]\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tpreview: {\n\t\t\t\t\t\t\ttext: 'foobar',\n\t\t\t\t\t\t\tmatches: [new Range(0, 3, 0, 6)]\n\t\t\t\t\t\t},\n\t\t\t\t\t\turi: joinPath(TEST_FOLDER, 'app/file2.js'),\n\t\t\t\t\t\tranges: [new Range(3, 3, 3, 6)]\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tpreview: {\n\t\t\t\t\t\t\ttext: 'foobar',\n\t\t\t\t\t\t\tmatches: [new Range(0, 3, 0, 6)]\n\t\t\t\t\t\t},\n\t\t\t\t\t\turi: joinPath(TEST_FOLDER, 'app2/file3.js'),\n\t\t\t\t\t\tranges: [new Range(3, 3, 3, 6)]\n\t\t\t\t\t}\n\t\t\t\t]);\n\t\t});\n\n\n\t\ttest('empty result (#100569)', () => {\n\t\t\ttestParser(\n\t\t\t\t[\n\t\t\t\t\tmakeRgMatch('file1.js', 'foobar', 4, []),\n\t\t\t\t\tmakeRgMatch('file1.js', '', 5, []),\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\tpreview: {\n\t\t\t\t\t\t\ttext: 'foobar',\n\t\t\t\t\t\t\tmatches: [new Range(0, 0, 0, 1)]\n\t\t\t\t\t\t},\n\t\t\t\t\t\turi: joinPath(TEST_FOLDER, 'file1.js'),\n\t\t\t\t\t\tranges: [new Range(3, 0, 3, 1)]\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tpreview: {\n\t\t\t\t\t\t\ttext: '',\n\t\t\t\t\t\t\tmatches: [new Range(0, 0, 0, 0)]\n\t\t\t\t\t\t},\n\t\t\t\t\t\turi: joinPath(TEST_FOLDER, 'file1.js'),\n\t\t\t\t\t\tranges: [new Range(4, 0, 4, 0)]\n\t\t\t\t\t}\n\t\t\t\t]);\n\t\t});\n\t});\n});\n"]}