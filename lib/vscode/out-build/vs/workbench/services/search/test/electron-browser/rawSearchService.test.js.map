{"version":3,"file":"rawSearchService.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/search/test/electron-browser/rawSearchService.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { CancelablePromise, createCancelablePromise } from 'vs/base/common/async';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport * as path from 'vs/base/common/path';\nimport { URI } from 'vs/base/common/uri';\nimport { IFileQuery, IFileSearchStats, IFolderQuery, IProgressMessage, IRawFileMatch, ISearchEngine, ISearchEngineStats, ISearchEngineSuccess, ISearchProgressItem, ISerializedFileMatch, ISerializedSearchComplete, ISerializedSearchProgressItem, ISerializedSearchSuccess, isFileMatch, QueryType } from 'vs/workbench/services/search/common/search';\nimport { IProgressCallback, SearchService as RawSearchService } from 'vs/workbench/services/search/node/rawSearchService';\nimport { DiskSearch } from 'vs/workbench/services/search/electron-browser/searchService';\nimport { flakySuite, getPathFromAmdModule } from 'vs/base/test/node/testUtils';\n\nconst TEST_FOLDER_QUERIES = [\n\t{ folder: URI.file(path.normalize('/some/where')) }\n];\n\nconst TEST_FIXTURES = path.normalize(getPathFromAmdModule(require, '../node/fixtures'));\nconst MULTIROOT_QUERIES: IFolderQuery[] = [\n\t{ folder: URI.file(path.join(TEST_FIXTURES, 'examples')) },\n\t{ folder: URI.file(path.join(TEST_FIXTURES, 'more')) }\n];\n\nconst stats: ISearchEngineStats = {\n\tfileWalkTime: 0,\n\tcmdTime: 1,\n\tdirectoriesWalked: 2,\n\tfilesWalked: 3\n};\n\nclass TestSearchEngine implements ISearchEngine<IRawFileMatch> {\n\n\tstatic last: TestSearchEngine;\n\n\tprivate isCanceled = false;\n\n\tconstructor(private result: () => IRawFileMatch | null, public config?: IFileQuery) {\n\t\tTestSearchEngine.last = this;\n\t}\n\n\tsearch(onResult: (match: IRawFileMatch) => void, onProgress: (progress: IProgressMessage) => void, done: (error: Error, complete: ISearchEngineSuccess) => void): void {\n\t\tconst self = this;\n\t\t(function next() {\n\t\t\tprocess.nextTick(() => {\n\t\t\t\tif (self.isCanceled) {\n\t\t\t\t\tdone(null!, {\n\t\t\t\t\t\tlimitHit: false,\n\t\t\t\t\t\tstats: stats,\n\t\t\t\t\t\tmessages: [],\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst result = self.result();\n\t\t\t\tif (!result) {\n\t\t\t\t\tdone(null!, {\n\t\t\t\t\t\tlimitHit: false,\n\t\t\t\t\t\tstats: stats,\n\t\t\t\t\t\tmessages: [],\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tonResult(result);\n\t\t\t\t\tnext();\n\t\t\t\t}\n\t\t\t});\n\t\t})();\n\t}\n\n\tcancel(): void {\n\t\tthis.isCanceled = true;\n\t}\n}\n\nflakySuite('RawSearchService', () => {\n\n\tconst rawSearch: IFileQuery = {\n\t\ttype: QueryType.File,\n\t\tfolderQueries: TEST_FOLDER_QUERIES,\n\t\tfilePattern: 'a'\n\t};\n\n\tconst rawMatch: IRawFileMatch = {\n\t\tbase: path.normalize('/some'),\n\t\trelativePath: 'where',\n\t\tsearchPath: undefined\n\t};\n\n\tconst match: ISerializedFileMatch = {\n\t\tpath: path.normalize('/some/where')\n\t};\n\n\ttest('Individual results', async function () {\n\t\tlet i = 5;\n\t\tconst Engine = TestSearchEngine.bind(null, () => i-- ? rawMatch : null);\n\t\tconst service = new RawSearchService();\n\n\t\tlet results = 0;\n\t\tconst cb: (p: ISerializedSearchProgressItem) => void = value => {\n\t\t\tif (!Array.isArray(value)) {\n\t\t\t\tassert.deepStrictEqual(value, match);\n\t\t\t\tresults++;\n\t\t\t} else {\n\t\t\t\tassert.fail(JSON.stringify(value));\n\t\t\t}\n\t\t};\n\n\t\tawait service.doFileSearchWithEngine(Engine, rawSearch, cb, null!, 0);\n\t\treturn assert.strictEqual(results, 5);\n\t});\n\n\ttest('Batch results', async function () {\n\t\tlet i = 25;\n\t\tconst Engine = TestSearchEngine.bind(null, () => i-- ? rawMatch : null);\n\t\tconst service = new RawSearchService();\n\n\t\tconst results: number[] = [];\n\t\tconst cb: (p: ISerializedSearchProgressItem) => void = value => {\n\t\t\tif (Array.isArray(value)) {\n\t\t\t\tvalue.forEach(m => {\n\t\t\t\t\tassert.deepStrictEqual(m, match);\n\t\t\t\t});\n\t\t\t\tresults.push(value.length);\n\t\t\t} else {\n\t\t\t\tassert.fail(JSON.stringify(value));\n\t\t\t}\n\t\t};\n\n\t\tawait service.doFileSearchWithEngine(Engine, rawSearch, cb, undefined, 10);\n\t\tassert.deepStrictEqual(results, [10, 10, 5]);\n\t});\n\n\ttest('Collect batched results', async function () {\n\t\tconst uriPath = '/some/where';\n\t\tlet i = 25;\n\t\tconst Engine = TestSearchEngine.bind(null, () => i-- ? rawMatch : null);\n\t\tconst service = new RawSearchService();\n\n\t\tfunction fileSearch(config: IFileQuery, batchSize: number): Event<ISerializedSearchProgressItem | ISerializedSearchComplete> {\n\t\t\tlet promise: CancelablePromise<ISerializedSearchSuccess | void>;\n\n\t\t\tconst emitter = new Emitter<ISerializedSearchProgressItem | ISerializedSearchComplete>({\n\t\t\t\tonFirstListenerAdd: () => {\n\t\t\t\t\tpromise = createCancelablePromise(token => service.doFileSearchWithEngine(Engine, config, p => emitter.fire(p), token, batchSize)\n\t\t\t\t\t\t.then(c => emitter.fire(c), err => emitter.fire({ type: 'error', error: err })));\n\t\t\t\t},\n\t\t\t\tonLastListenerRemove: () => {\n\t\t\t\t\tpromise.cancel();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn emitter.event;\n\t\t}\n\n\t\tconst progressResults: any[] = [];\n\t\tconst onProgress = (match: ISearchProgressItem) => {\n\t\t\tif (!isFileMatch(match)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tassert.strictEqual(match.resource.path, uriPath);\n\t\t\tprogressResults.push(match);\n\t\t};\n\n\t\tconst result_2 = await DiskSearch.collectResultsFromEvent(fileSearch(rawSearch, 10), onProgress);\n\t\tassert.strictEqual(result_2.results.length, 25, 'Result');\n\t\tassert.strictEqual(progressResults.length, 25, 'Progress');\n\t});\n\n\ttest('Multi-root with include pattern and maxResults', async function () {\n\t\tconst service = new RawSearchService();\n\n\t\tconst query: IFileQuery = {\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: MULTIROOT_QUERIES,\n\t\t\tmaxResults: 1,\n\t\t\tincludePattern: {\n\t\t\t\t'*.txt': true,\n\t\t\t\t'*.js': true\n\t\t\t},\n\t\t};\n\n\t\tconst result = await DiskSearch.collectResultsFromEvent(service.fileSearch(query));\n\t\tassert.strictEqual(result.results.length, 1, 'Result');\n\t});\n\n\ttest('Handles maxResults=0 correctly', async function () {\n\t\tconst service = new RawSearchService();\n\n\t\tconst query: IFileQuery = {\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: MULTIROOT_QUERIES,\n\t\t\tmaxResults: 0,\n\t\t\tsortByScore: true,\n\t\t\tincludePattern: {\n\t\t\t\t'*.txt': true,\n\t\t\t\t'*.js': true\n\t\t\t},\n\t\t};\n\n\t\tconst result = await DiskSearch.collectResultsFromEvent(service.fileSearch(query));\n\t\tassert.strictEqual(result.results.length, 0, 'Result');\n\t});\n\n\ttest('Multi-root with include pattern and exists', async function () {\n\t\tconst service = new RawSearchService();\n\n\t\tconst query: IFileQuery = {\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: MULTIROOT_QUERIES,\n\t\t\texists: true,\n\t\t\tincludePattern: {\n\t\t\t\t'*.txt': true,\n\t\t\t\t'*.js': true\n\t\t\t},\n\t\t};\n\n\t\tconst result = await DiskSearch.collectResultsFromEvent(service.fileSearch(query));\n\t\tassert.strictEqual(result.results.length, 0, 'Result');\n\t\tassert.ok(result.limitHit);\n\t});\n\n\ttest('Sorted results', async function () {\n\t\tconst paths = ['bab', 'bbc', 'abb'];\n\t\tconst matches: IRawFileMatch[] = paths.map(relativePath => ({\n\t\t\tbase: path.normalize('/some/where'),\n\t\t\trelativePath,\n\t\t\tbasename: relativePath,\n\t\t\tsize: 3,\n\t\t\tsearchPath: undefined\n\t\t}));\n\t\tconst Engine = TestSearchEngine.bind(null, () => matches.shift()!);\n\t\tconst service = new RawSearchService();\n\n\t\tconst results: any[] = [];\n\t\tconst cb: IProgressCallback = value => {\n\t\t\tif (Array.isArray(value)) {\n\t\t\t\tresults.push(...value.map(v => v.path));\n\t\t\t} else {\n\t\t\t\tassert.fail(JSON.stringify(value));\n\t\t\t}\n\t\t};\n\n\t\tawait service.doFileSearchWithEngine(Engine, {\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: TEST_FOLDER_QUERIES,\n\t\t\tfilePattern: 'bb',\n\t\t\tsortByScore: true,\n\t\t\tmaxResults: 2\n\t\t}, cb, undefined, 1);\n\t\tassert.notStrictEqual(typeof TestSearchEngine.last.config!.maxResults, 'number');\n\t\tassert.deepStrictEqual(results, [path.normalize('/some/where/bbc'), path.normalize('/some/where/bab')]);\n\t});\n\n\ttest('Sorted result batches', async function () {\n\t\tlet i = 25;\n\t\tconst Engine = TestSearchEngine.bind(null, () => i-- ? rawMatch : null);\n\t\tconst service = new RawSearchService();\n\n\t\tconst results: number[] = [];\n\t\tconst cb: IProgressCallback = value => {\n\t\t\tif (Array.isArray(value)) {\n\t\t\t\tvalue.forEach(m => {\n\t\t\t\t\tassert.deepStrictEqual(m, match);\n\t\t\t\t});\n\t\t\t\tresults.push(value.length);\n\t\t\t} else {\n\t\t\t\tassert.fail(JSON.stringify(value));\n\t\t\t}\n\t\t};\n\t\tawait service.doFileSearchWithEngine(Engine, {\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: TEST_FOLDER_QUERIES,\n\t\t\tfilePattern: 'a',\n\t\t\tsortByScore: true,\n\t\t\tmaxResults: 23\n\t\t}, cb, undefined, 10);\n\t\tassert.deepStrictEqual(results, [10, 10, 3]);\n\t});\n\n\ttest('Cached results', function () {\n\t\tconst paths = ['bcb', 'bbc', 'aab'];\n\t\tconst matches: IRawFileMatch[] = paths.map(relativePath => ({\n\t\t\tbase: path.normalize('/some/where'),\n\t\t\trelativePath,\n\t\t\tbasename: relativePath,\n\t\t\tsize: 3,\n\t\t\tsearchPath: undefined\n\t\t}));\n\t\tconst Engine = TestSearchEngine.bind(null, () => matches.shift()!);\n\t\tconst service = new RawSearchService();\n\n\t\tconst results: any[] = [];\n\t\tconst cb: IProgressCallback = value => {\n\t\t\tif (Array.isArray(value)) {\n\t\t\t\tresults.push(...value.map(v => v.path));\n\t\t\t} else {\n\t\t\t\tassert.fail(JSON.stringify(value));\n\t\t\t}\n\t\t};\n\t\treturn service.doFileSearchWithEngine(Engine, {\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: TEST_FOLDER_QUERIES,\n\t\t\tfilePattern: 'b',\n\t\t\tsortByScore: true,\n\t\t\tcacheKey: 'x'\n\t\t}, cb, undefined, -1).then(complete => {\n\t\t\tassert.strictEqual((<IFileSearchStats>complete.stats).fromCache, false);\n\t\t\tassert.deepStrictEqual(results, [path.normalize('/some/where/bcb'), path.normalize('/some/where/bbc'), path.normalize('/some/where/aab')]);\n\t\t}).then(async () => {\n\t\t\tconst results: any[] = [];\n\t\t\tconst cb: IProgressCallback = value => {\n\t\t\t\tif (Array.isArray(value)) {\n\t\t\t\t\tresults.push(...value.map(v => v.path));\n\t\t\t\t} else {\n\t\t\t\t\tassert.fail(JSON.stringify(value));\n\t\t\t\t}\n\t\t\t};\n\t\t\ttry {\n\t\t\t\tconst complete = await service.doFileSearchWithEngine(Engine, {\n\t\t\t\t\ttype: QueryType.File,\n\t\t\t\t\tfolderQueries: TEST_FOLDER_QUERIES,\n\t\t\t\t\tfilePattern: 'bc',\n\t\t\t\t\tsortByScore: true,\n\t\t\t\t\tcacheKey: 'x'\n\t\t\t\t}, cb, undefined, -1);\n\t\t\t\tassert.ok((<IFileSearchStats>complete.stats).fromCache);\n\t\t\t\tassert.deepStrictEqual(results, [path.normalize('/some/where/bcb'), path.normalize('/some/where/bbc')]);\n\t\t\t}\n\t\t\tcatch (e) { }\n\t\t}).then(() => {\n\t\t\treturn service.clearCache('x');\n\t\t}).then(async () => {\n\t\t\tmatches.push({\n\t\t\t\tbase: path.normalize('/some/where'),\n\t\t\t\trelativePath: 'bc',\n\t\t\t\tsearchPath: undefined\n\t\t\t});\n\t\t\tconst results: any[] = [];\n\t\t\tconst cb: IProgressCallback = value => {\n\t\t\t\tif (Array.isArray(value)) {\n\t\t\t\t\tresults.push(...value.map(v => v.path));\n\t\t\t\t} else {\n\t\t\t\t\tassert.fail(JSON.stringify(value));\n\t\t\t\t}\n\t\t\t};\n\t\t\tconst complete = await service.doFileSearchWithEngine(Engine, {\n\t\t\t\ttype: QueryType.File,\n\t\t\t\tfolderQueries: TEST_FOLDER_QUERIES,\n\t\t\t\tfilePattern: 'bc',\n\t\t\t\tsortByScore: true,\n\t\t\t\tcacheKey: 'x'\n\t\t\t}, cb, undefined, -1);\n\t\t\tassert.strictEqual((<IFileSearchStats>complete.stats).fromCache, false);\n\t\t\tassert.deepStrictEqual(results, [path.normalize('/some/where/bc')]);\n\t\t});\n\t});\n});\n"]}