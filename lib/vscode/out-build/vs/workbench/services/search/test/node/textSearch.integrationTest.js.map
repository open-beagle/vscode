{"version":3,"file":"textSearch.integrationTest.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/search/test/node/textSearch.integrationTest.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport * as path from 'vs/base/common/path';\nimport { CancellationTokenSource } from 'vs/base/common/cancellation';\nimport * as glob from 'vs/base/common/glob';\nimport { URI } from 'vs/base/common/uri';\nimport { deserializeSearchError, IFolderQuery, ISearchRange, ITextQuery, ITextSearchContext, ITextSearchMatch, QueryType, SearchErrorCode, ISerializedFileMatch } from 'vs/workbench/services/search/common/search';\nimport { TextSearchEngineAdapter } from 'vs/workbench/services/search/node/textSearchAdapter';\nimport { flakySuite, getPathFromAmdModule } from 'vs/base/test/node/testUtils';\n\nconst TEST_FIXTURES = path.normalize(getPathFromAmdModule(require, './fixtures'));\nconst EXAMPLES_FIXTURES = path.join(TEST_FIXTURES, 'examples');\nconst MORE_FIXTURES = path.join(TEST_FIXTURES, 'more');\nconst TEST_ROOT_FOLDER: IFolderQuery = { folder: URI.file(TEST_FIXTURES) };\nconst ROOT_FOLDER_QUERY: IFolderQuery[] = [\n\tTEST_ROOT_FOLDER\n];\n\nconst MULTIROOT_QUERIES: IFolderQuery[] = [\n\t{ folder: URI.file(EXAMPLES_FIXTURES) },\n\t{ folder: URI.file(MORE_FIXTURES) }\n];\n\nfunction doSearchTest(query: ITextQuery, expectedResultCount: number | Function): Promise<ISerializedFileMatch[]> {\n\tconst engine = new TextSearchEngineAdapter(query);\n\n\tlet c = 0;\n\tconst results: ISerializedFileMatch[] = [];\n\treturn engine.search(new CancellationTokenSource().token, _results => {\n\t\tif (_results) {\n\t\t\tc += _results.reduce((acc, cur) => acc + cur.numMatches!, 0);\n\t\t\tresults.push(..._results);\n\t\t}\n\t}, () => { }).then(() => {\n\t\tif (typeof expectedResultCount === 'function') {\n\t\t\tassert(expectedResultCount(c));\n\t\t} else {\n\t\t\tassert.strictEqual(c, expectedResultCount, `rg ${c} !== ${expectedResultCount}`);\n\t\t}\n\n\t\treturn results;\n\t});\n}\n\nflakySuite('TextSearch-integration', function () {\n\n\ttest('Text: GameOfLife', () => {\n\t\tconst config: ITextQuery = {\n\t\t\ttype: QueryType.Text,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tcontentPattern: { pattern: 'GameOfLife' },\n\t\t};\n\n\t\treturn doSearchTest(config, 4);\n\t});\n\n\ttest('Text: GameOfLife (RegExp)', () => {\n\t\tconst config: ITextQuery = {\n\t\t\ttype: QueryType.Text,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tcontentPattern: { pattern: 'Game.?fL\\\\w?fe', isRegExp: true }\n\t\t};\n\n\t\treturn doSearchTest(config, 4);\n\t});\n\n\ttest('Text: GameOfLife (unicode escape sequences)', () => {\n\t\tconst config: ITextQuery = {\n\t\t\ttype: QueryType.Text,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tcontentPattern: { pattern: 'G\\\\u{0061}m\\\\u0065OfLife', isRegExp: true }\n\t\t};\n\n\t\treturn doSearchTest(config, 4);\n\t});\n\n\ttest('Text: GameOfLife (unicode escape sequences, force PCRE2)', () => {\n\t\tconst config: ITextQuery = {\n\t\t\ttype: QueryType.Text,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tcontentPattern: { pattern: '(?<!a)G\\\\u{0061}m\\\\u0065OfLife', isRegExp: true }\n\t\t};\n\n\t\treturn doSearchTest(config, 4);\n\t});\n\n\ttest('Text: GameOfLife (PCRE2 RegExp)', () => {\n\t\tconst config: ITextQuery = {\n\t\t\ttype: QueryType.Text,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tusePCRE2: true,\n\t\t\tcontentPattern: { pattern: 'Life(?!P)', isRegExp: true }\n\t\t};\n\n\t\treturn doSearchTest(config, 8);\n\t});\n\n\ttest('Text: GameOfLife (RegExp to EOL)', () => {\n\t\tconst config: ITextQuery = {\n\t\t\ttype: QueryType.Text,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tcontentPattern: { pattern: 'GameOfLife.*', isRegExp: true }\n\t\t};\n\n\t\treturn doSearchTest(config, 4);\n\t});\n\n\ttest('Text: GameOfLife (Word Match, Case Sensitive)', () => {\n\t\tconst config: ITextQuery = {\n\t\t\ttype: QueryType.Text,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tcontentPattern: { pattern: 'GameOfLife', isWordMatch: true, isCaseSensitive: true }\n\t\t};\n\n\t\treturn doSearchTest(config, 4);\n\t});\n\n\ttest('Text: GameOfLife (Word Match, Spaces)', () => {\n\t\tconst config: ITextQuery = {\n\t\t\ttype: QueryType.Text,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tcontentPattern: { pattern: ' GameOfLife ', isWordMatch: true }\n\t\t};\n\n\t\treturn doSearchTest(config, 1);\n\t});\n\n\ttest('Text: GameOfLife (Word Match, Punctuation and Spaces)', () => {\n\t\tconst config: ITextQuery = {\n\t\t\ttype: QueryType.Text,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tcontentPattern: { pattern: ', as =', isWordMatch: true }\n\t\t};\n\n\t\treturn doSearchTest(config, 1);\n\t});\n\n\ttest('Text: Helvetica (UTF 16)', () => {\n\t\tconst config: ITextQuery = {\n\t\t\ttype: QueryType.Text,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tcontentPattern: { pattern: 'Helvetica' }\n\t\t};\n\n\t\treturn doSearchTest(config, 3);\n\t});\n\n\ttest('Text: e', () => {\n\t\tconst config: ITextQuery = {\n\t\t\ttype: QueryType.Text,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tcontentPattern: { pattern: 'e' }\n\t\t};\n\n\t\treturn doSearchTest(config, 788);\n\t});\n\n\ttest('Text: e (with excludes)', () => {\n\t\tconst config: any = {\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tcontentPattern: { pattern: 'e' },\n\t\t\texcludePattern: { '**/examples': true }\n\t\t};\n\n\t\treturn doSearchTest(config, 394);\n\t});\n\n\ttest('Text: e (with includes)', () => {\n\t\tconst config: any = {\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tcontentPattern: { pattern: 'e' },\n\t\t\tincludePattern: { '**/examples/**': true }\n\t\t};\n\n\t\treturn doSearchTest(config, 394);\n\t});\n\n\t// TODO\n\t// test('Text: e (with absolute path excludes)', () => {\n\t// \tconst config: any = {\n\t// \t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t// \t\tcontentPattern: { pattern: 'e' },\n\t// \t\texcludePattern: makeExpression(path.join(TEST_FIXTURES, '**/examples'))\n\t// \t};\n\n\t// \treturn doSearchTest(config, 394);\n\t// });\n\n\t// test('Text: e (with mixed absolute/relative path excludes)', () => {\n\t// \tconst config: any = {\n\t// \t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t// \t\tcontentPattern: { pattern: 'e' },\n\t// \t\texcludePattern: makeExpression(path.join(TEST_FIXTURES, '**/examples'), '*.css')\n\t// \t};\n\n\t// \treturn doSearchTest(config, 310);\n\t// });\n\n\ttest('Text: sibling exclude', () => {\n\t\tconst config: any = {\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tcontentPattern: { pattern: 'm' },\n\t\t\tincludePattern: makeExpression('**/site*'),\n\t\t\texcludePattern: { '*.css': { when: '$(basename).less' } }\n\t\t};\n\n\t\treturn doSearchTest(config, 1);\n\t});\n\n\ttest('Text: e (with includes and exclude)', () => {\n\t\tconst config: any = {\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tcontentPattern: { pattern: 'e' },\n\t\t\tincludePattern: { '**/examples/**': true },\n\t\t\texcludePattern: { '**/examples/small.js': true }\n\t\t};\n\n\t\treturn doSearchTest(config, 371);\n\t});\n\n\ttest('Text: a (capped)', () => {\n\t\tconst maxResults = 520;\n\t\tconst config: ITextQuery = {\n\t\t\ttype: QueryType.Text,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tcontentPattern: { pattern: 'a' },\n\t\t\tmaxResults\n\t\t};\n\n\t\treturn doSearchTest(config, maxResults);\n\t});\n\n\ttest('Text: a (no results)', () => {\n\t\tconst config: ITextQuery = {\n\t\t\ttype: QueryType.Text,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tcontentPattern: { pattern: 'ahsogehtdas' }\n\t\t};\n\n\t\treturn doSearchTest(config, 0);\n\t});\n\n\ttest('Text: -size', () => {\n\t\tconst config: ITextQuery = {\n\t\t\ttype: QueryType.Text,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tcontentPattern: { pattern: '-size' }\n\t\t};\n\n\t\treturn doSearchTest(config, 9);\n\t});\n\n\ttest('Multiroot: Conway', () => {\n\t\tconst config: ITextQuery = {\n\t\t\ttype: QueryType.Text,\n\t\t\tfolderQueries: MULTIROOT_QUERIES,\n\t\t\tcontentPattern: { pattern: 'conway' }\n\t\t};\n\n\t\treturn doSearchTest(config, 8);\n\t});\n\n\ttest('Multiroot: e with partial global exclude', () => {\n\t\tconst config: ITextQuery = {\n\t\t\ttype: QueryType.Text,\n\t\t\tfolderQueries: MULTIROOT_QUERIES,\n\t\t\tcontentPattern: { pattern: 'e' },\n\t\t\texcludePattern: makeExpression('**/*.txt')\n\t\t};\n\n\t\treturn doSearchTest(config, 394);\n\t});\n\n\ttest('Multiroot: e with global excludes', () => {\n\t\tconst config: ITextQuery = {\n\t\t\ttype: QueryType.Text,\n\t\t\tfolderQueries: MULTIROOT_QUERIES,\n\t\t\tcontentPattern: { pattern: 'e' },\n\t\t\texcludePattern: makeExpression('**/*.txt', '**/*.js')\n\t\t};\n\n\t\treturn doSearchTest(config, 0);\n\t});\n\n\ttest('Multiroot: e with folder exclude', () => {\n\t\tconst config: ITextQuery = {\n\t\t\ttype: QueryType.Text,\n\t\t\tfolderQueries: [\n\t\t\t\t{ folder: URI.file(EXAMPLES_FIXTURES), excludePattern: makeExpression('**/e*.js') },\n\t\t\t\t{ folder: URI.file(MORE_FIXTURES) }\n\t\t\t],\n\t\t\tcontentPattern: { pattern: 'e' }\n\t\t};\n\n\t\treturn doSearchTest(config, 298);\n\t});\n\n\ttest('Text: 语', () => {\n\t\tconst config: ITextQuery = {\n\t\t\ttype: QueryType.Text,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tcontentPattern: { pattern: '语' }\n\t\t};\n\n\t\treturn doSearchTest(config, 1).then(results => {\n\t\t\tconst matchRange = (<ITextSearchMatch>results[0].results![0]).ranges;\n\t\t\tassert.deepStrictEqual(matchRange, [{\n\t\t\t\tstartLineNumber: 0,\n\t\t\t\tstartColumn: 1,\n\t\t\t\tendLineNumber: 0,\n\t\t\t\tendColumn: 2\n\t\t\t}]);\n\t\t});\n\t});\n\n\ttest('Multiple matches on line: h\\\\d,', () => {\n\t\tconst config: ITextQuery = {\n\t\t\ttype: QueryType.Text,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tcontentPattern: { pattern: 'h\\\\d,', isRegExp: true }\n\t\t};\n\n\t\treturn doSearchTest(config, 15).then(results => {\n\t\t\tassert.strictEqual(results.length, 3);\n\t\t\tassert.strictEqual(results[0].results!.length, 1);\n\t\t\tconst match = <ITextSearchMatch>results[0].results![0];\n\t\t\tassert.strictEqual((<ISearchRange[]>match.ranges).length, 5);\n\t\t});\n\t});\n\n\ttest('Search with context matches', () => {\n\t\tconst config: ITextQuery = {\n\t\t\ttype: QueryType.Text,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tcontentPattern: { pattern: 'compiler.typeCheck();' },\n\t\t\tbeforeContext: 1,\n\t\t\tafterContext: 2\n\t\t};\n\n\t\treturn doSearchTest(config, 4).then(results => {\n\t\t\tassert.strictEqual(results.length, 4);\n\t\t\tassert.strictEqual((<ITextSearchContext>results[0].results![0]).lineNumber, 25);\n\t\t\tassert.strictEqual((<ITextSearchContext>results[0].results![0]).text, '        compiler.addUnit(prog,\"input.ts\");');\n\t\t\t// assert.strictEqual((<ITextSearchMatch>results[1].results[0]).preview.text, '        compiler.typeCheck();\\n'); // See https://github.com/BurntSushi/ripgrep/issues/1095\n\t\t\tassert.strictEqual((<ITextSearchContext>results[2].results![0]).lineNumber, 27);\n\t\t\tassert.strictEqual((<ITextSearchContext>results[2].results![0]).text, '        compiler.emit();');\n\t\t\tassert.strictEqual((<ITextSearchContext>results[3].results![0]).lineNumber, 28);\n\t\t\tassert.strictEqual((<ITextSearchContext>results[3].results![0]).text, '');\n\t\t});\n\t});\n\n\tsuite('error messages', () => {\n\t\ttest('invalid encoding', () => {\n\t\t\tconst config: ITextQuery = {\n\t\t\t\ttype: QueryType.Text,\n\t\t\t\tfolderQueries: [\n\t\t\t\t\t{\n\t\t\t\t\t\t...TEST_ROOT_FOLDER,\n\t\t\t\t\t\tfileEncoding: 'invalidEncoding'\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tcontentPattern: { pattern: 'test' },\n\t\t\t};\n\n\t\t\treturn doSearchTest(config, 0).then(() => {\n\t\t\t\tthrow new Error('expected fail');\n\t\t\t}, err => {\n\t\t\t\tconst searchError = deserializeSearchError(err);\n\t\t\t\tassert.strictEqual(searchError.message, 'Unknown encoding: invalidEncoding');\n\t\t\t\tassert.strictEqual(searchError.code, SearchErrorCode.unknownEncoding);\n\t\t\t});\n\t\t});\n\n\t\ttest('invalid regex case 1', () => {\n\t\t\tconst config: ITextQuery = {\n\t\t\t\ttype: QueryType.Text,\n\t\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\t\tcontentPattern: { pattern: ')', isRegExp: true },\n\t\t\t};\n\n\t\t\treturn doSearchTest(config, 0).then(() => {\n\t\t\t\tthrow new Error('expected fail');\n\t\t\t}, err => {\n\t\t\t\tconst searchError = deserializeSearchError(err);\n\t\t\t\tconst regexParseErrorForUnclosedParenthesis = 'Regex parse error: unmatched closing parenthesis';\n\t\t\t\tassert.strictEqual(searchError.message, regexParseErrorForUnclosedParenthesis);\n\t\t\t\tassert.strictEqual(searchError.code, SearchErrorCode.regexParseError);\n\t\t\t});\n\t\t});\n\n\t\ttest('invalid regex case 2', () => {\n\t\t\tconst config: ITextQuery = {\n\t\t\t\ttype: QueryType.Text,\n\t\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\t\tcontentPattern: { pattern: '(?<!a.*)', isRegExp: true },\n\t\t\t};\n\n\t\t\treturn doSearchTest(config, 0).then(() => {\n\t\t\t\tthrow new Error('expected fail');\n\t\t\t}, err => {\n\t\t\t\tconst searchError = deserializeSearchError(err);\n\t\t\t\tconst regexParseErrorForLookAround = 'Regex parse error: lookbehind assertion is not fixed length';\n\t\t\t\tassert.strictEqual(searchError.message, regexParseErrorForLookAround);\n\t\t\t\tassert.strictEqual(searchError.code, SearchErrorCode.regexParseError);\n\t\t\t});\n\t\t});\n\n\n\t\ttest('invalid glob', () => {\n\t\t\tconst config: ITextQuery = {\n\t\t\t\ttype: QueryType.Text,\n\t\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\t\tcontentPattern: { pattern: 'foo' },\n\t\t\t\tincludePattern: {\n\t\t\t\t\t'{{}': true\n\t\t\t\t}\n\t\t\t};\n\n\t\t\treturn doSearchTest(config, 0).then(() => {\n\t\t\t\tthrow new Error('expected fail');\n\t\t\t}, err => {\n\t\t\t\tconst searchError = deserializeSearchError(err);\n\t\t\t\tassert.strictEqual(searchError.message, 'Error parsing glob \\'/{{}\\': nested alternate groups are not allowed');\n\t\t\t\tassert.strictEqual(searchError.code, SearchErrorCode.globParseError);\n\t\t\t});\n\t\t});\n\t});\n});\n\nfunction makeExpression(...patterns: string[]): glob.IExpression {\n\treturn patterns.reduce((glob, pattern) => {\n\t\t// glob.ts needs forward slashes\n\t\tpattern = pattern.replace(/\\\\/g, '/');\n\t\tglob[pattern] = true;\n\t\treturn glob;\n\t}, Object.create(null));\n}\n"]}