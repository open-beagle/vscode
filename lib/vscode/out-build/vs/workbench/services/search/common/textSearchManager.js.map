{"version":3,"file":"textSearchManager.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/search/common/textSearchManager.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as path from 'vs/base/common/path';\nimport { flatten, mapArrayOrNot } from 'vs/base/common/arrays';\nimport { CancellationToken, CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { toErrorMessage } from 'vs/base/common/errorMessage';\nimport * as resources from 'vs/base/common/resources';\nimport * as glob from 'vs/base/common/glob';\nimport { URI } from 'vs/base/common/uri';\nimport { IExtendedExtensionSearchOptions, IFileMatch, IFolderQuery, IPatternInfo, ISearchCompleteStats, ITextQuery, ITextSearchContext, ITextSearchMatch, ITextSearchResult, QueryGlobTester, resolvePatternsForProvider } from 'vs/workbench/services/search/common/search';\nimport { TextSearchProvider, TextSearchResult, TextSearchMatch, TextSearchComplete, Range, TextSearchOptions, TextSearchQuery } from 'vs/workbench/services/search/common/searchExtTypes';\nimport { Schemas } from 'vs/base/common/network';\nimport { isArray } from 'vs/base/common/types';\n\nexport interface IFileUtils {\n\treaddir: (resource: URI) => Promise<string[]>;\n\ttoCanonicalName: (encoding: string) => string;\n}\n\nexport class TextSearchManager {\n\n\tprivate collector: TextSearchResultsCollector | null = null;\n\n\tprivate isLimitHit = false;\n\tprivate resultCount = 0;\n\n\tconstructor(private query: ITextQuery, private provider: TextSearchProvider, private fileUtils: IFileUtils) { }\n\n\tsearch(onProgress: (matches: IFileMatch[]) => void, token: CancellationToken): Promise<ISearchCompleteStats> {\n\t\tconst folderQueries = this.query.folderQueries || [];\n\t\tconst tokenSource = new CancellationTokenSource();\n\t\ttoken.onCancellationRequested(() => tokenSource.cancel());\n\n\t\treturn new Promise<ISearchCompleteStats>((resolve, reject) => {\n\t\t\tthis.collector = new TextSearchResultsCollector(onProgress);\n\n\t\t\tlet isCanceled = false;\n\t\t\tconst onResult = (result: TextSearchResult, folderIdx: number) => {\n\t\t\t\tif (isCanceled) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!this.isLimitHit) {\n\t\t\t\t\tconst resultSize = this.resultSize(result);\n\t\t\t\t\tif (extensionResultIsMatch(result) && typeof this.query.maxResults === 'number' && this.resultCount + resultSize > this.query.maxResults) {\n\t\t\t\t\t\tthis.isLimitHit = true;\n\t\t\t\t\t\tisCanceled = true;\n\t\t\t\t\t\ttokenSource.cancel();\n\n\t\t\t\t\t\tresult = this.trimResultToSize(result, this.query.maxResults - this.resultCount);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst newResultSize = this.resultSize(result);\n\t\t\t\t\tthis.resultCount += newResultSize;\n\t\t\t\t\tif (newResultSize > 0 || !extensionResultIsMatch(result)) {\n\t\t\t\t\t\tthis.collector!.add(result, folderIdx);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// For each root folder\n\t\t\tPromise.all(folderQueries.map((fq, i) => {\n\t\t\t\treturn this.searchInFolder(fq, r => onResult(r, i), tokenSource.token);\n\t\t\t})).then(results => {\n\t\t\t\ttokenSource.dispose();\n\t\t\t\tthis.collector!.flush();\n\n\t\t\t\tconst someFolderHitLImit = results.some(result => !!result && !!result.limitHit);\n\t\t\t\tresolve({\n\t\t\t\t\tlimitHit: this.isLimitHit || someFolderHitLImit,\n\t\t\t\t\tmessages: flatten(results.map(result => {\n\t\t\t\t\t\tif (!result?.message) { return []; }\n\t\t\t\t\t\tif (isArray(result.message)) { return result.message; }\n\t\t\t\t\t\telse { return [result.message]; }\n\t\t\t\t\t})),\n\t\t\t\t\tstats: {\n\t\t\t\t\t\ttype: 'textSearchProvider'\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}, (err: Error) => {\n\t\t\t\ttokenSource.dispose();\n\t\t\t\tconst errMsg = toErrorMessage(err);\n\t\t\t\treject(new Error(errMsg));\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate resultSize(result: TextSearchResult): number {\n\t\tif (extensionResultIsMatch(result)) {\n\t\t\treturn Array.isArray(result.ranges) ?\n\t\t\t\tresult.ranges.length :\n\t\t\t\t1;\n\t\t}\n\t\telse {\n\t\t\t// #104400 context lines shoudn't count towards result count\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tprivate trimResultToSize(result: TextSearchMatch, size: number): TextSearchMatch {\n\t\tconst rangesArr = Array.isArray(result.ranges) ? result.ranges : [result.ranges];\n\t\tconst matchesArr = Array.isArray(result.preview.matches) ? result.preview.matches : [result.preview.matches];\n\n\t\treturn {\n\t\t\tranges: rangesArr.slice(0, size),\n\t\t\tpreview: {\n\t\t\t\tmatches: matchesArr.slice(0, size),\n\t\t\t\ttext: result.preview.text\n\t\t\t},\n\t\t\turi: result.uri\n\t\t};\n\t}\n\n\tprivate async searchInFolder(folderQuery: IFolderQuery<URI>, onResult: (result: TextSearchResult) => void, token: CancellationToken): Promise<TextSearchComplete | null | undefined> {\n\t\tconst queryTester = new QueryGlobTester(this.query, folderQuery);\n\t\tconst testingPs: Promise<void>[] = [];\n\t\tconst progress = {\n\t\t\treport: (result: TextSearchResult) => {\n\t\t\t\tif (!this.validateProviderResult(result)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst hasSibling = folderQuery.folder.scheme === Schemas.file ?\n\t\t\t\t\tglob.hasSiblingPromiseFn(() => {\n\t\t\t\t\t\treturn this.fileUtils.readdir(resources.dirname(result.uri));\n\t\t\t\t\t}) :\n\t\t\t\t\tundefined;\n\n\t\t\t\tconst relativePath = resources.relativePath(folderQuery.folder, result.uri);\n\t\t\t\tif (relativePath) {\n\t\t\t\t\ttestingPs.push(\n\t\t\t\t\t\tqueryTester.includedInQuery(relativePath, path.basename(relativePath), hasSibling)\n\t\t\t\t\t\t\t.then(included => {\n\t\t\t\t\t\t\t\tif (included) {\n\t\t\t\t\t\t\t\t\tonResult(result);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tconst searchOptions = this.getSearchOptionsForFolder(folderQuery);\n\t\tconst result = await this.provider.provideTextSearchResults(patternInfoToQuery(this.query.contentPattern), searchOptions, progress, token);\n\t\tawait Promise.all(testingPs);\n\t\treturn result;\n\t}\n\n\tprivate validateProviderResult(result: TextSearchResult): boolean {\n\t\tif (extensionResultIsMatch(result)) {\n\t\t\tif (Array.isArray(result.ranges)) {\n\t\t\t\tif (!Array.isArray(result.preview.matches)) {\n\t\t\t\t\tconsole.warn('INVALID - A text search provider match\\'s`ranges` and`matches` properties must have the same type.');\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif ((<Range[]>result.preview.matches).length !== result.ranges.length) {\n\t\t\t\t\tconsole.warn('INVALID - A text search provider match\\'s`ranges` and`matches` properties must have the same length.');\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (Array.isArray(result.preview.matches)) {\n\t\t\t\t\tconsole.warn('INVALID - A text search provider match\\'s`ranges` and`matches` properties must have the same length.');\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate getSearchOptionsForFolder(fq: IFolderQuery<URI>): TextSearchOptions {\n\t\tconst includes = resolvePatternsForProvider(this.query.includePattern, fq.includePattern);\n\t\tconst excludes = resolvePatternsForProvider(this.query.excludePattern, fq.excludePattern);\n\n\t\tconst options = <TextSearchOptions>{\n\t\t\tfolder: URI.from(fq.folder),\n\t\t\texcludes,\n\t\t\tincludes,\n\t\t\tuseIgnoreFiles: !fq.disregardIgnoreFiles,\n\t\t\tuseGlobalIgnoreFiles: !fq.disregardGlobalIgnoreFiles,\n\t\t\tfollowSymlinks: !fq.ignoreSymlinks,\n\t\t\tencoding: fq.fileEncoding && this.fileUtils.toCanonicalName(fq.fileEncoding),\n\t\t\tmaxFileSize: this.query.maxFileSize,\n\t\t\tmaxResults: this.query.maxResults,\n\t\t\tpreviewOptions: this.query.previewOptions,\n\t\t\tafterContext: this.query.afterContext,\n\t\t\tbeforeContext: this.query.beforeContext\n\t\t};\n\t\t(<IExtendedExtensionSearchOptions>options).usePCRE2 = this.query.usePCRE2;\n\t\treturn options;\n\t}\n}\n\nfunction patternInfoToQuery(patternInfo: IPatternInfo): TextSearchQuery {\n\treturn <TextSearchQuery>{\n\t\tisCaseSensitive: patternInfo.isCaseSensitive || false,\n\t\tisRegExp: patternInfo.isRegExp || false,\n\t\tisWordMatch: patternInfo.isWordMatch || false,\n\t\tisMultiline: patternInfo.isMultiline || false,\n\t\tpattern: patternInfo.pattern\n\t};\n}\n\nexport class TextSearchResultsCollector {\n\tprivate _batchedCollector: BatchedCollector<IFileMatch>;\n\n\tprivate _currentFolderIdx: number = -1;\n\tprivate _currentUri: URI | undefined;\n\tprivate _currentFileMatch: IFileMatch | null = null;\n\n\tconstructor(private _onResult: (result: IFileMatch[]) => void) {\n\t\tthis._batchedCollector = new BatchedCollector<IFileMatch>(512, items => this.sendItems(items));\n\t}\n\n\tadd(data: TextSearchResult, folderIdx: number): void {\n\t\t// Collects TextSearchResults into IInternalFileMatches and collates using BatchedCollector.\n\t\t// This is efficient for ripgrep which sends results back one file at a time. It wouldn't be efficient for other search\n\t\t// providers that send results in random order. We could do this step afterwards instead.\n\t\tif (this._currentFileMatch && (this._currentFolderIdx !== folderIdx || !resources.isEqual(this._currentUri, data.uri))) {\n\t\t\tthis.pushToCollector();\n\t\t\tthis._currentFileMatch = null;\n\t\t}\n\n\t\tif (!this._currentFileMatch) {\n\t\t\tthis._currentFolderIdx = folderIdx;\n\t\t\tthis._currentFileMatch = {\n\t\t\t\tresource: data.uri,\n\t\t\t\tresults: []\n\t\t\t};\n\t\t}\n\n\t\tthis._currentFileMatch.results!.push(extensionResultToFrontendResult(data));\n\t}\n\n\tprivate pushToCollector(): void {\n\t\tconst size = this._currentFileMatch && this._currentFileMatch.results ?\n\t\t\tthis._currentFileMatch.results.length :\n\t\t\t0;\n\t\tthis._batchedCollector.addItem(this._currentFileMatch!, size);\n\t}\n\n\tflush(): void {\n\t\tthis.pushToCollector();\n\t\tthis._batchedCollector.flush();\n\t}\n\n\tprivate sendItems(items: IFileMatch[]): void {\n\t\tthis._onResult(items);\n\t}\n}\n\nfunction extensionResultToFrontendResult(data: TextSearchResult): ITextSearchResult {\n\t// Warning: result from RipgrepTextSearchEH has fake Range. Don't depend on any other props beyond these...\n\tif (extensionResultIsMatch(data)) {\n\t\treturn <ITextSearchMatch>{\n\t\t\tpreview: {\n\t\t\t\tmatches: mapArrayOrNot(data.preview.matches, m => ({\n\t\t\t\t\tstartLineNumber: m.start.line,\n\t\t\t\t\tstartColumn: m.start.character,\n\t\t\t\t\tendLineNumber: m.end.line,\n\t\t\t\t\tendColumn: m.end.character\n\t\t\t\t})),\n\t\t\t\ttext: data.preview.text\n\t\t\t},\n\t\t\tranges: mapArrayOrNot(data.ranges, r => ({\n\t\t\t\tstartLineNumber: r.start.line,\n\t\t\t\tstartColumn: r.start.character,\n\t\t\t\tendLineNumber: r.end.line,\n\t\t\t\tendColumn: r.end.character\n\t\t\t}))\n\t\t};\n\t} else {\n\t\treturn <ITextSearchContext>{\n\t\t\ttext: data.text,\n\t\t\tlineNumber: data.lineNumber\n\t\t};\n\t}\n}\n\nexport function extensionResultIsMatch(data: TextSearchResult): data is TextSearchMatch {\n\treturn !!(<TextSearchMatch>data).preview;\n}\n\n/**\n * Collects items that have a size - before the cumulative size of collected items reaches START_BATCH_AFTER_COUNT, the callback is called for every\n * set of items collected.\n * But after that point, the callback is called with batches of maxBatchSize.\n * If the batch isn't filled within some time, the callback is also called.\n */\nexport class BatchedCollector<T> {\n\tprivate static readonly TIMEOUT = 4000;\n\n\t// After START_BATCH_AFTER_COUNT items have been collected, stop flushing on timeout\n\tprivate static readonly START_BATCH_AFTER_COUNT = 50;\n\n\tprivate totalNumberCompleted = 0;\n\tprivate batch: T[] = [];\n\tprivate batchSize = 0;\n\tprivate timeoutHandle: any;\n\n\tconstructor(private maxBatchSize: number, private cb: (items: T[]) => void) {\n\t}\n\n\taddItem(item: T, size: number): void {\n\t\tif (!item) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.addItemToBatch(item, size);\n\t}\n\n\taddItems(items: T[], size: number): void {\n\t\tif (!items) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.addItemsToBatch(items, size);\n\t}\n\n\tprivate addItemToBatch(item: T, size: number): void {\n\t\tthis.batch.push(item);\n\t\tthis.batchSize += size;\n\t\tthis.onUpdate();\n\t}\n\n\tprivate addItemsToBatch(item: T[], size: number): void {\n\t\tthis.batch = this.batch.concat(item);\n\t\tthis.batchSize += size;\n\t\tthis.onUpdate();\n\t}\n\n\tprivate onUpdate(): void {\n\t\tif (this.totalNumberCompleted < BatchedCollector.START_BATCH_AFTER_COUNT) {\n\t\t\t// Flush because we aren't batching yet\n\t\t\tthis.flush();\n\t\t} else if (this.batchSize >= this.maxBatchSize) {\n\t\t\t// Flush because the batch is full\n\t\t\tthis.flush();\n\t\t} else if (!this.timeoutHandle) {\n\t\t\t// No timeout running, start a timeout to flush\n\t\t\tthis.timeoutHandle = setTimeout(() => {\n\t\t\t\tthis.flush();\n\t\t\t}, BatchedCollector.TIMEOUT);\n\t\t}\n\t}\n\n\tflush(): void {\n\t\tif (this.batchSize) {\n\t\t\tthis.totalNumberCompleted += this.batchSize;\n\t\t\tthis.cb(this.batch);\n\t\t\tthis.batch = [];\n\t\t\tthis.batchSize = 0;\n\n\t\t\tif (this.timeoutHandle) {\n\t\t\t\tclearTimeout(this.timeoutHandle);\n\t\t\t\tthis.timeoutHandle = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n"]}