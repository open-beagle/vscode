{"version":3,"file":"fileSearchManager.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/search/common/fileSearchManager.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as path from 'vs/base/common/path';\nimport { CancellationToken, CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { toErrorMessage } from 'vs/base/common/errorMessage';\nimport * as glob from 'vs/base/common/glob';\nimport * as resources from 'vs/base/common/resources';\nimport { StopWatch } from 'vs/base/common/stopwatch';\nimport { URI } from 'vs/base/common/uri';\nimport { IFileMatch, IFileSearchProviderStats, IFolderQuery, ISearchCompleteStats, IFileQuery, QueryGlobTester, resolvePatternsForProvider } from 'vs/workbench/services/search/common/search';\nimport { FileSearchProvider, FileSearchOptions } from 'vs/workbench/services/search/common/searchExtTypes';\n\nexport interface IInternalFileMatch {\n\tbase: URI;\n\toriginal?: URI;\n\trelativePath?: string; // Not present for extraFiles or absolute path matches\n\tbasename: string;\n\tsize?: number;\n}\n\nexport interface IDirectoryEntry {\n\tbase: URI;\n\trelativePath: string;\n\tbasename: string;\n}\n\nexport interface IDirectoryTree {\n\trootEntries: IDirectoryEntry[];\n\tpathToEntries: { [relativePath: string]: IDirectoryEntry[] };\n}\n\nclass FileSearchEngine {\n\tprivate filePattern?: string;\n\tprivate includePattern?: glob.ParsedExpression;\n\tprivate maxResults?: number;\n\tprivate exists?: boolean;\n\tprivate isLimitHit = false;\n\tprivate resultCount = 0;\n\tprivate isCanceled = false;\n\n\tprivate activeCancellationTokens: Set<CancellationTokenSource>;\n\n\tprivate globalExcludePattern?: glob.ParsedExpression;\n\n\tconstructor(private config: IFileQuery, private provider: FileSearchProvider, private sessionToken?: CancellationToken) {\n\t\tthis.filePattern = config.filePattern;\n\t\tthis.includePattern = config.includePattern && glob.parse(config.includePattern);\n\t\tthis.maxResults = config.maxResults || undefined;\n\t\tthis.exists = config.exists;\n\t\tthis.activeCancellationTokens = new Set<CancellationTokenSource>();\n\n\t\tthis.globalExcludePattern = config.excludePattern && glob.parse(config.excludePattern);\n\t}\n\n\tcancel(): void {\n\t\tthis.isCanceled = true;\n\t\tthis.activeCancellationTokens.forEach(t => t.cancel());\n\t\tthis.activeCancellationTokens = new Set();\n\t}\n\n\tsearch(_onResult: (match: IInternalFileMatch) => void): Promise<IInternalSearchComplete> {\n\t\tconst folderQueries = this.config.folderQueries || [];\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst onResult = (match: IInternalFileMatch) => {\n\t\t\t\tthis.resultCount++;\n\t\t\t\t_onResult(match);\n\t\t\t};\n\n\t\t\t// Support that the file pattern is a full path to a file that exists\n\t\t\tif (this.isCanceled) {\n\t\t\t\treturn resolve({ limitHit: this.isLimitHit });\n\t\t\t}\n\n\t\t\t// For each extra file\n\t\t\tif (this.config.extraFileResources) {\n\t\t\t\tthis.config.extraFileResources\n\t\t\t\t\t.forEach(extraFile => {\n\t\t\t\t\t\tconst extraFileStr = extraFile.toString(); // ?\n\t\t\t\t\t\tconst basename = path.basename(extraFileStr);\n\t\t\t\t\t\tif (this.globalExcludePattern && this.globalExcludePattern(extraFileStr, basename)) {\n\t\t\t\t\t\t\treturn; // excluded\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// File: Check for match on file pattern and include pattern\n\t\t\t\t\t\tthis.matchFile(onResult, { base: extraFile, basename });\n\t\t\t\t\t});\n\t\t\t}\n\n\t\t\t// For each root folder\n\t\t\tPromise.all(folderQueries.map(fq => {\n\t\t\t\treturn this.searchInFolder(fq, onResult);\n\t\t\t})).then(stats => {\n\t\t\t\tresolve({\n\t\t\t\t\tlimitHit: this.isLimitHit,\n\t\t\t\t\tstats: stats[0] || undefined // Only looking at single-folder workspace stats...\n\t\t\t\t});\n\t\t\t}, (err: Error) => {\n\t\t\t\treject(new Error(toErrorMessage(err)));\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate async searchInFolder(fq: IFolderQuery<URI>, onResult: (match: IInternalFileMatch) => void): Promise<IFileSearchProviderStats | null> {\n\t\tconst cancellation = new CancellationTokenSource();\n\t\tconst options = this.getSearchOptionsForFolder(fq);\n\t\tconst tree = this.initDirectoryTree();\n\n\t\tconst queryTester = new QueryGlobTester(this.config, fq);\n\t\tconst noSiblingsClauses = !queryTester.hasSiblingExcludeClauses();\n\n\t\tlet providerSW: StopWatch;\n\n\t\ttry {\n\t\t\tthis.activeCancellationTokens.add(cancellation);\n\n\t\t\tproviderSW = StopWatch.create();\n\t\t\tconst results = await this.provider.provideFileSearchResults(\n\t\t\t\t{\n\t\t\t\t\tpattern: this.config.filePattern || ''\n\t\t\t\t},\n\t\t\t\toptions,\n\t\t\t\tcancellation.token);\n\t\t\tconst providerTime = providerSW.elapsed();\n\t\t\tconst postProcessSW = StopWatch.create();\n\n\t\t\tif (this.isCanceled && !this.isLimitHit) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif (results) {\n\t\t\t\tresults.forEach(result => {\n\t\t\t\t\tconst relativePath = path.posix.relative(fq.folder.path, result.path);\n\n\t\t\t\t\tif (noSiblingsClauses) {\n\t\t\t\t\t\tconst basename = path.basename(result.path);\n\t\t\t\t\t\tthis.matchFile(onResult, { base: fq.folder, relativePath, basename });\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// TODO: Optimize siblings clauses with ripgrep here.\n\t\t\t\t\tthis.addDirectoryEntries(tree, fq.folder, relativePath, onResult);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (this.isCanceled && !this.isLimitHit) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tthis.matchDirectoryTree(tree, queryTester, onResult);\n\t\t\treturn <IFileSearchProviderStats>{\n\t\t\t\tproviderTime,\n\t\t\t\tpostProcessTime: postProcessSW.elapsed()\n\t\t\t};\n\t\t} finally {\n\t\t\tcancellation.dispose();\n\t\t\tthis.activeCancellationTokens.delete(cancellation);\n\t\t}\n\t}\n\n\tprivate getSearchOptionsForFolder(fq: IFolderQuery<URI>): FileSearchOptions {\n\t\tconst includes = resolvePatternsForProvider(this.config.includePattern, fq.includePattern);\n\t\tconst excludes = resolvePatternsForProvider(this.config.excludePattern, fq.excludePattern);\n\n\t\treturn {\n\t\t\tfolder: fq.folder,\n\t\t\texcludes,\n\t\t\tincludes,\n\t\t\tuseIgnoreFiles: !fq.disregardIgnoreFiles,\n\t\t\tuseGlobalIgnoreFiles: !fq.disregardGlobalIgnoreFiles,\n\t\t\tfollowSymlinks: !fq.ignoreSymlinks,\n\t\t\tmaxResults: this.config.maxResults,\n\t\t\tsession: this.sessionToken\n\t\t};\n\t}\n\n\tprivate initDirectoryTree(): IDirectoryTree {\n\t\tconst tree: IDirectoryTree = {\n\t\t\trootEntries: [],\n\t\t\tpathToEntries: Object.create(null)\n\t\t};\n\t\ttree.pathToEntries['.'] = tree.rootEntries;\n\t\treturn tree;\n\t}\n\n\tprivate addDirectoryEntries({ pathToEntries }: IDirectoryTree, base: URI, relativeFile: string, onResult: (result: IInternalFileMatch) => void) {\n\t\t// Support relative paths to files from a root resource (ignores excludes)\n\t\tif (relativeFile === this.filePattern) {\n\t\t\tconst basename = path.basename(this.filePattern);\n\t\t\tthis.matchFile(onResult, { base: base, relativePath: this.filePattern, basename });\n\t\t}\n\n\t\tfunction add(relativePath: string) {\n\t\t\tconst basename = path.basename(relativePath);\n\t\t\tconst dirname = path.dirname(relativePath);\n\t\t\tlet entries = pathToEntries[dirname];\n\t\t\tif (!entries) {\n\t\t\t\tentries = pathToEntries[dirname] = [];\n\t\t\t\tadd(dirname);\n\t\t\t}\n\t\t\tentries.push({\n\t\t\t\tbase,\n\t\t\t\trelativePath,\n\t\t\t\tbasename\n\t\t\t});\n\t\t}\n\n\t\tadd(relativeFile);\n\t}\n\n\tprivate matchDirectoryTree({ rootEntries, pathToEntries }: IDirectoryTree, queryTester: QueryGlobTester, onResult: (result: IInternalFileMatch) => void) {\n\t\tconst self = this;\n\t\tconst filePattern = this.filePattern;\n\t\tfunction matchDirectory(entries: IDirectoryEntry[]) {\n\t\t\tconst hasSibling = glob.hasSiblingFn(() => entries.map(entry => entry.basename));\n\t\t\tfor (let i = 0, n = entries.length; i < n; i++) {\n\t\t\t\tconst entry = entries[i];\n\t\t\t\tconst { relativePath, basename } = entry;\n\n\t\t\t\t// Check exclude pattern\n\t\t\t\t// If the user searches for the exact file name, we adjust the glob matching\n\t\t\t\t// to ignore filtering by siblings because the user seems to know what she\n\t\t\t\t// is searching for and we want to include the result in that case anyway\n\t\t\t\tif (!queryTester.includedInQuerySync(relativePath, basename, filePattern !== basename ? hasSibling : undefined)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst sub = pathToEntries[relativePath];\n\t\t\t\tif (sub) {\n\t\t\t\t\tmatchDirectory(sub);\n\t\t\t\t} else {\n\t\t\t\t\tif (relativePath === filePattern) {\n\t\t\t\t\t\tcontinue; // ignore file if its path matches with the file pattern because that is already matched above\n\t\t\t\t\t}\n\n\t\t\t\t\tself.matchFile(onResult, entry);\n\t\t\t\t}\n\n\t\t\t\tif (self.isLimitHit) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tmatchDirectory(rootEntries);\n\t}\n\n\tprivate matchFile(onResult: (result: IInternalFileMatch) => void, candidate: IInternalFileMatch): void {\n\t\tif (!this.includePattern || (candidate.relativePath && this.includePattern(candidate.relativePath, candidate.basename))) {\n\t\t\tif (this.exists || (this.maxResults && this.resultCount >= this.maxResults)) {\n\t\t\t\tthis.isLimitHit = true;\n\t\t\t\tthis.cancel();\n\t\t\t}\n\n\t\t\tif (!this.isLimitHit) {\n\t\t\t\tonResult(candidate);\n\t\t\t}\n\t\t}\n\t}\n}\n\ninterface IInternalSearchComplete {\n\tlimitHit: boolean;\n\tstats?: IFileSearchProviderStats;\n}\n\nexport class FileSearchManager {\n\n\tprivate static readonly BATCH_SIZE = 512;\n\n\tprivate readonly sessions = new Map<string, CancellationTokenSource>();\n\n\tfileSearch(config: IFileQuery, provider: FileSearchProvider, onBatch: (matches: IFileMatch[]) => void, token: CancellationToken): Promise<ISearchCompleteStats> {\n\t\tconst sessionTokenSource = this.getSessionTokenSource(config.cacheKey);\n\t\tconst engine = new FileSearchEngine(config, provider, sessionTokenSource && sessionTokenSource.token);\n\n\t\tlet resultCount = 0;\n\t\tconst onInternalResult = (batch: IInternalFileMatch[]) => {\n\t\t\tresultCount += batch.length;\n\t\t\tonBatch(batch.map(m => this.rawMatchToSearchItem(m)));\n\t\t};\n\n\t\treturn this.doSearch(engine, FileSearchManager.BATCH_SIZE, onInternalResult, token).then(\n\t\t\tresult => {\n\t\t\t\treturn <ISearchCompleteStats>{\n\t\t\t\t\tlimitHit: result.limitHit,\n\t\t\t\t\tstats: {\n\t\t\t\t\t\tfromCache: false,\n\t\t\t\t\t\ttype: 'fileSearchProvider',\n\t\t\t\t\t\tresultCount,\n\t\t\t\t\t\tdetailStats: result.stats\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t});\n\t}\n\n\tclearCache(cacheKey: string): void {\n\t\tconst sessionTokenSource = this.getSessionTokenSource(cacheKey);\n\t\tif (sessionTokenSource) {\n\t\t\tsessionTokenSource.cancel();\n\t\t}\n\t}\n\n\tprivate getSessionTokenSource(cacheKey: string | undefined): CancellationTokenSource | undefined {\n\t\tif (!cacheKey) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (!this.sessions.has(cacheKey)) {\n\t\t\tthis.sessions.set(cacheKey, new CancellationTokenSource());\n\t\t}\n\n\t\treturn this.sessions.get(cacheKey);\n\t}\n\n\tprivate rawMatchToSearchItem(match: IInternalFileMatch): IFileMatch {\n\t\tif (match.relativePath) {\n\t\t\treturn {\n\t\t\t\tresource: resources.joinPath(match.base, match.relativePath)\n\t\t\t};\n\t\t} else {\n\t\t\t// extraFileResources\n\t\t\treturn {\n\t\t\t\tresource: match.base\n\t\t\t};\n\t\t}\n\t}\n\n\tprivate doSearch(engine: FileSearchEngine, batchSize: number, onResultBatch: (matches: IInternalFileMatch[]) => void, token: CancellationToken): Promise<IInternalSearchComplete> {\n\t\ttoken.onCancellationRequested(() => {\n\t\t\tengine.cancel();\n\t\t});\n\n\t\tconst _onResult = (match: IInternalFileMatch) => {\n\t\t\tif (match) {\n\t\t\t\tbatch.push(match);\n\t\t\t\tif (batchSize > 0 && batch.length >= batchSize) {\n\t\t\t\t\tonResultBatch(batch);\n\t\t\t\t\tbatch = [];\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tlet batch: IInternalFileMatch[] = [];\n\t\treturn engine.search(_onResult).then(result => {\n\t\t\tif (batch.length) {\n\t\t\t\tonResultBatch(batch);\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}, error => {\n\t\t\tif (batch.length) {\n\t\t\t\tonResultBatch(batch);\n\t\t\t}\n\n\t\t\treturn Promise.reject(error);\n\t\t});\n\t}\n}\n"]}