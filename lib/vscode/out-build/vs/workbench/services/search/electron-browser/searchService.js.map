{"version":3,"file":"searchService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/search/electron-browser/searchService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { canceled } from 'vs/base/common/errors';\nimport { Event } from 'vs/base/common/event';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { URI as uri } from 'vs/base/common/uri';\nimport { getNextTickChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { Client, IIPCOptions } from 'vs/base/parts/ipc/node/ipc.cp';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IDebugParams } from 'vs/platform/environment/common/environment';\nimport { INativeWorkbenchEnvironmentService } from 'vs/workbench/services/environment/electron-sandbox/environmentService';\nimport { parseSearchPort } from 'vs/platform/environment/common/environmentService';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { FileMatch, IFileMatch, IFileQuery, IProgressMessage, IRawSearchService, ISearchComplete, ISearchConfiguration, ISearchProgressItem, ISearchResultProvider, ISerializedFileMatch, ISerializedSearchComplete, ISerializedSearchProgressItem, isSerializedSearchComplete, isSerializedSearchSuccess, ITextQuery, ISearchService, isFileMatch } from 'vs/workbench/services/search/common/search';\nimport { SearchChannelClient } from 'vs/workbench/services/search/node/searchIpc';\nimport { SearchService } from 'vs/workbench/services/search/common/searchService';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { FileAccess } from 'vs/base/common/network';\nimport { IUriIdentityService } from 'vs/workbench/services/uriIdentity/common/uriIdentity';\n\nexport class LocalSearchService extends SearchService {\n\tconstructor(\n\t\t@IModelService modelService: IModelService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@ILogService logService: ILogService,\n\t\t@IExtensionService extensionService: IExtensionService,\n\t\t@IFileService fileService: IFileService,\n\t\t@INativeWorkbenchEnvironmentService readonly environmentService: INativeWorkbenchEnvironmentService,\n\t\t@IInstantiationService readonly instantiationService: IInstantiationService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t) {\n\t\tsuper(modelService, editorService, telemetryService, logService, extensionService, fileService, uriIdentityService);\n\n\t\tthis.diskSearch = instantiationService.createInstance(DiskSearch, !environmentService.isBuilt || environmentService.verbose, parseSearchPort(environmentService.args, environmentService.isBuilt));\n\t}\n}\n\nexport class DiskSearch implements ISearchResultProvider {\n\tprivate raw: IRawSearchService;\n\n\tconstructor(\n\t\tverboseLogging: boolean,\n\t\tsearchDebug: IDebugParams | undefined,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IConfigurationService private readonly configService: IConfigurationService,\n\t) {\n\t\tconst timeout = this.configService.getValue<ISearchConfiguration>().search.maintainFileSearchCache ?\n\t\t\t100 * 60 * 60 * 1000 :\n\t\t\t60 * 60 * 1000;\n\n\t\tconst opts: IIPCOptions = {\n\t\t\tserverName: 'Search',\n\t\t\ttimeout,\n\t\t\targs: ['--type=searchService'],\n\t\t\t// Pass in fresh execArgv to the forked process such that it doesn't inherit them from `process.execArgv`.\n\t\t\tfreshExecArgv: true,\n\t\t\tenv: {\n\t\t\t\tVSCODE_AMD_ENTRYPOINT: 'vs/workbench/services/search/node/searchApp',\n\t\t\t\tVSCODE_PIPE_LOGGING: 'true',\n\t\t\t\tVSCODE_VERBOSE_LOGGING: verboseLogging\n\t\t\t},\n\t\t\tuseQueue: true\n\t\t};\n\n\t\tif (searchDebug) {\n\t\t\tif (searchDebug.break && searchDebug.port) {\n\t\t\t\topts.debugBrk = searchDebug.port;\n\t\t\t} else if (!searchDebug.break && searchDebug.port) {\n\t\t\t\topts.debug = searchDebug.port;\n\t\t\t}\n\t\t}\n\n\t\tconst client = new Client(FileAccess.asFileUri('bootstrap-fork', require).fsPath, opts);\n\t\tconst channel = getNextTickChannel(client.getChannel('search'));\n\t\tthis.raw = new SearchChannelClient(channel);\n\t}\n\n\ttextSearch(query: ITextQuery, onProgress?: (p: ISearchProgressItem) => void, token?: CancellationToken): Promise<ISearchComplete> {\n\t\tif (token && token.isCancellationRequested) {\n\t\t\tthrow canceled();\n\t\t}\n\n\t\tconst event: Event<ISerializedSearchProgressItem | ISerializedSearchComplete> = this.raw.textSearch(query);\n\n\t\treturn DiskSearch.collectResultsFromEvent(event, onProgress, token);\n\t}\n\n\tfileSearch(query: IFileQuery, token?: CancellationToken): Promise<ISearchComplete> {\n\t\tif (token && token.isCancellationRequested) {\n\t\t\tthrow canceled();\n\t\t}\n\n\t\tlet event: Event<ISerializedSearchProgressItem | ISerializedSearchComplete>;\n\t\tevent = this.raw.fileSearch(query);\n\n\t\tconst onProgress = (p: ISearchProgressItem) => {\n\t\t\tif (!isFileMatch(p)) {\n\t\t\t\t// Should only be for logs\n\t\t\t\tthis.logService.debug('SearchService#search', p.message);\n\t\t\t}\n\t\t};\n\n\t\treturn DiskSearch.collectResultsFromEvent(event, onProgress, token);\n\t}\n\n\t/**\n\t * Public for test\n\t */\n\tstatic collectResultsFromEvent(event: Event<ISerializedSearchProgressItem | ISerializedSearchComplete>, onProgress?: (p: ISearchProgressItem) => void, token?: CancellationToken): Promise<ISearchComplete> {\n\t\tlet result: IFileMatch[] = [];\n\n\t\tlet listener: IDisposable;\n\t\treturn new Promise<ISearchComplete>((c, e) => {\n\t\t\tif (token) {\n\t\t\t\ttoken.onCancellationRequested(() => {\n\t\t\t\t\tif (listener) {\n\t\t\t\t\t\tlistener.dispose();\n\t\t\t\t\t}\n\n\t\t\t\t\te(canceled());\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tlistener = event(ev => {\n\t\t\t\tif (isSerializedSearchComplete(ev)) {\n\t\t\t\t\tif (isSerializedSearchSuccess(ev)) {\n\t\t\t\t\t\tc({\n\t\t\t\t\t\t\tlimitHit: ev.limitHit,\n\t\t\t\t\t\t\tresults: result,\n\t\t\t\t\t\t\tstats: ev.stats,\n\t\t\t\t\t\t\tmessages: ev.messages,\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\te(ev.error);\n\t\t\t\t\t}\n\n\t\t\t\t\tlistener.dispose();\n\t\t\t\t} else {\n\t\t\t\t\t// Matches\n\t\t\t\t\tif (Array.isArray(ev)) {\n\t\t\t\t\t\tconst fileMatches = ev.map(d => this.createFileMatch(d));\n\t\t\t\t\t\tresult = result.concat(fileMatches);\n\t\t\t\t\t\tif (onProgress) {\n\t\t\t\t\t\t\tfileMatches.forEach(onProgress);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Match\n\t\t\t\t\telse if ((<ISerializedFileMatch>ev).path) {\n\t\t\t\t\t\tconst fileMatch = this.createFileMatch(<ISerializedFileMatch>ev);\n\t\t\t\t\t\tresult.push(fileMatch);\n\n\t\t\t\t\t\tif (onProgress) {\n\t\t\t\t\t\t\tonProgress(fileMatch);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Progress\n\t\t\t\t\telse if (onProgress) {\n\t\t\t\t\t\tonProgress(<IProgressMessage>ev);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate static createFileMatch(data: ISerializedFileMatch): FileMatch {\n\t\tconst fileMatch = new FileMatch(uri.file(data.path));\n\t\tif (data.results) {\n\t\t\t// const matches = data.results.filter(resultIsMatch);\n\t\t\tfileMatch.results.push(...data.results);\n\t\t}\n\t\treturn fileMatch;\n\t}\n\n\tclearCache(cacheKey: string): Promise<void> {\n\t\treturn this.raw.clearCache(cacheKey);\n\t}\n}\n\nregisterSingleton(ISearchService, LocalSearchService, true);\n"]}