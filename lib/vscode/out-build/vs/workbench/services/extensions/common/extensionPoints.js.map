{"version":3,"file":"extensionPoints.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/extensions/common/extensionPoints.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAQhG,IAAiB,YAAY,CAsB5B;IAtBD,WAAiB,YAAY;QAC5B,SAAgB,MAAM,CAAC,CAAe,EAAE,CAAe;YACtD,IAAI,CAAC,KAAK,CAAC,EAAE;gBACZ,OAAO,IAAI,CAAC;aACZ;YACD,IAAI,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC3B,IAAI,KAAK,GAAgB,IAAI,GAAG,EAAU,CAAC;YAC3C,KAAK,IAAI,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;gBAC/B,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;aACf;YACD,IAAI,KAAK,CAAC,MAAM,KAAK,KAAK,CAAC,IAAI,EAAE;gBAChC,OAAO,KAAK,CAAC;aACb;YAED,KAAK,IAAI,GAAG,IAAI,KAAK,EAAE;gBACtB,IAAI,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,EAAE;oBACtB,OAAO,KAAK,CAAC;iBACb;gBACD,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aAClB;YACD,OAAO,KAAK,CAAC,IAAI,KAAK,CAAC,CAAC;QACzB,CAAC;QApBe,mBAAM,SAoBrB,CAAA;IACF,CAAC,EAtBgB,YAAY,GAAZ,oBAAY,KAAZ,oBAAY,QAsB5B;IAQD,MAAa,MAAM;QAIlB,YACC,cAA6E;YAE7E,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;QACvC,CAAC;QAEM,KAAK,CAAC,MAAc,EAAE,OAAe;YAC3C,IAAI,CAAC,eAAe,CAAC,uBAAQ,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;QACvD,CAAC;QAEM,IAAI,CAAC,MAAc,EAAE,OAAe;YAC1C,IAAI,CAAC,eAAe,CAAC,uBAAQ,CAAC,OAAO,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;QACzD,CAAC;QAEM,IAAI,CAAC,MAAc,EAAE,OAAe;YAC1C,IAAI,CAAC,eAAe,CAAC,uBAAQ,CAAC,IAAI,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;QACtD,CAAC;KACD;IArBD,wBAqBC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Severity } from 'vs/platform/notification/common/notification';\n\nexport interface Translations {\n\t[id: string]: string;\n}\n\nexport namespace Translations {\n\texport function equals(a: Translations, b: Translations): boolean {\n\t\tif (a === b) {\n\t\t\treturn true;\n\t\t}\n\t\tlet aKeys = Object.keys(a);\n\t\tlet bKeys: Set<string> = new Set<string>();\n\t\tfor (let key of Object.keys(b)) {\n\t\t\tbKeys.add(key);\n\t\t}\n\t\tif (aKeys.length !== bKeys.size) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (let key of aKeys) {\n\t\t\tif (a[key] !== b[key]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tbKeys.delete(key);\n\t\t}\n\t\treturn bKeys.size === 0;\n\t}\n}\n\nexport interface ILog {\n\terror(source: string, message: string): void;\n\twarn(source: string, message: string): void;\n\tinfo(source: string, message: string): void;\n}\n\nexport class Logger implements ILog {\n\n\tprivate readonly _messageHandler: (severity: Severity, source: string, message: string) => void;\n\n\tconstructor(\n\t\tmessageHandler: (severity: Severity, source: string, message: string) => void\n\t) {\n\t\tthis._messageHandler = messageHandler;\n\t}\n\n\tpublic error(source: string, message: string): void {\n\t\tthis._messageHandler(Severity.Error, source, message);\n\t}\n\n\tpublic warn(source: string, message: string): void {\n\t\tthis._messageHandler(Severity.Warning, source, message);\n\t}\n\n\tpublic info(source: string, message: string): void {\n\t\tthis._messageHandler(Severity.Info, source, message);\n\t}\n}\n"]}