{"version":3,"sources":["vs/workbench/services/extensions/common/remoteExtensionHost.ts"],"names":[],"mappings":"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","file":"remoteExtensionHost.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { IMessagePassingProtocol } from 'vs/base/parts/ipc/common/ipc';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { ILabelService } from 'vs/platform/label/common/label';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { connectRemoteAgentExtensionHost, IRemoteExtensionHostStartParams, IConnectionOptions, ISocketFactory } from 'vs/platform/remote/common/remoteAgentConnection';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IWorkspaceContextService, WorkbenchState } from 'vs/platform/workspace/common/workspace';\nimport { IInitData, UIKind } from 'vs/workbench/api/common/extHost.protocol';\nimport { MessageType, createMessageOfType, isMessageOfType } from 'vs/workbench/services/extensions/common/extensionHostProtocol';\nimport { IExtensionHost, ExtensionHostLogFileName, ExtensionHostKind } from 'vs/workbench/services/extensions/common/extensions';\nimport { parseExtensionDevOptions } from 'vs/workbench/services/extensions/common/extensionDevOptions';\nimport { IRemoteAuthorityResolverService, IRemoteConnectionData } from 'vs/platform/remote/common/remoteAuthorityResolver';\nimport * as platform from 'vs/base/common/platform';\nimport { Schemas } from 'vs/base/common/network';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { ILifecycleService } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { PersistentProtocol } from 'vs/base/parts/ipc/common/ipc.net';\nimport { ExtensionIdentifier, IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { IExtensionHostDebugService } from 'vs/platform/debug/common/extensionHostDebug';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { ISignService } from 'vs/platform/sign/common/sign';\nimport { joinPath } from 'vs/base/common/resources';\nimport { URI } from 'vs/base/common/uri';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IOutputChannelRegistry, Extensions } from 'vs/workbench/services/output/common/output';\nimport { localize } from 'vs/nls';\n\nexport interface IRemoteExtensionHostInitData {\n\treadonly connectionData: IRemoteConnectionData | null;\n\treadonly pid: number;\n\treadonly appRoot: URI;\n\treadonly extensionHostLogsPath: URI;\n\treadonly globalStorageHome: URI;\n\treadonly workspaceStorageHome: URI;\n\treadonly extensions: IExtensionDescription[];\n\treadonly allExtensions: IExtensionDescription[];\n}\n\nexport interface IRemoteExtensionHostDataProvider {\n\treadonly remoteAuthority: string;\n\tgetInitData(): Promise<IRemoteExtensionHostInitData>;\n}\n\nexport class RemoteExtensionHost extends Disposable implements IExtensionHost {\n\n\tpublic readonly kind = ExtensionHostKind.Remote;\n\tpublic readonly remoteAuthority: string;\n\n\tprivate _onExit: Emitter<[number, string | null]> = this._register(new Emitter<[number, string | null]>());\n\tpublic readonly onExit: Event<[number, string | null]> = this._onExit.event;\n\n\tprivate _protocol: PersistentProtocol | null;\n\tprivate _hasLostConnection: boolean;\n\tprivate _terminating: boolean;\n\tprivate readonly _isExtensionDevHost: boolean;\n\n\tconstructor(\n\t\tprivate readonly _initDataProvider: IRemoteExtensionHostDataProvider,\n\t\tprivate readonly _socketFactory: ISocketFactory,\n\t\t@IWorkspaceContextService private readonly _contextService: IWorkspaceContextService,\n\t\t@IWorkbenchEnvironmentService private readonly _environmentService: IWorkbenchEnvironmentService,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t\t@ILifecycleService private readonly _lifecycleService: ILifecycleService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@ILabelService private readonly _labelService: ILabelService,\n\t\t@IRemoteAuthorityResolverService private readonly remoteAuthorityResolverService: IRemoteAuthorityResolverService,\n\t\t@IExtensionHostDebugService private readonly _extensionHostDebugService: IExtensionHostDebugService,\n\t\t@IProductService private readonly _productService: IProductService,\n\t\t@ISignService private readonly _signService: ISignService\n\t) {\n\t\tsuper();\n\t\tthis.remoteAuthority = this._initDataProvider.remoteAuthority;\n\t\tthis._protocol = null;\n\t\tthis._hasLostConnection = false;\n\t\tthis._terminating = false;\n\n\t\tthis._register(this._lifecycleService.onDidShutdown(() => this.dispose()));\n\n\t\tconst devOpts = parseExtensionDevOptions(this._environmentService);\n\t\tthis._isExtensionDevHost = devOpts.isExtensionDevHost;\n\t}\n\n\tpublic start(): Promise<IMessagePassingProtocol> {\n\t\tconst options: IConnectionOptions = {\n\t\t\tcommit: this._productService.commit,\n\t\t\tsocketFactory: this._socketFactory,\n\t\t\taddressProvider: {\n\t\t\t\tgetAddress: async () => {\n\t\t\t\t\tconst { authority } = await this.remoteAuthorityResolverService.resolveAuthority(this._initDataProvider.remoteAuthority);\n\t\t\t\t\treturn { host: authority.host, port: authority.port, connectionToken: authority.connectionToken };\n\t\t\t\t}\n\t\t\t},\n\t\t\tsignService: this._signService,\n\t\t\tlogService: this._logService,\n\t\t\tipcLogger: null\n\t\t};\n\t\treturn this.remoteAuthorityResolverService.resolveAuthority(this._initDataProvider.remoteAuthority).then((resolverResult) => {\n\n\t\t\tconst startParams: IRemoteExtensionHostStartParams = {\n\t\t\t\tlanguage: platform.language,\n\t\t\t\tdebugId: this._environmentService.debugExtensionHost.debugId,\n\t\t\t\tbreak: this._environmentService.debugExtensionHost.break,\n\t\t\t\tport: this._environmentService.debugExtensionHost.port,\n\t\t\t\tenv: resolverResult.options && resolverResult.options.extensionHostEnv\n\t\t\t};\n\n\t\t\tconst extDevLocs = this._environmentService.extensionDevelopmentLocationURI;\n\n\t\t\tlet debugOk = true;\n\t\t\tif (extDevLocs && extDevLocs.length > 0) {\n\t\t\t\t// TODO@AW: handles only first path in array\n\t\t\t\tif (extDevLocs[0].scheme === Schemas.file) {\n\t\t\t\t\tdebugOk = false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!debugOk) {\n\t\t\t\tstartParams.break = false;\n\t\t\t}\n\n\t\t\treturn connectRemoteAgentExtensionHost(options, startParams).then(result => {\n\t\t\t\tlet { protocol, debugPort } = result;\n\t\t\t\tconst isExtensionDevelopmentDebug = typeof debugPort === 'number';\n\t\t\t\tif (debugOk && this._environmentService.isExtensionDevelopment && this._environmentService.debugExtensionHost.debugId && debugPort) {\n\t\t\t\t\tthis._extensionHostDebugService.attachSession(this._environmentService.debugExtensionHost.debugId, debugPort, this._initDataProvider.remoteAuthority);\n\t\t\t\t}\n\n\t\t\t\tprotocol.onDidDispose(() => {\n\t\t\t\t\tthis._onExtHostConnectionLost();\n\t\t\t\t});\n\n\t\t\t\tprotocol.onSocketClose(() => {\n\t\t\t\t\tif (this._isExtensionDevHost) {\n\t\t\t\t\t\tthis._onExtHostConnectionLost();\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// 1) wait for the incoming `ready` event and send the initialization data.\n\t\t\t\t// 2) wait for the incoming `initialized` event.\n\t\t\t\treturn new Promise<IMessagePassingProtocol>((resolve, reject) => {\n\n\t\t\t\t\tlet handle = setTimeout(() => {\n\t\t\t\t\t\treject('timeout');\n\t\t\t\t\t}, 60 * 1000);\n\n\t\t\t\t\tlet logFile: URI;\n\n\t\t\t\t\tconst disposable = protocol.onMessage(msg => {\n\n\t\t\t\t\t\tif (isMessageOfType(msg, MessageType.Ready)) {\n\t\t\t\t\t\t\t// 1) Extension Host is ready to receive messages, initialize it\n\t\t\t\t\t\t\tthis._createExtHostInitData(isExtensionDevelopmentDebug).then(data => {\n\t\t\t\t\t\t\t\tlogFile = data.logFile;\n\t\t\t\t\t\t\t\tprotocol.send(VSBuffer.fromString(JSON.stringify(data)));\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (isMessageOfType(msg, MessageType.Initialized)) {\n\t\t\t\t\t\t\t// 2) Extension Host is initialized\n\n\t\t\t\t\t\t\tclearTimeout(handle);\n\n\t\t\t\t\t\t\t// stop listening for messages here\n\t\t\t\t\t\t\tdisposable.dispose();\n\n\t\t\t\t\t\t\t// Register log channel for remote exthost log\n\t\t\t\t\t\t\tRegistry.as<IOutputChannelRegistry>(Extensions.OutputChannels).registerChannel({ id: 'remoteExtHostLog', label: localize('remote extension host Log', \"Remote Extension Host\"), file: logFile, log: true });\n\n\t\t\t\t\t\t\t// release this promise\n\t\t\t\t\t\t\tthis._protocol = protocol;\n\t\t\t\t\t\t\tresolve(protocol);\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconsole.error(`received unexpected message during handshake phase from the extension host: `, msg);\n\t\t\t\t\t});\n\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate _onExtHostConnectionLost(): void {\n\t\tif (this._hasLostConnection) {\n\t\t\t// avoid re-entering this method\n\t\t\treturn;\n\t\t}\n\t\tthis._hasLostConnection = true;\n\n\t\tif (this._isExtensionDevHost && this._environmentService.debugExtensionHost.debugId) {\n\t\t\tthis._extensionHostDebugService.close(this._environmentService.debugExtensionHost.debugId);\n\t\t}\n\n\t\tif (this._terminating) {\n\t\t\t// Expected termination path (we asked the process to terminate)\n\t\t\treturn;\n\t\t}\n\n\t\tthis._onExit.fire([0, null]);\n\t}\n\n\tprivate async _createExtHostInitData(isExtensionDevelopmentDebug: boolean): Promise<IInitData> {\n\t\tconst [telemetryInfo, remoteInitData] = await Promise.all([this._telemetryService.getTelemetryInfo(), this._initDataProvider.getInitData()]);\n\n\t\t// Collect all identifiers for extension ids which can be considered \"resolved\"\n\t\tconst remoteExtensions = new Set<string>();\n\t\tremoteInitData.extensions.forEach((extension) => remoteExtensions.add(ExtensionIdentifier.toKey(extension.identifier.value)));\n\n\t\tconst resolvedExtensions = remoteInitData.allExtensions.filter(extension => !extension.main && !extension.browser).map(extension => extension.identifier);\n\t\tconst hostExtensions = (\n\t\t\tremoteInitData.allExtensions\n\t\t\t\t.filter(extension => !remoteExtensions.has(ExtensionIdentifier.toKey(extension.identifier.value)))\n\t\t\t\t.filter(extension => (extension.main || extension.browser) && extension.api === 'none').map(extension => extension.identifier)\n\t\t);\n\t\tconst workspace = this._contextService.getWorkspace();\n\t\treturn {\n\t\t\tcommit: this._productService.commit,\n\t\t\tversion: this._productService.version,\n\t\t\tparentPid: remoteInitData.pid,\n\t\t\tenvironment: {\n\t\t\t\tisExtensionDevelopmentDebug,\n\t\t\t\tappRoot: remoteInitData.appRoot,\n\t\t\t\tappName: this._productService.nameLong,\n\t\t\t\tappUriScheme: this._productService.urlProtocol,\n\t\t\t\tappLanguage: platform.language,\n\t\t\t\textensionDevelopmentLocationURI: this._environmentService.extensionDevelopmentLocationURI,\n\t\t\t\textensionTestsLocationURI: this._environmentService.extensionTestsLocationURI,\n\t\t\t\tglobalStorageHome: remoteInitData.globalStorageHome,\n\t\t\t\tworkspaceStorageHome: remoteInitData.workspaceStorageHome,\n\t\t\t\twebviewResourceRoot: this._environmentService.webviewResourceRoot,\n\t\t\t\twebviewCspSource: this._environmentService.webviewCspSource,\n\t\t\t},\n\t\t\tworkspace: this._contextService.getWorkbenchState() === WorkbenchState.EMPTY ? null : {\n\t\t\t\tconfiguration: workspace.configuration,\n\t\t\t\tid: workspace.id,\n\t\t\t\tname: this._labelService.getWorkspaceLabel(workspace)\n\t\t\t},\n\t\t\tremote: {\n\t\t\t\tisRemote: true,\n\t\t\t\tauthority: this._initDataProvider.remoteAuthority,\n\t\t\t\tconnectionData: remoteInitData.connectionData\n\t\t\t},\n\t\t\tresolvedExtensions: resolvedExtensions,\n\t\t\thostExtensions: hostExtensions,\n\t\t\textensions: remoteInitData.extensions,\n\t\t\ttelemetryInfo,\n\t\t\tlogLevel: this._logService.getLevel(),\n\t\t\tlogsLocation: remoteInitData.extensionHostLogsPath,\n\t\t\tlogFile: joinPath(remoteInitData.extensionHostLogsPath, `${ExtensionHostLogFileName}.log`),\n\t\t\tautoStart: true,\n\t\t\tuiKind: platform.isWeb ? UIKind.Web : UIKind.Desktop\n\t\t};\n\t}\n\n\tgetInspectPort(): number | undefined {\n\t\treturn undefined;\n\t}\n\n\tenableInspectPort(): Promise<boolean> {\n\t\treturn Promise.resolve(false);\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\n\t\tthis._terminating = true;\n\n\t\tif (this._protocol) {\n\t\t\t// Send the extension host a request to terminate itself\n\t\t\t// (graceful termination)\n\t\t\tconst socket = this._protocol.getSocket();\n\t\t\tthis._protocol.send(createMessageOfType(MessageType.Terminate));\n\t\t\tthis._protocol.sendDisconnect();\n\t\t\tthis._protocol.dispose();\n\t\t\tsocket.end();\n\t\t\tthis._protocol = null;\n\t\t}\n\t}\n}\n"]}