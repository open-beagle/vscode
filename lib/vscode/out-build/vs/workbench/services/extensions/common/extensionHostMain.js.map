{"version":3,"file":"extensionHostMain.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/extensions/common/extensionHostMain.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { timeout } from 'vs/base/common/async';\nimport * as errors from 'vs/base/common/errors';\nimport * as performance from 'vs/base/common/performance';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { IURITransformer } from 'vs/base/common/uriIpc';\nimport { IMessagePassingProtocol } from 'vs/base/parts/ipc/common/ipc';\nimport { IInitData, MainContext, MainThreadConsoleShape } from 'vs/workbench/api/common/extHost.protocol';\nimport { RPCProtocol } from 'vs/workbench/services/extensions/common/rpcProtocol';\nimport { IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { getSingletonServiceDescriptors } from 'vs/platform/instantiation/common/extensions';\nimport { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';\nimport { IExtHostInitDataService } from 'vs/workbench/api/common/extHostInitDataService';\nimport { InstantiationService } from 'vs/platform/instantiation/common/instantiationService';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IExtHostRpcService, ExtHostRpcService } from 'vs/workbench/api/common/extHostRpcService';\nimport { IURITransformerService, URITransformerService } from 'vs/workbench/api/common/extHostUriTransformerService';\nimport { IExtHostExtensionService, IHostUtils } from 'vs/workbench/api/common/extHostExtensionService';\nimport { IExtHostTerminalService } from 'vs/workbench/api/common/extHostTerminalService';\n\nexport interface IExitFn {\n\t(code?: number): any;\n}\n\nexport interface IConsolePatchFn {\n\t(mainThreadConsole: MainThreadConsoleShape): any;\n}\n\nexport class ExtensionHostMain {\n\n\tprivate _isTerminating: boolean;\n\tprivate readonly _hostUtils: IHostUtils;\n\tprivate readonly _extensionService: IExtHostExtensionService;\n\tprivate readonly _logService: ILogService;\n\tprivate readonly _disposables = new DisposableStore();\n\n\tconstructor(\n\t\tprotocol: IMessagePassingProtocol,\n\t\tinitData: IInitData,\n\t\thostUtils: IHostUtils,\n\t\turiTransformer: IURITransformer | null\n\t) {\n\t\tthis._isTerminating = false;\n\t\tthis._hostUtils = hostUtils;\n\t\tconst rpcProtocol = new RPCProtocol(protocol, null, uriTransformer);\n\n\t\t// ensure URIs are transformed and revived\n\t\tinitData = ExtensionHostMain._transform(initData, rpcProtocol);\n\n\t\t// bootstrap services\n\t\tconst services = new ServiceCollection(...getSingletonServiceDescriptors());\n\t\tservices.set(IExtHostInitDataService, { _serviceBrand: undefined, ...initData });\n\t\tservices.set(IExtHostRpcService, new ExtHostRpcService(rpcProtocol));\n\t\tservices.set(IURITransformerService, new URITransformerService(uriTransformer));\n\t\tservices.set(IHostUtils, hostUtils);\n\n\t\tconst instaService: IInstantiationService = new InstantiationService(services, true);\n\n\t\t// ugly self - inject\n\t\tconst terminalService = instaService.invokeFunction(accessor => accessor.get(IExtHostTerminalService));\n\t\tthis._disposables.add(terminalService);\n\n\t\tthis._logService = instaService.invokeFunction(accessor => accessor.get(ILogService));\n\n\t\tperformance.mark(`code/extHost/didCreateServices`);\n\t\tthis._logService.info('extension host started');\n\t\tthis._logService.trace('initData', initData);\n\n\t\t// ugly self - inject\n\t\t// must call initialize *after* creating the extension service\n\t\t// because `initialize` itself creates instances that depend on it\n\t\tthis._extensionService = instaService.invokeFunction(accessor => accessor.get(IExtHostExtensionService));\n\t\tthis._extensionService.initialize();\n\n\t\t// error forwarding and stack trace scanning\n\t\tError.stackTraceLimit = 100; // increase number of stack frames (from 10, https://github.com/v8/v8/wiki/Stack-Trace-API)\n\t\tconst extensionErrors = new WeakMap<Error, IExtensionDescription | undefined>();\n\t\tthis._extensionService.getExtensionPathIndex().then(map => {\n\t\t\t(<any>Error).prepareStackTrace = (error: Error, stackTrace: errors.V8CallSite[]) => {\n\t\t\t\tlet stackTraceMessage = '';\n\t\t\t\tlet extension: IExtensionDescription | undefined;\n\t\t\t\tlet fileName: string;\n\t\t\t\tfor (const call of stackTrace) {\n\t\t\t\t\tstackTraceMessage += `\\n\\tat ${call.toString()}`;\n\t\t\t\t\tfileName = call.getFileName();\n\t\t\t\t\tif (!extension && fileName) {\n\t\t\t\t\t\textension = map.findSubstr(fileName);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\textensionErrors.set(error, extension);\n\t\t\t\treturn `${error.name || 'Error'}: ${error.message || ''}${stackTraceMessage}`;\n\t\t\t};\n\t\t});\n\n\t\tconst mainThreadExtensions = rpcProtocol.getProxy(MainContext.MainThreadExtensionService);\n\t\tconst mainThreadErrors = rpcProtocol.getProxy(MainContext.MainThreadErrors);\n\t\terrors.setUnexpectedErrorHandler(err => {\n\t\t\tconst data = errors.transformErrorForSerialization(err);\n\t\t\tconst extension = extensionErrors.get(err);\n\t\t\tif (extension) {\n\t\t\t\tmainThreadExtensions.$onExtensionRuntimeError(extension.identifier, data);\n\t\t\t} else {\n\t\t\t\tmainThreadErrors.$onUnexpectedError(data);\n\t\t\t}\n\t\t});\n\t}\n\n\tterminate(reason: string): void {\n\t\tif (this._isTerminating) {\n\t\t\t// we are already shutting down...\n\t\t\treturn;\n\t\t}\n\t\tthis._isTerminating = true;\n\t\tthis._logService.info(`extension host terminating: ${reason}`);\n\t\tthis._logService.flush();\n\n\t\tthis._disposables.dispose();\n\n\t\terrors.setUnexpectedErrorHandler((err) => {\n\t\t\t// TODO: write to log once we have one\n\t\t});\n\n\t\tconst extensionsDeactivated = this._extensionService.deactivateAll();\n\n\t\t// Give extensions 1 second to wrap up any async dispose, then exit in at most 4 seconds\n\t\tsetTimeout(() => {\n\t\t\tPromise.race([timeout(4000), extensionsDeactivated]).finally(() => {\n\t\t\t\tthis._logService.info(`exiting with code 0`);\n\t\t\t\tthis._logService.flush();\n\t\t\t\tthis._logService.dispose();\n\t\t\t\tthis._hostUtils.exit(0);\n\t\t\t});\n\t\t}, 1000);\n\t}\n\n\tprivate static _transform(initData: IInitData, rpcProtocol: RPCProtocol): IInitData {\n\t\tinitData.extensions.forEach((ext) => (<any>ext).extensionLocation = URI.revive(rpcProtocol.transformIncomingURIs(ext.extensionLocation)));\n\t\tinitData.environment.appRoot = URI.revive(rpcProtocol.transformIncomingURIs(initData.environment.appRoot));\n\t\tconst extDevLocs = initData.environment.extensionDevelopmentLocationURI;\n\t\tif (extDevLocs) {\n\t\t\tinitData.environment.extensionDevelopmentLocationURI = extDevLocs.map(url => URI.revive(rpcProtocol.transformIncomingURIs(url)));\n\t\t}\n\t\tinitData.environment.extensionTestsLocationURI = URI.revive(rpcProtocol.transformIncomingURIs(initData.environment.extensionTestsLocationURI));\n\t\tinitData.environment.globalStorageHome = URI.revive(rpcProtocol.transformIncomingURIs(initData.environment.globalStorageHome));\n\t\tinitData.environment.workspaceStorageHome = URI.revive(rpcProtocol.transformIncomingURIs(initData.environment.workspaceStorageHome));\n\t\tinitData.logsLocation = URI.revive(rpcProtocol.transformIncomingURIs(initData.logsLocation));\n\t\tinitData.logFile = URI.revive(rpcProtocol.transformIncomingURIs(initData.logFile));\n\t\tinitData.workspace = rpcProtocol.transformIncomingURIs(initData.workspace);\n\t\treturn initData;\n\t}\n}\n"]}