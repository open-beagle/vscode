{"version":3,"file":"extensionDescriptionRegistry.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/extensions/common/extensionDescriptionRegistry.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ExtensionIdentifier, IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { Emitter } from 'vs/base/common/event';\nimport * as path from 'vs/base/common/path';\n\nexport class DeltaExtensionsResult {\n\tconstructor(\n\t\tpublic readonly removedDueToLooping: IExtensionDescription[]\n\t) { }\n}\n\nexport class ExtensionDescriptionRegistry {\n\tprivate readonly _onDidChange = new Emitter<void>();\n\tpublic readonly onDidChange = this._onDidChange.event;\n\n\tprivate _extensionDescriptions: IExtensionDescription[];\n\tprivate _extensionsMap!: Map<string, IExtensionDescription>;\n\tprivate _extensionsArr!: IExtensionDescription[];\n\tprivate _activationMap!: Map<string, IExtensionDescription[]>;\n\n\tconstructor(extensionDescriptions: IExtensionDescription[]) {\n\t\tthis._extensionDescriptions = extensionDescriptions;\n\t\tthis._initialize();\n\t}\n\n\tprivate _initialize(): void {\n\t\t// Ensure extensions are stored in the order: builtin, user, under development\n\t\tthis._extensionDescriptions.sort(extensionCmp);\n\n\t\tthis._extensionsMap = new Map<string, IExtensionDescription>();\n\t\tthis._extensionsArr = [];\n\t\tthis._activationMap = new Map<string, IExtensionDescription[]>();\n\n\t\tfor (const extensionDescription of this._extensionDescriptions) {\n\t\t\tif (this._extensionsMap.has(ExtensionIdentifier.toKey(extensionDescription.identifier))) {\n\t\t\t\t// No overwriting allowed!\n\t\t\t\tconsole.error('Extension `' + extensionDescription.identifier.value + '` is already registered');\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tthis._extensionsMap.set(ExtensionIdentifier.toKey(extensionDescription.identifier), extensionDescription);\n\t\t\tthis._extensionsArr.push(extensionDescription);\n\n\t\t\tif (Array.isArray(extensionDescription.activationEvents)) {\n\t\t\t\tfor (let activationEvent of extensionDescription.activationEvents) {\n\t\t\t\t\t// TODO@joao: there's no easy way to contribute this\n\t\t\t\t\tif (activationEvent === 'onUri') {\n\t\t\t\t\t\tactivationEvent = `onUri:${ExtensionIdentifier.toKey(extensionDescription.identifier)}`;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!this._activationMap.has(activationEvent)) {\n\t\t\t\t\t\tthis._activationMap.set(activationEvent, []);\n\t\t\t\t\t}\n\t\t\t\t\tthis._activationMap.get(activationEvent)!.push(extensionDescription);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic keepOnly(extensionIds: ExtensionIdentifier[]): void {\n\t\tconst toKeep = new Set<string>();\n\t\textensionIds.forEach(extensionId => toKeep.add(ExtensionIdentifier.toKey(extensionId)));\n\t\tthis._extensionDescriptions = this._extensionDescriptions.filter(extension => toKeep.has(ExtensionIdentifier.toKey(extension.identifier)));\n\t\tthis._initialize();\n\t\tthis._onDidChange.fire(undefined);\n\t}\n\n\tpublic deltaExtensions(toAdd: IExtensionDescription[], toRemove: ExtensionIdentifier[]): DeltaExtensionsResult {\n\t\tif (toAdd.length > 0) {\n\t\t\tthis._extensionDescriptions = this._extensionDescriptions.concat(toAdd);\n\t\t}\n\n\t\t// Immediately remove looping extensions!\n\t\tconst looping = ExtensionDescriptionRegistry._findLoopingExtensions(this._extensionDescriptions);\n\t\ttoRemove = toRemove.concat(looping.map(ext => ext.identifier));\n\n\t\tif (toRemove.length > 0) {\n\t\t\tconst toRemoveSet = new Set<string>();\n\t\t\ttoRemove.forEach(extensionId => toRemoveSet.add(ExtensionIdentifier.toKey(extensionId)));\n\t\t\tthis._extensionDescriptions = this._extensionDescriptions.filter(extension => !toRemoveSet.has(ExtensionIdentifier.toKey(extension.identifier)));\n\t\t}\n\n\t\tthis._initialize();\n\t\tthis._onDidChange.fire(undefined);\n\t\treturn new DeltaExtensionsResult(looping);\n\t}\n\n\tprivate static _findLoopingExtensions(extensionDescriptions: IExtensionDescription[]): IExtensionDescription[] {\n\t\tconst G = new class {\n\n\t\t\tprivate _arcs = new Map<string, string[]>();\n\t\t\tprivate _nodesSet = new Set<string>();\n\t\t\tprivate _nodesArr: string[] = [];\n\n\t\t\taddNode(id: string): void {\n\t\t\t\tif (!this._nodesSet.has(id)) {\n\t\t\t\t\tthis._nodesSet.add(id);\n\t\t\t\t\tthis._nodesArr.push(id);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\taddArc(from: string, to: string): void {\n\t\t\t\tthis.addNode(from);\n\t\t\t\tthis.addNode(to);\n\t\t\t\tif (this._arcs.has(from)) {\n\t\t\t\t\tthis._arcs.get(from)!.push(to);\n\t\t\t\t} else {\n\t\t\t\t\tthis._arcs.set(from, [to]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tgetArcs(id: string): string[] {\n\t\t\t\tif (this._arcs.has(id)) {\n\t\t\t\t\treturn this._arcs.get(id)!;\n\t\t\t\t}\n\t\t\t\treturn [];\n\t\t\t}\n\n\t\t\thasOnlyGoodArcs(id: string, good: Set<string>): boolean {\n\t\t\t\tconst dependencies = G.getArcs(id);\n\t\t\t\tfor (let i = 0; i < dependencies.length; i++) {\n\t\t\t\t\tif (!good.has(dependencies[i])) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tgetNodes(): string[] {\n\t\t\t\treturn this._nodesArr;\n\t\t\t}\n\t\t};\n\n\t\tlet descs = new Map<string, IExtensionDescription>();\n\t\tfor (let extensionDescription of extensionDescriptions) {\n\t\t\tconst extensionId = ExtensionIdentifier.toKey(extensionDescription.identifier);\n\t\t\tdescs.set(extensionId, extensionDescription);\n\t\t\tif (extensionDescription.extensionDependencies) {\n\t\t\t\tfor (let _depId of extensionDescription.extensionDependencies) {\n\t\t\t\t\tconst depId = ExtensionIdentifier.toKey(_depId);\n\t\t\t\t\tG.addArc(extensionId, depId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// initialize with all extensions with no dependencies.\n\t\tlet good = new Set<string>();\n\t\tG.getNodes().filter(id => G.getArcs(id).length === 0).forEach(id => good.add(id));\n\n\t\t// all other extensions will be processed below.\n\t\tlet nodes = G.getNodes().filter(id => !good.has(id));\n\n\t\tlet madeProgress: boolean;\n\t\tdo {\n\t\t\tmadeProgress = false;\n\n\t\t\t// find one extension which has only good deps\n\t\t\tfor (let i = 0; i < nodes.length; i++) {\n\t\t\t\tconst id = nodes[i];\n\n\t\t\t\tif (G.hasOnlyGoodArcs(id, good)) {\n\t\t\t\t\tnodes.splice(i, 1);\n\t\t\t\t\ti--;\n\t\t\t\t\tgood.add(id);\n\t\t\t\t\tmadeProgress = true;\n\t\t\t\t}\n\t\t\t}\n\t\t} while (madeProgress);\n\n\t\t// The remaining nodes are bad and have loops\n\t\treturn nodes.map(id => descs.get(id)!);\n\t}\n\n\tpublic containsActivationEvent(activationEvent: string): boolean {\n\t\treturn this._activationMap.has(activationEvent);\n\t}\n\n\tpublic containsExtension(extensionId: ExtensionIdentifier): boolean {\n\t\treturn this._extensionsMap.has(ExtensionIdentifier.toKey(extensionId));\n\t}\n\n\tpublic getExtensionDescriptionsForActivationEvent(activationEvent: string): IExtensionDescription[] {\n\t\tconst extensions = this._activationMap.get(activationEvent);\n\t\treturn extensions ? extensions.slice(0) : [];\n\t}\n\n\tpublic getAllExtensionDescriptions(): IExtensionDescription[] {\n\t\treturn this._extensionsArr.slice(0);\n\t}\n\n\tpublic getExtensionDescription(extensionId: ExtensionIdentifier | string): IExtensionDescription | undefined {\n\t\tconst extension = this._extensionsMap.get(ExtensionIdentifier.toKey(extensionId));\n\t\treturn extension ? extension : undefined;\n\t}\n}\n\nconst enum SortBucket {\n\tBuiltin = 0,\n\tUser = 1,\n\tDev = 2\n}\n\n/**\n * Ensure that:\n * - first are builtin extensions\n * - second are user extensions\n * - third are extensions under development\n *\n * In each bucket, extensions must be sorted alphabetically by their folder name.\n */\nfunction extensionCmp(a: IExtensionDescription, b: IExtensionDescription): number {\n\tconst aSortBucket = (a.isBuiltin ? SortBucket.Builtin : a.isUnderDevelopment ? SortBucket.Dev : SortBucket.User);\n\tconst bSortBucket = (b.isBuiltin ? SortBucket.Builtin : b.isUnderDevelopment ? SortBucket.Dev : SortBucket.User);\n\tif (aSortBucket !== bSortBucket) {\n\t\treturn aSortBucket - bSortBucket;\n\t}\n\tconst aLastSegment = path.posix.basename(a.extensionLocation.path);\n\tconst bLastSegment = path.posix.basename(b.extensionLocation.path);\n\tif (aLastSegment < bLastSegment) {\n\t\treturn -1;\n\t}\n\tif (aLastSegment > bLastSegment) {\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n"]}