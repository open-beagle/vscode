{"version":3,"file":"proxyIdentifier.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/extensions/common/proxyIdentifier.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAwBhG,MAAa,eAAe;QAQ3B,YAAY,MAAe,EAAE,GAAW;YACvC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YACrB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;YACf,IAAI,CAAC,GAAG,GAAG,CAAC,EAAE,eAAe,CAAC,KAAK,CAAC,CAAC;QACtC,CAAC;;IAZF,0CAaC;IAZc,qBAAK,GAAG,CAAC,CAAC;IAczB,MAAM,WAAW,GAA2B,EAAE,CAAC;IAE/C,SAAgB,gCAAgC,CAAI,UAAkB;QACrE,MAAM,MAAM,GAAG,IAAI,eAAe,CAAI,IAAI,EAAE,UAAU,CAAC,CAAC;QACxD,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC;QACjC,OAAO,MAAM,CAAC;IACf,CAAC;IAJD,4EAIC;IAED,SAAgB,mCAAmC,CAAI,UAAkB;QACxE,MAAM,MAAM,GAAG,IAAI,eAAe,CAAI,KAAK,EAAE,UAAU,CAAC,CAAC;QACzD,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC;QACjC,OAAO,MAAM,CAAC;IACf,CAAC;IAJD,kFAIC;IAED,SAAgB,2BAA2B,CAAC,GAAW;QACtD,OAAO,WAAW,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;IAC7B,CAAC;IAFD,kEAEC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nexport interface IRPCProtocol {\n\t/**\n\t * Returns a proxy to an object addressable/named in the extension host process or in the renderer process.\n\t */\n\tgetProxy<T>(identifier: ProxyIdentifier<T>): T;\n\n\t/**\n\t * Register manually created instance.\n\t */\n\tset<T, R extends T>(identifier: ProxyIdentifier<T>, instance: R): R;\n\n\t/**\n\t * Assert these identifiers are already registered via `.set`.\n\t */\n\tassertRegistered(identifiers: ProxyIdentifier<any>[]): void;\n\n\t/**\n\t * Wait for the write buffer (if applicable) to become empty.\n\t */\n\tdrain(): Promise<void>;\n}\n\nexport class ProxyIdentifier<T> {\n\tpublic static count = 0;\n\t_proxyIdentifierBrand: void;\n\n\tpublic readonly isMain: boolean;\n\tpublic readonly sid: string;\n\tpublic readonly nid: number;\n\n\tconstructor(isMain: boolean, sid: string) {\n\t\tthis.isMain = isMain;\n\t\tthis.sid = sid;\n\t\tthis.nid = (++ProxyIdentifier.count);\n\t}\n}\n\nconst identifiers: ProxyIdentifier<any>[] = [];\n\nexport function createMainContextProxyIdentifier<T>(identifier: string): ProxyIdentifier<T> {\n\tconst result = new ProxyIdentifier<T>(true, identifier);\n\tidentifiers[result.nid] = result;\n\treturn result;\n}\n\nexport function createExtHostContextProxyIdentifier<T>(identifier: string): ProxyIdentifier<T> {\n\tconst result = new ProxyIdentifier<T>(false, identifier);\n\tidentifiers[result.nid] = result;\n\treturn result;\n}\n\nexport function getStringIdentifierForProxy(nid: number): string {\n\treturn identifiers[nid].sid;\n}\n"]}