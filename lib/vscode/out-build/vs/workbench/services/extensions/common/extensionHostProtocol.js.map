{"version":3,"file":"extensionHostProtocol.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/extensions/common/extensionHostProtocol.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAIhG,IAAkB,qBAIjB;IAJD,WAAkB,qBAAqB;QACtC,8DAA8D;QAC9D,wFAAoB,CAAA;QACpB,wFAAoB,CAAA;IACrB,CAAC,EAJiB,qBAAqB,GAArB,6BAAqB,KAArB,6BAAqB,QAItC;IAkBD,IAAkB,WAIjB;IAJD,WAAkB,WAAW;QAC5B,2DAAW,CAAA;QACX,+CAAK,CAAA;QACL,uDAAS,CAAA;IACV,CAAC,EAJiB,WAAW,GAAX,mBAAW,KAAX,mBAAW,QAI5B;IAED,SAAgB,mBAAmB,CAAC,IAAiB;QACpD,MAAM,MAAM,GAAG,iBAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAEjC,QAAQ,IAAI,EAAE;YACb;gBAA8B,MAAM,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBAAC,MAAM;YAC7D;gBAAwB,MAAM,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBAAC,MAAM;YACvD;gBAA4B,MAAM,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBAAC,MAAM;SAC3D;QAED,OAAO,MAAM,CAAC;IACf,CAAC;IAVD,kDAUC;IAED,SAAgB,eAAe,CAAC,OAAiB,EAAE,IAAiB;QACnE,IAAI,OAAO,CAAC,UAAU,KAAK,CAAC,EAAE;YAC7B,OAAO,KAAK,CAAC;SACb;QAED,QAAQ,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE;YAC7B,KAAK,CAAC,CAAC,CAAC,OAAO,IAAI,wBAA4B,CAAC;YAChD,KAAK,CAAC,CAAC,CAAC,OAAO,IAAI,kBAAsB,CAAC;YAC1C,KAAK,CAAC,CAAC,CAAC,OAAO,IAAI,sBAA0B,CAAC;YAC9C,OAAO,CAAC,CAAC,OAAO,KAAK,CAAC;SACtB;IACF,CAAC;IAXD,0CAWC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from 'vs/base/common/buffer';\n\nexport const enum ExtensionHostExitCode {\n\t// nodejs uses codes 1-13 and exit codes >128 are signal exits\n\tVersionMismatch = 55,\n\tUnexpectedError = 81,\n}\n\nexport interface IExtHostReadyMessage {\n\ttype: 'VSCODE_EXTHOST_IPC_READY';\n}\n\nexport interface IExtHostSocketMessage {\n\ttype: 'VSCODE_EXTHOST_IPC_SOCKET';\n\tinitialDataChunk: string;\n\tskipWebSocketFrames: boolean;\n\tpermessageDeflate: boolean;\n\tinflateBytes: string;\n}\n\nexport interface IExtHostReduceGraceTimeMessage {\n\ttype: 'VSCODE_EXTHOST_IPC_REDUCE_GRACE_TIME';\n}\n\nexport const enum MessageType {\n\tInitialized,\n\tReady,\n\tTerminate\n}\n\nexport function createMessageOfType(type: MessageType): VSBuffer {\n\tconst result = VSBuffer.alloc(1);\n\n\tswitch (type) {\n\t\tcase MessageType.Initialized: result.writeUInt8(1, 0); break;\n\t\tcase MessageType.Ready: result.writeUInt8(2, 0); break;\n\t\tcase MessageType.Terminate: result.writeUInt8(3, 0); break;\n\t}\n\n\treturn result;\n}\n\nexport function isMessageOfType(message: VSBuffer, type: MessageType): boolean {\n\tif (message.byteLength !== 1) {\n\t\treturn false;\n\t}\n\n\tswitch (message.readUInt8(0)) {\n\t\tcase 1: return type === MessageType.Initialized;\n\t\tcase 2: return type === MessageType.Ready;\n\t\tcase 3: return type === MessageType.Terminate;\n\t\tdefault: return false;\n\t}\n}\n"]}