{"version":3,"sources":["vs/workbench/services/extensions/common/abstractExtensionService.ts"],"names":[],"mappings":"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","file":"abstractExtensionService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { isNonEmptyArray } from 'vs/base/common/arrays';\nimport { Barrier } from 'vs/base/common/async';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport * as perf from 'vs/base/common/performance';\nimport { isEqualOrParent } from 'vs/base/common/resources';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { IWorkbenchExtensionEnablementService } from 'vs/workbench/services/extensionManagement/common/extensionManagement';\nimport { BetterMergeId } from 'vs/platform/extensionManagement/common/extensionManagementUtil';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { INotificationService, Severity } from 'vs/platform/notification/common/notification';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { ActivationTimes, ExtensionPointContribution, IExtensionService, IExtensionsStatus, IMessage, IWillActivateEvent, IResponsiveStateChangeEvent, toExtension, IExtensionHost, ActivationKind, ExtensionHostKind } from 'vs/workbench/services/extensions/common/extensions';\nimport { ExtensionMessageCollector, ExtensionPoint, ExtensionsRegistry, IExtensionPoint, IExtensionPointUser } from 'vs/workbench/services/extensions/common/extensionsRegistry';\nimport { ExtensionDescriptionRegistry } from 'vs/workbench/services/extensions/common/extensionDescriptionRegistry';\nimport { ResponsiveState } from 'vs/workbench/services/extensions/common/rpcProtocol';\nimport { ExtensionHostManager } from 'vs/workbench/services/extensions/common/extensionHostManager';\nimport { ExtensionIdentifier, IExtensionDescription, ExtensionType, ITranslatedScannedExtension, IExtension, ExtensionKind, IExtensionContributions } from 'vs/platform/extensions/common/extensions';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { parseExtensionDevOptions } from 'vs/workbench/services/extensions/common/extensionDevOptions';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { ExtensionActivationReason } from 'vs/workbench/api/common/extHostExtensionActivator';\nimport { IExtensionManagementService } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { IExtensionActivationHost as IWorkspaceContainsActivationHost, checkGlobFileExists, checkActivateWorkspaceContainsExtension } from 'vs/workbench/api/common/shared/workspaceContains';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { Schemas } from 'vs/base/common/network';\nimport { URI } from 'vs/base/common/uri';\nimport { IExtensionManifestPropertiesService } from 'vs/workbench/services/extensions/common/extensionManifestPropertiesService';\n\nconst hasOwnProperty = Object.hasOwnProperty;\nconst NO_OP_VOID_PROMISE = Promise.resolve<void>(undefined);\n\nexport function parseScannedExtension(extension: ITranslatedScannedExtension): IExtensionDescription {\n\treturn {\n\t\tidentifier: new ExtensionIdentifier(`${extension.packageJSON.publisher}.${extension.packageJSON.name}`),\n\t\tisBuiltin: extension.type === ExtensionType.System,\n\t\tisUserBuiltin: false,\n\t\tisUnderDevelopment: extension.isUnderDevelopment,\n\t\textensionLocation: extension.location,\n\t\t...extension.packageJSON,\n\t};\n}\n\nclass DeltaExtensionsQueueItem {\n\tconstructor(\n\t\tpublic readonly toAdd: IExtension[],\n\t\tpublic readonly toRemove: string[]\n\t) { }\n}\n\nexport const enum ExtensionRunningLocation {\n\tNone,\n\tLocalProcess,\n\tLocalWebWorker,\n\tRemote\n}\n\nexport const enum ExtensionRunningPreference {\n\tNone,\n\tLocal,\n\tRemote\n}\n\nexport abstract class AbstractExtensionService extends Disposable implements IExtensionService {\n\n\tpublic _serviceBrand: undefined;\n\n\tprotected readonly _onDidRegisterExtensions: Emitter<void> = this._register(new Emitter<void>());\n\tpublic readonly onDidRegisterExtensions = this._onDidRegisterExtensions.event;\n\n\tprotected readonly _onDidChangeExtensionsStatus: Emitter<ExtensionIdentifier[]> = this._register(new Emitter<ExtensionIdentifier[]>());\n\tpublic readonly onDidChangeExtensionsStatus: Event<ExtensionIdentifier[]> = this._onDidChangeExtensionsStatus.event;\n\n\tprotected readonly _onDidChangeExtensions: Emitter<void> = this._register(new Emitter<void>({ leakWarningThreshold: 400 }));\n\tpublic readonly onDidChangeExtensions: Event<void> = this._onDidChangeExtensions.event;\n\n\tprotected readonly _onWillActivateByEvent = this._register(new Emitter<IWillActivateEvent>());\n\tpublic readonly onWillActivateByEvent: Event<IWillActivateEvent> = this._onWillActivateByEvent.event;\n\n\tprotected readonly _onDidChangeResponsiveChange = this._register(new Emitter<IResponsiveStateChangeEvent>());\n\tpublic readonly onDidChangeResponsiveChange: Event<IResponsiveStateChangeEvent> = this._onDidChangeResponsiveChange.event;\n\n\tprotected readonly _registry: ExtensionDescriptionRegistry;\n\tprivate readonly _installedExtensionsReady: Barrier;\n\tprotected readonly _isDev: boolean;\n\tprivate readonly _extensionsMessages: Map<string, IMessage[]>;\n\tprotected readonly _allRequestedActivateEvents = new Set<string>();\n\tprivate readonly _proposedApiController: ProposedApiController;\n\tprivate readonly _isExtensionDevHost: boolean;\n\tprotected readonly _isExtensionDevTestFromCli: boolean;\n\n\tprivate _deltaExtensionsQueue: DeltaExtensionsQueueItem[];\n\tprivate _inHandleDeltaExtensions: boolean;\n\tprivate readonly _onDidFinishHandleDeltaExtensions = this._register(new Emitter<void>());\n\n\tprotected _runningLocation: Map<string, ExtensionRunningLocation>;\n\n\t// --- Members used per extension host process\n\tprotected _extensionHostManagers: ExtensionHostManager[];\n\tprotected _extensionHostActiveExtensions: Map<string, ExtensionIdentifier>;\n\tprivate _extensionHostActivationTimes: Map<string, ActivationTimes>;\n\tprivate _extensionHostExtensionRuntimeErrors: Map<string, Error[]>;\n\n\tconstructor(\n\t\tprotected readonly _runningLocationClassifier: ExtensionRunningLocationClassifier,\n\t\t@IInstantiationService protected readonly _instantiationService: IInstantiationService,\n\t\t@INotificationService protected readonly _notificationService: INotificationService,\n\t\t@IWorkbenchEnvironmentService protected readonly _environmentService: IWorkbenchEnvironmentService,\n\t\t@ITelemetryService protected readonly _telemetryService: ITelemetryService,\n\t\t@IWorkbenchExtensionEnablementService protected readonly _extensionEnablementService: IWorkbenchExtensionEnablementService,\n\t\t@IFileService protected readonly _fileService: IFileService,\n\t\t@IProductService protected readonly _productService: IProductService,\n\t\t@IExtensionManagementService protected readonly _extensionManagementService: IExtensionManagementService,\n\t\t@IWorkspaceContextService private readonly _contextService: IWorkspaceContextService,\n\t\t@IConfigurationService protected readonly _configurationService: IConfigurationService,\n\t\t@IExtensionManifestPropertiesService protected readonly _extensionManifestPropertiesService: IExtensionManifestPropertiesService,\n\t) {\n\t\tsuper();\n\n\t\t// help the file service to activate providers by activating extensions by file system event\n\t\tthis._register(this._fileService.onWillActivateFileSystemProvider(e => {\n\t\t\te.join(this.activateByEvent(`onFileSystem:${e.scheme}`));\n\t\t}));\n\n\t\tthis._registry = new ExtensionDescriptionRegistry([]);\n\t\tthis._installedExtensionsReady = new Barrier();\n\t\tthis._isDev = !this._environmentService.isBuilt || this._environmentService.isExtensionDevelopment;\n\t\tthis._extensionsMessages = new Map<string, IMessage[]>();\n\t\tthis._proposedApiController = new ProposedApiController(this._environmentService, this._productService);\n\n\t\tthis._extensionHostManagers = [];\n\t\tthis._extensionHostActiveExtensions = new Map<string, ExtensionIdentifier>();\n\t\tthis._extensionHostActivationTimes = new Map<string, ActivationTimes>();\n\t\tthis._extensionHostExtensionRuntimeErrors = new Map<string, Error[]>();\n\n\t\tconst devOpts = parseExtensionDevOptions(this._environmentService);\n\t\tthis._isExtensionDevHost = devOpts.isExtensionDevHost;\n\t\tthis._isExtensionDevTestFromCli = devOpts.isExtensionDevTestFromCli;\n\n\t\tthis._deltaExtensionsQueue = [];\n\t\tthis._inHandleDeltaExtensions = false;\n\n\t\tthis._runningLocation = new Map<string, ExtensionRunningLocation>();\n\n\t\tthis._register(this._extensionEnablementService.onEnablementChanged((extensions) => {\n\t\t\tlet toAdd: IExtension[] = [];\n\t\t\tlet toRemove: string[] = [];\n\t\t\tfor (const extension of extensions) {\n\t\t\t\tif (this._safeInvokeIsEnabled(extension)) {\n\t\t\t\t\t// an extension has been enabled\n\t\t\t\t\ttoAdd.push(extension);\n\t\t\t\t} else {\n\t\t\t\t\t// an extension has been disabled\n\t\t\t\t\ttoRemove.push(extension.identifier.id);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._handleDeltaExtensions(new DeltaExtensionsQueueItem(toAdd, toRemove));\n\t\t}));\n\n\t\tthis._register(this._extensionManagementService.onDidInstallExtension((event) => {\n\t\t\tif (event.local) {\n\t\t\t\tif (this._safeInvokeIsEnabled(event.local)) {\n\t\t\t\t\t// an extension has been installed\n\t\t\t\t\tthis._handleDeltaExtensions(new DeltaExtensionsQueueItem([event.local], []));\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this._extensionManagementService.onDidUninstallExtension((event) => {\n\t\t\tif (!event.error) {\n\t\t\t\t// an extension has been uninstalled\n\t\t\t\tthis._handleDeltaExtensions(new DeltaExtensionsQueueItem([], [event.identifier.id]));\n\t\t\t}\n\t\t}));\n\t}\n\n\tprotected _getExtensionKind(extensionDescription: IExtensionDescription): ExtensionKind[] {\n\t\tif (extensionDescription.isUnderDevelopment && this._environmentService.extensionDevelopmentKind) {\n\t\t\treturn this._environmentService.extensionDevelopmentKind;\n\t\t}\n\n\t\treturn this._extensionManifestPropertiesService.getExtensionKind(extensionDescription);\n\t}\n\n\tprotected _getExtensionHostManager(kind: ExtensionHostKind): ExtensionHostManager | null {\n\t\tfor (const extensionHostManager of this._extensionHostManagers) {\n\t\t\tif (extensionHostManager.kind === kind) {\n\t\t\t\treturn extensionHostManager;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t//#region deltaExtensions\n\n\tprivate async _handleDeltaExtensions(item: DeltaExtensionsQueueItem): Promise<void> {\n\t\tthis._deltaExtensionsQueue.push(item);\n\t\tif (this._inHandleDeltaExtensions) {\n\t\t\t// Let the current item finish, the new one will be picked up\n\t\t\treturn;\n\t\t}\n\n\t\twhile (this._deltaExtensionsQueue.length > 0) {\n\t\t\tconst item = this._deltaExtensionsQueue.shift()!;\n\t\t\ttry {\n\t\t\t\tthis._inHandleDeltaExtensions = true;\n\t\t\t\tawait this._deltaExtensions(item.toAdd, item.toRemove);\n\t\t\t} finally {\n\t\t\t\tthis._inHandleDeltaExtensions = false;\n\t\t\t}\n\t\t}\n\n\t\tthis._onDidFinishHandleDeltaExtensions.fire();\n\t}\n\n\tprivate async _deltaExtensions(_toAdd: IExtension[], _toRemove: string[]): Promise<void> {\n\t\tlet toAdd: IExtensionDescription[] = [];\n\t\tfor (let i = 0, len = _toAdd.length; i < len; i++) {\n\t\t\tconst extension = _toAdd[i];\n\n\t\t\tconst extensionDescription = await this._scanSingleExtension(extension);\n\t\t\tif (!extensionDescription) {\n\t\t\t\t// could not scan extension...\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (!this.canAddExtension(extensionDescription)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\ttoAdd.push(extensionDescription);\n\t\t}\n\n\t\tlet toRemove: IExtensionDescription[] = [];\n\t\tfor (let i = 0, len = _toRemove.length; i < len; i++) {\n\t\t\tconst extensionId = _toRemove[i];\n\t\t\tconst extensionDescription = this._registry.getExtensionDescription(extensionId);\n\t\t\tif (!extensionDescription) {\n\t\t\t\t// ignore disabling/uninstalling an extension which is not running\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (!this.canRemoveExtension(extensionDescription)) {\n\t\t\t\t// uses non-dynamic extension point or is activated\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\ttoRemove.push(extensionDescription);\n\t\t}\n\n\t\tif (toAdd.length === 0 && toRemove.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Update the local registry\n\t\tconst result = this._registry.deltaExtensions(toAdd, toRemove.map(e => e.identifier));\n\t\tthis._onDidChangeExtensions.fire(undefined);\n\n\t\ttoRemove = toRemove.concat(result.removedDueToLooping);\n\t\tif (result.removedDueToLooping.length > 0) {\n\t\t\tthis._logOrShowMessage(Severity.Error, nls.localize('looping', \"The following extensions contain dependency loops and have been disabled: {0}\", result.removedDueToLooping.map(e => `'${e.identifier.value}'`).join(', ')));\n\t\t}\n\n\t\t// enable or disable proposed API per extension\n\t\tthis._checkEnableProposedApi(toAdd);\n\n\t\t// Update extension points\n\t\tthis._doHandleExtensionPoints((<IExtensionDescription[]>[]).concat(toAdd).concat(toRemove));\n\n\t\t// Update the extension host\n\t\tawait this._updateExtensionsOnExtHosts(toAdd, toRemove.map(e => e.identifier));\n\n\t\tfor (let i = 0; i < toAdd.length; i++) {\n\t\t\tthis._activateAddedExtensionIfNeeded(toAdd[i]);\n\t\t}\n\t}\n\n\tprivate async _updateExtensionsOnExtHosts(toAdd: IExtensionDescription[], toRemove: ExtensionIdentifier[]): Promise<void> {\n\t\tconst groupedToRemove: ExtensionIdentifier[][] = [];\n\t\tconst groupRemove = (extensionHostKind: ExtensionHostKind, extensionRunningLocation: ExtensionRunningLocation) => {\n\t\t\tgroupedToRemove[extensionHostKind] = filterByRunningLocation(toRemove, extId => extId, this._runningLocation, extensionRunningLocation);\n\t\t};\n\t\tgroupRemove(ExtensionHostKind.LocalProcess, ExtensionRunningLocation.LocalProcess);\n\t\tgroupRemove(ExtensionHostKind.LocalWebWorker, ExtensionRunningLocation.LocalWebWorker);\n\t\tgroupRemove(ExtensionHostKind.Remote, ExtensionRunningLocation.Remote);\n\t\tfor (const extensionId of toRemove) {\n\t\t\tthis._runningLocation.delete(ExtensionIdentifier.toKey(extensionId));\n\t\t}\n\n\t\tconst groupedToAdd: IExtensionDescription[][] = [];\n\t\tconst groupAdd = (extensionHostKind: ExtensionHostKind, extensionRunningLocation: ExtensionRunningLocation) => {\n\t\t\tgroupedToAdd[extensionHostKind] = filterByRunningLocation(toAdd, ext => ext.identifier, this._runningLocation, extensionRunningLocation);\n\t\t};\n\t\tfor (const extension of toAdd) {\n\t\t\tconst extensionKind = this._getExtensionKind(extension);\n\t\t\tconst isRemote = extension.extensionLocation.scheme === Schemas.vscodeRemote;\n\t\t\tconst runningLocation = this._runningLocationClassifier.pickRunningLocation(extensionKind, !isRemote, isRemote, ExtensionRunningPreference.None);\n\t\t\tthis._runningLocation.set(ExtensionIdentifier.toKey(extension.identifier), runningLocation);\n\t\t}\n\t\tgroupAdd(ExtensionHostKind.LocalProcess, ExtensionRunningLocation.LocalProcess);\n\t\tgroupAdd(ExtensionHostKind.LocalWebWorker, ExtensionRunningLocation.LocalWebWorker);\n\t\tgroupAdd(ExtensionHostKind.Remote, ExtensionRunningLocation.Remote);\n\n\t\tconst promises: Promise<void>[] = [];\n\n\t\tfor (const extensionHostKind of [ExtensionHostKind.LocalProcess, ExtensionHostKind.LocalWebWorker, ExtensionHostKind.Remote]) {\n\t\t\tconst toAdd = groupedToAdd[extensionHostKind];\n\t\t\tconst toRemove = groupedToRemove[extensionHostKind];\n\t\t\tif (toAdd.length > 0 || toRemove.length > 0) {\n\t\t\t\tconst extensionHostManager = this._getExtensionHostManager(extensionHostKind);\n\t\t\t\tif (extensionHostManager) {\n\t\t\t\t\tpromises.push(extensionHostManager.deltaExtensions(toAdd, toRemove));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tawait Promise.all(promises);\n\t}\n\n\tpublic canAddExtension(extension: IExtensionDescription): boolean {\n\t\tconst existing = this._registry.getExtensionDescription(extension.identifier);\n\t\tif (existing) {\n\t\t\t// this extension is already running (most likely at a different version)\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check if extension is renamed\n\t\tif (extension.uuid && this._registry.getAllExtensionDescriptions().some(e => e.uuid === extension.uuid)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst extensionKind = this._getExtensionKind(extension);\n\t\tconst isRemote = extension.extensionLocation.scheme === Schemas.vscodeRemote;\n\t\tconst runningLocation = this._runningLocationClassifier.pickRunningLocation(extensionKind, !isRemote, isRemote, ExtensionRunningPreference.None);\n\t\tif (runningLocation === ExtensionRunningLocation.None) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tpublic canRemoveExtension(extension: IExtensionDescription): boolean {\n\t\tconst extensionDescription = this._registry.getExtensionDescription(extension.identifier);\n\t\tif (!extensionDescription) {\n\t\t\t// ignore removing an extension which is not running\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this._extensionHostActiveExtensions.has(ExtensionIdentifier.toKey(extensionDescription.identifier))) {\n\t\t\t// Extension is running, cannot remove it safely\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate async _activateAddedExtensionIfNeeded(extensionDescription: IExtensionDescription): Promise<void> {\n\t\tlet shouldActivate = false;\n\t\tlet shouldActivateReason: string | null = null;\n\t\tlet hasWorkspaceContains = false;\n\t\tif (Array.isArray(extensionDescription.activationEvents)) {\n\t\t\tfor (let activationEvent of extensionDescription.activationEvents) {\n\t\t\t\t// TODO@joao: there's no easy way to contribute this\n\t\t\t\tif (activationEvent === 'onUri') {\n\t\t\t\t\tactivationEvent = `onUri:${ExtensionIdentifier.toKey(extensionDescription.identifier)}`;\n\t\t\t\t}\n\n\t\t\t\tif (this._allRequestedActivateEvents.has(activationEvent)) {\n\t\t\t\t\t// This activation event was fired before the extension was added\n\t\t\t\t\tshouldActivate = true;\n\t\t\t\t\tshouldActivateReason = activationEvent;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (activationEvent === '*') {\n\t\t\t\t\tshouldActivate = true;\n\t\t\t\t\tshouldActivateReason = activationEvent;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (/^workspaceContains/.test(activationEvent)) {\n\t\t\t\t\thasWorkspaceContains = true;\n\t\t\t\t}\n\n\t\t\t\tif (activationEvent === 'onStartupFinished') {\n\t\t\t\t\tshouldActivate = true;\n\t\t\t\t\tshouldActivateReason = activationEvent;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (shouldActivate) {\n\t\t\tawait Promise.all(\n\t\t\t\tthis._extensionHostManagers.map(extHostManager => extHostManager.activate(extensionDescription.identifier, { startup: false, extensionId: extensionDescription.identifier, activationEvent: shouldActivateReason! }))\n\t\t\t).then(() => { });\n\t\t} else if (hasWorkspaceContains) {\n\t\t\tconst workspace = await this._contextService.getCompleteWorkspace();\n\t\t\tconst forceUsingSearch = !!this._environmentService.remoteAuthority;\n\t\t\tconst host: IWorkspaceContainsActivationHost = {\n\t\t\t\tfolders: workspace.folders.map(folder => folder.uri),\n\t\t\t\tforceUsingSearch: forceUsingSearch,\n\t\t\t\texists: (uri) => this._fileService.exists(uri),\n\t\t\t\tcheckExists: (folders, includes, token) => this._instantiationService.invokeFunction((accessor) => checkGlobFileExists(accessor, folders, includes, token))\n\t\t\t};\n\n\t\t\tconst result = await checkActivateWorkspaceContainsExtension(host, extensionDescription);\n\t\t\tif (!result) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tawait Promise.all(\n\t\t\t\tthis._extensionHostManagers.map(extHostManager => extHostManager.activate(extensionDescription.identifier, { startup: false, extensionId: extensionDescription.identifier, activationEvent: result.activationEvent }))\n\t\t\t).then(() => { });\n\t\t}\n\t}\n\n\t//#endregion\n\n\tprotected async _initialize(): Promise<void> {\n\t\tperf.mark('code/willLoadExtensions');\n\t\tthis._startExtensionHosts(true, []);\n\t\tawait this._scanAndHandleExtensions();\n\t\tthis._releaseBarrier();\n\t\tperf.mark('code/didLoadExtensions');\n\t\tawait this._handleExtensionTests();\n\t}\n\n\tprivate async _handleExtensionTests(): Promise<void> {\n\t\tif (!this._environmentService.isExtensionDevelopment || !this._environmentService.extensionTestsLocationURI) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst extensionHostManager = this.findTestExtensionHost(this._environmentService.extensionTestsLocationURI);\n\t\tif (!extensionHostManager) {\n\t\t\tconst msg = nls.localize('extensionTestError', \"No extension host found that can launch the test runner at {0}.\", this._environmentService.extensionTestsLocationURI.toString());\n\t\t\tconsole.error(msg);\n\t\t\tthis._notificationService.error(msg);\n\t\t\treturn;\n\t\t}\n\n\n\t\tlet exitCode: number;\n\t\ttry {\n\t\t\texitCode = await extensionHostManager.extensionTestsExecute();\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\texitCode = 1 /* ERROR */;\n\t\t}\n\n\t\tawait extensionHostManager.extensionTestsSendExit(exitCode);\n\t\tthis._onExtensionHostExit(exitCode);\n\t}\n\n\tprivate findTestExtensionHost(testLocation: URI): ExtensionHostManager | undefined | null {\n\t\tlet extensionHostKind: ExtensionHostKind | undefined;\n\n\t\tfor (const extension of this._registry.getAllExtensionDescriptions()) {\n\t\t\tif (isEqualOrParent(testLocation, extension.extensionLocation)) {\n\t\t\t\tconst runningLocation = this._runningLocation.get(ExtensionIdentifier.toKey(extension.identifier));\n\t\t\t\tif (runningLocation === ExtensionRunningLocation.LocalProcess) {\n\t\t\t\t\textensionHostKind = ExtensionHostKind.LocalProcess;\n\t\t\t\t} else if (runningLocation === ExtensionRunningLocation.LocalWebWorker) {\n\t\t\t\t\textensionHostKind = ExtensionHostKind.LocalWebWorker;\n\t\t\t\t} else if (runningLocation === ExtensionRunningLocation.Remote) {\n\t\t\t\t\textensionHostKind = ExtensionHostKind.Remote;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (extensionHostKind === undefined) {\n\t\t\t// not sure if we should support that, but it was possible to have an test outside an extension\n\n\t\t\tif (testLocation.scheme === Schemas.vscodeRemote) {\n\t\t\t\textensionHostKind = ExtensionHostKind.Remote;\n\t\t\t} else {\n\t\t\t\t// When a debugger attaches to the extension host, it will surface all console.log messages from the extension host,\n\t\t\t\t// but not necessarily from the window. So it would be best if any errors get printed to the console of the extension host.\n\t\t\t\t// That is why here we use the local process extension host even for non-file URIs\n\t\t\t\textensionHostKind = ExtensionHostKind.LocalProcess;\n\t\t\t}\n\t\t}\n\t\tif (extensionHostKind !== undefined) {\n\t\t\treturn this._getExtensionHostManager(extensionHostKind);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate _releaseBarrier(): void {\n\t\tthis._installedExtensionsReady.open();\n\t\tthis._onDidRegisterExtensions.fire(undefined);\n\t\tthis._onDidChangeExtensionsStatus.fire(this._registry.getAllExtensionDescriptions().map(e => e.identifier));\n\t}\n\n\t//#region Stopping / Starting / Restarting\n\n\tpublic stopExtensionHosts(): void {\n\t\tlet previouslyActivatedExtensionIds: ExtensionIdentifier[] = [];\n\t\tthis._extensionHostActiveExtensions.forEach((value) => {\n\t\t\tpreviouslyActivatedExtensionIds.push(value);\n\t\t});\n\n\t\tfor (const manager of this._extensionHostManagers) {\n\t\t\tmanager.dispose();\n\t\t}\n\t\tthis._extensionHostManagers = [];\n\t\tthis._extensionHostActiveExtensions = new Map<string, ExtensionIdentifier>();\n\t\tthis._extensionHostActivationTimes = new Map<string, ActivationTimes>();\n\t\tthis._extensionHostExtensionRuntimeErrors = new Map<string, Error[]>();\n\n\t\tif (previouslyActivatedExtensionIds.length > 0) {\n\t\t\tthis._onDidChangeExtensionsStatus.fire(previouslyActivatedExtensionIds);\n\t\t}\n\t}\n\n\tprivate _startExtensionHosts(isInitialStart: boolean, initialActivationEvents: string[]): void {\n\t\tconst extensionHosts = this._createExtensionHosts(isInitialStart);\n\t\textensionHosts.forEach((extensionHost) => {\n\t\t\tconst processManager = this._instantiationService.createInstance(ExtensionHostManager, extensionHost, initialActivationEvents);\n\t\t\tprocessManager.onDidExit(([code, signal]) => this._onExtensionHostCrashOrExit(processManager, code, signal));\n\t\t\tprocessManager.onDidChangeResponsiveState((responsiveState) => { this._onDidChangeResponsiveChange.fire({ isResponsive: responsiveState === ResponsiveState.Responsive }); });\n\t\t\tthis._extensionHostManagers.push(processManager);\n\t\t});\n\t}\n\n\tprivate _onExtensionHostCrashOrExit(extensionHost: ExtensionHostManager, code: number, signal: string | null): void {\n\n\t\t// Unexpected termination\n\t\tif (!this._isExtensionDevHost) {\n\t\t\tthis._onExtensionHostCrashed(extensionHost, code, signal);\n\t\t\treturn;\n\t\t}\n\n\t\tthis._onExtensionHostExit(code);\n\t}\n\n\tprotected _onExtensionHostCrashed(extensionHost: ExtensionHostManager, code: number, signal: string | null): void {\n\t\tconsole.error('Extension host terminated unexpectedly. Code: ', code, ' Signal: ', signal);\n\t\tif (extensionHost.kind === ExtensionHostKind.LocalProcess) {\n\t\t\tthis.stopExtensionHosts();\n\t\t} else if (extensionHost.kind === ExtensionHostKind.Remote) {\n\t\t\tfor (let i = 0; i < this._extensionHostManagers.length; i++) {\n\t\t\t\tif (this._extensionHostManagers[i] === extensionHost) {\n\t\t\t\t\tthis._extensionHostManagers[i].dispose();\n\t\t\t\t\tthis._extensionHostManagers.splice(i, 1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic async startExtensionHosts(): Promise<void> {\n\t\tthis.stopExtensionHosts();\n\n\t\tif (this._inHandleDeltaExtensions) {\n\t\t\tawait Event.toPromise(this._onDidFinishHandleDeltaExtensions.event);\n\t\t}\n\n\t\tthis._startExtensionHosts(false, Array.from(this._allRequestedActivateEvents.keys()));\n\t}\n\n\tpublic async restartExtensionHost(): Promise<void> {\n\t\tthis.stopExtensionHosts();\n\t\tawait this.startExtensionHosts();\n\t}\n\n\t//#endregion\n\n\t//#region IExtensionService\n\n\tpublic activateByEvent(activationEvent: string, activationKind: ActivationKind = ActivationKind.Normal): Promise<void> {\n\t\tif (this._installedExtensionsReady.isOpen()) {\n\t\t\t// Extensions have been scanned and interpreted\n\n\t\t\t// Record the fact that this activationEvent was requested (in case of a restart)\n\t\t\tthis._allRequestedActivateEvents.add(activationEvent);\n\n\t\t\tif (!this._registry.containsActivationEvent(activationEvent)) {\n\t\t\t\t// There is no extension that is interested in this activation event\n\t\t\t\treturn NO_OP_VOID_PROMISE;\n\t\t\t}\n\n\t\t\treturn this._activateByEvent(activationEvent, activationKind);\n\t\t} else {\n\t\t\t// Extensions have not been scanned yet.\n\n\t\t\t// Record the fact that this activationEvent was requested (in case of a restart)\n\t\t\tthis._allRequestedActivateEvents.add(activationEvent);\n\n\t\t\tif (activationKind === ActivationKind.Immediate) {\n\t\t\t\t// Do not wait for the normal start-up of the extension host(s)\n\t\t\t\treturn this._activateByEvent(activationEvent, activationKind);\n\t\t\t}\n\n\t\t\treturn this._installedExtensionsReady.wait().then(() => this._activateByEvent(activationEvent, activationKind));\n\t\t}\n\t}\n\n\tprivate _activateByEvent(activationEvent: string, activationKind: ActivationKind): Promise<void> {\n\t\tconst result = Promise.all(\n\t\t\tthis._extensionHostManagers.map(extHostManager => extHostManager.activateByEvent(activationEvent, activationKind))\n\t\t).then(() => { });\n\t\tthis._onWillActivateByEvent.fire({\n\t\t\tevent: activationEvent,\n\t\t\tactivation: result\n\t\t});\n\t\treturn result;\n\t}\n\n\tpublic whenInstalledExtensionsRegistered(): Promise<boolean> {\n\t\treturn this._installedExtensionsReady.wait();\n\t}\n\n\tpublic getExtensions(): Promise<IExtensionDescription[]> {\n\t\treturn this._installedExtensionsReady.wait().then(() => {\n\t\t\treturn this._registry.getAllExtensionDescriptions();\n\t\t});\n\t}\n\n\tpublic getExtension(id: string): Promise<IExtensionDescription | undefined> {\n\t\treturn this._installedExtensionsReady.wait().then(() => {\n\t\t\treturn this._registry.getExtensionDescription(id);\n\t\t});\n\t}\n\n\tpublic readExtensionPointContributions<T extends IExtensionContributions[keyof IExtensionContributions]>(extPoint: IExtensionPoint<T>): Promise<ExtensionPointContribution<T>[]> {\n\t\treturn this._installedExtensionsReady.wait().then(() => {\n\t\t\tconst availableExtensions = this._registry.getAllExtensionDescriptions();\n\n\t\t\tconst result: ExtensionPointContribution<T>[] = [];\n\t\t\tfor (const desc of availableExtensions) {\n\t\t\t\tif (desc.contributes && hasOwnProperty.call(desc.contributes, extPoint.name)) {\n\t\t\t\t\tresult.push(new ExtensionPointContribution<T>(desc, desc.contributes[extPoint.name as keyof typeof desc.contributes] as T));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn result;\n\t\t});\n\t}\n\n\tpublic getExtensionsStatus(): { [id: string]: IExtensionsStatus; } {\n\t\tlet result: { [id: string]: IExtensionsStatus; } = Object.create(null);\n\t\tif (this._registry) {\n\t\t\tconst extensions = this._registry.getAllExtensionDescriptions();\n\t\t\tfor (const extension of extensions) {\n\t\t\t\tconst extensionKey = ExtensionIdentifier.toKey(extension.identifier);\n\t\t\t\tresult[extension.identifier.value] = {\n\t\t\t\t\tmessages: this._extensionsMessages.get(extensionKey) || [],\n\t\t\t\t\tactivationTimes: this._extensionHostActivationTimes.get(extensionKey),\n\t\t\t\t\truntimeErrors: this._extensionHostExtensionRuntimeErrors.get(extensionKey) || [],\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic getInspectPort(_tryEnableInspector: boolean): Promise<number> {\n\t\treturn Promise.resolve(0);\n\t}\n\n\tpublic async setRemoteEnvironment(env: { [key: string]: string | null }): Promise<void> {\n\t\tawait this._extensionHostManagers\n\t\t\t.map(manager => manager.setRemoteEnvironment(env));\n\t}\n\n\t//#endregion\n\n\t// --- impl\n\n\tprotected _checkEnableProposedApi(extensions: IExtensionDescription[]): void {\n\t\tfor (let extension of extensions) {\n\t\t\tthis._proposedApiController.updateEnableProposedApi(extension);\n\t\t}\n\t}\n\n\tprotected _checkEnabledAndProposedAPI(extensions: IExtensionDescription[]): IExtensionDescription[] {\n\t\t// enable or disable proposed API per extension\n\t\tthis._checkEnableProposedApi(extensions);\n\n\t\t// keep only enabled extensions\n\t\treturn extensions.filter(extension => this._isEnabled(extension));\n\t}\n\n\tprotected _isEnabled(extension: IExtensionDescription): boolean {\n\t\tif (extension.isUnderDevelopment) {\n\t\t\t// Never disable extensions under development\n\t\t\treturn true;\n\t\t}\n\n\t\tif (ExtensionIdentifier.equals(extension.identifier, BetterMergeId)) {\n\t\t\t// Check if this is the better merge extension which was migrated to a built-in extension\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this._safeInvokeIsEnabled(toExtension(extension));\n\t}\n\n\tprotected _safeInvokeIsEnabled(extension: IExtension): boolean {\n\t\ttry {\n\t\t\treturn this._extensionEnablementService.isEnabled(extension);\n\t\t} catch (err) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tprotected _doHandleExtensionPoints(affectedExtensions: IExtensionDescription[]): void {\n\t\tconst affectedExtensionPoints: { [extPointName: string]: boolean; } = Object.create(null);\n\t\tfor (let extensionDescription of affectedExtensions) {\n\t\t\tif (extensionDescription.contributes) {\n\t\t\t\tfor (let extPointName in extensionDescription.contributes) {\n\t\t\t\t\tif (hasOwnProperty.call(extensionDescription.contributes, extPointName)) {\n\t\t\t\t\t\taffectedExtensionPoints[extPointName] = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst messageHandler = (msg: IMessage) => this._handleExtensionPointMessage(msg);\n\t\tconst availableExtensions = this._registry.getAllExtensionDescriptions();\n\t\tconst extensionPoints = ExtensionsRegistry.getExtensionPoints();\n\t\tperf.mark('code/willHandleExtensionPoints');\n\t\tfor (const extensionPoint of extensionPoints) {\n\t\t\tif (affectedExtensionPoints[extensionPoint.name]) {\n\t\t\t\tAbstractExtensionService._handleExtensionPoint(extensionPoint, availableExtensions, messageHandler);\n\t\t\t}\n\t\t}\n\t\tperf.mark('code/didHandleExtensionPoints');\n\t}\n\n\tprivate _handleExtensionPointMessage(msg: IMessage) {\n\t\tconst extensionKey = ExtensionIdentifier.toKey(msg.extensionId);\n\n\t\tif (!this._extensionsMessages.has(extensionKey)) {\n\t\t\tthis._extensionsMessages.set(extensionKey, []);\n\t\t}\n\t\tthis._extensionsMessages.get(extensionKey)!.push(msg);\n\n\t\tconst extension = this._registry.getExtensionDescription(msg.extensionId);\n\t\tconst strMsg = `[${msg.extensionId.value}]: ${msg.message}`;\n\t\tif (extension && extension.isUnderDevelopment) {\n\t\t\t// This message is about the extension currently being developed\n\t\t\tthis._showMessageToUser(msg.type, strMsg);\n\t\t} else {\n\t\t\tthis._logMessageInConsole(msg.type, strMsg);\n\t\t}\n\n\t\tif (!this._isDev && msg.extensionId) {\n\t\t\tconst { type, extensionId, extensionPointId, message } = msg;\n\t\t\ttype ExtensionsMessageClassification = {\n\t\t\t\ttype: { classification: 'SystemMetaData', purpose: 'PerformanceAndHealth', isMeasurement: true };\n\t\t\t\textensionId: { classification: 'SystemMetaData', purpose: 'PerformanceAndHealth' };\n\t\t\t\textensionPointId: { classification: 'SystemMetaData', purpose: 'PerformanceAndHealth' };\n\t\t\t\tmessage: { classification: 'SystemMetaData', purpose: 'PerformanceAndHealth' };\n\t\t\t};\n\t\t\ttype ExtensionsMessageEvent = {\n\t\t\t\ttype: Severity;\n\t\t\t\textensionId: string;\n\t\t\t\textensionPointId: string;\n\t\t\t\tmessage: string;\n\t\t\t};\n\t\t\tthis._telemetryService.publicLog2<ExtensionsMessageEvent, ExtensionsMessageClassification>('extensionsMessage', {\n\t\t\t\ttype, extensionId: extensionId.value, extensionPointId, message\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate static _handleExtensionPoint<T extends IExtensionContributions[keyof IExtensionContributions]>(extensionPoint: ExtensionPoint<T>, availableExtensions: IExtensionDescription[], messageHandler: (msg: IMessage) => void): void {\n\t\tconst users: IExtensionPointUser<T>[] = [];\n\t\tfor (const desc of availableExtensions) {\n\t\t\tif (desc.contributes && hasOwnProperty.call(desc.contributes, extensionPoint.name)) {\n\t\t\t\tusers.push({\n\t\t\t\t\tdescription: desc,\n\t\t\t\t\tvalue: desc.contributes[extensionPoint.name as keyof typeof desc.contributes] as T,\n\t\t\t\t\tcollector: new ExtensionMessageCollector(messageHandler, desc, extensionPoint.name)\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\textensionPoint.acceptUsers(users);\n\t}\n\n\tprivate _showMessageToUser(severity: Severity, msg: string): void {\n\t\tif (severity === Severity.Error || severity === Severity.Warning) {\n\t\t\tthis._notificationService.notify({ severity, message: msg });\n\t\t} else {\n\t\t\tthis._logMessageInConsole(severity, msg);\n\t\t}\n\t}\n\n\tprivate _logMessageInConsole(severity: Severity, msg: string): void {\n\t\tif (severity === Severity.Error) {\n\t\t\tconsole.error(msg);\n\t\t} else if (severity === Severity.Warning) {\n\t\t\tconsole.warn(msg);\n\t\t} else {\n\t\t\tconsole.log(msg);\n\t\t}\n\t}\n\n\t//#region Called by extension host\n\n\tprotected _logOrShowMessage(severity: Severity, msg: string): void {\n\t\tif (this._isDev) {\n\t\t\tthis._showMessageToUser(severity, msg);\n\t\t} else {\n\t\t\tthis._logMessageInConsole(severity, msg);\n\t\t}\n\t}\n\n\tpublic async _activateById(extensionId: ExtensionIdentifier, reason: ExtensionActivationReason): Promise<void> {\n\t\tconst results = await Promise.all(\n\t\t\tthis._extensionHostManagers.map(manager => manager.activate(extensionId, reason))\n\t\t);\n\t\tconst activated = results.some(e => e);\n\t\tif (!activated) {\n\t\t\tthrow new Error(`Unknown extension ${extensionId.value}`);\n\t\t}\n\t}\n\n\tpublic _onWillActivateExtension(extensionId: ExtensionIdentifier): void {\n\t\tthis._extensionHostActiveExtensions.set(ExtensionIdentifier.toKey(extensionId), extensionId);\n\t}\n\n\tpublic _onDidActivateExtension(extensionId: ExtensionIdentifier, codeLoadingTime: number, activateCallTime: number, activateResolvedTime: number, activationReason: ExtensionActivationReason): void {\n\t\tthis._extensionHostActivationTimes.set(ExtensionIdentifier.toKey(extensionId), new ActivationTimes(codeLoadingTime, activateCallTime, activateResolvedTime, activationReason));\n\t\tthis._onDidChangeExtensionsStatus.fire([extensionId]);\n\t}\n\n\tpublic _onDidActivateExtensionError(extensionId: ExtensionIdentifier, error: Error): void {\n\t\ttype ExtensionActivationErrorClassification = {\n\t\t\textensionId: { classification: 'SystemMetaData', purpose: 'PerformanceAndHealth' };\n\t\t\terror: { classification: 'SystemMetaData', purpose: 'PerformanceAndHealth' };\n\t\t};\n\t\ttype ExtensionActivationErrorEvent = {\n\t\t\textensionId: string;\n\t\t\terror: string;\n\t\t};\n\t\tthis._telemetryService.publicLog2<ExtensionActivationErrorEvent, ExtensionActivationErrorClassification>('extensionActivationError', {\n\t\t\textensionId: extensionId.value,\n\t\t\terror: error.message\n\t\t});\n\t}\n\n\tpublic _onExtensionRuntimeError(extensionId: ExtensionIdentifier, err: Error): void {\n\t\tconst extensionKey = ExtensionIdentifier.toKey(extensionId);\n\t\tif (!this._extensionHostExtensionRuntimeErrors.has(extensionKey)) {\n\t\t\tthis._extensionHostExtensionRuntimeErrors.set(extensionKey, []);\n\t\t}\n\t\tthis._extensionHostExtensionRuntimeErrors.get(extensionKey)!.push(err);\n\t\tthis._onDidChangeExtensionsStatus.fire([extensionId]);\n\t}\n\n\t//#endregion\n\n\tprotected abstract _createExtensionHosts(isInitialStart: boolean): IExtensionHost[];\n\tprotected abstract _scanAndHandleExtensions(): Promise<void>;\n\tprotected abstract _scanSingleExtension(extension: IExtension): Promise<IExtensionDescription | null>;\n\tpublic abstract _onExtensionHostExit(code: number): void;\n}\n\nexport class ExtensionRunningLocationClassifier {\n\tconstructor(\n\t\tpublic readonly getExtensionKind: (extensionDescription: IExtensionDescription) => ExtensionKind[],\n\t\tpublic readonly pickRunningLocation: (extensionKinds: ExtensionKind[], isInstalledLocally: boolean, isInstalledRemotely: boolean, preference: ExtensionRunningPreference) => ExtensionRunningLocation,\n\t) {\n\t}\n\n\tpublic determineRunningLocation(localExtensions: IExtensionDescription[], remoteExtensions: IExtensionDescription[]): Map<string, ExtensionRunningLocation> {\n\t\tconst allExtensionKinds = new Map<string, ExtensionKind[]>();\n\t\tlocalExtensions.forEach(ext => allExtensionKinds.set(ExtensionIdentifier.toKey(ext.identifier), this.getExtensionKind(ext)));\n\t\tremoteExtensions.forEach(ext => allExtensionKinds.set(ExtensionIdentifier.toKey(ext.identifier), this.getExtensionKind(ext)));\n\n\t\tconst localExtensionsSet = new Set<string>();\n\t\tlocalExtensions.forEach(ext => localExtensionsSet.add(ExtensionIdentifier.toKey(ext.identifier)));\n\n\t\tconst localUnderDevelopmentExtensionsSet = new Set<string>();\n\t\tlocalExtensions.forEach((ext) => {\n\t\t\tif (ext.isUnderDevelopment) {\n\t\t\t\tlocalUnderDevelopmentExtensionsSet.add(ExtensionIdentifier.toKey(ext.identifier));\n\t\t\t}\n\t\t});\n\n\t\tconst remoteExtensionsSet = new Set<string>();\n\t\tremoteExtensions.forEach(ext => remoteExtensionsSet.add(ExtensionIdentifier.toKey(ext.identifier)));\n\n\t\tconst remoteUnderDevelopmentExtensionsSet = new Set<string>();\n\t\tremoteExtensions.forEach((ext) => {\n\t\t\tif (ext.isUnderDevelopment) {\n\t\t\t\tremoteUnderDevelopmentExtensionsSet.add(ExtensionIdentifier.toKey(ext.identifier));\n\t\t\t}\n\t\t});\n\n\t\tconst pickRunningLocation = (extensionIdentifier: ExtensionIdentifier): ExtensionRunningLocation => {\n\t\t\tconst isInstalledLocally = localExtensionsSet.has(ExtensionIdentifier.toKey(extensionIdentifier));\n\t\t\tconst isInstalledRemotely = remoteExtensionsSet.has(ExtensionIdentifier.toKey(extensionIdentifier));\n\n\t\t\tconst isLocallyUnderDevelopment = localUnderDevelopmentExtensionsSet.has(ExtensionIdentifier.toKey(extensionIdentifier));\n\t\t\tconst isRemotelyUnderDevelopment = remoteUnderDevelopmentExtensionsSet.has(ExtensionIdentifier.toKey(extensionIdentifier));\n\n\t\t\tlet preference = ExtensionRunningPreference.None;\n\t\t\tif (isLocallyUnderDevelopment && !isRemotelyUnderDevelopment) {\n\t\t\t\tpreference = ExtensionRunningPreference.Local;\n\t\t\t} else if (isRemotelyUnderDevelopment && !isLocallyUnderDevelopment) {\n\t\t\t\tpreference = ExtensionRunningPreference.Remote;\n\t\t\t}\n\n\t\t\tconst extensionKinds = allExtensionKinds.get(ExtensionIdentifier.toKey(extensionIdentifier)) || [];\n\t\t\treturn this.pickRunningLocation(extensionKinds, isInstalledLocally, isInstalledRemotely, preference);\n\t\t};\n\n\t\tconst runningLocation = new Map<string, ExtensionRunningLocation>();\n\t\tlocalExtensions.forEach(ext => runningLocation.set(ExtensionIdentifier.toKey(ext.identifier), pickRunningLocation(ext.identifier)));\n\t\tremoteExtensions.forEach(ext => runningLocation.set(ExtensionIdentifier.toKey(ext.identifier), pickRunningLocation(ext.identifier)));\n\t\treturn runningLocation;\n\t}\n}\n\nclass ProposedApiController {\n\n\tprivate readonly enableProposedApiFor: string[];\n\tprivate readonly enableProposedApiForAll: boolean;\n\tprivate readonly productAllowProposedApi: Set<string>;\n\n\tconstructor(\n\t\t@IWorkbenchEnvironmentService private readonly _environmentService: IWorkbenchEnvironmentService,\n\t\t@IProductService productService: IProductService\n\t) {\n\t\t// Make enabled proposed API be lowercase for case insensitive comparison\n\t\tthis.enableProposedApiFor = (_environmentService.extensionEnabledProposedApi || []).map(id => id.toLowerCase());\n\n\t\tthis.enableProposedApiForAll =\n\t\t\t!_environmentService.isBuilt || // always allow proposed API when running out of sources\n\t\t\t(_environmentService.isExtensionDevelopment && productService.quality !== 'stable') || // do not allow proposed API against stable builds when developing an extension\n\t\t\t(this.enableProposedApiFor.length === 0 && Array.isArray(_environmentService.extensionEnabledProposedApi)); // always allow proposed API if --enable-proposed-api is provided without extension ID\n\n\t\tthis.productAllowProposedApi = new Set<string>();\n\t\tif (isNonEmptyArray(productService.extensionAllowedProposedApi)) {\n\t\t\tproductService.extensionAllowedProposedApi.forEach((id) => this.productAllowProposedApi.add(ExtensionIdentifier.toKey(id)));\n\t\t}\n\t}\n\n\tpublic updateEnableProposedApi(extension: IExtensionDescription): void {\n\t\tif (this._allowProposedApiFromProduct(extension.identifier)) {\n\t\t\t// fast lane -> proposed api is available to all extensions\n\t\t\t// that are listed in product.json-files\n\t\t\textension.enableProposedApi = true;\n\n\t\t} else if (extension.enableProposedApi && !extension.isBuiltin) {\n\t\t\tif (\n\t\t\t\t!this.enableProposedApiForAll &&\n\t\t\t\tthis.enableProposedApiFor.indexOf(extension.identifier.value.toLowerCase()) < 0\n\t\t\t) {\n\t\t\t\textension.enableProposedApi = false;\n\t\t\t\tconsole.error(`Extension '${extension.identifier.value} cannot use PROPOSED API (must started out of dev or enabled via --enable-proposed-api)`);\n\n\t\t\t} else if (this._environmentService.isBuilt) {\n\t\t\t\t// proposed api is available when developing or when an extension was explicitly\n\t\t\t\t// spelled out via a command line argument\n\t\t\t\tconsole.warn(`Extension '${extension.identifier.value}' uses PROPOSED API which is subject to change and removal without notice.`);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _allowProposedApiFromProduct(id: ExtensionIdentifier): boolean {\n\t\treturn this.productAllowProposedApi.has(ExtensionIdentifier.toKey(id));\n\t}\n}\n\nfunction filterByRunningLocation<T>(extensions: T[], extId: (item: T) => ExtensionIdentifier, runningLocation: Map<string, ExtensionRunningLocation>, desiredRunningLocation: ExtensionRunningLocation): T[] {\n\treturn extensions.filter(ext => runningLocation.get(ExtensionIdentifier.toKey(extId(ext))) === desiredRunningLocation);\n}\n"]}