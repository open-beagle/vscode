{"version":3,"file":"extensionHostWorker.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/extensions/worker/extensionHostWorker.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IMessagePassingProtocol } from 'vs/base/parts/ipc/common/ipc';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { Emitter } from 'vs/base/common/event';\nimport { isMessageOfType, MessageType, createMessageOfType } from 'vs/workbench/services/extensions/common/extensionHostProtocol';\nimport { IInitData } from 'vs/workbench/api/common/extHost.protocol';\nimport { ExtensionHostMain } from 'vs/workbench/services/extensions/common/extensionHostMain';\nimport { IHostUtils } from 'vs/workbench/api/common/extHostExtensionService';\nimport { NestedWorker } from 'vs/workbench/services/extensions/worker/polyfillNestedWorker';\nimport * as path from 'vs/base/common/path';\nimport * as performance from 'vs/base/common/performance';\n\nimport 'vs/workbench/api/common/extHost.common.services';\nimport 'vs/workbench/api/worker/extHost.worker.services';\n\n//#region --- Define, capture, and override some globals\n\ndeclare function postMessage(data: any, transferables?: Transferable[]): void;\n\ndeclare namespace self {\n\tlet close: any;\n\tlet postMessage: any;\n\tlet addEventListener: any;\n\tlet removeEventListener: any;\n\tlet dispatchEvent: any;\n\tlet indexedDB: { open: any, [k: string]: any };\n\tlet caches: { open: any, [k: string]: any };\n}\n\nconst nativeClose = self.close.bind(self);\nself.close = () => console.trace(`'close' has been blocked`);\n\nconst nativePostMessage = postMessage.bind(self);\nself.postMessage = () => console.trace(`'postMessage' has been blocked`);\n\n// const nativeAddEventListener = addEventListener.bind(self);\nself.addEventListener = () => console.trace(`'addEventListener' has been blocked`);\n\n(<any>self)['AMDLoader'] = undefined;\n(<any>self)['NLSLoaderPlugin'] = undefined;\n(<any>self)['define'] = undefined;\n(<any>self)['require'] = undefined;\n(<any>self)['webkitRequestFileSystem'] = undefined;\n(<any>self)['webkitRequestFileSystemSync'] = undefined;\n(<any>self)['webkitResolveLocalFileSystemSyncURL'] = undefined;\n(<any>self)['webkitResolveLocalFileSystemURL'] = undefined;\n\nif ((<any>self).Worker) {\n\tconst ttPolicy = (<any>self).trustedTypes?.createPolicy('extensionHostWorker', { createScriptURL: (value: string) => value });\n\n\t// make sure new Worker(...) always uses blob: (to maintain current origin)\n\tconst _Worker = (<any>self).Worker;\n\tWorker = <any>function (stringUrl: string | URL, options?: WorkerOptions) {\n\t\tconst js = `importScripts('${stringUrl}');`;\n\t\toptions = options || {};\n\t\toptions.name = options.name || path.basename(stringUrl.toString());\n\t\tconst blob = new Blob([js], { type: 'application/javascript' });\n\t\tconst blobUrl = URL.createObjectURL(blob);\n\t\treturn new _Worker(ttPolicy ? ttPolicy.createScriptURL(blobUrl) : blobUrl, options);\n\t};\n\n} else {\n\t(<any>self).Worker = class extends NestedWorker {\n\t\tconstructor(stringOrUrl: string | URL, options?: WorkerOptions) {\n\t\t\tsuper(nativePostMessage, stringOrUrl, { name: path.basename(stringOrUrl.toString()), ...options });\n\t\t}\n\t};\n}\n\n//#endregion ---\n\nconst hostUtil = new class implements IHostUtils {\n\tdeclare readonly _serviceBrand: undefined;\n\texit(_code?: number | undefined): void {\n\t\tnativeClose();\n\t}\n\tasync exists(_path: string): Promise<boolean> {\n\t\treturn true;\n\t}\n\tasync realpath(path: string): Promise<string> {\n\t\treturn path;\n\t}\n};\n\n\nclass ExtensionWorker {\n\n\t// protocol\n\treadonly protocol: IMessagePassingProtocol;\n\n\tconstructor() {\n\n\t\tconst channel = new MessageChannel();\n\t\tconst emitter = new Emitter<VSBuffer>();\n\t\tlet terminating = false;\n\n\t\t// send over port2, keep port1\n\t\tnativePostMessage(channel.port2, [channel.port2]);\n\n\t\tchannel.port1.onmessage = event => {\n\t\t\tconst { data } = event;\n\t\t\tif (!(data instanceof ArrayBuffer)) {\n\t\t\t\tconsole.warn('UNKNOWN data received', data);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst msg = VSBuffer.wrap(new Uint8Array(data, 0, data.byteLength));\n\t\t\tif (isMessageOfType(msg, MessageType.Terminate)) {\n\t\t\t\t// handle terminate-message right here\n\t\t\t\tterminating = true;\n\t\t\t\tonTerminate('received terminate message from renderer');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// emit non-terminate messages to the outside\n\t\t\temitter.fire(msg);\n\t\t};\n\n\t\tthis.protocol = {\n\t\t\tonMessage: emitter.event,\n\t\t\tsend: vsbuf => {\n\t\t\t\tif (!terminating) {\n\t\t\t\t\tconst data = vsbuf.buffer.buffer.slice(vsbuf.buffer.byteOffset, vsbuf.buffer.byteOffset + vsbuf.buffer.byteLength);\n\t\t\t\t\tchannel.port1.postMessage(data, [data]);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n}\n\ninterface IRendererConnection {\n\tprotocol: IMessagePassingProtocol;\n\tinitData: IInitData;\n}\nfunction connectToRenderer(protocol: IMessagePassingProtocol): Promise<IRendererConnection> {\n\treturn new Promise<IRendererConnection>(resolve => {\n\t\tconst once = protocol.onMessage(raw => {\n\t\t\tonce.dispose();\n\t\t\tconst initData = <IInitData>JSON.parse(raw.toString());\n\t\t\tprotocol.send(createMessageOfType(MessageType.Initialized));\n\t\t\tresolve({ protocol, initData });\n\t\t});\n\t\tprotocol.send(createMessageOfType(MessageType.Ready));\n\t});\n}\n\nlet onTerminate = (reason: string) => nativeClose();\n\n(function create(): void {\n\tconst res = new ExtensionWorker();\n\tperformance.mark(`code/extHost/willConnectToRenderer`);\n\tconnectToRenderer(res.protocol).then(data => {\n\t\tperformance.mark(`code/extHost/didWaitForInitData`);\n\t\tconst extHostMain = new ExtensionHostMain(\n\t\t\tdata.protocol,\n\t\t\tdata.initData,\n\t\t\thostUtil,\n\t\t\tnull,\n\t\t);\n\n\t\tonTerminate = (reason: string) => extHostMain.terminate(reason);\n\t});\n})();\n"]}