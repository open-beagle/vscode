{"version":3,"file":"polyfillNestedWorker.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/extensions/worker/polyfillNestedWorker.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAQhG,MAAM,kBAAkB,GAAG,CAAC,SAAS,YAAY,CAAC,SAAiB;QAElE,MAAM,QAAQ,GAAkB,CAAC,KAAY,EAAQ,EAAE;YACtD,oBAAoB;YACpB,IAAI,CAAC,mBAAmB,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;YAE9C,WAAW;YACX,MAAM,IAAI,GAA+B,KAAM,CAAC,IAAI,CAAC;YAErD,cAAc;YACd,YAAY;YACZ,MAAM,CAAC,gBAAgB,CAAC,IAAI,EAAE;gBAC7B,aAAa,EAAE;oBACd,KAAK,CAAC,IAAS,EAAE,iBAAuB;wBACvC,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC;oBAC3C,CAAC;iBACD;gBACD,WAAW,EAAE;oBACZ,GAAG;wBACF,OAAO,IAAI,CAAC,SAAS,CAAC;oBACvB,CAAC;oBACD,GAAG,CAAC,KAA0B;wBAC7B,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;oBACxB,CAAC;iBACD;gBACD,eAAe;aACf,CAAC,CAAC;YAEH,IAAI,CAAC,gBAAgB,CAAC,SAAS,EAAE,GAAG,CAAC,EAAE;gBACtC,IAAI,CAAC,aAAa,CAAC,IAAI,YAAY,CAAC,SAAS,EAAE,EAAE,IAAI,EAAE,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;YACrE,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,KAAK,EAAE,CAAC;YAEb,iCAAiC;YACjC,IAAI,CAAC,MAAM,GAAQ;gBAAQ,gBAAgB,MAAM,IAAI,SAAS,CAAC,6DAA6D,CAAC,CAAC,CAAC,CAAC;aAAE,CAAC;YAEnI,cAAc;YACd,aAAa,CAAC,SAAS,CAAC,CAAC;QAC1B,CAAC,CAAC;QAEF,IAAI,CAAC,gBAAgB,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;IAGd,MAAa,YAAa,SAAQ,WAAW;QAS5C,YAAY,iBAAqC,EAAE,WAAyB,EAAE,OAAuB;YACpG,KAAK,EAAE,CAAC;YART,cAAS,GAA0D,IAAI,CAAC;YACxE,mBAAc,GAA0D,IAAI,CAAC;YAC7E,YAAO,GAA2D,IAAI,CAAC;YAQtE,0BAA0B;YAC1B,MAAM,SAAS,GAAG,KAAK,kBAAkB,MAAM,WAAW,KAAK,CAAC;YAChE,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,SAAS,CAAC,EAAE,EAAE,IAAI,EAAE,wBAAwB,EAAE,CAAC,CAAC;YACvE,MAAM,OAAO,GAAG,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YAE1C,MAAM,OAAO,GAAG,IAAI,cAAc,EAAE,CAAC;YACrC,MAAM,EAAE,GAAG,OAAO,CAAC,CAAC,4DAA4D;YAEhF,MAAM,GAAG,GAAqB;gBAC7B,IAAI,EAAE,YAAY;gBAClB,EAAE;gBACF,IAAI,EAAE,OAAO,CAAC,KAAK;gBACnB,GAAG,EAAE,OAAO;gBACZ,OAAO;aACP,CAAC;YACF,iBAAiB,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;YAExC,yBAAyB;YACzB,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACjE,IAAI,CAAC,SAAS,GAAG,GAAG,EAAE;gBACrB,MAAM,GAAG,GAA2B;oBACnC,IAAI,EAAE,kBAAkB;oBACxB,EAAE;iBACF,CAAC;gBACF,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;gBAC/B,GAAG,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;gBAE7B,OAAO,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;gBACtB,OAAO,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;YACvB,CAAC,CAAC;YAEF,sBAAsB;YACtB,MAAM,CAAC,gBAAgB,CAAC,IAAI,EAAE;gBAC7B,WAAW,EAAE;oBACZ,GAAG;wBACF,OAAO,OAAO,CAAC,KAAK,CAAC,SAAS,CAAC;oBAChC,CAAC;oBACD,GAAG,CAAC,KAA0B;wBAC7B,OAAO,CAAC,KAAK,CAAC,SAAS,GAAG,KAAK,CAAC;oBACjC,CAAC;iBACD;gBACD,gBAAgB,EAAE;oBACjB,GAAG;wBACF,OAAO,OAAO,CAAC,KAAK,CAAC,cAAc,CAAC;oBACrC,CAAC;oBACD,GAAG,CAAC,KAA0B;wBAC7B,OAAO,CAAC,KAAK,CAAC,cAAc,GAAG,KAAK,CAAC;oBACtC,CAAC;iBACD;gBACD,eAAe;aACf,CAAC,CAAC;YAEH,OAAO,CAAC,KAAK,CAAC,gBAAgB,CAAC,cAAc,EAAE,GAAG,CAAC,EAAE;gBACpD,MAAM,QAAQ,GAAG,IAAI,YAAY,CAAC,cAAc,EAAE,EAAE,IAAI,EAAE,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;gBACtE,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YAC9B,CAAC,CAAC,CAAC;YAEH,OAAO,CAAC,KAAK,CAAC,gBAAgB,CAAC,SAAS,EAAE,GAAG,CAAC,EAAE;gBAC/C,MAAM,QAAQ,GAAG,IAAI,YAAY,CAAC,SAAS,EAAE,EAAE,IAAI,EAAE,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;gBACjE,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YAC9B,CAAC,CAAC,CAAC;YAEH,OAAO,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;QACvB,CAAC;KACD;IA5ED,oCA4EC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { NewWorkerMessage, TerminateWorkerMessage } from 'vs/workbench/services/extensions/common/polyfillNestedWorker.protocol';\n\ndeclare function postMessage(data: any, transferables?: Transferable[]): void;\n\ndeclare type MessageEventHandler = ((ev: MessageEvent<any>) => any) | null;\n\nconst _bootstrapFnSource = (function _bootstrapFn(workerUrl: string) {\n\n\tconst listener: EventListener = (event: Event): void => {\n\t\t// uninstall handler\n\t\tself.removeEventListener('message', listener);\n\n\t\t// get data\n\t\tconst port = <MessagePort>(<MessageEvent>event).data;\n\n\t\t// postMessage\n\t\t// onmessage\n\t\tObject.defineProperties(self, {\n\t\t\t'postMessage': {\n\t\t\t\tvalue(data: any, transferOrOptions?: any) {\n\t\t\t\t\tport.postMessage(data, transferOrOptions);\n\t\t\t\t}\n\t\t\t},\n\t\t\t'onmessage': {\n\t\t\t\tget() {\n\t\t\t\t\treturn port.onmessage;\n\t\t\t\t},\n\t\t\t\tset(value: MessageEventHandler) {\n\t\t\t\t\tport.onmessage = value;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// todo onerror\n\t\t});\n\n\t\tport.addEventListener('message', msg => {\n\t\t\tself.dispatchEvent(new MessageEvent('message', { data: msg.data }));\n\t\t});\n\n\t\tport.start();\n\n\t\t// fake recursively nested worker\n\t\tself.Worker = <any>class { constructor() { throw new TypeError('Nested workers from within nested worker are NOT supported.'); } };\n\n\t\t// load module\n\t\timportScripts(workerUrl);\n\t};\n\n\tself.addEventListener('message', listener);\n}).toString();\n\n\nexport class NestedWorker extends EventTarget implements Worker {\n\n\tonmessage: ((this: Worker, ev: MessageEvent<any>) => any) | null = null;\n\tonmessageerror: ((this: Worker, ev: MessageEvent<any>) => any) | null = null;\n\tonerror: ((this: AbstractWorker, ev: ErrorEvent) => any) | null = null;\n\n\treadonly terminate: () => void;\n\treadonly postMessage: (message: any, options?: any) => void;\n\n\tconstructor(nativePostMessage: typeof postMessage, stringOrUrl: string | URL, options?: WorkerOptions) {\n\t\tsuper();\n\n\t\t// create bootstrap script\n\t\tconst bootstrap = `((${_bootstrapFnSource})('${stringOrUrl}'))`;\n\t\tconst blob = new Blob([bootstrap], { type: 'application/javascript' });\n\t\tconst blobUrl = URL.createObjectURL(blob);\n\n\t\tconst channel = new MessageChannel();\n\t\tconst id = blobUrl; // works because blob url is unique, needs ID pool otherwise\n\n\t\tconst msg: NewWorkerMessage = {\n\t\t\ttype: '_newWorker',\n\t\t\tid,\n\t\t\tport: channel.port2,\n\t\t\turl: blobUrl,\n\t\t\toptions,\n\t\t};\n\t\tnativePostMessage(msg, [channel.port2]);\n\n\t\t// worker-impl: functions\n\t\tthis.postMessage = channel.port1.postMessage.bind(channel.port1);\n\t\tthis.terminate = () => {\n\t\t\tconst msg: TerminateWorkerMessage = {\n\t\t\t\ttype: '_terminateWorker',\n\t\t\t\tid\n\t\t\t};\n\t\t\tchannel.port1.postMessage(msg);\n\t\t\tURL.revokeObjectURL(blobUrl);\n\n\t\t\tchannel.port1.close();\n\t\t\tchannel.port2.close();\n\t\t};\n\n\t\t// worker-impl: events\n\t\tObject.defineProperties(this, {\n\t\t\t'onmessage': {\n\t\t\t\tget() {\n\t\t\t\t\treturn channel.port1.onmessage;\n\t\t\t\t},\n\t\t\t\tset(value: MessageEventHandler) {\n\t\t\t\t\tchannel.port1.onmessage = value;\n\t\t\t\t}\n\t\t\t},\n\t\t\t'onmessageerror': {\n\t\t\t\tget() {\n\t\t\t\t\treturn channel.port1.onmessageerror;\n\t\t\t\t},\n\t\t\t\tset(value: MessageEventHandler) {\n\t\t\t\t\tchannel.port1.onmessageerror = value;\n\t\t\t\t}\n\t\t\t},\n\t\t\t// todo onerror\n\t\t});\n\n\t\tchannel.port1.addEventListener('messageerror', evt => {\n\t\t\tconst msgEvent = new MessageEvent('messageerror', { data: evt.data });\n\t\t\tthis.dispatchEvent(msgEvent);\n\t\t});\n\n\t\tchannel.port1.addEventListener('message', evt => {\n\t\t\tconst msgEvent = new MessageEvent('message', { data: evt.data });\n\t\t\tthis.dispatchEvent(msgEvent);\n\t\t});\n\n\t\tchannel.port1.start();\n\t}\n}\n"]}