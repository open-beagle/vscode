{"version":3,"sources":["vs/workbench/services/extensions/electron-browser/localProcessExtensionHost.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAyDhG,IAAW,gBAGV;IAHD,WAAW,gBAAgB;QAC1B,8CAA0B,CAAA;QAC1B,0CAAsB,CAAA;IACvB,CAAC,EAHU,gBAAgB,KAAhB,gBAAgB,QAG1B;IAED,IAAa,yBAAyB,GAAtC,MAAa,yBAAyB;QA8BrC,YACkB,iBAAyD,EAC/B,eAAyC,EAC7C,oBAA0C,EAC5C,kBAAsC,EACvC,iBAAoC,EACnB,mBAAuD,EACxE,iBAAoC,EAC1C,WAAwB,EACtB,aAA4B,EACf,0BAAsD,EACpE,YAA0B,EACvB,eAAgC,EACvB,wBAAkD;YAZ5E,sBAAiB,GAAjB,iBAAiB,CAAwC;YAC/B,oBAAe,GAAf,eAAe,CAA0B;YAC7C,yBAAoB,GAApB,oBAAoB,CAAsB;YAC5C,uBAAkB,GAAlB,kBAAkB,CAAoB;YACvC,sBAAiB,GAAjB,iBAAiB,CAAmB;YACnB,wBAAmB,GAAnB,mBAAmB,CAAoC;YACxE,sBAAiB,GAAjB,iBAAiB,CAAmB;YAC1C,gBAAW,GAAX,WAAW,CAAa;YACtB,kBAAa,GAAb,aAAa,CAAe;YACf,+BAA0B,GAA1B,0BAA0B,CAA4B;YACpE,iBAAY,GAAZ,YAAY,CAAc;YACvB,oBAAe,GAAf,eAAe,CAAiB;YACvB,6BAAwB,GAAxB,wBAAwB,CAA0B;YAzC9E,SAAI,wBAAkC;YACtC,oBAAe,GAAG,IAAI,CAAC;YAEtB,YAAO,GAA8B,IAAI,eAAO,EAAoB,CAAC;YACtE,WAAM,GAA4B,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;YAEpD,yBAAoB,GAAG,IAAI,eAAO,EAAQ,CAAC;YAE3C,eAAU,GAAG,IAAI,2BAAe,EAAE,CAAC;YAmCnD,MAAM,OAAO,GAAG,CAAA,GAAA,8CAAwB,CAAA,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;YACnE,IAAI,CAAC,mBAAmB,GAAG,OAAO,CAAC,kBAAkB,CAAC;YACtD,IAAI,CAAC,oBAAoB,GAAG,OAAO,CAAC,mBAAmB,CAAC;YACxD,IAAI,CAAC,uBAAuB,GAAG,OAAO,CAAC,sBAAsB,CAAC;YAC9D,IAAI,CAAC,0BAA0B,GAAG,OAAO,CAAC,yBAAyB,CAAC;YAEpE,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC;YACpC,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;YAE1B,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;YAC7B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;YACzB,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC;YAClC,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC;YACrC,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;YAE7B,IAAI,CAAC,qBAAqB,GAAG,CAAA,GAAA,oBAAQ,CAAA,CAAC,IAAI,CAAC,mBAAmB,CAAC,eAAe,EAAE,GAAG,qCAAwB,MAAM,CAAC,CAAC;YAEnH,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAClC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACzF,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;YACtF,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBACnE,IAAI,IAAI,CAAC,mBAAmB,IAAI,IAAI,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,OAAO,KAAK,KAAK,CAAC,SAAS,EAAE;oBACxG,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE,CAAC;iBACtC;YACF,CAAC,CAAC,CAAC,CAAC;YACJ,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,0BAA0B,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;gBACpE,IAAI,IAAI,CAAC,mBAAmB,IAAI,IAAI,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,OAAO,KAAK,KAAK,CAAC,SAAS,EAAE;oBACxG,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC;iBAC3B;YACF,CAAC,CAAC,CAAC,CAAC;YAEJ,MAAM,kBAAkB,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;YAClD,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,kBAAkB,CAAC,CAAC;YACzC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAA,GAAA,wBAAY,CAAA,CAAC,GAAG,EAAE;gBACrC,OAAO,CAAC,cAAc,CAAC,MAAkB,EAAE,kBAAkB,CAAC,CAAC,CAAC,oDAAoD;YACrH,CAAC,CAAC,CAAC,CAAC;QACL,CAAC;QAEM,OAAO;YACb,IAAI,CAAC,SAAS,EAAE,CAAC;QAClB,CAAC;QAEM,KAAK;YACX,IAAI,IAAI,CAAC,YAAY,EAAE;gBACtB,0BAA0B;gBAC1B,OAAO,IAAI,CAAC;aACZ;YAED,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;gBAC3B,IAAI,CAAC,gBAAgB,GAAG,OAAO,CAAC,GAAG,CAAC;oBACnC,IAAI,CAAC,gBAAgB,EAAE;oBACvB,IAAI,CAAC,iBAAiB,EAAE;oBACxB,IAAI,CAAC,wBAAwB,CAAC,WAAW,EAAE;iBAC3C,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,EAAE,UAAU,EAAE,UAAU,CAAC,EAAE,EAAE;;oBAC9C,MAAM,GAAG,GAAG,OAAO,CAAC,KAAK,CAAC,UAAU,EAAE;wBACrC,qBAAqB,EAAE,4DAA4D;wBACnF,mBAAmB,EAAE,MAAM;wBAC3B,sBAAsB,EAAE,IAAI;wBAC5B,iBAAiB,EAAE,IAAI,CAAC,mBAAmB;wBAC3C,uBAAuB,EAAE,QAAQ;wBACjC,8BAA8B,EAAE,IAAI;wBACpC,gBAAgB,EAAE,CAAC,IAAI,CAAC,0BAA0B,IAAI,CAAC,IAAI,CAAC,mBAAmB,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,OAAO,IAAI,IAAI,CAAC,eAAe,CAAC,OAAO,KAAK,QAAQ,IAAI,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC;wBACtM,gBAAgB,EAAE,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,GAAG;qBAC3F,CAAC,CAAC;oBAEH,IAAI,QAAQ,CAAC,WAAW,EAAE;wBACzB,mEAAmE;wBACnE,wDAAwD;wBACxD,OAAO,GAAG,CAAC,mBAAmB,CAAC,CAAC;qBAChC;oBAED,IAAI,IAAI,CAAC,mBAAmB,EAAE;wBAC7B,kFAAkF;wBAClF,sEAAsE;wBACtE,OAAO,GAAG,CAAC,6BAA6B,CAAC,CAAC;qBAC1C;oBAED,MAAM,IAAI,GAAG;wBACZ,GAAG;wBACH,gFAAgF;wBAChF,+DAA+D;wBAC/D,sFAAsF;wBACtF,qEAAqE;wBACrE,QAAQ,EAAE,CAAC,CAAC,QAAQ,CAAC,SAAS;wBAC9B,QAAQ,EAAE,SAAiC;wBAC3C,MAAM,EAAE,IAAI;qBACZ,CAAC;oBAEF,IAAI,UAAU,KAAK,CAAC,EAAE;wBACrB,IAAI,CAAC,QAAQ,GAAG;4BACf,UAAU;4BACV,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,YAAY,CAAC,GAAG,UAAU;yBAC7E,CAAC;qBACF;yBAAM;wBACN,IAAI,CAAC,QAAQ,GAAG,CAAC,kBAAkB,CAAC,CAAC;qBACrC;oBAED,IAAI,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,oBAAoB,CAAC,EAAE;wBACxD,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;qBAChC;oBAED,IAAI,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE;wBAChD,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,wBAAwB,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;qBAC7F;oBAED,iFAAiF;oBACjF,IAAI,QAAQ,CAAC,OAAO,EAAE;wBACrB,MAAM,yBAAyB,GAA8B;4BAC5D,WAAW,EAAE,CAAA,MAAA,IAAI,CAAC,eAAe,CAAC,aAAa,0CAAE,WAAW,KAAI,WAAW;4BAC3E,WAAW,EAAE,CAAA,MAAA,IAAI,CAAC,eAAe,CAAC,aAAa,0CAAE,WAAW,KAAI,IAAI,CAAC,eAAe,CAAC,SAAS;4BAC9F,SAAS,EAAE,EAAE;4BACb,cAAc,EAAE,KAAK;yBACrB,CAAC;wBACF,MAAM,eAAe,GAAG,IAAI,CAAC,mBAAmB,CAAC,eAAe,CAAC,CAAC,+FAA+F;wBACjK,MAAM,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC;wBACjD,MAAM,qBAAqB,GAAG,CAAC,IAAI,CAAC,mBAAmB,CAAC,sBAAsB,CAAC,CAAC,4DAA4D;wBAC5I,IAAI,qBAAqB,IAAI,SAAS,IAAI,eAAe,IAAI,CAAA,GAAA,aAAM,CAAA,CAAC,eAAe,CAAC,EAAE;4BACrF,MAAM,SAAS,GAAG,SAAS,CAAC,WAAW,CAAC,CAAC;4BACzC,yBAAyB,CAAC,SAAS,GAAG,SAAS,CAAC,MAAM,CAAC,OAAO,EAAE,eAAe,EAAE,OAAO,EAAE,eAAe,EAAE,OAAO,EAAE,eAAe,CAAC,CAAC;4BACrI,yBAAyB,CAAC,cAAc,GAAG,IAAI,CAAC;yBAChD;wBACD,sGAAsG;wBACtG,qHAAqH;wBACrH,wDAAwD;wBACxD,MAAM,qBAAqB,GAAG,IAAI,CAAC,mBAAmB,CAAC,sBAAsB,IAAI,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC;wBACvH,IAAI,CAAC,GAAG,CAAC,sBAAsB,GAAG,CAAA,GAAA,WAAI,CAAA,CAAC,qBAAqB,EAAE,GAAG,qCAAwB,gBAAgB,CAAC,CAAC;wBAC3G,IAAI,CAAC,GAAG,CAAC,mCAAmC,GAAG,IAAI,CAAC,SAAS,CAAC,yBAAyB,CAAC,CAAC;qBACzF;oBAED,gDAAgD;oBAChD,IAAI,CAAC,qBAAqB,GAAG,CAAA,GAAA,oBAAI,CAAA,CAAC,oBAAU,CAAC,SAAS,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC,MAAM,EAAE,CAAC,sBAAsB,CAAC,EAAE,IAAI,CAAC,CAAC;oBAI1H,MAAM,QAAQ,GAAG,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,qBAAqB,CAAC,MAAO,CAAC,CAAC;oBACrF,MAAM,QAAQ,GAAG,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,qBAAqB,CAAC,MAAO,CAAC,CAAC;oBACrF,MAAM,QAAQ,GAAG,aAAK,CAAC,GAAG,CACzB,aAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,EAAE,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClE,aAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,EAAE,EAAE,MAAM,EAAE,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,CAC5E,CAAC;oBAEF,4EAA4E;oBAC5E,MAAM,iBAAiB,GAAG,aAAK,CAAC,QAAQ,CAAS,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;wBACnE,OAAO,CAAC;4BACP,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,EAAE,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,MAAM,CAAC,EAAE;4BAC/D,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC;oBACvC,CAAC,EAAE,GAAG,CAAC,CAAC;oBAER,kCAAkC;oBAClC,iBAAiB,CAAC,MAAM,CAAC,EAAE;wBAC1B,MAAM,iBAAiB,GAAG,MAAM,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,+BAA+B,CAAC,CAAC;wBAC5F,IAAI,iBAAiB,EAAE;4BACtB,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,0BAA0B,EAAE;gCAC1E,OAAO,CAAC,GAAG,CAAC,gIAAgI,iBAAiB,CAAC,CAAC,CAAC,EAAE,EAAE,aAAa,EAAE,QAAQ,CAAC,CAAC;6BAC7L;4BACD,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;gCACvB,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC;gCACjD,IAAI,CAAC,oBAAoB,CAAC,IAAI,EAAE,CAAC;6BACjC;yBACD;6BAAM;4BACN,IAAI,CAAC,IAAI,CAAC,0BAA0B,EAAE;gCACrC,OAAO,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;gCAChC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;gCAC3C,OAAO,CAAC,QAAQ,EAAE,CAAC;6BACnB;yBACD;oBACF,CAAC,CAAC,CAAC;oBAEH,sCAAsC;oBACtC,IAAI,CAAC,qBAAqB,CAAC,EAAE,CAAC,SAAS,EAAE,GAAG,CAAC,EAAE;wBAC9C,IAAI,GAAG,IAAwB,GAAI,CAAC,IAAI,KAAK,YAAY,EAAE;4BAC1D,IAAI,CAAC,wBAAwB,CAAoB,GAAG,CAAC,CAAC;yBACtD;oBACF,CAAC,CAAC,CAAC;oBAEH,YAAY;oBACZ,IAAI,CAAC,qBAAqB,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,CAAC,CAAC;oBAClF,IAAI,CAAC,qBAAqB,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAY,EAAE,MAAc,EAAE,EAAE,CAAC,IAAI,CAAC,qBAAqB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;oBAElH,+FAA+F;oBAC/F,IAAI,UAAU,EAAE;wBACf,IAAI,IAAI,CAAC,mBAAmB,IAAI,UAAU,IAAI,IAAI,CAAC,oBAAoB,IAAI,IAAI,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,OAAO,EAAE;4BAC/H,IAAI,CAAC,0BAA0B,CAAC,aAAa,CAAC,IAAI,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;yBAC/G;wBACD,IAAI,CAAC,YAAY,GAAG,UAAU,CAAC;wBAC/B,IAAI,CAAC,oBAAoB,CAAC,IAAI,EAAE,CAAC;qBACjC;oBAED,mCAAmC;oBACnC,IAAI,oBAAyB,CAAC;oBAC9B,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,eAAe,IAAI,IAAI,CAAC,mBAAmB,EAAE;wBAC/G,oBAAoB,GAAG,UAAU,CAAC,GAAG,EAAE;4BACtC,MAAM,GAAG,GAAG,IAAI,CAAC,uBAAuB;gCACvC,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAgC,EAAE,IAAqH,CAAC;gCACvK,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAA2B,EAAE,IAAsE,CAAC,CAAC;4BAErH,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,uBAAQ,CAAC,OAAO,EAAE,GAAG,EACrD,CAAC;oCACA,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAc,EAAE,IAAe,CAAC;oCACpD,GAAG,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;iCACrC,CAAC,EACF,EAAE,MAAM,EAAE,IAAI,EAAE,CAChB,CAAC;wBACH,CAAC,EAAE,KAAK,CAAC,CAAC;qBACV;oBAED,qDAAqD;oBACrD,OAAO,IAAI,CAAC,oBAAoB,EAAE,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE;wBACpD,YAAY,CAAC,oBAAoB,CAAC,CAAC;wBACnC,OAAO,QAAQ,CAAC;oBACjB,CAAC,CAAC,CAAC;gBACJ,CAAC,CAAC,CAAC;aACH;YAED,OAAO,IAAI,CAAC,gBAAgB,CAAC;QAC9B,CAAC;QAED;;WAEG;QACK,gBAAgB;YACvB,OAAO,IAAI,OAAO,CAAS,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBAC9C,MAAM,QAAQ,GAAG,CAAA,GAAA,+BAAqB,CAAA,EAAE,CAAC;gBAEzC,IAAI,CAAC,gBAAgB,GAAG,CAAA,GAAA,kBAAY,CAAA,EAAE,CAAC;gBACvC,IAAI,CAAC,gBAAgB,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;gBAC1C,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,QAAQ,EAAE,GAAG,EAAE;oBAC3C,IAAI,IAAI,CAAC,gBAAgB,EAAE;wBAC1B,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;qBACtD;oBACD,OAAO,CAAC,QAAQ,CAAC,CAAC;gBACnB,CAAC,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;QACJ,CAAC;QAED;;WAEG;QACK,KAAK,CAAC,iBAAiB;YAE9B,IAAI,OAAO,IAAI,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,IAAI,KAAK,QAAQ,EAAE;gBACzE,OAAO,CAAC,CAAC;aACT;YAED,MAAM,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,IAAI,CAAC;YAClE,MAAM,IAAI,GAAG,MAAM,CAAA,GAAA,oBAAY,CAAA,CAAC,QAAQ,EAAE,EAAE,CAAC,kBAAkB,EAAE,IAAI,CAAC,yBAAyB,CAAC,CAAC;YAEjG,IAAI,CAAC,IAAI,CAAC,0BAA0B,EAAE;gBACrC,IAAI,CAAC,IAAI,EAAE;oBACV,OAAO,CAAC,IAAI,CAAC,+DAA+D,EAAE,aAAa,EAAE,QAAQ,CAAC,CAAC;iBACvG;qBAAM;oBACN,IAAI,IAAI,KAAK,QAAQ,EAAE;wBACtB,OAAO,CAAC,IAAI,CAAC,gDAAgD,QAAQ,uBAAuB,IAAI,WAAW,EAAE,aAAa,EAAE,QAAQ,CAAC,CAAC;qBACtI;oBACD,IAAI,IAAI,CAAC,uBAAuB,EAAE;wBACjC,OAAO,CAAC,IAAI,CAAC,oEAAoE,IAAI,EAAE,EAAE,aAAa,EAAE,QAAQ,CAAC,CAAC;qBAClH;yBAAM;wBACN,OAAO,CAAC,IAAI,CAAC,mDAAmD,IAAI,EAAE,EAAE,aAAa,EAAE,QAAQ,CAAC,CAAC;qBACjG;iBACD;aACD;YAED,OAAO,IAAI,IAAI,CAAC,CAAC;QAClB,CAAC;QAEO,oBAAoB;YAE3B,OAAO,IAAI,OAAO,CAAqB,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBAE1D,2DAA2D;gBAC3D,sDAAsD;gBACtD,IAAI,MAAM,GAAG,UAAU,CAAC,GAAG,EAAE;oBAC5B,IAAI,IAAI,CAAC,gBAAgB,EAAE;wBAC1B,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC;wBAC9B,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;qBAC7B;oBACD,MAAM,CAAC,SAAS,CAAC,CAAC;gBACnB,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,CAAC;gBAEd,IAAI,CAAC,gBAAiB,CAAC,EAAE,CAAC,YAAY,EAAE,MAAM,CAAC,EAAE;oBAChD,YAAY,CAAC,MAAM,CAAC,CAAC;oBACrB,IAAI,IAAI,CAAC,gBAAgB,EAAE;wBAC1B,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC;wBAC9B,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;qBAC7B;oBACD,IAAI,CAAC,wBAAwB,GAAG,MAAM,CAAC;oBAEvC,6DAA6D;oBAC7D,mEAAmE;oBACnE,6DAA6D;oBAC7D,OAAO,CAAC,IAAI,4BAAkB,CAAC,IAAI,oBAAU,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC,CAAC,CAAC;gBAChF,CAAC,CAAC,CAAC;YAEJ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE;gBAEpB,2EAA2E;gBAC3E,gDAAgD;gBAChD,OAAO,IAAI,OAAO,CAAqB,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;oBAE1D,IAAI,aAA2B,CAAC;oBAChC,MAAM,mBAAmB,GAAG,GAAG,EAAE;wBAChC,aAAa,GAAG,UAAU,CAAC,GAAG,EAAE;4BAC/B,MAAM,CAAC,SAAS,CAAC,CAAC;wBACnB,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,CAAC;oBACf,CAAC,CAAC;oBACF,MAAM,qBAAqB,GAAG,GAAG,EAAE;wBAClC,YAAY,CAAC,aAAa,CAAC,CAAC;oBAC7B,CAAC,CAAC;oBAEF,iCAAiC;oBACjC,mBAAmB,EAAE,CAAC;oBAEtB,MAAM,UAAU,GAAG,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE;wBAE3C,IAAI,CAAA,GAAA,uCAAe,CAAA,CAAC,GAAG,gBAAoB,EAAE;4BAC5C,gEAAgE;4BAChE,qBAAqB,EAAE,CAAC;4BAExB,IAAI,CAAC,sBAAsB,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;gCAEzC,uCAAuC;gCACvC,mBAAmB,EAAE,CAAC;gCAEtB,QAAQ,CAAC,IAAI,CAAC,iBAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;4BAC1D,CAAC,CAAC,CAAC;4BACH,OAAO;yBACP;wBAED,IAAI,CAAA,GAAA,uCAAe,CAAA,CAAC,GAAG,sBAA0B,EAAE;4BAClD,mCAAmC;4BACnC,qBAAqB,EAAE,CAAC;4BAExB,mCAAmC;4BACnC,UAAU,CAAC,OAAO,EAAE,CAAC;4BAErB,uCAAuC;4BACvC,mBAAQ,CAAC,EAAE,CAAyB,mBAAU,CAAC,cAAc,CAAC,CAAC,eAAe,CAAC,EAAE,EAAE,EAAE,YAAY,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAoB,EAAE,IAAgB,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,qBAAqB,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;4BAE/M,uBAAuB;4BACvB,OAAO,CAAC,QAAQ,CAAC,CAAC;4BAClB,OAAO;yBACP;wBAED,OAAO,CAAC,KAAK,CAAC,8EAA8E,EAAE,GAAG,CAAC,CAAC;oBACpG,CAAC,CAAC,CAAC;gBAEJ,CAAC,CAAC,CAAC;YAEJ,CAAC,CAAC,CAAC;QACJ,CAAC;QAEO,KAAK,CAAC,sBAAsB;YACnC,MAAM,CAAC,aAAa,EAAE,QAAQ,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,EAAE,EAAE,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;YACvI,MAAM,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,CAAC;YACtD,OAAO;gBACN,MAAM,EAAE,IAAI,CAAC,eAAe,CAAC,MAAM;gBACnC,OAAO,EAAE,IAAI,CAAC,eAAe,CAAC,OAAO;gBACrC,SAAS,EAAE,OAAO,CAAC,GAAG;gBACtB,WAAW,EAAE;oBACZ,2BAA2B,EAAE,IAAI,CAAC,oBAAoB;oBACtD,OAAO,EAAE,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,CAAC,SAAG,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS;oBAClG,OAAO,EAAE,IAAI,CAAC,eAAe,CAAC,QAAQ;oBACtC,YAAY,EAAE,IAAI,CAAC,eAAe,CAAC,WAAW;oBAC9C,WAAW,EAAE,QAAQ,CAAC,QAAQ;oBAC9B,+BAA+B,EAAE,IAAI,CAAC,mBAAmB,CAAC,+BAA+B;oBACzF,yBAAyB,EAAE,IAAI,CAAC,mBAAmB,CAAC,yBAAyB;oBAC7E,iBAAiB,EAAE,IAAI,CAAC,mBAAmB,CAAC,iBAAiB;oBAC7D,oBAAoB,EAAE,IAAI,CAAC,mBAAmB,CAAC,oBAAoB;oBACnE,mBAAmB,EAAE,IAAI,CAAC,mBAAmB,CAAC,mBAAmB;oBACjE,gBAAgB,EAAE,IAAI,CAAC,mBAAmB,CAAC,gBAAgB;iBAC3D;gBACD,SAAS,EAAE,IAAI,CAAC,eAAe,CAAC,iBAAiB,EAAE,kBAAyB,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;oBAC1F,aAAa,EAAE,CAAA,GAAA,2BAAmB,CAAA,CAAC,SAAS,CAAC,aAAa,CAAC;oBAC3D,EAAE,EAAE,SAAS,CAAC,EAAE;oBAChB,IAAI,EAAE,IAAI,CAAC,aAAa,CAAC,iBAAiB,CAAC,SAAS,CAAC;oBACrD,UAAU,EAAE,SAAS,CAAC,aAAa,CAAC,CAAC,CAAC,CAAA,GAAA,gCAAmB,CAAA,CAAC,SAAS,CAAC,aAAa,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,KAAK;iBACpH;gBACD,MAAM,EAAE;oBACP,SAAS,EAAE,IAAI,CAAC,mBAAmB,CAAC,eAAe;oBACnD,cAAc,EAAE,IAAI;oBACpB,QAAQ,EAAE,KAAK;iBACf;gBACD,kBAAkB,EAAE,EAAE;gBACtB,cAAc,EAAE,EAAE;gBAClB,UAAU,EAAE,QAAQ,CAAC,UAAU;gBAC/B,aAAa;gBACb,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE;gBACrC,YAAY,EAAE,IAAI,CAAC,mBAAmB,CAAC,eAAe;gBACtD,OAAO,EAAE,IAAI,CAAC,qBAAqB;gBACnC,SAAS,EAAE,QAAQ,CAAC,SAAS;gBAC7B,MAAM,EAAE,yBAAM,CAAC,OAAO;aACtB,CAAC;QACH,CAAC;QAEO,wBAAwB,CAAC,KAAwB;YAExD,IAAI,IAAI,CAAC,0BAA0B,EAAE;gBAEpC,6CAA6C;gBAC7C,CAAA,GAAA,kCAAc,CAAA,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;aACxC;iBAAM;gBAEN,wBAAwB;gBACxB,CAAA,GAAA,aAAG,CAAA,CAAC,KAAK,EAAE,gBAAgB,CAAC,CAAC;aAC7B;QACF,CAAC;QAEO,sBAAsB,CAAC,GAAQ;YACtC,IAAI,YAAY,GAAG,CAAA,GAAA,6BAAc,CAAA,CAAC,GAAG,CAAC,CAAC;YACvC,IAAI,YAAY,KAAK,IAAI,CAAC,uBAAuB,EAAE;gBAClD,OAAO,CAAC,qBAAqB;aAC7B;YAED,IAAI,CAAC,uBAAuB,GAAG,YAAY,CAAC;YAE5C,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAqB,EAAE,IAAoC,EAAE,YAAY,CAAC,CAAC,CAAC;QAC1H,CAAC;QAEO,qBAAqB,CAAC,IAAY,EAAE,MAAc;YACzD,IAAI,IAAI,CAAC,YAAY,EAAE;gBACtB,gEAAgE;gBAChE,OAAO;aACP;YAED,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;QACnC,CAAC;QAEO,0BAA0B,CAAC,MAAgB;YAClD,IAAI,IAAI,GAAG,EAAE,CAAC;YACd,IAAI,UAAU,GAAG,KAAK,CAAC;YACvB,MAAM,KAAK,GAAG,IAAI,eAAO,EAAU,CAAC;YACpC,MAAM,OAAO,GAAG,IAAI,8BAAa,CAAC,OAAO,CAAC,CAAC;YAC3C,MAAM,CAAC,IAAI,CAAC,IAAI,iBAAQ,CAAC;gBACxB,KAAK,CAAC,KAAK,EAAE,SAAS,EAAE,QAAQ;oBAC/B,yEAAyE;oBACzE,sEAAsE;oBACtE,IAAI,IAAI,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;oBACjE,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;oBACjC,IAAI,GAAG,KAAK,CAAC,GAAG,EAAG,CAAC;oBAEpB,wFAAwF;oBACxF,IAAI,IAAI,CAAC,MAAM,GAAG,KAAM,EAAE;wBACzB,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wBACjB,IAAI,GAAG,EAAE,CAAC;qBACV;oBAED,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;wBACzB,IAAI,UAAU,EAAE;4BACf,IAAI,IAAI,+BAAyB,EAAE;gCAClC,UAAU,GAAG,KAAK,CAAC;6BACnB;yBACD;6BAAM,IAAI,IAAI,mCAA2B,EAAE;4BAC3C,UAAU,GAAG,IAAI,CAAC;yBAClB;6BAAM,IAAI,IAAI,CAAC,MAAM,EAAE;4BACvB,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC;yBACxB;qBACD;oBAED,QAAQ,EAAE,CAAC;gBACZ,CAAC;aACD,CAAC,CAAC,CAAC;YAEJ,OAAO,KAAK,CAAC;QACd,CAAC;QAEM,KAAK,CAAC,iBAAiB;YAC7B,IAAI,OAAO,IAAI,CAAC,YAAY,KAAK,QAAQ,EAAE;gBAC1C,OAAO,IAAI,CAAC;aACZ;YAED,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE;gBAChC,OAAO,KAAK,CAAC;aACb;YAMD,IAAI,OAAoB,OAAQ,CAAC,aAAa,KAAK,UAAU,EAAE;gBAC9D,mDAAmD;gBACtC,OAAQ,CAAC,aAAc,CAAC,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,CAAC;gBACrE,MAAM,OAAO,CAAC,IAAI,CAAC,CAAC,aAAK,CAAC,SAAS,CAAC,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,EAAE,CAAA,GAAA,eAAO,CAAA,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACtF,OAAO,OAAO,IAAI,CAAC,YAAY,KAAK,QAAQ,CAAC;aAE7C;iBAAM,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE;gBAC/B,oDAAoD;gBACpD,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBAC3C,MAAM,OAAO,CAAC,IAAI,CAAC,CAAC,aAAK,CAAC,SAAS,CAAC,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,EAAE,CAAA,GAAA,eAAO,CAAA,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACtF,OAAO,OAAO,IAAI,CAAC,YAAY,KAAK,QAAQ,CAAC;aAE7C;iBAAM;gBACN,mBAAmB;gBACnB,OAAO,KAAK,CAAC;aACb;QACF,CAAC;QAEM,cAAc;YACpB,OAAO,CAAA,GAAA,2BAAmB,CAAA,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAC/C,CAAC;QAEM,SAAS;YACf,IAAI,IAAI,CAAC,YAAY,EAAE;gBACtB,OAAO;aACP;YACD,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;YAEzB,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;YAE1B,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;gBAC3B,0BAA0B;gBAC1B,OAAO;aACP;YAED,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE;gBAEvC,wDAAwD;gBACxD,yBAAyB;gBACzB,QAAQ,CAAC,IAAI,CAAC,CAAA,GAAA,2CAAmB,CAAA,mBAAuB,CAAC,CAAC;gBAE1D,QAAQ,CAAC,OAAO,EAAE,CAAC;gBAEnB,mDAAmD;gBACnD,oDAAoD;gBACpD,UAAU,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,eAAe,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC,CAAC;YAErD,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE;gBAEV,6DAA6D;gBAC7D,qDAAqD;gBACrD,IAAI,CAAC,eAAe,EAAE,CAAC;YACxB,CAAC,CAAC,CAAC;QACJ,CAAC;QAEO,eAAe;YACtB,IAAI,IAAI,CAAC,gBAAgB,EAAE;gBAC1B,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC;gBAC9B,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;aAC7B;YACD,IAAI,IAAI,CAAC,wBAAwB,EAAE;gBAClC,IAAI,CAAC,wBAAwB,CAAC,GAAG,EAAE,CAAC;gBACpC,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC;aACrC;YACD,IAAI,IAAI,CAAC,qBAAqB,EAAE;gBAC/B,IAAI,CAAC,qBAAqB,CAAC,IAAI,EAAE,CAAC;gBAClC,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC;aAClC;QACF,CAAC;QAEO,eAAe,CAAC,KAAwB;YAE/C,kFAAkF;YAClF,2EAA2E;YAC3E,IAAI,IAAI,CAAC,mBAAmB,IAAI,CAAC,IAAI,CAAC,0BAA0B,IAAI,CAAC,IAAI,CAAC,oBAAoB,IAAI,IAAI,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,OAAO,EAAE;gBACtJ,IAAI,CAAC,0BAA0B,CAAC,gBAAgB,CAAC,IAAI,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;gBACtG,KAAK,CAAC,IAAI,CAAC,CAAA,GAAA,eAAO,CAAA,CAAC,GAAG,CAAC,yCAAyC,CAAC,EAAE,2BAA2B,CAAC,CAAC;aAChG;QACF,CAAC;KACD,CAAA;IA1lBY,yBAAyB;QAgCnC,WAAA,oCAAwB,CAAA;QACxB,WAAA,mCAAoB,CAAA;QACpB,WAAA,2BAAkB,CAAA;QAClB,WAAA,6BAAiB,CAAA;QACjB,WAAA,uDAAkC,CAAA;QAClC,WAAA,6BAAiB,CAAA;QACjB,WAAA,iBAAW,CAAA;QACX,WAAA,qBAAa,CAAA;QACb,WAAA,+CAA0B,CAAA;QAC1B,YAAA,mBAAY,CAAA;QACZ,YAAA,gCAAe,CAAA;QACf,YAAA,kDAAwB,CAAA;OA3Cd,yBAAyB,CA0lBrC;IA1lBY,8DAAyB","file":"localProcessExtensionHost.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { ChildProcess, fork } from 'child_process';\nimport { Server, Socket, createServer } from 'net';\nimport { CrashReporterStartOptions } from 'vs/base/parts/sandbox/electron-sandbox/electronTypes';\nimport { FileAccess } from 'vs/base/common/network';\nimport { timeout } from 'vs/base/common/async';\nimport { toErrorMessage } from 'vs/base/common/errorMessage';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { toDisposable, DisposableStore } from 'vs/base/common/lifecycle';\nimport * as objects from 'vs/base/common/objects';\nimport * as platform from 'vs/base/common/platform';\nimport { URI } from 'vs/base/common/uri';\nimport { IRemoteConsoleLog, log } from 'vs/base/common/console';\nimport { logRemoteEntry } from 'vs/workbench/services/extensions/common/remoteConsoleUtil';\nimport { findFreePort } from 'vs/base/node/ports';\nimport { IMessagePassingProtocol } from 'vs/base/parts/ipc/common/ipc';\nimport { PersistentProtocol } from 'vs/base/parts/ipc/common/ipc.net';\nimport { createRandomIPCHandle, NodeSocket } from 'vs/base/parts/ipc/node/ipc.net';\nimport { INativeWorkbenchEnvironmentService } from 'vs/workbench/services/environment/electron-sandbox/environmentService';\nimport { ILabelService } from 'vs/platform/label/common/label';\nimport { ILifecycleService, WillShutdownEvent } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { INotificationService, Severity } from 'vs/platform/notification/common/notification';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { INativeHostService } from 'vs/platform/native/electron-sandbox/native';\nimport { IWorkspaceContextService, WorkbenchState } from 'vs/platform/workspace/common/workspace';\nimport { IInitData, UIKind } from 'vs/workbench/api/common/extHost.protocol';\nimport { MessageType, createMessageOfType, isMessageOfType } from 'vs/workbench/services/extensions/common/extensionHostProtocol';\nimport { withNullAsUndefined } from 'vs/base/common/types';\nimport { IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { parseExtensionDevOptions } from '../common/extensionDevOptions';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { IExtensionHostDebugService } from 'vs/platform/debug/common/extensionHostDebug';\nimport { IExtensionHost, ExtensionHostLogFileName, ExtensionHostKind } from 'vs/workbench/services/extensions/common/extensions';\nimport { isUntitledWorkspace } from 'vs/platform/workspaces/common/workspaces';\nimport { IHostService } from 'vs/workbench/services/host/browser/host';\nimport { joinPath } from 'vs/base/common/resources';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IOutputChannelRegistry, Extensions } from 'vs/workbench/services/output/common/output';\nimport { isUUID } from 'vs/base/common/uuid';\nimport { join } from 'vs/base/common/path';\nimport { Readable, Writable } from 'stream';\nimport { StringDecoder } from 'string_decoder';\nimport { IShellEnvironmentService } from 'vs/workbench/services/environment/electron-sandbox/shellEnvironmentService';\n\nexport interface ILocalProcessExtensionHostInitData {\n\treadonly autoStart: boolean;\n\treadonly extensions: IExtensionDescription[];\n}\n\nexport interface ILocalProcessExtensionHostDataProvider {\n\tgetInitData(): Promise<ILocalProcessExtensionHostInitData>;\n}\n\nconst enum NativeLogMarkers {\n\tStart = 'START_NATIVE_LOG',\n\tEnd = 'END_NATIVE_LOG',\n}\n\nexport class LocalProcessExtensionHost implements IExtensionHost {\n\n\tpublic readonly kind = ExtensionHostKind.LocalProcess;\n\tpublic readonly remoteAuthority = null;\n\n\tprivate readonly _onExit: Emitter<[number, string]> = new Emitter<[number, string]>();\n\tpublic readonly onExit: Event<[number, string]> = this._onExit.event;\n\n\tprivate readonly _onDidSetInspectPort = new Emitter<void>();\n\n\tprivate readonly _toDispose = new DisposableStore();\n\n\tprivate readonly _isExtensionDevHost: boolean;\n\tprivate readonly _isExtensionDevDebug: boolean;\n\tprivate readonly _isExtensionDevDebugBrk: boolean;\n\tprivate readonly _isExtensionDevTestFromCli: boolean;\n\n\t// State\n\tprivate _lastExtensionHostError: string | null;\n\tprivate _terminating: boolean;\n\n\t// Resources, in order they get acquired/created when .start() is called:\n\tprivate _namedPipeServer: Server | null;\n\tprivate _inspectPort: number | null;\n\tprivate _extensionHostProcess: ChildProcess | null;\n\tprivate _extensionHostConnection: Socket | null;\n\tprivate _messageProtocol: Promise<PersistentProtocol> | null;\n\n\tprivate readonly _extensionHostLogFile: URI;\n\n\tconstructor(\n\t\tprivate readonly _initDataProvider: ILocalProcessExtensionHostDataProvider,\n\t\t@IWorkspaceContextService private readonly _contextService: IWorkspaceContextService,\n\t\t@INotificationService private readonly _notificationService: INotificationService,\n\t\t@INativeHostService private readonly _nativeHostService: INativeHostService,\n\t\t@ILifecycleService private readonly _lifecycleService: ILifecycleService,\n\t\t@INativeWorkbenchEnvironmentService private readonly _environmentService: INativeWorkbenchEnvironmentService,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@ILabelService private readonly _labelService: ILabelService,\n\t\t@IExtensionHostDebugService private readonly _extensionHostDebugService: IExtensionHostDebugService,\n\t\t@IHostService private readonly _hostService: IHostService,\n\t\t@IProductService private readonly _productService: IProductService,\n\t\t@IShellEnvironmentService private readonly _shellEnvironmentService: IShellEnvironmentService\n\t) {\n\t\tconst devOpts = parseExtensionDevOptions(this._environmentService);\n\t\tthis._isExtensionDevHost = devOpts.isExtensionDevHost;\n\t\tthis._isExtensionDevDebug = devOpts.isExtensionDevDebug;\n\t\tthis._isExtensionDevDebugBrk = devOpts.isExtensionDevDebugBrk;\n\t\tthis._isExtensionDevTestFromCli = devOpts.isExtensionDevTestFromCli;\n\n\t\tthis._lastExtensionHostError = null;\n\t\tthis._terminating = false;\n\n\t\tthis._namedPipeServer = null;\n\t\tthis._inspectPort = null;\n\t\tthis._extensionHostProcess = null;\n\t\tthis._extensionHostConnection = null;\n\t\tthis._messageProtocol = null;\n\n\t\tthis._extensionHostLogFile = joinPath(this._environmentService.extHostLogsPath, `${ExtensionHostLogFileName}.log`);\n\n\t\tthis._toDispose.add(this._onExit);\n\t\tthis._toDispose.add(this._lifecycleService.onWillShutdown(e => this._onWillShutdown(e)));\n\t\tthis._toDispose.add(this._lifecycleService.onDidShutdown(reason => this.terminate()));\n\t\tthis._toDispose.add(this._extensionHostDebugService.onClose(event => {\n\t\t\tif (this._isExtensionDevHost && this._environmentService.debugExtensionHost.debugId === event.sessionId) {\n\t\t\t\tthis._nativeHostService.closeWindow();\n\t\t\t}\n\t\t}));\n\t\tthis._toDispose.add(this._extensionHostDebugService.onReload(event => {\n\t\t\tif (this._isExtensionDevHost && this._environmentService.debugExtensionHost.debugId === event.sessionId) {\n\t\t\t\tthis._hostService.reload();\n\t\t\t}\n\t\t}));\n\n\t\tconst globalExitListener = () => this.terminate();\n\t\tprocess.once('exit', globalExitListener);\n\t\tthis._toDispose.add(toDisposable(() => {\n\t\t\tprocess.removeListener('exit' as 'loaded', globalExitListener); // https://github.com/electron/electron/issues/21475\n\t\t}));\n\t}\n\n\tpublic dispose(): void {\n\t\tthis.terminate();\n\t}\n\n\tpublic start(): Promise<IMessagePassingProtocol> | null {\n\t\tif (this._terminating) {\n\t\t\t// .terminate() was called\n\t\t\treturn null;\n\t\t}\n\n\t\tif (!this._messageProtocol) {\n\t\t\tthis._messageProtocol = Promise.all([\n\t\t\t\tthis._tryListenOnPipe(),\n\t\t\t\tthis._tryFindDebugPort(),\n\t\t\t\tthis._shellEnvironmentService.getShellEnv()\n\t\t\t]).then(([pipeName, portNumber, processEnv]) => {\n\t\t\t\tconst env = objects.mixin(processEnv, {\n\t\t\t\t\tVSCODE_AMD_ENTRYPOINT: 'vs/workbench/services/extensions/node/extensionHostProcess',\n\t\t\t\t\tVSCODE_PIPE_LOGGING: 'true',\n\t\t\t\t\tVSCODE_VERBOSE_LOGGING: true,\n\t\t\t\t\tVSCODE_LOG_NATIVE: this._isExtensionDevHost,\n\t\t\t\t\tVSCODE_IPC_HOOK_EXTHOST: pipeName,\n\t\t\t\t\tVSCODE_HANDLES_UNCAUGHT_ERRORS: true,\n\t\t\t\t\tVSCODE_LOG_STACK: !this._isExtensionDevTestFromCli && (this._isExtensionDevHost || !this._environmentService.isBuilt || this._productService.quality !== 'stable' || this._environmentService.verbose),\n\t\t\t\t\tVSCODE_LOG_LEVEL: this._environmentService.verbose ? 'trace' : this._environmentService.log\n\t\t\t\t});\n\n\t\t\t\tif (platform.isMacintosh) {\n\t\t\t\t\t// Unset `DYLD_LIBRARY_PATH`, as it leads to extension host crashes\n\t\t\t\t\t// See https://github.com/microsoft/vscode/issues/104525\n\t\t\t\t\tdelete env['DYLD_LIBRARY_PATH'];\n\t\t\t\t}\n\n\t\t\t\tif (this._isExtensionDevHost) {\n\t\t\t\t\t// Unset `VSCODE_NODE_CACHED_DATA_DIR` when developing extensions because it might\n\t\t\t\t\t// be that dependencies, that otherwise would be cached, get modified.\n\t\t\t\t\tdelete env['VSCODE_NODE_CACHED_DATA_DIR'];\n\t\t\t\t}\n\n\t\t\t\tconst opts = {\n\t\t\t\t\tenv,\n\t\t\t\t\t// We only detach the extension host on windows. Linux and Mac orphan by default\n\t\t\t\t\t// and detach under Linux and Mac create another process group.\n\t\t\t\t\t// We detach because we have noticed that when the renderer exits, its child processes\n\t\t\t\t\t// (i.e. extension host) are taken down in a brutal fashion by the OS\n\t\t\t\t\tdetached: !!platform.isWindows,\n\t\t\t\t\texecArgv: undefined as string[] | undefined,\n\t\t\t\t\tsilent: true\n\t\t\t\t};\n\n\t\t\t\tif (portNumber !== 0) {\n\t\t\t\t\topts.execArgv = [\n\t\t\t\t\t\t'--nolazy',\n\t\t\t\t\t\t(this._isExtensionDevDebugBrk ? '--inspect-brk=' : '--inspect=') + portNumber\n\t\t\t\t\t];\n\t\t\t\t} else {\n\t\t\t\t\topts.execArgv = ['--inspect-port=0'];\n\t\t\t\t}\n\n\t\t\t\tif (this._environmentService.args['prof-v8-extensions']) {\n\t\t\t\t\topts.execArgv.unshift('--prof');\n\t\t\t\t}\n\n\t\t\t\tif (this._environmentService.args['max-memory']) {\n\t\t\t\t\topts.execArgv.unshift(`--max-old-space-size=${this._environmentService.args['max-memory']}`);\n\t\t\t\t}\n\n\t\t\t\t// On linux crash reporter needs to be started on child node processes explicitly\n\t\t\t\tif (platform.isLinux) {\n\t\t\t\t\tconst crashReporterStartOptions: CrashReporterStartOptions = {\n\t\t\t\t\t\tcompanyName: this._productService.crashReporter?.companyName || 'Microsoft',\n\t\t\t\t\t\tproductName: this._productService.crashReporter?.productName || this._productService.nameShort,\n\t\t\t\t\t\tsubmitURL: '',\n\t\t\t\t\t\tuploadToServer: false\n\t\t\t\t\t};\n\t\t\t\t\tconst crashReporterId = this._environmentService.crashReporterId; // crashReporterId is set by the main process only when crash reporting is enabled by the user.\n\t\t\t\t\tconst appcenter = this._productService.appCenter;\n\t\t\t\t\tconst uploadCrashesToServer = !this._environmentService.crashReporterDirectory; // only upload unless --crash-reporter-directory is provided\n\t\t\t\t\tif (uploadCrashesToServer && appcenter && crashReporterId && isUUID(crashReporterId)) {\n\t\t\t\t\t\tconst submitURL = appcenter[`linux-x64`];\n\t\t\t\t\t\tcrashReporterStartOptions.submitURL = submitURL.concat('&uid=', crashReporterId, '&iid=', crashReporterId, '&sid=', crashReporterId);\n\t\t\t\t\t\tcrashReporterStartOptions.uploadToServer = true;\n\t\t\t\t\t}\n\t\t\t\t\t// In the upload to server case, there is a bug in electron that creates client_id file in the current\n\t\t\t\t\t// working directory. Setting the env BREAKPAD_DUMP_LOCATION will force electron to create the file in that location,\n\t\t\t\t\t// For https://github.com/microsoft/vscode/issues/105743\n\t\t\t\t\tconst extHostCrashDirectory = this._environmentService.crashReporterDirectory || this._environmentService.userDataPath;\n\t\t\t\t\topts.env.BREAKPAD_DUMP_LOCATION = join(extHostCrashDirectory, `${ExtensionHostLogFileName} Crash Reports`);\n\t\t\t\t\topts.env.VSCODE_CRASH_REPORTER_START_OPTIONS = JSON.stringify(crashReporterStartOptions);\n\t\t\t\t}\n\n\t\t\t\t// Run Extension Host as fork of current process\n\t\t\t\tthis._extensionHostProcess = fork(FileAccess.asFileUri('bootstrap-fork', require).fsPath, ['--type=extensionHost'], opts);\n\n\t\t\t\t// Catch all output coming from the extension host process\n\t\t\t\ttype Output = { data: string, format: string[] };\n\t\t\t\tconst onStdout = this._handleProcessOutputStream(this._extensionHostProcess.stdout!);\n\t\t\t\tconst onStderr = this._handleProcessOutputStream(this._extensionHostProcess.stderr!);\n\t\t\t\tconst onOutput = Event.any(\n\t\t\t\t\tEvent.map(onStdout.event, o => ({ data: `%c${o}`, format: [''] })),\n\t\t\t\t\tEvent.map(onStderr.event, o => ({ data: `%c${o}`, format: ['color: red'] }))\n\t\t\t\t);\n\n\t\t\t\t// Debounce all output, so we can render it in the Chrome console as a group\n\t\t\t\tconst onDebouncedOutput = Event.debounce<Output>(onOutput, (r, o) => {\n\t\t\t\t\treturn r\n\t\t\t\t\t\t? { data: r.data + o.data, format: [...r.format, ...o.format] }\n\t\t\t\t\t\t: { data: o.data, format: o.format };\n\t\t\t\t}, 100);\n\n\t\t\t\t// Print out extension host output\n\t\t\t\tonDebouncedOutput(output => {\n\t\t\t\t\tconst inspectorUrlMatch = output.data && output.data.match(/ws:\\/\\/([^\\s]+:(\\d+)\\/[^\\s]+)/);\n\t\t\t\t\tif (inspectorUrlMatch) {\n\t\t\t\t\t\tif (!this._environmentService.isBuilt && !this._isExtensionDevTestFromCli) {\n\t\t\t\t\t\t\tconsole.log(`%c[Extension Host] %cdebugger inspector at chrome-devtools://devtools/bundled/inspector.html?experiments=true&v8only=true&ws=${inspectorUrlMatch[1]}`, 'color: blue', 'color:');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!this._inspectPort) {\n\t\t\t\t\t\t\tthis._inspectPort = Number(inspectorUrlMatch[2]);\n\t\t\t\t\t\t\tthis._onDidSetInspectPort.fire();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!this._isExtensionDevTestFromCli) {\n\t\t\t\t\t\t\tconsole.group('Extension Host');\n\t\t\t\t\t\t\tconsole.log(output.data, ...output.format);\n\t\t\t\t\t\t\tconsole.groupEnd();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// Support logging from extension host\n\t\t\t\tthis._extensionHostProcess.on('message', msg => {\n\t\t\t\t\tif (msg && (<IRemoteConsoleLog>msg).type === '__$console') {\n\t\t\t\t\t\tthis._logExtensionHostMessage(<IRemoteConsoleLog>msg);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// Lifecycle\n\t\t\t\tthis._extensionHostProcess.on('error', (err) => this._onExtHostProcessError(err));\n\t\t\t\tthis._extensionHostProcess.on('exit', (code: number, signal: string) => this._onExtHostProcessExit(code, signal));\n\n\t\t\t\t// Notify debugger that we are ready to attach to the process if we run a development extension\n\t\t\t\tif (portNumber) {\n\t\t\t\t\tif (this._isExtensionDevHost && portNumber && this._isExtensionDevDebug && this._environmentService.debugExtensionHost.debugId) {\n\t\t\t\t\t\tthis._extensionHostDebugService.attachSession(this._environmentService.debugExtensionHost.debugId, portNumber);\n\t\t\t\t\t}\n\t\t\t\t\tthis._inspectPort = portNumber;\n\t\t\t\t\tthis._onDidSetInspectPort.fire();\n\t\t\t\t}\n\n\t\t\t\t// Help in case we fail to start it\n\t\t\t\tlet startupTimeoutHandle: any;\n\t\t\t\tif (!this._environmentService.isBuilt && !this._environmentService.remoteAuthority || this._isExtensionDevHost) {\n\t\t\t\t\tstartupTimeoutHandle = setTimeout(() => {\n\t\t\t\t\t\tconst msg = this._isExtensionDevDebugBrk\n\t\t\t\t\t\t\t? nls.localize('extensionHost.startupFailDebug', \"Extension host did not start in 10 seconds, it might be stopped on the first line and needs a debugger to continue.\")\n\t\t\t\t\t\t\t: nls.localize('extensionHost.startupFail', \"Extension host did not start in 10 seconds, that might be a problem.\");\n\n\t\t\t\t\t\tthis._notificationService.prompt(Severity.Warning, msg,\n\t\t\t\t\t\t\t[{\n\t\t\t\t\t\t\t\tlabel: nls.localize('reloadWindow', \"Reload Window\"),\n\t\t\t\t\t\t\t\trun: () => this._hostService.reload()\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t{ sticky: true }\n\t\t\t\t\t\t);\n\t\t\t\t\t}, 10000);\n\t\t\t\t}\n\n\t\t\t\t// Initialize extension host process with hand shakes\n\t\t\t\treturn this._tryExtHostHandshake().then((protocol) => {\n\t\t\t\t\tclearTimeout(startupTimeoutHandle);\n\t\t\t\t\treturn protocol;\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\treturn this._messageProtocol;\n\t}\n\n\t/**\n\t * Start a server (`this._namedPipeServer`) that listens on a named pipe and return the named pipe name.\n\t */\n\tprivate _tryListenOnPipe(): Promise<string> {\n\t\treturn new Promise<string>((resolve, reject) => {\n\t\t\tconst pipeName = createRandomIPCHandle();\n\n\t\t\tthis._namedPipeServer = createServer();\n\t\t\tthis._namedPipeServer.on('error', reject);\n\t\t\tthis._namedPipeServer.listen(pipeName, () => {\n\t\t\t\tif (this._namedPipeServer) {\n\t\t\t\t\tthis._namedPipeServer.removeListener('error', reject);\n\t\t\t\t}\n\t\t\t\tresolve(pipeName);\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Find a free port if extension host debugging is enabled.\n\t */\n\tprivate async _tryFindDebugPort(): Promise<number> {\n\n\t\tif (typeof this._environmentService.debugExtensionHost.port !== 'number') {\n\t\t\treturn 0;\n\t\t}\n\n\t\tconst expected = this._environmentService.debugExtensionHost.port;\n\t\tconst port = await findFreePort(expected, 10 /* try 10 ports */, 5000 /* try up to 5 seconds */);\n\n\t\tif (!this._isExtensionDevTestFromCli) {\n\t\t\tif (!port) {\n\t\t\t\tconsole.warn('%c[Extension Host] %cCould not find a free port for debugging', 'color: blue', 'color:');\n\t\t\t} else {\n\t\t\t\tif (port !== expected) {\n\t\t\t\t\tconsole.warn(`%c[Extension Host] %cProvided debugging port ${expected} is not free, using ${port} instead.`, 'color: blue', 'color:');\n\t\t\t\t}\n\t\t\t\tif (this._isExtensionDevDebugBrk) {\n\t\t\t\t\tconsole.warn(`%c[Extension Host] %cSTOPPED on first line for debugging on port ${port}`, 'color: blue', 'color:');\n\t\t\t\t} else {\n\t\t\t\t\tconsole.info(`%c[Extension Host] %cdebugger listening on port ${port}`, 'color: blue', 'color:');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn port || 0;\n\t}\n\n\tprivate _tryExtHostHandshake(): Promise<PersistentProtocol> {\n\n\t\treturn new Promise<PersistentProtocol>((resolve, reject) => {\n\n\t\t\t// Wait for the extension host to connect to our named pipe\n\t\t\t// and wrap the socket in the message passing protocol\n\t\t\tlet handle = setTimeout(() => {\n\t\t\t\tif (this._namedPipeServer) {\n\t\t\t\t\tthis._namedPipeServer.close();\n\t\t\t\t\tthis._namedPipeServer = null;\n\t\t\t\t}\n\t\t\t\treject('timeout');\n\t\t\t}, 60 * 1000);\n\n\t\t\tthis._namedPipeServer!.on('connection', socket => {\n\t\t\t\tclearTimeout(handle);\n\t\t\t\tif (this._namedPipeServer) {\n\t\t\t\t\tthis._namedPipeServer.close();\n\t\t\t\t\tthis._namedPipeServer = null;\n\t\t\t\t}\n\t\t\t\tthis._extensionHostConnection = socket;\n\n\t\t\t\t// using a buffered message protocol here because between now\n\t\t\t\t// and the first time a `then` executes some messages might be lost\n\t\t\t\t// unless we immediately register a listener for `onMessage`.\n\t\t\t\tresolve(new PersistentProtocol(new NodeSocket(this._extensionHostConnection)));\n\t\t\t});\n\n\t\t}).then((protocol) => {\n\n\t\t\t// 1) wait for the incoming `ready` event and send the initialization data.\n\t\t\t// 2) wait for the incoming `initialized` event.\n\t\t\treturn new Promise<PersistentProtocol>((resolve, reject) => {\n\n\t\t\t\tlet timeoutHandle: NodeJS.Timer;\n\t\t\t\tconst installTimeoutCheck = () => {\n\t\t\t\t\ttimeoutHandle = setTimeout(() => {\n\t\t\t\t\t\treject('timeout');\n\t\t\t\t\t}, 60 * 1000);\n\t\t\t\t};\n\t\t\t\tconst uninstallTimeoutCheck = () => {\n\t\t\t\t\tclearTimeout(timeoutHandle);\n\t\t\t\t};\n\n\t\t\t\t// Wait 60s for the ready message\n\t\t\t\tinstallTimeoutCheck();\n\n\t\t\t\tconst disposable = protocol.onMessage(msg => {\n\n\t\t\t\t\tif (isMessageOfType(msg, MessageType.Ready)) {\n\t\t\t\t\t\t// 1) Extension Host is ready to receive messages, initialize it\n\t\t\t\t\t\tuninstallTimeoutCheck();\n\n\t\t\t\t\t\tthis._createExtHostInitData().then(data => {\n\n\t\t\t\t\t\t\t// Wait 60s for the initialized message\n\t\t\t\t\t\t\tinstallTimeoutCheck();\n\n\t\t\t\t\t\t\tprotocol.send(VSBuffer.fromString(JSON.stringify(data)));\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (isMessageOfType(msg, MessageType.Initialized)) {\n\t\t\t\t\t\t// 2) Extension Host is initialized\n\t\t\t\t\t\tuninstallTimeoutCheck();\n\n\t\t\t\t\t\t// stop listening for messages here\n\t\t\t\t\t\tdisposable.dispose();\n\n\t\t\t\t\t\t// Register log channel for exthost log\n\t\t\t\t\t\tRegistry.as<IOutputChannelRegistry>(Extensions.OutputChannels).registerChannel({ id: 'extHostLog', label: nls.localize('extension host Log', \"Extension Host\"), file: this._extensionHostLogFile, log: true });\n\n\t\t\t\t\t\t// release this promise\n\t\t\t\t\t\tresolve(protocol);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconsole.error(`received unexpected message during handshake phase from the extension host: `, msg);\n\t\t\t\t});\n\n\t\t\t});\n\n\t\t});\n\t}\n\n\tprivate async _createExtHostInitData(): Promise<IInitData> {\n\t\tconst [telemetryInfo, initData] = await Promise.all([this._telemetryService.getTelemetryInfo(), this._initDataProvider.getInitData()]);\n\t\tconst workspace = this._contextService.getWorkspace();\n\t\treturn {\n\t\t\tcommit: this._productService.commit,\n\t\t\tversion: this._productService.version,\n\t\t\tparentPid: process.pid,\n\t\t\tenvironment: {\n\t\t\t\tisExtensionDevelopmentDebug: this._isExtensionDevDebug,\n\t\t\t\tappRoot: this._environmentService.appRoot ? URI.file(this._environmentService.appRoot) : undefined,\n\t\t\t\tappName: this._productService.nameLong,\n\t\t\t\tappUriScheme: this._productService.urlProtocol,\n\t\t\t\tappLanguage: platform.language,\n\t\t\t\textensionDevelopmentLocationURI: this._environmentService.extensionDevelopmentLocationURI,\n\t\t\t\textensionTestsLocationURI: this._environmentService.extensionTestsLocationURI,\n\t\t\t\tglobalStorageHome: this._environmentService.globalStorageHome,\n\t\t\t\tworkspaceStorageHome: this._environmentService.workspaceStorageHome,\n\t\t\t\twebviewResourceRoot: this._environmentService.webviewResourceRoot,\n\t\t\t\twebviewCspSource: this._environmentService.webviewCspSource,\n\t\t\t},\n\t\t\tworkspace: this._contextService.getWorkbenchState() === WorkbenchState.EMPTY ? undefined : {\n\t\t\t\tconfiguration: withNullAsUndefined(workspace.configuration),\n\t\t\t\tid: workspace.id,\n\t\t\t\tname: this._labelService.getWorkspaceLabel(workspace),\n\t\t\t\tisUntitled: workspace.configuration ? isUntitledWorkspace(workspace.configuration, this._environmentService) : false\n\t\t\t},\n\t\t\tremote: {\n\t\t\t\tauthority: this._environmentService.remoteAuthority,\n\t\t\t\tconnectionData: null,\n\t\t\t\tisRemote: false\n\t\t\t},\n\t\t\tresolvedExtensions: [],\n\t\t\thostExtensions: [],\n\t\t\textensions: initData.extensions,\n\t\t\ttelemetryInfo,\n\t\t\tlogLevel: this._logService.getLevel(),\n\t\t\tlogsLocation: this._environmentService.extHostLogsPath,\n\t\t\tlogFile: this._extensionHostLogFile,\n\t\t\tautoStart: initData.autoStart,\n\t\t\tuiKind: UIKind.Desktop\n\t\t};\n\t}\n\n\tprivate _logExtensionHostMessage(entry: IRemoteConsoleLog) {\n\n\t\tif (this._isExtensionDevTestFromCli) {\n\n\t\t\t// Log on main side if running tests from cli\n\t\t\tlogRemoteEntry(this._logService, entry);\n\t\t} else {\n\n\t\t\t// Send to local console\n\t\t\tlog(entry, 'Extension Host');\n\t\t}\n\t}\n\n\tprivate _onExtHostProcessError(err: any): void {\n\t\tlet errorMessage = toErrorMessage(err);\n\t\tif (errorMessage === this._lastExtensionHostError) {\n\t\t\treturn; // prevent error spam\n\t\t}\n\n\t\tthis._lastExtensionHostError = errorMessage;\n\n\t\tthis._notificationService.error(nls.localize('extensionHost.error', \"Error from the extension host: {0}\", errorMessage));\n\t}\n\n\tprivate _onExtHostProcessExit(code: number, signal: string): void {\n\t\tif (this._terminating) {\n\t\t\t// Expected termination path (we asked the process to terminate)\n\t\t\treturn;\n\t\t}\n\n\t\tthis._onExit.fire([code, signal]);\n\t}\n\n\tprivate _handleProcessOutputStream(stream: Readable) {\n\t\tlet last = '';\n\t\tlet isOmitting = false;\n\t\tconst event = new Emitter<string>();\n\t\tconst decoder = new StringDecoder('utf-8');\n\t\tstream.pipe(new Writable({\n\t\t\twrite(chunk, _encoding, callback) {\n\t\t\t\t// not a fancy approach, but this is the same approach used by the split2\n\t\t\t\t// module which is well-optimized (https://github.com/mcollina/split2)\n\t\t\t\tlast += typeof chunk === 'string' ? chunk : decoder.write(chunk);\n\t\t\t\tlet lines = last.split(/\\r?\\n/g);\n\t\t\t\tlast = lines.pop()!;\n\n\t\t\t\t// protected against an extension spamming and leaking memory if no new line is written.\n\t\t\t\tif (last.length > 10_000) {\n\t\t\t\t\tlines.push(last);\n\t\t\t\t\tlast = '';\n\t\t\t\t}\n\n\t\t\t\tfor (const line of lines) {\n\t\t\t\t\tif (isOmitting) {\n\t\t\t\t\t\tif (line === NativeLogMarkers.End) {\n\t\t\t\t\t\t\tisOmitting = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (line === NativeLogMarkers.Start) {\n\t\t\t\t\t\tisOmitting = true;\n\t\t\t\t\t} else if (line.length) {\n\t\t\t\t\t\tevent.fire(line + '\\n');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcallback();\n\t\t\t}\n\t\t}));\n\n\t\treturn event;\n\t}\n\n\tpublic async enableInspectPort(): Promise<boolean> {\n\t\tif (typeof this._inspectPort === 'number') {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (!this._extensionHostProcess) {\n\t\t\treturn false;\n\t\t}\n\n\t\tinterface ProcessExt {\n\t\t\t_debugProcess?(n: number): any;\n\t\t}\n\n\t\tif (typeof (<ProcessExt>process)._debugProcess === 'function') {\n\t\t\t// use (undocumented) _debugProcess feature of node\n\t\t\t(<ProcessExt>process)._debugProcess!(this._extensionHostProcess.pid);\n\t\t\tawait Promise.race([Event.toPromise(this._onDidSetInspectPort.event), timeout(1000)]);\n\t\t\treturn typeof this._inspectPort === 'number';\n\n\t\t} else if (!platform.isWindows) {\n\t\t\t// use KILL USR1 on non-windows platforms (fallback)\n\t\t\tthis._extensionHostProcess.kill('SIGUSR1');\n\t\t\tawait Promise.race([Event.toPromise(this._onDidSetInspectPort.event), timeout(1000)]);\n\t\t\treturn typeof this._inspectPort === 'number';\n\n\t\t} else {\n\t\t\t// not supported...\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic getInspectPort(): number | undefined {\n\t\treturn withNullAsUndefined(this._inspectPort);\n\t}\n\n\tpublic terminate(): void {\n\t\tif (this._terminating) {\n\t\t\treturn;\n\t\t}\n\t\tthis._terminating = true;\n\n\t\tthis._toDispose.dispose();\n\n\t\tif (!this._messageProtocol) {\n\t\t\t// .start() was not called\n\t\t\treturn;\n\t\t}\n\n\t\tthis._messageProtocol.then((protocol) => {\n\n\t\t\t// Send the extension host a request to terminate itself\n\t\t\t// (graceful termination)\n\t\t\tprotocol.send(createMessageOfType(MessageType.Terminate));\n\n\t\t\tprotocol.dispose();\n\n\t\t\t// Give the extension host 10s, after which we will\n\t\t\t// try to kill the process and release any resources\n\t\t\tsetTimeout(() => this._cleanResources(), 10 * 1000);\n\n\t\t}, (err) => {\n\n\t\t\t// Establishing a protocol with the extension host failed, so\n\t\t\t// try to kill the process and release any resources.\n\t\t\tthis._cleanResources();\n\t\t});\n\t}\n\n\tprivate _cleanResources(): void {\n\t\tif (this._namedPipeServer) {\n\t\t\tthis._namedPipeServer.close();\n\t\t\tthis._namedPipeServer = null;\n\t\t}\n\t\tif (this._extensionHostConnection) {\n\t\t\tthis._extensionHostConnection.end();\n\t\t\tthis._extensionHostConnection = null;\n\t\t}\n\t\tif (this._extensionHostProcess) {\n\t\t\tthis._extensionHostProcess.kill();\n\t\t\tthis._extensionHostProcess = null;\n\t\t}\n\t}\n\n\tprivate _onWillShutdown(event: WillShutdownEvent): void {\n\n\t\t// If the extension development host was started without debugger attached we need\n\t\t// to communicate this back to the main side to terminate the debug session\n\t\tif (this._isExtensionDevHost && !this._isExtensionDevTestFromCli && !this._isExtensionDevDebug && this._environmentService.debugExtensionHost.debugId) {\n\t\t\tthis._extensionHostDebugService.terminateSession(this._environmentService.debugExtensionHost.debugId);\n\t\t\tevent.join(timeout(100 /* wait a bit for IPC to get delivered */), 'join.extensionDevelopment');\n\t\t}\n\t}\n}\n"]}