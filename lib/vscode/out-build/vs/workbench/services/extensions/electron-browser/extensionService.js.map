{"version":3,"sources":["vs/workbench/services/extensions/electron-browser/extensionService.ts"],"names":[],"mappings":"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","file":"extensionService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { LocalProcessExtensionHost } from 'vs/workbench/services/extensions/electron-browser/localProcessExtensionHost';\nimport { CachedExtensionScanner } from 'vs/workbench/services/extensions/electron-browser/cachedExtensionScanner';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { AbstractExtensionService, ExtensionRunningLocation, ExtensionRunningLocationClassifier, ExtensionRunningPreference, parseScannedExtension } from 'vs/workbench/services/extensions/common/abstractExtensionService';\nimport * as nls from 'vs/nls';\nimport { runWhenIdle } from 'vs/base/common/async';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { IExtensionManagementService, IExtensionGalleryService } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { IWorkbenchExtensionEnablementService, EnablementState, IWebExtensionsScannerService } from 'vs/workbench/services/extensionManagement/common/extensionManagement';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IRemoteExtensionHostDataProvider, RemoteExtensionHost, IRemoteExtensionHostInitData } from 'vs/workbench/services/extensions/common/remoteExtensionHost';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { IRemoteAuthorityResolverService, RemoteAuthorityResolverError, RemoteTrustOption, ResolverResult } from 'vs/platform/remote/common/remoteAuthorityResolver';\nimport { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { ILifecycleService, LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { INotificationService, Severity } from 'vs/platform/notification/common/notification';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IHostService } from 'vs/workbench/services/host/browser/host';\nimport { IExtensionService, toExtension, ExtensionHostKind, IExtensionHost, webWorkerExtHostConfig } from 'vs/workbench/services/extensions/common/extensions';\nimport { ExtensionHostManager } from 'vs/workbench/services/extensions/common/extensionHostManager';\nimport { ExtensionIdentifier, IExtension, ExtensionType, IExtensionDescription, ExtensionKind } from 'vs/platform/extensions/common/extensions';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { PersistentConnectionEventType } from 'vs/platform/remote/common/remoteAgentConnection';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { Logger } from 'vs/workbench/services/extensions/common/extensionPoints';\nimport { flatten } from 'vs/base/common/arrays';\nimport { INativeHostService } from 'vs/platform/native/electron-sandbox/native';\nimport { IRemoteExplorerService } from 'vs/workbench/services/remote/common/remoteExplorerService';\nimport { Action2, registerAction2 } from 'vs/platform/actions/common/actions';\nimport { getRemoteName } from 'vs/platform/remote/common/remoteHosts';\nimport { IRemoteAgentEnvironment } from 'vs/platform/remote/common/remoteAgentEnvironment';\nimport { WebWorkerExtensionHost } from 'vs/workbench/services/extensions/browser/webWorkerExtensionHost';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { CATEGORIES } from 'vs/workbench/common/actions';\nimport { Schemas } from 'vs/base/common/network';\nimport { ExtensionHostExitCode } from 'vs/workbench/services/extensions/common/extensionHostProtocol';\nimport { updateProxyConfigurationsScope } from 'vs/platform/request/common/request';\nimport { ConfigurationScope } from 'vs/platform/configuration/common/configurationRegistry';\nimport { Codicon } from 'vs/base/common/codicons';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { IWorkspaceTrustManagementService } from 'vs/platform/workspace/common/workspaceTrust';\nimport { IExtensionManifestPropertiesService } from 'vs/workbench/services/extensions/common/extensionManifestPropertiesService';\n\nconst MACHINE_PROMPT = false;\n\nexport class ExtensionService extends AbstractExtensionService implements IExtensionService {\n\n\tprivate readonly _enableLocalWebWorker: boolean;\n\tprivate readonly _remoteInitData: Map<string, IRemoteExtensionHostInitData>;\n\tprivate readonly _extensionScanner: CachedExtensionScanner;\n\n\tconstructor(\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@IWorkbenchEnvironmentService _environmentService: IWorkbenchEnvironmentService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IWorkbenchExtensionEnablementService extensionEnablementService: IWorkbenchExtensionEnablementService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IProductService productService: IProductService,\n\t\t@IExtensionManagementService extensionManagementService: IExtensionManagementService,\n\t\t@IWorkspaceContextService contextService: IWorkspaceContextService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IRemoteAgentService private readonly _remoteAgentService: IRemoteAgentService,\n\t\t@IRemoteAuthorityResolverService private readonly _remoteAuthorityResolverService: IRemoteAuthorityResolverService,\n\t\t@ILifecycleService private readonly _lifecycleService: ILifecycleService,\n\t\t@IWebExtensionsScannerService private readonly _webExtensionsScannerService: IWebExtensionsScannerService,\n\t\t@INativeHostService private readonly _nativeHostService: INativeHostService,\n\t\t@IHostService private readonly _hostService: IHostService,\n\t\t@IRemoteExplorerService private readonly _remoteExplorerService: IRemoteExplorerService,\n\t\t@IExtensionGalleryService private readonly _extensionGalleryService: IExtensionGalleryService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@IDialogService private readonly _dialogService: IDialogService,\n\t\t@IWorkspaceTrustManagementService private readonly _workspaceTrustManagementService: IWorkspaceTrustManagementService,\n\t\t@IExtensionManifestPropertiesService extensionManifestPropertiesService: IExtensionManifestPropertiesService,\n\t) {\n\t\tsuper(\n\t\t\tnew ExtensionRunningLocationClassifier(\n\t\t\t\t(extension) => this._getExtensionKind(extension),\n\t\t\t\t(extensionKinds, isInstalledLocally, isInstalledRemotely, preference) => this._pickRunningLocation(extensionKinds, isInstalledLocally, isInstalledRemotely, preference)\n\t\t\t),\n\t\t\tinstantiationService,\n\t\t\tnotificationService,\n\t\t\t_environmentService,\n\t\t\ttelemetryService,\n\t\t\textensionEnablementService,\n\t\t\tfileService,\n\t\t\tproductService,\n\t\t\textensionManagementService,\n\t\t\tcontextService,\n\t\t\tconfigurationService,\n\t\t\textensionManifestPropertiesService\n\t\t);\n\n\t\tthis._enableLocalWebWorker = this._isLocalWebWorkerEnabled();\n\t\tthis._remoteInitData = new Map<string, IRemoteExtensionHostInitData>();\n\t\tthis._extensionScanner = instantiationService.createInstance(CachedExtensionScanner);\n\n\t\t// delay extension host creation and extension scanning\n\t\t// until the workbench is running. we cannot defer the\n\t\t// extension host more (LifecyclePhase.Restored) because\n\t\t// some editors require the extension host to restore\n\t\t// and this would result in a deadlock\n\t\t// see https://github.com/microsoft/vscode/issues/41322\n\t\tthis._lifecycleService.when(LifecyclePhase.Ready).then(() => {\n\t\t\t// reschedule to ensure this runs after restoring viewlets, panels, and editors\n\t\t\trunWhenIdle(() => {\n\t\t\t\tthis._initialize();\n\t\t\t}, 50 /*max delay*/);\n\t\t});\n\t}\n\n\tprivate _isLocalWebWorkerEnabled() {\n\t\tif (this._configurationService.getValue<boolean>(webWorkerExtHostConfig)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (this._environmentService.isExtensionDevelopment && this._environmentService.extensionDevelopmentKind?.some(k => k === 'web')) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprotected _scanSingleExtension(extension: IExtension): Promise<IExtensionDescription | null> {\n\t\tif (extension.location.scheme === Schemas.vscodeRemote) {\n\t\t\treturn this._remoteAgentService.scanSingleExtension(extension.location, extension.type === ExtensionType.System);\n\t\t}\n\n\t\treturn this._extensionScanner.scanSingleExtension(extension.location.fsPath, extension.type === ExtensionType.System, this.createLogger());\n\t}\n\n\tprivate async _scanAllLocalExtensions(): Promise<IExtensionDescription[]> {\n\t\treturn flatten(await Promise.all([\n\t\t\tthis._extensionScanner.scannedExtensions,\n\t\t\tthis._webExtensionsScannerService.scanAndTranslateExtensions().then(extensions => extensions.map(parseScannedExtension))\n\t\t]));\n\t}\n\n\tprivate _createLocalExtensionHostDataProvider(isInitialStart: boolean, desiredRunningLocation: ExtensionRunningLocation) {\n\t\treturn {\n\t\t\tgetInitData: async () => {\n\t\t\t\tif (isInitialStart) {\n\t\t\t\t\tconst localExtensions = this._checkEnabledAndProposedAPI(await this._scanAllLocalExtensions());\n\t\t\t\t\tconst runningLocation = this._runningLocationClassifier.determineRunningLocation(localExtensions, []);\n\t\t\t\t\tconst localProcessExtensions = filterByRunningLocation(localExtensions, runningLocation, desiredRunningLocation);\n\t\t\t\t\treturn {\n\t\t\t\t\t\tautoStart: false,\n\t\t\t\t\t\textensions: localProcessExtensions\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\t// restart case\n\t\t\t\t\tconst allExtensions = await this.getExtensions();\n\t\t\t\t\tconst localProcessExtensions = filterByRunningLocation(allExtensions, this._runningLocation, desiredRunningLocation);\n\t\t\t\t\treturn {\n\t\t\t\t\t\tautoStart: true,\n\t\t\t\t\t\textensions: localProcessExtensions\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate _createRemoteExtensionHostDataProvider(remoteAuthority: string): IRemoteExtensionHostDataProvider {\n\t\treturn {\n\t\t\tremoteAuthority: remoteAuthority,\n\t\t\tgetInitData: async () => {\n\t\t\t\tawait this.whenInstalledExtensionsRegistered();\n\t\t\t\treturn this._remoteInitData.get(remoteAuthority)!;\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate _pickRunningLocation(extensionKinds: ExtensionKind[], isInstalledLocally: boolean, isInstalledRemotely: boolean, preference: ExtensionRunningPreference): ExtensionRunningLocation {\n\t\treturn ExtensionService.pickRunningLocation(extensionKinds, isInstalledLocally, isInstalledRemotely, preference, Boolean(this._environmentService.remoteAuthority), this._enableLocalWebWorker);\n\t}\n\n\tpublic static pickRunningLocation(extensionKinds: ExtensionKind[], isInstalledLocally: boolean, isInstalledRemotely: boolean, preference: ExtensionRunningPreference, hasRemoteExtHost: boolean, hasWebWorkerExtHost: boolean): ExtensionRunningLocation {\n\t\tconst result: ExtensionRunningLocation[] = [];\n\t\tfor (const extensionKind of extensionKinds) {\n\t\t\tif (extensionKind === 'ui' && isInstalledLocally) {\n\t\t\t\t// ui extensions run locally if possible\n\t\t\t\tif (preference === ExtensionRunningPreference.None || preference === ExtensionRunningPreference.Local) {\n\t\t\t\t\treturn ExtensionRunningLocation.LocalProcess;\n\t\t\t\t} else {\n\t\t\t\t\tresult.push(ExtensionRunningLocation.LocalProcess);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (extensionKind === 'workspace' && isInstalledRemotely) {\n\t\t\t\t// workspace extensions run remotely if possible\n\t\t\t\tif (preference === ExtensionRunningPreference.None || preference === ExtensionRunningPreference.Remote) {\n\t\t\t\t\treturn ExtensionRunningLocation.Remote;\n\t\t\t\t} else {\n\t\t\t\t\tresult.push(ExtensionRunningLocation.Remote);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (extensionKind === 'workspace' && !hasRemoteExtHost) {\n\t\t\t\t// workspace extensions also run locally if there is no remote\n\t\t\t\tif (preference === ExtensionRunningPreference.None || preference === ExtensionRunningPreference.Local) {\n\t\t\t\t\treturn ExtensionRunningLocation.LocalProcess;\n\t\t\t\t} else {\n\t\t\t\t\tresult.push(ExtensionRunningLocation.LocalProcess);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (extensionKind === 'web' && isInstalledLocally && hasWebWorkerExtHost) {\n\t\t\t\t// web worker extensions run in the local web worker if possible\n\t\t\t\tif (preference === ExtensionRunningPreference.None || preference === ExtensionRunningPreference.Local) {\n\t\t\t\t\treturn ExtensionRunningLocation.LocalWebWorker;\n\t\t\t\t} else {\n\t\t\t\t\tresult.push(ExtensionRunningLocation.LocalWebWorker);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn (result.length > 0 ? result[0] : ExtensionRunningLocation.None);\n\t}\n\n\tprotected _createExtensionHosts(isInitialStart: boolean): IExtensionHost[] {\n\t\tconst result: IExtensionHost[] = [];\n\n\t\tconst localProcessExtHost = this._instantiationService.createInstance(LocalProcessExtensionHost, this._createLocalExtensionHostDataProvider(isInitialStart, ExtensionRunningLocation.LocalProcess));\n\t\tresult.push(localProcessExtHost);\n\n\t\tif (this._enableLocalWebWorker) {\n\t\t\tconst webWorkerExtHost = this._instantiationService.createInstance(WebWorkerExtensionHost, this._createLocalExtensionHostDataProvider(isInitialStart, ExtensionRunningLocation.LocalWebWorker));\n\t\t\tresult.push(webWorkerExtHost);\n\t\t}\n\n\t\tconst remoteAgentConnection = this._remoteAgentService.getConnection();\n\t\tif (remoteAgentConnection) {\n\t\t\tconst remoteExtHost = this._instantiationService.createInstance(RemoteExtensionHost, this._createRemoteExtensionHostDataProvider(remoteAgentConnection.remoteAuthority), this._remoteAgentService.socketFactory);\n\t\t\tresult.push(remoteExtHost);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprotected override _onExtensionHostCrashed(extensionHost: ExtensionHostManager, code: number, signal: string | null): void {\n\t\tconst activatedExtensions = Array.from(this._extensionHostActiveExtensions.values());\n\t\tsuper._onExtensionHostCrashed(extensionHost, code, signal);\n\n\t\tif (extensionHost.kind === ExtensionHostKind.LocalProcess) {\n\t\t\tif (code === ExtensionHostExitCode.VersionMismatch) {\n\t\t\t\tthis._notificationService.prompt(\n\t\t\t\t\tSeverity.Error,\n\t\t\t\t\tnls.localize('extensionService.versionMismatchCrash', \"Extension host cannot start: version mismatch.\"),\n\t\t\t\t\t[{\n\t\t\t\t\t\tlabel: nls.localize('relaunch', \"Relaunch VS Code\"),\n\t\t\t\t\t\trun: () => {\n\t\t\t\t\t\t\tthis._instantiationService.invokeFunction((accessor) => {\n\t\t\t\t\t\t\t\tconst hostService = accessor.get(IHostService);\n\t\t\t\t\t\t\t\thostService.restart();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}]\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst message = `Extension host terminated unexpectedly. The following extensions were running: ${activatedExtensions.map(id => id.value).join(', ')}`;\n\t\t\tthis._logService.error(message);\n\n\t\t\tthis._notificationService.prompt(Severity.Error, nls.localize('extensionService.crash', \"Extension host terminated unexpectedly.\"),\n\t\t\t\t[{\n\t\t\t\t\tlabel: nls.localize('devTools', \"Open Developer Tools\"),\n\t\t\t\t\trun: () => this._nativeHostService.openDevTools()\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: nls.localize('restart', \"Restart Extension Host\"),\n\t\t\t\t\trun: () => this.startExtensionHosts()\n\t\t\t\t}]\n\t\t\t);\n\n\t\t\ttype ExtensionHostCrashClassification = {\n\t\t\t\tcode: { classification: 'SystemMetaData', purpose: 'PerformanceAndHealth' };\n\t\t\t\tsignal: { classification: 'SystemMetaData', purpose: 'PerformanceAndHealth' };\n\t\t\t\textensionIds: { classification: 'SystemMetaData', purpose: 'PerformanceAndHealth' };\n\t\t\t};\n\t\t\ttype ExtensionHostCrashEvent = {\n\t\t\t\tcode: number;\n\t\t\t\tsignal: string | null;\n\t\t\t\textensionIds: string[];\n\t\t\t};\n\t\t\tthis._telemetryService.publicLog2<ExtensionHostCrashEvent, ExtensionHostCrashClassification>('extensionHostCrash', {\n\t\t\t\tcode,\n\t\t\t\tsignal,\n\t\t\t\textensionIds: activatedExtensions.map(e => e.value)\n\t\t\t});\n\n\t\t\tfor (const extensionId of activatedExtensions) {\n\t\t\t\ttype ExtensionHostCrashExtensionClassification = {\n\t\t\t\t\tcode: { classification: 'SystemMetaData', purpose: 'PerformanceAndHealth' };\n\t\t\t\t\tsignal: { classification: 'SystemMetaData', purpose: 'PerformanceAndHealth' };\n\t\t\t\t\textensionId: { classification: 'SystemMetaData', purpose: 'PerformanceAndHealth' };\n\t\t\t\t};\n\t\t\t\ttype ExtensionHostCrashExtensionEvent = {\n\t\t\t\t\tcode: number;\n\t\t\t\t\tsignal: string | null;\n\t\t\t\t\textensionId: string;\n\t\t\t\t};\n\t\t\t\tthis._telemetryService.publicLog2<ExtensionHostCrashExtensionEvent, ExtensionHostCrashExtensionClassification>('extensionHostCrashExtension', {\n\t\t\t\t\tcode,\n\t\t\t\t\tsignal,\n\t\t\t\t\textensionId: extensionId.value\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\t// --- impl\n\n\tprivate createLogger(): Logger {\n\t\treturn new Logger((severity, source, message) => {\n\t\t\tif (this._isDev && source) {\n\t\t\t\tthis._logOrShowMessage(severity, `[${source}]: ${message}`);\n\t\t\t} else {\n\t\t\t\tthis._logOrShowMessage(severity, message);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async _resolveAuthorityAgain(): Promise<void> {\n\t\tconst remoteAuthority = this._environmentService.remoteAuthority;\n\t\tif (!remoteAuthority) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst localProcessExtensionHost = this._getExtensionHostManager(ExtensionHostKind.LocalProcess)!;\n\t\tthis._remoteAuthorityResolverService._clearResolvedAuthority(remoteAuthority);\n\t\ttry {\n\t\t\tconst result = await localProcessExtensionHost.resolveAuthority(remoteAuthority);\n\t\t\tthis._remoteAuthorityResolverService._setResolvedAuthority(result.authority, result.options);\n\t\t} catch (err) {\n\t\t\tthis._remoteAuthorityResolverService._setResolvedAuthorityError(remoteAuthority, err);\n\t\t}\n\t}\n\n\tprotected async _scanAndHandleExtensions(): Promise<void> {\n\t\tthis._extensionScanner.startScanningExtensions(this.createLogger());\n\n\t\tconst remoteAuthority = this._environmentService.remoteAuthority;\n\t\tconst localProcessExtensionHost = this._getExtensionHostManager(ExtensionHostKind.LocalProcess)!;\n\n\t\tconst localExtensions = this._checkEnabledAndProposedAPI(await this._scanAllLocalExtensions());\n\t\tlet remoteEnv: IRemoteAgentEnvironment | null = null;\n\t\tlet remoteExtensions: IExtensionDescription[] = [];\n\n\t\tif (remoteAuthority) {\n\t\t\tlet resolverResult: ResolverResult;\n\n\t\t\ttry {\n\t\t\t\tresolverResult = await localProcessExtensionHost.resolveAuthority(remoteAuthority);\n\t\t\t} catch (err) {\n\t\t\t\tif (RemoteAuthorityResolverError.isNoResolverFound(err)) {\n\t\t\t\t\terr.isHandled = await this._handleNoResolverFound(remoteAuthority);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log(err);\n\t\t\t\t\tif (RemoteAuthorityResolverError.isHandled(err)) {\n\t\t\t\t\t\tconsole.log(`Error handled: Not showing a notification for the error`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._remoteAuthorityResolverService._setResolvedAuthorityError(remoteAuthority, err);\n\n\t\t\t\t// Proceed with the local extension host\n\t\t\t\tawait this._startLocalExtensionHost(localExtensions);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet promptForMachineTrust = MACHINE_PROMPT;\n\n\t\t\tif (resolverResult.options?.trust === RemoteTrustOption.DisableTrust) {\n\t\t\t\tpromptForMachineTrust = false;\n\t\t\t\tthis._workspaceTrustManagementService.setWorkspaceTrust(true);\n\t\t\t} else if (resolverResult.options?.trust === RemoteTrustOption.MachineTrusted) {\n\t\t\t\tpromptForMachineTrust = false;\n\t\t\t}\n\n\t\t\tif (promptForMachineTrust) {\n\t\t\t\tconst dialogResult = await this._dialogService.show(\n\t\t\t\t\tSeverity.Info,\n\t\t\t\t\tnls.localize('machineTrustQuestion', \"Do you trust the machine you're connecting to?\"),\n\t\t\t\t\t[nls.localize('yes', \"Yes, connect.\"), nls.localize('no', \"No, do not connect.\")],\n\t\t\t\t\t{\n\t\t\t\t\t\tcancelId: 1,\n\t\t\t\t\t\tcustom: {\n\t\t\t\t\t\t\ticon: Codicon.remoteExplorer\n\t\t\t\t\t\t},\n\t\t\t\t\t\t// checkbox: { label: nls.localize('remember', \"Remember my choice\"), checked: true }\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\tif (dialogResult.choice !== 0) {\n\t\t\t\t\t// Did not confirm trust\n\t\t\t\t\tthis._notificationService.notify({ severity: Severity.Warning, message: nls.localize('trustFailure', \"Refused to connect to untrusted machine.\") });\n\t\t\t\t\t// Proceed with the local extension host\n\t\t\t\t\tawait this._startLocalExtensionHost(localExtensions);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// set the resolved authority\n\t\t\tthis._remoteAuthorityResolverService._setResolvedAuthority(resolverResult.authority, resolverResult.options);\n\t\t\tthis._remoteExplorerService.setTunnelInformation(resolverResult.tunnelInformation);\n\n\t\t\t// monitor for breakage\n\t\t\tconst connection = this._remoteAgentService.getConnection();\n\t\t\tif (connection) {\n\t\t\t\tconnection.onDidStateChange(async (e) => {\n\t\t\t\t\tif (e.type === PersistentConnectionEventType.ConnectionLost) {\n\t\t\t\t\t\tthis._remoteAuthorityResolverService._clearResolvedAuthority(remoteAuthority);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tconnection.onReconnecting(() => this._resolveAuthorityAgain());\n\t\t\t}\n\n\t\t\t// fetch the remote environment\n\t\t\t[remoteEnv, remoteExtensions] = await Promise.all([\n\t\t\t\tthis._remoteAgentService.getEnvironment(),\n\t\t\t\tthis._remoteAgentService.scanExtensions()\n\t\t\t]);\n\t\t\tremoteExtensions = this._checkEnabledAndProposedAPI(remoteExtensions);\n\n\t\t\tif (!remoteEnv) {\n\t\t\t\tthis._notificationService.notify({ severity: Severity.Error, message: nls.localize('getEnvironmentFailure', \"Could not fetch remote environment\") });\n\t\t\t\t// Proceed with the local extension host\n\t\t\t\tawait this._startLocalExtensionHost(localExtensions);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tupdateProxyConfigurationsScope(remoteEnv.useHostProxy ? ConfigurationScope.APPLICATION : ConfigurationScope.MACHINE);\n\t\t}\n\n\t\tawait this._startLocalExtensionHost(localExtensions, remoteAuthority, remoteEnv, remoteExtensions);\n\t}\n\n\tprivate async _startLocalExtensionHost(localExtensions: IExtensionDescription[], remoteAuthority: string | undefined = undefined, remoteEnv: IRemoteAgentEnvironment | null = null, remoteExtensions: IExtensionDescription[] = []): Promise<void> {\n\n\t\tthis._runningLocation = this._runningLocationClassifier.determineRunningLocation(localExtensions, remoteExtensions);\n\n\t\t// remove non-UI extensions from the local extensions\n\t\tconst localProcessExtensions = filterByRunningLocation(localExtensions, this._runningLocation, ExtensionRunningLocation.LocalProcess);\n\t\tconst localWebWorkerExtensions = filterByRunningLocation(localExtensions, this._runningLocation, ExtensionRunningLocation.LocalWebWorker);\n\t\tremoteExtensions = filterByRunningLocation(remoteExtensions, this._runningLocation, ExtensionRunningLocation.Remote);\n\n\t\tconst result = this._registry.deltaExtensions(remoteExtensions.concat(localProcessExtensions).concat(localWebWorkerExtensions), []);\n\t\tif (result.removedDueToLooping.length > 0) {\n\t\t\tthis._logOrShowMessage(Severity.Error, nls.localize('looping', \"The following extensions contain dependency loops and have been disabled: {0}\", result.removedDueToLooping.map(e => `'${e.identifier.value}'`).join(', ')));\n\t\t}\n\n\t\tif (remoteAuthority && remoteEnv) {\n\t\t\tthis._remoteInitData.set(remoteAuthority, {\n\t\t\t\tconnectionData: this._remoteAuthorityResolverService.getConnectionData(remoteAuthority),\n\t\t\t\tpid: remoteEnv.pid,\n\t\t\t\tappRoot: remoteEnv.appRoot,\n\t\t\t\textensionHostLogsPath: remoteEnv.extensionHostLogsPath,\n\t\t\t\tglobalStorageHome: remoteEnv.globalStorageHome,\n\t\t\t\tworkspaceStorageHome: remoteEnv.workspaceStorageHome,\n\t\t\t\textensions: remoteExtensions,\n\t\t\t\tallExtensions: this._registry.getAllExtensionDescriptions(),\n\t\t\t});\n\t\t}\n\n\t\tthis._doHandleExtensionPoints(this._registry.getAllExtensionDescriptions());\n\n\t\tconst localProcessExtensionHost = this._getExtensionHostManager(ExtensionHostKind.LocalProcess);\n\t\tif (localProcessExtensionHost) {\n\t\t\tlocalProcessExtensionHost.start(localProcessExtensions.map(extension => extension.identifier).filter(id => this._registry.containsExtension(id)));\n\t\t}\n\n\t\tconst localWebWorkerExtensionHost = this._getExtensionHostManager(ExtensionHostKind.LocalWebWorker);\n\t\tif (localWebWorkerExtensionHost) {\n\t\t\tlocalWebWorkerExtensionHost.start(localWebWorkerExtensions.map(extension => extension.identifier).filter(id => this._registry.containsExtension(id)));\n\t\t}\n\t}\n\n\tpublic override async getInspectPort(tryEnableInspector: boolean): Promise<number> {\n\t\tconst localProcessExtensionHost = this._getExtensionHostManager(ExtensionHostKind.LocalProcess);\n\t\tif (localProcessExtensionHost) {\n\t\t\treturn localProcessExtensionHost.getInspectPort(tryEnableInspector);\n\t\t}\n\t\treturn 0;\n\t}\n\n\tpublic _onExtensionHostExit(code: number): void {\n\t\t// Dispose everything associated with the extension host\n\t\tthis.stopExtensionHosts();\n\n\t\tif (this._isExtensionDevTestFromCli) {\n\t\t\t// When CLI testing make sure to exit with proper exit code\n\t\t\tthis._nativeHostService.exit(code);\n\t\t} else {\n\t\t\t// Expected development extension termination: When the extension host goes down we also shutdown the window\n\t\t\tthis._nativeHostService.closeWindow();\n\t\t}\n\t}\n\n\tprivate async _handleNoResolverFound(remoteAuthority: string): Promise<boolean> {\n\t\tconst remoteName = getRemoteName(remoteAuthority);\n\t\tconst recommendation = this._productService.remoteExtensionTips?.[remoteName];\n\t\tif (!recommendation) {\n\t\t\treturn false;\n\t\t}\n\t\tconst sendTelemetry = (userReaction: 'install' | 'enable' | 'cancel') => {\n\t\t\t/* __GDPR__\n\t\t\t\"remoteExtensionRecommendations:popup\" : {\n\t\t\t\t\"userReaction\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\"extensionId\": { \"classification\": \"PublicNonPersonalData\", \"purpose\": \"FeatureInsight\" }\n\t\t\t}\n\t\t\t*/\n\t\t\tthis._telemetryService.publicLog('remoteExtensionRecommendations:popup', { userReaction, extensionId: resolverExtensionId });\n\t\t};\n\n\t\tconst resolverExtensionId = recommendation.extensionId;\n\t\tconst allExtensions = await this._scanAllLocalExtensions();\n\t\tconst extension = allExtensions.filter(e => e.identifier.value === resolverExtensionId)[0];\n\t\tif (extension) {\n\t\t\tif (!this._isEnabled(extension)) {\n\t\t\t\tconst message = nls.localize('enableResolver', \"Extension '{0}' is required to open the remote window.\\nOK to enable?\", recommendation.friendlyName);\n\t\t\t\tthis._notificationService.prompt(Severity.Info, message,\n\t\t\t\t\t[{\n\t\t\t\t\t\tlabel: nls.localize('enable', 'Enable and Reload'),\n\t\t\t\t\t\trun: async () => {\n\t\t\t\t\t\t\tsendTelemetry('enable');\n\t\t\t\t\t\t\tawait this._extensionEnablementService.setEnablement([toExtension(extension)], EnablementState.EnabledGlobally);\n\t\t\t\t\t\t\tawait this._hostService.reload();\n\t\t\t\t\t\t}\n\t\t\t\t\t}],\n\t\t\t\t\t{ sticky: true }\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\t// Install the Extension and reload the window to handle.\n\t\t\tconst message = nls.localize('installResolver', \"Extension '{0}' is required to open the remote window.\\nDo you want to install the extension?\", recommendation.friendlyName);\n\t\t\tthis._notificationService.prompt(Severity.Info, message,\n\t\t\t\t[{\n\t\t\t\t\tlabel: nls.localize('install', 'Install and Reload'),\n\t\t\t\t\trun: async () => {\n\t\t\t\t\t\tsendTelemetry('install');\n\t\t\t\t\t\tconst galleryExtension = await this._extensionGalleryService.getCompatibleExtension({ id: resolverExtensionId });\n\t\t\t\t\t\tif (galleryExtension) {\n\t\t\t\t\t\t\tawait this._extensionManagementService.installFromGallery(galleryExtension);\n\t\t\t\t\t\t\tawait this._hostService.reload();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._notificationService.error(nls.localize('resolverExtensionNotFound', \"`{0}` not found on marketplace\"));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t}],\n\t\t\t\t{\n\t\t\t\t\tsticky: true,\n\t\t\t\t\tonCancel: () => sendTelemetry('cancel')\n\t\t\t\t}\n\t\t\t);\n\n\t\t}\n\t\treturn true;\n\t}\n}\n\nfunction filterByRunningLocation(extensions: IExtensionDescription[], runningLocation: Map<string, ExtensionRunningLocation>, desiredRunningLocation: ExtensionRunningLocation): IExtensionDescription[] {\n\treturn extensions.filter(ext => runningLocation.get(ExtensionIdentifier.toKey(ext.identifier)) === desiredRunningLocation);\n}\n\nregisterSingleton(IExtensionService, ExtensionService);\n\nclass RestartExtensionHostAction extends Action2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.action.restartExtensionHost',\n\t\t\ttitle: { value: nls.localize('restartExtensionHost', \"Restart Extension Host\"), original: 'Restart Extension Host' },\n\t\t\tcategory: CATEGORIES.Developer,\n\t\t\tf1: true\n\t\t});\n\t}\n\n\trun(accessor: ServicesAccessor): void {\n\t\taccessor.get(IExtensionService).restartExtensionHost();\n\t}\n}\n\nregisterAction2(RestartExtensionHostAction);\n"]}