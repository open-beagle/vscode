{"version":3,"sources":["vs/workbench/services/extensions/electron-browser/cachedExtensionScanner.ts"],"names":[],"mappings":"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","file":"cachedExtensionScanner.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as fs from 'fs';\nimport * as nls from 'vs/nls';\nimport * as path from 'vs/base/common/path';\nimport * as errors from 'vs/base/common/errors';\nimport { FileAccess, Schemas } from 'vs/base/common/network';\nimport * as objects from 'vs/base/common/objects';\nimport * as platform from 'vs/base/common/platform';\nimport { joinPath, originalFSPath } from 'vs/base/common/resources';\nimport { URI } from 'vs/base/common/uri';\nimport * as pfs from 'vs/base/node/pfs';\nimport { INativeWorkbenchEnvironmentService } from 'vs/workbench/services/environment/electron-sandbox/environmentService';\nimport { IWorkbenchExtensionEnablementService } from 'vs/workbench/services/extensionManagement/common/extensionManagement';\nimport { BUILTIN_MANIFEST_CACHE_FILE, MANIFEST_CACHE_FOLDER, USER_MANIFEST_CACHE_FILE, ExtensionIdentifier, IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { INotificationService, Severity } from 'vs/platform/notification/common/notification';\nimport { IHostService } from 'vs/workbench/services/host/browser/host';\nimport { ExtensionScanner, ExtensionScannerInput, IExtensionReference, IExtensionResolver, IRelaxedExtensionDescription } from 'vs/workbench/services/extensions/node/extensionPoints';\nimport { Translations, ILog } from 'vs/workbench/services/extensions/common/extensionPoints';\n\ninterface IExtensionCacheData {\n\tinput: ExtensionScannerInput;\n\tresult: IExtensionDescription[];\n}\n\nlet _SystemExtensionsRoot: string | null = null;\nfunction getSystemExtensionsRoot(): string {\n\tif (!_SystemExtensionsRoot) {\n\t\t_SystemExtensionsRoot = path.normalize(path.join(FileAccess.asFileUri('', require).fsPath, '..', 'extensions'));\n\t}\n\treturn _SystemExtensionsRoot;\n}\n\nlet _ExtraDevSystemExtensionsRoot: string | null = null;\nfunction getExtraDevSystemExtensionsRoot(): string {\n\tif (!_ExtraDevSystemExtensionsRoot) {\n\t\t_ExtraDevSystemExtensionsRoot = path.normalize(path.join(FileAccess.asFileUri('', require).fsPath, '..', '.build', 'builtInExtensions'));\n\t}\n\treturn _ExtraDevSystemExtensionsRoot;\n}\n\nexport class CachedExtensionScanner {\n\n\tpublic readonly scannedExtensions: Promise<IExtensionDescription[]>;\n\tprivate _scannedExtensionsResolve!: (result: IExtensionDescription[]) => void;\n\tprivate _scannedExtensionsReject!: (err: any) => void;\n\tpublic readonly translationConfig: Promise<Translations>;\n\n\tconstructor(\n\t\t@INotificationService private readonly _notificationService: INotificationService,\n\t\t@INativeWorkbenchEnvironmentService private readonly _environmentService: INativeWorkbenchEnvironmentService,\n\t\t@IWorkbenchExtensionEnablementService private readonly _extensionEnablementService: IWorkbenchExtensionEnablementService,\n\t\t@IHostService private readonly _hostService: IHostService,\n\t\t@IProductService private readonly _productService: IProductService\n\t) {\n\t\tthis.scannedExtensions = new Promise<IExtensionDescription[]>((resolve, reject) => {\n\t\t\tthis._scannedExtensionsResolve = resolve;\n\t\t\tthis._scannedExtensionsReject = reject;\n\t\t});\n\t\tthis.translationConfig = CachedExtensionScanner._readTranslationConfig();\n\t}\n\n\tpublic async scanSingleExtension(path: string, isBuiltin: boolean, log: ILog): Promise<IExtensionDescription | null> {\n\t\tconst translations = await this.translationConfig;\n\n\t\tconst version = this._productService.version;\n\t\tconst commit = this._productService.commit;\n\t\tconst devMode = !!process.env['VSCODE_DEV'];\n\t\tconst locale = platform.language;\n\t\tconst input = new ExtensionScannerInput(version, commit, locale, devMode, path, isBuiltin, false, translations);\n\t\treturn ExtensionScanner.scanSingleExtension(input, log);\n\t}\n\n\tpublic async startScanningExtensions(log: ILog): Promise<void> {\n\t\ttry {\n\t\t\tconst translations = await this.translationConfig;\n\t\t\tconst { system, user, development } = await CachedExtensionScanner._scanInstalledExtensions(this._hostService, this._notificationService, this._environmentService, this._extensionEnablementService, this._productService, log, translations);\n\n\t\t\tlet result = new Map<string, IExtensionDescription>();\n\t\t\tsystem.forEach((systemExtension) => {\n\t\t\t\tconst extensionKey = ExtensionIdentifier.toKey(systemExtension.identifier);\n\t\t\t\tconst extension = result.get(extensionKey);\n\t\t\t\tif (extension) {\n\t\t\t\t\tlog.warn(systemExtension.extensionLocation.fsPath, nls.localize('overwritingExtension', \"Overwriting extension {0} with {1}.\", extension.extensionLocation.fsPath, systemExtension.extensionLocation.fsPath));\n\t\t\t\t}\n\t\t\t\tresult.set(extensionKey, systemExtension);\n\t\t\t});\n\t\t\tuser.forEach((userExtension) => {\n\t\t\t\tconst extensionKey = ExtensionIdentifier.toKey(userExtension.identifier);\n\t\t\t\tconst extension = result.get(extensionKey);\n\t\t\t\tif (extension) {\n\t\t\t\t\tlog.warn(userExtension.extensionLocation.fsPath, nls.localize('overwritingExtension', \"Overwriting extension {0} with {1}.\", extension.extensionLocation.fsPath, userExtension.extensionLocation.fsPath));\n\t\t\t\t}\n\t\t\t\tresult.set(extensionKey, userExtension);\n\t\t\t});\n\t\t\tdevelopment.forEach(developedExtension => {\n\t\t\t\tlog.info('', nls.localize('extensionUnderDevelopment', \"Loading development extension at {0}\", developedExtension.extensionLocation.fsPath));\n\t\t\t\tconst extensionKey = ExtensionIdentifier.toKey(developedExtension.identifier);\n\t\t\t\tresult.set(extensionKey, developedExtension);\n\t\t\t});\n\t\t\tlet r: IExtensionDescription[] = [];\n\t\t\tresult.forEach((value) => r.push(value));\n\n\t\t\tthis._scannedExtensionsResolve(r);\n\t\t} catch (err) {\n\t\t\tthis._scannedExtensionsReject(err);\n\t\t}\n\t}\n\n\tprivate static async _validateExtensionsCache(hostService: IHostService, notificationService: INotificationService, environmentService: INativeWorkbenchEnvironmentService, cacheKey: string, input: ExtensionScannerInput): Promise<void> {\n\t\tconst cacheFolder = path.join(environmentService.userDataPath, MANIFEST_CACHE_FOLDER);\n\t\tconst cacheFile = path.join(cacheFolder, cacheKey);\n\n\t\tconst expected = JSON.parse(JSON.stringify(await ExtensionScanner.scanExtensions(input, new NullLogger())));\n\n\t\tconst cacheContents = await this._readExtensionCache(environmentService, cacheKey);\n\t\tif (!cacheContents) {\n\t\t\t// Cache has been deleted by someone else, which is perfectly fine...\n\t\t\treturn;\n\t\t}\n\t\tconst actual = cacheContents.result;\n\n\t\tif (objects.equals(expected, actual)) {\n\t\t\t// Cache is valid and running with it is perfectly fine...\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tawait pfs.rimraf(cacheFile, pfs.RimRafMode.MOVE);\n\t\t} catch (err) {\n\t\t\terrors.onUnexpectedError(err);\n\t\t\tconsole.error(err);\n\t\t}\n\n\t\tnotificationService.prompt(\n\t\t\tSeverity.Error,\n\t\t\tnls.localize('extensionCache.invalid', \"Extensions have been modified on disk. Please reload the window.\"),\n\t\t\t[{\n\t\t\t\tlabel: nls.localize('reloadWindow', \"Reload Window\"),\n\t\t\t\trun: () => hostService.reload()\n\t\t\t}]\n\t\t);\n\t}\n\n\tprivate static async _readExtensionCache(environmentService: INativeWorkbenchEnvironmentService, cacheKey: string): Promise<IExtensionCacheData | null> {\n\t\tconst cacheFolder = path.join(environmentService.userDataPath, MANIFEST_CACHE_FOLDER);\n\t\tconst cacheFile = path.join(cacheFolder, cacheKey);\n\n\t\ttry {\n\t\t\tconst cacheRawContents = await fs.promises.readFile(cacheFile, 'utf8');\n\t\t\treturn JSON.parse(cacheRawContents);\n\t\t} catch (err) {\n\t\t\t// That's ok...\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate static async _writeExtensionCache(environmentService: INativeWorkbenchEnvironmentService, cacheKey: string, cacheContents: IExtensionCacheData): Promise<void> {\n\t\tconst cacheFolder = path.join(environmentService.userDataPath, MANIFEST_CACHE_FOLDER);\n\t\tconst cacheFile = path.join(cacheFolder, cacheKey);\n\n\t\ttry {\n\t\t\tawait fs.promises.mkdir(cacheFolder, { recursive: true });\n\t\t} catch (err) {\n\t\t\t// That's ok...\n\t\t}\n\n\t\ttry {\n\t\t\tawait pfs.writeFile(cacheFile, JSON.stringify(cacheContents));\n\t\t} catch (err) {\n\t\t\t// That's ok...\n\t\t}\n\t}\n\n\tprivate static async _scanExtensionsWithCache(hostService: IHostService, notificationService: INotificationService, environmentService: INativeWorkbenchEnvironmentService, cacheKey: string, input: ExtensionScannerInput, log: ILog): Promise<IExtensionDescription[]> {\n\t\tif (input.devMode) {\n\t\t\t// Do not cache when running out of sources...\n\t\t\treturn ExtensionScanner.scanExtensions(input, log);\n\t\t}\n\n\t\ttry {\n\t\t\tconst folderStat = await fs.promises.stat(input.absoluteFolderPath);\n\t\t\tinput.mtime = folderStat.mtime.getTime();\n\t\t} catch (err) {\n\t\t\t// That's ok...\n\t\t}\n\n\t\tconst cacheContents = await this._readExtensionCache(environmentService, cacheKey);\n\t\tif (cacheContents && cacheContents.input && ExtensionScannerInput.equals(cacheContents.input, input)) {\n\t\t\t// Validate the cache asynchronously after 5s\n\t\t\tsetTimeout(async () => {\n\t\t\t\ttry {\n\t\t\t\t\tawait this._validateExtensionsCache(hostService, notificationService, environmentService, cacheKey, input);\n\t\t\t\t} catch (err) {\n\t\t\t\t\terrors.onUnexpectedError(err);\n\t\t\t\t}\n\t\t\t}, 5000);\n\t\t\treturn cacheContents.result.map((extensionDescription) => {\n\t\t\t\t// revive URI object\n\t\t\t\t(<IRelaxedExtensionDescription>extensionDescription).extensionLocation = URI.revive(extensionDescription.extensionLocation);\n\t\t\t\treturn extensionDescription;\n\t\t\t});\n\t\t}\n\n\t\tconst counterLogger = new CounterLogger(log);\n\t\tconst result = await ExtensionScanner.scanExtensions(input, counterLogger);\n\t\tif (counterLogger.errorCnt === 0) {\n\t\t\t// Nothing bad happened => cache the result\n\t\t\tconst cacheContents: IExtensionCacheData = {\n\t\t\t\tinput: input,\n\t\t\t\tresult: result\n\t\t\t};\n\t\t\tawait this._writeExtensionCache(environmentService, cacheKey, cacheContents);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate static async _readTranslationConfig(): Promise<Translations> {\n\t\tif (platform.translationsConfigFile) {\n\t\t\ttry {\n\t\t\t\tconst content = await fs.promises.readFile(platform.translationsConfigFile, 'utf8');\n\t\t\t\treturn JSON.parse(content) as Translations;\n\t\t\t} catch (err) {\n\t\t\t\t// no problemo\n\t\t\t}\n\t\t}\n\t\treturn Object.create(null);\n\t}\n\n\tprivate static _scanInstalledExtensions(\n\t\thostService: IHostService,\n\t\tnotificationService: INotificationService,\n\t\tenvironmentService: INativeWorkbenchEnvironmentService,\n\t\textensionEnablementService: IWorkbenchExtensionEnablementService,\n\t\tproductService: IProductService,\n\t\tlog: ILog,\n\t\ttranslations: Translations\n\t): Promise<{ system: IExtensionDescription[], user: IExtensionDescription[], development: IExtensionDescription[] }> {\n\n\t\tconst version = productService.version;\n\t\tconst commit = productService.commit;\n\t\tconst devMode = !!process.env['VSCODE_DEV'];\n\t\tconst locale = platform.language;\n\n\t\tconst builtinExtensions = this._scanExtensionsWithCache(\n\t\t\thostService,\n\t\t\tnotificationService,\n\t\t\tenvironmentService,\n\t\t\tBUILTIN_MANIFEST_CACHE_FILE,\n\t\t\tnew ExtensionScannerInput(version, commit, locale, devMode, getSystemExtensionsRoot(), true, false, translations),\n\t\t\tlog\n\t\t);\n\n\t\tlet finalBuiltinExtensions: Promise<IExtensionDescription[]> = builtinExtensions;\n\n\t\tif (devMode) {\n\t\t\tconst builtInExtensions = Promise.resolve<IBuiltInExtension[]>(productService.builtInExtensions || []);\n\n\t\t\tconst controlFilePath = joinPath(environmentService.userHome, '.vscode-oss-dev', 'extensions', 'control.json').fsPath;\n\t\t\tconst controlFile = fs.promises.readFile(controlFilePath, 'utf8')\n\t\t\t\t.then<IBuiltInExtensionControl>(raw => JSON.parse(raw), () => ({} as any));\n\n\t\t\tconst input = new ExtensionScannerInput(version, commit, locale, devMode, getExtraDevSystemExtensionsRoot(), true, false, translations);\n\t\t\tconst extraBuiltinExtensions = Promise.all([builtInExtensions, controlFile])\n\t\t\t\t.then(([builtInExtensions, control]) => new ExtraBuiltInExtensionResolver(builtInExtensions, control))\n\t\t\t\t.then(resolver => ExtensionScanner.scanExtensions(input, log, resolver));\n\n\t\t\tfinalBuiltinExtensions = ExtensionScanner.mergeBuiltinExtensions(builtinExtensions, extraBuiltinExtensions);\n\t\t}\n\n\t\tconst userExtensions = (this._scanExtensionsWithCache(\n\t\t\thostService,\n\t\t\tnotificationService,\n\t\t\tenvironmentService,\n\t\t\tUSER_MANIFEST_CACHE_FILE,\n\t\t\tnew ExtensionScannerInput(version, commit, locale, devMode, environmentService.extensionsPath, false, false, translations),\n\t\t\tlog\n\t\t));\n\n\t\t// Always load developed extensions while extensions development\n\t\tlet developedExtensions: Promise<IExtensionDescription[]> = Promise.resolve([]);\n\t\tif (environmentService.isExtensionDevelopment && environmentService.extensionDevelopmentLocationURI) {\n\t\t\tconst extDescsP = environmentService.extensionDevelopmentLocationURI.filter(extLoc => extLoc.scheme === Schemas.file).map(extLoc => {\n\t\t\t\treturn ExtensionScanner.scanOneOrMultipleExtensions(\n\t\t\t\t\tnew ExtensionScannerInput(version, commit, locale, devMode, originalFSPath(extLoc), false, true, translations), log\n\t\t\t\t);\n\t\t\t});\n\t\t\tdevelopedExtensions = Promise.all(extDescsP).then((extDescArrays: IExtensionDescription[][]) => {\n\t\t\t\tlet extDesc: IExtensionDescription[] = [];\n\t\t\t\tfor (let eds of extDescArrays) {\n\t\t\t\t\textDesc = extDesc.concat(eds);\n\t\t\t\t}\n\t\t\t\treturn extDesc;\n\t\t\t});\n\t\t}\n\n\t\treturn Promise.all([finalBuiltinExtensions, userExtensions, developedExtensions]).then((extensionDescriptions: IExtensionDescription[][]) => {\n\t\t\tconst system = extensionDescriptions[0];\n\t\t\tconst user = extensionDescriptions[1];\n\t\t\tconst development = extensionDescriptions[2];\n\t\t\treturn { system, user, development };\n\t\t}).then(undefined, err => {\n\t\t\tlog.error('', err);\n\t\t\treturn { system: [], user: [], development: [] };\n\t\t});\n\t}\n}\n\ninterface IBuiltInExtension {\n\tname: string;\n\tversion: string;\n\trepo: string;\n}\n\ninterface IBuiltInExtensionControl {\n\t[name: string]: 'marketplace' | 'disabled' | string;\n}\n\nclass ExtraBuiltInExtensionResolver implements IExtensionResolver {\n\n\tconstructor(private builtInExtensions: IBuiltInExtension[], private control: IBuiltInExtensionControl) { }\n\n\tresolveExtensions(): Promise<IExtensionReference[]> {\n\t\tconst result: IExtensionReference[] = [];\n\n\t\tfor (const ext of this.builtInExtensions) {\n\t\t\tconst controlState = this.control[ext.name] || 'marketplace';\n\n\t\t\tswitch (controlState) {\n\t\t\t\tcase 'disabled':\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'marketplace':\n\t\t\t\t\tresult.push({ name: ext.name, path: path.join(getExtraDevSystemExtensionsRoot(), ext.name) });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tresult.push({ name: ext.name, path: controlState });\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn Promise.resolve(result);\n\t}\n}\n\nclass CounterLogger implements ILog {\n\n\tpublic errorCnt = 0;\n\tpublic warnCnt = 0;\n\tpublic infoCnt = 0;\n\n\tconstructor(private readonly _actual: ILog) {\n\t}\n\n\tpublic error(source: string, message: string): void {\n\t\tthis._actual.error(source, message);\n\t}\n\n\tpublic warn(source: string, message: string): void {\n\t\tthis._actual.warn(source, message);\n\t}\n\n\tpublic info(source: string, message: string): void {\n\t\tthis._actual.info(source, message);\n\t}\n}\n\nclass NullLogger implements ILog {\n\tpublic error(source: string, message: string): void {\n\t}\n\tpublic warn(source: string, message: string): void {\n\t}\n\tpublic info(source: string, message: string): void {\n\t}\n}\n"]}