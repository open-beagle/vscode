{"version":3,"file":"extensionHostProfiler.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/extensions/electron-browser/extensionHostProfiler.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Profile, ProfileNode } from 'v8-inspect-profiler';\nimport { TernarySearchTree } from 'vs/base/common/map';\nimport { realpathSync } from 'vs/base/node/extpath';\nimport { IExtensionHostProfile, IExtensionService, ProfileSegmentId, ProfileSession } from 'vs/workbench/services/extensions/common/extensions';\nimport { IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { withNullAsUndefined } from 'vs/base/common/types';\nimport { Schemas } from 'vs/base/common/network';\nimport { URI } from 'vs/base/common/uri';\n\nexport class ExtensionHostProfiler {\n\n\tconstructor(private readonly _port: number, @IExtensionService private readonly _extensionService: IExtensionService) {\n\t}\n\n\tpublic async start(): Promise<ProfileSession> {\n\t\tconst profiler = await import('v8-inspect-profiler');\n\t\tconst session = await profiler.startProfiling({ port: this._port, checkForPaused: true });\n\t\treturn {\n\t\t\tstop: async () => {\n\t\t\t\tconst profile = await session.stop();\n\t\t\t\tconst extensions = await this._extensionService.getExtensions();\n\t\t\t\treturn this.distill((profile as any).profile, extensions);\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate distill(profile: Profile, extensions: IExtensionDescription[]): IExtensionHostProfile {\n\t\tlet searchTree = TernarySearchTree.forUris<IExtensionDescription>();\n\t\tfor (let extension of extensions) {\n\t\t\tif (extension.extensionLocation.scheme === Schemas.file) {\n\t\t\t\tsearchTree.set(URI.file(realpathSync(extension.extensionLocation.fsPath)), extension);\n\t\t\t}\n\t\t}\n\n\t\tlet nodes = profile.nodes;\n\t\tlet idsToNodes = new Map<number, ProfileNode>();\n\t\tlet idsToSegmentId = new Map<number, ProfileSegmentId | null>();\n\t\tfor (let node of nodes) {\n\t\t\tidsToNodes.set(node.id, node);\n\t\t}\n\n\t\tfunction visit(node: ProfileNode, segmentId: ProfileSegmentId | null) {\n\t\t\tif (!segmentId) {\n\t\t\t\tswitch (node.callFrame.functionName) {\n\t\t\t\t\tcase '(root)':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase '(program)':\n\t\t\t\t\t\tsegmentId = 'program';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase '(garbage collector)':\n\t\t\t\t\t\tsegmentId = 'gc';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tsegmentId = 'self';\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else if (segmentId === 'self' && node.callFrame.url) {\n\t\t\t\tlet extension: IExtensionDescription | undefined;\n\t\t\t\ttry {\n\t\t\t\t\textension = searchTree.findSubstr(URI.parse(node.callFrame.url));\n\t\t\t\t} catch {\n\t\t\t\t\t// ignore\n\t\t\t\t}\n\t\t\t\tif (extension) {\n\t\t\t\t\tsegmentId = extension.identifier.value;\n\t\t\t\t}\n\t\t\t}\n\t\t\tidsToSegmentId.set(node.id, segmentId);\n\n\t\t\tif (node.children) {\n\t\t\t\tfor (const child of node.children) {\n\t\t\t\t\tconst childNode = idsToNodes.get(child);\n\t\t\t\t\tif (childNode) {\n\t\t\t\t\t\tvisit(childNode, segmentId);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tvisit(nodes[0], null);\n\n\t\tconst samples = profile.samples || [];\n\t\tlet timeDeltas = profile.timeDeltas || [];\n\t\tlet distilledDeltas: number[] = [];\n\t\tlet distilledIds: ProfileSegmentId[] = [];\n\n\t\tlet currSegmentTime = 0;\n\t\tlet currSegmentId: string | undefined;\n\t\tfor (let i = 0; i < samples.length; i++) {\n\t\t\tlet id = samples[i];\n\t\t\tlet segmentId = idsToSegmentId.get(id);\n\t\t\tif (segmentId !== currSegmentId) {\n\t\t\t\tif (currSegmentId) {\n\t\t\t\t\tdistilledIds.push(currSegmentId);\n\t\t\t\t\tdistilledDeltas.push(currSegmentTime);\n\t\t\t\t}\n\t\t\t\tcurrSegmentId = withNullAsUndefined(segmentId);\n\t\t\t\tcurrSegmentTime = 0;\n\t\t\t}\n\t\t\tcurrSegmentTime += timeDeltas[i];\n\t\t}\n\t\tif (currSegmentId) {\n\t\t\tdistilledIds.push(currSegmentId);\n\t\t\tdistilledDeltas.push(currSegmentTime);\n\t\t}\n\n\t\treturn {\n\t\t\tstartTime: profile.startTime,\n\t\t\tendTime: profile.endTime,\n\t\t\tdeltas: distilledDeltas,\n\t\t\tids: distilledIds,\n\t\t\tdata: profile,\n\t\t\tgetAggregatedTimes: () => {\n\t\t\t\tlet segmentsToTime = new Map<ProfileSegmentId, number>();\n\t\t\t\tfor (let i = 0; i < distilledIds.length; i++) {\n\t\t\t\t\tlet id = distilledIds[i];\n\t\t\t\t\tsegmentsToTime.set(id, (segmentsToTime.get(id) || 0) + distilledDeltas[i]);\n\t\t\t\t}\n\t\t\t\treturn segmentsToTime;\n\t\t\t}\n\t\t};\n\t}\n}\n"]}