{"version":3,"sources":["vs/workbench/services/extensions/browser/extensionUrlHandler.ts"],"names":[],"mappings":"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","file":"extensionUrlHandler.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { IDisposable, toDisposable, combinedDisposable } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { IExtensionGalleryService, IExtensionIdentifier, IExtensionManagementService } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { IWorkbenchExtensionEnablementService, EnablementState } from 'vs/workbench/services/extensionManagement/common/extensionManagement';\nimport { areSameExtensions } from 'vs/platform/extensionManagement/common/extensionManagementUtil';\nimport { createDecorator, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { INotificationService, Severity } from 'vs/platform/notification/common/notification';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { IURLHandler, IURLService, IOpenURLOptions } from 'vs/platform/url/common/url';\nimport { IHostService } from 'vs/workbench/services/host/browser/host';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IWorkbenchContribution, Extensions as WorkbenchExtensions, IWorkbenchContributionsRegistry } from 'vs/workbench/common/contributions';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { Action2, MenuId, registerAction2 } from 'vs/platform/actions/common/actions';\nimport { IQuickInputService, IQuickPickItem } from 'vs/platform/quickinput/common/quickInput';\nimport { IProgressService, ProgressLocation } from 'vs/platform/progress/common/progress';\nimport { IsWebContext } from 'vs/platform/contextkey/common/contextkeys';\nimport { IExtensionUrlTrustService } from 'vs/platform/extensionManagement/common/extensionUrlTrust';\n\nconst FIVE_MINUTES = 5 * 60 * 1000;\nconst THIRTY_SECONDS = 30 * 1000;\nconst URL_TO_HANDLE = 'extensionUrlHandler.urlToHandle';\nconst USER_TRUSTED_EXTENSIONS_CONFIGURATION_KEY = 'extensions.confirmedUriHandlerExtensionIds';\nconst USER_TRUSTED_EXTENSIONS_STORAGE_KEY = 'extensionUrlHandler.confirmedExtensions';\n\nfunction isExtensionId(value: string): boolean {\n\treturn /^[a-z0-9][a-z0-9\\-]*\\.[a-z0-9][a-z0-9\\-]*$/i.test(value);\n}\n\nclass UserTrustedExtensionIdStorage {\n\n\tget extensions(): string[] {\n\t\tconst userTrustedExtensionIdsJson = this.storageService.get(USER_TRUSTED_EXTENSIONS_STORAGE_KEY, StorageScope.GLOBAL, '[]');\n\n\t\ttry {\n\t\t\treturn JSON.parse(userTrustedExtensionIdsJson);\n\t\t} catch {\n\t\t\treturn [];\n\t\t}\n\t}\n\n\tconstructor(private storageService: IStorageService) { }\n\n\thas(id: string): boolean {\n\t\treturn this.extensions.indexOf(id) > -1;\n\t}\n\n\tadd(id: string): void {\n\t\tthis.set([...this.extensions, id]);\n\t}\n\n\tset(ids: string[]): void {\n\t\tthis.storageService.store(USER_TRUSTED_EXTENSIONS_STORAGE_KEY, JSON.stringify(ids), StorageScope.GLOBAL, StorageTarget.MACHINE);\n\t}\n}\n\nexport const IExtensionUrlHandler = createDecorator<IExtensionUrlHandler>('extensionUrlHandler');\n\nexport interface IExtensionUrlHandler {\n\treadonly _serviceBrand: undefined;\n\tregisterExtensionHandler(extensionId: ExtensionIdentifier, handler: IURLHandler): void;\n\tunregisterExtensionHandler(extensionId: ExtensionIdentifier): void;\n}\n\n/**\n * This class handles URLs which are directed towards extensions.\n * If a URL is directed towards an inactive extension, it buffers it,\n * activates the extension and re-opens the URL once the extension registers\n * a URL handler. If the extension never registers a URL handler, the urls\n * will eventually be garbage collected.\n *\n * It also makes sure the user confirms opening URLs directed towards extensions.\n */\nclass ExtensionUrlHandler implements IExtensionUrlHandler, IURLHandler {\n\n\treadonly _serviceBrand: undefined;\n\n\tprivate extensionHandlers = new Map<string, IURLHandler>();\n\tprivate uriBuffer = new Map<string, { timestamp: number, uri: URI }[]>();\n\tprivate userTrustedExtensionsStorage: UserTrustedExtensionIdStorage;\n\tprivate disposable: IDisposable;\n\n\tconstructor(\n\t\t@IURLService urlService: IURLService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IExtensionManagementService private readonly extensionManagementService: IExtensionManagementService,\n\t\t@IWorkbenchExtensionEnablementService private readonly extensionEnablementService: IWorkbenchExtensionEnablementService,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@IExtensionGalleryService private readonly galleryService: IExtensionGalleryService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IProgressService private readonly progressService: IProgressService,\n\t\t@IExtensionUrlTrustService private readonly extensionUrlTrustService: IExtensionUrlTrustService\n\t) {\n\t\tthis.userTrustedExtensionsStorage = new UserTrustedExtensionIdStorage(storageService);\n\n\t\tconst interval = setInterval(() => this.garbageCollect(), THIRTY_SECONDS);\n\t\tconst urlToHandleValue = this.storageService.get(URL_TO_HANDLE, StorageScope.WORKSPACE);\n\t\tif (urlToHandleValue) {\n\t\t\tthis.storageService.remove(URL_TO_HANDLE, StorageScope.WORKSPACE);\n\t\t\tthis.handleURL(URI.revive(JSON.parse(urlToHandleValue)), { trusted: true });\n\t\t}\n\n\t\tthis.disposable = combinedDisposable(\n\t\t\turlService.registerHandler(this),\n\t\t\ttoDisposable(() => clearInterval(interval))\n\t\t);\n\n\t\tconst cache = ExtensionUrlBootstrapHandler.cache;\n\t\tsetTimeout(() => cache.forEach(([uri, option]) => this.handleURL(uri, option)));\n\t}\n\n\tasync handleURL(uri: URI, options?: IOpenURLOptions): Promise<boolean> {\n\t\tif (!isExtensionId(uri.authority)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst extensionId = uri.authority;\n\t\tconst wasHandlerAvailable = this.extensionHandlers.has(ExtensionIdentifier.toKey(extensionId));\n\t\tconst extension = await this.extensionService.getExtension(extensionId);\n\n\t\tif (!extension) {\n\t\t\tawait this.handleUnhandledURL(uri, { id: extensionId });\n\t\t\treturn true;\n\t\t}\n\n\t\tconst trusted = options?.trusted\n\t\t\t|| (options?.originalUrl ? await this.extensionUrlTrustService.isExtensionUrlTrusted(extensionId, options.originalUrl) : false)\n\t\t\t|| this.didUserTrustExtension(ExtensionIdentifier.toKey(extensionId));\n\n\t\tif (!trusted) {\n\t\t\tlet uriString = uri.toString(false);\n\n\t\t\tif (uriString.length > 40) {\n\t\t\t\turiString = `${uriString.substring(0, 30)}...${uriString.substring(uriString.length - 5)}`;\n\t\t\t}\n\n\t\t\tconst result = await this.dialogService.confirm({\n\t\t\t\tmessage: localize('confirmUrl', \"Allow an extension to open this URI?\", extensionId),\n\t\t\t\tcheckbox: {\n\t\t\t\t\tlabel: localize('rememberConfirmUrl', \"Don't ask again for this extension.\"),\n\t\t\t\t},\n\t\t\t\tdetail: `${extension.displayName || extension.name} (${extensionId}) wants to open a URI:\\n\\n${uriString}`,\n\t\t\t\tprimaryButton: localize('open', \"&&Open\"),\n\t\t\t\ttype: 'question'\n\t\t\t});\n\n\t\t\tif (!result.confirmed) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (result.checkboxChecked) {\n\t\t\t\tthis.userTrustedExtensionsStorage.add(ExtensionIdentifier.toKey(extensionId));\n\t\t\t}\n\t\t}\n\n\t\tconst handler = this.extensionHandlers.get(ExtensionIdentifier.toKey(extensionId));\n\n\t\tif (handler) {\n\t\t\tif (!wasHandlerAvailable) {\n\t\t\t\t// forward it directly\n\t\t\t\treturn await handler.handleURL(uri, options);\n\t\t\t}\n\n\t\t\t// let the ExtensionUrlHandler instance handle this\n\t\t\treturn false;\n\t\t}\n\n\t\t// collect URI for eventual extension activation\n\t\tconst timestamp = new Date().getTime();\n\t\tlet uris = this.uriBuffer.get(ExtensionIdentifier.toKey(extensionId));\n\n\t\tif (!uris) {\n\t\t\turis = [];\n\t\t\tthis.uriBuffer.set(ExtensionIdentifier.toKey(extensionId), uris);\n\t\t}\n\n\t\turis.push({ timestamp, uri });\n\n\t\t// activate the extension\n\t\tawait this.extensionService.activateByEvent(`onUri:${ExtensionIdentifier.toKey(extensionId)}`);\n\t\treturn true;\n\t}\n\n\tregisterExtensionHandler(extensionId: ExtensionIdentifier, handler: IURLHandler): void {\n\t\tthis.extensionHandlers.set(ExtensionIdentifier.toKey(extensionId), handler);\n\n\t\tconst uris = this.uriBuffer.get(ExtensionIdentifier.toKey(extensionId)) || [];\n\n\t\tfor (const { uri } of uris) {\n\t\t\thandler.handleURL(uri);\n\t\t}\n\n\t\tthis.uriBuffer.delete(ExtensionIdentifier.toKey(extensionId));\n\t}\n\n\tunregisterExtensionHandler(extensionId: ExtensionIdentifier): void {\n\t\tthis.extensionHandlers.delete(ExtensionIdentifier.toKey(extensionId));\n\t}\n\n\tprivate async handleUnhandledURL(uri: URI, extensionIdentifier: IExtensionIdentifier): Promise<void> {\n\t\tconst installedExtensions = await this.extensionManagementService.getInstalled();\n\t\tconst extension = installedExtensions.filter(e => areSameExtensions(e.identifier, extensionIdentifier))[0];\n\n\t\t// Extension is installed\n\t\tif (extension) {\n\t\t\tconst enabled = this.extensionEnablementService.isEnabled(extension);\n\n\t\t\t// Extension is not running. Reload the window to handle.\n\t\t\tif (enabled) {\n\t\t\t\tconst result = await this.dialogService.confirm({\n\t\t\t\t\tmessage: localize('reloadAndHandle', \"Extension '{0}' is not loaded. Would you like to reload the window to load the extension and open the URL?\", extension.manifest.displayName || extension.manifest.name),\n\t\t\t\t\tdetail: `${extension.manifest.displayName || extension.manifest.name} (${extensionIdentifier.id}) wants to open a URL:\\n\\n${uri.toString()}`,\n\t\t\t\t\tprimaryButton: localize('reloadAndOpen', \"&&Reload Window and Open\"),\n\t\t\t\t\ttype: 'question'\n\t\t\t\t});\n\n\t\t\t\tif (!result.confirmed) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tawait this.reloadAndHandle(uri);\n\t\t\t}\n\n\t\t\t// Extension is disabled. Enable the extension and reload the window to handle.\n\t\t\telse {\n\t\t\t\tconst result = await this.dialogService.confirm({\n\t\t\t\t\tmessage: localize('enableAndHandle', \"Extension '{0}' is disabled. Would you like to enable the extension and reload the window to open the URL?\", extension.manifest.displayName || extension.manifest.name),\n\t\t\t\t\tdetail: `${extension.manifest.displayName || extension.manifest.name} (${extensionIdentifier.id}) wants to open a URL:\\n\\n${uri.toString()}`,\n\t\t\t\t\tprimaryButton: localize('enableAndReload', \"&&Enable and Open\"),\n\t\t\t\t\ttype: 'question'\n\t\t\t\t});\n\n\t\t\t\tif (!result.confirmed) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tawait this.extensionEnablementService.setEnablement([extension], EnablementState.EnabledGlobally);\n\t\t\t\tawait this.reloadAndHandle(uri);\n\t\t\t}\n\t\t}\n\n\t\t// Extension is not installed\n\t\telse {\n\t\t\tconst galleryExtension = await this.galleryService.getCompatibleExtension(extensionIdentifier);\n\n\t\t\tif (!galleryExtension) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Install the Extension and reload the window to handle.\n\t\t\tconst result = await this.dialogService.confirm({\n\t\t\t\tmessage: localize('installAndHandle', \"Extension '{0}' is not installed. Would you like to install the extension and reload the window to open this URL?\", galleryExtension.displayName || galleryExtension.name),\n\t\t\t\tdetail: `${galleryExtension.displayName || galleryExtension.name} (${extensionIdentifier.id}) wants to open a URL:\\n\\n${uri.toString()}`,\n\t\t\t\tprimaryButton: localize('install', \"&&Install\"),\n\t\t\t\ttype: 'question'\n\t\t\t});\n\n\t\t\tif (!result.confirmed) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tawait this.progressService.withProgress({\n\t\t\t\t\tlocation: ProgressLocation.Notification,\n\t\t\t\t\ttitle: localize('Installing', \"Installing Extension '{0}'...\", galleryExtension.displayName || galleryExtension.name)\n\t\t\t\t}, () => this.extensionManagementService.installFromGallery(galleryExtension));\n\n\t\t\t\tthis.notificationService.prompt(\n\t\t\t\t\tSeverity.Info,\n\t\t\t\t\tlocalize('reload', \"Would you like to reload the window and open the URL '{0}'?\", uri.toString()),\n\t\t\t\t\t[{ label: localize('Reload', \"Reload Window and Open\"), run: () => this.reloadAndHandle(uri) }],\n\t\t\t\t\t{ sticky: true }\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\tthis.notificationService.error(error);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async reloadAndHandle(url: URI): Promise<void> {\n\t\tthis.storageService.store(URL_TO_HANDLE, JSON.stringify(url.toJSON()), StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\tawait this.hostService.reload();\n\t}\n\n\t// forget about all uris buffered more than 5 minutes ago\n\tprivate garbageCollect(): void {\n\t\tconst now = new Date().getTime();\n\t\tconst uriBuffer = new Map<string, { timestamp: number, uri: URI }[]>();\n\n\t\tthis.uriBuffer.forEach((uris, extensionId) => {\n\t\t\turis = uris.filter(({ timestamp }) => now - timestamp < FIVE_MINUTES);\n\n\t\t\tif (uris.length > 0) {\n\t\t\t\turiBuffer.set(extensionId, uris);\n\t\t\t}\n\t\t});\n\n\t\tthis.uriBuffer = uriBuffer;\n\t}\n\n\tprivate didUserTrustExtension(id: string): boolean {\n\t\tif (this.userTrustedExtensionsStorage.has(id)) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn this.getConfirmedTrustedExtensionIdsFromConfiguration().indexOf(id) > -1;\n\t}\n\n\tprivate getConfirmedTrustedExtensionIdsFromConfiguration(): Array<string> {\n\t\tconst trustedExtensionIds = this.configurationService.getValue<Array<string>>(USER_TRUSTED_EXTENSIONS_CONFIGURATION_KEY);\n\n\t\tif (!Array.isArray(trustedExtensionIds)) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn trustedExtensionIds;\n\t}\n\n\tdispose(): void {\n\t\tthis.disposable.dispose();\n\t\tthis.extensionHandlers.clear();\n\t\tthis.uriBuffer.clear();\n\t}\n}\n\nregisterSingleton(IExtensionUrlHandler, ExtensionUrlHandler);\n\n/**\n * This class handles URLs before `ExtensionUrlHandler` is instantiated.\n * More info: https://github.com/microsoft/vscode/issues/73101\n */\nclass ExtensionUrlBootstrapHandler implements IWorkbenchContribution, IURLHandler {\n\n\tprivate static _cache: [URI, IOpenURLOptions | undefined][] = [];\n\tprivate static disposable: IDisposable;\n\n\tstatic get cache(): [URI, IOpenURLOptions | undefined][] {\n\t\tExtensionUrlBootstrapHandler.disposable.dispose();\n\n\t\tconst result = ExtensionUrlBootstrapHandler._cache;\n\t\tExtensionUrlBootstrapHandler._cache = [];\n\t\treturn result;\n\t}\n\n\tconstructor(@IURLService urlService: IURLService) {\n\t\tExtensionUrlBootstrapHandler.disposable = urlService.registerHandler(this);\n\t}\n\n\tasync handleURL(uri: URI, options?: IOpenURLOptions): Promise<boolean> {\n\t\tif (!isExtensionId(uri.authority)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tExtensionUrlBootstrapHandler._cache.push([uri, options]);\n\t\treturn true;\n\t}\n}\n\nconst workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench);\nworkbenchRegistry.registerWorkbenchContribution(ExtensionUrlBootstrapHandler, LifecyclePhase.Ready);\n\nclass ManageAuthorizedExtensionURIsAction extends Action2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.extensions.action.manageAuthorizedExtensionURIs',\n\t\t\ttitle: { value: localize('manage', \"Manage Authorized Extension URIs...\"), original: 'Manage Authorized Extension URIs...' },\n\t\t\tcategory: { value: localize('extensions', \"Extensions\"), original: 'Extensions' },\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\twhen: IsWebContext.toNegated()\n\t\t\t}\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst storageService = accessor.get(IStorageService);\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\tconst storage = new UserTrustedExtensionIdStorage(storageService);\n\t\tconst items = storage.extensions.map(label => ({ label, picked: true } as IQuickPickItem));\n\n\t\tif (items.length === 0) {\n\t\t\tawait quickInputService.pick([{ label: localize('no', 'There are currently no authorized extension URIs.') }]);\n\t\t\treturn;\n\t\t}\n\n\t\tconst result = await quickInputService.pick(items, { canPickMany: true });\n\n\t\tif (!result) {\n\t\t\treturn;\n\t\t}\n\n\t\tstorage.set(result.map(item => item.label));\n\t}\n}\n\nregisterAction2(ManageAuthorizedExtensionURIsAction);\n"]}