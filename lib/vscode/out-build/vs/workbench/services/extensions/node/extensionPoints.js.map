{"version":3,"sources":["vs/workbench/services/extensions/node/extensionPoints.ts"],"names":[],"mappings":"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","file":"extensionPoints.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as fs from 'fs';\nimport * as nls from 'vs/nls';\nimport * as path from 'vs/base/common/path';\nimport * as semver from 'vs/base/common/semver/semver';\nimport * as json from 'vs/base/common/json';\nimport * as arrays from 'vs/base/common/arrays';\nimport { getParseErrorMessage } from 'vs/base/common/jsonErrorMessages';\nimport * as types from 'vs/base/common/types';\nimport { URI } from 'vs/base/common/uri';\nimport * as pfs from 'vs/base/node/pfs';\nimport { getGalleryExtensionId, groupByExtension, ExtensionIdentifierWithVersion, getExtensionId } from 'vs/platform/extensionManagement/common/extensionManagementUtil';\nimport { isValidExtensionVersion } from 'vs/platform/extensions/common/extensionValidator';\nimport { ExtensionIdentifier, IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { Translations, ILog } from 'vs/workbench/services/extensions/common/extensionPoints';\n\nconst MANIFEST_FILE = 'package.json';\n\nexport interface NlsConfiguration {\n\treadonly devMode: boolean;\n\treadonly locale: string | undefined;\n\treadonly pseudo: boolean;\n\treadonly translations: Translations;\n}\n\nabstract class ExtensionManifestHandler {\n\n\tprotected readonly _ourVersion: string;\n\tprotected readonly _log: ILog;\n\tprotected readonly _absoluteFolderPath: string;\n\tprotected readonly _isBuiltin: boolean;\n\tprotected readonly _isUnderDevelopment: boolean;\n\tprotected readonly _absoluteManifestPath: string;\n\n\tconstructor(ourVersion: string, log: ILog, absoluteFolderPath: string, isBuiltin: boolean, isUnderDevelopment: boolean) {\n\t\tthis._ourVersion = ourVersion;\n\t\tthis._log = log;\n\t\tthis._absoluteFolderPath = absoluteFolderPath;\n\t\tthis._isBuiltin = isBuiltin;\n\t\tthis._isUnderDevelopment = isUnderDevelopment;\n\t\tthis._absoluteManifestPath = path.join(absoluteFolderPath, MANIFEST_FILE);\n\t}\n}\n\nclass ExtensionManifestParser extends ExtensionManifestHandler {\n\n\tprivate static _fastParseJSON(text: string, errors: json.ParseError[]): any {\n\t\ttry {\n\t\t\treturn JSON.parse(text);\n\t\t} catch (err) {\n\t\t\t// invalid JSON, let's get good errors\n\t\t\treturn json.parse(text, errors);\n\t\t}\n\t}\n\n\tpublic parse(): Promise<IExtensionDescription> {\n\t\treturn fs.promises.readFile(this._absoluteManifestPath).then((manifestContents) => {\n\t\t\tconst errors: json.ParseError[] = [];\n\t\t\tconst manifest = ExtensionManifestParser._fastParseJSON(manifestContents.toString(), errors);\n\t\t\tif (json.getNodeType(manifest) !== 'object') {\n\t\t\t\tthis._log.error(this._absoluteFolderPath, nls.localize('jsonParseInvalidType', \"Invalid manifest file {0}: Not an JSON object.\", this._absoluteManifestPath));\n\t\t\t} else if (errors.length === 0) {\n\t\t\t\tif (manifest.__metadata) {\n\t\t\t\t\tmanifest.uuid = manifest.__metadata.id;\n\t\t\t\t}\n\t\t\t\tmanifest.isUserBuiltin = !!manifest.__metadata?.isBuiltin;\n\t\t\t\tdelete manifest.__metadata;\n\t\t\t\treturn manifest;\n\t\t\t} else {\n\t\t\t\terrors.forEach(e => {\n\t\t\t\t\tthis._log.error(this._absoluteFolderPath, nls.localize('jsonParseFail', \"Failed to parse {0}: [{1}, {2}] {3}.\", this._absoluteManifestPath, e.offset, e.length, getParseErrorMessage(e.error)));\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn null;\n\t\t}, (err) => {\n\t\t\tif (err.code === 'ENOENT') {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tthis._log.error(this._absoluteFolderPath, nls.localize('fileReadFail', \"Cannot read file {0}: {1}.\", this._absoluteManifestPath, err.message));\n\t\t\treturn null;\n\t\t});\n\t}\n}\n\nclass ExtensionManifestNLSReplacer extends ExtensionManifestHandler {\n\n\tprivate readonly _nlsConfig: NlsConfiguration;\n\n\tconstructor(ourVersion: string, log: ILog, absoluteFolderPath: string, isBuiltin: boolean, isUnderDevelopment: boolean, nlsConfig: NlsConfiguration) {\n\t\tsuper(ourVersion, log, absoluteFolderPath, isBuiltin, isUnderDevelopment);\n\t\tthis._nlsConfig = nlsConfig;\n\t}\n\n\tpublic replaceNLS(extensionDescription: IExtensionDescription): Promise<IExtensionDescription> {\n\t\tinterface MessageBag {\n\t\t\t[key: string]: string;\n\t\t}\n\n\t\tinterface TranslationBundle {\n\t\t\tcontents: {\n\t\t\t\tpackage: MessageBag;\n\t\t\t};\n\t\t}\n\n\t\tinterface LocalizedMessages {\n\t\t\tvalues: MessageBag | undefined;\n\t\t\tdefault: string | null;\n\t\t}\n\n\t\tconst reportErrors = (localized: string | null, errors: json.ParseError[]): void => {\n\t\t\terrors.forEach((error) => {\n\t\t\t\tthis._log.error(this._absoluteFolderPath, nls.localize('jsonsParseReportErrors', \"Failed to parse {0}: {1}.\", localized, getParseErrorMessage(error.error)));\n\t\t\t});\n\t\t};\n\t\tconst reportInvalidFormat = (localized: string | null): void => {\n\t\t\tthis._log.error(this._absoluteFolderPath, nls.localize('jsonInvalidFormat', \"Invalid format {0}: JSON object expected.\", localized));\n\t\t};\n\n\t\tlet extension = path.extname(this._absoluteManifestPath);\n\t\tlet basename = this._absoluteManifestPath.substr(0, this._absoluteManifestPath.length - extension.length);\n\n\t\tconst translationId = `${extensionDescription.publisher}.${extensionDescription.name}`;\n\t\tlet translationPath = this._nlsConfig.translations[translationId];\n\t\tlet localizedMessages: Promise<LocalizedMessages | undefined>;\n\t\tif (translationPath) {\n\t\t\tlocalizedMessages = fs.promises.readFile(translationPath, 'utf8').then<LocalizedMessages, LocalizedMessages>((content) => {\n\t\t\t\tlet errors: json.ParseError[] = [];\n\t\t\t\tlet translationBundle: TranslationBundle = json.parse(content, errors);\n\t\t\t\tif (errors.length > 0) {\n\t\t\t\t\treportErrors(translationPath, errors);\n\t\t\t\t\treturn { values: undefined, default: `${basename}.nls.json` };\n\t\t\t\t} else if (json.getNodeType(translationBundle) !== 'object') {\n\t\t\t\t\treportInvalidFormat(translationPath);\n\t\t\t\t\treturn { values: undefined, default: `${basename}.nls.json` };\n\t\t\t\t} else {\n\t\t\t\t\tlet values = translationBundle.contents ? translationBundle.contents.package : undefined;\n\t\t\t\t\treturn { values: values, default: `${basename}.nls.json` };\n\t\t\t\t}\n\t\t\t}, (error) => {\n\t\t\t\treturn { values: undefined, default: `${basename}.nls.json` };\n\t\t\t});\n\t\t} else {\n\t\t\tlocalizedMessages = pfs.SymlinkSupport.existsFile(basename + '.nls' + extension).then<LocalizedMessages | undefined, LocalizedMessages | undefined>(exists => {\n\t\t\t\tif (!exists) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\treturn ExtensionManifestNLSReplacer.findMessageBundles(this._nlsConfig, basename).then((messageBundle) => {\n\t\t\t\t\tif (!messageBundle.localized) {\n\t\t\t\t\t\treturn { values: undefined, default: messageBundle.original };\n\t\t\t\t\t}\n\t\t\t\t\treturn fs.promises.readFile(messageBundle.localized, 'utf8').then(messageBundleContent => {\n\t\t\t\t\t\tlet errors: json.ParseError[] = [];\n\t\t\t\t\t\tlet messages: MessageBag = json.parse(messageBundleContent, errors);\n\t\t\t\t\t\tif (errors.length > 0) {\n\t\t\t\t\t\t\treportErrors(messageBundle.localized, errors);\n\t\t\t\t\t\t\treturn { values: undefined, default: messageBundle.original };\n\t\t\t\t\t\t} else if (json.getNodeType(messages) !== 'object') {\n\t\t\t\t\t\t\treportInvalidFormat(messageBundle.localized);\n\t\t\t\t\t\t\treturn { values: undefined, default: messageBundle.original };\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn { values: messages, default: messageBundle.original };\n\t\t\t\t\t}, (err) => {\n\t\t\t\t\t\treturn { values: undefined, default: messageBundle.original };\n\t\t\t\t\t});\n\t\t\t\t}, (err) => {\n\t\t\t\t\treturn undefined;\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\treturn localizedMessages.then((localizedMessages) => {\n\t\t\tif (localizedMessages === undefined) {\n\t\t\t\treturn extensionDescription;\n\t\t\t}\n\t\t\tlet errors: json.ParseError[] = [];\n\t\t\t// resolveOriginalMessageBundle returns null if localizedMessages.default === undefined;\n\t\t\treturn ExtensionManifestNLSReplacer.resolveOriginalMessageBundle(localizedMessages.default, errors).then((defaults) => {\n\t\t\t\tif (errors.length > 0) {\n\t\t\t\t\treportErrors(localizedMessages.default, errors);\n\t\t\t\t\treturn extensionDescription;\n\t\t\t\t} else if (json.getNodeType(localizedMessages) !== 'object') {\n\t\t\t\t\treportInvalidFormat(localizedMessages.default);\n\t\t\t\t\treturn extensionDescription;\n\t\t\t\t}\n\t\t\t\tconst localized = localizedMessages.values || Object.create(null);\n\t\t\t\tExtensionManifestNLSReplacer._replaceNLStrings(this._nlsConfig, extensionDescription, localized, defaults, this._log, this._absoluteFolderPath);\n\t\t\t\treturn extensionDescription;\n\t\t\t});\n\t\t}, (err) => {\n\t\t\treturn extensionDescription;\n\t\t});\n\t}\n\n\t/**\n\t * Parses original message bundle, returns null if the original message bundle is null.\n\t */\n\tprivate static resolveOriginalMessageBundle(originalMessageBundle: string | null, errors: json.ParseError[]) {\n\t\treturn new Promise<{ [key: string]: string; } | null>((c, e) => {\n\t\t\tif (originalMessageBundle) {\n\t\t\t\tfs.promises.readFile(originalMessageBundle).then(originalBundleContent => {\n\t\t\t\t\tc(json.parse(originalBundleContent.toString(), errors));\n\t\t\t\t}, (err) => {\n\t\t\t\t\tc(null);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tc(null);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Finds localized message bundle and the original (unlocalized) one.\n\t * If the localized file is not present, returns null for the original and marks original as localized.\n\t */\n\tprivate static findMessageBundles(nlsConfig: NlsConfiguration, basename: string): Promise<{ localized: string; original: string | null; }> {\n\t\treturn new Promise<{ localized: string; original: string | null; }>((c, e) => {\n\t\t\tfunction loop(basename: string, locale: string): void {\n\t\t\t\tlet toCheck = `${basename}.nls.${locale}.json`;\n\t\t\t\tpfs.SymlinkSupport.existsFile(toCheck).then(exists => {\n\t\t\t\t\tif (exists) {\n\t\t\t\t\t\tc({ localized: toCheck, original: `${basename}.nls.json` });\n\t\t\t\t\t}\n\t\t\t\t\tlet index = locale.lastIndexOf('-');\n\t\t\t\t\tif (index === -1) {\n\t\t\t\t\t\tc({ localized: `${basename}.nls.json`, original: null });\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlocale = locale.substring(0, index);\n\t\t\t\t\t\tloop(basename, locale);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (nlsConfig.devMode || nlsConfig.pseudo || !nlsConfig.locale) {\n\t\t\t\treturn c({ localized: basename + '.nls.json', original: null });\n\t\t\t}\n\t\t\tloop(basename, nlsConfig.locale);\n\t\t});\n\t}\n\n\t/**\n\t * This routine makes the following assumptions:\n\t * The root element is an object literal\n\t */\n\tprivate static _replaceNLStrings<T extends object>(nlsConfig: NlsConfiguration, literal: T, messages: { [key: string]: string; }, originalMessages: { [key: string]: string } | null, log: ILog, messageScope: string): void {\n\t\tfunction processEntry(obj: any, key: string | number, command?: boolean) {\n\t\t\tlet value = obj[key];\n\t\t\tif (types.isString(value)) {\n\t\t\t\tlet str = <string>value;\n\t\t\t\tlet length = str.length;\n\t\t\t\tif (length > 1 && str[0] === '%' && str[length - 1] === '%') {\n\t\t\t\t\tlet messageKey = str.substr(1, length - 2);\n\t\t\t\t\tlet message = messages[messageKey];\n\t\t\t\t\t// If the messages come from a language pack they might miss some keys\n\t\t\t\t\t// Fill them from the original messages.\n\t\t\t\t\tif (message === undefined && originalMessages) {\n\t\t\t\t\t\tmessage = originalMessages[messageKey];\n\t\t\t\t\t}\n\t\t\t\t\tif (message) {\n\t\t\t\t\t\tif (nlsConfig.pseudo) {\n\t\t\t\t\t\t\t// FF3B and FF3D is the Unicode zenkaku representation for [ and ]\n\t\t\t\t\t\t\tmessage = '\\uFF3B' + message.replace(/[aouei]/g, '$&$&') + '\\uFF3D';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tobj[key] = command && (key === 'title' || key === 'category') && originalMessages ? { value: message, original: originalMessages[messageKey] } : message;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlog.warn(messageScope, nls.localize('missingNLSKey', \"Couldn't find message for key {0}.\", messageKey));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (types.isObject(value)) {\n\t\t\t\tfor (let k in value) {\n\t\t\t\t\tif (value.hasOwnProperty(k)) {\n\t\t\t\t\t\tk === 'commands' ? processEntry(value, k, true) : processEntry(value, k, command);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (types.isArray(value)) {\n\t\t\t\tfor (let i = 0; i < value.length; i++) {\n\t\t\t\t\tprocessEntry(value, i, command);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (let key in literal) {\n\t\t\tif (literal.hasOwnProperty(key)) {\n\t\t\t\tprocessEntry(literal, key);\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Relax the readonly properties here, it is the one place where we check and normalize values\nexport interface IRelaxedExtensionDescription {\n\tid: string;\n\tuuid?: string;\n\tidentifier: ExtensionIdentifier;\n\tname: string;\n\tversion: string;\n\tpublisher: string;\n\tisBuiltin: boolean;\n\tisUserBuiltin: boolean;\n\tisUnderDevelopment: boolean;\n\textensionLocation: URI;\n\tengines: {\n\t\tvscode: string;\n\t};\n\tmain?: string;\n\tenableProposedApi?: boolean;\n}\n\nclass ExtensionManifestValidator extends ExtensionManifestHandler {\n\tvalidate(_extensionDescription: IExtensionDescription): IExtensionDescription | null {\n\t\tlet extensionDescription = <IRelaxedExtensionDescription>_extensionDescription;\n\t\textensionDescription.isBuiltin = this._isBuiltin;\n\t\textensionDescription.isUserBuiltin = !this._isBuiltin && !!extensionDescription.isUserBuiltin;\n\t\textensionDescription.isUnderDevelopment = this._isUnderDevelopment;\n\n\t\tlet notices: string[] = [];\n\t\tif (!ExtensionManifestValidator.isValidExtensionDescription(this._ourVersion, this._absoluteFolderPath, extensionDescription, notices)) {\n\t\t\tnotices.forEach((error) => {\n\t\t\t\tthis._log.error(this._absoluteFolderPath, error);\n\t\t\t});\n\t\t\treturn null;\n\t\t}\n\n\t\t// in this case the notices are warnings\n\t\tnotices.forEach((error) => {\n\t\t\tthis._log.warn(this._absoluteFolderPath, error);\n\t\t});\n\n\t\t// allow publisher to be undefined to make the initial extension authoring experience smoother\n\t\tif (!extensionDescription.publisher) {\n\t\t\textensionDescription.publisher = 'undefined_publisher';\n\t\t}\n\n\t\t// id := `publisher.name`\n\t\textensionDescription.id = getExtensionId(extensionDescription.publisher, extensionDescription.name);\n\t\textensionDescription.identifier = new ExtensionIdentifier(extensionDescription.id);\n\n\t\textensionDescription.extensionLocation = URI.file(this._absoluteFolderPath);\n\n\t\treturn extensionDescription;\n\t}\n\n\tprivate static isValidExtensionDescription(version: string, extensionFolderPath: string, extensionDescription: IExtensionDescription, notices: string[]): boolean {\n\n\t\tif (!ExtensionManifestValidator.baseIsValidExtensionDescription(extensionFolderPath, extensionDescription, notices)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!semver.valid(extensionDescription.version)) {\n\t\t\tnotices.push(nls.localize('notSemver', \"Extension version is not semver compatible.\"));\n\t\t\treturn false;\n\t\t}\n\n\t\treturn isValidExtensionVersion(version, extensionDescription, notices);\n\t}\n\n\tprivate static baseIsValidExtensionDescription(extensionFolderPath: string, extensionDescription: IExtensionDescription, notices: string[]): boolean {\n\t\tif (!extensionDescription) {\n\t\t\tnotices.push(nls.localize('extensionDescription.empty', \"Got empty extension description\"));\n\t\t\treturn false;\n\t\t}\n\t\tif (typeof extensionDescription.publisher !== 'undefined' && typeof extensionDescription.publisher !== 'string') {\n\t\t\tnotices.push(nls.localize('extensionDescription.publisher', \"property publisher must be of type `string`.\"));\n\t\t\treturn false;\n\t\t}\n\t\tif (typeof extensionDescription.name !== 'string') {\n\t\t\tnotices.push(nls.localize('extensionDescription.name', \"property `{0}` is mandatory and must be of type `string`\", 'name'));\n\t\t\treturn false;\n\t\t}\n\t\tif (typeof extensionDescription.version !== 'string') {\n\t\t\tnotices.push(nls.localize('extensionDescription.version', \"property `{0}` is mandatory and must be of type `string`\", 'version'));\n\t\t\treturn false;\n\t\t}\n\t\tif (!extensionDescription.engines) {\n\t\t\tnotices.push(nls.localize('extensionDescription.engines', \"property `{0}` is mandatory and must be of type `object`\", 'engines'));\n\t\t\treturn false;\n\t\t}\n\t\tif (typeof extensionDescription.engines.vscode !== 'string') {\n\t\t\tnotices.push(nls.localize('extensionDescription.engines.vscode', \"property `{0}` is mandatory and must be of type `string`\", 'engines.vscode'));\n\t\t\treturn false;\n\t\t}\n\t\tif (typeof extensionDescription.extensionDependencies !== 'undefined') {\n\t\t\tif (!ExtensionManifestValidator._isStringArray(extensionDescription.extensionDependencies)) {\n\t\t\t\tnotices.push(nls.localize('extensionDescription.extensionDependencies', \"property `{0}` can be omitted or must be of type `string[]`\", 'extensionDependencies'));\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tif (typeof extensionDescription.activationEvents !== 'undefined') {\n\t\t\tif (!ExtensionManifestValidator._isStringArray(extensionDescription.activationEvents)) {\n\t\t\t\tnotices.push(nls.localize('extensionDescription.activationEvents1', \"property `{0}` can be omitted or must be of type `string[]`\", 'activationEvents'));\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (typeof extensionDescription.main === 'undefined' && typeof extensionDescription.browser === 'undefined') {\n\t\t\t\tnotices.push(nls.localize('extensionDescription.activationEvents2', \"properties `{0}` and `{1}` must both be specified or must both be omitted\", 'activationEvents', 'main'));\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tif (typeof extensionDescription.main !== 'undefined') {\n\t\t\tif (typeof extensionDescription.main !== 'string') {\n\t\t\t\tnotices.push(nls.localize('extensionDescription.main1', \"property `{0}` can be omitted or must be of type `string`\", 'main'));\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tconst normalizedAbsolutePath = path.join(extensionFolderPath, extensionDescription.main);\n\t\t\t\tif (!normalizedAbsolutePath.startsWith(extensionFolderPath)) {\n\t\t\t\t\tnotices.push(nls.localize('extensionDescription.main2', \"Expected `main` ({0}) to be included inside extension's folder ({1}). This might make the extension non-portable.\", normalizedAbsolutePath, extensionFolderPath));\n\t\t\t\t\t// not a failure case\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (typeof extensionDescription.activationEvents === 'undefined') {\n\t\t\t\tnotices.push(nls.localize('extensionDescription.main3', \"properties `{0}` and `{1}` must both be specified or must both be omitted\", 'activationEvents', 'main'));\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tif (typeof extensionDescription.browser !== 'undefined') {\n\t\t\tif (typeof extensionDescription.browser !== 'string') {\n\t\t\t\tnotices.push(nls.localize('extensionDescription.browser1', \"property `{0}` can be omitted or must be of type `string`\", 'browser'));\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tconst normalizedAbsolutePath = path.join(extensionFolderPath, extensionDescription.browser);\n\t\t\t\tif (!normalizedAbsolutePath.startsWith(extensionFolderPath)) {\n\t\t\t\t\tnotices.push(nls.localize('extensionDescription.browser2', \"Expected `browser` ({0}) to be included inside extension's folder ({1}). This might make the extension non-portable.\", normalizedAbsolutePath, extensionFolderPath));\n\t\t\t\t\t// not a failure case\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (typeof extensionDescription.activationEvents === 'undefined') {\n\t\t\t\tnotices.push(nls.localize('extensionDescription.browser3', \"properties `{0}` and `{1}` must both be specified or must both be omitted\", 'activationEvents', 'browser'));\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate static _isStringArray(arr: string[]): boolean {\n\t\tif (!Array.isArray(arr)) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let i = 0, len = arr.length; i < len; i++) {\n\t\t\tif (typeof arr[i] !== 'string') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n\nexport class ExtensionScannerInput {\n\n\tpublic mtime: number | undefined;\n\n\tconstructor(\n\t\tpublic readonly ourVersion: string,\n\t\tpublic readonly commit: string | undefined,\n\t\tpublic readonly locale: string | undefined,\n\t\tpublic readonly devMode: boolean,\n\t\tpublic readonly absoluteFolderPath: string,\n\t\tpublic readonly isBuiltin: boolean,\n\t\tpublic readonly isUnderDevelopment: boolean,\n\t\tpublic readonly translations: Translations\n\t) {\n\t\t// Keep empty!! (JSON.parse)\n\t}\n\n\tpublic static createNLSConfig(input: ExtensionScannerInput): NlsConfiguration {\n\t\treturn {\n\t\t\tdevMode: input.devMode,\n\t\t\tlocale: input.locale,\n\t\t\tpseudo: input.locale === 'pseudo',\n\t\t\ttranslations: input.translations\n\t\t};\n\t}\n\n\tpublic static equals(a: ExtensionScannerInput, b: ExtensionScannerInput): boolean {\n\t\treturn (\n\t\t\ta.ourVersion === b.ourVersion\n\t\t\t&& a.commit === b.commit\n\t\t\t&& a.locale === b.locale\n\t\t\t&& a.devMode === b.devMode\n\t\t\t&& a.absoluteFolderPath === b.absoluteFolderPath\n\t\t\t&& a.isBuiltin === b.isBuiltin\n\t\t\t&& a.isUnderDevelopment === b.isUnderDevelopment\n\t\t\t&& a.mtime === b.mtime\n\t\t\t&& Translations.equals(a.translations, b.translations)\n\t\t);\n\t}\n}\n\nexport interface IExtensionReference {\n\tname: string;\n\tpath: string;\n}\n\nexport interface IExtensionResolver {\n\tresolveExtensions(): Promise<IExtensionReference[]>;\n}\n\nclass DefaultExtensionResolver implements IExtensionResolver {\n\n\tconstructor(private root: string) { }\n\n\tresolveExtensions(): Promise<IExtensionReference[]> {\n\t\treturn pfs.readDirsInDir(this.root)\n\t\t\t.then(folders => folders.map(name => ({ name, path: path.join(this.root, name) })));\n\t}\n}\n\nexport class ExtensionScanner {\n\n\t/**\n\t * Read the extension defined in `absoluteFolderPath`\n\t */\n\tprivate static scanExtension(version: string, log: ILog, absoluteFolderPath: string, isBuiltin: boolean, isUnderDevelopment: boolean, nlsConfig: NlsConfiguration): Promise<IExtensionDescription | null> {\n\t\tabsoluteFolderPath = path.normalize(absoluteFolderPath);\n\n\t\tlet parser = new ExtensionManifestParser(version, log, absoluteFolderPath, isBuiltin, isUnderDevelopment);\n\t\treturn parser.parse().then<IExtensionDescription | null>((extensionDescription) => {\n\t\t\tif (extensionDescription === null) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tlet nlsReplacer = new ExtensionManifestNLSReplacer(version, log, absoluteFolderPath, isBuiltin, isUnderDevelopment, nlsConfig);\n\t\t\treturn nlsReplacer.replaceNLS(extensionDescription);\n\t\t}).then((extensionDescription) => {\n\t\t\tif (extensionDescription === null) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tlet validator = new ExtensionManifestValidator(version, log, absoluteFolderPath, isBuiltin, isUnderDevelopment);\n\t\t\treturn validator.validate(extensionDescription);\n\t\t});\n\t}\n\n\t/**\n\t * Scan a list of extensions defined in `absoluteFolderPath`\n\t */\n\tpublic static async scanExtensions(input: ExtensionScannerInput, log: ILog, resolver: IExtensionResolver | null = null): Promise<IExtensionDescription[]> {\n\t\tconst absoluteFolderPath = input.absoluteFolderPath;\n\t\tconst isBuiltin = input.isBuiltin;\n\t\tconst isUnderDevelopment = input.isUnderDevelopment;\n\n\t\tif (!resolver) {\n\t\t\tresolver = new DefaultExtensionResolver(absoluteFolderPath);\n\t\t}\n\n\t\ttry {\n\t\t\tlet obsolete: { [folderName: string]: boolean; } = {};\n\t\t\tif (!isBuiltin) {\n\t\t\t\ttry {\n\t\t\t\t\tconst obsoleteFileContents = await fs.promises.readFile(path.join(absoluteFolderPath, '.obsolete'), 'utf8');\n\t\t\t\t\tobsolete = JSON.parse(obsoleteFileContents);\n\t\t\t\t} catch (err) {\n\t\t\t\t\t// Don't care\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet refs = await resolver.resolveExtensions();\n\n\t\t\t// Ensure the same extension order\n\t\t\trefs.sort((a, b) => a.name < b.name ? -1 : 1);\n\n\t\t\tif (!isBuiltin) {\n\t\t\t\trefs = refs.filter(ref => ref.name.indexOf('.') !== 0); // Do not consider user extension folder starting with `.`\n\t\t\t}\n\n\t\t\tconst nlsConfig = ExtensionScannerInput.createNLSConfig(input);\n\t\t\tlet _extensionDescriptions = await Promise.all(refs.map(r => this.scanExtension(input.ourVersion, log, r.path, isBuiltin, isUnderDevelopment, nlsConfig)));\n\t\t\tlet extensionDescriptions = arrays.coalesce(_extensionDescriptions);\n\t\t\textensionDescriptions = extensionDescriptions.filter(item => item !== null && !obsolete[new ExtensionIdentifierWithVersion({ id: getGalleryExtensionId(item.publisher, item.name) }, item.version).key()]);\n\n\t\t\tif (!isBuiltin) {\n\t\t\t\t// Filter out outdated extensions\n\t\t\t\tconst byExtension: IExtensionDescription[][] = groupByExtension(extensionDescriptions, e => ({ id: e.identifier.value, uuid: e.uuid }));\n\t\t\t\textensionDescriptions = byExtension.map(p => p.sort((a, b) => semver.rcompare(a.version, b.version))[0]);\n\t\t\t}\n\n\t\t\textensionDescriptions.sort((a, b) => {\n\t\t\t\tif (a.extensionLocation.fsPath < b.extensionLocation.fsPath) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\treturn 1;\n\t\t\t});\n\t\t\treturn extensionDescriptions;\n\t\t} catch (err) {\n\t\t\tlog.error(absoluteFolderPath, err);\n\t\t\treturn [];\n\t\t}\n\t}\n\n\t/**\n\t * Combination of scanExtension and scanExtensions: If an extension manifest is found at root, we load just this extension,\n\t * otherwise we assume the folder contains multiple extensions.\n\t */\n\tpublic static scanOneOrMultipleExtensions(input: ExtensionScannerInput, log: ILog): Promise<IExtensionDescription[]> {\n\t\tconst absoluteFolderPath = input.absoluteFolderPath;\n\t\tconst isBuiltin = input.isBuiltin;\n\t\tconst isUnderDevelopment = input.isUnderDevelopment;\n\n\t\treturn pfs.SymlinkSupport.existsFile(path.join(absoluteFolderPath, MANIFEST_FILE)).then((exists) => {\n\t\t\tif (exists) {\n\t\t\t\tconst nlsConfig = ExtensionScannerInput.createNLSConfig(input);\n\t\t\t\treturn this.scanExtension(input.ourVersion, log, absoluteFolderPath, isBuiltin, isUnderDevelopment, nlsConfig).then((extensionDescription) => {\n\t\t\t\t\tif (extensionDescription === null) {\n\t\t\t\t\t\treturn [];\n\t\t\t\t\t}\n\t\t\t\t\treturn [extensionDescription];\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn this.scanExtensions(input, log);\n\t\t}, (err) => {\n\t\t\tlog.error(absoluteFolderPath, err);\n\t\t\treturn [];\n\t\t});\n\t}\n\n\tpublic static scanSingleExtension(input: ExtensionScannerInput, log: ILog): Promise<IExtensionDescription | null> {\n\t\tconst absoluteFolderPath = input.absoluteFolderPath;\n\t\tconst isBuiltin = input.isBuiltin;\n\t\tconst isUnderDevelopment = input.isUnderDevelopment;\n\t\tconst nlsConfig = ExtensionScannerInput.createNLSConfig(input);\n\t\treturn this.scanExtension(input.ourVersion, log, absoluteFolderPath, isBuiltin, isUnderDevelopment, nlsConfig);\n\t}\n\n\tpublic static mergeBuiltinExtensions(builtinExtensions: Promise<IExtensionDescription[]>, extraBuiltinExtensions: Promise<IExtensionDescription[]>): Promise<IExtensionDescription[]> {\n\t\treturn Promise.all([builtinExtensions, extraBuiltinExtensions]).then(([builtinExtensions, extraBuiltinExtensions]) => {\n\t\t\tlet resultMap: { [id: string]: IExtensionDescription; } = Object.create(null);\n\t\t\tfor (let i = 0, len = builtinExtensions.length; i < len; i++) {\n\t\t\t\tresultMap[ExtensionIdentifier.toKey(builtinExtensions[i].identifier)] = builtinExtensions[i];\n\t\t\t}\n\t\t\t// Overwrite with extensions found in extra\n\t\t\tfor (let i = 0, len = extraBuiltinExtensions.length; i < len; i++) {\n\t\t\t\tresultMap[ExtensionIdentifier.toKey(extraBuiltinExtensions[i].identifier)] = extraBuiltinExtensions[i];\n\t\t\t}\n\n\t\t\tlet resultArr = Object.keys(resultMap).map((id) => resultMap[id]);\n\t\t\tresultArr.sort((a, b) => {\n\t\t\t\tconst aLastSegment = path.basename(a.extensionLocation.fsPath);\n\t\t\t\tconst bLastSegment = path.basename(b.extensionLocation.fsPath);\n\t\t\t\tif (aLastSegment < bLastSegment) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tif (aLastSegment > bLastSegment) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\treturn 0;\n\t\t\t});\n\t\t\treturn resultArr;\n\t\t});\n\t}\n}\n"]}