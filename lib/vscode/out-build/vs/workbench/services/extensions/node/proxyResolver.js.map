{"version":3,"file":"proxyResolver.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/extensions/node/proxyResolver.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as http from 'http';\nimport * as https from 'https';\nimport * as tls from 'tls';\n\nimport { IExtHostWorkspaceProvider } from 'vs/workbench/api/common/extHostWorkspace';\nimport { ExtHostConfigProvider } from 'vs/workbench/api/common/extHostConfiguration';\nimport { MainThreadTelemetryShape, IInitData } from 'vs/workbench/api/common/extHost.protocol';\nimport { ExtHostExtensionService } from 'vs/workbench/api/node/extHostExtensionService';\nimport { URI } from 'vs/base/common/uri';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { LogLevel, createHttpPatch, ProxyResolveEvent, createProxyResolver, createTlsPatch, ProxySupportSetting } from 'vscode-proxy-agent';\n\nexport function connectProxyResolver(\n\textHostWorkspace: IExtHostWorkspaceProvider,\n\tconfigProvider: ExtHostConfigProvider,\n\textensionService: ExtHostExtensionService,\n\textHostLogService: ILogService,\n\tmainThreadTelemetry: MainThreadTelemetryShape,\n\tinitData: IInitData,\n) {\n\tconst useHostProxy = initData.environment.useHostProxy;\n\tconst doUseHostProxy = typeof useHostProxy === 'boolean' ? useHostProxy : !initData.remote.isRemote;\n\tconst resolveProxy = createProxyResolver({\n\t\tresolveProxy: url => extHostWorkspace.resolveProxy(url),\n\t\tgetHttpProxySetting: () => configProvider.getConfiguration('http').get('proxy'),\n\t\tlog: (level, message, ...args) => {\n\t\t\tswitch (level) {\n\t\t\t\tcase LogLevel.Trace: extHostLogService.trace(message, ...args); break;\n\t\t\t\tcase LogLevel.Debug: extHostLogService.debug(message, ...args); break;\n\t\t\t\tcase LogLevel.Info: extHostLogService.info(message, ...args); break;\n\t\t\t\tcase LogLevel.Warning: extHostLogService.warn(message, ...args); break;\n\t\t\t\tcase LogLevel.Error: extHostLogService.error(message, ...args); break;\n\t\t\t\tcase LogLevel.Critical: extHostLogService.critical(message, ...args); break;\n\t\t\t\tcase LogLevel.Off: break;\n\t\t\t\tdefault: never(level, message, args); break;\n\t\t\t}\n\t\t\tfunction never(level: never, message: string, ...args: any[]) {\n\t\t\t\textHostLogService.error('Unknown log level', level);\n\t\t\t\textHostLogService.error(message, ...args);\n\t\t\t}\n\t\t},\n\t\tgetLogLevel: () => extHostLogService.getLevel(),\n\t\tproxyResolveTelemetry: event => {\n\t\t\ttype ResolveProxyClassification = {\n\t\t\t\tcount: { classification: 'SystemMetaData', purpose: 'PerformanceAndHealth', isMeasurement: true };\n\t\t\t\tduration: { classification: 'SystemMetaData', purpose: 'PerformanceAndHealth', isMeasurement: true };\n\t\t\t\terrorCount: { classification: 'SystemMetaData', purpose: 'PerformanceAndHealth', isMeasurement: true };\n\t\t\t\tcacheCount: { classification: 'SystemMetaData', purpose: 'PerformanceAndHealth', isMeasurement: true };\n\t\t\t\tcacheSize: { classification: 'SystemMetaData', purpose: 'PerformanceAndHealth', isMeasurement: true };\n\t\t\t\tcacheRolls: { classification: 'SystemMetaData', purpose: 'PerformanceAndHealth', isMeasurement: true };\n\t\t\t\tenvCount: { classification: 'SystemMetaData', purpose: 'PerformanceAndHealth', isMeasurement: true };\n\t\t\t\tsettingsCount: { classification: 'SystemMetaData', purpose: 'PerformanceAndHealth', isMeasurement: true };\n\t\t\t\tlocalhostCount: { classification: 'SystemMetaData', purpose: 'PerformanceAndHealth', isMeasurement: true };\n\t\t\t\tenvNoProxyCount: { classification: 'SystemMetaData', purpose: 'PerformanceAndHealth', isMeasurement: true };\n\t\t\t\tresults: { classification: 'SystemMetaData', purpose: 'PerformanceAndHealth' };\n\t\t\t};\n\t\t\tmainThreadTelemetry.$publicLog2<ProxyResolveEvent, ResolveProxyClassification>('resolveProxy', event);\n\t\t},\n\t\tuseHostProxy: doUseHostProxy,\n\t\tenv: process.env,\n\t});\n\tconst lookup = createPatchedModules(configProvider, resolveProxy);\n\treturn configureModuleLoading(extensionService, lookup);\n}\n\nfunction createPatchedModules(configProvider: ExtHostConfigProvider, resolveProxy: ReturnType<typeof createProxyResolver>) {\n\tconst proxySetting = {\n\t\tconfig: configProvider.getConfiguration('http')\n\t\t\t.get<ProxySupportSetting>('proxySupport') || 'off'\n\t};\n\tconfigProvider.onDidChangeConfiguration(e => {\n\t\tproxySetting.config = configProvider.getConfiguration('http')\n\t\t\t.get<ProxySupportSetting>('proxySupport') || 'off';\n\t});\n\tconst certSetting = {\n\t\tconfig: !!configProvider.getConfiguration('http')\n\t\t\t.get<boolean>('systemCertificates')\n\t};\n\tconfigProvider.onDidChangeConfiguration(e => {\n\t\tcertSetting.config = !!configProvider.getConfiguration('http')\n\t\t\t.get<boolean>('systemCertificates');\n\t});\n\n\treturn {\n\t\thttp: {\n\t\t\toff: Object.assign({}, http, createHttpPatch(http, resolveProxy, { config: 'off' }, certSetting, true)),\n\t\t\ton: Object.assign({}, http, createHttpPatch(http, resolveProxy, { config: 'on' }, certSetting, true)),\n\t\t\toverride: Object.assign({}, http, createHttpPatch(http, resolveProxy, { config: 'override' }, certSetting, true)),\n\t\t\tonRequest: Object.assign({}, http, createHttpPatch(http, resolveProxy, proxySetting, certSetting, true)),\n\t\t\tdefault: Object.assign(http, createHttpPatch(http, resolveProxy, proxySetting, certSetting, false)) // run last\n\t\t} as Record<string, typeof http>,\n\t\thttps: {\n\t\t\toff: Object.assign({}, https, createHttpPatch(https, resolveProxy, { config: 'off' }, certSetting, true)),\n\t\t\ton: Object.assign({}, https, createHttpPatch(https, resolveProxy, { config: 'on' }, certSetting, true)),\n\t\t\toverride: Object.assign({}, https, createHttpPatch(https, resolveProxy, { config: 'override' }, certSetting, true)),\n\t\t\tonRequest: Object.assign({}, https, createHttpPatch(https, resolveProxy, proxySetting, certSetting, true)),\n\t\t\tdefault: Object.assign(https, createHttpPatch(https, resolveProxy, proxySetting, certSetting, false)) // run last\n\t\t} as Record<string, typeof https>,\n\t\ttls: Object.assign(tls, createTlsPatch(tls))\n\t};\n}\n\nconst modulesCache = new Map<IExtensionDescription | undefined, { http?: typeof http, https?: typeof https }>();\nfunction configureModuleLoading(extensionService: ExtHostExtensionService, lookup: ReturnType<typeof createPatchedModules>): Promise<void> {\n\treturn extensionService.getExtensionPathIndex()\n\t\t.then(extensionPaths => {\n\t\t\tconst node_module = <any>require.__$__nodeRequire('module');\n\t\t\tconst original = node_module._load;\n\t\t\tnode_module._load = function load(request: string, parent: { filename: string; }, isMain: boolean) {\n\t\t\t\tif (request === 'tls') {\n\t\t\t\t\treturn lookup.tls;\n\t\t\t\t}\n\n\t\t\t\tif (request !== 'http' && request !== 'https') {\n\t\t\t\t\treturn original.apply(this, arguments);\n\t\t\t\t}\n\n\t\t\t\tconst modules = lookup[request];\n\t\t\t\tconst ext = extensionPaths.findSubstr(URI.file(parent.filename).fsPath);\n\t\t\t\tlet cache = modulesCache.get(ext);\n\t\t\t\tif (!cache) {\n\t\t\t\t\tmodulesCache.set(ext, cache = {});\n\t\t\t\t}\n\t\t\t\tif (!cache[request]) {\n\t\t\t\t\tlet mod = modules.default;\n\t\t\t\t\tif (ext && ext.enableProposedApi) {\n\t\t\t\t\t\tmod = (modules as any)[(<any>ext).proxySupport] || modules.onRequest;\n\t\t\t\t\t}\n\t\t\t\t\tcache[request] = <any>{ ...mod }; // Copy to work around #93167.\n\t\t\t\t}\n\t\t\t\treturn cache[request];\n\t\t\t};\n\t\t});\n}\n"]}