{"version":3,"file":"extensionHostProcessSetup.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/extensions/node/extensionHostProcessSetup.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nativeWatchdog from 'native-watchdog';\nimport * as net from 'net';\nimport * as minimist from 'minimist';\nimport * as performance from 'vs/base/common/performance';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { Event } from 'vs/base/common/event';\nimport { IMessagePassingProtocol } from 'vs/base/parts/ipc/common/ipc';\nimport { PersistentProtocol, ProtocolConstants, BufferedEmitter } from 'vs/base/parts/ipc/common/ipc.net';\nimport { NodeSocket, WebSocketNodeSocket } from 'vs/base/parts/ipc/node/ipc.net';\nimport product from 'vs/platform/product/common/product';\nimport { IInitData } from 'vs/workbench/api/common/extHost.protocol';\nimport { MessageType, createMessageOfType, isMessageOfType, IExtHostSocketMessage, IExtHostReadyMessage, IExtHostReduceGraceTimeMessage, ExtensionHostExitCode } from 'vs/workbench/services/extensions/common/extensionHostProtocol';\nimport { ExtensionHostMain, IExitFn } from 'vs/workbench/services/extensions/common/extensionHostMain';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { IURITransformer, URITransformer } from 'vs/base/common/uriIpc';\nimport { exists } from 'vs/base/node/pfs';\nimport { realpath } from 'vs/base/node/extpath';\nimport { IHostUtils } from 'vs/workbench/api/common/extHostExtensionService';\nimport { RunOnceScheduler } from 'vs/base/common/async';\nimport * as proxyAgent from 'vs/base/node/proxy_agent';\n\nimport 'vs/workbench/api/common/extHost.common.services';\nimport 'vs/workbench/api/node/extHost.node.services';\n\ninterface ParsedExtHostArgs {\n\turiTransformerPath?: string;\n\tuseHostProxy?: string;\n}\n\n// workaround for https://github.com/microsoft/vscode/issues/85490\n// remove --inspect-port=0 after start so that it doesn't trigger LSP debugging\n(function removeInspectPort() {\n\tfor (let i = 0; i < process.execArgv.length; i++) {\n\t\tif (process.execArgv[i] === '--inspect-port=0') {\n\t\t\tprocess.execArgv.splice(i, 1);\n\t\t\ti--;\n\t\t}\n\t}\n})();\n\nconst args = minimist(process.argv.slice(2), {\n\tstring: [\n\t\t'uriTransformerPath',\n\t\t'useHostProxy'\n\t]\n}) as ParsedExtHostArgs;\n\n// With Electron 2.x and node.js 8.x the \"natives\" module\n// can cause a native crash (see https://github.com/nodejs/node/issues/19891 and\n// https://github.com/electron/electron/issues/10905). To prevent this from\n// happening we essentially blocklist this module from getting loaded in any\n// extension by patching the node require() function.\n(function () {\n\tconst Module = require.__$__nodeRequire('module') as any;\n\tconst originalLoad = Module._load;\n\n\tModule._load = function (request: string) {\n\t\tif (request === 'natives') {\n\t\t\tthrow new Error('Either the extension or a NPM dependency is using the \"natives\" node module which is unsupported as it can cause a crash of the extension host. Click [here](https://go.microsoft.com/fwlink/?linkid=871887) to find out more');\n\t\t}\n\n\t\treturn originalLoad.apply(this, arguments);\n\t};\n})();\n\n// custom process.exit logic...\nconst nativeExit: IExitFn = process.exit.bind(process);\nfunction patchProcess(allowExit: boolean) {\n\tprocess.exit = function (code?: number) {\n\t\tif (allowExit) {\n\t\t\tnativeExit(code);\n\t\t} else {\n\t\t\tconst err = new Error('An extension called process.exit() and this was prevented.');\n\t\t\tconsole.warn(err.stack);\n\t\t}\n\t} as (code?: number) => never;\n\n\t// override Electron's process.crash() method\n\tprocess.crash = function () {\n\t\tconst err = new Error('An extension called process.crash() and this was prevented.');\n\t\tconsole.warn(err.stack);\n\t};\n}\n\ninterface IRendererConnection {\n\tprotocol: IMessagePassingProtocol;\n\tinitData: IInitData;\n}\n\n// This calls exit directly in case the initialization is not finished and we need to exit\n// Otherwise, if initialization completed we go to extensionHostMain.terminate()\nlet onTerminate = function (reason: string) {\n\tnativeExit();\n};\n\nfunction _createExtHostProtocol(): Promise<PersistentProtocol> {\n\tif (process.env.VSCODE_EXTHOST_WILL_SEND_SOCKET) {\n\n\t\treturn new Promise<PersistentProtocol>((resolve, reject) => {\n\n\t\t\tlet protocol: PersistentProtocol | null = null;\n\n\t\t\tlet timer = setTimeout(() => {\n\t\t\t\tonTerminate('VSCODE_EXTHOST_IPC_SOCKET timeout');\n\t\t\t}, 60000);\n\n\t\t\tconst reconnectionGraceTime = ProtocolConstants.ReconnectionGraceTime;\n\t\t\tconst reconnectionShortGraceTime = ProtocolConstants.ReconnectionShortGraceTime;\n\t\t\tconst disconnectRunner1 = new RunOnceScheduler(() => onTerminate('renderer disconnected for too long (1)'), reconnectionGraceTime);\n\t\t\tconst disconnectRunner2 = new RunOnceScheduler(() => onTerminate('renderer disconnected for too long (2)'), reconnectionShortGraceTime);\n\n\t\t\tprocess.on('message', (msg: IExtHostSocketMessage | IExtHostReduceGraceTimeMessage, handle: net.Socket) => {\n\t\t\t\tif (msg && msg.type === 'VSCODE_EXTHOST_IPC_SOCKET') {\n\t\t\t\t\tconst initialDataChunk = VSBuffer.wrap(Buffer.from(msg.initialDataChunk, 'base64'));\n\t\t\t\t\tlet socket: NodeSocket | WebSocketNodeSocket;\n\t\t\t\t\tif (msg.skipWebSocketFrames) {\n\t\t\t\t\t\tsocket = new NodeSocket(handle);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst inflateBytes = VSBuffer.wrap(Buffer.from(msg.inflateBytes, 'base64'));\n\t\t\t\t\t\tsocket = new WebSocketNodeSocket(new NodeSocket(handle), msg.permessageDeflate, inflateBytes, false);\n\t\t\t\t\t}\n\t\t\t\t\tif (protocol) {\n\t\t\t\t\t\t// reconnection case\n\t\t\t\t\t\tdisconnectRunner1.cancel();\n\t\t\t\t\t\tdisconnectRunner2.cancel();\n\t\t\t\t\t\tprotocol.beginAcceptReconnection(socket, initialDataChunk);\n\t\t\t\t\t\tprotocol.endAcceptReconnection();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclearTimeout(timer);\n\t\t\t\t\t\tprotocol = new PersistentProtocol(socket, initialDataChunk);\n\t\t\t\t\t\tprotocol.onDidDispose(() => onTerminate('renderer disconnected'));\n\t\t\t\t\t\tresolve(protocol);\n\n\t\t\t\t\t\t// Wait for rich client to reconnect\n\t\t\t\t\t\tprotocol.onSocketClose(() => {\n\t\t\t\t\t\t\t// NOTE@coder: Inform the server so we can manage offline\n\t\t\t\t\t\t\t// connections there instead. Our goal is to persist connections\n\t\t\t\t\t\t\t// forever (to a reasonable point) to account for things like\n\t\t\t\t\t\t\t// hibernating overnight.\n\t\t\t\t\t\t\tprocess.send!({ type: 'VSCODE_EXTHOST_DISCONNECTED' });\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (msg && msg.type === 'VSCODE_EXTHOST_IPC_REDUCE_GRACE_TIME') {\n\t\t\t\t\tif (disconnectRunner2.isScheduled()) {\n\t\t\t\t\t\t// we are disconnected and already running the short reconnection timer\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (disconnectRunner1.isScheduled()) {\n\t\t\t\t\t\t// we are disconnected and running the long reconnection timer\n\t\t\t\t\t\tdisconnectRunner2.schedule();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Now that we have managed to install a message listener, ask the other side to send us the socket\n\t\t\tconst req: IExtHostReadyMessage = { type: 'VSCODE_EXTHOST_IPC_READY' };\n\t\t\tif (process.send) {\n\t\t\t\tprocess.send(req);\n\t\t\t}\n\t\t});\n\n\t} else {\n\n\t\tconst pipeName = process.env.VSCODE_IPC_HOOK_EXTHOST!;\n\n\t\treturn new Promise<PersistentProtocol>((resolve, reject) => {\n\n\t\t\tconst socket = net.createConnection(pipeName, () => {\n\t\t\t\tsocket.removeListener('error', reject);\n\t\t\t\tresolve(new PersistentProtocol(new NodeSocket(socket)));\n\t\t\t});\n\t\t\tsocket.once('error', reject);\n\n\t\t});\n\t}\n}\n\nasync function createExtHostProtocol(): Promise<IMessagePassingProtocol> {\n\n\tconst protocol = await _createExtHostProtocol();\n\n\treturn new class implements IMessagePassingProtocol {\n\n\t\tprivate readonly _onMessage = new BufferedEmitter<VSBuffer>();\n\t\treadonly onMessage: Event<VSBuffer> = this._onMessage.event;\n\n\t\tprivate _terminating: boolean;\n\n\t\tconstructor() {\n\t\t\tthis._terminating = false;\n\t\t\tprotocol.onMessage((msg) => {\n\t\t\t\tif (isMessageOfType(msg, MessageType.Terminate)) {\n\t\t\t\t\tthis._terminating = true;\n\t\t\t\t\tonTerminate('received terminate message from renderer');\n\t\t\t\t} else {\n\t\t\t\t\tthis._onMessage.fire(msg);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tsend(msg: any): void {\n\t\t\tif (!this._terminating) {\n\t\t\t\tprotocol.send(msg);\n\t\t\t}\n\t\t}\n\n\t\tdrain(): Promise<void> {\n\t\t\treturn protocol.drain();\n\t\t}\n\t};\n}\n\nfunction connectToRenderer(protocol: IMessagePassingProtocol): Promise<IRendererConnection> {\n\treturn new Promise<IRendererConnection>((c) => {\n\n\t\t// Listen init data message\n\t\tconst first = protocol.onMessage(raw => {\n\t\t\tfirst.dispose();\n\n\t\t\tconst initData = <IInitData>JSON.parse(raw.toString());\n\n\t\t\tconst rendererCommit = initData.commit;\n\t\t\tconst myCommit = product.commit;\n\n\t\t\tif (rendererCommit && myCommit) {\n\t\t\t\t// Running in the built version where commits are defined\n\t\t\t\tif (rendererCommit !== myCommit) {\n\t\t\t\t\tnativeExit(ExtensionHostExitCode.VersionMismatch);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Print a console message when rejection isn't handled within N seconds. For details:\n\t\t\t// see https://nodejs.org/api/process.html#process_event_unhandledrejection\n\t\t\t// and https://nodejs.org/api/process.html#process_event_rejectionhandled\n\t\t\tconst unhandledPromises: Promise<any>[] = [];\n\t\t\tprocess.on('unhandledRejection', (reason: any, promise: Promise<any>) => {\n\t\t\t\tunhandledPromises.push(promise);\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tconst idx = unhandledPromises.indexOf(promise);\n\t\t\t\t\tif (idx >= 0) {\n\t\t\t\t\t\tpromise.catch(e => {\n\t\t\t\t\t\t\tunhandledPromises.splice(idx, 1);\n\t\t\t\t\t\t\tconsole.warn(`rejected promise not handled within 1 second: ${e}`);\n\t\t\t\t\t\t\tif (e && e.stack) {\n\t\t\t\t\t\t\t\tconsole.warn(`stack trace: ${e.stack}`);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tonUnexpectedError(reason);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}, 1000);\n\t\t\t});\n\n\t\t\tprocess.on('rejectionHandled', (promise: Promise<any>) => {\n\t\t\t\tconst idx = unhandledPromises.indexOf(promise);\n\t\t\t\tif (idx >= 0) {\n\t\t\t\t\tunhandledPromises.splice(idx, 1);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Print a console message when an exception isn't handled.\n\t\t\tprocess.on('uncaughtException', function (err: Error) {\n\t\t\t\tonUnexpectedError(err);\n\t\t\t});\n\n\t\t\t// Kill oneself if one's parent dies. Much drama.\n\t\t\tlet epermErrors = 0;\n\t\t\tsetInterval(function () {\n\t\t\t\ttry {\n\t\t\t\t\tprocess.kill(initData.parentPid, 0); // throws an exception if the main process doesn't exist anymore.\n\t\t\t\t\tepermErrors = 0;\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (e && e.code === 'EPERM') {\n\t\t\t\t\t\t// Even if the parent process is still alive,\n\t\t\t\t\t\t// some antivirus software can lead to an EPERM error to be thrown here.\n\t\t\t\t\t\t// Let's terminate only if we get 3 consecutive EPERM errors.\n\t\t\t\t\t\tepermErrors++;\n\t\t\t\t\t\tif (epermErrors >= 3) {\n\t\t\t\t\t\t\tonTerminate(`parent process ${initData.parentPid} does not exist anymore (3 x EPERM): ${e.message} (code: ${e.code}) (errno: ${e.errno})`);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tonTerminate(`parent process ${initData.parentPid} does not exist anymore: ${e.message} (code: ${e.code}) (errno: ${e.errno})`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, 1000);\n\n\t\t\t// In certain cases, the event loop can become busy and never yield\n\t\t\t// e.g. while-true or process.nextTick endless loops\n\t\t\t// So also use the native node module to do it from a separate thread\n\t\t\tlet watchdog: typeof nativeWatchdog;\n\t\t\ttry {\n\t\t\t\twatchdog = require.__$__nodeRequire('native-watchdog');\n\t\t\t\twatchdog.start(initData.parentPid);\n\t\t\t} catch (err) {\n\t\t\t\t// no problem...\n\t\t\t\tonUnexpectedError(err);\n\t\t\t}\n\n\t\t\t// Tell the outside that we are initialized\n\t\t\tprotocol.send(createMessageOfType(MessageType.Initialized));\n\n\t\t\tc({ protocol, initData });\n\t\t});\n\n\t\t// Tell the outside that we are ready to receive messages\n\t\tprotocol.send(createMessageOfType(MessageType.Ready));\n\t});\n}\n\nexport async function startExtensionHostProcess(): Promise<void> {\n\tproxyAgent.monkeyPatch(true);\n\n\tperformance.mark(`code/extHost/willConnectToRenderer`);\n\tconst protocol = await createExtHostProtocol();\n\tperformance.mark(`code/extHost/didConnectToRenderer`);\n\tconst renderer = await connectToRenderer(protocol);\n\tperformance.mark(`code/extHost/didWaitForInitData`);\n\tconst { initData } = renderer;\n\t// setup things\n\tpatchProcess(!!initData.environment.extensionTestsLocationURI); // to support other test frameworks like Jasmin that use process.exit (https://github.com/microsoft/vscode/issues/37708)\n\tinitData.environment.useHostProxy = args.useHostProxy !== undefined ? args.useHostProxy !== 'false' : undefined;\n\n\t// host abstraction\n\tconst hostUtils = new class NodeHost implements IHostUtils {\n\t\tdeclare readonly _serviceBrand: undefined;\n\t\texit(code: number) { nativeExit(code); }\n\t\texists(path: string) { return exists(path); }\n\t\trealpath(path: string) { return realpath(path); }\n\t};\n\n\t// Attempt to load uri transformer\n\tlet uriTransformer: IURITransformer | null = null;\n\tif (initData.remote.authority) {\n\t\ttry {\n\t\t\turiTransformer = new URITransformer(initData.remote.authority);\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t}\n\t}\n\n\tconst extensionHostMain = new ExtensionHostMain(\n\t\trenderer.protocol,\n\t\tinitData,\n\t\thostUtils,\n\t\turiTransformer\n\t);\n\n\t// rewrite onTerminate-function to be a proper shutdown\n\tonTerminate = (reason: string) => extensionHostMain.terminate(reason);\n}\n"]}