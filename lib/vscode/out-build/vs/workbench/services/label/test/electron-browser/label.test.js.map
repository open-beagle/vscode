{"version":3,"file":"label.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/label/test/electron-browser/label.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAWhG,KAAK,CAAC,WAAW,EAAE,GAAG,EAAE;QAEvB,IAAI,YAA0B,CAAC;QAE/B,KAAK,CAAC,GAAG,EAAE;YACV,YAAY,GAAG,IAAI,2BAAY,CAAC,8CAAsB,EAAE,IAAI,0CAAkB,EAAE,EAAE,IAAI,6CAAqB,EAAE,CAAC,CAAC;QAChH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,aAAa,EAAE;YACnB,YAAY,CAAC,iBAAiB,CAAC;gBAC9B,MAAM,EAAE,MAAM;gBACd,UAAU,EAAE;oBACX,KAAK,EAAE,SAAS;oBAChB,SAAS,EAAE,UAAG;oBACd,OAAO,EAAE,CAAC,oBAAS;oBACnB,oBAAoB,EAAE,oBAAS;iBAC/B;aACD,CAAC,CAAC;YAEH,MAAM,IAAI,GAAG,6BAAa,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,6BAAa,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;YAC/G,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,EAAE,oBAAS,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;YAC7G,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI,EAAE,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,EAAE,oBAAS,CAAC,CAAC,CAAC,+BAA+B,CAAC,CAAC,CAAC,wBAAwB,CAAC,CAAC;YAChJ,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;YAEhE,MAAM,IAAI,GAAG,SAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YACnC,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI,EAAE,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,EAAE,oBAAS,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC;YAClH,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { TestWorkspace } from 'vs/platform/workspace/test/common/testWorkspace';\nimport { URI } from 'vs/base/common/uri';\nimport { sep } from 'vs/base/common/path';\nimport { isWindows } from 'vs/base/common/platform';\nimport { LabelService } from 'vs/workbench/services/label/common/labelService';\nimport { TestContextService } from 'vs/workbench/test/common/workbenchTestServices';\nimport { TestNativePathService, TestEnvironmentService } from 'vs/workbench/test/electron-browser/workbenchTestServices';\n\nsuite('URI Label', () => {\n\n\tlet labelService: LabelService;\n\n\tsetup(() => {\n\t\tlabelService = new LabelService(TestEnvironmentService, new TestContextService(), new TestNativePathService());\n\t});\n\n\ttest('file scheme', function () {\n\t\tlabelService.registerFormatter({\n\t\t\tscheme: 'file',\n\t\t\tformatting: {\n\t\t\t\tlabel: '${path}',\n\t\t\t\tseparator: sep,\n\t\t\t\ttildify: !isWindows,\n\t\t\t\tnormalizeDriveLetter: isWindows\n\t\t\t}\n\t\t});\n\n\t\tconst uri1 = TestWorkspace.folders[0].uri.with({ path: TestWorkspace.folders[0].uri.path.concat('/a/b/c/d') });\n\t\tassert.strictEqual(labelService.getUriLabel(uri1, { relative: true }), isWindows ? 'a\\\\b\\\\c\\\\d' : 'a/b/c/d');\n\t\tassert.strictEqual(labelService.getUriLabel(uri1, { relative: false }), isWindows ? 'C:\\\\testWorkspace\\\\a\\\\b\\\\c\\\\d' : '/testWorkspace/a/b/c/d');\n\t\tassert.strictEqual(labelService.getUriBasenameLabel(uri1), 'd');\n\n\t\tconst uri2 = URI.file('c:\\\\1/2/3');\n\t\tassert.strictEqual(labelService.getUriLabel(uri2, { relative: false }), isWindows ? 'C:\\\\1\\\\2\\\\3' : '/c:\\\\1/2/3');\n\t\tassert.strictEqual(labelService.getUriBasenameLabel(uri2), '3');\n\t});\n});\n"]}