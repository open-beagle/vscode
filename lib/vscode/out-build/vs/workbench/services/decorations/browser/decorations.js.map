{"version":3,"file":"decorations.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/decorations/browser/decorations.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAUnF,QAAA,mBAAmB,GAAG,CAAA,GAAA,+BAAe,CAAA,CAAsB,yBAAyB,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { URI } from 'vs/base/common/uri';\nimport { Event } from 'vs/base/common/event';\nimport { ColorIdentifier } from 'vs/platform/theme/common/colorRegistry';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { ThemeIcon } from 'vs/platform/theme/common/themeService';\n\nexport const IDecorationsService = createDecorator<IDecorationsService>('IFileDecorationsService');\n\nexport interface IDecorationData {\n\treadonly weight?: number;\n\treadonly color?: ColorIdentifier;\n\treadonly letter?: string | ThemeIcon;\n\treadonly tooltip?: string;\n\treadonly bubble?: boolean;\n}\n\nexport interface IDecoration extends IDisposable {\n\treadonly tooltip: string;\n\treadonly labelClassName: string;\n\treadonly badgeClassName: string;\n\treadonly iconClassName: string;\n}\n\nexport interface IDecorationsProvider {\n\treadonly label: string;\n\treadonly onDidChange: Event<readonly URI[]>;\n\tprovideDecorations(uri: URI, token: CancellationToken): IDecorationData | Promise<IDecorationData | undefined> | undefined;\n}\n\nexport interface IResourceDecorationChangeEvent {\n\taffectsResource(uri: URI): boolean;\n}\n\nexport interface IDecorationsService {\n\n\treadonly _serviceBrand: undefined;\n\n\treadonly onDidChangeDecorations: Event<IResourceDecorationChangeEvent>;\n\n\tregisterDecorationsProvider(provider: IDecorationsProvider): IDisposable;\n\n\tgetDecoration(uri: URI, includeChildren: boolean): IDecoration | undefined;\n}\n"]}