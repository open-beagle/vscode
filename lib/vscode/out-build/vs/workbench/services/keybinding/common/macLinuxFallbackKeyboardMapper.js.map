{"version":3,"file":"macLinuxFallbackKeyboardMapper.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/keybinding/common/macLinuxFallbackKeyboardMapper.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ChordKeybinding, KeyCode, Keybinding, ResolvedKeybinding, SimpleKeybinding } from 'vs/base/common/keyCodes';\nimport { OperatingSystem } from 'vs/base/common/platform';\nimport { IMMUTABLE_CODE_TO_KEY_CODE, ScanCode, ScanCodeBinding } from 'vs/base/common/scanCode';\nimport { IKeyboardEvent } from 'vs/platform/keybinding/common/keybinding';\nimport { USLayoutResolvedKeybinding } from 'vs/platform/keybinding/common/usLayoutResolvedKeybinding';\nimport { IKeyboardMapper } from 'vs/platform/keyboardLayout/common/keyboardMapper';\nimport { removeElementsAfterNulls } from 'vs/platform/keybinding/common/resolvedKeybindingItem';\n\n/**\n * A keyboard mapper to be used when reading the keymap from the OS fails.\n */\nexport class MacLinuxFallbackKeyboardMapper implements IKeyboardMapper {\n\n\t/**\n\t * OS (can be Linux or Macintosh)\n\t */\n\tprivate readonly _OS: OperatingSystem;\n\n\tconstructor(OS: OperatingSystem) {\n\t\tthis._OS = OS;\n\t}\n\n\tpublic dumpDebugInfo(): string {\n\t\treturn 'FallbackKeyboardMapper dispatching on keyCode';\n\t}\n\n\tpublic resolveKeybinding(keybinding: Keybinding): ResolvedKeybinding[] {\n\t\treturn [new USLayoutResolvedKeybinding(keybinding, this._OS)];\n\t}\n\n\tpublic resolveKeyboardEvent(keyboardEvent: IKeyboardEvent): ResolvedKeybinding {\n\t\tlet keybinding = new SimpleKeybinding(\n\t\t\tkeyboardEvent.ctrlKey,\n\t\t\tkeyboardEvent.shiftKey,\n\t\t\tkeyboardEvent.altKey,\n\t\t\tkeyboardEvent.metaKey,\n\t\t\tkeyboardEvent.keyCode\n\t\t);\n\t\treturn new USLayoutResolvedKeybinding(keybinding.toChord(), this._OS);\n\t}\n\n\tprivate _scanCodeToKeyCode(scanCode: ScanCode): KeyCode {\n\t\tconst immutableKeyCode = IMMUTABLE_CODE_TO_KEY_CODE[scanCode];\n\t\tif (immutableKeyCode !== KeyCode.DependsOnKbLayout) {\n\t\t\treturn immutableKeyCode;\n\t\t}\n\n\t\tswitch (scanCode) {\n\t\t\tcase ScanCode.KeyA: return KeyCode.KEY_A;\n\t\t\tcase ScanCode.KeyB: return KeyCode.KEY_B;\n\t\t\tcase ScanCode.KeyC: return KeyCode.KEY_C;\n\t\t\tcase ScanCode.KeyD: return KeyCode.KEY_D;\n\t\t\tcase ScanCode.KeyE: return KeyCode.KEY_E;\n\t\t\tcase ScanCode.KeyF: return KeyCode.KEY_F;\n\t\t\tcase ScanCode.KeyG: return KeyCode.KEY_G;\n\t\t\tcase ScanCode.KeyH: return KeyCode.KEY_H;\n\t\t\tcase ScanCode.KeyI: return KeyCode.KEY_I;\n\t\t\tcase ScanCode.KeyJ: return KeyCode.KEY_J;\n\t\t\tcase ScanCode.KeyK: return KeyCode.KEY_K;\n\t\t\tcase ScanCode.KeyL: return KeyCode.KEY_L;\n\t\t\tcase ScanCode.KeyM: return KeyCode.KEY_M;\n\t\t\tcase ScanCode.KeyN: return KeyCode.KEY_N;\n\t\t\tcase ScanCode.KeyO: return KeyCode.KEY_O;\n\t\t\tcase ScanCode.KeyP: return KeyCode.KEY_P;\n\t\t\tcase ScanCode.KeyQ: return KeyCode.KEY_Q;\n\t\t\tcase ScanCode.KeyR: return KeyCode.KEY_R;\n\t\t\tcase ScanCode.KeyS: return KeyCode.KEY_S;\n\t\t\tcase ScanCode.KeyT: return KeyCode.KEY_T;\n\t\t\tcase ScanCode.KeyU: return KeyCode.KEY_U;\n\t\t\tcase ScanCode.KeyV: return KeyCode.KEY_V;\n\t\t\tcase ScanCode.KeyW: return KeyCode.KEY_W;\n\t\t\tcase ScanCode.KeyX: return KeyCode.KEY_X;\n\t\t\tcase ScanCode.KeyY: return KeyCode.KEY_Y;\n\t\t\tcase ScanCode.KeyZ: return KeyCode.KEY_Z;\n\t\t\tcase ScanCode.Digit1: return KeyCode.KEY_1;\n\t\t\tcase ScanCode.Digit2: return KeyCode.KEY_2;\n\t\t\tcase ScanCode.Digit3: return KeyCode.KEY_3;\n\t\t\tcase ScanCode.Digit4: return KeyCode.KEY_4;\n\t\t\tcase ScanCode.Digit5: return KeyCode.KEY_5;\n\t\t\tcase ScanCode.Digit6: return KeyCode.KEY_6;\n\t\t\tcase ScanCode.Digit7: return KeyCode.KEY_7;\n\t\t\tcase ScanCode.Digit8: return KeyCode.KEY_8;\n\t\t\tcase ScanCode.Digit9: return KeyCode.KEY_9;\n\t\t\tcase ScanCode.Digit0: return KeyCode.KEY_0;\n\t\t\tcase ScanCode.Minus: return KeyCode.US_MINUS;\n\t\t\tcase ScanCode.Equal: return KeyCode.US_EQUAL;\n\t\t\tcase ScanCode.BracketLeft: return KeyCode.US_OPEN_SQUARE_BRACKET;\n\t\t\tcase ScanCode.BracketRight: return KeyCode.US_CLOSE_SQUARE_BRACKET;\n\t\t\tcase ScanCode.Backslash: return KeyCode.US_BACKSLASH;\n\t\t\tcase ScanCode.IntlHash: return KeyCode.Unknown; // missing\n\t\t\tcase ScanCode.Semicolon: return KeyCode.US_SEMICOLON;\n\t\t\tcase ScanCode.Quote: return KeyCode.US_QUOTE;\n\t\t\tcase ScanCode.Backquote: return KeyCode.US_BACKTICK;\n\t\t\tcase ScanCode.Comma: return KeyCode.US_COMMA;\n\t\t\tcase ScanCode.Period: return KeyCode.US_DOT;\n\t\t\tcase ScanCode.Slash: return KeyCode.US_SLASH;\n\t\t\tcase ScanCode.IntlBackslash: return KeyCode.OEM_102;\n\t\t}\n\t\treturn KeyCode.Unknown;\n\t}\n\n\tprivate _resolveSimpleUserBinding(binding: SimpleKeybinding | ScanCodeBinding | null): SimpleKeybinding | null {\n\t\tif (!binding) {\n\t\t\treturn null;\n\t\t}\n\t\tif (binding instanceof SimpleKeybinding) {\n\t\t\treturn binding;\n\t\t}\n\t\tconst keyCode = this._scanCodeToKeyCode(binding.scanCode);\n\t\tif (keyCode === KeyCode.Unknown) {\n\t\t\treturn null;\n\t\t}\n\t\treturn new SimpleKeybinding(binding.ctrlKey, binding.shiftKey, binding.altKey, binding.metaKey, keyCode);\n\t}\n\n\tpublic resolveUserBinding(input: (SimpleKeybinding | ScanCodeBinding)[]): ResolvedKeybinding[] {\n\t\tconst parts: SimpleKeybinding[] = removeElementsAfterNulls(input.map(keybinding => this._resolveSimpleUserBinding(keybinding)));\n\t\tif (parts.length > 0) {\n\t\t\treturn [new USLayoutResolvedKeybinding(new ChordKeybinding(parts), this._OS)];\n\t\t}\n\t\treturn [];\n\t}\n}\n"]}