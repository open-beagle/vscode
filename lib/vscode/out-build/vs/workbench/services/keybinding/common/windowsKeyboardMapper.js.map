{"version":3,"file":"windowsKeyboardMapper.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/keybinding/common/windowsKeyboardMapper.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from 'vs/base/common/charCode';\nimport { KeyCode, KeyCodeUtils, Keybinding, ResolvedKeybinding, SimpleKeybinding } from 'vs/base/common/keyCodes';\nimport { UILabelProvider } from 'vs/base/common/keybindingLabels';\nimport { OperatingSystem } from 'vs/base/common/platform';\nimport { IMMUTABLE_CODE_TO_KEY_CODE, ScanCode, ScanCodeBinding, ScanCodeUtils } from 'vs/base/common/scanCode';\nimport { IKeyboardEvent } from 'vs/platform/keybinding/common/keybinding';\nimport { IKeyboardMapper } from 'vs/platform/keyboardLayout/common/keyboardMapper';\nimport { BaseResolvedKeybinding } from 'vs/platform/keybinding/common/baseResolvedKeybinding';\nimport { removeElementsAfterNulls } from 'vs/platform/keybinding/common/resolvedKeybindingItem';\nimport { IWindowsKeyboardMapping } from 'vs/platform/keyboardLayout/common/keyboardLayout';\n\nconst LOG = false;\nfunction log(str: string): void {\n\tif (LOG) {\n\t\tconsole.info(str);\n\t}\n}\n\nconst NATIVE_KEY_CODE_TO_KEY_CODE: { [nativeKeyCode: string]: KeyCode; } = _getNativeMap();\n\nexport interface IScanCodeMapping {\n\tscanCode: ScanCode;\n\tkeyCode: KeyCode;\n\tvalue: string;\n\twithShift: string;\n\twithAltGr: string;\n\twithShiftAltGr: string;\n}\n\nexport class WindowsNativeResolvedKeybinding extends BaseResolvedKeybinding<SimpleKeybinding> {\n\n\tprivate readonly _mapper: WindowsKeyboardMapper;\n\n\tconstructor(mapper: WindowsKeyboardMapper, parts: SimpleKeybinding[]) {\n\t\tsuper(OperatingSystem.Windows, parts);\n\t\tthis._mapper = mapper;\n\t}\n\n\tprotected _getLabel(keybinding: SimpleKeybinding): string | null {\n\t\tif (keybinding.isDuplicateModifierCase()) {\n\t\t\treturn '';\n\t\t}\n\t\treturn this._mapper.getUILabelForKeyCode(keybinding.keyCode);\n\t}\n\n\tprivate _getUSLabelForKeybinding(keybinding: SimpleKeybinding): string | null {\n\t\tif (keybinding.isDuplicateModifierCase()) {\n\t\t\treturn '';\n\t\t}\n\t\treturn KeyCodeUtils.toString(keybinding.keyCode);\n\t}\n\n\tpublic getUSLabel(): string | null {\n\t\treturn UILabelProvider.toLabel(this._os, this._parts, (keybinding) => this._getUSLabelForKeybinding(keybinding));\n\t}\n\n\tprotected _getAriaLabel(keybinding: SimpleKeybinding): string | null {\n\t\tif (keybinding.isDuplicateModifierCase()) {\n\t\t\treturn '';\n\t\t}\n\t\treturn this._mapper.getAriaLabelForKeyCode(keybinding.keyCode);\n\t}\n\n\tprotected _getElectronAccelerator(keybinding: SimpleKeybinding): string | null {\n\t\tif (keybinding.isDuplicateModifierCase()) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this._mapper.getElectronAcceleratorForKeyBinding(keybinding);\n\t}\n\n\tprotected _getUserSettingsLabel(keybinding: SimpleKeybinding): string | null {\n\t\tif (keybinding.isDuplicateModifierCase()) {\n\t\t\treturn '';\n\t\t}\n\t\tconst result = this._mapper.getUserSettingsLabelForKeyCode(keybinding.keyCode);\n\t\treturn (result ? result.toLowerCase() : result);\n\t}\n\n\tprotected _isWYSIWYG(keybinding: SimpleKeybinding): boolean {\n\t\treturn this.__isWYSIWYG(keybinding.keyCode);\n\t}\n\n\tprivate __isWYSIWYG(keyCode: KeyCode): boolean {\n\t\tif (\n\t\t\tkeyCode === KeyCode.LeftArrow\n\t\t\t|| keyCode === KeyCode.UpArrow\n\t\t\t|| keyCode === KeyCode.RightArrow\n\t\t\t|| keyCode === KeyCode.DownArrow\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\t\tconst ariaLabel = this._mapper.getAriaLabelForKeyCode(keyCode);\n\t\tconst userSettingsLabel = this._mapper.getUserSettingsLabelForKeyCode(keyCode);\n\t\treturn (ariaLabel === userSettingsLabel);\n\t}\n\n\tprotected _getDispatchPart(keybinding: SimpleKeybinding): string | null {\n\t\tif (keybinding.isModifierKey()) {\n\t\t\treturn null;\n\t\t}\n\t\tlet result = '';\n\n\t\tif (keybinding.ctrlKey) {\n\t\t\tresult += 'ctrl+';\n\t\t}\n\t\tif (keybinding.shiftKey) {\n\t\t\tresult += 'shift+';\n\t\t}\n\t\tif (keybinding.altKey) {\n\t\t\tresult += 'alt+';\n\t\t}\n\t\tif (keybinding.metaKey) {\n\t\t\tresult += 'meta+';\n\t\t}\n\t\tresult += KeyCodeUtils.toString(keybinding.keyCode);\n\n\t\treturn result;\n\t}\n\n\tprotected _getSingleModifierDispatchPart(keybinding: SimpleKeybinding): string | null {\n\t\tif (keybinding.keyCode === KeyCode.Ctrl && !keybinding.shiftKey && !keybinding.altKey && !keybinding.metaKey) {\n\t\t\treturn 'ctrl';\n\t\t}\n\t\tif (keybinding.keyCode === KeyCode.Shift && !keybinding.ctrlKey && !keybinding.altKey && !keybinding.metaKey) {\n\t\t\treturn 'shift';\n\t\t}\n\t\tif (keybinding.keyCode === KeyCode.Alt && !keybinding.ctrlKey && !keybinding.shiftKey && !keybinding.metaKey) {\n\t\t\treturn 'alt';\n\t\t}\n\t\tif (keybinding.keyCode === KeyCode.Meta && !keybinding.ctrlKey && !keybinding.shiftKey && !keybinding.altKey) {\n\t\t\treturn 'meta';\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate static getProducedCharCode(kb: ScanCodeBinding, mapping: IScanCodeMapping): string | null {\n\t\tif (!mapping) {\n\t\t\treturn null;\n\t\t}\n\t\tif (kb.ctrlKey && kb.shiftKey && kb.altKey) {\n\t\t\treturn mapping.withShiftAltGr;\n\t\t}\n\t\tif (kb.ctrlKey && kb.altKey) {\n\t\t\treturn mapping.withAltGr;\n\t\t}\n\t\tif (kb.shiftKey) {\n\t\t\treturn mapping.withShift;\n\t\t}\n\t\treturn mapping.value;\n\t}\n\n\tpublic static getProducedChar(kb: ScanCodeBinding, mapping: IScanCodeMapping): string {\n\t\tconst char = this.getProducedCharCode(kb, mapping);\n\t\tif (char === null || char.length === 0) {\n\t\t\treturn ' --- ';\n\t\t}\n\t\treturn '  ' + char + '  ';\n\t}\n}\n\nexport class WindowsKeyboardMapper implements IKeyboardMapper {\n\n\tpublic readonly isUSStandard: boolean;\n\tprivate readonly _codeInfo: IScanCodeMapping[];\n\tprivate readonly _scanCodeToKeyCode: KeyCode[];\n\tprivate readonly _keyCodeToLabel: Array<string | null> = [];\n\tprivate readonly _keyCodeExists: boolean[];\n\n\tconstructor(isUSStandard: boolean, rawMappings: IWindowsKeyboardMapping) {\n\t\tthis.isUSStandard = isUSStandard;\n\t\tthis._scanCodeToKeyCode = [];\n\t\tthis._keyCodeToLabel = [];\n\t\tthis._keyCodeExists = [];\n\t\tthis._keyCodeToLabel[KeyCode.Unknown] = KeyCodeUtils.toString(KeyCode.Unknown);\n\n\t\tfor (let scanCode = ScanCode.None; scanCode < ScanCode.MAX_VALUE; scanCode++) {\n\t\t\tconst immutableKeyCode = IMMUTABLE_CODE_TO_KEY_CODE[scanCode];\n\t\t\tif (immutableKeyCode !== KeyCode.DependsOnKbLayout) {\n\t\t\t\tthis._scanCodeToKeyCode[scanCode] = immutableKeyCode;\n\t\t\t\tthis._keyCodeToLabel[immutableKeyCode] = KeyCodeUtils.toString(immutableKeyCode);\n\t\t\t\tthis._keyCodeExists[immutableKeyCode] = true;\n\t\t\t}\n\t\t}\n\n\t\tlet producesLetter: boolean[] = [];\n\t\tlet producesLetters = false;\n\n\t\tthis._codeInfo = [];\n\t\tfor (let strCode in rawMappings) {\n\t\t\tif (rawMappings.hasOwnProperty(strCode)) {\n\t\t\t\tconst scanCode = ScanCodeUtils.toEnum(strCode);\n\t\t\t\tif (scanCode === ScanCode.None) {\n\t\t\t\t\tlog(`Unknown scanCode ${strCode} in mapping.`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst rawMapping = rawMappings[strCode];\n\n\t\t\t\tconst immutableKeyCode = IMMUTABLE_CODE_TO_KEY_CODE[scanCode];\n\t\t\t\tif (immutableKeyCode !== KeyCode.DependsOnKbLayout) {\n\t\t\t\t\tconst keyCode = NATIVE_KEY_CODE_TO_KEY_CODE[rawMapping.vkey] || KeyCode.Unknown;\n\t\t\t\t\tif (keyCode === KeyCode.Unknown || immutableKeyCode === keyCode) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (scanCode !== ScanCode.NumpadComma) {\n\t\t\t\t\t\t// Looks like ScanCode.NumpadComma doesn't always map to KeyCode.NUMPAD_SEPARATOR\n\t\t\t\t\t\t// e.g. on POR - PTB\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst value = rawMapping.value;\n\t\t\t\tconst withShift = rawMapping.withShift;\n\t\t\t\tconst withAltGr = rawMapping.withAltGr;\n\t\t\t\tconst withShiftAltGr = rawMapping.withShiftAltGr;\n\t\t\t\tconst keyCode = NATIVE_KEY_CODE_TO_KEY_CODE[rawMapping.vkey] || KeyCode.Unknown;\n\n\t\t\t\tconst mapping: IScanCodeMapping = {\n\t\t\t\t\tscanCode: scanCode,\n\t\t\t\t\tkeyCode: keyCode,\n\t\t\t\t\tvalue: value,\n\t\t\t\t\twithShift: withShift,\n\t\t\t\t\twithAltGr: withAltGr,\n\t\t\t\t\twithShiftAltGr: withShiftAltGr,\n\t\t\t\t};\n\t\t\t\tthis._codeInfo[scanCode] = mapping;\n\t\t\t\tthis._scanCodeToKeyCode[scanCode] = keyCode;\n\n\t\t\t\tif (keyCode === KeyCode.Unknown) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthis._keyCodeExists[keyCode] = true;\n\n\t\t\t\tif (value.length === 0) {\n\t\t\t\t\t// This key does not produce strings\n\t\t\t\t\tthis._keyCodeToLabel[keyCode] = null;\n\t\t\t\t}\n\n\t\t\t\telse if (value.length > 1) {\n\t\t\t\t\t// This key produces a letter representable with multiple UTF-16 code units.\n\t\t\t\t\tthis._keyCodeToLabel[keyCode] = value;\n\t\t\t\t}\n\n\t\t\t\telse {\n\t\t\t\t\tconst charCode = value.charCodeAt(0);\n\n\t\t\t\t\tif (charCode >= CharCode.a && charCode <= CharCode.z) {\n\t\t\t\t\t\tconst upperCaseValue = CharCode.A + (charCode - CharCode.a);\n\t\t\t\t\t\tproducesLetter[upperCaseValue] = true;\n\t\t\t\t\t\tproducesLetters = true;\n\t\t\t\t\t\tthis._keyCodeToLabel[keyCode] = String.fromCharCode(CharCode.A + (charCode - CharCode.a));\n\t\t\t\t\t}\n\n\t\t\t\t\telse if (charCode >= CharCode.A && charCode <= CharCode.Z) {\n\t\t\t\t\t\tproducesLetter[charCode] = true;\n\t\t\t\t\t\tproducesLetters = true;\n\t\t\t\t\t\tthis._keyCodeToLabel[keyCode] = value;\n\t\t\t\t\t}\n\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis._keyCodeToLabel[keyCode] = value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Handle keyboard layouts where latin characters are not produced e.g. Cyrillic\n\t\tconst _registerLetterIfMissing = (charCode: CharCode, keyCode: KeyCode): void => {\n\t\t\tif (!producesLetter[charCode]) {\n\t\t\t\tthis._keyCodeToLabel[keyCode] = String.fromCharCode(charCode);\n\t\t\t}\n\t\t};\n\t\t_registerLetterIfMissing(CharCode.A, KeyCode.KEY_A);\n\t\t_registerLetterIfMissing(CharCode.B, KeyCode.KEY_B);\n\t\t_registerLetterIfMissing(CharCode.C, KeyCode.KEY_C);\n\t\t_registerLetterIfMissing(CharCode.D, KeyCode.KEY_D);\n\t\t_registerLetterIfMissing(CharCode.E, KeyCode.KEY_E);\n\t\t_registerLetterIfMissing(CharCode.F, KeyCode.KEY_F);\n\t\t_registerLetterIfMissing(CharCode.G, KeyCode.KEY_G);\n\t\t_registerLetterIfMissing(CharCode.H, KeyCode.KEY_H);\n\t\t_registerLetterIfMissing(CharCode.I, KeyCode.KEY_I);\n\t\t_registerLetterIfMissing(CharCode.J, KeyCode.KEY_J);\n\t\t_registerLetterIfMissing(CharCode.K, KeyCode.KEY_K);\n\t\t_registerLetterIfMissing(CharCode.L, KeyCode.KEY_L);\n\t\t_registerLetterIfMissing(CharCode.M, KeyCode.KEY_M);\n\t\t_registerLetterIfMissing(CharCode.N, KeyCode.KEY_N);\n\t\t_registerLetterIfMissing(CharCode.O, KeyCode.KEY_O);\n\t\t_registerLetterIfMissing(CharCode.P, KeyCode.KEY_P);\n\t\t_registerLetterIfMissing(CharCode.Q, KeyCode.KEY_Q);\n\t\t_registerLetterIfMissing(CharCode.R, KeyCode.KEY_R);\n\t\t_registerLetterIfMissing(CharCode.S, KeyCode.KEY_S);\n\t\t_registerLetterIfMissing(CharCode.T, KeyCode.KEY_T);\n\t\t_registerLetterIfMissing(CharCode.U, KeyCode.KEY_U);\n\t\t_registerLetterIfMissing(CharCode.V, KeyCode.KEY_V);\n\t\t_registerLetterIfMissing(CharCode.W, KeyCode.KEY_W);\n\t\t_registerLetterIfMissing(CharCode.X, KeyCode.KEY_X);\n\t\t_registerLetterIfMissing(CharCode.Y, KeyCode.KEY_Y);\n\t\t_registerLetterIfMissing(CharCode.Z, KeyCode.KEY_Z);\n\n\t\tif (!producesLetters) {\n\t\t\t// Since this keyboard layout produces no latin letters at all, most of the UI will use the\n\t\t\t// US kb layout equivalent for UI labels, so also try to render other keys with the US labels\n\t\t\t// for consistency...\n\t\t\tconst _registerLabel = (keyCode: KeyCode, charCode: CharCode): void => {\n\t\t\t\t// const existingLabel = this._keyCodeToLabel[keyCode];\n\t\t\t\t// const existingCharCode = (existingLabel ? existingLabel.charCodeAt(0) : CharCode.Null);\n\t\t\t\t// if (existingCharCode < 32 || existingCharCode > 126) {\n\t\t\t\tthis._keyCodeToLabel[keyCode] = String.fromCharCode(charCode);\n\t\t\t\t// }\n\t\t\t};\n\t\t\t_registerLabel(KeyCode.US_SEMICOLON, CharCode.Semicolon);\n\t\t\t_registerLabel(KeyCode.US_EQUAL, CharCode.Equals);\n\t\t\t_registerLabel(KeyCode.US_COMMA, CharCode.Comma);\n\t\t\t_registerLabel(KeyCode.US_MINUS, CharCode.Dash);\n\t\t\t_registerLabel(KeyCode.US_DOT, CharCode.Period);\n\t\t\t_registerLabel(KeyCode.US_SLASH, CharCode.Slash);\n\t\t\t_registerLabel(KeyCode.US_BACKTICK, CharCode.BackTick);\n\t\t\t_registerLabel(KeyCode.US_OPEN_SQUARE_BRACKET, CharCode.OpenSquareBracket);\n\t\t\t_registerLabel(KeyCode.US_BACKSLASH, CharCode.Backslash);\n\t\t\t_registerLabel(KeyCode.US_CLOSE_SQUARE_BRACKET, CharCode.CloseSquareBracket);\n\t\t\t_registerLabel(KeyCode.US_QUOTE, CharCode.SingleQuote);\n\t\t}\n\t}\n\n\tpublic dumpDebugInfo(): string {\n\t\tlet result: string[] = [];\n\n\t\tlet immutableSamples = [\n\t\t\tScanCode.ArrowUp,\n\t\t\tScanCode.Numpad0\n\t\t];\n\n\t\tlet cnt = 0;\n\t\tresult.push(`-----------------------------------------------------------------------------------------------------------------------------------------`);\n\t\tfor (let scanCode = ScanCode.None; scanCode < ScanCode.MAX_VALUE; scanCode++) {\n\t\t\tif (IMMUTABLE_CODE_TO_KEY_CODE[scanCode] !== KeyCode.DependsOnKbLayout) {\n\t\t\t\tif (immutableSamples.indexOf(scanCode) === -1) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (cnt % 6 === 0) {\n\t\t\t\tresult.push(`|       HW Code combination      |  Key  |    KeyCode combination    |          UI label         |        User settings       | WYSIWYG |`);\n\t\t\t\tresult.push(`-----------------------------------------------------------------------------------------------------------------------------------------`);\n\t\t\t}\n\t\t\tcnt++;\n\n\t\t\tconst mapping = this._codeInfo[scanCode];\n\t\t\tconst strCode = ScanCodeUtils.toString(scanCode);\n\n\t\t\tconst mods = [0b000, 0b010, 0b101, 0b111];\n\t\t\tfor (const mod of mods) {\n\t\t\t\tconst ctrlKey = (mod & 0b001) ? true : false;\n\t\t\t\tconst shiftKey = (mod & 0b010) ? true : false;\n\t\t\t\tconst altKey = (mod & 0b100) ? true : false;\n\t\t\t\tconst scanCodeBinding = new ScanCodeBinding(ctrlKey, shiftKey, altKey, false, scanCode);\n\t\t\t\tconst kb = this._resolveSimpleUserBinding(scanCodeBinding);\n\t\t\t\tconst strKeyCode = (kb ? KeyCodeUtils.toString(kb.keyCode) : null);\n\t\t\t\tconst resolvedKb = (kb ? new WindowsNativeResolvedKeybinding(this, [kb]) : null);\n\n\t\t\t\tconst outScanCode = `${ctrlKey ? 'Ctrl+' : ''}${shiftKey ? 'Shift+' : ''}${altKey ? 'Alt+' : ''}${strCode}`;\n\t\t\t\tconst ariaLabel = (resolvedKb ? resolvedKb.getAriaLabel() : null);\n\t\t\t\tconst outUILabel = (ariaLabel ? ariaLabel.replace(/Control\\+/, 'Ctrl+') : null);\n\t\t\t\tconst outUserSettings = (resolvedKb ? resolvedKb.getUserSettingsLabel() : null);\n\t\t\t\tconst outKey = WindowsNativeResolvedKeybinding.getProducedChar(scanCodeBinding, mapping);\n\t\t\t\tconst outKb = (strKeyCode ? `${ctrlKey ? 'Ctrl+' : ''}${shiftKey ? 'Shift+' : ''}${altKey ? 'Alt+' : ''}${strKeyCode}` : null);\n\t\t\t\tconst isWYSIWYG = (resolvedKb ? resolvedKb.isWYSIWYG() : false);\n\t\t\t\tconst outWYSIWYG = (isWYSIWYG ? '       ' : '   NO  ');\n\t\t\t\tresult.push(`| ${this._leftPad(outScanCode, 30)} | ${outKey} | ${this._leftPad(outKb, 25)} | ${this._leftPad(outUILabel, 25)} |  ${this._leftPad(outUserSettings, 25)} | ${outWYSIWYG} |`);\n\t\t\t}\n\t\t\tresult.push(`-----------------------------------------------------------------------------------------------------------------------------------------`);\n\t\t}\n\n\n\t\treturn result.join('\\n');\n\t}\n\n\tprivate _leftPad(str: string | null, cnt: number): string {\n\t\tif (str === null) {\n\t\t\tstr = 'null';\n\t\t}\n\t\twhile (str.length < cnt) {\n\t\t\tstr = ' ' + str;\n\t\t}\n\t\treturn str;\n\t}\n\n\tpublic getUILabelForKeyCode(keyCode: KeyCode): string {\n\t\treturn this._getLabelForKeyCode(keyCode);\n\t}\n\n\tpublic getAriaLabelForKeyCode(keyCode: KeyCode): string {\n\t\treturn this._getLabelForKeyCode(keyCode);\n\t}\n\n\tpublic getUserSettingsLabelForKeyCode(keyCode: KeyCode): string {\n\t\tif (this.isUSStandard) {\n\t\t\treturn KeyCodeUtils.toUserSettingsUS(keyCode);\n\t\t}\n\t\treturn KeyCodeUtils.toUserSettingsGeneral(keyCode);\n\t}\n\n\tpublic getElectronAcceleratorForKeyBinding(keybinding: SimpleKeybinding): string | null {\n\t\tif (!this.isUSStandard) {\n\t\t\t// See https://github.com/electron/electron/issues/26888\n\t\t\t// Electron does not render accelerators respecting the current keyboard layout since 3.x\n\t\t\tconst keyCode = keybinding.keyCode;\n\t\t\tconst isOEMKey = (\n\t\t\t\tkeyCode === KeyCode.US_SEMICOLON\n\t\t\t\t|| keyCode === KeyCode.US_EQUAL\n\t\t\t\t|| keyCode === KeyCode.US_COMMA\n\t\t\t\t|| keyCode === KeyCode.US_MINUS\n\t\t\t\t|| keyCode === KeyCode.US_DOT\n\t\t\t\t|| keyCode === KeyCode.US_SLASH\n\t\t\t\t|| keyCode === KeyCode.US_BACKTICK\n\t\t\t\t|| keyCode === KeyCode.US_OPEN_SQUARE_BRACKET\n\t\t\t\t|| keyCode === KeyCode.US_BACKSLASH\n\t\t\t\t|| keyCode === KeyCode.US_CLOSE_SQUARE_BRACKET\n\t\t\t\t|| keyCode === KeyCode.OEM_8\n\t\t\t\t|| keyCode === KeyCode.OEM_102\n\t\t\t);\n\t\t\tif (isOEMKey) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this._keyCodeToElectronAccelerator(keybinding.keyCode);\n\t}\n\n\tprivate _keyCodeToElectronAccelerator(keyCode: KeyCode): string | null {\n\t\tif (keyCode >= KeyCode.NUMPAD_0 && keyCode <= KeyCode.NUMPAD_DIVIDE) {\n\t\t\t// Electron cannot handle numpad keys\n\t\t\treturn null;\n\t\t}\n\n\t\tswitch (keyCode) {\n\t\t\tcase KeyCode.UpArrow:\n\t\t\t\treturn 'Up';\n\t\t\tcase KeyCode.DownArrow:\n\t\t\t\treturn 'Down';\n\t\t\tcase KeyCode.LeftArrow:\n\t\t\t\treturn 'Left';\n\t\t\tcase KeyCode.RightArrow:\n\t\t\t\treturn 'Right';\n\t\t}\n\n\t\t// electron menus always do the correct rendering on Windows\n\t\treturn KeyCodeUtils.toString(keyCode);\n\t}\n\n\tprivate _getLabelForKeyCode(keyCode: KeyCode): string {\n\t\treturn this._keyCodeToLabel[keyCode] || KeyCodeUtils.toString(KeyCode.Unknown);\n\t}\n\n\tpublic resolveKeybinding(keybinding: Keybinding): WindowsNativeResolvedKeybinding[] {\n\t\tconst parts = keybinding.parts;\n\t\tfor (let i = 0, len = parts.length; i < len; i++) {\n\t\t\tconst part = parts[i];\n\t\t\tif (!this._keyCodeExists[part.keyCode]) {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t}\n\t\treturn [new WindowsNativeResolvedKeybinding(this, parts)];\n\t}\n\n\tpublic resolveKeyboardEvent(keyboardEvent: IKeyboardEvent): WindowsNativeResolvedKeybinding {\n\t\tconst keybinding = new SimpleKeybinding(keyboardEvent.ctrlKey, keyboardEvent.shiftKey, keyboardEvent.altKey, keyboardEvent.metaKey, keyboardEvent.keyCode);\n\t\treturn new WindowsNativeResolvedKeybinding(this, [keybinding]);\n\t}\n\n\tprivate _resolveSimpleUserBinding(binding: SimpleKeybinding | ScanCodeBinding | null): SimpleKeybinding | null {\n\t\tif (!binding) {\n\t\t\treturn null;\n\t\t}\n\t\tif (binding instanceof SimpleKeybinding) {\n\t\t\tif (!this._keyCodeExists[binding.keyCode]) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn binding;\n\t\t}\n\t\tconst keyCode = this._scanCodeToKeyCode[binding.scanCode] || KeyCode.Unknown;\n\t\tif (keyCode === KeyCode.Unknown || !this._keyCodeExists[keyCode]) {\n\t\t\treturn null;\n\t\t}\n\t\treturn new SimpleKeybinding(binding.ctrlKey, binding.shiftKey, binding.altKey, binding.metaKey, keyCode);\n\t}\n\n\tpublic resolveUserBinding(input: (SimpleKeybinding | ScanCodeBinding)[]): ResolvedKeybinding[] {\n\t\tconst parts: SimpleKeybinding[] = removeElementsAfterNulls(input.map(keybinding => this._resolveSimpleUserBinding(keybinding)));\n\t\tif (parts.length > 0) {\n\t\t\treturn [new WindowsNativeResolvedKeybinding(this, parts)];\n\t\t}\n\t\treturn [];\n\t}\n}\n\n\n// See https://msdn.microsoft.com/en-us/library/windows/desktop/dd375731(v=vs.85).aspx\n// See https://github.com/microsoft/node-native-keymap/blob/master/deps/chromium/keyboard_codes_win.h\nfunction _getNativeMap() {\n\treturn {\n\t\tVK_BACK: KeyCode.Backspace,\n\t\tVK_TAB: KeyCode.Tab,\n\t\tVK_CLEAR: KeyCode.Unknown, // MISSING\n\t\tVK_RETURN: KeyCode.Enter,\n\t\tVK_SHIFT: KeyCode.Shift,\n\t\tVK_CONTROL: KeyCode.Ctrl,\n\t\tVK_MENU: KeyCode.Alt,\n\t\tVK_PAUSE: KeyCode.PauseBreak,\n\t\tVK_CAPITAL: KeyCode.CapsLock,\n\t\tVK_KANA: KeyCode.Unknown, // MISSING\n\t\tVK_HANGUL: KeyCode.Unknown, // MISSING\n\t\tVK_JUNJA: KeyCode.Unknown, // MISSING\n\t\tVK_FINAL: KeyCode.Unknown, // MISSING\n\t\tVK_HANJA: KeyCode.Unknown, // MISSING\n\t\tVK_KANJI: KeyCode.Unknown, // MISSING\n\t\tVK_ESCAPE: KeyCode.Escape,\n\t\tVK_CONVERT: KeyCode.Unknown, // MISSING\n\t\tVK_NONCONVERT: KeyCode.Unknown, // MISSING\n\t\tVK_ACCEPT: KeyCode.Unknown, // MISSING\n\t\tVK_MODECHANGE: KeyCode.Unknown, // MISSING\n\t\tVK_SPACE: KeyCode.Space,\n\t\tVK_PRIOR: KeyCode.PageUp,\n\t\tVK_NEXT: KeyCode.PageDown,\n\t\tVK_END: KeyCode.End,\n\t\tVK_HOME: KeyCode.Home,\n\t\tVK_LEFT: KeyCode.LeftArrow,\n\t\tVK_UP: KeyCode.UpArrow,\n\t\tVK_RIGHT: KeyCode.RightArrow,\n\t\tVK_DOWN: KeyCode.DownArrow,\n\t\tVK_SELECT: KeyCode.Unknown, // MISSING\n\t\tVK_PRINT: KeyCode.Unknown, // MISSING\n\t\tVK_EXECUTE: KeyCode.Unknown, // MISSING\n\t\tVK_SNAPSHOT: KeyCode.Unknown, // MISSING\n\t\tVK_INSERT: KeyCode.Insert,\n\t\tVK_DELETE: KeyCode.Delete,\n\t\tVK_HELP: KeyCode.Unknown, // MISSING\n\n\t\tVK_0: KeyCode.KEY_0,\n\t\tVK_1: KeyCode.KEY_1,\n\t\tVK_2: KeyCode.KEY_2,\n\t\tVK_3: KeyCode.KEY_3,\n\t\tVK_4: KeyCode.KEY_4,\n\t\tVK_5: KeyCode.KEY_5,\n\t\tVK_6: KeyCode.KEY_6,\n\t\tVK_7: KeyCode.KEY_7,\n\t\tVK_8: KeyCode.KEY_8,\n\t\tVK_9: KeyCode.KEY_9,\n\t\tVK_A: KeyCode.KEY_A,\n\t\tVK_B: KeyCode.KEY_B,\n\t\tVK_C: KeyCode.KEY_C,\n\t\tVK_D: KeyCode.KEY_D,\n\t\tVK_E: KeyCode.KEY_E,\n\t\tVK_F: KeyCode.KEY_F,\n\t\tVK_G: KeyCode.KEY_G,\n\t\tVK_H: KeyCode.KEY_H,\n\t\tVK_I: KeyCode.KEY_I,\n\t\tVK_J: KeyCode.KEY_J,\n\t\tVK_K: KeyCode.KEY_K,\n\t\tVK_L: KeyCode.KEY_L,\n\t\tVK_M: KeyCode.KEY_M,\n\t\tVK_N: KeyCode.KEY_N,\n\t\tVK_O: KeyCode.KEY_O,\n\t\tVK_P: KeyCode.KEY_P,\n\t\tVK_Q: KeyCode.KEY_Q,\n\t\tVK_R: KeyCode.KEY_R,\n\t\tVK_S: KeyCode.KEY_S,\n\t\tVK_T: KeyCode.KEY_T,\n\t\tVK_U: KeyCode.KEY_U,\n\t\tVK_V: KeyCode.KEY_V,\n\t\tVK_W: KeyCode.KEY_W,\n\t\tVK_X: KeyCode.KEY_X,\n\t\tVK_Y: KeyCode.KEY_Y,\n\t\tVK_Z: KeyCode.KEY_Z,\n\n\t\tVK_LWIN: KeyCode.Meta,\n\t\tVK_COMMAND: KeyCode.Meta,\n\t\tVK_RWIN: KeyCode.Meta,\n\t\tVK_APPS: KeyCode.Unknown, // MISSING\n\t\tVK_SLEEP: KeyCode.Unknown, // MISSING\n\t\tVK_NUMPAD0: KeyCode.NUMPAD_0,\n\t\tVK_NUMPAD1: KeyCode.NUMPAD_1,\n\t\tVK_NUMPAD2: KeyCode.NUMPAD_2,\n\t\tVK_NUMPAD3: KeyCode.NUMPAD_3,\n\t\tVK_NUMPAD4: KeyCode.NUMPAD_4,\n\t\tVK_NUMPAD5: KeyCode.NUMPAD_5,\n\t\tVK_NUMPAD6: KeyCode.NUMPAD_6,\n\t\tVK_NUMPAD7: KeyCode.NUMPAD_7,\n\t\tVK_NUMPAD8: KeyCode.NUMPAD_8,\n\t\tVK_NUMPAD9: KeyCode.NUMPAD_9,\n\t\tVK_MULTIPLY: KeyCode.NUMPAD_MULTIPLY,\n\t\tVK_ADD: KeyCode.NUMPAD_ADD,\n\t\tVK_SEPARATOR: KeyCode.NUMPAD_SEPARATOR,\n\t\tVK_SUBTRACT: KeyCode.NUMPAD_SUBTRACT,\n\t\tVK_DECIMAL: KeyCode.NUMPAD_DECIMAL,\n\t\tVK_DIVIDE: KeyCode.NUMPAD_DIVIDE,\n\t\tVK_F1: KeyCode.F1,\n\t\tVK_F2: KeyCode.F2,\n\t\tVK_F3: KeyCode.F3,\n\t\tVK_F4: KeyCode.F4,\n\t\tVK_F5: KeyCode.F5,\n\t\tVK_F6: KeyCode.F6,\n\t\tVK_F7: KeyCode.F7,\n\t\tVK_F8: KeyCode.F8,\n\t\tVK_F9: KeyCode.F9,\n\t\tVK_F10: KeyCode.F10,\n\t\tVK_F11: KeyCode.F11,\n\t\tVK_F12: KeyCode.F12,\n\t\tVK_F13: KeyCode.F13,\n\t\tVK_F14: KeyCode.F14,\n\t\tVK_F15: KeyCode.F15,\n\t\tVK_F16: KeyCode.F16,\n\t\tVK_F17: KeyCode.F17,\n\t\tVK_F18: KeyCode.F18,\n\t\tVK_F19: KeyCode.F19,\n\t\tVK_F20: KeyCode.Unknown, // MISSING\n\t\tVK_F21: KeyCode.Unknown, // MISSING\n\t\tVK_F22: KeyCode.Unknown, // MISSING\n\t\tVK_F23: KeyCode.Unknown, // MISSING\n\t\tVK_F24: KeyCode.Unknown, // MISSING\n\t\tVK_NUMLOCK: KeyCode.NumLock,\n\t\tVK_SCROLL: KeyCode.ScrollLock,\n\t\tVK_LSHIFT: KeyCode.Shift,\n\t\tVK_RSHIFT: KeyCode.Shift,\n\t\tVK_LCONTROL: KeyCode.Ctrl,\n\t\tVK_RCONTROL: KeyCode.Ctrl,\n\t\tVK_LMENU: KeyCode.Unknown, // MISSING\n\t\tVK_RMENU: KeyCode.Unknown, // MISSING\n\t\tVK_BROWSER_BACK: KeyCode.Unknown, // MISSING\n\t\tVK_BROWSER_FORWARD: KeyCode.Unknown, // MISSING\n\t\tVK_BROWSER_REFRESH: KeyCode.Unknown, // MISSING\n\t\tVK_BROWSER_STOP: KeyCode.Unknown, // MISSING\n\t\tVK_BROWSER_SEARCH: KeyCode.Unknown, // MISSING\n\t\tVK_BROWSER_FAVORITES: KeyCode.Unknown, // MISSING\n\t\tVK_BROWSER_HOME: KeyCode.Unknown, // MISSING\n\t\tVK_VOLUME_MUTE: KeyCode.Unknown, // MISSING\n\t\tVK_VOLUME_DOWN: KeyCode.Unknown, // MISSING\n\t\tVK_VOLUME_UP: KeyCode.Unknown, // MISSING\n\t\tVK_MEDIA_NEXT_TRACK: KeyCode.Unknown, // MISSING\n\t\tVK_MEDIA_PREV_TRACK: KeyCode.Unknown, // MISSING\n\t\tVK_MEDIA_STOP: KeyCode.Unknown, // MISSING\n\t\tVK_MEDIA_PLAY_PAUSE: KeyCode.Unknown, // MISSING\n\t\tVK_MEDIA_LAUNCH_MAIL: KeyCode.Unknown, // MISSING\n\t\tVK_MEDIA_LAUNCH_MEDIA_SELECT: KeyCode.Unknown, // MISSING\n\t\tVK_MEDIA_LAUNCH_APP1: KeyCode.Unknown, // MISSING\n\t\tVK_MEDIA_LAUNCH_APP2: KeyCode.Unknown, // MISSING\n\t\tVK_OEM_1: KeyCode.US_SEMICOLON,\n\t\tVK_OEM_PLUS: KeyCode.US_EQUAL,\n\t\tVK_OEM_COMMA: KeyCode.US_COMMA,\n\t\tVK_OEM_MINUS: KeyCode.US_MINUS,\n\t\tVK_OEM_PERIOD: KeyCode.US_DOT,\n\t\tVK_OEM_2: KeyCode.US_SLASH,\n\t\tVK_OEM_3: KeyCode.US_BACKTICK,\n\t\tVK_ABNT_C1: KeyCode.ABNT_C1,\n\t\tVK_ABNT_C2: KeyCode.ABNT_C2,\n\t\tVK_OEM_4: KeyCode.US_OPEN_SQUARE_BRACKET,\n\t\tVK_OEM_5: KeyCode.US_BACKSLASH,\n\t\tVK_OEM_6: KeyCode.US_CLOSE_SQUARE_BRACKET,\n\t\tVK_OEM_7: KeyCode.US_QUOTE,\n\t\tVK_OEM_8: KeyCode.OEM_8,\n\t\tVK_OEM_102: KeyCode.OEM_102,\n\t\tVK_PROCESSKEY: KeyCode.Unknown, // MISSING\n\t\tVK_PACKET: KeyCode.Unknown, // MISSING\n\t\tVK_DBE_SBCSCHAR: KeyCode.Unknown, // MISSING\n\t\tVK_DBE_DBCSCHAR: KeyCode.Unknown, // MISSING\n\t\tVK_ATTN: KeyCode.Unknown, // MISSING\n\t\tVK_CRSEL: KeyCode.Unknown, // MISSING\n\t\tVK_EXSEL: KeyCode.Unknown, // MISSING\n\t\tVK_EREOF: KeyCode.Unknown, // MISSING\n\t\tVK_PLAY: KeyCode.Unknown, // MISSING\n\t\tVK_ZOOM: KeyCode.Unknown, // MISSING\n\t\tVK_NONAME: KeyCode.Unknown, // MISSING\n\t\tVK_PA1: KeyCode.Unknown, // MISSING\n\t\tVK_OEM_CLEAR: KeyCode.Unknown, // MISSING\n\t\tVK_UNKNOWN: KeyCode.Unknown,\n\t};\n}\n"]}