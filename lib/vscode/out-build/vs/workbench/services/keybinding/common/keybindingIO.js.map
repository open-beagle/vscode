{"version":3,"file":"keybindingIO.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/keybinding/common/keybindingIO.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { SimpleKeybinding } from 'vs/base/common/keyCodes';\nimport { KeybindingParser } from 'vs/base/common/keybindingParser';\nimport { ScanCodeBinding } from 'vs/base/common/scanCode';\nimport { ContextKeyExpr, ContextKeyExpression } from 'vs/platform/contextkey/common/contextkey';\nimport { IUserFriendlyKeybinding } from 'vs/platform/keybinding/common/keybinding';\nimport { ResolvedKeybindingItem } from 'vs/platform/keybinding/common/resolvedKeybindingItem';\n\nexport interface IUserKeybindingItem {\n\tparts: (SimpleKeybinding | ScanCodeBinding)[];\n\tcommand: string | null;\n\tcommandArgs?: any;\n\twhen: ContextKeyExpression | undefined;\n}\n\nexport class KeybindingIO {\n\n\tpublic static writeKeybindingItem(out: OutputBuilder, item: ResolvedKeybindingItem): void {\n\t\tif (!item.resolvedKeybinding) {\n\t\t\treturn;\n\t\t}\n\t\tlet quotedSerializedKeybinding = JSON.stringify(item.resolvedKeybinding.getUserSettingsLabel());\n\t\tout.write(`{ \"key\": ${rightPaddedString(quotedSerializedKeybinding + ',', 25)} \"command\": `);\n\n\t\tlet quotedSerializedWhen = item.when ? JSON.stringify(item.when.serialize()) : '';\n\t\tlet quotedSerializeCommand = JSON.stringify(item.command);\n\t\tif (quotedSerializedWhen.length > 0) {\n\t\t\tout.write(`${quotedSerializeCommand},`);\n\t\t\tout.writeLine();\n\t\t\tout.write(`                                     \"when\": ${quotedSerializedWhen}`);\n\t\t} else {\n\t\t\tout.write(`${quotedSerializeCommand}`);\n\t\t}\n\t\tif (item.commandArgs) {\n\t\t\tout.write(',');\n\t\t\tout.writeLine();\n\t\t\tout.write(`                                     \"args\": ${JSON.stringify(item.commandArgs)}`);\n\t\t}\n\t\tout.write(' }');\n\t}\n\n\tpublic static readUserKeybindingItem(input: IUserFriendlyKeybinding): IUserKeybindingItem {\n\t\tconst parts = (typeof input.key === 'string' ? KeybindingParser.parseUserBinding(input.key) : []);\n\t\tconst when = (typeof input.when === 'string' ? ContextKeyExpr.deserialize(input.when) : undefined);\n\t\tconst command = (typeof input.command === 'string' ? input.command : null);\n\t\tconst commandArgs = (typeof input.args !== 'undefined' ? input.args : undefined);\n\t\treturn {\n\t\t\tparts: parts,\n\t\t\tcommand: command,\n\t\t\tcommandArgs: commandArgs,\n\t\t\twhen: when\n\t\t};\n\t}\n}\n\nfunction rightPaddedString(str: string, minChars: number): string {\n\tif (str.length < minChars) {\n\t\treturn str + (new Array(minChars - str.length).join(' '));\n\t}\n\treturn str;\n}\n\nexport class OutputBuilder {\n\n\tprivate _lines: string[] = [];\n\tprivate _currentLine: string = '';\n\n\twrite(str: string): void {\n\t\tthis._currentLine += str;\n\t}\n\n\twriteLine(str: string = ''): void {\n\t\tthis._lines.push(this._currentLine + str);\n\t\tthis._currentLine = '';\n\t}\n\n\ttoString(): string {\n\t\tthis.writeLine();\n\t\treturn this._lines.join('\\n');\n\t}\n}\n"]}