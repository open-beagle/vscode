{"version":3,"file":"macLinuxKeyboardMapper.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/keybinding/common/macLinuxKeyboardMapper.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from 'vs/base/common/charCode';\nimport { KeyCode, KeyCodeUtils, Keybinding, ResolvedKeybinding, SimpleKeybinding } from 'vs/base/common/keyCodes';\nimport { OperatingSystem } from 'vs/base/common/platform';\nimport { IMMUTABLE_CODE_TO_KEY_CODE, IMMUTABLE_KEY_CODE_TO_CODE, ScanCode, ScanCodeBinding, ScanCodeUtils } from 'vs/base/common/scanCode';\nimport { IKeyboardEvent } from 'vs/platform/keybinding/common/keybinding';\nimport { IKeyboardMapper } from 'vs/platform/keyboardLayout/common/keyboardMapper';\nimport { BaseResolvedKeybinding } from 'vs/platform/keybinding/common/baseResolvedKeybinding';\nimport { IMacLinuxKeyboardMapping, IMacLinuxKeyMapping } from 'vs/platform/keyboardLayout/common/keyboardLayout';\n\n/**\n * A map from character to key codes.\n * e.g. Contains entries such as:\n *  - '/' => { keyCode: KeyCode.US_SLASH, shiftKey: false }\n *  - '?' => { keyCode: KeyCode.US_SLASH, shiftKey: true }\n */\nconst CHAR_CODE_TO_KEY_CODE: ({ keyCode: KeyCode; shiftKey: boolean } | null)[] = [];\n\nexport class NativeResolvedKeybinding extends BaseResolvedKeybinding<ScanCodeBinding> {\n\n\tprivate readonly _mapper: MacLinuxKeyboardMapper;\n\n\tconstructor(mapper: MacLinuxKeyboardMapper, os: OperatingSystem, parts: ScanCodeBinding[]) {\n\t\tsuper(os, parts);\n\t\tthis._mapper = mapper;\n\t}\n\n\tprotected _getLabel(keybinding: ScanCodeBinding): string | null {\n\t\treturn this._mapper.getUILabelForScanCodeBinding(keybinding);\n\t}\n\n\tprotected _getAriaLabel(keybinding: ScanCodeBinding): string | null {\n\t\treturn this._mapper.getAriaLabelForScanCodeBinding(keybinding);\n\t}\n\n\tprotected _getElectronAccelerator(keybinding: ScanCodeBinding): string | null {\n\t\treturn this._mapper.getElectronAcceleratorLabelForScanCodeBinding(keybinding);\n\t}\n\n\tprotected _getUserSettingsLabel(keybinding: ScanCodeBinding): string | null {\n\t\treturn this._mapper.getUserSettingsLabelForScanCodeBinding(keybinding);\n\t}\n\n\tprotected _isWYSIWYG(binding: ScanCodeBinding | null): boolean {\n\t\tif (!binding) {\n\t\t\treturn true;\n\t\t}\n\t\tif (IMMUTABLE_CODE_TO_KEY_CODE[binding.scanCode] !== KeyCode.DependsOnKbLayout) {\n\t\t\treturn true;\n\t\t}\n\t\tlet a = this._mapper.getAriaLabelForScanCodeBinding(binding);\n\t\tlet b = this._mapper.getUserSettingsLabelForScanCodeBinding(binding);\n\n\t\tif (!a && !b) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!a || !b) {\n\t\t\treturn false;\n\t\t}\n\t\treturn (a.toLowerCase() === b.toLowerCase());\n\t}\n\n\tprotected _getDispatchPart(keybinding: ScanCodeBinding): string | null {\n\t\treturn this._mapper.getDispatchStrForScanCodeBinding(keybinding);\n\t}\n\n\tprotected _getSingleModifierDispatchPart(keybinding: ScanCodeBinding): string | null {\n\t\tif ((keybinding.scanCode === ScanCode.ControlLeft || keybinding.scanCode === ScanCode.ControlRight) && !keybinding.shiftKey && !keybinding.altKey && !keybinding.metaKey) {\n\t\t\treturn 'ctrl';\n\t\t}\n\t\tif ((keybinding.scanCode === ScanCode.AltLeft || keybinding.scanCode === ScanCode.AltRight) && !keybinding.ctrlKey && !keybinding.shiftKey && !keybinding.metaKey) {\n\t\t\treturn 'alt';\n\t\t}\n\t\tif ((keybinding.scanCode === ScanCode.ShiftLeft || keybinding.scanCode === ScanCode.ShiftRight) && !keybinding.ctrlKey && !keybinding.altKey && !keybinding.metaKey) {\n\t\t\treturn 'shift';\n\t\t}\n\t\tif ((keybinding.scanCode === ScanCode.MetaLeft || keybinding.scanCode === ScanCode.MetaRight) && !keybinding.ctrlKey && !keybinding.shiftKey && !keybinding.altKey) {\n\t\t\treturn 'meta';\n\t\t}\n\t\treturn null;\n\t}\n}\n\ninterface IScanCodeMapping {\n\tscanCode: ScanCode;\n\tvalue: number;\n\twithShift: number;\n\twithAltGr: number;\n\twithShiftAltGr: number;\n}\n\nclass ScanCodeCombo {\n\tpublic readonly ctrlKey: boolean;\n\tpublic readonly shiftKey: boolean;\n\tpublic readonly altKey: boolean;\n\tpublic readonly scanCode: ScanCode;\n\n\tconstructor(ctrlKey: boolean, shiftKey: boolean, altKey: boolean, scanCode: ScanCode) {\n\t\tthis.ctrlKey = ctrlKey;\n\t\tthis.shiftKey = shiftKey;\n\t\tthis.altKey = altKey;\n\t\tthis.scanCode = scanCode;\n\t}\n\n\tpublic toString(): string {\n\t\treturn `${this.ctrlKey ? 'Ctrl+' : ''}${this.shiftKey ? 'Shift+' : ''}${this.altKey ? 'Alt+' : ''}${ScanCodeUtils.toString(this.scanCode)}`;\n\t}\n\n\tpublic equals(other: ScanCodeCombo): boolean {\n\t\treturn (\n\t\t\tthis.ctrlKey === other.ctrlKey\n\t\t\t&& this.shiftKey === other.shiftKey\n\t\t\t&& this.altKey === other.altKey\n\t\t\t&& this.scanCode === other.scanCode\n\t\t);\n\t}\n\n\tprivate getProducedCharCode(mapping: IMacLinuxKeyMapping): string {\n\t\tif (!mapping) {\n\t\t\treturn '';\n\t\t}\n\t\tif (this.ctrlKey && this.shiftKey && this.altKey) {\n\t\t\treturn mapping.withShiftAltGr;\n\t\t}\n\t\tif (this.ctrlKey && this.altKey) {\n\t\t\treturn mapping.withAltGr;\n\t\t}\n\t\tif (this.shiftKey) {\n\t\t\treturn mapping.withShift;\n\t\t}\n\t\treturn mapping.value;\n\t}\n\n\tpublic getProducedChar(mapping: IMacLinuxKeyMapping): string {\n\t\tconst charCode = MacLinuxKeyboardMapper.getCharCode(this.getProducedCharCode(mapping));\n\t\tif (charCode === 0) {\n\t\t\treturn ' --- ';\n\t\t}\n\t\tif (charCode >= CharCode.U_Combining_Grave_Accent && charCode <= CharCode.U_Combining_Latin_Small_Letter_X) {\n\t\t\t// combining\n\t\t\treturn 'U+' + charCode.toString(16);\n\t\t}\n\t\treturn '  ' + String.fromCharCode(charCode) + '  ';\n\t}\n}\n\nclass KeyCodeCombo {\n\tpublic readonly ctrlKey: boolean;\n\tpublic readonly shiftKey: boolean;\n\tpublic readonly altKey: boolean;\n\tpublic readonly keyCode: KeyCode;\n\n\tconstructor(ctrlKey: boolean, shiftKey: boolean, altKey: boolean, keyCode: KeyCode) {\n\t\tthis.ctrlKey = ctrlKey;\n\t\tthis.shiftKey = shiftKey;\n\t\tthis.altKey = altKey;\n\t\tthis.keyCode = keyCode;\n\t}\n\n\tpublic toString(): string {\n\t\treturn `${this.ctrlKey ? 'Ctrl+' : ''}${this.shiftKey ? 'Shift+' : ''}${this.altKey ? 'Alt+' : ''}${KeyCodeUtils.toString(this.keyCode)}`;\n\t}\n}\n\nclass ScanCodeKeyCodeMapper {\n\n\t/**\n\t * ScanCode combination => KeyCode combination.\n\t * Only covers relevant modifiers ctrl, shift, alt (since meta does not influence the mappings).\n\t */\n\tprivate readonly _scanCodeToKeyCode: number[][] = [];\n\t/**\n\t * inverse of `_scanCodeToKeyCode`.\n\t * KeyCode combination => ScanCode combination.\n\t * Only covers relevant modifiers ctrl, shift, alt (since meta does not influence the mappings).\n\t */\n\tprivate readonly _keyCodeToScanCode: number[][] = [];\n\n\tconstructor() {\n\t\tthis._scanCodeToKeyCode = [];\n\t\tthis._keyCodeToScanCode = [];\n\t}\n\n\tpublic registrationComplete(): void {\n\t\t// IntlHash and IntlBackslash are rare keys, so ensure they don't end up being the preferred...\n\t\tthis._moveToEnd(ScanCode.IntlHash);\n\t\tthis._moveToEnd(ScanCode.IntlBackslash);\n\t}\n\n\tprivate _moveToEnd(scanCode: ScanCode): void {\n\t\tfor (let mod = 0; mod < 8; mod++) {\n\t\t\tconst encodedKeyCodeCombos = this._scanCodeToKeyCode[(scanCode << 3) + mod];\n\t\t\tif (!encodedKeyCodeCombos) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfor (let i = 0, len = encodedKeyCodeCombos.length; i < len; i++) {\n\t\t\t\tconst encodedScanCodeCombos = this._keyCodeToScanCode[encodedKeyCodeCombos[i]];\n\t\t\t\tif (encodedScanCodeCombos.length === 1) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tfor (let j = 0, len = encodedScanCodeCombos.length; j < len; j++) {\n\t\t\t\t\tconst entry = encodedScanCodeCombos[j];\n\t\t\t\t\tconst entryScanCode = (entry >>> 3);\n\t\t\t\t\tif (entryScanCode === scanCode) {\n\t\t\t\t\t\t// Move this entry to the end\n\t\t\t\t\t\tfor (let k = j + 1; k < len; k++) {\n\t\t\t\t\t\t\tencodedScanCodeCombos[k - 1] = encodedScanCodeCombos[k];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tencodedScanCodeCombos[len - 1] = entry;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic registerIfUnknown(scanCodeCombo: ScanCodeCombo, keyCodeCombo: KeyCodeCombo): void {\n\t\tif (keyCodeCombo.keyCode === KeyCode.Unknown) {\n\t\t\treturn;\n\t\t}\n\t\tconst scanCodeComboEncoded = this._encodeScanCodeCombo(scanCodeCombo);\n\t\tconst keyCodeComboEncoded = this._encodeKeyCodeCombo(keyCodeCombo);\n\n\t\tconst keyCodeIsDigit = (keyCodeCombo.keyCode >= KeyCode.KEY_0 && keyCodeCombo.keyCode <= KeyCode.KEY_9);\n\t\tconst keyCodeIsLetter = (keyCodeCombo.keyCode >= KeyCode.KEY_A && keyCodeCombo.keyCode <= KeyCode.KEY_Z);\n\n\t\tconst existingKeyCodeCombos = this._scanCodeToKeyCode[scanCodeComboEncoded];\n\n\t\t// Allow a scan code to map to multiple key codes if it is a digit or a letter key code\n\t\tif (keyCodeIsDigit || keyCodeIsLetter) {\n\t\t\t// Only check that we don't insert the same entry twice\n\t\t\tif (existingKeyCodeCombos) {\n\t\t\t\tfor (let i = 0, len = existingKeyCodeCombos.length; i < len; i++) {\n\t\t\t\t\tif (existingKeyCodeCombos[i] === keyCodeComboEncoded) {\n\t\t\t\t\t\t// avoid duplicates\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// Don't allow multiples\n\t\t\tif (existingKeyCodeCombos && existingKeyCodeCombos.length !== 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tthis._scanCodeToKeyCode[scanCodeComboEncoded] = this._scanCodeToKeyCode[scanCodeComboEncoded] || [];\n\t\tthis._scanCodeToKeyCode[scanCodeComboEncoded].unshift(keyCodeComboEncoded);\n\n\t\tthis._keyCodeToScanCode[keyCodeComboEncoded] = this._keyCodeToScanCode[keyCodeComboEncoded] || [];\n\t\tthis._keyCodeToScanCode[keyCodeComboEncoded].unshift(scanCodeComboEncoded);\n\t}\n\n\tpublic lookupKeyCodeCombo(keyCodeCombo: KeyCodeCombo): ScanCodeCombo[] {\n\t\tconst keyCodeComboEncoded = this._encodeKeyCodeCombo(keyCodeCombo);\n\t\tconst scanCodeCombosEncoded = this._keyCodeToScanCode[keyCodeComboEncoded];\n\t\tif (!scanCodeCombosEncoded || scanCodeCombosEncoded.length === 0) {\n\t\t\treturn [];\n\t\t}\n\n\t\tlet result: ScanCodeCombo[] = [];\n\t\tfor (let i = 0, len = scanCodeCombosEncoded.length; i < len; i++) {\n\t\t\tconst scanCodeComboEncoded = scanCodeCombosEncoded[i];\n\n\t\t\tconst ctrlKey = (scanCodeComboEncoded & 0b001) ? true : false;\n\t\t\tconst shiftKey = (scanCodeComboEncoded & 0b010) ? true : false;\n\t\t\tconst altKey = (scanCodeComboEncoded & 0b100) ? true : false;\n\t\t\tconst scanCode: ScanCode = (scanCodeComboEncoded >>> 3);\n\n\t\t\tresult[i] = new ScanCodeCombo(ctrlKey, shiftKey, altKey, scanCode);\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic lookupScanCodeCombo(scanCodeCombo: ScanCodeCombo): KeyCodeCombo[] {\n\t\tconst scanCodeComboEncoded = this._encodeScanCodeCombo(scanCodeCombo);\n\t\tconst keyCodeCombosEncoded = this._scanCodeToKeyCode[scanCodeComboEncoded];\n\t\tif (!keyCodeCombosEncoded || keyCodeCombosEncoded.length === 0) {\n\t\t\treturn [];\n\t\t}\n\n\t\tlet result: KeyCodeCombo[] = [];\n\t\tfor (let i = 0, len = keyCodeCombosEncoded.length; i < len; i++) {\n\t\t\tconst keyCodeComboEncoded = keyCodeCombosEncoded[i];\n\n\t\t\tconst ctrlKey = (keyCodeComboEncoded & 0b001) ? true : false;\n\t\t\tconst shiftKey = (keyCodeComboEncoded & 0b010) ? true : false;\n\t\t\tconst altKey = (keyCodeComboEncoded & 0b100) ? true : false;\n\t\t\tconst keyCode: KeyCode = (keyCodeComboEncoded >>> 3);\n\n\t\t\tresult[i] = new KeyCodeCombo(ctrlKey, shiftKey, altKey, keyCode);\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic guessStableKeyCode(scanCode: ScanCode): KeyCode {\n\t\tif (scanCode >= ScanCode.Digit1 && scanCode <= ScanCode.Digit0) {\n\t\t\t// digits are ok\n\t\t\tswitch (scanCode) {\n\t\t\t\tcase ScanCode.Digit1: return KeyCode.KEY_1;\n\t\t\t\tcase ScanCode.Digit2: return KeyCode.KEY_2;\n\t\t\t\tcase ScanCode.Digit3: return KeyCode.KEY_3;\n\t\t\t\tcase ScanCode.Digit4: return KeyCode.KEY_4;\n\t\t\t\tcase ScanCode.Digit5: return KeyCode.KEY_5;\n\t\t\t\tcase ScanCode.Digit6: return KeyCode.KEY_6;\n\t\t\t\tcase ScanCode.Digit7: return KeyCode.KEY_7;\n\t\t\t\tcase ScanCode.Digit8: return KeyCode.KEY_8;\n\t\t\t\tcase ScanCode.Digit9: return KeyCode.KEY_9;\n\t\t\t\tcase ScanCode.Digit0: return KeyCode.KEY_0;\n\t\t\t}\n\t\t}\n\n\t\t// Lookup the scanCode with and without shift and see if the keyCode is stable\n\t\tconst keyCodeCombos1 = this.lookupScanCodeCombo(new ScanCodeCombo(false, false, false, scanCode));\n\t\tconst keyCodeCombos2 = this.lookupScanCodeCombo(new ScanCodeCombo(false, true, false, scanCode));\n\t\tif (keyCodeCombos1.length === 1 && keyCodeCombos2.length === 1) {\n\t\t\tconst shiftKey1 = keyCodeCombos1[0].shiftKey;\n\t\t\tconst keyCode1 = keyCodeCombos1[0].keyCode;\n\t\t\tconst shiftKey2 = keyCodeCombos2[0].shiftKey;\n\t\t\tconst keyCode2 = keyCodeCombos2[0].keyCode;\n\t\t\tif (keyCode1 === keyCode2 && shiftKey1 !== shiftKey2) {\n\t\t\t\t// This looks like a stable mapping\n\t\t\t\treturn keyCode1;\n\t\t\t}\n\t\t}\n\n\t\treturn KeyCode.DependsOnKbLayout;\n\t}\n\n\tprivate _encodeScanCodeCombo(scanCodeCombo: ScanCodeCombo): number {\n\t\treturn this._encode(scanCodeCombo.ctrlKey, scanCodeCombo.shiftKey, scanCodeCombo.altKey, scanCodeCombo.scanCode);\n\t}\n\n\tprivate _encodeKeyCodeCombo(keyCodeCombo: KeyCodeCombo): number {\n\t\treturn this._encode(keyCodeCombo.ctrlKey, keyCodeCombo.shiftKey, keyCodeCombo.altKey, keyCodeCombo.keyCode);\n\t}\n\n\tprivate _encode(ctrlKey: boolean, shiftKey: boolean, altKey: boolean, principal: number): number {\n\t\treturn (\n\t\t\t((ctrlKey ? 1 : 0) << 0)\n\t\t\t| ((shiftKey ? 1 : 0) << 1)\n\t\t\t| ((altKey ? 1 : 0) << 2)\n\t\t\t| principal << 3\n\t\t) >>> 0;\n\t}\n}\n\nexport class MacLinuxKeyboardMapper implements IKeyboardMapper {\n\n\t/**\n\t * Is this the standard US keyboard layout?\n\t */\n\tprivate readonly _isUSStandard: boolean;\n\t/**\n\t * OS (can be Linux or Macintosh)\n\t */\n\tprivate readonly _OS: OperatingSystem;\n\t/**\n\t * used only for debug purposes.\n\t */\n\tprivate readonly _codeInfo: IMacLinuxKeyMapping[];\n\t/**\n\t * Maps ScanCode combos <-> KeyCode combos.\n\t */\n\tprivate readonly _scanCodeKeyCodeMapper: ScanCodeKeyCodeMapper;\n\t/**\n\t * UI label for a ScanCode.\n\t */\n\tprivate readonly _scanCodeToLabel: Array<string | null> = [];\n\t/**\n\t * Dispatching string for a ScanCode.\n\t */\n\tprivate readonly _scanCodeToDispatch: Array<string | null> = [];\n\n\tconstructor(isUSStandard: boolean, rawMappings: IMacLinuxKeyboardMapping, OS: OperatingSystem) {\n\t\tthis._isUSStandard = isUSStandard;\n\t\tthis._OS = OS;\n\t\tthis._codeInfo = [];\n\t\tthis._scanCodeKeyCodeMapper = new ScanCodeKeyCodeMapper();\n\t\tthis._scanCodeToLabel = [];\n\t\tthis._scanCodeToDispatch = [];\n\n\t\tconst _registerIfUnknown = (\n\t\t\thwCtrlKey: 0 | 1, hwShiftKey: 0 | 1, hwAltKey: 0 | 1, scanCode: ScanCode,\n\t\t\tkbCtrlKey: 0 | 1, kbShiftKey: 0 | 1, kbAltKey: 0 | 1, keyCode: KeyCode,\n\t\t): void => {\n\t\t\tthis._scanCodeKeyCodeMapper.registerIfUnknown(\n\t\t\t\tnew ScanCodeCombo(hwCtrlKey ? true : false, hwShiftKey ? true : false, hwAltKey ? true : false, scanCode),\n\t\t\t\tnew KeyCodeCombo(kbCtrlKey ? true : false, kbShiftKey ? true : false, kbAltKey ? true : false, keyCode)\n\t\t\t);\n\t\t};\n\n\t\tconst _registerAllCombos = (_ctrlKey: 0 | 1, _shiftKey: 0 | 1, _altKey: 0 | 1, scanCode: ScanCode, keyCode: KeyCode): void => {\n\t\t\tfor (let ctrlKey = _ctrlKey; ctrlKey <= 1; ctrlKey++) {\n\t\t\t\tfor (let shiftKey = _shiftKey; shiftKey <= 1; shiftKey++) {\n\t\t\t\t\tfor (let altKey = _altKey; altKey <= 1; altKey++) {\n\t\t\t\t\t\t_registerIfUnknown(\n\t\t\t\t\t\t\tctrlKey, shiftKey, altKey, scanCode,\n\t\t\t\t\t\t\tctrlKey, shiftKey, altKey, keyCode\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Initialize `_scanCodeToLabel`\n\t\tfor (let scanCode = ScanCode.None; scanCode < ScanCode.MAX_VALUE; scanCode++) {\n\t\t\tthis._scanCodeToLabel[scanCode] = null;\n\t\t}\n\n\t\t// Initialize `_scanCodeToDispatch`\n\t\tfor (let scanCode = ScanCode.None; scanCode < ScanCode.MAX_VALUE; scanCode++) {\n\t\t\tthis._scanCodeToDispatch[scanCode] = null;\n\t\t}\n\n\t\t// Handle immutable mappings\n\t\tfor (let scanCode = ScanCode.None; scanCode < ScanCode.MAX_VALUE; scanCode++) {\n\t\t\tconst keyCode = IMMUTABLE_CODE_TO_KEY_CODE[scanCode];\n\t\t\tif (keyCode !== KeyCode.DependsOnKbLayout) {\n\t\t\t\t_registerAllCombos(0, 0, 0, scanCode, keyCode);\n\t\t\t\tthis._scanCodeToLabel[scanCode] = KeyCodeUtils.toString(keyCode);\n\n\t\t\t\tif (keyCode === KeyCode.Unknown || keyCode === KeyCode.Ctrl || keyCode === KeyCode.Meta || keyCode === KeyCode.Alt || keyCode === KeyCode.Shift) {\n\t\t\t\t\tthis._scanCodeToDispatch[scanCode] = null; // cannot dispatch on this ScanCode\n\t\t\t\t} else {\n\t\t\t\t\tthis._scanCodeToDispatch[scanCode] = `[${ScanCodeUtils.toString(scanCode)}]`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Try to identify keyboard layouts where characters A-Z are missing\n\t\t// and forcibly map them to their corresponding scan codes if that is the case\n\t\tconst missingLatinLettersOverride: { [scanCode: string]: IMacLinuxKeyMapping; } = {};\n\n\t\t{\n\t\t\tlet producesLatinLetter: boolean[] = [];\n\t\t\tfor (let strScanCode in rawMappings) {\n\t\t\t\tif (rawMappings.hasOwnProperty(strScanCode)) {\n\t\t\t\t\tconst scanCode = ScanCodeUtils.toEnum(strScanCode);\n\t\t\t\t\tif (scanCode === ScanCode.None) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (IMMUTABLE_CODE_TO_KEY_CODE[scanCode] !== KeyCode.DependsOnKbLayout) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst rawMapping = rawMappings[strScanCode];\n\t\t\t\t\tconst value = MacLinuxKeyboardMapper.getCharCode(rawMapping.value);\n\n\t\t\t\t\tif (value >= CharCode.a && value <= CharCode.z) {\n\t\t\t\t\t\tconst upperCaseValue = CharCode.A + (value - CharCode.a);\n\t\t\t\t\t\tproducesLatinLetter[upperCaseValue] = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst _registerLetterIfMissing = (charCode: CharCode, scanCode: ScanCode, value: string, withShift: string): void => {\n\t\t\t\tif (!producesLatinLetter[charCode]) {\n\t\t\t\t\tmissingLatinLettersOverride[ScanCodeUtils.toString(scanCode)] = {\n\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\twithShift: withShift,\n\t\t\t\t\t\twithAltGr: '',\n\t\t\t\t\t\twithShiftAltGr: ''\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// Ensure letters are mapped\n\t\t\t_registerLetterIfMissing(CharCode.A, ScanCode.KeyA, 'a', 'A');\n\t\t\t_registerLetterIfMissing(CharCode.B, ScanCode.KeyB, 'b', 'B');\n\t\t\t_registerLetterIfMissing(CharCode.C, ScanCode.KeyC, 'c', 'C');\n\t\t\t_registerLetterIfMissing(CharCode.D, ScanCode.KeyD, 'd', 'D');\n\t\t\t_registerLetterIfMissing(CharCode.E, ScanCode.KeyE, 'e', 'E');\n\t\t\t_registerLetterIfMissing(CharCode.F, ScanCode.KeyF, 'f', 'F');\n\t\t\t_registerLetterIfMissing(CharCode.G, ScanCode.KeyG, 'g', 'G');\n\t\t\t_registerLetterIfMissing(CharCode.H, ScanCode.KeyH, 'h', 'H');\n\t\t\t_registerLetterIfMissing(CharCode.I, ScanCode.KeyI, 'i', 'I');\n\t\t\t_registerLetterIfMissing(CharCode.J, ScanCode.KeyJ, 'j', 'J');\n\t\t\t_registerLetterIfMissing(CharCode.K, ScanCode.KeyK, 'k', 'K');\n\t\t\t_registerLetterIfMissing(CharCode.L, ScanCode.KeyL, 'l', 'L');\n\t\t\t_registerLetterIfMissing(CharCode.M, ScanCode.KeyM, 'm', 'M');\n\t\t\t_registerLetterIfMissing(CharCode.N, ScanCode.KeyN, 'n', 'N');\n\t\t\t_registerLetterIfMissing(CharCode.O, ScanCode.KeyO, 'o', 'O');\n\t\t\t_registerLetterIfMissing(CharCode.P, ScanCode.KeyP, 'p', 'P');\n\t\t\t_registerLetterIfMissing(CharCode.Q, ScanCode.KeyQ, 'q', 'Q');\n\t\t\t_registerLetterIfMissing(CharCode.R, ScanCode.KeyR, 'r', 'R');\n\t\t\t_registerLetterIfMissing(CharCode.S, ScanCode.KeyS, 's', 'S');\n\t\t\t_registerLetterIfMissing(CharCode.T, ScanCode.KeyT, 't', 'T');\n\t\t\t_registerLetterIfMissing(CharCode.U, ScanCode.KeyU, 'u', 'U');\n\t\t\t_registerLetterIfMissing(CharCode.V, ScanCode.KeyV, 'v', 'V');\n\t\t\t_registerLetterIfMissing(CharCode.W, ScanCode.KeyW, 'w', 'W');\n\t\t\t_registerLetterIfMissing(CharCode.X, ScanCode.KeyX, 'x', 'X');\n\t\t\t_registerLetterIfMissing(CharCode.Y, ScanCode.KeyY, 'y', 'Y');\n\t\t\t_registerLetterIfMissing(CharCode.Z, ScanCode.KeyZ, 'z', 'Z');\n\t\t}\n\n\t\tlet mappings: IScanCodeMapping[] = [], mappingsLen = 0;\n\t\tfor (let strScanCode in rawMappings) {\n\t\t\tif (rawMappings.hasOwnProperty(strScanCode)) {\n\t\t\t\tconst scanCode = ScanCodeUtils.toEnum(strScanCode);\n\t\t\t\tif (scanCode === ScanCode.None) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (IMMUTABLE_CODE_TO_KEY_CODE[scanCode] !== KeyCode.DependsOnKbLayout) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tthis._codeInfo[scanCode] = rawMappings[strScanCode];\n\n\t\t\t\tconst rawMapping = missingLatinLettersOverride[strScanCode] || rawMappings[strScanCode];\n\t\t\t\tconst value = MacLinuxKeyboardMapper.getCharCode(rawMapping.value);\n\t\t\t\tconst withShift = MacLinuxKeyboardMapper.getCharCode(rawMapping.withShift);\n\t\t\t\tconst withAltGr = MacLinuxKeyboardMapper.getCharCode(rawMapping.withAltGr);\n\t\t\t\tconst withShiftAltGr = MacLinuxKeyboardMapper.getCharCode(rawMapping.withShiftAltGr);\n\n\t\t\t\tconst mapping: IScanCodeMapping = {\n\t\t\t\t\tscanCode: scanCode,\n\t\t\t\t\tvalue: value,\n\t\t\t\t\twithShift: withShift,\n\t\t\t\t\twithAltGr: withAltGr,\n\t\t\t\t\twithShiftAltGr: withShiftAltGr,\n\t\t\t\t};\n\t\t\t\tmappings[mappingsLen++] = mapping;\n\n\t\t\t\tthis._scanCodeToDispatch[scanCode] = `[${ScanCodeUtils.toString(scanCode)}]`;\n\n\t\t\t\tif (value >= CharCode.a && value <= CharCode.z) {\n\t\t\t\t\tconst upperCaseValue = CharCode.A + (value - CharCode.a);\n\t\t\t\t\tthis._scanCodeToLabel[scanCode] = String.fromCharCode(upperCaseValue);\n\t\t\t\t} else if (value >= CharCode.A && value <= CharCode.Z) {\n\t\t\t\t\tthis._scanCodeToLabel[scanCode] = String.fromCharCode(value);\n\t\t\t\t} else if (value) {\n\t\t\t\t\tthis._scanCodeToLabel[scanCode] = String.fromCharCode(value);\n\t\t\t\t} else {\n\t\t\t\t\tthis._scanCodeToLabel[scanCode] = null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Handle all `withShiftAltGr` entries\n\t\tfor (let i = mappings.length - 1; i >= 0; i--) {\n\t\t\tconst mapping = mappings[i];\n\t\t\tconst scanCode = mapping.scanCode;\n\t\t\tconst withShiftAltGr = mapping.withShiftAltGr;\n\t\t\tif (withShiftAltGr === mapping.withAltGr || withShiftAltGr === mapping.withShift || withShiftAltGr === mapping.value) {\n\t\t\t\t// handled below\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst kb = MacLinuxKeyboardMapper._charCodeToKb(withShiftAltGr);\n\t\t\tif (!kb) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst kbShiftKey = kb.shiftKey;\n\t\t\tconst keyCode = kb.keyCode;\n\n\t\t\tif (kbShiftKey) {\n\t\t\t\t// Ctrl+Shift+Alt+ScanCode => Shift+KeyCode\n\t\t\t\t_registerIfUnknown(1, 1, 1, scanCode, 0, 1, 0, keyCode); //       Ctrl+Alt+ScanCode =>          Shift+KeyCode\n\t\t\t} else {\n\t\t\t\t// Ctrl+Shift+Alt+ScanCode => KeyCode\n\t\t\t\t_registerIfUnknown(1, 1, 1, scanCode, 0, 0, 0, keyCode); //       Ctrl+Alt+ScanCode =>                KeyCode\n\t\t\t}\n\t\t}\n\t\t// Handle all `withAltGr` entries\n\t\tfor (let i = mappings.length - 1; i >= 0; i--) {\n\t\t\tconst mapping = mappings[i];\n\t\t\tconst scanCode = mapping.scanCode;\n\t\t\tconst withAltGr = mapping.withAltGr;\n\t\t\tif (withAltGr === mapping.withShift || withAltGr === mapping.value) {\n\t\t\t\t// handled below\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst kb = MacLinuxKeyboardMapper._charCodeToKb(withAltGr);\n\t\t\tif (!kb) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst kbShiftKey = kb.shiftKey;\n\t\t\tconst keyCode = kb.keyCode;\n\n\t\t\tif (kbShiftKey) {\n\t\t\t\t// Ctrl+Alt+ScanCode => Shift+KeyCode\n\t\t\t\t_registerIfUnknown(1, 0, 1, scanCode, 0, 1, 0, keyCode); //       Ctrl+Alt+ScanCode =>          Shift+KeyCode\n\t\t\t} else {\n\t\t\t\t// Ctrl+Alt+ScanCode => KeyCode\n\t\t\t\t_registerIfUnknown(1, 0, 1, scanCode, 0, 0, 0, keyCode); //       Ctrl+Alt+ScanCode =>                KeyCode\n\t\t\t}\n\t\t}\n\t\t// Handle all `withShift` entries\n\t\tfor (let i = mappings.length - 1; i >= 0; i--) {\n\t\t\tconst mapping = mappings[i];\n\t\t\tconst scanCode = mapping.scanCode;\n\t\t\tconst withShift = mapping.withShift;\n\t\t\tif (withShift === mapping.value) {\n\t\t\t\t// handled below\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst kb = MacLinuxKeyboardMapper._charCodeToKb(withShift);\n\t\t\tif (!kb) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst kbShiftKey = kb.shiftKey;\n\t\t\tconst keyCode = kb.keyCode;\n\n\t\t\tif (kbShiftKey) {\n\t\t\t\t// Shift+ScanCode => Shift+KeyCode\n\t\t\t\t_registerIfUnknown(0, 1, 0, scanCode, 0, 1, 0, keyCode); //          Shift+ScanCode =>          Shift+KeyCode\n\t\t\t\t_registerIfUnknown(0, 1, 1, scanCode, 0, 1, 1, keyCode); //      Shift+Alt+ScanCode =>      Shift+Alt+KeyCode\n\t\t\t\t_registerIfUnknown(1, 1, 0, scanCode, 1, 1, 0, keyCode); //     Ctrl+Shift+ScanCode =>     Ctrl+Shift+KeyCode\n\t\t\t\t_registerIfUnknown(1, 1, 1, scanCode, 1, 1, 1, keyCode); // Ctrl+Shift+Alt+ScanCode => Ctrl+Shift+Alt+KeyCode\n\t\t\t} else {\n\t\t\t\t// Shift+ScanCode => KeyCode\n\t\t\t\t_registerIfUnknown(0, 1, 0, scanCode, 0, 0, 0, keyCode); //          Shift+ScanCode =>                KeyCode\n\t\t\t\t_registerIfUnknown(0, 1, 0, scanCode, 0, 1, 0, keyCode); //          Shift+ScanCode =>          Shift+KeyCode\n\t\t\t\t_registerIfUnknown(0, 1, 1, scanCode, 0, 0, 1, keyCode); //      Shift+Alt+ScanCode =>            Alt+KeyCode\n\t\t\t\t_registerIfUnknown(0, 1, 1, scanCode, 0, 1, 1, keyCode); //      Shift+Alt+ScanCode =>      Shift+Alt+KeyCode\n\t\t\t\t_registerIfUnknown(1, 1, 0, scanCode, 1, 0, 0, keyCode); //     Ctrl+Shift+ScanCode =>           Ctrl+KeyCode\n\t\t\t\t_registerIfUnknown(1, 1, 0, scanCode, 1, 1, 0, keyCode); //     Ctrl+Shift+ScanCode =>     Ctrl+Shift+KeyCode\n\t\t\t\t_registerIfUnknown(1, 1, 1, scanCode, 1, 0, 1, keyCode); // Ctrl+Shift+Alt+ScanCode =>       Ctrl+Alt+KeyCode\n\t\t\t\t_registerIfUnknown(1, 1, 1, scanCode, 1, 1, 1, keyCode); // Ctrl+Shift+Alt+ScanCode => Ctrl+Shift+Alt+KeyCode\n\t\t\t}\n\t\t}\n\t\t// Handle all `value` entries\n\t\tfor (let i = mappings.length - 1; i >= 0; i--) {\n\t\t\tconst mapping = mappings[i];\n\t\t\tconst scanCode = mapping.scanCode;\n\t\t\tconst kb = MacLinuxKeyboardMapper._charCodeToKb(mapping.value);\n\t\t\tif (!kb) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst kbShiftKey = kb.shiftKey;\n\t\t\tconst keyCode = kb.keyCode;\n\n\t\t\tif (kbShiftKey) {\n\t\t\t\t// ScanCode => Shift+KeyCode\n\t\t\t\t_registerIfUnknown(0, 0, 0, scanCode, 0, 1, 0, keyCode); //                ScanCode =>          Shift+KeyCode\n\t\t\t\t_registerIfUnknown(0, 0, 1, scanCode, 0, 1, 1, keyCode); //            Alt+ScanCode =>      Shift+Alt+KeyCode\n\t\t\t\t_registerIfUnknown(1, 0, 0, scanCode, 1, 1, 0, keyCode); //           Ctrl+ScanCode =>     Ctrl+Shift+KeyCode\n\t\t\t\t_registerIfUnknown(1, 0, 1, scanCode, 1, 1, 1, keyCode); //       Ctrl+Alt+ScanCode => Ctrl+Shift+Alt+KeyCode\n\t\t\t} else {\n\t\t\t\t// ScanCode => KeyCode\n\t\t\t\t_registerIfUnknown(0, 0, 0, scanCode, 0, 0, 0, keyCode); //                ScanCode =>                KeyCode\n\t\t\t\t_registerIfUnknown(0, 0, 1, scanCode, 0, 0, 1, keyCode); //            Alt+ScanCode =>            Alt+KeyCode\n\t\t\t\t_registerIfUnknown(0, 1, 0, scanCode, 0, 1, 0, keyCode); //          Shift+ScanCode =>          Shift+KeyCode\n\t\t\t\t_registerIfUnknown(0, 1, 1, scanCode, 0, 1, 1, keyCode); //      Shift+Alt+ScanCode =>      Shift+Alt+KeyCode\n\t\t\t\t_registerIfUnknown(1, 0, 0, scanCode, 1, 0, 0, keyCode); //           Ctrl+ScanCode =>           Ctrl+KeyCode\n\t\t\t\t_registerIfUnknown(1, 0, 1, scanCode, 1, 0, 1, keyCode); //       Ctrl+Alt+ScanCode =>       Ctrl+Alt+KeyCode\n\t\t\t\t_registerIfUnknown(1, 1, 0, scanCode, 1, 1, 0, keyCode); //     Ctrl+Shift+ScanCode =>     Ctrl+Shift+KeyCode\n\t\t\t\t_registerIfUnknown(1, 1, 1, scanCode, 1, 1, 1, keyCode); // Ctrl+Shift+Alt+ScanCode => Ctrl+Shift+Alt+KeyCode\n\t\t\t}\n\t\t}\n\t\t// Handle all left-over available digits\n\t\t_registerAllCombos(0, 0, 0, ScanCode.Digit1, KeyCode.KEY_1);\n\t\t_registerAllCombos(0, 0, 0, ScanCode.Digit2, KeyCode.KEY_2);\n\t\t_registerAllCombos(0, 0, 0, ScanCode.Digit3, KeyCode.KEY_3);\n\t\t_registerAllCombos(0, 0, 0, ScanCode.Digit4, KeyCode.KEY_4);\n\t\t_registerAllCombos(0, 0, 0, ScanCode.Digit5, KeyCode.KEY_5);\n\t\t_registerAllCombos(0, 0, 0, ScanCode.Digit6, KeyCode.KEY_6);\n\t\t_registerAllCombos(0, 0, 0, ScanCode.Digit7, KeyCode.KEY_7);\n\t\t_registerAllCombos(0, 0, 0, ScanCode.Digit8, KeyCode.KEY_8);\n\t\t_registerAllCombos(0, 0, 0, ScanCode.Digit9, KeyCode.KEY_9);\n\t\t_registerAllCombos(0, 0, 0, ScanCode.Digit0, KeyCode.KEY_0);\n\n\t\tthis._scanCodeKeyCodeMapper.registrationComplete();\n\t}\n\n\tpublic dumpDebugInfo(): string {\n\t\tlet result: string[] = [];\n\n\t\tlet immutableSamples = [\n\t\t\tScanCode.ArrowUp,\n\t\t\tScanCode.Numpad0\n\t\t];\n\n\t\tlet cnt = 0;\n\t\tresult.push(`isUSStandard: ${this._isUSStandard}`);\n\t\tresult.push(`----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------`);\n\t\tfor (let scanCode = ScanCode.None; scanCode < ScanCode.MAX_VALUE; scanCode++) {\n\t\t\tif (IMMUTABLE_CODE_TO_KEY_CODE[scanCode] !== KeyCode.DependsOnKbLayout) {\n\t\t\t\tif (immutableSamples.indexOf(scanCode) === -1) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (cnt % 4 === 0) {\n\t\t\t\tresult.push(`|       HW Code combination      |  Key  |    KeyCode combination    | Pri |          UI label         |         User settings          |    Electron accelerator   |       Dispatching string       | WYSIWYG |`);\n\t\t\t\tresult.push(`----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------`);\n\t\t\t}\n\t\t\tcnt++;\n\n\t\t\tconst mapping = this._codeInfo[scanCode];\n\n\t\t\tfor (let mod = 0; mod < 8; mod++) {\n\t\t\t\tconst hwCtrlKey = (mod & 0b001) ? true : false;\n\t\t\t\tconst hwShiftKey = (mod & 0b010) ? true : false;\n\t\t\t\tconst hwAltKey = (mod & 0b100) ? true : false;\n\t\t\t\tconst scanCodeCombo = new ScanCodeCombo(hwCtrlKey, hwShiftKey, hwAltKey, scanCode);\n\t\t\t\tconst resolvedKb = this.resolveKeyboardEvent({\n\t\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\t\tctrlKey: scanCodeCombo.ctrlKey,\n\t\t\t\t\tshiftKey: scanCodeCombo.shiftKey,\n\t\t\t\t\taltKey: scanCodeCombo.altKey,\n\t\t\t\t\tmetaKey: false,\n\t\t\t\t\tkeyCode: KeyCode.DependsOnKbLayout,\n\t\t\t\t\tcode: ScanCodeUtils.toString(scanCode)\n\t\t\t\t});\n\n\t\t\t\tconst outScanCodeCombo = scanCodeCombo.toString();\n\t\t\t\tconst outKey = scanCodeCombo.getProducedChar(mapping);\n\t\t\t\tconst ariaLabel = resolvedKb.getAriaLabel();\n\t\t\t\tconst outUILabel = (ariaLabel ? ariaLabel.replace(/Control\\+/, 'Ctrl+') : null);\n\t\t\t\tconst outUserSettings = resolvedKb.getUserSettingsLabel();\n\t\t\t\tconst outElectronAccelerator = resolvedKb.getElectronAccelerator();\n\t\t\t\tconst outDispatchStr = resolvedKb.getDispatchParts()[0];\n\n\t\t\t\tconst isWYSIWYG = (resolvedKb ? resolvedKb.isWYSIWYG() : false);\n\t\t\t\tconst outWYSIWYG = (isWYSIWYG ? '       ' : '   NO  ');\n\n\t\t\t\tconst kbCombos = this._scanCodeKeyCodeMapper.lookupScanCodeCombo(scanCodeCombo);\n\t\t\t\tif (kbCombos.length === 0) {\n\t\t\t\t\tresult.push(`| ${this._leftPad(outScanCodeCombo, 30)} | ${outKey} | ${this._leftPad('', 25)} | ${this._leftPad('', 3)} | ${this._leftPad(outUILabel, 25)} | ${this._leftPad(outUserSettings, 30)} | ${this._leftPad(outElectronAccelerator, 25)} | ${this._leftPad(outDispatchStr, 30)} | ${outWYSIWYG} |`);\n\t\t\t\t} else {\n\t\t\t\t\tfor (let i = 0, len = kbCombos.length; i < len; i++) {\n\t\t\t\t\t\tconst kbCombo = kbCombos[i];\n\t\t\t\t\t\t// find out the priority of this scan code for this key code\n\t\t\t\t\t\tlet colPriority: string;\n\n\t\t\t\t\t\tconst scanCodeCombos = this._scanCodeKeyCodeMapper.lookupKeyCodeCombo(kbCombo);\n\t\t\t\t\t\tif (scanCodeCombos.length === 1) {\n\t\t\t\t\t\t\t// no need for priority, this key code combo maps to precisely this scan code combo\n\t\t\t\t\t\t\tcolPriority = '';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlet priority = -1;\n\t\t\t\t\t\t\tfor (let j = 0; j < scanCodeCombos.length; j++) {\n\t\t\t\t\t\t\t\tif (scanCodeCombos[j].equals(scanCodeCombo)) {\n\t\t\t\t\t\t\t\t\tpriority = j + 1;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcolPriority = String(priority);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst outKeybinding = kbCombo.toString();\n\t\t\t\t\t\tif (i === 0) {\n\t\t\t\t\t\t\tresult.push(`| ${this._leftPad(outScanCodeCombo, 30)} | ${outKey} | ${this._leftPad(outKeybinding, 25)} | ${this._leftPad(colPriority, 3)} | ${this._leftPad(outUILabel, 25)} | ${this._leftPad(outUserSettings, 30)} | ${this._leftPad(outElectronAccelerator, 25)} | ${this._leftPad(outDispatchStr, 30)} | ${outWYSIWYG} |`);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// secondary keybindings\n\t\t\t\t\t\t\tresult.push(`| ${this._leftPad('', 30)} |       | ${this._leftPad(outKeybinding, 25)} | ${this._leftPad(colPriority, 3)} | ${this._leftPad('', 25)} | ${this._leftPad('', 30)} | ${this._leftPad('', 25)} | ${this._leftPad('', 30)} |         |`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tresult.push(`----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------`);\n\t\t}\n\n\t\treturn result.join('\\n');\n\t}\n\n\tprivate _leftPad(str: string | null, cnt: number): string {\n\t\tif (str === null) {\n\t\t\tstr = 'null';\n\t\t}\n\t\twhile (str.length < cnt) {\n\t\t\tstr = ' ' + str;\n\t\t}\n\t\treturn str;\n\t}\n\n\tpublic simpleKeybindingToScanCodeBinding(keybinding: SimpleKeybinding): ScanCodeBinding[] {\n\t\t// Avoid double Enter bindings (both ScanCode.NumpadEnter and ScanCode.Enter point to KeyCode.Enter)\n\t\tif (keybinding.keyCode === KeyCode.Enter) {\n\t\t\treturn [new ScanCodeBinding(keybinding.ctrlKey, keybinding.shiftKey, keybinding.altKey, keybinding.metaKey, ScanCode.Enter)];\n\t\t}\n\n\t\tconst scanCodeCombos = this._scanCodeKeyCodeMapper.lookupKeyCodeCombo(\n\t\t\tnew KeyCodeCombo(keybinding.ctrlKey, keybinding.shiftKey, keybinding.altKey, keybinding.keyCode)\n\t\t);\n\n\t\tlet result: ScanCodeBinding[] = [];\n\t\tfor (let i = 0, len = scanCodeCombos.length; i < len; i++) {\n\t\t\tconst scanCodeCombo = scanCodeCombos[i];\n\t\t\tresult[i] = new ScanCodeBinding(scanCodeCombo.ctrlKey, scanCodeCombo.shiftKey, scanCodeCombo.altKey, keybinding.metaKey, scanCodeCombo.scanCode);\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic getUILabelForScanCodeBinding(binding: ScanCodeBinding | null): string | null {\n\t\tif (!binding) {\n\t\t\treturn null;\n\t\t}\n\t\tif (binding.isDuplicateModifierCase()) {\n\t\t\treturn '';\n\t\t}\n\t\tif (this._OS === OperatingSystem.Macintosh) {\n\t\t\tswitch (binding.scanCode) {\n\t\t\t\tcase ScanCode.ArrowLeft:\n\t\t\t\t\treturn '←';\n\t\t\t\tcase ScanCode.ArrowUp:\n\t\t\t\t\treturn '↑';\n\t\t\t\tcase ScanCode.ArrowRight:\n\t\t\t\t\treturn '→';\n\t\t\t\tcase ScanCode.ArrowDown:\n\t\t\t\t\treturn '↓';\n\t\t\t}\n\t\t}\n\t\treturn this._scanCodeToLabel[binding.scanCode];\n\t}\n\n\tpublic getAriaLabelForScanCodeBinding(binding: ScanCodeBinding | null): string | null {\n\t\tif (!binding) {\n\t\t\treturn null;\n\t\t}\n\t\tif (binding.isDuplicateModifierCase()) {\n\t\t\treturn '';\n\t\t}\n\t\treturn this._scanCodeToLabel[binding.scanCode];\n\t}\n\n\tpublic getDispatchStrForScanCodeBinding(keypress: ScanCodeBinding): string | null {\n\t\tconst codeDispatch = this._scanCodeToDispatch[keypress.scanCode];\n\t\tif (!codeDispatch) {\n\t\t\treturn null;\n\t\t}\n\t\tlet result = '';\n\n\t\tif (keypress.ctrlKey) {\n\t\t\tresult += 'ctrl+';\n\t\t}\n\t\tif (keypress.shiftKey) {\n\t\t\tresult += 'shift+';\n\t\t}\n\t\tif (keypress.altKey) {\n\t\t\tresult += 'alt+';\n\t\t}\n\t\tif (keypress.metaKey) {\n\t\t\tresult += 'meta+';\n\t\t}\n\t\tresult += codeDispatch;\n\n\t\treturn result;\n\t}\n\n\tpublic getUserSettingsLabelForScanCodeBinding(binding: ScanCodeBinding | null): string | null {\n\t\tif (!binding) {\n\t\t\treturn null;\n\t\t}\n\t\tif (binding.isDuplicateModifierCase()) {\n\t\t\treturn '';\n\t\t}\n\n\t\tconst immutableKeyCode = IMMUTABLE_CODE_TO_KEY_CODE[binding.scanCode];\n\t\tif (immutableKeyCode !== KeyCode.DependsOnKbLayout) {\n\t\t\treturn KeyCodeUtils.toUserSettingsUS(immutableKeyCode).toLowerCase();\n\t\t}\n\n\t\t// Check if this scanCode always maps to the same keyCode and back\n\t\tlet constantKeyCode: KeyCode = this._scanCodeKeyCodeMapper.guessStableKeyCode(binding.scanCode);\n\t\tif (constantKeyCode !== KeyCode.DependsOnKbLayout) {\n\t\t\t// Verify that this is a good key code that can be mapped back to the same scan code\n\t\t\tlet reverseBindings = this.simpleKeybindingToScanCodeBinding(new SimpleKeybinding(binding.ctrlKey, binding.shiftKey, binding.altKey, binding.metaKey, constantKeyCode));\n\t\t\tfor (let i = 0, len = reverseBindings.length; i < len; i++) {\n\t\t\t\tconst reverseBinding = reverseBindings[i];\n\t\t\t\tif (reverseBinding.scanCode === binding.scanCode) {\n\t\t\t\t\treturn KeyCodeUtils.toUserSettingsUS(constantKeyCode).toLowerCase();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this._scanCodeToDispatch[binding.scanCode];\n\t}\n\n\tprivate _getElectronLabelForKeyCode(keyCode: KeyCode): string | null {\n\t\tif (keyCode >= KeyCode.NUMPAD_0 && keyCode <= KeyCode.NUMPAD_DIVIDE) {\n\t\t\t// Electron cannot handle numpad keys\n\t\t\treturn null;\n\t\t}\n\n\t\tswitch (keyCode) {\n\t\t\tcase KeyCode.UpArrow:\n\t\t\t\treturn 'Up';\n\t\t\tcase KeyCode.DownArrow:\n\t\t\t\treturn 'Down';\n\t\t\tcase KeyCode.LeftArrow:\n\t\t\t\treturn 'Left';\n\t\t\tcase KeyCode.RightArrow:\n\t\t\t\treturn 'Right';\n\t\t}\n\n\t\t// electron menus always do the correct rendering on Windows\n\t\treturn KeyCodeUtils.toString(keyCode);\n\t}\n\n\tpublic getElectronAcceleratorLabelForScanCodeBinding(binding: ScanCodeBinding | null): string | null {\n\t\tif (!binding) {\n\t\t\treturn null;\n\t\t}\n\t\tif (binding.isDuplicateModifierCase()) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst immutableKeyCode = IMMUTABLE_CODE_TO_KEY_CODE[binding.scanCode];\n\t\tif (immutableKeyCode !== KeyCode.DependsOnKbLayout) {\n\t\t\treturn this._getElectronLabelForKeyCode(immutableKeyCode);\n\t\t}\n\n\t\t// Check if this scanCode always maps to the same keyCode and back\n\t\tconst constantKeyCode: KeyCode = this._scanCodeKeyCodeMapper.guessStableKeyCode(binding.scanCode);\n\n\t\tif (!this._isUSStandard) {\n\t\t\t// Electron cannot handle these key codes on anything else than standard US\n\t\t\tconst isOEMKey = (\n\t\t\t\tconstantKeyCode === KeyCode.US_SEMICOLON\n\t\t\t\t|| constantKeyCode === KeyCode.US_EQUAL\n\t\t\t\t|| constantKeyCode === KeyCode.US_COMMA\n\t\t\t\t|| constantKeyCode === KeyCode.US_MINUS\n\t\t\t\t|| constantKeyCode === KeyCode.US_DOT\n\t\t\t\t|| constantKeyCode === KeyCode.US_SLASH\n\t\t\t\t|| constantKeyCode === KeyCode.US_BACKTICK\n\t\t\t\t|| constantKeyCode === KeyCode.US_OPEN_SQUARE_BRACKET\n\t\t\t\t|| constantKeyCode === KeyCode.US_BACKSLASH\n\t\t\t\t|| constantKeyCode === KeyCode.US_CLOSE_SQUARE_BRACKET\n\t\t\t);\n\n\t\t\tif (isOEMKey) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\t// See https://github.com/microsoft/vscode/issues/108880\n\t\tif (this._OS === OperatingSystem.Macintosh && binding.ctrlKey && !binding.metaKey && !binding.altKey && constantKeyCode === KeyCode.US_MINUS) {\n\t\t\t// ctrl+- and ctrl+shift+- render very similarly in native macOS menus, leading to confusion\n\t\t\treturn null;\n\t\t}\n\n\t\tif (constantKeyCode !== KeyCode.DependsOnKbLayout) {\n\t\t\treturn this._getElectronLabelForKeyCode(constantKeyCode);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic resolveKeybinding(keybinding: Keybinding): NativeResolvedKeybinding[] {\n\t\tlet chordParts: ScanCodeBinding[][] = [];\n\t\tfor (let part of keybinding.parts) {\n\t\t\tchordParts.push(this.simpleKeybindingToScanCodeBinding(part));\n\t\t}\n\t\treturn this._toResolvedKeybinding(chordParts);\n\t}\n\n\tprivate _toResolvedKeybinding(chordParts: ScanCodeBinding[][]): NativeResolvedKeybinding[] {\n\t\tif (chordParts.length === 0) {\n\t\t\treturn [];\n\t\t}\n\t\tlet result: NativeResolvedKeybinding[] = [];\n\t\tthis._generateResolvedKeybindings(chordParts, 0, [], result);\n\t\treturn result;\n\t}\n\n\tprivate _generateResolvedKeybindings(chordParts: ScanCodeBinding[][], currentIndex: number, previousParts: ScanCodeBinding[], result: NativeResolvedKeybinding[]) {\n\t\tconst chordPart = chordParts[currentIndex];\n\t\tconst isFinalIndex = currentIndex === chordParts.length - 1;\n\t\tfor (let i = 0, len = chordPart.length; i < len; i++) {\n\t\t\tlet chords = [...previousParts, chordPart[i]];\n\t\t\tif (isFinalIndex) {\n\t\t\t\tresult.push(new NativeResolvedKeybinding(this, this._OS, chords));\n\t\t\t} else {\n\t\t\t\tthis._generateResolvedKeybindings(chordParts, currentIndex + 1, chords, result);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic resolveKeyboardEvent(keyboardEvent: IKeyboardEvent): NativeResolvedKeybinding {\n\t\tlet code = ScanCodeUtils.toEnum(keyboardEvent.code);\n\n\t\t// Treat NumpadEnter as Enter\n\t\tif (code === ScanCode.NumpadEnter) {\n\t\t\tcode = ScanCode.Enter;\n\t\t}\n\n\t\tconst keyCode = keyboardEvent.keyCode;\n\n\t\tif (\n\t\t\t(keyCode === KeyCode.LeftArrow)\n\t\t\t|| (keyCode === KeyCode.UpArrow)\n\t\t\t|| (keyCode === KeyCode.RightArrow)\n\t\t\t|| (keyCode === KeyCode.DownArrow)\n\t\t\t|| (keyCode === KeyCode.Delete)\n\t\t\t|| (keyCode === KeyCode.Insert)\n\t\t\t|| (keyCode === KeyCode.Home)\n\t\t\t|| (keyCode === KeyCode.End)\n\t\t\t|| (keyCode === KeyCode.PageDown)\n\t\t\t|| (keyCode === KeyCode.PageUp)\n\t\t) {\n\t\t\t// \"Dispatch\" on keyCode for these key codes to workaround issues with remote desktoping software\n\t\t\t// where the scan codes appear to be incorrect (see https://github.com/microsoft/vscode/issues/24107)\n\t\t\tconst immutableScanCode = IMMUTABLE_KEY_CODE_TO_CODE[keyCode];\n\t\t\tif (immutableScanCode !== ScanCode.DependsOnKbLayout) {\n\t\t\t\tcode = immutableScanCode;\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif (\n\t\t\t\t(code === ScanCode.Numpad1)\n\t\t\t\t|| (code === ScanCode.Numpad2)\n\t\t\t\t|| (code === ScanCode.Numpad3)\n\t\t\t\t|| (code === ScanCode.Numpad4)\n\t\t\t\t|| (code === ScanCode.Numpad5)\n\t\t\t\t|| (code === ScanCode.Numpad6)\n\t\t\t\t|| (code === ScanCode.Numpad7)\n\t\t\t\t|| (code === ScanCode.Numpad8)\n\t\t\t\t|| (code === ScanCode.Numpad9)\n\t\t\t\t|| (code === ScanCode.Numpad0)\n\t\t\t\t|| (code === ScanCode.NumpadDecimal)\n\t\t\t) {\n\t\t\t\t// \"Dispatch\" on keyCode for all numpad keys in order for NumLock to work correctly\n\t\t\t\tif (keyCode >= 0) {\n\t\t\t\t\tconst immutableScanCode = IMMUTABLE_KEY_CODE_TO_CODE[keyCode];\n\t\t\t\t\tif (immutableScanCode !== ScanCode.DependsOnKbLayout) {\n\t\t\t\t\t\tcode = immutableScanCode;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst keypress = new ScanCodeBinding(keyboardEvent.ctrlKey, keyboardEvent.shiftKey, keyboardEvent.altKey, keyboardEvent.metaKey, code);\n\t\treturn new NativeResolvedKeybinding(this, this._OS, [keypress]);\n\t}\n\n\tprivate _resolveSimpleUserBinding(binding: SimpleKeybinding | ScanCodeBinding | null): ScanCodeBinding[] {\n\t\tif (!binding) {\n\t\t\treturn [];\n\t\t}\n\t\tif (binding instanceof ScanCodeBinding) {\n\t\t\treturn [binding];\n\t\t}\n\t\treturn this.simpleKeybindingToScanCodeBinding(binding);\n\t}\n\n\tpublic resolveUserBinding(input: (SimpleKeybinding | ScanCodeBinding)[]): ResolvedKeybinding[] {\n\t\tconst parts: ScanCodeBinding[][] = input.map(keybinding => this._resolveSimpleUserBinding(keybinding));\n\t\treturn this._toResolvedKeybinding(parts);\n\t}\n\n\tprivate static _charCodeToKb(charCode: number): { keyCode: KeyCode; shiftKey: boolean } | null {\n\t\tif (charCode < CHAR_CODE_TO_KEY_CODE.length) {\n\t\t\treturn CHAR_CODE_TO_KEY_CODE[charCode];\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Attempt to map a combining character to a regular one that renders the same way.\n\t *\n\t * To the brave person following me: Good Luck!\n\t * https://www.compart.com/en/unicode/bidiclass/NSM\n\t */\n\tpublic static getCharCode(char: string): number {\n\t\tif (char.length === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tconst charCode = char.charCodeAt(0);\n\t\tswitch (charCode) {\n\t\t\tcase CharCode.U_Combining_Grave_Accent: return CharCode.U_GRAVE_ACCENT;\n\t\t\tcase CharCode.U_Combining_Acute_Accent: return CharCode.U_ACUTE_ACCENT;\n\t\t\tcase CharCode.U_Combining_Circumflex_Accent: return CharCode.U_CIRCUMFLEX;\n\t\t\tcase CharCode.U_Combining_Tilde: return CharCode.U_SMALL_TILDE;\n\t\t\tcase CharCode.U_Combining_Macron: return CharCode.U_MACRON;\n\t\t\tcase CharCode.U_Combining_Overline: return CharCode.U_OVERLINE;\n\t\t\tcase CharCode.U_Combining_Breve: return CharCode.U_BREVE;\n\t\t\tcase CharCode.U_Combining_Dot_Above: return CharCode.U_DOT_ABOVE;\n\t\t\tcase CharCode.U_Combining_Diaeresis: return CharCode.U_DIAERESIS;\n\t\t\tcase CharCode.U_Combining_Ring_Above: return CharCode.U_RING_ABOVE;\n\t\t\tcase CharCode.U_Combining_Double_Acute_Accent: return CharCode.U_DOUBLE_ACUTE_ACCENT;\n\t\t}\n\t\treturn charCode;\n\t}\n}\n\n(function () {\n\tfunction define(charCode: number, keyCode: KeyCode, shiftKey: boolean): void {\n\t\tfor (let i = CHAR_CODE_TO_KEY_CODE.length; i < charCode; i++) {\n\t\t\tCHAR_CODE_TO_KEY_CODE[i] = null;\n\t\t}\n\t\tCHAR_CODE_TO_KEY_CODE[charCode] = { keyCode: keyCode, shiftKey: shiftKey };\n\t}\n\n\tfor (let chCode = CharCode.A; chCode <= CharCode.Z; chCode++) {\n\t\tdefine(chCode, KeyCode.KEY_A + (chCode - CharCode.A), true);\n\t}\n\n\tfor (let chCode = CharCode.a; chCode <= CharCode.z; chCode++) {\n\t\tdefine(chCode, KeyCode.KEY_A + (chCode - CharCode.a), false);\n\t}\n\n\tdefine(CharCode.Semicolon, KeyCode.US_SEMICOLON, false);\n\tdefine(CharCode.Colon, KeyCode.US_SEMICOLON, true);\n\n\tdefine(CharCode.Equals, KeyCode.US_EQUAL, false);\n\tdefine(CharCode.Plus, KeyCode.US_EQUAL, true);\n\n\tdefine(CharCode.Comma, KeyCode.US_COMMA, false);\n\tdefine(CharCode.LessThan, KeyCode.US_COMMA, true);\n\n\tdefine(CharCode.Dash, KeyCode.US_MINUS, false);\n\tdefine(CharCode.Underline, KeyCode.US_MINUS, true);\n\n\tdefine(CharCode.Period, KeyCode.US_DOT, false);\n\tdefine(CharCode.GreaterThan, KeyCode.US_DOT, true);\n\n\tdefine(CharCode.Slash, KeyCode.US_SLASH, false);\n\tdefine(CharCode.QuestionMark, KeyCode.US_SLASH, true);\n\n\tdefine(CharCode.BackTick, KeyCode.US_BACKTICK, false);\n\tdefine(CharCode.Tilde, KeyCode.US_BACKTICK, true);\n\n\tdefine(CharCode.OpenSquareBracket, KeyCode.US_OPEN_SQUARE_BRACKET, false);\n\tdefine(CharCode.OpenCurlyBrace, KeyCode.US_OPEN_SQUARE_BRACKET, true);\n\n\tdefine(CharCode.Backslash, KeyCode.US_BACKSLASH, false);\n\tdefine(CharCode.Pipe, KeyCode.US_BACKSLASH, true);\n\n\tdefine(CharCode.CloseSquareBracket, KeyCode.US_CLOSE_SQUARE_BRACKET, false);\n\tdefine(CharCode.CloseCurlyBrace, KeyCode.US_CLOSE_SQUARE_BRACKET, true);\n\n\tdefine(CharCode.SingleQuote, KeyCode.US_QUOTE, false);\n\tdefine(CharCode.DoubleQuote, KeyCode.US_QUOTE, true);\n})();\n"]}