{"version":3,"file":"nativeKeyboardLayout.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/keybinding/electron-sandbox/nativeKeyboardLayout.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IKeyboardLayoutInfo, IKeyboardLayoutService, IKeyboardMapping, ILinuxKeyboardLayoutInfo, IMacKeyboardLayoutInfo, IMacLinuxKeyboardMapping, IWindowsKeyboardLayoutInfo, IWindowsKeyboardMapping, macLinuxKeyboardMappingEquals, windowsKeyboardMappingEquals } from 'vs/platform/keyboardLayout/common/keyboardLayout';\nimport { Emitter } from 'vs/base/common/event';\nimport { OperatingSystem, OS } from 'vs/base/common/platform';\nimport { CachedKeyboardMapper, IKeyboardMapper } from 'vs/platform/keyboardLayout/common/keyboardMapper';\nimport { WindowsKeyboardMapper } from 'vs/workbench/services/keybinding/common/windowsKeyboardMapper';\nimport { MacLinuxFallbackKeyboardMapper } from 'vs/workbench/services/keybinding/common/macLinuxFallbackKeyboardMapper';\nimport { MacLinuxKeyboardMapper } from 'vs/workbench/services/keybinding/common/macLinuxKeyboardMapper';\nimport { DispatchConfig } from 'vs/platform/keyboardLayout/common/dispatchConfig';\nimport { IKeyboardEvent } from 'vs/platform/keybinding/common/keybinding';\nimport { IMainProcessService } from 'vs/platform/ipc/electron-sandbox/services';\nimport { INativeKeyboardLayoutService } from 'vs/platform/keyboardLayout/common/keyboardLayoutService';\nimport { ProxyChannel } from 'vs/base/parts/ipc/common/ipc';\n\nexport class KeyboardLayoutService extends Disposable implements IKeyboardLayoutService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidChangeKeyboardLayout = this._register(new Emitter<void>());\n\treadonly onDidChangeKeyboardLayout = this._onDidChangeKeyboardLayout.event;\n\n\tprivate readonly _keyboardLayoutService: INativeKeyboardLayoutService;\n\tprivate _initPromise: Promise<void> | null;\n\tprivate _keyboardMapping: IKeyboardMapping | null;\n\tprivate _keyboardLayoutInfo: IKeyboardLayoutInfo | null;\n\tprivate _keyboardMapper: IKeyboardMapper;\n\n\tconstructor(\n\t\t@IMainProcessService mainProcessService: IMainProcessService\n\t) {\n\t\tsuper();\n\t\tthis._keyboardLayoutService = ProxyChannel.toService<INativeKeyboardLayoutService>(mainProcessService.getChannel('keyboardLayout'));\n\t\tthis._initPromise = null;\n\t\tthis._keyboardMapping = null;\n\t\tthis._keyboardLayoutInfo = null;\n\t\tthis._keyboardMapper = new MacLinuxFallbackKeyboardMapper(OS);\n\n\t\tthis._register(this._keyboardLayoutService.onDidChangeKeyboardLayout(async ({ keyboardLayoutInfo, keyboardMapping }) => {\n\t\t\tawait this.initialize();\n\t\t\tif (keyboardMappingEquals(this._keyboardMapping, keyboardMapping)) {\n\t\t\t\t// the mappings are equal\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._keyboardMapping = keyboardMapping;\n\t\t\tthis._keyboardLayoutInfo = keyboardLayoutInfo;\n\t\t\tthis._keyboardMapper = new CachedKeyboardMapper(createKeyboardMapper(this._keyboardLayoutInfo, this._keyboardMapping));\n\t\t\tthis._onDidChangeKeyboardLayout.fire();\n\t\t}));\n\t}\n\n\tpublic initialize(): Promise<void> {\n\t\tif (!this._initPromise) {\n\t\t\tthis._initPromise = this._doInitialize();\n\t\t}\n\t\treturn this._initPromise;\n\t}\n\n\tprivate async _doInitialize(): Promise<void> {\n\t\tconst keyboardLayoutData = await this._keyboardLayoutService.getKeyboardLayoutData();\n\t\tconst { keyboardLayoutInfo, keyboardMapping } = keyboardLayoutData;\n\t\tthis._keyboardMapping = keyboardMapping;\n\t\tthis._keyboardLayoutInfo = keyboardLayoutInfo;\n\t\tthis._keyboardMapper = new CachedKeyboardMapper(createKeyboardMapper(this._keyboardLayoutInfo, this._keyboardMapping));\n\t}\n\n\tpublic getRawKeyboardMapping(): IKeyboardMapping | null {\n\t\treturn this._keyboardMapping;\n\t}\n\n\tpublic getCurrentKeyboardLayout(): IKeyboardLayoutInfo | null {\n\t\treturn this._keyboardLayoutInfo;\n\t}\n\n\tpublic getAllKeyboardLayouts(): IKeyboardLayoutInfo[] {\n\t\treturn [];\n\t}\n\n\tpublic getKeyboardMapper(dispatchConfig: DispatchConfig): IKeyboardMapper {\n\t\tif (dispatchConfig === DispatchConfig.KeyCode) {\n\t\t\t// Forcefully set to use keyCode\n\t\t\treturn new MacLinuxFallbackKeyboardMapper(OS);\n\t\t}\n\t\treturn this._keyboardMapper;\n\t}\n\n\tpublic validateCurrentKeyboardMapping(keyboardEvent: IKeyboardEvent): void {\n\t\treturn;\n\t}\n}\n\nfunction keyboardMappingEquals(a: IKeyboardMapping | null, b: IKeyboardMapping | null): boolean {\n\tif (OS === OperatingSystem.Windows) {\n\t\treturn windowsKeyboardMappingEquals(<IWindowsKeyboardMapping | null>a, <IWindowsKeyboardMapping | null>b);\n\t}\n\n\treturn macLinuxKeyboardMappingEquals(<IMacLinuxKeyboardMapping | null>a, <IMacLinuxKeyboardMapping | null>b);\n}\n\nfunction createKeyboardMapper(layoutInfo: IKeyboardLayoutInfo | null, rawMapping: IKeyboardMapping | null): IKeyboardMapper {\n\tconst _isUSStandard = isUSStandard(layoutInfo);\n\tif (OS === OperatingSystem.Windows) {\n\t\treturn new WindowsKeyboardMapper(_isUSStandard, <IWindowsKeyboardMapping>rawMapping);\n\t}\n\n\tif (!rawMapping || Object.keys(rawMapping).length === 0) {\n\t\t// Looks like reading the mappings failed (most likely Mac + Japanese/Chinese keyboard layouts)\n\t\treturn new MacLinuxFallbackKeyboardMapper(OS);\n\t}\n\n\tif (OS === OperatingSystem.Macintosh) {\n\t\tconst kbInfo = <IMacKeyboardLayoutInfo>layoutInfo;\n\t\tif (kbInfo.id === 'com.apple.keylayout.DVORAK-QWERTYCMD') {\n\t\t\t// Use keyCode based dispatching for DVORAK - QWERTY âŒ˜\n\t\t\treturn new MacLinuxFallbackKeyboardMapper(OS);\n\t\t}\n\t}\n\n\treturn new MacLinuxKeyboardMapper(_isUSStandard, <IMacLinuxKeyboardMapping>rawMapping, OS);\n}\n\nfunction isUSStandard(_kbInfo: IKeyboardLayoutInfo | null): boolean {\n\tif (OS === OperatingSystem.Linux) {\n\t\tconst kbInfo = <ILinuxKeyboardLayoutInfo>_kbInfo;\n\t\treturn (kbInfo && (kbInfo.layout === 'us' || /^us,/.test(kbInfo.layout)));\n\t}\n\n\tif (OS === OperatingSystem.Macintosh) {\n\t\tconst kbInfo = <IMacKeyboardLayoutInfo>_kbInfo;\n\t\treturn (kbInfo && kbInfo.id === 'com.apple.keylayout.US');\n\t}\n\n\tif (OS === OperatingSystem.Windows) {\n\t\tconst kbInfo = <IWindowsKeyboardLayoutInfo>_kbInfo;\n\t\treturn (kbInfo && kbInfo.name === '00000409');\n\t}\n\n\treturn false;\n}\n"]}