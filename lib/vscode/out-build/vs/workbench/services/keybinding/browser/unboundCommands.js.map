{"version":3,"file":"unboundCommands.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/keybinding/browser/unboundCommands.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAOhG,SAAgB,qBAAqB,CAAC,aAAmC;QACxE,MAAM,eAAe,GAAa,EAAE,CAAC;QACrC,MAAM,OAAO,GAAyB,IAAI,GAAG,EAAmB,CAAC;QACjE,MAAM,UAAU,GAAG,CAAC,EAAU,EAAE,sBAA+B,EAAE,EAAE;YAClE,IAAI,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;gBACpB,OAAO;aACP;YACD,OAAO,CAAC,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;YACtB,IAAI,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,EAAE,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,EAAE,kBAAkB;gBACrE,OAAO;aACP;YACD,IAAI,aAAa,CAAC,GAAG,CAAC,EAAE,CAAC,KAAK,IAAI,EAAE;gBACnC,OAAO;aACP;YACD,IAAI,CAAC,sBAAsB,EAAE;gBAC5B,MAAM,OAAO,GAAG,2BAAgB,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;gBAChD,IAAI,OAAO,IAAI,OAAO,OAAO,CAAC,WAAW,KAAK,QAAQ;uBAClD,CAAA,GAAA,wBAAe,CAAA,CAA8B,OAAO,CAAC,WAAY,CAAC,IAAI,CAAC,EAAE,EAAE,oBAAoB;oBAClG,OAAO;iBACP;aACD;YACD,eAAe,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC1B,CAAC,CAAC;QAEF,wCAAwC;QACxC,KAAK,MAAM,QAAQ,IAAI,sBAAY,CAAC,YAAY,CAAC,gBAAM,CAAC,cAAc,CAAC,EAAE;YACxE,IAAI,CAAA,GAAA,qBAAW,CAAA,CAAC,QAAQ,CAAC,EAAE;gBAC1B,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;aACtC;SACD;QAED,yBAAyB;QACzB,KAAK,MAAM,YAAY,IAAI,2CAAwB,CAAC,gBAAgB,EAAE,EAAE;YACvE,UAAU,CAAC,YAAY,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;SAClC;QAED,KAAK,MAAM,EAAE,IAAI,2BAAgB,CAAC,WAAW,EAAE,CAAC,IAAI,EAAE,EAAE;YACvD,UAAU,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;SACtB;QAED,OAAO,eAAe,CAAC;IACxB,CAAC;IAzCD,sDAyCC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CommandsRegistry, ICommandHandlerDescription } from 'vs/platform/commands/common/commands';\nimport { isNonEmptyArray } from 'vs/base/common/arrays';\nimport { EditorExtensionsRegistry } from 'vs/editor/browser/editorExtensions';\nimport { MenuRegistry, MenuId, isIMenuItem } from 'vs/platform/actions/common/actions';\n\nexport function getAllUnboundCommands(boundCommands: Map<string, boolean>): string[] {\n\tconst unboundCommands: string[] = [];\n\tconst seenMap: Map<string, boolean> = new Map<string, boolean>();\n\tconst addCommand = (id: string, includeCommandWithArgs: boolean) => {\n\t\tif (seenMap.has(id)) {\n\t\t\treturn;\n\t\t}\n\t\tseenMap.set(id, true);\n\t\tif (id[0] === '_' || id.indexOf('vscode.') === 0) { // private command\n\t\t\treturn;\n\t\t}\n\t\tif (boundCommands.get(id) === true) {\n\t\t\treturn;\n\t\t}\n\t\tif (!includeCommandWithArgs) {\n\t\t\tconst command = CommandsRegistry.getCommand(id);\n\t\t\tif (command && typeof command.description === 'object'\n\t\t\t\t&& isNonEmptyArray((<ICommandHandlerDescription>command.description).args)) { // command with args\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tunboundCommands.push(id);\n\t};\n\n\t// Add all commands from Command Palette\n\tfor (const menuItem of MenuRegistry.getMenuItems(MenuId.CommandPalette)) {\n\t\tif (isIMenuItem(menuItem)) {\n\t\t\taddCommand(menuItem.command.id, true);\n\t\t}\n\t}\n\n\t// Add all editor actions\n\tfor (const editorAction of EditorExtensionsRegistry.getEditorActions()) {\n\t\taddCommand(editorAction.id, true);\n\t}\n\n\tfor (const id of CommandsRegistry.getCommands().keys()) {\n\t\taddCommand(id, false);\n\t}\n\n\treturn unboundCommands;\n}\n"]}