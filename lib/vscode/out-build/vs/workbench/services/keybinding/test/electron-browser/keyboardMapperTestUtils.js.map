{"version":3,"file":"keyboardMapperTestUtils.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/keybinding/test/electron-browser/keyboardMapperTestUtils.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport * as path from 'vs/base/common/path';\nimport { promises } from 'fs';\nimport { getPathFromAmdModule } from 'vs/base/test/node/testUtils';\nimport { Keybinding, ResolvedKeybinding, SimpleKeybinding } from 'vs/base/common/keyCodes';\nimport { ScanCodeBinding } from 'vs/base/common/scanCode';\nimport { writeFile } from 'vs/base/node/pfs';\nimport { IKeyboardEvent } from 'vs/platform/keybinding/common/keybinding';\nimport { IKeyboardMapper } from 'vs/platform/keyboardLayout/common/keyboardMapper';\n\nexport interface IResolvedKeybinding {\n\tlabel: string | null;\n\tariaLabel: string | null;\n\telectronAccelerator: string | null;\n\tuserSettingsLabel: string | null;\n\tisWYSIWYG: boolean;\n\tisChord: boolean;\n\tdispatchParts: (string | null)[];\n\tsingleModifierDispatchParts: (string | null)[];\n}\n\nfunction toIResolvedKeybinding(kb: ResolvedKeybinding): IResolvedKeybinding {\n\treturn {\n\t\tlabel: kb.getLabel(),\n\t\tariaLabel: kb.getAriaLabel(),\n\t\telectronAccelerator: kb.getElectronAccelerator(),\n\t\tuserSettingsLabel: kb.getUserSettingsLabel(),\n\t\tisWYSIWYG: kb.isWYSIWYG(),\n\t\tisChord: kb.isChord(),\n\t\tdispatchParts: kb.getDispatchParts(),\n\t\tsingleModifierDispatchParts: kb.getSingleModifierDispatchParts()\n\t};\n}\n\nexport function assertResolveKeybinding(mapper: IKeyboardMapper, keybinding: Keybinding | null, expected: IResolvedKeybinding[]): void {\n\tlet actual: IResolvedKeybinding[] = mapper.resolveKeybinding(keybinding!).map(toIResolvedKeybinding);\n\tassert.deepStrictEqual(actual, expected);\n}\n\nexport function assertResolveKeyboardEvent(mapper: IKeyboardMapper, keyboardEvent: IKeyboardEvent, expected: IResolvedKeybinding): void {\n\tlet actual = toIResolvedKeybinding(mapper.resolveKeyboardEvent(keyboardEvent));\n\tassert.deepStrictEqual(actual, expected);\n}\n\nexport function assertResolveUserBinding(mapper: IKeyboardMapper, parts: (SimpleKeybinding | ScanCodeBinding)[], expected: IResolvedKeybinding[]): void {\n\tlet actual: IResolvedKeybinding[] = mapper.resolveUserBinding(parts).map(toIResolvedKeybinding);\n\tassert.deepStrictEqual(actual, expected);\n}\n\nexport function readRawMapping<T>(file: string): Promise<T> {\n\treturn promises.readFile(getPathFromAmdModule(require, `vs/workbench/services/keybinding/test/electron-browser/${file}.js`)).then((buff) => {\n\t\tlet contents = buff.toString();\n\t\tlet func = new Function('define', contents);\n\t\tlet rawMappings: T | null = null;\n\t\tfunc(function (value: T) {\n\t\t\trawMappings = value;\n\t\t});\n\t\treturn rawMappings!;\n\t});\n}\n\nexport function assertMapping(writeFileIfDifferent: boolean, mapper: IKeyboardMapper, file: string): Promise<void> {\n\tconst filePath = path.normalize(getPathFromAmdModule(require, `vs/workbench/services/keybinding/test/electron-browser/${file}`));\n\n\treturn promises.readFile(filePath).then((buff) => {\n\t\tconst expected = buff.toString().replace(/\\r\\n/g, '\\n');\n\t\tconst actual = mapper.dumpDebugInfo().replace(/\\r\\n/g, '\\n');\n\t\tif (actual !== expected && writeFileIfDifferent) {\n\t\t\tconst destPath = filePath.replace(/vscode[\\/\\\\]out[\\/\\\\]vs/, 'vscode/src/vs');\n\t\t\twriteFile(destPath, actual);\n\t\t}\n\t\tassert.deepStrictEqual(actual, expected);\n\t});\n}\n"]}