{"version":3,"file":"keybindingIO.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/keybinding/test/browser/keybindingIO.test.ts"],"names":[],"mappings":";;;IAaA,KAAK,CAAC,cAAc,EAAE,GAAG,EAAE;QAE1B,IAAI,CAAC,uBAAuB,EAAE,GAAG,EAAE;YAElC,SAAS,oBAAoB,CAAC,UAAkB,EAAE,QAAgB,EAAE,GAAW,EAAE,EAAmB;gBACnG,IAAI,0BAA0B,GAAG,IAAI,uDAA0B,CAAC,CAAA,GAAA,2BAAgB,CAAA,CAAC,UAAU,EAAE,EAAE,CAAE,EAAE,EAAE,CAAC,CAAC;gBACvG,IAAI,gBAAgB,GAAG,0BAA0B,CAAC,oBAAoB,EAAE,CAAC;gBACzE,MAAM,CAAC,WAAW,CAAC,gBAAgB,EAAE,QAAQ,EAAE,QAAQ,GAAG,KAAK,GAAG,GAAG,CAAC,CAAC;YACxE,CAAC;YACD,SAAS,iBAAiB,CAAC,UAAkB,EAAE,WAAmB,EAAE,WAAmB,EAAE,aAAqB;gBAC7G,oBAAoB,CAAC,UAAU,EAAE,WAAW,EAAE,KAAK,kBAA0B,CAAC;gBAC9E,oBAAoB,CAAC,UAAU,EAAE,WAAW,EAAE,KAAK,oBAA4B,CAAC;gBAChF,oBAAoB,CAAC,UAAU,EAAE,aAAa,EAAE,OAAO,gBAAwB,CAAC;YACjF,CAAC;YAED,SAAS,sBAAsB,CAAC,UAAkB,EAAE,SAAiB,EAAE,GAAW,EAAE,EAAmB;gBACtG,IAAI,kBAAkB,GAAG,mCAAgB,CAAC,eAAe,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;gBAC1E,IAAI,QAAQ,GAAG,CAAA,GAAA,2BAAgB,CAAA,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;gBAC/C,MAAM,CAAC,eAAe,CAAC,kBAAkB,EAAE,QAAQ,EAAE,UAAU,GAAG,KAAK,GAAG,GAAG,CAAC,CAAC;YAChF,CAAC;YACD,SAAS,mBAAmB,CAAC,KAAa,EAAE,KAAa,EAAE,OAAe,EAAE,QAAgB;gBAC3F,sBAAsB,CAAC,KAAK,EAAE,QAAQ,EAAE,KAAK,kBAA0B,CAAC;gBACxE,sBAAsB,CAAC,KAAK,EAAE,QAAQ,EAAE,KAAK,oBAA4B,CAAC;gBAC1E,sBAAsB,CAAC,OAAO,EAAE,QAAQ,EAAE,OAAO,gBAAwB,CAAC;YAC3E,CAAC;YAED,SAAS,aAAa,CAAC,UAAkB,EAAE,WAAmB,EAAE,WAAmB,EAAE,aAAqB;gBACzG,iBAAiB,CAAC,UAAU,EAAE,WAAW,EAAE,WAAW,EAAE,aAAa,CAAC,CAAC;gBACvE,mBAAmB,CAAC,WAAW,EAAE,WAAW,EAAE,aAAa,EAAE,UAAU,CAAC,CAAC;YAC1E,CAAC;YAED,aAAa,iBAAgB,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;YAC5C,aAAa,iBAAgB,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;YAC5C,aAAa,mBAAkB,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;YACjD,aAAa,sBAAqB,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;YAC7D,aAAa,qBAAoB,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;YACzD,aAAa,qBAAoB,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;YAEzD,eAAe;YACf,aAAa,CAAC,8BAA0B,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;YACrE,aAAa,CAAC,mCAA8B,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;YAC3E,aAAa,CAAC,iCAA4B,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;YAC7E,aAAa,CAAC,kCAA8B,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;YAE3E,gBAAgB;YAChB,aAAa,CAAC,kCAA2B,iBAAgB,EAAE,YAAY,EAAE,WAAW,EAAE,YAAY,CAAC,CAAC;YACpG,aAAa,CAAC,qCAA6B,iBAAgB,EAAE,cAAc,EAAE,aAAa,EAAE,cAAc,CAAC,CAAC;YAC5G,aAAa,CAAC,sCAA+B,iBAAgB,EAAE,YAAY,EAAE,YAAY,EAAE,aAAa,CAAC,CAAC;YAC1G,aAAa,CAAC,gCAAyB,iBAAgB,EAAE,aAAa,EAAE,aAAa,EAAE,aAAa,CAAC,CAAC;YACtG,aAAa,CAAC,oCAA6B,iBAAgB,EAAE,aAAa,EAAE,cAAc,EAAE,cAAc,CAAC,CAAC;YAC5G,aAAa,CAAC,iCAA2B,iBAAgB,EAAE,WAAW,EAAE,YAAY,EAAE,YAAY,CAAC,CAAC;YAEpG,kBAAkB;YAClB,aAAa,CAAC,qCAA6B,gBAAa,iBAAgB,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,kBAAkB,CAAC,CAAC;YACrI,aAAa,CAAC,qCAA6B,oBAAiB,iBAAgB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,mBAAmB,CAAC,CAAC;YAC3I,aAAa,CAAC,gCAAyB,oBAAiB,iBAAgB,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,CAAC;YAErI,gBAAgB;YAChB,aAAa,CAAC,qCAA6B,gBAAa,oBAAiB,iBAAgB,EAAE,sBAAsB,EAAE,sBAAsB,EAAE,uBAAuB,CAAC,CAAC;YAEpK,SAAS;YACT,aAAa,CAAC,CAAA,GAAA,mBAAQ,CAAA,CAAC,mCAA8B,EAAE,mCAA8B,CAAC,EAAE,eAAe,EAAE,aAAa,EAAE,eAAe,CAAC,CAAC;YACzI,aAAa,CAAC,CAAA,GAAA,mBAAQ,CAAA,CAAC,qCAAgC,EAAE,qCAAgC,CAAC,EAAE,iBAAiB,EAAE,eAAe,EAAE,iBAAiB,CAAC,CAAC;YAEnJ,WAAW;YACX,aAAa,wBAAuB,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;YACnD,aAAa,oBAAmB,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;YAC/C,aAAa,oBAAmB,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;YAC/C,aAAa,oBAAmB,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;YAC/C,aAAa,kBAAiB,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;YAC7C,aAAa,oBAAmB,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;YAC/C,aAAa,uBAAsB,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;YAClD,aAAa,oBAAkB,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;YAChE,aAAa,oBAAkB,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;YAChE,aAAa,kCAAiC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;YAC7D,aAAa,wBAAuB,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;YACtD,aAAa,mCAAkC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;YAC9D,aAAa,oBAAmB,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;YAClD,aAAa,iBAAgB,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;YACxD,aAAa,mBAAkB,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;YAEhE,cAAc;YACd,mBAAmB,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,wBAAuB,CAAC;YACrE,mBAAmB,CAAC,UAAU,EAAE,UAAU,EAAE,UAAU,oBAAmB,CAAC;YAC1E,mBAAmB,CAAC,WAAW,EAAE,WAAW,EAAE,WAAW,oBAAmB,CAAC;YAC7E,mBAAmB,CAAC,WAAW,EAAE,WAAW,EAAE,WAAW,oBAAmB,CAAC;YAC7E,mBAAmB,CAAC,YAAY,EAAE,YAAY,EAAE,YAAY,kBAAiB,CAAC;YAC9E,mBAAmB,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,oBAAmB,CAAC;YACjE,mBAAmB,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,uBAAsB,CAAC;YACpE,mBAAmB,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,oBAAkB,CAAC;YACtE,mBAAmB,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,oBAAkB,CAAC;YACtE,mBAAmB,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,kCAAiC,CAAC;YAC/E,mBAAmB,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,wBAAuB,CAAC;YACrE,mBAAmB,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,mCAAkC,CAAC;YAChF,mBAAmB,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,oBAAmB,CAAC;YACjE,mBAAmB,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,iBAAgB,CAAC;YAC9D,mBAAmB,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,mBAAkB,CAAC;YAEtE,2BAA2B;YAC3B,mBAAmB,CAAC,sBAAsB,EAAE,sBAAsB,EAAE,uBAAuB,EAAE,qCAA6B,gBAAa,oBAAiB,iBAAgB,CAAC,CAAC;YAE1K,yBAAyB;YACzB,mBAAmB,CAAC,wBAAwB,EAAE,wBAAwB,EAAE,yBAAyB,EAAE,qCAA6B,gBAAa,oBAAiB,iBAAgB,CAAC,CAAC;QACjL,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,wBAAwB,EAAE,GAAG,EAAE;YACnC,MAAM,CAAC,eAAe,CACrB,mCAAgB,CAAC,gBAAgB,CAAC,2BAA2B,CAAC,EAC9D,CAAC,IAAI,0BAAe,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,iBAAiB,EAAE,IAAI,2BAAgB,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,oBAAmB,CAAC,CAClI,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,gCAAgC,EAAE,GAAG,EAAE;YAC3C,IAAI,OAAO,GAAG,6EAA6E,CAAC;YAC5F,IAAI,cAAc,GAA4B,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;YACrE,IAAI,cAAc,GAAG,2BAAY,CAAC,sBAAsB,CAAC,cAAc,CAAC,CAAC;YACzE,MAAM,CAAC,WAAW,CAAC,cAAc,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,6BAA6B,EAAE,GAAG,EAAE;YACxC,IAAI,OAAO,GAAG,qEAAqE,CAAC;YACpF,IAAI,cAAc,GAA4B,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;YACrE,IAAI,cAAc,GAAG,2BAAY,CAAC,sBAAsB,CAAC,cAAc,CAAC,CAAC;YACzE,MAAM,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,4BAA4B,EAAE,GAAG,EAAE;YACvC,IAAI,OAAO,GAAG,4CAA4C,CAAC;YAC3D,IAAI,cAAc,GAA4B,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;YACrE,IAAI,cAAc,GAAG,2BAAY,CAAC,sBAAsB,CAAC,cAAc,CAAC,CAAC;YACzE,MAAM,CAAC,eAAe,CAAC,cAAc,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,8BAA8B,EAAE,GAAG,EAAE;YACzC,IAAI,OAAO,GAAG,4CAA4C,CAAC;YAC3D,IAAI,cAAc,GAA4B,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;YACrE,IAAI,cAAc,GAAG,2BAAY,CAAC,sBAAsB,CAAC,cAAc,CAAC,CAAC;YACzE,MAAM,CAAC,eAAe,CAAC,cAAc,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,oBAAoB,EAAE,GAAG,EAAE;YAC/B,IAAI,OAAO,GAAG,oGAAoG,CAAC;YACnH,IAAI,cAAc,GAA4B,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;YACrE,IAAI,cAAc,GAAG,2BAAY,CAAC,sBAAsB,CAAC,cAAc,CAAC,CAAC;YACzE,MAAM,CAAC,WAAW,CAAC,cAAc,CAAC,WAAW,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QAChE,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as assert from 'assert';\nimport { KeyChord, KeyCode, KeyMod, SimpleKeybinding, createKeybinding } from 'vs/base/common/keyCodes';\nimport { KeybindingParser } from 'vs/base/common/keybindingParser';\nimport { OperatingSystem } from 'vs/base/common/platform';\nimport { ScanCode, ScanCodeBinding } from 'vs/base/common/scanCode';\nimport { IUserFriendlyKeybinding } from 'vs/platform/keybinding/common/keybinding';\nimport { USLayoutResolvedKeybinding } from 'vs/platform/keybinding/common/usLayoutResolvedKeybinding';\nimport { KeybindingIO } from 'vs/workbench/services/keybinding/common/keybindingIO';\n\nsuite('keybindingIO', () => {\n\n\ttest('serialize/deserialize', () => {\n\n\t\tfunction testOneSerialization(keybinding: number, expected: string, msg: string, OS: OperatingSystem): void {\n\t\t\tlet usLayoutResolvedKeybinding = new USLayoutResolvedKeybinding(createKeybinding(keybinding, OS)!, OS);\n\t\t\tlet actualSerialized = usLayoutResolvedKeybinding.getUserSettingsLabel();\n\t\t\tassert.strictEqual(actualSerialized, expected, expected + ' - ' + msg);\n\t\t}\n\t\tfunction testSerialization(keybinding: number, expectedWin: string, expectedMac: string, expectedLinux: string): void {\n\t\t\ttestOneSerialization(keybinding, expectedWin, 'win', OperatingSystem.Windows);\n\t\t\ttestOneSerialization(keybinding, expectedMac, 'mac', OperatingSystem.Macintosh);\n\t\t\ttestOneSerialization(keybinding, expectedLinux, 'linux', OperatingSystem.Linux);\n\t\t}\n\n\t\tfunction testOneDeserialization(keybinding: string, _expected: number, msg: string, OS: OperatingSystem): void {\n\t\t\tlet actualDeserialized = KeybindingParser.parseKeybinding(keybinding, OS);\n\t\t\tlet expected = createKeybinding(_expected, OS);\n\t\t\tassert.deepStrictEqual(actualDeserialized, expected, keybinding + ' - ' + msg);\n\t\t}\n\t\tfunction testDeserialization(inWin: string, inMac: string, inLinux: string, expected: number): void {\n\t\t\ttestOneDeserialization(inWin, expected, 'win', OperatingSystem.Windows);\n\t\t\ttestOneDeserialization(inMac, expected, 'mac', OperatingSystem.Macintosh);\n\t\t\ttestOneDeserialization(inLinux, expected, 'linux', OperatingSystem.Linux);\n\t\t}\n\n\t\tfunction testRoundtrip(keybinding: number, expectedWin: string, expectedMac: string, expectedLinux: string): void {\n\t\t\ttestSerialization(keybinding, expectedWin, expectedMac, expectedLinux);\n\t\t\ttestDeserialization(expectedWin, expectedMac, expectedLinux, keybinding);\n\t\t}\n\n\t\ttestRoundtrip(KeyCode.KEY_0, '0', '0', '0');\n\t\ttestRoundtrip(KeyCode.KEY_A, 'a', 'a', 'a');\n\t\ttestRoundtrip(KeyCode.UpArrow, 'up', 'up', 'up');\n\t\ttestRoundtrip(KeyCode.RightArrow, 'right', 'right', 'right');\n\t\ttestRoundtrip(KeyCode.DownArrow, 'down', 'down', 'down');\n\t\ttestRoundtrip(KeyCode.LeftArrow, 'left', 'left', 'left');\n\n\t\t// one modifier\n\t\ttestRoundtrip(KeyMod.Alt | KeyCode.KEY_A, 'alt+a', 'alt+a', 'alt+a');\n\t\ttestRoundtrip(KeyMod.CtrlCmd | KeyCode.KEY_A, 'ctrl+a', 'cmd+a', 'ctrl+a');\n\t\ttestRoundtrip(KeyMod.Shift | KeyCode.KEY_A, 'shift+a', 'shift+a', 'shift+a');\n\t\ttestRoundtrip(KeyMod.WinCtrl | KeyCode.KEY_A, 'win+a', 'ctrl+a', 'meta+a');\n\n\t\t// two modifiers\n\t\ttestRoundtrip(KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KEY_A, 'ctrl+alt+a', 'alt+cmd+a', 'ctrl+alt+a');\n\t\ttestRoundtrip(KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_A, 'ctrl+shift+a', 'shift+cmd+a', 'ctrl+shift+a');\n\t\ttestRoundtrip(KeyMod.CtrlCmd | KeyMod.WinCtrl | KeyCode.KEY_A, 'ctrl+win+a', 'ctrl+cmd+a', 'ctrl+meta+a');\n\t\ttestRoundtrip(KeyMod.Shift | KeyMod.Alt | KeyCode.KEY_A, 'shift+alt+a', 'shift+alt+a', 'shift+alt+a');\n\t\ttestRoundtrip(KeyMod.Shift | KeyMod.WinCtrl | KeyCode.KEY_A, 'shift+win+a', 'ctrl+shift+a', 'shift+meta+a');\n\t\ttestRoundtrip(KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KEY_A, 'alt+win+a', 'ctrl+alt+a', 'alt+meta+a');\n\n\t\t// three modifiers\n\t\ttestRoundtrip(KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyCode.KEY_A, 'ctrl+shift+alt+a', 'shift+alt+cmd+a', 'ctrl+shift+alt+a');\n\t\ttestRoundtrip(KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.WinCtrl | KeyCode.KEY_A, 'ctrl+shift+win+a', 'ctrl+shift+cmd+a', 'ctrl+shift+meta+a');\n\t\ttestRoundtrip(KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KEY_A, 'shift+alt+win+a', 'ctrl+shift+alt+a', 'shift+alt+meta+a');\n\n\t\t// all modifiers\n\t\ttestRoundtrip(KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KEY_A, 'ctrl+shift+alt+win+a', 'ctrl+shift+alt+cmd+a', 'ctrl+shift+alt+meta+a');\n\n\t\t// chords\n\t\ttestRoundtrip(KeyChord(KeyMod.CtrlCmd | KeyCode.KEY_A, KeyMod.CtrlCmd | KeyCode.KEY_A), 'ctrl+a ctrl+a', 'cmd+a cmd+a', 'ctrl+a ctrl+a');\n\t\ttestRoundtrip(KeyChord(KeyMod.CtrlCmd | KeyCode.UpArrow, KeyMod.CtrlCmd | KeyCode.UpArrow), 'ctrl+up ctrl+up', 'cmd+up cmd+up', 'ctrl+up ctrl+up');\n\n\t\t// OEM keys\n\t\ttestRoundtrip(KeyCode.US_SEMICOLON, ';', ';', ';');\n\t\ttestRoundtrip(KeyCode.US_EQUAL, '=', '=', '=');\n\t\ttestRoundtrip(KeyCode.US_COMMA, ',', ',', ',');\n\t\ttestRoundtrip(KeyCode.US_MINUS, '-', '-', '-');\n\t\ttestRoundtrip(KeyCode.US_DOT, '.', '.', '.');\n\t\ttestRoundtrip(KeyCode.US_SLASH, '/', '/', '/');\n\t\ttestRoundtrip(KeyCode.US_BACKTICK, '`', '`', '`');\n\t\ttestRoundtrip(KeyCode.ABNT_C1, 'abnt_c1', 'abnt_c1', 'abnt_c1');\n\t\ttestRoundtrip(KeyCode.ABNT_C2, 'abnt_c2', 'abnt_c2', 'abnt_c2');\n\t\ttestRoundtrip(KeyCode.US_OPEN_SQUARE_BRACKET, '[', '[', '[');\n\t\ttestRoundtrip(KeyCode.US_BACKSLASH, '\\\\', '\\\\', '\\\\');\n\t\ttestRoundtrip(KeyCode.US_CLOSE_SQUARE_BRACKET, ']', ']', ']');\n\t\ttestRoundtrip(KeyCode.US_QUOTE, '\\'', '\\'', '\\'');\n\t\ttestRoundtrip(KeyCode.OEM_8, 'oem_8', 'oem_8', 'oem_8');\n\t\ttestRoundtrip(KeyCode.OEM_102, 'oem_102', 'oem_102', 'oem_102');\n\n\t\t// OEM aliases\n\t\ttestDeserialization('OEM_1', 'OEM_1', 'OEM_1', KeyCode.US_SEMICOLON);\n\t\ttestDeserialization('OEM_PLUS', 'OEM_PLUS', 'OEM_PLUS', KeyCode.US_EQUAL);\n\t\ttestDeserialization('OEM_COMMA', 'OEM_COMMA', 'OEM_COMMA', KeyCode.US_COMMA);\n\t\ttestDeserialization('OEM_MINUS', 'OEM_MINUS', 'OEM_MINUS', KeyCode.US_MINUS);\n\t\ttestDeserialization('OEM_PERIOD', 'OEM_PERIOD', 'OEM_PERIOD', KeyCode.US_DOT);\n\t\ttestDeserialization('OEM_2', 'OEM_2', 'OEM_2', KeyCode.US_SLASH);\n\t\ttestDeserialization('OEM_3', 'OEM_3', 'OEM_3', KeyCode.US_BACKTICK);\n\t\ttestDeserialization('ABNT_C1', 'ABNT_C1', 'ABNT_C1', KeyCode.ABNT_C1);\n\t\ttestDeserialization('ABNT_C2', 'ABNT_C2', 'ABNT_C2', KeyCode.ABNT_C2);\n\t\ttestDeserialization('OEM_4', 'OEM_4', 'OEM_4', KeyCode.US_OPEN_SQUARE_BRACKET);\n\t\ttestDeserialization('OEM_5', 'OEM_5', 'OEM_5', KeyCode.US_BACKSLASH);\n\t\ttestDeserialization('OEM_6', 'OEM_6', 'OEM_6', KeyCode.US_CLOSE_SQUARE_BRACKET);\n\t\ttestDeserialization('OEM_7', 'OEM_7', 'OEM_7', KeyCode.US_QUOTE);\n\t\ttestDeserialization('OEM_8', 'OEM_8', 'OEM_8', KeyCode.OEM_8);\n\t\ttestDeserialization('OEM_102', 'OEM_102', 'OEM_102', KeyCode.OEM_102);\n\n\t\t// accepts '-' as separator\n\t\ttestDeserialization('ctrl-shift-alt-win-a', 'ctrl-shift-alt-cmd-a', 'ctrl-shift-alt-meta-a', KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KEY_A);\n\n\t\t// various input mistakes\n\t\ttestDeserialization(' ctrl-shift-alt-win-A ', ' shift-alt-cmd-Ctrl-A ', ' ctrl-shift-alt-META-A ', KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KEY_A);\n\t});\n\n\ttest('deserialize scan codes', () => {\n\t\tassert.deepStrictEqual(\n\t\t\tKeybindingParser.parseUserBinding('ctrl+shift+[comma] ctrl+/'),\n\t\t\t[new ScanCodeBinding(true, true, false, false, ScanCode.Comma), new SimpleKeybinding(true, false, false, false, KeyCode.US_SLASH)]\n\t\t);\n\t});\n\n\ttest('issue #10452 - invalid command', () => {\n\t\tlet strJSON = `[{ \"key\": \"ctrl+k ctrl+f\", \"command\": [\"firstcommand\", \"seccondcommand\"] }]`;\n\t\tlet userKeybinding = <IUserFriendlyKeybinding>JSON.parse(strJSON)[0];\n\t\tlet keybindingItem = KeybindingIO.readUserKeybindingItem(userKeybinding);\n\t\tassert.strictEqual(keybindingItem.command, null);\n\t});\n\n\ttest('issue #10452 - invalid when', () => {\n\t\tlet strJSON = `[{ \"key\": \"ctrl+k ctrl+f\", \"command\": \"firstcommand\", \"when\": [] }]`;\n\t\tlet userKeybinding = <IUserFriendlyKeybinding>JSON.parse(strJSON)[0];\n\t\tlet keybindingItem = KeybindingIO.readUserKeybindingItem(userKeybinding);\n\t\tassert.strictEqual(keybindingItem.when, undefined);\n\t});\n\n\ttest('issue #10452 - invalid key', () => {\n\t\tlet strJSON = `[{ \"key\": [], \"command\": \"firstcommand\" }]`;\n\t\tlet userKeybinding = <IUserFriendlyKeybinding>JSON.parse(strJSON)[0];\n\t\tlet keybindingItem = KeybindingIO.readUserKeybindingItem(userKeybinding);\n\t\tassert.deepStrictEqual(keybindingItem.parts, []);\n\t});\n\n\ttest('issue #10452 - invalid key 2', () => {\n\t\tlet strJSON = `[{ \"key\": \"\", \"command\": \"firstcommand\" }]`;\n\t\tlet userKeybinding = <IUserFriendlyKeybinding>JSON.parse(strJSON)[0];\n\t\tlet keybindingItem = KeybindingIO.readUserKeybindingItem(userKeybinding);\n\t\tassert.deepStrictEqual(keybindingItem.parts, []);\n\t});\n\n\ttest('test commands args', () => {\n\t\tlet strJSON = `[{ \"key\": \"ctrl+k ctrl+f\", \"command\": \"firstcommand\", \"when\": [], \"args\": { \"text\": \"theText\" } }]`;\n\t\tlet userKeybinding = <IUserFriendlyKeybinding>JSON.parse(strJSON)[0];\n\t\tlet keybindingItem = KeybindingIO.readUserKeybindingItem(userKeybinding);\n\t\tassert.strictEqual(keybindingItem.commandArgs.text, 'theText');\n\t});\n});\n"]}