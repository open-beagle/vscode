{"version":3,"file":"browserKeyboardMapper.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/keybinding/test/browser/browserKeyboardMapper.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as assert from 'assert';\nimport 'vs/workbench/services/keybinding/browser/keyboardLayouts/en.darwin';\nimport 'vs/workbench/services/keybinding/browser/keyboardLayouts/de.darwin';\nimport { KeyboardLayoutContribution } from 'vs/workbench/services/keybinding/browser/keyboardLayouts/_.contribution';\nimport { BrowserKeyboardMapperFactoryBase } from 'vs/workbench/services/keybinding/browser/keyboardLayoutService';\nimport { KeymapInfo, IKeymapInfo } from 'vs/workbench/services/keybinding/common/keymapInfo';\nimport { TestInstantiationService } from 'vs/platform/instantiation/test/common/instantiationServiceMock';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { TestNotificationService } from 'vs/platform/notification/test/common/testNotificationService';\nimport { TestStorageService } from 'vs/workbench/test/common/workbenchTestServices';\n\nclass TestKeyboardMapperFactory extends BrowserKeyboardMapperFactoryBase {\n\tconstructor(notificationService: INotificationService, storageService: IStorageService, commandService: ICommandService) {\n\t\t// super(notificationService, storageService, commandService);\n\t\tsuper();\n\n\t\tconst keymapInfos: IKeymapInfo[] = KeyboardLayoutContribution.INSTANCE.layoutInfos;\n\t\tthis._keymapInfos.push(...keymapInfos.map(info => (new KeymapInfo(info.layout, info.secondaryLayouts, info.mapping, info.isUserKeyboardLayout))));\n\t\tthis._mru = this._keymapInfos;\n\t\tthis._initialized = true;\n\t\tthis.onKeyboardLayoutChanged();\n\t\tconst usLayout = this.getUSStandardLayout();\n\t\tif (usLayout) {\n\t\t\tthis.setActiveKeyMapping(usLayout.mapping);\n\t\t}\n\t}\n}\n\nsuite('keyboard layout loader', () => {\n\tlet instantiationService: TestInstantiationService = new TestInstantiationService();\n\tlet notitifcationService = instantiationService.stub(INotificationService, new TestNotificationService());\n\tlet storageService = instantiationService.stub(IStorageService, new TestStorageService());\n\n\tlet commandService = instantiationService.stub(ICommandService, {});\n\tlet instance = new TestKeyboardMapperFactory(notitifcationService, storageService, commandService);\n\n\ttest('load default US keyboard layout', () => {\n\t\tassert.notStrictEqual(instance.activeKeyboardLayout, null);\n\t});\n\n\ttest('isKeyMappingActive', () => {\n\t\tinstance.setUSKeyboardLayout();\n\t\tassert.strictEqual(instance.isKeyMappingActive({\n\t\t\tKeyA: {\n\t\t\t\tvalue: 'a',\n\t\t\t\tvalueIsDeadKey: false,\n\t\t\t\twithShift: 'A',\n\t\t\t\twithShiftIsDeadKey: false,\n\t\t\t\twithAltGr: 'å',\n\t\t\t\twithAltGrIsDeadKey: false,\n\t\t\t\twithShiftAltGr: 'Å',\n\t\t\t\twithShiftAltGrIsDeadKey: false\n\t\t\t}\n\t\t}), true);\n\n\t\tassert.strictEqual(instance.isKeyMappingActive({\n\t\t\tKeyA: {\n\t\t\t\tvalue: 'a',\n\t\t\t\tvalueIsDeadKey: false,\n\t\t\t\twithShift: 'A',\n\t\t\t\twithShiftIsDeadKey: false,\n\t\t\t\twithAltGr: 'å',\n\t\t\t\twithAltGrIsDeadKey: false,\n\t\t\t\twithShiftAltGr: 'Å',\n\t\t\t\twithShiftAltGrIsDeadKey: false\n\t\t\t},\n\t\t\tKeyZ: {\n\t\t\t\tvalue: 'z',\n\t\t\t\tvalueIsDeadKey: false,\n\t\t\t\twithShift: 'Z',\n\t\t\t\twithShiftIsDeadKey: false,\n\t\t\t\twithAltGr: 'Ω',\n\t\t\t\twithAltGrIsDeadKey: false,\n\t\t\t\twithShiftAltGr: '¸',\n\t\t\t\twithShiftAltGrIsDeadKey: false\n\t\t\t}\n\t\t}), true);\n\n\t\tassert.strictEqual(instance.isKeyMappingActive({\n\t\t\tKeyZ: {\n\t\t\t\tvalue: 'y',\n\t\t\t\tvalueIsDeadKey: false,\n\t\t\t\twithShift: 'Y',\n\t\t\t\twithShiftIsDeadKey: false,\n\t\t\t\twithAltGr: '¥',\n\t\t\t\twithAltGrIsDeadKey: false,\n\t\t\t\twithShiftAltGr: 'Ÿ',\n\t\t\t\twithShiftAltGrIsDeadKey: false\n\t\t\t},\n\t\t}), false);\n\n\t});\n\n\ttest('Switch keymapping', () => {\n\t\tinstance.setActiveKeyMapping({\n\t\t\tKeyZ: {\n\t\t\t\tvalue: 'y',\n\t\t\t\tvalueIsDeadKey: false,\n\t\t\t\twithShift: 'Y',\n\t\t\t\twithShiftIsDeadKey: false,\n\t\t\t\twithAltGr: '¥',\n\t\t\t\twithAltGrIsDeadKey: false,\n\t\t\t\twithShiftAltGr: 'Ÿ',\n\t\t\t\twithShiftAltGrIsDeadKey: false\n\t\t\t}\n\t\t});\n\t\tassert.strictEqual(!!instance.activeKeyboardLayout!.isUSStandard, false);\n\t\tassert.strictEqual(instance.isKeyMappingActive({\n\t\t\tKeyZ: {\n\t\t\t\tvalue: 'y',\n\t\t\t\tvalueIsDeadKey: false,\n\t\t\t\twithShift: 'Y',\n\t\t\t\twithShiftIsDeadKey: false,\n\t\t\t\twithAltGr: '¥',\n\t\t\t\twithAltGrIsDeadKey: false,\n\t\t\t\twithShiftAltGr: 'Ÿ',\n\t\t\t\twithShiftAltGrIsDeadKey: false\n\t\t\t},\n\t\t}), true);\n\n\t\tinstance.setUSKeyboardLayout();\n\t\tassert.strictEqual(instance.activeKeyboardLayout!.isUSStandard, true);\n\t});\n\n\ttest('Switch keyboard layout info', () => {\n\t\tinstance.setKeyboardLayout('com.apple.keylayout.German');\n\t\tassert.strictEqual(!!instance.activeKeyboardLayout!.isUSStandard, false);\n\t\tassert.strictEqual(instance.isKeyMappingActive({\n\t\t\tKeyZ: {\n\t\t\t\tvalue: 'y',\n\t\t\t\tvalueIsDeadKey: false,\n\t\t\t\twithShift: 'Y',\n\t\t\t\twithShiftIsDeadKey: false,\n\t\t\t\twithAltGr: '¥',\n\t\t\t\twithAltGrIsDeadKey: false,\n\t\t\t\twithShiftAltGr: 'Ÿ',\n\t\t\t\twithShiftAltGrIsDeadKey: false\n\t\t\t},\n\t\t}), true);\n\n\t\tinstance.setUSKeyboardLayout();\n\t\tassert.strictEqual(instance.activeKeyboardLayout!.isUSStandard, true);\n\t});\n});\n"]}