{"version":3,"file":"macLinuxFallbackKeyboardMapper.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/keybinding/test/electron-browser/macLinuxFallbackKeyboardMapper.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyChord, KeyCode, KeyMod, SimpleKeybinding, createKeybinding } from 'vs/base/common/keyCodes';\nimport { OperatingSystem } from 'vs/base/common/platform';\nimport { ScanCode, ScanCodeBinding } from 'vs/base/common/scanCode';\nimport { MacLinuxFallbackKeyboardMapper } from 'vs/workbench/services/keybinding/common/macLinuxFallbackKeyboardMapper';\nimport { IResolvedKeybinding, assertResolveKeybinding, assertResolveKeyboardEvent, assertResolveUserBinding } from 'vs/workbench/services/keybinding/test/electron-browser/keyboardMapperTestUtils';\n\nsuite('keyboardMapper - MAC fallback', () => {\n\n\tlet mapper = new MacLinuxFallbackKeyboardMapper(OperatingSystem.Macintosh);\n\n\tfunction _assertResolveKeybinding(k: number, expected: IResolvedKeybinding[]): void {\n\t\tassertResolveKeybinding(mapper, createKeybinding(k, OperatingSystem.Macintosh)!, expected);\n\t}\n\n\ttest('resolveKeybinding Cmd+Z', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tKeyMod.CtrlCmd | KeyCode.KEY_Z,\n\t\t\t[{\n\t\t\t\tlabel: '⌘Z',\n\t\t\t\tariaLabel: 'Command+Z',\n\t\t\t\telectronAccelerator: 'Cmd+Z',\n\t\t\t\tuserSettingsLabel: 'cmd+z',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisChord: false,\n\t\t\t\tdispatchParts: ['meta+Z'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeybinding Cmd+K Cmd+=', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tKeyChord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyMod.CtrlCmd | KeyCode.US_EQUAL),\n\t\t\t[{\n\t\t\t\tlabel: '⌘K ⌘=',\n\t\t\t\tariaLabel: 'Command+K Command+=',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'cmd+k cmd+=',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisChord: true,\n\t\t\t\tdispatchParts: ['meta+K', 'meta+='],\n\t\t\t\tsingleModifierDispatchParts: [null, null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Cmd+Z', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: false,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: true,\n\t\t\t\tkeyCode: KeyCode.KEY_Z,\n\t\t\t\tcode: null!\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: '⌘Z',\n\t\t\t\tariaLabel: 'Command+Z',\n\t\t\t\telectronAccelerator: 'Cmd+Z',\n\t\t\t\tuserSettingsLabel: 'cmd+z',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisChord: false,\n\t\t\t\tdispatchParts: ['meta+Z'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveUserBinding empty', () => {\n\t\tassertResolveUserBinding(mapper, [], []);\n\t});\n\n\ttest('resolveUserBinding Cmd+[Comma] Cmd+/', () => {\n\t\tassertResolveUserBinding(\n\t\t\tmapper, [\n\t\t\tnew ScanCodeBinding(false, false, false, true, ScanCode.Comma),\n\t\t\tnew SimpleKeybinding(false, false, false, true, KeyCode.US_SLASH),\n\t\t],\n\t\t\t[{\n\t\t\t\tlabel: '⌘, ⌘/',\n\t\t\t\tariaLabel: 'Command+, Command+/',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'cmd+, cmd+/',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisChord: true,\n\t\t\t\tdispatchParts: ['meta+,', 'meta+/'],\n\t\t\t\tsingleModifierDispatchParts: [null, null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Single Modifier Meta+', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: false,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: true,\n\t\t\t\tkeyCode: KeyCode.Meta,\n\t\t\t\tcode: null!\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: '⌘',\n\t\t\t\tariaLabel: 'Command',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'cmd',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisChord: false,\n\t\t\t\tdispatchParts: [null],\n\t\t\t\tsingleModifierDispatchParts: ['meta'],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Single Modifier Shift+', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: false,\n\t\t\t\tshiftKey: true,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: false,\n\t\t\t\tkeyCode: KeyCode.Shift,\n\t\t\t\tcode: null!\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: '⇧',\n\t\t\t\tariaLabel: 'Shift',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'shift',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisChord: false,\n\t\t\t\tdispatchParts: [null],\n\t\t\t\tsingleModifierDispatchParts: ['shift'],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Single Modifier Alt+', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: false,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: true,\n\t\t\t\tmetaKey: false,\n\t\t\t\tkeyCode: KeyCode.Alt,\n\t\t\t\tcode: null!\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: '⌥',\n\t\t\t\tariaLabel: 'Alt',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'alt',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisChord: false,\n\t\t\t\tdispatchParts: [null],\n\t\t\t\tsingleModifierDispatchParts: ['alt'],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Single Modifier Meta+', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: false,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: true,\n\t\t\t\tkeyCode: KeyCode.Meta,\n\t\t\t\tcode: null!\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: '⌘',\n\t\t\t\tariaLabel: 'Command',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'cmd',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisChord: false,\n\t\t\t\tdispatchParts: [null],\n\t\t\t\tsingleModifierDispatchParts: ['meta'],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Only Modifiers Ctrl+Shift+', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: true,\n\t\t\t\tshiftKey: true,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: false,\n\t\t\t\tkeyCode: KeyCode.Shift,\n\t\t\t\tcode: null!\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: '⌃⇧',\n\t\t\t\tariaLabel: 'Control+Shift',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'ctrl+shift',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisChord: false,\n\t\t\t\tdispatchParts: [null],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}\n\t\t);\n\t});\n});\n\nsuite('keyboardMapper - LINUX fallback', () => {\n\n\tlet mapper = new MacLinuxFallbackKeyboardMapper(OperatingSystem.Linux);\n\n\tfunction _assertResolveKeybinding(k: number, expected: IResolvedKeybinding[]): void {\n\t\tassertResolveKeybinding(mapper, createKeybinding(k, OperatingSystem.Linux)!, expected);\n\t}\n\n\ttest('resolveKeybinding Ctrl+Z', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tKeyMod.CtrlCmd | KeyCode.KEY_Z,\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+Z',\n\t\t\t\tariaLabel: 'Control+Z',\n\t\t\t\telectronAccelerator: 'Ctrl+Z',\n\t\t\t\tuserSettingsLabel: 'ctrl+z',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisChord: false,\n\t\t\t\tdispatchParts: ['ctrl+Z'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeybinding Ctrl+K Ctrl+=', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tKeyChord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyMod.CtrlCmd | KeyCode.US_EQUAL),\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+K Ctrl+=',\n\t\t\t\tariaLabel: 'Control+K Control+=',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'ctrl+k ctrl+=',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisChord: true,\n\t\t\t\tdispatchParts: ['ctrl+K', 'ctrl+='],\n\t\t\t\tsingleModifierDispatchParts: [null, null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Ctrl+Z', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: true,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: false,\n\t\t\t\tkeyCode: KeyCode.KEY_Z,\n\t\t\t\tcode: null!\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Ctrl+Z',\n\t\t\t\tariaLabel: 'Control+Z',\n\t\t\t\telectronAccelerator: 'Ctrl+Z',\n\t\t\t\tuserSettingsLabel: 'ctrl+z',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisChord: false,\n\t\t\t\tdispatchParts: ['ctrl+Z'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveUserBinding Ctrl+[Comma] Ctrl+/', () => {\n\t\tassertResolveUserBinding(\n\t\t\tmapper, [\n\t\t\tnew ScanCodeBinding(true, false, false, false, ScanCode.Comma),\n\t\t\tnew SimpleKeybinding(true, false, false, false, KeyCode.US_SLASH),\n\t\t],\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+, Ctrl+/',\n\t\t\t\tariaLabel: 'Control+, Control+/',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'ctrl+, ctrl+/',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisChord: true,\n\t\t\t\tdispatchParts: ['ctrl+,', 'ctrl+/'],\n\t\t\t\tsingleModifierDispatchParts: [null, null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveUserBinding Ctrl+[Comma]', () => {\n\t\tassertResolveUserBinding(\n\t\t\tmapper, [\n\t\t\tnew ScanCodeBinding(true, false, false, false, ScanCode.Comma),\n\t\t],\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+,',\n\t\t\t\tariaLabel: 'Control+,',\n\t\t\t\telectronAccelerator: 'Ctrl+,',\n\t\t\t\tuserSettingsLabel: 'ctrl+,',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisChord: false,\n\t\t\t\tdispatchParts: ['ctrl+,'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Single Modifier Ctrl+', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: true,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: false,\n\t\t\t\tkeyCode: KeyCode.Ctrl,\n\t\t\t\tcode: null!\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Ctrl',\n\t\t\t\tariaLabel: 'Control',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'ctrl',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisChord: false,\n\t\t\t\tdispatchParts: [null],\n\t\t\t\tsingleModifierDispatchParts: ['ctrl'],\n\t\t\t}\n\t\t);\n\t});\n});\n"]}