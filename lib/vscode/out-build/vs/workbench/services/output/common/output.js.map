{"version":3,"file":"output.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/output/common/output.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAMnF,QAAA,UAAU,GAAG;QACzB,cAAc,EAAE,wCAAwC;KACxD,CAAC;IAuCF,MAAM,qBAAqB;QAA3B;YACS,aAAQ,GAAG,IAAI,GAAG,EAAoC,CAAC;YAE9C,0BAAqB,GAAG,IAAI,eAAO,EAAU,CAAC;YACtD,yBAAoB,GAAkB,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC;YAE/D,wBAAmB,GAAG,IAAI,eAAO,EAAU,CAAC;YACpD,uBAAkB,GAAkB,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC;QAuB7E,CAAC;QArBO,eAAe,CAAC,UAAoC;YAC1D,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC,EAAE;gBACtC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC;gBAC7C,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;aAC/C;QACF,CAAC;QAEM,WAAW;YACjB,MAAM,MAAM,GAA+B,EAAE,CAAC;YAC9C,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YACnD,OAAO,MAAM,CAAC;QACf,CAAC;QAEM,UAAU,CAAC,EAAU;YAC3B,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QAC9B,CAAC;QAEM,aAAa,CAAC,EAAU;YAC9B,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YACzB,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACnC,CAAC;KACD;IAED,mBAAQ,CAAC,GAAG,CAAC,kBAAU,CAAC,cAAc,EAAE,IAAI,qBAAqB,EAAE,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { URI } from 'vs/base/common/uri';\n\nexport const Extensions = {\n\tOutputChannels: 'workbench.contributions.outputChannels'\n};\n\nexport interface IOutputChannelDescriptor {\n\tid: string;\n\tlabel: string;\n\tlog: boolean;\n\tfile?: URI;\n}\n\nexport interface IFileOutputChannelDescriptor extends IOutputChannelDescriptor {\n\tfile: URI;\n}\n\nexport interface IOutputChannelRegistry {\n\n\treadonly onDidRegisterChannel: Event<string>;\n\treadonly onDidRemoveChannel: Event<string>;\n\n\t/**\n\t * Make an output channel known to the output world.\n\t */\n\tregisterChannel(descriptor: IOutputChannelDescriptor): void;\n\n\t/**\n\t * Returns the list of channels known to the output world.\n\t */\n\tgetChannels(): IOutputChannelDescriptor[];\n\n\t/**\n\t * Returns the channel with the passed id.\n\t */\n\tgetChannel(id: string): IOutputChannelDescriptor | undefined;\n\n\t/**\n\t * Remove the output channel with the passed id.\n\t */\n\tremoveChannel(id: string): void;\n}\n\nclass OutputChannelRegistry implements IOutputChannelRegistry {\n\tprivate channels = new Map<string, IOutputChannelDescriptor>();\n\n\tprivate readonly _onDidRegisterChannel = new Emitter<string>();\n\treadonly onDidRegisterChannel: Event<string> = this._onDidRegisterChannel.event;\n\n\tprivate readonly _onDidRemoveChannel = new Emitter<string>();\n\treadonly onDidRemoveChannel: Event<string> = this._onDidRemoveChannel.event;\n\n\tpublic registerChannel(descriptor: IOutputChannelDescriptor): void {\n\t\tif (!this.channels.has(descriptor.id)) {\n\t\t\tthis.channels.set(descriptor.id, descriptor);\n\t\t\tthis._onDidRegisterChannel.fire(descriptor.id);\n\t\t}\n\t}\n\n\tpublic getChannels(): IOutputChannelDescriptor[] {\n\t\tconst result: IOutputChannelDescriptor[] = [];\n\t\tthis.channels.forEach(value => result.push(value));\n\t\treturn result;\n\t}\n\n\tpublic getChannel(id: string): IOutputChannelDescriptor | undefined {\n\t\treturn this.channels.get(id);\n\t}\n\n\tpublic removeChannel(id: string): void {\n\t\tthis.channels.delete(id);\n\t\tthis._onDidRemoveChannel.fire(id);\n\t}\n}\n\nRegistry.add(Extensions.OutputChannels, new OutputChannelRegistry());\n"]}