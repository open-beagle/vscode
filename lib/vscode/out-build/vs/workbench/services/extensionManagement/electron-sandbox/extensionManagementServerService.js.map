{"version":3,"sources":["vs/workbench/services/extensionManagement/electron-sandbox/extensionManagementServerService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAehG,IAAa,gCAAgC,GAA7C,MAAa,gCAAgC;QAS5C,YACwB,oBAA2C,EAC7C,kBAAuC,EAC7C,YAA2B,EACnB,oBAA2C;YAP1D,oCAA+B,GAAsC,IAAI,CAAC;YAC1E,iCAA4B,GAAsC,IAAI,CAAC;YAQ/E,MAAM,+BAA+B,GAAG,IAAI,yDAAgC,CAAC,oBAAoB,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC;YAE5H,IAAI,CAAC,+BAA+B,GAAG,EAAE,0BAA0B,EAAE,+BAA+B,EAAE,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAO,EAAE,IAAO,CAAC,EAAE,CAAC;YACvJ,MAAM,qBAAqB,GAAG,kBAAkB,CAAC,aAAa,EAAE,CAAC;YACjE,IAAI,qBAAqB,EAAE;gBAC1B,MAAM,0BAA0B,GAAG,oBAAoB,CAAC,cAAc,CAAC,yEAAsC,EAAE,qBAAqB,CAAC,UAAU,CAAW,YAAY,CAAC,EAAE,IAAI,CAAC,8BAA8B,CAAC,CAAC;gBAC9M,IAAI,CAAC,+BAA+B,GAAG;oBACtC,EAAE,EAAE,QAAQ;oBACZ,0BAA0B;oBAC1B,IAAI,KAAK,KAAK,OAAO,YAAY,CAAC,YAAY,CAAC,iBAAO,CAAC,YAAY,EAAE,qBAAsB,CAAC,eAAe,CAAC,IAAI,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAQ,EAAE,IAAQ,CAAC,CAAC,CAAC,CAAC;iBAC/I,CAAC;aACF;QACF,CAAC;QAtBD,IAAW,8BAA8B,KAAiC,OAAO,IAAI,CAAC,+BAA+B,CAAC,CAAC,CAAC;QAwBxH,4BAA4B,CAAC,SAAqB;YACjD,IAAI,SAAS,CAAC,QAAQ,CAAC,MAAM,KAAK,iBAAO,CAAC,IAAI,EAAE;gBAC/C,OAAO,IAAI,CAAC,8BAA8B,CAAC;aAC3C;YACD,IAAI,IAAI,CAAC,+BAA+B,IAAI,SAAS,CAAC,QAAQ,CAAC,MAAM,KAAK,iBAAO,CAAC,YAAY,EAAE;gBAC/F,OAAO,IAAI,CAAC,+BAA+B,CAAC;aAC5C;YACD,MAAM,IAAI,KAAK,CAAC,qBAAqB,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC5D,CAAC;KACD,CAAA;IAtCY,gCAAgC;QAU1C,WAAA,gCAAqB,CAAA;QACrB,WAAA,wCAAmB,CAAA;QACnB,WAAA,qBAAa,CAAA;QACb,WAAA,qCAAqB,CAAA;OAbX,gCAAgC,CAsC5C;IAtCY,4EAAgC;IAwC7C,CAAA,GAAA,8BAAiB,CAAA,CAAC,uDAAiC,EAAE,gCAAgC,CAAC,CAAC","file":"extensionManagementServerService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { Schemas } from 'vs/base/common/network';\nimport { IExtensionManagementServer, IExtensionManagementServerService } from 'vs/workbench/services/extensionManagement/common/extensionManagement';\nimport { ExtensionManagementChannelClient } from 'vs/platform/extensionManagement/common/extensionManagementIpc';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { IChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { ISharedProcessService } from 'vs/platform/ipc/electron-sandbox/services';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { NativeRemoteExtensionManagementService } from 'vs/workbench/services/extensionManagement/electron-sandbox/remoteExtensionManagementService';\nimport { ILabelService } from 'vs/platform/label/common/label';\nimport { IExtension } from 'vs/platform/extensions/common/extensions';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\n\nexport class ExtensionManagementServerService implements IExtensionManagementServerService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _localExtensionManagementServer: IExtensionManagementServer;\n\tpublic get localExtensionManagementServer(): IExtensionManagementServer { return this._localExtensionManagementServer; }\n\treadonly remoteExtensionManagementServer: IExtensionManagementServer | null = null;\n\treadonly webExtensionManagementServer: IExtensionManagementServer | null = null;\n\n\tconstructor(\n\t\t@ISharedProcessService sharedProcessService: ISharedProcessService,\n\t\t@IRemoteAgentService remoteAgentService: IRemoteAgentService,\n\t\t@ILabelService labelService: ILabelService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t) {\n\t\tconst localExtensionManagementService = new ExtensionManagementChannelClient(sharedProcessService.getChannel('extensions'));\n\n\t\tthis._localExtensionManagementServer = { extensionManagementService: localExtensionManagementService, id: 'local', label: localize('local', \"Local\") };\n\t\tconst remoteAgentConnection = remoteAgentService.getConnection();\n\t\tif (remoteAgentConnection) {\n\t\t\tconst extensionManagementService = instantiationService.createInstance(NativeRemoteExtensionManagementService, remoteAgentConnection.getChannel<IChannel>('extensions'), this.localExtensionManagementServer);\n\t\t\tthis.remoteExtensionManagementServer = {\n\t\t\t\tid: 'remote',\n\t\t\t\textensionManagementService,\n\t\t\t\tget label() { return labelService.getHostLabel(Schemas.vscodeRemote, remoteAgentConnection!.remoteAuthority) || localize('remote', \"Remote\"); }\n\t\t\t};\n\t\t}\n\t}\n\n\tgetExtensionManagementServer(extension: IExtension): IExtensionManagementServer {\n\t\tif (extension.location.scheme === Schemas.file) {\n\t\t\treturn this.localExtensionManagementServer;\n\t\t}\n\t\tif (this.remoteExtensionManagementServer && extension.location.scheme === Schemas.vscodeRemote) {\n\t\t\treturn this.remoteExtensionManagementServer;\n\t\t}\n\t\tthrow new Error(`Invalid Extension ${extension.location}`);\n\t}\n}\n\nregisterSingleton(IExtensionManagementServerService, ExtensionManagementServerService);\n"]}