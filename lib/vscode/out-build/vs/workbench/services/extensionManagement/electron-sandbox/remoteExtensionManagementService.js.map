{"version":3,"sources":["vs/workbench/services/extensionManagement/electron-sandbox/remoteExtensionManagementService.ts"],"names":[],"mappings":"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","file":"remoteExtensionManagementService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { IExtensionManagementService, ILocalExtension, IGalleryExtension, IExtensionGalleryService, InstallOperation, InstallOptions } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { URI } from 'vs/base/common/uri';\nimport { ExtensionType, IExtensionManifest } from 'vs/platform/extensions/common/extensions';\nimport { areSameExtensions } from 'vs/platform/extensionManagement/common/extensionManagementUtil';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { toErrorMessage } from 'vs/base/common/errorMessage';\nimport { coalesce, isNonEmptyArray } from 'vs/base/common/arrays';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { localize } from 'vs/nls';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { generateUuid } from 'vs/base/common/uuid';\nimport { joinPath } from 'vs/base/common/resources';\nimport { WebRemoteExtensionManagementService } from 'vs/workbench/services/extensionManagement/common/remoteExtensionManagementService';\nimport { IExtensionManagementServer } from 'vs/workbench/services/extensionManagement/common/extensionManagement';\nimport { INativeWorkbenchEnvironmentService } from 'vs/workbench/services/environment/electron-sandbox/environmentService';\nimport { Promises } from 'vs/base/common/async';\nimport { IExtensionManifestPropertiesService } from 'vs/workbench/services/extensions/common/extensionManifestPropertiesService';\n\nexport class NativeRemoteExtensionManagementService extends WebRemoteExtensionManagementService implements IExtensionManagementService {\n\n\tprivate readonly localExtensionManagementService: IExtensionManagementService;\n\n\tconstructor(\n\t\tchannel: IChannel,\n\t\tlocalExtensionManagementServer: IExtensionManagementServer,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IExtensionGalleryService galleryService: IExtensionGalleryService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IProductService productService: IProductService,\n\t\t@INativeWorkbenchEnvironmentService private readonly environmentService: INativeWorkbenchEnvironmentService,\n\t\t@IExtensionManifestPropertiesService extensionManifestPropertiesService: IExtensionManifestPropertiesService,\n\t) {\n\t\tsuper(channel, galleryService, configurationService, productService, extensionManifestPropertiesService);\n\t\tthis.localExtensionManagementService = localExtensionManagementServer.extensionManagementService;\n\t}\n\n\toverride async install(vsix: URI): Promise<ILocalExtension> {\n\t\tconst local = await super.install(vsix);\n\t\tawait this.installUIDependenciesAndPackedExtensions(local);\n\t\treturn local;\n\t}\n\n\toverride async installFromGallery(extension: IGalleryExtension, installOptions?: InstallOptions): Promise<ILocalExtension> {\n\t\tconst local = await this.doInstallFromGallery(extension, installOptions);\n\t\tawait this.installUIDependenciesAndPackedExtensions(local);\n\t\treturn local;\n\t}\n\n\tprivate async doInstallFromGallery(extension: IGalleryExtension, installOptions?: InstallOptions): Promise<ILocalExtension> {\n\t\tif (this.configurationService.getValue<boolean>('remote.downloadExtensionsLocally')) {\n\t\t\tthis.logService.trace(`Download '${extension.identifier.id}' extension locally and install`);\n\t\t\treturn this.downloadCompatibleAndInstall(extension);\n\t\t}\n\t\ttry {\n\t\t\tconst local = await super.installFromGallery(extension, installOptions);\n\t\t\treturn local;\n\t\t} catch (error) {\n\t\t\ttry {\n\t\t\t\tthis.logService.error(`Error while installing '${extension.identifier.id}' extension in the remote server.`, toErrorMessage(error));\n\t\t\t\tthis.logService.info(`Trying to download '${extension.identifier.id}' extension locally and install`);\n\t\t\t\tconst local = await this.downloadCompatibleAndInstall(extension);\n\t\t\t\tthis.logService.info(`Successfully installed '${extension.identifier.id}' extension`);\n\t\t\t\treturn local;\n\t\t\t} catch (e) {\n\t\t\t\tthis.logService.error(e);\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async downloadCompatibleAndInstall(extension: IGalleryExtension): Promise<ILocalExtension> {\n\t\tconst installed = await this.getInstalled(ExtensionType.User);\n\t\tconst compatible = await this.galleryService.getCompatibleExtension(extension);\n\t\tif (!compatible) {\n\t\t\treturn Promise.reject(new Error(localize('incompatible', \"Unable to install extension '{0}' as it is not compatible with VS Code '{1}'.\", extension.identifier.id, this.productService.version)));\n\t\t}\n\t\tconst manifest = await this.galleryService.getManifest(compatible, CancellationToken.None);\n\t\tif (manifest) {\n\t\t\tconst workspaceExtensions = await this.getAllWorkspaceDependenciesAndPackedExtensions(manifest, CancellationToken.None);\n\t\t\tawait Promises.settled(workspaceExtensions.map(e => this.downloadAndInstall(e, installed)));\n\t\t}\n\t\treturn this.downloadAndInstall(extension, installed);\n\t}\n\n\tprivate async downloadAndInstall(extension: IGalleryExtension, installed: ILocalExtension[]): Promise<ILocalExtension> {\n\t\tconst location = joinPath(this.environmentService.tmpDir, generateUuid());\n\t\tawait this.galleryService.download(extension, location, installed.filter(i => areSameExtensions(i.identifier, extension.identifier))[0] ? InstallOperation.Update : InstallOperation.Install);\n\t\treturn super.install(location);\n\t}\n\n\tprivate async installUIDependenciesAndPackedExtensions(local: ILocalExtension): Promise<void> {\n\t\tconst uiExtensions = await this.getAllUIDependenciesAndPackedExtensions(local.manifest, CancellationToken.None);\n\t\tconst installed = await this.localExtensionManagementService.getInstalled();\n\t\tconst toInstall = uiExtensions.filter(e => installed.every(i => !areSameExtensions(i.identifier, e.identifier)));\n\t\tawait Promises.settled(toInstall.map(d => this.localExtensionManagementService.installFromGallery(d)));\n\t}\n\n\tprivate async getAllUIDependenciesAndPackedExtensions(manifest: IExtensionManifest, token: CancellationToken): Promise<IGalleryExtension[]> {\n\t\tconst result = new Map<string, IGalleryExtension>();\n\t\tconst extensions = [...(manifest.extensionPack || []), ...(manifest.extensionDependencies || [])];\n\t\tawait this.getDependenciesAndPackedExtensionsRecursively(extensions, result, true, token);\n\t\treturn [...result.values()];\n\t}\n\n\tprivate async getAllWorkspaceDependenciesAndPackedExtensions(manifest: IExtensionManifest, token: CancellationToken): Promise<IGalleryExtension[]> {\n\t\tconst result = new Map<string, IGalleryExtension>();\n\t\tconst extensions = [...(manifest.extensionPack || []), ...(manifest.extensionDependencies || [])];\n\t\tawait this.getDependenciesAndPackedExtensionsRecursively(extensions, result, false, token);\n\t\treturn [...result.values()];\n\t}\n\n\tprivate async getDependenciesAndPackedExtensionsRecursively(toGet: string[], result: Map<string, IGalleryExtension>, uiExtension: boolean, token: CancellationToken): Promise<void> {\n\t\tif (toGet.length === 0) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tconst extensions = coalesce(await Promises.settled(toGet.map(id => this.galleryService.getCompatibleExtension({ id }))));\n\t\tconst manifests = await Promise.all(extensions.map(e => this.galleryService.getManifest(e, token)));\n\t\tconst extensionsManifests: IExtensionManifest[] = [];\n\t\tfor (let idx = 0; idx < extensions.length; idx++) {\n\t\t\tconst extension = extensions[idx];\n\t\t\tconst manifest = manifests[idx];\n\t\t\tif (manifest && this.extensionManifestPropertiesService.prefersExecuteOnUI(manifest) === uiExtension) {\n\t\t\t\tresult.set(extension.identifier.id.toLowerCase(), extension);\n\t\t\t\textensionsManifests.push(manifest);\n\t\t\t}\n\t\t}\n\t\ttoGet = [];\n\t\tfor (const extensionManifest of extensionsManifests) {\n\t\t\tif (isNonEmptyArray(extensionManifest.extensionDependencies)) {\n\t\t\t\tfor (const id of extensionManifest.extensionDependencies) {\n\t\t\t\t\tif (!result.has(id.toLowerCase())) {\n\t\t\t\t\t\ttoGet.push(id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (isNonEmptyArray(extensionManifest.extensionPack)) {\n\t\t\t\tfor (const id of extensionManifest.extensionPack) {\n\t\t\t\t\tif (!result.has(id.toLowerCase())) {\n\t\t\t\t\t\ttoGet.push(id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this.getDependenciesAndPackedExtensionsRecursively(toGet, result, uiExtension, token);\n\t}\n}\n"]}