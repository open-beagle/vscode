{"version":3,"file":"extensionTipsService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/extensionManagement/electron-sandbox/extensionTipsService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;IAchG,IAAM,0BAA0B,GAAhC,MAAM,0BAA2B,SAAQ,2CAAoB;QAM5D,YACe,WAAyB,EACtB,cAA+B,EAC/B,cAA+B,EACnC,UAAuB,EACb,oBAA2C;YAElE,KAAK,CAAC,WAAW,EAAE,cAAc,EAAE,cAAc,EAAE,UAAU,CAAC,CAAC;YAC/D,IAAI,CAAC,OAAO,GAAG,oBAAoB,CAAC,UAAU,CAAC,sBAAsB,CAAC,CAAC;QACxE,CAAC;QAEQ,kBAAkB,CAAC,MAAW;YACtC,IAAI,MAAM,CAAC,MAAM,KAAK,iBAAO,CAAC,IAAI,EAAE;gBACnC,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAA6B,oBAAoB,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;aACrF;YACD,OAAO,KAAK,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;QACzC,CAAC;QAEQ,+BAA+B;YACvC,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAiC,iCAAiC,CAAC,CAAC;QAC7F,CAAC;QAEQ,2BAA2B;YACnC,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAiC,6BAA6B,CAAC,CAAC;QACzF,CAAC;QAEQ,oBAAoB;YAC5B,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAmB,sBAAsB,CAAC,CAAC;QACpE,CAAC;KAED,CAAA;IApCK,0BAA0B;QAO7B,WAAA,oBAAY,CAAA;QACZ,WAAA,gCAAe,CAAA;QACf,WAAA,yBAAe,CAAA;QACf,WAAA,iBAAW,CAAA;QACX,WAAA,gCAAqB,CAAA;OAXlB,0BAA0B,CAoC/B;IAED,CAAA,GAAA,8BAAiB,CAAA,CAAC,2CAAqB,EAAE,0BAA0B,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { ISharedProcessService } from 'vs/platform/ipc/electron-sandbox/services';\nimport { IChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { IExtensionTipsService, IExecutableBasedExtensionTip, IWorkspaceTips, IConfigBasedExtensionTip } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { URI } from 'vs/base/common/uri';\nimport { ExtensionTipsService } from 'vs/platform/extensionManagement/common/extensionTipsService';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IRequestService } from 'vs/platform/request/common/request';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { Schemas } from 'vs/base/common/network';\n\nclass NativeExtensionTipsService extends ExtensionTipsService implements IExtensionTipsService {\n\n\toverride _serviceBrand: any;\n\n\tprivate readonly channel: IChannel;\n\n\tconstructor(\n\t\t@IFileService fileService: IFileService,\n\t\t@IProductService productService: IProductService,\n\t\t@IRequestService requestService: IRequestService,\n\t\t@ILogService logService: ILogService,\n\t\t@ISharedProcessService sharedProcessService: ISharedProcessService\n\t) {\n\t\tsuper(fileService, productService, requestService, logService);\n\t\tthis.channel = sharedProcessService.getChannel('extensionTipsService');\n\t}\n\n\toverride getConfigBasedTips(folder: URI): Promise<IConfigBasedExtensionTip[]> {\n\t\tif (folder.scheme === Schemas.file) {\n\t\t\treturn this.channel.call<IConfigBasedExtensionTip[]>('getConfigBasedTips', [folder]);\n\t\t}\n\t\treturn super.getConfigBasedTips(folder);\n\t}\n\n\toverride getImportantExecutableBasedTips(): Promise<IExecutableBasedExtensionTip[]> {\n\t\treturn this.channel.call<IExecutableBasedExtensionTip[]>('getImportantExecutableBasedTips');\n\t}\n\n\toverride getOtherExecutableBasedTips(): Promise<IExecutableBasedExtensionTip[]> {\n\t\treturn this.channel.call<IExecutableBasedExtensionTip[]>('getOtherExecutableBasedTips');\n\t}\n\n\toverride getAllWorkspacesTips(): Promise<IWorkspaceTips[]> {\n\t\treturn this.channel.call<IWorkspaceTips[]>('getAllWorkspacesTips');\n\t}\n\n}\n\nregisterSingleton(IExtensionTipsService, NativeExtensionTipsService);\n"]}