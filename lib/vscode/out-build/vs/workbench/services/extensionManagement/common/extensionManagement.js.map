{"version":3,"file":"extensionManagement.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/extensionManagement/common/extensionManagement.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAcnF,QAAA,iCAAiC,GAAG,CAAA,GAAA,+BAAe,CAAA,CAAoC,kCAAkC,CAAC,CAAC;IAS3H,QAAA,oCAAoC,GAAG,CAAA,GAAA,sCAAsB,CAAA,CAAoE,iDAA2B,CAAC,CAAC;IAQ3K,IAAkB,eASjB;IATD,WAAkB,eAAe;QAChC,iGAA0B,CAAA;QAC1B,2FAAuB,CAAA;QACvB,uFAAqB,CAAA;QACrB,iGAA0B,CAAA;QAC1B,6EAAgB,CAAA;QAChB,+EAAiB,CAAA;QACjB,2EAAe,CAAA;QACf,6EAAgB,CAAA;IACjB,CAAC,EATiB,eAAe,GAAf,uBAAe,KAAf,uBAAe,QAShC;IAEY,QAAA,oCAAoC,GAAG,CAAA,GAAA,+BAAe,CAAA,CAAuC,4BAA4B,CAAC,CAAC;IAwD3H,QAAA,4BAA4B,GAAG,CAAA,GAAA,+BAAe,CAAA,CAA+B,8BAA8B,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { createDecorator, refineServiceDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IExtension, IScannedExtension, ExtensionType, ITranslatedScannedExtension, IExtensionManifest } from 'vs/platform/extensions/common/extensions';\nimport { IExtensionManagementService, IGalleryExtension, IExtensionIdentifier, ILocalExtension, InstallOptions } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { URI } from 'vs/base/common/uri';\n\nexport interface IExtensionManagementServer {\n\tid: string;\n\tlabel: string;\n\textensionManagementService: IExtensionManagementService;\n}\n\nexport const IExtensionManagementServerService = createDecorator<IExtensionManagementServerService>('extensionManagementServerService');\nexport interface IExtensionManagementServerService {\n\treadonly _serviceBrand: undefined;\n\treadonly localExtensionManagementServer: IExtensionManagementServer | null;\n\treadonly remoteExtensionManagementServer: IExtensionManagementServer | null;\n\treadonly webExtensionManagementServer: IExtensionManagementServer | null;\n\tgetExtensionManagementServer(extension: IExtension): IExtensionManagementServer | null;\n}\n\nexport const IWorkbenchExtensionManagementService = refineServiceDecorator<IExtensionManagementService, IWorkbenchExtensionManagementService>(IExtensionManagementService);\nexport interface IWorkbenchExtensionManagementService extends IExtensionManagementService {\n\treadonly _serviceBrand: undefined;\n\tinstallExtensions(extensions: IGalleryExtension[], installOptions?: InstallOptions): Promise<ILocalExtension[]>;\n\tupdateFromGallery(gallery: IGalleryExtension, extension: ILocalExtension): Promise<ILocalExtension>;\n\tgetExtensionManagementServerToInstall(manifest: IExtensionManifest): IExtensionManagementServer | null\n}\n\nexport const enum EnablementState {\n\tDisabledByTrustRequirement,\n\tDisabledByExtensionKind,\n\tDisabledByEnvironment,\n\tDisabledByVirtualWorkspace,\n\tDisabledGlobally,\n\tDisabledWorkspace,\n\tEnabledGlobally,\n\tEnabledWorkspace\n}\n\nexport const IWorkbenchExtensionEnablementService = createDecorator<IWorkbenchExtensionEnablementService>('extensionEnablementService');\n\nexport interface IWorkbenchExtensionEnablementService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Event to listen on for extension enablement changes\n\t */\n\treadonly onEnablementChanged: Event<readonly IExtension[]>;\n\n\t/**\n\t * Returns the enablement state for the given extension\n\t */\n\tgetEnablementState(extension: IExtension): EnablementState;\n\n\t/**\n\t * Returns `true` if the enablement can be changed.\n\t */\n\tcanChangeEnablement(extension: IExtension): boolean;\n\n\t/**\n\t * Returns `true` if the enablement can be changed.\n\t */\n\tcanChangeWorkspaceEnablement(extension: IExtension): boolean;\n\n\t/**\n\t * Returns `true` if the given extension identifier is enabled.\n\t */\n\tisEnabled(extension: IExtension): boolean;\n\n\t/**\n\t * Returns `true` if the given extension identifier is disabled globally.\n\t * Extensions can be disabled globally or in workspace or both.\n\t * If an extension is disabled in both then enablement state shows only workspace.\n\t * This will\n\t */\n\tisDisabledGlobally(extension: IExtension): boolean;\n\n\t/**\n\t * Enable or disable the given extension.\n\t * if `workspace` is `true` then enablement is done for workspace, otherwise globally.\n\t *\n\t * Returns a promise that resolves to boolean value.\n\t * if resolves to `true` then requires restart for the change to take effect.\n\t *\n\t * Throws error if enablement is requested for workspace and there is no workspace\n\t */\n\tsetEnablement(extensions: IExtension[], state: EnablementState): Promise<boolean[]>;\n\n\t/**\n\t * Updates the enablement state of the extensions that require workspace trust when\n\t * workspace trust changes.\n\t */\n\tupdateEnablementByWorkspaceTrustRequirement(): Promise<void>;\n}\n\nexport const IWebExtensionsScannerService = createDecorator<IWebExtensionsScannerService>('IWebExtensionsScannerService');\nexport interface IWebExtensionsScannerService {\n\treadonly _serviceBrand: undefined;\n\tscanExtensions(type?: ExtensionType): Promise<IScannedExtension[]>;\n\tscanAndTranslateExtensions(type?: ExtensionType): Promise<ITranslatedScannedExtension[]>;\n\tscanAndTranslateSingleExtension(extensionLocation: URI, extensionType: ExtensionType): Promise<ITranslatedScannedExtension | null>;\n\tcanAddExtension(galleryExtension: IGalleryExtension): boolean;\n\taddExtension(galleryExtension: IGalleryExtension): Promise<IScannedExtension>;\n\tremoveExtension(identifier: IExtensionIdentifier, version?: string): Promise<void>;\n}\n"]}