{"version":3,"sources":["vs/workbench/services/extensionManagement/common/webExtensionManagementService.ts"],"names":[],"mappings":"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","file":"webExtensionManagementService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ExtensionType, IExtensionIdentifier, IExtensionManifest, ITranslatedScannedExtension } from 'vs/platform/extensions/common/extensions';\nimport { IExtensionManagementService, ILocalExtension, InstallExtensionEvent, DidInstallExtensionEvent, DidUninstallExtensionEvent, IGalleryExtension, IReportedExtension, IGalleryMetadata, InstallOperation } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { URI } from 'vs/base/common/uri';\nimport { areSameExtensions } from 'vs/platform/extensionManagement/common/extensionManagementUtil';\nimport { IWebExtensionsScannerService } from 'vs/workbench/services/extensionManagement/common/extensionManagement';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { localize } from 'vs/nls';\n\nexport class WebExtensionManagementService extends Disposable implements IExtensionManagementService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onInstallExtension = this._register(new Emitter<InstallExtensionEvent>());\n\treadonly onInstallExtension: Event<InstallExtensionEvent> = this._onInstallExtension.event;\n\n\tprivate readonly _onDidInstallExtension = this._register(new Emitter<DidInstallExtensionEvent>());\n\treadonly onDidInstallExtension: Event<DidInstallExtensionEvent> = this._onDidInstallExtension.event;\n\n\tprivate readonly _onUninstallExtension = this._register(new Emitter<IExtensionIdentifier>());\n\treadonly onUninstallExtension: Event<IExtensionIdentifier> = this._onUninstallExtension.event;\n\n\tprivate _onDidUninstallExtension = this._register(new Emitter<DidUninstallExtensionEvent>());\n\tonDidUninstallExtension: Event<DidUninstallExtensionEvent> = this._onDidUninstallExtension.event;\n\n\tconstructor(\n\t\t@IWebExtensionsScannerService private readonly webExtensionsScannerService: IWebExtensionsScannerService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\t}\n\n\tasync getInstalled(type?: ExtensionType): Promise<ILocalExtension[]> {\n\t\tconst extensions = await this.webExtensionsScannerService.scanAndTranslateExtensions(type);\n\t\treturn Promise.all(extensions.map(e => this.toLocalExtension(e)));\n\t}\n\n\tasync canInstall(gallery: IGalleryExtension): Promise<boolean> {\n\t\treturn this.webExtensionsScannerService.canAddExtension(gallery);\n\t}\n\n\tasync installFromGallery(gallery: IGalleryExtension): Promise<ILocalExtension> {\n\t\tif (!(await this.canInstall(gallery))) {\n\t\t\tthrow new Error(localize('cannot be installed', \"Cannot install '{0}' because this extension is not a web extension.\", gallery.displayName || gallery.name));\n\t\t}\n\t\tthis.logService.info('Installing extension:', gallery.identifier.id);\n\t\tthis._onInstallExtension.fire({ identifier: gallery.identifier, gallery });\n\t\ttry {\n\t\t\tconst existingExtension = await this.getUserExtension(gallery.identifier);\n\t\t\tconst scannedExtension = await this.webExtensionsScannerService.addExtension(gallery);\n\t\t\tconst local = await this.toLocalExtension(scannedExtension);\n\t\t\tif (existingExtension && existingExtension.manifest.version !== gallery.version) {\n\t\t\t\tawait this.webExtensionsScannerService.removeExtension(existingExtension.identifier, existingExtension.manifest.version);\n\t\t\t}\n\t\t\tthis._onDidInstallExtension.fire({ local, identifier: gallery.identifier, operation: InstallOperation.Install, gallery });\n\t\t\treturn local;\n\t\t} catch (error) {\n\t\t\tthis._onDidInstallExtension.fire({ error, identifier: gallery.identifier, operation: InstallOperation.Install, gallery });\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tasync uninstall(extension: ILocalExtension): Promise<void> {\n\t\tthis._onUninstallExtension.fire(extension.identifier);\n\t\ttry {\n\t\t\tawait this.webExtensionsScannerService.removeExtension(extension.identifier);\n\t\t\tthis._onDidUninstallExtension.fire({ identifier: extension.identifier });\n\t\t} catch (error) {\n\t\t\tthis.logService.error(error);\n\t\t\tthis._onDidUninstallExtension.fire({ error, identifier: extension.identifier });\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tasync updateMetadata(local: ILocalExtension, metadata: IGalleryMetadata): Promise<ILocalExtension> {\n\t\treturn local;\n\t}\n\n\tprivate async getUserExtension(identifier: IExtensionIdentifier): Promise<ILocalExtension | undefined> {\n\t\tconst userExtensions = await this.getInstalled(ExtensionType.User);\n\t\treturn userExtensions.find(e => areSameExtensions(e.identifier, identifier));\n\t}\n\n\tprivate async toLocalExtension(scannedExtension: ITranslatedScannedExtension): Promise<ILocalExtension> {\n\t\treturn {\n\t\t\ttype: scannedExtension.type,\n\t\t\tidentifier: scannedExtension.identifier,\n\t\t\tmanifest: scannedExtension.packageJSON,\n\t\t\tlocation: scannedExtension.location,\n\t\t\tisMachineScoped: false,\n\t\t\tpublisherId: null,\n\t\t\tpublisherDisplayName: null,\n\t\t\tisBuiltin: scannedExtension.type === ExtensionType.System\n\t\t};\n\t}\n\n\tzip(extension: ILocalExtension): Promise<URI> { throw new Error('unsupported'); }\n\tunzip(zipLocation: URI): Promise<IExtensionIdentifier> { throw new Error('unsupported'); }\n\tgetManifest(vsix: URI): Promise<IExtensionManifest> { throw new Error('unsupported'); }\n\tinstall(vsix: URI): Promise<ILocalExtension> { throw new Error('unsupported'); }\n\treinstallFromGallery(extension: ILocalExtension): Promise<void> { throw new Error('unsupported'); }\n\tgetExtensionsReport(): Promise<IReportedExtension[]> { throw new Error('unsupported'); }\n\tupdateExtensionScope(): Promise<ILocalExtension> { throw new Error('unsupported'); }\n}\n"]}