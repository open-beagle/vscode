{"version":3,"file":"builtinExtensionsScannerService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/extensionManagement/browser/builtinExtensionsScannerService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IBuiltinExtensionsScannerService, IScannedExtension, ExtensionType, IExtensionManifest } from 'vs/platform/extensions/common/extensions';\nimport { isWeb } from 'vs/base/common/platform';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { IUriIdentityService } from 'vs/workbench/services/uriIdentity/common/uriIdentity';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { URI } from 'vs/base/common/uri';\nimport { getGalleryExtensionId } from 'vs/platform/extensionManagement/common/extensionManagementUtil';\nimport { FileAccess } from 'vs/base/common/network';\n\ninterface IScannedBuiltinExtension {\n\textensionPath: string;\n\tpackageJSON: IExtensionManifest;\n\tpackageNLS?: any;\n\treadmePath?: string;\n\tchangelogPath?: string;\n}\n\nexport class BuiltinExtensionsScannerService implements IBuiltinExtensionsScannerService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly builtinExtensions: IScannedExtension[] = [];\n\n\tconstructor(\n\t\t@IWorkbenchEnvironmentService environmentService: IWorkbenchEnvironmentService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t) {\n\t\tif (isWeb) {\n\t\t\tconst builtinExtensionsServiceUrl = this._getBuiltinExtensionsUrl(environmentService);\n\t\t\tif (builtinExtensionsServiceUrl) {\n\t\t\t\tlet scannedBuiltinExtensions: IScannedBuiltinExtension[] = [];\n\n\t\t\t\tif (environmentService.isBuilt) {\n\t\t\t\t\t// Built time configuration (do NOT modify)\n\t\t\t\t\tscannedBuiltinExtensions = [/*BUILD->INSERT_BUILTIN_EXTENSIONS*/];\n\t\t\t\t} else {\n\t\t\t\t\t// Find builtin extensions by checking for DOM\n\t\t\t\t\tconst builtinExtensionsElement = document.getElementById('vscode-workbench-builtin-extensions');\n\t\t\t\t\tconst builtinExtensionsElementAttribute = builtinExtensionsElement ? builtinExtensionsElement.getAttribute('data-settings') : undefined;\n\t\t\t\t\tif (builtinExtensionsElementAttribute) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tscannedBuiltinExtensions = JSON.parse(builtinExtensionsElementAttribute);\n\t\t\t\t\t\t} catch (error) { /* ignore error*/ }\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.builtinExtensions = scannedBuiltinExtensions.map(e => ({\n\t\t\t\t\tidentifier: { id: getGalleryExtensionId(e.packageJSON.publisher, e.packageJSON.name) },\n\t\t\t\t\tlocation: uriIdentityService.extUri.joinPath(builtinExtensionsServiceUrl!, e.extensionPath),\n\t\t\t\t\ttype: ExtensionType.System,\n\t\t\t\t\tpackageJSON: e.packageJSON,\n\t\t\t\t\tpackageNLS: e.packageNLS,\n\t\t\t\t\treadmeUrl: e.readmePath ? uriIdentityService.extUri.joinPath(builtinExtensionsServiceUrl!, e.readmePath) : undefined,\n\t\t\t\t\tchangelogUrl: e.changelogPath ? uriIdentityService.extUri.joinPath(builtinExtensionsServiceUrl!, e.changelogPath) : undefined,\n\t\t\t\t\tisUnderDevelopment: false\n\t\t\t\t}));\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _getBuiltinExtensionsUrl(environmentService: IWorkbenchEnvironmentService): URI | undefined {\n\t\tlet enableBuiltinExtensions: boolean;\n\t\tif (environmentService.options && typeof environmentService.options._enableBuiltinExtensions !== 'undefined') {\n\t\t\tenableBuiltinExtensions = environmentService.options._enableBuiltinExtensions;\n\t\t} else {\n\t\t\tenableBuiltinExtensions = true;\n\t\t}\n\t\tif (enableBuiltinExtensions) {\n\t\t\treturn FileAccess.asBrowserUri('../../../../../../extensions', require);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tasync scanBuiltinExtensions(): Promise<IScannedExtension[]> {\n\t\tif (isWeb) {\n\t\t\treturn this.builtinExtensions;\n\t\t}\n\t\tthrow new Error('not supported');\n\t}\n}\n\nregisterSingleton(IBuiltinExtensionsScannerService, BuiltinExtensionsScannerService);\n"]}