{"version":3,"sources":["vs/workbench/services/workspaces/common/workspaceTrust.ts"],"names":[],"mappings":"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","file":"workspaceTrust.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from 'vs/base/common/event';\nimport { splitName } from 'vs/base/common/labels';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { Schemas } from 'vs/base/common/network';\nimport { isWeb } from 'vs/base/common/platform';\nimport { dirname } from 'vs/base/common/resources';\nimport { URI } from 'vs/base/common/uri';\nimport { localize } from 'vs/nls';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IContextKey, IContextKeyService, RawContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { IWorkspaceContextService, WorkbenchState } from 'vs/platform/workspace/common/workspace';\nimport { WorkspaceTrustRequestOptions, IWorkspaceTrustManagementService, IWorkspaceTrustInfo, IWorkspaceTrustUriInfo, IWorkspaceTrustRequestService } from 'vs/platform/workspace/common/workspaceTrust';\nimport { isSingleFolderWorkspaceIdentifier, isUntitledWorkspace, toWorkspaceIdentifier } from 'vs/platform/workspaces/common/workspaces';\nimport { IUriIdentityService } from 'vs/workbench/services/uriIdentity/common/uriIdentity';\n\nexport const WORKSPACE_TRUST_ENABLED = 'security.workspace.trust.enabled';\nexport const WORKSPACE_TRUST_STARTUP_PROMPT = 'security.workspace.trust.startupPrompt';\nexport const WORKSPACE_TRUST_EXTENSION_SUPPORT = 'extensions.supportUntrustedWorkspaces';\nexport const WORKSPACE_TRUST_STORAGE_KEY = 'content.trust.model.key';\n\nexport const WorkspaceTrustContext = {\n\tPendingRequest: new RawContextKey<boolean>('workspaceTrustPendingRequest', false),\n\tIsTrusted: new RawContextKey<boolean>('isWorkspaceTrusted', false, localize('workspaceTrustCtx', \"Whether the current workspace has been trusted by the user.\"))\n};\n\nexport function isWorkspaceTrustEnabled(configurationService: IConfigurationService): boolean {\n\tif (isWeb) {\n\t\treturn false;\n\t}\n\n\treturn configurationService.inspect<boolean>(WORKSPACE_TRUST_ENABLED).userValue ?? false;\n}\n\nexport class WorkspaceTrustManagementService extends Disposable implements IWorkspaceTrustManagementService {\n\n\t_serviceBrand: undefined;\n\n\tprivate readonly storageKey = WORKSPACE_TRUST_STORAGE_KEY;\n\n\tprivate readonly _onDidChangeTrust = this._register(new Emitter<boolean>());\n\treadonly onDidChangeTrust = this._onDidChangeTrust.event;\n\n\tprivate readonly _onDidChangeTrustedFolders = this._register(new Emitter<void>());\n\treadonly onDidChangeTrustedFolders = this._onDidChangeTrustedFolders.event;\n\n\tprivate _isWorkspaceTrusted: boolean = false;\n\tprivate _trustStateInfo: IWorkspaceTrustInfo;\n\n\tconstructor(\n\t\t@IConfigurationService readonly configurationService: IConfigurationService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@IWorkspaceContextService private readonly workspaceService: IWorkspaceContextService\n\t) {\n\t\tsuper();\n\n\t\tthis._trustStateInfo = this.loadTrustInfo();\n\t\tthis._isWorkspaceTrusted = this.calculateWorkspaceTrust();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate set currentTrustState(trusted: boolean) {\n\t\tif (this._isWorkspaceTrusted === trusted) { return; }\n\t\tthis._isWorkspaceTrusted = trusted;\n\n\t\tthis._onDidChangeTrust.fire(trusted);\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.workspaceService.onDidChangeWorkspaceFolders(() => this.currentTrustState = this.calculateWorkspaceTrust()));\n\t\tthis._register(this.workspaceService.onDidChangeWorkbenchState(() => this.currentTrustState = this.calculateWorkspaceTrust()));\n\t\tthis._register(this.storageService.onDidChangeValue(changeEvent => {\n\t\t\tif (changeEvent.key === this.storageKey) {\n\t\t\t\tthis._trustStateInfo = this.loadTrustInfo();\n\t\t\t\tthis.currentTrustState = this.calculateWorkspaceTrust();\n\n\t\t\t\tthis._onDidChangeTrustedFolders.fire();\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate loadTrustInfo(): IWorkspaceTrustInfo {\n\t\tconst infoAsString = this.storageService.get(this.storageKey, StorageScope.GLOBAL);\n\n\t\tlet result: IWorkspaceTrustInfo | undefined;\n\t\ttry {\n\t\t\tif (infoAsString) {\n\t\t\t\tresult = JSON.parse(infoAsString);\n\t\t\t}\n\t\t} catch { }\n\n\t\tif (!result) {\n\t\t\tresult = {\n\t\t\t\turiTrustInfo: []\n\t\t\t};\n\t\t}\n\n\t\tif (!result.uriTrustInfo) {\n\t\t\tresult.uriTrustInfo = [];\n\t\t}\n\n\t\tresult.uriTrustInfo = result.uriTrustInfo.map(info => { return { uri: URI.revive(info.uri), trusted: info.trusted }; });\n\t\tresult.uriTrustInfo = result.uriTrustInfo.filter(info => info.trusted);\n\n\t\treturn result;\n\t}\n\n\tprivate saveTrustInfo(): void {\n\t\tthis.storageService.store(this.storageKey, JSON.stringify(this._trustStateInfo), StorageScope.GLOBAL, StorageTarget.MACHINE);\n\t}\n\n\tprivate calculateWorkspaceTrust(): boolean {\n\t\tif (!isWorkspaceTrustEnabled(this.configurationService)) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (this.environmentService.extensionTestsLocationURI) {\n\t\t\treturn true; // trust running tests with vscode-test\n\t\t}\n\n\t\tif (this.workspaceService.getWorkbenchState() === WorkbenchState.EMPTY) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst workspaceFolders = this.getWorkspaceFolders();\n\t\tconst trusted = this.getFoldersTrust(workspaceFolders);\n\n\t\treturn trusted;\n\t}\n\n\tprivate getFoldersTrust(folders: URI[]): boolean {\n\t\tlet state = true;\n\t\tfor (const folder of folders) {\n\t\t\tconst { trusted } = this.getFolderTrustInfo(folder);\n\n\t\t\tif (!trusted) {\n\t\t\t\tstate = trusted;\n\t\t\t\treturn state;\n\t\t\t}\n\t\t}\n\n\t\treturn state;\n\t}\n\n\tprivate getWorkspaceFolders(): URI[] {\n\t\tconst folderURIs = this.workspaceService.getWorkspace().folders.map(f => f.uri);\n\t\tconst workspaceConfiguration = this.workspaceService.getWorkspace().configuration;\n\t\tif (workspaceConfiguration && !isUntitledWorkspace(workspaceConfiguration, this.environmentService)) {\n\t\t\tfolderURIs.push(dirname(workspaceConfiguration));\n\t\t}\n\n\t\treturn folderURIs;\n\t}\n\n\tpublic getFolderTrustInfo(folder: URI): IWorkspaceTrustUriInfo {\n\t\tlet resultState = false;\n\t\tlet maxLength = -1;\n\n\t\tlet resultUri = folder;\n\n\t\tfor (const trustInfo of this._trustStateInfo.uriTrustInfo) {\n\t\t\tif (this.uriIdentityService.extUri.isEqualOrParent(folder, trustInfo.uri)) {\n\t\t\t\tconst fsPath = trustInfo.uri.fsPath;\n\t\t\t\tif (fsPath.length > maxLength) {\n\t\t\t\t\tmaxLength = fsPath.length;\n\t\t\t\t\tresultState = trustInfo.trusted;\n\t\t\t\t\tresultUri = trustInfo.uri;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn { trusted: resultState, uri: resultUri };\n\t}\n\n\tsetFoldersTrust(folders: URI[], trusted: boolean): void {\n\t\tlet changed = false;\n\n\t\tfor (const folder of folders) {\n\t\t\tif (trusted) {\n\t\t\t\tconst foundItem = this._trustStateInfo.uriTrustInfo.find(trustInfo => this.uriIdentityService.extUri.isEqual(trustInfo.uri, folder));\n\t\t\t\tif (!foundItem) {\n\t\t\t\t\tthis._trustStateInfo.uriTrustInfo.push({ uri: folder, trusted: true });\n\t\t\t\t\tchanged = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst previousLength = this._trustStateInfo.uriTrustInfo.length;\n\t\t\t\tthis._trustStateInfo.uriTrustInfo = this._trustStateInfo.uriTrustInfo.filter(trustInfo => !this.uriIdentityService.extUri.isEqual(trustInfo.uri, folder));\n\t\t\t\tif (previousLength !== this._trustStateInfo.uriTrustInfo.length) {\n\t\t\t\t\tchanged = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (changed) {\n\t\t\tthis.saveTrustInfo();\n\t\t}\n\t}\n\n\tcanSetWorkspaceTrust(): boolean {\n\t\treturn this.workspaceService.getWorkbenchState() !== WorkbenchState.EMPTY;\n\t}\n\n\tcanSetParentFolderTrust(): boolean {\n\t\tconst workspaceIdentifier = toWorkspaceIdentifier(this.workspaceService.getWorkspace());\n\t\treturn isSingleFolderWorkspaceIdentifier(workspaceIdentifier) && workspaceIdentifier.uri.scheme === Schemas.file;\n\t}\n\n\tisWorkpaceTrusted(): boolean {\n\t\treturn this._isWorkspaceTrusted;\n\t}\n\n\tsetParentFolderTrust(trusted: boolean): void {\n\t\tconst workspaceIdentifier = toWorkspaceIdentifier(this.workspaceService.getWorkspace());\n\t\tif (isSingleFolderWorkspaceIdentifier(workspaceIdentifier) && workspaceIdentifier.uri.scheme === Schemas.file) {\n\t\t\tconst { parentPath } = splitName(workspaceIdentifier.uri.fsPath);\n\n\t\t\tthis.setFoldersTrust([URI.file(parentPath)], trusted);\n\t\t}\n\t}\n\n\tsetWorkspaceTrust(trusted: boolean): void {\n\t\tconst workspaceFolders = this.getWorkspaceFolders();\n\t\tthis.setFoldersTrust(workspaceFolders, trusted);\n\t}\n\n\tgetTrustedFolders(): URI[] {\n\t\treturn this._trustStateInfo.uriTrustInfo.map(info => info.uri);\n\t}\n\n\tsetTrustedFolders(folders: URI[]): void {\n\t\tthis._trustStateInfo.uriTrustInfo = [];\n\t\tfor (const folder of folders) {\n\t\t\tthis._trustStateInfo.uriTrustInfo.push({\n\t\t\t\ttrusted: true,\n\t\t\t\turi: folder\n\t\t\t});\n\t\t}\n\n\t\tthis.saveTrustInfo();\n\t}\n}\n\nexport class WorkspaceTrustRequestService extends Disposable implements IWorkspaceTrustRequestService {\n\t_serviceBrand: undefined;\n\n\tprivate _trusted!: boolean;\n\tprivate _trustRequestPromise?: Promise<boolean>;\n\tprivate _trustRequestResolver?: (trusted: boolean) => void;\n\tprivate _modalTrustRequestPromise?: Promise<boolean | undefined>;\n\tprivate _modalTrustRequestResolver?: (trusted: boolean | undefined) => void;\n\tprivate readonly _ctxWorkspaceTrustState: IContextKey<boolean>;\n\tprivate readonly _ctxWorkspaceTrustPendingRequest: IContextKey<boolean>;\n\n\tprivate readonly _onDidInitiateWorkspaceTrustRequest = this._register(new Emitter<WorkspaceTrustRequestOptions>());\n\treadonly onDidInitiateWorkspaceTrustRequest = this._onDidInitiateWorkspaceTrustRequest.event;\n\n\tprivate readonly _onDidCompleteWorkspaceTrustRequest = this._register(new Emitter<boolean>());\n\treadonly onDidCompleteWorkspaceTrustRequest = this._onDidCompleteWorkspaceTrustRequest.event;\n\n\tconstructor(\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IWorkspaceTrustManagementService private readonly workspaceTrustManagementService: IWorkspaceTrustManagementService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(this.workspaceTrustManagementService.onDidChangeTrust(trusted => this.onTrustStateChanged(trusted)));\n\n\t\tthis._ctxWorkspaceTrustState = WorkspaceTrustContext.IsTrusted.bindTo(contextKeyService);\n\t\tthis._ctxWorkspaceTrustPendingRequest = WorkspaceTrustContext.PendingRequest.bindTo(contextKeyService);\n\n\t\tthis.trusted = this.workspaceTrustManagementService.isWorkpaceTrusted();\n\t}\n\n\tprivate get trusted(): boolean {\n\t\treturn this._trusted;\n\t}\n\n\tprivate set trusted(trusted: boolean) {\n\t\tthis._trusted = trusted;\n\t\tthis._ctxWorkspaceTrustState.set(trusted);\n\t}\n\n\tprivate onTrustStateChanged(trusted: boolean): void {\n\t\t// Resolve any pending soft requests for workspace trust\n\t\tif (this._trustRequestResolver) {\n\t\t\tthis._trustRequestResolver(trusted);\n\n\t\t\tthis._trustRequestResolver = undefined;\n\t\t\tthis._trustRequestPromise = undefined;\n\t\t}\n\n\t\t// Update context if there are no pending requests\n\t\tif (!this._modalTrustRequestPromise && !this._trustRequestPromise) {\n\t\t\tthis._ctxWorkspaceTrustPendingRequest.set(false);\n\t\t}\n\n\t\tthis.trusted = trusted;\n\t}\n\n\tcancelRequest(): void {\n\t\tif (this._modalTrustRequestResolver) {\n\t\t\tthis._modalTrustRequestResolver(undefined);\n\n\t\t\tthis._modalTrustRequestResolver = undefined;\n\t\t\tthis._modalTrustRequestPromise = undefined;\n\t\t}\n\t}\n\n\tcompleteRequest(trusted?: boolean): void {\n\t\tif (this._modalTrustRequestResolver) {\n\t\t\tthis._modalTrustRequestResolver(trusted ?? this.trusted);\n\n\t\t\tthis._modalTrustRequestResolver = undefined;\n\t\t\tthis._modalTrustRequestPromise = undefined;\n\t\t}\n\t\tif (this._trustRequestResolver) {\n\t\t\tthis._trustRequestResolver(trusted ?? this.trusted);\n\n\t\t\tthis._trustRequestResolver = undefined;\n\t\t\tthis._trustRequestPromise = undefined;\n\t\t}\n\n\t\tif (trusted === undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.workspaceTrustManagementService.setWorkspaceTrust(trusted);\n\t\tthis._onDidCompleteWorkspaceTrustRequest.fire(trusted);\n\t}\n\n\tasync requestWorkspaceTrust(options: WorkspaceTrustRequestOptions = { modal: false }): Promise<boolean | undefined> {\n\t\t// Trusted workspace\n\t\tif (this.trusted) {\n\t\t\treturn this.trusted;\n\t\t}\n\n\t\tif (options.modal) {\n\t\t\t// Modal request\n\t\t\tif (!this._modalTrustRequestPromise) {\n\t\t\t\t// Create promise\n\t\t\t\tthis._modalTrustRequestPromise = new Promise(resolve => {\n\t\t\t\t\tthis._modalTrustRequestResolver = resolve;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Return existing promise\n\t\t\t\treturn this._modalTrustRequestPromise;\n\t\t\t}\n\t\t} else {\n\t\t\t// Soft request\n\t\t\tif (!this._trustRequestPromise) {\n\t\t\t\t// Create promise\n\t\t\t\tthis._trustRequestPromise = new Promise(resolve => {\n\t\t\t\t\tthis._trustRequestResolver = resolve;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Return existing promise\n\t\t\t\treturn this._trustRequestPromise;\n\t\t\t}\n\t\t}\n\n\t\tthis._ctxWorkspaceTrustPendingRequest.set(true);\n\t\tthis._onDidInitiateWorkspaceTrustRequest.fire(options);\n\n\t\treturn options.modal ? this._modalTrustRequestPromise! : this._trustRequestPromise!;\n\t}\n}\n\nregisterSingleton(IWorkspaceTrustRequestService, WorkspaceTrustRequestService);\n"]}