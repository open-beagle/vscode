{"version":3,"file":"testWorkspaceTrustService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/workspaces/test/common/testWorkspaceTrustService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAOhG,MAAa,mCAAmC;QAW/C,YAAY,UAAmB,IAAI;YAR3B,sBAAiB,GAAG,IAAI,eAAO,EAAW,CAAC;YACnD,qBAAgB,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC;YAExC,+BAA0B,GAAG,IAAI,eAAO,EAAQ,CAAC;YACzD,8BAAyB,GAAG,IAAI,CAAC,0BAA0B,CAAC,KAAK,CAAC;YAKjE,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACxB,CAAC;QAED,iBAAiB;YAChB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC5C,CAAC;QAED,oBAAoB,CAAC,OAAgB;YACpC,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC5C,CAAC;QAED,kBAAkB,CAAC,MAAW;YAC7B,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC5C,CAAC;QAED,iBAAiB,CAAC,OAAc;YAC/B,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC5C,CAAC;QAED,eAAe,CAAC,OAAc,EAAE,OAAgB;YAC/C,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC5C,CAAC;QAED,uBAAuB;YACtB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC5C,CAAC;QAED,oBAAoB;YACnB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC5C,CAAC;QAED,iBAAiB;YAChB,OAAO,IAAI,CAAC,OAAO,CAAC;QACrB,CAAC;QAED,iBAAiB,CAAC,OAAgB;YACjC,IAAI,IAAI,CAAC,OAAO,KAAK,OAAO,EAAE;gBAC7B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;gBACvB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aAC1C;QACF,CAAC;KACD;IArDD,kFAqDC;IAED,MAAa,gCAAgC;QAS5C,YAA6B,QAAiB;YAAjB,aAAQ,GAAR,QAAQ,CAAS;YAN7B,wCAAmC,GAAG,IAAI,eAAO,EAAgC,CAAC;YAC1F,uCAAkC,GAAG,IAAI,CAAC,mCAAmC,CAAC,KAAK,CAAC;YAE5E,wCAAmC,GAAG,IAAI,eAAO,EAAW,CAAC;YACrE,uCAAkC,GAAG,IAAI,CAAC,mCAAmC,CAAC,KAAK,CAAC;QAE3C,CAAC;QAEnD,aAAa;YACZ,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC5C,CAAC;QAED,eAAe,CAAC,OAAiB;YAChC,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC5C,CAAC;QAED,KAAK,CAAC,qBAAqB,CAAC,OAAsC;YACjE,OAAO,IAAI,CAAC,QAAQ,CAAC;QACtB,CAAC;KACD;IAtBD,4EAsBC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from 'vs/base/common/event';\nimport { URI } from 'vs/base/common/uri';\nimport { IWorkspaceTrustManagementService, IWorkspaceTrustRequestService, IWorkspaceTrustUriInfo, WorkspaceTrustRequestOptions } from 'vs/platform/workspace/common/workspaceTrust';\n\n\nexport class TestWorkspaceTrustManagementService implements IWorkspaceTrustManagementService {\n\t_serviceBrand: undefined;\n\n\tprivate _onDidChangeTrust = new Emitter<boolean>();\n\tonDidChangeTrust = this._onDidChangeTrust.event;\n\n\tprivate _onDidChangeTrustedFolders = new Emitter<void>();\n\tonDidChangeTrustedFolders = this._onDidChangeTrustedFolders.event;\n\n\tprivate trusted: boolean;\n\n\tconstructor(trusted: boolean = true) {\n\t\tthis.trusted = trusted;\n\t}\n\n\tgetTrustedFolders(): URI[] {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tsetParentFolderTrust(trusted: boolean): void {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tgetFolderTrustInfo(folder: URI): IWorkspaceTrustUriInfo {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tsetTrustedFolders(folders: URI[]): void {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tsetFoldersTrust(folders: URI[], trusted: boolean): void {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tcanSetParentFolderTrust(): boolean {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tcanSetWorkspaceTrust(): boolean {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tisWorkpaceTrusted(): boolean {\n\t\treturn this.trusted;\n\t}\n\n\tsetWorkspaceTrust(trusted: boolean): void {\n\t\tif (this.trusted !== trusted) {\n\t\t\tthis.trusted = trusted;\n\t\t\tthis._onDidChangeTrust.fire(this.trusted);\n\t\t}\n\t}\n}\n\nexport class TestWorkspaceTrustRequestService implements IWorkspaceTrustRequestService {\n\t_serviceBrand: any;\n\n\tprivate readonly _onDidInitiateWorkspaceTrustRequest = new Emitter<WorkspaceTrustRequestOptions>();\n\treadonly onDidInitiateWorkspaceTrustRequest = this._onDidInitiateWorkspaceTrustRequest.event;\n\n\tprivate readonly _onDidCompleteWorkspaceTrustRequest = new Emitter<boolean>();\n\treadonly onDidCompleteWorkspaceTrustRequest = this._onDidCompleteWorkspaceTrustRequest.event;\n\n\tconstructor(private readonly _trusted: boolean) { }\n\n\tcancelRequest(): void {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tcompleteRequest(trusted?: boolean): void {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tasync requestWorkspaceTrust(options?: WorkspaceTrustRequestOptions): Promise<boolean> {\n\t\treturn this._trusted;\n\t}\n}\n"]}