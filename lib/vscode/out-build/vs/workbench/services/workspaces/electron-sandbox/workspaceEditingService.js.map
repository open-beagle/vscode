{"version":3,"sources":["vs/workbench/services/workspaces/electron-sandbox/workspaceEditingService.ts"],"names":[],"mappings":"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","file":"workspaceEditingService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { IWorkspaceEditingService } from 'vs/workbench/services/workspaces/common/workspaceEditing';\nimport { URI } from 'vs/base/common/uri';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { IJSONEditingService } from 'vs/workbench/services/configuration/common/jsonEditing';\nimport { IWorkspacesService, isUntitledWorkspace, IWorkspaceIdentifier, hasWorkspaceFileExtension, isWorkspaceIdentifier } from 'vs/platform/workspaces/common/workspaces';\nimport { WorkspaceService } from 'vs/workbench/services/configuration/browser/configurationService';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { IWorkingCopyBackupService } from 'vs/workbench/services/workingCopy/common/workingCopyBackup';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { basename } from 'vs/base/common/resources';\nimport { INotificationService, Severity } from 'vs/platform/notification/common/notification';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { INativeWorkbenchEnvironmentService } from 'vs/workbench/services/environment/electron-sandbox/environmentService';\nimport { ILifecycleService, ShutdownReason } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { IFileDialogService, IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { ILabelService } from 'vs/platform/label/common/label';\nimport { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';\nimport { IHostService } from 'vs/workbench/services/host/browser/host';\nimport { AbstractWorkspaceEditingService } from 'vs/workbench/services/workspaces/browser/abstractWorkspaceEditingService';\nimport { INativeHostService } from 'vs/platform/native/electron-sandbox/native';\nimport { isMacintosh } from 'vs/base/common/platform';\nimport { mnemonicButtonLabel } from 'vs/base/common/labels';\nimport { WorkingCopyBackupService } from 'vs/workbench/services/workingCopy/common/workingCopyBackupService';\nimport { IUriIdentityService } from 'vs/workbench/services/uriIdentity/common/uriIdentity';\nimport { IWorkspaceTrustManagementService } from 'vs/platform/workspace/common/workspaceTrust';\n\nexport class NativeWorkspaceEditingService extends AbstractWorkspaceEditingService {\n\n\tconstructor(\n\t\t@IJSONEditingService jsonEditingService: IJSONEditingService,\n\t\t@IWorkspaceContextService contextService: WorkspaceService,\n\t\t@INativeHostService private nativeHostService: INativeHostService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IStorageService private storageService: IStorageService,\n\t\t@IExtensionService private extensionService: IExtensionService,\n\t\t@IWorkingCopyBackupService private workingCopyBackupService: IWorkingCopyBackupService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@ICommandService commandService: ICommandService,\n\t\t@IFileService fileService: IFileService,\n\t\t@ITextFileService textFileService: ITextFileService,\n\t\t@IWorkspacesService workspacesService: IWorkspacesService,\n\t\t@INativeWorkbenchEnvironmentService environmentService: INativeWorkbenchEnvironmentService,\n\t\t@IFileDialogService fileDialogService: IFileDialogService,\n\t\t@IDialogService dialogService: IDialogService,\n\t\t@ILifecycleService private readonly lifecycleService: ILifecycleService,\n\t\t@ILabelService private readonly labelService: ILabelService,\n\t\t@IHostService hostService: IHostService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t\t@IWorkspaceTrustManagementService workspaceTrustManagementService: IWorkspaceTrustManagementService\n\t) {\n\t\tsuper(jsonEditingService, contextService, configurationService, notificationService, commandService, fileService, textFileService, workspacesService, environmentService, fileDialogService, dialogService, hostService, uriIdentityService, workspaceTrustManagementService);\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis.lifecycleService.onBeforeShutdown(e => {\n\t\t\tconst saveOperation = this.saveUntitledBeforeShutdown(e.reason);\n\t\t\te.veto(saveOperation, 'veto.untitledWorkspace');\n\t\t});\n\t}\n\n\tprivate async saveUntitledBeforeShutdown(reason: ShutdownReason): Promise<boolean> {\n\t\tif (reason !== ShutdownReason.LOAD && reason !== ShutdownReason.CLOSE) {\n\t\t\treturn false; // only interested when window is closing or loading\n\t\t}\n\n\t\tconst workspaceIdentifier = this.getCurrentWorkspaceIdentifier();\n\t\tif (!workspaceIdentifier || !isUntitledWorkspace(workspaceIdentifier.configPath, this.environmentService)) {\n\t\t\treturn false; // only care about untitled workspaces to ask for saving\n\t\t}\n\n\t\tconst windowCount = await this.nativeHostService.getWindowCount();\n\t\tif (reason === ShutdownReason.CLOSE && !isMacintosh && windowCount === 1) {\n\t\t\treturn false; // Windows/Linux: quits when last window is closed, so do not ask then\n\t\t}\n\n\t\tenum ConfirmResult {\n\t\t\tSAVE,\n\t\t\tDONT_SAVE,\n\t\t\tCANCEL\n\t\t}\n\n\t\tconst buttons = [\n\t\t\t{ label: mnemonicButtonLabel(localize('save', \"Save\")), result: ConfirmResult.SAVE },\n\t\t\t{ label: mnemonicButtonLabel(localize('doNotSave', \"Don't Save\")), result: ConfirmResult.DONT_SAVE },\n\t\t\t{ label: localize('cancel', \"Cancel\"), result: ConfirmResult.CANCEL }\n\t\t];\n\t\tconst message = localize('saveWorkspaceMessage', \"Do you want to save your workspace configuration as a file?\");\n\t\tconst detail = localize('saveWorkspaceDetail', \"Save your workspace if you plan to open it again.\");\n\t\tconst { choice } = await this.dialogService.show(Severity.Warning, message, buttons.map(button => button.label), { detail, cancelId: 2 });\n\n\t\tswitch (buttons[choice].result) {\n\n\t\t\t// Cancel: veto unload\n\t\t\tcase ConfirmResult.CANCEL:\n\t\t\t\treturn true;\n\n\t\t\t// Don't Save: delete workspace\n\t\t\tcase ConfirmResult.DONT_SAVE:\n\t\t\t\tawait this.workspacesService.deleteUntitledWorkspace(workspaceIdentifier);\n\t\t\t\treturn false;\n\n\t\t\t// Save: save workspace, but do not veto unload if path provided\n\t\t\tcase ConfirmResult.SAVE: {\n\t\t\t\tconst newWorkspacePath = await this.pickNewWorkspacePath();\n\t\t\t\tif (!newWorkspacePath || !hasWorkspaceFileExtension(newWorkspacePath)) {\n\t\t\t\t\treturn true; // keep veto if no target was provided\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tawait this.saveWorkspaceAs(workspaceIdentifier, newWorkspacePath);\n\n\t\t\t\t\t// Make sure to add the new workspace to the history to find it again\n\t\t\t\t\tconst newWorkspaceIdentifier = await this.workspacesService.getWorkspaceIdentifier(newWorkspacePath);\n\t\t\t\t\tawait this.workspacesService.addRecentlyOpened([{\n\t\t\t\t\t\tlabel: this.labelService.getWorkspaceLabel(newWorkspaceIdentifier, { verbose: true }),\n\t\t\t\t\t\tworkspace: newWorkspaceIdentifier,\n\t\t\t\t\t\tremoteAuthority: this.environmentService.remoteAuthority\n\t\t\t\t\t}]);\n\n\t\t\t\t\t// Delete the untitled one\n\t\t\t\t\tawait this.workspacesService.deleteUntitledWorkspace(workspaceIdentifier);\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// ignore\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\toverride async isValidTargetWorkspacePath(path: URI): Promise<boolean> {\n\t\tconst windows = await this.nativeHostService.getWindows();\n\n\t\t// Prevent overwriting a workspace that is currently opened in another window\n\t\tif (windows.some(window => isWorkspaceIdentifier(window.workspace) && this.uriIdentityService.extUri.isEqual(window.workspace.configPath, path))) {\n\t\t\tawait this.dialogService.show(\n\t\t\t\tSeverity.Info,\n\t\t\t\tlocalize('workspaceOpenedMessage', \"Unable to save workspace '{0}'\", basename(path)),\n\t\t\t\t[localize('ok', \"OK\")],\n\t\t\t\t{\n\t\t\t\t\tdetail: localize('workspaceOpenedDetail', \"The workspace is already opened in another window. Please close that window first and then try again.\")\n\t\t\t\t}\n\t\t\t);\n\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true; // OK\n\t}\n\n\tasync enterWorkspace(path: URI): Promise<void> {\n\t\tconst result = await this.doEnterWorkspace(path);\n\t\tif (result) {\n\n\t\t\t// Migrate storage to new workspace\n\t\t\tawait this.migrateStorage(result.workspace);\n\n\t\t\t// Reinitialize backup service\n\t\t\tif (this.workingCopyBackupService instanceof WorkingCopyBackupService) {\n\t\t\t\tconst newBackupWorkspaceHome = result.backupPath ? URI.file(result.backupPath).with({ scheme: this.environmentService.userRoamingDataHome.scheme }) : undefined;\n\t\t\t\tthis.workingCopyBackupService.reinitialize(newBackupWorkspaceHome);\n\t\t\t}\n\t\t}\n\n\t\t// TODO@aeschli: workaround until restarting works\n\t\tif (this.environmentService.remoteAuthority) {\n\t\t\tthis.hostService.reload();\n\t\t}\n\n\t\t// Restart the extension host: entering a workspace means a new location for\n\t\t// storage and potentially a change in the workspace.rootPath property.\n\t\telse {\n\t\t\tthis.extensionService.restartExtensionHost();\n\t\t}\n\t}\n\n\tprivate migrateStorage(toWorkspace: IWorkspaceIdentifier): Promise<void> {\n\t\treturn this.storageService.migrate(toWorkspace);\n\t}\n}\n\nregisterSingleton(IWorkspaceEditingService, NativeWorkspaceEditingService, true);\n"]}