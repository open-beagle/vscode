{"version":3,"sources":["vs/workbench/services/workspaces/browser/abstractWorkspaceEditingService.ts"],"names":[],"mappings":"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","file":"abstractWorkspaceEditingService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IWorkspaceEditingService } from 'vs/workbench/services/workspaces/common/workspaceEditing';\nimport { URI } from 'vs/base/common/uri';\nimport { localize } from 'vs/nls';\nimport { IWorkspaceContextService, WorkbenchState } from 'vs/platform/workspace/common/workspace';\nimport { IJSONEditingService, JSONEditingError, JSONEditingErrorCode } from 'vs/workbench/services/configuration/common/jsonEditing';\nimport { IWorkspaceIdentifier, IWorkspaceFolderCreationData, IWorkspacesService, rewriteWorkspaceFileForNewLocation, WORKSPACE_FILTER, IEnterWorkspaceResult, hasWorkspaceFileExtension, WORKSPACE_EXTENSION, isUntitledWorkspace, IStoredWorkspace } from 'vs/platform/workspaces/common/workspaces';\nimport { WorkspaceService } from 'vs/workbench/services/configuration/browser/configurationService';\nimport { ConfigurationScope, IConfigurationRegistry, Extensions as ConfigurationExtensions, IConfigurationPropertySchema } from 'vs/platform/configuration/common/configurationRegistry';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { distinct } from 'vs/base/common/arrays';\nimport { dirname, isEqual, isEqualAuthority } from 'vs/base/common/resources';\nimport { INotificationService, Severity } from 'vs/platform/notification/common/notification';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { IFileDialogService, IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { mnemonicButtonLabel } from 'vs/base/common/labels';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';\nimport { IHostService } from 'vs/workbench/services/host/browser/host';\nimport { Schemas } from 'vs/base/common/network';\nimport { SaveReason } from 'vs/workbench/common/editor';\nimport { IUriIdentityService } from 'vs/workbench/services/uriIdentity/common/uriIdentity';\nimport { IWorkspaceTrustManagementService } from 'vs/platform/workspace/common/workspaceTrust';\n\nconst UNTITLED_WORKSPACE_FILENAME = `workspace.${WORKSPACE_EXTENSION}`;\n\nexport abstract class AbstractWorkspaceEditingService implements IWorkspaceEditingService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@IJSONEditingService private readonly jsonEditingService: IJSONEditingService,\n\t\t@IWorkspaceContextService protected readonly contextService: WorkspaceService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@IWorkspacesService protected readonly workspacesService: IWorkspacesService,\n\t\t@IWorkbenchEnvironmentService protected readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IFileDialogService private readonly fileDialogService: IFileDialogService,\n\t\t@IDialogService protected readonly dialogService: IDialogService,\n\t\t@IHostService protected readonly hostService: IHostService,\n\t\t@IUriIdentityService protected readonly uriIdentityService: IUriIdentityService,\n\t\t@IWorkspaceTrustManagementService private readonly workspaceTrustManagementService: IWorkspaceTrustManagementService\n\t) { }\n\n\tasync pickNewWorkspacePath(): Promise<URI | undefined> {\n\t\tlet workspacePath = await this.fileDialogService.showSaveDialog({\n\t\t\tsaveLabel: mnemonicButtonLabel(localize('save', \"Save\")),\n\t\t\ttitle: localize('saveWorkspace', \"Save Workspace\"),\n\t\t\tfilters: WORKSPACE_FILTER,\n\t\t\tdefaultUri: await this.fileDialogService.defaultWorkspacePath(undefined, UNTITLED_WORKSPACE_FILENAME)\n\t\t});\n\n\t\tif (!workspacePath) {\n\t\t\treturn; // canceled\n\t\t}\n\n\t\tif (!hasWorkspaceFileExtension(workspacePath)) {\n\t\t\t// Always ensure we have workspace file extension\n\t\t\t// (see https://github.com/microsoft/vscode/issues/84818)\n\t\t\tworkspacePath = workspacePath.with({ path: `${workspacePath.path}.${WORKSPACE_EXTENSION}` });\n\t\t}\n\n\t\treturn workspacePath;\n\t}\n\n\tupdateFolders(index: number, deleteCount?: number, foldersToAdd?: IWorkspaceFolderCreationData[], donotNotifyError?: boolean): Promise<void> {\n\t\tconst folders = this.contextService.getWorkspace().folders;\n\n\t\tlet foldersToDelete: URI[] = [];\n\t\tif (typeof deleteCount === 'number') {\n\t\t\tfoldersToDelete = folders.slice(index, index + deleteCount).map(f => f.uri);\n\t\t}\n\n\t\tconst wantsToDelete = foldersToDelete.length > 0;\n\t\tconst wantsToAdd = Array.isArray(foldersToAdd) && foldersToAdd.length > 0;\n\n\t\tif (!wantsToAdd && !wantsToDelete) {\n\t\t\treturn Promise.resolve(); // return early if there is nothing to do\n\t\t}\n\n\t\t// Add Folders\n\t\tif (wantsToAdd && !wantsToDelete && Array.isArray(foldersToAdd)) {\n\t\t\treturn this.doAddFolders(foldersToAdd, index, donotNotifyError);\n\t\t}\n\n\t\t// Delete Folders\n\t\tif (wantsToDelete && !wantsToAdd) {\n\t\t\treturn this.removeFolders(foldersToDelete);\n\t\t}\n\n\t\t// Add & Delete Folders\n\t\telse {\n\n\t\t\t// if we are in single-folder state and the folder is replaced with\n\t\t\t// other folders, we handle this specially and just enter workspace\n\t\t\t// mode with the folders that are being added.\n\t\t\tif (this.includesSingleFolderWorkspace(foldersToDelete)) {\n\t\t\t\treturn this.createAndEnterWorkspace(foldersToAdd!);\n\t\t\t}\n\n\t\t\t// if we are not in workspace-state, we just add the folders\n\t\t\tif (this.contextService.getWorkbenchState() !== WorkbenchState.WORKSPACE) {\n\t\t\t\treturn this.doAddFolders(foldersToAdd!, index, donotNotifyError);\n\t\t\t}\n\n\t\t\t// finally, update folders within the workspace\n\t\t\treturn this.doUpdateFolders(foldersToAdd!, foldersToDelete, index, donotNotifyError);\n\t\t}\n\t}\n\n\tprivate async doUpdateFolders(foldersToAdd: IWorkspaceFolderCreationData[], foldersToDelete: URI[], index?: number, donotNotifyError: boolean = false): Promise<void> {\n\t\ttry {\n\t\t\tawait this.contextService.updateFolders(foldersToAdd, foldersToDelete, index);\n\t\t} catch (error) {\n\t\t\tif (donotNotifyError) {\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\tthis.handleWorkspaceConfigurationEditingError(error);\n\t\t}\n\t}\n\n\taddFolders(foldersToAdd: IWorkspaceFolderCreationData[], donotNotifyError: boolean = false): Promise<void> {\n\t\treturn this.doAddFolders(foldersToAdd, undefined, donotNotifyError);\n\t}\n\n\tprivate async doAddFolders(foldersToAdd: IWorkspaceFolderCreationData[], index?: number, donotNotifyError: boolean = false): Promise<void> {\n\t\tconst state = this.contextService.getWorkbenchState();\n\t\tconst remoteAuthority = this.environmentService.remoteAuthority;\n\t\tif (remoteAuthority) {\n\t\t\t// https://github.com/microsoft/vscode/issues/94191\n\t\t\tfoldersToAdd = foldersToAdd.filter(f => f.uri.scheme !== Schemas.file && (f.uri.scheme !== Schemas.vscodeRemote || isEqualAuthority(f.uri.authority, remoteAuthority)));\n\t\t}\n\n\t\t// If we are in no-workspace or single-folder workspace, adding folders has to\n\t\t// enter a workspace.\n\t\tif (state !== WorkbenchState.WORKSPACE) {\n\t\t\tlet newWorkspaceFolders = this.contextService.getWorkspace().folders.map(folder => ({ uri: folder.uri }));\n\t\t\tnewWorkspaceFolders.splice(typeof index === 'number' ? index : newWorkspaceFolders.length, 0, ...foldersToAdd);\n\t\t\tnewWorkspaceFolders = distinct(newWorkspaceFolders, folder => this.uriIdentityService.extUri.getComparisonKey(folder.uri));\n\n\t\t\tif (state === WorkbenchState.EMPTY && newWorkspaceFolders.length === 0 || state === WorkbenchState.FOLDER && newWorkspaceFolders.length === 1) {\n\t\t\t\treturn; // return if the operation is a no-op for the current state\n\t\t\t}\n\n\t\t\treturn this.createAndEnterWorkspace(newWorkspaceFolders);\n\t\t}\n\n\t\t// Delegate addition of folders to workspace service otherwise\n\t\ttry {\n\t\t\tawait this.contextService.addFolders(foldersToAdd, index);\n\t\t} catch (error) {\n\t\t\tif (donotNotifyError) {\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\tthis.handleWorkspaceConfigurationEditingError(error);\n\t\t}\n\t}\n\n\tasync removeFolders(foldersToRemove: URI[], donotNotifyError: boolean = false): Promise<void> {\n\n\t\t// If we are in single-folder state and the opened folder is to be removed,\n\t\t// we create an empty workspace and enter it.\n\t\tif (this.includesSingleFolderWorkspace(foldersToRemove)) {\n\t\t\treturn this.createAndEnterWorkspace([]);\n\t\t}\n\n\t\t// Delegate removal of folders to workspace service otherwise\n\t\ttry {\n\t\t\tawait this.contextService.removeFolders(foldersToRemove);\n\t\t} catch (error) {\n\t\t\tif (donotNotifyError) {\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\tthis.handleWorkspaceConfigurationEditingError(error);\n\t\t}\n\t}\n\n\tprivate includesSingleFolderWorkspace(folders: URI[]): boolean {\n\t\tif (this.contextService.getWorkbenchState() === WorkbenchState.FOLDER) {\n\t\t\tconst workspaceFolder = this.contextService.getWorkspace().folders[0];\n\t\t\treturn (folders.some(folder => this.uriIdentityService.extUri.isEqual(folder, workspaceFolder.uri)));\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tasync createAndEnterWorkspace(folders: IWorkspaceFolderCreationData[], path?: URI): Promise<void> {\n\t\tif (path && !await this.isValidTargetWorkspacePath(path)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst remoteAuthority = this.environmentService.remoteAuthority;\n\t\tconst untitledWorkspace = await this.workspacesService.createUntitledWorkspace(folders, remoteAuthority);\n\t\tif (path) {\n\t\t\ttry {\n\t\t\t\tawait this.saveWorkspaceAs(untitledWorkspace, path);\n\t\t\t} finally {\n\t\t\t\tawait this.workspacesService.deleteUntitledWorkspace(untitledWorkspace); // https://github.com/microsoft/vscode/issues/100276\n\t\t\t}\n\t\t} else {\n\t\t\tpath = untitledWorkspace.configPath;\n\t\t}\n\n\t\treturn this.enterWorkspace(path);\n\t}\n\n\tasync saveAndEnterWorkspace(path: URI): Promise<void> {\n\t\tconst workspaceIdentifier = this.getCurrentWorkspaceIdentifier();\n\t\tif (!workspaceIdentifier) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Allow to save the workspace of the current window\n\t\t// if we have an identical match on the path\n\t\tif (isEqual(workspaceIdentifier.configPath, path)) {\n\t\t\treturn this.saveWorkspace(workspaceIdentifier);\n\t\t}\n\n\t\t// From this moment on we require a valid target that is not opened already\n\t\tif (!await this.isValidTargetWorkspacePath(path)) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.saveWorkspaceAs(workspaceIdentifier, path);\n\n\t\treturn this.enterWorkspace(path);\n\t}\n\n\tasync isValidTargetWorkspacePath(path: URI): Promise<boolean> {\n\t\treturn true; // OK\n\t}\n\n\tprotected async saveWorkspaceAs(workspace: IWorkspaceIdentifier, targetConfigPathURI: URI): Promise<void> {\n\t\tconst configPathURI = workspace.configPath;\n\n\t\t// Return early if target is same as source\n\t\tif (this.uriIdentityService.extUri.isEqual(configPathURI, targetConfigPathURI)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isFromUntitledWorkspace = isUntitledWorkspace(configPathURI, this.environmentService);\n\n\t\t// Read the contents of the workspace file, update it to new location and save it.\n\t\tconst raw = await this.fileService.readFile(configPathURI);\n\t\tconst newRawWorkspaceContents = rewriteWorkspaceFileForNewLocation(raw.value.toString(), configPathURI, isFromUntitledWorkspace, targetConfigPathURI, this.uriIdentityService.extUri);\n\t\tawait this.textFileService.create([{ resource: targetConfigPathURI, value: newRawWorkspaceContents, options: { overwrite: true } }]);\n\n\t\t// Set trust for the workspace file\n\t\tthis.trustWorkspaceConfiguration(targetConfigPathURI);\n\t}\n\n\tprotected async saveWorkspace(workspace: IWorkspaceIdentifier): Promise<void> {\n\t\tconst configPathURI = workspace.configPath;\n\n\t\t// First: try to save any existing model as it could be dirty\n\t\tconst existingModel = this.textFileService.files.get(configPathURI);\n\t\tif (existingModel) {\n\t\t\tawait existingModel.save({ force: true, reason: SaveReason.EXPLICIT });\n\t\t\treturn;\n\t\t}\n\n\t\t// Second: if the file exists on disk, simply return\n\t\tconst workspaceFileExists = await this.fileService.exists(configPathURI);\n\t\tif (workspaceFileExists) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Finally, we need to re-create the file as it was deleted\n\t\tconst newWorkspace: IStoredWorkspace = { folders: [] };\n\t\tconst newRawWorkspaceContents = rewriteWorkspaceFileForNewLocation(JSON.stringify(newWorkspace, null, '\\t'), configPathURI, false, configPathURI, this.uriIdentityService.extUri);\n\t\tawait this.textFileService.create([{ resource: configPathURI, value: newRawWorkspaceContents }]);\n\t}\n\n\tprivate handleWorkspaceConfigurationEditingError(error: JSONEditingError): void {\n\t\tswitch (error.code) {\n\t\t\tcase JSONEditingErrorCode.ERROR_INVALID_FILE:\n\t\t\t\tthis.onInvalidWorkspaceConfigurationFileError();\n\t\t\t\tbreak;\n\t\t\tcase JSONEditingErrorCode.ERROR_FILE_DIRTY:\n\t\t\t\tthis.onWorkspaceConfigurationFileDirtyError();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis.notificationService.error(error.message);\n\t\t}\n\t}\n\n\tprivate onInvalidWorkspaceConfigurationFileError(): void {\n\t\tconst message = localize('errorInvalidTaskConfiguration', \"Unable to write into workspace configuration file. Please open the file to correct errors/warnings in it and try again.\");\n\t\tthis.askToOpenWorkspaceConfigurationFile(message);\n\t}\n\n\tprivate onWorkspaceConfigurationFileDirtyError(): void {\n\t\tconst message = localize('errorWorkspaceConfigurationFileDirty', \"Unable to write into workspace configuration file because the file is dirty. Please save it and try again.\");\n\t\tthis.askToOpenWorkspaceConfigurationFile(message);\n\t}\n\n\tprivate askToOpenWorkspaceConfigurationFile(message: string): void {\n\t\tthis.notificationService.prompt(Severity.Error, message,\n\t\t\t[{\n\t\t\t\tlabel: localize('openWorkspaceConfigurationFile', \"Open Workspace Configuration\"),\n\t\t\t\trun: () => this.commandService.executeCommand('workbench.action.openWorkspaceConfigFile')\n\t\t\t}]\n\t\t);\n\t}\n\n\tabstract enterWorkspace(path: URI): Promise<void>;\n\n\tprotected async doEnterWorkspace(path: URI): Promise<IEnterWorkspaceResult | null> {\n\t\tif (!!this.environmentService.extensionTestsLocationURI) {\n\t\t\tthrow new Error('Entering a new workspace is not possible in tests.');\n\t\t}\n\n\t\tconst workspace = await this.workspacesService.getWorkspaceIdentifier(path);\n\n\t\t// Settings migration (only if we come from a folder workspace)\n\t\tif (this.contextService.getWorkbenchState() === WorkbenchState.FOLDER) {\n\t\t\tawait this.migrateWorkspaceSettings(workspace);\n\t\t}\n\n\t\tconst workspaceImpl = this.contextService as WorkspaceService;\n\t\tawait workspaceImpl.initialize(workspace);\n\n\t\treturn this.workspacesService.enterWorkspace(path);\n\t}\n\n\tprivate migrateWorkspaceSettings(toWorkspace: IWorkspaceIdentifier): Promise<void> {\n\t\treturn this.doCopyWorkspaceSettings(toWorkspace, setting => setting.scope === ConfigurationScope.WINDOW);\n\t}\n\n\tcopyWorkspaceSettings(toWorkspace: IWorkspaceIdentifier): Promise<void> {\n\t\treturn this.doCopyWorkspaceSettings(toWorkspace);\n\t}\n\n\tprivate doCopyWorkspaceSettings(toWorkspace: IWorkspaceIdentifier, filter?: (config: IConfigurationPropertySchema) => boolean): Promise<void> {\n\t\tconst configurationProperties = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration).getConfigurationProperties();\n\t\tconst targetWorkspaceConfiguration: any = {};\n\t\tfor (const key of this.configurationService.keys().workspace) {\n\t\t\tif (configurationProperties[key]) {\n\t\t\t\tif (filter && !filter(configurationProperties[key])) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\ttargetWorkspaceConfiguration[key] = this.configurationService.inspect(key).workspaceValue;\n\t\t\t}\n\t\t}\n\n\t\treturn this.jsonEditingService.write(toWorkspace.configPath, [{ path: ['settings'], value: targetWorkspaceConfiguration }], true);\n\t}\n\n\tprivate trustWorkspaceConfiguration(configPathURI: URI): void {\n\t\tif (this.contextService.getWorkbenchState() !== WorkbenchState.EMPTY && this.workspaceTrustManagementService.isWorkpaceTrusted()) {\n\t\t\tthis.workspaceTrustManagementService.setFoldersTrust([dirname(configPathURI)], true);\n\t\t}\n\t}\n\n\tprotected getCurrentWorkspaceIdentifier(): IWorkspaceIdentifier | undefined {\n\t\tconst workspace = this.contextService.getWorkspace();\n\t\tif (workspace?.configuration) {\n\t\t\treturn { id: workspace.id, configPath: workspace.configuration };\n\t\t}\n\n\t\treturn undefined;\n\t}\n}\n"]}