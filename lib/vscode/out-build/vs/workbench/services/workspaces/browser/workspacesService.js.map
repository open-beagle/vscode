{"version":3,"file":"workspacesService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/services/workspaces/browser/workspacesService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAkBhG,IAAa,wBAAwB,GAArC,MAAa,wBAAyB,SAAQ,sBAAU;QASvD,YACmC,cAA+B,EACtB,gBAA0C,EACvD,UAAuB,EACtB,WAAyB,EACT,kBAAgD,EACzD,kBAAuC;YAE7E,KAAK,EAAE,CAAC;YAP0B,mBAAc,GAAd,cAAc,CAAiB;YACtB,qBAAgB,GAAhB,gBAAgB,CAA0B;YACvD,eAAU,GAAV,UAAU,CAAa;YACtB,gBAAW,GAAX,WAAW,CAAc;YACT,uBAAkB,GAAlB,kBAAkB,CAA8B;YACzD,uBAAkB,GAAlB,kBAAkB,CAAqB;YAT7D,4BAAuB,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,eAAO,EAAQ,CAAC,CAAC;YACtE,8BAAyB,GAAG,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC;YAYvE,6CAA6C;YAC7C,0CAA0C;YAC1C,IAAI,CAAC,4BAA4B,EAAE,CAAC;YAEpC,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAC1B,CAAC;QAEO,iBAAiB;YACxB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,KAAK,CAAC,EAAE;gBAC3D,IAAI,KAAK,CAAC,GAAG,KAAK,wBAAwB,CAAC,mBAAmB,IAAI,KAAK,CAAC,KAAK,mBAAwB,EAAE;oBACtG,IAAI,CAAC,uBAAuB,CAAC,IAAI,EAAE,CAAC;iBACpC;YACF,CAAC,CAAC,CAAC,CAAC;QACL,CAAC;QAEO,4BAA4B;YACnC,MAAM,SAAS,GAAG,IAAI,CAAC,gBAAgB,CAAC,YAAY,EAAE,CAAC;YACvD,QAAQ,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,EAAE;gBAClD;oBACC,IAAI,CAAC,iBAAiB,CAAC,CAAC,EAAE,SAAS,EAAE,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;oBAClE,MAAM;gBACP;oBACC,IAAI,CAAC,iBAAiB,CAAC,CAAC,EAAE,SAAS,EAAE,EAAE,EAAE,EAAE,SAAS,CAAC,EAAE,EAAE,UAAU,EAAE,SAAS,CAAC,aAAc,EAAE,EAAE,CAAC,CAAC,CAAC;oBACpG,MAAM;aACP;QACF,CAAC;QAED,4BAA4B;QAE5B,KAAK,CAAC,iBAAiB;YACtB,MAAM,iBAAiB,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,wBAAwB,CAAC,mBAAmB,iBAAsB,CAAC;YACrH,IAAI,iBAAiB,EAAE;gBACtB,OAAO,CAAA,GAAA,kCAAqB,CAAA,CAAC,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;aAC7E;YAED,OAAO,EAAE,UAAU,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;QACtC,CAAC;QAED,KAAK,CAAC,iBAAiB,CAAC,OAAkB;YACzC,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAEtD,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;gBACxB,IAAI,CAAA,GAAA,yBAAY,CAAA,CAAC,MAAM,CAAC,EAAE;oBACzB,IAAI,CAAC,sBAAsB,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;oBAC9D,cAAc,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;iBACrC;qBAAM,IAAI,CAAA,GAAA,2BAAc,CAAA,CAAC,MAAM,CAAC,EAAE;oBAClC,IAAI,CAAC,sBAAsB,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;oBAChE,cAAc,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;iBAC1C;qBAAM;oBACN,IAAI,CAAC,sBAAsB,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC;oBAC3E,cAAc,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;iBAC1C;YACF,CAAC,CAAC,CAAC;YAEH,OAAO,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,CAAC;QAChD,CAAC;QAED,KAAK,CAAC,oBAAoB,CAAC,KAAY;YACtC,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAEtD,IAAI,CAAC,sBAAsB,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;YAEnD,OAAO,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,CAAC;QAChD,CAAC;QAEO,sBAAsB,CAAC,cAA+B,EAAE,KAAY;YAC3E,cAAc,CAAC,KAAK,GAAG,cAAc,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;gBACzD,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;YACzE,CAAC,CAAC,CAAC;YAEH,cAAc,CAAC,UAAU,GAAG,cAAc,CAAC,UAAU,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE;gBACxE,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAA,GAAA,2BAAc,CAAA,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;YAC1J,CAAC,CAAC,CAAC;QACJ,CAAC;QAEO,KAAK,CAAC,kBAAkB,CAAC,IAAqB;YACrD,OAAO,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,wBAAwB,CAAC,mBAAmB,EAAE,IAAI,CAAC,SAAS,CAAC,CAAA,GAAA,wBAAW,CAAA,CAAC,IAAI,CAAC,CAAC,+BAA0C,CAAC;QAC5J,CAAC;QAED,KAAK,CAAC,mBAAmB;YACxB,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,wBAAwB,CAAC,mBAAmB,iBAAsB,CAAC;QAC/F,CAAC;QAED,YAAY;QAEZ,8BAA8B;QAE9B,KAAK,CAAC,cAAc,CAAC,IAAS;YAC7B,OAAO,EAAE,SAAS,EAAE,MAAM,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,EAAE,CAAC;QAC/D,CAAC;QAED,KAAK,CAAC,uBAAuB,CAAC,OAAwC,EAAE,eAAwB;YAC/F,MAAM,QAAQ,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;YAC5E,MAAM,wBAAwB,GAAG,CAAA,GAAA,oBAAQ,CAAA,CAAC,IAAI,CAAC,kBAAkB,CAAC,sBAAsB,EAAE,YAAY,QAAQ,IAAI,gCAAmB,EAAE,CAAC,CAAC;YAEzI,4CAA4C;YAC5C,MAAM,qBAAqB,GAA6B,EAAE,CAAC;YAC3D,IAAI,OAAO,EAAE;gBACZ,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;oBAC7B,qBAAqB,CAAC,IAAI,CAAC,CAAA,GAAA,qCAAwB,CAAA,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,EAAE,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,kBAAkB,CAAC,sBAAsB,EAAE,CAAC,oBAAS,EAAE,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC,CAAC;iBAChL;aACD;YAED,wCAAwC;YACxC,MAAM,eAAe,GAAqB,EAAE,OAAO,EAAE,qBAAqB,EAAE,eAAe,EAAE,CAAC;YAC9F,MAAM,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,wBAAwB,EAAE,iBAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,eAAe,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;YAE7H,OAAO,IAAI,CAAC,sBAAsB,CAAC,wBAAwB,CAAC,CAAC;QAC9D,CAAC;QAED,KAAK,CAAC,uBAAuB,CAAC,SAA+B;YAC5D,IAAI;gBACH,MAAM,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;aACjD;YAAC,OAAO,KAAK,EAAE;gBACf,IAAyB,KAAM,CAAC,mBAAmB,2BAAuC,EAAE;oBAC3F,MAAM,KAAK,CAAC,CAAC,2DAA2D;iBACxE;aACD;QACF,CAAC;QAED,KAAK,CAAC,sBAAsB,CAAC,aAAkB;YAC9C,OAAO,CAAA,GAAA,mCAAsB,CAAA,CAAC,aAAa,CAAC,CAAC;QAC9C,CAAC;QAED,YAAY;QAGZ,0BAA0B;QAE1B,KAAK,CAAC,kBAAkB;YACvB,OAAO,EAAE,CAAC,CAAC,iCAAiC;QAC7C,CAAC;KAGD,CAAA;IAvJgB,4CAAmB,GAAG,iBAAiB,CAAC;IAF5C,wBAAwB;QAUlC,WAAA,yBAAe,CAAA;QACf,WAAA,oCAAwB,CAAA;QACxB,WAAA,iBAAW,CAAA;QACX,WAAA,oBAAY,CAAA;QACZ,WAAA,iDAA4B,CAAA;QAC5B,WAAA,iCAAmB,CAAA;OAfT,wBAAwB,CAyJpC;IAzJY,4DAAwB;IA2JrC,CAAA,GAAA,8BAAiB,CAAA,CAAC,+BAAkB,EAAE,wBAAwB,EAAE,IAAI,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IWorkspacesService, IWorkspaceFolderCreationData, IWorkspaceIdentifier, IEnterWorkspaceResult, IRecentlyOpened, restoreRecentlyOpened, IRecent, isRecentFile, isRecentFolder, toStoreData, IStoredWorkspaceFolder, getStoredWorkspaceFolder, WORKSPACE_EXTENSION, IStoredWorkspace } from 'vs/platform/workspaces/common/workspaces';\nimport { URI } from 'vs/base/common/uri';\nimport { Emitter } from 'vs/base/common/event';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { IWorkspaceContextService, WorkbenchState } from 'vs/platform/workspace/common/workspace';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { getWorkspaceIdentifier } from 'vs/workbench/services/workspaces/browser/workspaces';\nimport { IFileService, FileOperationError, FileOperationResult } from 'vs/platform/files/common/files';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { joinPath } from 'vs/base/common/resources';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { isWindows } from 'vs/base/common/platform';\nimport { IUriIdentityService } from 'vs/workbench/services/uriIdentity/common/uriIdentity';\n\nexport class BrowserWorkspacesService extends Disposable implements IWorkspacesService {\n\n\tstatic readonly RECENTLY_OPENED_KEY = 'recently.opened';\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onRecentlyOpenedChange = this._register(new Emitter<void>());\n\treadonly onDidChangeRecentlyOpened = this._onRecentlyOpenedChange.event;\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IWorkspaceContextService private readonly workspaceService: IWorkspaceContextService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t) {\n\t\tsuper();\n\n\t\t// Opening a workspace should push it as most\n\t\t// recently used to the workspaces history\n\t\tthis.addWorkspaceToRecentlyOpened();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.storageService.onDidChangeValue(event => {\n\t\t\tif (event.key === BrowserWorkspacesService.RECENTLY_OPENED_KEY && event.scope === StorageScope.GLOBAL) {\n\t\t\t\tthis._onRecentlyOpenedChange.fire();\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate addWorkspaceToRecentlyOpened(): void {\n\t\tconst workspace = this.workspaceService.getWorkspace();\n\t\tswitch (this.workspaceService.getWorkbenchState()) {\n\t\t\tcase WorkbenchState.FOLDER:\n\t\t\t\tthis.addRecentlyOpened([{ folderUri: workspace.folders[0].uri }]);\n\t\t\t\tbreak;\n\t\t\tcase WorkbenchState.WORKSPACE:\n\t\t\t\tthis.addRecentlyOpened([{ workspace: { id: workspace.id, configPath: workspace.configuration! } }]);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t//#region Workspaces History\n\n\tasync getRecentlyOpened(): Promise<IRecentlyOpened> {\n\t\tconst recentlyOpenedRaw = this.storageService.get(BrowserWorkspacesService.RECENTLY_OPENED_KEY, StorageScope.GLOBAL);\n\t\tif (recentlyOpenedRaw) {\n\t\t\treturn restoreRecentlyOpened(JSON.parse(recentlyOpenedRaw), this.logService);\n\t\t}\n\n\t\treturn { workspaces: [], files: [] };\n\t}\n\n\tasync addRecentlyOpened(recents: IRecent[]): Promise<void> {\n\t\tconst recentlyOpened = await this.getRecentlyOpened();\n\n\t\trecents.forEach(recent => {\n\t\t\tif (isRecentFile(recent)) {\n\t\t\t\tthis.doRemoveRecentlyOpened(recentlyOpened, [recent.fileUri]);\n\t\t\t\trecentlyOpened.files.unshift(recent);\n\t\t\t} else if (isRecentFolder(recent)) {\n\t\t\t\tthis.doRemoveRecentlyOpened(recentlyOpened, [recent.folderUri]);\n\t\t\t\trecentlyOpened.workspaces.unshift(recent);\n\t\t\t} else {\n\t\t\t\tthis.doRemoveRecentlyOpened(recentlyOpened, [recent.workspace.configPath]);\n\t\t\t\trecentlyOpened.workspaces.unshift(recent);\n\t\t\t}\n\t\t});\n\n\t\treturn this.saveRecentlyOpened(recentlyOpened);\n\t}\n\n\tasync removeRecentlyOpened(paths: URI[]): Promise<void> {\n\t\tconst recentlyOpened = await this.getRecentlyOpened();\n\n\t\tthis.doRemoveRecentlyOpened(recentlyOpened, paths);\n\n\t\treturn this.saveRecentlyOpened(recentlyOpened);\n\t}\n\n\tprivate doRemoveRecentlyOpened(recentlyOpened: IRecentlyOpened, paths: URI[]): void {\n\t\trecentlyOpened.files = recentlyOpened.files.filter(file => {\n\t\t\treturn !paths.some(path => path.toString() === file.fileUri.toString());\n\t\t});\n\n\t\trecentlyOpened.workspaces = recentlyOpened.workspaces.filter(workspace => {\n\t\t\treturn !paths.some(path => path.toString() === (isRecentFolder(workspace) ? workspace.folderUri.toString() : workspace.workspace.configPath.toString()));\n\t\t});\n\t}\n\n\tprivate async saveRecentlyOpened(data: IRecentlyOpened): Promise<void> {\n\t\treturn this.storageService.store(BrowserWorkspacesService.RECENTLY_OPENED_KEY, JSON.stringify(toStoreData(data)), StorageScope.GLOBAL, StorageTarget.USER);\n\t}\n\n\tasync clearRecentlyOpened(): Promise<void> {\n\t\tthis.storageService.remove(BrowserWorkspacesService.RECENTLY_OPENED_KEY, StorageScope.GLOBAL);\n\t}\n\n\t//#endregion\n\n\t//#region Workspace Management\n\n\tasync enterWorkspace(path: URI): Promise<IEnterWorkspaceResult | null> {\n\t\treturn { workspace: await this.getWorkspaceIdentifier(path) };\n\t}\n\n\tasync createUntitledWorkspace(folders?: IWorkspaceFolderCreationData[], remoteAuthority?: string): Promise<IWorkspaceIdentifier> {\n\t\tconst randomId = (Date.now() + Math.round(Math.random() * 1000)).toString();\n\t\tconst newUntitledWorkspacePath = joinPath(this.environmentService.untitledWorkspacesHome, `Untitled-${randomId}.${WORKSPACE_EXTENSION}`);\n\n\t\t// Build array of workspace folders to store\n\t\tconst storedWorkspaceFolder: IStoredWorkspaceFolder[] = [];\n\t\tif (folders) {\n\t\t\tfor (const folder of folders) {\n\t\t\t\tstoredWorkspaceFolder.push(getStoredWorkspaceFolder(folder.uri, true, folder.name, this.environmentService.untitledWorkspacesHome, !isWindows, this.uriIdentityService.extUri));\n\t\t\t}\n\t\t}\n\n\t\t// Store at untitled workspaces location\n\t\tconst storedWorkspace: IStoredWorkspace = { folders: storedWorkspaceFolder, remoteAuthority };\n\t\tawait this.fileService.writeFile(newUntitledWorkspacePath, VSBuffer.fromString(JSON.stringify(storedWorkspace, null, '\\t')));\n\n\t\treturn this.getWorkspaceIdentifier(newUntitledWorkspacePath);\n\t}\n\n\tasync deleteUntitledWorkspace(workspace: IWorkspaceIdentifier): Promise<void> {\n\t\ttry {\n\t\t\tawait this.fileService.del(workspace.configPath);\n\t\t} catch (error) {\n\t\t\tif ((<FileOperationError>error).fileOperationResult !== FileOperationResult.FILE_NOT_FOUND) {\n\t\t\t\tthrow error; // re-throw any other error than file not found which is OK\n\t\t\t}\n\t\t}\n\t}\n\n\tasync getWorkspaceIdentifier(workspacePath: URI): Promise<IWorkspaceIdentifier> {\n\t\treturn getWorkspaceIdentifier(workspacePath);\n\t}\n\n\t//#endregion\n\n\n\t//#region Dirty Workspaces\n\n\tasync getDirtyWorkspaces(): Promise<Array<IWorkspaceIdentifier | URI>> {\n\t\treturn []; // Currently not supported in web\n\t}\n\n\t//#endregion\n}\n\nregisterSingleton(IWorkspacesService, BrowserWorkspacesService, true);\n"]}