{"version":3,"file":"extHostUriTransformerService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/api/common/extHostUriTransformerService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAUnF,QAAA,sBAAsB,GAAG,CAAA,GAAA,+BAAe,CAAA,CAAyB,wBAAwB,CAAC,CAAC;IAExG,MAAa,qBAAqB;QAQjC,YAAY,QAAgC;YAC3C,IAAI,CAAC,QAAQ,EAAE;gBACd,IAAI,CAAC,iBAAiB,GAAG,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;gBACpC,IAAI,CAAC,iBAAiB,GAAG,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;gBACpC,IAAI,CAAC,oBAAoB,GAAG,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;gBACvC,IAAI,CAAC,uBAAuB,GAAG,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;aAC1C;iBAAM;gBACN,IAAI,CAAC,iBAAiB,GAAG,QAAQ,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACnE,IAAI,CAAC,iBAAiB,GAAG,QAAQ,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACnE,IAAI,CAAC,oBAAoB,GAAG,QAAQ,CAAC,oBAAoB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACzE,IAAI,CAAC,uBAAuB,GAAG,QAAQ,CAAC,uBAAuB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aAC/E;QACF,CAAC;KACD;IArBD,sDAqBC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IURITransformer } from 'vs/base/common/uriIpc';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { URI, UriComponents } from 'vs/base/common/uri';\n\nexport interface IURITransformerService extends IURITransformer {\n\treadonly _serviceBrand: undefined;\n}\n\nexport const IURITransformerService = createDecorator<IURITransformerService>('IURITransformerService');\n\nexport class URITransformerService implements IURITransformerService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\ttransformIncoming: (uri: UriComponents) => UriComponents;\n\ttransformOutgoing: (uri: UriComponents) => UriComponents;\n\ttransformOutgoingURI: (uri: URI) => URI;\n\ttransformOutgoingScheme: (scheme: string) => string;\n\n\tconstructor(delegate: IURITransformer | null) {\n\t\tif (!delegate) {\n\t\t\tthis.transformIncoming = arg => arg;\n\t\t\tthis.transformOutgoing = arg => arg;\n\t\t\tthis.transformOutgoingURI = arg => arg;\n\t\t\tthis.transformOutgoingScheme = arg => arg;\n\t\t} else {\n\t\t\tthis.transformIncoming = delegate.transformIncoming.bind(delegate);\n\t\t\tthis.transformOutgoing = delegate.transformOutgoing.bind(delegate);\n\t\t\tthis.transformOutgoingURI = delegate.transformOutgoingURI.bind(delegate);\n\t\t\tthis.transformOutgoingScheme = delegate.transformOutgoingScheme.bind(delegate);\n\t\t}\n\t}\n}\n"]}