{"version":3,"file":"workspaceContains.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/api/common/shared/workspaceContains.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as resources from 'vs/base/common/resources';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { CancellationTokenSource, CancellationToken } from 'vs/base/common/cancellation';\nimport * as errors from 'vs/base/common/errors';\nimport { ExtensionIdentifier, IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { QueryBuilder } from 'vs/workbench/contrib/search/common/queryBuilder';\nimport { ISearchService } from 'vs/workbench/services/search/common/search';\nimport { toWorkspaceFolder } from 'vs/platform/workspace/common/workspace';\n\nconst WORKSPACE_CONTAINS_TIMEOUT = 7000;\n\nexport interface IExtensionActivationHost {\n\treadonly folders: readonly UriComponents[];\n\treadonly forceUsingSearch: boolean;\n\n\texists(uri: URI): Promise<boolean>;\n\tcheckExists(folders: readonly UriComponents[], includes: string[], token: CancellationToken): Promise<boolean>;\n}\n\nexport interface IExtensionActivationResult {\n\tactivationEvent: string;\n}\n\nexport function checkActivateWorkspaceContainsExtension(host: IExtensionActivationHost, desc: IExtensionDescription): Promise<IExtensionActivationResult | undefined> {\n\tconst activationEvents = desc.activationEvents;\n\tif (!activationEvents) {\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tconst fileNames: string[] = [];\n\tconst globPatterns: string[] = [];\n\n\tfor (const activationEvent of activationEvents) {\n\t\tif (/^workspaceContains:/.test(activationEvent)) {\n\t\t\tconst fileNameOrGlob = activationEvent.substr('workspaceContains:'.length);\n\t\t\tif (fileNameOrGlob.indexOf('*') >= 0 || fileNameOrGlob.indexOf('?') >= 0 || host.forceUsingSearch) {\n\t\t\t\tglobPatterns.push(fileNameOrGlob);\n\t\t\t} else {\n\t\t\t\tfileNames.push(fileNameOrGlob);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (fileNames.length === 0 && globPatterns.length === 0) {\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tlet resolveResult: (value: IExtensionActivationResult | undefined) => void;\n\tconst result = new Promise<IExtensionActivationResult | undefined>((resolve, reject) => { resolveResult = resolve; });\n\tconst activate = (activationEvent: string) => resolveResult({ activationEvent });\n\n\tconst fileNamePromise = Promise.all(fileNames.map((fileName) => _activateIfFileName(host, fileName, activate))).then(() => { });\n\tconst globPatternPromise = _activateIfGlobPatterns(host, desc.identifier, globPatterns, activate);\n\n\tPromise.all([fileNamePromise, globPatternPromise]).then(() => {\n\t\t// when all are done, resolve with undefined (relevant only if it was not activated so far)\n\t\tresolveResult(undefined);\n\t});\n\n\treturn result;\n}\n\nasync function _activateIfFileName(host: IExtensionActivationHost, fileName: string, activate: (activationEvent: string) => void): Promise<void> {\n\t// find exact path\n\tfor (const uri of host.folders) {\n\t\tif (await host.exists(resources.joinPath(URI.revive(uri), fileName))) {\n\t\t\t// the file was found\n\t\t\tactivate(`workspaceContains:${fileName}`);\n\t\t\treturn;\n\t\t}\n\t}\n}\n\nasync function _activateIfGlobPatterns(host: IExtensionActivationHost, extensionId: ExtensionIdentifier, globPatterns: string[], activate: (activationEvent: string) => void): Promise<void> {\n\tif (globPatterns.length === 0) {\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tconst tokenSource = new CancellationTokenSource();\n\tconst searchP = host.checkExists(host.folders, globPatterns, tokenSource.token);\n\n\tconst timer = setTimeout(async () => {\n\t\ttokenSource.cancel();\n\t\tactivate(`workspaceContainsTimeout:${globPatterns.join(',')}`);\n\t}, WORKSPACE_CONTAINS_TIMEOUT);\n\n\tlet exists: boolean = false;\n\ttry {\n\t\texists = await searchP;\n\t} catch (err) {\n\t\tif (!errors.isPromiseCanceledError(err)) {\n\t\t\terrors.onUnexpectedError(err);\n\t\t}\n\t}\n\n\ttokenSource.dispose();\n\tclearTimeout(timer);\n\n\tif (exists) {\n\t\t// a file was found matching one of the glob patterns\n\t\tactivate(`workspaceContains:${globPatterns.join(',')}`);\n\t}\n}\n\nexport function checkGlobFileExists(\n\taccessor: ServicesAccessor,\n\tfolders: readonly UriComponents[],\n\tincludes: string[],\n\ttoken: CancellationToken,\n): Promise<boolean> {\n\tconst instantiationService = accessor.get(IInstantiationService);\n\tconst searchService = accessor.get(ISearchService);\n\tconst queryBuilder = instantiationService.createInstance(QueryBuilder);\n\tconst query = queryBuilder.file(folders.map(folder => toWorkspaceFolder(URI.revive(folder))), {\n\t\t_reason: 'checkExists',\n\t\tincludePattern: includes,\n\t\texists: true\n\t});\n\n\treturn searchService.fileSearch(query, token).then(\n\t\tresult => {\n\t\t\treturn !!result.limitHit;\n\t\t},\n\t\terr => {\n\t\t\tif (!errors.isPromiseCanceledError(err)) {\n\t\t\t\treturn Promise.reject(err);\n\t\t\t}\n\n\t\t\treturn false;\n\t\t});\n}\n"]}