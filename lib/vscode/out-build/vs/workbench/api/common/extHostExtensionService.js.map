{"version":3,"sources":["vs/workbench/api/common/extHostExtensionService.ts"],"names":[],"mappings":"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","file":"extHostExtensionService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport * as path from 'vs/base/common/path';\nimport * as performance from 'vs/base/common/performance';\nimport { originalFSPath, joinPath } from 'vs/base/common/resources';\nimport { Barrier, timeout } from 'vs/base/common/async';\nimport { dispose, toDisposable, DisposableStore, Disposable } from 'vs/base/common/lifecycle';\nimport { TernarySearchTree } from 'vs/base/common/map';\nimport { URI } from 'vs/base/common/uri';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { ExtHostExtensionServiceShape, IInitData, MainContext, MainThreadExtensionServiceShape, MainThreadTelemetryShape, MainThreadWorkspaceShape, IResolveAuthorityResult } from 'vs/workbench/api/common/extHost.protocol';\nimport { ExtHostConfiguration, IExtHostConfiguration } from 'vs/workbench/api/common/extHostConfiguration';\nimport { ActivatedExtension, EmptyExtension, ExtensionActivationReason, ExtensionActivationTimes, ExtensionActivationTimesBuilder, ExtensionsActivator, IExtensionAPI, IExtensionModule, HostExtension, ExtensionActivationTimesFragment } from 'vs/workbench/api/common/extHostExtensionActivator';\nimport { ExtHostStorage, IExtHostStorage } from 'vs/workbench/api/common/extHostStorage';\nimport { ExtHostWorkspace, IExtHostWorkspace } from 'vs/workbench/api/common/extHostWorkspace';\nimport { MissingExtensionDependency, checkProposedApiEnabled, ActivationKind } from 'vs/workbench/services/extensions/common/extensions';\nimport { ExtensionDescriptionRegistry } from 'vs/workbench/services/extensions/common/extensionDescriptionRegistry';\nimport * as errors from 'vs/base/common/errors';\nimport type * as vscode from 'vscode';\nimport { ExtensionIdentifier, IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { ExtensionGlobalMemento, ExtensionMemento } from 'vs/workbench/api/common/extHostMemento';\nimport { RemoteAuthorityResolverError, ExtensionKind, ExtensionMode, ExtensionRuntime } from 'vs/workbench/api/common/extHostTypes';\nimport { ResolvedAuthority, ResolvedOptions, RemoteAuthorityResolverErrorCode, IRemoteConnectionData } from 'vs/platform/remote/common/remoteAuthorityResolver';\nimport { IInstantiationService, createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IExtHostInitDataService } from 'vs/workbench/api/common/extHostInitDataService';\nimport { IExtensionStoragePaths } from 'vs/workbench/api/common/extHostStoragePaths';\nimport { IExtHostRpcService } from 'vs/workbench/api/common/extHostRpcService';\nimport { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';\nimport { IExtHostTunnelService } from 'vs/workbench/api/common/extHostTunnelService';\nimport { IExtHostTerminalService } from 'vs/workbench/api/common/extHostTerminalService';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { IExtensionActivationHost, checkActivateWorkspaceContainsExtension } from 'vs/workbench/api/common/shared/workspaceContains';\nimport { ExtHostSecretState, IExtHostSecretState } from 'vs/workbench/api/common/exHostSecretState';\nimport { ExtensionSecrets } from 'vs/workbench/api/common/extHostSecrets';\n\ninterface ITestRunner {\n\t/** Old test runner API, as exported from `vscode/lib/testrunner` */\n\trun(testsRoot: string, clb: (error: Error, failures?: number) => void): void;\n}\n\ninterface INewTestRunner {\n\t/** New test runner API, as explained in the extension test doc */\n\trun(): Promise<void>;\n}\n\nexport const IHostUtils = createDecorator<IHostUtils>('IHostUtils');\n\nexport interface IHostUtils {\n\treadonly _serviceBrand: undefined;\n\texit(code: number): void;\n\texists(path: string): Promise<boolean>;\n\trealpath(path: string): Promise<string>;\n}\n\ntype TelemetryActivationEventFragment = {\n\tid: { classification: 'PublicNonPersonalData', purpose: 'FeatureInsight' };\n\tname: { classification: 'PublicNonPersonalData', purpose: 'FeatureInsight' };\n\textensionVersion: { classification: 'PublicNonPersonalData', purpose: 'FeatureInsight' };\n\tpublisherDisplayName: { classification: 'SystemMetaData', purpose: 'FeatureInsight' };\n\tactivationEvents: { classification: 'SystemMetaData', purpose: 'FeatureInsight' };\n\tisBuiltin: { classification: 'SystemMetaData', purpose: 'FeatureInsight', isMeasurement: true };\n\treason: { classification: 'SystemMetaData', purpose: 'FeatureInsight' };\n\treasonId: { classification: 'PublicNonPersonalData', purpose: 'FeatureInsight' };\n};\n\nexport abstract class AbstractExtHostExtensionService extends Disposable implements ExtHostExtensionServiceShape {\n\n\treadonly _serviceBrand: undefined;\n\n\tabstract readonly extensionRuntime: ExtensionRuntime;\n\n\tprivate readonly _onDidChangeRemoteConnectionData = this._register(new Emitter<void>());\n\tpublic readonly onDidChangeRemoteConnectionData = this._onDidChangeRemoteConnectionData.event;\n\n\tprotected readonly _hostUtils: IHostUtils;\n\tprotected readonly _initData: IInitData;\n\tprotected readonly _extHostContext: IExtHostRpcService;\n\tprotected readonly _instaService: IInstantiationService;\n\tprotected readonly _extHostWorkspace: ExtHostWorkspace;\n\tprotected readonly _extHostConfiguration: ExtHostConfiguration;\n\tprotected readonly _logService: ILogService;\n\tprotected readonly _extHostTunnelService: IExtHostTunnelService;\n\tprotected readonly _extHostTerminalService: IExtHostTerminalService;\n\n\tprotected readonly _mainThreadWorkspaceProxy: MainThreadWorkspaceShape;\n\tprotected readonly _mainThreadTelemetryProxy: MainThreadTelemetryShape;\n\tprotected readonly _mainThreadExtensionsProxy: MainThreadExtensionServiceShape;\n\n\tprivate readonly _almostReadyToRunExtensions: Barrier;\n\tprivate readonly _readyToStartExtensionHost: Barrier;\n\tprivate readonly _readyToRunExtensions: Barrier;\n\tprivate readonly _eagerExtensionsActivated: Barrier;\n\n\tprotected readonly _registry: ExtensionDescriptionRegistry;\n\tprivate readonly _storage: ExtHostStorage;\n\tprivate readonly _secretState: ExtHostSecretState;\n\tprivate readonly _storagePath: IExtensionStoragePaths;\n\tprivate readonly _activator: ExtensionsActivator;\n\tprivate _extensionPathIndex: Promise<TernarySearchTree<string, IExtensionDescription>> | null;\n\n\tprivate readonly _resolvers: { [authorityPrefix: string]: vscode.RemoteAuthorityResolver; };\n\n\tprivate _started: boolean;\n\tprivate _remoteConnectionData: IRemoteConnectionData | null;\n\n\tprivate readonly _disposables: DisposableStore;\n\n\tconstructor(\n\t\t@IInstantiationService instaService: IInstantiationService,\n\t\t@IHostUtils hostUtils: IHostUtils,\n\t\t@IExtHostRpcService extHostContext: IExtHostRpcService,\n\t\t@IExtHostWorkspace extHostWorkspace: IExtHostWorkspace,\n\t\t@IExtHostConfiguration extHostConfiguration: IExtHostConfiguration,\n\t\t@ILogService logService: ILogService,\n\t\t@IExtHostInitDataService initData: IExtHostInitDataService,\n\t\t@IExtensionStoragePaths storagePath: IExtensionStoragePaths,\n\t\t@IExtHostTunnelService extHostTunnelService: IExtHostTunnelService,\n\t\t@IExtHostTerminalService extHostTerminalService: IExtHostTerminalService,\n\t) {\n\t\tsuper();\n\t\tthis._hostUtils = hostUtils;\n\t\tthis._extHostContext = extHostContext;\n\t\tthis._initData = initData;\n\n\t\tthis._extHostWorkspace = extHostWorkspace;\n\t\tthis._extHostConfiguration = extHostConfiguration;\n\t\tthis._logService = logService;\n\t\tthis._extHostTunnelService = extHostTunnelService;\n\t\tthis._extHostTerminalService = extHostTerminalService;\n\t\tthis._disposables = new DisposableStore();\n\n\t\tthis._mainThreadWorkspaceProxy = this._extHostContext.getProxy(MainContext.MainThreadWorkspace);\n\t\tthis._mainThreadTelemetryProxy = this._extHostContext.getProxy(MainContext.MainThreadTelemetry);\n\t\tthis._mainThreadExtensionsProxy = this._extHostContext.getProxy(MainContext.MainThreadExtensionService);\n\n\t\tthis._almostReadyToRunExtensions = new Barrier();\n\t\tthis._readyToStartExtensionHost = new Barrier();\n\t\tthis._readyToRunExtensions = new Barrier();\n\t\tthis._eagerExtensionsActivated = new Barrier();\n\t\tthis._registry = new ExtensionDescriptionRegistry(this._initData.extensions);\n\t\tthis._storage = new ExtHostStorage(this._extHostContext);\n\t\tthis._secretState = new ExtHostSecretState(this._extHostContext);\n\t\tthis._storagePath = storagePath;\n\n\t\tthis._instaService = instaService.createChild(new ServiceCollection(\n\t\t\t[IExtHostStorage, this._storage],\n\t\t\t[IExtHostSecretState, this._secretState]\n\t\t));\n\n\t\tconst hostExtensions = new Set<string>();\n\t\tthis._initData.hostExtensions.forEach((extensionId) => hostExtensions.add(ExtensionIdentifier.toKey(extensionId)));\n\n\t\tthis._activator = new ExtensionsActivator(\n\t\t\tthis._registry,\n\t\t\tthis._initData.resolvedExtensions,\n\t\t\tthis._initData.hostExtensions,\n\t\t\t{\n\t\t\t\tonExtensionActivationError: (extensionId: ExtensionIdentifier, error: Error, missingExtensionDependency: MissingExtensionDependency | null): void => {\n\t\t\t\t\tthis._mainThreadExtensionsProxy.$onExtensionActivationError(extensionId, errors.transformErrorForSerialization(error), missingExtensionDependency);\n\t\t\t\t},\n\n\t\t\t\tactualActivateExtension: async (extensionId: ExtensionIdentifier, reason: ExtensionActivationReason): Promise<ActivatedExtension> => {\n\t\t\t\t\tif (hostExtensions.has(ExtensionIdentifier.toKey(extensionId))) {\n\t\t\t\t\t\tawait this._mainThreadExtensionsProxy.$activateExtension(extensionId, reason);\n\t\t\t\t\t\treturn new HostExtension();\n\t\t\t\t\t}\n\t\t\t\t\tconst extensionDescription = this._registry.getExtensionDescription(extensionId)!;\n\t\t\t\t\treturn this._activateExtension(extensionDescription, reason);\n\t\t\t\t}\n\t\t\t},\n\t\t\tthis._logService\n\t\t);\n\t\tthis._extensionPathIndex = null;\n\t\tthis._resolvers = Object.create(null);\n\t\tthis._started = false;\n\t\tthis._remoteConnectionData = this._initData.remote.connectionData;\n\t}\n\n\tpublic getRemoteConnectionData(): IRemoteConnectionData | null {\n\t\treturn this._remoteConnectionData;\n\t}\n\n\tpublic async initialize(): Promise<void> {\n\t\ttry {\n\n\t\t\tawait this._beforeAlmostReadyToRunExtensions();\n\t\t\tthis._almostReadyToRunExtensions.open();\n\n\t\t\tawait this._extHostWorkspace.waitForInitializeCall();\n\t\t\tperformance.mark('code/extHost/ready');\n\t\t\tthis._readyToStartExtensionHost.open();\n\n\t\t\tif (this._initData.autoStart) {\n\t\t\t\tthis._startExtensionHost();\n\t\t\t}\n\t\t} catch (err) {\n\t\t\terrors.onUnexpectedError(err);\n\t\t}\n\t}\n\n\tpublic async deactivateAll(): Promise<void> {\n\t\tlet allPromises: Promise<void>[] = [];\n\t\ttry {\n\t\t\tconst allExtensions = this._registry.getAllExtensionDescriptions();\n\t\t\tconst allExtensionsIds = allExtensions.map(ext => ext.identifier);\n\t\t\tconst activatedExtensions = allExtensionsIds.filter(id => this.isActivated(id));\n\n\t\t\tallPromises = activatedExtensions.map((extensionId) => {\n\t\t\t\treturn this._deactivate(extensionId);\n\t\t\t});\n\t\t} catch (err) {\n\t\t\t// TODO: write to log once we have one\n\t\t}\n\t\tawait Promise.all(allPromises);\n\t}\n\n\tpublic isActivated(extensionId: ExtensionIdentifier): boolean {\n\t\tif (this._readyToRunExtensions.isOpen()) {\n\t\t\treturn this._activator.isActivated(extensionId);\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate _activateByEvent(activationEvent: string, startup: boolean): Promise<void> {\n\t\treturn this._activator.activateByEvent(activationEvent, startup);\n\t}\n\n\tprivate _activateById(extensionId: ExtensionIdentifier, reason: ExtensionActivationReason): Promise<void> {\n\t\treturn this._activator.activateById(extensionId, reason);\n\t}\n\n\tpublic activateByIdWithErrors(extensionId: ExtensionIdentifier, reason: ExtensionActivationReason): Promise<void> {\n\t\treturn this._activateById(extensionId, reason).then(() => {\n\t\t\tconst extension = this._activator.getActivatedExtension(extensionId);\n\t\t\tif (extension.activationFailed) {\n\t\t\t\t// activation failed => bubble up the error as the promise result\n\t\t\t\treturn Promise.reject(extension.activationFailedError);\n\t\t\t}\n\t\t\treturn undefined;\n\t\t});\n\t}\n\n\tpublic getExtensionRegistry(): Promise<ExtensionDescriptionRegistry> {\n\t\treturn this._readyToRunExtensions.wait().then(_ => this._registry);\n\t}\n\n\tpublic getExtensionExports(extensionId: ExtensionIdentifier): IExtensionAPI | null | undefined {\n\t\tif (this._readyToRunExtensions.isOpen()) {\n\t\t\treturn this._activator.getActivatedExtension(extensionId).exports;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t// create trie to enable fast 'filename -> extension id' look up\n\tpublic getExtensionPathIndex(): Promise<TernarySearchTree<string, IExtensionDescription>> {\n\t\tif (!this._extensionPathIndex) {\n\t\t\tconst tree = TernarySearchTree.forPaths<IExtensionDescription>();\n\t\t\tconst extensions = this._registry.getAllExtensionDescriptions().map(ext => {\n\t\t\t\tif (!this._getEntryPoint(ext)) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\treturn this._hostUtils.realpath(ext.extensionLocation.fsPath).then(value => tree.set(URI.file(value).fsPath, ext));\n\t\t\t});\n\t\t\tthis._extensionPathIndex = Promise.all(extensions).then(() => tree);\n\t\t}\n\t\treturn this._extensionPathIndex;\n\t}\n\n\tprivate _deactivate(extensionId: ExtensionIdentifier): Promise<void> {\n\t\tlet result = Promise.resolve(undefined);\n\n\t\tif (!this._readyToRunExtensions.isOpen()) {\n\t\t\treturn result;\n\t\t}\n\n\t\tif (!this._activator.isActivated(extensionId)) {\n\t\t\treturn result;\n\t\t}\n\n\t\tconst extension = this._activator.getActivatedExtension(extensionId);\n\t\tif (!extension) {\n\t\t\treturn result;\n\t\t}\n\n\t\t// call deactivate if available\n\t\ttry {\n\t\t\tif (typeof extension.module.deactivate === 'function') {\n\t\t\t\tresult = Promise.resolve(extension.module.deactivate()).then(undefined, (err) => {\n\t\t\t\t\t// TODO: Do something with err if this is not the shutdown case\n\t\t\t\t\treturn Promise.resolve(undefined);\n\t\t\t\t});\n\t\t\t}\n\t\t} catch (err) {\n\t\t\t// TODO: Do something with err if this is not the shutdown case\n\t\t}\n\n\t\t// clean up subscriptions\n\t\ttry {\n\t\t\tdispose(extension.subscriptions);\n\t\t} catch (err) {\n\t\t\t// TODO: Do something with err if this is not the shutdown case\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t// --- impl\n\n\tprivate async _activateExtension(extensionDescription: IExtensionDescription, reason: ExtensionActivationReason): Promise<ActivatedExtension> {\n\t\tif (!this._initData.remote.isRemote) {\n\t\t\t// local extension host process\n\t\t\tawait this._mainThreadExtensionsProxy.$onWillActivateExtension(extensionDescription.identifier);\n\t\t} else {\n\t\t\t// remote extension host process\n\t\t\t// do not wait for renderer confirmation\n\t\t\tthis._mainThreadExtensionsProxy.$onWillActivateExtension(extensionDescription.identifier);\n\t\t}\n\t\treturn this._doActivateExtension(extensionDescription, reason).then((activatedExtension) => {\n\t\t\tconst activationTimes = activatedExtension.activationTimes;\n\t\t\tthis._mainThreadExtensionsProxy.$onDidActivateExtension(extensionDescription.identifier, activationTimes.codeLoadingTime, activationTimes.activateCallTime, activationTimes.activateResolvedTime, reason);\n\t\t\tthis._logExtensionActivationTimes(extensionDescription, reason, 'success', activationTimes);\n\t\t\treturn activatedExtension;\n\t\t}, (err) => {\n\t\t\tthis._logExtensionActivationTimes(extensionDescription, reason, 'failure');\n\t\t\tthrow err;\n\t\t});\n\t}\n\n\tprivate _logExtensionActivationTimes(extensionDescription: IExtensionDescription, reason: ExtensionActivationReason, outcome: string, activationTimes?: ExtensionActivationTimes) {\n\t\tconst event = getTelemetryActivationEvent(extensionDescription, reason);\n\t\ttype ExtensionActivationTimesClassification = {\n\t\t\toutcome: { classification: 'SystemMetaData', purpose: 'FeatureInsight' };\n\t\t} & TelemetryActivationEventFragment & ExtensionActivationTimesFragment;\n\n\t\ttype ExtensionActivationTimesEvent = {\n\t\t\toutcome: string\n\t\t} & ActivationTimesEvent & TelemetryActivationEvent;\n\n\t\ttype ActivationTimesEvent = {\n\t\t\tstartup?: boolean;\n\t\t\tcodeLoadingTime?: number;\n\t\t\tactivateCallTime?: number;\n\t\t\tactivateResolvedTime?: number;\n\t\t};\n\n\t\tthis._mainThreadTelemetryProxy.$publicLog2<ExtensionActivationTimesEvent, ExtensionActivationTimesClassification>('extensionActivationTimes', {\n\t\t\t...event,\n\t\t\t...(activationTimes || {}),\n\t\t\toutcome\n\t\t});\n\t}\n\n\tprivate _doActivateExtension(extensionDescription: IExtensionDescription, reason: ExtensionActivationReason): Promise<ActivatedExtension> {\n\t\tconst event = getTelemetryActivationEvent(extensionDescription, reason);\n\t\ttype ActivatePluginClassification = {} & TelemetryActivationEventFragment;\n\t\tthis._mainThreadTelemetryProxy.$publicLog2<TelemetryActivationEvent, ActivatePluginClassification>('activatePlugin', event);\n\t\tconst entryPoint = this._getEntryPoint(extensionDescription);\n\t\tif (!entryPoint) {\n\t\t\t// Treat the extension as being empty => NOT AN ERROR CASE\n\t\t\treturn Promise.resolve(new EmptyExtension(ExtensionActivationTimes.NONE));\n\t\t}\n\n\t\tthis._logService.info(`ExtensionService#_doActivateExtension ${extensionDescription.identifier.value} ${JSON.stringify(reason)}`);\n\t\tthis._logService.flush();\n\n\t\tconst activationTimesBuilder = new ExtensionActivationTimesBuilder(reason.startup);\n\t\treturn Promise.all([\n\t\t\tthis._loadCommonJSModule<IExtensionModule>(extensionDescription.identifier, joinPath(extensionDescription.extensionLocation, entryPoint), activationTimesBuilder),\n\t\t\tthis._loadExtensionContext(extensionDescription)\n\t\t]).then(values => {\n\t\t\tperformance.mark(`code/extHost/willActivateExtension/${extensionDescription.identifier.value}`);\n\t\t\treturn AbstractExtHostExtensionService._callActivate(this._logService, extensionDescription.identifier, values[0], values[1], activationTimesBuilder);\n\t\t}).then((activatedExtension) => {\n\t\t\tperformance.mark(`code/extHost/didActivateExtension/${extensionDescription.identifier.value}`);\n\t\t\treturn activatedExtension;\n\t\t});\n\t}\n\n\tprivate _loadExtensionContext(extensionDescription: IExtensionDescription): Promise<vscode.ExtensionContext> {\n\n\t\tconst globalState = new ExtensionGlobalMemento(extensionDescription, this._storage);\n\t\tconst workspaceState = new ExtensionMemento(extensionDescription.identifier.value, false, this._storage);\n\t\tconst secrets = new ExtensionSecrets(extensionDescription, this._secretState);\n\t\tconst extensionMode = extensionDescription.isUnderDevelopment\n\t\t\t? (this._initData.environment.extensionTestsLocationURI ? ExtensionMode.Test : ExtensionMode.Development)\n\t\t\t: ExtensionMode.Production;\n\t\tconst extensionKind = this._initData.remote.isRemote ? ExtensionKind.Workspace : ExtensionKind.UI;\n\n\t\tthis._logService.trace(`ExtensionService#loadExtensionContext ${extensionDescription.identifier.value}`);\n\n\t\treturn Promise.all([\n\t\t\tglobalState.whenReady,\n\t\t\tworkspaceState.whenReady,\n\t\t\tthis._storagePath.whenReady\n\t\t]).then(() => {\n\t\t\tconst that = this;\n\t\t\tlet extension: vscode.Extension<any> | undefined;\n\n\t\t\treturn Object.freeze<vscode.ExtensionContext>({\n\t\t\t\tglobalState,\n\t\t\t\tworkspaceState,\n\t\t\t\tsecrets,\n\t\t\t\tsubscriptions: [],\n\t\t\t\tget extensionUri() { return extensionDescription.extensionLocation; },\n\t\t\t\tget extensionPath() { return extensionDescription.extensionLocation.fsPath; },\n\t\t\t\tasAbsolutePath(relativePath: string) { return path.join(extensionDescription.extensionLocation.fsPath, relativePath); },\n\t\t\t\tget storagePath() { return that._storagePath.workspaceValue(extensionDescription)?.fsPath; },\n\t\t\t\tget globalStoragePath() { return that._storagePath.globalValue(extensionDescription).fsPath; },\n\t\t\t\tget logPath() { return path.join(that._initData.logsLocation.fsPath, extensionDescription.identifier.value); },\n\t\t\t\tget logUri() { return URI.joinPath(that._initData.logsLocation, extensionDescription.identifier.value); },\n\t\t\t\tget storageUri() { return that._storagePath.workspaceValue(extensionDescription); },\n\t\t\t\tget globalStorageUri() { return that._storagePath.globalValue(extensionDescription); },\n\t\t\t\tget extensionMode() { return extensionMode; },\n\t\t\t\tget extension() {\n\t\t\t\t\tif (extension === undefined) {\n\t\t\t\t\t\textension = new Extension(that, extensionDescription.identifier, extensionDescription, extensionKind);\n\t\t\t\t\t}\n\t\t\t\t\treturn extension;\n\t\t\t\t},\n\t\t\t\tget extensionRuntime() {\n\t\t\t\t\tcheckProposedApiEnabled(extensionDescription);\n\t\t\t\t\treturn that.extensionRuntime;\n\t\t\t\t},\n\t\t\t\tget environmentVariableCollection() { return that._extHostTerminalService.getEnvironmentVariableCollection(extensionDescription); }\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate static _callActivate(logService: ILogService, extensionId: ExtensionIdentifier, extensionModule: IExtensionModule, context: vscode.ExtensionContext, activationTimesBuilder: ExtensionActivationTimesBuilder): Promise<ActivatedExtension> {\n\t\t// Make sure the extension's surface is not undefined\n\t\textensionModule = extensionModule || {\n\t\t\tactivate: undefined,\n\t\t\tdeactivate: undefined\n\t\t};\n\n\t\treturn this._callActivateOptional(logService, extensionId, extensionModule, context, activationTimesBuilder).then((extensionExports) => {\n\t\t\treturn new ActivatedExtension(false, null, activationTimesBuilder.build(), extensionModule, extensionExports, context.subscriptions);\n\t\t});\n\t}\n\n\tprivate static _callActivateOptional(logService: ILogService, extensionId: ExtensionIdentifier, extensionModule: IExtensionModule, context: vscode.ExtensionContext, activationTimesBuilder: ExtensionActivationTimesBuilder): Promise<IExtensionAPI> {\n\t\tif (typeof extensionModule.activate === 'function') {\n\t\t\ttry {\n\t\t\t\tactivationTimesBuilder.activateCallStart();\n\t\t\t\tlogService.trace(`ExtensionService#_callActivateOptional ${extensionId.value}`);\n\t\t\t\tconst scope = typeof global === 'object' ? global : self; // `global` is nodejs while `self` is for workers\n\t\t\t\tconst activateResult: Promise<IExtensionAPI> = extensionModule.activate.apply(scope, [context]);\n\t\t\t\tactivationTimesBuilder.activateCallStop();\n\n\t\t\t\tactivationTimesBuilder.activateResolveStart();\n\t\t\t\treturn Promise.resolve(activateResult).then((value) => {\n\t\t\t\t\tactivationTimesBuilder.activateResolveStop();\n\t\t\t\t\treturn value;\n\t\t\t\t});\n\t\t\t} catch (err) {\n\t\t\t\treturn Promise.reject(err);\n\t\t\t}\n\t\t} else {\n\t\t\t// No activate found => the module is the extension's exports\n\t\t\treturn Promise.resolve<IExtensionAPI>(extensionModule);\n\t\t}\n\t}\n\n\t// -- eager activation\n\n\tprivate _activateOneStartupFinished(desc: IExtensionDescription, activationEvent: string): void {\n\t\tthis._activateById(desc.identifier, {\n\t\t\tstartup: false,\n\t\t\textensionId: desc.identifier,\n\t\t\tactivationEvent: activationEvent\n\t\t}).then(undefined, (err) => {\n\t\t\tthis._logService.error(err);\n\t\t});\n\t}\n\n\tprivate _activateAllStartupFinished(): void {\n\t\t// startup is considered finished\n\t\tthis._mainThreadExtensionsProxy.$setPerformanceMarks(performance.getMarks());\n\n\t\tfor (const desc of this._registry.getAllExtensionDescriptions()) {\n\t\t\tif (desc.activationEvents) {\n\t\t\t\tfor (const activationEvent of desc.activationEvents) {\n\t\t\t\t\tif (activationEvent === 'onStartupFinished') {\n\t\t\t\t\t\tthis._activateOneStartupFinished(desc, activationEvent);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Handle \"eager\" activation extensions\n\tprivate _handleEagerExtensions(): Promise<void> {\n\t\tconst starActivation = this._activateByEvent('*', true).then(undefined, (err) => {\n\t\t\tthis._logService.error(err);\n\t\t});\n\n\t\tthis._disposables.add(this._extHostWorkspace.onDidChangeWorkspace((e) => this._handleWorkspaceContainsEagerExtensions(e.added)));\n\t\tconst folders = this._extHostWorkspace.workspace ? this._extHostWorkspace.workspace.folders : [];\n\t\tconst workspaceContainsActivation = this._handleWorkspaceContainsEagerExtensions(folders);\n\t\tconst eagerExtensionsActivation = Promise.all([starActivation, workspaceContainsActivation]).then(() => { });\n\n\t\tPromise.race([eagerExtensionsActivation, timeout(10000)]).then(() => {\n\t\t\tthis._activateAllStartupFinished();\n\t\t});\n\n\t\treturn eagerExtensionsActivation;\n\t}\n\n\tprivate _handleWorkspaceContainsEagerExtensions(folders: ReadonlyArray<vscode.WorkspaceFolder>): Promise<void> {\n\t\tif (folders.length === 0) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\treturn Promise.all(\n\t\t\tthis._registry.getAllExtensionDescriptions().map((desc) => {\n\t\t\t\treturn this._handleWorkspaceContainsEagerExtension(folders, desc);\n\t\t\t})\n\t\t).then(() => { });\n\t}\n\n\tprivate async _handleWorkspaceContainsEagerExtension(folders: ReadonlyArray<vscode.WorkspaceFolder>, desc: IExtensionDescription): Promise<void> {\n\t\tif (this.isActivated(desc.identifier)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst localWithRemote = !this._initData.remote.isRemote && !!this._initData.remote.authority;\n\t\tconst host: IExtensionActivationHost = {\n\t\t\tfolders: folders.map(folder => folder.uri),\n\t\t\tforceUsingSearch: localWithRemote,\n\t\t\texists: (uri) => this._hostUtils.exists(uri.fsPath),\n\t\t\tcheckExists: (folders, includes, token) => this._mainThreadWorkspaceProxy.$checkExists(folders, includes, token)\n\t\t};\n\n\t\tconst result = await checkActivateWorkspaceContainsExtension(host, desc);\n\t\tif (!result) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn (\n\t\t\tthis._activateById(desc.identifier, { startup: true, extensionId: desc.identifier, activationEvent: result.activationEvent })\n\t\t\t\t.then(undefined, err => this._logService.error(err))\n\t\t);\n\t}\n\n\tpublic async $extensionTestsExecute(): Promise<number> {\n\t\tawait this._eagerExtensionsActivated.wait();\n\t\ttry {\n\t\t\treturn this._doHandleExtensionTests();\n\t\t} catch (error) {\n\t\t\tconsole.error(error); // ensure any error message makes it onto the console\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate async _doHandleExtensionTests(): Promise<number> {\n\t\tconst { extensionDevelopmentLocationURI, extensionTestsLocationURI } = this._initData.environment;\n\t\tif (!extensionDevelopmentLocationURI || !extensionTestsLocationURI) {\n\t\t\tthrow new Error(nls.localize('extensionTestError1', \"Cannot load test runner.\"));\n\t\t}\n\n\t\t// Require the test runner via node require from the provided path\n\t\tconst testRunner: ITestRunner | INewTestRunner | undefined = await this._loadCommonJSModule(null, extensionTestsLocationURI, new ExtensionActivationTimesBuilder(false));\n\n\t\tif (!testRunner || typeof testRunner.run !== 'function') {\n\t\t\tthrow new Error(nls.localize('extensionTestError', \"Path {0} does not point to a valid extension test runner.\", extensionTestsLocationURI.toString()));\n\t\t}\n\n\t\t// Execute the runner if it follows the old `run` spec\n\t\treturn new Promise<number>((resolve, reject) => {\n\t\t\tconst oldTestRunnerCallback = (error: Error, failures: number | undefined) => {\n\t\t\t\tif (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t} else {\n\t\t\t\t\tresolve((typeof failures === 'number' && failures > 0) ? 1 /* ERROR */ : 0 /* OK */);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst extensionTestsPath = originalFSPath(extensionTestsLocationURI); // for the old test runner API\n\n\t\t\tconst runResult = testRunner.run(extensionTestsPath, oldTestRunnerCallback);\n\n\t\t\t// Using the new API `run(): Promise<void>`\n\t\t\tif (runResult && runResult.then) {\n\t\t\t\trunResult\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tresolve(0);\n\t\t\t\t\t})\n\t\t\t\t\t.catch((err: Error) => {\n\t\t\t\t\t\treject(err.toString());\n\t\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic async $extensionTestsExit(code: number): Promise<void> {\n\t\tthis._logService.info(`extension host terminating: test runner requested exit with code ${code}`);\n\t\tthis._logService.info(`exiting with code ${code}`);\n\t\tthis._logService.flush();\n\t\tthis._hostUtils.exit(code);\n\t}\n\n\tprivate _startExtensionHost(): Promise<void> {\n\t\tif (this._started) {\n\t\t\tthrow new Error(`Extension host is already started!`);\n\t\t}\n\t\tthis._started = true;\n\n\t\treturn this._readyToStartExtensionHost.wait()\n\t\t\t.then(() => this._readyToRunExtensions.open())\n\t\t\t.then(() => this._handleEagerExtensions())\n\t\t\t.then(() => {\n\t\t\t\tthis._eagerExtensionsActivated.open();\n\t\t\t\tthis._logService.info(`eager extensions activated`);\n\t\t\t});\n\t}\n\n\t// -- called by extensions\n\n\tpublic registerRemoteAuthorityResolver(authorityPrefix: string, resolver: vscode.RemoteAuthorityResolver): vscode.Disposable {\n\t\tthis._resolvers[authorityPrefix] = resolver;\n\t\treturn toDisposable(() => {\n\t\t\tdelete this._resolvers[authorityPrefix];\n\t\t});\n\t}\n\n\t// -- called by main thread\n\n\tpublic async $resolveAuthority(remoteAuthority: string, resolveAttempt: number): Promise<IResolveAuthorityResult> {\n\t\tconst authorityPlusIndex = remoteAuthority.indexOf('+');\n\t\tif (authorityPlusIndex === -1) {\n\t\t\tthrow new Error(`Not an authority that can be resolved!`);\n\t\t}\n\t\tconst authorityPrefix = remoteAuthority.substr(0, authorityPlusIndex);\n\n\t\tawait this._almostReadyToRunExtensions.wait();\n\t\tawait this._activateByEvent(`onResolveRemoteAuthority:${authorityPrefix}`, false);\n\n\t\tconst resolver = this._resolvers[authorityPrefix];\n\t\tif (!resolver) {\n\t\t\treturn {\n\t\t\t\ttype: 'error',\n\t\t\t\terror: {\n\t\t\t\t\tcode: RemoteAuthorityResolverErrorCode.NoResolverFound,\n\t\t\t\t\tmessage: `No remote extension installed to resolve ${authorityPrefix}.`,\n\t\t\t\t\tdetail: undefined\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\ttry {\n\t\t\tthis._disposables.add(await this._extHostTunnelService.setTunnelExtensionFunctions(resolver));\n\t\t\tperformance.mark(`code/extHost/willResolveAuthority/${authorityPrefix}`);\n\t\t\tconst result = await resolver.resolve(remoteAuthority, { resolveAttempt });\n\t\t\tperformance.mark(`code/extHost/didResolveAuthorityOK/${authorityPrefix}`);\n\n\t\t\t// Split merged API result into separate authority/options\n\t\t\tconst authority: ResolvedAuthority = {\n\t\t\t\tauthority: remoteAuthority,\n\t\t\t\thost: result.host,\n\t\t\t\tport: result.port,\n\t\t\t\tconnectionToken: result.connectionToken\n\t\t\t};\n\t\t\tconst options: ResolvedOptions = {\n\t\t\t\textensionHostEnv: result.extensionHostEnv,\n\t\t\t\ttrust: result.trust\n\t\t\t};\n\n\t\t\treturn {\n\t\t\t\ttype: 'ok',\n\t\t\t\tvalue: {\n\t\t\t\t\tauthority,\n\t\t\t\t\toptions,\n\t\t\t\t\ttunnelInformation: { environmentTunnels: result.environmentTunnels }\n\t\t\t\t}\n\t\t\t};\n\t\t} catch (err) {\n\t\t\tperformance.mark(`code/extHost/didResolveAuthorityError/${authorityPrefix}`);\n\t\t\tif (err instanceof RemoteAuthorityResolverError) {\n\t\t\t\treturn {\n\t\t\t\t\ttype: 'error',\n\t\t\t\t\terror: {\n\t\t\t\t\t\tcode: err._code,\n\t\t\t\t\t\tmessage: err._message,\n\t\t\t\t\t\tdetail: err._detail\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tpublic $startExtensionHost(enabledExtensionIds: ExtensionIdentifier[]): Promise<void> {\n\t\tthis._registry.keepOnly(enabledExtensionIds);\n\t\treturn this._startExtensionHost();\n\t}\n\n\tpublic $activateByEvent(activationEvent: string, activationKind: ActivationKind): Promise<void> {\n\t\tif (activationKind === ActivationKind.Immediate) {\n\t\t\treturn this._activateByEvent(activationEvent, false);\n\t\t}\n\n\t\treturn (\n\t\t\tthis._readyToRunExtensions.wait()\n\t\t\t\t.then(_ => this._activateByEvent(activationEvent, false))\n\t\t);\n\t}\n\n\tpublic async $activate(extensionId: ExtensionIdentifier, reason: ExtensionActivationReason): Promise<boolean> {\n\t\tawait this._readyToRunExtensions.wait();\n\t\tif (!this._registry.getExtensionDescription(extensionId)) {\n\t\t\t// unknown extension => ignore\n\t\t\treturn false;\n\t\t}\n\t\tawait this._activateById(extensionId, reason);\n\t\treturn true;\n\t}\n\n\tpublic async $deltaExtensions(toAdd: IExtensionDescription[], toRemove: ExtensionIdentifier[]): Promise<void> {\n\t\ttoAdd.forEach((extension) => (<any>extension).extensionLocation = URI.revive(extension.extensionLocation));\n\n\t\tconst trie = await this.getExtensionPathIndex();\n\n\t\tawait Promise.all(toRemove.map(async (extensionId) => {\n\t\t\tconst extensionDescription = this._registry.getExtensionDescription(extensionId);\n\t\t\tif (!extensionDescription) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst realpathValue = await this._hostUtils.realpath(extensionDescription.extensionLocation.fsPath);\n\t\t\ttrie.delete(URI.file(realpathValue).fsPath);\n\t\t}));\n\n\t\tawait Promise.all(toAdd.map(async (extensionDescription) => {\n\t\t\tconst realpathValue = await this._hostUtils.realpath(extensionDescription.extensionLocation.fsPath);\n\t\t\ttrie.set(URI.file(realpathValue).fsPath, extensionDescription);\n\t\t}));\n\n\t\tthis._registry.deltaExtensions(toAdd, toRemove);\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tpublic async $test_latency(n: number): Promise<number> {\n\t\treturn n;\n\t}\n\n\tpublic async $test_up(b: VSBuffer): Promise<number> {\n\t\treturn b.byteLength;\n\t}\n\n\tpublic async $test_down(size: number): Promise<VSBuffer> {\n\t\tlet buff = VSBuffer.alloc(size);\n\t\tlet value = Math.random() % 256;\n\t\tfor (let i = 0; i < size; i++) {\n\t\t\tbuff.writeUInt8(value, i);\n\t\t}\n\t\treturn buff;\n\t}\n\n\tpublic async $updateRemoteConnectionData(connectionData: IRemoteConnectionData): Promise<void> {\n\t\tthis._remoteConnectionData = connectionData;\n\t\tthis._onDidChangeRemoteConnectionData.fire();\n\t}\n\n\tprotected abstract _beforeAlmostReadyToRunExtensions(): Promise<void>;\n\tprotected abstract _getEntryPoint(extensionDescription: IExtensionDescription): string | undefined;\n\tprotected abstract _loadCommonJSModule<T>(extensionId: ExtensionIdentifier | null, module: URI, activationTimesBuilder: ExtensionActivationTimesBuilder): Promise<T>;\n\tpublic abstract $setRemoteEnvironment(env: { [key: string]: string | null }): Promise<void>;\n}\n\n\ntype TelemetryActivationEvent = {\n\tid: string;\n\tname: string;\n\textensionVersion: string;\n\tpublisherDisplayName: string;\n\tactivationEvents: string | null;\n\tisBuiltin: boolean;\n\treason: string;\n\treasonId: string;\n};\n\nfunction getTelemetryActivationEvent(extensionDescription: IExtensionDescription, reason: ExtensionActivationReason): TelemetryActivationEvent {\n\tconst event = {\n\t\tid: extensionDescription.identifier.value,\n\t\tname: extensionDescription.name,\n\t\textensionVersion: extensionDescription.version,\n\t\tpublisherDisplayName: extensionDescription.publisher,\n\t\tactivationEvents: extensionDescription.activationEvents ? extensionDescription.activationEvents.join(',') : null,\n\t\tisBuiltin: extensionDescription.isBuiltin,\n\t\treason: reason.activationEvent,\n\t\treasonId: reason.extensionId.value,\n\t};\n\n\treturn event;\n}\n\n\nexport const IExtHostExtensionService = createDecorator<IExtHostExtensionService>('IExtHostExtensionService');\n\nexport interface IExtHostExtensionService extends AbstractExtHostExtensionService {\n\treadonly _serviceBrand: undefined;\n\tinitialize(): Promise<void>;\n\tisActivated(extensionId: ExtensionIdentifier): boolean;\n\tactivateByIdWithErrors(extensionId: ExtensionIdentifier, reason: ExtensionActivationReason): Promise<void>;\n\tdeactivateAll(): Promise<void>;\n\tgetExtensionExports(extensionId: ExtensionIdentifier): IExtensionAPI | null | undefined;\n\tgetExtensionRegistry(): Promise<ExtensionDescriptionRegistry>;\n\tgetExtensionPathIndex(): Promise<TernarySearchTree<string, IExtensionDescription>>;\n\tregisterRemoteAuthorityResolver(authorityPrefix: string, resolver: vscode.RemoteAuthorityResolver): vscode.Disposable;\n\n\tonDidChangeRemoteConnectionData: Event<void>;\n\tgetRemoteConnectionData(): IRemoteConnectionData | null;\n}\n\nexport class Extension<T> implements vscode.Extension<T> {\n\n\t#extensionService: IExtHostExtensionService;\n\t#originExtensionId: ExtensionIdentifier;\n\t#identifier: ExtensionIdentifier;\n\n\treadonly id: string;\n\treadonly extensionUri: URI;\n\treadonly extensionPath: string;\n\treadonly packageJSON: IExtensionDescription;\n\treadonly extensionKind: vscode.ExtensionKind;\n\n\tconstructor(extensionService: IExtHostExtensionService, originExtensionId: ExtensionIdentifier, description: IExtensionDescription, kind: ExtensionKind) {\n\t\tthis.#extensionService = extensionService;\n\t\tthis.#originExtensionId = originExtensionId;\n\t\tthis.#identifier = description.identifier;\n\t\tthis.id = description.identifier.value;\n\t\tthis.extensionUri = description.extensionLocation;\n\t\tthis.extensionPath = path.normalize(originalFSPath(description.extensionLocation));\n\t\tthis.packageJSON = description;\n\t\tthis.extensionKind = kind;\n\t}\n\n\tget isActive(): boolean {\n\t\treturn this.#extensionService.isActivated(this.#identifier);\n\t}\n\n\tget exports(): T {\n\t\tif (this.packageJSON.api === 'none') {\n\t\t\treturn undefined!; // Strict nulloverride - Public api\n\t\t}\n\t\treturn <T>this.#extensionService.getExtensionExports(this.#identifier);\n\t}\n\n\tactivate(): Thenable<T> {\n\t\treturn this.#extensionService.activateByIdWithErrors(this.#identifier, { startup: false, extensionId: this.#originExtensionId, activationEvent: 'api' }).then(() => this.exports);\n\t}\n}\n"]}