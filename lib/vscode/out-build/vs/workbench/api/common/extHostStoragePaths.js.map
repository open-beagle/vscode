{"version":3,"file":"extHostStoragePaths.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/api/common/extHostStoragePaths.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IExtHostInitDataService } from 'vs/workbench/api/common/extHostInitDataService';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IEnvironment, IStaticWorkspaceData } from 'vs/workbench/api/common/extHost.protocol';\nimport { IExtHostConsumerFileSystem } from 'vs/workbench/api/common/extHostFileSystemConsumer';\nimport { URI } from 'vs/base/common/uri';\n\nexport const IExtensionStoragePaths = createDecorator<IExtensionStoragePaths>('IExtensionStoragePaths');\n\nexport interface IExtensionStoragePaths {\n\treadonly _serviceBrand: undefined;\n\twhenReady: Promise<any>;\n\tworkspaceValue(extension: IExtensionDescription): URI | undefined;\n\tglobalValue(extension: IExtensionDescription): URI;\n}\n\nexport class ExtensionStoragePaths implements IExtensionStoragePaths {\n\n\treadonly _serviceBrand: undefined;\n\n\tprivate readonly _workspace?: IStaticWorkspaceData;\n\tprivate readonly _environment: IEnvironment;\n\n\treadonly whenReady: Promise<URI | undefined>;\n\tprivate _value?: URI;\n\n\tconstructor(\n\t\t@IExtHostInitDataService initData: IExtHostInitDataService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@IExtHostConsumerFileSystem private readonly _extHostFileSystem: IExtHostConsumerFileSystem\n\t) {\n\t\tthis._workspace = initData.workspace ?? undefined;\n\t\tthis._environment = initData.environment;\n\t\tthis.whenReady = this._getOrCreateWorkspaceStoragePath().then(value => this._value = value);\n\t}\n\n\tprivate async _getOrCreateWorkspaceStoragePath(): Promise<URI | undefined> {\n\t\tif (!this._workspace) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\t\tconst storageName = this._workspace.id;\n\t\tconst storageUri = URI.joinPath(this._environment.workspaceStorageHome, storageName);\n\n\t\ttry {\n\t\t\tawait this._extHostFileSystem.value.stat(storageUri);\n\t\t\tthis._logService.trace('[ExtHostStorage] storage dir already exists', storageUri);\n\t\t\treturn storageUri;\n\t\t} catch {\n\t\t\t// doesn't exist, that's OK\n\t\t}\n\n\t\ttry {\n\t\t\tthis._logService.trace('[ExtHostStorage] creating dir and metadata-file', storageUri);\n\t\t\tawait this._extHostFileSystem.value.createDirectory(storageUri);\n\t\t\tawait this._extHostFileSystem.value.writeFile(\n\t\t\t\tURI.joinPath(storageUri, 'meta.json'),\n\t\t\t\tnew TextEncoder().encode(JSON.stringify({\n\t\t\t\t\tid: this._workspace.id,\n\t\t\t\t\tconfiguration: URI.revive(this._workspace.configuration)?.toString(),\n\t\t\t\t\tname: this._workspace.name\n\t\t\t\t}, undefined, 2))\n\t\t\t);\n\t\t\treturn storageUri;\n\n\t\t} catch (e) {\n\t\t\tthis._logService.error('[ExtHostStorage]', e);\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tworkspaceValue(extension: IExtensionDescription): URI | undefined {\n\t\tif (this._value) {\n\t\t\treturn URI.joinPath(this._value, extension.identifier.value);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tglobalValue(extension: IExtensionDescription): URI {\n\t\treturn URI.joinPath(this._environment.globalStorageHome, extension.identifier.value.toLowerCase());\n\t}\n}\n"]}