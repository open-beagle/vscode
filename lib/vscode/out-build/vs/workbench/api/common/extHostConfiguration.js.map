{"version":3,"file":"extHostConfiguration.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/api/common/extHostConfiguration.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { mixin, deepClone } from 'vs/base/common/objects';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport type * as vscode from 'vscode';\nimport { ExtHostWorkspace, IExtHostWorkspace } from 'vs/workbench/api/common/extHostWorkspace';\nimport { ExtHostConfigurationShape, MainThreadConfigurationShape, IConfigurationInitData, MainContext } from './extHost.protocol';\nimport { ConfigurationTarget as ExtHostConfigurationTarget } from './extHostTypes';\nimport { ConfigurationTarget, IConfigurationChange, IConfigurationData, IConfigurationOverrides } from 'vs/platform/configuration/common/configuration';\nimport { Configuration, ConfigurationChangeEvent } from 'vs/platform/configuration/common/configurationModels';\nimport { ConfigurationScope, OVERRIDE_PROPERTY_PATTERN } from 'vs/platform/configuration/common/configurationRegistry';\nimport { isObject } from 'vs/base/common/types';\nimport { ExtensionIdentifier, IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { Barrier } from 'vs/base/common/async';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IExtHostRpcService } from 'vs/workbench/api/common/extHostRpcService';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { Workspace } from 'vs/platform/workspace/common/workspace';\nimport { URI } from 'vs/base/common/uri';\n\nfunction lookUp(tree: any, key: string) {\n\tif (key) {\n\t\tconst parts = key.split('.');\n\t\tlet node = tree;\n\t\tfor (let i = 0; node && i < parts.length; i++) {\n\t\t\tnode = node[parts[i]];\n\t\t}\n\t\treturn node;\n\t}\n}\n\ntype ConfigurationInspect<T> = {\n\tkey: string;\n\n\tdefaultValue?: T;\n\tglobalValue?: T;\n\tworkspaceValue?: T,\n\tworkspaceFolderValue?: T,\n\n\tdefaultLanguageValue?: T;\n\tglobalLanguageValue?: T;\n\tworkspaceLanguageValue?: T;\n\tworkspaceFolderLanguageValue?: T;\n\n\tlanguageIds?: string[];\n};\n\nfunction isUri(thing: any): thing is vscode.Uri {\n\treturn thing instanceof URI;\n}\n\nfunction isResourceLanguage(thing: any): thing is { uri: URI, languageId: string } {\n\treturn thing\n\t\t&& thing.uri instanceof URI\n\t\t&& (thing.languageId && typeof thing.languageId === 'string');\n}\n\nfunction isLanguage(thing: any): thing is { languageId: string } {\n\treturn thing\n\t\t&& !thing.uri\n\t\t&& (thing.languageId && typeof thing.languageId === 'string');\n}\n\nfunction isWorkspaceFolder(thing: any): thing is vscode.WorkspaceFolder {\n\treturn thing\n\t\t&& thing.uri instanceof URI\n\t\t&& (!thing.name || typeof thing.name === 'string')\n\t\t&& (!thing.index || typeof thing.index === 'number');\n}\n\nfunction scopeToOverrides(scope: vscode.ConfigurationScope | undefined | null): IConfigurationOverrides | undefined {\n\tif (isUri(scope)) {\n\t\treturn { resource: scope };\n\t}\n\tif (isResourceLanguage(scope)) {\n\t\treturn { resource: scope.uri, overrideIdentifier: scope.languageId };\n\t}\n\tif (isLanguage(scope)) {\n\t\treturn { overrideIdentifier: scope.languageId };\n\t}\n\tif (isWorkspaceFolder(scope)) {\n\t\treturn { resource: scope.uri };\n\t}\n\tif (scope === null) {\n\t\treturn { resource: null };\n\t}\n\treturn undefined;\n}\n\nexport class ExtHostConfiguration implements ExtHostConfigurationShape {\n\n\treadonly _serviceBrand: undefined;\n\n\tprivate readonly _proxy: MainThreadConfigurationShape;\n\tprivate readonly _logService: ILogService;\n\tprivate readonly _extHostWorkspace: ExtHostWorkspace;\n\tprivate readonly _barrier: Barrier;\n\tprivate _actual: ExtHostConfigProvider | null;\n\n\tconstructor(\n\t\t@IExtHostRpcService extHostRpc: IExtHostRpcService,\n\t\t@IExtHostWorkspace extHostWorkspace: IExtHostWorkspace,\n\t\t@ILogService logService: ILogService,\n\t) {\n\t\tthis._proxy = extHostRpc.getProxy(MainContext.MainThreadConfiguration);\n\t\tthis._extHostWorkspace = extHostWorkspace;\n\t\tthis._logService = logService;\n\t\tthis._barrier = new Barrier();\n\t\tthis._actual = null;\n\t}\n\n\tpublic getConfigProvider(): Promise<ExtHostConfigProvider> {\n\t\treturn this._barrier.wait().then(_ => this._actual!);\n\t}\n\n\t$initializeConfiguration(data: IConfigurationInitData): void {\n\t\tthis._actual = new ExtHostConfigProvider(this._proxy, this._extHostWorkspace, data, this._logService);\n\t\tthis._barrier.open();\n\t}\n\n\t$acceptConfigurationChanged(data: IConfigurationInitData, change: IConfigurationChange): void {\n\t\tthis.getConfigProvider().then(provider => provider.$acceptConfigurationChanged(data, change));\n\t}\n}\n\nexport class ExtHostConfigProvider {\n\n\tprivate readonly _onDidChangeConfiguration = new Emitter<vscode.ConfigurationChangeEvent>();\n\tprivate readonly _proxy: MainThreadConfigurationShape;\n\tprivate readonly _extHostWorkspace: ExtHostWorkspace;\n\tprivate _configurationScopes: Map<string, ConfigurationScope | undefined>;\n\tprivate _configuration: Configuration;\n\tprivate _logService: ILogService;\n\n\tconstructor(proxy: MainThreadConfigurationShape, extHostWorkspace: ExtHostWorkspace, data: IConfigurationInitData, logService: ILogService) {\n\t\tthis._proxy = proxy;\n\t\tthis._logService = logService;\n\t\tthis._extHostWorkspace = extHostWorkspace;\n\t\tthis._configuration = Configuration.parse(data);\n\t\tthis._configurationScopes = this._toMap(data.configurationScopes);\n\t}\n\n\tget onDidChangeConfiguration(): Event<vscode.ConfigurationChangeEvent> {\n\t\treturn this._onDidChangeConfiguration && this._onDidChangeConfiguration.event;\n\t}\n\n\t$acceptConfigurationChanged(data: IConfigurationInitData, change: IConfigurationChange) {\n\t\tconst previous = { data: this._configuration.toData(), workspace: this._extHostWorkspace.workspace };\n\t\tthis._configuration = Configuration.parse(data);\n\t\tthis._configurationScopes = this._toMap(data.configurationScopes);\n\t\tthis._onDidChangeConfiguration.fire(this._toConfigurationChangeEvent(change, previous));\n\t}\n\n\tgetConfiguration(section?: string, scope?: vscode.ConfigurationScope | null, extensionDescription?: IExtensionDescription): vscode.WorkspaceConfiguration {\n\t\tconst overrides = scopeToOverrides(scope) || {};\n\t\tconst config = this._toReadonlyValue(section\n\t\t\t? lookUp(this._configuration.getValue(undefined, overrides, this._extHostWorkspace.workspace), section)\n\t\t\t: this._configuration.getValue(undefined, overrides, this._extHostWorkspace.workspace));\n\n\t\tif (section) {\n\t\t\tthis._validateConfigurationAccess(section, overrides, extensionDescription?.identifier);\n\t\t}\n\n\t\tfunction parseConfigurationTarget(arg: boolean | ExtHostConfigurationTarget): ConfigurationTarget | null {\n\t\t\tif (arg === undefined || arg === null) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif (typeof arg === 'boolean') {\n\t\t\t\treturn arg ? ConfigurationTarget.USER : ConfigurationTarget.WORKSPACE;\n\t\t\t}\n\n\t\t\tswitch (arg) {\n\t\t\t\tcase ExtHostConfigurationTarget.Global: return ConfigurationTarget.USER;\n\t\t\t\tcase ExtHostConfigurationTarget.Workspace: return ConfigurationTarget.WORKSPACE;\n\t\t\t\tcase ExtHostConfigurationTarget.WorkspaceFolder: return ConfigurationTarget.WORKSPACE_FOLDER;\n\t\t\t}\n\t\t}\n\n\t\tconst result: vscode.WorkspaceConfiguration = {\n\t\t\thas(key: string): boolean {\n\t\t\t\treturn typeof lookUp(config, key) !== 'undefined';\n\t\t\t},\n\t\t\tget: <T>(key: string, defaultValue?: T) => {\n\t\t\t\tthis._validateConfigurationAccess(section ? `${section}.${key}` : key, overrides, extensionDescription?.identifier);\n\t\t\t\tlet result = lookUp(config, key);\n\t\t\t\tif (typeof result === 'undefined') {\n\t\t\t\t\tresult = defaultValue;\n\t\t\t\t} else {\n\t\t\t\t\tlet clonedConfig: any | undefined = undefined;\n\t\t\t\t\tconst cloneOnWriteProxy = (target: any, accessor: string): any => {\n\t\t\t\t\t\tlet clonedTarget: any | undefined = undefined;\n\t\t\t\t\t\tconst cloneTarget = () => {\n\t\t\t\t\t\t\tclonedConfig = clonedConfig ? clonedConfig : deepClone(config);\n\t\t\t\t\t\t\tclonedTarget = clonedTarget ? clonedTarget : lookUp(clonedConfig, accessor);\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn isObject(target) ?\n\t\t\t\t\t\t\tnew Proxy(target, {\n\t\t\t\t\t\t\t\tget: (target: any, property: PropertyKey) => {\n\t\t\t\t\t\t\t\t\tif (typeof property === 'string' && property.toLowerCase() === 'tojson') {\n\t\t\t\t\t\t\t\t\t\tcloneTarget();\n\t\t\t\t\t\t\t\t\t\treturn () => clonedTarget;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (clonedConfig) {\n\t\t\t\t\t\t\t\t\t\tclonedTarget = clonedTarget ? clonedTarget : lookUp(clonedConfig, accessor);\n\t\t\t\t\t\t\t\t\t\treturn clonedTarget[property];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tconst result = target[property];\n\t\t\t\t\t\t\t\t\tif (typeof property === 'string') {\n\t\t\t\t\t\t\t\t\t\treturn cloneOnWriteProxy(result, `${accessor}.${property}`);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tset: (_target: any, property: PropertyKey, value: any) => {\n\t\t\t\t\t\t\t\t\tcloneTarget();\n\t\t\t\t\t\t\t\t\tif (clonedTarget) {\n\t\t\t\t\t\t\t\t\t\tclonedTarget[property] = value;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tdeleteProperty: (_target: any, property: PropertyKey) => {\n\t\t\t\t\t\t\t\t\tcloneTarget();\n\t\t\t\t\t\t\t\t\tif (clonedTarget) {\n\t\t\t\t\t\t\t\t\t\tdelete clonedTarget[property];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tdefineProperty: (_target: any, property: PropertyKey, descriptor: any) => {\n\t\t\t\t\t\t\t\t\tcloneTarget();\n\t\t\t\t\t\t\t\t\tif (clonedTarget) {\n\t\t\t\t\t\t\t\t\t\tObject.defineProperty(clonedTarget, property, descriptor);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}) : target;\n\t\t\t\t\t};\n\t\t\t\t\tresult = cloneOnWriteProxy(result, key);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t},\n\t\t\tupdate: (key: string, value: any, extHostConfigurationTarget: ExtHostConfigurationTarget | boolean, scopeToLanguage?: boolean) => {\n\t\t\t\tkey = section ? `${section}.${key}` : key;\n\t\t\t\tconst target = parseConfigurationTarget(extHostConfigurationTarget);\n\t\t\t\tif (value !== undefined) {\n\t\t\t\t\treturn this._proxy.$updateConfigurationOption(target, key, value, overrides, scopeToLanguage);\n\t\t\t\t} else {\n\t\t\t\t\treturn this._proxy.$removeConfigurationOption(target, key, overrides, scopeToLanguage);\n\t\t\t\t}\n\t\t\t},\n\t\t\tinspect: <T>(key: string): ConfigurationInspect<T> | undefined => {\n\t\t\t\tkey = section ? `${section}.${key}` : key;\n\t\t\t\tconst config = deepClone(this._configuration.inspect<T>(key, overrides, this._extHostWorkspace.workspace));\n\t\t\t\tif (config) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tkey,\n\n\t\t\t\t\t\tdefaultValue: config.default?.value,\n\t\t\t\t\t\tglobalValue: config.user?.value,\n\t\t\t\t\t\tworkspaceValue: config.workspace?.value,\n\t\t\t\t\t\tworkspaceFolderValue: config.workspaceFolder?.value,\n\n\t\t\t\t\t\tdefaultLanguageValue: config.default?.override,\n\t\t\t\t\t\tglobalLanguageValue: config.user?.override,\n\t\t\t\t\t\tworkspaceLanguageValue: config.workspace?.override,\n\t\t\t\t\t\tworkspaceFolderLanguageValue: config.workspaceFolder?.override,\n\n\t\t\t\t\t\tlanguageIds: config.overrideIdentifiers\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t};\n\n\t\tif (typeof config === 'object') {\n\t\t\tmixin(result, config, false);\n\t\t}\n\n\t\treturn <vscode.WorkspaceConfiguration>Object.freeze(result);\n\t}\n\n\tprivate _toReadonlyValue(result: any): any {\n\t\tconst readonlyProxy = (target: any): any => {\n\t\t\treturn isObject(target) ?\n\t\t\t\tnew Proxy(target, {\n\t\t\t\t\tget: (target: any, property: PropertyKey) => readonlyProxy(target[property]),\n\t\t\t\t\tset: (_target: any, property: PropertyKey, _value: any) => { throw new Error(`TypeError: Cannot assign to read only property '${String(property)}' of object`); },\n\t\t\t\t\tdeleteProperty: (_target: any, property: PropertyKey) => { throw new Error(`TypeError: Cannot delete read only property '${String(property)}' of object`); },\n\t\t\t\t\tdefineProperty: (_target: any, property: PropertyKey) => { throw new Error(`TypeError: Cannot define property '${String(property)}' for a readonly object`); },\n\t\t\t\t\tsetPrototypeOf: (_target: any) => { throw new Error(`TypeError: Cannot set prototype for a readonly object`); },\n\t\t\t\t\tisExtensible: () => false,\n\t\t\t\t\tpreventExtensions: () => true\n\t\t\t\t}) : target;\n\t\t};\n\t\treturn readonlyProxy(result);\n\t}\n\n\tprivate _validateConfigurationAccess(key: string, overrides?: IConfigurationOverrides, extensionId?: ExtensionIdentifier): void {\n\t\tconst scope = OVERRIDE_PROPERTY_PATTERN.test(key) ? ConfigurationScope.RESOURCE : this._configurationScopes.get(key);\n\t\tconst extensionIdText = extensionId ? `[${extensionId.value}] ` : '';\n\t\tif (ConfigurationScope.RESOURCE === scope) {\n\t\t\tif (typeof overrides?.resource === 'undefined') {\n\t\t\t\tthis._logService.warn(`${extensionIdText}Accessing a resource scoped configuration without providing a resource is not expected. To get the effective value for '${key}', provide the URI of a resource or 'null' for any resource.`);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tif (ConfigurationScope.WINDOW === scope) {\n\t\t\tif (overrides?.resource) {\n\t\t\t\tthis._logService.warn(`${extensionIdText}Accessing a window scoped configuration for a resource is not expected. To associate '${key}' to a resource, define its scope to 'resource' in configuration contributions in 'package.json'.`);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\n\tprivate _toConfigurationChangeEvent(change: IConfigurationChange, previous: { data: IConfigurationData, workspace: Workspace | undefined }): vscode.ConfigurationChangeEvent {\n\t\tconst event = new ConfigurationChangeEvent(change, previous, this._configuration, this._extHostWorkspace.workspace);\n\t\treturn Object.freeze({\n\t\t\taffectsConfiguration: (section: string, scope?: vscode.ConfigurationScope) => event.affectsConfiguration(section, scopeToOverrides(scope))\n\t\t});\n\t}\n\n\tprivate _toMap(scopes: [string, ConfigurationScope | undefined][]): Map<string, ConfigurationScope | undefined> {\n\t\treturn scopes.reduce((result, scope) => { result.set(scope[0], scope[1]); return result; }, new Map<string, ConfigurationScope | undefined>());\n\t}\n\n}\n\nexport const IExtHostConfiguration = createDecorator<IExtHostConfiguration>('IExtHostConfiguration');\nexport interface IExtHostConfiguration extends ExtHostConfiguration { }\n"]}