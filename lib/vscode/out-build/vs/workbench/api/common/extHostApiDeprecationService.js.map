{"version":3,"file":"extHostApiDeprecationService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/api/common/extHostApiDeprecationService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAcnF,QAAA,6BAA6B,GAAG,CAAA,GAAA,+BAAe,CAAA,CAAgC,+BAA+B,CAAC,CAAC;IAE7H,IAAa,4BAA4B,GAAzC,MAAa,4BAA4B;QAOxC,YACqB,GAAuB,EACb,kBAA+B;YAA/B,uBAAkB,GAAlB,kBAAkB,CAAa;YAL7C,oBAAe,GAAG,IAAI,GAAG,EAAU,CAAC;YAOpD,IAAI,CAAC,eAAe,GAAG,GAAG,CAAC,QAAQ,CAAC,eAAe,CAAC,WAAW,CAAC,mBAAmB,CAAC,CAAC;QACtF,CAAC;QAEM,MAAM,CAAC,KAAa,EAAE,SAAgC,EAAE,mBAA2B;YACzF,MAAM,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;YAC/C,IAAI,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;gBAClC,OAAO;aACP;YACD,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAE9B,IAAI,SAAS,CAAC,kBAAkB,EAAE;gBACjC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,0BAA0B,KAAK,oBAAoB,mBAAmB,EAAE,CAAC,CAAC;aACvG;YAUD,IAAI,CAAC,eAAe,CAAC,WAAW,CAAiD,2BAA2B,EAAE;gBAC7G,WAAW,EAAE,SAAS,CAAC,UAAU,CAAC,KAAK;gBACvC,KAAK,EAAE,KAAK;aACZ,CAAC,CAAC;QACJ,CAAC;QAEO,WAAW,CAAC,KAAa,EAAE,SAAgC;YAClE,OAAO,GAAG,KAAK,IAAI,SAAS,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;QACjD,CAAC;KACD,CAAA;IA1CY,4BAA4B;QAQtC,WAAA,sCAAkB,CAAA;QAClB,WAAA,iBAAW,CAAA;OATD,4BAA4B,CA0CxC;IA1CY,oEAA4B;IA6C5B,QAAA,yBAAyB,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI;QAGnD,MAAM,CAAC,MAAc,EAAE,UAAiC,EAAE,eAAuB;YACvF,OAAO;QACR,CAAC;KACD,EAAE,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport * as extHostProtocol from 'vs/workbench/api/common/extHost.protocol';\nimport { IExtHostRpcService } from 'vs/workbench/api/common/extHostRpcService';\n\nexport interface IExtHostApiDeprecationService {\n\treadonly _serviceBrand: undefined;\n\n\treport(apiId: string, extension: IExtensionDescription, migrationSuggestion: string): void;\n}\n\nexport const IExtHostApiDeprecationService = createDecorator<IExtHostApiDeprecationService>('IExtHostApiDeprecationService');\n\nexport class ExtHostApiDeprecationService implements IExtHostApiDeprecationService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _reportedUsages = new Set<string>();\n\tprivate readonly _telemetryShape: extHostProtocol.MainThreadTelemetryShape;\n\n\tconstructor(\n\t\t@IExtHostRpcService rpc: IExtHostRpcService,\n\t\t@ILogService private readonly _extHostLogService: ILogService,\n\t) {\n\t\tthis._telemetryShape = rpc.getProxy(extHostProtocol.MainContext.MainThreadTelemetry);\n\t}\n\n\tpublic report(apiId: string, extension: IExtensionDescription, migrationSuggestion: string): void {\n\t\tconst key = this.getUsageKey(apiId, extension);\n\t\tif (this._reportedUsages.has(key)) {\n\t\t\treturn;\n\t\t}\n\t\tthis._reportedUsages.add(key);\n\n\t\tif (extension.isUnderDevelopment) {\n\t\t\tthis._extHostLogService.warn(`[Deprecation Warning] '${apiId}' is deprecated. ${migrationSuggestion}`);\n\t\t}\n\n\t\ttype DeprecationTelemetry = {\n\t\t\textensionId: string;\n\t\t\tapiId: string;\n\t\t};\n\t\ttype DeprecationTelemetryMeta = {\n\t\t\textensionId: { classification: 'SystemMetaData', purpose: 'PerformanceAndHealth' };\n\t\t\tapiId: { classification: 'SystemMetaData', purpose: 'PerformanceAndHealth' };\n\t\t};\n\t\tthis._telemetryShape.$publicLog2<DeprecationTelemetry, DeprecationTelemetryMeta>('extHostDeprecatedApiUsage', {\n\t\t\textensionId: extension.identifier.value,\n\t\t\tapiId: apiId,\n\t\t});\n\t}\n\n\tprivate getUsageKey(apiId: string, extension: IExtensionDescription): string {\n\t\treturn `${apiId}-${extension.identifier.value}`;\n\t}\n}\n\n\nexport const NullApiDeprecationService = Object.freeze(new class implements IExtHostApiDeprecationService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tpublic report(_apiId: string, _extension: IExtensionDescription, _warningMessage: string): void {\n\t\t// noop\n\t}\n}());\n"]}