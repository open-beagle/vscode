{"version":3,"file":"extHostWebviewView.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/api/common/extHostWebviewView.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { Emitter } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { ExtHostWebview, ExtHostWebviews, toExtensionData } from 'vs/workbench/api/common/extHostWebview';\nimport type * as vscode from 'vscode';\nimport * as extHostProtocol from './extHost.protocol';\nimport * as extHostTypes from './extHostTypes';\n\nclass ExtHostWebviewView extends Disposable implements vscode.WebviewView {\n\n\treadonly #handle: extHostProtocol.WebviewHandle;\n\treadonly #proxy: extHostProtocol.MainThreadWebviewViewsShape;\n\n\treadonly #viewType: string;\n\treadonly #webview: ExtHostWebview;\n\n\t#isDisposed = false;\n\t#isVisible: boolean;\n\t#title: string | undefined;\n\t#description: string | undefined;\n\n\tconstructor(\n\t\thandle: extHostProtocol.WebviewHandle,\n\t\tproxy: extHostProtocol.MainThreadWebviewViewsShape,\n\t\tviewType: string,\n\t\ttitle: string | undefined,\n\t\twebview: ExtHostWebview,\n\t\tisVisible: boolean,\n\t) {\n\t\tsuper();\n\n\t\tthis.#viewType = viewType;\n\t\tthis.#title = title;\n\t\tthis.#handle = handle;\n\t\tthis.#proxy = proxy;\n\t\tthis.#webview = webview;\n\t\tthis.#isVisible = isVisible;\n\t}\n\n\tpublic override dispose() {\n\t\tif (this.#isDisposed) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.#isDisposed = true;\n\t\tthis.#onDidDispose.fire();\n\n\t\tthis.#webview.dispose();\n\n\t\tsuper.dispose();\n\t}\n\n\treadonly #onDidChangeVisibility = this._register(new Emitter<void>());\n\tpublic readonly onDidChangeVisibility = this.#onDidChangeVisibility.event;\n\n\treadonly #onDidDispose = this._register(new Emitter<void>());\n\tpublic readonly onDidDispose = this.#onDidDispose.event;\n\n\tpublic get title(): string | undefined {\n\t\tthis.assertNotDisposed();\n\t\treturn this.#title;\n\t}\n\n\tpublic set title(value: string | undefined) {\n\t\tthis.assertNotDisposed();\n\t\tif (this.#title !== value) {\n\t\t\tthis.#title = value;\n\t\t\tthis.#proxy.$setWebviewViewTitle(this.#handle, value);\n\t\t}\n\t}\n\n\tpublic get description(): string | undefined {\n\t\tthis.assertNotDisposed();\n\t\treturn this.#description;\n\t}\n\n\tpublic set description(value: string | undefined) {\n\t\tthis.assertNotDisposed();\n\t\tif (this.#description !== value) {\n\t\t\tthis.#description = value;\n\t\t\tthis.#proxy.$setWebviewViewDescription(this.#handle, value);\n\t\t}\n\t}\n\n\tpublic get visible(): boolean { return this.#isVisible; }\n\n\tpublic get webview(): vscode.Webview { return this.#webview; }\n\n\tpublic get viewType(): string { return this.#viewType; }\n\n\t/* internal */ _setVisible(visible: boolean) {\n\t\tif (visible === this.#isVisible || this.#isDisposed) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.#isVisible = visible;\n\t\tthis.#onDidChangeVisibility.fire();\n\t}\n\n\tpublic show(preserveFocus?: boolean): void {\n\t\tthis.assertNotDisposed();\n\t\tthis.#proxy.$show(this.#handle, !!preserveFocus);\n\t}\n\n\tprivate assertNotDisposed() {\n\t\tif (this.#isDisposed) {\n\t\t\tthrow new Error('Webview is disposed');\n\t\t}\n\t}\n}\n\nexport class ExtHostWebviewViews implements extHostProtocol.ExtHostWebviewViewsShape {\n\n\tprivate readonly _proxy: extHostProtocol.MainThreadWebviewViewsShape;\n\n\tprivate readonly _viewProviders = new Map<string, {\n\t\treadonly provider: vscode.WebviewViewProvider;\n\t\treadonly extension: IExtensionDescription;\n\t}>();\n\n\tprivate readonly _webviewViews = new Map<extHostProtocol.WebviewHandle, ExtHostWebviewView>();\n\n\tconstructor(\n\t\tmainContext: extHostProtocol.IMainContext,\n\t\tprivate readonly _extHostWebview: ExtHostWebviews,\n\t) {\n\t\tthis._proxy = mainContext.getProxy(extHostProtocol.MainContext.MainThreadWebviewViews);\n\t}\n\n\tpublic registerWebviewViewProvider(\n\t\textension: IExtensionDescription,\n\t\tviewType: string,\n\t\tprovider: vscode.WebviewViewProvider,\n\t\twebviewOptions?: {\n\t\t\tretainContextWhenHidden?: boolean\n\t\t},\n\t): vscode.Disposable {\n\t\tif (this._viewProviders.has(viewType)) {\n\t\t\tthrow new Error(`View provider for '${viewType}' already registered`);\n\t\t}\n\n\t\tthis._viewProviders.set(viewType, { provider, extension });\n\t\tthis._proxy.$registerWebviewViewProvider(toExtensionData(extension), viewType, {\n\t\t\tretainContextWhenHidden: webviewOptions?.retainContextWhenHidden,\n\t\t\tserializeBuffersForPostMessage: false,\n\t\t});\n\n\t\treturn new extHostTypes.Disposable(() => {\n\t\t\tthis._viewProviders.delete(viewType);\n\t\t\tthis._proxy.$unregisterWebviewViewProvider(viewType);\n\t\t});\n\t}\n\n\tasync $resolveWebviewView(\n\t\twebviewHandle: string,\n\t\tviewType: string,\n\t\ttitle: string | undefined,\n\t\tstate: any,\n\t\tcancellation: CancellationToken,\n\t): Promise<void> {\n\t\tconst entry = this._viewProviders.get(viewType);\n\t\tif (!entry) {\n\t\t\tthrow new Error(`No view provider found for '${viewType}'`);\n\t\t}\n\n\t\tconst { provider, extension } = entry;\n\n\t\tconst webview = this._extHostWebview.createNewWebview(webviewHandle, { /* todo */ }, extension);\n\t\tconst revivedView = new ExtHostWebviewView(webviewHandle, this._proxy, viewType, title, webview, true);\n\n\t\tthis._webviewViews.set(webviewHandle, revivedView);\n\n\t\tawait provider.resolveWebviewView(revivedView, { state }, cancellation);\n\t}\n\n\tasync $onDidChangeWebviewViewVisibility(\n\t\twebviewHandle: string,\n\t\tvisible: boolean\n\t) {\n\t\tconst webviewView = this.getWebviewView(webviewHandle);\n\t\twebviewView._setVisible(visible);\n\t}\n\n\tasync $disposeWebviewView(webviewHandle: string) {\n\t\tconst webviewView = this.getWebviewView(webviewHandle);\n\t\tthis._webviewViews.delete(webviewHandle);\n\t\twebviewView.dispose();\n\n\t\tthis._extHostWebview.deleteWebview(webviewHandle);\n\t}\n\n\tprivate getWebviewView(handle: string): ExtHostWebviewView {\n\t\tconst entry = this._webviewViews.get(handle);\n\t\tif (!entry) {\n\t\t\tthrow new Error('No webview found');\n\t\t}\n\t\treturn entry;\n\t}\n}\n"]}