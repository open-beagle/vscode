{"version":3,"file":"extHostCodeInsets.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/api/common/extHostCodeInsets.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from 'vs/base/common/event';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { ExtHostTextEditor } from 'vs/workbench/api/common/extHostTextEditor';\nimport { ExtHostEditors } from 'vs/workbench/api/common/extHostTextEditors';\nimport type * as vscode from 'vscode';\nimport { ExtHostEditorInsetsShape, MainThreadEditorInsetsShape } from './extHost.protocol';\nimport { asWebviewUri, WebviewInitData } from 'vs/workbench/api/common/shared/webview';\nimport { generateUuid } from 'vs/base/common/uuid';\n\nexport class ExtHostEditorInsets implements ExtHostEditorInsetsShape {\n\n\tprivate _handlePool = 0;\n\tprivate _disposables = new DisposableStore();\n\tprivate _insets = new Map<number, { editor: vscode.TextEditor, inset: vscode.WebviewEditorInset, onDidReceiveMessage: Emitter<any> }>();\n\n\tconstructor(\n\t\tprivate readonly _proxy: MainThreadEditorInsetsShape,\n\t\tprivate readonly _editors: ExtHostEditors,\n\t\tprivate readonly _initData: WebviewInitData\n\t) {\n\n\t\t// dispose editor inset whenever the hosting editor goes away\n\t\tthis._disposables.add(_editors.onDidChangeVisibleTextEditors(() => {\n\t\t\tconst visibleEditor = _editors.getVisibleTextEditors();\n\t\t\tfor (const value of this._insets.values()) {\n\t\t\t\tif (visibleEditor.indexOf(value.editor) < 0) {\n\t\t\t\t\tvalue.inset.dispose(); // will remove from `this._insets`\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t}\n\n\tdispose(): void {\n\t\tthis._insets.forEach(value => value.inset.dispose());\n\t\tthis._disposables.dispose();\n\t}\n\n\tcreateWebviewEditorInset(editor: vscode.TextEditor, line: number, height: number, options: vscode.WebviewOptions | undefined, extension: IExtensionDescription): vscode.WebviewEditorInset {\n\n\t\tlet apiEditor: ExtHostTextEditor | undefined;\n\t\tfor (const candidate of this._editors.getVisibleTextEditors(true)) {\n\t\t\tif (candidate.value === editor) {\n\t\t\t\tapiEditor = <ExtHostTextEditor>candidate;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!apiEditor) {\n\t\t\tthrow new Error('not a visible editor');\n\t\t}\n\n\t\tconst that = this;\n\t\tconst handle = this._handlePool++;\n\t\tconst onDidReceiveMessage = new Emitter<any>();\n\t\tconst onDidDispose = new Emitter<void>();\n\n\t\tconst webview = new class implements vscode.Webview {\n\n\t\t\tprivate readonly _uuid = generateUuid();\n\t\t\tprivate _html: string = '';\n\t\t\tprivate _options: vscode.WebviewOptions = Object.create(null);\n\n\t\t\tasWebviewUri(resource: vscode.Uri): vscode.Uri {\n\t\t\t\treturn asWebviewUri(that._initData, this._uuid, resource);\n\t\t\t}\n\n\t\t\tget cspSource(): string {\n\t\t\t\treturn that._initData.webviewCspSource;\n\t\t\t}\n\n\t\t\tset options(value: vscode.WebviewOptions) {\n\t\t\t\tthis._options = value;\n\t\t\t\tthat._proxy.$setOptions(handle, value);\n\t\t\t}\n\n\t\t\tget options(): vscode.WebviewOptions {\n\t\t\t\treturn this._options;\n\t\t\t}\n\n\t\t\tset html(value: string) {\n\t\t\t\tthis._html = value;\n\t\t\t\tthat._proxy.$setHtml(handle, value);\n\t\t\t}\n\n\t\t\tget html(): string {\n\t\t\t\treturn this._html;\n\t\t\t}\n\n\t\t\tget onDidReceiveMessage(): vscode.Event<any> {\n\t\t\t\treturn onDidReceiveMessage.event;\n\t\t\t}\n\n\t\t\tpostMessage(message: any): Thenable<boolean> {\n\t\t\t\treturn that._proxy.$postMessage(handle, message);\n\t\t\t}\n\t\t};\n\n\t\tconst inset = new class implements vscode.WebviewEditorInset {\n\n\t\t\treadonly editor: vscode.TextEditor = editor;\n\t\t\treadonly line: number = line;\n\t\t\treadonly height: number = height;\n\t\t\treadonly webview: vscode.Webview = webview;\n\t\t\treadonly onDidDispose: vscode.Event<void> = onDidDispose.event;\n\n\t\t\tdispose(): void {\n\t\t\t\tif (that._insets.has(handle)) {\n\t\t\t\t\tthat._insets.delete(handle);\n\t\t\t\t\tthat._proxy.$disposeEditorInset(handle);\n\t\t\t\t\tonDidDispose.fire();\n\n\t\t\t\t\t// final cleanup\n\t\t\t\t\tonDidDispose.dispose();\n\t\t\t\t\tonDidReceiveMessage.dispose();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis._proxy.$createEditorInset(handle, apiEditor.id, apiEditor.value.document.uri, line + 1, height, options || {}, extension.identifier, extension.extensionLocation);\n\t\tthis._insets.set(handle, { editor, inset, onDidReceiveMessage });\n\n\t\treturn inset;\n\t}\n\n\t$onDidDispose(handle: number): void {\n\t\tconst value = this._insets.get(handle);\n\t\tif (value) {\n\t\t\tvalue.inset.dispose();\n\t\t}\n\t}\n\n\t$onDidReceiveMessage(handle: number, message: any): void {\n\t\tconst value = this._insets.get(handle);\n\t\tif (value) {\n\t\t\tvalue.onDidReceiveMessage.fire(message);\n\t\t}\n\t}\n}\n"]}