{"version":3,"file":"extHostWebviewMessaging.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/api/common/extHostWebviewMessaging.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport * as extHostProtocol from './extHost.protocol';\n\nclass ArrayBufferSet {\n\tpublic readonly buffers: ArrayBuffer[] = [];\n\n\tpublic add(buffer: ArrayBuffer): number {\n\t\tlet index = this.buffers.indexOf(buffer);\n\t\tif (index < 0) {\n\t\t\tindex = this.buffers.length;\n\t\t\tthis.buffers.push(buffer);\n\t\t}\n\t\treturn index;\n\t}\n}\n\nexport function serializeWebviewMessage(\n\tmessage: any,\n\ttransfer?: readonly ArrayBuffer[]\n): { message: string, buffers: VSBuffer[] } {\n\tif (transfer) {\n\t\t// Extract all ArrayBuffers from the message and replace them with references.\n\t\tconst arrayBuffers = new ArrayBufferSet();\n\n\t\tconst replacer = (_key: string, value: any) => {\n\t\t\tif (value instanceof ArrayBuffer) {\n\t\t\t\tconst index = arrayBuffers.add(value);\n\t\t\t\treturn <extHostProtocol.WebviewMessageArrayBufferReference>{\n\t\t\t\t\t$$vscode_array_buffer_reference$$: true,\n\t\t\t\t\tindex,\n\t\t\t\t};\n\t\t\t} else if (ArrayBuffer.isView(value)) {\n\t\t\t\tconst type = getTypedArrayType(value);\n\t\t\t\tif (type) {\n\t\t\t\t\tconst index = arrayBuffers.add(value.buffer);\n\t\t\t\t\treturn <extHostProtocol.WebviewMessageArrayBufferReference>{\n\t\t\t\t\t\t$$vscode_array_buffer_reference$$: true,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tview: {\n\t\t\t\t\t\t\ttype: type,\n\t\t\t\t\t\t\tbyteLength: value.byteLength,\n\t\t\t\t\t\t\tbyteOffset: value.byteOffset,\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn value;\n\t\t};\n\n\t\tconst serializedMessage = JSON.stringify(message, replacer);\n\n\t\tconst buffers = arrayBuffers.buffers.map(arrayBuffer => {\n\t\t\tconst bytes = new Uint8Array(arrayBuffer);\n\t\t\treturn VSBuffer.wrap(bytes);\n\t\t});\n\n\t\treturn { message: serializedMessage, buffers };\n\t} else {\n\t\treturn { message: JSON.stringify(message), buffers: [] };\n\t}\n}\n\nfunction getTypedArrayType(value: ArrayBufferView): extHostProtocol.WebviewMessageArrayBufferViewType | undefined {\n\tswitch (value.constructor.name) {\n\t\tcase 'Int8Array': return extHostProtocol.WebviewMessageArrayBufferViewType.Int8Array;\n\t\tcase 'Uint8Array': return extHostProtocol.WebviewMessageArrayBufferViewType.Uint8Array;\n\t\tcase 'Uint8ClampedArray': return extHostProtocol.WebviewMessageArrayBufferViewType.Uint8ClampedArray;\n\t\tcase 'Int16Array': return extHostProtocol.WebviewMessageArrayBufferViewType.Int16Array;\n\t\tcase 'Uint16Array': return extHostProtocol.WebviewMessageArrayBufferViewType.Uint16Array;\n\t\tcase 'Int32Array': return extHostProtocol.WebviewMessageArrayBufferViewType.Int32Array;\n\t\tcase 'Uint32Array': return extHostProtocol.WebviewMessageArrayBufferViewType.Uint32Array;\n\t\tcase 'Float32Array': return extHostProtocol.WebviewMessageArrayBufferViewType.Float32Array;\n\t\tcase 'Float64Array': return extHostProtocol.WebviewMessageArrayBufferViewType.Float64Array;\n\t\tcase 'BigInt64Array': return extHostProtocol.WebviewMessageArrayBufferViewType.BigInt64Array;\n\t\tcase 'BigUint64Array': return extHostProtocol.WebviewMessageArrayBufferViewType.BigUint64Array;\n\t}\n\treturn undefined;\n}\n\nexport function deserializeWebviewMessage(jsonMessage: string, buffers: VSBuffer[]): { message: any, arrayBuffers: ArrayBuffer[] } {\n\tconst arrayBuffers: ArrayBuffer[] = buffers.map(buffer => {\n\t\tconst arrayBuffer = new ArrayBuffer(buffer.byteLength);\n\t\tconst uint8Array = new Uint8Array(arrayBuffer);\n\t\tuint8Array.set(buffer.buffer);\n\t\treturn arrayBuffer;\n\t});\n\n\tconst reviver = !buffers.length ? undefined : (_key: string, value: any) => {\n\t\tif (typeof value === 'object' && (value as extHostProtocol.WebviewMessageArrayBufferReference).$$vscode_array_buffer_reference$$) {\n\t\t\tconst ref = value as extHostProtocol.WebviewMessageArrayBufferReference;\n\t\t\tconst { index } = ref;\n\t\t\tconst arrayBuffer = arrayBuffers[index];\n\t\t\tif (ref.view) {\n\t\t\t\tswitch (ref.view.type) {\n\t\t\t\t\tcase extHostProtocol.WebviewMessageArrayBufferViewType.Int8Array: return new Int8Array(arrayBuffer, ref.view.byteOffset, ref.view.byteLength / Int8Array.BYTES_PER_ELEMENT);\n\t\t\t\t\tcase extHostProtocol.WebviewMessageArrayBufferViewType.Uint8Array: return new Uint8Array(arrayBuffer, ref.view.byteOffset, ref.view.byteLength / Uint8Array.BYTES_PER_ELEMENT);\n\t\t\t\t\tcase extHostProtocol.WebviewMessageArrayBufferViewType.Uint8ClampedArray: return new Uint8ClampedArray(arrayBuffer, ref.view.byteOffset, ref.view.byteLength / Uint8ClampedArray.BYTES_PER_ELEMENT);\n\t\t\t\t\tcase extHostProtocol.WebviewMessageArrayBufferViewType.Int16Array: return new Int16Array(arrayBuffer, ref.view.byteOffset, ref.view.byteLength / Int16Array.BYTES_PER_ELEMENT);\n\t\t\t\t\tcase extHostProtocol.WebviewMessageArrayBufferViewType.Uint16Array: return new Uint16Array(arrayBuffer, ref.view.byteOffset, ref.view.byteLength / Uint16Array.BYTES_PER_ELEMENT);\n\t\t\t\t\tcase extHostProtocol.WebviewMessageArrayBufferViewType.Int32Array: return new Int32Array(arrayBuffer, ref.view.byteOffset, ref.view.byteLength / Int32Array.BYTES_PER_ELEMENT);\n\t\t\t\t\tcase extHostProtocol.WebviewMessageArrayBufferViewType.Uint32Array: return new Uint32Array(arrayBuffer, ref.view.byteOffset, ref.view.byteLength / Uint32Array.BYTES_PER_ELEMENT);\n\t\t\t\t\tcase extHostProtocol.WebviewMessageArrayBufferViewType.Float32Array: return new Float32Array(arrayBuffer, ref.view.byteOffset, ref.view.byteLength / Float32Array.BYTES_PER_ELEMENT);\n\t\t\t\t\tcase extHostProtocol.WebviewMessageArrayBufferViewType.Float64Array: return new Float64Array(arrayBuffer, ref.view.byteOffset, ref.view.byteLength / Float64Array.BYTES_PER_ELEMENT);\n\t\t\t\t\tcase extHostProtocol.WebviewMessageArrayBufferViewType.BigInt64Array: return new BigInt64Array(arrayBuffer, ref.view.byteOffset, ref.view.byteLength / BigInt64Array.BYTES_PER_ELEMENT);\n\t\t\t\t\tcase extHostProtocol.WebviewMessageArrayBufferViewType.BigUint64Array: return new BigUint64Array(arrayBuffer, ref.view.byteOffset, ref.view.byteLength / BigUint64Array.BYTES_PER_ELEMENT);\n\t\t\t\t\tdefault: throw new Error('Unknown array buffer view type');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn arrayBuffer;\n\t\t}\n\t\treturn value;\n\t};\n\n\tconst message = JSON.parse(jsonMessage, reviver);\n\treturn { message, arrayBuffers };\n}\n"]}