{"version":3,"file":"extHostAuthentication.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/api/common/extHostAuthentication.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type * as vscode from 'vscode';\nimport * as modes from 'vs/editor/common/modes';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { IMainContext, MainContext, MainThreadAuthenticationShape, ExtHostAuthenticationShape } from 'vs/workbench/api/common/extHost.protocol';\nimport { Disposable } from 'vs/workbench/api/common/extHostTypes';\nimport { IExtensionDescription, ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\n\ninterface GetSessionsRequest {\n\tscopes: string;\n\tresult: Promise<vscode.AuthenticationSession | undefined>;\n}\n\ninterface ProviderWithMetadata {\n\tlabel: string;\n\tprovider: vscode.AuthenticationProvider;\n\toptions: vscode.AuthenticationProviderOptions;\n}\n\nexport class ExtHostAuthentication implements ExtHostAuthenticationShape {\n\tprivate _proxy: MainThreadAuthenticationShape;\n\tprivate _authenticationProviders: Map<string, ProviderWithMetadata> = new Map<string, ProviderWithMetadata>();\n\n\tprivate _providers: vscode.AuthenticationProviderInformation[] = [];\n\n\tprivate _onDidChangeAuthenticationProviders = new Emitter<vscode.AuthenticationProvidersChangeEvent>();\n\treadonly onDidChangeAuthenticationProviders: Event<vscode.AuthenticationProvidersChangeEvent> = this._onDidChangeAuthenticationProviders.event;\n\n\tprivate _onDidChangeSessions = new Emitter<vscode.AuthenticationSessionsChangeEvent>();\n\treadonly onDidChangeSessions: Event<vscode.AuthenticationSessionsChangeEvent> = this._onDidChangeSessions.event;\n\n\tprivate _inFlightRequests = new Map<string, GetSessionsRequest[]>();\n\n\tconstructor(mainContext: IMainContext) {\n\t\tthis._proxy = mainContext.getProxy(MainContext.MainThreadAuthentication);\n\t}\n\n\t$setProviders(providers: vscode.AuthenticationProviderInformation[]): Promise<void> {\n\t\tthis._providers = providers;\n\t\treturn Promise.resolve();\n\t}\n\n\tget providers(): ReadonlyArray<vscode.AuthenticationProviderInformation> {\n\t\treturn Object.freeze(this._providers.slice());\n\t}\n\n\tasync getSession(requestingExtension: IExtensionDescription, providerId: string, scopes: string[], options: vscode.AuthenticationGetSessionOptions & { createIfNone: true }): Promise<vscode.AuthenticationSession>;\n\tasync getSession(requestingExtension: IExtensionDescription, providerId: string, scopes: string[], options: vscode.AuthenticationGetSessionOptions = {}): Promise<vscode.AuthenticationSession | undefined> {\n\t\tconst extensionId = ExtensionIdentifier.toKey(requestingExtension.identifier);\n\t\tconst inFlightRequests = this._inFlightRequests.get(extensionId) || [];\n\t\tconst sortedScopes = scopes.sort().join(' ');\n\t\tlet inFlightRequest: GetSessionsRequest | undefined = inFlightRequests.find(request => request.scopes === sortedScopes);\n\n\t\tif (inFlightRequest) {\n\t\t\treturn inFlightRequest.result;\n\t\t} else {\n\t\t\tconst session = this._getSession(requestingExtension, extensionId, providerId, scopes, options);\n\t\t\tinFlightRequest = {\n\t\t\t\tscopes: sortedScopes,\n\t\t\t\tresult: session\n\t\t\t};\n\n\t\t\tinFlightRequests.push(inFlightRequest);\n\t\t\tthis._inFlightRequests.set(extensionId, inFlightRequests);\n\n\t\t\ttry {\n\t\t\t\tawait session;\n\t\t\t} finally {\n\t\t\t\tconst requestIndex = inFlightRequests.findIndex(request => request.scopes === sortedScopes);\n\t\t\t\tif (requestIndex > -1) {\n\t\t\t\t\tinFlightRequests.splice(requestIndex);\n\t\t\t\t\tthis._inFlightRequests.set(extensionId, inFlightRequests);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn session;\n\t\t}\n\t}\n\n\tprivate async _getSession(requestingExtension: IExtensionDescription, extensionId: string, providerId: string, scopes: string[], options: vscode.AuthenticationGetSessionOptions = {}): Promise<vscode.AuthenticationSession | undefined> {\n\t\tawait this._proxy.$ensureProvider(providerId);\n\t\tconst extensionName = requestingExtension.displayName || requestingExtension.name;\n\t\treturn this._proxy.$getSession(providerId, scopes, extensionId, extensionName, options);\n\t}\n\n\tasync removeSession(providerId: string, sessionId: string): Promise<void> {\n\t\tconst providerData = this._authenticationProviders.get(providerId);\n\t\tif (!providerData) {\n\t\t\treturn this._proxy.$removeSession(providerId, sessionId);\n\t\t}\n\n\t\treturn providerData.provider.removeSession(sessionId);\n\t}\n\n\tregisterAuthenticationProvider(id: string, label: string, provider: vscode.AuthenticationProvider, options?: vscode.AuthenticationProviderOptions): vscode.Disposable {\n\t\tif (this._authenticationProviders.get(id)) {\n\t\t\tthrow new Error(`An authentication provider with id '${id}' is already registered.`);\n\t\t}\n\n\t\tthis._authenticationProviders.set(id, { label, provider, options: options ?? { supportsMultipleAccounts: false } });\n\n\t\tif (!this._providers.find(p => p.id === id)) {\n\t\t\tthis._providers.push({\n\t\t\t\tid: id,\n\t\t\t\tlabel: label\n\t\t\t});\n\t\t}\n\n\t\tconst listener = provider.onDidChangeSessions(e => {\n\t\t\tthis._proxy.$sendDidChangeSessions(id, {\n\t\t\t\tadded: e.added ?? [],\n\t\t\t\tchanged: e.changed ?? [],\n\t\t\t\tremoved: e.removed ?? []\n\t\t\t});\n\t\t});\n\n\t\tthis._proxy.$registerAuthenticationProvider(id, label, options?.supportsMultipleAccounts ?? false);\n\n\t\treturn new Disposable(() => {\n\t\t\tlistener.dispose();\n\t\t\tthis._authenticationProviders.delete(id);\n\n\t\t\tconst i = this._providers.findIndex(p => p.id === id);\n\t\t\tif (i > -1) {\n\t\t\t\tthis._providers.splice(i);\n\t\t\t}\n\n\t\t\tthis._proxy.$unregisterAuthenticationProvider(id);\n\t\t});\n\t}\n\n\t$createSession(providerId: string, scopes: string[]): Promise<modes.AuthenticationSession> {\n\t\tconst providerData = this._authenticationProviders.get(providerId);\n\t\tif (providerData) {\n\t\t\treturn Promise.resolve(providerData.provider.createSession(scopes));\n\t\t}\n\n\t\tthrow new Error(`Unable to find authentication provider with handle: ${providerId}`);\n\t}\n\n\t$removeSession(providerId: string, sessionId: string): Promise<void> {\n\t\tconst providerData = this._authenticationProviders.get(providerId);\n\t\tif (providerData) {\n\t\t\treturn Promise.resolve(providerData.provider.removeSession(sessionId));\n\t\t}\n\n\t\tthrow new Error(`Unable to find authentication provider with handle: ${providerId}`);\n\t}\n\n\t$getSessions(providerId: string, scopes?: string[]): Promise<ReadonlyArray<modes.AuthenticationSession>> {\n\t\tconst providerData = this._authenticationProviders.get(providerId);\n\t\tif (providerData) {\n\t\t\treturn Promise.resolve(providerData.provider.getSessions(scopes));\n\t\t}\n\n\t\tthrow new Error(`Unable to find authentication provider with handle: ${providerId}`);\n\t}\n\n\t$onDidChangeAuthenticationSessions(id: string, label: string) {\n\t\tthis._onDidChangeSessions.fire({ provider: { id, label } });\n\t\treturn Promise.resolve();\n\t}\n\n\t$onDidChangeAuthenticationProviders(added: modes.AuthenticationProviderInformation[], removed: modes.AuthenticationProviderInformation[]) {\n\t\tadded.forEach(provider => {\n\t\t\tif (!this._providers.some(p => p.id === provider.id)) {\n\t\t\t\tthis._providers.push(provider);\n\t\t\t}\n\t\t});\n\n\t\tremoved.forEach(p => {\n\t\t\tconst index = this._providers.findIndex(provider => provider.id === p.id);\n\t\t\tif (index > -1) {\n\t\t\t\tthis._providers.splice(index);\n\t\t\t}\n\t\t});\n\n\t\tthis._onDidChangeAuthenticationProviders.fire({ added, removed });\n\t\treturn Promise.resolve();\n\t}\n}\n"]}