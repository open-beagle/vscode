{"version":3,"file":"extHostMessageService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/api/common/extHostMessageService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAShG,SAAS,aAAa,CAAC,IAAS;QAC/B,OAAO,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC;IAC3B,CAAC;IAED,IAAa,qBAAqB,GAAlC,MAAa,qBAAqB;QAIjC,YACC,WAAyB,EACK,WAAwB;YAAxB,gBAAW,GAAX,WAAW,CAAa;YAEtD,IAAI,CAAC,MAAM,GAAG,WAAW,CAAC,QAAQ,CAAC,8BAAW,CAAC,wBAAwB,CAAC,CAAC;QAC1E,CAAC;QAMD,WAAW,CAAC,SAAgC,EAAE,QAAkB,EAAE,OAAe,EAAE,kBAAmF,EAAE,IAAwC;YAE/M,MAAM,OAAO,GAA6B,EAAE,SAAS,EAAE,CAAC;YACxD,IAAI,KAAsC,CAAC;YAE3C,IAAI,OAAO,kBAAkB,KAAK,QAAQ,IAAI,aAAa,CAAC,kBAAkB,CAAC,EAAE;gBAChF,KAAK,GAAG,CAAC,kBAAkB,EAAE,GAAG,IAAI,CAAC,CAAC;aACtC;iBAAM;gBACN,OAAO,CAAC,KAAK,GAAG,kBAAkB,IAAI,kBAAkB,CAAC,KAAK,CAAC;gBAC/D,OAAO,CAAC,SAAS,GAAG,kBAAkB,IAAI,kBAAkB,CAAC,SAAS,CAAC;gBACvE,KAAK,GAAG,IAAI,CAAC;aACb;YAED,IAAI,OAAO,CAAC,SAAS,EAAE;gBACtB,CAAA,GAAA,oCAAuB,CAAA,CAAC,SAAS,CAAC,CAAC;aACnC;YAED,MAAM,QAAQ,GAAqE,EAAE,CAAC;YAEtF,KAAK,IAAI,MAAM,GAAG,CAAC,EAAE,MAAM,GAAG,KAAK,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE;gBACrD,MAAM,OAAO,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC;gBAC9B,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;oBAChC,QAAQ,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,iBAAiB,EAAE,KAAK,EAAE,CAAC,CAAC;iBACpE;qBAAM,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;oBACvC,IAAI,EAAE,KAAK,EAAE,iBAAiB,EAAE,GAAG,OAAO,CAAC;oBAC3C,QAAQ,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,iBAAiB,EAAE,CAAC,CAAC,iBAAiB,EAAE,MAAM,EAAE,CAAC,CAAC;iBACzE;qBAAM;oBACN,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,uBAAuB,EAAE,OAAO,CAAC,CAAC;iBACxD;aACD;YAED,OAAO,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;gBACnF,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;oBAC/B,OAAO,KAAK,CAAC,MAAM,CAAC,CAAC;iBACrB;gBACD,OAAO,SAAS,CAAC;YAClB,CAAC,CAAC,CAAC;QACJ,CAAC;KACD,CAAA;IArDY,qBAAqB;QAM/B,WAAA,iBAAW,CAAA;OAND,qBAAqB,CAqDjC;IArDY,sDAAqB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport Severity from 'vs/base/common/severity';\nimport type * as vscode from 'vscode';\nimport { MainContext, MainThreadMessageServiceShape, MainThreadMessageOptions, IMainContext } from './extHost.protocol';\nimport { IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { checkProposedApiEnabled } from 'vs/workbench/services/extensions/common/extensions';\n\nfunction isMessageItem(item: any): item is vscode.MessageItem {\n\treturn item && item.title;\n}\n\nexport class ExtHostMessageService {\n\n\tprivate _proxy: MainThreadMessageServiceShape;\n\n\tconstructor(\n\t\tmainContext: IMainContext,\n\t\t@ILogService private readonly _logService: ILogService\n\t) {\n\t\tthis._proxy = mainContext.getProxy(MainContext.MainThreadMessageService);\n\t}\n\n\n\tshowMessage(extension: IExtensionDescription, severity: Severity, message: string, optionsOrFirstItem: vscode.MessageOptions | string | undefined, rest: string[]): Promise<string | undefined>;\n\tshowMessage(extension: IExtensionDescription, severity: Severity, message: string, optionsOrFirstItem: vscode.MessageOptions | vscode.MessageItem | undefined, rest: vscode.MessageItem[]): Promise<vscode.MessageItem | undefined>;\n\tshowMessage(extension: IExtensionDescription, severity: Severity, message: string, optionsOrFirstItem: vscode.MessageOptions | vscode.MessageItem | string | undefined, rest: Array<vscode.MessageItem | string>): Promise<string | vscode.MessageItem | undefined>;\n\tshowMessage(extension: IExtensionDescription, severity: Severity, message: string, optionsOrFirstItem: vscode.MessageOptions | string | vscode.MessageItem | undefined, rest: Array<string | vscode.MessageItem>): Promise<string | vscode.MessageItem | undefined> {\n\n\t\tconst options: MainThreadMessageOptions = { extension };\n\t\tlet items: (string | vscode.MessageItem)[];\n\n\t\tif (typeof optionsOrFirstItem === 'string' || isMessageItem(optionsOrFirstItem)) {\n\t\t\titems = [optionsOrFirstItem, ...rest];\n\t\t} else {\n\t\t\toptions.modal = optionsOrFirstItem && optionsOrFirstItem.modal;\n\t\t\toptions.useCustom = optionsOrFirstItem && optionsOrFirstItem.useCustom;\n\t\t\titems = rest;\n\t\t}\n\n\t\tif (options.useCustom) {\n\t\t\tcheckProposedApiEnabled(extension);\n\t\t}\n\n\t\tconst commands: { title: string; isCloseAffordance: boolean; handle: number; }[] = [];\n\n\t\tfor (let handle = 0; handle < items.length; handle++) {\n\t\t\tconst command = items[handle];\n\t\t\tif (typeof command === 'string') {\n\t\t\t\tcommands.push({ title: command, handle, isCloseAffordance: false });\n\t\t\t} else if (typeof command === 'object') {\n\t\t\t\tlet { title, isCloseAffordance } = command;\n\t\t\t\tcommands.push({ title, isCloseAffordance: !!isCloseAffordance, handle });\n\t\t\t} else {\n\t\t\t\tthis._logService.warn('Invalid message item:', command);\n\t\t\t}\n\t\t}\n\n\t\treturn this._proxy.$showMessage(severity, message, options, commands).then(handle => {\n\t\t\tif (typeof handle === 'number') {\n\t\t\t\treturn items[handle];\n\t\t\t}\n\t\t\treturn undefined;\n\t\t});\n\t}\n}\n"]}