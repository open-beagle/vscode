{"version":3,"file":"apiCommands.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/api/common/apiCommands.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport * as typeConverters from 'vs/workbench/api/common/extHostTypeConverters';\nimport { CommandsRegistry, ICommandService, ICommandHandler } from 'vs/platform/commands/common/commands';\nimport { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { IOpenEmptyWindowOptions } from 'vs/platform/windows/common/windows';\nimport { IWorkspacesService, IRecent } from 'vs/platform/workspaces/common/workspaces';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IViewDescriptorService, IViewsService, ViewVisibilityState } from 'vs/workbench/common/views';\n\n// -----------------------------------------------------------------\n// The following commands are registered on both sides separately.\n//\n// We are trying to maintain backwards compatibility for cases where\n// API commands are encoded as markdown links, for example.\n// -----------------------------------------------------------------\n\nexport interface ICommandsExecutor {\n\texecuteCommand<T>(id: string, ...args: any[]): Promise<T | undefined>;\n}\n\nfunction adjustHandler(handler: (executor: ICommandsExecutor, ...args: any[]) => any): ICommandHandler {\n\treturn (accessor, ...args: any[]) => {\n\t\treturn handler(accessor.get(ICommandService), ...args);\n\t};\n}\n\ninterface INewWindowAPICommandOptions {\n\treuseWindow?: boolean;\n\t/**\n\t * If set, defines the remoteAuthority of the new window. `null` will open a local window.\n\t * If not set, defaults to remoteAuthority of the current window.\n\t */\n\tremoteAuthority?: string | null;\n}\n\nexport class NewWindowAPICommand {\n\tpublic static readonly ID = 'vscode.newWindow';\n\tpublic static execute(executor: ICommandsExecutor, options?: INewWindowAPICommandOptions): Promise<any> {\n\t\tconst commandOptions: IOpenEmptyWindowOptions = {\n\t\t\tforceReuseWindow: options && options.reuseWindow,\n\t\t\tremoteAuthority: options && options.remoteAuthority\n\t\t};\n\n\t\treturn executor.executeCommand('_files.newWindow', commandOptions);\n\t}\n}\nCommandsRegistry.registerCommand({\n\tid: NewWindowAPICommand.ID,\n\thandler: adjustHandler(NewWindowAPICommand.execute),\n\tdescription: {\n\t\tdescription: 'Opens an new window',\n\t\targs: [\n\t\t]\n\t}\n});\n\nCommandsRegistry.registerCommand('_workbench.removeFromRecentlyOpened', function (accessor: ServicesAccessor, uri: URI) {\n\tconst workspacesService = accessor.get(IWorkspacesService);\n\treturn workspacesService.removeRecentlyOpened([uri]);\n});\n\nexport class RemoveFromRecentlyOpenedAPICommand {\n\tpublic static readonly ID = 'vscode.removeFromRecentlyOpened';\n\tpublic static execute(executor: ICommandsExecutor, path: string | URI): Promise<any> {\n\t\tif (typeof path === 'string') {\n\t\t\tpath = path.match(/^[^:/?#]+:\\/\\//) ? URI.parse(path) : URI.file(path);\n\t\t} else {\n\t\t\tpath = URI.revive(path); // called from extension host\n\t\t}\n\t\treturn executor.executeCommand('_workbench.removeFromRecentlyOpened', path);\n\t}\n}\nCommandsRegistry.registerCommand(RemoveFromRecentlyOpenedAPICommand.ID, adjustHandler(RemoveFromRecentlyOpenedAPICommand.execute));\n\nexport interface OpenIssueReporterArgs {\n\treadonly extensionId: string;\n\treadonly issueTitle?: string;\n\treadonly issueBody?: string;\n}\n\nexport class OpenIssueReporter {\n\tpublic static readonly ID = 'vscode.openIssueReporter';\n\n\tpublic static execute(executor: ICommandsExecutor, args: string | OpenIssueReporterArgs): Promise<void> {\n\t\tconst commandArgs = typeof args === 'string'\n\t\t\t? { extensionId: args }\n\t\t\t: args;\n\t\treturn executor.executeCommand('workbench.action.openIssueReporter', commandArgs);\n\t}\n}\n\ninterface RecentEntry {\n\turi: URI;\n\ttype: 'workspace' | 'folder' | 'file';\n\tlabel?: string;\n\tremoteAuthority?: string;\n}\n\nCommandsRegistry.registerCommand('_workbench.addToRecentlyOpened', async function (accessor: ServicesAccessor, recentEntry: RecentEntry) {\n\tconst workspacesService = accessor.get(IWorkspacesService);\n\tlet recent: IRecent | undefined = undefined;\n\tconst uri = recentEntry.uri;\n\tconst label = recentEntry.label;\n\tconst remoteAuthority = recentEntry.remoteAuthority;\n\tif (recentEntry.type === 'workspace') {\n\t\tconst workspace = await workspacesService.getWorkspaceIdentifier(uri);\n\t\trecent = { workspace, label, remoteAuthority };\n\t} else if (recentEntry.type === 'folder') {\n\t\trecent = { folderUri: uri, label, remoteAuthority };\n\t} else {\n\t\trecent = { fileUri: uri, label, remoteAuthority };\n\t}\n\treturn workspacesService.addRecentlyOpened([recent]);\n});\n\nCommandsRegistry.registerCommand('_workbench.getRecentlyOpened', async function (accessor: ServicesAccessor) {\n\tconst workspacesService = accessor.get(IWorkspacesService);\n\treturn workspacesService.getRecentlyOpened();\n});\n\nCommandsRegistry.registerCommand('_extensionTests.setLogLevel', function (accessor: ServicesAccessor, level: number) {\n\tconst logService = accessor.get(ILogService);\n\tconst environmentService = accessor.get(IEnvironmentService);\n\n\tif (environmentService.isExtensionDevelopment && !!environmentService.extensionTestsLocationURI) {\n\t\tlogService.setLevel(level);\n\t}\n});\n\n\nCommandsRegistry.registerCommand('_extensionTests.getLogLevel', function (accessor: ServicesAccessor) {\n\tconst logService = accessor.get(ILogService);\n\n\treturn logService.getLevel();\n});\n\n\nCommandsRegistry.registerCommand('_workbench.action.moveViews', async function (accessor: ServicesAccessor, options: { viewIds: string[], destinationId: string }) {\n\tconst viewDescriptorService = accessor.get(IViewDescriptorService);\n\n\tconst destination = viewDescriptorService.getViewContainerById(options.destinationId);\n\tif (!destination) {\n\t\treturn;\n\t}\n\n\t// FYI, don't use `moveViewsToContainer` in 1 shot, because it expects all views to have the same current location\n\tfor (const viewId of options.viewIds) {\n\t\tconst viewDescriptor = viewDescriptorService.getViewDescriptorById(viewId);\n\t\tif (viewDescriptor?.canMoveView) {\n\t\t\tviewDescriptorService.moveViewsToContainer([viewDescriptor], destination, ViewVisibilityState.Default);\n\t\t}\n\t}\n\n\tawait accessor.get(IViewsService).openViewContainer(destination.id, true);\n});\n\nexport class MoveViewsAPICommand {\n\tpublic static readonly ID = 'vscode.moveViews';\n\tpublic static execute(executor: ICommandsExecutor, options: { viewIds: string[], destinationId: string }): Promise<any> {\n\t\tif (!Array.isArray(options?.viewIds) || typeof options?.destinationId !== 'string') {\n\t\t\treturn Promise.reject('Invalid arguments');\n\t\t}\n\n\t\treturn executor.executeCommand('_workbench.action.moveViews', options);\n\t}\n}\nCommandsRegistry.registerCommand({\n\tid: MoveViewsAPICommand.ID,\n\thandler: adjustHandler(MoveViewsAPICommand.execute),\n\tdescription: {\n\t\tdescription: 'Move Views',\n\t\targs: []\n\t}\n});\n\n\n// -----------------------------------------------------------------\n// The following commands are registered on the renderer but as API\n// command. DO NOT USE this unless you have understood what this\n// means\n// -----------------------------------------------------------------\n\n\nclass OpenAPICommand {\n\tpublic static readonly ID = 'vscode.open';\n\tpublic static execute(executor: ICommandsExecutor, resource: URI): Promise<any> {\n\n\t\treturn executor.executeCommand('_workbench.open', resource);\n\t}\n}\nCommandsRegistry.registerCommand(OpenAPICommand.ID, adjustHandler(OpenAPICommand.execute));\n\nclass DiffAPICommand {\n\tpublic static readonly ID = 'vscode.diff';\n\tpublic static execute(executor: ICommandsExecutor, left: URI, right: URI, label: string, options?: typeConverters.TextEditorOpenOptions): Promise<any> {\n\t\treturn executor.executeCommand('_workbench.diff', [\n\t\t\tleft, right,\n\t\t\tlabel,\n\t\t]);\n\t}\n}\nCommandsRegistry.registerCommand(DiffAPICommand.ID, adjustHandler(DiffAPICommand.execute));\n"]}