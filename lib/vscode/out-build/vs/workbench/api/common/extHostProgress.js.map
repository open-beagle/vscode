{"version":3,"sources":["vs/workbench/api/common/extHostProgress.ts"],"names":[],"mappings":"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","file":"extHostProgress.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ProgressOptions } from 'vscode';\nimport { MainThreadProgressShape, ExtHostProgressShape } from './extHost.protocol';\nimport { ProgressLocation } from './extHostTypeConverters';\nimport { Progress, IProgressStep } from 'vs/platform/progress/common/progress';\nimport { localize } from 'vs/nls';\nimport { CancellationTokenSource, CancellationToken } from 'vs/base/common/cancellation';\nimport { throttle } from 'vs/base/common/decorators';\nimport { IExtensionDescription } from 'vs/platform/extensions/common/extensions';\n\nexport class ExtHostProgress implements ExtHostProgressShape {\n\n\tprivate _proxy: MainThreadProgressShape;\n\tprivate _handles: number = 0;\n\tprivate _mapHandleToCancellationSource: Map<number, CancellationTokenSource> = new Map();\n\n\tconstructor(proxy: MainThreadProgressShape) {\n\t\tthis._proxy = proxy;\n\t}\n\n\twithProgress<R>(extension: IExtensionDescription, options: ProgressOptions, task: (progress: Progress<IProgressStep>, token: CancellationToken) => Thenable<R>): Thenable<R> {\n\t\tconst handle = this._handles++;\n\t\tconst { title, location, cancellable } = options;\n\t\tconst source = { label: localize('extensionSource', \"{0} (Extension)\", extension.displayName || extension.name), id: extension.identifier.value };\n\n\t\tthis._proxy.$startProgress(handle, { location: ProgressLocation.from(location), title, source, cancellable }, extension);\n\t\treturn this._withProgress(handle, task, !!cancellable);\n\t}\n\n\tprivate _withProgress<R>(handle: number, task: (progress: Progress<IProgressStep>, token: CancellationToken) => Thenable<R>, cancellable: boolean): Thenable<R> {\n\t\tlet source: CancellationTokenSource | undefined;\n\t\tif (cancellable) {\n\t\t\tsource = new CancellationTokenSource();\n\t\t\tthis._mapHandleToCancellationSource.set(handle, source);\n\t\t}\n\n\t\tconst progressEnd = (handle: number): void => {\n\t\t\tthis._proxy.$progressEnd(handle);\n\t\t\tthis._mapHandleToCancellationSource.delete(handle);\n\t\t\tif (source) {\n\t\t\t\tsource.dispose();\n\t\t\t}\n\t\t};\n\n\t\tlet p: Thenable<R>;\n\n\t\ttry {\n\t\t\tp = task(new ProgressCallback(this._proxy, handle), cancellable && source ? source.token : CancellationToken.None);\n\t\t} catch (err) {\n\t\t\tprogressEnd(handle);\n\t\t\tthrow err;\n\t\t}\n\n\t\tp.then(result => progressEnd(handle), err => progressEnd(handle));\n\t\treturn p;\n\t}\n\n\tpublic $acceptProgressCanceled(handle: number): void {\n\t\tconst source = this._mapHandleToCancellationSource.get(handle);\n\t\tif (source) {\n\t\t\tsource.cancel();\n\t\t\tthis._mapHandleToCancellationSource.delete(handle);\n\t\t}\n\t}\n}\n\nfunction mergeProgress(result: IProgressStep, currentValue: IProgressStep): IProgressStep {\n\tresult.message = currentValue.message;\n\tif (typeof currentValue.increment === 'number') {\n\t\tif (typeof result.increment === 'number') {\n\t\t\tresult.increment += currentValue.increment;\n\t\t} else {\n\t\t\tresult.increment = currentValue.increment;\n\t\t}\n\t}\n\n\treturn result;\n}\n\nclass ProgressCallback extends Progress<IProgressStep> {\n\tconstructor(private _proxy: MainThreadProgressShape, private _handle: number) {\n\t\tsuper(p => this.throttledReport(p));\n\t}\n\n\t@throttle(100, (result: IProgressStep, currentValue: IProgressStep) => mergeProgress(result, currentValue), () => Object.create(null))\n\tthrottledReport(p: IProgressStep): void {\n\t\tthis._proxy.$progressReport(this._handle, p);\n\t}\n}\n"]}