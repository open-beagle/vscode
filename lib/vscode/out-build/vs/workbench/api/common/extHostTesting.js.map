{"version":3,"file":"extHostTesting.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/api/common/extHostTesting.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { mapFind } from 'vs/base/common/arrays';\nimport { Barrier, DeferredPromise, disposableTimeout, isThenable } from 'vs/base/common/async';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { CancellationToken, CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { Emitter } from 'vs/base/common/event';\nimport { once } from 'vs/base/common/functional';\nimport { Iterable } from 'vs/base/common/iterator';\nimport { DisposableStore, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { deepFreeze } from 'vs/base/common/objects';\nimport { isDefined } from 'vs/base/common/types';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { generateUuid } from 'vs/base/common/uuid';\nimport { ExtHostTestingResource, ExtHostTestingShape, MainContext, MainThreadTestingShape } from 'vs/workbench/api/common/extHost.protocol';\nimport { ExtHostDocumentData } from 'vs/workbench/api/common/extHostDocumentData';\nimport { IExtHostDocumentsAndEditors } from 'vs/workbench/api/common/extHostDocumentsAndEditors';\nimport { IExtHostRpcService } from 'vs/workbench/api/common/extHostRpcService';\nimport { ExtHostTestItemEventType, getPrivateApiFor } from 'vs/workbench/api/common/extHostTestingPrivateApi';\nimport * as Convert from 'vs/workbench/api/common/extHostTypeConverters';\nimport { Disposable, TestItemImpl } from 'vs/workbench/api/common/extHostTypes';\nimport { IExtHostWorkspace } from 'vs/workbench/api/common/extHostWorkspace';\nimport { OwnedTestCollection, SingleUseTestCollection, TestPosition } from 'vs/workbench/contrib/testing/common/ownedTestCollection';\nimport { AbstractIncrementalTestCollection, IncrementalChangeCollector, IncrementalTestCollectionItem, InternalTestItem, ISerializedTestResults, ITestItem, RunTestForProviderRequest, TestDiffOpType, TestIdWithSrc, TestsDiff } from 'vs/workbench/contrib/testing/common/testCollection';\nimport type * as vscode from 'vscode';\n\nconst getTestSubscriptionKey = (resource: ExtHostTestingResource, uri: URI) => `${resource}:${uri.toString()}`;\n\nexport class ExtHostTesting implements ExtHostTestingShape {\n\tprivate readonly resultsChangedEmitter = new Emitter<void>();\n\tprivate readonly controllers = new Map<string, {\n\t\textensionId: string,\n\t\tinstance: vscode.TestController<unknown>\n\t}>();\n\tprivate readonly proxy: MainThreadTestingShape;\n\tprivate readonly ownedTests = new OwnedTestCollection();\n\tprivate readonly runQueue: TestRunQueue;\n\tprivate readonly testControllers = new Map<string, {\n\t\tcollection: SingleUseTestCollection;\n\t\tstore: IDisposable;\n\t\tsubscribeFn: (id: string, provider: vscode.TestController<unknown>) => void;\n\t}>();\n\n\tprivate workspaceObservers: WorkspaceFolderTestObserverFactory;\n\tprivate textDocumentObservers: TextDocumentTestObserverFactory;\n\n\tpublic onResultsChanged = this.resultsChangedEmitter.event;\n\tpublic results: ReadonlyArray<vscode.TestRunResult> = [];\n\n\tconstructor(@IExtHostRpcService rpc: IExtHostRpcService, @IExtHostDocumentsAndEditors private readonly documents: IExtHostDocumentsAndEditors, @IExtHostWorkspace private readonly workspace: IExtHostWorkspace) {\n\t\tthis.proxy = rpc.getProxy(MainContext.MainThreadTesting);\n\t\tthis.runQueue = new TestRunQueue(this.proxy);\n\t\tthis.workspaceObservers = new WorkspaceFolderTestObserverFactory(this.proxy);\n\t\tthis.textDocumentObservers = new TextDocumentTestObserverFactory(this.proxy, documents);\n\t}\n\n\t/**\n\t * Implements vscode.test.registerTestProvider\n\t */\n\tpublic registerTestController<T>(extensionId: string, controller: vscode.TestController<T>): vscode.Disposable {\n\t\tconst controllerId = generateUuid();\n\t\tthis.controllers.set(controllerId, { instance: controller, extensionId });\n\t\tthis.proxy.$registerTestController(controllerId);\n\n\t\t// give the ext a moment to register things rather than synchronously invoking within activate()\n\t\tconst toSubscribe = [...this.testControllers.keys()];\n\t\tsetTimeout(() => {\n\t\t\tfor (const subscription of toSubscribe) {\n\t\t\t\tthis.testControllers.get(subscription)?.subscribeFn(controllerId, controller);\n\t\t\t}\n\t\t}, 0);\n\n\t\treturn new Disposable(() => {\n\t\t\tthis.controllers.delete(controllerId);\n\t\t\tthis.proxy.$unregisterTestController(controllerId);\n\t\t});\n\t}\n\n\t/**\n\t * Implements vscode.test.createTextDocumentTestObserver\n\t */\n\tpublic createTextDocumentTestObserver(document: vscode.TextDocument) {\n\t\treturn this.textDocumentObservers.checkout(document.uri);\n\t}\n\n\t/**\n\t * Implements vscode.test.createWorkspaceTestObserver\n\t */\n\tpublic createWorkspaceTestObserver(workspaceFolder: vscode.WorkspaceFolder) {\n\t\treturn this.workspaceObservers.checkout(workspaceFolder.uri);\n\t}\n\n\t/**\n\t * Implements vscode.test.runTests\n\t */\n\tpublic async runTests(req: vscode.TestRunRequest<unknown>, token = CancellationToken.None) {\n\t\tconst testListToProviders = (tests: ReadonlyArray<vscode.TestItem<unknown>>) =>\n\t\t\ttests\n\t\t\t\t.map(this.getInternalTestForReference, this)\n\t\t\t\t.filter(isDefined)\n\t\t\t\t.map(t => ({ src: t.src, testId: t.item.extId }));\n\n\t\tawait this.proxy.$runTests({\n\t\t\texclude: req.exclude ? testListToProviders(req.exclude).map(t => t.testId) : undefined,\n\t\t\ttests: testListToProviders(req.tests),\n\t\t\tdebug: req.debug\n\t\t}, token);\n\t}\n\n\t/**\n\t * Implements vscode.test.createTestRun\n\t */\n\tpublic createTestRun<T>(extensionId: string, request: vscode.TestRunRequest<T>, name: string | undefined, persist = true): vscode.TestRun<T> {\n\t\treturn this.runQueue.createTestRun(extensionId, request, name, persist);\n\t}\n\n\t/**\n\t * Updates test results shown to extensions.\n\t * @override\n\t */\n\tpublic $publishTestResults(results: ISerializedTestResults[]): void {\n\t\tthis.results = Object.freeze(\n\t\t\tresults\n\t\t\t\t.map(r => deepFreeze(Convert.TestResults.to(r)))\n\t\t\t\t.concat(this.results)\n\t\t\t\t.sort((a, b) => b.completedAt - a.completedAt)\n\t\t\t\t.slice(0, 32),\n\t\t);\n\n\t\tthis.resultsChangedEmitter.fire();\n\t}\n\n\t/**\n\t * Handles a request to read tests for a file, or workspace.\n\t * @override\n\t */\n\tpublic async $subscribeToTests(resource: ExtHostTestingResource, uriComponents: UriComponents) {\n\t\tconst uri = URI.revive(uriComponents);\n\t\tconst subscriptionKey = getTestSubscriptionKey(resource, uri);\n\t\tif (this.testControllers.has(subscriptionKey)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst cancellation = new CancellationTokenSource();\n\t\tlet method: undefined | ((p: vscode.TestController<unknown>) => vscode.ProviderResult<vscode.TestItem<unknown>>);\n\t\tif (resource === ExtHostTestingResource.TextDocument) {\n\t\t\tlet document = this.documents.getDocument(uri);\n\n\t\t\t// we can ask to subscribe to tests before the documents are populated in\n\t\t\t// the extension host. Try to wait.\n\t\t\tif (!document) {\n\t\t\t\tconst store = new DisposableStore();\n\t\t\t\tdocument = await new Promise<ExtHostDocumentData | undefined>(resolve => {\n\t\t\t\t\tstore.add(disposableTimeout(() => resolve(undefined), 5000));\n\t\t\t\t\tstore.add(this.documents.onDidAddDocuments(e => {\n\t\t\t\t\t\tconst data = e.find(data => data.document.uri.toString() === uri.toString());\n\t\t\t\t\t\tif (data) { resolve(data); }\n\t\t\t\t\t}));\n\t\t\t\t}).finally(() => store.dispose());\n\t\t\t}\n\n\t\t\tif (document) {\n\t\t\t\tconst folder = await this.workspace.getWorkspaceFolder2(uri, false);\n\t\t\t\tmethod = p => p.createDocumentTestRoot\n\t\t\t\t\t? p.createDocumentTestRoot(document!.document, cancellation.token)\n\t\t\t\t\t: createDefaultDocumentTestRoot(p, document!.document, folder, cancellation.token);\n\t\t\t}\n\t\t} else {\n\t\t\tconst folder = await this.workspace.getWorkspaceFolder2(uri, false);\n\t\t\tif (folder) {\n\t\t\t\tmethod = p => p.createWorkspaceTestRoot(folder, cancellation.token);\n\t\t\t}\n\t\t}\n\n\t\tif (!method) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst subscribeFn = async (id: string, provider: vscode.TestController<unknown>) => {\n\t\t\ttry {\n\t\t\t\tconst root = await method!(provider);\n\t\t\t\tif (root) {\n\t\t\t\t\tcollection.addRoot(root, id);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error(e);\n\t\t\t}\n\t\t};\n\n\t\tconst disposable = new DisposableStore();\n\t\tconst collection = disposable.add(this.ownedTests.createForHierarchy(\n\t\t\tdiff => this.proxy.$publishDiff(resource, uriComponents, diff)));\n\t\tdisposable.add(toDisposable(() => cancellation.dispose(true)));\n\t\tconst subscribes: Promise<void>[] = [];\n\t\tfor (const [id, controller] of this.controllers) {\n\t\t\tsubscribes.push(subscribeFn(id, controller.instance));\n\t\t}\n\n\t\t// note: we don't increment the count initially -- this is done by the\n\t\t// main thread, incrementing once per extension host. We just push the\n\t\t// diff to signal that roots have been discovered.\n\t\tPromise.all(subscribes).then(() => collection.pushDiff([TestDiffOpType.IncrementPendingExtHosts, -1]));\n\t\tthis.testControllers.set(subscriptionKey, { store: disposable, collection, subscribeFn });\n\t}\n\n\t/**\n\t * Expands the nodes in the test tree. If levels is less than zero, it will\n\t * be treated as infinite.\n\t * @override\n\t */\n\tpublic async $expandTest(test: TestIdWithSrc, levels: number) {\n\t\tconst sub = mapFind(this.testControllers.values(), s => s.collection.treeId === test.src.tree ? s : undefined);\n\t\tawait sub?.collection.expand(test.testId, levels < 0 ? Infinity : levels);\n\t\tthis.flushCollectionDiffs();\n\t}\n\n\t/**\n\t * Disposes of a previous subscription to tests.\n\t * @override\n\t */\n\tpublic $unsubscribeFromTests(resource: ExtHostTestingResource, uriComponents: UriComponents) {\n\t\tconst uri = URI.revive(uriComponents);\n\t\tconst subscriptionKey = getTestSubscriptionKey(resource, uri);\n\t\tthis.testControllers.get(subscriptionKey)?.store.dispose();\n\t\tthis.testControllers.delete(subscriptionKey);\n\t}\n\n\t/**\n\t * Receives a test update from the main thread. Called (eventually) whenever\n\t * tests change.\n\t * @override\n\t */\n\tpublic $acceptDiff(resource: ExtHostTestingResource, uri: UriComponents, diff: TestsDiff): void {\n\t\tif (resource === ExtHostTestingResource.TextDocument) {\n\t\t\tthis.textDocumentObservers.acceptDiff(URI.revive(uri), diff);\n\t\t} else {\n\t\t\tthis.workspaceObservers.acceptDiff(URI.revive(uri), diff);\n\t\t}\n\t}\n\n\t/**\n\t * Runs tests with the given set of IDs. Allows for test from multiple\n\t * providers to be run.\n\t * @override\n\t */\n\tpublic async $runTestsForProvider(req: RunTestForProviderRequest, token: CancellationToken): Promise<void> {\n\t\tconst controller = this.controllers.get(req.tests[0].src.controller);\n\t\tif (!controller) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst includeTests = req.tests\n\t\t\t.map(({ testId, src }) => this.ownedTests.getTestById(testId, src?.tree))\n\t\t\t.filter(isDefined)\n\t\t\t.map(([_tree, test]) => test);\n\n\t\tconst excludeTests = req.excludeExtIds\n\t\t\t.map(id => this.ownedTests.getTestById(id))\n\t\t\t.filter(isDefined)\n\t\t\t.filter(([tree, exclude]) =>\n\t\t\t\tincludeTests.some(include => tree.comparePositions(include, exclude) === TestPosition.IsChild),\n\t\t\t);\n\n\t\tif (!includeTests.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst publicReq: vscode.TestRunRequest<unknown> = {\n\t\t\ttests: includeTests.map(t => TestItemFilteredWrapper.unwrap(t.actual)),\n\t\t\texclude: excludeTests.map(([, t]) => TestItemFilteredWrapper.unwrap(t.actual)),\n\t\t\tdebug: req.debug,\n\t\t};\n\n\t\tawait this.runQueue.enqueueRun({\n\t\t\tdto: TestRunDto.fromInternal(req),\n\t\t\ttoken,\n\t\t\textensionId: controller.extensionId,\n\t\t\treq: publicReq,\n\t\t\tdoRun: () => controller!.instance.runTests(publicReq, token)\n\t\t});\n\t}\n\n\tpublic $lookupTest(req: TestIdWithSrc): Promise<InternalTestItem | undefined> {\n\t\tconst owned = this.ownedTests.getTestById(req.testId);\n\t\tif (!owned) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\tconst { actual, discoverCts, expandLevels, ...item } = owned[1];\n\t\treturn Promise.resolve(item);\n\t}\n\n\t/**\n\t * Flushes diff information for all collections to ensure state in the\n\t * main thread is updated.\n\t */\n\tprivate flushCollectionDiffs() {\n\t\tfor (const { collection } of this.testControllers.values()) {\n\t\t\tcollection.flushDiff();\n\t\t}\n\t}\n\n\t/**\n\t * Gets the internal test item associated with the reference from the extension.\n\t */\n\tprivate getInternalTestForReference(test: vscode.TestItem<unknown>) {\n\t\t// Find workspace items first, then owned tests, then document tests.\n\t\t// If a test instance exists in both the workspace and document, prefer\n\t\t// the workspace because it's less ephemeral.\n\t\treturn this.workspaceObservers.getMirroredTestDataByReference(test)\n\t\t\t?? mapFind(this.testControllers.values(), c => c.collection.getTestByReference(test))\n\t\t\t?? this.textDocumentObservers.getMirroredTestDataByReference(test);\n\t}\n}\n\n/**\n * Queues runs for a single extension and provides the currently-executing\n * run so that `createTestRun` can be properly correlated.\n */\nclass TestRunQueue {\n\tprivate readonly state = new Map</* extensionId */ string, {\n\t\tcurrent: {\n\t\t\tpublicReq: vscode.TestRunRequest<unknown>,\n\t\t\tfactory: (name: string | undefined) => TestRunTask<unknown>,\n\t\t},\n\t\tqueue: (() => (Promise<void> | void))[];\n\t}>();\n\n\tconstructor(private readonly proxy: MainThreadTestingShape) { }\n\n\t/**\n\t * Registers and enqueues a test run. `doRun` will be called when an\n\t * invokation to {@link TestController.runTests} should be called.\n\t */\n\tpublic enqueueRun(opts: {\n\t\textensionId: string,\n\t\treq: vscode.TestRunRequest<unknown>,\n\t\tdto: TestRunDto,\n\t\ttoken: CancellationToken,\n\t\tdoRun: () => Thenable<void> | void,\n\t},\n\t) {\n\t\tlet record = this.state.get(opts.extensionId);\n\t\tif (!record) {\n\t\t\trecord = { queue: [], current: undefined as any };\n\t\t\tthis.state.set(opts.extensionId, record);\n\t\t}\n\n\t\tconst deferred = new DeferredPromise<void>();\n\t\tconst runner = () => {\n\t\t\tconst tasks: TestRunTask<unknown>[] = [];\n\t\t\tconst shared = new Set<string>();\n\t\t\trecord!.current = {\n\t\t\t\tpublicReq: opts.req,\n\t\t\t\tfactory: name => {\n\t\t\t\t\tconst task = new TestRunTask(name, opts.dto, shared, this.proxy);\n\t\t\t\t\ttasks.push(task);\n\t\t\t\t\topts.token.onCancellationRequested(() => task.end());\n\t\t\t\t\treturn task;\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tthis.invokeRunner(opts.extensionId, opts.dto.id, opts.doRun, tasks).finally(() => deferred.complete());\n\t\t};\n\n\t\trecord.queue.push(runner);\n\t\tif (record.queue.length === 1) {\n\t\t\trunner();\n\t\t}\n\n\t\treturn deferred.p;\n\t}\n\n\t/**\n\t * Implements the public `createTestRun` API.\n\t */\n\tpublic createTestRun<T>(extensionId: string, request: vscode.TestRunRequest<T>, name: string | undefined, persist: boolean): vscode.TestRun<T> {\n\t\tconst state = this.state.get(extensionId);\n\t\t// If the request is for the currently-executing `runTests`, then correlate\n\t\t// it to that existing run. Otherwise return a new, detached run.\n\t\tif (state?.current.publicReq === request) {\n\t\t\treturn state.current.factory(name);\n\t\t}\n\n\t\tconst dto = TestRunDto.fromPublic(request);\n\t\tconst task = new TestRunTask(name, dto, new Set(), this.proxy);\n\t\tthis.proxy.$startedExtensionTestRun({\n\t\t\tdebug: request.debug,\n\t\t\texclude: request.exclude?.map(t => t.id) ?? [],\n\t\t\tid: dto.id,\n\t\t\ttests: request.tests.map(t => t.id),\n\t\t\tpersist: persist\n\t\t});\n\t\ttask.onEnd.wait().then(() => this.proxy.$finishedExtensionTestRun(dto.id));\n\t\treturn task;\n\t}\n\n\tprivate invokeRunner<T>(extensionId: string, runId: string, fn: () => Thenable<void> | void, tasks: TestRunTask<T>[]): Promise<void> {\n\t\ttry {\n\t\t\tconst res = fn();\n\t\t\tif (isThenable(res)) {\n\t\t\t\treturn res\n\t\t\t\t\t.then(() => this.handleInvokeResult(extensionId, runId, tasks, undefined))\n\t\t\t\t\t.catch(err => this.handleInvokeResult(extensionId, runId, tasks, err));\n\t\t\t} else {\n\t\t\t\treturn this.handleInvokeResult(extensionId, runId, tasks, undefined);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\treturn this.handleInvokeResult(extensionId, runId, tasks, e);\n\t\t}\n\t}\n\n\tprivate async handleInvokeResult<T>(extensionId: string, runId: string, tasks: TestRunTask<T>[], error?: Error) {\n\t\tconst record = this.state.get(extensionId);\n\t\tif (!record) {\n\t\t\treturn;\n\t\t}\n\n\t\trecord.queue.shift();\n\t\tif (record.queue.length > 0) {\n\t\t\trecord.queue[0]();\n\t\t} else {\n\t\t\tthis.state.delete(extensionId);\n\t\t}\n\n\t\tawait Promise.all(tasks.map(t => t.onEnd.wait()));\n\t}\n}\n\nclass TestRunDto {\n\tpublic static fromPublic(request: vscode.TestRunRequest<unknown>) {\n\t\treturn new TestRunDto(\n\t\t\tgenerateUuid(),\n\t\t\tnew Set(request.tests.map(t => t.id)),\n\t\t\tnew Set(request.exclude?.map(t => t.id) ?? Iterable.empty()),\n\t\t);\n\t}\n\n\tpublic static fromInternal(request: RunTestForProviderRequest) {\n\t\treturn new TestRunDto(\n\t\t\trequest.runId,\n\t\t\tnew Set(request.tests.map(t => t.testId)),\n\t\t\tnew Set(request.excludeExtIds),\n\t\t);\n\t}\n\n\tconstructor(\n\t\tpublic readonly id: string,\n\t\tprivate readonly include: ReadonlySet<string>,\n\t\tprivate readonly exclude: ReadonlySet<string>,\n\t) { }\n\n\tpublic isIncluded(test: vscode.TestItem<unknown>) {\n\t\tfor (let t: vscode.TestItem<unknown> | undefined = test; t; t = t.parent) {\n\t\t\tif (this.include.has(t.id)) {\n\t\t\t\treturn true;\n\t\t\t} else if (this.exclude.has(t.id)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n}\n\nclass TestRunTask<T> implements vscode.TestRun<T> {\n\treadonly #proxy: MainThreadTestingShape;\n\treadonly #req: TestRunDto;\n\treadonly #taskId = generateUuid();\n\treadonly #sharedIds: Set<string>;\n\tpublic readonly onEnd = new Barrier();\n\n\tconstructor(\n\t\tpublic readonly name: string | undefined,\n\t\tdto: TestRunDto,\n\t\tsharedTestIds: Set<string>,\n\t\tproxy: MainThreadTestingShape,\n\t) {\n\t\tthis.#proxy = proxy;\n\t\tthis.#req = dto;\n\t\tthis.#sharedIds = sharedTestIds;\n\t\tproxy.$startedTestRunTask(dto.id, { id: this.#taskId, name, running: true });\n\t}\n\n\tsetState(test: vscode.TestItem<T>, state: vscode.TestResultState, duration?: number): void {\n\t\tif (this.#req.isIncluded(test)) {\n\t\t\tthis.ensureTestIsKnown(test);\n\t\t\tthis.#proxy.$updateTestStateInRun(this.#req.id, this.#taskId, test.id, state, duration);\n\t\t}\n\t}\n\n\tappendMessage(test: vscode.TestItem<T>, message: vscode.TestMessage): void {\n\t\tif (this.#req.isIncluded(test)) {\n\t\t\tthis.ensureTestIsKnown(test);\n\t\t\tthis.#proxy.$appendTestMessageInRun(this.#req.id, this.#taskId, test.id, Convert.TestMessage.from(message));\n\t\t}\n\t}\n\n\tappendOutput(output: string): void {\n\t\tthis.#proxy.$appendOutputToRun(this.#req.id, this.#taskId, VSBuffer.fromString(output));\n\t}\n\n\tend(): void {\n\t\tthis.#proxy.$finishedTestRunTask(this.#req.id, this.#taskId);\n\t\tthis.onEnd.open();\n\t}\n\n\tprivate ensureTestIsKnown(test: vscode.TestItem<T>) {\n\t\tconst sent = this.#sharedIds;\n\t\tif (sent.has(test.id)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst chain: ITestItem[] = [];\n\t\twhile (true) {\n\t\t\tchain.unshift(Convert.TestItem.from(test));\n\n\t\t\tif (sent.has(test.id)) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tsent.add(test.id);\n\t\t\tif (!test.parent) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\ttest = test.parent;\n\t\t}\n\n\t\tthis.#proxy.$addTestsToRun(this.#req.id, chain);\n\t}\n}\n\nexport const createDefaultDocumentTestRoot = async <T>(\n\tprovider: vscode.TestController<T>,\n\tdocument: vscode.TextDocument,\n\tfolder: vscode.WorkspaceFolder | undefined,\n\ttoken: CancellationToken,\n) => {\n\tif (!folder) {\n\t\treturn;\n\t}\n\n\tconst root = await provider.createWorkspaceTestRoot(folder, token);\n\tif (!root) {\n\t\treturn;\n\t}\n\n\ttoken.onCancellationRequested(() => {\n\t\tTestItemFilteredWrapper.removeFilter(document);\n\t});\n\n\tconst wrapper = TestItemFilteredWrapper.getWrapperForTestItem(root, document);\n\twrapper.refreshMatch();\n\treturn wrapper;\n};\n\n/*\n * A class which wraps a vscode.TestItem that provides the ability to filter a TestItem's children\n * to only the children that are located in a certain vscode.Uri.\n */\nexport class TestItemFilteredWrapper extends TestItemImpl {\n\tprivate static wrapperMap = new WeakMap<vscode.TextDocument, WeakMap<vscode.TestItem<unknown>, TestItemFilteredWrapper>>();\n\n\tpublic static removeFilter(document: vscode.TextDocument): void {\n\t\tthis.wrapperMap.delete(document);\n\t}\n\n\t// Wraps the TestItem specified in a TestItemFilteredWrapper and pulls from a cache if it already exists.\n\tpublic static getWrapperForTestItem(\n\t\titem: vscode.TestItem<unknown>,\n\t\tfilterDocument: vscode.TextDocument,\n\t\tparent?: TestItemFilteredWrapper,\n\t): TestItemFilteredWrapper {\n\t\tlet innerMap = this.wrapperMap.get(filterDocument);\n\t\tif (innerMap?.has(item)) {\n\t\t\treturn innerMap.get(item) as TestItemFilteredWrapper;\n\t\t}\n\n\t\tif (!innerMap) {\n\t\t\tinnerMap = new WeakMap();\n\t\t\tthis.wrapperMap.set(filterDocument, innerMap);\n\t\t}\n\n\t\tconst w = new TestItemFilteredWrapper(item, filterDocument, parent);\n\t\tinnerMap.set(item, w);\n\t\treturn w;\n\t}\n\n\t/**\n\t * If the TestItem is wrapped, returns the unwrapped item provided\n\t * by the extension.\n\t */\n\tpublic static unwrap<T>(item: vscode.TestItem<T> | TestItemFilteredWrapper) {\n\t\treturn item instanceof TestItemFilteredWrapper ? item.actual as vscode.TestItem<T> : item;\n\t}\n\n\tprivate _cachedMatchesFilter: boolean | undefined;\n\n\t/**\n\t * Gets whether this node, or any of its children, match the document filter.\n\t */\n\tpublic get hasNodeMatchingFilter(): boolean {\n\t\tif (this._cachedMatchesFilter === undefined) {\n\t\t\treturn this.refreshMatch();\n\t\t} else {\n\t\t\treturn this._cachedMatchesFilter;\n\t\t}\n\t}\n\n\tprivate constructor(\n\t\tpublic readonly actual: vscode.TestItem<unknown>,\n\t\tprivate filterDocument: vscode.TextDocument,\n\t\tpublic readonly actualParent?: TestItemFilteredWrapper,\n\t) {\n\t\tsuper(actual.id, actual.label, actual.uri, undefined);\n\t\tif (!(actual instanceof TestItemImpl)) {\n\t\t\tthrow new Error(`TestItems provided to the VS Code API must extend \\`vscode.TestItem\\`, but ${actual.id} did not`);\n\t\t}\n\n\t\tthis.debuggable = actual.debuggable;\n\t\tthis.runnable = actual.runnable;\n\t\tthis.description = actual.description;\n\t\tthis.error = actual.error;\n\t\tthis.status = actual.status;\n\t\tthis.range = actual.range;\n\t\tthis.resolveHandler = actual.resolveHandler;\n\n\t\tconst wrapperApi = getPrivateApiFor(this);\n\t\tconst actualApi = getPrivateApiFor(actual);\n\t\tactualApi.bus.event(evt => {\n\t\t\tswitch (evt[0]) {\n\t\t\t\tcase ExtHostTestItemEventType.SetProp:\n\t\t\t\t\t(this as Record<string, unknown>)[evt[1]] = evt[2];\n\t\t\t\t\tbreak;\n\t\t\t\tcase ExtHostTestItemEventType.NewChild:\n\t\t\t\t\tconst wrapper = TestItemFilteredWrapper.getWrapperForTestItem(evt[1], this.filterDocument, this);\n\t\t\t\t\tgetPrivateApiFor(wrapper).parent = actual;\n\t\t\t\t\twrapper.refreshMatch();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\twrapperApi.bus.fire(evt);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Refreshes the `hasNodeMatchingFilter` state for this item. It matches\n\t * if the test itself has a location that matches, or if any of its\n\t * children do.\n\t */\n\tpublic refreshMatch() {\n\t\tconst didMatch = this._cachedMatchesFilter;\n\n\t\t// The `children` of the wrapper only include the children who match the\n\t\t// filter. Synchronize them.\n\t\tfor (const rawChild of this.actual.children.values()) {\n\t\t\tconst wrapper = TestItemFilteredWrapper.getWrapperForTestItem(rawChild, this.filterDocument, this);\n\t\t\tif (!wrapper.hasNodeMatchingFilter) {\n\t\t\t\twrapper.dispose();\n\t\t\t} else if (!this.children.has(wrapper.id)) {\n\t\t\t\tthis.addChild(wrapper);\n\t\t\t}\n\t\t}\n\n\t\tconst nowMatches = this.children.size > 0 || this.actual.uri.toString() === this.filterDocument.uri.toString();\n\t\tthis._cachedMatchesFilter = nowMatches;\n\n\t\tif (nowMatches !== didMatch) {\n\t\t\tthis.actualParent?.refreshMatch();\n\t\t}\n\n\t\treturn this._cachedMatchesFilter;\n\t}\n\n\tpublic override dispose() {\n\t\tif (this.actualParent) {\n\t\t\tgetPrivateApiFor(this.actualParent).children.delete(this.id);\n\t\t}\n\n\t\tgetPrivateApiFor(this).bus.fire([ExtHostTestItemEventType.Disposed]);\n\t}\n}\n\n/**\n * @private\n */\ninterface MirroredCollectionTestItem extends IncrementalTestCollectionItem {\n\trevived: vscode.TestItem<never>;\n\tdepth: number;\n}\n\nclass MirroredChangeCollector extends IncrementalChangeCollector<MirroredCollectionTestItem> {\n\tprivate readonly added = new Set<MirroredCollectionTestItem>();\n\tprivate readonly updated = new Set<MirroredCollectionTestItem>();\n\tprivate readonly removed = new Set<MirroredCollectionTestItem>();\n\n\tprivate readonly alreadyRemoved = new Set<string>();\n\n\tpublic get isEmpty() {\n\t\treturn this.added.size === 0 && this.removed.size === 0 && this.updated.size === 0;\n\t}\n\n\tconstructor(private readonly emitter: Emitter<vscode.TestsChangeEvent>) {\n\t\tsuper();\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic override add(node: MirroredCollectionTestItem): void {\n\t\tthis.added.add(node);\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic override update(node: MirroredCollectionTestItem): void {\n\t\tObject.assign(node.revived, Convert.TestItem.toPlain(node.item));\n\t\tif (!this.added.has(node)) {\n\t\t\tthis.updated.add(node);\n\t\t}\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic override remove(node: MirroredCollectionTestItem): void {\n\t\tif (this.added.has(node)) {\n\t\t\tthis.added.delete(node);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.updated.delete(node);\n\n\t\tif (node.parent && this.alreadyRemoved.has(node.parent)) {\n\t\t\tthis.alreadyRemoved.add(node.item.extId);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.removed.add(node);\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic getChangeEvent(): vscode.TestsChangeEvent {\n\t\tconst { added, updated, removed } = this;\n\t\treturn {\n\t\t\tget added() { return [...added].map(n => n.revived); },\n\t\t\tget updated() { return [...updated].map(n => n.revived); },\n\t\t\tget removed() { return [...removed].map(n => n.revived); },\n\t\t};\n\t}\n\n\tpublic override complete() {\n\t\tif (!this.isEmpty) {\n\t\t\tthis.emitter.fire(this.getChangeEvent());\n\t\t}\n\t}\n}\n\n/**\n * Maintains tests in this extension host sent from the main thread.\n * @private\n */\nexport class MirroredTestCollection extends AbstractIncrementalTestCollection<MirroredCollectionTestItem> {\n\tprivate changeEmitter = new Emitter<vscode.TestsChangeEvent>();\n\n\t/**\n\t * Change emitter that fires with the same sematics as `TestObserver.onDidChangeTests`.\n\t */\n\tpublic readonly onDidChangeTests = this.changeEmitter.event;\n\n\t/**\n\t * Gets a list of root test items.\n\t */\n\tpublic get rootTestItems() {\n\t\treturn this.getAllAsTestItem([...this.roots]);\n\t}\n\n\t/**\n\t * Translates the item IDs to TestItems for exposure to extensions.\n\t */\n\tpublic getAllAsTestItem(itemIds: Iterable<string>) {\n\t\tlet output: vscode.TestItem<never>[] = [];\n\t\tfor (const itemId of itemIds) {\n\t\t\tconst item = this.items.get(itemId);\n\t\t\tif (item) {\n\t\t\t\toutput.push(item.revived);\n\t\t\t}\n\t\t}\n\n\t\treturn output;\n\t}\n\n\t/**\n\t *\n\t * If the test ID exists, returns its underlying ID.\n\t */\n\tpublic getMirroredTestDataById(itemId: string) {\n\t\treturn this.items.get(itemId);\n\t}\n\n\t/**\n\t * If the test item is a mirrored test item, returns its underlying ID.\n\t */\n\tpublic getMirroredTestDataByReference(item: vscode.TestItem<unknown>) {\n\t\treturn this.items.get(item.id);\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprotected createItem(item: InternalTestItem, parent?: MirroredCollectionTestItem): MirroredCollectionTestItem {\n\t\treturn {\n\t\t\t...item,\n\t\t\t// todo@connor4312: make this work well again with children\n\t\t\trevived: Convert.TestItem.toPlain(item.item) as vscode.TestItem<never>,\n\t\t\tdepth: parent ? parent.depth + 1 : 0,\n\t\t\tchildren: new Set(),\n\t\t};\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprotected override createChangeCollector() {\n\t\treturn new MirroredChangeCollector(this.changeEmitter);\n\t}\n}\n\n\ninterface IObserverData {\n\tobservers: number;\n\ttests: MirroredTestCollection;\n\tlistener: IDisposable;\n\tpendingDeletion?: IDisposable;\n}\n\nabstract class AbstractTestObserverFactory {\n\tprivate readonly resources = new Map<string /* uri */, IObserverData>();\n\n\tpublic checkout(resourceUri: URI): vscode.TestObserver {\n\t\tconst resourceKey = resourceUri.toString();\n\t\tconst resource = this.resources.get(resourceKey) ?? this.createObserverData(resourceUri);\n\n\t\tresource.pendingDeletion?.dispose();\n\t\tresource.observers++;\n\n\t\treturn {\n\t\t\tonDidChangeTest: resource.tests.onDidChangeTests,\n\t\t\tonDidDiscoverInitialTests: new Emitter<void>().event, // todo@connor4312\n\t\t\tget tests() {\n\t\t\t\treturn resource.tests.rootTestItems;\n\t\t\t},\n\t\t\tdispose: once(() => {\n\t\t\t\tif (!--resource.observers) {\n\t\t\t\t\tresource.pendingDeletion = this.eventuallyDispose(resourceUri);\n\t\t\t\t}\n\t\t\t}),\n\t\t};\n\t}\n\n\t/**\n\t * Gets the internal test data by its reference, in any observer.\n\t */\n\tpublic getMirroredTestDataByReference(ref: vscode.TestItem<unknown>) {\n\t\tfor (const { tests } of this.resources.values()) {\n\t\t\tconst v = tests.getMirroredTestDataByReference(ref);\n\t\t\tif (v) {\n\t\t\t\treturn v;\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Called when no observers are listening for the resource any more. Should\n\t * defer unlistening on the resource, and return a disposiable\n\t * to halt the process in case new listeners come in.\n\t */\n\tprotected eventuallyDispose(resourceUri: URI) {\n\t\treturn disposableTimeout(() => this.unlisten(resourceUri), 10 * 1000);\n\t}\n\n\t/**\n\t * Starts listening to test information for the given resource.\n\t */\n\tprotected abstract listen(resourceUri: URI, onDiff: (diff: TestsDiff) => void): Disposable;\n\n\tprivate createObserverData(resourceUri: URI): IObserverData {\n\t\tconst tests = new MirroredTestCollection();\n\t\tconst listener = this.listen(resourceUri, diff => tests.apply(diff));\n\t\tconst data: IObserverData = { observers: 0, tests, listener };\n\t\tthis.resources.set(resourceUri.toString(), data);\n\t\treturn data;\n\t}\n\n\t/**\n\t * Called when a resource is no longer in use.\n\t */\n\tprotected unlisten(resourceUri: URI) {\n\t\tconst key = resourceUri.toString();\n\t\tconst resource = this.resources.get(key);\n\t\tif (resource) {\n\t\t\tresource.observers = -1;\n\t\t\tresource.pendingDeletion?.dispose();\n\t\t\tresource.listener.dispose();\n\t\t\tthis.resources.delete(key);\n\t\t}\n\t}\n}\n\nclass WorkspaceFolderTestObserverFactory extends AbstractTestObserverFactory {\n\tprivate diffListeners = new Map<string, (diff: TestsDiff) => void>();\n\n\tconstructor(private readonly proxy: MainThreadTestingShape) {\n\t\tsuper();\n\t}\n\n\t/**\n\t * Publishees the diff for the workspace folder with the given uri.\n\t */\n\tpublic acceptDiff(resourceUri: URI, diff: TestsDiff) {\n\t\tthis.diffListeners.get(resourceUri.toString())?.(diff);\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic listen(resourceUri: URI, onDiff: (diff: TestsDiff) => void) {\n\t\tthis.proxy.$subscribeToDiffs(ExtHostTestingResource.Workspace, resourceUri);\n\n\t\tconst uriString = resourceUri.toString();\n\t\tthis.diffListeners.set(uriString, onDiff);\n\n\t\treturn new Disposable(() => {\n\t\t\tthis.proxy.$unsubscribeFromDiffs(ExtHostTestingResource.Workspace, resourceUri);\n\t\t\tthis.diffListeners.delete(uriString);\n\t\t});\n\t}\n}\n\nclass TextDocumentTestObserverFactory extends AbstractTestObserverFactory {\n\tprivate diffListeners = new Map<string, (diff: TestsDiff) => void>();\n\n\tconstructor(private readonly proxy: MainThreadTestingShape, private documents: IExtHostDocumentsAndEditors) {\n\t\tsuper();\n\t}\n\n\t/**\n\t * Publishees the diff for the document with the given uri.\n\t */\n\tpublic acceptDiff(resourceUri: URI, diff: TestsDiff) {\n\t\tthis.diffListeners.get(resourceUri.toString())?.(diff);\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic listen(resourceUri: URI, onDiff: (diff: TestsDiff) => void) {\n\t\tconst document = this.documents.getDocument(resourceUri);\n\t\tif (!document) {\n\t\t\treturn new Disposable(() => undefined);\n\t\t}\n\n\t\tconst uriString = resourceUri.toString();\n\t\tthis.diffListeners.set(uriString, onDiff);\n\n\t\tthis.proxy.$subscribeToDiffs(ExtHostTestingResource.TextDocument, resourceUri);\n\t\treturn new Disposable(() => {\n\t\t\tthis.proxy.$unsubscribeFromDiffs(ExtHostTestingResource.TextDocument, resourceUri);\n\t\t\tthis.diffListeners.delete(uriString);\n\t\t});\n\t}\n}\n"]}