{"version":3,"sources":["vs/workbench/api/common/jsonValidationExtensionPoint.ts"],"names":[],"mappings":"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","file":"jsonValidationExtensionPoint.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { ExtensionsRegistry } from 'vs/workbench/services/extensions/common/extensionsRegistry';\nimport * as resources from 'vs/base/common/resources';\nimport { isString } from 'vs/base/common/types';\n\ninterface IJSONValidationExtensionPoint {\n\tfileMatch: string | string[];\n\turl: string;\n}\n\nconst configurationExtPoint = ExtensionsRegistry.registerExtensionPoint<IJSONValidationExtensionPoint[]>({\n\textensionPoint: 'jsonValidation',\n\tdefaultExtensionKind: 'workspace',\n\tjsonSchema: {\n\t\tdescription: nls.localize('contributes.jsonValidation', 'Contributes json schema configuration.'),\n\t\ttype: 'array',\n\t\tdefaultSnippets: [{ body: [{ fileMatch: '${1:file.json}', url: '${2:url}' }] }],\n\t\titems: {\n\t\t\ttype: 'object',\n\t\t\tdefaultSnippets: [{ body: { fileMatch: '${1:file.json}', url: '${2:url}' } }],\n\t\t\tproperties: {\n\t\t\t\tfileMatch: {\n\t\t\t\t\ttype: ['string', 'array'],\n\t\t\t\t\tdescription: nls.localize('contributes.jsonValidation.fileMatch', 'The file pattern (or an array of patterns) to match, for example \"package.json\" or \"*.launch\". Exclusion patterns start with \\'!\\''),\n\t\t\t\t\titems: {\n\t\t\t\t\t\ttype: ['string']\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\turl: {\n\t\t\t\t\tdescription: nls.localize('contributes.jsonValidation.url', 'A schema URL (\\'http:\\', \\'https:\\') or relative path to the extension folder (\\'./\\').'),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n});\n\nexport class JSONValidationExtensionPoint {\n\n\tconstructor() {\n\t\tconfigurationExtPoint.setHandler((extensions) => {\n\t\t\tfor (const extension of extensions) {\n\t\t\t\tconst extensionValue = <IJSONValidationExtensionPoint[]>extension.value;\n\t\t\t\tconst collector = extension.collector;\n\t\t\t\tconst extensionLocation = extension.description.extensionLocation;\n\n\t\t\t\tif (!extensionValue || !Array.isArray(extensionValue)) {\n\t\t\t\t\tcollector.error(nls.localize('invalid.jsonValidation', \"'configuration.jsonValidation' must be a array\"));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\textensionValue.forEach(extension => {\n\t\t\t\t\tif (!isString(extension.fileMatch) && !(Array.isArray(extension.fileMatch) && extension.fileMatch.every(isString))) {\n\t\t\t\t\t\tcollector.error(nls.localize('invalid.fileMatch', \"'configuration.jsonValidation.fileMatch' must be defined as a string or an array of strings.\"));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tlet uri = extension.url;\n\t\t\t\t\tif (!isString(uri)) {\n\t\t\t\t\t\tcollector.error(nls.localize('invalid.url', \"'configuration.jsonValidation.url' must be a URL or relative path\"));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (uri.startsWith('./')) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst colorThemeLocation = resources.joinPath(extensionLocation, uri);\n\t\t\t\t\t\t\tif (!resources.isEqualOrParent(colorThemeLocation, extensionLocation)) {\n\t\t\t\t\t\t\t\tcollector.warn(nls.localize('invalid.path.1', \"Expected `contributes.{0}.url` ({1}) to be included inside extension's folder ({2}). This might make the extension non-portable.\", configurationExtPoint.name, colorThemeLocation.toString(), extensionLocation.path));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tcollector.error(nls.localize('invalid.url.fileschema', \"'configuration.jsonValidation.url' is an invalid relative URL: {0}\", e.message));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (!/^[^:/?#]+:\\/\\//.test(uri)) {\n\t\t\t\t\t\tcollector.error(nls.localize('invalid.url.schema', \"'configuration.jsonValidation.url' must be an absolute URL or start with './'  to reference schemas located in the extension.\"));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n}\n"]}