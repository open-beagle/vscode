{"version":3,"file":"extHostDocumentContentProviders.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/api/common/extHostDocumentContentProviders.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { Disposable } from 'vs/workbench/api/common/extHostTypes';\nimport type * as vscode from 'vscode';\nimport { MainContext, ExtHostDocumentContentProvidersShape, MainThreadDocumentContentProvidersShape, IMainContext } from './extHost.protocol';\nimport { ExtHostDocumentsAndEditors } from './extHostDocumentsAndEditors';\nimport { Schemas } from 'vs/base/common/network';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { splitLines } from 'vs/base/common/strings';\n\nexport class ExtHostDocumentContentProvider implements ExtHostDocumentContentProvidersShape {\n\n\tprivate static _handlePool = 0;\n\n\tprivate readonly _documentContentProviders = new Map<number, vscode.TextDocumentContentProvider>();\n\tprivate readonly _proxy: MainThreadDocumentContentProvidersShape;\n\n\tconstructor(\n\t\tmainContext: IMainContext,\n\t\tprivate readonly _documentsAndEditors: ExtHostDocumentsAndEditors,\n\t\tprivate readonly _logService: ILogService,\n\t) {\n\t\tthis._proxy = mainContext.getProxy(MainContext.MainThreadDocumentContentProviders);\n\t}\n\n\tregisterTextDocumentContentProvider(scheme: string, provider: vscode.TextDocumentContentProvider): vscode.Disposable {\n\t\t// todo@remote\n\t\t// check with scheme from fs-providers!\n\t\tif (Object.keys(Schemas).indexOf(scheme) >= 0) {\n\t\t\tthrow new Error(`scheme '${scheme}' already registered`);\n\t\t}\n\n\t\tconst handle = ExtHostDocumentContentProvider._handlePool++;\n\n\t\tthis._documentContentProviders.set(handle, provider);\n\t\tthis._proxy.$registerTextContentProvider(handle, scheme);\n\n\t\tlet subscription: IDisposable | undefined;\n\t\tif (typeof provider.onDidChange === 'function') {\n\t\t\tsubscription = provider.onDidChange(uri => {\n\t\t\t\tif (uri.scheme !== scheme) {\n\t\t\t\t\tthis._logService.warn(`Provider for scheme '${scheme}' is firing event for schema '${uri.scheme}' which will be IGNORED`);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (this._documentsAndEditors.getDocument(uri)) {\n\t\t\t\t\tthis.$provideTextDocumentContent(handle, uri).then(value => {\n\t\t\t\t\t\tif (!value && typeof value !== 'string') {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst document = this._documentsAndEditors.getDocument(uri);\n\t\t\t\t\t\tif (!document) {\n\t\t\t\t\t\t\t// disposed in the meantime\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// create lines and compare\n\t\t\t\t\t\tconst lines = splitLines(value);\n\n\t\t\t\t\t\t// broadcast event when content changed\n\t\t\t\t\t\tif (!document.equalLines(lines)) {\n\t\t\t\t\t\t\treturn this._proxy.$onVirtualDocumentChange(uri, value);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}, onUnexpectedError);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn new Disposable(() => {\n\t\t\tif (this._documentContentProviders.delete(handle)) {\n\t\t\t\tthis._proxy.$unregisterTextContentProvider(handle);\n\t\t\t}\n\t\t\tif (subscription) {\n\t\t\t\tsubscription.dispose();\n\t\t\t\tsubscription = undefined;\n\t\t\t}\n\t\t});\n\t}\n\n\t$provideTextDocumentContent(handle: number, uri: UriComponents): Promise<string | null | undefined> {\n\t\tconst provider = this._documentContentProviders.get(handle);\n\t\tif (!provider) {\n\t\t\treturn Promise.reject(new Error(`unsupported uri-scheme: ${uri.scheme}`));\n\t\t}\n\t\treturn Promise.resolve(provider.provideTextDocumentContent(URI.revive(uri), CancellationToken.None));\n\t}\n}\n"]}