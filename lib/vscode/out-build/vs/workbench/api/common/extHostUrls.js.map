{"version":3,"file":"extHostUrls.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/api/common/extHostUrls.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAShG,MAAa,WAAW;QAQvB,YACC,WAAyB;YAJlB,YAAO,GAAG,IAAI,GAAG,EAAU,CAAC;YAC5B,aAAQ,GAAG,IAAI,GAAG,EAA6B,CAAC;YAKvD,IAAI,CAAC,MAAM,GAAG,WAAW,CAAC,QAAQ,CAAC,8BAAW,CAAC,cAAc,CAAC,CAAC;QAChE,CAAC;QAED,kBAAkB,CAAC,WAAgC,EAAE,OAA0B;YAC9E,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,gCAAmB,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,EAAE;gBAC7D,MAAM,IAAI,KAAK,CAAC,qDAAqD,WAAW,EAAE,CAAC,CAAC;aACpF;YAED,MAAM,MAAM,GAAG,WAAW,CAAC,UAAU,EAAE,CAAC;YACxC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,gCAAmB,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC;YACzD,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;YACnC,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;YAErD,OAAO,CAAA,GAAA,wBAAY,CAAA,CAAC,GAAG,EAAE;gBACxB,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,gCAAmB,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC;gBAC5D,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;gBAC7B,IAAI,CAAC,MAAM,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC;YAC3C,CAAC,CAAC,CAAC;QACJ,CAAC;QAED,kBAAkB,CAAC,MAAc,EAAE,GAAkB;YACpD,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YAE1C,IAAI,CAAC,OAAO,EAAE;gBACb,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;aAClC;YACD,IAAI;gBACH,OAAO,CAAC,SAAS,CAAC,SAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;aACnC;YAAC,OAAO,GAAG,EAAE;gBACb,CAAA,GAAA,0BAAiB,CAAA,CAAC,GAAG,CAAC,CAAC;aACvB;YAED,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QACnC,CAAC;QAED,KAAK,CAAC,YAAY,CAAC,GAAQ;YAC1B,OAAO,SAAG,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC;QACzD,CAAC;;IAhDF,kCAiDC;IA/Ce,sBAAU,GAAG,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type * as vscode from 'vscode';\nimport { MainContext, IMainContext, ExtHostUrlsShape, MainThreadUrlsShape } from './extHost.protocol';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { toDisposable } from 'vs/base/common/lifecycle';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\n\nexport class ExtHostUrls implements ExtHostUrlsShape {\n\n\tprivate static HandlePool = 0;\n\tprivate readonly _proxy: MainThreadUrlsShape;\n\n\tprivate handles = new Set<string>();\n\tprivate handlers = new Map<number, vscode.UriHandler>();\n\n\tconstructor(\n\t\tmainContext: IMainContext\n\t) {\n\t\tthis._proxy = mainContext.getProxy(MainContext.MainThreadUrls);\n\t}\n\n\tregisterUriHandler(extensionId: ExtensionIdentifier, handler: vscode.UriHandler): vscode.Disposable {\n\t\tif (this.handles.has(ExtensionIdentifier.toKey(extensionId))) {\n\t\t\tthrow new Error(`Protocol handler already registered for extension ${extensionId}`);\n\t\t}\n\n\t\tconst handle = ExtHostUrls.HandlePool++;\n\t\tthis.handles.add(ExtensionIdentifier.toKey(extensionId));\n\t\tthis.handlers.set(handle, handler);\n\t\tthis._proxy.$registerUriHandler(handle, extensionId);\n\n\t\treturn toDisposable(() => {\n\t\t\tthis.handles.delete(ExtensionIdentifier.toKey(extensionId));\n\t\t\tthis.handlers.delete(handle);\n\t\t\tthis._proxy.$unregisterUriHandler(handle);\n\t\t});\n\t}\n\n\t$handleExternalUri(handle: number, uri: UriComponents): Promise<void> {\n\t\tconst handler = this.handlers.get(handle);\n\n\t\tif (!handler) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\t\ttry {\n\t\t\thandler.handleUri(URI.revive(uri));\n\t\t} catch (err) {\n\t\t\tonUnexpectedError(err);\n\t\t}\n\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tasync createAppUri(uri: URI): Promise<vscode.Uri> {\n\t\treturn URI.revive(await this._proxy.$createAppUri(uri));\n\t}\n}\n"]}