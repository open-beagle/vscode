{"version":3,"file":"extHostTunnelService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/api/common/extHostTunnelService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAkBhG,IAAiB,SAAS,CAczB;IAdD,WAAiB,SAAS;QACzB,SAAgB,aAAa,CAAC,MAAqB;YAClD,OAAO,EAAE,aAAa,EAAE,MAAM,CAAC,aAAa,EAAE,YAAY,EAAE,MAAM,CAAC,YAAY,EAAE,MAAM,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;QAC5G,CAAC;QAFe,uBAAa,gBAE5B,CAAA;QACD,SAAgB,iBAAiB,CAAC,MAAoB;YACrD,OAAO;gBACN,aAAa,EAAE;oBACd,IAAI,EAAE,MAAM,CAAC,gBAAgB;oBAC7B,IAAI,EAAE,MAAM,CAAC,gBAAgB;iBAC7B;gBACD,YAAY,EAAE,MAAM,CAAC,YAAY;gBACjC,MAAM,EAAE,MAAM,CAAC,MAAM;aACrB,CAAC;QACH,CAAC;QATe,2BAAiB,oBAShC,CAAA;IACF,CAAC,EAdgB,SAAS,GAAT,iBAAS,KAAT,iBAAS,QAczB;IAgBY,QAAA,qBAAqB,GAAG,CAAA,GAAA,+BAAe,CAAA,CAAwB,uBAAuB,CAAC,CAAC;IAErG,IAAa,oBAAoB,GAAjC,MAAa,oBAAoB;QAIhC,YACqB,UAA8B;YAHnD,uBAAkB,GAAuB,CAAC,IAAI,eAAO,EAAQ,CAAC,CAAC,KAAK,CAAC;QAKrE,CAAC;QACD,KAAK,CAAC,qBAAqB,CAAC,UAA2B;YACtD,OAAO,UAAU,CAAC;QACnB,CAAC;QAED,KAAK,CAAC,UAAU,CAAC,SAAgC,EAAE,OAAsB;YACxE,OAAO,SAAS,CAAC;QAClB,CAAC;QACD,KAAK,CAAC,UAAU;YACf,OAAO,EAAE,CAAC;QACX,CAAC;QACD,KAAK,CAAC,2BAA2B,CAAC,QAAoD;YACrF,OAAO,EAAE,OAAO,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC;QAC/B,CAAC;QACD,+BAA+B,CAAC,YAA4D,EAAE,QAAuC;YACpI,OAAO,EAAE,OAAO,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC;QAC/B,CAAC;QAED,KAAK,CAAC,sBAAsB,CAAC,OAAiB,EAAE,KAAe,EAAE,GAAuB,EAAE,WAA+B,EAAE,iBAA2C;YACrK,OAAO,EAAE,CAAC;QACX,CAAC;QAED,KAAK,CAAC,YAAY,CAAC,aAA4B,EAAE,qBAA4C,IAAoC,OAAO,SAAS,CAAC,CAAC,CAAC;QACpJ,KAAK,CAAC,YAAY,CAAC,MAAsC,IAAmB,CAAC;QAC7E,KAAK,CAAC,mBAAmB,KAAoB,CAAC;QAC9C,KAAK,CAAC,wBAAwB,KAAoB,CAAC;KACnD,CAAA;IAjCY,oBAAoB;QAK9B,WAAA,sCAAkB,CAAA;OALR,oBAAoB,CAiChC;IAjCY,oDAAoB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ExtHostTunnelServiceShape } from 'vs/workbench/api/common/extHost.protocol';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport * as vscode from 'vscode';\nimport { ProvidedPortAttributes, RemoteTunnel, TunnelCreationOptions, TunnelOptions } from 'vs/platform/remote/common/tunnel';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { Emitter } from 'vs/base/common/event';\nimport { IExtHostRpcService } from 'vs/workbench/api/common/extHostRpcService';\nimport { IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { CandidatePort } from 'vs/workbench/services/remote/common/remoteExplorerService';\n\nexport interface TunnelDto {\n\tremoteAddress: { port: number, host: string };\n\tlocalAddress: { port: number, host: string } | string;\n\tpublic: boolean;\n}\n\nexport namespace TunnelDto {\n\texport function fromApiTunnel(tunnel: vscode.Tunnel): TunnelDto {\n\t\treturn { remoteAddress: tunnel.remoteAddress, localAddress: tunnel.localAddress, public: !!tunnel.public };\n\t}\n\texport function fromServiceTunnel(tunnel: RemoteTunnel): TunnelDto {\n\t\treturn {\n\t\t\tremoteAddress: {\n\t\t\t\thost: tunnel.tunnelRemoteHost,\n\t\t\t\tport: tunnel.tunnelRemotePort\n\t\t\t},\n\t\t\tlocalAddress: tunnel.localAddress,\n\t\t\tpublic: tunnel.public\n\t\t};\n\t}\n}\n\nexport interface Tunnel extends vscode.Disposable {\n\tremote: { port: number, host: string };\n\tlocalAddress: string;\n}\n\nexport interface IExtHostTunnelService extends ExtHostTunnelServiceShape {\n\treadonly _serviceBrand: undefined;\n\topenTunnel(extension: IExtensionDescription, forward: TunnelOptions): Promise<vscode.Tunnel | undefined>;\n\tgetTunnels(): Promise<vscode.TunnelDescription[]>;\n\tonDidChangeTunnels: vscode.Event<void>;\n\tsetTunnelExtensionFunctions(provider: vscode.RemoteAuthorityResolver | undefined): Promise<IDisposable>;\n\tregisterPortsAttributesProvider(portSelector: { pid?: number, portRange?: [number, number], commandMatcher?: RegExp }, provider: vscode.PortAttributesProvider): IDisposable;\n}\n\nexport const IExtHostTunnelService = createDecorator<IExtHostTunnelService>('IExtHostTunnelService');\n\nexport class ExtHostTunnelService implements IExtHostTunnelService {\n\tdeclare readonly _serviceBrand: undefined;\n\tonDidChangeTunnels: vscode.Event<void> = (new Emitter<void>()).event;\n\n\tconstructor(\n\t\t@IExtHostRpcService extHostRpc: IExtHostRpcService,\n\t) {\n\t}\n\tasync $applyCandidateFilter(candidates: CandidatePort[]): Promise<CandidatePort[]> {\n\t\treturn candidates;\n\t}\n\n\tasync openTunnel(extension: IExtensionDescription, forward: TunnelOptions): Promise<vscode.Tunnel | undefined> {\n\t\treturn undefined;\n\t}\n\tasync getTunnels(): Promise<vscode.TunnelDescription[]> {\n\t\treturn [];\n\t}\n\tasync setTunnelExtensionFunctions(provider: vscode.RemoteAuthorityResolver | undefined): Promise<IDisposable> {\n\t\treturn { dispose: () => { } };\n\t}\n\tregisterPortsAttributesProvider(portSelector: { pid?: number, portRange?: [number, number] }, provider: vscode.PortAttributesProvider) {\n\t\treturn { dispose: () => { } };\n\t}\n\n\tasync $providePortAttributes(handles: number[], ports: number[], pid: number | undefined, commandline: string | undefined, cancellationToken: vscode.CancellationToken): Promise<ProvidedPortAttributes[]> {\n\t\treturn [];\n\t}\n\n\tasync $forwardPort(tunnelOptions: TunnelOptions, tunnelCreationOptions: TunnelCreationOptions): Promise<TunnelDto | undefined> { return undefined; }\n\tasync $closeTunnel(remote: { host: string, port: number }): Promise<void> { }\n\tasync $onDidTunnelsChange(): Promise<void> { }\n\tasync $registerCandidateFinder(): Promise<void> { }\n}\n"]}