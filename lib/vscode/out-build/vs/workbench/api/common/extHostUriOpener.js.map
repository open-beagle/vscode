{"version":3,"file":"extHostUriOpener.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/api/common/extHostUriOpener.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAYhG,MAAa,iBAAiB;QAQ7B,YACC,WAAyB;YAHT,aAAQ,GAAG,IAAI,GAAG,EAAoC,CAAC;YAKvE,IAAI,CAAC,MAAM,GAAG,WAAW,CAAC,QAAQ,CAAC,8BAAW,CAAC,oBAAoB,CAAC,CAAC;QACtE,CAAC;QAED,yBAAyB,CACxB,WAAgC,EAChC,EAAU,EACV,MAAgC,EAChC,QAA0C;YAE1C,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;gBAC1B,MAAM,IAAI,KAAK,CAAC,mBAAmB,EAAE,sBAAsB,CAAC,CAAC;aAC7D;YAED,MAAM,aAAa,GAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;YACvG,IAAI,aAAa,EAAE;gBAClB,MAAM,IAAI,KAAK,CAAC,WAAW,aAAa,kEAAkE,CAAC,CAAC;aAC5G;YAED,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;YAC9B,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,EAAE,EAAE,QAAQ,CAAC,OAAO,EAAE,WAAW,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC;YAElF,OAAO,CAAA,GAAA,wBAAY,CAAA,CAAC,GAAG,EAAE;gBACxB,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;gBACzB,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAE,CAAC,CAAC;YACtC,CAAC,CAAC,CAAC;QACJ,CAAC;QAED,KAAK,CAAC,WAAW,CAAC,EAAU,EAAE,aAA4B,EAAE,KAAwB;YACnF,MAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;YACrC,IAAI,CAAC,MAAM,EAAE;gBACZ,MAAM,IAAI,KAAK,CAAC,2BAA2B,EAAE,EAAE,CAAC,CAAC;aACjD;YAED,MAAM,GAAG,GAAG,SAAG,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;YACtC,OAAO,MAAM,CAAC,kBAAkB,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QAC9C,CAAC;QAED,KAAK,CAAC,QAAQ,CAAC,EAAU,EAAE,OAAiE,EAAE,KAAwB;YACrH,MAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;YACrC,IAAI,CAAC,MAAM,EAAE;gBACZ,MAAM,IAAI,KAAK,CAAC,uBAAuB,EAAE,GAAG,CAAC,CAAC;aAC9C;YAED,OAAO,MAAM,CAAC,eAAe,CAAC,SAAG,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;gBAC9D,SAAS,EAAE,SAAG,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC;aACxC,EAAE,KAAK,CAAC,CAAC;QACX,CAAC;;IAzDF,8CA0DC;IAxDwB,kCAAgB,GAAG,IAAI,GAAG,CAAS,CAAC,iBAAO,CAAC,IAAI,EAAE,iBAAO,CAAC,KAAK,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { toDisposable } from 'vs/base/common/lifecycle';\nimport { Schemas } from 'vs/base/common/network';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport * as modes from 'vs/editor/common/modes';\nimport { ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\nimport type * as vscode from 'vscode';\nimport { ExtHostUriOpenersShape, IMainContext, MainContext, MainThreadUriOpenersShape } from './extHost.protocol';\n\n\nexport class ExtHostUriOpeners implements ExtHostUriOpenersShape {\n\n\tprivate static readonly supportedSchemes = new Set<string>([Schemas.http, Schemas.https]);\n\n\tprivate readonly _proxy: MainThreadUriOpenersShape;\n\n\tprivate readonly _openers = new Map<string, vscode.ExternalUriOpener>();\n\n\tconstructor(\n\t\tmainContext: IMainContext,\n\t) {\n\t\tthis._proxy = mainContext.getProxy(MainContext.MainThreadUriOpeners);\n\t}\n\n\tregisterExternalUriOpener(\n\t\textensionId: ExtensionIdentifier,\n\t\tid: string,\n\t\topener: vscode.ExternalUriOpener,\n\t\tmetadata: vscode.ExternalUriOpenerMetadata,\n\t): vscode.Disposable {\n\t\tif (this._openers.has(id)) {\n\t\t\tthrow new Error(`Opener with id '${id}' already registered`);\n\t\t}\n\n\t\tconst invalidScheme = metadata.schemes.find(scheme => !ExtHostUriOpeners.supportedSchemes.has(scheme));\n\t\tif (invalidScheme) {\n\t\t\tthrow new Error(`Scheme '${invalidScheme}' is not supported. Only http and https are currently supported.`);\n\t\t}\n\n\t\tthis._openers.set(id, opener);\n\t\tthis._proxy.$registerUriOpener(id, metadata.schemes, extensionId, metadata.label);\n\n\t\treturn toDisposable(() => {\n\t\t\tthis._openers.delete(id);\n\t\t\tthis._proxy.$unregisterUriOpener(id);\n\t\t});\n\t}\n\n\tasync $canOpenUri(id: string, uriComponents: UriComponents, token: CancellationToken): Promise<modes.ExternalUriOpenerPriority> {\n\t\tconst opener = this._openers.get(id);\n\t\tif (!opener) {\n\t\t\tthrow new Error(`Unknown opener with id: ${id}`);\n\t\t}\n\n\t\tconst uri = URI.revive(uriComponents);\n\t\treturn opener.canOpenExternalUri(uri, token);\n\t}\n\n\tasync $openUri(id: string, context: { resolvedUri: UriComponents, sourceUri: UriComponents }, token: CancellationToken): Promise<void> {\n\t\tconst opener = this._openers.get(id);\n\t\tif (!opener) {\n\t\t\tthrow new Error(`Unknown opener id: '${id}'`);\n\t\t}\n\n\t\treturn opener.openExternalUri(URI.revive(context.resolvedUri), {\n\t\t\tsourceUri: URI.revive(context.sourceUri)\n\t\t}, token);\n\t}\n}\n"]}