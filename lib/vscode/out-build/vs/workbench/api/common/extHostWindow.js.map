{"version":3,"file":"extHostWindow.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/api/common/extHostWindow.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAWhG,IAAa,aAAa,GAA1B,MAAa,aAAa;QAczB,YAAgC,UAA8B;YAN7C,4BAAuB,GAAG,IAAI,eAAO,EAAe,CAAC;YAC7D,2BAAsB,GAAuB,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC;YAEjF,WAAM,GAAG,aAAa,CAAC,YAAY,CAAC;YAI3C,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC,QAAQ,CAAC,8BAAW,CAAC,gBAAgB,CAAC,CAAC;YAChE,IAAI,CAAC,MAAM,CAAC,oBAAoB,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,IAAI,CAAC,uBAAuB,CAAC,SAAS,CAAC,CAAC,CAAC;QAC/F,CAAC;QALD,IAAI,KAAK,KAAkB,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QAOhD,uBAAuB,CAAC,OAAgB;YACvC,IAAI,OAAO,KAAK,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE;gBACpC,OAAO;aACP;YAED,IAAI,CAAC,MAAM,mCAAQ,IAAI,CAAC,MAAM,KAAE,OAAO,GAAE,CAAC;YAC1C,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAChD,CAAC;QAED,OAAO,CAAC,WAAyB,EAAE,OAAwB;YAC1D,IAAI,WAA+B,CAAC;YACpC,IAAI,OAAO,WAAW,KAAK,QAAQ,EAAE;gBACpC,WAAW,GAAG,WAAW,CAAC;gBAC1B,IAAI;oBACH,WAAW,GAAG,SAAG,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;iBACrC;gBAAC,OAAO,CAAC,EAAE;oBACX,OAAO,OAAO,CAAC,MAAM,CAAC,kBAAkB,WAAW,GAAG,CAAC,CAAC;iBACxD;aACD;YACD,IAAI,CAAA,GAAA,6BAAmB,CAAA,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE;gBAC5C,OAAO,OAAO,CAAC,MAAM,CAAC,kCAAkC,CAAC,CAAC;aAC1D;iBAAM,IAAI,WAAW,CAAC,MAAM,KAAK,iBAAO,CAAC,OAAO,EAAE;gBAClD,OAAO,OAAO,CAAC,MAAM,CAAC,mBAAmB,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC;aAChE;YACD,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,WAAW,EAAE,WAAW,EAAE,OAAO,CAAC,CAAC;QAChE,CAAC;QAED,KAAK,CAAC,aAAa,CAAC,GAAQ,EAAE,OAAwB;YACrD,IAAI,CAAA,GAAA,6BAAmB,CAAA,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;gBACpC,OAAO,OAAO,CAAC,MAAM,CAAC,kCAAkC,CAAC,CAAC;aAC1D;iBAAM,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,iBAAO,CAAC,IAAI,EAAE,iBAAO,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;gBACnE,OAAO,OAAO,CAAC,MAAM,CAAC,mBAAmB,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC;aACxD;YAED,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;YAC9D,OAAO,SAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACzB,CAAC;KACD,CAAA;IAtDe,0BAAY,GAAgB;QAC1C,OAAO,EAAE,IAAI;KACb,CAAC;IAJU,aAAa;QAcZ,WAAA,sCAAkB,CAAA;OAdnB,aAAa,CAwDzB;IAxDY,sCAAa;IA0Db,QAAA,cAAc,GAAG,CAAA,GAAA,+BAAe,CAAA,CAAiB,gBAAgB,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { ExtHostWindowShape, MainContext, MainThreadWindowShape, IOpenUriOptions } from './extHost.protocol';\nimport { WindowState } from 'vscode';\nimport { URI } from 'vs/base/common/uri';\nimport { Schemas } from 'vs/base/common/network';\nimport { isFalsyOrWhitespace } from 'vs/base/common/strings';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IExtHostRpcService } from 'vs/workbench/api/common/extHostRpcService';\n\nexport class ExtHostWindow implements ExtHostWindowShape {\n\n\tprivate static InitialState: WindowState = {\n\t\tfocused: true\n\t};\n\n\tprivate _proxy: MainThreadWindowShape;\n\n\tprivate readonly _onDidChangeWindowState = new Emitter<WindowState>();\n\treadonly onDidChangeWindowState: Event<WindowState> = this._onDidChangeWindowState.event;\n\n\tprivate _state = ExtHostWindow.InitialState;\n\tget state(): WindowState { return this._state; }\n\n\tconstructor(@IExtHostRpcService extHostRpc: IExtHostRpcService) {\n\t\tthis._proxy = extHostRpc.getProxy(MainContext.MainThreadWindow);\n\t\tthis._proxy.$getWindowVisibility().then(isFocused => this.$onDidChangeWindowFocus(isFocused));\n\t}\n\n\t$onDidChangeWindowFocus(focused: boolean): void {\n\t\tif (focused === this._state.focused) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._state = { ...this._state, focused };\n\t\tthis._onDidChangeWindowState.fire(this._state);\n\t}\n\n\topenUri(stringOrUri: string | URI, options: IOpenUriOptions): Promise<boolean> {\n\t\tlet uriAsString: string | undefined;\n\t\tif (typeof stringOrUri === 'string') {\n\t\t\turiAsString = stringOrUri;\n\t\t\ttry {\n\t\t\t\tstringOrUri = URI.parse(stringOrUri);\n\t\t\t} catch (e) {\n\t\t\t\treturn Promise.reject(`Invalid uri - '${stringOrUri}'`);\n\t\t\t}\n\t\t}\n\t\tif (isFalsyOrWhitespace(stringOrUri.scheme)) {\n\t\t\treturn Promise.reject('Invalid scheme - cannot be empty');\n\t\t} else if (stringOrUri.scheme === Schemas.command) {\n\t\t\treturn Promise.reject(`Invalid scheme '${stringOrUri.scheme}'`);\n\t\t}\n\t\treturn this._proxy.$openUri(stringOrUri, uriAsString, options);\n\t}\n\n\tasync asExternalUri(uri: URI, options: IOpenUriOptions): Promise<URI> {\n\t\tif (isFalsyOrWhitespace(uri.scheme)) {\n\t\t\treturn Promise.reject('Invalid scheme - cannot be empty');\n\t\t} else if (!new Set([Schemas.http, Schemas.https]).has(uri.scheme)) {\n\t\t\treturn Promise.reject(`Invalid scheme '${uri.scheme}'`);\n\t\t}\n\n\t\tconst result = await this._proxy.$asExternalUri(uri, options);\n\t\treturn URI.from(result);\n\t}\n}\n\nexport const IExtHostWindow = createDecorator<IExtHostWindow>('IExtHostWindow');\nexport interface IExtHostWindow extends ExtHostWindow, ExtHostWindowShape { }\n"]}