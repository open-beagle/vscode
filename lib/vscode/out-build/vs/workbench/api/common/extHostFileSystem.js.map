{"version":3,"file":"extHostFileSystem.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/api/common/extHostFileSystem.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAgBhG,MAAM,cAAc;QAApB;YAES,aAAQ,GAAa,EAAE,CAAC;QAuFjC,CAAC;QApFA,GAAG,CAAC,MAAc;YACjB,IAAI,CAAC,aAAa,GAAG,SAAS,CAAC;YAC/B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC5B,CAAC;QAED,MAAM,CAAC,MAAc;YACpB,MAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YAC1C,IAAI,GAAG,IAAI,CAAC,EAAE;gBACb,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;gBAC7B,IAAI,CAAC,aAAa,GAAG,SAAS,CAAC;aAC/B;QACF,CAAC;QAEO,iBAAiB;YACxB,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;gBAExB,sDAAsD;gBACtD,iDAAiD;gBACjD,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;gBACrC,MAAM,KAAK,GAAW,EAAE,CAAC;gBACzB,IAAI,UAA8B,CAAC;gBACnC,IAAI,SAAgB,CAAC;gBACrB,IAAI,SAAS,0BAAuB,CAAC;gBACrC,IAAI,SAAS,0BAAuB,CAAC;gBACrC,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;oBAE7B,4CAA4C;oBAC5C,mCAAmC;oBACnC,IAAI,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA,GAAA,4BAAkB,CAAA,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;oBACnE,IAAI,GAAG,KAAK,CAAC,EAAE;wBACd,SAAS,gBAAc,CAAC;qBACxB;yBAAM;wBACN,SAAS,GAAG,SAAS,CAAC;qBACtB;oBAED,OAAO,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE;wBAClC,4CAA4C;wBAC5C,6CAA6C;wBAC7C,IAAI,GAAG,GAAG,CAAC,KAAK,MAAM,CAAC,MAAM,EAAE;4BAC9B,4EAA4E;4BAC5E,SAAS,GAAG,SAAS,CAAC;4BACtB,SAAS,sBAAoB,CAAC;yBAC9B;6BAAM;4BACN,SAAS,IAAI,CAAC,CAAC;yBACf;wBACD,KAAK,CAAC,IAAI,CAAC,CAAC,SAAS,EAAE,MAAM,CAAC,WAAW,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC;wBACzE,KAAK,CAAC,IAAI,CAAC,CAAC,SAAS,EAAE,MAAM,CAAC,WAAW,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC;wBACzE,SAAS,GAAG,SAAS,CAAC;qBACtB;oBAED,UAAU,GAAG,MAAM,CAAC;oBACpB,yBAAyB;oBACzB,SAAS,GAAG,SAAS,CAAC;iBACtB;gBAED,sDAAsD;gBACtD,KAAK,CAAC,IAAI,CAAC,0DAAqD,CAAC,CAAC;gBAClE,KAAK,CAAC,IAAI,CAAC,mDAA6C,CAAC,CAAC;gBAE1D,IAAI,CAAC,aAAa,GAAG,IAAI,2BAAY,CAAC,KAAK,CAAC,CAAC;aAC7C;QACF,CAAC;QAED,oBAAoB,CAAC,QAA6B;YACjD,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAEzB,MAAM,MAAM,GAA0B,EAAE,CAAC;YACzC,MAAM,KAAK,GAAG,2BAAY,CAAC,YAAY,CAAC;gBACvC,cAAc,CAAC,UAAkB;oBAChC,OAAO,QAAQ,CAAC,MAAM,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC;gBAC7C,CAAC;gBACD,YAAY;oBACX,OAAO,QAAQ,CAAC,SAAS,CAAC;gBAC3B,CAAC;aACD,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;YAEvB,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;gBACzB,MAAM,OAAO,GAAG,aAAa,CAAC,YAAY,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;gBACpD,IAAI,OAAO,CAAC,MAAM,EAAE;oBACnB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;iBACrB;aACD;YACD,OAAO,MAAM,CAAC;QACf,CAAC;KACD;IAED,MAAa,iBAAiB;QAW7B,YAAY,WAAyB,EAAU,wBAAiD;YAAjD,6BAAwB,GAAxB,wBAAwB,CAAyB;YAR/E,kBAAa,GAAG,IAAI,cAAc,EAAE,CAAC;YACrC,gBAAW,GAAG,IAAI,GAAG,EAAqC,CAAC;YAC3D,uBAAkB,GAAG,IAAI,GAAG,EAAU,CAAC;YACvC,aAAQ,GAAG,IAAI,GAAG,EAAuB,CAAC;YAGnD,gBAAW,GAAW,CAAC,CAAC;YAG/B,IAAI,CAAC,MAAM,GAAG,WAAW,CAAC,QAAQ,CAAC,8BAAW,CAAC,oBAAoB,CAAC,CAAC;QACtE,CAAC;QAED,OAAO;;YACN,MAAA,IAAI,CAAC,yBAAyB,0CAAE,OAAO,EAAE,CAAC;QAC3C,CAAC;QAEO,uCAAuC;YAC9C,IAAI,CAAC,IAAI,CAAC,yBAAyB,EAAE;gBACpC,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC,wBAAwB,CAAC,4BAA4B,CAAC,SAAS,EAAE,GAAG,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;aAChI;QACF,CAAC;QAED,0BAA0B,CAAC,SAA8B,EAAE,MAAc,EAAE,QAAmC,EAAE,UAA+D,EAAE;YAEhL,IAAI,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;gBACxC,MAAM,IAAI,KAAK,CAAC,8BAA8B,MAAM,yBAAyB,CAAC,CAAC;aAC/E;YAED,EAAE;YACF,IAAI,CAAC,uCAAuC,EAAE,CAAC;YAE/C,MAAM,MAAM,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;YAClC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YAC/B,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YACpC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;YAEvC,IAAI,YAAY,wBAAqD,CAAC;YACtE,IAAI,OAAO,CAAC,eAAe,EAAE;gBAC5B,YAAY,gCAA0D,CAAC;aACvE;YACD,IAAI,OAAO,CAAC,UAAU,EAAE;gBACvB,YAAY,uBAAiD,CAAC;aAC9D;YACD,IAAI,OAAO,QAAQ,CAAC,IAAI,KAAK,UAAU,EAAE;gBACxC,YAAY,0BAAuD,CAAC;aACpE;YACD,IAAI,OAAO,QAAQ,CAAC,IAAI,KAAK,UAAU,IAAI,OAAO,QAAQ,CAAC,KAAK,KAAK,UAAU;mBAC3E,OAAO,QAAQ,CAAC,IAAI,KAAK,UAAU,IAAI,OAAO,QAAQ,CAAC,KAAK,KAAK,UAAU,EAC7E;gBACD,YAAY,kCAA+D,CAAC;aAC5E;YAED,IAAI,CAAC,MAAM,CAAC,2BAA2B,CAAC,MAAM,EAAE,MAAM,EAAE,YAAY,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;gBACjF,OAAO,CAAC,KAAK,CAAC,6CAA6C,SAAS,CAAC,KAAK,6BAA6B,MAAM,EAAE,CAAC,CAAC;gBACjH,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACpB,CAAC,CAAC,CAAC;YAEH,MAAM,YAAY,GAAG,QAAQ,CAAC,eAAe,CAAC,KAAK,CAAC,EAAE;gBACrD,MAAM,MAAM,GAAqB,EAAE,CAAC;gBACpC,KAAK,MAAM,CAAC,IAAI,KAAK,EAAE;oBACtB,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;oBAChC,IAAI,QAAQ,CAAC,MAAM,KAAK,MAAM,EAAE;wBAC/B,mCAAmC;wBACnC,SAAS;qBACT;oBACD,IAAI,OAAyC,CAAC;oBAC9C,QAAQ,IAAI,EAAE;wBACb,KAAK,6BAAc,CAAC,OAAO;4BAC1B,OAAO,kBAA+B,CAAC;4BACvC,MAAM;wBACP,KAAK,6BAAc,CAAC,OAAO;4BAC1B,OAAO,gBAA6B,CAAC;4BACrC,MAAM;wBACP,KAAK,6BAAc,CAAC,OAAO;4BAC1B,OAAO,kBAA+B,CAAC;4BACvC,MAAM;wBACP;4BACC,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;qBAC3C;oBACD,MAAM,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;iBACzC;gBACD,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;YACjD,CAAC,CAAC,CAAC;YAEH,OAAO,CAAA,GAAA,wBAAY,CAAA,CAAC,GAAG,EAAE;gBACxB,YAAY,CAAC,OAAO,EAAE,CAAC;gBACvB,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;gBAClC,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;gBACvC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;gBAChC,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;YACzC,CAAC,CAAC,CAAC;QACJ,CAAC;QAEO,MAAM,CAAC,QAAQ,CAAC,IAAqB;YAC5C,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;YAC1C,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;QACrC,CAAC;QAED,KAAK,CAAC,MAAc,EAAE,QAAuB;YAC5C,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,SAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;QACjH,CAAC;QAED,QAAQ,CAAC,MAAc,EAAE,QAAuB;YAC/C,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,aAAa,CAAC,SAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QACzF,CAAC;QAED,SAAS,CAAC,MAAc,EAAE,QAAuB;YAChD,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,SAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,iBAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACtH,CAAC;QAED,UAAU,CAAC,MAAc,EAAE,QAAuB,EAAE,OAAiB,EAAE,IAA4B;YAClG,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,SAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC;QAC3G,CAAC;QAED,OAAO,CAAC,MAAc,EAAE,QAAuB,EAAE,IAA6B;YAC7E,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,SAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;QACxF,CAAC;QAED,OAAO,CAAC,MAAc,EAAE,MAAqB,EAAE,MAAqB,EAAE,IAAgC;YACrG,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,SAAG,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,SAAG,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;QAC1G,CAAC;QAED,KAAK,CAAC,MAAc,EAAE,MAAqB,EAAE,MAAqB,EAAE,IAAgC;YACnG,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;YAC7C,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE;gBACnB,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;aAChE;YACD,OAAO,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAG,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,SAAG,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;QACrF,CAAC;QAED,MAAM,CAAC,MAAc,EAAE,QAAuB;YAC7C,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,SAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QAC3F,CAAC;QAED,MAAM,CAAC,MAAc,EAAE,OAAe,EAAE,QAAuB,EAAE,IAAyB;YACzF,MAAM,YAAY,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,SAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC,CAAC;YACnF,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;QAC1C,CAAC;QAED,QAAQ,CAAC,OAAe,EAAE,OAAe;YACxC,MAAM,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAChD,IAAI,YAAY,EAAE;gBACjB,YAAY,CAAC,OAAO,EAAE,CAAC;gBACvB,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;aAC9B;QACF,CAAC;QAED,KAAK,CAAC,MAAc,EAAE,QAAuB,EAAE,IAA2B;YACzE,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;YAC7C,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE;gBACnB,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;aAChE;YACD,OAAO,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;QACnE,CAAC;QAED,MAAM,CAAC,MAAc,EAAE,EAAU;YAChC,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;YAC7C,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE;gBACpB,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;aACjE;YACD,OAAO,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC;QAED,KAAK,CAAC,MAAc,EAAE,EAAU,EAAE,GAAW,EAAE,MAAc;YAC5D,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;YAC7C,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE;gBACnB,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;aAChE;YACD,MAAM,IAAI,GAAG,iBAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YACpC,OAAO,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,EAAE,GAAG,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;gBAClF,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,mBAAmB;YAChD,CAAC,CAAC,CAAC;QACJ,CAAC;QAED,MAAM,CAAC,MAAc,EAAE,EAAU,EAAE,GAAW,EAAE,IAAc;YAC7D,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;YAC7C,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE;gBACpB,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;aACjE;YACD,OAAO,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,EAAE,GAAG,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;QAClF,CAAC;QAEO,cAAc,CAAC,MAAc;YACpC,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YAC9C,IAAI,CAAC,QAAQ,EAAE;gBACd,MAAM,GAAG,GAAG,IAAI,KAAK,EAAE,CAAC;gBACxB,GAAG,CAAC,IAAI,GAAG,QAAQ,CAAC;gBACpB,GAAG,CAAC,OAAO,GAAG,aAAa,CAAC;gBAC5B,MAAM,GAAG,CAAC;aACV;YACD,OAAO,QAAQ,CAAC;QACjB,CAAC;KACD;IAnMD,8CAmMC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { MainContext, IMainContext, ExtHostFileSystemShape, MainThreadFileSystemShape, IFileChangeDto } from './extHost.protocol';\nimport type * as vscode from 'vscode';\nimport * as files from 'vs/platform/files/common/files';\nimport { IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { FileChangeType } from 'vs/workbench/api/common/extHostTypes';\nimport * as typeConverter from 'vs/workbench/api/common/extHostTypeConverters';\nimport { ExtHostLanguageFeatures } from 'vs/workbench/api/common/extHostLanguageFeatures';\nimport { State, StateMachine, LinkComputer, Edge } from 'vs/editor/common/modes/linkComputer';\nimport { commonPrefixLength } from 'vs/base/common/strings';\nimport { CharCode } from 'vs/base/common/charCode';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\n\nclass FsLinkProvider {\n\n\tprivate _schemes: string[] = [];\n\tprivate _stateMachine?: StateMachine;\n\n\tadd(scheme: string): void {\n\t\tthis._stateMachine = undefined;\n\t\tthis._schemes.push(scheme);\n\t}\n\n\tdelete(scheme: string): void {\n\t\tconst idx = this._schemes.indexOf(scheme);\n\t\tif (idx >= 0) {\n\t\t\tthis._schemes.splice(idx, 1);\n\t\t\tthis._stateMachine = undefined;\n\t\t}\n\t}\n\n\tprivate _initStateMachine(): void {\n\t\tif (!this._stateMachine) {\n\n\t\t\t// sort and compute common prefix with previous scheme\n\t\t\t// then build state transitions based on the data\n\t\t\tconst schemes = this._schemes.sort();\n\t\t\tconst edges: Edge[] = [];\n\t\t\tlet prevScheme: string | undefined;\n\t\t\tlet prevState: State;\n\t\t\tlet lastState = State.LastKnownState;\n\t\t\tlet nextState = State.LastKnownState;\n\t\t\tfor (const scheme of schemes) {\n\n\t\t\t\t// skip the common prefix of the prev scheme\n\t\t\t\t// and continue with its last state\n\t\t\t\tlet pos = !prevScheme ? 0 : commonPrefixLength(prevScheme, scheme);\n\t\t\t\tif (pos === 0) {\n\t\t\t\t\tprevState = State.Start;\n\t\t\t\t} else {\n\t\t\t\t\tprevState = nextState;\n\t\t\t\t}\n\n\t\t\t\tfor (; pos < scheme.length; pos++) {\n\t\t\t\t\t// keep creating new (next) states until the\n\t\t\t\t\t// end (and the BeforeColon-state) is reached\n\t\t\t\t\tif (pos + 1 === scheme.length) {\n\t\t\t\t\t\t// Save the last state here, because we need to continue for the next scheme\n\t\t\t\t\t\tlastState = nextState;\n\t\t\t\t\t\tnextState = State.BeforeColon;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnextState += 1;\n\t\t\t\t\t}\n\t\t\t\t\tedges.push([prevState, scheme.toUpperCase().charCodeAt(pos), nextState]);\n\t\t\t\t\tedges.push([prevState, scheme.toLowerCase().charCodeAt(pos), nextState]);\n\t\t\t\t\tprevState = nextState;\n\t\t\t\t}\n\n\t\t\t\tprevScheme = scheme;\n\t\t\t\t// Restore the last state\n\t\t\t\tnextState = lastState;\n\t\t\t}\n\n\t\t\t// all link must match this pattern `<scheme>:/<more>`\n\t\t\tedges.push([State.BeforeColon, CharCode.Colon, State.AfterColon]);\n\t\t\tedges.push([State.AfterColon, CharCode.Slash, State.End]);\n\n\t\t\tthis._stateMachine = new StateMachine(edges);\n\t\t}\n\t}\n\n\tprovideDocumentLinks(document: vscode.TextDocument): vscode.ProviderResult<vscode.DocumentLink[]> {\n\t\tthis._initStateMachine();\n\n\t\tconst result: vscode.DocumentLink[] = [];\n\t\tconst links = LinkComputer.computeLinks({\n\t\t\tgetLineContent(lineNumber: number): string {\n\t\t\t\treturn document.lineAt(lineNumber - 1).text;\n\t\t\t},\n\t\t\tgetLineCount(): number {\n\t\t\t\treturn document.lineCount;\n\t\t\t}\n\t\t}, this._stateMachine);\n\n\t\tfor (const link of links) {\n\t\t\tconst docLink = typeConverter.DocumentLink.to(link);\n\t\t\tif (docLink.target) {\n\t\t\t\tresult.push(docLink);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n\nexport class ExtHostFileSystem implements ExtHostFileSystemShape {\n\n\tprivate readonly _proxy: MainThreadFileSystemShape;\n\tprivate readonly _linkProvider = new FsLinkProvider();\n\tprivate readonly _fsProvider = new Map<number, vscode.FileSystemProvider>();\n\tprivate readonly _registeredSchemes = new Set<string>();\n\tprivate readonly _watches = new Map<number, IDisposable>();\n\n\tprivate _linkProviderRegistration?: IDisposable;\n\tprivate _handlePool: number = 0;\n\n\tconstructor(mainContext: IMainContext, private _extHostLanguageFeatures: ExtHostLanguageFeatures) {\n\t\tthis._proxy = mainContext.getProxy(MainContext.MainThreadFileSystem);\n\t}\n\n\tdispose(): void {\n\t\tthis._linkProviderRegistration?.dispose();\n\t}\n\n\tprivate _registerLinkProviderIfNotYetRegistered(): void {\n\t\tif (!this._linkProviderRegistration) {\n\t\t\tthis._linkProviderRegistration = this._extHostLanguageFeatures.registerDocumentLinkProvider(undefined, '*', this._linkProvider);\n\t\t}\n\t}\n\n\tregisterFileSystemProvider(extension: ExtensionIdentifier, scheme: string, provider: vscode.FileSystemProvider, options: { isCaseSensitive?: boolean, isReadonly?: boolean } = {}) {\n\n\t\tif (this._registeredSchemes.has(scheme)) {\n\t\t\tthrow new Error(`a provider for the scheme '${scheme}' is already registered`);\n\t\t}\n\n\t\t//\n\t\tthis._registerLinkProviderIfNotYetRegistered();\n\n\t\tconst handle = this._handlePool++;\n\t\tthis._linkProvider.add(scheme);\n\t\tthis._registeredSchemes.add(scheme);\n\t\tthis._fsProvider.set(handle, provider);\n\n\t\tlet capabilities = files.FileSystemProviderCapabilities.FileReadWrite;\n\t\tif (options.isCaseSensitive) {\n\t\t\tcapabilities += files.FileSystemProviderCapabilities.PathCaseSensitive;\n\t\t}\n\t\tif (options.isReadonly) {\n\t\t\tcapabilities += files.FileSystemProviderCapabilities.Readonly;\n\t\t}\n\t\tif (typeof provider.copy === 'function') {\n\t\t\tcapabilities += files.FileSystemProviderCapabilities.FileFolderCopy;\n\t\t}\n\t\tif (typeof provider.open === 'function' && typeof provider.close === 'function'\n\t\t\t&& typeof provider.read === 'function' && typeof provider.write === 'function'\n\t\t) {\n\t\t\tcapabilities += files.FileSystemProviderCapabilities.FileOpenReadWriteClose;\n\t\t}\n\n\t\tthis._proxy.$registerFileSystemProvider(handle, scheme, capabilities).catch(err => {\n\t\t\tconsole.error(`FAILED to register filesystem provider of ${extension.value}-extension for the scheme ${scheme}`);\n\t\t\tconsole.error(err);\n\t\t});\n\n\t\tconst subscription = provider.onDidChangeFile(event => {\n\t\t\tconst mapped: IFileChangeDto[] = [];\n\t\t\tfor (const e of event) {\n\t\t\t\tlet { uri: resource, type } = e;\n\t\t\t\tif (resource.scheme !== scheme) {\n\t\t\t\t\t// dropping events for wrong scheme\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tlet newType: files.FileChangeType | undefined;\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase FileChangeType.Changed:\n\t\t\t\t\t\tnewType = files.FileChangeType.UPDATED;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase FileChangeType.Created:\n\t\t\t\t\t\tnewType = files.FileChangeType.ADDED;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase FileChangeType.Deleted:\n\t\t\t\t\t\tnewType = files.FileChangeType.DELETED;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error('Unknown FileChangeType');\n\t\t\t\t}\n\t\t\t\tmapped.push({ resource, type: newType });\n\t\t\t}\n\t\t\tthis._proxy.$onFileSystemChange(handle, mapped);\n\t\t});\n\n\t\treturn toDisposable(() => {\n\t\t\tsubscription.dispose();\n\t\t\tthis._linkProvider.delete(scheme);\n\t\t\tthis._registeredSchemes.delete(scheme);\n\t\t\tthis._fsProvider.delete(handle);\n\t\t\tthis._proxy.$unregisterProvider(handle);\n\t\t});\n\t}\n\n\tprivate static _asIStat(stat: vscode.FileStat): files.IStat {\n\t\tconst { type, ctime, mtime, size } = stat;\n\t\treturn { type, ctime, mtime, size };\n\t}\n\n\t$stat(handle: number, resource: UriComponents): Promise<files.IStat> {\n\t\treturn Promise.resolve(this._getFsProvider(handle).stat(URI.revive(resource))).then(ExtHostFileSystem._asIStat);\n\t}\n\n\t$readdir(handle: number, resource: UriComponents): Promise<[string, files.FileType][]> {\n\t\treturn Promise.resolve(this._getFsProvider(handle).readDirectory(URI.revive(resource)));\n\t}\n\n\t$readFile(handle: number, resource: UriComponents): Promise<VSBuffer> {\n\t\treturn Promise.resolve(this._getFsProvider(handle).readFile(URI.revive(resource))).then(data => VSBuffer.wrap(data));\n\t}\n\n\t$writeFile(handle: number, resource: UriComponents, content: VSBuffer, opts: files.FileWriteOptions): Promise<void> {\n\t\treturn Promise.resolve(this._getFsProvider(handle).writeFile(URI.revive(resource), content.buffer, opts));\n\t}\n\n\t$delete(handle: number, resource: UriComponents, opts: files.FileDeleteOptions): Promise<void> {\n\t\treturn Promise.resolve(this._getFsProvider(handle).delete(URI.revive(resource), opts));\n\t}\n\n\t$rename(handle: number, oldUri: UriComponents, newUri: UriComponents, opts: files.FileOverwriteOptions): Promise<void> {\n\t\treturn Promise.resolve(this._getFsProvider(handle).rename(URI.revive(oldUri), URI.revive(newUri), opts));\n\t}\n\n\t$copy(handle: number, oldUri: UriComponents, newUri: UriComponents, opts: files.FileOverwriteOptions): Promise<void> {\n\t\tconst provider = this._getFsProvider(handle);\n\t\tif (!provider.copy) {\n\t\t\tthrow new Error('FileSystemProvider does not implement \"copy\"');\n\t\t}\n\t\treturn Promise.resolve(provider.copy(URI.revive(oldUri), URI.revive(newUri), opts));\n\t}\n\n\t$mkdir(handle: number, resource: UriComponents): Promise<void> {\n\t\treturn Promise.resolve(this._getFsProvider(handle).createDirectory(URI.revive(resource)));\n\t}\n\n\t$watch(handle: number, session: number, resource: UriComponents, opts: files.IWatchOptions): void {\n\t\tconst subscription = this._getFsProvider(handle).watch(URI.revive(resource), opts);\n\t\tthis._watches.set(session, subscription);\n\t}\n\n\t$unwatch(_handle: number, session: number): void {\n\t\tconst subscription = this._watches.get(session);\n\t\tif (subscription) {\n\t\t\tsubscription.dispose();\n\t\t\tthis._watches.delete(session);\n\t\t}\n\t}\n\n\t$open(handle: number, resource: UriComponents, opts: files.FileOpenOptions): Promise<number> {\n\t\tconst provider = this._getFsProvider(handle);\n\t\tif (!provider.open) {\n\t\t\tthrow new Error('FileSystemProvider does not implement \"open\"');\n\t\t}\n\t\treturn Promise.resolve(provider.open(URI.revive(resource), opts));\n\t}\n\n\t$close(handle: number, fd: number): Promise<void> {\n\t\tconst provider = this._getFsProvider(handle);\n\t\tif (!provider.close) {\n\t\t\tthrow new Error('FileSystemProvider does not implement \"close\"');\n\t\t}\n\t\treturn Promise.resolve(provider.close(fd));\n\t}\n\n\t$read(handle: number, fd: number, pos: number, length: number): Promise<VSBuffer> {\n\t\tconst provider = this._getFsProvider(handle);\n\t\tif (!provider.read) {\n\t\t\tthrow new Error('FileSystemProvider does not implement \"read\"');\n\t\t}\n\t\tconst data = VSBuffer.alloc(length);\n\t\treturn Promise.resolve(provider.read(fd, pos, data.buffer, 0, length)).then(read => {\n\t\t\treturn data.slice(0, read); // don't send zeros\n\t\t});\n\t}\n\n\t$write(handle: number, fd: number, pos: number, data: VSBuffer): Promise<number> {\n\t\tconst provider = this._getFsProvider(handle);\n\t\tif (!provider.write) {\n\t\t\tthrow new Error('FileSystemProvider does not implement \"write\"');\n\t\t}\n\t\treturn Promise.resolve(provider.write(fd, pos, data.buffer, 0, data.byteLength));\n\t}\n\n\tprivate _getFsProvider(handle: number): vscode.FileSystemProvider {\n\t\tconst provider = this._fsProvider.get(handle);\n\t\tif (!provider) {\n\t\t\tconst err = new Error();\n\t\t\terr.name = 'ENOPRO';\n\t\t\terr.message = `no provider`;\n\t\t\tthrow err;\n\t\t}\n\t\treturn provider;\n\t}\n}\n"]}