{"version":3,"file":"extHostStorage.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/api/common/extHostStorage.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAchG,MAAa,cAAc;QAS1B,YAAY,WAA+B;YAH1B,wBAAmB,GAAG,IAAI,eAAO,EAAuB,CAAC;YACjE,uBAAkB,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC;YAG5D,IAAI,CAAC,MAAM,GAAG,WAAW,CAAC,QAAQ,CAAC,8BAAW,CAAC,iBAAiB,CAAC,CAAC;QACnE,CAAC;QAED,kCAAkC,CAAC,SAAkC,EAAE,IAAc;YACpF,IAAI,CAAC,MAAM,CAAC,mCAAmC,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QAClE,CAAC;QAED,QAAQ,CAAI,MAAe,EAAE,GAAW,EAAE,YAAgB;YACzD,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,CAAI,MAAM,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,IAAI,YAAY,CAAC,CAAC;QACnF,CAAC;QAED,QAAQ,CAAC,MAAe,EAAE,GAAW,EAAE,KAAa;YACnD,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;QAClD,CAAC;QAED,YAAY,CAAC,MAAe,EAAE,GAAW,EAAE,KAAa;YACvD,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,CAAC;QACvD,CAAC;KACD;IA5BD,wCA4BC;IAGY,QAAA,eAAe,GAAG,CAAA,GAAA,+BAAe,CAAA,CAAkB,iBAAiB,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { MainContext, MainThreadStorageShape, ExtHostStorageShape } from './extHost.protocol';\nimport { Emitter } from 'vs/base/common/event';\nimport { IExtHostRpcService } from 'vs/workbench/api/common/extHostRpcService';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IExtensionIdWithVersion } from 'vs/platform/userDataSync/common/extensionsStorageSync';\n\nexport interface IStorageChangeEvent {\n\tshared: boolean;\n\tkey: string;\n\tvalue: object;\n}\n\nexport class ExtHostStorage implements ExtHostStorageShape {\n\n\treadonly _serviceBrand: undefined;\n\n\tprivate _proxy: MainThreadStorageShape;\n\n\tprivate readonly _onDidChangeStorage = new Emitter<IStorageChangeEvent>();\n\treadonly onDidChangeStorage = this._onDidChangeStorage.event;\n\n\tconstructor(mainContext: IExtHostRpcService) {\n\t\tthis._proxy = mainContext.getProxy(MainContext.MainThreadStorage);\n\t}\n\n\tregisterExtensionStorageKeysToSync(extension: IExtensionIdWithVersion, keys: string[]): void {\n\t\tthis._proxy.$registerExtensionStorageKeysToSync(extension, keys);\n\t}\n\n\tgetValue<T>(shared: boolean, key: string, defaultValue?: T): Promise<T | undefined> {\n\t\treturn this._proxy.$getValue<T>(shared, key).then(value => value || defaultValue);\n\t}\n\n\tsetValue(shared: boolean, key: string, value: object): Promise<void> {\n\t\treturn this._proxy.$setValue(shared, key, value);\n\t}\n\n\t$acceptValue(shared: boolean, key: string, value: object): void {\n\t\tthis._onDidChangeStorage.fire({ shared, key, value });\n\t}\n}\n\nexport interface IExtHostStorage extends ExtHostStorage { }\nexport const IExtHostStorage = createDecorator<IExtHostStorage>('IExtHostStorage');\n"]}