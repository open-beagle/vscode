{"version":3,"file":"extHostTheming.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/api/common/extHostTheming.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAOhG,IAAa,cAAc,GAA3B,MAAa,cAAc;QAO1B,YACqB,WAA+B;YAEnD,IAAI,CAAC,OAAO,GAAG,IAAI,yBAAU,CAAC,6BAAc,CAAC,IAAI,CAAC,CAAC;YACnD,IAAI,CAAC,4BAA4B,GAAG,IAAI,eAAO,EAAc,CAAC;QAC/D,CAAC;QAED,IAAW,gBAAgB;YAC1B,OAAO,IAAI,CAAC,OAAO,CAAC;QACrB,CAAC;QAED,mBAAmB,CAAC,IAAY;YAC/B,IAAI,IAAI,GAAG,IAAI,KAAK,OAAO,CAAC,CAAC,CAAC,6BAAc,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,KAAK,MAAM,CAAC,CAAC,CAAC,6BAAc,CAAC,IAAI,CAAC,CAAC,CAAC,6BAAc,CAAC,YAAY,CAAC;YACzH,IAAI,CAAC,OAAO,GAAG,IAAI,yBAAU,CAAC,IAAI,CAAC,CAAC;YACpC,IAAI,CAAC,4BAA4B,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACtD,CAAC;QAED,IAAW,2BAA2B;YACrC,OAAO,IAAI,CAAC,4BAA4B,CAAC,KAAK,CAAC;QAChD,CAAC;KACD,CAAA;IA3BY,cAAc;QAQxB,WAAA,sCAAkB,CAAA;OARR,cAAc,CA2B1B;IA3BY,wCAAc","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ColorTheme, ColorThemeKind } from './extHostTypes';\nimport { IExtHostRpcService } from 'vs/workbench/api/common/extHostRpcService';\nimport { ExtHostThemingShape } from 'vs/workbench/api/common/extHost.protocol';\nimport { Emitter, Event } from 'vs/base/common/event';\n\nexport class ExtHostTheming implements ExtHostThemingShape {\n\n\treadonly _serviceBrand: undefined;\n\n\tprivate _actual: ColorTheme;\n\tprivate _onDidChangeActiveColorTheme: Emitter<ColorTheme>;\n\n\tconstructor(\n\t\t@IExtHostRpcService _extHostRpc: IExtHostRpcService\n\t) {\n\t\tthis._actual = new ColorTheme(ColorThemeKind.Dark);\n\t\tthis._onDidChangeActiveColorTheme = new Emitter<ColorTheme>();\n\t}\n\n\tpublic get activeColorTheme(): ColorTheme {\n\t\treturn this._actual;\n\t}\n\n\t$onColorThemeChange(type: string): void {\n\t\tlet kind = type === 'light' ? ColorThemeKind.Light : type === 'dark' ? ColorThemeKind.Dark : ColorThemeKind.HighContrast;\n\t\tthis._actual = new ColorTheme(kind);\n\t\tthis._onDidChangeActiveColorTheme.fire(this._actual);\n\t}\n\n\tpublic get onDidChangeActiveColorTheme(): Event<ColorTheme> {\n\t\treturn this._onDidChangeActiveColorTheme.event;\n\t}\n}\n"]}