{"version":3,"file":"extHost.protocol.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/api/common/extHost.protocol.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as performance from 'vs/base/common/performance';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IRemoteConsoleLog } from 'vs/base/common/console';\nimport { SerializedError } from 'vs/base/common/errors';\nimport { IRelativePattern } from 'vs/base/common/glob';\nimport { IMarkdownString } from 'vs/base/common/htmlContent';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport Severity from 'vs/base/common/severity';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { RenderLineNumbersType, TextEditorCursorStyle } from 'vs/editor/common/config/editorOptions';\nimport { IPosition } from 'vs/editor/common/core/position';\nimport { IRange } from 'vs/editor/common/core/range';\nimport { ISelection, Selection } from 'vs/editor/common/core/selection';\nimport * as editorCommon from 'vs/editor/common/editorCommon';\nimport { EndOfLineSequence, ISingleEditOperation } from 'vs/editor/common/model';\nimport { IModelChangedEvent } from 'vs/editor/common/model/mirrorTextModel';\nimport * as modes from 'vs/editor/common/modes';\nimport { CharacterPair, CommentRule, EnterAction } from 'vs/editor/common/modes/languageConfiguration';\nimport { ICommandHandlerDescription } from 'vs/platform/commands/common/commands';\nimport { ConfigurationTarget, IConfigurationData, IConfigurationChange, IConfigurationOverrides } from 'vs/platform/configuration/common/configuration';\nimport { ConfigurationScope } from 'vs/platform/configuration/common/configurationRegistry';\nimport { ExtensionIdentifier, IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport * as files from 'vs/platform/files/common/files';\nimport { ResourceLabelFormatter } from 'vs/platform/label/common/label';\nimport { LogLevel } from 'vs/platform/log/common/log';\nimport { IMarkerData } from 'vs/platform/markers/common/markers';\nimport { IProgressOptions, IProgressStep } from 'vs/platform/progress/common/progress';\nimport * as quickInput from 'vs/platform/quickinput/common/quickInput';\nimport { RemoteAuthorityResolverErrorCode, ResolverResult, TunnelDescription, IRemoteConnectionData } from 'vs/platform/remote/common/remoteAuthorityResolver';\nimport * as statusbar from 'vs/workbench/services/statusbar/common/statusbar';\nimport { ClassifiedEvent, GDPRClassification, StrictPropertyCheck } from 'vs/platform/telemetry/common/gdprTypings';\nimport { ITelemetryInfo } from 'vs/platform/telemetry/common/telemetry';\nimport { ThemeColor } from 'vs/platform/theme/common/themeService';\nimport * as tasks from 'vs/workbench/api/common/shared/tasks';\nimport { IRevealOptions, ITreeItem } from 'vs/workbench/common/views';\nimport { IAdapterDescriptor, IConfig, IDebugSessionReplMode } from 'vs/workbench/contrib/debug/common/debug';\nimport { ITextQueryBuilderOptions } from 'vs/workbench/contrib/search/common/queryBuilder';\nimport { ActivationKind, MissingExtensionDependency, ExtensionHostKind } from 'vs/workbench/services/extensions/common/extensions';\nimport { createExtHostContextProxyIdentifier as createExtId, createMainContextProxyIdentifier as createMainId, IRPCProtocol } from 'vs/workbench/services/extensions/common/proxyIdentifier';\nimport * as search from 'vs/workbench/services/search/common/search';\nimport { EditorGroupColumn, SaveReason } from 'vs/workbench/common/editor';\nimport { ExtensionActivationReason } from 'vs/workbench/api/common/extHostExtensionActivator';\nimport { TunnelDto } from 'vs/workbench/api/common/extHostTunnelService';\nimport { TunnelCreationOptions, TunnelProviderFeatures, TunnelOptions, ProvidedPortAttributes } from 'vs/platform/remote/common/tunnel';\nimport { Timeline, TimelineChangeEvent, TimelineOptions, TimelineProviderDescriptor, InternalTimelineOptions } from 'vs/workbench/contrib/timeline/common/timeline';\nimport { revive } from 'vs/base/common/marshalling';\nimport { NotebookCellMetadata, NotebookDocumentMetadata, ICellEditOperation, NotebookCellsChangedEventDto, NotebookDataDto, IMainCellDto, TransientCellMetadata, INotebookDecorationRenderOptions, INotebookExclusiveDocumentFilter, IOutputDto, TransientOptions, IImmediateCellEditOperation, INotebookCellStatusBarItem, TransientDocumentMetadata } from 'vs/workbench/contrib/notebook/common/notebookCommon';\nimport { ICellRange } from 'vs/workbench/contrib/notebook/common/notebookRange';\nimport { CallHierarchyItem } from 'vs/workbench/contrib/callHierarchy/common/callHierarchy';\nimport { Dto } from 'vs/base/common/types';\nimport { DebugConfigurationProviderTriggerKind, TestResultState } from 'vs/workbench/api/common/extHostTypes';\nimport { IAccessibilityInformation } from 'vs/platform/accessibility/common/accessibility';\nimport { IExtensionIdWithVersion } from 'vs/platform/userDataSync/common/extensionsStorageSync';\nimport { InternalTestItem, RunTestForProviderRequest, RunTestsRequest, TestIdWithSrc, TestsDiff, ISerializedTestResults, ITestMessage, ITestItem, ITestRunTask, ExtensionRunTestsRequest } from 'vs/workbench/contrib/testing/common/testCollection';\nimport { CandidatePort } from 'vs/workbench/services/remote/common/remoteExplorerService';\nimport { WorkspaceTrustRequestOptions } from 'vs/platform/workspace/common/workspaceTrust';\nimport { ISerializableEnvironmentVariableCollection } from 'vs/workbench/contrib/terminal/common/environmentVariable';\nimport { IShellLaunchConfig, IShellLaunchConfigDto, ITerminalDimensions, ITerminalEnvironment, ITerminalLaunchError } from 'vs/platform/terminal/common/terminal';\nimport { ITerminalProfile } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { NotebookSelector } from 'vs/workbench/contrib/notebook/common/notebookSelector';\nimport { InputValidationType } from 'vs/workbench/contrib/scm/common/scm';\n\nexport interface IEnvironment {\n\tisExtensionDevelopmentDebug: boolean;\n\tappName: string;\n\tappRoot?: URI;\n\tappLanguage: string;\n\tappUriScheme: string;\n\textensionDevelopmentLocationURI?: URI[];\n\textensionTestsLocationURI?: URI;\n\tglobalStorageHome: URI;\n\tworkspaceStorageHome: URI;\n\twebviewResourceRoot: string;\n\twebviewCspSource: string;\n\tuseHostProxy?: boolean;\n}\n\nexport interface IStaticWorkspaceData {\n\tid: string;\n\tname: string;\n\tconfiguration?: UriComponents | null;\n\tisUntitled?: boolean | null;\n}\n\nexport interface IWorkspaceData extends IStaticWorkspaceData {\n\tfolders: { uri: UriComponents, name: string, index: number; }[];\n}\n\nexport interface IInitData {\n\tversion: string;\n\tcommit?: string;\n\tparentPid: number;\n\tenvironment: IEnvironment;\n\tworkspace?: IStaticWorkspaceData | null;\n\tresolvedExtensions: ExtensionIdentifier[];\n\thostExtensions: ExtensionIdentifier[];\n\textensions: IExtensionDescription[];\n\ttelemetryInfo: ITelemetryInfo;\n\tlogLevel: LogLevel;\n\tlogsLocation: URI;\n\tlogFile: URI;\n\tautoStart: boolean;\n\tremote: { isRemote: boolean; authority: string | undefined; connectionData: IRemoteConnectionData | null; };\n\tuiKind: UIKind;\n}\n\nexport interface IConfigurationInitData extends IConfigurationData {\n\tconfigurationScopes: [string, ConfigurationScope | undefined][];\n}\n\nexport interface IExtHostContext extends IRPCProtocol {\n\treadonly remoteAuthority: string | null;\n\treadonly extensionHostKind: ExtensionHostKind;\n}\n\nexport interface IMainContext extends IRPCProtocol {\n}\n\nexport enum UIKind {\n\tDesktop = 1,\n\tWeb = 2\n}\n\n// --- main thread\n\nexport interface MainThreadClipboardShape extends IDisposable {\n\t$readText(): Promise<string>;\n\t$writeText(value: string): Promise<void>;\n}\n\nexport interface MainThreadCommandsShape extends IDisposable {\n\t$registerCommand(id: string): void;\n\t$unregisterCommand(id: string): void;\n\t$executeCommand<T>(id: string, args: any[], retry: boolean): Promise<T | undefined>;\n\t$getCommands(): Promise<string[]>;\n}\n\nexport interface CommentProviderFeatures {\n\treactionGroup?: modes.CommentReaction[];\n\treactionHandler?: boolean;\n\toptions?: modes.CommentOptions;\n}\n\nexport type CommentThreadChanges = Partial<{\n\trange: IRange,\n\tlabel: string,\n\tcontextValue: string,\n\tcomments: modes.Comment[],\n\tcollapseState: modes.CommentThreadCollapsibleState;\n\tcanReply: boolean;\n}>;\n\nexport interface MainThreadCommentsShape extends IDisposable {\n\t$registerCommentController(handle: number, id: string, label: string): void;\n\t$unregisterCommentController(handle: number): void;\n\t$updateCommentControllerFeatures(handle: number, features: CommentProviderFeatures): void;\n\t$createCommentThread(handle: number, commentThreadHandle: number, threadId: string, resource: UriComponents, range: IRange, extensionId: ExtensionIdentifier): modes.CommentThread | undefined;\n\t$updateCommentThread(handle: number, commentThreadHandle: number, threadId: string, resource: UriComponents, changes: CommentThreadChanges): void;\n\t$deleteCommentThread(handle: number, commentThreadHandle: number): void;\n\t$onDidCommentThreadsChange(handle: number, event: modes.CommentThreadChangedEvent): void;\n}\n\nexport interface MainThreadAuthenticationShape extends IDisposable {\n\t$registerAuthenticationProvider(id: string, label: string, supportsMultipleAccounts: boolean): void;\n\t$unregisterAuthenticationProvider(id: string): void;\n\t$ensureProvider(id: string): Promise<void>;\n\t$sendDidChangeSessions(providerId: string, event: modes.AuthenticationSessionsChangeEvent): void;\n\t$getSession(providerId: string, scopes: string[], extensionId: string, extensionName: string, options: { createIfNone?: boolean, clearSessionPreference?: boolean }): Promise<modes.AuthenticationSession | undefined>;\n\t$removeSession(providerId: string, sessionId: string): Promise<void>;\n}\n\nexport interface MainThreadSecretStateShape extends IDisposable {\n\t$getPassword(extensionId: string, key: string): Promise<string | undefined>;\n\t$setPassword(extensionId: string, key: string, value: string): Promise<void>;\n\t$deletePassword(extensionId: string, key: string): Promise<void>;\n}\n\nexport interface MainThreadConfigurationShape extends IDisposable {\n\t$updateConfigurationOption(target: ConfigurationTarget | null, key: string, value: any, overrides: IConfigurationOverrides | undefined, scopeToLanguage: boolean | undefined): Promise<void>;\n\t$removeConfigurationOption(target: ConfigurationTarget | null, key: string, overrides: IConfigurationOverrides | undefined, scopeToLanguage: boolean | undefined): Promise<void>;\n}\n\nexport interface MainThreadDiagnosticsShape extends IDisposable {\n\t$changeMany(owner: string, entries: [UriComponents, IMarkerData[] | undefined][]): void;\n\t$clear(owner: string): void;\n}\n\nexport interface MainThreadDialogOpenOptions {\n\tdefaultUri?: UriComponents;\n\topenLabel?: string;\n\tcanSelectFiles?: boolean;\n\tcanSelectFolders?: boolean;\n\tcanSelectMany?: boolean;\n\tfilters?: { [name: string]: string[]; };\n\ttitle?: string;\n}\n\nexport interface MainThreadDialogSaveOptions {\n\tdefaultUri?: UriComponents;\n\tsaveLabel?: string;\n\tfilters?: { [name: string]: string[]; };\n\ttitle?: string;\n}\n\nexport interface MainThreadDiaglogsShape extends IDisposable {\n\t$showOpenDialog(options?: MainThreadDialogOpenOptions): Promise<UriComponents[] | undefined>;\n\t$showSaveDialog(options?: MainThreadDialogSaveOptions): Promise<UriComponents | undefined>;\n}\n\nexport interface MainThreadDecorationsShape extends IDisposable {\n\t$registerDecorationProvider(handle: number, label: string): void;\n\t$unregisterDecorationProvider(handle: number): void;\n\t$onDidChange(handle: number, resources: UriComponents[] | null): void;\n}\n\nexport interface MainThreadDocumentContentProvidersShape extends IDisposable {\n\t$registerTextContentProvider(handle: number, scheme: string): void;\n\t$unregisterTextContentProvider(handle: number): void;\n\t$onVirtualDocumentChange(uri: UriComponents, value: string): void;\n}\n\nexport interface MainThreadDocumentsShape extends IDisposable {\n\t$tryCreateDocument(options?: { language?: string; content?: string; }): Promise<UriComponents>;\n\t$tryOpenDocument(uri: UriComponents): Promise<UriComponents>;\n\t$trySaveDocument(uri: UriComponents): Promise<boolean>;\n}\n\nexport interface ITextEditorConfigurationUpdate {\n\ttabSize?: number | 'auto';\n\tinsertSpaces?: boolean | 'auto';\n\tcursorStyle?: TextEditorCursorStyle;\n\tlineNumbers?: RenderLineNumbersType;\n}\n\nexport interface IResolvedTextEditorConfiguration {\n\ttabSize: number;\n\tinsertSpaces: boolean;\n\tcursorStyle: TextEditorCursorStyle;\n\tlineNumbers: RenderLineNumbersType;\n}\n\nexport enum TextEditorRevealType {\n\tDefault = 0,\n\tInCenter = 1,\n\tInCenterIfOutsideViewport = 2,\n\tAtTop = 3\n}\n\nexport interface IUndoStopOptions {\n\tundoStopBefore: boolean;\n\tundoStopAfter: boolean;\n}\n\nexport interface IApplyEditsOptions extends IUndoStopOptions {\n\tsetEndOfLine?: EndOfLineSequence;\n}\n\nexport interface ITextDocumentShowOptions {\n\tposition?: EditorGroupColumn;\n\tpreserveFocus?: boolean;\n\tpinned?: boolean;\n\tselection?: IRange;\n}\n\nexport interface MainThreadBulkEditsShape extends IDisposable {\n\t$tryApplyWorkspaceEdit(workspaceEditDto: IWorkspaceEditDto, undoRedoGroupId?: number): Promise<boolean>;\n}\n\nexport interface MainThreadTextEditorsShape extends IDisposable {\n\t$tryShowTextDocument(resource: UriComponents, options: ITextDocumentShowOptions): Promise<string | undefined>;\n\t$registerTextEditorDecorationType(key: string, options: editorCommon.IDecorationRenderOptions): void;\n\t$removeTextEditorDecorationType(key: string): void;\n\t$tryShowEditor(id: string, position: EditorGroupColumn): Promise<void>;\n\t$tryHideEditor(id: string): Promise<void>;\n\t$trySetOptions(id: string, options: ITextEditorConfigurationUpdate): Promise<void>;\n\t$trySetDecorations(id: string, key: string, ranges: editorCommon.IDecorationOptions[]): Promise<void>;\n\t$trySetDecorationsFast(id: string, key: string, ranges: number[]): Promise<void>;\n\t$tryRevealRange(id: string, range: IRange, revealType: TextEditorRevealType): Promise<void>;\n\t$trySetSelections(id: string, selections: ISelection[]): Promise<void>;\n\t$tryApplyEdits(id: string, modelVersionId: number, edits: ISingleEditOperation[], opts: IApplyEditsOptions): Promise<boolean>;\n\t$tryInsertSnippet(id: string, template: string, selections: readonly IRange[], opts: IUndoStopOptions): Promise<boolean>;\n\t$getDiffInformation(id: string): Promise<editorCommon.ILineChange[]>;\n}\n\nexport interface MainThreadTreeViewsShape extends IDisposable {\n\t$registerTreeViewDataProvider(treeViewId: string, options: { showCollapseAll: boolean, canSelectMany: boolean; }): Promise<void>;\n\t$refresh(treeViewId: string, itemsToRefresh?: { [treeItemHandle: string]: ITreeItem; }): Promise<void>;\n\t$reveal(treeViewId: string, itemInfo: { item: ITreeItem, parentChain: ITreeItem[] } | undefined, options: IRevealOptions): Promise<void>;\n\t$setMessage(treeViewId: string, message: string): void;\n\t$setTitle(treeViewId: string, title: string, description: string | undefined): void;\n}\n\nexport interface MainThreadDownloadServiceShape extends IDisposable {\n\t$download(uri: UriComponents, to: UriComponents): Promise<void>;\n}\n\nexport interface MainThreadErrorsShape extends IDisposable {\n\t$onUnexpectedError(err: any | SerializedError): void;\n}\n\nexport interface MainThreadConsoleShape extends IDisposable {\n\t$logExtensionHostMessage(msg: IRemoteConsoleLog): void;\n}\n\nexport interface MainThreadKeytarShape extends IDisposable {\n\t$getPassword(service: string, account: string): Promise<string | null>;\n\t$setPassword(service: string, account: string, password: string): Promise<void>;\n\t$deletePassword(service: string, account: string): Promise<boolean>;\n\t$findPassword(service: string): Promise<string | null>;\n\t$findCredentials(service: string): Promise<Array<{ account: string, password: string; }>>;\n}\n\nexport interface IRegExpDto {\n\tpattern: string;\n\tflags?: string;\n}\nexport interface IIndentationRuleDto {\n\tdecreaseIndentPattern: IRegExpDto;\n\tincreaseIndentPattern: IRegExpDto;\n\tindentNextLinePattern?: IRegExpDto;\n\tunIndentedLinePattern?: IRegExpDto;\n}\nexport interface IOnEnterRuleDto {\n\tbeforeText: IRegExpDto;\n\tafterText?: IRegExpDto;\n\tpreviousLineText?: IRegExpDto;\n\taction: EnterAction;\n}\nexport interface ILanguageConfigurationDto {\n\tcomments?: CommentRule;\n\tbrackets?: CharacterPair[];\n\twordPattern?: IRegExpDto;\n\tindentationRules?: IIndentationRuleDto;\n\tonEnterRules?: IOnEnterRuleDto[];\n\t__electricCharacterSupport?: {\n\t\tbrackets?: any;\n\t\tdocComment?: {\n\t\t\tscope: string;\n\t\t\topen: string;\n\t\t\tlineStart: string;\n\t\t\tclose?: string;\n\t\t};\n\t};\n\t__characterPairSupport?: {\n\t\tautoClosingPairs: {\n\t\t\topen: string;\n\t\t\tclose: string;\n\t\t\tnotIn?: string[];\n\t\t}[];\n\t};\n}\n\nexport type GlobPattern = string | { base: string; pattern: string; };\n\nexport interface IDocumentFilterDto {\n\t$serialized: true;\n\tlanguage?: string;\n\tscheme?: string;\n\tpattern?: string | IRelativePattern;\n\texclusive?: boolean;\n}\n\nexport interface ISignatureHelpProviderMetadataDto {\n\treadonly triggerCharacters: readonly string[];\n\treadonly retriggerCharacters: readonly string[];\n}\n\nexport interface MainThreadLanguageFeaturesShape extends IDisposable {\n\t$unregister(handle: number): void;\n\t$registerDocumentSymbolProvider(handle: number, selector: IDocumentFilterDto[], label: string): void;\n\t$registerCodeLensSupport(handle: number, selector: IDocumentFilterDto[], eventHandle: number | undefined): void;\n\t$emitCodeLensEvent(eventHandle: number, event?: any): void;\n\t$registerDefinitionSupport(handle: number, selector: IDocumentFilterDto[]): void;\n\t$registerDeclarationSupport(handle: number, selector: IDocumentFilterDto[]): void;\n\t$registerImplementationSupport(handle: number, selector: IDocumentFilterDto[]): void;\n\t$registerTypeDefinitionSupport(handle: number, selector: IDocumentFilterDto[]): void;\n\t$registerHoverProvider(handle: number, selector: IDocumentFilterDto[]): void;\n\t$registerEvaluatableExpressionProvider(handle: number, selector: IDocumentFilterDto[]): void;\n\t$registerInlineValuesProvider(handle: number, selector: IDocumentFilterDto[], eventHandle: number | undefined): void;\n\t$emitInlineValuesEvent(eventHandle: number, event?: any): void;\n\t$registerDocumentHighlightProvider(handle: number, selector: IDocumentFilterDto[]): void;\n\t$registerLinkedEditingRangeProvider(handle: number, selector: IDocumentFilterDto[]): void;\n\t$registerReferenceSupport(handle: number, selector: IDocumentFilterDto[]): void;\n\t$registerQuickFixSupport(handle: number, selector: IDocumentFilterDto[], metadata: ICodeActionProviderMetadataDto, displayName: string, supportsResolve: boolean): void;\n\t$registerDocumentFormattingSupport(handle: number, selector: IDocumentFilterDto[], extensionId: ExtensionIdentifier, displayName: string): void;\n\t$registerRangeFormattingSupport(handle: number, selector: IDocumentFilterDto[], extensionId: ExtensionIdentifier, displayName: string): void;\n\t$registerOnTypeFormattingSupport(handle: number, selector: IDocumentFilterDto[], autoFormatTriggerCharacters: string[], extensionId: ExtensionIdentifier): void;\n\t$registerNavigateTypeSupport(handle: number): void;\n\t$registerRenameSupport(handle: number, selector: IDocumentFilterDto[], supportsResolveInitialValues: boolean): void;\n\t$registerDocumentSemanticTokensProvider(handle: number, selector: IDocumentFilterDto[], legend: modes.SemanticTokensLegend, eventHandle: number | undefined): void;\n\t$emitDocumentSemanticTokensEvent(eventHandle: number): void;\n\t$registerDocumentRangeSemanticTokensProvider(handle: number, selector: IDocumentFilterDto[], legend: modes.SemanticTokensLegend): void;\n\t$registerSuggestSupport(handle: number, selector: IDocumentFilterDto[], triggerCharacters: string[], supportsResolveDetails: boolean, displayName: string): void;\n\t$registerSignatureHelpProvider(handle: number, selector: IDocumentFilterDto[], metadata: ISignatureHelpProviderMetadataDto): void;\n\t$registerInlineHintsProvider(handle: number, selector: IDocumentFilterDto[], eventHandle: number | undefined): void;\n\t$emitInlineHintsEvent(eventHandle: number, event?: any): void;\n\t$registerDocumentLinkProvider(handle: number, selector: IDocumentFilterDto[], supportsResolve: boolean): void;\n\t$registerDocumentColorProvider(handle: number, selector: IDocumentFilterDto[]): void;\n\t$registerFoldingRangeProvider(handle: number, selector: IDocumentFilterDto[], eventHandle: number | undefined): void;\n\t$emitFoldingRangeEvent(eventHandle: number, event?: any): void;\n\t$registerSelectionRangeProvider(handle: number, selector: IDocumentFilterDto[]): void;\n\t$registerCallHierarchyProvider(handle: number, selector: IDocumentFilterDto[]): void;\n\t$setLanguageConfiguration(handle: number, languageId: string, configuration: ILanguageConfigurationDto): void;\n}\n\nexport interface MainThreadLanguagesShape extends IDisposable {\n\t$getLanguages(): Promise<string[]>;\n\t$changeLanguage(resource: UriComponents, languageId: string): Promise<void>;\n\t$tokensAtPosition(resource: UriComponents, position: IPosition): Promise<undefined | { type: modes.StandardTokenType, range: IRange }>;\n}\n\nexport interface MainThreadMessageOptions {\n\textension?: IExtensionDescription;\n\tmodal?: boolean;\n\tuseCustom?: boolean;\n}\n\nexport interface MainThreadMessageServiceShape extends IDisposable {\n\t$showMessage(severity: Severity, message: string, options: MainThreadMessageOptions, commands: { title: string; isCloseAffordance: boolean; handle: number; }[]): Promise<number | undefined>;\n}\n\nexport interface MainThreadOutputServiceShape extends IDisposable {\n\t$register(label: string, log: boolean, file?: UriComponents): Promise<string>;\n\t$append(channelId: string, value: string): Promise<void> | undefined;\n\t$update(channelId: string): Promise<void> | undefined;\n\t$clear(channelId: string, till: number): Promise<void> | undefined;\n\t$reveal(channelId: string, preserveFocus: boolean): Promise<void> | undefined;\n\t$close(channelId: string): Promise<void> | undefined;\n\t$dispose(channelId: string): Promise<void> | undefined;\n}\n\nexport interface MainThreadProgressShape extends IDisposable {\n\n\t$startProgress(handle: number, options: IProgressOptions, extension?: IExtensionDescription): void;\n\t$progressReport(handle: number, message: IProgressStep): void;\n\t$progressEnd(handle: number): void;\n}\n\n/**\n * A terminal that is created on the extension host side is temporarily assigned\n * a UUID by the extension host that created it. Once the renderer side has assigned\n * a real numeric id, the numeric id will be used.\n *\n * All other terminals (that are not created on the extension host side) always\n * use the numeric id.\n */\nexport type TerminalIdentifier = number | string;\n\nexport interface TerminalLaunchConfig {\n\tname?: string;\n\tshellPath?: string;\n\tshellArgs?: string[] | string;\n\tcwd?: string | UriComponents;\n\tenv?: ITerminalEnvironment;\n\ticon?: string;\n\tinitialText?: string;\n\twaitOnExit?: boolean;\n\tstrictEnv?: boolean;\n\thideFromUser?: boolean;\n\tisExtensionCustomPtyTerminal?: boolean;\n\tisFeatureTerminal?: boolean;\n\tisExtensionOwnedTerminal?: boolean;\n}\n\nexport interface MainThreadTerminalServiceShape extends IDisposable {\n\t$createTerminal(extHostTerminalId: string, config: TerminalLaunchConfig): Promise<void>;\n\t$dispose(id: TerminalIdentifier): void;\n\t$hide(id: TerminalIdentifier): void;\n\t$sendText(id: TerminalIdentifier, text: string, addNewLine: boolean): void;\n\t$show(id: TerminalIdentifier, preserveFocus: boolean): void;\n\t$startSendingDataEvents(): void;\n\t$stopSendingDataEvents(): void;\n\t$startLinkProvider(): void;\n\t$stopLinkProvider(): void;\n\t$registerProcessSupport(isSupported: boolean): void;\n\t$setEnvironmentVariableCollection(extensionIdentifier: string, persistent: boolean, collection: ISerializableEnvironmentVariableCollection | undefined): void;\n\n\t// Process\n\t$sendProcessTitle(terminalId: number, title: string): void;\n\t$sendProcessData(terminalId: number, data: string): void;\n\t$sendProcessReady(terminalId: number, pid: number, cwd: string): void;\n\t$sendProcessExit(terminalId: number, exitCode: number | undefined): void;\n\t$sendProcessInitialCwd(terminalId: number, cwd: string): void;\n\t$sendProcessCwd(terminalId: number, initialCwd: string): void;\n\t$sendOverrideDimensions(terminalId: number, dimensions: ITerminalDimensions | undefined): void;\n\t$sendResolvedLaunchConfig(terminalId: number, shellLaunchConfig: IShellLaunchConfig): void;\n}\n\nexport interface TransferQuickPickItems extends quickInput.IQuickPickItem {\n\thandle: number;\n}\n\nexport interface TransferQuickInputButton {\n\thandle: number;\n\ticonPath: { dark: URI; light?: URI; } | { id: string; };\n\ttooltip?: string;\n}\n\nexport type TransferQuickInput = TransferQuickPick | TransferInputBox;\n\nexport interface BaseTransferQuickInput {\n\n\t[key: string]: any;\n\n\tid: number;\n\n\ttitle?: string;\n\n\ttype?: 'quickPick' | 'inputBox';\n\n\tenabled?: boolean;\n\n\tbusy?: boolean;\n\n\tvisible?: boolean;\n}\n\nexport interface TransferQuickPick extends BaseTransferQuickInput {\n\n\ttype?: 'quickPick';\n\n\tvalue?: string;\n\n\tplaceholder?: string;\n\n\tbuttons?: TransferQuickInputButton[];\n\n\titems?: TransferQuickPickItems[];\n\n\tactiveItems?: number[];\n\n\tselectedItems?: number[];\n\n\tcanSelectMany?: boolean;\n\n\tignoreFocusOut?: boolean;\n\n\tmatchOnDescription?: boolean;\n\n\tmatchOnDetail?: boolean;\n\n\tsortByLabel?: boolean;\n}\n\nexport interface TransferInputBox extends BaseTransferQuickInput {\n\n\ttype?: 'inputBox';\n\n\tvalue?: string;\n\n\tplaceholder?: string;\n\n\tpassword?: boolean;\n\n\tbuttons?: TransferQuickInputButton[];\n\n\tprompt?: string;\n\n\tvalidationMessage?: string;\n}\n\nexport interface IInputBoxOptions {\n\ttitle?: string;\n\tvalue?: string;\n\tvalueSelection?: [number, number];\n\tprompt?: string;\n\tplaceHolder?: string;\n\tpassword?: boolean;\n\tignoreFocusOut?: boolean;\n}\n\nexport interface MainThreadQuickOpenShape extends IDisposable {\n\t$show(instance: number, options: quickInput.IPickOptions<TransferQuickPickItems>, token: CancellationToken): Promise<number | number[] | undefined>;\n\t$setItems(instance: number, items: TransferQuickPickItems[]): Promise<void>;\n\t$setError(instance: number, error: Error): Promise<void>;\n\t$input(options: IInputBoxOptions | undefined, validateInput: boolean, token: CancellationToken): Promise<string | undefined>;\n\t$createOrUpdate(params: TransferQuickInput): Promise<void>;\n\t$dispose(id: number): Promise<void>;\n}\n\nexport interface MainThreadStatusBarShape extends IDisposable {\n\t$setEntry(id: number, statusId: string, statusName: string, text: string, tooltip: string | undefined, command: ICommandDto | undefined, color: string | ThemeColor | undefined, backgroundColor: string | ThemeColor | undefined, alignment: statusbar.StatusbarAlignment, priority: number | undefined, accessibilityInformation: IAccessibilityInformation | undefined): void;\n\t$dispose(id: number): void;\n}\n\nexport interface MainThreadStorageShape extends IDisposable {\n\t$getValue<T>(shared: boolean, key: string): Promise<T | undefined>;\n\t$setValue(shared: boolean, key: string, value: object): Promise<void>;\n\t$registerExtensionStorageKeysToSync(extension: IExtensionIdWithVersion, keys: string[]): void;\n}\n\nexport interface MainThreadTelemetryShape extends IDisposable {\n\t$publicLog(eventName: string, data?: any): void;\n\t$publicLog2<E extends ClassifiedEvent<T> = never, T extends GDPRClassification<T> = never>(eventName: string, data?: StrictPropertyCheck<T, E>): void;\n}\n\nexport interface MainThreadEditorInsetsShape extends IDisposable {\n\t$createEditorInset(handle: number, id: string, uri: UriComponents, line: number, height: number, options: IWebviewOptions, extensionId: ExtensionIdentifier, extensionLocation: UriComponents): Promise<void>;\n\t$disposeEditorInset(handle: number): void;\n\n\t$setHtml(handle: number, value: string): void;\n\t$setOptions(handle: number, options: IWebviewOptions): void;\n\t$postMessage(handle: number, value: any): Promise<boolean>;\n}\n\nexport interface ExtHostEditorInsetsShape {\n\t$onDidDispose(handle: number): void;\n\t$onDidReceiveMessage(handle: number, message: any): void;\n}\n\n//#region --- open editors model\n\nexport interface MainThreadEditorTabsShape extends IDisposable {\n\t// manage tabs: move, close, rearrange etc\n}\n\nexport interface IEditorTabDto {\n\tgroup: number;\n\tname: string;\n\tresource: UriComponents\n}\n\nexport interface IExtHostEditorTabsShape {\n\t$acceptEditorTabs(tabs: IEditorTabDto[]): void;\n}\n\n//#endregion\n\nexport type WebviewHandle = string;\n\nexport interface WebviewPanelShowOptions {\n\treadonly viewColumn?: EditorGroupColumn;\n\treadonly preserveFocus?: boolean;\n}\n\nexport interface WebviewExtensionDescription {\n\treadonly id: ExtensionIdentifier;\n\treadonly location: UriComponents;\n}\n\nexport interface NotebookExtensionDescription {\n\treadonly id: ExtensionIdentifier;\n\treadonly location: UriComponents;\n\treadonly description?: string;\n}\n\nexport enum WebviewEditorCapabilities {\n\tEditable,\n\tSupportsHotExit,\n}\n\nexport interface IWebviewPortMapping {\n\treadonly webviewPort: number;\n\treadonly extensionHostPort: number;\n}\n\nexport interface IWebviewOptions {\n\treadonly enableScripts?: boolean;\n\treadonly enableCommandUris?: boolean;\n\treadonly localResourceRoots?: ReadonlyArray<UriComponents>;\n\treadonly portMapping?: ReadonlyArray<IWebviewPortMapping>;\n}\n\nexport interface IWebviewPanelOptions {\n\treadonly enableFindWidget?: boolean;\n\treadonly retainContextWhenHidden?: boolean;\n}\n\nexport interface CustomTextEditorCapabilities {\n\treadonly supportsMove?: boolean;\n}\n\nexport const enum WebviewMessageArrayBufferViewType {\n\tInt8Array = 1,\n\tUint8Array = 2,\n\tUint8ClampedArray = 3,\n\tInt16Array = 4,\n\tUint16Array = 5,\n\tInt32Array = 6,\n\tUint32Array = 7,\n\tFloat32Array = 8,\n\tFloat64Array = 9,\n\tBigInt64Array = 10,\n\tBigUint64Array = 11,\n}\n\nexport interface WebviewMessageArrayBufferReference {\n\treadonly $$vscode_array_buffer_reference$$: true,\n\n\treadonly index: number;\n\n\t/**\n\t * Tracks if the reference is to a view instead of directly to an ArrayBuffer.\n\t */\n\treadonly view?: {\n\t\treadonly type: WebviewMessageArrayBufferViewType;\n\t\treadonly byteLength: number;\n\t\treadonly byteOffset: number;\n\t};\n}\n\nexport interface MainThreadWebviewsShape extends IDisposable {\n\t$setHtml(handle: WebviewHandle, value: string): void;\n\t$setOptions(handle: WebviewHandle, options: IWebviewOptions): void;\n\t$postMessage(handle: WebviewHandle, value: any, ...buffers: VSBuffer[]): Promise<boolean>\n}\n\nexport interface MainThreadWebviewPanelsShape extends IDisposable {\n\t$createWebviewPanel(\n\t\textension: WebviewExtensionDescription,\n\t\thandle: WebviewHandle,\n\t\tviewType: string,\n\t\tinitData: {\n\t\t\ttitle: string;\n\t\t\twebviewOptions: IWebviewOptions;\n\t\t\tpanelOptions: IWebviewPanelOptions;\n\t\t\tserializeBuffersForPostMessage: boolean;\n\t\t},\n\t\tshowOptions: WebviewPanelShowOptions,\n\t): void;\n\t$disposeWebview(handle: WebviewHandle): void;\n\t$reveal(handle: WebviewHandle, showOptions: WebviewPanelShowOptions): void;\n\t$setTitle(handle: WebviewHandle, value: string): void;\n\t$setIconPath(handle: WebviewHandle, value: { light: UriComponents, dark: UriComponents; } | undefined): void;\n\n\t$registerSerializer(viewType: string, options: { serializeBuffersForPostMessage: boolean }): void;\n\t$unregisterSerializer(viewType: string): void;\n}\n\nexport interface MainThreadCustomEditorsShape extends IDisposable {\n\t$registerTextEditorProvider(extension: WebviewExtensionDescription, viewType: string, options: IWebviewPanelOptions, capabilities: CustomTextEditorCapabilities, serializeBuffersForPostMessage: boolean): void;\n\t$registerCustomEditorProvider(extension: WebviewExtensionDescription, viewType: string, options: IWebviewPanelOptions, supportsMultipleEditorsPerDocument: boolean, serializeBuffersForPostMessage: boolean): void;\n\t$unregisterEditorProvider(viewType: string): void;\n\n\t$onDidEdit(resource: UriComponents, viewType: string, editId: number, label: string | undefined): void;\n\t$onContentChange(resource: UriComponents, viewType: string): void;\n}\n\nexport interface MainThreadWebviewViewsShape extends IDisposable {\n\t$registerWebviewViewProvider(extension: WebviewExtensionDescription, viewType: string, options: { retainContextWhenHidden?: boolean, serializeBuffersForPostMessage: boolean }): void;\n\t$unregisterWebviewViewProvider(viewType: string): void;\n\n\t$setWebviewViewTitle(handle: WebviewHandle, value: string | undefined): void;\n\t$setWebviewViewDescription(handle: WebviewHandle, value: string | undefined): void;\n\n\t$show(handle: WebviewHandle, preserveFocus: boolean): void;\n}\n\nexport interface WebviewPanelViewStateData {\n\t[handle: string]: {\n\t\treadonly active: boolean;\n\t\treadonly visible: boolean;\n\t\treadonly position: EditorGroupColumn;\n\t};\n}\n\nexport interface ExtHostWebviewsShape {\n\t$onMessage(handle: WebviewHandle, jsonSerializedMessage: string, ...buffers: VSBuffer[]): void;\n\t$onMissingCsp(handle: WebviewHandle, extensionId: string): void;\n}\n\nexport interface ExtHostWebviewPanelsShape {\n\t$onDidChangeWebviewPanelViewStates(newState: WebviewPanelViewStateData): void;\n\t$onDidDisposeWebviewPanel(handle: WebviewHandle): Promise<void>;\n\t$deserializeWebviewPanel(\n\t\tnewWebviewHandle: WebviewHandle,\n\t\tviewType: string,\n\t\tinitData: {\n\t\t\ttitle: string;\n\t\t\tstate: any;\n\t\t\twebviewOptions: IWebviewOptions;\n\t\t\tpanelOptions: IWebviewPanelOptions;\n\t\t},\n\t\tposition: EditorGroupColumn,\n\t): Promise<void>;\n}\n\nexport interface ExtHostCustomEditorsShape {\n\t$resolveWebviewEditor(\n\t\tresource: UriComponents,\n\t\tnewWebviewHandle: WebviewHandle,\n\t\tviewType: string,\n\t\tinitData: {\n\t\t\ttitle: string;\n\t\t\twebviewOptions: IWebviewOptions;\n\t\t\tpanelOptions: IWebviewPanelOptions;\n\t\t},\n\t\tposition: EditorGroupColumn,\n\t\tcancellation: CancellationToken\n\t): Promise<void>;\n\t$createCustomDocument(resource: UriComponents, viewType: string, backupId: string | undefined, untitledDocumentData: VSBuffer | undefined, cancellation: CancellationToken): Promise<{ editable: boolean }>;\n\t$disposeCustomDocument(resource: UriComponents, viewType: string): Promise<void>;\n\n\t$undo(resource: UriComponents, viewType: string, editId: number, isDirty: boolean): Promise<void>;\n\t$redo(resource: UriComponents, viewType: string, editId: number, isDirty: boolean): Promise<void>;\n\t$revert(resource: UriComponents, viewType: string, cancellation: CancellationToken): Promise<void>;\n\t$disposeEdits(resourceComponents: UriComponents, viewType: string, editIds: number[]): void;\n\n\t$onSave(resource: UriComponents, viewType: string, cancellation: CancellationToken): Promise<void>;\n\t$onSaveAs(resource: UriComponents, viewType: string, targetResource: UriComponents, cancellation: CancellationToken): Promise<void>;\n\n\t$backup(resource: UriComponents, viewType: string, cancellation: CancellationToken): Promise<string>;\n\n\t$onMoveCustomEditor(handle: WebviewHandle, newResource: UriComponents, viewType: string): Promise<void>;\n}\n\nexport interface ExtHostWebviewViewsShape {\n\t$resolveWebviewView(webviewHandle: WebviewHandle, viewType: string, title: string | undefined, state: any, cancellation: CancellationToken): Promise<void>;\n\n\t$onDidChangeWebviewViewVisibility(webviewHandle: WebviewHandle, visible: boolean): void;\n\n\t$disposeWebviewView(webviewHandle: WebviewHandle): void;\n}\n\nexport enum CellKind {\n\tMarkdown = 1,\n\tCode = 2\n}\n\nexport enum CellOutputKind {\n\tText = 1,\n\tError = 2,\n\tRich = 3\n}\n\nexport interface ICellDto {\n\thandle: number;\n\turi: UriComponents,\n\tsource: string[];\n\tlanguage: string;\n\tcellKind: CellKind;\n\toutputs: IOutputDto[];\n\tmetadata?: NotebookCellMetadata;\n}\n\nexport type NotebookCellsSplice = [\n\tnumber /* start */,\n\tnumber /* delete count */,\n\tICellDto[]\n];\n\nexport type NotebookCellOutputsSplice = [\n\tnumber /* start */,\n\tnumber /* delete count */,\n\tIOutputDto[]\n];\n\nexport enum NotebookEditorRevealType {\n\tDefault = 0,\n\tInCenter = 1,\n\tInCenterIfOutsideViewport = 2,\n\tAtTop = 3\n}\n\nexport interface INotebookDocumentShowOptions {\n\tposition?: EditorGroupColumn;\n\tpreserveFocus?: boolean;\n\tpinned?: boolean;\n\tselections?: ICellRange[];\n}\n\nexport type INotebookCellStatusBarEntryDto = Dto<INotebookCellStatusBarItem>;\n\nexport interface INotebookCellStatusBarListDto {\n\titems: INotebookCellStatusBarEntryDto[];\n\tcacheId: number;\n}\n\nexport interface MainThreadNotebookShape extends IDisposable {\n\t$registerNotebookProvider(extension: NotebookExtensionDescription, viewType: string, options: {\n\t\ttransientOutputs: boolean;\n\t\ttransientCellMetadata: TransientCellMetadata;\n\t\ttransientDocumentMetadata: TransientDocumentMetadata;\n\t\tviewOptions?: { displayName: string; filenamePattern: (string | IRelativePattern | INotebookExclusiveDocumentFilter)[]; exclusive: boolean; };\n\t}): Promise<void>;\n\t$updateNotebookProviderOptions(viewType: string, options?: { transientOutputs: boolean; transientCellMetadata: TransientCellMetadata; transientDocumentMetadata: TransientDocumentMetadata; }): Promise<void>;\n\t$unregisterNotebookProvider(viewType: string): Promise<void>;\n\n\t$registerNotebookSerializer(handle: number, extension: NotebookExtensionDescription, viewType: string, options: TransientOptions): void;\n\t$unregisterNotebookSerializer(handle: number): void;\n\n\t$registerNotebookCellStatusBarItemProvider(handle: number, eventHandle: number | undefined, selector: NotebookSelector): Promise<void>;\n\t$unregisterNotebookCellStatusBarItemProvider(handle: number, eventHandle: number | undefined): Promise<void>;\n\t$emitCellStatusBarEvent(eventHandle: number): void;\n}\n\nexport interface MainThreadNotebookEditorsShape extends IDisposable {\n\t$tryShowNotebookDocument(uriComponents: UriComponents, viewType: string, options: INotebookDocumentShowOptions): Promise<string>;\n\t$tryRevealRange(id: string, range: ICellRange, revealType: NotebookEditorRevealType): Promise<void>;\n\t$registerNotebookEditorDecorationType(key: string, options: INotebookDecorationRenderOptions): void;\n\t$removeNotebookEditorDecorationType(key: string): void;\n\t$trySetDecorations(id: string, range: ICellRange, decorationKey: string): void;\n\t$tryApplyEdits(editorId: string, modelVersionId: number, cellEdits: ICellEditOperation[]): Promise<boolean>\n}\n\nexport interface MainThreadNotebookDocumentsShape extends IDisposable {\n\t$tryOpenDocument(uriComponents: UriComponents): Promise<UriComponents>;\n\t$trySaveDocument(uri: UriComponents): Promise<boolean>;\n\t$applyEdits(resource: UriComponents, edits: IImmediateCellEditOperation[], computeUndoRedo?: boolean): Promise<void>;\n}\n\nexport interface INotebookKernelDto2 {\n\tid: string;\n\tviewType: string;\n\textensionId: ExtensionIdentifier;\n\textensionLocation: UriComponents;\n\tlabel: string;\n\tdetail?: string;\n\tdescription?: string;\n\tsupportedLanguages?: string[];\n\tsupportsInterrupt?: boolean;\n\thasExecutionOrder?: boolean;\n\tpreloads?: { uri: UriComponents; provides: string[] }[];\n}\n\nexport interface MainThreadNotebookKernelsShape extends IDisposable {\n\t$postMessage(handle: number, editorId: string | undefined, message: any): Promise<boolean>;\n\t$addKernel(handle: number, data: INotebookKernelDto2): Promise<void>;\n\t$updateKernel(handle: number, data: Partial<INotebookKernelDto2>): void;\n\t$removeKernel(handle: number): void;\n\t$updateNotebookPriority(handle: number, uri: UriComponents, value: number | undefined): void;\n}\n\nexport interface MainThreadUrlsShape extends IDisposable {\n\t$registerUriHandler(handle: number, extensionId: ExtensionIdentifier): Promise<void>;\n\t$unregisterUriHandler(handle: number): Promise<void>;\n\t$createAppUri(uri: UriComponents): Promise<UriComponents>;\n}\n\nexport interface ExtHostUrlsShape {\n\t$handleExternalUri(handle: number, uri: UriComponents): Promise<void>;\n}\n\nexport interface MainThreadUriOpenersShape extends IDisposable {\n\t$registerUriOpener(id: string, schemes: readonly string[], extensionId: ExtensionIdentifier, label: string): Promise<void>;\n\t$unregisterUriOpener(id: string): Promise<void>;\n}\n\nexport interface ExtHostUriOpenersShape {\n\t$canOpenUri(id: string, uri: UriComponents, token: CancellationToken): Promise<modes.ExternalUriOpenerPriority>;\n\t$openUri(id: string, context: { resolvedUri: UriComponents, sourceUri: UriComponents }, token: CancellationToken): Promise<void>;\n}\n\nexport interface ITextSearchComplete {\n\tlimitHit?: boolean;\n}\n\nexport interface MainThreadWorkspaceShape extends IDisposable {\n\t$startFileSearch(includePattern: string | null, includeFolder: UriComponents | null, excludePatternOrDisregardExcludes: string | false | null, maxResults: number | null, token: CancellationToken): Promise<UriComponents[] | null>;\n\t$startTextSearch(query: search.IPatternInfo, folder: UriComponents | null, options: ITextQueryBuilderOptions, requestId: number, token: CancellationToken): Promise<ITextSearchComplete | null>;\n\t$checkExists(folders: readonly UriComponents[], includes: string[], token: CancellationToken): Promise<boolean>;\n\t$saveAll(includeUntitled?: boolean): Promise<boolean>;\n\t$updateWorkspaceFolders(extensionName: string, index: number, deleteCount: number, workspaceFoldersToAdd: { uri: UriComponents, name?: string; }[]): Promise<void>;\n\t$resolveProxy(url: string): Promise<string | undefined>;\n\t$requestWorkspaceTrust(options?: WorkspaceTrustRequestOptions): Promise<boolean | undefined>;\n}\n\nexport interface IFileChangeDto {\n\tresource: UriComponents;\n\ttype: files.FileChangeType;\n}\n\nexport interface MainThreadFileSystemShape extends IDisposable {\n\t$registerFileSystemProvider(handle: number, scheme: string, capabilities: files.FileSystemProviderCapabilities): Promise<void>;\n\t$unregisterProvider(handle: number): void;\n\t$onFileSystemChange(handle: number, resource: IFileChangeDto[]): void;\n\n\t$stat(uri: UriComponents): Promise<files.IStat>;\n\t$readdir(resource: UriComponents): Promise<[string, files.FileType][]>;\n\t$readFile(resource: UriComponents): Promise<VSBuffer>;\n\t$writeFile(resource: UriComponents, content: VSBuffer): Promise<void>;\n\t$rename(resource: UriComponents, target: UriComponents, opts: files.FileOverwriteOptions): Promise<void>;\n\t$copy(resource: UriComponents, target: UriComponents, opts: files.FileOverwriteOptions): Promise<void>;\n\t$mkdir(resource: UriComponents): Promise<void>;\n\t$delete(resource: UriComponents, opts: files.FileDeleteOptions): Promise<void>;\n}\n\nexport interface MainThreadLabelServiceShape extends IDisposable {\n\t$registerResourceLabelFormatter(handle: number, formatter: ResourceLabelFormatter): void;\n\t$unregisterResourceLabelFormatter(handle: number): void;\n}\n\nexport interface MainThreadSearchShape extends IDisposable {\n\t$registerFileSearchProvider(handle: number, scheme: string): void;\n\t$registerTextSearchProvider(handle: number, scheme: string): void;\n\t$unregisterProvider(handle: number): void;\n\t$handleFileMatch(handle: number, session: number, data: UriComponents[]): void;\n\t$handleTextMatch(handle: number, session: number, data: search.IRawFileMatch2[]): void;\n\t$handleTelemetry(eventName: string, data: any): void;\n}\n\nexport interface MainThreadTaskShape extends IDisposable {\n\t$createTaskId(task: tasks.TaskDTO): Promise<string>;\n\t$registerTaskProvider(handle: number, type: string): Promise<void>;\n\t$unregisterTaskProvider(handle: number): Promise<void>;\n\t$fetchTasks(filter?: tasks.TaskFilterDTO): Promise<tasks.TaskDTO[]>;\n\t$getTaskExecution(value: tasks.TaskHandleDTO | tasks.TaskDTO): Promise<tasks.TaskExecutionDTO>;\n\t$executeTask(task: tasks.TaskHandleDTO | tasks.TaskDTO): Promise<tasks.TaskExecutionDTO>;\n\t$terminateTask(id: string): Promise<void>;\n\t$registerTaskSystem(scheme: string, info: tasks.TaskSystemInfoDTO): void;\n\t$customExecutionComplete(id: string, result?: number): Promise<void>;\n\t$registerSupportedExecutions(custom?: boolean, shell?: boolean, process?: boolean): Promise<void>;\n}\n\nexport interface MainThreadExtensionServiceShape extends IDisposable {\n\t$activateExtension(extensionId: ExtensionIdentifier, reason: ExtensionActivationReason): Promise<void>;\n\t$onWillActivateExtension(extensionId: ExtensionIdentifier): Promise<void>;\n\t$onDidActivateExtension(extensionId: ExtensionIdentifier, codeLoadingTime: number, activateCallTime: number, activateResolvedTime: number, activationReason: ExtensionActivationReason): void;\n\t$onExtensionActivationError(extensionId: ExtensionIdentifier, error: SerializedError, missingExtensionDependency: MissingExtensionDependency | null): Promise<void>;\n\t$onExtensionRuntimeError(extensionId: ExtensionIdentifier, error: SerializedError): void;\n\t$setPerformanceMarks(marks: performance.PerformanceMark[]): Promise<void>;\n}\n\nexport interface SCMProviderFeatures {\n\thasQuickDiffProvider?: boolean;\n\tcount?: number;\n\tcommitTemplate?: string;\n\tacceptInputCommand?: modes.Command;\n\tstatusBarCommands?: ICommandDto[];\n}\n\nexport interface SCMGroupFeatures {\n\thideWhenEmpty?: boolean;\n}\n\nexport type SCMRawResource = [\n\tnumber /*handle*/,\n\tUriComponents /*resourceUri*/,\n\tUriComponents[] /*icons: light, dark*/,\n\tstring /*tooltip*/,\n\tboolean /*strike through*/,\n\tboolean /*faded*/,\n\tstring /*context value*/,\n\tICommandDto | undefined /*command*/\n];\n\nexport type SCMRawResourceSplice = [\n\tnumber /* start */,\n\tnumber /* delete count */,\n\tSCMRawResource[]\n];\n\nexport type SCMRawResourceSplices = [\n\tnumber, /*handle*/\n\tSCMRawResourceSplice[]\n];\n\nexport interface MainThreadSCMShape extends IDisposable {\n\t$registerSourceControl(handle: number, id: string, label: string, rootUri: UriComponents | undefined): void;\n\t$updateSourceControl(handle: number, features: SCMProviderFeatures): void;\n\t$unregisterSourceControl(handle: number): void;\n\n\t$registerGroups(sourceControlHandle: number, groups: [number /*handle*/, string /*id*/, string /*label*/, SCMGroupFeatures][], splices: SCMRawResourceSplices[]): void;\n\t$updateGroup(sourceControlHandle: number, handle: number, features: SCMGroupFeatures): void;\n\t$updateGroupLabel(sourceControlHandle: number, handle: number, label: string): void;\n\t$unregisterGroup(sourceControlHandle: number, handle: number): void;\n\n\t$spliceResourceStates(sourceControlHandle: number, splices: SCMRawResourceSplices[]): void;\n\n\t$setInputBoxValue(sourceControlHandle: number, value: string): void;\n\t$setInputBoxPlaceholder(sourceControlHandle: number, placeholder: string): void;\n\t$setInputBoxVisibility(sourceControlHandle: number, visible: boolean): void;\n\t$setInputBoxFocus(sourceControlHandle: number): void;\n\t$showValidationMessage(sourceControlHandle: number, message: string, type: InputValidationType): void;\n\t$setValidationProviderIsEnabled(sourceControlHandle: number, enabled: boolean): void;\n}\n\nexport type DebugSessionUUID = string;\n\nexport interface IDebugConfiguration {\n\ttype: string;\n\tname: string;\n\trequest: string;\n\t[key: string]: any;\n}\n\nexport interface IStartDebuggingOptions {\n\tparentSessionID?: DebugSessionUUID;\n\trepl?: IDebugSessionReplMode;\n\tnoDebug?: boolean;\n\tcompact?: boolean;\n}\n\nexport interface MainThreadDebugServiceShape extends IDisposable {\n\t$registerDebugTypes(debugTypes: string[]): void;\n\t$sessionCached(sessionID: string): void;\n\t$acceptDAMessage(handle: number, message: DebugProtocol.ProtocolMessage): void;\n\t$acceptDAError(handle: number, name: string, message: string, stack: string | undefined): void;\n\t$acceptDAExit(handle: number, code: number | undefined, signal: string | undefined): void;\n\t$registerDebugConfigurationProvider(type: string, triggerKind: DebugConfigurationProviderTriggerKind, hasProvideMethod: boolean, hasResolveMethod: boolean, hasResolve2Method: boolean, handle: number): Promise<void>;\n\t$registerDebugAdapterDescriptorFactory(type: string, handle: number): Promise<void>;\n\t$unregisterDebugConfigurationProvider(handle: number): void;\n\t$unregisterDebugAdapterDescriptorFactory(handle: number): void;\n\t$startDebugging(folder: UriComponents | undefined, nameOrConfig: string | IDebugConfiguration, options: IStartDebuggingOptions): Promise<boolean>;\n\t$stopDebugging(sessionId: DebugSessionUUID | undefined): Promise<void>;\n\t$setDebugSessionName(id: DebugSessionUUID, name: string): void;\n\t$customDebugAdapterRequest(id: DebugSessionUUID, command: string, args: any): Promise<any>;\n\t$getDebugProtocolBreakpoint(id: DebugSessionUUID, breakpoinId: string): Promise<DebugProtocol.Breakpoint | undefined>;\n\t$appendDebugConsole(value: string): void;\n\t$startBreakpointEvents(): void;\n\t$registerBreakpoints(breakpoints: Array<ISourceMultiBreakpointDto | IFunctionBreakpointDto | IDataBreakpointDto>): Promise<void>;\n\t$unregisterBreakpoints(breakpointIds: string[], functionBreakpointIds: string[], dataBreakpointIds: string[]): Promise<void>;\n}\n\nexport interface IOpenUriOptions {\n\treadonly allowTunneling?: boolean;\n\treadonly allowContributedOpeners?: boolean | string;\n}\n\nexport interface MainThreadWindowShape extends IDisposable {\n\t$getWindowVisibility(): Promise<boolean>;\n\t$openUri(uri: UriComponents, uriString: string | undefined, options: IOpenUriOptions): Promise<boolean>;\n\t$asExternalUri(uri: UriComponents, options: IOpenUriOptions): Promise<UriComponents>;\n}\n\nexport enum CandidatePortSource {\n\tNone = 0,\n\tProcess = 1,\n\tOutput = 2\n}\n\nexport interface PortAttributesProviderSelector {\n\tpid?: number;\n\tportRange?: [number, number];\n\tcommandMatcher?: RegExp;\n}\n\nexport interface MainThreadTunnelServiceShape extends IDisposable {\n\t$openTunnel(tunnelOptions: TunnelOptions, source: string | undefined): Promise<TunnelDto | undefined>;\n\t$closeTunnel(remote: { host: string, port: number }): Promise<void>;\n\t$getTunnels(): Promise<TunnelDescription[]>;\n\t$setTunnelProvider(features: TunnelProviderFeatures): Promise<void>;\n\t$setRemoteTunnelService(processId: number): Promise<void>;\n\t$setCandidateFilter(): Promise<void>;\n\t$onFoundNewCandidates(candidates: CandidatePort[]): Promise<void>;\n\t$setCandidatePortSource(source: CandidatePortSource): Promise<void>;\n\t$registerPortsAttributesProvider(selector: PortAttributesProviderSelector, providerHandle: number): Promise<void>;\n\t$unregisterPortsAttributesProvider(providerHandle: number): Promise<void>;\n}\n\nexport interface MainThreadTimelineShape extends IDisposable {\n\t$registerTimelineProvider(provider: TimelineProviderDescriptor): void;\n\t$unregisterTimelineProvider(source: string): void;\n\t$emitTimelineChangeEvent(e: TimelineChangeEvent | undefined): void;\n}\n\n// -- extension host\n\nexport interface ExtHostCommandsShape {\n\t$executeContributedCommand<T>(id: string, ...args: any[]): Promise<T>;\n\t$getContributedCommandHandlerDescriptions(): Promise<{ [id: string]: string | ICommandHandlerDescription; }>;\n}\n\nexport interface ExtHostConfigurationShape {\n\t$initializeConfiguration(data: IConfigurationInitData): void;\n\t$acceptConfigurationChanged(data: IConfigurationInitData, change: IConfigurationChange): void;\n}\n\nexport interface ExtHostDiagnosticsShape {\n\t$acceptMarkersChange(data: [UriComponents, IMarkerData[]][]): void;\n}\n\nexport interface ExtHostDocumentContentProvidersShape {\n\t$provideTextDocumentContent(handle: number, uri: UriComponents): Promise<string | null | undefined>;\n}\n\nexport interface IModelAddedData {\n\turi: UriComponents;\n\tversionId: number;\n\tlines: string[];\n\tEOL: string;\n\tmodeId: string;\n\tisDirty: boolean;\n}\nexport interface ExtHostDocumentsShape {\n\t$acceptModelModeChanged(strURL: UriComponents, newModeId: string): void;\n\t$acceptModelSaved(strURL: UriComponents): void;\n\t$acceptDirtyStateChanged(strURL: UriComponents, isDirty: boolean): void;\n\t$acceptModelChanged(strURL: UriComponents, e: IModelChangedEvent, isDirty: boolean): void;\n}\n\nexport interface ExtHostDocumentSaveParticipantShape {\n\t$participateInSave(resource: UriComponents, reason: SaveReason): Promise<boolean[]>;\n}\n\nexport interface ITextEditorAddData {\n\tid: string;\n\tdocumentUri: UriComponents;\n\toptions: IResolvedTextEditorConfiguration;\n\tselections: ISelection[];\n\tvisibleRanges: IRange[];\n\teditorPosition: EditorGroupColumn | undefined;\n}\nexport interface ITextEditorPositionData {\n\t[id: string]: EditorGroupColumn;\n}\nexport interface IEditorPropertiesChangeData {\n\toptions: IResolvedTextEditorConfiguration | null;\n\tselections: ISelectionChangeEvent | null;\n\tvisibleRanges: IRange[] | null;\n}\nexport interface ISelectionChangeEvent {\n\tselections: Selection[];\n\tsource?: string;\n}\n\nexport interface ExtHostEditorsShape {\n\t$acceptEditorPropertiesChanged(id: string, props: IEditorPropertiesChangeData): void;\n\t$acceptEditorPositionData(data: ITextEditorPositionData): void;\n}\n\nexport interface IDocumentsAndEditorsDelta {\n\tremovedDocuments?: UriComponents[];\n\taddedDocuments?: IModelAddedData[];\n\tremovedEditors?: string[];\n\taddedEditors?: ITextEditorAddData[];\n\tnewActiveEditor?: string | null;\n}\n\nexport interface ExtHostDocumentsAndEditorsShape {\n\t$acceptDocumentsAndEditorsDelta(delta: IDocumentsAndEditorsDelta): void;\n}\n\nexport interface ExtHostTreeViewsShape {\n\t$getChildren(treeViewId: string, treeItemHandle?: string): Promise<ITreeItem[]>;\n\t$setExpanded(treeViewId: string, treeItemHandle: string, expanded: boolean): void;\n\t$setSelection(treeViewId: string, treeItemHandles: string[]): void;\n\t$setVisible(treeViewId: string, visible: boolean): void;\n\t$hasResolve(treeViewId: string): Promise<boolean>;\n\t$resolve(treeViewId: string, treeItemHandle: string, token: CancellationToken): Promise<ITreeItem | undefined>;\n}\n\nexport interface ExtHostWorkspaceShape {\n\t$initializeWorkspace(workspace: IWorkspaceData | null, trusted: boolean): void;\n\t$acceptWorkspaceData(workspace: IWorkspaceData | null): void;\n\t$handleTextSearchResult(result: search.IRawFileMatch2, requestId: number): void;\n\t$onDidGrantWorkspaceTrust(): void;\n}\n\nexport interface ExtHostFileSystemInfoShape {\n\t$acceptProviderInfos(scheme: string, capabilities: number | null): void;\n}\n\nexport interface ExtHostFileSystemShape {\n\t$stat(handle: number, resource: UriComponents): Promise<files.IStat>;\n\t$readdir(handle: number, resource: UriComponents): Promise<[string, files.FileType][]>;\n\t$readFile(handle: number, resource: UriComponents): Promise<VSBuffer>;\n\t$writeFile(handle: number, resource: UriComponents, content: VSBuffer, opts: files.FileWriteOptions): Promise<void>;\n\t$rename(handle: number, resource: UriComponents, target: UriComponents, opts: files.FileOverwriteOptions): Promise<void>;\n\t$copy(handle: number, resource: UriComponents, target: UriComponents, opts: files.FileOverwriteOptions): Promise<void>;\n\t$mkdir(handle: number, resource: UriComponents): Promise<void>;\n\t$delete(handle: number, resource: UriComponents, opts: files.FileDeleteOptions): Promise<void>;\n\t$watch(handle: number, session: number, resource: UriComponents, opts: files.IWatchOptions): void;\n\t$unwatch(handle: number, session: number): void;\n\t$open(handle: number, resource: UriComponents, opts: files.FileOpenOptions): Promise<number>;\n\t$close(handle: number, fd: number): Promise<void>;\n\t$read(handle: number, fd: number, pos: number, length: number): Promise<VSBuffer>;\n\t$write(handle: number, fd: number, pos: number, data: VSBuffer): Promise<number>;\n}\n\nexport interface ExtHostLabelServiceShape {\n\t$registerResourceLabelFormatter(formatter: ResourceLabelFormatter): IDisposable;\n}\n\nexport interface ExtHostAuthenticationShape {\n\t$getSessions(id: string, scopes?: string[]): Promise<ReadonlyArray<modes.AuthenticationSession>>;\n\t$createSession(id: string, scopes: string[]): Promise<modes.AuthenticationSession>;\n\t$removeSession(id: string, sessionId: string): Promise<void>;\n\t$onDidChangeAuthenticationSessions(id: string, label: string): Promise<void>;\n\t$onDidChangeAuthenticationProviders(added: modes.AuthenticationProviderInformation[], removed: modes.AuthenticationProviderInformation[]): Promise<void>;\n\t$setProviders(providers: modes.AuthenticationProviderInformation[]): Promise<void>;\n}\n\nexport interface ExtHostSecretStateShape {\n\t$onDidChangePassword(e: { extensionId: string, key: string }): Promise<void>;\n}\n\nexport interface ExtHostSearchShape {\n\t$provideFileSearchResults(handle: number, session: number, query: search.IRawQuery, token: CancellationToken): Promise<search.ISearchCompleteStats>;\n\t$provideTextSearchResults(handle: number, session: number, query: search.IRawTextQuery, token: CancellationToken): Promise<search.ISearchCompleteStats>;\n\t$clearCache(cacheKey: string): Promise<void>;\n}\n\nexport interface IResolveAuthorityErrorResult {\n\ttype: 'error';\n\terror: {\n\t\tmessage: string | undefined;\n\t\tcode: RemoteAuthorityResolverErrorCode;\n\t\tdetail: any;\n\t};\n}\n\nexport interface IResolveAuthorityOKResult {\n\ttype: 'ok';\n\tvalue: ResolverResult;\n}\n\nexport type IResolveAuthorityResult = IResolveAuthorityErrorResult | IResolveAuthorityOKResult;\n\nexport interface ExtHostExtensionServiceShape {\n\t$resolveAuthority(remoteAuthority: string, resolveAttempt: number): Promise<IResolveAuthorityResult>;\n\t$startExtensionHost(enabledExtensionIds: ExtensionIdentifier[]): Promise<void>;\n\t$extensionTestsExecute(): Promise<number>;\n\t$extensionTestsExit(code: number): Promise<void>;\n\t$activateByEvent(activationEvent: string, activationKind: ActivationKind): Promise<void>;\n\t$activate(extensionId: ExtensionIdentifier, reason: ExtensionActivationReason): Promise<boolean>;\n\t$setRemoteEnvironment(env: { [key: string]: string | null; }): Promise<void>;\n\t$updateRemoteConnectionData(connectionData: IRemoteConnectionData): Promise<void>;\n\n\t$deltaExtensions(toAdd: IExtensionDescription[], toRemove: ExtensionIdentifier[]): Promise<void>;\n\n\t$test_latency(n: number): Promise<number>;\n\t$test_up(b: VSBuffer): Promise<number>;\n\t$test_down(size: number): Promise<VSBuffer>;\n}\n\nexport interface FileSystemEvents {\n\tcreated: UriComponents[];\n\tchanged: UriComponents[];\n\tdeleted: UriComponents[];\n}\n\nexport interface SourceTargetPair {\n\tsource?: UriComponents;\n\ttarget: UriComponents;\n}\n\nexport interface IWillRunFileOperationParticipation {\n\tedit: IWorkspaceEditDto;\n\textensionNames: string[]\n}\n\nexport interface ExtHostFileSystemEventServiceShape {\n\t$onFileEvent(events: FileSystemEvents): void;\n\t$onWillRunFileOperation(operation: files.FileOperation, files: readonly SourceTargetPair[], timeout: number, token: CancellationToken): Promise<IWillRunFileOperationParticipation | undefined>;\n\t$onDidRunFileOperation(operation: files.FileOperation, files: readonly SourceTargetPair[]): void;\n}\n\nexport interface ObjectIdentifier {\n\t$ident?: number;\n}\n\nexport namespace ObjectIdentifier {\n\texport const name = '$ident';\n\texport function mixin<T>(obj: T, id: number): T & ObjectIdentifier {\n\t\tObject.defineProperty(obj, name, { value: id, enumerable: true });\n\t\treturn <T & ObjectIdentifier>obj;\n\t}\n\texport function of(obj: any): number {\n\t\treturn obj[name];\n\t}\n}\n\nexport interface ExtHostHeapServiceShape {\n\t$onGarbageCollection(ids: number[]): void;\n}\nexport interface IRawColorInfo {\n\tcolor: [number, number, number, number];\n\trange: IRange;\n}\n\nexport class IdObject {\n\t_id?: number;\n\tprivate static _n = 0;\n\tstatic mixin<T extends object>(object: T): T & IdObject {\n\t\t(<any>object)._id = IdObject._n++;\n\t\treturn <any>object;\n\t}\n}\n\nexport const enum ISuggestDataDtoField {\n\tlabel = 'a',\n\tkind = 'b',\n\tdetail = 'c',\n\tdocumentation = 'd',\n\tsortText = 'e',\n\tfilterText = 'f',\n\tpreselect = 'g',\n\tinsertText = 'h',\n\tinsertTextRules = 'i',\n\trange = 'j',\n\tcommitCharacters = 'k',\n\tadditionalTextEdits = 'l',\n\tcommand = 'm',\n\tkindModifier = 'n',\n\n\t// to merge into label\n\tlabel2 = 'o',\n}\n\nexport interface ISuggestDataDto {\n\t[ISuggestDataDtoField.label]: string;\n\t[ISuggestDataDtoField.label2]?: string | modes.CompletionItemLabel;\n\t[ISuggestDataDtoField.kind]?: modes.CompletionItemKind;\n\t[ISuggestDataDtoField.detail]?: string;\n\t[ISuggestDataDtoField.documentation]?: string | IMarkdownString;\n\t[ISuggestDataDtoField.sortText]?: string;\n\t[ISuggestDataDtoField.filterText]?: string;\n\t[ISuggestDataDtoField.preselect]?: true;\n\t[ISuggestDataDtoField.insertText]?: string;\n\t[ISuggestDataDtoField.insertTextRules]?: modes.CompletionItemInsertTextRule;\n\t[ISuggestDataDtoField.range]?: IRange | { insert: IRange, replace: IRange; };\n\t[ISuggestDataDtoField.commitCharacters]?: string[];\n\t[ISuggestDataDtoField.additionalTextEdits]?: ISingleEditOperation[];\n\t[ISuggestDataDtoField.command]?: modes.Command;\n\t[ISuggestDataDtoField.kindModifier]?: modes.CompletionItemTag[];\n\t// not-standard\n\tx?: ChainedCacheId;\n}\n\nexport const enum ISuggestResultDtoField {\n\tdefaultRanges = 'a',\n\tcompletions = 'b',\n\tisIncomplete = 'c',\n\tduration = 'd',\n}\n\nexport interface ISuggestResultDto {\n\t[ISuggestResultDtoField.defaultRanges]: { insert: IRange, replace: IRange; };\n\t[ISuggestResultDtoField.completions]: ISuggestDataDto[];\n\t[ISuggestResultDtoField.isIncomplete]: undefined | true;\n\t[ISuggestResultDtoField.duration]: number;\n\tx?: number;\n}\n\nexport interface ISignatureHelpDto {\n\tid: CacheId;\n\tsignatures: modes.SignatureInformation[];\n\tactiveSignature: number;\n\tactiveParameter: number;\n}\n\nexport interface ISignatureHelpContextDto {\n\treadonly triggerKind: modes.SignatureHelpTriggerKind;\n\treadonly triggerCharacter?: string;\n\treadonly isRetrigger: boolean;\n\treadonly activeSignatureHelp?: ISignatureHelpDto;\n}\n\nexport interface IInlineHintDto {\n\ttext: string;\n\trange: IRange;\n\tkind: modes.InlineHintKind;\n\twhitespaceBefore?: boolean;\n\twhitespaceAfter?: boolean;\n\thoverMessage?: string;\n}\n\nexport interface IInlineHintsDto {\n\thints: IInlineHintDto[]\n}\n\nexport interface ILocationDto {\n\turi: UriComponents;\n\trange: IRange;\n}\n\nexport interface IDefinitionLinkDto {\n\toriginSelectionRange?: IRange;\n\turi: UriComponents;\n\trange: IRange;\n\ttargetSelectionRange?: IRange;\n}\n\nexport interface IWorkspaceSymbolDto extends IdObject {\n\tname: string;\n\tcontainerName?: string;\n\tkind: modes.SymbolKind;\n\tlocation: ILocationDto;\n}\n\nexport interface IWorkspaceSymbolsDto extends IdObject {\n\tsymbols: IWorkspaceSymbolDto[];\n}\n\nexport interface IWorkspaceEditEntryMetadataDto {\n\tneedsConfirmation: boolean;\n\tlabel: string;\n\tdescription?: string;\n\ticonPath?: { id: string } | UriComponents | { light: UriComponents, dark: UriComponents };\n}\n\nexport const enum WorkspaceEditType {\n\tFile = 1,\n\tText = 2,\n\tCell = 3,\n}\n\nexport interface IWorkspaceFileEditDto {\n\t_type: WorkspaceEditType.File;\n\toldUri?: UriComponents;\n\tnewUri?: UriComponents;\n\toptions?: modes.WorkspaceFileEditOptions\n\tmetadata?: IWorkspaceEditEntryMetadataDto;\n}\n\nexport interface IWorkspaceTextEditDto {\n\t_type: WorkspaceEditType.Text;\n\tresource: UriComponents;\n\tedit: modes.TextEdit;\n\tmodelVersionId?: number;\n\tmetadata?: IWorkspaceEditEntryMetadataDto;\n}\n\nexport interface IWorkspaceCellEditDto {\n\t_type: WorkspaceEditType.Cell;\n\tresource: UriComponents;\n\tedit: ICellEditOperation;\n\tnotebookVersionId?: number;\n\tmetadata?: IWorkspaceEditEntryMetadataDto;\n}\n\nexport interface IWorkspaceEditDto {\n\tedits: Array<IWorkspaceFileEditDto | IWorkspaceTextEditDto | IWorkspaceCellEditDto>;\n}\n\nexport function reviveWorkspaceEditDto(data: IWorkspaceEditDto | undefined): modes.WorkspaceEdit {\n\tif (data && data.edits) {\n\t\tfor (const edit of data.edits) {\n\t\t\tif (typeof (<IWorkspaceTextEditDto>edit).resource === 'object') {\n\t\t\t\t(<IWorkspaceTextEditDto>edit).resource = URI.revive((<IWorkspaceTextEditDto>edit).resource);\n\t\t\t} else {\n\t\t\t\t(<IWorkspaceFileEditDto>edit).newUri = URI.revive((<IWorkspaceFileEditDto>edit).newUri);\n\t\t\t\t(<IWorkspaceFileEditDto>edit).oldUri = URI.revive((<IWorkspaceFileEditDto>edit).oldUri);\n\t\t\t}\n\t\t\tif (edit.metadata && edit.metadata.iconPath) {\n\t\t\t\tedit.metadata = revive(edit.metadata);\n\t\t\t}\n\t\t}\n\t}\n\treturn <modes.WorkspaceEdit>data;\n}\n\nexport type ICommandDto = ObjectIdentifier & modes.Command;\n\nexport interface ICodeActionDto {\n\tcacheId?: ChainedCacheId;\n\ttitle: string;\n\tedit?: IWorkspaceEditDto;\n\tdiagnostics?: IMarkerData[];\n\tcommand?: ICommandDto;\n\tkind?: string;\n\tisPreferred?: boolean;\n\tdisabled?: string;\n}\n\nexport interface ICodeActionListDto {\n\tcacheId: CacheId;\n\tactions: ReadonlyArray<ICodeActionDto>;\n}\n\nexport interface ICodeActionProviderMetadataDto {\n\treadonly providedKinds?: readonly string[];\n\treadonly documentation?: ReadonlyArray<{ readonly kind: string, readonly command: ICommandDto }>;\n}\n\nexport type CacheId = number;\nexport type ChainedCacheId = [CacheId, CacheId];\n\nexport interface ILinksListDto {\n\tid?: CacheId;\n\tlinks: ILinkDto[];\n}\n\nexport interface ILinkDto {\n\tcacheId?: ChainedCacheId;\n\trange: IRange;\n\turl?: string | UriComponents;\n\ttooltip?: string;\n}\n\nexport interface ICodeLensListDto {\n\tcacheId?: number;\n\tlenses: ICodeLensDto[];\n}\n\nexport interface ICodeLensDto {\n\tcacheId?: ChainedCacheId;\n\trange: IRange;\n\tcommand?: ICommandDto;\n}\n\nexport type ICallHierarchyItemDto = Dto<CallHierarchyItem>;\n\nexport interface IIncomingCallDto {\n\tfrom: ICallHierarchyItemDto;\n\tfromRanges: IRange[];\n}\n\nexport interface IOutgoingCallDto {\n\tfromRanges: IRange[];\n\tto: ICallHierarchyItemDto;\n}\n\nexport interface ILanguageWordDefinitionDto {\n\tlanguageId: string;\n\tregexSource: string;\n\tregexFlags: string\n}\n\nexport interface ILinkedEditingRangesDto {\n\tranges: IRange[];\n\twordPattern?: IRegExpDto;\n}\n\nexport interface IInlineValueContextDto {\n\tframeId: number;\n\tstoppedLocation: IRange;\n}\n\nexport interface ExtHostLanguageFeaturesShape {\n\t$provideDocumentSymbols(handle: number, resource: UriComponents, token: CancellationToken): Promise<modes.DocumentSymbol[] | undefined>;\n\t$provideCodeLenses(handle: number, resource: UriComponents, token: CancellationToken): Promise<ICodeLensListDto | undefined>;\n\t$resolveCodeLens(handle: number, symbol: ICodeLensDto, token: CancellationToken): Promise<ICodeLensDto | undefined>;\n\t$releaseCodeLenses(handle: number, id: number): void;\n\t$provideDefinition(handle: number, resource: UriComponents, position: IPosition, token: CancellationToken): Promise<IDefinitionLinkDto[]>;\n\t$provideDeclaration(handle: number, resource: UriComponents, position: IPosition, token: CancellationToken): Promise<IDefinitionLinkDto[]>;\n\t$provideImplementation(handle: number, resource: UriComponents, position: IPosition, token: CancellationToken): Promise<IDefinitionLinkDto[]>;\n\t$provideTypeDefinition(handle: number, resource: UriComponents, position: IPosition, token: CancellationToken): Promise<IDefinitionLinkDto[]>;\n\t$provideHover(handle: number, resource: UriComponents, position: IPosition, token: CancellationToken): Promise<modes.Hover | undefined>;\n\t$provideEvaluatableExpression(handle: number, resource: UriComponents, position: IPosition, token: CancellationToken): Promise<modes.EvaluatableExpression | undefined>;\n\t$provideInlineValues(handle: number, resource: UriComponents, range: IRange, context: modes.InlineValueContext, token: CancellationToken): Promise<modes.InlineValue[] | undefined>;\n\t$provideDocumentHighlights(handle: number, resource: UriComponents, position: IPosition, token: CancellationToken): Promise<modes.DocumentHighlight[] | undefined>;\n\t$provideLinkedEditingRanges(handle: number, resource: UriComponents, position: IPosition, token: CancellationToken): Promise<ILinkedEditingRangesDto | undefined>;\n\t$provideReferences(handle: number, resource: UriComponents, position: IPosition, context: modes.ReferenceContext, token: CancellationToken): Promise<ILocationDto[] | undefined>;\n\t$provideCodeActions(handle: number, resource: UriComponents, rangeOrSelection: IRange | ISelection, context: modes.CodeActionContext, token: CancellationToken): Promise<ICodeActionListDto | undefined>;\n\t$resolveCodeAction(handle: number, id: ChainedCacheId, token: CancellationToken): Promise<IWorkspaceEditDto | undefined>;\n\t$releaseCodeActions(handle: number, cacheId: number): void;\n\t$provideDocumentFormattingEdits(handle: number, resource: UriComponents, options: modes.FormattingOptions, token: CancellationToken): Promise<ISingleEditOperation[] | undefined>;\n\t$provideDocumentRangeFormattingEdits(handle: number, resource: UriComponents, range: IRange, options: modes.FormattingOptions, token: CancellationToken): Promise<ISingleEditOperation[] | undefined>;\n\t$provideOnTypeFormattingEdits(handle: number, resource: UriComponents, position: IPosition, ch: string, options: modes.FormattingOptions, token: CancellationToken): Promise<ISingleEditOperation[] | undefined>;\n\t$provideWorkspaceSymbols(handle: number, search: string, token: CancellationToken): Promise<IWorkspaceSymbolsDto>;\n\t$resolveWorkspaceSymbol(handle: number, symbol: IWorkspaceSymbolDto, token: CancellationToken): Promise<IWorkspaceSymbolDto | undefined>;\n\t$releaseWorkspaceSymbols(handle: number, id: number): void;\n\t$provideRenameEdits(handle: number, resource: UriComponents, position: IPosition, newName: string, token: CancellationToken): Promise<IWorkspaceEditDto & { rejectReason?: string } | undefined>;\n\t$resolveRenameLocation(handle: number, resource: UriComponents, position: IPosition, token: CancellationToken): Promise<modes.RenameLocation | undefined>;\n\t$provideDocumentSemanticTokens(handle: number, resource: UriComponents, previousResultId: number, token: CancellationToken): Promise<VSBuffer | null>;\n\t$releaseDocumentSemanticTokens(handle: number, semanticColoringResultId: number): void;\n\t$provideDocumentRangeSemanticTokens(handle: number, resource: UriComponents, range: IRange, token: CancellationToken): Promise<VSBuffer | null>;\n\t$provideCompletionItems(handle: number, resource: UriComponents, position: IPosition, context: modes.CompletionContext, token: CancellationToken): Promise<ISuggestResultDto | undefined>;\n\t$resolveCompletionItem(handle: number, id: ChainedCacheId, token: CancellationToken): Promise<ISuggestDataDto | undefined>;\n\t$releaseCompletionItems(handle: number, id: number): void;\n\t$provideSignatureHelp(handle: number, resource: UriComponents, position: IPosition, context: modes.SignatureHelpContext, token: CancellationToken): Promise<ISignatureHelpDto | undefined>;\n\t$releaseSignatureHelp(handle: number, id: number): void;\n\t$provideInlineHints(handle: number, resource: UriComponents, range: IRange, token: CancellationToken): Promise<IInlineHintsDto | undefined>\n\t$provideDocumentLinks(handle: number, resource: UriComponents, token: CancellationToken): Promise<ILinksListDto | undefined>;\n\t$resolveDocumentLink(handle: number, id: ChainedCacheId, token: CancellationToken): Promise<ILinkDto | undefined>;\n\t$releaseDocumentLinks(handle: number, id: number): void;\n\t$provideDocumentColors(handle: number, resource: UriComponents, token: CancellationToken): Promise<IRawColorInfo[]>;\n\t$provideColorPresentations(handle: number, resource: UriComponents, colorInfo: IRawColorInfo, token: CancellationToken): Promise<modes.IColorPresentation[] | undefined>;\n\t$provideFoldingRanges(handle: number, resource: UriComponents, context: modes.FoldingContext, token: CancellationToken): Promise<modes.FoldingRange[] | undefined>;\n\t$provideSelectionRanges(handle: number, resource: UriComponents, positions: IPosition[], token: CancellationToken): Promise<modes.SelectionRange[][]>;\n\t$prepareCallHierarchy(handle: number, resource: UriComponents, position: IPosition, token: CancellationToken): Promise<ICallHierarchyItemDto[] | undefined>;\n\t$provideCallHierarchyIncomingCalls(handle: number, sessionId: string, itemId: string, token: CancellationToken): Promise<IIncomingCallDto[] | undefined>;\n\t$provideCallHierarchyOutgoingCalls(handle: number, sessionId: string, itemId: string, token: CancellationToken): Promise<IOutgoingCallDto[] | undefined>;\n\t$releaseCallHierarchy(handle: number, sessionId: string): void;\n\t$setWordDefinitions(wordDefinitions: ILanguageWordDefinitionDto[]): void;\n}\n\nexport interface ExtHostQuickOpenShape {\n\t$onItemSelected(handle: number): void;\n\t$validateInput(input: string): Promise<string | null | undefined>;\n\t$onDidChangeActive(sessionId: number, handles: number[]): void;\n\t$onDidChangeSelection(sessionId: number, handles: number[]): void;\n\t$onDidAccept(sessionId: number): void;\n\t$onDidChangeValue(sessionId: number, value: string): void;\n\t$onDidTriggerButton(sessionId: number, handle: number): void;\n\t$onDidHide(sessionId: number): void;\n}\n\nexport interface ExtHostTelemetryShape {\n\t$initializeTelemetryEnabled(enabled: boolean): void;\n\t$onDidChangeTelemetryEnabled(enabled: boolean): void;\n}\n\nexport interface IShellAndArgsDto {\n\tshell: string;\n\targs: string[] | string | undefined;\n}\n\nexport interface ITerminalLinkDto {\n\t/** The ID of the link to enable activation and disposal. */\n\tid: number;\n\t/** The startIndex of the link in the line. */\n\tstartIndex: number;\n\t/** The length of the link in the line. */\n\tlength: number;\n\t/** The descriptive label for what the link does when activated. */\n\tlabel?: string;\n}\n\nexport interface ITerminalDimensionsDto {\n\tcolumns: number;\n\trows: number;\n}\n\nexport interface ExtHostTerminalServiceShape {\n\t$acceptTerminalClosed(id: number, exitCode: number | undefined): void;\n\t$acceptTerminalOpened(id: number, extHostTerminalId: string | undefined, name: string, shellLaunchConfig: IShellLaunchConfigDto): void;\n\t$acceptActiveTerminalChanged(id: number | null): void;\n\t$acceptTerminalProcessId(id: number, processId: number): void;\n\t$acceptTerminalProcessData(id: number, data: string): void;\n\t$acceptTerminalTitleChange(id: number, name: string): void;\n\t$acceptTerminalDimensions(id: number, cols: number, rows: number): void;\n\t$acceptTerminalMaximumDimensions(id: number, cols: number, rows: number): void;\n\t$startExtensionTerminal(id: number, initialDimensions: ITerminalDimensionsDto | undefined): Promise<ITerminalLaunchError | undefined>;\n\t$acceptProcessAckDataEvent(id: number, charCount: number): void;\n\t$acceptProcessInput(id: number, data: string): void;\n\t$acceptProcessResize(id: number, cols: number, rows: number): void;\n\t$acceptProcessShutdown(id: number, immediate: boolean): void;\n\t$acceptProcessRequestInitialCwd(id: number): void;\n\t$acceptProcessRequestCwd(id: number): void;\n\t$acceptProcessRequestLatency(id: number): number;\n\t$getAvailableProfiles(configuredProfilesOnly: boolean): Promise<ITerminalProfile[]>;\n\t$getDefaultShellAndArgs(useAutomationShell: boolean): Promise<IShellAndArgsDto>;\n\t$provideLinks(id: number, line: string): Promise<ITerminalLinkDto[]>;\n\t$activateLink(id: number, linkId: number): void;\n\t$initEnvironmentVariableCollections(collections: [string, ISerializableEnvironmentVariableCollection][]): void;\n}\n\nexport interface ExtHostSCMShape {\n\t$provideOriginalResource(sourceControlHandle: number, uri: UriComponents, token: CancellationToken): Promise<UriComponents | null>;\n\t$onInputBoxValueChange(sourceControlHandle: number, value: string): void;\n\t$executeResourceCommand(sourceControlHandle: number, groupHandle: number, handle: number, preserveFocus: boolean): Promise<void>;\n\t$validateInput(sourceControlHandle: number, value: string, cursorPosition: number): Promise<[string, number] | undefined>;\n\t$setSelectedSourceControl(selectedSourceControlHandle: number | undefined): Promise<void>;\n}\n\nexport interface ExtHostTaskShape {\n\t$provideTasks(handle: number, validTypes: { [key: string]: boolean; }): Thenable<tasks.TaskSetDTO>;\n\t$resolveTask(handle: number, taskDTO: tasks.TaskDTO): Thenable<tasks.TaskDTO | undefined>;\n\t$onDidStartTask(execution: tasks.TaskExecutionDTO, terminalId: number, resolvedDefinition: tasks.TaskDefinitionDTO): void;\n\t$onDidStartTaskProcess(value: tasks.TaskProcessStartedDTO): void;\n\t$onDidEndTaskProcess(value: tasks.TaskProcessEndedDTO): void;\n\t$OnDidEndTask(execution: tasks.TaskExecutionDTO): void;\n\t$resolveVariables(workspaceFolder: UriComponents, toResolve: { process?: { name: string; cwd?: string; }, variables: string[]; }): Promise<{ process?: string; variables: { [key: string]: string; }; }>;\n\t$getDefaultShellAndArgs(): Thenable<{ shell: string, args: string[] | string | undefined; }>;\n\t$jsonTasksSupported(): Thenable<boolean>;\n\t$findExecutable(command: string, cwd?: string, paths?: string[]): Promise<string | undefined>;\n}\n\nexport interface IBreakpointDto {\n\ttype: string;\n\tid?: string;\n\tenabled: boolean;\n\tcondition?: string;\n\thitCondition?: string;\n\tlogMessage?: string;\n}\n\nexport interface IFunctionBreakpointDto extends IBreakpointDto {\n\ttype: 'function';\n\tfunctionName: string;\n}\n\nexport interface IDataBreakpointDto extends IBreakpointDto {\n\ttype: 'data';\n\tdataId: string;\n\tcanPersist: boolean;\n\tlabel: string;\n\taccessTypes?: DebugProtocol.DataBreakpointAccessType[];\n\taccessType: DebugProtocol.DataBreakpointAccessType;\n}\n\nexport interface ISourceBreakpointDto extends IBreakpointDto {\n\ttype: 'source';\n\turi: UriComponents;\n\tline: number;\n\tcharacter: number;\n}\n\nexport interface IBreakpointsDeltaDto {\n\tadded?: Array<ISourceBreakpointDto | IFunctionBreakpointDto | IDataBreakpointDto>;\n\tremoved?: string[];\n\tchanged?: Array<ISourceBreakpointDto | IFunctionBreakpointDto | IDataBreakpointDto>;\n}\n\nexport interface ISourceMultiBreakpointDto {\n\ttype: 'sourceMulti';\n\turi: UriComponents;\n\tlines: {\n\t\tid: string;\n\t\tenabled: boolean;\n\t\tcondition?: string;\n\t\thitCondition?: string;\n\t\tlogMessage?: string;\n\t\tline: number;\n\t\tcharacter: number;\n\t}[];\n}\n\nexport interface IDebugSessionFullDto {\n\tid: DebugSessionUUID;\n\ttype: string;\n\tname: string;\n\tfolderUri: UriComponents | undefined;\n\tconfiguration: IConfig;\n}\n\nexport type IDebugSessionDto = IDebugSessionFullDto | DebugSessionUUID;\n\nexport interface ExtHostDebugServiceShape {\n\t$substituteVariables(folder: UriComponents | undefined, config: IConfig): Promise<IConfig>;\n\t$runInTerminal(args: DebugProtocol.RunInTerminalRequestArguments, sessionId: string): Promise<number | undefined>;\n\t$startDASession(handle: number, session: IDebugSessionDto): Promise<void>;\n\t$stopDASession(handle: number): Promise<void>;\n\t$sendDAMessage(handle: number, message: DebugProtocol.ProtocolMessage): void;\n\t$resolveDebugConfiguration(handle: number, folder: UriComponents | undefined, debugConfiguration: IConfig, token: CancellationToken): Promise<IConfig | null | undefined>;\n\t$resolveDebugConfigurationWithSubstitutedVariables(handle: number, folder: UriComponents | undefined, debugConfiguration: IConfig, token: CancellationToken): Promise<IConfig | null | undefined>;\n\t$provideDebugConfigurations(handle: number, folder: UriComponents | undefined, token: CancellationToken): Promise<IConfig[]>;\n\t$provideDebugAdapter(handle: number, session: IDebugSessionDto): Promise<IAdapterDescriptor>;\n\t$acceptDebugSessionStarted(session: IDebugSessionDto): void;\n\t$acceptDebugSessionTerminated(session: IDebugSessionDto): void;\n\t$acceptDebugSessionActiveChanged(session: IDebugSessionDto | undefined): void;\n\t$acceptDebugSessionCustomEvent(session: IDebugSessionDto, event: any): void;\n\t$acceptBreakpointsDelta(delta: IBreakpointsDeltaDto): void;\n\t$acceptDebugSessionNameChanged(session: IDebugSessionDto, name: string): void;\n}\n\n\nexport interface DecorationRequest {\n\treadonly id: number;\n\treadonly uri: UriComponents;\n}\n\nexport type DecorationData = [boolean, string, string, ThemeColor];\nexport type DecorationReply = { [id: number]: DecorationData; };\n\nexport interface ExtHostDecorationsShape {\n\t$provideDecorations(handle: number, requests: DecorationRequest[], token: CancellationToken): Promise<DecorationReply>;\n}\n\nexport interface ExtHostWindowShape {\n\t$onDidChangeWindowFocus(value: boolean): void;\n}\n\nexport interface ExtHostLogServiceShape {\n\t$setLevel(level: LogLevel): void;\n}\n\nexport interface MainThreadLogShape {\n\t$log(file: UriComponents, level: LogLevel, args: any[]): void;\n}\n\nexport interface ExtHostOutputServiceShape {\n\t$setVisibleChannel(channelId: string | null): void;\n}\n\nexport interface ExtHostProgressShape {\n\t$acceptProgressCanceled(handle: number): void;\n}\n\nexport interface ExtHostCommentsShape {\n\t$createCommentThreadTemplate(commentControllerHandle: number, uriComponents: UriComponents, range: IRange): void;\n\t$updateCommentThreadTemplate(commentControllerHandle: number, threadHandle: number, range: IRange): Promise<void>;\n\t$deleteCommentThread(commentControllerHandle: number, commentThreadHandle: number): void;\n\t$provideCommentingRanges(commentControllerHandle: number, uriComponents: UriComponents, token: CancellationToken): Promise<IRange[] | undefined>;\n\t$toggleReaction(commentControllerHandle: number, threadHandle: number, uri: UriComponents, comment: modes.Comment, reaction: modes.CommentReaction): Promise<void>;\n}\n\nexport interface INotebookSelectionChangeEvent {\n\tselections: ICellRange[];\n}\n\nexport interface INotebookVisibleRangesEvent {\n\tranges: ICellRange[];\n}\n\nexport interface INotebookEditorPropertiesChangeData {\n\tvisibleRanges?: INotebookVisibleRangesEvent;\n\tselections?: INotebookSelectionChangeEvent;\n}\n\nexport interface INotebookDocumentPropertiesChangeData {\n\tmetadata?: NotebookDocumentMetadata;\n}\n\nexport interface INotebookModelAddedData {\n\turi: UriComponents;\n\tversionId: number;\n\tcells: IMainCellDto[],\n\tviewType: string;\n\tmetadata?: NotebookDocumentMetadata;\n}\n\nexport interface INotebookEditorAddData {\n\tid: string;\n\tdocumentUri: UriComponents;\n\tselections: ICellRange[];\n\tvisibleRanges: ICellRange[];\n\tviewColumn?: number\n}\n\nexport interface INotebookDocumentsAndEditorsDelta {\n\tremovedDocuments?: UriComponents[];\n\taddedDocuments?: INotebookModelAddedData[];\n\tremovedEditors?: string[];\n\taddedEditors?: INotebookEditorAddData[];\n\tnewActiveEditor?: string | null;\n\tvisibleEditors?: string[];\n}\n\nexport interface INotebookKernelInfoDto2 {\n\tid?: string;\n\tfriendlyId: string;\n\tlabel: string;\n\textension: ExtensionIdentifier;\n\textensionLocation: UriComponents;\n\tproviderHandle?: number;\n\tdescription?: string;\n\tdetail?: string;\n\tisPreferred?: boolean;\n\tpreloads?: { uri: UriComponents; provides: string[] }[];\n\tsupportedLanguages?: string[]\n\timplementsInterrupt?: boolean;\n}\n\nexport interface ExtHostNotebookShape extends ExtHostNotebookDocumentsAndEditorsShape, ExtHostNotebookDocumentsShape, ExtHostNotebookEditorsShape {\n\t$provideNotebookCellStatusBarItems(handle: number, uri: UriComponents, index: number, token: CancellationToken): Promise<INotebookCellStatusBarListDto | undefined>;\n\t$releaseNotebookCellStatusBarItems(id: number): void;\n\n\t$openNotebook(viewType: string, uri: UriComponents, backupId: string | undefined, untitledDocumentData: VSBuffer | undefined, token: CancellationToken): Promise<NotebookDataDto>;\n\t$saveNotebook(viewType: string, uri: UriComponents, token: CancellationToken): Promise<boolean>;\n\t$saveNotebookAs(viewType: string, uri: UriComponents, target: UriComponents, token: CancellationToken): Promise<boolean>;\n\t$backupNotebook(viewType: string, uri: UriComponents, cancellation: CancellationToken): Promise<string>;\n\n\t$dataToNotebook(handle: number, data: VSBuffer, token: CancellationToken): Promise<NotebookDataDto>;\n\t$notebookToData(handle: number, data: NotebookDataDto, token: CancellationToken): Promise<VSBuffer>;\n}\n\nexport interface ExtHostNotebookDocumentsAndEditorsShape {\n\t$acceptDocumentAndEditorsDelta(delta: INotebookDocumentsAndEditorsDelta): void;\n}\n\nexport interface ExtHostNotebookDocumentsShape {\n\t$acceptModelChanged(uriComponents: UriComponents, event: NotebookCellsChangedEventDto, isDirty: boolean): void;\n\t$acceptDirtyStateChanged(uriComponents: UriComponents, isDirty: boolean): void;\n\t$acceptModelSaved(uriComponents: UriComponents): void;\n\t$acceptDocumentPropertiesChanged(uriComponents: UriComponents, data: INotebookDocumentPropertiesChangeData): void;\n}\n\nexport type INotebookEditorViewColumnInfo = Record<string, number>;\n\nexport interface ExtHostNotebookEditorsShape {\n\t$acceptEditorPropertiesChanged(id: string, data: INotebookEditorPropertiesChangeData): void;\n\t$acceptEditorViewColumns(data: INotebookEditorViewColumnInfo): void;\n}\n\nexport interface ExtHostNotebookKernelsShape {\n\t$acceptSelection(handle: number, uri: UriComponents, value: boolean): void;\n\t$executeCells(handle: number, uri: UriComponents, handles: number[]): Promise<void>;\n\t$cancelCells(handle: number, uri: UriComponents, handles: number[]): Promise<void>;\n\t$acceptRendererMessage(handle: number, editorId: string, message: any): void;\n}\n\nexport interface ExtHostStorageShape {\n\t$acceptValue(shared: boolean, key: string, value: object | undefined): void;\n}\n\nexport interface ExtHostThemingShape {\n\t$onColorThemeChange(themeType: string): void;\n}\n\nexport interface MainThreadThemingShape extends IDisposable {\n}\n\nexport interface ExtHostTunnelServiceShape {\n\t$forwardPort(tunnelOptions: TunnelOptions, tunnelCreationOptions: TunnelCreationOptions): Promise<TunnelDto | undefined>;\n\t$closeTunnel(remote: { host: string, port: number }, silent?: boolean): Promise<void>;\n\t$onDidTunnelsChange(): Promise<void>;\n\t$registerCandidateFinder(enable: boolean): Promise<void>;\n\t$applyCandidateFilter(candidates: CandidatePort[]): Promise<CandidatePort[]>;\n\t$providePortAttributes(handles: number[], ports: number[], pid: number | undefined, commandline: string | undefined, cancellationToken: CancellationToken): Promise<ProvidedPortAttributes[]>;\n}\n\nexport interface ExtHostTimelineShape {\n\t$getTimeline(source: string, uri: UriComponents, options: TimelineOptions, token: CancellationToken, internalOptions?: InternalTimelineOptions): Promise<Timeline | undefined>;\n}\n\nexport const enum ExtHostTestingResource {\n\tWorkspace,\n\tTextDocument\n}\n\nexport interface ExtHostTestingShape {\n\t$runTestsForProvider(req: RunTestForProviderRequest, token: CancellationToken): Promise<void>;\n\t$subscribeToTests(resource: ExtHostTestingResource, uri: UriComponents): void;\n\t$unsubscribeFromTests(resource: ExtHostTestingResource, uri: UriComponents): void;\n\t$lookupTest(test: TestIdWithSrc): Promise<InternalTestItem | undefined>;\n\t$acceptDiff(resource: ExtHostTestingResource, uri: UriComponents, diff: TestsDiff): void;\n\t$publishTestResults(results: ISerializedTestResults[]): void;\n\t$expandTest(src: TestIdWithSrc, levels: number): Promise<void>;\n}\n\nexport interface MainThreadTestingShape {\n\t/** Registeres that there's a test controller with the given ID */\n\t$registerTestController(id: string): void;\n\t/** Diposes of the test controller with the given ID */\n\t$unregisterTestController(id: string): void;\n\t/** Requests tests from the given resource/uri, from the observer API. */\n\t$subscribeToDiffs(resource: ExtHostTestingResource, uri: UriComponents): void;\n\t/** Stops requesting tests from the given resource/uri, from the observer API. */\n\t$unsubscribeFromDiffs(resource: ExtHostTestingResource, uri: UriComponents): void;\n\t/** Publishes that new tests were available on the given source. */\n\t$publishDiff(resource: ExtHostTestingResource, uri: UriComponents, diff: TestsDiff): void;\n\t/** Request by an extension to run tests. */\n\t$runTests(req: RunTestsRequest, token: CancellationToken): Promise<string>;\n\n\t// --- test run handling:\n\t/**\n\t * Adds tests to the run. The tests are given in descending depth. The first\n\t * item will be a previously-known test, or a test root.\n\t */\n\t$addTestsToRun(runId: string, tests: ITestItem[]): void;\n\t/** Updates the state of a test run in the given run. */\n\t$updateTestStateInRun(runId: string, taskId: string, testId: string, state: TestResultState, duration?: number): void;\n\t/** Appends a message to a test in the run. */\n\t$appendTestMessageInRun(runId: string, taskId: string, testId: string, message: ITestMessage): void;\n\t/** Appends raw output to the test run.. */\n\t$appendOutputToRun(runId: string, taskId: string, output: VSBuffer): void;\n\t/** Signals a task in a test run started. */\n\t$startedTestRunTask(runId: string, task: ITestRunTask): void;\n\t/** Signals a task in a test run ended. */\n\t$finishedTestRunTask(runId: string, taskId: string): void;\n\t/** Start a new extension-provided test run. */\n\t$startedExtensionTestRun(req: ExtensionRunTestsRequest): void;\n\t/** Signals that an extension-provided test run finished. */\n\t$finishedExtensionTestRun(runId: string): void;\n}\n\n// --- proxy identifiers\n\nexport const MainContext = {\n\tMainThreadAuthentication: createMainId<MainThreadAuthenticationShape>('MainThreadAuthentication'),\n\tMainThreadBulkEdits: createMainId<MainThreadBulkEditsShape>('MainThreadBulkEdits'),\n\tMainThreadClipboard: createMainId<MainThreadClipboardShape>('MainThreadClipboard'),\n\tMainThreadCommands: createMainId<MainThreadCommandsShape>('MainThreadCommands'),\n\tMainThreadComments: createMainId<MainThreadCommentsShape>('MainThreadComments'),\n\tMainThreadConfiguration: createMainId<MainThreadConfigurationShape>('MainThreadConfiguration'),\n\tMainThreadConsole: createMainId<MainThreadConsoleShape>('MainThreadConsole'),\n\tMainThreadDebugService: createMainId<MainThreadDebugServiceShape>('MainThreadDebugService'),\n\tMainThreadDecorations: createMainId<MainThreadDecorationsShape>('MainThreadDecorations'),\n\tMainThreadDiagnostics: createMainId<MainThreadDiagnosticsShape>('MainThreadDiagnostics'),\n\tMainThreadDialogs: createMainId<MainThreadDiaglogsShape>('MainThreadDiaglogs'),\n\tMainThreadDocuments: createMainId<MainThreadDocumentsShape>('MainThreadDocuments'),\n\tMainThreadDocumentContentProviders: createMainId<MainThreadDocumentContentProvidersShape>('MainThreadDocumentContentProviders'),\n\tMainThreadTextEditors: createMainId<MainThreadTextEditorsShape>('MainThreadTextEditors'),\n\tMainThreadEditorInsets: createMainId<MainThreadEditorInsetsShape>('MainThreadEditorInsets'),\n\tMainThreadEditorTabs: createMainId<MainThreadEditorTabsShape>('MainThreadEditorTabs'),\n\tMainThreadErrors: createMainId<MainThreadErrorsShape>('MainThreadErrors'),\n\tMainThreadTreeViews: createMainId<MainThreadTreeViewsShape>('MainThreadTreeViews'),\n\tMainThreadDownloadService: createMainId<MainThreadDownloadServiceShape>('MainThreadDownloadService'),\n\tMainThreadKeytar: createMainId<MainThreadKeytarShape>('MainThreadKeytar'),\n\tMainThreadLanguageFeatures: createMainId<MainThreadLanguageFeaturesShape>('MainThreadLanguageFeatures'),\n\tMainThreadLanguages: createMainId<MainThreadLanguagesShape>('MainThreadLanguages'),\n\tMainThreadLog: createMainId<MainThreadLogShape>('MainThread'),\n\tMainThreadMessageService: createMainId<MainThreadMessageServiceShape>('MainThreadMessageService'),\n\tMainThreadOutputService: createMainId<MainThreadOutputServiceShape>('MainThreadOutputService'),\n\tMainThreadProgress: createMainId<MainThreadProgressShape>('MainThreadProgress'),\n\tMainThreadQuickOpen: createMainId<MainThreadQuickOpenShape>('MainThreadQuickOpen'),\n\tMainThreadStatusBar: createMainId<MainThreadStatusBarShape>('MainThreadStatusBar'),\n\tMainThreadSecretState: createMainId<MainThreadSecretStateShape>('MainThreadSecretState'),\n\tMainThreadStorage: createMainId<MainThreadStorageShape>('MainThreadStorage'),\n\tMainThreadTelemetry: createMainId<MainThreadTelemetryShape>('MainThreadTelemetry'),\n\tMainThreadTerminalService: createMainId<MainThreadTerminalServiceShape>('MainThreadTerminalService'),\n\tMainThreadWebviews: createMainId<MainThreadWebviewsShape>('MainThreadWebviews'),\n\tMainThreadWebviewPanels: createMainId<MainThreadWebviewPanelsShape>('MainThreadWebviewPanels'),\n\tMainThreadWebviewViews: createMainId<MainThreadWebviewViewsShape>('MainThreadWebviewViews'),\n\tMainThreadCustomEditors: createMainId<MainThreadCustomEditorsShape>('MainThreadCustomEditors'),\n\tMainThreadUrls: createMainId<MainThreadUrlsShape>('MainThreadUrls'),\n\tMainThreadUriOpeners: createMainId<MainThreadUriOpenersShape>('MainThreadUriOpeners'),\n\tMainThreadWorkspace: createMainId<MainThreadWorkspaceShape>('MainThreadWorkspace'),\n\tMainThreadFileSystem: createMainId<MainThreadFileSystemShape>('MainThreadFileSystem'),\n\tMainThreadExtensionService: createMainId<MainThreadExtensionServiceShape>('MainThreadExtensionService'),\n\tMainThreadSCM: createMainId<MainThreadSCMShape>('MainThreadSCM'),\n\tMainThreadSearch: createMainId<MainThreadSearchShape>('MainThreadSearch'),\n\tMainThreadTask: createMainId<MainThreadTaskShape>('MainThreadTask'),\n\tMainThreadWindow: createMainId<MainThreadWindowShape>('MainThreadWindow'),\n\tMainThreadLabelService: createMainId<MainThreadLabelServiceShape>('MainThreadLabelService'),\n\tMainThreadNotebook: createMainId<MainThreadNotebookShape>('MainThreadNotebook'),\n\tMainThreadNotebookDocuments: createMainId<MainThreadNotebookDocumentsShape>('MainThreadNotebookDocumentsShape'),\n\tMainThreadNotebookEditors: createMainId<MainThreadNotebookEditorsShape>('MainThreadNotebookEditorsShape'),\n\tMainThreadNotebookKernels: createMainId<MainThreadNotebookKernelsShape>('MainThreadNotebookKernels'),\n\tMainThreadTheming: createMainId<MainThreadThemingShape>('MainThreadTheming'),\n\tMainThreadTunnelService: createMainId<MainThreadTunnelServiceShape>('MainThreadTunnelService'),\n\tMainThreadTimeline: createMainId<MainThreadTimelineShape>('MainThreadTimeline'),\n\tMainThreadTesting: createMainId<MainThreadTestingShape>('MainThreadTesting'),\n};\n\nexport const ExtHostContext = {\n\tExtHostCommands: createExtId<ExtHostCommandsShape>('ExtHostCommands'),\n\tExtHostConfiguration: createExtId<ExtHostConfigurationShape>('ExtHostConfiguration'),\n\tExtHostDiagnostics: createExtId<ExtHostDiagnosticsShape>('ExtHostDiagnostics'),\n\tExtHostDebugService: createExtId<ExtHostDebugServiceShape>('ExtHostDebugService'),\n\tExtHostDecorations: createExtId<ExtHostDecorationsShape>('ExtHostDecorations'),\n\tExtHostDocumentsAndEditors: createExtId<ExtHostDocumentsAndEditorsShape>('ExtHostDocumentsAndEditors'),\n\tExtHostDocuments: createExtId<ExtHostDocumentsShape>('ExtHostDocuments'),\n\tExtHostDocumentContentProviders: createExtId<ExtHostDocumentContentProvidersShape>('ExtHostDocumentContentProviders'),\n\tExtHostDocumentSaveParticipant: createExtId<ExtHostDocumentSaveParticipantShape>('ExtHostDocumentSaveParticipant'),\n\tExtHostEditors: createExtId<ExtHostEditorsShape>('ExtHostEditors'),\n\tExtHostTreeViews: createExtId<ExtHostTreeViewsShape>('ExtHostTreeViews'),\n\tExtHostFileSystem: createExtId<ExtHostFileSystemShape>('ExtHostFileSystem'),\n\tExtHostFileSystemInfo: createExtId<ExtHostFileSystemInfoShape>('ExtHostFileSystemInfo'),\n\tExtHostFileSystemEventService: createExtId<ExtHostFileSystemEventServiceShape>('ExtHostFileSystemEventService'),\n\tExtHostLanguageFeatures: createExtId<ExtHostLanguageFeaturesShape>('ExtHostLanguageFeatures'),\n\tExtHostQuickOpen: createExtId<ExtHostQuickOpenShape>('ExtHostQuickOpen'),\n\tExtHostExtensionService: createExtId<ExtHostExtensionServiceShape>('ExtHostExtensionService'),\n\tExtHostLogService: createExtId<ExtHostLogServiceShape>('ExtHostLogService'),\n\tExtHostTerminalService: createExtId<ExtHostTerminalServiceShape>('ExtHostTerminalService'),\n\tExtHostSCM: createExtId<ExtHostSCMShape>('ExtHostSCM'),\n\tExtHostSearch: createExtId<ExtHostSearchShape>('ExtHostSearch'),\n\tExtHostTask: createExtId<ExtHostTaskShape>('ExtHostTask'),\n\tExtHostWorkspace: createExtId<ExtHostWorkspaceShape>('ExtHostWorkspace'),\n\tExtHostWindow: createExtId<ExtHostWindowShape>('ExtHostWindow'),\n\tExtHostWebviews: createExtId<ExtHostWebviewsShape>('ExtHostWebviews'),\n\tExtHostWebviewPanels: createExtId<ExtHostWebviewPanelsShape>('ExtHostWebviewPanels'),\n\tExtHostCustomEditors: createExtId<ExtHostCustomEditorsShape>('ExtHostCustomEditors'),\n\tExtHostWebviewViews: createExtId<ExtHostWebviewViewsShape>('ExtHostWebviewViews'),\n\tExtHostEditorInsets: createExtId<ExtHostEditorInsetsShape>('ExtHostEditorInsets'),\n\tExtHostEditorTabs: createExtId<IExtHostEditorTabsShape>('ExtHostEditorTabs'),\n\tExtHostProgress: createMainId<ExtHostProgressShape>('ExtHostProgress'),\n\tExtHostComments: createMainId<ExtHostCommentsShape>('ExtHostComments'),\n\tExtHostSecretState: createMainId<ExtHostSecretStateShape>('ExtHostSecretState'),\n\tExtHostStorage: createMainId<ExtHostStorageShape>('ExtHostStorage'),\n\tExtHostUrls: createExtId<ExtHostUrlsShape>('ExtHostUrls'),\n\tExtHostUriOpeners: createExtId<ExtHostUriOpenersShape>('ExtHostUriOpeners'),\n\tExtHostOutputService: createMainId<ExtHostOutputServiceShape>('ExtHostOutputService'),\n\tExtHosLabelService: createMainId<ExtHostLabelServiceShape>('ExtHostLabelService'),\n\tExtHostNotebook: createMainId<ExtHostNotebookShape>('ExtHostNotebook'),\n\tExtHostNotebookKernels: createMainId<ExtHostNotebookKernelsShape>('ExtHostNotebookKernels'),\n\tExtHostTheming: createMainId<ExtHostThemingShape>('ExtHostTheming'),\n\tExtHostTunnelService: createMainId<ExtHostTunnelServiceShape>('ExtHostTunnelService'),\n\tExtHostAuthentication: createMainId<ExtHostAuthenticationShape>('ExtHostAuthentication'),\n\tExtHostTimeline: createMainId<ExtHostTimelineShape>('ExtHostTimeline'),\n\tExtHostTesting: createMainId<ExtHostTestingShape>('ExtHostTesting'),\n\tExtHostTelemetry: createMainId<ExtHostTelemetryShape>('ExtHostTelemetry'),\n};\n"]}