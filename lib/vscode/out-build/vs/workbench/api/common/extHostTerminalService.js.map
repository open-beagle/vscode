{"version":3,"sources":["vs/workbench/api/common/extHostTerminalService.ts"],"names":[],"mappings":"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","file":"extHostTerminalService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type * as vscode from 'vscode';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { ExtHostTerminalServiceShape, MainContext, MainThreadTerminalServiceShape, IShellAndArgsDto, ITerminalDimensionsDto, ITerminalLinkDto, TerminalIdentifier } from 'vs/workbench/api/common/extHost.protocol';\nimport { ExtHostConfigProvider } from 'vs/workbench/api/common/extHostConfiguration';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { URI } from 'vs/base/common/uri';\nimport { IExtHostRpcService } from 'vs/workbench/api/common/extHostRpcService';\nimport { IDisposable, DisposableStore, Disposable } from 'vs/base/common/lifecycle';\nimport { Disposable as VSCodeDisposable, EnvironmentVariableMutatorType } from './extHostTypes';\nimport { IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { localize } from 'vs/nls';\nimport { NotSupportedError } from 'vs/base/common/errors';\nimport { serializeEnvironmentVariableCollection } from 'vs/workbench/contrib/terminal/common/environmentVariableShared';\nimport { CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { generateUuid } from 'vs/base/common/uuid';\nimport { ISerializableEnvironmentVariableCollection } from 'vs/workbench/contrib/terminal/common/environmentVariable';\nimport { IShellLaunchConfigDto, ITerminalChildProcess, ITerminalDimensionsOverride, ITerminalEnvironment, ITerminalLaunchError, TerminalShellType } from 'vs/platform/terminal/common/terminal';\nimport { TerminalDataBufferer } from 'vs/platform/terminal/common/terminalDataBuffering';\nimport { ITerminalProfile } from 'vs/workbench/contrib/terminal/common/terminal';\n\nexport interface IExtHostTerminalService extends ExtHostTerminalServiceShape, IDisposable {\n\n\treadonly _serviceBrand: undefined;\n\n\tactiveTerminal: vscode.Terminal | undefined;\n\tterminals: vscode.Terminal[];\n\n\tonDidCloseTerminal: Event<vscode.Terminal>;\n\tonDidOpenTerminal: Event<vscode.Terminal>;\n\tonDidChangeActiveTerminal: Event<vscode.Terminal | undefined>;\n\tonDidChangeTerminalDimensions: Event<vscode.TerminalDimensionsChangeEvent>;\n\tonDidWriteTerminalData: Event<vscode.TerminalDataWriteEvent>;\n\n\tcreateTerminal(name?: string, shellPath?: string, shellArgs?: string[] | string): vscode.Terminal;\n\tcreateTerminalFromOptions(options: vscode.TerminalOptions, isFeatureTerminal?: boolean): vscode.Terminal;\n\tcreateExtensionTerminal(options: vscode.ExtensionTerminalOptions): vscode.Terminal;\n\tattachPtyToTerminal(id: number, pty: vscode.Pseudoterminal): void;\n\tgetDefaultShell(useAutomationShell: boolean, configProvider: ExtHostConfigProvider): string;\n\tgetDefaultShellArgs(useAutomationShell: boolean, configProvider: ExtHostConfigProvider): string[] | string;\n\tregisterLinkProvider(provider: vscode.TerminalLinkProvider): vscode.Disposable;\n\tgetEnvironmentVariableCollection(extension: IExtensionDescription, persistent?: boolean): vscode.EnvironmentVariableCollection;\n}\n\nexport const IExtHostTerminalService = createDecorator<IExtHostTerminalService>('IExtHostTerminalService');\n\nexport class ExtHostTerminal {\n\tprivate _disposed: boolean = false;\n\tprivate _pidPromise: Promise<number | undefined>;\n\tprivate _cols: number | undefined;\n\tprivate _pidPromiseComplete: ((value: number | undefined) => any) | undefined;\n\tprivate _rows: number | undefined;\n\tprivate _exitStatus: vscode.TerminalExitStatus | undefined;\n\n\tpublic isOpen: boolean = false;\n\n\treadonly value: vscode.Terminal;\n\n\tconstructor(\n\t\tprivate _proxy: MainThreadTerminalServiceShape,\n\t\tpublic _id: TerminalIdentifier,\n\t\tprivate readonly _creationOptions: vscode.TerminalOptions | vscode.ExtensionTerminalOptions,\n\t\tprivate _name?: string,\n\t) {\n\t\tthis._creationOptions = Object.freeze(this._creationOptions);\n\t\tthis._pidPromise = new Promise<number | undefined>(c => this._pidPromiseComplete = c);\n\n\t\tconst that = this;\n\t\tthis.value = {\n\t\t\tget name(): string {\n\t\t\t\treturn that._name || '';\n\t\t\t},\n\t\t\tget processId(): Promise<number | undefined> {\n\t\t\t\treturn that._pidPromise;\n\t\t\t},\n\t\t\tget creationOptions(): Readonly<vscode.TerminalOptions | vscode.ExtensionTerminalOptions> {\n\t\t\t\treturn that._creationOptions;\n\t\t\t},\n\t\t\tget exitStatus(): vscode.TerminalExitStatus | undefined {\n\t\t\t\treturn that._exitStatus;\n\t\t\t},\n\t\t\tsendText(text: string, addNewLine: boolean = true): void {\n\t\t\t\tthat._checkDisposed();\n\t\t\t\tthat._proxy.$sendText(that._id, text, addNewLine);\n\t\t\t},\n\t\t\tshow(preserveFocus: boolean): void {\n\t\t\t\tthat._checkDisposed();\n\t\t\t\tthat._proxy.$show(that._id, preserveFocus);\n\t\t\t},\n\t\t\thide(): void {\n\t\t\t\tthat._checkDisposed();\n\t\t\t\tthat._proxy.$hide(that._id);\n\t\t\t},\n\t\t\tdispose(): void {\n\t\t\t\tif (!that._disposed) {\n\t\t\t\t\tthat._disposed = true;\n\t\t\t\t\tthat._proxy.$dispose(that._id);\n\t\t\t\t}\n\t\t\t},\n\t\t\tget dimensions(): vscode.TerminalDimensions | undefined {\n\t\t\t\tif (that._cols === undefined || that._rows === undefined) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tcolumns: that._cols,\n\t\t\t\t\trows: that._rows\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t}\n\n\tpublic async create(\n\t\tshellPath?: string,\n\t\tshellArgs?: string[] | string,\n\t\tcwd?: string | URI,\n\t\tenv?: ITerminalEnvironment,\n\t\ticon?: string,\n\t\tinitialText?: string,\n\t\twaitOnExit?: boolean,\n\t\tstrictEnv?: boolean,\n\t\thideFromUser?: boolean,\n\t\tisFeatureTerminal?: boolean,\n\t\tisExtensionOwnedTerminal?: boolean\n\t): Promise<void> {\n\t\tif (typeof this._id !== 'string') {\n\t\t\tthrow new Error('Terminal has already been created');\n\t\t}\n\t\tawait this._proxy.$createTerminal(this._id, { name: this._name, shellPath, shellArgs, cwd, env, icon, initialText, waitOnExit, strictEnv, hideFromUser, isFeatureTerminal, isExtensionOwnedTerminal });\n\t}\n\n\tpublic async createExtensionTerminal(): Promise<number> {\n\t\tif (typeof this._id !== 'string') {\n\t\t\tthrow new Error('Terminal has already been created');\n\t\t}\n\t\tawait this._proxy.$createTerminal(this._id, { name: this._name, isExtensionCustomPtyTerminal: true });\n\t\t// At this point, the id has been set via `$acceptTerminalOpened`\n\t\tif (typeof this._id === 'string') {\n\t\t\tthrow new Error('Terminal creation failed');\n\t\t}\n\t\treturn this._id;\n\t}\n\n\tprivate _checkDisposed() {\n\t\tif (this._disposed) {\n\t\t\tthrow new Error('Terminal has already been disposed');\n\t\t}\n\t}\n\n\tpublic set name(name: string) {\n\t\tthis._name = name;\n\t}\n\n\tpublic setExitCode(code: number | undefined) {\n\t\tthis._exitStatus = Object.freeze({ code });\n\t}\n\n\tpublic setDimensions(cols: number, rows: number): boolean {\n\t\tif (cols === this._cols && rows === this._rows) {\n\t\t\t// Nothing changed\n\t\t\treturn false;\n\t\t}\n\t\tif (cols === 0 || rows === 0) {\n\t\t\treturn false;\n\t\t}\n\t\tthis._cols = cols;\n\t\tthis._rows = rows;\n\t\treturn true;\n\t}\n\n\tpublic _setProcessId(processId: number | undefined): void {\n\t\t// The event may fire 2 times when the panel is restored\n\t\tif (this._pidPromiseComplete) {\n\t\t\tthis._pidPromiseComplete(processId);\n\t\t\tthis._pidPromiseComplete = undefined;\n\t\t} else {\n\t\t\t// Recreate the promise if this is the nth processId set (e.g. reused task terminals)\n\t\t\tthis._pidPromise.then(pid => {\n\t\t\t\tif (pid !== processId) {\n\t\t\t\t\tthis._pidPromise = Promise.resolve(processId);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n}\n\nexport class ExtHostPseudoterminal implements ITerminalChildProcess {\n\treadonly id = 0;\n\treadonly shouldPersist = false;\n\n\tprivate readonly _onProcessData = new Emitter<string>();\n\tpublic readonly onProcessData: Event<string> = this._onProcessData.event;\n\tprivate readonly _onProcessExit = new Emitter<number | undefined>();\n\tpublic readonly onProcessExit: Event<number | undefined> = this._onProcessExit.event;\n\tprivate readonly _onProcessReady = new Emitter<{ pid: number, cwd: string }>();\n\tpublic get onProcessReady(): Event<{ pid: number, cwd: string }> { return this._onProcessReady.event; }\n\tprivate readonly _onProcessTitleChanged = new Emitter<string>();\n\tpublic readonly onProcessTitleChanged: Event<string> = this._onProcessTitleChanged.event;\n\tprivate readonly _onProcessOverrideDimensions = new Emitter<ITerminalDimensionsOverride | undefined>();\n\tpublic get onProcessOverrideDimensions(): Event<ITerminalDimensionsOverride | undefined> { return this._onProcessOverrideDimensions.event; }\n\tprivate readonly _onProcessShellTypeChanged = new Emitter<TerminalShellType>();\n\tpublic readonly onProcessShellTypeChanged = this._onProcessShellTypeChanged.event;\n\n\n\tconstructor(private readonly _pty: vscode.Pseudoterminal) { }\n\n\tasync start(): Promise<undefined> {\n\t\treturn undefined;\n\t}\n\n\tshutdown(): void {\n\t\tthis._pty.close();\n\t}\n\n\tinput(data: string): void {\n\t\tif (this._pty.handleInput) {\n\t\t\tthis._pty.handleInput(data);\n\t\t}\n\t}\n\n\tresize(cols: number, rows: number): void {\n\t\tif (this._pty.setDimensions) {\n\t\t\tthis._pty.setDimensions({ columns: cols, rows });\n\t\t}\n\t}\n\n\tasync processBinary(data: string): Promise<void> {\n\t\t// No-op, processBinary is not supported in extextion owned terminals.\n\t}\n\n\tacknowledgeDataEvent(charCount: number): void {\n\t\t// No-op, flow control is not supported in extension owned terminals. If this is ever\n\t\t// implemented it will need new pause and resume VS Code APIs.\n\t}\n\n\tgetInitialCwd(): Promise<string> {\n\t\treturn Promise.resolve('');\n\t}\n\n\tgetCwd(): Promise<string> {\n\t\treturn Promise.resolve('');\n\t}\n\n\tgetLatency(): Promise<number> {\n\t\treturn Promise.resolve(0);\n\t}\n\n\tstartSendingEvents(initialDimensions: ITerminalDimensionsDto | undefined): void {\n\t\t// Attach the listeners\n\t\tthis._pty.onDidWrite(e => this._onProcessData.fire(e));\n\t\tif (this._pty.onDidClose) {\n\t\t\tthis._pty.onDidClose((e: number | void = undefined) => {\n\t\t\t\tthis._onProcessExit.fire(e === void 0 ? undefined : e);\n\t\t\t});\n\t\t}\n\t\tif (this._pty.onDidOverrideDimensions) {\n\t\t\tthis._pty.onDidOverrideDimensions(e => this._onProcessOverrideDimensions.fire(e ? { cols: e.columns, rows: e.rows } : e));\n\t\t}\n\n\t\tthis._pty.open(initialDimensions ? initialDimensions : undefined);\n\n\t\tif (this._pty.setDimensions && initialDimensions) {\n\t\t\tthis._pty.setDimensions(initialDimensions);\n\t\t}\n\n\t\tthis._onProcessReady.fire({ pid: -1, cwd: '' });\n\t}\n}\n\nlet nextLinkId = 1;\n\ninterface ICachedLinkEntry {\n\tprovider: vscode.TerminalLinkProvider;\n\tlink: vscode.TerminalLink;\n}\n\nexport abstract class BaseExtHostTerminalService extends Disposable implements IExtHostTerminalService, ExtHostTerminalServiceShape {\n\n\treadonly _serviceBrand: undefined;\n\n\tprotected _proxy: MainThreadTerminalServiceShape;\n\tprotected _activeTerminal: ExtHostTerminal | undefined;\n\tprotected _terminals: ExtHostTerminal[] = [];\n\tprotected _terminalProcesses: Map<number, ITerminalChildProcess> = new Map();\n\tprotected _terminalProcessDisposables: { [id: number]: IDisposable } = {};\n\tprotected _extensionTerminalAwaitingStart: { [id: number]: { initialDimensions: ITerminalDimensionsDto | undefined } | undefined } = {};\n\tprotected _getTerminalPromises: { [id: number]: Promise<ExtHostTerminal | undefined> } = {};\n\tprotected _environmentVariableCollections: Map<string, EnvironmentVariableCollection> = new Map();\n\n\tprivate readonly _bufferer: TerminalDataBufferer;\n\tprivate readonly _linkProviders: Set<vscode.TerminalLinkProvider> = new Set();\n\tprivate readonly _terminalLinkCache: Map<number, Map<number, ICachedLinkEntry>> = new Map();\n\tprivate readonly _terminalLinkCancellationSource: Map<number, CancellationTokenSource> = new Map();\n\n\tpublic get activeTerminal(): vscode.Terminal | undefined { return this._activeTerminal?.value; }\n\tpublic get terminals(): vscode.Terminal[] { return this._terminals.map(term => term.value); }\n\n\tprotected readonly _onDidCloseTerminal: Emitter<vscode.Terminal> = new Emitter<vscode.Terminal>();\n\tpublic get onDidCloseTerminal(): Event<vscode.Terminal> { return this._onDidCloseTerminal && this._onDidCloseTerminal.event; }\n\tprotected readonly _onDidOpenTerminal: Emitter<vscode.Terminal> = new Emitter<vscode.Terminal>();\n\tpublic get onDidOpenTerminal(): Event<vscode.Terminal> { return this._onDidOpenTerminal && this._onDidOpenTerminal.event; }\n\tprotected readonly _onDidChangeActiveTerminal: Emitter<vscode.Terminal | undefined> = new Emitter<vscode.Terminal | undefined>();\n\tpublic get onDidChangeActiveTerminal(): Event<vscode.Terminal | undefined> { return this._onDidChangeActiveTerminal && this._onDidChangeActiveTerminal.event; }\n\tprotected readonly _onDidChangeTerminalDimensions: Emitter<vscode.TerminalDimensionsChangeEvent> = new Emitter<vscode.TerminalDimensionsChangeEvent>();\n\tpublic get onDidChangeTerminalDimensions(): Event<vscode.TerminalDimensionsChangeEvent> { return this._onDidChangeTerminalDimensions && this._onDidChangeTerminalDimensions.event; }\n\tprotected readonly _onDidWriteTerminalData: Emitter<vscode.TerminalDataWriteEvent>;\n\tpublic get onDidWriteTerminalData(): Event<vscode.TerminalDataWriteEvent> { return this._onDidWriteTerminalData && this._onDidWriteTerminalData.event; }\n\n\tconstructor(\n\t\tsupportsProcesses: boolean,\n\t\t@IExtHostRpcService extHostRpc: IExtHostRpcService\n\t) {\n\t\tsuper();\n\t\tthis._proxy = extHostRpc.getProxy(MainContext.MainThreadTerminalService);\n\t\tthis._bufferer = new TerminalDataBufferer(this._proxy.$sendProcessData);\n\t\tthis._onDidWriteTerminalData = new Emitter<vscode.TerminalDataWriteEvent>({\n\t\t\tonFirstListenerAdd: () => this._proxy.$startSendingDataEvents(),\n\t\t\tonLastListenerRemove: () => this._proxy.$stopSendingDataEvents()\n\t\t});\n\t\tthis._proxy.$registerProcessSupport(supportsProcesses);\n\t\tthis._register({\n\t\t\tdispose: () => {\n\t\t\t\tfor (const [_, terminalProcess] of this._terminalProcesses) {\n\t\t\t\t\tterminalProcess.shutdown(true);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic abstract createTerminal(name?: string, shellPath?: string, shellArgs?: string[] | string): vscode.Terminal;\n\tpublic abstract createTerminalFromOptions(options: vscode.TerminalOptions): vscode.Terminal;\n\tpublic abstract getDefaultShell(useAutomationShell: boolean, configProvider: ExtHostConfigProvider): string;\n\tpublic abstract getDefaultShellArgs(useAutomationShell: boolean, configProvider: ExtHostConfigProvider): string[] | string;\n\tpublic abstract $getAvailableProfiles(configuredProfilesOnly: boolean): Promise<ITerminalProfile[]>;\n\tpublic abstract $getDefaultShellAndArgs(useAutomationShell: boolean): Promise<IShellAndArgsDto>;\n\n\tpublic createExtensionTerminal(options: vscode.ExtensionTerminalOptions): vscode.Terminal {\n\t\tconst terminal = new ExtHostTerminal(this._proxy, generateUuid(), options, options.name);\n\t\tconst p = new ExtHostPseudoterminal(options.pty);\n\t\tterminal.createExtensionTerminal().then(id => {\n\t\t\tconst disposable = this._setupExtHostProcessListeners(id, p);\n\t\t\tthis._terminalProcessDisposables[id] = disposable;\n\t\t});\n\t\tthis._terminals.push(terminal);\n\t\treturn terminal.value;\n\t}\n\n\tpublic attachPtyToTerminal(id: number, pty: vscode.Pseudoterminal): void {\n\t\tconst terminal = this._getTerminalById(id);\n\t\tif (!terminal) {\n\t\t\tthrow new Error(`Cannot resolve terminal with id ${id} for virtual process`);\n\t\t}\n\t\tconst p = new ExtHostPseudoterminal(pty);\n\t\tconst disposable = this._setupExtHostProcessListeners(id, p);\n\t\tthis._terminalProcessDisposables[id] = disposable;\n\t}\n\n\tpublic async $acceptActiveTerminalChanged(id: number | null): Promise<void> {\n\t\tconst original = this._activeTerminal;\n\t\tif (id === null) {\n\t\t\tthis._activeTerminal = undefined;\n\t\t\tif (original !== this._activeTerminal) {\n\t\t\t\tthis._onDidChangeActiveTerminal.fire(this._activeTerminal);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tconst terminal = this._getTerminalById(id);\n\t\tif (terminal) {\n\t\t\tthis._activeTerminal = terminal;\n\t\t\tif (original !== this._activeTerminal) {\n\t\t\t\tthis._onDidChangeActiveTerminal.fire(this._activeTerminal.value);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic async $acceptTerminalProcessData(id: number, data: string): Promise<void> {\n\t\tconst terminal = this._getTerminalById(id);\n\t\tif (terminal) {\n\t\t\tthis._onDidWriteTerminalData.fire({ terminal: terminal.value, data });\n\t\t}\n\t}\n\n\tpublic async $acceptTerminalDimensions(id: number, cols: number, rows: number): Promise<void> {\n\t\tconst terminal = this._getTerminalById(id);\n\t\tif (terminal) {\n\t\t\tif (terminal.setDimensions(cols, rows)) {\n\t\t\t\tthis._onDidChangeTerminalDimensions.fire({\n\t\t\t\t\tterminal: terminal.value,\n\t\t\t\t\tdimensions: terminal.value.dimensions as vscode.TerminalDimensions\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic async $acceptTerminalMaximumDimensions(id: number, cols: number, rows: number): Promise<void> {\n\t\t// Extension pty terminal only - when virtual process resize fires it means that the\n\t\t// terminal's maximum dimensions changed\n\t\tthis._terminalProcesses.get(id)?.resize(cols, rows);\n\t}\n\n\tpublic async $acceptTerminalTitleChange(id: number, name: string): Promise<void> {\n\t\tconst terminal = this._getTerminalById(id);\n\t\tif (terminal) {\n\t\t\tterminal.name = name;\n\t\t}\n\t}\n\n\tpublic async $acceptTerminalClosed(id: number, exitCode: number | undefined): Promise<void> {\n\t\tconst index = this._getTerminalObjectIndexById(this._terminals, id);\n\t\tif (index !== null) {\n\t\t\tconst terminal = this._terminals.splice(index, 1)[0];\n\t\t\tterminal.setExitCode(exitCode);\n\t\t\tthis._onDidCloseTerminal.fire(terminal.value);\n\t\t}\n\t}\n\n\tpublic $acceptTerminalOpened(id: number, extHostTerminalId: string | undefined, name: string, shellLaunchConfigDto: IShellLaunchConfigDto): void {\n\t\tif (extHostTerminalId) {\n\t\t\t// Resolve with the renderer generated id\n\t\t\tconst index = this._getTerminalObjectIndexById(this._terminals, extHostTerminalId);\n\t\t\tif (index !== null) {\n\t\t\t\t// The terminal has already been created (via createTerminal*), only fire the event\n\t\t\t\tthis._terminals[index]._id = id;\n\t\t\t\tthis._onDidOpenTerminal.fire(this.terminals[index]);\n\t\t\t\tthis._terminals[index].isOpen = true;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tconst creationOptions: vscode.TerminalOptions = {\n\t\t\tname: shellLaunchConfigDto.name,\n\t\t\tshellPath: shellLaunchConfigDto.executable,\n\t\t\tshellArgs: shellLaunchConfigDto.args,\n\t\t\tcwd: typeof shellLaunchConfigDto.cwd === 'string' ? shellLaunchConfigDto.cwd : URI.revive(shellLaunchConfigDto.cwd),\n\t\t\tenv: shellLaunchConfigDto.env,\n\t\t\thideFromUser: shellLaunchConfigDto.hideFromUser\n\t\t};\n\t\tconst terminal = new ExtHostTerminal(this._proxy, id, creationOptions, name);\n\t\tthis._terminals.push(terminal);\n\t\tthis._onDidOpenTerminal.fire(terminal.value);\n\t\tterminal.isOpen = true;\n\t}\n\n\tpublic async $acceptTerminalProcessId(id: number, processId: number): Promise<void> {\n\t\tconst terminal = this._getTerminalById(id);\n\t\tif (terminal) {\n\t\t\tterminal._setProcessId(processId);\n\t\t}\n\t}\n\n\tpublic async $startExtensionTerminal(id: number, initialDimensions: ITerminalDimensionsDto | undefined): Promise<ITerminalLaunchError | undefined> {\n\t\t// Make sure the ExtHostTerminal exists so onDidOpenTerminal has fired before we call\n\t\t// Pseudoterminal.start\n\t\tconst terminal = this._getTerminalById(id);\n\t\tif (!terminal) {\n\t\t\treturn { message: localize('launchFail.idMissingOnExtHost', \"Could not find the terminal with id {0} on the extension host\", id) };\n\t\t}\n\n\t\t// Wait for onDidOpenTerminal to fire\n\t\tif (!terminal.isOpen) {\n\t\t\tawait new Promise<void>(r => {\n\t\t\t\t// Ensure open is called after onDidOpenTerminal\n\t\t\t\tconst listener = this.onDidOpenTerminal(async e => {\n\t\t\t\t\tif (e === terminal.value) {\n\t\t\t\t\t\tlistener.dispose();\n\t\t\t\t\t\tr();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tconst terminalProcess = this._terminalProcesses.get(id);\n\t\tif (terminalProcess) {\n\t\t\t(terminalProcess as ExtHostPseudoterminal).startSendingEvents(initialDimensions);\n\t\t} else {\n\t\t\t// Defer startSendingEvents call to when _setupExtHostProcessListeners is called\n\t\t\tthis._extensionTerminalAwaitingStart[id] = { initialDimensions };\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprotected _setupExtHostProcessListeners(id: number, p: ITerminalChildProcess): IDisposable {\n\t\tconst disposables = new DisposableStore();\n\n\t\tdisposables.add(p.onProcessReady((e: { pid: number, cwd: string }) => this._proxy.$sendProcessReady(id, e.pid, e.cwd)));\n\t\tdisposables.add(p.onProcessTitleChanged(title => this._proxy.$sendProcessTitle(id, title)));\n\n\t\t// Buffer data events to reduce the amount of messages going to the renderer\n\t\tthis._bufferer.startBuffering(id, p.onProcessData);\n\t\tdisposables.add(p.onProcessExit(exitCode => this._onProcessExit(id, exitCode)));\n\n\t\tif (p.onProcessOverrideDimensions) {\n\t\t\tdisposables.add(p.onProcessOverrideDimensions(e => this._proxy.$sendOverrideDimensions(id, e)));\n\t\t}\n\t\tthis._terminalProcesses.set(id, p);\n\n\t\tconst awaitingStart = this._extensionTerminalAwaitingStart[id];\n\t\tif (awaitingStart && p instanceof ExtHostPseudoterminal) {\n\t\t\tp.startSendingEvents(awaitingStart.initialDimensions);\n\t\t\tdelete this._extensionTerminalAwaitingStart[id];\n\t\t}\n\n\t\treturn disposables;\n\t}\n\n\tpublic $acceptProcessAckDataEvent(id: number, charCount: number): void {\n\t\tthis._terminalProcesses.get(id)?.acknowledgeDataEvent(charCount);\n\t}\n\n\tpublic $acceptProcessInput(id: number, data: string): void {\n\t\tthis._terminalProcesses.get(id)?.input(data);\n\t}\n\n\tpublic $acceptProcessResize(id: number, cols: number, rows: number): void {\n\t\ttry {\n\t\t\tthis._terminalProcesses.get(id)?.resize(cols, rows);\n\t\t} catch (error) {\n\t\t\t// We tried to write to a closed pipe / channel.\n\t\t\tif (error.code !== 'EPIPE' && error.code !== 'ERR_IPC_CHANNEL_CLOSED') {\n\t\t\t\tthrow (error);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic $acceptProcessShutdown(id: number, immediate: boolean): void {\n\t\tthis._terminalProcesses.get(id)?.shutdown(immediate);\n\t}\n\n\tpublic $acceptProcessRequestInitialCwd(id: number): void {\n\t\tthis._terminalProcesses.get(id)?.getInitialCwd().then(initialCwd => this._proxy.$sendProcessInitialCwd(id, initialCwd));\n\t}\n\n\tpublic $acceptProcessRequestCwd(id: number): void {\n\t\tthis._terminalProcesses.get(id)?.getCwd().then(cwd => this._proxy.$sendProcessCwd(id, cwd));\n\t}\n\n\tpublic $acceptProcessRequestLatency(id: number): number {\n\t\treturn id;\n\t}\n\n\tpublic registerLinkProvider(provider: vscode.TerminalLinkProvider): vscode.Disposable {\n\t\tthis._linkProviders.add(provider);\n\t\tif (this._linkProviders.size === 1) {\n\t\t\tthis._proxy.$startLinkProvider();\n\t\t}\n\t\treturn new VSCodeDisposable(() => {\n\t\t\tthis._linkProviders.delete(provider);\n\t\t\tif (this._linkProviders.size === 0) {\n\t\t\t\tthis._proxy.$stopLinkProvider();\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic async $provideLinks(terminalId: number, line: string): Promise<ITerminalLinkDto[]> {\n\t\tconst terminal = this._getTerminalById(terminalId);\n\t\tif (!terminal) {\n\t\t\treturn [];\n\t\t}\n\n\t\t// Discard any cached links the terminal has been holding, currently all links are released\n\t\t// when new links are provided.\n\t\tthis._terminalLinkCache.delete(terminalId);\n\n\t\tconst oldToken = this._terminalLinkCancellationSource.get(terminalId);\n\t\tif (oldToken) {\n\t\t\toldToken.dispose(true);\n\t\t}\n\t\tconst cancellationSource = new CancellationTokenSource();\n\t\tthis._terminalLinkCancellationSource.set(terminalId, cancellationSource);\n\n\t\tconst result: ITerminalLinkDto[] = [];\n\t\tconst context: vscode.TerminalLinkContext = { terminal: terminal.value, line };\n\t\tconst promises: vscode.ProviderResult<{ provider: vscode.TerminalLinkProvider, links: vscode.TerminalLink[] }>[] = [];\n\n\t\tfor (const provider of this._linkProviders) {\n\t\t\tpromises.push(new Promise(async r => {\n\t\t\t\tcancellationSource.token.onCancellationRequested(() => r({ provider, links: [] }));\n\t\t\t\tconst links = (await provider.provideTerminalLinks(context, cancellationSource.token)) || [];\n\t\t\t\tif (!cancellationSource.token.isCancellationRequested) {\n\t\t\t\t\tr({ provider, links });\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\n\t\tconst provideResults = await Promise.all(promises);\n\n\t\tif (cancellationSource.token.isCancellationRequested) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst cacheLinkMap = new Map<number, ICachedLinkEntry>();\n\t\tfor (const provideResult of provideResults) {\n\t\t\tif (provideResult && provideResult.links.length > 0) {\n\t\t\t\tresult.push(...provideResult.links.map(providerLink => {\n\t\t\t\t\tconst link = {\n\t\t\t\t\t\tid: nextLinkId++,\n\t\t\t\t\t\tstartIndex: providerLink.startIndex,\n\t\t\t\t\t\tlength: providerLink.length,\n\t\t\t\t\t\tlabel: providerLink.tooltip\n\t\t\t\t\t};\n\t\t\t\t\tcacheLinkMap.set(link.id, {\n\t\t\t\t\t\tprovider: provideResult.provider,\n\t\t\t\t\t\tlink: providerLink\n\t\t\t\t\t});\n\t\t\t\t\treturn link;\n\t\t\t\t}));\n\t\t\t}\n\t\t}\n\n\t\tthis._terminalLinkCache.set(terminalId, cacheLinkMap);\n\n\t\treturn result;\n\t}\n\n\t$activateLink(terminalId: number, linkId: number): void {\n\t\tconst cachedLink = this._terminalLinkCache.get(terminalId)?.get(linkId);\n\t\tif (!cachedLink) {\n\t\t\treturn;\n\t\t}\n\t\tcachedLink.provider.handleTerminalLink(cachedLink.link);\n\t}\n\n\tprivate _onProcessExit(id: number, exitCode: number | undefined): void {\n\t\tthis._bufferer.stopBuffering(id);\n\n\t\t// Remove process reference\n\t\tthis._terminalProcesses.delete(id);\n\t\tdelete this._extensionTerminalAwaitingStart[id];\n\n\t\t// Clean up process disposables\n\t\tconst processDiposable = this._terminalProcessDisposables[id];\n\t\tif (processDiposable) {\n\t\t\tprocessDiposable.dispose();\n\t\t\tdelete this._terminalProcessDisposables[id];\n\t\t}\n\n\t\t// Send exit event to main side\n\t\tthis._proxy.$sendProcessExit(id, exitCode);\n\t}\n\n\tprivate _getTerminalById(id: number): ExtHostTerminal | null {\n\t\treturn this._getTerminalObjectById(this._terminals, id);\n\t}\n\n\tprivate _getTerminalObjectById<T extends ExtHostTerminal>(array: T[], id: number): T | null {\n\t\tconst index = this._getTerminalObjectIndexById(array, id);\n\t\treturn index !== null ? array[index] : null;\n\t}\n\n\tprivate _getTerminalObjectIndexById<T extends ExtHostTerminal>(array: T[], id: TerminalIdentifier): number | null {\n\t\tlet index: number | null = null;\n\t\tarray.some((item, i) => {\n\t\t\tconst thisId = item._id;\n\t\t\tif (thisId === id) {\n\t\t\t\tindex = i;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t});\n\t\treturn index;\n\t}\n\n\tpublic getEnvironmentVariableCollection(extension: IExtensionDescription): vscode.EnvironmentVariableCollection {\n\t\tlet collection = this._environmentVariableCollections.get(extension.identifier.value);\n\t\tif (!collection) {\n\t\t\tcollection = new EnvironmentVariableCollection();\n\t\t\tthis._setEnvironmentVariableCollection(extension.identifier.value, collection);\n\t\t}\n\t\treturn collection;\n\t}\n\n\tprivate _syncEnvironmentVariableCollection(extensionIdentifier: string, collection: EnvironmentVariableCollection): void {\n\t\tconst serialized = serializeEnvironmentVariableCollection(collection.map);\n\t\tthis._proxy.$setEnvironmentVariableCollection(extensionIdentifier, collection.persistent, serialized.length === 0 ? undefined : serialized);\n\t}\n\n\tpublic $initEnvironmentVariableCollections(collections: [string, ISerializableEnvironmentVariableCollection][]): void {\n\t\tcollections.forEach(entry => {\n\t\t\tconst extensionIdentifier = entry[0];\n\t\t\tconst collection = new EnvironmentVariableCollection(entry[1]);\n\t\t\tthis._setEnvironmentVariableCollection(extensionIdentifier, collection);\n\t\t});\n\t}\n\n\tprivate _setEnvironmentVariableCollection(extensionIdentifier: string, collection: EnvironmentVariableCollection): void {\n\t\tthis._environmentVariableCollections.set(extensionIdentifier, collection);\n\t\tcollection.onDidChangeCollection(() => {\n\t\t\t// When any collection value changes send this immediately, this is done to ensure\n\t\t\t// following calls to createTerminal will be created with the new environment. It will\n\t\t\t// result in more noise by sending multiple updates when called but collections are\n\t\t\t// expected to be small.\n\t\t\tthis._syncEnvironmentVariableCollection(extensionIdentifier, collection!);\n\t\t});\n\t}\n}\n\nexport class EnvironmentVariableCollection implements vscode.EnvironmentVariableCollection {\n\treadonly map: Map<string, vscode.EnvironmentVariableMutator> = new Map();\n\tprivate _persistent: boolean = true;\n\n\tpublic get persistent(): boolean { return this._persistent; }\n\tpublic set persistent(value: boolean) {\n\t\tthis._persistent = value;\n\t\tthis._onDidChangeCollection.fire();\n\t}\n\n\tprotected readonly _onDidChangeCollection: Emitter<void> = new Emitter<void>();\n\tget onDidChangeCollection(): Event<void> { return this._onDidChangeCollection && this._onDidChangeCollection.event; }\n\n\tconstructor(\n\t\tserialized?: ISerializableEnvironmentVariableCollection\n\t) {\n\t\tthis.map = new Map(serialized);\n\t}\n\n\tget size(): number {\n\t\treturn this.map.size;\n\t}\n\n\treplace(variable: string, value: string): void {\n\t\tthis._setIfDiffers(variable, { value, type: EnvironmentVariableMutatorType.Replace });\n\t}\n\n\tappend(variable: string, value: string): void {\n\t\tthis._setIfDiffers(variable, { value, type: EnvironmentVariableMutatorType.Append });\n\t}\n\n\tprepend(variable: string, value: string): void {\n\t\tthis._setIfDiffers(variable, { value, type: EnvironmentVariableMutatorType.Prepend });\n\t}\n\n\tprivate _setIfDiffers(variable: string, mutator: vscode.EnvironmentVariableMutator): void {\n\t\tconst current = this.map.get(variable);\n\t\tif (!current || current.value !== mutator.value || current.type !== mutator.type) {\n\t\t\tthis.map.set(variable, mutator);\n\t\t\tthis._onDidChangeCollection.fire();\n\t\t}\n\t}\n\n\tget(variable: string): vscode.EnvironmentVariableMutator | undefined {\n\t\treturn this.map.get(variable);\n\t}\n\n\tforEach(callback: (variable: string, mutator: vscode.EnvironmentVariableMutator, collection: vscode.EnvironmentVariableCollection) => any, thisArg?: any): void {\n\t\tthis.map.forEach((value, key) => callback.call(thisArg, key, value, this));\n\t}\n\n\tdelete(variable: string): void {\n\t\tthis.map.delete(variable);\n\t\tthis._onDidChangeCollection.fire();\n\t}\n\n\tclear(): void {\n\t\tthis.map.clear();\n\t\tthis._onDidChangeCollection.fire();\n\t}\n}\n\nexport class WorkerExtHostTerminalService extends BaseExtHostTerminalService {\n\tconstructor(\n\t\t@IExtHostRpcService extHostRpc: IExtHostRpcService\n\t) {\n\t\tsuper(false, extHostRpc);\n\t}\n\n\tpublic createTerminal(name?: string, shellPath?: string, shellArgs?: string[] | string): vscode.Terminal {\n\t\tthrow new NotSupportedError();\n\t}\n\n\tpublic createTerminalFromOptions(options: vscode.TerminalOptions): vscode.Terminal {\n\t\tthrow new NotSupportedError();\n\t}\n\n\tpublic getDefaultShell(useAutomationShell: boolean, configProvider: ExtHostConfigProvider): string {\n\t\tthrow new NotSupportedError();\n\t}\n\n\tpublic getDefaultShellArgs(useAutomationShell: boolean, configProvider: ExtHostConfigProvider): string[] | string {\n\t\tthrow new NotSupportedError();\n\t}\n\n\tpublic $getAvailableProfiles(configuredProfilesOnly: boolean): Promise<ITerminalProfile[]> {\n\t\tthrow new NotSupportedError();\n\t}\n\n\tpublic async $getDefaultShellAndArgs(useAutomationShell: boolean): Promise<IShellAndArgsDto> {\n\t\tthrow new NotSupportedError();\n\t}\n}\n"]}