{"version":3,"file":"extHostSearch.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/api/common/extHostSearch.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport type * as vscode from 'vscode';\nimport { ExtHostSearchShape, MainThreadSearchShape, MainContext } from '../common/extHost.protocol';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { FileSearchManager } from 'vs/workbench/services/search/common/fileSearchManager';\nimport { IExtHostRpcService } from 'vs/workbench/api/common/extHostRpcService';\nimport { IURITransformerService } from 'vs/workbench/api/common/extHostUriTransformerService';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IRawFileQuery, ISearchCompleteStats, IFileQuery, IRawTextQuery, IRawQuery, ITextQuery, IFolderQuery } from 'vs/workbench/services/search/common/search';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { TextSearchManager } from 'vs/workbench/services/search/common/textSearchManager';\n\nexport interface IExtHostSearch extends ExtHostSearchShape {\n\tregisterTextSearchProvider(scheme: string, provider: vscode.TextSearchProvider): IDisposable;\n\tregisterFileSearchProvider(scheme: string, provider: vscode.FileSearchProvider): IDisposable;\n}\n\nexport const IExtHostSearch = createDecorator<IExtHostSearch>('IExtHostSearch');\n\nexport class ExtHostSearch implements ExtHostSearchShape {\n\n\tprotected readonly _proxy: MainThreadSearchShape = this.extHostRpc.getProxy(MainContext.MainThreadSearch);\n\tprotected _handlePool: number = 0;\n\n\tprivate readonly _textSearchProvider = new Map<number, vscode.TextSearchProvider>();\n\tprivate readonly _textSearchUsedSchemes = new Set<string>();\n\tprivate readonly _fileSearchProvider = new Map<number, vscode.FileSearchProvider>();\n\tprivate readonly _fileSearchUsedSchemes = new Set<string>();\n\n\tprivate readonly _fileSearchManager = new FileSearchManager();\n\n\tconstructor(\n\t\t@IExtHostRpcService private extHostRpc: IExtHostRpcService,\n\t\t@IURITransformerService protected _uriTransformer: IURITransformerService,\n\t\t@ILogService protected _logService: ILogService\n\t) { }\n\n\tprotected _transformScheme(scheme: string): string {\n\t\treturn this._uriTransformer.transformOutgoingScheme(scheme);\n\t}\n\n\tregisterTextSearchProvider(scheme: string, provider: vscode.TextSearchProvider): IDisposable {\n\t\tif (this._textSearchUsedSchemes.has(scheme)) {\n\t\t\tthrow new Error(`a text search provider for the scheme '${scheme}' is already registered`);\n\t\t}\n\n\t\tthis._textSearchUsedSchemes.add(scheme);\n\t\tconst handle = this._handlePool++;\n\t\tthis._textSearchProvider.set(handle, provider);\n\t\tthis._proxy.$registerTextSearchProvider(handle, this._transformScheme(scheme));\n\t\treturn toDisposable(() => {\n\t\t\tthis._textSearchUsedSchemes.delete(scheme);\n\t\t\tthis._textSearchProvider.delete(handle);\n\t\t\tthis._proxy.$unregisterProvider(handle);\n\t\t});\n\t}\n\n\tregisterFileSearchProvider(scheme: string, provider: vscode.FileSearchProvider): IDisposable {\n\t\tif (this._fileSearchUsedSchemes.has(scheme)) {\n\t\t\tthrow new Error(`a file search provider for the scheme '${scheme}' is already registered`);\n\t\t}\n\n\t\tthis._fileSearchUsedSchemes.add(scheme);\n\t\tconst handle = this._handlePool++;\n\t\tthis._fileSearchProvider.set(handle, provider);\n\t\tthis._proxy.$registerFileSearchProvider(handle, this._transformScheme(scheme));\n\t\treturn toDisposable(() => {\n\t\t\tthis._fileSearchUsedSchemes.delete(scheme);\n\t\t\tthis._fileSearchProvider.delete(handle);\n\t\t\tthis._proxy.$unregisterProvider(handle);\n\t\t});\n\t}\n\n\t$provideFileSearchResults(handle: number, session: number, rawQuery: IRawFileQuery, token: vscode.CancellationToken): Promise<ISearchCompleteStats> {\n\t\tconst query = reviveQuery(rawQuery);\n\t\tconst provider = this._fileSearchProvider.get(handle);\n\t\tif (provider) {\n\t\t\treturn this._fileSearchManager.fileSearch(query, provider, batch => {\n\t\t\t\tthis._proxy.$handleFileMatch(handle, session, batch.map(p => p.resource));\n\t\t\t}, token);\n\t\t} else {\n\t\t\tthrow new Error('unknown provider: ' + handle);\n\t\t}\n\t}\n\n\t$clearCache(cacheKey: string): Promise<void> {\n\t\tthis._fileSearchManager.clearCache(cacheKey);\n\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\t$provideTextSearchResults(handle: number, session: number, rawQuery: IRawTextQuery, token: vscode.CancellationToken): Promise<ISearchCompleteStats> {\n\t\tconst provider = this._textSearchProvider.get(handle);\n\t\tif (!provider || !provider.provideTextSearchResults) {\n\t\t\tthrow new Error(`Unknown provider ${handle}`);\n\t\t}\n\n\t\tconst query = reviveQuery(rawQuery);\n\t\tconst engine = this.createTextSearchManager(query, provider);\n\t\treturn engine.search(progress => this._proxy.$handleTextMatch(handle, session, progress), token);\n\t}\n\n\tprotected createTextSearchManager(query: ITextQuery, provider: vscode.TextSearchProvider): TextSearchManager {\n\t\treturn new TextSearchManager(query, provider, {\n\t\t\treaddir: resource => Promise.resolve([]), // TODO@rob implement\n\t\t\ttoCanonicalName: encoding => encoding\n\t\t});\n\t}\n}\n\nexport function reviveQuery<U extends IRawQuery>(rawQuery: U): U extends IRawTextQuery ? ITextQuery : IFileQuery {\n\treturn {\n\t\t...<any>rawQuery, // TODO@rob ???\n\t\t...{\n\t\t\tfolderQueries: rawQuery.folderQueries && rawQuery.folderQueries.map(reviveFolderQuery),\n\t\t\textraFileResources: rawQuery.extraFileResources && rawQuery.extraFileResources.map(components => URI.revive(components))\n\t\t}\n\t};\n}\n\nfunction reviveFolderQuery(rawFolderQuery: IFolderQuery<UriComponents>): IFolderQuery<URI> {\n\treturn {\n\t\t...rawFolderQuery,\n\t\tfolder: URI.revive(rawFolderQuery.folder)\n\t};\n}\n"]}