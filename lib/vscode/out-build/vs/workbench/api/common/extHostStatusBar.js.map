{"version":3,"sources":["vs/workbench/api/common/extHostStatusBar.ts"],"names":[],"mappings":"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","file":"extHostStatusBar.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { StatusbarAlignment as MainThreadStatusBarAlignment } from 'vs/workbench/services/statusbar/common/statusbar';\nimport { StatusBarAlignment as ExtHostStatusBarAlignment, Disposable, ThemeColor } from './extHostTypes';\nimport type * as vscode from 'vscode';\nimport { MainContext, MainThreadStatusBarShape, IMainContext, ICommandDto } from './extHost.protocol';\nimport { localize } from 'vs/nls';\nimport { CommandsConverter } from 'vs/workbench/api/common/extHostCommands';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\n\nexport class ExtHostStatusBarEntry implements vscode.StatusBarItem {\n\tprivate static ID_GEN = 0;\n\n\tprivate static ALLOWED_BACKGROUND_COLORS = new Map<string, ThemeColor>(\n\t\t[['statusBarItem.errorBackground', new ThemeColor('statusBarItem.errorForeground')]]\n\t);\n\n\t#proxy: MainThreadStatusBarShape;\n\t#commands: CommandsConverter;\n\n\tprivate _id: number;\n\tprivate _alignment: number;\n\tprivate _priority?: number;\n\tprivate _disposed: boolean = false;\n\tprivate _visible: boolean = false;\n\n\tprivate _statusId: string;\n\tprivate _statusName: string;\n\n\tprivate _text: string = '';\n\tprivate _tooltip?: string;\n\tprivate _color?: string | ThemeColor;\n\tprivate _backgroundColor?: ThemeColor;\n\tprivate readonly _internalCommandRegistration = new DisposableStore();\n\tprivate _command?: {\n\t\treadonly fromApi: string | vscode.Command,\n\t\treadonly internal: ICommandDto,\n\t};\n\n\tprivate _timeoutHandle: any;\n\tprivate _accessibilityInformation?: vscode.AccessibilityInformation;\n\n\tconstructor(proxy: MainThreadStatusBarShape, commands: CommandsConverter, id: string, name: string, alignment: ExtHostStatusBarAlignment = ExtHostStatusBarAlignment.Left, priority?: number, accessibilityInformation?: vscode.AccessibilityInformation) {\n\t\tthis.#proxy = proxy;\n\t\tthis.#commands = commands;\n\n\t\tthis._id = ExtHostStatusBarEntry.ID_GEN++;\n\t\tthis._statusId = id;\n\t\tthis._statusName = name;\n\t\tthis._alignment = alignment;\n\t\tthis._priority = priority;\n\t\tthis._accessibilityInformation = accessibilityInformation;\n\t}\n\n\tpublic get id(): number {\n\t\treturn this._id;\n\t}\n\n\tpublic get alignment(): vscode.StatusBarAlignment {\n\t\treturn this._alignment;\n\t}\n\n\tpublic get priority(): number | undefined {\n\t\treturn this._priority;\n\t}\n\n\tpublic get text(): string {\n\t\treturn this._text;\n\t}\n\n\tpublic get tooltip(): string | undefined {\n\t\treturn this._tooltip;\n\t}\n\n\tpublic get color(): string | ThemeColor | undefined {\n\t\treturn this._color;\n\t}\n\n\tpublic get backgroundColor(): ThemeColor | undefined {\n\t\treturn this._backgroundColor;\n\t}\n\n\tpublic get command(): string | vscode.Command | undefined {\n\t\treturn this._command?.fromApi;\n\t}\n\n\tpublic get accessibilityInformation(): vscode.AccessibilityInformation | undefined {\n\t\treturn this._accessibilityInformation;\n\t}\n\n\tpublic set text(text: string) {\n\t\tthis._text = text;\n\t\tthis.update();\n\t}\n\n\tpublic set tooltip(tooltip: string | undefined) {\n\t\tthis._tooltip = tooltip;\n\t\tthis.update();\n\t}\n\n\tpublic set color(color: string | ThemeColor | undefined) {\n\t\tthis._color = color;\n\t\tthis.update();\n\t}\n\n\tpublic set backgroundColor(color: ThemeColor | undefined) {\n\t\tif (color && !ExtHostStatusBarEntry.ALLOWED_BACKGROUND_COLORS.has(color.id)) {\n\t\t\tcolor = undefined;\n\t\t}\n\n\t\tthis._backgroundColor = color;\n\t\tthis.update();\n\t}\n\n\tpublic set command(command: string | vscode.Command | undefined) {\n\t\tif (this._command?.fromApi === command) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._internalCommandRegistration.clear();\n\t\tif (typeof command === 'string') {\n\t\t\tthis._command = {\n\t\t\t\tfromApi: command,\n\t\t\t\tinternal: this.#commands.toInternal({ title: '', command }, this._internalCommandRegistration),\n\t\t\t};\n\t\t} else if (command) {\n\t\t\tthis._command = {\n\t\t\t\tfromApi: command,\n\t\t\t\tinternal: this.#commands.toInternal(command, this._internalCommandRegistration),\n\t\t\t};\n\t\t} else {\n\t\t\tthis._command = undefined;\n\t\t}\n\t\tthis.update();\n\t}\n\n\tpublic set accessibilityInformation(accessibilityInformation: vscode.AccessibilityInformation | undefined) {\n\t\tthis._accessibilityInformation = accessibilityInformation;\n\t\tthis.update();\n\t}\n\n\tpublic show(): void {\n\t\tthis._visible = true;\n\t\tthis.update();\n\t}\n\n\tpublic hide(): void {\n\t\tclearTimeout(this._timeoutHandle);\n\t\tthis._visible = false;\n\t\tthis.#proxy.$dispose(this.id);\n\t}\n\n\tprivate update(): void {\n\t\tif (this._disposed || !this._visible) {\n\t\t\treturn;\n\t\t}\n\n\t\tclearTimeout(this._timeoutHandle);\n\n\t\t// Defer the update so that multiple changes to setters dont cause a redraw each\n\t\tthis._timeoutHandle = setTimeout(() => {\n\t\t\tthis._timeoutHandle = undefined;\n\n\t\t\t// If a background color is set, the foreground is determined\n\t\t\tlet color = this._color;\n\t\t\tif (this._backgroundColor) {\n\t\t\t\tcolor = ExtHostStatusBarEntry.ALLOWED_BACKGROUND_COLORS.get(this._backgroundColor.id);\n\t\t\t}\n\n\t\t\t// Set to status bar\n\t\t\tthis.#proxy.$setEntry(this.id, this._statusId, this._statusName, this._text, this._tooltip, this._command?.internal, color,\n\t\t\t\tthis._backgroundColor, this._alignment === ExtHostStatusBarAlignment.Left ? MainThreadStatusBarAlignment.LEFT : MainThreadStatusBarAlignment.RIGHT,\n\t\t\t\tthis._priority, this._accessibilityInformation);\n\t\t}, 0);\n\t}\n\n\tpublic dispose(): void {\n\t\tthis.hide();\n\t\tthis._disposed = true;\n\t}\n}\n\nclass StatusBarMessage {\n\n\tprivate _item: vscode.StatusBarItem;\n\tprivate _messages: { message: string }[] = [];\n\n\tconstructor(statusBar: ExtHostStatusBar) {\n\t\tthis._item = statusBar.createStatusBarEntry('status.extensionMessage', localize('status.extensionMessage', \"Extension Status\"), ExtHostStatusBarAlignment.Left, Number.MIN_VALUE);\n\t}\n\n\tdispose() {\n\t\tthis._messages.length = 0;\n\t\tthis._item.dispose();\n\t}\n\n\tsetMessage(message: string): Disposable {\n\t\tconst data: { message: string } = { message }; // use object to not confuse equal strings\n\t\tthis._messages.unshift(data);\n\t\tthis._update();\n\n\t\treturn new Disposable(() => {\n\t\t\tconst idx = this._messages.indexOf(data);\n\t\t\tif (idx >= 0) {\n\t\t\t\tthis._messages.splice(idx, 1);\n\t\t\t\tthis._update();\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _update() {\n\t\tif (this._messages.length > 0) {\n\t\t\tthis._item.text = this._messages[0].message;\n\t\t\tthis._item.show();\n\t\t} else {\n\t\t\tthis._item.hide();\n\t\t}\n\t}\n}\n\nexport class ExtHostStatusBar {\n\n\tprivate readonly _proxy: MainThreadStatusBarShape;\n\tprivate readonly _commands: CommandsConverter;\n\tprivate _statusMessage: StatusBarMessage;\n\n\tconstructor(mainContext: IMainContext, commands: CommandsConverter) {\n\t\tthis._proxy = mainContext.getProxy(MainContext.MainThreadStatusBar);\n\t\tthis._commands = commands;\n\t\tthis._statusMessage = new StatusBarMessage(this);\n\t}\n\n\tcreateStatusBarEntry(id: string, name: string, alignment?: ExtHostStatusBarAlignment, priority?: number, accessibilityInformation?: vscode.AccessibilityInformation): vscode.StatusBarItem {\n\t\treturn new ExtHostStatusBarEntry(this._proxy, this._commands, id, name, alignment, priority, accessibilityInformation);\n\t}\n\n\tsetStatusBarMessage(text: string, timeoutOrThenable?: number | Thenable<any>): Disposable {\n\n\t\tconst d = this._statusMessage.setMessage(text);\n\t\tlet handle: any;\n\n\t\tif (typeof timeoutOrThenable === 'number') {\n\t\t\thandle = setTimeout(() => d.dispose(), timeoutOrThenable);\n\t\t} else if (typeof timeoutOrThenable !== 'undefined') {\n\t\t\ttimeoutOrThenable.then(() => d.dispose(), () => d.dispose());\n\t\t}\n\n\t\treturn new Disposable(() => {\n\t\t\td.dispose();\n\t\t\tclearTimeout(handle);\n\t\t});\n\t}\n}\n"]}