{"version":3,"file":"exHostSecretState.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/api/common/exHostSecretState.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAOhG,MAAa,kBAAkB;QAK9B,YAAY,WAA+B;YAHnC,yBAAoB,GAAG,IAAI,eAAO,EAAwC,CAAC;YAC1E,wBAAmB,GAAG,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC;YAG9D,IAAI,CAAC,MAAM,GAAG,WAAW,CAAC,QAAQ,CAAC,8BAAW,CAAC,qBAAqB,CAAC,CAAC;QACvE,CAAC;QAED,KAAK,CAAC,oBAAoB,CAAC,CAAuC;YACjE,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACnC,CAAC;QAED,GAAG,CAAC,WAAmB,EAAE,GAAW;YACnC,OAAO,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;QACnD,CAAC;QAED,KAAK,CAAC,WAAmB,EAAE,GAAW,EAAE,KAAa;YACpD,OAAO,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,WAAW,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;QAC1D,CAAC;QAED,MAAM,CAAC,WAAmB,EAAE,GAAW;YACtC,OAAO,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;QACtD,CAAC;KACD;IAxBD,gDAwBC;IAGY,QAAA,mBAAmB,GAAG,CAAA,GAAA,+BAAe,CAAA,CAAsB,qBAAqB,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ExtHostSecretStateShape, MainContext, MainThreadSecretStateShape } from 'vs/workbench/api/common/extHost.protocol';\nimport { Emitter } from 'vs/base/common/event';\nimport { IExtHostRpcService } from 'vs/workbench/api/common/extHostRpcService';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\n\nexport class ExtHostSecretState implements ExtHostSecretStateShape {\n\tprivate _proxy: MainThreadSecretStateShape;\n\tprivate _onDidChangePassword = new Emitter<{ extensionId: string, key: string }>();\n\treadonly onDidChangePassword = this._onDidChangePassword.event;\n\n\tconstructor(mainContext: IExtHostRpcService) {\n\t\tthis._proxy = mainContext.getProxy(MainContext.MainThreadSecretState);\n\t}\n\n\tasync $onDidChangePassword(e: { extensionId: string, key: string }): Promise<void> {\n\t\tthis._onDidChangePassword.fire(e);\n\t}\n\n\tget(extensionId: string, key: string): Promise<string | undefined> {\n\t\treturn this._proxy.$getPassword(extensionId, key);\n\t}\n\n\tstore(extensionId: string, key: string, value: string): Promise<void> {\n\t\treturn this._proxy.$setPassword(extensionId, key, value);\n\t}\n\n\tdelete(extensionId: string, key: string): Promise<void> {\n\t\treturn this._proxy.$deletePassword(extensionId, key);\n\t}\n}\n\nexport interface IExtHostSecretState extends ExtHostSecretState { }\nexport const IExtHostSecretState = createDecorator<IExtHostSecretState>('IExtHostSecretState');\n"]}