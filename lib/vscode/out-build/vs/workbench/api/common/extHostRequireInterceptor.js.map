{"version":3,"file":"extHostRequireInterceptor.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/api/common/extHostRequireInterceptor.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as performance from 'vs/base/common/performance';\nimport { TernarySearchTree } from 'vs/base/common/map';\nimport { URI } from 'vs/base/common/uri';\nimport { MainThreadTelemetryShape, MainContext } from 'vs/workbench/api/common/extHost.protocol';\nimport { ExtHostConfigProvider, IExtHostConfiguration } from 'vs/workbench/api/common/extHostConfiguration';\nimport { nullExtensionDescription } from 'vs/workbench/services/extensions/common/extensions';\nimport { ExtensionDescriptionRegistry } from 'vs/workbench/services/extensions/common/extensionDescriptionRegistry';\nimport * as vscode from 'vscode';\nimport { ExtensionIdentifier, IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { IExtensionApiFactory } from 'vs/workbench/api/common/extHost.api.impl';\nimport { IExtHostRpcService } from 'vs/workbench/api/common/extHostRpcService';\nimport { IExtHostInitDataService } from 'vs/workbench/api/common/extHostInitDataService';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IExtHostExtensionService } from 'vs/workbench/api/common/extHostExtensionService';\nimport { platform } from 'vs/base/common/process';\nimport { ILogService } from 'vs/platform/log/common/log';\n\n\ninterface LoadFunction {\n\t(request: string): any;\n}\n\ninterface INodeModuleFactory {\n\treadonly nodeModuleName: string | string[];\n\tload(request: string, parent: URI, original: LoadFunction): any;\n\talternativeModuleName?(name: string): string | undefined;\n}\n\nexport abstract class RequireInterceptor {\n\n\tprotected readonly _factories: Map<string, INodeModuleFactory>;\n\tprotected readonly _alternatives: ((moduleName: string) => string | undefined)[];\n\n\tconstructor(\n\t\tprivate _apiFactory: IExtensionApiFactory,\n\t\tprivate _extensionRegistry: ExtensionDescriptionRegistry,\n\t\t@IInstantiationService private readonly _instaService: IInstantiationService,\n\t\t@IExtHostConfiguration private readonly _extHostConfiguration: IExtHostConfiguration,\n\t\t@IExtHostExtensionService private readonly _extHostExtensionService: IExtHostExtensionService,\n\t\t@IExtHostInitDataService private readonly _initData: IExtHostInitDataService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\t\tthis._factories = new Map<string, INodeModuleFactory>();\n\t\tthis._alternatives = [];\n\t}\n\n\tasync install(): Promise<void> {\n\n\t\tthis._installInterceptor();\n\n\t\tperformance.mark('code/extHost/willWaitForConfig');\n\t\tconst configProvider = await this._extHostConfiguration.getConfigProvider();\n\t\tperformance.mark('code/extHost/didWaitForConfig');\n\t\tconst extensionPaths = await this._extHostExtensionService.getExtensionPathIndex();\n\n\t\tthis.register(new VSCodeNodeModuleFactory(this._apiFactory, extensionPaths, this._extensionRegistry, configProvider, this._logService));\n\t\tthis.register(this._instaService.createInstance(KeytarNodeModuleFactory));\n\t\tif (this._initData.remote.isRemote) {\n\t\t\tthis.register(this._instaService.createInstance(OpenNodeModuleFactory, extensionPaths, this._initData.environment.appUriScheme));\n\t\t}\n\t}\n\n\tprotected abstract _installInterceptor(): void;\n\n\tpublic register(interceptor: INodeModuleFactory): void {\n\t\tif (Array.isArray(interceptor.nodeModuleName)) {\n\t\t\tfor (let moduleName of interceptor.nodeModuleName) {\n\t\t\t\tthis._factories.set(moduleName, interceptor);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._factories.set(interceptor.nodeModuleName, interceptor);\n\t\t}\n\t\tif (typeof interceptor.alternativeModuleName === 'function') {\n\t\t\tthis._alternatives.push((moduleName) => {\n\t\t\t\treturn interceptor.alternativeModuleName!(moduleName);\n\t\t\t});\n\t\t}\n\t}\n}\n\n//#region --- vscode-module\n\nclass VSCodeNodeModuleFactory implements INodeModuleFactory {\n\tpublic readonly nodeModuleName = 'vscode';\n\n\tprivate readonly _extApiImpl = new Map<string, typeof vscode>();\n\tprivate _defaultApiImpl?: typeof vscode;\n\n\tconstructor(\n\t\tprivate readonly _apiFactory: IExtensionApiFactory,\n\t\tprivate readonly _extensionPaths: TernarySearchTree<string, IExtensionDescription>,\n\t\tprivate readonly _extensionRegistry: ExtensionDescriptionRegistry,\n\t\tprivate readonly _configProvider: ExtHostConfigProvider,\n\t\tprivate readonly _logService: ILogService,\n\t) {\n\t}\n\n\tpublic load(_request: string, parent: URI): any {\n\n\t\t// get extension id from filename and api for extension\n\t\tconst ext = this._extensionPaths.findSubstr(parent.fsPath);\n\t\tif (ext) {\n\t\t\tlet apiImpl = this._extApiImpl.get(ExtensionIdentifier.toKey(ext.identifier));\n\t\t\tif (!apiImpl) {\n\t\t\t\tapiImpl = this._apiFactory(ext, this._extensionRegistry, this._configProvider);\n\t\t\t\tthis._extApiImpl.set(ExtensionIdentifier.toKey(ext.identifier), apiImpl);\n\t\t\t}\n\t\t\treturn apiImpl;\n\t\t}\n\n\t\t// fall back to a default implementation\n\t\tif (!this._defaultApiImpl) {\n\t\t\tlet extensionPathsPretty = '';\n\t\t\tthis._extensionPaths.forEach((value, index) => extensionPathsPretty += `\\t${index} -> ${value.identifier.value}\\n`);\n\t\t\tthis._logService.warn(`Could not identify extension for 'vscode' require call from ${parent.fsPath}. These are the extension path mappings: \\n${extensionPathsPretty}`);\n\t\t\tthis._defaultApiImpl = this._apiFactory(nullExtensionDescription, this._extensionRegistry, this._configProvider);\n\t\t}\n\t\treturn this._defaultApiImpl;\n\t}\n}\n\n//#endregion\n\n\n//#region --- keytar-module\n\ninterface IKeytarModule {\n\tgetPassword(service: string, account: string): Promise<string | null>;\n\tsetPassword(service: string, account: string, password: string): Promise<void>;\n\tdeletePassword(service: string, account: string): Promise<boolean>;\n\tfindPassword(service: string): Promise<string | null>;\n\tfindCredentials(service: string): Promise<Array<{ account: string, password: string }>>;\n}\n\nclass KeytarNodeModuleFactory implements INodeModuleFactory {\n\tpublic readonly nodeModuleName: string = 'keytar';\n\n\tprivate alternativeNames: Set<string> | undefined;\n\tprivate _impl: IKeytarModule;\n\n\tconstructor(\n\t\t@IExtHostRpcService rpcService: IExtHostRpcService,\n\t\t@IExtHostInitDataService initData: IExtHostInitDataService,\n\n\t) {\n\t\tconst { environment } = initData;\n\t\tconst mainThreadKeytar = rpcService.getProxy(MainContext.MainThreadKeytar);\n\n\t\tif (environment.appRoot) {\n\t\t\tlet appRoot = environment.appRoot.fsPath;\n\t\t\tif (platform === 'win32') {\n\t\t\t\tappRoot = appRoot.replace(/\\\\/g, '/');\n\t\t\t}\n\t\t\tif (appRoot[appRoot.length - 1] === '/') {\n\t\t\t\tappRoot = appRoot.substr(0, appRoot.length - 1);\n\t\t\t}\n\t\t\tthis.alternativeNames = new Set();\n\t\t\tthis.alternativeNames.add(`${appRoot}/node_modules.asar/keytar`);\n\t\t\tthis.alternativeNames.add(`${appRoot}/node_modules/keytar`);\n\t\t}\n\t\tthis._impl = {\n\t\t\tgetPassword: (service: string, account: string): Promise<string | null> => {\n\t\t\t\treturn mainThreadKeytar.$getPassword(service, account);\n\t\t\t},\n\t\t\tsetPassword: (service: string, account: string, password: string): Promise<void> => {\n\t\t\t\treturn mainThreadKeytar.$setPassword(service, account, password);\n\t\t\t},\n\t\t\tdeletePassword: (service: string, account: string): Promise<boolean> => {\n\t\t\t\treturn mainThreadKeytar.$deletePassword(service, account);\n\t\t\t},\n\t\t\tfindPassword: (service: string): Promise<string | null> => {\n\t\t\t\treturn mainThreadKeytar.$findPassword(service);\n\t\t\t},\n\t\t\tfindCredentials(service: string): Promise<Array<{ account: string, password: string }>> {\n\t\t\t\treturn mainThreadKeytar.$findCredentials(service);\n\t\t\t}\n\t\t};\n\t}\n\n\tpublic load(_request: string, _parent: URI): any {\n\t\treturn this._impl;\n\t}\n\n\tpublic alternativeModuleName(name: string): string | undefined {\n\t\tconst length = name.length;\n\t\t// We need at least something like: `?/keytar` which requires\n\t\t// more than 7 characters.\n\t\tif (length <= 7 || !this.alternativeNames) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst sep = length - 7;\n\t\tif ((name.charAt(sep) === '/' || name.charAt(sep) === '\\\\') && name.endsWith('keytar')) {\n\t\t\tname = name.replace(/\\\\/g, '/');\n\t\t\tif (this.alternativeNames.has(name)) {\n\t\t\t\treturn 'keytar';\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n}\n\n//#endregion\n\n\n//#region --- opn/open-module\n\ninterface OpenOptions {\n\twait: boolean;\n\tapp: string | string[];\n}\n\ninterface IOriginalOpen {\n\t(target: string, options?: OpenOptions): Thenable<any>;\n}\n\ninterface IOpenModule {\n\t(target: string, options?: OpenOptions): Thenable<void>;\n}\n\nclass OpenNodeModuleFactory implements INodeModuleFactory {\n\n\tpublic readonly nodeModuleName: string[] = ['open', 'opn'];\n\n\tprivate _extensionId: string | undefined;\n\tprivate _original?: IOriginalOpen;\n\tprivate _impl: IOpenModule;\n\tprivate _mainThreadTelemetry: MainThreadTelemetryShape;\n\n\tconstructor(\n\t\tprivate readonly _extensionPaths: TernarySearchTree<string, IExtensionDescription>,\n\t\tprivate readonly _appUriScheme: string,\n\t\t@IExtHostRpcService rpcService: IExtHostRpcService,\n\t) {\n\n\t\tthis._mainThreadTelemetry = rpcService.getProxy(MainContext.MainThreadTelemetry);\n\t\tconst mainThreadWindow = rpcService.getProxy(MainContext.MainThreadWindow);\n\n\t\tthis._impl = (target, options) => {\n\t\t\tconst uri: URI = URI.parse(target);\n\t\t\t// If we have options use the original method.\n\t\t\tif (options) {\n\t\t\t\treturn this.callOriginal(target, options);\n\t\t\t}\n\t\t\tif (uri.scheme === 'http' || uri.scheme === 'https') {\n\t\t\t\treturn mainThreadWindow.$openUri(uri, target, { allowTunneling: true });\n\t\t\t} else if (uri.scheme === 'mailto' || uri.scheme === this._appUriScheme) {\n\t\t\t\treturn mainThreadWindow.$openUri(uri, target, {});\n\t\t\t}\n\t\t\treturn this.callOriginal(target, options);\n\t\t};\n\t}\n\n\tpublic load(request: string, parent: URI, original: LoadFunction): any {\n\t\t// get extension id from filename and api for extension\n\t\tconst extension = this._extensionPaths.findSubstr(parent.fsPath);\n\t\tif (extension) {\n\t\t\tthis._extensionId = extension.identifier.value;\n\t\t\tthis.sendShimmingTelemetry();\n\t\t}\n\n\t\tthis._original = original(request);\n\t\treturn this._impl;\n\t}\n\n\tprivate callOriginal(target: string, options: OpenOptions | undefined): Thenable<any> {\n\t\tthis.sendNoForwardTelemetry();\n\t\treturn this._original!(target, options);\n\t}\n\n\tprivate sendShimmingTelemetry(): void {\n\t\tif (!this._extensionId) {\n\t\t\treturn;\n\t\t}\n\t\ttype ShimmingOpenClassification = {\n\t\t\textension: { classification: 'SystemMetaData', purpose: 'FeatureInsight' };\n\t\t};\n\t\tthis._mainThreadTelemetry.$publicLog2<{ extension: string }, ShimmingOpenClassification>('shimming.open', { extension: this._extensionId });\n\t}\n\n\tprivate sendNoForwardTelemetry(): void {\n\t\tif (!this._extensionId) {\n\t\t\treturn;\n\t\t}\n\t\ttype ShimmingOpenCallNoForwardClassification = {\n\t\t\textension: { classification: 'SystemMetaData', purpose: 'FeatureInsight' };\n\t\t};\n\t\tthis._mainThreadTelemetry.$publicLog2<{ extension: string }, ShimmingOpenCallNoForwardClassification>('shimming.open.call.noForward', { extension: this._extensionId });\n\t}\n}\n\n//#endregion\n"]}