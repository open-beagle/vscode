{"version":3,"file":"mainThreadLogService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/api/browser/mainThreadLogService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAYhG,IAAa,oBAAoB,GAAjC,MAAa,oBAAoB;QAKhC,YACC,cAA+B,EACD,WAAwB,EACd,aAAoC;YAD9C,gBAAW,GAAX,WAAW,CAAa;YACd,kBAAa,GAAb,aAAa,CAAuB;YAN5D,aAAQ,GAAG,IAAI,GAAG,EAAsB,CAAC;YAQzD,MAAM,KAAK,GAAG,cAAc,CAAC,QAAQ,CAAC,iCAAc,CAAC,iBAAiB,CAAC,CAAC;YACxE,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC,mBAAmB,CAAC,KAAK,CAAC,EAAE;gBAC3D,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;gBACvB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;YACvD,CAAC,CAAC,CAAC;QACJ,CAAC;QAED,OAAO;YACN,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;YAC5B,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YAChD,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;QACvB,CAAC;QAED,IAAI,CAAC,IAAmB,EAAE,KAAe,EAAE,OAAc;YACxD,MAAM,GAAG,GAAG,SAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAC7B,IAAI,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;YAC/C,IAAI,CAAC,MAAM,EAAE;gBACZ,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,oBAAU,EAAE,CAAA,GAAA,eAAQ,CAAA,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,SAAG,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC;gBAC3H,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,MAAM,CAAC,CAAC;aAC1C;YACD,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QAC5B,CAAC;KACD,CAAA;IAhCY,oBAAoB;QADhC,CAAA,GAAA,uCAAoB,CAAA,CAAC,8BAAW,CAAC,aAAa,CAAC;QAQ7C,WAAA,iBAAW,CAAA;QACX,WAAA,qCAAqB,CAAA;OARX,oBAAoB,CAgChC;IAhCY,oDAAoB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { extHostNamedCustomer } from 'vs/workbench/api/common/extHostCustomers';\nimport { ILogService, LogLevel } from 'vs/platform/log/common/log';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { IExtHostContext, ExtHostContext, MainThreadLogShape, MainContext } from 'vs/workbench/api/common/extHost.protocol';\nimport { UriComponents, URI } from 'vs/base/common/uri';\nimport { FileLogger } from 'vs/platform/log/common/fileLog';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { basename } from 'vs/base/common/path';\n\n@extHostNamedCustomer(MainContext.MainThreadLog)\nexport class MainThreadLogService implements MainThreadLogShape {\n\n\tprivate readonly _loggers = new Map<string, FileLogger>();\n\tprivate readonly _logListener: IDisposable;\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@IInstantiationService private readonly _instaService: IInstantiationService,\n\t) {\n\t\tconst proxy = extHostContext.getProxy(ExtHostContext.ExtHostLogService);\n\t\tthis._logListener = _logService.onDidChangeLogLevel(level => {\n\t\t\tproxy.$setLevel(level);\n\t\t\tthis._loggers.forEach(value => value.setLevel(level));\n\t\t});\n\t}\n\n\tdispose(): void {\n\t\tthis._logListener.dispose();\n\t\tthis._loggers.forEach(value => value.dispose());\n\t\tthis._loggers.clear();\n\t}\n\n\t$log(file: UriComponents, level: LogLevel, message: any[]): void {\n\t\tconst uri = URI.revive(file);\n\t\tlet logger = this._loggers.get(uri.toString());\n\t\tif (!logger) {\n\t\t\tlogger = this._instaService.createInstance(FileLogger, basename(file.path), URI.revive(file), this._logService.getLevel());\n\t\t\tthis._loggers.set(uri.toString(), logger);\n\t\t}\n\t\tlogger.log(level, message);\n\t}\n}\n"]}