{"version":3,"sources":["vs/workbench/api/browser/mainThreadTunnelService.ts"],"names":[],"mappings":"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","file":"mainThreadTunnelService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { MainThreadTunnelServiceShape, IExtHostContext, MainContext, ExtHostContext, ExtHostTunnelServiceShape, CandidatePortSource, PortAttributesProviderSelector } from 'vs/workbench/api/common/extHost.protocol';\nimport { TunnelDto } from 'vs/workbench/api/common/extHostTunnelService';\nimport { extHostNamedCustomer } from 'vs/workbench/api/common/extHostCustomers';\nimport { CandidatePort, IRemoteExplorerService, makeAddress, PORT_AUTO_FORWARD_SETTING, PORT_AUTO_SOURCE_SETTING, PORT_AUTO_SOURCE_SETTING_OUTPUT, PORT_AUTO_SOURCE_SETTING_PROCESS } from 'vs/workbench/services/remote/common/remoteExplorerService';\nimport { ITunnelProvider, ITunnelService, TunnelCreationOptions, TunnelProviderFeatures, TunnelOptions, RemoteTunnel, isPortPrivileged, ProvidedPortAttributes, PortAttributesProvider } from 'vs/platform/remote/common/tunnel';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport type { TunnelDescription } from 'vs/platform/remote/common/remoteAuthorityResolver';\nimport { INotificationService, Severity } from 'vs/platform/notification/common/notification';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IConfigurationRegistry, Extensions as ConfigurationExtensions } from 'vs/platform/configuration/common/configurationRegistry';\n\n@extHostNamedCustomer(MainContext.MainThreadTunnelService)\nexport class MainThreadTunnelService extends Disposable implements MainThreadTunnelServiceShape, PortAttributesProvider {\n\tprivate readonly _proxy: ExtHostTunnelServiceShape;\n\tprivate elevateionRetry: boolean = false;\n\tprivate portsAttributesProviders: Map<number, PortAttributesProviderSelector> = new Map();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IRemoteExplorerService private readonly remoteExplorerService: IRemoteExplorerService,\n\t\t@ITunnelService private readonly tunnelService: ITunnelService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IRemoteAgentService private readonly remoteAgentService: IRemoteAgentService\n\t) {\n\t\tsuper();\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostTunnelService);\n\t\tthis._register(tunnelService.onTunnelOpened(() => this._proxy.$onDidTunnelsChange()));\n\t\tthis._register(tunnelService.onTunnelClosed(() => this._proxy.$onDidTunnelsChange()));\n\t}\n\n\tprivate processFindingEnabled(): boolean {\n\t\treturn (!!this.configurationService.getValue(PORT_AUTO_FORWARD_SETTING)) && (this.configurationService.getValue(PORT_AUTO_SOURCE_SETTING) === PORT_AUTO_SOURCE_SETTING_PROCESS);\n\t}\n\n\tasync $setRemoteTunnelService(processId: number): Promise<void> {\n\t\tthis.remoteExplorerService.namedProcesses.set(processId, 'Code Extension Host');\n\t\tif (this.remoteExplorerService.portsFeaturesEnabled) {\n\t\t\tthis._proxy.$registerCandidateFinder(this.processFindingEnabled());\n\t\t} else {\n\t\t\tthis._register(this.remoteExplorerService.onEnabledPortsFeatures(() => this._proxy.$registerCandidateFinder(this.configurationService.getValue(PORT_AUTO_FORWARD_SETTING))));\n\t\t}\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(async (e) => {\n\t\t\tif (e.affectsConfiguration(PORT_AUTO_FORWARD_SETTING) || e.affectsConfiguration(PORT_AUTO_SOURCE_SETTING)) {\n\t\t\t\treturn this._proxy.$registerCandidateFinder(this.processFindingEnabled());\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate _alreadyRegistered: boolean = false;\n\tasync $registerPortsAttributesProvider(selector: PortAttributesProviderSelector, providerHandle: number): Promise<void> {\n\t\tthis.portsAttributesProviders.set(providerHandle, selector);\n\t\tif (!this._alreadyRegistered) {\n\t\t\tthis.remoteExplorerService.tunnelModel.addAttributesProvider(this);\n\t\t\tthis._alreadyRegistered = true;\n\t\t}\n\t}\n\n\tasync $unregisterPortsAttributesProvider(providerHandle: number): Promise<void> {\n\t\tthis.portsAttributesProviders.delete(providerHandle);\n\t}\n\n\tasync providePortAttributes(ports: number[], pid: number | undefined, commandLine: string | undefined, token: CancellationToken): Promise<ProvidedPortAttributes[]> {\n\t\tif (this.portsAttributesProviders.size === 0) {\n\t\t\treturn [];\n\t\t}\n\n\t\t// Check all the selectors to make sure it's worth going to the extension host.\n\t\tconst appropriateHandles = Array.from(this.portsAttributesProviders.entries()).filter(entry => {\n\t\t\tconst selector = entry[1];\n\t\t\tconst portRange = selector.portRange;\n\t\t\tconst portInRange = portRange ? ports.some(port => portRange[0] <= port && port < portRange[1]) : true;\n\t\t\tconst pidMatches = !selector.pid || (selector.pid === pid);\n\t\t\tconst commandMatches = !selector.commandMatcher || (commandLine && (commandLine.match(selector.commandMatcher)));\n\t\t\treturn portInRange && pidMatches && commandMatches;\n\t\t}).map(entry => entry[0]);\n\n\t\tif (appropriateHandles.length === 0) {\n\t\t\treturn [];\n\t\t}\n\t\treturn this._proxy.$providePortAttributes(appropriateHandles, ports, pid, commandLine, token);\n\t}\n\n\tasync $openTunnel(tunnelOptions: TunnelOptions, source: string): Promise<TunnelDto | undefined> {\n\t\tconst tunnel = await this.remoteExplorerService.forward(tunnelOptions.remoteAddress, tunnelOptions.localAddressPort, tunnelOptions.label, source, false);\n\t\tif (tunnel) {\n\t\t\tif (!this.elevateionRetry\n\t\t\t\t&& (tunnelOptions.localAddressPort !== undefined)\n\t\t\t\t&& (tunnel.tunnelLocalPort !== undefined)\n\t\t\t\t&& isPortPrivileged(tunnelOptions.localAddressPort)\n\t\t\t\t&& (tunnel.tunnelLocalPort !== tunnelOptions.localAddressPort)\n\t\t\t\t&& this.tunnelService.canElevate) {\n\n\t\t\t\tthis.elevationPrompt(tunnelOptions, tunnel, source);\n\t\t\t}\n\t\t\treturn TunnelDto.fromServiceTunnel(tunnel);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate async elevationPrompt(tunnelOptions: TunnelOptions, tunnel: RemoteTunnel, source: string) {\n\t\treturn this.notificationService.prompt(Severity.Info,\n\t\t\tnls.localize('remote.tunnel.openTunnel', \"The extension {0} has forwarded port {1}. You'll need to run as superuser to use port {2} locally.\", source, tunnelOptions.remoteAddress.port, tunnelOptions.localAddressPort),\n\t\t\t[{\n\t\t\t\tlabel: nls.localize('remote.tunnelsView.elevationButton', \"Use Port {0} as Sudo...\", tunnel.tunnelRemotePort),\n\t\t\t\trun: async () => {\n\t\t\t\t\tthis.elevateionRetry = true;\n\t\t\t\t\tawait this.remoteExplorerService.close({ host: tunnel.tunnelRemoteHost, port: tunnel.tunnelRemotePort });\n\t\t\t\t\tawait this.remoteExplorerService.forward(tunnelOptions.remoteAddress, tunnelOptions.localAddressPort, tunnelOptions.label, source, true);\n\t\t\t\t\tthis.elevateionRetry = false;\n\t\t\t\t}\n\t\t\t}]);\n\t}\n\n\tasync $closeTunnel(remote: { host: string, port: number }): Promise<void> {\n\t\treturn this.remoteExplorerService.close(remote);\n\t}\n\n\tasync $getTunnels(): Promise<TunnelDescription[]> {\n\t\treturn (await this.tunnelService.tunnels).map(tunnel => {\n\t\t\treturn {\n\t\t\t\tremoteAddress: { port: tunnel.tunnelRemotePort, host: tunnel.tunnelRemoteHost },\n\t\t\t\tlocalAddress: tunnel.localAddress\n\t\t\t};\n\t\t});\n\t}\n\n\tasync $onFoundNewCandidates(candidates: CandidatePort[]): Promise<void> {\n\t\tthis.remoteExplorerService.onFoundNewCandidates(candidates);\n\t}\n\n\tasync $setTunnelProvider(features: TunnelProviderFeatures): Promise<void> {\n\t\tconst tunnelProvider: ITunnelProvider = {\n\t\t\tforwardPort: (tunnelOptions: TunnelOptions, tunnelCreationOptions: TunnelCreationOptions) => {\n\t\t\t\tconst forward = this._proxy.$forwardPort(tunnelOptions, tunnelCreationOptions);\n\t\t\t\treturn forward.then(tunnel => {\n\t\t\t\t\tthis.logService.trace(`ForwardedPorts: (MainThreadTunnelService) New tunnel established by tunnel provider: ${tunnel?.remoteAddress.host}:${tunnel?.remoteAddress.port}`);\n\t\t\t\t\tif (!tunnel) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttunnelRemotePort: tunnel.remoteAddress.port,\n\t\t\t\t\t\ttunnelRemoteHost: tunnel.remoteAddress.host,\n\t\t\t\t\t\tlocalAddress: typeof tunnel.localAddress === 'string' ? tunnel.localAddress : makeAddress(tunnel.localAddress.host, tunnel.localAddress.port),\n\t\t\t\t\t\ttunnelLocalPort: typeof tunnel.localAddress !== 'string' ? tunnel.localAddress.port : undefined,\n\t\t\t\t\t\tpublic: tunnel.public,\n\t\t\t\t\t\tdispose: async (silent?: boolean) => {\n\t\t\t\t\t\t\tthis.logService.trace(`ForwardedPorts: (MainThreadTunnelService) Closing tunnel from tunnel provider: ${tunnel?.remoteAddress.host}:${tunnel?.remoteAddress.port}`);\n\t\t\t\t\t\t\treturn this._proxy.$closeTunnel({ host: tunnel.remoteAddress.host, port: tunnel.remoteAddress.port }, silent);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t\tthis.tunnelService.setTunnelProvider(tunnelProvider, features);\n\t}\n\n\tasync $setCandidateFilter(): Promise<void> {\n\t\tthis.remoteExplorerService.setCandidateFilter((candidates: CandidatePort[]): Promise<CandidatePort[]> => {\n\t\t\treturn this._proxy.$applyCandidateFilter(candidates);\n\t\t});\n\t}\n\n\tasync $setCandidatePortSource(source: CandidatePortSource): Promise<void> {\n\t\t// Must wait for the remote environment before trying to set settings there.\n\t\tthis.remoteAgentService.getEnvironment().then(() => {\n\t\t\tswitch (source) {\n\t\t\t\tcase CandidatePortSource.None: {\n\t\t\t\t\tRegistry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration)\n\t\t\t\t\t\t.registerDefaultConfigurations([{ 'remote.autoForwardPorts': false }]);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase CandidatePortSource.Output: {\n\t\t\t\t\tRegistry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration)\n\t\t\t\t\t\t.registerDefaultConfigurations([{ 'remote.autoForwardPortsSource': PORT_AUTO_SOURCE_SETTING_OUTPUT }]);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tdefault: // Do nothing, the defaults for these settings should be used.\n\t\t\t}\n\t\t}).catch(() => {\n\t\t\t// The remote failed to get setup. Errors from that area will already be surfaced to the user.\n\t\t});\n\t}\n}\n"]}