{"version":3,"file":"mainThreadSecretState.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/api/browser/mainThreadSecretState.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { extHostNamedCustomer } from 'vs/workbench/api/common/extHostCustomers';\nimport { ICredentialsService } from 'vs/workbench/services/credentials/common/credentials';\nimport { IEncryptionService } from 'vs/workbench/services/encryption/common/encryptionService';\nimport { ExtHostContext, ExtHostSecretStateShape, IExtHostContext, MainContext, MainThreadSecretStateShape } from '../common/extHost.protocol';\n\n@extHostNamedCustomer(MainContext.MainThreadSecretState)\nexport class MainThreadSecretState extends Disposable implements MainThreadSecretStateShape {\n\tprivate readonly _proxy: ExtHostSecretStateShape;\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@ICredentialsService private readonly credentialsService: ICredentialsService,\n\t\t@IEncryptionService private readonly encryptionService: IEncryptionService,\n\t\t@IProductService private readonly productService: IProductService\n\t) {\n\t\tsuper();\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostSecretState);\n\n\t\tthis._register(this.credentialsService.onDidChangePassword(e => {\n\t\t\tconst extensionId = e.service.substring(this.productService.urlProtocol.length);\n\t\t\tthis._proxy.$onDidChangePassword({ extensionId, key: e.account });\n\t\t}));\n\t}\n\n\tprivate getFullKey(extensionId: string): string {\n\t\treturn `${this.productService.urlProtocol}${extensionId}`;\n\t}\n\n\tasync $getPassword(extensionId: string, key: string): Promise<string | undefined> {\n\t\tconst fullKey = this.getFullKey(extensionId);\n\t\tconst password = await this.credentialsService.getPassword(fullKey, key);\n\t\tconst decrypted = password && await this.encryptionService.decrypt(password);\n\n\t\tif (decrypted) {\n\t\t\ttry {\n\t\t\t\tconst value = JSON.parse(decrypted);\n\t\t\t\tif (value.extensionId === extensionId) {\n\t\t\t\t\treturn value.content;\n\t\t\t\t}\n\t\t\t} catch (_) {\n\t\t\t\tthrow new Error('Cannot get password');\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tasync $setPassword(extensionId: string, key: string, value: string): Promise<void> {\n\t\tconst fullKey = this.getFullKey(extensionId);\n\t\tconst toEncrypt = JSON.stringify({\n\t\t\textensionId,\n\t\t\tcontent: value\n\t\t});\n\t\tconst encrypted = await this.encryptionService.encrypt(toEncrypt);\n\t\treturn this.credentialsService.setPassword(fullKey, key, encrypted);\n\t}\n\n\tasync $deletePassword(extensionId: string, key: string): Promise<void> {\n\t\ttry {\n\t\t\tconst fullKey = this.getFullKey(extensionId);\n\t\t\tawait this.credentialsService.deletePassword(fullKey, key);\n\t\t} catch (_) {\n\t\t\tthrow new Error('Cannot delete password');\n\t\t}\n\t}\n}\n"]}