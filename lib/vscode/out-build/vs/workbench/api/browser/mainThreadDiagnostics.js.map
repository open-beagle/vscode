{"version":3,"file":"mainThreadDiagnostics.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/api/browser/mainThreadDiagnostics.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAUhG,IAAa,qBAAqB,GAAlC,MAAa,qBAAqB;QAOjC,YACC,cAA+B,EACE,cAA8B,EACzB,gBAAqC;YAD1C,mBAAc,GAAd,cAAc,CAAgB;YACzB,qBAAgB,GAAhB,gBAAgB,CAAqB;YAR3D,kBAAa,GAAG,IAAI,GAAG,EAAU,CAAC;YAUlD,IAAI,CAAC,MAAM,GAAG,cAAc,CAAC,QAAQ,CAAC,iCAAc,CAAC,kBAAkB,CAAC,CAAC;YAEzE,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC;QACxF,CAAC;QAED,OAAO;YACN,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC;YAC/B,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC;YAC9E,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;QAC5B,CAAC;QAEO,eAAe,CAAC,SAAyB;YAChD,MAAM,IAAI,GAAqC,EAAE,CAAC;YAClD,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;gBACjC,IAAI,CAAC,IAAI,CAAC;oBACT,QAAQ;oBACR,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;iBAC9F,CAAC,CAAC;aACH;YACD,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;QACxC,CAAC;QAED,WAAW,CAAC,KAAa,EAAE,OAAyC;YACnE,KAAK,IAAI,KAAK,IAAI,OAAO,EAAE;gBAC1B,IAAI,CAAC,GAAG,EAAE,OAAO,CAAC,GAAG,KAAK,CAAC;gBAC3B,IAAI,OAAO,EAAE;oBACZ,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;wBAC7B,IAAI,MAAM,CAAC,kBAAkB,EAAE;4BAC9B,KAAK,MAAM,kBAAkB,IAAI,MAAM,CAAC,kBAAkB,EAAE;gCAC3D,kBAAkB,CAAC,QAAQ,GAAG,SAAG,CAAC,MAAM,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;6BACtE;yBACD;wBACD,IAAI,MAAM,CAAC,IAAI,IAAI,OAAO,MAAM,CAAC,IAAI,KAAK,QAAQ,EAAE;4BACnD,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,SAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;yBACpD;qBACD;iBACD;gBACD,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,SAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;aACrG;YACD,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAC/B,CAAC;QAED,MAAM,CAAC,KAAa;YACnB,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YACzC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAClC,CAAC;KACD,CAAA;IA1DY,qBAAqB;QADjC,CAAA,GAAA,uCAAoB,CAAA,CAAC,8BAAW,CAAC,qBAAqB,CAAC;QAUrD,WAAA,wBAAc,CAAA;QACd,WAAA,iCAAmB,CAAA;OAVT,qBAAqB,CA0DjC;IA1DY,sDAAqB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IMarkerService, IMarkerData } from 'vs/platform/markers/common/markers';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { MainThreadDiagnosticsShape, MainContext, IExtHostContext, ExtHostDiagnosticsShape, ExtHostContext } from '../common/extHost.protocol';\nimport { extHostNamedCustomer } from 'vs/workbench/api/common/extHostCustomers';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { IUriIdentityService } from 'vs/workbench/services/uriIdentity/common/uriIdentity';\n\n@extHostNamedCustomer(MainContext.MainThreadDiagnostics)\nexport class MainThreadDiagnostics implements MainThreadDiagnosticsShape {\n\n\tprivate readonly _activeOwners = new Set<string>();\n\n\tprivate readonly _proxy: ExtHostDiagnosticsShape;\n\tprivate readonly _markerListener: IDisposable;\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IMarkerService private readonly _markerService: IMarkerService,\n\t\t@IUriIdentityService private readonly _uriIdentService: IUriIdentityService,\n\t) {\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostDiagnostics);\n\n\t\tthis._markerListener = this._markerService.onMarkerChanged(this._forwardMarkers, this);\n\t}\n\n\tdispose(): void {\n\t\tthis._markerListener.dispose();\n\t\tthis._activeOwners.forEach(owner => this._markerService.changeAll(owner, []));\n\t\tthis._activeOwners.clear();\n\t}\n\n\tprivate _forwardMarkers(resources: readonly URI[]): void {\n\t\tconst data: [UriComponents, IMarkerData[]][] = [];\n\t\tfor (const resource of resources) {\n\t\t\tdata.push([\n\t\t\t\tresource,\n\t\t\t\tthis._markerService.read({ resource }).filter(marker => !this._activeOwners.has(marker.owner))\n\t\t\t]);\n\t\t}\n\t\tthis._proxy.$acceptMarkersChange(data);\n\t}\n\n\t$changeMany(owner: string, entries: [UriComponents, IMarkerData[]][]): void {\n\t\tfor (let entry of entries) {\n\t\t\tlet [uri, markers] = entry;\n\t\t\tif (markers) {\n\t\t\t\tfor (const marker of markers) {\n\t\t\t\t\tif (marker.relatedInformation) {\n\t\t\t\t\t\tfor (const relatedInformation of marker.relatedInformation) {\n\t\t\t\t\t\t\trelatedInformation.resource = URI.revive(relatedInformation.resource);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (marker.code && typeof marker.code !== 'string') {\n\t\t\t\t\t\tmarker.code.target = URI.revive(marker.code.target);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._markerService.changeOne(owner, this._uriIdentService.asCanonicalUri(URI.revive(uri)), markers);\n\t\t}\n\t\tthis._activeOwners.add(owner);\n\t}\n\n\t$clear(owner: string): void {\n\t\tthis._markerService.changeAll(owner, []);\n\t\tthis._activeOwners.delete(owner);\n\t}\n}\n"]}