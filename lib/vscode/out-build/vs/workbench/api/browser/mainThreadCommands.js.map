{"version":3,"file":"mainThreadCommands.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/api/browser/mainThreadCommands.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ICommandService, CommandsRegistry, ICommandHandlerDescription } from 'vs/platform/commands/common/commands';\nimport { IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { ExtHostContext, MainThreadCommandsShape, ExtHostCommandsShape, MainContext, IExtHostContext } from '../common/extHost.protocol';\nimport { extHostNamedCustomer } from 'vs/workbench/api/common/extHostCustomers';\nimport { revive } from 'vs/base/common/marshalling';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\n\n@extHostNamedCustomer(MainContext.MainThreadCommands)\nexport class MainThreadCommands implements MainThreadCommandsShape {\n\n\tprivate readonly _commandRegistrations = new Map<string, IDisposable>();\n\tprivate readonly _generateCommandsDocumentationRegistration: IDisposable;\n\tprivate readonly _proxy: ExtHostCommandsShape;\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@ICommandService private readonly _commandService: ICommandService,\n\t\t@IExtensionService private readonly _extensionService: IExtensionService,\n\t) {\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostCommands);\n\n\t\tthis._generateCommandsDocumentationRegistration = CommandsRegistry.registerCommand('_generateCommandsDocumentation', () => this._generateCommandsDocumentation());\n\t}\n\n\tdispose() {\n\t\tdispose(this._commandRegistrations.values());\n\t\tthis._commandRegistrations.clear();\n\n\t\tthis._generateCommandsDocumentationRegistration.dispose();\n\t}\n\n\tprivate async _generateCommandsDocumentation(): Promise<void> {\n\t\tconst result = await this._proxy.$getContributedCommandHandlerDescriptions();\n\n\t\t// add local commands\n\t\tconst commands = CommandsRegistry.getCommands();\n\t\tfor (const [id, command] of commands) {\n\t\t\tif (command.description) {\n\t\t\t\tresult[id] = command.description;\n\t\t\t}\n\t\t}\n\n\t\t// print all as markdown\n\t\tconst all: string[] = [];\n\t\tfor (let id in result) {\n\t\t\tall.push('`' + id + '` - ' + _generateMarkdown(result[id]));\n\t\t}\n\t\tconsole.log(all.join('\\n'));\n\t}\n\n\t$registerCommand(id: string): void {\n\t\tthis._commandRegistrations.set(\n\t\t\tid,\n\t\t\tCommandsRegistry.registerCommand(id, (accessor, ...args) => {\n\t\t\t\treturn this._proxy.$executeContributedCommand(id, ...args).then(result => {\n\t\t\t\t\treturn revive(result);\n\t\t\t\t});\n\t\t\t})\n\t\t);\n\t}\n\n\t$unregisterCommand(id: string): void {\n\t\tconst command = this._commandRegistrations.get(id);\n\t\tif (command) {\n\t\t\tcommand.dispose();\n\t\t\tthis._commandRegistrations.delete(id);\n\t\t}\n\t}\n\n\tasync $executeCommand<T>(id: string, args: any[], retry: boolean): Promise<T | undefined> {\n\t\tfor (let i = 0; i < args.length; i++) {\n\t\t\targs[i] = revive(args[i]);\n\t\t}\n\t\tif (retry && args.length > 0 && !CommandsRegistry.getCommand(id)) {\n\t\t\tawait this._extensionService.activateByEvent(`onCommand:${id}`);\n\t\t\tthrow new Error('$executeCommand:retry');\n\t\t}\n\t\treturn this._commandService.executeCommand<T>(id, ...args);\n\t}\n\n\t$getCommands(): Promise<string[]> {\n\t\treturn Promise.resolve([...CommandsRegistry.getCommands().keys()]);\n\t}\n}\n\n// --- command doc\n\nfunction _generateMarkdown(description: string | ICommandHandlerDescription): string {\n\tif (typeof description === 'string') {\n\t\treturn description;\n\t} else {\n\t\tconst parts = [description.description];\n\t\tparts.push('\\n\\n');\n\t\tif (description.args) {\n\t\t\tfor (let arg of description.args) {\n\t\t\t\tparts.push(`* _${arg.name}_ - ${arg.description || ''}\\n`);\n\t\t\t}\n\t\t}\n\t\tif (description.returns) {\n\t\t\tparts.push(`* _(returns)_ - ${description.returns}`);\n\t\t}\n\t\tparts.push('\\n\\n');\n\t\treturn parts.join('');\n\t}\n}\n"]}