{"version":3,"file":"mainThreadDocumentContentProviders.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/api/browser/mainThreadDocumentContentProviders.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { EditOperation } from 'vs/editor/common/core/editOperation';\nimport { Range } from 'vs/editor/common/core/range';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { IEditorWorkerService } from 'vs/editor/common/services/editorWorkerService';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { ITextModelService } from 'vs/editor/common/services/resolverService';\nimport { extHostNamedCustomer } from 'vs/workbench/api/common/extHostCustomers';\nimport { ExtHostContext, ExtHostDocumentContentProvidersShape, IExtHostContext, MainContext, MainThreadDocumentContentProvidersShape } from '../common/extHost.protocol';\nimport { CancellationTokenSource } from 'vs/base/common/cancellation';\n\n@extHostNamedCustomer(MainContext.MainThreadDocumentContentProviders)\nexport class MainThreadDocumentContentProviders implements MainThreadDocumentContentProvidersShape {\n\n\tprivate readonly _resourceContentProvider = new Map<number, IDisposable>();\n\tprivate readonly _pendingUpdate = new Map<string, CancellationTokenSource>();\n\tprivate readonly _proxy: ExtHostDocumentContentProvidersShape;\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@ITextModelService private readonly _textModelResolverService: ITextModelService,\n\t\t@IModeService private readonly _modeService: IModeService,\n\t\t@IModelService private readonly _modelService: IModelService,\n\t\t@IEditorWorkerService private readonly _editorWorkerService: IEditorWorkerService\n\t) {\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostDocumentContentProviders);\n\t}\n\n\tdispose(): void {\n\t\tdispose(this._resourceContentProvider.values());\n\t\tdispose(this._pendingUpdate.values());\n\t}\n\n\t$registerTextContentProvider(handle: number, scheme: string): void {\n\t\tconst registration = this._textModelResolverService.registerTextModelContentProvider(scheme, {\n\t\t\tprovideTextContent: (uri: URI): Promise<ITextModel | null> => {\n\t\t\t\treturn this._proxy.$provideTextDocumentContent(handle, uri).then(value => {\n\t\t\t\t\tif (typeof value === 'string') {\n\t\t\t\t\t\tconst firstLineText = value.substr(0, 1 + value.search(/\\r?\\n/));\n\t\t\t\t\t\tconst languageSelection = this._modeService.createByFilepathOrFirstLine(uri, firstLineText);\n\t\t\t\t\t\treturn this._modelService.createModel(value, languageSelection, uri);\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t\tthis._resourceContentProvider.set(handle, registration);\n\t}\n\n\t$unregisterTextContentProvider(handle: number): void {\n\t\tconst registration = this._resourceContentProvider.get(handle);\n\t\tif (registration) {\n\t\t\tregistration.dispose();\n\t\t\tthis._resourceContentProvider.delete(handle);\n\t\t}\n\t}\n\n\t$onVirtualDocumentChange(uri: UriComponents, value: string): void {\n\t\tconst model = this._modelService.getModel(URI.revive(uri));\n\t\tif (!model) {\n\t\t\treturn;\n\t\t}\n\n\t\t// cancel and dispose an existing update\n\t\tconst pending = this._pendingUpdate.get(model.id);\n\t\tif (pending) {\n\t\t\tpending.cancel();\n\t\t}\n\n\t\t// create and keep update token\n\t\tconst myToken = new CancellationTokenSource();\n\t\tthis._pendingUpdate.set(model.id, myToken);\n\n\t\tthis._editorWorkerService.computeMoreMinimalEdits(model.uri, [{ text: value, range: model.getFullModelRange() }]).then(edits => {\n\t\t\t// remove token\n\t\t\tthis._pendingUpdate.delete(model.id);\n\n\t\t\tif (myToken.token.isCancellationRequested) {\n\t\t\t\t// ignore this\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (edits && edits.length > 0) {\n\t\t\t\t// use the evil-edit as these models show in readonly-editor only\n\t\t\t\tmodel.applyEdits(edits.map(edit => EditOperation.replace(Range.lift(edit.range), edit.text)));\n\t\t\t}\n\t\t}).catch(onUnexpectedError);\n\t}\n}\n"]}