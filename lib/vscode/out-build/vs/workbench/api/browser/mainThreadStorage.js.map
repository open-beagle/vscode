{"version":3,"file":"mainThreadStorage.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/api/browser/mainThreadStorage.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAShG,IAAa,iBAAiB,GAA9B,MAAa,iBAAiB;QAQ7B,YACC,cAA+B,EACd,cAA+B,EACjB,4BAA2D;YAL1E,8BAAyB,GAAyB,IAAI,GAAG,EAAmB,CAAC;YAO7F,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;YACtC,IAAI,CAAC,6BAA6B,GAAG,4BAA4B,CAAC;YAClE,IAAI,CAAC,MAAM,GAAG,cAAc,CAAC,QAAQ,CAAC,iCAAc,CAAC,cAAc,CAAC,CAAC;YAErE,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE;gBACjE,MAAM,MAAM,GAAG,CAAC,CAAC,KAAK,mBAAwB,CAAC;gBAC/C,IAAI,MAAM,IAAI,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE;oBACxD,IAAI;wBACH,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;qBACvE;oBAAC,OAAO,KAAK,EAAE;wBACf,wCAAwC;qBACxC;iBACD;YACF,CAAC,CAAC,CAAC;QACJ,CAAC;QAED,OAAO;YACN,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC;QACjC,CAAC;QAED,SAAS,CAAI,MAAe,EAAE,GAAW;YACxC,IAAI,MAAM,EAAE;gBACX,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;aAC9C;YACD,IAAI;gBACH,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAI,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;aACvD;YAAC,OAAO,KAAK,EAAE;gBACf,OAAO,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;aAC7B;QACF,CAAC;QAEO,SAAS,CAAI,MAAe,EAAE,GAAW;YAChD,MAAM,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,gBAAqB,CAAC,kBAAuB,CAAC,CAAC;YACvG,IAAI,CAAC,SAAS,EAAE;gBACf,OAAO,SAAS,CAAC;aACjB;YACD,OAAO,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QAC9B,CAAC;QAED,KAAK,CAAC,SAAS,CAAC,MAAe,EAAE,GAAW,EAAE,KAAa;YAC1D,IAAI,SAAiB,CAAC;YACtB,IAAI;gBACH,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;gBAClC,0DAA0D;gBAC1D,MAAM,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,GAAG,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC,gBAAqB,CAAC,kBAAuB,kBAAwB,CAAC;aAC/H;YAAC,OAAO,GAAG,EAAE;gBACb,OAAO,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aAC3B;YACD,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QACnC,CAAC;QAED,mCAAmC,CAAC,SAAkC,EAAE,IAAc;YACrF,IAAI,CAAC,6BAA6B,CAAC,cAAc,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QACpE,CAAC;KACD,CAAA;IAnEY,iBAAiB;QAD7B,CAAA,GAAA,uCAAoB,CAAA,CAAC,8BAAW,CAAC,iBAAiB,CAAC;QAWjD,WAAA,yBAAe,CAAA;QACf,WAAA,qDAA6B,CAAA;OAXnB,iBAAiB,CAmE7B;IAnEY,8CAAiB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { MainThreadStorageShape, MainContext, IExtHostContext, ExtHostStorageShape, ExtHostContext } from '../common/extHost.protocol';\nimport { extHostNamedCustomer } from 'vs/workbench/api/common/extHostCustomers';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { IExtensionIdWithVersion, IExtensionsStorageSyncService } from 'vs/platform/userDataSync/common/extensionsStorageSync';\n\n@extHostNamedCustomer(MainContext.MainThreadStorage)\nexport class MainThreadStorage implements MainThreadStorageShape {\n\n\tprivate readonly _storageService: IStorageService;\n\tprivate readonly _extensionsStorageSyncService: IExtensionsStorageSyncService;\n\tprivate readonly _proxy: ExtHostStorageShape;\n\tprivate readonly _storageListener: IDisposable;\n\tprivate readonly _sharedStorageKeysToWatch: Map<string, boolean> = new Map<string, boolean>();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IExtensionsStorageSyncService extensionsStorageSyncService: IExtensionsStorageSyncService,\n\t) {\n\t\tthis._storageService = storageService;\n\t\tthis._extensionsStorageSyncService = extensionsStorageSyncService;\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostStorage);\n\n\t\tthis._storageListener = this._storageService.onDidChangeValue(e => {\n\t\t\tconst shared = e.scope === StorageScope.GLOBAL;\n\t\t\tif (shared && this._sharedStorageKeysToWatch.has(e.key)) {\n\t\t\t\ttry {\n\t\t\t\t\tthis._proxy.$acceptValue(shared, e.key, this._getValue(shared, e.key));\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// ignore parsing errors that can happen\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tdispose(): void {\n\t\tthis._storageListener.dispose();\n\t}\n\n\t$getValue<T>(shared: boolean, key: string): Promise<T | undefined> {\n\t\tif (shared) {\n\t\t\tthis._sharedStorageKeysToWatch.set(key, true);\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(this._getValue<T>(shared, key));\n\t\t} catch (error) {\n\t\t\treturn Promise.reject(error);\n\t\t}\n\t}\n\n\tprivate _getValue<T>(shared: boolean, key: string): T | undefined {\n\t\tconst jsonValue = this._storageService.get(key, shared ? StorageScope.GLOBAL : StorageScope.WORKSPACE);\n\t\tif (!jsonValue) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn JSON.parse(jsonValue);\n\t}\n\n\tasync $setValue(shared: boolean, key: string, value: object): Promise<void> {\n\t\tlet jsonValue: string;\n\t\ttry {\n\t\t\tjsonValue = JSON.stringify(value);\n\t\t\t// Extension state is synced separately through extensions\n\t\t\tawait this._storageService.store(key, jsonValue, shared ? StorageScope.GLOBAL : StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\t} catch (err) {\n\t\t\treturn Promise.reject(err);\n\t\t}\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\t$registerExtensionStorageKeysToSync(extension: IExtensionIdWithVersion, keys: string[]): void {\n\t\tthis._extensionsStorageSyncService.setKeysForSync(extension, keys);\n\t}\n}\n"]}