{"version":3,"file":"mainThreadLanguages.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/api/browser/mainThreadLanguages.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAahG,IAAa,mBAAmB,GAAhC,MAAa,mBAAmB;QAE/B,YACC,eAAgC,EACD,YAA0B,EACzB,aAA4B,EACjC,gBAAmC;YAF/B,iBAAY,GAAZ,YAAY,CAAc;YACzB,kBAAa,GAAb,aAAa,CAAe;YACjC,qBAAgB,GAAhB,gBAAgB,CAAmB;QAE/D,CAAC;QAED,OAAO;YACN,UAAU;QACX,CAAC;QAED,aAAa;YACZ,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,kBAAkB,EAAE,CAAC,CAAC;QAChE,CAAC;QAED,KAAK,CAAC,eAAe,CAAC,QAAuB,EAAE,UAAkB;YAEhE,MAAM,kBAAkB,GAAG,IAAI,CAAC,YAAY,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC;YAC/E,IAAI,CAAC,kBAAkB,IAAI,kBAAkB,CAAC,QAAQ,KAAK,UAAU,EAAE;gBACtE,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,wBAAwB,UAAU,EAAE,CAAC,CAAC,CAAC;aACvE;YAED,MAAM,GAAG,GAAG,SAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YACjC,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;YAClE,IAAI;gBACH,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,eAAe,EAAE,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;aAC7F;oBAAS;gBACT,GAAG,CAAC,OAAO,EAAE,CAAC;aACd;QACF,CAAC;QAED,KAAK,CAAC,iBAAiB,CAAC,QAAuB,EAAE,QAAmB;YACnE,MAAM,GAAG,GAAG,SAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YACjC,MAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YAC/C,IAAI,CAAC,KAAK,EAAE;gBACX,OAAO,SAAS,CAAC;aACjB;YACD,KAAK,CAAC,eAAe,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;YAC3C,MAAM,MAAM,GAAG,KAAK,CAAC,aAAa,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;YACxD,MAAM,GAAG,GAAG,MAAM,CAAC,sBAAsB,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YAC/D,OAAO;gBACN,IAAI,EAAE,MAAM,CAAC,oBAAoB,CAAC,GAAG,CAAC;gBACtC,KAAK,EAAE,IAAI,aAAK,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC,GAAG,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE,QAAQ,CAAC,UAAU,EAAE,CAAC,GAAG,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;aACxH,CAAC;QACH,CAAC;KACD,CAAA;IAhDY,mBAAmB;QAD/B,CAAA,GAAA,uCAAoB,CAAA,CAAC,8BAAW,CAAC,mBAAmB,CAAC;QAKnD,WAAA,0BAAY,CAAA;QACZ,WAAA,4BAAa,CAAA;QACb,WAAA,mCAAiB,CAAA;OANP,mBAAmB,CAgD/B;IAhDY,kDAAmB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { MainThreadLanguagesShape, MainContext, IExtHostContext } from '../common/extHost.protocol';\nimport { extHostNamedCustomer } from 'vs/workbench/api/common/extHostCustomers';\nimport { IPosition } from 'vs/editor/common/core/position';\nimport { IRange, Range } from 'vs/editor/common/core/range';\nimport { StandardTokenType } from 'vs/editor/common/modes';\nimport { ITextModelService } from 'vs/editor/common/services/resolverService';\n\n@extHostNamedCustomer(MainContext.MainThreadLanguages)\nexport class MainThreadLanguages implements MainThreadLanguagesShape {\n\n\tconstructor(\n\t\t_extHostContext: IExtHostContext,\n\t\t@IModeService private readonly _modeService: IModeService,\n\t\t@IModelService private readonly _modelService: IModelService,\n\t\t@ITextModelService private _resolverService: ITextModelService,\n\t) {\n\t}\n\n\tdispose(): void {\n\t\t// nothing\n\t}\n\n\t$getLanguages(): Promise<string[]> {\n\t\treturn Promise.resolve(this._modeService.getRegisteredModes());\n\t}\n\n\tasync $changeLanguage(resource: UriComponents, languageId: string): Promise<void> {\n\n\t\tconst languageIdentifier = this._modeService.getLanguageIdentifier(languageId);\n\t\tif (!languageIdentifier || languageIdentifier.language !== languageId) {\n\t\t\treturn Promise.reject(new Error(`Unknown language id: ${languageId}`));\n\t\t}\n\n\t\tconst uri = URI.revive(resource);\n\t\tconst ref = await this._resolverService.createModelReference(uri);\n\t\ttry {\n\t\t\tthis._modelService.setMode(ref.object.textEditorModel, this._modeService.create(languageId));\n\t\t} finally {\n\t\t\tref.dispose();\n\t\t}\n\t}\n\n\tasync $tokensAtPosition(resource: UriComponents, position: IPosition): Promise<undefined | { type: StandardTokenType, range: IRange }> {\n\t\tconst uri = URI.revive(resource);\n\t\tconst model = this._modelService.getModel(uri);\n\t\tif (!model) {\n\t\t\treturn undefined;\n\t\t}\n\t\tmodel.tokenizeIfCheap(position.lineNumber);\n\t\tconst tokens = model.getLineTokens(position.lineNumber);\n\t\tconst idx = tokens.findTokenIndexAtOffset(position.column - 1);\n\t\treturn {\n\t\t\ttype: tokens.getStandardTokenType(idx),\n\t\t\trange: new Range(position.lineNumber, 1 + tokens.getStartOffset(idx), position.lineNumber, 1 + tokens.getEndOffset(idx))\n\t\t};\n\t}\n}\n"]}