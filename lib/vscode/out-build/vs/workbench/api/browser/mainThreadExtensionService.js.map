{"version":3,"sources":["vs/workbench/api/browser/mainThreadExtensionService.ts"],"names":[],"mappings":"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","file":"mainThreadExtensionService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { SerializedError } from 'vs/base/common/errors';\nimport Severity from 'vs/base/common/severity';\nimport { extHostNamedCustomer } from 'vs/workbench/api/common/extHostCustomers';\nimport { IExtHostContext, MainContext, MainThreadExtensionServiceShape } from 'vs/workbench/api/common/extHost.protocol';\nimport { IExtensionService, ExtensionHostKind, MissingExtensionDependency } from 'vs/workbench/services/extensions/common/extensions';\nimport { ExtensionIdentifier, IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { localize } from 'vs/nls';\nimport { Action } from 'vs/base/common/actions';\nimport { IWorkbenchExtensionEnablementService, EnablementState } from 'vs/workbench/services/extensionManagement/common/extensionManagement';\nimport { areSameExtensions } from 'vs/platform/extensionManagement/common/extensionManagementUtil';\nimport { IHostService } from 'vs/workbench/services/host/browser/host';\nimport { IExtension, IExtensionsWorkbenchService } from 'vs/workbench/contrib/extensions/common/extensions';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { ILocalExtension } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { ExtensionActivationReason } from 'vs/workbench/api/common/extHostExtensionActivator';\nimport { ITimerService } from 'vs/workbench/services/timer/browser/timerService';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\n\n@extHostNamedCustomer(MainContext.MainThreadExtensionService)\nexport class MainThreadExtensionService implements MainThreadExtensionServiceShape {\n\n\tprivate readonly _extensionHostKind: ExtensionHostKind;\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IExtensionService private readonly _extensionService: IExtensionService,\n\t\t@INotificationService private readonly _notificationService: INotificationService,\n\t\t@IExtensionsWorkbenchService private readonly _extensionsWorkbenchService: IExtensionsWorkbenchService,\n\t\t@IHostService private readonly _hostService: IHostService,\n\t\t@IWorkbenchExtensionEnablementService private readonly _extensionEnablementService: IWorkbenchExtensionEnablementService,\n\t\t@ITimerService private readonly _timerService: ITimerService,\n\t\t@IWorkbenchEnvironmentService protected readonly _environmentService: IWorkbenchEnvironmentService,\n\t) {\n\t\tthis._extensionHostKind = extHostContext.extensionHostKind;\n\t}\n\n\tpublic dispose(): void {\n\t}\n\n\t$activateExtension(extensionId: ExtensionIdentifier, reason: ExtensionActivationReason): Promise<void> {\n\t\treturn this._extensionService._activateById(extensionId, reason);\n\t}\n\tasync $onWillActivateExtension(extensionId: ExtensionIdentifier): Promise<void> {\n\t\tthis._extensionService._onWillActivateExtension(extensionId);\n\t}\n\t$onDidActivateExtension(extensionId: ExtensionIdentifier, codeLoadingTime: number, activateCallTime: number, activateResolvedTime: number, activationReason: ExtensionActivationReason): void {\n\t\tthis._extensionService._onDidActivateExtension(extensionId, codeLoadingTime, activateCallTime, activateResolvedTime, activationReason);\n\t}\n\t$onExtensionRuntimeError(extensionId: ExtensionIdentifier, data: SerializedError): void {\n\t\tconst error = new Error();\n\t\terror.name = data.name;\n\t\terror.message = data.message;\n\t\terror.stack = data.stack;\n\t\tthis._extensionService._onExtensionRuntimeError(extensionId, error);\n\t\tconsole.error(`[${extensionId}]${error.message}`);\n\t\tconsole.error(error.stack);\n\t}\n\tasync $onExtensionActivationError(extensionId: ExtensionIdentifier, data: SerializedError, missingExtensionDependency: MissingExtensionDependency | null): Promise<void> {\n\t\tconst error = new Error();\n\t\terror.name = data.name;\n\t\terror.message = data.message;\n\t\terror.stack = data.stack;\n\n\t\tthis._extensionService._onDidActivateExtensionError(extensionId, error);\n\n\t\tif (missingExtensionDependency) {\n\t\t\tconst extension = await this._extensionService.getExtension(extensionId.value);\n\t\t\tif (extension) {\n\t\t\t\tconst local = await this._extensionsWorkbenchService.queryLocal();\n\t\t\t\tconst installedDependency = local.filter(i => areSameExtensions(i.identifier, { id: missingExtensionDependency.dependency }))[0];\n\t\t\t\tif (installedDependency) {\n\t\t\t\t\tawait this._handleMissingInstalledDependency(extension, installedDependency.local!);\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n\t\t\t\t\tawait this._handleMissingNotInstalledDependency(extension, missingExtensionDependency.dependency);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst isDev = !this._environmentService.isBuilt || this._environmentService.isExtensionDevelopment;\n\t\tif (isDev) {\n\t\t\tthis._notificationService.error(error);\n\t\t\treturn;\n\t\t}\n\n\t\tconsole.error(error.message);\n\t}\n\n\tprivate async _handleMissingInstalledDependency(extension: IExtensionDescription, missingInstalledDependency: ILocalExtension): Promise<void> {\n\t\tconst extName = extension.displayName || extension.name;\n\t\tif (this._extensionEnablementService.isEnabled(missingInstalledDependency)) {\n\t\t\tthis._notificationService.notify({\n\t\t\t\tseverity: Severity.Error,\n\t\t\t\tmessage: localize('reload window', \"Cannot activate the '{0}' extension because it depends on the '{1}' extension, which is not loaded. Would you like to reload the window to load the extension?\", extName, missingInstalledDependency.manifest.displayName || missingInstalledDependency.manifest.name),\n\t\t\t\tactions: {\n\t\t\t\t\tprimary: [new Action('reload', localize('reload', \"Reload Window\"), '', true, () => this._hostService.reload())]\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tconst enablementState = this._extensionEnablementService.getEnablementState(missingInstalledDependency);\n\t\t\tthis._notificationService.notify({\n\t\t\t\tseverity: Severity.Error,\n\t\t\t\tmessage: localize('disabledDep', \"Cannot activate the '{0}' extension because it depends on the '{1}' extension, which is disabled. Would you like to enable the extension and reload the window?\", extName, missingInstalledDependency.manifest.displayName || missingInstalledDependency.manifest.name),\n\t\t\t\tactions: {\n\t\t\t\t\tprimary: [new Action('enable', localize('enable dep', \"Enable and Reload\"), '', true,\n\t\t\t\t\t\t() => this._extensionEnablementService.setEnablement([missingInstalledDependency], enablementState === EnablementState.DisabledGlobally ? EnablementState.EnabledGlobally : EnablementState.EnabledWorkspace)\n\t\t\t\t\t\t\t.then(() => this._hostService.reload(), e => this._notificationService.error(e)))]\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate async _handleMissingNotInstalledDependency(extension: IExtensionDescription, missingDependency: string): Promise<void> {\n\t\tconst extName = extension.displayName || extension.name;\n\t\tlet dependencyExtension: IExtension | null = null;\n\t\ttry {\n\t\t\tdependencyExtension = (await this._extensionsWorkbenchService.queryGallery({ names: [missingDependency] }, CancellationToken.None)).firstPage[0];\n\t\t} catch (err) {\n\t\t}\n\t\tif (dependencyExtension) {\n\t\t\tthis._notificationService.notify({\n\t\t\t\tseverity: Severity.Error,\n\t\t\t\tmessage: localize('uninstalledDep', \"Cannot activate the '{0}' extension because it depends on the '{1}' extension, which is not installed. Would you like to install the extension and reload the window?\", extName, dependencyExtension.displayName),\n\t\t\t\tactions: {\n\t\t\t\t\tprimary: [new Action('install', localize('install missing dep', \"Install and Reload\"), '', true,\n\t\t\t\t\t\t() => this._extensionsWorkbenchService.install(dependencyExtension!)\n\t\t\t\t\t\t\t.then(() => this._hostService.reload(), e => this._notificationService.error(e)))]\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tthis._notificationService.error(localize('unknownDep', \"Cannot activate the '{0}' extension because it depends on an unknown '{1}' extension.\", extName, missingDependency));\n\t\t}\n\t}\n\n\tasync $setPerformanceMarks(marks: PerformanceMark[]): Promise<void> {\n\t\tif (this._extensionHostKind === ExtensionHostKind.LocalProcess) {\n\t\t\tthis._timerService.setPerformanceMarks('localExtHost', marks);\n\t\t} else if (this._extensionHostKind === ExtensionHostKind.LocalWebWorker) {\n\t\t\tthis._timerService.setPerformanceMarks('workerExtHost', marks);\n\t\t} else {\n\t\t\tthis._timerService.setPerformanceMarks('remoteExtHost', marks);\n\t\t}\n\t}\n}\n"]}