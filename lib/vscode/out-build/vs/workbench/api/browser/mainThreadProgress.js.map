{"version":3,"sources":["vs/workbench/api/browser/mainThreadProgress.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAUhG,MAAM,qBAAsB,SAAQ,gBAAM;QACzC,YAAY,EAAuB,EAAE,KAAa,EAAE,cAA+B;YAClF,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,EAAE;gBAC5C,OAAO,cAAc,CAAC,cAAc,CAAC,oBAAoB,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC;YACtE,CAAC,CAAC,CAAC;QACJ,CAAC;KACD;IAGD,IAAa,kBAAkB,GAA/B,MAAa,kBAAkB;QAM9B,YACC,cAA+B,EACb,eAAiC,EACjB,eAAgC;YAAhC,oBAAe,GAAf,eAAe,CAAiB;YAN3D,cAAS,GAAG,IAAI,GAAG,EAAuE,CAAC;YAQlG,IAAI,CAAC,MAAM,GAAG,cAAc,CAAC,QAAQ,CAAC,iCAAc,CAAC,eAAe,CAAC,CAAC;YACtE,IAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;QACzC,CAAC;QAED,OAAO;YACN,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC;YACnD,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;QACxB,CAAC;QAED,cAAc,CAAC,MAAc,EAAE,OAAyB,EAAE,SAAiC;YAC1F,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;YAEtC,IAAI,OAAO,CAAC,QAAQ,0BAAkC,IAAI,SAAS,IAAI,CAAC,SAAS,CAAC,kBAAkB,EAAE;gBACrG,MAAM,mBAAmB,mCACrB,OAAO,KACV,QAAQ,yBACR,gBAAgB,EAAE,CAAC,IAAI,qBAAqB,CAAC,SAAS,CAAC,UAAU,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAiB,EAAE,IAAkB,CAAC,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC,GAC1I,CAAC;gBAEF,OAAO,GAAG,mBAAmB,CAAC;aAC9B;YAED,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,MAAM,CAAC,CAAC,CAAC;QACtG,CAAC;QAED,eAAe,CAAC,MAAc,EAAE,OAAsB;YACrD,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YACzC,IAAI,KAAK,EAAE;gBACV,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;aAC/B;QACF,CAAC;QAED,YAAY,CAAC,MAAc;YAC1B,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YACzC,IAAI,KAAK,EAAE;gBACV,KAAK,CAAC,OAAO,EAAE,CAAC;gBAChB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;aAC9B;QACF,CAAC;QAEO,WAAW,CAAC,MAAc;YACjC,OAAO,CAAC,QAAkC,EAAE,EAAE;gBAC7C,OAAO,IAAI,OAAO,CAAO,OAAO,CAAC,EAAE;oBAClC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,EAAE,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC,CAAC;gBACnD,CAAC,CAAC,CAAC;YACJ,CAAC,CAAC;QACH,CAAC;KACD,CAAA;IA1DY,kBAAkB;QAD9B,CAAA,GAAA,uCAAoB,CAAA,CAAC,8BAAW,CAAC,kBAAkB,CAAC;QASlD,WAAA,2BAAgB,CAAA;QAChB,WAAA,0BAAe,CAAA;OATL,kBAAkB,CA0D9B;IA1DY,gDAAkB","file":"mainThreadProgress.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IProgress, IProgressService, IProgressStep, ProgressLocation, IProgressOptions, IProgressNotificationOptions } from 'vs/platform/progress/common/progress';\nimport { MainThreadProgressShape, MainContext, IExtHostContext, ExtHostProgressShape, ExtHostContext } from '../common/extHost.protocol';\nimport { extHostNamedCustomer } from 'vs/workbench/api/common/extHostCustomers';\nimport { Action } from 'vs/base/common/actions';\nimport { ExtensionIdentifier, IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { localize } from 'vs/nls';\n\nclass ManageExtensionAction extends Action {\n\tconstructor(id: ExtensionIdentifier, label: string, commandService: ICommandService) {\n\t\tsuper(id.value, label, undefined, true, () => {\n\t\t\treturn commandService.executeCommand('_extensions.manage', id.value);\n\t\t});\n\t}\n}\n\n@extHostNamedCustomer(MainContext.MainThreadProgress)\nexport class MainThreadProgress implements MainThreadProgressShape {\n\n\tprivate readonly _progressService: IProgressService;\n\tprivate _progress = new Map<number, { resolve: () => void, progress: IProgress<IProgressStep> }>();\n\tprivate readonly _proxy: ExtHostProgressShape;\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IProgressService progressService: IProgressService,\n\t\t@ICommandService private readonly _commandService: ICommandService\n\t) {\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostProgress);\n\t\tthis._progressService = progressService;\n\t}\n\n\tdispose(): void {\n\t\tthis._progress.forEach(handle => handle.resolve());\n\t\tthis._progress.clear();\n\t}\n\n\t$startProgress(handle: number, options: IProgressOptions, extension?: IExtensionDescription): void {\n\t\tconst task = this._createTask(handle);\n\n\t\tif (options.location === ProgressLocation.Notification && extension && !extension.isUnderDevelopment) {\n\t\t\tconst notificationOptions: IProgressNotificationOptions = {\n\t\t\t\t...options,\n\t\t\t\tlocation: ProgressLocation.Notification,\n\t\t\t\tsecondaryActions: [new ManageExtensionAction(extension.identifier, localize('manageExtension', \"Manage Extension\"), this._commandService)]\n\t\t\t};\n\n\t\t\toptions = notificationOptions;\n\t\t}\n\n\t\tthis._progressService.withProgress(options, task, () => this._proxy.$acceptProgressCanceled(handle));\n\t}\n\n\t$progressReport(handle: number, message: IProgressStep): void {\n\t\tconst entry = this._progress.get(handle);\n\t\tif (entry) {\n\t\t\tentry.progress.report(message);\n\t\t}\n\t}\n\n\t$progressEnd(handle: number): void {\n\t\tconst entry = this._progress.get(handle);\n\t\tif (entry) {\n\t\t\tentry.resolve();\n\t\t\tthis._progress.delete(handle);\n\t\t}\n\t}\n\n\tprivate _createTask(handle: number) {\n\t\treturn (progress: IProgress<IProgressStep>) => {\n\t\t\treturn new Promise<void>(resolve => {\n\t\t\t\tthis._progress.set(handle, { resolve, progress });\n\t\t\t});\n\t\t};\n\t}\n}\n"]}