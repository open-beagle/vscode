{"version":3,"sources":["vs/workbench/api/browser/viewsExtensionPoint.ts"],"names":[],"mappings":"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","file":"viewsExtensionPoint.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { coalesce } from 'vs/base/common/arrays';\nimport { forEach } from 'vs/base/common/collections';\nimport { IJSONSchema } from 'vs/base/common/jsonSchema';\nimport * as resources from 'vs/base/common/resources';\nimport { URI } from 'vs/base/common/uri';\nimport { localize } from 'vs/nls';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { ExtensionIdentifier, IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { ThemeIcon } from 'vs/platform/theme/common/themeService';\nimport { CustomTreeView, TreeViewPane } from 'vs/workbench/browser/parts/views/treeView';\nimport { ViewPaneContainer } from 'vs/workbench/browser/parts/views/viewPaneContainer';\nimport { Extensions as ViewletExtensions, ViewletRegistry } from 'vs/workbench/browser/viewlet';\nimport { Extensions as WorkbenchExtensions, IWorkbenchContribution, IWorkbenchContributionsRegistry } from 'vs/workbench/common/contributions';\nimport { Extensions as ViewContainerExtensions, ITreeViewDescriptor, IViewContainersRegistry, IViewDescriptor, IViewsRegistry, ViewContainer, ViewContainerLocation } from 'vs/workbench/common/views';\nimport { VIEWLET_ID as DEBUG } from 'vs/workbench/contrib/debug/common/debug';\nimport { VIEWLET_ID as EXPLORER } from 'vs/workbench/contrib/files/common/files';\nimport { VIEWLET_ID as REMOTE } from 'vs/workbench/contrib/remote/browser/remoteExplorer';\nimport { VIEWLET_ID as SCM } from 'vs/workbench/contrib/scm/common/scm';\nimport { WebviewViewPane } from 'vs/workbench/contrib/webviewView/browser/webviewViewPane';\nimport { ExtensionMessageCollector, ExtensionsRegistry, IExtensionPoint, IExtensionPointUser } from 'vs/workbench/services/extensions/common/extensionsRegistry';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\n\nexport interface IUserFriendlyViewsContainerDescriptor {\n\tid: string;\n\ttitle: string;\n\ticon: string;\n}\n\nconst viewsContainerSchema: IJSONSchema = {\n\ttype: 'object',\n\tproperties: {\n\t\tid: {\n\t\t\tdescription: localize({ key: 'vscode.extension.contributes.views.containers.id', comment: ['Contribution refers to those that an extension contributes to VS Code through an extension/contribution point. '] }, \"Unique id used to identify the container in which views can be contributed using 'views' contribution point\"),\n\t\t\ttype: 'string',\n\t\t\tpattern: '^[a-zA-Z0-9_-]+$'\n\t\t},\n\t\ttitle: {\n\t\t\tdescription: localize('vscode.extension.contributes.views.containers.title', 'Human readable string used to render the container'),\n\t\t\ttype: 'string'\n\t\t},\n\t\ticon: {\n\t\t\tdescription: localize('vscode.extension.contributes.views.containers.icon', \"Path to the container icon. Icons are 24x24 centered on a 50x40 block and have a fill color of 'rgb(215, 218, 224)' or '#d7dae0'. It is recommended that icons be in SVG, though any image file type is accepted.\"),\n\t\t\ttype: 'string'\n\t\t}\n\t},\n\trequired: ['id', 'title', 'icon']\n};\n\nexport const viewsContainersContribution: IJSONSchema = {\n\tdescription: localize('vscode.extension.contributes.viewsContainers', 'Contributes views containers to the editor'),\n\ttype: 'object',\n\tproperties: {\n\t\t'activitybar': {\n\t\t\tdescription: localize('views.container.activitybar', \"Contribute views containers to Activity Bar\"),\n\t\t\ttype: 'array',\n\t\t\titems: viewsContainerSchema\n\t\t},\n\t\t'panel': {\n\t\t\tdescription: localize('views.container.panel', \"Contribute views containers to Panel\"),\n\t\t\ttype: 'array',\n\t\t\titems: viewsContainerSchema\n\t\t}\n\t}\n};\n\nenum ViewType {\n\tTree = 'tree',\n\tWebview = 'webview'\n}\n\n\ninterface IUserFriendlyViewDescriptor {\n\ttype?: ViewType;\n\n\tid: string;\n\tname: string;\n\twhen?: string;\n\n\ticon?: string;\n\tcontextualTitle?: string;\n\tvisibility?: string;\n\n\t// From 'remoteViewDescriptor' type\n\tgroup?: string;\n\tremoteName?: string | string[];\n}\n\nenum InitialVisibility {\n\tVisible = 'visible',\n\tHidden = 'hidden',\n\tCollapsed = 'collapsed'\n}\n\nconst viewDescriptor: IJSONSchema = {\n\ttype: 'object',\n\trequired: ['id', 'name'],\n\tdefaultSnippets: [{ body: { id: '${1:id}', name: '${2:name}' } }],\n\tproperties: {\n\t\ttype: {\n\t\t\tmarkdownDescription: localize('vscode.extension.contributes.view.type', \"Type of the view. This can either be `tree` for a tree view based view or `webview` for a webview based view. The default is `tree`.\"),\n\t\t\ttype: 'string',\n\t\t\tenum: [\n\t\t\t\t'tree',\n\t\t\t\t'webview',\n\t\t\t],\n\t\t\tmarkdownEnumDescriptions: [\n\t\t\t\tlocalize('vscode.extension.contributes.view.tree', \"The view is backed by a `TreeView` created by `createTreeView`.\"),\n\t\t\t\tlocalize('vscode.extension.contributes.view.webview', \"The view is backed by a `WebviewView` registered by `registerWebviewViewProvider`.\"),\n\t\t\t]\n\t\t},\n\t\tid: {\n\t\t\tmarkdownDescription: localize('vscode.extension.contributes.view.id', 'Identifier of the view. This should be unique across all views. It is recommended to include your extension id as part of the view id. Use this to register a data provider through `vscode.window.registerTreeDataProviderForView` API. Also to trigger activating your extension by registering `onView:${id}` event to `activationEvents`.'),\n\t\t\ttype: 'string'\n\t\t},\n\t\tname: {\n\t\t\tdescription: localize('vscode.extension.contributes.view.name', 'The human-readable name of the view. Will be shown'),\n\t\t\ttype: 'string'\n\t\t},\n\t\twhen: {\n\t\t\tdescription: localize('vscode.extension.contributes.view.when', 'Condition which must be true to show this view'),\n\t\t\ttype: 'string'\n\t\t},\n\t\ticon: {\n\t\t\tdescription: localize('vscode.extension.contributes.view.icon', \"Path to the view icon. View icons are displayed when the name of the view cannot be shown. It is recommended that icons be in SVG, though any image file type is accepted.\"),\n\t\t\ttype: 'string'\n\t\t},\n\t\tcontextualTitle: {\n\t\t\tdescription: localize('vscode.extension.contributes.view.contextualTitle', \"Human-readable context for when the view is moved out of its original location. By default, the view's container name will be used.\"),\n\t\t\ttype: 'string'\n\t\t},\n\t\tvisibility: {\n\t\t\tdescription: localize('vscode.extension.contributes.view.initialState', \"Initial state of the view when the extension is first installed. Once the user has changed the view state by collapsing, moving, or hiding the view, the initial state will not be used again.\"),\n\t\t\ttype: 'string',\n\t\t\tenum: [\n\t\t\t\t'visible',\n\t\t\t\t'hidden',\n\t\t\t\t'collapsed'\n\t\t\t],\n\t\t\tdefault: 'visible',\n\t\t\tenumDescriptions: [\n\t\t\t\tlocalize('vscode.extension.contributes.view.initialState.visible', \"The default initial state for the view. In most containers the view will be expanded, however; some built-in containers (explorer, scm, and debug) show all contributed views collapsed regardless of the `visibility`.\"),\n\t\t\t\tlocalize('vscode.extension.contributes.view.initialState.hidden', \"The view will not be shown in the view container, but will be discoverable through the views menu and other view entry points and can be un-hidden by the user.\"),\n\t\t\t\tlocalize('vscode.extension.contributes.view.initialState.collapsed', \"The view will show in the view container, but will be collapsed.\")\n\t\t\t]\n\t\t}\n\t}\n};\n\nconst remoteViewDescriptor: IJSONSchema = {\n\ttype: 'object',\n\trequired: ['id', 'name'],\n\tproperties: {\n\t\tid: {\n\t\t\tdescription: localize('vscode.extension.contributes.view.id', 'Identifier of the view. This should be unique across all views. It is recommended to include your extension id as part of the view id. Use this to register a data provider through `vscode.window.registerTreeDataProviderForView` API. Also to trigger activating your extension by registering `onView:${id}` event to `activationEvents`.'),\n\t\t\ttype: 'string'\n\t\t},\n\t\tname: {\n\t\t\tdescription: localize('vscode.extension.contributes.view.name', 'The human-readable name of the view. Will be shown'),\n\t\t\ttype: 'string'\n\t\t},\n\t\twhen: {\n\t\t\tdescription: localize('vscode.extension.contributes.view.when', 'Condition which must be true to show this view'),\n\t\t\ttype: 'string'\n\t\t},\n\t\tgroup: {\n\t\t\tdescription: localize('vscode.extension.contributes.view.group', 'Nested group in the viewlet'),\n\t\t\ttype: 'string'\n\t\t},\n\t\tremoteName: {\n\t\t\tdescription: localize('vscode.extension.contributes.view.remoteName', 'The name of the remote type associated with this view'),\n\t\t\ttype: ['string', 'array'],\n\t\t\titems: {\n\t\t\t\ttype: 'string'\n\t\t\t}\n\t\t}\n\t}\n};\nconst viewsContribution: IJSONSchema = {\n\tdescription: localize('vscode.extension.contributes.views', \"Contributes views to the editor\"),\n\ttype: 'object',\n\tproperties: {\n\t\t'explorer': {\n\t\t\tdescription: localize('views.explorer', \"Contributes views to Explorer container in the Activity bar\"),\n\t\t\ttype: 'array',\n\t\t\titems: viewDescriptor,\n\t\t\tdefault: []\n\t\t},\n\t\t'debug': {\n\t\t\tdescription: localize('views.debug', \"Contributes views to Debug container in the Activity bar\"),\n\t\t\ttype: 'array',\n\t\t\titems: viewDescriptor,\n\t\t\tdefault: []\n\t\t},\n\t\t'scm': {\n\t\t\tdescription: localize('views.scm', \"Contributes views to SCM container in the Activity bar\"),\n\t\t\ttype: 'array',\n\t\t\titems: viewDescriptor,\n\t\t\tdefault: []\n\t\t},\n\t\t'test': {\n\t\t\tdescription: localize('views.test', \"Contributes views to Test container in the Activity bar\"),\n\t\t\ttype: 'array',\n\t\t\titems: viewDescriptor,\n\t\t\tdefault: []\n\t\t},\n\t\t'remote': {\n\t\t\tdescription: localize('views.remote', \"Contributes views to Remote container in the Activity bar. To contribute to this container, enableProposedApi needs to be turned on\"),\n\t\t\ttype: 'array',\n\t\t\titems: remoteViewDescriptor,\n\t\t\tdefault: []\n\t\t}\n\t},\n\tadditionalProperties: {\n\t\tdescription: localize('views.contributed', \"Contributes views to contributed views container\"),\n\t\ttype: 'array',\n\t\titems: viewDescriptor,\n\t\tdefault: []\n\t}\n};\n\nexport interface ICustomTreeViewDescriptor extends ITreeViewDescriptor {\n\treadonly extensionId: ExtensionIdentifier;\n\treadonly originalContainerId: string;\n}\n\nexport interface ICustomWebviewViewDescriptor extends IViewDescriptor {\n\treadonly extensionId: ExtensionIdentifier;\n\treadonly originalContainerId: string;\n}\n\nexport type ICustomViewDescriptor = ICustomTreeViewDescriptor | ICustomWebviewViewDescriptor;\n\ntype ViewContainerExtensionPointType = { [loc: string]: IUserFriendlyViewsContainerDescriptor[] };\nconst viewsContainersExtensionPoint: IExtensionPoint<ViewContainerExtensionPointType> = ExtensionsRegistry.registerExtensionPoint<ViewContainerExtensionPointType>({\n\textensionPoint: 'viewsContainers',\n\tjsonSchema: viewsContainersContribution\n});\n\ntype ViewExtensionPointType = { [loc: string]: IUserFriendlyViewDescriptor[] };\nconst viewsExtensionPoint: IExtensionPoint<ViewExtensionPointType> = ExtensionsRegistry.registerExtensionPoint<ViewExtensionPointType>({\n\textensionPoint: 'views',\n\tdeps: [viewsContainersExtensionPoint],\n\tjsonSchema: viewsContribution\n});\n\nconst CUSTOM_VIEWS_START_ORDER = 7;\n\nclass ViewsExtensionHandler implements IWorkbenchContribution {\n\n\tprivate viewContainersRegistry: IViewContainersRegistry;\n\tprivate viewsRegistry: IViewsRegistry;\n\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService\n\t) {\n\t\tthis.viewContainersRegistry = Registry.as<IViewContainersRegistry>(ViewContainerExtensions.ViewContainersRegistry);\n\t\tthis.viewsRegistry = Registry.as<IViewsRegistry>(ViewContainerExtensions.ViewsRegistry);\n\t\tthis.handleAndRegisterCustomViewContainers();\n\t\tthis.handleAndRegisterCustomViews();\n\t}\n\n\tprivate handleAndRegisterCustomViewContainers() {\n\t\tviewsContainersExtensionPoint.setHandler((extensions, { added, removed }) => {\n\t\t\tif (removed.length) {\n\t\t\t\tthis.removeCustomViewContainers(removed);\n\t\t\t}\n\t\t\tif (added.length) {\n\t\t\t\tthis.addCustomViewContainers(added, this.viewContainersRegistry.all);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate addCustomViewContainers(extensionPoints: readonly IExtensionPointUser<ViewContainerExtensionPointType>[], existingViewContainers: ViewContainer[]): void {\n\t\tconst viewContainersRegistry = Registry.as<IViewContainersRegistry>(ViewContainerExtensions.ViewContainersRegistry);\n\t\tlet activityBarOrder = CUSTOM_VIEWS_START_ORDER + viewContainersRegistry.all.filter(v => !!v.extensionId && viewContainersRegistry.getViewContainerLocation(v) === ViewContainerLocation.Sidebar).length;\n\t\tlet panelOrder = 5 + viewContainersRegistry.all.filter(v => !!v.extensionId && viewContainersRegistry.getViewContainerLocation(v) === ViewContainerLocation.Panel).length + 1;\n\t\tfor (let { value, collector, description } of extensionPoints) {\n\t\t\tforEach(value, entry => {\n\t\t\t\tif (!this.isValidViewsContainer(entry.value, collector)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tswitch (entry.key) {\n\t\t\t\t\tcase 'activitybar':\n\t\t\t\t\t\tactivityBarOrder = this.registerCustomViewContainers(entry.value, description, activityBarOrder, existingViewContainers, ViewContainerLocation.Sidebar);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'panel':\n\t\t\t\t\t\tpanelOrder = this.registerCustomViewContainers(entry.value, description, panelOrder, existingViewContainers, ViewContainerLocation.Panel);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate removeCustomViewContainers(extensionPoints: readonly IExtensionPointUser<ViewContainerExtensionPointType>[]): void {\n\t\tconst viewContainersRegistry = Registry.as<IViewContainersRegistry>(ViewContainerExtensions.ViewContainersRegistry);\n\t\tconst removedExtensions: Set<string> = extensionPoints.reduce((result, e) => { result.add(ExtensionIdentifier.toKey(e.description.identifier)); return result; }, new Set<string>());\n\t\tfor (const viewContainer of viewContainersRegistry.all) {\n\t\t\tif (viewContainer.extensionId && removedExtensions.has(ExtensionIdentifier.toKey(viewContainer.extensionId))) {\n\t\t\t\t// move all views in this container into default view container\n\t\t\t\tconst views = this.viewsRegistry.getViews(viewContainer);\n\t\t\t\tif (views.length) {\n\t\t\t\t\tthis.viewsRegistry.moveViews(views, this.getDefaultViewContainer());\n\t\t\t\t}\n\t\t\t\tthis.deregisterCustomViewContainer(viewContainer);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate isValidViewsContainer(viewsContainersDescriptors: IUserFriendlyViewsContainerDescriptor[], collector: ExtensionMessageCollector): boolean {\n\t\tif (!Array.isArray(viewsContainersDescriptors)) {\n\t\t\tcollector.error(localize('viewcontainer requirearray', \"views containers must be an array\"));\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (let descriptor of viewsContainersDescriptors) {\n\t\t\tif (typeof descriptor.id !== 'string') {\n\t\t\t\tcollector.error(localize('requireidstring', \"property `{0}` is mandatory and must be of type `string`. Only alphanumeric characters, '_', and '-' are allowed.\", 'id'));\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (!(/^[a-z0-9_-]+$/i.test(descriptor.id))) {\n\t\t\t\tcollector.error(localize('requireidstring', \"property `{0}` is mandatory and must be of type `string`. Only alphanumeric characters, '_', and '-' are allowed.\", 'id'));\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (typeof descriptor.title !== 'string') {\n\t\t\t\tcollector.error(localize('requirestring', \"property `{0}` is mandatory and must be of type `string`\", 'title'));\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (typeof descriptor.icon !== 'string') {\n\t\t\t\tcollector.error(localize('requirestring', \"property `{0}` is mandatory and must be of type `string`\", 'icon'));\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate registerCustomViewContainers(containers: IUserFriendlyViewsContainerDescriptor[], extension: IExtensionDescription, order: number, existingViewContainers: ViewContainer[], location: ViewContainerLocation): number {\n\t\tcontainers.forEach(descriptor => {\n\t\t\tconst themeIcon = ThemeIcon.fromString(descriptor.icon);\n\n\t\t\tconst icon = themeIcon || resources.joinPath(extension.extensionLocation, descriptor.icon);\n\t\t\tconst id = `workbench.view.extension.${descriptor.id}`;\n\t\t\tconst viewContainer = this.registerCustomViewContainer(id, descriptor.title, icon, order++, extension.identifier, location);\n\n\t\t\t// Move those views that belongs to this container\n\t\t\tif (existingViewContainers.length) {\n\t\t\t\tconst viewsToMove: IViewDescriptor[] = [];\n\t\t\t\tfor (const existingViewContainer of existingViewContainers) {\n\t\t\t\t\tif (viewContainer !== existingViewContainer) {\n\t\t\t\t\t\tviewsToMove.push(...this.viewsRegistry.getViews(existingViewContainer).filter(view => (view as ICustomViewDescriptor).originalContainerId === descriptor.id));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (viewsToMove.length) {\n\t\t\t\t\tthis.viewsRegistry.moveViews(viewsToMove, viewContainer);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn order;\n\t}\n\n\tprivate registerCustomViewContainer(id: string, title: string, icon: URI | ThemeIcon, order: number, extensionId: ExtensionIdentifier | undefined, location: ViewContainerLocation): ViewContainer {\n\t\tlet viewContainer = this.viewContainersRegistry.get(id);\n\n\t\tif (!viewContainer) {\n\n\t\t\tviewContainer = this.viewContainersRegistry.registerViewContainer({\n\t\t\t\tid,\n\t\t\t\ttitle, extensionId,\n\t\t\t\tctorDescriptor: new SyncDescriptor(\n\t\t\t\t\tViewPaneContainer,\n\t\t\t\t\t[id, { mergeViewWithContainerWhenSingleView: true }]\n\t\t\t\t),\n\t\t\t\thideIfEmpty: true,\n\t\t\t\torder,\n\t\t\t\ticon,\n\t\t\t}, location);\n\n\t\t}\n\n\t\treturn viewContainer;\n\t}\n\n\tprivate deregisterCustomViewContainer(viewContainer: ViewContainer): void {\n\t\tthis.viewContainersRegistry.deregisterViewContainer(viewContainer);\n\t\tRegistry.as<ViewletRegistry>(ViewletExtensions.Viewlets).deregisterViewlet(viewContainer.id);\n\t}\n\n\tprivate handleAndRegisterCustomViews() {\n\t\tviewsExtensionPoint.setHandler((extensions, { added, removed }) => {\n\t\t\tif (removed.length) {\n\t\t\t\tthis.removeViews(removed);\n\t\t\t}\n\t\t\tif (added.length) {\n\t\t\t\tthis.addViews(added);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate addViews(extensions: readonly IExtensionPointUser<ViewExtensionPointType>[]): void {\n\t\tconst viewIds: Set<string> = new Set<string>();\n\t\tconst allViewDescriptors: { views: IViewDescriptor[], viewContainer: ViewContainer }[] = [];\n\n\t\tfor (const extension of extensions) {\n\t\t\tconst { value, collector } = extension;\n\n\t\t\tforEach(value, entry => {\n\t\t\t\tif (!this.isValidViewDescriptors(entry.value, collector)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (entry.key === 'remote' && !extension.description.enableProposedApi) {\n\t\t\t\t\tcollector.warn(localize('ViewContainerRequiresProposedAPI', \"View container '{0}' requires 'enableProposedApi' turned on to be added to 'Remote'.\", entry.key));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst viewContainer = this.getViewContainer(entry.key);\n\t\t\t\tif (!viewContainer) {\n\t\t\t\t\tcollector.warn(localize('ViewContainerDoesnotExist', \"View container '{0}' does not exist and all views registered to it will be added to 'Explorer'.\", entry.key));\n\t\t\t\t}\n\t\t\t\tconst container = viewContainer || this.getDefaultViewContainer();\n\t\t\t\tconst viewDescriptors = coalesce(entry.value.map((item, index) => {\n\t\t\t\t\t// validate\n\t\t\t\t\tif (viewIds.has(item.id)) {\n\t\t\t\t\t\tcollector.error(localize('duplicateView1', \"Cannot register multiple views with same id `{0}`\", item.id));\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\tif (this.viewsRegistry.getView(item.id) !== null) {\n\t\t\t\t\t\tcollector.error(localize('duplicateView2', \"A view with id `{0}` is already registered.\", item.id));\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst order = ExtensionIdentifier.equals(extension.description.identifier, container.extensionId)\n\t\t\t\t\t\t? index + 1\n\t\t\t\t\t\t: container.viewOrderDelegate\n\t\t\t\t\t\t\t? container.viewOrderDelegate.getOrder(item.group)\n\t\t\t\t\t\t\t: undefined;\n\n\t\t\t\t\tlet icon: ThemeIcon | URI | undefined;\n\t\t\t\t\tif (typeof item.icon === 'string') {\n\t\t\t\t\t\ticon = ThemeIcon.fromString(item.icon) || resources.joinPath(extension.description.extensionLocation, item.icon);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst initialVisibility = this.convertInitialVisibility(item.visibility);\n\n\t\t\t\t\tconst type = this.getViewType(item.type);\n\t\t\t\t\tif (!type) {\n\t\t\t\t\t\tcollector.error(localize('unknownViewType', \"Unknown view type `{0}`.\", item.type));\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst viewDescriptor = <ICustomTreeViewDescriptor>{\n\t\t\t\t\t\ttype: type,\n\t\t\t\t\t\tctorDescriptor: type === ViewType.Tree ? new SyncDescriptor(TreeViewPane) : new SyncDescriptor(WebviewViewPane),\n\t\t\t\t\t\tid: item.id,\n\t\t\t\t\t\tname: item.name,\n\t\t\t\t\t\twhen: ContextKeyExpr.deserialize(item.when),\n\t\t\t\t\t\tcontainerIcon: icon || viewContainer?.icon,\n\t\t\t\t\t\tcontainerTitle: item.contextualTitle || viewContainer?.title,\n\t\t\t\t\t\tcanToggleVisibility: true,\n\t\t\t\t\t\tcanMoveView: viewContainer?.id !== REMOTE,\n\t\t\t\t\t\ttreeView: type === ViewType.Tree ? this.instantiationService.createInstance(CustomTreeView, item.id, item.name) : undefined,\n\t\t\t\t\t\tcollapsed: this.showCollapsed(container) || initialVisibility === InitialVisibility.Collapsed,\n\t\t\t\t\t\torder: order,\n\t\t\t\t\t\textensionId: extension.description.identifier,\n\t\t\t\t\t\toriginalContainerId: entry.key,\n\t\t\t\t\t\tgroup: item.group,\n\t\t\t\t\t\tremoteAuthority: item.remoteName || (<any>item).remoteAuthority, // TODO@roblou - delete after remote extensions are updated\n\t\t\t\t\t\thideByDefault: initialVisibility === InitialVisibility.Hidden,\n\t\t\t\t\t\tworkspace: viewContainer?.id === REMOTE ? true : undefined\n\t\t\t\t\t};\n\n\n\t\t\t\t\tviewIds.add(viewDescriptor.id);\n\t\t\t\t\treturn viewDescriptor;\n\t\t\t\t}));\n\n\t\t\t\tallViewDescriptors.push({ viewContainer: container, views: viewDescriptors });\n\n\t\t\t});\n\t\t}\n\n\t\tthis.viewsRegistry.registerViews2(allViewDescriptors);\n\t}\n\n\tprivate getViewType(type: string | undefined): ViewType | undefined {\n\t\tif (type === ViewType.Webview) {\n\t\t\treturn ViewType.Webview;\n\t\t}\n\t\tif (!type || type === ViewType.Tree) {\n\t\t\treturn ViewType.Tree;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate getDefaultViewContainer(): ViewContainer {\n\t\treturn this.viewContainersRegistry.get(EXPLORER)!;\n\t}\n\n\tprivate removeViews(extensions: readonly IExtensionPointUser<ViewExtensionPointType>[]): void {\n\t\tconst removedExtensions: Set<string> = extensions.reduce((result, e) => { result.add(ExtensionIdentifier.toKey(e.description.identifier)); return result; }, new Set<string>());\n\t\tfor (const viewContainer of this.viewContainersRegistry.all) {\n\t\t\tconst removedViews = this.viewsRegistry.getViews(viewContainer).filter(v => (v as ICustomViewDescriptor).extensionId && removedExtensions.has(ExtensionIdentifier.toKey((v as ICustomViewDescriptor).extensionId)));\n\t\t\tif (removedViews.length) {\n\t\t\t\tthis.viewsRegistry.deregisterViews(removedViews, viewContainer);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate convertInitialVisibility(value: any): InitialVisibility | undefined {\n\t\tif (Object.values(InitialVisibility).includes(value)) {\n\t\t\treturn value;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate isValidViewDescriptors(viewDescriptors: IUserFriendlyViewDescriptor[], collector: ExtensionMessageCollector): boolean {\n\t\tif (!Array.isArray(viewDescriptors)) {\n\t\t\tcollector.error(localize('requirearray', \"views must be an array\"));\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (let descriptor of viewDescriptors) {\n\t\t\tif (typeof descriptor.id !== 'string') {\n\t\t\t\tcollector.error(localize('requirestring', \"property `{0}` is mandatory and must be of type `string`\", 'id'));\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (typeof descriptor.name !== 'string') {\n\t\t\t\tcollector.error(localize('requirestring', \"property `{0}` is mandatory and must be of type `string`\", 'name'));\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (descriptor.when && typeof descriptor.when !== 'string') {\n\t\t\t\tcollector.error(localize('optstring', \"property `{0}` can be omitted or must be of type `string`\", 'when'));\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (descriptor.icon && typeof descriptor.icon !== 'string') {\n\t\t\t\tcollector.error(localize('optstring', \"property `{0}` can be omitted or must be of type `string`\", 'icon'));\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (descriptor.contextualTitle && typeof descriptor.contextualTitle !== 'string') {\n\t\t\t\tcollector.error(localize('optstring', \"property `{0}` can be omitted or must be of type `string`\", 'contextualTitle'));\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (descriptor.visibility && !this.convertInitialVisibility(descriptor.visibility)) {\n\t\t\t\tcollector.error(localize('optenum', \"property `{0}` can be omitted or must be one of {1}\", 'visibility', Object.values(InitialVisibility).join(', ')));\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate getViewContainer(value: string): ViewContainer | undefined {\n\t\tswitch (value) {\n\t\t\tcase 'explorer': return this.viewContainersRegistry.get(EXPLORER);\n\t\t\tcase 'debug': return this.viewContainersRegistry.get(DEBUG);\n\t\t\tcase 'scm': return this.viewContainersRegistry.get(SCM);\n\t\t\tcase 'remote': return this.viewContainersRegistry.get(REMOTE);\n\t\t\tdefault: return this.viewContainersRegistry.get(`workbench.view.extension.${value}`);\n\t\t}\n\t}\n\n\tprivate showCollapsed(container: ViewContainer): boolean {\n\t\tswitch (container.id) {\n\t\t\tcase EXPLORER:\n\t\t\tcase SCM:\n\t\t\tcase DEBUG:\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\n\nconst workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench);\nworkbenchRegistry.registerWorkbenchContribution(ViewsExtensionHandler, LifecyclePhase.Starting);\n"]}