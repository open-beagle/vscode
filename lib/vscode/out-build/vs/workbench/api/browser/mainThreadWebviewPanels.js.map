{"version":3,"file":"mainThreadWebviewPanels.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/api/browser/mainThreadWebviewPanels.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { Disposable, dispose, IDisposable } from 'vs/base/common/lifecycle';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { MainThreadWebviews, reviveWebviewContentOptions, reviveWebviewExtension } from 'vs/workbench/api/browser/mainThreadWebviews';\nimport * as extHostProtocol from 'vs/workbench/api/common/extHost.protocol';\nimport { EditorGroupColumn, editorGroupToViewColumn, IEditorInput, viewColumnToEditorGroup } from 'vs/workbench/common/editor';\nimport { DiffEditorInput } from 'vs/workbench/common/editor/diffEditorInput';\nimport { WebviewOptions } from 'vs/workbench/contrib/webview/browser/webview';\nimport { WebviewInput } from 'vs/workbench/contrib/webviewPanel/browser/webviewEditorInput';\nimport { WebviewIcons } from 'vs/workbench/contrib/webviewPanel/browser/webviewIconManager';\nimport { ICreateWebViewShowOptions, IWebviewWorkbenchService } from 'vs/workbench/contrib/webviewPanel/browser/webviewWorkbenchService';\nimport { IEditorGroup, IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\n\n/**\n * Bi-directional map between webview handles and inputs.\n */\nclass WebviewInputStore {\n\tprivate readonly _handlesToInputs = new Map<string, WebviewInput>();\n\tprivate readonly _inputsToHandles = new Map<WebviewInput, string>();\n\n\tpublic add(handle: string, input: WebviewInput): void {\n\t\tthis._handlesToInputs.set(handle, input);\n\t\tthis._inputsToHandles.set(input, handle);\n\t}\n\n\tpublic getHandleForInput(input: WebviewInput): string | undefined {\n\t\treturn this._inputsToHandles.get(input);\n\t}\n\n\tpublic getInputForHandle(handle: string): WebviewInput | undefined {\n\t\treturn this._handlesToInputs.get(handle);\n\t}\n\n\tpublic delete(handle: string): void {\n\t\tconst input = this.getInputForHandle(handle);\n\t\tthis._handlesToInputs.delete(handle);\n\t\tif (input) {\n\t\t\tthis._inputsToHandles.delete(input);\n\t\t}\n\t}\n\n\tpublic get size(): number {\n\t\treturn this._handlesToInputs.size;\n\t}\n\n\t[Symbol.iterator](): Iterator<WebviewInput> {\n\t\treturn this._handlesToInputs.values();\n\t}\n}\n\nclass WebviewViewTypeTransformer {\n\tpublic constructor(\n\t\tpublic readonly prefix: string,\n\t) { }\n\n\tpublic fromExternal(viewType: string): string {\n\t\treturn this.prefix + viewType;\n\t}\n\n\tpublic toExternal(viewType: string): string | undefined {\n\t\treturn viewType.startsWith(this.prefix)\n\t\t\t? viewType.substr(this.prefix.length)\n\t\t\t: undefined;\n\t}\n}\n\nexport class MainThreadWebviewPanels extends Disposable implements extHostProtocol.MainThreadWebviewPanelsShape {\n\n\tprivate readonly webviewPanelViewType = new WebviewViewTypeTransformer('mainThreadWebview-');\n\n\tprivate readonly _proxy: extHostProtocol.ExtHostWebviewPanelsShape;\n\n\tprivate readonly _webviewInputs = new WebviewInputStore();\n\n\tprivate readonly _editorProviders = new Map<string, IDisposable>();\n\n\tprivate readonly _revivers = new Map<string, IDisposable>();\n\n\tconstructor(\n\t\tcontext: extHostProtocol.IExtHostContext,\n\t\tprivate readonly _mainThreadWebviews: MainThreadWebviews,\n\t\t@IExtensionService extensionService: IExtensionService,\n\t\t@IEditorGroupsService private readonly _editorGroupService: IEditorGroupsService,\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t\t@IWebviewWorkbenchService private readonly _webviewWorkbenchService: IWebviewWorkbenchService,\n\t) {\n\t\tsuper();\n\n\t\tthis._proxy = context.getProxy(extHostProtocol.ExtHostContext.ExtHostWebviewPanels);\n\n\t\tthis._register(_editorService.onDidActiveEditorChange(() => {\n\t\t\tthis.updateWebviewViewStates(this._editorService.activeEditor);\n\t\t}));\n\n\t\tthis._register(_editorService.onDidVisibleEditorsChange(() => {\n\t\t\tthis.updateWebviewViewStates(this._editorService.activeEditor);\n\t\t}));\n\n\t\tthis._register(_webviewWorkbenchService.onDidChangeActiveWebviewEditor(input => {\n\t\t\tthis.updateWebviewViewStates(input);\n\t\t}));\n\n\t\t// This reviver's only job is to activate extensions.\n\t\t// This should trigger the real reviver to be registered from the extension host side.\n\t\tthis._register(_webviewWorkbenchService.registerResolver({\n\t\t\tcanResolve: (webview: WebviewInput) => {\n\t\t\t\tconst viewType = this.webviewPanelViewType.toExternal(webview.viewType);\n\t\t\t\tif (typeof viewType === 'string') {\n\t\t\t\t\textensionService.activateByEvent(`onWebviewPanel:${viewType}`);\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tresolveWebview: () => { throw new Error('not implemented'); }\n\t\t}));\n\t}\n\n\toverride dispose() {\n\t\tsuper.dispose();\n\n\t\tdispose(this._editorProviders.values());\n\t\tthis._editorProviders.clear();\n\n\t\tdispose(this._revivers.values());\n\t\tthis._revivers.clear();\n\t}\n\n\tpublic get webviewInputs(): Iterable<WebviewInput> { return this._webviewInputs; }\n\n\tpublic addWebviewInput(handle: extHostProtocol.WebviewHandle, input: WebviewInput, options: { serializeBuffersForPostMessage: boolean }): void {\n\t\tthis._webviewInputs.add(handle, input);\n\t\tthis._mainThreadWebviews.addWebview(handle, input.webview, options);\n\n\t\tinput.webview.onDidDispose(() => {\n\t\t\tthis._proxy.$onDidDisposeWebviewPanel(handle).finally(() => {\n\t\t\t\tthis._webviewInputs.delete(handle);\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic $createWebviewPanel(\n\t\textensionData: extHostProtocol.WebviewExtensionDescription,\n\t\thandle: extHostProtocol.WebviewHandle,\n\t\tviewType: string,\n\t\tinitData: {\n\t\t\ttitle: string;\n\t\t\twebviewOptions: extHostProtocol.IWebviewOptions;\n\t\t\tpanelOptions: extHostProtocol.IWebviewPanelOptions;\n\t\t\tserializeBuffersForPostMessage: boolean;\n\t\t},\n\t\tshowOptions: { viewColumn?: EditorGroupColumn, preserveFocus?: boolean; },\n\t): void {\n\t\tconst mainThreadShowOptions: ICreateWebViewShowOptions = Object.create(null);\n\t\tif (showOptions) {\n\t\t\tmainThreadShowOptions.preserveFocus = !!showOptions.preserveFocus;\n\t\t\tmainThreadShowOptions.group = viewColumnToEditorGroup(this._editorGroupService, showOptions.viewColumn);\n\t\t}\n\n\t\tconst extension = reviveWebviewExtension(extensionData);\n\n\t\tconst webview = this._webviewWorkbenchService.createWebview(handle, this.webviewPanelViewType.fromExternal(viewType), initData.title, mainThreadShowOptions, reviveWebviewOptions(initData.panelOptions), reviveWebviewContentOptions(initData.webviewOptions), extension);\n\t\tthis.addWebviewInput(handle, webview, { serializeBuffersForPostMessage: initData.serializeBuffersForPostMessage });\n\n\t\t/* __GDPR__\n\t\t\t\"webviews:createWebviewPanel\" : {\n\t\t\t\t\"extensionId\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\t\t\t}\n\t\t*/\n\t\tthis._telemetryService.publicLog('webviews:createWebviewPanel', { extensionId: extension.id.value });\n\t}\n\n\tpublic $disposeWebview(handle: extHostProtocol.WebviewHandle): void {\n\t\tconst webview = this.getWebviewInput(handle);\n\t\twebview.dispose();\n\t}\n\n\tpublic $setTitle(handle: extHostProtocol.WebviewHandle, value: string): void {\n\t\tconst webview = this.getWebviewInput(handle);\n\t\twebview.setName(value);\n\t}\n\n\tpublic $setIconPath(handle: extHostProtocol.WebviewHandle, value: { light: UriComponents, dark: UriComponents; } | undefined): void {\n\t\tconst webview = this.getWebviewInput(handle);\n\t\twebview.iconPath = reviveWebviewIcon(value);\n\t}\n\n\tpublic $reveal(handle: extHostProtocol.WebviewHandle, showOptions: extHostProtocol.WebviewPanelShowOptions): void {\n\t\tconst webview = this.getWebviewInput(handle);\n\t\tif (webview.isDisposed()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst targetGroup = this._editorGroupService.getGroup(viewColumnToEditorGroup(this._editorGroupService, showOptions.viewColumn)) || this._editorGroupService.getGroup(webview.group || 0);\n\t\tif (targetGroup) {\n\t\t\tthis._webviewWorkbenchService.revealWebview(webview, targetGroup, !!showOptions.preserveFocus);\n\t\t}\n\t}\n\n\tpublic $registerSerializer(viewType: string, options: { serializeBuffersForPostMessage: boolean }): void {\n\t\tif (this._revivers.has(viewType)) {\n\t\t\tthrow new Error(`Reviver for ${viewType} already registered`);\n\t\t}\n\n\t\tthis._revivers.set(viewType, this._webviewWorkbenchService.registerResolver({\n\t\t\tcanResolve: (webviewInput) => {\n\t\t\t\treturn webviewInput.viewType === this.webviewPanelViewType.fromExternal(viewType);\n\t\t\t},\n\t\t\tresolveWebview: async (webviewInput): Promise<void> => {\n\t\t\t\tconst viewType = this.webviewPanelViewType.toExternal(webviewInput.viewType);\n\t\t\t\tif (!viewType) {\n\t\t\t\t\twebviewInput.webview.html = this._mainThreadWebviews.getWebviewResolvedFailedContent(webviewInput.viewType);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst handle = webviewInput.id;\n\n\t\t\t\tthis.addWebviewInput(handle, webviewInput, options);\n\n\t\t\t\tlet state = undefined;\n\t\t\t\tif (webviewInput.webview.state) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tstate = JSON.parse(webviewInput.webview.state);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tconsole.error('Could not load webview state', e, webviewInput.webview.state);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tawait this._proxy.$deserializeWebviewPanel(handle, viewType, {\n\t\t\t\t\t\ttitle: webviewInput.getTitle(),\n\t\t\t\t\t\tstate,\n\t\t\t\t\t\tpanelOptions: webviewInput.webview.options,\n\t\t\t\t\t\twebviewOptions: webviewInput.webview.contentOptions,\n\t\t\t\t\t}, editorGroupToViewColumn(this._editorGroupService, webviewInput.group || 0));\n\t\t\t\t} catch (error) {\n\t\t\t\t\tonUnexpectedError(error);\n\t\t\t\t\twebviewInput.webview.html = this._mainThreadWebviews.getWebviewResolvedFailedContent(viewType);\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t}\n\n\tpublic $unregisterSerializer(viewType: string): void {\n\t\tconst reviver = this._revivers.get(viewType);\n\t\tif (!reviver) {\n\t\t\tthrow new Error(`No reviver for ${viewType} registered`);\n\t\t}\n\n\t\treviver.dispose();\n\t\tthis._revivers.delete(viewType);\n\t}\n\n\tprivate updateWebviewViewStates(activeEditorInput: IEditorInput | undefined) {\n\t\tif (!this._webviewInputs.size) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewStates: extHostProtocol.WebviewPanelViewStateData = {};\n\n\t\tconst updateViewStatesForInput = (group: IEditorGroup, topLevelInput: IEditorInput, editorInput: IEditorInput) => {\n\t\t\tif (!(editorInput instanceof WebviewInput)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\teditorInput.updateGroup(group.id);\n\n\t\t\tconst handle = this._webviewInputs.getHandleForInput(editorInput);\n\t\t\tif (handle) {\n\t\t\t\tviewStates[handle] = {\n\t\t\t\t\tvisible: topLevelInput === group.activeEditor,\n\t\t\t\t\tactive: editorInput === activeEditorInput,\n\t\t\t\t\tposition: editorGroupToViewColumn(this._editorGroupService, group.id),\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\n\t\tfor (const group of this._editorGroupService.groups) {\n\t\t\tfor (const input of group.editors) {\n\t\t\t\tif (input instanceof DiffEditorInput) {\n\t\t\t\t\tupdateViewStatesForInput(group, input, input.primary);\n\t\t\t\t\tupdateViewStatesForInput(group, input, input.secondary);\n\t\t\t\t} else {\n\t\t\t\t\tupdateViewStatesForInput(group, input, input);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (Object.keys(viewStates).length) {\n\t\t\tthis._proxy.$onDidChangeWebviewPanelViewStates(viewStates);\n\t\t}\n\t}\n\n\tprivate getWebviewInput(handle: extHostProtocol.WebviewHandle): WebviewInput {\n\t\tconst webview = this.tryGetWebviewInput(handle);\n\t\tif (!webview) {\n\t\t\tthrow new Error(`Unknown webview handle:${handle}`);\n\t\t}\n\t\treturn webview;\n\t}\n\n\tprivate tryGetWebviewInput(handle: extHostProtocol.WebviewHandle): WebviewInput | undefined {\n\t\treturn this._webviewInputs.getInputForHandle(handle);\n\t}\n}\n\nfunction reviveWebviewIcon(\n\tvalue: { light: UriComponents, dark: UriComponents; } | undefined\n): WebviewIcons | undefined {\n\treturn value\n\t\t? { light: URI.revive(value.light), dark: URI.revive(value.dark) }\n\t\t: undefined;\n}\n\nfunction reviveWebviewOptions(panelOptions: extHostProtocol.IWebviewPanelOptions): WebviewOptions {\n\treturn {\n\t\tenableFindWidget: panelOptions.enableFindWidget,\n\t\tretainContextWhenHidden: panelOptions.retainContextWhenHidden,\n\t};\n}\n"]}