{"version":3,"file":"mainThreadTesting.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/api/browser/mainThreadTesting.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { Disposable, IDisposable } from 'vs/base/common/lifecycle';\nimport { isDefined } from 'vs/base/common/types';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { Range } from 'vs/editor/common/core/range';\nimport { extHostNamedCustomer } from 'vs/workbench/api/common/extHostCustomers';\nimport { TestResultState } from 'vs/workbench/api/common/extHostTypes';\nimport { ExtensionRunTestsRequest, getTestSubscriptionKey, ITestItem, ITestMessage, ITestRunTask, RunTestsRequest, TestDiffOpType, TestsDiff } from 'vs/workbench/contrib/testing/common/testCollection';\nimport { LiveTestResult } from 'vs/workbench/contrib/testing/common/testResult';\nimport { ITestResultService } from 'vs/workbench/contrib/testing/common/testResultService';\nimport { ITestRootProvider, ITestService } from 'vs/workbench/contrib/testing/common/testService';\nimport { ExtHostContext, ExtHostTestingResource, ExtHostTestingShape, IExtHostContext, MainContext, MainThreadTestingShape } from '../common/extHost.protocol';\n\nconst reviveDiff = (diff: TestsDiff) => {\n\tfor (const entry of diff) {\n\t\tif (entry[0] === TestDiffOpType.Add || entry[0] === TestDiffOpType.Update) {\n\t\t\tconst item = entry[1];\n\t\t\tif (item.item?.uri) {\n\t\t\t\titem.item.uri = URI.revive(item.item.uri);\n\t\t\t}\n\t\t\tif (item.item?.range) {\n\t\t\t\titem.item.range = Range.lift(item.item.range);\n\t\t\t}\n\t\t}\n\t}\n};\n\n@extHostNamedCustomer(MainContext.MainThreadTesting)\nexport class MainThreadTesting extends Disposable implements MainThreadTestingShape, ITestRootProvider {\n\tprivate readonly proxy: ExtHostTestingShape;\n\tprivate readonly testSubscriptions = new Map<string, IDisposable>();\n\tprivate readonly testProviderRegistrations = new Map<string, IDisposable>();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@ITestService private readonly testService: ITestService,\n\t\t@ITestResultService private readonly resultService: ITestResultService,\n\t) {\n\t\tsuper();\n\t\tthis.proxy = extHostContext.getProxy(ExtHostContext.ExtHostTesting);\n\t\tthis._register(this.testService.onShouldSubscribe(args => this.proxy.$subscribeToTests(args.resource, args.uri)));\n\t\tthis._register(this.testService.onShouldUnsubscribe(args => this.proxy.$unsubscribeFromTests(args.resource, args.uri)));\n\n\t\tconst prevResults = resultService.results.map(r => r.toJSON()).filter(isDefined);\n\t\tif (prevResults.length) {\n\t\t\tthis.proxy.$publishTestResults(prevResults);\n\t\t}\n\n\t\tthis._register(resultService.onResultsChanged(evt => {\n\t\t\tconst results = 'completed' in evt ? evt.completed : ('inserted' in evt ? evt.inserted : undefined);\n\t\t\tconst serialized = results?.toJSON();\n\t\t\tif (serialized) {\n\t\t\t\tthis.proxy.$publishTestResults([serialized]);\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(testService.registerRootProvider(this));\n\n\t\tfor (const { resource, uri } of this.testService.subscriptions) {\n\t\t\tthis.proxy.$subscribeToTests(resource, uri);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\t$addTestsToRun(runId: string, tests: ITestItem[]): void {\n\t\tfor (const test of tests) {\n\t\t\ttest.uri = URI.revive(test.uri);\n\t\t\tif (test.range) {\n\t\t\t\ttest.range = Range.lift(test.range);\n\t\t\t}\n\t\t}\n\n\t\tthis.withLiveRun(runId, r => r.addTestChainToRun(tests));\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\t$startedExtensionTestRun(req: ExtensionRunTestsRequest): void {\n\t\tthis.resultService.createLiveResult(req);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\t$startedTestRunTask(runId: string, task: ITestRunTask): void {\n\t\tthis.withLiveRun(runId, r => r.addTask(task));\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\t$finishedTestRunTask(runId: string, taskId: string): void {\n\t\tthis.withLiveRun(runId, r => r.markTaskComplete(taskId));\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\t$finishedExtensionTestRun(runId: string): void {\n\t\tthis.withLiveRun(runId, r => r.markComplete());\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic $updateTestStateInRun(runId: string, taskId: string, testId: string, state: TestResultState, duration?: number): void {\n\t\tthis.withLiveRun(runId, r => r.updateState(testId, taskId, state, duration));\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic $appendOutputToRun(runId: string, _taskId: string, output: VSBuffer): void {\n\t\tthis.withLiveRun(runId, r => r.output.append(output));\n\t}\n\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic $appendTestMessageInRun(runId: string, taskId: string, testId: string, message: ITestMessage): void {\n\t\tconst r = this.resultService.getResult(runId);\n\t\tif (r && r instanceof LiveTestResult) {\n\t\t\tif (message.location) {\n\t\t\t\tmessage.location.uri = URI.revive(message.location.uri);\n\t\t\t\tmessage.location.range = Range.lift(message.location.range);\n\t\t\t}\n\n\t\t\tr.appendMessage(testId, taskId, message);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic $registerTestController(id: string) {\n\t\tconst disposable = this.testService.registerTestController(id, {\n\t\t\trunTests: (req, token) => this.proxy.$runTestsForProvider(req, token),\n\t\t\tlookupTest: test => this.proxy.$lookupTest(test),\n\t\t\texpandTest: (src, levels) => this.proxy.$expandTest(src, isFinite(levels) ? levels : -1),\n\t\t});\n\n\t\tthis.testProviderRegistrations.set(id, disposable);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic $unregisterTestController(id: string) {\n\t\tthis.testProviderRegistrations.get(id)?.dispose();\n\t\tthis.testProviderRegistrations.delete(id);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic $subscribeToDiffs(resource: ExtHostTestingResource, uriComponents: UriComponents): void {\n\t\tconst uri = URI.revive(uriComponents);\n\t\tconst disposable = this.testService.subscribeToDiffs(resource, uri,\n\t\t\tdiff => this.proxy.$acceptDiff(resource, uriComponents, diff));\n\t\tthis.testSubscriptions.set(getTestSubscriptionKey(resource, uri), disposable);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic $unsubscribeFromDiffs(resource: ExtHostTestingResource, uriComponents: UriComponents): void {\n\t\tconst key = getTestSubscriptionKey(resource, URI.revive(uriComponents));\n\t\tthis.testSubscriptions.get(key)?.dispose();\n\t\tthis.testSubscriptions.delete(key);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic $publishDiff(resource: ExtHostTestingResource, uri: UriComponents, diff: TestsDiff): void {\n\t\treviveDiff(diff);\n\t\tthis.testService.publishDiff(resource, URI.revive(uri), diff);\n\t}\n\n\tpublic async $runTests(req: RunTestsRequest, token: CancellationToken): Promise<string> {\n\t\tconst result = await this.testService.runTests(req, token);\n\t\treturn result.id;\n\t}\n\n\tpublic override dispose() {\n\t\tsuper.dispose();\n\t\tfor (const subscription of this.testSubscriptions.values()) {\n\t\t\tsubscription.dispose();\n\t\t}\n\t\tthis.testSubscriptions.clear();\n\t}\n\n\tprivate withLiveRun<T>(runId: string, fn: (run: LiveTestResult) => T): T | undefined {\n\t\tconst r = this.resultService.getResult(runId);\n\t\treturn r && r instanceof LiveTestResult ? fn(r) : undefined;\n\t}\n}\n"]}