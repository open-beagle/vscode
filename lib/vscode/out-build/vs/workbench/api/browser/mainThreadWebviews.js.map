{"version":3,"sources":["vs/workbench/api/browser/mainThreadWebviews.ts"],"names":[],"mappings":"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","file":"mainThreadWebviews.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { Disposable, DisposableStore } from 'vs/base/common/lifecycle';\nimport { Schemas } from 'vs/base/common/network';\nimport { isWeb } from 'vs/base/common/platform';\nimport { escape } from 'vs/base/common/strings';\nimport { URI } from 'vs/base/common/uri';\nimport { localize } from 'vs/nls';\nimport { ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport * as extHostProtocol from 'vs/workbench/api/common/extHost.protocol';\nimport { serializeMessage } from 'vs/workbench/api/common/extHostWebview';\nimport { deserializeWebviewMessage } from 'vs/workbench/api/common/extHostWebviewMessaging';\nimport { Webview, WebviewContentOptions, WebviewExtensionDescription, WebviewOverlay } from 'vs/workbench/contrib/webview/browser/webview';\n\nexport class MainThreadWebviews extends Disposable implements extHostProtocol.MainThreadWebviewsShape {\n\n\tprivate static readonly standardSupportedLinkSchemes = new Set([\n\t\tSchemas.http,\n\t\tSchemas.https,\n\t\tSchemas.mailto,\n\t\tSchemas.vscode,\n\t\t'vscode-insider',\n\t]);\n\n\tprivate readonly _proxy: extHostProtocol.ExtHostWebviewsShape;\n\n\tprivate readonly _webviews = new Map<string, Webview>();\n\n\tconstructor(\n\t\tcontext: extHostProtocol.IExtHostContext,\n\t\t@IOpenerService private readonly _openerService: IOpenerService,\n\t\t@IProductService private readonly _productService: IProductService,\n\t) {\n\t\tsuper();\n\n\t\tthis._proxy = context.getProxy(extHostProtocol.ExtHostContext.ExtHostWebviews);\n\t}\n\n\tpublic addWebview(handle: extHostProtocol.WebviewHandle, webview: WebviewOverlay, options: { serializeBuffersForPostMessage: boolean }): void {\n\t\tif (this._webviews.has(handle)) {\n\t\t\tthrow new Error('Webview already registered');\n\t\t}\n\n\t\tthis._webviews.set(handle, webview);\n\t\tthis.hookupWebviewEventDelegate(handle, webview, options);\n\t}\n\n\tpublic $setHtml(handle: extHostProtocol.WebviewHandle, value: string): void {\n\t\tconst webview = this.getWebview(handle);\n\t\twebview.html = value;\n\t}\n\n\tpublic $setOptions(handle: extHostProtocol.WebviewHandle, options: extHostProtocol.IWebviewOptions): void {\n\t\tconst webview = this.getWebview(handle);\n\t\twebview.contentOptions = reviveWebviewContentOptions(options);\n\t}\n\n\tpublic async $postMessage(handle: extHostProtocol.WebviewHandle, jsonMessage: string, ...buffers: VSBuffer[]): Promise<boolean> {\n\t\tconst webview = this.getWebview(handle);\n\t\tconst { message, arrayBuffers } = deserializeWebviewMessage(jsonMessage, buffers);\n\t\twebview.postMessage(message, arrayBuffers);\n\t\treturn true;\n\t}\n\n\tprivate hookupWebviewEventDelegate(handle: extHostProtocol.WebviewHandle, webview: WebviewOverlay, options: { serializeBuffersForPostMessage: boolean }) {\n\t\tconst disposables = new DisposableStore();\n\n\t\tdisposables.add(webview.onDidClickLink((uri) => this.onDidClickLink(handle, uri)));\n\n\t\tdisposables.add(webview.onMessage((message) => {\n\t\t\tconst serialized = serializeMessage(message.message, options);\n\t\t\tthis._proxy.$onMessage(handle, serialized.message, ...serialized.buffers);\n\t\t}));\n\n\t\tdisposables.add(webview.onMissingCsp((extension: ExtensionIdentifier) => this._proxy.$onMissingCsp(handle, extension.value)));\n\n\t\tdisposables.add(webview.onDidDispose(() => {\n\t\t\tdisposables.dispose();\n\t\t\tthis._webviews.delete(handle);\n\t\t}));\n\t}\n\n\tprivate onDidClickLink(handle: extHostProtocol.WebviewHandle, link: string): void {\n\t\tconst webview = this.getWebview(handle);\n\t\tif (this.isSupportedLink(webview, URI.parse(link))) {\n\t\t\tthis._openerService.open(link, { fromUserGesture: true, allowContributedOpeners: true, allowCommands: true });\n\t\t}\n\t}\n\n\tprivate isSupportedLink(webview: Webview, link: URI): boolean {\n\t\tif (MainThreadWebviews.standardSupportedLinkSchemes.has(link.scheme)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!isWeb && this._productService.urlProtocol === link.scheme) {\n\t\t\treturn true;\n\t\t}\n\t\treturn !!webview.contentOptions.enableCommandUris && link.scheme === Schemas.command;\n\t}\n\n\tprivate getWebview(handle: extHostProtocol.WebviewHandle): Webview {\n\t\tconst webview = this._webviews.get(handle);\n\t\tif (!webview) {\n\t\t\tthrow new Error(`Unknown webview handle:${handle}`);\n\t\t}\n\t\treturn webview;\n\t}\n\n\tpublic getWebviewResolvedFailedContent(viewType: string) {\n\t\treturn `<!DOCTYPE html>\n\t\t<html>\n\t\t\t<head>\n\t\t\t\t<meta http-equiv=\"Content-type\" content=\"text/html;charset=UTF-8\">\n\t\t\t\t<meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none';\">\n\t\t\t</head>\n\t\t\t<body>${localize('errorMessage', \"An error occurred while loading view: {0}\", escape(viewType))}</body>\n\t\t</html>`;\n\t}\n}\n\nexport function reviveWebviewExtension(extensionData: extHostProtocol.WebviewExtensionDescription): WebviewExtensionDescription {\n\treturn { id: extensionData.id, location: URI.revive(extensionData.location) };\n}\n\nexport function reviveWebviewContentOptions(webviewOptions: extHostProtocol.IWebviewOptions): WebviewContentOptions {\n\treturn {\n\t\tallowScripts: webviewOptions.enableScripts,\n\t\tenableCommandUris: webviewOptions.enableCommandUris,\n\t\tlocalResourceRoots: Array.isArray(webviewOptions.localResourceRoots) ? webviewOptions.localResourceRoots.map(r => URI.revive(r)) : undefined,\n\t\tportMapping: webviewOptions.portMapping,\n\t};\n}\n"]}