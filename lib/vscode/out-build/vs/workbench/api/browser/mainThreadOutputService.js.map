{"version":3,"file":"mainThreadOutputService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/api/browser/mainThreadOutputService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IOutputService, IOutputChannel, OUTPUT_VIEW_ID } from 'vs/workbench/contrib/output/common/output';\nimport { Extensions, IOutputChannelRegistry } from 'vs/workbench/services/output/common/output';\nimport { MainThreadOutputServiceShape, MainContext, IExtHostContext, ExtHostOutputServiceShape, ExtHostContext } from '../common/extHost.protocol';\nimport { extHostNamedCustomer } from 'vs/workbench/api/common/extHostCustomers';\nimport { UriComponents, URI } from 'vs/base/common/uri';\nimport { Disposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { Event } from 'vs/base/common/event';\nimport { IViewsService } from 'vs/workbench/common/views';\n\n@extHostNamedCustomer(MainContext.MainThreadOutputService)\nexport class MainThreadOutputService extends Disposable implements MainThreadOutputServiceShape {\n\n\tprivate static _idPool = 1;\n\n\tprivate readonly _proxy: ExtHostOutputServiceShape;\n\tprivate readonly _outputService: IOutputService;\n\tprivate readonly _viewsService: IViewsService;\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IOutputService outputService: IOutputService,\n\t\t@IViewsService viewsService: IViewsService\n\t) {\n\t\tsuper();\n\t\tthis._outputService = outputService;\n\t\tthis._viewsService = viewsService;\n\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostOutputService);\n\n\t\tconst setVisibleChannel = () => {\n\t\t\tconst visibleChannel = this._viewsService.isViewVisible(OUTPUT_VIEW_ID) ? this._outputService.getActiveChannel() : undefined;\n\t\t\tthis._proxy.$setVisibleChannel(visibleChannel ? visibleChannel.id : null);\n\t\t};\n\t\tthis._register(Event.any<any>(this._outputService.onActiveOutputChannel, Event.filter(this._viewsService.onDidChangeViewVisibility, ({ id }) => id === OUTPUT_VIEW_ID))(() => setVisibleChannel()));\n\t\tsetVisibleChannel();\n\t}\n\n\tpublic $register(label: string, log: boolean, file?: UriComponents): Promise<string> {\n\t\tconst id = 'extension-output-#' + (MainThreadOutputService._idPool++);\n\t\tRegistry.as<IOutputChannelRegistry>(Extensions.OutputChannels).registerChannel({ id, label, file: file ? URI.revive(file) : undefined, log });\n\t\tthis._register(toDisposable(() => this.$dispose(id)));\n\t\treturn Promise.resolve(id);\n\t}\n\n\tpublic $append(channelId: string, value: string): Promise<void> | undefined {\n\t\tconst channel = this._getChannel(channelId);\n\t\tif (channel) {\n\t\t\tchannel.append(value);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tpublic $update(channelId: string): Promise<void> | undefined {\n\t\tconst channel = this._getChannel(channelId);\n\t\tif (channel) {\n\t\t\tchannel.update();\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tpublic $clear(channelId: string, till: number): Promise<void> | undefined {\n\t\tconst channel = this._getChannel(channelId);\n\t\tif (channel) {\n\t\t\tchannel.clear(till);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tpublic $reveal(channelId: string, preserveFocus: boolean): Promise<void> | undefined {\n\t\tconst channel = this._getChannel(channelId);\n\t\tif (channel) {\n\t\t\tthis._outputService.showChannel(channel.id, preserveFocus);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tpublic $close(channelId: string): Promise<void> | undefined {\n\t\tif (this._viewsService.isViewVisible(OUTPUT_VIEW_ID)) {\n\t\t\tconst activeChannel = this._outputService.getActiveChannel();\n\t\t\tif (activeChannel && channelId === activeChannel.id) {\n\t\t\t\tthis._viewsService.closeView(OUTPUT_VIEW_ID);\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tpublic $dispose(channelId: string): Promise<void> | undefined {\n\t\tconst channel = this._getChannel(channelId);\n\t\tif (channel) {\n\t\t\tchannel.dispose();\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate _getChannel(channelId: string): IOutputChannel | undefined {\n\t\treturn this._outputService.getChannel(channelId);\n\t}\n}\n"]}