{"version":3,"file":"mainThreadSearch.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/api/browser/mainThreadSearch.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { dispose, IDisposable, DisposableStore } from 'vs/base/common/lifecycle';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { extHostNamedCustomer } from 'vs/workbench/api/common/extHostCustomers';\nimport { IFileMatch, IFileQuery, IRawFileMatch2, ISearchComplete, ISearchCompleteStats, ISearchProgressItem, ISearchResultProvider, ISearchService, ITextQuery, QueryType, SearchProviderType } from 'vs/workbench/services/search/common/search';\nimport { ExtHostContext, ExtHostSearchShape, IExtHostContext, MainContext, MainThreadSearchShape } from '../common/extHost.protocol';\n\n@extHostNamedCustomer(MainContext.MainThreadSearch)\nexport class MainThreadSearch implements MainThreadSearchShape {\n\n\tprivate readonly _proxy: ExtHostSearchShape;\n\tprivate readonly _searchProvider = new Map<number, RemoteSearchProvider>();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@ISearchService private readonly _searchService: ISearchService,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService\n\t) {\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostSearch);\n\t}\n\n\tdispose(): void {\n\t\tthis._searchProvider.forEach(value => value.dispose());\n\t\tthis._searchProvider.clear();\n\t}\n\n\t$registerTextSearchProvider(handle: number, scheme: string): void {\n\t\tthis._searchProvider.set(handle, new RemoteSearchProvider(this._searchService, SearchProviderType.text, scheme, handle, this._proxy));\n\t}\n\n\t$registerFileSearchProvider(handle: number, scheme: string): void {\n\t\tthis._searchProvider.set(handle, new RemoteSearchProvider(this._searchService, SearchProviderType.file, scheme, handle, this._proxy));\n\t}\n\n\t$unregisterProvider(handle: number): void {\n\t\tdispose(this._searchProvider.get(handle));\n\t\tthis._searchProvider.delete(handle);\n\t}\n\n\t$handleFileMatch(handle: number, session: number, data: UriComponents[]): void {\n\t\tconst provider = this._searchProvider.get(handle);\n\t\tif (!provider) {\n\t\t\tthrow new Error('Got result for unknown provider');\n\t\t}\n\n\t\tprovider.handleFindMatch(session, data);\n\t}\n\n\t$handleTextMatch(handle: number, session: number, data: IRawFileMatch2[]): void {\n\t\tconst provider = this._searchProvider.get(handle);\n\t\tif (!provider) {\n\t\t\tthrow new Error('Got result for unknown provider');\n\t\t}\n\n\t\tprovider.handleFindMatch(session, data);\n\t}\n\n\t$handleTelemetry(eventName: string, data: any): void {\n\t\tthis._telemetryService.publicLog(eventName, data);\n\t}\n}\n\nclass SearchOperation {\n\n\tprivate static _idPool = 0;\n\n\tconstructor(\n\t\treadonly progress?: (match: IFileMatch) => any,\n\t\treadonly id: number = ++SearchOperation._idPool,\n\t\treadonly matches = new Map<string, IFileMatch>()\n\t) {\n\t\t//\n\t}\n\n\taddMatch(match: IFileMatch): void {\n\t\tconst existingMatch = this.matches.get(match.resource.toString());\n\t\tif (existingMatch) {\n\t\t\t// TODO@rob clean up text/file result types\n\t\t\t// If a file search returns the same file twice, we would enter this branch.\n\t\t\t// It's possible that could happen, #90813\n\t\t\tif (existingMatch.results && match.results) {\n\t\t\t\texistingMatch.results.push(...match.results);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.matches.set(match.resource.toString(), match);\n\t\t}\n\n\t\tif (this.progress) {\n\t\t\tthis.progress(match);\n\t\t}\n\t}\n}\n\nclass RemoteSearchProvider implements ISearchResultProvider, IDisposable {\n\n\tprivate readonly _registrations = new DisposableStore();\n\tprivate readonly _searches = new Map<number, SearchOperation>();\n\n\tconstructor(\n\t\tsearchService: ISearchService,\n\t\ttype: SearchProviderType,\n\t\tprivate readonly _scheme: string,\n\t\tprivate readonly _handle: number,\n\t\tprivate readonly _proxy: ExtHostSearchShape\n\t) {\n\t\tthis._registrations.add(searchService.registerSearchResultProvider(this._scheme, type, this));\n\t}\n\n\tdispose(): void {\n\t\tthis._registrations.dispose();\n\t}\n\n\tfileSearch(query: IFileQuery, token: CancellationToken = CancellationToken.None): Promise<ISearchComplete> {\n\t\treturn this.doSearch(query, undefined, token);\n\t}\n\n\ttextSearch(query: ITextQuery, onProgress?: (p: ISearchProgressItem) => void, token: CancellationToken = CancellationToken.None): Promise<ISearchComplete> {\n\t\treturn this.doSearch(query, onProgress, token);\n\t}\n\n\tdoSearch(query: ITextQuery | IFileQuery, onProgress?: (p: ISearchProgressItem) => void, token: CancellationToken = CancellationToken.None): Promise<ISearchComplete> {\n\t\tif (!query.folderQueries.length) {\n\t\t\tthrow new Error('Empty folderQueries');\n\t\t}\n\n\t\tconst search = new SearchOperation(onProgress);\n\t\tthis._searches.set(search.id, search);\n\n\t\tconst searchP = query.type === QueryType.File\n\t\t\t? this._proxy.$provideFileSearchResults(this._handle, search.id, query, token)\n\t\t\t: this._proxy.$provideTextSearchResults(this._handle, search.id, query, token);\n\n\t\treturn Promise.resolve(searchP).then((result: ISearchCompleteStats) => {\n\t\t\tthis._searches.delete(search.id);\n\t\t\treturn { results: Array.from(search.matches.values()), stats: result.stats, limitHit: result.limitHit, messages: result.messages };\n\t\t}, err => {\n\t\t\tthis._searches.delete(search.id);\n\t\t\treturn Promise.reject(err);\n\t\t});\n\t}\n\n\tclearCache(cacheKey: string): Promise<void> {\n\t\treturn Promise.resolve(this._proxy.$clearCache(cacheKey));\n\t}\n\n\thandleFindMatch(session: number, dataOrUri: Array<UriComponents | IRawFileMatch2>): void {\n\t\tconst searchOp = this._searches.get(session);\n\n\t\tif (!searchOp) {\n\t\t\t// ignore...\n\t\t\treturn;\n\t\t}\n\n\t\tdataOrUri.forEach(result => {\n\t\t\tif ((<IRawFileMatch2>result).results) {\n\t\t\t\tsearchOp.addMatch({\n\t\t\t\t\tresource: URI.revive((<IRawFileMatch2>result).resource),\n\t\t\t\t\tresults: (<IRawFileMatch2>result).results\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tsearchOp.addMatch({\n\t\t\t\t\tresource: URI.revive(<UriComponents>result)\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n}\n"]}