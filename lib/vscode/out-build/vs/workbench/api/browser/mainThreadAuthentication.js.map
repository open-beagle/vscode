{"version":3,"sources":["vs/workbench/api/browser/mainThreadAuthentication.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAgBhG,MAAa,gCAAiC,SAAQ,sBAAU;QAC/D,YACkB,MAAkC,EACnC,EAAU,EACV,KAAa,EACb,wBAAiC,EAChC,mBAAyC,EACzC,cAA+B,EAC/B,iBAAqC,EACrC,aAA6B;YAE9C,KAAK,EAAE,CAAC;YATS,WAAM,GAAN,MAAM,CAA4B;YACnC,OAAE,GAAF,EAAE,CAAQ;YACV,UAAK,GAAL,KAAK,CAAQ;YACb,6BAAwB,GAAxB,wBAAwB,CAAS;YAChC,wBAAmB,GAAnB,mBAAmB,CAAsB;YACzC,mBAAc,GAAd,cAAc,CAAiB;YAC/B,sBAAiB,GAAjB,iBAAiB,CAAoB;YACrC,kBAAa,GAAb,aAAa,CAAgB;QAG/C,CAAC;QACM,uBAAuB,CAAC,WAAmB;YACjD,MAAM,iBAAiB,GAAG,CAAA,GAAA,6CAAqB,CAAA,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,EAAE,EAAE,WAAW,CAAC,CAAC;YAE3F,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE;gBAC9B,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,kBAAQ,CAAC,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAqB,EAAE,IAAmD,CAAC,EAAE,EAAE,CAAC,CAAC;gBACrI,OAAO;aACP;YAED,MAAM,SAAS,GAAG,IAAI,CAAC,iBAAiB,CAAC,eAAe,EAAuE,CAAC;YAChI,SAAS,CAAC,aAAa,GAAG,IAAI,CAAC;YAC/B,MAAM,MAAM,GAAG,CAAA,GAAA,yCAAiB,CAAA,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,EAAE,EAAE,WAAW,CAAC,CAAC;YAC5E,MAAM,KAAK,GAAG,iBAAiB,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;gBAC/C,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,SAAS,CAAC,EAAE,KAAK,KAAK,CAAC,WAAW,CAAC,CAAC;gBACvE,OAAO;oBACN,KAAK,EAAE,SAAS,CAAC,IAAI;oBACrB,WAAW,EAAE,KAAK;wBACjB,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAwH,CAAtH,CAAwH,EAArH,EAAE,AAA+I,EAAE,CAAA,GAAA,cAAO,CAAnI,AAAmI,CAAC,CAAlI,IAAuI,CAAC,EAAjI,EAAE,CAAC,GAAsI,EAAE,IAAI,CAAC,CAAC,kEAAjE,CAAC;wBACrI,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAS,EAAE,IAA2B,CAAC;oBACvD,SAAS;iBACT,CAAC;YACH,CAAC,CAAC,CAAC;YAEH,SAAS,CAAC,KAAK,GAAG,KAAK,CAAC;YACxB,SAAS,CAAC,aAAa,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,KAAK,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;YAC/G,SAAS,CAAC,KAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,CAAyB,EAAE,IAA2B,CAAC,CAAC;YACvF,SAAS,CAAC,WAAW,GAAG,GAAG,CAAC,QAAQ,CAAC,CAAiB,EAAE,IAAiD,CAAC,CAAC;YAE3G,SAAS,CAAC,WAAW,CAAC,GAAG,EAAE;gBAC1B,MAAM,kBAAkB,GAAG,SAAS,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBAC/E,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,EAAE,IAAI,WAAW,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC,+BAA0C,CAAC;gBAEpI,SAAS,CAAC,OAAO,EAAE,CAAC;YACrB,CAAC,CAAC,CAAC;YAEH,SAAS,CAAC,SAAS,CAAC,GAAG,EAAE;gBACxB,SAAS,CAAC,OAAO,EAAE,CAAC;YACrB,CAAC,CAAC,CAAC;YAEH,SAAS,CAAC,IAAI,EAAE,CAAC;QAClB,CAAC;QAED,KAAK,CAAC,qBAAqB,CAAC,WAAmB,EAAE,QAAuC;YACvF,MAAM,aAAa,GAAG,CAAA,GAAA,yCAAiB,CAAA,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,EAAE,EAAE,WAAW,CAAC,CAAC;YAEnF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,IAAI,CAC3C,kBAAQ,CAAC,IAAI,EACb,aAAa,CAAC,MAAM;gBACnB,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAiB,EAAE,IAAiF,EAAE,WAAW,EAAE,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAC7L,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAsB,EAAE,IAAoB,EAAE,WAAW,CAAC,EAC1E;gBACC,GAAG,CAAC,QAAQ,CAAC,CAAS,EAAE,IAAU,CAAC;gBACnC,GAAG,CAAC,QAAQ,CAAC,CAAQ,EAAE,IAAQ,CAAC;aAChC,EACD;gBACC,QAAQ,EAAE,CAAC;aACX,CAAC,CAAC;YAEJ,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;gBACxB,MAAM,qBAAqB,GAAG,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;gBACtF,MAAM,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;gBACzC,CAAA,GAAA,0CAAkB,CAAA,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,EAAE,EAAE,WAAW,CAAC,CAAC;gBAC9D,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,EAAE,IAAI,WAAW,EAAE,iBAAsB,CAAC;aAC7E;QACF,CAAC;QAED,KAAK,CAAC,WAAW,CAAC,MAAiB;YAClC,OAAO,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;QAClD,CAAC;QAED,aAAa,CAAC,MAAgB;YAC7B,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;QACpD,CAAC;QAED,KAAK,CAAC,aAAa,CAAC,SAAiB;YACpC,MAAM,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC;YACrD,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAW,EAAE,IAA0B,CAAC,CAAC,CAAC;QACtF,CAAC;KACD;IA1FD,4EA0FC;IAGD,IAAa,wBAAwB,GAArC,MAAa,wBAAyB,SAAQ,sBAAU;QAGvD,YACC,cAA+B,EACU,qBAA6C,EACrD,aAA6B,EAC5B,cAA+B,EAC1B,mBAAyC,EAC3C,iBAAqC,EACtC,gBAAmC;YAEvE,KAAK,EAAE,CAAC;YAPiC,0BAAqB,GAArB,qBAAqB,CAAwB;YACrD,kBAAa,GAAb,aAAa,CAAgB;YAC5B,mBAAc,GAAd,cAAc,CAAiB;YAC1B,wBAAmB,GAAnB,mBAAmB,CAAsB;YAC3C,sBAAiB,GAAjB,iBAAiB,CAAoB;YACtC,qBAAgB,GAAhB,gBAAgB,CAAmB;YAGvE,IAAI,CAAC,MAAM,GAAG,cAAc,CAAC,QAAQ,CAAC,iCAAc,CAAC,qBAAqB,CAAC,CAAC;YAE5E,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,CAAC,CAAC,EAAE;gBACjE,IAAI,CAAC,MAAM,CAAC,kCAAkC,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;YACvE,CAAC,CAAC,CAAC,CAAC;YAEJ,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,qBAAqB,CAAC,mCAAmC,CAAC,IAAI,CAAC,EAAE;gBACpF,IAAI,CAAC,MAAM,CAAC,mCAAmC,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;YAC7D,CAAC,CAAC,CAAC,CAAC;YAEJ,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,qBAAqB,CAAC,qCAAqC,CAAC,IAAI,CAAC,EAAE;gBACtF,IAAI,CAAC,MAAM,CAAC,mCAAmC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;YAC7D,CAAC,CAAC,CAAC,CAAC;YAEJ,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,qBAAqB,CAAC,iBAAiB,CAAC,CAAC;YAExE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,qBAAqB,CAAC,4BAA4B,CAAC,CAAC,CAAC,EAAE;gBAC1E,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;YAC9B,CAAC,CAAC,CAAC,CAAC;QACL,CAAC;QAED,KAAK,CAAC,+BAA+B,CAAC,EAAU,EAAE,KAAa,EAAE,wBAAiC;YACjG,MAAM,QAAQ,GAAG,IAAI,gCAAgC,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,wBAAwB,EAAE,IAAI,CAAC,mBAAmB,EAAE,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;YACnM,IAAI,CAAC,qBAAqB,CAAC,8BAA8B,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;QACzE,CAAC;QAED,iCAAiC,CAAC,EAAU;YAC3C,IAAI,CAAC,qBAAqB,CAAC,gCAAgC,CAAC,EAAE,CAAC,CAAC;QACjE,CAAC;QAED,eAAe,CAAC,EAAU;YACzB,OAAO,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,CAAA,GAAA,gEAAwC,CAAA,CAAC,EAAE,CAAC,oBAA2B,CAAC;QACtH,CAAC;QAED,sBAAsB,CAAC,EAAU,EAAE,KAA8C;YAChF,IAAI,CAAC,qBAAqB,CAAC,cAAc,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;QACtD,CAAC;QAED,cAAc,CAAC,UAAkB,EAAE,SAAiB;YACnD,OAAO,IAAI,CAAC,qBAAqB,CAAC,aAAa,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;QACxE,CAAC;QACO,KAAK,CAAC,WAAW,CAAC,YAAoB,EAAE,aAAqB;YACpE,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,IAAI,CAC/C,kBAAQ,CAAC,IAAI,EACb,GAAG,CAAC,QAAQ,CAAC,EAAc,EAAE,IAAiD,EAAE,aAAa,EAAE,YAAY,CAAC,EAC5G,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAO,EAAE,IAAO,CAAC,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAQ,EAAE,IAAQ,CAAC,CAAC,EAClE;gBACC,QAAQ,EAAE,CAAC;aACX,CACD,CAAC;YAEF,OAAO,MAAM,KAAK,CAAC,CAAC;QACrB,CAAC;QAEO,KAAK,CAAC,uCAAuC,CAAC,UAAkB,EAAE,WAAmB,EAAE,WAAmB,EAAE,aAAqB,EAAE,SAAiB;YAC3J,IAAI,CAAC,qBAAqB,CAAC,uBAAuB,CAAC,UAAU,EAAE,WAAW,EAAE,WAAW,EAAE,aAAa,EAAE,IAAI,CAAC,CAAC;YAC9G,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,GAAG,aAAa,IAAI,UAAU,EAAE,EAAE,SAAS,kCAA6C,CAAC;QAEpH,CAAC;QAEO,KAAK,CAAC,aAAa,CAAC,UAAkB,EAAE,WAAmB,EAAE,aAAqB,EAAE,MAAgB,EAAE,iBAAyD,EAAE,sBAA+B,EAAE,MAAe;YACxN,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE;gBAC9B,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;aAC/C;YAED,IAAI,sBAAsB,EAAE;gBAC3B,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,GAAG,aAAa,IAAI,UAAU,EAAE,iBAAsB,CAAC;aAClF;iBAAM;gBACN,MAAM,yBAAyB,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,aAAa,IAAI,UAAU,EAAE,iBAAsB,CAAC;gBACjH,IAAI,yBAAyB,EAAE;oBAC9B,MAAM,eAAe,GAAG,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,KAAK,yBAAyB,CAAC,CAAC;oBACpG,IAAI,eAAe,EAAE;wBACpB,MAAM,OAAO,GAAG,IAAI,CAAC,qBAAqB,CAAC,eAAe,CAAC,UAAU,EAAE,eAAe,CAAC,OAAO,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;wBACnH,IAAI,CAAC,OAAO,EAAE;4BACb,IAAI,CAAC,MAAM,EAAE;gCACZ,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,oBAAoB,CAAC,UAAU,EAAE,eAAe,CAAC,OAAO,CAAC,KAAK,EAAE,WAAW,EAAE,aAAa,CAAC,CAAC;gCACrJ,IAAI,CAAC,eAAe,EAAE;oCACrB,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;iCAClD;6BACD;iCAAM;gCACN,IAAI,CAAC,qBAAqB,CAAC,oBAAoB,CAAC,UAAU,EAAE,WAAW,EAAE,aAAa,EAAE,MAAM,EAAE,iBAAiB,CAAC,CAAC;gCACnH,OAAO,SAAS,CAAC;6BACjB;yBACD;wBAED,OAAO,eAAe,CAAC;qBACvB;iBACD;aACD;YAED,IAAI,MAAM,EAAE;gBACX,IAAI,CAAC,qBAAqB,CAAC,oBAAoB,CAAC,UAAU,EAAE,WAAW,EAAE,aAAa,EAAE,MAAM,EAAE,iBAAiB,CAAC,CAAC;gBACnH,OAAO,SAAS,CAAC;aACjB;YAED,OAAO,IAAI,CAAC,qBAAqB,CAAC,aAAa,CAAC,UAAU,EAAE,WAAW,EAAE,aAAa,EAAE,MAAM,EAAE,iBAAiB,CAAC,CAAC;QACpH,CAAC;QAED,KAAK,CAAC,WAAW,CAAC,UAAkB,EAAE,MAAgB,EAAE,WAAmB,EAAE,aAAqB,EAAE,OAAmE;YACtK,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,WAAW,CAAC,UAAU,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;YAExF,MAAM,MAAM,GAAG,CAAC,OAAO,CAAC,YAAY,CAAC;YACrC,IAAI,OAAgD,CAAC;YACrD,IAAI,QAAQ,CAAC,MAAM,EAAE;gBACpB,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,wBAAwB,CAAC,UAAU,CAAC,EAAE;oBACrE,OAAO,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;oBACtB,MAAM,OAAO,GAAG,IAAI,CAAC,qBAAqB,CAAC,eAAe,CAAC,UAAU,EAAE,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;oBAC3G,IAAI,CAAC,OAAO,EAAE;wBACb,IAAI,CAAC,MAAM,EAAE;4BACZ,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,oBAAoB,CAAC,UAAU,EAAE,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,WAAW,EAAE,aAAa,CAAC,CAAC;4BAC7I,IAAI,CAAC,eAAe,EAAE;gCACrB,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;6BAClD;yBACD;6BAAM,IAAI,OAAO,KAAK,KAAK,EAAE;4BAC7B,IAAI,CAAC,qBAAqB,CAAC,oBAAoB,CAAC,UAAU,EAAE,WAAW,EAAE,aAAa,EAAE,MAAM,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;4BAC3G,OAAO,SAAS,CAAC;yBACjB;6BAAM;4BACN,OAAO,SAAS,CAAC;yBACjB;qBACD;iBACD;qBAAM;oBACN,OAAO,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,WAAW,EAAE,aAAa,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC,CAAC,OAAO,CAAC,sBAAsB,EAAE,MAAM,CAAC,CAAC;iBAC9H;aACD;iBAAM;gBACN,IAAI,CAAC,MAAM,EAAE;oBACZ,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;oBAC3E,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC;oBACtE,IAAI,CAAC,SAAS,EAAE;wBACf,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;qBAClD;oBAED,OAAO,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,aAAa,CAAC,UAAU,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;oBACnF,MAAM,IAAI,CAAC,uCAAuC,CAAC,UAAU,EAAE,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,WAAW,EAAE,aAAa,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC;iBAC9H;qBAAM;oBACN,MAAM,IAAI,CAAC,qBAAqB,CAAC,iBAAiB,CAAC,UAAU,EAAE,MAAM,EAAE,WAAW,EAAE,aAAa,CAAC,CAAC;iBACnG;aACD;YAED,IAAI,OAAO,EAAE;gBACZ,CAAA,GAAA,uCAAe,CAAA,CAAC,IAAI,CAAC,cAAc,EAAE,UAAU,EAAE,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,WAAW,EAAE,aAAa,CAAC,CAAC;aACpG;YAED,OAAO,OAAO,CAAC;QAChB,CAAC;KACD,CAAA;IA7JY,wBAAwB;QADpC,CAAA,GAAA,uCAAoB,CAAA,CAAC,8BAAW,CAAC,wBAAwB,CAAC;QAMxD,WAAA,8CAAsB,CAAA;QACtB,WAAA,wBAAc,CAAA;QACd,WAAA,yBAAe,CAAA;QACf,WAAA,mCAAoB,CAAA;QACpB,WAAA,+BAAkB,CAAA;QAClB,WAAA,8BAAiB,CAAA;OAVP,wBAAwB,CA6JpC;IA7JY,4DAAwB","file":"mainThreadAuthentication.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport * as modes from 'vs/editor/common/modes';\nimport * as nls from 'vs/nls';\nimport { extHostNamedCustomer } from 'vs/workbench/api/common/extHostCustomers';\nimport { IAuthenticationService, AllowedExtension, readAllowedExtensions, getAuthenticationProviderActivationEvent, addAccountUsage, readAccountUsages, removeAccountUsage } from 'vs/workbench/services/authentication/browser/authenticationService';\nimport { ExtHostAuthenticationShape, ExtHostContext, IExtHostContext, MainContext, MainThreadAuthenticationShape } from '../common/extHost.protocol';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport Severity from 'vs/base/common/severity';\nimport { IQuickInputService } from 'vs/platform/quickinput/common/quickInput';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { fromNow } from 'vs/base/common/date';\nimport { ActivationKind, IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\n\nexport class MainThreadAuthenticationProvider extends Disposable {\n\tconstructor(\n\t\tprivate readonly _proxy: ExtHostAuthenticationShape,\n\t\tpublic readonly id: string,\n\t\tpublic readonly label: string,\n\t\tpublic readonly supportsMultipleAccounts: boolean,\n\t\tprivate readonly notificationService: INotificationService,\n\t\tprivate readonly storageService: IStorageService,\n\t\tprivate readonly quickInputService: IQuickInputService,\n\t\tprivate readonly dialogService: IDialogService\n\t) {\n\t\tsuper();\n\t}\n\tpublic manageTrustedExtensions(accountName: string) {\n\t\tconst allowedExtensions = readAllowedExtensions(this.storageService, this.id, accountName);\n\n\t\tif (!allowedExtensions.length) {\n\t\t\tthis.dialogService.show(Severity.Info, nls.localize('noTrustedExtensions', \"This account has not been used by any extensions.\"), []);\n\t\t\treturn;\n\t\t}\n\n\t\tconst quickPick = this.quickInputService.createQuickPick<{ label: string, description: string, extension: AllowedExtension }>();\n\t\tquickPick.canSelectMany = true;\n\t\tconst usages = readAccountUsages(this.storageService, this.id, accountName);\n\t\tconst items = allowedExtensions.map(extension => {\n\t\t\tconst usage = usages.find(usage => extension.id === usage.extensionId);\n\t\t\treturn {\n\t\t\t\tlabel: extension.name,\n\t\t\t\tdescription: usage\n\t\t\t\t\t? nls.localize({ key: 'accountLastUsedDate', comment: ['The placeholder {0} is a string with time information, such as \"3 days ago\"'] }, \"Last used this account {0}\", fromNow(usage.lastUsed, true))\n\t\t\t\t\t: nls.localize('notUsed', \"Has not used this account\"),\n\t\t\t\textension\n\t\t\t};\n\t\t});\n\n\t\tquickPick.items = items;\n\t\tquickPick.selectedItems = items.filter(item => item.extension.allowed === undefined || item.extension.allowed);\n\t\tquickPick.title = nls.localize('manageTrustedExtensions', \"Manage Trusted Extensions\");\n\t\tquickPick.placeholder = nls.localize('manageExensions', \"Choose which extensions can access this account\");\n\n\t\tquickPick.onDidAccept(() => {\n\t\t\tconst updatedAllowedList = quickPick.selectedItems.map(item => item.extension);\n\t\t\tthis.storageService.store(`${this.id}-${accountName}`, JSON.stringify(updatedAllowedList), StorageScope.GLOBAL, StorageTarget.USER);\n\n\t\t\tquickPick.dispose();\n\t\t});\n\n\t\tquickPick.onDidHide(() => {\n\t\t\tquickPick.dispose();\n\t\t});\n\n\t\tquickPick.show();\n\t}\n\n\tasync removeAccountSessions(accountName: string, sessions: modes.AuthenticationSession[]): Promise<void> {\n\t\tconst accountUsages = readAccountUsages(this.storageService, this.id, accountName);\n\n\t\tconst result = await this.dialogService.show(\n\t\t\tSeverity.Info,\n\t\t\taccountUsages.length\n\t\t\t\t? nls.localize('signOutMessagve', \"The account '{0}' has been used by: \\n\\n{1}\\n\\n Sign out from these extensions?\", accountName, accountUsages.map(usage => usage.extensionName).join('\\n'))\n\t\t\t\t: nls.localize('signOutMessageSimple', \"Sign out of '{0}'?\", accountName),\n\t\t\t[\n\t\t\t\tnls.localize('signOut', \"Sign out\"),\n\t\t\t\tnls.localize('cancel', \"Cancel\")\n\t\t\t],\n\t\t\t{\n\t\t\t\tcancelId: 1\n\t\t\t});\n\n\t\tif (result.choice === 0) {\n\t\t\tconst removeSessionPromises = sessions.map(session => this.removeSession(session.id));\n\t\t\tawait Promise.all(removeSessionPromises);\n\t\t\tremoveAccountUsage(this.storageService, this.id, accountName);\n\t\t\tthis.storageService.remove(`${this.id}-${accountName}`, StorageScope.GLOBAL);\n\t\t}\n\t}\n\n\tasync getSessions(scopes?: string[]) {\n\t\treturn this._proxy.$getSessions(this.id, scopes);\n\t}\n\n\tcreateSession(scopes: string[]): Promise<modes.AuthenticationSession> {\n\t\treturn this._proxy.$createSession(this.id, scopes);\n\t}\n\n\tasync removeSession(sessionId: string): Promise<void> {\n\t\tawait this._proxy.$removeSession(this.id, sessionId);\n\t\tthis.notificationService.info(nls.localize('signedOut', \"Successfully signed out.\"));\n\t}\n}\n\n@extHostNamedCustomer(MainContext.MainThreadAuthentication)\nexport class MainThreadAuthentication extends Disposable implements MainThreadAuthenticationShape {\n\tprivate readonly _proxy: ExtHostAuthenticationShape;\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IAuthenticationService private readonly authenticationService: IAuthenticationService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService\n\t) {\n\t\tsuper();\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostAuthentication);\n\n\t\tthis._register(this.authenticationService.onDidChangeSessions(e => {\n\t\t\tthis._proxy.$onDidChangeAuthenticationSessions(e.providerId, e.label);\n\t\t}));\n\n\t\tthis._register(this.authenticationService.onDidRegisterAuthenticationProvider(info => {\n\t\t\tthis._proxy.$onDidChangeAuthenticationProviders([info], []);\n\t\t}));\n\n\t\tthis._register(this.authenticationService.onDidUnregisterAuthenticationProvider(info => {\n\t\t\tthis._proxy.$onDidChangeAuthenticationProviders([], [info]);\n\t\t}));\n\n\t\tthis._proxy.$setProviders(this.authenticationService.declaredProviders);\n\n\t\tthis._register(this.authenticationService.onDidChangeDeclaredProviders(e => {\n\t\t\tthis._proxy.$setProviders(e);\n\t\t}));\n\t}\n\n\tasync $registerAuthenticationProvider(id: string, label: string, supportsMultipleAccounts: boolean): Promise<void> {\n\t\tconst provider = new MainThreadAuthenticationProvider(this._proxy, id, label, supportsMultipleAccounts, this.notificationService, this.storageService, this.quickInputService, this.dialogService);\n\t\tthis.authenticationService.registerAuthenticationProvider(id, provider);\n\t}\n\n\t$unregisterAuthenticationProvider(id: string): void {\n\t\tthis.authenticationService.unregisterAuthenticationProvider(id);\n\t}\n\n\t$ensureProvider(id: string): Promise<void> {\n\t\treturn this.extensionService.activateByEvent(getAuthenticationProviderActivationEvent(id), ActivationKind.Immediate);\n\t}\n\n\t$sendDidChangeSessions(id: string, event: modes.AuthenticationSessionsChangeEvent): void {\n\t\tthis.authenticationService.sessionsUpdate(id, event);\n\t}\n\n\t$removeSession(providerId: string, sessionId: string): Promise<void> {\n\t\treturn this.authenticationService.removeSession(providerId, sessionId);\n\t}\n\tprivate async loginPrompt(providerName: string, extensionName: string): Promise<boolean> {\n\t\tconst { choice } = await this.dialogService.show(\n\t\t\tSeverity.Info,\n\t\t\tnls.localize('confirmLogin', \"The extension '{0}' wants to sign in using {1}.\", extensionName, providerName),\n\t\t\t[nls.localize('allow', \"Allow\"), nls.localize('cancel', \"Cancel\")],\n\t\t\t{\n\t\t\t\tcancelId: 1\n\t\t\t}\n\t\t);\n\n\t\treturn choice === 0;\n\t}\n\n\tprivate async setTrustedExtensionAndAccountPreference(providerId: string, accountName: string, extensionId: string, extensionName: string, sessionId: string): Promise<void> {\n\t\tthis.authenticationService.updatedAllowedExtension(providerId, accountName, extensionId, extensionName, true);\n\t\tthis.storageService.store(`${extensionName}-${providerId}`, sessionId, StorageScope.GLOBAL, StorageTarget.MACHINE);\n\n\t}\n\n\tprivate async selectSession(providerId: string, extensionId: string, extensionName: string, scopes: string[], potentialSessions: readonly modes.AuthenticationSession[], clearSessionPreference: boolean, silent: boolean): Promise<modes.AuthenticationSession | undefined> {\n\t\tif (!potentialSessions.length) {\n\t\t\tthrow new Error('No potential sessions found');\n\t\t}\n\n\t\tif (clearSessionPreference) {\n\t\t\tthis.storageService.remove(`${extensionName}-${providerId}`, StorageScope.GLOBAL);\n\t\t} else {\n\t\t\tconst existingSessionPreference = this.storageService.get(`${extensionName}-${providerId}`, StorageScope.GLOBAL);\n\t\t\tif (existingSessionPreference) {\n\t\t\t\tconst matchingSession = potentialSessions.find(session => session.id === existingSessionPreference);\n\t\t\t\tif (matchingSession) {\n\t\t\t\t\tconst allowed = this.authenticationService.isAccessAllowed(providerId, matchingSession.account.label, extensionId);\n\t\t\t\t\tif (!allowed) {\n\t\t\t\t\t\tif (!silent) {\n\t\t\t\t\t\t\tconst didAcceptPrompt = await this.authenticationService.showGetSessionPrompt(providerId, matchingSession.account.label, extensionId, extensionName);\n\t\t\t\t\t\t\tif (!didAcceptPrompt) {\n\t\t\t\t\t\t\t\tthrow new Error('User did not consent to login.');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.authenticationService.requestSessionAccess(providerId, extensionId, extensionName, scopes, potentialSessions);\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn matchingSession;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (silent) {\n\t\t\tthis.authenticationService.requestSessionAccess(providerId, extensionId, extensionName, scopes, potentialSessions);\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn this.authenticationService.selectSession(providerId, extensionId, extensionName, scopes, potentialSessions);\n\t}\n\n\tasync $getSession(providerId: string, scopes: string[], extensionId: string, extensionName: string, options: { createIfNone: boolean, clearSessionPreference: boolean }): Promise<modes.AuthenticationSession | undefined> {\n\t\tconst sessions = await this.authenticationService.getSessions(providerId, scopes, true);\n\n\t\tconst silent = !options.createIfNone;\n\t\tlet session: modes.AuthenticationSession | undefined;\n\t\tif (sessions.length) {\n\t\t\tif (!this.authenticationService.supportsMultipleAccounts(providerId)) {\n\t\t\t\tsession = sessions[0];\n\t\t\t\tconst allowed = this.authenticationService.isAccessAllowed(providerId, session.account.label, extensionId);\n\t\t\t\tif (!allowed) {\n\t\t\t\t\tif (!silent) {\n\t\t\t\t\t\tconst didAcceptPrompt = await this.authenticationService.showGetSessionPrompt(providerId, session.account.label, extensionId, extensionName);\n\t\t\t\t\t\tif (!didAcceptPrompt) {\n\t\t\t\t\t\t\tthrow new Error('User did not consent to login.');\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (allowed !== false) {\n\t\t\t\t\t\tthis.authenticationService.requestSessionAccess(providerId, extensionId, extensionName, scopes, [session]);\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn this.selectSession(providerId, extensionId, extensionName, scopes, sessions, !!options.clearSessionPreference, silent);\n\t\t\t}\n\t\t} else {\n\t\t\tif (!silent) {\n\t\t\t\tconst providerName = await this.authenticationService.getLabel(providerId);\n\t\t\t\tconst isAllowed = await this.loginPrompt(providerName, extensionName);\n\t\t\t\tif (!isAllowed) {\n\t\t\t\t\tthrow new Error('User did not consent to login.');\n\t\t\t\t}\n\n\t\t\t\tsession = await this.authenticationService.createSession(providerId, scopes, true);\n\t\t\t\tawait this.setTrustedExtensionAndAccountPreference(providerId, session.account.label, extensionId, extensionName, session.id);\n\t\t\t} else {\n\t\t\t\tawait this.authenticationService.requestNewSession(providerId, scopes, extensionId, extensionName);\n\t\t\t}\n\t\t}\n\n\t\tif (session) {\n\t\t\taddAccountUsage(this.storageService, providerId, session.account.label, extensionId, extensionName);\n\t\t}\n\n\t\treturn session;\n\t}\n}\n"]}