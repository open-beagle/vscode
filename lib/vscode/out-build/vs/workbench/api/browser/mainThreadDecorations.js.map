{"version":3,"file":"mainThreadDecorations.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/api/browser/mainThreadDecorations.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { Emitter } from 'vs/base/common/event';\nimport { IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { ExtHostContext, MainContext, IExtHostContext, MainThreadDecorationsShape, ExtHostDecorationsShape, DecorationData, DecorationRequest } from '../common/extHost.protocol';\nimport { extHostNamedCustomer } from 'vs/workbench/api/common/extHostCustomers';\nimport { IDecorationsService, IDecorationData } from 'vs/workbench/services/decorations/browser/decorations';\nimport { CancellationToken } from 'vs/base/common/cancellation';\n\nclass DecorationRequestsQueue {\n\n\tprivate _idPool = 0;\n\tprivate _requests = new Map<number, DecorationRequest>();\n\tprivate _resolver = new Map<number, (data: DecorationData) => any>();\n\n\tprivate _timer: any;\n\n\tconstructor(\n\t\tprivate readonly _proxy: ExtHostDecorationsShape,\n\t\tprivate readonly _handle: number\n\t) {\n\t\t//\n\t}\n\n\tenqueue(uri: URI, token: CancellationToken): Promise<DecorationData> {\n\t\tconst id = ++this._idPool;\n\t\tconst result = new Promise<DecorationData>(resolve => {\n\t\t\tthis._requests.set(id, { id, uri });\n\t\t\tthis._resolver.set(id, resolve);\n\t\t\tthis._processQueue();\n\t\t});\n\t\ttoken.onCancellationRequested(() => {\n\t\t\tthis._requests.delete(id);\n\t\t\tthis._resolver.delete(id);\n\t\t});\n\t\treturn result;\n\t}\n\n\tprivate _processQueue(): void {\n\t\tif (typeof this._timer === 'number') {\n\t\t\t// already queued\n\t\t\treturn;\n\t\t}\n\t\tthis._timer = setTimeout(() => {\n\t\t\t// make request\n\t\t\tconst requests = this._requests;\n\t\t\tconst resolver = this._resolver;\n\t\t\tthis._proxy.$provideDecorations(this._handle, [...requests.values()], CancellationToken.None).then(data => {\n\t\t\t\tfor (let [id, resolve] of resolver) {\n\t\t\t\t\tresolve(data[id]);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// reset\n\t\t\tthis._requests = new Map();\n\t\t\tthis._resolver = new Map();\n\t\t\tthis._timer = undefined;\n\t\t}, 0);\n\t}\n}\n\n@extHostNamedCustomer(MainContext.MainThreadDecorations)\nexport class MainThreadDecorations implements MainThreadDecorationsShape {\n\n\tprivate readonly _provider = new Map<number, [Emitter<URI[]>, IDisposable]>();\n\tprivate readonly _proxy: ExtHostDecorationsShape;\n\n\tconstructor(\n\t\tcontext: IExtHostContext,\n\t\t@IDecorationsService private readonly _decorationsService: IDecorationsService\n\t) {\n\t\tthis._proxy = context.getProxy(ExtHostContext.ExtHostDecorations);\n\t}\n\n\tdispose() {\n\t\tthis._provider.forEach(value => dispose(value));\n\t\tthis._provider.clear();\n\t}\n\n\t$registerDecorationProvider(handle: number, label: string): void {\n\t\tconst emitter = new Emitter<URI[]>();\n\t\tconst queue = new DecorationRequestsQueue(this._proxy, handle);\n\t\tconst registration = this._decorationsService.registerDecorationsProvider({\n\t\t\tlabel,\n\t\t\tonDidChange: emitter.event,\n\t\t\tprovideDecorations: async (uri, token) => {\n\t\t\t\tconst data = await queue.enqueue(uri, token);\n\t\t\t\tif (!data) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\tconst [bubble, tooltip, letter, themeColor] = data;\n\t\t\t\treturn <IDecorationData>{\n\t\t\t\t\tweight: 10,\n\t\t\t\t\tbubble: bubble ?? false,\n\t\t\t\t\tcolor: themeColor?.id,\n\t\t\t\t\ttooltip,\n\t\t\t\t\tletter\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\t\tthis._provider.set(handle, [emitter, registration]);\n\t}\n\n\t$onDidChange(handle: number, resources: UriComponents[]): void {\n\t\tconst provider = this._provider.get(handle);\n\t\tif (provider) {\n\t\t\tconst [emitter] = provider;\n\t\t\temitter.fire(resources && resources.map(r => URI.revive(r)));\n\t\t}\n\t}\n\n\t$unregisterDecorationProvider(handle: number): void {\n\t\tconst provider = this._provider.get(handle);\n\t\tif (provider) {\n\t\t\tdispose(provider);\n\t\t\tthis._provider.delete(handle);\n\t\t}\n\t}\n}\n"]}