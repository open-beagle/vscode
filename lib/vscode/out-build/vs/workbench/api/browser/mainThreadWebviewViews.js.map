{"version":3,"file":"mainThreadWebviewViews.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/api/browser/mainThreadWebviewViews.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { Disposable, dispose, IDisposable } from 'vs/base/common/lifecycle';\nimport { MainThreadWebviews, reviveWebviewExtension } from 'vs/workbench/api/browser/mainThreadWebviews';\nimport * as extHostProtocol from 'vs/workbench/api/common/extHost.protocol';\nimport { IWebviewViewService, WebviewView } from 'vs/workbench/contrib/webviewView/browser/webviewViewService';\n\n\nexport class MainThreadWebviewsViews extends Disposable implements extHostProtocol.MainThreadWebviewViewsShape {\n\n\tprivate readonly _proxy: extHostProtocol.ExtHostWebviewViewsShape;\n\n\tprivate readonly _webviewViews = new Map<string, WebviewView>();\n\tprivate readonly _webviewViewProviders = new Map<string, IDisposable>();\n\n\tconstructor(\n\t\tcontext: extHostProtocol.IExtHostContext,\n\t\tprivate readonly mainThreadWebviews: MainThreadWebviews,\n\t\t@IWebviewViewService private readonly _webviewViewService: IWebviewViewService,\n\t) {\n\t\tsuper();\n\n\t\tthis._proxy = context.getProxy(extHostProtocol.ExtHostContext.ExtHostWebviewViews);\n\t}\n\n\toverride dispose() {\n\t\tsuper.dispose();\n\n\t\tdispose(this._webviewViewProviders.values());\n\t\tthis._webviewViewProviders.clear();\n\n\t\tdispose(this._webviewViews.values());\n\t}\n\n\tpublic $setWebviewViewTitle(handle: extHostProtocol.WebviewHandle, value: string | undefined): void {\n\t\tconst webviewView = this.getWebviewView(handle);\n\t\twebviewView.title = value;\n\t}\n\n\tpublic $setWebviewViewDescription(handle: extHostProtocol.WebviewHandle, value: string | undefined): void {\n\t\tconst webviewView = this.getWebviewView(handle);\n\t\twebviewView.description = value;\n\t}\n\n\tpublic $show(handle: extHostProtocol.WebviewHandle, preserveFocus: boolean): void {\n\t\tconst webviewView = this.getWebviewView(handle);\n\t\twebviewView.show(preserveFocus);\n\t}\n\n\tpublic $registerWebviewViewProvider(\n\t\textensionData: extHostProtocol.WebviewExtensionDescription,\n\t\tviewType: string,\n\t\toptions: { retainContextWhenHidden?: boolean, serializeBuffersForPostMessage: boolean }\n\t): void {\n\t\tif (this._webviewViewProviders.has(viewType)) {\n\t\t\tthrow new Error(`View provider for ${viewType} already registered`);\n\t\t}\n\n\t\tconst extension = reviveWebviewExtension(extensionData);\n\n\t\tconst registration = this._webviewViewService.register(viewType, {\n\t\t\tresolve: async (webviewView: WebviewView, cancellation: CancellationToken) => {\n\t\t\t\tconst handle = webviewView.webview.id;\n\n\t\t\t\tthis._webviewViews.set(handle, webviewView);\n\t\t\t\tthis.mainThreadWebviews.addWebview(handle, webviewView.webview, { serializeBuffersForPostMessage: options.serializeBuffersForPostMessage });\n\n\t\t\t\tlet state = undefined;\n\t\t\t\tif (webviewView.webview.state) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tstate = JSON.parse(webviewView.webview.state);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tconsole.error('Could not load webview state', e, webviewView.webview.state);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\twebviewView.webview.extension = extension;\n\n\t\t\t\tif (options) {\n\t\t\t\t\twebviewView.webview.options = options;\n\t\t\t\t}\n\n\t\t\t\twebviewView.onDidChangeVisibility(visible => {\n\t\t\t\t\tthis._proxy.$onDidChangeWebviewViewVisibility(handle, visible);\n\t\t\t\t});\n\n\t\t\t\twebviewView.onDispose(() => {\n\t\t\t\t\tthis._proxy.$disposeWebviewView(handle);\n\t\t\t\t\tthis._webviewViews.delete(handle);\n\t\t\t\t});\n\n\t\t\t\ttry {\n\t\t\t\t\tawait this._proxy.$resolveWebviewView(handle, viewType, webviewView.title, state, cancellation);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tonUnexpectedError(error);\n\t\t\t\t\twebviewView.webview.html = this.mainThreadWebviews.getWebviewResolvedFailedContent(viewType);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tthis._webviewViewProviders.set(viewType, registration);\n\t}\n\n\tpublic $unregisterWebviewViewProvider(viewType: string): void {\n\t\tconst provider = this._webviewViewProviders.get(viewType);\n\t\tif (!provider) {\n\t\t\tthrow new Error(`No view provider for ${viewType} registered`);\n\t\t}\n\n\t\tprovider.dispose();\n\t\tthis._webviewViewProviders.delete(viewType);\n\t}\n\n\tprivate getWebviewView(handle: string): WebviewView {\n\t\tconst webviewView = this._webviewViews.get(handle);\n\t\tif (!webviewView) {\n\t\t\tthrow new Error('unknown webview view');\n\t\t}\n\t\treturn webviewView;\n\t}\n}\n\n"]}