{"version":3,"file":"mainThreadBulkEdits.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/api/browser/mainThreadBulkEdits.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAQhG,IAAa,mBAAmB,GAAhC,MAAa,mBAAmB;QAE/B,YACC,eAAgC,EACG,gBAAkC,EACvC,WAAwB;YADnB,qBAAgB,GAAhB,gBAAgB,CAAkB;YACvC,gBAAW,GAAX,WAAW,CAAa;QACnD,CAAC;QAEL,OAAO,KAAW,CAAC;QAEnB,sBAAsB,CAAC,GAAsB,EAAE,eAAwB;YACtE,MAAM,KAAK,GAAG,CAAA,GAAA,2CAAuB,CAAA,CAAC,GAAG,CAAC,CAAC;YAC3C,OAAO,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,eAAe,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE;gBACrF,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,yBAAyB,EAAE,GAAG,CAAC,CAAC;gBACtD,OAAO,KAAK,CAAC;YACd,CAAC,CAAC,CAAC;QACJ,CAAC;KACD,CAAA;IAjBY,mBAAmB;QAD/B,CAAA,GAAA,uCAAoB,CAAA,CAAC,8BAAW,CAAC,mBAAmB,CAAC;QAKnD,WAAA,kCAAgB,CAAA;QAChB,WAAA,iBAAW,CAAA;OALD,mBAAmB,CAiB/B;IAjBY,kDAAmB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IBulkEditService } from 'vs/editor/browser/services/bulkEditService';\nimport { IExtHostContext, IWorkspaceEditDto, MainThreadBulkEditsShape, MainContext } from 'vs/workbench/api/common/extHost.protocol'; import { extHostNamedCustomer } from 'vs/workbench/api/common/extHostCustomers';\nimport { reviveWorkspaceEditDto2 } from 'vs/workbench/api/browser/mainThreadEditors';\nimport { ILogService } from 'vs/platform/log/common/log';\n\n@extHostNamedCustomer(MainContext.MainThreadBulkEdits)\nexport class MainThreadBulkEdits implements MainThreadBulkEditsShape {\n\n\tconstructor(\n\t\t_extHostContext: IExtHostContext,\n\t\t@IBulkEditService private readonly _bulkEditService: IBulkEditService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) { }\n\n\tdispose(): void { }\n\n\t$tryApplyWorkspaceEdit(dto: IWorkspaceEditDto, undoRedoGroupId?: number): Promise<boolean> {\n\t\tconst edits = reviveWorkspaceEditDto2(dto);\n\t\treturn this._bulkEditService.apply(edits, { undoRedoGroupId }).then(() => true, err => {\n\t\t\tthis._logService.warn('IGNORING workspace edit', err);\n\t\t\treturn false;\n\t\t});\n\t}\n}\n"]}