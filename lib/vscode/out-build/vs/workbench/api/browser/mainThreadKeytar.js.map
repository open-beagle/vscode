{"version":3,"file":"mainThreadKeytar.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/api/browser/mainThreadKeytar.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAOhG,IAAa,gBAAgB,GAA7B,MAAa,gBAAgB;QAE5B,YACC,eAAgC,EACM,mBAAwC;YAAxC,wBAAmB,GAAnB,mBAAmB,CAAqB;QAC3E,CAAC;QAEL,KAAK,CAAC,YAAY,CAAC,OAAe,EAAE,OAAe;YAClD,OAAO,IAAI,CAAC,mBAAmB,CAAC,WAAW,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAC/D,CAAC;QAED,KAAK,CAAC,YAAY,CAAC,OAAe,EAAE,OAAe,EAAE,QAAgB;YACpE,OAAO,IAAI,CAAC,mBAAmB,CAAC,WAAW,CAAC,OAAO,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;QACzE,CAAC;QAED,KAAK,CAAC,eAAe,CAAC,OAAe,EAAE,OAAe;YACrD,OAAO,IAAI,CAAC,mBAAmB,CAAC,cAAc,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAClE,CAAC;QAED,KAAK,CAAC,aAAa,CAAC,OAAe;YAClC,OAAO,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;QACvD,CAAC;QAED,KAAK,CAAC,gBAAgB,CAAC,OAAe;YACrC,OAAO,IAAI,CAAC,mBAAmB,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;QAC1D,CAAC;QAED,OAAO;YACN,EAAE;QACH,CAAC;KACD,CAAA;IA9BY,gBAAgB;QAD5B,CAAA,GAAA,uCAAoB,CAAA,CAAC,8BAAW,CAAC,gBAAgB,CAAC;QAKhD,WAAA,iCAAmB,CAAA;OAJT,gBAAgB,CA8B5B;IA9BY,4CAAgB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { extHostNamedCustomer } from 'vs/workbench/api/common/extHostCustomers';\nimport { MainContext, MainThreadKeytarShape, IExtHostContext } from 'vs/workbench/api/common/extHost.protocol';\nimport { ICredentialsService } from 'vs/workbench/services/credentials/common/credentials';\n\n@extHostNamedCustomer(MainContext.MainThreadKeytar)\nexport class MainThreadKeytar implements MainThreadKeytarShape {\n\n\tconstructor(\n\t\t_extHostContext: IExtHostContext,\n\t\t@ICredentialsService private readonly _credentialsService: ICredentialsService,\n\t) { }\n\n\tasync $getPassword(service: string, account: string): Promise<string | null> {\n\t\treturn this._credentialsService.getPassword(service, account);\n\t}\n\n\tasync $setPassword(service: string, account: string, password: string): Promise<void> {\n\t\treturn this._credentialsService.setPassword(service, account, password);\n\t}\n\n\tasync $deletePassword(service: string, account: string): Promise<boolean> {\n\t\treturn this._credentialsService.deletePassword(service, account);\n\t}\n\n\tasync $findPassword(service: string): Promise<string | null> {\n\t\treturn this._credentialsService.findPassword(service);\n\t}\n\n\tasync $findCredentials(service: string): Promise<Array<{ account: string, password: string }>> {\n\t\treturn this._credentialsService.findCredentials(service);\n\t}\n\n\tdispose(): void {\n\t\t//\n\t}\n}\n"]}