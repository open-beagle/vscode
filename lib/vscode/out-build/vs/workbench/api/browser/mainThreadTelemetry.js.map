{"version":3,"file":"mainThreadTelemetry.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/api/browser/mainThreadTelemetry.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;;IAWhG,IAAa,mBAAmB,2BAAhC,MAAa,mBAAoB,SAAQ,sBAAU;QAKlD,YACC,cAA+B,EACK,iBAAoC,EAChC,qBAA4C,EAC9C,kBAAuC;YAE7E,KAAK,EAAE,CAAC;YAJ4B,sBAAiB,GAAjB,iBAAiB,CAAmB;YAChC,0BAAqB,GAArB,qBAAqB,CAAuB;YAC9C,uBAAkB,GAAlB,kBAAkB,CAAqB;YAI7E,IAAI,CAAC,MAAM,GAAG,cAAc,CAAC,QAAQ,CAAC,iCAAc,CAAC,gBAAgB,CAAC,CAAC;YAEvE,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,EAAE;gBAC9C,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,qBAAqB,CAAC,wBAAwB,CAAC,CAAC,CAAC,EAAE;oBACtE,IAAI,CAAC,CAAC,YAAY,CAAC,QAAQ,CAAC,2BAA2B,CAAC,EAAE;wBACzD,IAAI,CAAC,MAAM,CAAC,4BAA4B,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;qBAChE;gBACF,CAAC,CAAC,CAAC,CAAC;aACJ;YAED,IAAI,CAAC,MAAM,CAAC,2BAA2B,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QAChE,CAAC;QAED,IAAY,gBAAgB;YAC3B,IAAI,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,EAAE;gBAC7C,OAAO,KAAK,CAAC;aACb;YAED,OAAO,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,2BAA2B,CAAC,CAAC;QAC3E,CAAC;QAED,UAAU,CAAC,SAAiB,EAAE,OAAY,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;YAC5D,sIAAsI;YACtI,IAAI,CAAC,qBAAmB,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;YACvC,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QACnD,CAAC;QAED,WAAW,CAAgF,SAAiB,EAAE,IAA+B;YAC5I,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,IAAW,CAAC,CAAC;QACzC,CAAC;KACD,CAAA;IAxCwB,yBAAK,GAAG,qBAAqB,CAAC;IAH1C,mBAAmB;QAD/B,CAAA,GAAA,uCAAoB,CAAA,CAAC,8BAAW,CAAC,mBAAmB,CAAC;QAQnD,WAAA,6BAAiB,CAAA;QACjB,WAAA,qCAAqB,CAAA;QACrB,WAAA,iCAAmB,CAAA;OATT,mBAAmB,CA2C/B;IA3CY,kDAAmB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { MainThreadTelemetryShape, MainContext, IExtHostContext, ExtHostTelemetryShape, ExtHostContext } from '../common/extHost.protocol';\nimport { extHostNamedCustomer } from 'vs/workbench/api/common/extHostCustomers';\nimport { ClassifiedEvent, StrictPropertyCheck, GDPRClassification } from 'vs/platform/telemetry/common/gdprTypings';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\n\n@extHostNamedCustomer(MainContext.MainThreadTelemetry)\nexport class MainThreadTelemetry extends Disposable implements MainThreadTelemetryShape {\n\tprivate readonly _proxy: ExtHostTelemetryShape;\n\n\tprivate static readonly _name = 'pluginHostTelemetry';\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@IEnvironmentService private readonly _environmenService: IEnvironmentService,\n\t) {\n\t\tsuper();\n\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostTelemetry);\n\n\t\tif (!this._environmenService.disableTelemetry) {\n\t\t\tthis._register(this._configurationService.onDidChangeConfiguration(e => {\n\t\t\t\tif (e.affectedKeys.includes('telemetry.enableTelemetry')) {\n\t\t\t\t\tthis._proxy.$onDidChangeTelemetryEnabled(this.telemetryEnabled);\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\n\t\tthis._proxy.$initializeTelemetryEnabled(this.telemetryEnabled);\n\t}\n\n\tprivate get telemetryEnabled(): boolean {\n\t\tif (this._environmenService.disableTelemetry) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn !!this._configurationService.getValue('telemetry.enableTelemetry');\n\t}\n\n\t$publicLog(eventName: string, data: any = Object.create(null)): void {\n\t\t// __GDPR__COMMON__ \"pluginHostTelemetry\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n\t\tdata[MainThreadTelemetry._name] = true;\n\t\tthis._telemetryService.publicLog(eventName, data);\n\t}\n\n\t$publicLog2<E extends ClassifiedEvent<T> = never, T extends GDPRClassification<T> = never>(eventName: string, data: StrictPropertyCheck<T, E>): void {\n\t\tthis.$publicLog(eventName, data as any);\n\t}\n}\n\n\n"]}