{"version":3,"sources":["vs/workbench/api/browser/mainThreadUriOpeners.ts"],"names":[],"mappings":"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","file":"mainThreadUriOpeners.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Action } from 'vs/base/common/actions';\nimport { isPromiseCanceledError } from 'vs/base/common/errors';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { Schemas } from 'vs/base/common/network';\nimport { URI } from 'vs/base/common/uri';\nimport { localize } from 'vs/nls';\nimport { ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\nimport { INotificationService, Severity } from 'vs/platform/notification/common/notification';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { ExtHostContext, ExtHostUriOpenersShape, IExtHostContext, MainContext, MainThreadUriOpenersShape } from 'vs/workbench/api/common/extHost.protocol';\nimport { defaultExternalUriOpenerId } from 'vs/workbench/contrib/externalUriOpener/common/configuration';\nimport { ContributedExternalUriOpenersStore } from 'vs/workbench/contrib/externalUriOpener/common/contributedOpeners';\nimport { IExternalOpenerProvider, IExternalUriOpener, IExternalUriOpenerService } from 'vs/workbench/contrib/externalUriOpener/common/externalUriOpenerService';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { extHostNamedCustomer } from '../common/extHostCustomers';\n\ninterface RegisteredOpenerMetadata {\n\treadonly schemes: ReadonlySet<string>;\n\treadonly extensionId: ExtensionIdentifier;\n\treadonly label: string;\n}\n\n@extHostNamedCustomer(MainContext.MainThreadUriOpeners)\nexport class MainThreadUriOpeners extends Disposable implements MainThreadUriOpenersShape, IExternalOpenerProvider {\n\n\tprivate readonly proxy: ExtHostUriOpenersShape;\n\tprivate readonly _registeredOpeners = new Map<string, RegisteredOpenerMetadata>();\n\tprivate readonly _contributedExternalUriOpenersStore: ContributedExternalUriOpenersStore;\n\n\tconstructor(\n\t\tcontext: IExtHostContext,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IExternalUriOpenerService externalUriOpenerService: IExternalUriOpenerService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IOpenerService private readonly openerService: IOpenerService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t) {\n\t\tsuper();\n\t\tthis.proxy = context.getProxy(ExtHostContext.ExtHostUriOpeners);\n\n\t\tthis._register(externalUriOpenerService.registerExternalOpenerProvider(this));\n\n\t\tthis._contributedExternalUriOpenersStore = this._register(new ContributedExternalUriOpenersStore(storageService, extensionService));\n\t}\n\n\tpublic async *getOpeners(targetUri: URI): AsyncIterable<IExternalUriOpener> {\n\n\t\t// Currently we only allow openers for http and https urls\n\t\tif (targetUri.scheme !== Schemas.http && targetUri.scheme !== Schemas.https) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.extensionService.activateByEvent(`onOpenExternalUri:${targetUri.scheme}`);\n\n\t\tfor (const [id, openerMetadata] of this._registeredOpeners) {\n\t\t\tif (openerMetadata.schemes.has(targetUri.scheme)) {\n\t\t\t\tyield this.createOpener(id, openerMetadata);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate createOpener(id: string, metadata: RegisteredOpenerMetadata): IExternalUriOpener {\n\t\treturn {\n\t\t\tid: id,\n\t\t\tlabel: metadata.label,\n\t\t\tcanOpen: (uri, token) => {\n\t\t\t\treturn this.proxy.$canOpenUri(id, uri, token);\n\t\t\t},\n\t\t\topenExternalUri: async (uri, ctx, token) => {\n\t\t\t\ttry {\n\t\t\t\t\tawait this.proxy.$openUri(id, { resolvedUri: uri, sourceUri: ctx.sourceUri }, token);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (!isPromiseCanceledError(e)) {\n\t\t\t\t\t\tconst openDefaultAction = new Action('default', localize('openerFailedUseDefault', \"Open using default opener\"), undefined, undefined, async () => {\n\t\t\t\t\t\t\tawait this.openerService.open(uri, {\n\t\t\t\t\t\t\t\tallowTunneling: false,\n\t\t\t\t\t\t\t\tallowContributedOpeners: defaultExternalUriOpenerId,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t\topenDefaultAction.tooltip = uri.toString();\n\n\t\t\t\t\t\tthis.notificationService.notify({\n\t\t\t\t\t\t\tseverity: Severity.Error,\n\t\t\t\t\t\t\tmessage: localize({\n\t\t\t\t\t\t\t\tkey: 'openerFailedMessage',\n\t\t\t\t\t\t\t\tcomment: ['{0} is the id of the opener. {1} is the url being opened.'],\n\t\t\t\t\t\t\t}, 'Could not open uri with \\'{0}\\': {1}', id, e.toString()),\n\t\t\t\t\t\t\tactions: {\n\t\t\t\t\t\t\t\tprimary: [\n\t\t\t\t\t\t\t\t\topenDefaultAction\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t},\n\t\t};\n\t}\n\n\tasync $registerUriOpener(\n\t\tid: string,\n\t\tschemes: readonly string[],\n\t\textensionId: ExtensionIdentifier,\n\t\tlabel: string,\n\t): Promise<void> {\n\t\tif (this._registeredOpeners.has(id)) {\n\t\t\tthrow new Error(`Opener with id '${id}' already registered`);\n\t\t}\n\n\t\tthis._registeredOpeners.set(id, {\n\t\t\tschemes: new Set(schemes),\n\t\t\tlabel,\n\t\t\textensionId,\n\t\t});\n\n\t\tthis._contributedExternalUriOpenersStore.didRegisterOpener(id, extensionId.value);\n\t}\n\n\tasync $unregisterUriOpener(id: string): Promise<void> {\n\t\tthis._registeredOpeners.delete(id);\n\t\tthis._contributedExternalUriOpenersStore.delete(id);\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\t\tthis._registeredOpeners.clear();\n\t}\n}\n"]}