{"version":3,"file":"mainThreadLabelService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/api/browser/mainThreadLabelService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAQhG,IAAa,sBAAsB,GAAnC,MAAa,sBAAsB;QAIlC,YACC,CAAkB,EACc,aAA4B;YAA5B,kBAAa,GAAb,aAAa,CAAe;YAJ5C,6BAAwB,GAAG,IAAI,GAAG,EAAuB,CAAC;QAKvE,CAAC;QAEL,+BAA+B,CAAC,MAAc,EAAE,SAAiC;YAChF,gGAAgG;YAChG,SAAS,CAAC,QAAQ,GAAG,IAAI,CAAC;YAC1B,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;YACnE,IAAI,CAAC,wBAAwB,CAAC,GAAG,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;QACvD,CAAC;QAED,iCAAiC,CAAC,MAAc;YAC/C,CAAA,GAAA,mBAAO,CAAA,CAAC,IAAI,CAAC,wBAAwB,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;YACnD,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAC9C,CAAC;QAED,OAAO;YACN,OAAO;QACR,CAAC;KACD,CAAA;IAxBY,sBAAsB;QADlC,CAAA,GAAA,uCAAoB,CAAA,CAAC,8BAAW,CAAC,sBAAsB,CAAC;QAOtD,WAAA,qBAAa,CAAA;OANH,sBAAsB,CAwBlC;IAxBY,wDAAsB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { MainContext, MainThreadLabelServiceShape, IExtHostContext } from 'vs/workbench/api/common/extHost.protocol';\nimport { extHostNamedCustomer } from 'vs/workbench/api/common/extHostCustomers';\nimport { ResourceLabelFormatter, ILabelService } from 'vs/platform/label/common/label';\nimport { IDisposable, dispose } from 'vs/base/common/lifecycle';\n\n@extHostNamedCustomer(MainContext.MainThreadLabelService)\nexport class MainThreadLabelService implements MainThreadLabelServiceShape {\n\n\tprivate readonly _resourceLabelFormatters = new Map<number, IDisposable>();\n\n\tconstructor(\n\t\t_: IExtHostContext,\n\t\t@ILabelService private readonly _labelService: ILabelService\n\t) { }\n\n\t$registerResourceLabelFormatter(handle: number, formatter: ResourceLabelFormatter): void {\n\t\t// Dynamicily registered formatters should have priority over those contributed via package.json\n\t\tformatter.priority = true;\n\t\tconst disposable = this._labelService.registerFormatter(formatter);\n\t\tthis._resourceLabelFormatters.set(handle, disposable);\n\t}\n\n\t$unregisterResourceLabelFormatter(handle: number): void {\n\t\tdispose(this._resourceLabelFormatters.get(handle));\n\t\tthis._resourceLabelFormatters.delete(handle);\n\t}\n\n\tdispose(): void {\n\t\t// noop\n\t}\n}"]}