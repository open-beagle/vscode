{"version":3,"sources":["vs/workbench/api/browser/mainThreadMessageService.ts"],"names":[],"mappings":"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","file":"mainThreadMessageService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport Severity from 'vs/base/common/severity';\nimport { Action, IAction } from 'vs/base/common/actions';\nimport { MainThreadMessageServiceShape, MainContext, IExtHostContext, MainThreadMessageOptions } from '../common/extHost.protocol';\nimport { extHostNamedCustomer } from 'vs/workbench/api/common/extHostCustomers';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { Event } from 'vs/base/common/event';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { dispose } from 'vs/base/common/lifecycle';\nimport { ExtensionIdentifier, IExtensionDescription } from 'vs/platform/extensions/common/extensions';\n\n@extHostNamedCustomer(MainContext.MainThreadMessageService)\nexport class MainThreadMessageService implements MainThreadMessageServiceShape {\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@INotificationService private readonly _notificationService: INotificationService,\n\t\t@ICommandService private readonly _commandService: ICommandService,\n\t\t@IDialogService private readonly _dialogService: IDialogService\n\t) {\n\t\t//\n\t}\n\n\tdispose(): void {\n\t\t//\n\t}\n\n\t$showMessage(severity: Severity, message: string, options: MainThreadMessageOptions, commands: { title: string; isCloseAffordance: boolean; handle: number; }[]): Promise<number | undefined> {\n\t\tif (options.modal) {\n\t\t\treturn this._showModalMessage(severity, message, commands, options.useCustom);\n\t\t} else {\n\t\t\treturn this._showMessage(severity, message, commands, options.extension);\n\t\t}\n\t}\n\n\tprivate _showMessage(severity: Severity, message: string, commands: { title: string; isCloseAffordance: boolean; handle: number; }[], extension: IExtensionDescription | undefined): Promise<number | undefined> {\n\n\t\treturn new Promise<number | undefined>(resolve => {\n\n\t\t\tconst primaryActions: MessageItemAction[] = [];\n\n\t\t\tclass MessageItemAction extends Action {\n\t\t\t\tconstructor(id: string, label: string, handle: number) {\n\t\t\t\t\tsuper(id, label, undefined, true, () => {\n\t\t\t\t\t\tresolve(handle);\n\t\t\t\t\t\treturn Promise.resolve();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tclass ManageExtensionAction extends Action {\n\t\t\t\tconstructor(id: ExtensionIdentifier, label: string, commandService: ICommandService) {\n\t\t\t\t\tsuper(id.value, label, undefined, true, () => {\n\t\t\t\t\t\treturn commandService.executeCommand('_extensions.manage', id.value);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcommands.forEach(command => {\n\t\t\t\tprimaryActions.push(new MessageItemAction('_extension_message_handle_' + command.handle, command.title, command.handle));\n\t\t\t});\n\n\t\t\tlet source: string | { label: string, id: string } | undefined;\n\t\t\tif (extension) {\n\t\t\t\tsource = {\n\t\t\t\t\tlabel: nls.localize('extensionSource', \"{0} (Extension)\", extension.displayName || extension.name),\n\t\t\t\t\tid: extension.identifier.value\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (!source) {\n\t\t\t\tsource = nls.localize('defaultSource', \"Extension\");\n\t\t\t}\n\n\t\t\tconst secondaryActions: IAction[] = [];\n\t\t\tif (extension && !extension.isUnderDevelopment) {\n\t\t\t\tsecondaryActions.push(new ManageExtensionAction(extension.identifier, nls.localize('manageExtension', \"Manage Extension\"), this._commandService));\n\t\t\t}\n\n\t\t\tconst messageHandle = this._notificationService.notify({\n\t\t\t\tseverity,\n\t\t\t\tmessage,\n\t\t\t\tactions: { primary: primaryActions, secondary: secondaryActions },\n\t\t\t\tsource\n\t\t\t});\n\n\t\t\t// if promise has not been resolved yet, now is the time to ensure a return value\n\t\t\t// otherwise if already resolved it means the user clicked one of the buttons\n\t\t\tEvent.once(messageHandle.onDidClose)(() => {\n\t\t\t\tdispose(primaryActions);\n\t\t\t\tdispose(secondaryActions);\n\t\t\t\tresolve(undefined);\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate async _showModalMessage(severity: Severity, message: string, commands: { title: string; isCloseAffordance: boolean; handle: number; }[], useCustom?: boolean): Promise<number | undefined> {\n\t\tlet cancelId: number | undefined = undefined;\n\n\t\tconst buttons = commands.map((command, index) => {\n\t\t\tif (command.isCloseAffordance === true) {\n\t\t\t\tcancelId = index;\n\t\t\t}\n\n\t\t\treturn command.title;\n\t\t});\n\n\t\tif (cancelId === undefined) {\n\t\t\tif (buttons.length > 0) {\n\t\t\t\tbuttons.push(nls.localize('cancel', \"Cancel\"));\n\t\t\t} else {\n\t\t\t\tbuttons.push(nls.localize('ok', \"OK\"));\n\t\t\t}\n\n\t\t\tcancelId = buttons.length - 1;\n\t\t}\n\n\t\tconst { choice } = await this._dialogService.show(severity, message, buttons, { cancelId, custom: useCustom });\n\t\treturn choice === commands.length ? undefined : commands[choice].handle;\n\t}\n}\n"]}