{"version":3,"file":"mainThreadConsole.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/api/browser/mainThreadConsole.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAWhG,IAAa,iBAAiB,GAA9B,MAAa,iBAAiB;QAI7B,YACC,eAAgC,EACM,mBAAwC,EAChD,WAAwB;YADhB,wBAAmB,GAAnB,mBAAmB,CAAqB;YAChD,gBAAW,GAAX,WAAW,CAAa;YAEtD,MAAM,OAAO,GAAG,CAAA,GAAA,8CAAwB,CAAA,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;YACnE,IAAI,CAAC,0BAA0B,GAAG,OAAO,CAAC,yBAAyB,CAAC;QACrE,CAAC;QAED,OAAO;YACN,EAAE;QACH,CAAC;QAED,wBAAwB,CAAC,KAAwB;YAChD,qDAAqD;YACrD,IAAI,CAAC,IAAI,CAAC,0BAA0B,EAAE;gBACrC,CAAA,GAAA,aAAG,CAAA,CAAC,KAAK,EAAE,gBAAgB,CAAC,CAAC;aAC7B;YAED,6CAA6C;YAC7C,IAAI,IAAI,CAAC,0BAA0B,EAAE;gBACpC,CAAA,GAAA,kCAAc,CAAA,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;aACxC;QACF,CAAC;KACD,CAAA;IA5BY,iBAAiB;QAD7B,CAAA,GAAA,uCAAoB,CAAA,CAAC,8BAAW,CAAC,iBAAiB,CAAC;QAOjD,WAAA,iCAAmB,CAAA;QACnB,WAAA,iBAAW,CAAA;OAPD,iBAAiB,CA4B7B;IA5BY,8CAAiB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { extHostNamedCustomer } from 'vs/workbench/api/common/extHostCustomers';\nimport { MainContext, MainThreadConsoleShape, IExtHostContext } from 'vs/workbench/api/common/extHost.protocol';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IRemoteConsoleLog, log } from 'vs/base/common/console';\nimport { logRemoteEntry } from 'vs/workbench/services/extensions/common/remoteConsoleUtil';\nimport { parseExtensionDevOptions } from 'vs/workbench/services/extensions/common/extensionDevOptions';\nimport { ILogService } from 'vs/platform/log/common/log';\n\n@extHostNamedCustomer(MainContext.MainThreadConsole)\nexport class MainThreadConsole implements MainThreadConsoleShape {\n\n\tprivate readonly _isExtensionDevTestFromCli: boolean;\n\n\tconstructor(\n\t\t_extHostContext: IExtHostContext,\n\t\t@IEnvironmentService private readonly _environmentService: IEnvironmentService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\t\tconst devOpts = parseExtensionDevOptions(this._environmentService);\n\t\tthis._isExtensionDevTestFromCli = devOpts.isExtensionDevTestFromCli;\n\t}\n\n\tdispose(): void {\n\t\t//\n\t}\n\n\t$logExtensionHostMessage(entry: IRemoteConsoleLog): void {\n\t\t// Send to local console unless we run tests from cli\n\t\tif (!this._isExtensionDevTestFromCli) {\n\t\t\tlog(entry, 'Extension Host');\n\t\t}\n\n\t\t// Log on main side if running tests from cli\n\t\tif (this._isExtensionDevTestFromCli) {\n\t\t\tlogRemoteEntry(this._logService, entry);\n\t\t}\n\t}\n}\n"]}