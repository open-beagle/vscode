{"version":3,"file":"mainThreadStatusBar.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/api/browser/mainThreadStatusBar.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAYhG,IAAa,mBAAmB,GAAhC,MAAa,mBAAmB;QAI/B,YACC,eAAgC,EACI,gBAAmC;YAAnC,qBAAgB,GAAhB,gBAAgB,CAAmB;YAJvD,YAAO,GAAkH,IAAI,GAAG,EAAE,CAAC;QAKhJ,CAAC;QAEL,OAAO;YACN,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC,CAAC;YACxD,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;QACtB,CAAC;QAED,SAAS,CAAC,EAAU,EAAE,QAAgB,EAAE,UAAkB,EAAE,IAAY,EAAE,OAA2B,EAAE,OAA4B,EAAE,KAAsC,EAAE,eAAgD,EAAE,SAAuC,EAAE,QAA4B,EAAE,wBAAmD;YACxV,oEAAoE;YACpE,IAAI,SAAiB,CAAC;YACtB,IAAI,IAAI,GAAuB,SAAS,CAAC;YACzC,IAAI,wBAAwB,EAAE;gBAC7B,SAAS,GAAG,wBAAwB,CAAC,KAAK,CAAC;gBAC3C,IAAI,GAAG,wBAAwB,CAAC,IAAI,CAAC;aACrC;iBAAM;gBACN,SAAS,GAAG,CAAA,GAAA,8BAAmB,CAAA,CAAC,IAAI,CAAC,CAAC;aACtC;YACD,MAAM,KAAK,GAAoB,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,eAAe,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;YAEnG,IAAI,OAAO,QAAQ,KAAK,WAAW,EAAE;gBACpC,QAAQ,GAAG,CAAC,CAAC;aACb;YAED,wDAAwD;YACxD,IAAI,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;YACzC,IAAI,aAAa,IAAI,CAAC,aAAa,CAAC,SAAS,KAAK,SAAS,IAAI,aAAa,CAAC,QAAQ,KAAK,QAAQ,CAAC,EAAE;gBACpG,CAAA,GAAA,mBAAO,CAAA,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;gBAChC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;gBACxB,aAAa,GAAG,SAAS,CAAC;aAC1B;YAED,mCAAmC;YACnC,IAAI,CAAC,aAAa,EAAE;gBACnB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,QAAQ,EAAE,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,KAAK,EAAE,QAAQ,EAAE,UAAU,EAAE,SAAS,EAAE,QAAQ,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,CAAC,CAAC;aAC1I;YAED,mBAAmB;iBACd;gBACJ,aAAa,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;aACrC;QACF,CAAC;QAED,QAAQ,CAAC,EAAU;YAClB,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;YACnC,IAAI,KAAK,EAAE;gBACV,CAAA,GAAA,mBAAO,CAAA,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;gBACxB,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;aACxB;QACF,CAAC;KACD,CAAA;IAxDY,mBAAmB;QAD/B,CAAA,GAAA,uCAAoB,CAAA,CAAC,8BAAW,CAAC,mBAAmB,CAAC;QAOnD,WAAA,6BAAiB,CAAA;OANP,mBAAmB,CAwD/B;IAxDY,kDAAmB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IStatusbarService, StatusbarAlignment as MainThreadStatusBarAlignment, IStatusbarEntryAccessor, IStatusbarEntry } from 'vs/workbench/services/statusbar/common/statusbar';\nimport { MainThreadStatusBarShape, MainContext, IExtHostContext } from '../common/extHost.protocol';\nimport { ThemeColor } from 'vs/platform/theme/common/themeService';\nimport { extHostNamedCustomer } from 'vs/workbench/api/common/extHostCustomers';\nimport { dispose } from 'vs/base/common/lifecycle';\nimport { Command } from 'vs/editor/common/modes';\nimport { IAccessibilityInformation } from 'vs/platform/accessibility/common/accessibility';\nimport { getCodiconAriaLabel } from 'vs/base/common/codicons';\n\n@extHostNamedCustomer(MainContext.MainThreadStatusBar)\nexport class MainThreadStatusBar implements MainThreadStatusBarShape {\n\n\tprivate readonly entries: Map<number, { accessor: IStatusbarEntryAccessor, alignment: MainThreadStatusBarAlignment, priority: number }> = new Map();\n\n\tconstructor(\n\t\t_extHostContext: IExtHostContext,\n\t\t@IStatusbarService private readonly statusbarService: IStatusbarService\n\t) { }\n\n\tdispose(): void {\n\t\tthis.entries.forEach(entry => entry.accessor.dispose());\n\t\tthis.entries.clear();\n\t}\n\n\t$setEntry(id: number, statusId: string, statusName: string, text: string, tooltip: string | undefined, command: Command | undefined, color: string | ThemeColor | undefined, backgroundColor: string | ThemeColor | undefined, alignment: MainThreadStatusBarAlignment, priority: number | undefined, accessibilityInformation: IAccessibilityInformation): void {\n\t\t// if there are icons in the text use the tooltip for the aria label\n\t\tlet ariaLabel: string;\n\t\tlet role: string | undefined = undefined;\n\t\tif (accessibilityInformation) {\n\t\t\tariaLabel = accessibilityInformation.label;\n\t\t\trole = accessibilityInformation.role;\n\t\t} else {\n\t\t\tariaLabel = getCodiconAriaLabel(text);\n\t\t}\n\t\tconst entry: IStatusbarEntry = { text, tooltip, command, color, backgroundColor, ariaLabel, role };\n\n\t\tif (typeof priority === 'undefined') {\n\t\t\tpriority = 0;\n\t\t}\n\n\t\t// Reset existing entry if alignment or priority changed\n\t\tlet existingEntry = this.entries.get(id);\n\t\tif (existingEntry && (existingEntry.alignment !== alignment || existingEntry.priority !== priority)) {\n\t\t\tdispose(existingEntry.accessor);\n\t\t\tthis.entries.delete(id);\n\t\t\texistingEntry = undefined;\n\t\t}\n\n\t\t// Create new entry if not existing\n\t\tif (!existingEntry) {\n\t\t\tthis.entries.set(id, { accessor: this.statusbarService.addEntry(entry, statusId, statusName, alignment, priority), alignment, priority });\n\t\t}\n\n\t\t// Otherwise update\n\t\telse {\n\t\t\texistingEntry.accessor.update(entry);\n\t\t}\n\t}\n\n\t$dispose(id: number) {\n\t\tconst entry = this.entries.get(id);\n\t\tif (entry) {\n\t\t\tdispose(entry.accessor);\n\t\t\tthis.entries.delete(id);\n\t\t}\n\t}\n}\n"]}