{"version":3,"sources":["vs/workbench/api/node/extHostDebugService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAwBhG,IAAa,mBAAmB,GAAhC,MAAa,mBAAoB,SAAQ,6CAAuB;QAO/D,YACqB,iBAAqC,EACtC,gBAAmC,EAC5B,gBAA0C,EACvC,cAA2C,EACjD,oBAA2C,EACjC,gBAAyC;YAE1E,KAAK,CAAC,iBAAiB,EAAE,gBAAgB,EAAE,gBAAgB,EAAE,cAAc,EAAE,oBAAoB,CAAC,CAAC;YAFlE,qBAAgB,GAAhB,gBAAgB,CAAyB;YATnE,iCAA4B,GAAG,IAAI,uBAAuB,EAAE,CAAC;QAYrE,CAAC;QAEkB,kBAAkB,CAAC,OAA2B,EAAE,OAA4B;YAC9F,QAAQ,OAAO,CAAC,IAAI,EAAE;gBACrB,KAAK,QAAQ;oBACZ,OAAO,IAAI,iCAAkB,CAAC,OAAO,CAAC,CAAC;gBACxC,KAAK,YAAY;oBAChB,OAAO,IAAI,oCAAqB,CAAC,OAAO,CAAC,CAAC;gBAC3C,KAAK,YAAY;oBAChB,OAAO,IAAI,qCAAsB,CAAC,OAAO,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;aAC1D;YACD,OAAO,KAAK,CAAC,kBAAkB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QACnD,CAAC;QAEkB,uBAAuB,CAAC,OAA4B,EAAE,iBAA+C;YACvH,MAAM,GAAG,GAAG,qCAAsB,CAAC,yBAAyB,CAAC,iBAAiB,CAAC,2BAA2B,EAAE,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;YAC5H,IAAI,GAAG,EAAE;gBACR,OAAO,IAAI,qCAAsB,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC;aACtE;YACD,OAAO,SAAS,CAAC;QAClB,CAAC;QAEkB,iBAAiB;YACnC,OAAO,IAAI,yBAAW,EAAE,CAAC;QAC1B,CAAC;QAEe,KAAK,CAAC,cAAc,CAAC,IAAiD,EAAE,SAAiB;YAExG,IAAI,IAAI,CAAC,IAAI,KAAK,YAAY,EAAE;gBAE/B,IAAI,CAAC,IAAI,CAAC,yBAAyB,EAAE;oBACpC,4EAA4E;oBAC5E,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,QAAQ,CAAC,EAAE;wBACpF,IAAI,CAAC,4BAA4B,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;oBAC9D,CAAC,CAAC,CAAC;iBACH;gBAED,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,iBAAiB,EAAE,CAAC;gBAC5E,MAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;gBAC1E,MAAM,SAAS,GAAG,IAAI,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;gBAElF,MAAM,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC,CAAC;gBACzD,IAAI,QAAQ,GAAG,MAAM,IAAI,CAAC,4BAA4B,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;gBAE7E,IAAI,oBAAwC,CAAC;gBAC7C,IAAI,yBAAyB,GAAG,KAAK,CAAC;gBAEtC,IAAI,CAAC,QAAQ,EAAE;oBACd,MAAM,OAAO,GAA2B;wBACvC,SAAS,EAAE,KAAK;wBAChB,SAAS,EAAE,SAAS;wBACpB,GAAG,EAAE,IAAI,CAAC,GAAG;wBACb,IAAI,EAAE,IAAI,CAAC,KAAK,IAAI,GAAG,CAAC,QAAQ,CAAC,CAAsB,EAAE,IAAU,CAAC;qBACpE,CAAC;oBACF,yBAAyB,GAAG,IAAI,CAAC;oBACjC,QAAQ,GAAG,IAAI,CAAC,gBAAgB,CAAC,yBAAyB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;oBAC1E,IAAI,CAAC,4BAA4B,CAAC,MAAM,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;iBAEhE;qBAAM;oBACN,oBAAoB,GAAG,IAAI,CAAC,GAAG,CAAC;iBAChC;gBAED,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAEpB,MAAM,cAAc,GAAG,MAAM,QAAQ,CAAC,SAAS,CAAC;gBAEhD,IAAI,yBAAyB,EAAE;oBAC9B,wDAAwD;oBACxD,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;iBACxD;qBAAM;oBACN,IAAI,cAAc,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,CAAC,GAAG,CAAU,oBAAoB,CAAC,EAAE;wBACzF,mCAAmC;wBACnC,IAAI,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;4BACpG,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;yBACzB;6BAAM,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;4BACtC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;yBAC3B;6BAAM,IAAI,QAAQ,CAAC,SAAS,EAAE;4BAC9B,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;yBACzB;6BAAM;4BACN,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;yBAC3B;qBACD;iBACD;gBAED,MAAM,OAAO,GAAG,CAAA,GAAA,0BAAc,CAAA,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,EAAE,oBAAoB,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;gBACjF,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;gBAE3B,6DAA6D;gBAC7D,MAAM,eAAe,GAAG,IAAI,CAAC,0BAA0B,CAAC,CAAC,CAAC,EAAE;oBAC3D,IAAI,CAAC,CAAC,EAAE,KAAK,SAAS,EAAE;wBACvB,IAAI,CAAC,4BAA4B,CAAC,IAAI,CAAC,QAAS,CAAC,CAAC;wBAClD,eAAe,CAAC,OAAO,EAAE,CAAC;qBAC1B;gBACF,CAAC,CAAC,CAAC;gBAEH,OAAO,cAAc,CAAC;aAEtB;iBAAM,IAAI,IAAI,CAAC,IAAI,KAAK,UAAU,EAAE;gBAEpC,OAAO,CAAA,GAAA,iCAAqB,CAAA,CAAC,IAAI,EAAE,MAAM,IAAI,CAAC,qBAAqB,CAAC,iBAAiB,EAAE,CAAC,CAAC;aACzF;YACD,OAAO,KAAK,CAAC,cAAc,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QAC9C,CAAC;QAES,sBAAsB,CAAC,OAAiC,EAAE,aAAyC,EAAE,oBAA2C;YACzJ,OAAO,IAAI,oDAA8B,CAAC,OAAO,EAAE,aAAa,EAAE,oBAAoB,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;QACjH,CAAC;KACD,CAAA;IA3HY,mBAAmB;QAQ7B,WAAA,sCAAkB,CAAA;QAClB,WAAA,oCAAiB,CAAA;QACjB,WAAA,kDAAwB,CAAA;QACxB,WAAA,wDAA2B,CAAA;QAC3B,WAAA,4CAAqB,CAAA;QACrB,WAAA,gDAAuB,CAAA;OAbb,mBAAmB,CA2H/B;IA3HY,kDAAmB;IA6HhC,MAAM,uBAAuB;QAA7B;YAMS,uBAAkB,GAAG,IAAI,GAAG,EAA2D,CAAC;QAwCjG,CAAC;QAtCO,KAAK,CAAC,QAAQ,CAAC,MAAc;YACnC,MAAM,OAAO,GAAG,CAAC,GAAG,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,CAAC,CAAC;YACvD,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAE,EAAE,CAAC,CAAA,GAAA,+BAAuB,CAAA,CAAC,KAAK,EAAC,EAAE,EAAC,EAAE;gBACzF,IAAI,QAAQ,CAAC,UAAU,KAAK,CAAC,CAAC,IAAI,MAAM,CAAA,GAAA,6BAAiB,CAAA,CAAC,MAAM,QAAQ,CAAC,SAAS,CAAC,EAAE;oBACpF,OAAO,IAAI,CAAC;iBACZ;gBAED,+DAA+D;gBAC/D,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;gBACvB,IAAI,QAAQ,CAAC,UAAU,GAAG,uBAAuB,CAAC,WAAW,GAAG,GAAG,IAAI,EAAE,CAAC,uBAAuB,EAAE;oBAClG,OAAO,IAAI,CAAC;iBACZ;gBAED,IAAI,QAAQ,CAAC,MAAM,KAAK,MAAM,EAAE;oBAC/B,OAAO,IAAI,CAAC;iBACZ;gBAED,QAAQ,CAAC,UAAU,GAAG,GAAG,CAAC;gBAC1B,OAAO,QAAQ,CAAC;YACjB,CAAC,CAAC,CAAC,CAAC;YAEJ,OAAO,MAAM,CAAA,GAAA,qBAAa,CAAA,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAwB,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACxE,CAAC;QAEM,MAAM,CAAC,QAAyB,EAAE,UAAkB;YAC1D,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,UAAU,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC,CAAC;QACvF,CAAC;QAEM,IAAI,CAAC,QAAyB;YACpC,MAAM,IAAI,GAAG,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YACnD,IAAI,IAAI,EAAE;gBACT,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;aACrB;QACF,CAAC;QAEM,gBAAgB,CAAC,QAAyB;YAChD,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAC1C,CAAC;;IA5CD;;OAEG;IACY,mCAAW,GAAG,IAAI,CAAC","file":"extHostDebugService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport type * as vscode from 'vscode';\nimport * as platform from 'vs/base/common/platform';\nimport { DebugAdapterExecutable } from 'vs/workbench/api/common/extHostTypes';\nimport { ExecutableDebugAdapter, SocketDebugAdapter, NamedPipeDebugAdapter } from 'vs/workbench/contrib/debug/node/debugAdapter';\nimport { AbstractDebugAdapter } from 'vs/workbench/contrib/debug/common/abstractDebugAdapter';\nimport { IExtHostWorkspace } from 'vs/workbench/api/common/extHostWorkspace';\nimport { IExtHostExtensionService } from 'vs/workbench/api/common/extHostExtensionService';\nimport { IExtHostDocumentsAndEditors, ExtHostDocumentsAndEditors } from 'vs/workbench/api/common/extHostDocumentsAndEditors';\nimport { IAdapterDescriptor } from 'vs/workbench/contrib/debug/common/debug';\nimport { IExtHostConfiguration, ExtHostConfigProvider } from '../common/extHostConfiguration';\nimport { ExtensionDescriptionRegistry } from 'vs/workbench/services/extensions/common/extensionDescriptionRegistry';\nimport { IExtHostTerminalService } from 'vs/workbench/api/common/extHostTerminalService';\nimport { IExtHostRpcService } from 'vs/workbench/api/common/extHostRpcService';\nimport { ExtHostDebugServiceBase, ExtHostDebugSession, ExtHostVariableResolverService } from 'vs/workbench/api/common/extHostDebugService';\nimport { ISignService } from 'vs/platform/sign/common/sign';\nimport { SignService } from 'vs/platform/sign/node/signService';\nimport { hasChildProcesses, prepareCommand, runInExternalTerminal } from 'vs/workbench/contrib/debug/node/terminals';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { AbstractVariableResolverService } from 'vs/workbench/services/configurationResolver/common/variableResolver';\nimport { createCancelablePromise, firstParallel } from 'vs/base/common/async';\n\nexport class ExtHostDebugService extends ExtHostDebugServiceBase {\n\n\toverride readonly _serviceBrand: undefined;\n\n\tprivate _integratedTerminalInstances = new DebugTerminalCollection();\n\tprivate _terminalDisposedListener: IDisposable | undefined;\n\n\tconstructor(\n\t\t@IExtHostRpcService extHostRpcService: IExtHostRpcService,\n\t\t@IExtHostWorkspace workspaceService: IExtHostWorkspace,\n\t\t@IExtHostExtensionService extensionService: IExtHostExtensionService,\n\t\t@IExtHostDocumentsAndEditors editorsService: IExtHostDocumentsAndEditors,\n\t\t@IExtHostConfiguration configurationService: IExtHostConfiguration,\n\t\t@IExtHostTerminalService private _terminalService: IExtHostTerminalService\n\t) {\n\t\tsuper(extHostRpcService, workspaceService, extensionService, editorsService, configurationService);\n\t}\n\n\tprotected override createDebugAdapter(adapter: IAdapterDescriptor, session: ExtHostDebugSession): AbstractDebugAdapter | undefined {\n\t\tswitch (adapter.type) {\n\t\t\tcase 'server':\n\t\t\t\treturn new SocketDebugAdapter(adapter);\n\t\t\tcase 'pipeServer':\n\t\t\t\treturn new NamedPipeDebugAdapter(adapter);\n\t\t\tcase 'executable':\n\t\t\t\treturn new ExecutableDebugAdapter(adapter, session.type);\n\t\t}\n\t\treturn super.createDebugAdapter(adapter, session);\n\t}\n\n\tprotected override daExecutableFromPackage(session: ExtHostDebugSession, extensionRegistry: ExtensionDescriptionRegistry): DebugAdapterExecutable | undefined {\n\t\tconst dae = ExecutableDebugAdapter.platformAdapterExecutable(extensionRegistry.getAllExtensionDescriptions(), session.type);\n\t\tif (dae) {\n\t\t\treturn new DebugAdapterExecutable(dae.command, dae.args, dae.options);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprotected override createSignService(): ISignService | undefined {\n\t\treturn new SignService();\n\t}\n\n\tpublic override async $runInTerminal(args: DebugProtocol.RunInTerminalRequestArguments, sessionId: string): Promise<number | undefined> {\n\n\t\tif (args.kind === 'integrated') {\n\n\t\t\tif (!this._terminalDisposedListener) {\n\t\t\t\t// React on terminal disposed and check if that is the debug terminal #12956\n\t\t\t\tthis._terminalDisposedListener = this._terminalService.onDidCloseTerminal(terminal => {\n\t\t\t\t\tthis._integratedTerminalInstances.onTerminalClosed(terminal);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst configProvider = await this._configurationService.getConfigProvider();\n\t\t\tconst shell = this._terminalService.getDefaultShell(true, configProvider);\n\t\t\tconst shellArgs = this._terminalService.getDefaultShellArgs(true, configProvider);\n\n\t\t\tconst shellConfig = JSON.stringify({ shell, shellArgs });\n\t\t\tlet terminal = await this._integratedTerminalInstances.checkout(shellConfig);\n\n\t\t\tlet cwdForPrepareCommand: string | undefined;\n\t\t\tlet giveShellTimeToInitialize = false;\n\n\t\t\tif (!terminal) {\n\t\t\t\tconst options: vscode.TerminalOptions = {\n\t\t\t\t\tshellPath: shell,\n\t\t\t\t\tshellArgs: shellArgs,\n\t\t\t\t\tcwd: args.cwd,\n\t\t\t\t\tname: args.title || nls.localize('debug.terminal.title', \"debuggee\"),\n\t\t\t\t};\n\t\t\t\tgiveShellTimeToInitialize = true;\n\t\t\t\tterminal = this._terminalService.createTerminalFromOptions(options, true);\n\t\t\t\tthis._integratedTerminalInstances.insert(terminal, shellConfig);\n\n\t\t\t} else {\n\t\t\t\tcwdForPrepareCommand = args.cwd;\n\t\t\t}\n\n\t\t\tterminal.show(true);\n\n\t\t\tconst shellProcessId = await terminal.processId;\n\n\t\t\tif (giveShellTimeToInitialize) {\n\t\t\t\t// give a new terminal some time to initialize the shell\n\t\t\t\tawait new Promise(resolve => setTimeout(resolve, 1000));\n\t\t\t} else {\n\t\t\t\tif (configProvider.getConfiguration('debug.terminal').get<boolean>('clearBeforeReusing')) {\n\t\t\t\t\t// clear terminal before reusing it\n\t\t\t\t\tif (shell.indexOf('powershell') >= 0 || shell.indexOf('pwsh') >= 0 || shell.indexOf('cmd.exe') >= 0) {\n\t\t\t\t\t\tterminal.sendText('cls');\n\t\t\t\t\t} else if (shell.indexOf('bash') >= 0) {\n\t\t\t\t\t\tterminal.sendText('clear');\n\t\t\t\t\t} else if (platform.isWindows) {\n\t\t\t\t\t\tterminal.sendText('cls');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tterminal.sendText('clear');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst command = prepareCommand(shell, args.args, cwdForPrepareCommand, args.env);\n\t\t\tterminal.sendText(command);\n\n\t\t\t// Mark terminal as unused when its session ends, see #112055\n\t\t\tconst sessionListener = this.onDidTerminateDebugSession(s => {\n\t\t\t\tif (s.id === sessionId) {\n\t\t\t\t\tthis._integratedTerminalInstances.free(terminal!);\n\t\t\t\t\tsessionListener.dispose();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn shellProcessId;\n\n\t\t} else if (args.kind === 'external') {\n\n\t\t\treturn runInExternalTerminal(args, await this._configurationService.getConfigProvider());\n\t\t}\n\t\treturn super.$runInTerminal(args, sessionId);\n\t}\n\n\tprotected createVariableResolver(folders: vscode.WorkspaceFolder[], editorService: ExtHostDocumentsAndEditors, configurationService: ExtHostConfigProvider): AbstractVariableResolverService {\n\t\treturn new ExtHostVariableResolverService(folders, editorService, configurationService, this._workspaceService);\n\t}\n}\n\nclass DebugTerminalCollection {\n\t/**\n\t * Delay before a new terminal is a candidate for reuse. See #71850\n\t */\n\tprivate static minUseDelay = 1000;\n\n\tprivate _terminalInstances = new Map<vscode.Terminal, { lastUsedAt: number, config: string }>();\n\n\tpublic async checkout(config: string) {\n\t\tconst entries = [...this._terminalInstances.entries()];\n\t\tconst promises = entries.map(([terminal, termInfo]) => createCancelablePromise(async ct => {\n\t\t\tif (termInfo.lastUsedAt !== -1 && await hasChildProcesses(await terminal.processId)) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// important: date check and map operations must be synchronous\n\t\t\tconst now = Date.now();\n\t\t\tif (termInfo.lastUsedAt + DebugTerminalCollection.minUseDelay > now || ct.isCancellationRequested) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif (termInfo.config !== config) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttermInfo.lastUsedAt = now;\n\t\t\treturn terminal;\n\t\t}));\n\n\t\treturn await firstParallel(promises, (t): t is vscode.Terminal => !!t);\n\t}\n\n\tpublic insert(terminal: vscode.Terminal, termConfig: string) {\n\t\tthis._terminalInstances.set(terminal, { lastUsedAt: Date.now(), config: termConfig });\n\t}\n\n\tpublic free(terminal: vscode.Terminal) {\n\t\tconst info = this._terminalInstances.get(terminal);\n\t\tif (info) {\n\t\t\tinfo.lastUsedAt = -1;\n\t\t}\n\t}\n\n\tpublic onTerminalClosed(terminal: vscode.Terminal) {\n\t\tthis._terminalInstances.delete(terminal);\n\t}\n}\n"]}