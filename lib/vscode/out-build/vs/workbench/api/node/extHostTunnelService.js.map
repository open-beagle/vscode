{"version":3,"file":"extHostTunnelService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/api/node/extHostTunnelService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { MainThreadTunnelServiceShape, MainContext, PortAttributesProviderSelector } from 'vs/workbench/api/common/extHost.protocol';\nimport { IExtHostRpcService } from 'vs/workbench/api/common/extHostRpcService';\nimport type * as vscode from 'vscode';\nimport { Disposable, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { IExtHostInitDataService } from 'vs/workbench/api/common/extHostInitDataService';\nimport { URI } from 'vs/base/common/uri';\nimport { exec } from 'child_process';\nimport * as resources from 'vs/base/common/resources';\nimport * as fs from 'fs';\nimport * as pfs from 'vs/base/node/pfs';\nimport * as types from 'vs/workbench/api/common/extHostTypes';\nimport { isLinux } from 'vs/base/common/platform';\nimport { IExtHostTunnelService, TunnelDto } from 'vs/workbench/api/common/extHostTunnelService';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { TunnelOptions, TunnelCreationOptions, ProvidedPortAttributes, ProvidedOnAutoForward } from 'vs/platform/remote/common/tunnel';\nimport { IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { MovingAverage } from 'vs/base/common/numbers';\nimport { CandidatePort } from 'vs/workbench/services/remote/common/remoteExplorerService';\nimport { ILogService } from 'vs/platform/log/common/log';\n\nclass ExtensionTunnel implements vscode.Tunnel {\n\tprivate _onDispose: Emitter<void> = new Emitter();\n\tonDidDispose: Event<void> = this._onDispose.event;\n\n\tconstructor(\n\t\tpublic readonly remoteAddress: { port: number, host: string },\n\t\tpublic readonly localAddress: { port: number, host: string } | string,\n\t\tprivate readonly _dispose: () => Promise<void>) { }\n\n\tdispose(): Promise<void> {\n\t\tthis._onDispose.fire();\n\t\treturn this._dispose();\n\t}\n}\n\nexport function getSockets(stdout: string): Record<string, { pid: number; socket: number; }> {\n\tconst lines = stdout.trim().split('\\n');\n\tconst mapped: { pid: number, socket: number }[] = [];\n\tlines.forEach(line => {\n\t\tconst match = /\\/proc\\/(\\d+)\\/fd\\/\\d+ -> socket:\\[(\\d+)\\]/.exec(line)!;\n\t\tif (match && match.length >= 3) {\n\t\t\tmapped.push({\n\t\t\t\tpid: parseInt(match[1], 10),\n\t\t\t\tsocket: parseInt(match[2], 10)\n\t\t\t});\n\t\t}\n\t});\n\tconst socketMap = mapped.reduce((m, socket) => {\n\t\tm[socket.socket] = socket;\n\t\treturn m;\n\t}, {} as Record<string, typeof mapped[0]>);\n\treturn socketMap;\n}\n\nexport function loadListeningPorts(...stdouts: string[]): { socket: number, ip: string, port: number }[] {\n\tconst table = ([] as Record<string, string>[]).concat(...stdouts.map(loadConnectionTable));\n\treturn [\n\t\t...new Map(\n\t\t\ttable.filter(row => row.st === '0A')\n\t\t\t\t.map(row => {\n\t\t\t\t\tconst address = row.local_address.split(':');\n\t\t\t\t\treturn {\n\t\t\t\t\t\tsocket: parseInt(row.inode, 10),\n\t\t\t\t\t\tip: parseIpAddress(address[0]),\n\t\t\t\t\t\tport: parseInt(address[1], 16)\n\t\t\t\t\t};\n\t\t\t\t}).map(port => [port.ip + ':' + port.port, port])\n\t\t).values()\n\t];\n}\n\nexport function parseIpAddress(hex: string): string {\n\tlet result = '';\n\tif (hex.length === 8) {\n\t\tfor (let i = hex.length - 2; i >= 0; i -= 2) {\n\t\t\tresult += parseInt(hex.substr(i, 2), 16);\n\t\t\tif (i !== 0) {\n\t\t\t\tresult += '.';\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfor (let i = hex.length - 4; i >= 0; i -= 4) {\n\t\t\tresult += parseInt(hex.substr(i, 4), 16).toString(16);\n\t\t\tif (i !== 0) {\n\t\t\t\tresult += ':';\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n\nexport function loadConnectionTable(stdout: string): Record<string, string>[] {\n\tconst lines = stdout.trim().split('\\n');\n\tconst names = lines.shift()!.trim().split(/\\s+/)\n\t\t.filter(name => name !== 'rx_queue' && name !== 'tm->when');\n\tconst table = lines.map(line => line.trim().split(/\\s+/).reduce((obj, value, i) => {\n\t\tobj[names[i] || i] = value;\n\t\treturn obj;\n\t}, {} as Record<string, string>));\n\treturn table;\n}\n\nfunction knownExcludeCmdline(command: string): boolean {\n\treturn !!command.match(/.*\\.vscode-server-[a-zA-Z]+\\/bin.*/)\n\t\t|| (command.indexOf('out/vs/server/main.js') !== -1)\n\t\t|| (command.indexOf('_productName=VSCode') !== -1);\n}\n\nexport function getRootProcesses(stdout: string) {\n\tconst lines = stdout.trim().split('\\n');\n\tconst mapped: { pid: number, cmd: string, ppid: number }[] = [];\n\tlines.forEach(line => {\n\t\tconst match = /^\\d+\\s+\\D+\\s+root\\s+(\\d+)\\s+(\\d+).+\\d+\\:\\d+\\:\\d+\\s+(.+)$/.exec(line)!;\n\t\tif (match && match.length >= 4) {\n\t\t\tmapped.push({\n\t\t\t\tpid: parseInt(match[1], 10),\n\t\t\t\tppid: parseInt(match[2]),\n\t\t\t\tcmd: match[3]\n\t\t\t});\n\t\t}\n\t});\n\treturn mapped;\n}\n\nexport async function findPorts(connections: { socket: number, ip: string, port: number }[], socketMap: Record<string, { pid: number, socket: number }>, processes: { pid: number, cwd: string, cmd: string }[]): Promise<CandidatePort[]> {\n\tconst processMap = processes.reduce((m, process) => {\n\t\tm[process.pid] = process;\n\t\treturn m;\n\t}, {} as Record<string, typeof processes[0]>);\n\n\tconst ports: CandidatePort[] = [];\n\tconnections.forEach(({ socket, ip, port }) => {\n\t\tconst pid = socketMap[socket] ? socketMap[socket].pid : undefined;\n\t\tconst command: string | undefined = pid ? processMap[pid]?.cmd : undefined;\n\t\tif (pid && command && !knownExcludeCmdline(command)) {\n\t\t\tports.push({ host: ip, port, detail: command, pid });\n\t\t}\n\t});\n\treturn ports;\n}\n\nexport function tryFindRootPorts(connections: { socket: number, ip: string, port: number }[], rootProcessesStdout: string, previousPorts: Map<number, CandidatePort & { ppid: number }>): Map<number, CandidatePort & { ppid: number }> {\n\tconst ports: Map<number, CandidatePort & { ppid: number }> = new Map();\n\tconst rootProcesses = getRootProcesses(rootProcessesStdout);\n\n\tfor (const connection of connections) {\n\t\tconst previousPort = previousPorts.get(connection.port);\n\t\tif (previousPort) {\n\t\t\tports.set(connection.port, previousPort);\n\t\t\tcontinue;\n\t\t}\n\t\tconst rootProcessMatch = rootProcesses.find((value) => value.cmd.includes(`${connection.port}`));\n\t\tif (rootProcessMatch) {\n\t\t\tlet bestMatch = rootProcessMatch;\n\t\t\t// There are often several processes that \"look\" like they could match the port.\n\t\t\t// The one we want is usually the child of the other. Find the most child process.\n\t\t\tlet mostChild: { pid: number, cmd: string, ppid: number } | undefined;\n\t\t\tdo {\n\t\t\t\tmostChild = rootProcesses.find(value => value.ppid === bestMatch.pid);\n\t\t\t\tif (mostChild) {\n\t\t\t\t\tbestMatch = mostChild;\n\t\t\t\t}\n\t\t\t} while (mostChild);\n\t\t\tports.set(connection.port, { host: connection.ip, port: connection.port, pid: bestMatch.pid, detail: bestMatch.cmd, ppid: bestMatch.ppid });\n\t\t} else {\n\t\t\tports.set(connection.port, { host: connection.ip, port: connection.port, ppid: Number.MAX_VALUE });\n\t\t}\n\t}\n\n\treturn ports;\n}\n\nexport class ExtHostTunnelService extends Disposable implements IExtHostTunnelService {\n\treadonly _serviceBrand: undefined;\n\tprivate readonly _proxy: MainThreadTunnelServiceShape;\n\tprivate _forwardPortProvider: ((tunnelOptions: TunnelOptions, tunnelCreationOptions: TunnelCreationOptions) => Thenable<vscode.Tunnel> | undefined) | undefined;\n\tprivate _showCandidatePort: (host: string, port: number, detail: string) => Thenable<boolean> = () => { return Promise.resolve(true); };\n\tprivate _extensionTunnels: Map<string, Map<number, { tunnel: vscode.Tunnel, disposeListener: IDisposable }>> = new Map();\n\tprivate _onDidChangeTunnels: Emitter<void> = new Emitter<void>();\n\tonDidChangeTunnels: vscode.Event<void> = this._onDidChangeTunnels.event;\n\tprivate _candidateFindingEnabled: boolean = false;\n\tprivate _foundRootPorts: Map<number, CandidatePort & { ppid: number }> = new Map();\n\n\tprivate _providerHandleCounter: number = 0;\n\tprivate _portAttributesProviders: Map<number, { provider: vscode.PortAttributesProvider, selector: PortAttributesProviderSelector }> = new Map();\n\n\tconstructor(\n\t\t@IExtHostRpcService extHostRpc: IExtHostRpcService,\n\t\t@IExtHostInitDataService initData: IExtHostInitDataService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tsuper();\n\t\tthis._proxy = extHostRpc.getProxy(MainContext.MainThreadTunnelService);\n\t\tif (isLinux && initData.remote.isRemote && initData.remote.authority) {\n\t\t\tthis._proxy.$setRemoteTunnelService(process.pid);\n\t\t}\n\t}\n\n\tasync openTunnel(extension: IExtensionDescription, forward: TunnelOptions): Promise<vscode.Tunnel | undefined> {\n\t\tthis.logService.trace(`ForwardedPorts: (ExtHostTunnelService) ${extension.identifier.value} called openTunnel API for ${forward.remoteAddress.host}:${forward.remoteAddress.port}.`);\n\t\tconst tunnel = await this._proxy.$openTunnel(forward, extension.displayName);\n\t\tif (tunnel) {\n\t\t\tconst disposableTunnel: vscode.Tunnel = new ExtensionTunnel(tunnel.remoteAddress, tunnel.localAddress, () => {\n\t\t\t\treturn this._proxy.$closeTunnel(tunnel.remoteAddress);\n\t\t\t});\n\t\t\tthis._register(disposableTunnel);\n\t\t\treturn disposableTunnel;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tasync getTunnels(): Promise<vscode.TunnelDescription[]> {\n\t\treturn this._proxy.$getTunnels();\n\t}\n\n\tprivate calculateDelay(movingAverage: number) {\n\t\t// Some local testing indicated that the moving average might be between 50-100 ms.\n\t\treturn Math.max(movingAverage * 20, 2000);\n\t}\n\n\tprivate nextPortAttributesProviderHandle(): number {\n\t\treturn this._providerHandleCounter++;\n\t}\n\n\tregisterPortsAttributesProvider(portSelector: PortAttributesProviderSelector, provider: vscode.PortAttributesProvider): vscode.Disposable {\n\t\tconst providerHandle = this.nextPortAttributesProviderHandle();\n\t\tthis._portAttributesProviders.set(providerHandle, { selector: portSelector, provider });\n\n\t\tthis._proxy.$registerPortsAttributesProvider(portSelector, providerHandle);\n\t\treturn new types.Disposable(() => {\n\t\t\tthis._portAttributesProviders.delete(providerHandle);\n\t\t\tthis._proxy.$unregisterPortsAttributesProvider(providerHandle);\n\t\t});\n\t}\n\n\tasync $providePortAttributes(handles: number[], ports: number[], pid: number | undefined, commandline: string | undefined, cancellationToken: vscode.CancellationToken): Promise<ProvidedPortAttributes[]> {\n\t\tconst providedAttributes: vscode.ProviderResult<vscode.PortAttributes>[] = [];\n\t\tfor (const handle of handles) {\n\t\t\tconst provider = this._portAttributesProviders.get(handle);\n\t\t\tif (!provider) {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t\tprovidedAttributes.push(...(await Promise.all(ports.map(async (port) => {\n\t\t\t\treturn provider.provider.providePortAttributes(port, pid, commandline, cancellationToken);\n\t\t\t}))));\n\t\t}\n\n\t\tconst allAttributes = <vscode.PortAttributes[]>providedAttributes.filter(attribute => !!attribute);\n\n\t\treturn (allAttributes.length > 0) ? allAttributes.map(attributes => {\n\t\t\treturn {\n\t\t\t\tautoForwardAction: <ProvidedOnAutoForward><unknown>attributes.autoForwardAction,\n\t\t\t\tport: attributes.port\n\t\t\t};\n\t\t}) : [];\n\t}\n\n\tasync $registerCandidateFinder(enable: boolean): Promise<void> {\n\t\tif (enable && this._candidateFindingEnabled) {\n\t\t\t// already enabled\n\t\t\treturn;\n\t\t}\n\t\tthis._candidateFindingEnabled = enable;\n\t\t// Regularly scan to see if the candidate ports have changed.\n\t\tlet movingAverage = new MovingAverage();\n\t\tlet oldPorts: { host: string, port: number, detail?: string }[] | undefined = undefined;\n\t\twhile (this._candidateFindingEnabled) {\n\t\t\tconst startTime = new Date().getTime();\n\t\t\tconst newPorts = await this.findCandidatePorts();\n\t\t\tthis.logService.trace(`ForwardedPorts: (ExtHostTunnelService) found candidate ports ${newPorts.map(port => port.port).join(', ')}`);\n\t\t\tconst timeTaken = new Date().getTime() - startTime;\n\t\t\tmovingAverage.update(timeTaken);\n\t\t\tif (!oldPorts || (JSON.stringify(oldPorts) !== JSON.stringify(newPorts))) {\n\t\t\t\toldPorts = newPorts;\n\t\t\t\tawait this._proxy.$onFoundNewCandidates(oldPorts);\n\t\t\t}\n\t\t\tawait (new Promise<void>(resolve => setTimeout(() => resolve(), this.calculateDelay(movingAverage.value))));\n\t\t}\n\t}\n\n\tasync setTunnelExtensionFunctions(provider: vscode.RemoteAuthorityResolver | undefined): Promise<IDisposable> {\n\t\t// Do not wait for any of the proxy promises here.\n\t\t// It will delay startup and there is nothing that needs to be waited for.\n\t\tif (provider) {\n\t\t\tif (provider.candidatePortSource !== undefined) {\n\t\t\t\tthis._proxy.$setCandidatePortSource(provider.candidatePortSource);\n\t\t\t}\n\t\t\tif (provider.showCandidatePort) {\n\t\t\t\tthis._showCandidatePort = provider.showCandidatePort;\n\t\t\t\tthis._proxy.$setCandidateFilter();\n\t\t\t}\n\t\t\tif (provider.tunnelFactory) {\n\t\t\t\tthis._forwardPortProvider = provider.tunnelFactory;\n\t\t\t\tthis._proxy.$setTunnelProvider(provider.tunnelFeatures ?? {\n\t\t\t\t\televation: false,\n\t\t\t\t\tpublic: false\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthis._forwardPortProvider = undefined;\n\t\t}\n\t\treturn toDisposable(() => {\n\t\t\tthis._forwardPortProvider = undefined;\n\t\t});\n\t}\n\n\tasync $closeTunnel(remote: { host: string, port: number }, silent?: boolean): Promise<void> {\n\t\tif (this._extensionTunnels.has(remote.host)) {\n\t\t\tconst hostMap = this._extensionTunnels.get(remote.host)!;\n\t\t\tif (hostMap.has(remote.port)) {\n\t\t\t\tif (silent) {\n\t\t\t\t\thostMap.get(remote.port)!.disposeListener.dispose();\n\t\t\t\t}\n\t\t\t\tawait hostMap.get(remote.port)!.tunnel.dispose();\n\t\t\t\thostMap.delete(remote.port);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync $onDidTunnelsChange(): Promise<void> {\n\t\tthis._onDidChangeTunnels.fire();\n\t}\n\n\tasync $forwardPort(tunnelOptions: TunnelOptions, tunnelCreationOptions: TunnelCreationOptions): Promise<TunnelDto | undefined> {\n\t\tif (this._forwardPortProvider) {\n\t\t\ttry {\n\t\t\t\tthis.logService.trace('ForwardedPorts: (ExtHostTunnelService) Getting tunnel from provider.');\n\t\t\t\tconst providedPort = this._forwardPortProvider(tunnelOptions, tunnelCreationOptions);\n\t\t\t\tthis.logService.trace('ForwardedPorts: (ExtHostTunnelService) Got tunnel promise from provider.');\n\t\t\t\tif (providedPort !== undefined) {\n\t\t\t\t\tconst tunnel = await providedPort;\n\t\t\t\t\tthis.logService.trace('ForwardedPorts: (ExtHostTunnelService) Successfully awaited tunnel from provider.');\n\t\t\t\t\tif (!this._extensionTunnels.has(tunnelOptions.remoteAddress.host)) {\n\t\t\t\t\t\tthis._extensionTunnels.set(tunnelOptions.remoteAddress.host, new Map());\n\t\t\t\t\t}\n\t\t\t\t\tconst disposeListener = this._register(tunnel.onDidDispose(() => {\n\t\t\t\t\t\tthis.logService.trace('ForwardedPorts: (ExtHostTunnelService) Extension fired tunnel\\'s onDidDispose.');\n\t\t\t\t\t\treturn this._proxy.$closeTunnel(tunnel.remoteAddress);\n\t\t\t\t\t}));\n\t\t\t\t\tthis._extensionTunnels.get(tunnelOptions.remoteAddress.host)!.set(tunnelOptions.remoteAddress.port, { tunnel, disposeListener });\n\t\t\t\t\treturn TunnelDto.fromApiTunnel(tunnel);\n\t\t\t\t} else {\n\t\t\t\t\tthis.logService.trace('ForwardedPorts: (ExtHostTunnelService) Tunnel is undefined');\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tthis.logService.trace('ForwardedPorts: (ExtHostTunnelService) tunnel provider error');\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tasync $applyCandidateFilter(candidates: CandidatePort[]): Promise<CandidatePort[]> {\n\t\tconst filter = await Promise.all(candidates.map(candidate => this._showCandidatePort(candidate.host, candidate.port, candidate.detail ?? '')));\n\t\tconst result = candidates.filter((candidate, index) => filter[index]);\n\t\tthis.logService.trace(`ForwardedPorts: (ExtHostTunnelService) filtered from ${candidates.map(port => port.port).join(', ')} to ${result.map(port => port.port).join(', ')}`);\n\t\treturn result;\n\t}\n\n\tasync findCandidatePorts(): Promise<CandidatePort[]> {\n\t\tlet tcp: string = '';\n\t\tlet tcp6: string = '';\n\t\ttry {\n\t\t\ttcp = await fs.promises.readFile('/proc/net/tcp', 'utf8');\n\t\t\ttcp6 = await fs.promises.readFile('/proc/net/tcp6', 'utf8');\n\t\t} catch (e) {\n\t\t\t// File reading error. No additional handling needed.\n\t\t}\n\t\tconst connections: { socket: number, ip: string, port: number }[] = loadListeningPorts(tcp, tcp6);\n\n\t\tconst procSockets: string = await (new Promise(resolve => {\n\t\t\texec('ls -l /proc/[0-9]*/fd/[0-9]* | grep socket:', (error, stdout, stderr) => {\n\t\t\t\tresolve(stdout);\n\t\t\t});\n\t\t}));\n\t\tconst socketMap = getSockets(procSockets);\n\n\t\tconst procChildren = await pfs.readdir('/proc');\n\t\tconst processes: {\n\t\t\tpid: number, cwd: string, cmd: string\n\t\t}[] = [];\n\t\tfor (let childName of procChildren) {\n\t\t\ttry {\n\t\t\t\tconst pid: number = Number(childName);\n\t\t\t\tconst childUri = resources.joinPath(URI.file('/proc'), childName);\n\t\t\t\tconst childStat = await fs.promises.stat(childUri.fsPath);\n\t\t\t\tif (childStat.isDirectory() && !isNaN(pid)) {\n\t\t\t\t\tconst cwd = await fs.promises.readlink(resources.joinPath(childUri, 'cwd').fsPath);\n\t\t\t\t\tconst cmd = await fs.promises.readFile(resources.joinPath(childUri, 'cmdline').fsPath, 'utf8');\n\t\t\t\t\tprocesses.push({ pid, cwd, cmd });\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t//\n\t\t\t}\n\t\t}\n\n\t\tconst unFoundConnections: { socket: number, ip: string, port: number }[] = [];\n\t\tconst filteredConnections = connections.filter((connection => {\n\t\t\tconst foundConnection = socketMap[connection.socket];\n\t\t\tif (!foundConnection) {\n\t\t\t\tunFoundConnections.push(connection);\n\t\t\t}\n\t\t\treturn foundConnection;\n\t\t}));\n\n\t\tconst foundPorts = findPorts(filteredConnections, socketMap, processes);\n\t\tlet heuristicPorts: CandidatePort[] | undefined;\n\t\tthis.logService.trace(`ForwardedPorts: (ExtHostTunnelService) number of possible root ports ${unFoundConnections.length}`);\n\t\tif (unFoundConnections.length > 0) {\n\t\t\tconst rootProcesses: string = await (new Promise(resolve => {\n\t\t\t\texec('ps -F -A -l | grep root', (error, stdout, stderr) => {\n\t\t\t\t\tresolve(stdout);\n\t\t\t\t});\n\t\t\t}));\n\t\t\tthis._foundRootPorts = tryFindRootPorts(unFoundConnections, rootProcesses, this._foundRootPorts);\n\t\t\theuristicPorts = Array.from(this._foundRootPorts.values());\n\t\t\tthis.logService.trace(`ForwardedPorts: (ExtHostTunnelService) heuristic ports ${heuristicPorts.join(', ')}`);\n\n\t\t}\n\t\treturn foundPorts.then(foundCandidates => {\n\t\t\tif (heuristicPorts) {\n\t\t\t\treturn foundCandidates.concat(heuristicPorts);\n\t\t\t} else {\n\t\t\t\treturn foundCandidates;\n\t\t\t}\n\t\t});\n\t}\n}\n"]}