{"version":3,"file":"extHostCLIServer.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/api/node/extHostCLIServer.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createRandomIPCHandle } from 'vs/base/parts/ipc/node/ipc.net';\nimport * as http from 'http';\nimport * as fs from 'fs';\nimport { IExtHostCommands } from 'vs/workbench/api/common/extHostCommands';\nimport { IWindowOpenable, IOpenWindowOptions } from 'vs/platform/windows/common/windows';\nimport { URI } from 'vs/base/common/uri';\nimport { hasWorkspaceFileExtension } from 'vs/platform/workspaces/common/workspaces';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { join } from 'vs/base/common/path';\nimport { tmpdir } from 'os';\n\nexport interface OpenCommandPipeArgs {\n\ttype: 'open';\n\tfileURIs?: string[];\n\tfolderURIs?: string[];\n\tforceNewWindow?: boolean;\n\tdiffMode?: boolean;\n\taddMode?: boolean;\n\tgotoLineMode?: boolean;\n\tforceReuseWindow?: boolean;\n\twaitMarkerFilePath?: string;\n}\n\nexport interface OpenExternalCommandPipeArgs {\n\ttype: 'openExternal';\n\turis: string[];\n}\n\nexport interface StatusPipeArgs {\n\ttype: 'status';\n}\n\nexport interface ExtensionManagementPipeArgs {\n\ttype: 'extensionManagement';\n\tlist?: { showVersions?: boolean, category?: string; };\n\tinstall?: string[];\n\tuninstall?: string[];\n\tforce?: boolean;\n}\n\nexport type PipeCommand = OpenCommandPipeArgs | StatusPipeArgs | OpenExternalCommandPipeArgs | ExtensionManagementPipeArgs;\n\nexport interface ICommandsExecuter {\n\texecuteCommand<T>(id: string, ...args: any[]): Promise<T>;\n}\n\nexport class CLIServerBase {\n\tprivate readonly _server: http.Server;\n\n\tconstructor(\n\t\tprivate readonly _commands: ICommandsExecuter,\n\t\tprivate readonly logService: ILogService,\n\t\tprivate readonly _ipcHandlePath: string,\n\t) {\n\t\tthis._server = http.createServer((req, res) => this.onRequest(req, res));\n\t\tthis.setup().catch(err => {\n\t\t\tlogService.error(err);\n\t\t\treturn '';\n\t\t});\n\t}\n\n\tpublic get ipcHandlePath() {\n\t\treturn this._ipcHandlePath;\n\t}\n\n\tprivate async setup(): Promise<string> {\n\t\t// NOTE@coder: Write this out so we can get the most recent path.\n\t\tfs.promises.writeFile(join(tmpdir(), 'vscode-ipc'), this._ipcHandlePath).catch((error) => {\n\t\t\tthis.logService.error(error);\n\t\t});\n\n\t\ttry {\n\t\t\tthis._server.listen(this.ipcHandlePath);\n\t\t\tthis._server.on('error', err => this.logService.error(err));\n\t\t} catch (err) {\n\t\t\tthis.logService.error('Could not start open from terminal server.');\n\t\t}\n\n\t\treturn this._ipcHandlePath;\n\t}\n\n\tprivate onRequest(req: http.IncomingMessage, res: http.ServerResponse): void {\n\t\tconst chunks: string[] = [];\n\t\treq.setEncoding('utf8');\n\t\treq.on('data', (d: string) => chunks.push(d));\n\t\treq.on('end', () => {\n\t\t\tconst data: PipeCommand | any = JSON.parse(chunks.join(''));\n\t\t\tswitch (data.type) {\n\t\t\t\tcase 'open':\n\t\t\t\t\tthis.open(data, res);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'openExternal':\n\t\t\t\t\tthis.openExternal(data, res);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'status':\n\t\t\t\t\tthis.getStatus(data, res);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'extensionManagement':\n\t\t\t\t\tthis.manageExtensions(data, res)\n\t\t\t\t\t\t.catch(this.logService.error);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tres.writeHead(404);\n\t\t\t\t\tres.write(`Unknown message type: ${data.type}`, err => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\tthis.logService.error(err);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tres.end();\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate open(data: OpenCommandPipeArgs, res: http.ServerResponse) {\n\t\tlet { fileURIs, folderURIs, forceNewWindow, diffMode, addMode, forceReuseWindow, gotoLineMode, waitMarkerFilePath } = data;\n\t\tconst urisToOpen: IWindowOpenable[] = [];\n\t\tif (Array.isArray(folderURIs)) {\n\t\t\tfor (const s of folderURIs) {\n\t\t\t\ttry {\n\t\t\t\t\turisToOpen.push({ folderUri: URI.parse(s) });\n\t\t\t\t} catch (e) {\n\t\t\t\t\t// ignore\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (Array.isArray(fileURIs)) {\n\t\t\tfor (const s of fileURIs) {\n\t\t\t\ttry {\n\t\t\t\t\tif (hasWorkspaceFileExtension(s)) {\n\t\t\t\t\t\turisToOpen.push({ workspaceUri: URI.parse(s) });\n\t\t\t\t\t} else {\n\t\t\t\t\t\turisToOpen.push({ fileUri: URI.parse(s) });\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\t// ignore\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (urisToOpen.length) {\n\t\t\tconst waitMarkerFileURI = waitMarkerFilePath ? URI.file(waitMarkerFilePath) : undefined;\n\t\t\tconst preferNewWindow = !forceReuseWindow && !waitMarkerFileURI && !addMode;\n\t\t\tconst windowOpenArgs: IOpenWindowOptions = { forceNewWindow, diffMode, addMode, gotoLineMode, forceReuseWindow, preferNewWindow, waitMarkerFileURI };\n\t\t\tthis._commands.executeCommand('_remoteCLI.windowOpen', urisToOpen, windowOpenArgs);\n\t\t}\n\t\tres.writeHead(200);\n\t\tres.end();\n\t}\n\n\tprivate async openExternal(data: OpenExternalCommandPipeArgs, res: http.ServerResponse) {\n\t\tfor (const uriString of data.uris) {\n\t\t\tconst uri = URI.parse(uriString);\n\t\t\tconst urioOpen = uri.scheme === 'file' ? uri : uriString; // workaround for #112577\n\t\t\tawait this._commands.executeCommand('_remoteCLI.openExternal', urioOpen);\n\t\t}\n\t\tres.writeHead(200);\n\t\tres.end();\n\t}\n\n\tprivate async manageExtensions(data: ExtensionManagementPipeArgs, res: http.ServerResponse) {\n\t\ttry {\n\t\t\tconst toExtOrVSIX = (inputs: string[] | undefined) => inputs?.map(input => /\\.vsix$/i.test(input) ? URI.parse(input) : input);\n\t\t\tconst commandArgs = {\n\t\t\t\tlist: data.list,\n\t\t\t\tinstall: toExtOrVSIX(data.install),\n\t\t\t\tuninstall: toExtOrVSIX(data.uninstall),\n\t\t\t\tforce: data.force\n\t\t\t};\n\t\t\tconst output = await this._commands.executeCommand('_remoteCLI.manageExtensions', commandArgs);\n\t\t\tres.writeHead(200);\n\t\t\tres.write(output);\n\t\t} catch (err) {\n\t\t\tres.writeHead(500);\n\t\t\tres.write(String(err), err => {\n\t\t\t\tif (err) {\n\t\t\t\t\tthis.logService.error(err);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tres.end();\n\t}\n\n\tprivate async getStatus(data: StatusPipeArgs, res: http.ServerResponse) {\n\t\ttry {\n\t\t\tconst status = await this._commands.executeCommand('_remoteCLI.getSystemStatus');\n\t\t\tres.writeHead(200);\n\t\t\tres.write(status);\n\t\t\tres.end();\n\t\t} catch (err) {\n\t\t\tres.writeHead(500);\n\t\t\tres.write(String(err), err => {\n\t\t\t\tif (err) {\n\t\t\t\t\tthis.logService.error(err);\n\t\t\t\t}\n\t\t\t});\n\t\t\tres.end();\n\t\t}\n\t}\n\n\tdispose(): void {\n\t\tthis._server.close();\n\n\t\tif (this._ipcHandlePath && process.platform !== 'win32' && fs.existsSync(this._ipcHandlePath)) {\n\t\t\tfs.unlinkSync(this._ipcHandlePath);\n\t\t}\n\t}\n}\n\nexport class CLIServer extends CLIServerBase {\n\tconstructor(\n\t\t@IExtHostCommands commands: IExtHostCommands,\n\t\t@ILogService logService: ILogService\n\t) {\n\t\tsuper(commands, logService, createRandomIPCHandle());\n\t}\n}\n"]}