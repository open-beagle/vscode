{"version":3,"file":"extHostSearch.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/api/node/extHostSearch.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport * as pfs from 'vs/base/node/pfs';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IFileQuery, IRawFileQuery, ISearchCompleteStats, isSerializedFileMatch, ISerializedSearchProgressItem, ITextQuery } from 'vs/workbench/services/search/common/search';\nimport { SearchService } from 'vs/workbench/services/search/node/rawSearchService';\nimport { RipgrepSearchProvider } from 'vs/workbench/services/search/node/ripgrepSearchProvider';\nimport { OutputChannel } from 'vs/workbench/services/search/node/ripgrepSearchUtils';\nimport type * as vscode from 'vscode';\nimport { IExtHostRpcService } from 'vs/workbench/api/common/extHostRpcService';\nimport { IURITransformerService } from 'vs/workbench/api/common/extHostUriTransformerService';\nimport { IExtHostInitDataService } from 'vs/workbench/api/common/extHostInitDataService';\nimport { ExtHostSearch, reviveQuery } from 'vs/workbench/api/common/extHostSearch';\nimport { Schemas } from 'vs/base/common/network';\nimport { NativeTextSearchManager } from 'vs/workbench/services/search/node/textSearchManager';\nimport { TextSearchManager } from 'vs/workbench/services/search/common/textSearchManager';\n\nexport class NativeExtHostSearch extends ExtHostSearch {\n\n\tprotected _pfs: typeof pfs = pfs; // allow extending for tests\n\n\tprivate _internalFileSearchHandle: number = -1;\n\tprivate _internalFileSearchProvider: SearchService | null = null;\n\n\tconstructor(\n\t\t@IExtHostRpcService extHostRpc: IExtHostRpcService,\n\t\t@IExtHostInitDataService initData: IExtHostInitDataService,\n\t\t@IURITransformerService _uriTransformer: IURITransformerService,\n\t\t@ILogService _logService: ILogService,\n\t) {\n\t\tsuper(extHostRpc, _uriTransformer, _logService);\n\n\t\tconst outputChannel = new OutputChannel('RipgrepSearchUD', this._logService);\n\t\tthis.registerTextSearchProvider(Schemas.userData, new RipgrepSearchProvider(outputChannel));\n\t\tif (initData.remote.isRemote && initData.remote.authority) {\n\t\t\tthis._registerEHSearchProviders();\n\t\t}\n\t}\n\n\tprivate _registerEHSearchProviders(): void {\n\t\tconst outputChannel = new OutputChannel('RipgrepSearchEH', this._logService);\n\t\tthis.registerTextSearchProvider(Schemas.file, new RipgrepSearchProvider(outputChannel));\n\t\tthis.registerInternalFileSearchProvider(Schemas.file, new SearchService());\n\t}\n\n\tprivate registerInternalFileSearchProvider(scheme: string, provider: SearchService): IDisposable {\n\t\tconst handle = this._handlePool++;\n\t\tthis._internalFileSearchProvider = provider;\n\t\tthis._internalFileSearchHandle = handle;\n\t\tthis._proxy.$registerFileSearchProvider(handle, this._transformScheme(scheme));\n\t\treturn toDisposable(() => {\n\t\t\tthis._internalFileSearchProvider = null;\n\t\t\tthis._proxy.$unregisterProvider(handle);\n\t\t});\n\t}\n\n\toverride $provideFileSearchResults(handle: number, session: number, rawQuery: IRawFileQuery, token: vscode.CancellationToken): Promise<ISearchCompleteStats> {\n\t\tconst query = reviveQuery(rawQuery);\n\t\tif (handle === this._internalFileSearchHandle) {\n\t\t\treturn this.doInternalFileSearch(handle, session, query, token);\n\t\t}\n\n\t\treturn super.$provideFileSearchResults(handle, session, rawQuery, token);\n\t}\n\n\tprivate doInternalFileSearch(handle: number, session: number, rawQuery: IFileQuery, token: vscode.CancellationToken): Promise<ISearchCompleteStats> {\n\t\tconst onResult = (ev: ISerializedSearchProgressItem) => {\n\t\t\tif (isSerializedFileMatch(ev)) {\n\t\t\t\tev = [ev];\n\t\t\t}\n\n\t\t\tif (Array.isArray(ev)) {\n\t\t\t\tthis._proxy.$handleFileMatch(handle, session, ev.map(m => URI.file(m.path)));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (ev.message) {\n\t\t\t\tthis._logService.debug('ExtHostSearch', ev.message);\n\t\t\t}\n\t\t};\n\n\t\tif (!this._internalFileSearchProvider) {\n\t\t\tthrow new Error('No internal file search handler');\n\t\t}\n\n\t\treturn <Promise<ISearchCompleteStats>>this._internalFileSearchProvider.doFileSearch(rawQuery, onResult, token);\n\t}\n\n\toverride $clearCache(cacheKey: string): Promise<void> {\n\t\tif (this._internalFileSearchProvider) {\n\t\t\tthis._internalFileSearchProvider.clearCache(cacheKey);\n\t\t}\n\n\t\treturn super.$clearCache(cacheKey);\n\t}\n\n\tprotected override createTextSearchManager(query: ITextQuery, provider: vscode.TextSearchProvider): TextSearchManager {\n\t\treturn new NativeTextSearchManager(query, provider);\n\t}\n}\n"]}