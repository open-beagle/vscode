{"version":3,"file":"extHostOutputService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/api/node/extHostOutputService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAkBhG,MAAM,cAAc;QAInB,YAAY,IAAY,EAAW,IAAY;YAAZ,SAAI,GAAJ,IAAI,CAAQ;YAC9C,IAAI,CAAC,QAAQ,GAAG,CAAA,GAAA,gCAAoB,CAAA,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,GAAG,gBAAQ,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;YACtE,IAAI,CAAC,QAAQ,CAAC,eAAe,EAAE,CAAC;QACjC,CAAC;QAED,MAAM,CAAC,OAAe;YACrB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACjC,CAAC;QAED,KAAK;YACJ,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;QACvB,CAAC;KACD;IAGD,MAAa,gCAAiC,SAAQ,4CAA4B;QAIjF,YAAY,IAAY,EAAE,QAAwB,EAAE,KAAmC;YACtF,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,SAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,CAAC;YACnD,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC3B,CAAC;QAEQ,MAAM,CAAC,KAAa;YAC5B,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACpB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAC7B,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;QAC1B,CAAC;QAEQ,MAAM;YACd,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;YACvB,KAAK,CAAC,MAAM,EAAE,CAAC;QAChB,CAAC;QAEQ,IAAI,CAAC,qBAAmD,EAAE,aAAuB;YACzF,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;YACvB,KAAK,CAAC,IAAI,CAAC,qBAAqB,EAAE,aAAa,CAAC,CAAC;QAClD,CAAC;QAEQ,KAAK;YACb,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;YACvB,KAAK,CAAC,KAAK,EAAE,CAAC;QACf,CAAC;KACD;IA7BD,4EA6BC;IAED,IAAa,qBAAqB,GAAlC,MAAa,qBAAsB,SAAQ,oCAAoB;QAO9D,YACqB,UAA8B,EACpB,UAAuB,EAC5B,QAAiC;YAE1D,KAAK,CAAC,UAAU,CAAC,CAAC;YAHY,eAAU,GAAV,UAAU,CAAa;YAN9C,cAAS,GAAW,CAAC,CAAC;YACb,cAAS,GAA8C,IAAI,GAAG,EAAwC,CAAC;YACvG,8BAAyB,GAAG,IAAI,6BAAiB,EAAE,CAAC;YAQpE,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC,YAAY,CAAC;QAC5C,CAAC;QAEQ,kBAAkB,CAAC,SAAiB;YAC5C,IAAI,SAAS,EAAE;gBACd,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;gBAC9C,IAAI,OAAO,EAAE;oBACZ,IAAI,CAAC,yBAAyB,CAAC,KAAK,GAAG,OAAO,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC;iBACnF;aACD;QACF,CAAC;QAEQ,mBAAmB,CAAC,IAAY;YACxC,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;YACnB,IAAI,CAAC,IAAI,EAAE;gBACV,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;aAC9D;YACD,MAAM,oBAAoB,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;YAC5D,oBAAoB,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;YAC9F,OAAO,IAAI,iCAAiB,CAAC,IAAI,EAAE,oBAAoB,CAAC,CAAC;QAC1D,CAAC;QAEO,KAAK,CAAC,mBAAmB,CAAC,IAAY;YAC7C,IAAI;gBACH,MAAM,aAAa,GAAG,CAAA,GAAA,WAAI,CAAA,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,kBAAkB,CAAA,GAAA,uBAAgB,CAAA,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;gBACpI,MAAM,MAAM,GAAG,MAAM,oBAAc,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;gBACnE,IAAI,CAAC,MAAM,EAAE;oBACZ,MAAM,aAAQ,CAAC,KAAK,CAAC,aAAa,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;iBACzD;gBACD,MAAM,QAAQ,GAAG,GAAG,IAAI,CAAC,SAAS,EAAE,IAAI,IAAI,CAAC,OAAO,CAAC,kBAAkB,EAAE,EAAE,CAAC,EAAE,CAAC;gBAC/E,MAAM,IAAI,GAAG,SAAG,CAAC,IAAI,CAAC,CAAA,GAAA,WAAI,CAAA,CAAC,aAAa,EAAE,GAAG,QAAQ,MAAM,CAAC,CAAC,CAAC;gBAC9D,MAAM,QAAQ,GAAG,IAAI,cAAc,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;gBAC3D,OAAO,IAAI,gCAAgC,CAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;aACzE;YAAC,OAAO,KAAK,EAAE;gBACf,2CAA2C;gBAC3C,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBAC7B,OAAO,IAAI,wCAAwB,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;aACvD;QACF,CAAC;KACD,CAAA;IApDY,qBAAqB;QAQ/B,WAAA,sCAAkB,CAAA;QAClB,WAAA,iBAAW,CAAA;QACX,WAAA,gDAAuB,CAAA;OAVb,qBAAqB,CAoDjC;IApDY,sDAAqB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { MainThreadOutputServiceShape } from '../common/extHost.protocol';\nimport type * as vscode from 'vscode';\nimport { URI } from 'vs/base/common/uri';\nimport { join } from 'vs/base/common/path';\nimport { toLocalISOString } from 'vs/base/common/date';\nimport { SymlinkSupport } from 'vs/base/node/pfs';\nimport { promises } from 'fs';\nimport { AbstractExtHostOutputChannel, ExtHostPushOutputChannel, ExtHostOutputService, LazyOutputChannel } from 'vs/workbench/api/common/extHostOutput';\nimport { IExtHostInitDataService } from 'vs/workbench/api/common/extHostInitDataService';\nimport { IExtHostRpcService } from 'vs/workbench/api/common/extHostRpcService';\nimport { MutableDisposable } from 'vs/base/common/lifecycle';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { createRotatingLogger } from 'vs/platform/log/node/spdlogLog';\nimport { RotatingLogger } from 'spdlog';\nimport { ByteSize } from 'vs/platform/files/common/files';\n\nclass OutputAppender {\n\n\tprivate appender: RotatingLogger;\n\n\tconstructor(name: string, readonly file: string) {\n\t\tthis.appender = createRotatingLogger(name, file, 30 * ByteSize.MB, 1);\n\t\tthis.appender.clearFormatters();\n\t}\n\n\tappend(content: string): void {\n\t\tthis.appender.critical(content);\n\t}\n\n\tflush(): void {\n\t\tthis.appender.flush();\n\t}\n}\n\n\nexport class ExtHostOutputChannelBackedByFile extends AbstractExtHostOutputChannel {\n\n\tprivate _appender: OutputAppender;\n\n\tconstructor(name: string, appender: OutputAppender, proxy: MainThreadOutputServiceShape) {\n\t\tsuper(name, false, URI.file(appender.file), proxy);\n\t\tthis._appender = appender;\n\t}\n\n\toverride append(value: string): void {\n\t\tsuper.append(value);\n\t\tthis._appender.append(value);\n\t\tthis._onDidAppend.fire();\n\t}\n\n\toverride update(): void {\n\t\tthis._appender.flush();\n\t\tsuper.update();\n\t}\n\n\toverride show(columnOrPreserveFocus?: vscode.ViewColumn | boolean, preserveFocus?: boolean): void {\n\t\tthis._appender.flush();\n\t\tsuper.show(columnOrPreserveFocus, preserveFocus);\n\t}\n\n\toverride clear(): void {\n\t\tthis._appender.flush();\n\t\tsuper.clear();\n\t}\n}\n\nexport class ExtHostOutputService2 extends ExtHostOutputService {\n\n\tprivate _logsLocation: URI;\n\tprivate _namePool: number = 1;\n\tprivate readonly _channels: Map<string, AbstractExtHostOutputChannel> = new Map<string, AbstractExtHostOutputChannel>();\n\tprivate readonly _visibleChannelDisposable = new MutableDisposable();\n\n\tconstructor(\n\t\t@IExtHostRpcService extHostRpc: IExtHostRpcService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IExtHostInitDataService initData: IExtHostInitDataService,\n\t) {\n\t\tsuper(extHostRpc);\n\t\tthis._logsLocation = initData.logsLocation;\n\t}\n\n\toverride $setVisibleChannel(channelId: string): void {\n\t\tif (channelId) {\n\t\t\tconst channel = this._channels.get(channelId);\n\t\t\tif (channel) {\n\t\t\t\tthis._visibleChannelDisposable.value = channel.onDidAppend(() => channel.update());\n\t\t\t}\n\t\t}\n\t}\n\n\toverride createOutputChannel(name: string): vscode.OutputChannel {\n\t\tname = name.trim();\n\t\tif (!name) {\n\t\t\tthrow new Error('illegal argument `name`. must not be falsy');\n\t\t}\n\t\tconst extHostOutputChannel = this._doCreateOutChannel(name);\n\t\textHostOutputChannel.then(channel => channel._id.then(id => this._channels.set(id, channel)));\n\t\treturn new LazyOutputChannel(name, extHostOutputChannel);\n\t}\n\n\tprivate async _doCreateOutChannel(name: string): Promise<AbstractExtHostOutputChannel> {\n\t\ttry {\n\t\t\tconst outputDirPath = join(this._logsLocation.fsPath, `output_logging_${toLocalISOString(new Date()).replace(/-|:|\\.\\d+Z$/g, '')}`);\n\t\t\tconst exists = await SymlinkSupport.existsDirectory(outputDirPath);\n\t\t\tif (!exists) {\n\t\t\t\tawait promises.mkdir(outputDirPath, { recursive: true });\n\t\t\t}\n\t\t\tconst fileName = `${this._namePool++}-${name.replace(/[\\\\/:\\*\\?\"<>\\|]/g, '')}`;\n\t\t\tconst file = URI.file(join(outputDirPath, `${fileName}.log`));\n\t\t\tconst appender = new OutputAppender(fileName, file.fsPath);\n\t\t\treturn new ExtHostOutputChannelBackedByFile(name, appender, this._proxy);\n\t\t} catch (error) {\n\t\t\t// Do not crash if logger cannot be created\n\t\t\tthis.logService.error(error);\n\t\t\treturn new ExtHostPushOutputChannel(name, this._proxy);\n\t\t}\n\t}\n}\n"]}