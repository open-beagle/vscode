{"version":3,"file":"extHostExtensionService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/api/node/extHostExtensionService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as performance from 'vs/base/common/performance';\nimport { createApiFactoryAndRegisterActors } from 'vs/workbench/api/common/extHost.api.impl';\nimport { RequireInterceptor } from 'vs/workbench/api/common/extHostRequireInterceptor';\nimport { MainContext } from 'vs/workbench/api/common/extHost.protocol';\nimport { ExtensionActivationTimesBuilder } from 'vs/workbench/api/common/extHostExtensionActivator';\nimport { connectProxyResolver } from 'vs/workbench/services/extensions/node/proxyResolver';\nimport { AbstractExtHostExtensionService } from 'vs/workbench/api/common/extHostExtensionService';\nimport { ExtHostDownloadService } from 'vs/workbench/api/node/extHostDownloadService';\nimport { URI } from 'vs/base/common/uri';\nimport { Schemas } from 'vs/base/common/network';\nimport { ExtensionIdentifier, IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { ExtensionRuntime } from 'vs/workbench/api/common/extHostTypes';\nimport { CLIServer } from 'vs/workbench/api/node/extHostCLIServer';\nimport { realpathSync } from 'vs/base/node/extpath';\n\nclass NodeModuleRequireInterceptor extends RequireInterceptor {\n\n\tprotected _installInterceptor(): void {\n\t\tconst that = this;\n\t\tconst node_module = <any>require.__$__nodeRequire('module');\n\t\tconst original = node_module._load;\n\t\tnode_module._load = function load(request: string, parent: { filename: string; }, isMain: boolean) {\n\t\t\tfor (let alternativeModuleName of that._alternatives) {\n\t\t\t\tlet alternative = alternativeModuleName(request);\n\t\t\t\tif (alternative) {\n\t\t\t\t\trequest = alternative;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!that._factories.has(request)) {\n\t\t\t\treturn original.apply(this, arguments);\n\t\t\t}\n\t\t\treturn that._factories.get(request)!.load(\n\t\t\t\trequest,\n\t\t\t\tURI.file(realpathSync(parent.filename)),\n\t\t\t\trequest => original.apply(this, [request, parent, isMain])\n\t\t\t);\n\t\t};\n\t}\n}\n\nexport class ExtHostExtensionService extends AbstractExtHostExtensionService {\n\n\treadonly extensionRuntime = ExtensionRuntime.Node;\n\n\tprotected async _beforeAlmostReadyToRunExtensions(): Promise<void> {\n\t\t// initialize API and register actors\n\t\tconst extensionApiFactory = this._instaService.invokeFunction(createApiFactoryAndRegisterActors);\n\n\t\t// Register Download command\n\t\tthis._instaService.createInstance(ExtHostDownloadService);\n\n\t\t// Register CLI Server for ipc\n\t\tif (this._initData.remote.isRemote && this._initData.remote.authority) {\n\t\t\tconst cliServer = this._instaService.createInstance(CLIServer);\n\t\t\tprocess.env['VSCODE_IPC_HOOK_CLI'] = cliServer.ipcHandlePath;\n\t\t}\n\n\t\t// Module loading tricks\n\t\tconst interceptor = this._instaService.createInstance(NodeModuleRequireInterceptor, extensionApiFactory, this._registry);\n\t\tawait interceptor.install();\n\t\tperformance.mark('code/extHost/didInitAPI');\n\n\t\t// Do this when extension service exists, but extensions are not being activated yet.\n\t\tconst configProvider = await this._extHostConfiguration.getConfigProvider();\n\t\tawait connectProxyResolver(this._extHostWorkspace, configProvider, this, this._logService, this._mainThreadTelemetryProxy, this._initData);\n\t\tperformance.mark('code/extHost/didInitProxyResolver');\n\n\t\t// Use IPC messages to forward console-calls, note that the console is\n\t\t// already patched to use`process.send()`\n\t\tconst nativeProcessSend = process.send!;\n\t\tconst mainThreadConsole = this._extHostContext.getProxy(MainContext.MainThreadConsole);\n\t\tprocess.send = (...args) => {\n\t\t\tif ((args as unknown[]).length === 0 || !args[0] || args[0].type !== '__$console') {\n\t\t\t\treturn nativeProcessSend.apply(process, args);\n\t\t\t}\n\t\t\tmainThreadConsole.$logExtensionHostMessage(args[0]);\n\t\t\treturn false;\n\t\t};\n\t}\n\n\tprotected _getEntryPoint(extensionDescription: IExtensionDescription): string | undefined {\n\t\treturn extensionDescription.main;\n\t}\n\n\tprotected _loadCommonJSModule<T>(extensionId: ExtensionIdentifier | null, module: URI, activationTimesBuilder: ExtensionActivationTimesBuilder): Promise<T> {\n\t\tif (module.scheme !== Schemas.file) {\n\t\t\tthrow new Error(`Cannot load URI: '${module}', must be of file-scheme`);\n\t\t}\n\t\tlet r: T | null = null;\n\t\tactivationTimesBuilder.codeLoadingStart();\n\t\tthis._logService.info(`ExtensionService#loadCommonJSModule ${module.toString(true)}`);\n\t\tthis._logService.flush();\n\t\ttry {\n\t\t\tif (extensionId) {\n\t\t\t\tperformance.mark(`code/extHost/willLoadExtensionCode/${extensionId.value}`);\n\t\t\t}\n\t\t\tr = require.__$__nodeRequire<T>(module.fsPath);\n\t\t} catch (e) {\n\t\t\treturn Promise.reject(e);\n\t\t} finally {\n\t\t\tif (extensionId) {\n\t\t\t\tperformance.mark(`code/extHost/didLoadExtensionCode/${extensionId.value}`);\n\t\t\t}\n\t\t\tactivationTimesBuilder.codeLoadingStop();\n\t\t}\n\t\treturn Promise.resolve(r);\n\t}\n\n\tpublic async $setRemoteEnvironment(env: { [key: string]: string | null }): Promise<void> {\n\t\tif (!this._initData.remote.isRemote) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const key in env) {\n\t\t\tconst value = env[key];\n\t\t\tif (value === null) {\n\t\t\t\tdelete process.env[key];\n\t\t\t} else {\n\t\t\t\tprocess.env[key] = value;\n\t\t\t}\n\t\t}\n\t}\n}\n"]}