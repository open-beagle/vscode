{"version":3,"file":"extHostTerminalService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/api/node/extHostTerminalService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as platform from 'vs/base/common/platform';\nimport { withNullAsUndefined } from 'vs/base/common/types';\nimport { generateUuid } from 'vs/base/common/uuid';\nimport { getSystemShell, getSystemShellSync } from 'vs/base/node/shell';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { SafeConfigProvider } from 'vs/platform/terminal/common/terminal';\nimport { IWorkspaceFolder } from 'vs/platform/workspace/common/workspace';\nimport { IShellAndArgsDto } from 'vs/workbench/api/common/extHost.protocol';\nimport { ExtHostConfigProvider, ExtHostConfiguration, IExtHostConfiguration } from 'vs/workbench/api/common/extHostConfiguration';\nimport { ExtHostVariableResolverService } from 'vs/workbench/api/common/extHostDebugService';\nimport { ExtHostDocumentsAndEditors, IExtHostDocumentsAndEditors } from 'vs/workbench/api/common/extHostDocumentsAndEditors';\nimport { IExtHostRpcService } from 'vs/workbench/api/common/extHostRpcService';\nimport { BaseExtHostTerminalService, ExtHostTerminal } from 'vs/workbench/api/common/extHostTerminalService';\nimport { ExtHostWorkspace, IExtHostWorkspace } from 'vs/workbench/api/common/extHostWorkspace';\nimport { ITerminalProfile } from 'vs/workbench/contrib/terminal/common/terminal';\nimport * as terminalEnvironment from 'vs/workbench/contrib/terminal/common/terminalEnvironment';\nimport { detectAvailableProfiles } from 'vs/workbench/contrib/terminal/node/terminalProfiles';\nimport type * as vscode from 'vscode';\n\nexport class ExtHostTerminalService extends BaseExtHostTerminalService {\n\n\tprivate _variableResolver: ExtHostVariableResolverService | undefined;\n\tprivate _variableResolverPromise: Promise<ExtHostVariableResolverService>;\n\tprivate _lastActiveWorkspace: IWorkspaceFolder | undefined;\n\n\tprivate _defaultShell: string | undefined;\n\n\tconstructor(\n\t\t@IExtHostRpcService extHostRpc: IExtHostRpcService,\n\t\t@IExtHostConfiguration private _extHostConfiguration: ExtHostConfiguration,\n\t\t@IExtHostWorkspace private _extHostWorkspace: ExtHostWorkspace,\n\t\t@IExtHostDocumentsAndEditors private _extHostDocumentsAndEditors: ExtHostDocumentsAndEditors,\n\t\t@ILogService private _logService: ILogService\n\t) {\n\t\tsuper(true, extHostRpc);\n\n\t\t// Getting the SystemShell is an async operation, however, the ExtHost terminal service is mostly synchronous\n\t\t// and the API `vscode.env.shell` is also synchronous. The default shell _should_ be set when extensions are\n\t\t// starting up but if not, we run getSystemShellSync below which gets a sane default.\n\t\tgetSystemShell(platform.OS, process.env as platform.IProcessEnvironment).then(s => this._defaultShell = s);\n\n\t\tthis._updateLastActiveWorkspace();\n\t\tthis._variableResolverPromise = this._updateVariableResolver();\n\t\tthis._registerListeners();\n\t}\n\n\tpublic createTerminal(name?: string, shellPath?: string, shellArgs?: string[] | string): vscode.Terminal {\n\t\tconst terminal = new ExtHostTerminal(this._proxy, generateUuid(), { name, shellPath, shellArgs }, name);\n\t\tthis._terminals.push(terminal);\n\t\tterminal.create(shellPath, shellArgs);\n\t\treturn terminal.value;\n\t}\n\n\tpublic createTerminalFromOptions(options: vscode.TerminalOptions, isFeatureTerminal?: boolean): vscode.Terminal {\n\t\tconst terminal = new ExtHostTerminal(this._proxy, generateUuid(), options, options.name);\n\t\tthis._terminals.push(terminal);\n\t\tterminal.create(\n\t\t\twithNullAsUndefined(options.shellPath),\n\t\t\twithNullAsUndefined(options.shellArgs),\n\t\t\twithNullAsUndefined(options.cwd),\n\t\t\twithNullAsUndefined(options.env),\n\t\t\twithNullAsUndefined(options.icon),\n\t\t\twithNullAsUndefined(options.message),\n\t\t\t/*options.waitOnExit*/ undefined,\n\t\t\twithNullAsUndefined(options.strictEnv),\n\t\t\twithNullAsUndefined(options.hideFromUser),\n\t\t\twithNullAsUndefined(isFeatureTerminal),\n\t\t\ttrue\n\t\t);\n\t\treturn terminal.value;\n\t}\n\n\tpublic getDefaultShell(useAutomationShell: boolean, configProvider: ExtHostConfigProvider): string {\n\t\treturn terminalEnvironment.getDefaultShell(\n\t\t\tthis._buildSafeConfigProvider(configProvider),\n\t\t\tthis._defaultShell ?? getSystemShellSync(platform.OS, process.env as platform.IProcessEnvironment),\n\t\t\tprocess.env.hasOwnProperty('PROCESSOR_ARCHITEW6432'),\n\t\t\tprocess.env.windir,\n\t\t\tterminalEnvironment.createVariableResolver(this._lastActiveWorkspace, process.env, this._variableResolver),\n\t\t\tthis._logService,\n\t\t\tuseAutomationShell\n\t\t);\n\t}\n\n\tpublic getDefaultShellArgs(useAutomationShell: boolean, configProvider: ExtHostConfigProvider): string[] | string {\n\t\treturn terminalEnvironment.getDefaultShellArgs(\n\t\t\tthis._buildSafeConfigProvider(configProvider),\n\t\t\tuseAutomationShell,\n\t\t\tterminalEnvironment.createVariableResolver(this._lastActiveWorkspace, process.env, this._variableResolver),\n\t\t\tthis._logService\n\t\t);\n\t}\n\n\tprivate _registerListeners(): void {\n\t\tthis._extHostDocumentsAndEditors.onDidChangeActiveTextEditor(() => this._updateLastActiveWorkspace());\n\t\tthis._extHostWorkspace.onDidChangeWorkspace(() => {\n\t\t\tthis._variableResolverPromise = this._updateVariableResolver();\n\t\t});\n\t}\n\n\tprivate _updateLastActiveWorkspace(): void {\n\t\tconst activeEditor = this._extHostDocumentsAndEditors.activeEditor();\n\t\tif (activeEditor) {\n\t\t\tthis._lastActiveWorkspace = this._extHostWorkspace.getWorkspaceFolder(activeEditor.document.uri) as IWorkspaceFolder;\n\t\t}\n\t}\n\n\tprivate async _updateVariableResolver(): Promise<ExtHostVariableResolverService> {\n\t\tconst configProvider = await this._extHostConfiguration.getConfigProvider();\n\t\tconst workspaceFolders = await this._extHostWorkspace.getWorkspaceFolders2();\n\t\tthis._variableResolver = new ExtHostVariableResolverService(workspaceFolders || [], this._extHostDocumentsAndEditors, configProvider);\n\t\treturn this._variableResolver;\n\t}\n\n\tpublic async $getAvailableProfiles(configuredProfilesOnly: boolean): Promise<ITerminalProfile[]> {\n\t\tconst safeConfigProvider = this._buildSafeConfigProvider(await this._extHostConfiguration.getConfigProvider());\n\t\treturn detectAvailableProfiles(configuredProfilesOnly, safeConfigProvider, undefined, this._logService, await this._variableResolverPromise, this._lastActiveWorkspace);\n\t}\n\n\tpublic async $getDefaultShellAndArgs(useAutomationShell: boolean): Promise<IShellAndArgsDto> {\n\t\tconst configProvider = await this._extHostConfiguration.getConfigProvider();\n\t\treturn {\n\t\t\tshell: this.getDefaultShell(useAutomationShell, configProvider),\n\t\t\targs: this.getDefaultShellArgs(useAutomationShell, configProvider)\n\t\t};\n\t}\n\n\t// TODO: Remove when workspace trust is enabled\n\tprivate _buildSafeConfigProvider(configProvider: ExtHostConfigProvider): SafeConfigProvider {\n\t\tconst config = configProvider.getConfiguration();\n\t\treturn (key: string) => {\n\t\t\tconst isWorkspaceConfigAllowed = config.get('terminal.integrated.allowWorkspaceConfiguration');\n\t\t\tif (isWorkspaceConfigAllowed) {\n\t\t\t\treturn config.get(key) as any;\n\t\t\t}\n\t\t\tconst inspected = config.inspect(key);\n\t\t\treturn inspected?.globalValue || inspected?.defaultValue;\n\t\t};\n\t}\n}\n"]}