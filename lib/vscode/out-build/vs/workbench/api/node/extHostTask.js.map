{"version":3,"file":"extHostTask.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/workbench/api/node/extHostTask.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as path from 'vs/base/common/path';\n\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { win32 } from 'vs/base/node/processes';\nimport * as types from 'vs/workbench/api/common/extHostTypes';\nimport { IExtHostWorkspace } from 'vs/workbench/api/common/extHostWorkspace';\nimport type * as vscode from 'vscode';\nimport * as tasks from '../common/shared/tasks';\nimport { ExtHostVariableResolverService } from 'vs/workbench/api/common/extHostDebugService';\nimport { IExtHostDocumentsAndEditors } from 'vs/workbench/api/common/extHostDocumentsAndEditors';\nimport { IExtHostConfiguration } from 'vs/workbench/api/common/extHostConfiguration';\nimport { IWorkspaceFolder } from 'vs/platform/workspace/common/workspace';\nimport { IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { IExtHostTerminalService } from 'vs/workbench/api/common/extHostTerminalService';\nimport { IExtHostRpcService } from 'vs/workbench/api/common/extHostRpcService';\nimport { IExtHostInitDataService } from 'vs/workbench/api/common/extHostInitDataService';\nimport { ExtHostTaskBase, TaskHandleDTO, TaskDTO, CustomExecutionDTO, HandlerData } from 'vs/workbench/api/common/extHostTask';\nimport { Schemas } from 'vs/base/common/network';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IExtHostApiDeprecationService } from 'vs/workbench/api/common/extHostApiDeprecationService';\n\nexport class ExtHostTask extends ExtHostTaskBase {\n\tprivate _variableResolver: ExtHostVariableResolverService | undefined;\n\n\tconstructor(\n\t\t@IExtHostRpcService extHostRpc: IExtHostRpcService,\n\t\t@IExtHostInitDataService initData: IExtHostInitDataService,\n\t\t@IExtHostWorkspace private readonly workspaceService: IExtHostWorkspace,\n\t\t@IExtHostDocumentsAndEditors editorService: IExtHostDocumentsAndEditors,\n\t\t@IExtHostConfiguration configurationService: IExtHostConfiguration,\n\t\t@IExtHostTerminalService extHostTerminalService: IExtHostTerminalService,\n\t\t@ILogService logService: ILogService,\n\t\t@IExtHostApiDeprecationService deprecationService: IExtHostApiDeprecationService\n\t) {\n\t\tsuper(extHostRpc, initData, workspaceService, editorService, configurationService, extHostTerminalService, logService, deprecationService);\n\t\tif (initData.remote.isRemote && initData.remote.authority) {\n\t\t\tthis.registerTaskSystem(Schemas.vscodeRemote, {\n\t\t\t\tscheme: Schemas.vscodeRemote,\n\t\t\t\tauthority: initData.remote.authority,\n\t\t\t\tplatform: process.platform\n\t\t\t});\n\t\t} else {\n\t\t\tthis.registerTaskSystem(Schemas.file, {\n\t\t\t\tscheme: Schemas.file,\n\t\t\t\tauthority: '',\n\t\t\t\tplatform: process.platform\n\t\t\t});\n\t\t}\n\t\tthis._proxy.$registerSupportedExecutions(true, true, true);\n\t}\n\n\tpublic async executeTask(extension: IExtensionDescription, task: vscode.Task): Promise<vscode.TaskExecution> {\n\t\tconst tTask = (task as types.Task);\n\n\t\tif (!task.execution && (tTask._id === undefined)) {\n\t\t\tthrow new Error('Tasks to execute must include an execution');\n\t\t}\n\n\t\t// We have a preserved ID. So the task didn't change.\n\t\tif (tTask._id !== undefined) {\n\t\t\t// Always get the task execution first to prevent timing issues when retrieving it later\n\t\t\tconst handleDto = TaskHandleDTO.from(tTask, this.workspaceService);\n\t\t\tconst executionDTO = await this._proxy.$getTaskExecution(handleDto);\n\t\t\tif (executionDTO.task === undefined) {\n\t\t\t\tthrow new Error('Task from execution DTO is undefined');\n\t\t\t}\n\t\t\tconst execution = await this.getTaskExecution(executionDTO, task);\n\t\t\tthis._proxy.$executeTask(handleDto).catch(() => { /* The error here isn't actionable. */ });\n\t\t\treturn execution;\n\t\t} else {\n\t\t\tconst dto = TaskDTO.from(task, extension);\n\t\t\tif (dto === undefined) {\n\t\t\t\treturn Promise.reject(new Error('Task is not valid'));\n\t\t\t}\n\n\t\t\t// If this task is a custom execution, then we need to save it away\n\t\t\t// in the provided custom execution map that is cleaned up after the\n\t\t\t// task is executed.\n\t\t\tif (CustomExecutionDTO.is(dto.execution)) {\n\t\t\t\tawait this.addCustomExecution(dto, task, false);\n\t\t\t}\n\t\t\t// Always get the task execution first to prevent timing issues when retrieving it later\n\t\t\tconst execution = await this.getTaskExecution(await this._proxy.$getTaskExecution(dto), task);\n\t\t\tthis._proxy.$executeTask(dto).catch(() => { /* The error here isn't actionable. */ });\n\t\t\treturn execution;\n\t\t}\n\t}\n\n\tprotected provideTasksInternal(validTypes: { [key: string]: boolean; }, taskIdPromises: Promise<void>[], handler: HandlerData, value: vscode.Task[] | null | undefined): { tasks: tasks.TaskDTO[], extension: IExtensionDescription } {\n\t\tconst taskDTOs: tasks.TaskDTO[] = [];\n\t\tif (value) {\n\t\t\tfor (let task of value) {\n\t\t\t\tthis.checkDeprecation(task, handler);\n\n\t\t\t\tif (!task.definition || !validTypes[task.definition.type]) {\n\t\t\t\t\tthis._logService.warn(`The task [${task.source}, ${task.name}] uses an undefined task type. The task will be ignored in the future.`);\n\t\t\t\t}\n\n\t\t\t\tconst taskDTO: tasks.TaskDTO | undefined = TaskDTO.from(task, handler.extension);\n\t\t\t\tif (taskDTO) {\n\t\t\t\t\ttaskDTOs.push(taskDTO);\n\n\t\t\t\t\tif (CustomExecutionDTO.is(taskDTO.execution)) {\n\t\t\t\t\t\t// The ID is calculated on the main thread task side, so, let's call into it here.\n\t\t\t\t\t\t// We need the task id's pre-computed for custom task executions because when OnDidStartTask\n\t\t\t\t\t\t// is invoked, we have to be able to map it back to our data.\n\t\t\t\t\t\ttaskIdPromises.push(this.addCustomExecution(taskDTO, task, true));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\ttasks: taskDTOs,\n\t\t\textension: handler.extension\n\t\t};\n\t}\n\n\tprotected async resolveTaskInternal(resolvedTaskDTO: tasks.TaskDTO): Promise<tasks.TaskDTO | undefined> {\n\t\treturn resolvedTaskDTO;\n\t}\n\n\tprivate async getVariableResolver(workspaceFolders: vscode.WorkspaceFolder[]): Promise<ExtHostVariableResolverService> {\n\t\tif (this._variableResolver === undefined) {\n\t\t\tconst configProvider = await this._configurationService.getConfigProvider();\n\t\t\tthis._variableResolver = new ExtHostVariableResolverService(workspaceFolders, this._editorService, configProvider, this.workspaceService);\n\t\t}\n\t\treturn this._variableResolver;\n\t}\n\n\tpublic async $resolveVariables(uriComponents: UriComponents, toResolve: { process?: { name: string; cwd?: string; path?: string }, variables: string[] }): Promise<{ process?: string, variables: { [key: string]: string; } }> {\n\t\tconst uri: URI = URI.revive(uriComponents);\n\t\tconst result = {\n\t\t\tprocess: <unknown>undefined as string,\n\t\t\tvariables: Object.create(null)\n\t\t};\n\t\tconst workspaceFolder = await this._workspaceProvider.resolveWorkspaceFolder(uri);\n\t\tconst workspaceFolders = await this._workspaceProvider.getWorkspaceFolders2();\n\t\tif (!workspaceFolders || !workspaceFolder) {\n\t\t\tthrow new Error('Unexpected: Tasks can only be run in a workspace folder');\n\t\t}\n\t\tconst resolver = await this.getVariableResolver(workspaceFolders);\n\t\tconst ws: IWorkspaceFolder = {\n\t\t\turi: workspaceFolder.uri,\n\t\t\tname: workspaceFolder.name,\n\t\t\tindex: workspaceFolder.index,\n\t\t\ttoResource: () => {\n\t\t\t\tthrow new Error('Not implemented');\n\t\t\t}\n\t\t};\n\t\tfor (let variable of toResolve.variables) {\n\t\t\tresult.variables[variable] = await resolver.resolveAsync(ws, variable);\n\t\t}\n\t\tif (toResolve.process !== undefined) {\n\t\t\tlet paths: string[] | undefined = undefined;\n\t\t\tif (toResolve.process.path !== undefined) {\n\t\t\t\tpaths = toResolve.process.path.split(path.delimiter);\n\t\t\t\tfor (let i = 0; i < paths.length; i++) {\n\t\t\t\t\tpaths[i] = await resolver.resolveAsync(ws, paths[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tresult.process = await win32.findExecutable(\n\t\t\t\tawait resolver.resolveAsync(ws, toResolve.process.name),\n\t\t\t\ttoResolve.process.cwd !== undefined ? await resolver.resolveAsync(ws, toResolve.process.cwd) : undefined,\n\t\t\t\tpaths\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic $getDefaultShellAndArgs(): Promise<{ shell: string, args: string[] | string | undefined }> {\n\t\treturn this._terminalService.$getDefaultShellAndArgs(true);\n\t}\n\n\tpublic async $jsonTasksSupported(): Promise<boolean> {\n\t\treturn true;\n\t}\n\n\tpublic async $findExecutable(command: string, cwd?: string, paths?: string[]): Promise<string> {\n\t\treturn win32.findExecutable(command, cwd, paths);\n\t}\n}\n"]}