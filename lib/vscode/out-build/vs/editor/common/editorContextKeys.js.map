{"version":3,"sources":["vs/editor/common/editorContextKeys.ts"],"names":[],"mappings":"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","file":"editorContextKeys.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { RawContextKey } from 'vs/platform/contextkey/common/contextkey';\n\nexport namespace EditorContextKeys {\n\n\texport const editorSimpleInput = new RawContextKey<boolean>('editorSimpleInput', false, true);\n\t/**\n\t * A context key that is set when the editor's text has focus (cursor is blinking).\n\t * Is false when focus is in simple editor widgets (repl input, scm commit input).\n\t */\n\texport const editorTextFocus = new RawContextKey<boolean>('editorTextFocus', false, nls.localize('editorTextFocus', \"Whether the editor text has focus (cursor is blinking)\"));\n\t/**\n\t * A context key that is set when the editor's text or an editor's widget has focus.\n\t */\n\texport const focus = new RawContextKey<boolean>('editorFocus', false, nls.localize('editorFocus', \"Whether the editor or an editor widget has focus (e.g. focus is in the find widget)\"));\n\n\t/**\n\t * A context key that is set when any editor input has focus (regular editor, repl input...).\n\t */\n\texport const textInputFocus = new RawContextKey<boolean>('textInputFocus', false, nls.localize('textInputFocus', \"Whether an editor or a rich text input has focus (cursor is blinking)\"));\n\n\texport const readOnly = new RawContextKey<boolean>('editorReadonly', false, nls.localize('editorReadonly', \"Whether the editor is read only\"));\n\texport const inDiffEditor = new RawContextKey<boolean>('inDiffEditor', false, nls.localize('inDiffEditor', \"Whether the context is a diff editor\"));\n\texport const columnSelection = new RawContextKey<boolean>('editorColumnSelection', false, nls.localize('editorColumnSelection', \"Whether `editor.columnSelection` is enabled\"));\n\texport const writable = readOnly.toNegated();\n\texport const hasNonEmptySelection = new RawContextKey<boolean>('editorHasSelection', false, nls.localize('editorHasSelection', \"Whether the editor has text selected\"));\n\texport const hasOnlyEmptySelection = hasNonEmptySelection.toNegated();\n\texport const hasMultipleSelections = new RawContextKey<boolean>('editorHasMultipleSelections', false, nls.localize('editorHasMultipleSelections', \"Whether the editor has multiple selections\"));\n\texport const hasSingleSelection = hasMultipleSelections.toNegated();\n\texport const tabMovesFocus = new RawContextKey<boolean>('editorTabMovesFocus', false, nls.localize('editorTabMovesFocus', \"Whether `Tab` will move focus out of the editor\"));\n\texport const tabDoesNotMoveFocus = tabMovesFocus.toNegated();\n\texport const isInWalkThroughSnippet = new RawContextKey<boolean>('isInEmbeddedEditor', false, true);\n\texport const canUndo = new RawContextKey<boolean>('canUndo', false, true);\n\texport const canRedo = new RawContextKey<boolean>('canRedo', false, true);\n\n\texport const hoverVisible = new RawContextKey<boolean>('editorHoverVisible', false, nls.localize('editorHoverVisible', \"Whether the editor hover is visible\"));\n\n\t/**\n\t * A context key that is set when an editor is part of a larger editor, like notebooks or\n\t * (future) a diff editor\n\t */\n\texport const inCompositeEditor = new RawContextKey<boolean>('inCompositeEditor', undefined, nls.localize('inCompositeEditor', \"Whether the editor is part of a larger editor (e.g. notebooks)\"));\n\texport const notInCompositeEditor = inCompositeEditor.toNegated();\n\n\t// -- mode context keys\n\texport const languageId = new RawContextKey<string>('editorLangId', '', nls.localize('editorLangId', \"The language identifier of the editor\"));\n\texport const hasCompletionItemProvider = new RawContextKey<boolean>('editorHasCompletionItemProvider', false, nls.localize('editorHasCompletionItemProvider', \"Whether the editor has a completion item provider\"));\n\texport const hasCodeActionsProvider = new RawContextKey<boolean>('editorHasCodeActionsProvider', false, nls.localize('editorHasCodeActionsProvider', \"Whether the editor has a code actions provider\"));\n\texport const hasCodeLensProvider = new RawContextKey<boolean>('editorHasCodeLensProvider', false, nls.localize('editorHasCodeLensProvider', \"Whether the editor has a code lens provider\"));\n\texport const hasDefinitionProvider = new RawContextKey<boolean>('editorHasDefinitionProvider', false, nls.localize('editorHasDefinitionProvider', \"Whether the editor has a definition provider\"));\n\texport const hasDeclarationProvider = new RawContextKey<boolean>('editorHasDeclarationProvider', false, nls.localize('editorHasDeclarationProvider', \"Whether the editor has a declaration provider\"));\n\texport const hasImplementationProvider = new RawContextKey<boolean>('editorHasImplementationProvider', false, nls.localize('editorHasImplementationProvider', \"Whether the editor has an implementation provider\"));\n\texport const hasTypeDefinitionProvider = new RawContextKey<boolean>('editorHasTypeDefinitionProvider', false, nls.localize('editorHasTypeDefinitionProvider', \"Whether the editor has a type definition provider\"));\n\texport const hasHoverProvider = new RawContextKey<boolean>('editorHasHoverProvider', false, nls.localize('editorHasHoverProvider', \"Whether the editor has a hover provider\"));\n\texport const hasDocumentHighlightProvider = new RawContextKey<boolean>('editorHasDocumentHighlightProvider', false, nls.localize('editorHasDocumentHighlightProvider', \"Whether the editor has a document highlight provider\"));\n\texport const hasDocumentSymbolProvider = new RawContextKey<boolean>('editorHasDocumentSymbolProvider', false, nls.localize('editorHasDocumentSymbolProvider', \"Whether the editor has a document symbol provider\"));\n\texport const hasReferenceProvider = new RawContextKey<boolean>('editorHasReferenceProvider', false, nls.localize('editorHasReferenceProvider', \"Whether the editor has a reference provider\"));\n\texport const hasRenameProvider = new RawContextKey<boolean>('editorHasRenameProvider', false, nls.localize('editorHasRenameProvider', \"Whether the editor has a rename provider\"));\n\texport const hasSignatureHelpProvider = new RawContextKey<boolean>('editorHasSignatureHelpProvider', false, nls.localize('editorHasSignatureHelpProvider', \"Whether the editor has a signature help provider\"));\n\texport const hasInlineHintsProvider = new RawContextKey<boolean>('editorHasInlineHintsProvider', false, nls.localize('editorHasInlineHintsProvider', \"Whether the editor has an inline hints provider\"));\n\n\t// -- mode context keys: formatting\n\texport const hasDocumentFormattingProvider = new RawContextKey<boolean>('editorHasDocumentFormattingProvider', false, nls.localize('editorHasDocumentFormattingProvider', \"Whether the editor has a document formatting provider\"));\n\texport const hasDocumentSelectionFormattingProvider = new RawContextKey<boolean>('editorHasDocumentSelectionFormattingProvider', false, nls.localize('editorHasDocumentSelectionFormattingProvider', \"Whether the editor has a document selection formatting provider\"));\n\texport const hasMultipleDocumentFormattingProvider = new RawContextKey<boolean>('editorHasMultipleDocumentFormattingProvider', false, nls.localize('editorHasMultipleDocumentFormattingProvider', \"Whether the editor has multiple document formatting providers\"));\n\texport const hasMultipleDocumentSelectionFormattingProvider = new RawContextKey<boolean>('editorHasMultipleDocumentSelectionFormattingProvider', false, nls.localize('editorHasMultipleDocumentSelectionFormattingProvider', \"Whether the editor has multiple document selection formatting providers\"));\n\n}\n"]}