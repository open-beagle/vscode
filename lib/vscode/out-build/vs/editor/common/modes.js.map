{"version":3,"file":"modes.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/common/modes.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { Color } from 'vs/base/common/color';\nimport { Event } from 'vs/base/common/event';\nimport { IMarkdownString } from 'vs/base/common/htmlContent';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { Position } from 'vs/editor/common/core/position';\nimport { IRange, Range } from 'vs/editor/common/core/range';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { TokenizationResult, TokenizationResult2 } from 'vs/editor/common/core/token';\nimport * as model from 'vs/editor/common/model';\nimport { LanguageFeatureRegistry } from 'vs/editor/common/modes/languageFeatureRegistry';\nimport { TokenizationRegistryImpl } from 'vs/editor/common/modes/tokenizationRegistry';\nimport { ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\nimport { IMarkerData } from 'vs/platform/markers/common/markers';\nimport { iconRegistry, Codicon } from 'vs/base/common/codicons';\nimport { ThemeIcon } from 'vs/platform/theme/common/themeService';\n/**\n * Open ended enum at runtime\n * @internal\n */\nexport const enum LanguageId {\n\tNull = 0,\n\tPlainText = 1\n}\n\n/**\n * @internal\n */\nexport class LanguageIdentifier {\n\n\t/**\n\t * A string identifier. Unique across languages. e.g. 'javascript'.\n\t */\n\tpublic readonly language: string;\n\n\t/**\n\t * A numeric identifier. Unique across languages. e.g. 5\n\t * Will vary at runtime based on registration order, etc.\n\t */\n\tpublic readonly id: LanguageId;\n\n\tconstructor(language: string, id: LanguageId) {\n\t\tthis.language = language;\n\t\tthis.id = id;\n\t}\n}\n\n/**\n * A mode. Will soon be obsolete.\n * @internal\n */\nexport interface IMode {\n\n\tgetId(): string;\n\n\tgetLanguageIdentifier(): LanguageIdentifier;\n\n}\n\n/**\n * A font style. Values are 2^x such that a bit mask can be used.\n * @internal\n */\nexport const enum FontStyle {\n\tNotSet = -1,\n\tNone = 0,\n\tItalic = 1,\n\tBold = 2,\n\tUnderline = 4\n}\n\n/**\n * Open ended enum at runtime\n * @internal\n */\nexport const enum ColorId {\n\tNone = 0,\n\tDefaultForeground = 1,\n\tDefaultBackground = 2\n}\n\n/**\n * A standard token type. Values are 2^x such that a bit mask can be used.\n * @internal\n */\nexport const enum StandardTokenType {\n\tOther = 0,\n\tComment = 1,\n\tString = 2,\n\tRegEx = 4\n}\n\n/**\n * Helpers to manage the \"collapsed\" metadata of an entire StackElement stack.\n * The following assumptions have been made:\n *  - languageId < 256 => needs 8 bits\n *  - unique color count < 512 => needs 9 bits\n *\n * The binary format is:\n * - -------------------------------------------\n *     3322 2222 2222 1111 1111 1100 0000 0000\n *     1098 7654 3210 9876 5432 1098 7654 3210\n * - -------------------------------------------\n *     xxxx xxxx xxxx xxxx xxxx xxxx xxxx xxxx\n *     bbbb bbbb bfff ffff ffFF FTTT LLLL LLLL\n * - -------------------------------------------\n *  - L = LanguageId (8 bits)\n *  - T = StandardTokenType (3 bits)\n *  - F = FontStyle (3 bits)\n *  - f = foreground color (9 bits)\n *  - b = background color (9 bits)\n *\n * @internal\n */\nexport const enum MetadataConsts {\n\tLANGUAGEID_MASK = 0b00000000000000000000000011111111,\n\tTOKEN_TYPE_MASK = 0b00000000000000000000011100000000,\n\tFONT_STYLE_MASK = 0b00000000000000000011100000000000,\n\tFOREGROUND_MASK = 0b00000000011111111100000000000000,\n\tBACKGROUND_MASK = 0b11111111100000000000000000000000,\n\n\tITALIC_MASK = 0b00000000000000000000100000000000,\n\tBOLD_MASK = 0b00000000000000000001000000000000,\n\tUNDERLINE_MASK = 0b00000000000000000010000000000000,\n\n\tSEMANTIC_USE_ITALIC = 0b00000000000000000000000000000001,\n\tSEMANTIC_USE_BOLD = 0b00000000000000000000000000000010,\n\tSEMANTIC_USE_UNDERLINE = 0b00000000000000000000000000000100,\n\tSEMANTIC_USE_FOREGROUND = 0b00000000000000000000000000001000,\n\tSEMANTIC_USE_BACKGROUND = 0b00000000000000000000000000010000,\n\n\tLANGUAGEID_OFFSET = 0,\n\tTOKEN_TYPE_OFFSET = 8,\n\tFONT_STYLE_OFFSET = 11,\n\tFOREGROUND_OFFSET = 14,\n\tBACKGROUND_OFFSET = 23\n}\n\n/**\n * @internal\n */\nexport class TokenMetadata {\n\n\tpublic static getLanguageId(metadata: number): LanguageId {\n\t\treturn (metadata & MetadataConsts.LANGUAGEID_MASK) >>> MetadataConsts.LANGUAGEID_OFFSET;\n\t}\n\n\tpublic static getTokenType(metadata: number): StandardTokenType {\n\t\treturn (metadata & MetadataConsts.TOKEN_TYPE_MASK) >>> MetadataConsts.TOKEN_TYPE_OFFSET;\n\t}\n\n\tpublic static getFontStyle(metadata: number): FontStyle {\n\t\treturn (metadata & MetadataConsts.FONT_STYLE_MASK) >>> MetadataConsts.FONT_STYLE_OFFSET;\n\t}\n\n\tpublic static getForeground(metadata: number): ColorId {\n\t\treturn (metadata & MetadataConsts.FOREGROUND_MASK) >>> MetadataConsts.FOREGROUND_OFFSET;\n\t}\n\n\tpublic static getBackground(metadata: number): ColorId {\n\t\treturn (metadata & MetadataConsts.BACKGROUND_MASK) >>> MetadataConsts.BACKGROUND_OFFSET;\n\t}\n\n\tpublic static getClassNameFromMetadata(metadata: number): string {\n\t\tlet foreground = this.getForeground(metadata);\n\t\tlet className = 'mtk' + foreground;\n\n\t\tlet fontStyle = this.getFontStyle(metadata);\n\t\tif (fontStyle & FontStyle.Italic) {\n\t\t\tclassName += ' mtki';\n\t\t}\n\t\tif (fontStyle & FontStyle.Bold) {\n\t\t\tclassName += ' mtkb';\n\t\t}\n\t\tif (fontStyle & FontStyle.Underline) {\n\t\t\tclassName += ' mtku';\n\t\t}\n\n\t\treturn className;\n\t}\n\n\tpublic static getInlineStyleFromMetadata(metadata: number, colorMap: string[]): string {\n\t\tconst foreground = this.getForeground(metadata);\n\t\tconst fontStyle = this.getFontStyle(metadata);\n\n\t\tlet result = `color: ${colorMap[foreground]};`;\n\t\tif (fontStyle & FontStyle.Italic) {\n\t\t\tresult += 'font-style: italic;';\n\t\t}\n\t\tif (fontStyle & FontStyle.Bold) {\n\t\t\tresult += 'font-weight: bold;';\n\t\t}\n\t\tif (fontStyle & FontStyle.Underline) {\n\t\t\tresult += 'text-decoration: underline;';\n\t\t}\n\t\treturn result;\n\t}\n}\n\n/**\n * @internal\n */\nexport interface ITokenizationSupport {\n\n\tgetInitialState(): IState;\n\n\t// add offsetDelta to each of the returned indices\n\ttokenize(line: string, hasEOL: boolean, state: IState, offsetDelta: number): TokenizationResult;\n\n\ttokenize2(line: string, hasEOL: boolean, state: IState, offsetDelta: number): TokenizationResult2;\n}\n\n/**\n * The state of the tokenizer between two lines.\n * It is useful to store flags such as in multiline comment, etc.\n * The model will clone the previous line's state and pass it in to tokenize the next line.\n */\nexport interface IState {\n\tclone(): IState;\n\tequals(other: IState): boolean;\n}\n\n/**\n * A provider result represents the values a provider, like the [`HoverProvider`](#HoverProvider),\n * may return. For once this is the actual result type `T`, like `Hover`, or a thenable that resolves\n * to that type `T`. In addition, `null` and `undefined` can be returned - either directly or from a\n * thenable.\n */\nexport type ProviderResult<T> = T | undefined | null | Thenable<T | undefined | null>;\n\n/**\n * A hover represents additional information for a symbol or word. Hovers are\n * rendered in a tooltip-like widget.\n */\nexport interface Hover {\n\t/**\n\t * The contents of this hover.\n\t */\n\tcontents: IMarkdownString[];\n\n\t/**\n\t * The range to which this hover applies. When missing, the\n\t * editor will use the range at the current position or the\n\t * current position itself.\n\t */\n\trange?: IRange;\n}\n\n/**\n * The hover provider interface defines the contract between extensions and\n * the [hover](https://code.visualstudio.com/docs/editor/intellisense)-feature.\n */\nexport interface HoverProvider {\n\t/**\n\t * Provide a hover for the given position and document. Multiple hovers at the same\n\t * position will be merged by the editor. A hover can have a range which defaults\n\t * to the word range at the position when omitted.\n\t */\n\tprovideHover(model: model.ITextModel, position: Position, token: CancellationToken): ProviderResult<Hover>;\n}\n\n/**\n * An evaluatable expression represents additional information for an expression in a document. Evaluatable expressions are\n * evaluated by a debugger or runtime and their result is rendered in a tooltip-like widget.\n * @internal\n */\nexport interface EvaluatableExpression {\n\t/**\n\t * The range to which this expression applies.\n\t */\n\trange: IRange;\n\t/**\n\t * This expression overrides the expression extracted from the range.\n\t */\n\texpression?: string;\n}\n\n\n/**\n * The evaluatable expression provider interface defines the contract between extensions and\n * the debug hover.\n * @internal\n */\nexport interface EvaluatableExpressionProvider {\n\t/**\n\t * Provide a hover for the given position and document. Multiple hovers at the same\n\t * position will be merged by the editor. A hover can have a range which defaults\n\t * to the word range at the position when omitted.\n\t */\n\tprovideEvaluatableExpression(model: model.ITextModel, position: Position, token: CancellationToken): ProviderResult<EvaluatableExpression>;\n}\n\n/**\n\t * A value-object that contains contextual information when requesting inline values from a InlineValuesProvider.\n * @internal\n */\nexport interface InlineValueContext {\n\tframeId: number;\n\tstoppedLocation: Range;\n}\n\n/**\n * Provide inline value as text.\n * @internal\n */\nexport interface InlineValueText {\n\ttype: 'text';\n\trange: IRange;\n\ttext: string;\n}\n\n/**\n * Provide inline value through a variable lookup.\n * @internal\n */\nexport interface InlineValueVariableLookup {\n\ttype: 'variable';\n\trange: IRange;\n\tvariableName?: string;\n\tcaseSensitiveLookup: boolean;\n}\n\n/**\n * Provide inline value through an expression evaluation.\n * @internal\n */\nexport interface InlineValueExpression {\n\ttype: 'expression';\n\trange: IRange;\n\texpression?: string;\n}\n\n/**\n * Inline value information can be provided by different means:\n * - directly as a text value (class InlineValueText).\n * - as a name to use for a variable lookup (class InlineValueVariableLookup)\n * - as an evaluatable expression (class InlineValueEvaluatableExpression)\n * The InlineValue types combines all inline value types into one type.\n * @internal\n */\nexport type InlineValue = InlineValueText | InlineValueVariableLookup | InlineValueExpression;\n\n/**\n * The inline values provider interface defines the contract between extensions and\n * the debugger's inline values feature.\n * @internal\n */\nexport interface InlineValuesProvider {\n\t/**\n\t */\n\tonDidChangeInlineValues?: Event<void> | undefined;\n\t/**\n\t * Provide the \"inline values\" for the given range and document. Multiple hovers at the same\n\t * position will be merged by the editor. A hover can have a range which defaults\n\t * to the word range at the position when omitted.\n\t */\n\tprovideInlineValues(model: model.ITextModel, viewPort: Range, context: InlineValueContext, token: CancellationToken): ProviderResult<InlineValue[]>;\n}\n\nexport const enum CompletionItemKind {\n\tMethod,\n\tFunction,\n\tConstructor,\n\tField,\n\tVariable,\n\tClass,\n\tStruct,\n\tInterface,\n\tModule,\n\tProperty,\n\tEvent,\n\tOperator,\n\tUnit,\n\tValue,\n\tConstant,\n\tEnum,\n\tEnumMember,\n\tKeyword,\n\tText,\n\tColor,\n\tFile,\n\tReference,\n\tCustomcolor,\n\tFolder,\n\tTypeParameter,\n\tUser,\n\tIssue,\n\tSnippet, // <- highest value (used for compare!)\n}\n\n/**\n * @internal\n */\nexport const completionKindToCssClass = (function () {\n\tlet data = Object.create(null);\n\tdata[CompletionItemKind.Method] = 'symbol-method';\n\tdata[CompletionItemKind.Function] = 'symbol-function';\n\tdata[CompletionItemKind.Constructor] = 'symbol-constructor';\n\tdata[CompletionItemKind.Field] = 'symbol-field';\n\tdata[CompletionItemKind.Variable] = 'symbol-variable';\n\tdata[CompletionItemKind.Class] = 'symbol-class';\n\tdata[CompletionItemKind.Struct] = 'symbol-struct';\n\tdata[CompletionItemKind.Interface] = 'symbol-interface';\n\tdata[CompletionItemKind.Module] = 'symbol-module';\n\tdata[CompletionItemKind.Property] = 'symbol-property';\n\tdata[CompletionItemKind.Event] = 'symbol-event';\n\tdata[CompletionItemKind.Operator] = 'symbol-operator';\n\tdata[CompletionItemKind.Unit] = 'symbol-unit';\n\tdata[CompletionItemKind.Value] = 'symbol-value';\n\tdata[CompletionItemKind.Constant] = 'symbol-constant';\n\tdata[CompletionItemKind.Enum] = 'symbol-enum';\n\tdata[CompletionItemKind.EnumMember] = 'symbol-enum-member';\n\tdata[CompletionItemKind.Keyword] = 'symbol-keyword';\n\tdata[CompletionItemKind.Snippet] = 'symbol-snippet';\n\tdata[CompletionItemKind.Text] = 'symbol-text';\n\tdata[CompletionItemKind.Color] = 'symbol-color';\n\tdata[CompletionItemKind.File] = 'symbol-file';\n\tdata[CompletionItemKind.Reference] = 'symbol-reference';\n\tdata[CompletionItemKind.Customcolor] = 'symbol-customcolor';\n\tdata[CompletionItemKind.Folder] = 'symbol-folder';\n\tdata[CompletionItemKind.TypeParameter] = 'symbol-type-parameter';\n\tdata[CompletionItemKind.User] = 'account';\n\tdata[CompletionItemKind.Issue] = 'issues';\n\n\treturn function (kind: CompletionItemKind): string {\n\t\tconst name = data[kind];\n\t\tlet codicon = name && iconRegistry.get(name);\n\t\tif (!codicon) {\n\t\t\tconsole.info('No codicon found for CompletionItemKind ' + kind);\n\t\t\tcodicon = Codicon.symbolProperty;\n\t\t}\n\t\treturn codicon.classNames;\n\t};\n})();\n\n/**\n * @internal\n */\nexport let completionKindFromString: {\n\t(value: string): CompletionItemKind;\n\t(value: string, strict: true): CompletionItemKind | undefined;\n} = (function () {\n\tlet data: Record<string, CompletionItemKind> = Object.create(null);\n\tdata['method'] = CompletionItemKind.Method;\n\tdata['function'] = CompletionItemKind.Function;\n\tdata['constructor'] = <any>CompletionItemKind.Constructor;\n\tdata['field'] = CompletionItemKind.Field;\n\tdata['variable'] = CompletionItemKind.Variable;\n\tdata['class'] = CompletionItemKind.Class;\n\tdata['struct'] = CompletionItemKind.Struct;\n\tdata['interface'] = CompletionItemKind.Interface;\n\tdata['module'] = CompletionItemKind.Module;\n\tdata['property'] = CompletionItemKind.Property;\n\tdata['event'] = CompletionItemKind.Event;\n\tdata['operator'] = CompletionItemKind.Operator;\n\tdata['unit'] = CompletionItemKind.Unit;\n\tdata['value'] = CompletionItemKind.Value;\n\tdata['constant'] = CompletionItemKind.Constant;\n\tdata['enum'] = CompletionItemKind.Enum;\n\tdata['enum-member'] = CompletionItemKind.EnumMember;\n\tdata['enumMember'] = CompletionItemKind.EnumMember;\n\tdata['keyword'] = CompletionItemKind.Keyword;\n\tdata['snippet'] = CompletionItemKind.Snippet;\n\tdata['text'] = CompletionItemKind.Text;\n\tdata['color'] = CompletionItemKind.Color;\n\tdata['file'] = CompletionItemKind.File;\n\tdata['reference'] = CompletionItemKind.Reference;\n\tdata['customcolor'] = CompletionItemKind.Customcolor;\n\tdata['folder'] = CompletionItemKind.Folder;\n\tdata['type-parameter'] = CompletionItemKind.TypeParameter;\n\tdata['typeParameter'] = CompletionItemKind.TypeParameter;\n\tdata['account'] = CompletionItemKind.User;\n\tdata['issue'] = CompletionItemKind.Issue;\n\treturn function (value: string, strict?: true) {\n\t\tlet res = data[value];\n\t\tif (typeof res === 'undefined' && !strict) {\n\t\t\tres = CompletionItemKind.Property;\n\t\t}\n\t\treturn res;\n\t};\n})();\n\nexport interface CompletionItemLabel {\n\t/**\n\t * The function or variable. Rendered leftmost.\n\t */\n\tname: string;\n\n\t/**\n\t * The parameters without the return type. Render after `name`.\n\t */\n\tparameters?: string;\n\n\t/**\n\t * The fully qualified name, like package name or file path. Rendered after `signature`.\n\t */\n\tqualifier?: string;\n\n\t/**\n\t * The return-type of a function or type of a property/variable. Rendered rightmost.\n\t */\n\ttype?: string;\n}\n\nexport const enum CompletionItemTag {\n\tDeprecated = 1\n}\n\nexport const enum CompletionItemInsertTextRule {\n\t/**\n\t * Adjust whitespace/indentation of multiline insert texts to\n\t * match the current line indentation.\n\t */\n\tKeepWhitespace = 0b001,\n\n\t/**\n\t * `insertText` is a snippet.\n\t */\n\tInsertAsSnippet = 0b100,\n}\n\n/**\n * A completion item represents a text snippet that is\n * proposed to complete text that is being typed.\n */\nexport interface CompletionItem {\n\t/**\n\t * The label of this completion item. By default\n\t * this is also the text that is inserted when selecting\n\t * this completion.\n\t */\n\tlabel: string | CompletionItemLabel;\n\t/**\n\t * The kind of this completion item. Based on the kind\n\t * an icon is chosen by the editor.\n\t */\n\tkind: CompletionItemKind;\n\t/**\n\t * A modifier to the `kind` which affect how the item\n\t * is rendered, e.g. Deprecated is rendered with a strikeout\n\t */\n\ttags?: ReadonlyArray<CompletionItemTag>;\n\t/**\n\t * A human-readable string with additional information\n\t * about this item, like type or symbol information.\n\t */\n\tdetail?: string;\n\t/**\n\t * A human-readable string that represents a doc-comment.\n\t */\n\tdocumentation?: string | IMarkdownString;\n\t/**\n\t * A string that should be used when comparing this item\n\t * with other items. When `falsy` the [label](#CompletionItem.label)\n\t * is used.\n\t */\n\tsortText?: string;\n\t/**\n\t * A string that should be used when filtering a set of\n\t * completion items. When `falsy` the [label](#CompletionItem.label)\n\t * is used.\n\t */\n\tfilterText?: string;\n\t/**\n\t * Select this item when showing. *Note* that only one completion item can be selected and\n\t * that the editor decides which item that is. The rule is that the *first* item of those\n\t * that match best is selected.\n\t */\n\tpreselect?: boolean;\n\t/**\n\t * A string or snippet that should be inserted in a document when selecting\n\t * this completion.\n\t * is used.\n\t */\n\tinsertText: string;\n\t/**\n\t * Addition rules (as bitmask) that should be applied when inserting\n\t * this completion.\n\t */\n\tinsertTextRules?: CompletionItemInsertTextRule;\n\t/**\n\t * A range of text that should be replaced by this completion item.\n\t *\n\t * Defaults to a range from the start of the [current word](#TextDocument.getWordRangeAtPosition) to the\n\t * current position.\n\t *\n\t * *Note:* The range must be a [single line](#Range.isSingleLine) and it must\n\t * [contain](#Range.contains) the position at which completion has been [requested](#CompletionItemProvider.provideCompletionItems).\n\t */\n\trange: IRange | { insert: IRange, replace: IRange };\n\t/**\n\t * An optional set of characters that when pressed while this completion is active will accept it first and\n\t * then type that character. *Note* that all commit characters should have `length=1` and that superfluous\n\t * characters will be ignored.\n\t */\n\tcommitCharacters?: string[];\n\t/**\n\t * An optional array of additional text edits that are applied when\n\t * selecting this completion. Edits must not overlap with the main edit\n\t * nor with themselves.\n\t */\n\tadditionalTextEdits?: model.ISingleEditOperation[];\n\t/**\n\t * A command that should be run upon acceptance of this item.\n\t */\n\tcommand?: Command;\n\n\t/**\n\t * @internal\n\t */\n\t_id?: [number, number];\n}\n\nexport interface CompletionList {\n\tsuggestions: CompletionItem[];\n\tincomplete?: boolean;\n\tdispose?(): void;\n\n\t/**\n\t * @internal\n\t */\n\tduration?: number;\n}\n\n/**\n * How a suggest provider was triggered.\n */\nexport const enum CompletionTriggerKind {\n\tInvoke = 0,\n\tTriggerCharacter = 1,\n\tTriggerForIncompleteCompletions = 2\n}\n/**\n * Contains additional information about the context in which\n * [completion provider](#CompletionItemProvider.provideCompletionItems) is triggered.\n */\nexport interface CompletionContext {\n\t/**\n\t * How the completion was triggered.\n\t */\n\ttriggerKind: CompletionTriggerKind;\n\t/**\n\t * Character that triggered the completion item provider.\n\t *\n\t * `undefined` if provider was not triggered by a character.\n\t */\n\ttriggerCharacter?: string;\n}\n/**\n * The completion item provider interface defines the contract between extensions and\n * the [IntelliSense](https://code.visualstudio.com/docs/editor/intellisense).\n *\n * When computing *complete* completion items is expensive, providers can optionally implement\n * the `resolveCompletionItem`-function. In that case it is enough to return completion\n * items with a [label](#CompletionItem.label) from the\n * [provideCompletionItems](#CompletionItemProvider.provideCompletionItems)-function. Subsequently,\n * when a completion item is shown in the UI and gains focus this provider is asked to resolve\n * the item, like adding [doc-comment](#CompletionItem.documentation) or [details](#CompletionItem.detail).\n */\nexport interface CompletionItemProvider {\n\n\t/**\n\t * @internal\n\t */\n\t_debugDisplayName?: string;\n\n\ttriggerCharacters?: string[];\n\t/**\n\t * Provide completion items for the given position and document.\n\t */\n\tprovideCompletionItems(model: model.ITextModel, position: Position, context: CompletionContext, token: CancellationToken): ProviderResult<CompletionList>;\n\n\t/**\n\t * Given a completion item fill in more data, like [doc-comment](#CompletionItem.documentation)\n\t * or [details](#CompletionItem.detail).\n\t *\n\t * The editor will only resolve a completion item once.\n\t */\n\tresolveCompletionItem?(item: CompletionItem, token: CancellationToken): ProviderResult<CompletionItem>;\n}\n\nexport interface CodeAction {\n\ttitle: string;\n\tcommand?: Command;\n\tedit?: WorkspaceEdit;\n\tdiagnostics?: IMarkerData[];\n\tkind?: string;\n\tisPreferred?: boolean;\n\tdisabled?: string;\n}\n\n/**\n * @internal\n */\nexport const enum CodeActionTriggerType {\n\tInvoke = 1,\n\tAuto = 2,\n}\n\n/**\n * @internal\n */\nexport interface CodeActionContext {\n\tonly?: string;\n\ttrigger: CodeActionTriggerType;\n}\n\nexport interface CodeActionList extends IDisposable {\n\treadonly actions: ReadonlyArray<CodeAction>;\n}\n\n/**\n * The code action interface defines the contract between extensions and\n * the [light bulb](https://code.visualstudio.com/docs/editor/editingevolved#_code-action) feature.\n * @internal\n */\nexport interface CodeActionProvider {\n\n\tdisplayName?: string\n\n\t/**\n\t * Provide commands for the given document and range.\n\t */\n\tprovideCodeActions(model: model.ITextModel, range: Range | Selection, context: CodeActionContext, token: CancellationToken): ProviderResult<CodeActionList>;\n\n\t/**\n\t * Given a code action fill in the edit. Will only invoked when missing.\n\t */\n\tresolveCodeAction?(codeAction: CodeAction, token: CancellationToken): ProviderResult<CodeAction>;\n\n\t/**\n\t * Optional list of CodeActionKinds that this provider returns.\n\t */\n\treadonly providedCodeActionKinds?: ReadonlyArray<string>;\n\n\treadonly documentation?: ReadonlyArray<{ readonly kind: string, readonly command: Command }>;\n\n\t/**\n\t * @internal\n\t */\n\t_getAdditionalMenuItems?(context: CodeActionContext, actions: readonly CodeAction[]): Command[];\n}\n\n/**\n * Represents a parameter of a callable-signature. A parameter can\n * have a label and a doc-comment.\n */\nexport interface ParameterInformation {\n\t/**\n\t * The label of this signature. Will be shown in\n\t * the UI.\n\t */\n\tlabel: string | [number, number];\n\t/**\n\t * The human-readable doc-comment of this signature. Will be shown\n\t * in the UI but can be omitted.\n\t */\n\tdocumentation?: string | IMarkdownString;\n}\n/**\n * Represents the signature of something callable. A signature\n * can have a label, like a function-name, a doc-comment, and\n * a set of parameters.\n */\nexport interface SignatureInformation {\n\t/**\n\t * The label of this signature. Will be shown in\n\t * the UI.\n\t */\n\tlabel: string;\n\t/**\n\t * The human-readable doc-comment of this signature. Will be shown\n\t * in the UI but can be omitted.\n\t */\n\tdocumentation?: string | IMarkdownString;\n\t/**\n\t * The parameters of this signature.\n\t */\n\tparameters: ParameterInformation[];\n\t/**\n\t * Index of the active parameter.\n\t *\n\t * If provided, this is used in place of `SignatureHelp.activeSignature`.\n\t */\n\tactiveParameter?: number;\n}\n/**\n * Signature help represents the signature of something\n * callable. There can be multiple signatures but only one\n * active and only one active parameter.\n */\nexport interface SignatureHelp {\n\t/**\n\t * One or more signatures.\n\t */\n\tsignatures: SignatureInformation[];\n\t/**\n\t * The active signature.\n\t */\n\tactiveSignature: number;\n\t/**\n\t * The active parameter of the active signature.\n\t */\n\tactiveParameter: number;\n}\n\nexport interface SignatureHelpResult extends IDisposable {\n\tvalue: SignatureHelp;\n}\n\nexport enum SignatureHelpTriggerKind {\n\tInvoke = 1,\n\tTriggerCharacter = 2,\n\tContentChange = 3,\n}\n\nexport interface SignatureHelpContext {\n\treadonly triggerKind: SignatureHelpTriggerKind;\n\treadonly triggerCharacter?: string;\n\treadonly isRetrigger: boolean;\n\treadonly activeSignatureHelp?: SignatureHelp;\n}\n\n/**\n * The signature help provider interface defines the contract between extensions and\n * the [parameter hints](https://code.visualstudio.com/docs/editor/intellisense)-feature.\n */\nexport interface SignatureHelpProvider {\n\n\treadonly signatureHelpTriggerCharacters?: ReadonlyArray<string>;\n\treadonly signatureHelpRetriggerCharacters?: ReadonlyArray<string>;\n\n\t/**\n\t * Provide help for the signature at the given position and document.\n\t */\n\tprovideSignatureHelp(model: model.ITextModel, position: Position, token: CancellationToken, context: SignatureHelpContext): ProviderResult<SignatureHelpResult>;\n}\n\n/**\n * A document highlight kind.\n */\nexport enum DocumentHighlightKind {\n\t/**\n\t * A textual occurrence.\n\t */\n\tText,\n\t/**\n\t * Read-access of a symbol, like reading a variable.\n\t */\n\tRead,\n\t/**\n\t * Write-access of a symbol, like writing to a variable.\n\t */\n\tWrite\n}\n/**\n * A document highlight is a range inside a text document which deserves\n * special attention. Usually a document highlight is visualized by changing\n * the background color of its range.\n */\nexport interface DocumentHighlight {\n\t/**\n\t * The range this highlight applies to.\n\t */\n\trange: IRange;\n\t/**\n\t * The highlight kind, default is [text](#DocumentHighlightKind.Text).\n\t */\n\tkind?: DocumentHighlightKind;\n}\n/**\n * The document highlight provider interface defines the contract between extensions and\n * the word-highlight-feature.\n */\nexport interface DocumentHighlightProvider {\n\t/**\n\t * Provide a set of document highlights, like all occurrences of a variable or\n\t * all exit-points of a function.\n\t */\n\tprovideDocumentHighlights(model: model.ITextModel, position: Position, token: CancellationToken): ProviderResult<DocumentHighlight[]>;\n}\n\n/**\n * The linked editing range provider interface defines the contract between extensions and\n * the linked editing feature.\n */\nexport interface LinkedEditingRangeProvider {\n\n\t/**\n\t * Provide a list of ranges that can be edited together.\n\t */\n\tprovideLinkedEditingRanges(model: model.ITextModel, position: Position, token: CancellationToken): ProviderResult<LinkedEditingRanges>;\n}\n\n/**\n * Represents a list of ranges that can be edited together along with a word pattern to describe valid contents.\n */\nexport interface LinkedEditingRanges {\n\t/**\n\t * A list of ranges that can be edited together. The ranges must have\n\t * identical length and text content. The ranges cannot overlap\n\t */\n\tranges: IRange[];\n\n\t/**\n\t * An optional word pattern that describes valid contents for the given ranges.\n\t * If no pattern is provided, the language configuration's word pattern will be used.\n\t */\n\twordPattern?: RegExp;\n}\n\n/**\n * Value-object that contains additional information when\n * requesting references.\n */\nexport interface ReferenceContext {\n\t/**\n\t * Include the declaration of the current symbol.\n\t */\n\tincludeDeclaration: boolean;\n}\n/**\n * The reference provider interface defines the contract between extensions and\n * the [find references](https://code.visualstudio.com/docs/editor/editingevolved#_peek)-feature.\n */\nexport interface ReferenceProvider {\n\t/**\n\t * Provide a set of project-wide references for the given position and document.\n\t */\n\tprovideReferences(model: model.ITextModel, position: Position, context: ReferenceContext, token: CancellationToken): ProviderResult<Location[]>;\n}\n\n/**\n * Represents a location inside a resource, such as a line\n * inside a text file.\n */\nexport interface Location {\n\t/**\n\t * The resource identifier of this location.\n\t */\n\turi: URI;\n\t/**\n\t * The document range of this locations.\n\t */\n\trange: IRange;\n}\n\nexport interface LocationLink {\n\t/**\n\t * A range to select where this link originates from.\n\t */\n\toriginSelectionRange?: IRange;\n\n\t/**\n\t * The target uri this link points to.\n\t */\n\turi: URI;\n\n\t/**\n\t * The full range this link points to.\n\t */\n\trange: IRange;\n\n\t/**\n\t * A range to select this link points to. Must be contained\n\t * in `LocationLink.range`.\n\t */\n\ttargetSelectionRange?: IRange;\n}\n\n/**\n * @internal\n */\nexport function isLocationLink(thing: any): thing is LocationLink {\n\treturn thing\n\t\t&& URI.isUri((thing as LocationLink).uri)\n\t\t&& Range.isIRange((thing as LocationLink).range)\n\t\t&& (Range.isIRange((thing as LocationLink).originSelectionRange) || Range.isIRange((thing as LocationLink).targetSelectionRange));\n}\n\nexport type Definition = Location | Location[] | LocationLink[];\n\n/**\n * The definition provider interface defines the contract between extensions and\n * the [go to definition](https://code.visualstudio.com/docs/editor/editingevolved#_go-to-definition)\n * and peek definition features.\n */\nexport interface DefinitionProvider {\n\t/**\n\t * Provide the definition of the symbol at the given position and document.\n\t */\n\tprovideDefinition(model: model.ITextModel, position: Position, token: CancellationToken): ProviderResult<Definition | LocationLink[]>;\n}\n\n/**\n * The definition provider interface defines the contract between extensions and\n * the [go to definition](https://code.visualstudio.com/docs/editor/editingevolved#_go-to-definition)\n * and peek definition features.\n */\nexport interface DeclarationProvider {\n\t/**\n\t * Provide the declaration of the symbol at the given position and document.\n\t */\n\tprovideDeclaration(model: model.ITextModel, position: Position, token: CancellationToken): ProviderResult<Definition | LocationLink[]>;\n}\n\n/**\n * The implementation provider interface defines the contract between extensions and\n * the go to implementation feature.\n */\nexport interface ImplementationProvider {\n\t/**\n\t * Provide the implementation of the symbol at the given position and document.\n\t */\n\tprovideImplementation(model: model.ITextModel, position: Position, token: CancellationToken): ProviderResult<Definition | LocationLink[]>;\n}\n\n/**\n * The type definition provider interface defines the contract between extensions and\n * the go to type definition feature.\n */\nexport interface TypeDefinitionProvider {\n\t/**\n\t * Provide the type definition of the symbol at the given position and document.\n\t */\n\tprovideTypeDefinition(model: model.ITextModel, position: Position, token: CancellationToken): ProviderResult<Definition | LocationLink[]>;\n}\n\n/**\n * A symbol kind.\n */\nexport const enum SymbolKind {\n\tFile = 0,\n\tModule = 1,\n\tNamespace = 2,\n\tPackage = 3,\n\tClass = 4,\n\tMethod = 5,\n\tProperty = 6,\n\tField = 7,\n\tConstructor = 8,\n\tEnum = 9,\n\tInterface = 10,\n\tFunction = 11,\n\tVariable = 12,\n\tConstant = 13,\n\tString = 14,\n\tNumber = 15,\n\tBoolean = 16,\n\tArray = 17,\n\tObject = 18,\n\tKey = 19,\n\tNull = 20,\n\tEnumMember = 21,\n\tStruct = 22,\n\tEvent = 23,\n\tOperator = 24,\n\tTypeParameter = 25\n}\n\nexport const enum SymbolTag {\n\tDeprecated = 1,\n}\n\n/**\n * @internal\n */\nexport namespace SymbolKinds {\n\n\tconst byName = new Map<string, SymbolKind>();\n\tbyName.set('file', SymbolKind.File);\n\tbyName.set('module', SymbolKind.Module);\n\tbyName.set('namespace', SymbolKind.Namespace);\n\tbyName.set('package', SymbolKind.Package);\n\tbyName.set('class', SymbolKind.Class);\n\tbyName.set('method', SymbolKind.Method);\n\tbyName.set('property', SymbolKind.Property);\n\tbyName.set('field', SymbolKind.Field);\n\tbyName.set('constructor', SymbolKind.Constructor);\n\tbyName.set('enum', SymbolKind.Enum);\n\tbyName.set('interface', SymbolKind.Interface);\n\tbyName.set('function', SymbolKind.Function);\n\tbyName.set('variable', SymbolKind.Variable);\n\tbyName.set('constant', SymbolKind.Constant);\n\tbyName.set('string', SymbolKind.String);\n\tbyName.set('number', SymbolKind.Number);\n\tbyName.set('boolean', SymbolKind.Boolean);\n\tbyName.set('array', SymbolKind.Array);\n\tbyName.set('object', SymbolKind.Object);\n\tbyName.set('key', SymbolKind.Key);\n\tbyName.set('null', SymbolKind.Null);\n\tbyName.set('enum-member', SymbolKind.EnumMember);\n\tbyName.set('struct', SymbolKind.Struct);\n\tbyName.set('event', SymbolKind.Event);\n\tbyName.set('operator', SymbolKind.Operator);\n\tbyName.set('type-parameter', SymbolKind.TypeParameter);\n\n\tconst byKind = new Map<SymbolKind, string>();\n\tbyKind.set(SymbolKind.File, 'file');\n\tbyKind.set(SymbolKind.Module, 'module');\n\tbyKind.set(SymbolKind.Namespace, 'namespace');\n\tbyKind.set(SymbolKind.Package, 'package');\n\tbyKind.set(SymbolKind.Class, 'class');\n\tbyKind.set(SymbolKind.Method, 'method');\n\tbyKind.set(SymbolKind.Property, 'property');\n\tbyKind.set(SymbolKind.Field, 'field');\n\tbyKind.set(SymbolKind.Constructor, 'constructor');\n\tbyKind.set(SymbolKind.Enum, 'enum');\n\tbyKind.set(SymbolKind.Interface, 'interface');\n\tbyKind.set(SymbolKind.Function, 'function');\n\tbyKind.set(SymbolKind.Variable, 'variable');\n\tbyKind.set(SymbolKind.Constant, 'constant');\n\tbyKind.set(SymbolKind.String, 'string');\n\tbyKind.set(SymbolKind.Number, 'number');\n\tbyKind.set(SymbolKind.Boolean, 'boolean');\n\tbyKind.set(SymbolKind.Array, 'array');\n\tbyKind.set(SymbolKind.Object, 'object');\n\tbyKind.set(SymbolKind.Key, 'key');\n\tbyKind.set(SymbolKind.Null, 'null');\n\tbyKind.set(SymbolKind.EnumMember, 'enum-member');\n\tbyKind.set(SymbolKind.Struct, 'struct');\n\tbyKind.set(SymbolKind.Event, 'event');\n\tbyKind.set(SymbolKind.Operator, 'operator');\n\tbyKind.set(SymbolKind.TypeParameter, 'type-parameter');\n\t/**\n\t * @internal\n\t */\n\texport function fromString(value: string): SymbolKind | undefined {\n\t\treturn byName.get(value);\n\t}\n\t/**\n\t * @internal\n\t */\n\texport function toString(kind: SymbolKind): string | undefined {\n\t\treturn byKind.get(kind);\n\t}\n\t/**\n\t * @internal\n\t */\n\texport function toCssClassName(kind: SymbolKind, inline?: boolean): string {\n\t\tconst symbolName = byKind.get(kind);\n\t\tlet codicon = symbolName && iconRegistry.get('symbol-' + symbolName);\n\t\tif (!codicon) {\n\t\t\tconsole.info('No codicon found for SymbolKind ' + kind);\n\t\t\tcodicon = Codicon.symbolProperty;\n\t\t}\n\t\treturn `${inline ? 'inline' : 'block'} ${codicon.classNames}`;\n\t}\n}\n\nexport interface DocumentSymbol {\n\tname: string;\n\tdetail: string;\n\tkind: SymbolKind;\n\ttags: ReadonlyArray<SymbolTag>;\n\tcontainerName?: string;\n\trange: IRange;\n\tselectionRange: IRange;\n\tchildren?: DocumentSymbol[];\n}\n\n/**\n * The document symbol provider interface defines the contract between extensions and\n * the [go to symbol](https://code.visualstudio.com/docs/editor/editingevolved#_go-to-symbol)-feature.\n */\nexport interface DocumentSymbolProvider {\n\n\tdisplayName?: string;\n\n\t/**\n\t * Provide symbol information for the given document.\n\t */\n\tprovideDocumentSymbols(model: model.ITextModel, token: CancellationToken): ProviderResult<DocumentSymbol[]>;\n}\n\nexport type TextEdit = { range: IRange; text: string; eol?: model.EndOfLineSequence; };\n\n/**\n * Interface used to format a model\n */\nexport interface FormattingOptions {\n\t/**\n\t * Size of a tab in spaces.\n\t */\n\ttabSize: number;\n\t/**\n\t * Prefer spaces over tabs.\n\t */\n\tinsertSpaces: boolean;\n}\n/**\n * The document formatting provider interface defines the contract between extensions and\n * the formatting-feature.\n */\nexport interface DocumentFormattingEditProvider {\n\n\t/**\n\t * @internal\n\t */\n\treadonly extensionId?: ExtensionIdentifier;\n\n\treadonly displayName?: string;\n\n\t/**\n\t * Provide formatting edits for a whole document.\n\t */\n\tprovideDocumentFormattingEdits(model: model.ITextModel, options: FormattingOptions, token: CancellationToken): ProviderResult<TextEdit[]>;\n}\n/**\n * The document formatting provider interface defines the contract between extensions and\n * the formatting-feature.\n */\nexport interface DocumentRangeFormattingEditProvider {\n\t/**\n\t * @internal\n\t */\n\treadonly extensionId?: ExtensionIdentifier;\n\n\treadonly displayName?: string;\n\n\t/**\n\t * Provide formatting edits for a range in a document.\n\t *\n\t * The given range is a hint and providers can decide to format a smaller\n\t * or larger range. Often this is done by adjusting the start and end\n\t * of the range to full syntax nodes.\n\t */\n\tprovideDocumentRangeFormattingEdits(model: model.ITextModel, range: Range, options: FormattingOptions, token: CancellationToken): ProviderResult<TextEdit[]>;\n}\n/**\n * The document formatting provider interface defines the contract between extensions and\n * the formatting-feature.\n */\nexport interface OnTypeFormattingEditProvider {\n\n\n\t/**\n\t * @internal\n\t */\n\treadonly extensionId?: ExtensionIdentifier;\n\n\tautoFormatTriggerCharacters: string[];\n\n\t/**\n\t * Provide formatting edits after a character has been typed.\n\t *\n\t * The given position and character should hint to the provider\n\t * what range the position to expand to, like find the matching `{`\n\t * when `}` has been entered.\n\t */\n\tprovideOnTypeFormattingEdits(model: model.ITextModel, position: Position, ch: string, options: FormattingOptions, token: CancellationToken): ProviderResult<TextEdit[]>;\n}\n\n/**\n * @internal\n */\nexport interface IInplaceReplaceSupportResult {\n\tvalue: string;\n\trange: IRange;\n}\n\n/**\n * A link inside the editor.\n */\nexport interface ILink {\n\trange: IRange;\n\turl?: URI | string;\n\ttooltip?: string;\n}\n\nexport interface ILinksList {\n\tlinks: ILink[];\n\tdispose?(): void;\n}\n/**\n * A provider of links.\n */\nexport interface LinkProvider {\n\tprovideLinks(model: model.ITextModel, token: CancellationToken): ProviderResult<ILinksList>;\n\tresolveLink?: (link: ILink, token: CancellationToken) => ProviderResult<ILink>;\n}\n\n/**\n * A color in RGBA format.\n */\nexport interface IColor {\n\n\t/**\n\t * The red component in the range [0-1].\n\t */\n\treadonly red: number;\n\n\t/**\n\t * The green component in the range [0-1].\n\t */\n\treadonly green: number;\n\n\t/**\n\t * The blue component in the range [0-1].\n\t */\n\treadonly blue: number;\n\n\t/**\n\t * The alpha component in the range [0-1].\n\t */\n\treadonly alpha: number;\n}\n\n/**\n * String representations for a color\n */\nexport interface IColorPresentation {\n\t/**\n\t * The label of this color presentation. It will be shown on the color\n\t * picker header. By default this is also the text that is inserted when selecting\n\t * this color presentation.\n\t */\n\tlabel: string;\n\t/**\n\t * An [edit](#TextEdit) which is applied to a document when selecting\n\t * this presentation for the color.\n\t */\n\ttextEdit?: TextEdit;\n\t/**\n\t * An optional array of additional [text edits](#TextEdit) that are applied when\n\t * selecting this color presentation.\n\t */\n\tadditionalTextEdits?: TextEdit[];\n}\n\n/**\n * A color range is a range in a text model which represents a color.\n */\nexport interface IColorInformation {\n\n\t/**\n\t * The range within the model.\n\t */\n\trange: IRange;\n\n\t/**\n\t * The color represented in this range.\n\t */\n\tcolor: IColor;\n}\n\n/**\n * A provider of colors for editor models.\n */\nexport interface DocumentColorProvider {\n\t/**\n\t * Provides the color ranges for a specific model.\n\t */\n\tprovideDocumentColors(model: model.ITextModel, token: CancellationToken): ProviderResult<IColorInformation[]>;\n\t/**\n\t * Provide the string representations for a color.\n\t */\n\tprovideColorPresentations(model: model.ITextModel, colorInfo: IColorInformation, token: CancellationToken): ProviderResult<IColorPresentation[]>;\n}\n\nexport interface SelectionRange {\n\trange: IRange;\n}\n\nexport interface SelectionRangeProvider {\n\t/**\n\t * Provide ranges that should be selected from the given position.\n\t */\n\tprovideSelectionRanges(model: model.ITextModel, positions: Position[], token: CancellationToken): ProviderResult<SelectionRange[][]>;\n}\n\nexport interface FoldingContext {\n}\n/**\n * A provider of folding ranges for editor models.\n */\nexport interface FoldingRangeProvider {\n\n\t/**\n\t * An optional event to signal that the folding ranges from this provider have changed.\n\t */\n\tonDidChange?: Event<this>;\n\n\t/**\n\t * Provides the folding ranges for a specific model.\n\t */\n\tprovideFoldingRanges(model: model.ITextModel, context: FoldingContext, token: CancellationToken): ProviderResult<FoldingRange[]>;\n}\n\nexport interface FoldingRange {\n\n\t/**\n\t * The one-based start line of the range to fold. The folded area starts after the line's last character.\n\t */\n\tstart: number;\n\n\t/**\n\t * The one-based end line of the range to fold. The folded area ends with the line's last character.\n\t */\n\tend: number;\n\n\t/**\n\t * Describes the [Kind](#FoldingRangeKind) of the folding range such as [Comment](#FoldingRangeKind.Comment) or\n\t * [Region](#FoldingRangeKind.Region). The kind is used to categorize folding ranges and used by commands\n\t * like 'Fold all comments'. See\n\t * [FoldingRangeKind](#FoldingRangeKind) for an enumeration of standardized kinds.\n\t */\n\tkind?: FoldingRangeKind;\n}\nexport class FoldingRangeKind {\n\t/**\n\t * Kind for folding range representing a comment. The value of the kind is 'comment'.\n\t */\n\tstatic readonly Comment = new FoldingRangeKind('comment');\n\t/**\n\t * Kind for folding range representing a import. The value of the kind is 'imports'.\n\t */\n\tstatic readonly Imports = new FoldingRangeKind('imports');\n\t/**\n\t * Kind for folding range representing regions (for example marked by `#region`, `#endregion`).\n\t * The value of the kind is 'region'.\n\t */\n\tstatic readonly Region = new FoldingRangeKind('region');\n\n\t/**\n\t * Creates a new [FoldingRangeKind](#FoldingRangeKind).\n\t *\n\t * @param value of the kind.\n\t */\n\tpublic constructor(public value: string) {\n\t}\n}\n\n\nexport interface WorkspaceEditMetadata {\n\tneedsConfirmation: boolean;\n\tlabel: string;\n\tdescription?: string;\n\t/**\n\t * @internal\n\t */\n\ticonPath?: ThemeIcon | URI | { light: URI, dark: URI };\n}\n\nexport interface WorkspaceFileEditOptions {\n\toverwrite?: boolean;\n\tignoreIfNotExists?: boolean;\n\tignoreIfExists?: boolean;\n\trecursive?: boolean;\n\tcopy?: boolean;\n\tfolder?: boolean;\n\tskipTrashBin?: boolean;\n\tmaxSize?: number;\n}\n\nexport interface WorkspaceFileEdit {\n\toldUri?: URI;\n\tnewUri?: URI;\n\toptions?: WorkspaceFileEditOptions;\n\tmetadata?: WorkspaceEditMetadata;\n}\n\nexport interface WorkspaceTextEdit {\n\tresource: URI;\n\tedit: TextEdit;\n\tmodelVersionId?: number;\n\tmetadata?: WorkspaceEditMetadata;\n}\n\nexport interface WorkspaceEdit {\n\tedits: Array<WorkspaceTextEdit | WorkspaceFileEdit>;\n}\n\nexport interface Rejection {\n\trejectReason?: string;\n}\nexport interface RenameLocation {\n\trange: IRange;\n\ttext: string;\n}\n\nexport interface RenameProvider {\n\tprovideRenameEdits(model: model.ITextModel, position: Position, newName: string, token: CancellationToken): ProviderResult<WorkspaceEdit & Rejection>;\n\tresolveRenameLocation?(model: model.ITextModel, position: Position, token: CancellationToken): ProviderResult<RenameLocation & Rejection>;\n}\n\n/**\n * @internal\n */\nexport interface AuthenticationSession {\n\tid: string;\n\taccessToken: string;\n\taccount: {\n\t\tlabel: string;\n\t\tid: string;\n\t}\n\tscopes: ReadonlyArray<string>;\n}\n\n/**\n * @internal\n */\nexport interface AuthenticationSessionsChangeEvent {\n\tadded: ReadonlyArray<AuthenticationSession>;\n\tremoved: ReadonlyArray<AuthenticationSession>;\n\tchanged: ReadonlyArray<AuthenticationSession>;\n}\n\n/**\n * @internal\n */\nexport interface AuthenticationProviderInformation {\n\tid: string;\n\tlabel: string;\n}\n\nexport interface Command {\n\tid: string;\n\ttitle: string;\n\ttooltip?: string;\n\targuments?: any[];\n}\n\n/**\n * @internal\n */\nexport interface CommentThreadTemplate {\n\tcontrollerHandle: number;\n\tlabel: string;\n\tacceptInputCommand?: Command;\n\tadditionalCommands?: Command[];\n\tdeleteCommand?: Command;\n}\n\n/**\n * @internal\n */\nexport interface CommentInfo {\n\textensionId?: string;\n\tthreads: CommentThread[];\n\tcommentingRanges: CommentingRanges;\n}\n\n/**\n * @internal\n */\nexport enum CommentThreadCollapsibleState {\n\t/**\n\t * Determines an item is collapsed\n\t */\n\tCollapsed = 0,\n\t/**\n\t * Determines an item is expanded\n\t */\n\tExpanded = 1\n}\n\n\n\n/**\n * @internal\n */\nexport interface CommentWidget {\n\tcommentThread: CommentThread;\n\tcomment?: Comment;\n\tinput: string;\n\tonDidChangeInput: Event<string>;\n}\n\n/**\n * @internal\n */\nexport interface CommentInput {\n\tvalue: string;\n\turi: URI;\n}\n\n/**\n * @internal\n */\nexport interface CommentThread {\n\tcommentThreadHandle: number;\n\tcontrollerHandle: number;\n\textensionId?: string;\n\tthreadId: string;\n\tresource: string | null;\n\trange: IRange;\n\tlabel: string | undefined;\n\tcontextValue: string | undefined;\n\tcomments: Comment[] | undefined;\n\tonDidChangeComments: Event<Comment[] | undefined>;\n\tcollapsibleState?: CommentThreadCollapsibleState;\n\tcanReply: boolean;\n\tinput?: CommentInput;\n\tonDidChangeInput: Event<CommentInput | undefined>;\n\tonDidChangeRange: Event<IRange>;\n\tonDidChangeLabel: Event<string | undefined>;\n\tonDidChangeCollasibleState: Event<CommentThreadCollapsibleState | undefined>;\n\tonDidChangeCanReply: Event<boolean>;\n\tisDisposed: boolean;\n}\n\n/**\n * @internal\n */\n\nexport interface CommentingRanges {\n\treadonly resource: URI;\n\tranges: IRange[];\n}\n\n/**\n * @internal\n */\nexport interface CommentReaction {\n\treadonly label?: string;\n\treadonly iconPath?: UriComponents;\n\treadonly count?: number;\n\treadonly hasReacted?: boolean;\n\treadonly canEdit?: boolean;\n}\n\n/**\n * @internal\n */\nexport interface CommentOptions {\n\t/**\n\t * An optional string to show on the comment input box when it's collapsed.\n\t */\n\tprompt?: string;\n\n\t/**\n\t * An optional string to show as placeholder in the comment input box when it's focused.\n\t */\n\tplaceHolder?: string;\n}\n\n/**\n * @internal\n */\nexport enum CommentMode {\n\tEditing = 0,\n\tPreview = 1\n}\n\n/**\n * @internal\n */\nexport interface Comment {\n\treadonly uniqueIdInThread: number;\n\treadonly body: IMarkdownString;\n\treadonly userName: string;\n\treadonly userIconPath?: string;\n\treadonly contextValue?: string;\n\treadonly commentReactions?: CommentReaction[];\n\treadonly label?: string;\n\treadonly mode?: CommentMode;\n}\n\n/**\n * @internal\n */\nexport interface CommentThreadChangedEvent {\n\t/**\n\t * Added comment threads.\n\t */\n\treadonly added: CommentThread[];\n\n\t/**\n\t * Removed comment threads.\n\t */\n\treadonly removed: CommentThread[];\n\n\t/**\n\t * Changed comment threads.\n\t */\n\treadonly changed: CommentThread[];\n}\n\nexport interface CodeLens {\n\trange: IRange;\n\tid?: string;\n\tcommand?: Command;\n}\n\nexport interface CodeLensList {\n\tlenses: CodeLens[];\n\tdispose(): void;\n}\n\nexport interface CodeLensProvider {\n\tonDidChange?: Event<this>;\n\tprovideCodeLenses(model: model.ITextModel, token: CancellationToken): ProviderResult<CodeLensList>;\n\tresolveCodeLens?(model: model.ITextModel, codeLens: CodeLens, token: CancellationToken): ProviderResult<CodeLens>;\n}\n\n\nexport enum InlineHintKind {\n\tOther = 0,\n\tType = 1,\n\tParameter = 2,\n}\n\nexport interface InlineHint {\n\ttext: string;\n\trange: IRange;\n\tkind: InlineHintKind;\n\tdescription?: string | IMarkdownString;\n\twhitespaceBefore?: boolean;\n\twhitespaceAfter?: boolean;\n}\n\nexport interface InlineHintsProvider {\n\tonDidChangeInlineHints?: Event<void> | undefined;\n\tprovideInlineHints(model: model.ITextModel, range: Range, token: CancellationToken): ProviderResult<InlineHint[]>;\n}\n\nexport interface SemanticTokensLegend {\n\treadonly tokenTypes: string[];\n\treadonly tokenModifiers: string[];\n}\n\nexport interface SemanticTokens {\n\treadonly resultId?: string;\n\treadonly data: Uint32Array;\n}\n\nexport interface SemanticTokensEdit {\n\treadonly start: number;\n\treadonly deleteCount: number;\n\treadonly data?: Uint32Array;\n}\n\nexport interface SemanticTokensEdits {\n\treadonly resultId?: string;\n\treadonly edits: SemanticTokensEdit[];\n}\n\nexport interface DocumentSemanticTokensProvider {\n\tonDidChange?: Event<void>;\n\tgetLegend(): SemanticTokensLegend;\n\tprovideDocumentSemanticTokens(model: model.ITextModel, lastResultId: string | null, token: CancellationToken): ProviderResult<SemanticTokens | SemanticTokensEdits>;\n\treleaseDocumentSemanticTokens(resultId: string | undefined): void;\n}\n\nexport interface DocumentRangeSemanticTokensProvider {\n\tgetLegend(): SemanticTokensLegend;\n\tprovideDocumentRangeSemanticTokens(model: model.ITextModel, range: Range, token: CancellationToken): ProviderResult<SemanticTokens>;\n}\n\n// --- feature registries ------\n\n/**\n * @internal\n */\nexport const ReferenceProviderRegistry = new LanguageFeatureRegistry<ReferenceProvider>();\n\n/**\n * @internal\n */\nexport const RenameProviderRegistry = new LanguageFeatureRegistry<RenameProvider>();\n\n/**\n * @internal\n */\nexport const CompletionProviderRegistry = new LanguageFeatureRegistry<CompletionItemProvider>();\n\n/**\n * @internal\n */\nexport const SignatureHelpProviderRegistry = new LanguageFeatureRegistry<SignatureHelpProvider>();\n\n/**\n * @internal\n */\nexport const HoverProviderRegistry = new LanguageFeatureRegistry<HoverProvider>();\n\n/**\n * @internal\n */\nexport const EvaluatableExpressionProviderRegistry = new LanguageFeatureRegistry<EvaluatableExpressionProvider>();\n\n/**\n * @internal\n */\nexport const InlineValuesProviderRegistry = new LanguageFeatureRegistry<InlineValuesProvider>();\n\n/**\n * @internal\n */\nexport const DocumentSymbolProviderRegistry = new LanguageFeatureRegistry<DocumentSymbolProvider>();\n\n/**\n * @internal\n */\nexport const DocumentHighlightProviderRegistry = new LanguageFeatureRegistry<DocumentHighlightProvider>();\n\n/**\n * @internal\n */\nexport const LinkedEditingRangeProviderRegistry = new LanguageFeatureRegistry<LinkedEditingRangeProvider>();\n\n/**\n * @internal\n */\nexport const DefinitionProviderRegistry = new LanguageFeatureRegistry<DefinitionProvider>();\n\n/**\n * @internal\n */\nexport const DeclarationProviderRegistry = new LanguageFeatureRegistry<DeclarationProvider>();\n\n/**\n * @internal\n */\nexport const ImplementationProviderRegistry = new LanguageFeatureRegistry<ImplementationProvider>();\n\n/**\n * @internal\n */\nexport const TypeDefinitionProviderRegistry = new LanguageFeatureRegistry<TypeDefinitionProvider>();\n\n/**\n * @internal\n */\nexport const CodeLensProviderRegistry = new LanguageFeatureRegistry<CodeLensProvider>();\n\n/**\n * @internal\n */\nexport const InlineHintsProviderRegistry = new LanguageFeatureRegistry<InlineHintsProvider>();\n\n/**\n * @internal\n */\nexport const CodeActionProviderRegistry = new LanguageFeatureRegistry<CodeActionProvider>();\n\n/**\n * @internal\n */\nexport const DocumentFormattingEditProviderRegistry = new LanguageFeatureRegistry<DocumentFormattingEditProvider>();\n\n/**\n * @internal\n */\nexport const DocumentRangeFormattingEditProviderRegistry = new LanguageFeatureRegistry<DocumentRangeFormattingEditProvider>();\n\n/**\n * @internal\n */\nexport const OnTypeFormattingEditProviderRegistry = new LanguageFeatureRegistry<OnTypeFormattingEditProvider>();\n\n/**\n * @internal\n */\nexport const LinkProviderRegistry = new LanguageFeatureRegistry<LinkProvider>();\n\n/**\n * @internal\n */\nexport const ColorProviderRegistry = new LanguageFeatureRegistry<DocumentColorProvider>();\n\n/**\n * @internal\n */\nexport const SelectionRangeRegistry = new LanguageFeatureRegistry<SelectionRangeProvider>();\n\n/**\n * @internal\n */\nexport const FoldingRangeProviderRegistry = new LanguageFeatureRegistry<FoldingRangeProvider>();\n\n/**\n * @internal\n */\nexport const DocumentSemanticTokensProviderRegistry = new LanguageFeatureRegistry<DocumentSemanticTokensProvider>();\n\n/**\n * @internal\n */\nexport const DocumentRangeSemanticTokensProviderRegistry = new LanguageFeatureRegistry<DocumentRangeSemanticTokensProvider>();\n\n/**\n * @internal\n */\nexport interface ITokenizationSupportChangedEvent {\n\tchangedLanguages: string[];\n\tchangedColorMap: boolean;\n}\n\n/**\n * @internal\n */\nexport interface ITokenizationRegistry {\n\n\t/**\n\t * An event triggered when:\n\t *  - a tokenization support is registered, unregistered or changed.\n\t *  - the color map is changed.\n\t */\n\tonDidChange: Event<ITokenizationSupportChangedEvent>;\n\n\t/**\n\t * Fire a change event for a language.\n\t * This is useful for languages that embed other languages.\n\t */\n\tfire(languages: string[]): void;\n\n\t/**\n\t * Register a tokenization support.\n\t */\n\tregister(language: string, support: ITokenizationSupport): IDisposable;\n\n\t/**\n\t * Register a promise for a tokenization support.\n\t */\n\tregisterPromise(language: string, promise: Thenable<ITokenizationSupport>): IDisposable;\n\n\t/**\n\t * Get the tokenization support for a language.\n\t * Returns `null` if not found.\n\t */\n\tget(language: string): ITokenizationSupport | null;\n\n\t/**\n\t * Get the promise of a tokenization support for a language.\n\t * `null` is returned if no support is available and no promise for the support has been registered yet.\n\t */\n\tgetPromise(language: string): Thenable<ITokenizationSupport> | null;\n\n\t/**\n\t * Set the new color map that all tokens will use in their ColorId binary encoded bits for foreground and background.\n\t */\n\tsetColorMap(colorMap: Color[]): void;\n\n\tgetColorMap(): Color[] | null;\n\n\tgetDefaultBackground(): Color | null;\n}\n\n/**\n * @internal\n */\nexport const TokenizationRegistry = new TokenizationRegistryImpl();\n\n\n/**\n * @internal\n */\nexport enum ExternalUriOpenerPriority {\n\tNone = 0,\n\tOption = 1,\n\tDefault = 2,\n\tPreferred = 3,\n}\n"]}