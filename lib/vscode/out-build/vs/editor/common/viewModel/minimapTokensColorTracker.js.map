{"version":3,"file":"minimapTokensColorTracker.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/common/viewModel/minimapTokensColorTracker.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAMhG,MAAa,yBAAyB;QAerC;YAHiB,iBAAY,GAAG,IAAI,eAAO,EAAQ,CAAC;YACpC,gBAAW,GAAgB,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;YAGlE,IAAI,CAAC,eAAe,EAAE,CAAC;YACvB,4BAAoB,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE;gBACpC,IAAI,CAAC,CAAC,eAAe,EAAE;oBACtB,IAAI,CAAC,eAAe,EAAE,CAAC;iBACvB;YACF,CAAC,CAAC,CAAC;QACJ,CAAC;QApBM,MAAM,CAAC,WAAW;YACxB,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;gBACpB,IAAI,CAAC,SAAS,GAAG,IAAI,yBAAyB,EAAE,CAAC;aACjD;YACD,OAAO,IAAI,CAAC,SAAS,CAAC;QACvB,CAAC;QAiBO,eAAe;YACtB,MAAM,QAAQ,GAAG,4BAAoB,CAAC,WAAW,EAAE,CAAC;YACpD,IAAI,CAAC,QAAQ,EAAE;gBACd,IAAI,CAAC,OAAO,GAAG,CAAC,YAAK,CAAC,KAAK,CAAC,CAAC;gBAC7B,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;gBAC/B,OAAO;aACP;YACD,IAAI,CAAC,OAAO,GAAG,CAAC,YAAK,CAAC,KAAK,CAAC,CAAC;YAC7B,KAAK,IAAI,OAAO,GAAG,CAAC,EAAE,OAAO,GAAG,QAAQ,CAAC,MAAM,EAAE,OAAO,EAAE,EAAE;gBAC3D,MAAM,MAAM,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC;gBACtC,8BAA8B;gBAC9B,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,IAAI,YAAK,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;aAC5F;YACD,IAAI,oBAAoB,GAAG,QAAQ,2BAA2B,CAAC,oBAAoB,EAAE,CAAC;YACtF,IAAI,CAAC,kBAAkB,GAAG,oBAAoB,IAAI,GAAG,CAAC;YACtD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACnC,CAAC;QAEM,QAAQ,CAAC,OAAgB;YAC/B,IAAI,OAAO,GAAG,CAAC,IAAI,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;gBAClD,yCAAyC;gBACzC,OAAO,4BAA4B,CAAC;aACpC;YACD,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAC9B,CAAC;QAEM,iBAAiB;YACvB,OAAO,IAAI,CAAC,kBAAkB,CAAC;QAChC,CAAC;;IApDF,8DAqDC;IApDe,mCAAS,GAAqC,IAAI,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { RGBA8 } from 'vs/editor/common/core/rgba';\nimport { ColorId, TokenizationRegistry } from 'vs/editor/common/modes';\n\nexport class MinimapTokensColorTracker {\n\tprivate static _INSTANCE: MinimapTokensColorTracker | null = null;\n\tpublic static getInstance(): MinimapTokensColorTracker {\n\t\tif (!this._INSTANCE) {\n\t\t\tthis._INSTANCE = new MinimapTokensColorTracker();\n\t\t}\n\t\treturn this._INSTANCE;\n\t}\n\n\tprivate _colors!: RGBA8[];\n\tprivate _backgroundIsLight!: boolean;\n\n\tprivate readonly _onDidChange = new Emitter<void>();\n\tpublic readonly onDidChange: Event<void> = this._onDidChange.event;\n\n\tprivate constructor() {\n\t\tthis._updateColorMap();\n\t\tTokenizationRegistry.onDidChange(e => {\n\t\t\tif (e.changedColorMap) {\n\t\t\t\tthis._updateColorMap();\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _updateColorMap(): void {\n\t\tconst colorMap = TokenizationRegistry.getColorMap();\n\t\tif (!colorMap) {\n\t\t\tthis._colors = [RGBA8.Empty];\n\t\t\tthis._backgroundIsLight = true;\n\t\t\treturn;\n\t\t}\n\t\tthis._colors = [RGBA8.Empty];\n\t\tfor (let colorId = 1; colorId < colorMap.length; colorId++) {\n\t\t\tconst source = colorMap[colorId].rgba;\n\t\t\t// Use a VM friendly data-type\n\t\t\tthis._colors[colorId] = new RGBA8(source.r, source.g, source.b, Math.round(source.a * 255));\n\t\t}\n\t\tlet backgroundLuminosity = colorMap[ColorId.DefaultBackground].getRelativeLuminance();\n\t\tthis._backgroundIsLight = backgroundLuminosity >= 0.5;\n\t\tthis._onDidChange.fire(undefined);\n\t}\n\n\tpublic getColor(colorId: ColorId): RGBA8 {\n\t\tif (colorId < 1 || colorId >= this._colors.length) {\n\t\t\t// background color (basically invisible)\n\t\t\tcolorId = ColorId.DefaultBackground;\n\t\t}\n\t\treturn this._colors[colorId];\n\t}\n\n\tpublic backgroundIsLight(): boolean {\n\t\treturn this._backgroundIsLight;\n\t}\n}\n"]}