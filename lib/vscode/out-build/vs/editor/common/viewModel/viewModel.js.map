{"version":3,"file":"viewModel.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/common/viewModel/viewModel.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IScrollPosition, Scrollable } from 'vs/base/common/scrollable';\nimport * as strings from 'vs/base/common/strings';\nimport { IViewLineTokens } from 'vs/editor/common/core/lineTokens';\nimport { IPosition, Position } from 'vs/editor/common/core/position';\nimport { IRange, Range } from 'vs/editor/common/core/range';\nimport { INewScrollPosition, ScrollType } from 'vs/editor/common/editorCommon';\nimport { EndOfLinePreference, IActiveIndentGuideInfo, IModelDecorationOptions, TextModelResolvedOptions, ITextModel } from 'vs/editor/common/model';\nimport { VerticalRevealType } from 'vs/editor/common/view/viewEvents';\nimport { IPartialViewLinesViewportData } from 'vs/editor/common/viewLayout/viewLinesViewportData';\nimport { IEditorWhitespace, IWhitespaceChangeAccessor } from 'vs/editor/common/viewLayout/linesLayout';\nimport { EditorTheme } from 'vs/editor/common/view/viewContext';\nimport { ICursorSimpleModel, PartialCursorState, CursorState, IColumnSelectData, EditOperationType, CursorConfiguration } from 'vs/editor/common/controller/cursorCommon';\nimport { CursorChangeReason } from 'vs/editor/common/controller/cursorEvents';\nimport { ViewEventHandler } from 'vs/editor/common/viewModel/viewEventHandler';\n\nexport interface IViewWhitespaceViewportData {\n\treadonly id: string;\n\treadonly afterLineNumber: number;\n\treadonly verticalOffset: number;\n\treadonly height: number;\n}\n\nexport class Viewport {\n\treadonly _viewportBrand: void;\n\n\treadonly top: number;\n\treadonly left: number;\n\treadonly width: number;\n\treadonly height: number;\n\n\tconstructor(top: number, left: number, width: number, height: number) {\n\t\tthis.top = top | 0;\n\t\tthis.left = left | 0;\n\t\tthis.width = width | 0;\n\t\tthis.height = height | 0;\n\t}\n}\n\nexport interface IViewLayout {\n\n\tgetScrollable(): Scrollable;\n\n\tgetScrollWidth(): number;\n\tgetScrollHeight(): number;\n\n\tgetCurrentScrollLeft(): number;\n\tgetCurrentScrollTop(): number;\n\tgetCurrentViewport(): Viewport;\n\n\tgetFutureViewport(): Viewport;\n\n\tvalidateScrollPosition(scrollPosition: INewScrollPosition): IScrollPosition;\n\n\tgetLinesViewportData(): IPartialViewLinesViewportData;\n\tgetLinesViewportDataAtScrollTop(scrollTop: number): IPartialViewLinesViewportData;\n\tgetWhitespaces(): IEditorWhitespace[];\n\n\tisAfterLines(verticalOffset: number): boolean;\n\tisInTopPadding(verticalOffset: number): boolean;\n\tisInBottomPadding(verticalOffset: number): boolean;\n\tgetLineNumberAtVerticalOffset(verticalOffset: number): number;\n\tgetVerticalOffsetForLineNumber(lineNumber: number): number;\n\tgetWhitespaceAtVerticalOffset(verticalOffset: number): IViewWhitespaceViewportData | null;\n\n\t/**\n\t * Get the layout information for whitespaces currently in the viewport\n\t */\n\tgetWhitespaceViewportData(): IViewWhitespaceViewportData[];\n}\n\nexport interface ICoordinatesConverter {\n\t// View -> Model conversion and related methods\n\tconvertViewPositionToModelPosition(viewPosition: Position): Position;\n\tconvertViewRangeToModelRange(viewRange: Range): Range;\n\tvalidateViewPosition(viewPosition: Position, expectedModelPosition: Position): Position;\n\tvalidateViewRange(viewRange: Range, expectedModelRange: Range): Range;\n\n\t// Model -> View conversion and related methods\n\tconvertModelPositionToViewPosition(modelPosition: Position): Position;\n\tconvertModelRangeToViewRange(modelRange: Range): Range;\n\tmodelPositionIsVisible(modelPosition: Position): boolean;\n\tgetModelLineViewLineCount(modelLineNumber: number): number;\n}\n\nexport class OutputPosition {\n\toutputLineIndex: number;\n\toutputOffset: number;\n\n\tconstructor(outputLineIndex: number, outputOffset: number) {\n\t\tthis.outputLineIndex = outputLineIndex;\n\t\tthis.outputOffset = outputOffset;\n\t}\n}\n\nexport class LineBreakData {\n\tconstructor(\n\t\tpublic breakOffsets: number[],\n\t\tpublic breakOffsetsVisibleColumn: number[],\n\t\tpublic wrappedTextIndentLength: number\n\t) { }\n\n\tpublic static getInputOffsetOfOutputPosition(breakOffsets: number[], outputLineIndex: number, outputOffset: number): number {\n\t\tif (outputLineIndex === 0) {\n\t\t\treturn outputOffset;\n\t\t} else {\n\t\t\treturn breakOffsets[outputLineIndex - 1] + outputOffset;\n\t\t}\n\t}\n\n\tpublic static getOutputPositionOfInputOffset(breakOffsets: number[], inputOffset: number): OutputPosition {\n\t\tlet low = 0;\n\t\tlet high = breakOffsets.length - 1;\n\t\tlet mid = 0;\n\t\tlet midStart = 0;\n\n\t\twhile (low <= high) {\n\t\t\tmid = low + ((high - low) / 2) | 0;\n\n\t\t\tconst midStop = breakOffsets[mid];\n\t\t\tmidStart = mid > 0 ? breakOffsets[mid - 1] : 0;\n\n\t\t\tif (inputOffset < midStart) {\n\t\t\t\thigh = mid - 1;\n\t\t\t} else if (inputOffset >= midStop) {\n\t\t\t\tlow = mid + 1;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn new OutputPosition(mid, inputOffset - midStart);\n\t}\n}\n\nexport interface ILineBreaksComputer {\n\t/**\n\t * Pass in `previousLineBreakData` if the only difference is in breaking columns!!!\n\t */\n\taddRequest(lineText: string, previousLineBreakData: LineBreakData | null): void;\n\tfinalize(): (LineBreakData | null)[];\n}\n\nexport interface IViewModel extends ICursorSimpleModel {\n\n\treadonly model: ITextModel;\n\n\treadonly coordinatesConverter: ICoordinatesConverter;\n\n\treadonly viewLayout: IViewLayout;\n\n\treadonly cursorConfig: CursorConfiguration;\n\n\taddViewEventHandler(eventHandler: ViewEventHandler): void;\n\tremoveViewEventHandler(eventHandler: ViewEventHandler): void;\n\n\t/**\n\t * Gives a hint that a lot of requests are about to come in for these line numbers.\n\t */\n\tsetViewport(startLineNumber: number, endLineNumber: number, centeredLineNumber: number): void;\n\ttokenizeViewport(): void;\n\tsetHasFocus(hasFocus: boolean): void;\n\tonCompositionStart(): void;\n\tonCompositionEnd(): void;\n\tonDidColorThemeChange(): void;\n\n\tgetDecorationsInViewport(visibleRange: Range): ViewModelDecoration[];\n\tgetViewLineRenderingData(visibleRange: Range, lineNumber: number): ViewLineRenderingData;\n\tgetViewLineData(lineNumber: number): ViewLineData;\n\tgetMinimapLinesRenderingData(startLineNumber: number, endLineNumber: number, needed: boolean[]): MinimapLinesRenderingData;\n\tgetCompletelyVisibleViewRange(): Range;\n\tgetCompletelyVisibleViewRangeAtScrollTop(scrollTop: number): Range;\n\n\tgetTextModelOptions(): TextModelResolvedOptions;\n\tgetLineCount(): number;\n\tgetLineContent(lineNumber: number): string;\n\tgetLineLength(lineNumber: number): number;\n\tgetActiveIndentGuide(lineNumber: number, minLineNumber: number, maxLineNumber: number): IActiveIndentGuideInfo;\n\tgetLinesIndentGuides(startLineNumber: number, endLineNumber: number): number[];\n\tgetLineMinColumn(lineNumber: number): number;\n\tgetLineMaxColumn(lineNumber: number): number;\n\tgetLineFirstNonWhitespaceColumn(lineNumber: number): number;\n\tgetLineLastNonWhitespaceColumn(lineNumber: number): number;\n\tgetAllOverviewRulerDecorations(theme: EditorTheme): IOverviewRulerDecorations;\n\tinvalidateOverviewRulerColorCache(): void;\n\tinvalidateMinimapColorCache(): void;\n\tgetValueInRange(range: Range, eol: EndOfLinePreference): string;\n\n\tgetModelLineMaxColumn(modelLineNumber: number): number;\n\tvalidateModelPosition(modelPosition: IPosition): Position;\n\tvalidateModelRange(range: IRange): Range;\n\n\tdeduceModelPositionRelativeToViewPosition(viewAnchorPosition: Position, deltaOffset: number, lineFeedCnt: number): Position;\n\tgetEOL(): string;\n\tgetPlainTextToCopy(modelRanges: Range[], emptySelectionClipboard: boolean, forceCRLF: boolean): string | string[];\n\tgetRichTextToCopy(modelRanges: Range[], emptySelectionClipboard: boolean): { html: string, mode: string } | null;\n\n\t//#region model\n\n\tpushStackElement(): void;\n\n\t//#endregion\n\n\tcreateLineBreaksComputer(): ILineBreaksComputer;\n\n\t//#region cursor\n\tgetPrimaryCursorState(): CursorState;\n\tgetLastAddedCursorIndex(): number;\n\tgetCursorStates(): CursorState[];\n\tsetCursorStates(source: string | null | undefined, reason: CursorChangeReason, states: PartialCursorState[] | null): void;\n\tgetCursorColumnSelectData(): IColumnSelectData;\n\tgetCursorAutoClosedCharacters(): Range[];\n\tsetCursorColumnSelectData(columnSelectData: IColumnSelectData): void;\n\tgetPrevEditOperationType(): EditOperationType;\n\tsetPrevEditOperationType(type: EditOperationType): void;\n\trevealPrimaryCursor(source: string | null | undefined, revealHorizontal: boolean): void;\n\trevealTopMostCursor(source: string | null | undefined): void;\n\trevealBottomMostCursor(source: string | null | undefined): void;\n\trevealRange(source: string | null | undefined, revealHorizontal: boolean, viewRange: Range, verticalType: VerticalRevealType, scrollType: ScrollType): void;\n\t//#endregion\n\n\t//#region viewLayout\n\tgetVerticalOffsetForLineNumber(viewLineNumber: number): number;\n\tgetScrollTop(): number;\n\tsetScrollTop(newScrollTop: number, scrollType: ScrollType): void;\n\tsetScrollPosition(position: INewScrollPosition, type: ScrollType): void;\n\tdeltaScrollNow(deltaScrollLeft: number, deltaScrollTop: number): void;\n\tchangeWhitespace(callback: (accessor: IWhitespaceChangeAccessor) => void): void;\n\tsetMaxLineWidth(maxLineWidth: number): void;\n\t//#endregion\n}\n\nexport class MinimapLinesRenderingData {\n\tpublic readonly tabSize: number;\n\tpublic readonly data: Array<ViewLineData | null>;\n\n\tconstructor(\n\t\ttabSize: number,\n\t\tdata: Array<ViewLineData | null>\n\t) {\n\t\tthis.tabSize = tabSize;\n\t\tthis.data = data;\n\t}\n}\n\nexport class ViewLineData {\n\t_viewLineDataBrand: void;\n\n\t/**\n\t * The content at this view line.\n\t */\n\tpublic readonly content: string;\n\t/**\n\t * Does this line continue with a wrapped line?\n\t */\n\tpublic readonly continuesWithWrappedLine: boolean;\n\t/**\n\t * The minimum allowed column at this view line.\n\t */\n\tpublic readonly minColumn: number;\n\t/**\n\t * The maximum allowed column at this view line.\n\t */\n\tpublic readonly maxColumn: number;\n\t/**\n\t * The visible column at the start of the line (after the fauxIndent).\n\t */\n\tpublic readonly startVisibleColumn: number;\n\t/**\n\t * The tokens at this view line.\n\t */\n\tpublic readonly tokens: IViewLineTokens;\n\n\tconstructor(\n\t\tcontent: string,\n\t\tcontinuesWithWrappedLine: boolean,\n\t\tminColumn: number,\n\t\tmaxColumn: number,\n\t\tstartVisibleColumn: number,\n\t\ttokens: IViewLineTokens\n\t) {\n\t\tthis.content = content;\n\t\tthis.continuesWithWrappedLine = continuesWithWrappedLine;\n\t\tthis.minColumn = minColumn;\n\t\tthis.maxColumn = maxColumn;\n\t\tthis.startVisibleColumn = startVisibleColumn;\n\t\tthis.tokens = tokens;\n\t}\n}\n\nexport class ViewLineRenderingData {\n\t/**\n\t * The minimum allowed column at this view line.\n\t */\n\tpublic readonly minColumn: number;\n\t/**\n\t * The maximum allowed column at this view line.\n\t */\n\tpublic readonly maxColumn: number;\n\t/**\n\t * The content at this view line.\n\t */\n\tpublic readonly content: string;\n\t/**\n\t * Does this line continue with a wrapped line?\n\t */\n\tpublic readonly continuesWithWrappedLine: boolean;\n\t/**\n\t * Describes if `content` contains RTL characters.\n\t */\n\tpublic readonly containsRTL: boolean;\n\t/**\n\t * Describes if `content` contains non basic ASCII chars.\n\t */\n\tpublic readonly isBasicASCII: boolean;\n\t/**\n\t * The tokens at this view line.\n\t */\n\tpublic readonly tokens: IViewLineTokens;\n\t/**\n\t * Inline decorations at this view line.\n\t */\n\tpublic readonly inlineDecorations: InlineDecoration[];\n\t/**\n\t * The tab size for this view model.\n\t */\n\tpublic readonly tabSize: number;\n\t/**\n\t * The visible column at the start of the line (after the fauxIndent)\n\t */\n\tpublic readonly startVisibleColumn: number;\n\n\tconstructor(\n\t\tminColumn: number,\n\t\tmaxColumn: number,\n\t\tcontent: string,\n\t\tcontinuesWithWrappedLine: boolean,\n\t\tmightContainRTL: boolean,\n\t\tmightContainNonBasicASCII: boolean,\n\t\ttokens: IViewLineTokens,\n\t\tinlineDecorations: InlineDecoration[],\n\t\ttabSize: number,\n\t\tstartVisibleColumn: number\n\t) {\n\t\tthis.minColumn = minColumn;\n\t\tthis.maxColumn = maxColumn;\n\t\tthis.content = content;\n\t\tthis.continuesWithWrappedLine = continuesWithWrappedLine;\n\n\t\tthis.isBasicASCII = ViewLineRenderingData.isBasicASCII(content, mightContainNonBasicASCII);\n\t\tthis.containsRTL = ViewLineRenderingData.containsRTL(content, this.isBasicASCII, mightContainRTL);\n\n\t\tthis.tokens = tokens;\n\t\tthis.inlineDecorations = inlineDecorations;\n\t\tthis.tabSize = tabSize;\n\t\tthis.startVisibleColumn = startVisibleColumn;\n\t}\n\n\tpublic static isBasicASCII(lineContent: string, mightContainNonBasicASCII: boolean): boolean {\n\t\tif (mightContainNonBasicASCII) {\n\t\t\treturn strings.isBasicASCII(lineContent);\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic static containsRTL(lineContent: string, isBasicASCII: boolean, mightContainRTL: boolean): boolean {\n\t\tif (!isBasicASCII && mightContainRTL) {\n\t\t\treturn strings.containsRTL(lineContent);\n\t\t}\n\t\treturn false;\n\t}\n}\n\nexport const enum InlineDecorationType {\n\tRegular = 0,\n\tBefore = 1,\n\tAfter = 2,\n\tRegularAffectingLetterSpacing = 3\n}\n\nexport class InlineDecoration {\n\tconstructor(\n\t\tpublic readonly range: Range,\n\t\tpublic readonly inlineClassName: string,\n\t\tpublic readonly type: InlineDecorationType\n\t) {\n\t}\n}\n\nexport class ViewModelDecoration {\n\t_viewModelDecorationBrand: void;\n\n\tpublic readonly range: Range;\n\tpublic readonly options: IModelDecorationOptions;\n\n\tconstructor(range: Range, options: IModelDecorationOptions) {\n\t\tthis.range = range;\n\t\tthis.options = options;\n\t}\n}\n\n/**\n * Decorations are encoded in a number array using the following scheme:\n *  - 3*i = lane\n *  - 3*i+1 = startLineNumber\n *  - 3*i+2 = endLineNumber\n */\nexport interface IOverviewRulerDecorations {\n\t[color: string]: number[];\n}\n"]}