{"version":3,"file":"splitLinesCollection.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/common/viewModel/splitLinesCollection.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as arrays from 'vs/base/common/arrays';\nimport { WrappingIndent } from 'vs/editor/common/config/editorOptions';\nimport { LineTokens } from 'vs/editor/common/core/lineTokens';\nimport { Position } from 'vs/editor/common/core/position';\nimport { IRange, Range } from 'vs/editor/common/core/range';\nimport { EndOfLinePreference, IActiveIndentGuideInfo, IModelDecoration, IModelDeltaDecoration, ITextModel } from 'vs/editor/common/model';\nimport { ModelDecorationOptions, ModelDecorationOverviewRulerOptions } from 'vs/editor/common/model/textModel';\nimport * as viewEvents from 'vs/editor/common/view/viewEvents';\nimport { PrefixSumIndexOfResult } from 'vs/editor/common/viewModel/prefixSumComputer';\nimport { ICoordinatesConverter, ILineBreaksComputer, IOverviewRulerDecorations, LineBreakData, ViewLineData } from 'vs/editor/common/viewModel/viewModel';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { FontInfo } from 'vs/editor/common/config/fontInfo';\nimport { EditorTheme } from 'vs/editor/common/view/viewContext';\n\nexport interface ILineBreaksComputerFactory {\n\tcreateLineBreaksComputer(fontInfo: FontInfo, tabSize: number, wrappingColumn: number, wrappingIndent: WrappingIndent): ILineBreaksComputer;\n}\n\nexport interface ISimpleModel {\n\tgetLineTokens(lineNumber: number): LineTokens;\n\tgetLineContent(lineNumber: number): string;\n\tgetLineLength(lineNumber: number): number;\n\tgetLineMinColumn(lineNumber: number): number;\n\tgetLineMaxColumn(lineNumber: number): number;\n\tgetValueInRange(range: IRange, eol?: EndOfLinePreference): string;\n}\n\nexport interface ISplitLine {\n\tisVisible(): boolean;\n\tsetVisible(isVisible: boolean): ISplitLine;\n\n\tgetLineBreakData(): LineBreakData | null;\n\tgetViewLineCount(): number;\n\tgetViewLineContent(model: ISimpleModel, modelLineNumber: number, outputLineIndex: number): string;\n\tgetViewLineLength(model: ISimpleModel, modelLineNumber: number, outputLineIndex: number): number;\n\tgetViewLineMinColumn(model: ISimpleModel, modelLineNumber: number, outputLineIndex: number): number;\n\tgetViewLineMaxColumn(model: ISimpleModel, modelLineNumber: number, outputLineIndex: number): number;\n\tgetViewLineData(model: ISimpleModel, modelLineNumber: number, outputLineIndex: number): ViewLineData;\n\tgetViewLinesData(model: ISimpleModel, modelLineNumber: number, fromOuputLineIndex: number, toOutputLineIndex: number, globalStartIndex: number, needed: boolean[], result: Array<ViewLineData | null>): void;\n\n\tgetModelColumnOfViewPosition(outputLineIndex: number, outputColumn: number): number;\n\tgetViewPositionOfModelPosition(deltaLineNumber: number, inputColumn: number): Position;\n\tgetViewLineNumberOfModelPosition(deltaLineNumber: number, inputColumn: number): number;\n}\n\nexport interface IViewModelLinesCollection extends IDisposable {\n\tcreateCoordinatesConverter(): ICoordinatesConverter;\n\n\tsetWrappingSettings(fontInfo: FontInfo, wrappingStrategy: 'simple' | 'advanced', wrappingColumn: number, wrappingIndent: WrappingIndent): boolean;\n\tsetTabSize(newTabSize: number): boolean;\n\tgetHiddenAreas(): Range[];\n\tsetHiddenAreas(_ranges: Range[]): boolean;\n\n\tcreateLineBreaksComputer(): ILineBreaksComputer;\n\tonModelFlushed(): void;\n\tonModelLinesDeleted(versionId: number, fromLineNumber: number, toLineNumber: number): viewEvents.ViewLinesDeletedEvent | null;\n\tonModelLinesInserted(versionId: number, fromLineNumber: number, toLineNumber: number, lineBreaks: (LineBreakData | null)[]): viewEvents.ViewLinesInsertedEvent | null;\n\tonModelLineChanged(versionId: number, lineNumber: number, lineBreakData: LineBreakData | null): [boolean, viewEvents.ViewLinesChangedEvent | null, viewEvents.ViewLinesInsertedEvent | null, viewEvents.ViewLinesDeletedEvent | null];\n\tacceptVersionId(versionId: number): void;\n\n\tgetViewLineCount(): number;\n\tgetActiveIndentGuide(viewLineNumber: number, minLineNumber: number, maxLineNumber: number): IActiveIndentGuideInfo;\n\tgetViewLinesIndentGuides(viewStartLineNumber: number, viewEndLineNumber: number): number[];\n\tgetViewLineContent(viewLineNumber: number): string;\n\tgetViewLineLength(viewLineNumber: number): number;\n\tgetViewLineMinColumn(viewLineNumber: number): number;\n\tgetViewLineMaxColumn(viewLineNumber: number): number;\n\tgetViewLineData(viewLineNumber: number): ViewLineData;\n\tgetViewLinesData(viewStartLineNumber: number, viewEndLineNumber: number, needed: boolean[]): Array<ViewLineData | null>;\n\n\tgetAllOverviewRulerDecorations(ownerId: number, filterOutValidation: boolean, theme: EditorTheme): IOverviewRulerDecorations;\n\tgetDecorationsInRange(range: Range, ownerId: number, filterOutValidation: boolean): IModelDecoration[];\n}\n\nexport class CoordinatesConverter implements ICoordinatesConverter {\n\n\tprivate readonly _lines: SplitLinesCollection;\n\n\tconstructor(lines: SplitLinesCollection) {\n\t\tthis._lines = lines;\n\t}\n\n\t// View -> Model conversion and related methods\n\n\tpublic convertViewPositionToModelPosition(viewPosition: Position): Position {\n\t\treturn this._lines.convertViewPositionToModelPosition(viewPosition.lineNumber, viewPosition.column);\n\t}\n\n\tpublic convertViewRangeToModelRange(viewRange: Range): Range {\n\t\treturn this._lines.convertViewRangeToModelRange(viewRange);\n\t}\n\n\tpublic validateViewPosition(viewPosition: Position, expectedModelPosition: Position): Position {\n\t\treturn this._lines.validateViewPosition(viewPosition.lineNumber, viewPosition.column, expectedModelPosition);\n\t}\n\n\tpublic validateViewRange(viewRange: Range, expectedModelRange: Range): Range {\n\t\treturn this._lines.validateViewRange(viewRange, expectedModelRange);\n\t}\n\n\t// Model -> View conversion and related methods\n\n\tpublic convertModelPositionToViewPosition(modelPosition: Position): Position {\n\t\treturn this._lines.convertModelPositionToViewPosition(modelPosition.lineNumber, modelPosition.column);\n\t}\n\n\tpublic convertModelRangeToViewRange(modelRange: Range): Range {\n\t\treturn this._lines.convertModelRangeToViewRange(modelRange);\n\t}\n\n\tpublic modelPositionIsVisible(modelPosition: Position): boolean {\n\t\treturn this._lines.modelPositionIsVisible(modelPosition.lineNumber, modelPosition.column);\n\t}\n\n\tpublic getModelLineViewLineCount(modelLineNumber: number): number {\n\t\treturn this._lines.getModelLineViewLineCount(modelLineNumber);\n\t}\n}\n\nconst enum IndentGuideRepeatOption {\n\tBlockNone = 0,\n\tBlockSubsequent = 1,\n\tBlockAll = 2\n}\n\nclass LineNumberMapper {\n\n\tprivate _counts: number[];\n\tprivate _isValid: boolean;\n\tprivate _validEndIndex: number;\n\n\tprivate _modelToView: number[];\n\tprivate _viewToModel: number[];\n\n\tconstructor(viewLineCounts: number[]) {\n\t\tthis._counts = viewLineCounts;\n\t\tthis._isValid = false;\n\t\tthis._validEndIndex = -1;\n\t\tthis._modelToView = [];\n\t\tthis._viewToModel = [];\n\t}\n\n\tprivate _invalidate(index: number): void {\n\t\tthis._isValid = false;\n\t\tthis._validEndIndex = Math.min(this._validEndIndex, index - 1);\n\t}\n\n\tprivate _ensureValid(): void {\n\t\tif (this._isValid) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (let i = this._validEndIndex + 1, len = this._counts.length; i < len; i++) {\n\t\t\tconst viewLineCount = this._counts[i];\n\t\t\tconst viewLinesAbove = (i > 0 ? this._modelToView[i - 1] : 0);\n\n\t\t\tthis._modelToView[i] = viewLinesAbove + viewLineCount;\n\t\t\tfor (let j = 0; j < viewLineCount; j++) {\n\t\t\t\tthis._viewToModel[viewLinesAbove + j] = i;\n\t\t\t}\n\t\t}\n\n\t\t// trim things\n\t\tthis._modelToView.length = this._counts.length;\n\t\tthis._viewToModel.length = this._modelToView[this._modelToView.length - 1];\n\n\t\t// mark as valid\n\t\tthis._isValid = true;\n\t\tthis._validEndIndex = this._counts.length - 1;\n\t}\n\n\tpublic changeValue(index: number, value: number): void {\n\t\tif (this._counts[index] === value) {\n\t\t\t// no change\n\t\t\treturn;\n\t\t}\n\t\tthis._counts[index] = value;\n\t\tthis._invalidate(index);\n\t}\n\n\tpublic removeValues(start: number, deleteCount: number): void {\n\t\tthis._counts.splice(start, deleteCount);\n\t\tthis._invalidate(start);\n\t}\n\n\tpublic insertValues(insertIndex: number, insertArr: number[]): void {\n\t\tthis._counts = arrays.arrayInsert(this._counts, insertIndex, insertArr);\n\t\tthis._invalidate(insertIndex);\n\t}\n\n\tpublic getTotalValue(): number {\n\t\tthis._ensureValid();\n\t\treturn this._viewToModel.length;\n\t}\n\n\tpublic getAccumulatedValue(index: number): number {\n\t\tthis._ensureValid();\n\t\treturn this._modelToView[index];\n\t}\n\n\tpublic getIndexOf(accumulatedValue: number): PrefixSumIndexOfResult {\n\t\tthis._ensureValid();\n\t\tconst modelLineIndex = this._viewToModel[accumulatedValue];\n\t\tconst viewLinesAbove = (modelLineIndex > 0 ? this._modelToView[modelLineIndex - 1] : 0);\n\t\treturn new PrefixSumIndexOfResult(modelLineIndex, accumulatedValue - viewLinesAbove);\n\t}\n}\n\nexport class SplitLinesCollection implements IViewModelLinesCollection {\n\n\tprivate readonly model: ITextModel;\n\tprivate _validModelVersionId: number;\n\n\tprivate readonly _domLineBreaksComputerFactory: ILineBreaksComputerFactory;\n\tprivate readonly _monospaceLineBreaksComputerFactory: ILineBreaksComputerFactory;\n\n\tprivate fontInfo: FontInfo;\n\tprivate tabSize: number;\n\tprivate wrappingColumn: number;\n\tprivate wrappingIndent: WrappingIndent;\n\tprivate wrappingStrategy: 'simple' | 'advanced';\n\tprivate lines!: ISplitLine[];\n\n\tprivate prefixSumComputer!: LineNumberMapper;\n\n\tprivate hiddenAreasIds!: string[];\n\n\tconstructor(\n\t\tmodel: ITextModel,\n\t\tdomLineBreaksComputerFactory: ILineBreaksComputerFactory,\n\t\tmonospaceLineBreaksComputerFactory: ILineBreaksComputerFactory,\n\t\tfontInfo: FontInfo,\n\t\ttabSize: number,\n\t\twrappingStrategy: 'simple' | 'advanced',\n\t\twrappingColumn: number,\n\t\twrappingIndent: WrappingIndent,\n\t) {\n\t\tthis.model = model;\n\t\tthis._validModelVersionId = -1;\n\t\tthis._domLineBreaksComputerFactory = domLineBreaksComputerFactory;\n\t\tthis._monospaceLineBreaksComputerFactory = monospaceLineBreaksComputerFactory;\n\t\tthis.fontInfo = fontInfo;\n\t\tthis.tabSize = tabSize;\n\t\tthis.wrappingStrategy = wrappingStrategy;\n\t\tthis.wrappingColumn = wrappingColumn;\n\t\tthis.wrappingIndent = wrappingIndent;\n\n\t\tthis._constructLines(/*resetHiddenAreas*/true, null);\n\t}\n\n\tpublic dispose(): void {\n\t\tthis.hiddenAreasIds = this.model.deltaDecorations(this.hiddenAreasIds, []);\n\t}\n\n\tpublic createCoordinatesConverter(): ICoordinatesConverter {\n\t\treturn new CoordinatesConverter(this);\n\t}\n\n\tprivate _constructLines(resetHiddenAreas: boolean, previousLineBreaks: ((LineBreakData | null)[]) | null): void {\n\t\tthis.lines = [];\n\n\t\tif (resetHiddenAreas) {\n\t\t\tthis.hiddenAreasIds = [];\n\t\t}\n\n\t\tlet linesContent = this.model.getLinesContent();\n\t\tconst lineCount = linesContent.length;\n\t\tconst lineBreaksComputer = this.createLineBreaksComputer();\n\t\tfor (let i = 0; i < lineCount; i++) {\n\t\t\tlineBreaksComputer.addRequest(linesContent[i], previousLineBreaks ? previousLineBreaks[i] : null);\n\t\t}\n\t\tconst linesBreaks = lineBreaksComputer.finalize();\n\n\t\tlet values: number[] = [];\n\n\t\tlet hiddenAreas = this.hiddenAreasIds.map((areaId) => this.model.getDecorationRange(areaId)!).sort(Range.compareRangesUsingStarts);\n\t\tlet hiddenAreaStart = 1, hiddenAreaEnd = 0;\n\t\tlet hiddenAreaIdx = -1;\n\t\tlet nextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : lineCount + 2;\n\n\t\tfor (let i = 0; i < lineCount; i++) {\n\t\t\tlet lineNumber = i + 1;\n\n\t\t\tif (lineNumber === nextLineNumberToUpdateHiddenArea) {\n\t\t\t\thiddenAreaIdx++;\n\t\t\t\thiddenAreaStart = hiddenAreas[hiddenAreaIdx]!.startLineNumber;\n\t\t\t\thiddenAreaEnd = hiddenAreas[hiddenAreaIdx]!.endLineNumber;\n\t\t\t\tnextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : lineCount + 2;\n\t\t\t}\n\n\t\t\tlet isInHiddenArea = (lineNumber >= hiddenAreaStart && lineNumber <= hiddenAreaEnd);\n\t\t\tlet line = createSplitLine(linesBreaks[i], !isInHiddenArea);\n\t\t\tvalues[i] = line.getViewLineCount();\n\t\t\tthis.lines[i] = line;\n\t\t}\n\n\t\tthis._validModelVersionId = this.model.getVersionId();\n\n\t\tthis.prefixSumComputer = new LineNumberMapper(values);\n\t}\n\n\tpublic getHiddenAreas(): Range[] {\n\t\treturn this.hiddenAreasIds.map((decId) => {\n\t\t\treturn this.model.getDecorationRange(decId)!;\n\t\t});\n\t}\n\n\tprivate _reduceRanges(_ranges: Range[]): Range[] {\n\t\tif (_ranges.length === 0) {\n\t\t\treturn [];\n\t\t}\n\t\tlet ranges = _ranges.map(r => this.model.validateRange(r)).sort(Range.compareRangesUsingStarts);\n\n\t\tlet result: Range[] = [];\n\t\tlet currentRangeStart = ranges[0].startLineNumber;\n\t\tlet currentRangeEnd = ranges[0].endLineNumber;\n\n\t\tfor (let i = 1, len = ranges.length; i < len; i++) {\n\t\t\tlet range = ranges[i];\n\n\t\t\tif (range.startLineNumber > currentRangeEnd + 1) {\n\t\t\t\tresult.push(new Range(currentRangeStart, 1, currentRangeEnd, 1));\n\t\t\t\tcurrentRangeStart = range.startLineNumber;\n\t\t\t\tcurrentRangeEnd = range.endLineNumber;\n\t\t\t} else if (range.endLineNumber > currentRangeEnd) {\n\t\t\t\tcurrentRangeEnd = range.endLineNumber;\n\t\t\t}\n\t\t}\n\t\tresult.push(new Range(currentRangeStart, 1, currentRangeEnd, 1));\n\t\treturn result;\n\t}\n\n\tpublic setHiddenAreas(_ranges: Range[]): boolean {\n\n\t\tlet newRanges = this._reduceRanges(_ranges);\n\n\t\t// BEGIN TODO@Martin: Please stop calling this method on each model change!\n\t\tlet oldRanges = this.hiddenAreasIds.map((areaId) => this.model.getDecorationRange(areaId)!).sort(Range.compareRangesUsingStarts);\n\n\t\tif (newRanges.length === oldRanges.length) {\n\t\t\tlet hasDifference = false;\n\t\t\tfor (let i = 0; i < newRanges.length; i++) {\n\t\t\t\tif (!newRanges[i].equalsRange(oldRanges[i])) {\n\t\t\t\t\thasDifference = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!hasDifference) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t// END TODO@Martin: Please stop calling this method on each model change!\n\n\t\tlet newDecorations: IModelDeltaDecoration[] = [];\n\t\tfor (const newRange of newRanges) {\n\t\t\tnewDecorations.push({\n\t\t\t\trange: newRange,\n\t\t\t\toptions: ModelDecorationOptions.EMPTY\n\t\t\t});\n\t\t}\n\n\t\tthis.hiddenAreasIds = this.model.deltaDecorations(this.hiddenAreasIds, newDecorations);\n\n\t\tlet hiddenAreas = newRanges;\n\t\tlet hiddenAreaStart = 1, hiddenAreaEnd = 0;\n\t\tlet hiddenAreaIdx = -1;\n\t\tlet nextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : this.lines.length + 2;\n\n\t\tlet hasVisibleLine = false;\n\t\tfor (let i = 0; i < this.lines.length; i++) {\n\t\t\tlet lineNumber = i + 1;\n\n\t\t\tif (lineNumber === nextLineNumberToUpdateHiddenArea) {\n\t\t\t\thiddenAreaIdx++;\n\t\t\t\thiddenAreaStart = hiddenAreas[hiddenAreaIdx].startLineNumber;\n\t\t\t\thiddenAreaEnd = hiddenAreas[hiddenAreaIdx].endLineNumber;\n\t\t\t\tnextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : this.lines.length + 2;\n\t\t\t}\n\n\t\t\tlet lineChanged = false;\n\t\t\tif (lineNumber >= hiddenAreaStart && lineNumber <= hiddenAreaEnd) {\n\t\t\t\t// Line should be hidden\n\t\t\t\tif (this.lines[i].isVisible()) {\n\t\t\t\t\tthis.lines[i] = this.lines[i].setVisible(false);\n\t\t\t\t\tlineChanged = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\thasVisibleLine = true;\n\t\t\t\t// Line should be visible\n\t\t\t\tif (!this.lines[i].isVisible()) {\n\t\t\t\t\tthis.lines[i] = this.lines[i].setVisible(true);\n\t\t\t\t\tlineChanged = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (lineChanged) {\n\t\t\t\tlet newOutputLineCount = this.lines[i].getViewLineCount();\n\t\t\t\tthis.prefixSumComputer.changeValue(i, newOutputLineCount);\n\t\t\t}\n\t\t}\n\n\t\tif (!hasVisibleLine) {\n\t\t\t// Cannot have everything be hidden => reveal everything!\n\t\t\tthis.setHiddenAreas([]);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tpublic modelPositionIsVisible(modelLineNumber: number, _modelColumn: number): boolean {\n\t\tif (modelLineNumber < 1 || modelLineNumber > this.lines.length) {\n\t\t\t// invalid arguments\n\t\t\treturn false;\n\t\t}\n\t\treturn this.lines[modelLineNumber - 1].isVisible();\n\t}\n\n\tpublic getModelLineViewLineCount(modelLineNumber: number): number {\n\t\tif (modelLineNumber < 1 || modelLineNumber > this.lines.length) {\n\t\t\t// invalid arguments\n\t\t\treturn 1;\n\t\t}\n\t\treturn this.lines[modelLineNumber - 1].getViewLineCount();\n\t}\n\n\tpublic setTabSize(newTabSize: number): boolean {\n\t\tif (this.tabSize === newTabSize) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.tabSize = newTabSize;\n\n\t\tthis._constructLines(/*resetHiddenAreas*/false, null);\n\n\t\treturn true;\n\t}\n\n\tpublic setWrappingSettings(fontInfo: FontInfo, wrappingStrategy: 'simple' | 'advanced', wrappingColumn: number, wrappingIndent: WrappingIndent): boolean {\n\t\tconst equalFontInfo = this.fontInfo.equals(fontInfo);\n\t\tconst equalWrappingStrategy = (this.wrappingStrategy === wrappingStrategy);\n\t\tconst equalWrappingColumn = (this.wrappingColumn === wrappingColumn);\n\t\tconst equalWrappingIndent = (this.wrappingIndent === wrappingIndent);\n\t\tif (equalFontInfo && equalWrappingStrategy && equalWrappingColumn && equalWrappingIndent) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst onlyWrappingColumnChanged = (equalFontInfo && equalWrappingStrategy && !equalWrappingColumn && equalWrappingIndent);\n\n\t\tthis.fontInfo = fontInfo;\n\t\tthis.wrappingStrategy = wrappingStrategy;\n\t\tthis.wrappingColumn = wrappingColumn;\n\t\tthis.wrappingIndent = wrappingIndent;\n\n\t\tlet previousLineBreaks: ((LineBreakData | null)[]) | null = null;\n\t\tif (onlyWrappingColumnChanged) {\n\t\t\tpreviousLineBreaks = [];\n\t\t\tfor (let i = 0, len = this.lines.length; i < len; i++) {\n\t\t\t\tpreviousLineBreaks[i] = this.lines[i].getLineBreakData();\n\t\t\t}\n\t\t}\n\n\t\tthis._constructLines(/*resetHiddenAreas*/false, previousLineBreaks);\n\n\t\treturn true;\n\t}\n\n\tpublic createLineBreaksComputer(): ILineBreaksComputer {\n\t\tconst lineBreaksComputerFactory = (\n\t\t\tthis.wrappingStrategy === 'advanced'\n\t\t\t\t? this._domLineBreaksComputerFactory\n\t\t\t\t: this._monospaceLineBreaksComputerFactory\n\t\t);\n\t\treturn lineBreaksComputerFactory.createLineBreaksComputer(this.fontInfo, this.tabSize, this.wrappingColumn, this.wrappingIndent);\n\t}\n\n\tpublic onModelFlushed(): void {\n\t\tthis._constructLines(/*resetHiddenAreas*/true, null);\n\t}\n\n\tpublic onModelLinesDeleted(versionId: number, fromLineNumber: number, toLineNumber: number): viewEvents.ViewLinesDeletedEvent | null {\n\t\tif (versionId <= this._validModelVersionId) {\n\t\t\t// Here we check for versionId in case the lines were reconstructed in the meantime.\n\t\t\t// We don't want to apply stale change events on top of a newer read model state.\n\t\t\treturn null;\n\t\t}\n\n\t\tlet outputFromLineNumber = (fromLineNumber === 1 ? 1 : this.prefixSumComputer.getAccumulatedValue(fromLineNumber - 2) + 1);\n\t\tlet outputToLineNumber = this.prefixSumComputer.getAccumulatedValue(toLineNumber - 1);\n\n\t\tthis.lines.splice(fromLineNumber - 1, toLineNumber - fromLineNumber + 1);\n\t\tthis.prefixSumComputer.removeValues(fromLineNumber - 1, toLineNumber - fromLineNumber + 1);\n\n\t\treturn new viewEvents.ViewLinesDeletedEvent(outputFromLineNumber, outputToLineNumber);\n\t}\n\n\tpublic onModelLinesInserted(versionId: number, fromLineNumber: number, _toLineNumber: number, lineBreaks: (LineBreakData | null)[]): viewEvents.ViewLinesInsertedEvent | null {\n\t\tif (versionId <= this._validModelVersionId) {\n\t\t\t// Here we check for versionId in case the lines were reconstructed in the meantime.\n\t\t\t// We don't want to apply stale change events on top of a newer read model state.\n\t\t\treturn null;\n\t\t}\n\n\t\t// cannot use this.getHiddenAreas() because those decorations have already seen the effect of this model change\n\t\tconst isInHiddenArea = (fromLineNumber > 2 && !this.lines[fromLineNumber - 2].isVisible());\n\n\t\tlet outputFromLineNumber = (fromLineNumber === 1 ? 1 : this.prefixSumComputer.getAccumulatedValue(fromLineNumber - 2) + 1);\n\n\t\tlet totalOutputLineCount = 0;\n\t\tlet insertLines: ISplitLine[] = [];\n\t\tlet insertPrefixSumValues: number[] = [];\n\n\t\tfor (let i = 0, len = lineBreaks.length; i < len; i++) {\n\t\t\tlet line = createSplitLine(lineBreaks[i], !isInHiddenArea);\n\t\t\tinsertLines.push(line);\n\n\t\t\tlet outputLineCount = line.getViewLineCount();\n\t\t\ttotalOutputLineCount += outputLineCount;\n\t\t\tinsertPrefixSumValues[i] = outputLineCount;\n\t\t}\n\n\t\t// TODO@Alex: use arrays.arrayInsert\n\t\tthis.lines = this.lines.slice(0, fromLineNumber - 1).concat(insertLines).concat(this.lines.slice(fromLineNumber - 1));\n\n\t\tthis.prefixSumComputer.insertValues(fromLineNumber - 1, insertPrefixSumValues);\n\n\t\treturn new viewEvents.ViewLinesInsertedEvent(outputFromLineNumber, outputFromLineNumber + totalOutputLineCount - 1);\n\t}\n\n\tpublic onModelLineChanged(versionId: number, lineNumber: number, lineBreakData: LineBreakData | null): [boolean, viewEvents.ViewLinesChangedEvent | null, viewEvents.ViewLinesInsertedEvent | null, viewEvents.ViewLinesDeletedEvent | null] {\n\t\tif (versionId <= this._validModelVersionId) {\n\t\t\t// Here we check for versionId in case the lines were reconstructed in the meantime.\n\t\t\t// We don't want to apply stale change events on top of a newer read model state.\n\t\t\treturn [false, null, null, null];\n\t\t}\n\n\t\tlet lineIndex = lineNumber - 1;\n\n\t\tlet oldOutputLineCount = this.lines[lineIndex].getViewLineCount();\n\t\tlet isVisible = this.lines[lineIndex].isVisible();\n\t\tlet line = createSplitLine(lineBreakData, isVisible);\n\t\tthis.lines[lineIndex] = line;\n\t\tlet newOutputLineCount = this.lines[lineIndex].getViewLineCount();\n\n\t\tlet lineMappingChanged = false;\n\t\tlet changeFrom = 0;\n\t\tlet changeTo = -1;\n\t\tlet insertFrom = 0;\n\t\tlet insertTo = -1;\n\t\tlet deleteFrom = 0;\n\t\tlet deleteTo = -1;\n\n\t\tif (oldOutputLineCount > newOutputLineCount) {\n\t\t\tchangeFrom = (lineNumber === 1 ? 1 : this.prefixSumComputer.getAccumulatedValue(lineNumber - 2) + 1);\n\t\t\tchangeTo = changeFrom + newOutputLineCount - 1;\n\t\t\tdeleteFrom = changeTo + 1;\n\t\t\tdeleteTo = deleteFrom + (oldOutputLineCount - newOutputLineCount) - 1;\n\t\t\tlineMappingChanged = true;\n\t\t} else if (oldOutputLineCount < newOutputLineCount) {\n\t\t\tchangeFrom = (lineNumber === 1 ? 1 : this.prefixSumComputer.getAccumulatedValue(lineNumber - 2) + 1);\n\t\t\tchangeTo = changeFrom + oldOutputLineCount - 1;\n\t\t\tinsertFrom = changeTo + 1;\n\t\t\tinsertTo = insertFrom + (newOutputLineCount - oldOutputLineCount) - 1;\n\t\t\tlineMappingChanged = true;\n\t\t} else {\n\t\t\tchangeFrom = (lineNumber === 1 ? 1 : this.prefixSumComputer.getAccumulatedValue(lineNumber - 2) + 1);\n\t\t\tchangeTo = changeFrom + newOutputLineCount - 1;\n\t\t}\n\n\t\tthis.prefixSumComputer.changeValue(lineIndex, newOutputLineCount);\n\n\t\tconst viewLinesChangedEvent = (changeFrom <= changeTo ? new viewEvents.ViewLinesChangedEvent(changeFrom, changeTo) : null);\n\t\tconst viewLinesInsertedEvent = (insertFrom <= insertTo ? new viewEvents.ViewLinesInsertedEvent(insertFrom, insertTo) : null);\n\t\tconst viewLinesDeletedEvent = (deleteFrom <= deleteTo ? new viewEvents.ViewLinesDeletedEvent(deleteFrom, deleteTo) : null);\n\n\t\treturn [lineMappingChanged, viewLinesChangedEvent, viewLinesInsertedEvent, viewLinesDeletedEvent];\n\t}\n\n\tpublic acceptVersionId(versionId: number): void {\n\t\tthis._validModelVersionId = versionId;\n\t\tif (this.lines.length === 1 && !this.lines[0].isVisible()) {\n\t\t\t// At least one line must be visible => reset hidden areas\n\t\t\tthis.setHiddenAreas([]);\n\t\t}\n\t}\n\n\tpublic getViewLineCount(): number {\n\t\treturn this.prefixSumComputer.getTotalValue();\n\t}\n\n\tprivate _toValidViewLineNumber(viewLineNumber: number): number {\n\t\tif (viewLineNumber < 1) {\n\t\t\treturn 1;\n\t\t}\n\t\tconst viewLineCount = this.getViewLineCount();\n\t\tif (viewLineNumber > viewLineCount) {\n\t\t\treturn viewLineCount;\n\t\t}\n\t\treturn viewLineNumber | 0;\n\t}\n\n\tpublic getActiveIndentGuide(viewLineNumber: number, minLineNumber: number, maxLineNumber: number): IActiveIndentGuideInfo {\n\t\tviewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n\t\tminLineNumber = this._toValidViewLineNumber(minLineNumber);\n\t\tmaxLineNumber = this._toValidViewLineNumber(maxLineNumber);\n\n\t\tconst modelPosition = this.convertViewPositionToModelPosition(viewLineNumber, this.getViewLineMinColumn(viewLineNumber));\n\t\tconst modelMinPosition = this.convertViewPositionToModelPosition(minLineNumber, this.getViewLineMinColumn(minLineNumber));\n\t\tconst modelMaxPosition = this.convertViewPositionToModelPosition(maxLineNumber, this.getViewLineMinColumn(maxLineNumber));\n\t\tconst result = this.model.getActiveIndentGuide(modelPosition.lineNumber, modelMinPosition.lineNumber, modelMaxPosition.lineNumber);\n\n\t\tconst viewStartPosition = this.convertModelPositionToViewPosition(result.startLineNumber, 1);\n\t\tconst viewEndPosition = this.convertModelPositionToViewPosition(result.endLineNumber, this.model.getLineMaxColumn(result.endLineNumber));\n\t\treturn {\n\t\t\tstartLineNumber: viewStartPosition.lineNumber,\n\t\t\tendLineNumber: viewEndPosition.lineNumber,\n\t\t\tindent: result.indent\n\t\t};\n\t}\n\n\tpublic getViewLinesIndentGuides(viewStartLineNumber: number, viewEndLineNumber: number): number[] {\n\t\tviewStartLineNumber = this._toValidViewLineNumber(viewStartLineNumber);\n\t\tviewEndLineNumber = this._toValidViewLineNumber(viewEndLineNumber);\n\n\t\tconst modelStart = this.convertViewPositionToModelPosition(viewStartLineNumber, this.getViewLineMinColumn(viewStartLineNumber));\n\t\tconst modelEnd = this.convertViewPositionToModelPosition(viewEndLineNumber, this.getViewLineMaxColumn(viewEndLineNumber));\n\n\t\tlet result: number[] = [];\n\t\tlet resultRepeatCount: number[] = [];\n\t\tlet resultRepeatOption: IndentGuideRepeatOption[] = [];\n\t\tconst modelStartLineIndex = modelStart.lineNumber - 1;\n\t\tconst modelEndLineIndex = modelEnd.lineNumber - 1;\n\n\t\tlet reqStart: Position | null = null;\n\t\tfor (let modelLineIndex = modelStartLineIndex; modelLineIndex <= modelEndLineIndex; modelLineIndex++) {\n\t\t\tconst line = this.lines[modelLineIndex];\n\t\t\tif (line.isVisible()) {\n\t\t\t\tlet viewLineStartIndex = line.getViewLineNumberOfModelPosition(0, modelLineIndex === modelStartLineIndex ? modelStart.column : 1);\n\t\t\t\tlet viewLineEndIndex = line.getViewLineNumberOfModelPosition(0, this.model.getLineMaxColumn(modelLineIndex + 1));\n\t\t\t\tlet count = viewLineEndIndex - viewLineStartIndex + 1;\n\t\t\t\tlet option = IndentGuideRepeatOption.BlockNone;\n\t\t\t\tif (count > 1 && line.getViewLineMinColumn(this.model, modelLineIndex + 1, viewLineEndIndex) === 1) {\n\t\t\t\t\t// wrapped lines should block indent guides\n\t\t\t\t\toption = (viewLineStartIndex === 0 ? IndentGuideRepeatOption.BlockSubsequent : IndentGuideRepeatOption.BlockAll);\n\t\t\t\t}\n\t\t\t\tresultRepeatCount.push(count);\n\t\t\t\tresultRepeatOption.push(option);\n\t\t\t\t// merge into previous request\n\t\t\t\tif (reqStart === null) {\n\t\t\t\t\treqStart = new Position(modelLineIndex + 1, 0);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// hit invisible line => flush request\n\t\t\t\tif (reqStart !== null) {\n\t\t\t\t\tresult = result.concat(this.model.getLinesIndentGuides(reqStart.lineNumber, modelLineIndex));\n\t\t\t\t\treqStart = null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (reqStart !== null) {\n\t\t\tresult = result.concat(this.model.getLinesIndentGuides(reqStart.lineNumber, modelEnd.lineNumber));\n\t\t\treqStart = null;\n\t\t}\n\n\t\tconst viewLineCount = viewEndLineNumber - viewStartLineNumber + 1;\n\t\tlet viewIndents = new Array<number>(viewLineCount);\n\t\tlet currIndex = 0;\n\t\tfor (let i = 0, len = result.length; i < len; i++) {\n\t\t\tlet value = result[i];\n\t\t\tlet count = Math.min(viewLineCount - currIndex, resultRepeatCount[i]);\n\t\t\tlet option = resultRepeatOption[i];\n\t\t\tlet blockAtIndex: number;\n\t\t\tif (option === IndentGuideRepeatOption.BlockAll) {\n\t\t\t\tblockAtIndex = 0;\n\t\t\t} else if (option === IndentGuideRepeatOption.BlockSubsequent) {\n\t\t\t\tblockAtIndex = 1;\n\t\t\t} else {\n\t\t\t\tblockAtIndex = count;\n\t\t\t}\n\t\t\tfor (let j = 0; j < count; j++) {\n\t\t\t\tif (j === blockAtIndex) {\n\t\t\t\t\tvalue = 0;\n\t\t\t\t}\n\t\t\t\tviewIndents[currIndex++] = value;\n\t\t\t}\n\t\t}\n\t\treturn viewIndents;\n\t}\n\n\tpublic getViewLineContent(viewLineNumber: number): string {\n\t\tviewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n\t\tlet r = this.prefixSumComputer.getIndexOf(viewLineNumber - 1);\n\t\tlet lineIndex = r.index;\n\t\tlet remainder = r.remainder;\n\n\t\treturn this.lines[lineIndex].getViewLineContent(this.model, lineIndex + 1, remainder);\n\t}\n\n\tpublic getViewLineLength(viewLineNumber: number): number {\n\t\tviewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n\t\tlet r = this.prefixSumComputer.getIndexOf(viewLineNumber - 1);\n\t\tlet lineIndex = r.index;\n\t\tlet remainder = r.remainder;\n\n\t\treturn this.lines[lineIndex].getViewLineLength(this.model, lineIndex + 1, remainder);\n\t}\n\n\tpublic getViewLineMinColumn(viewLineNumber: number): number {\n\t\tviewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n\t\tlet r = this.prefixSumComputer.getIndexOf(viewLineNumber - 1);\n\t\tlet lineIndex = r.index;\n\t\tlet remainder = r.remainder;\n\n\t\treturn this.lines[lineIndex].getViewLineMinColumn(this.model, lineIndex + 1, remainder);\n\t}\n\n\tpublic getViewLineMaxColumn(viewLineNumber: number): number {\n\t\tviewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n\t\tlet r = this.prefixSumComputer.getIndexOf(viewLineNumber - 1);\n\t\tlet lineIndex = r.index;\n\t\tlet remainder = r.remainder;\n\n\t\treturn this.lines[lineIndex].getViewLineMaxColumn(this.model, lineIndex + 1, remainder);\n\t}\n\n\tpublic getViewLineData(viewLineNumber: number): ViewLineData {\n\t\tviewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n\t\tlet r = this.prefixSumComputer.getIndexOf(viewLineNumber - 1);\n\t\tlet lineIndex = r.index;\n\t\tlet remainder = r.remainder;\n\n\t\treturn this.lines[lineIndex].getViewLineData(this.model, lineIndex + 1, remainder);\n\t}\n\n\tpublic getViewLinesData(viewStartLineNumber: number, viewEndLineNumber: number, needed: boolean[]): ViewLineData[] {\n\n\t\tviewStartLineNumber = this._toValidViewLineNumber(viewStartLineNumber);\n\t\tviewEndLineNumber = this._toValidViewLineNumber(viewEndLineNumber);\n\n\t\tlet start = this.prefixSumComputer.getIndexOf(viewStartLineNumber - 1);\n\t\tlet viewLineNumber = viewStartLineNumber;\n\t\tlet startModelLineIndex = start.index;\n\t\tlet startRemainder = start.remainder;\n\n\t\tlet result: ViewLineData[] = [];\n\t\tfor (let modelLineIndex = startModelLineIndex, len = this.model.getLineCount(); modelLineIndex < len; modelLineIndex++) {\n\t\t\tlet line = this.lines[modelLineIndex];\n\t\t\tif (!line.isVisible()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tlet fromViewLineIndex = (modelLineIndex === startModelLineIndex ? startRemainder : 0);\n\t\t\tlet remainingViewLineCount = line.getViewLineCount() - fromViewLineIndex;\n\n\t\t\tlet lastLine = false;\n\t\t\tif (viewLineNumber + remainingViewLineCount > viewEndLineNumber) {\n\t\t\t\tlastLine = true;\n\t\t\t\tremainingViewLineCount = viewEndLineNumber - viewLineNumber + 1;\n\t\t\t}\n\t\t\tlet toViewLineIndex = fromViewLineIndex + remainingViewLineCount;\n\n\t\t\tline.getViewLinesData(this.model, modelLineIndex + 1, fromViewLineIndex, toViewLineIndex, viewLineNumber - viewStartLineNumber, needed, result);\n\n\t\t\tviewLineNumber += remainingViewLineCount;\n\n\t\t\tif (lastLine) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic validateViewPosition(viewLineNumber: number, viewColumn: number, expectedModelPosition: Position): Position {\n\t\tviewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n\n\t\tlet r = this.prefixSumComputer.getIndexOf(viewLineNumber - 1);\n\t\tlet lineIndex = r.index;\n\t\tlet remainder = r.remainder;\n\n\t\tlet line = this.lines[lineIndex];\n\n\t\tlet minColumn = line.getViewLineMinColumn(this.model, lineIndex + 1, remainder);\n\t\tlet maxColumn = line.getViewLineMaxColumn(this.model, lineIndex + 1, remainder);\n\t\tif (viewColumn < minColumn) {\n\t\t\tviewColumn = minColumn;\n\t\t}\n\t\tif (viewColumn > maxColumn) {\n\t\t\tviewColumn = maxColumn;\n\t\t}\n\n\t\tlet computedModelColumn = line.getModelColumnOfViewPosition(remainder, viewColumn);\n\t\tlet computedModelPosition = this.model.validatePosition(new Position(lineIndex + 1, computedModelColumn));\n\n\t\tif (computedModelPosition.equals(expectedModelPosition)) {\n\t\t\treturn new Position(viewLineNumber, viewColumn);\n\t\t}\n\n\t\treturn this.convertModelPositionToViewPosition(expectedModelPosition.lineNumber, expectedModelPosition.column);\n\t}\n\n\tpublic validateViewRange(viewRange: Range, expectedModelRange: Range): Range {\n\t\tconst validViewStart = this.validateViewPosition(viewRange.startLineNumber, viewRange.startColumn, expectedModelRange.getStartPosition());\n\t\tconst validViewEnd = this.validateViewPosition(viewRange.endLineNumber, viewRange.endColumn, expectedModelRange.getEndPosition());\n\t\treturn new Range(validViewStart.lineNumber, validViewStart.column, validViewEnd.lineNumber, validViewEnd.column);\n\t}\n\n\tpublic convertViewPositionToModelPosition(viewLineNumber: number, viewColumn: number): Position {\n\t\tviewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n\n\t\tlet r = this.prefixSumComputer.getIndexOf(viewLineNumber - 1);\n\t\tlet lineIndex = r.index;\n\t\tlet remainder = r.remainder;\n\n\t\tlet inputColumn = this.lines[lineIndex].getModelColumnOfViewPosition(remainder, viewColumn);\n\t\t// console.log('out -> in ' + viewLineNumber + ',' + viewColumn + ' ===> ' + (lineIndex+1) + ',' + inputColumn);\n\t\treturn this.model.validatePosition(new Position(lineIndex + 1, inputColumn));\n\t}\n\n\tpublic convertViewRangeToModelRange(viewRange: Range): Range {\n\t\tconst start = this.convertViewPositionToModelPosition(viewRange.startLineNumber, viewRange.startColumn);\n\t\tconst end = this.convertViewPositionToModelPosition(viewRange.endLineNumber, viewRange.endColumn);\n\t\treturn new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n\t}\n\n\tpublic convertModelPositionToViewPosition(_modelLineNumber: number, _modelColumn: number): Position {\n\n\t\tconst validPosition = this.model.validatePosition(new Position(_modelLineNumber, _modelColumn));\n\t\tconst inputLineNumber = validPosition.lineNumber;\n\t\tconst inputColumn = validPosition.column;\n\n\t\tlet lineIndex = inputLineNumber - 1, lineIndexChanged = false;\n\t\twhile (lineIndex > 0 && !this.lines[lineIndex].isVisible()) {\n\t\t\tlineIndex--;\n\t\t\tlineIndexChanged = true;\n\t\t}\n\t\tif (lineIndex === 0 && !this.lines[lineIndex].isVisible()) {\n\t\t\t// Could not reach a real line\n\t\t\t// console.log('in -> out ' + inputLineNumber + ',' + inputColumn + ' ===> ' + 1 + ',' + 1);\n\t\t\treturn new Position(1, 1);\n\t\t}\n\t\tconst deltaLineNumber = 1 + (lineIndex === 0 ? 0 : this.prefixSumComputer.getAccumulatedValue(lineIndex - 1));\n\n\t\tlet r: Position;\n\t\tif (lineIndexChanged) {\n\t\t\tr = this.lines[lineIndex].getViewPositionOfModelPosition(deltaLineNumber, this.model.getLineMaxColumn(lineIndex + 1));\n\t\t} else {\n\t\t\tr = this.lines[inputLineNumber - 1].getViewPositionOfModelPosition(deltaLineNumber, inputColumn);\n\t\t}\n\n\t\t// console.log('in -> out ' + inputLineNumber + ',' + inputColumn + ' ===> ' + r.lineNumber + ',' + r);\n\t\treturn r;\n\t}\n\n\tpublic convertModelRangeToViewRange(modelRange: Range): Range {\n\t\tlet start = this.convertModelPositionToViewPosition(modelRange.startLineNumber, modelRange.startColumn);\n\t\tlet end = this.convertModelPositionToViewPosition(modelRange.endLineNumber, modelRange.endColumn);\n\t\tif (modelRange.startLineNumber === modelRange.endLineNumber && start.lineNumber !== end.lineNumber) {\n\t\t\t// This is a single line range that ends up taking more lines due to wrapping\n\t\t\tif (end.column === this.getViewLineMinColumn(end.lineNumber)) {\n\t\t\t\t// the end column lands on the first column of the next line\n\t\t\t\treturn new Range(start.lineNumber, start.column, end.lineNumber - 1, this.getViewLineMaxColumn(end.lineNumber - 1));\n\t\t\t}\n\t\t}\n\t\treturn new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n\t}\n\n\tprivate _getViewLineNumberForModelPosition(inputLineNumber: number, inputColumn: number): number {\n\t\tlet lineIndex = inputLineNumber - 1;\n\t\tif (this.lines[lineIndex].isVisible()) {\n\t\t\t// this model line is visible\n\t\t\tconst deltaLineNumber = 1 + (lineIndex === 0 ? 0 : this.prefixSumComputer.getAccumulatedValue(lineIndex - 1));\n\t\t\treturn this.lines[lineIndex].getViewLineNumberOfModelPosition(deltaLineNumber, inputColumn);\n\t\t}\n\n\t\t// this model line is not visible\n\t\twhile (lineIndex > 0 && !this.lines[lineIndex].isVisible()) {\n\t\t\tlineIndex--;\n\t\t}\n\t\tif (lineIndex === 0 && !this.lines[lineIndex].isVisible()) {\n\t\t\t// Could not reach a real line\n\t\t\treturn 1;\n\t\t}\n\t\tconst deltaLineNumber = 1 + (lineIndex === 0 ? 0 : this.prefixSumComputer.getAccumulatedValue(lineIndex - 1));\n\t\treturn this.lines[lineIndex].getViewLineNumberOfModelPosition(deltaLineNumber, this.model.getLineMaxColumn(lineIndex + 1));\n\t}\n\n\tpublic getAllOverviewRulerDecorations(ownerId: number, filterOutValidation: boolean, theme: EditorTheme): IOverviewRulerDecorations {\n\t\tconst decorations = this.model.getOverviewRulerDecorations(ownerId, filterOutValidation);\n\t\tconst result = new OverviewRulerDecorations();\n\t\tfor (const decoration of decorations) {\n\t\t\tconst opts = <ModelDecorationOverviewRulerOptions>decoration.options.overviewRuler;\n\t\t\tconst lane = opts ? opts.position : 0;\n\t\t\tif (lane === 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst color = opts.getColor(theme);\n\t\t\tconst viewStartLineNumber = this._getViewLineNumberForModelPosition(decoration.range.startLineNumber, decoration.range.startColumn);\n\t\t\tconst viewEndLineNumber = this._getViewLineNumberForModelPosition(decoration.range.endLineNumber, decoration.range.endColumn);\n\n\t\t\tresult.accept(color, viewStartLineNumber, viewEndLineNumber, lane);\n\t\t}\n\t\treturn result.result;\n\t}\n\n\tpublic getDecorationsInRange(range: Range, ownerId: number, filterOutValidation: boolean): IModelDecoration[] {\n\t\tconst modelStart = this.convertViewPositionToModelPosition(range.startLineNumber, range.startColumn);\n\t\tconst modelEnd = this.convertViewPositionToModelPosition(range.endLineNumber, range.endColumn);\n\n\t\tif (modelEnd.lineNumber - modelStart.lineNumber <= range.endLineNumber - range.startLineNumber) {\n\t\t\t// most likely there are no hidden lines => fast path\n\t\t\t// fetch decorations from column 1 to cover the case of wrapped lines that have whole line decorations at column 1\n\t\t\treturn this.model.getDecorationsInRange(new Range(modelStart.lineNumber, 1, modelEnd.lineNumber, modelEnd.column), ownerId, filterOutValidation);\n\t\t}\n\n\t\tlet result: IModelDecoration[] = [];\n\t\tconst modelStartLineIndex = modelStart.lineNumber - 1;\n\t\tconst modelEndLineIndex = modelEnd.lineNumber - 1;\n\n\t\tlet reqStart: Position | null = null;\n\t\tfor (let modelLineIndex = modelStartLineIndex; modelLineIndex <= modelEndLineIndex; modelLineIndex++) {\n\t\t\tconst line = this.lines[modelLineIndex];\n\t\t\tif (line.isVisible()) {\n\t\t\t\t// merge into previous request\n\t\t\t\tif (reqStart === null) {\n\t\t\t\t\treqStart = new Position(modelLineIndex + 1, modelLineIndex === modelStartLineIndex ? modelStart.column : 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// hit invisible line => flush request\n\t\t\t\tif (reqStart !== null) {\n\t\t\t\t\tconst maxLineColumn = this.model.getLineMaxColumn(modelLineIndex);\n\t\t\t\t\tresult = result.concat(this.model.getDecorationsInRange(new Range(reqStart.lineNumber, reqStart.column, modelLineIndex, maxLineColumn), ownerId, filterOutValidation));\n\t\t\t\t\treqStart = null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (reqStart !== null) {\n\t\t\tresult = result.concat(this.model.getDecorationsInRange(new Range(reqStart.lineNumber, reqStart.column, modelEnd.lineNumber, modelEnd.column), ownerId, filterOutValidation));\n\t\t\treqStart = null;\n\t\t}\n\n\t\tresult.sort((a, b) => {\n\t\t\tconst res = Range.compareRangesUsingStarts(a.range, b.range);\n\t\t\tif (res === 0) {\n\t\t\t\tif (a.id < b.id) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tif (a.id > b.id) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\treturn res;\n\t\t});\n\n\t\t// Eliminate duplicate decorations that might have intersected our visible ranges multiple times\n\t\tlet finalResult: IModelDecoration[] = [], finalResultLen = 0;\n\t\tlet prevDecId: string | null = null;\n\t\tfor (const dec of result) {\n\t\t\tconst decId = dec.id;\n\t\t\tif (prevDecId === decId) {\n\t\t\t\t// skip\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tprevDecId = decId;\n\t\t\tfinalResult[finalResultLen++] = dec;\n\t\t}\n\n\t\treturn finalResult;\n\t}\n}\n\nclass VisibleIdentitySplitLine implements ISplitLine {\n\n\tpublic static readonly INSTANCE = new VisibleIdentitySplitLine();\n\n\tprivate constructor() { }\n\n\tpublic isVisible(): boolean {\n\t\treturn true;\n\t}\n\n\tpublic setVisible(isVisible: boolean): ISplitLine {\n\t\tif (isVisible) {\n\t\t\treturn this;\n\t\t}\n\t\treturn InvisibleIdentitySplitLine.INSTANCE;\n\t}\n\n\tpublic getLineBreakData(): LineBreakData | null {\n\t\treturn null;\n\t}\n\n\tpublic getViewLineCount(): number {\n\t\treturn 1;\n\t}\n\n\tpublic getViewLineContent(model: ISimpleModel, modelLineNumber: number, _outputLineIndex: number): string {\n\t\treturn model.getLineContent(modelLineNumber);\n\t}\n\n\tpublic getViewLineLength(model: ISimpleModel, modelLineNumber: number, _outputLineIndex: number): number {\n\t\treturn model.getLineLength(modelLineNumber);\n\t}\n\n\tpublic getViewLineMinColumn(model: ISimpleModel, modelLineNumber: number, _outputLineIndex: number): number {\n\t\treturn model.getLineMinColumn(modelLineNumber);\n\t}\n\n\tpublic getViewLineMaxColumn(model: ISimpleModel, modelLineNumber: number, _outputLineIndex: number): number {\n\t\treturn model.getLineMaxColumn(modelLineNumber);\n\t}\n\n\tpublic getViewLineData(model: ISimpleModel, modelLineNumber: number, _outputLineIndex: number): ViewLineData {\n\t\tlet lineTokens = model.getLineTokens(modelLineNumber);\n\t\tlet lineContent = lineTokens.getLineContent();\n\t\treturn new ViewLineData(\n\t\t\tlineContent,\n\t\t\tfalse,\n\t\t\t1,\n\t\t\tlineContent.length + 1,\n\t\t\t0,\n\t\t\tlineTokens.inflate()\n\t\t);\n\t}\n\n\tpublic getViewLinesData(model: ISimpleModel, modelLineNumber: number, _fromOuputLineIndex: number, _toOutputLineIndex: number, globalStartIndex: number, needed: boolean[], result: Array<ViewLineData | null>): void {\n\t\tif (!needed[globalStartIndex]) {\n\t\t\tresult[globalStartIndex] = null;\n\t\t\treturn;\n\t\t}\n\t\tresult[globalStartIndex] = this.getViewLineData(model, modelLineNumber, 0);\n\t}\n\n\tpublic getModelColumnOfViewPosition(_outputLineIndex: number, outputColumn: number): number {\n\t\treturn outputColumn;\n\t}\n\n\tpublic getViewPositionOfModelPosition(deltaLineNumber: number, inputColumn: number): Position {\n\t\treturn new Position(deltaLineNumber, inputColumn);\n\t}\n\n\tpublic getViewLineNumberOfModelPosition(deltaLineNumber: number, _inputColumn: number): number {\n\t\treturn deltaLineNumber;\n\t}\n}\n\nclass InvisibleIdentitySplitLine implements ISplitLine {\n\n\tpublic static readonly INSTANCE = new InvisibleIdentitySplitLine();\n\n\tprivate constructor() { }\n\n\tpublic isVisible(): boolean {\n\t\treturn false;\n\t}\n\n\tpublic setVisible(isVisible: boolean): ISplitLine {\n\t\tif (!isVisible) {\n\t\t\treturn this;\n\t\t}\n\t\treturn VisibleIdentitySplitLine.INSTANCE;\n\t}\n\n\tpublic getLineBreakData(): LineBreakData | null {\n\t\treturn null;\n\t}\n\n\tpublic getViewLineCount(): number {\n\t\treturn 0;\n\t}\n\n\tpublic getViewLineContent(_model: ISimpleModel, _modelLineNumber: number, _outputLineIndex: number): string {\n\t\tthrow new Error('Not supported');\n\t}\n\n\tpublic getViewLineLength(_model: ISimpleModel, _modelLineNumber: number, _outputLineIndex: number): number {\n\t\tthrow new Error('Not supported');\n\t}\n\n\tpublic getViewLineMinColumn(_model: ISimpleModel, _modelLineNumber: number, _outputLineIndex: number): number {\n\t\tthrow new Error('Not supported');\n\t}\n\n\tpublic getViewLineMaxColumn(_model: ISimpleModel, _modelLineNumber: number, _outputLineIndex: number): number {\n\t\tthrow new Error('Not supported');\n\t}\n\n\tpublic getViewLineData(_model: ISimpleModel, _modelLineNumber: number, _outputLineIndex: number): ViewLineData {\n\t\tthrow new Error('Not supported');\n\t}\n\n\tpublic getViewLinesData(_model: ISimpleModel, _modelLineNumber: number, _fromOuputLineIndex: number, _toOutputLineIndex: number, _globalStartIndex: number, _needed: boolean[], _result: ViewLineData[]): void {\n\t\tthrow new Error('Not supported');\n\t}\n\n\tpublic getModelColumnOfViewPosition(_outputLineIndex: number, _outputColumn: number): number {\n\t\tthrow new Error('Not supported');\n\t}\n\n\tpublic getViewPositionOfModelPosition(_deltaLineNumber: number, _inputColumn: number): Position {\n\t\tthrow new Error('Not supported');\n\t}\n\n\tpublic getViewLineNumberOfModelPosition(_deltaLineNumber: number, _inputColumn: number): number {\n\t\tthrow new Error('Not supported');\n\t}\n}\n\nexport class SplitLine implements ISplitLine {\n\n\tprivate readonly _lineBreakData: LineBreakData;\n\tprivate _isVisible: boolean;\n\n\tconstructor(lineBreakData: LineBreakData, isVisible: boolean) {\n\t\tthis._lineBreakData = lineBreakData;\n\t\tthis._isVisible = isVisible;\n\t}\n\n\tpublic isVisible(): boolean {\n\t\treturn this._isVisible;\n\t}\n\n\tpublic setVisible(isVisible: boolean): ISplitLine {\n\t\tthis._isVisible = isVisible;\n\t\treturn this;\n\t}\n\n\tpublic getLineBreakData(): LineBreakData | null {\n\t\treturn this._lineBreakData;\n\t}\n\n\tpublic getViewLineCount(): number {\n\t\tif (!this._isVisible) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn this._lineBreakData.breakOffsets.length;\n\t}\n\n\tprivate getInputStartOffsetOfOutputLineIndex(outputLineIndex: number): number {\n\t\treturn LineBreakData.getInputOffsetOfOutputPosition(this._lineBreakData.breakOffsets, outputLineIndex, 0);\n\t}\n\n\tprivate getInputEndOffsetOfOutputLineIndex(model: ISimpleModel, modelLineNumber: number, outputLineIndex: number): number {\n\t\tif (outputLineIndex + 1 === this._lineBreakData.breakOffsets.length) {\n\t\t\treturn model.getLineMaxColumn(modelLineNumber) - 1;\n\t\t}\n\t\treturn LineBreakData.getInputOffsetOfOutputPosition(this._lineBreakData.breakOffsets, outputLineIndex + 1, 0);\n\t}\n\n\tpublic getViewLineContent(model: ISimpleModel, modelLineNumber: number, outputLineIndex: number): string {\n\t\tif (!this._isVisible) {\n\t\t\tthrow new Error('Not supported');\n\t\t}\n\t\tlet startOffset = this.getInputStartOffsetOfOutputLineIndex(outputLineIndex);\n\t\tlet endOffset = this.getInputEndOffsetOfOutputLineIndex(model, modelLineNumber, outputLineIndex);\n\t\tlet r = model.getValueInRange({\n\t\t\tstartLineNumber: modelLineNumber,\n\t\t\tstartColumn: startOffset + 1,\n\t\t\tendLineNumber: modelLineNumber,\n\t\t\tendColumn: endOffset + 1\n\t\t});\n\n\t\tif (outputLineIndex > 0) {\n\t\t\tr = spaces(this._lineBreakData.wrappedTextIndentLength) + r;\n\t\t}\n\n\t\treturn r;\n\t}\n\n\tpublic getViewLineLength(model: ISimpleModel, modelLineNumber: number, outputLineIndex: number): number {\n\t\tif (!this._isVisible) {\n\t\t\tthrow new Error('Not supported');\n\t\t}\n\t\tlet startOffset = this.getInputStartOffsetOfOutputLineIndex(outputLineIndex);\n\t\tlet endOffset = this.getInputEndOffsetOfOutputLineIndex(model, modelLineNumber, outputLineIndex);\n\t\tlet r = endOffset - startOffset;\n\n\t\tif (outputLineIndex > 0) {\n\t\t\tr = this._lineBreakData.wrappedTextIndentLength + r;\n\t\t}\n\n\t\treturn r;\n\t}\n\n\tpublic getViewLineMinColumn(_model: ITextModel, _modelLineNumber: number, outputLineIndex: number): number {\n\t\tif (!this._isVisible) {\n\t\t\tthrow new Error('Not supported');\n\t\t}\n\t\tif (outputLineIndex > 0) {\n\t\t\treturn this._lineBreakData.wrappedTextIndentLength + 1;\n\t\t}\n\t\treturn 1;\n\t}\n\n\tpublic getViewLineMaxColumn(model: ISimpleModel, modelLineNumber: number, outputLineIndex: number): number {\n\t\tif (!this._isVisible) {\n\t\t\tthrow new Error('Not supported');\n\t\t}\n\t\treturn this.getViewLineContent(model, modelLineNumber, outputLineIndex).length + 1;\n\t}\n\n\tpublic getViewLineData(model: ISimpleModel, modelLineNumber: number, outputLineIndex: number): ViewLineData {\n\t\tif (!this._isVisible) {\n\t\t\tthrow new Error('Not supported');\n\t\t}\n\n\t\tlet startOffset = this.getInputStartOffsetOfOutputLineIndex(outputLineIndex);\n\t\tlet endOffset = this.getInputEndOffsetOfOutputLineIndex(model, modelLineNumber, outputLineIndex);\n\n\t\tlet lineContent = model.getValueInRange({\n\t\t\tstartLineNumber: modelLineNumber,\n\t\t\tstartColumn: startOffset + 1,\n\t\t\tendLineNumber: modelLineNumber,\n\t\t\tendColumn: endOffset + 1\n\t\t});\n\n\t\tif (outputLineIndex > 0) {\n\t\t\tlineContent = spaces(this._lineBreakData.wrappedTextIndentLength) + lineContent;\n\t\t}\n\n\t\tlet minColumn = (outputLineIndex > 0 ? this._lineBreakData.wrappedTextIndentLength + 1 : 1);\n\t\tlet maxColumn = lineContent.length + 1;\n\n\t\tlet continuesWithWrappedLine = (outputLineIndex + 1 < this.getViewLineCount());\n\n\t\tlet deltaStartIndex = 0;\n\t\tif (outputLineIndex > 0) {\n\t\t\tdeltaStartIndex = this._lineBreakData.wrappedTextIndentLength;\n\t\t}\n\t\tlet lineTokens = model.getLineTokens(modelLineNumber);\n\n\t\tconst startVisibleColumn = (outputLineIndex === 0 ? 0 : this._lineBreakData.breakOffsetsVisibleColumn[outputLineIndex - 1]);\n\n\t\treturn new ViewLineData(\n\t\t\tlineContent,\n\t\t\tcontinuesWithWrappedLine,\n\t\t\tminColumn,\n\t\t\tmaxColumn,\n\t\t\tstartVisibleColumn,\n\t\t\tlineTokens.sliceAndInflate(startOffset, endOffset, deltaStartIndex)\n\t\t);\n\t}\n\n\tpublic getViewLinesData(model: ITextModel, modelLineNumber: number, fromOuputLineIndex: number, toOutputLineIndex: number, globalStartIndex: number, needed: boolean[], result: Array<ViewLineData | null>): void {\n\t\tif (!this._isVisible) {\n\t\t\tthrow new Error('Not supported');\n\t\t}\n\n\t\tfor (let outputLineIndex = fromOuputLineIndex; outputLineIndex < toOutputLineIndex; outputLineIndex++) {\n\t\t\tlet globalIndex = globalStartIndex + outputLineIndex - fromOuputLineIndex;\n\t\t\tif (!needed[globalIndex]) {\n\t\t\t\tresult[globalIndex] = null;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tresult[globalIndex] = this.getViewLineData(model, modelLineNumber, outputLineIndex);\n\t\t}\n\t}\n\n\tpublic getModelColumnOfViewPosition(outputLineIndex: number, outputColumn: number): number {\n\t\tif (!this._isVisible) {\n\t\t\tthrow new Error('Not supported');\n\t\t}\n\t\tlet adjustedColumn = outputColumn - 1;\n\t\tif (outputLineIndex > 0) {\n\t\t\tif (adjustedColumn < this._lineBreakData.wrappedTextIndentLength) {\n\t\t\t\tadjustedColumn = 0;\n\t\t\t} else {\n\t\t\t\tadjustedColumn -= this._lineBreakData.wrappedTextIndentLength;\n\t\t\t}\n\t\t}\n\t\treturn LineBreakData.getInputOffsetOfOutputPosition(this._lineBreakData.breakOffsets, outputLineIndex, adjustedColumn) + 1;\n\t}\n\n\tpublic getViewPositionOfModelPosition(deltaLineNumber: number, inputColumn: number): Position {\n\t\tif (!this._isVisible) {\n\t\t\tthrow new Error('Not supported');\n\t\t}\n\t\tlet r = LineBreakData.getOutputPositionOfInputOffset(this._lineBreakData.breakOffsets, inputColumn - 1);\n\t\tlet outputLineIndex = r.outputLineIndex;\n\t\tlet outputColumn = r.outputOffset + 1;\n\n\t\tif (outputLineIndex > 0) {\n\t\t\toutputColumn += this._lineBreakData.wrappedTextIndentLength;\n\t\t}\n\n\t\t//\t\tconsole.log('in -> out ' + deltaLineNumber + ',' + inputColumn + ' ===> ' + (deltaLineNumber+outputLineIndex) + ',' + outputColumn);\n\t\treturn new Position(deltaLineNumber + outputLineIndex, outputColumn);\n\t}\n\n\tpublic getViewLineNumberOfModelPosition(deltaLineNumber: number, inputColumn: number): number {\n\t\tif (!this._isVisible) {\n\t\t\tthrow new Error('Not supported');\n\t\t}\n\t\tconst r = LineBreakData.getOutputPositionOfInputOffset(this._lineBreakData.breakOffsets, inputColumn - 1);\n\t\treturn (deltaLineNumber + r.outputLineIndex);\n\t}\n}\n\nlet _spaces: string[] = [''];\nfunction spaces(count: number): string {\n\tif (count >= _spaces.length) {\n\t\tfor (let i = 1; i <= count; i++) {\n\t\t\t_spaces[i] = _makeSpaces(i);\n\t\t}\n\t}\n\treturn _spaces[count];\n}\nfunction _makeSpaces(count: number): string {\n\treturn new Array(count + 1).join(' ');\n}\n\nfunction createSplitLine(lineBreakData: LineBreakData | null, isVisible: boolean): ISplitLine {\n\tif (lineBreakData === null) {\n\t\t// No mapping needed\n\t\tif (isVisible) {\n\t\t\treturn VisibleIdentitySplitLine.INSTANCE;\n\t\t}\n\t\treturn InvisibleIdentitySplitLine.INSTANCE;\n\t} else {\n\t\treturn new SplitLine(lineBreakData, isVisible);\n\t}\n}\n\nexport class IdentityCoordinatesConverter implements ICoordinatesConverter {\n\n\tprivate readonly _lines: IdentityLinesCollection;\n\n\tconstructor(lines: IdentityLinesCollection) {\n\t\tthis._lines = lines;\n\t}\n\n\tprivate _validPosition(pos: Position): Position {\n\t\treturn this._lines.model.validatePosition(pos);\n\t}\n\n\tprivate _validRange(range: Range): Range {\n\t\treturn this._lines.model.validateRange(range);\n\t}\n\n\t// View -> Model conversion and related methods\n\n\tpublic convertViewPositionToModelPosition(viewPosition: Position): Position {\n\t\treturn this._validPosition(viewPosition);\n\t}\n\n\tpublic convertViewRangeToModelRange(viewRange: Range): Range {\n\t\treturn this._validRange(viewRange);\n\t}\n\n\tpublic validateViewPosition(_viewPosition: Position, expectedModelPosition: Position): Position {\n\t\treturn this._validPosition(expectedModelPosition);\n\t}\n\n\tpublic validateViewRange(_viewRange: Range, expectedModelRange: Range): Range {\n\t\treturn this._validRange(expectedModelRange);\n\t}\n\n\t// Model -> View conversion and related methods\n\n\tpublic convertModelPositionToViewPosition(modelPosition: Position): Position {\n\t\treturn this._validPosition(modelPosition);\n\t}\n\n\tpublic convertModelRangeToViewRange(modelRange: Range): Range {\n\t\treturn this._validRange(modelRange);\n\t}\n\n\tpublic modelPositionIsVisible(modelPosition: Position): boolean {\n\t\tconst lineCount = this._lines.model.getLineCount();\n\t\tif (modelPosition.lineNumber < 1 || modelPosition.lineNumber > lineCount) {\n\t\t\t// invalid arguments\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic getModelLineViewLineCount(modelLineNumber: number): number {\n\t\treturn 1;\n\t}\n}\n\nexport class IdentityLinesCollection implements IViewModelLinesCollection {\n\n\tpublic readonly model: ITextModel;\n\n\tconstructor(model: ITextModel) {\n\t\tthis.model = model;\n\t}\n\n\tpublic dispose(): void {\n\t}\n\n\tpublic createCoordinatesConverter(): ICoordinatesConverter {\n\t\treturn new IdentityCoordinatesConverter(this);\n\t}\n\n\tpublic getHiddenAreas(): Range[] {\n\t\treturn [];\n\t}\n\n\tpublic setHiddenAreas(_ranges: Range[]): boolean {\n\t\treturn false;\n\t}\n\n\tpublic setTabSize(_newTabSize: number): boolean {\n\t\treturn false;\n\t}\n\n\tpublic setWrappingSettings(_fontInfo: FontInfo, _wrappingStrategy: 'simple' | 'advanced', _wrappingColumn: number, _wrappingIndent: WrappingIndent): boolean {\n\t\treturn false;\n\t}\n\n\tpublic createLineBreaksComputer(): ILineBreaksComputer {\n\t\tlet result: null[] = [];\n\t\treturn {\n\t\t\taddRequest: (lineText: string, previousLineBreakData: LineBreakData | null) => {\n\t\t\t\tresult.push(null);\n\t\t\t},\n\t\t\tfinalize: () => {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t};\n\t}\n\n\tpublic onModelFlushed(): void {\n\t}\n\n\tpublic onModelLinesDeleted(_versionId: number, fromLineNumber: number, toLineNumber: number): viewEvents.ViewLinesDeletedEvent | null {\n\t\treturn new viewEvents.ViewLinesDeletedEvent(fromLineNumber, toLineNumber);\n\t}\n\n\tpublic onModelLinesInserted(_versionId: number, fromLineNumber: number, toLineNumber: number, lineBreaks: (LineBreakData | null)[]): viewEvents.ViewLinesInsertedEvent | null {\n\t\treturn new viewEvents.ViewLinesInsertedEvent(fromLineNumber, toLineNumber);\n\t}\n\n\tpublic onModelLineChanged(_versionId: number, lineNumber: number, lineBreakData: LineBreakData | null): [boolean, viewEvents.ViewLinesChangedEvent | null, viewEvents.ViewLinesInsertedEvent | null, viewEvents.ViewLinesDeletedEvent | null] {\n\t\treturn [false, new viewEvents.ViewLinesChangedEvent(lineNumber, lineNumber), null, null];\n\t}\n\n\tpublic acceptVersionId(_versionId: number): void {\n\t}\n\n\tpublic getViewLineCount(): number {\n\t\treturn this.model.getLineCount();\n\t}\n\n\tpublic getActiveIndentGuide(viewLineNumber: number, _minLineNumber: number, _maxLineNumber: number): IActiveIndentGuideInfo {\n\t\treturn {\n\t\t\tstartLineNumber: viewLineNumber,\n\t\t\tendLineNumber: viewLineNumber,\n\t\t\tindent: 0\n\t\t};\n\t}\n\n\tpublic getViewLinesIndentGuides(viewStartLineNumber: number, viewEndLineNumber: number): number[] {\n\t\tconst viewLineCount = viewEndLineNumber - viewStartLineNumber + 1;\n\t\tlet result = new Array<number>(viewLineCount);\n\t\tfor (let i = 0; i < viewLineCount; i++) {\n\t\t\tresult[i] = 0;\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic getViewLineContent(viewLineNumber: number): string {\n\t\treturn this.model.getLineContent(viewLineNumber);\n\t}\n\n\tpublic getViewLineLength(viewLineNumber: number): number {\n\t\treturn this.model.getLineLength(viewLineNumber);\n\t}\n\n\tpublic getViewLineMinColumn(viewLineNumber: number): number {\n\t\treturn this.model.getLineMinColumn(viewLineNumber);\n\t}\n\n\tpublic getViewLineMaxColumn(viewLineNumber: number): number {\n\t\treturn this.model.getLineMaxColumn(viewLineNumber);\n\t}\n\n\tpublic getViewLineData(viewLineNumber: number): ViewLineData {\n\t\tlet lineTokens = this.model.getLineTokens(viewLineNumber);\n\t\tlet lineContent = lineTokens.getLineContent();\n\t\treturn new ViewLineData(\n\t\t\tlineContent,\n\t\t\tfalse,\n\t\t\t1,\n\t\t\tlineContent.length + 1,\n\t\t\t0,\n\t\t\tlineTokens.inflate()\n\t\t);\n\t}\n\n\tpublic getViewLinesData(viewStartLineNumber: number, viewEndLineNumber: number, needed: boolean[]): Array<ViewLineData | null> {\n\t\tconst lineCount = this.model.getLineCount();\n\t\tviewStartLineNumber = Math.min(Math.max(1, viewStartLineNumber), lineCount);\n\t\tviewEndLineNumber = Math.min(Math.max(1, viewEndLineNumber), lineCount);\n\n\t\tlet result: Array<ViewLineData | null> = [];\n\t\tfor (let lineNumber = viewStartLineNumber; lineNumber <= viewEndLineNumber; lineNumber++) {\n\t\t\tlet idx = lineNumber - viewStartLineNumber;\n\t\t\tif (!needed[idx]) {\n\t\t\t\tresult[idx] = null;\n\t\t\t}\n\t\t\tresult[idx] = this.getViewLineData(lineNumber);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic getAllOverviewRulerDecorations(ownerId: number, filterOutValidation: boolean, theme: EditorTheme): IOverviewRulerDecorations {\n\t\tconst decorations = this.model.getOverviewRulerDecorations(ownerId, filterOutValidation);\n\t\tconst result = new OverviewRulerDecorations();\n\t\tfor (const decoration of decorations) {\n\t\t\tconst opts = <ModelDecorationOverviewRulerOptions>decoration.options.overviewRuler;\n\t\t\tconst lane = opts ? opts.position : 0;\n\t\t\tif (lane === 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst color = opts.getColor(theme);\n\t\t\tconst viewStartLineNumber = decoration.range.startLineNumber;\n\t\t\tconst viewEndLineNumber = decoration.range.endLineNumber;\n\n\t\t\tresult.accept(color, viewStartLineNumber, viewEndLineNumber, lane);\n\t\t}\n\t\treturn result.result;\n\t}\n\n\tpublic getDecorationsInRange(range: Range, ownerId: number, filterOutValidation: boolean): IModelDecoration[] {\n\t\treturn this.model.getDecorationsInRange(range, ownerId, filterOutValidation);\n\t}\n}\n\nclass OverviewRulerDecorations {\n\n\treadonly result: IOverviewRulerDecorations = Object.create(null);\n\n\tpublic accept(color: string, startLineNumber: number, endLineNumber: number, lane: number): void {\n\t\tlet prev = this.result[color];\n\n\t\tif (prev) {\n\t\t\tconst prevLane = prev[prev.length - 3];\n\t\t\tconst prevEndLineNumber = prev[prev.length - 1];\n\t\t\tif (prevLane === lane && prevEndLineNumber + 1 >= startLineNumber) {\n\t\t\t\t// merge into prev\n\t\t\t\tif (endLineNumber > prevEndLineNumber) {\n\t\t\t\t\tprev[prev.length - 1] = endLineNumber;\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// push\n\t\t\tprev.push(lane, startLineNumber, endLineNumber);\n\t\t} else {\n\t\t\tthis.result[color] = [lane, startLineNumber, endLineNumber];\n\t\t}\n\t}\n}\n"]}