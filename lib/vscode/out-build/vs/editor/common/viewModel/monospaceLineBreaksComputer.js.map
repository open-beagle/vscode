{"version":3,"file":"monospaceLineBreaksComputer.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/common/viewModel/monospaceLineBreaksComputer.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from 'vs/base/common/charCode';\nimport * as strings from 'vs/base/common/strings';\nimport { WrappingIndent, IComputedEditorOptions, EditorOption } from 'vs/editor/common/config/editorOptions';\nimport { CharacterClassifier } from 'vs/editor/common/core/characterClassifier';\nimport { ILineBreaksComputerFactory } from 'vs/editor/common/viewModel/splitLinesCollection';\nimport { FontInfo } from 'vs/editor/common/config/fontInfo';\nimport { ILineBreaksComputer, LineBreakData } from 'vs/editor/common/viewModel/viewModel';\n\nconst enum CharacterClass {\n\tNONE = 0,\n\tBREAK_BEFORE = 1,\n\tBREAK_AFTER = 2,\n\tBREAK_IDEOGRAPHIC = 3 // for Han and Kana.\n}\n\nclass WrappingCharacterClassifier extends CharacterClassifier<CharacterClass> {\n\n\tconstructor(BREAK_BEFORE: string, BREAK_AFTER: string) {\n\t\tsuper(CharacterClass.NONE);\n\n\t\tfor (let i = 0; i < BREAK_BEFORE.length; i++) {\n\t\t\tthis.set(BREAK_BEFORE.charCodeAt(i), CharacterClass.BREAK_BEFORE);\n\t\t}\n\n\t\tfor (let i = 0; i < BREAK_AFTER.length; i++) {\n\t\t\tthis.set(BREAK_AFTER.charCodeAt(i), CharacterClass.BREAK_AFTER);\n\t\t}\n\t}\n\n\tpublic override get(charCode: number): CharacterClass {\n\t\tif (charCode >= 0 && charCode < 256) {\n\t\t\treturn <CharacterClass>this._asciiMap[charCode];\n\t\t} else {\n\t\t\t// Initialize CharacterClass.BREAK_IDEOGRAPHIC for these Unicode ranges:\n\t\t\t// 1. CJK Unified Ideographs (0x4E00 -- 0x9FFF)\n\t\t\t// 2. CJK Unified Ideographs Extension A (0x3400 -- 0x4DBF)\n\t\t\t// 3. Hiragana and Katakana (0x3040 -- 0x30FF)\n\t\t\tif (\n\t\t\t\t(charCode >= 0x3040 && charCode <= 0x30FF)\n\t\t\t\t|| (charCode >= 0x3400 && charCode <= 0x4DBF)\n\t\t\t\t|| (charCode >= 0x4E00 && charCode <= 0x9FFF)\n\t\t\t) {\n\t\t\t\treturn CharacterClass.BREAK_IDEOGRAPHIC;\n\t\t\t}\n\n\t\t\treturn <CharacterClass>(this._map.get(charCode) || this._defaultValue);\n\t\t}\n\t}\n}\n\nlet arrPool1: number[] = [];\nlet arrPool2: number[] = [];\n\nexport class MonospaceLineBreaksComputerFactory implements ILineBreaksComputerFactory {\n\n\tpublic static create(options: IComputedEditorOptions): MonospaceLineBreaksComputerFactory {\n\t\treturn new MonospaceLineBreaksComputerFactory(\n\t\t\toptions.get(EditorOption.wordWrapBreakBeforeCharacters),\n\t\t\toptions.get(EditorOption.wordWrapBreakAfterCharacters)\n\t\t);\n\t}\n\n\tprivate readonly classifier: WrappingCharacterClassifier;\n\n\tconstructor(breakBeforeChars: string, breakAfterChars: string) {\n\t\tthis.classifier = new WrappingCharacterClassifier(breakBeforeChars, breakAfterChars);\n\t}\n\n\tpublic createLineBreaksComputer(fontInfo: FontInfo, tabSize: number, wrappingColumn: number, wrappingIndent: WrappingIndent): ILineBreaksComputer {\n\t\ttabSize = tabSize | 0; //@perf\n\t\twrappingColumn = +wrappingColumn; //@perf\n\n\t\tlet requests: string[] = [];\n\t\tlet previousBreakingData: (LineBreakData | null)[] = [];\n\t\treturn {\n\t\t\taddRequest: (lineText: string, previousLineBreakData: LineBreakData | null) => {\n\t\t\t\trequests.push(lineText);\n\t\t\t\tpreviousBreakingData.push(previousLineBreakData);\n\t\t\t},\n\t\t\tfinalize: () => {\n\t\t\t\tconst columnsForFullWidthChar = fontInfo.typicalFullwidthCharacterWidth / fontInfo.typicalHalfwidthCharacterWidth; //@perf\n\t\t\t\tlet result: (LineBreakData | null)[] = [];\n\t\t\t\tfor (let i = 0, len = requests.length; i < len; i++) {\n\t\t\t\t\tconst previousLineBreakData = previousBreakingData[i];\n\t\t\t\t\tif (previousLineBreakData) {\n\t\t\t\t\t\tresult[i] = createLineBreaksFromPreviousLineBreaks(this.classifier, previousLineBreakData, requests[i], tabSize, wrappingColumn, columnsForFullWidthChar, wrappingIndent);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult[i] = createLineBreaks(this.classifier, requests[i], tabSize, wrappingColumn, columnsForFullWidthChar, wrappingIndent);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tarrPool1.length = 0;\n\t\t\t\tarrPool2.length = 0;\n\t\t\t\treturn result;\n\t\t\t}\n\t\t};\n\t}\n}\n\nfunction createLineBreaksFromPreviousLineBreaks(classifier: WrappingCharacterClassifier, previousBreakingData: LineBreakData, lineText: string, tabSize: number, firstLineBreakColumn: number, columnsForFullWidthChar: number, wrappingIndent: WrappingIndent): LineBreakData | null {\n\tif (firstLineBreakColumn === -1) {\n\t\treturn null;\n\t}\n\n\tconst len = lineText.length;\n\tif (len <= 1) {\n\t\treturn null;\n\t}\n\n\tconst prevBreakingOffsets = previousBreakingData.breakOffsets;\n\tconst prevBreakingOffsetsVisibleColumn = previousBreakingData.breakOffsetsVisibleColumn;\n\n\tconst wrappedTextIndentLength = computeWrappedTextIndentLength(lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent);\n\tconst wrappedLineBreakColumn = firstLineBreakColumn - wrappedTextIndentLength;\n\n\tlet breakingOffsets: number[] = arrPool1;\n\tlet breakingOffsetsVisibleColumn: number[] = arrPool2;\n\tlet breakingOffsetsCount: number = 0;\n\tlet lastBreakingOffset = 0;\n\tlet lastBreakingOffsetVisibleColumn = 0;\n\n\tlet breakingColumn = firstLineBreakColumn;\n\tconst prevLen = prevBreakingOffsets.length;\n\tlet prevIndex = 0;\n\n\tif (prevIndex >= 0) {\n\t\tlet bestDistance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex] - breakingColumn);\n\t\twhile (prevIndex + 1 < prevLen) {\n\t\t\tconst distance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex + 1] - breakingColumn);\n\t\t\tif (distance >= bestDistance) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbestDistance = distance;\n\t\t\tprevIndex++;\n\t\t}\n\t}\n\n\twhile (prevIndex < prevLen) {\n\t\t// Allow for prevIndex to be -1 (for the case where we hit a tab when walking backwards from the first break)\n\t\tlet prevBreakOffset = prevIndex < 0 ? 0 : prevBreakingOffsets[prevIndex];\n\t\tlet prevBreakOffsetVisibleColumn = prevIndex < 0 ? 0 : prevBreakingOffsetsVisibleColumn[prevIndex];\n\t\tif (lastBreakingOffset > prevBreakOffset) {\n\t\t\tprevBreakOffset = lastBreakingOffset;\n\t\t\tprevBreakOffsetVisibleColumn = lastBreakingOffsetVisibleColumn;\n\t\t}\n\n\t\tlet breakOffset = 0;\n\t\tlet breakOffsetVisibleColumn = 0;\n\n\t\tlet forcedBreakOffset = 0;\n\t\tlet forcedBreakOffsetVisibleColumn = 0;\n\n\t\t// initially, we search as much as possible to the right (if it fits)\n\t\tif (prevBreakOffsetVisibleColumn <= breakingColumn) {\n\t\t\tlet visibleColumn = prevBreakOffsetVisibleColumn;\n\t\t\tlet prevCharCode = prevBreakOffset === 0 ? CharCode.Null : lineText.charCodeAt(prevBreakOffset - 1);\n\t\t\tlet prevCharCodeClass = prevBreakOffset === 0 ? CharacterClass.NONE : classifier.get(prevCharCode);\n\t\t\tlet entireLineFits = true;\n\t\t\tfor (let i = prevBreakOffset; i < len; i++) {\n\t\t\t\tconst charStartOffset = i;\n\t\t\t\tconst charCode = lineText.charCodeAt(i);\n\t\t\t\tlet charCodeClass: number;\n\t\t\t\tlet charWidth: number;\n\n\t\t\t\tif (strings.isHighSurrogate(charCode)) {\n\t\t\t\t\t// A surrogate pair must always be considered as a single unit, so it is never to be broken\n\t\t\t\t\ti++;\n\t\t\t\t\tcharCodeClass = CharacterClass.NONE;\n\t\t\t\t\tcharWidth = 2;\n\t\t\t\t} else {\n\t\t\t\t\tcharCodeClass = classifier.get(charCode);\n\t\t\t\t\tcharWidth = computeCharWidth(charCode, visibleColumn, tabSize, columnsForFullWidthChar);\n\t\t\t\t}\n\n\t\t\t\tif (charStartOffset > lastBreakingOffset && canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass)) {\n\t\t\t\t\tbreakOffset = charStartOffset;\n\t\t\t\t\tbreakOffsetVisibleColumn = visibleColumn;\n\t\t\t\t}\n\n\t\t\t\tvisibleColumn += charWidth;\n\n\t\t\t\t// check if adding character at `i` will go over the breaking column\n\t\t\t\tif (visibleColumn > breakingColumn) {\n\t\t\t\t\t// We need to break at least before character at `i`:\n\t\t\t\t\tif (charStartOffset > lastBreakingOffset) {\n\t\t\t\t\t\tforcedBreakOffset = charStartOffset;\n\t\t\t\t\t\tforcedBreakOffsetVisibleColumn = visibleColumn - charWidth;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// we need to advance at least by one character\n\t\t\t\t\t\tforcedBreakOffset = i + 1;\n\t\t\t\t\t\tforcedBreakOffsetVisibleColumn = visibleColumn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (visibleColumn - breakOffsetVisibleColumn > wrappedLineBreakColumn) {\n\t\t\t\t\t\t// Cannot break at `breakOffset` => reset it if it was set\n\t\t\t\t\t\tbreakOffset = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tentireLineFits = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tprevCharCode = charCode;\n\t\t\t\tprevCharCodeClass = charCodeClass;\n\t\t\t}\n\n\t\t\tif (entireLineFits) {\n\t\t\t\t// there is no more need to break => stop the outer loop!\n\t\t\t\tif (breakingOffsetsCount > 0) {\n\t\t\t\t\t// Add last segment, no need to assign to `lastBreakingOffset` and `lastBreakingOffsetVisibleColumn`\n\t\t\t\t\tbreakingOffsets[breakingOffsetsCount] = prevBreakingOffsets[prevBreakingOffsets.length - 1];\n\t\t\t\t\tbreakingOffsetsVisibleColumn[breakingOffsetsCount] = prevBreakingOffsetsVisibleColumn[prevBreakingOffsets.length - 1];\n\t\t\t\t\tbreakingOffsetsCount++;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (breakOffset === 0) {\n\t\t\t// must search left\n\t\t\tlet visibleColumn = prevBreakOffsetVisibleColumn;\n\t\t\tlet charCode = lineText.charCodeAt(prevBreakOffset);\n\t\t\tlet charCodeClass = classifier.get(charCode);\n\t\t\tlet hitATabCharacter = false;\n\t\t\tfor (let i = prevBreakOffset - 1; i >= lastBreakingOffset; i--) {\n\t\t\t\tconst charStartOffset = i + 1;\n\t\t\t\tconst prevCharCode = lineText.charCodeAt(i);\n\n\t\t\t\tif (prevCharCode === CharCode.Tab) {\n\t\t\t\t\t// cannot determine the width of a tab when going backwards, so we must go forwards\n\t\t\t\t\thitATabCharacter = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tlet prevCharCodeClass: number;\n\t\t\t\tlet prevCharWidth: number;\n\n\t\t\t\tif (strings.isLowSurrogate(prevCharCode)) {\n\t\t\t\t\t// A surrogate pair must always be considered as a single unit, so it is never to be broken\n\t\t\t\t\ti--;\n\t\t\t\t\tprevCharCodeClass = CharacterClass.NONE;\n\t\t\t\t\tprevCharWidth = 2;\n\t\t\t\t} else {\n\t\t\t\t\tprevCharCodeClass = classifier.get(prevCharCode);\n\t\t\t\t\tprevCharWidth = (strings.isFullWidthCharacter(prevCharCode) ? columnsForFullWidthChar : 1);\n\t\t\t\t}\n\n\t\t\t\tif (visibleColumn <= breakingColumn) {\n\t\t\t\t\tif (forcedBreakOffset === 0) {\n\t\t\t\t\t\tforcedBreakOffset = charStartOffset;\n\t\t\t\t\t\tforcedBreakOffsetVisibleColumn = visibleColumn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (visibleColumn <= breakingColumn - wrappedLineBreakColumn) {\n\t\t\t\t\t\t// went too far!\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass)) {\n\t\t\t\t\t\tbreakOffset = charStartOffset;\n\t\t\t\t\t\tbreakOffsetVisibleColumn = visibleColumn;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvisibleColumn -= prevCharWidth;\n\t\t\t\tcharCode = prevCharCode;\n\t\t\t\tcharCodeClass = prevCharCodeClass;\n\t\t\t}\n\n\t\t\tif (breakOffset !== 0) {\n\t\t\t\tconst remainingWidthOfNextLine = wrappedLineBreakColumn - (forcedBreakOffsetVisibleColumn - breakOffsetVisibleColumn);\n\t\t\t\tif (remainingWidthOfNextLine <= tabSize) {\n\t\t\t\t\tconst charCodeAtForcedBreakOffset = lineText.charCodeAt(forcedBreakOffset);\n\t\t\t\t\tlet charWidth: number;\n\t\t\t\t\tif (strings.isHighSurrogate(charCodeAtForcedBreakOffset)) {\n\t\t\t\t\t\t// A surrogate pair must always be considered as a single unit, so it is never to be broken\n\t\t\t\t\t\tcharWidth = 2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcharWidth = computeCharWidth(charCodeAtForcedBreakOffset, forcedBreakOffsetVisibleColumn, tabSize, columnsForFullWidthChar);\n\t\t\t\t\t}\n\t\t\t\t\tif (remainingWidthOfNextLine - charWidth < 0) {\n\t\t\t\t\t\t// it is not worth it to break at breakOffset, it just introduces an extra needless line!\n\t\t\t\t\t\tbreakOffset = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (hitATabCharacter) {\n\t\t\t\t// cannot determine the width of a tab when going backwards, so we must go forwards from the previous break\n\t\t\t\tprevIndex--;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\tif (breakOffset === 0) {\n\t\t\t// Could not find a good breaking point\n\t\t\tbreakOffset = forcedBreakOffset;\n\t\t\tbreakOffsetVisibleColumn = forcedBreakOffsetVisibleColumn;\n\t\t}\n\n\t\tif (breakOffset <= lastBreakingOffset) {\n\t\t\t// Make sure that we are advancing (at least one character)\n\t\t\tconst charCode = lineText.charCodeAt(lastBreakingOffset);\n\t\t\tif (strings.isHighSurrogate(charCode)) {\n\t\t\t\t// A surrogate pair must always be considered as a single unit, so it is never to be broken\n\t\t\t\tbreakOffset = lastBreakingOffset + 2;\n\t\t\t\tbreakOffsetVisibleColumn = lastBreakingOffsetVisibleColumn + 2;\n\t\t\t} else {\n\t\t\t\tbreakOffset = lastBreakingOffset + 1;\n\t\t\t\tbreakOffsetVisibleColumn = lastBreakingOffsetVisibleColumn + computeCharWidth(charCode, lastBreakingOffsetVisibleColumn, tabSize, columnsForFullWidthChar);\n\t\t\t}\n\t\t}\n\n\t\tlastBreakingOffset = breakOffset;\n\t\tbreakingOffsets[breakingOffsetsCount] = breakOffset;\n\t\tlastBreakingOffsetVisibleColumn = breakOffsetVisibleColumn;\n\t\tbreakingOffsetsVisibleColumn[breakingOffsetsCount] = breakOffsetVisibleColumn;\n\t\tbreakingOffsetsCount++;\n\t\tbreakingColumn = breakOffsetVisibleColumn + wrappedLineBreakColumn;\n\n\t\twhile (prevIndex < 0 || (prevIndex < prevLen && prevBreakingOffsetsVisibleColumn[prevIndex] < breakOffsetVisibleColumn)) {\n\t\t\tprevIndex++;\n\t\t}\n\n\t\tlet bestDistance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex] - breakingColumn);\n\t\twhile (prevIndex + 1 < prevLen) {\n\t\t\tconst distance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex + 1] - breakingColumn);\n\t\t\tif (distance >= bestDistance) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbestDistance = distance;\n\t\t\tprevIndex++;\n\t\t}\n\t}\n\n\tif (breakingOffsetsCount === 0) {\n\t\treturn null;\n\t}\n\n\t// Doing here some object reuse which ends up helping a huge deal with GC pauses!\n\tbreakingOffsets.length = breakingOffsetsCount;\n\tbreakingOffsetsVisibleColumn.length = breakingOffsetsCount;\n\tarrPool1 = previousBreakingData.breakOffsets;\n\tarrPool2 = previousBreakingData.breakOffsetsVisibleColumn;\n\tpreviousBreakingData.breakOffsets = breakingOffsets;\n\tpreviousBreakingData.breakOffsetsVisibleColumn = breakingOffsetsVisibleColumn;\n\tpreviousBreakingData.wrappedTextIndentLength = wrappedTextIndentLength;\n\treturn previousBreakingData;\n}\n\nfunction createLineBreaks(classifier: WrappingCharacterClassifier, lineText: string, tabSize: number, firstLineBreakColumn: number, columnsForFullWidthChar: number, wrappingIndent: WrappingIndent): LineBreakData | null {\n\tif (firstLineBreakColumn === -1) {\n\t\treturn null;\n\t}\n\n\tconst len = lineText.length;\n\tif (len <= 1) {\n\t\treturn null;\n\t}\n\n\tconst wrappedTextIndentLength = computeWrappedTextIndentLength(lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent);\n\tconst wrappedLineBreakColumn = firstLineBreakColumn - wrappedTextIndentLength;\n\n\tlet breakingOffsets: number[] = [];\n\tlet breakingOffsetsVisibleColumn: number[] = [];\n\tlet breakingOffsetsCount: number = 0;\n\tlet breakOffset = 0;\n\tlet breakOffsetVisibleColumn = 0;\n\n\tlet breakingColumn = firstLineBreakColumn;\n\tlet prevCharCode = lineText.charCodeAt(0);\n\tlet prevCharCodeClass = classifier.get(prevCharCode);\n\tlet visibleColumn = computeCharWidth(prevCharCode, 0, tabSize, columnsForFullWidthChar);\n\n\tlet startOffset = 1;\n\tif (strings.isHighSurrogate(prevCharCode)) {\n\t\t// A surrogate pair must always be considered as a single unit, so it is never to be broken\n\t\tvisibleColumn += 1;\n\t\tprevCharCode = lineText.charCodeAt(1);\n\t\tprevCharCodeClass = classifier.get(prevCharCode);\n\t\tstartOffset++;\n\t}\n\n\tfor (let i = startOffset; i < len; i++) {\n\t\tconst charStartOffset = i;\n\t\tconst charCode = lineText.charCodeAt(i);\n\t\tlet charCodeClass: number;\n\t\tlet charWidth: number;\n\n\t\tif (strings.isHighSurrogate(charCode)) {\n\t\t\t// A surrogate pair must always be considered as a single unit, so it is never to be broken\n\t\t\ti++;\n\t\t\tcharCodeClass = CharacterClass.NONE;\n\t\t\tcharWidth = 2;\n\t\t} else {\n\t\t\tcharCodeClass = classifier.get(charCode);\n\t\t\tcharWidth = computeCharWidth(charCode, visibleColumn, tabSize, columnsForFullWidthChar);\n\t\t}\n\n\t\tif (canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass)) {\n\t\t\tbreakOffset = charStartOffset;\n\t\t\tbreakOffsetVisibleColumn = visibleColumn;\n\t\t}\n\n\t\tvisibleColumn += charWidth;\n\n\t\t// check if adding character at `i` will go over the breaking column\n\t\tif (visibleColumn > breakingColumn) {\n\t\t\t// We need to break at least before character at `i`:\n\n\t\t\tif (breakOffset === 0 || visibleColumn - breakOffsetVisibleColumn > wrappedLineBreakColumn) {\n\t\t\t\t// Cannot break at `breakOffset`, must break at `i`\n\t\t\t\tbreakOffset = charStartOffset;\n\t\t\t\tbreakOffsetVisibleColumn = visibleColumn - charWidth;\n\t\t\t}\n\n\t\t\tbreakingOffsets[breakingOffsetsCount] = breakOffset;\n\t\t\tbreakingOffsetsVisibleColumn[breakingOffsetsCount] = breakOffsetVisibleColumn;\n\t\t\tbreakingOffsetsCount++;\n\t\t\tbreakingColumn = breakOffsetVisibleColumn + wrappedLineBreakColumn;\n\t\t\tbreakOffset = 0;\n\t\t}\n\n\t\tprevCharCode = charCode;\n\t\tprevCharCodeClass = charCodeClass;\n\t}\n\n\tif (breakingOffsetsCount === 0) {\n\t\treturn null;\n\t}\n\n\t// Add last segment\n\tbreakingOffsets[breakingOffsetsCount] = len;\n\tbreakingOffsetsVisibleColumn[breakingOffsetsCount] = visibleColumn;\n\n\treturn new LineBreakData(breakingOffsets, breakingOffsetsVisibleColumn, wrappedTextIndentLength);\n}\n\nfunction computeCharWidth(charCode: number, visibleColumn: number, tabSize: number, columnsForFullWidthChar: number): number {\n\tif (charCode === CharCode.Tab) {\n\t\treturn (tabSize - (visibleColumn % tabSize));\n\t}\n\tif (strings.isFullWidthCharacter(charCode)) {\n\t\treturn columnsForFullWidthChar;\n\t}\n\tif (charCode < 32) {\n\t\t// when using `editor.renderControlCharacters`, the substitutions are often wide\n\t\treturn columnsForFullWidthChar;\n\t}\n\treturn 1;\n}\n\nfunction tabCharacterWidth(visibleColumn: number, tabSize: number): number {\n\treturn (tabSize - (visibleColumn % tabSize));\n}\n\n/**\n * Kinsoku Shori : Don't break after a leading character, like an open bracket\n * Kinsoku Shori : Don't break before a trailing character, like a period\n */\nfunction canBreak(prevCharCode: number, prevCharCodeClass: CharacterClass, charCode: number, charCodeClass: CharacterClass): boolean {\n\treturn (\n\t\tcharCode !== CharCode.Space\n\t\t&& (\n\t\t\t(prevCharCodeClass === CharacterClass.BREAK_AFTER)\n\t\t\t|| (prevCharCodeClass === CharacterClass.BREAK_IDEOGRAPHIC && charCodeClass !== CharacterClass.BREAK_AFTER)\n\t\t\t|| (charCodeClass === CharacterClass.BREAK_BEFORE)\n\t\t\t|| (charCodeClass === CharacterClass.BREAK_IDEOGRAPHIC && prevCharCodeClass !== CharacterClass.BREAK_BEFORE)\n\t\t)\n\t);\n}\n\nfunction computeWrappedTextIndentLength(lineText: string, tabSize: number, firstLineBreakColumn: number, columnsForFullWidthChar: number, wrappingIndent: WrappingIndent): number {\n\tlet wrappedTextIndentLength = 0;\n\tif (wrappingIndent !== WrappingIndent.None) {\n\t\tconst firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineText);\n\t\tif (firstNonWhitespaceIndex !== -1) {\n\t\t\t// Track existing indent\n\n\t\t\tfor (let i = 0; i < firstNonWhitespaceIndex; i++) {\n\t\t\t\tconst charWidth = (lineText.charCodeAt(i) === CharCode.Tab ? tabCharacterWidth(wrappedTextIndentLength, tabSize) : 1);\n\t\t\t\twrappedTextIndentLength += charWidth;\n\t\t\t}\n\n\t\t\t// Increase indent of continuation lines, if desired\n\t\t\tconst numberOfAdditionalTabs = (wrappingIndent === WrappingIndent.DeepIndent ? 2 : wrappingIndent === WrappingIndent.Indent ? 1 : 0);\n\t\t\tfor (let i = 0; i < numberOfAdditionalTabs; i++) {\n\t\t\t\tconst charWidth = tabCharacterWidth(wrappedTextIndentLength, tabSize);\n\t\t\t\twrappedTextIndentLength += charWidth;\n\t\t\t}\n\n\t\t\t// Force sticking to beginning of line if no character would fit except for the indentation\n\t\t\tif (wrappedTextIndentLength + columnsForFullWidthChar > firstLineBreakColumn) {\n\t\t\t\twrappedTextIndentLength = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn wrappedTextIndentLength;\n}\n"]}