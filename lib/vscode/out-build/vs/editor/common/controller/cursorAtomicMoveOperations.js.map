{"version":3,"file":"cursorAtomicMoveOperations.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/common/controller/cursorAtomicMoveOperations.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from 'vs/base/common/charCode';\nimport { CursorColumns } from 'vs/editor/common/controller/cursorCommon';\n\nexport const enum Direction {\n\tLeft,\n\tRight,\n\tNearest,\n}\n\nexport class AtomicTabMoveOperations {\n\t/**\n\t * Get the visible column at the position. If we get to a non-whitespace character first\n\t * or past the end of string then return -1.\n\t *\n\t * **Note** `position` and the return value are 0-based.\n\t */\n\tpublic static whitespaceVisibleColumn(lineContent: string, position: number, tabSize: number): [number, number, number] {\n\t\tconst lineLength = lineContent.length;\n\t\tlet visibleColumn = 0;\n\t\tlet prevTabStopPosition = -1;\n\t\tlet prevTabStopVisibleColumn = -1;\n\t\tfor (let i = 0; i < lineLength; i++) {\n\t\t\tif (i === position) {\n\t\t\t\treturn [prevTabStopPosition, prevTabStopVisibleColumn, visibleColumn];\n\t\t\t}\n\t\t\tif (visibleColumn % tabSize === 0) {\n\t\t\t\tprevTabStopPosition = i;\n\t\t\t\tprevTabStopVisibleColumn = visibleColumn;\n\t\t\t}\n\t\t\tconst chCode = lineContent.charCodeAt(i);\n\t\t\tswitch (chCode) {\n\t\t\t\tcase CharCode.Space:\n\t\t\t\t\tvisibleColumn += 1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CharCode.Tab:\n\t\t\t\t\t// Skip to the next multiple of tabSize.\n\t\t\t\t\tvisibleColumn = CursorColumns.nextRenderTabStop(visibleColumn, tabSize);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\treturn [-1, -1, -1];\n\t\t\t}\n\t\t}\n\t\tif (position === lineLength) {\n\t\t\treturn [prevTabStopPosition, prevTabStopVisibleColumn, visibleColumn];\n\t\t}\n\t\treturn [-1, -1, -1];\n\t}\n\n\t/**\n\t * Return the position that should result from a move left, right or to the\n\t * nearest tab, if atomic tabs are enabled. Left and right are used for the\n\t * arrow key movements, nearest is used for mouse selection. It returns\n\t * -1 if atomic tabs are not relevant and you should fall back to normal\n\t * behaviour.\n\t *\n\t * **Note**: `position` and the return value are 0-based.\n\t */\n\tpublic static atomicPosition(lineContent: string, position: number, tabSize: number, direction: Direction): number {\n\t\tconst lineLength = lineContent.length;\n\n\t\t// Get the 0-based visible column corresponding to the position, or return\n\t\t// -1 if it is not in the initial whitespace.\n\t\tconst [prevTabStopPosition, prevTabStopVisibleColumn, visibleColumn] = AtomicTabMoveOperations.whitespaceVisibleColumn(lineContent, position, tabSize);\n\n\t\tif (visibleColumn === -1) {\n\t\t\treturn -1;\n\t\t}\n\n\t\t// Is the output left or right of the current position. The case for nearest\n\t\t// where it is the same as the current position is handled in the switch.\n\t\tlet left: boolean;\n\t\tswitch (direction) {\n\t\t\tcase Direction.Left:\n\t\t\t\tleft = true;\n\t\t\t\tbreak;\n\t\t\tcase Direction.Right:\n\t\t\t\tleft = false;\n\t\t\t\tbreak;\n\t\t\tcase Direction.Nearest:\n\t\t\t\t// The code below assumes the output position is either left or right\n\t\t\t\t// of the input position. If it is the same, return immediately.\n\t\t\t\tif (visibleColumn % tabSize === 0) {\n\t\t\t\t\treturn position;\n\t\t\t\t}\n\t\t\t\t// Go to the nearest indentation.\n\t\t\t\tleft = visibleColumn % tabSize <= (tabSize / 2);\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// If going left, we can just use the info about the last tab stop position and\n\t\t// last tab stop visible column that we computed in the first walk over the whitespace.\n\t\tif (left) {\n\t\t\tif (prevTabStopPosition === -1) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\t// If the direction is left, we need to keep scanning right to ensure\n\t\t\t// that targetVisibleColumn + tabSize is before non-whitespace.\n\t\t\t// This is so that when we press left at the end of a partial\n\t\t\t// indentation it only goes one character. For example '      foo' with\n\t\t\t// tabSize 4, should jump from position 6 to position 5, not 4.\n\t\t\tlet currentVisibleColumn = prevTabStopVisibleColumn;\n\t\t\tfor (let i = prevTabStopPosition; i < lineLength; ++i) {\n\t\t\t\tif (currentVisibleColumn === prevTabStopVisibleColumn + tabSize) {\n\t\t\t\t\t// It is a full indentation.\n\t\t\t\t\treturn prevTabStopPosition;\n\t\t\t\t}\n\n\t\t\t\tconst chCode = lineContent.charCodeAt(i);\n\t\t\t\tswitch (chCode) {\n\t\t\t\t\tcase CharCode.Space:\n\t\t\t\t\t\tcurrentVisibleColumn += 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase CharCode.Tab:\n\t\t\t\t\t\tcurrentVisibleColumn = CursorColumns.nextRenderTabStop(currentVisibleColumn, tabSize);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (currentVisibleColumn === prevTabStopVisibleColumn + tabSize) {\n\t\t\t\treturn prevTabStopPosition;\n\t\t\t}\n\t\t\t// It must have been a partial indentation.\n\t\t\treturn -1;\n\t\t}\n\n\t\t// We are going right.\n\t\tconst targetVisibleColumn = CursorColumns.nextRenderTabStop(visibleColumn, tabSize);\n\n\t\t// We can just continue from where whitespaceVisibleColumn got to.\n\t\tlet currentVisibleColumn = visibleColumn;\n\t\tfor (let i = position; i < lineLength; i++) {\n\t\t\tif (currentVisibleColumn === targetVisibleColumn) {\n\t\t\t\treturn i;\n\t\t\t}\n\n\t\t\tconst chCode = lineContent.charCodeAt(i);\n\t\t\tswitch (chCode) {\n\t\t\t\tcase CharCode.Space:\n\t\t\t\t\tcurrentVisibleColumn += 1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CharCode.Tab:\n\t\t\t\t\tcurrentVisibleColumn = CursorColumns.nextRenderTabStop(currentVisibleColumn, tabSize);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t\t// This condition handles when the target column is at the end of the line.\n\t\tif (currentVisibleColumn === targetVisibleColumn) {\n\t\t\treturn lineLength;\n\t\t}\n\t\treturn -1;\n\t}\n}\n"]}