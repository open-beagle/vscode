{"version":3,"file":"cursorCommon.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/common/controller/cursorCommon.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from 'vs/base/common/charCode';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport * as strings from 'vs/base/common/strings';\nimport { EditorAutoClosingStrategy, EditorAutoSurroundStrategy, ConfigurationChangedEvent, EditorAutoClosingEditStrategy, EditorOption, EditorAutoIndentStrategy } from 'vs/editor/common/config/editorOptions';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { ISelection, Selection } from 'vs/editor/common/core/selection';\nimport { ICommand, IConfiguration } from 'vs/editor/common/editorCommon';\nimport { ITextModel, TextModelResolvedOptions } from 'vs/editor/common/model';\nimport { TextModel } from 'vs/editor/common/model/textModel';\nimport { LanguageIdentifier } from 'vs/editor/common/modes';\nimport { AutoClosingPairs, IAutoClosingPair } from 'vs/editor/common/modes/languageConfiguration';\nimport { LanguageConfigurationRegistry } from 'vs/editor/common/modes/languageConfigurationRegistry';\nimport { ICoordinatesConverter } from 'vs/editor/common/viewModel/viewModel';\nimport { Constants } from 'vs/base/common/uint';\n\nexport interface IColumnSelectData {\n\tisReal: boolean;\n\tfromViewLineNumber: number;\n\tfromViewVisualColumn: number;\n\ttoViewLineNumber: number;\n\ttoViewVisualColumn: number;\n}\n\nexport const enum RevealTarget {\n\tPrimary = 0,\n\tTopMost = 1,\n\tBottomMost = 2\n}\n\n/**\n * This is an operation type that will be recorded for undo/redo purposes.\n * The goal is to introduce an undo stop when the controller switches between different operation types.\n */\nexport const enum EditOperationType {\n\tOther = 0,\n\tTyping = 1,\n\tDeletingLeft = 2,\n\tDeletingRight = 3\n}\n\nexport interface CharacterMap {\n\t[char: string]: string;\n}\nexport interface MultipleCharacterMap {\n\t[char: string]: string[];\n}\n\nconst autoCloseAlways = () => true;\nconst autoCloseNever = () => false;\nconst autoCloseBeforeWhitespace = (chr: string) => (chr === ' ' || chr === '\\t');\n\nexport class CursorConfiguration {\n\t_cursorMoveConfigurationBrand: void;\n\n\tpublic readonly readOnly: boolean;\n\tpublic readonly tabSize: number;\n\tpublic readonly indentSize: number;\n\tpublic readonly insertSpaces: boolean;\n\tpublic readonly stickyTabStops: boolean;\n\tpublic readonly pageSize: number;\n\tpublic readonly lineHeight: number;\n\tpublic readonly useTabStops: boolean;\n\tpublic readonly wordSeparators: string;\n\tpublic readonly emptySelectionClipboard: boolean;\n\tpublic readonly copyWithSyntaxHighlighting: boolean;\n\tpublic readonly multiCursorMergeOverlapping: boolean;\n\tpublic readonly multiCursorPaste: 'spread' | 'full';\n\tpublic readonly autoClosingBrackets: EditorAutoClosingStrategy;\n\tpublic readonly autoClosingQuotes: EditorAutoClosingStrategy;\n\tpublic readonly autoClosingDelete: EditorAutoClosingEditStrategy;\n\tpublic readonly autoClosingOvertype: EditorAutoClosingEditStrategy;\n\tpublic readonly autoSurround: EditorAutoSurroundStrategy;\n\tpublic readonly autoIndent: EditorAutoIndentStrategy;\n\tpublic readonly autoClosingPairs: AutoClosingPairs;\n\tpublic readonly surroundingPairs: CharacterMap;\n\tpublic readonly shouldAutoCloseBefore: { quote: (ch: string) => boolean, bracket: (ch: string) => boolean };\n\n\tprivate readonly _languageIdentifier: LanguageIdentifier;\n\tprivate _electricChars: { [key: string]: boolean; } | null;\n\n\tpublic static shouldRecreate(e: ConfigurationChangedEvent): boolean {\n\t\treturn (\n\t\t\te.hasChanged(EditorOption.layoutInfo)\n\t\t\t|| e.hasChanged(EditorOption.wordSeparators)\n\t\t\t|| e.hasChanged(EditorOption.emptySelectionClipboard)\n\t\t\t|| e.hasChanged(EditorOption.multiCursorMergeOverlapping)\n\t\t\t|| e.hasChanged(EditorOption.multiCursorPaste)\n\t\t\t|| e.hasChanged(EditorOption.autoClosingBrackets)\n\t\t\t|| e.hasChanged(EditorOption.autoClosingQuotes)\n\t\t\t|| e.hasChanged(EditorOption.autoClosingDelete)\n\t\t\t|| e.hasChanged(EditorOption.autoClosingOvertype)\n\t\t\t|| e.hasChanged(EditorOption.autoSurround)\n\t\t\t|| e.hasChanged(EditorOption.useTabStops)\n\t\t\t|| e.hasChanged(EditorOption.lineHeight)\n\t\t\t|| e.hasChanged(EditorOption.readOnly)\n\t\t);\n\t}\n\n\tconstructor(\n\t\tlanguageIdentifier: LanguageIdentifier,\n\t\tmodelOptions: TextModelResolvedOptions,\n\t\tconfiguration: IConfiguration\n\t) {\n\t\tthis._languageIdentifier = languageIdentifier;\n\n\t\tconst options = configuration.options;\n\t\tconst layoutInfo = options.get(EditorOption.layoutInfo);\n\n\t\tthis.readOnly = options.get(EditorOption.readOnly);\n\t\tthis.tabSize = modelOptions.tabSize;\n\t\tthis.indentSize = modelOptions.indentSize;\n\t\tthis.insertSpaces = modelOptions.insertSpaces;\n\t\tthis.stickyTabStops = options.get(EditorOption.stickyTabStops);\n\t\tthis.lineHeight = options.get(EditorOption.lineHeight);\n\t\tthis.pageSize = Math.max(1, Math.floor(layoutInfo.height / this.lineHeight) - 2);\n\t\tthis.useTabStops = options.get(EditorOption.useTabStops);\n\t\tthis.wordSeparators = options.get(EditorOption.wordSeparators);\n\t\tthis.emptySelectionClipboard = options.get(EditorOption.emptySelectionClipboard);\n\t\tthis.copyWithSyntaxHighlighting = options.get(EditorOption.copyWithSyntaxHighlighting);\n\t\tthis.multiCursorMergeOverlapping = options.get(EditorOption.multiCursorMergeOverlapping);\n\t\tthis.multiCursorPaste = options.get(EditorOption.multiCursorPaste);\n\t\tthis.autoClosingBrackets = options.get(EditorOption.autoClosingBrackets);\n\t\tthis.autoClosingQuotes = options.get(EditorOption.autoClosingQuotes);\n\t\tthis.autoClosingDelete = options.get(EditorOption.autoClosingDelete);\n\t\tthis.autoClosingOvertype = options.get(EditorOption.autoClosingOvertype);\n\t\tthis.autoSurround = options.get(EditorOption.autoSurround);\n\t\tthis.autoIndent = options.get(EditorOption.autoIndent);\n\n\t\tthis.surroundingPairs = {};\n\t\tthis._electricChars = null;\n\n\t\tthis.shouldAutoCloseBefore = {\n\t\t\tquote: CursorConfiguration._getShouldAutoClose(languageIdentifier, this.autoClosingQuotes),\n\t\t\tbracket: CursorConfiguration._getShouldAutoClose(languageIdentifier, this.autoClosingBrackets)\n\t\t};\n\n\t\tthis.autoClosingPairs = LanguageConfigurationRegistry.getAutoClosingPairs(languageIdentifier.id);\n\n\t\tlet surroundingPairs = CursorConfiguration._getSurroundingPairs(languageIdentifier);\n\t\tif (surroundingPairs) {\n\t\t\tfor (const pair of surroundingPairs) {\n\t\t\t\tthis.surroundingPairs[pair.open] = pair.close;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic get electricChars() {\n\t\tif (!this._electricChars) {\n\t\t\tthis._electricChars = {};\n\t\t\tlet electricChars = CursorConfiguration._getElectricCharacters(this._languageIdentifier);\n\t\t\tif (electricChars) {\n\t\t\t\tfor (const char of electricChars) {\n\t\t\t\t\tthis._electricChars[char] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this._electricChars;\n\t}\n\n\tpublic normalizeIndentation(str: string): string {\n\t\treturn TextModel.normalizeIndentation(str, this.indentSize, this.insertSpaces);\n\t}\n\n\tprivate static _getElectricCharacters(languageIdentifier: LanguageIdentifier): string[] | null {\n\t\ttry {\n\t\t\treturn LanguageConfigurationRegistry.getElectricCharacters(languageIdentifier.id);\n\t\t} catch (e) {\n\t\t\tonUnexpectedError(e);\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tprivate static _getShouldAutoClose(languageIdentifier: LanguageIdentifier, autoCloseConfig: EditorAutoClosingStrategy): (ch: string) => boolean {\n\t\tswitch (autoCloseConfig) {\n\t\t\tcase 'beforeWhitespace':\n\t\t\t\treturn autoCloseBeforeWhitespace;\n\t\t\tcase 'languageDefined':\n\t\t\t\treturn CursorConfiguration._getLanguageDefinedShouldAutoClose(languageIdentifier);\n\t\t\tcase 'always':\n\t\t\t\treturn autoCloseAlways;\n\t\t\tcase 'never':\n\t\t\t\treturn autoCloseNever;\n\t\t}\n\t}\n\n\tprivate static _getLanguageDefinedShouldAutoClose(languageIdentifier: LanguageIdentifier): (ch: string) => boolean {\n\t\ttry {\n\t\t\tconst autoCloseBeforeSet = LanguageConfigurationRegistry.getAutoCloseBeforeSet(languageIdentifier.id);\n\t\t\treturn c => autoCloseBeforeSet.indexOf(c) !== -1;\n\t\t} catch (e) {\n\t\t\tonUnexpectedError(e);\n\t\t\treturn autoCloseNever;\n\t\t}\n\t}\n\n\tprivate static _getSurroundingPairs(languageIdentifier: LanguageIdentifier): IAutoClosingPair[] | null {\n\t\ttry {\n\t\t\treturn LanguageConfigurationRegistry.getSurroundingPairs(languageIdentifier.id);\n\t\t} catch (e) {\n\t\t\tonUnexpectedError(e);\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\n/**\n * Represents a simple model (either the model or the view model).\n */\nexport interface ICursorSimpleModel {\n\tgetLineCount(): number;\n\tgetLineContent(lineNumber: number): string;\n\tgetLineMinColumn(lineNumber: number): number;\n\tgetLineMaxColumn(lineNumber: number): number;\n\tgetLineFirstNonWhitespaceColumn(lineNumber: number): number;\n\tgetLineLastNonWhitespaceColumn(lineNumber: number): number;\n}\n\n/**\n * Represents the cursor state on either the model or on the view model.\n */\nexport class SingleCursorState {\n\t_singleCursorStateBrand: void;\n\n\t// --- selection can start as a range (think double click and drag)\n\tpublic readonly selectionStart: Range;\n\tpublic readonly selectionStartLeftoverVisibleColumns: number;\n\tpublic readonly position: Position;\n\tpublic readonly leftoverVisibleColumns: number;\n\tpublic readonly selection: Selection;\n\n\tconstructor(\n\t\tselectionStart: Range,\n\t\tselectionStartLeftoverVisibleColumns: number,\n\t\tposition: Position,\n\t\tleftoverVisibleColumns: number,\n\t) {\n\t\tthis.selectionStart = selectionStart;\n\t\tthis.selectionStartLeftoverVisibleColumns = selectionStartLeftoverVisibleColumns;\n\t\tthis.position = position;\n\t\tthis.leftoverVisibleColumns = leftoverVisibleColumns;\n\t\tthis.selection = SingleCursorState._computeSelection(this.selectionStart, this.position);\n\t}\n\n\tpublic equals(other: SingleCursorState) {\n\t\treturn (\n\t\t\tthis.selectionStartLeftoverVisibleColumns === other.selectionStartLeftoverVisibleColumns\n\t\t\t&& this.leftoverVisibleColumns === other.leftoverVisibleColumns\n\t\t\t&& this.position.equals(other.position)\n\t\t\t&& this.selectionStart.equalsRange(other.selectionStart)\n\t\t);\n\t}\n\n\tpublic hasSelection(): boolean {\n\t\treturn (!this.selection.isEmpty() || !this.selectionStart.isEmpty());\n\t}\n\n\tpublic move(inSelectionMode: boolean, lineNumber: number, column: number, leftoverVisibleColumns: number): SingleCursorState {\n\t\tif (inSelectionMode) {\n\t\t\t// move just position\n\t\t\treturn new SingleCursorState(\n\t\t\t\tthis.selectionStart,\n\t\t\t\tthis.selectionStartLeftoverVisibleColumns,\n\t\t\t\tnew Position(lineNumber, column),\n\t\t\t\tleftoverVisibleColumns\n\t\t\t);\n\t\t} else {\n\t\t\t// move everything\n\t\t\treturn new SingleCursorState(\n\t\t\t\tnew Range(lineNumber, column, lineNumber, column),\n\t\t\t\tleftoverVisibleColumns,\n\t\t\t\tnew Position(lineNumber, column),\n\t\t\t\tleftoverVisibleColumns\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate static _computeSelection(selectionStart: Range, position: Position): Selection {\n\t\tlet startLineNumber: number, startColumn: number, endLineNumber: number, endColumn: number;\n\t\tif (selectionStart.isEmpty()) {\n\t\t\tstartLineNumber = selectionStart.startLineNumber;\n\t\t\tstartColumn = selectionStart.startColumn;\n\t\t\tendLineNumber = position.lineNumber;\n\t\t\tendColumn = position.column;\n\t\t} else {\n\t\t\tif (position.isBeforeOrEqual(selectionStart.getStartPosition())) {\n\t\t\t\tstartLineNumber = selectionStart.endLineNumber;\n\t\t\t\tstartColumn = selectionStart.endColumn;\n\t\t\t\tendLineNumber = position.lineNumber;\n\t\t\t\tendColumn = position.column;\n\t\t\t} else {\n\t\t\t\tstartLineNumber = selectionStart.startLineNumber;\n\t\t\t\tstartColumn = selectionStart.startColumn;\n\t\t\t\tendLineNumber = position.lineNumber;\n\t\t\t\tendColumn = position.column;\n\t\t\t}\n\t\t}\n\t\treturn new Selection(\n\t\t\tstartLineNumber,\n\t\t\tstartColumn,\n\t\t\tendLineNumber,\n\t\t\tendColumn\n\t\t);\n\t}\n}\n\nexport class CursorContext {\n\t_cursorContextBrand: void;\n\n\tpublic readonly model: ITextModel;\n\tpublic readonly coordinatesConverter: ICoordinatesConverter;\n\tpublic readonly cursorConfig: CursorConfiguration;\n\n\tconstructor(model: ITextModel, coordinatesConverter: ICoordinatesConverter, cursorConfig: CursorConfiguration) {\n\t\tthis.model = model;\n\t\tthis.coordinatesConverter = coordinatesConverter;\n\t\tthis.cursorConfig = cursorConfig;\n\t}\n}\n\nexport class PartialModelCursorState {\n\treadonly modelState: SingleCursorState;\n\treadonly viewState: null;\n\n\tconstructor(modelState: SingleCursorState) {\n\t\tthis.modelState = modelState;\n\t\tthis.viewState = null;\n\t}\n}\n\nexport class PartialViewCursorState {\n\treadonly modelState: null;\n\treadonly viewState: SingleCursorState;\n\n\tconstructor(viewState: SingleCursorState) {\n\t\tthis.modelState = null;\n\t\tthis.viewState = viewState;\n\t}\n}\n\nexport type PartialCursorState = CursorState | PartialModelCursorState | PartialViewCursorState;\n\nexport class CursorState {\n\t_cursorStateBrand: void;\n\n\tpublic static fromModelState(modelState: SingleCursorState): PartialModelCursorState {\n\t\treturn new PartialModelCursorState(modelState);\n\t}\n\n\tpublic static fromViewState(viewState: SingleCursorState): PartialViewCursorState {\n\t\treturn new PartialViewCursorState(viewState);\n\t}\n\n\tpublic static fromModelSelection(modelSelection: ISelection): PartialModelCursorState {\n\t\tconst selectionStartLineNumber = modelSelection.selectionStartLineNumber;\n\t\tconst selectionStartColumn = modelSelection.selectionStartColumn;\n\t\tconst positionLineNumber = modelSelection.positionLineNumber;\n\t\tconst positionColumn = modelSelection.positionColumn;\n\t\tconst modelState = new SingleCursorState(\n\t\t\tnew Range(selectionStartLineNumber, selectionStartColumn, selectionStartLineNumber, selectionStartColumn), 0,\n\t\t\tnew Position(positionLineNumber, positionColumn), 0\n\t\t);\n\t\treturn CursorState.fromModelState(modelState);\n\t}\n\n\tpublic static fromModelSelections(modelSelections: readonly ISelection[]): PartialModelCursorState[] {\n\t\tlet states: PartialModelCursorState[] = [];\n\t\tfor (let i = 0, len = modelSelections.length; i < len; i++) {\n\t\t\tstates[i] = this.fromModelSelection(modelSelections[i]);\n\t\t}\n\t\treturn states;\n\t}\n\n\treadonly modelState: SingleCursorState;\n\treadonly viewState: SingleCursorState;\n\n\tconstructor(modelState: SingleCursorState, viewState: SingleCursorState) {\n\t\tthis.modelState = modelState;\n\t\tthis.viewState = viewState;\n\t}\n\n\tpublic equals(other: CursorState): boolean {\n\t\treturn (this.viewState.equals(other.viewState) && this.modelState.equals(other.modelState));\n\t}\n}\n\nexport class EditOperationResult {\n\t_editOperationResultBrand: void;\n\n\treadonly type: EditOperationType;\n\treadonly commands: Array<ICommand | null>;\n\treadonly shouldPushStackElementBefore: boolean;\n\treadonly shouldPushStackElementAfter: boolean;\n\n\tconstructor(\n\t\ttype: EditOperationType,\n\t\tcommands: Array<ICommand | null>,\n\t\topts: {\n\t\t\tshouldPushStackElementBefore: boolean;\n\t\t\tshouldPushStackElementAfter: boolean;\n\t\t}\n\t) {\n\t\tthis.type = type;\n\t\tthis.commands = commands;\n\t\tthis.shouldPushStackElementBefore = opts.shouldPushStackElementBefore;\n\t\tthis.shouldPushStackElementAfter = opts.shouldPushStackElementAfter;\n\t}\n}\n\n/**\n * Common operations that work and make sense both on the model and on the view model.\n */\nexport class CursorColumns {\n\n\tpublic static visibleColumnFromColumn(lineContent: string, column: number, tabSize: number): number {\n\t\tconst lineContentLength = lineContent.length;\n\t\tconst endOffset = column - 1 < lineContentLength ? column - 1 : lineContentLength;\n\n\t\tlet result = 0;\n\t\tlet i = 0;\n\t\twhile (i < endOffset) {\n\t\t\tconst codePoint = strings.getNextCodePoint(lineContent, endOffset, i);\n\t\t\ti += (codePoint >= Constants.UNICODE_SUPPLEMENTARY_PLANE_BEGIN ? 2 : 1);\n\n\t\t\tif (codePoint === CharCode.Tab) {\n\t\t\t\tresult = CursorColumns.nextRenderTabStop(result, tabSize);\n\t\t\t} else {\n\t\t\t\tlet graphemeBreakType = strings.getGraphemeBreakType(codePoint);\n\t\t\t\twhile (i < endOffset) {\n\t\t\t\t\tconst nextCodePoint = strings.getNextCodePoint(lineContent, endOffset, i);\n\t\t\t\t\tconst nextGraphemeBreakType = strings.getGraphemeBreakType(nextCodePoint);\n\t\t\t\t\tif (strings.breakBetweenGraphemeBreakType(graphemeBreakType, nextGraphemeBreakType)) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\ti += (nextCodePoint >= Constants.UNICODE_SUPPLEMENTARY_PLANE_BEGIN ? 2 : 1);\n\t\t\t\t\tgraphemeBreakType = nextGraphemeBreakType;\n\t\t\t\t}\n\t\t\t\tif (strings.isFullWidthCharacter(codePoint) || strings.isEmojiImprecise(codePoint)) {\n\t\t\t\t\tresult = result + 2;\n\t\t\t\t} else {\n\t\t\t\t\tresult = result + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic static toStatusbarColumn(lineContent: string, column: number, tabSize: number): number {\n\t\tconst lineContentLength = lineContent.length;\n\t\tconst endOffset = column - 1 < lineContentLength ? column - 1 : lineContentLength;\n\n\t\tlet result = 0;\n\t\tlet i = 0;\n\t\twhile (i < endOffset) {\n\t\t\tconst codePoint = strings.getNextCodePoint(lineContent, endOffset, i);\n\t\t\ti += (codePoint >= Constants.UNICODE_SUPPLEMENTARY_PLANE_BEGIN ? 2 : 1);\n\n\t\t\tif (codePoint === CharCode.Tab) {\n\t\t\t\tresult = CursorColumns.nextRenderTabStop(result, tabSize);\n\t\t\t} else {\n\t\t\t\tresult = result + 1;\n\t\t\t}\n\t\t}\n\n\t\treturn result + 1;\n\t}\n\n\tpublic static visibleColumnFromColumn2(config: CursorConfiguration, model: ICursorSimpleModel, position: Position): number {\n\t\treturn this.visibleColumnFromColumn(model.getLineContent(position.lineNumber), position.column, config.tabSize);\n\t}\n\n\tpublic static columnFromVisibleColumn(lineContent: string, visibleColumn: number, tabSize: number): number {\n\t\tif (visibleColumn <= 0) {\n\t\t\treturn 1;\n\t\t}\n\n\t\tconst lineLength = lineContent.length;\n\n\t\tlet beforeVisibleColumn = 0;\n\t\tlet beforeColumn = 1;\n\t\tlet i = 0;\n\t\twhile (i < lineLength) {\n\t\t\tconst codePoint = strings.getNextCodePoint(lineContent, lineLength, i);\n\t\t\ti += (codePoint >= Constants.UNICODE_SUPPLEMENTARY_PLANE_BEGIN ? 2 : 1);\n\n\t\t\tlet afterVisibleColumn: number;\n\t\t\tif (codePoint === CharCode.Tab) {\n\t\t\t\tafterVisibleColumn = CursorColumns.nextRenderTabStop(beforeVisibleColumn, tabSize);\n\t\t\t} else {\n\t\t\t\tlet graphemeBreakType = strings.getGraphemeBreakType(codePoint);\n\t\t\t\twhile (i < lineLength) {\n\t\t\t\t\tconst nextCodePoint = strings.getNextCodePoint(lineContent, lineLength, i);\n\t\t\t\t\tconst nextGraphemeBreakType = strings.getGraphemeBreakType(nextCodePoint);\n\t\t\t\t\tif (strings.breakBetweenGraphemeBreakType(graphemeBreakType, nextGraphemeBreakType)) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\ti += (nextCodePoint >= Constants.UNICODE_SUPPLEMENTARY_PLANE_BEGIN ? 2 : 1);\n\t\t\t\t\tgraphemeBreakType = nextGraphemeBreakType;\n\t\t\t\t}\n\t\t\t\tif (strings.isFullWidthCharacter(codePoint) || strings.isEmojiImprecise(codePoint)) {\n\t\t\t\t\tafterVisibleColumn = beforeVisibleColumn + 2;\n\t\t\t\t} else {\n\t\t\t\t\tafterVisibleColumn = beforeVisibleColumn + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst afterColumn = i + 1;\n\n\t\t\tif (afterVisibleColumn >= visibleColumn) {\n\t\t\t\tconst beforeDelta = visibleColumn - beforeVisibleColumn;\n\t\t\t\tconst afterDelta = afterVisibleColumn - visibleColumn;\n\t\t\t\tif (afterDelta < beforeDelta) {\n\t\t\t\t\treturn afterColumn;\n\t\t\t\t} else {\n\t\t\t\t\treturn beforeColumn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbeforeVisibleColumn = afterVisibleColumn;\n\t\t\tbeforeColumn = afterColumn;\n\t\t}\n\n\t\t// walked the entire string\n\t\treturn lineLength + 1;\n\t}\n\n\tpublic static columnFromVisibleColumn2(config: CursorConfiguration, model: ICursorSimpleModel, lineNumber: number, visibleColumn: number): number {\n\t\tlet result = this.columnFromVisibleColumn(model.getLineContent(lineNumber), visibleColumn, config.tabSize);\n\n\t\tlet minColumn = model.getLineMinColumn(lineNumber);\n\t\tif (result < minColumn) {\n\t\t\treturn minColumn;\n\t\t}\n\n\t\tlet maxColumn = model.getLineMaxColumn(lineNumber);\n\t\tif (result > maxColumn) {\n\t\t\treturn maxColumn;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * ATTENTION: This works with 0-based columns (as oposed to the regular 1-based columns)\n\t */\n\tpublic static nextRenderTabStop(visibleColumn: number, tabSize: number): number {\n\t\treturn visibleColumn + tabSize - visibleColumn % tabSize;\n\t}\n\n\t/**\n\t * ATTENTION: This works with 0-based columns (as oposed to the regular 1-based columns)\n\t */\n\tpublic static nextIndentTabStop(visibleColumn: number, indentSize: number): number {\n\t\treturn visibleColumn + indentSize - visibleColumn % indentSize;\n\t}\n\n\t/**\n\t * ATTENTION: This works with 0-based columns (as opposed to the regular 1-based columns)\n\t */\n\tpublic static prevRenderTabStop(column: number, tabSize: number): number {\n\t\treturn Math.max(0, column - 1 - (column - 1) % tabSize);\n\t}\n\n\t/**\n\t * ATTENTION: This works with 0-based columns (as opposed to the regular 1-based columns)\n\t */\n\tpublic static prevIndentTabStop(column: number, indentSize: number): number {\n\t\treturn Math.max(0, column - 1 - (column - 1) % indentSize);\n\t}\n}\n\nexport function isQuote(ch: string): boolean {\n\treturn (ch === '\\'' || ch === '\"' || ch === '`');\n}\n"]}