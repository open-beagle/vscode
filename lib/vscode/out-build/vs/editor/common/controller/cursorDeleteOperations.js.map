{"version":3,"file":"cursorDeleteOperations.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/common/controller/cursorDeleteOperations.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAYhG,MAAa,gBAAgB;QAErB,MAAM,CAAC,WAAW,CAAC,qBAAwC,EAAE,MAA2B,EAAE,KAAyB,EAAE,UAAuB;YAClJ,IAAI,QAAQ,GAA2B,EAAE,CAAC;YAC1C,IAAI,4BAA4B,GAAG,CAAC,qBAAqB,0BAAoC,CAAC,CAAC;YAC/F,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;gBACtD,MAAM,SAAS,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;gBAEhC,IAAI,eAAe,GAAU,SAAS,CAAC;gBAEvC,IAAI,eAAe,CAAC,OAAO,EAAE,EAAE;oBAC9B,IAAI,QAAQ,GAAG,SAAS,CAAC,WAAW,EAAE,CAAC;oBACvC,IAAI,eAAe,GAAG,qCAAc,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,EAAE,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;oBAChG,eAAe,GAAG,IAAI,aAAK,CAC1B,eAAe,CAAC,UAAU,EAC1B,eAAe,CAAC,MAAM,EACtB,QAAQ,CAAC,UAAU,EACnB,QAAQ,CAAC,MAAM,CACf,CAAC;iBACF;gBAED,IAAI,eAAe,CAAC,OAAO,EAAE,EAAE;oBAC9B,oCAAoC;oBACpC,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;oBACnB,SAAS;iBACT;gBAED,IAAI,eAAe,CAAC,eAAe,KAAK,eAAe,CAAC,aAAa,EAAE;oBACtE,4BAA4B,GAAG,IAAI,CAAC;iBACpC;gBAED,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,+BAAc,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC;aACtD;YACD,OAAO,CAAC,4BAA4B,EAAE,QAAQ,CAAC,CAAC;QACjD,CAAC;QAEM,MAAM,CAAC,uBAAuB,CACpC,iBAAgD,EAChD,mBAA8C,EAC9C,iBAA4C,EAC5C,oBAAuE,EACvE,KAAyB,EACzB,UAAuB,EACvB,oBAA6B;YAE7B,IAAI,mBAAmB,KAAK,OAAO,IAAI,iBAAiB,KAAK,OAAO,EAAE;gBACrE,OAAO,KAAK,CAAC;aACb;YACD,IAAI,iBAAiB,KAAK,OAAO,EAAE;gBAClC,OAAO,KAAK,CAAC;aACb;YAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;gBACtD,MAAM,SAAS,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;gBAChC,MAAM,QAAQ,GAAG,SAAS,CAAC,WAAW,EAAE,CAAC;gBAEzC,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,EAAE;oBACzB,OAAO,KAAK,CAAC;iBACb;gBAED,MAAM,QAAQ,GAAG,KAAK,CAAC,cAAc,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;gBAC3D,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,IAAI,QAAQ,CAAC,MAAM,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;oBAClE,OAAO,KAAK,CAAC;iBACb;gBACD,MAAM,SAAS,GAAG,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;gBAEvD,MAAM,yBAAyB,GAAG,oBAAoB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;gBACtE,IAAI,CAAC,yBAAyB,EAAE;oBAC/B,OAAO,KAAK,CAAC;iBACb;gBAED,IAAI,CAAA,GAAA,sBAAO,CAAA,CAAC,SAAS,CAAC,EAAE;oBACvB,IAAI,iBAAiB,KAAK,OAAO,EAAE;wBAClC,OAAO,KAAK,CAAC;qBACb;iBACD;qBAAM;oBACN,IAAI,mBAAmB,KAAK,OAAO,EAAE;wBACpC,OAAO,KAAK,CAAC;qBACb;iBACD;gBAED,MAAM,cAAc,GAAG,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;gBAE5D,IAAI,oBAAoB,GAAG,KAAK,CAAC;gBACjC,KAAK,MAAM,wBAAwB,IAAI,yBAAyB,EAAE;oBACjE,IAAI,wBAAwB,CAAC,IAAI,KAAK,SAAS,IAAI,wBAAwB,CAAC,KAAK,KAAK,cAAc,EAAE;wBACrG,oBAAoB,GAAG,IAAI,CAAC;qBAC5B;iBACD;gBACD,IAAI,CAAC,oBAAoB,EAAE;oBAC1B,OAAO,KAAK,CAAC;iBACb;gBAED,2EAA2E;gBAC3E,IAAI,iBAAiB,KAAK,MAAM,EAAE;oBACjC,IAAI,KAAK,GAAG,KAAK,CAAC;oBAClB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,GAAG,oBAAoB,CAAC,MAAM,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE;wBAClE,MAAM,mBAAmB,GAAG,oBAAoB,CAAC,CAAC,CAAC,CAAC;wBACpD,IAAI,QAAQ,CAAC,UAAU,KAAK,mBAAmB,CAAC,eAAe,IAAI,QAAQ,CAAC,MAAM,KAAK,mBAAmB,CAAC,WAAW,EAAE;4BACvH,KAAK,GAAG,IAAI,CAAC;4BACb,MAAM;yBACN;qBACD;oBACD,IAAI,CAAC,KAAK,EAAE;wBACX,OAAO,KAAK,CAAC;qBACb;iBACD;aACD;YAED,OAAO,IAAI,CAAC;QACb,CAAC;QAEO,MAAM,CAAC,yBAAyB,CAAC,MAA2B,EAAE,KAAyB,EAAE,UAAuB;YACvH,IAAI,QAAQ,GAAe,EAAE,CAAC;YAC9B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;gBACtD,MAAM,QAAQ,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;gBAC7C,MAAM,eAAe,GAAG,IAAI,aAAK,CAChC,QAAQ,CAAC,UAAU,EACnB,QAAQ,CAAC,MAAM,GAAG,CAAC,EACnB,QAAQ,CAAC,UAAU,EACnB,QAAQ,CAAC,MAAM,GAAG,CAAC,CACnB,CAAC;gBACF,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,+BAAc,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC;aACtD;YACD,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QACzB,CAAC;QAEM,MAAM,CAAC,UAAU,CAAC,qBAAwC,EAAE,MAA2B,EAAE,KAAyB,EAAE,UAAuB,EAAE,oBAA6B;YAEhL,IAAI,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,iBAAiB,EAAE,MAAM,CAAC,mBAAmB,EAAE,MAAM,CAAC,iBAAiB,EAAE,MAAM,CAAC,gBAAgB,CAAC,yBAAyB,EAAE,KAAK,EAAE,UAAU,EAAE,oBAAoB,CAAC,EAAE;gBAC7M,OAAO,IAAI,CAAC,yBAAyB,CAAC,MAAM,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC;aACjE;YAED,IAAI,QAAQ,GAA2B,EAAE,CAAC;YAC1C,IAAI,4BAA4B,GAAG,CAAC,qBAAqB,yBAAmC,CAAC,CAAC;YAC9F,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;gBACtD,MAAM,SAAS,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;gBAEhC,IAAI,eAAe,GAAU,SAAS,CAAC;gBAEvC,IAAI,eAAe,CAAC,OAAO,EAAE,EAAE;oBAC9B,IAAI,QAAQ,GAAG,SAAS,CAAC,WAAW,EAAE,CAAC;oBAEvC,IAAI,MAAM,CAAC,WAAW,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;wBAC9C,IAAI,WAAW,GAAG,KAAK,CAAC,cAAc,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;wBAE5D,IAAI,uBAAuB,GAAG,OAAO,CAAC,uBAAuB,CAAC,WAAW,CAAC,CAAC;wBAC3E,IAAI,qBAAqB,GAAG,CAC3B,uBAAuB,KAAK,CAAC,CAAC;4BAC7B,CAAC,CAAC,iCAAiC,CAAA,WAAW,CAAC,MAAM,GAAG,CAAC;4BACzD,CAAC,CAAC,uBAAuB,GAAG,CAAC,CAC9B,CAAC;wBAEF,IAAI,QAAQ,CAAC,MAAM,IAAI,qBAAqB,EAAE;4BAC7C,IAAI,iBAAiB,GAAG,4BAAa,CAAC,wBAAwB,CAAC,MAAM,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;4BACxF,IAAI,eAAe,GAAG,4BAAa,CAAC,iBAAiB,CAAC,iBAAiB,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;4BAC5F,IAAI,QAAQ,GAAG,4BAAa,CAAC,wBAAwB,CAAC,MAAM,EAAE,KAAK,EAAE,QAAQ,CAAC,UAAU,EAAE,eAAe,CAAC,CAAC;4BAC3G,eAAe,GAAG,IAAI,aAAK,CAAC,QAAQ,CAAC,UAAU,EAAE,QAAQ,EAAE,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;yBACjG;6BAAM;4BACN,eAAe,GAAG,IAAI,aAAK,CAAC,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;yBAC5G;qBACD;yBAAM;wBACN,IAAI,cAAc,GAAG,qCAAc,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;wBAC9F,eAAe,GAAG,IAAI,aAAK,CAC1B,cAAc,CAAC,UAAU,EACzB,cAAc,CAAC,MAAM,EACrB,QAAQ,CAAC,UAAU,EACnB,QAAQ,CAAC,MAAM,CACf,CAAC;qBACF;iBACD;gBAED,IAAI,eAAe,CAAC,OAAO,EAAE,EAAE;oBAC9B,0CAA0C;oBAC1C,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;oBACnB,SAAS;iBACT;gBAED,IAAI,eAAe,CAAC,eAAe,KAAK,eAAe,CAAC,aAAa,EAAE;oBACtE,4BAA4B,GAAG,IAAI,CAAC;iBACpC;gBAED,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,+BAAc,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC;aACtD;YACD,OAAO,CAAC,4BAA4B,EAAE,QAAQ,CAAC,CAAC;QACjD,CAAC;QAEM,MAAM,CAAC,GAAG,CAAC,MAA2B,EAAE,KAAyB,EAAE,UAAuB;YAChG,IAAI,QAAQ,GAA2B,EAAE,CAAC;YAC1C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;gBACtD,MAAM,SAAS,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;gBAEhC,IAAI,SAAS,CAAC,OAAO,EAAE,EAAE;oBACxB,IAAI,MAAM,CAAC,uBAAuB,EAAE;wBACnC,0BAA0B;wBAE1B,IAAI,QAAQ,GAAG,SAAS,CAAC,WAAW,EAAE,CAAC;wBAEvC,IAAI,eAAuB,EAC1B,WAAmB,EACnB,aAAqB,EACrB,SAAiB,CAAC;wBAEnB,IAAI,QAAQ,CAAC,UAAU,GAAG,KAAK,CAAC,YAAY,EAAE,EAAE;4BAC/C,4CAA4C;4BAC5C,eAAe,GAAG,QAAQ,CAAC,UAAU,CAAC;4BACtC,WAAW,GAAG,CAAC,CAAC;4BAChB,aAAa,GAAG,QAAQ,CAAC,UAAU,GAAG,CAAC,CAAC;4BACxC,SAAS,GAAG,CAAC,CAAC;yBACd;6BAAM,IAAI,QAAQ,CAAC,UAAU,GAAG,CAAC,EAAE;4BACnC,mEAAmE;4BACnE,eAAe,GAAG,QAAQ,CAAC,UAAU,GAAG,CAAC,CAAC;4BAC1C,WAAW,GAAG,KAAK,CAAC,gBAAgB,CAAC,QAAQ,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;4BAC9D,aAAa,GAAG,QAAQ,CAAC,UAAU,CAAC;4BACpC,SAAS,GAAG,KAAK,CAAC,gBAAgB,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;yBACxD;6BAAM;4BACN,kDAAkD;4BAClD,eAAe,GAAG,QAAQ,CAAC,UAAU,CAAC;4BACtC,WAAW,GAAG,CAAC,CAAC;4BAChB,aAAa,GAAG,QAAQ,CAAC,UAAU,CAAC;4BACpC,SAAS,GAAG,KAAK,CAAC,gBAAgB,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;yBACxD;wBAED,IAAI,eAAe,GAAG,IAAI,aAAK,CAC9B,eAAe,EACf,WAAW,EACX,aAAa,EACb,SAAS,CACT,CAAC;wBAEF,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,EAAE;4BAC/B,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,+BAAc,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC;yBACtD;6BAAM;4BACN,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;yBACnB;qBACD;yBAAM;wBACN,6BAA6B;wBAC7B,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;qBACnB;iBACD;qBAAM;oBACN,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,+BAAc,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;iBAChD;aACD;YACD,OAAO,IAAI,kCAAmB,gBAA0B,QAAQ,EAAE;gBACjE,4BAA4B,EAAE,IAAI;gBAClC,2BAA2B,EAAE,IAAI;aACjC,CAAC,CAAC;QACJ,CAAC;KACD;IAxPD,4CAwPC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as strings from 'vs/base/common/strings';\nimport { ReplaceCommand } from 'vs/editor/common/commands/replaceCommand';\nimport { EditorAutoClosingEditStrategy, EditorAutoClosingStrategy } from 'vs/editor/common/config/editorOptions';\nimport { CursorColumns, CursorConfiguration, EditOperationResult, EditOperationType, ICursorSimpleModel, isQuote } from 'vs/editor/common/controller/cursorCommon';\nimport { MoveOperations } from 'vs/editor/common/controller/cursorMoveOperations';\nimport { Range } from 'vs/editor/common/core/range';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { ICommand } from 'vs/editor/common/editorCommon';\nimport { StandardAutoClosingPairConditional } from 'vs/editor/common/modes/languageConfiguration';\n\nexport class DeleteOperations {\n\n\tpublic static deleteRight(prevEditOperationType: EditOperationType, config: CursorConfiguration, model: ICursorSimpleModel, selections: Selection[]): [boolean, Array<ICommand | null>] {\n\t\tlet commands: Array<ICommand | null> = [];\n\t\tlet shouldPushStackElementBefore = (prevEditOperationType !== EditOperationType.DeletingRight);\n\t\tfor (let i = 0, len = selections.length; i < len; i++) {\n\t\t\tconst selection = selections[i];\n\n\t\t\tlet deleteSelection: Range = selection;\n\n\t\t\tif (deleteSelection.isEmpty()) {\n\t\t\t\tlet position = selection.getPosition();\n\t\t\t\tlet rightOfPosition = MoveOperations.right(config, model, position.lineNumber, position.column);\n\t\t\t\tdeleteSelection = new Range(\n\t\t\t\t\trightOfPosition.lineNumber,\n\t\t\t\t\trightOfPosition.column,\n\t\t\t\t\tposition.lineNumber,\n\t\t\t\t\tposition.column\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (deleteSelection.isEmpty()) {\n\t\t\t\t// Probably at end of file => ignore\n\t\t\t\tcommands[i] = null;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (deleteSelection.startLineNumber !== deleteSelection.endLineNumber) {\n\t\t\t\tshouldPushStackElementBefore = true;\n\t\t\t}\n\n\t\t\tcommands[i] = new ReplaceCommand(deleteSelection, '');\n\t\t}\n\t\treturn [shouldPushStackElementBefore, commands];\n\t}\n\n\tpublic static isAutoClosingPairDelete(\n\t\tautoClosingDelete: EditorAutoClosingEditStrategy,\n\t\tautoClosingBrackets: EditorAutoClosingStrategy,\n\t\tautoClosingQuotes: EditorAutoClosingStrategy,\n\t\tautoClosingPairsOpen: Map<string, StandardAutoClosingPairConditional[]>,\n\t\tmodel: ICursorSimpleModel,\n\t\tselections: Selection[],\n\t\tautoClosedCharacters: Range[]\n\t): boolean {\n\t\tif (autoClosingBrackets === 'never' && autoClosingQuotes === 'never') {\n\t\t\treturn false;\n\t\t}\n\t\tif (autoClosingDelete === 'never') {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (let i = 0, len = selections.length; i < len; i++) {\n\t\t\tconst selection = selections[i];\n\t\t\tconst position = selection.getPosition();\n\n\t\t\tif (!selection.isEmpty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst lineText = model.getLineContent(position.lineNumber);\n\t\t\tif (position.column < 2 || position.column >= lineText.length + 1) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tconst character = lineText.charAt(position.column - 2);\n\n\t\t\tconst autoClosingPairCandidates = autoClosingPairsOpen.get(character);\n\t\t\tif (!autoClosingPairCandidates) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (isQuote(character)) {\n\t\t\t\tif (autoClosingQuotes === 'never') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (autoClosingBrackets === 'never') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst afterCharacter = lineText.charAt(position.column - 1);\n\n\t\t\tlet foundAutoClosingPair = false;\n\t\t\tfor (const autoClosingPairCandidate of autoClosingPairCandidates) {\n\t\t\t\tif (autoClosingPairCandidate.open === character && autoClosingPairCandidate.close === afterCharacter) {\n\t\t\t\t\tfoundAutoClosingPair = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!foundAutoClosingPair) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Must delete the pair only if it was automatically inserted by the editor\n\t\t\tif (autoClosingDelete === 'auto') {\n\t\t\t\tlet found = false;\n\t\t\t\tfor (let j = 0, lenJ = autoClosedCharacters.length; j < lenJ; j++) {\n\t\t\t\t\tconst autoClosedCharacter = autoClosedCharacters[j];\n\t\t\t\t\tif (position.lineNumber === autoClosedCharacter.startLineNumber && position.column === autoClosedCharacter.startColumn) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!found) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate static _runAutoClosingPairDelete(config: CursorConfiguration, model: ICursorSimpleModel, selections: Selection[]): [boolean, ICommand[]] {\n\t\tlet commands: ICommand[] = [];\n\t\tfor (let i = 0, len = selections.length; i < len; i++) {\n\t\t\tconst position = selections[i].getPosition();\n\t\t\tconst deleteSelection = new Range(\n\t\t\t\tposition.lineNumber,\n\t\t\t\tposition.column - 1,\n\t\t\t\tposition.lineNumber,\n\t\t\t\tposition.column + 1\n\t\t\t);\n\t\t\tcommands[i] = new ReplaceCommand(deleteSelection, '');\n\t\t}\n\t\treturn [true, commands];\n\t}\n\n\tpublic static deleteLeft(prevEditOperationType: EditOperationType, config: CursorConfiguration, model: ICursorSimpleModel, selections: Selection[], autoClosedCharacters: Range[]): [boolean, Array<ICommand | null>] {\n\n\t\tif (this.isAutoClosingPairDelete(config.autoClosingDelete, config.autoClosingBrackets, config.autoClosingQuotes, config.autoClosingPairs.autoClosingPairsOpenByEnd, model, selections, autoClosedCharacters)) {\n\t\t\treturn this._runAutoClosingPairDelete(config, model, selections);\n\t\t}\n\n\t\tlet commands: Array<ICommand | null> = [];\n\t\tlet shouldPushStackElementBefore = (prevEditOperationType !== EditOperationType.DeletingLeft);\n\t\tfor (let i = 0, len = selections.length; i < len; i++) {\n\t\t\tconst selection = selections[i];\n\n\t\t\tlet deleteSelection: Range = selection;\n\n\t\t\tif (deleteSelection.isEmpty()) {\n\t\t\t\tlet position = selection.getPosition();\n\n\t\t\t\tif (config.useTabStops && position.column > 1) {\n\t\t\t\t\tlet lineContent = model.getLineContent(position.lineNumber);\n\n\t\t\t\t\tlet firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineContent);\n\t\t\t\t\tlet lastIndentationColumn = (\n\t\t\t\t\t\tfirstNonWhitespaceIndex === -1\n\t\t\t\t\t\t\t? /* entire string is whitespace */lineContent.length + 1\n\t\t\t\t\t\t\t: firstNonWhitespaceIndex + 1\n\t\t\t\t\t);\n\n\t\t\t\t\tif (position.column <= lastIndentationColumn) {\n\t\t\t\t\t\tlet fromVisibleColumn = CursorColumns.visibleColumnFromColumn2(config, model, position);\n\t\t\t\t\t\tlet toVisibleColumn = CursorColumns.prevIndentTabStop(fromVisibleColumn, config.indentSize);\n\t\t\t\t\t\tlet toColumn = CursorColumns.columnFromVisibleColumn2(config, model, position.lineNumber, toVisibleColumn);\n\t\t\t\t\t\tdeleteSelection = new Range(position.lineNumber, toColumn, position.lineNumber, position.column);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdeleteSelection = new Range(position.lineNumber, position.column - 1, position.lineNumber, position.column);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlet leftOfPosition = MoveOperations.left(config, model, position.lineNumber, position.column);\n\t\t\t\t\tdeleteSelection = new Range(\n\t\t\t\t\t\tleftOfPosition.lineNumber,\n\t\t\t\t\t\tleftOfPosition.column,\n\t\t\t\t\t\tposition.lineNumber,\n\t\t\t\t\t\tposition.column\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (deleteSelection.isEmpty()) {\n\t\t\t\t// Probably at beginning of file => ignore\n\t\t\t\tcommands[i] = null;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (deleteSelection.startLineNumber !== deleteSelection.endLineNumber) {\n\t\t\t\tshouldPushStackElementBefore = true;\n\t\t\t}\n\n\t\t\tcommands[i] = new ReplaceCommand(deleteSelection, '');\n\t\t}\n\t\treturn [shouldPushStackElementBefore, commands];\n\t}\n\n\tpublic static cut(config: CursorConfiguration, model: ICursorSimpleModel, selections: Selection[]): EditOperationResult {\n\t\tlet commands: Array<ICommand | null> = [];\n\t\tfor (let i = 0, len = selections.length; i < len; i++) {\n\t\t\tconst selection = selections[i];\n\n\t\t\tif (selection.isEmpty()) {\n\t\t\t\tif (config.emptySelectionClipboard) {\n\t\t\t\t\t// This is a full line cut\n\n\t\t\t\t\tlet position = selection.getPosition();\n\n\t\t\t\t\tlet startLineNumber: number,\n\t\t\t\t\t\tstartColumn: number,\n\t\t\t\t\t\tendLineNumber: number,\n\t\t\t\t\t\tendColumn: number;\n\n\t\t\t\t\tif (position.lineNumber < model.getLineCount()) {\n\t\t\t\t\t\t// Cutting a line in the middle of the model\n\t\t\t\t\t\tstartLineNumber = position.lineNumber;\n\t\t\t\t\t\tstartColumn = 1;\n\t\t\t\t\t\tendLineNumber = position.lineNumber + 1;\n\t\t\t\t\t\tendColumn = 1;\n\t\t\t\t\t} else if (position.lineNumber > 1) {\n\t\t\t\t\t\t// Cutting the last line & there are more than 1 lines in the model\n\t\t\t\t\t\tstartLineNumber = position.lineNumber - 1;\n\t\t\t\t\t\tstartColumn = model.getLineMaxColumn(position.lineNumber - 1);\n\t\t\t\t\t\tendLineNumber = position.lineNumber;\n\t\t\t\t\t\tendColumn = model.getLineMaxColumn(position.lineNumber);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Cutting the single line that the model contains\n\t\t\t\t\t\tstartLineNumber = position.lineNumber;\n\t\t\t\t\t\tstartColumn = 1;\n\t\t\t\t\t\tendLineNumber = position.lineNumber;\n\t\t\t\t\t\tendColumn = model.getLineMaxColumn(position.lineNumber);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet deleteSelection = new Range(\n\t\t\t\t\t\tstartLineNumber,\n\t\t\t\t\t\tstartColumn,\n\t\t\t\t\t\tendLineNumber,\n\t\t\t\t\t\tendColumn\n\t\t\t\t\t);\n\n\t\t\t\t\tif (!deleteSelection.isEmpty()) {\n\t\t\t\t\t\tcommands[i] = new ReplaceCommand(deleteSelection, '');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcommands[i] = null;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Cannot cut empty selection\n\t\t\t\t\tcommands[i] = null;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcommands[i] = new ReplaceCommand(selection, '');\n\t\t\t}\n\t\t}\n\t\treturn new EditOperationResult(EditOperationType.Other, commands, {\n\t\t\tshouldPushStackElementBefore: true,\n\t\t\tshouldPushStackElementAfter: true\n\t\t});\n\t}\n}\n"]}