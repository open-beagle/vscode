{"version":3,"file":"cursorMoveOperations.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/common/controller/cursorMoveOperations.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CursorColumns, CursorConfiguration, ICursorSimpleModel, SingleCursorState } from 'vs/editor/common/controller/cursorCommon';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport * as strings from 'vs/base/common/strings';\nimport { Constants } from 'vs/base/common/uint';\nimport { AtomicTabMoveOperations, Direction } from 'vs/editor/common/controller/cursorAtomicMoveOperations';\n\nexport class CursorPosition {\n\t_cursorPositionBrand: void;\n\n\tpublic readonly lineNumber: number;\n\tpublic readonly column: number;\n\tpublic readonly leftoverVisibleColumns: number;\n\n\tconstructor(lineNumber: number, column: number, leftoverVisibleColumns: number) {\n\t\tthis.lineNumber = lineNumber;\n\t\tthis.column = column;\n\t\tthis.leftoverVisibleColumns = leftoverVisibleColumns;\n\t}\n}\n\nexport class MoveOperations {\n\n\tpublic static leftPosition(model: ICursorSimpleModel, lineNumber: number, column: number): Position {\n\t\tif (column > model.getLineMinColumn(lineNumber)) {\n\t\t\tcolumn = column - strings.prevCharLength(model.getLineContent(lineNumber), column - 1);\n\t\t} else if (lineNumber > 1) {\n\t\t\tlineNumber = lineNumber - 1;\n\t\t\tcolumn = model.getLineMaxColumn(lineNumber);\n\t\t}\n\t\treturn new Position(lineNumber, column);\n\t}\n\n\tpublic static leftPositionAtomicSoftTabs(model: ICursorSimpleModel, lineNumber: number, column: number, tabSize: number): Position {\n\t\tconst minColumn = model.getLineMinColumn(lineNumber);\n\t\tconst lineContent = model.getLineContent(lineNumber);\n\t\tconst newPosition = AtomicTabMoveOperations.atomicPosition(lineContent, column - 1, tabSize, Direction.Left);\n\t\tif (newPosition === -1 || newPosition + 1 < minColumn) {\n\t\t\treturn this.leftPosition(model, lineNumber, column);\n\t\t}\n\t\treturn new Position(lineNumber, newPosition + 1);\n\t}\n\n\tpublic static left(config: CursorConfiguration, model: ICursorSimpleModel, lineNumber: number, column: number): CursorPosition {\n\t\tconst pos = config.stickyTabStops\n\t\t\t? MoveOperations.leftPositionAtomicSoftTabs(model, lineNumber, column, config.tabSize)\n\t\t\t: MoveOperations.leftPosition(model, lineNumber, column);\n\t\treturn new CursorPosition(pos.lineNumber, pos.column, 0);\n\t}\n\n\tpublic static moveLeft(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState, inSelectionMode: boolean, noOfColumns: number): SingleCursorState {\n\t\tlet lineNumber: number,\n\t\t\tcolumn: number;\n\n\t\tif (cursor.hasSelection() && !inSelectionMode) {\n\t\t\t// If we are in selection mode, move left without selection cancels selection and puts cursor at the beginning of the selection\n\t\t\tlineNumber = cursor.selection.startLineNumber;\n\t\t\tcolumn = cursor.selection.startColumn;\n\t\t} else {\n\t\t\tlet r = MoveOperations.left(config, model, cursor.position.lineNumber, cursor.position.column - (noOfColumns - 1));\n\t\t\tlineNumber = r.lineNumber;\n\t\t\tcolumn = r.column;\n\t\t}\n\n\t\treturn cursor.move(inSelectionMode, lineNumber, column, 0);\n\t}\n\n\tpublic static rightPosition(model: ICursorSimpleModel, lineNumber: number, column: number): Position {\n\t\tif (column < model.getLineMaxColumn(lineNumber)) {\n\t\t\tcolumn = column + strings.nextCharLength(model.getLineContent(lineNumber), column - 1);\n\t\t} else if (lineNumber < model.getLineCount()) {\n\t\t\tlineNumber = lineNumber + 1;\n\t\t\tcolumn = model.getLineMinColumn(lineNumber);\n\t\t}\n\t\treturn new Position(lineNumber, column);\n\t}\n\n\tpublic static rightPositionAtomicSoftTabs(model: ICursorSimpleModel, lineNumber: number, column: number, tabSize: number, indentSize: number): Position {\n\t\tconst lineContent = model.getLineContent(lineNumber);\n\t\tconst newPosition = AtomicTabMoveOperations.atomicPosition(lineContent, column - 1, tabSize, Direction.Right);\n\t\tif (newPosition === -1) {\n\t\t\treturn this.rightPosition(model, lineNumber, column);\n\t\t}\n\t\treturn new Position(lineNumber, newPosition + 1);\n\t}\n\n\tpublic static right(config: CursorConfiguration, model: ICursorSimpleModel, lineNumber: number, column: number): CursorPosition {\n\t\tconst pos = config.stickyTabStops\n\t\t\t? MoveOperations.rightPositionAtomicSoftTabs(model, lineNumber, column, config.tabSize, config.indentSize)\n\t\t\t: MoveOperations.rightPosition(model, lineNumber, column);\n\t\treturn new CursorPosition(pos.lineNumber, pos.column, 0);\n\t}\n\n\tpublic static moveRight(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState, inSelectionMode: boolean, noOfColumns: number): SingleCursorState {\n\t\tlet lineNumber: number,\n\t\t\tcolumn: number;\n\n\t\tif (cursor.hasSelection() && !inSelectionMode) {\n\t\t\t// If we are in selection mode, move right without selection cancels selection and puts cursor at the end of the selection\n\t\t\tlineNumber = cursor.selection.endLineNumber;\n\t\t\tcolumn = cursor.selection.endColumn;\n\t\t} else {\n\t\t\tlet r = MoveOperations.right(config, model, cursor.position.lineNumber, cursor.position.column + (noOfColumns - 1));\n\t\t\tlineNumber = r.lineNumber;\n\t\t\tcolumn = r.column;\n\t\t}\n\n\t\treturn cursor.move(inSelectionMode, lineNumber, column, 0);\n\t}\n\n\tpublic static down(config: CursorConfiguration, model: ICursorSimpleModel, lineNumber: number, column: number, leftoverVisibleColumns: number, count: number, allowMoveOnLastLine: boolean): CursorPosition {\n\t\tconst currentVisibleColumn = CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize) + leftoverVisibleColumns;\n\t\tconst lineCount = model.getLineCount();\n\t\tconst wasOnLastPosition = (lineNumber === lineCount && column === model.getLineMaxColumn(lineNumber));\n\n\t\tlineNumber = lineNumber + count;\n\t\tif (lineNumber > lineCount) {\n\t\t\tlineNumber = lineCount;\n\t\t\tif (allowMoveOnLastLine) {\n\t\t\t\tcolumn = model.getLineMaxColumn(lineNumber);\n\t\t\t} else {\n\t\t\t\tcolumn = Math.min(model.getLineMaxColumn(lineNumber), column);\n\t\t\t}\n\t\t} else {\n\t\t\tcolumn = CursorColumns.columnFromVisibleColumn2(config, model, lineNumber, currentVisibleColumn);\n\t\t}\n\n\t\tif (wasOnLastPosition) {\n\t\t\tleftoverVisibleColumns = 0;\n\t\t} else {\n\t\t\tleftoverVisibleColumns = currentVisibleColumn - CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize);\n\t\t}\n\n\t\treturn new CursorPosition(lineNumber, column, leftoverVisibleColumns);\n\t}\n\n\tpublic static moveDown(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState, inSelectionMode: boolean, linesCount: number): SingleCursorState {\n\t\tlet lineNumber: number,\n\t\t\tcolumn: number;\n\n\t\tif (cursor.hasSelection() && !inSelectionMode) {\n\t\t\t// If we are in selection mode, move down acts relative to the end of selection\n\t\t\tlineNumber = cursor.selection.endLineNumber;\n\t\t\tcolumn = cursor.selection.endColumn;\n\t\t} else {\n\t\t\tlineNumber = cursor.position.lineNumber;\n\t\t\tcolumn = cursor.position.column;\n\t\t}\n\n\t\tlet r = MoveOperations.down(config, model, lineNumber, column, cursor.leftoverVisibleColumns, linesCount, true);\n\n\t\treturn cursor.move(inSelectionMode, r.lineNumber, r.column, r.leftoverVisibleColumns);\n\t}\n\n\tpublic static translateDown(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState): SingleCursorState {\n\t\tlet selection = cursor.selection;\n\n\t\tlet selectionStart = MoveOperations.down(config, model, selection.selectionStartLineNumber, selection.selectionStartColumn, cursor.selectionStartLeftoverVisibleColumns, 1, false);\n\t\tlet position = MoveOperations.down(config, model, selection.positionLineNumber, selection.positionColumn, cursor.leftoverVisibleColumns, 1, false);\n\n\t\treturn new SingleCursorState(\n\t\t\tnew Range(selectionStart.lineNumber, selectionStart.column, selectionStart.lineNumber, selectionStart.column),\n\t\t\tselectionStart.leftoverVisibleColumns,\n\t\t\tnew Position(position.lineNumber, position.column),\n\t\t\tposition.leftoverVisibleColumns\n\t\t);\n\t}\n\n\tpublic static up(config: CursorConfiguration, model: ICursorSimpleModel, lineNumber: number, column: number, leftoverVisibleColumns: number, count: number, allowMoveOnFirstLine: boolean): CursorPosition {\n\t\tconst currentVisibleColumn = CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize) + leftoverVisibleColumns;\n\t\tconst wasOnFirstPosition = (lineNumber === 1 && column === 1);\n\n\t\tlineNumber = lineNumber - count;\n\t\tif (lineNumber < 1) {\n\t\t\tlineNumber = 1;\n\t\t\tif (allowMoveOnFirstLine) {\n\t\t\t\tcolumn = model.getLineMinColumn(lineNumber);\n\t\t\t} else {\n\t\t\t\tcolumn = Math.min(model.getLineMaxColumn(lineNumber), column);\n\t\t\t}\n\t\t} else {\n\t\t\tcolumn = CursorColumns.columnFromVisibleColumn2(config, model, lineNumber, currentVisibleColumn);\n\t\t}\n\n\t\tif (wasOnFirstPosition) {\n\t\t\tleftoverVisibleColumns = 0;\n\t\t} else {\n\t\t\tleftoverVisibleColumns = currentVisibleColumn - CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize);\n\t\t}\n\n\t\treturn new CursorPosition(lineNumber, column, leftoverVisibleColumns);\n\t}\n\n\tpublic static moveUp(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState, inSelectionMode: boolean, linesCount: number): SingleCursorState {\n\t\tlet lineNumber: number,\n\t\t\tcolumn: number;\n\n\t\tif (cursor.hasSelection() && !inSelectionMode) {\n\t\t\t// If we are in selection mode, move up acts relative to the beginning of selection\n\t\t\tlineNumber = cursor.selection.startLineNumber;\n\t\t\tcolumn = cursor.selection.startColumn;\n\t\t} else {\n\t\t\tlineNumber = cursor.position.lineNumber;\n\t\t\tcolumn = cursor.position.column;\n\t\t}\n\n\t\tlet r = MoveOperations.up(config, model, lineNumber, column, cursor.leftoverVisibleColumns, linesCount, true);\n\n\t\treturn cursor.move(inSelectionMode, r.lineNumber, r.column, r.leftoverVisibleColumns);\n\t}\n\n\tpublic static translateUp(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState): SingleCursorState {\n\n\t\tlet selection = cursor.selection;\n\n\t\tlet selectionStart = MoveOperations.up(config, model, selection.selectionStartLineNumber, selection.selectionStartColumn, cursor.selectionStartLeftoverVisibleColumns, 1, false);\n\t\tlet position = MoveOperations.up(config, model, selection.positionLineNumber, selection.positionColumn, cursor.leftoverVisibleColumns, 1, false);\n\n\t\treturn new SingleCursorState(\n\t\t\tnew Range(selectionStart.lineNumber, selectionStart.column, selectionStart.lineNumber, selectionStart.column),\n\t\t\tselectionStart.leftoverVisibleColumns,\n\t\t\tnew Position(position.lineNumber, position.column),\n\t\t\tposition.leftoverVisibleColumns\n\t\t);\n\t}\n\n\tprivate static _isBlankLine(model: ICursorSimpleModel, lineNumber: number): boolean {\n\t\tif (model.getLineFirstNonWhitespaceColumn(lineNumber) === 0) {\n\t\t\t// empty or contains only whitespace\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic static moveToPrevBlankLine(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState, inSelectionMode: boolean): SingleCursorState {\n\t\tlet lineNumber = cursor.position.lineNumber;\n\n\t\t// If our current line is blank, move to the previous non-blank line\n\t\twhile (lineNumber > 1 && this._isBlankLine(model, lineNumber)) {\n\t\t\tlineNumber--;\n\t\t}\n\n\t\t// Find the previous blank line\n\t\twhile (lineNumber > 1 && !this._isBlankLine(model, lineNumber)) {\n\t\t\tlineNumber--;\n\t\t}\n\n\t\treturn cursor.move(inSelectionMode, lineNumber, model.getLineMinColumn(lineNumber), 0);\n\t}\n\n\tpublic static moveToNextBlankLine(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState, inSelectionMode: boolean): SingleCursorState {\n\t\tconst lineCount = model.getLineCount();\n\t\tlet lineNumber = cursor.position.lineNumber;\n\n\t\t// If our current line is blank, move to the next non-blank line\n\t\twhile (lineNumber < lineCount && this._isBlankLine(model, lineNumber)) {\n\t\t\tlineNumber++;\n\t\t}\n\n\t\t// Find the next blank line\n\t\twhile (lineNumber < lineCount && !this._isBlankLine(model, lineNumber)) {\n\t\t\tlineNumber++;\n\t\t}\n\n\t\treturn cursor.move(inSelectionMode, lineNumber, model.getLineMinColumn(lineNumber), 0);\n\t}\n\n\tpublic static moveToBeginningOfLine(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState, inSelectionMode: boolean): SingleCursorState {\n\t\tlet lineNumber = cursor.position.lineNumber;\n\t\tlet minColumn = model.getLineMinColumn(lineNumber);\n\t\tlet firstNonBlankColumn = model.getLineFirstNonWhitespaceColumn(lineNumber) || minColumn;\n\n\t\tlet column: number;\n\n\t\tlet relevantColumnNumber = cursor.position.column;\n\t\tif (relevantColumnNumber === firstNonBlankColumn) {\n\t\t\tcolumn = minColumn;\n\t\t} else {\n\t\t\tcolumn = firstNonBlankColumn;\n\t\t}\n\n\t\treturn cursor.move(inSelectionMode, lineNumber, column, 0);\n\t}\n\n\tpublic static moveToEndOfLine(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState, inSelectionMode: boolean, sticky: boolean): SingleCursorState {\n\t\tlet lineNumber = cursor.position.lineNumber;\n\t\tlet maxColumn = model.getLineMaxColumn(lineNumber);\n\t\treturn cursor.move(inSelectionMode, lineNumber, maxColumn, sticky ? Constants.MAX_SAFE_SMALL_INTEGER - maxColumn : 0);\n\t}\n\n\tpublic static moveToBeginningOfBuffer(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState, inSelectionMode: boolean): SingleCursorState {\n\t\treturn cursor.move(inSelectionMode, 1, 1, 0);\n\t}\n\n\tpublic static moveToEndOfBuffer(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState, inSelectionMode: boolean): SingleCursorState {\n\t\tlet lastLineNumber = model.getLineCount();\n\t\tlet lastColumn = model.getLineMaxColumn(lastLineNumber);\n\n\t\treturn cursor.move(inSelectionMode, lastLineNumber, lastColumn, 0);\n\t}\n}\n"]}