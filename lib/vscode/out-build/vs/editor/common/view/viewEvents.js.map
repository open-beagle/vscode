{"version":3,"file":"viewEvents.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/common/view/viewEvents.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ScrollEvent } from 'vs/base/common/scrollable';\nimport { ConfigurationChangedEvent, EditorOption } from 'vs/editor/common/config/editorOptions';\nimport { Range } from 'vs/editor/common/core/range';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { ScrollType } from 'vs/editor/common/editorCommon';\nimport { IModelDecorationsChangedEvent } from 'vs/editor/common/model/textModelEvents';\n\nexport const enum ViewEventType {\n\tViewCompositionStart,\n\tViewCompositionEnd,\n\tViewConfigurationChanged,\n\tViewCursorStateChanged,\n\tViewDecorationsChanged,\n\tViewFlushed,\n\tViewFocusChanged,\n\tViewLanguageConfigurationChanged,\n\tViewLineMappingChanged,\n\tViewLinesChanged,\n\tViewLinesDeleted,\n\tViewLinesInserted,\n\tViewRevealRangeRequest,\n\tViewScrollChanged,\n\tViewThemeChanged,\n\tViewTokensChanged,\n\tViewTokensColorsChanged,\n\tViewZonesChanged,\n}\n\nexport class ViewCompositionStartEvent {\n\tpublic readonly type = ViewEventType.ViewCompositionStart;\n\tconstructor() { }\n}\n\nexport class ViewCompositionEndEvent {\n\tpublic readonly type = ViewEventType.ViewCompositionEnd;\n\tconstructor() { }\n}\n\nexport class ViewConfigurationChangedEvent {\n\n\tpublic readonly type = ViewEventType.ViewConfigurationChanged;\n\n\tpublic readonly _source: ConfigurationChangedEvent;\n\n\tconstructor(source: ConfigurationChangedEvent) {\n\t\tthis._source = source;\n\t}\n\n\tpublic hasChanged(id: EditorOption): boolean {\n\t\treturn this._source.hasChanged(id);\n\t}\n}\n\nexport class ViewCursorStateChangedEvent {\n\n\tpublic readonly type = ViewEventType.ViewCursorStateChanged;\n\n\tpublic readonly selections: Selection[];\n\tpublic readonly modelSelections: Selection[];\n\n\tconstructor(selections: Selection[], modelSelections: Selection[]) {\n\t\tthis.selections = selections;\n\t\tthis.modelSelections = modelSelections;\n\t}\n}\n\nexport class ViewDecorationsChangedEvent {\n\n\tpublic readonly type = ViewEventType.ViewDecorationsChanged;\n\n\treadonly affectsMinimap: boolean;\n\treadonly affectsOverviewRuler: boolean;\n\n\tconstructor(source: IModelDecorationsChangedEvent | null) {\n\t\tif (source) {\n\t\t\tthis.affectsMinimap = source.affectsMinimap;\n\t\t\tthis.affectsOverviewRuler = source.affectsOverviewRuler;\n\t\t} else {\n\t\t\tthis.affectsMinimap = true;\n\t\t\tthis.affectsOverviewRuler = true;\n\t\t}\n\t}\n}\n\nexport class ViewFlushedEvent {\n\n\tpublic readonly type = ViewEventType.ViewFlushed;\n\n\tconstructor() {\n\t\t// Nothing to do\n\t}\n}\n\nexport class ViewFocusChangedEvent {\n\n\tpublic readonly type = ViewEventType.ViewFocusChanged;\n\n\tpublic readonly isFocused: boolean;\n\n\tconstructor(isFocused: boolean) {\n\t\tthis.isFocused = isFocused;\n\t}\n}\n\nexport class ViewLanguageConfigurationEvent {\n\n\tpublic readonly type = ViewEventType.ViewLanguageConfigurationChanged;\n}\n\nexport class ViewLineMappingChangedEvent {\n\n\tpublic readonly type = ViewEventType.ViewLineMappingChanged;\n\n\tconstructor() {\n\t\t// Nothing to do\n\t}\n}\n\nexport class ViewLinesChangedEvent {\n\n\tpublic readonly type = ViewEventType.ViewLinesChanged;\n\n\t/**\n\t * The first line that has changed.\n\t */\n\tpublic readonly fromLineNumber: number;\n\t/**\n\t * The last line that has changed.\n\t */\n\tpublic readonly toLineNumber: number;\n\n\tconstructor(fromLineNumber: number, toLineNumber: number) {\n\t\tthis.fromLineNumber = fromLineNumber;\n\t\tthis.toLineNumber = toLineNumber;\n\t}\n}\n\nexport class ViewLinesDeletedEvent {\n\n\tpublic readonly type = ViewEventType.ViewLinesDeleted;\n\n\t/**\n\t * At what line the deletion began (inclusive).\n\t */\n\tpublic readonly fromLineNumber: number;\n\t/**\n\t * At what line the deletion stopped (inclusive).\n\t */\n\tpublic readonly toLineNumber: number;\n\n\tconstructor(fromLineNumber: number, toLineNumber: number) {\n\t\tthis.fromLineNumber = fromLineNumber;\n\t\tthis.toLineNumber = toLineNumber;\n\t}\n}\n\nexport class ViewLinesInsertedEvent {\n\n\tpublic readonly type = ViewEventType.ViewLinesInserted;\n\n\t/**\n\t * Before what line did the insertion begin\n\t */\n\tpublic readonly fromLineNumber: number;\n\t/**\n\t * `toLineNumber` - `fromLineNumber` + 1 denotes the number of lines that were inserted\n\t */\n\tpublic readonly toLineNumber: number;\n\n\tconstructor(fromLineNumber: number, toLineNumber: number) {\n\t\tthis.fromLineNumber = fromLineNumber;\n\t\tthis.toLineNumber = toLineNumber;\n\t}\n}\n\nexport const enum VerticalRevealType {\n\tSimple = 0,\n\tCenter = 1,\n\tCenterIfOutsideViewport = 2,\n\tTop = 3,\n\tBottom = 4,\n\tNearTop = 5,\n\tNearTopIfOutsideViewport = 6,\n}\n\nexport class ViewRevealRangeRequestEvent {\n\n\tpublic readonly type = ViewEventType.ViewRevealRangeRequest;\n\n\t/**\n\t * Range to be reavealed.\n\t */\n\tpublic readonly range: Range | null;\n\n\t/**\n\t * Selections to be revealed.\n\t */\n\tpublic readonly selections: Selection[] | null;\n\n\tpublic readonly verticalType: VerticalRevealType;\n\t/**\n\t * If true: there should be a horizontal & vertical revealing\n\t * If false: there should be just a vertical revealing\n\t */\n\tpublic readonly revealHorizontal: boolean;\n\n\tpublic readonly scrollType: ScrollType;\n\n\t/**\n\t * Source of the call that caused the event.\n\t */\n\treadonly source: string | null | undefined;\n\n\tconstructor(source: string | null | undefined, range: Range | null, selections: Selection[] | null, verticalType: VerticalRevealType, revealHorizontal: boolean, scrollType: ScrollType) {\n\t\tthis.source = source;\n\t\tthis.range = range;\n\t\tthis.selections = selections;\n\t\tthis.verticalType = verticalType;\n\t\tthis.revealHorizontal = revealHorizontal;\n\t\tthis.scrollType = scrollType;\n\t}\n}\n\nexport class ViewScrollChangedEvent {\n\n\tpublic readonly type = ViewEventType.ViewScrollChanged;\n\n\tpublic readonly scrollWidth: number;\n\tpublic readonly scrollLeft: number;\n\tpublic readonly scrollHeight: number;\n\tpublic readonly scrollTop: number;\n\n\tpublic readonly scrollWidthChanged: boolean;\n\tpublic readonly scrollLeftChanged: boolean;\n\tpublic readonly scrollHeightChanged: boolean;\n\tpublic readonly scrollTopChanged: boolean;\n\n\tconstructor(source: ScrollEvent) {\n\t\tthis.scrollWidth = source.scrollWidth;\n\t\tthis.scrollLeft = source.scrollLeft;\n\t\tthis.scrollHeight = source.scrollHeight;\n\t\tthis.scrollTop = source.scrollTop;\n\n\t\tthis.scrollWidthChanged = source.scrollWidthChanged;\n\t\tthis.scrollLeftChanged = source.scrollLeftChanged;\n\t\tthis.scrollHeightChanged = source.scrollHeightChanged;\n\t\tthis.scrollTopChanged = source.scrollTopChanged;\n\t}\n}\n\nexport class ViewThemeChangedEvent {\n\n\tpublic readonly type = ViewEventType.ViewThemeChanged;\n}\n\nexport class ViewTokensChangedEvent {\n\n\tpublic readonly type = ViewEventType.ViewTokensChanged;\n\n\tpublic readonly ranges: {\n\t\t/**\n\t\t * Start line number of range\n\t\t */\n\t\treadonly fromLineNumber: number;\n\t\t/**\n\t\t * End line number of range\n\t\t */\n\t\treadonly toLineNumber: number;\n\t}[];\n\n\tconstructor(ranges: { fromLineNumber: number; toLineNumber: number; }[]) {\n\t\tthis.ranges = ranges;\n\t}\n}\n\nexport class ViewTokensColorsChangedEvent {\n\n\tpublic readonly type = ViewEventType.ViewTokensColorsChanged;\n\n\tconstructor() {\n\t\t// Nothing to do\n\t}\n}\n\nexport class ViewZonesChangedEvent {\n\n\tpublic readonly type = ViewEventType.ViewZonesChanged;\n\n\tconstructor() {\n\t\t// Nothing to do\n\t}\n}\n\nexport type ViewEvent = (\n\tViewCompositionStartEvent\n\t| ViewCompositionEndEvent\n\t| ViewConfigurationChangedEvent\n\t| ViewCursorStateChangedEvent\n\t| ViewDecorationsChangedEvent\n\t| ViewFlushedEvent\n\t| ViewFocusChangedEvent\n\t| ViewLanguageConfigurationEvent\n\t| ViewLineMappingChangedEvent\n\t| ViewLinesChangedEvent\n\t| ViewLinesDeletedEvent\n\t| ViewLinesInsertedEvent\n\t| ViewRevealRangeRequestEvent\n\t| ViewScrollChangedEvent\n\t| ViewThemeChangedEvent\n\t| ViewTokensChangedEvent\n\t| ViewTokensColorsChangedEvent\n\t| ViewZonesChangedEvent\n);\n"]}