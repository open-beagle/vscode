{"version":3,"file":"modeServiceImpl.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/common/services/modeServiceImpl.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable, IDisposable } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { IMode, LanguageId, LanguageIdentifier } from 'vs/editor/common/modes';\nimport { FrankensteinMode } from 'vs/editor/common/modes/abstractMode';\nimport { NULL_LANGUAGE_IDENTIFIER } from 'vs/editor/common/modes/nullMode';\nimport { LanguagesRegistry } from 'vs/editor/common/services/languagesRegistry';\nimport { ILanguageSelection, IModeService } from 'vs/editor/common/services/modeService';\nimport { firstOrDefault } from 'vs/base/common/arrays';\n\nclass LanguageSelection implements ILanguageSelection {\n\n\tpublic languageIdentifier: LanguageIdentifier;\n\n\tprivate readonly _selector: () => LanguageIdentifier;\n\tprivate readonly _onDidChange: Emitter<LanguageIdentifier>;\n\tpublic readonly onDidChange: Event<LanguageIdentifier>;\n\n\tconstructor(onLanguagesMaybeChanged: Event<void>, selector: () => LanguageIdentifier) {\n\t\tthis._selector = selector;\n\t\tthis.languageIdentifier = this._selector();\n\n\t\tlet listener: IDisposable;\n\t\tthis._onDidChange = new Emitter<LanguageIdentifier>({\n\t\t\tonFirstListenerAdd: () => {\n\t\t\t\tlistener = onLanguagesMaybeChanged(() => this._evaluate());\n\t\t\t},\n\t\t\tonLastListenerRemove: () => {\n\t\t\t\tlistener.dispose();\n\t\t\t}\n\t\t});\n\t\tthis.onDidChange = this._onDidChange.event;\n\t}\n\n\tprivate _evaluate(): void {\n\t\tlet languageIdentifier = this._selector();\n\t\tif (languageIdentifier.id === this.languageIdentifier.id) {\n\t\t\t// no change\n\t\t\treturn;\n\t\t}\n\t\tthis.languageIdentifier = languageIdentifier;\n\t\tthis._onDidChange.fire(this.languageIdentifier);\n\t}\n}\n\nexport class ModeServiceImpl extends Disposable implements IModeService {\n\tpublic _serviceBrand: undefined;\n\n\tprivate readonly _instantiatedModes: { [modeId: string]: IMode; };\n\tprivate readonly _registry: LanguagesRegistry;\n\n\tprivate readonly _onDidCreateMode = this._register(new Emitter<IMode>());\n\tpublic readonly onDidCreateMode: Event<IMode> = this._onDidCreateMode.event;\n\n\tprotected readonly _onLanguagesMaybeChanged = this._register(new Emitter<void>({ leakWarningThreshold: 200 /* https://github.com/microsoft/vscode/issues/119968 */ }));\n\tpublic readonly onLanguagesMaybeChanged: Event<void> = this._onLanguagesMaybeChanged.event;\n\n\tconstructor(warnOnOverwrite = false) {\n\t\tsuper();\n\t\tthis._instantiatedModes = {};\n\n\t\tthis._registry = this._register(new LanguagesRegistry(true, warnOnOverwrite));\n\t\tthis._register(this._registry.onDidChange(() => this._onLanguagesMaybeChanged.fire()));\n\t}\n\n\tprotected _onReady(): Promise<boolean> {\n\t\treturn Promise.resolve(true);\n\t}\n\n\tpublic isRegisteredMode(mimetypeOrModeId: string): boolean {\n\t\treturn this._registry.isRegisteredMode(mimetypeOrModeId);\n\t}\n\n\tpublic getRegisteredModes(): string[] {\n\t\treturn this._registry.getRegisteredModes();\n\t}\n\n\tpublic getRegisteredLanguageNames(): string[] {\n\t\treturn this._registry.getRegisteredLanguageNames();\n\t}\n\n\tpublic getExtensions(alias: string): string[] {\n\t\treturn this._registry.getExtensions(alias);\n\t}\n\n\tpublic getFilenames(alias: string): string[] {\n\t\treturn this._registry.getFilenames(alias);\n\t}\n\n\tpublic getMimeForMode(modeId: string): string | null {\n\t\treturn this._registry.getMimeForMode(modeId);\n\t}\n\n\tpublic getLanguageName(modeId: string): string | null {\n\t\treturn this._registry.getLanguageName(modeId);\n\t}\n\n\tpublic getModeIdForLanguageName(alias: string): string | null {\n\t\treturn this._registry.getModeIdForLanguageNameLowercase(alias);\n\t}\n\n\tpublic getModeIdByFilepathOrFirstLine(resource: URI | null, firstLine?: string): string | null {\n\t\tconst modeIds = this._registry.getModeIdsFromFilepathOrFirstLine(resource, firstLine);\n\t\treturn firstOrDefault(modeIds, null);\n\t}\n\n\tpublic getModeId(commaSeparatedMimetypesOrCommaSeparatedIds: string | undefined): string | null {\n\t\tconst modeIds = this._registry.extractModeIds(commaSeparatedMimetypesOrCommaSeparatedIds);\n\t\treturn firstOrDefault(modeIds, null);\n\t}\n\n\tpublic getLanguageIdentifier(modeId: string | LanguageId): LanguageIdentifier | null {\n\t\treturn this._registry.getLanguageIdentifier(modeId);\n\t}\n\n\tpublic getConfigurationFiles(modeId: string): URI[] {\n\t\treturn this._registry.getConfigurationFiles(modeId);\n\t}\n\n\t// --- instantiation\n\n\tpublic create(commaSeparatedMimetypesOrCommaSeparatedIds: string | undefined): ILanguageSelection {\n\t\treturn new LanguageSelection(this.onLanguagesMaybeChanged, () => {\n\t\t\tconst modeId = this.getModeId(commaSeparatedMimetypesOrCommaSeparatedIds);\n\t\t\treturn this._createModeAndGetLanguageIdentifier(modeId);\n\t\t});\n\t}\n\n\tpublic createByLanguageName(languageName: string): ILanguageSelection {\n\t\treturn new LanguageSelection(this.onLanguagesMaybeChanged, () => {\n\t\t\tconst modeId = this._getModeIdByLanguageName(languageName);\n\t\t\treturn this._createModeAndGetLanguageIdentifier(modeId);\n\t\t});\n\t}\n\n\tpublic createByFilepathOrFirstLine(resource: URI | null, firstLine?: string): ILanguageSelection {\n\t\treturn new LanguageSelection(this.onLanguagesMaybeChanged, () => {\n\t\t\tconst modeId = this.getModeIdByFilepathOrFirstLine(resource, firstLine);\n\t\t\treturn this._createModeAndGetLanguageIdentifier(modeId);\n\t\t});\n\t}\n\n\tprivate _createModeAndGetLanguageIdentifier(modeId: string | null): LanguageIdentifier {\n\t\t// Fall back to plain text if no mode was found\n\t\tconst languageIdentifier = this.getLanguageIdentifier(modeId || 'plaintext') || NULL_LANGUAGE_IDENTIFIER;\n\t\tthis._getOrCreateMode(languageIdentifier.language);\n\t\treturn languageIdentifier;\n\t}\n\n\tpublic triggerMode(commaSeparatedMimetypesOrCommaSeparatedIds: string): void {\n\t\tconst modeId = this.getModeId(commaSeparatedMimetypesOrCommaSeparatedIds);\n\t\t// Fall back to plain text if no mode was found\n\t\tthis._getOrCreateMode(modeId || 'plaintext');\n\t}\n\n\tpublic waitForLanguageRegistration(): Promise<void> {\n\t\treturn this._onReady().then(() => { });\n\t}\n\n\tprivate _getModeIdByLanguageName(languageName: string): string | null {\n\t\tconst modeIds = this._registry.getModeIdsFromLanguageName(languageName);\n\t\treturn firstOrDefault(modeIds, null);\n\t}\n\n\tprivate _getOrCreateMode(modeId: string): IMode {\n\t\tif (!this._instantiatedModes.hasOwnProperty(modeId)) {\n\t\t\tlet languageIdentifier = this.getLanguageIdentifier(modeId) || NULL_LANGUAGE_IDENTIFIER;\n\t\t\tthis._instantiatedModes[modeId] = new FrankensteinMode(languageIdentifier);\n\n\t\t\tthis._onDidCreateMode.fire(this._instantiatedModes[modeId]);\n\t\t}\n\t\treturn this._instantiatedModes[modeId];\n\t}\n}\n"]}