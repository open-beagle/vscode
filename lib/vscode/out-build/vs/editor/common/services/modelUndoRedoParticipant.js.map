{"version":3,"file":"modelUndoRedoParticipant.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/common/services/modelUndoRedoParticipant.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAQhG,IAAa,wBAAwB,GAArC,MAAa,wBAAyB,SAAQ,sBAAU;QACvD,YACiC,aAA4B,EACxB,iBAAoC,EACrC,gBAAkC;YAErE,KAAK,EAAE,CAAC;YAJwB,kBAAa,GAAb,aAAa,CAAe;YACxB,sBAAiB,GAAjB,iBAAiB,CAAmB;YACrC,qBAAgB,GAAhB,gBAAgB,CAAkB;YAGrE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,KAAK,EAAE,EAAE;gBAC1D,iFAAiF;gBACjF,MAAM,QAAQ,GAAG,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBAC9D,IAAI,QAAQ,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,IAAI,QAAQ,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;oBAC/D,OAAO;iBACP;gBACD,KAAK,MAAM,OAAO,IAAI,QAAQ,CAAC,IAAI,EAAE;oBACpC,IAAI,OAAO,YAAY,sCAA0B,EAAE;wBAClD,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;qBAC1B;iBACD;gBACD,KAAK,MAAM,OAAO,IAAI,QAAQ,CAAC,MAAM,EAAE;oBACtC,IAAI,OAAO,YAAY,sCAA0B,EAAE;wBAClD,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;qBAC1B;iBACD;YACF,CAAC,CAAC,CAAC,CAAC;QACL,CAAC;QAEM,eAAe,CAAC,OAAmC;YACzD,kCAAkC;YAClC,MAAM,aAAa,GAAG,OAAO,CAAC,gBAAgB,EAAE,CAAC;YACjD,IAAI,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC/B,4BAA4B;gBAC5B,OAAO,sBAAU,CAAC,IAAI,CAAC;aACvB;YAED,MAAM,mBAAmB,GAAG,aAAa,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;gBAC3D,IAAI;oBACH,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;oBACzE,OAAoB,SAAS,CAAC;iBAC9B;gBAAC,OAAO,GAAG,EAAE;oBACb,wEAAwE;oBACxE,OAAO,sBAAU,CAAC,IAAI,CAAC;iBACvB;YACF,CAAC,CAAC,CAAC;YAEH,OAAO,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;gBAC1D,OAAO;oBACN,OAAO,EAAE,GAAG,EAAE,CAAC,CAAA,GAAA,mBAAO,CAAA,CAAC,WAAW,CAAC;iBACnC,CAAC;YACH,CAAC,CAAC,CAAC;QACJ,CAAC;KACD,CAAA;IAlDY,wBAAwB;QAElC,WAAA,4BAAa,CAAA;QACb,WAAA,mCAAiB,CAAA;QACjB,WAAA,2BAAgB,CAAA;OAJN,wBAAwB,CAkDpC;IAlDY,4DAAwB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { ITextModelService } from 'vs/editor/common/services/resolverService';\nimport { Disposable, IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { IUndoRedoService } from 'vs/platform/undoRedo/common/undoRedo';\nimport { IUndoRedoDelegate, MultiModelEditStackElement } from 'vs/editor/common/model/editStack';\n\nexport class ModelUndoRedoParticipant extends Disposable implements IUndoRedoDelegate {\n\tconstructor(\n\t\t@IModelService private readonly _modelService: IModelService,\n\t\t@ITextModelService private readonly _textModelService: ITextModelService,\n\t\t@IUndoRedoService private readonly _undoRedoService: IUndoRedoService,\n\t) {\n\t\tsuper();\n\t\tthis._register(this._modelService.onModelRemoved((model) => {\n\t\t\t// a model will get disposed, so let's check if the undo redo stack is maintained\n\t\t\tconst elements = this._undoRedoService.getElements(model.uri);\n\t\t\tif (elements.past.length === 0 && elements.future.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tfor (const element of elements.past) {\n\t\t\t\tif (element instanceof MultiModelEditStackElement) {\n\t\t\t\t\telement.setDelegate(this);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const element of elements.future) {\n\t\t\t\tif (element instanceof MultiModelEditStackElement) {\n\t\t\t\t\telement.setDelegate(this);\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t}\n\n\tpublic prepareUndoRedo(element: MultiModelEditStackElement): IDisposable | Promise<IDisposable> {\n\t\t// Load all the needed text models\n\t\tconst missingModels = element.getMissingModels();\n\t\tif (missingModels.length === 0) {\n\t\t\t// All models are available!\n\t\t\treturn Disposable.None;\n\t\t}\n\n\t\tconst disposablesPromises = missingModels.map(async (uri) => {\n\t\t\ttry {\n\t\t\t\tconst reference = await this._textModelService.createModelReference(uri);\n\t\t\t\treturn <IDisposable>reference;\n\t\t\t} catch (err) {\n\t\t\t\t// This model could not be loaded, maybe it was deleted in the meantime?\n\t\t\t\treturn Disposable.None;\n\t\t\t}\n\t\t});\n\n\t\treturn Promise.all(disposablesPromises).then(disposables => {\n\t\t\treturn {\n\t\t\t\tdispose: () => dispose(disposables)\n\t\t\t};\n\t\t});\n\t}\n}\n"]}