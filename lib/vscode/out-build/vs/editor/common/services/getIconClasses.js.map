{"version":3,"file":"getIconClasses.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/common/services/getIconClasses.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Schemas } from 'vs/base/common/network';\nimport { DataUri, basenameOrAuthority } from 'vs/base/common/resources';\nimport { URI as uri } from 'vs/base/common/uri';\nimport { PLAINTEXT_MODE_ID } from 'vs/editor/common/modes/modesRegistry';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { FileKind } from 'vs/platform/files/common/files';\n\nexport function getIconClasses(modelService: IModelService, modeService: IModeService, resource: uri | undefined, fileKind?: FileKind): string[] {\n\n\t// we always set these base classes even if we do not have a path\n\tconst classes = fileKind === FileKind.ROOT_FOLDER ? ['rootfolder-icon'] : fileKind === FileKind.FOLDER ? ['folder-icon'] : ['file-icon'];\n\tif (resource) {\n\n\t\t// Get the path and name of the resource. For data-URIs, we need to parse specially\n\t\tlet name: string | undefined;\n\t\tif (resource.scheme === Schemas.data) {\n\t\t\tconst metadata = DataUri.parseMetaData(resource);\n\t\t\tname = metadata.get(DataUri.META_DATA_LABEL);\n\t\t} else {\n\t\t\tname = cssEscape(basenameOrAuthority(resource).toLowerCase());\n\t\t}\n\n\t\t// Folders\n\t\tif (fileKind === FileKind.FOLDER) {\n\t\t\tclasses.push(`${name}-name-folder-icon`);\n\t\t}\n\n\t\t// Files\n\t\telse {\n\n\t\t\t// Name & Extension(s)\n\t\t\tif (name) {\n\t\t\t\tclasses.push(`${name}-name-file-icon`);\n\t\t\t\t// Avoid doing an explosive combination of extensions for very long filenames\n\t\t\t\t// (most file systems do not allow files > 255 length) with lots of `.` characters\n\t\t\t\t// https://github.com/microsoft/vscode/issues/116199\n\t\t\t\tif (name.length <= 255) {\n\t\t\t\t\tconst dotSegments = name.split('.');\n\t\t\t\t\tfor (let i = 1; i < dotSegments.length; i++) {\n\t\t\t\t\t\tclasses.push(`${dotSegments.slice(i).join('.')}-ext-file-icon`); // add each combination of all found extensions if more than one\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tclasses.push(`ext-file-icon`); // extra segment to increase file-ext score\n\t\t\t}\n\n\t\t\t// Detected Mode\n\t\t\tconst detectedModeId = detectModeId(modelService, modeService, resource);\n\t\t\tif (detectedModeId) {\n\t\t\t\tclasses.push(`${cssEscape(detectedModeId)}-lang-file-icon`);\n\t\t\t}\n\t\t}\n\t}\n\treturn classes;\n}\n\n\nexport function getIconClassesForModeId(modeId: string): string[] {\n\treturn ['file-icon', `${cssEscape(modeId)}-lang-file-icon`];\n}\n\nexport function detectModeId(modelService: IModelService, modeService: IModeService, resource: uri): string | null {\n\tif (!resource) {\n\t\treturn null; // we need a resource at least\n\t}\n\n\tlet modeId: string | null = null;\n\n\t// Data URI: check for encoded metadata\n\tif (resource.scheme === Schemas.data) {\n\t\tconst metadata = DataUri.parseMetaData(resource);\n\t\tconst mime = metadata.get(DataUri.META_DATA_MIME);\n\n\t\tif (mime) {\n\t\t\tmodeId = modeService.getModeId(mime);\n\t\t}\n\t}\n\n\t// Any other URI: check for model if existing\n\telse {\n\t\tconst model = modelService.getModel(resource);\n\t\tif (model) {\n\t\t\tmodeId = model.getModeId();\n\t\t}\n\t}\n\n\t// only take if the mode is specific (aka no just plain text)\n\tif (modeId && modeId !== PLAINTEXT_MODE_ID) {\n\t\treturn modeId;\n\t}\n\n\t// otherwise fallback to path based detection\n\treturn modeService.getModeIdByFilepathOrFirstLine(resource);\n}\n\nexport function cssEscape(str: string): string {\n\treturn str.replace(/[\\11\\12\\14\\15\\40]/g, '/'); // HTML class names can not contain certain whitespace characters, use / instead, which doesn't exist in file names.\n}\n"]}