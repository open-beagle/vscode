{"version":3,"file":"viewLineRenderer.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/common/viewLayout/viewLineRenderer.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from 'vs/base/common/charCode';\nimport * as strings from 'vs/base/common/strings';\nimport { IViewLineTokens } from 'vs/editor/common/core/lineTokens';\nimport { IStringBuilder, createStringBuilder } from 'vs/editor/common/core/stringBuilder';\nimport { LineDecoration, LineDecorationsNormalizer } from 'vs/editor/common/viewLayout/lineDecorations';\nimport { InlineDecorationType } from 'vs/editor/common/viewModel/viewModel';\n\nexport const enum RenderWhitespace {\n\tNone = 0,\n\tBoundary = 1,\n\tSelection = 2,\n\tTrailing = 3,\n\tAll = 4\n}\n\nexport const enum LinePartMetadata {\n\tIS_WHITESPACE = 1,\n\tPSEUDO_BEFORE = 2,\n\tPSEUDO_AFTER = 4,\n\n\tIS_WHITESPACE_MASK = 0b001,\n\tPSEUDO_BEFORE_MASK = 0b010,\n\tPSEUDO_AFTER_MASK = 0b100,\n}\n\nclass LinePart {\n\t_linePartBrand: void;\n\n\t/**\n\t * last char index of this token (not inclusive).\n\t */\n\tpublic readonly endIndex: number;\n\tpublic readonly type: string;\n\tpublic readonly metadata: number;\n\n\tconstructor(endIndex: number, type: string, metadata: number) {\n\t\tthis.endIndex = endIndex;\n\t\tthis.type = type;\n\t\tthis.metadata = metadata;\n\t}\n\n\tpublic isWhitespace(): boolean {\n\t\treturn (this.metadata & LinePartMetadata.IS_WHITESPACE_MASK ? true : false);\n\t}\n}\n\nexport class LineRange {\n\t/**\n\t * Zero-based offset on which the range starts, inclusive.\n\t */\n\tpublic readonly startOffset: number;\n\n\t/**\n\t * Zero-based offset on which the range ends, inclusive.\n\t */\n\tpublic readonly endOffset: number;\n\n\tconstructor(startIndex: number, endIndex: number) {\n\t\tthis.startOffset = startIndex;\n\t\tthis.endOffset = endIndex;\n\t}\n\n\tpublic equals(otherLineRange: LineRange) {\n\t\treturn this.startOffset === otherLineRange.startOffset\n\t\t\t&& this.endOffset === otherLineRange.endOffset;\n\t}\n}\n\nexport class RenderLineInput {\n\n\tpublic readonly useMonospaceOptimizations: boolean;\n\tpublic readonly canUseHalfwidthRightwardsArrow: boolean;\n\tpublic readonly lineContent: string;\n\tpublic readonly continuesWithWrappedLine: boolean;\n\tpublic readonly isBasicASCII: boolean;\n\tpublic readonly containsRTL: boolean;\n\tpublic readonly fauxIndentLength: number;\n\tpublic readonly lineTokens: IViewLineTokens;\n\tpublic readonly lineDecorations: LineDecoration[];\n\tpublic readonly tabSize: number;\n\tpublic readonly startVisibleColumn: number;\n\tpublic readonly spaceWidth: number;\n\tpublic readonly renderSpaceWidth: number;\n\tpublic readonly renderSpaceCharCode: number;\n\tpublic readonly stopRenderingLineAfter: number;\n\tpublic readonly renderWhitespace: RenderWhitespace;\n\tpublic readonly renderControlCharacters: boolean;\n\tpublic readonly fontLigatures: boolean;\n\n\t/**\n\t * Defined only when renderWhitespace is 'selection'. Selections are non-overlapping,\n\t * and ordered by position within the line.\n\t */\n\tpublic readonly selectionsOnLine: LineRange[] | null;\n\n\tconstructor(\n\t\tuseMonospaceOptimizations: boolean,\n\t\tcanUseHalfwidthRightwardsArrow: boolean,\n\t\tlineContent: string,\n\t\tcontinuesWithWrappedLine: boolean,\n\t\tisBasicASCII: boolean,\n\t\tcontainsRTL: boolean,\n\t\tfauxIndentLength: number,\n\t\tlineTokens: IViewLineTokens,\n\t\tlineDecorations: LineDecoration[],\n\t\ttabSize: number,\n\t\tstartVisibleColumn: number,\n\t\tspaceWidth: number,\n\t\tmiddotWidth: number,\n\t\twsmiddotWidth: number,\n\t\tstopRenderingLineAfter: number,\n\t\trenderWhitespace: 'none' | 'boundary' | 'selection' | 'trailing' | 'all',\n\t\trenderControlCharacters: boolean,\n\t\tfontLigatures: boolean,\n\t\tselectionsOnLine: LineRange[] | null\n\t) {\n\t\tthis.useMonospaceOptimizations = useMonospaceOptimizations;\n\t\tthis.canUseHalfwidthRightwardsArrow = canUseHalfwidthRightwardsArrow;\n\t\tthis.lineContent = lineContent;\n\t\tthis.continuesWithWrappedLine = continuesWithWrappedLine;\n\t\tthis.isBasicASCII = isBasicASCII;\n\t\tthis.containsRTL = containsRTL;\n\t\tthis.fauxIndentLength = fauxIndentLength;\n\t\tthis.lineTokens = lineTokens;\n\t\tthis.lineDecorations = lineDecorations.sort(LineDecoration.compare);\n\t\tthis.tabSize = tabSize;\n\t\tthis.startVisibleColumn = startVisibleColumn;\n\t\tthis.spaceWidth = spaceWidth;\n\t\tthis.stopRenderingLineAfter = stopRenderingLineAfter;\n\t\tthis.renderWhitespace = (\n\t\t\trenderWhitespace === 'all'\n\t\t\t\t? RenderWhitespace.All\n\t\t\t\t: renderWhitespace === 'boundary'\n\t\t\t\t\t? RenderWhitespace.Boundary\n\t\t\t\t\t: renderWhitespace === 'selection'\n\t\t\t\t\t\t? RenderWhitespace.Selection\n\t\t\t\t\t\t: renderWhitespace === 'trailing'\n\t\t\t\t\t\t\t? RenderWhitespace.Trailing\n\t\t\t\t\t\t\t: RenderWhitespace.None\n\t\t);\n\t\tthis.renderControlCharacters = renderControlCharacters;\n\t\tthis.fontLigatures = fontLigatures;\n\t\tthis.selectionsOnLine = selectionsOnLine && selectionsOnLine.sort((a, b) => a.startOffset < b.startOffset ? -1 : 1);\n\n\t\tconst wsmiddotDiff = Math.abs(wsmiddotWidth - spaceWidth);\n\t\tconst middotDiff = Math.abs(middotWidth - spaceWidth);\n\t\tif (wsmiddotDiff < middotDiff) {\n\t\t\tthis.renderSpaceWidth = wsmiddotWidth;\n\t\t\tthis.renderSpaceCharCode = 0x2E31; // U+2E31 - WORD SEPARATOR MIDDLE DOT\n\t\t} else {\n\t\t\tthis.renderSpaceWidth = middotWidth;\n\t\t\tthis.renderSpaceCharCode = 0xB7; // U+00B7 - MIDDLE DOT\n\t\t}\n\t}\n\n\tprivate sameSelection(otherSelections: LineRange[] | null): boolean {\n\t\tif (this.selectionsOnLine === null) {\n\t\t\treturn otherSelections === null;\n\t\t}\n\n\t\tif (otherSelections === null) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (otherSelections.length !== this.selectionsOnLine.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (let i = 0; i < this.selectionsOnLine.length; i++) {\n\t\t\tif (!this.selectionsOnLine[i].equals(otherSelections[i])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tpublic equals(other: RenderLineInput): boolean {\n\t\treturn (\n\t\t\tthis.useMonospaceOptimizations === other.useMonospaceOptimizations\n\t\t\t&& this.canUseHalfwidthRightwardsArrow === other.canUseHalfwidthRightwardsArrow\n\t\t\t&& this.lineContent === other.lineContent\n\t\t\t&& this.continuesWithWrappedLine === other.continuesWithWrappedLine\n\t\t\t&& this.isBasicASCII === other.isBasicASCII\n\t\t\t&& this.containsRTL === other.containsRTL\n\t\t\t&& this.fauxIndentLength === other.fauxIndentLength\n\t\t\t&& this.tabSize === other.tabSize\n\t\t\t&& this.startVisibleColumn === other.startVisibleColumn\n\t\t\t&& this.spaceWidth === other.spaceWidth\n\t\t\t&& this.renderSpaceWidth === other.renderSpaceWidth\n\t\t\t&& this.renderSpaceCharCode === other.renderSpaceCharCode\n\t\t\t&& this.stopRenderingLineAfter === other.stopRenderingLineAfter\n\t\t\t&& this.renderWhitespace === other.renderWhitespace\n\t\t\t&& this.renderControlCharacters === other.renderControlCharacters\n\t\t\t&& this.fontLigatures === other.fontLigatures\n\t\t\t&& LineDecoration.equalsArr(this.lineDecorations, other.lineDecorations)\n\t\t\t&& this.lineTokens.equals(other.lineTokens)\n\t\t\t&& this.sameSelection(other.selectionsOnLine)\n\t\t);\n\t}\n}\n\nexport const enum CharacterMappingConstants {\n\tPART_INDEX_MASK = 0b11111111111111110000000000000000,\n\tCHAR_INDEX_MASK = 0b00000000000000001111111111111111,\n\n\tCHAR_INDEX_OFFSET = 0,\n\tPART_INDEX_OFFSET = 16\n}\n\n/**\n * Provides a both direction mapping between a line's character and its rendered position.\n */\nexport class CharacterMapping {\n\n\tpublic static getPartIndex(partData: number): number {\n\t\treturn (partData & CharacterMappingConstants.PART_INDEX_MASK) >>> CharacterMappingConstants.PART_INDEX_OFFSET;\n\t}\n\n\tpublic static getCharIndex(partData: number): number {\n\t\treturn (partData & CharacterMappingConstants.CHAR_INDEX_MASK) >>> CharacterMappingConstants.CHAR_INDEX_OFFSET;\n\t}\n\n\tpublic readonly length: number;\n\tprivate readonly _data: Uint32Array;\n\tprivate readonly _absoluteOffsets: Uint32Array;\n\n\tconstructor(length: number, partCount: number) {\n\t\tthis.length = length;\n\t\tthis._data = new Uint32Array(this.length);\n\t\tthis._absoluteOffsets = new Uint32Array(this.length);\n\t}\n\n\tpublic setPartData(charOffset: number, partIndex: number, charIndex: number, partAbsoluteOffset: number): void {\n\t\tlet partData = (\n\t\t\t(partIndex << CharacterMappingConstants.PART_INDEX_OFFSET)\n\t\t\t| (charIndex << CharacterMappingConstants.CHAR_INDEX_OFFSET)\n\t\t) >>> 0;\n\t\tthis._data[charOffset] = partData;\n\t\tthis._absoluteOffsets[charOffset] = partAbsoluteOffset + charIndex;\n\t}\n\n\tpublic getAbsoluteOffsets(): Uint32Array {\n\t\treturn this._absoluteOffsets;\n\t}\n\n\tpublic charOffsetToPartData(charOffset: number): number {\n\t\tif (this.length === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tif (charOffset < 0) {\n\t\t\treturn this._data[0];\n\t\t}\n\t\tif (charOffset >= this.length) {\n\t\t\treturn this._data[this.length - 1];\n\t\t}\n\t\treturn this._data[charOffset];\n\t}\n\n\tpublic partDataToCharOffset(partIndex: number, partLength: number, charIndex: number): number {\n\t\tif (this.length === 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tlet searchEntry = (\n\t\t\t(partIndex << CharacterMappingConstants.PART_INDEX_OFFSET)\n\t\t\t| (charIndex << CharacterMappingConstants.CHAR_INDEX_OFFSET)\n\t\t) >>> 0;\n\n\t\tlet min = 0;\n\t\tlet max = this.length - 1;\n\t\twhile (min + 1 < max) {\n\t\t\tlet mid = ((min + max) >>> 1);\n\t\t\tlet midEntry = this._data[mid];\n\t\t\tif (midEntry === searchEntry) {\n\t\t\t\treturn mid;\n\t\t\t} else if (midEntry > searchEntry) {\n\t\t\t\tmax = mid;\n\t\t\t} else {\n\t\t\t\tmin = mid;\n\t\t\t}\n\t\t}\n\n\t\tif (min === max) {\n\t\t\treturn min;\n\t\t}\n\n\t\tlet minEntry = this._data[min];\n\t\tlet maxEntry = this._data[max];\n\n\t\tif (minEntry === searchEntry) {\n\t\t\treturn min;\n\t\t}\n\t\tif (maxEntry === searchEntry) {\n\t\t\treturn max;\n\t\t}\n\n\t\tlet minPartIndex = CharacterMapping.getPartIndex(minEntry);\n\t\tlet minCharIndex = CharacterMapping.getCharIndex(minEntry);\n\n\t\tlet maxPartIndex = CharacterMapping.getPartIndex(maxEntry);\n\t\tlet maxCharIndex: number;\n\n\t\tif (minPartIndex !== maxPartIndex) {\n\t\t\t// sitting between parts\n\t\t\tmaxCharIndex = partLength;\n\t\t} else {\n\t\t\tmaxCharIndex = CharacterMapping.getCharIndex(maxEntry);\n\t\t}\n\n\t\tlet minEntryDistance = charIndex - minCharIndex;\n\t\tlet maxEntryDistance = maxCharIndex - charIndex;\n\n\t\tif (minEntryDistance <= maxEntryDistance) {\n\t\t\treturn min;\n\t\t}\n\t\treturn max;\n\t}\n}\n\nexport const enum ForeignElementType {\n\tNone = 0,\n\tBefore = 1,\n\tAfter = 2\n}\n\nexport class RenderLineOutput {\n\t_renderLineOutputBrand: void;\n\n\treadonly characterMapping: CharacterMapping;\n\treadonly containsRTL: boolean;\n\treadonly containsForeignElements: ForeignElementType;\n\n\tconstructor(characterMapping: CharacterMapping, containsRTL: boolean, containsForeignElements: ForeignElementType) {\n\t\tthis.characterMapping = characterMapping;\n\t\tthis.containsRTL = containsRTL;\n\t\tthis.containsForeignElements = containsForeignElements;\n\t}\n}\n\nexport function renderViewLine(input: RenderLineInput, sb: IStringBuilder): RenderLineOutput {\n\tif (input.lineContent.length === 0) {\n\n\t\tif (input.lineDecorations.length > 0) {\n\t\t\t// This line is empty, but it contains inline decorations\n\t\t\tsb.appendASCIIString(`<span>`);\n\n\t\t\tlet beforeCount = 0;\n\t\t\tlet afterCount = 0;\n\t\t\tlet containsForeignElements = ForeignElementType.None;\n\t\t\tfor (const lineDecoration of input.lineDecorations) {\n\t\t\t\tif (lineDecoration.type === InlineDecorationType.Before || lineDecoration.type === InlineDecorationType.After) {\n\t\t\t\t\tsb.appendASCIIString(`<span class=\"`);\n\t\t\t\t\tsb.appendASCIIString(lineDecoration.className);\n\t\t\t\t\tsb.appendASCIIString(`\"></span>`);\n\n\t\t\t\t\tif (lineDecoration.type === InlineDecorationType.Before) {\n\t\t\t\t\t\tcontainsForeignElements |= ForeignElementType.Before;\n\t\t\t\t\t\tbeforeCount++;\n\t\t\t\t\t}\n\t\t\t\t\tif (lineDecoration.type === InlineDecorationType.After) {\n\t\t\t\t\t\tcontainsForeignElements |= ForeignElementType.After;\n\t\t\t\t\t\tafterCount++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tsb.appendASCIIString(`</span>`);\n\n\t\t\tconst characterMapping = new CharacterMapping(1, beforeCount + afterCount);\n\t\t\tcharacterMapping.setPartData(0, beforeCount, 0, 0);\n\n\t\t\treturn new RenderLineOutput(\n\t\t\t\tcharacterMapping,\n\t\t\t\tfalse,\n\t\t\t\tcontainsForeignElements\n\t\t\t);\n\t\t}\n\n\t\t// completely empty line\n\t\tsb.appendASCIIString('<span><span></span></span>');\n\t\treturn new RenderLineOutput(\n\t\t\tnew CharacterMapping(0, 0),\n\t\t\tfalse,\n\t\t\tForeignElementType.None\n\t\t);\n\t}\n\n\treturn _renderLine(resolveRenderLineInput(input), sb);\n}\n\nexport class RenderLineOutput2 {\n\tconstructor(\n\t\tpublic readonly characterMapping: CharacterMapping,\n\t\tpublic readonly html: string,\n\t\tpublic readonly containsRTL: boolean,\n\t\tpublic readonly containsForeignElements: ForeignElementType\n\t) {\n\t}\n}\n\nexport function renderViewLine2(input: RenderLineInput): RenderLineOutput2 {\n\tlet sb = createStringBuilder(10000);\n\tlet out = renderViewLine(input, sb);\n\treturn new RenderLineOutput2(out.characterMapping, sb.build(), out.containsRTL, out.containsForeignElements);\n}\n\nclass ResolvedRenderLineInput {\n\tconstructor(\n\t\tpublic readonly fontIsMonospace: boolean,\n\t\tpublic readonly canUseHalfwidthRightwardsArrow: boolean,\n\t\tpublic readonly lineContent: string,\n\t\tpublic readonly len: number,\n\t\tpublic readonly isOverflowing: boolean,\n\t\tpublic readonly parts: LinePart[],\n\t\tpublic readonly containsForeignElements: ForeignElementType,\n\t\tpublic readonly fauxIndentLength: number,\n\t\tpublic readonly tabSize: number,\n\t\tpublic readonly startVisibleColumn: number,\n\t\tpublic readonly containsRTL: boolean,\n\t\tpublic readonly spaceWidth: number,\n\t\tpublic readonly renderSpaceCharCode: number,\n\t\tpublic readonly renderWhitespace: RenderWhitespace,\n\t\tpublic readonly renderControlCharacters: boolean,\n\t) {\n\t\t//\n\t}\n}\n\nfunction resolveRenderLineInput(input: RenderLineInput): ResolvedRenderLineInput {\n\tconst lineContent = input.lineContent;\n\n\tlet isOverflowing: boolean;\n\tlet len: number;\n\n\tif (input.stopRenderingLineAfter !== -1 && input.stopRenderingLineAfter < lineContent.length) {\n\t\tisOverflowing = true;\n\t\tlen = input.stopRenderingLineAfter;\n\t} else {\n\t\tisOverflowing = false;\n\t\tlen = lineContent.length;\n\t}\n\n\tlet tokens = transformAndRemoveOverflowing(input.lineTokens, input.fauxIndentLength, len);\n\tif (input.renderWhitespace === RenderWhitespace.All ||\n\t\tinput.renderWhitespace === RenderWhitespace.Boundary ||\n\t\t(input.renderWhitespace === RenderWhitespace.Selection && !!input.selectionsOnLine) ||\n\t\tinput.renderWhitespace === RenderWhitespace.Trailing) {\n\n\t\ttokens = _applyRenderWhitespace(input, lineContent, len, tokens);\n\t}\n\tlet containsForeignElements = ForeignElementType.None;\n\tif (input.lineDecorations.length > 0) {\n\t\tfor (let i = 0, len = input.lineDecorations.length; i < len; i++) {\n\t\t\tconst lineDecoration = input.lineDecorations[i];\n\t\t\tif (lineDecoration.type === InlineDecorationType.RegularAffectingLetterSpacing) {\n\t\t\t\t// Pretend there are foreign elements... although not 100% accurate.\n\t\t\t\tcontainsForeignElements |= ForeignElementType.Before;\n\t\t\t} else if (lineDecoration.type === InlineDecorationType.Before) {\n\t\t\t\tcontainsForeignElements |= ForeignElementType.Before;\n\t\t\t} else if (lineDecoration.type === InlineDecorationType.After) {\n\t\t\t\tcontainsForeignElements |= ForeignElementType.After;\n\t\t\t}\n\t\t}\n\t\ttokens = _applyInlineDecorations(lineContent, len, tokens, input.lineDecorations);\n\t}\n\tif (!input.containsRTL) {\n\t\t// We can never split RTL text, as it ruins the rendering\n\t\ttokens = splitLargeTokens(lineContent, tokens, !input.isBasicASCII || input.fontLigatures);\n\t}\n\n\treturn new ResolvedRenderLineInput(\n\t\tinput.useMonospaceOptimizations,\n\t\tinput.canUseHalfwidthRightwardsArrow,\n\t\tlineContent,\n\t\tlen,\n\t\tisOverflowing,\n\t\ttokens,\n\t\tcontainsForeignElements,\n\t\tinput.fauxIndentLength,\n\t\tinput.tabSize,\n\t\tinput.startVisibleColumn,\n\t\tinput.containsRTL,\n\t\tinput.spaceWidth,\n\t\tinput.renderSpaceCharCode,\n\t\tinput.renderWhitespace,\n\t\tinput.renderControlCharacters\n\t);\n}\n\n/**\n * In the rendering phase, characters are always looped until token.endIndex.\n * Ensure that all tokens end before `len` and the last one ends precisely at `len`.\n */\nfunction transformAndRemoveOverflowing(tokens: IViewLineTokens, fauxIndentLength: number, len: number): LinePart[] {\n\tlet result: LinePart[] = [], resultLen = 0;\n\n\t// The faux indent part of the line should have no token type\n\tif (fauxIndentLength > 0) {\n\t\tresult[resultLen++] = new LinePart(fauxIndentLength, '', 0);\n\t}\n\n\tfor (let tokenIndex = 0, tokensLen = tokens.getCount(); tokenIndex < tokensLen; tokenIndex++) {\n\t\tconst endIndex = tokens.getEndOffset(tokenIndex);\n\t\tif (endIndex <= fauxIndentLength) {\n\t\t\t// The faux indent part of the line should have no token type\n\t\t\tcontinue;\n\t\t}\n\t\tconst type = tokens.getClassName(tokenIndex);\n\t\tif (endIndex >= len) {\n\t\t\tresult[resultLen++] = new LinePart(len, type, 0);\n\t\t\tbreak;\n\t\t}\n\t\tresult[resultLen++] = new LinePart(endIndex, type, 0);\n\t}\n\n\treturn result;\n}\n\n/**\n * written as a const enum to get value inlining.\n */\nconst enum Constants {\n\tLongToken = 50\n}\n\n/**\n * See https://github.com/microsoft/vscode/issues/6885.\n * It appears that having very large spans causes very slow reading of character positions.\n * So here we try to avoid that.\n */\nfunction splitLargeTokens(lineContent: string, tokens: LinePart[], onlyAtSpaces: boolean): LinePart[] {\n\tlet lastTokenEndIndex = 0;\n\tlet result: LinePart[] = [], resultLen = 0;\n\n\tif (onlyAtSpaces) {\n\t\t// Split only at spaces => we need to walk each character\n\t\tfor (let i = 0, len = tokens.length; i < len; i++) {\n\t\t\tconst token = tokens[i];\n\t\t\tconst tokenEndIndex = token.endIndex;\n\t\t\tif (lastTokenEndIndex + Constants.LongToken < tokenEndIndex) {\n\t\t\t\tconst tokenType = token.type;\n\t\t\t\tconst tokenMetadata = token.metadata;\n\n\t\t\t\tlet lastSpaceOffset = -1;\n\t\t\t\tlet currTokenStart = lastTokenEndIndex;\n\t\t\t\tfor (let j = lastTokenEndIndex; j < tokenEndIndex; j++) {\n\t\t\t\t\tif (lineContent.charCodeAt(j) === CharCode.Space) {\n\t\t\t\t\t\tlastSpaceOffset = j;\n\t\t\t\t\t}\n\t\t\t\t\tif (lastSpaceOffset !== -1 && j - currTokenStart >= Constants.LongToken) {\n\t\t\t\t\t\t// Split at `lastSpaceOffset` + 1\n\t\t\t\t\t\tresult[resultLen++] = new LinePart(lastSpaceOffset + 1, tokenType, tokenMetadata);\n\t\t\t\t\t\tcurrTokenStart = lastSpaceOffset + 1;\n\t\t\t\t\t\tlastSpaceOffset = -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (currTokenStart !== tokenEndIndex) {\n\t\t\t\t\tresult[resultLen++] = new LinePart(tokenEndIndex, tokenType, tokenMetadata);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresult[resultLen++] = token;\n\t\t\t}\n\n\t\t\tlastTokenEndIndex = tokenEndIndex;\n\t\t}\n\t} else {\n\t\t// Split anywhere => we don't need to walk each character\n\t\tfor (let i = 0, len = tokens.length; i < len; i++) {\n\t\t\tconst token = tokens[i];\n\t\t\tconst tokenEndIndex = token.endIndex;\n\t\t\tlet diff = (tokenEndIndex - lastTokenEndIndex);\n\t\t\tif (diff > Constants.LongToken) {\n\t\t\t\tconst tokenType = token.type;\n\t\t\t\tconst tokenMetadata = token.metadata;\n\t\t\t\tconst piecesCount = Math.ceil(diff / Constants.LongToken);\n\t\t\t\tfor (let j = 1; j < piecesCount; j++) {\n\t\t\t\t\tlet pieceEndIndex = lastTokenEndIndex + (j * Constants.LongToken);\n\t\t\t\t\tresult[resultLen++] = new LinePart(pieceEndIndex, tokenType, tokenMetadata);\n\t\t\t\t}\n\t\t\t\tresult[resultLen++] = new LinePart(tokenEndIndex, tokenType, tokenMetadata);\n\t\t\t} else {\n\t\t\t\tresult[resultLen++] = token;\n\t\t\t}\n\t\t\tlastTokenEndIndex = tokenEndIndex;\n\t\t}\n\t}\n\n\treturn result;\n}\n\n/**\n * Whitespace is rendered by \"replacing\" tokens with a special-purpose `mtkw` type that is later recognized in the rendering phase.\n * Moreover, a token is created for every visual indent because on some fonts the glyphs used for rendering whitespace (&rarr; or &middot;) do not have the same width as &nbsp;.\n * The rendering phase will generate `style=\"width:...\"` for these tokens.\n */\nfunction _applyRenderWhitespace(input: RenderLineInput, lineContent: string, len: number, tokens: LinePart[]): LinePart[] {\n\n\tconst continuesWithWrappedLine = input.continuesWithWrappedLine;\n\tconst fauxIndentLength = input.fauxIndentLength;\n\tconst tabSize = input.tabSize;\n\tconst startVisibleColumn = input.startVisibleColumn;\n\tconst useMonospaceOptimizations = input.useMonospaceOptimizations;\n\tconst selections = input.selectionsOnLine;\n\tconst onlyBoundary = (input.renderWhitespace === RenderWhitespace.Boundary);\n\tconst onlyTrailing = (input.renderWhitespace === RenderWhitespace.Trailing);\n\tconst generateLinePartForEachWhitespace = (input.renderSpaceWidth !== input.spaceWidth);\n\n\tlet result: LinePart[] = [], resultLen = 0;\n\tlet tokenIndex = 0;\n\tlet tokenType = tokens[tokenIndex].type;\n\tlet tokenEndIndex = tokens[tokenIndex].endIndex;\n\tconst tokensLength = tokens.length;\n\n\tlet lineIsEmptyOrWhitespace = false;\n\tlet firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineContent);\n\tlet lastNonWhitespaceIndex: number;\n\tif (firstNonWhitespaceIndex === -1) {\n\t\tlineIsEmptyOrWhitespace = true;\n\t\tfirstNonWhitespaceIndex = len;\n\t\tlastNonWhitespaceIndex = len;\n\t} else {\n\t\tlastNonWhitespaceIndex = strings.lastNonWhitespaceIndex(lineContent);\n\t}\n\n\tlet wasInWhitespace = false;\n\tlet currentSelectionIndex = 0;\n\tlet currentSelection = selections && selections[currentSelectionIndex];\n\tlet tmpIndent = startVisibleColumn % tabSize;\n\tfor (let charIndex = fauxIndentLength; charIndex < len; charIndex++) {\n\t\tconst chCode = lineContent.charCodeAt(charIndex);\n\n\t\tif (currentSelection && charIndex >= currentSelection.endOffset) {\n\t\t\tcurrentSelectionIndex++;\n\t\t\tcurrentSelection = selections && selections[currentSelectionIndex];\n\t\t}\n\n\t\tlet isInWhitespace: boolean;\n\t\tif (charIndex < firstNonWhitespaceIndex || charIndex > lastNonWhitespaceIndex) {\n\t\t\t// in leading or trailing whitespace\n\t\t\tisInWhitespace = true;\n\t\t} else if (chCode === CharCode.Tab) {\n\t\t\t// a tab character is rendered both in all and boundary cases\n\t\t\tisInWhitespace = true;\n\t\t} else if (chCode === CharCode.Space) {\n\t\t\t// hit a space character\n\t\t\tif (onlyBoundary) {\n\t\t\t\t// rendering only boundary whitespace\n\t\t\t\tif (wasInWhitespace) {\n\t\t\t\t\tisInWhitespace = true;\n\t\t\t\t} else {\n\t\t\t\t\tconst nextChCode = (charIndex + 1 < len ? lineContent.charCodeAt(charIndex + 1) : CharCode.Null);\n\t\t\t\t\tisInWhitespace = (nextChCode === CharCode.Space || nextChCode === CharCode.Tab);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tisInWhitespace = true;\n\t\t\t}\n\t\t} else {\n\t\t\tisInWhitespace = false;\n\t\t}\n\n\t\t// If rendering whitespace on selection, check that the charIndex falls within a selection\n\t\tif (isInWhitespace && selections) {\n\t\t\tisInWhitespace = !!currentSelection && currentSelection.startOffset <= charIndex && currentSelection.endOffset > charIndex;\n\t\t}\n\n\t\t// If rendering only trailing whitespace, check that the charIndex points to trailing whitespace.\n\t\tif (isInWhitespace && onlyTrailing) {\n\t\t\tisInWhitespace = lineIsEmptyOrWhitespace || charIndex > lastNonWhitespaceIndex;\n\t\t}\n\n\t\tif (wasInWhitespace) {\n\t\t\t// was in whitespace token\n\t\t\tif (!isInWhitespace || (!useMonospaceOptimizations && tmpIndent >= tabSize)) {\n\t\t\t\t// leaving whitespace token or entering a new indent\n\t\t\t\tif (generateLinePartForEachWhitespace) {\n\t\t\t\t\tconst lastEndIndex = (resultLen > 0 ? result[resultLen - 1].endIndex : fauxIndentLength);\n\t\t\t\t\tfor (let i = lastEndIndex + 1; i <= charIndex; i++) {\n\t\t\t\t\t\tresult[resultLen++] = new LinePart(i, 'mtkw', LinePartMetadata.IS_WHITESPACE);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tresult[resultLen++] = new LinePart(charIndex, 'mtkw', LinePartMetadata.IS_WHITESPACE);\n\t\t\t\t}\n\t\t\t\ttmpIndent = tmpIndent % tabSize;\n\t\t\t}\n\t\t} else {\n\t\t\t// was in regular token\n\t\t\tif (charIndex === tokenEndIndex || (isInWhitespace && charIndex > fauxIndentLength)) {\n\t\t\t\tresult[resultLen++] = new LinePart(charIndex, tokenType, 0);\n\t\t\t\ttmpIndent = tmpIndent % tabSize;\n\t\t\t}\n\t\t}\n\n\t\tif (chCode === CharCode.Tab) {\n\t\t\ttmpIndent = tabSize;\n\t\t} else if (strings.isFullWidthCharacter(chCode)) {\n\t\t\ttmpIndent += 2;\n\t\t} else {\n\t\t\ttmpIndent++;\n\t\t}\n\n\t\twasInWhitespace = isInWhitespace;\n\n\t\twhile (charIndex === tokenEndIndex) {\n\t\t\ttokenIndex++;\n\t\t\tif (tokenIndex < tokensLength) {\n\t\t\t\ttokenType = tokens[tokenIndex].type;\n\t\t\t\ttokenEndIndex = tokens[tokenIndex].endIndex;\n\t\t\t}\n\t\t}\n\t}\n\n\tlet generateWhitespace = false;\n\tif (wasInWhitespace) {\n\t\t// was in whitespace token\n\t\tif (continuesWithWrappedLine && onlyBoundary) {\n\t\t\tlet lastCharCode = (len > 0 ? lineContent.charCodeAt(len - 1) : CharCode.Null);\n\t\t\tlet prevCharCode = (len > 1 ? lineContent.charCodeAt(len - 2) : CharCode.Null);\n\t\t\tlet isSingleTrailingSpace = (lastCharCode === CharCode.Space && (prevCharCode !== CharCode.Space && prevCharCode !== CharCode.Tab));\n\t\t\tif (!isSingleTrailingSpace) {\n\t\t\t\tgenerateWhitespace = true;\n\t\t\t}\n\t\t} else {\n\t\t\tgenerateWhitespace = true;\n\t\t}\n\t}\n\n\tif (generateWhitespace) {\n\t\tif (generateLinePartForEachWhitespace) {\n\t\t\tconst lastEndIndex = (resultLen > 0 ? result[resultLen - 1].endIndex : fauxIndentLength);\n\t\t\tfor (let i = lastEndIndex + 1; i <= len; i++) {\n\t\t\t\tresult[resultLen++] = new LinePart(i, 'mtkw', LinePartMetadata.IS_WHITESPACE);\n\t\t\t}\n\t\t} else {\n\t\t\tresult[resultLen++] = new LinePart(len, 'mtkw', LinePartMetadata.IS_WHITESPACE);\n\t\t}\n\t} else {\n\t\tresult[resultLen++] = new LinePart(len, tokenType, 0);\n\t}\n\n\treturn result;\n}\n\n/**\n * Inline decorations are \"merged\" on top of tokens.\n * Special care must be taken when multiple inline decorations are at play and they overlap.\n */\nfunction _applyInlineDecorations(lineContent: string, len: number, tokens: LinePart[], _lineDecorations: LineDecoration[]): LinePart[] {\n\t_lineDecorations.sort(LineDecoration.compare);\n\tconst lineDecorations = LineDecorationsNormalizer.normalize(lineContent, _lineDecorations);\n\tconst lineDecorationsLen = lineDecorations.length;\n\n\tlet lineDecorationIndex = 0;\n\tlet result: LinePart[] = [], resultLen = 0, lastResultEndIndex = 0;\n\tfor (let tokenIndex = 0, len = tokens.length; tokenIndex < len; tokenIndex++) {\n\t\tconst token = tokens[tokenIndex];\n\t\tconst tokenEndIndex = token.endIndex;\n\t\tconst tokenType = token.type;\n\t\tconst tokenMetadata = token.metadata;\n\n\t\twhile (lineDecorationIndex < lineDecorationsLen && lineDecorations[lineDecorationIndex].startOffset < tokenEndIndex) {\n\t\t\tconst lineDecoration = lineDecorations[lineDecorationIndex];\n\n\t\t\tif (lineDecoration.startOffset > lastResultEndIndex) {\n\t\t\t\tlastResultEndIndex = lineDecoration.startOffset;\n\t\t\t\tresult[resultLen++] = new LinePart(lastResultEndIndex, tokenType, tokenMetadata);\n\t\t\t}\n\n\t\t\tif (lineDecoration.endOffset + 1 <= tokenEndIndex) {\n\t\t\t\t// This line decoration ends before this token ends\n\t\t\t\tlastResultEndIndex = lineDecoration.endOffset + 1;\n\t\t\t\tresult[resultLen++] = new LinePart(lastResultEndIndex, tokenType + ' ' + lineDecoration.className, tokenMetadata | lineDecoration.metadata);\n\t\t\t\tlineDecorationIndex++;\n\t\t\t} else {\n\t\t\t\t// This line decoration continues on to the next token\n\t\t\t\tlastResultEndIndex = tokenEndIndex;\n\t\t\t\tresult[resultLen++] = new LinePart(lastResultEndIndex, tokenType + ' ' + lineDecoration.className, tokenMetadata | lineDecoration.metadata);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (tokenEndIndex > lastResultEndIndex) {\n\t\t\tlastResultEndIndex = tokenEndIndex;\n\t\t\tresult[resultLen++] = new LinePart(lastResultEndIndex, tokenType, tokenMetadata);\n\t\t}\n\t}\n\n\tconst lastTokenEndIndex = tokens[tokens.length - 1].endIndex;\n\tif (lineDecorationIndex < lineDecorationsLen && lineDecorations[lineDecorationIndex].startOffset === lastTokenEndIndex) {\n\t\tlet classNames: string[] = [];\n\t\tlet metadata = 0;\n\t\twhile (lineDecorationIndex < lineDecorationsLen && lineDecorations[lineDecorationIndex].startOffset === lastTokenEndIndex) {\n\t\t\tclassNames.push(lineDecorations[lineDecorationIndex].className);\n\t\t\tmetadata |= lineDecorations[lineDecorationIndex].metadata;\n\t\t\tlineDecorationIndex++;\n\t\t}\n\t\tresult[resultLen++] = new LinePart(lastResultEndIndex, classNames.join(' '), metadata);\n\t}\n\n\treturn result;\n}\n\n/**\n * This function is on purpose not split up into multiple functions to allow runtime type inference (i.e. performance reasons).\n * Notice how all the needed data is fully resolved and passed in (i.e. no other calls).\n */\nfunction _renderLine(input: ResolvedRenderLineInput, sb: IStringBuilder): RenderLineOutput {\n\tconst fontIsMonospace = input.fontIsMonospace;\n\tconst canUseHalfwidthRightwardsArrow = input.canUseHalfwidthRightwardsArrow;\n\tconst containsForeignElements = input.containsForeignElements;\n\tconst lineContent = input.lineContent;\n\tconst len = input.len;\n\tconst isOverflowing = input.isOverflowing;\n\tconst parts = input.parts;\n\tconst fauxIndentLength = input.fauxIndentLength;\n\tconst tabSize = input.tabSize;\n\tconst startVisibleColumn = input.startVisibleColumn;\n\tconst containsRTL = input.containsRTL;\n\tconst spaceWidth = input.spaceWidth;\n\tconst renderSpaceCharCode = input.renderSpaceCharCode;\n\tconst renderWhitespace = input.renderWhitespace;\n\tconst renderControlCharacters = input.renderControlCharacters;\n\n\tconst characterMapping = new CharacterMapping(len + 1, parts.length);\n\n\tlet charIndex = 0;\n\tlet visibleColumn = startVisibleColumn;\n\tlet charOffsetInPart = 0;\n\n\tlet partDisplacement = 0;\n\tlet prevPartContentCnt = 0;\n\tlet partAbsoluteOffset = 0;\n\n\tif (containsRTL) {\n\t\tsb.appendASCIIString('<span dir=\"ltr\">');\n\t} else {\n\t\tsb.appendASCIIString('<span>');\n\t}\n\n\tfor (let partIndex = 0, tokensLen = parts.length; partIndex < tokensLen; partIndex++) {\n\t\tpartAbsoluteOffset += prevPartContentCnt;\n\n\t\tconst part = parts[partIndex];\n\t\tconst partEndIndex = part.endIndex;\n\t\tconst partType = part.type;\n\t\tconst partRendersWhitespace = (renderWhitespace !== RenderWhitespace.None && part.isWhitespace());\n\t\tconst partRendersWhitespaceWithWidth = partRendersWhitespace && !fontIsMonospace && (partType === 'mtkw'/*only whitespace*/ || !containsForeignElements);\n\t\tconst partIsEmptyAndHasPseudoAfter = (charIndex === partEndIndex && part.metadata === LinePartMetadata.PSEUDO_AFTER);\n\t\tcharOffsetInPart = 0;\n\n\t\tsb.appendASCIIString('<span class=\"');\n\t\tsb.appendASCIIString(partRendersWhitespaceWithWidth ? 'mtkz' : partType);\n\t\tsb.appendASCII(CharCode.DoubleQuote);\n\n\t\tif (partRendersWhitespace) {\n\n\t\t\tlet partContentCnt = 0;\n\t\t\t{\n\t\t\t\tlet _charIndex = charIndex;\n\t\t\t\tlet _visibleColumn = visibleColumn;\n\n\t\t\t\tfor (; _charIndex < partEndIndex; _charIndex++) {\n\t\t\t\t\tconst charCode = lineContent.charCodeAt(_charIndex);\n\t\t\t\t\tconst charWidth = (charCode === CharCode.Tab ? (tabSize - (_visibleColumn % tabSize)) : 1) | 0;\n\t\t\t\t\tpartContentCnt += charWidth;\n\t\t\t\t\tif (_charIndex >= fauxIndentLength) {\n\t\t\t\t\t\t_visibleColumn += charWidth;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (partRendersWhitespaceWithWidth) {\n\t\t\t\tsb.appendASCIIString(' style=\"width:');\n\t\t\t\tsb.appendASCIIString(String(spaceWidth * partContentCnt));\n\t\t\t\tsb.appendASCIIString('px\"');\n\t\t\t}\n\t\t\tsb.appendASCII(CharCode.GreaterThan);\n\n\t\t\tfor (; charIndex < partEndIndex; charIndex++) {\n\t\t\t\tcharacterMapping.setPartData(charIndex, partIndex - partDisplacement, charOffsetInPart, partAbsoluteOffset);\n\t\t\t\tpartDisplacement = 0;\n\t\t\t\tconst charCode = lineContent.charCodeAt(charIndex);\n\t\t\t\tlet charWidth: number;\n\n\t\t\t\tif (charCode === CharCode.Tab) {\n\t\t\t\t\tcharWidth = (tabSize - (visibleColumn % tabSize)) | 0;\n\n\t\t\t\t\tif (!canUseHalfwidthRightwardsArrow || charWidth > 1) {\n\t\t\t\t\t\tsb.write1(0x2192); // RIGHTWARDS ARROW\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsb.write1(0xFFEB); // HALFWIDTH RIGHTWARDS ARROW\n\t\t\t\t\t}\n\t\t\t\t\tfor (let space = 2; space <= charWidth; space++) {\n\t\t\t\t\t\tsb.write1(0xA0); // &nbsp;\n\t\t\t\t\t}\n\n\t\t\t\t} else { // must be CharCode.Space\n\t\t\t\t\tcharWidth = 1;\n\n\t\t\t\t\tsb.write1(renderSpaceCharCode); // &middot; or word separator middle dot\n\t\t\t\t}\n\n\t\t\t\tcharOffsetInPart += charWidth;\n\t\t\t\tif (charIndex >= fauxIndentLength) {\n\t\t\t\t\tvisibleColumn += charWidth;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tprevPartContentCnt = partContentCnt;\n\n\t\t} else {\n\n\t\t\tlet partContentCnt = 0;\n\n\t\t\tsb.appendASCII(CharCode.GreaterThan);\n\n\t\t\tfor (; charIndex < partEndIndex; charIndex++) {\n\t\t\t\tcharacterMapping.setPartData(charIndex, partIndex - partDisplacement, charOffsetInPart, partAbsoluteOffset);\n\t\t\t\tpartDisplacement = 0;\n\t\t\t\tconst charCode = lineContent.charCodeAt(charIndex);\n\n\t\t\t\tlet producedCharacters = 1;\n\t\t\t\tlet charWidth = 1;\n\n\t\t\t\tswitch (charCode) {\n\t\t\t\t\tcase CharCode.Tab:\n\t\t\t\t\t\tproducedCharacters = (tabSize - (visibleColumn % tabSize));\n\t\t\t\t\t\tcharWidth = producedCharacters;\n\t\t\t\t\t\tfor (let space = 1; space <= producedCharacters; space++) {\n\t\t\t\t\t\t\tsb.write1(0xA0); // &nbsp;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase CharCode.Space:\n\t\t\t\t\t\tsb.write1(0xA0); // &nbsp;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase CharCode.LessThan:\n\t\t\t\t\t\tsb.appendASCIIString('&lt;');\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase CharCode.GreaterThan:\n\t\t\t\t\t\tsb.appendASCIIString('&gt;');\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase CharCode.Ampersand:\n\t\t\t\t\t\tsb.appendASCIIString('&amp;');\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase CharCode.Null:\n\t\t\t\t\t\tif (renderControlCharacters) {\n\t\t\t\t\t\t\t// See https://unicode-table.com/en/blocks/control-pictures/\n\t\t\t\t\t\t\tsb.write1(9216);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsb.appendASCIIString('&#00;');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase CharCode.UTF8_BOM:\n\t\t\t\t\tcase CharCode.LINE_SEPARATOR:\n\t\t\t\t\tcase CharCode.PARAGRAPH_SEPARATOR:\n\t\t\t\t\tcase CharCode.NEXT_LINE:\n\t\t\t\t\t\tsb.write1(0xFFFD);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tif (strings.isFullWidthCharacter(charCode)) {\n\t\t\t\t\t\t\tcharWidth++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// See https://unicode-table.com/en/blocks/control-pictures/\n\t\t\t\t\t\tif (renderControlCharacters && charCode < 32) {\n\t\t\t\t\t\t\tsb.write1(9216 + charCode);\n\t\t\t\t\t\t} else if (renderControlCharacters && charCode === 127) {\n\t\t\t\t\t\t\t// DEL\n\t\t\t\t\t\t\tsb.write1(9249);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsb.write1(charCode);\n\t\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcharOffsetInPart += producedCharacters;\n\t\t\t\tpartContentCnt += producedCharacters;\n\t\t\t\tif (charIndex >= fauxIndentLength) {\n\t\t\t\t\tvisibleColumn += charWidth;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tprevPartContentCnt = partContentCnt;\n\t\t}\n\n\t\tif (partIsEmptyAndHasPseudoAfter) {\n\t\t\tpartDisplacement++;\n\t\t} else {\n\t\t\tpartDisplacement = 0;\n\t\t}\n\n\t\tsb.appendASCIIString('</span>');\n\n\t}\n\n\t// When getting client rects for the last character, we will position the\n\t// text range at the end of the span, insteaf of at the beginning of next span\n\tcharacterMapping.setPartData(len, parts.length - 1, charOffsetInPart, partAbsoluteOffset);\n\n\tif (isOverflowing) {\n\t\tsb.appendASCIIString('<span>&hellip;</span>');\n\t}\n\n\tsb.appendASCIIString('</span>');\n\n\treturn new RenderLineOutput(characterMapping, containsRTL, containsForeignElements);\n}\n"]}