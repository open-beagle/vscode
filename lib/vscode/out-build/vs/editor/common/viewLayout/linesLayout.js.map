{"version":3,"file":"linesLayout.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/common/viewLayout/linesLayout.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IPartialViewLinesViewportData } from 'vs/editor/common/viewLayout/viewLinesViewportData';\nimport { IViewWhitespaceViewportData } from 'vs/editor/common/viewModel/viewModel';\nimport * as strings from 'vs/base/common/strings';\n\nexport interface IEditorWhitespace {\n\treadonly id: string;\n\treadonly afterLineNumber: number;\n\treadonly height: number;\n}\n\n/**\n * An accessor that allows for whtiespace to be added, removed or changed in bulk.\n */\nexport interface IWhitespaceChangeAccessor {\n\tinsertWhitespace(afterLineNumber: number, ordinal: number, heightInPx: number, minWidth: number): string;\n\tchangeOneWhitespace(id: string, newAfterLineNumber: number, newHeight: number): void;\n\tremoveWhitespace(id: string): void;\n}\n\ninterface IPendingChange { id: string; newAfterLineNumber: number; newHeight: number; }\ninterface IPendingRemove { id: string; }\n\nclass PendingChanges {\n\tprivate _hasPending: boolean;\n\tprivate _inserts: EditorWhitespace[];\n\tprivate _changes: IPendingChange[];\n\tprivate _removes: IPendingRemove[];\n\n\tconstructor() {\n\t\tthis._hasPending = false;\n\t\tthis._inserts = [];\n\t\tthis._changes = [];\n\t\tthis._removes = [];\n\t}\n\n\tpublic insert(x: EditorWhitespace): void {\n\t\tthis._hasPending = true;\n\t\tthis._inserts.push(x);\n\t}\n\n\tpublic change(x: IPendingChange): void {\n\t\tthis._hasPending = true;\n\t\tthis._changes.push(x);\n\t}\n\n\tpublic remove(x: IPendingRemove): void {\n\t\tthis._hasPending = true;\n\t\tthis._removes.push(x);\n\t}\n\n\tpublic mustCommit(): boolean {\n\t\treturn this._hasPending;\n\t}\n\n\tpublic commit(linesLayout: LinesLayout): void {\n\t\tif (!this._hasPending) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst inserts = this._inserts;\n\t\tconst changes = this._changes;\n\t\tconst removes = this._removes;\n\n\t\tthis._hasPending = false;\n\t\tthis._inserts = [];\n\t\tthis._changes = [];\n\t\tthis._removes = [];\n\n\t\tlinesLayout._commitPendingChanges(inserts, changes, removes);\n\t}\n}\n\nexport class EditorWhitespace implements IEditorWhitespace {\n\tpublic id: string;\n\tpublic afterLineNumber: number;\n\tpublic ordinal: number;\n\tpublic height: number;\n\tpublic minWidth: number;\n\tpublic prefixSum: number;\n\n\tconstructor(id: string, afterLineNumber: number, ordinal: number, height: number, minWidth: number) {\n\t\tthis.id = id;\n\t\tthis.afterLineNumber = afterLineNumber;\n\t\tthis.ordinal = ordinal;\n\t\tthis.height = height;\n\t\tthis.minWidth = minWidth;\n\t\tthis.prefixSum = 0;\n\t}\n}\n\n/**\n * Layouting of objects that take vertical space (by having a height) and push down other objects.\n *\n * These objects are basically either text (lines) or spaces between those lines (whitespaces).\n * This provides commodity operations for working with lines that contain whitespace that pushes lines lower (vertically).\n */\nexport class LinesLayout {\n\n\tprivate static INSTANCE_COUNT = 0;\n\n\tprivate readonly _instanceId: string;\n\tprivate readonly _pendingChanges: PendingChanges;\n\tprivate _lastWhitespaceId: number;\n\tprivate _arr: EditorWhitespace[];\n\tprivate _prefixSumValidIndex: number;\n\tprivate _minWidth: number;\n\tprivate _lineCount: number;\n\tprivate _lineHeight: number;\n\tprivate _paddingTop: number;\n\tprivate _paddingBottom: number;\n\n\tconstructor(lineCount: number, lineHeight: number, paddingTop: number, paddingBottom: number) {\n\t\tthis._instanceId = strings.singleLetterHash(++LinesLayout.INSTANCE_COUNT);\n\t\tthis._pendingChanges = new PendingChanges();\n\t\tthis._lastWhitespaceId = 0;\n\t\tthis._arr = [];\n\t\tthis._prefixSumValidIndex = -1;\n\t\tthis._minWidth = -1; /* marker for not being computed */\n\t\tthis._lineCount = lineCount;\n\t\tthis._lineHeight = lineHeight;\n\t\tthis._paddingTop = paddingTop;\n\t\tthis._paddingBottom = paddingBottom;\n\t}\n\n\t/**\n\t * Find the insertion index for a new value inside a sorted array of values.\n\t * If the value is already present in the sorted array, the insertion index will be after the already existing value.\n\t */\n\tpublic static findInsertionIndex(arr: EditorWhitespace[], afterLineNumber: number, ordinal: number): number {\n\t\tlet low = 0;\n\t\tlet high = arr.length;\n\n\t\twhile (low < high) {\n\t\t\tconst mid = ((low + high) >>> 1);\n\n\t\t\tif (afterLineNumber === arr[mid].afterLineNumber) {\n\t\t\t\tif (ordinal < arr[mid].ordinal) {\n\t\t\t\t\thigh = mid;\n\t\t\t\t} else {\n\t\t\t\t\tlow = mid + 1;\n\t\t\t\t}\n\t\t\t} else if (afterLineNumber < arr[mid].afterLineNumber) {\n\t\t\t\thigh = mid;\n\t\t\t} else {\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t}\n\n\t\treturn low;\n\t}\n\n\t/**\n\t * Change the height of a line in pixels.\n\t */\n\tpublic setLineHeight(lineHeight: number): void {\n\t\tthis._checkPendingChanges();\n\t\tthis._lineHeight = lineHeight;\n\t}\n\n\t/**\n\t * Changes the padding used to calculate vertical offsets.\n\t */\n\tpublic setPadding(paddingTop: number, paddingBottom: number): void {\n\t\tthis._paddingTop = paddingTop;\n\t\tthis._paddingBottom = paddingBottom;\n\t}\n\n\t/**\n\t * Set the number of lines.\n\t *\n\t * @param lineCount New number of lines.\n\t */\n\tpublic onFlushed(lineCount: number): void {\n\t\tthis._checkPendingChanges();\n\t\tthis._lineCount = lineCount;\n\t}\n\n\tpublic changeWhitespace(callback: (accessor: IWhitespaceChangeAccessor) => void): boolean {\n\t\tlet hadAChange = false;\n\t\ttry {\n\t\t\tconst accessor: IWhitespaceChangeAccessor = {\n\t\t\t\tinsertWhitespace: (afterLineNumber: number, ordinal: number, heightInPx: number, minWidth: number): string => {\n\t\t\t\t\thadAChange = true;\n\t\t\t\t\tafterLineNumber = afterLineNumber | 0;\n\t\t\t\t\tordinal = ordinal | 0;\n\t\t\t\t\theightInPx = heightInPx | 0;\n\t\t\t\t\tminWidth = minWidth | 0;\n\t\t\t\t\tconst id = this._instanceId + (++this._lastWhitespaceId);\n\t\t\t\t\tthis._pendingChanges.insert(new EditorWhitespace(id, afterLineNumber, ordinal, heightInPx, minWidth));\n\t\t\t\t\treturn id;\n\t\t\t\t},\n\t\t\t\tchangeOneWhitespace: (id: string, newAfterLineNumber: number, newHeight: number): void => {\n\t\t\t\t\thadAChange = true;\n\t\t\t\t\tnewAfterLineNumber = newAfterLineNumber | 0;\n\t\t\t\t\tnewHeight = newHeight | 0;\n\t\t\t\t\tthis._pendingChanges.change({ id, newAfterLineNumber, newHeight });\n\t\t\t\t},\n\t\t\t\tremoveWhitespace: (id: string): void => {\n\t\t\t\t\thadAChange = true;\n\t\t\t\t\tthis._pendingChanges.remove({ id });\n\t\t\t\t}\n\t\t\t};\n\t\t\tcallback(accessor);\n\t\t} finally {\n\t\t\tthis._pendingChanges.commit(this);\n\t\t}\n\t\treturn hadAChange;\n\t}\n\n\tpublic _commitPendingChanges(inserts: EditorWhitespace[], changes: IPendingChange[], removes: IPendingRemove[]): void {\n\t\tif (inserts.length > 0 || removes.length > 0) {\n\t\t\tthis._minWidth = -1; /* marker for not being computed */\n\t\t}\n\n\t\tif (inserts.length + changes.length + removes.length <= 1) {\n\t\t\t// when only one thing happened, handle it \"delicately\"\n\t\t\tfor (const insert of inserts) {\n\t\t\t\tthis._insertWhitespace(insert);\n\t\t\t}\n\t\t\tfor (const change of changes) {\n\t\t\t\tthis._changeOneWhitespace(change.id, change.newAfterLineNumber, change.newHeight);\n\t\t\t}\n\t\t\tfor (const remove of removes) {\n\t\t\t\tconst index = this._findWhitespaceIndex(remove.id);\n\t\t\t\tif (index === -1) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthis._removeWhitespace(index);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// simply rebuild the entire datastructure\n\n\t\tconst toRemove = new Set<string>();\n\t\tfor (const remove of removes) {\n\t\t\ttoRemove.add(remove.id);\n\t\t}\n\n\t\tconst toChange = new Map<string, IPendingChange>();\n\t\tfor (const change of changes) {\n\t\t\ttoChange.set(change.id, change);\n\t\t}\n\n\t\tconst applyRemoveAndChange = (whitespaces: EditorWhitespace[]): EditorWhitespace[] => {\n\t\t\tlet result: EditorWhitespace[] = [];\n\t\t\tfor (const whitespace of whitespaces) {\n\t\t\t\tif (toRemove.has(whitespace.id)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (toChange.has(whitespace.id)) {\n\t\t\t\t\tconst change = toChange.get(whitespace.id)!;\n\t\t\t\t\twhitespace.afterLineNumber = change.newAfterLineNumber;\n\t\t\t\t\twhitespace.height = change.newHeight;\n\t\t\t\t}\n\t\t\t\tresult.push(whitespace);\n\t\t\t}\n\t\t\treturn result;\n\t\t};\n\n\t\tconst result = applyRemoveAndChange(this._arr).concat(applyRemoveAndChange(inserts));\n\t\tresult.sort((a, b) => {\n\t\t\tif (a.afterLineNumber === b.afterLineNumber) {\n\t\t\t\treturn a.ordinal - b.ordinal;\n\t\t\t}\n\t\t\treturn a.afterLineNumber - b.afterLineNumber;\n\t\t});\n\n\t\tthis._arr = result;\n\t\tthis._prefixSumValidIndex = -1;\n\t}\n\n\tprivate _checkPendingChanges(): void {\n\t\tif (this._pendingChanges.mustCommit()) {\n\t\t\tthis._pendingChanges.commit(this);\n\t\t}\n\t}\n\n\tprivate _insertWhitespace(whitespace: EditorWhitespace): void {\n\t\tconst insertIndex = LinesLayout.findInsertionIndex(this._arr, whitespace.afterLineNumber, whitespace.ordinal);\n\t\tthis._arr.splice(insertIndex, 0, whitespace);\n\t\tthis._prefixSumValidIndex = Math.min(this._prefixSumValidIndex, insertIndex - 1);\n\t}\n\n\tprivate _findWhitespaceIndex(id: string): number {\n\t\tconst arr = this._arr;\n\t\tfor (let i = 0, len = arr.length; i < len; i++) {\n\t\t\tif (arr[i].id === id) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\tprivate _changeOneWhitespace(id: string, newAfterLineNumber: number, newHeight: number): void {\n\t\tconst index = this._findWhitespaceIndex(id);\n\t\tif (index === -1) {\n\t\t\treturn;\n\t\t}\n\t\tif (this._arr[index].height !== newHeight) {\n\t\t\tthis._arr[index].height = newHeight;\n\t\t\tthis._prefixSumValidIndex = Math.min(this._prefixSumValidIndex, index - 1);\n\t\t}\n\t\tif (this._arr[index].afterLineNumber !== newAfterLineNumber) {\n\t\t\t// `afterLineNumber` changed for this whitespace\n\n\t\t\t// Record old whitespace\n\t\t\tconst whitespace = this._arr[index];\n\n\t\t\t// Since changing `afterLineNumber` can trigger a reordering, we're gonna remove this whitespace\n\t\t\tthis._removeWhitespace(index);\n\n\t\t\twhitespace.afterLineNumber = newAfterLineNumber;\n\n\t\t\t// And add it again\n\t\t\tthis._insertWhitespace(whitespace);\n\t\t}\n\t}\n\n\tprivate _removeWhitespace(removeIndex: number): void {\n\t\tthis._arr.splice(removeIndex, 1);\n\t\tthis._prefixSumValidIndex = Math.min(this._prefixSumValidIndex, removeIndex - 1);\n\t}\n\n\t/**\n\t * Notify the layouter that lines have been deleted (a continuous zone of lines).\n\t *\n\t * @param fromLineNumber The line number at which the deletion started, inclusive\n\t * @param toLineNumber The line number at which the deletion ended, inclusive\n\t */\n\tpublic onLinesDeleted(fromLineNumber: number, toLineNumber: number): void {\n\t\tthis._checkPendingChanges();\n\t\tfromLineNumber = fromLineNumber | 0;\n\t\ttoLineNumber = toLineNumber | 0;\n\n\t\tthis._lineCount -= (toLineNumber - fromLineNumber + 1);\n\t\tfor (let i = 0, len = this._arr.length; i < len; i++) {\n\t\t\tconst afterLineNumber = this._arr[i].afterLineNumber;\n\n\t\t\tif (fromLineNumber <= afterLineNumber && afterLineNumber <= toLineNumber) {\n\t\t\t\t// The line this whitespace was after has been deleted\n\t\t\t\t//  => move whitespace to before first deleted line\n\t\t\t\tthis._arr[i].afterLineNumber = fromLineNumber - 1;\n\t\t\t} else if (afterLineNumber > toLineNumber) {\n\t\t\t\t// The line this whitespace was after has been moved up\n\t\t\t\t//  => move whitespace up\n\t\t\t\tthis._arr[i].afterLineNumber -= (toLineNumber - fromLineNumber + 1);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Notify the layouter that lines have been inserted (a continuous zone of lines).\n\t *\n\t * @param fromLineNumber The line number at which the insertion started, inclusive\n\t * @param toLineNumber The line number at which the insertion ended, inclusive.\n\t */\n\tpublic onLinesInserted(fromLineNumber: number, toLineNumber: number): void {\n\t\tthis._checkPendingChanges();\n\t\tfromLineNumber = fromLineNumber | 0;\n\t\ttoLineNumber = toLineNumber | 0;\n\n\t\tthis._lineCount += (toLineNumber - fromLineNumber + 1);\n\t\tfor (let i = 0, len = this._arr.length; i < len; i++) {\n\t\t\tconst afterLineNumber = this._arr[i].afterLineNumber;\n\n\t\t\tif (fromLineNumber <= afterLineNumber) {\n\t\t\t\tthis._arr[i].afterLineNumber += (toLineNumber - fromLineNumber + 1);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get the sum of all the whitespaces.\n\t */\n\tpublic getWhitespacesTotalHeight(): number {\n\t\tthis._checkPendingChanges();\n\t\tif (this._arr.length === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn this.getWhitespacesAccumulatedHeight(this._arr.length - 1);\n\t}\n\n\t/**\n\t * Return the sum of the heights of the whitespaces at [0..index].\n\t * This includes the whitespace at `index`.\n\t *\n\t * @param index The index of the whitespace.\n\t * @return The sum of the heights of all whitespaces before the one at `index`, including the one at `index`.\n\t */\n\tpublic getWhitespacesAccumulatedHeight(index: number): number {\n\t\tthis._checkPendingChanges();\n\t\tindex = index | 0;\n\n\t\tlet startIndex = Math.max(0, this._prefixSumValidIndex + 1);\n\t\tif (startIndex === 0) {\n\t\t\tthis._arr[0].prefixSum = this._arr[0].height;\n\t\t\tstartIndex++;\n\t\t}\n\n\t\tfor (let i = startIndex; i <= index; i++) {\n\t\t\tthis._arr[i].prefixSum = this._arr[i - 1].prefixSum + this._arr[i].height;\n\t\t}\n\t\tthis._prefixSumValidIndex = Math.max(this._prefixSumValidIndex, index);\n\t\treturn this._arr[index].prefixSum;\n\t}\n\n\t/**\n\t * Get the sum of heights for all objects.\n\t *\n\t * @return The sum of heights for all objects.\n\t */\n\tpublic getLinesTotalHeight(): number {\n\t\tthis._checkPendingChanges();\n\t\tconst linesHeight = this._lineHeight * this._lineCount;\n\t\tconst whitespacesHeight = this.getWhitespacesTotalHeight();\n\n\t\treturn linesHeight + whitespacesHeight + this._paddingTop + this._paddingBottom;\n\t}\n\n\t/**\n\t * Returns the accumulated height of whitespaces before the given line number.\n\t *\n\t * @param lineNumber The line number\n\t */\n\tpublic getWhitespaceAccumulatedHeightBeforeLineNumber(lineNumber: number): number {\n\t\tthis._checkPendingChanges();\n\t\tlineNumber = lineNumber | 0;\n\n\t\tconst lastWhitespaceBeforeLineNumber = this._findLastWhitespaceBeforeLineNumber(lineNumber);\n\n\t\tif (lastWhitespaceBeforeLineNumber === -1) {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn this.getWhitespacesAccumulatedHeight(lastWhitespaceBeforeLineNumber);\n\t}\n\n\tprivate _findLastWhitespaceBeforeLineNumber(lineNumber: number): number {\n\t\tlineNumber = lineNumber | 0;\n\n\t\t// Find the whitespace before line number\n\t\tconst arr = this._arr;\n\t\tlet low = 0;\n\t\tlet high = arr.length - 1;\n\n\t\twhile (low <= high) {\n\t\t\tconst delta = (high - low) | 0;\n\t\t\tconst halfDelta = (delta / 2) | 0;\n\t\t\tconst mid = (low + halfDelta) | 0;\n\n\t\t\tif (arr[mid].afterLineNumber < lineNumber) {\n\t\t\t\tif (mid + 1 >= arr.length || arr[mid + 1].afterLineNumber >= lineNumber) {\n\t\t\t\t\treturn mid;\n\t\t\t\t} else {\n\t\t\t\t\tlow = (mid + 1) | 0;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\thigh = (mid - 1) | 0;\n\t\t\t}\n\t\t}\n\n\t\treturn -1;\n\t}\n\n\tprivate _findFirstWhitespaceAfterLineNumber(lineNumber: number): number {\n\t\tlineNumber = lineNumber | 0;\n\n\t\tconst lastWhitespaceBeforeLineNumber = this._findLastWhitespaceBeforeLineNumber(lineNumber);\n\t\tconst firstWhitespaceAfterLineNumber = lastWhitespaceBeforeLineNumber + 1;\n\n\t\tif (firstWhitespaceAfterLineNumber < this._arr.length) {\n\t\t\treturn firstWhitespaceAfterLineNumber;\n\t\t}\n\n\t\treturn -1;\n\t}\n\n\t/**\n\t * Find the index of the first whitespace which has `afterLineNumber` >= `lineNumber`.\n\t * @return The index of the first whitespace with `afterLineNumber` >= `lineNumber` or -1 if no whitespace is found.\n\t */\n\tpublic getFirstWhitespaceIndexAfterLineNumber(lineNumber: number): number {\n\t\tthis._checkPendingChanges();\n\t\tlineNumber = lineNumber | 0;\n\n\t\treturn this._findFirstWhitespaceAfterLineNumber(lineNumber);\n\t}\n\n\t/**\n\t * Get the vertical offset (the sum of heights for all objects above) a certain line number.\n\t *\n\t * @param lineNumber The line number\n\t * @return The sum of heights for all objects above `lineNumber`.\n\t */\n\tpublic getVerticalOffsetForLineNumber(lineNumber: number): number {\n\t\tthis._checkPendingChanges();\n\t\tlineNumber = lineNumber | 0;\n\n\t\tlet previousLinesHeight: number;\n\t\tif (lineNumber > 1) {\n\t\t\tpreviousLinesHeight = this._lineHeight * (lineNumber - 1);\n\t\t} else {\n\t\t\tpreviousLinesHeight = 0;\n\t\t}\n\n\t\tconst previousWhitespacesHeight = this.getWhitespaceAccumulatedHeightBeforeLineNumber(lineNumber);\n\n\t\treturn previousLinesHeight + previousWhitespacesHeight + this._paddingTop;\n\t}\n\n\t/**\n\t * Returns if there is any whitespace in the document.\n\t */\n\tpublic hasWhitespace(): boolean {\n\t\tthis._checkPendingChanges();\n\t\treturn this.getWhitespacesCount() > 0;\n\t}\n\n\t/**\n\t * The maximum min width for all whitespaces.\n\t */\n\tpublic getWhitespaceMinWidth(): number {\n\t\tthis._checkPendingChanges();\n\t\tif (this._minWidth === -1) {\n\t\t\tlet minWidth = 0;\n\t\t\tfor (let i = 0, len = this._arr.length; i < len; i++) {\n\t\t\t\tminWidth = Math.max(minWidth, this._arr[i].minWidth);\n\t\t\t}\n\t\t\tthis._minWidth = minWidth;\n\t\t}\n\t\treturn this._minWidth;\n\t}\n\n\t/**\n\t * Check if `verticalOffset` is below all lines.\n\t */\n\tpublic isAfterLines(verticalOffset: number): boolean {\n\t\tthis._checkPendingChanges();\n\t\tconst totalHeight = this.getLinesTotalHeight();\n\t\treturn verticalOffset > totalHeight;\n\t}\n\n\tpublic isInTopPadding(verticalOffset: number): boolean {\n\t\tif (this._paddingTop === 0) {\n\t\t\treturn false;\n\t\t}\n\t\tthis._checkPendingChanges();\n\t\treturn (verticalOffset < this._paddingTop);\n\t}\n\n\tpublic isInBottomPadding(verticalOffset: number): boolean {\n\t\tif (this._paddingBottom === 0) {\n\t\t\treturn false;\n\t\t}\n\t\tthis._checkPendingChanges();\n\t\tconst totalHeight = this.getLinesTotalHeight();\n\t\treturn (verticalOffset >= totalHeight - this._paddingBottom);\n\t}\n\n\t/**\n\t * Find the first line number that is at or after vertical offset `verticalOffset`.\n\t * i.e. if getVerticalOffsetForLine(line) is x and getVerticalOffsetForLine(line + 1) is y, then\n\t * getLineNumberAtOrAfterVerticalOffset(i) = line, x <= i < y.\n\t *\n\t * @param verticalOffset The vertical offset to search at.\n\t * @return The line number at or after vertical offset `verticalOffset`.\n\t */\n\tpublic getLineNumberAtOrAfterVerticalOffset(verticalOffset: number): number {\n\t\tthis._checkPendingChanges();\n\t\tverticalOffset = verticalOffset | 0;\n\n\t\tif (verticalOffset < 0) {\n\t\t\treturn 1;\n\t\t}\n\n\t\tconst linesCount = this._lineCount | 0;\n\t\tconst lineHeight = this._lineHeight;\n\t\tlet minLineNumber = 1;\n\t\tlet maxLineNumber = linesCount;\n\n\t\twhile (minLineNumber < maxLineNumber) {\n\t\t\tconst midLineNumber = ((minLineNumber + maxLineNumber) / 2) | 0;\n\n\t\t\tconst midLineNumberVerticalOffset = this.getVerticalOffsetForLineNumber(midLineNumber) | 0;\n\n\t\t\tif (verticalOffset >= midLineNumberVerticalOffset + lineHeight) {\n\t\t\t\t// vertical offset is after mid line number\n\t\t\t\tminLineNumber = midLineNumber + 1;\n\t\t\t} else if (verticalOffset >= midLineNumberVerticalOffset) {\n\t\t\t\t// Hit\n\t\t\t\treturn midLineNumber;\n\t\t\t} else {\n\t\t\t\t// vertical offset is before mid line number, but mid line number could still be what we're searching for\n\t\t\t\tmaxLineNumber = midLineNumber;\n\t\t\t}\n\t\t}\n\n\t\tif (minLineNumber > linesCount) {\n\t\t\treturn linesCount;\n\t\t}\n\n\t\treturn minLineNumber;\n\t}\n\n\t/**\n\t * Get all the lines and their relative vertical offsets that are positioned between `verticalOffset1` and `verticalOffset2`.\n\t *\n\t * @param verticalOffset1 The beginning of the viewport.\n\t * @param verticalOffset2 The end of the viewport.\n\t * @return A structure describing the lines positioned between `verticalOffset1` and `verticalOffset2`.\n\t */\n\tpublic getLinesViewportData(verticalOffset1: number, verticalOffset2: number): IPartialViewLinesViewportData {\n\t\tthis._checkPendingChanges();\n\t\tverticalOffset1 = verticalOffset1 | 0;\n\t\tverticalOffset2 = verticalOffset2 | 0;\n\t\tconst lineHeight = this._lineHeight;\n\n\t\t// Find first line number\n\t\t// We don't live in a perfect world, so the line number might start before or after verticalOffset1\n\t\tconst startLineNumber = this.getLineNumberAtOrAfterVerticalOffset(verticalOffset1) | 0;\n\t\tconst startLineNumberVerticalOffset = this.getVerticalOffsetForLineNumber(startLineNumber) | 0;\n\n\t\tlet endLineNumber = this._lineCount | 0;\n\n\t\t// Also keep track of what whitespace we've got\n\t\tlet whitespaceIndex = this.getFirstWhitespaceIndexAfterLineNumber(startLineNumber) | 0;\n\t\tconst whitespaceCount = this.getWhitespacesCount() | 0;\n\t\tlet currentWhitespaceHeight: number;\n\t\tlet currentWhitespaceAfterLineNumber: number;\n\n\t\tif (whitespaceIndex === -1) {\n\t\t\twhitespaceIndex = whitespaceCount;\n\t\t\tcurrentWhitespaceAfterLineNumber = endLineNumber + 1;\n\t\t\tcurrentWhitespaceHeight = 0;\n\t\t} else {\n\t\t\tcurrentWhitespaceAfterLineNumber = this.getAfterLineNumberForWhitespaceIndex(whitespaceIndex) | 0;\n\t\t\tcurrentWhitespaceHeight = this.getHeightForWhitespaceIndex(whitespaceIndex) | 0;\n\t\t}\n\n\t\tlet currentVerticalOffset = startLineNumberVerticalOffset;\n\t\tlet currentLineRelativeOffset = currentVerticalOffset;\n\n\t\t// IE (all versions) cannot handle units above about 1,533,908 px, so every 500k pixels bring numbers down\n\t\tconst STEP_SIZE = 500000;\n\t\tlet bigNumbersDelta = 0;\n\t\tif (startLineNumberVerticalOffset >= STEP_SIZE) {\n\t\t\t// Compute a delta that guarantees that lines are positioned at `lineHeight` increments\n\t\t\tbigNumbersDelta = Math.floor(startLineNumberVerticalOffset / STEP_SIZE) * STEP_SIZE;\n\t\t\tbigNumbersDelta = Math.floor(bigNumbersDelta / lineHeight) * lineHeight;\n\n\t\t\tcurrentLineRelativeOffset -= bigNumbersDelta;\n\t\t}\n\n\t\tconst linesOffsets: number[] = [];\n\n\t\tconst verticalCenter = verticalOffset1 + (verticalOffset2 - verticalOffset1) / 2;\n\t\tlet centeredLineNumber = -1;\n\n\t\t// Figure out how far the lines go\n\t\tfor (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n\n\t\t\tif (centeredLineNumber === -1) {\n\t\t\t\tconst currentLineTop = currentVerticalOffset;\n\t\t\t\tconst currentLineBottom = currentVerticalOffset + lineHeight;\n\t\t\t\tif ((currentLineTop <= verticalCenter && verticalCenter < currentLineBottom) || currentLineTop > verticalCenter) {\n\t\t\t\t\tcenteredLineNumber = lineNumber;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Count current line height in the vertical offsets\n\t\t\tcurrentVerticalOffset += lineHeight;\n\t\t\tlinesOffsets[lineNumber - startLineNumber] = currentLineRelativeOffset;\n\n\t\t\t// Next line starts immediately after this one\n\t\t\tcurrentLineRelativeOffset += lineHeight;\n\t\t\twhile (currentWhitespaceAfterLineNumber === lineNumber) {\n\t\t\t\t// Push down next line with the height of the current whitespace\n\t\t\t\tcurrentLineRelativeOffset += currentWhitespaceHeight;\n\n\t\t\t\t// Count current whitespace in the vertical offsets\n\t\t\t\tcurrentVerticalOffset += currentWhitespaceHeight;\n\t\t\t\twhitespaceIndex++;\n\n\t\t\t\tif (whitespaceIndex >= whitespaceCount) {\n\t\t\t\t\tcurrentWhitespaceAfterLineNumber = endLineNumber + 1;\n\t\t\t\t} else {\n\t\t\t\t\tcurrentWhitespaceAfterLineNumber = this.getAfterLineNumberForWhitespaceIndex(whitespaceIndex) | 0;\n\t\t\t\t\tcurrentWhitespaceHeight = this.getHeightForWhitespaceIndex(whitespaceIndex) | 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (currentVerticalOffset >= verticalOffset2) {\n\t\t\t\t// We have covered the entire viewport area, time to stop\n\t\t\t\tendLineNumber = lineNumber;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (centeredLineNumber === -1) {\n\t\t\tcenteredLineNumber = endLineNumber;\n\t\t}\n\n\t\tconst endLineNumberVerticalOffset = this.getVerticalOffsetForLineNumber(endLineNumber) | 0;\n\n\t\tlet completelyVisibleStartLineNumber = startLineNumber;\n\t\tlet completelyVisibleEndLineNumber = endLineNumber;\n\n\t\tif (completelyVisibleStartLineNumber < completelyVisibleEndLineNumber) {\n\t\t\tif (startLineNumberVerticalOffset < verticalOffset1) {\n\t\t\t\tcompletelyVisibleStartLineNumber++;\n\t\t\t}\n\t\t}\n\t\tif (completelyVisibleStartLineNumber < completelyVisibleEndLineNumber) {\n\t\t\tif (endLineNumberVerticalOffset + lineHeight > verticalOffset2) {\n\t\t\t\tcompletelyVisibleEndLineNumber--;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tbigNumbersDelta: bigNumbersDelta,\n\t\t\tstartLineNumber: startLineNumber,\n\t\t\tendLineNumber: endLineNumber,\n\t\t\trelativeVerticalOffset: linesOffsets,\n\t\t\tcenteredLineNumber: centeredLineNumber,\n\t\t\tcompletelyVisibleStartLineNumber: completelyVisibleStartLineNumber,\n\t\t\tcompletelyVisibleEndLineNumber: completelyVisibleEndLineNumber\n\t\t};\n\t}\n\n\tpublic getVerticalOffsetForWhitespaceIndex(whitespaceIndex: number): number {\n\t\tthis._checkPendingChanges();\n\t\twhitespaceIndex = whitespaceIndex | 0;\n\n\t\tconst afterLineNumber = this.getAfterLineNumberForWhitespaceIndex(whitespaceIndex);\n\n\t\tlet previousLinesHeight: number;\n\t\tif (afterLineNumber >= 1) {\n\t\t\tpreviousLinesHeight = this._lineHeight * afterLineNumber;\n\t\t} else {\n\t\t\tpreviousLinesHeight = 0;\n\t\t}\n\n\t\tlet previousWhitespacesHeight: number;\n\t\tif (whitespaceIndex > 0) {\n\t\t\tpreviousWhitespacesHeight = this.getWhitespacesAccumulatedHeight(whitespaceIndex - 1);\n\t\t} else {\n\t\t\tpreviousWhitespacesHeight = 0;\n\t\t}\n\t\treturn previousLinesHeight + previousWhitespacesHeight + this._paddingTop;\n\t}\n\n\tpublic getWhitespaceIndexAtOrAfterVerticallOffset(verticalOffset: number): number {\n\t\tthis._checkPendingChanges();\n\t\tverticalOffset = verticalOffset | 0;\n\n\t\tlet minWhitespaceIndex = 0;\n\t\tlet maxWhitespaceIndex = this.getWhitespacesCount() - 1;\n\n\t\tif (maxWhitespaceIndex < 0) {\n\t\t\treturn -1;\n\t\t}\n\n\t\t// Special case: nothing to be found\n\t\tconst maxWhitespaceVerticalOffset = this.getVerticalOffsetForWhitespaceIndex(maxWhitespaceIndex);\n\t\tconst maxWhitespaceHeight = this.getHeightForWhitespaceIndex(maxWhitespaceIndex);\n\t\tif (verticalOffset >= maxWhitespaceVerticalOffset + maxWhitespaceHeight) {\n\t\t\treturn -1;\n\t\t}\n\n\t\twhile (minWhitespaceIndex < maxWhitespaceIndex) {\n\t\t\tconst midWhitespaceIndex = Math.floor((minWhitespaceIndex + maxWhitespaceIndex) / 2);\n\n\t\t\tconst midWhitespaceVerticalOffset = this.getVerticalOffsetForWhitespaceIndex(midWhitespaceIndex);\n\t\t\tconst midWhitespaceHeight = this.getHeightForWhitespaceIndex(midWhitespaceIndex);\n\n\t\t\tif (verticalOffset >= midWhitespaceVerticalOffset + midWhitespaceHeight) {\n\t\t\t\t// vertical offset is after whitespace\n\t\t\t\tminWhitespaceIndex = midWhitespaceIndex + 1;\n\t\t\t} else if (verticalOffset >= midWhitespaceVerticalOffset) {\n\t\t\t\t// Hit\n\t\t\t\treturn midWhitespaceIndex;\n\t\t\t} else {\n\t\t\t\t// vertical offset is before whitespace, but midWhitespaceIndex might still be what we're searching for\n\t\t\t\tmaxWhitespaceIndex = midWhitespaceIndex;\n\t\t\t}\n\t\t}\n\t\treturn minWhitespaceIndex;\n\t}\n\n\t/**\n\t * Get exactly the whitespace that is layouted at `verticalOffset`.\n\t *\n\t * @param verticalOffset The vertical offset.\n\t * @return Precisely the whitespace that is layouted at `verticaloffset` or null.\n\t */\n\tpublic getWhitespaceAtVerticalOffset(verticalOffset: number): IViewWhitespaceViewportData | null {\n\t\tthis._checkPendingChanges();\n\t\tverticalOffset = verticalOffset | 0;\n\n\t\tconst candidateIndex = this.getWhitespaceIndexAtOrAfterVerticallOffset(verticalOffset);\n\n\t\tif (candidateIndex < 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (candidateIndex >= this.getWhitespacesCount()) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst candidateTop = this.getVerticalOffsetForWhitespaceIndex(candidateIndex);\n\n\t\tif (candidateTop > verticalOffset) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst candidateHeight = this.getHeightForWhitespaceIndex(candidateIndex);\n\t\tconst candidateId = this.getIdForWhitespaceIndex(candidateIndex);\n\t\tconst candidateAfterLineNumber = this.getAfterLineNumberForWhitespaceIndex(candidateIndex);\n\n\t\treturn {\n\t\t\tid: candidateId,\n\t\t\tafterLineNumber: candidateAfterLineNumber,\n\t\t\tverticalOffset: candidateTop,\n\t\t\theight: candidateHeight\n\t\t};\n\t}\n\n\t/**\n\t * Get a list of whitespaces that are positioned between `verticalOffset1` and `verticalOffset2`.\n\t *\n\t * @param verticalOffset1 The beginning of the viewport.\n\t * @param verticalOffset2 The end of the viewport.\n\t * @return An array with all the whitespaces in the viewport. If no whitespace is in viewport, the array is empty.\n\t */\n\tpublic getWhitespaceViewportData(verticalOffset1: number, verticalOffset2: number): IViewWhitespaceViewportData[] {\n\t\tthis._checkPendingChanges();\n\t\tverticalOffset1 = verticalOffset1 | 0;\n\t\tverticalOffset2 = verticalOffset2 | 0;\n\n\t\tconst startIndex = this.getWhitespaceIndexAtOrAfterVerticallOffset(verticalOffset1);\n\t\tconst endIndex = this.getWhitespacesCount() - 1;\n\n\t\tif (startIndex < 0) {\n\t\t\treturn [];\n\t\t}\n\n\t\tlet result: IViewWhitespaceViewportData[] = [];\n\t\tfor (let i = startIndex; i <= endIndex; i++) {\n\t\t\tconst top = this.getVerticalOffsetForWhitespaceIndex(i);\n\t\t\tconst height = this.getHeightForWhitespaceIndex(i);\n\t\t\tif (top >= verticalOffset2) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tresult.push({\n\t\t\t\tid: this.getIdForWhitespaceIndex(i),\n\t\t\t\tafterLineNumber: this.getAfterLineNumberForWhitespaceIndex(i),\n\t\t\t\tverticalOffset: top,\n\t\t\t\theight: height\n\t\t\t});\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Get all whitespaces.\n\t */\n\tpublic getWhitespaces(): IEditorWhitespace[] {\n\t\tthis._checkPendingChanges();\n\t\treturn this._arr.slice(0);\n\t}\n\n\t/**\n\t * The number of whitespaces.\n\t */\n\tpublic getWhitespacesCount(): number {\n\t\tthis._checkPendingChanges();\n\t\treturn this._arr.length;\n\t}\n\n\t/**\n\t * Get the `id` for whitespace at index `index`.\n\t *\n\t * @param index The index of the whitespace.\n\t * @return `id` of whitespace at `index`.\n\t */\n\tpublic getIdForWhitespaceIndex(index: number): string {\n\t\tthis._checkPendingChanges();\n\t\tindex = index | 0;\n\n\t\treturn this._arr[index].id;\n\t}\n\n\t/**\n\t * Get the `afterLineNumber` for whitespace at index `index`.\n\t *\n\t * @param index The index of the whitespace.\n\t * @return `afterLineNumber` of whitespace at `index`.\n\t */\n\tpublic getAfterLineNumberForWhitespaceIndex(index: number): number {\n\t\tthis._checkPendingChanges();\n\t\tindex = index | 0;\n\n\t\treturn this._arr[index].afterLineNumber;\n\t}\n\n\t/**\n\t * Get the `height` for whitespace at index `index`.\n\t *\n\t * @param index The index of the whitespace.\n\t * @return `height` of whitespace at `index`.\n\t */\n\tpublic getHeightForWhitespaceIndex(index: number): number {\n\t\tthis._checkPendingChanges();\n\t\tindex = index | 0;\n\n\t\treturn this._arr[index].height;\n\t}\n}\n"]}