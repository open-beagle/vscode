{"version":3,"file":"characterClassifier.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/common/core/characterClassifier.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAIhG;;OAEG;IACH,MAAa,mBAAmB;QAa/B,YAAY,aAAgB;YAC3B,IAAI,YAAY,GAAG,CAAA,GAAA,cAAO,CAAA,CAAC,aAAa,CAAC,CAAC;YAE1C,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;YAClC,IAAI,CAAC,SAAS,GAAG,mBAAmB,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;YACnE,IAAI,CAAC,IAAI,GAAG,IAAI,GAAG,EAAkB,CAAC;QACvC,CAAC;QAEO,MAAM,CAAC,eAAe,CAAC,YAAoB;YAClD,IAAI,QAAQ,GAAe,IAAI,UAAU,CAAC,GAAG,CAAC,CAAC;YAC/C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;gBAC7B,QAAQ,CAAC,CAAC,CAAC,GAAG,YAAY,CAAC;aAC3B;YACD,OAAO,QAAQ,CAAC;QACjB,CAAC;QAEM,GAAG,CAAC,QAAgB,EAAE,MAAS;YACrC,IAAI,KAAK,GAAG,CAAA,GAAA,cAAO,CAAA,CAAC,MAAM,CAAC,CAAC;YAE5B,IAAI,QAAQ,IAAI,CAAC,IAAI,QAAQ,GAAG,GAAG,EAAE;gBACpC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;aACjC;iBAAM;gBACN,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;aAC/B;QACF,CAAC;QAEM,GAAG,CAAC,QAAgB;YAC1B,IAAI,QAAQ,IAAI,CAAC,IAAI,QAAQ,GAAG,GAAG,EAAE;gBACpC,OAAU,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;aACnC;iBAAM;gBACN,OAAU,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC;aAC1D;QACF,CAAC;KACD;IA9CD,kDA8CC;IAED,IAAW,OAGV;IAHD,WAAW,OAAO;QACjB,uCAAS,CAAA;QACT,qCAAQ,CAAA;IACT,CAAC,EAHU,OAAO,KAAP,OAAO,QAGjB;IAED,MAAa,YAAY;QAIxB;YACC,IAAI,CAAC,OAAO,GAAG,IAAI,mBAAmB,eAAwB,CAAC;QAChE,CAAC;QAEM,GAAG,CAAC,QAAgB;YAC1B,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,eAAe,CAAC;QAC1C,CAAC;QAEM,GAAG,CAAC,QAAgB;YAC1B,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC;QACtD,CAAC;KACD;IAfD,oCAeC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { toUint8 } from 'vs/base/common/uint';\n\n/**\n * A fast character classifier that uses a compact array for ASCII values.\n */\nexport class CharacterClassifier<T extends number> {\n\t/**\n\t * Maintain a compact (fully initialized ASCII map for quickly classifying ASCII characters - used more often in code).\n\t */\n\tprotected _asciiMap: Uint8Array;\n\n\t/**\n\t * The entire map (sparse array).\n\t */\n\tprotected _map: Map<number, number>;\n\n\tprotected _defaultValue: number;\n\n\tconstructor(_defaultValue: T) {\n\t\tlet defaultValue = toUint8(_defaultValue);\n\n\t\tthis._defaultValue = defaultValue;\n\t\tthis._asciiMap = CharacterClassifier._createAsciiMap(defaultValue);\n\t\tthis._map = new Map<number, number>();\n\t}\n\n\tprivate static _createAsciiMap(defaultValue: number): Uint8Array {\n\t\tlet asciiMap: Uint8Array = new Uint8Array(256);\n\t\tfor (let i = 0; i < 256; i++) {\n\t\t\tasciiMap[i] = defaultValue;\n\t\t}\n\t\treturn asciiMap;\n\t}\n\n\tpublic set(charCode: number, _value: T): void {\n\t\tlet value = toUint8(_value);\n\n\t\tif (charCode >= 0 && charCode < 256) {\n\t\t\tthis._asciiMap[charCode] = value;\n\t\t} else {\n\t\t\tthis._map.set(charCode, value);\n\t\t}\n\t}\n\n\tpublic get(charCode: number): T {\n\t\tif (charCode >= 0 && charCode < 256) {\n\t\t\treturn <T>this._asciiMap[charCode];\n\t\t} else {\n\t\t\treturn <T>(this._map.get(charCode) || this._defaultValue);\n\t\t}\n\t}\n}\n\nconst enum Boolean {\n\tFalse = 0,\n\tTrue = 1\n}\n\nexport class CharacterSet {\n\n\tprivate readonly _actual: CharacterClassifier<Boolean>;\n\n\tconstructor() {\n\t\tthis._actual = new CharacterClassifier<Boolean>(Boolean.False);\n\t}\n\n\tpublic add(charCode: number): void {\n\t\tthis._actual.set(charCode, Boolean.True);\n\t}\n\n\tpublic has(charCode: number): boolean {\n\t\treturn (this._actual.get(charCode) === Boolean.True);\n\t}\n}\n"]}