{"version":3,"file":"languageSelector.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/common/modes/languageSelector.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAmBhG,SAAgB,KAAK,CAAC,QAAsC,EAAE,YAAiB,EAAE,iBAAyB,EAAE,uBAAgC;QAE3I,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;YAC5B,qCAAqC;YACrC,IAAI,GAAG,GAAG,CAAC,CAAC;YACZ,KAAK,MAAM,MAAM,IAAI,QAAQ,EAAE;gBAC9B,MAAM,KAAK,GAAG,KAAK,CAAC,MAAM,EAAE,YAAY,EAAE,iBAAiB,EAAE,uBAAuB,CAAC,CAAC;gBACtF,IAAI,KAAK,KAAK,EAAE,EAAE;oBACjB,OAAO,KAAK,CAAC,CAAC,yBAAyB;iBACvC;gBACD,IAAI,KAAK,GAAG,GAAG,EAAE;oBAChB,GAAG,GAAG,KAAK,CAAC;iBACZ;aACD;YACD,OAAO,GAAG,CAAC;SAEX;aAAM,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;YAExC,IAAI,CAAC,uBAAuB,EAAE;gBAC7B,OAAO,CAAC,CAAC;aACT;YAED,iCAAiC;YACjC,sCAAsC;YACtC,2BAA2B;YAC3B,IAAI,QAAQ,KAAK,GAAG,EAAE;gBACrB,OAAO,CAAC,CAAC;aACT;iBAAM,IAAI,QAAQ,KAAK,iBAAiB,EAAE;gBAC1C,OAAO,EAAE,CAAC;aACV;iBAAM;gBACN,OAAO,CAAC,CAAC;aACT;SAED;aAAM,IAAI,QAAQ,EAAE;YACpB,wDAAwD;YACxD,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,MAAM,EAAE,oBAAoB,EAAE,GAAG,QAA0B,CAAC,CAAC,mCAAmC;YAE3H,IAAI,CAAC,uBAAuB,IAAI,CAAC,oBAAoB,EAAE;gBACtD,OAAO,CAAC,CAAC;aACT;YAED,IAAI,GAAG,GAAG,CAAC,CAAC;YAEZ,IAAI,MAAM,EAAE;gBACX,IAAI,MAAM,KAAK,YAAY,CAAC,MAAM,EAAE;oBACnC,GAAG,GAAG,EAAE,CAAC;iBACT;qBAAM,IAAI,MAAM,KAAK,GAAG,EAAE;oBAC1B,GAAG,GAAG,CAAC,CAAC;iBACR;qBAAM;oBACN,OAAO,CAAC,CAAC;iBACT;aACD;YAED,IAAI,QAAQ,EAAE;gBACb,IAAI,QAAQ,KAAK,iBAAiB,EAAE;oBACnC,GAAG,GAAG,EAAE,CAAC;iBACT;qBAAM,IAAI,QAAQ,KAAK,GAAG,EAAE;oBAC5B,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;iBACvB;qBAAM;oBACN,OAAO,CAAC,CAAC;iBACT;aACD;YAED,IAAI,OAAO,EAAE;gBACZ,IAAI,iBAA4C,CAAC;gBACjD,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;oBAChC,iBAAiB,GAAG,OAAO,CAAC;iBAC5B;qBAAM;oBACN,oDAAoD;oBACpD,oDAAoD;oBACpD,kDAAkD;oBAClD,2CAA2C;oBAC3C,yDAAyD;oBACzD,iBAAiB,mCAAQ,OAAO,KAAE,IAAI,EAAE,CAAA,GAAA,gBAAS,CAAA,CAAC,OAAO,CAAC,IAAI,CAAC,GAAE,CAAC;iBAClE;gBAED,IAAI,iBAAiB,KAAK,YAAY,CAAC,MAAM,IAAI,CAAA,GAAA,YAAgB,CAAA,CAAC,iBAAiB,EAAE,YAAY,CAAC,MAAM,CAAC,EAAE;oBAC1G,GAAG,GAAG,EAAE,CAAC;iBACT;qBAAM;oBACN,OAAO,CAAC,CAAC;iBACT;aACD;YAED,OAAO,GAAG,CAAC;SAEX;aAAM;YACN,OAAO,CAAC,CAAC;SACT;IACF,CAAC;IAxFD,sBAwFC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IRelativePattern, match as matchGlobPattern } from 'vs/base/common/glob';\nimport { URI } from 'vs/base/common/uri'; // TODO@Alex\nimport { normalize } from 'vs/base/common/path';\n\nexport interface LanguageFilter {\n\treadonly language?: string;\n\treadonly scheme?: string;\n\treadonly pattern?: string | IRelativePattern;\n\t/**\n\t * This provider is implemented in the UI thread.\n\t */\n\treadonly hasAccessToAllModels?: boolean;\n\treadonly exclusive?: boolean;\n}\n\nexport type LanguageSelector = string | LanguageFilter | ReadonlyArray<string | LanguageFilter>;\n\nexport function score(selector: LanguageSelector | undefined, candidateUri: URI, candidateLanguage: string, candidateIsSynchronized: boolean): number {\n\n\tif (Array.isArray(selector)) {\n\t\t// array -> take max individual value\n\t\tlet ret = 0;\n\t\tfor (const filter of selector) {\n\t\t\tconst value = score(filter, candidateUri, candidateLanguage, candidateIsSynchronized);\n\t\t\tif (value === 10) {\n\t\t\t\treturn value; // already at the highest\n\t\t\t}\n\t\t\tif (value > ret) {\n\t\t\t\tret = value;\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\n\t} else if (typeof selector === 'string') {\n\n\t\tif (!candidateIsSynchronized) {\n\t\t\treturn 0;\n\t\t}\n\n\t\t// short-hand notion, desugars to\n\t\t// 'fooLang' -> { language: 'fooLang'}\n\t\t// '*' -> { language: '*' }\n\t\tif (selector === '*') {\n\t\t\treturn 5;\n\t\t} else if (selector === candidateLanguage) {\n\t\t\treturn 10;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\n\t} else if (selector) {\n\t\t// filter -> select accordingly, use defaults for scheme\n\t\tconst { language, pattern, scheme, hasAccessToAllModels } = selector as LanguageFilter; // TODO: microsoft/TypeScript#42768\n\n\t\tif (!candidateIsSynchronized && !hasAccessToAllModels) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tlet ret = 0;\n\n\t\tif (scheme) {\n\t\t\tif (scheme === candidateUri.scheme) {\n\t\t\t\tret = 10;\n\t\t\t} else if (scheme === '*') {\n\t\t\t\tret = 5;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\n\t\tif (language) {\n\t\t\tif (language === candidateLanguage) {\n\t\t\t\tret = 10;\n\t\t\t} else if (language === '*') {\n\t\t\t\tret = Math.max(ret, 5);\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\n\t\tif (pattern) {\n\t\t\tlet normalizedPattern: string | IRelativePattern;\n\t\t\tif (typeof pattern === 'string') {\n\t\t\t\tnormalizedPattern = pattern;\n\t\t\t} else {\n\t\t\t\t// Since this pattern has a `base` property, we need\n\t\t\t\t// to normalize this path first before passing it on\n\t\t\t\t// because we will compare it against `Uri.fsPath`\n\t\t\t\t// which uses platform specific separators.\n\t\t\t\t// Refs: https://github.com/microsoft/vscode/issues/99938\n\t\t\t\tnormalizedPattern = { ...pattern, base: normalize(pattern.base) };\n\t\t\t}\n\n\t\t\tif (normalizedPattern === candidateUri.fsPath || matchGlobPattern(normalizedPattern, candidateUri.fsPath)) {\n\t\t\t\tret = 10;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\n\t} else {\n\t\treturn 0;\n\t}\n}\n"]}