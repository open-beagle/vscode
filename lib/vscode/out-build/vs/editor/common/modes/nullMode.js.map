{"version":3,"file":"nullMode.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/common/modes/nullMode.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAKhG,MAAM,aAAa;QAEX,KAAK;YACX,OAAO,IAAI,CAAC;QACb,CAAC;QAEM,MAAM,CAAC,KAAa;YAC1B,OAAO,CAAC,IAAI,KAAK,KAAK,CAAC,CAAC;QACzB,CAAC;KACD;IAEY,QAAA,UAAU,GAAW,IAAI,aAAa,EAAE,CAAC;IAEzC,QAAA,YAAY,GAAG,oBAAoB,CAAC;IAEpC,QAAA,wBAAwB,GAAG,IAAI,0BAAkB,CAAC,oBAAY,eAAkB,CAAC;IAE9F,SAAgB,YAAY,CAAC,MAAc,EAAE,MAAc,EAAE,KAAa,EAAE,WAAmB;QAC9F,OAAO,IAAI,0BAAkB,CAAC,CAAC,IAAI,aAAK,CAAC,WAAW,EAAE,EAAE,EAAE,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;IAC5E,CAAC;IAFD,oCAEC;IAED,SAAgB,aAAa,CAAC,UAAsB,EAAE,MAAc,EAAE,KAAoB,EAAE,WAAmB;QAC9G,IAAI,MAAM,GAAG,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC;QAChC,MAAM,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC;QACxB,MAAM,CAAC,CAAC,CAAC,GAAG,CACX,CAAC,UAAU,6BAAoC,CAAC;cAC9C,CAAC,0CAA2D,CAAC;cAC7D,CAAC,0CAAkD,CAAC;cACpD,CAAC,uDAA6D,CAAC;cAC/D,CAAC,uDAA6D,CAAC,CACjE,KAAK,CAAC,CAAC;QAER,OAAO,IAAI,2BAAmB,CAAC,MAAM,EAAE,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC,kBAAU,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;IAC7E,CAAC;IAZD,sCAYC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Token, TokenizationResult, TokenizationResult2 } from 'vs/editor/common/core/token';\nimport { ColorId, FontStyle, IState, LanguageId, LanguageIdentifier, MetadataConsts, StandardTokenType } from 'vs/editor/common/modes';\n\nclass NullStateImpl implements IState {\n\n\tpublic clone(): IState {\n\t\treturn this;\n\t}\n\n\tpublic equals(other: IState): boolean {\n\t\treturn (this === other);\n\t}\n}\n\nexport const NULL_STATE: IState = new NullStateImpl();\n\nexport const NULL_MODE_ID = 'vs.editor.nullMode';\n\nexport const NULL_LANGUAGE_IDENTIFIER = new LanguageIdentifier(NULL_MODE_ID, LanguageId.Null);\n\nexport function nullTokenize(modeId: string, buffer: string, state: IState, deltaOffset: number): TokenizationResult {\n\treturn new TokenizationResult([new Token(deltaOffset, '', modeId)], state);\n}\n\nexport function nullTokenize2(languageId: LanguageId, buffer: string, state: IState | null, deltaOffset: number): TokenizationResult2 {\n\tlet tokens = new Uint32Array(2);\n\ttokens[0] = deltaOffset;\n\ttokens[1] = (\n\t\t(languageId << MetadataConsts.LANGUAGEID_OFFSET)\n\t\t| (StandardTokenType.Other << MetadataConsts.TOKEN_TYPE_OFFSET)\n\t\t| (FontStyle.None << MetadataConsts.FONT_STYLE_OFFSET)\n\t\t| (ColorId.DefaultForeground << MetadataConsts.FOREGROUND_OFFSET)\n\t\t| (ColorId.DefaultBackground << MetadataConsts.BACKGROUND_OFFSET)\n\t) >>> 0;\n\n\treturn new TokenizationResult2(tokens, state === null ? NULL_STATE : state);\n}\n"]}