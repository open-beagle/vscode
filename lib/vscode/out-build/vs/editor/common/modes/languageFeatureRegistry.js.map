{"version":3,"file":"languageFeatureRegistry.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/common/modes/languageFeatureRegistry.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { hash } from 'vs/base/common/hash';\nimport { IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { LRUCache } from 'vs/base/common/map';\nimport { MovingAverage } from 'vs/base/common/numbers';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { LanguageFilter, LanguageSelector, score } from 'vs/editor/common/modes/languageSelector';\nimport { shouldSynchronizeModel } from 'vs/editor/common/services/modelService';\n\ninterface Entry<T> {\n\tselector: LanguageSelector;\n\tprovider: T;\n\t_score: number;\n\t_time: number;\n}\n\nfunction isExclusive(selector: LanguageSelector): boolean {\n\tif (typeof selector === 'string') {\n\t\treturn false;\n\t} else if (Array.isArray(selector)) {\n\t\treturn selector.every(isExclusive);\n\t} else {\n\t\treturn !!(selector as LanguageFilter).exclusive; // TODO: microsoft/TypeScript#42768\n\t}\n}\n\nexport class LanguageFeatureRegistry<T> {\n\n\tprivate _clock: number = 0;\n\tprivate readonly _entries: Entry<T>[] = [];\n\tprivate readonly _onDidChange = new Emitter<number>();\n\n\tget onDidChange(): Event<number> {\n\t\treturn this._onDidChange.event;\n\t}\n\n\tregister(selector: LanguageSelector, provider: T): IDisposable {\n\n\t\tlet entry: Entry<T> | undefined = {\n\t\t\tselector,\n\t\t\tprovider,\n\t\t\t_score: -1,\n\t\t\t_time: this._clock++\n\t\t};\n\n\t\tthis._entries.push(entry);\n\t\tthis._lastCandidate = undefined;\n\t\tthis._onDidChange.fire(this._entries.length);\n\n\t\treturn toDisposable(() => {\n\t\t\tif (entry) {\n\t\t\t\tlet idx = this._entries.indexOf(entry);\n\t\t\t\tif (idx >= 0) {\n\t\t\t\t\tthis._entries.splice(idx, 1);\n\t\t\t\t\tthis._lastCandidate = undefined;\n\t\t\t\t\tthis._onDidChange.fire(this._entries.length);\n\t\t\t\t\tentry = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\thas(model: ITextModel): boolean {\n\t\treturn this.all(model).length > 0;\n\t}\n\n\tall(model: ITextModel): T[] {\n\t\tif (!model) {\n\t\t\treturn [];\n\t\t}\n\n\t\tthis._updateScores(model);\n\t\tconst result: T[] = [];\n\n\t\t// from registry\n\t\tfor (let entry of this._entries) {\n\t\t\tif (entry._score > 0) {\n\t\t\t\tresult.push(entry.provider);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tordered(model: ITextModel): T[] {\n\t\tconst result: T[] = [];\n\t\tthis._orderedForEach(model, entry => result.push(entry.provider));\n\t\treturn result;\n\t}\n\n\torderedGroups(model: ITextModel): T[][] {\n\t\tconst result: T[][] = [];\n\t\tlet lastBucket: T[];\n\t\tlet lastBucketScore: number;\n\n\t\tthis._orderedForEach(model, entry => {\n\t\t\tif (lastBucket && lastBucketScore === entry._score) {\n\t\t\t\tlastBucket.push(entry.provider);\n\t\t\t} else {\n\t\t\t\tlastBucketScore = entry._score;\n\t\t\t\tlastBucket = [entry.provider];\n\t\t\t\tresult.push(lastBucket);\n\t\t\t}\n\t\t});\n\n\t\treturn result;\n\t}\n\n\tprivate _orderedForEach(model: ITextModel, callback: (provider: Entry<T>) => any): void {\n\n\t\tif (!model) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._updateScores(model);\n\n\t\tfor (const entry of this._entries) {\n\t\t\tif (entry._score > 0) {\n\t\t\t\tcallback(entry);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _lastCandidate: { uri: string; language: string; } | undefined;\n\n\tprivate _updateScores(model: ITextModel): void {\n\n\t\tlet candidate = {\n\t\t\turi: model.uri.toString(),\n\t\t\tlanguage: model.getLanguageIdentifier().language\n\t\t};\n\n\t\tif (this._lastCandidate\n\t\t\t&& this._lastCandidate.language === candidate.language\n\t\t\t&& this._lastCandidate.uri === candidate.uri) {\n\n\t\t\t// nothing has changed\n\t\t\treturn;\n\t\t}\n\n\t\tthis._lastCandidate = candidate;\n\n\t\tfor (let entry of this._entries) {\n\t\t\tentry._score = score(entry.selector, model.uri, model.getLanguageIdentifier().language, shouldSynchronizeModel(model));\n\n\t\t\tif (isExclusive(entry.selector) && entry._score > 0) {\n\t\t\t\t// support for one exclusive selector that overwrites\n\t\t\t\t// any other selector\n\t\t\t\tfor (let entry of this._entries) {\n\t\t\t\t\tentry._score = 0;\n\t\t\t\t}\n\t\t\t\tentry._score = 1000;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// needs sorting\n\t\tthis._entries.sort(LanguageFeatureRegistry._compareByScoreAndTime);\n\t}\n\n\tprivate static _compareByScoreAndTime(a: Entry<any>, b: Entry<any>): number {\n\t\tif (a._score < b._score) {\n\t\t\treturn 1;\n\t\t} else if (a._score > b._score) {\n\t\t\treturn -1;\n\t\t} else if (a._time < b._time) {\n\t\t\treturn 1;\n\t\t} else if (a._time > b._time) {\n\t\t\treturn -1;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n}\n\n\n/**\n * Keeps moving average per model and set of providers so that requests\n * can be debounce according to the provider performance\n */\nexport class LanguageFeatureRequestDelays {\n\n\tprivate readonly _cache = new LRUCache<string, MovingAverage>(50, 0.7);\n\n\tconstructor(\n\t\tprivate readonly _registry: LanguageFeatureRegistry<any>,\n\t\treadonly min: number,\n\t\treadonly max: number = Number.MAX_SAFE_INTEGER,\n\t) { }\n\n\tprivate _key(model: ITextModel): string {\n\t\treturn model.id + hash(this._registry.all(model));\n\t}\n\n\tprivate _clamp(value: number | undefined): number {\n\t\tif (value === undefined) {\n\t\t\treturn this.min;\n\t\t} else {\n\t\t\treturn Math.min(this.max, Math.max(this.min, Math.floor(value * 1.3)));\n\t\t}\n\t}\n\n\tget(model: ITextModel): number {\n\t\tconst key = this._key(model);\n\t\tconst avg = this._cache.get(key);\n\t\treturn this._clamp(avg?.value);\n\t}\n\n\tupdate(model: ITextModel, value: number): number {\n\t\tconst key = this._key(model);\n\t\tlet avg = this._cache.get(key);\n\t\tif (!avg) {\n\t\t\tavg = new MovingAverage();\n\t\t\tthis._cache.set(key, avg);\n\t\t}\n\t\tavg.update(value);\n\t\treturn this.get(model);\n\t}\n}\n"]}