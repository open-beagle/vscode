{"version":3,"file":"typescript.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/common/modes/tokenization/typescript.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { StandardTokenType } from 'vs/editor/common/modes';\nimport { CharCode } from 'vs/base/common/charCode';\n\nclass ParserContext {\n\tpublic readonly text: string;\n\tpublic readonly len: number;\n\tpublic readonly tokens: number[];\n\tpublic pos: number;\n\n\tprivate currentTokenStartOffset: number;\n\tprivate currentTokenType: StandardTokenType;\n\n\tconstructor(text: string) {\n\t\tthis.text = text;\n\t\tthis.len = this.text.length;\n\t\tthis.tokens = [];\n\t\tthis.pos = 0;\n\t\tthis.currentTokenStartOffset = 0;\n\t\tthis.currentTokenType = StandardTokenType.Other;\n\t}\n\n\tprivate _safeCharCodeAt(index: number): number {\n\t\tif (index >= this.len) {\n\t\t\treturn CharCode.Null;\n\t\t}\n\t\treturn this.text.charCodeAt(index);\n\t}\n\n\tpeek(distance: number = 0): number {\n\t\treturn this._safeCharCodeAt(this.pos + distance);\n\t}\n\n\tnext(): number {\n\t\tconst result = this._safeCharCodeAt(this.pos);\n\t\tthis.pos++;\n\t\treturn result;\n\t}\n\n\tadvance(distance: number): void {\n\t\tthis.pos += distance;\n\t}\n\n\teof(): boolean {\n\t\treturn this.pos >= this.len;\n\t}\n\n\tbeginToken(tokenType: StandardTokenType, deltaPos: number = 0): void {\n\t\tthis.currentTokenStartOffset = this.pos + deltaPos;\n\t\tthis.currentTokenType = tokenType;\n\t}\n\n\tendToken(deltaPos: number = 0): void {\n\t\tconst length = this.pos + deltaPos - this.currentTokenStartOffset;\n\t\t// check if it is touching previous token\n\t\tif (this.tokens.length > 0) {\n\t\t\tconst previousStartOffset = this.tokens[this.tokens.length - 3];\n\t\t\tconst previousLength = this.tokens[this.tokens.length - 2];\n\t\t\tconst previousTokenType = this.tokens[this.tokens.length - 1];\n\t\t\tconst previousEndOffset = previousStartOffset + previousLength;\n\t\t\tif (this.currentTokenStartOffset === previousEndOffset && previousTokenType === this.currentTokenType) {\n\t\t\t\t// extend previous token\n\t\t\t\tthis.tokens[this.tokens.length - 2] += length;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tthis.tokens.push(this.currentTokenStartOffset, length, this.currentTokenType);\n\t}\n}\n\nexport function parse(text: string): number[] {\n\tconst ctx = new ParserContext(text);\n\twhile (!ctx.eof()) {\n\t\tparseRoot(ctx);\n\t}\n\treturn ctx.tokens;\n}\n\nfunction parseRoot(ctx: ParserContext): void {\n\tlet curlyCount = 0;\n\twhile (!ctx.eof()) {\n\t\tconst ch = ctx.peek();\n\n\t\tswitch (ch) {\n\t\t\tcase CharCode.SingleQuote:\n\t\t\t\tparseSimpleString(ctx, CharCode.SingleQuote);\n\t\t\t\tbreak;\n\t\t\tcase CharCode.DoubleQuote:\n\t\t\t\tparseSimpleString(ctx, CharCode.DoubleQuote);\n\t\t\t\tbreak;\n\t\t\tcase CharCode.BackTick:\n\t\t\t\tparseInterpolatedString(ctx);\n\t\t\t\tbreak;\n\t\t\tcase CharCode.Slash:\n\t\t\t\tparseSlash(ctx);\n\t\t\t\tbreak;\n\t\t\tcase CharCode.OpenCurlyBrace:\n\t\t\t\tctx.advance(1);\n\t\t\t\tcurlyCount++;\n\t\t\t\tbreak;\n\t\t\tcase CharCode.CloseCurlyBrace:\n\t\t\t\tctx.advance(1);\n\t\t\t\tcurlyCount--;\n\t\t\t\tif (curlyCount < 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tctx.advance(1);\n\t\t}\n\t}\n\n}\n\nfunction parseSimpleString(ctx: ParserContext, closingQuote: number): void {\n\tctx.beginToken(StandardTokenType.String);\n\n\t// skip the opening quote\n\tctx.advance(1);\n\n\twhile (!ctx.eof()) {\n\t\tconst ch = ctx.next();\n\t\tif (ch === CharCode.Backslash) {\n\t\t\t// skip \\r\\n or any other character following a backslash\n\t\t\tconst advanceCount = (ctx.peek() === CharCode.CarriageReturn && ctx.peek(1) === CharCode.LineFeed ? 2 : 1);\n\t\t\tctx.advance(advanceCount);\n\t\t} else if (ch === closingQuote) {\n\t\t\t// hit end quote, so stop\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tctx.endToken();\n}\n\nfunction parseInterpolatedString(ctx: ParserContext): void {\n\tctx.beginToken(StandardTokenType.String);\n\n\t// skip the opening quote\n\tctx.advance(1);\n\n\twhile (!ctx.eof()) {\n\t\tconst ch = ctx.next();\n\t\tif (ch === CharCode.Backslash) {\n\t\t\t// skip \\r\\n or any other character following a backslash\n\t\t\tconst advanceCount = (ctx.peek() === CharCode.CarriageReturn && ctx.peek(1) === CharCode.LineFeed ? 2 : 1);\n\t\t\tctx.advance(advanceCount);\n\t\t} else if (ch === CharCode.BackTick) {\n\t\t\t// hit end quote, so stop\n\t\t\tbreak;\n\t\t} else if (ch === CharCode.DollarSign) {\n\t\t\tif (ctx.peek() === CharCode.OpenCurlyBrace) {\n\t\t\t\tctx.advance(1);\n\t\t\t\tctx.endToken();\n\t\t\t\tparseRoot(ctx);\n\t\t\t\tctx.beginToken(StandardTokenType.String, -1);\n\t\t\t}\n\t\t}\n\t}\n\n\tctx.endToken();\n}\n\nfunction parseSlash(ctx: ParserContext): void {\n\n\tconst nextCh = ctx.peek(1);\n\tif (nextCh === CharCode.Asterisk) {\n\t\tparseMultiLineComment(ctx);\n\t\treturn;\n\t}\n\n\tif (nextCh === CharCode.Slash) {\n\t\tparseSingleLineComment(ctx);\n\t\treturn;\n\t}\n\n\tif (tryParseRegex(ctx)) {\n\t\treturn;\n\t}\n\n\tctx.advance(1);\n}\n\nfunction tryParseRegex(ctx: ParserContext): boolean {\n\t// See https://www.ecma-international.org/ecma-262/10.0/index.html#prod-RegularExpressionLiteral\n\n\t// TODO: avoid regex...\n\tlet contentBefore = ctx.text.substr(ctx.pos - 100, 100);\n\tif (/[a-zA-Z0-9](\\s*)$/.test(contentBefore)) {\n\t\t// Cannot start after an identifier\n\t\treturn false;\n\t}\n\n\tlet pos = 0;\n\tlet len = ctx.len - ctx.pos;\n\tlet inClass = false;\n\n\t// skip /\n\tpos++;\n\n\twhile (pos < len) {\n\t\tconst ch = ctx.peek(pos++);\n\n\t\tif (ch === CharCode.CarriageReturn || ch === CharCode.LineFeed) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (ch === CharCode.Backslash) {\n\t\t\tconst nextCh = ctx.peek();\n\t\t\tif (nextCh === CharCode.CarriageReturn || nextCh === CharCode.LineFeed) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t// skip next character\n\t\t\tpos++;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (inClass) {\n\n\t\t\tif (ch === CharCode.CloseSquareBracket) {\n\t\t\t\tinClass = false;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif (ch === CharCode.Slash) {\n\t\t\t\t// cannot be directly followed by a /\n\t\t\t\tif (ctx.peek(pos) === CharCode.Slash) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// consume flags\n\t\t\t\tdo {\n\t\t\t\t\tlet nextCh = ctx.peek(pos);\n\t\t\t\t\tif (nextCh >= CharCode.a && nextCh <= CharCode.z) {\n\t\t\t\t\t\tpos++;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} while (true);\n\n\t\t\t\t// TODO: avoid regex...\n\t\t\t\tif (/^(\\s*)(\\.|;|\\/|,|\\)|\\]|\\}|$)/.test(ctx.text.substr(ctx.pos + pos))) {\n\t\t\t\t\t// Must be followed by an operator of kinds\n\t\t\t\t\tctx.beginToken(StandardTokenType.RegEx);\n\t\t\t\t\tctx.advance(pos);\n\t\t\t\t\tctx.endToken();\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (ch === CharCode.OpenSquareBracket) {\n\t\t\t\tinClass = true;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t}\n\t}\n\n\treturn false;\n}\n\nfunction parseMultiLineComment(ctx: ParserContext): void {\n\tctx.beginToken(StandardTokenType.Comment);\n\n\t// skip the /*\n\tctx.advance(2);\n\n\twhile (!ctx.eof()) {\n\t\tconst ch = ctx.next();\n\t\tif (ch === CharCode.Asterisk) {\n\t\t\tif (ctx.peek() === CharCode.Slash) {\n\t\t\t\tctx.advance(1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tctx.endToken();\n}\n\nfunction parseSingleLineComment(ctx: ParserContext): void {\n\tctx.beginToken(StandardTokenType.Comment);\n\n\t// skip the //\n\tctx.advance(2);\n\n\twhile (!ctx.eof()) {\n\t\tconst ch = ctx.next();\n\t\tif (ch === CharCode.CarriageReturn || ch === CharCode.LineFeed) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tctx.endToken();\n}\n"]}