{"version":3,"file":"languageConfigurationRegistry.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/common/modes/languageConfigurationRegistry.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAyChG,MAAa,eAAe;QAe3B,YAAY,kBAAsC,EAAE,OAA8B;YACjF,IAAI,CAAC,mBAAmB,GAAG,kBAAkB,CAAC;YAC9C,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;YAC/B,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC;YACrB,IAAI,CAAC,eAAe,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,IAAI,CAAC,KAAK,CAAC,gBAAgB,IAAI,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,wBAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;YAC/I,IAAI,CAAC,QAAQ,GAAG,eAAe,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC5D,IAAI,CAAC,aAAa,GAAG,IAAI,oCAAoB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC1D,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,IAAI,gCAAmB,CAAC;YACpE,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC;YACpD,IAAI,IAAI,CAAC,KAAK,CAAC,gBAAgB,EAAE;gBAChC,IAAI,CAAC,kBAAkB,GAAG,IAAI,gCAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;aAC9E;iBAAM;gBACN,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;aAC/B;YACD,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,EAAE,CAAC;QAC9C,CAAC;QAED,IAAW,QAAQ;YAClB,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;gBAC3C,IAAI,CAAC,SAAS,GAAG,IAAI,mCAAgB,CAAC,IAAI,CAAC,mBAAmB,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;aACrF;YACD,OAAO,IAAI,CAAC,SAAS,CAAC;QACvB,CAAC;QAED,IAAW,iBAAiB;YAC3B,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE;gBAC7B,IAAI,CAAC,kBAAkB,GAAG,IAAI,mDAA+B,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aAC7E;YACD,OAAO,IAAI,CAAC,kBAAkB,CAAC;QAChC,CAAC;QAEM,OAAO,CAAC,UAAoC,EAAE,gBAAwB,EAAE,eAAuB,EAAE,cAAsB;YAC7H,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;gBAC1B,OAAO,IAAI,CAAC;aACZ;YACD,OAAO,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAU,EAAE,gBAAgB,EAAE,eAAe,EAAE,cAAc,CAAC,CAAC;QACpG,CAAC;QAEO,MAAM,CAAC,eAAe,CAAC,IAA2B;YACzD,IAAI,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC;YAChC,IAAI,CAAC,WAAW,EAAE;gBACjB,OAAO,IAAI,CAAC;aACZ;YAED,wBAAwB;YACxB,IAAI,QAAQ,GAA2B,EAAE,CAAC;YAE1C,IAAI,WAAW,CAAC,WAAW,EAAE;gBAC5B,QAAQ,CAAC,gBAAgB,GAAG,WAAW,CAAC,WAAW,CAAC;aACpD;YACD,IAAI,WAAW,CAAC,YAAY,EAAE;gBAC7B,IAAI,CAAC,UAAU,EAAE,QAAQ,CAAC,GAAG,WAAW,CAAC,YAAY,CAAC;gBACtD,QAAQ,CAAC,sBAAsB,GAAG,UAAU,CAAC;gBAC7C,QAAQ,CAAC,oBAAoB,GAAG,QAAQ,CAAC;aACzC;YAED,OAAO,QAAQ,CAAC;QACjB,CAAC;KACD;IA1ED,0CA0EC;IAED,MAAa,gCAAgC;QAC5C,YACiB,kBAAsC;YAAtC,uBAAkB,GAAlB,kBAAkB,CAAoB;QACnD,CAAC;KACL;IAJD,4EAIC;IAED,MAAM,0BAA0B;QAE/B,YACiB,aAAoC,EACpC,QAAgB,EAChB,KAAa;YAFb,kBAAa,GAAb,aAAa,CAAuB;YACpC,aAAQ,GAAR,QAAQ,CAAQ;YAChB,UAAK,GAAL,KAAK,CAAQ;QAC1B,CAAC;QAEE,MAAM,CAAC,GAAG,CAAC,CAA6B,EAAE,CAA6B;YAC7E,IAAI,CAAC,CAAC,QAAQ,KAAK,CAAC,CAAC,QAAQ,EAAE;gBAC9B,oBAAoB;gBACpB,OAAO,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC;aACzB;YACD,uBAAuB;YACvB,OAAO,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC,QAAQ,CAAC;QAChC,CAAC;KACD;IAED,MAAM,4BAA4B;QAMjC,YACiB,kBAAsC;YAAtC,uBAAkB,GAAlB,kBAAkB,CAAoB;YAH/C,cAAS,GAA2B,IAAI,CAAC;YAKhD,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;YACnB,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;YAChB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACvB,CAAC;QAEM,QAAQ,CAAC,aAAoC,EAAE,QAAgB;YACrE,MAAM,KAAK,GAAG,IAAI,0BAA0B,CAAC,aAAa,EAAE,QAAQ,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YACrF,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC1B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,OAAO,CAAA,GAAA,wBAAY,CAAA,CAAC,GAAG,EAAE;gBACxB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBAC9C,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,KAAK,EAAE;wBAC/B,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;wBAC3B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;wBACtB,MAAM;qBACN;iBACD;YACF,CAAC,CAAC,CAAC;QACJ,CAAC;QAEM,kBAAkB;YACxB,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;gBACpB,MAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;gBAC/B,IAAI,MAAM,EAAE;oBACX,IAAI,CAAC,SAAS,GAAG,IAAI,eAAe,CAAC,IAAI,CAAC,kBAAkB,EAAE,MAAM,CAAC,CAAC;iBACtE;aACD;YACD,OAAO,IAAI,CAAC,SAAS,CAAC;QACvB,CAAC;QAEO,QAAQ;YACf,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC/B,OAAO,IAAI,CAAC;aACZ;YACD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,0BAA0B,CAAC,GAAG,CAAC,CAAC;YACnD,MAAM,MAAM,GAA0B,EAAE,CAAC;YACzC,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,QAAQ,EAAE;gBAClC,MAAM,IAAI,GAAG,KAAK,CAAC,aAAa,CAAC;gBACjC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,IAAI,MAAM,CAAC,QAAQ,CAAC;gBACnD,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,IAAI,MAAM,CAAC,QAAQ,CAAC;gBACnD,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,IAAI,MAAM,CAAC,WAAW,CAAC;gBAC5D,MAAM,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,IAAI,MAAM,CAAC,gBAAgB,CAAC;gBAC3E,MAAM,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,IAAI,MAAM,CAAC,YAAY,CAAC;gBAC/D,MAAM,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,IAAI,MAAM,CAAC,gBAAgB,CAAC;gBAC3E,MAAM,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,IAAI,MAAM,CAAC,gBAAgB,CAAC;gBAC3E,MAAM,CAAC,eAAe,GAAG,IAAI,CAAC,eAAe,IAAI,MAAM,CAAC,eAAe,CAAC;gBACxE,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,IAAI,MAAM,CAAC,OAAO,CAAC;gBAChD,MAAM,CAAC,0BAA0B,GAAG,IAAI,CAAC,0BAA0B,IAAI,MAAM,CAAC,0BAA0B,CAAC;aACzG;YACD,OAAO,MAAM,CAAC;QACf,CAAC;KACD;IAED,MAAa,iCAAiC;QAA9C;YAEkB,cAAS,GAAG,IAAI,GAAG,EAA4C,CAAC;YAEhE,iBAAY,GAAG,IAAI,eAAO,EAAoC,CAAC;YAChE,gBAAW,GAA4C,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;QA0mBhG,CAAC;QAxmBA;;WAEG;QACI,QAAQ,CAAC,kBAAsC,EAAE,aAAoC,EAAE,WAAmB,CAAC;YACjH,IAAI,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,kBAAkB,CAAC,EAAE,CAAC,CAAC;YACxD,IAAI,CAAC,OAAO,EAAE;gBACb,OAAO,GAAG,IAAI,4BAA4B,CAAC,kBAAkB,CAAC,CAAC;gBAC/D,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,kBAAkB,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;aACnD;YAED,MAAM,UAAU,GAAG,OAAO,CAAC,QAAQ,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;YAC7D,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,gCAAgC,CAAC,kBAAkB,CAAC,CAAC,CAAC;YAEjF,OAAO,CAAA,GAAA,wBAAY,CAAA,CAAC,GAAG,EAAE;gBACxB,UAAU,CAAC,OAAO,EAAE,CAAC;gBACrB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,gCAAgC,CAAC,kBAAkB,CAAC,CAAC,CAAC;YAClF,CAAC,CAAC,CAAC;QACJ,CAAC;QAEO,mBAAmB,CAAC,UAAsB;YACjD,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YAC/C,OAAO,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,kBAAkB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;QACtD,CAAC;QAEM,mBAAmB,CAAC,UAAsB;YAChD,MAAM,KAAK,GAAG,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;YACnD,OAAO,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,gBAAgB,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;QACtD,CAAC;QAED,0BAA0B;QAElB,4BAA4B,CAAC,UAAsB;YAC1D,IAAI,KAAK,GAAG,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;YACjD,IAAI,CAAC,KAAK,EAAE;gBACX,OAAO,IAAI,CAAC;aACZ;YACD,OAAO,KAAK,CAAC,iBAAiB,IAAI,IAAI,CAAC;QACxC,CAAC;QAEM,qBAAqB,CAAC,UAAsB;YAClD,IAAI,wBAAwB,GAAG,IAAI,CAAC,4BAA4B,CAAC,UAAU,CAAC,CAAC;YAC7E,IAAI,CAAC,wBAAwB,EAAE;gBAC9B,OAAO,EAAE,CAAC;aACV;YACD,OAAO,wBAAwB,CAAC,qBAAqB,EAAE,CAAC;QACzD,CAAC;QAED;;WAEG;QACI,mBAAmB,CAAC,SAAiB,EAAE,OAAmB,EAAE,MAAc;YAChF,IAAI,gBAAgB,GAAG,CAAA,GAAA,iCAAsB,CAAA,CAAC,OAAO,EAAE,MAAM,GAAG,CAAC,CAAC,CAAC;YACnE,IAAI,wBAAwB,GAAG,IAAI,CAAC,4BAA4B,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;YAC9F,IAAI,CAAC,wBAAwB,EAAE;gBAC9B,OAAO,IAAI,CAAC;aACZ;YACD,OAAO,wBAAwB,CAAC,mBAAmB,CAAC,SAAS,EAAE,gBAAgB,EAAE,MAAM,GAAG,gBAAgB,CAAC,eAAe,CAAC,CAAC;QAC7H,CAAC;QAED,wBAAwB;QAEjB,WAAW,CAAC,UAAsB;YACxC,IAAI,KAAK,GAAG,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;YACjD,IAAI,CAAC,KAAK,EAAE;gBACX,OAAO,IAAI,CAAC;aACZ;YACD,OAAO,KAAK,CAAC,QAAQ,IAAI,IAAI,CAAC;QAC/B,CAAC;QAED,sBAAsB;QAEd,wBAAwB,CAAC,UAAsB;YACtD,IAAI,KAAK,GAAG,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;YACjD,IAAI,CAAC,KAAK,EAAE;gBACX,OAAO,IAAI,CAAC;aACZ;YACD,OAAO,KAAK,CAAC,aAAa,IAAI,IAAI,CAAC;QACpC,CAAC;QAEM,mBAAmB,CAAC,UAAsB;YAChD,MAAM,oBAAoB,GAAG,IAAI,CAAC,wBAAwB,CAAC,UAAU,CAAC,CAAC;YACvE,OAAO,IAAI,wCAAgB,CAAC,oBAAoB,CAAC,CAAC,CAAC,oBAAoB,CAAC,mBAAmB,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QACrG,CAAC;QAEM,qBAAqB,CAAC,UAAsB;YAClD,IAAI,oBAAoB,GAAG,IAAI,CAAC,wBAAwB,CAAC,UAAU,CAAC,CAAC;YACrE,IAAI,CAAC,oBAAoB,EAAE;gBAC1B,OAAO,oCAAoB,CAAC,yCAAyC,CAAC;aACtE;YACD,OAAO,oBAAoB,CAAC,qBAAqB,EAAE,CAAC;QACrD,CAAC;QAEM,mBAAmB,CAAC,UAAsB;YAChD,IAAI,oBAAoB,GAAG,IAAI,CAAC,wBAAwB,CAAC,UAAU,CAAC,CAAC;YACrE,IAAI,CAAC,oBAAoB,EAAE;gBAC1B,OAAO,EAAE,CAAC;aACV;YACD,OAAO,oBAAoB,CAAC,mBAAmB,EAAE,CAAC;QACnD,CAAC;QAEM,mBAAmB,CAAC,eAAmD,EAAE,OAAmB,EAAE,MAAc;YAClH,MAAM,gBAAgB,GAAG,CAAA,GAAA,iCAAsB,CAAA,CAAC,OAAO,EAAE,MAAM,GAAG,CAAC,CAAC,CAAC;YACrE,OAAO,oCAAoB,CAAC,mBAAmB,CAAC,eAAe,EAAE,gBAAgB,EAAE,MAAM,GAAG,gBAAgB,CAAC,eAAe,CAAC,CAAC;QAC/H,CAAC;QAED,oBAAoB;QAEb,iBAAiB,CAAC,UAAsB;YAC9C,IAAI,KAAK,GAAG,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;YACjD,IAAI,CAAC,KAAK,EAAE;gBACX,OAAO,CAAA,GAAA,sCAAyB,CAAA,CAAC,IAAI,CAAC,CAAC;aACvC;YACD,OAAO,CAAA,GAAA,sCAAyB,CAAA,CAAC,KAAK,CAAC,cAAc,IAAI,IAAI,CAAC,CAAC;QAChE,CAAC;QAEM,kBAAkB;YACxB,IAAI,MAAM,GAA2B,EAAE,CAAC;YACxC,KAAK,MAAM,CAAC,QAAQ,EAAE,OAAO,CAAC,IAAI,IAAI,CAAC,SAAS,EAAE;gBACjD,MAAM,KAAK,GAAG,OAAO,CAAC,kBAAkB,EAAE,CAAC;gBAC3C,IAAI,KAAK,EAAE;oBACV,MAAM,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC;iBAC9C;aACD;YACD,OAAO,MAAM,CAAC;QACf,CAAC;QAEM,eAAe,CAAC,UAAsB;YAC5C,IAAI,KAAK,GAAG,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;YACjD,IAAI,CAAC,KAAK,EAAE;gBACX,OAAO,EAAE,CAAC;aACV;YACD,OAAO,KAAK,CAAC,YAAY,CAAC;QAC3B,CAAC;QAED,qBAAqB;QAEd,qBAAqB,CAAC,UAAsB;YAClD,IAAI,KAAK,GAAG,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;YACjD,IAAI,CAAC,KAAK,EAAE;gBACX,OAAO,IAAI,CAAC;aACZ;YACD,OAAO,KAAK,CAAC,kBAAkB,IAAI,IAAI,CAAC;QACzC,CAAC;QAED;;;;;;WAMG;QACK,qBAAqB,CAAC,KAAoB,EAAE,UAAkB,EAAE,kBAAsC;YAC7G,IAAI,UAAU,GAAG,KAAK,CAAC,uBAAuB,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;YAC9D,IAAI,UAAU,GAAG,CAAC,EAAE;gBACnB,IAAI,cAAsB,CAAC;gBAC3B,IAAI,gBAAgB,GAAG,CAAC,CAAC,CAAC;gBAE1B,KAAK,cAAc,GAAG,UAAU,GAAG,CAAC,EAAE,cAAc,IAAI,CAAC,EAAE,cAAc,EAAE,EAAE;oBAC5E,IAAI,KAAK,CAAC,uBAAuB,CAAC,cAAc,EAAE,CAAC,CAAC,KAAK,UAAU,EAAE;wBACpE,OAAO,gBAAgB,CAAC;qBACxB;oBACD,IAAI,IAAI,GAAG,KAAK,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;oBAChD,IAAI,kBAAkB,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,KAAK,EAAE,EAAE;wBAC/E,gBAAgB,GAAG,cAAc,CAAC;wBAClC,SAAS;qBACT;oBAED,OAAO,cAAc,CAAC;iBACtB;aACD;YAED,OAAO,CAAC,CAAC,CAAC;QACX,CAAC;QAED;;;;;;;;;;;WAWG;QACI,uBAAuB,CAAC,UAAoC,EAAE,KAAoB,EAAE,UAAkB,EAAE,uBAAgC,IAAI;YAClJ,IAAI,UAAU,eAAgC,EAAE;gBAC/C,OAAO,IAAI,CAAC;aACZ;YAED,MAAM,kBAAkB,GAAG,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,qBAAqB,EAAE,CAAC,EAAE,CAAC,CAAC;YACxF,IAAI,CAAC,kBAAkB,EAAE;gBACxB,OAAO,IAAI,CAAC;aACZ;YAED,IAAI,UAAU,IAAI,CAAC,EAAE;gBACpB,OAAO;oBACN,WAAW,EAAE,EAAE;oBACf,MAAM,EAAE,IAAI;iBACZ,CAAC;aACF;YAED,MAAM,sBAAsB,GAAG,IAAI,CAAC,qBAAqB,CAAC,KAAK,EAAE,UAAU,EAAE,kBAAkB,CAAC,CAAC;YACjG,IAAI,sBAAsB,GAAG,CAAC,EAAE;gBAC/B,OAAO,IAAI,CAAC;aACZ;iBAAM,IAAI,sBAAsB,GAAG,CAAC,EAAE;gBACtC,OAAO;oBACN,WAAW,EAAE,EAAE;oBACf,MAAM,EAAE,IAAI;iBACZ,CAAC;aACF;YAED,MAAM,6BAA6B,GAAG,KAAK,CAAC,cAAc,CAAC,sBAAsB,CAAC,CAAC;YACnF,IAAI,kBAAkB,CAAC,cAAc,CAAC,6BAA6B,CAAC,IAAI,kBAAkB,CAAC,oBAAoB,CAAC,6BAA6B,CAAC,EAAE;gBAC/I,OAAO;oBACN,WAAW,EAAE,OAAO,CAAC,oBAAoB,CAAC,6BAA6B,CAAC;oBACxE,MAAM,EAAE,oCAAY,CAAC,MAAM;oBAC3B,IAAI,EAAE,sBAAsB;iBAC5B,CAAC;aACF;iBAAM,IAAI,kBAAkB,CAAC,cAAc,CAAC,6BAA6B,CAAC,EAAE;gBAC5E,OAAO;oBACN,WAAW,EAAE,OAAO,CAAC,oBAAoB,CAAC,6BAA6B,CAAC;oBACxE,MAAM,EAAE,IAAI;oBACZ,IAAI,EAAE,sBAAsB;iBAC5B,CAAC;aACF;iBAAM;gBACN,6CAA6C;gBAC7C,gDAAgD;gBAChD,qCAAqC;gBACrC,0DAA0D;gBAC1D,2EAA2E;gBAC3E,IAAI,sBAAsB,KAAK,CAAC,EAAE;oBACjC,OAAO;wBACN,WAAW,EAAE,OAAO,CAAC,oBAAoB,CAAC,KAAK,CAAC,cAAc,CAAC,sBAAsB,CAAC,CAAC;wBACvF,MAAM,EAAE,IAAI;wBACZ,IAAI,EAAE,sBAAsB;qBAC5B,CAAC;iBACF;gBAED,MAAM,YAAY,GAAG,sBAAsB,GAAG,CAAC,CAAC;gBAEhD,MAAM,0BAA0B,GAAG,kBAAkB,CAAC,iBAAiB,CAAC,KAAK,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC;gBAC5G,IAAI,CAAC,CAAC,0BAA0B,GAAG,CAAC,6CAAuD,CAAC,CAAC;oBAC5F,CAAC,0BAA0B,+BAAoC,CAAC,EAAE;oBAClE,IAAI,QAAQ,GAAG,CAAC,CAAC;oBACjB,KAAK,IAAI,CAAC,GAAG,YAAY,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;wBAC1C,IAAI,kBAAkB,CAAC,oBAAoB,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,EAAE;4BACrE,SAAS;yBACT;wBACD,QAAQ,GAAG,CAAC,CAAC;wBACb,MAAM;qBACN;oBAED,OAAO;wBACN,WAAW,EAAE,OAAO,CAAC,oBAAoB,CAAC,KAAK,CAAC,cAAc,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC;wBAC7E,MAAM,EAAE,IAAI;wBACZ,IAAI,EAAE,QAAQ,GAAG,CAAC;qBAClB,CAAC;iBACF;gBAED,IAAI,oBAAoB,EAAE;oBACzB,OAAO;wBACN,WAAW,EAAE,OAAO,CAAC,oBAAoB,CAAC,KAAK,CAAC,cAAc,CAAC,sBAAsB,CAAC,CAAC;wBACvF,MAAM,EAAE,IAAI;wBACZ,IAAI,EAAE,sBAAsB;qBAC5B,CAAC;iBACF;qBAAM;oBACN,qFAAqF;oBACrF,KAAK,IAAI,CAAC,GAAG,sBAAsB,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;wBAChD,MAAM,WAAW,GAAG,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;wBAC5C,IAAI,kBAAkB,CAAC,cAAc,CAAC,WAAW,CAAC,EAAE;4BACnD,OAAO;gCACN,WAAW,EAAE,OAAO,CAAC,oBAAoB,CAAC,WAAW,CAAC;gCACtD,MAAM,EAAE,oCAAY,CAAC,MAAM;gCAC3B,IAAI,EAAE,CAAC;6BACP,CAAC;yBACF;6BAAM,IAAI,kBAAkB,CAAC,oBAAoB,CAAC,WAAW,CAAC,EAAE;4BAChE,IAAI,QAAQ,GAAG,CAAC,CAAC;4BACjB,KAAK,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gCAC/B,IAAI,kBAAkB,CAAC,oBAAoB,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,EAAE;oCACrE,SAAS;iCACT;gCACD,QAAQ,GAAG,CAAC,CAAC;gCACb,MAAM;6BACN;4BAED,OAAO;gCACN,WAAW,EAAE,OAAO,CAAC,oBAAoB,CAAC,KAAK,CAAC,cAAc,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC;gCAC7E,MAAM,EAAE,IAAI;gCACZ,IAAI,EAAE,QAAQ,GAAG,CAAC;6BAClB,CAAC;yBACF;6BAAM,IAAI,kBAAkB,CAAC,cAAc,CAAC,WAAW,CAAC,EAAE;4BAC1D,OAAO;gCACN,WAAW,EAAE,OAAO,CAAC,oBAAoB,CAAC,WAAW,CAAC;gCACtD,MAAM,EAAE,IAAI;gCACZ,IAAI,EAAE,CAAC;6BACP,CAAC;yBACF;qBACD;oBAED,OAAO;wBACN,WAAW,EAAE,OAAO,CAAC,oBAAoB,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;wBAClE,MAAM,EAAE,IAAI;wBACZ,IAAI,EAAE,CAAC;qBACP,CAAC;iBACF;aACD;QACF,CAAC;QAEM,oBAAoB,CAAC,UAAoC,EAAE,YAA2B,EAAE,UAAsB,EAAE,UAAkB,EAAE,eAAiC;YAC3K,IAAI,UAAU,eAAgC,EAAE;gBAC/C,OAAO,IAAI,CAAC;aACZ;YAED,MAAM,eAAe,GAAG,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;YAC7D,IAAI,CAAC,eAAe,EAAE;gBACrB,OAAO,IAAI,CAAC;aACZ;YAED,MAAM,kBAAkB,GAAG,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC;YAClE,IAAI,CAAC,kBAAkB,EAAE;gBACxB,OAAO,IAAI,CAAC;aACZ;YAED,MAAM,MAAM,GAAG,IAAI,CAAC,uBAAuB,CAAC,UAAU,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC;YAClF,MAAM,WAAW,GAAG,YAAY,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;YAE5D,IAAI,MAAM,EAAE;gBACX,MAAM,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC;gBAChC,IAAI,WAAW,KAAK,SAAS,EAAE;oBAC9B,MAAM,WAAW,GAAG,eAAe,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,EAAE,YAAY,CAAC,cAAc,CAAC,WAAW,CAAC,EAAE,EAAE,CAAC,CAAC;oBAE1G,IAAI,WAAW,EAAE;wBAChB,IAAI,WAAW,GAAG,OAAO,CAAC,oBAAoB,CAAC,YAAY,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC,CAAC;wBAEzF,IAAI,WAAW,CAAC,UAAU,EAAE;4BAC3B,WAAW,GAAG,WAAW,CAAC,SAAS,CAAC,CAAC,EAAE,WAAW,CAAC,MAAM,GAAG,WAAW,CAAC,UAAU,CAAC,CAAC;yBACpF;wBAED,IACC,CAAC,WAAW,CAAC,YAAY,KAAK,oCAAY,CAAC,MAAM,CAAC;4BAClD,CAAC,WAAW,CAAC,YAAY,KAAK,oCAAY,CAAC,aAAa,CAAC,EACxD;4BACD,WAAW,GAAG,eAAe,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;yBACvD;6BAAM,IAAI,WAAW,CAAC,YAAY,KAAK,oCAAY,CAAC,OAAO,EAAE;4BAC7D,WAAW,GAAG,eAAe,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;yBACzD;wBAED,IAAI,kBAAkB,CAAC,cAAc,CAAC,WAAW,CAAC,EAAE;4BACnD,WAAW,GAAG,eAAe,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;yBACzD;wBAED,IAAI,WAAW,CAAC,UAAU,EAAE;4BAC3B,WAAW,IAAI,WAAW,CAAC,UAAU,CAAC;yBACtC;wBAED,OAAO,OAAO,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC;qBACjD;iBACD;gBAED,IAAI,kBAAkB,CAAC,cAAc,CAAC,WAAW,CAAC,EAAE;oBACnD,IAAI,MAAM,CAAC,MAAM,KAAK,oCAAY,CAAC,MAAM,EAAE;wBAC1C,OAAO,MAAM,CAAC,WAAW,CAAC;qBAC1B;yBAAM;wBACN,OAAO,eAAe,CAAC,aAAa,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;qBACzD;iBACD;qBAAM;oBACN,IAAI,MAAM,CAAC,MAAM,KAAK,oCAAY,CAAC,MAAM,EAAE;wBAC1C,OAAO,eAAe,CAAC,WAAW,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;qBACvD;yBAAM;wBACN,OAAO,MAAM,CAAC,WAAW,CAAC;qBAC1B;iBACD;aACD;YACD,OAAO,IAAI,CAAC;QACb,CAAC;QAEM,iBAAiB,CAAC,UAAoC,EAAE,KAAiB,EAAE,KAAY,EAAE,eAAiC;YAChI,IAAI,UAAU,eAAgC,EAAE;gBAC/C,OAAO,IAAI,CAAC;aACZ;YACD,KAAK,CAAC,iBAAiB,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;YAC/C,MAAM,UAAU,GAAG,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;YAC9D,MAAM,gBAAgB,GAAG,CAAA,GAAA,iCAAsB,CAAA,CAAC,UAAU,EAAE,KAAK,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC;YACnF,MAAM,cAAc,GAAG,gBAAgB,CAAC,cAAc,EAAE,CAAC;YAEzD,IAAI,gBAAgB,GAAG,KAAK,CAAC;YAC7B,IAAI,eAAuB,CAAC;YAC5B,IAAI,gBAAgB,CAAC,eAAe,GAAG,CAAC,IAAI,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC,KAAK,gBAAgB,CAAC,UAAU,EAAE;gBACxG,yCAAyC;gBACzC,gBAAgB,GAAG,IAAI,CAAC,CAAC,mFAAmF;gBAC5G,eAAe,GAAG,cAAc,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,WAAW,GAAG,CAAC,GAAG,gBAAgB,CAAC,eAAe,CAAC,CAAC;aACrG;iBAAM;gBACN,eAAe,GAAG,UAAU,CAAC,cAAc,EAAE,CAAC,SAAS,CAAC,CAAC,EAAE,KAAK,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC;aAClF;YAED,IAAI,cAAsB,CAAC;YAC3B,IAAI,KAAK,CAAC,OAAO,EAAE,EAAE;gBACpB,cAAc,GAAG,cAAc,CAAC,MAAM,CAAC,KAAK,CAAC,WAAW,GAAG,CAAC,GAAG,gBAAgB,CAAC,eAAe,CAAC,CAAC;aACjG;iBAAM;gBACN,MAAM,mBAAmB,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,KAAK,CAAC,aAAa,EAAE,KAAK,CAAC,SAAS,CAAC,CAAC;gBAClG,cAAc,GAAG,mBAAmB,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,GAAG,CAAC,GAAG,gBAAgB,CAAC,eAAe,CAAC,CAAC;aACrH;YAED,MAAM,kBAAkB,GAAG,IAAI,CAAC,qBAAqB,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;YACnF,IAAI,CAAC,kBAAkB,EAAE;gBACxB,OAAO,IAAI,CAAC;aACZ;YAED,MAAM,iBAAiB,GAAG,eAAe,CAAC;YAC1C,MAAM,iBAAiB,GAAG,OAAO,CAAC,oBAAoB,CAAC,eAAe,CAAC,CAAC;YAExE,MAAM,YAAY,GAAkB;gBACnC,aAAa,EAAE,CAAC,UAAkB,EAAE,EAAE;oBACrC,OAAO,KAAK,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gBACxC,CAAC;gBACD,qBAAqB,EAAE,GAAG,EAAE;oBAC3B,OAAO,KAAK,CAAC,qBAAqB,EAAE,CAAC;gBACtC,CAAC;gBACD,uBAAuB,EAAE,CAAC,UAAkB,EAAE,MAAc,EAAE,EAAE;oBAC/D,OAAO,KAAK,CAAC,uBAAuB,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;gBAC1D,CAAC;gBACD,cAAc,EAAE,CAAC,UAAkB,EAAE,EAAE;oBACtC,IAAI,UAAU,KAAK,KAAK,CAAC,eAAe,EAAE;wBACzC,OAAO,iBAAiB,CAAC;qBACzB;yBAAM;wBACN,OAAO,KAAK,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;qBACxC;gBACF,CAAC;aACD,CAAC;YAEF,MAAM,iBAAiB,GAAG,OAAO,CAAC,oBAAoB,CAAC,UAAU,CAAC,cAAc,EAAE,CAAC,CAAC;YACpF,MAAM,gBAAgB,GAAG,IAAI,CAAC,uBAAuB,CAAC,UAAU,EAAE,YAAY,EAAE,KAAK,CAAC,eAAe,GAAG,CAAC,CAAC,CAAC;YAC3G,IAAI,CAAC,gBAAgB,EAAE;gBACtB,MAAM,WAAW,GAAG,gBAAgB,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,iBAAiB,CAAC;gBAC7E,OAAO;oBACN,WAAW,EAAE,WAAW;oBACxB,UAAU,EAAE,WAAW;iBACvB,CAAC;aACF;YAED,IAAI,gBAAgB,GAAG,gBAAgB,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,gBAAgB,CAAC,WAAW,CAAC;YAE3F,IAAI,gBAAgB,CAAC,MAAM,KAAK,oCAAY,CAAC,MAAM,EAAE;gBACpD,gBAAgB,GAAG,eAAe,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC;aACjE;YAED,IAAI,kBAAkB,CAAC,cAAc,CAAC,cAAc,CAAC,EAAE;gBACtD,gBAAgB,GAAG,eAAe,CAAC,aAAa,CAAC,gBAAgB,CAAC,CAAC;aACnE;YAED,OAAO;gBACN,WAAW,EAAE,gBAAgB,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,iBAAiB;gBACrE,UAAU,EAAE,gBAAgB;aAC5B,CAAC;QACH,CAAC;QAED;;;WAGG;QACI,sBAAsB,CAAC,UAAoC,EAAE,KAAiB,EAAE,KAAY,EAAE,EAAU,EAAE,eAAiC;YACjJ,IAAI,UAAU,eAAgC,EAAE;gBAC/C,OAAO,IAAI,CAAC;aACZ;YACD,MAAM,gBAAgB,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,KAAK,CAAC,eAAe,EAAE,KAAK,CAAC,WAAW,CAAC,CAAC;YAEnG,IAAI,gBAAgB,CAAC,eAAe,EAAE;gBACrC,oEAAoE;gBACpE,OAAO,IAAI,CAAC;aACZ;YAED,MAAM,kBAAkB,GAAG,IAAI,CAAC,qBAAqB,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;YACnF,IAAI,CAAC,kBAAkB,EAAE;gBACxB,OAAO,IAAI,CAAC;aACZ;YAED,MAAM,cAAc,GAAG,gBAAgB,CAAC,cAAc,EAAE,CAAC;YACzD,MAAM,cAAc,GAAG,cAAc,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,WAAW,GAAG,CAAC,GAAG,gBAAgB,CAAC,eAAe,CAAC,CAAC;YAE1G,oBAAoB;YACpB,IAAI,aAAqB,CAAC;YAC1B,IAAI,KAAK,CAAC,OAAO,EAAE,EAAE;gBACpB,aAAa,GAAG,cAAc,CAAC,MAAM,CAAC,KAAK,CAAC,WAAW,GAAG,CAAC,GAAG,gBAAgB,CAAC,eAAe,CAAC,CAAC;aAChG;iBAAM;gBACN,MAAM,mBAAmB,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,KAAK,CAAC,aAAa,EAAE,KAAK,CAAC,SAAS,CAAC,CAAC;gBAClG,aAAa,GAAG,mBAAmB,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,GAAG,CAAC,GAAG,gBAAgB,CAAC,eAAe,CAAC,CAAC;aACpH;YAED,0HAA0H;YAC1H,iGAAiG;YACjG,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,cAAc,GAAG,aAAa,CAAC,IAAI,kBAAkB,CAAC,cAAc,CAAC,cAAc,GAAG,EAAE,GAAG,aAAa,CAAC,EAAE;gBACjJ,8GAA8G;gBAC9G,iCAAiC;gBACjC,MAAM,CAAC,GAAG,IAAI,CAAC,uBAAuB,CAAC,UAAU,EAAE,KAAK,EAAE,KAAK,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;gBACxF,IAAI,CAAC,CAAC,EAAE;oBACP,OAAO,IAAI,CAAC;iBACZ;gBAED,IAAI,WAAW,GAAG,CAAC,CAAC,WAAW,CAAC;gBAChC,IAAI,CAAC,CAAC,MAAM,KAAK,oCAAY,CAAC,MAAM,EAAE;oBACrC,WAAW,GAAG,eAAe,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;iBACzD;gBAED,OAAO,WAAW,CAAC;aACnB;YAED,OAAO,IAAI,CAAC;QACb,CAAC;QAEM,iBAAiB,CAAC,KAAiB,EAAE,UAAkB;YAC7D,MAAM,kBAAkB,GAAG,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,qBAAqB,EAAE,CAAC,EAAE,CAAC,CAAC;YACxF,IAAI,CAAC,kBAAkB,EAAE;gBACxB,OAAO,IAAI,CAAC;aACZ;YACD,IAAI,UAAU,GAAG,CAAC,IAAI,UAAU,GAAG,KAAK,CAAC,YAAY,EAAE,EAAE;gBACxD,OAAO,IAAI,CAAC;aACZ;YACD,OAAO,kBAAkB,CAAC,iBAAiB,CAAC,KAAK,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC;QAC/E,CAAC;QAED,mBAAmB;QAEnB,gBAAgB;QAET,cAAc,CAAC,UAAoC,EAAE,KAAiB,EAAE,KAAY;YAC1F,MAAM,gBAAgB,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,KAAK,CAAC,eAAe,EAAE,KAAK,CAAC,WAAW,CAAC,CAAC;YACnG,MAAM,eAAe,GAAG,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;YAC9E,IAAI,CAAC,eAAe,EAAE;gBACrB,OAAO,IAAI,CAAC;aACZ;YAED,MAAM,cAAc,GAAG,gBAAgB,CAAC,cAAc,EAAE,CAAC;YACzD,MAAM,eAAe,GAAG,cAAc,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,WAAW,GAAG,CAAC,GAAG,gBAAgB,CAAC,eAAe,CAAC,CAAC;YAE3G,oBAAoB;YACpB,IAAI,cAAsB,CAAC;YAC3B,IAAI,KAAK,CAAC,OAAO,EAAE,EAAE;gBACpB,cAAc,GAAG,cAAc,CAAC,MAAM,CAAC,KAAK,CAAC,WAAW,GAAG,CAAC,GAAG,gBAAgB,CAAC,eAAe,CAAC,CAAC;aACjG;iBAAM;gBACN,MAAM,mBAAmB,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,KAAK,CAAC,aAAa,EAAE,KAAK,CAAC,SAAS,CAAC,CAAC;gBAClG,cAAc,GAAG,mBAAmB,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,GAAG,CAAC,GAAG,gBAAgB,CAAC,eAAe,CAAC,CAAC;aACrH;YAED,IAAI,gBAAgB,GAAG,EAAE,CAAC;YAC1B,IAAI,KAAK,CAAC,eAAe,GAAG,CAAC,IAAI,gBAAgB,CAAC,eAAe,KAAK,CAAC,EAAE;gBACxE,sEAAsE;gBACtE,MAAM,4BAA4B,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,KAAK,CAAC,eAAe,GAAG,CAAC,CAAC,CAAC;gBAChG,IAAI,4BAA4B,CAAC,UAAU,KAAK,gBAAgB,CAAC,UAAU,EAAE;oBAC5E,2DAA2D;oBAC3D,gBAAgB,GAAG,4BAA4B,CAAC,cAAc,EAAE,CAAC;iBACjE;aACD;YAED,MAAM,WAAW,GAAG,eAAe,CAAC,OAAO,CAAC,UAAU,EAAE,gBAAgB,EAAE,eAAe,EAAE,cAAc,CAAC,CAAC;YAC3G,IAAI,CAAC,WAAW,EAAE;gBACjB,OAAO,IAAI,CAAC;aACZ;YAED,MAAM,YAAY,GAAG,WAAW,CAAC,YAAY,CAAC;YAC9C,IAAI,UAAU,GAAG,WAAW,CAAC,UAAU,CAAC;YACxC,MAAM,UAAU,GAAG,WAAW,CAAC,UAAU,IAAI,CAAC,CAAC;YAE/C,0HAA0H;YAC1H,IAAI,CAAC,UAAU,EAAE;gBAChB,IACC,CAAC,YAAY,KAAK,oCAAY,CAAC,MAAM,CAAC;oBACtC,CAAC,YAAY,KAAK,oCAAY,CAAC,aAAa,CAAC,EAC5C;oBACD,UAAU,GAAG,IAAI,CAAC;iBAClB;qBAAM;oBACN,UAAU,GAAG,EAAE,CAAC;iBAChB;aACD;iBAAM,IAAI,YAAY,KAAK,oCAAY,CAAC,MAAM,EAAE;gBAChD,UAAU,GAAG,IAAI,GAAG,UAAU,CAAC;aAC/B;YAED,IAAI,WAAW,GAAG,IAAI,CAAC,wBAAwB,CAAC,KAAK,EAAE,KAAK,CAAC,eAAe,EAAE,KAAK,CAAC,WAAW,CAAC,CAAC;YACjG,IAAI,UAAU,EAAE;gBACf,WAAW,GAAG,WAAW,CAAC,SAAS,CAAC,CAAC,EAAE,WAAW,CAAC,MAAM,GAAG,UAAU,CAAC,CAAC;aACxE;YAED,OAAO;gBACN,YAAY,EAAE,YAAY;gBAC1B,UAAU,EAAE,UAAU;gBACtB,UAAU,EAAE,UAAU;gBACtB,WAAW,EAAE,WAAW;aACxB,CAAC;QACH,CAAC;QAEM,wBAAwB,CAAC,KAAiB,EAAE,UAAkB,EAAE,MAAc;YACpF,MAAM,QAAQ,GAAG,KAAK,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;YAClD,IAAI,WAAW,GAAG,OAAO,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;YACzD,IAAI,WAAW,CAAC,MAAM,GAAG,MAAM,GAAG,CAAC,EAAE;gBACpC,WAAW,GAAG,WAAW,CAAC,SAAS,CAAC,CAAC,EAAE,MAAM,GAAG,CAAC,CAAC,CAAC;aACnD;YACD,OAAO,WAAW,CAAC;QACpB,CAAC;QAEO,mBAAmB,CAAC,KAAiB,EAAE,UAAkB,EAAE,YAAqB;YACvF,KAAK,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;YACpC,MAAM,UAAU,GAAG,KAAK,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;YACnD,MAAM,MAAM,GAAG,CAAC,OAAO,YAAY,KAAK,WAAW,CAAC,CAAC,CAAC,KAAK,CAAC,gBAAgB,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC;YACjH,OAAO,CAAA,GAAA,iCAAsB,CAAA,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;QACnD,CAAC;QAED,cAAc;QAEP,kBAAkB,CAAC,UAAsB;YAC/C,MAAM,KAAK,GAAG,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;YACnD,IAAI,CAAC,KAAK,EAAE;gBACX,OAAO,IAAI,CAAC;aACZ;YACD,OAAO,KAAK,CAAC,QAAQ,IAAI,IAAI,CAAC;QAC/B,CAAC;KACD;IA/mBD,8EA+mBC;IAEY,QAAA,6BAA6B,GAAG,IAAI,iCAAiC,EAAE,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport * as strings from 'vs/base/common/strings';\nimport { LineTokens } from 'vs/editor/common/core/lineTokens';\nimport { Range } from 'vs/editor/common/core/range';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { DEFAULT_WORD_REGEXP, ensureValidWordDefinition } from 'vs/editor/common/model/wordHelper';\nimport { LanguageId, LanguageIdentifier } from 'vs/editor/common/modes';\nimport { EnterAction, FoldingRules, IAutoClosingPair, IndentAction, IndentationRule, LanguageConfiguration, StandardAutoClosingPairConditional, CompleteEnterAction, AutoClosingPairs } from 'vs/editor/common/modes/languageConfiguration';\nimport { createScopedLineTokens, ScopedLineTokens } from 'vs/editor/common/modes/supports';\nimport { CharacterPairSupport } from 'vs/editor/common/modes/supports/characterPair';\nimport { BracketElectricCharacterSupport, IElectricAction } from 'vs/editor/common/modes/supports/electricCharacter';\nimport { IndentConsts, IndentRulesSupport } from 'vs/editor/common/modes/supports/indentRules';\nimport { OnEnterSupport } from 'vs/editor/common/modes/supports/onEnter';\nimport { RichEditBrackets } from 'vs/editor/common/modes/supports/richEditBrackets';\nimport { EditorAutoIndentStrategy } from 'vs/editor/common/config/editorOptions';\n\n/**\n * Interface used to support insertion of mode specific comments.\n */\nexport interface ICommentsConfiguration {\n\tlineCommentToken?: string;\n\tblockCommentStartToken?: string;\n\tblockCommentEndToken?: string;\n}\n\nexport interface IVirtualModel {\n\tgetLineTokens(lineNumber: number): LineTokens;\n\tgetLanguageIdentifier(): LanguageIdentifier;\n\tgetLanguageIdAtPosition(lineNumber: number, column: number): LanguageId;\n\tgetLineContent(lineNumber: number): string;\n}\n\nexport interface IIndentConverter {\n\tshiftIndent(indentation: string): string;\n\tunshiftIndent(indentation: string): string;\n\tnormalizeIndentation?(indentation: string): string;\n}\n\nexport class RichEditSupport {\n\n\tprivate readonly _conf: LanguageConfiguration;\n\tprivate readonly _languageIdentifier: LanguageIdentifier;\n\tprivate _brackets: RichEditBrackets | null;\n\tprivate _electricCharacter: BracketElectricCharacterSupport | null;\n\tprivate readonly _onEnterSupport: OnEnterSupport | null;\n\n\tpublic readonly comments: ICommentsConfiguration | null;\n\tpublic readonly characterPair: CharacterPairSupport;\n\tpublic readonly wordDefinition: RegExp;\n\tpublic readonly indentRulesSupport: IndentRulesSupport | null;\n\tpublic readonly indentationRules: IndentationRule | undefined;\n\tpublic readonly foldingRules: FoldingRules;\n\n\tconstructor(languageIdentifier: LanguageIdentifier, rawConf: LanguageConfiguration) {\n\t\tthis._languageIdentifier = languageIdentifier;\n\t\tthis._brackets = null;\n\t\tthis._electricCharacter = null;\n\t\tthis._conf = rawConf;\n\t\tthis._onEnterSupport = (this._conf.brackets || this._conf.indentationRules || this._conf.onEnterRules ? new OnEnterSupport(this._conf) : null);\n\t\tthis.comments = RichEditSupport._handleComments(this._conf);\n\t\tthis.characterPair = new CharacterPairSupport(this._conf);\n\t\tthis.wordDefinition = this._conf.wordPattern || DEFAULT_WORD_REGEXP;\n\t\tthis.indentationRules = this._conf.indentationRules;\n\t\tif (this._conf.indentationRules) {\n\t\t\tthis.indentRulesSupport = new IndentRulesSupport(this._conf.indentationRules);\n\t\t} else {\n\t\t\tthis.indentRulesSupport = null;\n\t\t}\n\t\tthis.foldingRules = this._conf.folding || {};\n\t}\n\n\tpublic get brackets(): RichEditBrackets | null {\n\t\tif (!this._brackets && this._conf.brackets) {\n\t\t\tthis._brackets = new RichEditBrackets(this._languageIdentifier, this._conf.brackets);\n\t\t}\n\t\treturn this._brackets;\n\t}\n\n\tpublic get electricCharacter(): BracketElectricCharacterSupport | null {\n\t\tif (!this._electricCharacter) {\n\t\t\tthis._electricCharacter = new BracketElectricCharacterSupport(this.brackets);\n\t\t}\n\t\treturn this._electricCharacter;\n\t}\n\n\tpublic onEnter(autoIndent: EditorAutoIndentStrategy, previousLineText: string, beforeEnterText: string, afterEnterText: string): EnterAction | null {\n\t\tif (!this._onEnterSupport) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this._onEnterSupport.onEnter(autoIndent, previousLineText, beforeEnterText, afterEnterText);\n\t}\n\n\tprivate static _handleComments(conf: LanguageConfiguration): ICommentsConfiguration | null {\n\t\tlet commentRule = conf.comments;\n\t\tif (!commentRule) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// comment configuration\n\t\tlet comments: ICommentsConfiguration = {};\n\n\t\tif (commentRule.lineComment) {\n\t\t\tcomments.lineCommentToken = commentRule.lineComment;\n\t\t}\n\t\tif (commentRule.blockComment) {\n\t\t\tlet [blockStart, blockEnd] = commentRule.blockComment;\n\t\t\tcomments.blockCommentStartToken = blockStart;\n\t\t\tcomments.blockCommentEndToken = blockEnd;\n\t\t}\n\n\t\treturn comments;\n\t}\n}\n\nexport class LanguageConfigurationChangeEvent {\n\tconstructor(\n\t\tpublic readonly languageIdentifier: LanguageIdentifier\n\t) { }\n}\n\nclass LanguageConfigurationEntry {\n\n\tconstructor(\n\t\tpublic readonly configuration: LanguageConfiguration,\n\t\tpublic readonly priority: number,\n\t\tpublic readonly order: number\n\t) { }\n\n\tpublic static cmp(a: LanguageConfigurationEntry, b: LanguageConfigurationEntry) {\n\t\tif (a.priority === b.priority) {\n\t\t\t// higher order last\n\t\t\treturn a.order - b.order;\n\t\t}\n\t\t// higher priority last\n\t\treturn a.priority - b.priority;\n\t}\n}\n\nclass LanguageConfigurationEntries {\n\n\tprivate readonly _entries: LanguageConfigurationEntry[];\n\tprivate _order: number;\n\tprivate _resolved: RichEditSupport | null = null;\n\n\tconstructor(\n\t\tpublic readonly languageIdentifier: LanguageIdentifier\n\t) {\n\t\tthis._entries = [];\n\t\tthis._order = 0;\n\t\tthis._resolved = null;\n\t}\n\n\tpublic register(configuration: LanguageConfiguration, priority: number): IDisposable {\n\t\tconst entry = new LanguageConfigurationEntry(configuration, priority, ++this._order);\n\t\tthis._entries.push(entry);\n\t\tthis._resolved = null;\n\t\treturn toDisposable(() => {\n\t\t\tfor (let i = 0; i < this._entries.length; i++) {\n\t\t\t\tif (this._entries[i] === entry) {\n\t\t\t\t\tthis._entries.splice(i, 1);\n\t\t\t\t\tthis._resolved = null;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic getRichEditSupport(): RichEditSupport | null {\n\t\tif (!this._resolved) {\n\t\t\tconst config = this._resolve();\n\t\t\tif (config) {\n\t\t\t\tthis._resolved = new RichEditSupport(this.languageIdentifier, config);\n\t\t\t}\n\t\t}\n\t\treturn this._resolved;\n\t}\n\n\tprivate _resolve(): LanguageConfiguration | null {\n\t\tif (this._entries.length === 0) {\n\t\t\treturn null;\n\t\t}\n\t\tthis._entries.sort(LanguageConfigurationEntry.cmp);\n\t\tconst result: LanguageConfiguration = {};\n\t\tfor (const entry of this._entries) {\n\t\t\tconst conf = entry.configuration;\n\t\t\tresult.comments = conf.comments || result.comments;\n\t\t\tresult.brackets = conf.brackets || result.brackets;\n\t\t\tresult.wordPattern = conf.wordPattern || result.wordPattern;\n\t\t\tresult.indentationRules = conf.indentationRules || result.indentationRules;\n\t\t\tresult.onEnterRules = conf.onEnterRules || result.onEnterRules;\n\t\t\tresult.autoClosingPairs = conf.autoClosingPairs || result.autoClosingPairs;\n\t\t\tresult.surroundingPairs = conf.surroundingPairs || result.surroundingPairs;\n\t\t\tresult.autoCloseBefore = conf.autoCloseBefore || result.autoCloseBefore;\n\t\t\tresult.folding = conf.folding || result.folding;\n\t\t\tresult.__electricCharacterSupport = conf.__electricCharacterSupport || result.__electricCharacterSupport;\n\t\t}\n\t\treturn result;\n\t}\n}\n\nexport class LanguageConfigurationRegistryImpl {\n\n\tprivate readonly _entries2 = new Map<LanguageId, LanguageConfigurationEntries>();\n\n\tprivate readonly _onDidChange = new Emitter<LanguageConfigurationChangeEvent>();\n\tpublic readonly onDidChange: Event<LanguageConfigurationChangeEvent> = this._onDidChange.event;\n\n\t/**\n\t * @param priority Use a higher number for higher priority\n\t */\n\tpublic register(languageIdentifier: LanguageIdentifier, configuration: LanguageConfiguration, priority: number = 0): IDisposable {\n\t\tlet entries = this._entries2.get(languageIdentifier.id);\n\t\tif (!entries) {\n\t\t\tentries = new LanguageConfigurationEntries(languageIdentifier);\n\t\t\tthis._entries2.set(languageIdentifier.id, entries);\n\t\t}\n\n\t\tconst disposable = entries.register(configuration, priority);\n\t\tthis._onDidChange.fire(new LanguageConfigurationChangeEvent(languageIdentifier));\n\n\t\treturn toDisposable(() => {\n\t\t\tdisposable.dispose();\n\t\t\tthis._onDidChange.fire(new LanguageConfigurationChangeEvent(languageIdentifier));\n\t\t});\n\t}\n\n\tprivate _getRichEditSupport(languageId: LanguageId): RichEditSupport | null {\n\t\tconst entries = this._entries2.get(languageId);\n\t\treturn entries ? entries.getRichEditSupport() : null;\n\t}\n\n\tpublic getIndentationRules(languageId: LanguageId): IndentationRule | null {\n\t\tconst value = this._getRichEditSupport(languageId);\n\t\treturn value ? value.indentationRules || null : null;\n\t}\n\n\t// begin electricCharacter\n\n\tprivate _getElectricCharacterSupport(languageId: LanguageId): BracketElectricCharacterSupport | null {\n\t\tlet value = this._getRichEditSupport(languageId);\n\t\tif (!value) {\n\t\t\treturn null;\n\t\t}\n\t\treturn value.electricCharacter || null;\n\t}\n\n\tpublic getElectricCharacters(languageId: LanguageId): string[] {\n\t\tlet electricCharacterSupport = this._getElectricCharacterSupport(languageId);\n\t\tif (!electricCharacterSupport) {\n\t\t\treturn [];\n\t\t}\n\t\treturn electricCharacterSupport.getElectricCharacters();\n\t}\n\n\t/**\n\t * Should return opening bracket type to match indentation with\n\t */\n\tpublic onElectricCharacter(character: string, context: LineTokens, column: number): IElectricAction | null {\n\t\tlet scopedLineTokens = createScopedLineTokens(context, column - 1);\n\t\tlet electricCharacterSupport = this._getElectricCharacterSupport(scopedLineTokens.languageId);\n\t\tif (!electricCharacterSupport) {\n\t\t\treturn null;\n\t\t}\n\t\treturn electricCharacterSupport.onElectricCharacter(character, scopedLineTokens, column - scopedLineTokens.firstCharOffset);\n\t}\n\n\t// end electricCharacter\n\n\tpublic getComments(languageId: LanguageId): ICommentsConfiguration | null {\n\t\tlet value = this._getRichEditSupport(languageId);\n\t\tif (!value) {\n\t\t\treturn null;\n\t\t}\n\t\treturn value.comments || null;\n\t}\n\n\t// begin characterPair\n\n\tprivate _getCharacterPairSupport(languageId: LanguageId): CharacterPairSupport | null {\n\t\tlet value = this._getRichEditSupport(languageId);\n\t\tif (!value) {\n\t\t\treturn null;\n\t\t}\n\t\treturn value.characterPair || null;\n\t}\n\n\tpublic getAutoClosingPairs(languageId: LanguageId): AutoClosingPairs {\n\t\tconst characterPairSupport = this._getCharacterPairSupport(languageId);\n\t\treturn new AutoClosingPairs(characterPairSupport ? characterPairSupport.getAutoClosingPairs() : []);\n\t}\n\n\tpublic getAutoCloseBeforeSet(languageId: LanguageId): string {\n\t\tlet characterPairSupport = this._getCharacterPairSupport(languageId);\n\t\tif (!characterPairSupport) {\n\t\t\treturn CharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED;\n\t\t}\n\t\treturn characterPairSupport.getAutoCloseBeforeSet();\n\t}\n\n\tpublic getSurroundingPairs(languageId: LanguageId): IAutoClosingPair[] {\n\t\tlet characterPairSupport = this._getCharacterPairSupport(languageId);\n\t\tif (!characterPairSupport) {\n\t\t\treturn [];\n\t\t}\n\t\treturn characterPairSupport.getSurroundingPairs();\n\t}\n\n\tpublic shouldAutoClosePair(autoClosingPair: StandardAutoClosingPairConditional, context: LineTokens, column: number): boolean {\n\t\tconst scopedLineTokens = createScopedLineTokens(context, column - 1);\n\t\treturn CharacterPairSupport.shouldAutoClosePair(autoClosingPair, scopedLineTokens, column - scopedLineTokens.firstCharOffset);\n\t}\n\n\t// end characterPair\n\n\tpublic getWordDefinition(languageId: LanguageId): RegExp {\n\t\tlet value = this._getRichEditSupport(languageId);\n\t\tif (!value) {\n\t\t\treturn ensureValidWordDefinition(null);\n\t\t}\n\t\treturn ensureValidWordDefinition(value.wordDefinition || null);\n\t}\n\n\tpublic getWordDefinitions(): [LanguageId, RegExp][] {\n\t\tlet result: [LanguageId, RegExp][] = [];\n\t\tfor (const [language, entries] of this._entries2) {\n\t\t\tconst value = entries.getRichEditSupport();\n\t\t\tif (value) {\n\t\t\t\tresult.push([language, value.wordDefinition]);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic getFoldingRules(languageId: LanguageId): FoldingRules {\n\t\tlet value = this._getRichEditSupport(languageId);\n\t\tif (!value) {\n\t\t\treturn {};\n\t\t}\n\t\treturn value.foldingRules;\n\t}\n\n\t// begin Indent Rules\n\n\tpublic getIndentRulesSupport(languageId: LanguageId): IndentRulesSupport | null {\n\t\tlet value = this._getRichEditSupport(languageId);\n\t\tif (!value) {\n\t\t\treturn null;\n\t\t}\n\t\treturn value.indentRulesSupport || null;\n\t}\n\n\t/**\n\t * Get nearest preceiding line which doesn't match unIndentPattern or contains all whitespace.\n\t * Result:\n\t * -1: run into the boundary of embedded languages\n\t * 0: every line above are invalid\n\t * else: nearest preceding line of the same language\n\t */\n\tprivate getPrecedingValidLine(model: IVirtualModel, lineNumber: number, indentRulesSupport: IndentRulesSupport) {\n\t\tlet languageID = model.getLanguageIdAtPosition(lineNumber, 0);\n\t\tif (lineNumber > 1) {\n\t\t\tlet lastLineNumber: number;\n\t\t\tlet resultLineNumber = -1;\n\n\t\t\tfor (lastLineNumber = lineNumber - 1; lastLineNumber >= 1; lastLineNumber--) {\n\t\t\t\tif (model.getLanguageIdAtPosition(lastLineNumber, 0) !== languageID) {\n\t\t\t\t\treturn resultLineNumber;\n\t\t\t\t}\n\t\t\t\tlet text = model.getLineContent(lastLineNumber);\n\t\t\t\tif (indentRulesSupport.shouldIgnore(text) || /^\\s+$/.test(text) || text === '') {\n\t\t\t\t\tresultLineNumber = lastLineNumber;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\treturn lastLineNumber;\n\t\t\t}\n\t\t}\n\n\t\treturn -1;\n\t}\n\n\t/**\n\t * Get inherited indentation from above lines.\n\t * 1. Find the nearest preceding line which doesn't match unIndentedLinePattern.\n\t * 2. If this line matches indentNextLinePattern or increaseIndentPattern, it means that the indent level of `lineNumber` should be 1 greater than this line.\n\t * 3. If this line doesn't match any indent rules\n\t *   a. check whether the line above it matches indentNextLinePattern\n\t *   b. If not, the indent level of this line is the result\n\t *   c. If so, it means the indent of this line is *temporary*, go upward utill we find a line whose indent is not temporary (the same workflow a -> b -> c).\n\t * 4. Otherwise, we fail to get an inherited indent from aboves. Return null and we should not touch the indent of `lineNumber`\n\t *\n\t * This function only return the inherited indent based on above lines, it doesn't check whether current line should decrease or not.\n\t */\n\tpublic getInheritIndentForLine(autoIndent: EditorAutoIndentStrategy, model: IVirtualModel, lineNumber: number, honorIntentialIndent: boolean = true): { indentation: string; action: IndentAction | null; line?: number; } | null {\n\t\tif (autoIndent < EditorAutoIndentStrategy.Full) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst indentRulesSupport = this.getIndentRulesSupport(model.getLanguageIdentifier().id);\n\t\tif (!indentRulesSupport) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (lineNumber <= 1) {\n\t\t\treturn {\n\t\t\t\tindentation: '',\n\t\t\t\taction: null\n\t\t\t};\n\t\t}\n\n\t\tconst precedingUnIgnoredLine = this.getPrecedingValidLine(model, lineNumber, indentRulesSupport);\n\t\tif (precedingUnIgnoredLine < 0) {\n\t\t\treturn null;\n\t\t} else if (precedingUnIgnoredLine < 1) {\n\t\t\treturn {\n\t\t\t\tindentation: '',\n\t\t\t\taction: null\n\t\t\t};\n\t\t}\n\n\t\tconst precedingUnIgnoredLineContent = model.getLineContent(precedingUnIgnoredLine);\n\t\tif (indentRulesSupport.shouldIncrease(precedingUnIgnoredLineContent) || indentRulesSupport.shouldIndentNextLine(precedingUnIgnoredLineContent)) {\n\t\t\treturn {\n\t\t\t\tindentation: strings.getLeadingWhitespace(precedingUnIgnoredLineContent),\n\t\t\t\taction: IndentAction.Indent,\n\t\t\t\tline: precedingUnIgnoredLine\n\t\t\t};\n\t\t} else if (indentRulesSupport.shouldDecrease(precedingUnIgnoredLineContent)) {\n\t\t\treturn {\n\t\t\t\tindentation: strings.getLeadingWhitespace(precedingUnIgnoredLineContent),\n\t\t\t\taction: null,\n\t\t\t\tline: precedingUnIgnoredLine\n\t\t\t};\n\t\t} else {\n\t\t\t// precedingUnIgnoredLine can not be ignored.\n\t\t\t// it doesn't increase indent of following lines\n\t\t\t// it doesn't increase just next line\n\t\t\t// so current line is not affect by precedingUnIgnoredLine\n\t\t\t// and then we should get a correct inheritted indentation from above lines\n\t\t\tif (precedingUnIgnoredLine === 1) {\n\t\t\t\treturn {\n\t\t\t\t\tindentation: strings.getLeadingWhitespace(model.getLineContent(precedingUnIgnoredLine)),\n\t\t\t\t\taction: null,\n\t\t\t\t\tline: precedingUnIgnoredLine\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconst previousLine = precedingUnIgnoredLine - 1;\n\n\t\t\tconst previousLineIndentMetadata = indentRulesSupport.getIndentMetadata(model.getLineContent(previousLine));\n\t\t\tif (!(previousLineIndentMetadata & (IndentConsts.INCREASE_MASK | IndentConsts.DECREASE_MASK)) &&\n\t\t\t\t(previousLineIndentMetadata & IndentConsts.INDENT_NEXTLINE_MASK)) {\n\t\t\t\tlet stopLine = 0;\n\t\t\t\tfor (let i = previousLine - 1; i > 0; i--) {\n\t\t\t\t\tif (indentRulesSupport.shouldIndentNextLine(model.getLineContent(i))) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tstopLine = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tindentation: strings.getLeadingWhitespace(model.getLineContent(stopLine + 1)),\n\t\t\t\t\taction: null,\n\t\t\t\t\tline: stopLine + 1\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (honorIntentialIndent) {\n\t\t\t\treturn {\n\t\t\t\t\tindentation: strings.getLeadingWhitespace(model.getLineContent(precedingUnIgnoredLine)),\n\t\t\t\t\taction: null,\n\t\t\t\t\tline: precedingUnIgnoredLine\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\t// search from precedingUnIgnoredLine until we find one whose indent is not temporary\n\t\t\t\tfor (let i = precedingUnIgnoredLine; i > 0; i--) {\n\t\t\t\t\tconst lineContent = model.getLineContent(i);\n\t\t\t\t\tif (indentRulesSupport.shouldIncrease(lineContent)) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tindentation: strings.getLeadingWhitespace(lineContent),\n\t\t\t\t\t\t\taction: IndentAction.Indent,\n\t\t\t\t\t\t\tline: i\n\t\t\t\t\t\t};\n\t\t\t\t\t} else if (indentRulesSupport.shouldIndentNextLine(lineContent)) {\n\t\t\t\t\t\tlet stopLine = 0;\n\t\t\t\t\t\tfor (let j = i - 1; j > 0; j--) {\n\t\t\t\t\t\t\tif (indentRulesSupport.shouldIndentNextLine(model.getLineContent(i))) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstopLine = j;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tindentation: strings.getLeadingWhitespace(model.getLineContent(stopLine + 1)),\n\t\t\t\t\t\t\taction: null,\n\t\t\t\t\t\t\tline: stopLine + 1\n\t\t\t\t\t\t};\n\t\t\t\t\t} else if (indentRulesSupport.shouldDecrease(lineContent)) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tindentation: strings.getLeadingWhitespace(lineContent),\n\t\t\t\t\t\t\taction: null,\n\t\t\t\t\t\t\tline: i\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tindentation: strings.getLeadingWhitespace(model.getLineContent(1)),\n\t\t\t\t\taction: null,\n\t\t\t\t\tline: 1\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic getGoodIndentForLine(autoIndent: EditorAutoIndentStrategy, virtualModel: IVirtualModel, languageId: LanguageId, lineNumber: number, indentConverter: IIndentConverter): string | null {\n\t\tif (autoIndent < EditorAutoIndentStrategy.Full) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst richEditSupport = this._getRichEditSupport(languageId);\n\t\tif (!richEditSupport) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst indentRulesSupport = this.getIndentRulesSupport(languageId);\n\t\tif (!indentRulesSupport) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst indent = this.getInheritIndentForLine(autoIndent, virtualModel, lineNumber);\n\t\tconst lineContent = virtualModel.getLineContent(lineNumber);\n\n\t\tif (indent) {\n\t\t\tconst inheritLine = indent.line;\n\t\t\tif (inheritLine !== undefined) {\n\t\t\t\tconst enterResult = richEditSupport.onEnter(autoIndent, '', virtualModel.getLineContent(inheritLine), '');\n\n\t\t\t\tif (enterResult) {\n\t\t\t\t\tlet indentation = strings.getLeadingWhitespace(virtualModel.getLineContent(inheritLine));\n\n\t\t\t\t\tif (enterResult.removeText) {\n\t\t\t\t\t\tindentation = indentation.substring(0, indentation.length - enterResult.removeText);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\n\t\t\t\t\t\t(enterResult.indentAction === IndentAction.Indent) ||\n\t\t\t\t\t\t(enterResult.indentAction === IndentAction.IndentOutdent)\n\t\t\t\t\t) {\n\t\t\t\t\t\tindentation = indentConverter.shiftIndent(indentation);\n\t\t\t\t\t} else if (enterResult.indentAction === IndentAction.Outdent) {\n\t\t\t\t\t\tindentation = indentConverter.unshiftIndent(indentation);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (indentRulesSupport.shouldDecrease(lineContent)) {\n\t\t\t\t\t\tindentation = indentConverter.unshiftIndent(indentation);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (enterResult.appendText) {\n\t\t\t\t\t\tindentation += enterResult.appendText;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn strings.getLeadingWhitespace(indentation);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (indentRulesSupport.shouldDecrease(lineContent)) {\n\t\t\t\tif (indent.action === IndentAction.Indent) {\n\t\t\t\t\treturn indent.indentation;\n\t\t\t\t} else {\n\t\t\t\t\treturn indentConverter.unshiftIndent(indent.indentation);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (indent.action === IndentAction.Indent) {\n\t\t\t\t\treturn indentConverter.shiftIndent(indent.indentation);\n\t\t\t\t} else {\n\t\t\t\t\treturn indent.indentation;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic getIndentForEnter(autoIndent: EditorAutoIndentStrategy, model: ITextModel, range: Range, indentConverter: IIndentConverter): { beforeEnter: string, afterEnter: string } | null {\n\t\tif (autoIndent < EditorAutoIndentStrategy.Full) {\n\t\t\treturn null;\n\t\t}\n\t\tmodel.forceTokenization(range.startLineNumber);\n\t\tconst lineTokens = model.getLineTokens(range.startLineNumber);\n\t\tconst scopedLineTokens = createScopedLineTokens(lineTokens, range.startColumn - 1);\n\t\tconst scopedLineText = scopedLineTokens.getLineContent();\n\n\t\tlet embeddedLanguage = false;\n\t\tlet beforeEnterText: string;\n\t\tif (scopedLineTokens.firstCharOffset > 0 && lineTokens.getLanguageId(0) !== scopedLineTokens.languageId) {\n\t\t\t// we are in the embeded language content\n\t\t\tembeddedLanguage = true; // if embeddedLanguage is true, then we don't touch the indentation of current line\n\t\t\tbeforeEnterText = scopedLineText.substr(0, range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n\t\t} else {\n\t\t\tbeforeEnterText = lineTokens.getLineContent().substring(0, range.startColumn - 1);\n\t\t}\n\n\t\tlet afterEnterText: string;\n\t\tif (range.isEmpty()) {\n\t\t\tafterEnterText = scopedLineText.substr(range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n\t\t} else {\n\t\t\tconst endScopedLineTokens = this.getScopedLineTokens(model, range.endLineNumber, range.endColumn);\n\t\t\tafterEnterText = endScopedLineTokens.getLineContent().substr(range.endColumn - 1 - scopedLineTokens.firstCharOffset);\n\t\t}\n\n\t\tconst indentRulesSupport = this.getIndentRulesSupport(scopedLineTokens.languageId);\n\t\tif (!indentRulesSupport) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst beforeEnterResult = beforeEnterText;\n\t\tconst beforeEnterIndent = strings.getLeadingWhitespace(beforeEnterText);\n\n\t\tconst virtualModel: IVirtualModel = {\n\t\t\tgetLineTokens: (lineNumber: number) => {\n\t\t\t\treturn model.getLineTokens(lineNumber);\n\t\t\t},\n\t\t\tgetLanguageIdentifier: () => {\n\t\t\t\treturn model.getLanguageIdentifier();\n\t\t\t},\n\t\t\tgetLanguageIdAtPosition: (lineNumber: number, column: number) => {\n\t\t\t\treturn model.getLanguageIdAtPosition(lineNumber, column);\n\t\t\t},\n\t\t\tgetLineContent: (lineNumber: number) => {\n\t\t\t\tif (lineNumber === range.startLineNumber) {\n\t\t\t\t\treturn beforeEnterResult;\n\t\t\t\t} else {\n\t\t\t\t\treturn model.getLineContent(lineNumber);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tconst currentLineIndent = strings.getLeadingWhitespace(lineTokens.getLineContent());\n\t\tconst afterEnterAction = this.getInheritIndentForLine(autoIndent, virtualModel, range.startLineNumber + 1);\n\t\tif (!afterEnterAction) {\n\t\t\tconst beforeEnter = embeddedLanguage ? currentLineIndent : beforeEnterIndent;\n\t\t\treturn {\n\t\t\t\tbeforeEnter: beforeEnter,\n\t\t\t\tafterEnter: beforeEnter\n\t\t\t};\n\t\t}\n\n\t\tlet afterEnterIndent = embeddedLanguage ? currentLineIndent : afterEnterAction.indentation;\n\n\t\tif (afterEnterAction.action === IndentAction.Indent) {\n\t\t\tafterEnterIndent = indentConverter.shiftIndent(afterEnterIndent);\n\t\t}\n\n\t\tif (indentRulesSupport.shouldDecrease(afterEnterText)) {\n\t\t\tafterEnterIndent = indentConverter.unshiftIndent(afterEnterIndent);\n\t\t}\n\n\t\treturn {\n\t\t\tbeforeEnter: embeddedLanguage ? currentLineIndent : beforeEnterIndent,\n\t\t\tafterEnter: afterEnterIndent\n\t\t};\n\t}\n\n\t/**\n\t * We should always allow intentional indentation. It means, if users change the indentation of `lineNumber` and the content of\n\t * this line doesn't match decreaseIndentPattern, we should not adjust the indentation.\n\t */\n\tpublic getIndentActionForType(autoIndent: EditorAutoIndentStrategy, model: ITextModel, range: Range, ch: string, indentConverter: IIndentConverter): string | null {\n\t\tif (autoIndent < EditorAutoIndentStrategy.Full) {\n\t\t\treturn null;\n\t\t}\n\t\tconst scopedLineTokens = this.getScopedLineTokens(model, range.startLineNumber, range.startColumn);\n\n\t\tif (scopedLineTokens.firstCharOffset) {\n\t\t\t// this line has mixed languages and indentation rules will not work\n\t\t\treturn null;\n\t\t}\n\n\t\tconst indentRulesSupport = this.getIndentRulesSupport(scopedLineTokens.languageId);\n\t\tif (!indentRulesSupport) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst scopedLineText = scopedLineTokens.getLineContent();\n\t\tconst beforeTypeText = scopedLineText.substr(0, range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n\n\t\t// selection support\n\t\tlet afterTypeText: string;\n\t\tif (range.isEmpty()) {\n\t\t\tafterTypeText = scopedLineText.substr(range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n\t\t} else {\n\t\t\tconst endScopedLineTokens = this.getScopedLineTokens(model, range.endLineNumber, range.endColumn);\n\t\t\tafterTypeText = endScopedLineTokens.getLineContent().substr(range.endColumn - 1 - scopedLineTokens.firstCharOffset);\n\t\t}\n\n\t\t// If previous content already matches decreaseIndentPattern, it means indentation of this line should already be adjusted\n\t\t// Users might change the indentation by purpose and we should honor that instead of readjusting.\n\t\tif (!indentRulesSupport.shouldDecrease(beforeTypeText + afterTypeText) && indentRulesSupport.shouldDecrease(beforeTypeText + ch + afterTypeText)) {\n\t\t\t// after typing `ch`, the content matches decreaseIndentPattern, we should adjust the indent to a good manner.\n\t\t\t// 1. Get inherited indent action\n\t\t\tconst r = this.getInheritIndentForLine(autoIndent, model, range.startLineNumber, false);\n\t\t\tif (!r) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tlet indentation = r.indentation;\n\t\t\tif (r.action !== IndentAction.Indent) {\n\t\t\t\tindentation = indentConverter.unshiftIndent(indentation);\n\t\t\t}\n\n\t\t\treturn indentation;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic getIndentMetadata(model: ITextModel, lineNumber: number): number | null {\n\t\tconst indentRulesSupport = this.getIndentRulesSupport(model.getLanguageIdentifier().id);\n\t\tif (!indentRulesSupport) {\n\t\t\treturn null;\n\t\t}\n\t\tif (lineNumber < 1 || lineNumber > model.getLineCount()) {\n\t\t\treturn null;\n\t\t}\n\t\treturn indentRulesSupport.getIndentMetadata(model.getLineContent(lineNumber));\n\t}\n\n\t// end Indent Rules\n\n\t// begin onEnter\n\n\tpublic getEnterAction(autoIndent: EditorAutoIndentStrategy, model: ITextModel, range: Range): CompleteEnterAction | null {\n\t\tconst scopedLineTokens = this.getScopedLineTokens(model, range.startLineNumber, range.startColumn);\n\t\tconst richEditSupport = this._getRichEditSupport(scopedLineTokens.languageId);\n\t\tif (!richEditSupport) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst scopedLineText = scopedLineTokens.getLineContent();\n\t\tconst beforeEnterText = scopedLineText.substr(0, range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n\n\t\t// selection support\n\t\tlet afterEnterText: string;\n\t\tif (range.isEmpty()) {\n\t\t\tafterEnterText = scopedLineText.substr(range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n\t\t} else {\n\t\t\tconst endScopedLineTokens = this.getScopedLineTokens(model, range.endLineNumber, range.endColumn);\n\t\t\tafterEnterText = endScopedLineTokens.getLineContent().substr(range.endColumn - 1 - scopedLineTokens.firstCharOffset);\n\t\t}\n\n\t\tlet previousLineText = '';\n\t\tif (range.startLineNumber > 1 && scopedLineTokens.firstCharOffset === 0) {\n\t\t\t// This is not the first line and the entire line belongs to this mode\n\t\t\tconst oneLineAboveScopedLineTokens = this.getScopedLineTokens(model, range.startLineNumber - 1);\n\t\t\tif (oneLineAboveScopedLineTokens.languageId === scopedLineTokens.languageId) {\n\t\t\t\t// The line above ends with text belonging to the same mode\n\t\t\t\tpreviousLineText = oneLineAboveScopedLineTokens.getLineContent();\n\t\t\t}\n\t\t}\n\n\t\tconst enterResult = richEditSupport.onEnter(autoIndent, previousLineText, beforeEnterText, afterEnterText);\n\t\tif (!enterResult) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst indentAction = enterResult.indentAction;\n\t\tlet appendText = enterResult.appendText;\n\t\tconst removeText = enterResult.removeText || 0;\n\n\t\t// Here we add `\\t` to appendText first because enterAction is leveraging appendText and removeText to change indentation.\n\t\tif (!appendText) {\n\t\t\tif (\n\t\t\t\t(indentAction === IndentAction.Indent) ||\n\t\t\t\t(indentAction === IndentAction.IndentOutdent)\n\t\t\t) {\n\t\t\t\tappendText = '\\t';\n\t\t\t} else {\n\t\t\t\tappendText = '';\n\t\t\t}\n\t\t} else if (indentAction === IndentAction.Indent) {\n\t\t\tappendText = '\\t' + appendText;\n\t\t}\n\n\t\tlet indentation = this.getIndentationAtPosition(model, range.startLineNumber, range.startColumn);\n\t\tif (removeText) {\n\t\t\tindentation = indentation.substring(0, indentation.length - removeText);\n\t\t}\n\n\t\treturn {\n\t\t\tindentAction: indentAction,\n\t\t\tappendText: appendText,\n\t\t\tremoveText: removeText,\n\t\t\tindentation: indentation\n\t\t};\n\t}\n\n\tpublic getIndentationAtPosition(model: ITextModel, lineNumber: number, column: number): string {\n\t\tconst lineText = model.getLineContent(lineNumber);\n\t\tlet indentation = strings.getLeadingWhitespace(lineText);\n\t\tif (indentation.length > column - 1) {\n\t\t\tindentation = indentation.substring(0, column - 1);\n\t\t}\n\t\treturn indentation;\n\t}\n\n\tprivate getScopedLineTokens(model: ITextModel, lineNumber: number, columnNumber?: number): ScopedLineTokens {\n\t\tmodel.forceTokenization(lineNumber);\n\t\tconst lineTokens = model.getLineTokens(lineNumber);\n\t\tconst column = (typeof columnNumber === 'undefined' ? model.getLineMaxColumn(lineNumber) - 1 : columnNumber - 1);\n\t\treturn createScopedLineTokens(lineTokens, column);\n\t}\n\n\t// end onEnter\n\n\tpublic getBracketsSupport(languageId: LanguageId): RichEditBrackets | null {\n\t\tconst value = this._getRichEditSupport(languageId);\n\t\tif (!value) {\n\t\t\treturn null;\n\t\t}\n\t\treturn value.brackets || null;\n\t}\n}\n\nexport const LanguageConfigurationRegistry = new LanguageConfigurationRegistryImpl();\n"]}