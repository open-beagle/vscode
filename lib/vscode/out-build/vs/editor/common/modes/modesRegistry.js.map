{"version":3,"sources":["vs/editor/common/modes/modesRegistry.ts"],"names":[],"mappings":"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","file":"modesRegistry.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { LanguageId, LanguageIdentifier } from 'vs/editor/common/modes';\nimport { LanguageConfigurationRegistry } from 'vs/editor/common/modes/languageConfigurationRegistry';\nimport { ILanguageExtensionPoint } from 'vs/editor/common/services/modeService';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IDisposable } from 'vs/base/common/lifecycle';\n\n// Define extension point ids\nexport const Extensions = {\n\tModesRegistry: 'editor.modesRegistry'\n};\n\nexport class EditorModesRegistry {\n\n\tprivate readonly _languages: ILanguageExtensionPoint[];\n\tprivate _dynamicLanguages: ILanguageExtensionPoint[];\n\n\tprivate readonly _onDidChangeLanguages = new Emitter<void>();\n\tpublic readonly onDidChangeLanguages: Event<void> = this._onDidChangeLanguages.event;\n\n\tconstructor() {\n\t\tthis._languages = [];\n\t\tthis._dynamicLanguages = [];\n\t}\n\n\t// --- languages\n\n\tpublic registerLanguage(def: ILanguageExtensionPoint): IDisposable {\n\t\tthis._languages.push(def);\n\t\tthis._onDidChangeLanguages.fire(undefined);\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tfor (let i = 0, len = this._languages.length; i < len; i++) {\n\t\t\t\t\tif (this._languages[i] === def) {\n\t\t\t\t\t\tthis._languages.splice(i, 1);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\tpublic setDynamicLanguages(def: ILanguageExtensionPoint[]): void {\n\t\tthis._dynamicLanguages = def;\n\t\tthis._onDidChangeLanguages.fire(undefined);\n\t}\n\tpublic getLanguages(): ILanguageExtensionPoint[] {\n\t\treturn (<ILanguageExtensionPoint[]>[]).concat(this._languages).concat(this._dynamicLanguages);\n\t}\n}\n\nexport const ModesRegistry = new EditorModesRegistry();\nRegistry.add(Extensions.ModesRegistry, ModesRegistry);\n\nexport const PLAINTEXT_MODE_ID = 'plaintext';\nexport const PLAINTEXT_EXTENSION = '.txt';\nexport const PLAINTEXT_LANGUAGE_IDENTIFIER = new LanguageIdentifier(PLAINTEXT_MODE_ID, LanguageId.PlainText);\n\nModesRegistry.registerLanguage({\n\tid: PLAINTEXT_MODE_ID,\n\textensions: [PLAINTEXT_EXTENSION],\n\taliases: [nls.localize('plainText.alias', \"Plain Text\"), 'text'],\n\tmimetypes: ['text/plain']\n});\nLanguageConfigurationRegistry.register(PLAINTEXT_LANGUAGE_IDENTIFIER, {\n\tbrackets: [\n\t\t['(', ')'],\n\t\t['[', ']'],\n\t\t['{', '}'],\n\t],\n\tsurroundingPairs: [\n\t\t{ open: '{', close: '}' },\n\t\t{ open: '[', close: ']' },\n\t\t{ open: '(', close: ')' },\n\t\t{ open: '<', close: '>' },\n\t\t{ open: '\\\"', close: '\\\"' },\n\t\t{ open: '\\'', close: '\\'' },\n\t\t{ open: '`', close: '`' },\n\t],\n\tfolding: {\n\t\toffSide: true\n\t}\n}, 0);\n"]}