{"version":3,"file":"linkComputer.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/common/modes/linkComputer.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from 'vs/base/common/charCode';\nimport { CharacterClassifier } from 'vs/editor/common/core/characterClassifier';\nimport { ILink } from 'vs/editor/common/modes';\n\nexport interface ILinkComputerTarget {\n\tgetLineCount(): number;\n\tgetLineContent(lineNumber: number): string;\n}\n\nexport const enum State {\n\tInvalid = 0,\n\tStart = 1,\n\tH = 2,\n\tHT = 3,\n\tHTT = 4,\n\tHTTP = 5,\n\tF = 6,\n\tFI = 7,\n\tFIL = 8,\n\tBeforeColon = 9,\n\tAfterColon = 10,\n\tAlmostThere = 11,\n\tEnd = 12,\n\tAccept = 13,\n\tLastKnownState = 14 // marker, custom states may follow\n}\n\nexport type Edge = [State, number, State];\n\nexport class Uint8Matrix {\n\n\tprivate readonly _data: Uint8Array;\n\tpublic readonly rows: number;\n\tpublic readonly cols: number;\n\n\tconstructor(rows: number, cols: number, defaultValue: number) {\n\t\tconst data = new Uint8Array(rows * cols);\n\t\tfor (let i = 0, len = rows * cols; i < len; i++) {\n\t\t\tdata[i] = defaultValue;\n\t\t}\n\n\t\tthis._data = data;\n\t\tthis.rows = rows;\n\t\tthis.cols = cols;\n\t}\n\n\tpublic get(row: number, col: number): number {\n\t\treturn this._data[row * this.cols + col];\n\t}\n\n\tpublic set(row: number, col: number, value: number): void {\n\t\tthis._data[row * this.cols + col] = value;\n\t}\n}\n\nexport class StateMachine {\n\n\tprivate readonly _states: Uint8Matrix;\n\tprivate readonly _maxCharCode: number;\n\n\tconstructor(edges: Edge[]) {\n\t\tlet maxCharCode = 0;\n\t\tlet maxState = State.Invalid;\n\t\tfor (let i = 0, len = edges.length; i < len; i++) {\n\t\t\tlet [from, chCode, to] = edges[i];\n\t\t\tif (chCode > maxCharCode) {\n\t\t\t\tmaxCharCode = chCode;\n\t\t\t}\n\t\t\tif (from > maxState) {\n\t\t\t\tmaxState = from;\n\t\t\t}\n\t\t\tif (to > maxState) {\n\t\t\t\tmaxState = to;\n\t\t\t}\n\t\t}\n\n\t\tmaxCharCode++;\n\t\tmaxState++;\n\n\t\tlet states = new Uint8Matrix(maxState, maxCharCode, State.Invalid);\n\t\tfor (let i = 0, len = edges.length; i < len; i++) {\n\t\t\tlet [from, chCode, to] = edges[i];\n\t\t\tstates.set(from, chCode, to);\n\t\t}\n\n\t\tthis._states = states;\n\t\tthis._maxCharCode = maxCharCode;\n\t}\n\n\tpublic nextState(currentState: State, chCode: number): State {\n\t\tif (chCode < 0 || chCode >= this._maxCharCode) {\n\t\t\treturn State.Invalid;\n\t\t}\n\t\treturn this._states.get(currentState, chCode);\n\t}\n}\n\n// State machine for http:// or https:// or file://\nlet _stateMachine: StateMachine | null = null;\nfunction getStateMachine(): StateMachine {\n\tif (_stateMachine === null) {\n\t\t_stateMachine = new StateMachine([\n\t\t\t[State.Start, CharCode.h, State.H],\n\t\t\t[State.Start, CharCode.H, State.H],\n\t\t\t[State.Start, CharCode.f, State.F],\n\t\t\t[State.Start, CharCode.F, State.F],\n\n\t\t\t[State.H, CharCode.t, State.HT],\n\t\t\t[State.H, CharCode.T, State.HT],\n\n\t\t\t[State.HT, CharCode.t, State.HTT],\n\t\t\t[State.HT, CharCode.T, State.HTT],\n\n\t\t\t[State.HTT, CharCode.p, State.HTTP],\n\t\t\t[State.HTT, CharCode.P, State.HTTP],\n\n\t\t\t[State.HTTP, CharCode.s, State.BeforeColon],\n\t\t\t[State.HTTP, CharCode.S, State.BeforeColon],\n\t\t\t[State.HTTP, CharCode.Colon, State.AfterColon],\n\n\t\t\t[State.F, CharCode.i, State.FI],\n\t\t\t[State.F, CharCode.I, State.FI],\n\n\t\t\t[State.FI, CharCode.l, State.FIL],\n\t\t\t[State.FI, CharCode.L, State.FIL],\n\n\t\t\t[State.FIL, CharCode.e, State.BeforeColon],\n\t\t\t[State.FIL, CharCode.E, State.BeforeColon],\n\n\t\t\t[State.BeforeColon, CharCode.Colon, State.AfterColon],\n\n\t\t\t[State.AfterColon, CharCode.Slash, State.AlmostThere],\n\n\t\t\t[State.AlmostThere, CharCode.Slash, State.End],\n\t\t]);\n\t}\n\treturn _stateMachine;\n}\n\n\nconst enum CharacterClass {\n\tNone = 0,\n\tForceTermination = 1,\n\tCannotEndIn = 2\n}\n\nlet _classifier: CharacterClassifier<CharacterClass> | null = null;\nfunction getClassifier(): CharacterClassifier<CharacterClass> {\n\tif (_classifier === null) {\n\t\t_classifier = new CharacterClassifier<CharacterClass>(CharacterClass.None);\n\n\t\tconst FORCE_TERMINATION_CHARACTERS = ' \\t<>\\'\\\"、。｡､，．：；‘“〈《「『【〔（［｛｢｣｝］）〕】』」》〉”’｀～…';\n\t\tfor (let i = 0; i < FORCE_TERMINATION_CHARACTERS.length; i++) {\n\t\t\t_classifier.set(FORCE_TERMINATION_CHARACTERS.charCodeAt(i), CharacterClass.ForceTermination);\n\t\t}\n\n\t\tconst CANNOT_END_WITH_CHARACTERS = '.,;';\n\t\tfor (let i = 0; i < CANNOT_END_WITH_CHARACTERS.length; i++) {\n\t\t\t_classifier.set(CANNOT_END_WITH_CHARACTERS.charCodeAt(i), CharacterClass.CannotEndIn);\n\t\t}\n\t}\n\treturn _classifier;\n}\n\nexport class LinkComputer {\n\n\tprivate static _createLink(classifier: CharacterClassifier<CharacterClass>, line: string, lineNumber: number, linkBeginIndex: number, linkEndIndex: number): ILink {\n\t\t// Do not allow to end link in certain characters...\n\t\tlet lastIncludedCharIndex = linkEndIndex - 1;\n\t\tdo {\n\t\t\tconst chCode = line.charCodeAt(lastIncludedCharIndex);\n\t\t\tconst chClass = classifier.get(chCode);\n\t\t\tif (chClass !== CharacterClass.CannotEndIn) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlastIncludedCharIndex--;\n\t\t} while (lastIncludedCharIndex > linkBeginIndex);\n\n\t\t// Handle links enclosed in parens, square brackets and curlys.\n\t\tif (linkBeginIndex > 0) {\n\t\t\tconst charCodeBeforeLink = line.charCodeAt(linkBeginIndex - 1);\n\t\t\tconst lastCharCodeInLink = line.charCodeAt(lastIncludedCharIndex);\n\n\t\t\tif (\n\t\t\t\t(charCodeBeforeLink === CharCode.OpenParen && lastCharCodeInLink === CharCode.CloseParen)\n\t\t\t\t|| (charCodeBeforeLink === CharCode.OpenSquareBracket && lastCharCodeInLink === CharCode.CloseSquareBracket)\n\t\t\t\t|| (charCodeBeforeLink === CharCode.OpenCurlyBrace && lastCharCodeInLink === CharCode.CloseCurlyBrace)\n\t\t\t) {\n\t\t\t\t// Do not end in ) if ( is before the link start\n\t\t\t\t// Do not end in ] if [ is before the link start\n\t\t\t\t// Do not end in } if { is before the link start\n\t\t\t\tlastIncludedCharIndex--;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\trange: {\n\t\t\t\tstartLineNumber: lineNumber,\n\t\t\t\tstartColumn: linkBeginIndex + 1,\n\t\t\t\tendLineNumber: lineNumber,\n\t\t\t\tendColumn: lastIncludedCharIndex + 2\n\t\t\t},\n\t\t\turl: line.substring(linkBeginIndex, lastIncludedCharIndex + 1)\n\t\t};\n\t}\n\n\tpublic static computeLinks(model: ILinkComputerTarget, stateMachine: StateMachine = getStateMachine()): ILink[] {\n\t\tconst classifier = getClassifier();\n\n\t\tlet result: ILink[] = [];\n\t\tfor (let i = 1, lineCount = model.getLineCount(); i <= lineCount; i++) {\n\t\t\tconst line = model.getLineContent(i);\n\t\t\tconst len = line.length;\n\n\t\t\tlet j = 0;\n\t\t\tlet linkBeginIndex = 0;\n\t\t\tlet linkBeginChCode = 0;\n\t\t\tlet state = State.Start;\n\t\t\tlet hasOpenParens = false;\n\t\t\tlet hasOpenSquareBracket = false;\n\t\t\tlet inSquareBrackets = false;\n\t\t\tlet hasOpenCurlyBracket = false;\n\n\t\t\twhile (j < len) {\n\n\t\t\t\tlet resetStateMachine = false;\n\t\t\t\tconst chCode = line.charCodeAt(j);\n\n\t\t\t\tif (state === State.Accept) {\n\t\t\t\t\tlet chClass: CharacterClass;\n\t\t\t\t\tswitch (chCode) {\n\t\t\t\t\t\tcase CharCode.OpenParen:\n\t\t\t\t\t\t\thasOpenParens = true;\n\t\t\t\t\t\t\tchClass = CharacterClass.None;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase CharCode.CloseParen:\n\t\t\t\t\t\t\tchClass = (hasOpenParens ? CharacterClass.None : CharacterClass.ForceTermination);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase CharCode.OpenSquareBracket:\n\t\t\t\t\t\t\tinSquareBrackets = true;\n\t\t\t\t\t\t\thasOpenSquareBracket = true;\n\t\t\t\t\t\t\tchClass = CharacterClass.None;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase CharCode.CloseSquareBracket:\n\t\t\t\t\t\t\tinSquareBrackets = false;\n\t\t\t\t\t\t\tchClass = (hasOpenSquareBracket ? CharacterClass.None : CharacterClass.ForceTermination);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase CharCode.OpenCurlyBrace:\n\t\t\t\t\t\t\thasOpenCurlyBracket = true;\n\t\t\t\t\t\t\tchClass = CharacterClass.None;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase CharCode.CloseCurlyBrace:\n\t\t\t\t\t\t\tchClass = (hasOpenCurlyBracket ? CharacterClass.None : CharacterClass.ForceTermination);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t/* The following three rules make it that ' or \" or ` are allowed inside links if the link began with a different one */\n\t\t\t\t\t\tcase CharCode.SingleQuote:\n\t\t\t\t\t\t\tchClass = (linkBeginChCode === CharCode.DoubleQuote || linkBeginChCode === CharCode.BackTick) ? CharacterClass.None : CharacterClass.ForceTermination;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase CharCode.DoubleQuote:\n\t\t\t\t\t\t\tchClass = (linkBeginChCode === CharCode.SingleQuote || linkBeginChCode === CharCode.BackTick) ? CharacterClass.None : CharacterClass.ForceTermination;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase CharCode.BackTick:\n\t\t\t\t\t\t\tchClass = (linkBeginChCode === CharCode.SingleQuote || linkBeginChCode === CharCode.DoubleQuote) ? CharacterClass.None : CharacterClass.ForceTermination;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase CharCode.Asterisk:\n\t\t\t\t\t\t\t// `*` terminates a link if the link began with `*`\n\t\t\t\t\t\t\tchClass = (linkBeginChCode === CharCode.Asterisk) ? CharacterClass.ForceTermination : CharacterClass.None;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase CharCode.Pipe:\n\t\t\t\t\t\t\t// `|` terminates a link if the link began with `|`\n\t\t\t\t\t\t\tchClass = (linkBeginChCode === CharCode.Pipe) ? CharacterClass.ForceTermination : CharacterClass.None;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase CharCode.Space:\n\t\t\t\t\t\t\t// ` ` allow space in between [ and ]\n\t\t\t\t\t\t\tchClass = (inSquareBrackets ? CharacterClass.None : CharacterClass.ForceTermination);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tchClass = classifier.get(chCode);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Check if character terminates link\n\t\t\t\t\tif (chClass === CharacterClass.ForceTermination) {\n\t\t\t\t\t\tresult.push(LinkComputer._createLink(classifier, line, i, linkBeginIndex, j));\n\t\t\t\t\t\tresetStateMachine = true;\n\t\t\t\t\t}\n\t\t\t\t} else if (state === State.End) {\n\n\t\t\t\t\tlet chClass: CharacterClass;\n\t\t\t\t\tif (chCode === CharCode.OpenSquareBracket) {\n\t\t\t\t\t\t// Allow for the authority part to contain ipv6 addresses which contain [ and ]\n\t\t\t\t\t\thasOpenSquareBracket = true;\n\t\t\t\t\t\tchClass = CharacterClass.None;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchClass = classifier.get(chCode);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Check if character terminates link\n\t\t\t\t\tif (chClass === CharacterClass.ForceTermination) {\n\t\t\t\t\t\tresetStateMachine = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstate = State.Accept;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tstate = stateMachine.nextState(state, chCode);\n\t\t\t\t\tif (state === State.Invalid) {\n\t\t\t\t\t\tresetStateMachine = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (resetStateMachine) {\n\t\t\t\t\tstate = State.Start;\n\t\t\t\t\thasOpenParens = false;\n\t\t\t\t\thasOpenSquareBracket = false;\n\t\t\t\t\thasOpenCurlyBracket = false;\n\n\t\t\t\t\t// Record where the link started\n\t\t\t\t\tlinkBeginIndex = j + 1;\n\t\t\t\t\tlinkBeginChCode = chCode;\n\t\t\t\t}\n\n\t\t\t\tj++;\n\t\t\t}\n\n\t\t\tif (state === State.Accept) {\n\t\t\t\tresult.push(LinkComputer._createLink(classifier, line, i, linkBeginIndex, len));\n\t\t\t}\n\n\t\t}\n\n\t\treturn result;\n\t}\n}\n\n/**\n * Returns an array of all links contains in the provided\n * document. *Note* that this operation is computational\n * expensive and should not run in the UI thread.\n */\nexport function computeLinks(model: ILinkComputerTarget | null): ILink[] {\n\tif (!model || typeof model.getLineCount !== 'function' || typeof model.getLineContent !== 'function') {\n\t\t// Unknown caller!\n\t\treturn [];\n\t}\n\treturn LinkComputer.computeLinks(model);\n}\n"]}