{"version":3,"file":"supports.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/common/modes/supports.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAKhG,SAAgB,sBAAsB,CAAC,OAAmB,EAAE,MAAc;QACzE,IAAI,UAAU,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC;QACpC,IAAI,UAAU,GAAG,OAAO,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC;QACxD,IAAI,iBAAiB,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;QAE1D,IAAI,cAAc,GAAG,UAAU,CAAC;QAChC,OAAO,cAAc,GAAG,CAAC,GAAG,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,cAAc,GAAG,CAAC,CAAC,KAAK,iBAAiB,EAAE;YAC1G,cAAc,EAAE,CAAC;SACjB;QAED,IAAI,eAAe,GAAG,UAAU,CAAC;QACjC,OAAO,eAAe,GAAG,CAAC,IAAI,OAAO,CAAC,aAAa,CAAC,eAAe,GAAG,CAAC,CAAC,KAAK,iBAAiB,EAAE;YAC/F,eAAe,EAAE,CAAC;SAClB;QAED,OAAO,IAAI,gBAAgB,CAC1B,OAAO,EACP,iBAAiB,EACjB,eAAe,EACf,cAAc,GAAG,CAAC,EAClB,OAAO,CAAC,cAAc,CAAC,eAAe,CAAC,EACvC,OAAO,CAAC,YAAY,CAAC,cAAc,CAAC,CACpC,CAAC;IACH,CAAC;IAvBD,wDAuBC;IAED,MAAa,gBAAgB;QAU5B,YACC,MAAkB,EAClB,UAA4B,EAC5B,eAAuB,EACvB,cAAsB,EACtB,eAAuB,EACvB,cAAsB;YAEtB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;YACtB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;YAC7B,IAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;YACxC,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;YACtC,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;YACvC,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;QACvC,CAAC;QAEM,cAAc;YACpB,MAAM,iBAAiB,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC;YACxD,OAAO,iBAAiB,CAAC,SAAS,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;QAChF,CAAC;QAEM,0BAA0B,CAAC,MAAc;YAC/C,MAAM,iBAAiB,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC;YACxD,OAAO,iBAAiB,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,eAAe,GAAG,MAAM,CAAC,CAAC;QACtE,CAAC;QAEM,aAAa;YACnB,OAAO,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,gBAAgB,CAAC;QACrD,CAAC;QAEM,sBAAsB,CAAC,MAAc;YAC3C,OAAO,IAAI,CAAC,OAAO,CAAC,sBAAsB,CAAC,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC;QACnG,CAAC;QAEM,oBAAoB,CAAC,UAAkB;YAC7C,OAAO,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC,CAAC;QAC9E,CAAC;KACD;IA/CD,4CA+CC;IAED,IAAW,sBAEV;IAFD,WAAW,sBAAsB;QAChC,qEAAwG,CAAA;IACzG,CAAC,EAFU,sBAAsB,KAAtB,sBAAsB,QAEhC;IAED,SAAgB,qBAAqB,CAAC,iBAA0C;QAC/E,OAAO,CAAC,iBAAiB,gBAA+B,CAAC,KAAK,CAAC,CAAC;IACjE,CAAC;IAFD,sDAEC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { LineTokens } from 'vs/editor/common/core/lineTokens';\nimport * as modes from 'vs/editor/common/modes';\n\nexport function createScopedLineTokens(context: LineTokens, offset: number): ScopedLineTokens {\n\tlet tokenCount = context.getCount();\n\tlet tokenIndex = context.findTokenIndexAtOffset(offset);\n\tlet desiredLanguageId = context.getLanguageId(tokenIndex);\n\n\tlet lastTokenIndex = tokenIndex;\n\twhile (lastTokenIndex + 1 < tokenCount && context.getLanguageId(lastTokenIndex + 1) === desiredLanguageId) {\n\t\tlastTokenIndex++;\n\t}\n\n\tlet firstTokenIndex = tokenIndex;\n\twhile (firstTokenIndex > 0 && context.getLanguageId(firstTokenIndex - 1) === desiredLanguageId) {\n\t\tfirstTokenIndex--;\n\t}\n\n\treturn new ScopedLineTokens(\n\t\tcontext,\n\t\tdesiredLanguageId,\n\t\tfirstTokenIndex,\n\t\tlastTokenIndex + 1,\n\t\tcontext.getStartOffset(firstTokenIndex),\n\t\tcontext.getEndOffset(lastTokenIndex)\n\t);\n}\n\nexport class ScopedLineTokens {\n\t_scopedLineTokensBrand: void;\n\n\tpublic readonly languageId: modes.LanguageId;\n\tprivate readonly _actual: LineTokens;\n\tprivate readonly _firstTokenIndex: number;\n\tprivate readonly _lastTokenIndex: number;\n\tpublic readonly firstCharOffset: number;\n\tprivate readonly _lastCharOffset: number;\n\n\tconstructor(\n\t\tactual: LineTokens,\n\t\tlanguageId: modes.LanguageId,\n\t\tfirstTokenIndex: number,\n\t\tlastTokenIndex: number,\n\t\tfirstCharOffset: number,\n\t\tlastCharOffset: number\n\t) {\n\t\tthis._actual = actual;\n\t\tthis.languageId = languageId;\n\t\tthis._firstTokenIndex = firstTokenIndex;\n\t\tthis._lastTokenIndex = lastTokenIndex;\n\t\tthis.firstCharOffset = firstCharOffset;\n\t\tthis._lastCharOffset = lastCharOffset;\n\t}\n\n\tpublic getLineContent(): string {\n\t\tconst actualLineContent = this._actual.getLineContent();\n\t\treturn actualLineContent.substring(this.firstCharOffset, this._lastCharOffset);\n\t}\n\n\tpublic getActualLineContentBefore(offset: number): string {\n\t\tconst actualLineContent = this._actual.getLineContent();\n\t\treturn actualLineContent.substring(0, this.firstCharOffset + offset);\n\t}\n\n\tpublic getTokenCount(): number {\n\t\treturn this._lastTokenIndex - this._firstTokenIndex;\n\t}\n\n\tpublic findTokenIndexAtOffset(offset: number): number {\n\t\treturn this._actual.findTokenIndexAtOffset(offset + this.firstCharOffset) - this._firstTokenIndex;\n\t}\n\n\tpublic getStandardTokenType(tokenIndex: number): modes.StandardTokenType {\n\t\treturn this._actual.getStandardTokenType(tokenIndex + this._firstTokenIndex);\n\t}\n}\n\nconst enum IgnoreBracketsInTokens {\n\tvalue = modes.StandardTokenType.Comment | modes.StandardTokenType.String | modes.StandardTokenType.RegEx\n}\n\nexport function ignoreBracketsInToken(standardTokenType: modes.StandardTokenType): boolean {\n\treturn (standardTokenType & IgnoreBracketsInTokens.value) !== 0;\n}\n"]}