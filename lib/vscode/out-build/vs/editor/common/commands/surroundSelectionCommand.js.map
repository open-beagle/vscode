{"version":3,"file":"surroundSelectionCommand.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/common/commands/surroundSelectionCommand.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAOhG,MAAa,wBAAwB;QAKpC,YAAY,KAAgB,EAAE,mBAA2B,EAAE,kBAA0B;YACpF,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YACpB,IAAI,CAAC,oBAAoB,GAAG,mBAAmB,CAAC;YAChD,IAAI,CAAC,mBAAmB,GAAG,kBAAkB,CAAC;QAC/C,CAAC;QAEM,iBAAiB,CAAC,KAAiB,EAAE,OAA8B;YACzE,OAAO,CAAC,uBAAuB,CAAC,IAAI,aAAK,CACxC,IAAI,CAAC,MAAM,CAAC,eAAe,EAC3B,IAAI,CAAC,MAAM,CAAC,WAAW,EACvB,IAAI,CAAC,MAAM,CAAC,eAAe,EAC3B,IAAI,CAAC,MAAM,CAAC,WAAW,CACvB,EAAE,IAAI,CAAC,oBAAoB,CAAC,CAAC;YAE9B,OAAO,CAAC,uBAAuB,CAAC,IAAI,aAAK,CACxC,IAAI,CAAC,MAAM,CAAC,aAAa,EACzB,IAAI,CAAC,MAAM,CAAC,SAAS,EACrB,IAAI,CAAC,MAAM,CAAC,aAAa,EACzB,IAAI,CAAC,MAAM,CAAC,SAAS,CACrB,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAC9B,CAAC;QAEM,kBAAkB,CAAC,KAAiB,EAAE,MAAgC;YAC5E,IAAI,qBAAqB,GAAG,MAAM,CAAC,wBAAwB,EAAE,CAAC;YAC9D,IAAI,mBAAmB,GAAG,qBAAqB,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;YACzD,IAAI,oBAAoB,GAAG,qBAAqB,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;YAE1D,OAAO,IAAI,qBAAS,CACnB,mBAAmB,CAAC,aAAa,EACjC,mBAAmB,CAAC,SAAS,EAC7B,oBAAoB,CAAC,aAAa,EAClC,oBAAoB,CAAC,SAAS,GAAG,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAChE,CAAC;QACH,CAAC;KACD;IAvCD,4DAuCC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Range } from 'vs/editor/common/core/range';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { ICommand, ICursorStateComputerData, IEditOperationBuilder } from 'vs/editor/common/editorCommon';\nimport { ITextModel } from 'vs/editor/common/model';\n\nexport class SurroundSelectionCommand implements ICommand {\n\tprivate readonly _range: Selection;\n\tprivate readonly _charBeforeSelection: string;\n\tprivate readonly _charAfterSelection: string;\n\n\tconstructor(range: Selection, charBeforeSelection: string, charAfterSelection: string) {\n\t\tthis._range = range;\n\t\tthis._charBeforeSelection = charBeforeSelection;\n\t\tthis._charAfterSelection = charAfterSelection;\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tbuilder.addTrackedEditOperation(new Range(\n\t\t\tthis._range.startLineNumber,\n\t\t\tthis._range.startColumn,\n\t\t\tthis._range.startLineNumber,\n\t\t\tthis._range.startColumn\n\t\t), this._charBeforeSelection);\n\n\t\tbuilder.addTrackedEditOperation(new Range(\n\t\t\tthis._range.endLineNumber,\n\t\t\tthis._range.endColumn,\n\t\t\tthis._range.endLineNumber,\n\t\t\tthis._range.endColumn\n\t\t), this._charAfterSelection);\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\tlet inverseEditOperations = helper.getInverseEditOperations();\n\t\tlet firstOperationRange = inverseEditOperations[0].range;\n\t\tlet secondOperationRange = inverseEditOperations[1].range;\n\n\t\treturn new Selection(\n\t\t\tfirstOperationRange.endLineNumber,\n\t\t\tfirstOperationRange.endColumn,\n\t\t\tsecondOperationRange.endLineNumber,\n\t\t\tsecondOperationRange.endColumn - this._charAfterSelection.length\n\t\t);\n\t}\n}\n"]}