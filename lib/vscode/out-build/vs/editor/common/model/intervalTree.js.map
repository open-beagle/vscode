{"version":3,"file":"intervalTree.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/common/model/intervalTree.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Range } from 'vs/editor/common/core/range';\nimport { IModelDecoration, TrackedRangeStickiness, TrackedRangeStickiness as ActualTrackedRangeStickiness } from 'vs/editor/common/model';\nimport { ModelDecorationOptions } from 'vs/editor/common/model/textModel';\n\n//\n// The red-black tree is based on the \"Introduction to Algorithms\" by Cormen, Leiserson and Rivest.\n//\n\nexport const enum ClassName {\n\tEditorHintDecoration = 'squiggly-hint',\n\tEditorInfoDecoration = 'squiggly-info',\n\tEditorWarningDecoration = 'squiggly-warning',\n\tEditorErrorDecoration = 'squiggly-error',\n\tEditorUnnecessaryDecoration = 'squiggly-unnecessary',\n\tEditorUnnecessaryInlineDecoration = 'squiggly-inline-unnecessary',\n\tEditorDeprecatedInlineDecoration = 'squiggly-inline-deprecated'\n}\n\nexport const enum NodeColor {\n\tBlack = 0,\n\tRed = 1,\n}\n\nconst enum Constants {\n\tColorMask = 0b00000001,\n\tColorMaskInverse = 0b11111110,\n\tColorOffset = 0,\n\n\tIsVisitedMask = 0b00000010,\n\tIsVisitedMaskInverse = 0b11111101,\n\tIsVisitedOffset = 1,\n\n\tIsForValidationMask = 0b00000100,\n\tIsForValidationMaskInverse = 0b11111011,\n\tIsForValidationOffset = 2,\n\n\tIsInOverviewRulerMask = 0b00001000,\n\tIsInOverviewRulerMaskInverse = 0b11110111,\n\tIsInOverviewRulerOffset = 3,\n\n\tStickinessMask = 0b00110000,\n\tStickinessMaskInverse = 0b11001111,\n\tStickinessOffset = 4,\n\n\tCollapseOnReplaceEditMask = 0b01000000,\n\tCollapseOnReplaceEditMaskInverse = 0b10111111,\n\tCollapseOnReplaceEditOffset = 6,\n\n\t/**\n\t * Due to how deletion works (in order to avoid always walking the right subtree of the deleted node),\n\t * the deltas for nodes can grow and shrink dramatically. It has been observed, in practice, that unless\n\t * the deltas are corrected, integer overflow will occur.\n\t *\n\t * The integer overflow occurs when 53 bits are used in the numbers, but we will try to avoid it as\n\t * a node's delta gets below a negative 30 bits number.\n\t *\n\t * MIN SMI (SMall Integer) as defined in v8.\n\t * one bit is lost for boxing/unboxing flag.\n\t * one bit is lost for sign flag.\n\t * See https://thibaultlaurens.github.io/javascript/2013/04/29/how-the-v8-engine-works/#tagged-values\n\t */\n\tMIN_SAFE_DELTA = -(1 << 30),\n\t/**\n\t * MAX SMI (SMall Integer) as defined in v8.\n\t * one bit is lost for boxing/unboxing flag.\n\t * one bit is lost for sign flag.\n\t * See https://thibaultlaurens.github.io/javascript/2013/04/29/how-the-v8-engine-works/#tagged-values\n\t */\n\tMAX_SAFE_DELTA = 1 << 30,\n}\n\nexport function getNodeColor(node: IntervalNode): NodeColor {\n\treturn ((node.metadata & Constants.ColorMask) >>> Constants.ColorOffset);\n}\nfunction setNodeColor(node: IntervalNode, color: NodeColor): void {\n\tnode.metadata = (\n\t\t(node.metadata & Constants.ColorMaskInverse) | (color << Constants.ColorOffset)\n\t);\n}\nfunction getNodeIsVisited(node: IntervalNode): boolean {\n\treturn ((node.metadata & Constants.IsVisitedMask) >>> Constants.IsVisitedOffset) === 1;\n}\nfunction setNodeIsVisited(node: IntervalNode, value: boolean): void {\n\tnode.metadata = (\n\t\t(node.metadata & Constants.IsVisitedMaskInverse) | ((value ? 1 : 0) << Constants.IsVisitedOffset)\n\t);\n}\nfunction getNodeIsForValidation(node: IntervalNode): boolean {\n\treturn ((node.metadata & Constants.IsForValidationMask) >>> Constants.IsForValidationOffset) === 1;\n}\nfunction setNodeIsForValidation(node: IntervalNode, value: boolean): void {\n\tnode.metadata = (\n\t\t(node.metadata & Constants.IsForValidationMaskInverse) | ((value ? 1 : 0) << Constants.IsForValidationOffset)\n\t);\n}\nexport function getNodeIsInOverviewRuler(node: IntervalNode): boolean {\n\treturn ((node.metadata & Constants.IsInOverviewRulerMask) >>> Constants.IsInOverviewRulerOffset) === 1;\n}\nfunction setNodeIsInOverviewRuler(node: IntervalNode, value: boolean): void {\n\tnode.metadata = (\n\t\t(node.metadata & Constants.IsInOverviewRulerMaskInverse) | ((value ? 1 : 0) << Constants.IsInOverviewRulerOffset)\n\t);\n}\nfunction getNodeStickiness(node: IntervalNode): TrackedRangeStickiness {\n\treturn ((node.metadata & Constants.StickinessMask) >>> Constants.StickinessOffset);\n}\nfunction _setNodeStickiness(node: IntervalNode, stickiness: TrackedRangeStickiness): void {\n\tnode.metadata = (\n\t\t(node.metadata & Constants.StickinessMaskInverse) | (stickiness << Constants.StickinessOffset)\n\t);\n}\nfunction getCollapseOnReplaceEdit(node: IntervalNode): boolean {\n\treturn ((node.metadata & Constants.CollapseOnReplaceEditMask) >>> Constants.CollapseOnReplaceEditOffset) === 1;\n}\nfunction setCollapseOnReplaceEdit(node: IntervalNode, value: boolean): void {\n\tnode.metadata = (\n\t\t(node.metadata & Constants.CollapseOnReplaceEditMaskInverse) | ((value ? 1 : 0) << Constants.CollapseOnReplaceEditOffset)\n\t);\n}\nexport function setNodeStickiness(node: IntervalNode, stickiness: ActualTrackedRangeStickiness): void {\n\t_setNodeStickiness(node, <number>stickiness);\n}\n\nexport class IntervalNode implements IModelDecoration {\n\n\t/**\n\t * contains binary encoded information for color, visited, isForValidation and stickiness.\n\t */\n\tpublic metadata: number;\n\n\tpublic parent: IntervalNode;\n\tpublic left: IntervalNode;\n\tpublic right: IntervalNode;\n\n\tpublic start: number;\n\tpublic end: number;\n\tpublic delta: number;\n\tpublic maxEnd: number;\n\n\tpublic id: string;\n\tpublic ownerId: number;\n\tpublic options: ModelDecorationOptions;\n\n\tpublic cachedVersionId: number;\n\tpublic cachedAbsoluteStart: number;\n\tpublic cachedAbsoluteEnd: number;\n\tpublic range: Range;\n\n\tconstructor(id: string, start: number, end: number) {\n\t\tthis.metadata = 0;\n\n\t\tthis.parent = this;\n\t\tthis.left = this;\n\t\tthis.right = this;\n\t\tsetNodeColor(this, NodeColor.Red);\n\n\t\tthis.start = start;\n\t\tthis.end = end;\n\t\t// FORCE_OVERFLOWING_TEST: this.delta = start;\n\t\tthis.delta = 0;\n\t\tthis.maxEnd = end;\n\n\t\tthis.id = id;\n\t\tthis.ownerId = 0;\n\t\tthis.options = null!;\n\t\tsetNodeIsForValidation(this, false);\n\t\t_setNodeStickiness(this, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges);\n\t\tsetNodeIsInOverviewRuler(this, false);\n\t\tsetCollapseOnReplaceEdit(this, false);\n\n\t\tthis.cachedVersionId = 0;\n\t\tthis.cachedAbsoluteStart = start;\n\t\tthis.cachedAbsoluteEnd = end;\n\t\tthis.range = null!;\n\n\t\tsetNodeIsVisited(this, false);\n\t}\n\n\tpublic reset(versionId: number, start: number, end: number, range: Range): void {\n\t\tthis.start = start;\n\t\tthis.end = end;\n\t\tthis.maxEnd = end;\n\t\tthis.cachedVersionId = versionId;\n\t\tthis.cachedAbsoluteStart = start;\n\t\tthis.cachedAbsoluteEnd = end;\n\t\tthis.range = range;\n\t}\n\n\tpublic setOptions(options: ModelDecorationOptions) {\n\t\tthis.options = options;\n\t\tlet className = this.options.className;\n\t\tsetNodeIsForValidation(this, (\n\t\t\tclassName === ClassName.EditorErrorDecoration\n\t\t\t|| className === ClassName.EditorWarningDecoration\n\t\t\t|| className === ClassName.EditorInfoDecoration\n\t\t));\n\t\t_setNodeStickiness(this, <number>this.options.stickiness);\n\t\tsetNodeIsInOverviewRuler(this, (this.options.overviewRuler && this.options.overviewRuler.color) ? true : false);\n\t\tsetCollapseOnReplaceEdit(this, this.options.collapseOnReplaceEdit);\n\t}\n\n\tpublic setCachedOffsets(absoluteStart: number, absoluteEnd: number, cachedVersionId: number): void {\n\t\tif (this.cachedVersionId !== cachedVersionId) {\n\t\t\tthis.range = null!;\n\t\t}\n\t\tthis.cachedVersionId = cachedVersionId;\n\t\tthis.cachedAbsoluteStart = absoluteStart;\n\t\tthis.cachedAbsoluteEnd = absoluteEnd;\n\t}\n\n\tpublic detach(): void {\n\t\tthis.parent = null!;\n\t\tthis.left = null!;\n\t\tthis.right = null!;\n\t}\n}\n\nexport const SENTINEL: IntervalNode = new IntervalNode(null!, 0, 0);\nSENTINEL.parent = SENTINEL;\nSENTINEL.left = SENTINEL;\nSENTINEL.right = SENTINEL;\nsetNodeColor(SENTINEL, NodeColor.Black);\n\nexport class IntervalTree {\n\n\tpublic root: IntervalNode;\n\tpublic requestNormalizeDelta: boolean;\n\n\tconstructor() {\n\t\tthis.root = SENTINEL;\n\t\tthis.requestNormalizeDelta = false;\n\t}\n\n\tpublic intervalSearch(start: number, end: number, filterOwnerId: number, filterOutValidation: boolean, cachedVersionId: number): IntervalNode[] {\n\t\tif (this.root === SENTINEL) {\n\t\t\treturn [];\n\t\t}\n\t\treturn intervalSearch(this, start, end, filterOwnerId, filterOutValidation, cachedVersionId);\n\t}\n\n\tpublic search(filterOwnerId: number, filterOutValidation: boolean, cachedVersionId: number): IntervalNode[] {\n\t\tif (this.root === SENTINEL) {\n\t\t\treturn [];\n\t\t}\n\t\treturn search(this, filterOwnerId, filterOutValidation, cachedVersionId);\n\t}\n\n\t/**\n\t * Will not set `cachedAbsoluteStart` nor `cachedAbsoluteEnd` on the returned nodes!\n\t */\n\tpublic collectNodesFromOwner(ownerId: number): IntervalNode[] {\n\t\treturn collectNodesFromOwner(this, ownerId);\n\t}\n\n\t/**\n\t * Will not set `cachedAbsoluteStart` nor `cachedAbsoluteEnd` on the returned nodes!\n\t */\n\tpublic collectNodesPostOrder(): IntervalNode[] {\n\t\treturn collectNodesPostOrder(this);\n\t}\n\n\tpublic insert(node: IntervalNode): void {\n\t\trbTreeInsert(this, node);\n\t\tthis._normalizeDeltaIfNecessary();\n\t}\n\n\tpublic delete(node: IntervalNode): void {\n\t\trbTreeDelete(this, node);\n\t\tthis._normalizeDeltaIfNecessary();\n\t}\n\n\tpublic resolveNode(node: IntervalNode, cachedVersionId: number): void {\n\t\tconst initialNode = node;\n\t\tlet delta = 0;\n\t\twhile (node !== this.root) {\n\t\t\tif (node === node.parent.right) {\n\t\t\t\tdelta += node.parent.delta;\n\t\t\t}\n\t\t\tnode = node.parent;\n\t\t}\n\n\t\tconst nodeStart = initialNode.start + delta;\n\t\tconst nodeEnd = initialNode.end + delta;\n\t\tinitialNode.setCachedOffsets(nodeStart, nodeEnd, cachedVersionId);\n\t}\n\n\tpublic acceptReplace(offset: number, length: number, textLength: number, forceMoveMarkers: boolean): void {\n\t\t// Our strategy is to remove all directly impacted nodes, and then add them back to the tree.\n\n\t\t// (1) collect all nodes that are intersecting this edit as nodes of interest\n\t\tconst nodesOfInterest = searchForEditing(this, offset, offset + length);\n\n\t\t// (2) remove all nodes that are intersecting this edit\n\t\tfor (let i = 0, len = nodesOfInterest.length; i < len; i++) {\n\t\t\tconst node = nodesOfInterest[i];\n\t\t\trbTreeDelete(this, node);\n\t\t}\n\t\tthis._normalizeDeltaIfNecessary();\n\n\t\t// (3) edit all tree nodes except the nodes of interest\n\t\tnoOverlapReplace(this, offset, offset + length, textLength);\n\t\tthis._normalizeDeltaIfNecessary();\n\n\t\t// (4) edit the nodes of interest and insert them back in the tree\n\t\tfor (let i = 0, len = nodesOfInterest.length; i < len; i++) {\n\t\t\tconst node = nodesOfInterest[i];\n\t\t\tnode.start = node.cachedAbsoluteStart;\n\t\t\tnode.end = node.cachedAbsoluteEnd;\n\t\t\tnodeAcceptEdit(node, offset, (offset + length), textLength, forceMoveMarkers);\n\t\t\tnode.maxEnd = node.end;\n\t\t\trbTreeInsert(this, node);\n\t\t}\n\t\tthis._normalizeDeltaIfNecessary();\n\t}\n\n\tpublic getAllInOrder(): IntervalNode[] {\n\t\treturn search(this, 0, false, 0);\n\t}\n\n\tprivate _normalizeDeltaIfNecessary(): void {\n\t\tif (!this.requestNormalizeDelta) {\n\t\t\treturn;\n\t\t}\n\t\tthis.requestNormalizeDelta = false;\n\t\tnormalizeDelta(this);\n\t}\n}\n\n//#region Delta Normalization\nfunction normalizeDelta(T: IntervalTree): void {\n\tlet node = T.root;\n\tlet delta = 0;\n\twhile (node !== SENTINEL) {\n\n\t\tif (node.left !== SENTINEL && !getNodeIsVisited(node.left)) {\n\t\t\t// go left\n\t\t\tnode = node.left;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (node.right !== SENTINEL && !getNodeIsVisited(node.right)) {\n\t\t\t// go right\n\t\t\tdelta += node.delta;\n\t\t\tnode = node.right;\n\t\t\tcontinue;\n\t\t}\n\n\t\t// handle current node\n\t\tnode.start = delta + node.start;\n\t\tnode.end = delta + node.end;\n\t\tnode.delta = 0;\n\t\trecomputeMaxEnd(node);\n\n\t\tsetNodeIsVisited(node, true);\n\n\t\t// going up from this node\n\t\tsetNodeIsVisited(node.left, false);\n\t\tsetNodeIsVisited(node.right, false);\n\t\tif (node === node.parent.right) {\n\t\t\tdelta -= node.parent.delta;\n\t\t}\n\t\tnode = node.parent;\n\t}\n\n\tsetNodeIsVisited(T.root, false);\n}\n//#endregion\n\n//#region Editing\n\nconst enum MarkerMoveSemantics {\n\tMarkerDefined = 0,\n\tForceMove = 1,\n\tForceStay = 2\n}\n\nfunction adjustMarkerBeforeColumn(markerOffset: number, markerStickToPreviousCharacter: boolean, checkOffset: number, moveSemantics: MarkerMoveSemantics): boolean {\n\tif (markerOffset < checkOffset) {\n\t\treturn true;\n\t}\n\tif (markerOffset > checkOffset) {\n\t\treturn false;\n\t}\n\tif (moveSemantics === MarkerMoveSemantics.ForceMove) {\n\t\treturn false;\n\t}\n\tif (moveSemantics === MarkerMoveSemantics.ForceStay) {\n\t\treturn true;\n\t}\n\treturn markerStickToPreviousCharacter;\n}\n\n/**\n * This is a lot more complicated than strictly necessary to maintain the same behaviour\n * as when decorations were implemented using two markers.\n */\nexport function nodeAcceptEdit(node: IntervalNode, start: number, end: number, textLength: number, forceMoveMarkers: boolean): void {\n\tconst nodeStickiness = getNodeStickiness(node);\n\tconst startStickToPreviousCharacter = (\n\t\tnodeStickiness === TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges\n\t\t|| nodeStickiness === TrackedRangeStickiness.GrowsOnlyWhenTypingBefore\n\t);\n\tconst endStickToPreviousCharacter = (\n\t\tnodeStickiness === TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges\n\t\t|| nodeStickiness === TrackedRangeStickiness.GrowsOnlyWhenTypingBefore\n\t);\n\n\tconst deletingCnt = (end - start);\n\tconst insertingCnt = textLength;\n\tconst commonLength = Math.min(deletingCnt, insertingCnt);\n\n\tconst nodeStart = node.start;\n\tlet startDone = false;\n\n\tconst nodeEnd = node.end;\n\tlet endDone = false;\n\n\tif (start <= nodeStart && nodeEnd <= end && getCollapseOnReplaceEdit(node)) {\n\t\t// This edit encompasses the entire decoration range\n\t\t// and the decoration has asked to become collapsed\n\t\tnode.start = start;\n\t\tstartDone = true;\n\t\tnode.end = start;\n\t\tendDone = true;\n\t}\n\n\t{\n\t\tconst moveSemantics = forceMoveMarkers ? MarkerMoveSemantics.ForceMove : (deletingCnt > 0 ? MarkerMoveSemantics.ForceStay : MarkerMoveSemantics.MarkerDefined);\n\t\tif (!startDone && adjustMarkerBeforeColumn(nodeStart, startStickToPreviousCharacter, start, moveSemantics)) {\n\t\t\tstartDone = true;\n\t\t}\n\t\tif (!endDone && adjustMarkerBeforeColumn(nodeEnd, endStickToPreviousCharacter, start, moveSemantics)) {\n\t\t\tendDone = true;\n\t\t}\n\t}\n\n\tif (commonLength > 0 && !forceMoveMarkers) {\n\t\tconst moveSemantics = (deletingCnt > insertingCnt ? MarkerMoveSemantics.ForceStay : MarkerMoveSemantics.MarkerDefined);\n\t\tif (!startDone && adjustMarkerBeforeColumn(nodeStart, startStickToPreviousCharacter, start + commonLength, moveSemantics)) {\n\t\t\tstartDone = true;\n\t\t}\n\t\tif (!endDone && adjustMarkerBeforeColumn(nodeEnd, endStickToPreviousCharacter, start + commonLength, moveSemantics)) {\n\t\t\tendDone = true;\n\t\t}\n\t}\n\n\t{\n\t\tconst moveSemantics = forceMoveMarkers ? MarkerMoveSemantics.ForceMove : MarkerMoveSemantics.MarkerDefined;\n\t\tif (!startDone && adjustMarkerBeforeColumn(nodeStart, startStickToPreviousCharacter, end, moveSemantics)) {\n\t\t\tnode.start = start + insertingCnt;\n\t\t\tstartDone = true;\n\t\t}\n\t\tif (!endDone && adjustMarkerBeforeColumn(nodeEnd, endStickToPreviousCharacter, end, moveSemantics)) {\n\t\t\tnode.end = start + insertingCnt;\n\t\t\tendDone = true;\n\t\t}\n\t}\n\n\t// Finish\n\tconst deltaColumn = (insertingCnt - deletingCnt);\n\tif (!startDone) {\n\t\tnode.start = Math.max(0, nodeStart + deltaColumn);\n\t}\n\tif (!endDone) {\n\t\tnode.end = Math.max(0, nodeEnd + deltaColumn);\n\t}\n\n\tif (node.start > node.end) {\n\t\tnode.end = node.start;\n\t}\n}\n\nfunction searchForEditing(T: IntervalTree, start: number, end: number): IntervalNode[] {\n\t// https://en.wikipedia.org/wiki/Interval_tree#Augmented_tree\n\t// Now, it is known that two intervals A and B overlap only when both\n\t// A.low <= B.high and A.high >= B.low. When searching the trees for\n\t// nodes overlapping with a given interval, you can immediately skip:\n\t//  a) all nodes to the right of nodes whose low value is past the end of the given interval.\n\t//  b) all nodes that have their maximum 'high' value below the start of the given interval.\n\tlet node = T.root;\n\tlet delta = 0;\n\tlet nodeMaxEnd = 0;\n\tlet nodeStart = 0;\n\tlet nodeEnd = 0;\n\tlet result: IntervalNode[] = [];\n\tlet resultLen = 0;\n\twhile (node !== SENTINEL) {\n\t\tif (getNodeIsVisited(node)) {\n\t\t\t// going up from this node\n\t\t\tsetNodeIsVisited(node.left, false);\n\t\t\tsetNodeIsVisited(node.right, false);\n\t\t\tif (node === node.parent.right) {\n\t\t\t\tdelta -= node.parent.delta;\n\t\t\t}\n\t\t\tnode = node.parent;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!getNodeIsVisited(node.left)) {\n\t\t\t// first time seeing this node\n\t\t\tnodeMaxEnd = delta + node.maxEnd;\n\t\t\tif (nodeMaxEnd < start) {\n\t\t\t\t// cover case b) from above\n\t\t\t\t// there is no need to search this node or its children\n\t\t\t\tsetNodeIsVisited(node, true);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (node.left !== SENTINEL) {\n\t\t\t\t// go left\n\t\t\t\tnode = node.left;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\t// handle current node\n\t\tnodeStart = delta + node.start;\n\t\tif (nodeStart > end) {\n\t\t\t// cover case a) from above\n\t\t\t// there is no need to search this node or its right subtree\n\t\t\tsetNodeIsVisited(node, true);\n\t\t\tcontinue;\n\t\t}\n\n\t\tnodeEnd = delta + node.end;\n\t\tif (nodeEnd >= start) {\n\t\t\tnode.setCachedOffsets(nodeStart, nodeEnd, 0);\n\t\t\tresult[resultLen++] = node;\n\t\t}\n\t\tsetNodeIsVisited(node, true);\n\n\t\tif (node.right !== SENTINEL && !getNodeIsVisited(node.right)) {\n\t\t\t// go right\n\t\t\tdelta += node.delta;\n\t\t\tnode = node.right;\n\t\t\tcontinue;\n\t\t}\n\t}\n\n\tsetNodeIsVisited(T.root, false);\n\n\treturn result;\n}\n\nfunction noOverlapReplace(T: IntervalTree, start: number, end: number, textLength: number): void {\n\t// https://en.wikipedia.org/wiki/Interval_tree#Augmented_tree\n\t// Now, it is known that two intervals A and B overlap only when both\n\t// A.low <= B.high and A.high >= B.low. When searching the trees for\n\t// nodes overlapping with a given interval, you can immediately skip:\n\t//  a) all nodes to the right of nodes whose low value is past the end of the given interval.\n\t//  b) all nodes that have their maximum 'high' value below the start of the given interval.\n\tlet node = T.root;\n\tlet delta = 0;\n\tlet nodeMaxEnd = 0;\n\tlet nodeStart = 0;\n\tconst editDelta = (textLength - (end - start));\n\twhile (node !== SENTINEL) {\n\t\tif (getNodeIsVisited(node)) {\n\t\t\t// going up from this node\n\t\t\tsetNodeIsVisited(node.left, false);\n\t\t\tsetNodeIsVisited(node.right, false);\n\t\t\tif (node === node.parent.right) {\n\t\t\t\tdelta -= node.parent.delta;\n\t\t\t}\n\t\t\trecomputeMaxEnd(node);\n\t\t\tnode = node.parent;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!getNodeIsVisited(node.left)) {\n\t\t\t// first time seeing this node\n\t\t\tnodeMaxEnd = delta + node.maxEnd;\n\t\t\tif (nodeMaxEnd < start) {\n\t\t\t\t// cover case b) from above\n\t\t\t\t// there is no need to search this node or its children\n\t\t\t\tsetNodeIsVisited(node, true);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (node.left !== SENTINEL) {\n\t\t\t\t// go left\n\t\t\t\tnode = node.left;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\t// handle current node\n\t\tnodeStart = delta + node.start;\n\t\tif (nodeStart > end) {\n\t\t\tnode.start += editDelta;\n\t\t\tnode.end += editDelta;\n\t\t\tnode.delta += editDelta;\n\t\t\tif (node.delta < Constants.MIN_SAFE_DELTA || node.delta > Constants.MAX_SAFE_DELTA) {\n\t\t\t\tT.requestNormalizeDelta = true;\n\t\t\t}\n\t\t\t// cover case a) from above\n\t\t\t// there is no need to search this node or its right subtree\n\t\t\tsetNodeIsVisited(node, true);\n\t\t\tcontinue;\n\t\t}\n\n\t\tsetNodeIsVisited(node, true);\n\n\t\tif (node.right !== SENTINEL && !getNodeIsVisited(node.right)) {\n\t\t\t// go right\n\t\t\tdelta += node.delta;\n\t\t\tnode = node.right;\n\t\t\tcontinue;\n\t\t}\n\t}\n\n\tsetNodeIsVisited(T.root, false);\n}\n\n//#endregion\n\n//#region Searching\n\nfunction collectNodesFromOwner(T: IntervalTree, ownerId: number): IntervalNode[] {\n\tlet node = T.root;\n\tlet result: IntervalNode[] = [];\n\tlet resultLen = 0;\n\twhile (node !== SENTINEL) {\n\t\tif (getNodeIsVisited(node)) {\n\t\t\t// going up from this node\n\t\t\tsetNodeIsVisited(node.left, false);\n\t\t\tsetNodeIsVisited(node.right, false);\n\t\t\tnode = node.parent;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (node.left !== SENTINEL && !getNodeIsVisited(node.left)) {\n\t\t\t// go left\n\t\t\tnode = node.left;\n\t\t\tcontinue;\n\t\t}\n\n\t\t// handle current node\n\t\tif (node.ownerId === ownerId) {\n\t\t\tresult[resultLen++] = node;\n\t\t}\n\n\t\tsetNodeIsVisited(node, true);\n\n\t\tif (node.right !== SENTINEL && !getNodeIsVisited(node.right)) {\n\t\t\t// go right\n\t\t\tnode = node.right;\n\t\t\tcontinue;\n\t\t}\n\t}\n\n\tsetNodeIsVisited(T.root, false);\n\n\treturn result;\n}\n\nfunction collectNodesPostOrder(T: IntervalTree): IntervalNode[] {\n\tlet node = T.root;\n\tlet result: IntervalNode[] = [];\n\tlet resultLen = 0;\n\twhile (node !== SENTINEL) {\n\t\tif (getNodeIsVisited(node)) {\n\t\t\t// going up from this node\n\t\t\tsetNodeIsVisited(node.left, false);\n\t\t\tsetNodeIsVisited(node.right, false);\n\t\t\tnode = node.parent;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (node.left !== SENTINEL && !getNodeIsVisited(node.left)) {\n\t\t\t// go left\n\t\t\tnode = node.left;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (node.right !== SENTINEL && !getNodeIsVisited(node.right)) {\n\t\t\t// go right\n\t\t\tnode = node.right;\n\t\t\tcontinue;\n\t\t}\n\n\t\t// handle current node\n\t\tresult[resultLen++] = node;\n\t\tsetNodeIsVisited(node, true);\n\t}\n\n\tsetNodeIsVisited(T.root, false);\n\n\treturn result;\n}\n\nfunction search(T: IntervalTree, filterOwnerId: number, filterOutValidation: boolean, cachedVersionId: number): IntervalNode[] {\n\tlet node = T.root;\n\tlet delta = 0;\n\tlet nodeStart = 0;\n\tlet nodeEnd = 0;\n\tlet result: IntervalNode[] = [];\n\tlet resultLen = 0;\n\twhile (node !== SENTINEL) {\n\t\tif (getNodeIsVisited(node)) {\n\t\t\t// going up from this node\n\t\t\tsetNodeIsVisited(node.left, false);\n\t\t\tsetNodeIsVisited(node.right, false);\n\t\t\tif (node === node.parent.right) {\n\t\t\t\tdelta -= node.parent.delta;\n\t\t\t}\n\t\t\tnode = node.parent;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (node.left !== SENTINEL && !getNodeIsVisited(node.left)) {\n\t\t\t// go left\n\t\t\tnode = node.left;\n\t\t\tcontinue;\n\t\t}\n\n\t\t// handle current node\n\t\tnodeStart = delta + node.start;\n\t\tnodeEnd = delta + node.end;\n\n\t\tnode.setCachedOffsets(nodeStart, nodeEnd, cachedVersionId);\n\n\t\tlet include = true;\n\t\tif (filterOwnerId && node.ownerId && node.ownerId !== filterOwnerId) {\n\t\t\tinclude = false;\n\t\t}\n\t\tif (filterOutValidation && getNodeIsForValidation(node)) {\n\t\t\tinclude = false;\n\t\t}\n\t\tif (include) {\n\t\t\tresult[resultLen++] = node;\n\t\t}\n\n\t\tsetNodeIsVisited(node, true);\n\n\t\tif (node.right !== SENTINEL && !getNodeIsVisited(node.right)) {\n\t\t\t// go right\n\t\t\tdelta += node.delta;\n\t\t\tnode = node.right;\n\t\t\tcontinue;\n\t\t}\n\t}\n\n\tsetNodeIsVisited(T.root, false);\n\n\treturn result;\n}\n\nfunction intervalSearch(T: IntervalTree, intervalStart: number, intervalEnd: number, filterOwnerId: number, filterOutValidation: boolean, cachedVersionId: number): IntervalNode[] {\n\t// https://en.wikipedia.org/wiki/Interval_tree#Augmented_tree\n\t// Now, it is known that two intervals A and B overlap only when both\n\t// A.low <= B.high and A.high >= B.low. When searching the trees for\n\t// nodes overlapping with a given interval, you can immediately skip:\n\t//  a) all nodes to the right of nodes whose low value is past the end of the given interval.\n\t//  b) all nodes that have their maximum 'high' value below the start of the given interval.\n\n\tlet node = T.root;\n\tlet delta = 0;\n\tlet nodeMaxEnd = 0;\n\tlet nodeStart = 0;\n\tlet nodeEnd = 0;\n\tlet result: IntervalNode[] = [];\n\tlet resultLen = 0;\n\twhile (node !== SENTINEL) {\n\t\tif (getNodeIsVisited(node)) {\n\t\t\t// going up from this node\n\t\t\tsetNodeIsVisited(node.left, false);\n\t\t\tsetNodeIsVisited(node.right, false);\n\t\t\tif (node === node.parent.right) {\n\t\t\t\tdelta -= node.parent.delta;\n\t\t\t}\n\t\t\tnode = node.parent;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!getNodeIsVisited(node.left)) {\n\t\t\t// first time seeing this node\n\t\t\tnodeMaxEnd = delta + node.maxEnd;\n\t\t\tif (nodeMaxEnd < intervalStart) {\n\t\t\t\t// cover case b) from above\n\t\t\t\t// there is no need to search this node or its children\n\t\t\t\tsetNodeIsVisited(node, true);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (node.left !== SENTINEL) {\n\t\t\t\t// go left\n\t\t\t\tnode = node.left;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\t// handle current node\n\t\tnodeStart = delta + node.start;\n\t\tif (nodeStart > intervalEnd) {\n\t\t\t// cover case a) from above\n\t\t\t// there is no need to search this node or its right subtree\n\t\t\tsetNodeIsVisited(node, true);\n\t\t\tcontinue;\n\t\t}\n\n\t\tnodeEnd = delta + node.end;\n\n\t\tif (nodeEnd >= intervalStart) {\n\t\t\t// There is overlap\n\t\t\tnode.setCachedOffsets(nodeStart, nodeEnd, cachedVersionId);\n\n\t\t\tlet include = true;\n\t\t\tif (filterOwnerId && node.ownerId && node.ownerId !== filterOwnerId) {\n\t\t\t\tinclude = false;\n\t\t\t}\n\t\t\tif (filterOutValidation && getNodeIsForValidation(node)) {\n\t\t\t\tinclude = false;\n\t\t\t}\n\n\t\t\tif (include) {\n\t\t\t\tresult[resultLen++] = node;\n\t\t\t}\n\t\t}\n\n\t\tsetNodeIsVisited(node, true);\n\n\t\tif (node.right !== SENTINEL && !getNodeIsVisited(node.right)) {\n\t\t\t// go right\n\t\t\tdelta += node.delta;\n\t\t\tnode = node.right;\n\t\t\tcontinue;\n\t\t}\n\t}\n\n\tsetNodeIsVisited(T.root, false);\n\n\treturn result;\n}\n\n//#endregion\n\n//#region Insertion\nfunction rbTreeInsert(T: IntervalTree, newNode: IntervalNode): IntervalNode {\n\tif (T.root === SENTINEL) {\n\t\tnewNode.parent = SENTINEL;\n\t\tnewNode.left = SENTINEL;\n\t\tnewNode.right = SENTINEL;\n\t\tsetNodeColor(newNode, NodeColor.Black);\n\t\tT.root = newNode;\n\t\treturn T.root;\n\t}\n\n\ttreeInsert(T, newNode);\n\n\trecomputeMaxEndWalkToRoot(newNode.parent);\n\n\t// repair tree\n\tlet x = newNode;\n\twhile (x !== T.root && getNodeColor(x.parent) === NodeColor.Red) {\n\t\tif (x.parent === x.parent.parent.left) {\n\t\t\tconst y = x.parent.parent.right;\n\n\t\t\tif (getNodeColor(y) === NodeColor.Red) {\n\t\t\t\tsetNodeColor(x.parent, NodeColor.Black);\n\t\t\t\tsetNodeColor(y, NodeColor.Black);\n\t\t\t\tsetNodeColor(x.parent.parent, NodeColor.Red);\n\t\t\t\tx = x.parent.parent;\n\t\t\t} else {\n\t\t\t\tif (x === x.parent.right) {\n\t\t\t\t\tx = x.parent;\n\t\t\t\t\tleftRotate(T, x);\n\t\t\t\t}\n\t\t\t\tsetNodeColor(x.parent, NodeColor.Black);\n\t\t\t\tsetNodeColor(x.parent.parent, NodeColor.Red);\n\t\t\t\trightRotate(T, x.parent.parent);\n\t\t\t}\n\t\t} else {\n\t\t\tconst y = x.parent.parent.left;\n\n\t\t\tif (getNodeColor(y) === NodeColor.Red) {\n\t\t\t\tsetNodeColor(x.parent, NodeColor.Black);\n\t\t\t\tsetNodeColor(y, NodeColor.Black);\n\t\t\t\tsetNodeColor(x.parent.parent, NodeColor.Red);\n\t\t\t\tx = x.parent.parent;\n\t\t\t} else {\n\t\t\t\tif (x === x.parent.left) {\n\t\t\t\t\tx = x.parent;\n\t\t\t\t\trightRotate(T, x);\n\t\t\t\t}\n\t\t\t\tsetNodeColor(x.parent, NodeColor.Black);\n\t\t\t\tsetNodeColor(x.parent.parent, NodeColor.Red);\n\t\t\t\tleftRotate(T, x.parent.parent);\n\t\t\t}\n\t\t}\n\t}\n\n\tsetNodeColor(T.root, NodeColor.Black);\n\n\treturn newNode;\n}\n\nfunction treeInsert(T: IntervalTree, z: IntervalNode): void {\n\tlet delta: number = 0;\n\tlet x = T.root;\n\tconst zAbsoluteStart = z.start;\n\tconst zAbsoluteEnd = z.end;\n\twhile (true) {\n\t\tconst cmp = intervalCompare(zAbsoluteStart, zAbsoluteEnd, x.start + delta, x.end + delta);\n\t\tif (cmp < 0) {\n\t\t\t// this node should be inserted to the left\n\t\t\t// => it is not affected by the node's delta\n\t\t\tif (x.left === SENTINEL) {\n\t\t\t\tz.start -= delta;\n\t\t\t\tz.end -= delta;\n\t\t\t\tz.maxEnd -= delta;\n\t\t\t\tx.left = z;\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\tx = x.left;\n\t\t\t}\n\t\t} else {\n\t\t\t// this node should be inserted to the right\n\t\t\t// => it is not affected by the node's delta\n\t\t\tif (x.right === SENTINEL) {\n\t\t\t\tz.start -= (delta + x.delta);\n\t\t\t\tz.end -= (delta + x.delta);\n\t\t\t\tz.maxEnd -= (delta + x.delta);\n\t\t\t\tx.right = z;\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\tdelta += x.delta;\n\t\t\t\tx = x.right;\n\t\t\t}\n\t\t}\n\t}\n\n\tz.parent = x;\n\tz.left = SENTINEL;\n\tz.right = SENTINEL;\n\tsetNodeColor(z, NodeColor.Red);\n}\n//#endregion\n\n//#region Deletion\nfunction rbTreeDelete(T: IntervalTree, z: IntervalNode): void {\n\n\tlet x: IntervalNode;\n\tlet y: IntervalNode;\n\n\t// RB-DELETE except we don't swap z and y in case c)\n\t// i.e. we always delete what's pointed at by z.\n\n\tif (z.left === SENTINEL) {\n\t\tx = z.right;\n\t\ty = z;\n\n\t\t// x's delta is no longer influenced by z's delta\n\t\tx.delta += z.delta;\n\t\tif (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {\n\t\t\tT.requestNormalizeDelta = true;\n\t\t}\n\t\tx.start += z.delta;\n\t\tx.end += z.delta;\n\n\t} else if (z.right === SENTINEL) {\n\t\tx = z.left;\n\t\ty = z;\n\n\t} else {\n\t\ty = leftest(z.right);\n\t\tx = y.right;\n\n\t\t// y's delta is no longer influenced by z's delta,\n\t\t// but we don't want to walk the entire right-hand-side subtree of x.\n\t\t// we therefore maintain z's delta in y, and adjust only x\n\t\tx.start += y.delta;\n\t\tx.end += y.delta;\n\t\tx.delta += y.delta;\n\t\tif (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {\n\t\t\tT.requestNormalizeDelta = true;\n\t\t}\n\n\t\ty.start += z.delta;\n\t\ty.end += z.delta;\n\t\ty.delta = z.delta;\n\t\tif (y.delta < Constants.MIN_SAFE_DELTA || y.delta > Constants.MAX_SAFE_DELTA) {\n\t\t\tT.requestNormalizeDelta = true;\n\t\t}\n\t}\n\n\tif (y === T.root) {\n\t\tT.root = x;\n\t\tsetNodeColor(x, NodeColor.Black);\n\n\t\tz.detach();\n\t\tresetSentinel();\n\t\trecomputeMaxEnd(x);\n\t\tT.root.parent = SENTINEL;\n\t\treturn;\n\t}\n\n\tlet yWasRed = (getNodeColor(y) === NodeColor.Red);\n\n\tif (y === y.parent.left) {\n\t\ty.parent.left = x;\n\t} else {\n\t\ty.parent.right = x;\n\t}\n\n\tif (y === z) {\n\t\tx.parent = y.parent;\n\t} else {\n\n\t\tif (y.parent === z) {\n\t\t\tx.parent = y;\n\t\t} else {\n\t\t\tx.parent = y.parent;\n\t\t}\n\n\t\ty.left = z.left;\n\t\ty.right = z.right;\n\t\ty.parent = z.parent;\n\t\tsetNodeColor(y, getNodeColor(z));\n\n\t\tif (z === T.root) {\n\t\t\tT.root = y;\n\t\t} else {\n\t\t\tif (z === z.parent.left) {\n\t\t\t\tz.parent.left = y;\n\t\t\t} else {\n\t\t\t\tz.parent.right = y;\n\t\t\t}\n\t\t}\n\n\t\tif (y.left !== SENTINEL) {\n\t\t\ty.left.parent = y;\n\t\t}\n\t\tif (y.right !== SENTINEL) {\n\t\t\ty.right.parent = y;\n\t\t}\n\t}\n\n\tz.detach();\n\n\tif (yWasRed) {\n\t\trecomputeMaxEndWalkToRoot(x.parent);\n\t\tif (y !== z) {\n\t\t\trecomputeMaxEndWalkToRoot(y);\n\t\t\trecomputeMaxEndWalkToRoot(y.parent);\n\t\t}\n\t\tresetSentinel();\n\t\treturn;\n\t}\n\n\trecomputeMaxEndWalkToRoot(x);\n\trecomputeMaxEndWalkToRoot(x.parent);\n\tif (y !== z) {\n\t\trecomputeMaxEndWalkToRoot(y);\n\t\trecomputeMaxEndWalkToRoot(y.parent);\n\t}\n\n\t// RB-DELETE-FIXUP\n\tlet w: IntervalNode;\n\twhile (x !== T.root && getNodeColor(x) === NodeColor.Black) {\n\n\t\tif (x === x.parent.left) {\n\t\t\tw = x.parent.right;\n\n\t\t\tif (getNodeColor(w) === NodeColor.Red) {\n\t\t\t\tsetNodeColor(w, NodeColor.Black);\n\t\t\t\tsetNodeColor(x.parent, NodeColor.Red);\n\t\t\t\tleftRotate(T, x.parent);\n\t\t\t\tw = x.parent.right;\n\t\t\t}\n\n\t\t\tif (getNodeColor(w.left) === NodeColor.Black && getNodeColor(w.right) === NodeColor.Black) {\n\t\t\t\tsetNodeColor(w, NodeColor.Red);\n\t\t\t\tx = x.parent;\n\t\t\t} else {\n\t\t\t\tif (getNodeColor(w.right) === NodeColor.Black) {\n\t\t\t\t\tsetNodeColor(w.left, NodeColor.Black);\n\t\t\t\t\tsetNodeColor(w, NodeColor.Red);\n\t\t\t\t\trightRotate(T, w);\n\t\t\t\t\tw = x.parent.right;\n\t\t\t\t}\n\n\t\t\t\tsetNodeColor(w, getNodeColor(x.parent));\n\t\t\t\tsetNodeColor(x.parent, NodeColor.Black);\n\t\t\t\tsetNodeColor(w.right, NodeColor.Black);\n\t\t\t\tleftRotate(T, x.parent);\n\t\t\t\tx = T.root;\n\t\t\t}\n\n\t\t} else {\n\t\t\tw = x.parent.left;\n\n\t\t\tif (getNodeColor(w) === NodeColor.Red) {\n\t\t\t\tsetNodeColor(w, NodeColor.Black);\n\t\t\t\tsetNodeColor(x.parent, NodeColor.Red);\n\t\t\t\trightRotate(T, x.parent);\n\t\t\t\tw = x.parent.left;\n\t\t\t}\n\n\t\t\tif (getNodeColor(w.left) === NodeColor.Black && getNodeColor(w.right) === NodeColor.Black) {\n\t\t\t\tsetNodeColor(w, NodeColor.Red);\n\t\t\t\tx = x.parent;\n\n\t\t\t} else {\n\t\t\t\tif (getNodeColor(w.left) === NodeColor.Black) {\n\t\t\t\t\tsetNodeColor(w.right, NodeColor.Black);\n\t\t\t\t\tsetNodeColor(w, NodeColor.Red);\n\t\t\t\t\tleftRotate(T, w);\n\t\t\t\t\tw = x.parent.left;\n\t\t\t\t}\n\n\t\t\t\tsetNodeColor(w, getNodeColor(x.parent));\n\t\t\t\tsetNodeColor(x.parent, NodeColor.Black);\n\t\t\t\tsetNodeColor(w.left, NodeColor.Black);\n\t\t\t\trightRotate(T, x.parent);\n\t\t\t\tx = T.root;\n\t\t\t}\n\t\t}\n\t}\n\n\tsetNodeColor(x, NodeColor.Black);\n\tresetSentinel();\n}\n\nfunction leftest(node: IntervalNode): IntervalNode {\n\twhile (node.left !== SENTINEL) {\n\t\tnode = node.left;\n\t}\n\treturn node;\n}\n\nfunction resetSentinel(): void {\n\tSENTINEL.parent = SENTINEL;\n\tSENTINEL.delta = 0; // optional\n\tSENTINEL.start = 0; // optional\n\tSENTINEL.end = 0; // optional\n}\n//#endregion\n\n//#region Rotations\nfunction leftRotate(T: IntervalTree, x: IntervalNode): void {\n\tconst y = x.right;\t\t\t\t// set y.\n\n\ty.delta += x.delta;\t\t\t\t// y's delta is no longer influenced by x's delta\n\tif (y.delta < Constants.MIN_SAFE_DELTA || y.delta > Constants.MAX_SAFE_DELTA) {\n\t\tT.requestNormalizeDelta = true;\n\t}\n\ty.start += x.delta;\n\ty.end += x.delta;\n\n\tx.right = y.left;\t\t\t\t// turn y's left subtree into x's right subtree.\n\tif (y.left !== SENTINEL) {\n\t\ty.left.parent = x;\n\t}\n\ty.parent = x.parent;\t\t\t// link x's parent to y.\n\tif (x.parent === SENTINEL) {\n\t\tT.root = y;\n\t} else if (x === x.parent.left) {\n\t\tx.parent.left = y;\n\t} else {\n\t\tx.parent.right = y;\n\t}\n\n\ty.left = x;\t\t\t\t\t\t// put x on y's left.\n\tx.parent = y;\n\n\trecomputeMaxEnd(x);\n\trecomputeMaxEnd(y);\n}\n\nfunction rightRotate(T: IntervalTree, y: IntervalNode): void {\n\tconst x = y.left;\n\n\ty.delta -= x.delta;\n\tif (y.delta < Constants.MIN_SAFE_DELTA || y.delta > Constants.MAX_SAFE_DELTA) {\n\t\tT.requestNormalizeDelta = true;\n\t}\n\ty.start -= x.delta;\n\ty.end -= x.delta;\n\n\ty.left = x.right;\n\tif (x.right !== SENTINEL) {\n\t\tx.right.parent = y;\n\t}\n\tx.parent = y.parent;\n\tif (y.parent === SENTINEL) {\n\t\tT.root = x;\n\t} else if (y === y.parent.right) {\n\t\ty.parent.right = x;\n\t} else {\n\t\ty.parent.left = x;\n\t}\n\n\tx.right = y;\n\ty.parent = x;\n\n\trecomputeMaxEnd(y);\n\trecomputeMaxEnd(x);\n}\n//#endregion\n\n//#region max end computation\n\nfunction computeMaxEnd(node: IntervalNode): number {\n\tlet maxEnd = node.end;\n\tif (node.left !== SENTINEL) {\n\t\tconst leftMaxEnd = node.left.maxEnd;\n\t\tif (leftMaxEnd > maxEnd) {\n\t\t\tmaxEnd = leftMaxEnd;\n\t\t}\n\t}\n\tif (node.right !== SENTINEL) {\n\t\tconst rightMaxEnd = node.right.maxEnd + node.delta;\n\t\tif (rightMaxEnd > maxEnd) {\n\t\t\tmaxEnd = rightMaxEnd;\n\t\t}\n\t}\n\treturn maxEnd;\n}\n\nexport function recomputeMaxEnd(node: IntervalNode): void {\n\tnode.maxEnd = computeMaxEnd(node);\n}\n\nfunction recomputeMaxEndWalkToRoot(node: IntervalNode): void {\n\twhile (node !== SENTINEL) {\n\n\t\tconst maxEnd = computeMaxEnd(node);\n\n\t\tif (node.maxEnd === maxEnd) {\n\t\t\t// no need to go further\n\t\t\treturn;\n\t\t}\n\n\t\tnode.maxEnd = maxEnd;\n\t\tnode = node.parent;\n\t}\n}\n\n//#endregion\n\n//#region utils\nexport function intervalCompare(aStart: number, aEnd: number, bStart: number, bEnd: number): number {\n\tif (aStart === bStart) {\n\t\treturn aEnd - bEnd;\n\t}\n\treturn aStart - bStart;\n}\n//#endregion\n"]}