{"version":3,"sources":["vs/editor/browser/core/keybindingCancellation.ts"],"names":[],"mappings":"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","file":"keybindingCancellation.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyCode } from 'vs/base/common/keyCodes';\nimport { EditorCommand, registerEditorCommand } from 'vs/editor/browser/editorExtensions';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { IContextKeyService, RawContextKey, IContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { CancellationTokenSource, CancellationToken } from 'vs/base/common/cancellation';\nimport { LinkedList } from 'vs/base/common/linkedList';\nimport { createDecorator, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { localize } from 'vs/nls';\n\n\nconst IEditorCancellationTokens = createDecorator<IEditorCancellationTokens>('IEditorCancelService');\n\ninterface IEditorCancellationTokens {\n\treadonly _serviceBrand: undefined;\n\tadd(editor: ICodeEditor, cts: CancellationTokenSource): () => void;\n\tcancel(editor: ICodeEditor): void;\n}\n\nconst ctxCancellableOperation = new RawContextKey('cancellableOperation', false, localize('cancellableOperation', 'Whether the editor runs a cancellable operation, e.g. like \\'Peek References\\''));\n\nregisterSingleton(IEditorCancellationTokens, class implements IEditorCancellationTokens {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _tokens = new WeakMap<ICodeEditor, { key: IContextKey<boolean>, tokens: LinkedList<CancellationTokenSource> }>();\n\n\tadd(editor: ICodeEditor, cts: CancellationTokenSource): () => void {\n\t\tlet data = this._tokens.get(editor);\n\t\tif (!data) {\n\t\t\tdata = editor.invokeWithinContext(accessor => {\n\t\t\t\tconst key = ctxCancellableOperation.bindTo(accessor.get(IContextKeyService));\n\t\t\t\tconst tokens = new LinkedList<CancellationTokenSource>();\n\t\t\t\treturn { key, tokens };\n\t\t\t});\n\t\t\tthis._tokens.set(editor, data);\n\t\t}\n\n\t\tlet removeFn: Function | undefined;\n\n\t\tdata.key.set(true);\n\t\tremoveFn = data.tokens.push(cts);\n\n\t\treturn () => {\n\t\t\t// remove w/o cancellation\n\t\t\tif (removeFn) {\n\t\t\t\tremoveFn();\n\t\t\t\tdata!.key.set(!data!.tokens.isEmpty());\n\t\t\t\tremoveFn = undefined;\n\t\t\t}\n\t\t};\n\t}\n\n\tcancel(editor: ICodeEditor): void {\n\t\tconst data = this._tokens.get(editor);\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\t\t// remove with cancellation\n\t\tconst cts = data.tokens.pop();\n\t\tif (cts) {\n\t\t\tcts.cancel();\n\t\t\tdata.key.set(!data.tokens.isEmpty());\n\t\t}\n\t}\n\n}, true);\n\nexport class EditorKeybindingCancellationTokenSource extends CancellationTokenSource {\n\n\tprivate readonly _unregister: Function;\n\n\tconstructor(readonly editor: ICodeEditor, parent?: CancellationToken) {\n\t\tsuper(parent);\n\t\tthis._unregister = editor.invokeWithinContext(accessor => accessor.get(IEditorCancellationTokens).add(editor, this));\n\t}\n\n\toverride dispose(): void {\n\t\tthis._unregister();\n\t\tsuper.dispose();\n\t}\n}\n\nregisterEditorCommand(new class extends EditorCommand {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.cancelOperation',\n\t\t\tkbOpts: {\n\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t\tprimary: KeyCode.Escape\n\t\t\t},\n\t\t\tprecondition: ctxCancellableOperation\n\t\t});\n\t}\n\n\trunEditorCommand(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\taccessor.get(IEditorCancellationTokens).cancel(editor);\n\t}\n});\n"]}