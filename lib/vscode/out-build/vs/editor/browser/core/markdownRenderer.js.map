{"version":3,"file":"markdownRenderer.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/browser/core/markdownRenderer.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IMarkdownString } from 'vs/base/common/htmlContent';\nimport { renderMarkdown, MarkdownRenderOptions, MarkedOptions } from 'vs/base/browser/markdownRenderer';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { tokenizeToString } from 'vs/editor/common/modes/textToHtmlTokenizer';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { Emitter } from 'vs/base/common/event';\nimport { IDisposable, DisposableStore } from 'vs/base/common/lifecycle';\nimport { ITokenizationSupport, TokenizationRegistry } from 'vs/editor/common/modes';\nimport { EditorOption } from 'vs/editor/common/config/editorOptions';\nimport { URI } from 'vs/base/common/uri';\n\nexport interface IMarkdownRenderResult extends IDisposable {\n\telement: HTMLElement;\n}\n\nexport interface IMarkdownRendererOptions {\n\teditor?: ICodeEditor;\n\tbaseUrl?: URI;\n\tcodeBlockFontFamily?: string;\n}\n\n/**\n * Markdown renderer that can render codeblocks with the editor mechanics. This\n * renderer should always be preferred.\n */\nexport class MarkdownRenderer {\n\n\tprivate static _ttpTokenizer = window.trustedTypes?.createPolicy('tokenizeToString', {\n\t\tcreateHTML(value: string, tokenizer: ITokenizationSupport | undefined) {\n\t\t\treturn tokenizeToString(value, tokenizer);\n\t\t}\n\t});\n\n\tprivate readonly _onDidRenderAsync = new Emitter<void>();\n\treadonly onDidRenderAsync = this._onDidRenderAsync.event;\n\n\tconstructor(\n\t\tprivate readonly _options: IMarkdownRendererOptions,\n\t\t@IModeService private readonly _modeService: IModeService,\n\t\t@IOpenerService private readonly _openerService: IOpenerService,\n\t) { }\n\n\tdispose(): void {\n\t\tthis._onDidRenderAsync.dispose();\n\t}\n\n\trender(markdown: IMarkdownString | undefined, options?: MarkdownRenderOptions, markedOptions?: MarkedOptions): IMarkdownRenderResult {\n\t\tconst disposeables = new DisposableStore();\n\n\t\tlet element: HTMLElement;\n\t\tif (!markdown) {\n\t\t\telement = document.createElement('span');\n\t\t} else {\n\t\t\telement = renderMarkdown(markdown, { ...this._getRenderOptions(markdown, disposeables), ...options }, markedOptions);\n\t\t}\n\n\t\treturn {\n\t\t\telement,\n\t\t\tdispose: () => disposeables.dispose()\n\t\t};\n\t}\n\n\tprotected _getRenderOptions(markdown: IMarkdownString, disposeables: DisposableStore): MarkdownRenderOptions {\n\t\treturn {\n\t\t\tbaseUrl: this._options.baseUrl,\n\t\t\tcodeBlockRenderer: async (languageAlias, value) => {\n\t\t\t\t// In markdown,\n\t\t\t\t// it is possible that we stumble upon language aliases (e.g.js instead of javascript)\n\t\t\t\t// it is possible no alias is given in which case we fall back to the current editor lang\n\t\t\t\tlet modeId: string | undefined | null;\n\t\t\t\tif (languageAlias) {\n\t\t\t\t\tmodeId = this._modeService.getModeIdForLanguageName(languageAlias);\n\t\t\t\t} else if (this._options.editor) {\n\t\t\t\t\tmodeId = this._options.editor.getModel()?.getLanguageIdentifier().language;\n\t\t\t\t}\n\t\t\t\tif (!modeId) {\n\t\t\t\t\tmodeId = 'plaintext';\n\t\t\t\t}\n\t\t\t\tthis._modeService.triggerMode(modeId);\n\t\t\t\tconst tokenization = await TokenizationRegistry.getPromise(modeId) ?? undefined;\n\n\t\t\t\tconst element = document.createElement('span');\n\n\t\t\t\telement.innerHTML = (MarkdownRenderer._ttpTokenizer?.createHTML(value, tokenization) ?? tokenizeToString(value, tokenization)) as string;\n\n\t\t\t\t// use \"good\" font\n\t\t\t\tlet fontFamily = this._options.codeBlockFontFamily;\n\t\t\t\tif (this._options.editor) {\n\t\t\t\t\tfontFamily = this._options.editor.getOption(EditorOption.fontInfo).fontFamily;\n\t\t\t\t}\n\t\t\t\tif (fontFamily) {\n\t\t\t\t\telement.style.fontFamily = fontFamily;\n\t\t\t\t}\n\n\t\t\t\treturn element;\n\t\t\t},\n\t\t\tasyncRenderCallback: () => this._onDidRenderAsync.fire(),\n\t\t\tactionHandler: {\n\t\t\t\tcallback: (content) => this._openerService.open(content, { fromUserGesture: true, allowContributedOpeners: true, allowCommands: markdown.isTrusted }).catch(onUnexpectedError),\n\t\t\t\tdisposeables\n\t\t\t}\n\t\t};\n\t}\n}\n"]}