{"version":3,"file":"documentSymbols.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/contrib/documentSymbols/documentSymbols.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAYzF,KAAK,UAAU,kBAAkB,CAAC,QAAoB,EAAE,IAAa,EAAE,KAAwB;QACrG,MAAM,KAAK,GAAG,MAAM,2BAAY,CAAC,MAAM,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QACzD,OAAO,IAAI;YACV,CAAC,CAAC,KAAK,CAAC,uBAAuB,EAAE;YACjC,CAAC,CAAC,KAAK,CAAC,kBAAkB,EAAE,CAAC;IAC/B,CAAC;IALD,gDAKC;IAED,2BAAgB,CAAC,eAAe,CAAC,gCAAgC,EAAE,KAAK,WAAW,QAAQ,EAAE,GAAG,IAAI;QACnG,MAAM,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC;QACxB,CAAA,GAAA,kBAAU,CAAA,CAAC,SAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;QAEhC,MAAM,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,4BAAa,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAC7D,IAAI,KAAK,EAAE;YACV,OAAO,kBAAkB,CAAC,KAAK,EAAE,KAAK,EAAE,gCAAiB,CAAC,IAAI,CAAC,CAAC;SAChE;QAED,MAAM,SAAS,GAAG,MAAM,QAAQ,CAAC,GAAG,CAAC,mCAAiB,CAAC,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;QACvF,IAAI;YACH,OAAO,MAAM,kBAAkB,CAAC,SAAS,CAAC,MAAM,CAAC,eAAe,EAAE,KAAK,EAAE,gCAAiB,CAAC,IAAI,CAAC,CAAC;SACjG;gBAAS;YACT,SAAS,CAAC,OAAO,EAAE,CAAC;SACpB;IACF,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { DocumentSymbol } from 'vs/editor/common/modes';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { ITextModelService } from 'vs/editor/common/services/resolverService';\nimport { OutlineModel } from 'vs/editor/contrib/documentSymbols/outlineModel';\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { assertType } from 'vs/base/common/types';\n\nexport async function getDocumentSymbols(document: ITextModel, flat: boolean, token: CancellationToken): Promise<DocumentSymbol[]> {\n\tconst model = await OutlineModel.create(document, token);\n\treturn flat\n\t\t? model.asListOfDocumentSymbols()\n\t\t: model.getTopLevelSymbols();\n}\n\nCommandsRegistry.registerCommand('_executeDocumentSymbolProvider', async function (accessor, ...args) {\n\tconst [resource] = args;\n\tassertType(URI.isUri(resource));\n\n\tconst model = accessor.get(IModelService).getModel(resource);\n\tif (model) {\n\t\treturn getDocumentSymbols(model, false, CancellationToken.None);\n\t}\n\n\tconst reference = await accessor.get(ITextModelService).createModelReference(resource);\n\ttry {\n\t\treturn await getDocumentSymbols(reference.object.textEditorModel, false, CancellationToken.None);\n\t} finally {\n\t\treference.dispose();\n\t}\n});\n"]}