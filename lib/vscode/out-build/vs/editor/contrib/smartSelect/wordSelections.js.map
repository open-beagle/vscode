{"version":3,"file":"wordSelections.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/contrib/smartSelect/wordSelections.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { SelectionRangeProvider, SelectionRange } from 'vs/editor/common/modes';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { CharCode } from 'vs/base/common/charCode';\nimport { isUpperAsciiLetter, isLowerAsciiLetter } from 'vs/base/common/strings';\n\nexport class WordSelectionRangeProvider implements SelectionRangeProvider {\n\n\tprovideSelectionRanges(model: ITextModel, positions: Position[]): SelectionRange[][] {\n\t\tconst result: SelectionRange[][] = [];\n\t\tfor (const position of positions) {\n\t\t\tconst bucket: SelectionRange[] = [];\n\t\t\tresult.push(bucket);\n\t\t\tthis._addInWordRanges(bucket, model, position);\n\t\t\tthis._addWordRanges(bucket, model, position);\n\t\t\tthis._addWhitespaceLine(bucket, model, position);\n\t\t\tbucket.push({ range: model.getFullModelRange() });\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate _addInWordRanges(bucket: SelectionRange[], model: ITextModel, pos: Position): void {\n\t\tconst obj = model.getWordAtPosition(pos);\n\t\tif (!obj) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet { word, startColumn } = obj;\n\t\tlet offset = pos.column - startColumn;\n\t\tlet start = offset;\n\t\tlet end = offset;\n\t\tlet lastCh: number = 0;\n\n\t\t// LEFT anchor (start)\n\t\tfor (; start >= 0; start--) {\n\t\t\tlet ch = word.charCodeAt(start);\n\t\t\tif ((start !== offset) && (ch === CharCode.Underline || ch === CharCode.Dash)) {\n\t\t\t\t// foo-bar OR foo_bar\n\t\t\t\tbreak;\n\t\t\t} else if (isLowerAsciiLetter(ch) && isUpperAsciiLetter(lastCh)) {\n\t\t\t\t// fooBar\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlastCh = ch;\n\t\t}\n\t\tstart += 1;\n\n\t\t// RIGHT anchor (end)\n\t\tfor (; end < word.length; end++) {\n\t\t\tlet ch = word.charCodeAt(end);\n\t\t\tif (isUpperAsciiLetter(ch) && isLowerAsciiLetter(lastCh)) {\n\t\t\t\t// fooBar\n\t\t\t\tbreak;\n\t\t\t} else if (ch === CharCode.Underline || ch === CharCode.Dash) {\n\t\t\t\t// foo-bar OR foo_bar\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlastCh = ch;\n\t\t}\n\n\t\tif (start < end) {\n\t\t\tbucket.push({ range: new Range(pos.lineNumber, startColumn + start, pos.lineNumber, startColumn + end) });\n\t\t}\n\t}\n\n\tprivate _addWordRanges(bucket: SelectionRange[], model: ITextModel, pos: Position): void {\n\t\tconst word = model.getWordAtPosition(pos);\n\t\tif (word) {\n\t\t\tbucket.push({ range: new Range(pos.lineNumber, word.startColumn, pos.lineNumber, word.endColumn) });\n\t\t}\n\t}\n\n\tprivate _addWhitespaceLine(bucket: SelectionRange[], model: ITextModel, pos: Position): void {\n\t\tif (model.getLineLength(pos.lineNumber) > 0\n\t\t\t&& model.getLineFirstNonWhitespaceColumn(pos.lineNumber) === 0\n\t\t\t&& model.getLineLastNonWhitespaceColumn(pos.lineNumber) === 0\n\t\t) {\n\t\t\tbucket.push({ range: new Range(pos.lineNumber, 1, pos.lineNumber, model.getLineMaxColumn(pos.lineNumber)) });\n\t\t}\n\t}\n}\n"]}