{"version":3,"file":"foldingRanges.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/contrib/folding/test/foldingRanges.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAQhG,IAAI,OAAO,GAAmB;QAC7B,KAAK,EAAE,eAAe;QACtB,GAAG,EAAE,kBAAkB;KACvB,CAAC;IAGF,KAAK,CAAC,eAAe,EAAE,GAAG,EAAE;QAE3B,IAAI,CAAC,0BAA0B,EAAE,GAAG,EAAE;YACrC,IAAI,KAAK,GAAa,EAAE,CAAC;YACzB,IAAI,QAAQ,GAAG,mCAAmB,CAAC;YACnC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,EAAE,EAAE;gBAClC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aACtB;YACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,EAAE,EAAE;gBAClC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;aACzB;YACD,IAAI,KAAK,GAAG,CAAA,GAAA,iCAAe,CAAA,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YAC9C,IAAI,MAAM,GAAG,CAAA,GAAA,mCAAa,CAAA,CAAC,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,mCAAmB,CAAC,CAAC;YACvE,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;YACnD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,EAAE,EAAE;gBAClC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,OAAO,GAAG,CAAC,CAAC,CAAC;gBACrE,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,QAAQ,GAAG,CAAC,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;gBAC5E,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,QAAQ,GAAG,CAAC,CAAC,CAAC;aAClE;QAEF,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,WAAW,EAAE,GAAG,EAAE;YACtB,IAAI,KAAK,GAAG;gBACZ,MAAM,CAAC,SAAS;gBAChB,MAAM,CAAC,YAAY;gBACnB,MAAM,CAAC,WAAW;gBAClB,MAAM,CAAC,gBAAgB;gBACvB,MAAM,CAAC,iBAAiB;gBACxB,MAAM,CAAC,iBAAiB;gBACxB,MAAM,CAAC,OAAO;gBACd,MAAM,CAAC,EAAE;gBACT,MAAM,CAAC,iBAAiB;gBACxB,OAAO,CAAC,eAAe;gBACvB,OAAO,CAAC,OAAO;gBACf,OAAO,CAAC,KAAK;gBACb,OAAO,CAAC,GAAG;aAAC,CAAC;YAEb,IAAI,SAAS,GAAG,CAAA,GAAA,iCAAe,CAAA,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YAClD,IAAI;gBACH,IAAI,MAAM,GAAG,CAAA,GAAA,mCAAa,CAAA,CAAC,SAAS,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;gBACtD,oBAAoB;gBACpB,qBAAqB;gBACrB,qBAAqB;gBACrB,oBAAoB;gBACpB,qBAAqB;gBAErB,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;gBAChD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;gBAChD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;gBAChD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;gBAChD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;gBAChD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;gBAChD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;gBAChD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;gBAChD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;gBAChD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;gBAClD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;gBAClD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;gBAClD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;aACnD;oBAAS;gBACT,SAAS,CAAC,OAAO,EAAE,CAAC;aACpB;QAGF,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,cAAc,EAAE,GAAG,EAAE;YACzB,IAAI,KAAK,GAAa,EAAE,CAAC;YACzB,IAAI,QAAQ,GAAG,GAAG,CAAC;YACnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,EAAE,EAAE;gBAClC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aACtB;YACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,EAAE,EAAE;gBAClC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;aACzB;YACD,IAAI,KAAK,GAAG,CAAA,GAAA,iCAAe,CAAA,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YAC9C,IAAI,MAAM,GAAG,CAAA,GAAA,mCAAa,CAAA,CAAC,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,mCAAmB,CAAC,CAAC;YACvE,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;YACnD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,EAAE,EAAE;gBAClC,MAAM,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;aACpC;YACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,EAAE,EAAE;gBAClC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,MAAM,GAAG,CAAC,CAAC,CAAC;aACnE;QACF,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { createTextModel } from 'vs/editor/test/common/editorTestUtils';\nimport { computeRanges } from 'vs/editor/contrib/folding/indentRangeProvider';\nimport { FoldingMarkers } from 'vs/editor/common/modes/languageConfiguration';\nimport { MAX_FOLDING_REGIONS } from 'vs/editor/contrib/folding/foldingRanges';\n\nlet markers: FoldingMarkers = {\n\tstart: /^\\s*#region\\b/,\n\tend: /^\\s*#endregion\\b/\n};\n\n\nsuite('FoldingRanges', () => {\n\n\ttest('test max folding regions', () => {\n\t\tlet lines: string[] = [];\n\t\tlet nRegions = MAX_FOLDING_REGIONS;\n\t\tfor (let i = 0; i < nRegions; i++) {\n\t\t\tlines.push('#region');\n\t\t}\n\t\tfor (let i = 0; i < nRegions; i++) {\n\t\t\tlines.push('#endregion');\n\t\t}\n\t\tlet model = createTextModel(lines.join('\\n'));\n\t\tlet actual = computeRanges(model, false, markers, MAX_FOLDING_REGIONS);\n\t\tassert.strictEqual(actual.length, nRegions, 'len');\n\t\tfor (let i = 0; i < nRegions; i++) {\n\t\t\tassert.strictEqual(actual.getStartLineNumber(i), i + 1, 'start' + i);\n\t\t\tassert.strictEqual(actual.getEndLineNumber(i), nRegions * 2 - i, 'end' + i);\n\t\t\tassert.strictEqual(actual.getParentIndex(i), i - 1, 'parent' + i);\n\t\t}\n\n\t});\n\n\ttest('findRange', () => {\n\t\tlet lines = [\n\t\t/* 1*/\t'#region',\n\t\t/* 2*/\t'#endregion',\n\t\t/* 3*/\t'class A {',\n\t\t/* 4*/\t'  void foo() {',\n\t\t/* 5*/\t'    if (true) {',\n\t\t/* 6*/\t'        return;',\n\t\t/* 7*/\t'    }',\n\t\t/* 8*/\t'',\n\t\t/* 9*/\t'    if (true) {',\n\t\t/* 10*/\t'      return;',\n\t\t/* 11*/\t'    }',\n\t\t/* 12*/\t'  }',\n\t\t/* 13*/\t'}'];\n\n\t\tlet textModel = createTextModel(lines.join('\\n'));\n\t\ttry {\n\t\t\tlet actual = computeRanges(textModel, false, markers);\n\t\t\t// let r0 = r(1, 2);\n\t\t\t// let r1 = r(3, 12);\n\t\t\t// let r2 = r(4, 11);\n\t\t\t// let r3 = r(5, 6);\n\t\t\t// let r4 = r(9, 10);\n\n\t\t\tassert.strictEqual(actual.findRange(1), 0, '1');\n\t\t\tassert.strictEqual(actual.findRange(2), 0, '2');\n\t\t\tassert.strictEqual(actual.findRange(3), 1, '3');\n\t\t\tassert.strictEqual(actual.findRange(4), 2, '4');\n\t\t\tassert.strictEqual(actual.findRange(5), 3, '5');\n\t\t\tassert.strictEqual(actual.findRange(6), 3, '6');\n\t\t\tassert.strictEqual(actual.findRange(7), 2, '7');\n\t\t\tassert.strictEqual(actual.findRange(8), 2, '8');\n\t\t\tassert.strictEqual(actual.findRange(9), 4, '9');\n\t\t\tassert.strictEqual(actual.findRange(10), 4, '10');\n\t\t\tassert.strictEqual(actual.findRange(11), 2, '11');\n\t\t\tassert.strictEqual(actual.findRange(12), 1, '12');\n\t\t\tassert.strictEqual(actual.findRange(13), -1, '13');\n\t\t} finally {\n\t\t\ttextModel.dispose();\n\t\t}\n\n\n\t});\n\n\ttest('setCollapsed', () => {\n\t\tlet lines: string[] = [];\n\t\tlet nRegions = 500;\n\t\tfor (let i = 0; i < nRegions; i++) {\n\t\t\tlines.push('#region');\n\t\t}\n\t\tfor (let i = 0; i < nRegions; i++) {\n\t\t\tlines.push('#endregion');\n\t\t}\n\t\tlet model = createTextModel(lines.join('\\n'));\n\t\tlet actual = computeRanges(model, false, markers, MAX_FOLDING_REGIONS);\n\t\tassert.strictEqual(actual.length, nRegions, 'len');\n\t\tfor (let i = 0; i < nRegions; i++) {\n\t\t\tactual.setCollapsed(i, i % 3 === 0);\n\t\t}\n\t\tfor (let i = 0; i < nRegions; i++) {\n\t\t\tassert.strictEqual(actual.isCollapsed(i), i % 3 === 0, 'line' + i);\n\t\t}\n\t});\n});\n"]}