{"version":3,"file":"foldingModel.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/contrib/folding/foldingModel.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ITextModel, IModelDecorationOptions, IModelDeltaDecoration, IModelDecorationsChangeAccessor } from 'vs/editor/common/model';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { FoldingRegions, ILineRange, FoldingRegion } from './foldingRanges';\n\nexport interface IDecorationProvider {\n\tgetDecorationOption(isCollapsed: boolean, isHidden: boolean): IModelDecorationOptions;\n\tdeltaDecorations(oldDecorations: string[], newDecorations: IModelDeltaDecoration[]): string[];\n\tchangeDecorations<T>(callback: (changeAccessor: IModelDecorationsChangeAccessor) => T): T | null;\n}\n\nexport interface FoldingModelChangeEvent {\n\tmodel: FoldingModel;\n\tcollapseStateChanged?: FoldingRegion[];\n}\n\nexport type CollapseMemento = ILineRange[];\n\nexport class FoldingModel {\n\tprivate readonly _textModel: ITextModel;\n\tprivate readonly _decorationProvider: IDecorationProvider;\n\n\tprivate _regions: FoldingRegions;\n\tprivate _editorDecorationIds: string[];\n\tprivate _isInitialized: boolean;\n\n\tprivate readonly _updateEventEmitter = new Emitter<FoldingModelChangeEvent>();\n\tpublic readonly onDidChange: Event<FoldingModelChangeEvent> = this._updateEventEmitter.event;\n\n\tpublic get regions(): FoldingRegions { return this._regions; }\n\tpublic get textModel() { return this._textModel; }\n\tpublic get isInitialized() { return this._isInitialized; }\n\tpublic get decorationProvider() { return this._decorationProvider; }\n\n\tconstructor(textModel: ITextModel, decorationProvider: IDecorationProvider) {\n\t\tthis._textModel = textModel;\n\t\tthis._decorationProvider = decorationProvider;\n\t\tthis._regions = new FoldingRegions(new Uint32Array(0), new Uint32Array(0));\n\t\tthis._editorDecorationIds = [];\n\t\tthis._isInitialized = false;\n\t}\n\n\tpublic toggleCollapseState(toggledRegions: FoldingRegion[]) {\n\t\tif (!toggledRegions.length) {\n\t\t\treturn;\n\t\t}\n\t\ttoggledRegions = toggledRegions.sort((r1, r2) => r1.regionIndex - r2.regionIndex);\n\n\t\tconst processed: { [key: string]: boolean | undefined } = {};\n\t\tthis._decorationProvider.changeDecorations(accessor => {\n\t\t\tlet k = 0; // index from [0 ... this.regions.length]\n\t\t\tlet dirtyRegionEndLine = -1; // end of the range where decorations need to be updated\n\t\t\tlet lastHiddenLine = -1; // the end of the last hidden lines\n\t\t\tconst updateDecorationsUntil = (index: number) => {\n\t\t\t\twhile (k < index) {\n\t\t\t\t\tconst endLineNumber = this._regions.getEndLineNumber(k);\n\t\t\t\t\tconst isCollapsed = this._regions.isCollapsed(k);\n\t\t\t\t\tif (endLineNumber <= dirtyRegionEndLine) {\n\t\t\t\t\t\taccessor.changeDecorationOptions(this._editorDecorationIds[k], this._decorationProvider.getDecorationOption(isCollapsed, endLineNumber <= lastHiddenLine));\n\t\t\t\t\t}\n\t\t\t\t\tif (isCollapsed && endLineNumber > lastHiddenLine) {\n\t\t\t\t\t\tlastHiddenLine = endLineNumber;\n\t\t\t\t\t}\n\t\t\t\t\tk++;\n\t\t\t\t}\n\t\t\t};\n\t\t\tfor (let region of toggledRegions) {\n\t\t\t\tlet index = region.regionIndex;\n\t\t\t\tlet editorDecorationId = this._editorDecorationIds[index];\n\t\t\t\tif (editorDecorationId && !processed[editorDecorationId]) {\n\t\t\t\t\tprocessed[editorDecorationId] = true;\n\n\t\t\t\t\tupdateDecorationsUntil(index); // update all decorations up to current index using the old dirtyRegionEndLine\n\n\t\t\t\t\tlet newCollapseState = !this._regions.isCollapsed(index);\n\t\t\t\t\tthis._regions.setCollapsed(index, newCollapseState);\n\n\t\t\t\t\tdirtyRegionEndLine = Math.max(dirtyRegionEndLine, this._regions.getEndLineNumber(index));\n\t\t\t\t}\n\t\t\t}\n\t\t\tupdateDecorationsUntil(this._regions.length);\n\t\t});\n\t\tthis._updateEventEmitter.fire({ model: this, collapseStateChanged: toggledRegions });\n\t}\n\n\tpublic update(newRegions: FoldingRegions, blockedLineNumers: number[] = []): void {\n\t\tlet newEditorDecorations: IModelDeltaDecoration[] = [];\n\n\t\tlet isBlocked = (startLineNumber: number, endLineNumber: number) => {\n\t\t\tfor (let blockedLineNumber of blockedLineNumers) {\n\t\t\t\tif (startLineNumber < blockedLineNumber && blockedLineNumber <= endLineNumber) { // first line is visible\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t\tlet lastHiddenLine = -1;\n\n\t\tlet initRange = (index: number, isCollapsed: boolean) => {\n\t\t\tconst startLineNumber = newRegions.getStartLineNumber(index);\n\t\t\tconst endLineNumber = newRegions.getEndLineNumber(index);\n\t\t\tif (isCollapsed && isBlocked(startLineNumber, endLineNumber)) {\n\t\t\t\tisCollapsed = false;\n\t\t\t}\n\t\t\tnewRegions.setCollapsed(index, isCollapsed);\n\n\t\t\tconst maxColumn = this._textModel.getLineMaxColumn(startLineNumber);\n\t\t\tconst decorationRange = {\n\t\t\t\tstartLineNumber: startLineNumber,\n\t\t\t\tstartColumn: Math.max(maxColumn - 1, 1), // make it length == 1 to detect deletions\n\t\t\t\tendLineNumber: startLineNumber,\n\t\t\t\tendColumn: maxColumn\n\t\t\t};\n\t\t\tnewEditorDecorations.push({ range: decorationRange, options: this._decorationProvider.getDecorationOption(isCollapsed, endLineNumber <= lastHiddenLine) });\n\t\t\tif (isCollapsed && endLineNumber > lastHiddenLine) {\n\t\t\t\tlastHiddenLine = endLineNumber;\n\t\t\t}\n\t\t};\n\t\tlet i = 0;\n\t\tlet nextCollapsed = () => {\n\t\t\twhile (i < this._regions.length) {\n\t\t\t\tlet isCollapsed = this._regions.isCollapsed(i);\n\t\t\t\ti++;\n\t\t\t\tif (isCollapsed) {\n\t\t\t\t\treturn i - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn -1;\n\t\t};\n\n\t\tlet k = 0;\n\t\tlet collapsedIndex = nextCollapsed();\n\t\twhile (collapsedIndex !== -1 && k < newRegions.length) {\n\t\t\t// get the latest range\n\t\t\tlet decRange = this._textModel.getDecorationRange(this._editorDecorationIds[collapsedIndex]);\n\t\t\tif (decRange) {\n\t\t\t\tlet collapsedStartLineNumber = decRange.startLineNumber;\n\t\t\t\tif (decRange.startColumn === Math.max(decRange.endColumn - 1, 1) && this._textModel.getLineMaxColumn(collapsedStartLineNumber) === decRange.endColumn) { // test that the decoration is still covering the full line else it got deleted\n\t\t\t\t\twhile (k < newRegions.length) {\n\t\t\t\t\t\tlet startLineNumber = newRegions.getStartLineNumber(k);\n\t\t\t\t\t\tif (collapsedStartLineNumber >= startLineNumber) {\n\t\t\t\t\t\t\tinitRange(k, collapsedStartLineNumber === startLineNumber);\n\t\t\t\t\t\t\tk++;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcollapsedIndex = nextCollapsed();\n\t\t}\n\t\twhile (k < newRegions.length) {\n\t\t\tinitRange(k, false);\n\t\t\tk++;\n\t\t}\n\n\t\tthis._editorDecorationIds = this._decorationProvider.deltaDecorations(this._editorDecorationIds, newEditorDecorations);\n\t\tthis._regions = newRegions;\n\t\tthis._isInitialized = true;\n\t\tthis._updateEventEmitter.fire({ model: this });\n\t}\n\n\t/**\n\t * Collapse state memento, for persistence only\n\t */\n\tpublic getMemento(): CollapseMemento | undefined {\n\t\tlet collapsedRanges: ILineRange[] = [];\n\t\tfor (let i = 0; i < this._regions.length; i++) {\n\t\t\tif (this._regions.isCollapsed(i)) {\n\t\t\t\tlet range = this._textModel.getDecorationRange(this._editorDecorationIds[i]);\n\t\t\t\tif (range) {\n\t\t\t\t\tlet startLineNumber = range.startLineNumber;\n\t\t\t\t\tlet endLineNumber = range.endLineNumber + this._regions.getEndLineNumber(i) - this._regions.getStartLineNumber(i);\n\t\t\t\t\tcollapsedRanges.push({ startLineNumber, endLineNumber });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (collapsedRanges.length > 0) {\n\t\t\treturn collapsedRanges;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Apply persisted state, for persistence only\n\t */\n\tpublic applyMemento(state: CollapseMemento) {\n\t\tif (!Array.isArray(state)) {\n\t\t\treturn;\n\t\t}\n\t\tlet toToogle: FoldingRegion[] = [];\n\t\tfor (let range of state) {\n\t\t\tlet region = this.getRegionAtLine(range.startLineNumber);\n\t\t\tif (region && !region.isCollapsed) {\n\t\t\t\ttoToogle.push(region);\n\t\t\t}\n\t\t}\n\t\tthis.toggleCollapseState(toToogle);\n\t}\n\n\tpublic dispose() {\n\t\tthis._decorationProvider.deltaDecorations(this._editorDecorationIds, []);\n\t}\n\n\tgetAllRegionsAtLine(lineNumber: number, filter?: (r: FoldingRegion, level: number) => boolean): FoldingRegion[] {\n\t\tlet result: FoldingRegion[] = [];\n\t\tif (this._regions) {\n\t\t\tlet index = this._regions.findRange(lineNumber);\n\t\t\tlet level = 1;\n\t\t\twhile (index >= 0) {\n\t\t\t\tlet current = this._regions.toRegion(index);\n\t\t\t\tif (!filter || filter(current, level)) {\n\t\t\t\t\tresult.push(current);\n\t\t\t\t}\n\t\t\t\tlevel++;\n\t\t\t\tindex = current.parentIndex;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tgetRegionAtLine(lineNumber: number): FoldingRegion | null {\n\t\tif (this._regions) {\n\t\t\tlet index = this._regions.findRange(lineNumber);\n\t\t\tif (index >= 0) {\n\t\t\t\treturn this._regions.toRegion(index);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetRegionsInside(region: FoldingRegion | null, filter?: RegionFilter | RegionFilterWithLevel): FoldingRegion[] {\n\t\tlet result: FoldingRegion[] = [];\n\t\tlet index = region ? region.regionIndex + 1 : 0;\n\t\tlet endLineNumber = region ? region.endLineNumber : Number.MAX_VALUE;\n\n\t\tif (filter && filter.length === 2) {\n\t\t\tconst levelStack: FoldingRegion[] = [];\n\t\t\tfor (let i = index, len = this._regions.length; i < len; i++) {\n\t\t\t\tlet current = this._regions.toRegion(i);\n\t\t\t\tif (this._regions.getStartLineNumber(i) < endLineNumber) {\n\t\t\t\t\twhile (levelStack.length > 0 && !current.containedBy(levelStack[levelStack.length - 1])) {\n\t\t\t\t\t\tlevelStack.pop();\n\t\t\t\t\t}\n\t\t\t\t\tlevelStack.push(current);\n\t\t\t\t\tif (filter(current, levelStack.length)) {\n\t\t\t\t\t\tresult.push(current);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (let i = index, len = this._regions.length; i < len; i++) {\n\t\t\t\tlet current = this._regions.toRegion(i);\n\t\t\t\tif (this._regions.getStartLineNumber(i) < endLineNumber) {\n\t\t\t\t\tif (!filter || (filter as RegionFilter)(current)) {\n\t\t\t\t\t\tresult.push(current);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n}\n\ntype RegionFilter = (r: FoldingRegion) => boolean;\ntype RegionFilterWithLevel = (r: FoldingRegion, level: number) => boolean;\n\n\n/**\n * Collapse or expand the regions at the given locations\n * @param levels The number of levels. Use 1 to only impact the regions at the location, use Number.MAX_VALUE for all levels.\n * @param lineNumbers the location of the regions to collapse or expand, or if not set, all regions in the model.\n */\nexport function toggleCollapseState(foldingModel: FoldingModel, levels: number, lineNumbers: number[]) {\n\tlet toToggle: FoldingRegion[] = [];\n\tfor (let lineNumber of lineNumbers) {\n\t\tlet region = foldingModel.getRegionAtLine(lineNumber);\n\t\tif (region) {\n\t\t\tconst doCollapse = !region.isCollapsed;\n\t\t\ttoToggle.push(region);\n\t\t\tif (levels > 1) {\n\t\t\t\tlet regionsInside = foldingModel.getRegionsInside(region, (r, level: number) => r.isCollapsed !== doCollapse && level < levels);\n\t\t\t\ttoToggle.push(...regionsInside);\n\t\t\t}\n\t\t}\n\t}\n\tfoldingModel.toggleCollapseState(toToggle);\n}\n\n\n/**\n * Collapse or expand the regions at the given locations including all children.\n * @param doCollapse Whether to collapse or expand\n * @param levels The number of levels. Use 1 to only impact the regions at the location, use Number.MAX_VALUE for all levels.\n * @param lineNumbers the location of the regions to collapse or expand, or if not set, all regions in the model.\n */\nexport function setCollapseStateLevelsDown(foldingModel: FoldingModel, doCollapse: boolean, levels = Number.MAX_VALUE, lineNumbers?: number[]): void {\n\tlet toToggle: FoldingRegion[] = [];\n\tif (lineNumbers && lineNumbers.length > 0) {\n\t\tfor (let lineNumber of lineNumbers) {\n\t\t\tlet region = foldingModel.getRegionAtLine(lineNumber);\n\t\t\tif (region) {\n\t\t\t\tif (region.isCollapsed !== doCollapse) {\n\t\t\t\t\ttoToggle.push(region);\n\t\t\t\t}\n\t\t\t\tif (levels > 1) {\n\t\t\t\t\tlet regionsInside = foldingModel.getRegionsInside(region, (r, level: number) => r.isCollapsed !== doCollapse && level < levels);\n\t\t\t\t\ttoToggle.push(...regionsInside);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} else {\n\t\tlet regionsInside = foldingModel.getRegionsInside(null, (r, level: number) => r.isCollapsed !== doCollapse && level < levels);\n\t\ttoToggle.push(...regionsInside);\n\t}\n\tfoldingModel.toggleCollapseState(toToggle);\n}\n\n/**\n * Collapse or expand the regions at the given locations including all parents.\n * @param doCollapse Whether to collapse or expand\n * @param levels The number of levels. Use 1 to only impact the regions at the location, use Number.MAX_VALUE for all levels.\n * @param lineNumbers the location of the regions to collapse or expand.\n */\nexport function setCollapseStateLevelsUp(foldingModel: FoldingModel, doCollapse: boolean, levels: number, lineNumbers: number[]): void {\n\tlet toToggle: FoldingRegion[] = [];\n\tfor (let lineNumber of lineNumbers) {\n\t\tlet regions = foldingModel.getAllRegionsAtLine(lineNumber, (region, level) => region.isCollapsed !== doCollapse && level <= levels);\n\t\ttoToggle.push(...regions);\n\t}\n\tfoldingModel.toggleCollapseState(toToggle);\n}\n\n/**\n * Collapse or expand a region at the given locations. If the inner most region is already collapsed/expanded, uses the first parent instead.\n * @param doCollapse Whether to collapse or expand\n * @param lineNumbers the location of the regions to collapse or expand.\n */\nexport function setCollapseStateUp(foldingModel: FoldingModel, doCollapse: boolean, lineNumbers: number[]): void {\n\tlet toToggle: FoldingRegion[] = [];\n\tfor (let lineNumber of lineNumbers) {\n\t\tlet regions = foldingModel.getAllRegionsAtLine(lineNumber, (region,) => region.isCollapsed !== doCollapse);\n\t\tif (regions.length > 0) {\n\t\t\ttoToggle.push(regions[0]);\n\t\t}\n\t}\n\tfoldingModel.toggleCollapseState(toToggle);\n}\n\n/**\n * Folds or unfolds all regions that have a given level, except if they contain one of the blocked lines.\n * @param foldLevel level. Level == 1 is the top level\n * @param doCollapse Whether to collapse or expand\n*/\nexport function setCollapseStateAtLevel(foldingModel: FoldingModel, foldLevel: number, doCollapse: boolean, blockedLineNumbers: number[]): void {\n\tlet filter = (region: FoldingRegion, level: number) => level === foldLevel && region.isCollapsed !== doCollapse && !blockedLineNumbers.some(line => region.containsLine(line));\n\tlet toToggle = foldingModel.getRegionsInside(null, filter);\n\tfoldingModel.toggleCollapseState(toToggle);\n}\n\n/**\n * Folds or unfolds all regions, except if they contain or are contained by a region of one of the blocked lines.\n * @param doCollapse Whether to collapse or expand\n * @param blockedLineNumbers the location of regions to not collapse or expand\n */\nexport function setCollapseStateForRest(foldingModel: FoldingModel, doCollapse: boolean, blockedLineNumbers: number[]): void {\n\tlet filteredRegions: FoldingRegion[] = [];\n\tfor (let lineNumber of blockedLineNumbers) {\n\t\tfilteredRegions.push(foldingModel.getAllRegionsAtLine(lineNumber, undefined)[0]);\n\t}\n\tlet filter = (region: FoldingRegion) => filteredRegions.every((filteredRegion) => !filteredRegion.containedBy(region) && !region.containedBy(filteredRegion)) && region.isCollapsed !== doCollapse;\n\tlet toToggle = foldingModel.getRegionsInside(null, filter);\n\tfoldingModel.toggleCollapseState(toToggle);\n}\n\n/**\n * Folds all regions for which the lines start with a given regex\n * @param foldingModel the folding model\n */\nexport function setCollapseStateForMatchingLines(foldingModel: FoldingModel, regExp: RegExp, doCollapse: boolean): void {\n\tlet editorModel = foldingModel.textModel;\n\tlet regions = foldingModel.regions;\n\tlet toToggle: FoldingRegion[] = [];\n\tfor (let i = regions.length - 1; i >= 0; i--) {\n\t\tif (doCollapse !== regions.isCollapsed(i)) {\n\t\t\tlet startLineNumber = regions.getStartLineNumber(i);\n\t\t\tif (regExp.test(editorModel.getLineContent(startLineNumber))) {\n\t\t\t\ttoToggle.push(regions.toRegion(i));\n\t\t\t}\n\t\t}\n\t}\n\tfoldingModel.toggleCollapseState(toToggle);\n}\n\n/**\n * Folds all regions of the given type\n * @param foldingModel the folding model\n */\nexport function setCollapseStateForType(foldingModel: FoldingModel, type: string, doCollapse: boolean): void {\n\tlet regions = foldingModel.regions;\n\tlet toToggle: FoldingRegion[] = [];\n\tfor (let i = regions.length - 1; i >= 0; i--) {\n\t\tif (doCollapse !== regions.isCollapsed(i) && type === regions.getType(i)) {\n\t\t\ttoToggle.push(regions.toRegion(i));\n\t\t}\n\t}\n\tfoldingModel.toggleCollapseState(toToggle);\n}\n"]}