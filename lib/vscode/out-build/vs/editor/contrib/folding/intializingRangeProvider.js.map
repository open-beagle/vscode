{"version":3,"file":"intializingRangeProvider.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/contrib/folding/intializingRangeProvider.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAQnF,QAAA,gBAAgB,GAAG,MAAM,CAAC;IAEvC,MAAa,yBAAyB;QAMrC,YAA6B,WAAuB,EAAE,aAA2B,EAAE,SAAqB,EAAE,WAAmB;YAAhG,gBAAW,GAAX,WAAW,CAAY;YAL3C,OAAE,GAAG,wBAAgB,CAAC;YAM9B,IAAI,aAAa,CAAC,MAAM,EAAE;gBACzB,IAAI,iBAAiB,GAAG,CAAC,KAAiB,EAAyB,EAAE;oBACpE,OAAO;wBACN,KAAK,EAAE;4BACN,eAAe,EAAE,KAAK,CAAC,eAAe;4BACtC,WAAW,EAAE,CAAC;4BACd,aAAa,EAAE,KAAK,CAAC,aAAa;4BAClC,SAAS,EAAE,WAAW,CAAC,aAAa,CAAC,KAAK,CAAC,aAAa,CAAC;yBACzD;wBACD,OAAO,EAAE;4BACR,UAAU,qCAAoD;yBAC9D;qBACD,CAAC;gBACH,CAAC,CAAC;gBACF,IAAI,CAAC,aAAa,GAAG,WAAW,CAAC,gBAAgB,CAAC,EAAE,EAAE,aAAa,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,CAAC;gBAC5F,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;aAClD;QACF,CAAC;QAED,OAAO;YACN,IAAI,IAAI,CAAC,aAAa,EAAE;gBACvB,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,IAAI,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC;gBAC1D,IAAI,CAAC,aAAa,GAAG,SAAS,CAAC;aAC/B;YACD,IAAI,OAAO,IAAI,CAAC,OAAO,KAAK,QAAQ,EAAE;gBACrC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBAC3B,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;aACzB;QACF,CAAC;QAED,OAAO,CAAC,gBAAmC;YAC1C,IAAI,gBAAgB,GAAwB,EAAE,CAAC;YAC/C,IAAI,IAAI,CAAC,aAAa,EAAE;gBACvB,KAAK,IAAI,EAAE,IAAI,IAAI,CAAC,aAAa,EAAE;oBAClC,IAAI,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,EAAE,CAAC,CAAC;oBACpD,IAAI,KAAK,EAAE;wBACV,gBAAgB,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,eAAe,EAAE,GAAG,EAAE,KAAK,CAAC,aAAa,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC;qBAC3F;iBACD;aACD;YACD,OAAO,OAAO,CAAC,OAAO,CAAC,CAAA,GAAA,oCAAc,CAAA,CAAC,gBAAgB,EAAE,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;QAC5E,CAAC;KACD;IAjDD,8DAiDC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ITextModel, IModelDeltaDecoration, TrackedRangeStickiness } from 'vs/editor/common/model';\nimport { FoldingRegions, ILineRange } from 'vs/editor/contrib/folding/foldingRanges';\nimport { RangeProvider } from './folding';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IFoldingRangeData, sanitizeRanges } from 'vs/editor/contrib/folding/syntaxRangeProvider';\n\nexport const ID_INIT_PROVIDER = 'init';\n\nexport class InitializingRangeProvider implements RangeProvider {\n\treadonly id = ID_INIT_PROVIDER;\n\n\tprivate decorationIds: string[] | undefined;\n\tprivate timeout: any;\n\n\tconstructor(private readonly editorModel: ITextModel, initialRanges: ILineRange[], onTimeout: () => void, timeoutTime: number) {\n\t\tif (initialRanges.length) {\n\t\t\tlet toDecorationRange = (range: ILineRange): IModelDeltaDecoration => {\n\t\t\t\treturn {\n\t\t\t\t\trange: {\n\t\t\t\t\t\tstartLineNumber: range.startLineNumber,\n\t\t\t\t\t\tstartColumn: 0,\n\t\t\t\t\t\tendLineNumber: range.endLineNumber,\n\t\t\t\t\t\tendColumn: editorModel.getLineLength(range.endLineNumber)\n\t\t\t\t\t},\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tstickiness: TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t\tthis.decorationIds = editorModel.deltaDecorations([], initialRanges.map(toDecorationRange));\n\t\t\tthis.timeout = setTimeout(onTimeout, timeoutTime);\n\t\t}\n\t}\n\n\tdispose(): void {\n\t\tif (this.decorationIds) {\n\t\t\tthis.editorModel.deltaDecorations(this.decorationIds, []);\n\t\t\tthis.decorationIds = undefined;\n\t\t}\n\t\tif (typeof this.timeout === 'number') {\n\t\t\tclearTimeout(this.timeout);\n\t\t\tthis.timeout = undefined;\n\t\t}\n\t}\n\n\tcompute(cancelationToken: CancellationToken): Promise<FoldingRegions> {\n\t\tlet foldingRangeData: IFoldingRangeData[] = [];\n\t\tif (this.decorationIds) {\n\t\t\tfor (let id of this.decorationIds) {\n\t\t\t\tlet range = this.editorModel.getDecorationRange(id);\n\t\t\t\tif (range) {\n\t\t\t\t\tfoldingRangeData.push({ start: range.startLineNumber, end: range.endLineNumber, rank: 1 });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn Promise.resolve(sanitizeRanges(foldingRangeData, Number.MAX_VALUE));\n\t}\n}\n\n"]}