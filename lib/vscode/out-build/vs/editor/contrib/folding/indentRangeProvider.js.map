{"version":3,"file":"indentRangeProvider.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/contrib/folding/indentRangeProvider.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ITextModel } from 'vs/editor/common/model';\nimport { FoldingMarkers } from 'vs/editor/common/modes/languageConfiguration';\nimport { FoldingRegions, MAX_LINE_NUMBER } from 'vs/editor/contrib/folding/foldingRanges';\nimport { TextModel } from 'vs/editor/common/model/textModel';\nimport { RangeProvider } from './folding';\nimport { LanguageConfigurationRegistry } from 'vs/editor/common/modes/languageConfigurationRegistry';\nimport { CancellationToken } from 'vs/base/common/cancellation';\n\nconst MAX_FOLDING_REGIONS_FOR_INDENT_LIMIT = 5000;\n\nexport const ID_INDENT_PROVIDER = 'indent';\n\nexport class IndentRangeProvider implements RangeProvider {\n\treadonly id = ID_INDENT_PROVIDER;\n\n\tconstructor(private readonly editorModel: ITextModel) {\n\t}\n\n\tdispose() {\n\t}\n\n\tcompute(cancelationToken: CancellationToken): Promise<FoldingRegions> {\n\t\tlet foldingRules = LanguageConfigurationRegistry.getFoldingRules(this.editorModel.getLanguageIdentifier().id);\n\t\tlet offSide = foldingRules && !!foldingRules.offSide;\n\t\tlet markers = foldingRules && foldingRules.markers;\n\t\treturn Promise.resolve(computeRanges(this.editorModel, offSide, markers));\n\t}\n}\n\n// public only for testing\nexport class RangesCollector {\n\tprivate readonly _startIndexes: number[];\n\tprivate readonly _endIndexes: number[];\n\tprivate readonly _indentOccurrences: number[];\n\tprivate _length: number;\n\tprivate readonly _foldingRangesLimit: number;\n\n\tconstructor(foldingRangesLimit: number) {\n\t\tthis._startIndexes = [];\n\t\tthis._endIndexes = [];\n\t\tthis._indentOccurrences = [];\n\t\tthis._length = 0;\n\t\tthis._foldingRangesLimit = foldingRangesLimit;\n\t}\n\n\tpublic insertFirst(startLineNumber: number, endLineNumber: number, indent: number) {\n\t\tif (startLineNumber > MAX_LINE_NUMBER || endLineNumber > MAX_LINE_NUMBER) {\n\t\t\treturn;\n\t\t}\n\t\tlet index = this._length;\n\t\tthis._startIndexes[index] = startLineNumber;\n\t\tthis._endIndexes[index] = endLineNumber;\n\t\tthis._length++;\n\t\tif (indent < 1000) {\n\t\t\tthis._indentOccurrences[indent] = (this._indentOccurrences[indent] || 0) + 1;\n\t\t}\n\t}\n\n\tpublic toIndentRanges(model: ITextModel) {\n\t\tif (this._length <= this._foldingRangesLimit) {\n\t\t\t// reverse and create arrays of the exact length\n\t\t\tlet startIndexes = new Uint32Array(this._length);\n\t\t\tlet endIndexes = new Uint32Array(this._length);\n\t\t\tfor (let i = this._length - 1, k = 0; i >= 0; i--, k++) {\n\t\t\t\tstartIndexes[k] = this._startIndexes[i];\n\t\t\t\tendIndexes[k] = this._endIndexes[i];\n\t\t\t}\n\t\t\treturn new FoldingRegions(startIndexes, endIndexes);\n\t\t} else {\n\t\t\tlet entries = 0;\n\t\t\tlet maxIndent = this._indentOccurrences.length;\n\t\t\tfor (let i = 0; i < this._indentOccurrences.length; i++) {\n\t\t\t\tlet n = this._indentOccurrences[i];\n\t\t\t\tif (n) {\n\t\t\t\t\tif (n + entries > this._foldingRangesLimit) {\n\t\t\t\t\t\tmaxIndent = i;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tentries += n;\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst tabSize = model.getOptions().tabSize;\n\t\t\t// reverse and create arrays of the exact length\n\t\t\tlet startIndexes = new Uint32Array(this._foldingRangesLimit);\n\t\t\tlet endIndexes = new Uint32Array(this._foldingRangesLimit);\n\t\t\tfor (let i = this._length - 1, k = 0; i >= 0; i--) {\n\t\t\t\tlet startIndex = this._startIndexes[i];\n\t\t\t\tlet lineContent = model.getLineContent(startIndex);\n\t\t\t\tlet indent = TextModel.computeIndentLevel(lineContent, tabSize);\n\t\t\t\tif (indent < maxIndent || (indent === maxIndent && entries++ < this._foldingRangesLimit)) {\n\t\t\t\t\tstartIndexes[k] = startIndex;\n\t\t\t\t\tendIndexes[k] = this._endIndexes[i];\n\t\t\t\t\tk++;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn new FoldingRegions(startIndexes, endIndexes);\n\t\t}\n\n\t}\n}\n\n\ninterface PreviousRegion {\n\tindent: number; // indent or -2 if a marker\n\tendAbove: number; // end line number for the region above\n\tline: number; // start line of the region. Only used for marker regions.\n}\n\nexport function computeRanges(model: ITextModel, offSide: boolean, markers?: FoldingMarkers, foldingRangesLimit = MAX_FOLDING_REGIONS_FOR_INDENT_LIMIT): FoldingRegions {\n\tconst tabSize = model.getOptions().tabSize;\n\tlet result = new RangesCollector(foldingRangesLimit);\n\n\tlet pattern: RegExp | undefined = undefined;\n\tif (markers) {\n\t\tpattern = new RegExp(`(${markers.start.source})|(?:${markers.end.source})`);\n\t}\n\n\tlet previousRegions: PreviousRegion[] = [];\n\tlet line = model.getLineCount() + 1;\n\tpreviousRegions.push({ indent: -1, endAbove: line, line }); // sentinel, to make sure there's at least one entry\n\n\tfor (let line = model.getLineCount(); line > 0; line--) {\n\t\tlet lineContent = model.getLineContent(line);\n\t\tlet indent = TextModel.computeIndentLevel(lineContent, tabSize);\n\t\tlet previous = previousRegions[previousRegions.length - 1];\n\t\tif (indent === -1) {\n\t\t\tif (offSide) {\n\t\t\t\t// for offSide languages, empty lines are associated to the previous block\n\t\t\t\t// note: the next block is already written to the results, so this only\n\t\t\t\t// impacts the end position of the block before\n\t\t\t\tprevious.endAbove = line;\n\t\t\t}\n\t\t\tcontinue; // only whitespace\n\t\t}\n\t\tlet m;\n\t\tif (pattern && (m = lineContent.match(pattern))) {\n\t\t\t// folding pattern match\n\t\t\tif (m[1]) { // start pattern match\n\t\t\t\t// discard all regions until the folding pattern\n\t\t\t\tlet i = previousRegions.length - 1;\n\t\t\t\twhile (i > 0 && previousRegions[i].indent !== -2) {\n\t\t\t\t\ti--;\n\t\t\t\t}\n\t\t\t\tif (i > 0) {\n\t\t\t\t\tpreviousRegions.length = i + 1;\n\t\t\t\t\tprevious = previousRegions[i];\n\n\t\t\t\t\t// new folding range from pattern, includes the end line\n\t\t\t\t\tresult.insertFirst(line, previous.line, indent);\n\t\t\t\t\tprevious.line = line;\n\t\t\t\t\tprevious.indent = indent;\n\t\t\t\t\tprevious.endAbove = line;\n\t\t\t\t\tcontinue;\n\t\t\t\t} else {\n\t\t\t\t\t// no end marker found, treat line as a regular line\n\t\t\t\t}\n\t\t\t} else { // end pattern match\n\t\t\t\tpreviousRegions.push({ indent: -2, endAbove: line, line });\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\tif (previous.indent > indent) {\n\t\t\t// discard all regions with larger indent\n\t\t\tdo {\n\t\t\t\tpreviousRegions.pop();\n\t\t\t\tprevious = previousRegions[previousRegions.length - 1];\n\t\t\t} while (previous.indent > indent);\n\n\t\t\t// new folding range\n\t\t\tlet endLineNumber = previous.endAbove - 1;\n\t\t\tif (endLineNumber - line >= 1) { // needs at east size 1\n\t\t\t\tresult.insertFirst(line, endLineNumber, indent);\n\t\t\t}\n\t\t}\n\t\tif (previous.indent === indent) {\n\t\t\tprevious.endAbove = line;\n\t\t} else { // previous.indent < indent\n\t\t\t// new region with a bigger indent\n\t\t\tpreviousRegions.push({ indent, endAbove: line, line });\n\t\t}\n\t}\n\treturn result.toIndentRanges(model);\n}\n"]}