{"version":3,"file":"parameterHintsModel.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/contrib/parameterHints/test/parameterHintsModel.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Handler } from 'vs/editor/common/editorCommon';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { createTextModel } from 'vs/editor/test/common/editorTestUtils';\nimport * as modes from 'vs/editor/common/modes';\nimport { createTestCodeEditor } from 'vs/editor/test/browser/testCodeEditor';\nimport { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';\nimport { IStorageService, InMemoryStorageService } from 'vs/platform/storage/common/storage';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { NullTelemetryService } from 'vs/platform/telemetry/common/telemetryUtils';\nimport { ParameterHintsModel } from 'vs/editor/contrib/parameterHints/parameterHintsModel';\n\nconst mockFile = URI.parse('test:somefile.ttt');\nconst mockFileSelector = { scheme: 'test' };\n\n\nconst emptySigHelp: modes.SignatureHelp = {\n\tsignatures: [{\n\t\tlabel: 'none',\n\t\tparameters: []\n\t}],\n\tactiveParameter: 0,\n\tactiveSignature: 0\n};\n\nconst emptySigHelpResult: modes.SignatureHelpResult = {\n\tvalue: emptySigHelp,\n\tdispose: () => { }\n};\n\nsuite('ParameterHintsModel', () => {\n\tconst disposables = new DisposableStore();\n\n\tsetup(() => {\n\t\tdisposables.clear();\n\t});\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\tfunction createMockEditor(fileContents: string) {\n\t\tconst textModel = createTextModel(fileContents, undefined, undefined, mockFile);\n\t\tconst editor = createTestCodeEditor({\n\t\t\tmodel: textModel,\n\t\t\tserviceCollection: new ServiceCollection(\n\t\t\t\t[ITelemetryService, NullTelemetryService],\n\t\t\t\t[IStorageService, new InMemoryStorageService()]\n\t\t\t)\n\t\t});\n\t\tdisposables.add(textModel);\n\t\tdisposables.add(editor);\n\t\treturn editor;\n\t}\n\n\ttest('Provider should get trigger character on type', (done) => {\n\t\tconst triggerChar = '(';\n\n\t\tconst editor = createMockEditor('');\n\t\tdisposables.add(new ParameterHintsModel(editor));\n\n\t\tdisposables.add(modes.SignatureHelpProviderRegistry.register(mockFileSelector, new class implements modes.SignatureHelpProvider {\n\t\t\tsignatureHelpTriggerCharacters = [triggerChar];\n\t\t\tsignatureHelpRetriggerCharacters = [];\n\n\t\t\tprovideSignatureHelp(_model: ITextModel, _position: Position, _token: CancellationToken, context: modes.SignatureHelpContext) {\n\t\t\t\tassert.strictEqual(context.triggerKind, modes.SignatureHelpTriggerKind.TriggerCharacter);\n\t\t\t\tassert.strictEqual(context.triggerCharacter, triggerChar);\n\t\t\t\tdone();\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}));\n\n\t\teditor.trigger('keyboard', Handler.Type, { text: triggerChar });\n\t});\n\n\ttest('Provider should be retriggered if already active', (done) => {\n\t\tconst triggerChar = '(';\n\n\t\tconst editor = createMockEditor('');\n\t\tdisposables.add(new ParameterHintsModel(editor));\n\n\t\tlet invokeCount = 0;\n\t\tdisposables.add(modes.SignatureHelpProviderRegistry.register(mockFileSelector, new class implements modes.SignatureHelpProvider {\n\t\t\tsignatureHelpTriggerCharacters = [triggerChar];\n\t\t\tsignatureHelpRetriggerCharacters = [];\n\n\t\t\tprovideSignatureHelp(_model: ITextModel, _position: Position, _token: CancellationToken, context: modes.SignatureHelpContext): modes.SignatureHelpResult | Promise<modes.SignatureHelpResult> {\n\t\t\t\t++invokeCount;\n\t\t\t\ttry {\n\t\t\t\t\tif (invokeCount === 1) {\n\t\t\t\t\t\tassert.strictEqual(context.triggerKind, modes.SignatureHelpTriggerKind.TriggerCharacter);\n\t\t\t\t\t\tassert.strictEqual(context.triggerCharacter, triggerChar);\n\t\t\t\t\t\tassert.strictEqual(context.isRetrigger, false);\n\t\t\t\t\t\tassert.strictEqual(context.activeSignatureHelp, undefined);\n\n\t\t\t\t\t\t// Retrigger\n\t\t\t\t\t\tsetTimeout(() => editor.trigger('keyboard', Handler.Type, { text: triggerChar }), 50);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tassert.strictEqual(invokeCount, 2);\n\t\t\t\t\t\tassert.strictEqual(context.triggerKind, modes.SignatureHelpTriggerKind.TriggerCharacter);\n\t\t\t\t\t\tassert.strictEqual(context.isRetrigger, true);\n\t\t\t\t\t\tassert.strictEqual(context.triggerCharacter, triggerChar);\n\t\t\t\t\t\tassert.strictEqual(context.activeSignatureHelp, emptySigHelp);\n\n\t\t\t\t\t\tdone();\n\t\t\t\t\t}\n\t\t\t\t\treturn emptySigHelpResult;\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\teditor.trigger('keyboard', Handler.Type, { text: triggerChar });\n\t});\n\n\ttest('Provider should not be retriggered if previous help is canceled first', (done) => {\n\t\tconst triggerChar = '(';\n\n\t\tconst editor = createMockEditor('');\n\t\tconst hintModel = new ParameterHintsModel(editor);\n\t\tdisposables.add(hintModel);\n\n\t\tlet invokeCount = 0;\n\t\tdisposables.add(modes.SignatureHelpProviderRegistry.register(mockFileSelector, new class implements modes.SignatureHelpProvider {\n\t\t\tsignatureHelpTriggerCharacters = [triggerChar];\n\t\t\tsignatureHelpRetriggerCharacters = [];\n\n\t\t\tprovideSignatureHelp(_model: ITextModel, _position: Position, _token: CancellationToken, context: modes.SignatureHelpContext): modes.SignatureHelpResult | Promise<modes.SignatureHelpResult> {\n\t\t\t\ttry {\n\t\t\t\t\t++invokeCount;\n\t\t\t\t\tif (invokeCount === 1) {\n\t\t\t\t\t\tassert.strictEqual(context.triggerKind, modes.SignatureHelpTriggerKind.TriggerCharacter);\n\t\t\t\t\t\tassert.strictEqual(context.triggerCharacter, triggerChar);\n\t\t\t\t\t\tassert.strictEqual(context.isRetrigger, false);\n\t\t\t\t\t\tassert.strictEqual(context.activeSignatureHelp, undefined);\n\n\t\t\t\t\t\t// Cancel and retrigger\n\t\t\t\t\t\thintModel.cancel();\n\t\t\t\t\t\teditor.trigger('keyboard', Handler.Type, { text: triggerChar });\n\t\t\t\t\t} else {\n\t\t\t\t\t\tassert.strictEqual(invokeCount, 2);\n\t\t\t\t\t\tassert.strictEqual(context.triggerKind, modes.SignatureHelpTriggerKind.TriggerCharacter);\n\t\t\t\t\t\tassert.strictEqual(context.triggerCharacter, triggerChar);\n\t\t\t\t\t\tassert.strictEqual(context.isRetrigger, true);\n\t\t\t\t\t\tassert.strictEqual(context.activeSignatureHelp, undefined);\n\t\t\t\t\t\tdone();\n\t\t\t\t\t}\n\t\t\t\t\treturn emptySigHelpResult;\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\teditor.trigger('keyboard', Handler.Type, { text: triggerChar });\n\t});\n\n\ttest('Provider should get last trigger character when triggered multiple times and only be invoked once', (done) => {\n\t\tconst editor = createMockEditor('');\n\t\tdisposables.add(new ParameterHintsModel(editor, 5));\n\n\t\tlet invokeCount = 0;\n\t\tdisposables.add(modes.SignatureHelpProviderRegistry.register(mockFileSelector, new class implements modes.SignatureHelpProvider {\n\t\t\tsignatureHelpTriggerCharacters = ['a', 'b', 'c'];\n\t\t\tsignatureHelpRetriggerCharacters = [];\n\n\t\t\tprovideSignatureHelp(_model: ITextModel, _position: Position, _token: CancellationToken, context: modes.SignatureHelpContext) {\n\t\t\t\ttry {\n\t\t\t\t\t++invokeCount;\n\n\t\t\t\t\tassert.strictEqual(context.triggerKind, modes.SignatureHelpTriggerKind.TriggerCharacter);\n\t\t\t\t\tassert.strictEqual(context.isRetrigger, false);\n\t\t\t\t\tassert.strictEqual(context.triggerCharacter, 'c');\n\n\t\t\t\t\t// Give some time to allow for later triggers\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tassert.strictEqual(invokeCount, 1);\n\n\t\t\t\t\t\tdone();\n\t\t\t\t\t}, 50);\n\t\t\t\t\treturn undefined;\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\teditor.trigger('keyboard', Handler.Type, { text: 'a' });\n\t\teditor.trigger('keyboard', Handler.Type, { text: 'b' });\n\t\teditor.trigger('keyboard', Handler.Type, { text: 'c' });\n\t});\n\n\ttest('Provider should be retriggered if already active', (done) => {\n\t\tconst editor = createMockEditor('');\n\t\tdisposables.add(new ParameterHintsModel(editor, 5));\n\n\t\tlet invokeCount = 0;\n\t\tdisposables.add(modes.SignatureHelpProviderRegistry.register(mockFileSelector, new class implements modes.SignatureHelpProvider {\n\t\t\tsignatureHelpTriggerCharacters = ['a', 'b'];\n\t\t\tsignatureHelpRetriggerCharacters = [];\n\n\t\t\tprovideSignatureHelp(_model: ITextModel, _position: Position, _token: CancellationToken, context: modes.SignatureHelpContext): modes.SignatureHelpResult | Promise<modes.SignatureHelpResult> {\n\t\t\t\ttry {\n\t\t\t\t\t++invokeCount;\n\t\t\t\t\tif (invokeCount === 1) {\n\t\t\t\t\t\tassert.strictEqual(context.triggerKind, modes.SignatureHelpTriggerKind.TriggerCharacter);\n\t\t\t\t\t\tassert.strictEqual(context.triggerCharacter, 'a');\n\n\t\t\t\t\t\t// retrigger after delay for widget to show up\n\t\t\t\t\t\tsetTimeout(() => editor.trigger('keyboard', Handler.Type, { text: 'b' }), 50);\n\t\t\t\t\t} else if (invokeCount === 2) {\n\t\t\t\t\t\tassert.strictEqual(context.triggerKind, modes.SignatureHelpTriggerKind.TriggerCharacter);\n\t\t\t\t\t\tassert.ok(context.isRetrigger);\n\t\t\t\t\t\tassert.strictEqual(context.triggerCharacter, 'b');\n\t\t\t\t\t\tdone();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tassert.fail('Unexpected invoke');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn emptySigHelpResult;\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\teditor.trigger('keyboard', Handler.Type, { text: 'a' });\n\t});\n\n\ttest('Should cancel existing request when new request comes in', () => {\n\t\tconst editor = createMockEditor('abc def');\n\t\tconst hintsModel = new ParameterHintsModel(editor);\n\n\t\tlet didRequestCancellationOf = -1;\n\t\tlet invokeCount = 0;\n\t\tconst longRunningProvider = new class implements modes.SignatureHelpProvider {\n\t\t\tsignatureHelpTriggerCharacters = [];\n\t\t\tsignatureHelpRetriggerCharacters = [];\n\n\n\t\t\tprovideSignatureHelp(_model: ITextModel, _position: Position, token: CancellationToken): modes.SignatureHelpResult | Promise<modes.SignatureHelpResult> {\n\t\t\t\ttry {\n\t\t\t\t\tconst count = invokeCount++;\n\t\t\t\t\ttoken.onCancellationRequested(() => { didRequestCancellationOf = count; });\n\n\t\t\t\t\t// retrigger on first request\n\t\t\t\t\tif (count === 0) {\n\t\t\t\t\t\thintsModel.trigger({ triggerKind: modes.SignatureHelpTriggerKind.Invoke }, 0);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn new Promise<modes.SignatureHelpResult>(resolve => {\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tresolve({\n\t\t\t\t\t\t\t\tvalue: {\n\t\t\t\t\t\t\t\t\tsignatures: [{\n\t\t\t\t\t\t\t\t\t\tlabel: '' + count,\n\t\t\t\t\t\t\t\t\t\tparameters: []\n\t\t\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\t\tactiveParameter: 0,\n\t\t\t\t\t\t\t\t\tactiveSignature: 0\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tdispose: () => { }\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}, 100);\n\t\t\t\t\t});\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tdisposables.add(modes.SignatureHelpProviderRegistry.register(mockFileSelector, longRunningProvider));\n\n\t\thintsModel.trigger({ triggerKind: modes.SignatureHelpTriggerKind.Invoke }, 0);\n\t\tassert.strictEqual(-1, didRequestCancellationOf);\n\n\t\treturn new Promise<void>((resolve, reject) =>\n\t\t\thintsModel.onChangedHints(newParamterHints => {\n\t\t\t\ttry {\n\t\t\t\t\tassert.strictEqual(0, didRequestCancellationOf);\n\t\t\t\t\tassert.strictEqual('1', newParamterHints!.signatures[0].label);\n\t\t\t\t\tresolve();\n\t\t\t\t} catch (e) {\n\t\t\t\t\treject(e);\n\t\t\t\t}\n\t\t\t}));\n\t});\n\n\ttest('Provider should be retriggered by retrigger character', (done) => {\n\t\tconst triggerChar = 'a';\n\t\tconst retriggerChar = 'b';\n\n\t\tconst editor = createMockEditor('');\n\t\tdisposables.add(new ParameterHintsModel(editor, 5));\n\n\t\tlet invokeCount = 0;\n\t\tdisposables.add(modes.SignatureHelpProviderRegistry.register(mockFileSelector, new class implements modes.SignatureHelpProvider {\n\t\t\tsignatureHelpTriggerCharacters = [triggerChar];\n\t\t\tsignatureHelpRetriggerCharacters = [retriggerChar];\n\n\t\t\tprovideSignatureHelp(_model: ITextModel, _position: Position, _token: CancellationToken, context: modes.SignatureHelpContext): modes.SignatureHelpResult | Promise<modes.SignatureHelpResult> {\n\t\t\t\ttry {\n\t\t\t\t\t++invokeCount;\n\t\t\t\t\tif (invokeCount === 1) {\n\t\t\t\t\t\tassert.strictEqual(context.triggerKind, modes.SignatureHelpTriggerKind.TriggerCharacter);\n\t\t\t\t\t\tassert.strictEqual(context.triggerCharacter, triggerChar);\n\n\t\t\t\t\t\t// retrigger after delay for widget to show up\n\t\t\t\t\t\tsetTimeout(() => editor.trigger('keyboard', Handler.Type, { text: retriggerChar }), 50);\n\t\t\t\t\t} else if (invokeCount === 2) {\n\t\t\t\t\t\tassert.strictEqual(context.triggerKind, modes.SignatureHelpTriggerKind.TriggerCharacter);\n\t\t\t\t\t\tassert.ok(context.isRetrigger);\n\t\t\t\t\t\tassert.strictEqual(context.triggerCharacter, retriggerChar);\n\t\t\t\t\t\tdone();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tassert.fail('Unexpected invoke');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn emptySigHelpResult;\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\t// This should not trigger anything\n\t\teditor.trigger('keyboard', Handler.Type, { text: retriggerChar });\n\n\t\t// But a trigger character should\n\t\teditor.trigger('keyboard', Handler.Type, { text: triggerChar });\n\t});\n\n\ttest('should use first result from multiple providers', async () => {\n\t\tconst triggerChar = 'a';\n\t\tconst firstProviderId = 'firstProvider';\n\t\tconst secondProviderId = 'secondProvider';\n\t\tconst paramterLabel = 'parameter';\n\n\t\tconst editor = createMockEditor('');\n\t\tconst model = new ParameterHintsModel(editor, 5);\n\t\tdisposables.add(model);\n\n\t\tdisposables.add(modes.SignatureHelpProviderRegistry.register(mockFileSelector, new class implements modes.SignatureHelpProvider {\n\t\t\tsignatureHelpTriggerCharacters = [triggerChar];\n\t\t\tsignatureHelpRetriggerCharacters = [];\n\n\t\t\tasync provideSignatureHelp(_model: ITextModel, _position: Position, _token: CancellationToken, context: modes.SignatureHelpContext): Promise<modes.SignatureHelpResult | undefined> {\n\t\t\t\ttry {\n\t\t\t\t\tif (!context.isRetrigger) {\n\t\t\t\t\t\t// retrigger after delay for widget to show up\n\t\t\t\t\t\tsetTimeout(() => editor.trigger('keyboard', Handler.Type, { text: triggerChar }), 50);\n\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tvalue: {\n\t\t\t\t\t\t\t\tactiveParameter: 0,\n\t\t\t\t\t\t\t\tactiveSignature: 0,\n\t\t\t\t\t\t\t\tsignatures: [{\n\t\t\t\t\t\t\t\t\tlabel: firstProviderId,\n\t\t\t\t\t\t\t\t\tparameters: [\n\t\t\t\t\t\t\t\t\t\t{ label: paramterLabel }\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tdispose: () => { }\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn undefined;\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tdisposables.add(modes.SignatureHelpProviderRegistry.register(mockFileSelector, new class implements modes.SignatureHelpProvider {\n\t\t\tsignatureHelpTriggerCharacters = [triggerChar];\n\t\t\tsignatureHelpRetriggerCharacters = [];\n\n\t\t\tasync provideSignatureHelp(_model: ITextModel, _position: Position, _token: CancellationToken, context: modes.SignatureHelpContext): Promise<modes.SignatureHelpResult | undefined> {\n\t\t\t\tif (context.isRetrigger) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tvalue: {\n\t\t\t\t\t\t\tactiveParameter: 0,\n\t\t\t\t\t\t\tactiveSignature: context.activeSignatureHelp ? context.activeSignatureHelp.activeSignature + 1 : 0,\n\t\t\t\t\t\t\tsignatures: [{\n\t\t\t\t\t\t\t\tlabel: secondProviderId,\n\t\t\t\t\t\t\t\tparameters: context.activeSignatureHelp ? context.activeSignatureHelp.signatures[0].parameters : []\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdispose: () => { }\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}));\n\n\t\teditor.trigger('keyboard', Handler.Type, { text: triggerChar });\n\n\t\tconst firstHint = (await getNextHint(model))!.value;\n\t\tassert.strictEqual(firstHint.signatures[0].label, firstProviderId);\n\t\tassert.strictEqual(firstHint.activeSignature, 0);\n\t\tassert.strictEqual(firstHint.signatures[0].parameters[0].label, paramterLabel);\n\n\t\tconst secondHint = (await getNextHint(model))!.value;\n\t\tassert.strictEqual(secondHint.signatures[0].label, secondProviderId);\n\t\tassert.strictEqual(secondHint.activeSignature, 1);\n\t\tassert.strictEqual(secondHint.signatures[0].parameters[0].label, paramterLabel);\n\t});\n\n\ttest('Quick typing should use the first trigger character', async () => {\n\t\tconst editor = createMockEditor('');\n\t\tconst model = new ParameterHintsModel(editor, 50);\n\t\tdisposables.add(model);\n\n\t\tconst triggerCharacter = 'a';\n\n\t\tlet invokeCount = 0;\n\t\tdisposables.add(modes.SignatureHelpProviderRegistry.register(mockFileSelector, new class implements modes.SignatureHelpProvider {\n\t\t\tsignatureHelpTriggerCharacters = [triggerCharacter];\n\t\t\tsignatureHelpRetriggerCharacters = [];\n\n\t\t\tprovideSignatureHelp(_model: ITextModel, _position: Position, _token: CancellationToken, context: modes.SignatureHelpContext): modes.SignatureHelpResult | Promise<modes.SignatureHelpResult> {\n\t\t\t\ttry {\n\t\t\t\t\t++invokeCount;\n\n\t\t\t\t\tif (invokeCount === 1) {\n\t\t\t\t\t\tassert.strictEqual(context.triggerKind, modes.SignatureHelpTriggerKind.TriggerCharacter);\n\t\t\t\t\t\tassert.strictEqual(context.triggerCharacter, triggerCharacter);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tassert.fail('Unexpected invoke');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn emptySigHelpResult;\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\teditor.trigger('keyboard', Handler.Type, { text: triggerCharacter });\n\t\teditor.trigger('keyboard', Handler.Type, { text: 'x' });\n\n\t\tawait getNextHint(model);\n\t});\n\n\ttest('Retrigger while a pending resolve is still going on should preserve last active signature #96702', (done) => {\n\t\tconst editor = createMockEditor('');\n\t\tconst model = new ParameterHintsModel(editor, 50);\n\t\tdisposables.add(model);\n\n\t\tconst triggerCharacter = 'a';\n\t\tconst retriggerCharacter = 'b';\n\n\t\tlet invokeCount = 0;\n\t\tdisposables.add(modes.SignatureHelpProviderRegistry.register(mockFileSelector, new class implements modes.SignatureHelpProvider {\n\t\t\tsignatureHelpTriggerCharacters = [triggerCharacter];\n\t\t\tsignatureHelpRetriggerCharacters = [retriggerCharacter];\n\n\t\t\tasync provideSignatureHelp(_model: ITextModel, _position: Position, _token: CancellationToken, context: modes.SignatureHelpContext): Promise<modes.SignatureHelpResult> {\n\t\t\t\ttry {\n\t\t\t\t\t++invokeCount;\n\n\t\t\t\t\tif (invokeCount === 1) {\n\t\t\t\t\t\tassert.strictEqual(context.triggerKind, modes.SignatureHelpTriggerKind.TriggerCharacter);\n\t\t\t\t\t\tassert.strictEqual(context.triggerCharacter, triggerCharacter);\n\t\t\t\t\t\tsetTimeout(() => editor.trigger('keyboard', Handler.Type, { text: retriggerCharacter }), 50);\n\t\t\t\t\t} else if (invokeCount === 2) {\n\t\t\t\t\t\t// Trigger again while we wait for resolve to take place\n\t\t\t\t\t\tsetTimeout(() => editor.trigger('keyboard', Handler.Type, { text: retriggerCharacter }), 50);\n\t\t\t\t\t\tawait new Promise(resolve => setTimeout(resolve, 1000));\n\t\t\t\t\t} else if (invokeCount === 3) {\n\t\t\t\t\t\t// Make sure that in a retrigger during a pending resolve, we still have the old active signature.\n\t\t\t\t\t\tassert.strictEqual(context.activeSignatureHelp, emptySigHelp);\n\t\t\t\t\t\tdone();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tassert.fail('Unexpected invoke');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn emptySigHelpResult;\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t\tdone(err);\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\teditor.trigger('keyboard', Handler.Type, { text: triggerCharacter });\n\n\t\tgetNextHint(model)\n\t\t\t.then(() => getNextHint(model));\n\t});\n});\n\nfunction getNextHint(model: ParameterHintsModel) {\n\treturn new Promise<modes.SignatureHelpResult | undefined>(resolve => {\n\t\tconst sub = model.onChangedHints(e => {\n\t\t\tsub.dispose();\n\t\t\treturn resolve(e ? { value: e, dispose: () => { } } : undefined);\n\t\t});\n\t});\n}\n\n"]}