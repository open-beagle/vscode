{"version":3,"sources":["vs/editor/contrib/parameterHints/parameterHints.ts"],"names":[],"mappings":"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","file":"parameterHints.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IEditorContribution } from 'vs/editor/common/editorCommon';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { registerEditorAction, registerEditorContribution, ServicesAccessor, EditorAction, EditorCommand, registerEditorCommand } from 'vs/editor/browser/editorExtensions';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { ParameterHintsWidget } from './parameterHintsWidget';\nimport { Context } from 'vs/editor/contrib/parameterHints/provideSignatureHelp';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport * as modes from 'vs/editor/common/modes';\nimport { TriggerContext } from 'vs/editor/contrib/parameterHints/parameterHintsModel';\n\nclass ParameterHintsController extends Disposable implements IEditorContribution {\n\n\tpublic static readonly ID = 'editor.controller.parameterHints';\n\n\tpublic static get(editor: ICodeEditor): ParameterHintsController {\n\t\treturn editor.getContribution<ParameterHintsController>(ParameterHintsController.ID);\n\t}\n\n\tprivate readonly editor: ICodeEditor;\n\tprivate readonly widget: ParameterHintsWidget;\n\n\tconstructor(editor: ICodeEditor, @IInstantiationService instantiationService: IInstantiationService) {\n\t\tsuper();\n\t\tthis.editor = editor;\n\t\tthis.widget = this._register(instantiationService.createInstance(ParameterHintsWidget, this.editor));\n\t}\n\n\tcancel(): void {\n\t\tthis.widget.cancel();\n\t}\n\n\tprevious(): void {\n\t\tthis.widget.previous();\n\t}\n\n\tnext(): void {\n\t\tthis.widget.next();\n\t}\n\n\ttrigger(context: TriggerContext): void {\n\t\tthis.widget.trigger(context);\n\t}\n}\n\nexport class TriggerParameterHintsAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.triggerParameterHints',\n\t\t\tlabel: nls.localize('parameterHints.trigger.label', \"Trigger Parameter Hints\"),\n\t\t\talias: 'Trigger Parameter Hints',\n\t\t\tprecondition: EditorContextKeys.hasSignatureHelpProvider,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.Space,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst controller = ParameterHintsController.get(editor);\n\t\tif (controller) {\n\t\t\tcontroller.trigger({\n\t\t\t\ttriggerKind: modes.SignatureHelpTriggerKind.Invoke\n\t\t\t});\n\t\t}\n\t}\n}\n\nregisterEditorContribution(ParameterHintsController.ID, ParameterHintsController);\nregisterEditorAction(TriggerParameterHintsAction);\n\nconst weight = KeybindingWeight.EditorContrib + 75;\n\nconst ParameterHintsCommand = EditorCommand.bindToContribution<ParameterHintsController>(ParameterHintsController.get);\n\nregisterEditorCommand(new ParameterHintsCommand({\n\tid: 'closeParameterHints',\n\tprecondition: Context.Visible,\n\thandler: x => x.cancel(),\n\tkbOpts: {\n\t\tweight: weight,\n\t\tkbExpr: EditorContextKeys.focus,\n\t\tprimary: KeyCode.Escape,\n\t\tsecondary: [KeyMod.Shift | KeyCode.Escape]\n\t}\n}));\nregisterEditorCommand(new ParameterHintsCommand({\n\tid: 'showPrevParameterHint',\n\tprecondition: ContextKeyExpr.and(Context.Visible, Context.MultipleSignatures),\n\thandler: x => x.previous(),\n\tkbOpts: {\n\t\tweight: weight,\n\t\tkbExpr: EditorContextKeys.focus,\n\t\tprimary: KeyCode.UpArrow,\n\t\tsecondary: [KeyMod.Alt | KeyCode.UpArrow],\n\t\tmac: { primary: KeyCode.UpArrow, secondary: [KeyMod.Alt | KeyCode.UpArrow, KeyMod.WinCtrl | KeyCode.KEY_P] }\n\t}\n}));\nregisterEditorCommand(new ParameterHintsCommand({\n\tid: 'showNextParameterHint',\n\tprecondition: ContextKeyExpr.and(Context.Visible, Context.MultipleSignatures),\n\thandler: x => x.next(),\n\tkbOpts: {\n\t\tweight: weight,\n\t\tkbExpr: EditorContextKeys.focus,\n\t\tprimary: KeyCode.DownArrow,\n\t\tsecondary: [KeyMod.Alt | KeyCode.DownArrow],\n\t\tmac: { primary: KeyCode.DownArrow, secondary: [KeyMod.Alt | KeyCode.DownArrow, KeyMod.WinCtrl | KeyCode.KEY_N] }\n\t}\n}));\n"]}