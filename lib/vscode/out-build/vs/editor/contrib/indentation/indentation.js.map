{"version":3,"sources":["vs/editor/contrib/indentation/indentation.ts"],"names":[],"mappings":"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","file":"indentation.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport * as strings from 'vs/base/common/strings';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { EditorAction, IActionOptions, ServicesAccessor, registerEditorAction, registerEditorContribution } from 'vs/editor/browser/editorExtensions';\nimport { ShiftCommand } from 'vs/editor/common/commands/shiftCommand';\nimport { EditOperation } from 'vs/editor/common/core/editOperation';\nimport { Range, IRange } from 'vs/editor/common/core/range';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { ICommand, ICursorStateComputerData, IEditOperationBuilder, IEditorContribution } from 'vs/editor/common/editorCommon';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { IIdentifiedSingleEditOperation, ITextModel, EndOfLineSequence } from 'vs/editor/common/model';\nimport { TextModel } from 'vs/editor/common/model/textModel';\nimport { StandardTokenType, TextEdit } from 'vs/editor/common/modes';\nimport { LanguageConfigurationRegistry } from 'vs/editor/common/modes/languageConfigurationRegistry';\nimport { IndentConsts } from 'vs/editor/common/modes/supports/indentRules';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport * as indentUtils from 'vs/editor/contrib/indentation/indentUtils';\nimport { IQuickInputService } from 'vs/platform/quickinput/common/quickInput';\nimport { EditorOption, EditorAutoIndentStrategy } from 'vs/editor/common/config/editorOptions';\n\nexport function getReindentEditOperations(model: ITextModel, startLineNumber: number, endLineNumber: number, inheritedIndent?: string): IIdentifiedSingleEditOperation[] {\n\tif (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\n\t\t// Model is empty\n\t\treturn [];\n\t}\n\n\tlet indentationRules = LanguageConfigurationRegistry.getIndentationRules(model.getLanguageIdentifier().id);\n\tif (!indentationRules) {\n\t\treturn [];\n\t}\n\n\tendLineNumber = Math.min(endLineNumber, model.getLineCount());\n\n\t// Skip `unIndentedLinePattern` lines\n\twhile (startLineNumber <= endLineNumber) {\n\t\tif (!indentationRules.unIndentedLinePattern) {\n\t\t\tbreak;\n\t\t}\n\n\t\tlet text = model.getLineContent(startLineNumber);\n\t\tif (!indentationRules.unIndentedLinePattern.test(text)) {\n\t\t\tbreak;\n\t\t}\n\n\t\tstartLineNumber++;\n\t}\n\n\tif (startLineNumber > endLineNumber - 1) {\n\t\treturn [];\n\t}\n\n\tconst { tabSize, indentSize, insertSpaces } = model.getOptions();\n\tconst shiftIndent = (indentation: string, count?: number) => {\n\t\tcount = count || 1;\n\t\treturn ShiftCommand.shiftIndent(indentation, indentation.length + count, tabSize, indentSize, insertSpaces);\n\t};\n\tconst unshiftIndent = (indentation: string, count?: number) => {\n\t\tcount = count || 1;\n\t\treturn ShiftCommand.unshiftIndent(indentation, indentation.length + count, tabSize, indentSize, insertSpaces);\n\t};\n\tlet indentEdits: IIdentifiedSingleEditOperation[] = [];\n\n\t// indentation being passed to lines below\n\tlet globalIndent: string;\n\n\t// Calculate indentation for the first line\n\t// If there is no passed-in indentation, we use the indentation of the first line as base.\n\tlet currentLineText = model.getLineContent(startLineNumber);\n\tlet adjustedLineContent = currentLineText;\n\tif (inheritedIndent !== undefined && inheritedIndent !== null) {\n\t\tglobalIndent = inheritedIndent;\n\t\tlet oldIndentation = strings.getLeadingWhitespace(currentLineText);\n\n\t\tadjustedLineContent = globalIndent + currentLineText.substring(oldIndentation.length);\n\t\tif (indentationRules.decreaseIndentPattern && indentationRules.decreaseIndentPattern.test(adjustedLineContent)) {\n\t\t\tglobalIndent = unshiftIndent(globalIndent);\n\t\t\tadjustedLineContent = globalIndent + currentLineText.substring(oldIndentation.length);\n\n\t\t}\n\t\tif (currentLineText !== adjustedLineContent) {\n\t\t\tindentEdits.push(EditOperation.replaceMove(new Selection(startLineNumber, 1, startLineNumber, oldIndentation.length + 1), TextModel.normalizeIndentation(globalIndent, indentSize, insertSpaces)));\n\t\t}\n\t} else {\n\t\tglobalIndent = strings.getLeadingWhitespace(currentLineText);\n\t}\n\n\t// idealIndentForNextLine doesn't equal globalIndent when there is a line matching `indentNextLinePattern`.\n\tlet idealIndentForNextLine: string = globalIndent;\n\n\tif (indentationRules.increaseIndentPattern && indentationRules.increaseIndentPattern.test(adjustedLineContent)) {\n\t\tidealIndentForNextLine = shiftIndent(idealIndentForNextLine);\n\t\tglobalIndent = shiftIndent(globalIndent);\n\t}\n\telse if (indentationRules.indentNextLinePattern && indentationRules.indentNextLinePattern.test(adjustedLineContent)) {\n\t\tidealIndentForNextLine = shiftIndent(idealIndentForNextLine);\n\t}\n\n\tstartLineNumber++;\n\n\t// Calculate indentation adjustment for all following lines\n\tfor (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n\t\tlet text = model.getLineContent(lineNumber);\n\t\tlet oldIndentation = strings.getLeadingWhitespace(text);\n\t\tlet adjustedLineContent = idealIndentForNextLine + text.substring(oldIndentation.length);\n\n\t\tif (indentationRules.decreaseIndentPattern && indentationRules.decreaseIndentPattern.test(adjustedLineContent)) {\n\t\t\tidealIndentForNextLine = unshiftIndent(idealIndentForNextLine);\n\t\t\tglobalIndent = unshiftIndent(globalIndent);\n\t\t}\n\n\t\tif (oldIndentation !== idealIndentForNextLine) {\n\t\t\tindentEdits.push(EditOperation.replaceMove(new Selection(lineNumber, 1, lineNumber, oldIndentation.length + 1), TextModel.normalizeIndentation(idealIndentForNextLine, indentSize, insertSpaces)));\n\t\t}\n\n\t\t// calculate idealIndentForNextLine\n\t\tif (indentationRules.unIndentedLinePattern && indentationRules.unIndentedLinePattern.test(text)) {\n\t\t\t// In reindent phase, if the line matches `unIndentedLinePattern` we inherit indentation from above lines\n\t\t\t// but don't change globalIndent and idealIndentForNextLine.\n\t\t\tcontinue;\n\t\t} else if (indentationRules.increaseIndentPattern && indentationRules.increaseIndentPattern.test(adjustedLineContent)) {\n\t\t\tglobalIndent = shiftIndent(globalIndent);\n\t\t\tidealIndentForNextLine = globalIndent;\n\t\t} else if (indentationRules.indentNextLinePattern && indentationRules.indentNextLinePattern.test(adjustedLineContent)) {\n\t\t\tidealIndentForNextLine = shiftIndent(idealIndentForNextLine);\n\t\t} else {\n\t\t\tidealIndentForNextLine = globalIndent;\n\t\t}\n\t}\n\n\treturn indentEdits;\n}\n\nexport class IndentationToSpacesAction extends EditorAction {\n\tpublic static readonly ID = 'editor.action.indentationToSpaces';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: IndentationToSpacesAction.ID,\n\t\t\tlabel: nls.localize('indentationToSpaces', \"Convert Indentation to Spaces\"),\n\t\t\talias: 'Convert Indentation to Spaces',\n\t\t\tprecondition: EditorContextKeys.writable\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tlet model = editor.getModel();\n\t\tif (!model) {\n\t\t\treturn;\n\t\t}\n\t\tlet modelOpts = model.getOptions();\n\t\tlet selection = editor.getSelection();\n\t\tif (!selection) {\n\t\t\treturn;\n\t\t}\n\t\tconst command = new IndentationToSpacesCommand(selection, modelOpts.tabSize);\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, [command]);\n\t\teditor.pushUndoStop();\n\n\t\tmodel.updateOptions({\n\t\t\tinsertSpaces: true\n\t\t});\n\t}\n}\n\nexport class IndentationToTabsAction extends EditorAction {\n\tpublic static readonly ID = 'editor.action.indentationToTabs';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: IndentationToTabsAction.ID,\n\t\t\tlabel: nls.localize('indentationToTabs', \"Convert Indentation to Tabs\"),\n\t\t\talias: 'Convert Indentation to Tabs',\n\t\t\tprecondition: EditorContextKeys.writable\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tlet model = editor.getModel();\n\t\tif (!model) {\n\t\t\treturn;\n\t\t}\n\t\tlet modelOpts = model.getOptions();\n\t\tlet selection = editor.getSelection();\n\t\tif (!selection) {\n\t\t\treturn;\n\t\t}\n\t\tconst command = new IndentationToTabsCommand(selection, modelOpts.tabSize);\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, [command]);\n\t\teditor.pushUndoStop();\n\n\t\tmodel.updateOptions({\n\t\t\tinsertSpaces: false\n\t\t});\n\t}\n}\n\nexport class ChangeIndentationSizeAction extends EditorAction {\n\n\tconstructor(private readonly insertSpaces: boolean, opts: IActionOptions) {\n\t\tsuper(opts);\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\tconst modelService = accessor.get(IModelService);\n\n\t\tlet model = editor.getModel();\n\t\tif (!model) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet creationOpts = modelService.getCreationOptions(model.getLanguageIdentifier().language, model.uri, model.isForSimpleWidget);\n\t\tconst picks = [1, 2, 3, 4, 5, 6, 7, 8].map(n => ({\n\t\t\tid: n.toString(),\n\t\t\tlabel: n.toString(),\n\t\t\t// add description for tabSize value set in the configuration\n\t\t\tdescription: n === creationOpts.tabSize ? nls.localize('configuredTabSize', \"Configured Tab Size\") : undefined\n\t\t}));\n\n\t\t// auto focus the tabSize set for the current editor\n\t\tconst autoFocusIndex = Math.min(model.getOptions().tabSize - 1, 7);\n\n\t\tsetTimeout(() => {\n\t\t\tquickInputService.pick(picks, { placeHolder: nls.localize({ key: 'selectTabWidth', comment: ['Tab corresponds to the tab key'] }, \"Select Tab Size for Current File\"), activeItem: picks[autoFocusIndex] }).then(pick => {\n\t\t\t\tif (pick) {\n\t\t\t\t\tif (model && !model.isDisposed()) {\n\t\t\t\t\t\tmodel.updateOptions({\n\t\t\t\t\t\t\ttabSize: parseInt(pick.label, 10),\n\t\t\t\t\t\t\tinsertSpaces: this.insertSpaces\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}, 50/* quick input is sensitive to being opened so soon after another */);\n\t}\n}\n\nexport class IndentUsingTabs extends ChangeIndentationSizeAction {\n\n\tpublic static readonly ID = 'editor.action.indentUsingTabs';\n\n\tconstructor() {\n\t\tsuper(false, {\n\t\t\tid: IndentUsingTabs.ID,\n\t\t\tlabel: nls.localize('indentUsingTabs', \"Indent Using Tabs\"),\n\t\t\talias: 'Indent Using Tabs',\n\t\t\tprecondition: undefined\n\t\t});\n\t}\n}\n\nexport class IndentUsingSpaces extends ChangeIndentationSizeAction {\n\n\tpublic static readonly ID = 'editor.action.indentUsingSpaces';\n\n\tconstructor() {\n\t\tsuper(true, {\n\t\t\tid: IndentUsingSpaces.ID,\n\t\t\tlabel: nls.localize('indentUsingSpaces', \"Indent Using Spaces\"),\n\t\t\talias: 'Indent Using Spaces',\n\t\t\tprecondition: undefined\n\t\t});\n\t}\n}\n\nexport class DetectIndentation extends EditorAction {\n\n\tpublic static readonly ID = 'editor.action.detectIndentation';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: DetectIndentation.ID,\n\t\t\tlabel: nls.localize('detectIndentation', \"Detect Indentation from Content\"),\n\t\t\talias: 'Detect Indentation from Content',\n\t\t\tprecondition: undefined\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst modelService = accessor.get(IModelService);\n\n\t\tlet model = editor.getModel();\n\t\tif (!model) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet creationOpts = modelService.getCreationOptions(model.getLanguageIdentifier().language, model.uri, model.isForSimpleWidget);\n\t\tmodel.detectIndentation(creationOpts.insertSpaces, creationOpts.tabSize);\n\t}\n}\n\nexport class ReindentLinesAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.reindentlines',\n\t\t\tlabel: nls.localize('editor.reindentlines', \"Reindent Lines\"),\n\t\t\talias: 'Reindent Lines',\n\t\t\tprecondition: EditorContextKeys.writable\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tlet model = editor.getModel();\n\t\tif (!model) {\n\t\t\treturn;\n\t\t}\n\t\tlet edits = getReindentEditOperations(model, 1, model.getLineCount());\n\t\tif (edits.length > 0) {\n\t\t\teditor.pushUndoStop();\n\t\t\teditor.executeEdits(this.id, edits);\n\t\t\teditor.pushUndoStop();\n\t\t}\n\t}\n}\n\nexport class ReindentSelectedLinesAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.reindentselectedlines',\n\t\t\tlabel: nls.localize('editor.reindentselectedlines', \"Reindent Selected Lines\"),\n\t\t\talias: 'Reindent Selected Lines',\n\t\t\tprecondition: EditorContextKeys.writable\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tlet model = editor.getModel();\n\t\tif (!model) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet selections = editor.getSelections();\n\t\tif (selections === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet edits: IIdentifiedSingleEditOperation[] = [];\n\n\t\tfor (let selection of selections) {\n\t\t\tlet startLineNumber = selection.startLineNumber;\n\t\t\tlet endLineNumber = selection.endLineNumber;\n\n\t\t\tif (startLineNumber !== endLineNumber && selection.endColumn === 1) {\n\t\t\t\tendLineNumber--;\n\t\t\t}\n\n\t\t\tif (startLineNumber === 1) {\n\t\t\t\tif (startLineNumber === endLineNumber) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tstartLineNumber--;\n\t\t\t}\n\n\t\t\tlet editOperations = getReindentEditOperations(model, startLineNumber, endLineNumber);\n\t\t\tedits.push(...editOperations);\n\t\t}\n\n\t\tif (edits.length > 0) {\n\t\t\teditor.pushUndoStop();\n\t\t\teditor.executeEdits(this.id, edits);\n\t\t\teditor.pushUndoStop();\n\t\t}\n\t}\n}\n\nexport class AutoIndentOnPasteCommand implements ICommand {\n\n\tprivate readonly _edits: { range: IRange; text: string; eol?: EndOfLineSequence; }[];\n\n\tprivate readonly _initialSelection: Selection;\n\tprivate _selectionId: string | null;\n\n\tconstructor(edits: TextEdit[], initialSelection: Selection) {\n\t\tthis._initialSelection = initialSelection;\n\t\tthis._edits = [];\n\t\tthis._selectionId = null;\n\n\t\tfor (let edit of edits) {\n\t\t\tif (edit.range && typeof edit.text === 'string') {\n\t\t\t\tthis._edits.push(edit as { range: IRange; text: string; eol?: EndOfLineSequence; });\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tfor (let edit of this._edits) {\n\t\t\tbuilder.addEditOperation(Range.lift(edit.range), edit.text);\n\t\t}\n\n\t\tlet selectionIsSet = false;\n\t\tif (Array.isArray(this._edits) && this._edits.length === 1 && this._initialSelection.isEmpty()) {\n\t\t\tif (this._edits[0].range.startColumn === this._initialSelection.endColumn &&\n\t\t\t\tthis._edits[0].range.startLineNumber === this._initialSelection.endLineNumber) {\n\t\t\t\tselectionIsSet = true;\n\t\t\t\tthis._selectionId = builder.trackSelection(this._initialSelection, true);\n\t\t\t} else if (this._edits[0].range.endColumn === this._initialSelection.startColumn &&\n\t\t\t\tthis._edits[0].range.endLineNumber === this._initialSelection.startLineNumber) {\n\t\t\t\tselectionIsSet = true;\n\t\t\t\tthis._selectionId = builder.trackSelection(this._initialSelection, false);\n\t\t\t}\n\t\t}\n\n\t\tif (!selectionIsSet) {\n\t\t\tthis._selectionId = builder.trackSelection(this._initialSelection);\n\t\t}\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\treturn helper.getTrackedSelection(this._selectionId!);\n\t}\n}\n\nexport class AutoIndentOnPaste implements IEditorContribution {\n\tpublic static readonly ID = 'editor.contrib.autoIndentOnPaste';\n\n\tprivate readonly editor: ICodeEditor;\n\tprivate readonly callOnDispose = new DisposableStore();\n\tprivate readonly callOnModel = new DisposableStore();\n\n\tconstructor(editor: ICodeEditor) {\n\t\tthis.editor = editor;\n\n\t\tthis.callOnDispose.add(editor.onDidChangeConfiguration(() => this.update()));\n\t\tthis.callOnDispose.add(editor.onDidChangeModel(() => this.update()));\n\t\tthis.callOnDispose.add(editor.onDidChangeModelLanguage(() => this.update()));\n\t}\n\n\tprivate update(): void {\n\n\t\t// clean up\n\t\tthis.callOnModel.clear();\n\n\t\t// we are disabled\n\t\tif (this.editor.getOption(EditorOption.autoIndent) < EditorAutoIndentStrategy.Full || this.editor.getOption(EditorOption.formatOnPaste)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// no model\n\t\tif (!this.editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.callOnModel.add(this.editor.onDidPaste(({ range }) => {\n\t\t\tthis.trigger(range);\n\t\t}));\n\t}\n\n\tprivate trigger(range: Range): void {\n\t\tlet selections = this.editor.getSelections();\n\t\tif (selections === null || selections.length > 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = this.editor.getModel();\n\t\tif (!model) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!model.isCheapToTokenize(range.getStartPosition().lineNumber)) {\n\t\t\treturn;\n\t\t}\n\t\tconst autoIndent = this.editor.getOption(EditorOption.autoIndent);\n\t\tconst { tabSize, indentSize, insertSpaces } = model.getOptions();\n\t\tlet textEdits: TextEdit[] = [];\n\n\t\tlet indentConverter = {\n\t\t\tshiftIndent: (indentation: string) => {\n\t\t\t\treturn ShiftCommand.shiftIndent(indentation, indentation.length + 1, tabSize, indentSize, insertSpaces);\n\t\t\t},\n\t\t\tunshiftIndent: (indentation: string) => {\n\t\t\t\treturn ShiftCommand.unshiftIndent(indentation, indentation.length + 1, tabSize, indentSize, insertSpaces);\n\t\t\t}\n\t\t};\n\n\t\tlet startLineNumber = range.startLineNumber;\n\n\t\twhile (startLineNumber <= range.endLineNumber) {\n\t\t\tif (this.shouldIgnoreLine(model, startLineNumber)) {\n\t\t\t\tstartLineNumber++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\n\t\tif (startLineNumber > range.endLineNumber) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet firstLineText = model.getLineContent(startLineNumber);\n\t\tif (!/\\S/.test(firstLineText.substring(0, range.startColumn - 1))) {\n\t\t\tlet indentOfFirstLine = LanguageConfigurationRegistry.getGoodIndentForLine(autoIndent, model, model.getLanguageIdentifier().id, startLineNumber, indentConverter);\n\n\t\t\tif (indentOfFirstLine !== null) {\n\t\t\t\tlet oldIndentation = strings.getLeadingWhitespace(firstLineText);\n\t\t\t\tlet newSpaceCnt = indentUtils.getSpaceCnt(indentOfFirstLine, tabSize);\n\t\t\t\tlet oldSpaceCnt = indentUtils.getSpaceCnt(oldIndentation, tabSize);\n\n\t\t\t\tif (newSpaceCnt !== oldSpaceCnt) {\n\t\t\t\t\tlet newIndent = indentUtils.generateIndent(newSpaceCnt, tabSize, insertSpaces);\n\t\t\t\t\ttextEdits.push({\n\t\t\t\t\t\trange: new Range(startLineNumber, 1, startLineNumber, oldIndentation.length + 1),\n\t\t\t\t\t\ttext: newIndent\n\t\t\t\t\t});\n\t\t\t\t\tfirstLineText = newIndent + firstLineText.substr(oldIndentation.length);\n\t\t\t\t} else {\n\t\t\t\t\tlet indentMetadata = LanguageConfigurationRegistry.getIndentMetadata(model, startLineNumber);\n\n\t\t\t\t\tif (indentMetadata === 0 || indentMetadata === IndentConsts.UNINDENT_MASK) {\n\t\t\t\t\t\t// we paste content into a line where only contains whitespaces\n\t\t\t\t\t\t// after pasting, the indentation of the first line is already correct\n\t\t\t\t\t\t// the first line doesn't match any indentation rule\n\t\t\t\t\t\t// then no-op.\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst firstLineNumber = startLineNumber;\n\n\t\t// ignore empty or ignored lines\n\t\twhile (startLineNumber < range.endLineNumber) {\n\t\t\tif (!/\\S/.test(model.getLineContent(startLineNumber + 1))) {\n\t\t\t\tstartLineNumber++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\n\t\tif (startLineNumber !== range.endLineNumber) {\n\t\t\tlet virtualModel = {\n\t\t\t\tgetLineTokens: (lineNumber: number) => {\n\t\t\t\t\treturn model.getLineTokens(lineNumber);\n\t\t\t\t},\n\t\t\t\tgetLanguageIdentifier: () => {\n\t\t\t\t\treturn model.getLanguageIdentifier();\n\t\t\t\t},\n\t\t\t\tgetLanguageIdAtPosition: (lineNumber: number, column: number) => {\n\t\t\t\t\treturn model.getLanguageIdAtPosition(lineNumber, column);\n\t\t\t\t},\n\t\t\t\tgetLineContent: (lineNumber: number) => {\n\t\t\t\t\tif (lineNumber === firstLineNumber) {\n\t\t\t\t\t\treturn firstLineText;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn model.getLineContent(lineNumber);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tlet indentOfSecondLine = LanguageConfigurationRegistry.getGoodIndentForLine(autoIndent, virtualModel, model.getLanguageIdentifier().id, startLineNumber + 1, indentConverter);\n\t\t\tif (indentOfSecondLine !== null) {\n\t\t\t\tlet newSpaceCntOfSecondLine = indentUtils.getSpaceCnt(indentOfSecondLine, tabSize);\n\t\t\t\tlet oldSpaceCntOfSecondLine = indentUtils.getSpaceCnt(strings.getLeadingWhitespace(model.getLineContent(startLineNumber + 1)), tabSize);\n\n\t\t\t\tif (newSpaceCntOfSecondLine !== oldSpaceCntOfSecondLine) {\n\t\t\t\t\tlet spaceCntOffset = newSpaceCntOfSecondLine - oldSpaceCntOfSecondLine;\n\t\t\t\t\tfor (let i = startLineNumber + 1; i <= range.endLineNumber; i++) {\n\t\t\t\t\t\tlet lineContent = model.getLineContent(i);\n\t\t\t\t\t\tlet originalIndent = strings.getLeadingWhitespace(lineContent);\n\t\t\t\t\t\tlet originalSpacesCnt = indentUtils.getSpaceCnt(originalIndent, tabSize);\n\t\t\t\t\t\tlet newSpacesCnt = originalSpacesCnt + spaceCntOffset;\n\t\t\t\t\t\tlet newIndent = indentUtils.generateIndent(newSpacesCnt, tabSize, insertSpaces);\n\n\t\t\t\t\t\tif (newIndent !== originalIndent) {\n\t\t\t\t\t\t\ttextEdits.push({\n\t\t\t\t\t\t\t\trange: new Range(i, 1, i, originalIndent.length + 1),\n\t\t\t\t\t\t\t\ttext: newIndent\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (textEdits.length > 0) {\n\t\t\tthis.editor.pushUndoStop();\n\t\t\tlet cmd = new AutoIndentOnPasteCommand(textEdits, this.editor.getSelection()!);\n\t\t\tthis.editor.executeCommand('autoIndentOnPaste', cmd);\n\t\t\tthis.editor.pushUndoStop();\n\t\t}\n\t}\n\n\tprivate shouldIgnoreLine(model: ITextModel, lineNumber: number): boolean {\n\t\tmodel.forceTokenization(lineNumber);\n\t\tlet nonWhitespaceColumn = model.getLineFirstNonWhitespaceColumn(lineNumber);\n\t\tif (nonWhitespaceColumn === 0) {\n\t\t\treturn true;\n\t\t}\n\t\tlet tokens = model.getLineTokens(lineNumber);\n\t\tif (tokens.getCount() > 0) {\n\t\t\tlet firstNonWhitespaceTokenIndex = tokens.findTokenIndexAtOffset(nonWhitespaceColumn);\n\t\t\tif (firstNonWhitespaceTokenIndex >= 0 && tokens.getStandardTokenType(firstNonWhitespaceTokenIndex) === StandardTokenType.Comment) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpublic dispose(): void {\n\t\tthis.callOnDispose.dispose();\n\t\tthis.callOnModel.dispose();\n\t}\n}\n\nfunction getIndentationEditOperations(model: ITextModel, builder: IEditOperationBuilder, tabSize: number, tabsToSpaces: boolean): void {\n\tif (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\n\t\t// Model is empty\n\t\treturn;\n\t}\n\n\tlet spaces = '';\n\tfor (let i = 0; i < tabSize; i++) {\n\t\tspaces += ' ';\n\t}\n\n\tlet spacesRegExp = new RegExp(spaces, 'gi');\n\n\tfor (let lineNumber = 1, lineCount = model.getLineCount(); lineNumber <= lineCount; lineNumber++) {\n\t\tlet lastIndentationColumn = model.getLineFirstNonWhitespaceColumn(lineNumber);\n\t\tif (lastIndentationColumn === 0) {\n\t\t\tlastIndentationColumn = model.getLineMaxColumn(lineNumber);\n\t\t}\n\n\t\tif (lastIndentationColumn === 1) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst originalIndentationRange = new Range(lineNumber, 1, lineNumber, lastIndentationColumn);\n\t\tconst originalIndentation = model.getValueInRange(originalIndentationRange);\n\t\tconst newIndentation = (\n\t\t\ttabsToSpaces\n\t\t\t\t? originalIndentation.replace(/\\t/ig, spaces)\n\t\t\t\t: originalIndentation.replace(spacesRegExp, '\\t')\n\t\t);\n\n\t\tbuilder.addEditOperation(originalIndentationRange, newIndentation);\n\t}\n}\n\nexport class IndentationToSpacesCommand implements ICommand {\n\n\tprivate selectionId: string | null = null;\n\n\tconstructor(private readonly selection: Selection, private tabSize: number) { }\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tthis.selectionId = builder.trackSelection(this.selection);\n\t\tgetIndentationEditOperations(model, builder, this.tabSize, true);\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\treturn helper.getTrackedSelection(this.selectionId!);\n\t}\n}\n\nexport class IndentationToTabsCommand implements ICommand {\n\n\tprivate selectionId: string | null = null;\n\n\tconstructor(private readonly selection: Selection, private tabSize: number) { }\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tthis.selectionId = builder.trackSelection(this.selection);\n\t\tgetIndentationEditOperations(model, builder, this.tabSize, false);\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\treturn helper.getTrackedSelection(this.selectionId!);\n\t}\n}\n\nregisterEditorContribution(AutoIndentOnPaste.ID, AutoIndentOnPaste);\nregisterEditorAction(IndentationToSpacesAction);\nregisterEditorAction(IndentationToTabsAction);\nregisterEditorAction(IndentUsingTabs);\nregisterEditorAction(IndentUsingSpaces);\nregisterEditorAction(DetectIndentation);\nregisterEditorAction(ReindentLinesAction);\nregisterEditorAction(ReindentSelectedLinesAction);\n"]}