{"version":3,"sources":["vs/editor/contrib/linesOperations/linesOperations.ts"],"names":[],"mappings":"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","file":"linesOperations.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { KeyChord, KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport { CoreEditingCommands } from 'vs/editor/browser/controller/coreCommands';\nimport { ICodeEditor, IActiveCodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { EditorAction, IActionOptions, ServicesAccessor, registerEditorAction } from 'vs/editor/browser/editorExtensions';\nimport { ReplaceCommand, ReplaceCommandThatPreservesSelection, ReplaceCommandThatSelectsText } from 'vs/editor/common/commands/replaceCommand';\nimport { TrimTrailingWhitespaceCommand } from 'vs/editor/common/commands/trimTrailingWhitespaceCommand';\nimport { TypeOperations } from 'vs/editor/common/controller/cursorTypeOperations';\nimport { EditOperation } from 'vs/editor/common/core/editOperation';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { ICommand } from 'vs/editor/common/editorCommon';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { IIdentifiedSingleEditOperation, ITextModel } from 'vs/editor/common/model';\nimport { CopyLinesCommand } from 'vs/editor/contrib/linesOperations/copyLinesCommand';\nimport { MoveLinesCommand } from 'vs/editor/contrib/linesOperations/moveLinesCommand';\nimport { SortLinesCommand } from 'vs/editor/contrib/linesOperations/sortLinesCommand';\nimport { MenuId } from 'vs/platform/actions/common/actions';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { EditorOption } from 'vs/editor/common/config/editorOptions';\n\n// copy lines\n\nabstract class AbstractCopyLinesAction extends EditorAction {\n\n\tprivate readonly down: boolean;\n\n\tconstructor(down: boolean, opts: IActionOptions) {\n\t\tsuper(opts);\n\t\tthis.down = down;\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst selections = editor.getSelections().map((selection, index) => ({ selection, index, ignore: false }));\n\t\tselections.sort((a, b) => Range.compareRangesUsingStarts(a.selection, b.selection));\n\n\t\t// Remove selections that would result in copying the same line\n\t\tlet prev = selections[0];\n\t\tfor (let i = 1; i < selections.length; i++) {\n\t\t\tconst curr = selections[i];\n\t\t\tif (prev.selection.endLineNumber === curr.selection.startLineNumber) {\n\t\t\t\t// these two selections would copy the same line\n\t\t\t\tif (prev.index < curr.index) {\n\t\t\t\t\t// prev wins\n\t\t\t\t\tcurr.ignore = true;\n\t\t\t\t} else {\n\t\t\t\t\t// curr wins\n\t\t\t\t\tprev.ignore = true;\n\t\t\t\t\tprev = curr;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst commands: ICommand[] = [];\n\t\tfor (const selection of selections) {\n\t\t\tcommands.push(new CopyLinesCommand(selection.selection, this.down, selection.ignore));\n\t\t}\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, commands);\n\t\teditor.pushUndoStop();\n\t}\n}\n\nclass CopyLinesUpAction extends AbstractCopyLinesAction {\n\tconstructor() {\n\t\tsuper(false, {\n\t\t\tid: 'editor.action.copyLinesUpAction',\n\t\t\tlabel: nls.localize('lines.copyUp', \"Copy Line Up\"),\n\t\t\talias: 'Copy Line Up',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.Alt | KeyMod.Shift | KeyCode.UpArrow,\n\t\t\t\tlinux: { primary: KeyMod.CtrlCmd | KeyMod.Alt | KeyMod.Shift | KeyCode.UpArrow },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t},\n\t\t\tmenuOpts: {\n\t\t\t\tmenuId: MenuId.MenubarSelectionMenu,\n\t\t\t\tgroup: '2_line',\n\t\t\t\ttitle: nls.localize({ key: 'miCopyLinesUp', comment: ['&& denotes a mnemonic'] }, \"&&Copy Line Up\"),\n\t\t\t\torder: 1\n\t\t\t}\n\t\t});\n\t}\n}\n\nclass CopyLinesDownAction extends AbstractCopyLinesAction {\n\tconstructor() {\n\t\tsuper(true, {\n\t\t\tid: 'editor.action.copyLinesDownAction',\n\t\t\tlabel: nls.localize('lines.copyDown', \"Copy Line Down\"),\n\t\t\talias: 'Copy Line Down',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.Alt | KeyMod.Shift | KeyCode.DownArrow,\n\t\t\t\tlinux: { primary: KeyMod.CtrlCmd | KeyMod.Alt | KeyMod.Shift | KeyCode.DownArrow },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t},\n\t\t\tmenuOpts: {\n\t\t\t\tmenuId: MenuId.MenubarSelectionMenu,\n\t\t\t\tgroup: '2_line',\n\t\t\t\ttitle: nls.localize({ key: 'miCopyLinesDown', comment: ['&& denotes a mnemonic'] }, \"Co&&py Line Down\"),\n\t\t\t\torder: 2\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport class DuplicateSelectionAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.duplicateSelection',\n\t\t\tlabel: nls.localize('duplicateSelection', \"Duplicate Selection\"),\n\t\t\talias: 'Duplicate Selection',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tmenuOpts: {\n\t\t\t\tmenuId: MenuId.MenubarSelectionMenu,\n\t\t\t\tgroup: '2_line',\n\t\t\t\ttitle: nls.localize({ key: 'miDuplicateSelection', comment: ['&& denotes a mnemonic'] }, \"&&Duplicate Selection\"),\n\t\t\t\torder: 5\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor, args: any): void {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst commands: ICommand[] = [];\n\t\tconst selections = editor.getSelections();\n\t\tconst model = editor.getModel();\n\n\t\tfor (const selection of selections) {\n\t\t\tif (selection.isEmpty()) {\n\t\t\t\tcommands.push(new CopyLinesCommand(selection, true));\n\t\t\t} else {\n\t\t\t\tconst insertSelection = new Selection(selection.endLineNumber, selection.endColumn, selection.endLineNumber, selection.endColumn);\n\t\t\t\tcommands.push(new ReplaceCommandThatSelectsText(insertSelection, model.getValueInRange(selection)));\n\t\t\t}\n\t\t}\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, commands);\n\t\teditor.pushUndoStop();\n\t}\n}\n\n// move lines\n\nabstract class AbstractMoveLinesAction extends EditorAction {\n\n\tprivate readonly down: boolean;\n\n\tconstructor(down: boolean, opts: IActionOptions) {\n\t\tsuper(opts);\n\t\tthis.down = down;\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\n\t\tlet commands: ICommand[] = [];\n\t\tlet selections = editor.getSelections() || [];\n\t\tconst autoIndent = editor.getOption(EditorOption.autoIndent);\n\n\t\tfor (const selection of selections) {\n\t\t\tcommands.push(new MoveLinesCommand(selection, this.down, autoIndent));\n\t\t}\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, commands);\n\t\teditor.pushUndoStop();\n\t}\n}\n\nclass MoveLinesUpAction extends AbstractMoveLinesAction {\n\tconstructor() {\n\t\tsuper(false, {\n\t\t\tid: 'editor.action.moveLinesUpAction',\n\t\t\tlabel: nls.localize('lines.moveUp', \"Move Line Up\"),\n\t\t\talias: 'Move Line Up',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.Alt | KeyCode.UpArrow,\n\t\t\t\tlinux: { primary: KeyMod.Alt | KeyCode.UpArrow },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t},\n\t\t\tmenuOpts: {\n\t\t\t\tmenuId: MenuId.MenubarSelectionMenu,\n\t\t\t\tgroup: '2_line',\n\t\t\t\ttitle: nls.localize({ key: 'miMoveLinesUp', comment: ['&& denotes a mnemonic'] }, \"Mo&&ve Line Up\"),\n\t\t\t\torder: 3\n\t\t\t}\n\t\t});\n\t}\n}\n\nclass MoveLinesDownAction extends AbstractMoveLinesAction {\n\tconstructor() {\n\t\tsuper(true, {\n\t\t\tid: 'editor.action.moveLinesDownAction',\n\t\t\tlabel: nls.localize('lines.moveDown', \"Move Line Down\"),\n\t\t\talias: 'Move Line Down',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.Alt | KeyCode.DownArrow,\n\t\t\t\tlinux: { primary: KeyMod.Alt | KeyCode.DownArrow },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t},\n\t\t\tmenuOpts: {\n\t\t\t\tmenuId: MenuId.MenubarSelectionMenu,\n\t\t\t\tgroup: '2_line',\n\t\t\t\ttitle: nls.localize({ key: 'miMoveLinesDown', comment: ['&& denotes a mnemonic'] }, \"Move &&Line Down\"),\n\t\t\t\torder: 4\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport abstract class AbstractSortLinesAction extends EditorAction {\n\tprivate readonly descending: boolean;\n\n\tconstructor(descending: boolean, opts: IActionOptions) {\n\t\tsuper(opts);\n\t\tthis.descending = descending;\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst selections = editor.getSelections() || [];\n\n\t\tfor (const selection of selections) {\n\t\t\tif (!SortLinesCommand.canRun(editor.getModel(), selection, this.descending)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tlet commands: ICommand[] = [];\n\t\tfor (let i = 0, len = selections.length; i < len; i++) {\n\t\t\tcommands[i] = new SortLinesCommand(selections[i], this.descending);\n\t\t}\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, commands);\n\t\teditor.pushUndoStop();\n\t}\n}\n\nexport class SortLinesAscendingAction extends AbstractSortLinesAction {\n\tconstructor() {\n\t\tsuper(false, {\n\t\t\tid: 'editor.action.sortLinesAscending',\n\t\t\tlabel: nls.localize('lines.sortAscending', \"Sort Lines Ascending\"),\n\t\t\talias: 'Sort Lines Ascending',\n\t\t\tprecondition: EditorContextKeys.writable\n\t\t});\n\t}\n}\n\nexport class SortLinesDescendingAction extends AbstractSortLinesAction {\n\tconstructor() {\n\t\tsuper(true, {\n\t\t\tid: 'editor.action.sortLinesDescending',\n\t\t\tlabel: nls.localize('lines.sortDescending', \"Sort Lines Descending\"),\n\t\t\talias: 'Sort Lines Descending',\n\t\t\tprecondition: EditorContextKeys.writable\n\t\t});\n\t}\n}\n\nexport class TrimTrailingWhitespaceAction extends EditorAction {\n\n\tpublic static readonly ID = 'editor.action.trimTrailingWhitespace';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TrimTrailingWhitespaceAction.ID,\n\t\t\tlabel: nls.localize('lines.trimTrailingWhitespace', \"Trim Trailing Whitespace\"),\n\t\t\talias: 'Trim Trailing Whitespace',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyMod.CtrlCmd | KeyCode.KEY_X),\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor, args: any): void {\n\n\t\tlet cursors: Position[] = [];\n\t\tif (args.reason === 'auto-save') {\n\t\t\t// See https://github.com/editorconfig/editorconfig-vscode/issues/47\n\t\t\t// It is very convenient for the editor config extension to invoke this action.\n\t\t\t// So, if we get a reason:'auto-save' passed in, let's preserve cursor positions.\n\t\t\tcursors = (editor.getSelections() || []).map(s => new Position(s.positionLineNumber, s.positionColumn));\n\t\t}\n\n\t\tlet selection = editor.getSelection();\n\t\tif (selection === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet command = new TrimTrailingWhitespaceCommand(selection, cursors);\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, [command]);\n\t\teditor.pushUndoStop();\n\t}\n}\n\n// delete lines\n\ninterface IDeleteLinesOperation {\n\tstartLineNumber: number;\n\tselectionStartColumn: number;\n\tendLineNumber: number;\n\tpositionColumn: number;\n}\n\nexport class DeleteLinesAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.deleteLines',\n\t\t\tlabel: nls.localize('lines.delete', \"Delete Line\"),\n\t\t\talias: 'Delete Line',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_K,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet ops = this._getLinesToRemove(editor);\n\n\t\tlet model: ITextModel = editor.getModel();\n\t\tif (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\n\t\t\t// Model is empty\n\t\t\treturn;\n\t\t}\n\n\t\tlet linesDeleted = 0;\n\t\tlet edits: IIdentifiedSingleEditOperation[] = [];\n\t\tlet cursorState: Selection[] = [];\n\t\tfor (let i = 0, len = ops.length; i < len; i++) {\n\t\t\tconst op = ops[i];\n\n\t\t\tlet startLineNumber = op.startLineNumber;\n\t\t\tlet endLineNumber = op.endLineNumber;\n\n\t\t\tlet startColumn = 1;\n\t\t\tlet endColumn = model.getLineMaxColumn(endLineNumber);\n\t\t\tif (endLineNumber < model.getLineCount()) {\n\t\t\t\tendLineNumber += 1;\n\t\t\t\tendColumn = 1;\n\t\t\t} else if (startLineNumber > 1) {\n\t\t\t\tstartLineNumber -= 1;\n\t\t\t\tstartColumn = model.getLineMaxColumn(startLineNumber);\n\t\t\t}\n\n\t\t\tedits.push(EditOperation.replace(new Selection(startLineNumber, startColumn, endLineNumber, endColumn), ''));\n\t\t\tcursorState.push(new Selection(startLineNumber - linesDeleted, op.positionColumn, startLineNumber - linesDeleted, op.positionColumn));\n\t\t\tlinesDeleted += (op.endLineNumber - op.startLineNumber + 1);\n\t\t}\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeEdits(this.id, edits, cursorState);\n\t\teditor.pushUndoStop();\n\t}\n\n\tprivate _getLinesToRemove(editor: IActiveCodeEditor): IDeleteLinesOperation[] {\n\t\t// Construct delete operations\n\t\tlet operations: IDeleteLinesOperation[] = editor.getSelections().map((s) => {\n\n\t\t\tlet endLineNumber = s.endLineNumber;\n\t\t\tif (s.startLineNumber < s.endLineNumber && s.endColumn === 1) {\n\t\t\t\tendLineNumber -= 1;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tstartLineNumber: s.startLineNumber,\n\t\t\t\tselectionStartColumn: s.selectionStartColumn,\n\t\t\t\tendLineNumber: endLineNumber,\n\t\t\t\tpositionColumn: s.positionColumn\n\t\t\t};\n\t\t});\n\n\t\t// Sort delete operations\n\t\toperations.sort((a, b) => {\n\t\t\tif (a.startLineNumber === b.startLineNumber) {\n\t\t\t\treturn a.endLineNumber - b.endLineNumber;\n\t\t\t}\n\t\t\treturn a.startLineNumber - b.startLineNumber;\n\t\t});\n\n\t\t// Merge delete operations which are adjacent or overlapping\n\t\tlet mergedOperations: IDeleteLinesOperation[] = [];\n\t\tlet previousOperation = operations[0];\n\t\tfor (let i = 1; i < operations.length; i++) {\n\t\t\tif (previousOperation.endLineNumber + 1 >= operations[i].startLineNumber) {\n\t\t\t\t// Merge current operations into the previous one\n\t\t\t\tpreviousOperation.endLineNumber = operations[i].endLineNumber;\n\t\t\t} else {\n\t\t\t\t// Push previous operation\n\t\t\t\tmergedOperations.push(previousOperation);\n\t\t\t\tpreviousOperation = operations[i];\n\t\t\t}\n\t\t}\n\t\t// Push the last operation\n\t\tmergedOperations.push(previousOperation);\n\n\t\treturn mergedOperations;\n\t}\n}\n\nexport class IndentLinesAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.indentLines',\n\t\t\tlabel: nls.localize('lines.indent', \"Indent Line\"),\n\t\t\talias: 'Indent Line',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.US_CLOSE_SQUARE_BRACKET,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst viewModel = editor._getViewModel();\n\t\tif (!viewModel) {\n\t\t\treturn;\n\t\t}\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, TypeOperations.indent(viewModel.cursorConfig, editor.getModel(), editor.getSelections()));\n\t\teditor.pushUndoStop();\n\t}\n}\n\nclass OutdentLinesAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.outdentLines',\n\t\t\tlabel: nls.localize('lines.outdent', \"Outdent Line\"),\n\t\t\talias: 'Outdent Line',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.US_OPEN_SQUARE_BRACKET,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tCoreEditingCommands.Outdent.runEditorCommand(_accessor, editor, null);\n\t}\n}\n\nexport class InsertLineBeforeAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.insertLineBefore',\n\t\t\tlabel: nls.localize('lines.insertBefore', \"Insert Line Above\"),\n\t\t\talias: 'Insert Line Above',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.Enter,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst viewModel = editor._getViewModel();\n\t\tif (!viewModel) {\n\t\t\treturn;\n\t\t}\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, TypeOperations.lineInsertBefore(viewModel.cursorConfig, editor.getModel(), editor.getSelections()));\n\t}\n}\n\nexport class InsertLineAfterAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.insertLineAfter',\n\t\t\tlabel: nls.localize('lines.insertAfter', \"Insert Line Below\"),\n\t\t\talias: 'Insert Line Below',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.Enter,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst viewModel = editor._getViewModel();\n\t\tif (!viewModel) {\n\t\t\treturn;\n\t\t}\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, TypeOperations.lineInsertAfter(viewModel.cursorConfig, editor.getModel(), editor.getSelections()));\n\t}\n}\n\nexport abstract class AbstractDeleteAllToBoundaryAction extends EditorAction {\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\t\tconst primaryCursor = editor.getSelection();\n\n\t\tlet rangesToDelete = this._getRangesToDelete(editor);\n\t\t// merge overlapping selections\n\t\tlet effectiveRanges: Range[] = [];\n\n\t\tfor (let i = 0, count = rangesToDelete.length - 1; i < count; i++) {\n\t\t\tlet range = rangesToDelete[i];\n\t\t\tlet nextRange = rangesToDelete[i + 1];\n\n\t\t\tif (Range.intersectRanges(range, nextRange) === null) {\n\t\t\t\teffectiveRanges.push(range);\n\t\t\t} else {\n\t\t\t\trangesToDelete[i + 1] = Range.plusRange(range, nextRange);\n\t\t\t}\n\t\t}\n\n\t\teffectiveRanges.push(rangesToDelete[rangesToDelete.length - 1]);\n\n\t\tlet endCursorState = this._getEndCursorState(primaryCursor, effectiveRanges);\n\n\t\tlet edits: IIdentifiedSingleEditOperation[] = effectiveRanges.map(range => {\n\t\t\treturn EditOperation.replace(range, '');\n\t\t});\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeEdits(this.id, edits, endCursorState);\n\t\teditor.pushUndoStop();\n\t}\n\n\t/**\n\t * Compute the cursor state after the edit operations were applied.\n\t */\n\tprotected abstract _getEndCursorState(primaryCursor: Range, rangesToDelete: Range[]): Selection[];\n\n\tprotected abstract _getRangesToDelete(editor: IActiveCodeEditor): Range[];\n}\n\nexport class DeleteAllLeftAction extends AbstractDeleteAllToBoundaryAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'deleteAllLeft',\n\t\t\tlabel: nls.localize('lines.deleteAllLeft', \"Delete All Left\"),\n\t\t\talias: 'Delete All Left',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\tprimary: 0,\n\t\t\t\tmac: { primary: KeyMod.CtrlCmd | KeyCode.Backspace },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\t_getEndCursorState(primaryCursor: Range, rangesToDelete: Range[]): Selection[] {\n\t\tlet endPrimaryCursor: Selection | null = null;\n\t\tlet endCursorState: Selection[] = [];\n\t\tlet deletedLines = 0;\n\n\t\trangesToDelete.forEach(range => {\n\t\t\tlet endCursor;\n\t\t\tif (range.endColumn === 1 && deletedLines > 0) {\n\t\t\t\tlet newStartLine = range.startLineNumber - deletedLines;\n\t\t\t\tendCursor = new Selection(newStartLine, range.startColumn, newStartLine, range.startColumn);\n\t\t\t} else {\n\t\t\t\tendCursor = new Selection(range.startLineNumber, range.startColumn, range.startLineNumber, range.startColumn);\n\t\t\t}\n\n\t\t\tdeletedLines += range.endLineNumber - range.startLineNumber;\n\n\t\t\tif (range.intersectRanges(primaryCursor)) {\n\t\t\t\tendPrimaryCursor = endCursor;\n\t\t\t} else {\n\t\t\t\tendCursorState.push(endCursor);\n\t\t\t}\n\t\t});\n\n\t\tif (endPrimaryCursor) {\n\t\t\tendCursorState.unshift(endPrimaryCursor);\n\t\t}\n\n\t\treturn endCursorState;\n\t}\n\n\t_getRangesToDelete(editor: IActiveCodeEditor): Range[] {\n\t\tlet selections = editor.getSelections();\n\t\tif (selections === null) {\n\t\t\treturn [];\n\t\t}\n\n\t\tlet rangesToDelete: Range[] = selections;\n\t\tlet model = editor.getModel();\n\n\t\tif (model === null) {\n\t\t\treturn [];\n\t\t}\n\n\t\trangesToDelete.sort(Range.compareRangesUsingStarts);\n\t\trangesToDelete = rangesToDelete.map(selection => {\n\t\t\tif (selection.isEmpty()) {\n\t\t\t\tif (selection.startColumn === 1) {\n\t\t\t\t\tlet deleteFromLine = Math.max(1, selection.startLineNumber - 1);\n\t\t\t\t\tlet deleteFromColumn = selection.startLineNumber === 1 ? 1 : model.getLineContent(deleteFromLine).length + 1;\n\t\t\t\t\treturn new Range(deleteFromLine, deleteFromColumn, selection.startLineNumber, 1);\n\t\t\t\t} else {\n\t\t\t\t\treturn new Range(selection.startLineNumber, 1, selection.startLineNumber, selection.startColumn);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn new Range(selection.startLineNumber, 1, selection.endLineNumber, selection.endColumn);\n\t\t\t}\n\t\t});\n\n\t\treturn rangesToDelete;\n\t}\n}\n\nexport class DeleteAllRightAction extends AbstractDeleteAllToBoundaryAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'deleteAllRight',\n\t\t\tlabel: nls.localize('lines.deleteAllRight', \"Delete All Right\"),\n\t\t\talias: 'Delete All Right',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\tprimary: 0,\n\t\t\t\tmac: { primary: KeyMod.WinCtrl | KeyCode.KEY_K, secondary: [KeyMod.CtrlCmd | KeyCode.Delete] },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\t_getEndCursorState(primaryCursor: Range, rangesToDelete: Range[]): Selection[] {\n\t\tlet endPrimaryCursor: Selection | null = null;\n\t\tlet endCursorState: Selection[] = [];\n\t\tfor (let i = 0, len = rangesToDelete.length, offset = 0; i < len; i++) {\n\t\t\tlet range = rangesToDelete[i];\n\t\t\tlet endCursor = new Selection(range.startLineNumber - offset, range.startColumn, range.startLineNumber - offset, range.startColumn);\n\n\t\t\tif (range.intersectRanges(primaryCursor)) {\n\t\t\t\tendPrimaryCursor = endCursor;\n\t\t\t} else {\n\t\t\t\tendCursorState.push(endCursor);\n\t\t\t}\n\t\t}\n\n\t\tif (endPrimaryCursor) {\n\t\t\tendCursorState.unshift(endPrimaryCursor);\n\t\t}\n\n\t\treturn endCursorState;\n\t}\n\n\t_getRangesToDelete(editor: IActiveCodeEditor): Range[] {\n\t\tlet model = editor.getModel();\n\t\tif (model === null) {\n\t\t\treturn [];\n\t\t}\n\n\t\tlet selections = editor.getSelections();\n\n\t\tif (selections === null) {\n\t\t\treturn [];\n\t\t}\n\n\t\tlet rangesToDelete: Range[] = selections.map((sel) => {\n\t\t\tif (sel.isEmpty()) {\n\t\t\t\tconst maxColumn = model.getLineMaxColumn(sel.startLineNumber);\n\n\t\t\t\tif (sel.startColumn === maxColumn) {\n\t\t\t\t\treturn new Range(sel.startLineNumber, sel.startColumn, sel.startLineNumber + 1, 1);\n\t\t\t\t} else {\n\t\t\t\t\treturn new Range(sel.startLineNumber, sel.startColumn, sel.startLineNumber, maxColumn);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn sel;\n\t\t});\n\n\t\trangesToDelete.sort(Range.compareRangesUsingStarts);\n\t\treturn rangesToDelete;\n\t}\n}\n\nexport class JoinLinesAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.joinLines',\n\t\t\tlabel: nls.localize('lines.joinLines', \"Join Lines\"),\n\t\t\talias: 'Join Lines',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: 0,\n\t\t\t\tmac: { primary: KeyMod.WinCtrl | KeyCode.KEY_J },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tlet selections = editor.getSelections();\n\t\tif (selections === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet primaryCursor = editor.getSelection();\n\t\tif (primaryCursor === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tselections.sort(Range.compareRangesUsingStarts);\n\t\tlet reducedSelections: Selection[] = [];\n\n\t\tlet lastSelection = selections.reduce((previousValue, currentValue) => {\n\t\t\tif (previousValue.isEmpty()) {\n\t\t\t\tif (previousValue.endLineNumber === currentValue.startLineNumber) {\n\t\t\t\t\tif (primaryCursor!.equalsSelection(previousValue)) {\n\t\t\t\t\t\tprimaryCursor = currentValue;\n\t\t\t\t\t}\n\t\t\t\t\treturn currentValue;\n\t\t\t\t}\n\n\t\t\t\tif (currentValue.startLineNumber > previousValue.endLineNumber + 1) {\n\t\t\t\t\treducedSelections.push(previousValue);\n\t\t\t\t\treturn currentValue;\n\t\t\t\t} else {\n\t\t\t\t\treturn new Selection(previousValue.startLineNumber, previousValue.startColumn, currentValue.endLineNumber, currentValue.endColumn);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (currentValue.startLineNumber > previousValue.endLineNumber) {\n\t\t\t\t\treducedSelections.push(previousValue);\n\t\t\t\t\treturn currentValue;\n\t\t\t\t} else {\n\t\t\t\t\treturn new Selection(previousValue.startLineNumber, previousValue.startColumn, currentValue.endLineNumber, currentValue.endColumn);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treducedSelections.push(lastSelection);\n\n\t\tlet model = editor.getModel();\n\t\tif (model === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet edits: IIdentifiedSingleEditOperation[] = [];\n\t\tlet endCursorState: Selection[] = [];\n\t\tlet endPrimaryCursor = primaryCursor;\n\t\tlet lineOffset = 0;\n\n\t\tfor (let i = 0, len = reducedSelections.length; i < len; i++) {\n\t\t\tlet selection = reducedSelections[i];\n\t\t\tlet startLineNumber = selection.startLineNumber;\n\t\t\tlet startColumn = 1;\n\t\t\tlet columnDeltaOffset = 0;\n\t\t\tlet endLineNumber: number,\n\t\t\t\tendColumn: number;\n\n\t\t\tlet selectionEndPositionOffset = model.getLineContent(selection.endLineNumber).length - selection.endColumn;\n\n\t\t\tif (selection.isEmpty() || selection.startLineNumber === selection.endLineNumber) {\n\t\t\t\tlet position = selection.getStartPosition();\n\t\t\t\tif (position.lineNumber < model.getLineCount()) {\n\t\t\t\t\tendLineNumber = startLineNumber + 1;\n\t\t\t\t\tendColumn = model.getLineMaxColumn(endLineNumber);\n\t\t\t\t} else {\n\t\t\t\t\tendLineNumber = position.lineNumber;\n\t\t\t\t\tendColumn = model.getLineMaxColumn(position.lineNumber);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tendLineNumber = selection.endLineNumber;\n\t\t\t\tendColumn = model.getLineMaxColumn(endLineNumber);\n\t\t\t}\n\n\t\t\tlet trimmedLinesContent = model.getLineContent(startLineNumber);\n\n\t\t\tfor (let i = startLineNumber + 1; i <= endLineNumber; i++) {\n\t\t\t\tlet lineText = model.getLineContent(i);\n\t\t\t\tlet firstNonWhitespaceIdx = model.getLineFirstNonWhitespaceColumn(i);\n\n\t\t\t\tif (firstNonWhitespaceIdx >= 1) {\n\t\t\t\t\tlet insertSpace = true;\n\t\t\t\t\tif (trimmedLinesContent === '') {\n\t\t\t\t\t\tinsertSpace = false;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (insertSpace && (trimmedLinesContent.charAt(trimmedLinesContent.length - 1) === ' ' ||\n\t\t\t\t\t\ttrimmedLinesContent.charAt(trimmedLinesContent.length - 1) === '\\t')) {\n\t\t\t\t\t\tinsertSpace = false;\n\t\t\t\t\t\ttrimmedLinesContent = trimmedLinesContent.replace(/[\\s\\uFEFF\\xA0]+$/g, ' ');\n\t\t\t\t\t}\n\n\t\t\t\t\tlet lineTextWithoutIndent = lineText.substr(firstNonWhitespaceIdx - 1);\n\n\t\t\t\t\ttrimmedLinesContent += (insertSpace ? ' ' : '') + lineTextWithoutIndent;\n\n\t\t\t\t\tif (insertSpace) {\n\t\t\t\t\t\tcolumnDeltaOffset = lineTextWithoutIndent.length + 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcolumnDeltaOffset = lineTextWithoutIndent.length;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tcolumnDeltaOffset = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet deleteSelection = new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n\n\t\t\tif (!deleteSelection.isEmpty()) {\n\t\t\t\tlet resultSelection: Selection;\n\n\t\t\t\tif (selection.isEmpty()) {\n\t\t\t\t\tedits.push(EditOperation.replace(deleteSelection, trimmedLinesContent));\n\t\t\t\t\tresultSelection = new Selection(deleteSelection.startLineNumber - lineOffset, trimmedLinesContent.length - columnDeltaOffset + 1, startLineNumber - lineOffset, trimmedLinesContent.length - columnDeltaOffset + 1);\n\t\t\t\t} else {\n\t\t\t\t\tif (selection.startLineNumber === selection.endLineNumber) {\n\t\t\t\t\t\tedits.push(EditOperation.replace(deleteSelection, trimmedLinesContent));\n\t\t\t\t\t\tresultSelection = new Selection(selection.startLineNumber - lineOffset, selection.startColumn,\n\t\t\t\t\t\t\tselection.endLineNumber - lineOffset, selection.endColumn);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tedits.push(EditOperation.replace(deleteSelection, trimmedLinesContent));\n\t\t\t\t\t\tresultSelection = new Selection(selection.startLineNumber - lineOffset, selection.startColumn,\n\t\t\t\t\t\t\tselection.startLineNumber - lineOffset, trimmedLinesContent.length - selectionEndPositionOffset);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (Range.intersectRanges(deleteSelection, primaryCursor) !== null) {\n\t\t\t\t\tendPrimaryCursor = resultSelection;\n\t\t\t\t} else {\n\t\t\t\t\tendCursorState.push(resultSelection);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlineOffset += deleteSelection.endLineNumber - deleteSelection.startLineNumber;\n\t\t}\n\n\t\tendCursorState.unshift(endPrimaryCursor);\n\t\teditor.pushUndoStop();\n\t\teditor.executeEdits(this.id, edits, endCursorState);\n\t\teditor.pushUndoStop();\n\t}\n}\n\nexport class TransposeAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.transpose',\n\t\t\tlabel: nls.localize('editor.transpose', \"Transpose characters around the cursor\"),\n\t\t\talias: 'Transpose characters around the cursor',\n\t\t\tprecondition: EditorContextKeys.writable\n\t\t});\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tlet selections = editor.getSelections();\n\t\tif (selections === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet model = editor.getModel();\n\t\tif (model === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet commands: ICommand[] = [];\n\n\t\tfor (let i = 0, len = selections.length; i < len; i++) {\n\t\t\tlet selection = selections[i];\n\n\t\t\tif (!selection.isEmpty()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet cursor = selection.getStartPosition();\n\t\t\tlet maxColumn = model.getLineMaxColumn(cursor.lineNumber);\n\n\t\t\tif (cursor.column >= maxColumn) {\n\t\t\t\tif (cursor.lineNumber === model.getLineCount()) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// The cursor is at the end of current line and current line is not empty\n\t\t\t\t// then we transpose the character before the cursor and the line break if there is any following line.\n\t\t\t\tlet deleteSelection = new Range(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber + 1, 1);\n\t\t\t\tlet chars = model.getValueInRange(deleteSelection).split('').reverse().join('');\n\n\t\t\t\tcommands.push(new ReplaceCommand(new Selection(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber + 1, 1), chars));\n\t\t\t} else {\n\t\t\t\tlet deleteSelection = new Range(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber, cursor.column + 1);\n\t\t\t\tlet chars = model.getValueInRange(deleteSelection).split('').reverse().join('');\n\t\t\t\tcommands.push(new ReplaceCommandThatPreservesSelection(deleteSelection, chars,\n\t\t\t\t\tnew Selection(cursor.lineNumber, cursor.column + 1, cursor.lineNumber, cursor.column + 1)));\n\t\t\t}\n\t\t}\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, commands);\n\t\teditor.pushUndoStop();\n\t}\n}\n\nexport abstract class AbstractCaseAction extends EditorAction {\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst selections = editor.getSelections();\n\t\tif (selections === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = editor.getModel();\n\t\tif (model === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst wordSeparators = editor.getOption(EditorOption.wordSeparators);\n\t\tconst textEdits: IIdentifiedSingleEditOperation[] = [];\n\n\t\tfor (const selection of selections) {\n\t\t\tif (selection.isEmpty()) {\n\t\t\t\tconst cursor = selection.getStartPosition();\n\t\t\t\tconst word = editor.getConfiguredWordAtPosition(cursor);\n\n\t\t\t\tif (!word) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst wordRange = new Range(cursor.lineNumber, word.startColumn, cursor.lineNumber, word.endColumn);\n\t\t\t\tconst text = model.getValueInRange(wordRange);\n\t\t\t\ttextEdits.push(EditOperation.replace(wordRange, this._modifyText(text, wordSeparators)));\n\t\t\t} else {\n\t\t\t\tconst text = model.getValueInRange(selection);\n\t\t\t\ttextEdits.push(EditOperation.replace(selection, this._modifyText(text, wordSeparators)));\n\t\t\t}\n\t\t}\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeEdits(this.id, textEdits);\n\t\teditor.pushUndoStop();\n\t}\n\n\tprotected abstract _modifyText(text: string, wordSeparators: string): string;\n}\n\nexport class UpperCaseAction extends AbstractCaseAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.transformToUppercase',\n\t\t\tlabel: nls.localize('editor.transformToUppercase', \"Transform to Uppercase\"),\n\t\t\talias: 'Transform to Uppercase',\n\t\t\tprecondition: EditorContextKeys.writable\n\t\t});\n\t}\n\n\tprotected _modifyText(text: string, wordSeparators: string): string {\n\t\treturn text.toLocaleUpperCase();\n\t}\n}\n\nexport class LowerCaseAction extends AbstractCaseAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.transformToLowercase',\n\t\t\tlabel: nls.localize('editor.transformToLowercase', \"Transform to Lowercase\"),\n\t\t\talias: 'Transform to Lowercase',\n\t\t\tprecondition: EditorContextKeys.writable\n\t\t});\n\t}\n\n\tprotected _modifyText(text: string, wordSeparators: string): string {\n\t\treturn text.toLocaleLowerCase();\n\t}\n}\n\nexport class TitleCaseAction extends AbstractCaseAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.transformToTitlecase',\n\t\t\tlabel: nls.localize('editor.transformToTitlecase', \"Transform to Title Case\"),\n\t\t\talias: 'Transform to Title Case',\n\t\t\tprecondition: EditorContextKeys.writable\n\t\t});\n\t}\n\n\tprotected _modifyText(text: string, wordSeparators: string): string {\n\t\tconst separators = '\\r\\n\\t ' + wordSeparators;\n\t\tconst excludedChars = separators.split('');\n\n\t\tlet title = '';\n\t\tlet startUpperCase = true;\n\n\t\tfor (let i = 0; i < text.length; i++) {\n\t\t\tlet currentChar = text[i];\n\n\t\t\tif (excludedChars.indexOf(currentChar) >= 0) {\n\t\t\t\tstartUpperCase = true;\n\n\t\t\t\ttitle += currentChar;\n\t\t\t} else if (startUpperCase) {\n\t\t\t\tstartUpperCase = false;\n\n\t\t\t\ttitle += currentChar.toLocaleUpperCase();\n\t\t\t} else {\n\t\t\t\ttitle += currentChar.toLocaleLowerCase();\n\t\t\t}\n\t\t}\n\n\t\treturn title;\n\t}\n}\n\nexport class SnakeCaseAction extends AbstractCaseAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.transformToSnakecase',\n\t\t\tlabel: nls.localize('editor.transformToSnakecase', \"Transform to Snake Case\"),\n\t\t\talias: 'Transform to Snake Case',\n\t\t\tprecondition: EditorContextKeys.writable\n\t\t});\n\t}\n\n\tprotected _modifyText(text: string, wordSeparators: string): string {\n\t\treturn (text\n\t\t\t.replace(/(\\p{Ll})(\\p{Lu})/gmu, '$1_$2')\n\t\t\t.replace(/(\\p{Lu}|\\p{N})(\\p{Lu})(\\p{Ll})/gmu, '$1_$2$3')\n\t\t\t.toLocaleLowerCase()\n\t\t);\n\t}\n}\n\nregisterEditorAction(CopyLinesUpAction);\nregisterEditorAction(CopyLinesDownAction);\nregisterEditorAction(DuplicateSelectionAction);\nregisterEditorAction(MoveLinesUpAction);\nregisterEditorAction(MoveLinesDownAction);\nregisterEditorAction(SortLinesAscendingAction);\nregisterEditorAction(SortLinesDescendingAction);\nregisterEditorAction(TrimTrailingWhitespaceAction);\nregisterEditorAction(DeleteLinesAction);\nregisterEditorAction(IndentLinesAction);\nregisterEditorAction(OutdentLinesAction);\nregisterEditorAction(InsertLineBeforeAction);\nregisterEditorAction(InsertLineAfterAction);\nregisterEditorAction(DeleteAllLeftAction);\nregisterEditorAction(DeleteAllRightAction);\nregisterEditorAction(JoinLinesAction);\nregisterEditorAction(TransposeAction);\nregisterEditorAction(UpperCaseAction);\nregisterEditorAction(LowerCaseAction);\nregisterEditorAction(TitleCaseAction);\nregisterEditorAction(SnakeCaseAction);\n"]}