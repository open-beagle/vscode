{"version":3,"file":"blockCommentCommand.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/contrib/comment/blockCommentCommand.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from 'vs/base/common/charCode';\nimport { EditOperation } from 'vs/editor/common/core/editOperation';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { ICommand, IEditOperationBuilder, ICursorStateComputerData } from 'vs/editor/common/editorCommon';\nimport { ITextModel, IIdentifiedSingleEditOperation } from 'vs/editor/common/model';\nimport { LanguageConfigurationRegistry } from 'vs/editor/common/modes/languageConfigurationRegistry';\n\nexport class BlockCommentCommand implements ICommand {\n\n\tprivate readonly _selection: Selection;\n\tprivate readonly _insertSpace: boolean;\n\tprivate _usedEndToken: string | null;\n\n\tconstructor(selection: Selection, insertSpace: boolean) {\n\t\tthis._selection = selection;\n\t\tthis._insertSpace = insertSpace;\n\t\tthis._usedEndToken = null;\n\t}\n\n\tpublic static _haystackHasNeedleAtOffset(haystack: string, needle: string, offset: number): boolean {\n\t\tif (offset < 0) {\n\t\t\treturn false;\n\t\t}\n\t\tconst needleLength = needle.length;\n\t\tconst haystackLength = haystack.length;\n\t\tif (offset + needleLength > haystackLength) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (let i = 0; i < needleLength; i++) {\n\t\t\tconst codeA = haystack.charCodeAt(offset + i);\n\t\t\tconst codeB = needle.charCodeAt(i);\n\n\t\t\tif (codeA === codeB) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (codeA >= CharCode.A && codeA <= CharCode.Z && codeA + 32 === codeB) {\n\t\t\t\t// codeA is upper-case variant of codeB\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (codeB >= CharCode.A && codeB <= CharCode.Z && codeB + 32 === codeA) {\n\t\t\t\t// codeB is upper-case variant of codeA\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate _createOperationsForBlockComment(selection: Range, startToken: string, endToken: string, insertSpace: boolean, model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tconst startLineNumber = selection.startLineNumber;\n\t\tconst startColumn = selection.startColumn;\n\t\tconst endLineNumber = selection.endLineNumber;\n\t\tconst endColumn = selection.endColumn;\n\n\t\tconst startLineText = model.getLineContent(startLineNumber);\n\t\tconst endLineText = model.getLineContent(endLineNumber);\n\n\t\tlet startTokenIndex = startLineText.lastIndexOf(startToken, startColumn - 1 + startToken.length);\n\t\tlet endTokenIndex = endLineText.indexOf(endToken, endColumn - 1 - endToken.length);\n\n\t\tif (startTokenIndex !== -1 && endTokenIndex !== -1) {\n\n\t\t\tif (startLineNumber === endLineNumber) {\n\t\t\t\tconst lineBetweenTokens = startLineText.substring(startTokenIndex + startToken.length, endTokenIndex);\n\n\t\t\t\tif (lineBetweenTokens.indexOf(endToken) >= 0) {\n\t\t\t\t\t// force to add a block comment\n\t\t\t\t\tstartTokenIndex = -1;\n\t\t\t\t\tendTokenIndex = -1;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst startLineAfterStartToken = startLineText.substring(startTokenIndex + startToken.length);\n\t\t\t\tconst endLineBeforeEndToken = endLineText.substring(0, endTokenIndex);\n\n\t\t\t\tif (startLineAfterStartToken.indexOf(endToken) >= 0 || endLineBeforeEndToken.indexOf(endToken) >= 0) {\n\t\t\t\t\t// force to add a block comment\n\t\t\t\t\tstartTokenIndex = -1;\n\t\t\t\t\tendTokenIndex = -1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet ops: IIdentifiedSingleEditOperation[];\n\n\t\tif (startTokenIndex !== -1 && endTokenIndex !== -1) {\n\t\t\t// Consider spaces as part of the comment tokens\n\t\t\tif (insertSpace && startTokenIndex + startToken.length < startLineText.length && startLineText.charCodeAt(startTokenIndex + startToken.length) === CharCode.Space) {\n\t\t\t\t// Pretend the start token contains a trailing space\n\t\t\t\tstartToken = startToken + ' ';\n\t\t\t}\n\n\t\t\tif (insertSpace && endTokenIndex > 0 && endLineText.charCodeAt(endTokenIndex - 1) === CharCode.Space) {\n\t\t\t\t// Pretend the end token contains a leading space\n\t\t\t\tendToken = ' ' + endToken;\n\t\t\t\tendTokenIndex -= 1;\n\t\t\t}\n\t\t\tops = BlockCommentCommand._createRemoveBlockCommentOperations(\n\t\t\t\tnew Range(startLineNumber, startTokenIndex + startToken.length + 1, endLineNumber, endTokenIndex + 1), startToken, endToken\n\t\t\t);\n\t\t} else {\n\t\t\tops = BlockCommentCommand._createAddBlockCommentOperations(selection, startToken, endToken, this._insertSpace);\n\t\t\tthis._usedEndToken = ops.length === 1 ? endToken : null;\n\t\t}\n\n\t\tfor (const op of ops) {\n\t\t\tbuilder.addTrackedEditOperation(op.range, op.text);\n\t\t}\n\t}\n\n\tpublic static _createRemoveBlockCommentOperations(r: Range, startToken: string, endToken: string): IIdentifiedSingleEditOperation[] {\n\t\tlet res: IIdentifiedSingleEditOperation[] = [];\n\n\t\tif (!Range.isEmpty(r)) {\n\t\t\t// Remove block comment start\n\t\t\tres.push(EditOperation.delete(new Range(\n\t\t\t\tr.startLineNumber, r.startColumn - startToken.length,\n\t\t\t\tr.startLineNumber, r.startColumn\n\t\t\t)));\n\n\t\t\t// Remove block comment end\n\t\t\tres.push(EditOperation.delete(new Range(\n\t\t\t\tr.endLineNumber, r.endColumn,\n\t\t\t\tr.endLineNumber, r.endColumn + endToken.length\n\t\t\t)));\n\t\t} else {\n\t\t\t// Remove both continuously\n\t\t\tres.push(EditOperation.delete(new Range(\n\t\t\t\tr.startLineNumber, r.startColumn - startToken.length,\n\t\t\t\tr.endLineNumber, r.endColumn + endToken.length\n\t\t\t)));\n\t\t}\n\n\t\treturn res;\n\t}\n\n\tpublic static _createAddBlockCommentOperations(r: Range, startToken: string, endToken: string, insertSpace: boolean): IIdentifiedSingleEditOperation[] {\n\t\tlet res: IIdentifiedSingleEditOperation[] = [];\n\n\t\tif (!Range.isEmpty(r)) {\n\t\t\t// Insert block comment start\n\t\t\tres.push(EditOperation.insert(new Position(r.startLineNumber, r.startColumn), startToken + (insertSpace ? ' ' : '')));\n\n\t\t\t// Insert block comment end\n\t\t\tres.push(EditOperation.insert(new Position(r.endLineNumber, r.endColumn), (insertSpace ? ' ' : '') + endToken));\n\t\t} else {\n\t\t\t// Insert both continuously\n\t\t\tres.push(EditOperation.replace(new Range(\n\t\t\t\tr.startLineNumber, r.startColumn,\n\t\t\t\tr.endLineNumber, r.endColumn\n\t\t\t), startToken + '  ' + endToken));\n\t\t}\n\n\t\treturn res;\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tconst startLineNumber = this._selection.startLineNumber;\n\t\tconst startColumn = this._selection.startColumn;\n\n\t\tmodel.tokenizeIfCheap(startLineNumber);\n\t\tconst languageId = model.getLanguageIdAtPosition(startLineNumber, startColumn);\n\t\tconst config = LanguageConfigurationRegistry.getComments(languageId);\n\t\tif (!config || !config.blockCommentStartToken || !config.blockCommentEndToken) {\n\t\t\t// Mode does not support block comments\n\t\t\treturn;\n\t\t}\n\n\t\tthis._createOperationsForBlockComment(this._selection, config.blockCommentStartToken, config.blockCommentEndToken, this._insertSpace, model, builder);\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\tconst inverseEditOperations = helper.getInverseEditOperations();\n\t\tif (inverseEditOperations.length === 2) {\n\t\t\tconst startTokenEditOperation = inverseEditOperations[0];\n\t\t\tconst endTokenEditOperation = inverseEditOperations[1];\n\n\t\t\treturn new Selection(\n\t\t\t\tstartTokenEditOperation.range.endLineNumber,\n\t\t\t\tstartTokenEditOperation.range.endColumn,\n\t\t\t\tendTokenEditOperation.range.startLineNumber,\n\t\t\t\tendTokenEditOperation.range.startColumn\n\t\t\t);\n\t\t} else {\n\t\t\tconst srcRange = inverseEditOperations[0].range;\n\t\t\tconst deltaColumn = this._usedEndToken ? -this._usedEndToken.length - 1 : 0; // minus 1 space before endToken\n\t\t\treturn new Selection(\n\t\t\t\tsrcRange.endLineNumber,\n\t\t\t\tsrcRange.endColumn + deltaColumn,\n\t\t\t\tsrcRange.endLineNumber,\n\t\t\t\tsrcRange.endColumn + deltaColumn\n\t\t\t);\n\t\t}\n\t}\n}\n"]}