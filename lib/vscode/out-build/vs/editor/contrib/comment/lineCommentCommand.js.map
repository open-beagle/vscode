{"version":3,"file":"lineCommentCommand.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/contrib/comment/lineCommentCommand.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from 'vs/base/common/charCode';\nimport * as strings from 'vs/base/common/strings';\nimport { EditOperation } from 'vs/editor/common/core/editOperation';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { ICommand, IEditOperationBuilder, ICursorStateComputerData } from 'vs/editor/common/editorCommon';\nimport { IIdentifiedSingleEditOperation, ITextModel } from 'vs/editor/common/model';\nimport { LanguageConfigurationRegistry } from 'vs/editor/common/modes/languageConfigurationRegistry';\nimport { BlockCommentCommand } from 'vs/editor/contrib/comment/blockCommentCommand';\nimport { Constants } from 'vs/base/common/uint';\n\nexport interface IInsertionPoint {\n\tignore: boolean;\n\tcommentStrOffset: number;\n}\n\nexport interface ILinePreflightData {\n\tignore: boolean;\n\tcommentStr: string;\n\tcommentStrOffset: number;\n\tcommentStrLength: number;\n}\n\nexport interface IPreflightDataSupported {\n\tsupported: true;\n\tshouldRemoveComments: boolean;\n\tlines: ILinePreflightData[];\n}\nexport interface IPreflightDataUnsupported {\n\tsupported: false;\n}\nexport type IPreflightData = IPreflightDataSupported | IPreflightDataUnsupported;\n\nexport interface ISimpleModel {\n\tgetLineContent(lineNumber: number): string;\n}\n\nexport const enum Type {\n\tToggle = 0,\n\tForceAdd = 1,\n\tForceRemove = 2\n}\n\nexport class LineCommentCommand implements ICommand {\n\n\tprivate readonly _selection: Selection;\n\tprivate readonly _tabSize: number;\n\tprivate readonly _type: Type;\n\tprivate readonly _insertSpace: boolean;\n\tprivate readonly _ignoreEmptyLines: boolean;\n\tprivate _selectionId: string | null;\n\tprivate _deltaColumn: number;\n\tprivate _moveEndPositionDown: boolean;\n\tprivate _ignoreFirstLine: boolean;\n\n\tconstructor(\n\t\tselection: Selection,\n\t\ttabSize: number,\n\t\ttype: Type,\n\t\tinsertSpace: boolean,\n\t\tignoreEmptyLines: boolean,\n\t\tignoreFirstLine?: boolean\n\t) {\n\t\tthis._selection = selection;\n\t\tthis._tabSize = tabSize;\n\t\tthis._type = type;\n\t\tthis._insertSpace = insertSpace;\n\t\tthis._selectionId = null;\n\t\tthis._deltaColumn = 0;\n\t\tthis._moveEndPositionDown = false;\n\t\tthis._ignoreEmptyLines = ignoreEmptyLines;\n\t\tthis._ignoreFirstLine = ignoreFirstLine || false;\n\t}\n\n\t/**\n\t * Do an initial pass over the lines and gather info about the line comment string.\n\t * Returns null if any of the lines doesn't support a line comment string.\n\t */\n\tpublic static _gatherPreflightCommentStrings(model: ITextModel, startLineNumber: number, endLineNumber: number): ILinePreflightData[] | null {\n\n\t\tmodel.tokenizeIfCheap(startLineNumber);\n\t\tconst languageId = model.getLanguageIdAtPosition(startLineNumber, 1);\n\n\t\tconst config = LanguageConfigurationRegistry.getComments(languageId);\n\t\tconst commentStr = (config ? config.lineCommentToken : null);\n\t\tif (!commentStr) {\n\t\t\t// Mode does not support line comments\n\t\t\treturn null;\n\t\t}\n\n\t\tlet lines: ILinePreflightData[] = [];\n\t\tfor (let i = 0, lineCount = endLineNumber - startLineNumber + 1; i < lineCount; i++) {\n\t\t\tlines[i] = {\n\t\t\t\tignore: false,\n\t\t\t\tcommentStr: commentStr,\n\t\t\t\tcommentStrOffset: 0,\n\t\t\t\tcommentStrLength: commentStr.length\n\t\t\t};\n\t\t}\n\n\t\treturn lines;\n\t}\n\n\t/**\n\t * Analyze lines and decide which lines are relevant and what the toggle should do.\n\t * Also, build up several offsets and lengths useful in the generation of editor operations.\n\t */\n\tpublic static _analyzeLines(type: Type, insertSpace: boolean, model: ISimpleModel, lines: ILinePreflightData[], startLineNumber: number, ignoreEmptyLines: boolean, ignoreFirstLine: boolean): IPreflightData {\n\t\tlet onlyWhitespaceLines = true;\n\n\t\tlet shouldRemoveComments: boolean;\n\t\tif (type === Type.Toggle) {\n\t\t\tshouldRemoveComments = true;\n\t\t} else if (type === Type.ForceAdd) {\n\t\t\tshouldRemoveComments = false;\n\t\t} else {\n\t\t\tshouldRemoveComments = true;\n\t\t}\n\n\t\tfor (let i = 0, lineCount = lines.length; i < lineCount; i++) {\n\t\t\tconst lineData = lines[i];\n\t\t\tconst lineNumber = startLineNumber + i;\n\n\t\t\tif (lineNumber === startLineNumber && ignoreFirstLine) {\n\t\t\t\t// first line ignored\n\t\t\t\tlineData.ignore = true;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst lineContent = model.getLineContent(lineNumber);\n\t\t\tconst lineContentStartOffset = strings.firstNonWhitespaceIndex(lineContent);\n\n\t\t\tif (lineContentStartOffset === -1) {\n\t\t\t\t// Empty or whitespace only line\n\t\t\t\tlineData.ignore = ignoreEmptyLines;\n\t\t\t\tlineData.commentStrOffset = lineContent.length;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tonlyWhitespaceLines = false;\n\t\t\tlineData.ignore = false;\n\t\t\tlineData.commentStrOffset = lineContentStartOffset;\n\n\t\t\tif (shouldRemoveComments && !BlockCommentCommand._haystackHasNeedleAtOffset(lineContent, lineData.commentStr, lineContentStartOffset)) {\n\t\t\t\tif (type === Type.Toggle) {\n\t\t\t\t\t// Every line so far has been a line comment, but this one is not\n\t\t\t\t\tshouldRemoveComments = false;\n\t\t\t\t} else if (type === Type.ForceAdd) {\n\t\t\t\t\t// Will not happen\n\t\t\t\t} else {\n\t\t\t\t\tlineData.ignore = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (shouldRemoveComments && insertSpace) {\n\t\t\t\t// Remove a following space if present\n\t\t\t\tconst commentStrEndOffset = lineContentStartOffset + lineData.commentStrLength;\n\t\t\t\tif (commentStrEndOffset < lineContent.length && lineContent.charCodeAt(commentStrEndOffset) === CharCode.Space) {\n\t\t\t\t\tlineData.commentStrLength += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (type === Type.Toggle && onlyWhitespaceLines) {\n\t\t\t// For only whitespace lines, we insert comments\n\t\t\tshouldRemoveComments = false;\n\n\t\t\t// Also, no longer ignore them\n\t\t\tfor (let i = 0, lineCount = lines.length; i < lineCount; i++) {\n\t\t\t\tlines[i].ignore = false;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tsupported: true,\n\t\t\tshouldRemoveComments: shouldRemoveComments,\n\t\t\tlines: lines\n\t\t};\n\t}\n\n\t/**\n\t * Analyze all lines and decide exactly what to do => not supported | insert line comments | remove line comments\n\t */\n\tpublic static _gatherPreflightData(type: Type, insertSpace: boolean, model: ITextModel, startLineNumber: number, endLineNumber: number, ignoreEmptyLines: boolean, ignoreFirstLine: boolean): IPreflightData {\n\t\tconst lines = LineCommentCommand._gatherPreflightCommentStrings(model, startLineNumber, endLineNumber);\n\t\tif (lines === null) {\n\t\t\treturn {\n\t\t\t\tsupported: false\n\t\t\t};\n\t\t}\n\n\t\treturn LineCommentCommand._analyzeLines(type, insertSpace, model, lines, startLineNumber, ignoreEmptyLines, ignoreFirstLine);\n\t}\n\n\t/**\n\t * Given a successful analysis, execute either insert line comments, either remove line comments\n\t */\n\tprivate _executeLineComments(model: ISimpleModel, builder: IEditOperationBuilder, data: IPreflightDataSupported, s: Selection): void {\n\n\t\tlet ops: IIdentifiedSingleEditOperation[];\n\n\t\tif (data.shouldRemoveComments) {\n\t\t\tops = LineCommentCommand._createRemoveLineCommentsOperations(data.lines, s.startLineNumber);\n\t\t} else {\n\t\t\tLineCommentCommand._normalizeInsertionPoint(model, data.lines, s.startLineNumber, this._tabSize);\n\t\t\tops = this._createAddLineCommentsOperations(data.lines, s.startLineNumber);\n\t\t}\n\n\t\tconst cursorPosition = new Position(s.positionLineNumber, s.positionColumn);\n\n\t\tfor (let i = 0, len = ops.length; i < len; i++) {\n\t\t\tbuilder.addEditOperation(ops[i].range, ops[i].text);\n\t\t\tif (Range.isEmpty(ops[i].range) && Range.getStartPosition(ops[i].range).equals(cursorPosition)) {\n\t\t\t\tconst lineContent = model.getLineContent(cursorPosition.lineNumber);\n\t\t\t\tif (lineContent.length + 1 === cursorPosition.column) {\n\t\t\t\t\tthis._deltaColumn = (ops[i].text || '').length;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._selectionId = builder.trackSelection(s);\n\t}\n\n\tprivate _attemptRemoveBlockComment(model: ITextModel, s: Selection, startToken: string, endToken: string): IIdentifiedSingleEditOperation[] | null {\n\t\tlet startLineNumber = s.startLineNumber;\n\t\tlet endLineNumber = s.endLineNumber;\n\n\t\tlet startTokenAllowedBeforeColumn = endToken.length + Math.max(\n\t\t\tmodel.getLineFirstNonWhitespaceColumn(s.startLineNumber),\n\t\t\ts.startColumn\n\t\t);\n\n\t\tlet startTokenIndex = model.getLineContent(startLineNumber).lastIndexOf(startToken, startTokenAllowedBeforeColumn - 1);\n\t\tlet endTokenIndex = model.getLineContent(endLineNumber).indexOf(endToken, s.endColumn - 1 - startToken.length);\n\n\t\tif (startTokenIndex !== -1 && endTokenIndex === -1) {\n\t\t\tendTokenIndex = model.getLineContent(startLineNumber).indexOf(endToken, startTokenIndex + startToken.length);\n\t\t\tendLineNumber = startLineNumber;\n\t\t}\n\n\t\tif (startTokenIndex === -1 && endTokenIndex !== -1) {\n\t\t\tstartTokenIndex = model.getLineContent(endLineNumber).lastIndexOf(startToken, endTokenIndex);\n\t\t\tstartLineNumber = endLineNumber;\n\t\t}\n\n\t\tif (s.isEmpty() && (startTokenIndex === -1 || endTokenIndex === -1)) {\n\t\t\tstartTokenIndex = model.getLineContent(startLineNumber).indexOf(startToken);\n\t\t\tif (startTokenIndex !== -1) {\n\t\t\t\tendTokenIndex = model.getLineContent(startLineNumber).indexOf(endToken, startTokenIndex + startToken.length);\n\t\t\t}\n\t\t}\n\n\t\t// We have to adjust to possible inner white space.\n\t\t// For Space after startToken, add Space to startToken - range math will work out.\n\t\tif (startTokenIndex !== -1 && model.getLineContent(startLineNumber).charCodeAt(startTokenIndex + startToken.length) === CharCode.Space) {\n\t\t\tstartToken += ' ';\n\t\t}\n\n\t\t// For Space before endToken, add Space before endToken and shift index one left.\n\t\tif (endTokenIndex !== -1 && model.getLineContent(endLineNumber).charCodeAt(endTokenIndex - 1) === CharCode.Space) {\n\t\t\tendToken = ' ' + endToken;\n\t\t\tendTokenIndex -= 1;\n\t\t}\n\n\t\tif (startTokenIndex !== -1 && endTokenIndex !== -1) {\n\t\t\treturn BlockCommentCommand._createRemoveBlockCommentOperations(\n\t\t\t\tnew Range(startLineNumber, startTokenIndex + startToken.length + 1, endLineNumber, endTokenIndex + 1), startToken, endToken\n\t\t\t);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Given an unsuccessful analysis, delegate to the block comment command\n\t */\n\tprivate _executeBlockComment(model: ITextModel, builder: IEditOperationBuilder, s: Selection): void {\n\t\tmodel.tokenizeIfCheap(s.startLineNumber);\n\t\tlet languageId = model.getLanguageIdAtPosition(s.startLineNumber, 1);\n\t\tlet config = LanguageConfigurationRegistry.getComments(languageId);\n\t\tif (!config || !config.blockCommentStartToken || !config.blockCommentEndToken) {\n\t\t\t// Mode does not support block comments\n\t\t\treturn;\n\t\t}\n\n\t\tconst startToken = config.blockCommentStartToken;\n\t\tconst endToken = config.blockCommentEndToken;\n\n\t\tlet ops = this._attemptRemoveBlockComment(model, s, startToken, endToken);\n\t\tif (!ops) {\n\t\t\tif (s.isEmpty()) {\n\t\t\t\tconst lineContent = model.getLineContent(s.startLineNumber);\n\t\t\t\tlet firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineContent);\n\t\t\t\tif (firstNonWhitespaceIndex === -1) {\n\t\t\t\t\t// Line is empty or contains only whitespace\n\t\t\t\t\tfirstNonWhitespaceIndex = lineContent.length;\n\t\t\t\t}\n\t\t\t\tops = BlockCommentCommand._createAddBlockCommentOperations(\n\t\t\t\t\tnew Range(s.startLineNumber, firstNonWhitespaceIndex + 1, s.startLineNumber, lineContent.length + 1),\n\t\t\t\t\tstartToken,\n\t\t\t\t\tendToken,\n\t\t\t\t\tthis._insertSpace\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tops = BlockCommentCommand._createAddBlockCommentOperations(\n\t\t\t\t\tnew Range(s.startLineNumber, model.getLineFirstNonWhitespaceColumn(s.startLineNumber), s.endLineNumber, model.getLineMaxColumn(s.endLineNumber)),\n\t\t\t\t\tstartToken,\n\t\t\t\t\tendToken,\n\t\t\t\t\tthis._insertSpace\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (ops.length === 1) {\n\t\t\t\t// Leave cursor after token and Space\n\t\t\t\tthis._deltaColumn = startToken.length + 1;\n\t\t\t}\n\t\t}\n\t\tthis._selectionId = builder.trackSelection(s);\n\t\tfor (const op of ops) {\n\t\t\tbuilder.addEditOperation(op.range, op.text);\n\t\t}\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\n\t\tlet s = this._selection;\n\t\tthis._moveEndPositionDown = false;\n\n\t\tif (s.startLineNumber === s.endLineNumber && this._ignoreFirstLine) {\n\t\t\tbuilder.addEditOperation(new Range(s.startLineNumber, model.getLineMaxColumn(s.startLineNumber), s.startLineNumber + 1, 1), s.startLineNumber === model.getLineCount() ? '' : '\\n');\n\t\t\tthis._selectionId = builder.trackSelection(s);\n\t\t\treturn;\n\t\t}\n\n\t\tif (s.startLineNumber < s.endLineNumber && s.endColumn === 1) {\n\t\t\tthis._moveEndPositionDown = true;\n\t\t\ts = s.setEndPosition(s.endLineNumber - 1, model.getLineMaxColumn(s.endLineNumber - 1));\n\t\t}\n\n\t\tconst data = LineCommentCommand._gatherPreflightData(\n\t\t\tthis._type,\n\t\t\tthis._insertSpace,\n\t\t\tmodel,\n\t\t\ts.startLineNumber,\n\t\t\ts.endLineNumber,\n\t\t\tthis._ignoreEmptyLines,\n\t\t\tthis._ignoreFirstLine\n\t\t);\n\n\t\tif (data.supported) {\n\t\t\treturn this._executeLineComments(model, builder, data, s);\n\t\t}\n\n\t\treturn this._executeBlockComment(model, builder, s);\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\tlet result = helper.getTrackedSelection(this._selectionId!);\n\n\t\tif (this._moveEndPositionDown) {\n\t\t\tresult = result.setEndPosition(result.endLineNumber + 1, 1);\n\t\t}\n\n\t\treturn new Selection(\n\t\t\tresult.selectionStartLineNumber,\n\t\t\tresult.selectionStartColumn + this._deltaColumn,\n\t\t\tresult.positionLineNumber,\n\t\t\tresult.positionColumn + this._deltaColumn\n\t\t);\n\t}\n\n\t/**\n\t * Generate edit operations in the remove line comment case\n\t */\n\tpublic static _createRemoveLineCommentsOperations(lines: ILinePreflightData[], startLineNumber: number): IIdentifiedSingleEditOperation[] {\n\t\tlet res: IIdentifiedSingleEditOperation[] = [];\n\n\t\tfor (let i = 0, len = lines.length; i < len; i++) {\n\t\t\tconst lineData = lines[i];\n\n\t\t\tif (lineData.ignore) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tres.push(EditOperation.delete(new Range(\n\t\t\t\tstartLineNumber + i, lineData.commentStrOffset + 1,\n\t\t\t\tstartLineNumber + i, lineData.commentStrOffset + lineData.commentStrLength + 1\n\t\t\t)));\n\t\t}\n\n\t\treturn res;\n\t}\n\n\t/**\n\t * Generate edit operations in the add line comment case\n\t */\n\tprivate _createAddLineCommentsOperations(lines: ILinePreflightData[], startLineNumber: number): IIdentifiedSingleEditOperation[] {\n\t\tlet res: IIdentifiedSingleEditOperation[] = [];\n\t\tconst afterCommentStr = this._insertSpace ? ' ' : '';\n\n\n\t\tfor (let i = 0, len = lines.length; i < len; i++) {\n\t\t\tconst lineData = lines[i];\n\n\t\t\tif (lineData.ignore) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tres.push(EditOperation.insert(new Position(startLineNumber + i, lineData.commentStrOffset + 1), lineData.commentStr + afterCommentStr));\n\t\t}\n\n\t\treturn res;\n\t}\n\n\tprivate static nextVisibleColumn(currentVisibleColumn: number, tabSize: number, isTab: boolean, columnSize: number): number {\n\t\tif (isTab) {\n\t\t\treturn currentVisibleColumn + (tabSize - (currentVisibleColumn % tabSize));\n\t\t}\n\t\treturn currentVisibleColumn + columnSize;\n\t}\n\n\t/**\n\t * Adjust insertion points to have them vertically aligned in the add line comment case\n\t */\n\tpublic static _normalizeInsertionPoint(model: ISimpleModel, lines: IInsertionPoint[], startLineNumber: number, tabSize: number): void {\n\t\tlet minVisibleColumn = Constants.MAX_SAFE_SMALL_INTEGER;\n\t\tlet j: number;\n\t\tlet lenJ: number;\n\n\t\tfor (let i = 0, len = lines.length; i < len; i++) {\n\t\t\tif (lines[i].ignore) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst lineContent = model.getLineContent(startLineNumber + i);\n\n\t\t\tlet currentVisibleColumn = 0;\n\t\t\tfor (let j = 0, lenJ = lines[i].commentStrOffset; currentVisibleColumn < minVisibleColumn && j < lenJ; j++) {\n\t\t\t\tcurrentVisibleColumn = LineCommentCommand.nextVisibleColumn(currentVisibleColumn, tabSize, lineContent.charCodeAt(j) === CharCode.Tab, 1);\n\t\t\t}\n\n\t\t\tif (currentVisibleColumn < minVisibleColumn) {\n\t\t\t\tminVisibleColumn = currentVisibleColumn;\n\t\t\t}\n\t\t}\n\n\t\tminVisibleColumn = Math.floor(minVisibleColumn / tabSize) * tabSize;\n\n\t\tfor (let i = 0, len = lines.length; i < len; i++) {\n\t\t\tif (lines[i].ignore) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst lineContent = model.getLineContent(startLineNumber + i);\n\n\t\t\tlet currentVisibleColumn = 0;\n\t\t\tfor (j = 0, lenJ = lines[i].commentStrOffset; currentVisibleColumn < minVisibleColumn && j < lenJ; j++) {\n\t\t\t\tcurrentVisibleColumn = LineCommentCommand.nextVisibleColumn(currentVisibleColumn, tabSize, lineContent.charCodeAt(j) === CharCode.Tab, 1);\n\t\t\t}\n\n\t\t\tif (currentVisibleColumn > minVisibleColumn) {\n\t\t\t\tlines[i].commentStrOffset = j - 1;\n\t\t\t} else {\n\t\t\t\tlines[i].commentStrOffset = j;\n\t\t\t}\n\t\t}\n\t}\n}\n"]}