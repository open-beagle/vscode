{"version":3,"sources":["vs/editor/contrib/comment/comment.ts"],"names":[],"mappings":"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","file":"comment.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { KeyChord, KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { EditorAction, IActionOptions, ServicesAccessor, registerEditorAction } from 'vs/editor/browser/editorExtensions';\nimport { Range } from 'vs/editor/common/core/range';\nimport { ICommand } from 'vs/editor/common/editorCommon';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { BlockCommentCommand } from 'vs/editor/contrib/comment/blockCommentCommand';\nimport { LineCommentCommand, Type } from 'vs/editor/contrib/comment/lineCommentCommand';\nimport { MenuId } from 'vs/platform/actions/common/actions';\nimport { EditorOption } from 'vs/editor/common/config/editorOptions';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\n\nabstract class CommentLineAction extends EditorAction {\n\n\tprivate readonly _type: Type;\n\n\tconstructor(type: Type, opts: IActionOptions) {\n\t\tsuper(opts);\n\t\tthis._type = type;\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = editor.getModel();\n\t\tconst commands: ICommand[] = [];\n\t\tconst modelOptions = model.getOptions();\n\t\tconst commentsOptions = editor.getOption(EditorOption.comments);\n\n\t\tconst selections = editor.getSelections().map((selection, index) => ({ selection, index, ignoreFirstLine: false }));\n\t\tselections.sort((a, b) => Range.compareRangesUsingStarts(a.selection, b.selection));\n\n\t\t// Remove selections that would result in copying the same line\n\t\tlet prev = selections[0];\n\t\tfor (let i = 1; i < selections.length; i++) {\n\t\t\tconst curr = selections[i];\n\t\t\tif (prev.selection.endLineNumber === curr.selection.startLineNumber) {\n\t\t\t\t// these two selections would copy the same line\n\t\t\t\tif (prev.index < curr.index) {\n\t\t\t\t\t// prev wins\n\t\t\t\t\tcurr.ignoreFirstLine = true;\n\t\t\t\t} else {\n\t\t\t\t\t// curr wins\n\t\t\t\t\tprev.ignoreFirstLine = true;\n\t\t\t\t\tprev = curr;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t\tfor (const selection of selections) {\n\t\t\tcommands.push(new LineCommentCommand(\n\t\t\t\tselection.selection,\n\t\t\t\tmodelOptions.tabSize,\n\t\t\t\tthis._type,\n\t\t\t\tcommentsOptions.insertSpace,\n\t\t\t\tcommentsOptions.ignoreEmptyLines,\n\t\t\t\tselection.ignoreFirstLine\n\t\t\t));\n\t\t}\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, commands);\n\t\teditor.pushUndoStop();\n\t}\n\n}\n\nclass ToggleCommentLineAction extends CommentLineAction {\n\tconstructor() {\n\t\tsuper(Type.Toggle, {\n\t\t\tid: 'editor.action.commentLine',\n\t\t\tlabel: nls.localize('comment.line', \"Toggle Line Comment\"),\n\t\t\talias: 'Toggle Line Comment',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.US_SLASH,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t},\n\t\t\tmenuOpts: {\n\t\t\t\tmenuId: MenuId.MenubarEditMenu,\n\t\t\t\tgroup: '5_insert',\n\t\t\t\ttitle: nls.localize({ key: 'miToggleLineComment', comment: ['&& denotes a mnemonic'] }, \"&&Toggle Line Comment\"),\n\t\t\t\torder: 1\n\t\t\t}\n\t\t});\n\t}\n}\n\nclass AddLineCommentAction extends CommentLineAction {\n\tconstructor() {\n\t\tsuper(Type.ForceAdd, {\n\t\t\tid: 'editor.action.addCommentLine',\n\t\t\tlabel: nls.localize('comment.line.add', \"Add Line Comment\"),\n\t\t\talias: 'Add Line Comment',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyMod.CtrlCmd | KeyCode.KEY_C),\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n}\n\nclass RemoveLineCommentAction extends CommentLineAction {\n\tconstructor() {\n\t\tsuper(Type.ForceRemove, {\n\t\t\tid: 'editor.action.removeCommentLine',\n\t\t\tlabel: nls.localize('comment.line.remove', \"Remove Line Comment\"),\n\t\t\talias: 'Remove Line Comment',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyMod.CtrlCmd | KeyCode.KEY_U),\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n}\n\nclass BlockCommentAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.blockComment',\n\t\t\tlabel: nls.localize('comment.block', \"Toggle Block Comment\"),\n\t\t\talias: 'Toggle Block Comment',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.Shift | KeyMod.Alt | KeyCode.KEY_A,\n\t\t\t\tlinux: { primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_A },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t},\n\t\t\tmenuOpts: {\n\t\t\t\tmenuId: MenuId.MenubarEditMenu,\n\t\t\t\tgroup: '5_insert',\n\t\t\t\ttitle: nls.localize({ key: 'miToggleBlockComment', comment: ['&& denotes a mnemonic'] }, \"Toggle &&Block Comment\"),\n\t\t\t\torder: 2\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst commentsOptions = editor.getOption(EditorOption.comments);\n\t\tconst commands: ICommand[] = [];\n\t\tconst selections = editor.getSelections();\n\t\tfor (const selection of selections) {\n\t\t\tcommands.push(new BlockCommentCommand(selection, commentsOptions.insertSpace));\n\t\t}\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, commands);\n\t\teditor.pushUndoStop();\n\t}\n}\n\nregisterEditorAction(ToggleCommentLineAction);\nregisterEditorAction(AddLineCommentAction);\nregisterEditorAction(RemoveLineCommentAction);\nregisterEditorAction(BlockCommentAction);\n"]}