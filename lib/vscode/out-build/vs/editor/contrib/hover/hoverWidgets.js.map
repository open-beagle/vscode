{"version":3,"file":"hoverWidgets.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/contrib/hover/hoverWidgets.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Widget } from 'vs/base/browser/ui/widget';\nimport { ICodeEditor, IOverlayWidget, IOverlayWidgetPosition } from 'vs/editor/browser/editorBrowser';\nimport { ConfigurationChangedEvent, EditorOption } from 'vs/editor/common/config/editorOptions';\n\nexport class GlyphHoverWidget extends Widget implements IOverlayWidget {\n\n\tprivate readonly _id: string;\n\tprotected _editor: ICodeEditor;\n\tprivate _isVisible: boolean;\n\tprivate readonly _domNode: HTMLElement;\n\tprotected _showAtLineNumber: number;\n\n\tconstructor(id: string, editor: ICodeEditor) {\n\t\tsuper();\n\t\tthis._id = id;\n\t\tthis._editor = editor;\n\t\tthis._isVisible = false;\n\n\t\tthis._domNode = document.createElement('div');\n\t\tthis._domNode.className = 'monaco-hover hidden';\n\t\tthis._domNode.setAttribute('aria-hidden', 'true');\n\t\tthis._domNode.setAttribute('role', 'tooltip');\n\n\t\tthis._showAtLineNumber = -1;\n\n\t\tthis._register(this._editor.onDidChangeConfiguration((e: ConfigurationChangedEvent) => {\n\t\t\tif (e.hasChanged(EditorOption.fontInfo)) {\n\t\t\t\tthis.updateFont();\n\t\t\t}\n\t\t}));\n\n\t\tthis._editor.addOverlayWidget(this);\n\t}\n\n\tprotected get isVisible(): boolean {\n\t\treturn this._isVisible;\n\t}\n\n\tprotected set isVisible(value: boolean) {\n\t\tthis._isVisible = value;\n\t\tthis._domNode.classList.toggle('hidden', !this._isVisible);\n\t}\n\n\tpublic getId(): string {\n\t\treturn this._id;\n\t}\n\n\tpublic getDomNode(): HTMLElement {\n\t\treturn this._domNode;\n\t}\n\n\tpublic showAt(lineNumber: number): void {\n\t\tthis._showAtLineNumber = lineNumber;\n\n\t\tif (!this.isVisible) {\n\t\t\tthis.isVisible = true;\n\t\t}\n\n\t\tconst editorLayout = this._editor.getLayoutInfo();\n\t\tconst topForLineNumber = this._editor.getTopForLineNumber(this._showAtLineNumber);\n\t\tconst editorScrollTop = this._editor.getScrollTop();\n\t\tconst lineHeight = this._editor.getOption(EditorOption.lineHeight);\n\t\tconst nodeHeight = this._domNode.clientHeight;\n\t\tconst top = topForLineNumber - editorScrollTop - ((nodeHeight - lineHeight) / 2);\n\n\t\tthis._domNode.style.left = `${editorLayout.glyphMarginLeft + editorLayout.glyphMarginWidth}px`;\n\t\tthis._domNode.style.top = `${Math.max(Math.round(top), 0)}px`;\n\t}\n\n\tpublic hide(): void {\n\t\tif (!this.isVisible) {\n\t\t\treturn;\n\t\t}\n\t\tthis.isVisible = false;\n\t}\n\n\tpublic getPosition(): IOverlayWidgetPosition | null {\n\t\treturn null;\n\t}\n\n\tpublic override dispose(): void {\n\t\tthis._editor.removeOverlayWidget(this);\n\t\tsuper.dispose();\n\t}\n\n\tprivate updateFont(): void {\n\t\tconst codeTags: HTMLElement[] = Array.prototype.slice.call(this._domNode.getElementsByTagName('code'));\n\t\tconst codeClasses: HTMLElement[] = Array.prototype.slice.call(this._domNode.getElementsByClassName('code'));\n\n\t\t[...codeTags, ...codeClasses].forEach(node => this._editor.applyFontInfo(node));\n\t}\n\n\tprotected updateContents(node: Node): void {\n\t\tthis._domNode.textContent = '';\n\t\tthis._domNode.appendChild(node);\n\t\tthis.updateFont();\n\t}\n}\n"]}