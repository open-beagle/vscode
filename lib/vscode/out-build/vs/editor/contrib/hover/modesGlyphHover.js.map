{"version":3,"file":"modesGlyphHover.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/contrib/hover/modesGlyphHover.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { $ } from 'vs/base/browser/dom';\nimport { IMarkdownString, isEmptyMarkdownString } from 'vs/base/common/htmlContent';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { HoverOperation, HoverStartMode, IHoverComputer } from 'vs/editor/contrib/hover/hoverOperation';\nimport { GlyphHoverWidget } from 'vs/editor/contrib/hover/hoverWidgets';\nimport { MarkdownRenderer } from 'vs/editor/browser/core/markdownRenderer';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { IOpenerService, NullOpenerService } from 'vs/platform/opener/common/opener';\nimport { asArray } from 'vs/base/common/arrays';\n\nexport interface IHoverMessage {\n\tvalue: IMarkdownString;\n}\n\nclass MarginComputer implements IHoverComputer<IHoverMessage[]> {\n\n\tprivate readonly _editor: ICodeEditor;\n\tprivate _lineNumber: number;\n\tprivate _result: IHoverMessage[];\n\n\tconstructor(editor: ICodeEditor) {\n\t\tthis._editor = editor;\n\t\tthis._lineNumber = -1;\n\t\tthis._result = [];\n\t}\n\n\tpublic setLineNumber(lineNumber: number): void {\n\t\tthis._lineNumber = lineNumber;\n\t\tthis._result = [];\n\t}\n\n\tpublic clearResult(): void {\n\t\tthis._result = [];\n\t}\n\n\tpublic computeSync(): IHoverMessage[] {\n\n\t\tconst toHoverMessage = (contents: IMarkdownString): IHoverMessage => {\n\t\t\treturn {\n\t\t\t\tvalue: contents\n\t\t\t};\n\t\t};\n\n\t\tconst lineDecorations = this._editor.getLineDecorations(this._lineNumber);\n\n\t\tconst result: IHoverMessage[] = [];\n\t\tif (!lineDecorations) {\n\t\t\treturn result;\n\t\t}\n\n\t\tfor (const d of lineDecorations) {\n\t\t\tif (!d.options.glyphMarginClassName) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst hoverMessage = d.options.glyphMarginHoverMessage;\n\t\t\tif (!hoverMessage || isEmptyMarkdownString(hoverMessage)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tresult.push(...asArray(hoverMessage).map(toHoverMessage));\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic onResult(result: IHoverMessage[], isFromSynchronousComputation: boolean): void {\n\t\tthis._result = this._result.concat(result);\n\t}\n\n\tpublic getResult(): IHoverMessage[] {\n\t\treturn this._result;\n\t}\n\n\tpublic getResultWithLoadingMessage(): IHoverMessage[] {\n\t\treturn this.getResult();\n\t}\n}\n\nexport class ModesGlyphHoverWidget extends GlyphHoverWidget {\n\n\tpublic static readonly ID = 'editor.contrib.modesGlyphHoverWidget';\n\tprivate _messages: IHoverMessage[];\n\tprivate _lastLineNumber: number;\n\n\tprivate readonly _markdownRenderer: MarkdownRenderer;\n\tprivate readonly _computer: MarginComputer;\n\tprivate readonly _hoverOperation: HoverOperation<IHoverMessage[]>;\n\tprivate readonly _renderDisposeables = this._register(new DisposableStore());\n\n\tconstructor(\n\t\teditor: ICodeEditor,\n\t\tmodeService: IModeService,\n\t\topenerService: IOpenerService = NullOpenerService,\n\t) {\n\t\tsuper(ModesGlyphHoverWidget.ID, editor);\n\n\t\tthis._messages = [];\n\t\tthis._lastLineNumber = -1;\n\n\t\tthis._markdownRenderer = this._register(new MarkdownRenderer({ editor: this._editor }, modeService, openerService));\n\t\tthis._computer = new MarginComputer(this._editor);\n\n\t\tthis._hoverOperation = new HoverOperation(\n\t\t\tthis._computer,\n\t\t\t(result: IHoverMessage[]) => this._withResult(result),\n\t\t\tundefined,\n\t\t\t(result: any) => this._withResult(result),\n\t\t\t300\n\t\t);\n\n\t}\n\n\tpublic override dispose(): void {\n\t\tthis._hoverOperation.cancel();\n\t\tsuper.dispose();\n\t}\n\n\tpublic onModelDecorationsChanged(): void {\n\t\tif (this.isVisible) {\n\t\t\t// The decorations have changed and the hover is visible,\n\t\t\t// we need to recompute the displayed text\n\t\t\tthis._hoverOperation.cancel();\n\t\t\tthis._computer.clearResult();\n\t\t\tthis._hoverOperation.start(HoverStartMode.Delayed);\n\t\t}\n\t}\n\n\tpublic startShowingAt(lineNumber: number): void {\n\t\tif (this._lastLineNumber === lineNumber) {\n\t\t\t// We have to show the widget at the exact same line number as before, so no work is needed\n\t\t\treturn;\n\t\t}\n\n\t\tthis._hoverOperation.cancel();\n\n\t\tthis.hide();\n\n\t\tthis._lastLineNumber = lineNumber;\n\t\tthis._computer.setLineNumber(lineNumber);\n\t\tthis._hoverOperation.start(HoverStartMode.Delayed);\n\t}\n\n\tpublic override hide(): void {\n\t\tthis._lastLineNumber = -1;\n\t\tthis._hoverOperation.cancel();\n\t\tsuper.hide();\n\t}\n\n\tpublic _withResult(result: IHoverMessage[]): void {\n\t\tthis._messages = result;\n\n\t\tif (this._messages.length > 0) {\n\t\t\tthis._renderMessages(this._lastLineNumber, this._messages);\n\t\t} else {\n\t\t\tthis.hide();\n\t\t}\n\t}\n\n\tprivate _renderMessages(lineNumber: number, messages: IHoverMessage[]): void {\n\t\tthis._renderDisposeables.clear();\n\n\t\tconst fragment = document.createDocumentFragment();\n\n\t\tfor (const msg of messages) {\n\t\t\tconst renderedContents = this._markdownRenderer.render(msg.value);\n\t\t\tthis._renderDisposeables.add(renderedContents);\n\t\t\tfragment.appendChild($('div.hover-row', undefined, renderedContents.element));\n\t\t}\n\n\t\tthis.updateContents(fragment);\n\t\tthis.showAt(lineNumber);\n\t}\n}\n"]}