{"version":3,"file":"codeAction.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/contrib/codeAction/codeAction.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { equals, flatten, isNonEmptyArray, coalesce } from 'vs/base/common/arrays';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { illegalArgument, isPromiseCanceledError, onUnexpectedExternalError } from 'vs/base/common/errors';\nimport { Disposable, DisposableStore, IDisposable } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { TextModelCancellationTokenSource } from 'vs/editor/browser/core/editorState';\nimport { Range } from 'vs/editor/common/core/range';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { ITextModel } from 'vs/editor/common/model';\nimport * as modes from 'vs/editor/common/modes';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { CodeActionFilter, CodeActionKind, CodeActionTrigger, filtersAction, mayIncludeActionsOfKind } from './types';\nimport { IProgress, Progress } from 'vs/platform/progress/common/progress';\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\n\nexport const codeActionCommandId = 'editor.action.codeAction';\nexport const refactorCommandId = 'editor.action.refactor';\nexport const sourceActionCommandId = 'editor.action.sourceAction';\nexport const organizeImportsCommandId = 'editor.action.organizeImports';\nexport const fixAllCommandId = 'editor.action.fixAll';\n\nexport class CodeActionItem {\n\n\tconstructor(\n\t\treadonly action: modes.CodeAction,\n\t\treadonly provider: modes.CodeActionProvider | undefined,\n\t) { }\n\n\tasync resolve(token: CancellationToken): Promise<this> {\n\t\tif (this.provider?.resolveCodeAction && !this.action.edit) {\n\t\t\tlet action: modes.CodeAction | undefined | null;\n\t\t\ttry {\n\t\t\t\taction = await this.provider.resolveCodeAction(this.action, token);\n\t\t\t} catch (err) {\n\t\t\t\tonUnexpectedExternalError(err);\n\t\t\t}\n\t\t\tif (action) {\n\t\t\t\tthis.action.edit = action.edit;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n}\n\nexport interface CodeActionSet extends IDisposable {\n\treadonly validActions: readonly CodeActionItem[];\n\treadonly allActions: readonly CodeActionItem[];\n\treadonly hasAutoFix: boolean;\n\n\treadonly documentation: readonly modes.Command[];\n}\n\nclass ManagedCodeActionSet extends Disposable implements CodeActionSet {\n\n\tprivate static codeActionsComparator({ action: a }: CodeActionItem, { action: b }: CodeActionItem): number {\n\t\tif (a.isPreferred && !b.isPreferred) {\n\t\t\treturn -1;\n\t\t} else if (!a.isPreferred && b.isPreferred) {\n\t\t\treturn 1;\n\t\t}\n\n\t\tif (isNonEmptyArray(a.diagnostics)) {\n\t\t\tif (isNonEmptyArray(b.diagnostics)) {\n\t\t\t\treturn a.diagnostics[0].message.localeCompare(b.diagnostics[0].message);\n\t\t\t} else {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t} else if (isNonEmptyArray(b.diagnostics)) {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\treturn 0;\t// both have no diagnostics\n\t\t}\n\t}\n\n\tpublic readonly validActions: readonly CodeActionItem[];\n\tpublic readonly allActions: readonly CodeActionItem[];\n\n\tpublic constructor(\n\t\tactions: readonly CodeActionItem[],\n\t\tpublic readonly documentation: readonly modes.Command[],\n\t\tdisposables: DisposableStore,\n\t) {\n\t\tsuper();\n\t\tthis._register(disposables);\n\t\tthis.allActions = [...actions].sort(ManagedCodeActionSet.codeActionsComparator);\n\t\tthis.validActions = this.allActions.filter(({ action }) => !action.disabled);\n\t}\n\n\tpublic get hasAutoFix() {\n\t\treturn this.validActions.some(({ action: fix }) => !!fix.kind && CodeActionKind.QuickFix.contains(new CodeActionKind(fix.kind)) && !!fix.isPreferred);\n\t}\n}\n\n\nconst emptyCodeActionsResponse = { actions: [] as CodeActionItem[], documentation: undefined };\n\nexport function getCodeActions(\n\tmodel: ITextModel,\n\trangeOrSelection: Range | Selection,\n\ttrigger: CodeActionTrigger,\n\tprogress: IProgress<modes.CodeActionProvider>,\n\ttoken: CancellationToken,\n): Promise<CodeActionSet> {\n\tconst filter = trigger.filter || {};\n\n\tconst codeActionContext: modes.CodeActionContext = {\n\t\tonly: filter.include?.value,\n\t\ttrigger: trigger.type,\n\t};\n\n\tconst cts = new TextModelCancellationTokenSource(model, token);\n\tconst providers = getCodeActionProviders(model, filter);\n\n\tconst disposables = new DisposableStore();\n\tconst promises = providers.map(async provider => {\n\t\ttry {\n\t\t\tprogress.report(provider);\n\t\t\tconst providedCodeActions = await provider.provideCodeActions(model, rangeOrSelection, codeActionContext, cts.token);\n\t\t\tif (providedCodeActions) {\n\t\t\t\tdisposables.add(providedCodeActions);\n\t\t\t}\n\n\t\t\tif (cts.token.isCancellationRequested) {\n\t\t\t\treturn emptyCodeActionsResponse;\n\t\t\t}\n\n\t\t\tconst filteredActions = (providedCodeActions?.actions || []).filter(action => action && filtersAction(filter, action));\n\t\t\tconst documentation = getDocumentation(provider, filteredActions, filter.include);\n\t\t\treturn {\n\t\t\t\tactions: filteredActions.map(action => new CodeActionItem(action, provider)),\n\t\t\t\tdocumentation\n\t\t\t};\n\t\t} catch (err) {\n\t\t\tif (isPromiseCanceledError(err)) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tonUnexpectedExternalError(err);\n\t\t\treturn emptyCodeActionsResponse;\n\t\t}\n\t});\n\n\tconst listener = modes.CodeActionProviderRegistry.onDidChange(() => {\n\t\tconst newProviders = modes.CodeActionProviderRegistry.all(model);\n\t\tif (!equals(newProviders, providers)) {\n\t\t\tcts.cancel();\n\t\t}\n\t});\n\n\treturn Promise.all(promises).then(actions => {\n\t\tconst allActions = flatten(actions.map(x => x.actions));\n\t\tconst allDocumentation = coalesce(actions.map(x => x.documentation));\n\t\treturn new ManagedCodeActionSet(allActions, allDocumentation, disposables);\n\t})\n\t\t.finally(() => {\n\t\t\tlistener.dispose();\n\t\t\tcts.dispose();\n\t\t});\n}\n\nfunction getCodeActionProviders(\n\tmodel: ITextModel,\n\tfilter: CodeActionFilter\n) {\n\treturn modes.CodeActionProviderRegistry.all(model)\n\t\t// Don't include providers that we know will not return code actions of interest\n\t\t.filter(provider => {\n\t\t\tif (!provider.providedCodeActionKinds) {\n\t\t\t\t// We don't know what type of actions this provider will return.\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn provider.providedCodeActionKinds.some(kind => mayIncludeActionsOfKind(filter, new CodeActionKind(kind)));\n\t\t});\n}\n\nfunction getDocumentation(\n\tprovider: modes.CodeActionProvider,\n\tprovidedCodeActions: readonly modes.CodeAction[],\n\tonly?: CodeActionKind\n): modes.Command | undefined {\n\tif (!provider.documentation) {\n\t\treturn undefined;\n\t}\n\n\tconst documentation = provider.documentation.map(entry => ({ kind: new CodeActionKind(entry.kind), command: entry.command }));\n\n\tif (only) {\n\t\tlet currentBest: { readonly kind: CodeActionKind, readonly command: modes.Command } | undefined;\n\t\tfor (const entry of documentation) {\n\t\t\tif (entry.kind.contains(only)) {\n\t\t\t\tif (!currentBest) {\n\t\t\t\t\tcurrentBest = entry;\n\t\t\t\t} else {\n\t\t\t\t\t// Take best match\n\t\t\t\t\tif (currentBest.kind.contains(entry.kind)) {\n\t\t\t\t\t\tcurrentBest = entry;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (currentBest) {\n\t\t\treturn currentBest?.command;\n\t\t}\n\t}\n\n\t// Otherwise, check to see if any of the provided actions match.\n\tfor (const action of providedCodeActions) {\n\t\tif (!action.kind) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tfor (const entry of documentation) {\n\t\t\tif (entry.kind.contains(new CodeActionKind(action.kind))) {\n\t\t\t\treturn entry.command;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn undefined;\n}\n\nCommandsRegistry.registerCommand('_executeCodeActionProvider', async function (accessor, resource: URI, rangeOrSelection: Range | Selection, kind?: string, itemResolveCount?: number): Promise<ReadonlyArray<modes.CodeAction>> {\n\tif (!(resource instanceof URI)) {\n\t\tthrow illegalArgument();\n\t}\n\n\tconst model = accessor.get(IModelService).getModel(resource);\n\tif (!model) {\n\t\tthrow illegalArgument();\n\t}\n\n\tconst validatedRangeOrSelection = Selection.isISelection(rangeOrSelection)\n\t\t? Selection.liftSelection(rangeOrSelection)\n\t\t: Range.isIRange(rangeOrSelection)\n\t\t\t? model.validateRange(rangeOrSelection)\n\t\t\t: undefined;\n\n\tif (!validatedRangeOrSelection) {\n\t\tthrow illegalArgument();\n\t}\n\n\tconst include = typeof kind === 'string' ? new CodeActionKind(kind) : undefined;\n\tconst codeActionSet = await getCodeActions(\n\t\tmodel,\n\t\tvalidatedRangeOrSelection,\n\t\t{ type: modes.CodeActionTriggerType.Invoke, filter: { includeSourceActions: true, include } },\n\t\tProgress.None,\n\t\tCancellationToken.None);\n\n\tconst resolving: Promise<any>[] = [];\n\tconst resolveCount = Math.min(codeActionSet.validActions.length, typeof itemResolveCount === 'number' ? itemResolveCount : 0);\n\tfor (let i = 0; i < resolveCount; i++) {\n\t\tresolving.push(codeActionSet.validActions[i].resolve(CancellationToken.None));\n\t}\n\n\ttry {\n\t\tawait Promise.all(resolving);\n\t\treturn codeActionSet.validActions.map(item => item.action);\n\t} finally {\n\t\tsetTimeout(() => codeActionSet.dispose(), 100);\n\t}\n});\n"]}