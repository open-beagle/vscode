{"version":3,"file":"inlineHintsController.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/contrib/inlineHints/inlineHintsController.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { RunOnceScheduler } from 'vs/base/common/async';\nimport { onUnexpectedExternalError } from 'vs/base/common/errors';\nimport { hash } from 'vs/base/common/hash';\nimport { DisposableStore, toDisposable } from 'vs/base/common/lifecycle';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { registerEditorContribution } from 'vs/editor/browser/editorExtensions';\nimport { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';\nimport { IContentDecorationRenderOptions, IEditorContribution } from 'vs/editor/common/editorCommon';\nimport { IModelDeltaDecoration, ITextModel } from 'vs/editor/common/model';\nimport { InlineHintsProvider, InlineHintsProviderRegistry, InlineHint } from 'vs/editor/common/modes';\nimport { EditorOption } from 'vs/editor/common/config/editorOptions';\nimport { flatten } from 'vs/base/common/arrays';\nimport { editorInlineHintForeground, editorInlineHintBackground } from 'vs/platform/theme/common/colorRegistry';\nimport { CancellationToken, CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { Range } from 'vs/editor/common/core/range';\nimport { LanguageFeatureRequestDelays } from 'vs/editor/common/modes/languageFeatureRegistry';\nimport { MarkdownString } from 'vs/base/common/htmlContent';\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { URI } from 'vs/base/common/uri';\nimport { IRange } from 'vs/base/common/range';\nimport { assertType } from 'vs/base/common/types';\nimport { ITextModelService } from 'vs/editor/common/services/resolverService';\n\nconst MAX_DECORATORS = 500;\n\nexport interface InlineHintsData {\n\tlist: InlineHint[];\n\tprovider: InlineHintsProvider;\n}\n\nexport async function getInlineHints(model: ITextModel, ranges: Range[], token: CancellationToken): Promise<InlineHintsData[]> {\n\tconst datas: InlineHintsData[] = [];\n\tconst providers = InlineHintsProviderRegistry.ordered(model).reverse();\n\tconst promises = flatten(providers.map(provider => ranges.map(range => Promise.resolve(provider.provideInlineHints(model, range, token)).then(result => {\n\t\tif (result) {\n\t\t\tdatas.push({ list: result, provider });\n\t\t}\n\t}, err => {\n\t\tonUnexpectedExternalError(err);\n\t}))));\n\n\tawait Promise.all(promises);\n\n\treturn datas;\n}\n\nexport class InlineHintsController implements IEditorContribution {\n\n\tstatic readonly ID: string = 'editor.contrib.InlineHints';\n\n\t// static get(editor: ICodeEditor): InlineHintsController {\n\t// \treturn editor.getContribution<InlineHintsController>(this.ID);\n\t// }\n\n\tprivate readonly _disposables = new DisposableStore();\n\tprivate readonly _sessionDisposables = new DisposableStore();\n\tprivate readonly _getInlineHintsDelays = new LanguageFeatureRequestDelays(InlineHintsProviderRegistry, 250, 2500);\n\n\tprivate _decorationsTypeIds: string[] = [];\n\tprivate _decorationIds: string[] = [];\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\t@ICodeEditorService private readonly _codeEditorService: ICodeEditorService,\n\t\t@IThemeService private readonly _themeService: IThemeService,\n\t) {\n\t\tthis._disposables.add(InlineHintsProviderRegistry.onDidChange(() => this._update()));\n\t\tthis._disposables.add(_themeService.onDidColorThemeChange(() => this._update()));\n\t\tthis._disposables.add(_editor.onDidChangeModel(() => this._update()));\n\t\tthis._disposables.add(_editor.onDidChangeModelLanguage(() => this._update()));\n\t\tthis._disposables.add(_editor.onDidChangeConfiguration(e => {\n\t\t\tif (e.hasChanged(EditorOption.inlineHints)) {\n\t\t\t\tthis._update();\n\t\t\t}\n\t\t}));\n\n\t\tthis._update();\n\t}\n\n\tdispose(): void {\n\t\tthis._sessionDisposables.dispose();\n\t\tthis._removeAllDecorations();\n\t\tthis._disposables.dispose();\n\t}\n\n\tprivate _update(): void {\n\t\tthis._sessionDisposables.clear();\n\n\t\tif (!this._editor.getOption(EditorOption.inlineHints).enabled) {\n\t\t\tthis._removeAllDecorations();\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = this._editor.getModel();\n\t\tif (!model || !InlineHintsProviderRegistry.has(model)) {\n\t\t\tthis._removeAllDecorations();\n\t\t\treturn;\n\t\t}\n\n\t\tconst scheduler = new RunOnceScheduler(async () => {\n\t\t\tconst t1 = Date.now();\n\n\t\t\tconst cts = new CancellationTokenSource();\n\t\t\tthis._sessionDisposables.add(toDisposable(() => cts.dispose(true)));\n\n\t\t\tconst visibleRanges = this._editor.getVisibleRangesPlusViewportAboveBelow();\n\t\t\tconst result = await getInlineHints(model, visibleRanges, cts.token);\n\n\t\t\t// update moving average\n\t\t\tconst newDelay = this._getInlineHintsDelays.update(model, Date.now() - t1);\n\t\t\tscheduler.delay = newDelay;\n\n\t\t\t// render hints\n\t\t\tthis._updateHintsDecorators(result);\n\n\t\t}, this._getInlineHintsDelays.get(model));\n\n\t\tthis._sessionDisposables.add(scheduler);\n\n\t\t// update inline hints when content or scroll position changes\n\t\tthis._sessionDisposables.add(this._editor.onDidChangeModelContent(() => scheduler.schedule()));\n\t\tthis._disposables.add(this._editor.onDidScrollChange(() => scheduler.schedule()));\n\t\tscheduler.schedule();\n\n\t\t// update inline hints when any any provider fires an event\n\t\tconst providerListener = new DisposableStore();\n\t\tthis._sessionDisposables.add(providerListener);\n\t\tfor (const provider of InlineHintsProviderRegistry.all(model)) {\n\t\t\tif (typeof provider.onDidChangeInlineHints === 'function') {\n\t\t\t\tproviderListener.add(provider.onDidChangeInlineHints(() => scheduler.schedule()));\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _updateHintsDecorators(hintsData: InlineHintsData[]): void {\n\t\tconst { fontSize, fontFamily } = this._getLayoutInfo();\n\t\tconst backgroundColor = this._themeService.getColorTheme().getColor(editorInlineHintBackground);\n\t\tconst fontColor = this._themeService.getColorTheme().getColor(editorInlineHintForeground);\n\n\t\tconst newDecorationsTypeIds: string[] = [];\n\t\tconst newDecorationsData: IModelDeltaDecoration[] = [];\n\n\t\tconst fontFamilyVar = '--inlineHintsFontFamily';\n\t\tthis._editor.getContainerDomNode().style.setProperty(fontFamilyVar, fontFamily);\n\n\t\tfor (const { list: hints } of hintsData) {\n\n\t\t\tfor (let j = 0; j < hints.length && newDecorationsData.length < MAX_DECORATORS; j++) {\n\t\t\t\tconst { text, range, description: hoverMessage, whitespaceBefore, whitespaceAfter } = hints[j];\n\t\t\t\tconst marginBefore = whitespaceBefore ? (fontSize / 3) | 0 : 0;\n\t\t\t\tconst marginAfter = whitespaceAfter ? (fontSize / 3) | 0 : 0;\n\n\t\t\t\tconst before: IContentDecorationRenderOptions = {\n\t\t\t\t\tcontentText: text,\n\t\t\t\t\tbackgroundColor: `${backgroundColor}`,\n\t\t\t\t\tcolor: `${fontColor}`,\n\t\t\t\t\tmargin: `0px ${marginAfter}px 0px ${marginBefore}px`,\n\t\t\t\t\tfontSize: `${fontSize}px`,\n\t\t\t\t\tfontFamily: `var(${fontFamilyVar})`,\n\t\t\t\t\tpadding: `0px ${(fontSize / 4) | 0}px`,\n\t\t\t\t\tborderRadius: `${(fontSize / 4) | 0}px`,\n\t\t\t\t};\n\t\t\t\tconst key = 'inlineHints-' + hash(before).toString(16);\n\t\t\t\tthis._codeEditorService.registerDecorationType(key, { before }, undefined, this._editor);\n\n\t\t\t\t// decoration types are ref-counted which means we only need to\n\t\t\t\t// call register und remove equally often\n\t\t\t\tnewDecorationsTypeIds.push(key);\n\n\t\t\t\tconst options = this._codeEditorService.resolveDecorationOptions(key, true);\n\t\t\t\tif (typeof hoverMessage === 'string') {\n\t\t\t\t\toptions.hoverMessage = new MarkdownString().appendText(hoverMessage);\n\t\t\t\t} else if (hoverMessage) {\n\t\t\t\t\toptions.hoverMessage = hoverMessage;\n\t\t\t\t}\n\n\t\t\t\tnewDecorationsData.push({\n\t\t\t\t\trange,\n\t\t\t\t\toptions\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tthis._decorationsTypeIds.forEach(this._codeEditorService.removeDecorationType, this._codeEditorService);\n\t\tthis._decorationsTypeIds = newDecorationsTypeIds;\n\n\t\tthis._decorationIds = this._editor.deltaDecorations(this._decorationIds, newDecorationsData);\n\t}\n\n\tprivate _getLayoutInfo() {\n\t\tconst options = this._editor.getOption(EditorOption.inlineHints);\n\t\tconst editorFontSize = this._editor.getOption(EditorOption.fontSize);\n\t\tlet fontSize = options.fontSize;\n\t\tif (!fontSize || fontSize < 5 || fontSize > editorFontSize) {\n\t\t\tfontSize = (editorFontSize * .9) | 0;\n\t\t}\n\t\tconst fontFamily = options.fontFamily;\n\t\treturn { fontSize, fontFamily };\n\t}\n\n\tprivate _removeAllDecorations(): void {\n\t\tthis._decorationIds = this._editor.deltaDecorations(this._decorationIds, []);\n\t\tthis._decorationsTypeIds.forEach(this._codeEditorService.removeDecorationType, this._codeEditorService);\n\t\tthis._decorationsTypeIds = [];\n\t}\n}\n\nregisterEditorContribution(InlineHintsController.ID, InlineHintsController);\n\nCommandsRegistry.registerCommand('_executeInlineHintProvider', async (accessor, ...args: [URI, IRange]): Promise<InlineHint[]> => {\n\n\tconst [uri, range] = args;\n\tassertType(URI.isUri(uri));\n\tassertType(Range.isIRange(range));\n\n\tconst ref = await accessor.get(ITextModelService).createModelReference(uri);\n\ttry {\n\t\tconst data = await getInlineHints(ref.object.textEditorModel, [Range.lift(range)], CancellationToken.None);\n\t\treturn flatten(data.map(item => item.list)).sort((a, b) => Range.compareRangesUsingStarts(a.range, b.range));\n\n\t} finally {\n\t\tref.dispose();\n\t}\n});\n"]}