{"version":3,"file":"editorNavigationQuickAccess.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/contrib/quickAccess/editorNavigationQuickAccess.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IQuickAccessProvider } from 'vs/platform/quickinput/common/quickAccess';\nimport { IEditor, ScrollType, IDiffEditor } from 'vs/editor/common/editorCommon';\nimport { IModelDeltaDecoration, OverviewRulerLane, ITextModel } from 'vs/editor/common/model';\nimport { IRange } from 'vs/editor/common/core/range';\nimport { themeColorFromId } from 'vs/platform/theme/common/themeService';\nimport { overviewRulerRangeHighlight } from 'vs/editor/common/view/editorColorRegistry';\nimport { IQuickPick, IQuickPickItem, IKeyMods } from 'vs/platform/quickinput/common/quickInput';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IDisposable, DisposableStore, toDisposable, MutableDisposable } from 'vs/base/common/lifecycle';\nimport { Event } from 'vs/base/common/event';\nimport { isDiffEditor, getCodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { withNullAsUndefined } from 'vs/base/common/types';\nimport { once } from 'vs/base/common/functional';\n\ninterface IEditorLineDecoration {\n\trangeHighlightId: string;\n\toverviewRulerDecorationId: string;\n}\n\nexport interface IEditorNavigationQuickAccessOptions {\n\tcanAcceptInBackground?: boolean;\n}\n\nexport interface IQuickAccessTextEditorContext {\n\n\t/**\n\t * The current active editor.\n\t */\n\treadonly editor: IEditor;\n\n\t/**\n\t * If defined, allows to restore the original view state\n\t * the text editor had before quick access opened.\n\t */\n\trestoreViewState?: () => void;\n}\n\n/**\n * A reusable quick access provider for the editor with support\n * for adding decorations for navigating in the currently active file\n * (for example \"Go to line\", \"Go to symbol\").\n */\nexport abstract class AbstractEditorNavigationQuickAccessProvider implements IQuickAccessProvider {\n\n\tconstructor(protected options?: IEditorNavigationQuickAccessOptions) { }\n\n\t//#region Provider methods\n\n\tprovide(picker: IQuickPick<IQuickPickItem>, token: CancellationToken): IDisposable {\n\t\tconst disposables = new DisposableStore();\n\n\t\t// Apply options if any\n\t\tpicker.canAcceptInBackground = !!this.options?.canAcceptInBackground;\n\n\t\t// Disable filtering & sorting, we control the results\n\t\tpicker.matchOnLabel = picker.matchOnDescription = picker.matchOnDetail = picker.sortByLabel = false;\n\n\t\t// Provide based on current active editor\n\t\tconst pickerDisposable = disposables.add(new MutableDisposable());\n\t\tpickerDisposable.value = this.doProvide(picker, token);\n\n\t\t// Re-create whenever the active editor changes\n\t\tdisposables.add(this.onDidActiveTextEditorControlChange(() => {\n\n\t\t\t// Clear old\n\t\t\tpickerDisposable.value = undefined;\n\n\t\t\t// Add new\n\t\t\tpickerDisposable.value = this.doProvide(picker, token);\n\t\t}));\n\n\t\treturn disposables;\n\t}\n\n\tprivate doProvide(picker: IQuickPick<IQuickPickItem>, token: CancellationToken): IDisposable {\n\t\tconst disposables = new DisposableStore();\n\n\t\t// With text control\n\t\tconst editor = this.activeTextEditorControl;\n\t\tif (editor && this.canProvideWithTextEditor(editor)) {\n\t\t\tconst context: IQuickAccessTextEditorContext = { editor };\n\n\t\t\t// Restore any view state if this picker was closed\n\t\t\t// without actually going to a line\n\t\t\tconst codeEditor = getCodeEditor(editor);\n\t\t\tif (codeEditor) {\n\n\t\t\t\t// Remember view state and update it when the cursor position\n\t\t\t\t// changes even later because it could be that the user has\n\t\t\t\t// configured quick access to remain open when focus is lost and\n\t\t\t\t// we always want to restore the current location.\n\t\t\t\tlet lastKnownEditorViewState = withNullAsUndefined(editor.saveViewState());\n\t\t\t\tdisposables.add(codeEditor.onDidChangeCursorPosition(() => {\n\t\t\t\t\tlastKnownEditorViewState = withNullAsUndefined(editor.saveViewState());\n\t\t\t\t}));\n\n\t\t\t\tcontext.restoreViewState = () => {\n\t\t\t\t\tif (lastKnownEditorViewState && editor === this.activeTextEditorControl) {\n\t\t\t\t\t\teditor.restoreViewState(lastKnownEditorViewState);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tdisposables.add(once(token.onCancellationRequested)(() => context.restoreViewState?.()));\n\t\t\t}\n\n\t\t\t// Clean up decorations on dispose\n\t\t\tdisposables.add(toDisposable(() => this.clearDecorations(editor)));\n\n\t\t\t// Ask subclass for entries\n\t\t\tdisposables.add(this.provideWithTextEditor(context, picker, token));\n\t\t}\n\n\t\t// Without text control\n\t\telse {\n\t\t\tdisposables.add(this.provideWithoutTextEditor(picker, token));\n\t\t}\n\n\t\treturn disposables;\n\t}\n\n\t/**\n\t * Subclasses to implement if they can operate on the text editor.\n\t */\n\tprotected canProvideWithTextEditor(editor: IEditor): boolean {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Subclasses to implement to provide picks for the picker when an editor is active.\n\t */\n\tprotected abstract provideWithTextEditor(context: IQuickAccessTextEditorContext, picker: IQuickPick<IQuickPickItem>, token: CancellationToken): IDisposable;\n\n\t/**\n\t * Subclasses to implement to provide picks for the picker when no editor is active.\n\t */\n\tprotected abstract provideWithoutTextEditor(picker: IQuickPick<IQuickPickItem>, token: CancellationToken): IDisposable;\n\n\tprotected gotoLocation({ editor }: IQuickAccessTextEditorContext, options: { range: IRange, keyMods: IKeyMods, forceSideBySide?: boolean, preserveFocus?: boolean }): void {\n\t\teditor.setSelection(options.range);\n\t\teditor.revealRangeInCenter(options.range, ScrollType.Smooth);\n\t\tif (!options.preserveFocus) {\n\t\t\teditor.focus();\n\t\t}\n\t}\n\n\tprotected getModel(editor: IEditor | IDiffEditor): ITextModel | undefined {\n\t\treturn isDiffEditor(editor) ?\n\t\t\teditor.getModel()?.modified :\n\t\t\teditor.getModel() as ITextModel;\n\t}\n\n\t//#endregion\n\n\n\t//#region Editor access\n\n\t/**\n\t * Subclasses to provide an event when the active editor control changes.\n\t */\n\tprotected abstract readonly onDidActiveTextEditorControlChange: Event<void>;\n\n\t/**\n\t * Subclasses to provide the current active editor control.\n\t */\n\tprotected abstract activeTextEditorControl: IEditor | undefined;\n\n\t//#endregion\n\n\n\t//#region Decorations Utils\n\n\tprivate rangeHighlightDecorationId: IEditorLineDecoration | undefined = undefined;\n\n\tprotected addDecorations(editor: IEditor, range: IRange): void {\n\t\teditor.changeDecorations(changeAccessor => {\n\n\t\t\t// Reset old decorations if any\n\t\t\tconst deleteDecorations: string[] = [];\n\t\t\tif (this.rangeHighlightDecorationId) {\n\t\t\t\tdeleteDecorations.push(this.rangeHighlightDecorationId.overviewRulerDecorationId);\n\t\t\t\tdeleteDecorations.push(this.rangeHighlightDecorationId.rangeHighlightId);\n\n\t\t\t\tthis.rangeHighlightDecorationId = undefined;\n\t\t\t}\n\n\t\t\t// Add new decorations for the range\n\t\t\tconst newDecorations: IModelDeltaDecoration[] = [\n\n\t\t\t\t// highlight the entire line on the range\n\t\t\t\t{\n\t\t\t\t\trange,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tclassName: 'rangeHighlight',\n\t\t\t\t\t\tisWholeLine: true\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t// also add overview ruler highlight\n\t\t\t\t{\n\t\t\t\t\trange,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\toverviewRuler: {\n\t\t\t\t\t\t\tcolor: themeColorFromId(overviewRulerRangeHighlight),\n\t\t\t\t\t\t\tposition: OverviewRulerLane.Full\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t];\n\n\t\t\tconst [rangeHighlightId, overviewRulerDecorationId] = changeAccessor.deltaDecorations(deleteDecorations, newDecorations);\n\n\t\t\tthis.rangeHighlightDecorationId = { rangeHighlightId, overviewRulerDecorationId };\n\t\t});\n\t}\n\n\tprotected clearDecorations(editor: IEditor): void {\n\t\tconst rangeHighlightDecorationId = this.rangeHighlightDecorationId;\n\t\tif (rangeHighlightDecorationId) {\n\t\t\teditor.changeDecorations(changeAccessor => {\n\t\t\t\tchangeAccessor.deltaDecorations([\n\t\t\t\t\trangeHighlightDecorationId.overviewRulerDecorationId,\n\t\t\t\t\trangeHighlightDecorationId.rangeHighlightId\n\t\t\t\t], []);\n\t\t\t});\n\n\t\t\tthis.rangeHighlightDecorationId = undefined;\n\t\t}\n\t}\n\n\t//#endregion\n}\n"]}