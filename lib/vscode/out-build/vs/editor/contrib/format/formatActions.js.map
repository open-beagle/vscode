{"version":3,"sources":["vs/editor/contrib/format/formatActions.ts"],"names":[],"mappings":"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","file":"formatActions.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isNonEmptyArray } from 'vs/base/common/arrays';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { KeyChord, KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { EditorAction, registerEditorAction, registerEditorContribution, ServicesAccessor } from 'vs/editor/browser/editorExtensions';\nimport { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';\nimport { CharacterSet } from 'vs/editor/common/core/characterClassifier';\nimport { Range } from 'vs/editor/common/core/range';\nimport { IEditorContribution } from 'vs/editor/common/editorCommon';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { DocumentRangeFormattingEditProviderRegistry, OnTypeFormattingEditProviderRegistry } from 'vs/editor/common/modes';\nimport { IEditorWorkerService } from 'vs/editor/common/services/editorWorkerService';\nimport { getOnTypeFormattingEdits, alertFormattingEdits, formatDocumentRangesWithSelectedProvider, formatDocumentWithSelectedProvider, FormattingMode } from 'vs/editor/contrib/format/format';\nimport { FormattingEdit } from 'vs/editor/contrib/format/formattingEdit';\nimport * as nls from 'vs/nls';\nimport { CommandsRegistry, ICommandService } from 'vs/platform/commands/common/commands';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { EditorOption } from 'vs/editor/common/config/editorOptions';\nimport { Progress, IEditorProgressService } from 'vs/platform/progress/common/progress';\n\nclass FormatOnType implements IEditorContribution {\n\n\tpublic static readonly ID = 'editor.contrib.autoFormat';\n\n\tprivate readonly _editor: ICodeEditor;\n\tprivate readonly _callOnDispose = new DisposableStore();\n\tprivate readonly _callOnModel = new DisposableStore();\n\n\tconstructor(\n\t\teditor: ICodeEditor,\n\t\t@IEditorWorkerService private readonly _workerService: IEditorWorkerService\n\t) {\n\t\tthis._editor = editor;\n\t\tthis._callOnDispose.add(editor.onDidChangeConfiguration(() => this._update()));\n\t\tthis._callOnDispose.add(editor.onDidChangeModel(() => this._update()));\n\t\tthis._callOnDispose.add(editor.onDidChangeModelLanguage(() => this._update()));\n\t\tthis._callOnDispose.add(OnTypeFormattingEditProviderRegistry.onDidChange(this._update, this));\n\t}\n\n\tdispose(): void {\n\t\tthis._callOnDispose.dispose();\n\t\tthis._callOnModel.dispose();\n\t}\n\n\tprivate _update(): void {\n\n\t\t// clean up\n\t\tthis._callOnModel.clear();\n\n\t\t// we are disabled\n\t\tif (!this._editor.getOption(EditorOption.formatOnType)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// no model\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = this._editor.getModel();\n\n\t\t// no support\n\t\tconst [support] = OnTypeFormattingEditProviderRegistry.ordered(model);\n\t\tif (!support || !support.autoFormatTriggerCharacters) {\n\t\t\treturn;\n\t\t}\n\n\t\t// register typing listeners that will trigger the format\n\t\tlet triggerChars = new CharacterSet();\n\t\tfor (let ch of support.autoFormatTriggerCharacters) {\n\t\t\ttriggerChars.add(ch.charCodeAt(0));\n\t\t}\n\t\tthis._callOnModel.add(this._editor.onDidType((text: string) => {\n\t\t\tlet lastCharCode = text.charCodeAt(text.length - 1);\n\t\t\tif (triggerChars.has(lastCharCode)) {\n\t\t\t\tthis._trigger(String.fromCharCode(lastCharCode));\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate _trigger(ch: string): void {\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._editor.getSelections().length > 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = this._editor.getModel();\n\t\tconst position = this._editor.getPosition();\n\t\tlet canceled = false;\n\n\t\t// install a listener that checks if edits happens before the\n\t\t// position on which we format right now. If so, we won't\n\t\t// apply the format edits\n\t\tconst unbind = this._editor.onDidChangeModelContent((e) => {\n\t\t\tif (e.isFlush) {\n\t\t\t\t// a model.setValue() was called\n\t\t\t\t// cancel only once\n\t\t\t\tcanceled = true;\n\t\t\t\tunbind.dispose();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (let i = 0, len = e.changes.length; i < len; i++) {\n\t\t\t\tconst change = e.changes[i];\n\t\t\t\tif (change.range.endLineNumber <= position.lineNumber) {\n\t\t\t\t\t// cancel only once\n\t\t\t\t\tcanceled = true;\n\t\t\t\t\tunbind.dispose();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t});\n\n\t\tgetOnTypeFormattingEdits(\n\t\t\tthis._workerService,\n\t\t\tmodel,\n\t\t\tposition,\n\t\t\tch,\n\t\t\tmodel.getFormattingOptions()\n\t\t).then(edits => {\n\n\t\t\tunbind.dispose();\n\n\t\t\tif (canceled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isNonEmptyArray(edits)) {\n\t\t\t\tFormattingEdit.execute(this._editor, edits, true);\n\t\t\t\talertFormattingEdits(edits);\n\t\t\t}\n\n\t\t}, (err) => {\n\t\t\tunbind.dispose();\n\t\t\tthrow err;\n\t\t});\n\t}\n}\n\nclass FormatOnPaste implements IEditorContribution {\n\n\tpublic static readonly ID = 'editor.contrib.formatOnPaste';\n\n\tprivate readonly _callOnDispose = new DisposableStore();\n\tprivate readonly _callOnModel = new DisposableStore();\n\n\tconstructor(\n\t\tprivate readonly editor: ICodeEditor,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t) {\n\t\tthis._callOnDispose.add(editor.onDidChangeConfiguration(() => this._update()));\n\t\tthis._callOnDispose.add(editor.onDidChangeModel(() => this._update()));\n\t\tthis._callOnDispose.add(editor.onDidChangeModelLanguage(() => this._update()));\n\t\tthis._callOnDispose.add(DocumentRangeFormattingEditProviderRegistry.onDidChange(this._update, this));\n\t}\n\n\tdispose(): void {\n\t\tthis._callOnDispose.dispose();\n\t\tthis._callOnModel.dispose();\n\t}\n\n\tprivate _update(): void {\n\n\t\t// clean up\n\t\tthis._callOnModel.clear();\n\n\t\t// we are disabled\n\t\tif (!this.editor.getOption(EditorOption.formatOnPaste)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// no model\n\t\tif (!this.editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// no formatter\n\t\tif (!DocumentRangeFormattingEditProviderRegistry.has(this.editor.getModel())) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._callOnModel.add(this.editor.onDidPaste(({ range }) => this._trigger(range)));\n\t}\n\n\tprivate _trigger(range: Range): void {\n\t\tif (!this.editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.editor.getSelections().length > 1) {\n\t\t\treturn;\n\t\t}\n\t\tthis._instantiationService.invokeFunction(formatDocumentRangesWithSelectedProvider, this.editor, range, FormattingMode.Silent, Progress.None, CancellationToken.None).catch(onUnexpectedError);\n\t}\n}\n\nclass FormatDocumentAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.formatDocument',\n\t\t\tlabel: nls.localize('formatDocument.label', \"Format Document\"),\n\t\t\talias: 'Format Document',\n\t\t\tprecondition: ContextKeyExpr.and(EditorContextKeys.notInCompositeEditor, EditorContextKeys.writable, EditorContextKeys.hasDocumentFormattingProvider),\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.Shift | KeyMod.Alt | KeyCode.KEY_F,\n\t\t\t\tlinux: { primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_I },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t},\n\t\t\tcontextMenuOpts: {\n\t\t\t\tgroup: '1_modification',\n\t\t\t\torder: 1.3\n\t\t\t}\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, editor: ICodeEditor): Promise<void> {\n\t\tif (editor.hasModel()) {\n\t\t\tconst instaService = accessor.get(IInstantiationService);\n\t\t\tconst progressService = accessor.get(IEditorProgressService);\n\t\t\tawait progressService.showWhile(\n\t\t\t\tinstaService.invokeFunction(formatDocumentWithSelectedProvider, editor, FormattingMode.Explicit, Progress.None, CancellationToken.None),\n\t\t\t\t250\n\t\t\t);\n\t\t}\n\t}\n}\n\nclass FormatSelectionAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.formatSelection',\n\t\t\tlabel: nls.localize('formatSelection.label', \"Format Selection\"),\n\t\t\talias: 'Format Selection',\n\t\t\tprecondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasDocumentSelectionFormattingProvider),\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyMod.CtrlCmd | KeyCode.KEY_F),\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t},\n\t\t\tcontextMenuOpts: {\n\t\t\t\twhen: EditorContextKeys.hasNonEmptySelection,\n\t\t\t\tgroup: '1_modification',\n\t\t\t\torder: 1.31\n\t\t\t}\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, editor: ICodeEditor): Promise<void> {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\t\tconst instaService = accessor.get(IInstantiationService);\n\t\tconst model = editor.getModel();\n\n\t\tconst ranges = editor.getSelections().map(range => {\n\t\t\treturn range.isEmpty()\n\t\t\t\t? new Range(range.startLineNumber, 1, range.startLineNumber, model.getLineMaxColumn(range.startLineNumber))\n\t\t\t\t: range;\n\t\t});\n\n\t\tconst progressService = accessor.get(IEditorProgressService);\n\t\tawait progressService.showWhile(\n\t\t\tinstaService.invokeFunction(formatDocumentRangesWithSelectedProvider, editor, ranges, FormattingMode.Explicit, Progress.None, CancellationToken.None),\n\t\t\t250\n\t\t);\n\t}\n}\n\nregisterEditorContribution(FormatOnType.ID, FormatOnType);\nregisterEditorContribution(FormatOnPaste.ID, FormatOnPaste);\nregisterEditorAction(FormatDocumentAction);\nregisterEditorAction(FormatSelectionAction);\n\n// this is the old format action that does both (format document OR format selection)\n// and we keep it here such that existing keybinding configurations etc will still work\nCommandsRegistry.registerCommand('editor.action.format', async accessor => {\n\tconst editor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n\tif (!editor || !editor.hasModel()) {\n\t\treturn;\n\t}\n\tconst commandService = accessor.get(ICommandService);\n\tif (editor.getSelection().isEmpty()) {\n\t\tawait commandService.executeCommand('editor.action.formatDocument');\n\t} else {\n\t\tawait commandService.executeCommand('editor.action.formatSelection');\n\t}\n});\n"]}