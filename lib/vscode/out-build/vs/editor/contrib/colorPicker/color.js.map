{"version":3,"file":"color.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/contrib/colorPicker/color.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { illegalArgument } from 'vs/base/common/errors';\nimport { URI } from 'vs/base/common/uri';\nimport { IRange, Range } from 'vs/editor/common/core/range';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { ColorProviderRegistry, DocumentColorProvider, IColorInformation, IColorPresentation } from 'vs/editor/common/modes';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\n\n\nexport interface IColorData {\n\tcolorInfo: IColorInformation;\n\tprovider: DocumentColorProvider;\n}\n\nexport function getColors(model: ITextModel, token: CancellationToken): Promise<IColorData[]> {\n\tconst colors: IColorData[] = [];\n\tconst providers = ColorProviderRegistry.ordered(model).reverse();\n\tconst promises = providers.map(provider => Promise.resolve(provider.provideDocumentColors(model, token)).then(result => {\n\t\tif (Array.isArray(result)) {\n\t\t\tfor (let colorInfo of result) {\n\t\t\t\tcolors.push({ colorInfo, provider });\n\t\t\t}\n\t\t}\n\t}));\n\n\treturn Promise.all(promises).then(() => colors);\n}\n\nexport function getColorPresentations(model: ITextModel, colorInfo: IColorInformation, provider: DocumentColorProvider, token: CancellationToken): Promise<IColorPresentation[] | null | undefined> {\n\treturn Promise.resolve(provider.provideColorPresentations(model, colorInfo, token));\n}\n\nCommandsRegistry.registerCommand('_executeDocumentColorProvider', function (accessor, ...args) {\n\n\tconst [resource] = args;\n\tif (!(resource instanceof URI)) {\n\t\tthrow illegalArgument();\n\t}\n\n\tconst model = accessor.get(IModelService).getModel(resource);\n\tif (!model) {\n\t\tthrow illegalArgument();\n\t}\n\n\tconst rawCIs: { range: IRange, color: [number, number, number, number] }[] = [];\n\tconst providers = ColorProviderRegistry.ordered(model).reverse();\n\tconst promises = providers.map(provider => Promise.resolve(provider.provideDocumentColors(model, CancellationToken.None)).then(result => {\n\t\tif (Array.isArray(result)) {\n\t\t\tfor (let ci of result) {\n\t\t\t\trawCIs.push({ range: ci.range, color: [ci.color.red, ci.color.green, ci.color.blue, ci.color.alpha] });\n\t\t\t}\n\t\t}\n\t}));\n\n\treturn Promise.all(promises).then(() => rawCIs);\n});\n\n\nCommandsRegistry.registerCommand('_executeColorPresentationProvider', function (accessor, ...args) {\n\n\tconst [color, context] = args;\n\tconst { uri, range } = context;\n\tif (!(uri instanceof URI) || !Array.isArray(color) || color.length !== 4 || !Range.isIRange(range)) {\n\t\tthrow illegalArgument();\n\t}\n\tconst [red, green, blue, alpha] = color;\n\n\tconst model = accessor.get(IModelService).getModel(uri);\n\tif (!model) {\n\t\tthrow illegalArgument();\n\t}\n\n\tconst colorInfo = {\n\t\trange,\n\t\tcolor: { red, green, blue, alpha }\n\t};\n\n\tconst presentations: IColorPresentation[] = [];\n\tconst providers = ColorProviderRegistry.ordered(model).reverse();\n\tconst promises = providers.map(provider => Promise.resolve(provider.provideColorPresentations(model, colorInfo, CancellationToken.None)).then(result => {\n\t\tif (Array.isArray(result)) {\n\t\t\tpresentations.push(...result);\n\t\t}\n\t}));\n\treturn Promise.all(promises).then(() => presentations);\n});\n"]}