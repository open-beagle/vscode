{"version":3,"file":"wordDistance.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/contrib/suggest/test/wordDistance.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { EditorSimpleWorker } from 'vs/editor/common/services/editorSimpleWorker';\nimport { mock } from 'vs/base/test/common/mock';\nimport { EditorWorkerHost, EditorWorkerServiceImpl } from 'vs/editor/common/services/editorWorkerServiceImpl';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { createTextModel } from 'vs/editor/test/common/editorTestUtils';\nimport { URI } from 'vs/base/common/uri';\nimport { ITextResourceConfigurationService } from 'vs/editor/common/services/textResourceConfigurationService';\nimport { NullLogService } from 'vs/platform/log/common/log';\nimport { WordDistance } from 'vs/editor/contrib/suggest/wordDistance';\nimport { createTestCodeEditor } from 'vs/editor/test/browser/testCodeEditor';\nimport { IRange } from 'vs/editor/common/core/range';\nimport { DEFAULT_WORD_REGEXP } from 'vs/editor/common/model/wordHelper';\nimport { Event } from 'vs/base/common/event';\nimport { CompletionItem } from 'vs/editor/contrib/suggest/suggest';\nimport { IPosition } from 'vs/editor/common/core/position';\nimport * as modes from 'vs/editor/common/modes';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { LanguageConfigurationRegistry } from 'vs/editor/common/modes/languageConfigurationRegistry';\nimport { MockMode } from 'vs/editor/test/common/mocks/mockMode';\n\nsuite('suggest, word distance', function () {\n\n\tclass BracketMode extends MockMode {\n\n\t\tprivate static readonly _id = new modes.LanguageIdentifier('bracketMode', 3);\n\n\t\tconstructor() {\n\t\t\tsuper(BracketMode._id);\n\t\t\tthis._register(LanguageConfigurationRegistry.register(this.getLanguageIdentifier(), {\n\t\t\t\tbrackets: [\n\t\t\t\t\t['{', '}'],\n\t\t\t\t\t['[', ']'],\n\t\t\t\t\t['(', ')'],\n\t\t\t\t]\n\t\t\t}));\n\t\t}\n\t}\n\tlet distance: WordDistance;\n\tlet disposables = new DisposableStore();\n\n\tsetup(async function () {\n\n\t\tdisposables.clear();\n\t\tlet mode = new BracketMode();\n\t\tlet model = createTextModel('function abc(aa, ab){\\na\\n}', undefined, mode.getLanguageIdentifier(), URI.parse('test:///some.path'));\n\t\tlet editor = createTestCodeEditor({ model: model });\n\t\teditor.updateOptions({ suggest: { localityBonus: true } });\n\t\teditor.setPosition({ lineNumber: 2, column: 2 });\n\n\t\tlet modelService = new class extends mock<IModelService>() {\n\t\t\toverride onModelRemoved = Event.None;\n\t\t\toverride getModel(uri: URI) {\n\t\t\t\treturn uri.toString() === model.uri.toString() ? model : null;\n\t\t\t}\n\t\t};\n\n\t\tlet service = new class extends EditorWorkerServiceImpl {\n\n\t\t\tprivate _worker = new EditorSimpleWorker(new class extends mock<EditorWorkerHost>() { }, null);\n\n\t\t\tconstructor() {\n\t\t\t\tsuper(modelService, new class extends mock<ITextResourceConfigurationService>() { }, new NullLogService());\n\t\t\t\tthis._worker.acceptNewModel({\n\t\t\t\t\turl: model.uri.toString(),\n\t\t\t\t\tlines: model.getLinesContent(),\n\t\t\t\t\tEOL: model.getEOL(),\n\t\t\t\t\tversionId: model.getVersionId()\n\t\t\t\t});\n\t\t\t\tmodel.onDidChangeContent(e => this._worker.acceptModelChanged(model.uri.toString(), e));\n\t\t\t}\n\t\t\toverride computeWordRanges(resource: URI, range: IRange): Promise<{ [word: string]: IRange[] } | null> {\n\t\t\t\treturn this._worker.computeWordRanges(resource.toString(), range, DEFAULT_WORD_REGEXP.source, DEFAULT_WORD_REGEXP.flags);\n\t\t\t}\n\t\t};\n\n\t\tdistance = await WordDistance.create(service, editor);\n\n\t\tdisposables.add(service);\n\t\tdisposables.add(mode);\n\t\tdisposables.add(model);\n\t\tdisposables.add(editor);\n\t});\n\n\tteardown(function () {\n\t\tdisposables.clear();\n\t});\n\n\tfunction createSuggestItem(label: string, overwriteBefore: number, position: IPosition): CompletionItem {\n\t\tconst suggestion: modes.CompletionItem = {\n\t\t\tlabel,\n\t\t\trange: { startLineNumber: position.lineNumber, startColumn: position.column - overwriteBefore, endLineNumber: position.lineNumber, endColumn: position.column },\n\t\t\tinsertText: label,\n\t\t\tkind: 0\n\t\t};\n\t\tconst container: modes.CompletionList = {\n\t\t\tsuggestions: [suggestion]\n\t\t};\n\t\tconst provider: modes.CompletionItemProvider = {\n\t\t\tprovideCompletionItems(): any {\n\t\t\t\treturn;\n\t\t\t}\n\t\t};\n\t\treturn new CompletionItem(position, suggestion, container, provider);\n\t}\n\n\ttest('Suggest locality bonus can boost current word #90515', function () {\n\t\tconst pos = { lineNumber: 2, column: 2 };\n\t\tconst d1 = distance.distance(pos, createSuggestItem('a', 1, pos).completion);\n\t\tconst d2 = distance.distance(pos, createSuggestItem('aa', 1, pos).completion);\n\t\tconst d3 = distance.distance(pos, createSuggestItem('ab', 1, pos).completion);\n\n\t\tassert.ok(d1 > d2);\n\t\tassert.ok(d2 === d3);\n\t});\n});\n"]}