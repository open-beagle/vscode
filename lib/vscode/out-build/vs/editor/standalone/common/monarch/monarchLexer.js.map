{"version":3,"file":"monarchLexer.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/standalone/common/monarch/monarchLexer.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/**\n * Create a syntax highighter with a fully declarative JSON style lexer description\n * using regular expressions.\n */\n\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { Token, TokenizationResult, TokenizationResult2 } from 'vs/editor/common/core/token';\nimport * as modes from 'vs/editor/common/modes';\nimport { NULL_MODE_ID, NULL_STATE } from 'vs/editor/common/modes/nullMode';\nimport { TokenTheme } from 'vs/editor/common/modes/supports/tokenization';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport * as monarchCommon from 'vs/editor/standalone/common/monarch/monarchCommon';\nimport { IStandaloneThemeService } from 'vs/editor/standalone/common/standaloneThemeService';\n\nconst CACHE_STACK_DEPTH = 5;\n\n/**\n * Reuse the same stack elements up to a certain depth.\n */\nclass MonarchStackElementFactory {\n\n\tprivate static readonly _INSTANCE = new MonarchStackElementFactory(CACHE_STACK_DEPTH);\n\tpublic static create(parent: MonarchStackElement | null, state: string): MonarchStackElement {\n\t\treturn this._INSTANCE.create(parent, state);\n\t}\n\n\tprivate readonly _maxCacheDepth: number;\n\tprivate readonly _entries: { [stackElementId: string]: MonarchStackElement; };\n\n\tconstructor(maxCacheDepth: number) {\n\t\tthis._maxCacheDepth = maxCacheDepth;\n\t\tthis._entries = Object.create(null);\n\t}\n\n\tpublic create(parent: MonarchStackElement | null, state: string): MonarchStackElement {\n\t\tif (parent !== null && parent.depth >= this._maxCacheDepth) {\n\t\t\t// no caching above a certain depth\n\t\t\treturn new MonarchStackElement(parent, state);\n\t\t}\n\t\tlet stackElementId = MonarchStackElement.getStackElementId(parent);\n\t\tif (stackElementId.length > 0) {\n\t\t\tstackElementId += '|';\n\t\t}\n\t\tstackElementId += state;\n\n\t\tlet result = this._entries[stackElementId];\n\t\tif (result) {\n\t\t\treturn result;\n\t\t}\n\t\tresult = new MonarchStackElement(parent, state);\n\t\tthis._entries[stackElementId] = result;\n\t\treturn result;\n\t}\n}\n\nclass MonarchStackElement {\n\n\tpublic readonly parent: MonarchStackElement | null;\n\tpublic readonly state: string;\n\tpublic readonly depth: number;\n\n\tconstructor(parent: MonarchStackElement | null, state: string) {\n\t\tthis.parent = parent;\n\t\tthis.state = state;\n\t\tthis.depth = (this.parent ? this.parent.depth : 0) + 1;\n\t}\n\n\tpublic static getStackElementId(element: MonarchStackElement | null): string {\n\t\tlet result = '';\n\t\twhile (element !== null) {\n\t\t\tif (result.length > 0) {\n\t\t\t\tresult += '|';\n\t\t\t}\n\t\t\tresult += element.state;\n\t\t\telement = element.parent;\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate static _equals(a: MonarchStackElement | null, b: MonarchStackElement | null): boolean {\n\t\twhile (a !== null && b !== null) {\n\t\t\tif (a === b) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (a.state !== b.state) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ta = a.parent;\n\t\t\tb = b.parent;\n\t\t}\n\t\tif (a === null && b === null) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic equals(other: MonarchStackElement): boolean {\n\t\treturn MonarchStackElement._equals(this, other);\n\t}\n\n\tpublic push(state: string): MonarchStackElement {\n\t\treturn MonarchStackElementFactory.create(this, state);\n\t}\n\n\tpublic pop(): MonarchStackElement | null {\n\t\treturn this.parent;\n\t}\n\n\tpublic popall(): MonarchStackElement {\n\t\tlet result: MonarchStackElement = this;\n\t\twhile (result.parent) {\n\t\t\tresult = result.parent;\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic switchTo(state: string): MonarchStackElement {\n\t\treturn MonarchStackElementFactory.create(this.parent, state);\n\t}\n}\n\nclass EmbeddedModeData {\n\tpublic readonly modeId: string;\n\tpublic readonly state: modes.IState;\n\n\tconstructor(modeId: string, state: modes.IState) {\n\t\tthis.modeId = modeId;\n\t\tthis.state = state;\n\t}\n\n\tpublic equals(other: EmbeddedModeData): boolean {\n\t\treturn (\n\t\t\tthis.modeId === other.modeId\n\t\t\t&& this.state.equals(other.state)\n\t\t);\n\t}\n\n\tpublic clone(): EmbeddedModeData {\n\t\tlet stateClone = this.state.clone();\n\t\t// save an object\n\t\tif (stateClone === this.state) {\n\t\t\treturn this;\n\t\t}\n\t\treturn new EmbeddedModeData(this.modeId, this.state);\n\t}\n}\n\n/**\n * Reuse the same line states up to a certain depth.\n */\nclass MonarchLineStateFactory {\n\n\tprivate static readonly _INSTANCE = new MonarchLineStateFactory(CACHE_STACK_DEPTH);\n\tpublic static create(stack: MonarchStackElement, embeddedModeData: EmbeddedModeData | null): MonarchLineState {\n\t\treturn this._INSTANCE.create(stack, embeddedModeData);\n\t}\n\n\tprivate readonly _maxCacheDepth: number;\n\tprivate readonly _entries: { [stackElementId: string]: MonarchLineState; };\n\n\tconstructor(maxCacheDepth: number) {\n\t\tthis._maxCacheDepth = maxCacheDepth;\n\t\tthis._entries = Object.create(null);\n\t}\n\n\tpublic create(stack: MonarchStackElement, embeddedModeData: EmbeddedModeData | null): MonarchLineState {\n\t\tif (embeddedModeData !== null) {\n\t\t\t// no caching when embedding\n\t\t\treturn new MonarchLineState(stack, embeddedModeData);\n\t\t}\n\t\tif (stack !== null && stack.depth >= this._maxCacheDepth) {\n\t\t\t// no caching above a certain depth\n\t\t\treturn new MonarchLineState(stack, embeddedModeData);\n\t\t}\n\t\tlet stackElementId = MonarchStackElement.getStackElementId(stack);\n\n\t\tlet result = this._entries[stackElementId];\n\t\tif (result) {\n\t\t\treturn result;\n\t\t}\n\t\tresult = new MonarchLineState(stack, null);\n\t\tthis._entries[stackElementId] = result;\n\t\treturn result;\n\t}\n}\n\nclass MonarchLineState implements modes.IState {\n\n\tpublic readonly stack: MonarchStackElement;\n\tpublic readonly embeddedModeData: EmbeddedModeData | null;\n\n\tconstructor(\n\t\tstack: MonarchStackElement,\n\t\tembeddedModeData: EmbeddedModeData | null\n\t) {\n\t\tthis.stack = stack;\n\t\tthis.embeddedModeData = embeddedModeData;\n\t}\n\n\tpublic clone(): modes.IState {\n\t\tlet embeddedModeDataClone = this.embeddedModeData ? this.embeddedModeData.clone() : null;\n\t\t// save an object\n\t\tif (embeddedModeDataClone === this.embeddedModeData) {\n\t\t\treturn this;\n\t\t}\n\t\treturn MonarchLineStateFactory.create(this.stack, this.embeddedModeData);\n\t}\n\n\tpublic equals(other: modes.IState): boolean {\n\t\tif (!(other instanceof MonarchLineState)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!this.stack.equals(other.stack)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this.embeddedModeData === null && other.embeddedModeData === null) {\n\t\t\treturn true;\n\t\t}\n\t\tif (this.embeddedModeData === null || other.embeddedModeData === null) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this.embeddedModeData.equals(other.embeddedModeData);\n\t}\n}\n\ninterface IMonarchTokensCollector {\n\tenterMode(startOffset: number, modeId: string): void;\n\temit(startOffset: number, type: string): void;\n\tnestedModeTokenize(embeddedModeLine: string, hasEOL: boolean, embeddedModeData: EmbeddedModeData, offsetDelta: number): modes.IState;\n}\n\nclass MonarchClassicTokensCollector implements IMonarchTokensCollector {\n\n\tprivate _tokens: Token[];\n\tprivate _language: string | null;\n\tprivate _lastTokenType: string | null;\n\tprivate _lastTokenLanguage: string | null;\n\n\tconstructor() {\n\t\tthis._tokens = [];\n\t\tthis._language = null;\n\t\tthis._lastTokenType = null;\n\t\tthis._lastTokenLanguage = null;\n\t}\n\n\tpublic enterMode(startOffset: number, modeId: string): void {\n\t\tthis._language = modeId;\n\t}\n\n\tpublic emit(startOffset: number, type: string): void {\n\t\tif (this._lastTokenType === type && this._lastTokenLanguage === this._language) {\n\t\t\treturn;\n\t\t}\n\t\tthis._lastTokenType = type;\n\t\tthis._lastTokenLanguage = this._language;\n\t\tthis._tokens.push(new Token(startOffset, type, this._language!));\n\t}\n\n\tpublic nestedModeTokenize(embeddedModeLine: string, hasEOL: boolean, embeddedModeData: EmbeddedModeData, offsetDelta: number): modes.IState {\n\t\tconst nestedModeId = embeddedModeData.modeId;\n\t\tconst embeddedModeState = embeddedModeData.state;\n\n\t\tconst nestedModeTokenizationSupport = modes.TokenizationRegistry.get(nestedModeId);\n\t\tif (!nestedModeTokenizationSupport) {\n\t\t\tthis.enterMode(offsetDelta, nestedModeId);\n\t\t\tthis.emit(offsetDelta, '');\n\t\t\treturn embeddedModeState;\n\t\t}\n\n\t\tlet nestedResult = nestedModeTokenizationSupport.tokenize(embeddedModeLine, hasEOL, embeddedModeState, offsetDelta);\n\t\tthis._tokens = this._tokens.concat(nestedResult.tokens);\n\t\tthis._lastTokenType = null;\n\t\tthis._lastTokenLanguage = null;\n\t\tthis._language = null;\n\t\treturn nestedResult.endState;\n\t}\n\n\tpublic finalize(endState: MonarchLineState): TokenizationResult {\n\t\treturn new TokenizationResult(this._tokens, endState);\n\t}\n}\n\nclass MonarchModernTokensCollector implements IMonarchTokensCollector {\n\n\tprivate readonly _modeService: IModeService;\n\tprivate readonly _theme: TokenTheme;\n\tprivate _prependTokens: Uint32Array | null;\n\tprivate _tokens: number[];\n\tprivate _currentLanguageId: modes.LanguageId;\n\tprivate _lastTokenMetadata: number;\n\n\tconstructor(modeService: IModeService, theme: TokenTheme) {\n\t\tthis._modeService = modeService;\n\t\tthis._theme = theme;\n\t\tthis._prependTokens = null;\n\t\tthis._tokens = [];\n\t\tthis._currentLanguageId = modes.LanguageId.Null;\n\t\tthis._lastTokenMetadata = 0;\n\t}\n\n\tpublic enterMode(startOffset: number, modeId: string): void {\n\t\tthis._currentLanguageId = this._modeService.getLanguageIdentifier(modeId)!.id;\n\t}\n\n\tpublic emit(startOffset: number, type: string): void {\n\t\tlet metadata = this._theme.match(this._currentLanguageId, type);\n\t\tif (this._lastTokenMetadata === metadata) {\n\t\t\treturn;\n\t\t}\n\t\tthis._lastTokenMetadata = metadata;\n\t\tthis._tokens.push(startOffset);\n\t\tthis._tokens.push(metadata);\n\t}\n\n\tprivate static _merge(a: Uint32Array | null, b: number[], c: Uint32Array | null): Uint32Array {\n\t\tlet aLen = (a !== null ? a.length : 0);\n\t\tlet bLen = b.length;\n\t\tlet cLen = (c !== null ? c.length : 0);\n\n\t\tif (aLen === 0 && bLen === 0 && cLen === 0) {\n\t\t\treturn new Uint32Array(0);\n\t\t}\n\t\tif (aLen === 0 && bLen === 0) {\n\t\t\treturn c!;\n\t\t}\n\t\tif (bLen === 0 && cLen === 0) {\n\t\t\treturn a!;\n\t\t}\n\n\t\tlet result = new Uint32Array(aLen + bLen + cLen);\n\t\tif (a !== null) {\n\t\t\tresult.set(a);\n\t\t}\n\t\tfor (let i = 0; i < bLen; i++) {\n\t\t\tresult[aLen + i] = b[i];\n\t\t}\n\t\tif (c !== null) {\n\t\t\tresult.set(c, aLen + bLen);\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic nestedModeTokenize(embeddedModeLine: string, hasEOL: boolean, embeddedModeData: EmbeddedModeData, offsetDelta: number): modes.IState {\n\t\tconst nestedModeId = embeddedModeData.modeId;\n\t\tconst embeddedModeState = embeddedModeData.state;\n\n\t\tconst nestedModeTokenizationSupport = modes.TokenizationRegistry.get(nestedModeId);\n\t\tif (!nestedModeTokenizationSupport) {\n\t\t\tthis.enterMode(offsetDelta, nestedModeId);\n\t\t\tthis.emit(offsetDelta, '');\n\t\t\treturn embeddedModeState;\n\t\t}\n\n\t\tlet nestedResult = nestedModeTokenizationSupport.tokenize2(embeddedModeLine, hasEOL, embeddedModeState, offsetDelta);\n\t\tthis._prependTokens = MonarchModernTokensCollector._merge(this._prependTokens, this._tokens, nestedResult.tokens);\n\t\tthis._tokens = [];\n\t\tthis._currentLanguageId = 0;\n\t\tthis._lastTokenMetadata = 0;\n\t\treturn nestedResult.endState;\n\t}\n\n\tpublic finalize(endState: MonarchLineState): TokenizationResult2 {\n\t\treturn new TokenizationResult2(\n\t\t\tMonarchModernTokensCollector._merge(this._prependTokens, this._tokens, null),\n\t\t\tendState\n\t\t);\n\t}\n}\n\nexport type ILoadStatus = { loaded: true; } | { loaded: false; promise: Promise<void>; };\n\nexport class MonarchTokenizer implements modes.ITokenizationSupport {\n\n\tprivate readonly _modeService: IModeService;\n\tprivate readonly _standaloneThemeService: IStandaloneThemeService;\n\tprivate readonly _modeId: string;\n\tprivate readonly _lexer: monarchCommon.ILexer;\n\tprivate readonly _embeddedModes: { [modeId: string]: boolean; };\n\tpublic embeddedLoaded: Promise<void>;\n\tprivate readonly _tokenizationRegistryListener: IDisposable;\n\n\tconstructor(modeService: IModeService, standaloneThemeService: IStandaloneThemeService, modeId: string, lexer: monarchCommon.ILexer) {\n\t\tthis._modeService = modeService;\n\t\tthis._standaloneThemeService = standaloneThemeService;\n\t\tthis._modeId = modeId;\n\t\tthis._lexer = lexer;\n\t\tthis._embeddedModes = Object.create(null);\n\t\tthis.embeddedLoaded = Promise.resolve(undefined);\n\n\t\t// Set up listening for embedded modes\n\t\tlet emitting = false;\n\t\tthis._tokenizationRegistryListener = modes.TokenizationRegistry.onDidChange((e) => {\n\t\t\tif (emitting) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlet isOneOfMyEmbeddedModes = false;\n\t\t\tfor (let i = 0, len = e.changedLanguages.length; i < len; i++) {\n\t\t\t\tlet language = e.changedLanguages[i];\n\t\t\t\tif (this._embeddedModes[language]) {\n\t\t\t\t\tisOneOfMyEmbeddedModes = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (isOneOfMyEmbeddedModes) {\n\t\t\t\temitting = true;\n\t\t\t\tmodes.TokenizationRegistry.fire([this._modeId]);\n\t\t\t\temitting = false;\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._tokenizationRegistryListener.dispose();\n\t}\n\n\tpublic getLoadStatus(): ILoadStatus {\n\t\tlet promises: Thenable<any>[] = [];\n\t\tfor (let nestedModeId in this._embeddedModes) {\n\t\t\tconst tokenizationSupport = modes.TokenizationRegistry.get(nestedModeId);\n\t\t\tif (tokenizationSupport) {\n\t\t\t\t// The nested mode is already loaded\n\t\t\t\tif (tokenizationSupport instanceof MonarchTokenizer) {\n\t\t\t\t\tconst nestedModeStatus = tokenizationSupport.getLoadStatus();\n\t\t\t\t\tif (nestedModeStatus.loaded === false) {\n\t\t\t\t\t\tpromises.push(nestedModeStatus.promise);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst tokenizationSupportPromise = modes.TokenizationRegistry.getPromise(nestedModeId);\n\t\t\tif (tokenizationSupportPromise) {\n\t\t\t\t// The nested mode is in the process of being loaded\n\t\t\t\tpromises.push(tokenizationSupportPromise);\n\t\t\t}\n\t\t}\n\n\t\tif (promises.length === 0) {\n\t\t\treturn {\n\t\t\t\tloaded: true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\tloaded: false,\n\t\t\tpromise: Promise.all(promises).then(_ => undefined)\n\t\t};\n\t}\n\n\tpublic getInitialState(): modes.IState {\n\t\tlet rootState = MonarchStackElementFactory.create(null, this._lexer.start!);\n\t\treturn MonarchLineStateFactory.create(rootState, null);\n\t}\n\n\tpublic tokenize(line: string, hasEOL: boolean, lineState: modes.IState, offsetDelta: number): TokenizationResult {\n\t\tlet tokensCollector = new MonarchClassicTokensCollector();\n\t\tlet endLineState = this._tokenize(line, hasEOL, <MonarchLineState>lineState, offsetDelta, tokensCollector);\n\t\treturn tokensCollector.finalize(endLineState);\n\t}\n\n\tpublic tokenize2(line: string, hasEOL: boolean, lineState: modes.IState, offsetDelta: number): TokenizationResult2 {\n\t\tlet tokensCollector = new MonarchModernTokensCollector(this._modeService, this._standaloneThemeService.getColorTheme().tokenTheme);\n\t\tlet endLineState = this._tokenize(line, hasEOL, <MonarchLineState>lineState, offsetDelta, tokensCollector);\n\t\treturn tokensCollector.finalize(endLineState);\n\t}\n\n\tprivate _tokenize(line: string, hasEOL: boolean, lineState: MonarchLineState, offsetDelta: number, collector: IMonarchTokensCollector): MonarchLineState {\n\t\tif (lineState.embeddedModeData) {\n\t\t\treturn this._nestedTokenize(line, hasEOL, lineState, offsetDelta, collector);\n\t\t} else {\n\t\t\treturn this._myTokenize(line, hasEOL, lineState, offsetDelta, collector);\n\t\t}\n\t}\n\n\tprivate _findLeavingNestedModeOffset(line: string, state: MonarchLineState): number {\n\t\tlet rules: monarchCommon.IRule[] | null = this._lexer.tokenizer[state.stack.state];\n\t\tif (!rules) {\n\t\t\trules = monarchCommon.findRules(this._lexer, state.stack.state); // do parent matching\n\t\t\tif (!rules) {\n\t\t\t\tthrow monarchCommon.createError(this._lexer, 'tokenizer state is not defined: ' + state.stack.state);\n\t\t\t}\n\t\t}\n\n\t\tlet popOffset = -1;\n\t\tlet hasEmbeddedPopRule = false;\n\n\t\tfor (const rule of rules) {\n\t\t\tif (!monarchCommon.isIAction(rule.action) || rule.action.nextEmbedded !== '@pop') {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\thasEmbeddedPopRule = true;\n\n\t\t\tlet regex = rule.regex;\n\t\t\tlet regexSource = rule.regex.source;\n\t\t\tif (regexSource.substr(0, 4) === '^(?:' && regexSource.substr(regexSource.length - 1, 1) === ')') {\n\t\t\t\tlet flags = (regex.ignoreCase ? 'i' : '') + (regex.unicode ? 'u' : '');\n\t\t\t\tregex = new RegExp(regexSource.substr(4, regexSource.length - 5), flags);\n\t\t\t}\n\n\t\t\tlet result = line.search(regex);\n\t\t\tif (result === -1 || (result !== 0 && rule.matchOnlyAtLineStart)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (popOffset === -1 || result < popOffset) {\n\t\t\t\tpopOffset = result;\n\t\t\t}\n\t\t}\n\n\t\tif (!hasEmbeddedPopRule) {\n\t\t\tthrow monarchCommon.createError(this._lexer, 'no rule containing nextEmbedded: \"@pop\" in tokenizer embedded state: ' + state.stack.state);\n\t\t}\n\n\t\treturn popOffset;\n\t}\n\n\tprivate _nestedTokenize(line: string, hasEOL: boolean, lineState: MonarchLineState, offsetDelta: number, tokensCollector: IMonarchTokensCollector): MonarchLineState {\n\n\t\tlet popOffset = this._findLeavingNestedModeOffset(line, lineState);\n\n\t\tif (popOffset === -1) {\n\t\t\t// tokenization will not leave nested mode\n\t\t\tlet nestedEndState = tokensCollector.nestedModeTokenize(line, hasEOL, lineState.embeddedModeData!, offsetDelta);\n\t\t\treturn MonarchLineStateFactory.create(lineState.stack, new EmbeddedModeData(lineState.embeddedModeData!.modeId, nestedEndState));\n\t\t}\n\n\t\tlet nestedModeLine = line.substring(0, popOffset);\n\t\tif (nestedModeLine.length > 0) {\n\t\t\t// tokenize with the nested mode\n\t\t\ttokensCollector.nestedModeTokenize(nestedModeLine, false, lineState.embeddedModeData!, offsetDelta);\n\t\t}\n\n\t\tlet restOfTheLine = line.substring(popOffset);\n\t\treturn this._myTokenize(restOfTheLine, hasEOL, lineState, offsetDelta + popOffset, tokensCollector);\n\t}\n\n\tprivate _safeRuleName(rule: monarchCommon.IRule | null): string {\n\t\tif (rule) {\n\t\t\treturn rule.name;\n\t\t}\n\t\treturn '(unknown)';\n\t}\n\n\tprivate _myTokenize(lineWithoutLF: string, hasEOL: boolean, lineState: MonarchLineState, offsetDelta: number, tokensCollector: IMonarchTokensCollector): MonarchLineState {\n\t\ttokensCollector.enterMode(offsetDelta, this._modeId);\n\n\t\tconst lineWithoutLFLength = lineWithoutLF.length;\n\t\tconst line = (hasEOL && this._lexer.includeLF ? lineWithoutLF + '\\n' : lineWithoutLF);\n\t\tconst lineLength = line.length;\n\n\t\tlet embeddedModeData = lineState.embeddedModeData;\n\t\tlet stack = lineState.stack;\n\t\tlet pos = 0;\n\n\t\t// regular expression group matching\n\t\t// these never need cloning or equality since they are only used within a line match\n\t\tinterface GroupMatching {\n\t\t\tmatches: string[];\n\t\t\trule: monarchCommon.IRule | null;\n\t\t\tgroups: { action: monarchCommon.FuzzyAction; matched: string; }[];\n\t\t}\n\t\tlet groupMatching: GroupMatching | null = null;\n\n\t\t// See https://github.com/microsoft/monaco-editor/issues/1235\n\t\t// Evaluate rules at least once for an empty line\n\t\tlet forceEvaluation = true;\n\n\t\twhile (forceEvaluation || pos < lineLength) {\n\n\t\t\tconst pos0 = pos;\n\t\t\tconst stackLen0 = stack.depth;\n\t\t\tconst groupLen0 = groupMatching ? groupMatching.groups.length : 0;\n\t\t\tconst state = stack.state;\n\n\t\t\tlet matches: string[] | null = null;\n\t\t\tlet matched: string | null = null;\n\t\t\tlet action: monarchCommon.FuzzyAction | monarchCommon.FuzzyAction[] | null = null;\n\t\t\tlet rule: monarchCommon.IRule | null = null;\n\n\t\t\tlet enteringEmbeddedMode: string | null = null;\n\n\t\t\t// check if we need to process group matches first\n\t\t\tif (groupMatching) {\n\t\t\t\tmatches = groupMatching.matches;\n\t\t\t\tconst groupEntry = groupMatching.groups.shift()!;\n\t\t\t\tmatched = groupEntry.matched;\n\t\t\t\taction = groupEntry.action;\n\t\t\t\trule = groupMatching.rule;\n\n\t\t\t\t// cleanup if necessary\n\t\t\t\tif (groupMatching.groups.length === 0) {\n\t\t\t\t\tgroupMatching = null;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// otherwise we match on the token stream\n\n\t\t\t\tif (!forceEvaluation && pos >= lineLength) {\n\t\t\t\t\t// nothing to do\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tforceEvaluation = false;\n\n\t\t\t\t// get the rules for this state\n\t\t\t\tlet rules: monarchCommon.IRule[] | null = this._lexer.tokenizer[state];\n\t\t\t\tif (!rules) {\n\t\t\t\t\trules = monarchCommon.findRules(this._lexer, state); // do parent matching\n\t\t\t\t\tif (!rules) {\n\t\t\t\t\t\tthrow monarchCommon.createError(this._lexer, 'tokenizer state is not defined: ' + state);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// try each rule until we match\n\t\t\t\tlet restOfLine = line.substr(pos);\n\t\t\t\tfor (const rule of rules) {\n\t\t\t\t\tif (pos === 0 || !rule.matchOnlyAtLineStart) {\n\t\t\t\t\t\tmatches = restOfLine.match(rule.regex);\n\t\t\t\t\t\tif (matches) {\n\t\t\t\t\t\t\tmatched = matches[0];\n\t\t\t\t\t\t\taction = rule.action;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// We matched 'rule' with 'matches' and 'action'\n\t\t\tif (!matches) {\n\t\t\t\tmatches = [''];\n\t\t\t\tmatched = '';\n\t\t\t}\n\n\t\t\tif (!action) {\n\t\t\t\t// bad: we didn't match anything, and there is no action to take\n\t\t\t\t// we need to advance the stream or we get progress trouble\n\t\t\t\tif (pos < lineLength) {\n\t\t\t\t\tmatches = [line.charAt(pos)];\n\t\t\t\t\tmatched = matches[0];\n\t\t\t\t}\n\t\t\t\taction = this._lexer.defaultToken;\n\t\t\t}\n\n\t\t\tif (matched === null) {\n\t\t\t\t// should never happen, needed for strict null checking\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// advance stream\n\t\t\tpos += matched.length;\n\n\t\t\t// maybe call action function (used for 'cases')\n\t\t\twhile (monarchCommon.isFuzzyAction(action) && monarchCommon.isIAction(action) && action.test) {\n\t\t\t\taction = action.test(matched, matches, state, pos === lineLength);\n\t\t\t}\n\n\t\t\tlet result: monarchCommon.FuzzyAction | monarchCommon.FuzzyAction[] | null = null;\n\t\t\t// set the result: either a string or an array of actions\n\t\t\tif (typeof action === 'string' || Array.isArray(action)) {\n\t\t\t\tresult = action;\n\t\t\t} else if (action.group) {\n\t\t\t\tresult = action.group;\n\t\t\t} else if (action.token !== null && action.token !== undefined) {\n\n\t\t\t\t// do $n replacements?\n\t\t\t\tif (action.tokenSubst) {\n\t\t\t\t\tresult = monarchCommon.substituteMatches(this._lexer, action.token, matched, matches, state);\n\t\t\t\t} else {\n\t\t\t\t\tresult = action.token;\n\t\t\t\t}\n\n\t\t\t\t// enter embedded mode?\n\t\t\t\tif (action.nextEmbedded) {\n\t\t\t\t\tif (action.nextEmbedded === '@pop') {\n\t\t\t\t\t\tif (!embeddedModeData) {\n\t\t\t\t\t\t\tthrow monarchCommon.createError(this._lexer, 'cannot pop embedded mode if not inside one');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tembeddedModeData = null;\n\t\t\t\t\t} else if (embeddedModeData) {\n\t\t\t\t\t\tthrow monarchCommon.createError(this._lexer, 'cannot enter embedded mode from within an embedded mode');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tenteringEmbeddedMode = monarchCommon.substituteMatches(this._lexer, action.nextEmbedded, matched, matches, state);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// state transformations\n\t\t\t\tif (action.goBack) { // back up the stream..\n\t\t\t\t\tpos = Math.max(0, pos - action.goBack);\n\t\t\t\t}\n\n\t\t\t\tif (action.switchTo && typeof action.switchTo === 'string') {\n\t\t\t\t\tlet nextState = monarchCommon.substituteMatches(this._lexer, action.switchTo, matched, matches, state);  // switch state without a push...\n\t\t\t\t\tif (nextState[0] === '@') {\n\t\t\t\t\t\tnextState = nextState.substr(1); // peel off starting '@'\n\t\t\t\t\t}\n\t\t\t\t\tif (!monarchCommon.findRules(this._lexer, nextState)) {\n\t\t\t\t\t\tthrow monarchCommon.createError(this._lexer, 'trying to switch to a state \\'' + nextState + '\\' that is undefined in rule: ' + this._safeRuleName(rule));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstack = stack.switchTo(nextState);\n\t\t\t\t\t}\n\t\t\t\t} else if (action.transform && typeof action.transform === 'function') {\n\t\t\t\t\tthrow monarchCommon.createError(this._lexer, 'action.transform not supported');\n\t\t\t\t} else if (action.next) {\n\t\t\t\t\tif (action.next === '@push') {\n\t\t\t\t\t\tif (stack.depth >= this._lexer.maxStack) {\n\t\t\t\t\t\t\tthrow monarchCommon.createError(this._lexer, 'maximum tokenizer stack size reached: [' +\n\t\t\t\t\t\t\t\tstack.state + ',' + stack.parent!.state + ',...]');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstack = stack.push(state);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (action.next === '@pop') {\n\t\t\t\t\t\tif (stack.depth <= 1) {\n\t\t\t\t\t\t\tthrow monarchCommon.createError(this._lexer, 'trying to pop an empty stack in rule: ' + this._safeRuleName(rule));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstack = stack.pop()!;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (action.next === '@popall') {\n\t\t\t\t\t\tstack = stack.popall();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlet nextState = monarchCommon.substituteMatches(this._lexer, action.next, matched, matches, state);\n\t\t\t\t\t\tif (nextState[0] === '@') {\n\t\t\t\t\t\t\tnextState = nextState.substr(1); // peel off starting '@'\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!monarchCommon.findRules(this._lexer, nextState)) {\n\t\t\t\t\t\t\tthrow monarchCommon.createError(this._lexer, 'trying to set a next state \\'' + nextState + '\\' that is undefined in rule: ' + this._safeRuleName(rule));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstack = stack.push(nextState);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (action.log && typeof (action.log) === 'string') {\n\t\t\t\t\tmonarchCommon.log(this._lexer, this._lexer.languageId + ': ' + monarchCommon.substituteMatches(this._lexer, action.log, matched, matches, state));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// check result\n\t\t\tif (result === null) {\n\t\t\t\tthrow monarchCommon.createError(this._lexer, 'lexer rule has no well-defined action in rule: ' + this._safeRuleName(rule));\n\t\t\t}\n\n\t\t\tconst computeNewStateForEmbeddedMode = (enteringEmbeddedMode: string) => {\n\t\t\t\t// substitute language alias to known modes to support syntax highlighting\n\t\t\t\tlet enteringEmbeddedModeId = this._modeService.getModeIdForLanguageName(enteringEmbeddedMode);\n\t\t\t\tif (enteringEmbeddedModeId) {\n\t\t\t\t\tenteringEmbeddedMode = enteringEmbeddedModeId;\n\t\t\t\t}\n\n\t\t\t\tconst embeddedModeData = this._getNestedEmbeddedModeData(enteringEmbeddedMode);\n\n\t\t\t\tif (pos < lineLength) {\n\t\t\t\t\t// there is content from the embedded mode on this line\n\t\t\t\t\tconst restOfLine = lineWithoutLF.substr(pos);\n\t\t\t\t\treturn this._nestedTokenize(restOfLine, hasEOL, MonarchLineStateFactory.create(stack, embeddedModeData), offsetDelta + pos, tokensCollector);\n\t\t\t\t} else {\n\t\t\t\t\treturn MonarchLineStateFactory.create(stack, embeddedModeData);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// is the result a group match?\n\t\t\tif (Array.isArray(result)) {\n\t\t\t\tif (groupMatching && groupMatching.groups.length > 0) {\n\t\t\t\t\tthrow monarchCommon.createError(this._lexer, 'groups cannot be nested: ' + this._safeRuleName(rule));\n\t\t\t\t}\n\t\t\t\tif (matches.length !== result.length + 1) {\n\t\t\t\t\tthrow monarchCommon.createError(this._lexer, 'matched number of groups does not match the number of actions in rule: ' + this._safeRuleName(rule));\n\t\t\t\t}\n\t\t\t\tlet totalLen = 0;\n\t\t\t\tfor (let i = 1; i < matches.length; i++) {\n\t\t\t\t\ttotalLen += matches[i].length;\n\t\t\t\t}\n\t\t\t\tif (totalLen !== matched.length) {\n\t\t\t\t\tthrow monarchCommon.createError(this._lexer, 'with groups, all characters should be matched in consecutive groups in rule: ' + this._safeRuleName(rule));\n\t\t\t\t}\n\n\t\t\t\tgroupMatching = {\n\t\t\t\t\trule: rule,\n\t\t\t\t\tmatches: matches,\n\t\t\t\t\tgroups: []\n\t\t\t\t};\n\t\t\t\tfor (let i = 0; i < result.length; i++) {\n\t\t\t\t\tgroupMatching.groups[i] = {\n\t\t\t\t\t\taction: result[i],\n\t\t\t\t\t\tmatched: matches[i + 1]\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tpos -= matched.length;\n\t\t\t\t// call recursively to initiate first result match\n\t\t\t\tcontinue;\n\t\t\t} else {\n\t\t\t\t// regular result\n\n\t\t\t\t// check for '@rematch'\n\t\t\t\tif (result === '@rematch') {\n\t\t\t\t\tpos -= matched.length;\n\t\t\t\t\tmatched = '';  // better set the next state too..\n\t\t\t\t\tmatches = null;\n\t\t\t\t\tresult = '';\n\n\t\t\t\t\t// Even though `@rematch` was specified, if `nextEmbedded` also specified,\n\t\t\t\t\t// a state transition should occur.\n\t\t\t\t\tif (enteringEmbeddedMode !== null) {\n\t\t\t\t\t\treturn computeNewStateForEmbeddedMode(enteringEmbeddedMode);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// check progress\n\t\t\t\tif (matched.length === 0) {\n\t\t\t\t\tif (lineLength === 0 || stackLen0 !== stack.depth || state !== stack.state || (!groupMatching ? 0 : groupMatching.groups.length) !== groupLen0) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow monarchCommon.createError(this._lexer, 'no progress in tokenizer in rule: ' + this._safeRuleName(rule));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// return the result (and check for brace matching)\n\t\t\t\t// todo: for efficiency we could pre-sanitize tokenPostfix and substitutions\n\t\t\t\tlet tokenType: string | null = null;\n\t\t\t\tif (monarchCommon.isString(result) && result.indexOf('@brackets') === 0) {\n\t\t\t\t\tlet rest = result.substr('@brackets'.length);\n\t\t\t\t\tlet bracket = findBracket(this._lexer, matched);\n\t\t\t\t\tif (!bracket) {\n\t\t\t\t\t\tthrow monarchCommon.createError(this._lexer, '@brackets token returned but no bracket defined as: ' + matched);\n\t\t\t\t\t}\n\t\t\t\t\ttokenType = monarchCommon.sanitize(bracket.token + rest);\n\t\t\t\t} else {\n\t\t\t\t\tlet token = (result === '' ? '' : result + this._lexer.tokenPostfix);\n\t\t\t\t\ttokenType = monarchCommon.sanitize(token);\n\t\t\t\t}\n\n\t\t\t\tif (pos0 < lineWithoutLFLength) {\n\t\t\t\t\ttokensCollector.emit(pos0 + offsetDelta, tokenType);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (enteringEmbeddedMode !== null) {\n\t\t\t\treturn computeNewStateForEmbeddedMode(enteringEmbeddedMode);\n\t\t\t}\n\t\t}\n\n\t\treturn MonarchLineStateFactory.create(stack, embeddedModeData);\n\t}\n\n\tprivate _getNestedEmbeddedModeData(mimetypeOrModeId: string): EmbeddedModeData {\n\t\tlet nestedModeId = this._locateMode(mimetypeOrModeId);\n\t\tif (nestedModeId) {\n\t\t\tlet tokenizationSupport = modes.TokenizationRegistry.get(nestedModeId);\n\t\t\tif (tokenizationSupport) {\n\t\t\t\treturn new EmbeddedModeData(nestedModeId, tokenizationSupport.getInitialState());\n\t\t\t}\n\t\t}\n\n\t\treturn new EmbeddedModeData(nestedModeId || NULL_MODE_ID, NULL_STATE);\n\t}\n\n\tprivate _locateMode(mimetypeOrModeId: string): string | null {\n\t\tif (!mimetypeOrModeId || !this._modeService.isRegisteredMode(mimetypeOrModeId)) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (mimetypeOrModeId === this._modeId) {\n\t\t\t// embedding myself...\n\t\t\treturn mimetypeOrModeId;\n\t\t}\n\n\t\tlet modeId = this._modeService.getModeId(mimetypeOrModeId);\n\n\t\tif (modeId) {\n\t\t\t// Fire mode loading event\n\t\t\tthis._modeService.triggerMode(modeId);\n\t\t\tthis._embeddedModes[modeId] = true;\n\t\t}\n\n\t\treturn modeId;\n\t}\n\n}\n\n/**\n * Searches for a bracket in the 'brackets' attribute that matches the input.\n */\nfunction findBracket(lexer: monarchCommon.ILexer, matched: string) {\n\tif (!matched) {\n\t\treturn null;\n\t}\n\tmatched = monarchCommon.fixCase(lexer, matched);\n\n\tlet brackets = lexer.brackets;\n\tfor (const bracket of brackets) {\n\t\tif (bracket.open === matched) {\n\t\t\treturn { token: bracket.token, bracketType: monarchCommon.MonarchBracket.Open };\n\t\t}\n\t\telse if (bracket.close === matched) {\n\t\t\treturn { token: bracket.token, bracketType: monarchCommon.MonarchBracket.Close };\n\t\t}\n\t}\n\treturn null;\n}\n\nexport function createTokenizationSupport(modeService: IModeService, standaloneThemeService: IStandaloneThemeService, modeId: string, lexer: monarchCommon.ILexer): modes.ITokenizationSupport {\n\treturn new MonarchTokenizer(modeService, standaloneThemeService, modeId, lexer);\n}\n"]}