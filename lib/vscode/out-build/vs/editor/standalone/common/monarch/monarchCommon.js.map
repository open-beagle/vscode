{"version":3,"file":"monarchCommon.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/standalone/common/monarch/monarchCommon.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAEhG;;;;OAIG;IAEH;;;OAGG;IAEH,IAAkB,cAIjB;IAJD,WAAkB,cAAc;QAC/B,mDAAQ,CAAA;QACR,mDAAQ,CAAA;QACR,sDAAU,CAAA;IACX,CAAC,EAJiB,cAAc,GAAd,sBAAc,KAAd,sBAAc,QAI/B;IAiCD,SAAgB,gBAAgB,CAAC,IAAiC;QACjE,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;IAC9B,CAAC;IAFD,4CAEC;IAED,SAAgB,aAAa,CAAC,IAAiC;QAC9D,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;IAFD,sCAEC;IAED,SAAgB,QAAQ,CAAC,IAAiB;QACzC,OAAO,CAAC,OAAO,IAAI,KAAK,QAAQ,CAAC,CAAC;IACnC,CAAC;IAFD,4BAEC;IAED,SAAgB,SAAS,CAAC,IAAiB;QAC1C,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IACxB,CAAC;IAFD,8BAEC;IAkCD,yBAAyB;IAEzB;;OAEG;IACH,SAAgB,KAAK,CAAC,CAAS;QAC9B,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IAC3B,CAAC;IAFD,sBAEC;IAED;;OAEG;IACH,SAAgB,OAAO,CAAC,KAAgB,EAAE,GAAW;QACpD,OAAO,CAAC,KAAK,CAAC,UAAU,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC5D,CAAC;IAFD,0BAEC;IAED;;OAEG;IACH,SAAgB,QAAQ,CAAC,CAAS;QACjC,OAAO,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,CAAC,uCAAuC;IAC5E,CAAC;IAFD,4BAEC;IAED,UAAU;IAEV;;OAEG;IACH,SAAgB,GAAG,CAAC,KAAgB,EAAE,GAAW;QAChD,OAAO,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,UAAU,KAAK,GAAG,EAAE,CAAC,CAAC;IAC5C,CAAC;IAFD,kBAEC;IAED,kBAAkB;IAElB,SAAgB,WAAW,CAAC,KAAgB,EAAE,GAAW;QACxD,OAAO,IAAI,KAAK,CAAC,GAAG,KAAK,CAAC,UAAU,KAAK,GAAG,EAAE,CAAC,CAAC;IACjD,CAAC;IAFD,kCAEC;IAED,qDAAqD;IAErD;;;;;;;;OAQG;IACH,SAAgB,iBAAiB,CAAC,KAAgB,EAAE,GAAW,EAAE,EAAU,EAAE,OAAiB,EAAE,KAAa;QAC5G,MAAM,EAAE,GAAG,0CAA0C,CAAC;QACtD,IAAI,YAAY,GAAoB,IAAI,CAAC;QACzC,OAAO,GAAG,CAAC,OAAO,CAAC,EAAE,EAAE,UAAU,IAAI,EAAE,GAAI,EAAE,MAAO,EAAE,IAAK,EAAE,CAAE,EAAE,CAAE,EAAE,IAAK,EAAE,GAAI,EAAE,KAAM;YACvF,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE;gBACnB,OAAO,GAAG,CAAC,CAAC,KAAK;aACjB;YACD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;gBACjB,OAAO,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAG,aAAa;aAC1C;YACD,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE;gBACpC,OAAO,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK;aACxC;YACD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,KAAK,IAAI,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,KAAK,QAAQ,EAAE;gBAC/D,OAAO,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,YAAY;aAChC;YACD,IAAI,YAAY,KAAK,IAAI,EAAE,EAAE,wBAAwB;gBACpD,YAAY,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBAChC,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;aAC5B;YACD,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,YAAY,CAAC,MAAM,EAAE;gBACzC,OAAO,OAAO,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK;aAC7C;YACD,OAAO,EAAE,CAAC;QACX,CAAC,CAAC,CAAC;IACJ,CAAC;IAzBD,8CAyBC;IAED;;OAEG;IACH,SAAgB,SAAS,CAAC,KAAa,EAAE,OAAe;QACvD,IAAI,KAAK,GAAkB,OAAO,CAAC;QACnC,OAAO,KAAK,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;YACjC,MAAM,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YACrC,IAAI,KAAK,EAAE;gBACV,OAAO,KAAK,CAAC;aACb;YAED,MAAM,GAAG,GAAG,KAAK,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YACnC,IAAI,GAAG,GAAG,CAAC,EAAE;gBACZ,KAAK,GAAG,IAAI,CAAC,CAAC,oBAAoB;aAClC;iBAAM;gBACN,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;aAC7B;SACD;QACD,OAAO,IAAI,CAAC;IACb,CAAC;IAhBD,8BAgBC;IAED;;;;OAIG;IACH,SAAgB,WAAW,CAAC,KAAgB,EAAE,OAAe;QAC5D,IAAI,KAAK,GAAkB,OAAO,CAAC;QACnC,OAAO,KAAK,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;YACjC,MAAM,KAAK,GAAG,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;YACtC,IAAI,KAAK,EAAE;gBACV,OAAO,IAAI,CAAC;aACZ;YAED,MAAM,GAAG,GAAG,KAAK,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YACnC,IAAI,GAAG,GAAG,CAAC,EAAE;gBACZ,KAAK,GAAG,IAAI,CAAC,CAAC,oBAAoB;aAClC;iBAAM;gBACN,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;aAC7B;SACD;QACD,OAAO,KAAK,CAAC;IACd,CAAC;IAhBD,kCAgBC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/*\n * This module exports common types and functionality shared between\n * the Monarch compiler that compiles JSON to ILexer, and the Monarch\n * Tokenizer (that highlights at runtime)\n */\n\n/*\n * Type definitions to be used internally to Monarch.\n * Inside monarch we use fully typed definitions and compiled versions of the more abstract JSON descriptions.\n */\n\nexport const enum MonarchBracket {\n\tNone = 0,\n\tOpen = 1,\n\tClose = -1\n}\n\nexport interface ILexerMin {\n\tlanguageId: string;\n\tincludeLF: boolean;\n\tnoThrow: boolean;\n\tignoreCase: boolean;\n\tunicode: boolean;\n\tusesEmbedded: boolean;\n\tdefaultToken: string;\n\tstateNames: { [stateName: string]: any; };\n\t[attr: string]: any;\n}\n\nexport interface ILexer extends ILexerMin {\n\tmaxStack: number;\n\tstart: string | null;\n\tignoreCase: boolean;\n\tunicode: boolean;\n\ttokenPostfix: string;\n\n\ttokenizer: { [stateName: string]: IRule[]; };\n\tbrackets: IBracket[];\n}\n\nexport interface IBracket {\n\ttoken: string;\n\topen: string;\n\tclose: string;\n}\n\nexport type FuzzyAction = IAction | string;\n\nexport function isFuzzyActionArr(what: FuzzyAction | FuzzyAction[]): what is FuzzyAction[] {\n\treturn (Array.isArray(what));\n}\n\nexport function isFuzzyAction(what: FuzzyAction | FuzzyAction[]): what is FuzzyAction {\n\treturn !isFuzzyActionArr(what);\n}\n\nexport function isString(what: FuzzyAction): what is string {\n\treturn (typeof what === 'string');\n}\n\nexport function isIAction(what: FuzzyAction): what is IAction {\n\treturn !isString(what);\n}\n\nexport interface IRule {\n\tregex: RegExp;\n\taction: FuzzyAction;\n\tmatchOnlyAtLineStart: boolean;\n\tname: string;\n}\n\nexport interface IAction {\n\t// an action is either a group of actions\n\tgroup?: FuzzyAction[];\n\n\t// or a function that returns a fresh action\n\ttest?: (id: string, matches: string[], state: string, eos: boolean) => FuzzyAction;\n\n\t// or it is a declarative action with a token value and various other attributes\n\ttoken?: string;\n\ttokenSubst?: boolean;\n\tnext?: string;\n\tnextEmbedded?: string;\n\tbracket?: MonarchBracket;\n\tlog?: string;\n\tswitchTo?: string;\n\tgoBack?: number;\n\ttransform?: (states: string[]) => string[];\n}\n\nexport interface IBranch {\n\tname: string;\n\tvalue: FuzzyAction;\n\ttest?: (id: string, matches: string[], state: string, eos: boolean) => boolean;\n}\n\n// Small helper functions\n\n/**\n * Is a string null, undefined, or empty?\n */\nexport function empty(s: string): boolean {\n\treturn (s ? false : true);\n}\n\n/**\n * Puts a string to lower case if 'ignoreCase' is set.\n */\nexport function fixCase(lexer: ILexerMin, str: string): string {\n\treturn (lexer.ignoreCase && str ? str.toLowerCase() : str);\n}\n\n/**\n * Ensures there are no bad characters in a CSS token class.\n */\nexport function sanitize(s: string) {\n\treturn s.replace(/[&<>'\"_]/g, '-'); // used on all output token CSS classes\n}\n\n// Logging\n\n/**\n * Logs a message.\n */\nexport function log(lexer: ILexerMin, msg: string) {\n\tconsole.log(`${lexer.languageId}: ${msg}`);\n}\n\n// Throwing errors\n\nexport function createError(lexer: ILexerMin, msg: string): Error {\n\treturn new Error(`${lexer.languageId}: ${msg}`);\n}\n\n// Helper functions for rule finding and substitution\n\n/**\n * substituteMatches is used on lexer strings and can substitutes predefined patterns:\n * \t\t$$  => $\n * \t\t$#  => id\n * \t\t$n  => matched entry n\n * \t\t@attr => contents of lexer[attr]\n *\n * See documentation for more info\n */\nexport function substituteMatches(lexer: ILexerMin, str: string, id: string, matches: string[], state: string): string {\n\tconst re = /\\$((\\$)|(#)|(\\d\\d?)|[sS](\\d\\d?)|@(\\w+))/g;\n\tlet stateMatches: string[] | null = null;\n\treturn str.replace(re, function (full, sub?, dollar?, hash?, n?, s?, attr?, ofs?, total?) {\n\t\tif (!empty(dollar)) {\n\t\t\treturn '$'; // $$\n\t\t}\n\t\tif (!empty(hash)) {\n\t\t\treturn fixCase(lexer, id);   // default $#\n\t\t}\n\t\tif (!empty(n) && n < matches.length) {\n\t\t\treturn fixCase(lexer, matches[n]); // $n\n\t\t}\n\t\tif (!empty(attr) && lexer && typeof (lexer[attr]) === 'string') {\n\t\t\treturn lexer[attr]; //@attribute\n\t\t}\n\t\tif (stateMatches === null) { // split state on demand\n\t\t\tstateMatches = state.split('.');\n\t\t\tstateMatches.unshift(state);\n\t\t}\n\t\tif (!empty(s) && s < stateMatches.length) {\n\t\t\treturn fixCase(lexer, stateMatches[s]); //$Sn\n\t\t}\n\t\treturn '';\n\t});\n}\n\n/**\n * Find the tokenizer rules for a specific state (i.e. next action)\n */\nexport function findRules(lexer: ILexer, inState: string): IRule[] | null {\n\tlet state: string | null = inState;\n\twhile (state && state.length > 0) {\n\t\tconst rules = lexer.tokenizer[state];\n\t\tif (rules) {\n\t\t\treturn rules;\n\t\t}\n\n\t\tconst idx = state.lastIndexOf('.');\n\t\tif (idx < 0) {\n\t\t\tstate = null; // no further parent\n\t\t} else {\n\t\t\tstate = state.substr(0, idx);\n\t\t}\n\t}\n\treturn null;\n}\n\n/**\n * Is a certain state defined? In contrast to 'findRules' this works on a ILexerMin.\n * This is used during compilation where we may know the defined states\n * but not yet whether the corresponding rules are correct.\n */\nexport function stateExists(lexer: ILexerMin, inState: string): boolean {\n\tlet state: string | null = inState;\n\twhile (state && state.length > 0) {\n\t\tconst exist = lexer.stateNames[state];\n\t\tif (exist) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst idx = state.lastIndexOf('.');\n\t\tif (idx < 0) {\n\t\t\tstate = null; // no further parent\n\t\t} else {\n\t\t\tstate = state.substr(0, idx);\n\t\t}\n\t}\n\treturn false;\n}\n"]}