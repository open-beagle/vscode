{"version":3,"file":"standaloneCodeEditor.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/standalone/browser/standaloneCodeEditor.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as aria from 'vs/base/browser/ui/aria/aria';\nimport { Disposable, IDisposable, toDisposable, DisposableStore } from 'vs/base/common/lifecycle';\nimport { ICodeEditor, IDiffEditor, IEditorConstructionOptions } from 'vs/editor/browser/editorBrowser';\nimport { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';\nimport { CodeEditorWidget } from 'vs/editor/browser/widget/codeEditorWidget';\nimport { DiffEditorWidget } from 'vs/editor/browser/widget/diffEditorWidget';\nimport { IDiffEditorOptions, IEditorOptions } from 'vs/editor/common/config/editorOptions';\nimport { InternalEditorAction } from 'vs/editor/common/editorAction';\nimport { IModelChangedEvent } from 'vs/editor/common/editorCommon';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { IEditorWorkerService } from 'vs/editor/common/services/editorWorkerService';\nimport { StandaloneKeybindingService, updateConfigurationService } from 'vs/editor/standalone/browser/simpleServices';\nimport { IStandaloneThemeService } from 'vs/editor/standalone/common/standaloneThemeService';\nimport { IMenuItem, MenuId, MenuRegistry } from 'vs/platform/actions/common/actions';\nimport { CommandsRegistry, ICommandHandler, ICommandService } from 'vs/platform/commands/common/commands';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ContextKeyExpr, IContextKey, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { IContextViewService, IContextMenuService } from 'vs/platform/contextview/browser/contextView';\nimport { ContextViewService } from 'vs/platform/contextview/browser/contextViewService';\nimport { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { IAccessibilityService } from 'vs/platform/accessibility/common/accessibility';\nimport { StandaloneCodeEditorNLS } from 'vs/editor/common/standaloneStrings';\nimport { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';\nimport { IEditorProgressService } from 'vs/platform/progress/common/progress';\nimport { StandaloneThemeServiceImpl } from 'vs/editor/standalone/browser/standaloneThemeServiceImpl';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { ILanguageSelection, IModeService } from 'vs/editor/common/services/modeService';\nimport { URI } from 'vs/base/common/uri';\n\n/**\n * Description of an action contribution\n */\nexport interface IActionDescriptor {\n\t/**\n\t * An unique identifier of the contributed action.\n\t */\n\tid: string;\n\t/**\n\t * A label of the action that will be presented to the user.\n\t */\n\tlabel: string;\n\t/**\n\t * Precondition rule.\n\t */\n\tprecondition?: string;\n\t/**\n\t * An array of keybindings for the action.\n\t */\n\tkeybindings?: number[];\n\t/**\n\t * The keybinding rule (condition on top of precondition).\n\t */\n\tkeybindingContext?: string;\n\t/**\n\t * Control if the action should show up in the context menu and where.\n\t * The context menu of the editor has these default:\n\t *   navigation - The navigation group comes first in all cases.\n\t *   1_modification - This group comes next and contains commands that modify your code.\n\t *   9_cutcopypaste - The last default group with the basic editing commands.\n\t * You can also create your own group.\n\t * Defaults to null (don't show in context menu).\n\t */\n\tcontextMenuGroupId?: string;\n\t/**\n\t * Control the order in the context menu group.\n\t */\n\tcontextMenuOrder?: number;\n\t/**\n\t * Method that will be executed when the action is triggered.\n\t * @param editor The editor instance is passed in as a convenience\n\t */\n\trun(editor: ICodeEditor, ...args: any[]): void | Promise<void>;\n}\n\n/**\n * Options which apply for all editors.\n */\nexport interface IGlobalEditorOptions {\n\t/**\n\t * The number of spaces a tab is equal to.\n\t * This setting is overridden based on the file contents when `detectIndentation` is on.\n\t * Defaults to 4.\n\t */\n\ttabSize?: number;\n\t/**\n\t * Insert spaces when pressing `Tab`.\n\t * This setting is overridden based on the file contents when `detectIndentation` is on.\n\t * Defaults to true.\n\t */\n\tinsertSpaces?: boolean;\n\t/**\n\t * Controls whether `tabSize` and `insertSpaces` will be automatically detected when a file is opened based on the file contents.\n\t * Defaults to true.\n\t */\n\tdetectIndentation?: boolean;\n\t/**\n\t * Remove trailing auto inserted whitespace.\n\t * Defaults to true.\n\t */\n\ttrimAutoWhitespace?: boolean;\n\t/**\n\t * Special handling for large files to disable certain memory intensive features.\n\t * Defaults to true.\n\t */\n\tlargeFileOptimizations?: boolean;\n\t/**\n\t * Controls whether completions should be computed based on words in the document.\n\t * Defaults to true.\n\t */\n\twordBasedSuggestions?: boolean;\n\t/**\n\t * Controls whether word based completions should be included from opened documents of the same language or any language.\n\t */\n\twordBasedSuggestionsOnlySameLanguage?: boolean;\n\t/**\n\t * Controls whether the semanticHighlighting is shown for the languages that support it.\n\t * true: semanticHighlighting is enabled for all themes\n\t * false: semanticHighlighting is disabled for all themes\n\t * 'configuredByTheme': semanticHighlighting is controlled by the current color theme's semanticHighlighting setting.\n\t * Defaults to 'byTheme'.\n\t */\n\t'semanticHighlighting.enabled'?: true | false | 'configuredByTheme';\n\t/**\n\t * Keep peek editors open even when double clicking their content or when hitting `Escape`.\n\t * Defaults to false.\n\t */\n\tstablePeek?: boolean;\n\t/**\n\t * Lines above this length will not be tokenized for performance reasons.\n\t * Defaults to 20000.\n\t */\n\tmaxTokenizationLineLength?: number;\n\t/**\n\t * Theme to be used for rendering.\n\t * The current out-of-the-box available themes are: 'vs' (default), 'vs-dark', 'hc-black'.\n\t * You can create custom themes via `monaco.editor.defineTheme`.\n\t * To switch a theme, use `monaco.editor.setTheme`.\n\t * **NOTE**: The theme might be overwritten if the OS is in high contrast mode, unless `autoDetectHighContrast` is set to false.\n\t */\n\ttheme?: string;\n\t/**\n\t * If enabled, will automatically change to high contrast theme if the OS is using a high contrast theme.\n\t * Defaults to true.\n\t */\n\tautoDetectHighContrast?: boolean;\n}\n\n/**\n * The options to create an editor.\n */\nexport interface IStandaloneEditorConstructionOptions extends IEditorConstructionOptions, IGlobalEditorOptions {\n\t/**\n\t * The initial model associated with this code editor.\n\t */\n\tmodel?: ITextModel | null;\n\t/**\n\t * The initial value of the auto created model in the editor.\n\t * To not create automatically a model, use `model: null`.\n\t */\n\tvalue?: string;\n\t/**\n\t * The initial language of the auto created model in the editor.\n\t * To not create automatically a model, use `model: null`.\n\t */\n\tlanguage?: string;\n\t/**\n\t * Initial theme to be used for rendering.\n\t * The current out-of-the-box available themes are: 'vs' (default), 'vs-dark', 'hc-black'.\n\t * You can create custom themes via `monaco.editor.defineTheme`.\n\t * To switch a theme, use `monaco.editor.setTheme`.\n\t * **NOTE**: The theme might be overwritten if the OS is in high contrast mode, unless `autoDetectHighContrast` is set to false.\n\t */\n\ttheme?: string;\n\t/**\n\t * If enabled, will automatically change to high contrast theme if the OS is using a high contrast theme.\n\t * Defaults to true.\n\t */\n\tautoDetectHighContrast?: boolean;\n\t/**\n\t * An URL to open when Ctrl+H (Windows and Linux) or Cmd+H (OSX) is pressed in\n\t * the accessibility help dialog in the editor.\n\t *\n\t * Defaults to \"https://go.microsoft.com/fwlink/?linkid=852450\"\n\t */\n\taccessibilityHelpUrl?: string;\n}\n\n/**\n * The options to create a diff editor.\n */\nexport interface IDiffEditorConstructionOptions extends IDiffEditorOptions {\n\t/**\n\t * Initial theme to be used for rendering.\n\t * The current out-of-the-box available themes are: 'vs' (default), 'vs-dark', 'hc-black'.\n\t * You can create custom themes via `monaco.editor.defineTheme`.\n\t * To switch a theme, use `monaco.editor.setTheme`.\n\t * **NOTE**: The theme might be overwritten if the OS is in high contrast mode, unless `autoDetectHighContrast` is set to false.\n\t */\n\ttheme?: string;\n\t/**\n\t * If enabled, will automatically change to high contrast theme if the OS is using a high contrast theme.\n\t * Defaults to true.\n\t */\n\tautoDetectHighContrast?: boolean;\n}\n\nexport interface IStandaloneCodeEditor extends ICodeEditor {\n\tupdateOptions(newOptions: IEditorOptions & IGlobalEditorOptions): void;\n\taddCommand(keybinding: number, handler: ICommandHandler, context?: string): string | null;\n\tcreateContextKey<T>(key: string, defaultValue: T): IContextKey<T>;\n\taddAction(descriptor: IActionDescriptor): IDisposable;\n}\n\nexport interface IStandaloneDiffEditor extends IDiffEditor {\n\taddCommand(keybinding: number, handler: ICommandHandler, context?: string): string | null;\n\tcreateContextKey<T>(key: string, defaultValue: T): IContextKey<T>;\n\taddAction(descriptor: IActionDescriptor): IDisposable;\n\n\tgetOriginalEditor(): IStandaloneCodeEditor;\n\tgetModifiedEditor(): IStandaloneCodeEditor;\n}\n\nlet LAST_GENERATED_COMMAND_ID = 0;\n\nlet ariaDomNodeCreated = false;\nfunction createAriaDomNode() {\n\tif (ariaDomNodeCreated) {\n\t\treturn;\n\t}\n\tariaDomNodeCreated = true;\n\taria.setARIAContainer(document.body);\n}\n\n/**\n * A code editor to be used both by the standalone editor and the standalone diff editor.\n */\nexport class StandaloneCodeEditor extends CodeEditorWidget implements IStandaloneCodeEditor {\n\n\tprivate readonly _standaloneKeybindingService: StandaloneKeybindingService | null;\n\n\tconstructor(\n\t\tdomElement: HTMLElement,\n\t\t_options: Readonly<IStandaloneEditorConstructionOptions>,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@ICodeEditorService codeEditorService: ICodeEditorService,\n\t\t@ICommandService commandService: ICommandService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@IAccessibilityService accessibilityService: IAccessibilityService\n\t) {\n\t\tconst options = { ..._options };\n\t\toptions.ariaLabel = options.ariaLabel || StandaloneCodeEditorNLS.editorViewAccessibleLabel;\n\t\toptions.ariaLabel = options.ariaLabel + ';' + (StandaloneCodeEditorNLS.accessibilityHelpMessage);\n\t\tsuper(domElement, options, {}, instantiationService, codeEditorService, commandService, contextKeyService, themeService, notificationService, accessibilityService);\n\n\t\tif (keybindingService instanceof StandaloneKeybindingService) {\n\t\t\tthis._standaloneKeybindingService = keybindingService;\n\t\t} else {\n\t\t\tthis._standaloneKeybindingService = null;\n\t\t}\n\n\t\t// Create the ARIA dom node as soon as the first editor is instantiated\n\t\tcreateAriaDomNode();\n\t}\n\n\tpublic addCommand(keybinding: number, handler: ICommandHandler, context?: string): string | null {\n\t\tif (!this._standaloneKeybindingService) {\n\t\t\tconsole.warn('Cannot add command because the editor is configured with an unrecognized KeybindingService');\n\t\t\treturn null;\n\t\t}\n\t\tlet commandId = 'DYNAMIC_' + (++LAST_GENERATED_COMMAND_ID);\n\t\tlet whenExpression = ContextKeyExpr.deserialize(context);\n\t\tthis._standaloneKeybindingService.addDynamicKeybinding(commandId, keybinding, handler, whenExpression);\n\t\treturn commandId;\n\t}\n\n\tpublic createContextKey<T>(key: string, defaultValue: T): IContextKey<T> {\n\t\treturn this._contextKeyService.createKey(key, defaultValue);\n\t}\n\n\tpublic addAction(_descriptor: IActionDescriptor): IDisposable {\n\t\tif ((typeof _descriptor.id !== 'string') || (typeof _descriptor.label !== 'string') || (typeof _descriptor.run !== 'function')) {\n\t\t\tthrow new Error('Invalid action descriptor, `id`, `label` and `run` are required properties!');\n\t\t}\n\t\tif (!this._standaloneKeybindingService) {\n\t\t\tconsole.warn('Cannot add keybinding because the editor is configured with an unrecognized KeybindingService');\n\t\t\treturn Disposable.None;\n\t\t}\n\n\t\t// Read descriptor options\n\t\tconst id = _descriptor.id;\n\t\tconst label = _descriptor.label;\n\t\tconst precondition = ContextKeyExpr.and(\n\t\t\tContextKeyExpr.equals('editorId', this.getId()),\n\t\t\tContextKeyExpr.deserialize(_descriptor.precondition)\n\t\t);\n\t\tconst keybindings = _descriptor.keybindings;\n\t\tconst keybindingsWhen = ContextKeyExpr.and(\n\t\t\tprecondition,\n\t\t\tContextKeyExpr.deserialize(_descriptor.keybindingContext)\n\t\t);\n\t\tconst contextMenuGroupId = _descriptor.contextMenuGroupId || null;\n\t\tconst contextMenuOrder = _descriptor.contextMenuOrder || 0;\n\t\tconst run = (accessor?: ServicesAccessor, ...args: any[]): Promise<void> => {\n\t\t\treturn Promise.resolve(_descriptor.run(this, ...args));\n\t\t};\n\n\n\t\tconst toDispose = new DisposableStore();\n\n\t\t// Generate a unique id to allow the same descriptor.id across multiple editor instances\n\t\tconst uniqueId = this.getId() + ':' + id;\n\n\t\t// Register the command\n\t\ttoDispose.add(CommandsRegistry.registerCommand(uniqueId, run));\n\n\t\t// Register the context menu item\n\t\tif (contextMenuGroupId) {\n\t\t\tlet menuItem: IMenuItem = {\n\t\t\t\tcommand: {\n\t\t\t\t\tid: uniqueId,\n\t\t\t\t\ttitle: label\n\t\t\t\t},\n\t\t\t\twhen: precondition,\n\t\t\t\tgroup: contextMenuGroupId,\n\t\t\t\torder: contextMenuOrder\n\t\t\t};\n\t\t\ttoDispose.add(MenuRegistry.appendMenuItem(MenuId.EditorContext, menuItem));\n\t\t}\n\n\t\t// Register the keybindings\n\t\tif (Array.isArray(keybindings)) {\n\t\t\tfor (const kb of keybindings) {\n\t\t\t\ttoDispose.add(this._standaloneKeybindingService.addDynamicKeybinding(uniqueId, kb, run, keybindingsWhen));\n\t\t\t}\n\t\t}\n\n\t\t// Finally, register an internal editor action\n\t\tlet internalAction = new InternalEditorAction(\n\t\t\tuniqueId,\n\t\t\tlabel,\n\t\t\tlabel,\n\t\t\tprecondition,\n\t\t\trun,\n\t\t\tthis._contextKeyService\n\t\t);\n\n\t\t// Store it under the original id, such that trigger with the original id will work\n\t\tthis._actions[id] = internalAction;\n\t\ttoDispose.add(toDisposable(() => {\n\t\t\tdelete this._actions[id];\n\t\t}));\n\n\t\treturn toDispose;\n\t}\n}\n\nexport class StandaloneEditor extends StandaloneCodeEditor implements IStandaloneCodeEditor {\n\n\tprivate readonly _contextViewService: ContextViewService;\n\tprivate readonly _configurationService: IConfigurationService;\n\tprivate readonly _standaloneThemeService: IStandaloneThemeService;\n\tprivate _ownsModel: boolean;\n\n\tconstructor(\n\t\tdomElement: HTMLElement,\n\t\t_options: Readonly<IStandaloneEditorConstructionOptions> | undefined,\n\t\ttoDispose: IDisposable,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@ICodeEditorService codeEditorService: ICodeEditorService,\n\t\t@ICommandService commandService: ICommandService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IContextViewService contextViewService: IContextViewService,\n\t\t@IStandaloneThemeService themeService: IStandaloneThemeService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IAccessibilityService accessibilityService: IAccessibilityService,\n\t\t@IModelService modelService: IModelService,\n\t\t@IModeService modeService: IModeService,\n\t) {\n\t\tconst options = { ..._options };\n\t\tupdateConfigurationService(configurationService, options, false);\n\t\tconst themeDomRegistration = (<StandaloneThemeServiceImpl>themeService).registerEditorContainer(domElement);\n\t\tif (typeof options.theme === 'string') {\n\t\t\tthemeService.setTheme(options.theme);\n\t\t}\n\t\tif (typeof options.autoDetectHighContrast !== 'undefined') {\n\t\t\tthemeService.setAutoDetectHighContrast(Boolean(options.autoDetectHighContrast));\n\t\t}\n\t\tlet _model: ITextModel | null | undefined = options.model;\n\t\tdelete options.model;\n\t\tsuper(domElement, options, instantiationService, codeEditorService, commandService, contextKeyService, keybindingService, themeService, notificationService, accessibilityService);\n\n\t\tthis._contextViewService = <ContextViewService>contextViewService;\n\t\tthis._configurationService = configurationService;\n\t\tthis._standaloneThemeService = themeService;\n\t\tthis._register(toDispose);\n\t\tthis._register(themeDomRegistration);\n\n\t\tlet model: ITextModel | null;\n\t\tif (typeof _model === 'undefined') {\n\t\t\tmodel = createTextModel(modelService, modeService, options.value || '', options.language || 'text/plain', undefined);\n\t\t\tthis._ownsModel = true;\n\t\t} else {\n\t\t\tmodel = _model;\n\t\t\tthis._ownsModel = false;\n\t\t}\n\n\t\tthis._attachModel(model);\n\t\tif (model) {\n\t\t\tlet e: IModelChangedEvent = {\n\t\t\t\toldModelUrl: null,\n\t\t\t\tnewModelUrl: model.uri\n\t\t\t};\n\t\t\tthis._onDidChangeModel.fire(e);\n\t\t}\n\t}\n\n\tpublic override dispose(): void {\n\t\tsuper.dispose();\n\t}\n\n\tpublic override updateOptions(newOptions: Readonly<IEditorOptions & IGlobalEditorOptions>): void {\n\t\tupdateConfigurationService(this._configurationService, newOptions, false);\n\t\tif (typeof newOptions.theme === 'string') {\n\t\t\tthis._standaloneThemeService.setTheme(newOptions.theme);\n\t\t}\n\t\tif (typeof newOptions.autoDetectHighContrast !== 'undefined') {\n\t\t\tthis._standaloneThemeService.setAutoDetectHighContrast(Boolean(newOptions.autoDetectHighContrast));\n\t\t}\n\t\tsuper.updateOptions(newOptions);\n\t}\n\n\toverride _attachModel(model: ITextModel | null): void {\n\t\tsuper._attachModel(model);\n\t\tif (this._modelData) {\n\t\t\tthis._contextViewService.setContainer(this._modelData.view.domNode.domNode);\n\t\t}\n\t}\n\n\toverride _postDetachModelCleanup(detachedModel: ITextModel): void {\n\t\tsuper._postDetachModelCleanup(detachedModel);\n\t\tif (detachedModel && this._ownsModel) {\n\t\t\tdetachedModel.dispose();\n\t\t\tthis._ownsModel = false;\n\t\t}\n\t}\n}\n\nexport class StandaloneDiffEditor extends DiffEditorWidget implements IStandaloneDiffEditor {\n\n\tprivate readonly _contextViewService: ContextViewService;\n\tprivate readonly _configurationService: IConfigurationService;\n\tprivate readonly _standaloneThemeService: IStandaloneThemeService;\n\n\tconstructor(\n\t\tdomElement: HTMLElement,\n\t\t_options: Readonly<IDiffEditorConstructionOptions> | undefined,\n\t\ttoDispose: IDisposable,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IContextViewService contextViewService: IContextViewService,\n\t\t@IEditorWorkerService editorWorkerService: IEditorWorkerService,\n\t\t@ICodeEditorService codeEditorService: ICodeEditorService,\n\t\t@IStandaloneThemeService themeService: IStandaloneThemeService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t@IEditorProgressService editorProgressService: IEditorProgressService,\n\t\t@IClipboardService clipboardService: IClipboardService,\n\t) {\n\t\tconst options = { ..._options };\n\t\tupdateConfigurationService(configurationService, options, true);\n\t\tconst themeDomRegistration = (<StandaloneThemeServiceImpl>themeService).registerEditorContainer(domElement);\n\t\tif (typeof options.theme === 'string') {\n\t\t\tthemeService.setTheme(options.theme);\n\t\t}\n\t\tif (typeof options.autoDetectHighContrast !== 'undefined') {\n\t\t\tthemeService.setAutoDetectHighContrast(Boolean(options.autoDetectHighContrast));\n\t\t}\n\n\t\tsuper(domElement, options, {}, clipboardService, editorWorkerService, contextKeyService, instantiationService, codeEditorService, themeService, notificationService, contextMenuService, editorProgressService);\n\n\t\tthis._contextViewService = <ContextViewService>contextViewService;\n\t\tthis._configurationService = configurationService;\n\t\tthis._standaloneThemeService = themeService;\n\n\t\tthis._register(toDispose);\n\t\tthis._register(themeDomRegistration);\n\n\t\tthis._contextViewService.setContainer(this._containerDomElement);\n\t}\n\n\tpublic override dispose(): void {\n\t\tsuper.dispose();\n\t}\n\n\tpublic override updateOptions(newOptions: Readonly<IDiffEditorOptions & IGlobalEditorOptions>): void {\n\t\tupdateConfigurationService(this._configurationService, newOptions, true);\n\t\tif (typeof newOptions.theme === 'string') {\n\t\t\tthis._standaloneThemeService.setTheme(newOptions.theme);\n\t\t}\n\t\tif (typeof newOptions.autoDetectHighContrast !== 'undefined') {\n\t\t\tthis._standaloneThemeService.setAutoDetectHighContrast(Boolean(newOptions.autoDetectHighContrast));\n\t\t}\n\t\tsuper.updateOptions(newOptions);\n\t}\n\n\tprotected override _createInnerEditor(instantiationService: IInstantiationService, container: HTMLElement, options: Readonly<IEditorOptions>): CodeEditorWidget {\n\t\treturn instantiationService.createInstance(StandaloneCodeEditor, container, options);\n\t}\n\n\tpublic override getOriginalEditor(): IStandaloneCodeEditor {\n\t\treturn <StandaloneCodeEditor>super.getOriginalEditor();\n\t}\n\n\tpublic override getModifiedEditor(): IStandaloneCodeEditor {\n\t\treturn <StandaloneCodeEditor>super.getModifiedEditor();\n\t}\n\n\tpublic addCommand(keybinding: number, handler: ICommandHandler, context?: string): string | null {\n\t\treturn this.getModifiedEditor().addCommand(keybinding, handler, context);\n\t}\n\n\tpublic createContextKey<T>(key: string, defaultValue: T): IContextKey<T> {\n\t\treturn this.getModifiedEditor().createContextKey(key, defaultValue);\n\t}\n\n\tpublic addAction(descriptor: IActionDescriptor): IDisposable {\n\t\treturn this.getModifiedEditor().addAction(descriptor);\n\t}\n}\n\n/**\n * @internal\n */\nexport function createTextModel(modelService: IModelService, modeService: IModeService, value: string, language: string | undefined, uri: URI | undefined): ITextModel {\n\tvalue = value || '';\n\tif (!language) {\n\t\tconst firstLF = value.indexOf('\\n');\n\t\tlet firstLine = value;\n\t\tif (firstLF !== -1) {\n\t\t\tfirstLine = value.substring(0, firstLF);\n\t\t}\n\t\treturn doCreateModel(modelService, value, modeService.createByFilepathOrFirstLine(uri || null, firstLine), uri);\n\t}\n\treturn doCreateModel(modelService, value, modeService.create(language), uri);\n}\n\n/**\n * @internal\n */\nfunction doCreateModel(modelService: IModelService, value: string, languageSelection: ILanguageSelection, uri: URI | undefined): ITextModel {\n\treturn modelService.createModel(value, languageSelection, uri);\n}\n"]}