{"version":3,"file":"standaloneServices.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/standalone/browser/standaloneServices.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IBulkEditService } from 'vs/editor/browser/services/bulkEditService';\nimport { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';\nimport { IEditorWorkerService } from 'vs/editor/common/services/editorWorkerService';\nimport { EditorWorkerServiceImpl } from 'vs/editor/common/services/editorWorkerServiceImpl';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { ModeServiceImpl } from 'vs/editor/common/services/modeServiceImpl';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { ModelServiceImpl } from 'vs/editor/common/services/modelServiceImpl';\nimport { ITextResourceConfigurationService, ITextResourcePropertiesService } from 'vs/editor/common/services/textResourceConfigurationService';\nimport { SimpleBulkEditService, SimpleConfigurationService, SimpleDialogService, SimpleNotificationService, SimpleEditorProgressService, SimpleResourceConfigurationService, SimpleResourcePropertiesService, SimpleUriLabelService, SimpleWorkspaceContextService, StandaloneCommandService, StandaloneKeybindingService, StandaloneTelemetryService, SimpleLayoutService } from 'vs/editor/standalone/browser/simpleServices';\nimport { StandaloneCodeEditorServiceImpl } from 'vs/editor/standalone/browser/standaloneCodeServiceImpl';\nimport { StandaloneThemeServiceImpl } from 'vs/editor/standalone/browser/standaloneThemeServiceImpl';\nimport { IStandaloneThemeService } from 'vs/editor/standalone/common/standaloneThemeService';\nimport { IMenuService } from 'vs/platform/actions/common/actions';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ContextKeyService } from 'vs/platform/contextkey/browser/contextKeyService';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { ContextMenuService } from 'vs/platform/contextview/browser/contextMenuService';\nimport { IContextMenuService, IContextViewService } from 'vs/platform/contextview/browser/contextView';\nimport { ContextViewService } from 'vs/platform/contextview/browser/contextViewService';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { IInstantiationService, ServiceIdentifier, createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { InstantiationService } from 'vs/platform/instantiation/common/instantiationService';\nimport { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { ILabelService } from 'vs/platform/label/common/label';\nimport { IListService, ListService } from 'vs/platform/list/browser/listService';\nimport { ConsoleLogger, ILogService, LogService } from 'vs/platform/log/common/log';\nimport { MarkerService } from 'vs/platform/markers/common/markerService';\nimport { IMarkerService } from 'vs/platform/markers/common/markers';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { IEditorProgressService } from 'vs/platform/progress/common/progress';\nimport { IStorageService, InMemoryStorageService } from 'vs/platform/storage/common/storage';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { MenuService } from 'vs/platform/actions/common/menuService';\nimport { IMarkerDecorationsService } from 'vs/editor/common/services/markersDecorationService';\nimport { MarkerDecorationsService } from 'vs/editor/common/services/markerDecorationsServiceImpl';\nimport { IAccessibilityService } from 'vs/platform/accessibility/common/accessibility';\nimport { ILayoutService } from 'vs/platform/layout/browser/layoutService';\nimport { getSingletonServiceDescriptors } from 'vs/platform/instantiation/common/extensions';\nimport { AccessibilityService } from 'vs/platform/accessibility/common/accessibilityService';\nimport { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';\nimport { BrowserClipboardService } from 'vs/platform/clipboard/browser/clipboardService';\nimport { IUndoRedoService } from 'vs/platform/undoRedo/common/undoRedo';\nimport { UndoRedoService } from 'vs/platform/undoRedo/common/undoRedoService';\nimport { StandaloneQuickInputServiceImpl } from 'vs/editor/standalone/browser/quickInput/standaloneQuickInputServiceImpl';\nimport { IQuickInputService } from 'vs/platform/quickinput/common/quickInput';\n\nexport interface IEditorOverrideServices {\n\t[index: string]: any;\n}\n\nexport module StaticServices {\n\n\tconst _serviceCollection = new ServiceCollection();\n\n\texport class LazyStaticService<T> {\n\t\tprivate readonly _serviceId: ServiceIdentifier<T>;\n\t\tprivate readonly _factory: (overrides?: IEditorOverrideServices) => T;\n\t\tprivate _value: T | null;\n\n\t\tpublic get id() { return this._serviceId; }\n\n\t\tconstructor(serviceId: ServiceIdentifier<T>, factory: (overrides?: IEditorOverrideServices) => T) {\n\t\t\tthis._serviceId = serviceId;\n\t\t\tthis._factory = factory;\n\t\t\tthis._value = null;\n\t\t}\n\n\t\tpublic get(overrides?: IEditorOverrideServices): T {\n\t\t\tif (!this._value) {\n\t\t\t\tif (overrides) {\n\t\t\t\t\tthis._value = overrides[this._serviceId.toString()];\n\t\t\t\t}\n\t\t\t\tif (!this._value) {\n\t\t\t\t\tthis._value = this._factory(overrides);\n\t\t\t\t}\n\t\t\t\tif (!this._value) {\n\t\t\t\t\tthrow new Error('Service ' + this._serviceId + ' is missing!');\n\t\t\t\t}\n\t\t\t\t_serviceCollection.set(this._serviceId, this._value);\n\t\t\t}\n\t\t\treturn this._value;\n\t\t}\n\t}\n\n\tlet _all: LazyStaticService<any>[] = [];\n\n\tfunction define<T>(serviceId: ServiceIdentifier<T>, factory: (overrides: IEditorOverrideServices | undefined) => T): LazyStaticService<T> {\n\t\tlet r = new LazyStaticService(serviceId, factory);\n\t\t_all.push(r);\n\t\treturn r;\n\t}\n\n\texport function init(overrides: IEditorOverrideServices): [ServiceCollection, IInstantiationService] {\n\t\t// Create a fresh service collection\n\t\tlet result = new ServiceCollection();\n\n\t\t// make sure to add all services that use `registerSingleton`\n\t\tfor (const [id, descriptor] of getSingletonServiceDescriptors()) {\n\t\t\tresult.set(id, descriptor);\n\t\t}\n\n\t\t// Initialize the service collection with the overrides\n\t\tfor (let serviceId in overrides) {\n\t\t\tif (overrides.hasOwnProperty(serviceId)) {\n\t\t\t\tresult.set(createDecorator(serviceId), overrides[serviceId]);\n\t\t\t}\n\t\t}\n\n\t\t// Make sure the same static services are present in all service collections\n\t\t_all.forEach(service => result.set(service.id, service.get(overrides)));\n\n\t\t// Ensure the collection gets the correct instantiation service\n\t\tlet instantiationService = new InstantiationService(result, true);\n\t\tresult.set(IInstantiationService, instantiationService);\n\n\t\treturn [result, instantiationService];\n\t}\n\n\texport const instantiationService = define<IInstantiationService>(IInstantiationService, () => new InstantiationService(_serviceCollection, true));\n\n\tconst configurationServiceImpl = new SimpleConfigurationService();\n\texport const configurationService = define(IConfigurationService, () => configurationServiceImpl);\n\n\texport const resourceConfigurationService = define(ITextResourceConfigurationService, () => new SimpleResourceConfigurationService(configurationServiceImpl));\n\n\texport const resourcePropertiesService = define(ITextResourcePropertiesService, () => new SimpleResourcePropertiesService(configurationServiceImpl));\n\n\texport const contextService = define(IWorkspaceContextService, () => new SimpleWorkspaceContextService());\n\n\texport const labelService = define(ILabelService, () => new SimpleUriLabelService());\n\n\texport const telemetryService = define(ITelemetryService, () => new StandaloneTelemetryService());\n\n\texport const dialogService = define(IDialogService, () => new SimpleDialogService());\n\n\texport const notificationService = define(INotificationService, () => new SimpleNotificationService());\n\n\texport const markerService = define(IMarkerService, () => new MarkerService());\n\n\texport const modeService = define(IModeService, (o) => new ModeServiceImpl());\n\n\texport const standaloneThemeService = define(IStandaloneThemeService, () => new StandaloneThemeServiceImpl());\n\n\texport const logService = define(ILogService, () => new LogService(new ConsoleLogger()));\n\n\texport const undoRedoService = define(IUndoRedoService, (o) => new UndoRedoService(dialogService.get(o), notificationService.get(o)));\n\n\texport const modelService = define(IModelService, (o) => new ModelServiceImpl(configurationService.get(o), resourcePropertiesService.get(o), standaloneThemeService.get(o), logService.get(o), undoRedoService.get(o)));\n\n\texport const markerDecorationsService = define(IMarkerDecorationsService, (o) => new MarkerDecorationsService(modelService.get(o), markerService.get(o)));\n\n\texport const contextKeyService = define(IContextKeyService, (o) => new ContextKeyService(configurationService.get(o)));\n\n\texport const codeEditorService = define(ICodeEditorService, (o) => new StandaloneCodeEditorServiceImpl(null, contextKeyService.get(o), standaloneThemeService.get(o)));\n\n\texport const editorProgressService = define(IEditorProgressService, () => new SimpleEditorProgressService());\n\n\texport const storageService = define(IStorageService, () => new InMemoryStorageService());\n\n\texport const editorWorkerService = define(IEditorWorkerService, (o) => new EditorWorkerServiceImpl(modelService.get(o), resourceConfigurationService.get(o), logService.get(o)));\n}\n\nexport class DynamicStandaloneServices extends Disposable {\n\n\tprivate readonly _serviceCollection: ServiceCollection;\n\tprivate readonly _instantiationService: IInstantiationService;\n\n\tconstructor(domElement: HTMLElement, overrides: IEditorOverrideServices) {\n\t\tsuper();\n\n\t\tconst [_serviceCollection, _instantiationService] = StaticServices.init(overrides);\n\t\tthis._serviceCollection = _serviceCollection;\n\t\tthis._instantiationService = _instantiationService;\n\n\t\tconst configurationService = this.get(IConfigurationService);\n\t\tconst notificationService = this.get(INotificationService);\n\t\tconst telemetryService = this.get(ITelemetryService);\n\t\tconst themeService = this.get(IThemeService);\n\t\tconst logService = this.get(ILogService);\n\t\tconst contextKeyService = this.get(IContextKeyService);\n\n\t\tlet ensure = <T>(serviceId: ServiceIdentifier<T>, factory: () => T): T => {\n\t\t\tlet value: T | null = null;\n\t\t\tif (overrides) {\n\t\t\t\tvalue = overrides[serviceId.toString()];\n\t\t\t}\n\t\t\tif (!value) {\n\t\t\t\tvalue = factory();\n\t\t\t}\n\t\t\tthis._serviceCollection.set(serviceId, value);\n\t\t\treturn value;\n\t\t};\n\n\t\tensure(IAccessibilityService, () => new AccessibilityService(contextKeyService, configurationService));\n\n\t\tensure(IListService, () => new ListService(themeService));\n\n\t\tlet commandService = ensure(ICommandService, () => new StandaloneCommandService(this._instantiationService));\n\n\t\tlet keybindingService = ensure(IKeybindingService, () => this._register(new StandaloneKeybindingService(contextKeyService, commandService, telemetryService, notificationService, logService, domElement)));\n\n\t\tlet layoutService = ensure(ILayoutService, () => new SimpleLayoutService(StaticServices.codeEditorService.get(ICodeEditorService), domElement));\n\n\t\tensure(IQuickInputService, () => new StandaloneQuickInputServiceImpl(_instantiationService, StaticServices.codeEditorService.get(ICodeEditorService)));\n\n\t\tlet contextViewService = ensure(IContextViewService, () => this._register(new ContextViewService(layoutService)));\n\n\t\tensure(IClipboardService, () => new BrowserClipboardService());\n\n\t\tensure(IContextMenuService, () => {\n\t\t\tconst contextMenuService = new ContextMenuService(telemetryService, notificationService, contextViewService, keybindingService, themeService);\n\t\t\tcontextMenuService.configure({ blockMouse: false }); // we do not want that in the standalone editor\n\n\t\t\treturn this._register(contextMenuService);\n\t\t});\n\n\t\tensure(IMenuService, () => new MenuService(commandService));\n\n\t\tensure(IBulkEditService, () => new SimpleBulkEditService(StaticServices.modelService.get(IModelService)));\n\t}\n\n\tpublic get<T>(serviceId: ServiceIdentifier<T>): T {\n\t\tlet r = <T>this._serviceCollection.get(serviceId);\n\t\tif (!r) {\n\t\t\tthrow new Error('Missing service ' + serviceId);\n\t\t}\n\t\treturn r;\n\t}\n\n\tpublic set<T>(serviceId: ServiceIdentifier<T>, instance: T): void {\n\t\tthis._serviceCollection.set(serviceId, instance);\n\t}\n\n\tpublic has<T>(serviceId: ServiceIdentifier<T>): boolean {\n\t\treturn this._serviceCollection.has(serviceId);\n\t}\n}\n"]}