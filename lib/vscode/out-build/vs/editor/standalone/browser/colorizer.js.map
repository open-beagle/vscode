{"version":3,"file":"colorizer.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/standalone/browser/colorizer.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { TimeoutTimer } from 'vs/base/common/async';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport * as strings from 'vs/base/common/strings';\nimport { IViewLineTokens, LineTokens } from 'vs/editor/common/core/lineTokens';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { ColorId, FontStyle, ITokenizationSupport, MetadataConsts, TokenizationRegistry } from 'vs/editor/common/modes';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { RenderLineInput, renderViewLine2 as renderViewLine } from 'vs/editor/common/viewLayout/viewLineRenderer';\nimport { ViewLineRenderingData } from 'vs/editor/common/viewModel/viewModel';\nimport { IStandaloneThemeService } from 'vs/editor/standalone/common/standaloneThemeService';\nimport { MonarchTokenizer } from 'vs/editor/standalone/common/monarch/monarchLexer';\n\nconst ttPolicy = window.trustedTypes?.createPolicy('standaloneColorizer', { createHTML: value => value });\n\nexport interface IColorizerOptions {\n\ttabSize?: number;\n}\n\nexport interface IColorizerElementOptions extends IColorizerOptions {\n\ttheme?: string;\n\tmimeType?: string;\n}\n\nexport class Colorizer {\n\n\tpublic static colorizeElement(themeService: IStandaloneThemeService, modeService: IModeService, domNode: HTMLElement, options: IColorizerElementOptions): Promise<void> {\n\t\toptions = options || {};\n\t\tlet theme = options.theme || 'vs';\n\t\tlet mimeType = options.mimeType || domNode.getAttribute('lang') || domNode.getAttribute('data-lang');\n\t\tif (!mimeType) {\n\t\t\tconsole.error('Mode not detected');\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tthemeService.setTheme(theme);\n\n\t\tlet text = domNode.firstChild ? domNode.firstChild.nodeValue : '';\n\t\tdomNode.className += ' ' + theme;\n\t\tlet render = (str: string) => {\n\t\t\tconst trustedhtml = ttPolicy?.createHTML(str) ?? str;\n\t\t\tdomNode.innerHTML = trustedhtml as string;\n\t\t};\n\t\treturn this.colorize(modeService, text || '', mimeType, options).then(render, (err) => console.error(err));\n\t}\n\n\tpublic static colorize(modeService: IModeService, text: string, mimeType: string, options: IColorizerOptions | null | undefined): Promise<string> {\n\t\tlet tabSize = 4;\n\t\tif (options && typeof options.tabSize === 'number') {\n\t\t\ttabSize = options.tabSize;\n\t\t}\n\n\t\tif (strings.startsWithUTF8BOM(text)) {\n\t\t\ttext = text.substr(1);\n\t\t}\n\t\tlet lines = strings.splitLines(text);\n\t\tlet language = modeService.getModeId(mimeType);\n\t\tif (!language) {\n\t\t\treturn Promise.resolve(_fakeColorize(lines, tabSize));\n\t\t}\n\n\t\t// Send out the event to create the mode\n\t\tmodeService.triggerMode(language);\n\n\t\tconst tokenizationSupport = TokenizationRegistry.get(language);\n\t\tif (tokenizationSupport) {\n\t\t\treturn _colorize(lines, tabSize, tokenizationSupport);\n\t\t}\n\n\t\tconst tokenizationSupportPromise = TokenizationRegistry.getPromise(language);\n\t\tif (tokenizationSupportPromise) {\n\t\t\t// A tokenizer will be registered soon\n\t\t\treturn new Promise<string>((resolve, reject) => {\n\t\t\t\ttokenizationSupportPromise.then(tokenizationSupport => {\n\t\t\t\t\t_colorize(lines, tabSize, tokenizationSupport).then(resolve, reject);\n\t\t\t\t}, reject);\n\t\t\t});\n\t\t}\n\n\t\treturn new Promise<string>((resolve, reject) => {\n\t\t\tlet listener: IDisposable | null = null;\n\t\t\tlet timeout: TimeoutTimer | null = null;\n\n\t\t\tconst execute = () => {\n\t\t\t\tif (listener) {\n\t\t\t\t\tlistener.dispose();\n\t\t\t\t\tlistener = null;\n\t\t\t\t}\n\t\t\t\tif (timeout) {\n\t\t\t\t\ttimeout.dispose();\n\t\t\t\t\ttimeout = null;\n\t\t\t\t}\n\t\t\t\tconst tokenizationSupport = TokenizationRegistry.get(language!);\n\t\t\t\tif (tokenizationSupport) {\n\t\t\t\t\t_colorize(lines, tabSize, tokenizationSupport).then(resolve, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tresolve(_fakeColorize(lines, tabSize));\n\t\t\t};\n\n\t\t\t// wait 500ms for mode to load, then give up\n\t\t\ttimeout = new TimeoutTimer();\n\t\t\ttimeout.cancelAndSet(execute, 500);\n\t\t\tlistener = TokenizationRegistry.onDidChange((e) => {\n\t\t\t\tif (e.changedLanguages.indexOf(language!) >= 0) {\n\t\t\t\t\texecute();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic static colorizeLine(line: string, mightContainNonBasicASCII: boolean, mightContainRTL: boolean, tokens: IViewLineTokens, tabSize: number = 4): string {\n\t\tconst isBasicASCII = ViewLineRenderingData.isBasicASCII(line, mightContainNonBasicASCII);\n\t\tconst containsRTL = ViewLineRenderingData.containsRTL(line, isBasicASCII, mightContainRTL);\n\t\tlet renderResult = renderViewLine(new RenderLineInput(\n\t\t\tfalse,\n\t\t\ttrue,\n\t\t\tline,\n\t\t\tfalse,\n\t\t\tisBasicASCII,\n\t\t\tcontainsRTL,\n\t\t\t0,\n\t\t\ttokens,\n\t\t\t[],\n\t\t\ttabSize,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t-1,\n\t\t\t'none',\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\tnull\n\t\t));\n\t\treturn renderResult.html;\n\t}\n\n\tpublic static colorizeModelLine(model: ITextModel, lineNumber: number, tabSize: number = 4): string {\n\t\tlet content = model.getLineContent(lineNumber);\n\t\tmodel.forceTokenization(lineNumber);\n\t\tlet tokens = model.getLineTokens(lineNumber);\n\t\tlet inflatedTokens = tokens.inflate();\n\t\treturn this.colorizeLine(content, model.mightContainNonBasicASCII(), model.mightContainRTL(), inflatedTokens, tabSize);\n\t}\n}\n\nfunction _colorize(lines: string[], tabSize: number, tokenizationSupport: ITokenizationSupport): Promise<string> {\n\treturn new Promise<string>((c, e) => {\n\t\tconst execute = () => {\n\t\t\tconst result = _actualColorize(lines, tabSize, tokenizationSupport);\n\t\t\tif (tokenizationSupport instanceof MonarchTokenizer) {\n\t\t\t\tconst status = tokenizationSupport.getLoadStatus();\n\t\t\t\tif (status.loaded === false) {\n\t\t\t\t\tstatus.promise.then(execute, e);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tc(result);\n\t\t};\n\t\texecute();\n\t});\n}\n\nfunction _fakeColorize(lines: string[], tabSize: number): string {\n\tlet html: string[] = [];\n\n\tconst defaultMetadata = (\n\t\t(FontStyle.None << MetadataConsts.FONT_STYLE_OFFSET)\n\t\t| (ColorId.DefaultForeground << MetadataConsts.FOREGROUND_OFFSET)\n\t\t| (ColorId.DefaultBackground << MetadataConsts.BACKGROUND_OFFSET)\n\t) >>> 0;\n\n\tconst tokens = new Uint32Array(2);\n\ttokens[0] = 0;\n\ttokens[1] = defaultMetadata;\n\n\tfor (let i = 0, length = lines.length; i < length; i++) {\n\t\tlet line = lines[i];\n\n\t\ttokens[0] = line.length;\n\t\tconst lineTokens = new LineTokens(tokens, line);\n\n\t\tconst isBasicASCII = ViewLineRenderingData.isBasicASCII(line, /* check for basic ASCII */true);\n\t\tconst containsRTL = ViewLineRenderingData.containsRTL(line, isBasicASCII, /* check for RTL */true);\n\t\tlet renderResult = renderViewLine(new RenderLineInput(\n\t\t\tfalse,\n\t\t\ttrue,\n\t\t\tline,\n\t\t\tfalse,\n\t\t\tisBasicASCII,\n\t\t\tcontainsRTL,\n\t\t\t0,\n\t\t\tlineTokens,\n\t\t\t[],\n\t\t\ttabSize,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t-1,\n\t\t\t'none',\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\tnull\n\t\t));\n\n\t\thtml = html.concat(renderResult.html);\n\t\thtml.push('<br/>');\n\t}\n\n\treturn html.join('');\n}\n\nfunction _actualColorize(lines: string[], tabSize: number, tokenizationSupport: ITokenizationSupport): string {\n\tlet html: string[] = [];\n\tlet state = tokenizationSupport.getInitialState();\n\n\tfor (let i = 0, length = lines.length; i < length; i++) {\n\t\tlet line = lines[i];\n\t\tlet tokenizeResult = tokenizationSupport.tokenize2(line, true, state, 0);\n\t\tLineTokens.convertToEndOffset(tokenizeResult.tokens, line.length);\n\t\tlet lineTokens = new LineTokens(tokenizeResult.tokens, line);\n\t\tconst isBasicASCII = ViewLineRenderingData.isBasicASCII(line, /* check for basic ASCII */true);\n\t\tconst containsRTL = ViewLineRenderingData.containsRTL(line, isBasicASCII, /* check for RTL */true);\n\t\tlet renderResult = renderViewLine(new RenderLineInput(\n\t\t\tfalse,\n\t\t\ttrue,\n\t\t\tline,\n\t\t\tfalse,\n\t\t\tisBasicASCII,\n\t\t\tcontainsRTL,\n\t\t\t0,\n\t\t\tlineTokens.inflate(),\n\t\t\t[],\n\t\t\ttabSize,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t-1,\n\t\t\t'none',\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\tnull\n\t\t));\n\n\t\thtml = html.concat(renderResult.html);\n\t\thtml.push('<br/>');\n\n\t\tstate = tokenizeResult.endState;\n\t}\n\n\treturn html.join('');\n}\n"]}