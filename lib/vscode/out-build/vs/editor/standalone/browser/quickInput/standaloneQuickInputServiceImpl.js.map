{"version":3,"file":"standaloneQuickInputServiceImpl.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/standalone/browser/quickInput/standaloneQuickInputServiceImpl.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./standaloneQuickInput';\nimport { ICodeEditor, IOverlayWidget, IOverlayWidgetPosition, OverlayWidgetPositionPreference } from 'vs/editor/browser/editorBrowser';\nimport { registerEditorContribution } from 'vs/editor/browser/editorExtensions';\nimport { IEditorContribution } from 'vs/editor/common/editorCommon';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { IQuickInputService, IQuickInputButton, IQuickPickItem, IQuickPick, IInputBox, IQuickNavigateConfiguration, IPickOptions, QuickPickInput, IInputOptions } from 'vs/platform/quickinput/common/quickInput';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { IAccessibilityService } from 'vs/platform/accessibility/common/accessibility';\nimport { ILayoutService } from 'vs/platform/layout/browser/layoutService';\nimport { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';\nimport { QuickInputController } from 'vs/base/parts/quickinput/browser/quickInput';\nimport { QuickInputService, IQuickInputControllerHost } from 'vs/platform/quickinput/browser/quickInput';\nimport { once } from 'vs/base/common/functional';\nimport { IQuickAccessController } from 'vs/platform/quickinput/common/quickAccess';\n\nexport class EditorScopedQuickInputServiceImpl extends QuickInputService {\n\n\tprivate host: IQuickInputControllerHost | undefined = undefined;\n\n\tconstructor(\n\t\teditor: ICodeEditor,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IAccessibilityService accessibilityService: IAccessibilityService,\n\t\t@ILayoutService layoutService: ILayoutService\n\t) {\n\t\tsuper(instantiationService, contextKeyService, themeService, accessibilityService, layoutService);\n\n\t\t// Use the passed in code editor as host for the quick input widget\n\t\tconst contribution = QuickInputEditorContribution.get(editor);\n\t\tthis.host = {\n\t\t\t_serviceBrand: undefined,\n\t\t\tget container() { return contribution.widget.getDomNode(); },\n\t\t\tget dimension() { return editor.getLayoutInfo(); },\n\t\t\tget onDidLayout() { return editor.onDidLayoutChange; },\n\t\t\tfocus: () => editor.focus()\n\t\t};\n\t}\n\n\tprotected override createController(): QuickInputController {\n\t\treturn super.createController(this.host);\n\t}\n}\n\nexport class StandaloneQuickInputServiceImpl implements IQuickInputService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate mapEditorToService = new Map<ICodeEditor, EditorScopedQuickInputServiceImpl>();\n\tprivate get activeService(): IQuickInputService {\n\t\tconst editor = this.codeEditorService.getFocusedCodeEditor();\n\t\tif (!editor) {\n\t\t\tthrow new Error('Quick input service needs a focused editor to work.');\n\t\t}\n\n\t\t// Find the quick input implementation for the focused\n\t\t// editor or create it lazily if not yet created\n\t\tlet quickInputService = this.mapEditorToService.get(editor);\n\t\tif (!quickInputService) {\n\t\t\tconst newQuickInputService = quickInputService = this.instantiationService.createInstance(EditorScopedQuickInputServiceImpl, editor);\n\t\t\tthis.mapEditorToService.set(editor, quickInputService);\n\n\t\t\tonce(editor.onDidDispose)(() => {\n\t\t\t\tnewQuickInputService.dispose();\n\t\t\t\tthis.mapEditorToService.delete(editor);\n\t\t\t});\n\t\t}\n\n\t\treturn quickInputService;\n\t}\n\n\tget quickAccess(): IQuickAccessController { return this.activeService.quickAccess; }\n\n\tget backButton(): IQuickInputButton { return this.activeService.backButton; }\n\n\tget onShow() { return this.activeService.onShow; }\n\tget onHide() { return this.activeService.onHide; }\n\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ICodeEditorService private readonly codeEditorService: ICodeEditorService\n\t) {\n\t}\n\n\tpick<T extends IQuickPickItem, O extends IPickOptions<T>>(picks: Promise<QuickPickInput<T>[]> | QuickPickInput<T>[], options: O = <O>{}, token: CancellationToken = CancellationToken.None): Promise<(O extends { canPickMany: true } ? T[] : T) | undefined> {\n\t\treturn (this.activeService as unknown as QuickInputController /* TS fail */).pick(picks, options, token);\n\t}\n\n\tinput(options?: IInputOptions | undefined, token?: CancellationToken | undefined): Promise<string | undefined> {\n\t\treturn this.activeService.input(options, token);\n\t}\n\n\tcreateQuickPick<T extends IQuickPickItem>(): IQuickPick<T> {\n\t\treturn this.activeService.createQuickPick();\n\t}\n\n\tcreateInputBox(): IInputBox {\n\t\treturn this.activeService.createInputBox();\n\t}\n\n\tfocus(): void {\n\t\treturn this.activeService.focus();\n\t}\n\n\ttoggle(): void {\n\t\treturn this.activeService.toggle();\n\t}\n\n\tnavigate(next: boolean, quickNavigate?: IQuickNavigateConfiguration | undefined): void {\n\t\treturn this.activeService.navigate(next, quickNavigate);\n\t}\n\n\taccept(): Promise<void> {\n\t\treturn this.activeService.accept();\n\t}\n\n\tback(): Promise<void> {\n\t\treturn this.activeService.back();\n\t}\n\n\tcancel(): Promise<void> {\n\t\treturn this.activeService.cancel();\n\t}\n}\n\nexport class QuickInputEditorContribution implements IEditorContribution {\n\n\tstatic readonly ID = 'editor.controller.quickInput';\n\n\tstatic get(editor: ICodeEditor): QuickInputEditorContribution {\n\t\treturn editor.getContribution<QuickInputEditorContribution>(QuickInputEditorContribution.ID);\n\t}\n\n\treadonly widget = new QuickInputEditorWidget(this.editor);\n\n\tconstructor(private editor: ICodeEditor) { }\n\n\tdispose(): void {\n\t\tthis.widget.dispose();\n\t}\n}\n\nexport class QuickInputEditorWidget implements IOverlayWidget {\n\n\tprivate static readonly ID = 'editor.contrib.quickInputWidget';\n\n\tprivate domNode: HTMLElement;\n\n\tconstructor(private codeEditor: ICodeEditor) {\n\t\tthis.domNode = document.createElement('div');\n\n\t\tthis.codeEditor.addOverlayWidget(this);\n\t}\n\n\tgetId(): string {\n\t\treturn QuickInputEditorWidget.ID;\n\t}\n\n\tgetDomNode(): HTMLElement {\n\t\treturn this.domNode;\n\t}\n\n\tgetPosition(): IOverlayWidgetPosition | null {\n\t\treturn { preference: OverlayWidgetPositionPreference.TOP_CENTER };\n\t}\n\n\tdispose(): void {\n\t\tthis.codeEditor.removeOverlayWidget(this);\n\t}\n}\n\nregisterEditorContribution(QuickInputEditorContribution.ID, QuickInputEditorContribution);\n"]}