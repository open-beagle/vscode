{"version":3,"file":"standaloneCommandsQuickAccess.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/standalone/browser/quickAccess/standaloneCommandsQuickAccess.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAqBhG,IAAa,qCAAqC,GAAlD,MAAa,qCAAsC,SAAQ,+DAAyC;QAInG,YACwB,oBAA2C,EAC7B,iBAAqC,EACtD,iBAAqC,EACxC,cAA+B,EAC7B,gBAAmC,EAChC,mBAAyC;YAE/D,KAAK,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,EAAE,oBAAoB,EAAE,iBAAiB,EAAE,cAAc,EAAE,gBAAgB,EAAE,mBAAmB,CAAC,CAAC;YANvF,sBAAiB,GAAjB,iBAAiB,CAAoB;QAO3E,CAAC;QAXD,IAAc,uBAAuB,KAA0B,OAAO,CAAA,GAAA,2BAAmB,CAAA,CAAC,IAAI,CAAC,iBAAiB,CAAC,oBAAoB,EAAE,CAAC,CAAC,CAAC,CAAC;QAajI,KAAK,CAAC,eAAe;YAC9B,OAAO,IAAI,CAAC,yBAAyB,EAAE,CAAC;QACzC,CAAC;KACD,CAAA;IAlBY,qCAAqC;QAK/C,WAAA,qCAAqB,CAAA;QACrB,WAAA,sCAAkB,CAAA;QAClB,WAAA,+BAAkB,CAAA;QAClB,WAAA,0BAAe,CAAA;QACf,WAAA,6BAAiB,CAAA;QACjB,WAAA,mCAAoB,CAAA;OAVV,qCAAqC,CAkBjD;IAlBY,sFAAqC;IAoBlD,mBAAQ,CAAC,EAAE,CAAuB,wBAAU,CAAC,WAAW,CAAC,CAAC,2BAA2B,CAAC;QACrF,IAAI,EAAE,qCAAqC;QAC3C,MAAM,EAAE,qCAAqC,CAAC,MAAM;QACpD,WAAW,EAAE,CAAC,EAAE,WAAW,EAAE,mCAAe,CAAC,gBAAgB,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC;KACnF,CAAC,CAAC;IAEH,MAAa,cAAe,SAAQ,+BAAY;QAE/C;YACC,KAAK,CAAC;gBACL,EAAE,EAAE,4BAA4B;gBAChC,KAAK,EAAE,mCAAe,CAAC,uBAAuB;gBAC9C,KAAK,EAAE,iBAAiB;gBACxB,YAAY,EAAE,SAAS;gBACvB,MAAM,EAAE;oBACP,MAAM,EAAE,qCAAiB,CAAC,KAAK;oBAC/B,OAAO,aAAY;oBACnB,MAAM,yBAAgC;iBACtC;gBACD,eAAe,EAAE;oBAChB,KAAK,EAAE,YAAY;oBACnB,KAAK,EAAE,CAAC;iBACR;aACD,CAAC,CAAC;QACJ,CAAC;QAED,GAAG,CAAC,QAA0B;YAC7B,QAAQ,CAAC,GAAG,CAAC,+BAAkB,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,qCAAqC,CAAC,MAAM,CAAC,CAAC;QACjG,CAAC;KACD;IAvBD,wCAuBC;IAED,CAAA,GAAA,uCAAoB,CAAA,CAAC,cAAc,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IQuickAccessRegistry, Extensions } from 'vs/platform/quickinput/common/quickAccess';\nimport { QuickCommandNLS } from 'vs/editor/common/standaloneStrings';\nimport { ICommandQuickPick } from 'vs/platform/quickinput/browser/commandsQuickAccess';\nimport { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';\nimport { AbstractEditorCommandsQuickAccessProvider } from 'vs/editor/contrib/quickAccess/commandsQuickAccess';\nimport { IEditor } from 'vs/editor/common/editorCommon';\nimport { withNullAsUndefined } from 'vs/base/common/types';\nimport { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { EditorAction, registerEditorAction } from 'vs/editor/browser/editorExtensions';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { KeyCode } from 'vs/base/common/keyCodes';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { IQuickInputService } from 'vs/platform/quickinput/common/quickInput';\n\nexport class StandaloneCommandsQuickAccessProvider extends AbstractEditorCommandsQuickAccessProvider {\n\n\tprotected get activeTextEditorControl(): IEditor | undefined { return withNullAsUndefined(this.codeEditorService.getFocusedCodeEditor()); }\n\n\tconstructor(\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@ICodeEditorService private readonly codeEditorService: ICodeEditorService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@ICommandService commandService: ICommandService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@INotificationService notificationService: INotificationService\n\t) {\n\t\tsuper({ showAlias: false }, instantiationService, keybindingService, commandService, telemetryService, notificationService);\n\t}\n\n\tprotected async getCommandPicks(): Promise<Array<ICommandQuickPick>> {\n\t\treturn this.getCodeEditorCommandPicks();\n\t}\n}\n\nRegistry.as<IQuickAccessRegistry>(Extensions.Quickaccess).registerQuickAccessProvider({\n\tctor: StandaloneCommandsQuickAccessProvider,\n\tprefix: StandaloneCommandsQuickAccessProvider.PREFIX,\n\thelpEntries: [{ description: QuickCommandNLS.quickCommandHelp, needsEditor: true }]\n});\n\nexport class GotoLineAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.quickCommand',\n\t\t\tlabel: QuickCommandNLS.quickCommandActionLabel,\n\t\t\talias: 'Command Palette',\n\t\t\tprecondition: undefined,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.focus,\n\t\t\t\tprimary: KeyCode.F1,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t},\n\t\t\tcontextMenuOpts: {\n\t\t\t\tgroup: 'z_commands',\n\t\t\t\torder: 1\n\t\t\t}\n\t\t});\n\t}\n\n\trun(accessor: ServicesAccessor): void {\n\t\taccessor.get(IQuickInputService).quickAccess.show(StandaloneCommandsQuickAccessProvider.PREFIX);\n\t}\n}\n\nregisterEditorAction(GotoLineAction);\n"]}