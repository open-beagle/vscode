{"version":3,"file":"stringBuilder.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/test/common/core/stringBuilder.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAMhG,KAAK,CAAC,eAAe,EAAE,GAAG,EAAE;QAE3B,IAAI,CAAC,6CAA6C,EAAE,GAAG,EAAE;YACxD,MAAM,IAAI,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC;YAC/B,CAAA,GAAA,sBAAa,CAAA,CAAC,IAAI,EAAE,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAC1C,MAAM,MAAM,GAAG,CAAA,GAAA,6BAAa,CAAA,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACzC,MAAM,CAAC,eAAe,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,6CAA6C,EAAE,GAAG,EAAE;YACxD,MAAM,IAAI,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC;YAC/B,CAAA,GAAA,sBAAa,CAAA,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAC3C,CAAA,GAAA,sBAAa,CAAA,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAC3C,MAAM,MAAM,GAAG,CAAA,GAAA,6BAAa,CAAA,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACzC,MAAM,CAAC,eAAe,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,6CAA6C,EAAE,GAAG,EAAE;YACxD,MAAM,IAAI,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC;YAC/B,CAAA,GAAA,sBAAa,CAAA,CAAC,IAAI,EAAE,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAC5C,CAAA,GAAA,sBAAa,CAAA,CAAC,IAAI,EAAE,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAC5C,CAAA,GAAA,sBAAa,CAAA,CAAC,IAAI,EAAE,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAC5C,MAAM,MAAM,GAAG,CAAA,GAAA,6BAAa,CAAA,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACzC,MAAM,CAAC,eAAe,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;IAEJ,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { writeUInt16LE } from 'vs/base/common/buffer';\nimport { decodeUTF16LE } from 'vs/editor/common/core/stringBuilder';\n\nsuite('decodeUTF16LE', () => {\n\n\ttest('issue #118041: unicode character undo bug 1', () => {\n\t\tconst buff = new Uint8Array(2);\n\t\twriteUInt16LE(buff, '﻿'.charCodeAt(0), 0);\n\t\tconst actual = decodeUTF16LE(buff, 0, 1);\n\t\tassert.deepStrictEqual(actual, '﻿');\n\t});\n\n\ttest('issue #118041: unicode character undo bug 2', () => {\n\t\tconst buff = new Uint8Array(4);\n\t\twriteUInt16LE(buff, 'a﻿'.charCodeAt(0), 0);\n\t\twriteUInt16LE(buff, 'a﻿'.charCodeAt(1), 2);\n\t\tconst actual = decodeUTF16LE(buff, 0, 2);\n\t\tassert.deepStrictEqual(actual, 'a﻿');\n\t});\n\n\ttest('issue #118041: unicode character undo bug 3', () => {\n\t\tconst buff = new Uint8Array(6);\n\t\twriteUInt16LE(buff, 'a﻿b'.charCodeAt(0), 0);\n\t\twriteUInt16LE(buff, 'a﻿b'.charCodeAt(1), 2);\n\t\twriteUInt16LE(buff, 'a﻿b'.charCodeAt(2), 4);\n\t\tconst actual = decodeUTF16LE(buff, 0, 3);\n\t\tassert.deepStrictEqual(actual, 'a﻿b');\n\t});\n\n});\n"]}