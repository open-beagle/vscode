{"version":3,"file":"viewLineToken.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/test/common/core/viewLineToken.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAKhG;;OAEG;IACH,MAAa,aAAa;QASzB,YAAY,QAAgB,EAAE,QAAgB;YAC7C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;YACzB,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC3B,CAAC;QAEM,aAAa;YACnB,OAAO,qBAAa,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACpD,CAAC;QAEM,OAAO;YACb,OAAO,qBAAa,CAAC,wBAAwB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC/D,CAAC;QAEM,cAAc,CAAC,QAAkB;YACvC,OAAO,qBAAa,CAAC,0BAA0B,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;QAC3E,CAAC;QAEO,MAAM,CAAC,OAAO,CAAC,CAAgB,EAAE,CAAgB;YACxD,OAAO,CACN,CAAC,CAAC,QAAQ,KAAK,CAAC,CAAC,QAAQ;mBACtB,CAAC,CAAC,SAAS,KAAK,CAAC,CAAC,SAAS,CAC9B,CAAC;QACH,CAAC;QAEM,MAAM,CAAC,SAAS,CAAC,CAAkB,EAAE,CAAkB;YAC7D,MAAM,IAAI,GAAG,CAAC,CAAC,MAAM,CAAC;YACtB,MAAM,IAAI,GAAG,CAAC,CAAC,MAAM,CAAC;YACtB,IAAI,IAAI,KAAK,IAAI,EAAE;gBAClB,OAAO,KAAK,CAAC;aACb;YACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE;gBAC9B,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;oBAC9B,OAAO,KAAK,CAAC;iBACb;aACD;YACD,OAAO,IAAI,CAAC;QACb,CAAC;KACD;IA9CD,sCA8CC;IAED,MAAa,cAAc;QAI1B,YAAY,MAAuB;YAClC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACvB,CAAC;QAEM,MAAM,CAAC,KAAsB;YACnC,IAAI,KAAK,YAAY,cAAc,EAAE;gBACpC,OAAO,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;aAC5D;YACD,OAAO,KAAK,CAAC;QACd,CAAC;QAEM,QAAQ;YACd,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;QAC5B,CAAC;QAEM,aAAa,CAAC,UAAkB;YACtC,OAAO,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,aAAa,EAAE,CAAC;QACjD,CAAC;QAEM,YAAY,CAAC,UAAkB;YACrC,OAAO,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC;QAC1C,CAAC;QAEM,YAAY,CAAC,UAAkB;YACrC,OAAO,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,OAAO,EAAE,CAAC;QAC3C,CAAC;QAEM,cAAc,CAAC,UAAkB,EAAE,QAAkB;YAC3D,OAAO,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;QAC1D,CAAC;QAEM,sBAAsB,CAAC,MAAc;YAC3C,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;QACpC,CAAC;KACD;IAtCD,wCAsCC;IAED,MAAa,oBAAoB;QAEzB,MAAM,CAAC,UAAU,CAAC,MAAmB;YAC3C,MAAM,WAAW,GAAG,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC;YAE1C,IAAI,MAAM,GAAoB,IAAI,KAAK,CAAgB,WAAW,CAAC,CAAC;YACpE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE;gBACrC,MAAM,SAAS,GAAG,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACjC,MAAM,QAAQ,GAAG,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBAEtC,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,aAAa,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;aACnD;YAED,OAAO,MAAM,CAAC;QACf,CAAC;KAED;IAhBD,oDAgBC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IViewLineTokens } from 'vs/editor/common/core/lineTokens';\nimport { ColorId, TokenMetadata } from 'vs/editor/common/modes';\n\n/**\n * A token on a line.\n */\nexport class ViewLineToken {\n\t_viewLineTokenBrand: void;\n\n\t/**\n\t * last char index of this token (not inclusive).\n\t */\n\tpublic readonly endIndex: number;\n\tprivate readonly _metadata: number;\n\n\tconstructor(endIndex: number, metadata: number) {\n\t\tthis.endIndex = endIndex;\n\t\tthis._metadata = metadata;\n\t}\n\n\tpublic getForeground(): ColorId {\n\t\treturn TokenMetadata.getForeground(this._metadata);\n\t}\n\n\tpublic getType(): string {\n\t\treturn TokenMetadata.getClassNameFromMetadata(this._metadata);\n\t}\n\n\tpublic getInlineStyle(colorMap: string[]): string {\n\t\treturn TokenMetadata.getInlineStyleFromMetadata(this._metadata, colorMap);\n\t}\n\n\tprivate static _equals(a: ViewLineToken, b: ViewLineToken): boolean {\n\t\treturn (\n\t\t\ta.endIndex === b.endIndex\n\t\t\t&& a._metadata === b._metadata\n\t\t);\n\t}\n\n\tpublic static equalsArr(a: ViewLineToken[], b: ViewLineToken[]): boolean {\n\t\tconst aLen = a.length;\n\t\tconst bLen = b.length;\n\t\tif (aLen !== bLen) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let i = 0; i < aLen; i++) {\n\t\t\tif (!this._equals(a[i], b[i])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n\nexport class ViewLineTokens implements IViewLineTokens {\n\n\tprivate readonly _actual: ViewLineToken[];\n\n\tconstructor(actual: ViewLineToken[]) {\n\t\tthis._actual = actual;\n\t}\n\n\tpublic equals(other: IViewLineTokens): boolean {\n\t\tif (other instanceof ViewLineTokens) {\n\t\t\treturn ViewLineToken.equalsArr(this._actual, other._actual);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic getCount(): number {\n\t\treturn this._actual.length;\n\t}\n\n\tpublic getForeground(tokenIndex: number): ColorId {\n\t\treturn this._actual[tokenIndex].getForeground();\n\t}\n\n\tpublic getEndOffset(tokenIndex: number): number {\n\t\treturn this._actual[tokenIndex].endIndex;\n\t}\n\n\tpublic getClassName(tokenIndex: number): string {\n\t\treturn this._actual[tokenIndex].getType();\n\t}\n\n\tpublic getInlineStyle(tokenIndex: number, colorMap: string[]): string {\n\t\treturn this._actual[tokenIndex].getInlineStyle(colorMap);\n\t}\n\n\tpublic findTokenIndexAtOffset(offset: number): number {\n\t\tthrow new Error('Not implemented');\n\t}\n}\n\nexport class ViewLineTokenFactory {\n\n\tpublic static inflateArr(tokens: Uint32Array): ViewLineToken[] {\n\t\tconst tokensCount = (tokens.length >>> 1);\n\n\t\tlet result: ViewLineToken[] = new Array<ViewLineToken>(tokensCount);\n\t\tfor (let i = 0; i < tokensCount; i++) {\n\t\t\tconst endOffset = tokens[i << 1];\n\t\t\tconst metadata = tokens[(i << 1) + 1];\n\n\t\t\tresult[i] = new ViewLineToken(endOffset, metadata);\n\t\t}\n\n\t\treturn result;\n\t}\n\n}\n"]}