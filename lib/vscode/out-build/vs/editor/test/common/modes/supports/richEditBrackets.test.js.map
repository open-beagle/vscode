{"version":3,"file":"richEditBrackets.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/test/common/modes/supports/richEditBrackets.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { Range } from 'vs/editor/common/core/range';\nimport { BracketsUtils } from 'vs/editor/common/modes/supports/richEditBrackets';\n\nsuite('richEditBrackets', () => {\n\n\tfunction findPrevBracketInRange(reversedBracketRegex: RegExp, lineText: string, currentTokenStart: number, currentTokenEnd: number): Range | null {\n\t\treturn BracketsUtils.findPrevBracketInRange(reversedBracketRegex, 1, lineText, currentTokenStart, currentTokenEnd);\n\t}\n\n\tfunction findNextBracketInRange(forwardBracketRegex: RegExp, lineText: string, currentTokenStart: number, currentTokenEnd: number): Range | null {\n\t\treturn BracketsUtils.findNextBracketInRange(forwardBracketRegex, 1, lineText, currentTokenStart, currentTokenEnd);\n\t}\n\n\ttest('findPrevBracketInToken one char 1', () => {\n\t\tlet result = findPrevBracketInRange(/(\\{)|(\\})/i, '{', 0, 1);\n\t\tassert.strictEqual(result!.startColumn, 1);\n\t\tassert.strictEqual(result!.endColumn, 2);\n\t});\n\n\ttest('findPrevBracketInToken one char 2', () => {\n\t\tlet result = findPrevBracketInRange(/(\\{)|(\\})/i, '{{', 0, 1);\n\t\tassert.strictEqual(result!.startColumn, 1);\n\t\tassert.strictEqual(result!.endColumn, 2);\n\t});\n\n\ttest('findPrevBracketInToken one char 3', () => {\n\t\tlet result = findPrevBracketInRange(/(\\{)|(\\})/i, '{hello world!', 0, 13);\n\t\tassert.strictEqual(result!.startColumn, 1);\n\t\tassert.strictEqual(result!.endColumn, 2);\n\t});\n\n\ttest('findPrevBracketInToken more chars 1', () => {\n\t\tlet result = findPrevBracketInRange(/(olleh)/i, 'hello world!', 0, 12);\n\t\tassert.strictEqual(result!.startColumn, 1);\n\t\tassert.strictEqual(result!.endColumn, 6);\n\t});\n\n\ttest('findPrevBracketInToken more chars 2', () => {\n\t\tlet result = findPrevBracketInRange(/(olleh)/i, 'hello world!', 0, 5);\n\t\tassert.strictEqual(result!.startColumn, 1);\n\t\tassert.strictEqual(result!.endColumn, 6);\n\t});\n\n\ttest('findPrevBracketInToken more chars 3', () => {\n\t\tlet result = findPrevBracketInRange(/(olleh)/i, ' hello world!', 0, 6);\n\t\tassert.strictEqual(result!.startColumn, 2);\n\t\tassert.strictEqual(result!.endColumn, 7);\n\t});\n\n\ttest('findNextBracketInToken one char', () => {\n\t\tlet result = findNextBracketInRange(/(\\{)|(\\})/i, '{', 0, 1);\n\t\tassert.strictEqual(result!.startColumn, 1);\n\t\tassert.strictEqual(result!.endColumn, 2);\n\t});\n\n\ttest('findNextBracketInToken more chars', () => {\n\t\tlet result = findNextBracketInRange(/(world)/i, 'hello world!', 0, 12);\n\t\tassert.strictEqual(result!.startColumn, 7);\n\t\tassert.strictEqual(result!.endColumn, 12);\n\t});\n\n\ttest('findNextBracketInToken with emoty result', () => {\n\t\tlet result = findNextBracketInRange(/(\\{)|(\\})/i, '', 0, 0);\n\t\tassert.strictEqual(result, null);\n\t});\n\n\ttest('issue #3894: [Handlebars] Curly braces edit issues', () => {\n\t\tlet result = findPrevBracketInRange(/(\\-\\-!<)|(>\\-\\-)|(\\{\\{)|(\\}\\})/i, '{{asd}}', 0, 2);\n\t\tassert.strictEqual(result!.startColumn, 1);\n\t\tassert.strictEqual(result!.endColumn, 3);\n\t});\n\n});\n"]}