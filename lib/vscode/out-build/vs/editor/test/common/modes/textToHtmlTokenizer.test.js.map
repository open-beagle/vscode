{"version":3,"file":"textToHtmlTokenizer.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/test/common/modes/textToHtmlTokenizer.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAShG,KAAK,CAAC,oCAAoC,EAAE,GAAG,EAAE;QAChD,SAAS,KAAK,CAAC,MAA6C;YAC3D,IAAI,SAAS,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,gBAAgB,CAAC,CAAC,SAAS,KAAK,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC;YACnF,OAAO,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC3B,CAAC;QAED,IAAI,CAAC,uBAAuB,EAAE,GAAG,EAAE;YAClC,IAAI,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;YACtB,IAAI,OAAO,GAAG,4BAAoB,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,CAAE,CAAC;YAEtD,IAAI,MAAM,GAAG,CAAA,GAAA,sCAAgB,CAAA,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;YACzD,IAAI,QAAQ,GAAG;gBACd,EAAE,SAAS,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE;gBAChC,EAAE,SAAS,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE;gBAClC,EAAE,SAAS,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE;gBACjC,EAAE,SAAS,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE;gBAClC,EAAE,SAAS,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE;gBAClC,EAAE,SAAS,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE;aACjC,CAAC;YACF,IAAI,WAAW,GAAG,wCAAwC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC;YAElF,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;YAExC,IAAI,CAAC,OAAO,EAAE,CAAC;QAChB,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,uBAAuB,EAAE,GAAG,EAAE;YAClC,IAAI,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;YACtB,IAAI,OAAO,GAAG,4BAAoB,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,CAAE,CAAC;YAEtD,IAAI,MAAM,GAAG,CAAA,GAAA,sCAAgB,CAAA,CAAC,gCAAgC,EAAE,OAAO,CAAC,CAAC;YACzE,IAAI,SAAS,GAAG;gBACf,EAAE,SAAS,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE;gBAChC,EAAE,SAAS,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE;gBAClC,EAAE,SAAS,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE;gBACjC,EAAE,SAAS,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE;gBAClC,EAAE,SAAS,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE;gBAClC,EAAE,SAAS,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE;aACjC,CAAC;YACF,IAAI,SAAS,GAAG;gBACf,EAAE,SAAS,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE;gBAChC,EAAE,SAAS,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE;gBAClC,EAAE,SAAS,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE;gBACjC,EAAE,SAAS,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE;gBAClC,EAAE,SAAS,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE;gBAClC,EAAE,SAAS,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE;aACjC,CAAC;YACF,IAAI,YAAY,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC;YACpC,IAAI,YAAY,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC;YACpC,IAAI,WAAW,GAAG,wCAAwC,YAAY,QAAQ,YAAY,QAAQ,CAAC;YAEnG,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;YAExC,IAAI,CAAC,OAAO,EAAE,CAAC;QAChB,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,oBAAoB,EAAE,GAAG,EAAE;YAC/B,MAAM,IAAI,GAAG,mBAAmB,CAAC;YACjC,MAAM,UAAU,GAAG,IAAI,8BAAc,CAAC;gBACrC,IAAI,6BAAa,CAChB,CAAC,EACD,CACC,CAAC,CAAC,8BAAoC,CAAC;sBACrC,CAAC,CAAC,6BAAiC,CAAC,8BAAoC,CAAC,CAC3E,KAAK,CAAC,CACP;gBACD,IAAI,6BAAa,CAChB,CAAC,EACD,CACC,CAAC,CAAC,8BAAoC,CAAC,CACvC,KAAK,CAAC,CACP;gBACD,IAAI,6BAAa,CAChB,EAAE,EACF,CACC,CAAC,CAAC,8BAAoC,CAAC,CACvC,KAAK,CAAC,CACP;gBACD,IAAI,6BAAa,CAChB,EAAE,EACF,CACC,CAAC,CAAC,8BAAoC,CAAC,CACvC,KAAK,CAAC,CACP;gBACD,IAAI,6BAAa,CAChB,EAAE,EACF,CACC,CAAC,CAAC,8BAAoC,CAAC;sBACrC,CAAC,mBAAqB,8BAAoC,CAAC,CAC7D,KAAK,CAAC,CACP;aACD,CAAC,CAAC;YACH,MAAM,QAAQ,GAAG,CAAC,IAAK,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;YAEhF,MAAM,CAAC,WAAW,CACjB,CAAA,GAAA,wCAAkB,CAAA,CAAC,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC,EAC9D;gBACC,OAAO;gBACP,gFAAgF;gBAChF,6CAA6C;gBAC7C,4CAA4C;gBAC5C,6CAA6C;gBAC7C,wEAAwE;gBACxE,QAAQ;aACR,CAAC,IAAI,CAAC,EAAE,CAAC,CACV,CAAC;YAEF,MAAM,CAAC,WAAW,CACjB,CAAA,GAAA,wCAAkB,CAAA,CAAC,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC,EAC9D;gBACC,OAAO;gBACP,gFAAgF;gBAChF,6CAA6C;gBAC7C,4CAA4C;gBAC5C,6CAA6C;gBAC7C,mEAAmE;gBACnE,QAAQ;aACR,CAAC,IAAI,CAAC,EAAE,CAAC,CACV,CAAC;YAEF,MAAM,CAAC,WAAW,CACjB,CAAA,GAAA,wCAAkB,CAAA,CAAC,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC,EAC9D;gBACC,OAAO;gBACP,gFAAgF;gBAChF,6CAA6C;gBAC7C,4CAA4C;gBAC5C,6CAA6C;gBAC7C,QAAQ;aACR,CAAC,IAAI,CAAC,EAAE,CAAC,CACV,CAAC;YAEF,MAAM,CAAC,WAAW,CACjB,CAAA,GAAA,wCAAkB,CAAA,CAAC,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC,EAC9D;gBACC,OAAO;gBACP,+EAA+E;gBAC/E,6CAA6C;gBAC7C,4CAA4C;gBAC5C,6CAA6C;gBAC7C,QAAQ;aACR,CAAC,IAAI,CAAC,EAAE,CAAC,CACV,CAAC;YAEF,MAAM,CAAC,WAAW,CACjB,CAAA,GAAA,wCAAkB,CAAA,CAAC,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC,EAC9D;gBACC,OAAO;gBACP,6CAA6C;gBAC7C,4CAA4C;gBAC5C,6CAA6C;gBAC7C,QAAQ;aACR,CAAC,IAAI,CAAC,EAAE,CAAC,CACV,CAAC;YAEF,MAAM,CAAC,WAAW,CACjB,CAAA,GAAA,wCAAkB,CAAA,CAAC,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC,EAC9D;gBACC,OAAO;gBACP,4CAA4C;gBAC5C,6CAA6C;gBAC7C,QAAQ;aACR,CAAC,IAAI,CAAC,EAAE,CAAC,CACV,CAAC;YAEF,MAAM,CAAC,WAAW,CACjB,CAAA,GAAA,wCAAkB,CAAA,CAAC,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC,EAC9D;gBACC,OAAO;gBACP,4CAA4C;gBAC5C,QAAQ;aACR,CAAC,IAAI,CAAC,EAAE,CAAC,CACV,CAAC;YAEF,MAAM,CAAC,WAAW,CACjB,CAAA,GAAA,wCAAkB,CAAA,CAAC,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,EAC7D;gBACC,OAAO;gBACP,0CAA0C;gBAC1C,QAAQ;aACR,CAAC,IAAI,CAAC,EAAE,CAAC,CACV,CAAC;QACH,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,yCAAyC,EAAE,GAAG,EAAE;YACpD,MAAM,IAAI,GAAG,uBAAuB,CAAC;YACrC,MAAM,UAAU,GAAG,IAAI,8BAAc,CAAC;gBACrC,IAAI,6BAAa,CAChB,CAAC,EACD,CACC,CAAC,CAAC,8BAAoC,CAAC,CACvC,KAAK,CAAC,CACP;gBACD,IAAI,6BAAa,CAChB,CAAC,EACD,CACC,CAAC,CAAC,8BAAoC,CAAC;sBACrC,CAAC,CAAC,6BAAiC,CAAC,8BAAoC,CAAC,CAC3E,KAAK,CAAC,CACP;gBACD,IAAI,6BAAa,CAChB,CAAC,EACD,CACC,CAAC,CAAC,8BAAoC,CAAC,CACvC,KAAK,CAAC,CACP;gBACD,IAAI,6BAAa,CAChB,EAAE,EACF,CACC,CAAC,CAAC,8BAAoC,CAAC,CACvC,KAAK,CAAC,CACP;gBACD,IAAI,6BAAa,CAChB,EAAE,EACF,CACC,CAAC,CAAC,8BAAoC,CAAC,CACvC,KAAK,CAAC,CACP;gBACD,IAAI,6BAAa,CAChB,EAAE,EACF,CACC,CAAC,CAAC,8BAAoC,CAAC;sBACrC,CAAC,mBAAqB,8BAAoC,CAAC,CAC7D,KAAK,CAAC,CACP;aACD,CAAC,CAAC;YACH,MAAM,QAAQ,GAAG,CAAC,IAAK,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;YAEhF,MAAM,CAAC,WAAW,CACjB,CAAA,GAAA,wCAAkB,CAAA,CAAC,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC,EAC9D;gBACC,OAAO;gBACP,mDAAmD;gBACnD,gFAAgF;gBAChF,yDAAyD;gBACzD,4CAA4C;gBAC5C,6CAA6C;gBAC7C,wEAAwE;gBACxE,QAAQ;aACR,CAAC,IAAI,CAAC,EAAE,CAAC,CACV,CAAC;YAEF,MAAM,CAAC,WAAW,CACjB,CAAA,GAAA,wCAAkB,CAAA,CAAC,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC,EAC9D;gBACC,OAAO;gBACP,mDAAmD;gBACnD,gFAAgF;gBAChF,yDAAyD;gBACzD,4CAA4C;gBAC5C,6CAA6C;gBAC7C,oEAAoE;gBACpE,QAAQ;aACR,CAAC,IAAI,CAAC,EAAE,CAAC,CACV,CAAC;YAEF,MAAM,CAAC,WAAW,CACjB,CAAA,GAAA,wCAAkB,CAAA,CAAC,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,EAC7D;gBACC,OAAO;gBACP,mDAAmD;gBACnD,6EAA6E;gBAC7E,QAAQ;aACR,CAAC,IAAI,CAAC,EAAE,CAAC,CACV,CAAC;QACH,CAAC,CAAC,CAAC;IAEJ,CAAC,CAAC,CAAC;IAEH,MAAM,IAAK,SAAQ,mBAAQ;QAI1B;YACC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAChB,IAAI,CAAC,SAAS,CAAC,4BAAoB,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE;gBAC1D,eAAe,EAAE,GAAW,EAAE,CAAC,IAAK;gBACpC,QAAQ,EAAE,SAAU;gBACpB,SAAS,EAAE,CAAC,IAAY,EAAE,MAAe,EAAE,KAAa,EAAuB,EAAE;oBAChF,IAAI,SAAS,GAAa,EAAE,CAAC;oBAC7B,IAAI,SAAS,GAAY,CAAC,CAAC,CAAC;oBAC5B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;wBACrC,IAAI,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBAC7C,IAAI,SAAS,KAAK,OAAO,EAAE;4BAC1B,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;4BAClB,SAAS,CAAC,IAAI,CAAC,CACd,OAAO,8BAAoC,CAC3C,KAAK,CAAC,CAAC,CAAC;yBACT;wBACD,SAAS,GAAG,OAAO,CAAC;qBACpB;oBAED,IAAI,MAAM,GAAG,IAAI,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;oBAC/C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;wBACvC,MAAM,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;qBACzB;oBACD,OAAO,IAAI,2BAAmB,CAAC,MAAM,EAAE,IAAK,CAAC,CAAC;gBAC/C,CAAC;aACD,CAAC,CAAC,CAAC;QACL,CAAC;;IA5BuB,QAAG,GAAG,IAAI,0BAAkB,CAAC,yBAAyB,EAAE,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { TokenizationResult2 } from 'vs/editor/common/core/token';\nimport { ColorId, FontStyle, IState, LanguageIdentifier, MetadataConsts, TokenizationRegistry } from 'vs/editor/common/modes';\nimport { tokenizeLineToHTML, tokenizeToString } from 'vs/editor/common/modes/textToHtmlTokenizer';\nimport { ViewLineToken, ViewLineTokens } from 'vs/editor/test/common/core/viewLineToken';\nimport { MockMode } from 'vs/editor/test/common/mocks/mockMode';\n\nsuite('Editor Modes - textToHtmlTokenizer', () => {\n\tfunction toStr(pieces: { className: string; text: string }[]): string {\n\t\tlet resultArr = pieces.map((t) => `<span class=\"${t.className}\">${t.text}</span>`);\n\t\treturn resultArr.join('');\n\t}\n\n\ttest('TextToHtmlTokenizer 1', () => {\n\t\tlet mode = new Mode();\n\t\tlet support = TokenizationRegistry.get(mode.getId())!;\n\n\t\tlet actual = tokenizeToString('.abc..def...gh', support);\n\t\tlet expected = [\n\t\t\t{ className: 'mtk7', text: '.' },\n\t\t\t{ className: 'mtk9', text: 'abc' },\n\t\t\t{ className: 'mtk7', text: '..' },\n\t\t\t{ className: 'mtk9', text: 'def' },\n\t\t\t{ className: 'mtk7', text: '...' },\n\t\t\t{ className: 'mtk9', text: 'gh' },\n\t\t];\n\t\tlet expectedStr = `<div class=\"monaco-tokenized-source\">${toStr(expected)}</div>`;\n\n\t\tassert.strictEqual(actual, expectedStr);\n\n\t\tmode.dispose();\n\t});\n\n\ttest('TextToHtmlTokenizer 2', () => {\n\t\tlet mode = new Mode();\n\t\tlet support = TokenizationRegistry.get(mode.getId())!;\n\n\t\tlet actual = tokenizeToString('.abc..def...gh\\n.abc..def...gh', support);\n\t\tlet expected1 = [\n\t\t\t{ className: 'mtk7', text: '.' },\n\t\t\t{ className: 'mtk9', text: 'abc' },\n\t\t\t{ className: 'mtk7', text: '..' },\n\t\t\t{ className: 'mtk9', text: 'def' },\n\t\t\t{ className: 'mtk7', text: '...' },\n\t\t\t{ className: 'mtk9', text: 'gh' },\n\t\t];\n\t\tlet expected2 = [\n\t\t\t{ className: 'mtk7', text: '.' },\n\t\t\t{ className: 'mtk9', text: 'abc' },\n\t\t\t{ className: 'mtk7', text: '..' },\n\t\t\t{ className: 'mtk9', text: 'def' },\n\t\t\t{ className: 'mtk7', text: '...' },\n\t\t\t{ className: 'mtk9', text: 'gh' },\n\t\t];\n\t\tlet expectedStr1 = toStr(expected1);\n\t\tlet expectedStr2 = toStr(expected2);\n\t\tlet expectedStr = `<div class=\"monaco-tokenized-source\">${expectedStr1}<br/>${expectedStr2}</div>`;\n\n\t\tassert.strictEqual(actual, expectedStr);\n\n\t\tmode.dispose();\n\t});\n\n\ttest('tokenizeLineToHTML', () => {\n\t\tconst text = 'Ciao hello world!';\n\t\tconst lineTokens = new ViewLineTokens([\n\t\t\tnew ViewLineToken(\n\t\t\t\t4,\n\t\t\t\t(\n\t\t\t\t\t(3 << MetadataConsts.FOREGROUND_OFFSET)\n\t\t\t\t\t| ((FontStyle.Bold | FontStyle.Italic) << MetadataConsts.FONT_STYLE_OFFSET)\n\t\t\t\t) >>> 0\n\t\t\t),\n\t\t\tnew ViewLineToken(\n\t\t\t\t5,\n\t\t\t\t(\n\t\t\t\t\t(1 << MetadataConsts.FOREGROUND_OFFSET)\n\t\t\t\t) >>> 0\n\t\t\t),\n\t\t\tnew ViewLineToken(\n\t\t\t\t10,\n\t\t\t\t(\n\t\t\t\t\t(4 << MetadataConsts.FOREGROUND_OFFSET)\n\t\t\t\t) >>> 0\n\t\t\t),\n\t\t\tnew ViewLineToken(\n\t\t\t\t11,\n\t\t\t\t(\n\t\t\t\t\t(1 << MetadataConsts.FOREGROUND_OFFSET)\n\t\t\t\t) >>> 0\n\t\t\t),\n\t\t\tnew ViewLineToken(\n\t\t\t\t17,\n\t\t\t\t(\n\t\t\t\t\t(5 << MetadataConsts.FOREGROUND_OFFSET)\n\t\t\t\t\t| ((FontStyle.Underline) << MetadataConsts.FONT_STYLE_OFFSET)\n\t\t\t\t) >>> 0\n\t\t\t)\n\t\t]);\n\t\tconst colorMap = [null!, '#000000', '#ffffff', '#ff0000', '#00ff00', '#0000ff'];\n\n\t\tassert.strictEqual(\n\t\t\ttokenizeLineToHTML(text, lineTokens, colorMap, 0, 17, 4, true),\n\t\t\t[\n\t\t\t\t'<div>',\n\t\t\t\t'<span style=\"color: #ff0000;font-style: italic;font-weight: bold;\">Ciao</span>',\n\t\t\t\t'<span style=\"color: #000000;\">&#160;</span>',\n\t\t\t\t'<span style=\"color: #00ff00;\">hello</span>',\n\t\t\t\t'<span style=\"color: #000000;\">&#160;</span>',\n\t\t\t\t'<span style=\"color: #0000ff;text-decoration: underline;\">world!</span>',\n\t\t\t\t'</div>'\n\t\t\t].join('')\n\t\t);\n\n\t\tassert.strictEqual(\n\t\t\ttokenizeLineToHTML(text, lineTokens, colorMap, 0, 12, 4, true),\n\t\t\t[\n\t\t\t\t'<div>',\n\t\t\t\t'<span style=\"color: #ff0000;font-style: italic;font-weight: bold;\">Ciao</span>',\n\t\t\t\t'<span style=\"color: #000000;\">&#160;</span>',\n\t\t\t\t'<span style=\"color: #00ff00;\">hello</span>',\n\t\t\t\t'<span style=\"color: #000000;\">&#160;</span>',\n\t\t\t\t'<span style=\"color: #0000ff;text-decoration: underline;\">w</span>',\n\t\t\t\t'</div>'\n\t\t\t].join('')\n\t\t);\n\n\t\tassert.strictEqual(\n\t\t\ttokenizeLineToHTML(text, lineTokens, colorMap, 0, 11, 4, true),\n\t\t\t[\n\t\t\t\t'<div>',\n\t\t\t\t'<span style=\"color: #ff0000;font-style: italic;font-weight: bold;\">Ciao</span>',\n\t\t\t\t'<span style=\"color: #000000;\">&#160;</span>',\n\t\t\t\t'<span style=\"color: #00ff00;\">hello</span>',\n\t\t\t\t'<span style=\"color: #000000;\">&#160;</span>',\n\t\t\t\t'</div>'\n\t\t\t].join('')\n\t\t);\n\n\t\tassert.strictEqual(\n\t\t\ttokenizeLineToHTML(text, lineTokens, colorMap, 1, 11, 4, true),\n\t\t\t[\n\t\t\t\t'<div>',\n\t\t\t\t'<span style=\"color: #ff0000;font-style: italic;font-weight: bold;\">iao</span>',\n\t\t\t\t'<span style=\"color: #000000;\">&#160;</span>',\n\t\t\t\t'<span style=\"color: #00ff00;\">hello</span>',\n\t\t\t\t'<span style=\"color: #000000;\">&#160;</span>',\n\t\t\t\t'</div>'\n\t\t\t].join('')\n\t\t);\n\n\t\tassert.strictEqual(\n\t\t\ttokenizeLineToHTML(text, lineTokens, colorMap, 4, 11, 4, true),\n\t\t\t[\n\t\t\t\t'<div>',\n\t\t\t\t'<span style=\"color: #000000;\">&#160;</span>',\n\t\t\t\t'<span style=\"color: #00ff00;\">hello</span>',\n\t\t\t\t'<span style=\"color: #000000;\">&#160;</span>',\n\t\t\t\t'</div>'\n\t\t\t].join('')\n\t\t);\n\n\t\tassert.strictEqual(\n\t\t\ttokenizeLineToHTML(text, lineTokens, colorMap, 5, 11, 4, true),\n\t\t\t[\n\t\t\t\t'<div>',\n\t\t\t\t'<span style=\"color: #00ff00;\">hello</span>',\n\t\t\t\t'<span style=\"color: #000000;\">&#160;</span>',\n\t\t\t\t'</div>'\n\t\t\t].join('')\n\t\t);\n\n\t\tassert.strictEqual(\n\t\t\ttokenizeLineToHTML(text, lineTokens, colorMap, 5, 10, 4, true),\n\t\t\t[\n\t\t\t\t'<div>',\n\t\t\t\t'<span style=\"color: #00ff00;\">hello</span>',\n\t\t\t\t'</div>'\n\t\t\t].join('')\n\t\t);\n\n\t\tassert.strictEqual(\n\t\t\ttokenizeLineToHTML(text, lineTokens, colorMap, 6, 9, 4, true),\n\t\t\t[\n\t\t\t\t'<div>',\n\t\t\t\t'<span style=\"color: #00ff00;\">ell</span>',\n\t\t\t\t'</div>'\n\t\t\t].join('')\n\t\t);\n\t});\n\ttest('tokenizeLineToHTML handle spaces #35954', () => {\n\t\tconst text = '  Ciao   hello world!';\n\t\tconst lineTokens = new ViewLineTokens([\n\t\t\tnew ViewLineToken(\n\t\t\t\t2,\n\t\t\t\t(\n\t\t\t\t\t(1 << MetadataConsts.FOREGROUND_OFFSET)\n\t\t\t\t) >>> 0\n\t\t\t),\n\t\t\tnew ViewLineToken(\n\t\t\t\t6,\n\t\t\t\t(\n\t\t\t\t\t(3 << MetadataConsts.FOREGROUND_OFFSET)\n\t\t\t\t\t| ((FontStyle.Bold | FontStyle.Italic) << MetadataConsts.FONT_STYLE_OFFSET)\n\t\t\t\t) >>> 0\n\t\t\t),\n\t\t\tnew ViewLineToken(\n\t\t\t\t9,\n\t\t\t\t(\n\t\t\t\t\t(1 << MetadataConsts.FOREGROUND_OFFSET)\n\t\t\t\t) >>> 0\n\t\t\t),\n\t\t\tnew ViewLineToken(\n\t\t\t\t14,\n\t\t\t\t(\n\t\t\t\t\t(4 << MetadataConsts.FOREGROUND_OFFSET)\n\t\t\t\t) >>> 0\n\t\t\t),\n\t\t\tnew ViewLineToken(\n\t\t\t\t15,\n\t\t\t\t(\n\t\t\t\t\t(1 << MetadataConsts.FOREGROUND_OFFSET)\n\t\t\t\t) >>> 0\n\t\t\t),\n\t\t\tnew ViewLineToken(\n\t\t\t\t21,\n\t\t\t\t(\n\t\t\t\t\t(5 << MetadataConsts.FOREGROUND_OFFSET)\n\t\t\t\t\t| ((FontStyle.Underline) << MetadataConsts.FONT_STYLE_OFFSET)\n\t\t\t\t) >>> 0\n\t\t\t)\n\t\t]);\n\t\tconst colorMap = [null!, '#000000', '#ffffff', '#ff0000', '#00ff00', '#0000ff'];\n\n\t\tassert.strictEqual(\n\t\t\ttokenizeLineToHTML(text, lineTokens, colorMap, 0, 21, 4, true),\n\t\t\t[\n\t\t\t\t'<div>',\n\t\t\t\t'<span style=\"color: #000000;\">&#160;&#160;</span>',\n\t\t\t\t'<span style=\"color: #ff0000;font-style: italic;font-weight: bold;\">Ciao</span>',\n\t\t\t\t'<span style=\"color: #000000;\">&#160;&#160;&#160;</span>',\n\t\t\t\t'<span style=\"color: #00ff00;\">hello</span>',\n\t\t\t\t'<span style=\"color: #000000;\">&#160;</span>',\n\t\t\t\t'<span style=\"color: #0000ff;text-decoration: underline;\">world!</span>',\n\t\t\t\t'</div>'\n\t\t\t].join('')\n\t\t);\n\n\t\tassert.strictEqual(\n\t\t\ttokenizeLineToHTML(text, lineTokens, colorMap, 0, 17, 4, true),\n\t\t\t[\n\t\t\t\t'<div>',\n\t\t\t\t'<span style=\"color: #000000;\">&#160;&#160;</span>',\n\t\t\t\t'<span style=\"color: #ff0000;font-style: italic;font-weight: bold;\">Ciao</span>',\n\t\t\t\t'<span style=\"color: #000000;\">&#160;&#160;&#160;</span>',\n\t\t\t\t'<span style=\"color: #00ff00;\">hello</span>',\n\t\t\t\t'<span style=\"color: #000000;\">&#160;</span>',\n\t\t\t\t'<span style=\"color: #0000ff;text-decoration: underline;\">wo</span>',\n\t\t\t\t'</div>'\n\t\t\t].join('')\n\t\t);\n\n\t\tassert.strictEqual(\n\t\t\ttokenizeLineToHTML(text, lineTokens, colorMap, 0, 3, 4, true),\n\t\t\t[\n\t\t\t\t'<div>',\n\t\t\t\t'<span style=\"color: #000000;\">&#160;&#160;</span>',\n\t\t\t\t'<span style=\"color: #ff0000;font-style: italic;font-weight: bold;\">C</span>',\n\t\t\t\t'</div>'\n\t\t\t].join('')\n\t\t);\n\t});\n\n});\n\nclass Mode extends MockMode {\n\n\tprivate static readonly _id = new LanguageIdentifier('textToHtmlTokenizerMode', 3);\n\n\tconstructor() {\n\t\tsuper(Mode._id);\n\t\tthis._register(TokenizationRegistry.register(this.getId(), {\n\t\t\tgetInitialState: (): IState => null!,\n\t\t\ttokenize: undefined!,\n\t\t\ttokenize2: (line: string, hasEOL: boolean, state: IState): TokenizationResult2 => {\n\t\t\t\tlet tokensArr: number[] = [];\n\t\t\t\tlet prevColor: ColorId = -1;\n\t\t\t\tfor (let i = 0; i < line.length; i++) {\n\t\t\t\t\tlet colorId = line.charAt(i) === '.' ? 7 : 9;\n\t\t\t\t\tif (prevColor !== colorId) {\n\t\t\t\t\t\ttokensArr.push(i);\n\t\t\t\t\t\ttokensArr.push((\n\t\t\t\t\t\t\tcolorId << MetadataConsts.FOREGROUND_OFFSET\n\t\t\t\t\t\t) >>> 0);\n\t\t\t\t\t}\n\t\t\t\t\tprevColor = colorId;\n\t\t\t\t}\n\n\t\t\t\tlet tokens = new Uint32Array(tokensArr.length);\n\t\t\t\tfor (let i = 0; i < tokens.length; i++) {\n\t\t\t\t\ttokens[i] = tokensArr[i];\n\t\t\t\t}\n\t\t\t\treturn new TokenizationResult2(tokens, null!);\n\t\t\t}\n\t\t}));\n\t}\n}\n"]}