{"version":3,"file":"characterPair.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/test/common/modes/supports/characterPair.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { StandardTokenType } from 'vs/editor/common/modes';\nimport { CharacterPairSupport } from 'vs/editor/common/modes/supports/characterPair';\nimport { TokenText, createFakeScopedLineTokens } from 'vs/editor/test/common/modesTestUtils';\nimport { StandardAutoClosingPairConditional } from 'vs/editor/common/modes/languageConfiguration';\n\nsuite('CharacterPairSupport', () => {\n\n\ttest('only autoClosingPairs', () => {\n\t\tlet characaterPairSupport = new CharacterPairSupport({ autoClosingPairs: [{ open: 'a', close: 'b' }] });\n\t\tassert.deepStrictEqual(characaterPairSupport.getAutoClosingPairs(), [new StandardAutoClosingPairConditional({ open: 'a', close: 'b' })]);\n\t\tassert.deepStrictEqual(characaterPairSupport.getSurroundingPairs(), [new StandardAutoClosingPairConditional({ open: 'a', close: 'b' })]);\n\t});\n\n\ttest('only empty autoClosingPairs', () => {\n\t\tlet characaterPairSupport = new CharacterPairSupport({ autoClosingPairs: [] });\n\t\tassert.deepStrictEqual(characaterPairSupport.getAutoClosingPairs(), []);\n\t\tassert.deepStrictEqual(characaterPairSupport.getSurroundingPairs(), []);\n\t});\n\n\ttest('only brackets', () => {\n\t\tlet characaterPairSupport = new CharacterPairSupport({ brackets: [['a', 'b']] });\n\t\tassert.deepStrictEqual(characaterPairSupport.getAutoClosingPairs(), [new StandardAutoClosingPairConditional({ open: 'a', close: 'b' })]);\n\t\tassert.deepStrictEqual(characaterPairSupport.getSurroundingPairs(), [new StandardAutoClosingPairConditional({ open: 'a', close: 'b' })]);\n\t});\n\n\ttest('only empty brackets', () => {\n\t\tlet characaterPairSupport = new CharacterPairSupport({ brackets: [] });\n\t\tassert.deepStrictEqual(characaterPairSupport.getAutoClosingPairs(), []);\n\t\tassert.deepStrictEqual(characaterPairSupport.getSurroundingPairs(), []);\n\t});\n\n\ttest('only surroundingPairs', () => {\n\t\tlet characaterPairSupport = new CharacterPairSupport({ surroundingPairs: [{ open: 'a', close: 'b' }] });\n\t\tassert.deepStrictEqual(characaterPairSupport.getAutoClosingPairs(), []);\n\t\tassert.deepStrictEqual(characaterPairSupport.getSurroundingPairs(), [{ open: 'a', close: 'b' }]);\n\t});\n\n\ttest('only empty surroundingPairs', () => {\n\t\tlet characaterPairSupport = new CharacterPairSupport({ surroundingPairs: [] });\n\t\tassert.deepStrictEqual(characaterPairSupport.getAutoClosingPairs(), []);\n\t\tassert.deepStrictEqual(characaterPairSupport.getSurroundingPairs(), []);\n\t});\n\n\ttest('brackets is ignored when having autoClosingPairs', () => {\n\t\tlet characaterPairSupport = new CharacterPairSupport({ autoClosingPairs: [], brackets: [['a', 'b']] });\n\t\tassert.deepStrictEqual(characaterPairSupport.getAutoClosingPairs(), []);\n\t\tassert.deepStrictEqual(characaterPairSupport.getSurroundingPairs(), []);\n\t});\n\n\tfunction findAutoClosingPair(characterPairSupport: CharacterPairSupport, character: string): StandardAutoClosingPairConditional | undefined {\n\t\treturn characterPairSupport.getAutoClosingPairs().find(autoClosingPair => autoClosingPair.open === character);\n\t}\n\n\tfunction testShouldAutoClose(characterPairSupport: CharacterPairSupport, line: TokenText[], character: string, column: number): boolean {\n\t\tconst autoClosingPair = findAutoClosingPair(characterPairSupport, character);\n\t\tif (!autoClosingPair) {\n\t\t\treturn false;\n\t\t}\n\t\treturn CharacterPairSupport.shouldAutoClosePair(autoClosingPair, createFakeScopedLineTokens(line), column);\n\t}\n\n\ttest('shouldAutoClosePair in empty line', () => {\n\t\tlet sup = new CharacterPairSupport({ autoClosingPairs: [{ open: '{', close: '}', notIn: ['string', 'comment'] }] });\n\t\tassert.strictEqual(testShouldAutoClose(sup, [], 'a', 1), false);\n\t\tassert.strictEqual(testShouldAutoClose(sup, [], '{', 1), true);\n\t});\n\n\ttest('shouldAutoClosePair in not interesting line 1', () => {\n\t\tlet sup = new CharacterPairSupport({ autoClosingPairs: [{ open: '{', close: '}', notIn: ['string', 'comment'] }] });\n\t\tassert.strictEqual(testShouldAutoClose(sup, [{ text: 'do', type: StandardTokenType.Other }], '{', 3), true);\n\t\tassert.strictEqual(testShouldAutoClose(sup, [{ text: 'do', type: StandardTokenType.Other }], 'a', 3), false);\n\t});\n\n\ttest('shouldAutoClosePair in not interesting line 2', () => {\n\t\tlet sup = new CharacterPairSupport({ autoClosingPairs: [{ open: '{', close: '}' }] });\n\t\tassert.strictEqual(testShouldAutoClose(sup, [{ text: 'do', type: StandardTokenType.String }], '{', 3), true);\n\t\tassert.strictEqual(testShouldAutoClose(sup, [{ text: 'do', type: StandardTokenType.String }], 'a', 3), false);\n\t});\n\n\ttest('shouldAutoClosePair in interesting line 1', () => {\n\t\tlet sup = new CharacterPairSupport({ autoClosingPairs: [{ open: '{', close: '}', notIn: ['string', 'comment'] }] });\n\t\tassert.strictEqual(testShouldAutoClose(sup, [{ text: '\"a\"', type: StandardTokenType.String }], '{', 1), false);\n\t\tassert.strictEqual(testShouldAutoClose(sup, [{ text: '\"a\"', type: StandardTokenType.String }], 'a', 1), false);\n\t\tassert.strictEqual(testShouldAutoClose(sup, [{ text: '\"a\"', type: StandardTokenType.String }], '{', 2), false);\n\t\tassert.strictEqual(testShouldAutoClose(sup, [{ text: '\"a\"', type: StandardTokenType.String }], 'a', 2), false);\n\t\tassert.strictEqual(testShouldAutoClose(sup, [{ text: '\"a\"', type: StandardTokenType.String }], '{', 3), false);\n\t\tassert.strictEqual(testShouldAutoClose(sup, [{ text: '\"a\"', type: StandardTokenType.String }], 'a', 3), false);\n\t\tassert.strictEqual(testShouldAutoClose(sup, [{ text: '\"a\"', type: StandardTokenType.String }], '{', 4), false);\n\t\tassert.strictEqual(testShouldAutoClose(sup, [{ text: '\"a\"', type: StandardTokenType.String }], 'a', 4), false);\n\t});\n\n\ttest('shouldAutoClosePair in interesting line 2', () => {\n\t\tlet sup = new CharacterPairSupport({ autoClosingPairs: [{ open: '{', close: '}', notIn: ['string', 'comment'] }] });\n\t\tassert.strictEqual(testShouldAutoClose(sup, [{ text: 'x=', type: StandardTokenType.Other }, { text: '\"a\"', type: StandardTokenType.String }, { text: ';', type: StandardTokenType.Other }], '{', 1), true);\n\t\tassert.strictEqual(testShouldAutoClose(sup, [{ text: 'x=', type: StandardTokenType.Other }, { text: '\"a\"', type: StandardTokenType.String }, { text: ';', type: StandardTokenType.Other }], 'a', 1), false);\n\t\tassert.strictEqual(testShouldAutoClose(sup, [{ text: 'x=', type: StandardTokenType.Other }, { text: '\"a\"', type: StandardTokenType.String }, { text: ';', type: StandardTokenType.Other }], '{', 2), true);\n\t\tassert.strictEqual(testShouldAutoClose(sup, [{ text: 'x=', type: StandardTokenType.Other }, { text: '\"a\"', type: StandardTokenType.String }, { text: ';', type: StandardTokenType.Other }], 'a', 2), false);\n\t\tassert.strictEqual(testShouldAutoClose(sup, [{ text: 'x=', type: StandardTokenType.Other }, { text: '\"a\"', type: StandardTokenType.String }, { text: ';', type: StandardTokenType.Other }], '{', 3), true);\n\t\tassert.strictEqual(testShouldAutoClose(sup, [{ text: 'x=', type: StandardTokenType.Other }, { text: '\"a\"', type: StandardTokenType.String }, { text: ';', type: StandardTokenType.Other }], 'a', 3), false);\n\t\tassert.strictEqual(testShouldAutoClose(sup, [{ text: 'x=', type: StandardTokenType.Other }, { text: '\"a\"', type: StandardTokenType.String }, { text: ';', type: StandardTokenType.Other }], '{', 4), false);\n\t\tassert.strictEqual(testShouldAutoClose(sup, [{ text: 'x=', type: StandardTokenType.Other }, { text: '\"a\"', type: StandardTokenType.String }, { text: ';', type: StandardTokenType.Other }], 'a', 4), false);\n\t\tassert.strictEqual(testShouldAutoClose(sup, [{ text: 'x=', type: StandardTokenType.Other }, { text: '\"a\"', type: StandardTokenType.String }, { text: ';', type: StandardTokenType.Other }], '{', 5), false);\n\t\tassert.strictEqual(testShouldAutoClose(sup, [{ text: 'x=', type: StandardTokenType.Other }, { text: '\"a\"', type: StandardTokenType.String }, { text: ';', type: StandardTokenType.Other }], 'a', 5), false);\n\t\tassert.strictEqual(testShouldAutoClose(sup, [{ text: 'x=', type: StandardTokenType.Other }, { text: '\"a\"', type: StandardTokenType.String }, { text: ';', type: StandardTokenType.Other }], '{', 6), false);\n\t\tassert.strictEqual(testShouldAutoClose(sup, [{ text: 'x=', type: StandardTokenType.Other }, { text: '\"a\"', type: StandardTokenType.String }, { text: ';', type: StandardTokenType.Other }], 'a', 6), false);\n\t\tassert.strictEqual(testShouldAutoClose(sup, [{ text: 'x=', type: StandardTokenType.Other }, { text: '\"a\"', type: StandardTokenType.String }, { text: ';', type: StandardTokenType.Other }], '{', 7), true);\n\t\tassert.strictEqual(testShouldAutoClose(sup, [{ text: 'x=', type: StandardTokenType.Other }, { text: '\"a\"', type: StandardTokenType.String }, { text: ';', type: StandardTokenType.Other }], 'a', 7), false);\n\t});\n\n\ttest('shouldAutoClosePair in interesting line 3', () => {\n\t\tlet sup = new CharacterPairSupport({ autoClosingPairs: [{ open: '{', close: '}', notIn: ['string', 'comment'] }] });\n\t\tassert.strictEqual(testShouldAutoClose(sup, [{ text: ' ', type: StandardTokenType.Other }, { text: '//a', type: StandardTokenType.Comment }], '{', 1), true);\n\t\tassert.strictEqual(testShouldAutoClose(sup, [{ text: ' ', type: StandardTokenType.Other }, { text: '//a', type: StandardTokenType.Comment }], 'a', 1), false);\n\t\tassert.strictEqual(testShouldAutoClose(sup, [{ text: ' ', type: StandardTokenType.Other }, { text: '//a', type: StandardTokenType.Comment }], '{', 2), true);\n\t\tassert.strictEqual(testShouldAutoClose(sup, [{ text: ' ', type: StandardTokenType.Other }, { text: '//a', type: StandardTokenType.Comment }], 'a', 2), false);\n\t\tassert.strictEqual(testShouldAutoClose(sup, [{ text: ' ', type: StandardTokenType.Other }, { text: '//a', type: StandardTokenType.Comment }], '{', 3), false);\n\t\tassert.strictEqual(testShouldAutoClose(sup, [{ text: ' ', type: StandardTokenType.Other }, { text: '//a', type: StandardTokenType.Comment }], 'a', 3), false);\n\t\tassert.strictEqual(testShouldAutoClose(sup, [{ text: ' ', type: StandardTokenType.Other }, { text: '//a', type: StandardTokenType.Comment }], '{', 4), false);\n\t\tassert.strictEqual(testShouldAutoClose(sup, [{ text: ' ', type: StandardTokenType.Other }, { text: '//a', type: StandardTokenType.Comment }], 'a', 4), false);\n\t\tassert.strictEqual(testShouldAutoClose(sup, [{ text: ' ', type: StandardTokenType.Other }, { text: '//a', type: StandardTokenType.Comment }], '{', 5), false);\n\t\tassert.strictEqual(testShouldAutoClose(sup, [{ text: ' ', type: StandardTokenType.Other }, { text: '//a', type: StandardTokenType.Comment }], 'a', 5), false);\n\t});\n\n});\n"]}