{"version":3,"file":"languageConfiguration.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/test/common/modes/languageConfiguration.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { LanguageIdentifier, StandardTokenType } from 'vs/editor/common/modes';\nimport { StandardAutoClosingPairConditional } from 'vs/editor/common/modes/languageConfiguration';\nimport { LanguageConfigurationRegistry } from 'vs/editor/common/modes/languageConfigurationRegistry';\n\nsuite('StandardAutoClosingPairConditional', () => {\n\n\ttest('Missing notIn', () => {\n\t\tlet v = new StandardAutoClosingPairConditional({ open: '{', close: '}' });\n\t\tassert.strictEqual(v.isOK(StandardTokenType.Other), true);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.Comment), true);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.String), true);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.RegEx), true);\n\t});\n\n\ttest('Empty notIn', () => {\n\t\tlet v = new StandardAutoClosingPairConditional({ open: '{', close: '}', notIn: [] });\n\t\tassert.strictEqual(v.isOK(StandardTokenType.Other), true);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.Comment), true);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.String), true);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.RegEx), true);\n\t});\n\n\ttest('Invalid notIn', () => {\n\t\tlet v = new StandardAutoClosingPairConditional({ open: '{', close: '}', notIn: ['bla'] });\n\t\tassert.strictEqual(v.isOK(StandardTokenType.Other), true);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.Comment), true);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.String), true);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.RegEx), true);\n\t});\n\n\ttest('notIn in strings', () => {\n\t\tlet v = new StandardAutoClosingPairConditional({ open: '{', close: '}', notIn: ['string'] });\n\t\tassert.strictEqual(v.isOK(StandardTokenType.Other), true);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.Comment), true);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.String), false);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.RegEx), true);\n\t});\n\n\ttest('notIn in comments', () => {\n\t\tlet v = new StandardAutoClosingPairConditional({ open: '{', close: '}', notIn: ['comment'] });\n\t\tassert.strictEqual(v.isOK(StandardTokenType.Other), true);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.Comment), false);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.String), true);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.RegEx), true);\n\t});\n\n\ttest('notIn in regex', () => {\n\t\tlet v = new StandardAutoClosingPairConditional({ open: '{', close: '}', notIn: ['regex'] });\n\t\tassert.strictEqual(v.isOK(StandardTokenType.Other), true);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.Comment), true);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.String), true);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.RegEx), false);\n\t});\n\n\ttest('notIn in strings nor comments', () => {\n\t\tlet v = new StandardAutoClosingPairConditional({ open: '{', close: '}', notIn: ['string', 'comment'] });\n\t\tassert.strictEqual(v.isOK(StandardTokenType.Other), true);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.Comment), false);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.String), false);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.RegEx), true);\n\t});\n\n\ttest('notIn in strings nor regex', () => {\n\t\tlet v = new StandardAutoClosingPairConditional({ open: '{', close: '}', notIn: ['string', 'regex'] });\n\t\tassert.strictEqual(v.isOK(StandardTokenType.Other), true);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.Comment), true);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.String), false);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.RegEx), false);\n\t});\n\n\ttest('notIn in comments nor regex', () => {\n\t\tlet v = new StandardAutoClosingPairConditional({ open: '{', close: '}', notIn: ['comment', 'regex'] });\n\t\tassert.strictEqual(v.isOK(StandardTokenType.Other), true);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.Comment), false);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.String), true);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.RegEx), false);\n\t});\n\n\ttest('notIn in strings, comments nor regex', () => {\n\t\tlet v = new StandardAutoClosingPairConditional({ open: '{', close: '}', notIn: ['string', 'comment', 'regex'] });\n\t\tassert.strictEqual(v.isOK(StandardTokenType.Other), true);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.Comment), false);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.String), false);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.RegEx), false);\n\t});\n\n\ttest('language configurations priorities', () => {\n\t\tconst id = new LanguageIdentifier('testLang1', 15);\n\t\tconst d1 = LanguageConfigurationRegistry.register(id, { comments: { lineComment: '1' } }, 100);\n\t\tconst d2 = LanguageConfigurationRegistry.register(id, { comments: { lineComment: '2' } }, 10);\n\t\tassert.strictEqual(LanguageConfigurationRegistry.getComments(id.id)?.lineCommentToken, '1');\n\t\td1.dispose();\n\t\td2.dispose();\n\t});\n});\n"]}