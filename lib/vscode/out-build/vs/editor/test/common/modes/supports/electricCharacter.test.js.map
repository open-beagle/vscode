{"version":3,"file":"electricCharacter.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/test/common/modes/supports/electricCharacter.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAQhG,MAAM,sBAAsB,GAAG,IAAI,0BAAkB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IAEjE,KAAK,CAAC,iCAAiC,EAAE,GAAG,EAAE;QAC7C,SAAS,wBAAwB,CAAC,wBAAyD,EAAE,IAAiB,EAAE,SAAiB,EAAE,MAAc;YAChJ,OAAO,wBAAwB,CAAC,mBAAmB,CAAC,SAAS,EAAE,CAAA,GAAA,2CAA0B,CAAA,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC,CAAC;QAC1G,CAAC;QAED,SAAS,eAAe,CAAC,wBAAyD,EAAE,IAAiB,EAAE,SAAiB,EAAE,MAAc;YACvI,IAAI,MAAM,GAAG,wBAAwB,CAAC,wBAAwB,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;YACzF,MAAM,CAAC,eAAe,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QACtC,CAAC;QAED,SAAS,gBAAgB,CAAC,wBAAyD,EAAE,IAAiB,EAAE,SAAiB,EAAE,MAAc,EAAE,gBAAwB;YAClK,IAAI,MAAM,GAAG,wBAAwB,CAAC,wBAAwB,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;YACzF,MAAM,CAAC,eAAe,CAAC,MAAM,EAAE,EAAE,gBAAgB,EAAE,gBAAgB,EAAE,CAAC,CAAC;QACxE,CAAC;QAED,IAAI,CAAC,mDAAmD,EAAE,GAAG,EAAE;YAC9D,IAAI,GAAG,GAAG,IAAI,mDAA+B,CAC5C,IAAI,mCAAgB,CAAC,sBAAsB,EAAE;gBAC5C,CAAC,GAAG,EAAE,GAAG,CAAC;gBACV,CAAC,GAAG,EAAE,GAAG,CAAC;aACV,CAAC,CACF,CAAC;YAEF,MAAM,CAAC,eAAe,CAAC,GAAG,CAAC,qBAAqB,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,kBAAkB,EAAE,GAAG,EAAE;YAC7B,IAAI,GAAG,GAAG,IAAI,mDAA+B,CAC5C,IAAI,mCAAgB,CAAC,sBAAsB,EAAE;gBAC5C,CAAC,GAAG,EAAE,GAAG,CAAC;gBACV,CAAC,GAAG,EAAE,GAAG,CAAC;aACV,CAAC,CACF,CAAC;YAEF,eAAe,CAAC,GAAG,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,eAAyB,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;YAChF,eAAe,CAAC,GAAG,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,eAAyB,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;YAChF,eAAe,CAAC,GAAG,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,eAAyB,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;YAEhF,eAAe,CAAC,GAAG,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,eAAyB,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;YAChF,eAAe,CAAC,GAAG,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,eAAyB,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;YAChF,gBAAgB,CAAC,GAAG,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,eAAyB,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;QACvF,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { LanguageIdentifier, StandardTokenType } from 'vs/editor/common/modes';\nimport { BracketElectricCharacterSupport, IElectricAction } from 'vs/editor/common/modes/supports/electricCharacter';\nimport { RichEditBrackets } from 'vs/editor/common/modes/supports/richEditBrackets';\nimport { TokenText, createFakeScopedLineTokens } from 'vs/editor/test/common/modesTestUtils';\n\nconst fakeLanguageIdentifier = new LanguageIdentifier('test', 3);\n\nsuite('Editor Modes - Auto Indentation', () => {\n\tfunction _testOnElectricCharacter(electricCharacterSupport: BracketElectricCharacterSupport, line: TokenText[], character: string, offset: number): IElectricAction | null {\n\t\treturn electricCharacterSupport.onElectricCharacter(character, createFakeScopedLineTokens(line), offset);\n\t}\n\n\tfunction testDoesNothing(electricCharacterSupport: BracketElectricCharacterSupport, line: TokenText[], character: string, offset: number): void {\n\t\tlet actual = _testOnElectricCharacter(electricCharacterSupport, line, character, offset);\n\t\tassert.deepStrictEqual(actual, null);\n\t}\n\n\tfunction testMatchBracket(electricCharacterSupport: BracketElectricCharacterSupport, line: TokenText[], character: string, offset: number, matchOpenBracket: string): void {\n\t\tlet actual = _testOnElectricCharacter(electricCharacterSupport, line, character, offset);\n\t\tassert.deepStrictEqual(actual, { matchOpenBracket: matchOpenBracket });\n\t}\n\n\ttest('getElectricCharacters uses all sources and dedups', () => {\n\t\tlet sup = new BracketElectricCharacterSupport(\n\t\t\tnew RichEditBrackets(fakeLanguageIdentifier, [\n\t\t\t\t['{', '}'],\n\t\t\t\t['(', ')']\n\t\t\t])\n\t\t);\n\n\t\tassert.deepStrictEqual(sup.getElectricCharacters(), ['}', ')']);\n\t});\n\n\ttest('matchOpenBracket', () => {\n\t\tlet sup = new BracketElectricCharacterSupport(\n\t\t\tnew RichEditBrackets(fakeLanguageIdentifier, [\n\t\t\t\t['{', '}'],\n\t\t\t\t['(', ')']\n\t\t\t])\n\t\t);\n\n\t\ttestDoesNothing(sup, [{ text: '\\t{', type: StandardTokenType.Other }], '\\t', 1);\n\t\ttestDoesNothing(sup, [{ text: '\\t{', type: StandardTokenType.Other }], '\\t', 2);\n\t\ttestDoesNothing(sup, [{ text: '\\t\\t', type: StandardTokenType.Other }], '{', 3);\n\n\t\ttestDoesNothing(sup, [{ text: '\\t}', type: StandardTokenType.Other }], '\\t', 1);\n\t\ttestDoesNothing(sup, [{ text: '\\t}', type: StandardTokenType.Other }], '\\t', 2);\n\t\ttestMatchBracket(sup, [{ text: '\\t\\t', type: StandardTokenType.Other }], '}', 3, '}');\n\t});\n});\n"]}