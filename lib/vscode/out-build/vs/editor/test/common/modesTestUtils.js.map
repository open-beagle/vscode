{"version":3,"file":"modesTestUtils.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/test/common/modesTestUtils.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAWhG,SAAgB,0BAA0B,CAAC,SAAsB;QAChE,IAAI,MAAM,GAAG,IAAI,WAAW,CAAC,SAAS,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC;QACpD,IAAI,IAAI,GAAG,EAAE,CAAC;QAEd,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;YACrD,IAAI,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;YAE5B,IAAI,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC;YAC9B,IAAI,QAAQ,GAAG,CACd,CAAC,QAAQ,CAAC,IAAI,6BAAoC,CAAC,CACnD,KAAK,CAAC,CAAC;YAER,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC;YAC/B,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC;YAChC,IAAI,IAAI,QAAQ,CAAC,IAAI,CAAC;SACtB;QAED,uBAAU,CAAC,kBAAkB,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QACnD,OAAO,CAAA,GAAA,iCAAsB,CAAA,CAAC,IAAI,uBAAU,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;IAChE,CAAC;IAnBD,gEAmBC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { LineTokens } from 'vs/editor/common/core/lineTokens';\nimport { MetadataConsts, StandardTokenType } from 'vs/editor/common/modes';\nimport { ScopedLineTokens, createScopedLineTokens } from 'vs/editor/common/modes/supports';\n\nexport interface TokenText {\n\ttext: string;\n\ttype: StandardTokenType;\n}\n\nexport function createFakeScopedLineTokens(rawTokens: TokenText[]): ScopedLineTokens {\n\tlet tokens = new Uint32Array(rawTokens.length << 1);\n\tlet line = '';\n\n\tfor (let i = 0, len = rawTokens.length; i < len; i++) {\n\t\tlet rawToken = rawTokens[i];\n\n\t\tlet startOffset = line.length;\n\t\tlet metadata = (\n\t\t\t(rawToken.type << MetadataConsts.TOKEN_TYPE_OFFSET)\n\t\t) >>> 0;\n\n\t\ttokens[(i << 1)] = startOffset;\n\t\ttokens[(i << 1) + 1] = metadata;\n\t\tline += rawToken.text;\n\t}\n\n\tLineTokens.convertToEndOffset(tokens, line.length);\n\treturn createScopedLineTokens(new LineTokens(tokens, line), 0);\n}\n"]}