{"version":3,"file":"cursorAtomicMoveOperations.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/test/common/controller/cursorAtomicMoveOperations.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { AtomicTabMoveOperations, Direction } from 'vs/editor/common/controller/cursorAtomicMoveOperations';\n\nsuite('Cursor move command test', () => {\n\n\ttest('Test whitespaceVisibleColumn', () => {\n\t\tconst testCases = [\n\t\t\t{\n\t\t\t\tlineContent: '        ',\n\t\t\t\ttabSize: 4,\n\t\t\t\texpectedPrevTabStopPosition: [-1, 0, 0, 0, 0, 4, 4, 4, 4, -1],\n\t\t\t\texpectedPrevTabStopVisibleColumn: [-1, 0, 0, 0, 0, 4, 4, 4, 4, -1],\n\t\t\t\texpectedVisibleColumn: [0, 1, 2, 3, 4, 5, 6, 7, 8, -1],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlineContent: '  ',\n\t\t\t\ttabSize: 4,\n\t\t\t\texpectedPrevTabStopPosition: [-1, 0, 0, -1],\n\t\t\t\texpectedPrevTabStopVisibleColumn: [-1, 0, 0, -1],\n\t\t\t\texpectedVisibleColumn: [0, 1, 2, -1],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlineContent: '\\t',\n\t\t\t\ttabSize: 4,\n\t\t\t\texpectedPrevTabStopPosition: [-1, 0, -1],\n\t\t\t\texpectedPrevTabStopVisibleColumn: [-1, 0, -1],\n\t\t\t\texpectedVisibleColumn: [0, 4, -1],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlineContent: '\\t ',\n\t\t\t\ttabSize: 4,\n\t\t\t\texpectedPrevTabStopPosition: [-1, 0, 1, -1],\n\t\t\t\texpectedPrevTabStopVisibleColumn: [-1, 0, 4, -1],\n\t\t\t\texpectedVisibleColumn: [0, 4, 5, -1],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlineContent: ' \\t\\t ',\n\t\t\t\ttabSize: 4,\n\t\t\t\texpectedPrevTabStopPosition: [-1, 0, 0, 2, 3, -1],\n\t\t\t\texpectedPrevTabStopVisibleColumn: [-1, 0, 0, 4, 8, -1],\n\t\t\t\texpectedVisibleColumn: [0, 1, 4, 8, 9, -1],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlineContent: ' \\tA',\n\t\t\t\ttabSize: 4,\n\t\t\t\texpectedPrevTabStopPosition: [-1, 0, 0, -1, -1],\n\t\t\t\texpectedPrevTabStopVisibleColumn: [-1, 0, 0, -1, -1],\n\t\t\t\texpectedVisibleColumn: [0, 1, 4, -1, -1],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlineContent: 'A',\n\t\t\t\ttabSize: 4,\n\t\t\t\texpectedPrevTabStopPosition: [-1, -1, -1],\n\t\t\t\texpectedPrevTabStopVisibleColumn: [-1, -1, -1],\n\t\t\t\texpectedVisibleColumn: [0, -1, -1],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlineContent: '',\n\t\t\t\ttabSize: 4,\n\t\t\t\texpectedPrevTabStopPosition: [-1, -1],\n\t\t\t\texpectedPrevTabStopVisibleColumn: [-1, -1],\n\t\t\t\texpectedVisibleColumn: [0, -1],\n\t\t\t},\n\t\t];\n\n\t\tfor (const testCase of testCases) {\n\t\t\tconst maxPosition = testCase.expectedVisibleColumn.length;\n\t\t\tfor (let position = 0; position < maxPosition; position++) {\n\t\t\t\tconst actual = AtomicTabMoveOperations.whitespaceVisibleColumn(testCase.lineContent, position, testCase.tabSize);\n\t\t\t\tconst expected = [\n\t\t\t\t\ttestCase.expectedPrevTabStopPosition[position],\n\t\t\t\t\ttestCase.expectedPrevTabStopVisibleColumn[position],\n\t\t\t\t\ttestCase.expectedVisibleColumn[position]\n\t\t\t\t];\n\t\t\t\tassert.deepStrictEqual(actual, expected);\n\t\t\t}\n\t\t}\n\t});\n\n\ttest('Test atomicPosition', () => {\n\t\tconst testCases = [\n\t\t\t{\n\t\t\t\tlineContent: '        ',\n\t\t\t\ttabSize: 4,\n\t\t\t\texpectedLeft: [-1, 0, 0, 0, 0, 4, 4, 4, 4, -1],\n\t\t\t\texpectedRight: [4, 4, 4, 4, 8, 8, 8, 8, -1, -1],\n\t\t\t\texpectedNearest: [0, 0, 0, 4, 4, 4, 4, 8, 8, -1],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlineContent: ' \\t',\n\t\t\t\ttabSize: 4,\n\t\t\t\texpectedLeft: [-1, 0, 0, -1],\n\t\t\t\texpectedRight: [2, 2, -1, -1],\n\t\t\t\texpectedNearest: [0, 0, 2, -1],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlineContent: '\\t ',\n\t\t\t\ttabSize: 4,\n\t\t\t\texpectedLeft: [-1, 0, -1, -1],\n\t\t\t\texpectedRight: [1, -1, -1, -1],\n\t\t\t\texpectedNearest: [0, 1, -1, -1],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlineContent: ' \\t ',\n\t\t\t\ttabSize: 4,\n\t\t\t\texpectedLeft: [-1, 0, 0, -1, -1],\n\t\t\t\texpectedRight: [2, 2, -1, -1, -1],\n\t\t\t\texpectedNearest: [0, 0, 2, -1, -1],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlineContent: '        A',\n\t\t\t\ttabSize: 4,\n\t\t\t\texpectedLeft: [-1, 0, 0, 0, 0, 4, 4, 4, 4, -1, -1],\n\t\t\t\texpectedRight: [4, 4, 4, 4, 8, 8, 8, 8, -1, -1, -1],\n\t\t\t\texpectedNearest: [0, 0, 0, 4, 4, 4, 4, 8, 8, -1, -1],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlineContent: '      foo',\n\t\t\t\ttabSize: 4,\n\t\t\t\texpectedLeft: [-1, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1],\n\t\t\t\texpectedRight: [4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1],\n\t\t\t\texpectedNearest: [0, 0, 0, 4, 4, -1, -1, -1, -1, -1, -1],\n\t\t\t},\n\t\t];\n\n\t\tfor (const testCase of testCases) {\n\t\t\tfor (const { direction, expected } of [\n\t\t\t\t{\n\t\t\t\t\tdirection: Direction.Left,\n\t\t\t\t\texpected: testCase.expectedLeft,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdirection: Direction.Right,\n\t\t\t\t\texpected: testCase.expectedRight,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdirection: Direction.Nearest,\n\t\t\t\t\texpected: testCase.expectedNearest,\n\t\t\t\t},\n\t\t\t]) {\n\n\t\t\t\tconst actual = expected.map((_, i) => AtomicTabMoveOperations.atomicPosition(testCase.lineContent, i, testCase.tabSize, direction));\n\t\t\t\tassert.deepStrictEqual(actual, expected);\n\t\t\t}\n\t\t}\n\t});\n});\n"]}