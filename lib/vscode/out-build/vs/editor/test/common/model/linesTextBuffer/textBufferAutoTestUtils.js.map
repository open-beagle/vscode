{"version":3,"file":"textBufferAutoTestUtils.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/test/common/model/linesTextBuffer/textBufferAutoTestUtils.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from 'vs/base/common/charCode';\nimport { splitLines } from 'vs/base/common/strings';\nimport { Range } from 'vs/editor/common/core/range';\nimport { ValidAnnotatedEditOperation } from 'vs/editor/common/model';\n\nexport function getRandomInt(min: number, max: number): number {\n\treturn Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport function getRandomEOLSequence(): string {\n\tlet rnd = getRandomInt(1, 3);\n\tif (rnd === 1) {\n\t\treturn '\\n';\n\t}\n\tif (rnd === 2) {\n\t\treturn '\\r';\n\t}\n\treturn '\\r\\n';\n}\n\nexport function getRandomString(minLength: number, maxLength: number): string {\n\tlet length = getRandomInt(minLength, maxLength);\n\tlet r = '';\n\tfor (let i = 0; i < length; i++) {\n\t\tr += String.fromCharCode(getRandomInt(CharCode.a, CharCode.z));\n\t}\n\treturn r;\n}\n\nexport function generateRandomEdits(chunks: string[], editCnt: number): ValidAnnotatedEditOperation[] {\n\tlet lines: string[] = [];\n\tfor (const chunk of chunks) {\n\t\tlet newLines = splitLines(chunk);\n\t\tif (lines.length === 0) {\n\t\t\tlines.push(...newLines);\n\t\t} else {\n\t\t\tnewLines[0] = lines[lines.length - 1] + newLines[0];\n\t\t\tlines.splice(lines.length - 1, 1, ...newLines);\n\t\t}\n\t}\n\n\tlet ops: ValidAnnotatedEditOperation[] = [];\n\n\tfor (let i = 0; i < editCnt; i++) {\n\t\tlet line = getRandomInt(1, lines.length);\n\t\tlet startColumn = getRandomInt(1, Math.max(lines[line - 1].length, 1));\n\t\tlet endColumn = getRandomInt(startColumn, Math.max(lines[line - 1].length, startColumn));\n\t\tlet text: string = '';\n\t\tif (Math.random() < 0.5) {\n\t\t\ttext = getRandomString(5, 10);\n\t\t}\n\n\t\tops.push(new ValidAnnotatedEditOperation(null, new Range(line, startColumn, line, endColumn), text, false, false, false));\n\t\tlines[line - 1] = lines[line - 1].substring(0, startColumn - 1) + text + lines[line - 1].substring(endColumn - 1);\n\t}\n\n\treturn ops;\n}\n\nexport function generateSequentialInserts(chunks: string[], editCnt: number): ValidAnnotatedEditOperation[] {\n\tlet lines: string[] = [];\n\tfor (const chunk of chunks) {\n\t\tlet newLines = splitLines(chunk);\n\t\tif (lines.length === 0) {\n\t\t\tlines.push(...newLines);\n\t\t} else {\n\t\t\tnewLines[0] = lines[lines.length - 1] + newLines[0];\n\t\t\tlines.splice(lines.length - 1, 1, ...newLines);\n\t\t}\n\t}\n\n\tlet ops: ValidAnnotatedEditOperation[] = [];\n\n\tfor (let i = 0; i < editCnt; i++) {\n\t\tlet line = lines.length;\n\t\tlet column = lines[line - 1].length + 1;\n\t\tlet text: string = '';\n\t\tif (Math.random() < 0.5) {\n\t\t\ttext = '\\n';\n\t\t\tlines.push('');\n\t\t} else {\n\t\t\ttext = getRandomString(1, 2);\n\t\t\tlines[line - 1] += text;\n\t\t}\n\n\t\tops.push(new ValidAnnotatedEditOperation(null, new Range(line, column, line, column), text, false, false, false));\n\t}\n\n\treturn ops;\n}\n\nexport function generateRandomReplaces(chunks: string[], editCnt: number, searchStringLen: number, replaceStringLen: number): ValidAnnotatedEditOperation[] {\n\tlet lines: string[] = [];\n\tfor (const chunk of chunks) {\n\t\tlet newLines = splitLines(chunk);\n\t\tif (lines.length === 0) {\n\t\t\tlines.push(...newLines);\n\t\t} else {\n\t\t\tnewLines[0] = lines[lines.length - 1] + newLines[0];\n\t\t\tlines.splice(lines.length - 1, 1, ...newLines);\n\t\t}\n\t}\n\n\tlet ops: ValidAnnotatedEditOperation[] = [];\n\tlet chunkSize = Math.max(1, Math.floor(lines.length / editCnt));\n\tlet chunkCnt = Math.floor(lines.length / chunkSize);\n\tlet replaceString = getRandomString(replaceStringLen, replaceStringLen);\n\n\tlet previousChunksLength = 0;\n\tfor (let i = 0; i < chunkCnt; i++) {\n\t\tlet startLine = previousChunksLength + 1;\n\t\tlet endLine = previousChunksLength + chunkSize;\n\t\tlet line = getRandomInt(startLine, endLine);\n\t\tlet maxColumn = lines[line - 1].length + 1;\n\t\tlet startColumn = getRandomInt(1, maxColumn);\n\t\tlet endColumn = Math.min(maxColumn, startColumn + searchStringLen);\n\n\t\tops.push(new ValidAnnotatedEditOperation(null, new Range(line, startColumn, line, endColumn), replaceString, false, false, false));\n\t\tpreviousChunksLength = endLine;\n\t}\n\n\treturn ops;\n}\n\nexport function generateRandomChunkWithLF(minLength: number, maxLength: number): string {\n\tlet length = getRandomInt(minLength, maxLength);\n\tlet r = '';\n\tfor (let i = 0; i < length; i++) {\n\t\tlet randomI = getRandomInt(0, CharCode.z - CharCode.a + 1);\n\t\tif (randomI === 0 && Math.random() < 0.3) {\n\t\t\tr += '\\n';\n\t\t} else {\n\t\t\tr += String.fromCharCode(randomI + CharCode.a - 1);\n\t\t}\n\t}\n\treturn r;\n}\n"]}