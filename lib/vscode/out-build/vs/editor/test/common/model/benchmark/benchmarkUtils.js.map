{"version":3,"file":"benchmarkUtils.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/test/common/model/benchmark/benchmarkUtils.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAKhG,SAAgB,WAAW,CAAI,EAAU,EAAE,EAAO,EAAE,EAAkB;QACrE,IAAI,OAAO,GAAa,CAAC,EAAE,CAAC,CAAC;QAC7B,KAAK,MAAM,CAAC,IAAI,EAAE,EAAE;YACnB,IAAI,KAAK,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;YAC7B,EAAE,CAAC,CAAC,CAAC,CAAC;YACN,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACjC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;SACtE;QACD,OAAO,CAAC,GAAG,CAAC,GAAG,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC;IAC9C,CAAC;IATD,kCASC;IAmBD,MAAa,cAAc;QAK1B,YAAY,YAAkD;YAC7D,IAAI,CAAC,IAAI,GAAG,YAAY,CAAC,IAAI,CAAC;YAC9B,IAAI,CAAC,UAAU,GAAG,YAAY,CAAC,UAAU,CAAC;YAC1C,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QACtB,CAAC;QAED,GAAG,CAAC,SAAqB;YACxB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACjC,CAAC;QAED,GAAG;YACF,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,IAAI,yCAAyC,CAAC,CAAC;YACpE,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;YACjC,KAAK,MAAM,SAAS,IAAI,IAAI,CAAC,UAAU,EAAE;gBACxC,IAAI,OAAO,GAAa,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;gBACzC,CAAC,IAAI,uDAA0B,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,OAA2B,EAAE,EAAE;oBAC1E,IAAI,aAAa,GAAG,CAAC,CAAC;oBACtB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC,EAAE,EAAE;wBACzC,IAAI,OAAO,GAAG,SAAS,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;wBAC7C,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,YAAqB,CAAC,UAAU,CAAC;wBAC5D,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;wBAC3B,IAAI,KAAK,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;wBAC7B,SAAS,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;wBACrB,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;wBACjC,aAAa,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;qBAC1D;oBACD,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,aAAa,GAAG,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;gBAC3E,CAAC,CAAC,CAAC;gBACH,OAAO,CAAC,GAAG,CAAC,GAAG,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC;aAC7C;YACD,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACnB,CAAC;KACD;IArCD,wCAqCC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DefaultEndOfLine, ITextBuffer, ITextBufferBuilder, ITextBufferFactory } from 'vs/editor/common/model';\nimport { PieceTreeTextBufferBuilder } from 'vs/editor/common/model/pieceTreeTextBuffer/pieceTreeTextBufferBuilder';\n\nexport function doBenchmark<T>(id: string, ts: T[], fn: (t: T) => void) {\n\tlet columns: string[] = [id];\n\tfor (const t of ts) {\n\t\tlet start = process.hrtime();\n\t\tfn(t);\n\t\tlet diff = process.hrtime(start);\n\t\tcolumns.push(`${(diff[0] * 1000 + diff[1] / 1000000).toFixed(3)} ms`);\n\t}\n\tconsole.log('|' + columns.join('\\t|') + '|');\n}\n\nexport interface IBenchmark {\n\tname: string;\n\t/**\n\t * Before each cycle, this function will be called to create TextBufferFactory\n\t */\n\tbuildBuffer: (textBufferBuilder: ITextBufferBuilder) => ITextBufferFactory;\n\t/**\n\t * Before each cycle, this function will be called to do pre-work for text buffer.\n\t * This will be called onece `buildBuffer` is finished.\n\t */\n\tpreCycle: (textBuffer: ITextBuffer) => void;\n\t/**\n\t * The function we are benchmarking\n\t */\n\tfn: (textBuffer: ITextBuffer) => void;\n}\n\nexport class BenchmarkSuite {\n\tname: string;\n\titerations: number;\n\tbenchmarks: IBenchmark[];\n\n\tconstructor(suiteOptions: { name: string, iterations: number }) {\n\t\tthis.name = suiteOptions.name;\n\t\tthis.iterations = suiteOptions.iterations;\n\t\tthis.benchmarks = [];\n\t}\n\n\tadd(benchmark: IBenchmark) {\n\t\tthis.benchmarks.push(benchmark);\n\t}\n\n\trun() {\n\t\tconsole.log(`|${this.name}\\t|line buffer\\t|piece table\\t|edcore\\t`);\n\t\tconsole.log('|---|---|---|---|');\n\t\tfor (const benchmark of this.benchmarks) {\n\t\t\tlet columns: string[] = [benchmark.name];\n\t\t\t[new PieceTreeTextBufferBuilder()].forEach((builder: ITextBufferBuilder) => {\n\t\t\t\tlet timeDiffTotal = 0;\n\t\t\t\tfor (let j = 0; j < this.iterations; j++) {\n\t\t\t\t\tlet factory = benchmark.buildBuffer(builder);\n\t\t\t\t\tlet buffer = factory.create(DefaultEndOfLine.LF).textBuffer;\n\t\t\t\t\tbenchmark.preCycle(buffer);\n\t\t\t\t\tlet start = process.hrtime();\n\t\t\t\t\tbenchmark.fn(buffer);\n\t\t\t\t\tlet diff = process.hrtime(start);\n\t\t\t\t\ttimeDiffTotal += (diff[0] * 1000 * 1000 + diff[1] / 1000);\n\t\t\t\t}\n\t\t\t\tcolumns.push(`${(timeDiffTotal / 1000 / this.iterations).toFixed(3)} ms`);\n\t\t\t});\n\t\t\tconsole.log('|' + columns.join('\\t|') + '|');\n\t\t}\n\t\tconsole.log('\\n');\n\t}\n}\n"]}