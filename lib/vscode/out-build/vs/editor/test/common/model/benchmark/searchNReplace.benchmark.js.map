{"version":3,"file":"searchNReplace.benchmark.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/test/common/model/benchmark/searchNReplace.benchmark.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAMhG,MAAM,SAAS,GAAG,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,GAAG,IAAI,EAAE,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC;IAEzD,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;QACjC,MAAM,MAAM,GAAa,EAAE,CAAC;QAE5B,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;QACpD,IAAI,QAAQ,KAAK,CAAC,EAAE;YACnB,MAAM,CAAC,IAAI,CAAC,CAAA,GAAA,mDAAyB,CAAA,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC;SAC3D;aAAM;YACN,MAAM,KAAK,GAAG,CAAA,GAAA,mDAAyB,CAAA,CAAC,EAAE,GAAG,IAAI,EAAE,EAAE,GAAG,IAAI,CAAC,CAAC;YAC9D,mBAAmB;YACnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,EAAE,EAAE;gBAClC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;aAC/C;SACD;QAED,MAAM,YAAY,GAAG,IAAI,+BAAc,CAAC;YACvC,IAAI,EAAE,cAAc,QAAQ,MAAM;YAClC,UAAU,EAAE,EAAE;SACd,CAAC,CAAC;QAEH,MAAM,KAAK,GAAG,CAAA,GAAA,gDAAsB,CAAA,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAEzD,KAAK,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE;YAC/B,YAAY,CAAC,GAAG,CAAC;gBAChB,IAAI,EAAE,WAAW,CAAC,cAAc;gBAChC,WAAW,EAAE,CAAC,iBAAqC,EAAE,EAAE;oBACtD,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE,CAAC,iBAAiB,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;oBACxD,OAAO,iBAAiB,CAAC,MAAM,EAAE,CAAC;gBACnC,CAAC;gBACD,QAAQ,EAAE,CAAC,UAAU,EAAE,EAAE;oBACxB,OAAO,UAAU,CAAC;gBACnB,CAAC;gBACD,EAAE,EAAE,CAAC,UAAU,EAAE,EAAE;oBAClB,UAAU,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;gBACxD,CAAC;aACD,CAAC,CAAC;SACH;QAED,YAAY,CAAC,GAAG,EAAE,CAAC;KACnB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ITextBufferBuilder } from 'vs/editor/common/model';\nimport { BenchmarkSuite } from 'vs/editor/test/common/model/benchmark/benchmarkUtils';\nimport { generateRandomChunkWithLF, generateRandomReplaces } from 'vs/editor/test/common/model/linesTextBuffer/textBufferAutoTestUtils';\n\nconst fileSizes = [1, 1000, 64 * 1000, 32 * 1000 * 1000];\n\nfor (const fileSize of fileSizes) {\n\tconst chunks: string[] = [];\n\n\tconst chunkCnt = Math.floor(fileSize / (64 * 1000));\n\tif (chunkCnt === 0) {\n\t\tchunks.push(generateRandomChunkWithLF(fileSize, fileSize));\n\t} else {\n\t\tconst chunk = generateRandomChunkWithLF(64 * 1000, 64 * 1000);\n\t\t// try to avoid OOM\n\t\tfor (let j = 0; j < chunkCnt; j++) {\n\t\t\tchunks.push(Buffer.from(chunk + j).toString());\n\t\t}\n\t}\n\n\tconst replaceSuite = new BenchmarkSuite({\n\t\tname: `File Size: ${fileSize}Byte`,\n\t\titerations: 10\n\t});\n\n\tconst edits = generateRandomReplaces(chunks, 500, 5, 10);\n\n\tfor (const i of [10, 100, 500]) {\n\t\treplaceSuite.add({\n\t\t\tname: `replace ${i} occurrences`,\n\t\t\tbuildBuffer: (textBufferBuilder: ITextBufferBuilder) => {\n\t\t\t\tchunks.forEach(ck => textBufferBuilder.acceptChunk(ck));\n\t\t\t\treturn textBufferBuilder.finish();\n\t\t\t},\n\t\t\tpreCycle: (textBuffer) => {\n\t\t\t\treturn textBuffer;\n\t\t\t},\n\t\t\tfn: (textBuffer) => {\n\t\t\t\ttextBuffer.applyEdits(edits.slice(0, i), false, false);\n\t\t\t}\n\t\t});\n\t}\n\n\treplaceSuite.run();\n}\n"]}