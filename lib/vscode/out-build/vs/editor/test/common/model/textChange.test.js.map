{"version":3,"file":"textChange.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/test/common/model/textChange.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { compressConsecutiveTextChanges, TextChange } from 'vs/editor/common/model/textChange';\n\nconst GENERATE_TESTS = false;\n\ninterface IGeneratedEdit {\n\toffset: number;\n\tlength: number;\n\ttext: string;\n}\n\nsuite('TextChangeCompressor', () => {\n\n\tfunction getResultingContent(initialContent: string, edits: IGeneratedEdit[]): string {\n\t\tlet content = initialContent;\n\t\tfor (let i = edits.length - 1; i >= 0; i--) {\n\t\t\tcontent = (\n\t\t\t\tcontent.substring(0, edits[i].offset) +\n\t\t\t\tedits[i].text +\n\t\t\t\tcontent.substring(edits[i].offset + edits[i].length)\n\t\t\t);\n\t\t}\n\t\treturn content;\n\t}\n\n\tfunction getTextChanges(initialContent: string, edits: IGeneratedEdit[]): TextChange[] {\n\t\tlet content = initialContent;\n\t\tlet changes: TextChange[] = new Array<TextChange>(edits.length);\n\t\tlet deltaOffset = 0;\n\n\t\tfor (let i = 0; i < edits.length; i++) {\n\t\t\tlet edit = edits[i];\n\n\t\t\tlet position = edit.offset + deltaOffset;\n\t\t\tlet length = edit.length;\n\t\t\tlet text = edit.text;\n\n\t\t\tlet oldText = content.substr(position, length);\n\n\t\t\tcontent = (\n\t\t\t\tcontent.substr(0, position) +\n\t\t\t\ttext +\n\t\t\t\tcontent.substr(position + length)\n\t\t\t);\n\n\t\t\tchanges[i] = new TextChange(edit.offset, oldText, position, text);\n\n\t\t\tdeltaOffset += text.length - length;\n\t\t}\n\n\t\treturn changes;\n\t}\n\n\tfunction assertCompression(initialText: string, edit1: IGeneratedEdit[], edit2: IGeneratedEdit[]): void {\n\n\t\tlet tmpText = getResultingContent(initialText, edit1);\n\t\tlet chg1 = getTextChanges(initialText, edit1);\n\n\t\tlet finalText = getResultingContent(tmpText, edit2);\n\t\tlet chg2 = getTextChanges(tmpText, edit2);\n\n\t\tlet compressedTextChanges = compressConsecutiveTextChanges(chg1, chg2);\n\n\t\t// Check that the compression was correct\n\t\tlet compressedDoTextEdits: IGeneratedEdit[] = compressedTextChanges.map((change) => {\n\t\t\treturn {\n\t\t\t\toffset: change.oldPosition,\n\t\t\t\tlength: change.oldLength,\n\t\t\t\ttext: change.newText\n\t\t\t};\n\t\t});\n\t\tlet actualDoResult = getResultingContent(initialText, compressedDoTextEdits);\n\t\tassert.strictEqual(actualDoResult, finalText);\n\n\t\tlet compressedUndoTextEdits: IGeneratedEdit[] = compressedTextChanges.map((change) => {\n\t\t\treturn {\n\t\t\t\toffset: change.newPosition,\n\t\t\t\tlength: change.newLength,\n\t\t\t\ttext: change.oldText\n\t\t\t};\n\t\t});\n\t\tlet actualUndoResult = getResultingContent(finalText, compressedUndoTextEdits);\n\t\tassert.strictEqual(actualUndoResult, initialText);\n\t}\n\n\ttest('simple 1', () => {\n\t\tassertCompression(\n\t\t\t'',\n\t\t\t[{ offset: 0, length: 0, text: 'h' }],\n\t\t\t[{ offset: 1, length: 0, text: 'e' }]\n\t\t);\n\t});\n\n\ttest('simple 2', () => {\n\t\tassertCompression(\n\t\t\t'|',\n\t\t\t[{ offset: 0, length: 0, text: 'h' }],\n\t\t\t[{ offset: 2, length: 0, text: 'e' }]\n\t\t);\n\t});\n\n\ttest('complex1', () => {\n\t\tassertCompression(\n\t\t\t'abcdefghij',\n\t\t\t[\n\t\t\t\t{ offset: 0, length: 3, text: 'qh' },\n\t\t\t\t{ offset: 5, length: 0, text: '1' },\n\t\t\t\t{ offset: 8, length: 2, text: 'X' }\n\t\t\t],\n\t\t\t[\n\t\t\t\t{ offset: 1, length: 0, text: 'Z' },\n\t\t\t\t{ offset: 3, length: 3, text: 'Y' },\n\t\t\t]\n\t\t);\n\t});\n\n\t// test('issue #118041', () => {\n\t// \tassertCompression(\n\t// \t\t'﻿',\n\t// \t\t[\n\t// \t\t\t{ offset: 0, length: 1, text: '' },\n\t// \t\t],\n\t// \t\t[\n\t// \t\t\t{ offset: 1, length: 0, text: 'Z' },\n\t// \t\t\t{ offset: 3, length: 3, text: 'Y' },\n\t// \t\t]\n\t// \t);\n\t// })\n\n\ttest('gen1', () => {\n\t\tassertCompression(\n\t\t\t'kxm',\n\t\t\t[{ offset: 0, length: 1, text: 'tod_neu' }],\n\t\t\t[{ offset: 1, length: 2, text: 'sag_e' }]\n\t\t);\n\t});\n\n\ttest('gen2', () => {\n\t\tassertCompression(\n\t\t\t'kpb_r_v',\n\t\t\t[{ offset: 5, length: 2, text: 'a_jvf_l' }],\n\t\t\t[{ offset: 10, length: 2, text: 'w' }]\n\t\t);\n\t});\n\n\ttest('gen3', () => {\n\t\tassertCompression(\n\t\t\t'slu_w',\n\t\t\t[{ offset: 4, length: 1, text: '_wfw' }],\n\t\t\t[{ offset: 3, length: 5, text: '' }]\n\t\t);\n\t});\n\n\ttest('gen4', () => {\n\t\tassertCompression(\n\t\t\t'_e',\n\t\t\t[{ offset: 2, length: 0, text: 'zo_b' }],\n\t\t\t[{ offset: 1, length: 3, text: 'tra' }]\n\t\t);\n\t});\n\n\ttest('gen5', () => {\n\t\tassertCompression(\n\t\t\t'ssn_',\n\t\t\t[{ offset: 0, length: 2, text: 'tat_nwe' }],\n\t\t\t[{ offset: 2, length: 6, text: 'jm' }]\n\t\t);\n\t});\n\n\ttest('gen6', () => {\n\t\tassertCompression(\n\t\t\t'kl_nru',\n\t\t\t[{ offset: 4, length: 1, text: '' }],\n\t\t\t[{ offset: 1, length: 4, text: '__ut' }]\n\t\t);\n\t});\n\n\tconst _a = 'a'.charCodeAt(0);\n\tconst _z = 'z'.charCodeAt(0);\n\n\tfunction getRandomInt(min: number, max: number): number {\n\t\treturn Math.floor(Math.random() * (max - min + 1)) + min;\n\t}\n\n\tfunction getRandomString(minLength: number, maxLength: number): string {\n\t\tconst length = getRandomInt(minLength, maxLength);\n\t\tlet r = '';\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\tr += String.fromCharCode(getRandomInt(_a, _z));\n\t\t}\n\t\treturn r;\n\t}\n\n\tfunction getRandomEOL(): string {\n\t\tswitch (getRandomInt(1, 3)) {\n\t\t\tcase 1: return '\\r';\n\t\t\tcase 2: return '\\n';\n\t\t\tcase 3: return '\\r\\n';\n\t\t}\n\t\tthrow new Error(`not possible`);\n\t}\n\n\tfunction getRandomBuffer(small: boolean): string {\n\t\tlet lineCount = getRandomInt(1, small ? 3 : 10);\n\t\tlet lines: string[] = [];\n\t\tfor (let i = 0; i < lineCount; i++) {\n\t\t\tlines.push(getRandomString(0, small ? 3 : 10) + getRandomEOL());\n\t\t}\n\t\treturn lines.join('');\n\t}\n\n\tfunction getRandomEdits(content: string, min: number = 1, max: number = 5): IGeneratedEdit[] {\n\n\t\tlet result: IGeneratedEdit[] = [];\n\t\tlet cnt = getRandomInt(min, max);\n\n\t\tlet maxOffset = content.length;\n\n\t\twhile (cnt > 0 && maxOffset > 0) {\n\n\t\t\tlet offset = getRandomInt(0, maxOffset);\n\t\t\tlet length = getRandomInt(0, maxOffset - offset);\n\t\t\tlet text = getRandomBuffer(true);\n\n\t\t\tresult.push({\n\t\t\t\toffset: offset,\n\t\t\t\tlength: length,\n\t\t\t\ttext: text\n\t\t\t});\n\n\t\t\tmaxOffset = offset;\n\t\t\tcnt--;\n\t\t}\n\n\t\tresult.reverse();\n\n\t\treturn result;\n\t}\n\n\tclass GeneratedTest {\n\n\t\tprivate readonly _content: string;\n\t\tprivate readonly _edits1: IGeneratedEdit[];\n\t\tprivate readonly _edits2: IGeneratedEdit[];\n\n\t\tconstructor() {\n\t\t\tthis._content = getRandomBuffer(false).replace(/\\n/g, '_');\n\t\t\tthis._edits1 = getRandomEdits(this._content, 1, 5).map((e) => { return { offset: e.offset, length: e.length, text: e.text.replace(/\\n/g, '_') }; });\n\t\t\tlet tmp = getResultingContent(this._content, this._edits1);\n\t\t\tthis._edits2 = getRandomEdits(tmp, 1, 5).map((e) => { return { offset: e.offset, length: e.length, text: e.text.replace(/\\n/g, '_') }; });\n\t\t}\n\n\t\tpublic print(): void {\n\t\t\tconsole.log(`assertCompression(${JSON.stringify(this._content)}, ${JSON.stringify(this._edits1)}, ${JSON.stringify(this._edits2)});`);\n\t\t}\n\n\t\tpublic assert(): void {\n\t\t\tassertCompression(this._content, this._edits1, this._edits2);\n\t\t}\n\t}\n\n\tif (GENERATE_TESTS) {\n\t\tlet testNumber = 0;\n\t\twhile (true) {\n\t\t\ttestNumber++;\n\t\t\tconsole.log(`------RUNNING TextChangeCompressor TEST ${testNumber}`);\n\t\t\tlet test = new GeneratedTest();\n\t\t\ttry {\n\t\t\t\ttest.assert();\n\t\t\t} catch (err) {\n\t\t\t\tconsole.log(err);\n\t\t\t\ttest.print();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n});\n\nsuite('TextChange', () => {\n\n\ttest('issue #118041: unicode character undo bug', () => {\n\t\tconst textChange = new TextChange(428, '﻿', 428, '');\n\t\tconst buff = new Uint8Array(textChange.writeSize());\n\t\ttextChange.write(buff, 0);\n\t\tconst actual: TextChange[] = [];\n\t\tTextChange.read(buff, 0, actual);\n\t\tassert.deepStrictEqual(actual[0], textChange);\n\t});\n\n});\n"]}