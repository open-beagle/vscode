{"version":3,"file":"linesTextBufferBuilder.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/test/common/model/linesTextBuffer/linesTextBufferBuilder.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAQhG,SAAgB,qBAAqB,CAAC,IAAY,EAAE,GAAW,EAAE,yBAAkC,EAAE,eAAwB;QAC5H,MAAM,UAAU,GAAwB,CAAA,GAAA,mCAAuB,CAAA,CAAC,IAAI,CAAC,CAAC,MAAM,YAAqB,CAAC,UAAU,CAAC;QAE7G,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,yBAAyB,EAAE,EAAE,yBAAyB,CAAC,CAAC;QACtF,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,eAAe,EAAE,EAAE,eAAe,CAAC,CAAC;QAClE,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,EAAE,EAAE,GAAG,CAAC,CAAC;IAC9C,CAAC;IAND,sDAMC;IAED,KAAK,CAAC,cAAc,EAAE,GAAG,EAAE;QAE1B,IAAI,CAAC,IAAI,EAAE,GAAG,EAAE;YACf,qBAAqB,CAAC,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,IAAI,EAAE,GAAG,EAAE;YACf,qBAAqB,CAAC,aAAa,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,IAAI,EAAE,GAAG,EAAE;YACf,qBAAqB,CAAC,2BAA2B,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QACxE,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,IAAI,EAAE,GAAG,EAAE;YACf,qBAAqB,CAAC,iFAAiF,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QAC9H,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,4CAA4C,EAAE,GAAG,EAAE;YACvD,qBAAqB,CAAC,mFAAmF,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QAChI,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,4CAA4C,EAAE,GAAG,EAAE;YACvD,qBAAqB,CAAC,qFAAqF,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QACpI,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,4CAA4C,EAAE,GAAG,EAAE;YACvD,qBAAqB,CAAC,uFAAuF,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QACtI,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,cAAc,EAAE,GAAG,EAAE;YACzB,qBAAqB,CAAC,OAAO,CAAC,kBAAkB,GAAG,cAAc,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QACxF,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,cAAc,EAAE,GAAG,EAAE;YACzB,qBAAqB,CAAC,OAAO,CAAC,kBAAkB,GAAG,cAAc,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QACxF,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,gBAAgB,EAAE,GAAG,EAAE;YAC3B,qBAAqB,CAAC,qCAAqC,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QAChF,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,gBAAgB,EAAE,GAAG,EAAE;YAC3B,qBAAqB,CAAC,uCAAuC,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QAClF,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,kBAAkB,EAAE,GAAG,EAAE;YAC7B,qBAAqB,CAAC,+BAA+B,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QAC5E,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,kBAAkB,EAAE,GAAG,EAAE;YAC7B,qBAAqB,CAAC,2CAA2C,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;QACvF,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport * as strings from 'vs/base/common/strings';\nimport { DefaultEndOfLine } from 'vs/editor/common/model';\nimport { PieceTreeTextBuffer } from 'vs/editor/common/model/pieceTreeTextBuffer/pieceTreeTextBuffer';\nimport { createTextBufferFactory } from 'vs/editor/common/model/textModel';\n\nexport function testTextBufferFactory(text: string, eol: string, mightContainNonBasicASCII: boolean, mightContainRTL: boolean): void {\n\tconst textBuffer = <PieceTreeTextBuffer>createTextBufferFactory(text).create(DefaultEndOfLine.LF).textBuffer;\n\n\tassert.strictEqual(textBuffer.mightContainNonBasicASCII(), mightContainNonBasicASCII);\n\tassert.strictEqual(textBuffer.mightContainRTL(), mightContainRTL);\n\tassert.strictEqual(textBuffer.getEOL(), eol);\n}\n\nsuite('ModelBuilder', () => {\n\n\ttest('t1', () => {\n\t\ttestTextBufferFactory('', '\\n', false, false);\n\t});\n\n\ttest('t2', () => {\n\t\ttestTextBufferFactory('Hello world', '\\n', false, false);\n\t});\n\n\ttest('t3', () => {\n\t\ttestTextBufferFactory('Hello world\\nHow are you?', '\\n', false, false);\n\t});\n\n\ttest('t4', () => {\n\t\ttestTextBufferFactory('Hello world\\nHow are you?\\nIs everything good today?\\nDo you enjoy the weather?', '\\n', false, false);\n\t});\n\n\ttest('carriage return detection (1 \\\\r\\\\n 2 \\\\n)', () => {\n\t\ttestTextBufferFactory('Hello world\\r\\nHow are you?\\nIs everything good today?\\nDo you enjoy the weather?', '\\n', false, false);\n\t});\n\n\ttest('carriage return detection (2 \\\\r\\\\n 1 \\\\n)', () => {\n\t\ttestTextBufferFactory('Hello world\\r\\nHow are you?\\r\\nIs everything good today?\\nDo you enjoy the weather?', '\\r\\n', false, false);\n\t});\n\n\ttest('carriage return detection (3 \\\\r\\\\n 0 \\\\n)', () => {\n\t\ttestTextBufferFactory('Hello world\\r\\nHow are you?\\r\\nIs everything good today?\\r\\nDo you enjoy the weather?', '\\r\\n', false, false);\n\t});\n\n\ttest('BOM handling', () => {\n\t\ttestTextBufferFactory(strings.UTF8_BOM_CHARACTER + 'Hello world!', '\\n', false, false);\n\t});\n\n\ttest('BOM handling', () => {\n\t\ttestTextBufferFactory(strings.UTF8_BOM_CHARACTER + 'Hello world!', '\\n', false, false);\n\t});\n\n\ttest('RTL handling 2', () => {\n\t\ttestTextBufferFactory('Hello world!זוהי עובדה מבוססת שדעתו', '\\n', true, true);\n\t});\n\n\ttest('RTL handling 3', () => {\n\t\ttestTextBufferFactory('Hello world!זוהי \\nעובדה מבוססת שדעתו', '\\n', true, true);\n\t});\n\n\ttest('ASCII handling 1', () => {\n\t\ttestTextBufferFactory('Hello world!!\\nHow do you do?', '\\n', false, false);\n\t});\n\ttest('ASCII handling 2', () => {\n\t\ttestTextBufferFactory('Hello world!!\\nHow do you do?Züricha📚📚b', '\\n', true, false);\n\t});\n});\n"]}