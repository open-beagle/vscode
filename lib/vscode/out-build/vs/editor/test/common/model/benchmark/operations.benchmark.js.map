{"version":3,"file":"operations.benchmark.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/test/common/model/benchmark/operations.benchmark.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Range } from 'vs/editor/common/core/range';\nimport { EndOfLinePreference, ITextBufferBuilder } from 'vs/editor/common/model';\nimport { BenchmarkSuite } from 'vs/editor/test/common/model/benchmark/benchmarkUtils';\nimport { generateRandomChunkWithLF, generateRandomEdits, generateSequentialInserts, getRandomInt } from 'vs/editor/test/common/model/linesTextBuffer/textBufferAutoTestUtils';\n\nlet fileSizes = [1, 1000, 64 * 1000, 32 * 1000 * 1000];\nlet editTypes = [\n\t{\n\t\tid: 'random edits',\n\t\tgenerateEdits: generateRandomEdits\n\t},\n\t{\n\t\tid: 'sequential inserts',\n\t\tgenerateEdits: generateSequentialInserts\n\t}\n];\n\nfor (let fileSize of fileSizes) {\n\tlet chunks: string[] = [];\n\n\tlet chunkCnt = Math.floor(fileSize / (64 * 1000));\n\tif (chunkCnt === 0) {\n\t\tchunks.push(generateRandomChunkWithLF(fileSize, fileSize));\n\t} else {\n\t\tlet chunk = generateRandomChunkWithLF(64 * 1000, 64 * 1000);\n\t\t// try to avoid OOM\n\t\tfor (let j = 0; j < chunkCnt; j++) {\n\t\t\tchunks.push(Buffer.from(chunk + j).toString());\n\t\t}\n\t}\n\n\tfor (let editType of editTypes) {\n\t\tconst edits = editType.generateEdits(chunks, 1000);\n\n\t\tlet editsSuite = new BenchmarkSuite({\n\t\t\tname: `File Size: ${fileSize}Byte, ${editType.id}`,\n\t\t\titerations: 10\n\t\t});\n\n\t\teditsSuite.add({\n\t\t\tname: `apply 1000 edits`,\n\t\t\tbuildBuffer: (textBufferBuilder: ITextBufferBuilder) => {\n\t\t\t\tchunks.forEach(ck => textBufferBuilder.acceptChunk(ck));\n\t\t\t\treturn textBufferBuilder.finish();\n\t\t\t},\n\t\t\tpreCycle: (textBuffer) => {\n\t\t\t\treturn textBuffer;\n\t\t\t},\n\t\t\tfn: (textBuffer) => {\n\t\t\t\t// for line model, this loop doesn't reflect the real situation.\n\t\t\t\tfor (const edit of edits) {\n\t\t\t\t\ttextBuffer.applyEdits([edit], false, false);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\teditsSuite.add({\n\t\t\tname: `Read all lines after 1000 edits`,\n\t\t\tbuildBuffer: (textBufferBuilder: ITextBufferBuilder) => {\n\t\t\t\tchunks.forEach(ck => textBufferBuilder.acceptChunk(ck));\n\t\t\t\treturn textBufferBuilder.finish();\n\t\t\t},\n\t\t\tpreCycle: (textBuffer) => {\n\t\t\t\tfor (const edit of edits) {\n\t\t\t\t\ttextBuffer.applyEdits([edit], false, false);\n\t\t\t\t}\n\t\t\t\treturn textBuffer;\n\t\t\t},\n\t\t\tfn: (textBuffer) => {\n\t\t\t\tfor (let j = 0, len = textBuffer.getLineCount(); j < len; j++) {\n\t\t\t\t\tlet str = textBuffer.getLineContent(j + 1);\n\t\t\t\t\tlet firstChar = str.charCodeAt(0);\n\t\t\t\t\tlet lastChar = str.charCodeAt(str.length - 1);\n\t\t\t\t\tfirstChar = firstChar - lastChar;\n\t\t\t\t\tlastChar = firstChar + lastChar;\n\t\t\t\t\tfirstChar = lastChar - firstChar;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\teditsSuite.add({\n\t\t\tname: `Read 10 random windows after 1000 edits`,\n\t\t\tbuildBuffer: (textBufferBuilder: ITextBufferBuilder) => {\n\t\t\t\tchunks.forEach(ck => textBufferBuilder.acceptChunk(ck));\n\t\t\t\treturn textBufferBuilder.finish();\n\t\t\t},\n\t\t\tpreCycle: (textBuffer) => {\n\t\t\t\tfor (const edit of edits) {\n\t\t\t\t\ttextBuffer.applyEdits([edit], false, false);\n\t\t\t\t}\n\t\t\t\treturn textBuffer;\n\t\t\t},\n\t\t\tfn: (textBuffer) => {\n\t\t\t\tfor (let i = 0; i < 10; i++) {\n\t\t\t\t\tlet minLine = 1;\n\t\t\t\t\tlet maxLine = textBuffer.getLineCount();\n\t\t\t\t\tlet startLine = getRandomInt(minLine, Math.max(minLine, maxLine - 100));\n\t\t\t\t\tlet endLine = Math.min(maxLine, startLine + 100);\n\t\t\t\t\tfor (let j = startLine; j < endLine; j++) {\n\t\t\t\t\t\tlet str = textBuffer.getLineContent(j + 1);\n\t\t\t\t\t\tlet firstChar = str.charCodeAt(0);\n\t\t\t\t\t\tlet lastChar = str.charCodeAt(str.length - 1);\n\t\t\t\t\t\tfirstChar = firstChar - lastChar;\n\t\t\t\t\t\tlastChar = firstChar + lastChar;\n\t\t\t\t\t\tfirstChar = lastChar - firstChar;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\teditsSuite.add({\n\t\t\tname: `save file after 1000 edits`,\n\t\t\tbuildBuffer: (textBufferBuilder: ITextBufferBuilder) => {\n\t\t\t\tchunks.forEach(ck => textBufferBuilder.acceptChunk(ck));\n\t\t\t\treturn textBufferBuilder.finish();\n\t\t\t},\n\t\t\tpreCycle: (textBuffer) => {\n\t\t\t\tfor (const edit of edits) {\n\t\t\t\t\ttextBuffer.applyEdits([edit], false, false);\n\t\t\t\t}\n\t\t\t\treturn textBuffer;\n\t\t\t},\n\t\t\tfn: (textBuffer) => {\n\t\t\t\tconst lineCount = textBuffer.getLineCount();\n\t\t\t\tconst fullModelRange = new Range(1, 1, lineCount, textBuffer.getLineLength(lineCount) + 1);\n\t\t\t\ttextBuffer.getValueInRange(fullModelRange, EndOfLinePreference.LF);\n\t\t\t}\n\t\t});\n\n\t\teditsSuite.run();\n\t}\n}\n"]}