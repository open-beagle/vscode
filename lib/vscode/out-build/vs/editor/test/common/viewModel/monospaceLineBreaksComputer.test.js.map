{"version":3,"file":"monospaceLineBreaksComputer.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/test/common/viewModel/monospaceLineBreaksComputer.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as assert from 'assert';\nimport { WrappingIndent, EditorOptions } from 'vs/editor/common/config/editorOptions';\nimport { MonospaceLineBreaksComputerFactory } from 'vs/editor/common/viewModel/monospaceLineBreaksComputer';\nimport { ILineBreaksComputerFactory } from 'vs/editor/common/viewModel/splitLinesCollection';\nimport { FontInfo } from 'vs/editor/common/config/fontInfo';\nimport { LineBreakData } from 'vs/editor/common/viewModel/viewModel';\n\nfunction parseAnnotatedText(annotatedText: string): { text: string; indices: number[]; } {\n\tlet text = '';\n\tlet currentLineIndex = 0;\n\tlet indices: number[] = [];\n\tfor (let i = 0, len = annotatedText.length; i < len; i++) {\n\t\tif (annotatedText.charAt(i) === '|') {\n\t\t\tcurrentLineIndex++;\n\t\t} else {\n\t\t\ttext += annotatedText.charAt(i);\n\t\t\tindices[text.length - 1] = currentLineIndex;\n\t\t}\n\t}\n\treturn { text: text, indices: indices };\n}\n\nfunction toAnnotatedText(text: string, lineBreakData: LineBreakData | null): string {\n\t// Insert line break markers again, according to algorithm\n\tlet actualAnnotatedText = '';\n\tif (lineBreakData) {\n\t\tlet previousLineIndex = 0;\n\t\tfor (let i = 0, len = text.length; i < len; i++) {\n\t\t\tlet r = LineBreakData.getOutputPositionOfInputOffset(lineBreakData.breakOffsets, i);\n\t\t\tif (previousLineIndex !== r.outputLineIndex) {\n\t\t\t\tpreviousLineIndex = r.outputLineIndex;\n\t\t\t\tactualAnnotatedText += '|';\n\t\t\t}\n\t\t\tactualAnnotatedText += text.charAt(i);\n\t\t}\n\t} else {\n\t\t// No wrapping\n\t\tactualAnnotatedText = text;\n\t}\n\treturn actualAnnotatedText;\n}\n\nfunction getLineBreakData(factory: ILineBreaksComputerFactory, tabSize: number, breakAfter: number, columnsForFullWidthChar: number, wrappingIndent: WrappingIndent, text: string, previousLineBreakData: LineBreakData | null): LineBreakData | null {\n\tconst fontInfo = new FontInfo({\n\t\tzoomLevel: 0,\n\t\tpixelRatio: 1,\n\t\tfontFamily: 'testFontFamily',\n\t\tfontWeight: 'normal',\n\t\tfontSize: 14,\n\t\tfontFeatureSettings: '',\n\t\tlineHeight: 19,\n\t\tletterSpacing: 0,\n\t\tisMonospace: true,\n\t\ttypicalHalfwidthCharacterWidth: 7,\n\t\ttypicalFullwidthCharacterWidth: 7 * columnsForFullWidthChar,\n\t\tcanUseHalfwidthRightwardsArrow: true,\n\t\tspaceWidth: 7,\n\t\tmiddotWidth: 7,\n\t\twsmiddotWidth: 7,\n\t\tmaxDigitWidth: 7\n\t}, false);\n\tconst lineBreaksComputer = factory.createLineBreaksComputer(fontInfo, tabSize, breakAfter, wrappingIndent);\n\tconst previousLineBreakDataClone = previousLineBreakData ? new LineBreakData(previousLineBreakData.breakOffsets.slice(0), previousLineBreakData.breakOffsetsVisibleColumn.slice(0), previousLineBreakData.wrappedTextIndentLength) : null;\n\tlineBreaksComputer.addRequest(text, previousLineBreakDataClone);\n\treturn lineBreaksComputer.finalize()[0];\n}\n\nfunction assertLineBreaks(factory: ILineBreaksComputerFactory, tabSize: number, breakAfter: number, annotatedText: string, wrappingIndent = WrappingIndent.None): LineBreakData | null {\n\t// Create version of `annotatedText` with line break markers removed\n\tconst text = parseAnnotatedText(annotatedText).text;\n\tconst lineBreakData = getLineBreakData(factory, tabSize, breakAfter, 2, wrappingIndent, text, null);\n\tconst actualAnnotatedText = toAnnotatedText(text, lineBreakData);\n\n\tassert.strictEqual(actualAnnotatedText, annotatedText);\n\n\treturn lineBreakData;\n}\n\nsuite('Editor ViewModel - MonospaceLineBreaksComputer', () => {\n\ttest('MonospaceLineBreaksComputer', () => {\n\n\t\tlet factory = new MonospaceLineBreaksComputerFactory('(', '\\t).');\n\n\t\t// Empty string\n\t\tassertLineBreaks(factory, 4, 5, '');\n\n\t\t// No wrapping if not necessary\n\t\tassertLineBreaks(factory, 4, 5, 'aaa');\n\t\tassertLineBreaks(factory, 4, 5, 'aaaaa');\n\t\tassertLineBreaks(factory, 4, -1, 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa');\n\n\t\t// Acts like hard wrapping if no char found\n\t\tassertLineBreaks(factory, 4, 5, 'aaaaa|a');\n\n\t\t// Honors wrapping character\n\t\tassertLineBreaks(factory, 4, 5, 'aaaaa|.');\n\t\tassertLineBreaks(factory, 4, 5, 'aaaaa|a.|aaa.|aa');\n\t\tassertLineBreaks(factory, 4, 5, 'aaaaa|a..|aaa.|aa');\n\t\tassertLineBreaks(factory, 4, 5, 'aaaaa|a...|aaa.|aa');\n\t\tassertLineBreaks(factory, 4, 5, 'aaaaa|a....|aaa.|aa');\n\n\t\t// Honors tabs when computing wrapping position\n\t\tassertLineBreaks(factory, 4, 5, '\\t');\n\t\tassertLineBreaks(factory, 4, 5, '\\t|aaa');\n\t\tassertLineBreaks(factory, 4, 5, '\\t|a\\t|aa');\n\t\tassertLineBreaks(factory, 4, 5, 'aa\\ta');\n\t\tassertLineBreaks(factory, 4, 5, 'aa\\t|aa');\n\n\t\t// Honors wrapping before characters (& gives it priority)\n\t\tassertLineBreaks(factory, 4, 5, 'aaa.|aa');\n\t\tassertLineBreaks(factory, 4, 5, 'aaa(.|aa');\n\n\t\t// Honors wrapping after characters (& gives it priority)\n\t\tassertLineBreaks(factory, 4, 5, 'aaa))|).aaa');\n\t\tassertLineBreaks(factory, 4, 5, 'aaa))|).|aaaa');\n\t\tassertLineBreaks(factory, 4, 5, 'aaa)|().|aaa');\n\t\tassertLineBreaks(factory, 4, 5, 'aaa(|().|aaa');\n\t\tassertLineBreaks(factory, 4, 5, 'aa.(|().|aaa');\n\t\tassertLineBreaks(factory, 4, 5, 'aa.(.|).aaa');\n\t});\n\n\tfunction assertLineBreakDataEqual(a: LineBreakData | null, b: LineBreakData | null): void {\n\t\tif (!a || !b) {\n\t\t\tassert.deepStrictEqual(a, b);\n\t\t\treturn;\n\t\t}\n\t\tassert.deepStrictEqual(a.breakOffsets, b.breakOffsets);\n\t\tassert.deepStrictEqual(a.wrappedTextIndentLength, b.wrappedTextIndentLength);\n\t\tfor (let i = 0; i < a.breakOffsetsVisibleColumn.length; i++) {\n\t\t\tconst diff = a.breakOffsetsVisibleColumn[i] - b.breakOffsetsVisibleColumn[i];\n\t\t\tassert.ok(diff < 0.001);\n\t\t}\n\t}\n\n\tfunction assertIncrementalLineBreaks(factory: ILineBreaksComputerFactory, text: string, tabSize: number, breakAfter1: number, annotatedText1: string, breakAfter2: number, annotatedText2: string, wrappingIndent = WrappingIndent.None, columnsForFullWidthChar: number = 2): void {\n\t\t// sanity check the test\n\t\tassert.strictEqual(text, parseAnnotatedText(annotatedText1).text);\n\t\tassert.strictEqual(text, parseAnnotatedText(annotatedText2).text);\n\n\t\t// check that the direct mapping is ok for 1\n\t\tconst directLineBreakData1 = getLineBreakData(factory, tabSize, breakAfter1, columnsForFullWidthChar, wrappingIndent, text, null);\n\t\tassert.strictEqual(toAnnotatedText(text, directLineBreakData1), annotatedText1);\n\n\t\t// check that the direct mapping is ok for 2\n\t\tconst directLineBreakData2 = getLineBreakData(factory, tabSize, breakAfter2, columnsForFullWidthChar, wrappingIndent, text, null);\n\t\tassert.strictEqual(toAnnotatedText(text, directLineBreakData2), annotatedText2);\n\n\t\t// check that going from 1 to 2 is ok\n\t\tconst lineBreakData2from1 = getLineBreakData(factory, tabSize, breakAfter2, columnsForFullWidthChar, wrappingIndent, text, directLineBreakData1);\n\t\tassert.strictEqual(toAnnotatedText(text, lineBreakData2from1), annotatedText2);\n\t\tassertLineBreakDataEqual(lineBreakData2from1, directLineBreakData2);\n\n\t\t// check that going from 2 to 1 is ok\n\t\tconst lineBreakData1from2 = getLineBreakData(factory, tabSize, breakAfter1, columnsForFullWidthChar, wrappingIndent, text, directLineBreakData2);\n\t\tassert.strictEqual(toAnnotatedText(text, lineBreakData1from2), annotatedText1);\n\t\tassertLineBreakDataEqual(lineBreakData1from2, directLineBreakData1);\n\t}\n\n\ttest('MonospaceLineBreaksComputer incremental 1', () => {\n\n\t\tconst factory = new MonospaceLineBreaksComputerFactory(EditorOptions.wordWrapBreakBeforeCharacters.defaultValue, EditorOptions.wordWrapBreakAfterCharacters.defaultValue);\n\n\t\tassertIncrementalLineBreaks(\n\t\t\tfactory, 'just some text and more', 4,\n\t\t\t10, 'just some |text and |more',\n\t\t\t15, 'just some text |and more'\n\t\t);\n\n\t\tassertIncrementalLineBreaks(\n\t\t\tfactory, 'Cu scripserit suscipiantur eos, in affert pericula contentiones sed, cetero sanctus et pro. Ius vidit magna regione te, sit ei elaboraret liberavisse. Mundi verear eu mea, eam vero scriptorem in, vix in menandri assueverit. Natum definiebas cu vim. Vim doming vocibus efficiantur id. In indoctum deseruisse voluptatum vim, ad debitis verterem sed.', 4,\n\t\t\t47, 'Cu scripserit suscipiantur eos, in affert |pericula contentiones sed, cetero sanctus et |pro. Ius vidit magna regione te, sit ei |elaboraret liberavisse. Mundi verear eu mea, |eam vero scriptorem in, vix in menandri |assueverit. Natum definiebas cu vim. Vim |doming vocibus efficiantur id. In indoctum |deseruisse voluptatum vim, ad debitis verterem |sed.',\n\t\t\t142, 'Cu scripserit suscipiantur eos, in affert pericula contentiones sed, cetero sanctus et pro. Ius vidit magna regione te, sit ei elaboraret |liberavisse. Mundi verear eu mea, eam vero scriptorem in, vix in menandri assueverit. Natum definiebas cu vim. Vim doming vocibus efficiantur |id. In indoctum deseruisse voluptatum vim, ad debitis verterem sed.',\n\t\t);\n\n\t\tassertIncrementalLineBreaks(\n\t\t\tfactory, 'An his legere persecuti, oblique delicata efficiantur ex vix, vel at graecis officiis maluisset. Et per impedit voluptua, usu discere maiorum at. Ut assum ornatus temporibus vis, an sea melius pericula. Ea dicunt oblique phaedrum nam, eu duo movet nobis. His melius facilis eu, vim malorum temporibus ne. Nec no sale regione, meliore civibus placerat id eam. Mea alii fabulas definitionem te, agam volutpat ad vis, et per bonorum nonumes repudiandae.', 4,\n\t\t\t57, 'An his legere persecuti, oblique delicata efficiantur ex |vix, vel at graecis officiis maluisset. Et per impedit |voluptua, usu discere maiorum at. Ut assum ornatus |temporibus vis, an sea melius pericula. Ea dicunt |oblique phaedrum nam, eu duo movet nobis. His melius |facilis eu, vim malorum temporibus ne. Nec no sale |regione, meliore civibus placerat id eam. Mea alii |fabulas definitionem te, agam volutpat ad vis, et per |bonorum nonumes repudiandae.',\n\t\t\t58, 'An his legere persecuti, oblique delicata efficiantur ex |vix, vel at graecis officiis maluisset. Et per impedit |voluptua, usu discere maiorum at. Ut assum ornatus |temporibus vis, an sea melius pericula. Ea dicunt oblique |phaedrum nam, eu duo movet nobis. His melius facilis eu, |vim malorum temporibus ne. Nec no sale regione, meliore |civibus placerat id eam. Mea alii fabulas definitionem |te, agam volutpat ad vis, et per bonorum nonumes |repudiandae.'\n\t\t);\n\n\t\tassertIncrementalLineBreaks(\n\t\t\tfactory, '\\t\\t\"owner\": \"vscode\",', 4,\n\t\t\t14, '\\t\\t\"owner|\": |\"vscod|e\",',\n\t\t\t16, '\\t\\t\"owner\":| |\"vscode\"|,',\n\t\t\tWrappingIndent.Same\n\t\t);\n\n\t\tassertIncrementalLineBreaks(\n\t\t\tfactory, '🐇👬🌖🌞🏇🍼🐇👬🌖🌞🏇🍼🐇👬🌖🌞🏇🍼🐇👬🌖🌞🏇🍼🐇&👬🌖🌞🏇🍼🐇👬🌖🌞🏇🍼🐇👬🌖🌞🏇🍼🐇👬🌖🌞🏇🍼🐇👬', 4,\n\t\t\t51, '🐇👬🌖🌞🏇🍼🐇👬🌖🌞🏇🍼🐇👬🌖🌞🏇🍼🐇👬🌖🌞🏇🍼🐇&|👬🌖🌞🏇🍼🐇👬🌖🌞🏇🍼🐇👬🌖🌞🏇🍼🐇👬🌖🌞🏇🍼🐇👬',\n\t\t\t50, '🐇👬🌖🌞🏇🍼🐇👬🌖🌞🏇🍼🐇👬🌖🌞🏇🍼🐇👬🌖🌞🏇🍼🐇|&|👬🌖🌞🏇🍼🐇👬🌖🌞🏇🍼🐇👬🌖🌞🏇🍼🐇👬🌖🌞🏇🍼🐇👬',\n\t\t\tWrappingIndent.Same\n\t\t);\n\n\t\tassertIncrementalLineBreaks(\n\t\t\tfactory, '🐇👬&🌞🌖', 4,\n\t\t\t5, '🐇👬&|🌞🌖',\n\t\t\t4, '🐇👬|&|🌞🌖',\n\t\t\tWrappingIndent.Same\n\t\t);\n\n\t\tassertIncrementalLineBreaks(\n\t\t\tfactory, '\\t\\tfunc(\\'🌞🏇🍼🌞🏇🍼🐇&👬🌖🌞👬🌖🌞🏇🍼🐇👬\\', WrappingIndent.Same);', 4,\n\t\t\t26, '\\t\\tfunc|(\\'🌞🏇🍼🌞🏇🍼🐇&|👬🌖🌞👬🌖🌞🏇🍼🐇|👬\\', |WrappingIndent.|Same);',\n\t\t\t27, '\\t\\tfunc|(\\'🌞🏇🍼🌞🏇🍼🐇&|👬🌖🌞👬🌖🌞🏇🍼🐇|👬\\', |WrappingIndent.|Same);',\n\t\t\tWrappingIndent.Same\n\t\t);\n\n\t\tassertIncrementalLineBreaks(\n\t\t\tfactory, 'factory, \"xtxtfunc(x\"🌞🏇🍼🌞🏇🍼🐇&👬🌖🌞👬🌖🌞🏇🍼🐇👬x\"', 4,\n\t\t\t16, 'factory, |\"xtxtfunc|(x\"🌞🏇🍼🌞🏇🍼|🐇&|👬🌖🌞👬🌖🌞🏇🍼|🐇👬x\"',\n\t\t\t17, 'factory, |\"xtxtfunc|(x\"🌞🏇🍼🌞🏇🍼🐇|&👬🌖🌞👬🌖🌞🏇🍼|🐇👬x\"',\n\t\t\tWrappingIndent.Same\n\t\t);\n\t});\n\n\ttest('issue #95686: CRITICAL: loop forever on the monospaceLineBreaksComputer', () => {\n\t\tconst factory = new MonospaceLineBreaksComputerFactory(EditorOptions.wordWrapBreakBeforeCharacters.defaultValue, EditorOptions.wordWrapBreakAfterCharacters.defaultValue);\n\t\tassertIncrementalLineBreaks(\n\t\t\tfactory,\n\t\t\t'\t\t\t\t\t\t<tr dmx-class:table-danger=\"(alt <= 50)\" dmx-class:table-warning=\"(alt <= 200)\" dmx-class:table-primary=\"(alt <= 400)\" dmx-class:table-info=\"(alt <= 800)\" dmx-class:table-success=\"(alt >= 400)\">',\n\t\t\t4,\n\t\t\t179, '\t\t\t\t\t\t<tr dmx-class:table-danger=\"(alt <= 50)\" dmx-class:table-warning=\"(alt <= 200)\" dmx-class:table-primary=\"(alt <= 400)\" dmx-class:table-info=\"(alt <= 800)\" |dmx-class:table-success=\"(alt >= 400)\">',\n\t\t\t1, '\t|\t|\t|\t|\t|\t|<|t|r| |d|m|x|-|c|l|a|s|s|:|t|a|b|l|e|-|d|a|n|g|e|r|=|\"|(|a|l|t| |<|=| |5|0|)|\"| |d|m|x|-|c|l|a|s|s|:|t|a|b|l|e|-|w|a|r|n|i|n|g|=|\"|(|a|l|t| |<|=| |2|0|0|)|\"| |d|m|x|-|c|l|a|s|s|:|t|a|b|l|e|-|p|r|i|m|a|r|y|=|\"|(|a|l|t| |<|=| |4|0|0|)|\"| |d|m|x|-|c|l|a|s|s|:|t|a|b|l|e|-|i|n|f|o|=|\"|(|a|l|t| |<|=| |8|0|0|)|\"| |d|m|x|-|c|l|a|s|s|:|t|a|b|l|e|-|s|u|c|c|e|s|s|=|\"|(|a|l|t| |>|=| |4|0|0|)|\"|>',\n\t\t\tWrappingIndent.Same\n\t\t);\n\t});\n\n\ttest('issue #110392: Occasional crash when resize with panel on the right', () => {\n\t\tconst factory = new MonospaceLineBreaksComputerFactory(EditorOptions.wordWrapBreakBeforeCharacters.defaultValue, EditorOptions.wordWrapBreakAfterCharacters.defaultValue);\n\t\tassertIncrementalLineBreaks(\n\t\t\tfactory,\n\t\t\t'你好 **hello** **hello** **hello-world** hey there!',\n\t\t\t4,\n\t\t\t15, '你好 **hello** |**hello** |**hello-world**| hey there!',\n\t\t\t1, '你|好| |*|*|h|e|l|l|o|*|*| |*|*|h|e|l|l|o|*|*| |*|*|h|e|l|l|o|-|w|o|r|l|d|*|*| |h|e|y| |t|h|e|r|e|!',\n\t\t\tWrappingIndent.Same,\n\t\t\t1.6605405405405405\n\t\t);\n\t});\n\n\ttest('MonospaceLineBreaksComputer - CJK and Kinsoku Shori', () => {\n\t\tlet factory = new MonospaceLineBreaksComputerFactory('(', '\\t)');\n\t\tassertLineBreaks(factory, 4, 5, 'aa \\u5b89|\\u5b89');\n\t\tassertLineBreaks(factory, 4, 5, '\\u3042 \\u5b89|\\u5b89');\n\t\tassertLineBreaks(factory, 4, 5, '\\u3042\\u3042|\\u5b89\\u5b89');\n\t\tassertLineBreaks(factory, 4, 5, 'aa |\\u5b89)\\u5b89|\\u5b89');\n\t\tassertLineBreaks(factory, 4, 5, 'aa \\u3042|\\u5b89\\u3042)|\\u5b89');\n\t\tassertLineBreaks(factory, 4, 5, 'aa |(\\u5b89aa|\\u5b89');\n\t});\n\n\ttest('MonospaceLineBreaksComputer - WrappingIndent.Same', () => {\n\t\tlet factory = new MonospaceLineBreaksComputerFactory('', '\\t ');\n\t\tassertLineBreaks(factory, 4, 38, ' *123456789012345678901234567890123456|7890', WrappingIndent.Same);\n\t});\n\n\ttest('issue #16332: Scroll bar overlaying on top of text', () => {\n\t\tlet factory = new MonospaceLineBreaksComputerFactory('', '\\t ');\n\t\tassertLineBreaks(factory, 4, 24, 'a/ very/long/line/of/tex|t/that/expands/beyon|d/your/typical/line/|of/code/', WrappingIndent.Indent);\n\t});\n\n\ttest('issue #35162: wrappingIndent not consistently working', () => {\n\t\tlet factory = new MonospaceLineBreaksComputerFactory('', '\\t ');\n\t\tlet mapper = assertLineBreaks(factory, 4, 24, '                t h i s |i s |a l |o n |g l |i n |e', WrappingIndent.Indent);\n\t\tassert.strictEqual(mapper!.wrappedTextIndentLength, '                    '.length);\n\t});\n\n\ttest('issue #75494: surrogate pairs', () => {\n\t\tlet factory = new MonospaceLineBreaksComputerFactory('\\t', ' ');\n\t\tassertLineBreaks(factory, 4, 49, '🐇👬🌖🌞🏇🍼🐇👬🌖🌞🏇🍼🐇👬🌖🌞🏇🍼🐇👬🌖🌞🏇🍼|🐇👬🌖🌞🏇🍼🐇👬🌖🌞🏇🍼🐇👬🌖🌞🏇🍼🐇👬🌖🌞🏇🍼|🐇👬', WrappingIndent.Same);\n\t});\n\n\ttest('issue #75494: surrogate pairs overrun 1', () => {\n\t\tconst factory = new MonospaceLineBreaksComputerFactory(EditorOptions.wordWrapBreakBeforeCharacters.defaultValue, EditorOptions.wordWrapBreakAfterCharacters.defaultValue);\n\t\tassertLineBreaks(factory, 4, 4, '🐇👬|&|🌞🌖', WrappingIndent.Same);\n\t});\n\n\ttest('issue #75494: surrogate pairs overrun 2', () => {\n\t\tconst factory = new MonospaceLineBreaksComputerFactory(EditorOptions.wordWrapBreakBeforeCharacters.defaultValue, EditorOptions.wordWrapBreakAfterCharacters.defaultValue);\n\t\tassertLineBreaks(factory, 4, 17, 'factory, |\"xtxtfunc|(x\"🌞🏇🍼🌞🏇🍼🐇|&👬🌖🌞👬🌖🌞🏇🍼|🐇👬x\"', WrappingIndent.Same);\n\t});\n\n\ttest('MonospaceLineBreaksComputer - WrappingIndent.DeepIndent', () => {\n\t\tlet factory = new MonospaceLineBreaksComputerFactory('', '\\t ');\n\t\tlet mapper = assertLineBreaks(factory, 4, 26, '        W e A r e T e s t |i n g D e |e p I n d |e n t a t |i o n', WrappingIndent.DeepIndent);\n\t\tassert.strictEqual(mapper!.wrappedTextIndentLength, '                '.length);\n\t});\n\n\ttest('issue #33366: Word wrap algorithm behaves differently around punctuation', () => {\n\t\tconst factory = new MonospaceLineBreaksComputerFactory(EditorOptions.wordWrapBreakBeforeCharacters.defaultValue, EditorOptions.wordWrapBreakAfterCharacters.defaultValue);\n\t\tassertLineBreaks(factory, 4, 23, 'this is a line of |text, text that sits |on a line', WrappingIndent.Same);\n\t});\n\n\ttest('issue #112382: Word wrap doesn\\'t work well with control characters', () => {\n\t\tconst factory = new MonospaceLineBreaksComputerFactory(EditorOptions.wordWrapBreakBeforeCharacters.defaultValue, EditorOptions.wordWrapBreakAfterCharacters.defaultValue);\n\t\tassertLineBreaks(factory, 4, 6, '\\x06\\x06\\x06|\\x06\\x06\\x06', WrappingIndent.Same);\n\t});\n});\n"]}