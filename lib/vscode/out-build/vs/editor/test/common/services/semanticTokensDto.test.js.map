{"version":3,"file":"semanticTokensDto.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/test/common/services/semanticTokensDto.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { IFullSemanticTokensDto, IDeltaSemanticTokensDto, encodeSemanticTokensDto, ISemanticTokensDto, decodeSemanticTokensDto } from 'vs/editor/common/services/semanticTokensDto';\nimport { VSBuffer } from 'vs/base/common/buffer';\n\nsuite('SemanticTokensDto', () => {\n\n\tfunction toArr(arr: Uint32Array): number[] {\n\t\tconst result: number[] = [];\n\t\tfor (let i = 0, len = arr.length; i < len; i++) {\n\t\t\tresult[i] = arr[i];\n\t\t}\n\t\treturn result;\n\t}\n\n\tfunction assertEqualFull(actual: IFullSemanticTokensDto, expected: IFullSemanticTokensDto): void {\n\t\tconst convert = (dto: IFullSemanticTokensDto) => {\n\t\t\treturn {\n\t\t\t\tid: dto.id,\n\t\t\t\ttype: dto.type,\n\t\t\t\tdata: toArr(dto.data)\n\t\t\t};\n\t\t};\n\t\tassert.deepStrictEqual(convert(actual), convert(expected));\n\t}\n\n\tfunction assertEqualDelta(actual: IDeltaSemanticTokensDto, expected: IDeltaSemanticTokensDto): void {\n\t\tconst convertOne = (delta: { start: number; deleteCount: number; data?: Uint32Array; }) => {\n\t\t\tif (!delta.data) {\n\t\t\t\treturn delta;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tstart: delta.start,\n\t\t\t\tdeleteCount: delta.deleteCount,\n\t\t\t\tdata: toArr(delta.data)\n\t\t\t};\n\t\t};\n\t\tconst convert = (dto: IDeltaSemanticTokensDto) => {\n\t\t\treturn {\n\t\t\t\tid: dto.id,\n\t\t\t\ttype: dto.type,\n\t\t\t\tdeltas: dto.deltas.map(convertOne)\n\t\t\t};\n\t\t};\n\t\tassert.deepStrictEqual(convert(actual), convert(expected));\n\t}\n\n\tfunction testRoundTrip(value: ISemanticTokensDto): void {\n\t\tconst decoded = decodeSemanticTokensDto(encodeSemanticTokensDto(value));\n\t\tif (value.type === 'full' && decoded.type === 'full') {\n\t\t\tassertEqualFull(decoded, value);\n\t\t} else if (value.type === 'delta' && decoded.type === 'delta') {\n\t\t\tassertEqualDelta(decoded, value);\n\t\t} else {\n\t\t\tassert.fail('wrong type');\n\t\t}\n\t}\n\n\ttest('full encoding', () => {\n\t\ttestRoundTrip({\n\t\t\tid: 12,\n\t\t\ttype: 'full',\n\t\t\tdata: new Uint32Array([(1 << 24) + (2 << 16) + (3 << 8) + 4])\n\t\t});\n\t});\n\n\ttest('delta encoding', () => {\n\t\ttestRoundTrip({\n\t\t\tid: 12,\n\t\t\ttype: 'delta',\n\t\t\tdeltas: [{\n\t\t\t\tstart: 0,\n\t\t\t\tdeleteCount: 4,\n\t\t\t\tdata: undefined\n\t\t\t}, {\n\t\t\t\tstart: 15,\n\t\t\t\tdeleteCount: 0,\n\t\t\t\tdata: new Uint32Array([(1 << 24) + (2 << 16) + (3 << 8) + 4])\n\t\t\t}, {\n\t\t\t\tstart: 27,\n\t\t\t\tdeleteCount: 5,\n\t\t\t\tdata: new Uint32Array([(1 << 24) + (2 << 16) + (3 << 8) + 4, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\t\t\t}]\n\t\t});\n\t});\n\n\ttest('partial array buffer', () => {\n\t\tconst sharedArr = new Uint32Array([\n\t\t\t(1 << 24) + (2 << 16) + (3 << 8) + 4,\n\t\t\t1, 2, 3, 4, 5, (1 << 24) + (2 << 16) + (3 << 8) + 4\n\t\t]);\n\t\ttestRoundTrip({\n\t\t\tid: 12,\n\t\t\ttype: 'delta',\n\t\t\tdeltas: [{\n\t\t\t\tstart: 0,\n\t\t\t\tdeleteCount: 4,\n\t\t\t\tdata: sharedArr.subarray(0, 1)\n\t\t\t}, {\n\t\t\t\tstart: 15,\n\t\t\t\tdeleteCount: 0,\n\t\t\t\tdata: sharedArr.subarray(1, sharedArr.length)\n\t\t\t}]\n\t\t});\n\t});\n\n\ttest('issue #94521: unusual backing array buffer', () => {\n\t\tfunction wrapAndSliceUint8Arry(buff: Uint8Array, prefixLength: number, suffixLength: number): Uint8Array {\n\t\t\tconst wrapped = new Uint8Array(prefixLength + buff.byteLength + suffixLength);\n\t\t\twrapped.set(buff, prefixLength);\n\t\t\treturn wrapped.subarray(prefixLength, prefixLength + buff.byteLength);\n\t\t}\n\t\tfunction wrapAndSlice(buff: VSBuffer, prefixLength: number, suffixLength: number): VSBuffer {\n\t\t\treturn VSBuffer.wrap(wrapAndSliceUint8Arry(buff.buffer, prefixLength, suffixLength));\n\t\t}\n\t\tconst dto: ISemanticTokensDto = {\n\t\t\tid: 5,\n\t\t\ttype: 'full',\n\t\t\tdata: new Uint32Array([1, 2, 3, 4, 5])\n\t\t};\n\t\tconst encoded = encodeSemanticTokensDto(dto);\n\n\t\t// with misaligned prefix and misaligned suffix\n\t\tassertEqualFull(<IFullSemanticTokensDto>decodeSemanticTokensDto(wrapAndSlice(encoded, 1, 1)), dto);\n\t\t// with misaligned prefix and aligned suffix\n\t\tassertEqualFull(<IFullSemanticTokensDto>decodeSemanticTokensDto(wrapAndSlice(encoded, 1, 4)), dto);\n\t\t// with aligned prefix and misaligned suffix\n\t\tassertEqualFull(<IFullSemanticTokensDto>decodeSemanticTokensDto(wrapAndSlice(encoded, 4, 1)), dto);\n\t\t// with aligned prefix and aligned suffix\n\t\tassertEqualFull(<IFullSemanticTokensDto>decodeSemanticTokensDto(wrapAndSlice(encoded, 4, 4)), dto);\n\t});\n});\n"]}