{"version":3,"file":"testCommand.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/test/browser/testCommand.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAWhG,SAAgB,WAAW,CAC1B,KAAe,EACf,kBAA6C,EAC7C,SAAoB,EACpB,cAAkD,EAClD,aAAuB,EACvB,iBAA4B,EAC5B,iBAA2B;QAE3B,IAAI,KAAK,GAAG,CAAA,GAAA,iCAAe,CAAA,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,kBAAkB,CAAC,CAAC;QAC7E,CAAA,GAAA,mCAAkB,CAAA,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAC5D,IAAI,CAAC,MAAM,EAAE;gBACZ,OAAO;aACP;YAED,IAAI,iBAAiB,EAAE;gBACtB,KAAK,CAAC,iBAAiB,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC,CAAC;aAC9C;YAED,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;YAE3C,MAAM,CAAC,cAAc,CAAC,cAAc,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC;YAEtE,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,eAAe,EAAE,EAAE,aAAa,CAAC,CAAC;YAE/D,IAAI,eAAe,GAAG,MAAM,CAAC,YAAY,EAAE,CAAC;YAC5C,MAAM,CAAC,eAAe,CAAC,eAAe,CAAC,QAAQ,EAAE,EAAE,iBAAiB,CAAC,QAAQ,EAAE,CAAC,CAAC;QAElF,CAAC,CAAC,CAAC;QACH,KAAK,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IA9BD,kCA8BC;IAED;;OAEG;IACH,SAAgB,gBAAgB,CAAC,KAAiB,EAAE,OAAiB;QACpE,IAAI,UAAU,GAAqC,EAAE,CAAC;QACtD,IAAI,oBAAoB,GAA0B;YACjD,gBAAgB,EAAE,CAAC,KAAa,EAAE,IAAY,EAAE,mBAA4B,KAAK,EAAE,EAAE;gBACpF,UAAU,CAAC,IAAI,CAAC;oBACf,KAAK,EAAE,KAAK;oBACZ,IAAI,EAAE,IAAI;oBACV,gBAAgB,EAAE,gBAAgB;iBAClC,CAAC,CAAC;YACJ,CAAC;YAED,uBAAuB,EAAE,CAAC,KAAa,EAAE,IAAY,EAAE,mBAA4B,KAAK,EAAE,EAAE;gBAC3F,UAAU,CAAC,IAAI,CAAC;oBACf,KAAK,EAAE,KAAK;oBACZ,IAAI,EAAE,IAAI;oBACV,gBAAgB,EAAE,gBAAgB;iBAClC,CAAC,CAAC;YACJ,CAAC;YAGD,cAAc,EAAE,CAAC,SAAqB,EAAE,EAAE;gBACzC,OAAO,EAAE,CAAC;YACX,CAAC;SACD,CAAC;QACF,OAAO,CAAC,iBAAiB,CAAC,KAAK,EAAE,oBAAoB,CAAC,CAAC;QACvD,OAAO,UAAU,CAAC;IACnB,CAAC;IA1BD,4CA0BC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { IRange } from 'vs/editor/common/core/range';\nimport { Selection, ISelection } from 'vs/editor/common/core/selection';\nimport { ICommand, IEditOperationBuilder } from 'vs/editor/common/editorCommon';\nimport { IIdentifiedSingleEditOperation, ITextModel } from 'vs/editor/common/model';\nimport { createTextModel } from 'vs/editor/test/common/editorTestUtils';\nimport { LanguageIdentifier } from 'vs/editor/common/modes';\nimport { withTestCodeEditor } from 'vs/editor/test/browser/testCodeEditor';\n\nexport function testCommand(\n\tlines: string[],\n\tlanguageIdentifier: LanguageIdentifier | null,\n\tselection: Selection,\n\tcommandFactory: (selection: Selection) => ICommand,\n\texpectedLines: string[],\n\texpectedSelection: Selection,\n\tforceTokenization?: boolean\n): void {\n\tlet model = createTextModel(lines.join('\\n'), undefined, languageIdentifier);\n\twithTestCodeEditor('', { model: model }, (_editor, cursor) => {\n\t\tif (!cursor) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (forceTokenization) {\n\t\t\tmodel.forceTokenization(model.getLineCount());\n\t\t}\n\n\t\tcursor.setSelections('tests', [selection]);\n\n\t\tcursor.executeCommand(commandFactory(cursor.getSelection()), 'tests');\n\n\t\tassert.deepStrictEqual(model.getLinesContent(), expectedLines);\n\n\t\tlet actualSelection = cursor.getSelection();\n\t\tassert.deepStrictEqual(actualSelection.toString(), expectedSelection.toString());\n\n\t});\n\tmodel.dispose();\n}\n\n/**\n * Extract edit operations if command `command` were to execute on model `model`\n */\nexport function getEditOperation(model: ITextModel, command: ICommand): IIdentifiedSingleEditOperation[] {\n\tlet operations: IIdentifiedSingleEditOperation[] = [];\n\tlet editOperationBuilder: IEditOperationBuilder = {\n\t\taddEditOperation: (range: IRange, text: string, forceMoveMarkers: boolean = false) => {\n\t\t\toperations.push({\n\t\t\t\trange: range,\n\t\t\t\ttext: text,\n\t\t\t\tforceMoveMarkers: forceMoveMarkers\n\t\t\t});\n\t\t},\n\n\t\taddTrackedEditOperation: (range: IRange, text: string, forceMoveMarkers: boolean = false) => {\n\t\t\toperations.push({\n\t\t\t\trange: range,\n\t\t\t\ttext: text,\n\t\t\t\tforceMoveMarkers: forceMoveMarkers\n\t\t\t});\n\t\t},\n\n\n\t\ttrackSelection: (selection: ISelection) => {\n\t\t\treturn '';\n\t\t}\n\t};\n\tcommand.getEditOperations(model, editOperationBuilder);\n\treturn operations;\n}\n"]}