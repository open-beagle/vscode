{"version":3,"file":"editorTestServices.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/test/browser/editorTestServices.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAWhG,MAAa,qBAAsB,SAAQ,qDAAyB;QAE5D,mBAAmB,KAAyB,OAAO,IAAI,CAAC,CAAC,CAAC;QAC1D,cAAc,CAAC,KAA2B,EAAE,MAA0B,EAAE,UAAoB;YAClG,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;YACvB,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC9B,CAAC;QACM,sBAAsB,CAAC,GAAW,EAAE,OAAiC,EAAE,aAAsB,IAAU,CAAC;QACxG,oBAAoB,CAAC,GAAW,IAAU,CAAC;QAC3C,wBAAwB,CAAC,iBAAyB,EAAE,QAAiB,IAA6B,OAAO,EAAE,CAAC,CAAC,CAAC;QAC9G,yBAAyB,CAAC,iBAAyB,IAAwB,OAAO,IAAI,CAAC,CAAC,CAAC;KAChG;IAXD,sDAWC;IAED,MAAa,kBAAkB;QAW9B,YAAY,oBAA2C;YANtC,0BAAqB,GAAG,IAAI,eAAO,EAAiB,CAAC;YACtD,yBAAoB,GAAyB,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC;YAE7E,yBAAoB,GAAG,IAAI,eAAO,EAAiB,CAAC;YACrD,wBAAmB,GAAyB,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC;YAG3F,IAAI,CAAC,qBAAqB,GAAG,oBAAoB,CAAC;QACnD,CAAC;QAEM,cAAc,CAAI,EAAU,EAAE,GAAG,IAAW;YAClD,MAAM,OAAO,GAAG,2BAAgB,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;YAChD,IAAI,CAAC,OAAO,EAAE;gBACb,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC,CAAC;aAC9D;YAED,IAAI;gBACH,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;gBACzD,MAAM,MAAM,GAAG,IAAI,CAAC,qBAAqB,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC,qBAAqB,EAAE,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAM,CAAC;gBAC5H,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;gBACxD,OAAO,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;aAC/B;YAAC,OAAO,GAAG,EAAE;gBACb,OAAO,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aAC3B;QACF,CAAC;KACD;IA9BD,gDA8BC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { AbstractCodeEditorService } from 'vs/editor/browser/services/abstractCodeEditorService';\nimport { IDecorationRenderOptions } from 'vs/editor/common/editorCommon';\nimport { IModelDecorationOptions } from 'vs/editor/common/model';\nimport { CommandsRegistry, ICommandEvent, ICommandService } from 'vs/platform/commands/common/commands';\nimport { IResourceEditorInput } from 'vs/platform/editor/common/editor';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\n\nexport class TestCodeEditorService extends AbstractCodeEditorService {\n\tpublic lastInput?: IResourceEditorInput;\n\tpublic getActiveCodeEditor(): ICodeEditor | null { return null; }\n\tpublic openCodeEditor(input: IResourceEditorInput, source: ICodeEditor | null, sideBySide?: boolean): Promise<ICodeEditor | null> {\n\t\tthis.lastInput = input;\n\t\treturn Promise.resolve(null);\n\t}\n\tpublic registerDecorationType(key: string, options: IDecorationRenderOptions, parentTypeKey?: string): void { }\n\tpublic removeDecorationType(key: string): void { }\n\tpublic resolveDecorationOptions(decorationTypeKey: string, writable: boolean): IModelDecorationOptions { return {}; }\n\tpublic resolveDecorationCSSRules(decorationTypeKey: string): CSSRuleList | null { return null; }\n}\n\nexport class TestCommandService implements ICommandService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _instantiationService: IInstantiationService;\n\n\tprivate readonly _onWillExecuteCommand = new Emitter<ICommandEvent>();\n\tpublic readonly onWillExecuteCommand: Event<ICommandEvent> = this._onWillExecuteCommand.event;\n\n\tprivate readonly _onDidExecuteCommand = new Emitter<ICommandEvent>();\n\tpublic readonly onDidExecuteCommand: Event<ICommandEvent> = this._onDidExecuteCommand.event;\n\n\tconstructor(instantiationService: IInstantiationService) {\n\t\tthis._instantiationService = instantiationService;\n\t}\n\n\tpublic executeCommand<T>(id: string, ...args: any[]): Promise<T> {\n\t\tconst command = CommandsRegistry.getCommand(id);\n\t\tif (!command) {\n\t\t\treturn Promise.reject(new Error(`command '${id}' not found`));\n\t\t}\n\n\t\ttry {\n\t\t\tthis._onWillExecuteCommand.fire({ commandId: id, args });\n\t\t\tconst result = this._instantiationService.invokeFunction.apply(this._instantiationService, [command.handler, ...args]) as T;\n\t\t\tthis._onDidExecuteCommand.fire({ commandId: id, args });\n\t\t\treturn Promise.resolve(result);\n\t\t} catch (err) {\n\t\t\treturn Promise.reject(err);\n\t\t}\n\t}\n}\n"]}