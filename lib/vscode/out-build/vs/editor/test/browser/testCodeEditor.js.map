{"version":3,"file":"testCodeEditor.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/editor/test/browser/testCodeEditor.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ICodeEditor, IActiveCodeEditor, IEditorConstructionOptions } from 'vs/editor/browser/editorBrowser';\nimport { IEditorContributionCtor } from 'vs/editor/browser/editorExtensions';\nimport { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';\nimport { View } from 'vs/editor/browser/view/viewImpl';\nimport { CodeEditorWidget, ICodeEditorWidgetOptions } from 'vs/editor/browser/widget/codeEditorWidget';\nimport * as editorOptions from 'vs/editor/common/config/editorOptions';\nimport { IConfiguration, IEditorContribution } from 'vs/editor/common/editorCommon';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { ViewModel } from 'vs/editor/common/viewModel/viewModelImpl';\nimport { TestCodeEditorService, TestCommandService } from 'vs/editor/test/browser/editorTestServices';\nimport { createTextModel } from 'vs/editor/test/common/editorTestUtils';\nimport { TestConfiguration } from 'vs/editor/test/common/mocks/testConfiguration';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { IContextKeyService, IContextKeyServiceTarget } from 'vs/platform/contextkey/common/contextkey';\nimport { BrandedService, IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { InstantiationService } from 'vs/platform/instantiation/common/instantiationService';\nimport { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';\nimport { MockContextKeyService } from 'vs/platform/keybinding/test/common/mockKeybindingService';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { TestNotificationService } from 'vs/platform/notification/test/common/testNotificationService';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { NullTelemetryService } from 'vs/platform/telemetry/common/telemetryUtils';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { TestThemeService } from 'vs/platform/theme/test/common/testThemeService';\n\nexport interface ITestCodeEditor extends IActiveCodeEditor {\n\tgetViewModel(): ViewModel | undefined;\n\tregisterAndInstantiateContribution<T extends IEditorContribution, Services extends BrandedService[]>(id: string, ctor: new (editor: ICodeEditor, ...services: Services) => T): T;\n}\n\nexport class TestCodeEditor extends CodeEditorWidget implements ICodeEditor {\n\n\t//#region testing overrides\n\tprotected override _createConfiguration(options: Readonly<IEditorConstructionOptions>): IConfiguration {\n\t\treturn new TestConfiguration(options);\n\t}\n\tprotected override _createView(viewModel: ViewModel): [View, boolean] {\n\t\t// Never create a view\n\t\treturn [null! as View, false];\n\t}\n\tprivate _hasTextFocus = false;\n\tpublic setHasTextFocus(hasTextFocus: boolean): void {\n\t\tthis._hasTextFocus = hasTextFocus;\n\t}\n\tpublic override hasTextFocus(): boolean {\n\t\treturn this._hasTextFocus;\n\t}\n\t//#endregion\n\n\t//#region Testing utils\n\tpublic getViewModel(): ViewModel | undefined {\n\t\treturn this._modelData ? this._modelData.viewModel : undefined;\n\t}\n\tpublic registerAndInstantiateContribution<T extends IEditorContribution, Services extends BrandedService[]>(id: string, ctor: new (editor: ICodeEditor, ...services: Services) => T): T {\n\t\tconst r: T = this._instantiationService.createInstance(ctor as IEditorContributionCtor, this);\n\t\tthis._contributions[id] = r;\n\t\treturn r;\n\t}\n}\n\nclass TestCodeEditorWithAutoModelDisposal extends TestCodeEditor {\n\tpublic override dispose() {\n\t\tsuper.dispose();\n\t\tif (this._modelData) {\n\t\t\tthis._modelData.model.dispose();\n\t\t}\n\t}\n}\n\nclass TestEditorDomElement {\n\tparentElement: IContextKeyServiceTarget | null = null;\n\tsetAttribute(attr: string, value: string): void { }\n\tremoveAttribute(attr: string): void { }\n\thasAttribute(attr: string): boolean { return false; }\n\tgetAttribute(attr: string): string | undefined { return undefined; }\n\taddEventListener(event: string): void { }\n\tremoveEventListener(event: string): void { }\n}\n\nexport interface TestCodeEditorCreationOptions extends editorOptions.IEditorOptions {\n\t/**\n\t * The initial model associated with this code editor.\n\t */\n\tmodel?: ITextModel;\n\tserviceCollection?: ServiceCollection;\n\t/**\n\t * If the editor has text focus.\n\t * Defaults to true.\n\t */\n\thasTextFocus?: boolean;\n}\n\nexport function withTestCodeEditor(text: string | string[] | null, options: TestCodeEditorCreationOptions, callback: (editor: ITestCodeEditor, viewModel: ViewModel) => void): void {\n\t// create a model if necessary and remember it in order to dispose it.\n\tif (!options.model) {\n\t\tif (typeof text === 'string') {\n\t\t\toptions.model = createTextModel(text);\n\t\t} else if (text) {\n\t\t\toptions.model = createTextModel(text.join('\\n'));\n\t\t}\n\t}\n\n\tconst editor = createTestCodeEditor(options);\n\tconst viewModel = editor.getViewModel()!;\n\tviewModel.setHasFocus(true);\n\tcallback(<ITestCodeEditor>editor, editor.getViewModel()!);\n\n\teditor.dispose();\n}\n\nexport async function withAsyncTestCodeEditor(text: string | string[] | null, options: TestCodeEditorCreationOptions, callback: (editor: ITestCodeEditor, viewModel: ViewModel, instantiationService: IInstantiationService) => Promise<void>): Promise<void> {\n\t// create a model if necessary and remember it in order to dispose it.\n\tif (!options.model) {\n\t\tif (typeof text === 'string') {\n\t\t\toptions.model = createTextModel(text);\n\t\t} else if (text) {\n\t\t\toptions.model = createTextModel(text.join('\\n'));\n\t\t}\n\t}\n\n\tconst [instantiationService, editor] = doCreateTestCodeEditor(options);\n\tconst viewModel = editor.getViewModel()!;\n\tviewModel.setHasFocus(true);\n\tawait callback(<ITestCodeEditor>editor, editor.getViewModel()!, instantiationService);\n\n\teditor.dispose();\n}\n\nexport function createTestCodeEditor(options: TestCodeEditorCreationOptions): ITestCodeEditor {\n\tconst [, editor] = doCreateTestCodeEditor(options);\n\treturn editor;\n}\n\nfunction doCreateTestCodeEditor(options: TestCodeEditorCreationOptions): [IInstantiationService, ITestCodeEditor] {\n\n\tconst model = options.model;\n\tdelete options.model;\n\n\tconst services: ServiceCollection = options.serviceCollection || new ServiceCollection();\n\tdelete options.serviceCollection;\n\n\tconst instantiationService: IInstantiationService = new InstantiationService(services);\n\n\tif (!services.has(ICodeEditorService)) {\n\t\tservices.set(ICodeEditorService, new TestCodeEditorService());\n\t}\n\tif (!services.has(IContextKeyService)) {\n\t\tservices.set(IContextKeyService, new MockContextKeyService());\n\t}\n\tif (!services.has(INotificationService)) {\n\t\tservices.set(INotificationService, new TestNotificationService());\n\t}\n\tif (!services.has(ICommandService)) {\n\t\tservices.set(ICommandService, new TestCommandService(instantiationService));\n\t}\n\tif (!services.has(IThemeService)) {\n\t\tservices.set(IThemeService, new TestThemeService());\n\t}\n\tif (!services.has(ITelemetryService)) {\n\t\tservices.set(ITelemetryService, NullTelemetryService);\n\t}\n\n\tconst codeEditorWidgetOptions: ICodeEditorWidgetOptions = {\n\t\tcontributions: []\n\t};\n\tconst editor = instantiationService.createInstance(\n\t\tTestCodeEditorWithAutoModelDisposal,\n\t\t<HTMLElement><any>new TestEditorDomElement(),\n\t\toptions,\n\t\tcodeEditorWidgetOptions\n\t);\n\tif (typeof options.hasTextFocus === 'undefined') {\n\t\toptions.hasTextFocus = true;\n\t}\n\teditor.setHasTextFocus(options.hasTextFocus);\n\teditor.setModel(model);\n\treturn [instantiationService, <ITestCodeEditor>editor];\n}\n"]}