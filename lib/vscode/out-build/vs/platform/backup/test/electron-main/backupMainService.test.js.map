{"version":3,"file":"backupMainService.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/backup/test/electron-main/backupMainService.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport * as platform from 'vs/base/common/platform';\nimport * as fs from 'fs';\nimport * as os from 'os';\nimport * as path from 'vs/base/common/path';\nimport * as pfs from 'vs/base/node/pfs';\nimport { URI } from 'vs/base/common/uri';\nimport { EnvironmentMainService } from 'vs/platform/environment/electron-main/environmentMainService';\nimport { parseArgs, OPTIONS } from 'vs/platform/environment/node/argv';\nimport { BackupMainService } from 'vs/platform/backup/electron-main/backupMainService';\nimport { IWorkspaceBackupInfo } from 'vs/platform/backup/electron-main/backup';\nimport { IBackupWorkspacesFormat, ISerializedWorkspace } from 'vs/platform/backup/node/backup';\nimport { HotExitConfiguration } from 'vs/platform/files/common/files';\nimport { TestConfigurationService } from 'vs/platform/configuration/test/common/testConfigurationService';\nimport { ConsoleMainLogger, LogService } from 'vs/platform/log/common/log';\nimport { IWorkspaceIdentifier } from 'vs/platform/workspaces/common/workspaces';\nimport { createHash } from 'crypto';\nimport { flakySuite, getRandomTestPath } from 'vs/base/test/node/testUtils';\nimport { Schemas } from 'vs/base/common/network';\nimport { isEqual } from 'vs/base/common/resources';\nimport product from 'vs/platform/product/common/product';\n\nflakySuite('BackupMainService', () => {\n\n\tfunction assertEqualUris(actual: URI[], expected: URI[]) {\n\t\tassert.deepStrictEqual(actual.map(a => a.toString()), expected.map(a => a.toString()));\n\t}\n\n\tfunction toWorkspace(path: string): IWorkspaceIdentifier {\n\t\treturn {\n\t\t\tid: createHash('md5').update(sanitizePath(path)).digest('hex'),\n\t\t\tconfigPath: URI.file(path)\n\t\t};\n\t}\n\n\tfunction toWorkspaceBackupInfo(path: string, remoteAuthority?: string): IWorkspaceBackupInfo {\n\t\treturn {\n\t\t\tworkspace: {\n\t\t\t\tid: createHash('md5').update(sanitizePath(path)).digest('hex'),\n\t\t\t\tconfigPath: URI.file(path)\n\t\t\t},\n\t\t\tremoteAuthority\n\t\t};\n\t}\n\n\tfunction toSerializedWorkspace(ws: IWorkspaceIdentifier): ISerializedWorkspace {\n\t\treturn {\n\t\t\tid: ws.id,\n\t\t\tconfigURIPath: ws.configPath.toString()\n\t\t};\n\t}\n\n\tfunction ensureFolderExists(uri: URI): Promise<void> {\n\t\tif (!fs.existsSync(uri.fsPath)) {\n\t\t\tfs.mkdirSync(uri.fsPath);\n\t\t}\n\n\t\tconst backupFolder = service.toBackupPath(uri);\n\t\treturn createBackupFolder(backupFolder);\n\t}\n\n\tasync function ensureWorkspaceExists(workspace: IWorkspaceIdentifier): Promise<IWorkspaceIdentifier> {\n\t\tif (!fs.existsSync(workspace.configPath.fsPath)) {\n\t\t\tawait pfs.writeFile(workspace.configPath.fsPath, 'Hello');\n\t\t}\n\n\t\tconst backupFolder = service.toBackupPath(workspace.id);\n\t\tawait createBackupFolder(backupFolder);\n\n\t\treturn workspace;\n\t}\n\n\tasync function createBackupFolder(backupFolder: string): Promise<void> {\n\t\tif (!fs.existsSync(backupFolder)) {\n\t\t\tfs.mkdirSync(backupFolder);\n\t\t\tfs.mkdirSync(path.join(backupFolder, Schemas.file));\n\t\t\tawait pfs.writeFile(path.join(backupFolder, Schemas.file, 'foo.txt'), 'Hello');\n\t\t}\n\t}\n\n\tfunction sanitizePath(p: string): string {\n\t\treturn platform.isLinux ? p : p.toLowerCase();\n\t}\n\n\tconst fooFile = URI.file(platform.isWindows ? 'C:\\\\foo' : '/foo');\n\tconst barFile = URI.file(platform.isWindows ? 'C:\\\\bar' : '/bar');\n\n\tlet service: BackupMainService & { toBackupPath(arg: URI | string): string, getFolderHash(folderUri: URI): string };\n\tlet configService: TestConfigurationService;\n\n\tlet environmentService: EnvironmentMainService;\n\tlet testDir: string;\n\tlet backupHome: string;\n\tlet backupWorkspacesPath: string;\n\tlet existingTestFolder1: URI;\n\n\tsetup(async () => {\n\t\ttestDir = getRandomTestPath(os.tmpdir(), 'vsctests', 'backupmainservice');\n\t\tbackupHome = path.join(testDir, 'Backups');\n\t\tbackupWorkspacesPath = path.join(backupHome, 'workspaces.json');\n\t\texistingTestFolder1 = URI.file(path.join(testDir, 'folder1'));\n\n\t\tenvironmentService = new EnvironmentMainService(parseArgs(process.argv, OPTIONS), { _serviceBrand: undefined, ...product });\n\n\t\tawait fs.promises.mkdir(backupHome, { recursive: true });\n\n\t\tconfigService = new TestConfigurationService();\n\t\tservice = new class TestBackupMainService extends BackupMainService {\n\t\t\tconstructor() {\n\t\t\t\tsuper(environmentService, configService, new LogService(new ConsoleMainLogger()));\n\n\t\t\t\tthis.backupHome = backupHome;\n\t\t\t\tthis.workspacesJsonPath = backupWorkspacesPath;\n\t\t\t}\n\n\t\t\ttoBackupPath(arg: URI | string): string {\n\t\t\t\tconst id = arg instanceof URI ? super.getFolderHash(arg) : arg;\n\t\t\t\treturn path.join(this.backupHome, id);\n\t\t\t}\n\n\t\t\toverride getFolderHash(folderUri: URI): string {\n\t\t\t\treturn super.getFolderHash(folderUri);\n\t\t\t}\n\t\t};\n\n\t\treturn service.initialize();\n\t});\n\n\tteardown(() => {\n\t\treturn pfs.rimraf(testDir);\n\t});\n\n\ttest('service validates backup workspaces on startup and cleans up (folder workspaces)', async function () {\n\n\t\t// 1) backup workspace path does not exist\n\t\tservice.registerFolderBackupSync(fooFile);\n\t\tservice.registerFolderBackupSync(barFile);\n\t\tawait service.initialize();\n\t\tassertEqualUris(service.getFolderBackupPaths(), []);\n\n\t\t// 2) backup workspace path exists with empty contents within\n\t\tfs.mkdirSync(service.toBackupPath(fooFile));\n\t\tfs.mkdirSync(service.toBackupPath(barFile));\n\t\tservice.registerFolderBackupSync(fooFile);\n\t\tservice.registerFolderBackupSync(barFile);\n\t\tawait service.initialize();\n\t\tassertEqualUris(service.getFolderBackupPaths(), []);\n\t\tassert.ok(!fs.existsSync(service.toBackupPath(fooFile)));\n\t\tassert.ok(!fs.existsSync(service.toBackupPath(barFile)));\n\n\t\t// 3) backup workspace path exists with empty folders within\n\t\tfs.mkdirSync(service.toBackupPath(fooFile));\n\t\tfs.mkdirSync(service.toBackupPath(barFile));\n\t\tfs.mkdirSync(path.join(service.toBackupPath(fooFile), Schemas.file));\n\t\tfs.mkdirSync(path.join(service.toBackupPath(barFile), Schemas.untitled));\n\t\tservice.registerFolderBackupSync(fooFile);\n\t\tservice.registerFolderBackupSync(barFile);\n\t\tawait service.initialize();\n\t\tassertEqualUris(service.getFolderBackupPaths(), []);\n\t\tassert.ok(!fs.existsSync(service.toBackupPath(fooFile)));\n\t\tassert.ok(!fs.existsSync(service.toBackupPath(barFile)));\n\n\t\t// 4) backup workspace path points to a workspace that no longer exists\n\t\t// so it should convert the backup worspace to an empty workspace backup\n\t\tconst fileBackups = path.join(service.toBackupPath(fooFile), Schemas.file);\n\t\tfs.mkdirSync(service.toBackupPath(fooFile));\n\t\tfs.mkdirSync(service.toBackupPath(barFile));\n\t\tfs.mkdirSync(fileBackups);\n\t\tservice.registerFolderBackupSync(fooFile);\n\t\tassert.strictEqual(service.getFolderBackupPaths().length, 1);\n\t\tassert.strictEqual(service.getEmptyWindowBackupPaths().length, 0);\n\t\tfs.writeFileSync(path.join(fileBackups, 'backup.txt'), '');\n\t\tawait service.initialize();\n\t\tassert.strictEqual(service.getFolderBackupPaths().length, 0);\n\t\tassert.strictEqual(service.getEmptyWindowBackupPaths().length, 1);\n\t});\n\n\ttest('service validates backup workspaces on startup and cleans up (root workspaces)', async function () {\n\n\t\t// 1) backup workspace path does not exist\n\t\tservice.registerWorkspaceBackupSync(toWorkspaceBackupInfo(fooFile.fsPath));\n\t\tservice.registerWorkspaceBackupSync(toWorkspaceBackupInfo(barFile.fsPath));\n\t\tawait service.initialize();\n\t\tassert.deepStrictEqual(service.getWorkspaceBackups(), []);\n\n\t\t// 2) backup workspace path exists with empty contents within\n\t\tfs.mkdirSync(service.toBackupPath(fooFile));\n\t\tfs.mkdirSync(service.toBackupPath(barFile));\n\t\tservice.registerWorkspaceBackupSync(toWorkspaceBackupInfo(fooFile.fsPath));\n\t\tservice.registerWorkspaceBackupSync(toWorkspaceBackupInfo(barFile.fsPath));\n\t\tawait service.initialize();\n\t\tassert.deepStrictEqual(service.getWorkspaceBackups(), []);\n\t\tassert.ok(!fs.existsSync(service.toBackupPath(fooFile)));\n\t\tassert.ok(!fs.existsSync(service.toBackupPath(barFile)));\n\n\t\t// 3) backup workspace path exists with empty folders within\n\t\tfs.mkdirSync(service.toBackupPath(fooFile));\n\t\tfs.mkdirSync(service.toBackupPath(barFile));\n\t\tfs.mkdirSync(path.join(service.toBackupPath(fooFile), Schemas.file));\n\t\tfs.mkdirSync(path.join(service.toBackupPath(barFile), Schemas.untitled));\n\t\tservice.registerWorkspaceBackupSync(toWorkspaceBackupInfo(fooFile.fsPath));\n\t\tservice.registerWorkspaceBackupSync(toWorkspaceBackupInfo(barFile.fsPath));\n\t\tawait service.initialize();\n\t\tassert.deepStrictEqual(service.getWorkspaceBackups(), []);\n\t\tassert.ok(!fs.existsSync(service.toBackupPath(fooFile)));\n\t\tassert.ok(!fs.existsSync(service.toBackupPath(barFile)));\n\n\t\t// 4) backup workspace path points to a workspace that no longer exists\n\t\t// so it should convert the backup worspace to an empty workspace backup\n\t\tconst fileBackups = path.join(service.toBackupPath(fooFile), Schemas.file);\n\t\tfs.mkdirSync(service.toBackupPath(fooFile));\n\t\tfs.mkdirSync(service.toBackupPath(barFile));\n\t\tfs.mkdirSync(fileBackups);\n\t\tservice.registerWorkspaceBackupSync(toWorkspaceBackupInfo(fooFile.fsPath));\n\t\tassert.strictEqual(service.getWorkspaceBackups().length, 1);\n\t\tassert.strictEqual(service.getEmptyWindowBackupPaths().length, 0);\n\t\tfs.writeFileSync(path.join(fileBackups, 'backup.txt'), '');\n\t\tawait service.initialize();\n\t\tassert.strictEqual(service.getWorkspaceBackups().length, 0);\n\t\tassert.strictEqual(service.getEmptyWindowBackupPaths().length, 1);\n\t});\n\n\ttest('service supports to migrate backup data from another location', () => {\n\t\tconst backupPathToMigrate = service.toBackupPath(fooFile);\n\t\tfs.mkdirSync(backupPathToMigrate);\n\t\tfs.writeFileSync(path.join(backupPathToMigrate, 'backup.txt'), 'Some Data');\n\t\tservice.registerFolderBackupSync(URI.file(backupPathToMigrate));\n\n\t\tconst workspaceBackupPath = service.registerWorkspaceBackupSync(toWorkspaceBackupInfo(barFile.fsPath), backupPathToMigrate);\n\n\t\tassert.ok(fs.existsSync(workspaceBackupPath));\n\t\tassert.ok(fs.existsSync(path.join(workspaceBackupPath, 'backup.txt')));\n\t\tassert.ok(!fs.existsSync(backupPathToMigrate));\n\n\t\tconst emptyBackups = service.getEmptyWindowBackupPaths();\n\t\tassert.strictEqual(0, emptyBackups.length);\n\t});\n\n\ttest('service backup migration makes sure to preserve existing backups', () => {\n\t\tconst backupPathToMigrate = service.toBackupPath(fooFile);\n\t\tfs.mkdirSync(backupPathToMigrate);\n\t\tfs.writeFileSync(path.join(backupPathToMigrate, 'backup.txt'), 'Some Data');\n\t\tservice.registerFolderBackupSync(URI.file(backupPathToMigrate));\n\n\t\tconst backupPathToPreserve = service.toBackupPath(barFile);\n\t\tfs.mkdirSync(backupPathToPreserve);\n\t\tfs.writeFileSync(path.join(backupPathToPreserve, 'backup.txt'), 'Some Data');\n\t\tservice.registerFolderBackupSync(URI.file(backupPathToPreserve));\n\n\t\tconst workspaceBackupPath = service.registerWorkspaceBackupSync(toWorkspaceBackupInfo(barFile.fsPath), backupPathToMigrate);\n\n\t\tassert.ok(fs.existsSync(workspaceBackupPath));\n\t\tassert.ok(fs.existsSync(path.join(workspaceBackupPath, 'backup.txt')));\n\t\tassert.ok(!fs.existsSync(backupPathToMigrate));\n\n\t\tconst emptyBackups = service.getEmptyWindowBackupPaths();\n\t\tassert.strictEqual(1, emptyBackups.length);\n\t\tassert.strictEqual(1, fs.readdirSync(path.join(backupHome, emptyBackups[0].backupFolder!)).length);\n\t});\n\n\tsuite('loadSync', () => {\n\t\ttest('getFolderBackupPaths() should return [] when workspaces.json doesn\\'t exist', () => {\n\t\t\tassertEqualUris(service.getFolderBackupPaths(), []);\n\t\t});\n\n\t\ttest('getFolderBackupPaths() should return [] when workspaces.json is not properly formed JSON', async () => {\n\t\t\tfs.writeFileSync(backupWorkspacesPath, '');\n\t\t\tawait service.initialize();\n\t\t\tassertEqualUris(service.getFolderBackupPaths(), []);\n\t\t\tfs.writeFileSync(backupWorkspacesPath, '{]');\n\t\t\tawait service.initialize();\n\t\t\tassertEqualUris(service.getFolderBackupPaths(), []);\n\t\t\tfs.writeFileSync(backupWorkspacesPath, 'foo');\n\t\t\tawait service.initialize();\n\t\t\tassertEqualUris(service.getFolderBackupPaths(), []);\n\t\t});\n\n\t\ttest('getFolderBackupPaths() should return [] when folderWorkspaces in workspaces.json is absent', async () => {\n\t\t\tfs.writeFileSync(backupWorkspacesPath, '{}');\n\t\t\tawait service.initialize();\n\t\t\tassertEqualUris(service.getFolderBackupPaths(), []);\n\t\t});\n\n\t\ttest('getFolderBackupPaths() should return [] when folderWorkspaces in workspaces.json is not a string array', async () => {\n\t\t\tfs.writeFileSync(backupWorkspacesPath, '{\"folderWorkspaces\":{}}');\n\t\t\tawait service.initialize();\n\t\t\tassertEqualUris(service.getFolderBackupPaths(), []);\n\t\t\tfs.writeFileSync(backupWorkspacesPath, '{\"folderWorkspaces\":{\"foo\": [\"bar\"]}}');\n\t\t\tawait service.initialize();\n\t\t\tassertEqualUris(service.getFolderBackupPaths(), []);\n\t\t\tfs.writeFileSync(backupWorkspacesPath, '{\"folderWorkspaces\":{\"foo\": []}}');\n\t\t\tawait service.initialize();\n\t\t\tassertEqualUris(service.getFolderBackupPaths(), []);\n\t\t\tfs.writeFileSync(backupWorkspacesPath, '{\"folderWorkspaces\":{\"foo\": \"bar\"}}');\n\t\t\tawait service.initialize();\n\t\t\tassertEqualUris(service.getFolderBackupPaths(), []);\n\t\t\tfs.writeFileSync(backupWorkspacesPath, '{\"folderWorkspaces\":\"foo\"}');\n\t\t\tawait service.initialize();\n\t\t\tassertEqualUris(service.getFolderBackupPaths(), []);\n\t\t\tfs.writeFileSync(backupWorkspacesPath, '{\"folderWorkspaces\":1}');\n\t\t\tawait service.initialize();\n\t\t\tassertEqualUris(service.getFolderBackupPaths(), []);\n\t\t});\n\n\t\ttest('getFolderBackupPaths() should return [] when files.hotExit = \"onExitAndWindowClose\"', async () => {\n\t\t\tservice.registerFolderBackupSync(URI.file(fooFile.fsPath.toUpperCase()));\n\t\t\tassertEqualUris(service.getFolderBackupPaths(), [URI.file(fooFile.fsPath.toUpperCase())]);\n\t\t\tconfigService.setUserConfiguration('files.hotExit', HotExitConfiguration.ON_EXIT_AND_WINDOW_CLOSE);\n\t\t\tawait service.initialize();\n\t\t\tassertEqualUris(service.getFolderBackupPaths(), []);\n\t\t});\n\n\t\ttest('getWorkspaceBackups() should return [] when workspaces.json doesn\\'t exist', () => {\n\t\t\tassert.deepStrictEqual(service.getWorkspaceBackups(), []);\n\t\t});\n\n\t\ttest('getWorkspaceBackups() should return [] when workspaces.json is not properly formed JSON', async () => {\n\t\t\tfs.writeFileSync(backupWorkspacesPath, '');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.getWorkspaceBackups(), []);\n\t\t\tfs.writeFileSync(backupWorkspacesPath, '{]');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.getWorkspaceBackups(), []);\n\t\t\tfs.writeFileSync(backupWorkspacesPath, 'foo');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.getWorkspaceBackups(), []);\n\t\t});\n\n\t\ttest('getWorkspaceBackups() should return [] when folderWorkspaces in workspaces.json is absent', async () => {\n\t\t\tfs.writeFileSync(backupWorkspacesPath, '{}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.getWorkspaceBackups(), []);\n\t\t});\n\n\t\ttest('getWorkspaceBackups() should return [] when rootWorkspaces in workspaces.json is not a object array', async () => {\n\t\t\tfs.writeFileSync(backupWorkspacesPath, '{\"rootWorkspaces\":{}}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.getWorkspaceBackups(), []);\n\t\t\tfs.writeFileSync(backupWorkspacesPath, '{\"rootWorkspaces\":{\"foo\": [\"bar\"]}}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.getWorkspaceBackups(), []);\n\t\t\tfs.writeFileSync(backupWorkspacesPath, '{\"rootWorkspaces\":{\"foo\": []}}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.getWorkspaceBackups(), []);\n\t\t\tfs.writeFileSync(backupWorkspacesPath, '{\"rootWorkspaces\":{\"foo\": \"bar\"}}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.getWorkspaceBackups(), []);\n\t\t\tfs.writeFileSync(backupWorkspacesPath, '{\"rootWorkspaces\":\"foo\"}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.getWorkspaceBackups(), []);\n\t\t\tfs.writeFileSync(backupWorkspacesPath, '{\"rootWorkspaces\":1}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.getWorkspaceBackups(), []);\n\t\t});\n\n\t\ttest('getWorkspaceBackups() should return [] when rootURIWorkspaces in workspaces.json is not a object array', async () => {\n\t\t\tfs.writeFileSync(backupWorkspacesPath, '{\"rootURIWorkspaces\":{}}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.getWorkspaceBackups(), []);\n\t\t\tfs.writeFileSync(backupWorkspacesPath, '{\"rootURIWorkspaces\":{\"foo\": [\"bar\"]}}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.getWorkspaceBackups(), []);\n\t\t\tfs.writeFileSync(backupWorkspacesPath, '{\"rootURIWorkspaces\":{\"foo\": []}}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.getWorkspaceBackups(), []);\n\t\t\tfs.writeFileSync(backupWorkspacesPath, '{\"rootURIWorkspaces\":{\"foo\": \"bar\"}}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.getWorkspaceBackups(), []);\n\t\t\tfs.writeFileSync(backupWorkspacesPath, '{\"rootURIWorkspaces\":\"foo\"}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.getWorkspaceBackups(), []);\n\t\t\tfs.writeFileSync(backupWorkspacesPath, '{\"rootURIWorkspaces\":1}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.getWorkspaceBackups(), []);\n\t\t});\n\n\t\ttest('getWorkspaceBackups() should return [] when files.hotExit = \"onExitAndWindowClose\"', async () => {\n\t\t\tconst upperFooPath = fooFile.fsPath.toUpperCase();\n\t\t\tservice.registerWorkspaceBackupSync(toWorkspaceBackupInfo(upperFooPath));\n\t\t\tassert.strictEqual(service.getWorkspaceBackups().length, 1);\n\t\t\tassertEqualUris(service.getWorkspaceBackups().map(r => r.workspace.configPath), [URI.file(upperFooPath)]);\n\t\t\tconfigService.setUserConfiguration('files.hotExit', HotExitConfiguration.ON_EXIT_AND_WINDOW_CLOSE);\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.getWorkspaceBackups(), []);\n\t\t});\n\n\t\ttest('getEmptyWorkspaceBackupPaths() should return [] when workspaces.json doesn\\'t exist', () => {\n\t\t\tassert.deepStrictEqual(service.getEmptyWindowBackupPaths(), []);\n\t\t});\n\n\t\ttest('getEmptyWorkspaceBackupPaths() should return [] when workspaces.json is not properly formed JSON', async () => {\n\t\t\tfs.writeFileSync(backupWorkspacesPath, '');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.getEmptyWindowBackupPaths(), []);\n\t\t\tfs.writeFileSync(backupWorkspacesPath, '{]');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.getEmptyWindowBackupPaths(), []);\n\t\t\tfs.writeFileSync(backupWorkspacesPath, 'foo');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.getEmptyWindowBackupPaths(), []);\n\t\t});\n\n\t\ttest('getEmptyWorkspaceBackupPaths() should return [] when folderWorkspaces in workspaces.json is absent', async () => {\n\t\t\tfs.writeFileSync(backupWorkspacesPath, '{}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.getEmptyWindowBackupPaths(), []);\n\t\t});\n\n\t\ttest('getEmptyWorkspaceBackupPaths() should return [] when folderWorkspaces in workspaces.json is not a string array', async function () {\n\t\t\tfs.writeFileSync(backupWorkspacesPath, '{\"emptyWorkspaces\":{}}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.getEmptyWindowBackupPaths(), []);\n\t\t\tfs.writeFileSync(backupWorkspacesPath, '{\"emptyWorkspaces\":{\"foo\": [\"bar\"]}}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.getEmptyWindowBackupPaths(), []);\n\t\t\tfs.writeFileSync(backupWorkspacesPath, '{\"emptyWorkspaces\":{\"foo\": []}}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.getEmptyWindowBackupPaths(), []);\n\t\t\tfs.writeFileSync(backupWorkspacesPath, '{\"emptyWorkspaces\":{\"foo\": \"bar\"}}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.getEmptyWindowBackupPaths(), []);\n\t\t\tfs.writeFileSync(backupWorkspacesPath, '{\"emptyWorkspaces\":\"foo\"}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.getEmptyWindowBackupPaths(), []);\n\t\t\tfs.writeFileSync(backupWorkspacesPath, '{\"emptyWorkspaces\":1}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.getEmptyWindowBackupPaths(), []);\n\t\t});\n\t});\n\n\tsuite('dedupeFolderWorkspaces', () => {\n\t\ttest('should ignore duplicates (folder workspace)', async () => {\n\n\t\t\tawait ensureFolderExists(existingTestFolder1);\n\n\t\t\tconst workspacesJson: IBackupWorkspacesFormat = {\n\t\t\t\trootURIWorkspaces: [],\n\t\t\t\tfolderURIWorkspaces: [existingTestFolder1.toString(), existingTestFolder1.toString()],\n\t\t\t\temptyWorkspaceInfos: []\n\t\t\t};\n\t\t\tawait pfs.writeFile(backupWorkspacesPath, JSON.stringify(workspacesJson));\n\t\t\tawait service.initialize();\n\n\t\t\tconst buffer = await fs.promises.readFile(backupWorkspacesPath, 'utf-8');\n\t\t\tconst json = <IBackupWorkspacesFormat>JSON.parse(buffer);\n\t\t\tassert.deepStrictEqual(json.folderURIWorkspaces, [existingTestFolder1.toString()]);\n\t\t});\n\n\t\ttest('should ignore duplicates on Windows and Mac (folder workspace)', async () => {\n\n\t\t\tawait ensureFolderExists(existingTestFolder1);\n\n\t\t\tconst workspacesJson: IBackupWorkspacesFormat = {\n\t\t\t\trootURIWorkspaces: [],\n\t\t\t\tfolderURIWorkspaces: [existingTestFolder1.toString(), existingTestFolder1.toString().toLowerCase()],\n\t\t\t\temptyWorkspaceInfos: []\n\t\t\t};\n\t\t\tawait pfs.writeFile(backupWorkspacesPath, JSON.stringify(workspacesJson));\n\t\t\tawait service.initialize();\n\t\t\tconst buffer = await fs.promises.readFile(backupWorkspacesPath, 'utf-8');\n\t\t\tconst json = <IBackupWorkspacesFormat>JSON.parse(buffer);\n\t\t\tassert.deepStrictEqual(json.folderURIWorkspaces, [existingTestFolder1.toString()]);\n\t\t});\n\n\t\ttest('should ignore duplicates on Windows and Mac (root workspace)', async () => {\n\t\t\tconst workspacePath = path.join(testDir, 'Foo.code-workspace');\n\t\t\tconst workspacePath1 = path.join(testDir, 'FOO.code-workspace');\n\t\t\tconst workspacePath2 = path.join(testDir, 'foo.code-workspace');\n\n\t\t\tconst workspace1 = await ensureWorkspaceExists(toWorkspace(workspacePath));\n\t\t\tconst workspace2 = await ensureWorkspaceExists(toWorkspace(workspacePath1));\n\t\t\tconst workspace3 = await ensureWorkspaceExists(toWorkspace(workspacePath2));\n\n\t\t\tconst workspacesJson: IBackupWorkspacesFormat = {\n\t\t\t\trootURIWorkspaces: [workspace1, workspace2, workspace3].map(toSerializedWorkspace),\n\t\t\t\tfolderURIWorkspaces: [],\n\t\t\t\temptyWorkspaceInfos: []\n\t\t\t};\n\t\t\tawait pfs.writeFile(backupWorkspacesPath, JSON.stringify(workspacesJson));\n\t\t\tawait service.initialize();\n\n\t\t\tconst buffer = await fs.promises.readFile(backupWorkspacesPath, 'utf-8');\n\t\t\tconst json = <IBackupWorkspacesFormat>JSON.parse(buffer);\n\t\t\tassert.strictEqual(json.rootURIWorkspaces.length, platform.isLinux ? 3 : 1);\n\t\t\tif (platform.isLinux) {\n\t\t\t\tassert.deepStrictEqual(json.rootURIWorkspaces.map(r => r.configURIPath), [URI.file(workspacePath).toString(), URI.file(workspacePath1).toString(), URI.file(workspacePath2).toString()]);\n\t\t\t} else {\n\t\t\t\tassert.deepStrictEqual(json.rootURIWorkspaces.map(r => r.configURIPath), [URI.file(workspacePath).toString()], 'should return the first duplicated entry');\n\t\t\t}\n\t\t});\n\t});\n\n\tsuite('registerWindowForBackups', () => {\n\t\ttest('should persist paths to workspaces.json (folder workspace)', async () => {\n\t\t\tservice.registerFolderBackupSync(fooFile);\n\t\t\tservice.registerFolderBackupSync(barFile);\n\t\t\tassertEqualUris(service.getFolderBackupPaths(), [fooFile, barFile]);\n\t\t\tconst buffer = await fs.promises.readFile(backupWorkspacesPath, 'utf-8');\n\t\t\tconst json = <IBackupWorkspacesFormat>JSON.parse(buffer);\n\t\t\tassert.deepStrictEqual(json.folderURIWorkspaces, [fooFile.toString(), barFile.toString()]);\n\t\t});\n\n\t\ttest('should persist paths to workspaces.json (root workspace)', async () => {\n\t\t\tconst ws1 = toWorkspaceBackupInfo(fooFile.fsPath);\n\t\t\tservice.registerWorkspaceBackupSync(ws1);\n\t\t\tconst ws2 = toWorkspaceBackupInfo(barFile.fsPath);\n\t\t\tservice.registerWorkspaceBackupSync(ws2);\n\n\t\t\tassertEqualUris(service.getWorkspaceBackups().map(b => b.workspace.configPath), [fooFile, barFile]);\n\t\t\tassert.strictEqual(ws1.workspace.id, service.getWorkspaceBackups()[0].workspace.id);\n\t\t\tassert.strictEqual(ws2.workspace.id, service.getWorkspaceBackups()[1].workspace.id);\n\n\t\t\tconst buffer = await fs.promises.readFile(backupWorkspacesPath, 'utf-8');\n\t\t\tconst json = <IBackupWorkspacesFormat>JSON.parse(buffer);\n\n\t\t\tassert.deepStrictEqual(json.rootURIWorkspaces.map(b => b.configURIPath), [fooFile.toString(), barFile.toString()]);\n\t\t\tassert.strictEqual(ws1.workspace.id, json.rootURIWorkspaces[0].id);\n\t\t\tassert.strictEqual(ws2.workspace.id, json.rootURIWorkspaces[1].id);\n\t\t});\n\t});\n\n\ttest('should always store the workspace path in workspaces.json using the case given, regardless of whether the file system is case-sensitive (folder workspace)', async () => {\n\t\tservice.registerFolderBackupSync(URI.file(fooFile.fsPath.toUpperCase()));\n\t\tassertEqualUris(service.getFolderBackupPaths(), [URI.file(fooFile.fsPath.toUpperCase())]);\n\n\t\tconst buffer = await fs.promises.readFile(backupWorkspacesPath, 'utf-8');\n\t\tconst json = <IBackupWorkspacesFormat>JSON.parse(buffer);\n\t\tassert.deepStrictEqual(json.folderURIWorkspaces, [URI.file(fooFile.fsPath.toUpperCase()).toString()]);\n\t});\n\n\ttest('should always store the workspace path in workspaces.json using the case given, regardless of whether the file system is case-sensitive (root workspace)', async () => {\n\t\tconst upperFooPath = fooFile.fsPath.toUpperCase();\n\t\tservice.registerWorkspaceBackupSync(toWorkspaceBackupInfo(upperFooPath));\n\t\tassertEqualUris(service.getWorkspaceBackups().map(b => b.workspace.configPath), [URI.file(upperFooPath)]);\n\n\t\tconst buffer = await fs.promises.readFile(backupWorkspacesPath, 'utf-8');\n\t\tconst json = (<IBackupWorkspacesFormat>JSON.parse(buffer));\n\t\tassert.deepStrictEqual(json.rootURIWorkspaces.map(b => b.configURIPath), [URI.file(upperFooPath).toString()]);\n\t});\n\n\tsuite('removeBackupPathSync', () => {\n\t\ttest('should remove folder workspaces from workspaces.json (folder workspace)', async () => {\n\t\t\tservice.registerFolderBackupSync(fooFile);\n\t\t\tservice.registerFolderBackupSync(barFile);\n\t\t\tservice.unregisterFolderBackupSync(fooFile);\n\n\t\t\tconst buffer = await fs.promises.readFile(backupWorkspacesPath, 'utf-8');\n\t\t\tconst json = (<IBackupWorkspacesFormat>JSON.parse(buffer));\n\t\t\tassert.deepStrictEqual(json.folderURIWorkspaces, [barFile.toString()]);\n\t\t\tservice.unregisterFolderBackupSync(barFile);\n\n\t\t\tconst content = await fs.promises.readFile(backupWorkspacesPath, 'utf-8');\n\t\t\tconst json2 = (<IBackupWorkspacesFormat>JSON.parse(content));\n\t\t\tassert.deepStrictEqual(json2.folderURIWorkspaces, []);\n\t\t});\n\n\t\ttest('should remove folder workspaces from workspaces.json (root workspace)', async () => {\n\t\t\tconst ws1 = toWorkspaceBackupInfo(fooFile.fsPath);\n\t\t\tservice.registerWorkspaceBackupSync(ws1);\n\t\t\tconst ws2 = toWorkspaceBackupInfo(barFile.fsPath);\n\t\t\tservice.registerWorkspaceBackupSync(ws2);\n\t\t\tservice.unregisterWorkspaceBackupSync(ws1.workspace);\n\n\t\t\tconst buffer = await fs.promises.readFile(backupWorkspacesPath, 'utf-8');\n\t\t\tconst json = (<IBackupWorkspacesFormat>JSON.parse(buffer));\n\t\t\tassert.deepStrictEqual(json.rootURIWorkspaces.map(r => r.configURIPath), [barFile.toString()]);\n\t\t\tservice.unregisterWorkspaceBackupSync(ws2.workspace);\n\n\t\t\tconst content = await fs.promises.readFile(backupWorkspacesPath, 'utf-8');\n\t\t\tconst json2 = (<IBackupWorkspacesFormat>JSON.parse(content));\n\t\t\tassert.deepStrictEqual(json2.rootURIWorkspaces, []);\n\t\t});\n\n\t\ttest('should remove empty workspaces from workspaces.json', async () => {\n\t\t\tservice.registerEmptyWindowBackupSync('foo');\n\t\t\tservice.registerEmptyWindowBackupSync('bar');\n\t\t\tservice.unregisterEmptyWindowBackupSync('foo');\n\n\t\t\tconst buffer = await fs.promises.readFile(backupWorkspacesPath, 'utf-8');\n\t\t\tconst json = (<IBackupWorkspacesFormat>JSON.parse(buffer));\n\t\t\tassert.deepStrictEqual(json.emptyWorkspaceInfos, [{ backupFolder: 'bar' }]);\n\t\t\tservice.unregisterEmptyWindowBackupSync('bar');\n\n\t\t\tconst content = await fs.promises.readFile(backupWorkspacesPath, 'utf-8');\n\t\t\tconst json2 = (<IBackupWorkspacesFormat>JSON.parse(content));\n\t\t\tassert.deepStrictEqual(json2.emptyWorkspaceInfos, []);\n\t\t});\n\n\t\ttest('should fail gracefully when removing a path that doesn\\'t exist', async () => {\n\n\t\t\tawait ensureFolderExists(existingTestFolder1); // make sure backup folder exists, so the folder is not removed on loadSync\n\n\t\t\tconst workspacesJson: IBackupWorkspacesFormat = { rootURIWorkspaces: [], folderURIWorkspaces: [existingTestFolder1.toString()], emptyWorkspaceInfos: [] };\n\t\t\tawait pfs.writeFile(backupWorkspacesPath, JSON.stringify(workspacesJson));\n\t\t\tawait service.initialize();\n\t\t\tservice.unregisterFolderBackupSync(barFile);\n\t\t\tservice.unregisterEmptyWindowBackupSync('test');\n\t\t\tconst content = await fs.promises.readFile(backupWorkspacesPath, 'utf-8');\n\t\t\tconst json = (<IBackupWorkspacesFormat>JSON.parse(content));\n\t\t\tassert.deepStrictEqual(json.folderURIWorkspaces, [existingTestFolder1.toString()]);\n\t\t});\n\t});\n\n\tsuite('getWorkspaceHash', () => {\n\t\t(platform.isLinux ? test.skip : test)('should ignore case on Windows and Mac', () => {\n\t\t\tif (platform.isMacintosh) {\n\t\t\t\tassert.strictEqual(service.getFolderHash(URI.file('/foo')), service.getFolderHash(URI.file('/FOO')));\n\t\t\t}\n\n\t\t\tif (platform.isWindows) {\n\t\t\t\tassert.strictEqual(service.getFolderHash(URI.file('c:\\\\foo')), service.getFolderHash(URI.file('C:\\\\FOO')));\n\t\t\t}\n\t\t});\n\t});\n\n\tsuite('mixed path casing', () => {\n\t\ttest('should handle case insensitive paths properly (registerWindowForBackupsSync) (folder workspace)', () => {\n\t\t\tservice.registerFolderBackupSync(fooFile);\n\t\t\tservice.registerFolderBackupSync(URI.file(fooFile.fsPath.toUpperCase()));\n\n\t\t\tif (platform.isLinux) {\n\t\t\t\tassert.strictEqual(service.getFolderBackupPaths().length, 2);\n\t\t\t} else {\n\t\t\t\tassert.strictEqual(service.getFolderBackupPaths().length, 1);\n\t\t\t}\n\t\t});\n\n\t\ttest('should handle case insensitive paths properly (registerWindowForBackupsSync) (root workspace)', () => {\n\t\t\tservice.registerWorkspaceBackupSync(toWorkspaceBackupInfo(fooFile.fsPath));\n\t\t\tservice.registerWorkspaceBackupSync(toWorkspaceBackupInfo(fooFile.fsPath.toUpperCase()));\n\n\t\t\tif (platform.isLinux) {\n\t\t\t\tassert.strictEqual(service.getWorkspaceBackups().length, 2);\n\t\t\t} else {\n\t\t\t\tassert.strictEqual(service.getWorkspaceBackups().length, 1);\n\t\t\t}\n\t\t});\n\n\t\ttest('should handle case insensitive paths properly (removeBackupPathSync) (folder workspace)', () => {\n\n\t\t\t// same case\n\t\t\tservice.registerFolderBackupSync(fooFile);\n\t\t\tservice.unregisterFolderBackupSync(fooFile);\n\t\t\tassert.strictEqual(service.getFolderBackupPaths().length, 0);\n\n\t\t\t// mixed case\n\t\t\tservice.registerFolderBackupSync(fooFile);\n\t\t\tservice.unregisterFolderBackupSync(URI.file(fooFile.fsPath.toUpperCase()));\n\n\t\t\tif (platform.isLinux) {\n\t\t\t\tassert.strictEqual(service.getFolderBackupPaths().length, 1);\n\t\t\t} else {\n\t\t\t\tassert.strictEqual(service.getFolderBackupPaths().length, 0);\n\t\t\t}\n\t\t});\n\t});\n\n\tsuite('getDirtyWorkspaces', () => {\n\t\ttest('should report if a workspace or folder has backups', async () => {\n\t\t\tconst folderBackupPath = service.registerFolderBackupSync(fooFile);\n\n\t\t\tconst backupWorkspaceInfo = toWorkspaceBackupInfo(fooFile.fsPath);\n\t\t\tconst workspaceBackupPath = service.registerWorkspaceBackupSync(backupWorkspaceInfo);\n\n\t\t\tassert.strictEqual(((await service.getDirtyWorkspaces()).length), 0);\n\n\t\t\ttry {\n\t\t\t\tawait fs.promises.mkdir(path.join(folderBackupPath, Schemas.file), { recursive: true });\n\t\t\t\tawait fs.promises.mkdir(path.join(workspaceBackupPath, Schemas.untitled), { recursive: true });\n\t\t\t} catch (error) {\n\t\t\t\t// ignore - folder might exist already\n\t\t\t}\n\n\t\t\tassert.strictEqual(((await service.getDirtyWorkspaces()).length), 0);\n\n\t\t\tfs.writeFileSync(path.join(folderBackupPath, Schemas.file, '594a4a9d82a277a899d4713a5b08f504'), '');\n\t\t\tfs.writeFileSync(path.join(workspaceBackupPath, Schemas.untitled, '594a4a9d82a277a899d4713a5b08f504'), '');\n\n\t\t\tconst dirtyWorkspaces = await service.getDirtyWorkspaces();\n\t\t\tassert.strictEqual(dirtyWorkspaces.length, 2);\n\n\t\t\tlet found = 0;\n\t\t\tfor (const dirtyWorkpspace of dirtyWorkspaces) {\n\t\t\t\tif (URI.isUri(dirtyWorkpspace)) {\n\t\t\t\t\tif (isEqual(fooFile, dirtyWorkpspace)) {\n\t\t\t\t\t\tfound++;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (isEqual(backupWorkspaceInfo.workspace.configPath, dirtyWorkpspace.configPath)) {\n\t\t\t\t\t\tfound++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tassert.strictEqual(found, 2);\n\t\t});\n\t});\n});\n"]}