{"version":3,"file":"backup.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/backup/electron-main/backup.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAOnF,QAAA,kBAAkB,GAAG,CAAA,GAAA,+BAAe,CAAA,CAAqB,mBAAmB,CAAC,CAAC;IAO3F,SAAgB,qBAAqB,CAAC,GAAY;QACjD,MAAM,SAAS,GAAG,GAA2B,CAAC;QAE9C,OAAO,SAAS,IAAI,CAAA,GAAA,kCAAqB,CAAA,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;IAChE,CAAC;IAJD,sDAIC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IWorkspaceIdentifier, isWorkspaceIdentifier } from 'vs/platform/workspaces/common/workspaces';\nimport { URI } from 'vs/base/common/uri';\nimport { IEmptyWindowBackupInfo } from 'vs/platform/backup/node/backup';\n\nexport const IBackupMainService = createDecorator<IBackupMainService>('backupMainService');\n\nexport interface IWorkspaceBackupInfo {\n\tworkspace: IWorkspaceIdentifier;\n\tremoteAuthority?: string;\n}\n\nexport function isWorkspaceBackupInfo(obj: unknown): obj is IWorkspaceBackupInfo {\n\tconst candidate = obj as IWorkspaceBackupInfo;\n\n\treturn candidate && isWorkspaceIdentifier(candidate.workspace);\n}\n\nexport interface IBackupMainService {\n\treadonly _serviceBrand: undefined;\n\n\tisHotExitEnabled(): boolean;\n\n\tgetWorkspaceBackups(): IWorkspaceBackupInfo[];\n\tgetFolderBackupPaths(): URI[];\n\tgetEmptyWindowBackupPaths(): IEmptyWindowBackupInfo[];\n\n\tregisterWorkspaceBackupSync(workspace: IWorkspaceBackupInfo, migrateFrom?: string): string;\n\tregisterFolderBackupSync(folderUri: URI): string;\n\tregisterEmptyWindowBackupSync(backupFolder?: string, remoteAuthority?: string): string;\n\n\tunregisterWorkspaceBackupSync(workspace: IWorkspaceIdentifier): void;\n\tunregisterFolderBackupSync(folderUri: URI): void;\n\tunregisterEmptyWindowBackupSync(backupFolder: string): void;\n\n\t/**\n\t * All folders or workspaces that are known to have\n\t * backups stored. This call is long running because\n\t * it checks for each backup location if any backups\n\t * are stored.\n\t */\n\tgetDirtyWorkspaces(): Promise<Array<IWorkspaceIdentifier | URI>>;\n}\n"]}