{"version":3,"file":"launchMainService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/launch/electron-main/launchMainService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IURLService } from 'vs/platform/url/common/url';\nimport { IProcessEnvironment, isMacintosh } from 'vs/base/common/platform';\nimport { NativeParsedArgs } from 'vs/platform/environment/common/argv';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IWindowSettings } from 'vs/platform/windows/common/windows';\nimport { IWindowsMainService, ICodeWindow, OpenContext } from 'vs/platform/windows/electron-main/windows';\nimport { whenDeleted } from 'vs/base/node/pfs';\nimport { IWorkspacesManagementMainService } from 'vs/platform/workspaces/electron-main/workspacesManagementMainService';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { URI } from 'vs/base/common/uri';\nimport { BrowserWindow, ipcMain, Event as IpcEvent, app } from 'electron';\nimport { coalesce } from 'vs/base/common/arrays';\nimport { IDiagnosticInfoOptions, IDiagnosticInfo, IRemoteDiagnosticInfo, IRemoteDiagnosticError } from 'vs/platform/diagnostics/common/diagnostics';\nimport { IMainProcessInfo, IWindowInfo } from 'vs/platform/launch/common/launch';\nimport { isLaunchedFromCli } from 'vs/platform/environment/node/argvHelper';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { isSingleFolderWorkspaceIdentifier, isWorkspaceIdentifier } from 'vs/platform/workspaces/common/workspaces';\nimport { assertIsDefined } from 'vs/base/common/types';\n\nexport const ID = 'launchMainService';\nexport const ILaunchMainService = createDecorator<ILaunchMainService>(ID);\n\nexport interface IStartArguments {\n\targs: NativeParsedArgs;\n\tuserEnv: IProcessEnvironment;\n}\n\nexport interface IRemoteDiagnosticOptions {\n\tincludeProcesses?: boolean;\n\tincludeWorkspaceMetadata?: boolean;\n}\n\nexport interface ILaunchMainService {\n\treadonly _serviceBrand: undefined;\n\tstart(args: NativeParsedArgs, userEnv: IProcessEnvironment): Promise<void>;\n\tgetMainProcessId(): Promise<number>;\n\tgetMainProcessInfo(): Promise<IMainProcessInfo>;\n\tgetRemoteDiagnostics(options: IRemoteDiagnosticOptions): Promise<(IRemoteDiagnosticInfo | IRemoteDiagnosticError)[]>;\n}\n\nexport class LaunchMainService implements ILaunchMainService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IWindowsMainService private readonly windowsMainService: IWindowsMainService,\n\t\t@IURLService private readonly urlService: IURLService,\n\t\t@IWorkspacesManagementMainService private readonly workspacesManagementMainService: IWorkspacesManagementMainService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) { }\n\n\tasync start(args: NativeParsedArgs, userEnv: IProcessEnvironment): Promise<void> {\n\t\tthis.logService.trace('Received data from other instance: ', args, userEnv);\n\n\t\t// macOS: Electron > 7.x changed its behaviour to not\n\t\t// bring the application to the foreground when a window\n\t\t// is focused programmatically. Only via `app.focus` and\n\t\t// the option `steal: true` can you get the previous\n\t\t// behaviour back. The only reason to use this option is\n\t\t// when a window is getting focused while the application\n\t\t// is not in the foreground and since we got instructed\n\t\t// to open a new window from another instance, we ensure\n\t\t// that the app has focus.\n\t\tif (isMacintosh) {\n\t\t\tapp.focus({ steal: true });\n\t\t}\n\n\t\t// Check early for open-url which is handled in URL service\n\t\tconst urlsToOpen = this.parseOpenUrl(args);\n\t\tif (urlsToOpen.length) {\n\t\t\tlet whenWindowReady: Promise<unknown> = Promise.resolve();\n\n\t\t\t// Create a window if there is none\n\t\t\tif (this.windowsMainService.getWindowCount() === 0) {\n\t\t\t\tconst window = this.windowsMainService.openEmptyWindow({ context: OpenContext.DESKTOP })[0];\n\t\t\t\twhenWindowReady = window.ready();\n\t\t\t}\n\n\t\t\t// Make sure a window is open, ready to receive the url event\n\t\t\twhenWindowReady.then(() => {\n\t\t\t\tfor (const { uri, url } of urlsToOpen) {\n\t\t\t\t\tthis.urlService.open(uri, { originalUrl: url });\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Otherwise handle in windows service\n\t\telse {\n\t\t\treturn this.startOpenWindow(args, userEnv);\n\t\t}\n\t}\n\n\tprivate parseOpenUrl(args: NativeParsedArgs): { uri: URI, url: string }[] {\n\t\tif (args['open-url'] && args._urls && args._urls.length > 0) {\n\t\t\t// --open-url must contain -- followed by the url(s)\n\t\t\t// process.argv is used over args._ as args._ are resolved to file paths at this point\n\t\t\treturn coalesce(args._urls\n\t\t\t\t.map(url => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn { uri: URI.parse(url), url };\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t}\n\n\t\treturn [];\n\t}\n\n\tprivate async startOpenWindow(args: NativeParsedArgs, userEnv: IProcessEnvironment): Promise<void> {\n\t\tconst context = isLaunchedFromCli(userEnv) ? OpenContext.CLI : OpenContext.DESKTOP;\n\t\tlet usedWindows: ICodeWindow[] = [];\n\n\t\tconst waitMarkerFileURI = args.wait && args.waitMarkerFilePath ? URI.file(args.waitMarkerFilePath) : undefined;\n\t\tconst remoteAuthority = args.remote || undefined;\n\n\t\t// Special case extension development\n\t\tif (!!args.extensionDevelopmentPath) {\n\t\t\tthis.windowsMainService.openExtensionDevelopmentHostWindow(args.extensionDevelopmentPath, { context, cli: args, userEnv, waitMarkerFileURI, remoteAuthority });\n\t\t}\n\n\t\t// Start without file/folder arguments\n\t\telse if (!args._.length && !args['folder-uri'] && !args['file-uri']) {\n\t\t\tlet openNewWindow = false;\n\n\t\t\t// Force new window\n\t\t\tif (args['new-window'] || args['unity-launch']) {\n\t\t\t\topenNewWindow = true;\n\t\t\t}\n\n\t\t\t// Force reuse window\n\t\t\telse if (args['reuse-window']) {\n\t\t\t\topenNewWindow = false;\n\t\t\t}\n\n\t\t\t// Otherwise check for settings\n\t\t\telse {\n\t\t\t\tconst windowConfig = this.configurationService.getValue<IWindowSettings | undefined>('window');\n\t\t\t\tconst openWithoutArgumentsInNewWindowConfig = windowConfig?.openWithoutArgumentsInNewWindow || 'default' /* default */;\n\t\t\t\tswitch (openWithoutArgumentsInNewWindowConfig) {\n\t\t\t\t\tcase 'on':\n\t\t\t\t\t\topenNewWindow = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'off':\n\t\t\t\t\t\topenNewWindow = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\topenNewWindow = !isMacintosh; // prefer to restore running instance on macOS\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Open new Window\n\t\t\tif (openNewWindow) {\n\t\t\t\tusedWindows = this.windowsMainService.open({\n\t\t\t\t\tcontext,\n\t\t\t\t\tcli: args,\n\t\t\t\t\tuserEnv,\n\t\t\t\t\tforceNewWindow: true,\n\t\t\t\t\tforceEmpty: true,\n\t\t\t\t\twaitMarkerFileURI,\n\t\t\t\t\tremoteAuthority\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Focus existing window or open if none opened\n\t\t\telse {\n\t\t\t\tconst lastActive = this.windowsMainService.getLastActiveWindow();\n\t\t\t\tif (lastActive) {\n\t\t\t\t\tlastActive.focus();\n\n\t\t\t\t\tusedWindows = [lastActive];\n\t\t\t\t} else {\n\t\t\t\t\tusedWindows = this.windowsMainService.open({ context, cli: args, forceEmpty: true, remoteAuthority });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Start with file/folder arguments\n\t\telse {\n\t\t\tusedWindows = this.windowsMainService.open({\n\t\t\t\tcontext,\n\t\t\t\tcli: args,\n\t\t\t\tuserEnv,\n\t\t\t\tforceNewWindow: args['new-window'],\n\t\t\t\tpreferNewWindow: !args['reuse-window'] && !args.wait,\n\t\t\t\tforceReuseWindow: args['reuse-window'],\n\t\t\t\tdiffMode: args.diff,\n\t\t\t\taddMode: args.add,\n\t\t\t\tnoRecentEntry: !!args['skip-add-to-recently-opened'],\n\t\t\t\twaitMarkerFileURI,\n\t\t\t\tgotoLineMode: args.goto,\n\t\t\t\tremoteAuthority\n\t\t\t});\n\t\t}\n\n\t\t// If the other instance is waiting to be killed, we hook up a window listener if one window\n\t\t// is being used and only then resolve the startup promise which will kill this second instance.\n\t\t// In addition, we poll for the wait marker file to be deleted to return.\n\t\tif (waitMarkerFileURI && usedWindows.length === 1 && usedWindows[0]) {\n\t\t\treturn Promise.race([\n\t\t\t\tusedWindows[0].whenClosedOrLoaded,\n\t\t\t\twhenDeleted(waitMarkerFileURI.fsPath)\n\t\t\t]).then(() => undefined, () => undefined);\n\t\t}\n\t}\n\n\tasync getMainProcessId(): Promise<number> {\n\t\tthis.logService.trace('Received request for process ID from other instance.');\n\n\t\treturn process.pid;\n\t}\n\n\tasync getMainProcessInfo(): Promise<IMainProcessInfo> {\n\t\tthis.logService.trace('Received request for main process info from other instance.');\n\n\t\tconst windows: IWindowInfo[] = [];\n\t\tBrowserWindow.getAllWindows().forEach(window => {\n\t\t\tconst codeWindow = this.windowsMainService.getWindowById(window.id);\n\t\t\tif (codeWindow) {\n\t\t\t\twindows.push(this.codeWindowToInfo(codeWindow));\n\t\t\t} else {\n\t\t\t\twindows.push(this.browserWindowToInfo(window));\n\t\t\t}\n\t\t});\n\n\t\treturn {\n\t\t\tmainPID: process.pid,\n\t\t\tmainArguments: process.argv.slice(1),\n\t\t\twindows,\n\t\t\tscreenReader: !!app.accessibilitySupportEnabled,\n\t\t\tgpuFeatureStatus: app.getGPUFeatureStatus()\n\t\t};\n\t}\n\n\tasync getRemoteDiagnostics(options: IRemoteDiagnosticOptions): Promise<(IRemoteDiagnosticInfo | IRemoteDiagnosticError)[]> {\n\t\tconst windows = this.windowsMainService.getWindows();\n\t\tconst diagnostics: Array<IDiagnosticInfo | IRemoteDiagnosticError | undefined> = await Promise.all(windows.map(window => {\n\t\t\treturn new Promise<IDiagnosticInfo | IRemoteDiagnosticError | undefined>((resolve) => {\n\t\t\t\tconst remoteAuthority = window.remoteAuthority;\n\t\t\t\tif (remoteAuthority) {\n\t\t\t\t\tconst replyChannel = `vscode:getDiagnosticInfoResponse${window.id}`;\n\t\t\t\t\tconst args: IDiagnosticInfoOptions = {\n\t\t\t\t\t\tincludeProcesses: options.includeProcesses,\n\t\t\t\t\t\tfolders: options.includeWorkspaceMetadata ? this.getFolderURIs(window) : undefined\n\t\t\t\t\t};\n\n\t\t\t\t\twindow.sendWhenReady('vscode:getDiagnosticInfo', CancellationToken.None, { replyChannel, args });\n\n\t\t\t\t\tipcMain.once(replyChannel, (_: IpcEvent, data: IRemoteDiagnosticInfo) => {\n\t\t\t\t\t\t// No data is returned if getting the connection fails.\n\t\t\t\t\t\tif (!data) {\n\t\t\t\t\t\t\tresolve({ hostName: remoteAuthority, errorMessage: `Unable to resolve connection to '${remoteAuthority}'.` });\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresolve(data);\n\t\t\t\t\t});\n\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tresolve({ hostName: remoteAuthority, errorMessage: `Fetching remote diagnostics for '${remoteAuthority}' timed out.` });\n\t\t\t\t\t}, 5000);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(undefined);\n\t\t\t\t}\n\t\t\t});\n\t\t}));\n\n\t\treturn diagnostics.filter((x): x is IRemoteDiagnosticInfo | IRemoteDiagnosticError => !!x);\n\t}\n\n\tprivate getFolderURIs(window: ICodeWindow): URI[] {\n\t\tconst folderURIs: URI[] = [];\n\n\t\tconst workspace = window.openedWorkspace;\n\t\tif (isSingleFolderWorkspaceIdentifier(workspace)) {\n\t\t\tfolderURIs.push(workspace.uri);\n\t\t} else if (isWorkspaceIdentifier(workspace)) {\n\t\t\tconst resolvedWorkspace = this.workspacesManagementMainService.resolveLocalWorkspaceSync(workspace.configPath); // workspace folders can only be shown for local (resolved) workspaces\n\t\t\tif (resolvedWorkspace) {\n\t\t\t\tconst rootFolders = resolvedWorkspace.folders;\n\t\t\t\trootFolders.forEach(root => {\n\t\t\t\t\tfolderURIs.push(root.uri);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t//TODO@RMacfarlane: can we add the workspace file here?\n\t\t\t}\n\t\t}\n\n\t\treturn folderURIs;\n\t}\n\n\tprivate codeWindowToInfo(window: ICodeWindow): IWindowInfo {\n\t\tconst folderURIs = this.getFolderURIs(window);\n\t\tconst win = assertIsDefined(window.win);\n\n\t\treturn this.browserWindowToInfo(win, folderURIs, window.remoteAuthority);\n\t}\n\n\tprivate browserWindowToInfo(window: BrowserWindow, folderURIs: URI[] = [], remoteAuthority?: string): IWindowInfo {\n\t\treturn {\n\t\t\tpid: window.webContents.getOSProcessId(),\n\t\t\ttitle: window.getTitle(),\n\t\t\tfolderURIs,\n\t\t\tremoteAuthority\n\t\t};\n\t}\n}\n"]}