{"version":3,"sources":["vs/platform/list/browser/listService.ts"],"names":[],"mappings":"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","file":"listService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createStyleSheet } from 'vs/base/browser/dom';\nimport { IListMouseEvent, IListTouchEvent, IListRenderer, IListVirtualDelegate } from 'vs/base/browser/ui/list/list';\nimport { IPagedRenderer, PagedList, IPagedListOptions } from 'vs/base/browser/ui/list/listPaging';\nimport { DefaultStyleController, IListOptions, IMultipleSelectionController, isSelectionRangeChangeEvent, isSelectionSingleChangeEvent, List, IListAccessibilityProvider, IListOptionsUpdate } from 'vs/base/browser/ui/list/listWidget';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable, dispose, IDisposable, toDisposable, DisposableStore, combinedDisposable } from 'vs/base/common/lifecycle';\nimport { localize } from 'vs/nls';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { Extensions as ConfigurationExtensions, IConfigurationRegistry } from 'vs/platform/configuration/common/configurationRegistry';\nimport { ContextKeyExpr, IContextKey, IContextKeyService, RawContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { IEditorOptions } from 'vs/platform/editor/common/editor';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { attachListStyler, computeStyles, defaultListStyles, IColorMapping } from 'vs/platform/theme/common/styler';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { InputFocusedContextKey } from 'vs/platform/contextkey/common/contextkeys';\nimport { ObjectTree, IObjectTreeOptions, ICompressibleTreeRenderer, CompressibleObjectTree, ICompressibleObjectTreeOptions, ICompressibleObjectTreeOptionsUpdate } from 'vs/base/browser/ui/tree/objectTree';\nimport { ITreeRenderer, IAsyncDataSource, IDataSource, ITreeEvent } from 'vs/base/browser/ui/tree/tree';\nimport { AsyncDataTree, IAsyncDataTreeOptions, CompressibleAsyncDataTree, ITreeCompressionDelegate, ICompressibleAsyncDataTreeOptions, IAsyncDataTreeOptionsUpdate } from 'vs/base/browser/ui/tree/asyncDataTree';\nimport { DataTree, IDataTreeOptions } from 'vs/base/browser/ui/tree/dataTree';\nimport { IKeyboardNavigationEventFilter, IAbstractTreeOptions, RenderIndentGuides, IAbstractTreeOptionsUpdate } from 'vs/base/browser/ui/tree/abstractTree';\nimport { IAccessibilityService } from 'vs/platform/accessibility/common/accessibility';\nimport { ITableOptions, ITableOptionsUpdate, Table } from 'vs/base/browser/ui/table/tableWidget';\nimport { ITableColumn, ITableRenderer, ITableVirtualDelegate } from 'vs/base/browser/ui/table/table';\n\nexport type ListWidget = List<any> | PagedList<any> | ObjectTree<any, any> | DataTree<any, any, any> | AsyncDataTree<any, any, any> | Table<any>;\nexport type WorkbenchListWidget = WorkbenchList<any> | WorkbenchPagedList<any> | WorkbenchObjectTree<any, any> | WorkbenchCompressibleObjectTree<any, any> | WorkbenchDataTree<any, any, any> | WorkbenchAsyncDataTree<any, any, any> | WorkbenchCompressibleAsyncDataTree<any, any, any> | WorkbenchTable<any>;\n\nexport const IListService = createDecorator<IListService>('listService');\n\nexport interface IListService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Returns the currently focused list widget if any.\n\t */\n\treadonly lastFocusedList: WorkbenchListWidget | undefined;\n}\n\ninterface IRegisteredList {\n\twidget: WorkbenchListWidget;\n\textraContextKeys?: (IContextKey<boolean>)[];\n}\n\nexport class ListService implements IListService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate disposables = new DisposableStore();\n\tprivate lists: IRegisteredList[] = [];\n\tprivate _lastFocusedWidget: WorkbenchListWidget | undefined = undefined;\n\tprivate _hasCreatedStyleController: boolean = false;\n\n\tget lastFocusedList(): WorkbenchListWidget | undefined {\n\t\treturn this._lastFocusedWidget;\n\t}\n\n\tconstructor(@IThemeService private readonly _themeService: IThemeService) {\n\t}\n\n\tregister(widget: WorkbenchListWidget, extraContextKeys?: (IContextKey<boolean>)[]): IDisposable {\n\t\tif (!this._hasCreatedStyleController) {\n\t\t\tthis._hasCreatedStyleController = true;\n\t\t\t// create a shared default tree style sheet for performance reasons\n\t\t\tconst styleController = new DefaultStyleController(createStyleSheet(), '');\n\t\t\tthis.disposables.add(attachListStyler(styleController, this._themeService));\n\t\t}\n\n\t\tif (this.lists.some(l => l.widget === widget)) {\n\t\t\tthrow new Error('Cannot register the same widget multiple times');\n\t\t}\n\n\t\t// Keep in our lists list\n\t\tconst registeredList: IRegisteredList = { widget, extraContextKeys };\n\t\tthis.lists.push(registeredList);\n\n\t\t// Check for currently being focused\n\t\tif (widget.getHTMLElement() === document.activeElement) {\n\t\t\tthis._lastFocusedWidget = widget;\n\t\t}\n\n\t\treturn combinedDisposable(\n\t\t\twidget.onDidFocus(() => this._lastFocusedWidget = widget),\n\t\t\ttoDisposable(() => this.lists.splice(this.lists.indexOf(registeredList), 1)),\n\t\t\twidget.onDidDispose(() => {\n\t\t\t\tthis.lists = this.lists.filter(l => l !== registeredList);\n\t\t\t\tif (this._lastFocusedWidget === widget) {\n\t\t\t\t\tthis._lastFocusedWidget = undefined;\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n\n\tdispose(): void {\n\t\tthis.disposables.dispose();\n\t}\n}\n\nconst RawWorkbenchListFocusContextKey = new RawContextKey<boolean>('listFocus', true);\nexport const WorkbenchListSupportsMultiSelectContextKey = new RawContextKey<boolean>('listSupportsMultiselect', true);\nexport const WorkbenchListFocusContextKey = ContextKeyExpr.and(RawWorkbenchListFocusContextKey, ContextKeyExpr.not(InputFocusedContextKey));\nexport const WorkbenchListHasSelectionOrFocus = new RawContextKey<boolean>('listHasSelectionOrFocus', false);\nexport const WorkbenchListDoubleSelection = new RawContextKey<boolean>('listDoubleSelection', false);\nexport const WorkbenchListMultiSelection = new RawContextKey<boolean>('listMultiSelection', false);\nexport const WorkbenchListSelectionNavigation = new RawContextKey<boolean>('listSelectionNavigation', false);\nexport const WorkbenchListSupportsKeyboardNavigation = new RawContextKey<boolean>('listSupportsKeyboardNavigation', true);\nexport const WorkbenchListAutomaticKeyboardNavigationKey = 'listAutomaticKeyboardNavigation';\nexport const WorkbenchListAutomaticKeyboardNavigation = new RawContextKey<boolean>(WorkbenchListAutomaticKeyboardNavigationKey, true);\nexport let didBindWorkbenchListAutomaticKeyboardNavigation = false;\n\nfunction createScopedContextKeyService(contextKeyService: IContextKeyService, widget: ListWidget): IContextKeyService {\n\tconst result = contextKeyService.createScoped(widget.getHTMLElement());\n\tRawWorkbenchListFocusContextKey.bindTo(result);\n\treturn result;\n}\n\nconst multiSelectModifierSettingKey = 'workbench.list.multiSelectModifier';\nconst openModeSettingKey = 'workbench.list.openMode';\nconst horizontalScrollingKey = 'workbench.list.horizontalScrolling';\nconst keyboardNavigationSettingKey = 'workbench.list.keyboardNavigation';\nconst automaticKeyboardNavigationSettingKey = 'workbench.list.automaticKeyboardNavigation';\nconst treeIndentKey = 'workbench.tree.indent';\nconst treeRenderIndentGuidesKey = 'workbench.tree.renderIndentGuides';\nconst listSmoothScrolling = 'workbench.list.smoothScrolling';\nconst treeExpandMode = 'workbench.tree.expandMode';\n\nfunction useAltAsMultipleSelectionModifier(configurationService: IConfigurationService): boolean {\n\treturn configurationService.getValue(multiSelectModifierSettingKey) === 'alt';\n}\n\nclass MultipleSelectionController<T> extends Disposable implements IMultipleSelectionController<T> {\n\tprivate useAltAsMultipleSelectionModifier: boolean;\n\n\tconstructor(private configurationService: IConfigurationService) {\n\t\tsuper();\n\n\t\tthis.useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration(multiSelectModifierSettingKey)) {\n\t\t\t\tthis.useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(this.configurationService);\n\t\t\t}\n\t\t}));\n\t}\n\n\tisSelectionSingleChangeEvent(event: IListMouseEvent<T> | IListTouchEvent<T>): boolean {\n\t\tif (this.useAltAsMultipleSelectionModifier) {\n\t\t\treturn event.browserEvent.altKey;\n\t\t}\n\n\t\treturn isSelectionSingleChangeEvent(event);\n\t}\n\n\tisSelectionRangeChangeEvent(event: IListMouseEvent<T> | IListTouchEvent<T>): boolean {\n\t\treturn isSelectionRangeChangeEvent(event);\n\t}\n}\n\nfunction toWorkbenchListOptions<T>(options: IListOptions<T>, configurationService: IConfigurationService, keybindingService: IKeybindingService): [IListOptions<T>, IDisposable] {\n\tconst disposables = new DisposableStore();\n\tconst result = { ...options };\n\n\tif (options.multipleSelectionSupport !== false && !options.multipleSelectionController) {\n\t\tconst multipleSelectionController = new MultipleSelectionController(configurationService);\n\t\tresult.multipleSelectionController = multipleSelectionController;\n\t\tdisposables.add(multipleSelectionController);\n\t}\n\n\tresult.keyboardNavigationDelegate = {\n\t\tmightProducePrintableCharacter(e) {\n\t\t\treturn keybindingService.mightProducePrintableCharacter(e);\n\t\t}\n\t};\n\n\tresult.smoothScrolling = configurationService.getValue<boolean>(listSmoothScrolling);\n\n\treturn [result, disposables];\n}\n\nexport interface IWorkbenchListOptionsUpdate extends IListOptionsUpdate {\n\treadonly overrideStyles?: IColorMapping;\n}\n\nexport interface IWorkbenchListOptions<T> extends IWorkbenchListOptionsUpdate, IResourceNavigatorOptions, IListOptions<T> {\n\treadonly selectionNavigation?: boolean;\n}\n\nexport class WorkbenchList<T> extends List<T> {\n\n\treadonly contextKeyService: IContextKeyService;\n\tprivate readonly themeService: IThemeService;\n\tprivate listHasSelectionOrFocus: IContextKey<boolean>;\n\tprivate listDoubleSelection: IContextKey<boolean>;\n\tprivate listMultiSelection: IContextKey<boolean>;\n\tprivate horizontalScrolling: boolean | undefined;\n\tprivate _styler: IDisposable | undefined;\n\tprivate _useAltAsMultipleSelectionModifier: boolean;\n\tprivate navigator: ListResourceNavigator<T>;\n\tget onDidOpen(): Event<IOpenEvent<T | undefined>> { return this.navigator.onDidOpen; }\n\n\tconstructor(\n\t\tuser: string,\n\t\tcontainer: HTMLElement,\n\t\tdelegate: IListVirtualDelegate<T>,\n\t\trenderers: IListRenderer<T, any>[],\n\t\toptions: IWorkbenchListOptions<T>,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IListService listService: IListService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IKeybindingService keybindingService: IKeybindingService\n\t) {\n\t\tconst horizontalScrolling = typeof options.horizontalScrolling !== 'undefined' ? options.horizontalScrolling : configurationService.getValue<boolean>(horizontalScrollingKey);\n\t\tconst [workbenchListOptions, workbenchListOptionsDisposable] = toWorkbenchListOptions(options, configurationService, keybindingService);\n\n\t\tsuper(user, container, delegate, renderers,\n\t\t\t{\n\t\t\t\tkeyboardSupport: false,\n\t\t\t\t...computeStyles(themeService.getColorTheme(), defaultListStyles),\n\t\t\t\t...workbenchListOptions,\n\t\t\t\thorizontalScrolling\n\t\t\t}\n\t\t);\n\n\t\tthis.disposables.add(workbenchListOptionsDisposable);\n\n\t\tthis.contextKeyService = createScopedContextKeyService(contextKeyService, this);\n\t\tthis.themeService = themeService;\n\n\t\tconst listSupportsMultiSelect = WorkbenchListSupportsMultiSelectContextKey.bindTo(this.contextKeyService);\n\t\tlistSupportsMultiSelect.set(!(options.multipleSelectionSupport === false));\n\n\t\tconst listSelectionNavigation = WorkbenchListSelectionNavigation.bindTo(this.contextKeyService);\n\t\tlistSelectionNavigation.set(Boolean(options.selectionNavigation));\n\n\t\tthis.listHasSelectionOrFocus = WorkbenchListHasSelectionOrFocus.bindTo(this.contextKeyService);\n\t\tthis.listDoubleSelection = WorkbenchListDoubleSelection.bindTo(this.contextKeyService);\n\t\tthis.listMultiSelection = WorkbenchListMultiSelection.bindTo(this.contextKeyService);\n\t\tthis.horizontalScrolling = options.horizontalScrolling;\n\n\t\tthis._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n\n\t\tthis.disposables.add(this.contextKeyService);\n\t\tthis.disposables.add((listService as ListService).register(this));\n\n\t\tif (options.overrideStyles) {\n\t\t\tthis.updateStyles(options.overrideStyles);\n\t\t}\n\n\t\tthis.disposables.add(this.onDidChangeSelection(() => {\n\t\t\tconst selection = this.getSelection();\n\t\t\tconst focus = this.getFocus();\n\n\t\t\tthis.contextKeyService.bufferChangeEvents(() => {\n\t\t\t\tthis.listHasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n\t\t\t\tthis.listMultiSelection.set(selection.length > 1);\n\t\t\t\tthis.listDoubleSelection.set(selection.length === 2);\n\t\t\t});\n\t\t}));\n\t\tthis.disposables.add(this.onDidChangeFocus(() => {\n\t\t\tconst selection = this.getSelection();\n\t\t\tconst focus = this.getFocus();\n\n\t\t\tthis.listHasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n\t\t}));\n\t\tthis.disposables.add(configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration(multiSelectModifierSettingKey)) {\n\t\t\t\tthis._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n\t\t\t}\n\n\t\t\tlet options: IListOptionsUpdate = {};\n\n\t\t\tif (e.affectsConfiguration(horizontalScrollingKey) && this.horizontalScrolling === undefined) {\n\t\t\t\tconst horizontalScrolling = configurationService.getValue<boolean>(horizontalScrollingKey);\n\t\t\t\toptions = { ...options, horizontalScrolling };\n\t\t\t}\n\t\t\tif (e.affectsConfiguration(listSmoothScrolling)) {\n\t\t\t\tconst smoothScrolling = configurationService.getValue<boolean>(listSmoothScrolling);\n\t\t\t\toptions = { ...options, smoothScrolling };\n\t\t\t}\n\t\t\tif (Object.keys(options).length > 0) {\n\t\t\t\tthis.updateOptions(options);\n\t\t\t}\n\t\t}));\n\n\t\tthis.navigator = new ListResourceNavigator(this, { configurationService, ...options });\n\t\tthis.disposables.add(this.navigator);\n\t}\n\n\toverride updateOptions(options: IWorkbenchListOptionsUpdate): void {\n\t\tsuper.updateOptions(options);\n\n\t\tif (options.overrideStyles) {\n\t\t\tthis.updateStyles(options.overrideStyles);\n\t\t}\n\t}\n\n\tprivate updateStyles(styles: IColorMapping): void {\n\t\tthis._styler?.dispose();\n\t\tthis._styler = attachListStyler(this, this.themeService, styles);\n\t}\n\n\tget useAltAsMultipleSelectionModifier(): boolean {\n\t\treturn this._useAltAsMultipleSelectionModifier;\n\t}\n\n\toverride dispose(): void {\n\t\tthis._styler?.dispose();\n\t\tsuper.dispose();\n\t}\n}\n\nexport interface IWorkbenchPagedListOptions<T> extends IWorkbenchListOptionsUpdate, IResourceNavigatorOptions, IPagedListOptions<T> {\n\treadonly selectionNavigation?: boolean;\n}\n\nexport class WorkbenchPagedList<T> extends PagedList<T> {\n\n\treadonly contextKeyService: IContextKeyService;\n\tprivate readonly themeService: IThemeService;\n\tprivate readonly disposables: DisposableStore;\n\tprivate _useAltAsMultipleSelectionModifier: boolean;\n\tprivate horizontalScrolling: boolean | undefined;\n\tprivate _styler: IDisposable | undefined;\n\tprivate navigator: ListResourceNavigator<T>;\n\tget onDidOpen(): Event<IOpenEvent<T | undefined>> { return this.navigator.onDidOpen; }\n\n\tconstructor(\n\t\tuser: string,\n\t\tcontainer: HTMLElement,\n\t\tdelegate: IListVirtualDelegate<number>,\n\t\trenderers: IPagedRenderer<T, any>[],\n\t\toptions: IWorkbenchPagedListOptions<T>,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IListService listService: IListService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IKeybindingService keybindingService: IKeybindingService\n\t) {\n\t\tconst horizontalScrolling = typeof options.horizontalScrolling !== 'undefined' ? options.horizontalScrolling : configurationService.getValue<boolean>(horizontalScrollingKey);\n\t\tconst [workbenchListOptions, workbenchListOptionsDisposable] = toWorkbenchListOptions(options, configurationService, keybindingService);\n\t\tsuper(user, container, delegate, renderers,\n\t\t\t{\n\t\t\t\tkeyboardSupport: false,\n\t\t\t\t...computeStyles(themeService.getColorTheme(), defaultListStyles),\n\t\t\t\t...workbenchListOptions,\n\t\t\t\thorizontalScrolling\n\t\t\t}\n\t\t);\n\n\t\tthis.disposables = new DisposableStore();\n\t\tthis.disposables.add(workbenchListOptionsDisposable);\n\n\t\tthis.contextKeyService = createScopedContextKeyService(contextKeyService, this);\n\t\tthis.themeService = themeService;\n\n\t\tthis.horizontalScrolling = options.horizontalScrolling;\n\n\t\tconst listSupportsMultiSelect = WorkbenchListSupportsMultiSelectContextKey.bindTo(this.contextKeyService);\n\t\tlistSupportsMultiSelect.set(!(options.multipleSelectionSupport === false));\n\n\t\tconst listSelectionNavigation = WorkbenchListSelectionNavigation.bindTo(this.contextKeyService);\n\t\tlistSelectionNavigation.set(Boolean(options.selectionNavigation));\n\n\t\tthis._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n\n\t\tthis.disposables.add(this.contextKeyService);\n\t\tthis.disposables.add((listService as ListService).register(this));\n\n\t\tif (options.overrideStyles) {\n\t\t\tthis.updateStyles(options.overrideStyles);\n\t\t}\n\n\t\tif (options.overrideStyles) {\n\t\t\tthis.disposables.add(attachListStyler(this, themeService, options.overrideStyles));\n\t\t}\n\n\t\tthis.disposables.add(configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration(multiSelectModifierSettingKey)) {\n\t\t\t\tthis._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n\t\t\t}\n\n\t\t\tlet options: IListOptionsUpdate = {};\n\n\t\t\tif (e.affectsConfiguration(horizontalScrollingKey) && this.horizontalScrolling === undefined) {\n\t\t\t\tconst horizontalScrolling = configurationService.getValue<boolean>(horizontalScrollingKey);\n\t\t\t\toptions = { ...options, horizontalScrolling };\n\t\t\t}\n\t\t\tif (e.affectsConfiguration(listSmoothScrolling)) {\n\t\t\t\tconst smoothScrolling = configurationService.getValue<boolean>(listSmoothScrolling);\n\t\t\t\toptions = { ...options, smoothScrolling };\n\t\t\t}\n\t\t\tif (Object.keys(options).length > 0) {\n\t\t\t\tthis.updateOptions(options);\n\t\t\t}\n\t\t}));\n\n\t\tthis.navigator = new ListResourceNavigator(this, { configurationService, ...options });\n\t\tthis.disposables.add(this.navigator);\n\t}\n\n\toverride updateOptions(options: IWorkbenchListOptionsUpdate): void {\n\t\tsuper.updateOptions(options);\n\n\t\tif (options.overrideStyles) {\n\t\t\tthis.updateStyles(options.overrideStyles);\n\t\t}\n\t}\n\n\tprivate updateStyles(styles: IColorMapping): void {\n\t\tthis._styler?.dispose();\n\t\tthis._styler = attachListStyler(this, this.themeService, styles);\n\t}\n\n\tget useAltAsMultipleSelectionModifier(): boolean {\n\t\treturn this._useAltAsMultipleSelectionModifier;\n\t}\n\n\toverride dispose(): void {\n\t\tthis._styler?.dispose();\n\t\tthis.disposables.dispose();\n\t\tsuper.dispose();\n\t}\n}\n\nexport interface IWorkbenchTableOptionsUpdate extends ITableOptionsUpdate {\n\treadonly overrideStyles?: IColorMapping;\n}\n\nexport interface IWorkbenchTableOptions<T> extends IWorkbenchTableOptionsUpdate, IResourceNavigatorOptions, ITableOptions<T> {\n\treadonly selectionNavigation?: boolean;\n}\n\nexport class WorkbenchTable<TRow> extends Table<TRow> {\n\n\treadonly contextKeyService: IContextKeyService;\n\tprivate readonly themeService: IThemeService;\n\tprivate listHasSelectionOrFocus: IContextKey<boolean>;\n\tprivate listDoubleSelection: IContextKey<boolean>;\n\tprivate listMultiSelection: IContextKey<boolean>;\n\tprivate horizontalScrolling: boolean | undefined;\n\tprivate _styler: IDisposable | undefined;\n\tprivate _useAltAsMultipleSelectionModifier: boolean;\n\tprivate readonly disposables: DisposableStore;\n\tprivate navigator: TableResourceNavigator<TRow>;\n\tget onDidOpen(): Event<IOpenEvent<TRow | undefined>> { return this.navigator.onDidOpen; }\n\n\tconstructor(\n\t\tuser: string,\n\t\tcontainer: HTMLElement,\n\t\tdelegate: ITableVirtualDelegate<TRow>,\n\t\tcolumns: ITableColumn<TRow, any>[],\n\t\trenderers: ITableRenderer<TRow, any>[],\n\t\toptions: IWorkbenchTableOptions<TRow>,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IListService listService: IListService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IKeybindingService keybindingService: IKeybindingService\n\t) {\n\t\tconst horizontalScrolling = typeof options.horizontalScrolling !== 'undefined' ? options.horizontalScrolling : configurationService.getValue<boolean>(horizontalScrollingKey);\n\t\tconst [workbenchListOptions, workbenchListOptionsDisposable] = toWorkbenchListOptions(options, configurationService, keybindingService);\n\n\t\tsuper(user, container, delegate, columns, renderers,\n\t\t\t{\n\t\t\t\tkeyboardSupport: false,\n\t\t\t\t...computeStyles(themeService.getColorTheme(), defaultListStyles),\n\t\t\t\t...workbenchListOptions,\n\t\t\t\thorizontalScrolling\n\t\t\t}\n\t\t);\n\n\t\tthis.disposables = new DisposableStore();\n\t\tthis.disposables.add(workbenchListOptionsDisposable);\n\n\t\tthis.contextKeyService = createScopedContextKeyService(contextKeyService, this);\n\t\tthis.themeService = themeService;\n\n\t\tconst listSupportsMultiSelect = WorkbenchListSupportsMultiSelectContextKey.bindTo(this.contextKeyService);\n\t\tlistSupportsMultiSelect.set(!(options.multipleSelectionSupport === false));\n\n\t\tconst listSelectionNavigation = WorkbenchListSelectionNavigation.bindTo(this.contextKeyService);\n\t\tlistSelectionNavigation.set(Boolean(options.selectionNavigation));\n\n\t\tthis.listHasSelectionOrFocus = WorkbenchListHasSelectionOrFocus.bindTo(this.contextKeyService);\n\t\tthis.listDoubleSelection = WorkbenchListDoubleSelection.bindTo(this.contextKeyService);\n\t\tthis.listMultiSelection = WorkbenchListMultiSelection.bindTo(this.contextKeyService);\n\t\tthis.horizontalScrolling = options.horizontalScrolling;\n\n\t\tthis._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n\n\t\tthis.disposables.add(this.contextKeyService);\n\t\tthis.disposables.add((listService as ListService).register(this));\n\n\t\tif (options.overrideStyles) {\n\t\t\tthis.updateStyles(options.overrideStyles);\n\t\t}\n\n\t\tthis.disposables.add(this.onDidChangeSelection(() => {\n\t\t\tconst selection = this.getSelection();\n\t\t\tconst focus = this.getFocus();\n\n\t\t\tthis.contextKeyService.bufferChangeEvents(() => {\n\t\t\t\tthis.listHasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n\t\t\t\tthis.listMultiSelection.set(selection.length > 1);\n\t\t\t\tthis.listDoubleSelection.set(selection.length === 2);\n\t\t\t});\n\t\t}));\n\t\tthis.disposables.add(this.onDidChangeFocus(() => {\n\t\t\tconst selection = this.getSelection();\n\t\t\tconst focus = this.getFocus();\n\n\t\t\tthis.listHasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n\t\t}));\n\t\tthis.disposables.add(configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration(multiSelectModifierSettingKey)) {\n\t\t\t\tthis._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n\t\t\t}\n\n\t\t\tlet options: IListOptionsUpdate = {};\n\n\t\t\tif (e.affectsConfiguration(horizontalScrollingKey) && this.horizontalScrolling === undefined) {\n\t\t\t\tconst horizontalScrolling = configurationService.getValue<boolean>(horizontalScrollingKey);\n\t\t\t\toptions = { ...options, horizontalScrolling };\n\t\t\t}\n\t\t\tif (e.affectsConfiguration(listSmoothScrolling)) {\n\t\t\t\tconst smoothScrolling = configurationService.getValue<boolean>(listSmoothScrolling);\n\t\t\t\toptions = { ...options, smoothScrolling };\n\t\t\t}\n\t\t\tif (Object.keys(options).length > 0) {\n\t\t\t\tthis.updateOptions(options);\n\t\t\t}\n\t\t}));\n\n\t\tthis.navigator = new TableResourceNavigator(this, { configurationService, ...options });\n\t\tthis.disposables.add(this.navigator);\n\t}\n\n\toverride updateOptions(options: IWorkbenchTableOptionsUpdate): void {\n\t\tsuper.updateOptions(options);\n\n\t\tif (options.overrideStyles) {\n\t\t\tthis.updateStyles(options.overrideStyles);\n\t\t}\n\t}\n\n\tprivate updateStyles(styles: IColorMapping): void {\n\t\tthis._styler?.dispose();\n\t\tthis._styler = attachListStyler(this, this.themeService, styles);\n\t}\n\n\tget useAltAsMultipleSelectionModifier(): boolean {\n\t\treturn this._useAltAsMultipleSelectionModifier;\n\t}\n\n\toverride dispose(): void {\n\t\tthis._styler?.dispose();\n\t\tthis.disposables.dispose();\n\t\tsuper.dispose();\n\t}\n}\n\nexport interface IOpenResourceOptions {\n\teditorOptions: IEditorOptions;\n\tsideBySide: boolean;\n\telement: any;\n\tpayload: any;\n}\n\nexport interface IOpenEvent<T> {\n\teditorOptions: IEditorOptions;\n\tsideBySide: boolean;\n\telement: T;\n\tbrowserEvent?: UIEvent;\n}\n\nexport interface IResourceNavigatorOptions {\n\treadonly configurationService?: IConfigurationService;\n\treadonly openOnSingleClick?: boolean;\n}\n\nexport interface SelectionKeyboardEvent extends KeyboardEvent {\n\tpreserveFocus?: boolean;\n\tpinned?: boolean;\n\t__forceEvent?: boolean;\n}\n\nexport function getSelectionKeyboardEvent(typeArg = 'keydown', preserveFocus?: boolean, pinned?: boolean): SelectionKeyboardEvent {\n\tconst e = new KeyboardEvent(typeArg);\n\t(<SelectionKeyboardEvent>e).preserveFocus = preserveFocus;\n\t(<SelectionKeyboardEvent>e).pinned = pinned;\n\t(<SelectionKeyboardEvent>e).__forceEvent = true;\n\n\treturn e;\n}\n\nabstract class ResourceNavigator<T> extends Disposable {\n\n\tprivate openOnSingleClick: boolean;\n\n\tprivate readonly _onDidOpen = this._register(new Emitter<IOpenEvent<T | undefined>>());\n\treadonly onDidOpen: Event<IOpenEvent<T | undefined>> = this._onDidOpen.event;\n\n\tconstructor(\n\t\tprotected readonly widget: ListWidget,\n\t\toptions?: IResourceNavigatorOptions\n\t) {\n\t\tsuper();\n\n\t\tthis._register(Event.filter(this.widget.onDidChangeSelection, e => e.browserEvent instanceof KeyboardEvent)(e => this.onSelectionFromKeyboard(e)));\n\t\tthis._register(this.widget.onPointer((e: { browserEvent: MouseEvent, element: T | undefined }) => this.onPointer(e.element, e.browserEvent)));\n\t\tthis._register(this.widget.onMouseDblClick((e: { browserEvent: MouseEvent, element: T | undefined }) => this.onMouseDblClick(e.element, e.browserEvent)));\n\n\t\tif (typeof options?.openOnSingleClick !== 'boolean' && options?.configurationService) {\n\t\t\tthis.openOnSingleClick = options?.configurationService!.getValue(openModeSettingKey) !== 'doubleClick';\n\t\t\tthis._register(options?.configurationService.onDidChangeConfiguration(() => {\n\t\t\t\tthis.openOnSingleClick = options?.configurationService!.getValue(openModeSettingKey) !== 'doubleClick';\n\t\t\t}));\n\t\t} else {\n\t\t\tthis.openOnSingleClick = options?.openOnSingleClick ?? true;\n\t\t}\n\t}\n\n\tprivate onSelectionFromKeyboard(event: ITreeEvent<any>): void {\n\t\tif (event.elements.length !== 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst selectionKeyboardEvent = event.browserEvent as SelectionKeyboardEvent;\n\t\tconst preserveFocus = typeof selectionKeyboardEvent.preserveFocus === 'boolean' ? selectionKeyboardEvent.preserveFocus! : true;\n\t\tconst pinned = typeof selectionKeyboardEvent.pinned === 'boolean' ? selectionKeyboardEvent.pinned! : !preserveFocus;\n\t\tconst sideBySide = false;\n\n\t\tthis._open(this.getSelectedElement(), preserveFocus, pinned, sideBySide, event.browserEvent);\n\t}\n\n\tprivate onPointer(element: T | undefined, browserEvent: MouseEvent): void {\n\t\tif (!this.openOnSingleClick) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isDoubleClick = browserEvent.detail === 2;\n\n\t\tif (isDoubleClick) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isMiddleClick = browserEvent.button === 1;\n\t\tconst preserveFocus = true;\n\t\tconst pinned = isMiddleClick;\n\t\tconst sideBySide = browserEvent.ctrlKey || browserEvent.metaKey || browserEvent.altKey;\n\n\t\tthis._open(element, preserveFocus, pinned, sideBySide, browserEvent);\n\t}\n\n\tprivate onMouseDblClick(element: T | undefined, browserEvent?: MouseEvent): void {\n\t\tif (!browserEvent) {\n\t\t\treturn;\n\t\t}\n\n\t\t// copied from AbstractTree\n\t\tconst target = browserEvent.target as HTMLElement;\n\t\tconst onTwistie = target.classList.contains('monaco-tl-twistie')\n\t\t\t|| (target.classList.contains('monaco-icon-label') && target.classList.contains('folder-icon') && browserEvent.offsetX < 16);\n\n\t\tif (onTwistie) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst preserveFocus = false;\n\t\tconst pinned = true;\n\t\tconst sideBySide = (browserEvent.ctrlKey || browserEvent.metaKey || browserEvent.altKey);\n\n\t\tthis._open(element, preserveFocus, pinned, sideBySide, browserEvent);\n\t}\n\n\tprivate _open(element: T | undefined, preserveFocus: boolean, pinned: boolean, sideBySide: boolean, browserEvent?: UIEvent): void {\n\t\tif (!element) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._onDidOpen.fire({\n\t\t\teditorOptions: {\n\t\t\t\tpreserveFocus,\n\t\t\t\tpinned,\n\t\t\t\trevealIfVisible: true\n\t\t\t},\n\t\t\tsideBySide,\n\t\t\telement,\n\t\t\tbrowserEvent\n\t\t});\n\t}\n\n\tabstract getSelectedElement(): T | undefined;\n}\n\nclass ListResourceNavigator<T> extends ResourceNavigator<T> {\n\n\tprotected override readonly widget: List<T> | PagedList<T>;\n\n\tconstructor(\n\t\twidget: List<T> | PagedList<T>,\n\t\toptions: IResourceNavigatorOptions\n\t) {\n\t\tsuper(widget, options);\n\t\tthis.widget = widget;\n\t}\n\n\tgetSelectedElement(): T | undefined {\n\t\treturn this.widget.getSelectedElements()[0];\n\t}\n}\n\nclass TableResourceNavigator<TRow> extends ResourceNavigator<TRow> {\n\n\tprotected override readonly widget!: Table<TRow>;\n\n\tconstructor(\n\t\twidget: Table<TRow>,\n\t\toptions: IResourceNavigatorOptions\n\t) {\n\t\tsuper(widget, options);\n\t}\n\n\tgetSelectedElement(): TRow | undefined {\n\t\treturn this.widget.getSelectedElements()[0];\n\t}\n}\n\nclass TreeResourceNavigator<T, TFilterData> extends ResourceNavigator<T> {\n\n\tprotected override readonly widget!: ObjectTree<T, TFilterData> | CompressibleObjectTree<T, TFilterData> | DataTree<any, T, TFilterData> | AsyncDataTree<any, T, TFilterData> | CompressibleAsyncDataTree<any, T, TFilterData>;\n\n\tconstructor(\n\t\twidget: ObjectTree<T, TFilterData> | CompressibleObjectTree<T, TFilterData> | DataTree<any, T, TFilterData> | AsyncDataTree<any, T, TFilterData> | CompressibleAsyncDataTree<any, T, TFilterData>,\n\t\toptions: IResourceNavigatorOptions\n\t) {\n\t\tsuper(widget, options);\n\t}\n\n\tgetSelectedElement(): T | undefined {\n\t\treturn this.widget.getSelection()[0] ?? undefined;\n\t}\n}\n\nfunction createKeyboardNavigationEventFilter(container: HTMLElement, keybindingService: IKeybindingService): IKeyboardNavigationEventFilter {\n\tlet inChord = false;\n\n\treturn event => {\n\t\tif (inChord) {\n\t\t\tinChord = false;\n\t\t\treturn false;\n\t\t}\n\n\t\tconst result = keybindingService.softDispatch(event, container);\n\n\t\tif (result && result.enterChord) {\n\t\t\tinChord = true;\n\t\t\treturn false;\n\t\t}\n\n\t\tinChord = false;\n\t\treturn true;\n\t};\n}\n\nexport interface IWorkbenchObjectTreeOptions<T, TFilterData> extends IObjectTreeOptions<T, TFilterData>, IResourceNavigatorOptions {\n\treadonly accessibilityProvider: IListAccessibilityProvider<T>;\n\treadonly overrideStyles?: IColorMapping;\n\treadonly selectionNavigation?: boolean;\n}\n\nexport class WorkbenchObjectTree<T extends NonNullable<any>, TFilterData = void> extends ObjectTree<T, TFilterData> {\n\n\tprivate internals: WorkbenchTreeInternals<any, T, TFilterData>;\n\tget contextKeyService(): IContextKeyService { return this.internals.contextKeyService; }\n\tget useAltAsMultipleSelectionModifier(): boolean { return this.internals.useAltAsMultipleSelectionModifier; }\n\tget onDidOpen(): Event<IOpenEvent<T | undefined>> { return this.internals.onDidOpen; }\n\n\tconstructor(\n\t\tuser: string,\n\t\tcontainer: HTMLElement,\n\t\tdelegate: IListVirtualDelegate<T>,\n\t\trenderers: ITreeRenderer<T, TFilterData, any>[],\n\t\toptions: IWorkbenchObjectTreeOptions<T, TFilterData>,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IListService listService: IListService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IAccessibilityService accessibilityService: IAccessibilityService\n\t) {\n\t\tconst { options: treeOptions, getAutomaticKeyboardNavigation, disposable } = workbenchTreeDataPreamble<T, TFilterData, IWorkbenchObjectTreeOptions<T, TFilterData>>(container, options, contextKeyService, configurationService, keybindingService, accessibilityService);\n\t\tsuper(user, container, delegate, renderers, treeOptions);\n\t\tthis.disposables.add(disposable);\n\t\tthis.internals = new WorkbenchTreeInternals(this, options, getAutomaticKeyboardNavigation, options.overrideStyles, contextKeyService, listService, themeService, configurationService, accessibilityService);\n\t\tthis.disposables.add(this.internals);\n\t}\n}\n\nexport interface IWorkbenchCompressibleObjectTreeOptionsUpdate extends ICompressibleObjectTreeOptionsUpdate {\n\treadonly overrideStyles?: IColorMapping;\n}\n\nexport interface IWorkbenchCompressibleObjectTreeOptions<T, TFilterData> extends IWorkbenchCompressibleObjectTreeOptionsUpdate, ICompressibleObjectTreeOptions<T, TFilterData>, IResourceNavigatorOptions {\n\treadonly accessibilityProvider: IListAccessibilityProvider<T>;\n\treadonly selectionNavigation?: boolean;\n}\n\nexport class WorkbenchCompressibleObjectTree<T extends NonNullable<any>, TFilterData = void> extends CompressibleObjectTree<T, TFilterData> {\n\n\tprivate internals: WorkbenchTreeInternals<any, T, TFilterData>;\n\tget contextKeyService(): IContextKeyService { return this.internals.contextKeyService; }\n\tget useAltAsMultipleSelectionModifier(): boolean { return this.internals.useAltAsMultipleSelectionModifier; }\n\tget onDidOpen(): Event<IOpenEvent<T | undefined>> { return this.internals.onDidOpen; }\n\n\tconstructor(\n\t\tuser: string,\n\t\tcontainer: HTMLElement,\n\t\tdelegate: IListVirtualDelegate<T>,\n\t\trenderers: ICompressibleTreeRenderer<T, TFilterData, any>[],\n\t\toptions: IWorkbenchCompressibleObjectTreeOptions<T, TFilterData>,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IListService listService: IListService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IAccessibilityService accessibilityService: IAccessibilityService\n\t) {\n\t\tconst { options: treeOptions, getAutomaticKeyboardNavigation, disposable } = workbenchTreeDataPreamble<T, TFilterData, IWorkbenchCompressibleObjectTreeOptions<T, TFilterData>>(container, options, contextKeyService, configurationService, keybindingService, accessibilityService);\n\t\tsuper(user, container, delegate, renderers, treeOptions);\n\t\tthis.disposables.add(disposable);\n\t\tthis.internals = new WorkbenchTreeInternals(this, options, getAutomaticKeyboardNavigation, options.overrideStyles, contextKeyService, listService, themeService, configurationService, accessibilityService);\n\t\tthis.disposables.add(this.internals);\n\t}\n\n\toverride updateOptions(options: IWorkbenchCompressibleObjectTreeOptionsUpdate = {}): void {\n\t\tsuper.updateOptions(options);\n\n\t\tif (options.overrideStyles) {\n\t\t\tthis.internals.updateStyleOverrides(options.overrideStyles);\n\t\t}\n\t}\n}\n\nexport interface IWorkbenchDataTreeOptionsUpdate extends IAbstractTreeOptionsUpdate {\n\treadonly overrideStyles?: IColorMapping;\n}\n\nexport interface IWorkbenchDataTreeOptions<T, TFilterData> extends IWorkbenchDataTreeOptionsUpdate, IDataTreeOptions<T, TFilterData>, IResourceNavigatorOptions {\n\treadonly accessibilityProvider: IListAccessibilityProvider<T>;\n\treadonly selectionNavigation?: boolean;\n}\n\nexport class WorkbenchDataTree<TInput, T, TFilterData = void> extends DataTree<TInput, T, TFilterData> {\n\n\tprivate internals: WorkbenchTreeInternals<TInput, T, TFilterData>;\n\tget contextKeyService(): IContextKeyService { return this.internals.contextKeyService; }\n\tget useAltAsMultipleSelectionModifier(): boolean { return this.internals.useAltAsMultipleSelectionModifier; }\n\tget onDidOpen(): Event<IOpenEvent<T | undefined>> { return this.internals.onDidOpen; }\n\n\tconstructor(\n\t\tuser: string,\n\t\tcontainer: HTMLElement,\n\t\tdelegate: IListVirtualDelegate<T>,\n\t\trenderers: ITreeRenderer<T, TFilterData, any>[],\n\t\tdataSource: IDataSource<TInput, T>,\n\t\toptions: IWorkbenchDataTreeOptions<T, TFilterData>,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IListService listService: IListService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IAccessibilityService accessibilityService: IAccessibilityService\n\t) {\n\t\tconst { options: treeOptions, getAutomaticKeyboardNavigation, disposable } = workbenchTreeDataPreamble<T, TFilterData, IWorkbenchDataTreeOptions<T, TFilterData>>(container, options, contextKeyService, configurationService, keybindingService, accessibilityService);\n\t\tsuper(user, container, delegate, renderers, dataSource, treeOptions);\n\t\tthis.disposables.add(disposable);\n\t\tthis.internals = new WorkbenchTreeInternals(this, options, getAutomaticKeyboardNavigation, options.overrideStyles, contextKeyService, listService, themeService, configurationService, accessibilityService);\n\t\tthis.disposables.add(this.internals);\n\t}\n\n\toverride updateOptions(options: IWorkbenchDataTreeOptionsUpdate = {}): void {\n\t\tsuper.updateOptions(options);\n\n\t\tif (options.overrideStyles) {\n\t\t\tthis.internals.updateStyleOverrides(options.overrideStyles);\n\t\t}\n\t}\n}\n\nexport interface IWorkbenchAsyncDataTreeOptionsUpdate extends IAsyncDataTreeOptionsUpdate {\n\treadonly overrideStyles?: IColorMapping;\n}\n\nexport interface IWorkbenchAsyncDataTreeOptions<T, TFilterData> extends IWorkbenchAsyncDataTreeOptionsUpdate, IAsyncDataTreeOptions<T, TFilterData>, IResourceNavigatorOptions {\n\treadonly accessibilityProvider: IListAccessibilityProvider<T>;\n\treadonly selectionNavigation?: boolean;\n}\n\nexport class WorkbenchAsyncDataTree<TInput, T, TFilterData = void> extends AsyncDataTree<TInput, T, TFilterData> {\n\n\tprivate internals: WorkbenchTreeInternals<TInput, T, TFilterData>;\n\tget contextKeyService(): IContextKeyService { return this.internals.contextKeyService; }\n\tget useAltAsMultipleSelectionModifier(): boolean { return this.internals.useAltAsMultipleSelectionModifier; }\n\tget onDidOpen(): Event<IOpenEvent<T | undefined>> { return this.internals.onDidOpen; }\n\n\tconstructor(\n\t\tuser: string,\n\t\tcontainer: HTMLElement,\n\t\tdelegate: IListVirtualDelegate<T>,\n\t\trenderers: ITreeRenderer<T, TFilterData, any>[],\n\t\tdataSource: IAsyncDataSource<TInput, T>,\n\t\toptions: IWorkbenchAsyncDataTreeOptions<T, TFilterData>,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IListService listService: IListService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IAccessibilityService accessibilityService: IAccessibilityService\n\t) {\n\t\tconst { options: treeOptions, getAutomaticKeyboardNavigation, disposable } = workbenchTreeDataPreamble<T, TFilterData, IWorkbenchAsyncDataTreeOptions<T, TFilterData>>(container, options, contextKeyService, configurationService, keybindingService, accessibilityService);\n\t\tsuper(user, container, delegate, renderers, dataSource, treeOptions);\n\t\tthis.disposables.add(disposable);\n\t\tthis.internals = new WorkbenchTreeInternals(this, options, getAutomaticKeyboardNavigation, options.overrideStyles, contextKeyService, listService, themeService, configurationService, accessibilityService);\n\t\tthis.disposables.add(this.internals);\n\t}\n\n\toverride updateOptions(options: IWorkbenchAsyncDataTreeOptionsUpdate = {}): void {\n\t\tsuper.updateOptions(options);\n\n\t\tif (options.overrideStyles) {\n\t\t\tthis.internals.updateStyleOverrides(options.overrideStyles);\n\t\t}\n\t}\n}\n\nexport interface IWorkbenchCompressibleAsyncDataTreeOptions<T, TFilterData> extends ICompressibleAsyncDataTreeOptions<T, TFilterData>, IResourceNavigatorOptions {\n\treadonly accessibilityProvider: IListAccessibilityProvider<T>;\n\treadonly overrideStyles?: IColorMapping;\n\treadonly selectionNavigation?: boolean;\n}\n\nexport class WorkbenchCompressibleAsyncDataTree<TInput, T, TFilterData = void> extends CompressibleAsyncDataTree<TInput, T, TFilterData> {\n\n\tprivate internals: WorkbenchTreeInternals<TInput, T, TFilterData>;\n\tget contextKeyService(): IContextKeyService { return this.internals.contextKeyService; }\n\tget useAltAsMultipleSelectionModifier(): boolean { return this.internals.useAltAsMultipleSelectionModifier; }\n\tget onDidOpen(): Event<IOpenEvent<T | undefined>> { return this.internals.onDidOpen; }\n\n\tconstructor(\n\t\tuser: string,\n\t\tcontainer: HTMLElement,\n\t\tvirtualDelegate: IListVirtualDelegate<T>,\n\t\tcompressionDelegate: ITreeCompressionDelegate<T>,\n\t\trenderers: ICompressibleTreeRenderer<T, TFilterData, any>[],\n\t\tdataSource: IAsyncDataSource<TInput, T>,\n\t\toptions: IWorkbenchCompressibleAsyncDataTreeOptions<T, TFilterData>,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IListService listService: IListService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IAccessibilityService accessibilityService: IAccessibilityService\n\t) {\n\t\tconst { options: treeOptions, getAutomaticKeyboardNavigation, disposable } = workbenchTreeDataPreamble<T, TFilterData, IWorkbenchCompressibleAsyncDataTreeOptions<T, TFilterData>>(container, options, contextKeyService, configurationService, keybindingService, accessibilityService);\n\t\tsuper(user, container, virtualDelegate, compressionDelegate, renderers, dataSource, treeOptions);\n\t\tthis.disposables.add(disposable);\n\t\tthis.internals = new WorkbenchTreeInternals(this, options, getAutomaticKeyboardNavigation, options.overrideStyles, contextKeyService, listService, themeService, configurationService, accessibilityService);\n\t\tthis.disposables.add(this.internals);\n\t}\n}\n\nfunction workbenchTreeDataPreamble<T, TFilterData, TOptions extends IAbstractTreeOptions<T, TFilterData> | IAsyncDataTreeOptions<T, TFilterData>>(\n\tcontainer: HTMLElement,\n\toptions: TOptions,\n\tcontextKeyService: IContextKeyService,\n\tconfigurationService: IConfigurationService,\n\tkeybindingService: IKeybindingService,\n\taccessibilityService: IAccessibilityService,\n): { options: TOptions, getAutomaticKeyboardNavigation: () => boolean | undefined, disposable: IDisposable } {\n\tWorkbenchListSupportsKeyboardNavigation.bindTo(contextKeyService);\n\n\tif (!didBindWorkbenchListAutomaticKeyboardNavigation) {\n\t\tWorkbenchListAutomaticKeyboardNavigation.bindTo(contextKeyService);\n\t\tdidBindWorkbenchListAutomaticKeyboardNavigation = true;\n\t}\n\n\tconst getAutomaticKeyboardNavigation = () => {\n\t\t// give priority to the context key value to disable this completely\n\t\tlet automaticKeyboardNavigation = contextKeyService.getContextKeyValue<boolean>(WorkbenchListAutomaticKeyboardNavigationKey);\n\n\t\tif (automaticKeyboardNavigation) {\n\t\t\tautomaticKeyboardNavigation = configurationService.getValue<boolean>(automaticKeyboardNavigationSettingKey);\n\t\t}\n\n\t\treturn automaticKeyboardNavigation;\n\t};\n\n\tconst accessibilityOn = accessibilityService.isScreenReaderOptimized();\n\tconst keyboardNavigation = options.simpleKeyboardNavigation || accessibilityOn ? 'simple' : configurationService.getValue<string>(keyboardNavigationSettingKey);\n\tconst horizontalScrolling = options.horizontalScrolling !== undefined ? options.horizontalScrolling : configurationService.getValue<boolean>(horizontalScrollingKey);\n\tconst [workbenchListOptions, disposable] = toWorkbenchListOptions(options, configurationService, keybindingService);\n\tconst additionalScrollHeight = options.additionalScrollHeight;\n\n\treturn {\n\t\tgetAutomaticKeyboardNavigation,\n\t\tdisposable,\n\t\toptions: {\n\t\t\t// ...options, // TODO@Joao why is this not splatted here?\n\t\t\tkeyboardSupport: false,\n\t\t\t...workbenchListOptions,\n\t\t\tindent: configurationService.getValue<number>(treeIndentKey),\n\t\t\trenderIndentGuides: configurationService.getValue<RenderIndentGuides>(treeRenderIndentGuidesKey),\n\t\t\tsmoothScrolling: configurationService.getValue<boolean>(listSmoothScrolling),\n\t\t\tautomaticKeyboardNavigation: getAutomaticKeyboardNavigation(),\n\t\t\tsimpleKeyboardNavigation: keyboardNavigation === 'simple',\n\t\t\tfilterOnType: keyboardNavigation === 'filter',\n\t\t\thorizontalScrolling,\n\t\t\tkeyboardNavigationEventFilter: createKeyboardNavigationEventFilter(container, keybindingService),\n\t\t\tadditionalScrollHeight,\n\t\t\thideTwistiesOfChildlessElements: options.hideTwistiesOfChildlessElements,\n\t\t\texpandOnlyOnTwistieClick: options.expandOnlyOnTwistieClick ?? (configurationService.getValue<'singleClick' | 'doubleClick'>(treeExpandMode) === 'doubleClick')\n\t\t} as TOptions\n\t};\n}\n\nclass WorkbenchTreeInternals<TInput, T, TFilterData> {\n\n\treadonly contextKeyService: IContextKeyService;\n\tprivate hasSelectionOrFocus: IContextKey<boolean>;\n\tprivate hasDoubleSelection: IContextKey<boolean>;\n\tprivate hasMultiSelection: IContextKey<boolean>;\n\tprivate _useAltAsMultipleSelectionModifier: boolean;\n\tprivate disposables: IDisposable[] = [];\n\tprivate styler: IDisposable | undefined;\n\tprivate navigator: TreeResourceNavigator<T, TFilterData>;\n\n\tget onDidOpen(): Event<IOpenEvent<T | undefined>> { return this.navigator.onDidOpen; }\n\n\tconstructor(\n\t\tprivate tree: WorkbenchObjectTree<T, TFilterData> | WorkbenchCompressibleObjectTree<T, TFilterData> | WorkbenchDataTree<TInput, T, TFilterData> | WorkbenchAsyncDataTree<TInput, T, TFilterData> | WorkbenchCompressibleAsyncDataTree<TInput, T, TFilterData>,\n\t\toptions: IWorkbenchObjectTreeOptions<T, TFilterData> | IWorkbenchCompressibleObjectTreeOptions<T, TFilterData> | IWorkbenchDataTreeOptions<T, TFilterData> | IWorkbenchAsyncDataTreeOptions<T, TFilterData> | IWorkbenchCompressibleAsyncDataTreeOptions<T, TFilterData>,\n\t\tgetAutomaticKeyboardNavigation: () => boolean | undefined,\n\t\toverrideStyles: IColorMapping | undefined,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IListService listService: IListService,\n\t\t@IThemeService private themeService: IThemeService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IAccessibilityService accessibilityService: IAccessibilityService,\n\t) {\n\t\tthis.contextKeyService = createScopedContextKeyService(contextKeyService, tree);\n\n\t\tconst listSupportsMultiSelect = WorkbenchListSupportsMultiSelectContextKey.bindTo(this.contextKeyService);\n\t\tlistSupportsMultiSelect.set(!(options.multipleSelectionSupport === false));\n\n\t\tconst listSelectionNavigation = WorkbenchListSelectionNavigation.bindTo(this.contextKeyService);\n\t\tlistSelectionNavigation.set(Boolean(options.selectionNavigation));\n\n\t\tthis.hasSelectionOrFocus = WorkbenchListHasSelectionOrFocus.bindTo(this.contextKeyService);\n\t\tthis.hasDoubleSelection = WorkbenchListDoubleSelection.bindTo(this.contextKeyService);\n\t\tthis.hasMultiSelection = WorkbenchListMultiSelection.bindTo(this.contextKeyService);\n\n\t\tthis._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n\n\t\tconst interestingContextKeys = new Set();\n\t\tinterestingContextKeys.add(WorkbenchListAutomaticKeyboardNavigationKey);\n\t\tconst updateKeyboardNavigation = () => {\n\t\t\tconst accessibilityOn = accessibilityService.isScreenReaderOptimized();\n\t\t\tconst keyboardNavigation = accessibilityOn ? 'simple' : configurationService.getValue<string>(keyboardNavigationSettingKey);\n\t\t\ttree.updateOptions({\n\t\t\t\tsimpleKeyboardNavigation: keyboardNavigation === 'simple',\n\t\t\t\tfilterOnType: keyboardNavigation === 'filter'\n\t\t\t});\n\t\t};\n\n\t\tthis.updateStyleOverrides(overrideStyles);\n\n\t\tthis.disposables.push(\n\t\t\tthis.contextKeyService,\n\t\t\t(listService as ListService).register(tree),\n\t\t\ttree.onDidChangeSelection(() => {\n\t\t\t\tconst selection = tree.getSelection();\n\t\t\t\tconst focus = tree.getFocus();\n\n\t\t\t\tthis.contextKeyService.bufferChangeEvents(() => {\n\t\t\t\t\tthis.hasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n\t\t\t\t\tthis.hasMultiSelection.set(selection.length > 1);\n\t\t\t\t\tthis.hasDoubleSelection.set(selection.length === 2);\n\t\t\t\t});\n\t\t\t}),\n\t\t\ttree.onDidChangeFocus(() => {\n\t\t\t\tconst selection = tree.getSelection();\n\t\t\t\tconst focus = tree.getFocus();\n\n\t\t\t\tthis.hasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n\t\t\t}),\n\t\t\tconfigurationService.onDidChangeConfiguration(e => {\n\t\t\t\tlet newOptions: any = {};\n\t\t\t\tif (e.affectsConfiguration(multiSelectModifierSettingKey)) {\n\t\t\t\t\tthis._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n\t\t\t\t}\n\t\t\t\tif (e.affectsConfiguration(treeIndentKey)) {\n\t\t\t\t\tconst indent = configurationService.getValue<number>(treeIndentKey);\n\t\t\t\t\tnewOptions = { ...newOptions, indent };\n\t\t\t\t}\n\t\t\t\tif (e.affectsConfiguration(treeRenderIndentGuidesKey)) {\n\t\t\t\t\tconst renderIndentGuides = configurationService.getValue<RenderIndentGuides>(treeRenderIndentGuidesKey);\n\t\t\t\t\tnewOptions = { ...newOptions, renderIndentGuides };\n\t\t\t\t}\n\t\t\t\tif (e.affectsConfiguration(listSmoothScrolling)) {\n\t\t\t\t\tconst smoothScrolling = configurationService.getValue<boolean>(listSmoothScrolling);\n\t\t\t\t\tnewOptions = { ...newOptions, smoothScrolling };\n\t\t\t\t}\n\t\t\t\tif (e.affectsConfiguration(keyboardNavigationSettingKey)) {\n\t\t\t\t\tupdateKeyboardNavigation();\n\t\t\t\t}\n\t\t\t\tif (e.affectsConfiguration(automaticKeyboardNavigationSettingKey)) {\n\t\t\t\t\tnewOptions = { ...newOptions, automaticKeyboardNavigation: getAutomaticKeyboardNavigation() };\n\t\t\t\t}\n\t\t\t\tif (e.affectsConfiguration(horizontalScrollingKey) && options.horizontalScrolling === undefined) {\n\t\t\t\t\tconst horizontalScrolling = configurationService.getValue<boolean>(horizontalScrollingKey);\n\t\t\t\t\tnewOptions = { ...newOptions, horizontalScrolling };\n\t\t\t\t}\n\t\t\t\tif (e.affectsConfiguration(treeExpandMode) && options.expandOnlyOnTwistieClick === undefined) {\n\t\t\t\t\tnewOptions = { ...newOptions, expandOnlyOnTwistieClick: configurationService.getValue<'singleClick' | 'doubleClick'>(treeExpandMode) === 'doubleClick' };\n\t\t\t\t}\n\t\t\t\tif (Object.keys(newOptions).length > 0) {\n\t\t\t\t\ttree.updateOptions(newOptions);\n\t\t\t\t}\n\t\t\t}),\n\t\t\tthis.contextKeyService.onDidChangeContext(e => {\n\t\t\t\tif (e.affectsSome(interestingContextKeys)) {\n\t\t\t\t\ttree.updateOptions({ automaticKeyboardNavigation: getAutomaticKeyboardNavigation() });\n\t\t\t\t}\n\t\t\t}),\n\t\t\taccessibilityService.onDidChangeScreenReaderOptimized(() => updateKeyboardNavigation())\n\t\t);\n\n\t\tthis.navigator = new TreeResourceNavigator(tree, { configurationService, ...options });\n\t\tthis.disposables.push(this.navigator);\n\t}\n\n\tget useAltAsMultipleSelectionModifier(): boolean {\n\t\treturn this._useAltAsMultipleSelectionModifier;\n\t}\n\n\tupdateStyleOverrides(overrideStyles?: IColorMapping): void {\n\t\tdispose(this.styler);\n\t\tthis.styler = overrideStyles ? attachListStyler(this.tree, this.themeService, overrideStyles) : Disposable.None;\n\t}\n\n\tdispose(): void {\n\t\tthis.disposables = dispose(this.disposables);\n\t\tdispose(this.styler);\n\t\tthis.styler = undefined;\n\t}\n}\n\nconst configurationRegistry = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration);\n\nconfigurationRegistry.registerConfiguration({\n\t'id': 'workbench',\n\t'order': 7,\n\t'title': localize('workbenchConfigurationTitle', \"Workbench\"),\n\t'type': 'object',\n\t'properties': {\n\t\t[multiSelectModifierSettingKey]: {\n\t\t\t'type': 'string',\n\t\t\t'enum': ['ctrlCmd', 'alt'],\n\t\t\t'enumDescriptions': [\n\t\t\t\tlocalize('multiSelectModifier.ctrlCmd', \"Maps to `Control` on Windows and Linux and to `Command` on macOS.\"),\n\t\t\t\tlocalize('multiSelectModifier.alt', \"Maps to `Alt` on Windows and Linux and to `Option` on macOS.\")\n\t\t\t],\n\t\t\t'default': 'ctrlCmd',\n\t\t\t'description': localize({\n\t\t\t\tkey: 'multiSelectModifier',\n\t\t\t\tcomment: [\n\t\t\t\t\t'- `ctrlCmd` refers to a value the setting can take and should not be localized.',\n\t\t\t\t\t'- `Control` and `Command` refer to the modifier keys Ctrl or Cmd on the keyboard and can be localized.'\n\t\t\t\t]\n\t\t\t}, \"The modifier to be used to add an item in trees and lists to a multi-selection with the mouse (for example in the explorer, open editors and scm view). The 'Open to Side' mouse gestures - if supported - will adapt such that they do not conflict with the multiselect modifier.\")\n\t\t},\n\t\t[openModeSettingKey]: {\n\t\t\t'type': 'string',\n\t\t\t'enum': ['singleClick', 'doubleClick'],\n\t\t\t'default': 'singleClick',\n\t\t\t'description': localize({\n\t\t\t\tkey: 'openModeModifier',\n\t\t\t\tcomment: ['`singleClick` and `doubleClick` refers to a value the setting can take and should not be localized.']\n\t\t\t}, \"Controls how to open items in trees and lists using the mouse (if supported). Note that some trees and lists might choose to ignore this setting if it is not applicable.\")\n\t\t},\n\t\t[horizontalScrollingKey]: {\n\t\t\t'type': 'boolean',\n\t\t\t'default': false,\n\t\t\t'description': localize('horizontalScrolling setting', \"Controls whether lists and trees support horizontal scrolling in the workbench. Warning: turning on this setting has a performance implication.\")\n\t\t},\n\t\t[treeIndentKey]: {\n\t\t\t'type': 'number',\n\t\t\t'default': 8,\n\t\t\tminimum: 0,\n\t\t\tmaximum: 40,\n\t\t\t'description': localize('tree indent setting', \"Controls tree indentation in pixels.\")\n\t\t},\n\t\t[treeRenderIndentGuidesKey]: {\n\t\t\ttype: 'string',\n\t\t\tenum: ['none', 'onHover', 'always'],\n\t\t\tdefault: 'onHover',\n\t\t\tdescription: localize('render tree indent guides', \"Controls whether the tree should render indent guides.\")\n\t\t},\n\t\t[listSmoothScrolling]: {\n\t\t\ttype: 'boolean',\n\t\t\tdefault: false,\n\t\t\tdescription: localize('list smoothScrolling setting', \"Controls whether lists and trees have smooth scrolling.\"),\n\t\t},\n\t\t[keyboardNavigationSettingKey]: {\n\t\t\t'type': 'string',\n\t\t\t'enum': ['simple', 'highlight', 'filter'],\n\t\t\t'enumDescriptions': [\n\t\t\t\tlocalize('keyboardNavigationSettingKey.simple', \"Simple keyboard navigation focuses elements which match the keyboard input. Matching is done only on prefixes.\"),\n\t\t\t\tlocalize('keyboardNavigationSettingKey.highlight', \"Highlight keyboard navigation highlights elements which match the keyboard input. Further up and down navigation will traverse only the highlighted elements.\"),\n\t\t\t\tlocalize('keyboardNavigationSettingKey.filter', \"Filter keyboard navigation will filter out and hide all the elements which do not match the keyboard input.\")\n\t\t\t],\n\t\t\t'default': 'highlight',\n\t\t\t'description': localize('keyboardNavigationSettingKey', \"Controls the keyboard navigation style for lists and trees in the workbench. Can be simple, highlight and filter.\")\n\t\t},\n\t\t[automaticKeyboardNavigationSettingKey]: {\n\t\t\t'type': 'boolean',\n\t\t\t'default': true,\n\t\t\tmarkdownDescription: localize('automatic keyboard navigation setting', \"Controls whether keyboard navigation in lists and trees is automatically triggered simply by typing. If set to `false`, keyboard navigation is only triggered when executing the `list.toggleKeyboardNavigation` command, for which you can assign a keyboard shortcut.\")\n\t\t},\n\t\t[treeExpandMode]: {\n\t\t\ttype: 'string',\n\t\t\tenum: ['singleClick', 'doubleClick'],\n\t\t\tdefault: 'singleClick',\n\t\t\tdescription: localize('expand mode', \"Controls how tree folders are expanded when clicking the folder names. Note that some trees and lists might choose to ignore this setting if it is not applicable.\"),\n\t\t}\n\t}\n});\n"]}