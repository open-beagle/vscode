{"version":3,"sources":["vs/platform/dialogs/common/dialogs.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAiLnF,QAAA,cAAc,GAAG,CAAA,GAAA,+BAAe,CAAA,CAAiB,eAAe,CAAC,CAAC;IAsGlE,QAAA,kBAAkB,GAAG,CAAA,GAAA,+BAAe,CAAA,CAAqB,mBAAmB,CAAC,CAAC;IAuE3F,IAAkB,aAIjB;IAJD,WAAkB,aAAa;QAC9B,iDAAI,CAAA;QACJ,2DAAS,CAAA;QACT,qDAAM,CAAA;IACP,CAAC,EAJiB,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAI9B;IAED,MAAM,iBAAiB,GAAG,EAAE,CAAC;IAC7B,SAAgB,mBAAmB,CAAC,oBAA+C;QAClF,MAAM,OAAO,GAAa,EAAE,CAAC;QAC7B,OAAO,CAAC,IAAI,CAAC,GAAG,oBAAoB,CAAC,KAAK,CAAC,CAAC,EAAE,iBAAiB,CAAC,CAAC,GAAG,CAAC,kBAAkB,CAAC,EAAE,CAAC,OAAO,kBAAkB,KAAK,QAAQ,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAA,GAAA,oBAAQ,CAAA,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;QAExL,IAAI,oBAAoB,CAAC,MAAM,GAAG,iBAAiB,EAAE;YACpD,IAAI,oBAAoB,CAAC,MAAM,GAAG,iBAAiB,KAAK,CAAC,EAAE;gBAC1D,OAAO,CAAC,IAAI,CAAC,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAU,EAAE,IAAgC,CAAC,CAAC,CAAC;aACrE;iBAAM;gBACN,OAAO,CAAC,IAAI,CAAC,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAW,EAAE,IAAmC,EAAE,oBAAoB,CAAC,MAAM,GAAG,iBAAiB,CAAC,CAAC,CAAC;aAC1H;SACD;QAED,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACjB,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC3B,CAAC;IAdD,kDAcC","file":"dialogs.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport Severity from 'vs/base/common/severity';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { URI } from 'vs/base/common/uri';\nimport { basename } from 'vs/base/common/resources';\nimport { localize } from 'vs/nls';\nimport { ITelemetryData } from 'vs/platform/telemetry/common/telemetry';\nimport { Codicon } from 'vs/base/common/codicons';\nimport { IMarkdownString } from 'vs/base/common/htmlContent';\n\nexport interface FileFilter {\n\textensions: string[];\n\tname: string;\n}\n\nexport type DialogType = 'none' | 'info' | 'error' | 'question' | 'warning';\n\nexport interface ICheckbox {\n\tlabel: string;\n\tchecked?: boolean;\n}\n\nexport interface IConfirmDialogArgs {\n\tconfirmation: IConfirmation;\n}\n\nexport interface IShowDialogArgs {\n\tseverity: Severity;\n\tmessage: string;\n\tbuttons: string[];\n\toptions?: IDialogOptions;\n}\n\nexport interface IInputDialogArgs extends IShowDialogArgs {\n\tinputs: IInput[],\n}\n\nexport interface IDialog {\n\tconfirmArgs?: IConfirmDialogArgs;\n\tshowArgs?: IShowDialogArgs;\n\tinputArgs?: IInputDialogArgs;\n}\n\nexport type IDialogResult = IConfirmationResult | IInputResult | IShowResult;\n\nexport interface IConfirmation {\n\ttitle?: string;\n\ttype?: DialogType;\n\tmessage: string;\n\tdetail?: string;\n\tprimaryButton?: string;\n\tsecondaryButton?: string;\n\tcheckbox?: ICheckbox;\n}\n\nexport interface IConfirmationResult {\n\n\t/**\n\t * Will be true if the dialog was confirmed with the primary button\n\t * pressed.\n\t */\n\tconfirmed: boolean;\n\n\t/**\n\t * This will only be defined if the confirmation was created\n\t * with the checkbox option defined.\n\t */\n\tcheckboxChecked?: boolean;\n}\n\nexport interface IShowResult {\n\n\t/**\n\t * Selected choice index. If the user refused to choose,\n\t * then a promise with index of `cancelId` option is returned. If there is no such\n\t * option then promise with index `0` is returned.\n\t */\n\tchoice: number;\n\n\t/**\n\t * This will only be defined if the confirmation was created\n\t * with the checkbox option defined.\n\t */\n\tcheckboxChecked?: boolean;\n}\n\nexport interface IInputResult extends IShowResult {\n\n\t/**\n\t * Values for the input fields as provided by the user\n\t * or `undefined` if none.\n\t */\n\tvalues?: string[];\n}\n\nexport interface IPickAndOpenOptions {\n\tforceNewWindow?: boolean;\n\tdefaultUri?: URI;\n\ttelemetryExtraData?: ITelemetryData;\n\tavailableFileSystems?: string[];\n\tremoteAuthority?: string | null;\n}\n\nexport interface ISaveDialogOptions {\n\t/**\n\t * A human-readable string for the dialog title\n\t */\n\ttitle?: string;\n\n\t/**\n\t * The resource the dialog shows when opened.\n\t */\n\tdefaultUri?: URI;\n\n\t/**\n\t * A set of file filters that are used by the dialog. Each entry is a human readable label,\n\t * like \"TypeScript\", and an array of extensions.\n\t */\n\tfilters?: FileFilter[];\n\n\t/**\n\t * A human-readable string for the ok button\n\t */\n\tsaveLabel?: string;\n\n\t/**\n\t * Specifies a list of schemas for the file systems the user can save to. If not specified, uses the schema of the defaultURI or, if also not specified,\n\t * the schema of the current window.\n\t */\n\tavailableFileSystems?: readonly string[];\n}\n\nexport interface IOpenDialogOptions {\n\t/**\n\t * A human-readable string for the dialog title\n\t */\n\ttitle?: string;\n\n\t/**\n\t * The resource the dialog shows when opened.\n\t */\n\tdefaultUri?: URI;\n\n\t/**\n\t * A human-readable string for the open button.\n\t */\n\topenLabel?: string;\n\n\t/**\n\t * Allow to select files, defaults to `true`.\n\t */\n\tcanSelectFiles?: boolean;\n\n\t/**\n\t * Allow to select folders, defaults to `false`.\n\t */\n\tcanSelectFolders?: boolean;\n\n\t/**\n\t * Allow to select many files or folders.\n\t */\n\tcanSelectMany?: boolean;\n\n\t/**\n\t * A set of file filters that are used by the dialog. Each entry is a human readable label,\n\t * like \"TypeScript\", and an array of extensions.\n\t */\n\tfilters?: FileFilter[];\n\n\t/**\n\t * Specifies a list of schemas for the file systems the user can load from. If not specified, uses the schema of the defaultURI or, if also not available,\n\t * the schema of the current window.\n\t */\n\tavailableFileSystems?: readonly string[];\n}\n\nexport const IDialogService = createDecorator<IDialogService>('dialogService');\n\nexport interface ICustomDialogOptions {\n\tbuttonDetails?: string[];\n\tmarkdownDetails?: ICustomDialogMarkdown[];\n\tclasses?: string[];\n\ticon?: Codicon;\n\tdisableCloseAction?: boolean;\n}\n\nexport interface ICustomDialogMarkdown {\n\tmarkdown: IMarkdownString,\n\tclasses?: string[]\n}\n\nexport interface IDialogOptions {\n\tcancelId?: number;\n\tdetail?: string;\n\tcheckbox?: ICheckbox;\n\tcustom?: boolean | ICustomDialogOptions;\n}\n\nexport interface IInput {\n\tplaceholder?: string;\n\ttype?: 'text' | 'password'\n\tvalue?: string;\n}\n\n/**\n * A handler to bring up modal dialogs.\n */\nexport interface IDialogHandler {\n\t/**\n\t * Ask the user for confirmation with a modal dialog.\n\t */\n\tconfirm(confirmation: IConfirmation): Promise<IConfirmationResult>;\n\n\t/**\n\t * Present a modal dialog to the user.\n\t *\n\t * @returns A promise with the selected choice index. If the user refused to choose,\n\t * then a promise with index of `cancelId` option is returned. If there is no such\n\t * option then promise with index `0` is returned.\n\t */\n\tshow(severity: Severity, message: string, buttons: string[], options?: IDialogOptions): Promise<IShowResult>;\n\n\t/**\n\t * Present a modal dialog to the user asking for input.\n\t *\n\t *  @returns A promise with the selected choice index. If the user refused to choose,\n\t * then a promise with index of `cancelId` option is returned. If there is no such\n\t * option then promise with index `0` is returned. In addition, the values for the\n\t * inputs are returned as well.\n\t */\n\tinput(severity: Severity, message: string, buttons: string[], inputs: IInput[], options?: IDialogOptions): Promise<IInputResult>;\n\n\t/**\n\t * Present the about dialog to the user.\n\t */\n\tabout(): Promise<void>;\n}\n\n/**\n * A service to bring up modal dialogs.\n *\n * Note: use the `INotificationService.prompt()` method for a non-modal way to ask\n * the user for input.\n */\nexport interface IDialogService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Ask the user for confirmation with a modal dialog.\n\t */\n\tconfirm(confirmation: IConfirmation): Promise<IConfirmationResult>;\n\n\t/**\n\t * Present a modal dialog to the user.\n\t *\n\t * @returns A promise with the selected choice index. If the user refused to choose,\n\t * then a promise with index of `cancelId` option is returned. If there is no such\n\t * option then promise with index `0` is returned.\n\t */\n\tshow(severity: Severity, message: string, buttons: string[], options?: IDialogOptions): Promise<IShowResult>;\n\n\t/**\n\t * Present a modal dialog to the user asking for input.\n\t *\n\t *  @returns A promise with the selected choice index. If the user refused to choose,\n\t * then a promise with index of `cancelId` option is returned. If there is no such\n\t * option then promise with index `0` is returned. In addition, the values for the\n\t * inputs are returned as well.\n\t */\n\tinput(severity: Severity, message: string, buttons: string[], inputs: IInput[], options?: IDialogOptions): Promise<IInputResult>;\n\n\t/**\n\t * Present the about dialog to the user.\n\t */\n\tabout(): Promise<void>;\n}\n\nexport const IFileDialogService = createDecorator<IFileDialogService>('fileDialogService');\n\n/**\n * A service to bring up file dialogs.\n */\nexport interface IFileDialogService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * The default path for a new file based on previously used files.\n\t * @param schemeFilter The scheme of the file path. If no filter given, the scheme of the current window is used.\n\t * Falls back to user home in the absence of enough information to find a better URI.\n\t */\n\tdefaultFilePath(schemeFilter?: string): Promise<URI>;\n\n\t/**\n\t * The default path for a new folder based on previously used folders.\n\t * @param schemeFilter The scheme of the folder path. If no filter given, the scheme of the current window is used.\n\t * Falls back to user home in the absence of enough information to find a better URI.\n\t */\n\tdefaultFolderPath(schemeFilter?: string): Promise<URI>;\n\n\t/**\n\t * The default path for a new workspace based on previously used workspaces.\n\t * @param schemeFilter The scheme of the workspace path. If no filter given, the scheme of the current window is used.\n\t * Falls back to user home in the absence of enough information to find a better URI.\n\t */\n\tdefaultWorkspacePath(schemeFilter?: string, filename?: string): Promise<URI>;\n\n\t/**\n\t * Shows a file-folder selection dialog and opens the selected entry.\n\t */\n\tpickFileFolderAndOpen(options: IPickAndOpenOptions): Promise<void>;\n\n\t/**\n\t * Shows a file selection dialog and opens the selected entry.\n\t */\n\tpickFileAndOpen(options: IPickAndOpenOptions): Promise<void>;\n\n\t/**\n\t * Shows a folder selection dialog and opens the selected entry.\n\t */\n\tpickFolderAndOpen(options: IPickAndOpenOptions): Promise<void>;\n\n\t/**\n\t * Shows a workspace selection dialog and opens the selected entry.\n\t */\n\tpickWorkspaceAndOpen(options: IPickAndOpenOptions): Promise<void>;\n\n\t/**\n\t * Shows a save file dialog and save the file at the chosen file URI.\n\t */\n\tpickFileToSave(defaultUri: URI, availableFileSystems?: string[]): Promise<URI | undefined>;\n\n\t/**\n\t * Shows a save file dialog and returns the chosen file URI.\n\t */\n\tshowSaveDialog(options: ISaveDialogOptions): Promise<URI | undefined>;\n\n\t/**\n\t * Shows a confirm dialog for saving 1-N files.\n\t */\n\tshowSaveConfirm(fileNamesOrResources: (string | URI)[]): Promise<ConfirmResult>;\n\n\t/**\n\t * Shows a open file dialog and returns the chosen file URI.\n\t */\n\tshowOpenDialog(options: IOpenDialogOptions): Promise<URI[] | undefined>;\n}\n\nexport const enum ConfirmResult {\n\tSAVE,\n\tDONT_SAVE,\n\tCANCEL\n}\n\nconst MAX_CONFIRM_FILES = 10;\nexport function getFileNamesMessage(fileNamesOrResources: readonly (string | URI)[]): string {\n\tconst message: string[] = [];\n\tmessage.push(...fileNamesOrResources.slice(0, MAX_CONFIRM_FILES).map(fileNameOrResource => typeof fileNameOrResource === 'string' ? fileNameOrResource : basename(fileNameOrResource)));\n\n\tif (fileNamesOrResources.length > MAX_CONFIRM_FILES) {\n\t\tif (fileNamesOrResources.length - MAX_CONFIRM_FILES === 1) {\n\t\t\tmessage.push(localize('moreFile', \"...1 additional file not shown\"));\n\t\t} else {\n\t\t\tmessage.push(localize('moreFiles', \"...{0} additional files not shown\", fileNamesOrResources.length - MAX_CONFIRM_FILES));\n\t\t}\n\t}\n\n\tmessage.push('');\n\treturn message.join('\\n');\n}\n\nexport interface INativeOpenDialogOptions {\n\tforceNewWindow?: boolean;\n\n\tdefaultPath?: string;\n\n\ttelemetryEventName?: string;\n\ttelemetryExtraData?: ITelemetryData;\n}\n"]}