{"version":3,"sources":["vs/platform/dialogs/electron-main/dialogMainService.ts"],"names":[],"mappings":"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","file":"dialogMainService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { MessageBoxOptions, MessageBoxReturnValue, SaveDialogOptions, SaveDialogReturnValue, OpenDialogOptions, OpenDialogReturnValue, dialog, FileFilter, BrowserWindow } from 'electron';\nimport { Queue } from 'vs/base/common/async';\nimport { IStateService } from 'vs/platform/state/node/state';\nimport { isMacintosh } from 'vs/base/common/platform';\nimport { dirname } from 'vs/base/common/path';\nimport { normalizeNFC } from 'vs/base/common/normalization';\nimport { exists } from 'vs/base/node/pfs';\nimport { INativeOpenDialogOptions } from 'vs/platform/dialogs/common/dialogs';\nimport { withNullAsUndefined } from 'vs/base/common/types';\nimport { localize } from 'vs/nls';\nimport { WORKSPACE_FILTER } from 'vs/platform/workspaces/common/workspaces';\nimport { mnemonicButtonLabel } from 'vs/base/common/labels';\nimport { Disposable, dispose, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { hash } from 'vs/base/common/hash';\n\nexport const IDialogMainService = createDecorator<IDialogMainService>('dialogMainService');\n\nexport interface IDialogMainService {\n\n\treadonly _serviceBrand: undefined;\n\n\tpickFileFolder(options: INativeOpenDialogOptions, window?: BrowserWindow): Promise<string[] | undefined>;\n\tpickFolder(options: INativeOpenDialogOptions, window?: BrowserWindow): Promise<string[] | undefined>;\n\tpickFile(options: INativeOpenDialogOptions, window?: BrowserWindow): Promise<string[] | undefined>;\n\tpickWorkspace(options: INativeOpenDialogOptions, window?: BrowserWindow): Promise<string[] | undefined>;\n\n\tshowMessageBox(options: MessageBoxOptions, window?: BrowserWindow): Promise<MessageBoxReturnValue>;\n\tshowSaveDialog(options: SaveDialogOptions, window?: BrowserWindow): Promise<SaveDialogReturnValue>;\n\tshowOpenDialog(options: OpenDialogOptions, window?: BrowserWindow): Promise<OpenDialogReturnValue>;\n}\n\ninterface IInternalNativeOpenDialogOptions extends INativeOpenDialogOptions {\n\tpickFolders?: boolean;\n\tpickFiles?: boolean;\n\n\ttitle: string;\n\tbuttonLabel?: string;\n\tfilters?: FileFilter[];\n}\n\nexport class DialogMainService implements IDialogMainService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate static readonly workingDirPickerStorageKey = 'pickerWorkingDir';\n\n\tprivate readonly windowFileDialogLocks = new Map<number, Set<number>>();\n\tprivate readonly windowDialogQueues = new Map<number, Queue<MessageBoxReturnValue | SaveDialogReturnValue | OpenDialogReturnValue>>();\n\tprivate readonly noWindowDialogueQueue = new Queue<MessageBoxReturnValue | SaveDialogReturnValue | OpenDialogReturnValue>();\n\n\tconstructor(\n\t\t@IStateService private readonly stateService: IStateService\n\t) {\n\t}\n\n\tpickFileFolder(options: INativeOpenDialogOptions, window?: BrowserWindow): Promise<string[] | undefined> {\n\t\treturn this.doPick({ ...options, pickFolders: true, pickFiles: true, title: localize('open', \"Open\") }, window);\n\t}\n\n\tpickFolder(options: INativeOpenDialogOptions, window?: BrowserWindow): Promise<string[] | undefined> {\n\t\treturn this.doPick({ ...options, pickFolders: true, title: localize('openFolder', \"Open Folder\") }, window);\n\t}\n\n\tpickFile(options: INativeOpenDialogOptions, window?: BrowserWindow): Promise<string[] | undefined> {\n\t\treturn this.doPick({ ...options, pickFiles: true, title: localize('openFile', \"Open File\") }, window);\n\t}\n\n\tpickWorkspace(options: INativeOpenDialogOptions, window?: BrowserWindow): Promise<string[] | undefined> {\n\t\tconst title = localize('openWorkspaceTitle', \"Open Workspace\");\n\t\tconst buttonLabel = mnemonicButtonLabel(localize({ key: 'openWorkspace', comment: ['&& denotes a mnemonic'] }, \"&&Open\"));\n\t\tconst filters = WORKSPACE_FILTER;\n\n\t\treturn this.doPick({ ...options, pickFiles: true, title, filters, buttonLabel }, window);\n\t}\n\n\tprivate async doPick(options: IInternalNativeOpenDialogOptions, window?: BrowserWindow): Promise<string[] | undefined> {\n\n\t\t// Ensure dialog options\n\t\tconst dialogOptions: OpenDialogOptions = {\n\t\t\ttitle: options.title,\n\t\t\tbuttonLabel: options.buttonLabel,\n\t\t\tfilters: options.filters\n\t\t};\n\n\t\t// Ensure defaultPath\n\t\tdialogOptions.defaultPath = options.defaultPath || this.stateService.getItem<string>(DialogMainService.workingDirPickerStorageKey);\n\n\n\t\t// Ensure properties\n\t\tif (typeof options.pickFiles === 'boolean' || typeof options.pickFolders === 'boolean') {\n\t\t\tdialogOptions.properties = undefined; // let it override based on the booleans\n\n\t\t\tif (options.pickFiles && options.pickFolders) {\n\t\t\t\tdialogOptions.properties = ['multiSelections', 'openDirectory', 'openFile', 'createDirectory'];\n\t\t\t}\n\t\t}\n\n\t\tif (!dialogOptions.properties) {\n\t\t\tdialogOptions.properties = ['multiSelections', options.pickFolders ? 'openDirectory' : 'openFile', 'createDirectory'];\n\t\t}\n\n\t\tif (isMacintosh) {\n\t\t\tdialogOptions.properties.push('treatPackageAsDirectory'); // always drill into .app files\n\t\t}\n\n\t\t// Show Dialog\n\t\tconst windowToUse = window || BrowserWindow.getFocusedWindow();\n\n\t\tconst result = await this.showOpenDialog(dialogOptions, withNullAsUndefined(windowToUse));\n\t\tif (result && result.filePaths && result.filePaths.length > 0) {\n\n\t\t\t// Remember path in storage for next time\n\t\t\tthis.stateService.setItem(DialogMainService.workingDirPickerStorageKey, dirname(result.filePaths[0]));\n\n\t\t\treturn result.filePaths;\n\t\t}\n\n\t\treturn;\n\t}\n\n\tprivate getWindowDialogQueue<T extends MessageBoxReturnValue | SaveDialogReturnValue | OpenDialogReturnValue>(window?: BrowserWindow): Queue<T> {\n\n\t\t// Queue message box requests per window so that one can show\n\t\t// after the other.\n\t\tif (window) {\n\t\t\tlet windowDialogQueue = this.windowDialogQueues.get(window.id);\n\t\t\tif (!windowDialogQueue) {\n\t\t\t\twindowDialogQueue = new Queue<MessageBoxReturnValue | SaveDialogReturnValue | OpenDialogReturnValue>();\n\t\t\t\tthis.windowDialogQueues.set(window.id, windowDialogQueue);\n\t\t\t}\n\n\t\t\treturn windowDialogQueue as unknown as Queue<T>;\n\t\t} else {\n\t\t\treturn this.noWindowDialogueQueue as unknown as Queue<T>;\n\t\t}\n\t}\n\n\tshowMessageBox(options: MessageBoxOptions, window?: BrowserWindow): Promise<MessageBoxReturnValue> {\n\t\treturn this.getWindowDialogQueue<MessageBoxReturnValue>(window).queue(async () => {\n\t\t\tif (window) {\n\t\t\t\treturn dialog.showMessageBox(window, options);\n\t\t\t}\n\n\t\t\treturn dialog.showMessageBox(options);\n\t\t});\n\t}\n\n\tasync showSaveDialog(options: SaveDialogOptions, window?: BrowserWindow): Promise<SaveDialogReturnValue> {\n\n\t\t// prevent duplicates of the same dialog queueing at the same time\n\t\tconst fileDialogLock = this.acquireFileDialogLock(options, window);\n\t\tif (!fileDialogLock) {\n\t\t\tthrow new Error('A file save dialog is already or will be showing for the window with the same configuration');\n\t\t}\n\n\t\ttry {\n\t\t\treturn await this.getWindowDialogQueue<SaveDialogReturnValue>(window).queue(async () => {\n\t\t\t\tlet result: SaveDialogReturnValue;\n\t\t\t\tif (window) {\n\t\t\t\t\tresult = await dialog.showSaveDialog(window, options);\n\t\t\t\t} else {\n\t\t\t\t\tresult = await dialog.showSaveDialog(options);\n\t\t\t\t}\n\n\t\t\t\tresult.filePath = this.normalizePath(result.filePath);\n\n\t\t\t\treturn result;\n\t\t\t});\n\t\t} finally {\n\t\t\tdispose(fileDialogLock);\n\t\t}\n\t}\n\n\tprivate normalizePath(path: string): string;\n\tprivate normalizePath(path: string | undefined): string | undefined;\n\tprivate normalizePath(path: string | undefined): string | undefined {\n\t\tif (path && isMacintosh) {\n\t\t\tpath = normalizeNFC(path); // macOS only: normalize paths to NFC form\n\t\t}\n\n\t\treturn path;\n\t}\n\n\tprivate normalizePaths(paths: string[]): string[] {\n\t\treturn paths.map(path => this.normalizePath(path));\n\t}\n\n\tasync showOpenDialog(options: OpenDialogOptions, window?: BrowserWindow): Promise<OpenDialogReturnValue> {\n\n\t\t// Ensure the path exists (if provided)\n\t\tif (options.defaultPath) {\n\t\t\tconst pathExists = await exists(options.defaultPath);\n\t\t\tif (!pathExists) {\n\t\t\t\toptions.defaultPath = undefined;\n\t\t\t}\n\t\t}\n\n\t\t// prevent duplicates of the same dialog queueing at the same time\n\t\tconst fileDialogLock = this.acquireFileDialogLock(options, window);\n\t\tif (!fileDialogLock) {\n\t\t\tthrow new Error('A file open dialog is already or will be showing for the window with the same configuration');\n\t\t}\n\n\t\ttry {\n\t\t\treturn await this.getWindowDialogQueue<OpenDialogReturnValue>(window).queue(async () => {\n\t\t\t\tlet result: OpenDialogReturnValue;\n\t\t\t\tif (window) {\n\t\t\t\t\tresult = await dialog.showOpenDialog(window, options);\n\t\t\t\t} else {\n\t\t\t\t\tresult = await dialog.showOpenDialog(options);\n\t\t\t\t}\n\n\t\t\t\tresult.filePaths = this.normalizePaths(result.filePaths);\n\n\t\t\t\treturn result;\n\t\t\t});\n\t\t} finally {\n\t\t\tdispose(fileDialogLock);\n\t\t}\n\t}\n\n\tprivate acquireFileDialogLock(options: SaveDialogOptions | OpenDialogOptions, window?: BrowserWindow): IDisposable | undefined {\n\n\t\t// if no window is provided, allow as many dialogs as\n\t\t// needed since we consider them not modal per window\n\t\tif (!window) {\n\t\t\treturn Disposable.None;\n\t\t}\n\n\t\t// if a window is provided, only allow a single dialog\n\t\t// at the same time because dialogs are modal and we\n\t\t// do not want to open one dialog after the other\n\t\t// (https://github.com/microsoft/vscode/issues/114432)\n\t\t// we figure this out by `hashing` the configuration\n\t\t// options for the dialog to prevent duplicates\n\n\t\tlet windowFileDialogLocks = this.windowFileDialogLocks.get(window.id);\n\t\tif (!windowFileDialogLocks) {\n\t\t\twindowFileDialogLocks = new Set();\n\t\t\tthis.windowFileDialogLocks.set(window.id, windowFileDialogLocks);\n\t\t}\n\n\t\tconst optionsHash = hash(options);\n\t\tif (windowFileDialogLocks.has(optionsHash)) {\n\t\t\treturn undefined; // prevent duplicates, return\n\t\t}\n\n\t\twindowFileDialogLocks.add(optionsHash);\n\n\t\treturn toDisposable(() => {\n\t\t\twindowFileDialogLocks?.delete(optionsHash);\n\n\t\t\t// if the window has no more dialog locks, delete it from the set of locks\n\t\t\tif (windowFileDialogLocks?.size === 0) {\n\t\t\t\tthis.windowFileDialogLocks.delete(window.id);\n\t\t\t}\n\t\t});\n\t}\n}\n"]}