{"version":3,"file":"driver.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/driver/common/driver.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAoChG,MAAM;IAEO,QAAA,EAAE,GAAG,eAAe,CAAC;IACrB,QAAA,OAAO,GAAG,CAAA,GAAA,+BAAe,CAAA,CAAU,UAAE,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\n\n// !! Do not remove the following START and END markers, they are parsed by the smoketest build\n\n//*START\nexport interface IElement {\n\ttagName: string;\n\tclassName: string;\n\ttextContent: string;\n\tattributes: { [name: string]: string; };\n\tchildren: IElement[];\n\ttop: number;\n\tleft: number;\n}\n\nexport interface IDriver {\n\treadonly _serviceBrand: undefined;\n\n\tgetWindowIds(): Promise<number[]>;\n\tcapturePage(windowId: number): Promise<string>;\n\treloadWindow(windowId: number): Promise<void>;\n\texitApplication(): Promise<void>;\n\tdispatchKeybinding(windowId: number, keybinding: string): Promise<void>;\n\tclick(windowId: number, selector: string, xoffset?: number | undefined, yoffset?: number | undefined): Promise<void>;\n\tdoubleClick(windowId: number, selector: string): Promise<void>;\n\tsetValue(windowId: number, selector: string, text: string): Promise<void>;\n\tgetTitle(windowId: number): Promise<string>;\n\tisActiveElement(windowId: number, selector: string): Promise<boolean>;\n\tgetElements(windowId: number, selector: string, recursive?: boolean): Promise<IElement[]>;\n\tgetElementXY(windowId: number, selector: string, xoffset?: number, yoffset?: number): Promise<{ x: number; y: number; }>;\n\ttypeInEditor(windowId: number, selector: string, text: string): Promise<void>;\n\tgetTerminalBuffer(windowId: number, selector: string): Promise<string[]>;\n\twriteInTerminal(windowId: number, selector: string, text: string): Promise<void>;\n}\n//*END\n\nexport const ID = 'driverService';\nexport const IDriver = createDecorator<IDriver>(ID);\n\nexport interface IWindowDriver {\n\tclick(selector: string, xoffset?: number | undefined, yoffset?: number | undefined): Promise<void>;\n\tdoubleClick(selector: string): Promise<void>;\n\tsetValue(selector: string, text: string): Promise<void>;\n\tgetTitle(): Promise<string>;\n\tisActiveElement(selector: string): Promise<boolean>;\n\tgetElements(selector: string, recursive: boolean): Promise<IElement[]>;\n\tgetElementXY(selector: string, xoffset?: number, yoffset?: number): Promise<{ x: number; y: number; }>;\n\ttypeInEditor(selector: string, text: string): Promise<void>;\n\tgetTerminalBuffer(selector: string): Promise<string[]>;\n\twriteInTerminal(selector: string, text: string): Promise<void>;\n}\n\nexport interface IDriverOptions {\n\tverbose: boolean;\n}\n\nexport interface IWindowDriverRegistry {\n\tregisterWindowDriver(windowId: number): Promise<IDriverOptions>;\n\treloadWindowDriver(windowId: number): Promise<void>;\n}\n"]}