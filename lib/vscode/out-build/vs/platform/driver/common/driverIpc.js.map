{"version":3,"file":"driverIpc.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/driver/common/driverIpc.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { IChannel, IServerChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { IDriverOptions, IElement, IWindowDriver, IWindowDriverRegistry } from 'vs/platform/driver/common/driver';\n\nexport class WindowDriverChannel implements IServerChannel {\n\n\tconstructor(private driver: IWindowDriver) { }\n\n\tlisten<T>(_: unknown, event: string): Event<T> {\n\t\tthrow new Error(`No event found: ${event}`);\n\t}\n\n\tcall(_: unknown, command: string, arg?: any): Promise<any> {\n\t\tswitch (command) {\n\t\t\tcase 'click': return this.driver.click(arg[0], arg[1], arg[2]);\n\t\t\tcase 'doubleClick': return this.driver.doubleClick(arg);\n\t\t\tcase 'setValue': return this.driver.setValue(arg[0], arg[1]);\n\t\t\tcase 'getTitle': return this.driver.getTitle();\n\t\t\tcase 'isActiveElement': return this.driver.isActiveElement(arg);\n\t\t\tcase 'getElements': return this.driver.getElements(arg[0], arg[1]);\n\t\t\tcase 'getElementXY': return this.driver.getElementXY(arg[0], arg[1], arg[2]);\n\t\t\tcase 'typeInEditor': return this.driver.typeInEditor(arg[0], arg[1]);\n\t\t\tcase 'getTerminalBuffer': return this.driver.getTerminalBuffer(arg);\n\t\t\tcase 'writeInTerminal': return this.driver.writeInTerminal(arg[0], arg[1]);\n\t\t}\n\n\t\tthrow new Error(`Call not found: ${command}`);\n\t}\n}\n\nexport class WindowDriverChannelClient implements IWindowDriver {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(private channel: IChannel) { }\n\n\tclick(selector: string, xoffset?: number, yoffset?: number): Promise<void> {\n\t\treturn this.channel.call('click', [selector, xoffset, yoffset]);\n\t}\n\n\tdoubleClick(selector: string): Promise<void> {\n\t\treturn this.channel.call('doubleClick', selector);\n\t}\n\n\tsetValue(selector: string, text: string): Promise<void> {\n\t\treturn this.channel.call('setValue', [selector, text]);\n\t}\n\n\tgetTitle(): Promise<string> {\n\t\treturn this.channel.call('getTitle');\n\t}\n\n\tisActiveElement(selector: string): Promise<boolean> {\n\t\treturn this.channel.call('isActiveElement', selector);\n\t}\n\n\tgetElements(selector: string, recursive: boolean): Promise<IElement[]> {\n\t\treturn this.channel.call('getElements', [selector, recursive]);\n\t}\n\n\tgetElementXY(selector: string, xoffset?: number, yoffset?: number): Promise<{ x: number, y: number }> {\n\t\treturn this.channel.call('getElementXY', [selector, xoffset, yoffset]);\n\t}\n\n\ttypeInEditor(selector: string, text: string): Promise<void> {\n\t\treturn this.channel.call('typeInEditor', [selector, text]);\n\t}\n\n\tgetTerminalBuffer(selector: string): Promise<string[]> {\n\t\treturn this.channel.call('getTerminalBuffer', selector);\n\t}\n\n\twriteInTerminal(selector: string, text: string): Promise<void> {\n\t\treturn this.channel.call('writeInTerminal', [selector, text]);\n\t}\n}\n\nexport class WindowDriverRegistryChannelClient implements IWindowDriverRegistry {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(private channel: IChannel) { }\n\n\tregisterWindowDriver(windowId: number): Promise<IDriverOptions> {\n\t\treturn this.channel.call('registerWindowDriver', windowId);\n\t}\n\n\treloadWindowDriver(windowId: number): Promise<void> {\n\t\treturn this.channel.call('reloadWindowDriver', windowId);\n\t}\n}\n"]}