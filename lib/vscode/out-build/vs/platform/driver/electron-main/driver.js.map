{"version":3,"file":"driver.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/driver/electron-main/driver.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAqBhG,SAAS,eAAe,CAAC,OAAgB;QACxC,OAAO,OAAO,iBAAgB,CAAC;IAChC,CAAC;IAED,IAAa,MAAM,GAAnB,MAAa,MAAM;QAQlB,YACS,YAAuB,EACvB,OAAuB,EACO,kBAAuC,EACrC,oBAA2C,EAC1C,qBAA6C;YAJ9E,iBAAY,GAAZ,YAAY,CAAW;YACvB,YAAO,GAAP,OAAO,CAAgB;YACO,uBAAkB,GAAlB,kBAAkB,CAAqB;YACrC,yBAAoB,GAApB,oBAAoB,CAAuB;YAC1C,0BAAqB,GAArB,qBAAqB,CAAwB;YAT/E,wBAAmB,GAAG,IAAI,GAAG,EAAU,CAAC;YACxC,uBAAkB,GAAG,IAAI,GAAG,EAAU,CAAC;YAC9B,yBAAoB,GAAG,IAAI,eAAO,EAAQ,CAAC;QAQxD,CAAC;QAEL,KAAK,CAAC,oBAAoB,CAAC,QAAgB;YAC1C,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YACvC,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YACzC,IAAI,CAAC,oBAAoB,CAAC,IAAI,EAAE,CAAC;YACjC,OAAO,IAAI,CAAC,OAAO,CAAC;QACrB,CAAC;QAED,KAAK,CAAC,kBAAkB,CAAC,QAAgB;YACxC,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACvC,CAAC;QAED,KAAK,CAAC,YAAY;YACjB,OAAO,IAAI,CAAC,kBAAkB,CAAC,UAAU,EAAE;iBACzC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;iBACd,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;QACtF,CAAC;QAED,KAAK,CAAC,WAAW,CAAC,QAAgB;YACjC,MAAM,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;YAElC,MAAM,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YAC/D,IAAI,CAAC,CAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,GAAG,CAAA,EAAE;gBACjB,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;aAClC;YACD,MAAM,WAAW,GAAG,MAAM,CAAC,GAAG,CAAC,WAAW,CAAC;YAC3C,MAAM,KAAK,GAAG,MAAM,WAAW,CAAC,WAAW,EAAE,CAAC;YAC9C,OAAO,KAAK,CAAC,KAAK,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACzC,CAAC;QAED,KAAK,CAAC,YAAY,CAAC,QAAgB;YAClC,MAAM,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;YAElC,MAAM,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YAC/D,IAAI,CAAC,MAAM,EAAE;gBACZ,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;aAClC;YACD,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YACtC,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAC1C,CAAC;QAED,KAAK,CAAC,eAAe;YACpB,OAAO,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACnD,CAAC;QAED,KAAK,CAAC,kBAAkB,CAAC,QAAgB,EAAE,UAAkB;YAC5D,MAAM,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;YAElC,MAAM,KAAK,GAAG,mCAAgB,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;YAE5D,KAAK,IAAI,IAAI,IAAI,KAAK,EAAE;gBACvB,MAAM,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;aAC/C;QACF,CAAC;QAEO,KAAK,CAAC,mBAAmB,CAAC,QAAgB,EAAE,UAA8C;YACjG,IAAI,UAAU,YAAY,0BAAe,EAAE;gBAC1C,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;aAClD;YAED,MAAM,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YAC/D,IAAI,CAAC,CAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,GAAG,CAAA,EAAE;gBACjB,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;aAClC;YACD,MAAM,WAAW,GAAG,MAAM,CAAC,GAAG,CAAC,WAAW,CAAC;YAC3C,MAAM,oBAAoB,GAAG,IAAI,2BAAgB,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,UAAU,CAAC,OAAO,CAAC,CAAC;YAClG,MAAM,kBAAkB,GAAG,IAAI,uDAA0B,CAAC,oBAAoB,CAAC,OAAO,EAAE,EAAE,aAAE,CAAC,CAAC;YAC9F,MAAM,OAAO,GAAG,kBAAkB,CAAC,sBAAsB,EAAE,CAAC;YAE5D,MAAM,SAAS,GAAa,EAAE,CAAC;YAE/B,IAAI,UAAU,CAAC,OAAO,EAAE;gBACvB,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aACvB;YAED,IAAI,UAAU,CAAC,OAAO,EAAE;gBACvB,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aACvB;YAED,IAAI,UAAU,CAAC,QAAQ,EAAE;gBACxB,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aACxB;YAED,IAAI,UAAU,CAAC,MAAM,EAAE;gBACtB,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aACtB;YAED,WAAW,CAAC,cAAc,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,SAAS,EAAS,CAAC,CAAC;YAE3E,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE;gBACzC,WAAW,CAAC,cAAc,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,SAAS,EAAS,CAAC,CAAC;aACxE;YAED,WAAW,CAAC,cAAc,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,SAAS,EAAS,CAAC,CAAC;YAEzE,MAAM,CAAA,GAAA,eAAO,CAAA,CAAC,GAAG,CAAC,CAAC;QACpB,CAAC;QAED,KAAK,CAAC,KAAK,CAAC,QAAgB,EAAE,QAAgB,EAAE,OAAgB,EAAE,OAAgB;YACjF,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;YAC1D,MAAM,YAAY,CAAC,KAAK,CAAC,QAAQ,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;QACtD,CAAC;QAED,KAAK,CAAC,WAAW,CAAC,QAAgB,EAAE,QAAgB;YACnD,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;YAC1D,MAAM,YAAY,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QAC1C,CAAC;QAED,KAAK,CAAC,QAAQ,CAAC,QAAgB,EAAE,QAAgB,EAAE,IAAY;YAC9D,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;YAC1D,MAAM,YAAY,CAAC,QAAQ,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QAC7C,CAAC;QAED,KAAK,CAAC,QAAQ,CAAC,QAAgB;YAC9B,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;YAC1D,OAAO,MAAM,YAAY,CAAC,QAAQ,EAAE,CAAC;QACtC,CAAC;QAED,KAAK,CAAC,eAAe,CAAC,QAAgB,EAAE,QAAgB;YACvD,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;YAC1D,OAAO,MAAM,YAAY,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;QACrD,CAAC;QAED,KAAK,CAAC,WAAW,CAAC,QAAgB,EAAE,QAAgB,EAAE,SAAkB;YACvE,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;YAC1D,OAAO,MAAM,YAAY,CAAC,WAAW,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;QAC5D,CAAC;QAED,KAAK,CAAC,YAAY,CAAC,QAAgB,EAAE,QAAgB,EAAE,OAAgB,EAAE,OAAgB;YACxF,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;YAC1D,OAAO,MAAM,YAAY,CAAC,YAAY,CAAC,QAAQ,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;QACpE,CAAC;QAED,KAAK,CAAC,YAAY,CAAC,QAAgB,EAAE,QAAgB,EAAE,IAAY;YAClE,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;YAC1D,MAAM,YAAY,CAAC,YAAY,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QACjD,CAAC;QAED,KAAK,CAAC,iBAAiB,CAAC,QAAgB,EAAE,QAAgB;YACzD,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;YAC1D,OAAO,MAAM,YAAY,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;QACvD,CAAC;QAED,KAAK,CAAC,eAAe,CAAC,QAAgB,EAAE,QAAgB,EAAE,IAAY;YACrE,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;YAC1D,MAAM,YAAY,CAAC,eAAe,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QACpD,CAAC;QAEO,KAAK,CAAC,eAAe,CAAC,QAAgB;YAC7C,MAAM,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;YAElC,MAAM,EAAE,GAAG,UAAU,QAAQ,EAAE,CAAC;YAChC,MAAM,MAAM,GAAG,IAAI,kBAAY,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,CAAC;YACnD,MAAM,mBAAmB,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YACjF,OAAO,IAAI,qCAAyB,CAAC,mBAAmB,CAAC,CAAC;QAC3D,CAAC;QAEO,KAAK,CAAC,YAAY,CAAC,QAAgB;YAC1C,OAAO,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;gBAC7C,MAAM,aAAK,CAAC,SAAS,CAAC,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;aACvD;QACF,CAAC;KACD,CAAA;IAjLY,MAAM;QAWhB,WAAA,6BAAmB,CAAA;QACnB,WAAA,4CAAqB,CAAA;QACrB,WAAA,8CAAsB,CAAA;OAbZ,MAAM,CAiLlB;IAjLY,wBAAM;IAmLZ,KAAK,UAAU,KAAK,CAC1B,YAAuB,EACvB,MAAc,EACd,sBAA+C,EAC/C,oBAA2C;QAE3C,MAAM,OAAO,GAAG,sBAAsB,CAAC,aAAa,CAAC;QACrD,MAAM,MAAM,GAAG,oBAAoB,CAAC,cAAc,CAAC,MAAM,EAAE,YAAY,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;QAEtF,MAAM,2BAA2B,GAAG,IAAI,oCAA2B,CAAC,MAAM,CAAC,CAAC;QAC5E,YAAY,CAAC,eAAe,CAAC,sBAAsB,EAAE,2BAA2B,CAAC,CAAC;QAElF,MAAM,MAAM,GAAG,MAAM,CAAA,GAAA,eAAQ,CAAA,CAAC,MAAM,CAAC,CAAC;QACtC,MAAM,OAAO,GAAG,IAAI,sBAAa,CAAC,MAAM,CAAC,CAAC;QAC1C,MAAM,CAAC,eAAe,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QAE1C,OAAO,CAAA,GAAA,8BAAkB,CAAA,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;IACjD,CAAC;IAjBD,sBAiBC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DriverChannel, WindowDriverRegistryChannel } from 'vs/platform/driver/node/driver';\nimport { WindowDriverChannelClient } from 'vs/platform/driver/common/driverIpc';\nimport { IWindowsMainService } from 'vs/platform/windows/electron-main/windows';\nimport { serve as serveNet } from 'vs/base/parts/ipc/node/ipc.net';\nimport { combinedDisposable, IDisposable } from 'vs/base/common/lifecycle';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IPCServer, StaticRouter } from 'vs/base/parts/ipc/common/ipc';\nimport { SimpleKeybinding, KeyCode } from 'vs/base/common/keyCodes';\nimport { USLayoutResolvedKeybinding } from 'vs/platform/keybinding/common/usLayoutResolvedKeybinding';\nimport { OS } from 'vs/base/common/platform';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { IEnvironmentMainService } from 'vs/platform/environment/electron-main/environmentMainService';\nimport { ScanCodeBinding } from 'vs/base/common/scanCode';\nimport { KeybindingParser } from 'vs/base/common/keybindingParser';\nimport { timeout } from 'vs/base/common/async';\nimport { IDriver, IDriverOptions, IElement, IWindowDriver, IWindowDriverRegistry } from 'vs/platform/driver/common/driver';\nimport { ILifecycleMainService } from 'vs/platform/lifecycle/electron-main/lifecycleMainService';\nimport { INativeHostMainService } from 'vs/platform/native/electron-main/nativeHostMainService';\n\nfunction isSilentKeyCode(keyCode: KeyCode) {\n\treturn keyCode < KeyCode.KEY_0;\n}\n\nexport class Driver implements IDriver, IWindowDriverRegistry {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate registeredWindowIds = new Set<number>();\n\tprivate reloadingWindowIds = new Set<number>();\n\tprivate readonly onDidReloadingChange = new Emitter<void>();\n\n\tconstructor(\n\t\tprivate windowServer: IPCServer,\n\t\tprivate options: IDriverOptions,\n\t\t@IWindowsMainService private readonly windowsMainService: IWindowsMainService,\n\t\t@ILifecycleMainService private readonly lifecycleMainService: ILifecycleMainService,\n\t\t@INativeHostMainService private readonly nativeHostMainService: INativeHostMainService\n\t) { }\n\n\tasync registerWindowDriver(windowId: number): Promise<IDriverOptions> {\n\t\tthis.registeredWindowIds.add(windowId);\n\t\tthis.reloadingWindowIds.delete(windowId);\n\t\tthis.onDidReloadingChange.fire();\n\t\treturn this.options;\n\t}\n\n\tasync reloadWindowDriver(windowId: number): Promise<void> {\n\t\tthis.reloadingWindowIds.add(windowId);\n\t}\n\n\tasync getWindowIds(): Promise<number[]> {\n\t\treturn this.windowsMainService.getWindows()\n\t\t\t.map(w => w.id)\n\t\t\t.filter(id => this.registeredWindowIds.has(id) && !this.reloadingWindowIds.has(id));\n\t}\n\n\tasync capturePage(windowId: number): Promise<string> {\n\t\tawait this.whenUnfrozen(windowId);\n\n\t\tconst window = this.windowsMainService.getWindowById(windowId);\n\t\tif (!window?.win) {\n\t\t\tthrow new Error('Invalid window');\n\t\t}\n\t\tconst webContents = window.win.webContents;\n\t\tconst image = await webContents.capturePage();\n\t\treturn image.toPNG().toString('base64');\n\t}\n\n\tasync reloadWindow(windowId: number): Promise<void> {\n\t\tawait this.whenUnfrozen(windowId);\n\n\t\tconst window = this.windowsMainService.getWindowById(windowId);\n\t\tif (!window) {\n\t\t\tthrow new Error('Invalid window');\n\t\t}\n\t\tthis.reloadingWindowIds.add(windowId);\n\t\tthis.lifecycleMainService.reload(window);\n\t}\n\n\tasync exitApplication(): Promise<void> {\n\t\treturn this.nativeHostMainService.quit(undefined);\n\t}\n\n\tasync dispatchKeybinding(windowId: number, keybinding: string): Promise<void> {\n\t\tawait this.whenUnfrozen(windowId);\n\n\t\tconst parts = KeybindingParser.parseUserBinding(keybinding);\n\n\t\tfor (let part of parts) {\n\t\t\tawait this._dispatchKeybinding(windowId, part);\n\t\t}\n\t}\n\n\tprivate async _dispatchKeybinding(windowId: number, keybinding: SimpleKeybinding | ScanCodeBinding): Promise<void> {\n\t\tif (keybinding instanceof ScanCodeBinding) {\n\t\t\tthrow new Error('ScanCodeBindings not supported');\n\t\t}\n\n\t\tconst window = this.windowsMainService.getWindowById(windowId);\n\t\tif (!window?.win) {\n\t\t\tthrow new Error('Invalid window');\n\t\t}\n\t\tconst webContents = window.win.webContents;\n\t\tconst noModifiedKeybinding = new SimpleKeybinding(false, false, false, false, keybinding.keyCode);\n\t\tconst resolvedKeybinding = new USLayoutResolvedKeybinding(noModifiedKeybinding.toChord(), OS);\n\t\tconst keyCode = resolvedKeybinding.getElectronAccelerator();\n\n\t\tconst modifiers: string[] = [];\n\n\t\tif (keybinding.ctrlKey) {\n\t\t\tmodifiers.push('ctrl');\n\t\t}\n\n\t\tif (keybinding.metaKey) {\n\t\t\tmodifiers.push('meta');\n\t\t}\n\n\t\tif (keybinding.shiftKey) {\n\t\t\tmodifiers.push('shift');\n\t\t}\n\n\t\tif (keybinding.altKey) {\n\t\t\tmodifiers.push('alt');\n\t\t}\n\n\t\twebContents.sendInputEvent({ type: 'keyDown', keyCode, modifiers } as any);\n\n\t\tif (!isSilentKeyCode(keybinding.keyCode)) {\n\t\t\twebContents.sendInputEvent({ type: 'char', keyCode, modifiers } as any);\n\t\t}\n\n\t\twebContents.sendInputEvent({ type: 'keyUp', keyCode, modifiers } as any);\n\n\t\tawait timeout(100);\n\t}\n\n\tasync click(windowId: number, selector: string, xoffset?: number, yoffset?: number): Promise<void> {\n\t\tconst windowDriver = await this.getWindowDriver(windowId);\n\t\tawait windowDriver.click(selector, xoffset, yoffset);\n\t}\n\n\tasync doubleClick(windowId: number, selector: string): Promise<void> {\n\t\tconst windowDriver = await this.getWindowDriver(windowId);\n\t\tawait windowDriver.doubleClick(selector);\n\t}\n\n\tasync setValue(windowId: number, selector: string, text: string): Promise<void> {\n\t\tconst windowDriver = await this.getWindowDriver(windowId);\n\t\tawait windowDriver.setValue(selector, text);\n\t}\n\n\tasync getTitle(windowId: number): Promise<string> {\n\t\tconst windowDriver = await this.getWindowDriver(windowId);\n\t\treturn await windowDriver.getTitle();\n\t}\n\n\tasync isActiveElement(windowId: number, selector: string): Promise<boolean> {\n\t\tconst windowDriver = await this.getWindowDriver(windowId);\n\t\treturn await windowDriver.isActiveElement(selector);\n\t}\n\n\tasync getElements(windowId: number, selector: string, recursive: boolean): Promise<IElement[]> {\n\t\tconst windowDriver = await this.getWindowDriver(windowId);\n\t\treturn await windowDriver.getElements(selector, recursive);\n\t}\n\n\tasync getElementXY(windowId: number, selector: string, xoffset?: number, yoffset?: number): Promise<{ x: number; y: number; }> {\n\t\tconst windowDriver = await this.getWindowDriver(windowId);\n\t\treturn await windowDriver.getElementXY(selector, xoffset, yoffset);\n\t}\n\n\tasync typeInEditor(windowId: number, selector: string, text: string): Promise<void> {\n\t\tconst windowDriver = await this.getWindowDriver(windowId);\n\t\tawait windowDriver.typeInEditor(selector, text);\n\t}\n\n\tasync getTerminalBuffer(windowId: number, selector: string): Promise<string[]> {\n\t\tconst windowDriver = await this.getWindowDriver(windowId);\n\t\treturn await windowDriver.getTerminalBuffer(selector);\n\t}\n\n\tasync writeInTerminal(windowId: number, selector: string, text: string): Promise<void> {\n\t\tconst windowDriver = await this.getWindowDriver(windowId);\n\t\tawait windowDriver.writeInTerminal(selector, text);\n\t}\n\n\tprivate async getWindowDriver(windowId: number): Promise<IWindowDriver> {\n\t\tawait this.whenUnfrozen(windowId);\n\n\t\tconst id = `window:${windowId}`;\n\t\tconst router = new StaticRouter(ctx => ctx === id);\n\t\tconst windowDriverChannel = this.windowServer.getChannel('windowDriver', router);\n\t\treturn new WindowDriverChannelClient(windowDriverChannel);\n\t}\n\n\tprivate async whenUnfrozen(windowId: number): Promise<void> {\n\t\twhile (this.reloadingWindowIds.has(windowId)) {\n\t\t\tawait Event.toPromise(this.onDidReloadingChange.event);\n\t\t}\n\t}\n}\n\nexport async function serve(\n\twindowServer: IPCServer,\n\thandle: string,\n\tenvironmentMainService: IEnvironmentMainService,\n\tinstantiationService: IInstantiationService\n): Promise<IDisposable> {\n\tconst verbose = environmentMainService.driverVerbose;\n\tconst driver = instantiationService.createInstance(Driver, windowServer, { verbose });\n\n\tconst windowDriverRegistryChannel = new WindowDriverRegistryChannel(driver);\n\twindowServer.registerChannel('windowDriverRegistry', windowDriverRegistryChannel);\n\n\tconst server = await serveNet(handle);\n\tconst channel = new DriverChannel(driver);\n\tserver.registerChannel('driver', channel);\n\n\treturn combinedDisposable(server, windowServer);\n}\n"]}