{"version":3,"file":"driver.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/driver/node/driver.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Client } from 'vs/base/parts/ipc/common/ipc.net';\nimport { connect as connectNet } from 'vs/base/parts/ipc/node/ipc.net';\nimport { IChannel, IServerChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { Event } from 'vs/base/common/event';\nimport { IDriver, IElement, IWindowDriverRegistry } from 'vs/platform/driver/common/driver';\n\nexport class DriverChannel implements IServerChannel {\n\n\tconstructor(private driver: IDriver) { }\n\n\tlisten<T>(_: unknown, event: string): Event<T> {\n\t\tthrow new Error('No event found');\n\t}\n\n\tcall(_: unknown, command: string, arg?: any): Promise<any> {\n\t\tswitch (command) {\n\t\t\tcase 'getWindowIds': return this.driver.getWindowIds();\n\t\t\tcase 'capturePage': return this.driver.capturePage(arg);\n\t\t\tcase 'reloadWindow': return this.driver.reloadWindow(arg);\n\t\t\tcase 'exitApplication': return this.driver.exitApplication();\n\t\t\tcase 'dispatchKeybinding': return this.driver.dispatchKeybinding(arg[0], arg[1]);\n\t\t\tcase 'click': return this.driver.click(arg[0], arg[1], arg[2], arg[3]);\n\t\t\tcase 'doubleClick': return this.driver.doubleClick(arg[0], arg[1]);\n\t\t\tcase 'setValue': return this.driver.setValue(arg[0], arg[1], arg[2]);\n\t\t\tcase 'getTitle': return this.driver.getTitle(arg[0]);\n\t\t\tcase 'isActiveElement': return this.driver.isActiveElement(arg[0], arg[1]);\n\t\t\tcase 'getElements': return this.driver.getElements(arg[0], arg[1], arg[2]);\n\t\t\tcase 'getElementXY': return this.driver.getElementXY(arg[0], arg[1], arg[2]);\n\t\t\tcase 'typeInEditor': return this.driver.typeInEditor(arg[0], arg[1], arg[2]);\n\t\t\tcase 'getTerminalBuffer': return this.driver.getTerminalBuffer(arg[0], arg[1]);\n\t\t\tcase 'writeInTerminal': return this.driver.writeInTerminal(arg[0], arg[1], arg[2]);\n\t\t}\n\n\t\tthrow new Error(`Call not found: ${command}`);\n\t}\n}\n\nexport class DriverChannelClient implements IDriver {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(private channel: IChannel) { }\n\n\tgetWindowIds(): Promise<number[]> {\n\t\treturn this.channel.call('getWindowIds');\n\t}\n\n\tcapturePage(windowId: number): Promise<string> {\n\t\treturn this.channel.call('capturePage', windowId);\n\t}\n\n\treloadWindow(windowId: number): Promise<void> {\n\t\treturn this.channel.call('reloadWindow', windowId);\n\t}\n\n\texitApplication(): Promise<void> {\n\t\treturn this.channel.call('exitApplication');\n\t}\n\n\tdispatchKeybinding(windowId: number, keybinding: string): Promise<void> {\n\t\treturn this.channel.call('dispatchKeybinding', [windowId, keybinding]);\n\t}\n\n\tclick(windowId: number, selector: string, xoffset: number | undefined, yoffset: number | undefined): Promise<void> {\n\t\treturn this.channel.call('click', [windowId, selector, xoffset, yoffset]);\n\t}\n\n\tdoubleClick(windowId: number, selector: string): Promise<void> {\n\t\treturn this.channel.call('doubleClick', [windowId, selector]);\n\t}\n\n\tsetValue(windowId: number, selector: string, text: string): Promise<void> {\n\t\treturn this.channel.call('setValue', [windowId, selector, text]);\n\t}\n\n\tgetTitle(windowId: number): Promise<string> {\n\t\treturn this.channel.call('getTitle', [windowId]);\n\t}\n\n\tisActiveElement(windowId: number, selector: string): Promise<boolean> {\n\t\treturn this.channel.call('isActiveElement', [windowId, selector]);\n\t}\n\n\tgetElements(windowId: number, selector: string, recursive: boolean): Promise<IElement[]> {\n\t\treturn this.channel.call('getElements', [windowId, selector, recursive]);\n\t}\n\n\tgetElementXY(windowId: number, selector: string, xoffset: number | undefined, yoffset: number | undefined): Promise<{ x: number, y: number }> {\n\t\treturn this.channel.call('getElementXY', [windowId, selector, xoffset, yoffset]);\n\t}\n\n\ttypeInEditor(windowId: number, selector: string, text: string): Promise<void> {\n\t\treturn this.channel.call('typeInEditor', [windowId, selector, text]);\n\t}\n\n\tgetTerminalBuffer(windowId: number, selector: string): Promise<string[]> {\n\t\treturn this.channel.call('getTerminalBuffer', [windowId, selector]);\n\t}\n\n\twriteInTerminal(windowId: number, selector: string, text: string): Promise<void> {\n\t\treturn this.channel.call('writeInTerminal', [windowId, selector, text]);\n\t}\n}\n\nexport class WindowDriverRegistryChannel implements IServerChannel {\n\n\tconstructor(private registry: IWindowDriverRegistry) { }\n\n\tlisten<T>(_: unknown, event: string): Event<T> {\n\t\tthrow new Error(`Event not found: ${event}`);\n\t}\n\n\tcall(_: unknown, command: string, arg?: any): Promise<any> {\n\t\tswitch (command) {\n\t\t\tcase 'registerWindowDriver': return this.registry.registerWindowDriver(arg);\n\t\t\tcase 'reloadWindowDriver': return this.registry.reloadWindowDriver(arg);\n\t\t}\n\n\t\tthrow new Error(`Call not found: ${command}`);\n\t}\n}\n\nexport async function connect(handle: string): Promise<{ client: Client, driver: IDriver }> {\n\tconst client = await connectNet(handle, 'driverClient');\n\tconst channel = client.getChannel('driver');\n\tconst driver = new DriverChannelClient(channel);\n\treturn { client, driver };\n}\n"]}