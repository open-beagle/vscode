{"version":3,"file":"driver.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/driver/electron-sandbox/driver.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAUhG,IAAM,YAAY,GAAlB,MAAM,YAAa,SAAQ,6BAAgB;QAE1C,YACsC,iBAAqC;YAE1E,KAAK,EAAE,CAAC;YAF6B,sBAAiB,GAAjB,iBAAiB,CAAoB;QAG3E,CAAC;QAED,KAAK,CAAC,QAAgB,EAAE,OAAgB,EAAE,OAAgB;YACzD,MAAM,MAAM,GAAG,OAAO,OAAO,KAAK,QAAQ,IAAI,OAAO,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;YACnH,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;QACzC,CAAC;QAED,WAAW,CAAC,QAAgB;YAC3B,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;QACjC,CAAC;QAEO,KAAK,CAAC,MAAM,CAAC,QAAgB,EAAE,UAAkB,EAAE,MAAiC;YAC3F,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;YAE5D,MAAM,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,UAAU,EAAS,CAAC,CAAC;YAC5G,MAAM,CAAA,GAAA,eAAO,CAAA,CAAC,EAAE,CAAC,CAAC;YAElB,MAAM,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,UAAU,EAAS,CAAC,CAAC;YAC1G,MAAM,CAAA,GAAA,eAAO,CAAA,CAAC,GAAG,CAAC,CAAC;QACpB,CAAC;QAED,KAAK,CAAC,YAAY;YACjB,MAAM,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC;QAC/D,CAAC;KACD,CAAA;IA9BK,YAAY;QAGf,WAAA,2BAAkB,CAAA;OAHf,YAAY,CA8BjB;IAEM,KAAK,UAAU,oBAAoB,CAAC,QAA0B,EAAE,QAAgB;QACtF,MAAM,oBAAoB,GAAG,QAAQ,CAAC,GAAG,CAAC,qCAAqB,CAAC,CAAC;QACjE,MAAM,kBAAkB,GAAG,QAAQ,CAAC,GAAG,CAAC,8BAAmB,CAAC,CAAC;QAE7D,MAAM,YAAY,GAAG,oBAAoB,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;QACvE,MAAM,mBAAmB,GAAG,IAAI,+BAAmB,CAAC,YAAY,CAAC,CAAC;QAClE,kBAAkB,CAAC,eAAe,CAAC,cAAc,EAAE,mBAAmB,CAAC,CAAC;QAExE,MAAM,2BAA2B,GAAG,kBAAkB,CAAC,UAAU,CAAC,sBAAsB,CAAC,CAAC;QAC1F,MAAM,oBAAoB,GAAG,IAAI,6CAAiC,CAAC,2BAA2B,CAAC,CAAC;QAEhG,MAAM,oBAAoB,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;QAC1D,6EAA6E;QAE7E,yBAAyB;QACzB,gCAAgC;QAChC,IAAI;QAEJ,OAAO,CAAA,GAAA,wBAAY,CAAA,CAAC,GAAG,EAAE,CAAC,oBAAoB,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC9E,CAAC;IAnBD,oDAmBC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { WindowDriverChannel, WindowDriverRegistryChannelClient } from 'vs/platform/driver/common/driverIpc';\nimport { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { IMainProcessService } from 'vs/platform/ipc/electron-sandbox/services';\nimport { timeout } from 'vs/base/common/async';\nimport { BaseWindowDriver } from 'vs/platform/driver/browser/baseDriver';\nimport { INativeHostService } from 'vs/platform/native/electron-sandbox/native';\n\nclass WindowDriver extends BaseWindowDriver {\n\n\tconstructor(\n\t\t@INativeHostService private readonly nativeHostService: INativeHostService\n\t) {\n\t\tsuper();\n\t}\n\n\tclick(selector: string, xoffset?: number, yoffset?: number): Promise<void> {\n\t\tconst offset = typeof xoffset === 'number' && typeof yoffset === 'number' ? { x: xoffset, y: yoffset } : undefined;\n\t\treturn this._click(selector, 1, offset);\n\t}\n\n\tdoubleClick(selector: string): Promise<void> {\n\t\treturn this._click(selector, 2);\n\t}\n\n\tprivate async _click(selector: string, clickCount: number, offset?: { x: number, y: number }): Promise<void> {\n\t\tconst { x, y } = await this._getElementXY(selector, offset);\n\n\t\tawait this.nativeHostService.sendInputEvent({ type: 'mouseDown', x, y, button: 'left', clickCount } as any);\n\t\tawait timeout(10);\n\n\t\tawait this.nativeHostService.sendInputEvent({ type: 'mouseUp', x, y, button: 'left', clickCount } as any);\n\t\tawait timeout(100);\n\t}\n\n\tasync openDevTools(): Promise<void> {\n\t\tawait this.nativeHostService.openDevTools({ mode: 'detach' });\n\t}\n}\n\nexport async function registerWindowDriver(accessor: ServicesAccessor, windowId: number): Promise<IDisposable> {\n\tconst instantiationService = accessor.get(IInstantiationService);\n\tconst mainProcessService = accessor.get(IMainProcessService);\n\n\tconst windowDriver = instantiationService.createInstance(WindowDriver);\n\tconst windowDriverChannel = new WindowDriverChannel(windowDriver);\n\tmainProcessService.registerChannel('windowDriver', windowDriverChannel);\n\n\tconst windowDriverRegistryChannel = mainProcessService.getChannel('windowDriverRegistry');\n\tconst windowDriverRegistry = new WindowDriverRegistryChannelClient(windowDriverRegistryChannel);\n\n\tawait windowDriverRegistry.registerWindowDriver(windowId);\n\t// const options = await windowDriverRegistry.registerWindowDriver(windowId);\n\n\t// if (options.verbose) {\n\t// \twindowDriver.openDevTools();\n\t// }\n\n\treturn toDisposable(() => windowDriverRegistry.reloadWindowDriver(windowId));\n}\n"]}