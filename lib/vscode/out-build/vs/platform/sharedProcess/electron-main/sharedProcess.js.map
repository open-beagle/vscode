{"version":3,"file":"sharedProcess.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/sharedProcess/electron-main/sharedProcess.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport product from 'vs/platform/product/common/product';\nimport { BrowserWindow, ipcMain, Event as ElectronEvent, MessagePortMain, IpcMainEvent, RenderProcessGoneDetails } from 'electron';\nimport { IEnvironmentMainService } from 'vs/platform/environment/electron-main/environmentMainService';\nimport { Barrier } from 'vs/base/common/async';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { ILifecycleMainService } from 'vs/platform/lifecycle/electron-main/lifecycleMainService';\nimport { IThemeMainService } from 'vs/platform/theme/electron-main/themeMainService';\nimport { FileAccess } from 'vs/base/common/network';\nimport { browserCodeLoadingCacheStrategy, IProcessEnvironment } from 'vs/base/common/platform';\nimport { ISharedProcess, ISharedProcessConfiguration } from 'vs/platform/sharedProcess/node/sharedProcess';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { connect as connectMessagePort } from 'vs/base/parts/ipc/electron-main/ipc.mp';\nimport { assertIsDefined } from 'vs/base/common/types';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { WindowError } from 'vs/platform/windows/electron-main/windows';\nimport { resolveShellEnv } from 'vs/platform/environment/node/shellEnv';\nimport { IProtocolMainService } from 'vs/platform/protocol/electron-main/protocol';\n\nexport class SharedProcess extends Disposable implements ISharedProcess {\n\n\tprivate readonly firstWindowConnectionBarrier = new Barrier();\n\n\tprivate window: BrowserWindow | undefined = undefined;\n\tprivate windowCloseListener: ((event: ElectronEvent) => void) | undefined = undefined;\n\n\tprivate readonly _onDidError = this._register(new Emitter<{ type: WindowError, details: string | RenderProcessGoneDetails }>());\n\treadonly onDidError = Event.buffer(this._onDidError.event); // buffer until we have a listener!\n\n\tconstructor(\n\t\tprivate readonly machineId: string,\n\t\tprivate userEnv: IProcessEnvironment,\n\t\t@IEnvironmentMainService private readonly environmentMainService: IEnvironmentMainService,\n\t\t@ILifecycleMainService private readonly lifecycleMainService: ILifecycleMainService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IThemeMainService private readonly themeMainService: IThemeMainService,\n\t\t@IProtocolMainService private readonly protocolMainService: IProtocolMainService\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Lifecycle\n\t\tthis._register(this.lifecycleMainService.onWillShutdown(() => this.onWillShutdown()));\n\n\t\t// Shared process connections from workbench windows\n\t\tipcMain.on('vscode:createSharedProcessMessageChannel', async (e, nonce: string) => this.onWindowConnection(e, nonce));\n\t}\n\n\tprivate async onWindowConnection(e: IpcMainEvent, nonce: string): Promise<void> {\n\t\tthis.logService.trace('SharedProcess: on vscode:createSharedProcessMessageChannel');\n\n\t\t// release barrier if this is the first window connection\n\t\tif (!this.firstWindowConnectionBarrier.isOpen()) {\n\t\t\tthis.firstWindowConnectionBarrier.open();\n\t\t}\n\n\t\t// await the shared process to be overall ready\n\t\t// we do not just wait for IPC ready because the\n\t\t// workbench window will communicate directly\n\t\tawait this.whenReady();\n\n\t\t// connect to the shared process window\n\t\tconst port = await this.connect();\n\n\t\t// Check back if the requesting window meanwhile closed\n\t\t// Since shared process is delayed on startup there is\n\t\t// a chance that the window close before the shared process\n\t\t// was ready for a connection.\n\t\tif (e.sender.isDestroyed()) {\n\t\t\treturn port.close();\n\t\t}\n\n\t\t// send the port back to the requesting window\n\t\te.sender.postMessage('vscode:createSharedProcessMessageChannelResult', nonce, [port]);\n\t}\n\n\tprivate onWillShutdown(): void {\n\t\tconst window = this.window;\n\t\tif (!window) {\n\t\t\treturn; // possibly too early before created\n\t\t}\n\n\t\t// Signal exit to shared process when shutting down\n\t\tif (!window.isDestroyed() && !window.webContents.isDestroyed()) {\n\t\t\twindow.webContents.send('vscode:electron-main->shared-process=exit');\n\t\t}\n\n\t\t// Shut the shared process down when we are quitting\n\t\t//\n\t\t// Note: because we veto the window close, we must first remove our veto.\n\t\t// Otherwise the application would never quit because the shared process\n\t\t// window is refusing to close!\n\t\t//\n\t\tif (this.windowCloseListener) {\n\t\t\twindow.removeListener('close', this.windowCloseListener);\n\t\t\tthis.windowCloseListener = undefined;\n\t\t}\n\n\t\t// Electron seems to crash on Windows without this setTimeout :|\n\t\tsetTimeout(() => {\n\t\t\ttry {\n\t\t\t\twindow.close();\n\t\t\t} catch (err) {\n\t\t\t\t// ignore, as electron is already shutting down\n\t\t\t}\n\n\t\t\tthis.window = undefined;\n\t\t}, 0);\n\t}\n\n\tprivate _whenReady: Promise<void> | undefined = undefined;\n\twhenReady(): Promise<void> {\n\t\tif (!this._whenReady) {\n\t\t\t// Overall signal that the shared process window was loaded and\n\t\t\t// all services within have been created.\n\t\t\tthis._whenReady = new Promise<void>(resolve => ipcMain.once('vscode:shared-process->electron-main=init-done', () => {\n\t\t\t\tthis.logService.trace('SharedProcess: Overall ready');\n\n\t\t\t\tresolve();\n\t\t\t}));\n\t\t}\n\n\t\treturn this._whenReady;\n\t}\n\n\tprivate _whenIpcReady: Promise<void> | undefined = undefined;\n\tprivate get whenIpcReady() {\n\t\tif (!this._whenIpcReady) {\n\t\t\tthis._whenIpcReady = (async () => {\n\n\t\t\t\t// Always wait for first window asking for connection\n\t\t\t\tawait this.firstWindowConnectionBarrier.wait();\n\n\t\t\t\t// Resolve shell environment\n\t\t\t\tthis.userEnv = { ...this.userEnv, ...(await resolveShellEnv(this.logService, this.environmentMainService.args, process.env)) };\n\n\t\t\t\t// Create window for shared process\n\t\t\t\tthis.createWindow();\n\n\t\t\t\t// Listeners\n\t\t\t\tthis.registerWindowListeners();\n\n\t\t\t\t// Wait for window indicating that IPC connections are accepted\n\t\t\t\tawait new Promise<void>(resolve => ipcMain.once('vscode:shared-process->electron-main=ipc-ready', () => {\n\t\t\t\t\tthis.logService.trace('SharedProcess: IPC ready');\n\n\t\t\t\t\tresolve();\n\t\t\t\t}));\n\t\t\t})();\n\t\t}\n\n\t\treturn this._whenIpcReady;\n\t}\n\n\tprivate createWindow(): void {\n\t\tconst configObjectUrl = this._register(this.protocolMainService.createIPCObjectUrl<ISharedProcessConfiguration>());\n\n\t\t// shared process is a hidden window by default\n\t\tthis.window = new BrowserWindow({\n\t\t\tshow: false,\n\t\t\tbackgroundColor: this.themeMainService.getBackgroundColor(),\n\t\t\twebPreferences: {\n\t\t\t\tpreload: FileAccess.asFileUri('vs/base/parts/sandbox/electron-browser/preload.js', require).fsPath,\n\t\t\t\tadditionalArguments: [`--vscode-window-config=${configObjectUrl.resource.toString()}`],\n\t\t\t\tv8CacheOptions: browserCodeLoadingCacheStrategy,\n\t\t\t\tnodeIntegration: true,\n\t\t\t\tcontextIsolation: false,\n\t\t\t\tenableWebSQL: false,\n\t\t\t\tenableRemoteModule: false,\n\t\t\t\tspellcheck: false,\n\t\t\t\tnativeWindowOpen: true,\n\t\t\t\timages: false,\n\t\t\t\twebgl: false,\n\t\t\t\tdisableBlinkFeatures: 'Auxclick' // do NOT change, allows us to identify this window as shared-process in the process explorer\n\t\t\t}\n\t\t});\n\n\t\t// Store into config object URL\n\t\tconfigObjectUrl.update({\n\t\t\tmachineId: this.machineId,\n\t\t\twindowId: this.window.id,\n\t\t\tappRoot: this.environmentMainService.appRoot,\n\t\t\tnodeCachedDataDir: this.environmentMainService.nodeCachedDataDir,\n\t\t\tbackupWorkspacesPath: this.environmentMainService.backupWorkspacesPath,\n\t\t\tuserEnv: this.userEnv,\n\t\t\targs: this.environmentMainService.args,\n\t\t\tlogLevel: this.logService.getLevel(),\n\t\t\tproduct\n\t\t});\n\n\t\t// Load with config\n\t\tthis.window.loadURL(FileAccess.asBrowserUri('vs/code/electron-browser/sharedProcess/sharedProcess.html', require).toString(true));\n\t}\n\n\tprivate registerWindowListeners(): void {\n\t\tif (!this.window) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Prevent the window from closing\n\t\tthis.windowCloseListener = (e: ElectronEvent) => {\n\t\t\tthis.logService.trace('SharedProcess#close prevented');\n\n\t\t\t// We never allow to close the shared process unless we get explicitly disposed()\n\t\t\te.preventDefault();\n\n\t\t\t// Still hide the window though if visible\n\t\t\tif (this.window?.isVisible()) {\n\t\t\t\tthis.window.hide();\n\t\t\t}\n\t\t};\n\n\t\tthis.window.on('close', this.windowCloseListener);\n\n\t\t// Crashes & Unresponsive & Failed to load\n\t\t// We use `onUnexpectedError` explicitly because the error handler\n\t\t// will send the error to the active window to log in devtools too\n\t\tthis.window.webContents.on('render-process-gone', (event, details) => this._onDidError.fire({ type: WindowError.CRASHED, details }));\n\t\tthis.window.on('unresponsive', () => this._onDidError.fire({ type: WindowError.UNRESPONSIVE, details: 'SharedProcess: detected unresponsive window' }));\n\t\tthis.window.webContents.on('did-fail-load', (event, errorCode, errorDescription) => this._onDidError.fire({ type: WindowError.LOAD, details: `SharedProcess: failed to load: ${errorDescription}` }));\n\t}\n\n\tasync connect(): Promise<MessagePortMain> {\n\n\t\t// Wait for shared process being ready to accept connection\n\t\tawait this.whenIpcReady;\n\n\t\t// Connect and return message port\n\t\tconst window = assertIsDefined(this.window);\n\t\treturn connectMessagePort(window);\n\t}\n\n\tasync toggle(): Promise<void> {\n\n\t\t// wait for window to be created\n\t\tawait this.whenIpcReady;\n\n\t\tif (!this.window) {\n\t\t\treturn; // possibly disposed already\n\t\t}\n\n\t\tif (this.window.isVisible()) {\n\t\t\tthis.window.webContents.closeDevTools();\n\t\t\tthis.window.hide();\n\t\t} else {\n\t\t\tthis.window.show();\n\t\t\tthis.window.webContents.openDevTools();\n\t\t}\n\t}\n\n\tisVisible(): boolean {\n\t\treturn this.window?.isVisible() ?? false;\n\t}\n}\n"]}