{"version":3,"file":"configuration.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/configuration/common/configuration.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAYnF,QAAA,qBAAqB,GAAG,CAAA,GAAA,+BAAe,CAAA,CAAwB,sBAAsB,CAAC,CAAC;IAEpG,SAAgB,wBAAwB,CAAC,KAAU;QAClD,OAAO,KAAK;eACR,OAAO,KAAK,KAAK,QAAQ;eACzB,CAAC,CAAC,KAAK,CAAC,kBAAkB,IAAI,OAAO,KAAK,CAAC,kBAAkB,KAAK,QAAQ,CAAC;eAC3E,CAAC,CAAC,KAAK,CAAC,QAAQ,IAAI,KAAK,CAAC,QAAQ,YAAY,SAAG,CAAC,CAAC;IACxD,CAAC;IALD,4DAKC;IAOD,IAAkB,mBAQjB;IARD,WAAkB,mBAAmB;QACpC,6DAAQ,CAAA;QACR,yEAAU,CAAA;QACV,2EAAW,CAAA;QACX,uEAAS,CAAA;QACT,qFAAgB,CAAA;QAChB,mEAAO,CAAA;QACP,iEAAM,CAAA;IACP,CAAC,EARiB,mBAAmB,GAAnB,2BAAmB,KAAnB,2BAAmB,QAQpC;IACD,SAAgB,2BAA2B,CAAC,mBAAwC;QACnF,QAAQ,mBAAmB,EAAE;YAC5B,iBAA6B,CAAC,CAAC,OAAO,MAAM,CAAC;YAC7C,uBAAmC,CAAC,CAAC,OAAO,YAAY,CAAC;YACzD,wBAAoC,CAAC,CAAC,OAAO,aAAa,CAAC;YAC3D,sBAAkC,CAAC,CAAC,OAAO,WAAW,CAAC;YACvD,6BAAyC,CAAC,CAAC,OAAO,kBAAkB,CAAC;YACrE,oBAAgC,CAAC,CAAC,OAAO,SAAS,CAAC;YACnD,mBAA+B,CAAC,CAAC,OAAO,QAAQ,CAAC;SACjD;IACF,CAAC;IAVD,kEAUC;IAyGD,SAAgB,OAAO,CAAC,IAAqC,EAAE,EAAmC;QACjG,MAAM,KAAK,GAAG,EAAE;YACf,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC;YAC5E,CAAC,CAAC,EAAE,CAAC;QACN,MAAM,OAAO,GAAG,IAAI;YACnB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;YAC5E,CAAC,CAAC,EAAE,CAAC;QACN,MAAM,OAAO,GAAa,EAAE,CAAC;QAE7B,IAAI,EAAE,IAAI,IAAI,EAAE;YACf,KAAK,MAAM,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE;gBAC5B,IAAI,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;oBAChC,MAAM,MAAM,GAAG,qBAAqB,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;oBACzD,MAAM,MAAM,GAAG,qBAAqB,CAAC,EAAE,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;oBACvD,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE;wBACpC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;qBAClB;iBACD;aACD;SACD;QAED,MAAM,SAAS,GAAyB,EAAE,CAAC;QAC3C,MAAM,oBAAoB,GAAG,CAAC,SAAuB,EAAiC,EAAE;YACvF,MAAM,MAAM,GAAkC,EAAE,CAAC;YACjD,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;gBACjC,KAAK,MAAM,UAAU,IAAI,QAAQ,CAAC,WAAW,EAAE;oBAC9C,MAAM,CAAC,yBAAyB,CAAC,UAAU,CAAC,CAAC,GAAG,QAAQ,CAAC;iBACzD;aACD;YACD,OAAO,MAAM,CAAC;QACf,CAAC,CAAC;QACF,MAAM,uBAAuB,GAAkC,EAAE,CAAC,CAAC,CAAC,oBAAoB,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAC5G,MAAM,yBAAyB,GAAkC,IAAI,CAAC,CAAC,CAAC,oBAAoB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAElH,IAAI,MAAM,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC,MAAM,EAAE;YAChD,KAAK,MAAM,GAAG,IAAI,KAAK,EAAE;gBACxB,MAAM,QAAQ,GAAG,uBAAuB,CAAC,GAAG,CAAC,CAAC;gBAC9C,IAAI,QAAQ,EAAE;oBACb,SAAS,CAAC,IAAI,CAAC,CAAC,CAAA,GAAA,iDAAyB,CAAA,CAAC,GAAG,CAAC,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;iBAChE;aACD;SACD;QACD,IAAI,MAAM,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC,MAAM,EAAE;YAClD,KAAK,MAAM,GAAG,IAAI,OAAO,EAAE;gBAC1B,MAAM,QAAQ,GAAG,yBAAyB,CAAC,GAAG,CAAC,CAAC;gBAChD,IAAI,QAAQ,EAAE;oBACb,SAAS,CAAC,IAAI,CAAC,CAAC,CAAA,GAAA,iDAAyB,CAAA,CAAC,GAAG,CAAC,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;iBAChE;aACD;SACD;QAED,IAAI,MAAM,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC,MAAM,EAAE;YACjG,KAAK,MAAM,GAAG,IAAI,OAAO,EAAE;gBAC1B,MAAM,YAAY,GAAG,yBAAyB,CAAC,GAAG,CAAC,CAAC;gBACpD,MAAM,UAAU,GAAG,uBAAuB,CAAC,GAAG,CAAC,CAAC;gBAChD,IAAI,YAAY,IAAI,UAAU,EAAE;oBAC/B,MAAM,MAAM,GAAG,OAAO,CAAC,EAAE,QAAQ,EAAE,YAAY,CAAC,QAAQ,EAAE,IAAI,EAAE,YAAY,CAAC,IAAI,EAAE,SAAS,EAAE,EAAE,EAAE,EAAE,EAAE,QAAQ,EAAE,UAAU,CAAC,QAAQ,EAAE,IAAI,EAAE,UAAU,CAAC,IAAI,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC,CAAC;oBAC7K,SAAS,CAAC,IAAI,CAAC,CAAC,CAAA,GAAA,iDAAyB,CAAA,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,KAAK,EAAE,GAAG,MAAM,CAAC,OAAO,EAAE,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;iBAC1G;aACD;SACD;QAED,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC;IAC/C,CAAC;IA/DD,0BA+DC;IAED,SAAgB,WAAW,CAAC,GAAQ,EAAE,gBAA2C;QAChF,MAAM,SAAS,GAAiB,EAAE,CAAC;QACnC,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;YACnC,IAAI,iDAAyB,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;gBACxC,MAAM,WAAW,GAAQ,EAAE,CAAC;gBAC5B,KAAK,MAAM,gBAAgB,IAAI,GAAG,CAAC,GAAG,CAAC,EAAE;oBACxC,WAAW,CAAC,gBAAgB,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,gBAAgB,CAAC,CAAC;iBAC3D;gBACD,SAAS,CAAC,IAAI,CAAC;oBACd,WAAW,EAAE,CAAC,CAAA,GAAA,iDAAyB,CAAA,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;oBACpD,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;oBAC9B,QAAQ,EAAE,YAAY,CAAC,WAAW,EAAE,gBAAgB,CAAC;iBACrD,CAAC,CAAC;aACH;SACD;QACD,OAAO,SAAS,CAAC;IAClB,CAAC;IAhBD,kCAgBC;IAED,SAAgB,YAAY,CAAC,UAA2C,EAAE,gBAA2C;QACpH,MAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAEjC,KAAK,IAAI,GAAG,IAAI,UAAU,EAAE;YAC3B,cAAc,CAAC,IAAI,EAAE,GAAG,EAAE,UAAU,CAAC,GAAG,CAAC,EAAE,gBAAgB,CAAC,CAAC;SAC7D;QAED,OAAO,IAAI,CAAC;IACb,CAAC;IARD,oCAQC;IAED,SAAgB,cAAc,CAAC,gBAAqB,EAAE,GAAW,EAAE,KAAU,EAAE,gBAA2C;QACzH,MAAM,QAAQ,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAChC,MAAM,IAAI,GAAG,QAAQ,CAAC,GAAG,EAAG,CAAC;QAE7B,IAAI,IAAI,GAAG,gBAAgB,CAAC;QAC5B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACzC,IAAI,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;YACpB,IAAI,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YAClB,QAAQ,OAAO,GAAG,EAAE;gBACnB,KAAK,WAAW;oBACf,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;oBACpC,MAAM;gBACP,KAAK,QAAQ;oBACZ,MAAM;gBACP;oBACC,gBAAgB,CAAC,YAAY,GAAG,OAAO,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;oBACvG,OAAO;aACR;YACD,IAAI,GAAG,GAAG,CAAC;SACX;QAED,IAAI,OAAO,IAAI,KAAK,QAAQ,IAAI,IAAI,KAAK,IAAI,EAAE;YAC9C,IAAI;gBACH,IAAI,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC,8DAA8D;aAClF;YAAC,OAAO,CAAC,EAAE;gBACX,gBAAgB,CAAC,YAAY,GAAG,OAAO,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;aACxF;SACD;aAAM;YACN,gBAAgB,CAAC,YAAY,GAAG,OAAO,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;SACxF;IACF,CAAC;IA9BD,wCA8BC;IAED,SAAgB,mBAAmB,CAAC,SAAc,EAAE,GAAW;QAC9D,MAAM,QAAQ,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAChC,qBAAqB,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;IAC5C,CAAC;IAHD,kDAGC;IAED,SAAS,qBAAqB,CAAC,SAAc,EAAE,QAAkB;QAChE,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,EAAG,CAAC;QAChC,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;YAC1B,uBAAuB;YACvB,OAAO,SAAS,CAAC,KAAK,CAAC,CAAC;YACxB,OAAO;SACP;QAED,IAAI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE;YACjD,MAAM,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;YAC/B,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBACvD,qBAAqB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;gBACvC,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;oBACpC,OAAO,SAAS,CAAC,KAAK,CAAC,CAAC;iBACxB;aACD;SACD;IACF,CAAC;IAED;;OAEG;IACH,SAAgB,qBAAqB,CAAI,MAAW,EAAE,WAAmB,EAAE,YAAgB;QAC1F,SAAS,aAAa,CAAC,MAAW,EAAE,IAAc;YACjD,IAAI,OAAO,GAAG,MAAM,CAAC;YACrB,KAAK,MAAM,SAAS,IAAI,IAAI,EAAE;gBAC7B,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,OAAO,KAAK,IAAI,EAAE;oBACpD,OAAO,SAAS,CAAC;iBACjB;gBACD,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;aAC7B;YACD,OAAU,OAAO,CAAC;QACnB,CAAC;QAED,MAAM,IAAI,GAAG,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACpC,MAAM,MAAM,GAAG,aAAa,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QAE3C,OAAO,OAAO,MAAM,KAAK,WAAW,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC;IAC9D,CAAC;IAhBD,sDAgBC;IAED,SAAgB,KAAK,CAAC,IAAS,EAAE,GAAQ,EAAE,SAAkB;QAC5D,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;YAC9B,IAAI,GAAG,KAAK,WAAW,EAAE;gBACxB,IAAI,GAAG,IAAI,IAAI,EAAE;oBAChB,IAAI,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE;wBAC1D,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE,SAAS,CAAC,CAAC;qBACtC;yBAAM,IAAI,SAAS,EAAE;wBACrB,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;qBACrB;iBACD;qBAAM;oBACN,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;iBACrB;aACD;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;IAdD,sBAcC;IAED,SAAgB,oBAAoB;QACnC,MAAM,UAAU,GAAG,mBAAQ,CAAC,EAAE,CAAyB,kCAAU,CAAC,aAAa,CAAC,CAAC,0BAA0B,EAAE,CAAC;QAC9G,OAAO,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAChC,CAAC;IAHD,oDAGC;IAED,SAAgB,gBAAgB;QAC/B,MAAM,aAAa,GAAQ,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC/C,MAAM,UAAU,GAAG,mBAAQ,CAAC,EAAE,CAAyB,kCAAU,CAAC,aAAa,CAAC,CAAC,0BAA0B,EAAE,CAAC;QAE9G,KAAK,IAAI,GAAG,IAAI,UAAU,EAAE;YAC3B,IAAI,KAAK,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC;YACpC,cAAc,CAAC,aAAa,EAAE,GAAG,EAAE,KAAK,EAAE,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,iCAAiC,OAAO,EAAE,CAAC,CAAC,CAAC;SAChH;QAED,OAAO,aAAa,CAAC;IACtB,CAAC;IAVD,4CAUC;IAED,SAAgB,yBAAyB,CAAC,kBAA0B;QACnE,OAAO,IAAI,kBAAkB,GAAG,CAAC;IAClC,CAAC;IAFD,8DAEC;IAED,SAAgB,uBAAuB,CAAI,oBAA2C,EAAE,kBAA0B,EAAE,iBAAyB;QAC5I,MAAM,OAAO,GAAG,oBAAoB,CAAC,OAAO,CAAI,kBAAkB,CAAC,CAAC;QACpE,MAAM,aAAa,GAAG,oBAAoB,CAAC,OAAO,CAAI,iBAAiB,CAAC,CAAC;QAEzE,IAAI,OAAO,OAAO,CAAC,SAAS,KAAK,WAAW,IAAI,OAAO,OAAO,CAAC,cAAc,KAAK,WAAW,IAAI,OAAO,OAAO,CAAC,oBAAoB,KAAK,WAAW,EAAE;YACrJ,OAAO,OAAO,CAAC,KAAM,CAAC;SACtB;aAAM,IAAI,OAAO,aAAa,CAAC,SAAS,KAAK,WAAW,IAAI,OAAO,aAAa,CAAC,cAAc,KAAK,WAAW,IAAI,OAAO,aAAa,CAAC,oBAAoB,KAAK,WAAW,EAAE;YAC9K,OAAO,aAAa,CAAC,KAAM,CAAC;SAC5B;aAAM;YACN,OAAO,OAAO,CAAC,YAAa,CAAC;SAC7B;IACF,CAAC;IAXD,0DAWC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as objects from 'vs/base/common/objects';\nimport * as types from 'vs/base/common/types';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { Event } from 'vs/base/common/event';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IWorkspaceFolder } from 'vs/platform/workspace/common/workspace';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IConfigurationRegistry, Extensions, OVERRIDE_PROPERTY_PATTERN, overrideIdentifierFromKey } from 'vs/platform/configuration/common/configurationRegistry';\nimport { IStringDictionary } from 'vs/base/common/collections';\n\nexport const IConfigurationService = createDecorator<IConfigurationService>('configurationService');\n\nexport function isConfigurationOverrides(thing: any): thing is IConfigurationOverrides {\n\treturn thing\n\t\t&& typeof thing === 'object'\n\t\t&& (!thing.overrideIdentifier || typeof thing.overrideIdentifier === 'string')\n\t\t&& (!thing.resource || thing.resource instanceof URI);\n}\n\nexport interface IConfigurationOverrides {\n\toverrideIdentifier?: string | null;\n\tresource?: URI | null;\n}\n\nexport const enum ConfigurationTarget {\n\tUSER = 1,\n\tUSER_LOCAL,\n\tUSER_REMOTE,\n\tWORKSPACE,\n\tWORKSPACE_FOLDER,\n\tDEFAULT,\n\tMEMORY\n}\nexport function ConfigurationTargetToString(configurationTarget: ConfigurationTarget) {\n\tswitch (configurationTarget) {\n\t\tcase ConfigurationTarget.USER: return 'USER';\n\t\tcase ConfigurationTarget.USER_LOCAL: return 'USER_LOCAL';\n\t\tcase ConfigurationTarget.USER_REMOTE: return 'USER_REMOTE';\n\t\tcase ConfigurationTarget.WORKSPACE: return 'WORKSPACE';\n\t\tcase ConfigurationTarget.WORKSPACE_FOLDER: return 'WORKSPACE_FOLDER';\n\t\tcase ConfigurationTarget.DEFAULT: return 'DEFAULT';\n\t\tcase ConfigurationTarget.MEMORY: return 'MEMORY';\n\t}\n}\n\nexport interface IConfigurationChange {\n\tkeys: string[];\n\toverrides: [string, string[]][];\n}\n\nexport interface IConfigurationChangeEvent {\n\n\treadonly source: ConfigurationTarget;\n\treadonly affectedKeys: string[];\n\treadonly change: IConfigurationChange;\n\n\taffectsConfiguration(configuration: string, overrides?: IConfigurationOverrides): boolean;\n\n\t// Following data is used for telemetry\n\treadonly sourceConfig: any;\n}\n\nexport interface IConfigurationValue<T> {\n\n\treadonly defaultValue?: T;\n\treadonly userValue?: T;\n\treadonly userLocalValue?: T;\n\treadonly userRemoteValue?: T;\n\treadonly workspaceValue?: T;\n\treadonly workspaceFolderValue?: T;\n\treadonly memoryValue?: T;\n\treadonly value?: T;\n\n\treadonly default?: { value?: T, override?: T };\n\treadonly user?: { value?: T, override?: T };\n\treadonly userLocal?: { value?: T, override?: T };\n\treadonly userRemote?: { value?: T, override?: T };\n\treadonly workspace?: { value?: T, override?: T };\n\treadonly workspaceFolder?: { value?: T, override?: T };\n\treadonly memory?: { value?: T, override?: T };\n\n\treadonly overrideIdentifiers?: string[];\n}\n\nexport interface IConfigurationService {\n\treadonly _serviceBrand: undefined;\n\n\tonDidChangeConfiguration: Event<IConfigurationChangeEvent>;\n\n\tgetConfigurationData(): IConfigurationData | null;\n\n\t/**\n\t * Fetches the value of the section for the given overrides.\n\t * Value can be of native type or an object keyed off the section name.\n\t *\n\t * @param section - Section of the configuraion. Can be `null` or `undefined`.\n\t * @param overrides - Overrides that has to be applied while fetching\n\t *\n\t */\n\tgetValue<T>(): T;\n\tgetValue<T>(section: string): T;\n\tgetValue<T>(overrides: IConfigurationOverrides): T;\n\tgetValue<T>(section: string, overrides: IConfigurationOverrides): T;\n\n\tupdateValue(key: string, value: any): Promise<void>;\n\tupdateValue(key: string, value: any, overrides: IConfigurationOverrides): Promise<void>;\n\tupdateValue(key: string, value: any, target: ConfigurationTarget): Promise<void>;\n\tupdateValue(key: string, value: any, overrides: IConfigurationOverrides, target: ConfigurationTarget, donotNotifyError?: boolean): Promise<void>;\n\n\tinspect<T>(key: string, overrides?: IConfigurationOverrides): IConfigurationValue<T>;\n\n\treloadConfiguration(target?: ConfigurationTarget | IWorkspaceFolder): Promise<void>;\n\n\tkeys(): {\n\t\tdefault: string[];\n\t\tuser: string[];\n\t\tworkspace: string[];\n\t\tworkspaceFolder: string[];\n\t\tmemory?: string[];\n\t};\n}\n\nexport interface IConfigurationModel {\n\tcontents: any;\n\tkeys: string[];\n\toverrides: IOverrides[];\n}\n\nexport interface IOverrides {\n\tkeys: string[];\n\tcontents: any;\n\tidentifiers: string[];\n}\n\nexport interface IConfigurationData {\n\tdefaults: IConfigurationModel;\n\tuser: IConfigurationModel;\n\tworkspace: IConfigurationModel;\n\tfolders: [UriComponents, IConfigurationModel][];\n}\n\nexport interface IConfigurationCompareResult {\n\tadded: string[];\n\tremoved: string[];\n\tupdated: string[];\n\toverrides: [string, string[]][];\n}\n\nexport function compare(from: IConfigurationModel | undefined, to: IConfigurationModel | undefined): IConfigurationCompareResult {\n\tconst added = to\n\t\t? from ? to.keys.filter(key => from.keys.indexOf(key) === -1) : [...to.keys]\n\t\t: [];\n\tconst removed = from\n\t\t? to ? from.keys.filter(key => to.keys.indexOf(key) === -1) : [...from.keys]\n\t\t: [];\n\tconst updated: string[] = [];\n\n\tif (to && from) {\n\t\tfor (const key of from.keys) {\n\t\t\tif (to.keys.indexOf(key) !== -1) {\n\t\t\t\tconst value1 = getConfigurationValue(from.contents, key);\n\t\t\t\tconst value2 = getConfigurationValue(to.contents, key);\n\t\t\t\tif (!objects.equals(value1, value2)) {\n\t\t\t\t\tupdated.push(key);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tconst overrides: [string, string[]][] = [];\n\tconst byOverrideIdentifier = (overrides: IOverrides[]): IStringDictionary<IOverrides> => {\n\t\tconst result: IStringDictionary<IOverrides> = {};\n\t\tfor (const override of overrides) {\n\t\t\tfor (const identifier of override.identifiers) {\n\t\t\t\tresult[keyFromOverrideIdentifier(identifier)] = override;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t};\n\tconst toOverridesByIdentifier: IStringDictionary<IOverrides> = to ? byOverrideIdentifier(to.overrides) : {};\n\tconst fromOverridesByIdentifier: IStringDictionary<IOverrides> = from ? byOverrideIdentifier(from.overrides) : {};\n\n\tif (Object.keys(toOverridesByIdentifier).length) {\n\t\tfor (const key of added) {\n\t\t\tconst override = toOverridesByIdentifier[key];\n\t\t\tif (override) {\n\t\t\t\toverrides.push([overrideIdentifierFromKey(key), override.keys]);\n\t\t\t}\n\t\t}\n\t}\n\tif (Object.keys(fromOverridesByIdentifier).length) {\n\t\tfor (const key of removed) {\n\t\t\tconst override = fromOverridesByIdentifier[key];\n\t\t\tif (override) {\n\t\t\t\toverrides.push([overrideIdentifierFromKey(key), override.keys]);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (Object.keys(toOverridesByIdentifier).length && Object.keys(fromOverridesByIdentifier).length) {\n\t\tfor (const key of updated) {\n\t\t\tconst fromOverride = fromOverridesByIdentifier[key];\n\t\t\tconst toOverride = toOverridesByIdentifier[key];\n\t\t\tif (fromOverride && toOverride) {\n\t\t\t\tconst result = compare({ contents: fromOverride.contents, keys: fromOverride.keys, overrides: [] }, { contents: toOverride.contents, keys: toOverride.keys, overrides: [] });\n\t\t\t\toverrides.push([overrideIdentifierFromKey(key), [...result.added, ...result.removed, ...result.updated]]);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { added, removed, updated, overrides };\n}\n\nexport function toOverrides(raw: any, conflictReporter: (message: string) => void): IOverrides[] {\n\tconst overrides: IOverrides[] = [];\n\tfor (const key of Object.keys(raw)) {\n\t\tif (OVERRIDE_PROPERTY_PATTERN.test(key)) {\n\t\t\tconst overrideRaw: any = {};\n\t\t\tfor (const keyInOverrideRaw in raw[key]) {\n\t\t\t\toverrideRaw[keyInOverrideRaw] = raw[key][keyInOverrideRaw];\n\t\t\t}\n\t\t\toverrides.push({\n\t\t\t\tidentifiers: [overrideIdentifierFromKey(key).trim()],\n\t\t\t\tkeys: Object.keys(overrideRaw),\n\t\t\t\tcontents: toValuesTree(overrideRaw, conflictReporter)\n\t\t\t});\n\t\t}\n\t}\n\treturn overrides;\n}\n\nexport function toValuesTree(properties: { [qualifiedKey: string]: any }, conflictReporter: (message: string) => void): any {\n\tconst root = Object.create(null);\n\n\tfor (let key in properties) {\n\t\taddToValueTree(root, key, properties[key], conflictReporter);\n\t}\n\n\treturn root;\n}\n\nexport function addToValueTree(settingsTreeRoot: any, key: string, value: any, conflictReporter: (message: string) => void): void {\n\tconst segments = key.split('.');\n\tconst last = segments.pop()!;\n\n\tlet curr = settingsTreeRoot;\n\tfor (let i = 0; i < segments.length; i++) {\n\t\tlet s = segments[i];\n\t\tlet obj = curr[s];\n\t\tswitch (typeof obj) {\n\t\t\tcase 'undefined':\n\t\t\t\tobj = curr[s] = Object.create(null);\n\t\t\t\tbreak;\n\t\t\tcase 'object':\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconflictReporter(`Ignoring ${key} as ${segments.slice(0, i + 1).join('.')} is ${JSON.stringify(obj)}`);\n\t\t\t\treturn;\n\t\t}\n\t\tcurr = obj;\n\t}\n\n\tif (typeof curr === 'object' && curr !== null) {\n\t\ttry {\n\t\t\tcurr[last] = value; // workaround https://github.com/microsoft/vscode/issues/13606\n\t\t} catch (e) {\n\t\t\tconflictReporter(`Ignoring ${key} as ${segments.join('.')} is ${JSON.stringify(curr)}`);\n\t\t}\n\t} else {\n\t\tconflictReporter(`Ignoring ${key} as ${segments.join('.')} is ${JSON.stringify(curr)}`);\n\t}\n}\n\nexport function removeFromValueTree(valueTree: any, key: string): void {\n\tconst segments = key.split('.');\n\tdoRemoveFromValueTree(valueTree, segments);\n}\n\nfunction doRemoveFromValueTree(valueTree: any, segments: string[]): void {\n\tconst first = segments.shift()!;\n\tif (segments.length === 0) {\n\t\t// Reached last segment\n\t\tdelete valueTree[first];\n\t\treturn;\n\t}\n\n\tif (Object.keys(valueTree).indexOf(first) !== -1) {\n\t\tconst value = valueTree[first];\n\t\tif (typeof value === 'object' && !Array.isArray(value)) {\n\t\t\tdoRemoveFromValueTree(value, segments);\n\t\t\tif (Object.keys(value).length === 0) {\n\t\t\t\tdelete valueTree[first];\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * A helper function to get the configuration value with a specific settings path (e.g. config.some.setting)\n */\nexport function getConfigurationValue<T>(config: any, settingPath: string, defaultValue?: T): T {\n\tfunction accessSetting(config: any, path: string[]): any {\n\t\tlet current = config;\n\t\tfor (const component of path) {\n\t\t\tif (typeof current !== 'object' || current === null) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tcurrent = current[component];\n\t\t}\n\t\treturn <T>current;\n\t}\n\n\tconst path = settingPath.split('.');\n\tconst result = accessSetting(config, path);\n\n\treturn typeof result === 'undefined' ? defaultValue : result;\n}\n\nexport function merge(base: any, add: any, overwrite: boolean): void {\n\tObject.keys(add).forEach(key => {\n\t\tif (key !== '__proto__') {\n\t\t\tif (key in base) {\n\t\t\t\tif (types.isObject(base[key]) && types.isObject(add[key])) {\n\t\t\t\t\tmerge(base[key], add[key], overwrite);\n\t\t\t\t} else if (overwrite) {\n\t\t\t\t\tbase[key] = add[key];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbase[key] = add[key];\n\t\t\t}\n\t\t}\n\t});\n}\n\nexport function getConfigurationKeys(): string[] {\n\tconst properties = Registry.as<IConfigurationRegistry>(Extensions.Configuration).getConfigurationProperties();\n\treturn Object.keys(properties);\n}\n\nexport function getDefaultValues(): any {\n\tconst valueTreeRoot: any = Object.create(null);\n\tconst properties = Registry.as<IConfigurationRegistry>(Extensions.Configuration).getConfigurationProperties();\n\n\tfor (let key in properties) {\n\t\tlet value = properties[key].default;\n\t\taddToValueTree(valueTreeRoot, key, value, message => console.error(`Conflict in default settings: ${message}`));\n\t}\n\n\treturn valueTreeRoot;\n}\n\nexport function keyFromOverrideIdentifier(overrideIdentifier: string): string {\n\treturn `[${overrideIdentifier}]`;\n}\n\nexport function getMigratedSettingValue<T>(configurationService: IConfigurationService, currentSettingName: string, legacySettingName: string): T {\n\tconst setting = configurationService.inspect<T>(currentSettingName);\n\tconst legacySetting = configurationService.inspect<T>(legacySettingName);\n\n\tif (typeof setting.userValue !== 'undefined' || typeof setting.workspaceValue !== 'undefined' || typeof setting.workspaceFolderValue !== 'undefined') {\n\t\treturn setting.value!;\n\t} else if (typeof legacySetting.userValue !== 'undefined' || typeof legacySetting.workspaceValue !== 'undefined' || typeof legacySetting.workspaceFolderValue !== 'undefined') {\n\t\treturn legacySetting.value!;\n\t} else {\n\t\treturn setting.defaultValue!;\n\t}\n}\n"]}