{"version":3,"sources":["vs/platform/configuration/common/configurationRegistry.ts"],"names":[],"mappings":"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","file":"configurationRegistry.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { IJSONSchema } from 'vs/base/common/jsonSchema';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport * as types from 'vs/base/common/types';\nimport { IJSONContributionRegistry, Extensions as JSONExtensions } from 'vs/platform/jsonschemas/common/jsonContributionRegistry';\nimport { IStringDictionary } from 'vs/base/common/collections';\n\nexport const Extensions = {\n\tConfiguration: 'base.contributions.configuration'\n};\n\nexport interface IConfigurationRegistry {\n\n\t/**\n\t * Register a configuration to the registry.\n\t */\n\tregisterConfiguration(configuration: IConfigurationNode): void;\n\n\t/**\n\t * Register multiple configurations to the registry.\n\t */\n\tregisterConfigurations(configurations: IConfigurationNode[], validate?: boolean): void;\n\n\t/**\n\t * Deregister multiple configurations from the registry.\n\t */\n\tderegisterConfigurations(configurations: IConfigurationNode[]): void;\n\n\t/**\n\t * Register multiple default configurations to the registry.\n\t */\n\tregisterDefaultConfigurations(defaultConfigurations: IStringDictionary<any>[]): void;\n\n\t/**\n\t * Deregister multiple default configurations from the registry.\n\t */\n\tderegisterDefaultConfigurations(defaultConfigurations: IStringDictionary<any>[]): void;\n\n\t/**\n\t * Signal that the schema of a configuration setting has changes. It is currently only supported to change enumeration values.\n\t * Property or default value changes are not allowed.\n\t */\n\tnotifyConfigurationSchemaUpdated(...configurations: IConfigurationNode[]): void;\n\n\t/**\n\t * Event that fires whenver a configuration has been\n\t * registered.\n\t */\n\tonDidSchemaChange: Event<void>;\n\n\t/**\n\t * Event that fires whenver a configuration has been\n\t * registered.\n\t */\n\tonDidUpdateConfiguration: Event<string[]>;\n\n\t/**\n\t * Returns all configuration nodes contributed to this registry.\n\t */\n\tgetConfigurations(): IConfigurationNode[];\n\n\t/**\n\t * Returns all configurations settings of all configuration nodes contributed to this registry.\n\t */\n\tgetConfigurationProperties(): { [qualifiedKey: string]: IConfigurationPropertySchema };\n\n\t/**\n\t * Returns all excluded configurations settings of all configuration nodes contributed to this registry.\n\t */\n\tgetExcludedConfigurationProperties(): { [qualifiedKey: string]: IConfigurationPropertySchema };\n\n\t/**\n\t * Register the identifiers for editor configurations\n\t */\n\tregisterOverrideIdentifiers(identifiers: string[]): void;\n}\n\nexport const enum ConfigurationScope {\n\t/**\n\t * Application specific configuration, which can be configured only in local user settings.\n\t */\n\tAPPLICATION = 1,\n\t/**\n\t * Machine specific configuration, which can be configured only in local and remote user settings.\n\t */\n\tMACHINE,\n\t/**\n\t * Window specific configuration, which can be configured in the user or workspace settings.\n\t */\n\tWINDOW,\n\t/**\n\t * Resource specific configuration, which can be configured in the user, workspace or folder settings.\n\t */\n\tRESOURCE,\n\t/**\n\t * Resource specific configuration that can be configured in language specific settings\n\t */\n\tLANGUAGE_OVERRIDABLE,\n\t/**\n\t * Machine specific configuration that can also be configured in workspace or folder settings.\n\t */\n\tMACHINE_OVERRIDABLE,\n}\n\nexport interface IConfigurationPropertySchema extends IJSONSchema {\n\n\tscope?: ConfigurationScope;\n\n\t/**\n\t * When restricted, value of this configuration will be read only from trusted sources.\n\t * For eg., If the workspace is not trusted, then the value of this configuration is not read from workspace settings file.\n\t */\n\trestricted?: boolean;\n\n\tincluded?: boolean;\n\n\ttags?: string[];\n\n\t/**\n\t * When enabled this setting is ignored during sync and user can override this.\n\t */\n\tignoreSync?: boolean;\n\n\t/**\n\t * When enabled this setting is ignored during sync and user cannot override this.\n\t */\n\tdisallowSyncIgnore?: boolean;\n\n\tenumItemLabels?: string[];\n}\n\nexport interface IConfigurationExtensionInfo {\n\tid: string;\n\trestrictedConfigurations?: string[];\n}\n\nexport interface IConfigurationNode {\n\tid?: string;\n\torder?: number;\n\ttype?: string | string[];\n\ttitle?: string;\n\tdescription?: string;\n\tproperties?: { [path: string]: IConfigurationPropertySchema; };\n\tallOf?: IConfigurationNode[];\n\tscope?: ConfigurationScope;\n\textensionInfo?: IConfigurationExtensionInfo;\n}\n\nexport const allSettings: { properties: IStringDictionary<IConfigurationPropertySchema>, patternProperties: IStringDictionary<IConfigurationPropertySchema> } = { properties: {}, patternProperties: {} };\nexport const applicationSettings: { properties: IStringDictionary<IConfigurationPropertySchema>, patternProperties: IStringDictionary<IConfigurationPropertySchema> } = { properties: {}, patternProperties: {} };\nexport const machineSettings: { properties: IStringDictionary<IConfigurationPropertySchema>, patternProperties: IStringDictionary<IConfigurationPropertySchema> } = { properties: {}, patternProperties: {} };\nexport const machineOverridableSettings: { properties: IStringDictionary<IConfigurationPropertySchema>, patternProperties: IStringDictionary<IConfigurationPropertySchema> } = { properties: {}, patternProperties: {} };\nexport const windowSettings: { properties: IStringDictionary<IConfigurationPropertySchema>, patternProperties: IStringDictionary<IConfigurationPropertySchema> } = { properties: {}, patternProperties: {} };\nexport const resourceSettings: { properties: IStringDictionary<IConfigurationPropertySchema>, patternProperties: IStringDictionary<IConfigurationPropertySchema> } = { properties: {}, patternProperties: {} };\n\nexport const resourceLanguageSettingsSchemaId = 'vscode://schemas/settings/resourceLanguage';\n\nconst contributionRegistry = Registry.as<IJSONContributionRegistry>(JSONExtensions.JSONContribution);\n\nclass ConfigurationRegistry implements IConfigurationRegistry {\n\n\tprivate readonly defaultValues: IStringDictionary<any>;\n\tprivate readonly defaultLanguageConfigurationOverridesNode: IConfigurationNode;\n\tprivate readonly configurationContributors: IConfigurationNode[];\n\tprivate readonly configurationProperties: { [qualifiedKey: string]: IJSONSchema };\n\tprivate readonly excludedConfigurationProperties: { [qualifiedKey: string]: IJSONSchema };\n\tprivate readonly resourceLanguageSettingsSchema: IJSONSchema;\n\tprivate readonly overrideIdentifiers = new Set<string>();\n\n\tprivate readonly _onDidSchemaChange = new Emitter<void>();\n\treadonly onDidSchemaChange: Event<void> = this._onDidSchemaChange.event;\n\n\tprivate readonly _onDidUpdateConfiguration: Emitter<string[]> = new Emitter<string[]>();\n\treadonly onDidUpdateConfiguration: Event<string[]> = this._onDidUpdateConfiguration.event;\n\n\tconstructor() {\n\t\tthis.defaultValues = {};\n\t\tthis.defaultLanguageConfigurationOverridesNode = {\n\t\t\tid: 'defaultOverrides',\n\t\t\ttitle: nls.localize('defaultLanguageConfigurationOverrides.title', \"Default Language Configuration Overrides\"),\n\t\t\tproperties: {}\n\t\t};\n\t\tthis.configurationContributors = [this.defaultLanguageConfigurationOverridesNode];\n\t\tthis.resourceLanguageSettingsSchema = { properties: {}, patternProperties: {}, additionalProperties: false, errorMessage: 'Unknown editor configuration setting', allowTrailingCommas: true, allowComments: true };\n\t\tthis.configurationProperties = {};\n\t\tthis.excludedConfigurationProperties = {};\n\n\t\tcontributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\n\t}\n\n\tpublic registerConfiguration(configuration: IConfigurationNode, validate: boolean = true): void {\n\t\tthis.registerConfigurations([configuration], validate);\n\t}\n\n\tpublic registerConfigurations(configurations: IConfigurationNode[], validate: boolean = true): void {\n\t\tconst properties: string[] = [];\n\t\tconfigurations.forEach(configuration => {\n\t\t\tproperties.push(...this.validateAndRegisterProperties(configuration, validate, configuration.extensionInfo)); // fills in defaults\n\t\t\tthis.configurationContributors.push(configuration);\n\t\t\tthis.registerJSONConfiguration(configuration);\n\t\t});\n\n\t\tcontributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\n\t\tthis._onDidSchemaChange.fire();\n\t\tthis._onDidUpdateConfiguration.fire(properties);\n\t}\n\n\tpublic deregisterConfigurations(configurations: IConfigurationNode[]): void {\n\t\tconst properties: string[] = [];\n\t\tconst deregisterConfiguration = (configuration: IConfigurationNode) => {\n\t\t\tif (configuration.properties) {\n\t\t\t\tfor (const key in configuration.properties) {\n\t\t\t\t\tproperties.push(key);\n\t\t\t\t\tdelete this.configurationProperties[key];\n\t\t\t\t\tthis.removeFromSchema(key, configuration.properties[key]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (configuration.allOf) {\n\t\t\t\tconfiguration.allOf.forEach(node => deregisterConfiguration(node));\n\t\t\t}\n\t\t};\n\t\tfor (const configuration of configurations) {\n\t\t\tderegisterConfiguration(configuration);\n\t\t\tconst index = this.configurationContributors.indexOf(configuration);\n\t\t\tif (index !== -1) {\n\t\t\t\tthis.configurationContributors.splice(index, 1);\n\t\t\t}\n\t\t}\n\n\t\tcontributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\n\t\tthis._onDidSchemaChange.fire();\n\t\tthis._onDidUpdateConfiguration.fire(properties);\n\t}\n\n\tpublic registerDefaultConfigurations(defaultConfigurations: IStringDictionary<any>[]): void {\n\t\tconst properties: string[] = [];\n\t\tconst overrideIdentifiers: string[] = [];\n\n\t\tfor (const defaultConfiguration of defaultConfigurations) {\n\t\t\tfor (const key in defaultConfiguration) {\n\t\t\t\tproperties.push(key);\n\n\t\t\t\tif (OVERRIDE_PROPERTY_PATTERN.test(key)) {\n\t\t\t\t\tthis.defaultValues[key] = { ...(this.defaultValues[key] || {}), ...defaultConfiguration[key] };\n\t\t\t\t\tconst property: IConfigurationPropertySchema = {\n\t\t\t\t\t\ttype: 'object',\n\t\t\t\t\t\tdefault: this.defaultValues[key],\n\t\t\t\t\t\tdescription: nls.localize('defaultLanguageConfiguration.description', \"Configure settings to be overridden for {0} language.\", key),\n\t\t\t\t\t\t$ref: resourceLanguageSettingsSchemaId\n\t\t\t\t\t};\n\t\t\t\t\toverrideIdentifiers.push(overrideIdentifierFromKey(key));\n\t\t\t\t\tthis.configurationProperties[key] = property;\n\t\t\t\t\tthis.defaultLanguageConfigurationOverridesNode.properties![key] = property;\n\t\t\t\t} else {\n\t\t\t\t\tthis.defaultValues[key] = defaultConfiguration[key];\n\t\t\t\t\tconst property = this.configurationProperties[key];\n\t\t\t\t\tif (property) {\n\t\t\t\t\t\tthis.updatePropertyDefaultValue(key, property);\n\t\t\t\t\t\tthis.updateSchema(key, property);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.registerOverrideIdentifiers(overrideIdentifiers);\n\t\tthis._onDidSchemaChange.fire();\n\t\tthis._onDidUpdateConfiguration.fire(properties);\n\t}\n\n\tpublic deregisterDefaultConfigurations(defaultConfigurations: IStringDictionary<any>[]): void {\n\t\tconst properties: string[] = [];\n\t\tfor (const defaultConfiguration of defaultConfigurations) {\n\t\t\tfor (const key in defaultConfiguration) {\n\t\t\t\tproperties.push(key);\n\t\t\t\tdelete this.defaultValues[key];\n\t\t\t\tif (OVERRIDE_PROPERTY_PATTERN.test(key)) {\n\t\t\t\t\tdelete this.configurationProperties[key];\n\t\t\t\t\tdelete this.defaultLanguageConfigurationOverridesNode.properties![key];\n\t\t\t\t} else {\n\t\t\t\t\tconst property = this.configurationProperties[key];\n\t\t\t\t\tif (property) {\n\t\t\t\t\t\tthis.updatePropertyDefaultValue(key, property);\n\t\t\t\t\t\tthis.updateSchema(key, property);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.updateOverridePropertyPatternKey();\n\t\tthis._onDidSchemaChange.fire();\n\t\tthis._onDidUpdateConfiguration.fire(properties);\n\t}\n\n\tpublic notifyConfigurationSchemaUpdated(...configurations: IConfigurationNode[]) {\n\t\tthis._onDidSchemaChange.fire();\n\t}\n\n\tpublic registerOverrideIdentifiers(overrideIdentifiers: string[]): void {\n\t\tfor (const overrideIdentifier of overrideIdentifiers) {\n\t\t\tthis.overrideIdentifiers.add(overrideIdentifier);\n\t\t}\n\t\tthis.updateOverridePropertyPatternKey();\n\t}\n\n\tprivate validateAndRegisterProperties(configuration: IConfigurationNode, validate: boolean = true, extensionInfo?: IConfigurationExtensionInfo, scope: ConfigurationScope = ConfigurationScope.WINDOW): string[] {\n\t\tscope = types.isUndefinedOrNull(configuration.scope) ? scope : configuration.scope;\n\t\tlet propertyKeys: string[] = [];\n\t\tlet properties = configuration.properties;\n\t\tif (properties) {\n\t\t\tfor (let key in properties) {\n\t\t\t\tif (validate && validateProperty(key)) {\n\t\t\t\t\tdelete properties[key];\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst property = properties[key];\n\n\t\t\t\t// update default value\n\t\t\t\tthis.updatePropertyDefaultValue(key, property);\n\n\t\t\t\t// update scope\n\t\t\t\tif (OVERRIDE_PROPERTY_PATTERN.test(key)) {\n\t\t\t\t\tproperty.scope = undefined; // No scope for overridable properties `[${identifier}]`\n\t\t\t\t} else {\n\t\t\t\t\tproperty.scope = types.isUndefinedOrNull(property.scope) ? scope : property.scope;\n\t\t\t\t\tproperty.restricted = types.isUndefinedOrNull(property.restricted) ? !!extensionInfo?.restrictedConfigurations?.includes(key) : property.restricted;\n\t\t\t\t}\n\n\t\t\t\t// Add to properties maps\n\t\t\t\t// Property is included by default if 'included' is unspecified\n\t\t\t\tif (properties[key].hasOwnProperty('included') && !properties[key].included) {\n\t\t\t\t\tthis.excludedConfigurationProperties[key] = properties[key];\n\t\t\t\t\tdelete properties[key];\n\t\t\t\t\tcontinue;\n\t\t\t\t} else {\n\t\t\t\t\tthis.configurationProperties[key] = properties[key];\n\t\t\t\t}\n\n\t\t\t\tif (!properties[key].deprecationMessage && properties[key].markdownDeprecationMessage) {\n\t\t\t\t\t// If not set, default deprecationMessage to the markdown source\n\t\t\t\t\tproperties[key].deprecationMessage = properties[key].markdownDeprecationMessage;\n\t\t\t\t}\n\n\t\t\t\tpropertyKeys.push(key);\n\t\t\t}\n\t\t}\n\t\tlet subNodes = configuration.allOf;\n\t\tif (subNodes) {\n\t\t\tfor (let node of subNodes) {\n\t\t\t\tpropertyKeys.push(...this.validateAndRegisterProperties(node, validate, extensionInfo, scope));\n\t\t\t}\n\t\t}\n\t\treturn propertyKeys;\n\t}\n\n\tgetConfigurations(): IConfigurationNode[] {\n\t\treturn this.configurationContributors;\n\t}\n\n\tgetConfigurationProperties(): { [qualifiedKey: string]: IConfigurationPropertySchema } {\n\t\treturn this.configurationProperties;\n\t}\n\n\tgetExcludedConfigurationProperties(): { [qualifiedKey: string]: IConfigurationPropertySchema } {\n\t\treturn this.excludedConfigurationProperties;\n\t}\n\n\tprivate registerJSONConfiguration(configuration: IConfigurationNode) {\n\t\tconst register = (configuration: IConfigurationNode) => {\n\t\t\tlet properties = configuration.properties;\n\t\t\tif (properties) {\n\t\t\t\tfor (const key in properties) {\n\t\t\t\t\tthis.updateSchema(key, properties[key]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet subNodes = configuration.allOf;\n\t\t\tif (subNodes) {\n\t\t\t\tsubNodes.forEach(register);\n\t\t\t}\n\t\t};\n\t\tregister(configuration);\n\t}\n\n\tprivate updateSchema(key: string, property: IConfigurationPropertySchema): void {\n\t\tallSettings.properties[key] = property;\n\t\tswitch (property.scope) {\n\t\t\tcase ConfigurationScope.APPLICATION:\n\t\t\t\tapplicationSettings.properties[key] = property;\n\t\t\t\tbreak;\n\t\t\tcase ConfigurationScope.MACHINE:\n\t\t\t\tmachineSettings.properties[key] = property;\n\t\t\t\tbreak;\n\t\t\tcase ConfigurationScope.MACHINE_OVERRIDABLE:\n\t\t\t\tmachineOverridableSettings.properties[key] = property;\n\t\t\t\tbreak;\n\t\t\tcase ConfigurationScope.WINDOW:\n\t\t\t\twindowSettings.properties[key] = property;\n\t\t\t\tbreak;\n\t\t\tcase ConfigurationScope.RESOURCE:\n\t\t\t\tresourceSettings.properties[key] = property;\n\t\t\t\tbreak;\n\t\t\tcase ConfigurationScope.LANGUAGE_OVERRIDABLE:\n\t\t\t\tresourceSettings.properties[key] = property;\n\t\t\t\tthis.resourceLanguageSettingsSchema.properties![key] = property;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tprivate removeFromSchema(key: string, property: IConfigurationPropertySchema): void {\n\t\tdelete allSettings.properties[key];\n\t\tswitch (property.scope) {\n\t\t\tcase ConfigurationScope.APPLICATION:\n\t\t\t\tdelete applicationSettings.properties[key];\n\t\t\t\tbreak;\n\t\t\tcase ConfigurationScope.MACHINE:\n\t\t\t\tdelete machineSettings.properties[key];\n\t\t\t\tbreak;\n\t\t\tcase ConfigurationScope.MACHINE_OVERRIDABLE:\n\t\t\t\tdelete machineOverridableSettings.properties[key];\n\t\t\t\tbreak;\n\t\t\tcase ConfigurationScope.WINDOW:\n\t\t\t\tdelete windowSettings.properties[key];\n\t\t\t\tbreak;\n\t\t\tcase ConfigurationScope.RESOURCE:\n\t\t\tcase ConfigurationScope.LANGUAGE_OVERRIDABLE:\n\t\t\t\tdelete resourceSettings.properties[key];\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tprivate updateOverridePropertyPatternKey(): void {\n\t\tfor (const overrideIdentifier of this.overrideIdentifiers.values()) {\n\t\t\tconst overrideIdentifierProperty = `[${overrideIdentifier}]`;\n\t\t\tconst resourceLanguagePropertiesSchema: IJSONSchema = {\n\t\t\t\ttype: 'object',\n\t\t\t\tdescription: nls.localize('overrideSettings.defaultDescription', \"Configure editor settings to be overridden for a language.\"),\n\t\t\t\terrorMessage: nls.localize('overrideSettings.errorMessage', \"This setting does not support per-language configuration.\"),\n\t\t\t\t$ref: resourceLanguageSettingsSchemaId,\n\t\t\t};\n\t\t\tthis.updatePropertyDefaultValue(overrideIdentifierProperty, resourceLanguagePropertiesSchema);\n\t\t\tallSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n\t\t\tapplicationSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n\t\t\tmachineSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n\t\t\tmachineOverridableSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n\t\t\twindowSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n\t\t\tresourceSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n\t\t}\n\t\tthis._onDidSchemaChange.fire();\n\t}\n\n\tprivate updatePropertyDefaultValue(key: string, property: IConfigurationPropertySchema): void {\n\t\tlet defaultValue = this.defaultValues[key];\n\t\tif (types.isUndefined(defaultValue)) {\n\t\t\tdefaultValue = property.default;\n\t\t}\n\t\tif (types.isUndefined(defaultValue)) {\n\t\t\tdefaultValue = getDefaultValue(property.type);\n\t\t}\n\t\tproperty.default = defaultValue;\n\t}\n}\n\nconst OVERRIDE_PROPERTY = '\\\\[.*\\\\]$';\nexport const OVERRIDE_PROPERTY_PATTERN = new RegExp(OVERRIDE_PROPERTY);\n\nexport function overrideIdentifierFromKey(key: string): string {\n\treturn key.substring(1, key.length - 1);\n}\n\nexport function getDefaultValue(type: string | string[] | undefined): any {\n\tconst t = Array.isArray(type) ? (<string[]>type)[0] : <string>type;\n\tswitch (t) {\n\t\tcase 'boolean':\n\t\t\treturn false;\n\t\tcase 'integer':\n\t\tcase 'number':\n\t\t\treturn 0;\n\t\tcase 'string':\n\t\t\treturn '';\n\t\tcase 'array':\n\t\t\treturn [];\n\t\tcase 'object':\n\t\t\treturn {};\n\t\tdefault:\n\t\t\treturn null;\n\t}\n}\n\n\nconst configurationRegistry = new ConfigurationRegistry();\nRegistry.add(Extensions.Configuration, configurationRegistry);\n\nexport function validateProperty(property: string): string | null {\n\tif (!property.trim()) {\n\t\treturn nls.localize('config.property.empty', \"Cannot register an empty property\");\n\t}\n\tif (OVERRIDE_PROPERTY_PATTERN.test(property)) {\n\t\treturn nls.localize('config.property.languageDefault', \"Cannot register '{0}'. This matches property pattern '\\\\\\\\[.*\\\\\\\\]$' for describing language specific editor settings. Use 'configurationDefaults' contribution.\", property);\n\t}\n\tif (configurationRegistry.getConfigurationProperties()[property] !== undefined) {\n\t\treturn nls.localize('config.property.duplicate', \"Cannot register '{0}'. This property is already registered.\", property);\n\t}\n\treturn null;\n}\n\nexport function getScopes(): [string, ConfigurationScope | undefined][] {\n\tconst scopes: [string, ConfigurationScope | undefined][] = [];\n\tconst configurationProperties = configurationRegistry.getConfigurationProperties();\n\tfor (const key of Object.keys(configurationProperties)) {\n\t\tscopes.push([key, configurationProperties[key].scope]);\n\t}\n\tscopes.push(['launch', ConfigurationScope.RESOURCE]);\n\tscopes.push(['task', ConfigurationScope.RESOURCE]);\n\treturn scopes;\n}\n"]}