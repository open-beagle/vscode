{"version":3,"file":"webviewPortMapping.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/webview/common/webviewPortMapping.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAahG;;OAEG;IACH,MAAa,yBAAyB;QAIrC,YACkB,qBAA4C,EAC5C,YAAkD,EAClD,aAA6B;YAF7B,0BAAqB,GAArB,qBAAqB,CAAuB;YAC5C,iBAAY,GAAZ,YAAY,CAAsC;YAClD,kBAAa,GAAb,aAAa,CAAgB;YAL9B,aAAQ,GAAG,IAAI,GAAG,EAAwB,CAAC;QAMxD,CAAC;QAEE,KAAK,CAAC,WAAW,CAAC,gBAA6C,EAAE,GAAW;YAClF,MAAM,GAAG,GAAG,SAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC3B,MAAM,oBAAoB,GAAG,CAAA,GAAA,kDAAyC,CAAA,CAAC,GAAG,CAAC,CAAC;YAC5E,IAAI,CAAC,oBAAoB,EAAE;gBAC1B,OAAO,SAAS,CAAC;aACjB;YAED,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,YAAY,EAAE,EAAE;gBAC1C,IAAI,OAAO,CAAC,WAAW,KAAK,oBAAoB,CAAC,IAAI,EAAE;oBACtD,MAAM,iBAAiB,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAC;oBACvD,IAAI,iBAAiB,IAAI,iBAAiB,CAAC,MAAM,KAAK,iBAAO,CAAC,YAAY,EAAE;wBAC3E,MAAM,MAAM,GAAG,gBAAgB,IAAI,MAAM,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,EAAE,OAAO,CAAC,iBAAiB,CAAC,CAAC;wBAC7G,IAAI,MAAM,EAAE;4BACX,IAAI,MAAM,CAAC,eAAe,KAAK,OAAO,CAAC,WAAW,EAAE;gCACnD,OAAO,SAAS,CAAC;6BACjB;4BACD,OAAO,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC;gCACzB,SAAS,EAAE,aAAa,MAAM,CAAC,eAAe,EAAE;6BAChD,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;yBACnB;qBACD;oBAED,IAAI,OAAO,CAAC,WAAW,KAAK,OAAO,CAAC,iBAAiB,EAAE;wBACtD,OAAO,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC;4BACzB,SAAS,EAAE,GAAG,oBAAoB,CAAC,OAAO,IAAI,OAAO,CAAC,iBAAiB,EAAE;yBACzE,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;qBACnB;iBACD;aACD;YAED,OAAO,SAAS,CAAC;QAClB,CAAC;QAED,KAAK,CAAC,OAAO;YACZ,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,EAAE;gBAC5C,MAAM,MAAM,CAAC,OAAO,EAAE,CAAC;aACvB;YACD,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;QACvB,CAAC;QAEO,KAAK,CAAC,iBAAiB,CAAC,eAAyB,EAAE,UAAkB;YAC5E,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YAC/C,IAAI,QAAQ,EAAE;gBACb,OAAO,QAAQ,CAAC;aAChB;YACD,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,EAAE,UAAU,EAAE,KAAK,IAAI,EAAE,CAAC,eAAe,EAAE,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;YACvH,IAAI,MAAM,EAAE;gBACX,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;aACtC;YACD,OAAO,MAAM,CAAC;QACf,CAAC;KACD;IA7DD,8DA6DC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { Schemas } from 'vs/base/common/network';\nimport { URI } from 'vs/base/common/uri';\nimport { IAddress } from 'vs/platform/remote/common/remoteAgentConnection';\nimport { extractLocalHostUriMetaDataForPortMapping, ITunnelService, RemoteTunnel } from 'vs/platform/remote/common/tunnel';\n\nexport interface IWebviewPortMapping {\n\treadonly webviewPort: number;\n\treadonly extensionHostPort: number;\n}\n\n/**\n * Manages port mappings for a single webview.\n */\nexport class WebviewPortMappingManager implements IDisposable {\n\n\tprivate readonly _tunnels = new Map<number, RemoteTunnel>();\n\n\tconstructor(\n\t\tprivate readonly _getExtensionLocation: () => URI | undefined,\n\t\tprivate readonly _getMappings: () => readonly IWebviewPortMapping[],\n\t\tprivate readonly tunnelService: ITunnelService\n\t) { }\n\n\tpublic async getRedirect(resolveAuthority: IAddress | null | undefined, url: string): Promise<string | undefined> {\n\t\tconst uri = URI.parse(url);\n\t\tconst requestLocalHostInfo = extractLocalHostUriMetaDataForPortMapping(uri);\n\t\tif (!requestLocalHostInfo) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tfor (const mapping of this._getMappings()) {\n\t\t\tif (mapping.webviewPort === requestLocalHostInfo.port) {\n\t\t\t\tconst extensionLocation = this._getExtensionLocation();\n\t\t\t\tif (extensionLocation && extensionLocation.scheme === Schemas.vscodeRemote) {\n\t\t\t\t\tconst tunnel = resolveAuthority && await this.getOrCreateTunnel(resolveAuthority, mapping.extensionHostPort);\n\t\t\t\t\tif (tunnel) {\n\t\t\t\t\t\tif (tunnel.tunnelLocalPort === mapping.webviewPort) {\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn encodeURI(uri.with({\n\t\t\t\t\t\t\tauthority: `127.0.0.1:${tunnel.tunnelLocalPort}`,\n\t\t\t\t\t\t}).toString(true));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (mapping.webviewPort !== mapping.extensionHostPort) {\n\t\t\t\t\treturn encodeURI(uri.with({\n\t\t\t\t\t\tauthority: `${requestLocalHostInfo.address}:${mapping.extensionHostPort}`\n\t\t\t\t\t}).toString(true));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tasync dispose() {\n\t\tfor (const tunnel of this._tunnels.values()) {\n\t\t\tawait tunnel.dispose();\n\t\t}\n\t\tthis._tunnels.clear();\n\t}\n\n\tprivate async getOrCreateTunnel(remoteAuthority: IAddress, remotePort: number): Promise<RemoteTunnel | undefined> {\n\t\tconst existing = this._tunnels.get(remotePort);\n\t\tif (existing) {\n\t\t\treturn existing;\n\t\t}\n\t\tconst tunnel = await this.tunnelService.openTunnel({ getAddress: async () => remoteAuthority }, undefined, remotePort);\n\t\tif (tunnel) {\n\t\t\tthis._tunnels.set(remotePort, tunnel);\n\t\t}\n\t\treturn tunnel;\n\t}\n}\n"]}