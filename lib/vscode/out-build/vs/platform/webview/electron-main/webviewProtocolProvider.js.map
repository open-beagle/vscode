{"version":3,"file":"webviewProtocolProvider.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/webview/electron-main/webviewProtocolProvider.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAShG,MAAa,uBAAwB,SAAQ,sBAAU;QAWtD;YACC,KAAK,EAAE,CAAC;YAER,MAAM,IAAI,GAAG,kBAAO,CAAC,aAAa,CAAC,0CAAkB,CAAC,CAAC;YAEvD,6CAA6C;YAC7C,MAAM,cAAc,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC5D,mBAAQ,CAAC,oBAAoB,CAAC,iBAAO,CAAC,aAAa,EAAE,cAAc,CAAC,CAAC;YACrE,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,iBAAO,CAAC,aAAa,EAAE,cAAc,CAAC,CAAC;QAC3E,CAAC;QAEO,KAAK,CAAC,oBAAoB,CACjC,OAAiC,EACjC,QAAgE;YAEhE,IAAI;gBACH,MAAM,GAAG,GAAG,SAAG,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;gBACnC,MAAM,KAAK,GAAG,uBAAuB,CAAC,qBAAqB,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAC1E,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;oBAC9B,MAAM,oBAAoB,GAAG,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC;wBACpE,CAAC,CAAC,qDAAqD,KAAK,EAAE;wBAC9D,CAAC,CAAC,4CAA4C,KAAK,EAAE,CAAC;oBAEvD,MAAM,GAAG,GAAG,oBAAU,CAAC,SAAS,CAAC,oBAAoB,EAAE,OAAO,CAAC,CAAC;oBAChE,OAAO,QAAQ,CAAC,kBAAkB,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;iBAChD;aACD;YAAC,WAAM;gBACP,OAAO;aACP;YACD,QAAQ,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,yFAAyF,EAAE,CAAC,CAAC;QACpH,CAAC;;IAzCF,0DA0CC;IAxCe,6CAAqB,GAAG,IAAI,GAAG,CAAC;QAC9C,CAAC,aAAa,EAAE,YAAY,CAAC;QAC7B,CAAC,YAAY,EAAE,WAAW,CAAC;QAC3B,CAAC,8BAA8B,EAAE,YAAY,CAAC;QAC9C,CAAC,UAAU,EAAE,SAAS,CAAC;QACvB,CAAC,UAAU,EAAE,SAAS,CAAC;QACvB,CAAC,oBAAoB,EAAE,mBAAmB,CAAC;KAC3C,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { protocol, session } from 'electron';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { FileAccess, Schemas } from 'vs/base/common/network';\nimport { URI } from 'vs/base/common/uri';\nimport { webviewPartitionId } from 'vs/platform/webview/common/webviewManagerService';\n\n\nexport class WebviewProtocolProvider extends Disposable {\n\n\tprivate static validWebviewFilePaths = new Map([\n\t\t['/index.html', 'index.html'],\n\t\t['/fake.html', 'fake.html'],\n\t\t['/electron-browser-index.html', 'index.html'],\n\t\t['/main.js', 'main.js'],\n\t\t['/host.js', 'host.js'],\n\t\t['/service-worker.js', 'service-worker.js'],\n\t]);\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tconst sess = session.fromPartition(webviewPartitionId);\n\n\t\t// Register the protocol loading webview html\n\t\tconst webviewHandler = this.handleWebviewRequest.bind(this);\n\t\tprotocol.registerFileProtocol(Schemas.vscodeWebview, webviewHandler);\n\t\tsess.protocol.registerFileProtocol(Schemas.vscodeWebview, webviewHandler);\n\t}\n\n\tprivate async handleWebviewRequest(\n\t\trequest: Electron.ProtocolRequest,\n\t\tcallback: (response: string | Electron.ProtocolResponse) => void\n\t) {\n\t\ttry {\n\t\t\tconst uri = URI.parse(request.url);\n\t\t\tconst entry = WebviewProtocolProvider.validWebviewFilePaths.get(uri.path);\n\t\t\tif (typeof entry === 'string') {\n\t\t\t\tconst relativeResourcePath = uri.path.startsWith('/electron-browser')\n\t\t\t\t\t? `vs/workbench/contrib/webview/electron-browser/pre/${entry}`\n\t\t\t\t\t: `vs/workbench/contrib/webview/browser/pre/${entry}`;\n\n\t\t\t\tconst url = FileAccess.asFileUri(relativeResourcePath, require);\n\t\t\t\treturn callback(decodeURIComponent(url.fsPath));\n\t\t\t}\n\t\t} catch {\n\t\t\t// noop\n\t\t}\n\t\tcallback({ error: -10 /* ACCESS_DENIED - https://cs.chromium.org/chromium/src/net/base/net_error_list.h?l=32 */ });\n\t}\n}\n"]}