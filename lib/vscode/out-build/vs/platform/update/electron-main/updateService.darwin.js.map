{"version":3,"file":"updateService.darwin.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/update/electron-main/updateService.darwin.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as electron from 'electron';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { Event } from 'vs/base/common/event';\nimport { memoize } from 'vs/base/common/decorators';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ILifecycleMainService } from 'vs/platform/lifecycle/electron-main/lifecycleMainService';\nimport { State, IUpdate, StateType, UpdateType } from 'vs/platform/update/common/update';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IEnvironmentMainService } from 'vs/platform/environment/electron-main/environmentMainService';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { AbstractUpdateService, createUpdateURL, UpdateNotAvailableClassification } from 'vs/platform/update/electron-main/abstractUpdateService';\nimport { IRequestService } from 'vs/platform/request/common/request';\nimport { IProductService } from 'vs/platform/product/common/productService';\n\nexport class DarwinUpdateService extends AbstractUpdateService {\n\n\tprivate readonly disposables = new DisposableStore();\n\n\t@memoize private get onRawError(): Event<string> { return Event.fromNodeEventEmitter(electron.autoUpdater, 'error', (_, message) => message); }\n\t@memoize private get onRawUpdateNotAvailable(): Event<void> { return Event.fromNodeEventEmitter<void>(electron.autoUpdater, 'update-not-available'); }\n\t@memoize private get onRawUpdateAvailable(): Event<IUpdate> { return Event.fromNodeEventEmitter(electron.autoUpdater, 'update-available', (_, url, version) => ({ url, version, productVersion: version })); }\n\t@memoize private get onRawUpdateDownloaded(): Event<IUpdate> { return Event.fromNodeEventEmitter(electron.autoUpdater, 'update-downloaded', (_, releaseNotes, version, date) => ({ releaseNotes, version, productVersion: version, date })); }\n\n\tconstructor(\n\t\t@ILifecycleMainService lifecycleMainService: ILifecycleMainService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IEnvironmentMainService environmentMainService: IEnvironmentMainService,\n\t\t@IRequestService requestService: IRequestService,\n\t\t@ILogService logService: ILogService,\n\t\t@IProductService productService: IProductService\n\t) {\n\t\tsuper(lifecycleMainService, configurationService, environmentMainService, requestService, logService, productService);\n\t}\n\n\toverride initialize(): void {\n\t\tsuper.initialize();\n\t\tthis.onRawError(this.onError, this, this.disposables);\n\t\tthis.onRawUpdateAvailable(this.onUpdateAvailable, this, this.disposables);\n\t\tthis.onRawUpdateDownloaded(this.onUpdateDownloaded, this, this.disposables);\n\t\tthis.onRawUpdateNotAvailable(this.onUpdateNotAvailable, this, this.disposables);\n\t}\n\n\tprivate onError(err: string): void {\n\t\tthis.logService.error('UpdateService error:', err);\n\n\t\t// only show message when explicitly checking for updates\n\t\tconst shouldShowMessage = this.state.type === StateType.CheckingForUpdates ? this.state.explicit : true;\n\t\tconst message: string | undefined = shouldShowMessage ? err : undefined;\n\t\tthis.setState(State.Idle(UpdateType.Archive, message));\n\t}\n\n\tprotected buildUpdateFeedUrl(quality: string): string | undefined {\n\t\tlet assetID: string;\n\t\tif (!this.productService.darwinUniversalAssetId) {\n\t\t\tassetID = process.arch === 'x64' ? 'darwin' : 'darwin-arm64';\n\t\t} else {\n\t\t\tassetID = this.productService.darwinUniversalAssetId;\n\t\t}\n\t\tconst url = createUpdateURL(assetID, quality, this.productService);\n\t\ttry {\n\t\t\telectron.autoUpdater.setFeedURL({ url });\n\t\t} catch (e) {\n\t\t\t// application is very likely not signed\n\t\t\tthis.logService.error('Failed to set update feed URL', e);\n\t\t\treturn undefined;\n\t\t}\n\t\treturn url;\n\t}\n\n\tprotected doCheckForUpdates(context: any): void {\n\t\tthis.setState(State.CheckingForUpdates(context));\n\t\telectron.autoUpdater.checkForUpdates();\n\t}\n\n\tprivate onUpdateAvailable(update: IUpdate): void {\n\t\tif (this.state.type !== StateType.CheckingForUpdates) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setState(State.Downloading(update));\n\t}\n\n\tprivate onUpdateDownloaded(update: IUpdate): void {\n\t\tif (this.state.type !== StateType.Downloading) {\n\t\t\treturn;\n\t\t}\n\n\t\ttype UpdateDownloadedClassification = {\n\t\t\tversion: { classification: 'SystemMetaData', purpose: 'FeatureInsight' };\n\t\t};\n\t\tthis.telemetryService.publicLog2<{ version: String }, UpdateDownloadedClassification>('update:downloaded', { version: update.version });\n\n\t\tthis.setState(State.Ready(update));\n\t}\n\n\tprivate onUpdateNotAvailable(): void {\n\t\tif (this.state.type !== StateType.CheckingForUpdates) {\n\t\t\treturn;\n\t\t}\n\t\tthis.telemetryService.publicLog2<{ explicit: boolean }, UpdateNotAvailableClassification>('update:notAvailable', { explicit: this.state.explicit });\n\n\t\tthis.setState(State.Idle(UpdateType.Archive));\n\t}\n\n\tprotected override doQuitAndInstall(): void {\n\t\tthis.logService.trace('update#quitAndInstall(): running raw#quitAndInstall()');\n\t\telectron.autoUpdater.quitAndInstall();\n\t}\n\n\tdispose(): void {\n\t\tthis.disposables.dispose();\n\t}\n}\n"]}