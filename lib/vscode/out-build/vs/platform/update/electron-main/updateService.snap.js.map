{"version":3,"file":"updateService.snap.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/update/electron-main/updateService.snap.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { timeout } from 'vs/base/common/async';\nimport { ILifecycleMainService } from 'vs/platform/lifecycle/electron-main/lifecycleMainService';\nimport { IUpdateService, State, StateType, AvailableForDownload, UpdateType } from 'vs/platform/update/common/update';\nimport { IEnvironmentMainService } from 'vs/platform/environment/electron-main/environmentMainService';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport * as path from 'vs/base/common/path';\nimport { realpath, watch } from 'fs';\nimport { spawn } from 'child_process';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { UpdateNotAvailableClassification } from 'vs/platform/update/electron-main/abstractUpdateService';\n\nabstract class AbstractUpdateService implements IUpdateService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate _state: State = State.Uninitialized;\n\n\tprivate readonly _onStateChange = new Emitter<State>();\n\treadonly onStateChange: Event<State> = this._onStateChange.event;\n\n\tget state(): State {\n\t\treturn this._state;\n\t}\n\n\tprotected setState(state: State): void {\n\t\tthis.logService.info('update#setState', state.type);\n\t\tthis._state = state;\n\t\tthis._onStateChange.fire(state);\n\t}\n\n\tconstructor(\n\t\t@ILifecycleMainService private readonly lifecycleMainService: ILifecycleMainService,\n\t\t@IEnvironmentMainService environmentMainService: IEnvironmentMainService,\n\t\t@ILogService protected logService: ILogService,\n\t) {\n\t\tif (environmentMainService.disableUpdates) {\n\t\t\tthis.logService.info('update#ctor - updates are disabled');\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setState(State.Idle(this.getUpdateType()));\n\n\t\t// Start checking for updates after 30 seconds\n\t\tthis.scheduleCheckForUpdates(30 * 1000).then(undefined, err => this.logService.error(err));\n\t}\n\n\tprivate scheduleCheckForUpdates(delay = 60 * 60 * 1000): Promise<void> {\n\t\treturn timeout(delay)\n\t\t\t.then(() => this.checkForUpdates(false))\n\t\t\t.then(() => {\n\t\t\t\t// Check again after 1 hour\n\t\t\t\treturn this.scheduleCheckForUpdates(60 * 60 * 1000);\n\t\t\t});\n\t}\n\n\tasync checkForUpdates(explicit: boolean): Promise<void> {\n\t\tthis.logService.trace('update#checkForUpdates, state = ', this.state.type);\n\n\t\tif (this.state.type !== StateType.Idle) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.doCheckForUpdates(explicit);\n\t}\n\n\tasync downloadUpdate(): Promise<void> {\n\t\tthis.logService.trace('update#downloadUpdate, state = ', this.state.type);\n\n\t\tif (this.state.type !== StateType.AvailableForDownload) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.doDownloadUpdate(this.state);\n\t}\n\n\tprotected doDownloadUpdate(state: AvailableForDownload): Promise<void> {\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tasync applyUpdate(): Promise<void> {\n\t\tthis.logService.trace('update#applyUpdate, state = ', this.state.type);\n\n\t\tif (this.state.type !== StateType.Downloaded) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.doApplyUpdate();\n\t}\n\n\tprotected doApplyUpdate(): Promise<void> {\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tquitAndInstall(): Promise<void> {\n\t\tthis.logService.trace('update#quitAndInstall, state = ', this.state.type);\n\n\t\tif (this.state.type !== StateType.Ready) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\tthis.logService.trace('update#quitAndInstall(): before lifecycle quit()');\n\n\t\tthis.lifecycleMainService.quit(true /* from update */).then(vetod => {\n\t\t\tthis.logService.trace(`update#quitAndInstall(): after lifecycle quit() with veto: ${vetod}`);\n\t\t\tif (vetod) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.logService.trace('update#quitAndInstall(): running raw#quitAndInstall()');\n\t\t\tthis.doQuitAndInstall();\n\t\t});\n\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\n\tprotected getUpdateType(): UpdateType {\n\t\treturn UpdateType.Snap;\n\t}\n\n\tprotected doQuitAndInstall(): void {\n\t\t// noop\n\t}\n\n\tabstract isLatestVersion(): Promise<boolean | undefined>;\n\tprotected abstract doCheckForUpdates(context: any): void;\n}\n\nexport class SnapUpdateService extends AbstractUpdateService {\n\n\tconstructor(\n\t\tprivate snap: string,\n\t\tprivate snapRevision: string,\n\t\t@ILifecycleMainService lifecycleMainService: ILifecycleMainService,\n\t\t@IEnvironmentMainService environmentMainService: IEnvironmentMainService,\n\t\t@ILogService logService: ILogService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService\n\t) {\n\t\tsuper(lifecycleMainService, environmentMainService, logService);\n\n\t\tconst watcher = watch(path.dirname(this.snap));\n\t\tconst onChange = Event.fromNodeEventEmitter(watcher, 'change', (_, fileName: string) => fileName);\n\t\tconst onCurrentChange = Event.filter(onChange, n => n === 'current');\n\t\tconst onDebouncedCurrentChange = Event.debounce(onCurrentChange, (_, e) => e, 2000);\n\t\tconst listener = onDebouncedCurrentChange(() => this.checkForUpdates(false));\n\n\t\tlifecycleMainService.onWillShutdown(() => {\n\t\t\tlistener.dispose();\n\t\t\twatcher.close();\n\t\t});\n\t}\n\n\tprotected doCheckForUpdates(): void {\n\t\tthis.setState(State.CheckingForUpdates(false));\n\t\tthis.isUpdateAvailable().then(result => {\n\t\t\tif (result) {\n\t\t\t\tthis.setState(State.Ready({ version: 'something', productVersion: 'something' }));\n\t\t\t} else {\n\t\t\t\tthis.telemetryService.publicLog2<{ explicit: boolean }, UpdateNotAvailableClassification>('update:notAvailable', { explicit: false });\n\n\t\t\t\tthis.setState(State.Idle(UpdateType.Snap));\n\t\t\t}\n\t\t}, err => {\n\t\t\tthis.logService.error(err);\n\t\t\tthis.telemetryService.publicLog2<{ explicit: boolean }, UpdateNotAvailableClassification>('update:notAvailable', { explicit: false });\n\t\t\tthis.setState(State.Idle(UpdateType.Snap, err.message || err));\n\t\t});\n\t}\n\n\tprotected override doQuitAndInstall(): void {\n\t\tthis.logService.trace('update#quitAndInstall(): running raw#quitAndInstall()');\n\n\t\t// Allow 3 seconds for VS Code to close\n\t\tspawn('sleep 3 && ' + path.basename(process.argv[0]), {\n\t\t\tshell: true,\n\t\t\tdetached: true,\n\t\t\tstdio: 'ignore',\n\t\t});\n\t}\n\n\tprivate async isUpdateAvailable(): Promise<boolean> {\n\t\tconst resolvedCurrentSnapPath = await new Promise<string>((c, e) => realpath(`${path.dirname(this.snap)}/current`, (err, r) => err ? e(err) : c(r)));\n\t\tconst currentRevision = path.basename(resolvedCurrentSnapPath);\n\t\treturn this.snapRevision !== currentRevision;\n\t}\n\n\tisLatestVersion(): Promise<boolean | undefined> {\n\t\treturn this.isUpdateAvailable().then(undefined, err => {\n\t\t\tthis.logService.error('update#checkForSnapUpdate(): Could not get realpath of application.');\n\t\t\treturn undefined;\n\t\t});\n\t}\n}\n"]}