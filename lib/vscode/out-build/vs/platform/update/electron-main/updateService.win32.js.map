{"version":3,"file":"updateService.win32.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/update/electron-main/updateService.win32.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as fs from 'fs';\nimport * as path from 'vs/base/common/path';\nimport * as pfs from 'vs/base/node/pfs';\nimport { memoize } from 'vs/base/common/decorators';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ILifecycleMainService } from 'vs/platform/lifecycle/electron-main/lifecycleMainService';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { State, IUpdate, StateType, AvailableForDownload, UpdateType } from 'vs/platform/update/common/update';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IEnvironmentMainService } from 'vs/platform/environment/electron-main/environmentMainService';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { createUpdateURL, AbstractUpdateService, UpdateNotAvailableClassification } from 'vs/platform/update/electron-main/abstractUpdateService';\nimport { IRequestService, asJson } from 'vs/platform/request/common/request';\nimport { checksum } from 'vs/base/node/crypto';\nimport { tmpdir } from 'os';\nimport { spawn } from 'child_process';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { timeout } from 'vs/base/common/async';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { URI } from 'vs/base/common/uri';\nimport { INativeHostMainService } from 'vs/platform/native/electron-main/nativeHostMainService';\n\nasync function pollUntil(fn: () => boolean, millis = 1000): Promise<void> {\n\twhile (!fn()) {\n\t\tawait timeout(millis);\n\t}\n}\n\ninterface IAvailableUpdate {\n\tpackagePath: string;\n\tupdateFilePath?: string;\n}\n\nlet _updateType: UpdateType | undefined = undefined;\nfunction getUpdateType(): UpdateType {\n\tif (typeof _updateType === 'undefined') {\n\t\t_updateType = fs.existsSync(path.join(path.dirname(process.execPath), 'unins000.exe'))\n\t\t\t? UpdateType.Setup\n\t\t\t: UpdateType.Archive;\n\t}\n\n\treturn _updateType;\n}\n\nexport class Win32UpdateService extends AbstractUpdateService {\n\n\tprivate availableUpdate: IAvailableUpdate | undefined;\n\n\t@memoize\n\tget cachePath(): Promise<string> {\n\t\tconst result = path.join(tmpdir(), `vscode-update-${this.productService.target}-${process.arch}`);\n\t\treturn fs.promises.mkdir(result, { recursive: true }).then(() => result);\n\t}\n\n\tconstructor(\n\t\t@ILifecycleMainService lifecycleMainService: ILifecycleMainService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IEnvironmentMainService environmentMainService: IEnvironmentMainService,\n\t\t@IRequestService requestService: IRequestService,\n\t\t@ILogService logService: ILogService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@INativeHostMainService private readonly nativeHostMainService: INativeHostMainService,\n\t\t@IProductService productService: IProductService\n\t) {\n\t\tsuper(lifecycleMainService, configurationService, environmentMainService, requestService, logService, productService);\n\t}\n\n\toverride initialize(): void {\n\t\tsuper.initialize();\n\n\t\tif (getUpdateType() === UpdateType.Setup) {\n\t\t\t/* __GDPR__\n\t\t\t\t\"update:win32SetupTarget\" : {\n\t\t\t\t\t\"target\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\t\t\t\t}\n\t\t\t*/\n\t\t\t/* __GDPR__\n\t\t\t\t\"update:win<NUMBER>SetupTarget\" : {\n\t\t\t\t\t\"target\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\t\t\t\t}\n\t\t\t*/\n\t\t\tthis.telemetryService.publicLog('update:win32SetupTarget', { target: this.productService.target });\n\t\t}\n\t}\n\n\tprotected buildUpdateFeedUrl(quality: string): string | undefined {\n\t\tlet platform = 'win32';\n\n\t\tif (process.arch !== 'ia32') {\n\t\t\tplatform += `-${process.arch}`;\n\t\t}\n\n\t\tif (getUpdateType() === UpdateType.Archive) {\n\t\t\tplatform += '-archive';\n\t\t} else if (this.productService.target === 'user') {\n\t\t\tplatform += '-user';\n\t\t}\n\n\t\treturn createUpdateURL(platform, quality, this.productService);\n\t}\n\n\tprotected doCheckForUpdates(context: any): void {\n\t\tif (!this.url) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setState(State.CheckingForUpdates(context));\n\n\t\tthis.requestService.request({ url: this.url }, CancellationToken.None)\n\t\t\t.then<IUpdate | null>(asJson)\n\t\t\t.then(update => {\n\t\t\t\tconst updateType = getUpdateType();\n\n\t\t\t\tif (!update || !update.url || !update.version || !update.productVersion) {\n\t\t\t\t\tthis.telemetryService.publicLog2<{ explicit: boolean }, UpdateNotAvailableClassification>('update:notAvailable', { explicit: !!context });\n\n\t\t\t\t\tthis.setState(State.Idle(updateType));\n\t\t\t\t\treturn Promise.resolve(null);\n\t\t\t\t}\n\n\t\t\t\tif (updateType === UpdateType.Archive) {\n\t\t\t\t\tthis.setState(State.AvailableForDownload(update));\n\t\t\t\t\treturn Promise.resolve(null);\n\t\t\t\t}\n\n\t\t\t\tthis.setState(State.Downloading(update));\n\n\t\t\t\treturn this.cleanup(update.version).then(() => {\n\t\t\t\t\treturn this.getUpdatePackagePath(update.version).then(updatePackagePath => {\n\t\t\t\t\t\treturn pfs.exists(updatePackagePath).then(exists => {\n\t\t\t\t\t\t\tif (exists) {\n\t\t\t\t\t\t\t\treturn Promise.resolve(updatePackagePath);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst url = update.url;\n\t\t\t\t\t\t\tconst hash = update.hash;\n\t\t\t\t\t\t\tconst downloadPath = `${updatePackagePath}.tmp`;\n\n\t\t\t\t\t\t\treturn this.requestService.request({ url }, CancellationToken.None)\n\t\t\t\t\t\t\t\t.then(context => this.fileService.writeFile(URI.file(downloadPath), context.stream))\n\t\t\t\t\t\t\t\t.then(hash ? () => checksum(downloadPath, update.hash) : () => undefined)\n\t\t\t\t\t\t\t\t.then(() => fs.promises.rename(downloadPath, updatePackagePath))\n\t\t\t\t\t\t\t\t.then(() => updatePackagePath);\n\t\t\t\t\t\t});\n\t\t\t\t\t}).then(packagePath => {\n\t\t\t\t\t\tconst fastUpdatesEnabled = this.configurationService.getValue<boolean>('update.enableWindowsBackgroundUpdates');\n\n\t\t\t\t\t\tthis.availableUpdate = { packagePath };\n\n\t\t\t\t\t\tif (fastUpdatesEnabled && update.supportsFastUpdate) {\n\t\t\t\t\t\t\tif (this.productService.target === 'user') {\n\t\t\t\t\t\t\t\tthis.doApplyUpdate();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.setState(State.Downloaded(update));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.setState(State.Ready(update));\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t})\n\t\t\t.then(undefined, err => {\n\t\t\t\tthis.logService.error(err);\n\t\t\t\tthis.telemetryService.publicLog2<{ explicit: boolean }, UpdateNotAvailableClassification>('update:notAvailable', { explicit: !!context });\n\n\t\t\t\t// only show message when explicitly checking for updates\n\t\t\t\tconst message: string | undefined = !!context ? (err.message || err) : undefined;\n\t\t\t\tthis.setState(State.Idle(getUpdateType(), message));\n\t\t\t});\n\t}\n\n\tprotected override async doDownloadUpdate(state: AvailableForDownload): Promise<void> {\n\t\tif (state.update.url) {\n\t\t\tthis.nativeHostMainService.openExternal(undefined, state.update.url);\n\t\t}\n\t\tthis.setState(State.Idle(getUpdateType()));\n\t}\n\n\tprivate async getUpdatePackagePath(version: string): Promise<string> {\n\t\tconst cachePath = await this.cachePath;\n\t\treturn path.join(cachePath, `CodeSetup-${this.productService.quality}-${version}.exe`);\n\t}\n\n\tprivate async cleanup(exceptVersion: string | null = null): Promise<any> {\n\t\tconst filter = exceptVersion ? (one: string) => !(new RegExp(`${this.productService.quality}-${exceptVersion}\\\\.exe$`).test(one)) : () => true;\n\n\t\tconst cachePath = await this.cachePath;\n\t\tconst versions = await pfs.readdir(cachePath);\n\n\t\tconst promises = versions.filter(filter).map(async one => {\n\t\t\ttry {\n\t\t\t\tawait fs.promises.unlink(path.join(cachePath, one));\n\t\t\t} catch (err) {\n\t\t\t\t// ignore\n\t\t\t}\n\t\t});\n\n\t\tawait Promise.all(promises);\n\t}\n\n\tprotected override async doApplyUpdate(): Promise<void> {\n\t\tif (this.state.type !== StateType.Downloaded && this.state.type !== StateType.Downloading) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\tif (!this.availableUpdate) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\tconst update = this.state.update;\n\t\tthis.setState(State.Updating(update));\n\n\t\tconst cachePath = await this.cachePath;\n\n\t\tthis.availableUpdate.updateFilePath = path.join(cachePath, `CodeSetup-${this.productService.quality}-${update.version}.flag`);\n\n\t\tawait pfs.writeFile(this.availableUpdate.updateFilePath, 'flag');\n\t\tconst child = spawn(this.availableUpdate.packagePath, ['/verysilent', `/update=\"${this.availableUpdate.updateFilePath}\"`, '/nocloseapplications', '/mergetasks=runcode,!desktopicon,!quicklaunchicon'], {\n\t\t\tdetached: true,\n\t\t\tstdio: ['ignore', 'ignore', 'ignore'],\n\t\t\twindowsVerbatimArguments: true\n\t\t});\n\n\t\tchild.once('exit', () => {\n\t\t\tthis.availableUpdate = undefined;\n\t\t\tthis.setState(State.Idle(getUpdateType()));\n\t\t});\n\n\t\tconst readyMutexName = `${this.productService.win32MutexName}-ready`;\n\t\tconst mutex = await import('windows-mutex');\n\n\t\t// poll for mutex-ready\n\t\tpollUntil(() => mutex.isActive(readyMutexName))\n\t\t\t.then(() => this.setState(State.Ready(update)));\n\t}\n\n\tprotected override doQuitAndInstall(): void {\n\t\tif (this.state.type !== StateType.Ready || !this.availableUpdate) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.logService.trace('update#quitAndInstall(): running raw#quitAndInstall()');\n\n\t\tif (this.state.update.supportsFastUpdate && this.availableUpdate.updateFilePath) {\n\t\t\tfs.unlinkSync(this.availableUpdate.updateFilePath);\n\t\t} else {\n\t\t\tspawn(this.availableUpdate.packagePath, ['/silent', '/mergetasks=runcode,!desktopicon,!quicklaunchicon'], {\n\t\t\t\tdetached: true,\n\t\t\t\tstdio: ['ignore', 'ignore', 'ignore']\n\t\t\t});\n\t\t}\n\t}\n\n\tprotected override getUpdateType(): UpdateType {\n\t\treturn getUpdateType();\n\t}\n}\n"]}