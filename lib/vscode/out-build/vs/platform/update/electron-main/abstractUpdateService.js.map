{"version":3,"file":"abstractUpdateService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/update/electron-main/abstractUpdateService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { timeout } from 'vs/base/common/async';\nimport { IConfigurationService, getMigratedSettingValue } from 'vs/platform/configuration/common/configuration';\nimport { ILifecycleMainService } from 'vs/platform/lifecycle/electron-main/lifecycleMainService';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IUpdateService, State, StateType, AvailableForDownload, UpdateType } from 'vs/platform/update/common/update';\nimport { IEnvironmentMainService } from 'vs/platform/environment/electron-main/environmentMainService';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IRequestService } from 'vs/platform/request/common/request';\nimport { CancellationToken } from 'vs/base/common/cancellation';\n\nexport function createUpdateURL(platform: string, quality: string, productService: IProductService): string {\n\treturn `${productService.updateUrl}/api/update/${platform}/${quality}/${productService.commit}`;\n}\n\nexport type UpdateNotAvailableClassification = {\n\texplicit: { classification: 'SystemMetaData', purpose: 'FeatureInsight', isMeasurement: true };\n};\n\nexport abstract class AbstractUpdateService implements IUpdateService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprotected url: string | undefined;\n\n\tprivate _state: State = State.Uninitialized;\n\n\tprivate readonly _onStateChange = new Emitter<State>();\n\treadonly onStateChange: Event<State> = this._onStateChange.event;\n\n\tget state(): State {\n\t\treturn this._state;\n\t}\n\n\tprotected setState(state: State): void {\n\t\tthis.logService.info('update#setState', state.type);\n\t\tthis._state = state;\n\t\tthis._onStateChange.fire(state);\n\t}\n\n\tconstructor(\n\t\t@ILifecycleMainService private readonly lifecycleMainService: ILifecycleMainService,\n\t\t@IConfigurationService protected configurationService: IConfigurationService,\n\t\t@IEnvironmentMainService private readonly environmentMainService: IEnvironmentMainService,\n\t\t@IRequestService protected requestService: IRequestService,\n\t\t@ILogService protected logService: ILogService,\n\t\t@IProductService protected readonly productService: IProductService\n\t) { }\n\n\t/**\n\t * This must be called before any other call. This is a performance\n\t * optimization, to avoid using extra CPU cycles before first window open.\n\t * https://github.com/microsoft/vscode/issues/89784\n\t */\n\tinitialize(): void {\n\t\tif (!this.environmentMainService.isBuilt) {\n\t\t\treturn; // updates are never enabled when running out of sources\n\t\t}\n\n\t\tif (this.environmentMainService.disableUpdates) {\n\t\t\tthis.logService.info('update#ctor - updates are disabled by the environment');\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.productService.updateUrl || !this.productService.commit) {\n\t\t\tthis.logService.info('update#ctor - updates are disabled as there is no update URL');\n\t\t\treturn;\n\t\t}\n\n\t\tconst updateMode = getMigratedSettingValue<string>(this.configurationService, 'update.mode', 'update.channel');\n\t\tconst quality = this.getProductQuality(updateMode);\n\n\t\tif (!quality) {\n\t\t\tthis.logService.info('update#ctor - updates are disabled by user preference');\n\t\t\treturn;\n\t\t}\n\n\t\tthis.url = this.buildUpdateFeedUrl(quality);\n\t\tif (!this.url) {\n\t\t\tthis.logService.info('update#ctor - updates are disabled as the update URL is badly formed');\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setState(State.Idle(this.getUpdateType()));\n\n\t\tif (updateMode === 'manual') {\n\t\t\tthis.logService.info('update#ctor - manual checks only; automatic updates are disabled by user preference');\n\t\t\treturn;\n\t\t}\n\n\t\tif (updateMode === 'start') {\n\t\t\tthis.logService.info('update#ctor - startup checks only; automatic updates are disabled by user preference');\n\n\t\t\t// Check for updates only once after 30 seconds\n\t\t\tsetTimeout(() => this.checkForUpdates(false), 30 * 1000);\n\t\t} else {\n\t\t\t// Start checking for updates after 30 seconds\n\t\t\tthis.scheduleCheckForUpdates(30 * 1000).then(undefined, err => this.logService.error(err));\n\t\t}\n\t}\n\n\tprivate getProductQuality(updateMode: string): string | undefined {\n\t\treturn updateMode === 'none' ? undefined : this.productService.quality;\n\t}\n\n\tprivate scheduleCheckForUpdates(delay = 60 * 60 * 1000): Promise<void> {\n\t\treturn timeout(delay)\n\t\t\t.then(() => this.checkForUpdates(false))\n\t\t\t.then(() => {\n\t\t\t\t// Check again after 1 hour\n\t\t\t\treturn this.scheduleCheckForUpdates(60 * 60 * 1000);\n\t\t\t});\n\t}\n\n\tasync checkForUpdates(explicit: boolean): Promise<void> {\n\t\tthis.logService.trace('update#checkForUpdates, state = ', this.state.type);\n\n\t\tif (this.state.type !== StateType.Idle) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.doCheckForUpdates(explicit);\n\t}\n\n\tasync downloadUpdate(): Promise<void> {\n\t\tthis.logService.trace('update#downloadUpdate, state = ', this.state.type);\n\n\t\tif (this.state.type !== StateType.AvailableForDownload) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.doDownloadUpdate(this.state);\n\t}\n\n\tprotected async doDownloadUpdate(state: AvailableForDownload): Promise<void> {\n\t\t// noop\n\t}\n\n\tasync applyUpdate(): Promise<void> {\n\t\tthis.logService.trace('update#applyUpdate, state = ', this.state.type);\n\n\t\tif (this.state.type !== StateType.Downloaded) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.doApplyUpdate();\n\t}\n\n\tprotected async doApplyUpdate(): Promise<void> {\n\t\t// noop\n\t}\n\n\tquitAndInstall(): Promise<void> {\n\t\tthis.logService.trace('update#quitAndInstall, state = ', this.state.type);\n\n\t\tif (this.state.type !== StateType.Ready) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\tthis.logService.trace('update#quitAndInstall(): before lifecycle quit()');\n\n\t\tthis.lifecycleMainService.quit(true /* from update */).then(vetod => {\n\t\t\tthis.logService.trace(`update#quitAndInstall(): after lifecycle quit() with veto: ${vetod}`);\n\t\t\tif (vetod) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.logService.trace('update#quitAndInstall(): running raw#quitAndInstall()');\n\t\t\tthis.doQuitAndInstall();\n\t\t});\n\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tisLatestVersion(): Promise<boolean | undefined> {\n\t\tif (!this.url) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\treturn this.requestService.request({ url: this.url }, CancellationToken.None).then(context => {\n\t\t\t// The update server replies with 204 (No Content) when no\n\t\t\t// update is available - that's all we want to know.\n\t\t\tif (context.res.statusCode === 204) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n\t}\n\n\tprotected getUpdateType(): UpdateType {\n\t\treturn UpdateType.Archive;\n\t}\n\n\tprotected doQuitAndInstall(): void {\n\t\t// noop\n\t}\n\n\tprotected abstract buildUpdateFeedUrl(quality: string): string | undefined;\n\tprotected abstract doCheckForUpdates(context: any): void;\n}\n"]}