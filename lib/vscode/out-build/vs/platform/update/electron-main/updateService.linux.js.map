{"version":3,"file":"updateService.linux.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/update/electron-main/updateService.linux.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAchG,IAAa,kBAAkB,GAA/B,MAAa,kBAAmB,SAAQ,6CAAqB;QAE5D,YACwB,oBAA2C,EAC3C,oBAA2C,EAC9B,gBAAmC,EAC9C,sBAA+C,EACvD,cAA+B,EACnC,UAAuB,EACK,qBAA6C,EACrE,cAA+B;YAEhD,KAAK,CAAC,oBAAoB,EAAE,oBAAoB,EAAE,sBAAsB,EAAE,cAAc,EAAE,UAAU,EAAE,cAAc,CAAC,CAAC;YAPlF,qBAAgB,GAAhB,gBAAgB,CAAmB;YAI9B,0BAAqB,GAArB,qBAAqB,CAAwB;QAIvF,CAAC;QAES,kBAAkB,CAAC,OAAe;YAC3C,OAAO,CAAA,GAAA,uCAAe,CAAA,CAAC,SAAS,OAAO,CAAC,IAAI,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;QAC/E,CAAC;QAES,iBAAiB,CAAC,OAAY;YACvC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE;gBACd,OAAO;aACP;YAED,IAAI,CAAC,QAAQ,CAAC,cAAK,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAC;YACjD,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,gCAAiB,CAAC,IAAI,CAAC;iBACpE,IAAI,CAAiB,gBAAM,CAAC;iBAC5B,IAAI,CAAC,MAAM,CAAC,EAAE;gBACd,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE;oBACxE,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAA0D,qBAAqB,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;oBAE1I,IAAI,CAAC,QAAQ,CAAC,cAAK,CAAC,IAAI,iBAAoB,CAAC,CAAC;iBAC9C;qBAAM;oBACN,IAAI,CAAC,QAAQ,CAAC,cAAK,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC;iBAClD;YACF,CAAC,CAAC;iBACD,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,EAAE;gBACtB,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBAC3B,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAA0D,qBAAqB,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;gBAC1I,yDAAyD;gBACzD,MAAM,OAAO,GAAuB,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;gBACjF,IAAI,CAAC,QAAQ,CAAC,cAAK,CAAC,IAAI,kBAAqB,OAAO,CAAC,CAAC,CAAC;YACxD,CAAC,CAAC,CAAC;QACL,CAAC;QAEkB,KAAK,CAAC,gBAAgB,CAAC,KAA2B;YACpE,2FAA2F;YAC3F,qFAAqF;YACrF,IAAI,IAAI,CAAC,cAAc,CAAC,WAAW,IAAI,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;gBAClF,IAAI,CAAC,qBAAqB,CAAC,YAAY,CAAC,SAAS,EAAE,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;aACpF;iBAAM,IAAI,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE;gBAC5B,IAAI,CAAC,qBAAqB,CAAC,YAAY,CAAC,SAAS,EAAE,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aACrE;YAED,IAAI,CAAC,QAAQ,CAAC,cAAK,CAAC,IAAI,iBAAoB,CAAC,CAAC;QAC/C,CAAC;KACD,CAAA;IAxDY,kBAAkB;QAG5B,WAAA,4CAAqB,CAAA;QACrB,WAAA,qCAAqB,CAAA;QACrB,WAAA,6BAAiB,CAAA;QACjB,WAAA,gDAAuB,CAAA;QACvB,WAAA,yBAAe,CAAA;QACf,WAAA,iBAAW,CAAA;QACX,WAAA,8CAAsB,CAAA;QACtB,WAAA,gCAAe,CAAA;OAVL,kBAAkB,CAwD9B;IAxDY,gDAAkB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ILifecycleMainService } from 'vs/platform/lifecycle/electron-main/lifecycleMainService';\nimport { State, IUpdate, AvailableForDownload, UpdateType } from 'vs/platform/update/common/update';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IEnvironmentMainService } from 'vs/platform/environment/electron-main/environmentMainService';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { createUpdateURL, AbstractUpdateService, UpdateNotAvailableClassification } from 'vs/platform/update/electron-main/abstractUpdateService';\nimport { IRequestService, asJson } from 'vs/platform/request/common/request';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { INativeHostMainService } from 'vs/platform/native/electron-main/nativeHostMainService';\n\nexport class LinuxUpdateService extends AbstractUpdateService {\n\n\tconstructor(\n\t\t@ILifecycleMainService lifecycleMainService: ILifecycleMainService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IEnvironmentMainService environmentMainService: IEnvironmentMainService,\n\t\t@IRequestService requestService: IRequestService,\n\t\t@ILogService logService: ILogService,\n\t\t@INativeHostMainService private readonly nativeHostMainService: INativeHostMainService,\n\t\t@IProductService productService: IProductService\n\t) {\n\t\tsuper(lifecycleMainService, configurationService, environmentMainService, requestService, logService, productService);\n\t}\n\n\tprotected buildUpdateFeedUrl(quality: string): string {\n\t\treturn createUpdateURL(`linux-${process.arch}`, quality, this.productService);\n\t}\n\n\tprotected doCheckForUpdates(context: any): void {\n\t\tif (!this.url) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setState(State.CheckingForUpdates(context));\n\t\tthis.requestService.request({ url: this.url }, CancellationToken.None)\n\t\t\t.then<IUpdate | null>(asJson)\n\t\t\t.then(update => {\n\t\t\t\tif (!update || !update.url || !update.version || !update.productVersion) {\n\t\t\t\t\tthis.telemetryService.publicLog2<{ explicit: boolean }, UpdateNotAvailableClassification>('update:notAvailable', { explicit: !!context });\n\n\t\t\t\t\tthis.setState(State.Idle(UpdateType.Archive));\n\t\t\t\t} else {\n\t\t\t\t\tthis.setState(State.AvailableForDownload(update));\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then(undefined, err => {\n\t\t\t\tthis.logService.error(err);\n\t\t\t\tthis.telemetryService.publicLog2<{ explicit: boolean }, UpdateNotAvailableClassification>('update:notAvailable', { explicit: !!context });\n\t\t\t\t// only show message when explicitly checking for updates\n\t\t\t\tconst message: string | undefined = !!context ? (err.message || err) : undefined;\n\t\t\t\tthis.setState(State.Idle(UpdateType.Archive, message));\n\t\t\t});\n\t}\n\n\tprotected override async doDownloadUpdate(state: AvailableForDownload): Promise<void> {\n\t\t// Use the download URL if available as we don't currently detect the package type that was\n\t\t// installed and the website download page is more useful than the tarball generally.\n\t\tif (this.productService.downloadUrl && this.productService.downloadUrl.length > 0) {\n\t\t\tthis.nativeHostMainService.openExternal(undefined, this.productService.downloadUrl);\n\t\t} else if (state.update.url) {\n\t\t\tthis.nativeHostMainService.openExternal(undefined, state.update.url);\n\t\t}\n\n\t\tthis.setState(State.Idle(UpdateType.Archive));\n\t}\n}\n"]}