{"version":3,"file":"updateIpc.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/update/common/updateIpc.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAMhG,MAAa,aAAa;QAEzB,YAAoB,OAAuB;YAAvB,YAAO,GAAP,OAAO,CAAgB;QAAI,CAAC;QAEhD,MAAM,CAAC,CAAU,EAAE,KAAa;YAC/B,QAAQ,KAAK,EAAE;gBACd,KAAK,eAAe,CAAC,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC;aACxD;YAED,MAAM,IAAI,KAAK,CAAC,oBAAoB,KAAK,EAAE,CAAC,CAAC;QAC9C,CAAC;QAED,IAAI,CAAC,CAAU,EAAE,OAAe,EAAE,GAAS;YAC1C,QAAQ,OAAO,EAAE;gBAChB,KAAK,iBAAiB,CAAC,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;gBACjE,KAAK,gBAAgB,CAAC,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC;gBAC5D,KAAK,aAAa,CAAC,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;gBACtD,KAAK,gBAAgB,CAAC,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC;gBAC5D,KAAK,kBAAkB,CAAC,CAAC,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gBACpE,KAAK,iBAAiB,CAAC,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,CAAC;aAC9D;YAED,MAAM,IAAI,KAAK,CAAC,mBAAmB,OAAO,EAAE,CAAC,CAAC;QAC/C,CAAC;KACD;IAxBD,sCAwBC;IAED,MAAa,mBAAmB;QAc/B,YAA6B,OAAiB;YAAjB,YAAO,GAAP,OAAO,CAAU;YAV7B,mBAAc,GAAG,IAAI,eAAO,EAAS,CAAC;YAC9C,kBAAa,GAAiB,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC;YAEzD,WAAM,GAAU,cAAK,CAAC,aAAa,CAAC;YAQ3C,IAAI,CAAC,OAAO,CAAC,MAAM,CAAQ,eAAe,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC;YACzE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAQ,kBAAkB,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC;QAChF,CAAC;QATD,IAAI,KAAK,KAAY,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QAC1C,IAAI,KAAK,CAAC,KAAY;YACrB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YACpB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACjC,CAAC;QAOD,eAAe,CAAC,QAAiB;YAChC,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,iBAAiB,EAAE,QAAQ,CAAC,CAAC;QACvD,CAAC;QAED,cAAc;YACb,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QAC5C,CAAC;QAED,WAAW;YACV,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QACzC,CAAC;QAED,cAAc;YACb,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QAC5C,CAAC;QAED,eAAe;YACd,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAC7C,CAAC;KACD;IAtCD,kDAsCC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IChannel, IServerChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { IUpdateService, State } from 'vs/platform/update/common/update';\n\nexport class UpdateChannel implements IServerChannel {\n\n\tconstructor(private service: IUpdateService) { }\n\n\tlisten(_: unknown, event: string): Event<any> {\n\t\tswitch (event) {\n\t\t\tcase 'onStateChange': return this.service.onStateChange;\n\t\t}\n\n\t\tthrow new Error(`Event not found: ${event}`);\n\t}\n\n\tcall(_: unknown, command: string, arg?: any): Promise<any> {\n\t\tswitch (command) {\n\t\t\tcase 'checkForUpdates': return this.service.checkForUpdates(arg);\n\t\t\tcase 'downloadUpdate': return this.service.downloadUpdate();\n\t\t\tcase 'applyUpdate': return this.service.applyUpdate();\n\t\t\tcase 'quitAndInstall': return this.service.quitAndInstall();\n\t\t\tcase '_getInitialState': return Promise.resolve(this.service.state);\n\t\t\tcase 'isLatestVersion': return this.service.isLatestVersion();\n\t\t}\n\n\t\tthrow new Error(`Call not found: ${command}`);\n\t}\n}\n\nexport class UpdateChannelClient implements IUpdateService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onStateChange = new Emitter<State>();\n\treadonly onStateChange: Event<State> = this._onStateChange.event;\n\n\tprivate _state: State = State.Uninitialized;\n\tget state(): State { return this._state; }\n\tset state(state: State) {\n\t\tthis._state = state;\n\t\tthis._onStateChange.fire(state);\n\t}\n\n\tconstructor(private readonly channel: IChannel) {\n\t\tthis.channel.listen<State>('onStateChange')(state => this.state = state);\n\t\tthis.channel.call<State>('_getInitialState').then(state => this.state = state);\n\t}\n\n\tcheckForUpdates(explicit: boolean): Promise<void> {\n\t\treturn this.channel.call('checkForUpdates', explicit);\n\t}\n\n\tdownloadUpdate(): Promise<void> {\n\t\treturn this.channel.call('downloadUpdate');\n\t}\n\n\tapplyUpdate(): Promise<void> {\n\t\treturn this.channel.call('applyUpdate');\n\t}\n\n\tquitAndInstall(): Promise<void> {\n\t\treturn this.channel.call('quitAndInstall');\n\t}\n\n\tisLatestVersion(): Promise<boolean> {\n\t\treturn this.channel.call('isLatestVersion');\n\t}\n}\n"]}