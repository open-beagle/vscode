{"version":3,"file":"downloadService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/download/common/downloadService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAShG,IAAa,eAAe,GAA5B,MAAa,eAAe;QAI3B,YACmC,cAA+B,EAClC,WAAyB;YADtB,mBAAc,GAAd,cAAc,CAAiB;YAClC,gBAAW,GAAX,WAAW,CAAc;QACrD,CAAC;QAEL,KAAK,CAAC,QAAQ,CAAC,QAAa,EAAE,MAAW,EAAE,oBAAuC,gCAAiB,CAAC,IAAI;YACvG,IAAI,QAAQ,CAAC,MAAM,KAAK,iBAAO,CAAC,IAAI,IAAI,QAAQ,CAAC,MAAM,KAAK,iBAAO,CAAC,YAAY,EAAE;gBACjF,0EAA0E;gBAC1E,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;gBAC9C,OAAO;aACP;YACD,MAAM,OAAO,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,QAAQ,CAAC,QAAQ,EAAE,EAAE,CAAC;YAC1D,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAAC;YAC9E,IAAI,OAAO,CAAC,GAAG,CAAC,UAAU,KAAK,GAAG,EAAE;gBACnC,MAAM,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;aACzD;iBAAM;gBACN,MAAM,OAAO,GAAG,MAAM,CAAA,GAAA,gBAAM,CAAA,CAAC,OAAO,CAAC,CAAC;gBACtC,MAAM,IAAI,KAAK,CAAC,0BAA0B,OAAO,CAAC,GAAG,CAAC,UAAU,gBAAgB,OAAO,EAAE,CAAC,CAAC;aAC3F;QACF,CAAC;KACD,CAAA;IAxBY,eAAe;QAKzB,WAAA,yBAAe,CAAA;QACf,WAAA,oBAAY,CAAA;OANF,eAAe,CAwB3B;IAxBY,0CAAe","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDownloadService } from 'vs/platform/download/common/download';\nimport { URI } from 'vs/base/common/uri';\nimport { IRequestService, asText } from 'vs/platform/request/common/request';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { Schemas } from 'vs/base/common/network';\n\nexport class DownloadService implements IDownloadService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@IRequestService private readonly requestService: IRequestService,\n\t\t@IFileService private readonly fileService: IFileService\n\t) { }\n\n\tasync download(resource: URI, target: URI, cancellationToken: CancellationToken = CancellationToken.None): Promise<void> {\n\t\tif (resource.scheme === Schemas.file || resource.scheme === Schemas.vscodeRemote) {\n\t\t\t// Intentionally only support this for file|remote<->file|remote scenarios\n\t\t\tawait this.fileService.copy(resource, target);\n\t\t\treturn;\n\t\t}\n\t\tconst options = { type: 'GET', url: resource.toString() };\n\t\tconst context = await this.requestService.request(options, cancellationToken);\n\t\tif (context.res.statusCode === 200) {\n\t\t\tawait this.fileService.writeFile(target, context.stream);\n\t\t} else {\n\t\t\tconst message = await asText(context);\n\t\t\tthrow new Error(`Expected 200, got back ${context.res.statusCode} instead.\\n\\n${message}`);\n\t\t}\n\t}\n}\n"]}