{"version":3,"file":"storageIpc.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/storage/electron-main/storageIpc.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IServerChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { ISerializableItemsChangeEvent, ISerializableUpdateRequest, IBaseSerializableStorageRequest, Key, Value } from 'vs/platform/storage/common/storageIpc';\nimport { IStorageChangeEvent, IStorageMain } from 'vs/platform/storage/electron-main/storageMain';\nimport { IStorageMainService } from 'vs/platform/storage/electron-main/storageMainService';\nimport { IEmptyWorkspaceIdentifier, ISingleFolderWorkspaceIdentifier, IWorkspaceIdentifier, reviveIdentifier } from 'vs/platform/workspaces/common/workspaces';\n\nexport class StorageDatabaseChannel extends Disposable implements IServerChannel {\n\n\tprivate static readonly STORAGE_CHANGE_DEBOUNCE_TIME = 100;\n\n\tprivate readonly _onDidChangeGlobalStorage = this._register(new Emitter<ISerializableItemsChangeEvent>());\n\tprivate readonly onDidChangeGlobalStorage = this._onDidChangeGlobalStorage.event;\n\n\tconstructor(\n\t\tprivate logService: ILogService,\n\t\tprivate storageMainService: IStorageMainService\n\t) {\n\t\tsuper();\n\n\t\tthis.registerGlobalStorageListeners();\n\t}\n\n\t//#region Global Storage Change Events\n\n\tprivate registerGlobalStorageListeners(): void {\n\n\t\t// Listen for changes in global storage to send to listeners\n\t\t// that are listening. Use a debouncer to reduce IPC traffic.\n\t\tthis._register(Event.debounce(this.storageMainService.globalStorage.onDidChangeStorage, (prev: IStorageChangeEvent[] | undefined, cur: IStorageChangeEvent) => {\n\t\t\tif (!prev) {\n\t\t\t\tprev = [cur];\n\t\t\t} else {\n\t\t\t\tprev.push(cur);\n\t\t\t}\n\n\t\t\treturn prev;\n\t\t}, StorageDatabaseChannel.STORAGE_CHANGE_DEBOUNCE_TIME)(events => {\n\t\t\tif (events.length) {\n\t\t\t\tthis._onDidChangeGlobalStorage.fire(this.serializeGlobalStorageEvents(events));\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate serializeGlobalStorageEvents(events: IStorageChangeEvent[]): ISerializableItemsChangeEvent {\n\t\tconst changed = new Map<Key, Value>();\n\t\tconst deleted = new Set<Key>();\n\t\tevents.forEach(event => {\n\t\t\tconst existing = this.storageMainService.globalStorage.get(event.key);\n\t\t\tif (typeof existing === 'string') {\n\t\t\t\tchanged.set(event.key, existing);\n\t\t\t} else {\n\t\t\t\tdeleted.add(event.key);\n\t\t\t}\n\t\t});\n\n\t\treturn {\n\t\t\tchanged: Array.from(changed.entries()),\n\t\t\tdeleted: Array.from(deleted.values())\n\t\t};\n\t}\n\n\tlisten(_: unknown, event: string): Event<any> {\n\t\tswitch (event) {\n\t\t\tcase 'onDidChangeGlobalStorage': return this.onDidChangeGlobalStorage;\n\t\t}\n\n\t\tthrow new Error(`Event not found: ${event}`);\n\t}\n\n\t//#endregion\n\n\tasync call(_: unknown, command: string, arg: IBaseSerializableStorageRequest): Promise<any> {\n\t\tconst workspace = reviveIdentifier(arg.workspace);\n\n\t\t// Get storage to be ready\n\t\tconst storage = await this.withStorageInitialized(workspace);\n\n\t\t// handle call\n\t\tswitch (command) {\n\t\t\tcase 'getItems': {\n\t\t\t\treturn Array.from(storage.items.entries());\n\t\t\t}\n\n\t\t\tcase 'updateItems': {\n\t\t\t\tconst items: ISerializableUpdateRequest = arg;\n\n\t\t\t\tif (items.insert) {\n\t\t\t\t\tfor (const [key, value] of items.insert) {\n\t\t\t\t\t\tstorage.set(key, value);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (items.delete) {\n\t\t\t\t\titems.delete.forEach(key => storage.delete(key));\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcase 'close': {\n\n\t\t\t\t// We only allow to close workspace scoped storage because\n\t\t\t\t// global storage is shared across all windows and closes\n\t\t\t\t// only on shutdown.\n\t\t\t\tif (workspace) {\n\t\t\t\t\treturn storage.close();\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Call not found: ${command}`);\n\t\t}\n\t}\n\n\tprivate async withStorageInitialized(workspace: IWorkspaceIdentifier | ISingleFolderWorkspaceIdentifier | IEmptyWorkspaceIdentifier | undefined): Promise<IStorageMain> {\n\t\tconst storage = workspace ? this.storageMainService.workspaceStorage(workspace) : this.storageMainService.globalStorage;\n\n\t\ttry {\n\t\t\tawait storage.init();\n\t\t} catch (error) {\n\t\t\tthis.logService.error(`StorageIPC#init: Unable to init ${workspace ? 'workspace' : 'global'} storage due to ${error}`);\n\t\t}\n\n\t\treturn storage;\n\t}\n}\n"]}