{"version":3,"file":"storageMainService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/storage/electron-main/storageMainService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { once } from 'vs/base/common/functional';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { ILifecycleMainService, LifecycleMainPhase } from 'vs/platform/lifecycle/electron-main/lifecycleMainService';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { GlobalStorageMain, IStorageMain, IStorageMainOptions, WorkspaceStorageMain } from 'vs/platform/storage/electron-main/storageMain';\nimport { IEmptyWorkspaceIdentifier, ISingleFolderWorkspaceIdentifier, IWorkspaceIdentifier } from 'vs/platform/workspaces/common/workspaces';\n\nexport const IStorageMainService = createDecorator<IStorageMainService>('storageMainService');\n\nexport interface IStorageMainService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Provides access to the global storage shared across all windows.\n\t */\n\treadonly globalStorage: IStorageMain;\n\n\t/**\n\t * Provides access to the workspace storage specific to a single window.\n\t */\n\tworkspaceStorage(workspace: IWorkspaceIdentifier | ISingleFolderWorkspaceIdentifier | IEmptyWorkspaceIdentifier): IStorageMain;\n}\n\nexport class StorageMainService extends Disposable implements IStorageMainService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@ILifecycleMainService private readonly lifecycleMainService: ILifecycleMainService\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprotected getStorageOptions(): IStorageMainOptions {\n\t\treturn {\n\t\t\tuseInMemoryStorage: !!this.environmentService.extensionTestsLocationURI // no storage during extension tests!\n\t\t};\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Global Storage: Warmup when any window opens\n\t\t(async () => {\n\t\t\tawait this.lifecycleMainService.when(LifecycleMainPhase.AfterWindowOpen);\n\n\t\t\tthis.globalStorage.init();\n\t\t})();\n\n\t\t// Workspace Storage: Warmup when related window with workspace loads\n\t\tthis._register(this.lifecycleMainService.onWillLoadWindow(async e => {\n\t\t\tif (e.workspace) {\n\t\t\t\tthis.workspaceStorage(e.workspace).init();\n\t\t\t}\n\t\t}));\n\n\t\t// All Storage: Close when shutting down\n\t\tthis._register(this.lifecycleMainService.onWillShutdown(e => {\n\n\t\t\t// Global Storage\n\t\t\te.join(this.globalStorage.close());\n\n\t\t\t// Workspace Storage(s)\n\t\t\tfor (const [, storage] of this.mapWorkspaceToStorage) {\n\t\t\t\te.join(storage.close());\n\t\t\t}\n\t\t}));\n\t}\n\n\t//#region Global Storage\n\n\treadonly globalStorage = this.createGlobalStorage();\n\n\tprivate createGlobalStorage(): IStorageMain {\n\t\tif (this.globalStorage) {\n\t\t\treturn this.globalStorage; // only once\n\t\t}\n\n\t\tthis.logService.trace(`StorageMainService: creating global storage`);\n\n\t\tconst globalStorage = new GlobalStorageMain(this.getStorageOptions(), this.logService, this.environmentService);\n\n\t\tonce(globalStorage.onDidCloseStorage)(() => {\n\t\t\tthis.logService.trace(`StorageMainService: closed global storage`);\n\t\t});\n\n\t\treturn globalStorage;\n\t}\n\n\t//#endregion\n\n\n\t//#region Workspace Storage\n\n\tprivate readonly mapWorkspaceToStorage = new Map<string, IStorageMain>();\n\n\tprivate createWorkspaceStorage(workspace: IWorkspaceIdentifier | ISingleFolderWorkspaceIdentifier | IEmptyWorkspaceIdentifier): IStorageMain {\n\t\tconst workspaceStorage = new WorkspaceStorageMain(workspace, this.getStorageOptions(), this.logService, this.environmentService);\n\n\t\treturn workspaceStorage;\n\t}\n\n\tworkspaceStorage(workspace: IWorkspaceIdentifier | ISingleFolderWorkspaceIdentifier | IEmptyWorkspaceIdentifier): IStorageMain {\n\t\tlet workspaceStorage = this.mapWorkspaceToStorage.get(workspace.id);\n\t\tif (!workspaceStorage) {\n\t\t\tthis.logService.trace(`StorageMainService: creating workspace storage (${workspace.id})`);\n\n\t\t\tworkspaceStorage = this.createWorkspaceStorage(workspace);\n\t\t\tthis.mapWorkspaceToStorage.set(workspace.id, workspaceStorage);\n\n\t\t\tonce(workspaceStorage.onDidCloseStorage)(() => {\n\t\t\t\tthis.logService.trace(`StorageMainService: closed workspace storage (${workspace.id})`);\n\n\t\t\t\tthis.mapWorkspaceToStorage.delete(workspace.id);\n\t\t\t});\n\t\t}\n\n\t\treturn workspaceStorage;\n\t}\n\n\t//#endregion\n}\n"]}