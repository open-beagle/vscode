{"version":3,"file":"storageMain.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/storage/electron-main/storageMain.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { promises } from 'fs';\nimport { exists, writeFile } from 'vs/base/node/pfs';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { Disposable, IDisposable } from 'vs/base/common/lifecycle';\nimport { ILogService, LogLevel } from 'vs/platform/log/common/log';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { SQLiteStorageDatabase, ISQLiteStorageDatabaseLoggingOptions } from 'vs/base/parts/storage/node/storage';\nimport { Storage, InMemoryStorageDatabase, StorageHint, IStorage } from 'vs/base/parts/storage/common/storage';\nimport { join } from 'vs/base/common/path';\nimport { IS_NEW_KEY } from 'vs/platform/storage/common/storage';\nimport { currentSessionDateStorageKey, firstSessionDateStorageKey, instanceStorageKey, lastSessionDateStorageKey } from 'vs/platform/telemetry/common/telemetry';\nimport { generateUuid } from 'vs/base/common/uuid';\nimport { IEmptyWorkspaceIdentifier, ISingleFolderWorkspaceIdentifier, isSingleFolderWorkspaceIdentifier, isWorkspaceIdentifier, IWorkspaceIdentifier } from 'vs/platform/workspaces/common/workspaces';\n\nexport interface IStorageMainOptions {\n\n\t/**\n\t * If enabled, storage will not persist to disk\n\t * but into memory.\n\t */\n\tuseInMemoryStorage?: boolean;\n}\n\n/**\n * Provides access to global and workspace storage from the\n * electron-main side that is the owner of all storage connections.\n */\nexport interface IStorageMain extends IDisposable {\n\n\t/**\n\t * Emitted whenever data is updated or deleted.\n\t */\n\treadonly onDidChangeStorage: Event<IStorageChangeEvent>;\n\n\t/**\n\t * Emitted when the storage is closed.\n\t */\n\treadonly onDidCloseStorage: Event<void>;\n\n\t/**\n\t * Access to all cached items of this storage service.\n\t */\n\treadonly items: Map<string, string>;\n\n\t/**\n\t * Required call to ensure the service can be used.\n\t */\n\tinit(): Promise<void>;\n\n\t/**\n\t * Retrieve an element stored with the given key from storage. Use\n\t * the provided defaultValue if the element is null or undefined.\n\t */\n\tget(key: string, fallbackValue: string): string;\n\tget(key: string, fallbackValue?: string): string | undefined;\n\n\t/**\n\t * Store a string value under the given key to storage. The value will\n\t * be converted to a string.\n\t */\n\tset(key: string, value: string | boolean | number | undefined | null): void;\n\n\t/**\n\t * Delete an element stored under the provided key from storage.\n\t */\n\tdelete(key: string): void;\n\n\t/**\n\t * Close the storage connection.\n\t */\n\tclose(): Promise<void>;\n}\n\nexport interface IStorageChangeEvent {\n\tkey: string;\n}\n\nabstract class BaseStorageMain extends Disposable implements IStorageMain {\n\n\tprotected readonly _onDidChangeStorage = this._register(new Emitter<IStorageChangeEvent>());\n\treadonly onDidChangeStorage = this._onDidChangeStorage.event;\n\n\tprivate readonly _onDidCloseStorage = this._register(new Emitter<void>());\n\treadonly onDidCloseStorage = this._onDidCloseStorage.event;\n\n\tprivate storage: IStorage = new Storage(new InMemoryStorageDatabase()); // storage is in-memory until initialized\n\n\tprivate initializePromise: Promise<void> | undefined = undefined;\n\n\tconstructor(\n\t\tprotected readonly logService: ILogService\n\t) {\n\t\tsuper();\n\t}\n\n\tinit(): Promise<void> {\n\t\tif (!this.initializePromise) {\n\t\t\tthis.initializePromise = (async () => {\n\t\t\t\ttry {\n\n\t\t\t\t\t// Create storage via subclasses\n\t\t\t\t\tconst storage = await this.doCreate();\n\n\t\t\t\t\t// Replace our in-memory storage with the real\n\t\t\t\t\t// once as soon as possible without awaiting\n\t\t\t\t\t// the init call.\n\t\t\t\t\tthis.storage.dispose();\n\t\t\t\t\tthis.storage = storage;\n\n\t\t\t\t\t// Re-emit storage changes via event\n\t\t\t\t\tthis._register(storage.onDidChangeStorage(key => this._onDidChangeStorage.fire({ key })));\n\n\t\t\t\t\t// Await storage init\n\t\t\t\t\tawait this.doInit(storage);\n\n\t\t\t\t\t// Ensure we track wether storage is new or not\n\t\t\t\t\tconst isNewStorage = storage.getBoolean(IS_NEW_KEY);\n\t\t\t\t\tif (isNewStorage === undefined) {\n\t\t\t\t\t\tstorage.set(IS_NEW_KEY, true);\n\t\t\t\t\t} else if (isNewStorage) {\n\t\t\t\t\t\tstorage.set(IS_NEW_KEY, false);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.logService.error(`StorageMain#initialize(): Unable to init storage due to ${error}`);\n\t\t\t\t}\n\t\t\t})();\n\t\t}\n\n\t\treturn this.initializePromise;\n\t}\n\n\tprotected createLogginOptions(): ISQLiteStorageDatabaseLoggingOptions {\n\t\treturn {\n\t\t\tlogTrace: (this.logService.getLevel() === LogLevel.Trace) ? msg => this.logService.trace(msg) : undefined,\n\t\t\tlogError: error => this.logService.error(error)\n\t\t};\n\t}\n\n\tprotected doInit(storage: IStorage): Promise<void> {\n\t\treturn storage.init();\n\t}\n\n\tprotected abstract doCreate(): Promise<IStorage>;\n\n\tget items(): Map<string, string> { return this.storage.items; }\n\n\tget(key: string, fallbackValue: string): string;\n\tget(key: string, fallbackValue?: string): string | undefined;\n\tget(key: string, fallbackValue?: string): string | undefined {\n\t\treturn this.storage.get(key, fallbackValue);\n\t}\n\n\tset(key: string, value: string | boolean | number | undefined | null): Promise<void> {\n\t\treturn this.storage.set(key, value);\n\t}\n\n\tdelete(key: string): Promise<void> {\n\t\treturn this.storage.delete(key);\n\t}\n\n\tasync close(): Promise<void> {\n\n\t\t// Ensure we are not accidentally leaving\n\t\t// a pending initialized storage behind in\n\t\t// case close() was called before init()\n\t\t// finishes\n\t\tif (this.initializePromise) {\n\t\t\tawait this.initializePromise;\n\t\t}\n\n\t\t// Propagate to storage lib\n\t\tawait this.storage.close();\n\n\t\t// Signal as event\n\t\tthis._onDidCloseStorage.fire();\n\t}\n}\n\nexport class GlobalStorageMain extends BaseStorageMain implements IStorageMain {\n\n\tprivate static readonly STORAGE_NAME = 'state.vscdb';\n\n\tconstructor(\n\t\tprivate readonly options: IStorageMainOptions,\n\t\tlogService: ILogService,\n\t\tprivate readonly environmentService: IEnvironmentService\n\t) {\n\t\tsuper(logService);\n\t}\n\n\tprotected async doCreate(): Promise<IStorage> {\n\t\tlet storagePath: string;\n\t\tif (this.options.useInMemoryStorage) {\n\t\t\tstoragePath = SQLiteStorageDatabase.IN_MEMORY_PATH;\n\t\t} else {\n\t\t\tstoragePath = join(this.environmentService.globalStorageHome.fsPath, GlobalStorageMain.STORAGE_NAME);\n\t\t}\n\n\t\treturn new Storage(new SQLiteStorageDatabase(storagePath, {\n\t\t\tlogging: this.createLogginOptions()\n\t\t}));\n\t}\n\n\tprotected override async doInit(storage: IStorage): Promise<void> {\n\t\tawait super.doInit(storage);\n\n\t\t// Apply global telemetry values as part of the initialization\n\t\tthis.updateTelemetryState(storage);\n\t}\n\n\tprivate updateTelemetryState(storage: IStorage): void {\n\n\t\t// Instance UUID (once)\n\t\tconst instanceId = storage.get(instanceStorageKey, undefined);\n\t\tif (instanceId === undefined) {\n\t\t\tstorage.set(instanceStorageKey, generateUuid());\n\t\t}\n\n\t\t// First session date (once)\n\t\tconst firstSessionDate = storage.get(firstSessionDateStorageKey, undefined);\n\t\tif (firstSessionDate === undefined) {\n\t\t\tstorage.set(firstSessionDateStorageKey, new Date().toUTCString());\n\t\t}\n\n\t\t// Last / current session (always)\n\t\t// previous session date was the \"current\" one at that time\n\t\t// current session date is \"now\"\n\t\tconst lastSessionDate = storage.get(currentSessionDateStorageKey, undefined);\n\t\tconst currentSessionDate = new Date().toUTCString();\n\t\tstorage.set(lastSessionDateStorageKey, typeof lastSessionDate === 'undefined' ? null : lastSessionDate);\n\t\tstorage.set(currentSessionDateStorageKey, currentSessionDate);\n\t}\n}\n\nexport class WorkspaceStorageMain extends BaseStorageMain implements IStorageMain {\n\n\tprivate static readonly WORKSPACE_STORAGE_NAME = 'state.vscdb';\n\tprivate static readonly WORKSPACE_META_NAME = 'workspace.json';\n\n\tconstructor(\n\t\tprivate workspace: IWorkspaceIdentifier | ISingleFolderWorkspaceIdentifier | IEmptyWorkspaceIdentifier,\n\t\tprivate readonly options: IStorageMainOptions,\n\t\tlogService: ILogService,\n\t\tprivate readonly environmentService: IEnvironmentService\n\t) {\n\t\tsuper(logService);\n\t}\n\n\tprotected async doCreate(): Promise<IStorage> {\n\t\tconst { storageFilePath, wasCreated } = await this.prepareWorkspaceStorageFolder();\n\n\t\treturn new Storage(new SQLiteStorageDatabase(storageFilePath, {\n\t\t\tlogging: this.createLogginOptions()\n\t\t}), { hint: wasCreated ? StorageHint.STORAGE_DOES_NOT_EXIST : undefined });\n\t}\n\n\tprivate async prepareWorkspaceStorageFolder(): Promise<{ storageFilePath: string, wasCreated: boolean }> {\n\n\t\t// Return early if using inMemory storage\n\t\tif (this.options.useInMemoryStorage) {\n\t\t\treturn { storageFilePath: SQLiteStorageDatabase.IN_MEMORY_PATH, wasCreated: true };\n\t\t}\n\n\t\t// Otherwise, ensure the storage folder exists on disk\n\t\tconst workspaceStorageFolderPath = join(this.environmentService.workspaceStorageHome.fsPath, this.workspace.id);\n\t\tconst workspaceStorageDatabasePath = join(workspaceStorageFolderPath, WorkspaceStorageMain.WORKSPACE_STORAGE_NAME);\n\n\t\tconst storageExists = await exists(workspaceStorageFolderPath);\n\t\tif (storageExists) {\n\t\t\treturn { storageFilePath: workspaceStorageDatabasePath, wasCreated: false };\n\t\t}\n\n\t\t// Ensure storage folder exists\n\t\tawait promises.mkdir(workspaceStorageFolderPath, { recursive: true });\n\n\t\t// Write metadata into folder (but do not await)\n\t\tthis.ensureWorkspaceStorageFolderMeta(workspaceStorageFolderPath);\n\n\t\treturn { storageFilePath: workspaceStorageDatabasePath, wasCreated: true };\n\t}\n\n\tprivate async ensureWorkspaceStorageFolderMeta(workspaceStorageFolderPath: string): Promise<void> {\n\t\tlet meta: object | undefined = undefined;\n\t\tif (isSingleFolderWorkspaceIdentifier(this.workspace)) {\n\t\t\tmeta = { folder: this.workspace.uri.toString() };\n\t\t} else if (isWorkspaceIdentifier(this.workspace)) {\n\t\t\tmeta = { workspace: this.workspace.configPath.toString() };\n\t\t}\n\n\t\tif (meta) {\n\t\t\ttry {\n\t\t\t\tconst workspaceStorageMetaPath = join(workspaceStorageFolderPath, WorkspaceStorageMain.WORKSPACE_META_NAME);\n\t\t\t\tconst storageExists = await exists(workspaceStorageMetaPath);\n\t\t\t\tif (!storageExists) {\n\t\t\t\t\tawait writeFile(workspaceStorageMetaPath, JSON.stringify(meta, undefined, 2));\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tthis.logService.error(`StorageMain#ensureWorkspaceStorageFolderMeta(): Unable to create workspace storage metadata due to ${error}`);\n\t\t\t}\n\t\t}\n\t}\n}\n"]}