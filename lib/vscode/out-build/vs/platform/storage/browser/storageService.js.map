{"version":3,"file":"storageService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/storage/browser/storageService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { Emitter } from 'vs/base/common/event';\nimport { StorageScope, IS_NEW_KEY, AbstractStorageService } from 'vs/platform/storage/common/storage';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IWorkspaceInitializationPayload } from 'vs/platform/workspaces/common/workspaces';\nimport { IFileService, FileChangeType } from 'vs/platform/files/common/files';\nimport { IStorage, Storage, IStorageDatabase, IStorageItemsChangeEvent, IUpdateRequest } from 'vs/base/parts/storage/common/storage';\nimport { URI } from 'vs/base/common/uri';\nimport { joinPath } from 'vs/base/common/resources';\nimport { Promises } from 'vs/base/common/async';\nimport { VSBuffer } from 'vs/base/common/buffer';\n\nexport class BrowserStorageService extends AbstractStorageService {\n\n\tprivate static BROWSER_DEFAULT_FLUSH_INTERVAL = 5 * 1000; // every 5s because async operations are not permitted on shutdown\n\n\tprivate globalStorage: IStorage | undefined;\n\tprivate workspaceStorage: IStorage | undefined;\n\n\tprivate globalStorageDatabase: FileStorageDatabase | undefined;\n\tprivate workspaceStorageDatabase: FileStorageDatabase | undefined;\n\n\tprivate globalStorageFile: URI | undefined;\n\tprivate workspaceStorageFile: URI | undefined;\n\n\tget hasPendingUpdate(): boolean {\n\t\treturn (!!this.globalStorageDatabase && this.globalStorageDatabase.hasPendingUpdate) || (!!this.workspaceStorageDatabase && this.workspaceStorageDatabase.hasPendingUpdate);\n\t}\n\n\tconstructor(\n\t\tprivate readonly payload: IWorkspaceInitializationPayload,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@IFileService private readonly fileService: IFileService\n\t) {\n\t\tsuper({ flushInterval: BrowserStorageService.BROWSER_DEFAULT_FLUSH_INTERVAL });\n\t}\n\n\tprotected async doInitialize(): Promise<void> {\n\n\t\t// Ensure state folder exists\n\t\tconst stateRoot = joinPath(this.environmentService.userRoamingDataHome, 'state');\n\t\tawait this.fileService.createFolder(stateRoot);\n\n\t\t// Workspace Storage\n\t\tthis.workspaceStorageFile = joinPath(stateRoot, `${this.payload.id}.json`);\n\n\t\tthis.workspaceStorageDatabase = this._register(new FileStorageDatabase(this.workspaceStorageFile, false /* do not watch for external changes */, this.fileService));\n\t\tthis.workspaceStorage = this._register(new Storage(this.workspaceStorageDatabase));\n\t\tthis._register(this.workspaceStorage.onDidChangeStorage(key => this.emitDidChangeValue(StorageScope.WORKSPACE, key)));\n\n\t\t// Global Storage\n\t\tthis.globalStorageFile = joinPath(stateRoot, 'global.json');\n\t\tthis.globalStorageDatabase = this._register(new FileStorageDatabase(this.globalStorageFile, true /* watch for external changes */, this.fileService));\n\t\tthis.globalStorage = this._register(new Storage(this.globalStorageDatabase));\n\t\tthis._register(this.globalStorage.onDidChangeStorage(key => this.emitDidChangeValue(StorageScope.GLOBAL, key)));\n\n\t\t// Init both\n\t\tawait Promises.settled([\n\t\t\tthis.workspaceStorage.init(),\n\t\t\tthis.globalStorage.init()\n\t\t]);\n\n\t\t// Check to see if this is the first time we are \"opening\" the application\n\t\tconst firstOpen = this.globalStorage.getBoolean(IS_NEW_KEY);\n\t\tif (firstOpen === undefined) {\n\t\t\tthis.globalStorage.set(IS_NEW_KEY, true);\n\t\t} else if (firstOpen) {\n\t\t\tthis.globalStorage.set(IS_NEW_KEY, false);\n\t\t}\n\n\t\t// Check to see if this is the first time we are \"opening\" this workspace\n\t\tconst firstWorkspaceOpen = this.workspaceStorage.getBoolean(IS_NEW_KEY);\n\t\tif (firstWorkspaceOpen === undefined) {\n\t\t\tthis.workspaceStorage.set(IS_NEW_KEY, true);\n\t\t} else if (firstWorkspaceOpen) {\n\t\t\tthis.workspaceStorage.set(IS_NEW_KEY, false);\n\t\t}\n\t}\n\n\tprotected getStorage(scope: StorageScope): IStorage | undefined {\n\t\treturn scope === StorageScope.GLOBAL ? this.globalStorage : this.workspaceStorage;\n\t}\n\n\tprotected getLogDetails(scope: StorageScope): string | undefined {\n\t\treturn scope === StorageScope.GLOBAL ? this.globalStorageFile?.toString() : this.workspaceStorageFile?.toString();\n\t}\n\n\tasync migrate(toWorkspace: IWorkspaceInitializationPayload): Promise<void> {\n\t\tthrow new Error('Migrating storage is currently unsupported in Web');\n\t}\n\n\tprotected override shouldFlushWhenIdle(): boolean {\n\t\t// this flush() will potentially cause new state to be stored\n\t\t// since new state will only be created while the document\n\t\t// has focus, one optimization is to not run this when the\n\t\t// document has no focus, assuming that state has not changed\n\t\t//\n\t\t// another optimization is to not collect more state if we\n\t\t// have a pending update already running which indicates\n\t\t// that the connection is either slow or disconnected and\n\t\t// thus unhealthy.\n\t\treturn document.hasFocus() && !this.hasPendingUpdate;\n\t}\n\n\tclose(): void {\n\t\t// We explicitly do not close our DBs because writing data onBeforeUnload()\n\t\t// can result in unexpected results. Namely, it seems that - even though this\n\t\t// operation is async - sometimes it is being triggered on unload and\n\t\t// succeeds. Often though, the DBs turn out to be empty because the write\n\t\t// never had a chance to complete.\n\t\t//\n\t\t// Instead we trigger dispose() to ensure that no timeouts or callbacks\n\t\t// get triggered in this phase.\n\t\tthis.dispose();\n\t}\n}\n\nexport class FileStorageDatabase extends Disposable implements IStorageDatabase {\n\n\tprivate readonly _onDidChangeItemsExternal = this._register(new Emitter<IStorageItemsChangeEvent>());\n\treadonly onDidChangeItemsExternal = this._onDidChangeItemsExternal.event;\n\n\tprivate cache: Map<string, string> | undefined;\n\n\tprivate pendingUpdate: Promise<void> = Promise.resolve();\n\n\tprivate _hasPendingUpdate = false;\n\tget hasPendingUpdate(): boolean {\n\t\treturn this._hasPendingUpdate;\n\t}\n\n\tprivate isWatching = false;\n\n\tconstructor(\n\t\tprivate readonly file: URI,\n\t\tprivate readonly watchForExternalChanges: boolean,\n\t\t@IFileService private readonly fileService: IFileService\n\t) {\n\t\tsuper();\n\t}\n\n\tprivate async ensureWatching(): Promise<void> {\n\t\tif (this.isWatching || !this.watchForExternalChanges) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst exists = await this.fileService.exists(this.file);\n\t\tif (this.isWatching || !exists) {\n\t\t\treturn; // file must exist to be watched\n\t\t}\n\n\t\tthis.isWatching = true;\n\n\t\tthis._register(this.fileService.watch(this.file));\n\t\tthis._register(this.fileService.onDidFilesChange(e => {\n\t\t\tif (document.hasFocus()) {\n\t\t\t\treturn; // optimization: ignore changes from ourselves by checking for focus\n\t\t\t}\n\n\t\t\tif (!e.contains(this.file, FileChangeType.UPDATED)) {\n\t\t\t\treturn; // not our file\n\t\t\t}\n\n\t\t\tthis.onDidStorageChangeExternal();\n\t\t}));\n\t}\n\n\tprivate async onDidStorageChangeExternal(): Promise<void> {\n\t\tconst items = await this.doGetItemsFromFile();\n\n\t\t// pervious cache, diff for changes\n\t\tlet changed = new Map<string, string>();\n\t\tlet deleted = new Set<string>();\n\t\tif (this.cache) {\n\t\t\titems.forEach((value, key) => {\n\t\t\t\tconst existingValue = this.cache?.get(key);\n\t\t\t\tif (existingValue !== value) {\n\t\t\t\t\tchanged.set(key, value);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.cache.forEach((_, key) => {\n\t\t\t\tif (!items.has(key)) {\n\t\t\t\t\tdeleted.add(key);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// no previous cache, consider all as changed\n\t\telse {\n\t\t\tchanged = items;\n\t\t}\n\n\t\t// Update cache\n\t\tthis.cache = items;\n\n\t\t// Emit as event as needed\n\t\tif (changed.size > 0 || deleted.size > 0) {\n\t\t\tthis._onDidChangeItemsExternal.fire({ changed, deleted });\n\t\t}\n\t}\n\n\tasync getItems(): Promise<Map<string, string>> {\n\t\tif (!this.cache) {\n\t\t\ttry {\n\t\t\t\tthis.cache = await this.doGetItemsFromFile();\n\t\t\t} catch (error) {\n\t\t\t\tthis.cache = new Map();\n\t\t\t}\n\t\t}\n\n\t\treturn this.cache;\n\t}\n\n\tprivate async doGetItemsFromFile(): Promise<Map<string, string>> {\n\t\tawait this.pendingUpdate;\n\n\t\tconst itemsRaw = await this.fileService.readFile(this.file);\n\n\t\tthis.ensureWatching(); // now that the file must exist, ensure we watch it for changes\n\n\t\treturn new Map(JSON.parse(itemsRaw.value.toString()));\n\t}\n\n\tasync updateItems(request: IUpdateRequest): Promise<void> {\n\t\tconst items = await this.getItems();\n\n\t\tif (request.insert) {\n\t\t\trequest.insert.forEach((value, key) => items.set(key, value));\n\t\t}\n\n\t\tif (request.delete) {\n\t\t\trequest.delete.forEach(key => items.delete(key));\n\t\t}\n\n\t\tawait this.pendingUpdate;\n\n\t\tthis.pendingUpdate = (async () => {\n\t\t\ttry {\n\t\t\t\tthis._hasPendingUpdate = true;\n\n\t\t\t\tawait this.fileService.writeFile(this.file, VSBuffer.fromString(JSON.stringify(Array.from(items.entries()))));\n\n\t\t\t\tthis.ensureWatching(); // now that the file must exist, ensure we watch it for changes\n\t\t\t} finally {\n\t\t\t\tthis._hasPendingUpdate = false;\n\t\t\t}\n\t\t})();\n\n\t\treturn this.pendingUpdate;\n\t}\n\n\tclose(): Promise<void> {\n\t\treturn this.pendingUpdate;\n\t}\n}\n"]}