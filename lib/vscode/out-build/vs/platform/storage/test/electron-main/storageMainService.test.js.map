{"version":3,"file":"storageMainService.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/storage/test/electron-main/storageMainService.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { notStrictEqual, strictEqual } from 'assert';\nimport { OPTIONS, parseArgs } from 'vs/platform/environment/node/argv';\nimport { NativeEnvironmentService } from 'vs/platform/environment/node/environmentService';\nimport { NullLogService } from 'vs/platform/log/common/log';\nimport { StorageMainService } from 'vs/platform/storage/electron-main/storageMainService';\nimport { currentSessionDateStorageKey, firstSessionDateStorageKey, instanceStorageKey } from 'vs/platform/telemetry/common/telemetry';\nimport { IStorageChangeEvent, IStorageMain, IStorageMainOptions } from 'vs/platform/storage/electron-main/storageMain';\nimport { generateUuid } from 'vs/base/common/uuid';\nimport { IS_NEW_KEY } from 'vs/platform/storage/common/storage';\nimport { ILifecycleMainService, LifecycleMainPhase, ShutdownEvent, UnloadReason } from 'vs/platform/lifecycle/electron-main/lifecycleMainService';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { NativeParsedArgs } from 'vs/platform/environment/common/argv';\nimport { ICodeWindow } from 'vs/platform/windows/electron-main/windows';\nimport { Promises } from 'vs/base/common/async';\nimport product from 'vs/platform/product/common/product';\nimport { IProductService } from 'vs/platform/product/common/productService';\n\nsuite('StorageMainService', function () {\n\n\tconst productService: IProductService = { _serviceBrand: undefined, ...product };\n\n\tclass TestStorageMainService extends StorageMainService {\n\n\t\tprotected override getStorageOptions(): IStorageMainOptions {\n\t\t\treturn {\n\t\t\t\tuseInMemoryStorage: true\n\t\t\t};\n\t\t}\n\t}\n\n\tclass StorageTestLifecycleMainService implements ILifecycleMainService {\n\n\t\t_serviceBrand: undefined;\n\n\t\tonBeforeShutdown = Event.None;\n\n\t\tprivate readonly _onWillShutdown = new Emitter<ShutdownEvent>();\n\t\treadonly onWillShutdown = this._onWillShutdown.event;\n\n\t\tasync fireOnWillShutdown(): Promise<void> {\n\t\t\tconst joiners: Promise<void>[] = [];\n\n\t\t\tthis._onWillShutdown.fire({\n\t\t\t\tjoin(promise) {\n\t\t\t\t\tjoiners.push(promise);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tawait Promises.settled(joiners);\n\t\t}\n\n\t\tonWillLoadWindow = Event.None;\n\t\tonBeforeCloseWindow = Event.None;\n\t\tonBeforeUnloadWindow = Event.None;\n\n\t\twasRestarted = false;\n\t\tquitRequested = false;\n\n\t\tphase = LifecycleMainPhase.Ready;\n\n\t\tregisterWindow(window: ICodeWindow): void { }\n\t\tasync reload(window: ICodeWindow, cli?: NativeParsedArgs): Promise<void> { }\n\t\tasync unload(window: ICodeWindow, reason: UnloadReason): Promise<boolean> { return true; }\n\t\trelaunch(options?: { addArgs?: string[] | undefined; removeArgs?: string[] | undefined; }): void { }\n\t\tasync quit(fromUpdate?: boolean): Promise<boolean> { return true; }\n\t\tasync kill(code?: number): Promise<void> { }\n\t\tasync when(phase: LifecycleMainPhase): Promise<void> { }\n\t}\n\n\tasync function testStorage(storage: IStorageMain, isGlobal: boolean): Promise<void> {\n\n\t\t// Telemetry: added after init\n\t\tif (isGlobal) {\n\t\t\tstrictEqual(storage.items.size, 0);\n\t\t\tstrictEqual(storage.get(instanceStorageKey), undefined);\n\t\t\tawait storage.init();\n\t\t\tstrictEqual(typeof storage.get(instanceStorageKey), 'string');\n\t\t\tstrictEqual(typeof storage.get(firstSessionDateStorageKey), 'string');\n\t\t\tstrictEqual(typeof storage.get(currentSessionDateStorageKey), 'string');\n\t\t} else {\n\t\t\tawait storage.init();\n\t\t}\n\n\t\tlet storageChangeEvent: IStorageChangeEvent | undefined = undefined;\n\t\tconst storageChangeListener = storage.onDidChangeStorage(e => {\n\t\t\tstorageChangeEvent = e;\n\t\t});\n\n\t\tlet storageDidClose = false;\n\t\tconst storageCloseListener = storage.onDidCloseStorage(() => storageDidClose = true);\n\n\t\t// Basic store/get/remove\n\t\tconst size = storage.items.size;\n\n\t\tstorage.set('bar', 'foo');\n\t\tstrictEqual(storageChangeEvent!.key, 'bar');\n\t\tstorage.set('barNumber', 55);\n\t\tstorage.set('barBoolean', true);\n\n\t\tstrictEqual(storage.get('bar'), 'foo');\n\t\tstrictEqual(storage.get('barNumber'), '55');\n\t\tstrictEqual(storage.get('barBoolean'), 'true');\n\n\t\tstrictEqual(storage.items.size, size + 3);\n\n\t\tstorage.delete('bar');\n\t\tstrictEqual(storage.get('bar'), undefined);\n\n\t\tstrictEqual(storage.items.size, size + 2);\n\n\t\t// IS_NEW\n\t\tstrictEqual(storage.get(IS_NEW_KEY), 'true');\n\n\t\t// Close\n\t\tawait storage.close();\n\n\t\tstrictEqual(storageDidClose, true);\n\n\t\tstorageChangeListener.dispose();\n\t\tstorageCloseListener.dispose();\n\t}\n\n\ttest('basics (global)', function () {\n\t\tconst storageMainService = new TestStorageMainService(new NullLogService(), new NativeEnvironmentService(parseArgs(process.argv, OPTIONS), productService), new StorageTestLifecycleMainService());\n\n\t\treturn testStorage(storageMainService.globalStorage, true);\n\t});\n\n\ttest('basics (workspace)', function () {\n\t\tconst workspace = { id: generateUuid() };\n\t\tconst storageMainService = new TestStorageMainService(new NullLogService(), new NativeEnvironmentService(parseArgs(process.argv, OPTIONS), productService), new StorageTestLifecycleMainService());\n\n\t\treturn testStorage(storageMainService.workspaceStorage(workspace), false);\n\t});\n\n\ttest('storage closed onWillShutdown', async function () {\n\t\tconst lifecycleMainService = new StorageTestLifecycleMainService();\n\t\tconst workspace = { id: generateUuid() };\n\t\tconst storageMainService = new TestStorageMainService(new NullLogService(), new NativeEnvironmentService(parseArgs(process.argv, OPTIONS), productService), lifecycleMainService);\n\n\t\tlet workspaceStorage = storageMainService.workspaceStorage(workspace);\n\t\tlet didCloseWorkspaceStorage = false;\n\t\tworkspaceStorage.onDidCloseStorage(() => {\n\t\t\tdidCloseWorkspaceStorage = true;\n\t\t});\n\n\t\tlet globalStorage = storageMainService.globalStorage;\n\t\tlet didCloseGlobalStorage = false;\n\t\tglobalStorage.onDidCloseStorage(() => {\n\t\t\tdidCloseGlobalStorage = true;\n\t\t});\n\n\t\tstrictEqual(workspaceStorage, storageMainService.workspaceStorage(workspace)); // same instance as long as not closed\n\n\t\tawait globalStorage.init();\n\t\tawait workspaceStorage.init();\n\n\t\tawait lifecycleMainService.fireOnWillShutdown();\n\n\t\tstrictEqual(didCloseGlobalStorage, true);\n\t\tstrictEqual(didCloseWorkspaceStorage, true);\n\n\t\tlet storage2 = storageMainService.workspaceStorage(workspace);\n\t\tnotStrictEqual(workspaceStorage, storage2);\n\n\t\treturn storage2.close();\n\t});\n\n\ttest('storage closed before init works', async function () {\n\t\tconst storageMainService = new TestStorageMainService(new NullLogService(), new NativeEnvironmentService(parseArgs(process.argv, OPTIONS), productService), new StorageTestLifecycleMainService());\n\t\tconst workspace = { id: generateUuid() };\n\n\t\tlet workspaceStorage = storageMainService.workspaceStorage(workspace);\n\t\tlet didCloseWorkspaceStorage = false;\n\t\tworkspaceStorage.onDidCloseStorage(() => {\n\t\t\tdidCloseWorkspaceStorage = true;\n\t\t});\n\n\t\tlet globalStorage = storageMainService.globalStorage;\n\t\tlet didCloseGlobalStorage = false;\n\t\tglobalStorage.onDidCloseStorage(() => {\n\t\t\tdidCloseGlobalStorage = true;\n\t\t});\n\n\t\tawait globalStorage.close();\n\t\tawait workspaceStorage.close();\n\n\t\tstrictEqual(didCloseGlobalStorage, true);\n\t\tstrictEqual(didCloseWorkspaceStorage, true);\n\t});\n\n\ttest('storage closed before init awaits works', async function () {\n\t\tconst storageMainService = new TestStorageMainService(new NullLogService(), new NativeEnvironmentService(parseArgs(process.argv, OPTIONS), productService), new StorageTestLifecycleMainService());\n\t\tconst workspace = { id: generateUuid() };\n\n\t\tlet workspaceStorage = storageMainService.workspaceStorage(workspace);\n\t\tlet didCloseWorkspaceStorage = false;\n\t\tworkspaceStorage.onDidCloseStorage(() => {\n\t\t\tdidCloseWorkspaceStorage = true;\n\t\t});\n\n\t\tlet globalStorage = storageMainService.globalStorage;\n\t\tlet didCloseGlobalStorage = false;\n\t\tglobalStorage.onDidCloseStorage(() => {\n\t\t\tdidCloseGlobalStorage = true;\n\t\t});\n\n\t\tglobalStorage.init();\n\t\tworkspaceStorage.init();\n\n\t\tawait globalStorage.close();\n\t\tawait workspaceStorage.close();\n\n\t\tstrictEqual(didCloseGlobalStorage, true);\n\t\tstrictEqual(didCloseWorkspaceStorage, true);\n\t});\n});\n"]}