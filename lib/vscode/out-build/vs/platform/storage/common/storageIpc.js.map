{"version":3,"file":"storageIpc.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/storage/common/storageIpc.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { IStorageDatabase, IStorageItemsChangeEvent, IUpdateRequest } from 'vs/base/parts/storage/common/storage';\nimport { IEmptyWorkspaceIdentifier, ISerializedSingleFolderWorkspaceIdentifier, ISerializedWorkspaceIdentifier, ISingleFolderWorkspaceIdentifier, IWorkspaceIdentifier } from 'vs/platform/workspaces/common/workspaces';\n\nexport type Key = string;\nexport type Value = string;\nexport type Item = [Key, Value];\n\nexport interface IBaseSerializableStorageRequest {\n\treadonly workspace: ISerializedWorkspaceIdentifier | ISerializedSingleFolderWorkspaceIdentifier | IEmptyWorkspaceIdentifier | undefined\n}\n\nexport interface ISerializableUpdateRequest extends IBaseSerializableStorageRequest {\n\tinsert?: Item[];\n\tdelete?: Key[];\n}\n\nexport interface ISerializableItemsChangeEvent {\n\treadonly changed?: Item[];\n\treadonly deleted?: Key[];\n}\n\nabstract class BaseStorageDatabaseClient extends Disposable implements IStorageDatabase {\n\n\tabstract readonly onDidChangeItemsExternal: Event<IStorageItemsChangeEvent>;\n\n\tconstructor(protected channel: IChannel, protected workspace: IWorkspaceIdentifier | ISingleFolderWorkspaceIdentifier | IEmptyWorkspaceIdentifier | undefined) {\n\t\tsuper();\n\t}\n\n\tasync getItems(): Promise<Map<string, string>> {\n\t\tconst serializableRequest: IBaseSerializableStorageRequest = { workspace: this.workspace };\n\t\tconst items: Item[] = await this.channel.call('getItems', serializableRequest);\n\n\t\treturn new Map(items);\n\t}\n\n\tupdateItems(request: IUpdateRequest): Promise<void> {\n\t\tconst serializableRequest: ISerializableUpdateRequest = { workspace: this.workspace };\n\n\t\tif (request.insert) {\n\t\t\tserializableRequest.insert = Array.from(request.insert.entries());\n\t\t}\n\n\t\tif (request.delete) {\n\t\t\tserializableRequest.delete = Array.from(request.delete.values());\n\t\t}\n\n\t\treturn this.channel.call('updateItems', serializableRequest);\n\t}\n\n\tabstract close(): Promise<void>;\n}\n\nclass GlobalStorageDatabaseClient extends BaseStorageDatabaseClient implements IStorageDatabase {\n\n\tprivate readonly _onDidChangeItemsExternal = this._register(new Emitter<IStorageItemsChangeEvent>());\n\treadonly onDidChangeItemsExternal = this._onDidChangeItemsExternal.event;\n\n\tconstructor(channel: IChannel) {\n\t\tsuper(channel, undefined);\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.channel.listen<ISerializableItemsChangeEvent>('onDidChangeGlobalStorage')((e: ISerializableItemsChangeEvent) => this.onDidChangeGlobalStorage(e)));\n\t}\n\n\tprivate onDidChangeGlobalStorage(e: ISerializableItemsChangeEvent): void {\n\t\tif (Array.isArray(e.changed) || Array.isArray(e.deleted)) {\n\t\t\tthis._onDidChangeItemsExternal.fire({\n\t\t\t\tchanged: e.changed ? new Map(e.changed) : undefined,\n\t\t\t\tdeleted: e.deleted ? new Set<string>(e.deleted) : undefined\n\t\t\t});\n\t\t}\n\t}\n\n\tasync close(): Promise<void> {\n\n\t\t// The global storage database is shared across all instances so\n\t\t// we do not await it. However we dispose the listener for external\n\t\t// changes because we no longer interested int it.\n\t\tthis.dispose();\n\t}\n}\n\nclass WorkspaceStorageDatabaseClient extends BaseStorageDatabaseClient implements IStorageDatabase {\n\n\treadonly onDidChangeItemsExternal = Event.None; // unsupported for workspace storage because we only ever write from one window\n\n\tconstructor(channel: IChannel, workspace: IWorkspaceIdentifier | ISingleFolderWorkspaceIdentifier | IEmptyWorkspaceIdentifier) {\n\t\tsuper(channel, workspace);\n\t}\n\n\tasync close(): Promise<void> {\n\t\tconst serializableRequest: ISerializableUpdateRequest = { workspace: this.workspace };\n\n\t\treturn this.channel.call('close', serializableRequest);\n\t}\n}\n\nexport class StorageDatabaseChannelClient extends Disposable {\n\n\tprivate _globalStorage: GlobalStorageDatabaseClient | undefined = undefined;\n\tget globalStorage() {\n\t\tif (!this._globalStorage) {\n\t\t\tthis._globalStorage = new GlobalStorageDatabaseClient(this.channel);\n\t\t}\n\n\t\treturn this._globalStorage;\n\t}\n\n\tprivate _workspaceStorage: WorkspaceStorageDatabaseClient | undefined = undefined;\n\tget workspaceStorage() {\n\t\tif (!this._workspaceStorage && this.workspace) {\n\t\t\tthis._workspaceStorage = new WorkspaceStorageDatabaseClient(this.channel, this.workspace);\n\t\t}\n\n\t\treturn this._workspaceStorage;\n\t}\n\n\tconstructor(\n\t\tprivate channel: IChannel,\n\t\tprivate workspace: IWorkspaceIdentifier | ISingleFolderWorkspaceIdentifier | IEmptyWorkspaceIdentifier | undefined\n\t) {\n\t\tsuper();\n\t}\n}\n"]}