{"version":3,"file":"accessibilityService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/accessibility/common/accessibilityService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAQhG,IAAa,oBAAoB,GAAjC,MAAa,oBAAqB,SAAQ,sBAAU;QAOnD,YACsC,kBAAsC,EACjC,qBAA4C;YAEtF,KAAK,EAAE,CAAC;YAH6B,uBAAkB,GAAlB,kBAAkB,CAAoB;YACjC,0BAAqB,GAArB,qBAAqB,CAAuB;YAL7E,0BAAqB,mBAAgC;YAC5C,sCAAiC,GAAG,IAAI,eAAO,EAAQ,CAAC;YAO1E,IAAI,CAAC,gCAAgC,GAAG,kDAAkC,CAAC,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;YAC3G,MAAM,gBAAgB,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,gCAAgC,CAAC,GAAG,CAAC,IAAI,CAAC,uBAAuB,EAAE,CAAC,CAAC;YACzG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,qBAAqB,CAAC,wBAAwB,CAAC,CAAC,CAAC,EAAE;gBACtE,IAAI,CAAC,CAAC,oBAAoB,CAAC,6BAA6B,CAAC,EAAE;oBAC1D,gBAAgB,EAAE,CAAC;oBACnB,IAAI,CAAC,iCAAiC,CAAC,IAAI,EAAE,CAAC;iBAC9C;YACF,CAAC,CAAC,CAAC,CAAC;YACJ,gBAAgB,EAAE,CAAC;YACnB,IAAI,CAAC,gCAAgC,CAAC,GAAG,EAAE,CAAC,gBAAgB,EAAE,CAAC,CAAC;QACjE,CAAC;QAED,IAAI,gCAAgC;YACnC,OAAO,IAAI,CAAC,iCAAiC,CAAC,KAAK,CAAC;QACrD,CAAC;QAED,uBAAuB;YACtB,MAAM,MAAM,GAAG,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,6BAA6B,CAAC,CAAC;YAClF,OAAO,MAAM,KAAK,IAAI,IAAI,CAAC,MAAM,KAAK,MAAM,IAAI,IAAI,CAAC,qBAAqB,oBAAiC,CAAC,CAAC;QAC9G,CAAC;QAED,uBAAuB;YACtB,OAAO,IAAI,CAAC,qBAAqB,CAAC;QACnC,CAAC;QAED,yBAAyB;YACxB,OAAO,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC/B,CAAC;QAED,uBAAuB,CAAC,oBAA0C;YACjE,IAAI,IAAI,CAAC,qBAAqB,KAAK,oBAAoB,EAAE;gBACxD,OAAO;aACP;YAED,IAAI,CAAC,qBAAqB,GAAG,oBAAoB,CAAC;YAClD,IAAI,CAAC,iCAAiC,CAAC,IAAI,EAAE,CAAC;QAC/C,CAAC;KACD,CAAA;IAjDY,oBAAoB;QAQ9B,WAAA,+BAAkB,CAAA;QAClB,WAAA,qCAAqB,CAAA;OATX,oBAAoB,CAiDhC;IAjDY,oDAAoB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IAccessibilityService, AccessibilitySupport, CONTEXT_ACCESSIBILITY_MODE_ENABLED } from 'vs/platform/accessibility/common/accessibility';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { IContextKey, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\n\nexport class AccessibilityService extends Disposable implements IAccessibilityService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate _accessibilityModeEnabledContext: IContextKey<boolean>;\n\tprotected _accessibilitySupport = AccessibilitySupport.Unknown;\n\tprotected readonly _onDidChangeScreenReaderOptimized = new Emitter<void>();\n\n\tconstructor(\n\t\t@IContextKeyService private readonly _contextKeyService: IContextKeyService,\n\t\t@IConfigurationService protected readonly _configurationService: IConfigurationService,\n\t) {\n\t\tsuper();\n\t\tthis._accessibilityModeEnabledContext = CONTEXT_ACCESSIBILITY_MODE_ENABLED.bindTo(this._contextKeyService);\n\t\tconst updateContextKey = () => this._accessibilityModeEnabledContext.set(this.isScreenReaderOptimized());\n\t\tthis._register(this._configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration('editor.accessibilitySupport')) {\n\t\t\t\tupdateContextKey();\n\t\t\t\tthis._onDidChangeScreenReaderOptimized.fire();\n\t\t\t}\n\t\t}));\n\t\tupdateContextKey();\n\t\tthis.onDidChangeScreenReaderOptimized(() => updateContextKey());\n\t}\n\n\tget onDidChangeScreenReaderOptimized(): Event<void> {\n\t\treturn this._onDidChangeScreenReaderOptimized.event;\n\t}\n\n\tisScreenReaderOptimized(): boolean {\n\t\tconst config = this._configurationService.getValue('editor.accessibilitySupport');\n\t\treturn config === 'on' || (config === 'auto' && this._accessibilitySupport === AccessibilitySupport.Enabled);\n\t}\n\n\tgetAccessibilitySupport(): AccessibilitySupport {\n\t\treturn this._accessibilitySupport;\n\t}\n\n\talwaysUnderlineAccessKeys(): Promise<boolean> {\n\t\treturn Promise.resolve(false);\n\t}\n\n\tsetAccessibilitySupport(accessibilitySupport: AccessibilitySupport): void {\n\t\tif (this._accessibilitySupport === accessibilitySupport) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._accessibilitySupport = accessibilitySupport;\n\t\tthis._onDidChangeScreenReaderOptimized.fire();\n\t}\n}\n"]}