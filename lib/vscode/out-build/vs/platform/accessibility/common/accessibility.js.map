{"version":3,"file":"accessibility.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/accessibility/common/accessibility.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAMnF,QAAA,qBAAqB,GAAG,CAAA,GAAA,+BAAe,CAAA,CAAwB,sBAAsB,CAAC,CAAC;IAapG,IAAkB,oBASjB;IATD,WAAkB,oBAAoB;QACrC;;WAEG;QACH,qEAAW,CAAA;QAEX,uEAAY,CAAA;QAEZ,qEAAW,CAAA;IACZ,CAAC,EATiB,oBAAoB,GAApB,4BAAoB,KAApB,4BAAoB,QASrC;IAEY,QAAA,kCAAkC,GAAG,IAAI,0BAAa,CAAU,0BAA0B,EAAE,KAAK,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { Event } from 'vs/base/common/event';\nimport { RawContextKey } from 'vs/platform/contextkey/common/contextkey';\n\nexport const IAccessibilityService = createDecorator<IAccessibilityService>('accessibilityService');\n\nexport interface IAccessibilityService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly onDidChangeScreenReaderOptimized: Event<void>;\n\n\talwaysUnderlineAccessKeys(): Promise<boolean>;\n\tisScreenReaderOptimized(): boolean;\n\tgetAccessibilitySupport(): AccessibilitySupport;\n\tsetAccessibilitySupport(accessibilitySupport: AccessibilitySupport): void;\n}\n\nexport const enum AccessibilitySupport {\n\t/**\n\t * This should be the browser case where it is not known if a screen reader is attached or no.\n\t */\n\tUnknown = 0,\n\n\tDisabled = 1,\n\n\tEnabled = 2\n}\n\nexport const CONTEXT_ACCESSIBILITY_MODE_ENABLED = new RawContextKey<boolean>('accessibilityModeEnabled', false);\n\nexport interface IAccessibilityInformation {\n\tlabel: string;\n\trole?: string;\n}\n"]}