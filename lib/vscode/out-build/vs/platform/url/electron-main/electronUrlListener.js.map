{"version":3,"file":"electronUrlListener.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/url/electron-main/electronUrlListener.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { IEnvironmentMainService } from 'vs/platform/environment/electron-main/environmentMainService';\nimport { IURLService } from 'vs/platform/url/common/url';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { app, Event as ElectronEvent } from 'electron';\nimport { URI } from 'vs/base/common/uri';\nimport { IDisposable, DisposableStore, Disposable } from 'vs/base/common/lifecycle';\nimport { IWindowsMainService } from 'vs/platform/windows/electron-main/windows';\nimport { isWindows } from 'vs/base/common/platform';\nimport { disposableTimeout } from 'vs/base/common/async';\n\nfunction uriFromRawUrl(url: string): URI | null {\n\ttry {\n\t\treturn URI.parse(url);\n\t} catch (e) {\n\t\treturn null;\n\t}\n}\n\n/**\n * A listener for URLs that are opened from the OS and handled by VSCode.\n * Depending on the platform, this works differently:\n * - Windows: we use `app.setAsDefaultProtocolClient()` to register VSCode with the OS\n *            and additionally add the `open-url` command line argument to identify.\n * - macOS:   we rely on `app.on('open-url')` to be called by the OS\n * - Linux:   we have a special shortcut installed (`resources/linux/code-url-handler.desktop`)\n *            that calls VSCode with the `open-url` command line argument\n *            (https://github.com/microsoft/vscode/pull/56727)\n */\nexport class ElectronURLListener {\n\n\tprivate uris: { uri: URI, url: string }[] = [];\n\tprivate retryCount = 0;\n\tprivate flushDisposable: IDisposable = Disposable.None;\n\tprivate disposables = new DisposableStore();\n\n\tconstructor(\n\t\tinitialUrisToHandle: { uri: URI, url: string }[],\n\t\tprivate readonly urlService: IURLService,\n\t\twindowsMainService: IWindowsMainService,\n\t\tenvironmentMainService: IEnvironmentMainService,\n\t\tproductService: IProductService\n\t) {\n\n\t\t// the initial set of URIs we need to handle once the window is ready\n\t\tthis.uris = initialUrisToHandle;\n\n\t\t// Windows: install as protocol handler\n\t\tif (isWindows) {\n\t\t\tconst windowsParameters = environmentMainService.isBuilt ? [] : [`\"${environmentMainService.appRoot}\"`];\n\t\t\twindowsParameters.push('--open-url', '--');\n\t\t\tapp.setAsDefaultProtocolClient(productService.urlProtocol, process.execPath, windowsParameters);\n\t\t}\n\n\t\t// macOS: listen to `open-url` events from here on to handle\n\t\tconst onOpenElectronUrl = Event.map(\n\t\t\tEvent.fromNodeEventEmitter(app, 'open-url', (event: ElectronEvent, url: string) => ({ event, url })),\n\t\t\t({ event, url }) => {\n\t\t\t\tevent.preventDefault(); // always prevent default and return the url as string\n\t\t\t\treturn url;\n\t\t\t});\n\n\t\tthis.disposables.add(onOpenElectronUrl(url => {\n\t\t\tconst uri = uriFromRawUrl(url);\n\n\t\t\tif (!uri) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.urlService.open(uri, { originalUrl: url });\n\t\t}));\n\n\t\t// Send initial links to the window once it has loaded\n\t\tconst isWindowReady = windowsMainService.getWindows()\n\t\t\t.filter(w => w.isReady)\n\t\t\t.length > 0;\n\n\t\tif (isWindowReady) {\n\t\t\tthis.flush();\n\t\t} else {\n\t\t\tEvent.once(windowsMainService.onDidSignalReadyWindow)(this.flush, this, this.disposables);\n\t\t}\n\t}\n\n\tprivate async flush(): Promise<void> {\n\t\tif (this.retryCount++ > 10) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst uris: { uri: URI, url: string }[] = [];\n\n\t\tfor (const obj of this.uris) {\n\t\t\tconst handled = await this.urlService.open(obj.uri, { originalUrl: obj.url });\n\n\t\t\tif (!handled) {\n\t\t\t\turis.push(obj);\n\t\t\t}\n\t\t}\n\n\t\tif (uris.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.uris = uris;\n\t\tthis.flushDisposable = disposableTimeout(() => this.flush(), 500);\n\t}\n\n\tdispose(): void {\n\t\tthis.disposables.dispose();\n\t\tthis.flushDisposable.dispose();\n\t}\n}\n"]}