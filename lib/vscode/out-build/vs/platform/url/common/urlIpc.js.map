{"version":3,"file":"urlIpc.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/url/common/urlIpc.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAQhG,MAAa,iBAAiB;QAE7B,YAAoB,OAAoB;YAApB,YAAO,GAAP,OAAO,CAAa;QAAI,CAAC;QAE7C,MAAM,CAAI,CAAU,EAAE,KAAa;YAClC,MAAM,IAAI,KAAK,CAAC,oBAAoB,KAAK,EAAE,CAAC,CAAC;QAC9C,CAAC;QAED,IAAI,CAAC,CAAU,EAAE,OAAe,EAAE,GAAS;YAC1C,QAAQ,OAAO,EAAE;gBAChB,KAAK,WAAW,CAAC,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,SAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;aAC5E;YAED,MAAM,IAAI,KAAK,CAAC,mBAAmB,OAAO,EAAE,CAAC,CAAC;QAC/C,CAAC;KACD;IAfD,8CAeC;IAED,MAAa,uBAAuB;QAEnC,YAAoB,OAAiB;YAAjB,YAAO,GAAP,OAAO,CAAU;QAAI,CAAC;QAE1C,SAAS,CAAC,GAAQ,EAAE,OAAyB;YAC5C,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,GAAG,CAAC,MAAM,EAAE,EAAE,OAAO,CAAC,CAAC,CAAC;QAChE,CAAC;KACD;IAPD,0DAOC;IAED,MAAa,gBAAgB;QAE5B,YAAoB,IAA2B;YAA3B,SAAI,GAAJ,IAAI,CAAuB;QAAI,CAAC;QAEpD,KAAK,CAAC,SAAS,CAAC,GAA2B,EAAE,OAAe,EAAE,GAAS,EAAE,iBAAqC;YAC7G,IAAI,OAAO,KAAK,WAAW,EAAE;gBAC5B,MAAM,IAAI,KAAK,CAAC,mBAAmB,OAAO,EAAE,CAAC,CAAC;aAC9C;YAED,IAAI,GAAG,EAAE;gBACR,MAAM,GAAG,GAAG,SAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBAE5B,IAAI,GAAG,IAAI,GAAG,CAAC,KAAK,EAAE;oBACrB,MAAM,KAAK,GAAG,kBAAkB,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;oBAEjD,IAAI,KAAK,EAAE;wBACV,MAAM,QAAQ,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;wBAC1B,MAAM,KAAK,GAAG,IAAI,MAAM,CAAC,UAAU,QAAQ,EAAE,CAAC,CAAC;wBAC/C,MAAM,UAAU,GAAG,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;wBAEhE,IAAI,UAAU,EAAE;4BACf,OAAO,UAAU,CAAC;yBAClB;qBACD;iBACD;aACD;YAED,OAAO,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,iBAAiB,CAAC,CAAC;QAClE,CAAC;QAED,UAAU,CAAC,CAAyB,EAAE,KAAa;YAClD,MAAM,IAAI,KAAK,CAAC,oBAAoB,KAAK,EAAE,CAAC,CAAC;QAC9C,CAAC;KACD;IAjCD,4CAiCC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IChannel, IServerChannel, IClientRouter, IConnectionHub, Client } from 'vs/base/parts/ipc/common/ipc';\nimport { URI } from 'vs/base/common/uri';\nimport { Event } from 'vs/base/common/event';\nimport { IURLHandler, IOpenURLOptions } from 'vs/platform/url/common/url';\nimport { CancellationToken } from 'vs/base/common/cancellation';\n\nexport class URLHandlerChannel implements IServerChannel {\n\n\tconstructor(private handler: IURLHandler) { }\n\n\tlisten<T>(_: unknown, event: string): Event<T> {\n\t\tthrow new Error(`Event not found: ${event}`);\n\t}\n\n\tcall(_: unknown, command: string, arg?: any): Promise<any> {\n\t\tswitch (command) {\n\t\t\tcase 'handleURL': return this.handler.handleURL(URI.revive(arg[0]), arg[1]);\n\t\t}\n\n\t\tthrow new Error(`Call not found: ${command}`);\n\t}\n}\n\nexport class URLHandlerChannelClient implements IURLHandler {\n\n\tconstructor(private channel: IChannel) { }\n\n\thandleURL(uri: URI, options?: IOpenURLOptions): Promise<boolean> {\n\t\treturn this.channel.call('handleURL', [uri.toJSON(), options]);\n\t}\n}\n\nexport class URLHandlerRouter implements IClientRouter<string> {\n\n\tconstructor(private next: IClientRouter<string>) { }\n\n\tasync routeCall(hub: IConnectionHub<string>, command: string, arg?: any, cancellationToken?: CancellationToken): Promise<Client<string>> {\n\t\tif (command !== 'handleURL') {\n\t\t\tthrow new Error(`Call not found: ${command}`);\n\t\t}\n\n\t\tif (arg) {\n\t\t\tconst uri = URI.revive(arg);\n\n\t\t\tif (uri && uri.query) {\n\t\t\t\tconst match = /\\bwindowId=(\\d+)/.exec(uri.query);\n\n\t\t\t\tif (match) {\n\t\t\t\t\tconst windowId = match[1];\n\t\t\t\t\tconst regex = new RegExp(`window:${windowId}`);\n\t\t\t\t\tconst connection = hub.connections.find(c => regex.test(c.ctx));\n\n\t\t\t\t\tif (connection) {\n\t\t\t\t\t\treturn connection;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.next.routeCall(hub, command, arg, cancellationToken);\n\t}\n\n\trouteEvent(_: IConnectionHub<string>, event: string): Promise<Client<string>> {\n\t\tthrow new Error(`Event not found: ${event}`);\n\t}\n}\n"]}