{"version":3,"file":"remoteAuthorityResolverService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/remote/browser/remoteAuthorityResolverService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ResolvedAuthority, IRemoteAuthorityResolverService, ResolverResult, IRemoteConnectionData } from 'vs/platform/remote/common/remoteAuthorityResolver';\nimport { RemoteAuthorities } from 'vs/base/common/network';\nimport { URI } from 'vs/base/common/uri';\nimport { Emitter } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\n\nexport class RemoteAuthorityResolverService extends Disposable implements IRemoteAuthorityResolverService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidChangeConnectionData = this._register(new Emitter<void>());\n\tpublic readonly onDidChangeConnectionData = this._onDidChangeConnectionData.event;\n\n\tprivate readonly _cache: Map<string, ResolverResult>;\n\tprivate readonly _connectionToken: string | undefined;\n\tprivate readonly _connectionTokens: Map<string, string>;\n\n\tconstructor(connectionToken: string | undefined, resourceUriProvider: ((uri: URI) => URI) | undefined) {\n\t\tsuper();\n\t\tthis._cache = new Map<string, ResolverResult>();\n\t\tthis._connectionToken = connectionToken;\n\t\tthis._connectionTokens = new Map<string, string>();\n\t\tif (resourceUriProvider) {\n\t\t\tRemoteAuthorities.setDelegate(resourceUriProvider);\n\t\t}\n\t}\n\n\tasync resolveAuthority(authority: string): Promise<ResolverResult> {\n\t\tif (!this._cache.has(authority)) {\n\t\t\tconst result = this._doResolveAuthority(authority);\n\t\t\tRemoteAuthorities.set(authority, result.authority.host, result.authority.port);\n\t\t\tthis._cache.set(authority, result);\n\t\t\tthis._onDidChangeConnectionData.fire();\n\t\t}\n\t\treturn this._cache.get(authority)!;\n\t}\n\n\tgetConnectionData(authority: string): IRemoteConnectionData | null {\n\t\tif (!this._cache.has(authority)) {\n\t\t\treturn null;\n\t\t}\n\t\tconst resolverResult = this._cache.get(authority)!;\n\t\tconst connectionToken = this._connectionTokens.get(authority) || this._connectionToken;\n\t\treturn {\n\t\t\thost: resolverResult.authority.host,\n\t\t\tport: resolverResult.authority.port,\n\t\t\tconnectionToken: connectionToken\n\t\t};\n\t}\n\n\tprivate _doResolveAuthority(authority: string): ResolverResult {\n\t\tconst connectionToken = this._connectionTokens.get(authority) || this._connectionToken;\n\t\tif (authority.indexOf(':') >= 0) {\n\t\t\tconst pieces = authority.split(':');\n\t\t\treturn { authority: { authority, host: pieces[0], port: parseInt(pieces[1], 10), connectionToken } };\n\t\t}\n\t\treturn { authority: { authority, host: authority, port: 80, connectionToken } };\n\t}\n\n\t_clearResolvedAuthority(authority: string): void {\n\t}\n\n\t_setResolvedAuthority(resolvedAuthority: ResolvedAuthority) {\n\t}\n\n\t_setResolvedAuthorityError(authority: string, err: any): void {\n\t}\n\n\t_setAuthorityConnectionToken(authority: string, connectionToken: string): void {\n\t\tthis._connectionTokens.set(authority, connectionToken);\n\t\tRemoteAuthorities.setConnectionToken(authority, connectionToken);\n\t\tthis._onDidChangeConnectionData.fire();\n\t}\n}\n"]}