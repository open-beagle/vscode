{"version":3,"file":"nodeSocketFactory.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/remote/node/nodeSocketFactory.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAMnF,QAAA,iBAAiB,GAAG,IAAI;QACpC,OAAO,CAAC,IAAY,EAAE,IAAY,EAAE,KAAa,EAAE,QAA0B;YAC5E,MAAM,aAAa,GAAG,CAAC,GAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;YAE7D,MAAM,MAAM,GAAG,GAAG,CAAC,gBAAgB,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,GAAG,EAAE;gBACpE,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;gBAE9C,gDAAgD;gBAChD,MAAM,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;gBAChC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;oBAC5B,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC;iBAC5C;gBACD,MAAM,KAAK,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;gBAExC,IAAI,OAAO,GAAG;oBACb,YAAY,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,GAAG,CAAC,CAAC,CAAC,IAAI,IAAI,IAAI,KAAK,KAAK,oCAAoC;oBACrG,qBAAqB;oBACrB,oBAAoB;oBACpB,sBAAsB,KAAK,EAAE;iBAC7B,CAAC;gBACF,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,UAAU,CAAC,CAAC;gBAEhD,MAAM,MAAM,GAAG,CAAC,IAAY,EAAE,EAAE;oBAC/B,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;oBAChC,IAAI,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;wBACrC,sBAAsB;wBACtB,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;wBAC3B,QAAQ,CAAC,SAAS,EAAE,IAAI,oBAAU,CAAC,MAAM,CAAC,CAAC,CAAC;qBAC5C;gBACF,CAAC,CAAC;gBACF,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;YAC3B,CAAC,CAAC,CAAC;YACH,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;QACrC,CAAC;KACD,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as net from 'net';\nimport { NodeSocket } from 'vs/base/parts/ipc/node/ipc.net';\nimport { ISocketFactory, IConnectCallback } from 'vs/platform/remote/common/remoteAgentConnection';\n\nexport const nodeSocketFactory = new class implements ISocketFactory {\n\tconnect(host: string, port: number, query: string, callback: IConnectCallback): void {\n\t\tconst errorListener = (err: any) => callback(err, undefined);\n\n\t\tconst socket = net.createConnection({ host: host, port: port }, () => {\n\t\t\tsocket.removeListener('error', errorListener);\n\n\t\t\t// https://tools.ietf.org/html/rfc6455#section-4\n\t\t\tconst buffer = Buffer.alloc(16);\n\t\t\tfor (let i = 0; i < 16; i++) {\n\t\t\t\tbuffer[i] = Math.round(Math.random() * 256);\n\t\t\t}\n\t\t\tconst nonce = buffer.toString('base64');\n\n\t\t\tlet headers = [\n\t\t\t\t`GET ws://${/:/.test(host) ? `[${host}]` : host}:${port}/?${query}&skipWebSocketFrames=true HTTP/1.1`,\n\t\t\t\t`Connection: Upgrade`,\n\t\t\t\t`Upgrade: websocket`,\n\t\t\t\t`Sec-WebSocket-Key: ${nonce}`\n\t\t\t];\n\t\t\tsocket.write(headers.join('\\r\\n') + '\\r\\n\\r\\n');\n\n\t\t\tconst onData = (data: Buffer) => {\n\t\t\t\tconst strData = data.toString();\n\t\t\t\tif (strData.indexOf('\\r\\n\\r\\n') >= 0) {\n\t\t\t\t\t// headers received OK\n\t\t\t\t\tsocket.off('data', onData);\n\t\t\t\t\tcallback(undefined, new NodeSocket(socket));\n\t\t\t\t}\n\t\t\t};\n\t\t\tsocket.on('data', onData);\n\t\t});\n\t\tsocket.once('error', errorListener);\n\t}\n};\n"]}