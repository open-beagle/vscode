{"version":3,"file":"telemetryLogAppender.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/telemetry/test/common/telemetryLogAppender.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as assert from 'assert';\nimport { LogLevel, ILoggerService, AbstractLogger, DEFAULT_LOG_LEVEL, ILogger } from 'vs/platform/log/common/log';\nimport { TestInstantiationService } from 'vs/platform/instantiation/test/common/instantiationServiceMock';\nimport { TelemetryLogAppender } from 'vs/platform/telemetry/common/telemetryLogAppender';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\n\nclass TestTelemetryLogger extends AbstractLogger implements ILogger {\n\n\tpublic logs: string[] = [];\n\n\tconstructor(logLevel: LogLevel = DEFAULT_LOG_LEVEL) {\n\t\tsuper();\n\t\tthis.setLevel(logLevel);\n\t}\n\n\ttrace(message: string, ...args: any[]): void {\n\t\tif (this.getLevel() <= LogLevel.Trace) {\n\t\t\tthis.logs.push(message + JSON.stringify(args));\n\t\t}\n\t}\n\n\tdebug(message: string, ...args: any[]): void {\n\t\tif (this.getLevel() <= LogLevel.Debug) {\n\t\t\tthis.logs.push(message);\n\t\t}\n\t}\n\n\tinfo(message: string, ...args: any[]): void {\n\t\tif (this.getLevel() <= LogLevel.Info) {\n\t\t\tthis.logs.push(message);\n\t\t}\n\t}\n\n\twarn(message: string | Error, ...args: any[]): void {\n\t\tif (this.getLevel() <= LogLevel.Warning) {\n\t\t\tthis.logs.push(message.toString());\n\t\t}\n\t}\n\n\terror(message: string, ...args: any[]): void {\n\t\tif (this.getLevel() <= LogLevel.Error) {\n\t\t\tthis.logs.push(message);\n\t\t}\n\t}\n\n\tcritical(message: string, ...args: any[]): void {\n\t\tif (this.getLevel() <= LogLevel.Critical) {\n\t\t\tthis.logs.push(message);\n\t\t}\n\t}\n\n\toverride dispose(): void { }\n\tflush(): void { }\n}\n\nclass TestTelemetryLoggerService implements ILoggerService {\n\t_serviceBrand: undefined;\n\n\tlogger: TestTelemetryLogger;\n\n\tconstructor(logLevel: LogLevel) {\n\t\tthis.logger = new TestTelemetryLogger(logLevel);\n\t}\n\n\tcreateLogger(): ILogger {\n\t\treturn this.logger;\n\t}\n}\n\nsuite('TelemetryLogAdapter', () => {\n\n\ttest('Do not Log Telemetry if log level is not trace', async () => {\n\t\tconst testLoggerService = new TestTelemetryLoggerService(DEFAULT_LOG_LEVEL);\n\t\tconst testObject = new TelemetryLogAppender(testLoggerService, new TestInstantiationService().stub(IEnvironmentService, {}));\n\t\ttestObject.log('testEvent', { hello: 'world', isTrue: true, numberBetween1And3: 2 });\n\t\tassert.strictEqual(testLoggerService.logger.logs.length, 2);\n\t});\n\n\ttest('Log Telemetry if log level is trace', async () => {\n\t\tconst testLoggerService = new TestTelemetryLoggerService(LogLevel.Trace);\n\t\tconst testObject = new TelemetryLogAppender(testLoggerService, new TestInstantiationService().stub(IEnvironmentService, {}));\n\t\ttestObject.log('testEvent', { hello: 'world', isTrue: true, numberBetween1And3: 2 });\n\t\tassert.strictEqual(testLoggerService.logger.logs[2], 'telemetry/testEvent' + JSON.stringify([{\n\t\t\tproperties: {\n\t\t\t\thello: 'world',\n\t\t\t},\n\t\t\tmeasurements: {\n\t\t\t\tisTrue: 1, numberBetween1And3: 2\n\t\t\t}\n\t\t}]));\n\t});\n});\n"]}