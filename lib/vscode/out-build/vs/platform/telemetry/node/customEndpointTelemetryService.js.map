{"version":3,"file":"customEndpointTelemetryService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/telemetry/node/customEndpointTelemetryService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAShG,IAAa,8BAA8B,GAA3C,MAAa,8BAA8B;QAK1C,YACyC,oBAA2C,EAC/C,gBAAmC;YAD/B,yBAAoB,GAApB,oBAAoB,CAAuB;YAC/C,qBAAgB,GAAhB,gBAAgB,CAAmB;YAJhE,4BAAuB,GAAG,IAAI,GAAG,EAA6B,CAAC;QAKnE,CAAC;QAEG,KAAK,CAAC,yBAAyB,CAAC,QAA4B;YACnE,IAAI,CAAC,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE;gBACnD,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,CAAC;gBAChF,MAAM,aAAa,GAA8B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBACrE,aAAa,CAAC,wBAAwB,CAAC,GAAG,SAAS,CAAC;gBACpD,aAAa,CAAC,wBAAwB,CAAC,GAAG,SAAS,CAAC;gBACpD,MAAM,IAAI,GAAG,CAAC,QAAQ,CAAC,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC;gBAC1E,MAAM,MAAM,GAAG,IAAI,eAAe,CACjC,oBAAU,CAAC,SAAS,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC,MAAM,EACtD;oBACC,UAAU,EAAE,iBAAiB;oBAC7B,OAAO,EAAE,IAAI,GAAG,EAAE,GAAG,CAAC;oBACtB,IAAI;oBACJ,GAAG,EAAE;wBACJ,oBAAoB,EAAE,CAAC;wBACvB,mBAAmB,EAAE,MAAM;wBAC3B,qBAAqB,EAAE,8CAA8C;qBACrE;iBACD,CACD,CAAC;gBAEF,MAAM,OAAO,GAAG,MAAM,CAAC,UAAU,CAAC,mBAAmB,CAAC,CAAC;gBACvD,MAAM,QAAQ,GAAG,IAAI,sCAAuB,CAAC,OAAO,CAAC,CAAC;gBAEtD,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,EAAE,IAAI,mCAAgB,CAAC;oBAClE,QAAQ;oBACR,kBAAkB,EAAE,QAAQ,CAAC,kBAAkB;iBAC/C,EAAE,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC;aAC/B;YAED,OAAO,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAE,CAAC;QACvD,CAAC;QAED,KAAK,CAAC,SAAS,CAAC,iBAAqC,EAAE,SAAiB,EAAE,IAAqB;YAC9F,MAAM,sBAAsB,GAAG,MAAM,IAAI,CAAC,yBAAyB,CAAC,iBAAiB,CAAC,CAAC;YACvF,MAAM,sBAAsB,CAAC,SAAS,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QACzD,CAAC;QAED,KAAK,CAAC,cAAc,CAAC,iBAAqC,EAAE,cAAsB,EAAE,IAAqB;YACxG,MAAM,sBAAsB,GAAG,MAAM,IAAI,CAAC,yBAAyB,CAAC,iBAAiB,CAAC,CAAC;YACvF,MAAM,sBAAsB,CAAC,cAAc,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;QACnE,CAAC;KACD,CAAA;IApDY,8BAA8B;QAMxC,WAAA,qCAAqB,CAAA;QACrB,WAAA,6BAAiB,CAAA;OAPP,8BAA8B,CAoD1C;IApDY,wEAA8B","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Client as TelemetryClient } from 'vs/base/parts/ipc/node/ipc.cp';\nimport { TelemetryAppenderClient } from 'vs/platform/telemetry/common/telemetryIpc';\nimport { FileAccess } from 'vs/base/common/network';\nimport { TelemetryService } from 'vs/platform/telemetry/common/telemetryService';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ICustomEndpointTelemetryService, ITelemetryData, ITelemetryEndpoint, ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\n\nexport class CustomEndpointTelemetryService implements ICustomEndpointTelemetryService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate customTelemetryServices = new Map<string, ITelemetryService>();\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService\n\t) { }\n\n\tprivate async getCustomTelemetryService(endpoint: ITelemetryEndpoint): Promise<ITelemetryService> {\n\t\tif (!this.customTelemetryServices.has(endpoint.id)) {\n\t\t\tconst { machineId, sessionId } = await this.telemetryService.getTelemetryInfo();\n\t\t\tconst telemetryInfo: { [key: string]: string } = Object.create(null);\n\t\t\ttelemetryInfo['common.vscodemachineid'] = machineId;\n\t\t\ttelemetryInfo['common.vscodesessionid'] = sessionId;\n\t\t\tconst args = [endpoint.id, JSON.stringify(telemetryInfo), endpoint.aiKey];\n\t\t\tconst client = new TelemetryClient(\n\t\t\t\tFileAccess.asFileUri('bootstrap-fork', require).fsPath,\n\t\t\t\t{\n\t\t\t\t\tserverName: 'Debug Telemetry',\n\t\t\t\t\ttimeout: 1000 * 60 * 5,\n\t\t\t\t\targs,\n\t\t\t\t\tenv: {\n\t\t\t\t\t\tELECTRON_RUN_AS_NODE: 1,\n\t\t\t\t\t\tVSCODE_PIPE_LOGGING: 'true',\n\t\t\t\t\t\tVSCODE_AMD_ENTRYPOINT: 'vs/workbench/contrib/debug/node/telemetryApp'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tconst channel = client.getChannel('telemetryAppender');\n\t\t\tconst appender = new TelemetryAppenderClient(channel);\n\n\t\t\tthis.customTelemetryServices.set(endpoint.id, new TelemetryService({\n\t\t\t\tappender,\n\t\t\t\tsendErrorTelemetry: endpoint.sendErrorTelemetry\n\t\t\t}, this.configurationService));\n\t\t}\n\n\t\treturn this.customTelemetryServices.get(endpoint.id)!;\n\t}\n\n\tasync publicLog(telemetryEndpoint: ITelemetryEndpoint, eventName: string, data?: ITelemetryData): Promise<void> {\n\t\tconst customTelemetryService = await this.getCustomTelemetryService(telemetryEndpoint);\n\t\tawait customTelemetryService.publicLog(eventName, data);\n\t}\n\n\tasync publicLogError(telemetryEndpoint: ITelemetryEndpoint, errorEventName: string, data?: ITelemetryData): Promise<void> {\n\t\tconst customTelemetryService = await this.getCustomTelemetryService(telemetryEndpoint);\n\t\tawait customTelemetryService.publicLogError(errorEventName, data);\n\t}\n}\n"]}