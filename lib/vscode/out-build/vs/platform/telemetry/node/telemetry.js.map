{"version":3,"file":"telemetry.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/telemetry/node/telemetry.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAMhG,SAAgB,qBAAqB,CAAC,OAAe,EAAE,cAAuB;QAC7E,MAAM,eAAe,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC5C,8DAA8D;QAC9D,MAAM,cAAc,GAAG,CAAC,QAAgB,EAAE,OAAe,EAAE,EAAE;YAC5D,MAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YAC3C,eAAe,CAAC,OAAO,CAAC,GAAG,aAAa,CAAC;QAC1C,CAAC,CAAC;QACF,IAAI,cAAc,EAAE;YACnB,0DAA0D;YAC1D,MAAM,IAAI,GAAG,CAAA,GAAA,iBAAW,CAAA,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;gBACvD,sFAAsF;gBACtF,IAAI;oBACH,OAAO,CAAA,GAAA,aAAQ,CAAA,CAAC,CAAA,GAAA,WAAI,CAAA,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;iBAC3D;gBAAC,WAAM;oBACP,OAAO,KAAK,CAAC;iBACb;YACF,CAAC,CAAC,CAAC;YACH,MAAM,oBAAoB,GAAa,EAAE,CAAC;YAC1C,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;gBACpB,MAAM,KAAK,GAAG,CAAA,GAAA,iBAAW,CAAA,CAAC,CAAA,GAAA,WAAI,CAAA,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,KAAK,gBAAgB,CAAC,CAAC;gBAC/F,+FAA+F;gBAC/F,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;oBACvB,oBAAoB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;iBAC/B;YACF,CAAC,CAAC,CAAC;YACH,oBAAoB,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;gBACvC,MAAM,QAAQ,GAAG,CAAA,GAAA,iBAAY,CAAA,CAAC,CAAA,GAAA,WAAI,CAAA,CAAC,cAAc,EAAE,MAAM,EAAE,gBAAgB,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;gBACzF,cAAc,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;YAClC,CAAC,CAAC,CAAC;SACH;QACD,IAAI,QAAQ,GAAG,CAAA,GAAA,iBAAY,CAAA,CAAC,CAAA,GAAA,WAAI,CAAA,CAAC,OAAO,EAAE,qBAAqB,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;QAC7E,cAAc,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;QACxC,QAAQ,GAAG,CAAA,GAAA,iBAAY,CAAA,CAAC,CAAA,GAAA,WAAI,CAAA,CAAC,OAAO,EAAE,2BAA2B,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;QAC/E,cAAc,CAAC,QAAQ,EAAE,mBAAmB,CAAC,CAAC;QAC9C,OAAO,IAAI,CAAC,SAAS,CAAC,eAAe,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;IACjD,CAAC;IAnCD,sDAmCC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { readdirSync } from 'vs/base/node/pfs';\nimport { statSync, readFileSync } from 'fs';\nimport { join } from 'vs/base/common/path';\n\nexport function buildTelemetryMessage(appRoot: string, extensionsPath?: string): string {\n\tconst mergedTelemetry = Object.create(null);\n\t// Simple function to merge the telemetry into one json object\n\tconst mergeTelemetry = (contents: string, dirName: string) => {\n\t\tconst telemetryData = JSON.parse(contents);\n\t\tmergedTelemetry[dirName] = telemetryData;\n\t};\n\tif (extensionsPath) {\n\t\t// Gets all the directories inside the extension directory\n\t\tconst dirs = readdirSync(extensionsPath).filter(files => {\n\t\t\t// This handles case where broken symbolic links can cause statSync to throw and error\n\t\t\ttry {\n\t\t\t\treturn statSync(join(extensionsPath, files)).isDirectory();\n\t\t\t} catch {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n\t\tconst telemetryJsonFolders: string[] = [];\n\t\tdirs.forEach((dir) => {\n\t\t\tconst files = readdirSync(join(extensionsPath, dir)).filter(file => file === 'telemetry.json');\n\t\t\t// We know it contains a telemetry.json file so we add it to the list of folders which have one\n\t\t\tif (files.length === 1) {\n\t\t\t\ttelemetryJsonFolders.push(dir);\n\t\t\t}\n\t\t});\n\t\ttelemetryJsonFolders.forEach((folder) => {\n\t\t\tconst contents = readFileSync(join(extensionsPath, folder, 'telemetry.json')).toString();\n\t\t\tmergeTelemetry(contents, folder);\n\t\t});\n\t}\n\tlet contents = readFileSync(join(appRoot, 'telemetry-core.json')).toString();\n\tmergeTelemetry(contents, 'vscode-core');\n\tcontents = readFileSync(join(appRoot, 'telemetry-extensions.json')).toString();\n\tmergeTelemetry(contents, 'vscode-extensions');\n\treturn JSON.stringify(mergedTelemetry, null, 4);\n}\n"]}