{"version":3,"file":"appInsightsAppender.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/telemetry/node/appInsightsAppender.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as appInsights from 'applicationinsights';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { mixin } from 'vs/base/common/objects';\nimport { ITelemetryAppender, validateTelemetryData } from 'vs/platform/telemetry/common/telemetryUtils';\n\nasync function getClient(aiKey: string): Promise<appInsights.TelemetryClient> {\n\tconst appInsights = await import('applicationinsights');\n\tlet client: appInsights.TelemetryClient;\n\tif (appInsights.defaultClient) {\n\t\tclient = new appInsights.TelemetryClient(aiKey);\n\t\tclient.channel.setUseDiskRetryCaching(true);\n\t} else {\n\t\tappInsights.setup(aiKey)\n\t\t\t.setAutoCollectRequests(false)\n\t\t\t.setAutoCollectPerformance(false)\n\t\t\t.setAutoCollectExceptions(false)\n\t\t\t.setAutoCollectDependencies(false)\n\t\t\t.setAutoDependencyCorrelation(false)\n\t\t\t.setAutoCollectConsole(false)\n\t\t\t.setInternalLogging(false, false)\n\t\t\t.setUseDiskRetryCaching(true)\n\t\t\t.start();\n\t\tclient = appInsights.defaultClient;\n\t}\n\n\tif (aiKey.indexOf('AIF-') === 0) {\n\t\tclient.config.endpointUrl = 'https://vortex.data.microsoft.com/collect/v1';\n\t}\n\treturn client;\n}\n\n\nexport class AppInsightsAppender implements ITelemetryAppender {\n\n\tprivate _aiClient: string | appInsights.TelemetryClient | undefined;\n\tprivate _asyncAIClient: Promise<appInsights.TelemetryClient> | null;\n\n\tconstructor(\n\t\tprivate _eventPrefix: string,\n\t\tprivate _defaultData: { [key: string]: any } | null,\n\t\taiKeyOrClientFactory: string | (() => appInsights.TelemetryClient), // allow factory function for testing\n\t) {\n\t\tif (!this._defaultData) {\n\t\t\tthis._defaultData = Object.create(null);\n\t\t}\n\n\t\tif (typeof aiKeyOrClientFactory === 'function') {\n\t\t\tthis._aiClient = aiKeyOrClientFactory();\n\t\t} else {\n\t\t\tthis._aiClient = aiKeyOrClientFactory;\n\t\t}\n\t\tthis._asyncAIClient = null;\n\t}\n\n\tprivate _withAIClient(callback: (aiClient: appInsights.TelemetryClient) => void): void {\n\t\tif (!this._aiClient) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (typeof this._aiClient !== 'string') {\n\t\t\tcallback(this._aiClient);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this._asyncAIClient) {\n\t\t\tthis._asyncAIClient = getClient(this._aiClient);\n\t\t}\n\n\t\tthis._asyncAIClient.then(\n\t\t\t(aiClient) => {\n\t\t\t\tcallback(aiClient);\n\t\t\t},\n\t\t\t(err) => {\n\t\t\t\tonUnexpectedError(err);\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t);\n\t}\n\n\tlog(eventName: string, data?: any): void {\n\t\tif (!this._aiClient) {\n\t\t\treturn;\n\t\t}\n\t\tdata = mixin(data, this._defaultData);\n\t\tdata = validateTelemetryData(data);\n\n\t\tthis._withAIClient((aiClient) => aiClient.trackEvent({\n\t\t\tname: this._eventPrefix + '/' + eventName,\n\t\t\tproperties: data.properties,\n\t\t\tmeasurements: data.measurements\n\t\t}));\n\t}\n\n\tflush(): Promise<any> {\n\t\tif (this._aiClient) {\n\t\t\treturn new Promise(resolve => {\n\t\t\t\tthis._withAIClient((aiClient) => {\n\t\t\t\t\taiClient.flush({\n\t\t\t\t\t\tcallback: () => {\n\t\t\t\t\t\t\t// all data flushed\n\t\t\t\t\t\t\tthis._aiClient = undefined;\n\t\t\t\t\t\t\tresolve(undefined);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\treturn Promise.resolve(undefined);\n\t}\n}\n"]}