{"version":3,"sources":["vs/platform/telemetry/common/telemetryService.ts"],"names":[],"mappings":"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","file":"telemetryService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport product from 'vs/platform/product/common/product';\nimport { localize } from 'vs/nls';\nimport { escapeRegExpCharacters } from 'vs/base/common/strings';\nimport { ITelemetryService, ITelemetryInfo, ITelemetryData } from 'vs/platform/telemetry/common/telemetry';\nimport { ITelemetryAppender } from 'vs/platform/telemetry/common/telemetryUtils';\nimport { optional } from 'vs/platform/instantiation/common/instantiation';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IConfigurationRegistry, Extensions, ConfigurationScope } from 'vs/platform/configuration/common/configurationRegistry';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { cloneAndChange, mixin } from 'vs/base/common/objects';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { ClassifiedEvent, StrictPropertyCheck, GDPRClassification } from 'vs/platform/telemetry/common/gdprTypings';\n\nexport interface ITelemetryServiceConfig {\n\tappender: ITelemetryAppender;\n\tsendErrorTelemetry?: boolean;\n\tcommonProperties?: Promise<{ [name: string]: any }>;\n\tpiiPaths?: string[];\n}\n\nexport class TelemetryService implements ITelemetryService {\n\n\tstatic readonly IDLE_START_EVENT_NAME = 'UserIdleStart';\n\tstatic readonly IDLE_STOP_EVENT_NAME = 'UserIdleStop';\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate _appender: ITelemetryAppender;\n\tprivate _commonProperties: Promise<{ [name: string]: any; }>;\n\tprivate _experimentProperties: { [name: string]: string } = {};\n\tprivate _piiPaths: string[];\n\tprivate _userOptIn: boolean;\n\tprivate _enabled: boolean;\n\tpublic readonly sendErrorTelemetry: boolean;\n\n\tprivate readonly _disposables = new DisposableStore();\n\tprivate _cleanupPatterns: RegExp[] = [];\n\n\tconstructor(\n\t\tconfig: ITelemetryServiceConfig,\n\t\t@optional(IConfigurationService) private _configurationService: IConfigurationService\n\t) {\n\t\tthis._appender = config.appender;\n\t\tthis._commonProperties = config.commonProperties || Promise.resolve({});\n\t\tthis._piiPaths = config.piiPaths || [];\n\t\tthis._userOptIn = true;\n\t\tthis._enabled = true;\n\t\tthis.sendErrorTelemetry = !!config.sendErrorTelemetry;\n\n\t\t// static cleanup pattern for: `file:///DANGEROUS/PATH/resources/app/Useful/Information`\n\t\tthis._cleanupPatterns = [/file:\\/\\/\\/.*?\\/resources\\/app\\//gi];\n\n\t\tfor (let piiPath of this._piiPaths) {\n\t\t\tthis._cleanupPatterns.push(new RegExp(escapeRegExpCharacters(piiPath), 'gi'));\n\t\t}\n\n\t\tif (this._configurationService) {\n\t\t\tthis._updateUserOptIn();\n\t\t\tthis._configurationService.onDidChangeConfiguration(this._updateUserOptIn, this, this._disposables);\n\t\t\ttype OptInClassification = {\n\t\t\t\toptIn: { classification: 'SystemMetaData', purpose: 'BusinessInsight', isMeasurement: true };\n\t\t\t};\n\t\t\ttype OptInEvent = {\n\t\t\t\toptIn: boolean;\n\t\t\t};\n\t\t\tthis.publicLog2<OptInEvent, OptInClassification>('optInStatus', { optIn: this._userOptIn });\n\n\t\t\tthis._commonProperties.then(values => {\n\t\t\t\tconst isHashedId = /^[a-f0-9]+$/i.test(values['common.machineId']);\n\n\t\t\t\ttype MachineIdFallbackClassification = {\n\t\t\t\t\tusingFallbackGuid: { classification: 'SystemMetaData', purpose: 'BusinessInsight', isMeasurement: true };\n\t\t\t\t};\n\t\t\t\tthis.publicLog2<{ usingFallbackGuid: boolean }, MachineIdFallbackClassification>('machineIdFallback', { usingFallbackGuid: !isHashedId });\n\t\t\t});\n\t\t}\n\t}\n\n\tsetExperimentProperty(name: string, value: string): void {\n\t\tthis._experimentProperties[name] = value;\n\t}\n\n\tsetEnabled(value: boolean): void {\n\t\tthis._enabled = value;\n\t}\n\n\tprivate _updateUserOptIn(): void {\n\t\tconst config = this._configurationService?.getValue<any>(TELEMETRY_SECTION_ID);\n\t\tthis._userOptIn = config ? config.enableTelemetry : this._userOptIn;\n\t}\n\n\tget isOptedIn(): boolean {\n\t\treturn this._userOptIn && this._enabled;\n\t}\n\n\tasync getTelemetryInfo(): Promise<ITelemetryInfo> {\n\t\tconst values = await this._commonProperties;\n\n\t\t// well known properties\n\t\tlet sessionId = values['sessionID'];\n\t\tlet instanceId = values['common.instanceId'];\n\t\tlet machineId = values['common.machineId'];\n\t\tlet firstSessionDate = values['common.firstSessionDate'];\n\t\tlet msftInternal = values['common.msftInternal'];\n\n\t\treturn { sessionId, instanceId, machineId, firstSessionDate, msftInternal };\n\t}\n\n\tdispose(): void {\n\t\tthis._disposables.dispose();\n\t}\n\n\tpublicLog(eventName: string, data?: ITelemetryData, anonymizeFilePaths?: boolean): Promise<any> {\n\t\t// don't send events when the user is optout\n\t\tif (!this.isOptedIn) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\treturn this._commonProperties.then(values => {\n\n\t\t\t// (first) add common properties\n\t\t\tdata = mixin(data, values);\n\n\t\t\t// (next) add experiment properties\n\t\t\tdata = mixin(data, this._experimentProperties);\n\n\t\t\t// (last) remove all PII from data\n\t\t\tdata = cloneAndChange(data, value => {\n\t\t\t\tif (typeof value === 'string') {\n\t\t\t\t\treturn this._cleanupInfo(value, anonymizeFilePaths);\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t});\n\n\t\t\tthis._appender.log(eventName, data);\n\n\t\t}, err => {\n\t\t\t// unsure what to do now...\n\t\t\tconsole.error(err);\n\t\t});\n\t}\n\n\tpublicLog2<E extends ClassifiedEvent<T> = never, T extends GDPRClassification<T> = never>(eventName: string, data?: StrictPropertyCheck<T, E>, anonymizeFilePaths?: boolean): Promise<any> {\n\t\treturn this.publicLog(eventName, data as ITelemetryData, anonymizeFilePaths);\n\t}\n\n\tpublicLogError(errorEventName: string, data?: ITelemetryData): Promise<any> {\n\t\tif (!this.sendErrorTelemetry) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\t// Send error event and anonymize paths\n\t\treturn this.publicLog(errorEventName, data, true);\n\t}\n\n\tpublicLogError2<E extends ClassifiedEvent<T> = never, T extends GDPRClassification<T> = never>(eventName: string, data?: StrictPropertyCheck<T, E>): Promise<any> {\n\t\treturn this.publicLogError(eventName, data as ITelemetryData);\n\t}\n\n\tprivate _cleanupInfo(stack: string, anonymizeFilePaths?: boolean): string {\n\t\tlet updatedStack = stack;\n\n\t\tif (anonymizeFilePaths) {\n\t\t\tconst cleanUpIndexes: [number, number][] = [];\n\t\t\tfor (let regexp of this._cleanupPatterns) {\n\t\t\t\twhile (true) {\n\t\t\t\t\tconst result = regexp.exec(stack);\n\t\t\t\t\tif (!result) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcleanUpIndexes.push([result.index, regexp.lastIndex]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst nodeModulesRegex = /^[\\\\\\/]?(node_modules|node_modules\\.asar)[\\\\\\/]/;\n\t\t\tconst fileRegex = /(file:\\/\\/)?([a-zA-Z]:(\\\\\\\\|\\\\|\\/)|(\\\\\\\\|\\\\|\\/))?([\\w-\\._]+(\\\\\\\\|\\\\|\\/))+[\\w-\\._]*/g;\n\t\t\tlet lastIndex = 0;\n\t\t\tupdatedStack = '';\n\n\t\t\twhile (true) {\n\t\t\t\tconst result = fileRegex.exec(stack);\n\t\t\t\tif (!result) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t// Anoynimize user file paths that do not need to be retained or cleaned up.\n\t\t\t\tif (!nodeModulesRegex.test(result[0]) && cleanUpIndexes.every(([x, y]) => result.index < x || result.index >= y)) {\n\t\t\t\t\tupdatedStack += stack.substring(lastIndex, result.index) + '<REDACTED: user-file-path>';\n\t\t\t\t\tlastIndex = fileRegex.lastIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (lastIndex < stack.length) {\n\t\t\t\tupdatedStack += stack.substr(lastIndex);\n\t\t\t}\n\t\t}\n\n\t\t// sanitize with configured cleanup patterns\n\t\tfor (let regexp of this._cleanupPatterns) {\n\t\t\tupdatedStack = updatedStack.replace(regexp, '');\n\t\t}\n\t\treturn updatedStack;\n\t}\n}\n\n\nconst TELEMETRY_SECTION_ID = 'telemetry';\n\n\nRegistry.as<IConfigurationRegistry>(Extensions.Configuration).registerConfiguration({\n\t'id': TELEMETRY_SECTION_ID,\n\t'order': 110,\n\t'type': 'object',\n\t'title': localize('telemetryConfigurationTitle', \"Telemetry\"),\n\t'properties': {\n\t\t'telemetry.enableTelemetry': {\n\t\t\t'type': 'boolean',\n\t\t\t'markdownDescription':\n\t\t\t\t!product.privacyStatementUrl ?\n\t\t\t\t\tlocalize('telemetry.enableTelemetry', \"Enable usage data and errors to be sent to a Microsoft online service.\") :\n\t\t\t\t\tlocalize('telemetry.enableTelemetryMd', \"Enable usage data and errors to be sent to a Microsoft online service. Read our privacy statement [here]({0}).\", product.privacyStatementUrl),\n\t\t\t'default': true,\n\t\t\t'restricted': true,\n\t\t\t'scope': ConfigurationScope.APPLICATION,\n\t\t\t'tags': ['usesOnlineServices']\n\t\t}\n\t}\n});\n"]}