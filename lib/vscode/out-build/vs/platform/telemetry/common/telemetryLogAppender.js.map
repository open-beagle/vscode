{"version":3,"file":"telemetryLogAppender.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/telemetry/common/telemetryLogAppender.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAOhG,IAAa,oBAAoB,GAAjC,MAAa,oBAAqB,SAAQ,sBAAU;QAInD,YACiB,aAA6B,EACxB,kBAAuC;YAE5D,KAAK,EAAE,CAAC;YACR,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,YAAY,CAAC,kBAAkB,CAAC,oBAAoB,CAAC,CAAC,CAAC;YAClG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,oGAAoG,CAAC,CAAC;YACvH,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,6DAA6D,CAAC,CAAC;QACjF,CAAC;QAED,KAAK;YACJ,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QACnC,CAAC;QAED,GAAG,CAAC,SAAiB,EAAE,IAAS;YAC/B,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,aAAa,SAAS,EAAE,EAAE,CAAA,GAAA,sCAAqB,CAAA,CAAC,IAAI,CAAC,CAAC,CAAC;QAC1E,CAAC;KACD,CAAA;IArBY,oBAAoB;QAK9B,WAAA,oBAAc,CAAA;QACd,WAAA,iCAAmB,CAAA;OANT,oBAAoB,CAqBhC;IArBY,oDAAoB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { ILogger, ILoggerService } from 'vs/platform/log/common/log';\nimport { ITelemetryAppender, validateTelemetryData } from 'vs/platform/telemetry/common/telemetryUtils';\n\nexport class TelemetryLogAppender extends Disposable implements ITelemetryAppender {\n\n\tprivate readonly logger: ILogger;\n\n\tconstructor(\n\t\t@ILoggerService loggerService: ILoggerService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService\n\t) {\n\t\tsuper();\n\t\tthis.logger = this._register(loggerService.createLogger(environmentService.telemetryLogResource));\n\t\tthis.logger.info('The below are logs for every telemetry event sent from VS Code once the log level is set to trace.');\n\t\tthis.logger.info('===========================================================');\n\t}\n\n\tflush(): Promise<any> {\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tlog(eventName: string, data: any): void {\n\t\tthis.logger.trace(`telemetry/${eventName}`, validateTelemetryData(data));\n\t}\n}\n\n"]}