{"version":3,"file":"errorTelemetry.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/telemetry/browser/errorTelemetry.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAMhG,MAAqB,cAAe,SAAQ,wBAAkB;QAC1C,qBAAqB;YACvC,IAAI,UAAoB,CAAC;YACzB,IAAI,IAAI,GAAG,IAAI,CAAC;YAChB,IAAI,OAAO,kBAAO,CAAC,OAAO,KAAK,UAAU,EAAE;gBAC1C,UAAU,GAAG,kBAAO,CAAC,OAAO,CAAC;aAC7B;YACD,kBAAO,CAAC,OAAO,GAAG,UAAU,OAAe,EAAE,QAAgB,EAAE,IAAY,EAAE,MAAe,EAAE,CAAO;gBACpG,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;gBAC1D,IAAI,UAAU,EAAE;oBACf,UAAU,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;iBAClC;YACF,CAAC,CAAC;YACF,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAA,GAAA,wBAAY,CAAA,CAAC,GAAG,EAAE;gBACvC,IAAI,UAAU,EAAE;oBACf,kBAAO,CAAC,OAAO,GAAG,UAAU,CAAC;iBAC7B;YACF,CAAC,CAAC,CAAC,CAAC;QACL,CAAC;QAEO,gBAAgB,CAAC,GAAW,EAAE,IAAY,EAAE,IAAY,EAAE,MAAe,EAAE,GAAS;YAC3F,IAAI,IAAI,GAAe;gBACtB,SAAS,EAAE,GAAG;gBACd,GAAG;gBACH,IAAI;gBACJ,IAAI;gBACJ,MAAM;aACN,CAAC;YAEF,IAAI,GAAG,EAAE;gBACR,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,GAAG,CAAC;gBACnC,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;gBAChC,IAAI,OAAO,EAAE;oBACZ,IAAI,CAAC,kBAAkB,GAAG,OAAO,CAAC;iBAClC;gBACD,IAAI,KAAK,EAAE;oBACV,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC;wBACxC,CAAC,CAAC,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;wBAClC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC;iBACb;aACD;YAED,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACrB,CAAC;KACD;IA5CD,iCA4CC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { toDisposable } from 'vs/base/common/lifecycle';\nimport { globals } from 'vs/base/common/platform';\nimport BaseErrorTelemetry, { ErrorEvent } from 'vs/platform/telemetry/common/errorTelemetry';\n\nexport default class ErrorTelemetry extends BaseErrorTelemetry {\n\tprotected override installErrorListeners(): void {\n\t\tlet oldOnError: Function;\n\t\tlet that = this;\n\t\tif (typeof globals.onerror === 'function') {\n\t\t\toldOnError = globals.onerror;\n\t\t}\n\t\tglobals.onerror = function (message: string, filename: string, line: number, column?: number, e?: any) {\n\t\t\tthat._onUncaughtError(message, filename, line, column, e);\n\t\t\tif (oldOnError) {\n\t\t\t\toldOnError.apply(this, arguments);\n\t\t\t}\n\t\t};\n\t\tthis._disposables.add(toDisposable(() => {\n\t\t\tif (oldOnError) {\n\t\t\t\tglobals.onerror = oldOnError;\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate _onUncaughtError(msg: string, file: string, line: number, column?: number, err?: any): void {\n\t\tlet data: ErrorEvent = {\n\t\t\tcallstack: msg,\n\t\t\tmsg,\n\t\t\tfile,\n\t\t\tline,\n\t\t\tcolumn\n\t\t};\n\n\t\tif (err) {\n\t\t\tlet { name, message, stack } = err;\n\t\t\tdata.uncaught_error_name = name;\n\t\t\tif (message) {\n\t\t\t\tdata.uncaught_error_msg = message;\n\t\t\t}\n\t\t\tif (stack) {\n\t\t\t\tdata.callstack = Array.isArray(err.stack)\n\t\t\t\t\t? err.stack = err.stack.join('\\n')\n\t\t\t\t\t: err.stack;\n\t\t\t}\n\t\t}\n\n\t\tthis._enqueue(data);\n\t}\n}\n"]}