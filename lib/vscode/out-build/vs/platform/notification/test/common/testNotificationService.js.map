{"version":3,"file":"testNotificationService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/notification/test/common/testNotificationService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAMhG,MAAa,uBAAuB;QAApC;YAEU,yBAAoB,GAAyB,aAAK,CAAC,IAAI,CAAC;YAExD,4BAAuB,GAAyB,aAAK,CAAC,IAAI,CAAC;QA+BrE,CAAC;QAzBA,IAAI,CAAC,OAAe;YACnB,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE,QAAQ,EAAE,uBAAQ,CAAC,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;QAC1D,CAAC;QAED,IAAI,CAAC,OAAe;YACnB,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE,QAAQ,EAAE,uBAAQ,CAAC,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;QAC7D,CAAC;QAED,KAAK,CAAC,KAAqB;YAC1B,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE,QAAQ,EAAE,uBAAQ,CAAC,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;QAClE,CAAC;QAED,MAAM,CAAC,YAA2B;YACjC,OAAO,uBAAuB,CAAC,KAAK,CAAC;QACtC,CAAC;QAED,MAAM,CAAC,QAAkB,EAAE,OAAe,EAAE,OAAwB,EAAE,OAAwB;YAC7F,OAAO,uBAAuB,CAAC,KAAK,CAAC;QACtC,CAAC;QAED,MAAM,CAAC,OAAuB,EAAE,OAA+B;YAC9D,OAAO,sBAAU,CAAC,IAAI,CAAC;QACxB,CAAC;QAED,SAAS,CAAC,MAA2B,IAAU,CAAC;;IAlCjD,0DAmCC;IA3BwB,6BAAK,GAAwB,IAAI,+BAAgB,EAAE,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { INotificationService, INotificationHandle, NoOpNotification, Severity, INotification, IPromptChoice, IPromptOptions, IStatusMessageOptions, NotificationsFilter } from 'vs/platform/notification/common/notification';\nimport { Disposable, IDisposable } from 'vs/base/common/lifecycle';\nimport { Event } from 'vs/base/common/event';\n\nexport class TestNotificationService implements INotificationService {\n\n\treadonly onDidAddNotification: Event<INotification> = Event.None;\n\n\treadonly onDidRemoveNotification: Event<INotification> = Event.None;\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate static readonly NO_OP: INotificationHandle = new NoOpNotification();\n\n\tinfo(message: string): INotificationHandle {\n\t\treturn this.notify({ severity: Severity.Info, message });\n\t}\n\n\twarn(message: string): INotificationHandle {\n\t\treturn this.notify({ severity: Severity.Warning, message });\n\t}\n\n\terror(error: string | Error): INotificationHandle {\n\t\treturn this.notify({ severity: Severity.Error, message: error });\n\t}\n\n\tnotify(notification: INotification): INotificationHandle {\n\t\treturn TestNotificationService.NO_OP;\n\t}\n\n\tprompt(severity: Severity, message: string, choices: IPromptChoice[], options?: IPromptOptions): INotificationHandle {\n\t\treturn TestNotificationService.NO_OP;\n\t}\n\n\tstatus(message: string | Error, options?: IStatusMessageOptions): IDisposable {\n\t\treturn Disposable.None;\n\t}\n\n\tsetFilter(filter: NotificationsFilter): void { }\n}\n"]}