{"version":3,"file":"workspace.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/workspace/test/common/workspace.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { join } from 'vs/base/common/path';\nimport { Workspace, WorkspaceFolder } from 'vs/platform/workspace/common/workspace';\nimport { URI } from 'vs/base/common/uri';\nimport { IRawFileWorkspaceFolder, toWorkspaceFolders } from 'vs/platform/workspaces/common/workspaces';\nimport { isLinux, isWindows } from 'vs/base/common/platform';\nimport { extUriBiasedIgnorePathCase } from 'vs/base/common/resources';\n\nsuite('Workspace', () => {\n\n\tconst fileFolder = isWindows ? 'c:\\\\src' : '/src';\n\tconst abcFolder = isWindows ? 'c:\\\\abc' : '/abc';\n\n\tconst testFolderUri = URI.file(join(fileFolder, 'test'));\n\tconst mainFolderUri = URI.file(join(fileFolder, 'main'));\n\tconst test1FolderUri = URI.file(join(fileFolder, 'test1'));\n\tconst test2FolderUri = URI.file(join(fileFolder, 'test2'));\n\tconst test3FolderUri = URI.file(join(fileFolder, 'test3'));\n\tconst abcTest1FolderUri = URI.file(join(abcFolder, 'test1'));\n\tconst abcTest3FolderUri = URI.file(join(abcFolder, 'test3'));\n\n\tconst workspaceConfigUri = URI.file(join(fileFolder, 'test.code-workspace'));\n\n\ttest('getFolder returns the folder with given uri', () => {\n\t\tconst expected = new WorkspaceFolder({ uri: testFolderUri, name: '', index: 2 });\n\t\tlet testObject = new Workspace('', [new WorkspaceFolder({ uri: mainFolderUri, name: '', index: 0 }), expected, new WorkspaceFolder({ uri: URI.file('/src/code'), name: '', index: 2 })], null, () => !isLinux);\n\n\t\tconst actual = testObject.getFolder(expected.uri);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('getFolder returns the folder if the uri is sub', () => {\n\t\tconst expected = new WorkspaceFolder({ uri: testFolderUri, name: '', index: 0 });\n\t\tlet testObject = new Workspace('', [expected, new WorkspaceFolder({ uri: mainFolderUri, name: '', index: 1 }), new WorkspaceFolder({ uri: URI.file('/src/code'), name: '', index: 2 })], null, () => !isLinux);\n\n\t\tconst actual = testObject.getFolder(URI.file(join(fileFolder, 'test/a')));\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('getFolder returns the closest folder if the uri is sub', () => {\n\t\tconst expected = new WorkspaceFolder({ uri: testFolderUri, name: '', index: 2 });\n\t\tlet testObject = new Workspace('', [new WorkspaceFolder({ uri: mainFolderUri, name: '', index: 0 }), new WorkspaceFolder({ uri: URI.file('/src/code'), name: '', index: 1 }), expected], null, () => !isLinux);\n\n\t\tconst actual = testObject.getFolder(URI.file(join(fileFolder, 'test/a')));\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('getFolder returns the folder even if the uri has query path', () => {\n\t\tconst expected = new WorkspaceFolder({ uri: testFolderUri, name: '', index: 2 });\n\t\tlet testObject = new Workspace('', [new WorkspaceFolder({ uri: mainFolderUri, name: '', index: 0 }), new WorkspaceFolder({ uri: URI.file('/src/code'), name: '', index: 1 }), expected], null, () => !isLinux);\n\n\t\tconst actual = testObject.getFolder(URI.file(join(fileFolder, 'test/a')).with({ query: 'somequery' }));\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('getFolder returns null if the uri is not sub', () => {\n\t\tlet testObject = new Workspace('', [new WorkspaceFolder({ uri: testFolderUri, name: '', index: 0 }), new WorkspaceFolder({ uri: URI.file('/src/code'), name: '', index: 1 })], null, () => !isLinux);\n\n\t\tconst actual = testObject.getFolder(URI.file(join(fileFolder, 'main/a')));\n\n\t\tassert.strictEqual(actual, null);\n\t});\n\n\ttest('toWorkspaceFolders with single absolute folder', () => {\n\t\tconst actual = toWorkspaceFolders([{ path: '/src/test' }], workspaceConfigUri, extUriBiasedIgnorePathCase);\n\n\t\tassert.strictEqual(actual.length, 1);\n\t\tassert.strictEqual(actual[0].uri.fsPath, testFolderUri.fsPath);\n\t\tassert.strictEqual((<IRawFileWorkspaceFolder>actual[0].raw).path, '/src/test');\n\t\tassert.strictEqual(actual[0].index, 0);\n\t\tassert.strictEqual(actual[0].name, 'test');\n\t});\n\n\ttest('toWorkspaceFolders with single relative folder', () => {\n\t\tconst actual = toWorkspaceFolders([{ path: './test' }], workspaceConfigUri, extUriBiasedIgnorePathCase);\n\n\t\tassert.strictEqual(actual.length, 1);\n\t\tassert.strictEqual(actual[0].uri.fsPath, testFolderUri.fsPath);\n\t\tassert.strictEqual((<IRawFileWorkspaceFolder>actual[0].raw).path, './test');\n\t\tassert.strictEqual(actual[0].index, 0);\n\t\tassert.strictEqual(actual[0].name, 'test');\n\t});\n\n\ttest('toWorkspaceFolders with single absolute folder with name', () => {\n\t\tconst actual = toWorkspaceFolders([{ path: '/src/test', name: 'hello' }], workspaceConfigUri, extUriBiasedIgnorePathCase);\n\n\t\tassert.strictEqual(actual.length, 1);\n\n\t\tassert.strictEqual(actual[0].uri.fsPath, testFolderUri.fsPath);\n\t\tassert.strictEqual((<IRawFileWorkspaceFolder>actual[0].raw).path, '/src/test');\n\t\tassert.strictEqual(actual[0].index, 0);\n\t\tassert.strictEqual(actual[0].name, 'hello');\n\t});\n\n\ttest('toWorkspaceFolders with multiple unique absolute folders', () => {\n\t\tconst actual = toWorkspaceFolders([{ path: '/src/test2' }, { path: '/src/test3' }, { path: '/src/test1' }], workspaceConfigUri, extUriBiasedIgnorePathCase);\n\n\t\tassert.strictEqual(actual.length, 3);\n\t\tassert.strictEqual(actual[0].uri.fsPath, test2FolderUri.fsPath);\n\t\tassert.strictEqual((<IRawFileWorkspaceFolder>actual[0].raw).path, '/src/test2');\n\t\tassert.strictEqual(actual[0].index, 0);\n\t\tassert.strictEqual(actual[0].name, 'test2');\n\n\t\tassert.strictEqual(actual[1].uri.fsPath, test3FolderUri.fsPath);\n\t\tassert.strictEqual((<IRawFileWorkspaceFolder>actual[1].raw).path, '/src/test3');\n\t\tassert.strictEqual(actual[1].index, 1);\n\t\tassert.strictEqual(actual[1].name, 'test3');\n\n\t\tassert.strictEqual(actual[2].uri.fsPath, test1FolderUri.fsPath);\n\t\tassert.strictEqual((<IRawFileWorkspaceFolder>actual[2].raw).path, '/src/test1');\n\t\tassert.strictEqual(actual[2].index, 2);\n\t\tassert.strictEqual(actual[2].name, 'test1');\n\t});\n\n\ttest('toWorkspaceFolders with multiple unique absolute folders with names', () => {\n\t\tconst actual = toWorkspaceFolders([{ path: '/src/test2' }, { path: '/src/test3', name: 'noName' }, { path: '/src/test1' }], workspaceConfigUri, extUriBiasedIgnorePathCase);\n\n\t\tassert.strictEqual(actual.length, 3);\n\t\tassert.strictEqual(actual[0].uri.fsPath, test2FolderUri.fsPath);\n\t\tassert.strictEqual((<IRawFileWorkspaceFolder>actual[0].raw).path, '/src/test2');\n\t\tassert.strictEqual(actual[0].index, 0);\n\t\tassert.strictEqual(actual[0].name, 'test2');\n\n\t\tassert.strictEqual(actual[1].uri.fsPath, test3FolderUri.fsPath);\n\t\tassert.strictEqual((<IRawFileWorkspaceFolder>actual[1].raw).path, '/src/test3');\n\t\tassert.strictEqual(actual[1].index, 1);\n\t\tassert.strictEqual(actual[1].name, 'noName');\n\n\t\tassert.strictEqual(actual[2].uri.fsPath, test1FolderUri.fsPath);\n\t\tassert.strictEqual((<IRawFileWorkspaceFolder>actual[2].raw).path, '/src/test1');\n\t\tassert.strictEqual(actual[2].index, 2);\n\t\tassert.strictEqual(actual[2].name, 'test1');\n\t});\n\n\ttest('toWorkspaceFolders with multiple unique absolute and relative folders', () => {\n\t\tconst actual = toWorkspaceFolders([{ path: '/src/test2' }, { path: '/abc/test3', name: 'noName' }, { path: './test1' }], workspaceConfigUri, extUriBiasedIgnorePathCase);\n\n\t\tassert.strictEqual(actual.length, 3);\n\t\tassert.strictEqual(actual[0].uri.fsPath, test2FolderUri.fsPath);\n\t\tassert.strictEqual((<IRawFileWorkspaceFolder>actual[0].raw).path, '/src/test2');\n\t\tassert.strictEqual(actual[0].index, 0);\n\t\tassert.strictEqual(actual[0].name, 'test2');\n\n\t\tassert.strictEqual(actual[1].uri.fsPath, abcTest3FolderUri.fsPath);\n\t\tassert.strictEqual((<IRawFileWorkspaceFolder>actual[1].raw).path, '/abc/test3');\n\t\tassert.strictEqual(actual[1].index, 1);\n\t\tassert.strictEqual(actual[1].name, 'noName');\n\n\t\tassert.strictEqual(actual[2].uri.fsPath, test1FolderUri.fsPath);\n\t\tassert.strictEqual((<IRawFileWorkspaceFolder>actual[2].raw).path, './test1');\n\t\tassert.strictEqual(actual[2].index, 2);\n\t\tassert.strictEqual(actual[2].name, 'test1');\n\t});\n\n\ttest('toWorkspaceFolders with multiple absolute folders with duplicates', () => {\n\t\tconst actual = toWorkspaceFolders([{ path: '/src/test2' }, { path: '/src/test2', name: 'noName' }, { path: '/src/test1' }], workspaceConfigUri, extUriBiasedIgnorePathCase);\n\n\t\tassert.strictEqual(actual.length, 2);\n\t\tassert.strictEqual(actual[0].uri.fsPath, test2FolderUri.fsPath);\n\t\tassert.strictEqual((<IRawFileWorkspaceFolder>actual[0].raw).path, '/src/test2');\n\t\tassert.strictEqual(actual[0].index, 0);\n\t\tassert.strictEqual(actual[0].name, 'test2');\n\n\t\tassert.strictEqual(actual[1].uri.fsPath, test1FolderUri.fsPath);\n\t\tassert.strictEqual((<IRawFileWorkspaceFolder>actual[1].raw).path, '/src/test1');\n\t\tassert.strictEqual(actual[1].index, 1);\n\t\tassert.strictEqual(actual[1].name, 'test1');\n\t});\n\n\ttest('toWorkspaceFolders with multiple absolute and relative folders with duplicates', () => {\n\t\tconst actual = toWorkspaceFolders([{ path: '/src/test2' }, { path: '/src/test3', name: 'noName' }, { path: './test3' }, { path: '/abc/test1' }], workspaceConfigUri, extUriBiasedIgnorePathCase);\n\n\t\tassert.strictEqual(actual.length, 3);\n\t\tassert.strictEqual(actual[0].uri.fsPath, test2FolderUri.fsPath);\n\t\tassert.strictEqual((<IRawFileWorkspaceFolder>actual[0].raw).path, '/src/test2');\n\t\tassert.strictEqual(actual[0].index, 0);\n\t\tassert.strictEqual(actual[0].name, 'test2');\n\n\t\tassert.strictEqual(actual[1].uri.fsPath, test3FolderUri.fsPath);\n\t\tassert.strictEqual((<IRawFileWorkspaceFolder>actual[1].raw).path, '/src/test3');\n\t\tassert.strictEqual(actual[1].index, 1);\n\t\tassert.strictEqual(actual[1].name, 'noName');\n\n\t\tassert.strictEqual(actual[2].uri.fsPath, abcTest1FolderUri.fsPath);\n\t\tassert.strictEqual((<IRawFileWorkspaceFolder>actual[2].raw).path, '/abc/test1');\n\t\tassert.strictEqual(actual[2].index, 2);\n\t\tassert.strictEqual(actual[2].name, 'test1');\n\t});\n\n\ttest('toWorkspaceFolders with multiple absolute and relative folders with invalid paths', () => {\n\t\tconst actual = toWorkspaceFolders([{ path: '/src/test2' }, { path: '', name: 'noName' }, { path: './test3' }, { path: '/abc/test1' }], workspaceConfigUri, extUriBiasedIgnorePathCase);\n\n\t\tassert.strictEqual(actual.length, 3);\n\t\tassert.strictEqual(actual[0].uri.fsPath, test2FolderUri.fsPath);\n\t\tassert.strictEqual((<IRawFileWorkspaceFolder>actual[0].raw).path, '/src/test2');\n\t\tassert.strictEqual(actual[0].index, 0);\n\t\tassert.strictEqual(actual[0].name, 'test2');\n\n\t\tassert.strictEqual(actual[1].uri.fsPath, test3FolderUri.fsPath);\n\t\tassert.strictEqual((<IRawFileWorkspaceFolder>actual[1].raw).path, './test3');\n\t\tassert.strictEqual(actual[1].index, 1);\n\t\tassert.strictEqual(actual[1].name, 'test3');\n\n\t\tassert.strictEqual(actual[2].uri.fsPath, abcTest1FolderUri.fsPath);\n\t\tassert.strictEqual((<IRawFileWorkspaceFolder>actual[2].raw).path, '/abc/test1');\n\t\tassert.strictEqual(actual[2].index, 2);\n\t\tassert.strictEqual(actual[2].name, 'test1');\n\t});\n});\n"]}