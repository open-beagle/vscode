{"version":3,"file":"workspace.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/workspace/common/workspace.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAUnF,QAAA,wBAAwB,GAAG,CAAA,GAAA,+BAAe,CAAA,CAA2B,gBAAgB,CAAC,CAAC;IA+DpG,IAAkB,cAIjB;IAJD,WAAkB,cAAc;QAC/B,qDAAS,CAAA;QACT,uDAAM,CAAA;QACN,6DAAS,CAAA;IACV,CAAC,EAJiB,cAAc,GAAd,sBAAc,KAAd,sBAAc,QAI/B;IAgCD,SAAgB,WAAW,CAAC,KAAc;QACzC,MAAM,SAAS,GAAG,KAA+B,CAAC;QAElD,OAAO,CAAC,CAAC,CAAC,SAAS,IAAI,OAAO,SAAS,KAAK,QAAQ;eAChD,OAAO,SAAS,CAAC,EAAE,KAAK,QAAQ;eAChC,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;IACvC,CAAC;IAND,kCAMC;IA6BD,SAAgB,iBAAiB,CAAC,KAAc;QAC/C,MAAM,SAAS,GAAG,KAAyB,CAAC;QAE5C,OAAO,CAAC,CAAC,CAAC,SAAS,IAAI,OAAO,SAAS,KAAK,QAAQ;eAChD,SAAG,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC;eACxB,OAAO,SAAS,CAAC,IAAI,KAAK,QAAQ;eAClC,OAAO,SAAS,CAAC,UAAU,KAAK,UAAU,CAAC,CAAC;IACjD,CAAC;IAPD,8CAOC;IAED,MAAa,SAAS;QAKrB,YACS,GAAW,EACnB,OAA0B,EAClB,cAA0B,EAC1B,iBAAwC;YAHxC,QAAG,GAAH,GAAG,CAAQ;YAEX,mBAAc,GAAd,cAAc,CAAY;YAC1B,sBAAiB,GAAjB,iBAAiB,CAAuB;YAPzC,gBAAW,GAA4C,uBAAiB,CAAC,OAAO,CAAkB,IAAI,CAAC,iBAAiB,CAAC,CAAC;YASjI,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACxB,CAAC;QAED,MAAM,CAAC,SAAoB;YAC1B,IAAI,CAAC,GAAG,GAAG,SAAS,CAAC,EAAE,CAAC;YACxB,IAAI,CAAC,cAAc,GAAG,SAAS,CAAC,aAAa,CAAC;YAC9C,IAAI,CAAC,iBAAiB,GAAG,SAAS,CAAC,iBAAiB,CAAC;YACrD,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC;QAClC,CAAC;QAED,IAAI,OAAO;YACV,OAAO,IAAI,CAAC,QAAQ,CAAC;QACtB,CAAC;QAED,IAAI,OAAO,CAAC,OAA0B;YACrC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;YACxB,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACzB,CAAC;QAED,IAAI,EAAE;YACL,OAAO,IAAI,CAAC,GAAG,CAAC;QACjB,CAAC;QAED,IAAI,aAAa;YAChB,OAAO,IAAI,CAAC,cAAc,CAAC;QAC5B,CAAC;QAED,IAAI,aAAa,CAAC,aAAyB;YAC1C,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;QACrC,CAAC;QAED,SAAS,CAAC,QAAa;YACtB,IAAI,CAAC,QAAQ,EAAE;gBACd,OAAO,IAAI,CAAC;aACZ;YAED,OAAO,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC;gBAChD,MAAM,EAAE,QAAQ,CAAC,MAAM;gBACvB,SAAS,EAAE,QAAQ,CAAC,SAAS;gBAC7B,IAAI,EAAE,QAAQ,CAAC,IAAI;aACnB,CAAC,CAAC,IAAI,IAAI,CAAC;QACb,CAAC;QAEO,gBAAgB;YACvB,IAAI,CAAC,WAAW,GAAG,uBAAiB,CAAC,OAAO,CAAkB,IAAI,CAAC,iBAAiB,CAAC,CAAC;YACtF,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,OAAO,EAAE;gBAClC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;aACzC;QACF,CAAC;QAED,MAAM;YACL,OAAO,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,aAAa,EAAE,IAAI,CAAC,aAAa,EAAE,CAAC;QAClF,CAAC;KACD;IAhED,8BAgEC;IAED,MAAa,eAAe;QAM3B,YAAY,IAA0B,EAC5B,GAA4B;YAA5B,QAAG,GAAH,GAAG,CAAyB;YACrC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;YACpB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;YACxB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACvB,CAAC;QAED,UAAU,CAAC,YAAoB;YAC9B,OAAO,CAAA,GAAA,oBAAQ,CAAA,CAAC,IAAI,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC;QACzC,CAAC;QAED,MAAM;YACL,OAAO,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC;QAC9D,CAAC;KACD;IApBD,0CAoBC;IAED,SAAgB,iBAAiB,CAAC,QAAa;QAC9C,OAAO,IAAI,eAAe,CAAC,EAAE,GAAG,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,CAAA,GAAA,+BAAmB,CAAA,CAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,QAAQ,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;IAC5H,CAAC;IAFD,8CAEC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { joinPath, basenameOrAuthority } from 'vs/base/common/resources';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { TernarySearchTree } from 'vs/base/common/map';\nimport { Event } from 'vs/base/common/event';\nimport { IWorkspaceIdentifier, IStoredWorkspaceFolder, ISingleFolderWorkspaceIdentifier } from 'vs/platform/workspaces/common/workspaces';\nimport { IWorkspaceFolderProvider } from 'vs/base/common/labels';\n\nexport const IWorkspaceContextService = createDecorator<IWorkspaceContextService>('contextService');\n\nexport interface IWorkspaceContextService extends IWorkspaceFolderProvider {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * An event which fires on workbench state changes.\n\t */\n\treadonly onDidChangeWorkbenchState: Event<WorkbenchState>;\n\n\t/**\n\t * An event which fires on workspace name changes.\n\t */\n\treadonly onDidChangeWorkspaceName: Event<void>;\n\n\t/**\n\t * An event which fires before workspace folders change.\n\t */\n\treadonly onWillChangeWorkspaceFolders: Event<IWorkspaceFoldersWillChangeEvent>;\n\n\t/**\n\t * An event which fires on workspace folders change.\n\t */\n\treadonly onDidChangeWorkspaceFolders: Event<IWorkspaceFoldersChangeEvent>;\n\n\t/**\n\t * Provides access to the complete workspace object.\n\t */\n\tgetCompleteWorkspace(): Promise<IWorkspace>;\n\n\t/**\n\t * Provides access to the workspace object the window is running with.\n\t * Use `getCompleteWorkspace` to get complete workspace object.\n\t */\n\tgetWorkspace(): IWorkspace;\n\n\t/**\n\t * Return the state of the workbench.\n\t *\n\t * WorkbenchState.EMPTY - if the workbench was opened with empty window or file\n\t * WorkbenchState.FOLDER - if the workbench was opened with a folder\n\t * WorkbenchState.WORKSPACE - if the workbench was opened with a workspace\n\t */\n\tgetWorkbenchState(): WorkbenchState;\n\n\t/**\n\t * Returns the folder for the given resource from the workspace.\n\t * Can be null if there is no workspace or the resource is not inside the workspace.\n\t */\n\tgetWorkspaceFolder(resource: URI): IWorkspaceFolder | null;\n\n\t/**\n\t * Return `true` if the current workspace has the given identifier or root URI otherwise `false`.\n\t */\n\tisCurrentWorkspace(workspaceIdOrFolder: IWorkspaceIdentifier | ISingleFolderWorkspaceIdentifier | URI): boolean;\n\n\t/**\n\t * Returns if the provided resource is inside the workspace or not.\n\t */\n\tisInsideWorkspace(resource: URI): boolean;\n}\n\nexport const enum WorkbenchState {\n\tEMPTY = 1,\n\tFOLDER,\n\tWORKSPACE\n}\n\nexport interface IWorkspaceFoldersWillChangeEvent {\n\tjoin(promise: Promise<void>): void;\n\treadonly changes: IWorkspaceFoldersChangeEvent;\n\treadonly fromCache: boolean;\n}\n\nexport interface IWorkspaceFoldersChangeEvent {\n\tadded: IWorkspaceFolder[];\n\tremoved: IWorkspaceFolder[];\n\tchanged: IWorkspaceFolder[];\n}\n\nexport interface IWorkspace {\n\n\t/**\n\t * the unique identifier of the workspace.\n\t */\n\treadonly id: string;\n\n\t/**\n\t * Folders in the workspace.\n\t */\n\treadonly folders: IWorkspaceFolder[];\n\n\t/**\n\t * the location of the workspace configuration\n\t */\n\treadonly configuration?: URI | null;\n}\n\nexport function isWorkspace(thing: unknown): thing is IWorkspace {\n\tconst candidate = thing as IWorkspace | undefined;\n\n\treturn !!(candidate && typeof candidate === 'object'\n\t\t&& typeof candidate.id === 'string'\n\t\t&& Array.isArray(candidate.folders));\n}\n\nexport interface IWorkspaceFolderData {\n\n\t/**\n\t * The associated URI for this workspace folder.\n\t */\n\treadonly uri: URI;\n\n\t/**\n\t * The name of this workspace folder. Defaults to\n\t * the basename of its [uri-path](#Uri.path)\n\t */\n\treadonly name: string;\n\n\t/**\n\t * The ordinal number of this workspace folder.\n\t */\n\treadonly index: number;\n}\n\nexport interface IWorkspaceFolder extends IWorkspaceFolderData {\n\n\t/**\n\t * Given workspace folder relative path, returns the resource with the absolute path.\n\t */\n\ttoResource: (relativePath: string) => URI;\n}\n\nexport function isWorkspaceFolder(thing: unknown): thing is IWorkspaceFolder {\n\tconst candidate = thing as IWorkspaceFolder;\n\n\treturn !!(candidate && typeof candidate === 'object'\n\t\t&& URI.isUri(candidate.uri)\n\t\t&& typeof candidate.name === 'string'\n\t\t&& typeof candidate.toResource === 'function');\n}\n\nexport class Workspace implements IWorkspace {\n\n\tprivate _foldersMap: TernarySearchTree<URI, WorkspaceFolder> = TernarySearchTree.forUris<WorkspaceFolder>(this._ignorePathCasing);\n\tprivate _folders!: WorkspaceFolder[];\n\n\tconstructor(\n\t\tprivate _id: string,\n\t\tfolders: WorkspaceFolder[],\n\t\tprivate _configuration: URI | null,\n\t\tprivate _ignorePathCasing: (key: URI) => boolean,\n\t) {\n\t\tthis.folders = folders;\n\t}\n\n\tupdate(workspace: Workspace) {\n\t\tthis._id = workspace.id;\n\t\tthis._configuration = workspace.configuration;\n\t\tthis._ignorePathCasing = workspace._ignorePathCasing;\n\t\tthis.folders = workspace.folders;\n\t}\n\n\tget folders(): WorkspaceFolder[] {\n\t\treturn this._folders;\n\t}\n\n\tset folders(folders: WorkspaceFolder[]) {\n\t\tthis._folders = folders;\n\t\tthis.updateFoldersMap();\n\t}\n\n\tget id(): string {\n\t\treturn this._id;\n\t}\n\n\tget configuration(): URI | null {\n\t\treturn this._configuration;\n\t}\n\n\tset configuration(configuration: URI | null) {\n\t\tthis._configuration = configuration;\n\t}\n\n\tgetFolder(resource: URI): IWorkspaceFolder | null {\n\t\tif (!resource) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this._foldersMap.findSubstr(resource.with({\n\t\t\tscheme: resource.scheme,\n\t\t\tauthority: resource.authority,\n\t\t\tpath: resource.path\n\t\t})) || null;\n\t}\n\n\tprivate updateFoldersMap(): void {\n\t\tthis._foldersMap = TernarySearchTree.forUris<WorkspaceFolder>(this._ignorePathCasing);\n\t\tfor (const folder of this.folders) {\n\t\t\tthis._foldersMap.set(folder.uri, folder);\n\t\t}\n\t}\n\n\ttoJSON(): IWorkspace {\n\t\treturn { id: this.id, folders: this.folders, configuration: this.configuration };\n\t}\n}\n\nexport class WorkspaceFolder implements IWorkspaceFolder {\n\n\treadonly uri: URI;\n\tname: string;\n\tindex: number;\n\n\tconstructor(data: IWorkspaceFolderData,\n\t\treadonly raw?: IStoredWorkspaceFolder) {\n\t\tthis.uri = data.uri;\n\t\tthis.index = data.index;\n\t\tthis.name = data.name;\n\t}\n\n\ttoResource(relativePath: string): URI {\n\t\treturn joinPath(this.uri, relativePath);\n\t}\n\n\ttoJSON(): IWorkspaceFolderData {\n\t\treturn { uri: this.uri, name: this.name, index: this.index };\n\t}\n}\n\nexport function toWorkspaceFolder(resource: URI): WorkspaceFolder {\n\treturn new WorkspaceFolder({ uri: resource, index: 0, name: basenameOrAuthority(resource) }, { uri: resource.toString() });\n}\n"]}