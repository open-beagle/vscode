{"version":3,"sources":["vs/platform/workspace/common/workspaceTrust.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAOhG,IAAY,mBAGX;IAHD,WAAY,mBAAmB;QAC9B,+DAAS,CAAA;QACT,iEAAU,CAAA;IACX,CAAC,EAHW,mBAAmB,GAAnB,2BAAmB,KAAnB,2BAAmB,QAG9B;IAED,SAAgB,sBAAsB,CAAC,UAAmB;QACzD,IAAI,UAAU,EAAE;YACf,OAAO,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAS,EAAE,IAAS,CAAC,CAAC;SACtC;aAAM;YACN,OAAO,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAW,EAAE,IAAiB,CAAC,CAAC;SAChD;IACF,CAAC;IAND,wDAMC;IAcY,QAAA,gCAAgC,GAAG,CAAA,GAAA,+BAAe,CAAA,CAAmC,iCAAiC,CAAC,CAAC;IAmBxH,QAAA,6BAA6B,GAAG,CAAA,GAAA,+BAAe,CAAA,CAAgC,8BAA8B,CAAC,CAAC","file":"workspaceTrust.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { URI } from 'vs/base/common/uri';\nimport { localize } from 'vs/nls';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\n\nexport enum WorkspaceTrustScope {\n\tLocal = 0,\n\tRemote = 1\n}\n\nexport function workspaceTrustToString(trustState: boolean) {\n\tif (trustState) {\n\t\treturn localize('trusted', \"Trusted\");\n\t} else {\n\t\treturn localize('untrusted', \"Restricted Mode\");\n\t}\n}\n\nexport interface WorkspaceTrustRequestButton {\n\treadonly label: string;\n\treadonly type: 'ContinueWithTrust' | 'ContinueWithoutTrust' | 'Manage' | 'Cancel'\n}\n\nexport interface WorkspaceTrustRequestOptions {\n\treadonly buttons?: WorkspaceTrustRequestButton[];\n\treadonly message?: string;\n\treadonly modal: boolean;\n}\n\nexport type WorkspaceTrustChangeEvent = Event<boolean>;\nexport const IWorkspaceTrustManagementService = createDecorator<IWorkspaceTrustManagementService>('workspaceTrustManagementService');\n\nexport interface IWorkspaceTrustManagementService {\n\treadonly _serviceBrand: undefined;\n\n\tonDidChangeTrust: WorkspaceTrustChangeEvent;\n\tonDidChangeTrustedFolders: Event<void>;\n\n\tisWorkpaceTrusted(): boolean;\n\tcanSetParentFolderTrust(): boolean;\n\tsetParentFolderTrust(trusted: boolean): void;\n\tcanSetWorkspaceTrust(): boolean;\n\tsetWorkspaceTrust(trusted: boolean): void;\n\tgetFolderTrustInfo(folder: URI): IWorkspaceTrustUriInfo;\n\tsetFoldersTrust(folders: URI[], trusted: boolean): void;\n\tgetTrustedFolders(): URI[];\n\tsetTrustedFolders(folders: URI[]): void;\n}\n\nexport const IWorkspaceTrustRequestService = createDecorator<IWorkspaceTrustRequestService>('workspaceTrustRequestService');\n\nexport interface IWorkspaceTrustRequestService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly onDidInitiateWorkspaceTrustRequest: Event<WorkspaceTrustRequestOptions>;\n\treadonly onDidCompleteWorkspaceTrustRequest: Event<boolean>;\n\n\tcancelRequest(): void;\n\tcompleteRequest(trusted?: boolean): void;\n\trequestWorkspaceTrust(options?: WorkspaceTrustRequestOptions): Promise<boolean | undefined>;\n}\n\nexport interface IWorkspaceTrustUriInfo {\n\turi: URI,\n\ttrusted: boolean\n}\n\nexport interface IWorkspaceTrustInfo {\n\turiTrustInfo: IWorkspaceTrustUriInfo[]\n}\n"]}