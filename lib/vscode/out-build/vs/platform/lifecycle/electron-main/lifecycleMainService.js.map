{"version":3,"file":"lifecycleMainService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/lifecycle/electron-main/lifecycleMainService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ipcMain, app, BrowserWindow } from 'electron';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IStateService } from 'vs/platform/state/node/state';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { ICodeWindow } from 'vs/platform/windows/electron-main/windows';\nimport { handleVetos } from 'vs/platform/lifecycle/common/lifecycle';\nimport { isMacintosh, isWindows } from 'vs/base/common/platform';\nimport { Disposable, DisposableStore } from 'vs/base/common/lifecycle';\nimport { Promises, Barrier, timeout } from 'vs/base/common/async';\nimport { NativeParsedArgs } from 'vs/platform/environment/common/argv';\nimport { ISingleFolderWorkspaceIdentifier, IWorkspaceIdentifier } from 'vs/platform/workspaces/common/workspaces';\nimport { assertIsDefined } from 'vs/base/common/types';\nimport { cwd } from 'vs/base/common/process';\n\nexport const ILifecycleMainService = createDecorator<ILifecycleMainService>('lifecycleMainService');\n\nexport const enum UnloadReason {\n\tCLOSE = 1,\n\tQUIT = 2,\n\tRELOAD = 3,\n\tLOAD = 4\n}\n\nexport interface IWindowLoadEvent {\n\twindow: ICodeWindow;\n\tworkspace: IWorkspaceIdentifier | ISingleFolderWorkspaceIdentifier | undefined;\n}\n\nexport interface IWindowUnloadEvent {\n\twindow: ICodeWindow;\n\treason: UnloadReason;\n\tveto(value: boolean | Promise<boolean>): void;\n}\n\nexport interface ShutdownEvent {\n\n\t/**\n\t * Allows to join the shutdown. The promise can be a long running operation but it\n\t * will block the application from closing.\n\t */\n\tjoin(promise: Promise<void>): void;\n}\n\nexport interface ILifecycleMainService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Will be true if the program was restarted (e.g. due to explicit request or update).\n\t */\n\treadonly wasRestarted: boolean;\n\n\t/**\n\t * Will be true if the program was requested to quit.\n\t */\n\treadonly quitRequested: boolean;\n\n\t/**\n\t * A flag indicating in what phase of the lifecycle we currently are.\n\t */\n\tphase: LifecycleMainPhase;\n\n\t/**\n\t * An event that fires when the application is about to shutdown before any window is closed.\n\t * The shutdown can still be prevented by any window that vetos this event.\n\t */\n\treadonly onBeforeShutdown: Event<void>;\n\n\t/**\n\t * An event that fires after the onBeforeShutdown event has been fired and after no window has\n\t * vetoed the shutdown sequence. At this point listeners are ensured that the application will\n\t * quit without veto.\n\t */\n\treadonly onWillShutdown: Event<ShutdownEvent>;\n\n\t/**\n\t * An event that fires when a window is loading. This can either be a window opening for the\n\t * first time or a window reloading or changing to another URL.\n\t */\n\treadonly onWillLoadWindow: Event<IWindowLoadEvent>;\n\n\t/**\n\t * An event that fires before a window is about to unload. Listeners can veto this event to prevent\n\t * the window from unloading.\n\t */\n\treadonly onBeforeUnloadWindow: Event<IWindowUnloadEvent>;\n\n\t/**\n\t * An event that fires before a window closes. This event is fired after any veto has been dealt\n\t * with so that listeners know for sure that the window will close without veto.\n\t */\n\treadonly onBeforeCloseWindow: Event<ICodeWindow>;\n\n\t/**\n\t * Make a `ICodeWindow` known to the lifecycle main service.\n\t */\n\tregisterWindow(window: ICodeWindow): void;\n\n\t/**\n\t * Reload a window. All lifecycle event handlers are triggered.\n\t */\n\treload(window: ICodeWindow, cli?: NativeParsedArgs): Promise<void>;\n\n\t/**\n\t * Unload a window for the provided reason. All lifecycle event handlers are triggered.\n\t */\n\tunload(window: ICodeWindow, reason: UnloadReason): Promise<boolean /* veto */>;\n\n\t/**\n\t * Restart the application with optional arguments (CLI). All lifecycle event handlers are triggered.\n\t */\n\trelaunch(options?: { addArgs?: string[], removeArgs?: string[] }): void;\n\n\t/**\n\t * Shutdown the application normally. All lifecycle event handlers are triggered.\n\t */\n\tquit(fromUpdate?: boolean): Promise<boolean /* veto */>;\n\n\t/**\n\t * Forcefully shutdown the application. No livecycle event handlers are triggered.\n\t */\n\tkill(code?: number): Promise<void>;\n\n\t/**\n\t * Returns a promise that resolves when a certain lifecycle phase\n\t * has started.\n\t */\n\twhen(phase: LifecycleMainPhase): Promise<void>;\n}\n\nexport const enum LifecycleMainPhase {\n\n\t/**\n\t * The first phase signals that we are about to startup.\n\t */\n\tStarting = 1,\n\n\t/**\n\t * Services are ready and first window is about to open.\n\t */\n\tReady = 2,\n\n\t/**\n\t * This phase signals a point in time after the window has opened\n\t * and is typically the best place to do work that is not required\n\t * for the window to open.\n\t */\n\tAfterWindowOpen = 3\n}\n\nexport class LifecycleMainService extends Disposable implements ILifecycleMainService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate static readonly QUIT_FROM_RESTART_MARKER = 'quit.from.restart'; // use a marker to find out if the session was restarted\n\n\tprivate readonly _onBeforeShutdown = this._register(new Emitter<void>());\n\treadonly onBeforeShutdown = this._onBeforeShutdown.event;\n\n\tprivate readonly _onWillShutdown = this._register(new Emitter<ShutdownEvent>());\n\treadonly onWillShutdown = this._onWillShutdown.event;\n\n\tprivate readonly _onWillLoadWindow = this._register(new Emitter<IWindowLoadEvent>());\n\treadonly onWillLoadWindow = this._onWillLoadWindow.event;\n\n\tprivate readonly _onBeforeCloseWindow = this._register(new Emitter<ICodeWindow>());\n\treadonly onBeforeCloseWindow = this._onBeforeCloseWindow.event;\n\n\tprivate readonly _onBeforeUnloadWindow = this._register(new Emitter<IWindowUnloadEvent>());\n\treadonly onBeforeUnloadWindow = this._onBeforeUnloadWindow.event;\n\n\tprivate _quitRequested = false;\n\tget quitRequested(): boolean { return this._quitRequested; }\n\n\tprivate _wasRestarted: boolean = false;\n\tget wasRestarted(): boolean { return this._wasRestarted; }\n\n\tprivate _phase = LifecycleMainPhase.Starting;\n\tget phase(): LifecycleMainPhase { return this._phase; }\n\n\tprivate readonly windowToCloseRequest = new Set<number>();\n\tprivate oneTimeListenerTokenGenerator = 0;\n\tprivate windowCounter = 0;\n\n\tprivate pendingQuitPromise: Promise<boolean> | null = null;\n\tprivate pendingQuitPromiseResolve: { (veto: boolean): void } | null = null;\n\n\tprivate pendingWillShutdownPromise: Promise<void> | null = null;\n\n\tprivate readonly phaseWhen = new Map<LifecycleMainPhase, Barrier>();\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IStateService private readonly stateService: IStateService\n\t) {\n\t\tsuper();\n\n\t\tthis.handleRestarted();\n\t\tthis.when(LifecycleMainPhase.Ready).then(() => this.registerListeners());\n\t}\n\n\tprivate handleRestarted(): void {\n\t\tthis._wasRestarted = !!this.stateService.getItem(LifecycleMainService.QUIT_FROM_RESTART_MARKER);\n\n\t\tif (this._wasRestarted) {\n\t\t\tthis.stateService.removeItem(LifecycleMainService.QUIT_FROM_RESTART_MARKER); // remove the marker right after if found\n\t\t}\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// before-quit: an event that is fired if application quit was\n\t\t// requested but before any window was closed.\n\t\tconst beforeQuitListener = () => {\n\t\t\tif (this._quitRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.logService.trace('Lifecycle#app.on(before-quit)');\n\t\t\tthis._quitRequested = true;\n\n\t\t\t// Emit event to indicate that we are about to shutdown\n\t\t\tthis.logService.trace('Lifecycle#onBeforeShutdown.fire()');\n\t\t\tthis._onBeforeShutdown.fire();\n\n\t\t\t// macOS: can run without any window open. in that case we fire\n\t\t\t// the onWillShutdown() event directly because there is no veto\n\t\t\t// to be expected.\n\t\t\tif (isMacintosh && this.windowCounter === 0) {\n\t\t\t\tthis.beginOnWillShutdown();\n\t\t\t}\n\t\t};\n\t\tapp.addListener('before-quit', beforeQuitListener);\n\n\t\t// window-all-closed: an event that only fires when the last window\n\t\t// was closed. We override this event to be in charge if app.quit()\n\t\t// should be called or not.\n\t\tconst windowAllClosedListener = () => {\n\t\t\tthis.logService.trace('Lifecycle#app.on(window-all-closed)');\n\n\t\t\t// Windows/Linux: we quit when all windows have closed\n\t\t\t// Mac: we only quit when quit was requested\n\t\t\tif (this._quitRequested || !isMacintosh) {\n\t\t\t\tapp.quit();\n\t\t\t}\n\t\t};\n\t\tapp.addListener('window-all-closed', windowAllClosedListener);\n\n\t\t// will-quit: an event that is fired after all windows have been\n\t\t// closed, but before actually quitting.\n\t\tapp.once('will-quit', e => {\n\t\t\tthis.logService.trace('Lifecycle#app.on(will-quit)');\n\n\t\t\t// Prevent the quit until the shutdown promise was resolved\n\t\t\te.preventDefault();\n\n\t\t\t// Start shutdown sequence\n\t\t\tconst shutdownPromise = this.beginOnWillShutdown();\n\n\t\t\t// Wait until shutdown is signaled to be complete\n\t\t\tshutdownPromise.finally(() => {\n\n\t\t\t\t// Resolve pending quit promise now without veto\n\t\t\t\tthis.resolvePendingQuitPromise(false /* no veto */);\n\n\t\t\t\t// Quit again, this time do not prevent this, since our\n\t\t\t\t// will-quit listener is only installed \"once\". Also\n\t\t\t\t// remove any listener we have that is no longer needed\n\t\t\t\tapp.removeListener('before-quit', beforeQuitListener);\n\t\t\t\tapp.removeListener('window-all-closed', windowAllClosedListener);\n\t\t\t\tapp.quit();\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate beginOnWillShutdown(): Promise<void> {\n\t\tif (this.pendingWillShutdownPromise) {\n\t\t\treturn this.pendingWillShutdownPromise; // shutdown is already running\n\t\t}\n\n\t\tthis.logService.trace('Lifecycle#onWillShutdown.fire()');\n\n\t\tconst joiners: Promise<void>[] = [];\n\n\t\tthis._onWillShutdown.fire({\n\t\t\tjoin(promise) {\n\t\t\t\tjoiners.push(promise);\n\t\t\t}\n\t\t});\n\n\t\tthis.pendingWillShutdownPromise = Promises.settled(joiners).then(() => undefined, err => this.logService.error(err));\n\n\t\treturn this.pendingWillShutdownPromise;\n\t}\n\n\tset phase(value: LifecycleMainPhase) {\n\t\tif (value < this.phase) {\n\t\t\tthrow new Error('Lifecycle cannot go backwards');\n\t\t}\n\n\t\tif (this._phase === value) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.logService.trace(`lifecycle (main): phase changed (value: ${value})`);\n\n\t\tthis._phase = value;\n\n\t\tconst barrier = this.phaseWhen.get(this._phase);\n\t\tif (barrier) {\n\t\t\tbarrier.open();\n\t\t\tthis.phaseWhen.delete(this._phase);\n\t\t}\n\t}\n\n\tasync when(phase: LifecycleMainPhase): Promise<void> {\n\t\tif (phase <= this._phase) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet barrier = this.phaseWhen.get(phase);\n\t\tif (!barrier) {\n\t\t\tbarrier = new Barrier();\n\t\t\tthis.phaseWhen.set(phase, barrier);\n\t\t}\n\n\t\tawait barrier.wait();\n\t}\n\n\tregisterWindow(window: ICodeWindow): void {\n\t\tconst windowListeners = new DisposableStore();\n\n\t\t// track window count\n\t\tthis.windowCounter++;\n\n\t\t// Window Will Load\n\t\twindowListeners.add(window.onWillLoad(e => this._onWillLoadWindow.fire({ window, workspace: e.workspace })));\n\n\t\t// Window Before Closing: Main -> Renderer\n\t\tconst win = assertIsDefined(window.win);\n\t\twin.on('close', e => {\n\n\t\t\t// The window already acknowledged to be closed\n\t\t\tconst windowId = window.id;\n\t\t\tif (this.windowToCloseRequest.has(windowId)) {\n\t\t\t\tthis.windowToCloseRequest.delete(windowId);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.logService.trace(`Lifecycle#window.on('close') - window ID ${window.id}`);\n\n\t\t\t// Otherwise prevent unload and handle it from window\n\t\t\te.preventDefault();\n\t\t\tthis.unload(window, UnloadReason.CLOSE).then(veto => {\n\t\t\t\tif (veto) {\n\t\t\t\t\tthis.windowToCloseRequest.delete(windowId);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis.windowToCloseRequest.add(windowId);\n\n\t\t\t\t// Fire onBeforeCloseWindow before actually closing\n\t\t\t\tthis.logService.trace(`Lifecycle#onBeforeCloseWindow.fire() - window ID ${windowId}`);\n\t\t\t\tthis._onBeforeCloseWindow.fire(window);\n\n\t\t\t\t// No veto, close window now\n\t\t\t\twindow.close();\n\t\t\t});\n\t\t});\n\n\t\t// Window After Closing\n\t\twin.on('closed', () => {\n\t\t\tthis.logService.trace(`Lifecycle#window.on('closed') - window ID ${window.id}`);\n\n\t\t\t// update window count\n\t\t\tthis.windowCounter--;\n\n\t\t\t// clear window listeners\n\t\t\twindowListeners.dispose();\n\n\t\t\t// if there are no more code windows opened, fire the onWillShutdown event, unless\n\t\t\t// we are on macOS where it is perfectly fine to close the last window and\n\t\t\t// the application continues running (unless quit was actually requested)\n\t\t\tif (this.windowCounter === 0 && (!isMacintosh || this._quitRequested)) {\n\t\t\t\tthis.beginOnWillShutdown();\n\t\t\t}\n\t\t});\n\t}\n\n\tasync reload(window: ICodeWindow, cli?: NativeParsedArgs): Promise<void> {\n\n\t\t// Only reload when the window has not vetoed this\n\t\tconst veto = await this.unload(window, UnloadReason.RELOAD);\n\t\tif (!veto) {\n\t\t\twindow.reload(cli);\n\t\t}\n\t}\n\n\tasync unload(window: ICodeWindow, reason: UnloadReason): Promise<boolean /* veto */> {\n\n\t\t// Always allow to unload a window that is not yet ready\n\t\tif (!window.isReady) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis.logService.trace(`Lifecycle#unload() - window ID ${window.id}`);\n\n\t\t// first ask the window itself if it vetos the unload\n\t\tconst windowUnloadReason = this._quitRequested ? UnloadReason.QUIT : reason;\n\t\tlet veto = await this.onBeforeUnloadWindowInRenderer(window, windowUnloadReason);\n\t\tif (veto) {\n\t\t\tthis.logService.trace(`Lifecycle#unload() - veto in renderer (window ID ${window.id})`);\n\n\t\t\treturn this.handleWindowUnloadVeto(veto);\n\t\t}\n\n\t\t// then check for vetos in the main side\n\t\tveto = await this.onBeforeUnloadWindowInMain(window, windowUnloadReason);\n\t\tif (veto) {\n\t\t\tthis.logService.trace(`Lifecycle#unload() - veto in main (window ID ${window.id})`);\n\n\t\t\treturn this.handleWindowUnloadVeto(veto);\n\t\t}\n\n\t\tthis.logService.trace(`Lifecycle#unload() - no veto (window ID ${window.id})`);\n\n\t\t// finally if there are no vetos, unload the renderer\n\t\tawait this.onWillUnloadWindowInRenderer(window, windowUnloadReason);\n\n\t\treturn false;\n\t}\n\n\tprivate handleWindowUnloadVeto(veto: boolean): boolean {\n\t\tif (!veto) {\n\t\t\treturn false; // no veto\n\t\t}\n\n\t\t// a veto resolves any pending quit with veto\n\t\tthis.resolvePendingQuitPromise(true /* veto */);\n\n\t\t// a veto resets the pending quit request flag\n\t\tthis._quitRequested = false;\n\n\t\treturn true; // veto\n\t}\n\n\tprivate resolvePendingQuitPromise(veto: boolean): void {\n\t\tif (this.pendingQuitPromiseResolve) {\n\t\t\tthis.pendingQuitPromiseResolve(veto);\n\t\t\tthis.pendingQuitPromiseResolve = null;\n\t\t\tthis.pendingQuitPromise = null;\n\t\t}\n\t}\n\n\tprivate onBeforeUnloadWindowInRenderer(window: ICodeWindow, reason: UnloadReason): Promise<boolean /* veto */> {\n\t\treturn new Promise<boolean>(resolve => {\n\t\t\tconst oneTimeEventToken = this.oneTimeListenerTokenGenerator++;\n\t\t\tconst okChannel = `vscode:ok${oneTimeEventToken}`;\n\t\t\tconst cancelChannel = `vscode:cancel${oneTimeEventToken}`;\n\n\t\t\tipcMain.once(okChannel, () => {\n\t\t\t\tresolve(false); // no veto\n\t\t\t});\n\n\t\t\tipcMain.once(cancelChannel, () => {\n\t\t\t\tresolve(true); // veto\n\t\t\t});\n\n\t\t\twindow.send('vscode:onBeforeUnload', { okChannel, cancelChannel, reason });\n\t\t});\n\t}\n\n\tprivate onBeforeUnloadWindowInMain(window: ICodeWindow, reason: UnloadReason): Promise<boolean /* veto */> {\n\t\tconst vetos: (boolean | Promise<boolean>)[] = [];\n\n\t\tthis._onBeforeUnloadWindow.fire({\n\t\t\treason,\n\t\t\twindow,\n\t\t\tveto(value) {\n\t\t\t\tvetos.push(value);\n\t\t\t}\n\t\t});\n\n\t\treturn handleVetos(vetos, err => this.logService.error(err));\n\t}\n\n\tprivate onWillUnloadWindowInRenderer(window: ICodeWindow, reason: UnloadReason): Promise<void> {\n\t\treturn new Promise<void>(resolve => {\n\t\t\tconst oneTimeEventToken = this.oneTimeListenerTokenGenerator++;\n\t\t\tconst replyChannel = `vscode:reply${oneTimeEventToken}`;\n\n\t\t\tipcMain.once(replyChannel, () => resolve());\n\n\t\t\twindow.send('vscode:onWillUnload', { replyChannel, reason });\n\t\t});\n\t}\n\n\tquit(fromUpdate?: boolean): Promise<boolean /* veto */> {\n\t\tif (this.pendingQuitPromise) {\n\t\t\treturn this.pendingQuitPromise;\n\t\t}\n\n\t\tthis.logService.trace(`Lifecycle#quit() - from update: ${fromUpdate}`);\n\n\t\t// Remember the reason for quit was to restart\n\t\tif (fromUpdate) {\n\t\t\tthis.stateService.setItem(LifecycleMainService.QUIT_FROM_RESTART_MARKER, true);\n\t\t}\n\n\t\tthis.pendingQuitPromise = new Promise(resolve => {\n\n\t\t\t// Store as field to access it from a window cancellation\n\t\t\tthis.pendingQuitPromiseResolve = resolve;\n\n\t\t\t// Calling app.quit() will trigger the close handlers of each opened window\n\t\t\t// and only if no window vetoed the shutdown, we will get the will-quit event\n\t\t\tthis.logService.trace('Lifecycle#quit() - calling app.quit()');\n\t\t\tapp.quit();\n\t\t});\n\n\t\treturn this.pendingQuitPromise;\n\t}\n\n\trelaunch(options?: { addArgs?: string[], removeArgs?: string[] }): void {\n\t\tthis.logService.trace('Lifecycle#relaunch()');\n\n\t\tconst args = process.argv.slice(1);\n\t\tif (options?.addArgs) {\n\t\t\targs.push(...options.addArgs);\n\t\t}\n\n\t\tif (options?.removeArgs) {\n\t\t\tfor (const a of options.removeArgs) {\n\t\t\t\tconst idx = args.indexOf(a);\n\t\t\t\tif (idx >= 0) {\n\t\t\t\t\targs.splice(idx, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet quitVetoed = false;\n\t\tapp.once('quit', () => {\n\t\t\tif (!quitVetoed) {\n\n\t\t\t\t// Remember the reason for quit was to restart\n\t\t\t\tthis.stateService.setItem(LifecycleMainService.QUIT_FROM_RESTART_MARKER, true);\n\n\t\t\t\t// Windows: we are about to restart and as such we need to restore the original\n\t\t\t\t// current working directory we had on startup to get the exact same startup\n\t\t\t\t// behaviour. As such, we briefly change back to that directory and then when\n\t\t\t\t// Code starts it will set it back to the installation directory again.\n\t\t\t\ttry {\n\t\t\t\t\tif (isWindows) {\n\t\t\t\t\t\tconst currentWorkingDir = cwd();\n\t\t\t\t\t\tif (currentWorkingDir !== process.cwd()) {\n\t\t\t\t\t\t\tprocess.chdir(currentWorkingDir);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\tthis.logService.error(err);\n\t\t\t\t}\n\n\t\t\t\t// relaunch after we are sure there is no veto\n\t\t\t\tthis.logService.trace('Lifecycle#relaunch() - calling app.relaunch()');\n\t\t\t\tapp.relaunch({ args });\n\t\t\t}\n\t\t});\n\n\t\t// app.relaunch() does not quit automatically, so we quit first,\n\t\t// check for vetoes and then relaunch from the app.on('quit') event\n\t\tthis.quit().then(veto => quitVetoed = veto);\n\t}\n\n\tasync kill(code?: number): Promise<void> {\n\t\tthis.logService.trace('Lifecycle#kill()');\n\n\t\t// The kill() method is only used in 2 situations:\n\t\t// - when an instance fails to start at all\n\t\t// - when extension tests run from CLI to report proper exit code\n\t\t//\n\t\t// From extension tests we have seen issues where calling app.exit()\n\t\t// with an opened window can lead to native crashes (Linux) when webviews\n\t\t// are involved. As such, we should make sure to destroy any opened\n\t\t// window before calling app.exit().\n\t\t//\n\t\t// Note: Electron implements a similar logic here:\n\t\t// https://github.com/electron/electron/blob/fe5318d753637c3903e23fc1ed1b263025887b6a/spec-main/window-helpers.ts#L5\n\n\t\tawait Promise.race([\n\n\t\t\t// still do not block more than 1s\n\t\t\ttimeout(1000),\n\n\t\t\t// destroy any opened window\n\t\t\t(async () => {\n\t\t\t\tfor (const window of BrowserWindow.getAllWindows()) {\n\t\t\t\t\tif (window && !window.isDestroyed()) {\n\t\t\t\t\t\tlet whenWindowClosed: Promise<void>;\n\t\t\t\t\t\tif (window.webContents && !window.webContents.isDestroyed()) {\n\t\t\t\t\t\t\twhenWindowClosed = new Promise(resolve => window.once('closed', resolve));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\twhenWindowClosed = Promise.resolve();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\twindow.destroy();\n\t\t\t\t\t\tawait whenWindowClosed;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})()\n\t\t]);\n\n\t\t// Now exit either after 1s or all windows destroyed\n\t\tapp.exit(code);\n\t}\n}\n"]}