{"version":3,"file":"lifecycle.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/lifecycle/common/lifecycle.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAIhG,gDAAgD;IAChD,SAAgB,WAAW,CAAC,KAAqC,EAAE,OAA+B;QACjG,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;YACvB,OAAO,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;SAC9B;QAED,MAAM,QAAQ,GAAoB,EAAE,CAAC;QACrC,IAAI,SAAS,GAAG,KAAK,CAAC;QAEtB,KAAK,IAAI,cAAc,IAAI,KAAK,EAAE;YAEjC,aAAa;YACb,IAAI,cAAc,KAAK,IAAI,EAAE;gBAC5B,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;aAC7B;YAED,IAAI,CAAA,GAAA,kBAAU,CAAA,CAAC,cAAc,CAAC,EAAE;gBAC/B,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;oBACzC,IAAI,KAAK,EAAE;wBACV,SAAS,GAAG,IAAI,CAAC,CAAC,aAAa;qBAC/B;gBACF,CAAC,EAAE,GAAG,CAAC,EAAE;oBACR,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,mCAAmC;oBACjD,SAAS,GAAG,IAAI,CAAC;gBAClB,CAAC,CAAC,CAAC,CAAC;aACJ;SACD;QAED,OAAO,gBAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,CAAC;IACzD,CAAC;IA5BD,kCA4BC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Promises, isThenable } from 'vs/base/common/async';\n\n// Shared veto handling across main and renderer\nexport function handleVetos(vetos: (boolean | Promise<boolean>)[], onError: (error: Error) => void): Promise<boolean /* veto */> {\n\tif (vetos.length === 0) {\n\t\treturn Promise.resolve(false);\n\t}\n\n\tconst promises: Promise<void>[] = [];\n\tlet lazyValue = false;\n\n\tfor (let valueOrPromise of vetos) {\n\n\t\t// veto, done\n\t\tif (valueOrPromise === true) {\n\t\t\treturn Promise.resolve(true);\n\t\t}\n\n\t\tif (isThenable(valueOrPromise)) {\n\t\t\tpromises.push(valueOrPromise.then(value => {\n\t\t\t\tif (value) {\n\t\t\t\t\tlazyValue = true; // veto, done\n\t\t\t\t}\n\t\t\t}, err => {\n\t\t\t\tonError(err); // error, treated like a veto, done\n\t\t\t\tlazyValue = true;\n\t\t\t}));\n\t\t}\n\t}\n\n\treturn Promises.settled(promises).then(() => lazyValue);\n}\n"]}