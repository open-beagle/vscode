{"version":3,"file":"contextScopedHistoryWidget.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/browser/contextScopedHistoryWidget.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAWnF,QAAA,8BAA8B,GAAG,yBAAyB,CAAC;IAC3D,QAAA,kCAAkC,GAAG,0BAA0B,CAAC;IAE7E,SAAS,uBAAuB,CAAC,iBAAqC,EAAE,MAA4B,EAAE,UAAkB;QACvH,IAAI,0BAAa,CAAuB,UAAU,EAAE,MAAM,CAAC,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;IACvF,CAAC;IAED,SAAS,mCAAmC,CAAC,iBAAqC,EAAE,MAA4B;QAC/G,OAAO,iBAAiB,CAAC,YAAY,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IACtD,CAAC;IAED,SAAS,sBAAsB,CAAiC,iBAAqC,EAAE,UAAkB;QACxH,OAAO,iBAAiB,CAAC,UAAU,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;IAClF,CAAC;IAUD,SAAgB,2DAA2D,CAAC,iBAAqC,EAAE,MAA6C;QAC/J,MAAM,uBAAuB,GAAG,mCAAmC,CAAC,iBAAiB,EAAE,MAAM,CAAC,CAAC;QAC/F,uBAAuB,CAAC,uBAAuB,EAAE,MAAM,EAAE,sCAA8B,CAAC,CAAC;QACzF,MAAM,2BAA2B,GAAG,IAAI,0BAAa,CAAU,0CAAkC,EAAE,IAAI,CAAC,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC;QACzI,OAAO,EAAE,uBAAuB,EAAE,2BAA2B,EAAE,CAAC;IACjE,CAAC;IALD,kIAKC;IAED,IAAa,4BAA4B,GAAzC,MAAa,4BAA6B,SAAQ,0BAAe;QAEhE,YAAY,SAAsB,EAAE,mBAAqD,EAAE,OAA6B,EACnG,iBAAqC;YAEzD,KAAK,CAAC,SAAS,EAAE,mBAAmB,EAAE,OAAO,CAAC,CAAC;YAC/C,IAAI,CAAC,SAAS,CAAC,2DAA2D,CAAC,iBAAiB,EAAyC,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,gBAAgB,EAAE,IAAI,EAAE,CAAC,CAAC,uBAAuB,CAAC,CAAC;QACjN,CAAC;KAED,CAAA;IATY,4BAA4B;QAGtC,WAAA,+BAAkB,CAAA;OAHR,4BAA4B,CASxC;IATY,oEAA4B;IAWzC,IAAa,sBAAsB,GAAnC,MAAa,sBAAuB,SAAQ,qBAAS;QAEpD,YAAY,SAA6B,EAAE,mBAAyC,EAAE,OAA0B,EAC3F,iBAAqC,EAAE,kBAA2B,KAAK;YAE3F,KAAK,CAAC,SAAS,EAAE,mBAAmB,EAAE,eAAe,EAAE,OAAO,CAAC,CAAC;YAChE,IAAI,CAAC,SAAS,CAAC,2DAA2D,CAAC,iBAAiB,EAAyC,EAAE,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,gBAAgB,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,uBAAuB,CAAC,CAAC;QACnO,CAAC;KACD,CAAA;IARY,sBAAsB;QAGhC,WAAA,+BAAkB,CAAA;OAHR,sBAAsB,CAQlC;IARY,wDAAsB;IAUnC,IAAa,yBAAyB,GAAtC,MAAa,yBAA0B,SAAQ,2BAAY;QAE1D,YAAY,SAA6B,EAAE,mBAAqD,EAAE,OAA6B,EAC1G,iBAAqC,EAAE,qBAA8B,KAAK;YAE9F,KAAK,CAAC,SAAS,EAAE,mBAAmB,EAAE,kBAAkB,EAAE,OAAO,CAAC,CAAC;YACnE,IAAI,CAAC,SAAS,CAAC,2DAA2D,CAAC,iBAAiB,EAAyC,EAAE,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,gBAAgB,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,uBAAuB,CAAC,CAAC;QACnO,CAAC;KAED,CAAA;IATY,yBAAyB;QAGnC,WAAA,+BAAkB,CAAA;OAHR,yBAAyB,CASrC;IATY,8DAAyB;IAWtC,yCAAmB,CAAC,gCAAgC,CAAC;QACpD,EAAE,EAAE,sBAAsB;QAC1B,MAAM,4BAAmC;QACzC,IAAI,EAAE,2BAAc,CAAC,GAAG,CAAC,2BAAc,CAAC,GAAG,CAAC,sCAA8B,CAAC,EAAE,2BAAc,CAAC,MAAM,CAAC,0CAAkC,EAAE,IAAI,CAAC,CAAC;QAC7I,OAAO,kBAAiB;QACxB,SAAS,EAAE,CAAC,gCAA4B,CAAC;QACzC,OAAO,EAAE,CAAC,QAAQ,EAAE,IAAI,EAAE,EAAE;YAC3B,MAAM,MAAM,GAAG,sBAAsB,CAAwC,QAAQ,CAAC,GAAG,CAAC,+BAAkB,CAAC,EAAE,sCAA8B,CAAC,CAAC;YAC/I,IAAI,MAAM,EAAE;gBACX,MAAM,eAAe,GAA6B,MAAM,CAAC,gBAAgB,CAAC;gBAC1E,eAAe,CAAC,iBAAiB,EAAE,CAAC;aACpC;QACF,CAAC;KACD,CAAC,CAAC;IAEH,yCAAmB,CAAC,gCAAgC,CAAC;QACpD,EAAE,EAAE,kBAAkB;QACtB,MAAM,4BAAmC;QACzC,IAAI,EAAE,2BAAc,CAAC,GAAG,CAAC,2BAAc,CAAC,GAAG,CAAC,sCAA8B,CAAC,EAAE,2BAAc,CAAC,MAAM,CAAC,0CAAkC,EAAE,IAAI,CAAC,CAAC;QAC7I,OAAO,oBAAmB;QAC1B,SAAS,EAAE,CAAC,kCAA8B,CAAC;QAC3C,OAAO,EAAE,CAAC,QAAQ,EAAE,IAAI,EAAE,EAAE;YAC3B,MAAM,MAAM,GAAG,sBAAsB,CAAwC,QAAQ,CAAC,GAAG,CAAC,+BAAkB,CAAC,EAAE,sCAA8B,CAAC,CAAC;YAC/I,IAAI,MAAM,EAAE;gBACX,MAAM,eAAe,GAA6B,MAAM,CAAC,gBAAgB,CAAC;gBAC1E,eAAe,CAAC,aAAa,EAAE,CAAC;aAChC;QACF,CAAC;KACD,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IContextKeyService, ContextKeyExpr, RawContextKey, IContextKey, IContextKeyServiceTarget } from 'vs/platform/contextkey/common/contextkey';\nimport { HistoryInputBox, IHistoryInputOptions } from 'vs/base/browser/ui/inputbox/inputBox';\nimport { FindInput, IFindInputOptions } from 'vs/base/browser/ui/findinput/findInput';\nimport { IContextViewProvider } from 'vs/base/browser/ui/contextview/contextview';\nimport { IHistoryNavigationWidget } from 'vs/base/browser/history';\nimport { KeybindingsRegistry, KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport { ReplaceInput, IReplaceInputOptions } from 'vs/base/browser/ui/findinput/replaceInput';\n\nexport const HistoryNavigationWidgetContext = 'historyNavigationWidget';\nexport const HistoryNavigationEnablementContext = 'historyNavigationEnabled';\n\nfunction bindContextScopedWidget(contextKeyService: IContextKeyService, widget: IContextScopedWidget, contextKey: string): void {\n\tnew RawContextKey<IContextScopedWidget>(contextKey, widget).bindTo(contextKeyService);\n}\n\nfunction createWidgetScopedContextKeyService(contextKeyService: IContextKeyService, widget: IContextScopedWidget): IContextKeyService {\n\treturn contextKeyService.createScoped(widget.target);\n}\n\nfunction getContextScopedWidget<T extends IContextScopedWidget>(contextKeyService: IContextKeyService, contextKey: string): T | undefined {\n\treturn contextKeyService.getContext(document.activeElement).getValue(contextKey);\n}\n\ninterface IContextScopedWidget {\n\treadonly target: IContextKeyServiceTarget;\n}\n\ninterface IContextScopedHistoryNavigationWidget extends IContextScopedWidget {\n\thistoryNavigator: IHistoryNavigationWidget;\n}\n\nexport function createAndBindHistoryNavigationWidgetScopedContextKeyService(contextKeyService: IContextKeyService, widget: IContextScopedHistoryNavigationWidget): { scopedContextKeyService: IContextKeyService, historyNavigationEnablement: IContextKey<boolean> } {\n\tconst scopedContextKeyService = createWidgetScopedContextKeyService(contextKeyService, widget);\n\tbindContextScopedWidget(scopedContextKeyService, widget, HistoryNavigationWidgetContext);\n\tconst historyNavigationEnablement = new RawContextKey<boolean>(HistoryNavigationEnablementContext, true).bindTo(scopedContextKeyService);\n\treturn { scopedContextKeyService, historyNavigationEnablement };\n}\n\nexport class ContextScopedHistoryInputBox extends HistoryInputBox {\n\n\tconstructor(container: HTMLElement, contextViewProvider: IContextViewProvider | undefined, options: IHistoryInputOptions,\n\t\t@IContextKeyService contextKeyService: IContextKeyService\n\t) {\n\t\tsuper(container, contextViewProvider, options);\n\t\tthis._register(createAndBindHistoryNavigationWidgetScopedContextKeyService(contextKeyService, <IContextScopedHistoryNavigationWidget>{ target: this.element, historyNavigator: this }).scopedContextKeyService);\n\t}\n\n}\n\nexport class ContextScopedFindInput extends FindInput {\n\n\tconstructor(container: HTMLElement | null, contextViewProvider: IContextViewProvider, options: IFindInputOptions,\n\t\t@IContextKeyService contextKeyService: IContextKeyService, showFindOptions: boolean = false\n\t) {\n\t\tsuper(container, contextViewProvider, showFindOptions, options);\n\t\tthis._register(createAndBindHistoryNavigationWidgetScopedContextKeyService(contextKeyService, <IContextScopedHistoryNavigationWidget>{ target: this.inputBox.element, historyNavigator: this.inputBox }).scopedContextKeyService);\n\t}\n}\n\nexport class ContextScopedReplaceInput extends ReplaceInput {\n\n\tconstructor(container: HTMLElement | null, contextViewProvider: IContextViewProvider | undefined, options: IReplaceInputOptions,\n\t\t@IContextKeyService contextKeyService: IContextKeyService, showReplaceOptions: boolean = false\n\t) {\n\t\tsuper(container, contextViewProvider, showReplaceOptions, options);\n\t\tthis._register(createAndBindHistoryNavigationWidgetScopedContextKeyService(contextKeyService, <IContextScopedHistoryNavigationWidget>{ target: this.inputBox.element, historyNavigator: this.inputBox }).scopedContextKeyService);\n\t}\n\n}\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'history.showPrevious',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: ContextKeyExpr.and(ContextKeyExpr.has(HistoryNavigationWidgetContext), ContextKeyExpr.equals(HistoryNavigationEnablementContext, true)),\n\tprimary: KeyCode.UpArrow,\n\tsecondary: [KeyMod.Alt | KeyCode.UpArrow],\n\thandler: (accessor, arg2) => {\n\t\tconst widget = getContextScopedWidget<IContextScopedHistoryNavigationWidget>(accessor.get(IContextKeyService), HistoryNavigationWidgetContext);\n\t\tif (widget) {\n\t\t\tconst historyInputBox: IHistoryNavigationWidget = widget.historyNavigator;\n\t\t\thistoryInputBox.showPreviousValue();\n\t\t}\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'history.showNext',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: ContextKeyExpr.and(ContextKeyExpr.has(HistoryNavigationWidgetContext), ContextKeyExpr.equals(HistoryNavigationEnablementContext, true)),\n\tprimary: KeyCode.DownArrow,\n\tsecondary: [KeyMod.Alt | KeyCode.DownArrow],\n\thandler: (accessor, arg2) => {\n\t\tconst widget = getContextScopedWidget<IContextScopedHistoryNavigationWidget>(accessor.get(IContextKeyService), HistoryNavigationWidgetContext);\n\t\tif (widget) {\n\t\t\tconst historyInputBox: IHistoryNavigationWidget = widget.historyNavigator;\n\t\t\thistoryInputBox.showNextValue();\n\t\t}\n\t}\n});\n"]}