{"version":3,"file":"protocol.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/protocol/electron-main/protocol.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAMnF,QAAA,oBAAoB,GAAG,CAAA,GAAA,+BAAe,CAAA,CAAuB,qBAAqB,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\n\nexport const IProtocolMainService = createDecorator<IProtocolMainService>('protocolMainService');\n\nexport interface IIPCObjectUrl<T> extends IDisposable {\n\n\t/**\n\t * A `URI` that a renderer can use to retrieve the\n\t * object via `ipcRenderer.invoke(resource.toString())`\n\t */\n\tresource: URI;\n\n\t/**\n\t * Allows to update the value of the object after it\n\t * has been created.\n\t *\n\t * @param obj the object to make accessible to the\n\t * renderer.\n\t */\n\tupdate(obj: T): void;\n}\n\nexport interface IProtocolMainService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Allows to make an object accessible to a renderer\n\t * via `ipcRenderer.invoke(resource.toString())`.\n\t *\n\t * @param obj the (optional) object to make accessible to the\n\t * renderer. Can be updated later via the `IObjectUrl#update`\n\t * method too.\n\t */\n\tcreateIPCObjectUrl<T>(obj?: T): IIPCObjectUrl<T>;\n\n\t/**\n\t * Adds a `URI` as root to the list of allowed\n\t * resources for file access.\n\t *\n\t * @param root the URI to allow for file access\n\t */\n\taddValidFileRoot(root: URI): IDisposable;\n}\n"]}