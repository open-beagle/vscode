{"version":3,"file":"protocolMainService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/protocol/electron-main/protocolMainService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { FileAccess, Schemas } from 'vs/base/common/network';\nimport { URI } from 'vs/base/common/uri';\nimport { INativeEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { ipcMain, session } from 'electron';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { TernarySearchTree } from 'vs/base/common/map';\nimport { isLinux, isPreferringBrowserCodeLoad } from 'vs/base/common/platform';\nimport { extname } from 'vs/base/common/resources';\nimport { IIPCObjectUrl, IProtocolMainService } from 'vs/platform/protocol/electron-main/protocol';\nimport { generateUuid } from 'vs/base/common/uuid';\n\ntype ProtocolCallback = { (result: string | Electron.FilePathWithHeaders | { error: number }): void };\n\nexport class ProtocolMainService extends Disposable implements IProtocolMainService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly validRoots = TernarySearchTree.forUris<boolean>(() => !isLinux);\n\tprivate readonly validExtensions = new Set(['.png', '.jpg', '.jpeg', '.gif', '.bmp']); // https://github.com/microsoft/vscode/issues/119384\n\n\tconstructor(\n\t\t@INativeEnvironmentService environmentService: INativeEnvironmentService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tsuper();\n\n\t\t// Define an initial set of roots we allow loading from\n\t\t// - appRoot\t: all files installed as part of the app\n\t\t// - extensions : all files shipped from extensions\n\t\t// - storage    : all files in global and workspace storage (https://github.com/microsoft/vscode/issues/116735)\n\t\tthis.addValidFileRoot(URI.file(environmentService.appRoot));\n\t\tthis.addValidFileRoot(URI.file(environmentService.extensionsPath));\n\t\tthis.addValidFileRoot(environmentService.globalStorageHome);\n\t\tthis.addValidFileRoot(environmentService.workspaceStorageHome);\n\n\t\t// Handle protocols\n\t\tthis.handleProtocols();\n\t}\n\n\tprivate handleProtocols(): void {\n\t\tconst { defaultSession } = session;\n\n\t\t// Register vscode-file:// handler\n\t\tdefaultSession.protocol.registerFileProtocol(Schemas.vscodeFileResource, (request, callback) => this.handleResourceRequest(request, callback as unknown as ProtocolCallback));\n\n\t\t// Intercept any file:// access\n\t\tdefaultSession.protocol.interceptFileProtocol(Schemas.file, (request, callback) => this.handleFileRequest(request, callback as unknown as ProtocolCallback));\n\n\t\t// Cleanup\n\t\tthis._register(toDisposable(() => {\n\t\t\tdefaultSession.protocol.unregisterProtocol(Schemas.vscodeFileResource);\n\t\t\tdefaultSession.protocol.uninterceptProtocol(Schemas.file);\n\t\t}));\n\t}\n\n\taddValidFileRoot(root: URI): IDisposable {\n\t\tif (!this.validRoots.get(root)) {\n\t\t\tthis.validRoots.set(root, true);\n\n\t\t\treturn toDisposable(() => this.validRoots.delete(root));\n\t\t}\n\n\t\treturn Disposable.None;\n\t}\n\n\t//#region file://\n\n\tprivate handleFileRequest(request: Electron.ProtocolRequest, callback: ProtocolCallback): void {\n\t\tconst fileUri = URI.parse(request.url);\n\n\t\t// isPreferringBrowserCodeLoad: false\n\t\tif (!isPreferringBrowserCodeLoad) {\n\n\t\t\t// first check by validRoots\n\t\t\tif (this.validRoots.findSubstr(fileUri)) {\n\t\t\t\treturn callback({\n\t\t\t\t\tpath: fileUri.fsPath\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// then check by validExtensions\n\t\t\tif (this.validExtensions.has(extname(fileUri))) {\n\t\t\t\treturn callback({\n\t\t\t\t\tpath: fileUri.fsPath\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// finally block to load the resource\n\t\t\tthis.logService.error(`${Schemas.file}: Refused to load resource ${fileUri.fsPath} from ${Schemas.file}: protocol (original URL: ${request.url})`);\n\n\t\t\treturn callback({ error: -3 /* ABORTED */ });\n\t\t}\n\n\t\t// isPreferringBrowserCodeLoad: true\n\t\t// => block any file request\n\t\telse {\n\t\t\tthis.logService.error(`Refused to load resource ${fileUri.fsPath} from ${Schemas.file}: protocol (original URL: ${request.url})`);\n\n\t\t\treturn callback({ error: -3 /* ABORTED */ });\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region vscode-file://\n\n\tprivate handleResourceRequest(request: Electron.ProtocolRequest, callback: ProtocolCallback): void {\n\t\tconst uri = URI.parse(request.url);\n\n\t\t// Restore the `vscode-file` URI to a `file` URI so that we can\n\t\t// ensure the root is valid and properly tell Chrome where the\n\t\t// resource is at.\n\t\tconst fileUri = FileAccess.asFileUri(uri);\n\n\t\t// first check by validRoots\n\t\tif (this.validRoots.findSubstr(fileUri)) {\n\t\t\treturn callback({\n\t\t\t\tpath: fileUri.fsPath\n\t\t\t});\n\t\t}\n\n\t\t// then check by validExtensions\n\t\tif (this.validExtensions.has(extname(fileUri))) {\n\t\t\treturn callback({\n\t\t\t\tpath: fileUri.fsPath\n\t\t\t});\n\t\t}\n\n\t\t// finally block to load the resource\n\t\tthis.logService.error(`${Schemas.vscodeFileResource}: Refused to load resource ${fileUri.fsPath} from ${Schemas.vscodeFileResource}: protocol (original URL: ${request.url})`);\n\n\t\treturn callback({ error: -3 /* ABORTED */ });\n\t}\n\n\t//#endregion\n\n\t//#region IPC Object URLs\n\n\tcreateIPCObjectUrl<T>(obj: T): IIPCObjectUrl<T> {\n\n\t\t// Create unique URI\n\t\tconst resource = URI.from({\n\t\t\tscheme: 'vscode', // used for all our IPC communication (vscode:<channel>)\n\t\t\tpath: generateUuid()\n\t\t});\n\n\t\t// Install IPC handler\n\t\tconst channel = resource.toString();\n\t\tconst handler = async (): Promise<T> => obj;\n\t\tipcMain.handle(channel, handler);\n\n\t\tthis.logService.trace(`IPC Object URL: Registered new channel ${channel}.`);\n\n\t\treturn {\n\t\t\tresource,\n\t\t\tupdate: updatedObj => obj = updatedObj,\n\t\t\tdispose: () => {\n\t\t\t\tthis.logService.trace(`IPC Object URL: Removed channel ${channel}.`);\n\n\t\t\t\tipcMain.removeHandler(channel);\n\t\t\t}\n\t\t};\n\t}\n\n\t//#endregion\n}\n"]}