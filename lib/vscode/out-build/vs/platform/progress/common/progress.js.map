{"version":3,"file":"progress.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/progress/common/progress.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAQnF,QAAA,gBAAgB,GAAG,CAAA,GAAA,+BAAe,CAAA,CAAmB,iBAAiB,CAAC,CAAC;IA+BrF,IAAkB,gBAOjB;IAPD,WAAkB,gBAAgB;QACjC,+DAAY,CAAA;QACZ,qDAAO,CAAA;QACP,mEAAc,CAAA;QACd,4DAAW,CAAA;QACX,wEAAiB,CAAA;QACjB,4DAAW,CAAA;IACZ,CAAC,EAPiB,gBAAgB,GAAhB,wBAAgB,KAAhB,wBAAgB,QAOjC;IAyCY,QAAA,mBAAmB,GAAoB,MAAM,CAAC,MAAM,CAAC;QACjE,KAAK,KAAK,CAAC;QACX,MAAM,KAAK,CAAC;QACZ,IAAI,KAAK,CAAC;KACV,CAAC,CAAC;IAMH,MAAa,QAAQ;QAOpB,YAAoB,QAA2B;YAA3B,aAAQ,GAAR,QAAQ,CAAmB;QAAI,CAAC;QAFpD,IAAI,KAAK,KAAoB,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QAIlD,MAAM,CAAC,IAAO;YACb,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;YACnB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC5B,CAAC;;IAZF,4BAaC;IAXgB,aAAI,GAAuB,MAAM,CAAC,MAAM,CAAC,EAAE,MAAM,KAAK,CAAC,EAAE,CAAC,CAAC;IAwB5E;;;OAGG;IACH,IAAa,iBAAiB,GAA9B,MAAa,iBAAkB,SAAQ,sBAAU;QAKhD,YACC,OAA6G,EAC3F,eAAiC;YAEnD,KAAK,EAAE,CAAC;YARQ,aAAQ,GAAG,IAAI,uBAAe,EAAQ,CAAC;YASvD,eAAe,CAAC,YAAY,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAE;gBAChD,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;gBACzB,IAAI,IAAI,CAAC,QAAQ,EAAE;oBAClB,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;iBAC/B;gBAED,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YACxB,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,SAAS,CAAC,CAAA,GAAA,wBAAY,CAAA,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;QAC9D,CAAC;QAED,MAAM,CAAC,IAAmB;YACzB,IAAI,IAAI,CAAC,QAAQ,EAAE;gBAClB,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;aAC3B;iBAAM;gBACN,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;aACrB;QACF,CAAC;KACD,CAAA;IA7BY,iBAAiB;QAO3B,WAAA,wBAAgB,CAAA;OAPN,iBAAiB,CA6B7B;IA7BY,8CAAiB;IAgC9B,MAAa,oBAAqB,SAAQ,sBAAU;QAMnD,YACS,iBAAqC;YAE7C,KAAK,EAAE,CAAC;YAFA,sBAAiB,GAAjB,iBAAiB,CAAoB;YANtC,uBAAkB,GAAG,CAAC,CAAC;YACd,gCAA2B,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,2BAAe,EAAE,CAAC,CAAC;QAQrF,CAAC;QAED,KAAK,CAAC,aAAqB;YAE1B,8BAA8B;YAC9B,IAAI,CAAC,IAAI,EAAE,CAAC;YAEZ,YAAY;YACZ,MAAM,cAAc,GAAG,EAAE,IAAI,CAAC,kBAAkB,CAAC;YACjD,MAAM,iBAAiB,GAAG,IAAI,sCAAuB,EAAE,CAAC;YACxD,IAAI,CAAC,sBAAsB,GAAG,UAAU,CAAC,GAAG,EAAE;gBAC7C,IAAI,cAAc,KAAK,IAAI,CAAC,kBAAkB,EAAE;oBAC/C,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBAC/D;YACF,CAAC,EAAE,aAAa,CAAC,CAAC;YAElB,IAAI,CAAC,2BAA2B,CAAC,GAAG,CAAC,CAAA,GAAA,wBAAY,CAAA,CAAC,GAAG,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC;YACpG,IAAI,CAAC,2BAA2B,CAAC,GAAG,CAAC,CAAA,GAAA,wBAAY,CAAA,CAAC,GAAG,EAAE,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACrF,IAAI,CAAC,2BAA2B,CAAC,GAAG,CAAC,CAAA,GAAA,wBAAY,CAAA,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YAErI,OAAO;gBACN,EAAE,EAAE,cAAc;gBAClB,KAAK,EAAE,iBAAiB,CAAC,KAAK;gBAC9B,IAAI,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;gBACvC,SAAS,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,kBAAkB,KAAK,cAAc;aAC3D,CAAC;QACH,CAAC;QAED,IAAI;YACH,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QACtC,CAAC;QAEO,MAAM,CAAC,WAAmB;YACjC,IAAI,IAAI,CAAC,kBAAkB,KAAK,WAAW,EAAE;gBAC5C,IAAI,CAAC,2BAA2B,CAAC,KAAK,EAAE,CAAC;aACzC;QACF,CAAC;KACD;IA/CD,oDA+CC;IAEY,QAAA,sBAAsB,GAAG,CAAA,GAAA,+BAAe,CAAA,CAAyB,uBAAuB,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { CancellationToken, CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { toDisposable, DisposableStore, Disposable } from 'vs/base/common/lifecycle';\nimport { IAction } from 'vs/base/common/actions';\nimport { DeferredPromise } from 'vs/base/common/async';\n\nexport const IProgressService = createDecorator<IProgressService>('progressService');\n\n/**\n * A progress service that can be used to report progress to various locations of the UI.\n */\nexport interface IProgressService {\n\n\treadonly _serviceBrand: undefined;\n\n\twithProgress<R>(\n\t\toptions: IProgressOptions | IProgressNotificationOptions | IProgressWindowOptions | IProgressCompositeOptions,\n\t\ttask: (progress: IProgress<IProgressStep>) => Promise<R>,\n\t\tonDidCancel?: (choice?: number) => void\n\t): Promise<R>;\n}\n\nexport interface IProgressIndicator {\n\n\t/**\n\t * Show progress customized with the provided flags.\n\t */\n\tshow(infinite: true, delay?: number): IProgressRunner;\n\tshow(total: number, delay?: number): IProgressRunner;\n\n\t/**\n\t * Indicate progress for the duration of the provided promise. Progress will stop in\n\t * any case of promise completion, error or cancellation.\n\t */\n\tshowWhile(promise: Promise<unknown>, delay?: number): Promise<void>;\n}\n\nexport const enum ProgressLocation {\n\tExplorer = 1,\n\tScm = 3,\n\tExtensions = 5,\n\tWindow = 10,\n\tNotification = 15,\n\tDialog = 20\n}\n\nexport interface IProgressOptions {\n\treadonly location: ProgressLocation | string;\n\treadonly title?: string;\n\treadonly source?: string | { label: string; id: string; };\n\treadonly total?: number;\n\treadonly cancellable?: boolean;\n\treadonly buttons?: string[];\n}\n\nexport interface IProgressNotificationOptions extends IProgressOptions {\n\treadonly location: ProgressLocation.Notification;\n\treadonly primaryActions?: readonly IAction[];\n\treadonly secondaryActions?: readonly IAction[];\n\treadonly delay?: number;\n\treadonly silent?: boolean;\n}\n\nexport interface IProgressWindowOptions extends IProgressOptions {\n\treadonly location: ProgressLocation.Window;\n\treadonly command?: string;\n}\n\nexport interface IProgressCompositeOptions extends IProgressOptions {\n\treadonly location: ProgressLocation.Explorer | ProgressLocation.Extensions | ProgressLocation.Scm | string;\n\treadonly delay?: number;\n}\n\nexport interface IProgressStep {\n\tmessage?: string;\n\tincrement?: number;\n\ttotal?: number;\n}\n\nexport interface IProgressRunner {\n\ttotal(value: number): void;\n\tworked(value: number): void;\n\tdone(): void;\n}\n\nexport const emptyProgressRunner: IProgressRunner = Object.freeze({\n\ttotal() { },\n\tworked() { },\n\tdone() { }\n});\n\nexport interface IProgress<T> {\n\treport(item: T): void;\n}\n\nexport class Progress<T> implements IProgress<T> {\n\n\tstatic readonly None: IProgress<unknown> = Object.freeze({ report() { } });\n\n\tprivate _value?: T;\n\tget value(): T | undefined { return this._value; }\n\n\tconstructor(private callback: (data: T) => void) { }\n\n\treport(item: T) {\n\t\tthis._value = item;\n\t\tthis.callback(this._value);\n\t}\n}\n\n/**\n * A helper to show progress during a long running operation. If the operation\n * is started multiple times, only the last invocation will drive the progress.\n */\nexport interface IOperation {\n\tid: number;\n\tisCurrent: () => boolean;\n\ttoken: CancellationToken;\n\tstop(): void;\n}\n\n/**\n * RAII-style progress instance that allows imperative reporting and hides\n * once `dispose()` is called.\n */\nexport class UnmanagedProgress extends Disposable {\n\tprivate readonly deferred = new DeferredPromise<void>();\n\tprivate reporter?: IProgress<IProgressStep>;\n\tprivate lastStep?: IProgressStep;\n\n\tconstructor(\n\t\toptions: IProgressOptions | IProgressNotificationOptions | IProgressWindowOptions | IProgressCompositeOptions,\n\t\t@IProgressService progressService: IProgressService,\n\t) {\n\t\tsuper();\n\t\tprogressService.withProgress(options, reporter => {\n\t\t\tthis.reporter = reporter;\n\t\t\tif (this.lastStep) {\n\t\t\t\treporter.report(this.lastStep);\n\t\t\t}\n\n\t\t\treturn this.deferred.p;\n\t\t});\n\n\t\tthis._register(toDisposable(() => this.deferred.complete()));\n\t}\n\n\treport(step: IProgressStep) {\n\t\tif (this.reporter) {\n\t\t\tthis.reporter.report(step);\n\t\t} else {\n\t\t\tthis.lastStep = step;\n\t\t}\n\t}\n}\n\n\nexport class LongRunningOperation extends Disposable {\n\tprivate currentOperationId = 0;\n\tprivate readonly currentOperationDisposables = this._register(new DisposableStore());\n\tprivate currentProgressRunner: IProgressRunner | undefined;\n\tprivate currentProgressTimeout: any;\n\n\tconstructor(\n\t\tprivate progressIndicator: IProgressIndicator\n\t) {\n\t\tsuper();\n\t}\n\n\tstart(progressDelay: number): IOperation {\n\n\t\t// Stop any previous operation\n\t\tthis.stop();\n\n\t\t// Start new\n\t\tconst newOperationId = ++this.currentOperationId;\n\t\tconst newOperationToken = new CancellationTokenSource();\n\t\tthis.currentProgressTimeout = setTimeout(() => {\n\t\t\tif (newOperationId === this.currentOperationId) {\n\t\t\t\tthis.currentProgressRunner = this.progressIndicator.show(true);\n\t\t\t}\n\t\t}, progressDelay);\n\n\t\tthis.currentOperationDisposables.add(toDisposable(() => clearTimeout(this.currentProgressTimeout)));\n\t\tthis.currentOperationDisposables.add(toDisposable(() => newOperationToken.cancel()));\n\t\tthis.currentOperationDisposables.add(toDisposable(() => this.currentProgressRunner ? this.currentProgressRunner.done() : undefined));\n\n\t\treturn {\n\t\t\tid: newOperationId,\n\t\t\ttoken: newOperationToken.token,\n\t\t\tstop: () => this.doStop(newOperationId),\n\t\t\tisCurrent: () => this.currentOperationId === newOperationId\n\t\t};\n\t}\n\n\tstop(): void {\n\t\tthis.doStop(this.currentOperationId);\n\t}\n\n\tprivate doStop(operationId: number): void {\n\t\tif (this.currentOperationId === operationId) {\n\t\t\tthis.currentOperationDisposables.clear();\n\t\t}\n\t}\n}\n\nexport const IEditorProgressService = createDecorator<IEditorProgressService>('editorProgressService');\n\n/**\n * A progress service that will report progress local to the editor triggered from.\n */\nexport interface IEditorProgressService extends IProgressIndicator {\n\n\treadonly _serviceBrand: undefined;\n}\n"]}