{"version":3,"file":"editor.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/editor/common/editor.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAyGhG,IAAY,gBAyBX;IAzBD,WAAY,gBAAgB;QAE3B;;;WAGG;QACH,+DAAQ,CAAA;QAER;;;;;;WAMG;QACH,6DAAO,CAAA;QAEP;;;;;;WAMG;QACH,+DAAQ,CAAA;IACT,CAAC,EAzBW,gBAAgB,GAAhB,wBAAgB,KAAhB,wBAAgB,QAyB3B;IAED,IAAY,cAWX;IAXD,WAAY,cAAc;QAEzB;;WAEG;QACH,mDAAQ,CAAA;QAER;;WAEG;QACH,2DAAQ,CAAA;IACT,CAAC,EAXW,cAAc,GAAd,sBAAc,KAAd,sBAAc,QAWzB;IAED,IAAY,iBAaX;IAbD,WAAY,iBAAiB;QAE5B;;;WAGG;QACH,uDAAG,CAAA;QAEH;;;WAGG;QACH,yDAAI,CAAA;IACL,CAAC,EAbW,iBAAiB,GAAjB,yBAAiB,KAAjB,yBAAiB,QAa5B;IAyGD,IAAkB,6BAkBjB;IAlBD,WAAkB,6BAA6B;QAC9C;;WAEG;QACH,qFAAU,CAAA;QACV;;WAEG;QACH,uHAA2B,CAAA;QAC3B;;WAEG;QACH,uFAAW,CAAA;QACX;;;WAGG;QACH,yHAA4B,CAAA;IAC7B,CAAC,EAlBiB,6BAA6B,GAA7B,qCAA6B,KAA7B,qCAA6B,QAkB9C","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { Event } from 'vs/base/common/event';\n\nexport interface IEditorModel {\n\n\t/**\n\t * Emitted when the model is about to be disposed.\n\t */\n\treadonly onWillDispose: Event<void>;\n\n\t/**\n\t * Resolves the model.\n\t */\n\tresolve(): Promise<void>;\n\n\t/**\n\t * Find out if the editor model was resolved or not.\n\t */\n\tisResolved(): boolean;\n\n\t/**\n\t * Find out if this model has been disposed.\n\t */\n\tisDisposed(): boolean;\n\n\t/**\n\t * Dispose associated resources\n\t */\n\tdispose(): void;\n}\n\nexport interface IBaseResourceEditorInput {\n\n\t/**\n\t * Optional options to use when opening the text input.\n\t */\n\toptions?: ITextEditorOptions;\n\n\t/**\n\t * Label to show for the diff editor\n\t */\n\treadonly label?: string;\n\n\t/**\n\t * Description to show for the diff editor\n\t */\n\treadonly description?: string;\n\n\t/**\n\t * Hint to indicate that this input should be treated as a file\n\t * that opens in an editor capable of showing file content.\n\t *\n\t * Without this hint, the editor service will make a guess by\n\t * looking at the scheme of the resource(s).\n\t */\n\treadonly forceFile?: boolean;\n\n\t/**\n\t * Hint to indicate that this input should be treated as a\n\t * untitled file.\n\t *\n\t * Without this hint, the editor service will make a guess by\n\t * looking at the scheme of the resource(s).\n\t */\n\treadonly forceUntitled?: boolean;\n}\n\n/**\n * This identifier allows to uniquely identify an editor with a\n * resource and type identifier.\n */\nexport interface IResourceEditorInputIdentifier {\n\n\t/**\n\t * The resource URI of the editor.\n\t */\n\treadonly resource: URI;\n\n\t/**\n\t * The type of the editor.\n\t */\n\treadonly typeId: string;\n}\n\nexport interface IResourceEditorInput extends IBaseResourceEditorInput {\n\n\t/**\n\t * The resource URI of the resource to open.\n\t */\n\treadonly resource: URI;\n\n\t/**\n\t * The encoding of the text input if known.\n\t */\n\treadonly encoding?: string;\n\n\t/**\n\t * The identifier of the language mode of the text input\n\t * if known to use when displaying the contents.\n\t */\n\treadonly mode?: string;\n}\n\nexport enum EditorActivation {\n\n\t/**\n\t * Activate the editor after it opened. This will automatically restore\n\t * the editor if it is minimized.\n\t */\n\tACTIVATE,\n\n\t/**\n\t * Only restore the editor if it is minimized but do not activate it.\n\t *\n\t * Note: will only work in combination with the `preserveFocus: true` option.\n\t * Otherwise, if focus moves into the editor, it will activate and restore\n\t * automatically.\n\t */\n\tRESTORE,\n\n\t/**\n\t * Preserve the current active editor.\n\t *\n\t * Note: will only work in combination with the `preserveFocus: true` option.\n\t * Otherwise, if focus moves into the editor, it will activate and restore\n\t * automatically.\n\t */\n\tPRESERVE\n}\n\nexport enum EditorOverride {\n\n\t/**\n\t * Displays a picker and allows the user to decide which editor to use\n\t */\n\tPICK = 1,\n\n\t/**\n\t * Disables overrides\n\t */\n\tDISABLED\n}\n\nexport enum EditorOpenContext {\n\n\t/**\n\t * Default: the editor is opening via a programmatic call\n\t * to the editor service API.\n\t */\n\tAPI,\n\n\t/**\n\t * Indicates that a user action triggered the opening, e.g.\n\t * via mouse or keyboard use.\n\t */\n\tUSER\n}\n\nexport interface IEditorOptions {\n\n\t/**\n\t * Tells the editor to not receive keyboard focus when the editor is being opened.\n\t *\n\t * Will also not activate the group the editor opens in unless the group is already\n\t * the active one. This behaviour can be overridden via the `activation` option.\n\t */\n\treadonly preserveFocus?: boolean;\n\n\t/**\n\t * This option is only relevant if an editor is opened into a group that is not active\n\t * already and allows to control if the inactive group should become active, restored\n\t * or preserved.\n\t *\n\t * By default, the editor group will become active unless `preserveFocus` or `inactive`\n\t * is specified.\n\t */\n\treadonly activation?: EditorActivation;\n\n\t/**\n\t * Tells the editor to reload the editor input in the editor even if it is identical to the one\n\t * already showing. By default, the editor will not reload the input if it is identical to the\n\t * one showing.\n\t */\n\treadonly forceReload?: boolean;\n\n\t/**\n\t * Will reveal the editor if it is already opened and visible in any of the opened editor groups.\n\t *\n\t * Note that this option is just a hint that might be ignored if the user wants to open an editor explicitly\n\t * to the side of another one or into a specific editor group.\n\t */\n\treadonly revealIfVisible?: boolean;\n\n\t/**\n\t * Will reveal the editor if it is already opened (even when not visible) in any of the opened editor groups.\n\t *\n\t * Note that this option is just a hint that might be ignored if the user wants to open an editor explicitly\n\t * to the side of another one or into a specific editor group.\n\t */\n\treadonly revealIfOpened?: boolean;\n\n\t/**\n\t * An editor that is pinned remains in the editor stack even when another editor is being opened.\n\t * An editor that is not pinned will always get replaced by another editor that is not pinned.\n\t */\n\treadonly pinned?: boolean;\n\n\t/**\n\t * An editor that is sticky moves to the beginning of the editors list within the group and will remain\n\t * there unless explicitly closed. Operations such as \"Close All\" will not close sticky editors.\n\t */\n\treadonly sticky?: boolean;\n\n\t/**\n\t * The index in the document stack where to insert the editor into when opening.\n\t */\n\treadonly index?: number;\n\n\t/**\n\t * An active editor that is opened will show its contents directly. Set to true to open an editor\n\t * in the background without loading its contents.\n\t *\n\t * Will also not activate the group the editor opens in unless the group is already\n\t * the active one. This behaviour can be overridden via the `activation` option.\n\t */\n\treadonly inactive?: boolean;\n\n\t/**\n\t * Will not show an error in case opening the editor fails and thus allows to show a custom error\n\t * message as needed. By default, an error will be presented as notification if opening was not possible.\n\t */\n\treadonly ignoreError?: boolean;\n\n\t/**\n\t * Allows to override the editor that should be used to display the input:\n\t * - `undefined`: let the editor decide for itself\n\t * - `string`: specific override by id\n\t * - `EditorOverride`: specific override handling\n\t */\n\treadonly override?: string | EditorOverride;\n\n\t/**\n\t * A optional hint to signal in which context the editor opens.\n\t *\n\t * If configured to be `EditorOpenContext.USER`, this hint can be\n\t * used in various places to control the experience. For example,\n\t * if the editor to open fails with an error, a notification could\n\t * inform about this in a modal dialog. If the editor opened through\n\t * some background task, the notification would show in the background,\n\t * not as a modal dialog.\n\t */\n\treadonly context?: EditorOpenContext;\n}\n\nexport interface ITextEditorSelection {\n\treadonly startLineNumber: number;\n\treadonly startColumn: number;\n\treadonly endLineNumber?: number;\n\treadonly endColumn?: number;\n}\n\nexport const enum TextEditorSelectionRevealType {\n\t/**\n\t * Option to scroll vertically or horizontally as necessary and reveal a range centered vertically.\n\t */\n\tCenter = 0,\n\t/**\n\t * Option to scroll vertically or horizontally as necessary and reveal a range centered vertically only if it lies outside the viewport.\n\t */\n\tCenterIfOutsideViewport = 1,\n\t/**\n\t * Option to scroll vertically or horizontally as necessary and reveal a range close to the top of the viewport, but not quite at the top.\n\t */\n\tNearTop = 2,\n\t/**\n\t * Option to scroll vertically or horizontally as necessary and reveal a range close to the top of the viewport, but not quite at the top.\n\t * Only if it lies outside the viewport\n\t */\n\tNearTopIfOutsideViewport = 3,\n}\n\nexport interface ITextEditorOptions extends IEditorOptions {\n\n\t/**\n\t * Text editor selection.\n\t */\n\treadonly selection?: ITextEditorSelection;\n\n\t/**\n\t * Text editor view state.\n\t */\n\treadonly viewState?: object;\n\n\t/**\n\t * Option to control the text editor selection reveal type.\n\t * Defaults to TextEditorSelectionRevealType.Center\n\t */\n\treadonly selectionRevealType?: TextEditorSelectionRevealType;\n}\n"]}