{"version":3,"file":"requestService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/request/browser/requestService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAShG;;;OAGG;IACH,IAAa,cAAc,GAA3B,MAAa,cAAc;QAI1B,YACyC,oBAA2C,EACrD,UAAuB;YADb,yBAAoB,GAApB,oBAAoB,CAAuB;YACrD,eAAU,GAAV,UAAU,CAAa;QAEtD,CAAC;QAED,OAAO,CAAC,OAAwB,EAAE,KAAwB;YACzD,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,wBAAwB,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;YAE7D,IAAI,CAAC,OAAO,CAAC,kBAAkB,EAAE;gBAChC,OAAO,CAAC,kBAAkB,GAAG,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAS,yBAAyB,CAAC,CAAC;aACnG;YAED,OAAO,CAAA,GAAA,iBAAO,CAAA,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QAChC,CAAC;QAED,KAAK,CAAC,YAAY,CAAC,GAAW;YAC7B,OAAO,SAAS,CAAC,CAAC,6BAA6B;QAChD,CAAC;KACD,CAAA;IAvBY,cAAc;QAKxB,WAAA,qCAAqB,CAAA;QACrB,WAAA,iBAAW,CAAA;OAND,cAAc,CAuB1B;IAvBY,wCAAc","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IRequestOptions, IRequestContext } from 'vs/base/parts/request/common/request';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { request } from 'vs/base/parts/request/browser/request';\nimport { IRequestService } from 'vs/platform/request/common/request';\n\n/**\n * This service exposes the `request` API, while using the global\n * or configured proxy settings.\n */\nexport class RequestService implements IRequestService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t}\n\n\trequest(options: IRequestOptions, token: CancellationToken): Promise<IRequestContext> {\n\t\tthis.logService.trace('RequestService#request', options.url);\n\n\t\tif (!options.proxyAuthorization) {\n\t\t\toptions.proxyAuthorization = this.configurationService.getValue<string>('http.proxyAuthorization');\n\t\t}\n\n\t\treturn request(options, token);\n\t}\n\n\tasync resolveProxy(url: string): Promise<string | undefined> {\n\t\treturn undefined; // not implemented in the web\n\t}\n}\n"]}