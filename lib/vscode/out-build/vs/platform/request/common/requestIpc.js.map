{"version":3,"file":"requestIpc.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/request/common/requestIpc.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAiBhG,MAAa,cAAc;QAE1B,YAA6B,OAAwB;YAAxB,YAAO,GAAP,OAAO,CAAiB;QAAI,CAAC;QAE1D,MAAM,CAAC,OAAY,EAAE,KAAa;YACjC,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;QACnC,CAAC;QAED,IAAI,CAAC,OAAY,EAAE,OAAe,EAAE,IAAU;YAC7C,QAAQ,OAAO,EAAE;gBAChB,KAAK,SAAS,CAAC,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,gCAAiB,CAAC,IAAI,CAAC;qBAC1E,IAAI,CAAC,KAAK,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,EAAE,EAAE;oBAC/B,MAAM,MAAM,GAAG,MAAM,CAAA,GAAA,uBAAc,CAAA,CAAC,MAAM,CAAC,CAAC;oBAC5C,OAAwB,CAAC,EAAE,UAAU,EAAE,GAAG,CAAC,UAAU,EAAE,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,EAAE,MAAM,CAAC,CAAC;gBACxF,CAAC,CAAC,CAAC;aACJ;YACD,MAAM,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC;QACjC,CAAC;KACD;IAlBD,wCAkBC;IAED,MAAa,oBAAoB;QAIhC,YAA6B,OAAiB;YAAjB,YAAO,GAAP,OAAO,CAAU;QAAI,CAAC;QAEnD,KAAK,CAAC,OAAO,CAAC,OAAwB,EAAE,KAAwB;YAC/D,OAAO,oBAAoB,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;QACnE,CAAC;QAED,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,OAAiB,EAAE,OAAwB,EAAE,KAAwB;YACzF,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,MAAM,OAAO,CAAC,IAAI,CAAkB,SAAS,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;YAChF,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,CAAA,GAAA,uBAAc,CAAA,CAAC,MAAM,CAAC,EAAE,CAAC;QAChD,CAAC;KAED;IAfD,oDAeC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IChannel, IServerChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { Event } from 'vs/base/common/event';\nimport { IRequestService } from 'vs/platform/request/common/request';\nimport { IRequestOptions, IRequestContext, IHeaders } from 'vs/base/parts/request/common/request';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { VSBuffer, bufferToStream, streamToBuffer } from 'vs/base/common/buffer';\n\ntype RequestResponse = [\n\t{\n\t\theaders: IHeaders;\n\t\tstatusCode?: number;\n\t},\n\tVSBuffer\n];\n\nexport class RequestChannel implements IServerChannel {\n\n\tconstructor(private readonly service: IRequestService) { }\n\n\tlisten(context: any, event: string): Event<any> {\n\t\tthrow new Error('Invalid listen');\n\t}\n\n\tcall(context: any, command: string, args?: any): Promise<any> {\n\t\tswitch (command) {\n\t\t\tcase 'request': return this.service.request(args[0], CancellationToken.None)\n\t\t\t\t.then(async ({ res, stream }) => {\n\t\t\t\t\tconst buffer = await streamToBuffer(stream);\n\t\t\t\t\treturn <RequestResponse>[{ statusCode: res.statusCode, headers: res.headers }, buffer];\n\t\t\t\t});\n\t\t}\n\t\tthrow new Error('Invalid call');\n\t}\n}\n\nexport class RequestChannelClient {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(private readonly channel: IChannel) { }\n\n\tasync request(options: IRequestOptions, token: CancellationToken): Promise<IRequestContext> {\n\t\treturn RequestChannelClient.request(this.channel, options, token);\n\t}\n\n\tstatic async request(channel: IChannel, options: IRequestOptions, token: CancellationToken): Promise<IRequestContext> {\n\t\tconst [res, buffer] = await channel.call<RequestResponse>('request', [options]);\n\t\treturn { res, stream: bufferToStream(buffer) };\n\t}\n\n}\n"]}