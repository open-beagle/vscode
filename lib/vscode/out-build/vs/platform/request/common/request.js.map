{"version":3,"sources":["vs/platform/request/common/request.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAUnF,QAAA,eAAe,GAAG,CAAA,GAAA,+BAAe,CAAA,CAAkB,gBAAgB,CAAC,CAAC;IAUlF,SAAgB,SAAS,CAAC,OAAwB;QACjD,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,IAAI,OAAO,CAAC,GAAG,CAAC,UAAU,IAAI,GAAG,IAAI,OAAO,CAAC,GAAG,CAAC,UAAU,GAAG,GAAG,CAAC,IAAI,OAAO,CAAC,GAAG,CAAC,UAAU,KAAK,IAAI,CAAC;IACrI,CAAC;IAFD,8BAEC;IAED,SAAS,YAAY,CAAC,OAAwB;QAC7C,OAAO,OAAO,CAAC,GAAG,CAAC,UAAU,KAAK,GAAG,CAAC;IACvC,CAAC;IAEM,KAAK,UAAU,MAAM,CAAC,OAAwB;QACpD,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE;YACxB,MAAM,IAAI,KAAK,CAAC,kBAAkB,GAAG,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;SAC7D;QACD,IAAI,YAAY,CAAC,OAAO,CAAC,EAAE;YAC1B,OAAO,IAAI,CAAC;SACZ;QACD,MAAM,MAAM,GAAG,MAAM,CAAA,GAAA,uBAAc,CAAA,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACpD,OAAO,MAAM,CAAC,QAAQ,EAAE,CAAC;IAC1B,CAAC;IATD,wBASC;IAEM,KAAK,UAAU,MAAM,CAAS,OAAwB;QAC5D,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE;YACxB,MAAM,IAAI,KAAK,CAAC,kBAAkB,GAAG,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;SAC7D;QACD,IAAI,YAAY,CAAC,OAAO,CAAC,EAAE;YAC1B,OAAO,IAAI,CAAC;SACZ;QACD,MAAM,MAAM,GAAG,MAAM,CAAA,GAAA,uBAAc,CAAA,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACpD,MAAM,GAAG,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;QAC9B,IAAI;YACH,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;SACvB;QAAC,OAAO,GAAG,EAAE;YACb,GAAG,CAAC,OAAO,IAAI,KAAK,GAAG,GAAG,CAAC;YAC3B,MAAM,GAAG,CAAC;SACV;IACF,CAAC;IAfD,wBAeC;IAWD,SAAgB,8BAA8B,CAAC,KAAyB;QACvE,2BAA2B,CAAC,KAAK,CAAC,CAAC;IACpC,CAAC;IAFD,wEAEC;IAED,IAAI,kBAAkD,CAAC;IACvD,SAAS,2BAA2B,CAAC,KAAyB;QAC7D,MAAM,qBAAqB,GAAG,mBAAQ,CAAC,EAAE,CAAyB,kCAAU,CAAC,aAAa,CAAC,CAAC;QAC5F,IAAI,kBAAkB,EAAE;YACvB,qBAAqB,CAAC,wBAAwB,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC;SACrE;QACD,kBAAkB,GAAG;YACpB,EAAE,EAAE,MAAM;YACV,KAAK,EAAE,EAAE;YACT,KAAK,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAwB,EAAE,IAAM,CAAC;YACjD,IAAI,EAAE,QAAQ;YACd,KAAK;YACL,UAAU,EAAE;gBACX,YAAY,EAAE;oBACb,IAAI,EAAE,QAAQ;oBACd,OAAO,EAAE,uEAAuE;oBAChF,mBAAmB,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAO,EAAE,IAAwH,CAAC;oBAChK,UAAU,EAAE,IAAI;iBAChB;gBACD,qBAAqB,EAAE;oBACtB,IAAI,EAAE,SAAS;oBACf,OAAO,EAAE,IAAI;oBACb,WAAW,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAW,EAAE,IAAoG,CAAC;oBACxI,UAAU,EAAE,IAAI;iBAChB;gBACD,yBAAyB,EAAE;oBAC1B,IAAI,EAAE,CAAC,MAAM,EAAE,QAAQ,CAAC;oBACxB,OAAO,EAAE,IAAI;oBACb,mBAAmB,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAoB,EAAE,IAAkF,CAAC;oBACvI,UAAU,EAAE,IAAI;iBAChB;gBACD,mBAAmB,EAAE;oBACpB,IAAI,EAAE,QAAQ;oBACd,IAAI,EAAE,CAAC,KAAK,EAAE,IAAI,EAAE,UAAU,EAAE,UAAU,CAAC;oBAC3C,gBAAgB,EAAE;wBACjB,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAiB,EAAE,IAAuC,CAAC;wBACpE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAgB,EAAE,IAAsC,CAAC;wBAClE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAsB,EAAE,IAAyF,CAAC;wBAC3H,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAsB,EAAE,IAAgE,CAAC;qBAClG;oBACD,OAAO,EAAE,UAAU;oBACnB,WAAW,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAc,EAAE,IAAuC,CAAC;oBAC9E,UAAU,EAAE,IAAI;iBAChB;gBACD,yBAAyB,EAAE;oBAC1B,IAAI,EAAE,SAAS;oBACf,OAAO,EAAE,IAAI;oBACb,WAAW,EAAE,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAoB,EAAE,IAAmJ,CAAC;oBAChM,UAAU,EAAE,IAAI;iBAChB;aACD;SACD,CAAC;QACF,qBAAqB,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,CAAC;IACjE,CAAC;IAED,2BAA2B,iBAA4B,CAAC","file":"request.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IConfigurationRegistry, Extensions, ConfigurationScope, IConfigurationNode } from 'vs/platform/configuration/common/configurationRegistry';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { streamToBuffer } from 'vs/base/common/buffer';\nimport { IRequestOptions, IRequestContext } from 'vs/base/parts/request/common/request';\n\nexport const IRequestService = createDecorator<IRequestService>('requestService');\n\nexport interface IRequestService {\n\treadonly _serviceBrand: undefined;\n\n\trequest(options: IRequestOptions, token: CancellationToken): Promise<IRequestContext>;\n\n\tresolveProxy(url: string): Promise<string | undefined>;\n}\n\nexport function isSuccess(context: IRequestContext): boolean {\n\treturn (context.res.statusCode && context.res.statusCode >= 200 && context.res.statusCode < 300) || context.res.statusCode === 1223;\n}\n\nfunction hasNoContent(context: IRequestContext): boolean {\n\treturn context.res.statusCode === 204;\n}\n\nexport async function asText(context: IRequestContext): Promise<string | null> {\n\tif (!isSuccess(context)) {\n\t\tthrow new Error('Server returned ' + context.res.statusCode);\n\t}\n\tif (hasNoContent(context)) {\n\t\treturn null;\n\t}\n\tconst buffer = await streamToBuffer(context.stream);\n\treturn buffer.toString();\n}\n\nexport async function asJson<T = {}>(context: IRequestContext): Promise<T | null> {\n\tif (!isSuccess(context)) {\n\t\tthrow new Error('Server returned ' + context.res.statusCode);\n\t}\n\tif (hasNoContent(context)) {\n\t\treturn null;\n\t}\n\tconst buffer = await streamToBuffer(context.stream);\n\tconst str = buffer.toString();\n\ttry {\n\t\treturn JSON.parse(str);\n\t} catch (err) {\n\t\terr.message += ':\\n' + str;\n\t\tthrow err;\n\t}\n}\n\n\nexport interface IHTTPConfiguration {\n\thttp?: {\n\t\tproxy?: string;\n\t\tproxyStrictSSL?: boolean;\n\t\tproxyAuthorization?: string;\n\t};\n}\n\nexport function updateProxyConfigurationsScope(scope: ConfigurationScope): void {\n\tregisterProxyConfigurations(scope);\n}\n\nlet proxyConfiguration: IConfigurationNode | undefined;\nfunction registerProxyConfigurations(scope: ConfigurationScope): void {\n\tconst configurationRegistry = Registry.as<IConfigurationRegistry>(Extensions.Configuration);\n\tif (proxyConfiguration) {\n\t\tconfigurationRegistry.deregisterConfigurations([proxyConfiguration]);\n\t}\n\tproxyConfiguration = {\n\t\tid: 'http',\n\t\torder: 15,\n\t\ttitle: localize('httpConfigurationTitle', \"HTTP\"),\n\t\ttype: 'object',\n\t\tscope,\n\t\tproperties: {\n\t\t\t'http.proxy': {\n\t\t\t\ttype: 'string',\n\t\t\t\tpattern: '^https?://([^:]*(:[^@]*)?@)?([^:]+|\\\\[[:0-9a-fA-F]+\\\\])(:\\\\d+)?/?$|^$',\n\t\t\t\tmarkdownDescription: localize('proxy', \"The proxy setting to use. If not set, will be inherited from the `http_proxy` and `https_proxy` environment variables.\"),\n\t\t\t\trestricted: true\n\t\t\t},\n\t\t\t'http.proxyStrictSSL': {\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: true,\n\t\t\t\tdescription: localize('strictSSL', \"Controls whether the proxy server certificate should be verified against the list of supplied CAs.\"),\n\t\t\t\trestricted: true\n\t\t\t},\n\t\t\t'http.proxyAuthorization': {\n\t\t\t\ttype: ['null', 'string'],\n\t\t\t\tdefault: null,\n\t\t\t\tmarkdownDescription: localize('proxyAuthorization', \"The value to send as the `Proxy-Authorization` header for every network request.\"),\n\t\t\t\trestricted: true\n\t\t\t},\n\t\t\t'http.proxySupport': {\n\t\t\t\ttype: 'string',\n\t\t\t\tenum: ['off', 'on', 'fallback', 'override'],\n\t\t\t\tenumDescriptions: [\n\t\t\t\t\tlocalize('proxySupportOff', \"Disable proxy support for extensions.\"),\n\t\t\t\t\tlocalize('proxySupportOn', \"Enable proxy support for extensions.\"),\n\t\t\t\t\tlocalize('proxySupportFallback', \"Enable proxy support for extensions, fall back to request options, when no proxy found.\"),\n\t\t\t\t\tlocalize('proxySupportOverride', \"Enable proxy support for extensions, override request options.\"),\n\t\t\t\t],\n\t\t\t\tdefault: 'override',\n\t\t\t\tdescription: localize('proxySupport', \"Use the proxy support for extensions.\"),\n\t\t\t\trestricted: true\n\t\t\t},\n\t\t\t'http.systemCertificates': {\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: true,\n\t\t\t\tdescription: localize('systemCertificates', \"Controls whether CA certificates should be loaded from the OS. (On Windows and macOS, a reload of the window is required after turning this off.)\"),\n\t\t\t\trestricted: true\n\t\t\t}\n\t\t}\n\t};\n\tconfigurationRegistry.registerConfiguration(proxyConfiguration);\n}\n\nregisterProxyConfigurations(ConfigurationScope.MACHINE);\n"]}