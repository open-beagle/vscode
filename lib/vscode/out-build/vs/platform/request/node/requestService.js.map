{"version":3,"file":"requestService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/request/node/requestService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as https from 'https';\nimport * as http from 'http';\nimport * as streams from 'vs/base/common/stream';\nimport { createGunzip } from 'zlib';\nimport { parse as parseUrl } from 'url';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { isBoolean, isNumber } from 'vs/base/common/types';\nimport { canceled } from 'vs/base/common/errors';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IRequestService, IHTTPConfiguration } from 'vs/platform/request/common/request';\nimport { IRequestOptions, IRequestContext } from 'vs/base/parts/request/common/request';\nimport { getProxyAgent, Agent } from 'vs/platform/request/node/proxy';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { streamToBufferReadableStream } from 'vs/base/common/buffer';\nimport { INativeEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { resolveShellEnv } from 'vs/platform/environment/node/shellEnv';\n\nexport interface IRawRequestFunction {\n\t(options: http.RequestOptions, callback?: (res: http.IncomingMessage) => void): http.ClientRequest;\n}\n\nexport interface NodeRequestOptions extends IRequestOptions {\n\tagent?: Agent;\n\tstrictSSL?: boolean;\n\tgetRawRequest?(options: IRequestOptions): IRawRequestFunction;\n}\n\n/**\n * This service exposes the `request` API, while using the global\n * or configured proxy settings.\n */\nexport class RequestService extends Disposable implements IRequestService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate proxyUrl?: string;\n\tprivate strictSSL: boolean | undefined;\n\tprivate authorization?: string;\n\n\tconstructor(\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@INativeEnvironmentService private readonly environmentService: INativeEnvironmentService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tsuper();\n\t\tthis.configure(configurationService.getValue<IHTTPConfiguration>());\n\t\tthis._register(configurationService.onDidChangeConfiguration(() => this.configure(configurationService.getValue()), this));\n\t}\n\n\tprivate configure(config: IHTTPConfiguration) {\n\t\tthis.proxyUrl = config.http && config.http.proxy;\n\t\tthis.strictSSL = !!(config.http && config.http.proxyStrictSSL);\n\t\tthis.authorization = config.http && config.http.proxyAuthorization;\n\t}\n\n\tasync request(options: NodeRequestOptions, token: CancellationToken): Promise<IRequestContext> {\n\t\tthis.logService.trace('RequestService#request', options.url);\n\n\t\tconst { proxyUrl, strictSSL } = this;\n\t\tconst env = {\n\t\t\t...process.env,\n\t\t\t...(await resolveShellEnv(this.logService, this.environmentService.args, process.env)),\n\t\t};\n\t\tconst agent = options.agent ? options.agent : await getProxyAgent(options.url || '', env, { proxyUrl, strictSSL });\n\n\t\toptions.agent = agent;\n\t\toptions.strictSSL = strictSSL;\n\n\t\tif (this.authorization) {\n\t\t\toptions.headers = {\n\t\t\t\t...(options.headers || {}),\n\t\t\t\t'Proxy-Authorization': this.authorization\n\t\t\t};\n\t\t}\n\n\t\treturn this._request(options, token);\n\t}\n\n\tprivate async getNodeRequest(options: IRequestOptions): Promise<IRawRequestFunction> {\n\t\tconst endpoint = parseUrl(options.url!);\n\t\tconst module = endpoint.protocol === 'https:' ? await import('https') : await import('http');\n\t\treturn module.request;\n\t}\n\n\tprivate _request(options: NodeRequestOptions, token: CancellationToken): Promise<IRequestContext> {\n\n\t\treturn new Promise<IRequestContext>(async (c, e) => {\n\t\t\tlet req: http.ClientRequest;\n\n\t\t\tconst endpoint = parseUrl(options.url!);\n\t\t\tconst rawRequest = options.getRawRequest\n\t\t\t\t? options.getRawRequest(options)\n\t\t\t\t: await this.getNodeRequest(options);\n\n\t\t\tconst opts: https.RequestOptions = {\n\t\t\t\thostname: endpoint.hostname,\n\t\t\t\tport: endpoint.port ? parseInt(endpoint.port) : (endpoint.protocol === 'https:' ? 443 : 80),\n\t\t\t\tprotocol: endpoint.protocol,\n\t\t\t\tpath: endpoint.path,\n\t\t\t\tmethod: options.type || 'GET',\n\t\t\t\theaders: options.headers,\n\t\t\t\tagent: options.agent,\n\t\t\t\trejectUnauthorized: isBoolean(options.strictSSL) ? options.strictSSL : true\n\t\t\t};\n\n\t\t\tif (options.user && options.password) {\n\t\t\t\topts.auth = options.user + ':' + options.password;\n\t\t\t}\n\n\t\t\treq = rawRequest(opts, (res: http.IncomingMessage) => {\n\t\t\t\tconst followRedirects: number = isNumber(options.followRedirects) ? options.followRedirects : 3;\n\t\t\t\tif (res.statusCode && res.statusCode >= 300 && res.statusCode < 400 && followRedirects > 0 && res.headers['location']) {\n\t\t\t\t\tthis._request({\n\t\t\t\t\t\t...options,\n\t\t\t\t\t\turl: res.headers['location'],\n\t\t\t\t\t\tfollowRedirects: followRedirects - 1\n\t\t\t\t\t}, token).then(c, e);\n\t\t\t\t} else {\n\t\t\t\t\tlet stream: streams.ReadableStreamEvents<Uint8Array> = res;\n\n\t\t\t\t\tif (res.headers['content-encoding'] === 'gzip') {\n\t\t\t\t\t\tstream = res.pipe(createGunzip());\n\t\t\t\t\t}\n\n\t\t\t\t\tc({ res, stream: streamToBufferReadableStream(stream) } as IRequestContext);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treq.on('error', e);\n\n\t\t\tif (options.timeout) {\n\t\t\t\treq.setTimeout(options.timeout);\n\t\t\t}\n\n\t\t\tif (options.data) {\n\t\t\t\tif (typeof options.data === 'string') {\n\t\t\t\t\treq.write(options.data);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treq.end();\n\n\t\t\ttoken.onCancellationRequested(() => {\n\t\t\t\treq.abort();\n\t\t\t\te(canceled());\n\t\t\t});\n\t\t});\n\t}\n\n\tasync resolveProxy(url: string): Promise<string | undefined> {\n\t\treturn undefined; // currently not implemented in node\n\t}\n}\n"]}