{"version":3,"file":"proxy.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/request/node/proxy.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAOhG,SAAS,iBAAiB,CAAC,UAAe,EAAE,GAAuB;QAClE,IAAI,UAAU,CAAC,QAAQ,KAAK,OAAO,EAAE;YACpC,OAAO,GAAG,CAAC,UAAU,IAAI,GAAG,CAAC,UAAU,IAAI,IAAI,CAAC;SAChD;aAAM,IAAI,UAAU,CAAC,QAAQ,KAAK,QAAQ,EAAE;YAC5C,OAAO,GAAG,CAAC,WAAW,IAAI,GAAG,CAAC,WAAW,IAAI,GAAG,CAAC,UAAU,IAAI,GAAG,CAAC,UAAU,IAAI,IAAI,CAAC;SACtF;QAED,OAAO,IAAI,CAAC;IACb,CAAC;IAOM,KAAK,UAAU,aAAa,CAAC,aAAqB,EAAE,GAAuB,EAAE,UAAoB,EAAE;QACzG,MAAM,UAAU,GAAG,CAAA,GAAA,WAAQ,CAAA,CAAC,aAAa,CAAC,CAAC;QAC3C,MAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,IAAI,iBAAiB,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC;QAExE,IAAI,CAAC,QAAQ,EAAE;YACd,OAAO,IAAI,CAAC;SACZ;QAED,MAAM,aAAa,GAAG,CAAA,GAAA,WAAQ,CAAA,CAAC,QAAQ,CAAC,CAAC;QAEzC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,IAAI,EAAE,CAAC,EAAE;YACpD,OAAO,IAAI,CAAC;SACZ;QAED,MAAM,IAAI,GAAG;YACZ,IAAI,EAAE,aAAa,CAAC,QAAQ,IAAI,EAAE;YAClC,IAAI,EAAE,aAAa,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,QAAQ,KAAK,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC;YAC/E,IAAI,EAAE,aAAa,CAAC,IAAI;YACxB,kBAAkB,EAAE,CAAA,GAAA,iBAAS,CAAA,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI;SAC3E,CAAC;QAEF,OAAO,UAAU,CAAC,QAAQ,KAAK,OAAO;YACrC,CAAC,CAAC,IAAI,CAAC,sDAAa,kBAAkB,2BAAC,CAAC,CAAC,IAAkB,CAAC;YAC5D,CAAC,CAAC,IAAI,CAAC,sDAAa,mBAAmB,2BAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IAClD,CAAC;IAxBD,sCAwBC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Url, parse as parseUrl } from 'url';\nimport { isBoolean } from 'vs/base/common/types';\n\nexport type Agent = any;\n\nfunction getSystemProxyURI(requestURL: Url, env: typeof process.env): string | null {\n\tif (requestURL.protocol === 'http:') {\n\t\treturn env.HTTP_PROXY || env.http_proxy || null;\n\t} else if (requestURL.protocol === 'https:') {\n\t\treturn env.HTTPS_PROXY || env.https_proxy || env.HTTP_PROXY || env.http_proxy || null;\n\t}\n\n\treturn null;\n}\n\nexport interface IOptions {\n\tproxyUrl?: string;\n\tstrictSSL?: boolean;\n}\n\nexport async function getProxyAgent(rawRequestURL: string, env: typeof process.env, options: IOptions = {}): Promise<Agent> {\n\tconst requestURL = parseUrl(rawRequestURL);\n\tconst proxyURL = options.proxyUrl || getSystemProxyURI(requestURL, env);\n\n\tif (!proxyURL) {\n\t\treturn null;\n\t}\n\n\tconst proxyEndpoint = parseUrl(proxyURL);\n\n\tif (!/^https?:$/.test(proxyEndpoint.protocol || '')) {\n\t\treturn null;\n\t}\n\n\tconst opts = {\n\t\thost: proxyEndpoint.hostname || '',\n\t\tport: proxyEndpoint.port || (proxyEndpoint.protocol === 'https' ? '443' : '80'),\n\t\tauth: proxyEndpoint.auth,\n\t\trejectUnauthorized: isBoolean(options.strictSSL) ? options.strictSSL : true,\n\t};\n\n\treturn requestURL.protocol === 'http:'\n\t\t? new (await import('http-proxy-agent'))(opts as any as Url)\n\t\t: new (await import('https-proxy-agent'))(opts);\n}\n"]}