{"version":3,"file":"extensionRecommendationsIpc.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/extensionRecommendations/electron-sandbox/extensionRecommendationsIpc.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAMhG,MAAa,uDAAuD;QAInE,YAA6B,OAAiB;YAAjB,YAAO,GAAP,OAAO,CAAU;QAAI,CAAC;QAEnD,IAAI,sBAAsB,KAAe,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAE5E,4CAA4C,CAAC,YAAsB,EAAE,OAAe,EAAE,WAAmB,EAAE,QAA8B;YACxI,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,8CAA8C,EAAE,CAAC,YAAY,EAAE,OAAO,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC,CAAC;QAC1H,CAAC;QAED,8BAA8B,CAAC,eAAyB;YACvD,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;QAClC,CAAC;QAED,sCAAsC;YACrC,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;QAClC,CAAC;KAED;IApBD,0HAoBC;IAED,MAAa,iDAAiD;QAE7D,YAAoB,OAAoD;YAApD,YAAO,GAAP,OAAO,CAA6C;QAAI,CAAC;QAE7E,MAAM,CAAC,CAAU,EAAE,KAAa;YAC/B,MAAM,IAAI,KAAK,CAAC,oBAAoB,KAAK,EAAE,CAAC,CAAC;QAC9C,CAAC;QAED,IAAI,CAAC,CAAU,EAAE,OAAe,EAAE,IAAU;YAC3C,QAAQ,OAAO,EAAE;gBAChB,KAAK,8CAA8C,CAAC,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,4CAA4C,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;aAC1J;YAED,MAAM,IAAI,KAAK,CAAC,mBAAmB,OAAO,EAAE,CAAC,CAAC;QAC/C,CAAC;KACD;IAfD,8GAeC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { IChannel, IServerChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { IExtensionRecommendationNotificationService, RecommendationsNotificationResult, RecommendationSource } from 'vs/platform/extensionRecommendations/common/extensionRecommendations';\n\nexport class ExtensionRecommendationNotificationServiceChannelClient implements IExtensionRecommendationNotificationService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(private readonly channel: IChannel) { }\n\n\tget ignoredRecommendations(): string[] { throw new Error('not supported'); }\n\n\tpromptImportantExtensionsInstallNotification(extensionIds: string[], message: string, searchValue: string, priority: RecommendationSource): Promise<RecommendationsNotificationResult> {\n\t\treturn this.channel.call('promptImportantExtensionsInstallNotification', [extensionIds, message, searchValue, priority]);\n\t}\n\n\tpromptWorkspaceRecommendations(recommendations: string[]): Promise<void> {\n\t\tthrow new Error('not supported');\n\t}\n\n\thasToIgnoreRecommendationNotifications(): boolean {\n\t\tthrow new Error('not supported');\n\t}\n\n}\n\nexport class ExtensionRecommendationNotificationServiceChannel implements IServerChannel {\n\n\tconstructor(private service: IExtensionRecommendationNotificationService) { }\n\n\tlisten(_: unknown, event: string): Event<any> {\n\t\tthrow new Error(`Event not found: ${event}`);\n\t}\n\n\tcall(_: unknown, command: string, args?: any): Promise<any> {\n\t\tswitch (command) {\n\t\t\tcase 'promptImportantExtensionsInstallNotification': return this.service.promptImportantExtensionsInstallNotification(args[0], args[1], args[2], args[3]);\n\t\t}\n\n\t\tthrow new Error(`Call not found: ${command}`);\n\t}\n}\n\n"]}