{"version":3,"file":"extensionRecommendations.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/extensionRecommendations/common/extensionRecommendations.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAIhG,IAAkB,oBAIjB;IAJD,WAAkB,oBAAoB;QACrC,+DAAQ,CAAA;QACR,yEAAa,CAAA;QACb,6DAAO,CAAA;IACR,CAAC,EAJiB,oBAAoB,GAApB,4BAAoB,KAApB,4BAAoB,QAIrC;IAED,SAAgB,4BAA4B,CAAC,MAA4B;QACxE,QAAQ,MAAM,EAAE;YACf,iBAA8B,CAAC,CAAC,OAAO,MAAM,CAAC;YAC9C,sBAAmC,CAAC,CAAC,OAAO,WAAW,CAAC;YACxD,gBAA6B,CAAC,CAAC,OAAO,KAAK,CAAC;SAC5C;IACF,CAAC;IAND,oEAMC;IAED,IAAkB,iCAMjB;IAND,WAAkB,iCAAiC;QAClD,wDAAmB,CAAA;QACnB,4DAAuB,CAAA;QACvB,wDAAmB,CAAA;QACnB,8EAAyC,CAAA;QACzC,yDAAoB,CAAA;IACrB,CAAC,EANiB,iCAAiC,GAAjC,yCAAiC,KAAjC,yCAAiC,QAMlD;IAEY,QAAA,2CAA2C,GAAG,CAAA,GAAA,+BAAe,CAAA,CAA8C,6CAA6C,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\n\nexport const enum RecommendationSource {\n\tFILE = 1,\n\tWORKSPACE = 2,\n\tEXE = 3\n}\n\nexport function RecommendationSourceToString(source: RecommendationSource) {\n\tswitch (source) {\n\t\tcase RecommendationSource.FILE: return 'file';\n\t\tcase RecommendationSource.WORKSPACE: return 'workspace';\n\t\tcase RecommendationSource.EXE: return 'exe';\n\t}\n}\n\nexport const enum RecommendationsNotificationResult {\n\tIgnored = 'ignored',\n\tCancelled = 'cancelled',\n\tTooMany = 'toomany',\n\tIncompatibleWindow = 'incompatibleWindow',\n\tAccepted = 'reacted',\n}\n\nexport const IExtensionRecommendationNotificationService = createDecorator<IExtensionRecommendationNotificationService>('IExtensionRecommendationNotificationService');\n\nexport interface IExtensionRecommendationNotificationService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly ignoredRecommendations: string[];\n\thasToIgnoreRecommendationNotifications(): boolean;\n\n\tpromptImportantExtensionsInstallNotification(extensionIds: string[], message: string, searchValue: string, source: RecommendationSource): Promise<RecommendationsNotificationResult>;\n\tpromptWorkspaceRecommendations(recommendations: string[]): Promise<void>;\n}\n\n"]}