{"version":3,"file":"extensionHostDebugIpc.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/debug/electron-main/extensionHostDebugIpc.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { INullableProcessEnvironment, IOpenExtensionWindowResult } from 'vs/platform/debug/common/extensionHostDebug';\nimport { IProcessEnvironment } from 'vs/base/common/platform';\nimport { parseArgs, OPTIONS } from 'vs/platform/environment/node/argv';\nimport { createServer, AddressInfo } from 'net';\nimport { ExtensionHostDebugBroadcastChannel } from 'vs/platform/debug/common/extensionHostDebugIpc';\nimport { IWindowsMainService, OpenContext } from 'vs/platform/windows/electron-main/windows';\n\nexport class ElectronExtensionHostDebugBroadcastChannel<TContext> extends ExtensionHostDebugBroadcastChannel<TContext> {\n\n\tconstructor(private windowsMainService: IWindowsMainService) {\n\t\tsuper();\n\t}\n\n\toverride call(ctx: TContext, command: string, arg?: any): Promise<any> {\n\t\tif (command === 'openExtensionDevelopmentHostWindow') {\n\t\t\treturn this.openExtensionDevelopmentHostWindow(arg[0], arg[1], arg[2]);\n\t\t} else {\n\t\t\treturn super.call(ctx, command, arg);\n\t\t}\n\t}\n\n\tprivate async openExtensionDevelopmentHostWindow(args: string[], env: INullableProcessEnvironment, debugRenderer: boolean): Promise<IOpenExtensionWindowResult> {\n\t\tconst pargs = parseArgs(args, OPTIONS);\n\t\tpargs.debugRenderer = debugRenderer;\n\n\t\tconst extDevPaths = pargs.extensionDevelopmentPath;\n\t\tif (!extDevPaths) {\n\t\t\treturn { success: false };\n\t\t}\n\n\t\t// split INullableProcessEnvironment into a IProcessEnvironment and an array of keys to be deleted\n\t\t// TODO: support to delete env vars; currently the \"deletes\" are ignored\n\t\tlet userEnv: IProcessEnvironment | undefined;\n\t\t//let userEnvDeletes: string[] = [];\n\t\tconst keys = Object.keys(env);\n\t\tfor (let k of keys) {\n\t\t\tlet value = env[k];\n\t\t\tif (value === null) {\n\t\t\t\t//userEnvDeletes.push(k);\n\t\t\t} else {\n\t\t\t\tif (!userEnv) {\n\t\t\t\t\tuserEnv = Object.create(null) as IProcessEnvironment;\n\t\t\t\t}\n\t\t\t\tuserEnv[k] = value;\n\t\t\t}\n\t\t}\n\n\t\tconst [codeWindow] = this.windowsMainService.openExtensionDevelopmentHostWindow(extDevPaths, {\n\t\t\tcontext: OpenContext.API,\n\t\t\tcli: pargs,\n\t\t\tuserEnv: userEnv\n\t\t});\n\n\t\tif (!debugRenderer) {\n\t\t\treturn { success: true };\n\t\t}\n\n\t\tconst win = codeWindow.win;\n\t\tif (!win) {\n\t\t\treturn { success: true };\n\t\t}\n\n\t\tconst debug = win.webContents.debugger;\n\n\t\tlet listeners = debug.isAttached() ? Infinity : 0;\n\t\tconst server = createServer(listener => {\n\t\t\tif (listeners++ === 0) {\n\t\t\t\tdebug.attach();\n\t\t\t}\n\n\t\t\tlet closed = false;\n\t\t\tconst writeMessage = (message: object) => {\n\t\t\t\tif (!closed) { // in case sendCommand promises settle after closed\n\t\t\t\t\tlistener.write(JSON.stringify(message) + '\\0'); // null-delimited, CDP-compatible\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst onMessage = (_event: Event, method: string, params: unknown, sessionId?: string) =>\n\t\t\t\twriteMessage(({ method, params, sessionId }));\n\n\t\t\twin.on('close', () => {\n\t\t\t\tdebug.removeListener('message', onMessage);\n\t\t\t\tlistener.end();\n\t\t\t\tclosed = true;\n\t\t\t});\n\n\t\t\tdebug.addListener('message', onMessage);\n\n\t\t\tlet buf = Buffer.alloc(0);\n\t\t\tlistener.on('data', data => {\n\t\t\t\tbuf = Buffer.concat([buf, data]);\n\t\t\t\tfor (let delimiter = buf.indexOf(0); delimiter !== -1; delimiter = buf.indexOf(0)) {\n\t\t\t\t\tlet data: { id: number; sessionId: string; params: {} };\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst contents = buf.slice(0, delimiter).toString('utf8');\n\t\t\t\t\t\tbuf = buf.slice(delimiter + 1);\n\t\t\t\t\t\tdata = JSON.parse(contents);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tconsole.error('error reading cdp line', e);\n\t\t\t\t\t}\n\n\t\t\t\t\t// depends on a new API for which electron.d.ts has not been updated:\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tdebug.sendCommand(data.method, data.params, data.sessionId)\n\t\t\t\t\t\t.then((result: object) => writeMessage({ id: data.id, sessionId: data.sessionId, result }))\n\t\t\t\t\t\t.catch((error: Error) => writeMessage({ id: data.id, sessionId: data.sessionId, error: { code: 0, message: error.message } }));\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tlistener.on('error', err => {\n\t\t\t\tconsole.error('error on cdp pipe:', err);\n\t\t\t});\n\n\t\t\tlistener.on('close', () => {\n\t\t\t\tclosed = true;\n\t\t\t\tif (--listeners === 0) {\n\t\t\t\t\tdebug.detach();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tawait new Promise<void>(r => server.listen(0, r));\n\t\twin.on('close', () => server.close());\n\n\t\treturn { rendererDebugPort: (server.address() as AddressInfo).port, success: true };\n\t}\n}\n"]}