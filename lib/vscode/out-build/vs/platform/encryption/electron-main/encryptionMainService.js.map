{"version":3,"file":"encryptionMainService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/encryption/electron-main/encryptionMainService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAKnF,QAAA,sBAAsB,GAAG,CAAA,GAAA,+BAAe,CAAA,CAAyB,uBAAuB,CAAC,CAAC;IAQvG,MAAa,qBAAqB;QAEjC,YACS,SAAiB;YAAjB,cAAS,GAAT,SAAS,CAAQ;QAE1B,CAAC;QAEO,UAAU;YACjB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC,gBAAgB,CAAC,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC;QACvF,CAAC;QAED,KAAK,CAAC,OAAO,CAAC,KAAa;YAC1B,IAAI;gBACH,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;gBAC3C,OAAO,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;aACjD;YAAC,OAAO,CAAC,EAAE;gBACX,OAAO,KAAK,CAAC;aACb;QACF,CAAC;QAED,KAAK,CAAC,OAAO,CAAC,KAAa;YAC1B,IAAI;gBACH,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;gBAC3C,OAAO,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;aACjD;YAAC,OAAO,CAAC,EAAE;gBACX,OAAO,KAAK,CAAC;aACb;QACF,CAAC;KACD;IA5BD,sDA4BC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { ICommonEncryptionService } from 'vs/platform/encryption/common/encryptionService';\n\nexport const IEncryptionMainService = createDecorator<IEncryptionMainService>('encryptionMainService');\n\nexport interface IEncryptionMainService extends ICommonEncryptionService { }\n\nexport interface Encryption {\n\tencrypt(salt: string, value: string): Promise<string>;\n\tdecrypt(salt: string, value: string): Promise<string>;\n}\nexport class EncryptionMainService implements ICommonEncryptionService {\n\tdeclare readonly _serviceBrand: undefined;\n\tconstructor(\n\t\tprivate machineId: string) {\n\n\t}\n\n\tprivate encryption(): Promise<Encryption> {\n\t\treturn new Promise((resolve, reject) => require(['vscode-encrypt'], resolve, reject));\n\t}\n\n\tasync encrypt(value: string): Promise<string> {\n\t\ttry {\n\t\t\tconst encryption = await this.encryption();\n\t\t\treturn encryption.encrypt(this.machineId, value);\n\t\t} catch (e) {\n\t\t\treturn value;\n\t\t}\n\t}\n\n\tasync decrypt(value: string): Promise<string> {\n\t\ttry {\n\t\t\tconst encryption = await this.encryption();\n\t\t\treturn encryption.decrypt(this.machineId, value);\n\t\t} catch (e) {\n\t\t\treturn value;\n\t\t}\n\t}\n}\n"]}