{"version":3,"file":"state.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/state/test/node/state.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAUhG,CAAA,GAAA,sBAAU,CAAA,CAAC,cAAc,EAAE,GAAG,EAAE;QAE/B,IAAI,OAAe,CAAC;QAEpB,KAAK,CAAC,GAAG,EAAE;YACV,OAAO,GAAG,CAAA,GAAA,6BAAiB,CAAA,CAAC,CAAA,GAAA,WAAM,CAAA,EAAE,EAAE,UAAU,EAAE,cAAc,CAAC,CAAC;YAElE,OAAO,aAAQ,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,GAAG,EAAE;YACb,OAAO,CAAA,GAAA,YAAM,CAAA,CAAC,OAAO,CAAC,CAAC;QACxB,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,EAAE,KAAK;YACnB,MAAM,WAAW,GAAG,CAAA,GAAA,WAAI,CAAA,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;YAClD,CAAA,GAAA,mBAAa,CAAA,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;YAE/B,IAAI,OAAO,GAAG,IAAI,0BAAW,CAAC,WAAW,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC;YAEvD,OAAO,CAAC,OAAO,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;YAC1C,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,YAAY,CAAC,CAAC;YAE9D,OAAO,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;YAC/B,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,EAAE,cAAc,CAAC,EAAE,cAAc,CAAC,CAAC;YAEhF,MAAM,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC,CAAC;YAEhD,OAAO,CAAC,OAAO,CAAC,gBAAgB,EAAE,kBAAkB,CAAC,CAAC;YAEtD,OAAO,GAAG,IAAI,0BAAW,CAAC,WAAW,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC;YAEnD,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,gBAAgB,CAAC,EAAE,kBAAkB,CAAC,CAAC;YAE1E,OAAO,CAAC,OAAO,CAAC,gBAAgB,EAAE,kBAAkB,CAAC,CAAC;YACtD,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,gBAAgB,CAAC,EAAE,kBAAkB,CAAC,CAAC;YAE1E,OAAO,CAAC,OAAO,CAAC,oBAAoB,EAAE,SAAS,CAAC,CAAC;YACjD,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,oBAAoB,EAAE,cAAc,CAAC,EAAE,cAAc,CAAC,CAAC;YAE1F,OAAO,CAAC,OAAO,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC;YACvC,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,eAAe,EAAE,cAAc,CAAC,EAAE,cAAc,CAAC,CAAC;QACtF,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { tmpdir } from 'os';\nimport { promises } from 'fs';\nimport { join } from 'vs/base/common/path';\nimport { flakySuite, getRandomTestPath } from 'vs/base/test/node/testUtils';\nimport { FileStorage } from 'vs/platform/state/node/stateService';\nimport { rimraf, writeFileSync } from 'vs/base/node/pfs';\n\nflakySuite('StateService', () => {\n\n\tlet testDir: string;\n\n\tsetup(() => {\n\t\ttestDir = getRandomTestPath(tmpdir(), 'vsctests', 'stateservice');\n\n\t\treturn promises.mkdir(testDir, { recursive: true });\n\t});\n\n\tteardown(() => {\n\t\treturn rimraf(testDir);\n\t});\n\n\ttest('Basics', async function () {\n\t\tconst storageFile = join(testDir, 'storage.json');\n\t\twriteFileSync(storageFile, '');\n\n\t\tlet service = new FileStorage(storageFile, () => null);\n\n\t\tservice.setItem('some.key', 'some.value');\n\t\tassert.strictEqual(service.getItem('some.key'), 'some.value');\n\n\t\tservice.removeItem('some.key');\n\t\tassert.strictEqual(service.getItem('some.key', 'some.default'), 'some.default');\n\n\t\tassert.ok(!service.getItem('some.unknonw.key'));\n\n\t\tservice.setItem('some.other.key', 'some.other.value');\n\n\t\tservice = new FileStorage(storageFile, () => null);\n\n\t\tassert.strictEqual(service.getItem('some.other.key'), 'some.other.value');\n\n\t\tservice.setItem('some.other.key', 'some.other.value');\n\t\tassert.strictEqual(service.getItem('some.other.key'), 'some.other.value');\n\n\t\tservice.setItem('some.undefined.key', undefined);\n\t\tassert.strictEqual(service.getItem('some.undefined.key', 'some.default'), 'some.default');\n\n\t\tservice.setItem('some.null.key', null);\n\t\tassert.strictEqual(service.getItem('some.null.key', 'some.default'), 'some.default');\n\t});\n});\n"]}