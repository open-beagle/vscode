{"version":3,"file":"clipboardService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/clipboard/browser/clipboardService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAMhG,MAAa,uBAAuB;QAApC;YAIkB,kBAAa,GAAG,IAAI,GAAG,EAAkB,CAAC,CAAC,sCAAsC;YA+D1F,aAAQ,GAAG,EAAE,CAAC,CAAC,sCAAsC;YAUrD,cAAS,GAAU,EAAE,CAAC,CAAC,sCAAsC;QAatE,CAAC;QApFA,KAAK,CAAC,SAAS,CAAC,IAAY,EAAE,IAAa;YAE1C,yCAAyC;YACzC,IAAI,IAAI,EAAE;gBACT,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBAEnC,OAAO;aACP;YAED,qDAAqD;YACrD,oDAAoD;YACpD,4BAA4B;YAC5B,IAAI;gBACH,OAAO,MAAM,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;aACjD;YAAC,OAAO,KAAK,EAAE;gBACf,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;aACrB;YAED,gDAAgD;YAEhD,MAAM,aAAa,GAAG,QAAQ,CAAC,aAAa,CAAC;YAE7C,MAAM,QAAQ,GAAwB,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA,GAAA,OAAC,CAAA,CAAC,UAAU,EAAE,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;YACxG,QAAQ,CAAC,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC;YAC9B,QAAQ,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;YAC7B,QAAQ,CAAC,KAAK,CAAC,QAAQ,GAAG,UAAU,CAAC;YAErC,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC;YACtB,QAAQ,CAAC,KAAK,EAAE,CAAC;YACjB,QAAQ,CAAC,MAAM,EAAE,CAAC;YAElB,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;YAE7B,IAAI,aAAa,YAAY,WAAW,EAAE;gBACzC,aAAa,CAAC,KAAK,EAAE,CAAC;aACtB;YAED,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;YAEpC,OAAO;QACR,CAAC;QAED,KAAK,CAAC,QAAQ,CAAC,IAAa;YAE3B,yCAAyC;YACzC,IAAI,IAAI,EAAE;gBACT,OAAO,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;aAC1C;YAED,qDAAqD;YACrD,oDAAoD;YACpD,4BAA4B;YAC5B,IAAI;gBACH,OAAO,MAAM,SAAS,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;aAC5C;YAAC,OAAO,KAAK,EAAE;gBACf,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBAErB,OAAO,EAAE,CAAC;aACV;QACF,CAAC;QAID,KAAK,CAAC,YAAY;YACjB,OAAO,IAAI,CAAC,QAAQ,CAAC;QACtB,CAAC;QAED,KAAK,CAAC,aAAa,CAAC,IAAY;YAC/B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACtB,CAAC;QAID,KAAK,CAAC,cAAc,CAAC,SAAgB;YACpC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC5B,CAAC;QAED,KAAK,CAAC,aAAa;YAClB,OAAO,IAAI,CAAC,SAAS,CAAC;QACvB,CAAC;QAED,KAAK,CAAC,YAAY;YACjB,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;QAClC,CAAC;KACD;IA1FD,0DA0FC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';\nimport { URI } from 'vs/base/common/uri';\nimport { $ } from 'vs/base/browser/dom';\n\nexport class BrowserClipboardService implements IClipboardService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly mapTextToType = new Map<string, string>(); // unsupported in web (only in-memory)\n\n\tasync writeText(text: string, type?: string): Promise<void> {\n\n\t\t// With type: only in-memory is supported\n\t\tif (type) {\n\t\t\tthis.mapTextToType.set(type, text);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Guard access to navigator.clipboard with try/catch\n\t\t// as we have seen DOMExceptions in certain browsers\n\t\t// due to security policies.\n\t\ttry {\n\t\t\treturn await navigator.clipboard.writeText(text);\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t}\n\n\t\t// Fallback to textarea and execCommand solution\n\n\t\tconst activeElement = document.activeElement;\n\n\t\tconst textArea: HTMLTextAreaElement = document.body.appendChild($('textarea', { 'aria-hidden': true }));\n\t\ttextArea.style.height = '1px';\n\t\ttextArea.style.width = '1px';\n\t\ttextArea.style.position = 'absolute';\n\n\t\ttextArea.value = text;\n\t\ttextArea.focus();\n\t\ttextArea.select();\n\n\t\tdocument.execCommand('copy');\n\n\t\tif (activeElement instanceof HTMLElement) {\n\t\t\tactiveElement.focus();\n\t\t}\n\n\t\tdocument.body.removeChild(textArea);\n\n\t\treturn;\n\t}\n\n\tasync readText(type?: string): Promise<string> {\n\n\t\t// With type: only in-memory is supported\n\t\tif (type) {\n\t\t\treturn this.mapTextToType.get(type) || '';\n\t\t}\n\n\t\t// Guard access to navigator.clipboard with try/catch\n\t\t// as we have seen DOMExceptions in certain browsers\n\t\t// due to security policies.\n\t\ttry {\n\t\t\treturn await navigator.clipboard.readText();\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\n\t\t\treturn '';\n\t\t}\n\t}\n\n\tprivate findText = ''; // unsupported in web (only in-memory)\n\n\tasync readFindText(): Promise<string> {\n\t\treturn this.findText;\n\t}\n\n\tasync writeFindText(text: string): Promise<void> {\n\t\tthis.findText = text;\n\t}\n\n\tprivate resources: URI[] = []; // unsupported in web (only in-memory)\n\n\tasync writeResources(resources: URI[]): Promise<void> {\n\t\tthis.resources = resources;\n\t}\n\n\tasync readResources(): Promise<URI[]> {\n\t\treturn this.resources;\n\t}\n\n\tasync hasResources(): Promise<boolean> {\n\t\treturn this.resources.length > 0;\n\t}\n}\n"]}