{"version":3,"file":"log.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/log/browser/log.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAQhG,SAAS,gBAAgB,CAAC,KAAe;QACxC,QAAQ,KAAK,EAAE;YACd,KAAK,cAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,OAAO,CAAC;YACpC,KAAK,cAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,OAAO,CAAC;YACpC,KAAK,cAAQ,CAAC,IAAI,CAAC,CAAC,OAAO,MAAM,CAAC;YAClC,KAAK,cAAQ,CAAC,OAAO,CAAC,CAAC,OAAO,MAAM,CAAC;YACrC,KAAK,cAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,OAAO,CAAC;YACpC,KAAK,cAAQ,CAAC,QAAQ,CAAC,CAAC,OAAO,UAAU,CAAC;SAC1C;QACD,OAAO,MAAM,CAAC;IACf,CAAC;IAED;;;;OAIG;IACH,MAAa,4BAA6B,SAAQ,mBAAa;QAI9D,YAAY,WAAqB,uBAAiB;YACjD,KAAK,CAAC,EAAE,GAAG,EAAE,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;QAC3F,CAAC;QAEO,UAAU,CAAC,IAAY,EAAE,IAAW;YAC3C,MAAM,eAAe,GAAG,MAAqC,CAAC;YAC9D,IAAI,OAAO,eAAe,CAAC,iBAAiB,KAAK,UAAU,EAAE;gBAC5D,eAAe,CAAC,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;aAC9C;QACF,CAAC;KACD;IAdD,oEAcC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DEFAULT_LOG_LEVEL, LogLevel, AdapterLogger, ILogger } from 'vs/platform/log/common/log';\n\ninterface IAutomatedWindow {\n\tcodeAutomationLog(type: string, args: any[]): void;\n}\n\nfunction logLevelToString(level: LogLevel): string {\n\tswitch (level) {\n\t\tcase LogLevel.Trace: return 'trace';\n\t\tcase LogLevel.Debug: return 'debug';\n\t\tcase LogLevel.Info: return 'info';\n\t\tcase LogLevel.Warning: return 'warn';\n\t\tcase LogLevel.Error: return 'error';\n\t\tcase LogLevel.Critical: return 'critical';\n\t}\n\treturn 'info';\n}\n\n/**\n * A logger that is used when VSCode is running in the web with\n * an automation such as playwright. We expect a global codeAutomationLog\n * to be defined that we can use to log to.\n */\nexport class ConsoleLogInAutomationLogger extends AdapterLogger implements ILogger {\n\n\tdeclare codeAutomationLog: any;\n\n\tconstructor(logLevel: LogLevel = DEFAULT_LOG_LEVEL) {\n\t\tsuper({ log: (level, args) => this.consoleLog(logLevelToString(level), args) }, logLevel);\n\t}\n\n\tprivate consoleLog(type: string, args: any[]): void {\n\t\tconst automatedWindow = window as unknown as IAutomatedWindow;\n\t\tif (typeof automatedWindow.codeAutomationLog === 'function') {\n\t\t\tautomatedWindow.codeAutomationLog(type, args);\n\t\t}\n\t}\n}\n"]}