{"version":3,"file":"spdlogLog.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/log/node/spdlogLog.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { LogLevel, ILogger, AbstractMessageLogger } from 'vs/platform/log/common/log';\nimport * as spdlog from 'spdlog';\nimport { ByteSize } from 'vs/platform/files/common/files';\n\nasync function createSpdLogLogger(name: string, logfilePath: string, filesize: number, filecount: number): Promise<spdlog.RotatingLogger | null> {\n\t// Do not crash if spdlog cannot be loaded\n\ttry {\n\t\tconst _spdlog = await import('spdlog');\n\t\t_spdlog.setAsyncMode(8192, 500);\n\t\treturn _spdlog.createRotatingLoggerAsync(name, logfilePath, filesize, filecount);\n\t} catch (e) {\n\t\tconsole.error(e);\n\t}\n\treturn null;\n}\n\nexport function createRotatingLogger(name: string, filename: string, filesize: number, filecount: number): spdlog.RotatingLogger {\n\tconst _spdlog: typeof spdlog = require.__$__nodeRequire('spdlog');\n\treturn _spdlog.createRotatingLogger(name, filename, filesize, filecount);\n}\n\ninterface ILog {\n\tlevel: LogLevel;\n\tmessage: string;\n}\n\nfunction log(logger: spdlog.RotatingLogger, level: LogLevel, message: string): void {\n\tswitch (level) {\n\t\tcase LogLevel.Trace: logger.trace(message); break;\n\t\tcase LogLevel.Debug: logger.debug(message); break;\n\t\tcase LogLevel.Info: logger.info(message); break;\n\t\tcase LogLevel.Warning: logger.warn(message); break;\n\t\tcase LogLevel.Error: logger.error(message); break;\n\t\tcase LogLevel.Critical: logger.critical(message); break;\n\t\tdefault: throw new Error('Invalid log level');\n\t}\n}\n\nexport class SpdLogLogger extends AbstractMessageLogger implements ILogger {\n\n\tprivate buffer: ILog[] = [];\n\tprivate readonly _loggerCreationPromise: Promise<void>;\n\tprivate _logger: spdlog.RotatingLogger | undefined;\n\n\tconstructor(\n\t\tprivate readonly name: string,\n\t\tprivate readonly filepath: string,\n\t\tprivate readonly rotating: boolean,\n\t\tlevel: LogLevel\n\t) {\n\t\tsuper();\n\t\tthis.setLevel(level);\n\t\tthis._loggerCreationPromise = this._createSpdLogLogger();\n\t\tthis._register(this.onDidChangeLogLevel(level => {\n\t\t\tif (this._logger) {\n\t\t\t\tthis._logger.setLevel(level);\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate _createSpdLogLogger(): Promise<void> {\n\t\tconst filecount = this.rotating ? 6 : 1;\n\t\tconst filesize = (30 / filecount) * ByteSize.MB;\n\t\treturn createSpdLogLogger(this.name, this.filepath, filesize, filecount)\n\t\t\t.then(logger => {\n\t\t\t\tif (logger) {\n\t\t\t\t\tthis._logger = logger;\n\t\t\t\t\tthis._logger.setLevel(this.getLevel());\n\t\t\t\t\tfor (const { level, message } of this.buffer) {\n\t\t\t\t\t\tlog(this._logger, level, message);\n\t\t\t\t\t}\n\t\t\t\t\tthis.buffer = [];\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tprotected log(level: LogLevel, message: string): void {\n\t\tif (this._logger) {\n\t\t\tlog(this._logger, level, message);\n\t\t} else if (this.getLevel() <= level) {\n\t\t\tthis.buffer.push({ level, message });\n\t\t}\n\t}\n\n\tclearFormatters(): void {\n\t\tif (this._logger) {\n\t\t\tthis._logger.clearFormatters();\n\t\t} else {\n\t\t\tthis._loggerCreationPromise.then(() => this.clearFormatters());\n\t\t}\n\t}\n\n\toverride flush(): void {\n\t\tif (this._logger) {\n\t\t\tthis._logger.flush();\n\t\t} else {\n\t\t\tthis._loggerCreationPromise.then(() => this.flush());\n\t\t}\n\t}\n\n\toverride dispose(): void {\n\t\tif (this._logger) {\n\t\t\tthis.disposeLogger();\n\t\t} else {\n\t\t\tthis._loggerCreationPromise.then(() => this.disposeLogger());\n\t\t}\n\t}\n\n\tprivate disposeLogger(): void {\n\t\tif (this._logger) {\n\t\t\tthis._logger.drop();\n\t\t\tthis._logger = undefined;\n\t\t}\n\t}\n}\n"]}