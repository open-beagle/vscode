{"version":3,"file":"logIpc.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/log/common/logIpc.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IChannel, IServerChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { LogLevel, ILogService, LogService, ILoggerService, ILogger, AbstractMessageLogger, ILoggerOptions, AdapterLogger, AbstractLoggerService } from 'vs/platform/log/common/log';\nimport { Event } from 'vs/base/common/event';\nimport { URI } from 'vs/base/common/uri';\n\nexport class LogLevelChannel implements IServerChannel {\n\n\tonDidChangeLogLevel: Event<LogLevel>;\n\n\tconstructor(private service: ILogService) {\n\t\tthis.onDidChangeLogLevel = Event.buffer(service.onDidChangeLogLevel, true);\n\t}\n\n\tlisten(_: unknown, event: string): Event<any> {\n\t\tswitch (event) {\n\t\t\tcase 'onDidChangeLogLevel': return this.onDidChangeLogLevel;\n\t\t}\n\n\t\tthrow new Error(`Event not found: ${event}`);\n\t}\n\n\tasync call(_: unknown, command: string, arg?: any): Promise<any> {\n\t\tswitch (command) {\n\t\t\tcase 'setLevel': return this.service.setLevel(arg);\n\t\t}\n\n\t\tthrow new Error(`Call not found: ${command}`);\n\t}\n\n}\n\nexport class LogLevelChannelClient {\n\n\tconstructor(private channel: IChannel) { }\n\n\tget onDidChangeLogLevel(): Event<LogLevel> {\n\t\treturn this.channel.listen('onDidChangeLogLevel');\n\t}\n\n\tsetLevel(level: LogLevel): void {\n\t\tLogLevelChannelClient.setLevel(this.channel, level);\n\t}\n\n\tpublic static setLevel(channel: IChannel, level: LogLevel): Promise<void> {\n\t\treturn channel.call('setLevel', level);\n\t}\n\n}\n\nexport class LoggerChannel implements IServerChannel {\n\n\tprivate readonly loggers = new Map<string, ILogger>();\n\n\tconstructor(private readonly loggerService: ILoggerService) { }\n\n\tlisten(_: unknown, event: string): Event<any> {\n\t\tthrow new Error(`Event not found: ${event}`);\n\t}\n\n\tasync call(_: unknown, command: string, arg?: any): Promise<any> {\n\t\tswitch (command) {\n\t\t\tcase 'createLogger': this.createLogger(URI.revive(arg[0]), arg[1]); return;\n\t\t\tcase 'log': return this.log(URI.revive(arg[0]), arg[1]);\n\t\t\tcase 'consoleLog': return this.consoleLog(arg[0], arg[1]);\n\t\t}\n\n\t\tthrow new Error(`Call not found: ${command}`);\n\t}\n\n\tprivate createLogger(file: URI, options: ILoggerOptions): void {\n\t\tthis.loggers.set(file.toString(), this.loggerService.createLogger(file, options));\n\t}\n\n\tprivate consoleLog(level: LogLevel, args: any[]): void {\n\t\tlet consoleFn = console.log;\n\n\t\tswitch (level) {\n\t\t\tcase LogLevel.Error:\n\t\t\t\tconsoleFn = console.error;\n\t\t\t\tbreak;\n\t\t\tcase LogLevel.Warning:\n\t\t\t\tconsoleFn = console.warn;\n\t\t\t\tbreak;\n\t\t\tcase LogLevel.Info:\n\t\t\t\tconsoleFn = console.info;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tconsoleFn.call(console, ...args);\n\t}\n\n\tprivate log(file: URI, messages: [LogLevel, string][]): void {\n\t\tconst logger = this.loggers.get(file.toString());\n\t\tif (!logger) {\n\t\t\tthrow new Error('Create the logger before logging');\n\t\t}\n\t\tfor (const [level, message] of messages) {\n\t\t\tswitch (level) {\n\t\t\t\tcase LogLevel.Trace: logger.trace(message); break;\n\t\t\t\tcase LogLevel.Debug: logger.debug(message); break;\n\t\t\t\tcase LogLevel.Info: logger.info(message); break;\n\t\t\t\tcase LogLevel.Warning: logger.warn(message); break;\n\t\t\t\tcase LogLevel.Error: logger.error(message); break;\n\t\t\t\tcase LogLevel.Critical: logger.critical(message); break;\n\t\t\t\tdefault: throw new Error('Invalid log level');\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport class LoggerChannelClient extends AbstractLoggerService implements ILoggerService {\n\n\tconstructor(logLevel: LogLevel, onDidChangeLogLevel: Event<LogLevel>, private readonly channel: IChannel) {\n\t\tsuper(logLevel, onDidChangeLogLevel);\n\t}\n\n\tcreateConsoleMainLogger(): ILogger {\n\t\treturn new AdapterLogger({\n\t\t\tlog: (level: LogLevel, args: any[]) => {\n\t\t\t\tthis.channel.call('consoleLog', [level, args]);\n\t\t\t}\n\t\t});\n\t}\n\n\tprotected doCreateLogger(file: URI, logLevel: LogLevel, options?: ILoggerOptions): ILogger {\n\t\treturn new Logger(this.channel, file, logLevel, options);\n\t}\n\n}\n\nclass Logger extends AbstractMessageLogger {\n\n\tprivate isLoggerCreated: boolean = false;\n\tprivate buffer: [LogLevel, string][] = [];\n\n\tconstructor(\n\t\tprivate readonly channel: IChannel,\n\t\tprivate readonly file: URI,\n\t\tlogLevel: LogLevel,\n\t\tloggerOptions?: ILoggerOptions,\n\t) {\n\t\tsuper(loggerOptions?.always);\n\t\tthis.setLevel(logLevel);\n\t\tthis.channel.call('createLogger', [file, loggerOptions])\n\t\t\t.then(() => {\n\t\t\t\tthis.doLog(this.buffer);\n\t\t\t\tthis.isLoggerCreated = true;\n\t\t\t});\n\t}\n\n\tprotected log(level: LogLevel, message: string) {\n\t\tconst messages: [LogLevel, string][] = [[level, message]];\n\t\tif (this.isLoggerCreated) {\n\t\t\tthis.doLog(messages);\n\t\t} else {\n\t\t\tthis.buffer.push(...messages);\n\t\t}\n\t}\n\n\tprivate doLog(messages: [LogLevel, string][]) {\n\t\tthis.channel.call('log', [this.file, messages]);\n\t}\n}\n\nexport class FollowerLogService extends LogService implements ILogService {\n\n\tconstructor(private parent: LogLevelChannelClient, logService: ILogService) {\n\t\tsuper(logService);\n\t\tthis._register(parent.onDidChangeLogLevel(level => logService.setLevel(level)));\n\t}\n\n\toverride setLevel(level: LogLevel): void {\n\t\tsuper.setLevel(level);\n\n\t\tthis.parent.setLevel(level);\n\t}\n}\n"]}