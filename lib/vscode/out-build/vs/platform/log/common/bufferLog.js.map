{"version":3,"file":"bufferLog.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/log/common/bufferLog.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAShG,SAAS,cAAc,CAAC,MAAe,EAAE,KAAe;QACvD,QAAQ,KAAK,EAAE;YACd,KAAK,cAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,MAAM,CAAC,KAAK,CAAC;YACzC,KAAK,cAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,MAAM,CAAC,KAAK,CAAC;YACzC,KAAK,cAAQ,CAAC,IAAI,CAAC,CAAC,OAAO,MAAM,CAAC,IAAI,CAAC;YACvC,KAAK,cAAQ,CAAC,OAAO,CAAC,CAAC,OAAO,MAAM,CAAC,IAAI,CAAC;YAC1C,KAAK,cAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,MAAM,CAAC,KAAK,CAAC;YACzC,KAAK,cAAQ,CAAC,QAAQ,CAAC,CAAC,OAAO,MAAM,CAAC,QAAQ,CAAC;YAC/C,OAAO,CAAC,CAAC,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;SAC9C;IACF,CAAC;IAED,MAAa,gBAAiB,SAAQ,oBAAc;QAMnD,YAAY,WAAqB,uBAAiB;YACjD,KAAK,EAAE,CAAC;YAJD,WAAM,GAAW,EAAE,CAAC;YACpB,YAAO,GAAwB,SAAS,CAAC;YAIhD,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;YACxB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,EAAE;gBAC/C,IAAI,IAAI,CAAC,OAAO,EAAE;oBACjB,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;iBAC7B;YACF,CAAC,CAAC,CAAC,CAAC;QACL,CAAC;QAED,IAAI,MAAM,CAAC,MAAe;YACzB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;YAEtB,KAAK,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,IAAI,CAAC,MAAM,EAAE;gBAC1C,MAAM,EAAE,GAAG,cAAc,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;gBACzC,EAAE,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;aACvB;YAED,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QAClB,CAAC;QAEO,IAAI,CAAC,KAAe,EAAE,GAAG,IAAW;YAC3C,IAAI,IAAI,CAAC,OAAO,EAAE;gBACjB,MAAM,EAAE,GAAG,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;gBAC/C,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;aAC7B;iBAAM,IAAI,IAAI,CAAC,QAAQ,EAAE,IAAI,KAAK,EAAE;gBACpC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;aAClC;QACF,CAAC;QAED,KAAK,CAAC,OAAe,EAAE,GAAG,IAAW;YACpC,IAAI,CAAC,IAAI,CAAC,cAAQ,CAAC,KAAK,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;QAC7C,CAAC;QAED,KAAK,CAAC,OAAe,EAAE,GAAG,IAAW;YACpC,IAAI,CAAC,IAAI,CAAC,cAAQ,CAAC,KAAK,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;QAC7C,CAAC;QAED,IAAI,CAAC,OAAe,EAAE,GAAG,IAAW;YACnC,IAAI,CAAC,IAAI,CAAC,cAAQ,CAAC,IAAI,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;QAC5C,CAAC;QAED,IAAI,CAAC,OAAe,EAAE,GAAG,IAAW;YACnC,IAAI,CAAC,IAAI,CAAC,cAAQ,CAAC,OAAO,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;QAC/C,CAAC;QAED,KAAK,CAAC,OAAuB,EAAE,GAAG,IAAW;YAC5C,IAAI,CAAC,IAAI,CAAC,cAAQ,CAAC,KAAK,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;QAC7C,CAAC;QAED,QAAQ,CAAC,OAAuB,EAAE,GAAG,IAAW;YAC/C,IAAI,CAAC,IAAI,CAAC,cAAQ,CAAC,QAAQ,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;QAChD,CAAC;QAEQ,OAAO;YACf,IAAI,IAAI,CAAC,OAAO,EAAE;gBACjB,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;aACvB;QACF,CAAC;QAED,KAAK;YACJ,IAAI,IAAI,CAAC,OAAO,EAAE;gBACjB,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;aACrB;QACF,CAAC;KACD;IAvED,4CAuEC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ILogService, LogLevel, AbstractLogger, DEFAULT_LOG_LEVEL, ILogger } from 'vs/platform/log/common/log';\n\ninterface ILog {\n\tlevel: LogLevel;\n\targs: any[];\n}\n\nfunction getLogFunction(logger: ILogger, level: LogLevel): Function {\n\tswitch (level) {\n\t\tcase LogLevel.Trace: return logger.trace;\n\t\tcase LogLevel.Debug: return logger.debug;\n\t\tcase LogLevel.Info: return logger.info;\n\t\tcase LogLevel.Warning: return logger.warn;\n\t\tcase LogLevel.Error: return logger.error;\n\t\tcase LogLevel.Critical: return logger.critical;\n\t\tdefault: throw new Error('Invalid log level');\n\t}\n}\n\nexport class BufferLogService extends AbstractLogger implements ILogService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\tprivate buffer: ILog[] = [];\n\tprivate _logger: ILogger | undefined = undefined;\n\n\tconstructor(logLevel: LogLevel = DEFAULT_LOG_LEVEL) {\n\t\tsuper();\n\t\tthis.setLevel(logLevel);\n\t\tthis._register(this.onDidChangeLogLevel(level => {\n\t\t\tif (this._logger) {\n\t\t\t\tthis._logger.setLevel(level);\n\t\t\t}\n\t\t}));\n\t}\n\n\tset logger(logger: ILogger) {\n\t\tthis._logger = logger;\n\n\t\tfor (const { level, args } of this.buffer) {\n\t\t\tconst fn = getLogFunction(logger, level);\n\t\t\tfn.apply(logger, args);\n\t\t}\n\n\t\tthis.buffer = [];\n\t}\n\n\tprivate _log(level: LogLevel, ...args: any[]): void {\n\t\tif (this._logger) {\n\t\t\tconst fn = getLogFunction(this._logger, level);\n\t\t\tfn.apply(this._logger, args);\n\t\t} else if (this.getLevel() <= level) {\n\t\t\tthis.buffer.push({ level, args });\n\t\t}\n\t}\n\n\ttrace(message: string, ...args: any[]): void {\n\t\tthis._log(LogLevel.Trace, message, ...args);\n\t}\n\n\tdebug(message: string, ...args: any[]): void {\n\t\tthis._log(LogLevel.Debug, message, ...args);\n\t}\n\n\tinfo(message: string, ...args: any[]): void {\n\t\tthis._log(LogLevel.Info, message, ...args);\n\t}\n\n\twarn(message: string, ...args: any[]): void {\n\t\tthis._log(LogLevel.Warning, message, ...args);\n\t}\n\n\terror(message: string | Error, ...args: any[]): void {\n\t\tthis._log(LogLevel.Error, message, ...args);\n\t}\n\n\tcritical(message: string | Error, ...args: any[]): void {\n\t\tthis._log(LogLevel.Critical, message, ...args);\n\t}\n\n\toverride dispose(): void {\n\t\tif (this._logger) {\n\t\t\tthis._logger.dispose();\n\t\t}\n\t}\n\n\tflush(): void {\n\t\tif (this._logger) {\n\t\t\tthis._logger.flush();\n\t\t}\n\t}\n}\n"]}