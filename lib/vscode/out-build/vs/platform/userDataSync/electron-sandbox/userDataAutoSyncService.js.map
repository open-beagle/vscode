{"version":3,"file":"userDataAutoSyncService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/userDataSync/electron-sandbox/userDataAutoSyncService.ts"],"names":[],"mappings":";;;;;;;;;;;;;IAeA,IAAa,uBAAuB,GAApC,MAAa,uBAAwB,SAAQ,iDAA2B;QAEvE,YACkB,cAA+B,EACX,kCAAuE,EACjF,wBAAmD,EACtC,qCAA6E,EAC/F,mBAAyC,EAC3C,iBAAqC,EAChC,UAAmC,EAC/B,gBAA6C,EACvD,gBAAmC,EACxB,2BAAyD,EACtE,cAA+B,EACZ,iCAAqE;YAEzG,KAAK,CAAC,cAAc,EAAE,kCAAkC,EAAE,wBAAwB,EAAE,qCAAqC,EAAE,mBAAmB,EAAE,UAAU,EAAE,gBAAgB,EAAE,gBAAgB,EAAE,2BAA2B,EAAE,cAAc,EAAE,iCAAiC,CAAC,CAAC;YAEhR,IAAI,CAAC,SAAS,CAAC,aAAK,CAAC,QAAQ,CAAmB,aAAK,CAAC,GAAG,CACxD,aAAK,CAAC,GAAG,CAAC,iBAAiB,CAAC,gBAAgB,EAAE,GAAG,EAAE,CAAC,aAAa,CAAC,EAClE,aAAK,CAAC,GAAG,CAAC,iBAAiB,CAAC,eAAe,EAAE,GAAG,EAAE,CAAC,YAAY,CAAC,CAChE,EAAE,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;QACrH,CAAC;KAED,CAAA;IAxBY,uBAAuB;QAGjC,WAAA,gCAAe,CAAA;QACf,WAAA,kDAAmC,CAAA;QACnC,WAAA,wCAAyB,CAAA;QACzB,WAAA,qDAAsC,CAAA;QACtC,WAAA,mCAAoB,CAAA;QACpB,WAAA,2BAAkB,CAAA;QAClB,WAAA,sCAAuB,CAAA;QACvB,WAAA,iDAA2B,CAAA;QAC3B,WAAA,6BAAiB,CAAA;QACjB,WAAA,mDAA4B,CAAA;QAC5B,YAAA,yBAAe,CAAA;QACf,YAAA,iDAAkC,CAAA;OAdxB,uBAAuB,CAwBnC;IAxBY,0DAAuB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n//\nimport { IUserDataSyncService, IUserDataSyncLogService, IUserDataSyncResourceEnablementService, IUserDataSyncStoreService, IUserDataSyncStoreManagementService, IUserDataAutoSyncEnablementService } from 'vs/platform/userDataSync/common/userDataSync';\nimport { Event } from 'vs/base/common/event';\nimport { INativeHostService } from 'vs/platform/native/electron-sandbox/native';\nimport { UserDataAutoSyncService as BaseUserDataAutoSyncService } from 'vs/platform/userDataSync/common/userDataAutoSyncService';\nimport { IUserDataSyncAccountService } from 'vs/platform/userDataSync/common/userDataSyncAccount';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { IUserDataSyncMachinesService } from 'vs/platform/userDataSync/common/userDataSyncMachines';\nimport { IProductService } from 'vs/platform/product/common/productService';\n\nexport class UserDataAutoSyncService extends BaseUserDataAutoSyncService {\n\n\tconstructor(\n\t\t@IProductService productService: IProductService,\n\t\t@IUserDataSyncStoreManagementService userDataSyncStoreManagementService: IUserDataSyncStoreManagementService,\n\t\t@IUserDataSyncStoreService userDataSyncStoreService: IUserDataSyncStoreService,\n\t\t@IUserDataSyncResourceEnablementService userDataSyncResourceEnablementService: IUserDataSyncResourceEnablementService,\n\t\t@IUserDataSyncService userDataSyncService: IUserDataSyncService,\n\t\t@INativeHostService nativeHostService: INativeHostService,\n\t\t@IUserDataSyncLogService logService: IUserDataSyncLogService,\n\t\t@IUserDataSyncAccountService authTokenService: IUserDataSyncAccountService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IUserDataSyncMachinesService userDataSyncMachinesService: IUserDataSyncMachinesService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IUserDataAutoSyncEnablementService userDataAutoSyncEnablementService: IUserDataAutoSyncEnablementService,\n\t) {\n\t\tsuper(productService, userDataSyncStoreManagementService, userDataSyncStoreService, userDataSyncResourceEnablementService, userDataSyncService, logService, authTokenService, telemetryService, userDataSyncMachinesService, storageService, userDataAutoSyncEnablementService);\n\n\t\tthis._register(Event.debounce<string, string[]>(Event.any<string>(\n\t\t\tEvent.map(nativeHostService.onDidFocusWindow, () => 'windowFocus'),\n\t\t\tEvent.map(nativeHostService.onDidOpenWindow, () => 'windowOpen'),\n\t\t), (last, source) => last ? [...last, source] : [source], 1000)(sources => this.triggerSync(sources, true, false)));\n\t}\n\n}\n"]}