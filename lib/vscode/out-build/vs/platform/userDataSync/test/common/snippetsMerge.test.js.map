{"version":3,"file":"snippetsMerge.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/userDataSync/test/common/snippetsMerge.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAKhG,MAAM,UAAU,GAAG;;;;;;;;;;;;;;;;EAgBjB,CAAC;IAEH,MAAM,UAAU,GAAG;;;;;;;;;;;;;;;;EAgBjB,CAAC;IAEH,MAAM,YAAY,GAAG;;;;;;;;;;;;;;;;;;;;;;;EAuBnB,CAAC;IAEH,MAAM,YAAY,GAAG;;;;;;;;;;;;;;;;;;;;;;;EAuBnB,CAAC;IAEH,MAAM,QAAQ,GAAG;;;;;;;;;;;;;;EAcf,CAAC;IAEH,KAAK,CAAC,eAAe,EAAE,GAAG,EAAE;QAE3B,IAAI,CAAC,uDAAuD,EAAE,KAAK,IAAI,EAAE;YACxE,MAAM,KAAK,GAAG,EAAE,WAAW,EAAE,YAAY,EAAE,CAAC;YAC5C,MAAM,MAAM,GAAG,EAAE,WAAW,EAAE,YAAY,EAAE,CAAC;YAE7C,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;YAE1C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YAC/C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAC7C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YAChD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAClD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,4DAA4D,EAAE,KAAK,IAAI,EAAE;YAC7E,MAAM,KAAK,GAAG,EAAE,WAAW,EAAE,YAAY,EAAE,iBAAiB,EAAE,UAAU,EAAE,CAAC;YAC3E,MAAM,MAAM,GAAG,EAAE,WAAW,EAAE,YAAY,EAAE,iBAAiB,EAAE,UAAU,EAAE,CAAC;YAE5E,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;YAE1C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YAC/C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAC7C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YAChD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAClD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,+EAA+E,EAAE,KAAK,IAAI,EAAE;YAChG,MAAM,KAAK,GAAG,EAAE,iBAAiB,EAAE,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,CAAC;YAC3E,MAAM,MAAM,GAAG,EAAE,WAAW,EAAE,YAAY,EAAE,iBAAiB,EAAE,UAAU,EAAE,CAAC;YAE5E,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;YAE1C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YAC/C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAC7C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YAChD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAClD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,kEAAkE,EAAE,KAAK,IAAI,EAAE;YACnF,MAAM,KAAK,GAAG,EAAE,WAAW,EAAE,YAAY,EAAE,iBAAiB,EAAE,UAAU,EAAE,CAAC;YAC3E,MAAM,MAAM,GAAG,EAAE,WAAW,EAAE,YAAY,EAAE,iBAAiB,EAAE,UAAU,EAAE,CAAC;YAC5E,MAAM,IAAI,GAAG,EAAE,WAAW,EAAE,YAAY,EAAE,iBAAiB,EAAE,UAAU,EAAE,CAAC;YAE1E,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;YAE1C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YAC/C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAC7C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YAChD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAClD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;YAC5D,MAAM,KAAK,GAAG,EAAE,WAAW,EAAE,YAAY,EAAE,CAAC;YAC5C,MAAM,MAAM,GAAG,EAAE,WAAW,EAAE,YAAY,EAAE,iBAAiB,EAAE,UAAU,EAAE,CAAC;YAE5E,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;YAE1C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,iBAAiB,EAAE,UAAU,EAAE,CAAC,CAAC;YAC9E,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAC7C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YAChD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAClD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,qDAAqD,EAAE,KAAK,IAAI,EAAE;YACtE,MAAM,KAAK,GAAG,EAAE,CAAC;YACjB,MAAM,MAAM,GAAG,EAAE,WAAW,EAAE,YAAY,EAAE,iBAAiB,EAAE,UAAU,EAAE,CAAC;YAE5E,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;YAE1C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;YACnD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAC7C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YAChD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAClD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,6EAA6E,EAAE,KAAK,IAAI,EAAE;YAC9F,MAAM,KAAK,GAAG,EAAE,WAAW,EAAE,YAAY,EAAE,CAAC;YAC5C,MAAM,MAAM,GAAG,EAAE,WAAW,EAAE,YAAY,EAAE,iBAAiB,EAAE,UAAU,EAAE,CAAC;YAE5E,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;YAE3C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,iBAAiB,EAAE,UAAU,EAAE,CAAC,CAAC;YAC9E,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAC7C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YAChD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAClD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,gFAAgF,EAAE,KAAK,IAAI,EAAE;YACjG,MAAM,KAAK,GAAG,EAAE,WAAW,EAAE,YAAY,EAAE,iBAAiB,EAAE,UAAU,EAAE,CAAC;YAC3E,MAAM,MAAM,GAAG,EAAE,WAAW,EAAE,YAAY,EAAE,CAAC;YAE7C,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;YAE3C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YAC/C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,iBAAiB,CAAC,CAAC,CAAC;YAClE,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAC7C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YAChD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAClD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,wEAAwE,EAAE,KAAK,IAAI,EAAE;YACzF,MAAM,KAAK,GAAG,EAAE,WAAW,EAAE,YAAY,EAAE,iBAAiB,EAAE,UAAU,EAAE,CAAC;YAC3E,MAAM,MAAM,GAAG,EAAE,CAAC;YAElB,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;YAE3C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YAC/C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,WAAW,EAAE,iBAAiB,CAAC,CAAC,CAAC;YAC/E,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAC7C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YAChD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAClD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,8EAA8E,EAAE,KAAK,IAAI,EAAE;YAC/F,MAAM,KAAK,GAAG,EAAE,WAAW,EAAE,YAAY,EAAE,CAAC;YAC5C,MAAM,MAAM,GAAG,EAAE,WAAW,EAAE,YAAY,EAAE,CAAC;YAE7C,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;YAE3C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YAC/C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,WAAW,EAAE,YAAY,EAAE,CAAC,CAAC;YAC5E,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAC7C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YAChD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAClD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,uFAAuF,EAAE,KAAK,IAAI,EAAE;YACxG,MAAM,KAAK,GAAG,EAAE,WAAW,EAAE,YAAY,EAAE,iBAAiB,EAAE,UAAU,EAAE,CAAC;YAC3E,MAAM,MAAM,GAAG,EAAE,WAAW,EAAE,YAAY,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC;YAEjE,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;YAE3C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC,CAAC;YACnE,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,WAAW,EAAE,YAAY,EAAE,CAAC,CAAC;YAC5E,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,iBAAiB,CAAC,CAAC,CAAC;YAClE,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAC7C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YAChD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAClD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;YAC9D,MAAM,KAAK,GAAG,EAAE,WAAW,EAAE,YAAY,EAAE,iBAAiB,EAAE,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC;YAC/F,MAAM,MAAM,GAAG,EAAE,WAAW,EAAE,YAAY,EAAE,iBAAiB,EAAE,UAAU,EAAE,CAAC;YAE5E,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;YAE1C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YAC/C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAC7C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC,CAAC;YACpE,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAClD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,wFAAwF,EAAE,KAAK,IAAI,EAAE;YACzG,MAAM,KAAK,GAAG,EAAE,WAAW,EAAE,YAAY,EAAE,iBAAiB,EAAE,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC;YAC/F,MAAM,MAAM,GAAG,EAAE,iBAAiB,EAAE,UAAU,EAAE,CAAC;YAEjD,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;YAE5C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YAC/C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAC7C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,WAAW,EAAE,YAAY,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC,CAAC;YAC/F,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAClD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,gFAAgF,EAAE,KAAK,IAAI,EAAE;YACjG,MAAM,KAAK,GAAG,EAAE,WAAW,EAAE,YAAY,EAAE,CAAC;YAC5C,MAAM,MAAM,GAAG,EAAE,WAAW,EAAE,YAAY,EAAE,iBAAiB,EAAE,UAAU,EAAE,CAAC;YAE5E,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;YAE5C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YAC/C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAC7C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YAChD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAClD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,iBAAiB,CAAC,CAAC,CAAC;QACpE,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,8EAA8E,EAAE,KAAK,IAAI,EAAE;YAC/F,MAAM,KAAK,GAAG,EAAE,WAAW,EAAE,YAAY,EAAE,iBAAiB,EAAE,UAAU,EAAE,CAAC;YAC3E,MAAM,MAAM,GAAG,EAAE,WAAW,EAAE,YAAY,EAAE,iBAAiB,EAAE,UAAU,EAAE,CAAC;YAE5E,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;YAE5C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YAC/C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAC7C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YAChD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,WAAW,EAAE,YAAY,EAAE,CAAC,CAAC;YAC7E,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,uFAAuF,EAAE,KAAK,IAAI,EAAE;YACxG,MAAM,KAAK,GAAG,EAAE,WAAW,EAAE,YAAY,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC;YAChE,MAAM,MAAM,GAAG,EAAE,WAAW,EAAE,YAAY,EAAE,iBAAiB,EAAE,UAAU,EAAE,CAAC;YAE5E,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;YAE5C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YAC/C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAC7C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC,CAAC;YACpE,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,WAAW,EAAE,YAAY,EAAE,CAAC,CAAC;YAC7E,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,iBAAiB,CAAC,CAAC,CAAC;QACpE,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,gEAAgE,EAAE,KAAK,IAAI,EAAE;YACjF,MAAM,KAAK,GAAG,EAAE,WAAW,EAAE,YAAY,EAAE,CAAC;YAC5C,MAAM,MAAM,GAAG,EAAE,WAAW,EAAE,YAAY,EAAE,CAAC;YAE7C,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;YAE1C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YAC/C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC;YACxD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YAChD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAClD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,mGAAmG,EAAE,KAAK,IAAI,EAAE;YACpH,MAAM,IAAI,GAAG,EAAE,WAAW,EAAE,YAAY,EAAE,CAAC;YAC3C,MAAM,KAAK,GAAG,EAAE,WAAW,EAAE,YAAY,EAAE,CAAC;YAC5C,MAAM,MAAM,GAAG,EAAE,iBAAiB,EAAE,UAAU,EAAE,CAAC;YAEjD,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;YAE1C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,iBAAiB,EAAE,UAAU,EAAE,CAAC,CAAC;YAC9E,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC;YACxD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YAChD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAClD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;YAC7D,MAAM,IAAI,GAAG,EAAE,WAAW,EAAE,YAAY,EAAE,CAAC;YAC3C,MAAM,KAAK,GAAG,EAAE,CAAC;YACjB,MAAM,MAAM,GAAG,EAAE,WAAW,EAAE,YAAY,EAAE,CAAC;YAE7C,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;YAE1C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,WAAW,EAAE,YAAY,EAAE,CAAC,CAAC;YAC1E,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAC7C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YAChD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAClD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,iEAAiE,EAAE,KAAK,IAAI,EAAE;YAClF,MAAM,IAAI,GAAG,EAAE,WAAW,EAAE,YAAY,EAAE,iBAAiB,EAAE,UAAU,EAAE,CAAC;YAC1E,MAAM,KAAK,GAAG,EAAE,WAAW,EAAE,YAAY,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC;YAChE,MAAM,MAAM,GAAG,EAAE,iBAAiB,EAAE,UAAU,EAAE,CAAC;YAEjD,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;YAE1C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,iBAAiB,EAAE,UAAU,EAAE,CAAC,CAAC;YAC9E,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC;YACxD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC,CAAC;YACpE,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAClD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,0EAA0E,EAAE,KAAK,IAAI,EAAE;YAC3F,MAAM,IAAI,GAAG,EAAE,WAAW,EAAE,YAAY,EAAE,iBAAiB,EAAE,UAAU,EAAE,CAAC;YAC1E,MAAM,KAAK,GAAG,EAAE,WAAW,EAAE,YAAY,EAAE,iBAAiB,EAAE,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC;YAC/F,MAAM,MAAM,GAAG,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC;YAEtC,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;YAE1C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YAC/C,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,WAAW,EAAE,iBAAiB,CAAC,CAAC,CAAC;YAC3E,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YAChD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAClD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;IAEJ,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { merge } from 'vs/platform/userDataSync/common/snippetsMerge';\n\nconst tsSnippet1 = `{\n\n\t// Place your snippets for TypeScript here. Each snippet is defined under a snippet name and has a prefix, body and\n\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\n\t// $1, $2 for tab stops, $0 for the final cursor position, Placeholders with the\n\t// same ids are connected.\n\t\"Print to console\": {\n\t// Example:\n\t\"prefix\": \"log\",\n\t\t\"body\": [\n\t\t\t\"console.log('$1');\",\n\t\t\t\"$2\"\n\t\t],\n\t\t\t\"description\": \"Log output to console\",\n\t}\n\n}`;\n\nconst tsSnippet2 = `{\n\n\t// Place your snippets for TypeScript here. Each snippet is defined under a snippet name and has a prefix, body and\n\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\n\t// $1, $2 for tab stops, $0 for the final cursor position, Placeholders with the\n\t// same ids are connected.\n\t\"Print to console\": {\n\t// Example:\n\t\"prefix\": \"log\",\n\t\t\"body\": [\n\t\t\t\"console.log('$1');\",\n\t\t\t\"$2\"\n\t\t],\n\t\t\t\"description\": \"Log output to console always\",\n\t}\n\n}`;\n\nconst htmlSnippet1 = `{\n/*\n\t// Place your snippets for HTML here. Each snippet is defined under a snippet name and has a prefix, body and\n\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted.\n\t// Example:\n\t\"Print to console\": {\n\t\"prefix\": \"log\",\n\t\t\"body\": [\n\t\t\t\"console.log('$1');\",\n\t\t\t\"$2\"\n\t\t],\n\t\t\t\"description\": \"Log output to console\"\n\t}\n*/\n\"Div\": {\n\t\"prefix\": \"div\",\n\t\t\"body\": [\n\t\t\t\"<div>\",\n\t\t\t\"\",\n\t\t\t\"</div>\"\n\t\t],\n\t\t\t\"description\": \"New div\"\n\t}\n}`;\n\nconst htmlSnippet2 = `{\n/*\n\t// Place your snippets for HTML here. Each snippet is defined under a snippet name and has a prefix, body and\n\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted.\n\t// Example:\n\t\"Print to console\": {\n\t\"prefix\": \"log\",\n\t\t\"body\": [\n\t\t\t\"console.log('$1');\",\n\t\t\t\"$2\"\n\t\t],\n\t\t\t\"description\": \"Log output to console\"\n\t}\n*/\n\"Div\": {\n\t\"prefix\": \"div\",\n\t\t\"body\": [\n\t\t\t\"<div>\",\n\t\t\t\"\",\n\t\t\t\"</div>\"\n\t\t],\n\t\t\t\"description\": \"New div changed\"\n\t}\n}`;\n\nconst cSnippet = `{\n\t// Place your snippets for c here. Each snippet is defined under a snippet name and has a prefix, body and\n\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\n\t// $1, $2 for tab stops, $0 for the final cursor position.Placeholders with the\n\t// same ids are connected.\n\t// Example:\n\t\"Print to console\": {\n\t\"prefix\": \"log\",\n\t\t\"body\": [\n\t\t\t\"console.log('$1');\",\n\t\t\t\"$2\"\n\t\t],\n\t\t\t\"description\": \"Log output to console\"\n\t}\n}`;\n\nsuite('SnippetsMerge', () => {\n\n\ttest('merge when local and remote are same with one snippet', async () => {\n\t\tconst local = { 'html.json': htmlSnippet1 };\n\t\tconst remote = { 'html.json': htmlSnippet1 };\n\n\t\tconst actual = merge(local, remote, null);\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.conflicts, []);\n\t\tassert.deepStrictEqual(actual.remote.added, {});\n\t\tassert.deepStrictEqual(actual.remote.updated, {});\n\t\tassert.deepStrictEqual(actual.remote.removed, []);\n\t});\n\n\ttest('merge when local and remote are same with multiple entries', async () => {\n\t\tconst local = { 'html.json': htmlSnippet1, 'typescript.json': tsSnippet1 };\n\t\tconst remote = { 'html.json': htmlSnippet1, 'typescript.json': tsSnippet1 };\n\n\t\tconst actual = merge(local, remote, null);\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.conflicts, []);\n\t\tassert.deepStrictEqual(actual.remote.added, {});\n\t\tassert.deepStrictEqual(actual.remote.updated, {});\n\t\tassert.deepStrictEqual(actual.remote.removed, []);\n\t});\n\n\ttest('merge when local and remote are same with multiple entries in different order', async () => {\n\t\tconst local = { 'typescript.json': tsSnippet1, 'html.json': htmlSnippet1 };\n\t\tconst remote = { 'html.json': htmlSnippet1, 'typescript.json': tsSnippet1 };\n\n\t\tconst actual = merge(local, remote, null);\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.conflicts, []);\n\t\tassert.deepStrictEqual(actual.remote.added, {});\n\t\tassert.deepStrictEqual(actual.remote.updated, {});\n\t\tassert.deepStrictEqual(actual.remote.removed, []);\n\t});\n\n\ttest('merge when local and remote are same with different base content', async () => {\n\t\tconst local = { 'html.json': htmlSnippet1, 'typescript.json': tsSnippet1 };\n\t\tconst remote = { 'html.json': htmlSnippet1, 'typescript.json': tsSnippet1 };\n\t\tconst base = { 'html.json': htmlSnippet2, 'typescript.json': tsSnippet2 };\n\n\t\tconst actual = merge(local, remote, base);\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.conflicts, []);\n\t\tassert.deepStrictEqual(actual.remote.added, {});\n\t\tassert.deepStrictEqual(actual.remote.updated, {});\n\t\tassert.deepStrictEqual(actual.remote.removed, []);\n\t});\n\n\ttest('merge when a new entry is added to remote', async () => {\n\t\tconst local = { 'html.json': htmlSnippet1 };\n\t\tconst remote = { 'html.json': htmlSnippet1, 'typescript.json': tsSnippet1 };\n\n\t\tconst actual = merge(local, remote, null);\n\n\t\tassert.deepStrictEqual(actual.local.added, { 'typescript.json': tsSnippet1 });\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.conflicts, []);\n\t\tassert.deepStrictEqual(actual.remote.added, {});\n\t\tassert.deepStrictEqual(actual.remote.updated, {});\n\t\tassert.deepStrictEqual(actual.remote.removed, []);\n\t});\n\n\ttest('merge when multiple new entries are added to remote', async () => {\n\t\tconst local = {};\n\t\tconst remote = { 'html.json': htmlSnippet1, 'typescript.json': tsSnippet1 };\n\n\t\tconst actual = merge(local, remote, null);\n\n\t\tassert.deepStrictEqual(actual.local.added, remote);\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.conflicts, []);\n\t\tassert.deepStrictEqual(actual.remote.added, {});\n\t\tassert.deepStrictEqual(actual.remote.updated, {});\n\t\tassert.deepStrictEqual(actual.remote.removed, []);\n\t});\n\n\ttest('merge when new entry is added to remote from base and local has not changed', async () => {\n\t\tconst local = { 'html.json': htmlSnippet1 };\n\t\tconst remote = { 'html.json': htmlSnippet1, 'typescript.json': tsSnippet1 };\n\n\t\tconst actual = merge(local, remote, local);\n\n\t\tassert.deepStrictEqual(actual.local.added, { 'typescript.json': tsSnippet1 });\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.conflicts, []);\n\t\tassert.deepStrictEqual(actual.remote.added, {});\n\t\tassert.deepStrictEqual(actual.remote.updated, {});\n\t\tassert.deepStrictEqual(actual.remote.removed, []);\n\t});\n\n\ttest('merge when an entry is removed from remote from base and local has not changed', async () => {\n\t\tconst local = { 'html.json': htmlSnippet1, 'typescript.json': tsSnippet1 };\n\t\tconst remote = { 'html.json': htmlSnippet1 };\n\n\t\tconst actual = merge(local, remote, local);\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, ['typescript.json']);\n\t\tassert.deepStrictEqual(actual.conflicts, []);\n\t\tassert.deepStrictEqual(actual.remote.added, {});\n\t\tassert.deepStrictEqual(actual.remote.updated, {});\n\t\tassert.deepStrictEqual(actual.remote.removed, []);\n\t});\n\n\ttest('merge when all entries are removed from base and local has not changed', async () => {\n\t\tconst local = { 'html.json': htmlSnippet1, 'typescript.json': tsSnippet1 };\n\t\tconst remote = {};\n\n\t\tconst actual = merge(local, remote, local);\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, ['html.json', 'typescript.json']);\n\t\tassert.deepStrictEqual(actual.conflicts, []);\n\t\tassert.deepStrictEqual(actual.remote.added, {});\n\t\tassert.deepStrictEqual(actual.remote.updated, {});\n\t\tassert.deepStrictEqual(actual.remote.removed, []);\n\t});\n\n\ttest('merge when an entry is updated in remote from base and local has not changed', async () => {\n\t\tconst local = { 'html.json': htmlSnippet1 };\n\t\tconst remote = { 'html.json': htmlSnippet2 };\n\n\t\tconst actual = merge(local, remote, local);\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, { 'html.json': htmlSnippet2 });\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.conflicts, []);\n\t\tassert.deepStrictEqual(actual.remote.added, {});\n\t\tassert.deepStrictEqual(actual.remote.updated, {});\n\t\tassert.deepStrictEqual(actual.remote.removed, []);\n\t});\n\n\ttest('merge when remote has moved forwarded with multiple changes and local stays with base', async () => {\n\t\tconst local = { 'html.json': htmlSnippet1, 'typescript.json': tsSnippet1 };\n\t\tconst remote = { 'html.json': htmlSnippet2, 'c.json': cSnippet };\n\n\t\tconst actual = merge(local, remote, local);\n\n\t\tassert.deepStrictEqual(actual.local.added, { 'c.json': cSnippet });\n\t\tassert.deepStrictEqual(actual.local.updated, { 'html.json': htmlSnippet2 });\n\t\tassert.deepStrictEqual(actual.local.removed, ['typescript.json']);\n\t\tassert.deepStrictEqual(actual.conflicts, []);\n\t\tassert.deepStrictEqual(actual.remote.added, {});\n\t\tassert.deepStrictEqual(actual.remote.updated, {});\n\t\tassert.deepStrictEqual(actual.remote.removed, []);\n\t});\n\n\ttest('merge when a new entries are added to local', async () => {\n\t\tconst local = { 'html.json': htmlSnippet1, 'typescript.json': tsSnippet1, 'c.json': cSnippet };\n\t\tconst remote = { 'html.json': htmlSnippet1, 'typescript.json': tsSnippet1 };\n\n\t\tconst actual = merge(local, remote, null);\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.conflicts, []);\n\t\tassert.deepStrictEqual(actual.remote.added, { 'c.json': cSnippet });\n\t\tassert.deepStrictEqual(actual.remote.updated, {});\n\t\tassert.deepStrictEqual(actual.remote.removed, []);\n\t});\n\n\ttest('merge when multiple new entries are added to local from base and remote is not changed', async () => {\n\t\tconst local = { 'html.json': htmlSnippet1, 'typescript.json': tsSnippet1, 'c.json': cSnippet };\n\t\tconst remote = { 'typescript.json': tsSnippet1 };\n\n\t\tconst actual = merge(local, remote, remote);\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.conflicts, []);\n\t\tassert.deepStrictEqual(actual.remote.added, { 'html.json': htmlSnippet1, 'c.json': cSnippet });\n\t\tassert.deepStrictEqual(actual.remote.updated, {});\n\t\tassert.deepStrictEqual(actual.remote.removed, []);\n\t});\n\n\ttest('merge when an entry is removed from local from base and remote has not changed', async () => {\n\t\tconst local = { 'html.json': htmlSnippet1 };\n\t\tconst remote = { 'html.json': htmlSnippet1, 'typescript.json': tsSnippet1 };\n\n\t\tconst actual = merge(local, remote, remote);\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.conflicts, []);\n\t\tassert.deepStrictEqual(actual.remote.added, {});\n\t\tassert.deepStrictEqual(actual.remote.updated, {});\n\t\tassert.deepStrictEqual(actual.remote.removed, ['typescript.json']);\n\t});\n\n\ttest('merge when an entry is updated in local from base and remote has not changed', async () => {\n\t\tconst local = { 'html.json': htmlSnippet2, 'typescript.json': tsSnippet1 };\n\t\tconst remote = { 'html.json': htmlSnippet1, 'typescript.json': tsSnippet1 };\n\n\t\tconst actual = merge(local, remote, remote);\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.conflicts, []);\n\t\tassert.deepStrictEqual(actual.remote.added, {});\n\t\tassert.deepStrictEqual(actual.remote.updated, { 'html.json': htmlSnippet2 });\n\t\tassert.deepStrictEqual(actual.remote.removed, []);\n\t});\n\n\ttest('merge when local has moved forwarded with multiple changes and remote stays with base', async () => {\n\t\tconst local = { 'html.json': htmlSnippet2, 'c.json': cSnippet };\n\t\tconst remote = { 'html.json': htmlSnippet1, 'typescript.json': tsSnippet1 };\n\n\t\tconst actual = merge(local, remote, remote);\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.conflicts, []);\n\t\tassert.deepStrictEqual(actual.remote.added, { 'c.json': cSnippet });\n\t\tassert.deepStrictEqual(actual.remote.updated, { 'html.json': htmlSnippet2 });\n\t\tassert.deepStrictEqual(actual.remote.removed, ['typescript.json']);\n\t});\n\n\ttest('merge when local and remote with one entry but different value', async () => {\n\t\tconst local = { 'html.json': htmlSnippet1 };\n\t\tconst remote = { 'html.json': htmlSnippet2 };\n\n\t\tconst actual = merge(local, remote, null);\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.conflicts, ['html.json']);\n\t\tassert.deepStrictEqual(actual.remote.added, {});\n\t\tassert.deepStrictEqual(actual.remote.updated, {});\n\t\tassert.deepStrictEqual(actual.remote.removed, []);\n\t});\n\n\ttest('merge when the entry is removed in remote but updated in local and a new entry is added in remote', async () => {\n\t\tconst base = { 'html.json': htmlSnippet1 };\n\t\tconst local = { 'html.json': htmlSnippet2 };\n\t\tconst remote = { 'typescript.json': tsSnippet1 };\n\n\t\tconst actual = merge(local, remote, base);\n\n\t\tassert.deepStrictEqual(actual.local.added, { 'typescript.json': tsSnippet1 });\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.conflicts, ['html.json']);\n\t\tassert.deepStrictEqual(actual.remote.added, {});\n\t\tassert.deepStrictEqual(actual.remote.updated, {});\n\t\tassert.deepStrictEqual(actual.remote.removed, []);\n\t});\n\n\ttest('merge with single entry and local is empty', async () => {\n\t\tconst base = { 'html.json': htmlSnippet1 };\n\t\tconst local = {};\n\t\tconst remote = { 'html.json': htmlSnippet2 };\n\n\t\tconst actual = merge(local, remote, base);\n\n\t\tassert.deepStrictEqual(actual.local.added, { 'html.json': htmlSnippet2 });\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.conflicts, []);\n\t\tassert.deepStrictEqual(actual.remote.added, {});\n\t\tassert.deepStrictEqual(actual.remote.updated, {});\n\t\tassert.deepStrictEqual(actual.remote.removed, []);\n\t});\n\n\ttest('merge when local and remote has moved forwareded with conflicts', async () => {\n\t\tconst base = { 'html.json': htmlSnippet1, 'typescript.json': tsSnippet1 };\n\t\tconst local = { 'html.json': htmlSnippet2, 'c.json': cSnippet };\n\t\tconst remote = { 'typescript.json': tsSnippet2 };\n\n\t\tconst actual = merge(local, remote, base);\n\n\t\tassert.deepStrictEqual(actual.local.added, { 'typescript.json': tsSnippet2 });\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.conflicts, ['html.json']);\n\t\tassert.deepStrictEqual(actual.remote.added, { 'c.json': cSnippet });\n\t\tassert.deepStrictEqual(actual.remote.updated, {});\n\t\tassert.deepStrictEqual(actual.remote.removed, []);\n\t});\n\n\ttest('merge when local and remote has moved forwareded with multiple conflicts', async () => {\n\t\tconst base = { 'html.json': htmlSnippet1, 'typescript.json': tsSnippet1 };\n\t\tconst local = { 'html.json': htmlSnippet2, 'typescript.json': tsSnippet2, 'c.json': cSnippet };\n\t\tconst remote = { 'c.json': cSnippet };\n\n\t\tconst actual = merge(local, remote, base);\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.conflicts, ['html.json', 'typescript.json']);\n\t\tassert.deepStrictEqual(actual.remote.added, {});\n\t\tassert.deepStrictEqual(actual.remote.updated, {});\n\t\tassert.deepStrictEqual(actual.remote.removed, []);\n\t});\n\n});\n"]}