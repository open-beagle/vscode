{"version":3,"file":"globalStateMerge.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/userDataSync/test/common/globalStateMerge.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { merge } from 'vs/platform/userDataSync/common/globalStateMerge';\nimport { NullLogService } from 'vs/platform/log/common/log';\n\nsuite('GlobalStateMerge', () => {\n\n\ttest('merge when local and remote are same with one value and local is not synced yet', async () => {\n\t\tconst local = { 'a': { version: 1, value: 'a' } };\n\t\tconst remote = { 'a': { version: 1, value: 'a' } };\n\n\t\tconst actual = merge(local, remote, null, { machine: [], unregistered: [] }, new NullLogService());\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.remote, null);\n\t});\n\n\ttest('merge when local and remote are same with multiple entries and local is not synced yet', async () => {\n\t\tconst local = { 'a': { version: 1, value: 'a' }, 'b': { version: 1, value: 'b' } };\n\t\tconst remote = { 'a': { version: 1, value: 'a' }, 'b': { version: 1, value: 'b' } };\n\n\t\tconst actual = merge(local, remote, null, { machine: [], unregistered: [] }, new NullLogService());\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.remote, null);\n\t});\n\n\ttest('merge when local and remote are same with multiple entries in different order and local is not synced yet', async () => {\n\t\tconst local = { 'a': { version: 1, value: 'a' }, 'b': { version: 1, value: 'b' } };\n\t\tconst remote = { 'b': { version: 1, value: 'b' }, 'a': { version: 1, value: 'a' } };\n\n\t\tconst actual = merge(local, remote, null, { machine: [], unregistered: [] }, new NullLogService());\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.remote, null);\n\t});\n\n\ttest('merge when local and remote are same with different base content', async () => {\n\t\tconst local = { 'a': { version: 1, value: 'a' }, 'b': { version: 1, value: 'b' } };\n\t\tconst remote = { 'b': { version: 1, value: 'b' }, 'a': { version: 1, value: 'a' } };\n\t\tconst base = { 'b': { version: 1, value: 'a' } };\n\n\t\tconst actual = merge(local, remote, base, { machine: [], unregistered: [] }, new NullLogService());\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.remote, null);\n\t});\n\n\ttest('merge when a new entry is added to remote and local has not synced yet', async () => {\n\t\tconst local = { 'a': { version: 1, value: 'a' } };\n\t\tconst remote = { 'b': { version: 1, value: 'b' }, 'a': { version: 1, value: 'a' } };\n\n\t\tconst actual = merge(local, remote, null, { machine: [], unregistered: [] }, new NullLogService());\n\n\t\tassert.deepStrictEqual(actual.local.added, { 'b': { version: 1, value: 'b' } });\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.remote, null);\n\t});\n\n\ttest('merge when multiple new entries are added to remote and local is not synced yet', async () => {\n\t\tconst local = {};\n\t\tconst remote = { 'b': { version: 1, value: 'b' }, 'a': { version: 1, value: 'a' } };\n\n\t\tconst actual = merge(local, remote, null, { machine: [], unregistered: [] }, new NullLogService());\n\n\t\tassert.deepStrictEqual(actual.local.added, { 'b': { version: 1, value: 'b' }, 'a': { version: 1, value: 'a' } });\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.remote, null);\n\t});\n\n\ttest('merge when new entry is added to remote from base and local has not changed', async () => {\n\t\tconst local = { 'a': { version: 1, value: 'a' } };\n\t\tconst remote = { 'b': { version: 1, value: 'b' }, 'a': { version: 1, value: 'a' } };\n\n\t\tconst actual = merge(local, remote, local, { machine: [], unregistered: [] }, new NullLogService());\n\n\t\tassert.deepStrictEqual(actual.local.added, { 'b': { version: 1, value: 'b' } });\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.remote, null);\n\t});\n\n\ttest('merge when an entry is removed from remote from base and local has not changed', async () => {\n\t\tconst local = { 'b': { version: 1, value: 'b' }, 'a': { version: 1, value: 'a' } };\n\t\tconst remote = { 'a': { version: 1, value: 'a' } };\n\n\t\tconst actual = merge(local, remote, local, { machine: [], unregistered: [] }, new NullLogService());\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, ['b']);\n\t\tassert.deepStrictEqual(actual.remote, null);\n\t});\n\n\ttest('merge when all entries are removed from base and local has not changed', async () => {\n\t\tconst local = { 'b': { version: 1, value: 'b' }, 'a': { version: 1, value: 'a' } };\n\t\tconst remote = {};\n\n\t\tconst actual = merge(local, remote, local, { machine: [], unregistered: [] }, new NullLogService());\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, ['b', 'a']);\n\t\tassert.deepStrictEqual(actual.remote, null);\n\t});\n\n\ttest('merge when an entry is updated in remote from base and local has not changed', async () => {\n\t\tconst local = { 'a': { version: 1, value: 'a' } };\n\t\tconst remote = { 'a': { version: 1, value: 'b' } };\n\n\t\tconst actual = merge(local, remote, local, { machine: [], unregistered: [] }, new NullLogService());\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, { 'a': { version: 1, value: 'b' } });\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.remote, null);\n\t});\n\n\ttest('merge when remote has moved forwarded with multiple changes and local stays with base', async () => {\n\t\tconst local = { 'a': { version: 1, value: 'a' }, 'b': { version: 1, value: 'b' } };\n\t\tconst remote = { 'a': { version: 1, value: 'd' }, 'c': { version: 1, value: 'c' } };\n\n\t\tconst actual = merge(local, remote, local, { machine: [], unregistered: [] }, new NullLogService());\n\n\t\tassert.deepStrictEqual(actual.local.added, { 'c': { version: 1, value: 'c' } });\n\t\tassert.deepStrictEqual(actual.local.updated, { 'a': { version: 1, value: 'd' } });\n\t\tassert.deepStrictEqual(actual.local.removed, ['b']);\n\t\tassert.deepStrictEqual(actual.remote, null);\n\t});\n\n\ttest('merge when new entries are added to local and local is not synced yet', async () => {\n\t\tconst local = { 'a': { version: 1, value: 'a' }, 'b': { version: 1, value: 'b' } };\n\t\tconst remote = { 'a': { version: 1, value: 'a' } };\n\n\t\tconst actual = merge(local, remote, null, { machine: [], unregistered: [] }, new NullLogService());\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.remote, local);\n\t});\n\n\ttest('merge when multiple new entries are added to local from base and remote is not changed', async () => {\n\t\tconst local = { 'a': { version: 1, value: 'a' }, 'b': { version: 1, value: 'b' }, 'c': { version: 1, value: 'c' } };\n\t\tconst remote = { 'a': { version: 1, value: 'a' } };\n\n\t\tconst actual = merge(local, remote, remote, { machine: [], unregistered: [] }, new NullLogService());\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.remote, local);\n\t});\n\n\ttest('merge when an entry is removed from local from base and remote has not changed', async () => {\n\t\tconst local = { 'a': { version: 1, value: 'a' } };\n\t\tconst remote = { 'a': { version: 1, value: 'a' }, 'b': { version: 1, value: 'b' } };\n\n\t\tconst actual = merge(local, remote, remote, { machine: [], unregistered: [] }, new NullLogService());\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.remote, local);\n\t});\n\n\ttest('merge when an entry is updated in local from base and remote has not changed', async () => {\n\t\tconst local = { 'a': { version: 1, value: 'b' } };\n\t\tconst remote = { 'a': { version: 1, value: 'a' } };\n\n\t\tconst actual = merge(local, remote, remote, { machine: [], unregistered: [] }, new NullLogService());\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.remote, local);\n\t});\n\n\ttest('merge when local has moved forwarded with multiple changes and remote stays with base', async () => {\n\t\tconst local = { 'a': { version: 1, value: 'd' }, 'b': { version: 1, value: 'b' } };\n\t\tconst remote = { 'a': { version: 1, value: 'a' }, 'c': { version: 1, value: 'c' } };\n\n\t\tconst actual = merge(local, remote, remote, { machine: [], unregistered: [] }, new NullLogService());\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.remote, local);\n\t});\n\n\ttest('merge when local and remote with one entry but different value and local is not synced yet', async () => {\n\t\tconst local = { 'a': { version: 1, value: 'a' } };\n\t\tconst remote = { 'a': { version: 1, value: 'b' } };\n\n\t\tconst actual = merge(local, remote, null, { machine: [], unregistered: [] }, new NullLogService());\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, { 'a': { version: 1, value: 'b' } });\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.remote, null);\n\t});\n\n\ttest('merge when the entry is removed in remote but updated in local and a new entry is added in remote', async () => {\n\t\tconst base = { 'a': { version: 1, value: 'a' }, 'b': { version: 1, value: 'b' } };\n\t\tconst local = { 'a': { version: 1, value: 'a' }, 'b': { version: 1, value: 'd' } };\n\t\tconst remote = { 'a': { version: 1, value: 'a' }, 'c': { version: 1, value: 'c' } };\n\n\t\tconst actual = merge(local, remote, base, { machine: [], unregistered: [] }, new NullLogService());\n\n\t\tassert.deepStrictEqual(actual.local.added, { 'c': { version: 1, value: 'c' } });\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.remote, { 'a': { version: 1, value: 'a' }, 'c': { version: 1, value: 'c' }, 'b': { version: 1, value: 'd' } });\n\t});\n\n\ttest('merge with single entry and local is empty', async () => {\n\t\tconst base = { 'a': { version: 1, value: 'a' } };\n\t\tconst local = {};\n\t\tconst remote = { 'a': { version: 1, value: 'b' } };\n\n\t\tconst actual = merge(local, remote, base, { machine: [], unregistered: [] }, new NullLogService());\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.remote, local);\n\t});\n\n\ttest('merge when local and remote has moved forward with conflicts', async () => {\n\t\tconst base = { 'a': { version: 1, value: 'a' } };\n\t\tconst local = { 'a': { version: 1, value: 'd' } };\n\t\tconst remote = { 'a': { version: 1, value: 'b' } };\n\n\t\tconst actual = merge(local, remote, base, { machine: [], unregistered: [] }, new NullLogService());\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.remote, local);\n\t});\n\n\ttest('merge when a new entry is added to remote but scoped to machine locally and local is not synced yet', async () => {\n\t\tconst local = { 'a': { version: 1, value: 'a' } };\n\t\tconst remote = { 'b': { version: 1, value: 'b' }, 'a': { version: 1, value: 'a' } };\n\n\t\tconst actual = merge(local, remote, null, { machine: ['b'], unregistered: [] }, new NullLogService());\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.remote, null);\n\t});\n\n\ttest('merge when an entry is updated to remote but scoped to machine locally', async () => {\n\t\tconst local = { 'a': { version: 1, value: 'a' } };\n\t\tconst remote = { 'a': { version: 1, value: 'b' } };\n\n\t\tconst actual = merge(local, remote, local, { machine: ['a'], unregistered: [] }, new NullLogService());\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.remote, null);\n\t});\n\n\ttest('merge when a local value is removed and scoped to machine locally', async () => {\n\t\tconst base = { 'a': { version: 1, value: 'a' }, 'b': { version: 1, value: 'b' } };\n\t\tconst local = { 'a': { version: 1, value: 'a' } };\n\t\tconst remote = { 'b': { version: 1, value: 'b' }, 'a': { version: 1, value: 'a' } };\n\n\t\tconst actual = merge(local, remote, base, { machine: ['b'], unregistered: [] }, new NullLogService());\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.remote, local);\n\t});\n\n\ttest('merge when local moved forwared by changing a key to machine scope', async () => {\n\t\tconst base = { 'a': { version: 1, value: 'a' }, 'b': { version: 1, value: 'b' } };\n\t\tconst remote = { 'a': { version: 1, value: 'a' }, 'b': { version: 1, value: 'b' } };\n\t\tconst local = { 'a': { version: 1, value: 'a' } };\n\n\t\tconst actual = merge(local, remote, base, { machine: ['b'], unregistered: [] }, new NullLogService());\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.remote, local);\n\t});\n\n\ttest('merge should not remove remote keys if not registered', async () => {\n\t\tconst local = { 'a': { version: 1, value: 'a' }, 'b': { version: 1, value: 'b' } };\n\t\tconst base = { 'a': { version: 1, value: 'a' }, 'c': { version: 1, value: 'c' } };\n\t\tconst remote = { 'a': { version: 1, value: 'a' }, 'c': { version: 1, value: 'c' } };\n\n\t\tconst actual = merge(local, remote, base, { machine: [], unregistered: ['c'] }, new NullLogService());\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.remote, { 'a': { version: 1, value: 'a' }, 'b': { version: 1, value: 'b' }, 'c': { version: 1, value: 'c' } });\n\t});\n\n});\n"]}