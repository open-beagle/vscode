{"version":3,"file":"settingsMerge.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/userDataSync/test/common/settingsMerge.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAMhG,MAAM,iBAAiB,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,YAAY,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC;IAEzE,KAAK,CAAC,uBAAuB,EAAE,GAAG,EAAE;QAEnC,IAAI,CAAC,qDAAqD,EAAE,KAAK,IAAI,EAAE;YACtE,MAAM,YAAY,GAAG,SAAS,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;YAC3C,MAAM,aAAa,GAAG,SAAS,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;YAC5C,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,YAAY,EAAE,aAAa,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAC;YACnF,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;YAC9C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;YAC/C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACvD,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,4DAA4D,EAAE,KAAK,IAAI,EAAE;YAC7E,MAAM,YAAY,GAAG,SAAS,CAAC;gBAC9B,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,aAAa,GAAG,SAAS,CAAC;gBAC/B,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,YAAY,EAAE,aAAa,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAC;YACnF,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;YAC9C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;YAC/C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACvD,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,+EAA+E,EAAE,KAAK,IAAI,EAAE;YAChG,MAAM,YAAY,GAAG,SAAS,CAAC;gBAC9B,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,aAAa,GAAG,SAAS,CAAC;gBAC/B,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,YAAY,EAAE,aAAa,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAC;YACnF,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;YACtD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC;YACxD,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;YAC/B,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,kEAAkE,EAAE,KAAK,IAAI,EAAE;YACnF,MAAM,YAAY,GAAG,SAAS,CAAC;gBAC9B,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,WAAW,GAAG,SAAS,CAAC;gBAC7B,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,aAAa,GAAG,SAAS,CAAC;gBAC/B,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,YAAY,EAAE,aAAa,EAAE,WAAW,EAAE,EAAE,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAC;YAC1F,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;YACtD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC;YACxD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACvD,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;YAC5D,MAAM,YAAY,GAAG,SAAS,CAAC;gBAC9B,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,aAAa,GAAG,SAAS,CAAC;gBAC/B,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,YAAY,EAAE,aAAa,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAC;YACnF,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC;YACvD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;YAC/C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACvD,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,qDAAqD,EAAE,KAAK,IAAI,EAAE;YACtE,MAAM,YAAY,GAAG,SAAS,CAAC;gBAC9B,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,aAAa,GAAG,SAAS,CAAC;gBAC/B,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,YAAY,EAAE,aAAa,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAC;YACnF,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC;YACvD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;YAC/C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACvD,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,yFAAyF,EAAE,KAAK,IAAI,EAAE;YAC1G,MAAM,YAAY,GAAG,SAAS,CAAC;gBAC9B,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,aAAa,GAAG,SAAS,CAAC;gBAC/B,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,YAAY,EAAE,aAAa,EAAE,YAAY,EAAE,EAAE,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAC;YAC3F,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC;YACvD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;YAC/C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACvD,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,gFAAgF,EAAE,KAAK,IAAI,EAAE;YACjG,MAAM,YAAY,GAAG,SAAS,CAAC;gBAC9B,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,aAAa,GAAG,SAAS,CAAC;gBAC/B,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,YAAY,EAAE,aAAa,EAAE,YAAY,EAAE,EAAE,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAC;YAC3F,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC;YACvD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;YAC/C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACvD,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,wEAAwE,EAAE,KAAK,IAAI,EAAE;YACzF,MAAM,YAAY,GAAG,SAAS,CAAC;gBAC9B,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,aAAa,GAAG,SAAS,CAAC,EAAE,CAAC,CAAC;YACpC,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,YAAY,EAAE,aAAa,EAAE,YAAY,EAAE,EAAE,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAC;YAC3F,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC;YACvD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;YAC/C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACvD,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,8EAA8E,EAAE,KAAK,IAAI,EAAE;YAC/F,MAAM,YAAY,GAAG,SAAS,CAAC;gBAC9B,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,aAAa,GAAG,SAAS,CAAC;gBAC/B,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,YAAY,EAAE,aAAa,EAAE,YAAY,EAAE,EAAE,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAC;YAC3F,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC;YACvD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;YAC/C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACvD,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,wFAAwF,EAAE,KAAK,IAAI,EAAE;YACzG,MAAM,YAAY,GAAG,SAAS,CAAC;gBAC9B,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,aAAa,GAAG,SAAS,CAAC;gBAC/B,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,YAAY,EAAE,aAAa,EAAE,YAAY,EAAE,EAAE,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAC;YAC3F,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC;YACvD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;YAC/C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACvD,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,qFAAqF,EAAE,KAAK,IAAI,EAAE;YACtG,MAAM,YAAY,GAAG,SAAS,CAAC;gBAC9B,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,aAAa,GAAG,SAAS,CAAC;gBAC/B,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,YAAY,EAAE,aAAa,EAAE,YAAY,EAAE,EAAE,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAC;YAC3F,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC;YACvD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;YAC/C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACvD,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,uFAAuF,EAAE,KAAK,IAAI,EAAE;YACxG,MAAM,YAAY,GAAG;;;;;;EAMrB,CAAC;YACD,MAAM,aAAa,GAAG,SAAS,CAAA;;;;;;EAM/B,CAAC;YACD,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,YAAY,EAAE,aAAa,EAAE,YAAY,EAAE,EAAE,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAC;YAC3F,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC;YACvD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;YAC/C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACvD,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,iGAAiG,EAAE,KAAK,IAAI,EAAE;YAClH,MAAM,YAAY,GAAG;;;;;;EAMrB,CAAC;YACD,MAAM,aAAa,GAAG,SAAS,CAAA;;;;;;EAM/B,CAAC;YACD,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,YAAY,EAAE,aAAa,EAAE,YAAY,EAAE,EAAE,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAC;YAC3F,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC;YACvD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;YAC/C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACvD,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;YAC9D,MAAM,YAAY,GAAG,SAAS,CAAC;gBAC9B,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,aAAa,GAAG,SAAS,CAAC;gBAC/B,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,YAAY,EAAE,aAAa,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAC;YACnF,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;YAC9C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,aAAa,EAAE,YAAY,CAAC,CAAC;YACvD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACvD,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,wFAAwF,EAAE,KAAK,IAAI,EAAE;YACzG,MAAM,YAAY,GAAG,SAAS,CAAC;gBAC9B,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,aAAa,GAAG,SAAS,CAAC;gBAC/B,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,YAAY,EAAE,aAAa,EAAE,aAAa,EAAE,EAAE,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAC;YAC5F,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;YAC9C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,aAAa,EAAE,YAAY,CAAC,CAAC;YACvD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACvD,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,gFAAgF,EAAE,KAAK,IAAI,EAAE;YACjG,MAAM,YAAY,GAAG,SAAS,CAAC;gBAC9B,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,aAAa,GAAG,SAAS,CAAC;gBAC/B,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,YAAY,EAAE,aAAa,EAAE,aAAa,EAAE,EAAE,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAC;YAC5F,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;YAC9C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,aAAa,EAAE,YAAY,CAAC,CAAC;YACvD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACvD,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,8EAA8E,EAAE,KAAK,IAAI,EAAE;YAC/F,MAAM,YAAY,GAAG,SAAS,CAAC;gBAC9B,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,aAAa,GAAG,SAAS,CAAC;gBAC/B,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,YAAY,EAAE,aAAa,EAAE,aAAa,EAAE,EAAE,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAC;YAC5F,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;YAC9C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,aAAa,EAAE,YAAY,CAAC,CAAC;YACvD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACvD,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,uFAAuF,EAAE,KAAK,IAAI,EAAE;YACxG,MAAM,YAAY,GAAG,SAAS,CAAC;gBAC9B,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,aAAa,GAAG,SAAS,CAAC;gBAC/B,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,YAAY,EAAE,aAAa,EAAE,aAAa,EAAE,EAAE,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAC;YAC5F,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;YAC9C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,aAAa,EAAE,YAAY,CAAC,CAAC;YACvD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACvD,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,oFAAoF,EAAE,KAAK,IAAI,EAAE;YACrG,MAAM,YAAY,GAAG;;;;EAIrB,CAAC;YACD,MAAM,aAAa,GAAG,SAAS,CAAA;;;;EAI/B,CAAC;YACD,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,YAAY,EAAE,aAAa,EAAE,aAAa,EAAE,EAAE,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAC;YAC5F,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;YAC9C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,aAAa,EAAE,YAAY,CAAC,CAAC;YACvD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACvD,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,sFAAsF,EAAE,KAAK,IAAI,EAAE;YACvG,MAAM,YAAY,GAAG;;;;;;EAMrB,CAAC;YACD,MAAM,aAAa,GAAG,SAAS,CAAA;;;;;;EAM/B,CAAC;YACD,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,YAAY,EAAE,aAAa,EAAE,aAAa,EAAE,EAAE,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAC;YAC5F,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;YAC9C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,aAAa,EAAE,YAAY,CAAC,CAAC;YACvD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACvD,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,gGAAgG,EAAE,KAAK,IAAI,EAAE;YACjH,MAAM,YAAY,GAAG;;;;;;EAMrB,CAAC;YACD,MAAM,aAAa,GAAG,SAAS,CAAA;;;;;;EAM/B,CAAC;YACD,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,YAAY,EAAE,aAAa,EAAE,aAAa,EAAE,EAAE,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAC;YAC5F,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;YAC9C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,aAAa,EAAE,YAAY,CAAC,CAAC;YACvD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACvD,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,gEAAgE,EAAE,KAAK,IAAI,EAAE;YACjF,MAAM,YAAY,GAAG,SAAS,CAAC;gBAC9B,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,aAAa,GAAG,SAAS,CAAC;gBAC/B,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,iBAAiB,GAAuB,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,UAAU,EAAE,CAAC,EAAE,WAAW,EAAE,CAAC,EAAE,CAAC,CAAC;YAC5F,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,YAAY,EAAE,aAAa,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAC;YACnF,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;YACtD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC;YACxD,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;YAC/B,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,CAAC;QACrE,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,mGAAmG,EAAE,KAAK,IAAI,EAAE;YACpH,MAAM,WAAW,GAAG,SAAS,CAAC;gBAC7B,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,YAAY,GAAG,SAAS,CAAC;gBAC9B,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,aAAa,GAAG,SAAS,CAAC;gBAC/B,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,iBAAiB,GAAuB,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,UAAU,EAAE,CAAC,EAAE,WAAW,EAAE,SAAS,EAAE,CAAC,CAAC;YACpG,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,YAAY,EAAE,aAAa,EAAE,WAAW,EAAE,EAAE,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAC;YAC1F,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,EAAE,SAAS,CAAC;gBACjD,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC,CAAC;YACJ,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC;YACxD,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;YAC/B,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,CAAC;QACrE,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;YAC7D,MAAM,WAAW,GAAG,SAAS,CAAC;gBAC7B,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,YAAY,GAAG,SAAS,CAAC,EAAE,CAAC,CAAC;YACnC,MAAM,aAAa,GAAG,SAAS,CAAC;gBAC/B,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,iBAAiB,GAAuB,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,UAAU,EAAE,SAAS,EAAE,WAAW,EAAE,CAAC,EAAE,CAAC,CAAC;YACpG,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,YAAY,EAAE,aAAa,EAAE,WAAW,EAAE,EAAE,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAC;YAC1F,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;YACtD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC;YACxD,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;YAC/B,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,CAAC;QACrE,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,iEAAiE,EAAE,KAAK,IAAI,EAAE;YAClF,MAAM,WAAW,GAAG,SAAS,CAAC;gBAC7B,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,YAAY,GAAG,SAAS,CAAC;gBAC9B,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,aAAa,GAAG,SAAS,CAAC;gBAC/B,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,iBAAiB,GAAuB;gBAC7C,EAAE,GAAG,EAAE,GAAG,EAAE,UAAU,EAAE,SAAS,EAAE,WAAW,EAAE,CAAC,EAAE;gBACnD,EAAE,GAAG,EAAE,GAAG,EAAE,UAAU,EAAE,CAAC,EAAE,WAAW,EAAE,SAAS,EAAE;gBACnD,EAAE,GAAG,EAAE,GAAG,EAAE,UAAU,EAAE,CAAC,EAAE,WAAW,EAAE,CAAC,EAAE;gBAC3C,EAAE,GAAG,EAAE,GAAG,EAAE,UAAU,EAAE,CAAC,EAAE,WAAW,EAAE,CAAC,EAAE;aAC3C,CAAC;YACF,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,YAAY,EAAE,aAAa,EAAE,WAAW,EAAE,EAAE,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAC;YAC1F,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,EAAE,SAAS,CAAC;gBACjD,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC,CAAC;YACJ,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,aAAa,EAAE,SAAS,CAAC;gBAClD,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC,CAAC;YACJ,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;YAC/B,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,CAAC;QACrE,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,uEAAuE,EAAE,KAAK,IAAI,EAAE;YACxF,MAAM,WAAW,GAAG,SAAS,CAAC;gBAC7B,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,YAAY,GAAG,SAAS,CAAC;gBAC9B,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,aAAa,GAAG,SAAS,CAAC;gBAC/B,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,YAAY,EAAE,aAAa,EAAE,WAAW,EAAE,EAAE,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAC;YAC1F,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,EAAE,SAAS,CAAC;gBACjD,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC,CAAC;YACJ,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,aAAa,EAAE,SAAS,CAAC;gBAClD,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC,CAAC;YACJ,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;YAC/B,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,uEAAuE,EAAE,KAAK,IAAI,EAAE;YACxF,MAAM,WAAW,GAAG;;;;;;EAMpB,CAAC;YACD,MAAM,YAAY,GAAG;;;;;;EAMrB,CAAC;YACD,MAAM,aAAa,GAAG;;;;;;EAMtB,CAAC;YACD,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,YAAY,EAAE,aAAa,EAAE,WAAW,EAAE,EAAE,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAC;YAC1F,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;YACtD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC;YACxD,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;YAC/B,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,4EAA4E,EAAE,KAAK,IAAI,EAAE;YAC7F,MAAM,WAAW,GAAG,SAAS,CAAC;gBAC7B,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,YAAY,GAAG,SAAS,CAAC;gBAC9B,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,aAAa,GAAG,SAAS,CAAC;gBAC/B,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,iBAAiB,GAAuB;gBAC7C,EAAE,GAAG,EAAE,GAAG,EAAE,UAAU,EAAE,CAAC,EAAE,WAAW,EAAE,CAAC,EAAE;aAC3C,CAAC;YACF,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,YAAY,EAAE,aAAa,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,SAAS,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,EAAE,iBAAiB,CAAC,CAAC;YACxK,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,EAAE,SAAS,CAAC;gBACjD,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC,CAAC;YACJ,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,aAAa,EAAE,SAAS,CAAC;gBAClD,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC,CAAC;YACJ,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;YAC/B,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,CAAC;QACrE,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,gEAAgE,EAAE,KAAK,IAAI,EAAE;YACjF,MAAM,YAAY,GAAG,SAAS,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;YAC3C,MAAM,aAAa,GAAG,SAAS,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;YAC5C,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,YAAY,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAC;YACtF,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;YAC9C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;YAC/C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACvD,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,0EAA0E,EAAE,KAAK,IAAI,EAAE;YAC3F,MAAM,WAAW,GAAG,SAAS,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;YAC1C,MAAM,YAAY,GAAG,SAAS,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;YAC3C,MAAM,aAAa,GAAG,SAAS,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;YAC5C,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,YAAY,EAAE,aAAa,EAAE,WAAW,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAC;YAC7F,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;YAC9C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;YAC/C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACvD,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;YACrE,MAAM,YAAY,GAAG,SAAS,CAAC,EAAE,CAAC,CAAC;YACnC,MAAM,aAAa,GAAG,SAAS,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;YAC5C,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,YAAY,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAC;YACtF,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;YAC9C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;YAC/C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACvD,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,8DAA8D,EAAE,KAAK,IAAI,EAAE;YAC/E,MAAM,YAAY,GAAG,SAAS,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;YAC3C,MAAM,aAAa,GAAG,SAAS,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;YACpD,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,YAAY,EAAE,aAAa,EAAE,YAAY,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAC;YAC9F,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;YAC9C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;YAC/C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACvD,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,sDAAsD,EAAE,KAAK,IAAI,EAAE;YACvE,MAAM,YAAY,GAAG,SAAS,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;YAC3C,MAAM,aAAa,GAAG,SAAS,CAAC,EAAE,CAAC,CAAC;YACpC,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,YAAY,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAC;YACtF,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;YAC9C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;YAC/C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACvD,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,gEAAgE,EAAE,KAAK,IAAI,EAAE;YACjF,MAAM,YAAY,GAAG,SAAS,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;YAC3C,MAAM,aAAa,GAAG,SAAS,CAAC,EAAE,CAAC,CAAC;YACpC,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,YAAY,EAAE,aAAa,EAAE,YAAY,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAC;YAC9F,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;YAC9C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;YAC/C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACvD,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,oEAAoE,EAAE,KAAK,IAAI,EAAE;YACrF,MAAM,WAAW,GAAG,SAAS,CAAC;gBAC7B,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,YAAY,GAAG,SAAS,CAAC;gBAC9B,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,aAAa,GAAG,SAAS,CAAC;gBAC/B,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,YAAY,EAAE,aAAa,EAAE,WAAW,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAC;YAClG,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,EAAE,SAAS,CAAC;gBACjD,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC,CAAC;YACJ,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,aAAa,EAAE,SAAS,CAAC;gBAClD,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC,CAAC;YACJ,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACvD,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,4DAA4D,EAAE,KAAK,IAAI,EAAE;YAC7E,MAAM,WAAW,GAAG,SAAS,CAAC;gBAC7B,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,YAAY,GAAG,SAAS,CAAC;gBAC9B,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,aAAa,GAAG,SAAS,CAAC;gBAC/B,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,iBAAiB,GAAuB;gBAC7C,EAAE,GAAG,EAAE,GAAG,EAAE,UAAU,EAAE,CAAC,EAAE,WAAW,EAAE,SAAS,EAAE;gBACnD,EAAE,GAAG,EAAE,GAAG,EAAE,UAAU,EAAE,CAAC,EAAE,WAAW,EAAE,CAAC,EAAE;aAC3C,CAAC;YACF,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,YAAY,EAAE,aAAa,EAAE,WAAW,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAC;YAClG,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,EAAE,SAAS,CAAC;gBACjD,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC,CAAC;YACJ,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,aAAa,EAAE,SAAS,CAAC;gBAClD,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC,CAAC;YACJ,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,CAAC;YACpE,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,mDAAmD,EAAE,KAAK,IAAI,EAAE;YACpE,MAAM,YAAY,GAAG;;;EAGrB,CAAC;YACD,MAAM,aAAa,GAAG,SAAS,CAAA;;;;EAI/B,CAAC;YACD,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAK,CAAA,CAAC,YAAY,EAAE,aAAa,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAC;YACnF,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC;YACvD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;YAC/C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACvD,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,KAAK,CAAC,wCAAwC,EAAE,GAAG,EAAE;QAEpD,IAAI,CAAC,8DAA8D,EAAE,KAAK,IAAI,EAAE;YAC/E,MAAM,YAAY,GAAG,SAAS,CAAC;gBAC9B,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,aAAa,GAAG,SAAS,CAAC;gBAC/B,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,MAAM,GAAG,CAAA,GAAA,qCAAqB,CAAA,CAAC,YAAY,EAAE,aAAa,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAC;YACzF,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,sDAAsD,EAAE,KAAK,IAAI,EAAE;YACvE,MAAM,YAAY,GAAG,SAAS,CAAC;gBAC9B,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,aAAa,GAAG,SAAS,CAAC;gBAC/B,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,QAAQ,GAAG,SAAS,CAAC;gBAC1B,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACN,CAAC,CAAC;YACH,MAAM,MAAM,GAAG,CAAA,GAAA,qCAAqB,CAAA,CAAC,YAAY,EAAE,aAAa,EAAE,CAAC,GAAG,CAAC,EAAE,iBAAiB,CAAC,CAAC;YAC5F,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;IAEJ,CAAC,CAAC,CAAC;IAEH,KAAK,CAAC,6BAA6B,EAAE,GAAG,EAAE;QAEzC,IAAI,CAAC,yCAAyC,EAAE,GAAG,EAAE;YAEpD,MAAM,aAAa,GAAG;;;;;EAKtB,CAAC;YACD,MAAM,aAAa,GAAG;;;;EAItB,CAAC;YAED,MAAM,QAAQ,GAAG;;;;;EAKjB,CAAC;YAED,MAAM,MAAM,GAAG,CAAA,GAAA,0BAAU,CAAA,CAAC,GAAG,EAAE,aAAa,EAAE,aAAa,EAAE,iBAAiB,CAAC,CAAC;YAEhF,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,oDAAoD,EAAE,GAAG,EAAE;YAE/D,MAAM,aAAa,GAAG;;;;;EAKtB,CAAC;YACD,MAAM,aAAa,GAAG;;;EAGtB,CAAC;YAED,MAAM,QAAQ,GAAG;;;;EAIjB,CAAC;YAED,MAAM,MAAM,GAAG,CAAA,GAAA,0BAAU,CAAA,CAAC,GAAG,EAAE,aAAa,EAAE,aAAa,EAAE,iBAAiB,CAAC,CAAC;YAEhF,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,yCAAyC,EAAE,GAAG,EAAE;YAEpD,MAAM,aAAa,GAAG;;;;;EAKtB,CAAC;YACD,MAAM,aAAa,GAAG;;;;EAItB,CAAC;YAED,MAAM,QAAQ,GAAG;;;;;EAKjB,CAAC;YAED,MAAM,MAAM,GAAG,CAAA,GAAA,0BAAU,CAAA,CAAC,GAAG,EAAE,aAAa,EAAE,aAAa,EAAE,iBAAiB,CAAC,CAAC;YAEhF,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,qEAAqE,EAAE,GAAG,EAAE;YAEhF,MAAM,aAAa,GAAG;;;;;;EAMtB,CAAC;YACD,MAAM,aAAa,GAAG;;;;EAItB,CAAC;YAED,MAAM,QAAQ,GAAG;;;;;EAKjB,CAAC;YAED,MAAM,MAAM,GAAG,CAAA,GAAA,0BAAU,CAAA,CAAC,GAAG,EAAE,aAAa,EAAE,aAAa,EAAE,iBAAiB,CAAC,CAAC;YAEhF,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,uDAAuD,EAAE,GAAG,EAAE;YAElE,MAAM,aAAa,GAAG;;;;;EAKtB,CAAC;YACD,MAAM,aAAa,GAAG;;;;EAItB,CAAC;YAED,MAAM,QAAQ,GAAG;;;;;EAKjB,CAAC;YAED,MAAM,MAAM,GAAG,CAAA,GAAA,0BAAU,CAAA,CAAC,GAAG,EAAE,aAAa,EAAE,aAAa,EAAE,iBAAiB,CAAC,CAAC;YAEhF,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,yEAAyE,EAAE,GAAG,EAAE;YAEpF,MAAM,aAAa,GAAG;;;;;EAKtB,CAAC;YACD,MAAM,aAAa,GAAG;;;;EAItB,CAAC;YAED,MAAM,QAAQ,GAAG;;;;;EAKjB,CAAC;YAED,MAAM,MAAM,GAAG,CAAA,GAAA,0BAAU,CAAA,CAAC,GAAG,EAAE,aAAa,EAAE,aAAa,EAAE,iBAAiB,CAAC,CAAC;YAEhF,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,kDAAkD,EAAE,GAAG,EAAE;YAE7D,MAAM,aAAa,GAAG;;;;EAItB,CAAC;YACD,MAAM,aAAa,GAAG;;;EAGtB,CAAC;YAED,MAAM,QAAQ,GAAG;;;;EAIjB,CAAC;YAED,MAAM,MAAM,GAAG,CAAA,GAAA,0BAAU,CAAA,CAAC,GAAG,EAAE,aAAa,EAAE,aAAa,EAAE,iBAAiB,CAAC,CAAC;YAEhF,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,0DAA0D,EAAE,GAAG,EAAE;YAErE,MAAM,aAAa,GAAG;;;;;;EAMtB,CAAC;YACD,MAAM,aAAa,GAAG;;;;;EAKtB,CAAC;YAED,MAAM,QAAQ,GAAG;;;;;;EAMjB,CAAC;YAED,MAAM,MAAM,GAAG,CAAA,GAAA,0BAAU,CAAA,CAAC,GAAG,EAAE,aAAa,EAAE,aAAa,EAAE,iBAAiB,CAAC,CAAC;YAEhF,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,0EAA0E,EAAE,GAAG,EAAE;YAErF,MAAM,aAAa,GAAG;;;;;;;EAOtB,CAAC;YACD,MAAM,aAAa,GAAG;;;;;;EAMtB,CAAC;YAED,MAAM,QAAQ,GAAG;;;;;;;EAOjB,CAAC;YAED,MAAM,MAAM,GAAG,CAAA,GAAA,0BAAU,CAAA,CAAC,GAAG,EAAE,aAAa,EAAE,aAAa,EAAE,iBAAiB,CAAC,CAAC;YAEhF,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,2FAA2F,EAAE,GAAG,EAAE;YAEtG,MAAM,aAAa,GAAG;;;;;;;EAOtB,CAAC;YACD,MAAM,aAAa,GAAG;;;;;EAKtB,CAAC;YAED,MAAM,QAAQ,GAAG;;;;;;EAMjB,CAAC;YAED,MAAM,MAAM,GAAG,CAAA,GAAA,0BAAU,CAAA,CAAC,GAAG,EAAE,aAAa,EAAE,aAAa,EAAE,iBAAiB,CAAC,CAAC;YAEhF,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,gGAAgG,EAAE,GAAG,EAAE;YAE3G,MAAM,aAAa,GAAG;;;;;;;EAOtB,CAAC;YACD,MAAM,aAAa,GAAG;;;;;EAKtB,CAAC;YAED,MAAM,QAAQ,GAAG;;;;;;EAMjB,CAAC;YAED,MAAM,MAAM,GAAG,CAAA,GAAA,0BAAU,CAAA,CAAC,GAAG,EAAE,aAAa,EAAE,aAAa,EAAE,iBAAiB,CAAC,CAAC;YAEhF,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,2EAA2E,EAAE,GAAG,EAAE;YAEtF,MAAM,aAAa,GAAG;;;;;;EAMtB,CAAC;YACD,MAAM,aAAa,GAAG;;;;;EAKtB,CAAC;YAED,MAAM,QAAQ,GAAG;;;;;;EAMjB,CAAC;YAED,MAAM,MAAM,GAAG,CAAA,GAAA,0BAAU,CAAA,CAAC,GAAG,EAAE,aAAa,EAAE,aAAa,EAAE,iBAAiB,CAAC,CAAC;YAEhF,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,0FAA0F,EAAE,GAAG,EAAE;YAErG,MAAM,aAAa,GAAG;;;;;;EAMtB,CAAC;YACD,MAAM,aAAa,GAAG;;;;;EAKtB,CAAC;YAED,MAAM,QAAQ,GAAG;;;;;;EAMjB,CAAC;YAED,MAAM,MAAM,GAAG,CAAA,GAAA,0BAAU,CAAA,CAAC,GAAG,EAAE,aAAa,EAAE,aAAa,EAAE,iBAAiB,CAAC,CAAC;YAEhF,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,0CAA0C,EAAE,GAAG,EAAE;YAErD,MAAM,aAAa,GAAG;;;;;EAKtB,CAAC;YACD,MAAM,aAAa,GAAG;;;;EAItB,CAAC;YAED,MAAM,QAAQ,GAAG;;;;;EAKjB,CAAC;YAED,MAAM,MAAM,GAAG,CAAA,GAAA,0BAAU,CAAA,CAAC,GAAG,EAAE,aAAa,EAAE,aAAa,EAAE,iBAAiB,CAAC,CAAC;YAEhF,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,qDAAqD,EAAE,GAAG,EAAE;YAEhE,MAAM,aAAa,GAAG;;;;;EAKtB,CAAC;YACD,MAAM,aAAa,GAAG;;;EAGtB,CAAC;YAED,MAAM,QAAQ,GAAG;;;;EAIjB,CAAC;YAED,MAAM,MAAM,GAAG,CAAA,GAAA,0BAAU,CAAA,CAAC,GAAG,EAAE,aAAa,EAAE,aAAa,EAAE,iBAAiB,CAAC,CAAC;YAEhF,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,sCAAsC,EAAE,GAAG,EAAE;YAEjD,MAAM,aAAa,GAAG;;;;;;EAMtB,CAAC;YACD,MAAM,aAAa,GAAG;;;;EAItB,CAAC;YAED,MAAM,QAAQ,GAAG;;;;;EAKjB,CAAC;YAED,MAAM,MAAM,GAAG,CAAA,GAAA,0BAAU,CAAA,CAAC,GAAG,EAAE,aAAa,EAAE,aAAa,EAAE,iBAAiB,CAAC,CAAC;YAEhF,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,+DAA+D,EAAE,GAAG,EAAE;YAE1E,MAAM,aAAa,GAAG;;;;;EAKtB,CAAC;YACD,MAAM,aAAa,GAAG;;;;EAItB,CAAC;YAED,MAAM,QAAQ,GAAG;;;;;EAKjB,CAAC;YAED,MAAM,MAAM,GAAG,CAAA,GAAA,0BAAU,CAAA,CAAC,GAAG,EAAE,aAAa,EAAE,aAAa,EAAE,iBAAiB,CAAC,CAAC;YAEhF,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,kFAAkF,EAAE,GAAG,EAAE;YAE7F,MAAM,aAAa,GAAG;;;;;EAKtB,CAAC;YACD,MAAM,aAAa,GAAG;;;;EAItB,CAAC;YAED,MAAM,QAAQ,GAAG;;;;;EAKjB,CAAC;YAED,MAAM,MAAM,GAAG,CAAA,GAAA,0BAAU,CAAA,CAAC,GAAG,EAAE,aAAa,EAAE,aAAa,EAAE,iBAAiB,CAAC,CAAC;YAEhF,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,2DAA2D,EAAE,GAAG,EAAE;YAEtE,MAAM,aAAa,GAAG;;;;;;EAMtB,CAAC;YACD,MAAM,aAAa,GAAG;;;;;EAKtB,CAAC;YAED,MAAM,QAAQ,GAAG;;;;;;EAMjB,CAAC;YAED,MAAM,MAAM,GAAG,CAAA,GAAA,0BAAU,CAAA,CAAC,GAAG,EAAE,aAAa,EAAE,aAAa,EAAE,iBAAiB,CAAC,CAAC;YAEhF,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,4EAA4E,EAAE,GAAG,EAAE;YAEvF,MAAM,aAAa,GAAG;;;;;;;EAOtB,CAAC;YACD,MAAM,aAAa,GAAG;;;;;;EAMtB,CAAC;YAED,MAAM,QAAQ,GAAG;;;;;;;EAOjB,CAAC;YAED,MAAM,MAAM,GAAG,CAAA,GAAA,0BAAU,CAAA,CAAC,GAAG,EAAE,aAAa,EAAE,aAAa,EAAE,iBAAiB,CAAC,CAAC;YAEhF,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,6FAA6F,EAAE,GAAG,EAAE;YAExG,MAAM,aAAa,GAAG;;;;;;;EAOtB,CAAC;YACD,MAAM,aAAa,GAAG;;;;;EAKtB,CAAC;YAED,MAAM,QAAQ,GAAG;;;;;;;EAOjB,CAAC;YAED,MAAM,MAAM,GAAG,CAAA,GAAA,0BAAU,CAAA,CAAC,GAAG,EAAE,aAAa,EAAE,aAAa,EAAE,iBAAiB,CAAC,CAAC;YAEhF,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,kGAAkG,EAAE,GAAG,EAAE;YAE7G,MAAM,aAAa,GAAG;;;;;;;EAOtB,CAAC;YACD,MAAM,aAAa,GAAG;;;;;EAKtB,CAAC;YAED,MAAM,QAAQ,GAAG;;;;;;EAMjB,CAAC;YAED,MAAM,MAAM,GAAG,CAAA,GAAA,0BAAU,CAAA,CAAC,GAAG,EAAE,aAAa,EAAE,aAAa,EAAE,iBAAiB,CAAC,CAAC;YAEhF,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,6EAA6E,EAAE,GAAG,EAAE;YAExF,MAAM,aAAa,GAAG;;;;;;EAMtB,CAAC;YACD,MAAM,aAAa,GAAG;;;;;EAKtB,CAAC;YAED,MAAM,QAAQ,GAAG;;;;;;EAMjB,CAAC;YAED,MAAM,MAAM,GAAG,CAAA,GAAA,0BAAU,CAAA,CAAC,GAAG,EAAE,aAAa,EAAE,aAAa,EAAE,iBAAiB,CAAC,CAAC;YAEhF,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,4FAA4F,EAAE,GAAG,EAAE;YAEvG,MAAM,aAAa,GAAG;;;;;;EAMtB,CAAC;YACD,MAAM,aAAa,GAAG;;;;;EAKtB,CAAC;YAED,MAAM,QAAQ,GAAG;;;;;;EAMjB,CAAC;YAED,MAAM,MAAM,GAAG,CAAA,GAAA,0BAAU,CAAA,CAAC,GAAG,EAAE,aAAa,EAAE,aAAa,EAAE,iBAAiB,CAAC,CAAC;YAEhF,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,+CAA+C,EAAE,GAAG,EAAE;YAE1D,MAAM,aAAa,GAAG;;;;;;;EAOtB,CAAC;YACD,MAAM,aAAa,GAAG;;;;;;EAMtB,CAAC;YAED,MAAM,MAAM,GAAG,CAAA,GAAA,0BAAU,CAAA,CAAC,GAAG,EAAE,aAAa,EAAE,aAAa,EAAE,iBAAiB,CAAC,CAAC;YAEhF,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,8CAA8C,EAAE,GAAG,EAAE;YAEzD,MAAM,aAAa,GAAG;;;;;;;EAOtB,CAAC;YACD,MAAM,aAAa,GAAG;;;;;;EAMtB,CAAC;YAED,MAAM,MAAM,GAAG,CAAA,GAAA,0BAAU,CAAA,CAAC,GAAG,EAAE,aAAa,EAAE,aAAa,EAAE,iBAAiB,CAAC,CAAC;YAEhF,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,oFAAoF,EAAE,GAAG,EAAE;YAE/F,MAAM,aAAa,GAAG;;;;;;EAMtB,CAAC;YACD,MAAM,aAAa,GAAG;;;;;EAKtB,CAAC;YAED,MAAM,QAAQ,GAAG;;;;;;EAMjB,CAAC;YAED,MAAM,MAAM,GAAG,CAAA,GAAA,0BAAU,CAAA,CAAC,GAAG,EAAE,aAAa,EAAE,aAAa,EAAE,iBAAiB,CAAC,CAAC;YAEhF,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,+FAA+F,EAAE,GAAG,EAAE;YAE1G,MAAM,aAAa,GAAG;;;;;;;EAOtB,CAAC;YACD,MAAM,aAAa,GAAG;;;;;;EAMtB,CAAC;YAED,MAAM,QAAQ,GAAG;;;;;;;EAOjB,CAAC;YAED,MAAM,MAAM,GAAG,CAAA,GAAA,0BAAU,CAAA,CAAC,GAAG,EAAE,aAAa,EAAE,aAAa,EAAE,iBAAiB,CAAC,CAAC;YAEhF,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,+FAA+F,EAAE,GAAG,EAAE;YAE1G,MAAM,aAAa,GAAG;;;;;;;EAOtB,CAAC;YACD,MAAM,aAAa,GAAG;;;;;;EAMtB,CAAC;YAED,MAAM,QAAQ,GAAG;;;;;;;EAOjB,CAAC;YAED,MAAM,MAAM,GAAG,CAAA,GAAA,0BAAU,CAAA,CAAC,GAAG,EAAE,aAAa,EAAE,aAAa,EAAE,iBAAiB,CAAC,CAAC;YAEhF,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IAGH,SAAS,SAAS,CAAC,KAAU;QAC5B,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IAC1C,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { merge, updateIgnoredSettings, addSetting } from 'vs/platform/userDataSync/common/settingsMerge';\nimport type { IConflictSetting } from 'vs/platform/userDataSync/common/userDataSync';\n\nconst formattingOptions = { eol: '\\n', insertSpaces: false, tabSize: 4 };\n\nsuite('SettingsMerge - Merge', () => {\n\n\ttest('merge when local and remote are same with one entry', async () => {\n\t\tconst localContent = stringify({ 'a': 1 });\n\t\tconst remoteContent = stringify({ 'a': 1 });\n\t\tconst actual = merge(localContent, remoteContent, null, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, null);\n\t\tassert.strictEqual(actual.remoteContent, null);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('merge when local and remote are same with multiple entries', async () => {\n\t\tconst localContent = stringify({\n\t\t\t'a': 1,\n\t\t\t'b': 2\n\t\t});\n\t\tconst remoteContent = stringify({\n\t\t\t'a': 1,\n\t\t\t'b': 2\n\t\t});\n\t\tconst actual = merge(localContent, remoteContent, null, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, null);\n\t\tassert.strictEqual(actual.remoteContent, null);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('merge when local and remote are same with multiple entries in different order', async () => {\n\t\tconst localContent = stringify({\n\t\t\t'b': 2,\n\t\t\t'a': 1,\n\t\t});\n\t\tconst remoteContent = stringify({\n\t\t\t'a': 1,\n\t\t\t'b': 2\n\t\t});\n\t\tconst actual = merge(localContent, remoteContent, null, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, localContent);\n\t\tassert.strictEqual(actual.remoteContent, remoteContent);\n\t\tassert.ok(actual.hasConflicts);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t});\n\n\ttest('merge when local and remote are same with different base content', async () => {\n\t\tconst localContent = stringify({\n\t\t\t'b': 2,\n\t\t\t'a': 1,\n\t\t});\n\t\tconst baseContent = stringify({\n\t\t\t'a': 2,\n\t\t\t'b': 1\n\t\t});\n\t\tconst remoteContent = stringify({\n\t\t\t'a': 1,\n\t\t\t'b': 2\n\t\t});\n\t\tconst actual = merge(localContent, remoteContent, baseContent, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, localContent);\n\t\tassert.strictEqual(actual.remoteContent, remoteContent);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(actual.hasConflicts);\n\t});\n\n\ttest('merge when a new entry is added to remote', async () => {\n\t\tconst localContent = stringify({\n\t\t\t'a': 1,\n\t\t});\n\t\tconst remoteContent = stringify({\n\t\t\t'a': 1,\n\t\t\t'b': 2\n\t\t});\n\t\tconst actual = merge(localContent, remoteContent, null, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, remoteContent);\n\t\tassert.strictEqual(actual.remoteContent, null);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('merge when multiple new entries are added to remote', async () => {\n\t\tconst localContent = stringify({\n\t\t\t'a': 1,\n\t\t});\n\t\tconst remoteContent = stringify({\n\t\t\t'a': 1,\n\t\t\t'b': 2,\n\t\t\t'c': 3,\n\t\t});\n\t\tconst actual = merge(localContent, remoteContent, null, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, remoteContent);\n\t\tassert.strictEqual(actual.remoteContent, null);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('merge when multiple new entries are added to remote from base and local has not changed', async () => {\n\t\tconst localContent = stringify({\n\t\t\t'a': 1,\n\t\t});\n\t\tconst remoteContent = stringify({\n\t\t\t'b': 2,\n\t\t\t'a': 1,\n\t\t\t'c': 3,\n\t\t});\n\t\tconst actual = merge(localContent, remoteContent, localContent, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, remoteContent);\n\t\tassert.strictEqual(actual.remoteContent, null);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('merge when an entry is removed from remote from base and local has not changed', async () => {\n\t\tconst localContent = stringify({\n\t\t\t'a': 1,\n\t\t\t'b': 2,\n\t\t});\n\t\tconst remoteContent = stringify({\n\t\t\t'a': 1,\n\t\t});\n\t\tconst actual = merge(localContent, remoteContent, localContent, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, remoteContent);\n\t\tassert.strictEqual(actual.remoteContent, null);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('merge when all entries are removed from base and local has not changed', async () => {\n\t\tconst localContent = stringify({\n\t\t\t'a': 1,\n\t\t});\n\t\tconst remoteContent = stringify({});\n\t\tconst actual = merge(localContent, remoteContent, localContent, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, remoteContent);\n\t\tassert.strictEqual(actual.remoteContent, null);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('merge when an entry is updated in remote from base and local has not changed', async () => {\n\t\tconst localContent = stringify({\n\t\t\t'a': 1,\n\t\t});\n\t\tconst remoteContent = stringify({\n\t\t\t'a': 2\n\t\t});\n\t\tconst actual = merge(localContent, remoteContent, localContent, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, remoteContent);\n\t\tassert.strictEqual(actual.remoteContent, null);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('merge when remote has moved forwareded with multiple changes and local stays with base', async () => {\n\t\tconst localContent = stringify({\n\t\t\t'a': 1,\n\t\t});\n\t\tconst remoteContent = stringify({\n\t\t\t'a': 2,\n\t\t\t'b': 1,\n\t\t\t'c': 3,\n\t\t\t'd': 4,\n\t\t});\n\t\tconst actual = merge(localContent, remoteContent, localContent, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, remoteContent);\n\t\tassert.strictEqual(actual.remoteContent, null);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('merge when remote has moved forwareded with order changes and local stays with base', async () => {\n\t\tconst localContent = stringify({\n\t\t\t'a': 1,\n\t\t\t'b': 2,\n\t\t\t'c': 3,\n\t\t});\n\t\tconst remoteContent = stringify({\n\t\t\t'a': 2,\n\t\t\t'd': 4,\n\t\t\t'c': 3,\n\t\t\t'b': 2,\n\t\t});\n\t\tconst actual = merge(localContent, remoteContent, localContent, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, remoteContent);\n\t\tassert.strictEqual(actual.remoteContent, null);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('merge when remote has moved forwareded with comment changes and local stays with base', async () => {\n\t\tconst localContent = `\n{\n\t// this is comment for b\n\t\"b\": 2,\n\t// this is comment for c\n\t\"c\": 1,\n}`;\n\t\tconst remoteContent = stringify`\n{\n\t// comment b has changed\n\t\"b\": 2,\n\t// this is comment for c\n\t\"c\": 1,\n}`;\n\t\tconst actual = merge(localContent, remoteContent, localContent, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, remoteContent);\n\t\tassert.strictEqual(actual.remoteContent, null);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('merge when remote has moved forwareded with comment and order changes and local stays with base', async () => {\n\t\tconst localContent = `\n{\n\t// this is comment for b\n\t\"b\": 2,\n\t// this is comment for c\n\t\"c\": 1,\n}`;\n\t\tconst remoteContent = stringify`\n{\n\t// this is comment for c\n\t\"c\": 1,\n\t// comment b has changed\n\t\"b\": 2,\n}`;\n\t\tconst actual = merge(localContent, remoteContent, localContent, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, remoteContent);\n\t\tassert.strictEqual(actual.remoteContent, null);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('merge when a new entries are added to local', async () => {\n\t\tconst localContent = stringify({\n\t\t\t'a': 1,\n\t\t\t'b': 2,\n\t\t\t'c': 3,\n\t\t\t'd': 4,\n\t\t});\n\t\tconst remoteContent = stringify({\n\t\t\t'a': 1,\n\t\t});\n\t\tconst actual = merge(localContent, remoteContent, null, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, null);\n\t\tassert.strictEqual(actual.remoteContent, localContent);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('merge when multiple new entries are added to local from base and remote is not changed', async () => {\n\t\tconst localContent = stringify({\n\t\t\t'a': 2,\n\t\t\t'b': 1,\n\t\t\t'c': 3,\n\t\t\t'd': 4,\n\t\t});\n\t\tconst remoteContent = stringify({\n\t\t\t'a': 1,\n\t\t});\n\t\tconst actual = merge(localContent, remoteContent, remoteContent, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, null);\n\t\tassert.strictEqual(actual.remoteContent, localContent);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('merge when an entry is removed from local from base and remote has not changed', async () => {\n\t\tconst localContent = stringify({\n\t\t\t'a': 1,\n\t\t\t'c': 2\n\t\t});\n\t\tconst remoteContent = stringify({\n\t\t\t'a': 2,\n\t\t\t'b': 1,\n\t\t\t'c': 3,\n\t\t\t'd': 4,\n\t\t});\n\t\tconst actual = merge(localContent, remoteContent, remoteContent, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, null);\n\t\tassert.strictEqual(actual.remoteContent, localContent);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('merge when an entry is updated in local from base and remote has not changed', async () => {\n\t\tconst localContent = stringify({\n\t\t\t'a': 1,\n\t\t\t'c': 2\n\t\t});\n\t\tconst remoteContent = stringify({\n\t\t\t'a': 2,\n\t\t\t'c': 2,\n\t\t});\n\t\tconst actual = merge(localContent, remoteContent, remoteContent, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, null);\n\t\tassert.strictEqual(actual.remoteContent, localContent);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('merge when local has moved forwarded with multiple changes and remote stays with base', async () => {\n\t\tconst localContent = stringify({\n\t\t\t'a': 2,\n\t\t\t'b': 1,\n\t\t\t'c': 3,\n\t\t\t'd': 4,\n\t\t});\n\t\tconst remoteContent = stringify({\n\t\t\t'a': 1,\n\t\t});\n\t\tconst actual = merge(localContent, remoteContent, remoteContent, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, null);\n\t\tassert.strictEqual(actual.remoteContent, localContent);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('merge when local has moved forwarded with order changes and remote stays with base', async () => {\n\t\tconst localContent = `\n{\n\t\"b\": 2,\n\t\"c\": 1,\n}`;\n\t\tconst remoteContent = stringify`\n{\n\t\"c\": 1,\n\t\"b\": 2,\n}`;\n\t\tconst actual = merge(localContent, remoteContent, remoteContent, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, null);\n\t\tassert.strictEqual(actual.remoteContent, localContent);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('merge when local has moved forwarded with comment changes and remote stays with base', async () => {\n\t\tconst localContent = `\n{\n\t// comment for b has changed\n\t\"b\": 2,\n\t// comment for c\n\t\"c\": 1,\n}`;\n\t\tconst remoteContent = stringify`\n{\n\t// comment for b\n\t\"b\": 2,\n\t// comment for c\n\t\"c\": 1,\n}`;\n\t\tconst actual = merge(localContent, remoteContent, remoteContent, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, null);\n\t\tassert.strictEqual(actual.remoteContent, localContent);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('merge when local has moved forwarded with comment and order changes and remote stays with base', async () => {\n\t\tconst localContent = `\n{\n\t// comment for c\n\t\"c\": 1,\n\t// comment for b has changed\n\t\"b\": 2,\n}`;\n\t\tconst remoteContent = stringify`\n{\n\t// comment for b\n\t\"b\": 2,\n\t// comment for c\n\t\"c\": 1,\n}`;\n\t\tconst actual = merge(localContent, remoteContent, remoteContent, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, null);\n\t\tassert.strictEqual(actual.remoteContent, localContent);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('merge when local and remote with one entry but different value', async () => {\n\t\tconst localContent = stringify({\n\t\t\t'a': 1\n\t\t});\n\t\tconst remoteContent = stringify({\n\t\t\t'a': 2\n\t\t});\n\t\tconst expectedConflicts: IConflictSetting[] = [{ key: 'a', localValue: 1, remoteValue: 2 }];\n\t\tconst actual = merge(localContent, remoteContent, null, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, localContent);\n\t\tassert.strictEqual(actual.remoteContent, remoteContent);\n\t\tassert.ok(actual.hasConflicts);\n\t\tassert.deepStrictEqual(actual.conflictsSettings, expectedConflicts);\n\t});\n\n\ttest('merge when the entry is removed in remote but updated in local and a new entry is added in remote', async () => {\n\t\tconst baseContent = stringify({\n\t\t\t'a': 1\n\t\t});\n\t\tconst localContent = stringify({\n\t\t\t'a': 2\n\t\t});\n\t\tconst remoteContent = stringify({\n\t\t\t'b': 2\n\t\t});\n\t\tconst expectedConflicts: IConflictSetting[] = [{ key: 'a', localValue: 2, remoteValue: undefined }];\n\t\tconst actual = merge(localContent, remoteContent, baseContent, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, stringify({\n\t\t\t'a': 2,\n\t\t\t'b': 2\n\t\t}));\n\t\tassert.strictEqual(actual.remoteContent, remoteContent);\n\t\tassert.ok(actual.hasConflicts);\n\t\tassert.deepStrictEqual(actual.conflictsSettings, expectedConflicts);\n\t});\n\n\ttest('merge with single entry and local is empty', async () => {\n\t\tconst baseContent = stringify({\n\t\t\t'a': 1\n\t\t});\n\t\tconst localContent = stringify({});\n\t\tconst remoteContent = stringify({\n\t\t\t'a': 2\n\t\t});\n\t\tconst expectedConflicts: IConflictSetting[] = [{ key: 'a', localValue: undefined, remoteValue: 2 }];\n\t\tconst actual = merge(localContent, remoteContent, baseContent, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, localContent);\n\t\tassert.strictEqual(actual.remoteContent, remoteContent);\n\t\tassert.ok(actual.hasConflicts);\n\t\tassert.deepStrictEqual(actual.conflictsSettings, expectedConflicts);\n\t});\n\n\ttest('merge when local and remote has moved forwareded with conflicts', async () => {\n\t\tconst baseContent = stringify({\n\t\t\t'a': 1,\n\t\t\t'b': 2,\n\t\t\t'c': 3,\n\t\t\t'd': 4,\n\t\t});\n\t\tconst localContent = stringify({\n\t\t\t'a': 2,\n\t\t\t'c': 3,\n\t\t\t'd': 5,\n\t\t\t'e': 4,\n\t\t\t'f': 1,\n\t\t});\n\t\tconst remoteContent = stringify({\n\t\t\t'b': 3,\n\t\t\t'c': 3,\n\t\t\t'd': 6,\n\t\t\t'e': 5,\n\t\t});\n\t\tconst expectedConflicts: IConflictSetting[] = [\n\t\t\t{ key: 'b', localValue: undefined, remoteValue: 3 },\n\t\t\t{ key: 'a', localValue: 2, remoteValue: undefined },\n\t\t\t{ key: 'd', localValue: 5, remoteValue: 6 },\n\t\t\t{ key: 'e', localValue: 4, remoteValue: 5 },\n\t\t];\n\t\tconst actual = merge(localContent, remoteContent, baseContent, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, stringify({\n\t\t\t'a': 2,\n\t\t\t'c': 3,\n\t\t\t'd': 5,\n\t\t\t'e': 4,\n\t\t\t'f': 1,\n\t\t}));\n\t\tassert.strictEqual(actual.remoteContent, stringify({\n\t\t\t'b': 3,\n\t\t\t'c': 3,\n\t\t\t'd': 6,\n\t\t\t'e': 5,\n\t\t\t'f': 1,\n\t\t}));\n\t\tassert.ok(actual.hasConflicts);\n\t\tassert.deepStrictEqual(actual.conflictsSettings, expectedConflicts);\n\t});\n\n\ttest('merge when local and remote has moved forwareded with change in order', async () => {\n\t\tconst baseContent = stringify({\n\t\t\t'a': 1,\n\t\t\t'b': 2,\n\t\t\t'c': 3,\n\t\t\t'd': 4,\n\t\t});\n\t\tconst localContent = stringify({\n\t\t\t'a': 2,\n\t\t\t'c': 3,\n\t\t\t'b': 2,\n\t\t\t'd': 4,\n\t\t\t'e': 5,\n\t\t});\n\t\tconst remoteContent = stringify({\n\t\t\t'a': 1,\n\t\t\t'b': 2,\n\t\t\t'c': 4,\n\t\t});\n\t\tconst actual = merge(localContent, remoteContent, baseContent, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, stringify({\n\t\t\t'a': 2,\n\t\t\t'c': 4,\n\t\t\t'b': 2,\n\t\t\t'e': 5,\n\t\t}));\n\t\tassert.strictEqual(actual.remoteContent, stringify({\n\t\t\t'a': 2,\n\t\t\t'b': 2,\n\t\t\t'e': 5,\n\t\t\t'c': 4,\n\t\t}));\n\t\tassert.ok(actual.hasConflicts);\n\t\tassert.deepStrictEqual(actual.conflictsSettings, []);\n\t});\n\n\ttest('merge when local and remote has moved forwareded with comment changes', async () => {\n\t\tconst baseContent = `\n{\n\t// this is comment for b\n\t\"b\": 2,\n\t// this is comment for c\n\t\"c\": 1\n}`;\n\t\tconst localContent = `\n{\n\t// comment b has changed in local\n\t\"b\": 2,\n\t// this is comment for c\n\t\"c\": 1\n}`;\n\t\tconst remoteContent = `\n{\n\t// comment b has changed in remote\n\t\"b\": 2,\n\t// this is comment for c\n\t\"c\": 1\n}`;\n\t\tconst actual = merge(localContent, remoteContent, baseContent, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, localContent);\n\t\tassert.strictEqual(actual.remoteContent, remoteContent);\n\t\tassert.ok(actual.hasConflicts);\n\t\tassert.deepStrictEqual(actual.conflictsSettings, []);\n\t});\n\n\ttest('resolve when local and remote has moved forwareded with resolved conflicts', async () => {\n\t\tconst baseContent = stringify({\n\t\t\t'a': 1,\n\t\t\t'b': 2,\n\t\t\t'c': 3,\n\t\t\t'd': 4,\n\t\t});\n\t\tconst localContent = stringify({\n\t\t\t'a': 2,\n\t\t\t'c': 3,\n\t\t\t'd': 5,\n\t\t\t'e': 4,\n\t\t\t'f': 1,\n\t\t});\n\t\tconst remoteContent = stringify({\n\t\t\t'b': 3,\n\t\t\t'c': 3,\n\t\t\t'd': 6,\n\t\t\t'e': 5,\n\t\t});\n\t\tconst expectedConflicts: IConflictSetting[] = [\n\t\t\t{ key: 'd', localValue: 5, remoteValue: 6 },\n\t\t];\n\t\tconst actual = merge(localContent, remoteContent, baseContent, [], [{ key: 'a', value: 2 }, { key: 'b', value: undefined }, { key: 'e', value: 5 }], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, stringify({\n\t\t\t'a': 2,\n\t\t\t'c': 3,\n\t\t\t'd': 5,\n\t\t\t'e': 5,\n\t\t\t'f': 1,\n\t\t}));\n\t\tassert.strictEqual(actual.remoteContent, stringify({\n\t\t\t'c': 3,\n\t\t\t'd': 6,\n\t\t\t'e': 5,\n\t\t\t'f': 1,\n\t\t\t'a': 2,\n\t\t}));\n\t\tassert.ok(actual.hasConflicts);\n\t\tassert.deepStrictEqual(actual.conflictsSettings, expectedConflicts);\n\t});\n\n\ttest('ignored setting is not merged when changed in local and remote', async () => {\n\t\tconst localContent = stringify({ 'a': 1 });\n\t\tconst remoteContent = stringify({ 'a': 2 });\n\t\tconst actual = merge(localContent, remoteContent, null, ['a'], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, null);\n\t\tassert.strictEqual(actual.remoteContent, null);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('ignored setting is not merged when changed in local and remote from base', async () => {\n\t\tconst baseContent = stringify({ 'a': 0 });\n\t\tconst localContent = stringify({ 'a': 1 });\n\t\tconst remoteContent = stringify({ 'a': 2 });\n\t\tconst actual = merge(localContent, remoteContent, baseContent, ['a'], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, null);\n\t\tassert.strictEqual(actual.remoteContent, null);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('ignored setting is not merged when added in remote', async () => {\n\t\tconst localContent = stringify({});\n\t\tconst remoteContent = stringify({ 'a': 1 });\n\t\tconst actual = merge(localContent, remoteContent, null, ['a'], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, null);\n\t\tassert.strictEqual(actual.remoteContent, null);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('ignored setting is not merged when added in remote from base', async () => {\n\t\tconst localContent = stringify({ 'b': 2 });\n\t\tconst remoteContent = stringify({ 'a': 1, 'b': 2 });\n\t\tconst actual = merge(localContent, remoteContent, localContent, ['a'], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, null);\n\t\tassert.strictEqual(actual.remoteContent, null);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('ignored setting is not merged when removed in remote', async () => {\n\t\tconst localContent = stringify({ 'a': 1 });\n\t\tconst remoteContent = stringify({});\n\t\tconst actual = merge(localContent, remoteContent, null, ['a'], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, null);\n\t\tassert.strictEqual(actual.remoteContent, null);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('ignored setting is not merged when removed in remote from base', async () => {\n\t\tconst localContent = stringify({ 'a': 2 });\n\t\tconst remoteContent = stringify({});\n\t\tconst actual = merge(localContent, remoteContent, localContent, ['a'], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, null);\n\t\tassert.strictEqual(actual.remoteContent, null);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('ignored setting is not merged with other changes without conflicts', async () => {\n\t\tconst baseContent = stringify({\n\t\t\t'a': 2,\n\t\t\t'b': 2,\n\t\t\t'c': 3,\n\t\t\t'd': 4,\n\t\t\t'e': 5,\n\t\t});\n\t\tconst localContent = stringify({\n\t\t\t'a': 1,\n\t\t\t'b': 2,\n\t\t\t'c': 3,\n\t\t});\n\t\tconst remoteContent = stringify({\n\t\t\t'a': 3,\n\t\t\t'b': 3,\n\t\t\t'd': 4,\n\t\t\t'e': 6,\n\t\t});\n\t\tconst actual = merge(localContent, remoteContent, baseContent, ['a', 'e'], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, stringify({\n\t\t\t'a': 1,\n\t\t\t'b': 3,\n\t\t}));\n\t\tassert.strictEqual(actual.remoteContent, stringify({\n\t\t\t'a': 3,\n\t\t\t'b': 3,\n\t\t\t'e': 6,\n\t\t}));\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('ignored setting is not merged with other changes conflicts', async () => {\n\t\tconst baseContent = stringify({\n\t\t\t'a': 2,\n\t\t\t'b': 2,\n\t\t\t'c': 3,\n\t\t\t'd': 4,\n\t\t\t'e': 5,\n\t\t});\n\t\tconst localContent = stringify({\n\t\t\t'a': 1,\n\t\t\t'b': 4,\n\t\t\t'c': 3,\n\t\t\t'd': 5,\n\t\t});\n\t\tconst remoteContent = stringify({\n\t\t\t'a': 3,\n\t\t\t'b': 3,\n\t\t\t'e': 6,\n\t\t});\n\t\tconst expectedConflicts: IConflictSetting[] = [\n\t\t\t{ key: 'd', localValue: 5, remoteValue: undefined },\n\t\t\t{ key: 'b', localValue: 4, remoteValue: 3 },\n\t\t];\n\t\tconst actual = merge(localContent, remoteContent, baseContent, ['a', 'e'], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, stringify({\n\t\t\t'a': 1,\n\t\t\t'b': 4,\n\t\t\t'd': 5,\n\t\t}));\n\t\tassert.strictEqual(actual.remoteContent, stringify({\n\t\t\t'a': 3,\n\t\t\t'b': 3,\n\t\t\t'e': 6,\n\t\t}));\n\t\tassert.deepStrictEqual(actual.conflictsSettings, expectedConflicts);\n\t\tassert.ok(actual.hasConflicts);\n\t});\n\n\ttest('merge when remote has comments and local is empty', async () => {\n\t\tconst localContent = `\n{\n\n}`;\n\t\tconst remoteContent = stringify`\n{\n\t// this is a comment\n\t\"a\": 1,\n}`;\n\t\tconst actual = merge(localContent, remoteContent, null, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, remoteContent);\n\t\tassert.strictEqual(actual.remoteContent, null);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n});\n\nsuite('SettingsMerge - Compute Remote Content', () => {\n\n\ttest('local content is returned when there are no ignored settings', async () => {\n\t\tconst localContent = stringify({\n\t\t\t'a': 1,\n\t\t\t'b': 2,\n\t\t\t'c': 3,\n\t\t});\n\t\tconst remoteContent = stringify({\n\t\t\t'a': 3,\n\t\t\t'b': 3,\n\t\t\t'd': 4,\n\t\t\t'e': 6,\n\t\t});\n\t\tconst actual = updateIgnoredSettings(localContent, remoteContent, [], formattingOptions);\n\t\tassert.strictEqual(actual, localContent);\n\t});\n\n\ttest('ignored settings are not updated from remote content', async () => {\n\t\tconst localContent = stringify({\n\t\t\t'a': 1,\n\t\t\t'b': 2,\n\t\t\t'c': 3,\n\t\t});\n\t\tconst remoteContent = stringify({\n\t\t\t'a': 3,\n\t\t\t'b': 3,\n\t\t\t'd': 4,\n\t\t\t'e': 6,\n\t\t});\n\t\tconst expected = stringify({\n\t\t\t'a': 3,\n\t\t\t'b': 2,\n\t\t\t'c': 3,\n\t\t});\n\t\tconst actual = updateIgnoredSettings(localContent, remoteContent, ['a'], formattingOptions);\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n});\n\nsuite('SettingsMerge - Add Setting', () => {\n\n\ttest('Insert after a setting without comments', () => {\n\n\t\tconst sourceContent = `\n{\n\t\"a\": 1,\n\t\"b\": 2,\n\t\"c\": 3\n}`;\n\t\tconst targetContent = `\n{\n\t\"a\": 2,\n\t\"d\": 3\n}`;\n\n\t\tconst expected = `\n{\n\t\"a\": 2,\n\t\"b\": 2,\n\t\"d\": 3\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('Insert after a setting without comments at the end', () => {\n\n\t\tconst sourceContent = `\n{\n\t\"a\": 1,\n\t\"b\": 2,\n\t\"c\": 3\n}`;\n\t\tconst targetContent = `\n{\n\t\"a\": 2\n}`;\n\n\t\tconst expected = `\n{\n\t\"a\": 2,\n\t\"b\": 2\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('Insert between settings without comment', () => {\n\n\t\tconst sourceContent = `\n{\n\t\"a\": 1,\n\t\"b\": 2,\n\t\"c\": 3\n}`;\n\t\tconst targetContent = `\n{\n\t\"a\": 1,\n\t\"c\": 3\n}`;\n\n\t\tconst expected = `\n{\n\t\"a\": 1,\n\t\"b\": 2,\n\t\"c\": 3\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('Insert between settings and there is a comment in between in source', () => {\n\n\t\tconst sourceContent = `\n{\n\t\"a\": 1,\n\t// this is comment for b\n\t\"b\": 2,\n\t\"c\": 3\n}`;\n\t\tconst targetContent = `\n{\n\t\"a\": 1,\n\t\"c\": 3\n}`;\n\n\t\tconst expected = `\n{\n\t\"a\": 1,\n\t\"b\": 2,\n\t\"c\": 3\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('Insert after a setting and after a comment at the end', () => {\n\n\t\tconst sourceContent = `\n{\n\t\"a\": 1,\n\t// this is comment for b\n\t\"b\": 2\n}`;\n\t\tconst targetContent = `\n{\n\t\"a\": 1\n\t// this is comment for b\n}`;\n\n\t\tconst expected = `\n{\n\t\"a\": 1,\n\t// this is comment for b\n\t\"b\": 2\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('Insert after a setting ending with comma and after a comment at the end', () => {\n\n\t\tconst sourceContent = `\n{\n\t\"a\": 1,\n\t// this is comment for b\n\t\"b\": 2\n}`;\n\t\tconst targetContent = `\n{\n\t\"a\": 1,\n\t// this is comment for b\n}`;\n\n\t\tconst expected = `\n{\n\t\"a\": 1,\n\t// this is comment for b\n\t\"b\": 2\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('Insert after a comment and there are no settings', () => {\n\n\t\tconst sourceContent = `\n{\n\t// this is comment for b\n\t\"b\": 2\n}`;\n\t\tconst targetContent = `\n{\n\t// this is comment for b\n}`;\n\n\t\tconst expected = `\n{\n\t// this is comment for b\n\t\"b\": 2\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('Insert after a setting and between a comment and setting', () => {\n\n\t\tconst sourceContent = `\n{\n\t\"a\": 1,\n\t// this is comment for b\n\t\"b\": 2,\n\t\"c\": 3\n}`;\n\t\tconst targetContent = `\n{\n\t\"a\": 1,\n\t// this is comment for b\n\t\"c\": 3\n}`;\n\n\t\tconst expected = `\n{\n\t\"a\": 1,\n\t// this is comment for b\n\t\"b\": 2,\n\t\"c\": 3\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('Insert after a setting between two comments and there is a setting after', () => {\n\n\t\tconst sourceContent = `\n{\n\t\"a\": 1,\n\t// this is comment for b\n\t\"b\": 2,\n\t// this is comment for c\n\t\"c\": 3\n}`;\n\t\tconst targetContent = `\n{\n\t\"a\": 1,\n\t// this is comment for b\n\t// this is comment for c\n\t\"c\": 3\n}`;\n\n\t\tconst expected = `\n{\n\t\"a\": 1,\n\t// this is comment for b\n\t\"b\": 2,\n\t// this is comment for c\n\t\"c\": 3\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('Insert after a setting between two comments on the same line and there is a setting after', () => {\n\n\t\tconst sourceContent = `\n{\n\t\"a\": 1,\n\t/* this is comment for b */\n\t\"b\": 2,\n\t// this is comment for c\n\t\"c\": 3\n}`;\n\t\tconst targetContent = `\n{\n\t\"a\": 1,\n\t/* this is comment for b */ // this is comment for c\n\t\"c\": 3\n}`;\n\n\t\tconst expected = `\n{\n\t\"a\": 1,\n\t/* this is comment for b */\n\t\"b\": 2, // this is comment for c\n\t\"c\": 3\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('Insert after a setting between two line comments on the same line and there is a setting after', () => {\n\n\t\tconst sourceContent = `\n{\n\t\"a\": 1,\n\t/* this is comment for b */\n\t\"b\": 2,\n\t// this is comment for c\n\t\"c\": 3\n}`;\n\t\tconst targetContent = `\n{\n\t\"a\": 1,\n\t// this is comment for b // this is comment for c\n\t\"c\": 3\n}`;\n\n\t\tconst expected = `\n{\n\t\"a\": 1,\n\t// this is comment for b // this is comment for c\n\t\"b\": 2,\n\t\"c\": 3\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('Insert after a setting between two comments and there is no setting after', () => {\n\n\t\tconst sourceContent = `\n{\n\t\"a\": 1,\n\t// this is comment for b\n\t\"b\": 2\n\t// this is a comment\n}`;\n\t\tconst targetContent = `\n{\n\t\"a\": 1\n\t// this is comment for b\n\t// this is a comment\n}`;\n\n\t\tconst expected = `\n{\n\t\"a\": 1,\n\t// this is comment for b\n\t\"b\": 2\n\t// this is a comment\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('Insert after a setting with comma and between two comments and there is no setting after', () => {\n\n\t\tconst sourceContent = `\n{\n\t\"a\": 1,\n\t// this is comment for b\n\t\"b\": 2\n\t// this is a comment\n}`;\n\t\tconst targetContent = `\n{\n\t\"a\": 1,\n\t// this is comment for b\n\t// this is a comment\n}`;\n\n\t\tconst expected = `\n{\n\t\"a\": 1,\n\t// this is comment for b\n\t\"b\": 2\n\t// this is a comment\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\ttest('Insert before a setting without comments', () => {\n\n\t\tconst sourceContent = `\n{\n\t\"a\": 1,\n\t\"b\": 2,\n\t\"c\": 3\n}`;\n\t\tconst targetContent = `\n{\n\t\"d\": 2,\n\t\"c\": 3\n}`;\n\n\t\tconst expected = `\n{\n\t\"d\": 2,\n\t\"b\": 2,\n\t\"c\": 3\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('Insert before a setting without comments at the end', () => {\n\n\t\tconst sourceContent = `\n{\n\t\"a\": 1,\n\t\"b\": 2,\n\t\"c\": 3\n}`;\n\t\tconst targetContent = `\n{\n\t\"c\": 3\n}`;\n\n\t\tconst expected = `\n{\n\t\"b\": 2,\n\t\"c\": 3\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('Insert before a setting with comment', () => {\n\n\t\tconst sourceContent = `\n{\n\t\"a\": 1,\n\t\"b\": 2,\n\t// this is comment for c\n\t\"c\": 3\n}`;\n\t\tconst targetContent = `\n{\n\t// this is comment for c\n\t\"c\": 3\n}`;\n\n\t\tconst expected = `\n{\n\t\"b\": 2,\n\t// this is comment for c\n\t\"c\": 3\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('Insert before a setting and before a comment at the beginning', () => {\n\n\t\tconst sourceContent = `\n{\n\t// this is comment for b\n\t\"b\": 2,\n\t\"c\": 3,\n}`;\n\t\tconst targetContent = `\n{\n\t// this is comment for b\n\t\"c\": 3\n}`;\n\n\t\tconst expected = `\n{\n\t// this is comment for b\n\t\"b\": 2,\n\t\"c\": 3\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('Insert before a setting ending with comma and before a comment at the begninning', () => {\n\n\t\tconst sourceContent = `\n{\n\t// this is comment for b\n\t\"b\": 2,\n\t\"c\": 3,\n}`;\n\t\tconst targetContent = `\n{\n\t// this is comment for b\n\t\"c\": 3,\n}`;\n\n\t\tconst expected = `\n{\n\t// this is comment for b\n\t\"b\": 2,\n\t\"c\": 3,\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('Insert before a setting and between a setting and comment', () => {\n\n\t\tconst sourceContent = `\n{\n\t\"a\": 1,\n\t// this is comment for b\n\t\"b\": 2,\n\t\"c\": 3\n}`;\n\t\tconst targetContent = `\n{\n\t\"d\": 1,\n\t// this is comment for b\n\t\"c\": 3\n}`;\n\n\t\tconst expected = `\n{\n\t\"d\": 1,\n\t// this is comment for b\n\t\"b\": 2,\n\t\"c\": 3\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('Insert before a setting between two comments and there is a setting before', () => {\n\n\t\tconst sourceContent = `\n{\n\t\"a\": 1,\n\t// this is comment for b\n\t\"b\": 2,\n\t// this is comment for c\n\t\"c\": 3\n}`;\n\t\tconst targetContent = `\n{\n\t\"d\": 1,\n\t// this is comment for b\n\t// this is comment for c\n\t\"c\": 3\n}`;\n\n\t\tconst expected = `\n{\n\t\"d\": 1,\n\t// this is comment for b\n\t\"b\": 2,\n\t// this is comment for c\n\t\"c\": 3\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('Insert before a setting between two comments on the same line and there is a setting before', () => {\n\n\t\tconst sourceContent = `\n{\n\t\"a\": 1,\n\t/* this is comment for b */\n\t\"b\": 2,\n\t// this is comment for c\n\t\"c\": 3\n}`;\n\t\tconst targetContent = `\n{\n\t\"d\": 1,\n\t/* this is comment for b */ // this is comment for c\n\t\"c\": 3\n}`;\n\n\t\tconst expected = `\n{\n\t\"d\": 1,\n\t/* this is comment for b */\n\t\"b\": 2,\n\t// this is comment for c\n\t\"c\": 3\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('Insert before a setting between two line comments on the same line and there is a setting before', () => {\n\n\t\tconst sourceContent = `\n{\n\t\"a\": 1,\n\t/* this is comment for b */\n\t\"b\": 2,\n\t// this is comment for c\n\t\"c\": 3\n}`;\n\t\tconst targetContent = `\n{\n\t\"d\": 1,\n\t// this is comment for b // this is comment for c\n\t\"c\": 3\n}`;\n\n\t\tconst expected = `\n{\n\t\"d\": 1,\n\t\"b\": 2,\n\t// this is comment for b // this is comment for c\n\t\"c\": 3\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('Insert before a setting between two comments and there is no setting before', () => {\n\n\t\tconst sourceContent = `\n{\n\t// this is comment for b\n\t\"b\": 2,\n\t// this is comment for c\n\t\"c\": 1\n}`;\n\t\tconst targetContent = `\n{\n\t// this is comment for b\n\t// this is comment for c\n\t\"c\": 1\n}`;\n\n\t\tconst expected = `\n{\n\t// this is comment for b\n\t\"b\": 2,\n\t// this is comment for c\n\t\"c\": 1\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('Insert before a setting with comma and between two comments and there is no setting before', () => {\n\n\t\tconst sourceContent = `\n{\n\t// this is comment for b\n\t\"b\": 2,\n\t// this is comment for c\n\t\"c\": 1\n}`;\n\t\tconst targetContent = `\n{\n\t// this is comment for b\n\t// this is comment for c\n\t\"c\": 1,\n}`;\n\n\t\tconst expected = `\n{\n\t// this is comment for b\n\t\"b\": 2,\n\t// this is comment for c\n\t\"c\": 1,\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('Insert after a setting that is of object type', () => {\n\n\t\tconst sourceContent = `\n{\n\t\"b\": {\n\t\t\"d\": 1\n\t},\n\t\"a\": 2,\n\t\"c\": 1\n}`;\n\t\tconst targetContent = `\n{\n\t\"b\": {\n\t\t\"d\": 1\n\t},\n\t\"c\": 1\n}`;\n\n\t\tconst actual = addSetting('a', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, sourceContent);\n\t});\n\n\ttest('Insert after a setting that is of array type', () => {\n\n\t\tconst sourceContent = `\n{\n\t\"b\": [\n\t\t1\n\t],\n\t\"a\": 2,\n\t\"c\": 1\n}`;\n\t\tconst targetContent = `\n{\n\t\"b\": [\n\t\t1\n\t],\n\t\"c\": 1\n}`;\n\n\t\tconst actual = addSetting('a', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, sourceContent);\n\t});\n\n\ttest('Insert after a comment with comma separator of previous setting and no next nodes ', () => {\n\n\t\tconst sourceContent = `\n{\n\t\"a\": 1\n\t// this is comment for a\n\t,\n\t\"b\": 2\n}`;\n\t\tconst targetContent = `\n{\n\t\"a\": 1\n\t// this is comment for a\n\t,\n}`;\n\n\t\tconst expected = `\n{\n\t\"a\": 1\n\t// this is comment for a\n\t,\n\t\"b\": 2\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('Insert after a comment with comma separator of previous setting and there is a setting after ', () => {\n\n\t\tconst sourceContent = `\n{\n\t\"a\": 1\n\t// this is comment for a\n\t,\n\t\"b\": 2,\n\t\"c\": 3\n}`;\n\t\tconst targetContent = `\n{\n\t\"a\": 1\n\t// this is comment for a\n\t,\n\t\"c\": 3\n}`;\n\n\t\tconst expected = `\n{\n\t\"a\": 1\n\t// this is comment for a\n\t,\n\t\"b\": 2,\n\t\"c\": 3\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('Insert after a comment with comma separator of previous setting and there is a comment after ', () => {\n\n\t\tconst sourceContent = `\n{\n\t\"a\": 1\n\t// this is comment for a\n\t,\n\t\"b\": 2\n\t// this is a comment\n}`;\n\t\tconst targetContent = `\n{\n\t\"a\": 1\n\t// this is comment for a\n\t,\n\t// this is a comment\n}`;\n\n\t\tconst expected = `\n{\n\t\"a\": 1\n\t// this is comment for a\n\t,\n\t\"b\": 2\n\t// this is a comment\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n});\n\n\nfunction stringify(value: any): string {\n\treturn JSON.stringify(value, null, '\\t');\n}\n"]}