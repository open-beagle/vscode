{"version":3,"file":"userDataAutoSyncService.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/userDataSync/test/common/userDataAutoSyncService.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAchG,MAAM,2BAA4B,SAAQ,iDAAuB;QAC7C,aAAa,KAAc,OAAO,KAAK,CAAC,CAAC,CAAC;QAC1C,uBAAuB,KAAa,OAAO,EAAE,CAAC,CAAC,CAAC;QAEnE,IAAI;YACH,OAAO,IAAI,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QACjD,CAAC;KACD;IAED,KAAK,CAAC,yBAAyB,EAAE,GAAG,EAAE;QAErC,MAAM,eAAe,GAAG,IAAI,2BAAe,EAAE,CAAC;QAE9C,QAAQ,CAAC,GAAG,EAAE,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC,CAAC;QAExC,IAAI,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;YACzE,mBAAmB;YACnB,MAAM,MAAM,GAAG,IAAI,2CAAsB,EAAE,CAAC;YAC5C,MAAM,MAAM,GAAG,eAAe,CAAC,GAAG,CAAC,IAAI,uCAAkB,CAAC,MAAM,CAAC,CAAC,CAAC;YACnE,MAAM,MAAM,CAAC,KAAK,EAAE,CAAC;YAErB,+BAA+B;YAC/B,MAAM,CAAC,MAAM,MAAM,CAAC,oBAAoB,CAAC,GAAG,CAAC,mCAAoB,CAAC,CAAC,cAAc,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC;YAC3F,MAAM,CAAC,KAAK,EAAE,CAAC;YAEf,MAAM,UAAU,GAA4B,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,oBAAoB,CAAC,cAAc,CAAC,2BAA2B,CAAC,CAAC,CAAC;YAEzI,yCAAyC;YACzC,MAAM,UAAU,CAAC,WAAW,CAAC,2BAAuB,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;YAEpE,8BAA8B;YAC9B,MAAM,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,MAAM,CAAC,GAAG,uBAAuB,CAAC,CAAC,CAAC;YAEhH,8CAA8C;YAC9C,MAAM,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,GAAG,cAAc,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;QAClG,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,yEAAyE,EAAE,KAAK,IAAI,EAAE;YAC1F,mBAAmB;YACnB,MAAM,MAAM,GAAG,IAAI,2CAAsB,EAAE,CAAC;YAC5C,MAAM,MAAM,GAAG,eAAe,CAAC,GAAG,CAAC,IAAI,uCAAkB,CAAC,MAAM,CAAC,CAAC,CAAC;YACnE,MAAM,MAAM,CAAC,KAAK,EAAE,CAAC;YAErB,+BAA+B;YAC/B,MAAM,CAAC,MAAM,MAAM,CAAC,oBAAoB,CAAC,GAAG,CAAC,mCAAoB,CAAC,CAAC,cAAc,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC;YAC3F,MAAM,CAAC,KAAK,EAAE,CAAC;YAEf,MAAM,UAAU,GAA4B,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,oBAAoB,CAAC,cAAc,CAAC,2BAA2B,CAAC,CAAC,CAAC;YAEzI,wDAAwD;YACxD,KAAK,IAAI,OAAO,GAAG,CAAC,EAAE,OAAO,GAAG,CAAC,EAAE,OAAO,EAAE,EAAE;gBAC7C,MAAM,UAAU,CAAC,WAAW,CAAC,2BAAuB,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;aACpE;YAED,8BAA8B;YAC9B,MAAM,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,MAAM,CAAC,GAAG,uBAAuB,CAAC,CAAC,CAAC;YAEhH,MAAM,CAAC,eAAe,CAAC,MAAM,EAAE;gBAC9B,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,GAAG,cAAc,EAAE,OAAO,EAAE,EAAE,EAAE;gBAC9D,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,GAAG,cAAc,EAAE,OAAO,EAAE,EAAE,EAAE;aAC9D,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,4DAA4D,EAAE,KAAK,IAAI,EAAE;YAC7E,mBAAmB;YACnB,MAAM,MAAM,GAAG,IAAI,2CAAsB,EAAE,CAAC;YAC5C,MAAM,MAAM,GAAG,eAAe,CAAC,GAAG,CAAC,IAAI,uCAAkB,CAAC,MAAM,CAAC,CAAC,CAAC;YACnE,MAAM,MAAM,CAAC,KAAK,EAAE,CAAC;YAErB,+BAA+B;YAC/B,MAAM,CAAC,MAAM,MAAM,CAAC,oBAAoB,CAAC,GAAG,CAAC,mCAAoB,CAAC,CAAC,cAAc,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC;YAC3F,MAAM,CAAC,KAAK,EAAE,CAAC;YAEf,MAAM,UAAU,GAA4B,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,oBAAoB,CAAC,cAAc,CAAC,2BAA2B,CAAC,CAAC,CAAC;YAEzI,2CAA2C;YAC3C,MAAM,UAAU,CAAC,WAAW,CAAC,CAAC,aAAa,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;YAE3D,8BAA8B;YAC9B,MAAM,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,MAAM,CAAC,GAAG,uBAAuB,CAAC,CAAC,CAAC;YAEhH,8CAA8C;YAC9C,MAAM,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,GAAG,cAAc,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;QAClG,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,gFAAgF,EAAE,KAAK,IAAI,EAAE;YACjG,mBAAmB;YACnB,MAAM,MAAM,GAAG,IAAI,2CAAsB,EAAE,CAAC;YAC5C,MAAM,MAAM,GAAG,eAAe,CAAC,GAAG,CAAC,IAAI,uCAAkB,CAAC,MAAM,CAAC,CAAC,CAAC;YACnE,MAAM,MAAM,CAAC,KAAK,EAAE,CAAC;YAErB,+BAA+B;YAC/B,MAAM,CAAC,MAAM,MAAM,CAAC,oBAAoB,CAAC,GAAG,CAAC,mCAAoB,CAAC,CAAC,cAAc,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC;YAC3F,MAAM,CAAC,KAAK,EAAE,CAAC;YAEf,MAAM,UAAU,GAA4B,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,oBAAoB,CAAC,cAAc,CAAC,2BAA2B,CAAC,CAAC,CAAC;YAEzI,qDAAqD;YACrD,KAAK,IAAI,OAAO,GAAG,CAAC,EAAE,OAAO,GAAG,CAAC,EAAE,OAAO,EAAE,EAAE;gBAC7C,MAAM,UAAU,CAAC,WAAW,CAAC,CAAC,aAAa,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;aAC3D;YAED,8BAA8B;YAC9B,MAAM,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,MAAM,CAAC,GAAG,uBAAuB,CAAC,CAAC,CAAC;YAEhH,8CAA8C;YAC9C,MAAM,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,GAAG,cAAc,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;QAClG,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;YAChD,mBAAmB;YACnB,MAAM,MAAM,GAAG,IAAI,2CAAsB,EAAE,CAAC;YAC5C,MAAM,MAAM,GAAG,eAAe,CAAC,GAAG,CAAC,IAAI,uCAAkB,CAAC,MAAM,CAAC,CAAC,CAAC;YACnE,MAAM,MAAM,CAAC,KAAK,EAAE,CAAC;YACrB,MAAM,UAAU,GAAgC,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,oBAAoB,CAAC,cAAc,CAAC,2BAA2B,CAAC,CAAC,CAAC;YAE7I,MAAM,UAAU,CAAC,IAAI,EAAE,CAAC;YAExB,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,QAAQ,EAAE;gBACvC,WAAW;gBACX,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,GAAG,cAAc,EAAE,OAAO,EAAE,EAAE,EAAE;gBAC9D,WAAW;gBACX,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,GAAG,8BAA8B,EAAE,OAAO,EAAE,EAAE,EAAE;gBAC9E,WAAW;gBACX,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,GAAG,8BAA8B,EAAE,OAAO,EAAE,EAAE,EAAE;gBAC9E,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,GAAG,uBAAuB,EAAE,OAAO,EAAE,EAAE,UAAU,EAAE,GAAG,EAAE,EAAE;gBACzF,cAAc;gBACd,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,GAAG,iCAAiC,EAAE,OAAO,EAAE,EAAE,EAAE;gBACjF,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,GAAG,0BAA0B,EAAE,OAAO,EAAE,EAAE,UAAU,EAAE,GAAG,EAAE,EAAE;gBAC5F,WAAW;gBACX,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,GAAG,8BAA8B,EAAE,OAAO,EAAE,EAAE,EAAE;gBAC9E,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,GAAG,uBAAuB,EAAE,OAAO,EAAE,EAAE,UAAU,EAAE,GAAG,EAAE,EAAE;gBACzF,eAAe;gBACf,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,GAAG,iCAAiC,EAAE,OAAO,EAAE,EAAE,EAAE;gBACjF,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,GAAG,0BAA0B,EAAE,OAAO,EAAE,EAAE,UAAU,EAAE,GAAG,EAAE,EAAE;gBAC5F,aAAa;gBACb,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,GAAG,gCAAgC,EAAE,OAAO,EAAE,EAAE,EAAE;gBAChF,WAAW;gBACX,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,GAAG,cAAc,EAAE,OAAO,EAAE,EAAE,EAAE;gBAC9D,WAAW;gBACX,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,GAAG,uBAAuB,EAAE,OAAO,EAAE,EAAE,UAAU,EAAE,GAAG,EAAE,EAAE;aACzF,CAAC,CAAC;QAEJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;YAClE,mBAAmB;YACnB,MAAM,MAAM,GAAG,IAAI,2CAAsB,EAAE,CAAC;YAC5C,MAAM,MAAM,GAAG,eAAe,CAAC,GAAG,CAAC,IAAI,uCAAkB,CAAC,MAAM,CAAC,CAAC,CAAC;YACnE,MAAM,MAAM,CAAC,KAAK,EAAE,CAAC;YACrB,MAAM,UAAU,GAAgC,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,oBAAoB,CAAC,cAAc,CAAC,2BAA2B,CAAC,CAAC,CAAC;YAE7I,+BAA+B;YAC/B,MAAM,UAAU,CAAC,IAAI,EAAE,CAAC;YACxB,MAAM,CAAC,KAAK,EAAE,CAAC;YAEf,MAAM,UAAU,CAAC,IAAI,EAAE,CAAC;YAExB,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,QAAQ,EAAE;gBACvC,WAAW;gBACX,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,GAAG,cAAc,EAAE,OAAO,EAAE,EAAE,EAAE;aAC9D,CAAC,CAAC;QAEJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;YAC/D,mBAAmB;YACnB,MAAM,MAAM,GAAG,IAAI,2CAAsB,EAAE,CAAC;YAC5C,MAAM,MAAM,GAAG,eAAe,CAAC,GAAG,CAAC,IAAI,uCAAkB,CAAC,MAAM,CAAC,CAAC,CAAC;YACnE,MAAM,MAAM,CAAC,KAAK,EAAE,CAAC;YACrB,MAAM,UAAU,GAAgC,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,oBAAoB,CAAC,cAAc,CAAC,2BAA2B,CAAC,CAAC,CAAC;YAE7I,+BAA+B;YAC/B,MAAM,UAAU,CAAC,IAAI,EAAE,CAAC;YACxB,MAAM,CAAC,KAAK,EAAE,CAAC;YAEf,2BAA2B;YAC3B,MAAM,WAAW,GAAG,MAAM,CAAC,oBAAoB,CAAC,GAAG,CAAC,oBAAY,CAAC,CAAC;YAClE,MAAM,kBAAkB,GAAG,MAAM,CAAC,oBAAoB,CAAC,GAAG,CAAC,iCAAmB,CAAC,CAAC;YAChF,MAAM,WAAW,CAAC,SAAS,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,iBAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,iBAAiB,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;YACjI,MAAM,WAAW,CAAC,SAAS,CAAC,kBAAkB,CAAC,mBAAmB,EAAE,iBAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,SAAS,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAClJ,MAAM,WAAW,CAAC,SAAS,CAAC,CAAA,GAAA,oBAAQ,CAAA,CAAC,kBAAkB,CAAC,YAAY,EAAE,WAAW,CAAC,EAAE,iBAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;YAC/G,MAAM,WAAW,CAAC,SAAS,CAAC,kBAAkB,CAAC,YAAY,EAAE,iBAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;YACtH,MAAM,UAAU,CAAC,IAAI,EAAE,CAAC;YAExB,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,QAAQ,EAAE;gBACvC,WAAW;gBACX,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,GAAG,cAAc,EAAE,OAAO,EAAE,EAAE,EAAE;gBAC9D,WAAW;gBACX,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,GAAG,uBAAuB,EAAE,OAAO,EAAE,EAAE,UAAU,EAAE,GAAG,EAAE,EAAE;gBACzF,cAAc;gBACd,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,GAAG,0BAA0B,EAAE,OAAO,EAAE,EAAE,UAAU,EAAE,GAAG,EAAE,EAAE;gBAC5F,WAAW;gBACX,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,GAAG,uBAAuB,EAAE,OAAO,EAAE,EAAE,UAAU,EAAE,GAAG,EAAE,EAAE;gBACzF,eAAe;gBACf,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,GAAG,0BAA0B,EAAE,OAAO,EAAE,EAAE,UAAU,EAAE,GAAG,EAAE,EAAE;aAC5F,CAAC,CAAC;QAEJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;YAC1D,mBAAmB;YACnB,MAAM,MAAM,GAAG,IAAI,2CAAsB,EAAE,CAAC;YAC5C,MAAM,MAAM,GAAG,eAAe,CAAC,GAAG,CAAC,IAAI,uCAAkB,CAAC,MAAM,CAAC,CAAC,CAAC;YACnE,MAAM,MAAM,CAAC,KAAK,EAAE,CAAC;YACrB,MAAM,UAAU,GAAgC,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,oBAAoB,CAAC,cAAc,CAAC,2BAA2B,CAAC,CAAC,CAAC;YAE7I,+BAA+B;YAC/B,MAAM,UAAU,CAAC,IAAI,EAAE,CAAC;YACxB,MAAM,CAAC,KAAK,EAAE,CAAC;YAEf,MAAM,UAAU,CAAC,IAAI,EAAE,CAAC;YAExB,KAAK,MAAM,OAAO,IAAI,MAAM,CAAC,sBAAsB,EAAE;gBACpD,MAAM,oBAAoB,GAAG,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,gBAAgB,CAAC,IAAI,OAAO,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;gBAClI,IAAI,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,MAAM,CAAC,GAAG,uBAAuB,CAAC,EAAE;oBACjE,MAAM,CAAC,EAAE,CAAC,CAAC,oBAAoB,EAAE,qCAAqC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;iBACrF;qBAAM;oBACN,MAAM,CAAC,EAAE,CAAC,oBAAoB,EAAE,iCAAiC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;iBAChF;aACD;QAEF,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,iFAAiF,EAAE,KAAK,IAAI,EAAE;YAClG,MAAM,MAAM,GAAG,IAAI,2CAAsB,EAAE,CAAC;YAE5C,kCAAkC;YAClC,MAAM,MAAM,GAAG,eAAe,CAAC,GAAG,CAAC,IAAI,uCAAkB,CAAC,MAAM,CAAC,CAAC,CAAC;YACnE,MAAM,MAAM,CAAC,KAAK,EAAE,CAAC;YACrB,MAAM,CAAC,MAAM,MAAM,CAAC,oBAAoB,CAAC,GAAG,CAAC,mCAAoB,CAAC,CAAC,cAAc,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC;YAE3F,uCAAuC;YACvC,MAAM,UAAU,GAAG,eAAe,CAAC,GAAG,CAAC,IAAI,uCAAkB,CAAC,MAAM,CAAC,CAAC,CAAC;YACvE,MAAM,UAAU,CAAC,KAAK,EAAE,CAAC;YACzB,MAAM,UAAU,GAAgC,eAAe,CAAC,GAAG,CAAC,UAAU,CAAC,oBAAoB,CAAC,cAAc,CAAC,2BAA2B,CAAC,CAAC,CAAC;YACjJ,MAAM,UAAU,CAAC,IAAI,EAAE,CAAC;YAExB,8BAA8B;YAC9B,MAAM,MAAM,CAAC,oBAAoB,CAAC,GAAG,CAAC,mCAAoB,CAAC,CAAC,KAAK,EAAE,CAAC;YAEpE,4BAA4B;YAC5B,MAAM,CAAC,KAAK,EAAE,CAAC;YAEf,MAAM,YAAY,GAAG,aAAK,CAAC,SAAS,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;YACzD,MAAM,UAAU,CAAC,IAAI,EAAE,CAAC;YAExB,MAAM,CAAC,GAAG,MAAM,YAAY,CAAC;YAC7B,MAAM,CAAC,EAAE,CAAC,CAAC,YAAY,oCAAqB,CAAC,CAAC;YAC9C,MAAM,CAAC,eAAe,CAAyB,CAAE,CAAC,IAAI,EAAE,oCAAqB,CAAC,SAAS,CAAC,CAAC;YACzF,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,QAAQ,EAAE;gBACvC,WAAW;gBACX,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,GAAG,cAAc,EAAE,OAAO,EAAE,EAAE,EAAE;gBAC9D,UAAU;gBACV,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,GAAG,8BAA8B,EAAE,OAAO,EAAE,EAAE,eAAe,EAAE,GAAG,EAAE,EAAE;aACpG,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;YAC5D,MAAM,MAAM,GAAG,IAAI,2CAAsB,EAAE,CAAC;YAE5C,uCAAuC;YACvC,MAAM,UAAU,GAAG,eAAe,CAAC,GAAG,CAAC,IAAI,uCAAkB,CAAC,MAAM,CAAC,CAAC,CAAC;YACvE,MAAM,UAAU,CAAC,KAAK,EAAE,CAAC;YACzB,MAAM,UAAU,GAAgC,eAAe,CAAC,GAAG,CAAC,UAAU,CAAC,oBAAoB,CAAC,cAAc,CAAC,2BAA2B,CAAC,CAAC,CAAC;YACjJ,MAAM,UAAU,CAAC,IAAI,EAAE,CAAC;YAExB,0BAA0B;YAC1B,MAAM,2BAA2B,GAAG,UAAU,CAAC,oBAAoB,CAAC,GAAG,CAAC,mDAA4B,CAAC,CAAC;YACtG,MAAM,QAAQ,GAAG,MAAM,2BAA2B,CAAC,WAAW,EAAE,CAAC;YACjE,MAAM,cAAc,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAE,CAAC;YACxD,MAAM,2BAA2B,CAAC,aAAa,CAAC,cAAc,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;YAE1E,MAAM,CAAC,KAAK,EAAE,CAAC;YAEf,MAAM,YAAY,GAAG,aAAK,CAAC,SAAS,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;YACzD,MAAM,UAAU,CAAC,IAAI,EAAE,CAAC;YAExB,MAAM,CAAC,GAAG,MAAM,YAAY,CAAC;YAC7B,MAAM,CAAC,EAAE,CAAC,CAAC,YAAY,oCAAqB,CAAC,CAAC;YAC9C,MAAM,CAAC,eAAe,CAAyB,CAAE,CAAC,IAAI,EAAE,oCAAqB,CAAC,SAAS,CAAC,CAAC;YACzF,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,QAAQ,EAAE;gBACvC,WAAW;gBACX,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,GAAG,cAAc,EAAE,OAAO,EAAE,EAAE,EAAE;gBAC9D,UAAU;gBACV,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,GAAG,8BAA8B,EAAE,OAAO,EAAE,EAAE,eAAe,EAAE,GAAG,EAAE,EAAE;gBACpG,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,GAAG,uBAAuB,EAAE,OAAO,EAAE,EAAE,UAAU,EAAE,GAAG,EAAE,EAAE;aACzF,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;YAC9D,MAAM,MAAM,GAAG,IAAI,2CAAsB,EAAE,CAAC;YAE5C,uCAAuC;YACvC,MAAM,UAAU,GAAG,eAAe,CAAC,GAAG,CAAC,IAAI,uCAAkB,CAAC,MAAM,CAAC,CAAC,CAAC;YACvE,MAAM,UAAU,CAAC,KAAK,EAAE,CAAC;YACzB,MAAM,UAAU,GAAgC,eAAe,CAAC,GAAG,CAAC,UAAU,CAAC,oBAAoB,CAAC,cAAc,CAAC,2BAA2B,CAAC,CAAC,CAAC;YACjJ,MAAM,UAAU,CAAC,IAAI,EAAE,CAAC;YAExB,yBAAyB;YACzB,MAAM,UAAU,CAAC,oBAAoB,CAAC,GAAG,CAAC,mDAA4B,CAAC,CAAC,oBAAoB,EAAE,CAAC;YAE/F,MAAM,CAAC,KAAK,EAAE,CAAC;YAEf,MAAM,UAAU,CAAC,IAAI,EAAE,CAAC;YACxB,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,QAAQ,EAAE;gBACvC,WAAW;gBACX,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,GAAG,cAAc,EAAE,OAAO,EAAE,EAAE,EAAE;gBAC9D,UAAU;gBACV,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,GAAG,uBAAuB,EAAE,OAAO,EAAE,EAAE,UAAU,EAAE,GAAG,EAAE,EAAE;aACzF,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,wGAAwG,EAAE,KAAK,IAAI,EAAE;YACzH,MAAM,MAAM,GAAG,IAAI,2CAAsB,EAAE,CAAC;YAE5C,kCAAkC;YAClC,MAAM,MAAM,GAAG,eAAe,CAAC,GAAG,CAAC,IAAI,uCAAkB,CAAC,MAAM,CAAC,CAAC,CAAC;YACnE,MAAM,MAAM,CAAC,KAAK,EAAE,CAAC;YACrB,MAAM,CAAC,MAAM,MAAM,CAAC,oBAAoB,CAAC,GAAG,CAAC,mCAAoB,CAAC,CAAC,cAAc,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC;YAE3F,uCAAuC;YACvC,MAAM,UAAU,GAAG,eAAe,CAAC,GAAG,CAAC,IAAI,uCAAkB,CAAC,MAAM,CAAC,CAAC,CAAC;YACvE,MAAM,UAAU,CAAC,KAAK,EAAE,CAAC;YACzB,MAAM,UAAU,GAAgC,eAAe,CAAC,GAAG,CAAC,UAAU,CAAC,oBAAoB,CAAC,cAAc,CAAC,2BAA2B,CAAC,CAAC,CAAC;YACjJ,MAAM,UAAU,CAAC,IAAI,EAAE,CAAC;YAExB,8BAA8B;YAC9B,MAAM,MAAM,CAAC,oBAAoB,CAAC,GAAG,CAAC,mCAAoB,CAAC,CAAC,KAAK,EAAE,CAAC;YAEpE,yDAAyD;YACzD,MAAM,CAAC,MAAM,MAAM,CAAC,oBAAoB,CAAC,GAAG,CAAC,mCAAoB,CAAC,CAAC,cAAc,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC;YAE3F,4BAA4B;YAC5B,MAAM,CAAC,KAAK,EAAE,CAAC;YAEf,MAAM,YAAY,GAAG,aAAK,CAAC,SAAS,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;YACzD,MAAM,UAAU,CAAC,IAAI,EAAE,CAAC;YAExB,MAAM,CAAC,GAAG,MAAM,YAAY,CAAC;YAC7B,MAAM,CAAC,EAAE,CAAC,CAAC,YAAY,oCAAqB,CAAC,CAAC;YAC9C,MAAM,CAAC,eAAe,CAAyB,CAAE,CAAC,IAAI,EAAE,oCAAqB,CAAC,cAAc,CAAC,CAAC;YAC9F,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,QAAQ,EAAE;gBACvC,WAAW;gBACX,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,GAAG,cAAc,EAAE,OAAO,EAAE,EAAE,EAAE;gBAC9D,UAAU;gBACV,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,GAAG,8BAA8B,EAAE,OAAO,EAAE,EAAE,eAAe,EAAE,GAAG,EAAE,EAAE;aACpG,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,2BAA2B,EAAE,KAAK,IAAI,EAAE;YAC5C,MAAM,MAAM,GAAG,IAAI,2CAAsB,CAAC,CAAC,CAAC,CAAC;YAE7C,uCAAuC;YACvC,MAAM,UAAU,GAAG,eAAe,CAAC,GAAG,CAAC,IAAI,uCAAkB,CAAC,MAAM,CAAC,CAAC,CAAC;YACvE,MAAM,UAAU,CAAC,KAAK,EAAE,CAAC;YACzB,MAAM,UAAU,GAAgC,eAAe,CAAC,GAAG,CAAC,UAAU,CAAC,oBAAoB,CAAC,cAAc,CAAC,2BAA2B,CAAC,CAAC,CAAC;YAEjJ,MAAM,YAAY,GAAG,aAAK,CAAC,SAAS,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;YACzD,OAAO,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;gBAClC,MAAM,UAAU,CAAC,IAAI,EAAE,CAAC;aACxB;YAED,MAAM,CAAC,GAAG,MAAM,YAAY,CAAC;YAC7B,MAAM,CAAC,EAAE,CAAC,CAAC,YAAY,qCAAsB,CAAC,CAAC;YAC/C,MAAM,CAAC,eAAe,CAA0B,CAAE,CAAC,IAAI,EAAE,oCAAqB,CAAC,eAAe,CAAC,CAAC;QACjG,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,gEAAgE,EAAE,KAAK,IAAI,EAAE;YACjF,MAAM,MAAM,GAAG,IAAI,2CAAsB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAEhD,uCAAuC;YACvC,MAAM,UAAU,GAAG,eAAe,CAAC,GAAG,CAAC,IAAI,uCAAkB,CAAC,MAAM,CAAC,CAAC,CAAC;YACvE,MAAM,UAAU,CAAC,KAAK,EAAE,CAAC;YACzB,MAAM,UAAU,GAAgC,eAAe,CAAC,GAAG,CAAC,UAAU,CAAC,oBAAoB,CAAC,cAAc,CAAC,2BAA2B,CAAC,CAAC,CAAC;YAEjJ,OAAO,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;gBAClC,MAAM,UAAU,CAAC,IAAI,EAAE,CAAC;aACxB;YAED,MAAM,CAAC,KAAK,EAAE,CAAC;YACf,MAAM,UAAU,CAAC,IAAI,EAAE,CAAC;YAExB,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,0FAA0F,EAAE,KAAK,IAAI,EAAE;YAC3G,MAAM,MAAM,GAAG,IAAI,2CAAsB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAEhD,uCAAuC;YACvC,MAAM,UAAU,GAAG,eAAe,CAAC,GAAG,CAAC,IAAI,uCAAkB,CAAC,MAAM,CAAC,CAAC,CAAC;YACvE,MAAM,UAAU,CAAC,KAAK,EAAE,CAAC;YACzB,MAAM,UAAU,GAAgC,eAAe,CAAC,GAAG,CAAC,UAAU,CAAC,oBAAoB,CAAC,cAAc,CAAC,2BAA2B,CAAC,CAAC,CAAC;YAEjJ,MAAM,UAAU,CAAC,WAAW,CAAC,CAAC,aAAa,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;YAC1D,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC,OAAQ,CAAC,eAAe,CAAC,EAAE,UAAU,CAAC,CAAC;QAC5F,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,mFAAmF,EAAE,KAAK,IAAI,EAAE;YACpG,MAAM,MAAM,GAAG,IAAI,2CAAsB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAEhD,uCAAuC;YACvC,MAAM,UAAU,GAAG,eAAe,CAAC,GAAG,CAAC,IAAI,uCAAkB,CAAC,MAAM,CAAC,CAAC,CAAC;YACvE,MAAM,UAAU,CAAC,KAAK,EAAE,CAAC;YACzB,MAAM,UAAU,GAAgC,eAAe,CAAC,GAAG,CAAC,UAAU,CAAC,oBAAoB,CAAC,cAAc,CAAC,2BAA2B,CAAC,CAAC,CAAC;YAEjJ,MAAM,UAAU,CAAC,WAAW,CAAC,CAAC,aAAa,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;YAC3D,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC,OAAQ,CAAC,eAAe,CAAC,EAAE,SAAS,CAAC,CAAC;QAC3F,CAAC,CAAC,CAAC;IAEJ,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { UserDataSyncClient, UserDataSyncTestServer } from 'vs/platform/userDataSync/test/common/userDataSyncClient';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { UserDataAutoSyncService } from 'vs/platform/userDataSync/common/userDataAutoSyncService';\nimport { IUserDataSyncService, SyncResource, UserDataAutoSyncError, UserDataSyncErrorCode, UserDataSyncStoreError } from 'vs/platform/userDataSync/common/userDataSync';\nimport { Event } from 'vs/base/common/event';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { joinPath } from 'vs/base/common/resources';\nimport { IUserDataSyncMachinesService } from 'vs/platform/userDataSync/common/userDataSyncMachines';\n\nclass TestUserDataAutoSyncService extends UserDataAutoSyncService {\n\tprotected override startAutoSync(): boolean { return false; }\n\tprotected override getSyncTriggerDelayTime(): number { return 50; }\n\n\tsync(): Promise<void> {\n\t\treturn this.triggerSync(['sync'], false, false);\n\t}\n}\n\nsuite('UserDataAutoSyncService', () => {\n\n\tconst disposableStore = new DisposableStore();\n\n\tteardown(() => disposableStore.clear());\n\n\ttest('test auto sync with sync resource change triggers sync', async () => {\n\t\t// Setup the client\n\t\tconst target = new UserDataSyncTestServer();\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\n\t\t// Sync once and reset requests\n\t\tawait (await client.instantiationService.get(IUserDataSyncService).createSyncTask()).run();\n\t\ttarget.reset();\n\n\t\tconst testObject: UserDataAutoSyncService = disposableStore.add(client.instantiationService.createInstance(TestUserDataAutoSyncService));\n\n\t\t// Trigger auto sync with settings change\n\t\tawait testObject.triggerSync([SyncResource.Settings], false, false);\n\n\t\t// Filter out machine requests\n\t\tconst actual = target.requests.filter(request => !request.url.startsWith(`${target.url}/v1/resource/machines`));\n\n\t\t// Make sure only one manifest request is made\n\t\tassert.deepStrictEqual(actual, [{ type: 'GET', url: `${target.url}/v1/manifest`, headers: {} }]);\n\t});\n\n\ttest('test auto sync with sync resource change triggers sync for every change', async () => {\n\t\t// Setup the client\n\t\tconst target = new UserDataSyncTestServer();\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\n\t\t// Sync once and reset requests\n\t\tawait (await client.instantiationService.get(IUserDataSyncService).createSyncTask()).run();\n\t\ttarget.reset();\n\n\t\tconst testObject: UserDataAutoSyncService = disposableStore.add(client.instantiationService.createInstance(TestUserDataAutoSyncService));\n\n\t\t// Trigger auto sync with settings change multiple times\n\t\tfor (let counter = 0; counter < 2; counter++) {\n\t\t\tawait testObject.triggerSync([SyncResource.Settings], false, false);\n\t\t}\n\n\t\t// Filter out machine requests\n\t\tconst actual = target.requests.filter(request => !request.url.startsWith(`${target.url}/v1/resource/machines`));\n\n\t\tassert.deepStrictEqual(actual, [\n\t\t\t{ type: 'GET', url: `${target.url}/v1/manifest`, headers: {} },\n\t\t\t{ type: 'GET', url: `${target.url}/v1/manifest`, headers: {} }\n\t\t]);\n\t});\n\n\ttest('test auto sync with non sync resource change triggers sync', async () => {\n\t\t// Setup the client\n\t\tconst target = new UserDataSyncTestServer();\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\n\t\t// Sync once and reset requests\n\t\tawait (await client.instantiationService.get(IUserDataSyncService).createSyncTask()).run();\n\t\ttarget.reset();\n\n\t\tconst testObject: UserDataAutoSyncService = disposableStore.add(client.instantiationService.createInstance(TestUserDataAutoSyncService));\n\n\t\t// Trigger auto sync with window focus once\n\t\tawait testObject.triggerSync(['windowFocus'], true, false);\n\n\t\t// Filter out machine requests\n\t\tconst actual = target.requests.filter(request => !request.url.startsWith(`${target.url}/v1/resource/machines`));\n\n\t\t// Make sure only one manifest request is made\n\t\tassert.deepStrictEqual(actual, [{ type: 'GET', url: `${target.url}/v1/manifest`, headers: {} }]);\n\t});\n\n\ttest('test auto sync with non sync resource change does not trigger continuous syncs', async () => {\n\t\t// Setup the client\n\t\tconst target = new UserDataSyncTestServer();\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\n\t\t// Sync once and reset requests\n\t\tawait (await client.instantiationService.get(IUserDataSyncService).createSyncTask()).run();\n\t\ttarget.reset();\n\n\t\tconst testObject: UserDataAutoSyncService = disposableStore.add(client.instantiationService.createInstance(TestUserDataAutoSyncService));\n\n\t\t// Trigger auto sync with window focus multiple times\n\t\tfor (let counter = 0; counter < 2; counter++) {\n\t\t\tawait testObject.triggerSync(['windowFocus'], true, false);\n\t\t}\n\n\t\t// Filter out machine requests\n\t\tconst actual = target.requests.filter(request => !request.url.startsWith(`${target.url}/v1/resource/machines`));\n\n\t\t// Make sure only one manifest request is made\n\t\tassert.deepStrictEqual(actual, [{ type: 'GET', url: `${target.url}/v1/manifest`, headers: {} }]);\n\t});\n\n\ttest('test first auto sync requests', async () => {\n\t\t// Setup the client\n\t\tconst target = new UserDataSyncTestServer();\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tconst testObject: TestUserDataAutoSyncService = disposableStore.add(client.instantiationService.createInstance(TestUserDataAutoSyncService));\n\n\t\tawait testObject.sync();\n\n\t\tassert.deepStrictEqual(target.requests, [\n\t\t\t// Manifest\n\t\t\t{ type: 'GET', url: `${target.url}/v1/manifest`, headers: {} },\n\t\t\t// Machines\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/machines/latest`, headers: {} },\n\t\t\t// Settings\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/settings/latest`, headers: {} },\n\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/settings`, headers: { 'If-Match': '0' } },\n\t\t\t// Keybindings\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/keybindings/latest`, headers: {} },\n\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/keybindings`, headers: { 'If-Match': '0' } },\n\t\t\t// Snippets\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/snippets/latest`, headers: {} },\n\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/snippets`, headers: { 'If-Match': '0' } },\n\t\t\t// Global state\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/globalState/latest`, headers: {} },\n\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/globalState`, headers: { 'If-Match': '0' } },\n\t\t\t// Extensions\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/extensions/latest`, headers: {} },\n\t\t\t// Manifest\n\t\t\t{ type: 'GET', url: `${target.url}/v1/manifest`, headers: {} },\n\t\t\t// Machines\n\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/machines`, headers: { 'If-Match': '0' } }\n\t\t]);\n\n\t});\n\n\ttest('test further auto sync requests without changes', async () => {\n\t\t// Setup the client\n\t\tconst target = new UserDataSyncTestServer();\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tconst testObject: TestUserDataAutoSyncService = disposableStore.add(client.instantiationService.createInstance(TestUserDataAutoSyncService));\n\n\t\t// Sync once and reset requests\n\t\tawait testObject.sync();\n\t\ttarget.reset();\n\n\t\tawait testObject.sync();\n\n\t\tassert.deepStrictEqual(target.requests, [\n\t\t\t// Manifest\n\t\t\t{ type: 'GET', url: `${target.url}/v1/manifest`, headers: {} }\n\t\t]);\n\n\t});\n\n\ttest('test further auto sync requests with changes', async () => {\n\t\t// Setup the client\n\t\tconst target = new UserDataSyncTestServer();\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tconst testObject: TestUserDataAutoSyncService = disposableStore.add(client.instantiationService.createInstance(TestUserDataAutoSyncService));\n\n\t\t// Sync once and reset requests\n\t\tawait testObject.sync();\n\t\ttarget.reset();\n\n\t\t// Do changes in the client\n\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\tconst environmentService = client.instantiationService.get(IEnvironmentService);\n\t\tawait fileService.writeFile(environmentService.settingsResource, VSBuffer.fromString(JSON.stringify({ 'editor.fontSize': 14 })));\n\t\tawait fileService.writeFile(environmentService.keybindingsResource, VSBuffer.fromString(JSON.stringify([{ 'command': 'abcd', 'key': 'cmd+c' }])));\n\t\tawait fileService.writeFile(joinPath(environmentService.snippetsHome, 'html.json'), VSBuffer.fromString(`{}`));\n\t\tawait fileService.writeFile(environmentService.argvResource, VSBuffer.fromString(JSON.stringify({ 'locale': 'de' })));\n\t\tawait testObject.sync();\n\n\t\tassert.deepStrictEqual(target.requests, [\n\t\t\t// Manifest\n\t\t\t{ type: 'GET', url: `${target.url}/v1/manifest`, headers: {} },\n\t\t\t// Settings\n\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/settings`, headers: { 'If-Match': '1' } },\n\t\t\t// Keybindings\n\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/keybindings`, headers: { 'If-Match': '1' } },\n\t\t\t// Snippets\n\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/snippets`, headers: { 'If-Match': '1' } },\n\t\t\t// Global state\n\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/globalState`, headers: { 'If-Match': '1' } },\n\t\t]);\n\n\t});\n\n\ttest('test auto sync send execution id header', async () => {\n\t\t// Setup the client\n\t\tconst target = new UserDataSyncTestServer();\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tconst testObject: TestUserDataAutoSyncService = disposableStore.add(client.instantiationService.createInstance(TestUserDataAutoSyncService));\n\n\t\t// Sync once and reset requests\n\t\tawait testObject.sync();\n\t\ttarget.reset();\n\n\t\tawait testObject.sync();\n\n\t\tfor (const request of target.requestsWithAllHeaders) {\n\t\t\tconst hasExecutionIdHeader = request.headers && request.headers['X-Execution-Id'] && request.headers['X-Execution-Id'].length > 0;\n\t\t\tif (request.url.startsWith(`${target.url}/v1/resource/machines`)) {\n\t\t\t\tassert.ok(!hasExecutionIdHeader, `Should not have execution header: ${request.url}`);\n\t\t\t} else {\n\t\t\t\tassert.ok(hasExecutionIdHeader, `Should have execution header: ${request.url}`);\n\t\t\t}\n\t\t}\n\n\t});\n\n\ttest('test delete on one client throws turned off error on other client while syncing', async () => {\n\t\tconst target = new UserDataSyncTestServer();\n\n\t\t// Set up and sync from the client\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tawait (await client.instantiationService.get(IUserDataSyncService).createSyncTask()).run();\n\n\t\t// Set up and sync from the test client\n\t\tconst testClient = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait testClient.setUp();\n\t\tconst testObject: TestUserDataAutoSyncService = disposableStore.add(testClient.instantiationService.createInstance(TestUserDataAutoSyncService));\n\t\tawait testObject.sync();\n\n\t\t// Reset from the first client\n\t\tawait client.instantiationService.get(IUserDataSyncService).reset();\n\n\t\t// Sync from the test client\n\t\ttarget.reset();\n\n\t\tconst errorPromise = Event.toPromise(testObject.onError);\n\t\tawait testObject.sync();\n\n\t\tconst e = await errorPromise;\n\t\tassert.ok(e instanceof UserDataAutoSyncError);\n\t\tassert.deepStrictEqual((<UserDataAutoSyncError>e).code, UserDataSyncErrorCode.TurnedOff);\n\t\tassert.deepStrictEqual(target.requests, [\n\t\t\t// Manifest\n\t\t\t{ type: 'GET', url: `${target.url}/v1/manifest`, headers: {} },\n\t\t\t// Machine\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/machines/latest`, headers: { 'If-None-Match': '1' } },\n\t\t]);\n\t});\n\n\ttest('test disabling the machine turns off sync', async () => {\n\t\tconst target = new UserDataSyncTestServer();\n\n\t\t// Set up and sync from the test client\n\t\tconst testClient = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait testClient.setUp();\n\t\tconst testObject: TestUserDataAutoSyncService = disposableStore.add(testClient.instantiationService.createInstance(TestUserDataAutoSyncService));\n\t\tawait testObject.sync();\n\n\t\t// Disable current machine\n\t\tconst userDataSyncMachinesService = testClient.instantiationService.get(IUserDataSyncMachinesService);\n\t\tconst machines = await userDataSyncMachinesService.getMachines();\n\t\tconst currentMachine = machines.find(m => m.isCurrent)!;\n\t\tawait userDataSyncMachinesService.setEnablement(currentMachine.id, false);\n\n\t\ttarget.reset();\n\n\t\tconst errorPromise = Event.toPromise(testObject.onError);\n\t\tawait testObject.sync();\n\n\t\tconst e = await errorPromise;\n\t\tassert.ok(e instanceof UserDataAutoSyncError);\n\t\tassert.deepStrictEqual((<UserDataAutoSyncError>e).code, UserDataSyncErrorCode.TurnedOff);\n\t\tassert.deepStrictEqual(target.requests, [\n\t\t\t// Manifest\n\t\t\t{ type: 'GET', url: `${target.url}/v1/manifest`, headers: {} },\n\t\t\t// Machine\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/machines/latest`, headers: { 'If-None-Match': '2' } },\n\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/machines`, headers: { 'If-Match': '2' } },\n\t\t]);\n\t});\n\n\ttest('test removing the machine adds machine back', async () => {\n\t\tconst target = new UserDataSyncTestServer();\n\n\t\t// Set up and sync from the test client\n\t\tconst testClient = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait testClient.setUp();\n\t\tconst testObject: TestUserDataAutoSyncService = disposableStore.add(testClient.instantiationService.createInstance(TestUserDataAutoSyncService));\n\t\tawait testObject.sync();\n\n\t\t// Remove current machine\n\t\tawait testClient.instantiationService.get(IUserDataSyncMachinesService).removeCurrentMachine();\n\n\t\ttarget.reset();\n\n\t\tawait testObject.sync();\n\t\tassert.deepStrictEqual(target.requests, [\n\t\t\t// Manifest\n\t\t\t{ type: 'GET', url: `${target.url}/v1/manifest`, headers: {} },\n\t\t\t// Machine\n\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/machines`, headers: { 'If-Match': '2' } },\n\t\t]);\n\t});\n\n\ttest('test creating new session from one client throws session expired error on another client while syncing', async () => {\n\t\tconst target = new UserDataSyncTestServer();\n\n\t\t// Set up and sync from the client\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tawait (await client.instantiationService.get(IUserDataSyncService).createSyncTask()).run();\n\n\t\t// Set up and sync from the test client\n\t\tconst testClient = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait testClient.setUp();\n\t\tconst testObject: TestUserDataAutoSyncService = disposableStore.add(testClient.instantiationService.createInstance(TestUserDataAutoSyncService));\n\t\tawait testObject.sync();\n\n\t\t// Reset from the first client\n\t\tawait client.instantiationService.get(IUserDataSyncService).reset();\n\n\t\t// Sync again from the first client to create new session\n\t\tawait (await client.instantiationService.get(IUserDataSyncService).createSyncTask()).run();\n\n\t\t// Sync from the test client\n\t\ttarget.reset();\n\n\t\tconst errorPromise = Event.toPromise(testObject.onError);\n\t\tawait testObject.sync();\n\n\t\tconst e = await errorPromise;\n\t\tassert.ok(e instanceof UserDataAutoSyncError);\n\t\tassert.deepStrictEqual((<UserDataAutoSyncError>e).code, UserDataSyncErrorCode.SessionExpired);\n\t\tassert.deepStrictEqual(target.requests, [\n\t\t\t// Manifest\n\t\t\t{ type: 'GET', url: `${target.url}/v1/manifest`, headers: {} },\n\t\t\t// Machine\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/machines/latest`, headers: { 'If-None-Match': '1' } },\n\t\t]);\n\t});\n\n\ttest('test rate limit on server', async () => {\n\t\tconst target = new UserDataSyncTestServer(5);\n\n\t\t// Set up and sync from the test client\n\t\tconst testClient = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait testClient.setUp();\n\t\tconst testObject: TestUserDataAutoSyncService = disposableStore.add(testClient.instantiationService.createInstance(TestUserDataAutoSyncService));\n\n\t\tconst errorPromise = Event.toPromise(testObject.onError);\n\t\twhile (target.requests.length < 5) {\n\t\t\tawait testObject.sync();\n\t\t}\n\n\t\tconst e = await errorPromise;\n\t\tassert.ok(e instanceof UserDataSyncStoreError);\n\t\tassert.deepStrictEqual((<UserDataSyncStoreError>e).code, UserDataSyncErrorCode.TooManyRequests);\n\t});\n\n\ttest('test auto sync is suspended when server donot accepts requests', async () => {\n\t\tconst target = new UserDataSyncTestServer(5, 1);\n\n\t\t// Set up and sync from the test client\n\t\tconst testClient = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait testClient.setUp();\n\t\tconst testObject: TestUserDataAutoSyncService = disposableStore.add(testClient.instantiationService.createInstance(TestUserDataAutoSyncService));\n\n\t\twhile (target.requests.length < 5) {\n\t\t\tawait testObject.sync();\n\t\t}\n\n\t\ttarget.reset();\n\t\tawait testObject.sync();\n\n\t\tassert.deepStrictEqual(target.requests, []);\n\t});\n\n\ttest('test cache control header with no cache is sent when triggered with disable cache option', async () => {\n\t\tconst target = new UserDataSyncTestServer(5, 1);\n\n\t\t// Set up and sync from the test client\n\t\tconst testClient = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait testClient.setUp();\n\t\tconst testObject: TestUserDataAutoSyncService = disposableStore.add(testClient.instantiationService.createInstance(TestUserDataAutoSyncService));\n\n\t\tawait testObject.triggerSync(['some reason'], true, true);\n\t\tassert.strictEqual(target.requestsWithAllHeaders[0].headers!['Cache-Control'], 'no-cache');\n\t});\n\n\ttest('test cache control header is not sent when triggered without disable cache option', async () => {\n\t\tconst target = new UserDataSyncTestServer(5, 1);\n\n\t\t// Set up and sync from the test client\n\t\tconst testClient = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait testClient.setUp();\n\t\tconst testObject: TestUserDataAutoSyncService = disposableStore.add(testClient.instantiationService.createInstance(TestUserDataAutoSyncService));\n\n\t\tawait testObject.triggerSync(['some reason'], true, false);\n\t\tassert.strictEqual(target.requestsWithAllHeaders[0].headers!['Cache-Control'], undefined);\n\t});\n\n});\n"]}