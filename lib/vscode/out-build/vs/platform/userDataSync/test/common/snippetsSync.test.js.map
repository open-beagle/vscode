{"version":3,"file":"snippetsSync.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/userDataSync/test/common/snippetsSync.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAehG,MAAM,UAAU,GAAG;;;;;;;;;;;;;;;;EAgBjB,CAAC;IAEH,MAAM,UAAU,GAAG;;;;;;;;;;;;;;;;EAgBjB,CAAC;IAEH,MAAM,YAAY,GAAG;;;;;;;;;;;;;;;;;;;;;;;EAuBnB,CAAC;IAEH,MAAM,YAAY,GAAG;;;;;;;;;;;;;;;;;;;;;;;EAuBnB,CAAC;IAEH,MAAM,YAAY,GAAG;;;;;;;;;;;;;;;;;;;;;;;EAuBnB,CAAC;IAEH,MAAM,aAAa,GAAG;;;;;;;;;;;;;;;;;EAiBpB,CAAC;IAEH,KAAK,CAAC,cAAc,EAAE,GAAG,EAAE;QAE1B,MAAM,eAAe,GAAG,IAAI,2BAAe,EAAE,CAAC;QAC9C,MAAM,MAAM,GAAG,IAAI,2CAAsB,EAAE,CAAC;QAC5C,IAAI,UAA8B,CAAC;QACnC,IAAI,OAA2B,CAAC;QAEhC,IAAI,UAAgC,CAAC;QAErC,KAAK,CAAC,KAAK,IAAI,EAAE;YAChB,UAAU,GAAG,eAAe,CAAC,GAAG,CAAC,IAAI,uCAAkB,CAAC,MAAM,CAAC,CAAC,CAAC;YACjE,MAAM,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAC7B,UAAU,GAAI,UAAU,CAAC,oBAAoB,CAAC,GAAG,CAAC,mCAAoB,CAAyB,CAAC,eAAe,2BAA+C,CAAC;YAC/J,eAAe,CAAC,GAAG,CAAC,CAAA,GAAA,wBAAY,CAAA,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,oBAAoB,CAAC,GAAG,CAAC,wCAAyB,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YAEhH,OAAO,GAAG,eAAe,CAAC,GAAG,CAAC,IAAI,uCAAkB,CAAC,MAAM,CAAC,CAAC,CAAC;YAC9D,MAAM,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,GAAG,EAAE,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC,CAAC;QAExC,IAAI,CAAC,8BAA8B,EAAE,KAAK,IAAI,EAAE;YAC/C,MAAM,WAAW,GAAG,UAAU,CAAC,oBAAoB,CAAC,GAAG,CAAC,oBAAY,CAAC,CAAC;YACtE,MAAM,gBAAgB,GAAG,UAAU,CAAC,oBAAoB,CAAC,GAAG,CAAC,iCAAmB,CAAC,CAAC,YAAY,CAAC;YAE/F,MAAM,CAAC,eAAe,CAAC,MAAM,UAAU,CAAC,mBAAmB,EAAE,EAAE,IAAI,CAAC,CAAC;YACrE,IAAI,QAAQ,GAAG,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC;YAC3C,MAAM,CAAC,KAAK,EAAE,CAAC;YACf,MAAM,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAEhC,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,QAAQ,EAAE;gBACvC,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,GAAG,gBAAgB,UAAU,CAAC,QAAQ,SAAS,EAAE,OAAO,EAAE,EAAE,EAAE;aAC5F,CAAC,CAAC;YACH,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,WAAW,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC;YAEvD,MAAM,gBAAgB,GAAG,MAAM,UAAU,CAAC,mBAAmB,EAAE,CAAC;YAChE,MAAM,cAAc,GAAG,MAAM,UAAU,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YAChE,MAAM,CAAC,eAAe,CAAC,gBAAiB,CAAC,GAAG,EAAE,cAAc,CAAC,GAAG,CAAC,CAAC;YAClE,MAAM,CAAC,eAAe,CAAC,gBAAiB,CAAC,QAAQ,EAAE,cAAc,CAAC,QAAQ,CAAC,CAAC;YAC5E,MAAM,CAAC,WAAW,CAAC,gBAAiB,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;YAErD,QAAQ,GAAG,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC;YACvC,MAAM,CAAC,KAAK,EAAE,CAAC;YACf,MAAM,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAChC,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;YAE5C,QAAQ,GAAG,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC;YACvC,MAAM,CAAC,KAAK,EAAE,CAAC;YACf,MAAM,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAChC,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;YAC3D,MAAM,UAAU,CAAC,IAAI,CAAC,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;YACnD,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC;YAE3D,IAAI,gBAAgB,GAAG,MAAM,UAAU,CAAC,mBAAmB,EAAE,CAAC;YAC9D,MAAM,QAAQ,GAAG,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC;YAC7C,MAAM,CAAC,KAAK,EAAE,CAAC;YACf,MAAM,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAEhC,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,QAAQ,EAAE;gBACvC,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,GAAG,gBAAgB,UAAU,CAAC,QAAQ,EAAE,EAAE,OAAO,EAAE,EAAE,UAAU,EAAE,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAE,GAAG,EAAE,EAAE;aACzH,CAAC,CAAC;YAEH,gBAAgB,GAAG,MAAM,UAAU,CAAC,mBAAmB,EAAE,CAAC;YAC1D,MAAM,cAAc,GAAG,MAAM,UAAU,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YAChE,MAAM,CAAC,eAAe,CAAC,gBAAiB,CAAC,GAAG,EAAE,cAAc,CAAC,GAAG,CAAC,CAAC;YAClE,MAAM,CAAC,eAAe,CAAC,gBAAiB,CAAC,QAAQ,EAAE,cAAc,CAAC,QAAQ,CAAC,CAAC;YAC5E,MAAM,CAAC,eAAe,CAAC,gBAAiB,CAAC,QAAS,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,WAAW,EAAE,YAAY,EAAE,CAAC,CAAC,CAAC;QAC5G,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;YACrE,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC;YAC3D,MAAM,aAAa,CAAC,iBAAiB,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;YAE/D,MAAM,UAAU,CAAC,IAAI,CAAC,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;YACnD,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,oBAAkB,CAAC;YACvD,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAEjD,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;YAC/D,MAAM,CAAC,EAAE,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC;YAC5B,MAAM,MAAM,GAAG,aAAa,CAAC,OAAQ,CAAC,CAAC;YACvC,MAAM,CAAC,eAAe,CAAC,MAAM,EAAE,EAAE,WAAW,EAAE,YAAY,EAAE,iBAAiB,EAAE,UAAU,EAAE,CAAC,CAAC;QAC9F,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,sDAAsD,EAAE,KAAK,IAAI,EAAE;YACvE,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;YACxD,MAAM,aAAa,CAAC,iBAAiB,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;YAC5D,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;YAErB,MAAM,UAAU,CAAC,IAAI,CAAC,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;YACnD,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,oBAAkB,CAAC;YACvD,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAEjD,MAAM,OAAO,GAAG,MAAM,WAAW,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;YAC3D,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;YAC1C,MAAM,OAAO,GAAG,MAAM,WAAW,CAAC,iBAAiB,EAAE,UAAU,CAAC,CAAC;YACjE,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;YACvD,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;YACxD,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;YAErB,MAAM,aAAa,CAAC,iBAAiB,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;YAC/D,MAAM,UAAU,CAAC,IAAI,CAAC,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;YACnD,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,oBAAkB,CAAC;YACvD,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAEjD,MAAM,OAAO,GAAG,MAAM,WAAW,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;YAC3D,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;YAC1C,MAAM,OAAO,GAAG,MAAM,WAAW,CAAC,iBAAiB,EAAE,UAAU,CAAC,CAAC;YACjE,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;YAExC,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;YAC/D,MAAM,CAAC,EAAE,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC;YAC5B,MAAM,MAAM,GAAG,aAAa,CAAC,OAAQ,CAAC,CAAC;YACvC,MAAM,CAAC,eAAe,CAAC,MAAM,EAAE,EAAE,WAAW,EAAE,YAAY,EAAE,iBAAiB,EAAE,UAAU,EAAE,CAAC,CAAC;QAC9F,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,sDAAsD,EAAE,KAAK,IAAI,EAAE;YACvE,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;YACxD,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;YAErB,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC;YAC3D,MAAM,UAAU,CAAC,IAAI,CAAC,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;YAEnD,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,oCAA0B,CAAC;YAC/D,MAAM,kBAAkB,GAAG,UAAU,CAAC,oBAAoB,CAAC,GAAG,CAAC,iCAAmB,CAAC,CAAC;YACpF,MAAM,KAAK,GAAG,CAAA,GAAA,oBAAQ,CAAA,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,UAAU,CAAC,QAAQ,EAAE,+BAAgB,EAAE,WAAW,CAAC,CAAC;YAChH,cAAc,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,2EAA2E,EAAE,KAAK,IAAI,EAAE;YAC5F,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;YACxD,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;YAErB,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC;YAC3D,MAAM,UAAU,CAAC,IAAI,CAAC,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;YACnD,MAAM,SAAS,GAAG,UAAU,CAAC,SAAS,CAAC;YACvC,MAAM,UAAU,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC;YACpE,MAAM,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAE9B,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,oBAAkB,CAAC;YACvD,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAEjD,MAAM,OAAO,GAAG,MAAM,WAAW,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;YAC3D,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;YAE1C,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;YAC/D,MAAM,CAAC,EAAE,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC;YAC5B,MAAM,MAAM,GAAG,aAAa,CAAC,OAAQ,CAAC,CAAC;YACvC,MAAM,CAAC,eAAe,CAAC,MAAM,EAAE,EAAE,WAAW,EAAE,YAAY,EAAE,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,+DAA+D,EAAE,KAAK,IAAI,EAAE;YAChF,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;YACxD,MAAM,aAAa,CAAC,iBAAiB,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;YAC5D,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;YAErB,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC;YAC3D,MAAM,aAAa,CAAC,iBAAiB,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;YAC/D,MAAM,UAAU,CAAC,IAAI,CAAC,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;YAEnD,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,oCAA0B,CAAC;YAC/D,MAAM,kBAAkB,GAAG,UAAU,CAAC,oBAAoB,CAAC,GAAG,CAAC,iCAAmB,CAAC,CAAC;YACpF,MAAM,MAAM,GAAG,CAAA,GAAA,oBAAQ,CAAA,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,UAAU,CAAC,QAAQ,EAAE,+BAAgB,EAAE,WAAW,CAAC,CAAC;YACjH,MAAM,MAAM,GAAG,CAAA,GAAA,oBAAQ,CAAA,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,UAAU,CAAC,QAAQ,EAAE,+BAAgB,EAAE,iBAAiB,CAAC,CAAC;YACvH,cAAc,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,uFAAuF,EAAE,KAAK,IAAI,EAAE;YACxG,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;YACxD,MAAM,aAAa,CAAC,iBAAiB,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;YAC5D,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;YAErB,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC;YAC3D,MAAM,aAAa,CAAC,iBAAiB,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;YAC/D,MAAM,UAAU,CAAC,IAAI,CAAC,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;YAEnD,IAAI,SAAS,GAAG,UAAU,CAAC,SAAS,CAAC;YACrC,MAAM,UAAU,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC;YAEpE,SAAS,GAAG,UAAU,CAAC,SAAS,CAAC;YACjC,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,oCAA0B,CAAC;YAC/D,MAAM,kBAAkB,GAAG,UAAU,CAAC,oBAAoB,CAAC,GAAG,CAAC,iCAAmB,CAAC,CAAC;YACpF,MAAM,KAAK,GAAG,CAAA,GAAA,oBAAQ,CAAA,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,UAAU,CAAC,QAAQ,EAAE,+BAAgB,EAAE,iBAAiB,CAAC,CAAC;YACtH,cAAc,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,wFAAwF,EAAE,KAAK,IAAI,EAAE;YACzG,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;YACxD,MAAM,aAAa,CAAC,iBAAiB,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;YAC5D,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;YAErB,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC;YAC3D,MAAM,aAAa,CAAC,iBAAiB,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;YAC/D,MAAM,UAAU,CAAC,IAAI,CAAC,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;YAEnD,MAAM,SAAS,GAAG,UAAU,CAAC,SAAS,CAAC;YACvC,MAAM,UAAU,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC;YACpE,MAAM,UAAU,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC;YAClE,MAAM,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAE9B,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,oBAAkB,CAAC;YACvD,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAEjD,MAAM,OAAO,GAAG,MAAM,WAAW,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;YAC3D,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;YAC1C,MAAM,OAAO,GAAG,MAAM,WAAW,CAAC,iBAAiB,EAAE,UAAU,CAAC,CAAC;YACjE,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;YAExC,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;YAC/D,MAAM,CAAC,EAAE,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC;YAC5B,MAAM,MAAM,GAAG,aAAa,CAAC,OAAQ,CAAC,CAAC;YACvC,MAAM,CAAC,eAAe,CAAC,MAAM,EAAE,EAAE,WAAW,EAAE,YAAY,EAAE,iBAAiB,EAAE,UAAU,EAAE,CAAC,CAAC;QAC9F,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,uBAAuB,EAAE,KAAK,IAAI,EAAE;YACxC,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC;YAC3D,MAAM,UAAU,CAAC,IAAI,CAAC,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;YAEnD,MAAM,aAAa,CAAC,iBAAiB,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;YAC/D,MAAM,UAAU,CAAC,IAAI,CAAC,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;YACnD,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,oBAAkB,CAAC;YACvD,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAEjD,MAAM,OAAO,GAAG,MAAM,WAAW,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;YAC3D,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;YAC1C,MAAM,OAAO,GAAG,MAAM,WAAW,CAAC,iBAAiB,EAAE,UAAU,CAAC,CAAC;YACjE,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;YAExC,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;YAC/D,MAAM,CAAC,EAAE,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC;YAC5B,MAAM,MAAM,GAAG,aAAa,CAAC,OAAQ,CAAC,CAAC;YACvC,MAAM,CAAC,eAAe,CAAC,MAAM,EAAE,EAAE,WAAW,EAAE,YAAY,EAAE,iBAAiB,EAAE,UAAU,EAAE,CAAC,CAAC;QAC9F,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;YACjD,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;YACxD,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;YACrB,MAAM,UAAU,CAAC,IAAI,CAAC,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;YAEnD,MAAM,aAAa,CAAC,iBAAiB,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;YAC5D,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;YAErB,MAAM,UAAU,CAAC,IAAI,CAAC,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;YACnD,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,oBAAkB,CAAC;YACvD,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAEjD,MAAM,OAAO,GAAG,MAAM,WAAW,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;YAC3D,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;YAC1C,MAAM,OAAO,GAAG,MAAM,WAAW,CAAC,iBAAiB,EAAE,UAAU,CAAC,CAAC;YACjE,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,yBAAyB,EAAE,KAAK,IAAI,EAAE;YAC1C,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC;YAC3D,MAAM,UAAU,CAAC,IAAI,CAAC,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;YAEnD,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC;YAC3D,MAAM,UAAU,CAAC,IAAI,CAAC,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;YACnD,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,oBAAkB,CAAC;YACvD,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAEjD,MAAM,OAAO,GAAG,MAAM,WAAW,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;YAC3D,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;YAE1C,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;YAC/D,MAAM,CAAC,EAAE,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC;YAC5B,MAAM,MAAM,GAAG,aAAa,CAAC,OAAQ,CAAC,CAAC;YACvC,MAAM,CAAC,eAAe,CAAC,MAAM,EAAE,EAAE,WAAW,EAAE,YAAY,EAAE,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;YACnD,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;YACxD,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;YACrB,MAAM,UAAU,CAAC,IAAI,CAAC,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;YAEnD,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;YACxD,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;YAErB,MAAM,UAAU,CAAC,IAAI,CAAC,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;YACnD,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,oBAAkB,CAAC;YACvD,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAEjD,MAAM,OAAO,GAAG,MAAM,WAAW,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;YAC3D,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;YACrD,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;YACxD,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;YACrB,MAAM,UAAU,CAAC,IAAI,CAAC,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;YAEnD,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;YACxD,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;YAErB,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC;YAC3D,MAAM,UAAU,CAAC,IAAI,CAAC,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;YACnD,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,oCAA0B,CAAC;YAC/D,MAAM,kBAAkB,GAAG,UAAU,CAAC,oBAAoB,CAAC,GAAG,CAAC,iCAAmB,CAAC,CAAC;YACpF,MAAM,KAAK,GAAG,CAAA,GAAA,oBAAQ,CAAA,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,UAAU,CAAC,QAAQ,EAAE,+BAAgB,EAAE,WAAW,CAAC,CAAC;YAChH,cAAc,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;YAC7D,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;YACxD,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;YACrB,MAAM,UAAU,CAAC,IAAI,CAAC,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;YAEnD,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;YACxD,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;YAErB,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC;YAC3D,MAAM,UAAU,CAAC,IAAI,CAAC,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;YACnD,MAAM,UAAU,CAAC,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC;YAC/E,MAAM,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAE9B,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,oBAAkB,CAAC;YACvD,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAEjD,MAAM,OAAO,GAAG,MAAM,WAAW,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;YAC3D,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;YAE1C,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;YAC/D,MAAM,CAAC,EAAE,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC;YAC5B,MAAM,MAAM,GAAG,aAAa,CAAC,OAAQ,CAAC,CAAC;YACvC,MAAM,CAAC,eAAe,CAAC,MAAM,EAAE,EAAE,WAAW,EAAE,YAAY,EAAE,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,yBAAyB,EAAE,KAAK,IAAI,EAAE;YAC1C,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC;YAC3D,MAAM,aAAa,CAAC,iBAAiB,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;YAC/D,MAAM,UAAU,CAAC,IAAI,CAAC,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;YAEnD,MAAM,aAAa,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;YAC7C,MAAM,UAAU,CAAC,IAAI,CAAC,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;YACnD,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,oBAAkB,CAAC;YACvD,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAEjD,MAAM,OAAO,GAAG,MAAM,WAAW,CAAC,iBAAiB,EAAE,UAAU,CAAC,CAAC;YACjE,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;YACxC,MAAM,OAAO,GAAG,MAAM,WAAW,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;YAC3D,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;YAElC,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;YAC/D,MAAM,CAAC,EAAE,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC;YAC5B,MAAM,MAAM,GAAG,aAAa,CAAC,OAAQ,CAAC,CAAC;YACvC,MAAM,CAAC,eAAe,CAAC,MAAM,EAAE,EAAE,iBAAiB,EAAE,UAAU,EAAE,CAAC,CAAC;QACnE,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;YACnD,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;YACxD,MAAM,aAAa,CAAC,iBAAiB,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;YAC5D,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;YACrB,MAAM,UAAU,CAAC,IAAI,CAAC,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;YAEnD,MAAM,aAAa,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;YAC1C,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;YAErB,MAAM,UAAU,CAAC,IAAI,CAAC,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;YACnD,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,oBAAkB,CAAC;YACvD,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAEjD,MAAM,OAAO,GAAG,MAAM,WAAW,CAAC,iBAAiB,EAAE,UAAU,CAAC,CAAC;YACjE,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;YACxC,MAAM,OAAO,GAAG,MAAM,WAAW,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;YAC3D,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,0DAA0D,EAAE,KAAK,IAAI,EAAE;YAC3E,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;YACxD,MAAM,aAAa,CAAC,iBAAiB,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;YAC5D,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;YACrB,MAAM,UAAU,CAAC,IAAI,CAAC,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;YAEnD,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;YACxD,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;YAErB,MAAM,aAAa,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;YAC7C,MAAM,UAAU,CAAC,IAAI,CAAC,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;YAEnD,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,oBAAkB,CAAC;YACvD,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAEjD,MAAM,OAAO,GAAG,MAAM,WAAW,CAAC,iBAAiB,EAAE,UAAU,CAAC,CAAC;YACjE,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;YACxC,MAAM,OAAO,GAAG,MAAM,WAAW,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;YAC3D,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;YACrD,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;YACxD,MAAM,aAAa,CAAC,iBAAiB,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;YAC5D,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;YACrB,MAAM,UAAU,CAAC,IAAI,CAAC,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;YAEnD,MAAM,aAAa,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;YAC1C,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;YAErB,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC;YAC3D,MAAM,UAAU,CAAC,IAAI,CAAC,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;YAEnD,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,oCAA0B,CAAC;YAC/D,MAAM,kBAAkB,GAAG,UAAU,CAAC,oBAAoB,CAAC,GAAG,CAAC,iCAAmB,CAAC,CAAC;YACpF,MAAM,KAAK,GAAG,CAAA,GAAA,oBAAQ,CAAA,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,UAAU,CAAC,QAAQ,EAAE,+BAAgB,EAAE,WAAW,CAAC,CAAC;YAChH,cAAc,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;YAC7D,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;YACxD,MAAM,aAAa,CAAC,iBAAiB,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;YAC5D,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;YACrB,MAAM,UAAU,CAAC,IAAI,CAAC,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;YAEnD,MAAM,aAAa,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;YAC1C,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;YAErB,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC;YAC3D,MAAM,UAAU,CAAC,IAAI,CAAC,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;YACnD,MAAM,UAAU,CAAC,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC;YAC/E,MAAM,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAE9B,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,oBAAkB,CAAC;YACvD,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAEjD,MAAM,OAAO,GAAG,MAAM,WAAW,CAAC,iBAAiB,EAAE,UAAU,CAAC,CAAC;YACjE,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;YACxC,MAAM,OAAO,GAAG,MAAM,WAAW,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;YAC3D,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;YAE1C,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;YAC/D,MAAM,CAAC,EAAE,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC;YAC5B,MAAM,MAAM,GAAG,aAAa,CAAC,OAAQ,CAAC,CAAC;YACvC,MAAM,CAAC,eAAe,CAAC,MAAM,EAAE,EAAE,iBAAiB,EAAE,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,CAAC,CAAC;QAC9F,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;YACzE,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;YACxD,MAAM,aAAa,CAAC,iBAAiB,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;YAC5D,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;YACrB,MAAM,UAAU,CAAC,IAAI,CAAC,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;YAEnD,MAAM,aAAa,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;YAC1C,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;YAErB,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC;YAC3D,MAAM,UAAU,CAAC,IAAI,CAAC,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;YACnD,MAAM,UAAU,CAAC,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC;YACvE,MAAM,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAE9B,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,oBAAkB,CAAC;YACvD,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAEjD,MAAM,OAAO,GAAG,MAAM,WAAW,CAAC,iBAAiB,EAAE,UAAU,CAAC,CAAC;YACjE,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;YACxC,MAAM,OAAO,GAAG,MAAM,WAAW,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;YAC3D,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;YAElC,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;YAC/D,MAAM,CAAC,EAAE,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC;YAC5B,MAAM,MAAM,GAAG,aAAa,CAAC,OAAQ,CAAC,CAAC;YACvC,MAAM,CAAC,eAAe,CAAC,MAAM,EAAE,EAAE,iBAAiB,EAAE,UAAU,EAAE,CAAC,CAAC;QACnE,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;YACnD,MAAM,aAAa,CAAC,sBAAsB,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC;YACpE,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;YACxD,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;YAErB,MAAM,UAAU,CAAC,IAAI,CAAC,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;YACnD,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,oBAAkB,CAAC;YACvD,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAEjD,MAAM,OAAO,GAAG,MAAM,WAAW,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;YAC3D,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;YAC1C,MAAM,OAAO,GAAG,MAAM,WAAW,CAAC,sBAAsB,EAAE,UAAU,CAAC,CAAC;YACtE,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;YAE3C,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;YAC/D,MAAM,CAAC,EAAE,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC;YAC5B,MAAM,MAAM,GAAG,aAAa,CAAC,OAAQ,CAAC,CAAC;YACvC,MAAM,CAAC,eAAe,CAAC,MAAM,EAAE,EAAE,WAAW,EAAE,YAAY,EAAE,sBAAsB,EAAE,aAAa,EAAE,CAAC,CAAC;QACtG,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;YAClD,MAAM,aAAa,CAAC,sBAAsB,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC;YACpE,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;YACxD,MAAM,aAAa,CAAC,iBAAiB,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;YAC5D,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;YAErB,MAAM,UAAU,CAAC,IAAI,CAAC,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;YACnD,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,oBAAkB,CAAC;YACvD,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAEjD,MAAM,OAAO,GAAG,MAAM,WAAW,CAAC,iBAAiB,EAAE,UAAU,CAAC,CAAC;YACjE,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;YACxC,MAAM,OAAO,GAAG,MAAM,WAAW,CAAC,sBAAsB,EAAE,UAAU,CAAC,CAAC;YACtE,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;YAC3C,MAAM,OAAO,GAAG,MAAM,WAAW,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;YAC3D,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;YAElC,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;YAC/D,MAAM,CAAC,EAAE,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC;YAC5B,MAAM,MAAM,GAAG,aAAa,CAAC,OAAQ,CAAC,CAAC;YACvC,MAAM,CAAC,eAAe,CAAC,MAAM,EAAE,EAAE,iBAAiB,EAAE,UAAU,EAAE,sBAAsB,EAAE,aAAa,EAAE,CAAC,CAAC;QAC1G,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;YAClE,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;YACxD,MAAM,aAAa,CAAC,iBAAiB,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;YAC5D,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;YAErB,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC;YAC3D,MAAM,UAAU,CAAC,IAAI,CAAC,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;YAEnD,IAAI,SAAS,GAAG,UAAU,CAAC,SAAS,CAAC;YACrC,MAAM,UAAU,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC;YACpE,MAAM,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAE9B,MAAM,WAAW,GAAG,UAAU,CAAC,oBAAoB,CAAC,GAAG,CAAC,oBAAY,CAAC,CAAC;YACtE,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,WAAW,CAAC,MAAM,CAAC,CAAA,GAAA,mBAAO,CAAA,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAC7E,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,uEAAuE,EAAE,KAAK,IAAI,EAAE;YACxF,MAAM,kBAAkB,GAAG,UAAU,CAAC,oBAAoB,CAAC,GAAG,CAAC,iCAAmB,CAAC,CAAC;YAEpF,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC;YAC3D,MAAM,aAAa,CAAC,iBAAiB,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;YAC/D,IAAI,OAAO,GAAG,MAAM,UAAU,CAAC,OAAO,CAAC,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;YAEpE,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,0BAAqB,CAAC;YAC1D,cAAc,CAAC,OAAQ,CAAC,gBAAgB,EACvC;gBACC,CAAA,GAAA,oBAAQ,CAAA,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,UAAU,CAAC,QAAQ,EAAE,+BAAgB,EAAE,WAAW,CAAC;gBACjG,CAAA,GAAA,oBAAQ,CAAA,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,UAAU,CAAC,QAAQ,EAAE,+BAAgB,EAAE,iBAAiB,CAAC;aACvG,CAAC,CAAC;YACJ,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAEjD,OAAO,GAAG,MAAM,UAAU,CAAC,KAAK,CAAC,OAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC;YAE7E,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,0BAAqB,CAAC;YAC1D,cAAc,CAAC,OAAQ,CAAC,gBAAgB,EACvC;gBACC,CAAA,GAAA,oBAAQ,CAAA,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,UAAU,CAAC,QAAQ,EAAE,+BAAgB,EAAE,WAAW,CAAC;gBACjG,CAAA,GAAA,oBAAQ,CAAA,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,UAAU,CAAC,QAAQ,EAAE,+BAAgB,EAAE,iBAAiB,CAAC;aACvG,CAAC,CAAC;YACJ,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,oEAAoE,EAAE,KAAK,IAAI,EAAE;YACrF,MAAM,kBAAkB,GAAG,UAAU,CAAC,oBAAoB,CAAC,GAAG,CAAC,iCAAmB,CAAC,CAAC;YAEpF,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC;YAC3D,MAAM,aAAa,CAAC,iBAAiB,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;YAC/D,IAAI,OAAO,GAAG,MAAM,UAAU,CAAC,OAAO,CAAC,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;YAEpE,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,0BAAqB,CAAC;YAC1D,cAAc,CAAC,OAAQ,CAAC,gBAAgB,EACvC;gBACC,CAAA,GAAA,oBAAQ,CAAA,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,UAAU,CAAC,QAAQ,EAAE,+BAAgB,EAAE,WAAW,CAAC;gBACjG,CAAA,GAAA,oBAAQ,CAAA,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,UAAU,CAAC,QAAQ,EAAE,+BAAgB,EAAE,iBAAiB,CAAC;aACvG,CAAC,CAAC;YACJ,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAEjD,OAAO,GAAG,MAAM,UAAU,CAAC,KAAK,CAAC,OAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC;YAC7E,OAAO,GAAG,MAAM,UAAU,CAAC,KAAK,CAAC,OAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC;YAE7E,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,0BAAqB,CAAC;YAC1D,cAAc,CAAC,OAAQ,CAAC,gBAAgB,EACvC;gBACC,CAAA,GAAA,oBAAQ,CAAA,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,UAAU,CAAC,QAAQ,EAAE,+BAAgB,EAAE,WAAW,CAAC;gBACjG,CAAA,GAAA,oBAAQ,CAAA,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,UAAU,CAAC,QAAQ,EAAE,+BAAgB,EAAE,iBAAiB,CAAC;aACvG,CAAC,CAAC;YACJ,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,gFAAgF,EAAE,KAAK,IAAI,EAAE;YACjG,MAAM,kBAAkB,GAAG,UAAU,CAAC,oBAAoB,CAAC,GAAG,CAAC,iCAAmB,CAAC,CAAC;YAEpF,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC;YAC3D,MAAM,aAAa,CAAC,iBAAiB,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;YAC/D,IAAI,OAAO,GAAG,MAAM,UAAU,CAAC,OAAO,CAAC,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;YAEpE,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,0BAAqB,CAAC;YAC1D,cAAc,CAAC,OAAQ,CAAC,gBAAgB,EACvC;gBACC,CAAA,GAAA,oBAAQ,CAAA,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,UAAU,CAAC,QAAQ,EAAE,+BAAgB,EAAE,WAAW,CAAC;gBACjG,CAAA,GAAA,oBAAQ,CAAA,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,UAAU,CAAC,QAAQ,EAAE,+BAAgB,EAAE,iBAAiB,CAAC;aACvG,CAAC,CAAC;YACJ,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAEjD,OAAO,GAAG,MAAM,UAAU,CAAC,KAAK,CAAC,OAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC;YAC7E,OAAO,GAAG,MAAM,UAAU,CAAC,KAAK,CAAC,OAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC;YAC7E,OAAO,GAAG,MAAM,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAExC,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,oBAAkB,CAAC;YACvD,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;YAClC,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,iGAAiG,EAAE,KAAK,IAAI,EAAE;YAClH,MAAM,kBAAkB,GAAG,UAAU,CAAC,oBAAoB,CAAC,GAAG,CAAC,iCAAmB,CAAC,CAAC;YAEpF,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;YACxD,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;YAErB,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC;YAC3D,MAAM,aAAa,CAAC,iBAAiB,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;YAC/D,IAAI,OAAO,GAAG,MAAM,UAAU,CAAC,OAAO,CAAC,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;YAEpE,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,0BAAqB,CAAC;YAC1D,cAAc,CAAC,OAAQ,CAAC,gBAAgB,EACvC;gBACC,CAAA,GAAA,oBAAQ,CAAA,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,UAAU,CAAC,QAAQ,EAAE,+BAAgB,EAAE,iBAAiB,CAAC;gBACvG,CAAA,GAAA,oBAAQ,CAAA,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,UAAU,CAAC,QAAQ,EAAE,+BAAgB,EAAE,WAAW,CAAC;aACjG,CAAC,CAAC;YACJ,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAEjD,OAAO,GAAG,MAAM,UAAU,CAAC,KAAK,CAAC,OAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC;YAE7E,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,0BAAqB,CAAC;YAC1D,cAAc,CAAC,OAAQ,CAAC,gBAAgB,EACvC;gBACC,CAAA,GAAA,oBAAQ,CAAA,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,UAAU,CAAC,QAAQ,EAAE,+BAAgB,EAAE,iBAAiB,CAAC;gBACvG,CAAA,GAAA,oBAAQ,CAAA,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,UAAU,CAAC,QAAQ,EAAE,+BAAgB,EAAE,WAAW,CAAC;aACjG,CAAC,CAAC;YACJ,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,6GAA6G,EAAE,KAAK,IAAI,EAAE;YAC9H,MAAM,kBAAkB,GAAG,UAAU,CAAC,oBAAoB,CAAC,GAAG,CAAC,iCAAmB,CAAC,CAAC;YAEpF,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;YACxD,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;YAErB,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC;YAC3D,MAAM,aAAa,CAAC,iBAAiB,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;YAC/D,IAAI,OAAO,GAAG,MAAM,UAAU,CAAC,OAAO,CAAC,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;YAEpE,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,0BAAqB,CAAC;YAC1D,cAAc,CAAC,OAAQ,CAAC,gBAAgB,EACvC;gBACC,CAAA,GAAA,oBAAQ,CAAA,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,UAAU,CAAC,QAAQ,EAAE,+BAAgB,EAAE,iBAAiB,CAAC;gBACvG,CAAA,GAAA,oBAAQ,CAAA,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,UAAU,CAAC,QAAQ,EAAE,+BAAgB,EAAE,WAAW,CAAC;aACjG,CAAC,CAAC;YACJ,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAEjD,OAAO,GAAG,MAAM,UAAU,CAAC,KAAK,CAAC,OAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC;YAC7E,OAAO,GAAG,MAAM,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAExC,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,oBAAkB,CAAC;YACvD,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;YAClC,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,sFAAsF,EAAE,KAAK,IAAI,EAAE;YACvG,MAAM,kBAAkB,GAAG,UAAU,CAAC,oBAAoB,CAAC,GAAG,CAAC,iCAAmB,CAAC,CAAC;YAEpF,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;YACxD,MAAM,aAAa,CAAC,iBAAiB,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;YAC5D,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;YAErB,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC;YAC3D,MAAM,aAAa,CAAC,iBAAiB,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;YAC/D,IAAI,OAAO,GAAG,MAAM,UAAU,CAAC,OAAO,CAAC,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;YAEpE,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,0BAAqB,CAAC;YAC1D,cAAc,CAAC,OAAQ,CAAC,gBAAgB,EACvC;gBACC,CAAA,GAAA,oBAAQ,CAAA,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,UAAU,CAAC,QAAQ,EAAE,+BAAgB,EAAE,WAAW,CAAC;gBACjG,CAAA,GAAA,oBAAQ,CAAA,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,UAAU,CAAC,QAAQ,EAAE,+BAAgB,EAAE,iBAAiB,CAAC;aACvG,CAAC,CAAC;YACJ,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAEjD,OAAO,GAAG,MAAM,UAAU,CAAC,KAAK,CAAC,OAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC;YAE/E,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,oCAA0B,CAAC;YAC/D,cAAc,CAAC,OAAQ,CAAC,gBAAgB,EACvC;gBACC,CAAA,GAAA,oBAAQ,CAAA,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,UAAU,CAAC,QAAQ,EAAE,+BAAgB,EAAE,WAAW,CAAC;gBACjG,CAAA,GAAA,oBAAQ,CAAA,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,UAAU,CAAC,QAAQ,EAAE,+BAAgB,EAAE,iBAAiB,CAAC;aACvG,CAAC,CAAC;YACJ,cAAc,CAAC,UAAU,CAAC,SAAS,EAClC;gBACC,CAAA,GAAA,oBAAQ,CAAA,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,UAAU,CAAC,QAAQ,EAAE,+BAAgB,EAAE,WAAW,CAAC;aACjG,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,mFAAmF,EAAE,KAAK,IAAI,EAAE;YACpG,MAAM,kBAAkB,GAAG,UAAU,CAAC,oBAAoB,CAAC,GAAG,CAAC,iCAAmB,CAAC,CAAC;YAEpF,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;YACxD,MAAM,aAAa,CAAC,iBAAiB,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;YAC5D,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;YAErB,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC;YAC3D,MAAM,aAAa,CAAC,iBAAiB,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;YAC/D,IAAI,OAAO,GAAG,MAAM,UAAU,CAAC,OAAO,CAAC,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;YAEpE,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,0BAAqB,CAAC;YAC1D,cAAc,CAAC,OAAQ,CAAC,gBAAgB,EACvC;gBACC,CAAA,GAAA,oBAAQ,CAAA,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,UAAU,CAAC,QAAQ,EAAE,+BAAgB,EAAE,WAAW,CAAC;gBACjG,CAAA,GAAA,oBAAQ,CAAA,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,UAAU,CAAC,QAAQ,EAAE,+BAAgB,EAAE,iBAAiB,CAAC;aACvG,CAAC,CAAC;YACJ,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAEjD,OAAO,GAAG,MAAM,UAAU,CAAC,KAAK,CAAC,OAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC;YAC/E,OAAO,GAAG,MAAM,UAAU,CAAC,KAAK,CAAC,OAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC;YAE/E,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,oCAA0B,CAAC;YAC/D,cAAc,CAAC,OAAQ,CAAC,gBAAgB,EACvC;gBACC,CAAA,GAAA,oBAAQ,CAAA,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,UAAU,CAAC,QAAQ,EAAE,+BAAgB,EAAE,WAAW,CAAC;gBACjG,CAAA,GAAA,oBAAQ,CAAA,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,UAAU,CAAC,QAAQ,EAAE,+BAAgB,EAAE,iBAAiB,CAAC;aACvG,CAAC,CAAC;YACJ,cAAc,CAAC,UAAU,CAAC,SAAS,EAClC;gBACC,CAAA,GAAA,oBAAQ,CAAA,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,UAAU,CAAC,QAAQ,EAAE,+BAAgB,EAAE,WAAW,CAAC;gBACjG,CAAA,GAAA,oBAAQ,CAAA,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,UAAU,CAAC,QAAQ,EAAE,+BAAgB,EAAE,iBAAiB,CAAC;aACvG,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,yFAAyF,EAAE,KAAK,IAAI,EAAE;YAC1G,MAAM,kBAAkB,GAAG,UAAU,CAAC,oBAAoB,CAAC,GAAG,CAAC,iCAAmB,CAAC,CAAC;YAEpF,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;YACxD,MAAM,aAAa,CAAC,iBAAiB,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;YAC5D,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;YAErB,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC;YAC3D,MAAM,aAAa,CAAC,iBAAiB,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;YAC/D,IAAI,OAAO,GAAG,MAAM,UAAU,CAAC,OAAO,CAAC,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;YAEpE,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,0BAAqB,CAAC;YAC1D,cAAc,CAAC,OAAQ,CAAC,gBAAgB,EACvC;gBACC,CAAA,GAAA,oBAAQ,CAAA,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,UAAU,CAAC,QAAQ,EAAE,+BAAgB,EAAE,WAAW,CAAC;gBACjG,CAAA,GAAA,oBAAQ,CAAA,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,UAAU,CAAC,QAAQ,EAAE,+BAAgB,EAAE,iBAAiB,CAAC;aACvG,CAAC,CAAC;YACJ,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAEjD,OAAO,GAAG,MAAM,UAAU,CAAC,MAAM,CAAC,OAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC;YAE9F,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,0BAAqB,CAAC;YAC1D,cAAc,CAAC,OAAQ,CAAC,gBAAgB,EACvC;gBACC,CAAA,GAAA,oBAAQ,CAAA,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,UAAU,CAAC,QAAQ,EAAE,+BAAgB,EAAE,WAAW,CAAC;gBACjG,CAAA,GAAA,oBAAQ,CAAA,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,UAAU,CAAC,QAAQ,EAAE,+BAAgB,EAAE,iBAAiB,CAAC;aACvG,CAAC,CAAC;YACJ,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,sFAAsF,EAAE,KAAK,IAAI,EAAE;YACvG,MAAM,kBAAkB,GAAG,UAAU,CAAC,oBAAoB,CAAC,GAAG,CAAC,iCAAmB,CAAC,CAAC;YAEpF,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;YACxD,MAAM,aAAa,CAAC,iBAAiB,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;YAC5D,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;YAErB,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC;YAC3D,MAAM,aAAa,CAAC,iBAAiB,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;YAC/D,IAAI,OAAO,GAAG,MAAM,UAAU,CAAC,OAAO,CAAC,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;YAEpE,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,0BAAqB,CAAC;YAC1D,cAAc,CAAC,OAAQ,CAAC,gBAAgB,EACvC;gBACC,CAAA,GAAA,oBAAQ,CAAA,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,UAAU,CAAC,QAAQ,EAAE,+BAAgB,EAAE,WAAW,CAAC;gBACjG,CAAA,GAAA,oBAAQ,CAAA,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,UAAU,CAAC,QAAQ,EAAE,+BAAgB,EAAE,iBAAiB,CAAC;aACvG,CAAC,CAAC;YACJ,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAEjD,OAAO,GAAG,MAAM,UAAU,CAAC,MAAM,CAAC,OAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC;YAC9F,OAAO,GAAG,MAAM,UAAU,CAAC,MAAM,CAAC,OAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC;YAE5F,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,0BAAqB,CAAC;YAC1D,cAAc,CAAC,OAAQ,CAAC,gBAAgB,EACvC;gBACC,CAAA,GAAA,oBAAQ,CAAA,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,UAAU,CAAC,QAAQ,EAAE,+BAAgB,EAAE,WAAW,CAAC;gBACjG,CAAA,GAAA,oBAAQ,CAAA,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,UAAU,CAAC,QAAQ,EAAE,+BAAgB,EAAE,iBAAiB,CAAC;aACvG,CAAC,CAAC;YACJ,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,kGAAkG,EAAE,KAAK,IAAI,EAAE;YACnH,MAAM,kBAAkB,GAAG,UAAU,CAAC,oBAAoB,CAAC,GAAG,CAAC,iCAAmB,CAAC,CAAC;YAEpF,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;YACxD,MAAM,aAAa,CAAC,iBAAiB,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;YAC5D,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;YAErB,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC;YAC3D,MAAM,aAAa,CAAC,iBAAiB,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;YAC/D,IAAI,OAAO,GAAG,MAAM,UAAU,CAAC,OAAO,CAAC,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;YAEpE,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,0BAAqB,CAAC;YAC1D,cAAc,CAAC,OAAQ,CAAC,gBAAgB,EACvC;gBACC,CAAA,GAAA,oBAAQ,CAAA,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,UAAU,CAAC,QAAQ,EAAE,+BAAgB,EAAE,WAAW,CAAC;gBACjG,CAAA,GAAA,oBAAQ,CAAA,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,UAAU,CAAC,QAAQ,EAAE,+BAAgB,EAAE,iBAAiB,CAAC;aACvG,CAAC,CAAC;YACJ,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAEjD,OAAO,GAAG,MAAM,UAAU,CAAC,MAAM,CAAC,OAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC;YAC9F,OAAO,GAAG,MAAM,UAAU,CAAC,MAAM,CAAC,OAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC;YAC5F,OAAO,GAAG,MAAM,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAExC,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,oBAAkB,CAAC;YACvD,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;YAClC,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,SAAS,aAAa,CAAC,OAAe;YACrC,MAAM,QAAQ,GAAc,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAChD,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACrC,CAAC;QAED,KAAK,UAAU,aAAa,CAAC,IAAY,EAAE,OAAe,EAAE,MAA0B;YACrF,MAAM,WAAW,GAAG,MAAM,CAAC,oBAAoB,CAAC,GAAG,CAAC,oBAAY,CAAC,CAAC;YAClE,MAAM,kBAAkB,GAAG,MAAM,CAAC,oBAAoB,CAAC,GAAG,CAAC,iCAAmB,CAAC,CAAC;YAChF,MAAM,gBAAgB,GAAG,CAAA,GAAA,oBAAQ,CAAA,CAAC,kBAAkB,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;YACzE,MAAM,WAAW,CAAC,SAAS,CAAC,gBAAgB,EAAE,iBAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;QAC7E,CAAC;QAED,KAAK,UAAU,aAAa,CAAC,IAAY,EAAE,MAA0B;YACpE,MAAM,WAAW,GAAG,MAAM,CAAC,oBAAoB,CAAC,GAAG,CAAC,oBAAY,CAAC,CAAC;YAClE,MAAM,kBAAkB,GAAG,MAAM,CAAC,oBAAoB,CAAC,GAAG,CAAC,iCAAmB,CAAC,CAAC;YAChF,MAAM,gBAAgB,GAAG,CAAA,GAAA,oBAAQ,CAAA,CAAC,kBAAkB,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;YACzE,MAAM,WAAW,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;QACzC,CAAC;QAED,KAAK,UAAU,WAAW,CAAC,IAAY,EAAE,MAA0B;YAClE,MAAM,WAAW,GAAG,MAAM,CAAC,oBAAoB,CAAC,GAAG,CAAC,oBAAY,CAAC,CAAC;YAClE,MAAM,kBAAkB,GAAG,MAAM,CAAC,oBAAoB,CAAC,GAAG,CAAC,iCAAmB,CAAC,CAAC;YAChF,MAAM,gBAAgB,GAAG,CAAA,GAAA,oBAAQ,CAAA,CAAC,kBAAkB,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;YACzE,IAAI,MAAM,WAAW,CAAC,MAAM,CAAC,gBAAgB,CAAC,EAAE;gBAC/C,MAAM,OAAO,GAAG,MAAM,WAAW,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC;gBAC7D,OAAO,OAAO,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;aAChC;YACD,OAAO,IAAI,CAAC;QACb,CAAC;QAED,SAAS,cAAc,CAAC,MAA0B,EAAE,QAAe;YAClE,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,eAAe,EAAE,EAAE,EAAE,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;QAC9H,CAAC;IAEF,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { IUserDataSyncStoreService, IUserDataSyncService, SyncResource, SyncStatus, PREVIEW_DIR_NAME, ISyncData, IResourcePreview } from 'vs/platform/userDataSync/common/userDataSync';\nimport { UserDataSyncClient, UserDataSyncTestServer } from 'vs/platform/userDataSync/test/common/userDataSyncClient';\nimport { DisposableStore, toDisposable } from 'vs/base/common/lifecycle';\nimport { UserDataSyncService } from 'vs/platform/userDataSync/common/userDataSyncService';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { SnippetsSynchroniser } from 'vs/platform/userDataSync/common/snippetsSync';\nimport { joinPath, dirname } from 'vs/base/common/resources';\nimport { IStringDictionary } from 'vs/base/common/collections';\nimport { URI } from 'vs/base/common/uri';\n\nconst tsSnippet1 = `{\n\n\t// Place your snippets for TypeScript here. Each snippet is defined under a snippet name and has a prefix, body and\n\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\n\t// $1, $2 for tab stops, $0 for the final cursor position, Placeholders with the\n\t// same ids are connected.\n\t\"Print to console\": {\n\t// Example:\n\t\"prefix\": \"log\",\n\t\t\"body\": [\n\t\t\t\"console.log('$1');\",\n\t\t\t\"$2\"\n\t\t],\n\t\t\t\"description\": \"Log output to console\",\n\t}\n\n}`;\n\nconst tsSnippet2 = `{\n\n\t// Place your snippets for TypeScript here. Each snippet is defined under a snippet name and has a prefix, body and\n\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\n\t// $1, $2 for tab stops, $0 for the final cursor position, Placeholders with the\n\t// same ids are connected.\n\t\"Print to console\": {\n\t// Example:\n\t\"prefix\": \"log\",\n\t\t\"body\": [\n\t\t\t\"console.log('$1');\",\n\t\t\t\"$2\"\n\t\t],\n\t\t\t\"description\": \"Log output to console always\",\n\t}\n\n}`;\n\nconst htmlSnippet1 = `{\n/*\n\t// Place your snippets for HTML here. Each snippet is defined under a snippet name and has a prefix, body and\n\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted.\n\t// Example:\n\t\"Print to console\": {\n\t\"prefix\": \"log\",\n\t\t\"body\": [\n\t\t\t\"console.log('$1');\",\n\t\t\t\"$2\"\n\t\t],\n\t\t\t\"description\": \"Log output to console\"\n\t}\n*/\n\"Div\": {\n\t\"prefix\": \"div\",\n\t\t\"body\": [\n\t\t\t\"<div>\",\n\t\t\t\"\",\n\t\t\t\"</div>\"\n\t\t],\n\t\t\t\"description\": \"New div\"\n\t}\n}`;\n\nconst htmlSnippet2 = `{\n/*\n\t// Place your snippets for HTML here. Each snippet is defined under a snippet name and has a prefix, body and\n\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted.\n\t// Example:\n\t\"Print to console\": {\n\t\"prefix\": \"log\",\n\t\t\"body\": [\n\t\t\t\"console.log('$1');\",\n\t\t\t\"$2\"\n\t\t],\n\t\t\t\"description\": \"Log output to console\"\n\t}\n*/\n\"Div\": {\n\t\"prefix\": \"div\",\n\t\t\"body\": [\n\t\t\t\"<div>\",\n\t\t\t\"\",\n\t\t\t\"</div>\"\n\t\t],\n\t\t\t\"description\": \"New div changed\"\n\t}\n}`;\n\nconst htmlSnippet3 = `{\n/*\n\t// Place your snippets for HTML here. Each snippet is defined under a snippet name and has a prefix, body and\n\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted.\n\t// Example:\n\t\"Print to console\": {\n\t\"prefix\": \"log\",\n\t\t\"body\": [\n\t\t\t\"console.log('$1');\",\n\t\t\t\"$2\"\n\t\t],\n\t\t\t\"description\": \"Log output to console\"\n\t}\n*/\n\"Div\": {\n\t\"prefix\": \"div\",\n\t\t\"body\": [\n\t\t\t\"<div>\",\n\t\t\t\"\",\n\t\t\t\"</div>\"\n\t\t],\n\t\t\t\"description\": \"New div changed again\"\n\t}\n}`;\n\nconst globalSnippet = `{\n\t// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and\n\t// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope\n\t// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is\n\t// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\n\t// $1, $2 for tab stops, $0 for the final cursor position, and {1: label}, { 2: another } for placeholders.\n\t// Placeholders with the same ids are connected.\n\t// Example:\n\t// \"Print to console\": {\n\t// \t\"scope\": \"javascript,typescript\",\n\t// \t\"prefix\": \"log\",\n\t// \t\"body\": [\n\t// \t\t\"console.log('$1');\",\n\t// \t\t\"$2\"\n\t// \t],\n\t// \t\"description\": \"Log output to console\"\n\t// }\n}`;\n\nsuite('SnippetsSync', () => {\n\n\tconst disposableStore = new DisposableStore();\n\tconst server = new UserDataSyncTestServer();\n\tlet testClient: UserDataSyncClient;\n\tlet client2: UserDataSyncClient;\n\n\tlet testObject: SnippetsSynchroniser;\n\n\tsetup(async () => {\n\t\ttestClient = disposableStore.add(new UserDataSyncClient(server));\n\t\tawait testClient.setUp(true);\n\t\ttestObject = (testClient.instantiationService.get(IUserDataSyncService) as UserDataSyncService).getSynchroniser(SyncResource.Snippets) as SnippetsSynchroniser;\n\t\tdisposableStore.add(toDisposable(() => testClient.instantiationService.get(IUserDataSyncStoreService).clear()));\n\n\t\tclient2 = disposableStore.add(new UserDataSyncClient(server));\n\t\tawait client2.setUp(true);\n\t});\n\n\tteardown(() => disposableStore.clear());\n\n\ttest('when snippets does not exist', async () => {\n\t\tconst fileService = testClient.instantiationService.get(IFileService);\n\t\tconst snippetsResource = testClient.instantiationService.get(IEnvironmentService).snippetsHome;\n\n\t\tassert.deepStrictEqual(await testObject.getLastSyncUserData(), null);\n\t\tlet manifest = await testClient.manifest();\n\t\tserver.reset();\n\t\tawait testObject.sync(manifest);\n\n\t\tassert.deepStrictEqual(server.requests, [\n\t\t\t{ type: 'GET', url: `${server.url}/v1/resource/${testObject.resource}/latest`, headers: {} },\n\t\t]);\n\t\tassert.ok(!await fileService.exists(snippetsResource));\n\n\t\tconst lastSyncUserData = await testObject.getLastSyncUserData();\n\t\tconst remoteUserData = await testObject.getRemoteUserData(null);\n\t\tassert.deepStrictEqual(lastSyncUserData!.ref, remoteUserData.ref);\n\t\tassert.deepStrictEqual(lastSyncUserData!.syncData, remoteUserData.syncData);\n\t\tassert.strictEqual(lastSyncUserData!.syncData, null);\n\n\t\tmanifest = await testClient.manifest();\n\t\tserver.reset();\n\t\tawait testObject.sync(manifest);\n\t\tassert.deepStrictEqual(server.requests, []);\n\n\t\tmanifest = await testClient.manifest();\n\t\tserver.reset();\n\t\tawait testObject.sync(manifest);\n\t\tassert.deepStrictEqual(server.requests, []);\n\t});\n\n\ttest('when snippet is created after first sync', async () => {\n\t\tawait testObject.sync(await testClient.manifest());\n\t\tawait updateSnippet('html.json', htmlSnippet1, testClient);\n\n\t\tlet lastSyncUserData = await testObject.getLastSyncUserData();\n\t\tconst manifest = await testClient.manifest();\n\t\tserver.reset();\n\t\tawait testObject.sync(manifest);\n\n\t\tassert.deepStrictEqual(server.requests, [\n\t\t\t{ type: 'POST', url: `${server.url}/v1/resource/${testObject.resource}`, headers: { 'If-Match': lastSyncUserData?.ref } },\n\t\t]);\n\n\t\tlastSyncUserData = await testObject.getLastSyncUserData();\n\t\tconst remoteUserData = await testObject.getRemoteUserData(null);\n\t\tassert.deepStrictEqual(lastSyncUserData!.ref, remoteUserData.ref);\n\t\tassert.deepStrictEqual(lastSyncUserData!.syncData, remoteUserData.syncData);\n\t\tassert.deepStrictEqual(lastSyncUserData!.syncData!.content, JSON.stringify({ 'html.json': htmlSnippet1 }));\n\t});\n\n\ttest('first time sync - outgoing to server (no snippets)', async () => {\n\t\tawait updateSnippet('html.json', htmlSnippet1, testClient);\n\t\tawait updateSnippet('typescript.json', tsSnippet1, testClient);\n\n\t\tawait testObject.sync(await testClient.manifest());\n\t\tassert.strictEqual(testObject.status, SyncStatus.Idle);\n\t\tassert.deepStrictEqual(testObject.conflicts, []);\n\n\t\tconst { content } = await testClient.read(testObject.resource);\n\t\tassert.ok(content !== null);\n\t\tconst actual = parseSnippets(content!);\n\t\tassert.deepStrictEqual(actual, { 'html.json': htmlSnippet1, 'typescript.json': tsSnippet1 });\n\t});\n\n\ttest('first time sync - incoming from server (no snippets)', async () => {\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2);\n\t\tawait updateSnippet('typescript.json', tsSnippet1, client2);\n\t\tawait client2.sync();\n\n\t\tawait testObject.sync(await testClient.manifest());\n\t\tassert.strictEqual(testObject.status, SyncStatus.Idle);\n\t\tassert.deepStrictEqual(testObject.conflicts, []);\n\n\t\tconst actual1 = await readSnippet('html.json', testClient);\n\t\tassert.strictEqual(actual1, htmlSnippet1);\n\t\tconst actual2 = await readSnippet('typescript.json', testClient);\n\t\tassert.strictEqual(actual2, tsSnippet1);\n\t});\n\n\ttest('first time sync when snippets exists', async () => {\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2);\n\t\tawait client2.sync();\n\n\t\tawait updateSnippet('typescript.json', tsSnippet1, testClient);\n\t\tawait testObject.sync(await testClient.manifest());\n\t\tassert.strictEqual(testObject.status, SyncStatus.Idle);\n\t\tassert.deepStrictEqual(testObject.conflicts, []);\n\n\t\tconst actual1 = await readSnippet('html.json', testClient);\n\t\tassert.strictEqual(actual1, htmlSnippet1);\n\t\tconst actual2 = await readSnippet('typescript.json', testClient);\n\t\tassert.strictEqual(actual2, tsSnippet1);\n\n\t\tconst { content } = await testClient.read(testObject.resource);\n\t\tassert.ok(content !== null);\n\t\tconst actual = parseSnippets(content!);\n\t\tassert.deepStrictEqual(actual, { 'html.json': htmlSnippet1, 'typescript.json': tsSnippet1 });\n\t});\n\n\ttest('first time sync when snippets exists - has conflicts', async () => {\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2);\n\t\tawait client2.sync();\n\n\t\tawait updateSnippet('html.json', htmlSnippet2, testClient);\n\t\tawait testObject.sync(await testClient.manifest());\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.HasConflicts);\n\t\tconst environmentService = testClient.instantiationService.get(IEnvironmentService);\n\t\tconst local = joinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'html.json');\n\t\tassertPreviews(testObject.conflicts, [local]);\n\t});\n\n\ttest('first time sync when snippets exists - has conflicts and accept conflicts', async () => {\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2);\n\t\tawait client2.sync();\n\n\t\tawait updateSnippet('html.json', htmlSnippet2, testClient);\n\t\tawait testObject.sync(await testClient.manifest());\n\t\tconst conflicts = testObject.conflicts;\n\t\tawait testObject.accept(conflicts[0].previewResource, htmlSnippet1);\n\t\tawait testObject.apply(false);\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.Idle);\n\t\tassert.deepStrictEqual(testObject.conflicts, []);\n\n\t\tconst actual1 = await readSnippet('html.json', testClient);\n\t\tassert.strictEqual(actual1, htmlSnippet1);\n\n\t\tconst { content } = await testClient.read(testObject.resource);\n\t\tassert.ok(content !== null);\n\t\tconst actual = parseSnippets(content!);\n\t\tassert.deepStrictEqual(actual, { 'html.json': htmlSnippet1 });\n\t});\n\n\ttest('first time sync when snippets exists - has multiple conflicts', async () => {\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2);\n\t\tawait updateSnippet('typescript.json', tsSnippet1, client2);\n\t\tawait client2.sync();\n\n\t\tawait updateSnippet('html.json', htmlSnippet2, testClient);\n\t\tawait updateSnippet('typescript.json', tsSnippet2, testClient);\n\t\tawait testObject.sync(await testClient.manifest());\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.HasConflicts);\n\t\tconst environmentService = testClient.instantiationService.get(IEnvironmentService);\n\t\tconst local1 = joinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'html.json');\n\t\tconst local2 = joinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'typescript.json');\n\t\tassertPreviews(testObject.conflicts, [local1, local2]);\n\t});\n\n\ttest('first time sync when snippets exists - has multiple conflicts and accept one conflict', async () => {\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2);\n\t\tawait updateSnippet('typescript.json', tsSnippet1, client2);\n\t\tawait client2.sync();\n\n\t\tawait updateSnippet('html.json', htmlSnippet2, testClient);\n\t\tawait updateSnippet('typescript.json', tsSnippet2, testClient);\n\t\tawait testObject.sync(await testClient.manifest());\n\n\t\tlet conflicts = testObject.conflicts;\n\t\tawait testObject.accept(conflicts[0].previewResource, htmlSnippet2);\n\n\t\tconflicts = testObject.conflicts;\n\t\tassert.strictEqual(testObject.status, SyncStatus.HasConflicts);\n\t\tconst environmentService = testClient.instantiationService.get(IEnvironmentService);\n\t\tconst local = joinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'typescript.json');\n\t\tassertPreviews(testObject.conflicts, [local]);\n\t});\n\n\ttest('first time sync when snippets exists - has multiple conflicts and accept all conflicts', async () => {\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2);\n\t\tawait updateSnippet('typescript.json', tsSnippet1, client2);\n\t\tawait client2.sync();\n\n\t\tawait updateSnippet('html.json', htmlSnippet2, testClient);\n\t\tawait updateSnippet('typescript.json', tsSnippet2, testClient);\n\t\tawait testObject.sync(await testClient.manifest());\n\n\t\tconst conflicts = testObject.conflicts;\n\t\tawait testObject.accept(conflicts[0].previewResource, htmlSnippet2);\n\t\tawait testObject.accept(conflicts[1].previewResource, tsSnippet1);\n\t\tawait testObject.apply(false);\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.Idle);\n\t\tassert.deepStrictEqual(testObject.conflicts, []);\n\n\t\tconst actual1 = await readSnippet('html.json', testClient);\n\t\tassert.strictEqual(actual1, htmlSnippet2);\n\t\tconst actual2 = await readSnippet('typescript.json', testClient);\n\t\tassert.strictEqual(actual2, tsSnippet1);\n\n\t\tconst { content } = await testClient.read(testObject.resource);\n\t\tassert.ok(content !== null);\n\t\tconst actual = parseSnippets(content!);\n\t\tassert.deepStrictEqual(actual, { 'html.json': htmlSnippet2, 'typescript.json': tsSnippet1 });\n\t});\n\n\ttest('sync adding a snippet', async () => {\n\t\tawait updateSnippet('html.json', htmlSnippet1, testClient);\n\t\tawait testObject.sync(await testClient.manifest());\n\n\t\tawait updateSnippet('typescript.json', tsSnippet1, testClient);\n\t\tawait testObject.sync(await testClient.manifest());\n\t\tassert.strictEqual(testObject.status, SyncStatus.Idle);\n\t\tassert.deepStrictEqual(testObject.conflicts, []);\n\n\t\tconst actual1 = await readSnippet('html.json', testClient);\n\t\tassert.strictEqual(actual1, htmlSnippet1);\n\t\tconst actual2 = await readSnippet('typescript.json', testClient);\n\t\tassert.strictEqual(actual2, tsSnippet1);\n\n\t\tconst { content } = await testClient.read(testObject.resource);\n\t\tassert.ok(content !== null);\n\t\tconst actual = parseSnippets(content!);\n\t\tassert.deepStrictEqual(actual, { 'html.json': htmlSnippet1, 'typescript.json': tsSnippet1 });\n\t});\n\n\ttest('sync adding a snippet - accept', async () => {\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2);\n\t\tawait client2.sync();\n\t\tawait testObject.sync(await testClient.manifest());\n\n\t\tawait updateSnippet('typescript.json', tsSnippet1, client2);\n\t\tawait client2.sync();\n\n\t\tawait testObject.sync(await testClient.manifest());\n\t\tassert.strictEqual(testObject.status, SyncStatus.Idle);\n\t\tassert.deepStrictEqual(testObject.conflicts, []);\n\n\t\tconst actual1 = await readSnippet('html.json', testClient);\n\t\tassert.strictEqual(actual1, htmlSnippet1);\n\t\tconst actual2 = await readSnippet('typescript.json', testClient);\n\t\tassert.strictEqual(actual2, tsSnippet1);\n\t});\n\n\ttest('sync updating a snippet', async () => {\n\t\tawait updateSnippet('html.json', htmlSnippet1, testClient);\n\t\tawait testObject.sync(await testClient.manifest());\n\n\t\tawait updateSnippet('html.json', htmlSnippet2, testClient);\n\t\tawait testObject.sync(await testClient.manifest());\n\t\tassert.strictEqual(testObject.status, SyncStatus.Idle);\n\t\tassert.deepStrictEqual(testObject.conflicts, []);\n\n\t\tconst actual1 = await readSnippet('html.json', testClient);\n\t\tassert.strictEqual(actual1, htmlSnippet2);\n\n\t\tconst { content } = await testClient.read(testObject.resource);\n\t\tassert.ok(content !== null);\n\t\tconst actual = parseSnippets(content!);\n\t\tassert.deepStrictEqual(actual, { 'html.json': htmlSnippet2 });\n\t});\n\n\ttest('sync updating a snippet - accept', async () => {\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2);\n\t\tawait client2.sync();\n\t\tawait testObject.sync(await testClient.manifest());\n\n\t\tawait updateSnippet('html.json', htmlSnippet2, client2);\n\t\tawait client2.sync();\n\n\t\tawait testObject.sync(await testClient.manifest());\n\t\tassert.strictEqual(testObject.status, SyncStatus.Idle);\n\t\tassert.deepStrictEqual(testObject.conflicts, []);\n\n\t\tconst actual1 = await readSnippet('html.json', testClient);\n\t\tassert.strictEqual(actual1, htmlSnippet2);\n\t});\n\n\ttest('sync updating a snippet - conflict', async () => {\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2);\n\t\tawait client2.sync();\n\t\tawait testObject.sync(await testClient.manifest());\n\n\t\tawait updateSnippet('html.json', htmlSnippet2, client2);\n\t\tawait client2.sync();\n\n\t\tawait updateSnippet('html.json', htmlSnippet3, testClient);\n\t\tawait testObject.sync(await testClient.manifest());\n\t\tassert.strictEqual(testObject.status, SyncStatus.HasConflicts);\n\t\tconst environmentService = testClient.instantiationService.get(IEnvironmentService);\n\t\tconst local = joinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'html.json');\n\t\tassertPreviews(testObject.conflicts, [local]);\n\t});\n\n\ttest('sync updating a snippet - resolve conflict', async () => {\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2);\n\t\tawait client2.sync();\n\t\tawait testObject.sync(await testClient.manifest());\n\n\t\tawait updateSnippet('html.json', htmlSnippet2, client2);\n\t\tawait client2.sync();\n\n\t\tawait updateSnippet('html.json', htmlSnippet3, testClient);\n\t\tawait testObject.sync(await testClient.manifest());\n\t\tawait testObject.accept(testObject.conflicts[0].previewResource, htmlSnippet2);\n\t\tawait testObject.apply(false);\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.Idle);\n\t\tassert.deepStrictEqual(testObject.conflicts, []);\n\n\t\tconst actual1 = await readSnippet('html.json', testClient);\n\t\tassert.strictEqual(actual1, htmlSnippet2);\n\n\t\tconst { content } = await testClient.read(testObject.resource);\n\t\tassert.ok(content !== null);\n\t\tconst actual = parseSnippets(content!);\n\t\tassert.deepStrictEqual(actual, { 'html.json': htmlSnippet2 });\n\t});\n\n\ttest('sync removing a snippet', async () => {\n\t\tawait updateSnippet('html.json', htmlSnippet1, testClient);\n\t\tawait updateSnippet('typescript.json', tsSnippet1, testClient);\n\t\tawait testObject.sync(await testClient.manifest());\n\n\t\tawait removeSnippet('html.json', testClient);\n\t\tawait testObject.sync(await testClient.manifest());\n\t\tassert.strictEqual(testObject.status, SyncStatus.Idle);\n\t\tassert.deepStrictEqual(testObject.conflicts, []);\n\n\t\tconst actual1 = await readSnippet('typescript.json', testClient);\n\t\tassert.strictEqual(actual1, tsSnippet1);\n\t\tconst actual2 = await readSnippet('html.json', testClient);\n\t\tassert.strictEqual(actual2, null);\n\n\t\tconst { content } = await testClient.read(testObject.resource);\n\t\tassert.ok(content !== null);\n\t\tconst actual = parseSnippets(content!);\n\t\tassert.deepStrictEqual(actual, { 'typescript.json': tsSnippet1 });\n\t});\n\n\ttest('sync removing a snippet - accept', async () => {\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2);\n\t\tawait updateSnippet('typescript.json', tsSnippet1, client2);\n\t\tawait client2.sync();\n\t\tawait testObject.sync(await testClient.manifest());\n\n\t\tawait removeSnippet('html.json', client2);\n\t\tawait client2.sync();\n\n\t\tawait testObject.sync(await testClient.manifest());\n\t\tassert.strictEqual(testObject.status, SyncStatus.Idle);\n\t\tassert.deepStrictEqual(testObject.conflicts, []);\n\n\t\tconst actual1 = await readSnippet('typescript.json', testClient);\n\t\tassert.strictEqual(actual1, tsSnippet1);\n\t\tconst actual2 = await readSnippet('html.json', testClient);\n\t\tassert.strictEqual(actual2, null);\n\t});\n\n\ttest('sync removing a snippet locally and updating it remotely', async () => {\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2);\n\t\tawait updateSnippet('typescript.json', tsSnippet1, client2);\n\t\tawait client2.sync();\n\t\tawait testObject.sync(await testClient.manifest());\n\n\t\tawait updateSnippet('html.json', htmlSnippet2, client2);\n\t\tawait client2.sync();\n\n\t\tawait removeSnippet('html.json', testClient);\n\t\tawait testObject.sync(await testClient.manifest());\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.Idle);\n\t\tassert.deepStrictEqual(testObject.conflicts, []);\n\n\t\tconst actual1 = await readSnippet('typescript.json', testClient);\n\t\tassert.strictEqual(actual1, tsSnippet1);\n\t\tconst actual2 = await readSnippet('html.json', testClient);\n\t\tassert.strictEqual(actual2, htmlSnippet2);\n\t});\n\n\ttest('sync removing a snippet - conflict', async () => {\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2);\n\t\tawait updateSnippet('typescript.json', tsSnippet1, client2);\n\t\tawait client2.sync();\n\t\tawait testObject.sync(await testClient.manifest());\n\n\t\tawait removeSnippet('html.json', client2);\n\t\tawait client2.sync();\n\n\t\tawait updateSnippet('html.json', htmlSnippet2, testClient);\n\t\tawait testObject.sync(await testClient.manifest());\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.HasConflicts);\n\t\tconst environmentService = testClient.instantiationService.get(IEnvironmentService);\n\t\tconst local = joinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'html.json');\n\t\tassertPreviews(testObject.conflicts, [local]);\n\t});\n\n\ttest('sync removing a snippet - resolve conflict', async () => {\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2);\n\t\tawait updateSnippet('typescript.json', tsSnippet1, client2);\n\t\tawait client2.sync();\n\t\tawait testObject.sync(await testClient.manifest());\n\n\t\tawait removeSnippet('html.json', client2);\n\t\tawait client2.sync();\n\n\t\tawait updateSnippet('html.json', htmlSnippet2, testClient);\n\t\tawait testObject.sync(await testClient.manifest());\n\t\tawait testObject.accept(testObject.conflicts[0].previewResource, htmlSnippet3);\n\t\tawait testObject.apply(false);\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.Idle);\n\t\tassert.deepStrictEqual(testObject.conflicts, []);\n\n\t\tconst actual1 = await readSnippet('typescript.json', testClient);\n\t\tassert.strictEqual(actual1, tsSnippet1);\n\t\tconst actual2 = await readSnippet('html.json', testClient);\n\t\tassert.strictEqual(actual2, htmlSnippet3);\n\n\t\tconst { content } = await testClient.read(testObject.resource);\n\t\tassert.ok(content !== null);\n\t\tconst actual = parseSnippets(content!);\n\t\tassert.deepStrictEqual(actual, { 'typescript.json': tsSnippet1, 'html.json': htmlSnippet3 });\n\t});\n\n\ttest('sync removing a snippet - resolve conflict by removing', async () => {\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2);\n\t\tawait updateSnippet('typescript.json', tsSnippet1, client2);\n\t\tawait client2.sync();\n\t\tawait testObject.sync(await testClient.manifest());\n\n\t\tawait removeSnippet('html.json', client2);\n\t\tawait client2.sync();\n\n\t\tawait updateSnippet('html.json', htmlSnippet2, testClient);\n\t\tawait testObject.sync(await testClient.manifest());\n\t\tawait testObject.accept(testObject.conflicts[0].previewResource, null);\n\t\tawait testObject.apply(false);\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.Idle);\n\t\tassert.deepStrictEqual(testObject.conflicts, []);\n\n\t\tconst actual1 = await readSnippet('typescript.json', testClient);\n\t\tassert.strictEqual(actual1, tsSnippet1);\n\t\tconst actual2 = await readSnippet('html.json', testClient);\n\t\tassert.strictEqual(actual2, null);\n\n\t\tconst { content } = await testClient.read(testObject.resource);\n\t\tassert.ok(content !== null);\n\t\tconst actual = parseSnippets(content!);\n\t\tassert.deepStrictEqual(actual, { 'typescript.json': tsSnippet1 });\n\t});\n\n\ttest('sync global and language snippet', async () => {\n\t\tawait updateSnippet('global.code-snippets', globalSnippet, client2);\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2);\n\t\tawait client2.sync();\n\n\t\tawait testObject.sync(await testClient.manifest());\n\t\tassert.strictEqual(testObject.status, SyncStatus.Idle);\n\t\tassert.deepStrictEqual(testObject.conflicts, []);\n\n\t\tconst actual1 = await readSnippet('html.json', testClient);\n\t\tassert.strictEqual(actual1, htmlSnippet1);\n\t\tconst actual2 = await readSnippet('global.code-snippets', testClient);\n\t\tassert.strictEqual(actual2, globalSnippet);\n\n\t\tconst { content } = await testClient.read(testObject.resource);\n\t\tassert.ok(content !== null);\n\t\tconst actual = parseSnippets(content!);\n\t\tassert.deepStrictEqual(actual, { 'html.json': htmlSnippet1, 'global.code-snippets': globalSnippet });\n\t});\n\n\ttest('sync should ignore non snippets', async () => {\n\t\tawait updateSnippet('global.code-snippets', globalSnippet, client2);\n\t\tawait updateSnippet('html.html', htmlSnippet1, client2);\n\t\tawait updateSnippet('typescript.json', tsSnippet1, client2);\n\t\tawait client2.sync();\n\n\t\tawait testObject.sync(await testClient.manifest());\n\t\tassert.strictEqual(testObject.status, SyncStatus.Idle);\n\t\tassert.deepStrictEqual(testObject.conflicts, []);\n\n\t\tconst actual1 = await readSnippet('typescript.json', testClient);\n\t\tassert.strictEqual(actual1, tsSnippet1);\n\t\tconst actual2 = await readSnippet('global.code-snippets', testClient);\n\t\tassert.strictEqual(actual2, globalSnippet);\n\t\tconst actual3 = await readSnippet('html.html', testClient);\n\t\tassert.strictEqual(actual3, null);\n\n\t\tconst { content } = await testClient.read(testObject.resource);\n\t\tassert.ok(content !== null);\n\t\tconst actual = parseSnippets(content!);\n\t\tassert.deepStrictEqual(actual, { 'typescript.json': tsSnippet1, 'global.code-snippets': globalSnippet });\n\t});\n\n\ttest('previews are reset after all conflicts resolved', async () => {\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2);\n\t\tawait updateSnippet('typescript.json', tsSnippet1, client2);\n\t\tawait client2.sync();\n\n\t\tawait updateSnippet('html.json', htmlSnippet2, testClient);\n\t\tawait testObject.sync(await testClient.manifest());\n\n\t\tlet conflicts = testObject.conflicts;\n\t\tawait testObject.accept(conflicts[0].previewResource, htmlSnippet2);\n\t\tawait testObject.apply(false);\n\n\t\tconst fileService = testClient.instantiationService.get(IFileService);\n\t\tassert.ok(!await fileService.exists(dirname(conflicts[0].previewResource)));\n\t});\n\n\ttest('merge when there are multiple snippets and only one snippet is merged', async () => {\n\t\tconst environmentService = testClient.instantiationService.get(IEnvironmentService);\n\n\t\tawait updateSnippet('html.json', htmlSnippet2, testClient);\n\t\tawait updateSnippet('typescript.json', tsSnippet2, testClient);\n\t\tlet preview = await testObject.preview(await testClient.manifest());\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.Syncing);\n\t\tassertPreviews(preview!.resourcePreviews,\n\t\t\t[\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'html.json'),\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'typescript.json'),\n\t\t\t]);\n\t\tassert.deepStrictEqual(testObject.conflicts, []);\n\n\t\tpreview = await testObject.merge(preview!.resourcePreviews[0].localResource);\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.Syncing);\n\t\tassertPreviews(preview!.resourcePreviews,\n\t\t\t[\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'html.json'),\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'typescript.json'),\n\t\t\t]);\n\t\tassert.deepStrictEqual(testObject.conflicts, []);\n\t});\n\n\ttest('merge when there are multiple snippets and all snippets are merged', async () => {\n\t\tconst environmentService = testClient.instantiationService.get(IEnvironmentService);\n\n\t\tawait updateSnippet('html.json', htmlSnippet2, testClient);\n\t\tawait updateSnippet('typescript.json', tsSnippet2, testClient);\n\t\tlet preview = await testObject.preview(await testClient.manifest());\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.Syncing);\n\t\tassertPreviews(preview!.resourcePreviews,\n\t\t\t[\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'html.json'),\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'typescript.json'),\n\t\t\t]);\n\t\tassert.deepStrictEqual(testObject.conflicts, []);\n\n\t\tpreview = await testObject.merge(preview!.resourcePreviews[0].localResource);\n\t\tpreview = await testObject.merge(preview!.resourcePreviews[1].localResource);\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.Syncing);\n\t\tassertPreviews(preview!.resourcePreviews,\n\t\t\t[\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'html.json'),\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'typescript.json'),\n\t\t\t]);\n\t\tassert.deepStrictEqual(testObject.conflicts, []);\n\t});\n\n\ttest('merge when there are multiple snippets and all snippets are merged and applied', async () => {\n\t\tconst environmentService = testClient.instantiationService.get(IEnvironmentService);\n\n\t\tawait updateSnippet('html.json', htmlSnippet2, testClient);\n\t\tawait updateSnippet('typescript.json', tsSnippet2, testClient);\n\t\tlet preview = await testObject.preview(await testClient.manifest());\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.Syncing);\n\t\tassertPreviews(preview!.resourcePreviews,\n\t\t\t[\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'html.json'),\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'typescript.json'),\n\t\t\t]);\n\t\tassert.deepStrictEqual(testObject.conflicts, []);\n\n\t\tpreview = await testObject.merge(preview!.resourcePreviews[0].localResource);\n\t\tpreview = await testObject.merge(preview!.resourcePreviews[1].localResource);\n\t\tpreview = await testObject.apply(false);\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.Idle);\n\t\tassert.strictEqual(preview, null);\n\t\tassert.deepStrictEqual(testObject.conflicts, []);\n\t});\n\n\ttest('merge when there are multiple snippets and one snippet has no changes and one snippet is merged', async () => {\n\t\tconst environmentService = testClient.instantiationService.get(IEnvironmentService);\n\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2);\n\t\tawait client2.sync();\n\n\t\tawait updateSnippet('html.json', htmlSnippet1, testClient);\n\t\tawait updateSnippet('typescript.json', tsSnippet2, testClient);\n\t\tlet preview = await testObject.preview(await testClient.manifest());\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.Syncing);\n\t\tassertPreviews(preview!.resourcePreviews,\n\t\t\t[\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'typescript.json'),\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'html.json'),\n\t\t\t]);\n\t\tassert.deepStrictEqual(testObject.conflicts, []);\n\n\t\tpreview = await testObject.merge(preview!.resourcePreviews[0].localResource);\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.Syncing);\n\t\tassertPreviews(preview!.resourcePreviews,\n\t\t\t[\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'typescript.json'),\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'html.json'),\n\t\t\t]);\n\t\tassert.deepStrictEqual(testObject.conflicts, []);\n\t});\n\n\ttest('merge when there are multiple snippets and one snippet has no changes and one snippet is merged and applied', async () => {\n\t\tconst environmentService = testClient.instantiationService.get(IEnvironmentService);\n\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2);\n\t\tawait client2.sync();\n\n\t\tawait updateSnippet('html.json', htmlSnippet1, testClient);\n\t\tawait updateSnippet('typescript.json', tsSnippet2, testClient);\n\t\tlet preview = await testObject.preview(await testClient.manifest());\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.Syncing);\n\t\tassertPreviews(preview!.resourcePreviews,\n\t\t\t[\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'typescript.json'),\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'html.json'),\n\t\t\t]);\n\t\tassert.deepStrictEqual(testObject.conflicts, []);\n\n\t\tpreview = await testObject.merge(preview!.resourcePreviews[0].localResource);\n\t\tpreview = await testObject.apply(false);\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.Idle);\n\t\tassert.strictEqual(preview, null);\n\t\tassert.deepStrictEqual(testObject.conflicts, []);\n\t});\n\n\ttest('merge when there are multiple snippets with conflicts and only one snippet is merged', async () => {\n\t\tconst environmentService = testClient.instantiationService.get(IEnvironmentService);\n\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2);\n\t\tawait updateSnippet('typescript.json', tsSnippet1, client2);\n\t\tawait client2.sync();\n\n\t\tawait updateSnippet('html.json', htmlSnippet2, testClient);\n\t\tawait updateSnippet('typescript.json', tsSnippet2, testClient);\n\t\tlet preview = await testObject.preview(await testClient.manifest());\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.Syncing);\n\t\tassertPreviews(preview!.resourcePreviews,\n\t\t\t[\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'html.json'),\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'typescript.json'),\n\t\t\t]);\n\t\tassert.deepStrictEqual(testObject.conflicts, []);\n\n\t\tpreview = await testObject.merge(preview!.resourcePreviews[0].previewResource);\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.HasConflicts);\n\t\tassertPreviews(preview!.resourcePreviews,\n\t\t\t[\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'html.json'),\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'typescript.json'),\n\t\t\t]);\n\t\tassertPreviews(testObject.conflicts,\n\t\t\t[\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'html.json'),\n\t\t\t]);\n\t});\n\n\ttest('merge when there are multiple snippets with conflicts and all snippets are merged', async () => {\n\t\tconst environmentService = testClient.instantiationService.get(IEnvironmentService);\n\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2);\n\t\tawait updateSnippet('typescript.json', tsSnippet1, client2);\n\t\tawait client2.sync();\n\n\t\tawait updateSnippet('html.json', htmlSnippet2, testClient);\n\t\tawait updateSnippet('typescript.json', tsSnippet2, testClient);\n\t\tlet preview = await testObject.preview(await testClient.manifest());\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.Syncing);\n\t\tassertPreviews(preview!.resourcePreviews,\n\t\t\t[\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'html.json'),\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'typescript.json'),\n\t\t\t]);\n\t\tassert.deepStrictEqual(testObject.conflicts, []);\n\n\t\tpreview = await testObject.merge(preview!.resourcePreviews[0].previewResource);\n\t\tpreview = await testObject.merge(preview!.resourcePreviews[1].previewResource);\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.HasConflicts);\n\t\tassertPreviews(preview!.resourcePreviews,\n\t\t\t[\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'html.json'),\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'typescript.json'),\n\t\t\t]);\n\t\tassertPreviews(testObject.conflicts,\n\t\t\t[\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'html.json'),\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'typescript.json'),\n\t\t\t]);\n\t});\n\n\ttest('accept when there are multiple snippets with conflicts and only one snippet is accepted', async () => {\n\t\tconst environmentService = testClient.instantiationService.get(IEnvironmentService);\n\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2);\n\t\tawait updateSnippet('typescript.json', tsSnippet1, client2);\n\t\tawait client2.sync();\n\n\t\tawait updateSnippet('html.json', htmlSnippet2, testClient);\n\t\tawait updateSnippet('typescript.json', tsSnippet2, testClient);\n\t\tlet preview = await testObject.preview(await testClient.manifest());\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.Syncing);\n\t\tassertPreviews(preview!.resourcePreviews,\n\t\t\t[\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'html.json'),\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'typescript.json'),\n\t\t\t]);\n\t\tassert.deepStrictEqual(testObject.conflicts, []);\n\n\t\tpreview = await testObject.accept(preview!.resourcePreviews[0].previewResource, htmlSnippet2);\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.Syncing);\n\t\tassertPreviews(preview!.resourcePreviews,\n\t\t\t[\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'html.json'),\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'typescript.json'),\n\t\t\t]);\n\t\tassert.deepStrictEqual(testObject.conflicts, []);\n\t});\n\n\ttest('accept when there are multiple snippets with conflicts and all snippets are accepted', async () => {\n\t\tconst environmentService = testClient.instantiationService.get(IEnvironmentService);\n\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2);\n\t\tawait updateSnippet('typescript.json', tsSnippet1, client2);\n\t\tawait client2.sync();\n\n\t\tawait updateSnippet('html.json', htmlSnippet2, testClient);\n\t\tawait updateSnippet('typescript.json', tsSnippet2, testClient);\n\t\tlet preview = await testObject.preview(await testClient.manifest());\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.Syncing);\n\t\tassertPreviews(preview!.resourcePreviews,\n\t\t\t[\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'html.json'),\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'typescript.json'),\n\t\t\t]);\n\t\tassert.deepStrictEqual(testObject.conflicts, []);\n\n\t\tpreview = await testObject.accept(preview!.resourcePreviews[0].previewResource, htmlSnippet2);\n\t\tpreview = await testObject.accept(preview!.resourcePreviews[1].previewResource, tsSnippet2);\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.Syncing);\n\t\tassertPreviews(preview!.resourcePreviews,\n\t\t\t[\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'html.json'),\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'typescript.json'),\n\t\t\t]);\n\t\tassert.deepStrictEqual(testObject.conflicts, []);\n\t});\n\n\ttest('accept when there are multiple snippets with conflicts and all snippets are accepted and applied', async () => {\n\t\tconst environmentService = testClient.instantiationService.get(IEnvironmentService);\n\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2);\n\t\tawait updateSnippet('typescript.json', tsSnippet1, client2);\n\t\tawait client2.sync();\n\n\t\tawait updateSnippet('html.json', htmlSnippet2, testClient);\n\t\tawait updateSnippet('typescript.json', tsSnippet2, testClient);\n\t\tlet preview = await testObject.preview(await testClient.manifest());\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.Syncing);\n\t\tassertPreviews(preview!.resourcePreviews,\n\t\t\t[\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'html.json'),\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'typescript.json'),\n\t\t\t]);\n\t\tassert.deepStrictEqual(testObject.conflicts, []);\n\n\t\tpreview = await testObject.accept(preview!.resourcePreviews[0].previewResource, htmlSnippet2);\n\t\tpreview = await testObject.accept(preview!.resourcePreviews[1].previewResource, tsSnippet2);\n\t\tpreview = await testObject.apply(false);\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.Idle);\n\t\tassert.strictEqual(preview, null);\n\t\tassert.deepStrictEqual(testObject.conflicts, []);\n\t});\n\n\tfunction parseSnippets(content: string): IStringDictionary<string> {\n\t\tconst syncData: ISyncData = JSON.parse(content);\n\t\treturn JSON.parse(syncData.content);\n\t}\n\n\tasync function updateSnippet(name: string, content: string, client: UserDataSyncClient): Promise<void> {\n\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\tconst environmentService = client.instantiationService.get(IEnvironmentService);\n\t\tconst snippetsResource = joinPath(environmentService.snippetsHome, name);\n\t\tawait fileService.writeFile(snippetsResource, VSBuffer.fromString(content));\n\t}\n\n\tasync function removeSnippet(name: string, client: UserDataSyncClient): Promise<void> {\n\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\tconst environmentService = client.instantiationService.get(IEnvironmentService);\n\t\tconst snippetsResource = joinPath(environmentService.snippetsHome, name);\n\t\tawait fileService.del(snippetsResource);\n\t}\n\n\tasync function readSnippet(name: string, client: UserDataSyncClient): Promise<string | null> {\n\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\tconst environmentService = client.instantiationService.get(IEnvironmentService);\n\t\tconst snippetsResource = joinPath(environmentService.snippetsHome, name);\n\t\tif (await fileService.exists(snippetsResource)) {\n\t\t\tconst content = await fileService.readFile(snippetsResource);\n\t\t\treturn content.value.toString();\n\t\t}\n\t\treturn null;\n\t}\n\n\tfunction assertPreviews(actual: IResourcePreview[], expected: URI[]) {\n\t\tassert.deepStrictEqual(actual.map(({ previewResource }) => previewResource.toString()), expected.map(uri => uri.toString()));\n\t}\n\n});\n"]}