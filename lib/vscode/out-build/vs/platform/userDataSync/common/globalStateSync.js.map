{"version":3,"file":"globalStateSync.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/userDataSync/common/globalStateSync.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\tIUserDataSyncStoreService, IUserDataSyncLogService, IGlobalState, SyncResource, IUserDataSynchroniser, IUserDataSyncResourceEnablementService,\n\tIUserDataSyncBackupStoreService, ISyncResourceHandle, IStorageValue, USER_DATA_SYNC_SCHEME, IRemoteUserData, Change, ALL_SYNC_RESOURCES, getEnablementKey, SYNC_SERVICE_URL_TYPE, UserDataSyncStoreType, IUserData, ISyncData, createSyncHeaders, UserDataSyncError, UserDataSyncErrorCode\n} from 'vs/platform/userDataSync/common/userDataSync';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { Event } from 'vs/base/common/event';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { IStringDictionary } from 'vs/base/common/collections';\nimport { edit } from 'vs/platform/userDataSync/common/content';\nimport { merge } from 'vs/platform/userDataSync/common/globalStateMerge';\nimport { parse } from 'vs/base/common/json';\nimport { AbstractInitializer, AbstractSynchroniser, IAcceptResult, IMergeResult, IResourcePreview, isSyncData } from 'vs/platform/userDataSync/common/abstractSynchronizer';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { URI } from 'vs/base/common/uri';\nimport { format } from 'vs/base/common/jsonFormatter';\nimport { applyEdits } from 'vs/base/common/jsonEdit';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { isWeb } from 'vs/base/common/platform';\nimport { UserDataSyncStoreClient } from 'vs/platform/userDataSync/common/userDataSyncStoreService';\nimport { getServiceMachineId } from 'vs/platform/serviceMachineId/common/serviceMachineId';\nimport { generateUuid } from 'vs/base/common/uuid';\nimport { IHeaders } from 'vs/base/parts/request/common/request';\nimport { ILogService } from 'vs/platform/log/common/log';\n\nconst argvStoragePrefx = 'globalState.argv.';\nconst argvProperties: string[] = ['locale'];\n\ntype StorageKeys = { machine: string[], user: string[], unregistered: string[] };\n\ninterface IGlobalStateResourceMergeResult extends IAcceptResult {\n\treadonly local: { added: IStringDictionary<IStorageValue>, removed: string[], updated: IStringDictionary<IStorageValue> };\n\treadonly remote: IStringDictionary<IStorageValue> | null;\n}\n\nexport interface IGlobalStateResourcePreview extends IResourcePreview {\n\treadonly localUserData: IGlobalState;\n\treadonly previewResult: IGlobalStateResourceMergeResult;\n\treadonly storageKeys: StorageKeys;\n}\n\nfunction formatAndStringify(globalState: IGlobalState): string {\n\tconst storageKeys = globalState.storage ? Object.keys(globalState.storage).sort() : [];\n\tconst storage: IStringDictionary<IStorageValue> = {};\n\tstorageKeys.forEach(key => storage[key] = globalState.storage[key]);\n\tglobalState.storage = storage;\n\tconst content = JSON.stringify(globalState);\n\tconst edits = format(content, undefined, {});\n\treturn applyEdits(content, edits);\n}\n\nconst GLOBAL_STATE_DATA_VERSION = 1;\n\n/**\n * Synchronises global state that includes\n * \t- Global storage with user scope\n * \t- Locale from argv properties\n *\n * Global storage is synced without checking version just like other resources (settings, keybindings).\n * If there is a change in format of the value of a storage key which requires migration then\n * \t\tOwner of that key should remove that key from user scope and replace that with new user scoped key.\n */\nexport class GlobalStateSynchroniser extends AbstractSynchroniser implements IUserDataSynchroniser {\n\n\tprivate static readonly GLOBAL_STATE_DATA_URI = URI.from({ scheme: USER_DATA_SYNC_SCHEME, authority: 'globalState', path: `/globalState.json` });\n\tprotected readonly version: number = GLOBAL_STATE_DATA_VERSION;\n\tprivate readonly previewResource: URI = this.extUri.joinPath(this.syncPreviewFolder, 'globalState.json');\n\tprivate readonly localResource: URI = this.previewResource.with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'local' });\n\tprivate readonly remoteResource: URI = this.previewResource.with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'remote' });\n\tprivate readonly acceptedResource: URI = this.previewResource.with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'accepted' });\n\n\tconstructor(\n\t\t@IFileService fileService: IFileService,\n\t\t@IUserDataSyncStoreService userDataSyncStoreService: IUserDataSyncStoreService,\n\t\t@IUserDataSyncBackupStoreService userDataSyncBackupStoreService: IUserDataSyncBackupStoreService,\n\t\t@IUserDataSyncLogService logService: IUserDataSyncLogService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@IUserDataSyncResourceEnablementService userDataSyncResourceEnablementService: IUserDataSyncResourceEnablementService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t) {\n\t\tsuper(SyncResource.GlobalState, fileService, environmentService, storageService, userDataSyncStoreService, userDataSyncBackupStoreService, userDataSyncResourceEnablementService, telemetryService, logService, configurationService);\n\t\tthis._register(fileService.watch(this.extUri.dirname(this.environmentService.argvResource)));\n\t\tthis._register(\n\t\t\tEvent.any(\n\t\t\t\t/* Locale change */\n\t\t\t\tEvent.filter(fileService.onDidFilesChange, e => e.contains(this.environmentService.argvResource)),\n\t\t\t\t/* Global storage with user target has changed */\n\t\t\t\tEvent.filter(storageService.onDidChangeValue, e => e.scope === StorageScope.GLOBAL && e.target !== undefined ? e.target === StorageTarget.USER : storageService.keys(StorageScope.GLOBAL, StorageTarget.USER).includes(e.key)),\n\t\t\t\t/* Storage key target has changed */\n\t\t\t\tthis.storageService.onDidChangeTarget\n\t\t\t)((() => this.triggerLocalChange()))\n\t\t);\n\t}\n\n\tprotected async generateSyncPreview(remoteUserData: IRemoteUserData, lastSyncUserData: IRemoteUserData | null, token: CancellationToken): Promise<IGlobalStateResourcePreview[]> {\n\t\tconst remoteGlobalState: IGlobalState = remoteUserData.syncData ? JSON.parse(remoteUserData.syncData.content) : null;\n\t\tconst lastSyncGlobalState: IGlobalState | null = lastSyncUserData && lastSyncUserData.syncData ? JSON.parse(lastSyncUserData.syncData.content) : null;\n\n\t\tconst localGloablState = await this.getLocalGlobalState();\n\n\t\tif (remoteGlobalState) {\n\t\t\tthis.logService.trace(`${this.syncResourceLogLabel}: Merging remote ui state with local ui state...`);\n\t\t} else {\n\t\t\tthis.logService.trace(`${this.syncResourceLogLabel}: Remote ui state does not exist. Synchronizing ui state for the first time.`);\n\t\t}\n\n\t\tconst storageKeys = this.getStorageKeys(lastSyncGlobalState);\n\t\tconst { local, remote } = merge(localGloablState.storage, remoteGlobalState ? remoteGlobalState.storage : null, lastSyncGlobalState ? lastSyncGlobalState.storage : null, storageKeys, this.logService);\n\t\tconst previewResult: IGlobalStateResourceMergeResult = {\n\t\t\tcontent: null,\n\t\t\tlocal,\n\t\t\tremote,\n\t\t\tlocalChange: Object.keys(local.added).length > 0 || Object.keys(local.updated).length > 0 || local.removed.length > 0 ? Change.Modified : Change.None,\n\t\t\tremoteChange: remote !== null ? Change.Modified : Change.None,\n\t\t};\n\n\t\treturn [{\n\t\t\tlocalResource: this.localResource,\n\t\t\tlocalContent: formatAndStringify(localGloablState),\n\t\t\tlocalUserData: localGloablState,\n\t\t\tremoteResource: this.remoteResource,\n\t\t\tremoteContent: remoteGlobalState ? formatAndStringify(remoteGlobalState) : null,\n\t\t\tpreviewResource: this.previewResource,\n\t\t\tpreviewResult,\n\t\t\tlocalChange: previewResult.localChange,\n\t\t\tremoteChange: previewResult.remoteChange,\n\t\t\tacceptedResource: this.acceptedResource,\n\t\t\tstorageKeys\n\t\t}];\n\t}\n\n\tprotected async getMergeResult(resourcePreview: IGlobalStateResourcePreview, token: CancellationToken): Promise<IMergeResult> {\n\t\treturn { ...resourcePreview.previewResult, hasConflicts: false };\n\t}\n\n\tprotected async getAcceptResult(resourcePreview: IGlobalStateResourcePreview, resource: URI, content: string | null | undefined, token: CancellationToken): Promise<IGlobalStateResourceMergeResult> {\n\n\t\t/* Accept local resource */\n\t\tif (this.extUri.isEqual(resource, this.localResource)) {\n\t\t\treturn this.acceptLocal(resourcePreview);\n\t\t}\n\n\t\t/* Accept remote resource */\n\t\tif (this.extUri.isEqual(resource, this.remoteResource)) {\n\t\t\treturn this.acceptRemote(resourcePreview);\n\t\t}\n\n\t\t/* Accept preview resource */\n\t\tif (this.extUri.isEqual(resource, this.previewResource)) {\n\t\t\treturn resourcePreview.previewResult;\n\t\t}\n\n\t\tthrow new Error(`Invalid Resource: ${resource.toString()}`);\n\t}\n\n\tprivate async acceptLocal(resourcePreview: IGlobalStateResourcePreview): Promise<IGlobalStateResourceMergeResult> {\n\t\treturn {\n\t\t\tcontent: resourcePreview.localContent,\n\t\t\tlocal: { added: {}, removed: [], updated: {} },\n\t\t\tremote: resourcePreview.localUserData.storage,\n\t\t\tlocalChange: Change.None,\n\t\t\tremoteChange: Change.Modified,\n\t\t};\n\t}\n\n\tprivate async acceptRemote(resourcePreview: IGlobalStateResourcePreview): Promise<IGlobalStateResourceMergeResult> {\n\t\tif (resourcePreview.remoteContent !== null) {\n\t\t\tconst remoteGlobalState: IGlobalState = JSON.parse(resourcePreview.remoteContent);\n\t\t\tconst { local, remote } = merge(resourcePreview.localUserData.storage, remoteGlobalState.storage, null, resourcePreview.storageKeys, this.logService);\n\t\t\treturn {\n\t\t\t\tcontent: resourcePreview.remoteContent,\n\t\t\t\tlocal,\n\t\t\t\tremote,\n\t\t\t\tlocalChange: Object.keys(local.added).length > 0 || Object.keys(local.updated).length > 0 || local.removed.length > 0 ? Change.Modified : Change.None,\n\t\t\t\tremoteChange: remote !== null ? Change.Modified : Change.None,\n\t\t\t};\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tcontent: resourcePreview.remoteContent,\n\t\t\t\tlocal: { added: {}, removed: [], updated: {} },\n\t\t\t\tremote: null,\n\t\t\t\tlocalChange: Change.None,\n\t\t\t\tremoteChange: Change.None,\n\t\t\t};\n\t\t}\n\t}\n\n\tprotected async applyResult(remoteUserData: IRemoteUserData, lastSyncUserData: IRemoteUserData | null, resourcePreviews: [IGlobalStateResourcePreview, IGlobalStateResourceMergeResult][], force: boolean): Promise<void> {\n\t\tlet { localUserData } = resourcePreviews[0][0];\n\t\tlet { local, remote, localChange, remoteChange } = resourcePreviews[0][1];\n\n\t\tif (localChange === Change.None && remoteChange === Change.None) {\n\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: No changes found during synchronizing ui state.`);\n\t\t}\n\n\t\tif (localChange !== Change.None) {\n\t\t\t// update local\n\t\t\tthis.logService.trace(`${this.syncResourceLogLabel}: Updating local ui state...`);\n\t\t\tawait this.backupLocal(JSON.stringify(localUserData));\n\t\t\tawait this.writeLocalGlobalState(local);\n\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: Updated local ui state`);\n\t\t}\n\n\t\tif (remoteChange !== Change.None) {\n\t\t\t// update remote\n\t\t\tthis.logService.trace(`${this.syncResourceLogLabel}: Updating remote ui state...`);\n\t\t\tconst content = JSON.stringify(<IGlobalState>{ storage: remote });\n\t\t\tremoteUserData = await this.updateRemoteUserData(content, force ? null : remoteUserData.ref);\n\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: Updated remote ui state`);\n\t\t}\n\n\t\tif (lastSyncUserData?.ref !== remoteUserData.ref) {\n\t\t\t// update last sync\n\t\t\tthis.logService.trace(`${this.syncResourceLogLabel}: Updating last synchronized ui state...`);\n\t\t\tawait this.updateLastSyncUserData(remoteUserData);\n\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: Updated last synchronized ui state`);\n\t\t}\n\t}\n\n\tasync getAssociatedResources({ uri }: ISyncResourceHandle): Promise<{ resource: URI, comparableResource: URI }[]> {\n\t\treturn [{ resource: this.extUri.joinPath(uri, 'globalState.json'), comparableResource: GlobalStateSynchroniser.GLOBAL_STATE_DATA_URI }];\n\t}\n\n\toverride async resolveContent(uri: URI): Promise<string | null> {\n\t\tif (this.extUri.isEqual(uri, GlobalStateSynchroniser.GLOBAL_STATE_DATA_URI)) {\n\t\t\tconst localGlobalState = await this.getLocalGlobalState();\n\t\t\treturn formatAndStringify(localGlobalState);\n\t\t}\n\n\t\tif (this.extUri.isEqual(this.remoteResource, uri) || this.extUri.isEqual(this.localResource, uri) || this.extUri.isEqual(this.acceptedResource, uri)) {\n\t\t\treturn this.resolvePreviewContent(uri);\n\t\t}\n\n\t\tlet content = await super.resolveContent(uri);\n\t\tif (content) {\n\t\t\treturn content;\n\t\t}\n\n\t\tcontent = await super.resolveContent(this.extUri.dirname(uri));\n\t\tif (content) {\n\t\t\tconst syncData = this.parseSyncData(content);\n\t\t\tif (syncData) {\n\t\t\t\tswitch (this.extUri.basename(uri)) {\n\t\t\t\t\tcase 'globalState.json':\n\t\t\t\t\t\treturn formatAndStringify(JSON.parse(syncData.content));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tasync hasLocalData(): Promise<boolean> {\n\t\ttry {\n\t\t\tconst { storage } = await this.getLocalGlobalState();\n\t\t\tif (Object.keys(storage).length > 1 || storage[`${argvStoragePrefx}.locale`]?.value !== 'en') {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t/* ignore error */\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate async getLocalGlobalState(): Promise<IGlobalState> {\n\t\tconst storage: IStringDictionary<IStorageValue> = {};\n\t\tconst argvContent: string = await this.getLocalArgvContent();\n\t\tconst argvValue: IStringDictionary<any> = parse(argvContent);\n\t\tfor (const argvProperty of argvProperties) {\n\t\t\tif (argvValue[argvProperty] !== undefined) {\n\t\t\t\tstorage[`${argvStoragePrefx}${argvProperty}`] = { version: 1, value: argvValue[argvProperty] };\n\t\t\t}\n\t\t}\n\t\tfor (const key of this.storageService.keys(StorageScope.GLOBAL, StorageTarget.USER)) {\n\t\t\tconst value = this.storageService.get(key, StorageScope.GLOBAL);\n\t\t\tif (value) {\n\t\t\t\tstorage[key] = { version: 1, value };\n\t\t\t}\n\t\t}\n\t\treturn { storage };\n\t}\n\n\tprivate async getLocalArgvContent(): Promise<string> {\n\t\ttry {\n\t\t\tconst content = await this.fileService.readFile(this.environmentService.argvResource);\n\t\t\treturn content.value.toString();\n\t\t} catch (error) { }\n\t\treturn '{}';\n\t}\n\n\tprivate async writeLocalGlobalState({ added, removed, updated }: { added: IStringDictionary<IStorageValue>, updated: IStringDictionary<IStorageValue>, removed: string[] }): Promise<void> {\n\t\tconst argv: IStringDictionary<any> = {};\n\t\tconst updatedStorage: IStringDictionary<any> = {};\n\t\tconst handleUpdatedStorage = (keys: string[], storage?: IStringDictionary<IStorageValue>): void => {\n\t\t\tfor (const key of keys) {\n\t\t\t\tif (key.startsWith(argvStoragePrefx)) {\n\t\t\t\t\targv[key.substring(argvStoragePrefx.length)] = storage ? storage[key].value : undefined;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (storage) {\n\t\t\t\t\tconst storageValue = storage[key];\n\t\t\t\t\tif (storageValue.value !== String(this.storageService.get(key, StorageScope.GLOBAL))) {\n\t\t\t\t\t\tupdatedStorage[key] = storageValue.value;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (this.storageService.get(key, StorageScope.GLOBAL) !== undefined) {\n\t\t\t\t\t\tupdatedStorage[key] = undefined;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\thandleUpdatedStorage(Object.keys(added), added);\n\t\thandleUpdatedStorage(Object.keys(updated), updated);\n\t\thandleUpdatedStorage(removed);\n\t\tif (Object.keys(argv).length) {\n\t\t\tthis.logService.trace(`${this.syncResourceLogLabel}: Updating locale...`);\n\t\t\tawait this.updateArgv(argv);\n\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: Updated locale`);\n\t\t}\n\t\tconst updatedStorageKeys: string[] = Object.keys(updatedStorage);\n\t\tif (updatedStorageKeys.length) {\n\t\t\tthis.logService.trace(`${this.syncResourceLogLabel}: Updating global state...`);\n\t\t\tfor (const key of Object.keys(updatedStorage)) {\n\t\t\t\tthis.storageService.store(key, updatedStorage[key], StorageScope.GLOBAL, StorageTarget.USER);\n\t\t\t}\n\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: Updated global state`, Object.keys(updatedStorage));\n\t\t}\n\t}\n\n\tprivate async updateArgv(argv: IStringDictionary<any>): Promise<void> {\n\t\tconst argvContent = await this.getLocalArgvContent();\n\t\tlet content = argvContent;\n\t\tfor (const argvProperty of Object.keys(argv)) {\n\t\t\tcontent = edit(content, [argvProperty], argv[argvProperty], {});\n\t\t}\n\t\tif (argvContent !== content) {\n\t\t\tthis.logService.trace(`${this.syncResourceLogLabel}: Updating locale...`);\n\t\t\tawait this.fileService.writeFile(this.environmentService.argvResource, VSBuffer.fromString(content));\n\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: Updated locale.`);\n\t\t}\n\t}\n\n\tprivate getStorageKeys(lastSyncGlobalState: IGlobalState | null): StorageKeys {\n\t\tconst user = this.storageService.keys(StorageScope.GLOBAL, StorageTarget.USER);\n\t\tconst machine = this.storageService.keys(StorageScope.GLOBAL, StorageTarget.MACHINE);\n\t\tconst registered = [...user, ...machine];\n\t\tconst unregistered = lastSyncGlobalState?.storage ? Object.keys(lastSyncGlobalState.storage).filter(key => !key.startsWith(argvStoragePrefx) && !registered.includes(key) && this.storageService.get(key, StorageScope.GLOBAL) !== undefined) : [];\n\n\t\tif (!isWeb) {\n\t\t\t// Following keys are synced only in web. Do not sync these keys in other platforms\n\t\t\tconst keysSyncedOnlyInWeb = [...ALL_SYNC_RESOURCES.map(resource => getEnablementKey(resource)), SYNC_SERVICE_URL_TYPE];\n\t\t\tunregistered.push(...keysSyncedOnlyInWeb);\n\t\t\tmachine.push(...keysSyncedOnlyInWeb);\n\t\t}\n\n\t\treturn { user, machine, unregistered };\n\t}\n}\n\nexport class GlobalStateInitializer extends AbstractInitializer {\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@IUserDataSyncLogService logService: IUserDataSyncLogService,\n\t) {\n\t\tsuper(SyncResource.GlobalState, environmentService, logService, fileService);\n\t}\n\n\tasync doInitialize(remoteUserData: IRemoteUserData): Promise<void> {\n\t\tconst remoteGlobalState: IGlobalState = remoteUserData.syncData ? JSON.parse(remoteUserData.syncData.content) : null;\n\t\tif (!remoteGlobalState) {\n\t\t\tthis.logService.info('Skipping initializing global state because remote global state does not exist.');\n\t\t\treturn;\n\t\t}\n\n\t\tconst argv: IStringDictionary<any> = {};\n\t\tconst storage: IStringDictionary<any> = {};\n\t\tfor (const key of Object.keys(remoteGlobalState.storage)) {\n\t\t\tif (key.startsWith(argvStoragePrefx)) {\n\t\t\t\targv[key.substring(argvStoragePrefx.length)] = remoteGlobalState.storage[key].value;\n\t\t\t} else {\n\t\t\t\tif (this.storageService.get(key, StorageScope.GLOBAL) === undefined) {\n\t\t\t\t\tstorage[key] = remoteGlobalState.storage[key].value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (Object.keys(argv).length) {\n\t\t\tlet content = '{}';\n\t\t\ttry {\n\t\t\t\tconst fileContent = await this.fileService.readFile(this.environmentService.argvResource);\n\t\t\t\tcontent = fileContent.value.toString();\n\t\t\t} catch (error) { }\n\t\t\tfor (const argvProperty of Object.keys(argv)) {\n\t\t\t\tcontent = edit(content, [argvProperty], argv[argvProperty], {});\n\t\t\t}\n\t\t\tawait this.fileService.writeFile(this.environmentService.argvResource, VSBuffer.fromString(content));\n\t\t}\n\n\t\tif (Object.keys(storage).length) {\n\t\t\tfor (const key of Object.keys(storage)) {\n\t\t\t\tthis.storageService.store(key, storage[key], StorageScope.GLOBAL, StorageTarget.USER);\n\t\t\t}\n\t\t}\n\t}\n\n}\n\nexport class UserDataSyncStoreTypeSynchronizer {\n\n\tconstructor(\n\t\tprivate readonly userDataSyncStoreClient: UserDataSyncStoreClient,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t}\n\n\tgetSyncStoreType(userData: IUserData): UserDataSyncStoreType | undefined {\n\t\tconst remoteGlobalState = this.parseGlobalState(userData);\n\t\treturn remoteGlobalState?.storage[SYNC_SERVICE_URL_TYPE]?.value as UserDataSyncStoreType;\n\t}\n\n\tasync sync(userDataSyncStoreType: UserDataSyncStoreType): Promise<void> {\n\t\tconst syncHeaders = createSyncHeaders(generateUuid());\n\t\ttry {\n\t\t\treturn await this.doSync(userDataSyncStoreType, syncHeaders);\n\t\t} catch (e) {\n\t\t\tif (e instanceof UserDataSyncError) {\n\t\t\t\tswitch (e.code) {\n\t\t\t\t\tcase UserDataSyncErrorCode.PreconditionFailed:\n\t\t\t\t\t\tthis.logService.info(`Failed to synchronize UserDataSyncStoreType as there is a new remote version available. Synchronizing again...`);\n\t\t\t\t\t\treturn this.doSync(userDataSyncStoreType, syncHeaders);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tprivate async doSync(userDataSyncStoreType: UserDataSyncStoreType, syncHeaders: IHeaders): Promise<void> {\n\t\t// Read the global state from remote\n\t\tconst globalStateUserData = await this.userDataSyncStoreClient.read(SyncResource.GlobalState, null, syncHeaders);\n\t\tconst remoteGlobalState = this.parseGlobalState(globalStateUserData) || { storage: {} };\n\n\t\t// Update the sync store type\n\t\tremoteGlobalState.storage[SYNC_SERVICE_URL_TYPE] = { value: userDataSyncStoreType, version: GLOBAL_STATE_DATA_VERSION };\n\n\t\t// Write the global state to remote\n\t\tconst machineId = await getServiceMachineId(this.environmentService, this.fileService, this.storageService);\n\t\tconst syncDataToUpdate: ISyncData = { version: GLOBAL_STATE_DATA_VERSION, machineId, content: formatAndStringify(remoteGlobalState) };\n\t\tawait this.userDataSyncStoreClient.write(SyncResource.GlobalState, JSON.stringify(syncDataToUpdate), globalStateUserData.ref, syncHeaders);\n\t}\n\n\tprivate parseGlobalState({ content }: IUserData): IGlobalState | null {\n\t\tif (!content) {\n\t\t\treturn null;\n\t\t}\n\t\tconst syncData = JSON.parse(content);\n\t\tif (isSyncData(syncData)) {\n\t\t\treturn syncData ? JSON.parse(syncData.content) : null;\n\t\t}\n\t\tthrow new Error('Invalid remote data');\n\t}\n\n}\n\n"]}