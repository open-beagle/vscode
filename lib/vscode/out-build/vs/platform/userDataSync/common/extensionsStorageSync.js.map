{"version":3,"file":"extensionsStorageSync.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/userDataSync/common/extensionsStorageSync.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { distinct } from 'vs/base/common/arrays';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { adoptToGalleryExtensionId } from 'vs/platform/extensionManagement/common/extensionManagementUtil';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IStorageService, IStorageValueChangeEvent, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\n\nexport interface IExtensionIdWithVersion {\n\tid: string;\n\tversion: string;\n}\n\nexport const IExtensionsStorageSyncService = createDecorator<IExtensionsStorageSyncService>('IExtensionsStorageSyncService');\n\nexport interface IExtensionsStorageSyncService {\n\n\t_serviceBrand: any;\n\n\treadonly onDidChangeExtensionsStorage: Event<void>;\n\tsetKeysForSync(extensionIdWithVersion: IExtensionIdWithVersion, keys: string[]): void;\n\tgetKeysForSync(extensionIdWithVersion: IExtensionIdWithVersion): string[] | undefined;\n\n}\n\nconst EXTENSION_KEYS_ID_VERSION_REGEX = /^extensionKeys\\/([^.]+\\..+)@(\\d+\\.\\d+\\.\\d+(-.*)?)$/;\n\nexport class ExtensionsStorageSyncService extends Disposable implements IExtensionsStorageSyncService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate static toKey(extension: IExtensionIdWithVersion): string {\n\t\treturn `extensionKeys/${adoptToGalleryExtensionId(extension.id)}@${extension.version}`;\n\t}\n\n\tprivate static fromKey(key: string): IExtensionIdWithVersion | undefined {\n\t\tconst matches = EXTENSION_KEYS_ID_VERSION_REGEX.exec(key);\n\t\tif (matches && matches[1]) {\n\t\t\treturn { id: matches[1], version: matches[2] };\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate readonly _onDidChangeExtensionsStorage = this._register(new Emitter<void>());\n\treadonly onDidChangeExtensionsStorage = this._onDidChangeExtensionsStorage.event;\n\n\tprivate readonly extensionsWithKeysForSync = new Set<string>();\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IProductService private readonly productService: IProductService,\n\t) {\n\t\tsuper();\n\t\tthis.initialize();\n\t\tthis._register(this.storageService.onDidChangeValue(e => this.onDidChangeStorageValue(e)));\n\t}\n\n\tprivate initialize(): void {\n\t\tconst keys = this.storageService.keys(StorageScope.GLOBAL, StorageTarget.MACHINE);\n\t\tfor (const key of keys) {\n\t\t\tconst extensionIdWithVersion = ExtensionsStorageSyncService.fromKey(key);\n\t\t\tif (extensionIdWithVersion) {\n\t\t\t\tthis.extensionsWithKeysForSync.add(extensionIdWithVersion.id.toLowerCase());\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onDidChangeStorageValue(e: IStorageValueChangeEvent): void {\n\t\tif (e.scope !== StorageScope.GLOBAL) {\n\t\t\treturn;\n\t\t}\n\n\t\t// State of extension with keys for sync has changed\n\t\tif (this.extensionsWithKeysForSync.has(e.key.toLowerCase())) {\n\t\t\tthis._onDidChangeExtensionsStorage.fire();\n\t\t\treturn;\n\t\t}\n\n\t\t// Keys for sync of an extension has changed\n\t\tconst extensionIdWithVersion = ExtensionsStorageSyncService.fromKey(e.key);\n\t\tif (extensionIdWithVersion) {\n\t\t\tthis.extensionsWithKeysForSync.add(extensionIdWithVersion.id.toLowerCase());\n\t\t\tthis._onDidChangeExtensionsStorage.fire();\n\t\t\treturn;\n\t\t}\n\t}\n\n\tsetKeysForSync(extensionIdWithVersion: IExtensionIdWithVersion, keys: string[]): void {\n\t\tthis.storageService.store(ExtensionsStorageSyncService.toKey(extensionIdWithVersion), JSON.stringify(keys), StorageScope.GLOBAL, StorageTarget.MACHINE);\n\t}\n\n\tgetKeysForSync(extensionIdWithVersion: IExtensionIdWithVersion): string[] | undefined {\n\t\tconst extensionKeysForSyncFromProduct = this.productService.extensionSyncedKeys?.[extensionIdWithVersion.id.toLowerCase()];\n\t\tconst extensionKeysForSyncFromStorageValue = this.storageService.get(ExtensionsStorageSyncService.toKey(extensionIdWithVersion), StorageScope.GLOBAL);\n\t\tconst extensionKeysForSyncFromStorage = extensionKeysForSyncFromStorageValue ? JSON.parse(extensionKeysForSyncFromStorageValue) : undefined;\n\n\t\treturn extensionKeysForSyncFromStorage && extensionKeysForSyncFromProduct\n\t\t\t? distinct([...extensionKeysForSyncFromStorage, ...extensionKeysForSyncFromProduct])\n\t\t\t: (extensionKeysForSyncFromStorage || extensionKeysForSyncFromProduct);\n\t}\n}\n"]}