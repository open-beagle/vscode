{"version":3,"file":"userDataSyncAccount.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/userDataSync/common/userDataSyncAccount.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAYnF,QAAA,2BAA2B,GAAG,CAAA,GAAA,+BAAe,CAAA,CAA8B,6BAA6B,CAAC,CAAC;IAWvH,IAAa,0BAA0B,GAAvC,MAAa,0BAA2B,SAAQ,sBAAU;QAczD,YAC6C,wBAAmD;YAE/F,KAAK,EAAE,CAAC;YAFoC,6BAAwB,GAAxB,wBAAwB,CAA2B;YATxF,wBAAmB,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,eAAO,EAAoC,CAAC,CAAC;YACrF,uBAAkB,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC;YAErD,mBAAc,GAAqB,IAAI,CAAC,SAAS,CAAC,IAAI,eAAO,EAAW,CAAC,CAAC;YACzE,kBAAa,GAAmB,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC;YAE3D,mBAAc,GAAY,KAAK,CAAC;YAMvC,IAAI,CAAC,SAAS,CAAC,wBAAwB,CAAC,aAAa,CAAC,GAAG,EAAE;gBAC1D,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;gBAC9B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;gBAC9C,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;YAC5B,CAAC,CAAC,CAAC,CAAC;YACJ,IAAI,CAAC,SAAS,CAAC,wBAAwB,CAAC,cAAc,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC,CAAC,CAAC;QAC5F,CAAC;QAnBD,IAAI,OAAO,KAAuC,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;QAqBzE,KAAK,CAAC,aAAa,CAAC,OAAyC;YAC5D,IAAI,OAAO,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,KAAK,IAAI,CAAC,QAAQ,CAAC,KAAK,IAAI,OAAO,CAAC,wBAAwB,KAAK,IAAI,CAAC,QAAQ,CAAC,wBAAwB,CAAC,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC,QAAQ,EAAE;gBAChL,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;gBACxB,IAAI,IAAI,CAAC,QAAQ,EAAE;oBAClB,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,wBAAwB,CAAC,CAAC;iBACxG;gBACD,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aACvC;QACF,CAAC;KAED,CAAA;IApCY,0BAA0B;QAepC,WAAA,wCAAyB,CAAA;OAff,0BAA0B,CAoCtC;IApCY,gEAA0B","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IUserDataSyncStoreService } from 'vs/platform/userDataSync/common/userDataSync';\n\nexport interface IUserDataSyncAccount {\n\treadonly authenticationProviderId: string;\n\treadonly token: string;\n}\n\nexport const IUserDataSyncAccountService = createDecorator<IUserDataSyncAccountService>('IUserDataSyncAccountService');\nexport interface IUserDataSyncAccountService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly onTokenFailed: Event<boolean>;\n\treadonly account: IUserDataSyncAccount | undefined;\n\treadonly onDidChangeAccount: Event<IUserDataSyncAccount | undefined>;\n\tupdateAccount(account: IUserDataSyncAccount | undefined): Promise<void>;\n\n}\n\nexport class UserDataSyncAccountService extends Disposable implements IUserDataSyncAccountService {\n\n\t_serviceBrand: any;\n\n\tprivate _account: IUserDataSyncAccount | undefined;\n\tget account(): IUserDataSyncAccount | undefined { return this._account; }\n\tprivate _onDidChangeAccount = this._register(new Emitter<IUserDataSyncAccount | undefined>());\n\treadonly onDidChangeAccount = this._onDidChangeAccount.event;\n\n\tprivate _onTokenFailed: Emitter<boolean> = this._register(new Emitter<boolean>());\n\treadonly onTokenFailed: Event<boolean> = this._onTokenFailed.event;\n\n\tprivate wasTokenFailed: boolean = false;\n\n\tconstructor(\n\t\t@IUserDataSyncStoreService private readonly userDataSyncStoreService: IUserDataSyncStoreService\n\t) {\n\t\tsuper();\n\t\tthis._register(userDataSyncStoreService.onTokenFailed(() => {\n\t\t\tthis.updateAccount(undefined);\n\t\t\tthis._onTokenFailed.fire(this.wasTokenFailed);\n\t\t\tthis.wasTokenFailed = true;\n\t\t}));\n\t\tthis._register(userDataSyncStoreService.onTokenSucceed(() => this.wasTokenFailed = false));\n\t}\n\n\tasync updateAccount(account: IUserDataSyncAccount | undefined): Promise<void> {\n\t\tif (account && this._account ? account.token !== this._account.token || account.authenticationProviderId !== this._account.authenticationProviderId : account !== this._account) {\n\t\t\tthis._account = account;\n\t\t\tif (this._account) {\n\t\t\t\tthis.userDataSyncStoreService.setAuthToken(this._account.token, this._account.authenticationProviderId);\n\t\t\t}\n\t\t\tthis._onDidChangeAccount.fire(account);\n\t\t}\n\t}\n\n}\n\n"]}