{"version":3,"file":"settingsMerge.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/userDataSync/common/settingsMerge.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as objects from 'vs/base/common/objects';\nimport { parse, JSONVisitor, visit } from 'vs/base/common/json';\nimport { setProperty, withFormatting, applyEdits } from 'vs/base/common/jsonEdit';\nimport { IStringDictionary } from 'vs/base/common/collections';\nimport { FormattingOptions, Edit, getEOL } from 'vs/base/common/jsonFormatter';\nimport * as contentUtil from 'vs/platform/userDataSync/common/content';\nimport { IConflictSetting, getDisallowedIgnoredSettings } from 'vs/platform/userDataSync/common/userDataSync';\nimport { distinct } from 'vs/base/common/arrays';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\n\nexport interface IMergeResult {\n\tlocalContent: string | null;\n\tremoteContent: string | null;\n\thasConflicts: boolean;\n\tconflictsSettings: IConflictSetting[];\n}\n\nexport function getIgnoredSettings(defaultIgnoredSettings: string[], configurationService: IConfigurationService, settingsContent?: string): string[] {\n\tlet value: string[] = [];\n\tif (settingsContent) {\n\t\tvalue = getIgnoredSettingsFromContent(settingsContent);\n\t} else {\n\t\tvalue = getIgnoredSettingsFromConfig(configurationService);\n\t}\n\tconst added: string[] = [], removed: string[] = [...getDisallowedIgnoredSettings()];\n\tif (Array.isArray(value)) {\n\t\tfor (const key of value) {\n\t\t\tif (key.startsWith('-')) {\n\t\t\t\tremoved.push(key.substring(1));\n\t\t\t} else {\n\t\t\t\tadded.push(key);\n\t\t\t}\n\t\t}\n\t}\n\treturn distinct([...defaultIgnoredSettings, ...added,].filter(setting => removed.indexOf(setting) === -1));\n}\n\nfunction getIgnoredSettingsFromConfig(configurationService: IConfigurationService): string[] {\n\tlet userValue = configurationService.inspect<string[]>('settingsSync.ignoredSettings').userValue;\n\tif (userValue !== undefined) {\n\t\treturn userValue;\n\t}\n\tuserValue = configurationService.inspect<string[]>('sync.ignoredSettings').userValue;\n\tif (userValue !== undefined) {\n\t\treturn userValue;\n\t}\n\treturn configurationService.getValue<string[]>('settingsSync.ignoredSettings') || [];\n}\n\nfunction getIgnoredSettingsFromContent(settingsContent: string): string[] {\n\tconst parsed = parse(settingsContent);\n\treturn parsed ? parsed['settingsSync.ignoredSettings'] || parsed['sync.ignoredSettings'] || [] : [];\n}\n\nexport function updateIgnoredSettings(targetContent: string, sourceContent: string, ignoredSettings: string[], formattingOptions: FormattingOptions): string {\n\tif (ignoredSettings.length) {\n\t\tconst sourceTree = parseSettings(sourceContent);\n\t\tconst source = parse(sourceContent);\n\t\tconst target = parse(targetContent);\n\t\tconst settingsToAdd: INode[] = [];\n\t\tfor (const key of ignoredSettings) {\n\t\t\tconst sourceValue = source[key];\n\t\t\tconst targetValue = target[key];\n\n\t\t\t// Remove in target\n\t\t\tif (sourceValue === undefined) {\n\t\t\t\ttargetContent = contentUtil.edit(targetContent, [key], undefined, formattingOptions);\n\t\t\t}\n\n\t\t\t// Update in target\n\t\t\telse if (targetValue !== undefined) {\n\t\t\t\ttargetContent = contentUtil.edit(targetContent, [key], sourceValue, formattingOptions);\n\t\t\t}\n\n\t\t\telse {\n\t\t\t\tsettingsToAdd.push(findSettingNode(key, sourceTree)!);\n\t\t\t}\n\t\t}\n\n\t\tsettingsToAdd.sort((a, b) => a.startOffset - b.startOffset);\n\t\tsettingsToAdd.forEach(s => targetContent = addSetting(s.setting!.key, sourceContent, targetContent, formattingOptions));\n\t}\n\treturn targetContent;\n}\n\nexport function merge(originalLocalContent: string, originalRemoteContent: string, baseContent: string | null, ignoredSettings: string[], resolvedConflicts: { key: string, value: any | undefined }[], formattingOptions: FormattingOptions): IMergeResult {\n\n\tconst localContentWithoutIgnoredSettings = updateIgnoredSettings(originalLocalContent, originalRemoteContent, ignoredSettings, formattingOptions);\n\tconst localForwarded = baseContent !== localContentWithoutIgnoredSettings;\n\tconst remoteForwarded = baseContent !== originalRemoteContent;\n\n\t/* no changes */\n\tif (!localForwarded && !remoteForwarded) {\n\t\treturn { conflictsSettings: [], localContent: null, remoteContent: null, hasConflicts: false };\n\t}\n\n\t/* local has changed and remote has not */\n\tif (localForwarded && !remoteForwarded) {\n\t\treturn { conflictsSettings: [], localContent: null, remoteContent: localContentWithoutIgnoredSettings, hasConflicts: false };\n\t}\n\n\t/* remote has changed and local has not */\n\tif (remoteForwarded && !localForwarded) {\n\t\treturn { conflictsSettings: [], localContent: updateIgnoredSettings(originalRemoteContent, originalLocalContent, ignoredSettings, formattingOptions), remoteContent: null, hasConflicts: false };\n\t}\n\n\t/* local is empty and not synced before */\n\tif (baseContent === null && isEmpty(originalLocalContent)) {\n\t\tconst localContent = areSame(originalLocalContent, originalRemoteContent, ignoredSettings) ? null : updateIgnoredSettings(originalRemoteContent, originalLocalContent, ignoredSettings, formattingOptions);\n\t\treturn { conflictsSettings: [], localContent, remoteContent: null, hasConflicts: false };\n\t}\n\n\t/* remote and local has changed */\n\tlet localContent = originalLocalContent;\n\tlet remoteContent = originalRemoteContent;\n\tconst local = parse(originalLocalContent);\n\tconst remote = parse(originalRemoteContent);\n\tconst base = baseContent ? parse(baseContent) : null;\n\n\tconst ignored = ignoredSettings.reduce((set, key) => { set.add(key); return set; }, new Set<string>());\n\tconst localToRemote = compare(local, remote, ignored);\n\tconst baseToLocal = compare(base, local, ignored);\n\tconst baseToRemote = compare(base, remote, ignored);\n\n\tconst conflicts: Map<string, IConflictSetting> = new Map<string, IConflictSetting>();\n\tconst handledConflicts: Set<string> = new Set<string>();\n\tconst handleConflict = (conflictKey: string): void => {\n\t\thandledConflicts.add(conflictKey);\n\t\tconst resolvedConflict = resolvedConflicts.filter(({ key }) => key === conflictKey)[0];\n\t\tif (resolvedConflict) {\n\t\t\tlocalContent = contentUtil.edit(localContent, [conflictKey], resolvedConflict.value, formattingOptions);\n\t\t\tremoteContent = contentUtil.edit(remoteContent, [conflictKey], resolvedConflict.value, formattingOptions);\n\t\t} else {\n\t\t\tconflicts.set(conflictKey, { key: conflictKey, localValue: local[conflictKey], remoteValue: remote[conflictKey] });\n\t\t}\n\t};\n\n\t// Removed settings in Local\n\tfor (const key of baseToLocal.removed.values()) {\n\t\t// Conflict - Got updated in remote.\n\t\tif (baseToRemote.updated.has(key)) {\n\t\t\thandleConflict(key);\n\t\t}\n\t\t// Also remove in remote\n\t\telse {\n\t\t\tremoteContent = contentUtil.edit(remoteContent, [key], undefined, formattingOptions);\n\t\t}\n\t}\n\n\t// Removed settings in Remote\n\tfor (const key of baseToRemote.removed.values()) {\n\t\tif (handledConflicts.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\t// Conflict - Got updated in local\n\t\tif (baseToLocal.updated.has(key)) {\n\t\t\thandleConflict(key);\n\t\t}\n\t\t// Also remove in locals\n\t\telse {\n\t\t\tlocalContent = contentUtil.edit(localContent, [key], undefined, formattingOptions);\n\t\t}\n\t}\n\n\t// Updated settings in Local\n\tfor (const key of baseToLocal.updated.values()) {\n\t\tif (handledConflicts.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\t// Got updated in remote\n\t\tif (baseToRemote.updated.has(key)) {\n\t\t\t// Has different value\n\t\t\tif (localToRemote.updated.has(key)) {\n\t\t\t\thandleConflict(key);\n\t\t\t}\n\t\t} else {\n\t\t\tremoteContent = contentUtil.edit(remoteContent, [key], local[key], formattingOptions);\n\t\t}\n\t}\n\n\t// Updated settings in Remote\n\tfor (const key of baseToRemote.updated.values()) {\n\t\tif (handledConflicts.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\t// Got updated in local\n\t\tif (baseToLocal.updated.has(key)) {\n\t\t\t// Has different value\n\t\t\tif (localToRemote.updated.has(key)) {\n\t\t\t\thandleConflict(key);\n\t\t\t}\n\t\t} else {\n\t\t\tlocalContent = contentUtil.edit(localContent, [key], remote[key], formattingOptions);\n\t\t}\n\t}\n\n\t// Added settings in Local\n\tfor (const key of baseToLocal.added.values()) {\n\t\tif (handledConflicts.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\t// Got added in remote\n\t\tif (baseToRemote.added.has(key)) {\n\t\t\t// Has different value\n\t\t\tif (localToRemote.updated.has(key)) {\n\t\t\t\thandleConflict(key);\n\t\t\t}\n\t\t} else {\n\t\t\tremoteContent = addSetting(key, localContent, remoteContent, formattingOptions);\n\t\t}\n\t}\n\n\t// Added settings in remote\n\tfor (const key of baseToRemote.added.values()) {\n\t\tif (handledConflicts.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\t// Got added in local\n\t\tif (baseToLocal.added.has(key)) {\n\t\t\t// Has different value\n\t\t\tif (localToRemote.updated.has(key)) {\n\t\t\t\thandleConflict(key);\n\t\t\t}\n\t\t} else {\n\t\t\tlocalContent = addSetting(key, remoteContent, localContent, formattingOptions);\n\t\t}\n\t}\n\n\tconst hasConflicts = conflicts.size > 0 || !areSame(localContent, remoteContent, ignoredSettings);\n\tconst hasLocalChanged = hasConflicts || !areSame(localContent, originalLocalContent, []);\n\tconst hasRemoteChanged = hasConflicts || !areSame(remoteContent, originalRemoteContent, []);\n\treturn { localContent: hasLocalChanged ? localContent : null, remoteContent: hasRemoteChanged ? remoteContent : null, conflictsSettings: [...conflicts.values()], hasConflicts };\n}\n\nexport function areSame(localContent: string, remoteContent: string, ignoredSettings: string[]): boolean {\n\tif (localContent === remoteContent) {\n\t\treturn true;\n\t}\n\n\tconst local = parse(localContent);\n\tconst remote = parse(remoteContent);\n\tconst ignored = ignoredSettings.reduce((set, key) => { set.add(key); return set; }, new Set<string>());\n\tconst localTree = parseSettings(localContent).filter(node => !(node.setting && ignored.has(node.setting.key)));\n\tconst remoteTree = parseSettings(remoteContent).filter(node => !(node.setting && ignored.has(node.setting.key)));\n\n\tif (localTree.length !== remoteTree.length) {\n\t\treturn false;\n\t}\n\n\tfor (let index = 0; index < localTree.length; index++) {\n\t\tconst localNode = localTree[index];\n\t\tconst remoteNode = remoteTree[index];\n\t\tif (localNode.setting && remoteNode.setting) {\n\t\t\tif (localNode.setting.key !== remoteNode.setting.key) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (!objects.equals(local[localNode.setting.key], remote[localNode.setting.key])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if (!localNode.setting && !remoteNode.setting) {\n\t\t\tif (localNode.value !== remoteNode.value) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nexport function isEmpty(content: string): boolean {\n\tif (content) {\n\t\tconst nodes = parseSettings(content);\n\t\treturn nodes.length === 0;\n\t}\n\treturn true;\n}\n\nfunction compare(from: IStringDictionary<any> | null, to: IStringDictionary<any>, ignored: Set<string>): { added: Set<string>, removed: Set<string>, updated: Set<string> } {\n\tconst fromKeys = from ? Object.keys(from).filter(key => !ignored.has(key)) : [];\n\tconst toKeys = Object.keys(to).filter(key => !ignored.has(key));\n\tconst added = toKeys.filter(key => fromKeys.indexOf(key) === -1).reduce((r, key) => { r.add(key); return r; }, new Set<string>());\n\tconst removed = fromKeys.filter(key => toKeys.indexOf(key) === -1).reduce((r, key) => { r.add(key); return r; }, new Set<string>());\n\tconst updated: Set<string> = new Set<string>();\n\n\tif (from) {\n\t\tfor (const key of fromKeys) {\n\t\t\tif (removed.has(key)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst value1 = from[key];\n\t\t\tconst value2 = to[key];\n\t\t\tif (!objects.equals(value1, value2)) {\n\t\t\t\tupdated.add(key);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { added, removed, updated };\n}\n\nexport function addSetting(key: string, sourceContent: string, targetContent: string, formattingOptions: FormattingOptions): string {\n\tconst source = parse(sourceContent);\n\tconst sourceTree = parseSettings(sourceContent);\n\tconst targetTree = parseSettings(targetContent);\n\tconst insertLocation = getInsertLocation(key, sourceTree, targetTree);\n\treturn insertAtLocation(targetContent, key, source[key], insertLocation, targetTree, formattingOptions);\n}\n\ninterface InsertLocation {\n\tindex: number,\n\tinsertAfter: boolean;\n}\n\nfunction getInsertLocation(key: string, sourceTree: INode[], targetTree: INode[]): InsertLocation {\n\n\tconst sourceNodeIndex = sourceTree.findIndex(node => node.setting?.key === key);\n\n\tconst sourcePreviousNode: INode = sourceTree[sourceNodeIndex - 1];\n\tif (sourcePreviousNode) {\n\t\t/*\n\t\t\tPrevious node in source is a setting.\n\t\t\tFind the same setting in the target.\n\t\t\tInsert it after that setting\n\t\t*/\n\t\tif (sourcePreviousNode.setting) {\n\t\t\tconst targetPreviousSetting = findSettingNode(sourcePreviousNode.setting.key, targetTree);\n\t\t\tif (targetPreviousSetting) {\n\t\t\t\t/* Insert after target's previous setting */\n\t\t\t\treturn { index: targetTree.indexOf(targetPreviousSetting), insertAfter: true };\n\t\t\t}\n\t\t}\n\t\t/* Previous node in source is a comment */\n\t\telse {\n\t\t\tconst sourcePreviousSettingNode = findPreviousSettingNode(sourceNodeIndex, sourceTree);\n\t\t\t/*\n\t\t\t\tSource has a setting defined before the setting to be added.\n\t\t\t\tFind the same previous setting in the target.\n\t\t\t\tIf found, insert before its next setting so that comments are retrieved.\n\t\t\t\tOtherwise, insert at the end.\n\t\t\t*/\n\t\t\tif (sourcePreviousSettingNode) {\n\t\t\t\tconst targetPreviousSetting = findSettingNode(sourcePreviousSettingNode.setting!.key, targetTree);\n\t\t\t\tif (targetPreviousSetting) {\n\t\t\t\t\tconst targetNextSetting = findNextSettingNode(targetTree.indexOf(targetPreviousSetting), targetTree);\n\t\t\t\t\tconst sourceCommentNodes = findNodesBetween(sourceTree, sourcePreviousSettingNode, sourceTree[sourceNodeIndex]);\n\t\t\t\t\tif (targetNextSetting) {\n\t\t\t\t\t\tconst targetCommentNodes = findNodesBetween(targetTree, targetPreviousSetting, targetNextSetting);\n\t\t\t\t\t\tconst targetCommentNode = findLastMatchingTargetCommentNode(sourceCommentNodes, targetCommentNodes);\n\t\t\t\t\t\tif (targetCommentNode) {\n\t\t\t\t\t\t\treturn { index: targetTree.indexOf(targetCommentNode), insertAfter: true }; /* Insert after comment */\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn { index: targetTree.indexOf(targetNextSetting), insertAfter: false }; /* Insert before target next setting */\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst targetCommentNodes = findNodesBetween(targetTree, targetPreviousSetting, targetTree[targetTree.length - 1]);\n\t\t\t\t\t\tconst targetCommentNode = findLastMatchingTargetCommentNode(sourceCommentNodes, targetCommentNodes);\n\t\t\t\t\t\tif (targetCommentNode) {\n\t\t\t\t\t\t\treturn { index: targetTree.indexOf(targetCommentNode), insertAfter: true }; /* Insert after comment */\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn { index: targetTree.length - 1, insertAfter: true }; /* Insert at the end */\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst sourceNextNode = sourceTree[sourceNodeIndex + 1];\n\t\tif (sourceNextNode) {\n\t\t\t/*\n\t\t\t\tNext node in source is a setting.\n\t\t\t\tFind the same setting in the target.\n\t\t\t\tInsert it before that setting\n\t\t\t*/\n\t\t\tif (sourceNextNode.setting) {\n\t\t\t\tconst targetNextSetting = findSettingNode(sourceNextNode.setting.key, targetTree);\n\t\t\t\tif (targetNextSetting) {\n\t\t\t\t\t/* Insert before target's next setting */\n\t\t\t\t\treturn { index: targetTree.indexOf(targetNextSetting), insertAfter: false };\n\t\t\t\t}\n\t\t\t}\n\t\t\t/* Next node in source is a comment */\n\t\t\telse {\n\t\t\t\tconst sourceNextSettingNode = findNextSettingNode(sourceNodeIndex, sourceTree);\n\t\t\t\t/*\n\t\t\t\t\tSource has a setting defined after the setting to be added.\n\t\t\t\t\tFind the same next setting in the target.\n\t\t\t\t\tIf found, insert after its previous setting so that comments are retrieved.\n\t\t\t\t\tOtherwise, insert at the beginning.\n\t\t\t\t*/\n\t\t\t\tif (sourceNextSettingNode) {\n\t\t\t\t\tconst targetNextSetting = findSettingNode(sourceNextSettingNode.setting!.key, targetTree);\n\t\t\t\t\tif (targetNextSetting) {\n\t\t\t\t\t\tconst targetPreviousSetting = findPreviousSettingNode(targetTree.indexOf(targetNextSetting), targetTree);\n\t\t\t\t\t\tconst sourceCommentNodes = findNodesBetween(sourceTree, sourceTree[sourceNodeIndex], sourceNextSettingNode);\n\t\t\t\t\t\tif (targetPreviousSetting) {\n\t\t\t\t\t\t\tconst targetCommentNodes = findNodesBetween(targetTree, targetPreviousSetting, targetNextSetting);\n\t\t\t\t\t\t\tconst targetCommentNode = findLastMatchingTargetCommentNode(sourceCommentNodes.reverse(), targetCommentNodes.reverse());\n\t\t\t\t\t\t\tif (targetCommentNode) {\n\t\t\t\t\t\t\t\treturn { index: targetTree.indexOf(targetCommentNode), insertAfter: false }; /* Insert before comment */\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn { index: targetTree.indexOf(targetPreviousSetting), insertAfter: true }; /* Insert after target previous setting */\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst targetCommentNodes = findNodesBetween(targetTree, targetTree[0], targetNextSetting);\n\t\t\t\t\t\t\tconst targetCommentNode = findLastMatchingTargetCommentNode(sourceCommentNodes.reverse(), targetCommentNodes.reverse());\n\t\t\t\t\t\t\tif (targetCommentNode) {\n\t\t\t\t\t\t\t\treturn { index: targetTree.indexOf(targetCommentNode), insertAfter: false }; /* Insert before comment */\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn { index: 0, insertAfter: false }; /* Insert at the beginning */\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t/* Insert at the end */\n\treturn { index: targetTree.length - 1, insertAfter: true };\n}\n\nfunction insertAtLocation(content: string, key: string, value: any, location: InsertLocation, tree: INode[], formattingOptions: FormattingOptions): string {\n\tlet edits: Edit[];\n\t/* Insert at the end */\n\tif (location.index === -1) {\n\t\tedits = setProperty(content, [key], value, formattingOptions);\n\t} else {\n\t\tedits = getEditToInsertAtLocation(content, key, value, location, tree, formattingOptions).map(edit => withFormatting(content, edit, formattingOptions)[0]);\n\t}\n\treturn applyEdits(content, edits);\n}\n\nfunction getEditToInsertAtLocation(content: string, key: string, value: any, location: InsertLocation, tree: INode[], formattingOptions: FormattingOptions): Edit[] {\n\tconst newProperty = `${JSON.stringify(key)}: ${JSON.stringify(value)}`;\n\tconst eol = getEOL(formattingOptions, content);\n\tconst node = tree[location.index];\n\n\tif (location.insertAfter) {\n\n\t\tconst edits: Edit[] = [];\n\n\t\t/* Insert after a setting */\n\t\tif (node.setting) {\n\t\t\tedits.push({ offset: node.endOffset, length: 0, content: ',' + newProperty });\n\t\t}\n\n\t\t/* Insert after a comment */\n\t\telse {\n\n\t\t\tconst nextSettingNode = findNextSettingNode(location.index, tree);\n\t\t\tconst previousSettingNode = findPreviousSettingNode(location.index, tree);\n\t\t\tconst previousSettingCommaOffset = previousSettingNode?.setting?.commaOffset;\n\n\t\t\t/* If there is a previous setting and it does not has comma then add it */\n\t\t\tif (previousSettingNode && previousSettingCommaOffset === undefined) {\n\t\t\t\tedits.push({ offset: previousSettingNode.endOffset, length: 0, content: ',' });\n\t\t\t}\n\n\t\t\tconst isPreviouisSettingIncludesComment = previousSettingCommaOffset !== undefined && previousSettingCommaOffset > node.endOffset;\n\t\t\tedits.push({\n\t\t\t\toffset: isPreviouisSettingIncludesComment ? previousSettingCommaOffset! + 1 : node.endOffset,\n\t\t\t\tlength: 0,\n\t\t\t\tcontent: nextSettingNode ? eol + newProperty + ',' : eol + newProperty\n\t\t\t});\n\t\t}\n\n\n\t\treturn edits;\n\t}\n\n\telse {\n\n\t\t/* Insert before a setting */\n\t\tif (node.setting) {\n\t\t\treturn [{ offset: node.startOffset, length: 0, content: newProperty + ',' }];\n\t\t}\n\n\t\t/* Insert before a comment */\n\t\tconst content = (tree[location.index - 1] && !tree[location.index - 1].setting /* previous node is comment */ ? eol : '')\n\t\t\t+ newProperty\n\t\t\t+ (findNextSettingNode(location.index, tree) ? ',' : '')\n\t\t\t+ eol;\n\t\treturn [{ offset: node.startOffset, length: 0, content }];\n\t}\n\n}\n\nfunction findSettingNode(key: string, tree: INode[]): INode | undefined {\n\treturn tree.filter(node => node.setting?.key === key)[0];\n}\n\nfunction findPreviousSettingNode(index: number, tree: INode[]): INode | undefined {\n\tfor (let i = index - 1; i >= 0; i--) {\n\t\tif (tree[i].setting) {\n\t\t\treturn tree[i];\n\t\t}\n\t}\n\treturn undefined;\n}\n\nfunction findNextSettingNode(index: number, tree: INode[]): INode | undefined {\n\tfor (let i = index + 1; i < tree.length; i++) {\n\t\tif (tree[i].setting) {\n\t\t\treturn tree[i];\n\t\t}\n\t}\n\treturn undefined;\n}\n\nfunction findNodesBetween(nodes: INode[], from: INode, till: INode): INode[] {\n\tconst fromIndex = nodes.indexOf(from);\n\tconst tillIndex = nodes.indexOf(till);\n\treturn nodes.filter((node, index) => fromIndex < index && index < tillIndex);\n}\n\nfunction findLastMatchingTargetCommentNode(sourceComments: INode[], targetComments: INode[]): INode | undefined {\n\tif (sourceComments.length && targetComments.length) {\n\t\tlet index = 0;\n\t\tfor (; index < targetComments.length && index < sourceComments.length; index++) {\n\t\t\tif (sourceComments[index].value !== targetComments[index].value) {\n\t\t\t\treturn targetComments[index - 1];\n\t\t\t}\n\t\t}\n\t\treturn targetComments[index - 1];\n\t}\n\treturn undefined;\n}\n\ninterface INode {\n\treadonly startOffset: number;\n\treadonly endOffset: number;\n\treadonly value: string;\n\treadonly setting?: {\n\t\treadonly key: string;\n\t\treadonly commaOffset: number | undefined;\n\t};\n\treadonly comment?: string;\n}\n\nfunction parseSettings(content: string): INode[] {\n\tconst nodes: INode[] = [];\n\tlet hierarchyLevel = -1;\n\tlet startOffset: number;\n\tlet key: string;\n\n\tconst visitor: JSONVisitor = {\n\t\tonObjectBegin: (offset: number) => {\n\t\t\thierarchyLevel++;\n\t\t},\n\t\tonObjectProperty: (name: string, offset: number, length: number) => {\n\t\t\tif (hierarchyLevel === 0) {\n\t\t\t\t// this is setting key\n\t\t\t\tstartOffset = offset;\n\t\t\t\tkey = name;\n\t\t\t}\n\t\t},\n\t\tonObjectEnd: (offset: number, length: number) => {\n\t\t\thierarchyLevel--;\n\t\t\tif (hierarchyLevel === 0) {\n\t\t\t\tnodes.push({\n\t\t\t\t\tstartOffset,\n\t\t\t\t\tendOffset: offset + length,\n\t\t\t\t\tvalue: content.substring(startOffset, offset + length),\n\t\t\t\t\tsetting: {\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tcommaOffset: undefined\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\tonArrayBegin: (offset: number, length: number) => {\n\t\t\thierarchyLevel++;\n\t\t},\n\t\tonArrayEnd: (offset: number, length: number) => {\n\t\t\thierarchyLevel--;\n\t\t\tif (hierarchyLevel === 0) {\n\t\t\t\tnodes.push({\n\t\t\t\t\tstartOffset,\n\t\t\t\t\tendOffset: offset + length,\n\t\t\t\t\tvalue: content.substring(startOffset, offset + length),\n\t\t\t\t\tsetting: {\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tcommaOffset: undefined\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\tonLiteralValue: (value: any, offset: number, length: number) => {\n\t\t\tif (hierarchyLevel === 0) {\n\t\t\t\tnodes.push({\n\t\t\t\t\tstartOffset,\n\t\t\t\t\tendOffset: offset + length,\n\t\t\t\t\tvalue: content.substring(startOffset, offset + length),\n\t\t\t\t\tsetting: {\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tcommaOffset: undefined\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\tonSeparator: (sep: string, offset: number, length: number) => {\n\t\t\tif (hierarchyLevel === 0) {\n\t\t\t\tif (sep === ',') {\n\t\t\t\t\tlet index = nodes.length - 1;\n\t\t\t\t\tfor (; index >= 0; index--) {\n\t\t\t\t\t\tif (nodes[index].setting) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst node = nodes[index];\n\t\t\t\t\tif (node) {\n\t\t\t\t\t\tnodes.splice(index, 1, {\n\t\t\t\t\t\t\tstartOffset: node.startOffset,\n\t\t\t\t\t\t\tendOffset: node.endOffset,\n\t\t\t\t\t\t\tvalue: node.value,\n\t\t\t\t\t\t\tsetting: {\n\t\t\t\t\t\t\t\tkey: node.setting!.key,\n\t\t\t\t\t\t\t\tcommaOffset: offset\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tonComment: (offset: number, length: number) => {\n\t\t\tif (hierarchyLevel === 0) {\n\t\t\t\tnodes.push({\n\t\t\t\t\tstartOffset: offset,\n\t\t\t\t\tendOffset: offset + length,\n\t\t\t\t\tvalue: content.substring(offset, offset + length),\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\tvisit(content, visitor);\n\treturn nodes;\n}\n"]}