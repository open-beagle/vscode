{"version":3,"sources":["vs/platform/userDataSync/common/userDataSyncMachines.ts"],"names":[],"mappings":"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","file":"userDataSyncMachines.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { getServiceMachineId } from 'vs/platform/serviceMachineId/common/serviceMachineId';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { IUserDataSyncStoreService, IUserData, IUserDataSyncLogService, IUserDataManifest } from 'vs/platform/userDataSync/common/userDataSync';\nimport { localize } from 'vs/nls';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { PlatformToString, isWeb, Platform, platform } from 'vs/base/common/platform';\nimport { escapeRegExpCharacters } from 'vs/base/common/strings';\nimport { Event, Emitter } from 'vs/base/common/event';\n\ninterface IMachineData {\n\tid: string;\n\tname: string;\n\tdisabled?: boolean;\n}\n\ninterface IMachinesData {\n\tversion: number;\n\tmachines: IMachineData[];\n}\n\nexport type IUserDataSyncMachine = Readonly<IMachineData> & { readonly isCurrent: boolean };\n\nexport const IUserDataSyncMachinesService = createDecorator<IUserDataSyncMachinesService>('IUserDataSyncMachinesService');\nexport interface IUserDataSyncMachinesService {\n\t_serviceBrand: any;\n\n\treadonly onDidChange: Event<void>;\n\n\tgetMachines(manifest?: IUserDataManifest): Promise<IUserDataSyncMachine[]>;\n\n\taddCurrentMachine(manifest?: IUserDataManifest): Promise<void>;\n\tremoveCurrentMachine(manifest?: IUserDataManifest): Promise<void>;\n\trenameMachine(machineId: string, name: string): Promise<void>;\n\tsetEnablement(machineId: string, enabled: boolean): Promise<void>;\n}\n\nconst currentMachineNameKey = 'sync.currentMachineName';\n\nexport class UserDataSyncMachinesService extends Disposable implements IUserDataSyncMachinesService {\n\n\tprivate static readonly VERSION = 1;\n\tprivate static readonly RESOURCE = 'machines';\n\n\t_serviceBrand: any;\n\n\tprivate readonly _onDidChange = this._register(new Emitter<void>());\n\treadonly onDidChange = this._onDidChange.event;\n\n\tprivate readonly currentMachineIdPromise: Promise<string>;\n\tprivate userData: IUserData | null = null;\n\n\tconstructor(\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IUserDataSyncStoreService private readonly userDataSyncStoreService: IUserDataSyncStoreService,\n\t\t@IUserDataSyncLogService private readonly logService: IUserDataSyncLogService,\n\t\t@IProductService private readonly productService: IProductService,\n\t) {\n\t\tsuper();\n\t\tthis.currentMachineIdPromise = getServiceMachineId(environmentService, fileService, storageService);\n\t}\n\n\tasync getMachines(manifest?: IUserDataManifest): Promise<IUserDataSyncMachine[]> {\n\t\tconst currentMachineId = await this.currentMachineIdPromise;\n\t\tconst machineData = await this.readMachinesData(manifest);\n\t\treturn machineData.machines.map<IUserDataSyncMachine>(machine => ({ ...machine, ...{ isCurrent: machine.id === currentMachineId } }));\n\t}\n\n\tasync addCurrentMachine(manifest?: IUserDataManifest): Promise<void> {\n\t\tconst currentMachineId = await this.currentMachineIdPromise;\n\t\tconst machineData = await this.readMachinesData(manifest);\n\t\tif (!machineData.machines.some(({ id }) => id === currentMachineId)) {\n\t\t\tmachineData.machines.push({ id: currentMachineId, name: this.computeCurrentMachineName(machineData.machines) });\n\t\t\tawait this.writeMachinesData(machineData);\n\t\t}\n\t}\n\n\tasync removeCurrentMachine(manifest?: IUserDataManifest): Promise<void> {\n\t\tconst currentMachineId = await this.currentMachineIdPromise;\n\t\tconst machineData = await this.readMachinesData(manifest);\n\t\tconst updatedMachines = machineData.machines.filter(({ id }) => id !== currentMachineId);\n\t\tif (updatedMachines.length !== machineData.machines.length) {\n\t\t\tmachineData.machines = updatedMachines;\n\t\t\tawait this.writeMachinesData(machineData);\n\t\t}\n\t}\n\n\tasync renameMachine(machineId: string, name: string, manifest?: IUserDataManifest): Promise<void> {\n\t\tconst currentMachineId = await this.currentMachineIdPromise;\n\t\tconst machineData = await this.readMachinesData(manifest);\n\t\tconst machine = machineData.machines.find(({ id }) => id === machineId);\n\t\tif (machine) {\n\t\t\tmachine.name = name;\n\t\t\tawait this.writeMachinesData(machineData);\n\t\t\tif (machineData.machines.some(({ id }) => id === currentMachineId)) {\n\t\t\t\tthis.storageService.store(currentMachineNameKey, name, StorageScope.GLOBAL, StorageTarget.MACHINE);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync setEnablement(machineId: string, enabled: boolean): Promise<void> {\n\t\tconst machineData = await this.readMachinesData();\n\t\tconst machine = machineData.machines.find(({ id }) => id === machineId);\n\t\tif (machine) {\n\t\t\tmachine.disabled = enabled ? undefined : true;\n\t\t\tawait this.writeMachinesData(machineData);\n\t\t}\n\t}\n\n\tprivate computeCurrentMachineName(machines: IMachineData[]): string {\n\t\tconst previousName = this.storageService.get(currentMachineNameKey, StorageScope.GLOBAL);\n\t\tif (previousName) {\n\t\t\treturn previousName;\n\t\t}\n\n\t\tconst namePrefix = `${this.productService.nameLong} (${PlatformToString(isWeb ? Platform.Web : platform)})`;\n\t\tconst nameRegEx = new RegExp(`${escapeRegExpCharacters(namePrefix)}\\\\s#(\\\\d+)`);\n\t\tlet nameIndex = 0;\n\t\tfor (const machine of machines) {\n\t\t\tconst matches = nameRegEx.exec(machine.name);\n\t\t\tconst index = matches ? parseInt(matches[1]) : 0;\n\t\t\tnameIndex = index > nameIndex ? index : nameIndex;\n\t\t}\n\t\treturn `${namePrefix} #${nameIndex + 1}`;\n\t}\n\n\tprivate async readMachinesData(manifest?: IUserDataManifest): Promise<IMachinesData> {\n\t\tthis.userData = await this.readUserData(manifest);\n\t\tconst machinesData = this.parse(this.userData);\n\t\tif (machinesData.version !== UserDataSyncMachinesService.VERSION) {\n\t\t\tthrow new Error(localize('error incompatible', \"Cannot read machines data as the current version is incompatible. Please update {0} and try again.\", this.productService.nameLong));\n\t\t}\n\t\treturn machinesData;\n\t}\n\n\tprivate async writeMachinesData(machinesData: IMachinesData): Promise<void> {\n\t\tconst content = JSON.stringify(machinesData);\n\t\tconst ref = await this.userDataSyncStoreService.write(UserDataSyncMachinesService.RESOURCE, content, this.userData?.ref || null);\n\t\tthis.userData = { ref, content };\n\t\tthis._onDidChange.fire();\n\t}\n\n\tprivate async readUserData(manifest?: IUserDataManifest): Promise<IUserData> {\n\t\tif (this.userData) {\n\n\t\t\tconst latestRef = manifest && manifest.latest ? manifest.latest[UserDataSyncMachinesService.RESOURCE] : undefined;\n\n\t\t\t// Last time synced resource and latest resource on server are same\n\t\t\tif (this.userData.ref === latestRef) {\n\t\t\t\treturn this.userData;\n\t\t\t}\n\n\t\t\t// There is no resource on server and last time it was synced with no resource\n\t\t\tif (latestRef === undefined && this.userData.content === null) {\n\t\t\t\treturn this.userData;\n\t\t\t}\n\t\t}\n\n\t\treturn this.userDataSyncStoreService.read(UserDataSyncMachinesService.RESOURCE, this.userData);\n\t}\n\n\tprivate parse(userData: IUserData): IMachinesData {\n\t\tif (userData.content !== null) {\n\t\t\ttry {\n\t\t\t\treturn JSON.parse(userData.content);\n\t\t\t} catch (e) {\n\t\t\t\tthis.logService.error(e);\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tversion: UserDataSyncMachinesService.VERSION,\n\t\t\tmachines: []\n\t\t};\n\t}\n}\n"]}