{"version":3,"file":"extensionsMerge.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/userDataSync/common/extensionsMerge.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ISyncExtension, ISyncExtensionWithVersion } from 'vs/platform/userDataSync/common/userDataSync';\nimport { IExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\nimport { deepClone, equals } from 'vs/base/common/objects';\nimport { IStringDictionary } from 'vs/base/common/collections';\nimport * as semver from 'vs/base/common/semver/semver';\n\nexport interface IMergeResult {\n\tadded: ISyncExtension[];\n\tremoved: IExtensionIdentifier[];\n\tupdated: ISyncExtensionWithVersion[];\n\tremote: ISyncExtension[] | null;\n}\n\nexport function merge(localExtensions: ISyncExtensionWithVersion[], remoteExtensions: ISyncExtension[] | null, lastSyncExtensions: ISyncExtension[] | null, skippedExtensions: ISyncExtension[], ignoredExtensions: string[]): IMergeResult {\n\tconst added: ISyncExtension[] = [];\n\tconst removed: IExtensionIdentifier[] = [];\n\tconst updated: ISyncExtensionWithVersion[] = [];\n\n\tif (!remoteExtensions) {\n\t\tconst remote = localExtensions.filter(({ identifier }) => ignoredExtensions.every(id => id.toLowerCase() !== identifier.id.toLowerCase()));\n\t\treturn {\n\t\t\tadded,\n\t\t\tremoved,\n\t\t\tupdated,\n\t\t\tremote: remote.length > 0 ? remote : null\n\t\t};\n\t}\n\n\tlocalExtensions = localExtensions.map(massageIncomingExtension);\n\tremoteExtensions = remoteExtensions.map(massageIncomingExtension);\n\tlastSyncExtensions = lastSyncExtensions ? lastSyncExtensions.map(massageIncomingExtension) : null;\n\n\tconst uuids: Map<string, string> = new Map<string, string>();\n\tconst addUUID = (identifier: IExtensionIdentifier) => { if (identifier.uuid) { uuids.set(identifier.id.toLowerCase(), identifier.uuid); } };\n\tlocalExtensions.forEach(({ identifier }) => addUUID(identifier));\n\tremoteExtensions.forEach(({ identifier }) => addUUID(identifier));\n\tif (lastSyncExtensions) {\n\t\tlastSyncExtensions.forEach(({ identifier }) => addUUID(identifier));\n\t}\n\n\tconst getKey = (extension: ISyncExtension): string => {\n\t\tconst uuid = extension.identifier.uuid || uuids.get(extension.identifier.id.toLowerCase());\n\t\treturn uuid ? `uuid:${uuid}` : `id:${extension.identifier.id.toLowerCase()}`;\n\t};\n\tconst addExtensionToMap = <T extends ISyncExtension>(map: Map<string, T>, extension: T) => {\n\t\tmap.set(getKey(extension), extension);\n\t\treturn map;\n\t};\n\tconst localExtensionsMap: Map<string, ISyncExtensionWithVersion> = localExtensions.reduce(addExtensionToMap, new Map<string, ISyncExtensionWithVersion>());\n\tconst remoteExtensionsMap = remoteExtensions.reduce(addExtensionToMap, new Map<string, ISyncExtension>());\n\tconst newRemoteExtensionsMap = remoteExtensions.reduce((map: Map<string, ISyncExtension>, extension: ISyncExtension) => {\n\t\tconst key = getKey(extension);\n\t\textension = deepClone(extension);\n\t\tconst localExtension = localExtensionsMap.get(key);\n\t\tif (localExtension) {\n\t\t\tif (localExtension.installed) {\n\t\t\t\textension.installed = true;\n\t\t\t}\n\t\t\tif (!extension.version) {\n\t\t\t\textension.version = localExtension.version;\n\t\t\t}\n\t\t}\n\t\treturn addExtensionToMap(map, extension);\n\t}, new Map<string, ISyncExtension>());\n\tconst lastSyncExtensionsMap = lastSyncExtensions ? lastSyncExtensions.reduce(addExtensionToMap, new Map<string, ISyncExtension>()) : null;\n\tconst skippedExtensionsMap = skippedExtensions.reduce(addExtensionToMap, new Map<string, ISyncExtension>());\n\tconst ignoredExtensionsSet = ignoredExtensions.reduce((set, id) => {\n\t\tconst uuid = uuids.get(id.toLowerCase());\n\t\treturn set.add(uuid ? `uuid:${uuid}` : `id:${id.toLowerCase()}`);\n\t}, new Set<string>());\n\n\tconst localToRemote = compare(localExtensionsMap, remoteExtensionsMap, ignoredExtensionsSet);\n\tif (localToRemote.added.size > 0 || localToRemote.removed.size > 0 || localToRemote.updated.size > 0) {\n\n\t\tconst baseToLocal = compare(lastSyncExtensionsMap, localExtensionsMap, ignoredExtensionsSet);\n\t\tconst baseToRemote = compare(lastSyncExtensionsMap, remoteExtensionsMap, ignoredExtensionsSet);\n\n\t\tconst merge = (key: string, updatedInRemote: boolean): ISyncExtensionWithVersion | undefined => {\n\t\t\tconst localExtension = localExtensionsMap.get(key);\n\t\t\tif (localExtension) {\n\t\t\t\tconst remoteExtension = remoteExtensionsMap.get(key)!;\n\t\t\t\treturn {\n\t\t\t\t\t...(updatedInRemote ? remoteExtension : localExtension),\n\t\t\t\t\tversion: remoteExtension.version && semver.gt(remoteExtension.version, localExtension.version) ? localExtension.version : localExtension.version,\n\t\t\t\t\tstate: mergeExtensionState(localExtension, remoteExtension, lastSyncExtensionsMap?.get(key))\n\t\t\t\t};\n\n\t\t\t}\n\t\t\treturn undefined;\n\t\t};\n\n\t\t// Remotely removed extension.\n\t\tfor (const key of baseToRemote.removed.values()) {\n\t\t\tconst e = localExtensionsMap.get(key);\n\t\t\tif (e) {\n\t\t\t\tremoved.push(e.identifier);\n\t\t\t}\n\t\t}\n\n\t\t// Remotely added extension\n\t\tfor (const key of baseToRemote.added.values()) {\n\t\t\t// Got added in local\n\t\t\tif (baseToLocal.added.has(key)) {\n\t\t\t\t// Is different from local to remote\n\t\t\t\tif (localToRemote.updated.has(key)) {\n\t\t\t\t\tconst mergedExtension = merge(key, true);\n\t\t\t\t\tif (mergedExtension) {\n\t\t\t\t\t\tupdated.push(massageOutgoingExtension(mergedExtension, key));\n\t\t\t\t\t\tnewRemoteExtensionsMap.set(key, mergedExtension);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Add only installed extension to local\n\t\t\t\tconst remoteExtension = remoteExtensionsMap.get(key)!;\n\t\t\t\tif (remoteExtension.installed) {\n\t\t\t\t\tadded.push(massageOutgoingExtension(remoteExtension, key));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Remotely updated extensions\n\t\tfor (const key of baseToRemote.updated.values()) {\n\t\t\t// Update in local always\n\t\t\tconst mergedExtension = merge(key, true);\n\t\t\tif (mergedExtension) {\n\t\t\t\tupdated.push(massageOutgoingExtension(mergedExtension, key));\n\t\t\t\tnewRemoteExtensionsMap.set(key, mergedExtension);\n\t\t\t}\n\t\t}\n\n\t\t// Locally added extensions\n\t\tfor (const key of baseToLocal.added.values()) {\n\t\t\t// Not there in remote\n\t\t\tif (!baseToRemote.added.has(key)) {\n\t\t\t\tnewRemoteExtensionsMap.set(key, localExtensionsMap.get(key)!);\n\t\t\t}\n\t\t}\n\n\t\t// Locally updated extensions\n\t\tfor (const key of baseToLocal.updated.values()) {\n\t\t\t// If removed in remote\n\t\t\tif (baseToRemote.removed.has(key)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If not updated in remote\n\t\t\tif (!baseToRemote.updated.has(key)) {\n\t\t\t\tconst mergedExtension = merge(key, false);\n\t\t\t\tif (mergedExtension) {\n\t\t\t\t\t// Retain installed property\n\t\t\t\t\tif (newRemoteExtensionsMap.get(key)?.installed) {\n\t\t\t\t\t\tmergedExtension.installed = true;\n\t\t\t\t\t}\n\t\t\t\t\tnewRemoteExtensionsMap.set(key, mergedExtension);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Locally removed extensions\n\t\tfor (const key of baseToLocal.removed.values()) {\n\t\t\t// If not skipped and not updated in remote\n\t\t\tif (!skippedExtensionsMap.has(key) && !baseToRemote.updated.has(key)) {\n\t\t\t\t// Remove only if it is an installed extension\n\t\t\t\tif (lastSyncExtensionsMap?.get(key)?.installed) {\n\t\t\t\t\tnewRemoteExtensionsMap.delete(key);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tconst remote: ISyncExtension[] = [];\n\tconst remoteChanges = compare(remoteExtensionsMap, newRemoteExtensionsMap, new Set<string>(), { checkInstalledProperty: true, checkVersionProperty: true });\n\tif (remoteChanges.added.size > 0 || remoteChanges.updated.size > 0 || remoteChanges.removed.size > 0) {\n\t\tnewRemoteExtensionsMap.forEach((value, key) => remote.push(massageOutgoingExtension(value, key)));\n\t}\n\n\treturn { added, removed, updated, remote: remote.length ? remote : null };\n}\n\nfunction compare(from: Map<string, ISyncExtension> | null, to: Map<string, ISyncExtension>, ignoredExtensions: Set<string>, { checkInstalledProperty, checkVersionProperty }: { checkInstalledProperty: boolean, checkVersionProperty: boolean } = { checkInstalledProperty: false, checkVersionProperty: false }): { added: Set<string>, removed: Set<string>, updated: Set<string> } {\n\tconst fromKeys = from ? [...from.keys()].filter(key => !ignoredExtensions.has(key)) : [];\n\tconst toKeys = [...to.keys()].filter(key => !ignoredExtensions.has(key));\n\tconst added = toKeys.filter(key => fromKeys.indexOf(key) === -1).reduce((r, key) => { r.add(key); return r; }, new Set<string>());\n\tconst removed = fromKeys.filter(key => toKeys.indexOf(key) === -1).reduce((r, key) => { r.add(key); return r; }, new Set<string>());\n\tconst updated: Set<string> = new Set<string>();\n\n\tfor (const key of fromKeys) {\n\t\tif (removed.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst fromExtension = from!.get(key)!;\n\t\tconst toExtension = to.get(key);\n\t\tif (!toExtension\n\t\t\t|| fromExtension.disabled !== toExtension.disabled\n\t\t\t|| !isSameExtensionState(fromExtension.state, toExtension.state)\n\t\t\t|| (checkVersionProperty && fromExtension.version !== toExtension.version)\n\t\t\t|| (checkInstalledProperty && fromExtension.installed !== toExtension.installed)\n\t\t) {\n\t\t\tupdated.add(key);\n\t\t}\n\t}\n\n\treturn { added, removed, updated };\n}\n\nfunction mergeExtensionState(localExtension: ISyncExtensionWithVersion, remoteExtension: ISyncExtension, lastSyncExtension: ISyncExtension | undefined): IStringDictionary<any> | undefined {\n\tconst localState = localExtension.state;\n\tconst remoteState = remoteExtension.state;\n\tconst baseState = lastSyncExtension?.state;\n\n\t// If remote extension has no version, use local state\n\tif (!remoteExtension.version) {\n\t\treturn localState;\n\t}\n\n\t// If local state exists and local extension is latest then use local state\n\tif (localState && semver.gt(localExtension.version, remoteExtension.version)) {\n\t\treturn localState;\n\t}\n\t// If remote state exists and remote extension is latest, use remote state\n\tif (remoteState && semver.gt(remoteExtension.version, localExtension.version)) {\n\t\treturn remoteState;\n\t}\n\n\n\t/* Remote and local are on same version */\n\n\t// If local state is not yet set, use remote state\n\tif (!localState) {\n\t\treturn remoteState;\n\t}\n\t// If remote state is not yet set, use local state\n\tif (!remoteState) {\n\t\treturn localState;\n\t}\n\n\tconst mergedState: IStringDictionary<any> = deepClone(localState);\n\tconst baseToRemote = baseState ? compareExtensionState(baseState, remoteState) : { added: Object.keys(remoteState).reduce((r, k) => { r.add(k); return r; }, new Set<string>()), removed: new Set<string>(), updated: new Set<string>() };\n\tconst baseToLocal = baseState ? compareExtensionState(baseState, localState) : { added: Object.keys(localState).reduce((r, k) => { r.add(k); return r; }, new Set<string>()), removed: new Set<string>(), updated: new Set<string>() };\n\t// Added/Updated in remote\n\tfor (const key of [...baseToRemote.added.values(), ...baseToRemote.updated.values()]) {\n\t\tmergedState[key] = remoteState[key];\n\t}\n\t// Removed in remote\n\tfor (const key of baseToRemote.removed.values()) {\n\t\t// Not updated in local\n\t\tif (!baseToLocal.updated.has(key)) {\n\t\t\tdelete mergedState[key];\n\t\t}\n\t}\n\treturn mergedState;\n}\n\nfunction compareExtensionState(from: IStringDictionary<any>, to: IStringDictionary<any>): { added: Set<string>, removed: Set<string>, updated: Set<string> } {\n\tconst fromKeys = Object.keys(from);\n\tconst toKeys = Object.keys(to);\n\tconst added = toKeys.filter(key => fromKeys.indexOf(key) === -1).reduce((r, key) => { r.add(key); return r; }, new Set<string>());\n\tconst removed = fromKeys.filter(key => toKeys.indexOf(key) === -1).reduce((r, key) => { r.add(key); return r; }, new Set<string>());\n\tconst updated: Set<string> = new Set<string>();\n\n\tfor (const key of fromKeys) {\n\t\tif (removed.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst value1 = from[key];\n\t\tconst value2 = to[key];\n\t\tif (!equals(value1, value2)) {\n\t\t\tupdated.add(key);\n\t\t}\n\t}\n\n\treturn { added, removed, updated };\n}\n\nfunction isSameExtensionState(a: IStringDictionary<any> = {}, b: IStringDictionary<any> = {}): boolean {\n\tconst { added, removed, updated } = compareExtensionState(a, b);\n\treturn added.size === 0 && removed.size === 0 && updated.size === 0;\n}\n\n// massage incoming extension - add optional properties\nfunction massageIncomingExtension<T extends ISyncExtension>(extension: T): T {\n\treturn { ...extension, ...{ disabled: !!extension.disabled, installed: !!extension.installed } };\n}\n\n// massage outgoing extension - remove optional properties\nfunction massageOutgoingExtension<T extends ISyncExtension>(extension: T, key: string): T {\n\tconst massagedExtension: ISyncExtension = {\n\t\tidentifier: {\n\t\t\tid: extension.identifier.id,\n\t\t\tuuid: key.startsWith('uuid:') ? key.substring('uuid:'.length) : undefined\n\t\t},\n\t};\n\tif (extension.version) {\n\t\tmassagedExtension.version = extension.version;\n\t}\n\tif (extension.disabled) {\n\t\tmassagedExtension.disabled = true;\n\t}\n\tif (extension.installed) {\n\t\tmassagedExtension.installed = true;\n\t}\n\tif (extension.state) {\n\t\tmassagedExtension.state = extension.state;\n\t}\n\treturn massagedExtension as T;\n}\n"]}