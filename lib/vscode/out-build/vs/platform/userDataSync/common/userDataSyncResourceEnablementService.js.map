{"version":3,"file":"userDataSyncResourceEnablementService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/userDataSync/common/userDataSyncResourceEnablementService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAahG,IAAa,qCAAqC,GAAlD,MAAa,qCAAsC,SAAQ,sBAAU;QAOpE,YACmC,cAA+B,EAC7B,gBAAmC;YAEvE,KAAK,EAAE,CAAC;YAH0B,mBAAc,GAAd,cAAc,CAAiB;YAC7B,qBAAgB,GAAhB,gBAAgB,CAAmB;YALhE,mCAA8B,GAAG,IAAI,eAAO,EAA2B,CAAC;YACvE,kCAA6B,GAAmC,IAAI,CAAC,8BAA8B,CAAC,KAAK,CAAC;YAOlH,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAClF,CAAC;QAED,iBAAiB,CAAC,QAAsB;YACvC,OAAO,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,CAAA,GAAA,+BAAgB,CAAA,CAAC,QAAQ,CAAC,kBAAuB,IAAI,CAAC,CAAC;QAC9F,CAAC;QAED,qBAAqB,CAAC,QAAsB,EAAE,OAAgB;YAC7D,IAAI,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,KAAK,OAAO,EAAE;gBACjD,MAAM,qBAAqB,GAAG,CAAA,GAAA,+BAAgB,CAAA,CAAC,QAAQ,CAAC,CAAC;gBACzD,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAqD,qBAAqB,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;gBACzH,IAAI,CAAC,uBAAuB,CAAC,qBAAqB,EAAE,OAAO,CAAC,CAAC;aAC7D;QACF,CAAC;QAED,2BAA2B,CAAC,QAAsB;YACjD,OAAO,SAAS,CAAC;QAClB,CAAC;QAEO,uBAAuB,CAAC,qBAA6B,EAAE,OAAgB;YAC9E,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,qBAAqB,EAAE,OAAO,kBAAuB,gBAAK,CAAC,CAAC,cAAsC,CAAC,gBAAsB,CAAC,CAAC;QACtJ,CAAC;QAEO,kBAAkB,CAAC,kBAA4C;YACtE,IAAI,kBAAkB,CAAC,KAAK,mBAAwB,EAAE;gBACrD,MAAM,WAAW,GAAG,iCAAkB,CAAC,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC,CAAA,GAAA,+BAAgB,CAAA,CAAC,WAAW,CAAC,KAAK,kBAAkB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC1H,IAAI,WAAW,EAAE;oBAChB,IAAI,CAAC,8BAA8B,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;oBAC7F,OAAO;iBACP;aACD;QACF,CAAC;KACD,CAAA;IA5CY,qCAAqC;QAQ/C,WAAA,yBAAe,CAAA;QACf,WAAA,6BAAiB,CAAA;OATP,qCAAqC,CA4CjD;IA5CY,sFAAqC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IUserDataSyncResourceEnablementService, ALL_SYNC_RESOURCES, SyncResource, getEnablementKey } from 'vs/platform/userDataSync/common/userDataSync';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { IStorageService, IStorageValueChangeEvent, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { isWeb } from 'vs/base/common/platform';\n\ntype SyncEnablementClassification = {\n\tenabled?: { classification: 'SystemMetaData', purpose: 'FeatureInsight', isMeasurement: true };\n};\n\nexport class UserDataSyncResourceEnablementService extends Disposable implements IUserDataSyncResourceEnablementService {\n\n\t_serviceBrand: any;\n\n\tprivate _onDidChangeResourceEnablement = new Emitter<[SyncResource, boolean]>();\n\treadonly onDidChangeResourceEnablement: Event<[SyncResource, boolean]> = this._onDidChangeResourceEnablement.event;\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t) {\n\t\tsuper();\n\t\tthis._register(storageService.onDidChangeValue(e => this.onDidStorageChange(e)));\n\t}\n\n\tisResourceEnabled(resource: SyncResource): boolean {\n\t\treturn this.storageService.getBoolean(getEnablementKey(resource), StorageScope.GLOBAL, true);\n\t}\n\n\tsetResourceEnablement(resource: SyncResource, enabled: boolean): void {\n\t\tif (this.isResourceEnabled(resource) !== enabled) {\n\t\t\tconst resourceEnablementKey = getEnablementKey(resource);\n\t\t\tthis.telemetryService.publicLog2<{ enabled: boolean }, SyncEnablementClassification>(resourceEnablementKey, { enabled });\n\t\t\tthis.storeResourceEnablement(resourceEnablementKey, enabled);\n\t\t}\n\t}\n\n\tgetResourceSyncStateVersion(resource: SyncResource): string | undefined {\n\t\treturn undefined;\n\t}\n\n\tprivate storeResourceEnablement(resourceEnablementKey: string, enabled: boolean): void {\n\t\tthis.storageService.store(resourceEnablementKey, enabled, StorageScope.GLOBAL, isWeb ? StorageTarget.USER /* sync in web */ : StorageTarget.MACHINE);\n\t}\n\n\tprivate onDidStorageChange(storageChangeEvent: IStorageValueChangeEvent): void {\n\t\tif (storageChangeEvent.scope === StorageScope.GLOBAL) {\n\t\t\tconst resourceKey = ALL_SYNC_RESOURCES.filter(resourceKey => getEnablementKey(resourceKey) === storageChangeEvent.key)[0];\n\t\t\tif (resourceKey) {\n\t\t\t\tthis._onDidChangeResourceEnablement.fire([resourceKey, this.isResourceEnabled(resourceKey)]);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n}\n"]}