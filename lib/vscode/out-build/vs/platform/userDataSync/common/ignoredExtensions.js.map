{"version":3,"file":"ignoredExtensions.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/userDataSync/common/ignoredExtensions.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { distinct } from 'vs/base/common/arrays';\nimport { ConfigurationTarget, IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ILocalExtension } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\n\nexport const IIgnoredExtensionsManagementService = createDecorator<IIgnoredExtensionsManagementService>('IIgnoredExtensionsManagementService');\nexport interface IIgnoredExtensionsManagementService {\n\treadonly _serviceBrand: any;\n\n\tgetIgnoredExtensions(installed: ILocalExtension[]): string[];\n\n\thasToNeverSyncExtension(extensionId: string): boolean;\n\thasToAlwaysSyncExtension(extensionId: string): boolean;\n\tupdateIgnoredExtensions(ignoredExtensionId: string, ignore: boolean): Promise<void>;\n\tupdateSynchronizedExtensions(ignoredExtensionId: string, sync: boolean): Promise<void>;\n}\n\nexport class IgnoredExtensionsManagementService implements IIgnoredExtensionsManagementService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t) {\n\t}\n\n\thasToNeverSyncExtension(extensionId: string): boolean {\n\t\tconst configuredIgnoredExtensions = this.getConfiguredIgnoredExtensions();\n\t\treturn configuredIgnoredExtensions.includes(extensionId.toLowerCase());\n\t}\n\n\thasToAlwaysSyncExtension(extensionId: string): boolean {\n\t\tconst configuredIgnoredExtensions = this.getConfiguredIgnoredExtensions();\n\t\treturn configuredIgnoredExtensions.includes(`-${extensionId.toLowerCase()}`);\n\t}\n\n\tupdateIgnoredExtensions(ignoredExtensionId: string, ignore: boolean): Promise<void> {\n\t\t// first remove the extension completely from ignored extensions\n\t\tlet currentValue = [...this.configurationService.getValue<string[]>('settingsSync.ignoredExtensions')].map(id => id.toLowerCase());\n\t\tcurrentValue = currentValue.filter(v => v !== ignoredExtensionId && v !== `-${ignoredExtensionId}`);\n\n\t\t// Add only if ignored\n\t\tif (ignore) {\n\t\t\tcurrentValue.push(ignoredExtensionId.toLowerCase());\n\t\t}\n\n\t\treturn this.configurationService.updateValue('settingsSync.ignoredExtensions', currentValue.length ? currentValue : undefined, ConfigurationTarget.USER);\n\t}\n\n\tupdateSynchronizedExtensions(extensionId: string, sync: boolean): Promise<void> {\n\t\t// first remove the extension completely from ignored extensions\n\t\tlet currentValue = [...this.configurationService.getValue<string[]>('settingsSync.ignoredExtensions')].map(id => id.toLowerCase());\n\t\tcurrentValue = currentValue.filter(v => v !== extensionId && v !== `-${extensionId}`);\n\n\t\t// Add only if synced\n\t\tif (sync) {\n\t\t\tcurrentValue.push(`-${extensionId.toLowerCase()}`);\n\t\t}\n\n\t\treturn this.configurationService.updateValue('settingsSync.ignoredExtensions', currentValue.length ? currentValue : undefined, ConfigurationTarget.USER);\n\t}\n\n\tgetIgnoredExtensions(installed: ILocalExtension[]): string[] {\n\t\tconst defaultIgnoredExtensions = installed.filter(i => i.isMachineScoped).map(i => i.identifier.id.toLowerCase());\n\t\tconst value = this.getConfiguredIgnoredExtensions().map(id => id.toLowerCase());\n\t\tconst added: string[] = [], removed: string[] = [];\n\t\tif (Array.isArray(value)) {\n\t\t\tfor (const key of value) {\n\t\t\t\tif (key.startsWith('-')) {\n\t\t\t\t\tremoved.push(key.substring(1));\n\t\t\t\t} else {\n\t\t\t\t\tadded.push(key);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn distinct([...defaultIgnoredExtensions, ...added,].filter(setting => removed.indexOf(setting) === -1));\n\t}\n\n\tprivate getConfiguredIgnoredExtensions(): string[] {\n\t\tlet userValue = this.configurationService.inspect<string[]>('settingsSync.ignoredExtensions').userValue;\n\t\tif (userValue !== undefined) {\n\t\t\treturn userValue;\n\t\t}\n\t\tuserValue = this.configurationService.inspect<string[]>('sync.ignoredExtensions').userValue;\n\t\tif (userValue !== undefined) {\n\t\t\treturn userValue;\n\t\t}\n\t\treturn (this.configurationService.getValue<string[]>('settingsSync.ignoredExtensions') || []).map(id => id.toLowerCase());\n\t}\n}\n"]}