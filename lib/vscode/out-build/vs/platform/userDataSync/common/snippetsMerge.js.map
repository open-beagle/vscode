{"version":3,"file":"snippetsMerge.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/userDataSync/common/snippetsMerge.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IStringDictionary } from 'vs/base/common/collections';\n\nexport interface IMergeResult {\n\tlocal: {\n\t\tadded: IStringDictionary<string>;\n\t\tupdated: IStringDictionary<string>;\n\t\tremoved: string[];\n\t};\n\tremote: {\n\t\tadded: IStringDictionary<string>;\n\t\tupdated: IStringDictionary<string>;\n\t\tremoved: string[];\n\t};\n\tconflicts: string[];\n}\n\nexport function merge(local: IStringDictionary<string>, remote: IStringDictionary<string> | null, base: IStringDictionary<string> | null): IMergeResult {\n\tconst localAdded: IStringDictionary<string> = {};\n\tconst localUpdated: IStringDictionary<string> = {};\n\tconst localRemoved: Set<string> = new Set<string>();\n\n\tif (!remote) {\n\t\treturn {\n\t\t\tlocal: { added: localAdded, updated: localUpdated, removed: [...localRemoved.values()] },\n\t\t\tremote: { added: local, updated: {}, removed: [] },\n\t\t\tconflicts: []\n\t\t};\n\t}\n\n\tconst localToRemote = compare(local, remote);\n\tif (localToRemote.added.size === 0 && localToRemote.removed.size === 0 && localToRemote.updated.size === 0) {\n\t\t// No changes found between local and remote.\n\t\treturn {\n\t\t\tlocal: { added: localAdded, updated: localUpdated, removed: [...localRemoved.values()] },\n\t\t\tremote: { added: {}, updated: {}, removed: [] },\n\t\t\tconflicts: []\n\t\t};\n\t}\n\n\tconst baseToLocal = compare(base, local);\n\tconst baseToRemote = compare(base, remote);\n\n\tconst remoteAdded: IStringDictionary<string> = {};\n\tconst remoteUpdated: IStringDictionary<string> = {};\n\tconst remoteRemoved: Set<string> = new Set<string>();\n\n\tconst conflicts: Set<string> = new Set<string>();\n\n\t// Removed snippets in Local\n\tfor (const key of baseToLocal.removed.values()) {\n\t\t// Conflict - Got updated in remote.\n\t\tif (baseToRemote.updated.has(key)) {\n\t\t\t// Add to local\n\t\t\tlocalAdded[key] = remote[key];\n\t\t}\n\t\t// Remove it in remote\n\t\telse {\n\t\t\tremoteRemoved.add(key);\n\t\t}\n\t}\n\n\t// Removed snippets in Remote\n\tfor (const key of baseToRemote.removed.values()) {\n\t\tif (conflicts.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\t// Conflict - Got updated in local\n\t\tif (baseToLocal.updated.has(key)) {\n\t\t\tconflicts.add(key);\n\t\t}\n\t\t// Also remove in Local\n\t\telse {\n\t\t\tlocalRemoved.add(key);\n\t\t}\n\t}\n\n\t// Updated snippets in Local\n\tfor (const key of baseToLocal.updated.values()) {\n\t\tif (conflicts.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\t// Got updated in remote\n\t\tif (baseToRemote.updated.has(key)) {\n\t\t\t// Has different value\n\t\t\tif (localToRemote.updated.has(key)) {\n\t\t\t\tconflicts.add(key);\n\t\t\t}\n\t\t} else {\n\t\t\tremoteUpdated[key] = local[key];\n\t\t}\n\t}\n\n\t// Updated snippets in Remote\n\tfor (const key of baseToRemote.updated.values()) {\n\t\tif (conflicts.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\t// Got updated in local\n\t\tif (baseToLocal.updated.has(key)) {\n\t\t\t// Has different value\n\t\t\tif (localToRemote.updated.has(key)) {\n\t\t\t\tconflicts.add(key);\n\t\t\t}\n\t\t} else if (local[key] !== undefined) {\n\t\t\tlocalUpdated[key] = remote[key];\n\t\t}\n\t}\n\n\t// Added snippets in Local\n\tfor (const key of baseToLocal.added.values()) {\n\t\tif (conflicts.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\t// Got added in remote\n\t\tif (baseToRemote.added.has(key)) {\n\t\t\t// Has different value\n\t\t\tif (localToRemote.updated.has(key)) {\n\t\t\t\tconflicts.add(key);\n\t\t\t}\n\t\t} else {\n\t\t\tremoteAdded[key] = local[key];\n\t\t}\n\t}\n\n\t// Added snippets in remote\n\tfor (const key of baseToRemote.added.values()) {\n\t\tif (conflicts.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\t// Got added in local\n\t\tif (baseToLocal.added.has(key)) {\n\t\t\t// Has different value\n\t\t\tif (localToRemote.updated.has(key)) {\n\t\t\t\tconflicts.add(key);\n\t\t\t}\n\t\t} else {\n\t\t\tlocalAdded[key] = remote[key];\n\t\t}\n\t}\n\n\treturn {\n\t\tlocal: { added: localAdded, removed: [...localRemoved.values()], updated: localUpdated },\n\t\tremote: { added: remoteAdded, removed: [...remoteRemoved.values()], updated: remoteUpdated },\n\t\tconflicts: [...conflicts.values()],\n\t};\n}\n\nfunction compare(from: IStringDictionary<string> | null, to: IStringDictionary<string> | null): { added: Set<string>, removed: Set<string>, updated: Set<string> } {\n\tconst fromKeys = from ? Object.keys(from) : [];\n\tconst toKeys = to ? Object.keys(to) : [];\n\tconst added = toKeys.filter(key => fromKeys.indexOf(key) === -1).reduce((r, key) => { r.add(key); return r; }, new Set<string>());\n\tconst removed = fromKeys.filter(key => toKeys.indexOf(key) === -1).reduce((r, key) => { r.add(key); return r; }, new Set<string>());\n\tconst updated: Set<string> = new Set<string>();\n\n\tfor (const key of fromKeys) {\n\t\tif (removed.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst fromSnippet = from![key]!;\n\t\tconst toSnippet = to![key]!;\n\t\tif (fromSnippet !== toSnippet) {\n\t\t\tupdated.add(key);\n\t\t}\n\t}\n\n\treturn { added, removed, updated };\n}\n\nexport function areSame(a: IStringDictionary<string>, b: IStringDictionary<string>): boolean {\n\tconst { added, removed, updated } = compare(a, b);\n\treturn added.size === 0 && removed.size === 0 && updated.size === 0;\n}\n"]}