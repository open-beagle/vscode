{"version":3,"file":"ptyService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/terminal/node/ptyService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { IProcessEnvironment, OperatingSystem, OS } from 'vs/base/common/platform';\nimport { IPtyService, IProcessDataEvent, IShellLaunchConfig, ITerminalDimensionsOverride, ITerminalLaunchError, LocalReconnectConstants, ITerminalsLayoutInfo, IRawTerminalInstanceLayoutInfo, ITerminalTabLayoutInfoById, ITerminalInstanceLayoutInfoById, TerminalShellType } from 'vs/platform/terminal/common/terminal';\nimport { AutoOpenBarrier, Queue, RunOnceScheduler } from 'vs/base/common/async';\nimport { Emitter } from 'vs/base/common/event';\nimport { TerminalRecorder } from 'vs/platform/terminal/common/terminalRecorder';\nimport { TerminalProcess } from 'vs/platform/terminal/node/terminalProcess';\nimport { ISetTerminalLayoutInfoArgs, ITerminalTabLayoutInfoDto, IProcessDetails, IGetTerminalLayoutInfoArgs, IPtyHostProcessReplayEvent } from 'vs/platform/terminal/common/terminalProcess';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { TerminalDataBufferer } from 'vs/platform/terminal/common/terminalDataBuffering';\nimport { getSystemShell } from 'vs/base/node/shell';\n\ntype WorkspaceId = string;\n\nexport class PtyService extends Disposable implements IPtyService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _ptys: Map<number, PersistentTerminalProcess> = new Map();\n\tprivate readonly _workspaceLayoutInfos = new Map<WorkspaceId, ISetTerminalLayoutInfoArgs>();\n\n\tprivate readonly _onHeartbeat = this._register(new Emitter<void>());\n\treadonly onHeartbeat = this._onHeartbeat.event;\n\n\tprivate readonly _onProcessData = this._register(new Emitter<{ id: number, event: IProcessDataEvent | string }>());\n\treadonly onProcessData = this._onProcessData.event;\n\tprivate readonly _onProcessReplay = this._register(new Emitter<{ id: number, event: IPtyHostProcessReplayEvent }>());\n\treadonly onProcessReplay = this._onProcessReplay.event;\n\tprivate readonly _onProcessExit = this._register(new Emitter<{ id: number, event: number | undefined }>());\n\treadonly onProcessExit = this._onProcessExit.event;\n\tprivate readonly _onProcessReady = this._register(new Emitter<{ id: number, event: { pid: number, cwd: string } }>());\n\treadonly onProcessReady = this._onProcessReady.event;\n\tprivate readonly _onProcessTitleChanged = this._register(new Emitter<{ id: number, event: string }>());\n\treadonly onProcessTitleChanged = this._onProcessTitleChanged.event;\n\tprivate readonly _onProcessShellTypeChanged = this._register(new Emitter<{ id: number, event: TerminalShellType }>());\n\treadonly onProcessShellTypeChanged = this._onProcessShellTypeChanged.event;\n\tprivate readonly _onProcessOverrideDimensions = this._register(new Emitter<{ id: number, event: ITerminalDimensionsOverride | undefined }>());\n\treadonly onProcessOverrideDimensions = this._onProcessOverrideDimensions.event;\n\tprivate readonly _onProcessResolvedShellLaunchConfig = this._register(new Emitter<{ id: number, event: IShellLaunchConfig }>());\n\treadonly onProcessResolvedShellLaunchConfig = this._onProcessResolvedShellLaunchConfig.event;\n\tprivate readonly _onProcessOrphanQuestion = this._register(new Emitter<{ id: number }>());\n\treadonly onProcessOrphanQuestion = this._onProcessOrphanQuestion.event;\n\n\tconstructor(\n\t\tprivate _lastPtyId: number,\n\t\tprivate readonly _logService: ILogService\n\t) {\n\t\tsuper();\n\n\t\tthis._register(toDisposable(() => {\n\t\t\tfor (const pty of this._ptys.values()) {\n\t\t\t\tpty.shutdown(true);\n\t\t\t}\n\t\t\tthis._ptys.clear();\n\t\t}));\n\t}\n\n\tasync shutdownAll(): Promise<void> {\n\t\tthis.dispose();\n\t}\n\n\tasync createProcess(\n\t\tshellLaunchConfig: IShellLaunchConfig,\n\t\tcwd: string,\n\t\tcols: number,\n\t\trows: number,\n\t\tenv: IProcessEnvironment,\n\t\texecutableEnv: IProcessEnvironment,\n\t\twindowsEnableConpty: boolean,\n\t\tshouldPersist: boolean,\n\t\tworkspaceId: string,\n\t\tworkspaceName: string\n\t): Promise<number> {\n\t\tif (shellLaunchConfig.attachPersistentProcess) {\n\t\t\tthrow new Error('Attempt to create a process when attach object was provided');\n\t\t}\n\t\tconst id = ++this._lastPtyId;\n\t\tconst process = new TerminalProcess(shellLaunchConfig, cwd, cols, rows, env, executableEnv, windowsEnableConpty, this._logService);\n\t\tprocess.onProcessData(event => this._onProcessData.fire({ id, event }));\n\t\tprocess.onProcessExit(event => this._onProcessExit.fire({ id, event }));\n\t\tif (process.onProcessOverrideDimensions) {\n\t\t\tprocess.onProcessOverrideDimensions(event => this._onProcessOverrideDimensions.fire({ id, event }));\n\t\t}\n\t\tif (process.onProcessResolvedShellLaunchConfig) {\n\t\t\tprocess.onProcessResolvedShellLaunchConfig(event => this._onProcessResolvedShellLaunchConfig.fire({ id, event }));\n\t\t}\n\t\tconst persistentProcess = new PersistentTerminalProcess(id, process, workspaceId, workspaceName, shouldPersist, cols, rows, this._logService, shellLaunchConfig.icon);\n\t\tprocess.onProcessExit(() => {\n\t\t\tpersistentProcess.dispose();\n\t\t\tthis._ptys.delete(id);\n\t\t});\n\t\tpersistentProcess.onProcessReplay(event => this._onProcessReplay.fire({ id, event }));\n\t\tpersistentProcess.onProcessReady(event => this._onProcessReady.fire({ id, event }));\n\t\tpersistentProcess.onProcessTitleChanged(event => this._onProcessTitleChanged.fire({ id, event }));\n\t\tpersistentProcess.onProcessShellTypeChanged(event => this._onProcessShellTypeChanged.fire({ id, event }));\n\t\tpersistentProcess.onProcessOrphanQuestion(() => this._onProcessOrphanQuestion.fire({ id }));\n\t\tthis._ptys.set(id, persistentProcess);\n\t\treturn id;\n\t}\n\n\tasync attachToProcess(id: number): Promise<void> {\n\t\ttry {\n\t\t\tthis._throwIfNoPty(id).attach();\n\t\t\tthis._logService.trace(`Persistent process reconnection \"${id}\"`);\n\t\t} catch (e) {\n\t\t\tthis._logService.trace(`Persistent process reconnection \"${id}\" failed`, e.message);\n\t\t}\n\t}\n\n\tasync detachFromProcess(id: number): Promise<void> {\n\t\tthis._throwIfNoPty(id).detach();\n\t}\n\n\tasync reduceConnectionGraceTime(): Promise<void> {\n\t\tfor (const pty of this._ptys.values()) {\n\t\t\tpty.reduceGraceTime();\n\t\t}\n\t}\n\n\tasync listProcesses(): Promise<IProcessDetails[]> {\n\t\tconst persistentProcesses = Array.from(this._ptys.entries()).filter(([_, pty]) => pty.shouldPersistTerminal);\n\n\t\tthis._logService.info(`Listing ${persistentProcesses.length} persistent terminals, ${this._ptys.size} total terminals`);\n\t\tconst promises = persistentProcesses.map(async ([id, terminalProcessData]) => this._buildProcessDetails(id, terminalProcessData));\n\t\tconst allTerminals = await Promise.all(promises);\n\t\treturn allTerminals.filter(entry => entry.isOrphan);\n\t}\n\n\tasync start(id: number): Promise<ITerminalLaunchError | undefined> {\n\t\treturn this._throwIfNoPty(id).start();\n\t}\n\tasync shutdown(id: number, immediate: boolean): Promise<void> {\n\t\t// Don't throw if the pty is already shutdown\n\t\treturn this._ptys.get(id)?.shutdown(immediate);\n\t}\n\tasync input(id: number, data: string): Promise<void> {\n\t\treturn this._throwIfNoPty(id).input(data);\n\t}\n\tasync processBinary(id: number, data: string): Promise<void> {\n\t\treturn this._throwIfNoPty(id).writeBinary(data);\n\t}\n\tasync resize(id: number, cols: number, rows: number): Promise<void> {\n\t\treturn this._throwIfNoPty(id).resize(cols, rows);\n\t}\n\tasync getInitialCwd(id: number): Promise<string> {\n\t\treturn this._throwIfNoPty(id).getInitialCwd();\n\t}\n\tasync getCwd(id: number): Promise<string> {\n\t\treturn this._throwIfNoPty(id).getCwd();\n\t}\n\tasync acknowledgeDataEvent(id: number, charCount: number): Promise<void> {\n\t\treturn this._throwIfNoPty(id).acknowledgeDataEvent(charCount);\n\t}\n\tasync getLatency(id: number): Promise<number> {\n\t\treturn 0;\n\t}\n\tasync orphanQuestionReply(id: number): Promise<void> {\n\t\treturn this._throwIfNoPty(id).orphanQuestionReply();\n\t}\n\n\tasync getDefaultSystemShell(osOverride: OperatingSystem = OS): Promise<string> {\n\t\treturn getSystemShell(osOverride, process.env);\n\t}\n\n\tasync getShellEnvironment(): Promise<IProcessEnvironment> {\n\t\treturn { ...process.env };\n\t}\n\n\tasync setTerminalLayoutInfo(args: ISetTerminalLayoutInfoArgs): Promise<void> {\n\t\tthis._workspaceLayoutInfos.set(args.workspaceId, args);\n\t}\n\n\tasync getTerminalLayoutInfo(args: IGetTerminalLayoutInfoArgs): Promise<ITerminalsLayoutInfo | undefined> {\n\t\tconst layout = this._workspaceLayoutInfos.get(args.workspaceId);\n\t\tif (layout) {\n\t\t\tconst expandedTabs = await Promise.all(layout.tabs.map(async tab => this._expandTerminalTab(tab)));\n\t\t\tconst filtered = expandedTabs.filter(t => t.terminals.length > 0);\n\t\t\treturn {\n\t\t\t\ttabs: filtered\n\t\t\t};\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate async _expandTerminalTab(tab: ITerminalTabLayoutInfoById): Promise<ITerminalTabLayoutInfoDto> {\n\t\tconst expandedTerminals = (await Promise.all(tab.terminals.map(t => this._expandTerminalInstance(t))));\n\t\tconst filtered = expandedTerminals.filter(term => term.terminal !== null) as IRawTerminalInstanceLayoutInfo<IProcessDetails>[];\n\t\treturn {\n\t\t\tisActive: tab.isActive,\n\t\t\tactivePersistentProcessId: tab.activePersistentProcessId,\n\t\t\tterminals: filtered\n\t\t};\n\t}\n\n\tprivate async _expandTerminalInstance(t: ITerminalInstanceLayoutInfoById): Promise<IRawTerminalInstanceLayoutInfo<IProcessDetails | null>> {\n\t\ttry {\n\t\t\tconst persistentProcess = this._throwIfNoPty(t.terminal);\n\t\t\tconst processDetails = persistentProcess && await this._buildProcessDetails(t.terminal, persistentProcess);\n\t\t\treturn {\n\t\t\t\tterminal: processDetails ?? null,\n\t\t\t\trelativeSize: t.relativeSize\n\t\t\t};\n\t\t} catch (e) {\n\t\t\tthis._logService.trace(`Couldn't get layout info, a terminal was probably disconnected`, e.message);\n\t\t\t// this will be filtered out and not reconnected\n\t\t\treturn {\n\t\t\t\tterminal: null,\n\t\t\t\trelativeSize: t.relativeSize\n\t\t\t};\n\t\t}\n\t}\n\n\tprivate async _buildProcessDetails(id: number, persistentProcess: PersistentTerminalProcess): Promise<IProcessDetails> {\n\t\tconst [cwd, isOrphan] = await Promise.all([persistentProcess.getCwd(), persistentProcess.isOrphaned()]);\n\t\treturn {\n\t\t\tid,\n\t\t\ttitle: persistentProcess.title,\n\t\t\tpid: persistentProcess.pid,\n\t\t\tworkspaceId: persistentProcess.workspaceId,\n\t\t\tworkspaceName: persistentProcess.workspaceName,\n\t\t\tcwd,\n\t\t\tisOrphan,\n\t\t\ticon: persistentProcess.icon\n\t\t};\n\t}\n\n\tprivate _throwIfNoPty(id: number): PersistentTerminalProcess {\n\t\tconst pty = this._ptys.get(id);\n\t\tif (!pty) {\n\t\t\tthrow new Error(`Could not find pty with id \"${id}\"`);\n\t\t}\n\t\treturn pty;\n\t}\n}\n\nexport class PersistentTerminalProcess extends Disposable {\n\n\tprivate readonly _bufferer: TerminalDataBufferer;\n\n\tprivate readonly _pendingCommands = new Map<number, { resolve: (data: any) => void; reject: (err: any) => void; }>();\n\n\tprivate readonly _recorder: TerminalRecorder;\n\tprivate _isStarted: boolean = false;\n\n\tprivate _orphanQuestionBarrier: AutoOpenBarrier | null;\n\tprivate _orphanQuestionReplyTime: number;\n\tprivate _orphanRequestQueue = new Queue<boolean>();\n\tprivate _disconnectRunner1: RunOnceScheduler;\n\tprivate _disconnectRunner2: RunOnceScheduler;\n\n\tprivate readonly _onProcessReplay = this._register(new Emitter<IPtyHostProcessReplayEvent>());\n\treadonly onProcessReplay = this._onProcessReplay.event;\n\tprivate readonly _onProcessReady = this._register(new Emitter<{ pid: number, cwd: string }>());\n\treadonly onProcessReady = this._onProcessReady.event;\n\tprivate readonly _onProcessTitleChanged = this._register(new Emitter<string>());\n\treadonly onProcessTitleChanged = this._onProcessTitleChanged.event;\n\tprivate readonly _onProcessShellTypeChanged = this._register(new Emitter<TerminalShellType>());\n\treadonly onProcessShellTypeChanged = this._onProcessShellTypeChanged.event;\n\tprivate readonly _onProcessOverrideDimensions = this._register(new Emitter<ITerminalDimensionsOverride | undefined>());\n\treadonly onProcessOverrideDimensions = this._onProcessOverrideDimensions.event;\n\tprivate readonly _onProcessData = this._register(new Emitter<string>());\n\treadonly onProcessData = this._onProcessData.event;\n\tprivate readonly _onProcessOrphanQuestion = this._register(new Emitter<void>());\n\treadonly onProcessOrphanQuestion = this._onProcessOrphanQuestion.event;\n\n\tprivate _inReplay = false;\n\n\tprivate _pid = -1;\n\tprivate _cwd = '';\n\n\tget pid(): number { return this._pid; }\n\tget title(): string { return this._terminalProcess.currentTitle; }\n\tget icon(): string | undefined { return this._icon; }\n\n\tconstructor(\n\t\tprivate _persistentProcessId: number,\n\t\tprivate readonly _terminalProcess: TerminalProcess,\n\t\tpublic readonly workspaceId: string,\n\t\tpublic readonly workspaceName: string,\n\t\tpublic readonly shouldPersistTerminal: boolean,\n\t\tcols: number, rows: number,\n\t\tprivate readonly _logService: ILogService,\n\t\tprivate readonly _icon?: string\n\t) {\n\t\tsuper();\n\t\tthis._recorder = new TerminalRecorder(cols, rows);\n\t\tthis._orphanQuestionBarrier = null;\n\t\tthis._orphanQuestionReplyTime = 0;\n\t\tthis._disconnectRunner1 = this._register(new RunOnceScheduler(() => {\n\t\t\tthis._logService.info(`Persistent process \"${this._persistentProcessId}\": The reconnection grace time of ${printTime(LocalReconnectConstants.ReconnectionGraceTime)} has expired, shutting down pid \"${this._pid}\"`);\n\t\t\tthis.shutdown(true);\n\t\t}, LocalReconnectConstants.ReconnectionGraceTime));\n\t\tthis._disconnectRunner2 = this._register(new RunOnceScheduler(() => {\n\t\t\tthis._logService.info(`Persistent process \"${this._persistentProcessId}\": The short reconnection grace time of ${printTime(LocalReconnectConstants.ReconnectionShortGraceTime)} has expired, shutting down pid ${this._pid}`);\n\t\t\tthis.shutdown(true);\n\t\t}, LocalReconnectConstants.ReconnectionShortGraceTime));\n\n\t\tthis._register(this._terminalProcess.onProcessReady(e => {\n\t\t\tthis._pid = e.pid;\n\t\t\tthis._cwd = e.cwd;\n\t\t\tthis._onProcessReady.fire(e);\n\t\t}));\n\t\tthis._register(this._terminalProcess.onProcessTitleChanged(e => this._onProcessTitleChanged.fire(e)));\n\t\tthis._register(this._terminalProcess.onProcessShellTypeChanged(e => this._onProcessShellTypeChanged.fire(e)));\n\n\t\t// Data buffering to reduce the amount of messages going to the renderer\n\t\tthis._bufferer = new TerminalDataBufferer((_, data) => this._onProcessData.fire(data));\n\t\tthis._register(this._bufferer.startBuffering(this._persistentProcessId, this._terminalProcess.onProcessData));\n\t\tthis._register(this._terminalProcess.onProcessExit(() => this._bufferer.stopBuffering(this._persistentProcessId)));\n\n\t\t// Data recording for reconnect\n\t\tthis._register(this.onProcessData(e => this._recorder.recordData(e)));\n\t}\n\n\tattach(): void {\n\t\tthis._disconnectRunner1.cancel();\n\t}\n\n\tasync detach(): Promise<void> {\n\t\tif (this.shouldPersistTerminal) {\n\t\t\tthis._disconnectRunner1.schedule();\n\t\t} else {\n\t\t\tthis.shutdown(true);\n\t\t}\n\t}\n\n\tasync start(): Promise<ITerminalLaunchError | undefined> {\n\t\tif (!this._isStarted) {\n\t\t\tconst result = await this._terminalProcess.start();\n\t\t\tif (result) {\n\t\t\t\t// it's a terminal launch error\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tthis._isStarted = true;\n\t\t} else {\n\t\t\tthis._onProcessReady.fire({ pid: this._pid, cwd: this._cwd });\n\t\t\tthis._onProcessTitleChanged.fire(this._terminalProcess.currentTitle);\n\t\t\tthis._onProcessShellTypeChanged.fire(this._terminalProcess.shellType);\n\t\t\tthis.triggerReplay();\n\t\t}\n\t\treturn undefined;\n\t}\n\tshutdown(immediate: boolean): void {\n\t\treturn this._terminalProcess.shutdown(immediate);\n\t}\n\tinput(data: string): void {\n\t\tif (this._inReplay) {\n\t\t\treturn;\n\t\t}\n\t\treturn this._terminalProcess.input(data);\n\t}\n\twriteBinary(data: string): Promise<void> {\n\t\treturn this._terminalProcess.processBinary(data);\n\t}\n\tresize(cols: number, rows: number): void {\n\t\tif (this._inReplay) {\n\t\t\treturn;\n\t\t}\n\t\tthis._recorder.recordResize(cols, rows);\n\n\t\t// Buffered events should flush when a resize occurs\n\t\tthis._bufferer.flushBuffer(this._persistentProcessId);\n\t\treturn this._terminalProcess.resize(cols, rows);\n\t}\n\tacknowledgeDataEvent(charCount: number): void {\n\t\tif (this._inReplay) {\n\t\t\treturn;\n\t\t}\n\t\treturn this._terminalProcess.acknowledgeDataEvent(charCount);\n\t}\n\tgetInitialCwd(): Promise<string> {\n\t\treturn this._terminalProcess.getInitialCwd();\n\t}\n\tgetCwd(): Promise<string> {\n\t\treturn this._terminalProcess.getCwd();\n\t}\n\tgetLatency(): Promise<number> {\n\t\treturn this._terminalProcess.getLatency();\n\t}\n\n\ttriggerReplay(): void {\n\t\tconst ev = this._recorder.generateReplayEvent();\n\t\tlet dataLength = 0;\n\t\tfor (const e of ev.events) {\n\t\t\tdataLength += e.data.length;\n\t\t}\n\n\t\tthis._logService.info(`Persistent process \"${this._persistentProcessId}\": Replaying ${dataLength} chars and ${ev.events.length} size events`);\n\t\tthis._onProcessReplay.fire(ev);\n\t\tthis._terminalProcess.clearUnacknowledgedChars();\n\t}\n\n\tsendCommandResult(reqId: number, isError: boolean, serializedPayload: any): void {\n\t\tconst data = this._pendingCommands.get(reqId);\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\t\tthis._pendingCommands.delete(reqId);\n\t}\n\n\torphanQuestionReply(): void {\n\t\tthis._orphanQuestionReplyTime = Date.now();\n\t\tif (this._orphanQuestionBarrier) {\n\t\t\tconst barrier = this._orphanQuestionBarrier;\n\t\t\tthis._orphanQuestionBarrier = null;\n\t\t\tbarrier.open();\n\t\t}\n\t}\n\n\treduceGraceTime(): void {\n\t\tif (this._disconnectRunner2.isScheduled()) {\n\t\t\t// we are disconnected and already running the short reconnection timer\n\t\t\treturn;\n\t\t}\n\t\tif (this._disconnectRunner1.isScheduled()) {\n\t\t\t// we are disconnected and running the long reconnection timer\n\t\t\tthis._disconnectRunner2.schedule();\n\t\t}\n\t}\n\n\tasync isOrphaned(): Promise<boolean> {\n\t\treturn await this._orphanRequestQueue.queue(async () => this._isOrphaned());\n\t}\n\n\tprivate async _isOrphaned(): Promise<boolean> {\n\t\t// The process is already known to be orphaned\n\t\tif (this._disconnectRunner1.isScheduled() || this._disconnectRunner2.isScheduled()) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Ask whether the renderer(s) whether the process is orphaned and await the reply\n\t\tif (!this._orphanQuestionBarrier) {\n\t\t\t// the barrier opens after 4 seconds with or without a reply\n\t\t\tthis._orphanQuestionBarrier = new AutoOpenBarrier(4000);\n\t\t\tthis._orphanQuestionReplyTime = 0;\n\t\t\tthis._onProcessOrphanQuestion.fire();\n\t\t}\n\n\t\tawait this._orphanQuestionBarrier.wait();\n\t\treturn (Date.now() - this._orphanQuestionReplyTime > 500);\n\t}\n}\n\nfunction printTime(ms: number): string {\n\tlet h = 0;\n\tlet m = 0;\n\tlet s = 0;\n\tif (ms >= 1000) {\n\t\ts = Math.floor(ms / 1000);\n\t\tms -= s * 1000;\n\t}\n\tif (s >= 60) {\n\t\tm = Math.floor(s / 60);\n\t\ts -= m * 60;\n\t}\n\tif (m >= 60) {\n\t\th = Math.floor(m / 60);\n\t\tm -= h * 60;\n\t}\n\tconst _h = h ? `${h}h` : ``;\n\tconst _m = m ? `${m}m` : ``;\n\tconst _s = s ? `${s}s` : ``;\n\tconst _ms = ms ? `${ms}ms` : ``;\n\treturn `${_h}${_m}${_s}${_ms}`;\n}\n"]}