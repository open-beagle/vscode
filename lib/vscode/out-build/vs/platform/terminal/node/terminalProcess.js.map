{"version":3,"sources":["vs/platform/terminal/node/terminalProcess.ts"],"names":[],"mappings":"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","file":"terminalProcess.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as path from 'vs/base/common/path';\nimport type * as pty from 'node-pty';\nimport * as fs from 'fs';\nimport * as os from 'os';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IShellLaunchConfig, ITerminalLaunchError, FlowControlConstants, ITerminalChildProcess, ITerminalDimensionsOverride, TerminalShellType } from 'vs/platform/terminal/common/terminal';\nimport { exec } from 'child_process';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { findExecutable, getWindowsBuildNumber } from 'vs/platform/terminal/node/terminalEnvironment';\nimport { URI } from 'vs/base/common/uri';\nimport { localize } from 'vs/nls';\nimport { WindowsShellHelper } from 'vs/platform/terminal/node/windowsShellHelper';\nimport { IProcessEnvironment, isLinux, isMacintosh, isWindows } from 'vs/base/common/platform';\nimport { timeout } from 'vs/base/common/async';\n\n// Writing large amounts of data can be corrupted for some reason, after looking into this is\n// appears to be a race condition around writing to the FD which may be based on how powerful the\n// hardware is. The workaround for this is to space out when large amounts of data is being written\n// to the terminal. See https://github.com/microsoft/vscode/issues/38137\nconst WRITE_MAX_CHUNK_SIZE = 50;\nconst WRITE_INTERVAL_MS = 5;\n\nconst enum ShutdownConstants {\n\t/**\n\t * The amount of ms that must pass between data events after exit is queued before the actual\n\t * kill call is triggered. This data flush mechanism works around an [issue in node-pty][1]\n\t * where not all data is flushed which causes problems for task problem matchers. Additionally\n\t * on Windows under conpty, killing a process while data is being output will cause the [conhost\n\t * flush to hang the pty host][2] because [conhost should be hosted on another thread][3].\n\t *\n\t * [1]: https://github.com/Tyriar/node-pty/issues/72\n\t * [2]: https://github.com/microsoft/vscode/issues/71966\n\t * [3]: https://github.com/microsoft/node-pty/pull/415\n\t */\n\tDataFlushTimeout = 250,\n\t/**\n\t * The maximum ms to allow after dispose is called because forcefully killing the process.\n\t */\n\tMaximumShutdownTime = 5000\n}\n\nconst enum Constants {\n\t/**\n\t * The minimum duration between kill and spawn calls on Windows/conpty as a mitigation for a\n\t * hang issue. See:\n\t * - https://github.com/microsoft/vscode/issues/71966\n\t * - https://github.com/microsoft/vscode/issues/117956\n\t * - https://github.com/microsoft/vscode/issues/121336\n\t */\n\tKillSpawnThrottleInterval = 250,\n\t/**\n\t * The amount of time to wait when a call is throttles beyond the exact amount, this is used to\n\t * try prevent early timeouts causing a kill/spawn call to happen at double the regular\n\t * interval.\n\t */\n\tKillSpawnSpacingDuration = 50,\n}\n\ninterface IWriteObject {\n\tdata: string,\n\tisBinary: boolean\n}\n\nexport class TerminalProcess extends Disposable implements ITerminalChildProcess {\n\treadonly id = 0;\n\treadonly shouldPersist = false;\n\n\tprivate static _lastKillOrStart = 0;\n\n\tprivate _exitCode: number | undefined;\n\tprivate _exitMessage: string | undefined;\n\tprivate _closeTimeout: any;\n\tprivate _ptyProcess: pty.IPty | undefined;\n\tprivate _currentTitle: string = '';\n\tprivate _processStartupComplete: Promise<void> | undefined;\n\tprivate _isDisposed: boolean = false;\n\tprivate _windowsShellHelper: WindowsShellHelper | undefined;\n\tprivate _titleInterval: NodeJS.Timer | null = null;\n\tprivate _writeQueue: IWriteObject[] = [];\n\tprivate _writeTimeout: NodeJS.Timeout | undefined;\n\tprivate _delayedResizer: DelayedResizer | undefined;\n\tprivate readonly _initialCwd: string;\n\tprivate readonly _ptyOptions: pty.IPtyForkOptions | pty.IWindowsPtyForkOptions;\n\n\tprivate _isPtyPaused: boolean = false;\n\tprivate _unacknowledgedCharCount: number = 0;\n\tpublic get exitMessage(): string | undefined { return this._exitMessage; }\n\n\tpublic get currentTitle(): string { return this._windowsShellHelper?.shellTitle || this._currentTitle; }\n\tpublic get shellType(): TerminalShellType { return this._windowsShellHelper ? this._windowsShellHelper.shellType : undefined; }\n\n\tprivate readonly _onProcessData = this._register(new Emitter<string>());\n\tpublic get onProcessData(): Event<string> { return this._onProcessData.event; }\n\tprivate readonly _onProcessExit = this._register(new Emitter<number>());\n\tpublic get onProcessExit(): Event<number> { return this._onProcessExit.event; }\n\tprivate readonly _onProcessReady = this._register(new Emitter<{ pid: number, cwd: string }>());\n\tpublic get onProcessReady(): Event<{ pid: number, cwd: string }> { return this._onProcessReady.event; }\n\tprivate readonly _onProcessTitleChanged = this._register(new Emitter<string>());\n\tpublic get onProcessTitleChanged(): Event<string> { return this._onProcessTitleChanged.event; }\n\tprivate readonly _onProcessShellTypeChanged = this._register(new Emitter<TerminalShellType>());\n\tpublic readonly onProcessShellTypeChanged = this._onProcessShellTypeChanged.event;\n\n\tconstructor(\n\t\tprivate readonly _shellLaunchConfig: IShellLaunchConfig,\n\t\tcwd: string,\n\t\tcols: number,\n\t\trows: number,\n\t\tenv: IProcessEnvironment,\n\t\t/**\n\t\t * environment used for `findExecutable`\n\t\t */\n\t\tprivate readonly _executableEnv: IProcessEnvironment,\n\t\twindowsEnableConpty: boolean,\n\t\t@ILogService private readonly _logService: ILogService\n\t) {\n\t\tsuper();\n\t\tlet name: string;\n\t\tif (isWindows) {\n\t\t\tname = path.basename(this._shellLaunchConfig.executable || '');\n\t\t} else {\n\t\t\t// Using 'xterm-256color' here helps ensure that the majority of Linux distributions will use a\n\t\t\t// color prompt as defined in the default ~/.bashrc file.\n\t\t\tname = 'xterm-256color';\n\t\t}\n\t\tthis._initialCwd = cwd;\n\t\tconst useConpty = windowsEnableConpty && process.platform === 'win32' && getWindowsBuildNumber() >= 18309;\n\t\tthis._ptyOptions = {\n\t\t\tname,\n\t\t\tcwd,\n\t\t\t// TODO: When node-pty is updated this cast can be removed\n\t\t\tenv: env as { [key: string]: string; },\n\t\t\tcols,\n\t\t\trows,\n\t\t\tuseConpty,\n\t\t\t// This option will force conpty to not redraw the whole viewport on launch\n\t\t\tconptyInheritCursor: useConpty && !!_shellLaunchConfig.initialText\n\t\t};\n\t\t// Delay resizes to avoid conpty not respecting very early resize calls\n\t\tif (isWindows) {\n\t\t\tif (useConpty && cols === 0 && rows === 0 && this._shellLaunchConfig.executable?.endsWith('Git\\\\bin\\\\bash.exe')) {\n\t\t\t\tthis._delayedResizer = new DelayedResizer();\n\t\t\t\tthis._register(this._delayedResizer.onTrigger(dimensions => {\n\t\t\t\t\tthis._delayedResizer?.dispose();\n\t\t\t\t\tthis._delayedResizer = undefined;\n\t\t\t\t\tif (dimensions.cols && dimensions.rows) {\n\t\t\t\t\t\tthis.resize(dimensions.cols, dimensions.rows);\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t}\n\t\t\t// WindowsShellHelper is used to fetch the process title and shell type\n\t\t\tthis.onProcessReady(e => {\n\t\t\t\tthis._windowsShellHelper = this._register(new WindowsShellHelper(e.pid));\n\t\t\t\tthis._register(this._windowsShellHelper.onShellTypeChanged(e => this._onProcessShellTypeChanged.fire(e)));\n\t\t\t\tthis._register(this._windowsShellHelper.onShellNameChanged(e => this._onProcessTitleChanged.fire(e)));\n\t\t\t});\n\t\t}\n\t}\n\tonProcessOverrideDimensions?: Event<ITerminalDimensionsOverride | undefined> | undefined;\n\tonProcessResolvedShellLaunchConfig?: Event<IShellLaunchConfig> | undefined;\n\n\tpublic async start(): Promise<ITerminalLaunchError | undefined> {\n\t\tconst results = await Promise.all([this._validateCwd(), this._validateExecutable()]);\n\t\tconst firstError = results.find(r => r !== undefined);\n\t\tif (firstError) {\n\t\t\treturn firstError;\n\t\t}\n\n\t\ttry {\n\t\t\tawait this.setupPtyProcess(this._shellLaunchConfig, this._ptyOptions);\n\t\t\treturn undefined;\n\t\t} catch (err) {\n\t\t\tthis._logService.trace('IPty#spawn native exception', err);\n\t\t\treturn { message: `A native exception occurred during launch (${err.message})` };\n\t\t}\n\t}\n\n\tprivate async _validateCwd(): Promise<undefined | ITerminalLaunchError> {\n\t\ttry {\n\t\t\tconst result = await fs.promises.stat(this._initialCwd);\n\t\t\tif (!result.isDirectory()) {\n\t\t\t\treturn { message: localize('launchFail.cwdNotDirectory', \"Starting directory (cwd) \\\"{0}\\\" is not a directory\", this._initialCwd.toString()) };\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tif (err?.code === 'ENOENT') {\n\t\t\t\treturn { message: localize('launchFail.cwdDoesNotExist', \"Starting directory (cwd) \\\"{0}\\\" does not exist\", this._initialCwd.toString()) };\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate async _validateExecutable(): Promise<undefined | ITerminalLaunchError> {\n\t\tconst slc = this._shellLaunchConfig;\n\t\tif (!slc.executable) {\n\t\t\tthrow new Error('IShellLaunchConfig.executable not set');\n\t\t}\n\t\ttry {\n\t\t\tconst result = await fs.promises.stat(slc.executable);\n\t\t\tif (!result.isFile() && !result.isSymbolicLink()) {\n\t\t\t\treturn { message: localize('launchFail.executableIsNotFileOrSymlink', \"Path to shell executable \\\"{0}\\\" is not a file of a symlink\", slc.executable) };\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tif (err?.code === 'ENOENT') {\n\t\t\t\t// The executable isn't an absolute path, try find it on the PATH or CWD\n\t\t\t\tlet cwd = slc.cwd instanceof URI ? slc.cwd.path : slc.cwd!;\n\t\t\t\tconst envPaths: string[] | undefined = (slc.env && slc.env.PATH) ? slc.env.PATH.split(path.delimiter) : undefined;\n\t\t\t\tconst executable = await findExecutable(slc.executable!, cwd, envPaths, this._executableEnv);\n\t\t\t\tif (!executable) {\n\t\t\t\t\treturn { message: localize('launchFail.executableDoesNotExist', \"Path to shell executable \\\"{0}\\\" does not exist\", slc.executable) };\n\t\t\t\t}\n\t\t\t\t// Set the executable explicitly here so that node-pty doesn't need to search the\n\t\t\t\t// $PATH too.\n\t\t\t\tslc.executable = executable;\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate async setupPtyProcess(shellLaunchConfig: IShellLaunchConfig, options: pty.IPtyForkOptions): Promise<void> {\n\t\tconst args = shellLaunchConfig.args || [];\n\t\tawait this._throttleKillSpawn();\n\t\tthis._logService.trace('IPty#spawn', shellLaunchConfig.executable, args, options);\n\t\tconst ptyProcess = (await import('node-pty')).spawn(shellLaunchConfig.executable!, args, options);\n\t\tthis._ptyProcess = ptyProcess;\n\t\tthis._processStartupComplete = new Promise<void>(c => {\n\t\t\tthis.onProcessReady(() => c());\n\t\t});\n\t\tptyProcess.onData(data => {\n\t\t\t// Handle flow control\n\t\t\tthis._unacknowledgedCharCount += data.length;\n\t\t\tif (!this._isPtyPaused && this._unacknowledgedCharCount > FlowControlConstants.HighWatermarkChars) {\n\t\t\t\tthis._logService.trace(`Flow control: Pause (${this._unacknowledgedCharCount} > ${FlowControlConstants.HighWatermarkChars})`);\n\t\t\t\tthis._isPtyPaused = true;\n\t\t\t\tptyProcess.pause();\n\t\t\t}\n\n\n\t\t\t// Refire the data event\n\t\t\tthis._onProcessData.fire(data);\n\t\t\tif (this._closeTimeout) {\n\t\t\t\tthis._queueProcessExit();\n\t\t\t}\n\t\t\tthis._windowsShellHelper?.checkShell();\n\t\t});\n\t\tptyProcess.onExit(e => {\n\t\t\tthis._exitCode = e.exitCode;\n\t\t\tthis._queueProcessExit();\n\t\t});\n\t\tthis._setupTitlePolling(ptyProcess);\n\t\tthis._sendProcessId(ptyProcess.pid);\n\t}\n\n\tpublic override dispose(): void {\n\t\tthis._isDisposed = true;\n\t\tif (this._titleInterval) {\n\t\t\tclearInterval(this._titleInterval);\n\t\t}\n\t\tthis._titleInterval = null;\n\t\tsuper.dispose();\n\t}\n\n\tprivate _setupTitlePolling(ptyProcess: pty.IPty) {\n\t\t// Send initial timeout async to give event listeners a chance to init\n\t\tsetTimeout(() => this._sendProcessTitle(ptyProcess), 0);\n\t\t// Setup polling for non-Windows, for Windows `process` doesn't change\n\t\tif (!isWindows) {\n\t\t\tthis._titleInterval = setInterval(() => {\n\t\t\t\tif (this._currentTitle !== ptyProcess.process) {\n\t\t\t\t\tthis._sendProcessTitle(ptyProcess);\n\t\t\t\t}\n\t\t\t}, 200);\n\t\t}\n\t}\n\n\t// Allow any trailing data events to be sent before the exit event is sent.\n\t// See https://github.com/Tyriar/node-pty/issues/72\n\tprivate _queueProcessExit() {\n\t\tif (this._closeTimeout) {\n\t\t\tclearTimeout(this._closeTimeout);\n\t\t}\n\t\tthis._closeTimeout = setTimeout(() => {\n\t\t\tthis._closeTimeout = undefined;\n\t\t\tthis._kill();\n\t\t}, ShutdownConstants.DataFlushTimeout);\n\t}\n\n\tprivate async _kill(): Promise<void> {\n\t\t// Wait to kill to process until the start up code has run. This prevents us from firing a process exit before a\n\t\t// process start.\n\t\tawait this._processStartupComplete;\n\t\tif (this._isDisposed) {\n\t\t\treturn;\n\t\t}\n\t\t// Attempt to kill the pty, it may have already been killed at this\n\t\t// point but we want to make sure\n\t\ttry {\n\t\t\tif (this._ptyProcess) {\n\t\t\t\tawait this._throttleKillSpawn();\n\t\t\t\tthis._logService.trace('IPty#kill');\n\t\t\t\tthis._ptyProcess.kill();\n\t\t\t}\n\t\t} catch (ex) {\n\t\t\t// Swallow, the pty has already been killed\n\t\t}\n\t\tthis._onProcessExit.fire(this._exitCode || 0);\n\t\tthis.dispose();\n\t}\n\n\tprivate async _throttleKillSpawn(): Promise<void> {\n\t\t// Only throttle on Windows/conpty\n\t\tif (!isWindows || !('useConpty' in this._ptyOptions) || !this._ptyOptions.useConpty) {\n\t\t\treturn;\n\t\t}\n\t\t// Use a loop to ensure multiple calls in a single interval space out\n\t\twhile (Date.now() - TerminalProcess._lastKillOrStart < Constants.KillSpawnThrottleInterval) {\n\t\t\tthis._logService.trace('Throttling kill/spawn call');\n\t\t\tawait timeout(Constants.KillSpawnThrottleInterval - (Date.now() - TerminalProcess._lastKillOrStart) + Constants.KillSpawnSpacingDuration);\n\t\t}\n\t\tTerminalProcess._lastKillOrStart = Date.now();\n\t}\n\n\tprivate _sendProcessId(pid: number) {\n\t\tthis._onProcessReady.fire({ pid, cwd: this._initialCwd });\n\t}\n\n\tprivate _sendProcessTitle(ptyProcess: pty.IPty): void {\n\t\tif (this._isDisposed) {\n\t\t\treturn;\n\t\t}\n\t\tthis._currentTitle = ptyProcess.process;\n\t\tthis._onProcessTitleChanged.fire(this._currentTitle);\n\t}\n\n\tpublic shutdown(immediate: boolean): void {\n\t\t// don't force immediate disposal of the terminal processes on Windows as an additional\n\t\t// mitigation for https://github.com/microsoft/vscode/issues/71966 which causes the pty host\n\t\t// to become unresponsive, disconnecting all terminals across all windows.\n\t\tif (immediate && !isWindows) {\n\t\t\tthis._kill();\n\t\t} else {\n\t\t\tif (!this._closeTimeout && !this._isDisposed) {\n\t\t\t\tthis._queueProcessExit();\n\t\t\t\t// Allow a maximum amount of time for the process to exit, otherwise force kill it\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tif (this._closeTimeout && !this._isDisposed) {\n\t\t\t\t\t\tthis._closeTimeout = undefined;\n\t\t\t\t\t\tthis._kill();\n\t\t\t\t\t}\n\t\t\t\t}, ShutdownConstants.MaximumShutdownTime);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic input(data: string, isBinary?: boolean): void {\n\t\tif (this._isDisposed || !this._ptyProcess) {\n\t\t\treturn;\n\t\t}\n\t\tfor (let i = 0; i <= Math.floor(data.length / WRITE_MAX_CHUNK_SIZE); i++) {\n\t\t\tconst obj = {\n\t\t\t\tisBinary: isBinary || false,\n\t\t\t\tdata: data.substr(i * WRITE_MAX_CHUNK_SIZE, WRITE_MAX_CHUNK_SIZE)\n\t\t\t};\n\t\t\tthis._writeQueue.push(obj);\n\t\t}\n\t\tthis._startWrite();\n\t}\n\n\tpublic async processBinary(data: string): Promise<void> {\n\t\tthis.input(data, true);\n\t}\n\n\tprivate _startWrite(): void {\n\t\t// Don't write if it's already queued of is there is nothing to write\n\t\tif (this._writeTimeout !== undefined || this._writeQueue.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._doWrite();\n\n\t\t// Don't queue more writes if the queue is empty\n\t\tif (this._writeQueue.length === 0) {\n\t\t\tthis._writeTimeout = undefined;\n\t\t\treturn;\n\t\t}\n\n\t\t// Queue the next write\n\t\tthis._writeTimeout = setTimeout(() => {\n\t\t\tthis._writeTimeout = undefined;\n\t\t\tthis._startWrite();\n\t\t}, WRITE_INTERVAL_MS);\n\t}\n\n\tprivate _doWrite(): void {\n\t\tconst object = this._writeQueue.shift()!;\n\t\tif (object.isBinary) {\n\t\t\tthis._ptyProcess!.write(Buffer.from(object.data, 'binary') as any);\n\t\t} else {\n\t\t\tthis._ptyProcess!.write(object.data);\n\t\t}\n\t}\n\n\tpublic resize(cols: number, rows: number): void {\n\t\tif (this._isDisposed) {\n\t\t\treturn;\n\t\t}\n\t\tif (typeof cols !== 'number' || typeof rows !== 'number' || isNaN(cols) || isNaN(rows)) {\n\t\t\treturn;\n\t\t}\n\t\t// Ensure that cols and rows are always >= 1, this prevents a native\n\t\t// exception in winpty.\n\t\tif (this._ptyProcess) {\n\t\t\tcols = Math.max(cols, 1);\n\t\t\trows = Math.max(rows, 1);\n\n\t\t\t// Delay resize if needed\n\t\t\tif (this._delayedResizer) {\n\t\t\t\tthis._delayedResizer.cols = cols;\n\t\t\t\tthis._delayedResizer.rows = rows;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._logService.trace('IPty#resize', cols, rows);\n\t\t\ttry {\n\t\t\t\tthis._ptyProcess.resize(cols, rows);\n\t\t\t} catch (e) {\n\t\t\t\t// Swallow error if the pty has already exited\n\t\t\t\tthis._logService.trace('IPty#resize exception ' + e.message);\n\t\t\t\tif (this._exitCode !== undefined && e.message !== 'ioctl(2) failed, EBADF') {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic acknowledgeDataEvent(charCount: number): void {\n\t\t// Prevent lower than 0 to heal from errors\n\t\tthis._unacknowledgedCharCount = Math.max(this._unacknowledgedCharCount - charCount, 0);\n\t\tthis._logService.trace(`Flow control: Ack ${charCount} chars (unacknowledged: ${this._unacknowledgedCharCount})`);\n\t\tif (this._isPtyPaused && this._unacknowledgedCharCount < FlowControlConstants.LowWatermarkChars) {\n\t\t\tthis._logService.trace(`Flow control: Resume (${this._unacknowledgedCharCount} < ${FlowControlConstants.LowWatermarkChars})`);\n\t\t\tthis._ptyProcess?.resume();\n\t\t\tthis._isPtyPaused = false;\n\t\t}\n\t}\n\n\tpublic clearUnacknowledgedChars(): void {\n\t\tthis._unacknowledgedCharCount = 0;\n\t\tthis._logService.trace(`Flow control: Cleared all unacknowledged chars, forcing resume`);\n\t\tif (this._isPtyPaused) {\n\t\t\tthis._ptyProcess?.resume();\n\t\t\tthis._isPtyPaused = false;\n\t\t}\n\t}\n\n\tpublic getInitialCwd(): Promise<string> {\n\t\treturn Promise.resolve(this._initialCwd);\n\t}\n\n\tpublic getCwd(): Promise<string> {\n\t\tif (isMacintosh) {\n\t\t\t// Disable cwd lookup on macOS Big Sur due to spawn blocking thread (darwin v20 is macOS\n\t\t\t// Big Sur) https://github.com/Microsoft/vscode/issues/105446\n\t\t\tconst osRelease = os.release().split('.');\n\t\t\tif (osRelease.length > 0 && parseInt(osRelease[0]) < 20) {\n\t\t\t\treturn new Promise<string>(resolve => {\n\t\t\t\t\tif (!this._ptyProcess) {\n\t\t\t\t\t\tresolve(this._initialCwd);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tthis._logService.trace('IPty#pid');\n\t\t\t\t\texec('lsof -OPln -p ' + this._ptyProcess.pid + ' | grep cwd', (error, stdout, stderr) => {\n\t\t\t\t\t\tif (!error && stdout !== '') {\n\t\t\t\t\t\t\tresolve(stdout.substring(stdout.indexOf('/'), stdout.length - 1));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._logService.error('lsof did not run successfully, it may not be on the $PATH?', error, stdout, stderr);\n\t\t\t\t\t\t\tresolve(this._initialCwd);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (isLinux) {\n\t\t\treturn new Promise<string>(resolve => {\n\t\t\t\tif (!this._ptyProcess) {\n\t\t\t\t\tresolve(this._initialCwd);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis._logService.trace('IPty#pid');\n\t\t\t\tfs.readlink('/proc/' + this._ptyProcess.pid + '/cwd', (err, linkedstr) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tresolve(this._initialCwd);\n\t\t\t\t\t}\n\t\t\t\t\tresolve(linkedstr);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\treturn new Promise<string>(resolve => {\n\t\t\tresolve(this._initialCwd);\n\t\t});\n\t}\n\n\tpublic getLatency(): Promise<number> {\n\t\treturn Promise.resolve(0);\n\t}\n}\n\n/**\n * Tracks the latest resize event to be trigger at a later point.\n */\nclass DelayedResizer extends Disposable {\n\tpublic rows: number | undefined;\n\tpublic cols: number | undefined;\n\tprivate _timeout: NodeJS.Timeout;\n\n\tprivate readonly _onTrigger = this._register(new Emitter<{ rows?: number, cols?: number }>());\n\tpublic get onTrigger(): Event<{ rows?: number, cols?: number }> { return this._onTrigger.event; }\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis._timeout = setTimeout(() => {\n\t\t\tthis._onTrigger.fire({ rows: this.rows, cols: this.cols });\n\t\t}, 1000);\n\t\tthis._register({\n\t\t\tdispose: () => {\n\t\t\t\tclearTimeout(this._timeout);\n\t\t\t}\n\t\t});\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\t\tclearTimeout(this._timeout);\n\t}\n}\n"]}