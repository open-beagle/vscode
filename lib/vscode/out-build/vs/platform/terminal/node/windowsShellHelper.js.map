{"version":3,"file":"windowsShellHelper.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/terminal/node/windowsShellHelper.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;IAiBhG,MAAM,iBAAiB,GAAG;QACzB,SAAS;QACT,gBAAgB;QAChB,UAAU;QACV,UAAU;QACV,SAAS;QACT,YAAY;QACZ,gBAAgB;QAChB,UAAU;QACV,YAAY;QACZ,iBAAiB;QACjB,aAAa;KACb,CAAC;IAEF,IAAI,kBAAiD,CAAC;IAEtD,MAAa,kBAAmB,SAAQ,sBAAU;QAYjD,YACS,cAAsB;YAE9B,KAAK,EAAE,CAAC;YAFA,mBAAc,GAAd,cAAc,CAAQ;YARvB,gBAAW,GAAW,EAAE,CAAC;YAEhB,wBAAmB,GAAG,IAAI,eAAO,EAAU,CAAC;YAE5C,wBAAmB,GAAG,IAAI,eAAO,EAAqB,CAAC;YAQvE,IAAI,CAAC,oBAAS,EAAE;gBACf,MAAM,IAAI,KAAK,CAAC,gDAAgD,mBAAQ,EAAE,CAAC,CAAC;aAC5E;YAED,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;YAEzB,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAC9B,CAAC;QApBD,IAAW,SAAS,KAAoC,OAAO,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;QAEjF,IAAW,UAAU,KAAa,OAAO,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;QAE5D,IAAW,kBAAkB,KAAoB,OAAO,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAC;QAEzF,IAAW,kBAAkB,KAA+B,OAAO,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAC;QAgB5F,KAAK,CAAC,qBAAqB;YAClC,IAAI,IAAI,CAAC,WAAW,EAAE;gBACrB,OAAO;aACP;YACD,IAAI,CAAC,UAAU,EAAE,CAAC;QACnB,CAAC;QAGD,KAAK,CAAC,UAAU;YACf,IAAI,oBAAS,EAAE;gBACd,sEAAsE;gBACtE,qEAAqE;gBACrE,oDAAoD;gBACpD,MAAM,CAAA,GAAA,eAAO,CAAA,CAAC,GAAG,CAAC,CAAC;gBACnB,IAAI,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;oBAChC,MAAM,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;oBACtC,IAAI,IAAI,KAAK,IAAI,CAAC,UAAU,EAAE;wBAC7B,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wBACpC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBACrC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;wBACvB,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;qBACzB;gBACF,CAAC,CAAC,CAAC;aACH;QACF,CAAC;QAEO,YAAY,CAAC,IAAS;YAC7B,IAAI,CAAC,IAAI,EAAE;gBACV,OAAO,EAAE,CAAC;aACV;YACD,IAAI,iBAAiB,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;gBAChD,OAAO,IAAI,CAAC,IAAI,CAAC;aACjB;YACD,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;gBACjD,OAAO,IAAI,CAAC,IAAI,CAAC;aACjB;YACD,IAAI,cAAc,GAAG,CAAC,CAAC;YACvB,OAAO,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,cAAc,EAAE,EAAE;gBAC/D,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;gBAC5C,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,KAAK,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;oBACnD,MAAM;iBACN;gBACD,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,aAAa,EAAE;oBAC7C,MAAM;iBACN;aACD;YACD,IAAI,cAAc,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;gBAC3C,OAAO,IAAI,CAAC,IAAI,CAAC;aACjB;YACD,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC;QACzD,CAAC;QAEe,OAAO;YACtB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YACxB,KAAK,CAAC,OAAO,EAAE,CAAC;QACjB,CAAC;QAED;;WAEG;QACI,YAAY;YAClB,IAAI,IAAI,CAAC,WAAW,EAAE;gBACrB,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;aAC3B;YACD,oEAAoE;YACpE,IAAI,IAAI,CAAC,eAAe,EAAE;gBACzB,OAAO,IAAI,CAAC,eAAe,CAAC;aAC5B;YACD,IAAI,CAAC,eAAe,GAAG,IAAI,OAAO,CAAS,KAAK,EAAC,OAAO,EAAC,EAAE;gBAC1D,IAAI,CAAC,kBAAkB,EAAE;oBACxB,kBAAkB,GAAG,sDAAa,sBAAsB,2BAAC,CAAC;iBAC1D;gBACD,kBAAkB,CAAC,cAAc,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,IAAI,EAAE,EAAE;oBAC/D,MAAM,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;oBACrC,IAAI,CAAC,eAAe,GAAG,SAAS,CAAC;oBACjC,OAAO,CAAC,IAAI,CAAC,CAAC;gBACf,CAAC,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;YACH,OAAO,IAAI,CAAC,eAAe,CAAC;QAC7B,CAAC;QAEM,YAAY,CAAC,UAAkB;YACrC,QAAQ,UAAU,CAAC,WAAW,EAAE,EAAE;gBACjC,KAAK,SAAS;oBACb,OAAO,2BAAgB,CAAC,aAAa,CAAC;gBACvC,KAAK,gBAAgB,CAAC;gBACtB,KAAK,UAAU;oBACd,OAAO,2BAAgB,CAAC,UAAU,CAAC;gBACpC,KAAK,UAAU,CAAC;gBAChB,KAAK,aAAa;oBACjB,OAAO,2BAAgB,CAAC,OAAO,CAAC;gBACjC,KAAK,SAAS,CAAC;gBACf,KAAK,YAAY,CAAC;gBAClB,KAAK,gBAAgB,CAAC;gBACtB,KAAK,UAAU,CAAC;gBAChB,KAAK,YAAY,CAAC;gBAClB,KAAK,iBAAiB,CAAC;gBACvB,KAAK,aAAa;oBACjB,OAAO,2BAAgB,CAAC,GAAG,CAAC;gBAC7B;oBACC,OAAO,SAAS,CAAC;aAClB;QACF,CAAC;KACD;IA/FA;QADC,CAAA,GAAA,qBAAQ,CAAA,CAAC,GAAG,CAAC;wDAiBb;IAlDF,gDAiIC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport type * as WindowsProcessTreeType from 'windows-process-tree';\nimport { Disposable, IDisposable } from 'vs/base/common/lifecycle';\nimport { TerminalShellType, WindowsShellType } from 'vs/platform/terminal/common/terminal';\nimport { debounce } from 'vs/base/common/decorators';\nimport { timeout } from 'vs/base/common/async';\nimport { isWindows, platform } from 'vs/base/common/platform';\n\nexport interface IWindowsShellHelper extends IDisposable {\n\treadonly onShellNameChanged: Event<string>;\n\treadonly onShellTypeChanged: Event<TerminalShellType>;\n\tgetShellType(title: string): TerminalShellType;\n\tgetShellName(): Promise<string>;\n}\n\nconst SHELL_EXECUTABLES = [\n\t'cmd.exe',\n\t'powershell.exe',\n\t'pwsh.exe',\n\t'bash.exe',\n\t'wsl.exe',\n\t'ubuntu.exe',\n\t'ubuntu1804.exe',\n\t'kali.exe',\n\t'debian.exe',\n\t'opensuse-42.exe',\n\t'sles-12.exe'\n];\n\nlet windowsProcessTree: typeof WindowsProcessTreeType;\n\nexport class WindowsShellHelper extends Disposable implements IWindowsShellHelper {\n\tprivate _isDisposed: boolean;\n\tprivate _currentRequest: Promise<string> | undefined;\n\tprivate _shellType: TerminalShellType | undefined;\n\tpublic get shellType(): TerminalShellType | undefined { return this._shellType; }\n\tprivate _shellTitle: string = '';\n\tpublic get shellTitle(): string { return this._shellTitle; }\n\tprivate readonly _onShellNameChanged = new Emitter<string>();\n\tpublic get onShellNameChanged(): Event<string> { return this._onShellNameChanged.event; }\n\tprivate readonly _onShellTypeChanged = new Emitter<TerminalShellType>();\n\tpublic get onShellTypeChanged(): Event<TerminalShellType> { return this._onShellTypeChanged.event; }\n\n\tpublic constructor(\n\t\tprivate _rootProcessId: number\n\t) {\n\t\tsuper();\n\n\t\tif (!isWindows) {\n\t\t\tthrow new Error(`WindowsShellHelper cannot be instantiated on ${platform}`);\n\t\t}\n\n\t\tthis._isDisposed = false;\n\n\t\tthis._startMonitoringShell();\n\t}\n\n\tprivate async _startMonitoringShell(): Promise<void> {\n\t\tif (this._isDisposed) {\n\t\t\treturn;\n\t\t}\n\t\tthis.checkShell();\n\t}\n\n\t@debounce(500)\n\tasync checkShell(): Promise<void> {\n\t\tif (isWindows) {\n\t\t\t// Wait to give the shell some time to actually launch a process, this\n\t\t\t// could lead to a race condition but it would be recovered from when\n\t\t\t// data stops and should cover the majority of cases\n\t\t\tawait timeout(300);\n\t\t\tthis.getShellName().then(title => {\n\t\t\t\tconst type = this.getShellType(title);\n\t\t\t\tif (type !== this._shellType) {\n\t\t\t\t\tthis._onShellTypeChanged.fire(type);\n\t\t\t\t\tthis._onShellNameChanged.fire(title);\n\t\t\t\t\tthis._shellType = type;\n\t\t\t\t\tthis._shellTitle = title;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate traverseTree(tree: any): string {\n\t\tif (!tree) {\n\t\t\treturn '';\n\t\t}\n\t\tif (SHELL_EXECUTABLES.indexOf(tree.name) === -1) {\n\t\t\treturn tree.name;\n\t\t}\n\t\tif (!tree.children || tree.children.length === 0) {\n\t\t\treturn tree.name;\n\t\t}\n\t\tlet favouriteChild = 0;\n\t\tfor (; favouriteChild < tree.children.length; favouriteChild++) {\n\t\t\tconst child = tree.children[favouriteChild];\n\t\t\tif (!child.children || child.children.length === 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (child.children[0].name !== 'conhost.exe') {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (favouriteChild >= tree.children.length) {\n\t\t\treturn tree.name;\n\t\t}\n\t\treturn this.traverseTree(tree.children[favouriteChild]);\n\t}\n\n\tpublic override dispose(): void {\n\t\tthis._isDisposed = true;\n\t\tsuper.dispose();\n\t}\n\n\t/**\n\t * Returns the innermost shell executable running in the terminal\n\t */\n\tpublic getShellName(): Promise<string> {\n\t\tif (this._isDisposed) {\n\t\t\treturn Promise.resolve('');\n\t\t}\n\t\t// Prevent multiple requests at once, instead return current request\n\t\tif (this._currentRequest) {\n\t\t\treturn this._currentRequest;\n\t\t}\n\t\tthis._currentRequest = new Promise<string>(async resolve => {\n\t\t\tif (!windowsProcessTree) {\n\t\t\t\twindowsProcessTree = await import('windows-process-tree');\n\t\t\t}\n\t\t\twindowsProcessTree.getProcessTree(this._rootProcessId, (tree) => {\n\t\t\t\tconst name = this.traverseTree(tree);\n\t\t\t\tthis._currentRequest = undefined;\n\t\t\t\tresolve(name);\n\t\t\t});\n\t\t});\n\t\treturn this._currentRequest;\n\t}\n\n\tpublic getShellType(executable: string): TerminalShellType {\n\t\tswitch (executable.toLowerCase()) {\n\t\t\tcase 'cmd.exe':\n\t\t\t\treturn WindowsShellType.CommandPrompt;\n\t\t\tcase 'powershell.exe':\n\t\t\tcase 'pwsh.exe':\n\t\t\t\treturn WindowsShellType.PowerShell;\n\t\t\tcase 'bash.exe':\n\t\t\tcase 'git-cmd.exe':\n\t\t\t\treturn WindowsShellType.GitBash;\n\t\t\tcase 'wsl.exe':\n\t\t\tcase 'ubuntu.exe':\n\t\t\tcase 'ubuntu1804.exe':\n\t\t\tcase 'kali.exe':\n\t\t\tcase 'debian.exe':\n\t\t\tcase 'opensuse-42.exe':\n\t\t\tcase 'sles-12.exe':\n\t\t\t\treturn WindowsShellType.Wsl;\n\t\t\tdefault:\n\t\t\t\treturn undefined;\n\t\t}\n\t}\n}\n"]}