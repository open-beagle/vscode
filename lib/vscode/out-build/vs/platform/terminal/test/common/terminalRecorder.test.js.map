{"version":3,"file":"terminalRecorder.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/terminal/test/common/terminalRecorder.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAMhG,SAAS,WAAW,CAAC,QAA0B,EAAE,QAAuB;QACvE,MAAM,MAAM,GAAG,QAAQ,CAAC,mBAAmB,EAAE,CAAC,MAAM,CAAC;QACrD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACzC,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;SAC/C;IACF,CAAC;IAED,KAAK,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAC9B,IAAI,CAAC,0BAA0B,EAAE,GAAG,EAAE;YACrC,MAAM,QAAQ,GAAG,IAAI,mCAAgB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAC5C,WAAW,CAAC,QAAQ,EAAE;gBACrB,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE;aAC9B,CAAC,CAAC;YACH,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;YACzB,QAAQ,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAC5B,WAAW,CAAC,QAAQ,EAAE;gBACrB,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE;gBAC/B,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE;aAC9B,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,0CAA0C,EAAE,GAAG,EAAE;YACrD,MAAM,QAAQ,GAAG,IAAI,mCAAgB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAC5C,WAAW,CAAC,QAAQ,EAAE;gBACrB,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE;aAC9B,CAAC,CAAC;YACH,QAAQ,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAC5B,WAAW,CAAC,QAAQ,EAAE;gBACrB,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE;aAC9B,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,kEAAkE,EAAE,GAAG,EAAE;YAC7E,MAAM,QAAQ,GAAG,IAAI,mCAAgB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAC5C,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;YACzB,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;YACzB,QAAQ,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAC5B,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;YACzB,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;YACzB,WAAW,CAAC,QAAQ,EAAE;gBACrB,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE;gBAChC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE;aAChC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { TerminalRecorder } from 'vs/platform/terminal/common/terminalRecorder';\nimport { ReplayEntry } from 'vs/platform/terminal/common/terminalProcess';\n\nfunction eventsEqual(recorder: TerminalRecorder, expected: ReplayEntry[]) {\n\tconst actual = recorder.generateReplayEvent().events;\n\tfor (let i = 0; i < expected.length; i++) {\n\t\tassert.deepStrictEqual(actual[i], expected[i]);\n\t}\n}\n\nsuite('TerminalRecorder', () => {\n\ttest('should record dimensions', () => {\n\t\tconst recorder = new TerminalRecorder(1, 2);\n\t\teventsEqual(recorder, [\n\t\t\t{ cols: 1, rows: 2, data: '' }\n\t\t]);\n\t\trecorder.recordData('a');\n\t\trecorder.recordResize(3, 4);\n\t\teventsEqual(recorder, [\n\t\t\t{ cols: 1, rows: 2, data: 'a' },\n\t\t\t{ cols: 3, rows: 4, data: '' }\n\t\t]);\n\t});\n\ttest('should ignore resize events without data', () => {\n\t\tconst recorder = new TerminalRecorder(1, 2);\n\t\teventsEqual(recorder, [\n\t\t\t{ cols: 1, rows: 2, data: '' }\n\t\t]);\n\t\trecorder.recordResize(3, 4);\n\t\teventsEqual(recorder, [\n\t\t\t{ cols: 3, rows: 4, data: '' }\n\t\t]);\n\t});\n\ttest('should record data and combine it into the previous resize event', () => {\n\t\tconst recorder = new TerminalRecorder(1, 2);\n\t\trecorder.recordData('a');\n\t\trecorder.recordData('b');\n\t\trecorder.recordResize(3, 4);\n\t\trecorder.recordData('c');\n\t\trecorder.recordData('d');\n\t\teventsEqual(recorder, [\n\t\t\t{ cols: 1, rows: 2, data: 'ab' },\n\t\t\t{ cols: 3, rows: 4, data: 'cd' }\n\t\t]);\n\t});\n});\n"]}