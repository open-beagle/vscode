{"version":3,"file":"themeService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/theme/common/themeService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { Color } from 'vs/base/common/color';\nimport { IDisposable, toDisposable, Disposable } from 'vs/base/common/lifecycle';\nimport * as platform from 'vs/platform/registry/common/platform';\nimport { ColorIdentifier } from 'vs/platform/theme/common/colorRegistry';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { ColorScheme } from 'vs/platform/theme/common/theme';\nimport { Codicon, CSSIcon } from 'vs/base/common/codicons';\n\nexport const IThemeService = createDecorator<IThemeService>('themeService');\n\nexport interface ThemeColor {\n\tid: string;\n}\n\nexport namespace ThemeColor {\n\texport function isThemeColor(obj: any): obj is ThemeColor {\n\t\treturn obj && typeof obj === 'object' && typeof (<ThemeColor>obj).id === 'string';\n\t}\n}\n\nexport function themeColorFromId(id: ColorIdentifier) {\n\treturn { id };\n}\n\n// theme icon\nexport interface ThemeIcon {\n\treadonly id: string;\n\treadonly color?: ThemeColor;\n}\n\nexport namespace ThemeIcon {\n\texport function isThemeIcon(obj: any): obj is ThemeIcon {\n\t\treturn obj && typeof obj === 'object' && typeof (<ThemeIcon>obj).id === 'string' && (typeof (<ThemeIcon>obj).color === 'undefined' || ThemeColor.isThemeColor((<ThemeIcon>obj).color));\n\t}\n\n\tconst _regexFromString = new RegExp(`^\\\\$\\\\((${CSSIcon.iconNameExpression}(?:${CSSIcon.iconModifierExpression})?)\\\\)$`);\n\n\texport function fromString(str: string): ThemeIcon | undefined {\n\t\tconst match = _regexFromString.exec(str);\n\t\tif (!match) {\n\t\t\treturn undefined;\n\t\t}\n\t\tlet [, name] = match;\n\t\treturn { id: name };\n\t}\n\n\texport function modify(icon: ThemeIcon, modifier: 'disabled' | 'spin' | undefined): ThemeIcon {\n\t\tlet id = icon.id;\n\t\tconst tildeIndex = id.lastIndexOf('~');\n\t\tif (tildeIndex !== -1) {\n\t\t\tid = id.substring(0, tildeIndex);\n\t\t}\n\t\tif (modifier) {\n\t\t\tid = `${id}~${modifier}`;\n\t\t}\n\t\treturn { id };\n\t}\n\n\texport function isEqual(ti1: ThemeIcon, ti2: ThemeIcon): boolean {\n\t\treturn ti1.id === ti2.id && ti1.color?.id === ti2.color?.id;\n\t}\n\n\texport const asClassNameArray: (icon: ThemeIcon) => string[] = CSSIcon.asClassNameArray;\n\texport const asClassName: (icon: ThemeIcon) => string = CSSIcon.asClassName;\n\texport const asCSSSelector: (icon: ThemeIcon) => string = CSSIcon.asCSSSelector;\n}\n\nexport const FileThemeIcon = Codicon.file;\nexport const FolderThemeIcon = Codicon.folder;\n\nexport function getThemeTypeSelector(type: ColorScheme): string {\n\tswitch (type) {\n\t\tcase ColorScheme.DARK: return 'vs-dark';\n\t\tcase ColorScheme.HIGH_CONTRAST: return 'hc-black';\n\t\tdefault: return 'vs';\n\t}\n}\n\nexport interface ITokenStyle {\n\treadonly foreground?: number;\n\treadonly bold?: boolean;\n\treadonly underline?: boolean;\n\treadonly italic?: boolean;\n}\n\nexport interface IColorTheme {\n\n\treadonly type: ColorScheme;\n\n\treadonly label: string;\n\n\t/**\n\t * Resolves the color of the given color identifier. If the theme does not\n\t * specify the color, the default color is returned unless <code>useDefault</code> is set to false.\n\t * @param color the id of the color\n\t * @param useDefault specifies if the default color should be used. If not set, the default is used.\n\t */\n\tgetColor(color: ColorIdentifier, useDefault?: boolean): Color | undefined;\n\n\t/**\n\t * Returns whether the theme defines a value for the color. If not, that means the\n\t * default color will be used.\n\t */\n\tdefines(color: ColorIdentifier): boolean;\n\n\t/**\n\t * Returns the token style for a given classification. The result uses the <code>MetadataConsts</code> format\n\t */\n\tgetTokenStyleMetadata(type: string, modifiers: string[], modelLanguage: string): ITokenStyle | undefined;\n\n\t/**\n\t * List of all colors used with tokens. <code>getTokenStyleMetadata</code> references the colors by index into this list.\n\t */\n\treadonly tokenColorMap: string[];\n\n\t/**\n\t * Defines whether semantic highlighting should be enabled for the theme.\n\t */\n\treadonly semanticHighlighting: boolean;\n}\n\nexport interface IFileIconTheme {\n\treadonly hasFileIcons: boolean;\n\treadonly hasFolderIcons: boolean;\n\treadonly hidesExplorerArrows: boolean;\n}\n\nexport interface ICssStyleCollector {\n\taddRule(rule: string): void;\n}\n\nexport interface IThemingParticipant {\n\t(theme: IColorTheme, collector: ICssStyleCollector, environment: IEnvironmentService): void;\n}\n\nexport interface IThemeService {\n\treadonly _serviceBrand: undefined;\n\n\tgetColorTheme(): IColorTheme;\n\n\treadonly onDidColorThemeChange: Event<IColorTheme>;\n\n\tgetFileIconTheme(): IFileIconTheme;\n\n\treadonly onDidFileIconThemeChange: Event<IFileIconTheme>;\n\n}\n\n// static theming participant\nexport const Extensions = {\n\tThemingContribution: 'base.contributions.theming'\n};\n\nexport interface IThemingRegistry {\n\n\t/**\n\t * Register a theming participant that is invoked on every theme change.\n\t */\n\tonColorThemeChange(participant: IThemingParticipant): IDisposable;\n\n\tgetThemingParticipants(): IThemingParticipant[];\n\n\treadonly onThemingParticipantAdded: Event<IThemingParticipant>;\n}\n\nclass ThemingRegistry implements IThemingRegistry {\n\tprivate themingParticipants: IThemingParticipant[] = [];\n\tprivate readonly onThemingParticipantAddedEmitter: Emitter<IThemingParticipant>;\n\n\tconstructor() {\n\t\tthis.themingParticipants = [];\n\t\tthis.onThemingParticipantAddedEmitter = new Emitter<IThemingParticipant>();\n\t}\n\n\tpublic onColorThemeChange(participant: IThemingParticipant): IDisposable {\n\t\tthis.themingParticipants.push(participant);\n\t\tthis.onThemingParticipantAddedEmitter.fire(participant);\n\t\treturn toDisposable(() => {\n\t\t\tconst idx = this.themingParticipants.indexOf(participant);\n\t\t\tthis.themingParticipants.splice(idx, 1);\n\t\t});\n\t}\n\n\tpublic get onThemingParticipantAdded(): Event<IThemingParticipant> {\n\t\treturn this.onThemingParticipantAddedEmitter.event;\n\t}\n\n\tpublic getThemingParticipants(): IThemingParticipant[] {\n\t\treturn this.themingParticipants;\n\t}\n}\n\nlet themingRegistry = new ThemingRegistry();\nplatform.Registry.add(Extensions.ThemingContribution, themingRegistry);\n\nexport function registerThemingParticipant(participant: IThemingParticipant): IDisposable {\n\treturn themingRegistry.onColorThemeChange(participant);\n}\n\n/**\n * Utility base class for all themable components.\n */\nexport class Themable extends Disposable {\n\tprotected theme: IColorTheme;\n\n\tconstructor(\n\t\tprotected themeService: IThemeService\n\t) {\n\t\tsuper();\n\n\t\tthis.theme = themeService.getColorTheme();\n\n\t\t// Hook up to theme changes\n\t\tthis._register(this.themeService.onDidColorThemeChange(theme => this.onThemeChange(theme)));\n\t}\n\n\tprotected onThemeChange(theme: IColorTheme): void {\n\t\tthis.theme = theme;\n\n\t\tthis.updateStyles();\n\t}\n\n\tprotected updateStyles(): void {\n\t\t// Subclasses to override\n\t}\n\n\tprotected getColor(id: string, modify?: (color: Color, theme: IColorTheme) => Color): string | null {\n\t\tlet color = this.theme.getColor(id);\n\n\t\tif (color && modify) {\n\t\t\tcolor = modify(color, this.theme);\n\t\t}\n\n\t\treturn color ? color.toString() : null;\n\t}\n}\n"]}