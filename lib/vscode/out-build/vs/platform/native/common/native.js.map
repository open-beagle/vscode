{"version":3,"file":"native.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/native/common/native.ts"],"names":[],"mappings":"AAAA;;;gGAGgG","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { MessageBoxOptions, MessageBoxReturnValue, OpenDevToolsOptions, SaveDialogOptions, OpenDialogOptions, OpenDialogReturnValue, SaveDialogReturnValue, MouseInputEvent } from 'vs/base/parts/sandbox/common/electronTypes';\nimport { IOpenedWindow, IWindowOpenable, IOpenEmptyWindowOptions, IOpenWindowOptions, IColorScheme } from 'vs/platform/windows/common/windows';\nimport { INativeOpenDialogOptions } from 'vs/platform/dialogs/common/dialogs';\nimport { ISerializableCommandAction } from 'vs/platform/actions/common/actions';\nimport { URI } from 'vs/base/common/uri';\n\nexport interface ICPUProperties {\n\tmodel: string;\n\tspeed: number;\n}\n\nexport interface IOSProperties {\n\ttype: string;\n\trelease: string;\n\tarch: string;\n\tplatform: string;\n\tcpus: ICPUProperties[];\n}\n\nexport interface IOSStatistics {\n\ttotalmem: number;\n\tfreemem: number;\n\tloadavg: number[];\n}\n\nexport interface ICommonNativeHostService {\n\n\treadonly _serviceBrand: undefined;\n\n\t// Properties\n\treadonly windowId: number;\n\n\t// Events\n\treadonly onDidOpenWindow: Event<number>;\n\n\treadonly onDidMaximizeWindow: Event<number>;\n\treadonly onDidUnmaximizeWindow: Event<number>;\n\n\treadonly onDidFocusWindow: Event<number>;\n\treadonly onDidBlurWindow: Event<number>;\n\n\treadonly onDidChangeDisplay: Event<void>;\n\n\treadonly onDidResumeOS: Event<unknown>;\n\n\treadonly onDidChangeColorScheme: Event<IColorScheme>;\n\n\treadonly onDidChangePassword: Event<{ service: string, account: string }>;\n\n\t// Window\n\tgetWindows(): Promise<IOpenedWindow[]>;\n\tgetWindowCount(): Promise<number>;\n\tgetActiveWindowId(): Promise<number | undefined>;\n\n\topenWindow(options?: IOpenEmptyWindowOptions): Promise<void>;\n\topenWindow(toOpen: IWindowOpenable[], options?: IOpenWindowOptions): Promise<void>;\n\n\ttoggleFullScreen(): Promise<void>;\n\n\thandleTitleDoubleClick(): Promise<void>;\n\n\tisMaximized(): Promise<boolean>;\n\tmaximizeWindow(): Promise<void>;\n\tunmaximizeWindow(): Promise<void>;\n\tminimizeWindow(): Promise<void>;\n\n\tsetMinimumSize(width: number | undefined, height: number | undefined): Promise<void>;\n\n\t/**\n\t * Make the window focused.\n\t *\n\t * @param options Pass `force: true` if you want to make the window take\n\t * focus even if the application does not have focus currently. This option\n\t * should only be used if it is necessary to steal focus from the current\n\t * focused application which may not be VSCode.\n\t */\n\tfocusWindow(options?: { windowId?: number, force?: boolean }): Promise<void>;\n\n\t// Dialogs\n\tshowMessageBox(options: MessageBoxOptions): Promise<MessageBoxReturnValue>;\n\tshowSaveDialog(options: SaveDialogOptions): Promise<SaveDialogReturnValue>;\n\tshowOpenDialog(options: OpenDialogOptions): Promise<OpenDialogReturnValue>;\n\n\tpickFileFolderAndOpen(options: INativeOpenDialogOptions): Promise<void>;\n\tpickFileAndOpen(options: INativeOpenDialogOptions): Promise<void>;\n\tpickFolderAndOpen(options: INativeOpenDialogOptions): Promise<void>;\n\tpickWorkspaceAndOpen(options: INativeOpenDialogOptions): Promise<void>;\n\n\t// OS\n\tshowItemInFolder(path: string): Promise<void>;\n\tsetRepresentedFilename(path: string): Promise<void>;\n\tsetDocumentEdited(edited: boolean): Promise<void>;\n\topenExternal(url: string): Promise<boolean>;\n\tmoveItemToTrash(fullPath: string, deleteOnFail?: boolean): Promise<boolean>;\n\n\tisAdmin(): Promise<boolean>;\n\twriteElevated(source: URI, target: URI, options?: { unlock?: boolean }): Promise<void>;\n\n\tgetOSProperties(): Promise<IOSProperties>;\n\tgetOSStatistics(): Promise<IOSStatistics>;\n\tgetOSVirtualMachineHint(): Promise<number>;\n\n\t// Process\n\tkillProcess(pid: number, code: string): Promise<void>;\n\n\t// Clipboard\n\treadClipboardText(type?: 'selection' | 'clipboard'): Promise<string>;\n\twriteClipboardText(text: string, type?: 'selection' | 'clipboard'): Promise<void>;\n\treadClipboardFindText(): Promise<string>;\n\twriteClipboardFindText(text: string): Promise<void>;\n\twriteClipboardBuffer(format: string, buffer: Uint8Array, type?: 'selection' | 'clipboard'): Promise<void>;\n\treadClipboardBuffer(format: string): Promise<Uint8Array>;\n\thasClipboard(format: string, type?: 'selection' | 'clipboard'): Promise<boolean>;\n\n\t// macOS Touchbar\n\tnewWindowTab(): Promise<void>;\n\tshowPreviousWindowTab(): Promise<void>;\n\tshowNextWindowTab(): Promise<void>;\n\tmoveWindowTabToNewWindow(): Promise<void>;\n\tmergeAllWindowTabs(): Promise<void>;\n\ttoggleWindowTabsBar(): Promise<void>;\n\tupdateTouchBar(items: ISerializableCommandAction[][]): Promise<void>;\n\n\t// Lifecycle\n\tnotifyReady(): Promise<void>\n\trelaunch(options?: { addArgs?: string[], removeArgs?: string[] }): Promise<void>;\n\treload(options?: { disableExtensions?: boolean }): Promise<void>;\n\tcloseWindow(): Promise<void>;\n\tcloseWindowById(windowId: number): Promise<void>;\n\tquit(): Promise<void>;\n\texit(code: number): Promise<void>;\n\n\t// Development\n\topenDevTools(options?: OpenDevToolsOptions): Promise<void>;\n\ttoggleDevTools(): Promise<void>;\n\ttoggleSharedProcessWindow(): Promise<void>;\n\tsendInputEvent(event: MouseInputEvent): Promise<void>;\n\n\t// Connectivity\n\tresolveProxy(url: string): Promise<string | undefined>;\n\n\t// Registry (windows only)\n\twindowsGetStringRegKey(hive: 'HKEY_CURRENT_USER' | 'HKEY_LOCAL_MACHINE' | 'HKEY_CLASSES_ROOT' | 'HKEY_USERS' | 'HKEY_CURRENT_CONFIG', path: string, name: string): Promise<string | undefined>;\n\n\t// Credentials\n\tgetPassword(service: string, account: string): Promise<string | null>;\n\tsetPassword(service: string, account: string, password: string): Promise<void>;\n\tdeletePassword(service: string, account: string): Promise<boolean>;\n\tfindPassword(service: string): Promise<string | null>;\n\tfindCredentials(service: string): Promise<Array<{ account: string, password: string }>>\n}\n"]}