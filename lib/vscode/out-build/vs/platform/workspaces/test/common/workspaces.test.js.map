{"version":3,"file":"workspaces.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/workspaces/test/common/workspaces.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { URI } from 'vs/base/common/uri';\nimport { hasWorkspaceFileExtension, toWorkspaceIdentifier, isSingleFolderWorkspaceIdentifier, isWorkspaceIdentifier, ISerializedWorkspaceIdentifier, reviveIdentifier, ISerializedSingleFolderWorkspaceIdentifier, IEmptyWorkspaceIdentifier } from 'vs/platform/workspaces/common/workspaces';\n\nsuite('Workspaces', () => {\n\n\ttest('reviveIdentifier', () => {\n\t\tlet serializedWorkspaceIdentifier: ISerializedWorkspaceIdentifier = { id: 'id', configPath: URI.file('foo').toJSON() };\n\t\tassert.strictEqual(isWorkspaceIdentifier(reviveIdentifier(serializedWorkspaceIdentifier)), true);\n\n\t\tlet serializedSingleFolderWorkspaceIdentifier: ISerializedSingleFolderWorkspaceIdentifier = { id: 'id', uri: URI.file('foo').toJSON() };\n\t\tassert.strictEqual(isSingleFolderWorkspaceIdentifier(reviveIdentifier(serializedSingleFolderWorkspaceIdentifier)), true);\n\n\t\tlet serializedEmptyWorkspaceIdentifier: IEmptyWorkspaceIdentifier = { id: 'id' };\n\t\tassert.strictEqual(reviveIdentifier(serializedEmptyWorkspaceIdentifier).id, serializedEmptyWorkspaceIdentifier.id);\n\t\tassert.strictEqual(isWorkspaceIdentifier(serializedEmptyWorkspaceIdentifier), false);\n\t\tassert.strictEqual(isSingleFolderWorkspaceIdentifier(serializedEmptyWorkspaceIdentifier), false);\n\n\t\tassert.strictEqual(reviveIdentifier(undefined), undefined);\n\t});\n\n\ttest('hasWorkspaceFileExtension', () => {\n\t\tassert.strictEqual(hasWorkspaceFileExtension('something'), false);\n\t\tassert.strictEqual(hasWorkspaceFileExtension('something.code-workspace'), true);\n\t});\n\n\ttest('toWorkspaceIdentifier', () => {\n\t\tlet identifier = toWorkspaceIdentifier({ id: 'id', folders: [] });\n\t\tassert.ok(!identifier);\n\t\tassert.ok(!isSingleFolderWorkspaceIdentifier(identifier));\n\t\tassert.ok(!isWorkspaceIdentifier(identifier));\n\n\t\tidentifier = toWorkspaceIdentifier({ id: 'id', folders: [{ index: 0, name: 'test', toResource: () => URI.file('test'), uri: URI.file('test') }] });\n\t\tassert.ok(identifier);\n\t\tassert.ok(isSingleFolderWorkspaceIdentifier(identifier));\n\t\tassert.ok(!isWorkspaceIdentifier(identifier));\n\n\t\tidentifier = toWorkspaceIdentifier({ id: 'id', configuration: URI.file('test.code-workspace'), folders: [] });\n\t\tassert.ok(identifier);\n\t\tassert.ok(!isSingleFolderWorkspaceIdentifier(identifier));\n\t\tassert.ok(isWorkspaceIdentifier(identifier));\n\t});\n});\n"]}