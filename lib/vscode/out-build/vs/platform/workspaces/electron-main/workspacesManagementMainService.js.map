{"version":3,"sources":["vs/platform/workspaces/electron-main/workspacesManagementMainService.ts"],"names":[],"mappings":"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","file":"workspacesManagementMainService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { toWorkspaceFolders, IWorkspaceIdentifier, hasWorkspaceFileExtension, UNTITLED_WORKSPACE_NAME, IResolvedWorkspace, IStoredWorkspaceFolder, isStoredWorkspaceFolder, IWorkspaceFolderCreationData, IUntitledWorkspaceInfo, getStoredWorkspaceFolder, IEnterWorkspaceResult, isUntitledWorkspace, isWorkspaceIdentifier, ISingleFolderWorkspaceIdentifier } from 'vs/platform/workspaces/common/workspaces';\nimport { IEnvironmentMainService } from 'vs/platform/environment/electron-main/environmentMainService';\nimport { join, dirname } from 'vs/base/common/path';\nimport { writeFile, rimrafSync, readdirSync, writeFileSync } from 'vs/base/node/pfs';\nimport { promises, readFileSync, existsSync, mkdirSync, statSync, Stats } from 'fs';\nimport { isLinux, isMacintosh, isWindows } from 'vs/base/common/platform';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { createHash } from 'crypto';\nimport { parse } from 'vs/base/common/json';\nimport { URI } from 'vs/base/common/uri';\nimport { Schemas } from 'vs/base/common/network';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { originalFSPath, joinPath, basename, extUriBiasedIgnorePathCase } from 'vs/base/common/resources';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { ICodeWindow } from 'vs/platform/windows/electron-main/windows';\nimport { localize } from 'vs/nls';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { MessageBoxOptions, BrowserWindow } from 'electron';\nimport { withNullAsUndefined } from 'vs/base/common/types';\nimport { IBackupMainService } from 'vs/platform/backup/electron-main/backup';\nimport { IDialogMainService } from 'vs/platform/dialogs/electron-main/dialogMainService';\nimport { findWindowOnWorkspaceOrFolder } from 'vs/platform/windows/electron-main/windowsFinder';\n\nexport const IWorkspacesManagementMainService = createDecorator<IWorkspacesManagementMainService>('workspacesManagementMainService');\n\nexport interface IWorkspaceEnteredEvent {\n\twindow: ICodeWindow;\n\tworkspace: IWorkspaceIdentifier;\n}\n\nexport interface IWorkspacesManagementMainService {\n\n\treadonly _serviceBrand: undefined;\n\n\treadonly onDidDeleteUntitledWorkspace: Event<IWorkspaceIdentifier>;\n\treadonly onDidEnterWorkspace: Event<IWorkspaceEnteredEvent>;\n\n\tenterWorkspace(intoWindow: ICodeWindow, openedWindows: ICodeWindow[], path: URI): Promise<IEnterWorkspaceResult | null>;\n\n\tcreateUntitledWorkspace(folders?: IWorkspaceFolderCreationData[], remoteAuthority?: string): Promise<IWorkspaceIdentifier>;\n\tcreateUntitledWorkspaceSync(folders?: IWorkspaceFolderCreationData[]): IWorkspaceIdentifier;\n\n\tdeleteUntitledWorkspace(workspace: IWorkspaceIdentifier): Promise<void>;\n\tdeleteUntitledWorkspaceSync(workspace: IWorkspaceIdentifier): void;\n\n\tgetUntitledWorkspacesSync(): IUntitledWorkspaceInfo[];\n\tisUntitledWorkspace(workspace: IWorkspaceIdentifier): boolean;\n\n\tresolveLocalWorkspaceSync(path: URI): IResolvedWorkspace | null;\n\tgetWorkspaceIdentifier(workspacePath: URI): Promise<IWorkspaceIdentifier>;\n}\n\nexport interface IStoredWorkspace {\n\tfolders: IStoredWorkspaceFolder[];\n\tremoteAuthority?: string;\n}\n\nexport class WorkspacesManagementMainService extends Disposable implements IWorkspacesManagementMainService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly untitledWorkspacesHome = this.environmentMainService.untitledWorkspacesHome; // local URI that contains all untitled workspaces\n\n\tprivate readonly _onDidDeleteUntitledWorkspace = this._register(new Emitter<IWorkspaceIdentifier>());\n\treadonly onDidDeleteUntitledWorkspace: Event<IWorkspaceIdentifier> = this._onDidDeleteUntitledWorkspace.event;\n\n\tprivate readonly _onDidEnterWorkspace = this._register(new Emitter<IWorkspaceEnteredEvent>());\n\treadonly onDidEnterWorkspace: Event<IWorkspaceEnteredEvent> = this._onDidEnterWorkspace.event;\n\n\tconstructor(\n\t\t@IEnvironmentMainService private readonly environmentMainService: IEnvironmentMainService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IBackupMainService private readonly backupMainService: IBackupMainService,\n\t\t@IDialogMainService private readonly dialogMainService: IDialogMainService,\n\t\t@IProductService private readonly productService: IProductService\n\t) {\n\t\tsuper();\n\t}\n\n\tresolveLocalWorkspaceSync(uri: URI): IResolvedWorkspace | null {\n\t\tif (!this.isWorkspacePath(uri)) {\n\t\t\treturn null; // does not look like a valid workspace config file\n\t\t}\n\n\t\tif (uri.scheme !== Schemas.file) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet contents: string;\n\t\ttry {\n\t\t\tcontents = readFileSync(uri.fsPath, 'utf8');\n\t\t} catch (error) {\n\t\t\treturn null; // invalid workspace\n\t\t}\n\n\t\treturn this.doResolveWorkspace(uri, contents);\n\t}\n\n\tprivate isWorkspacePath(uri: URI): boolean {\n\t\treturn isUntitledWorkspace(uri, this.environmentMainService) || hasWorkspaceFileExtension(uri);\n\t}\n\n\tprivate doResolveWorkspace(path: URI, contents: string): IResolvedWorkspace | null {\n\t\ttry {\n\t\t\tconst workspace = this.doParseStoredWorkspace(path, contents);\n\t\t\tconst workspaceIdentifier = getWorkspaceIdentifier(path);\n\t\t\treturn {\n\t\t\t\tid: workspaceIdentifier.id,\n\t\t\t\tconfigPath: workspaceIdentifier.configPath,\n\t\t\t\tfolders: toWorkspaceFolders(workspace.folders, workspaceIdentifier.configPath, extUriBiasedIgnorePathCase),\n\t\t\t\tremoteAuthority: workspace.remoteAuthority\n\t\t\t};\n\t\t} catch (error) {\n\t\t\tthis.logService.warn(error.toString());\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate doParseStoredWorkspace(path: URI, contents: string): IStoredWorkspace {\n\n\t\t// Parse workspace file\n\t\tconst storedWorkspace: IStoredWorkspace = parse(contents); // use fault tolerant parser\n\n\t\t// Filter out folders which do not have a path or uri set\n\t\tif (storedWorkspace && Array.isArray(storedWorkspace.folders)) {\n\t\t\tstoredWorkspace.folders = storedWorkspace.folders.filter(folder => isStoredWorkspaceFolder(folder));\n\t\t} else {\n\t\t\tthrow new Error(`${path.toString(true)} looks like an invalid workspace file.`);\n\t\t}\n\n\t\treturn storedWorkspace;\n\t}\n\n\tasync createUntitledWorkspace(folders?: IWorkspaceFolderCreationData[], remoteAuthority?: string): Promise<IWorkspaceIdentifier> {\n\t\tconst { workspace, storedWorkspace } = this.newUntitledWorkspace(folders, remoteAuthority);\n\t\tconst configPath = workspace.configPath.fsPath;\n\n\t\tawait promises.mkdir(dirname(configPath), { recursive: true });\n\t\tawait writeFile(configPath, JSON.stringify(storedWorkspace, null, '\\t'));\n\n\t\treturn workspace;\n\t}\n\n\tcreateUntitledWorkspaceSync(folders?: IWorkspaceFolderCreationData[], remoteAuthority?: string): IWorkspaceIdentifier {\n\t\tconst { workspace, storedWorkspace } = this.newUntitledWorkspace(folders, remoteAuthority);\n\t\tconst configPath = workspace.configPath.fsPath;\n\n\t\tmkdirSync(dirname(configPath), { recursive: true });\n\t\twriteFileSync(configPath, JSON.stringify(storedWorkspace, null, '\\t'));\n\n\t\treturn workspace;\n\t}\n\n\tprivate newUntitledWorkspace(folders: IWorkspaceFolderCreationData[] = [], remoteAuthority?: string): { workspace: IWorkspaceIdentifier, storedWorkspace: IStoredWorkspace } {\n\t\tconst randomId = (Date.now() + Math.round(Math.random() * 1000)).toString();\n\t\tconst untitledWorkspaceConfigFolder = joinPath(this.untitledWorkspacesHome, randomId);\n\t\tconst untitledWorkspaceConfigPath = joinPath(untitledWorkspaceConfigFolder, UNTITLED_WORKSPACE_NAME);\n\n\t\tconst storedWorkspaceFolder: IStoredWorkspaceFolder[] = [];\n\n\t\tfor (const folder of folders) {\n\t\t\tstoredWorkspaceFolder.push(getStoredWorkspaceFolder(folder.uri, true, folder.name, untitledWorkspaceConfigFolder, !isWindows, extUriBiasedIgnorePathCase));\n\t\t}\n\n\t\treturn {\n\t\t\tworkspace: getWorkspaceIdentifier(untitledWorkspaceConfigPath),\n\t\t\tstoredWorkspace: { folders: storedWorkspaceFolder, remoteAuthority }\n\t\t};\n\t}\n\n\tasync getWorkspaceIdentifier(configPath: URI): Promise<IWorkspaceIdentifier> {\n\t\treturn getWorkspaceIdentifier(configPath);\n\t}\n\n\tisUntitledWorkspace(workspace: IWorkspaceIdentifier): boolean {\n\t\treturn isUntitledWorkspace(workspace.configPath, this.environmentMainService);\n\t}\n\n\tdeleteUntitledWorkspaceSync(workspace: IWorkspaceIdentifier): void {\n\t\tif (!this.isUntitledWorkspace(workspace)) {\n\t\t\treturn; // only supported for untitled workspaces\n\t\t}\n\n\t\t// Delete from disk\n\t\tthis.doDeleteUntitledWorkspaceSync(workspace);\n\n\t\t// Event\n\t\tthis._onDidDeleteUntitledWorkspace.fire(workspace);\n\t}\n\n\tasync deleteUntitledWorkspace(workspace: IWorkspaceIdentifier): Promise<void> {\n\t\tthis.deleteUntitledWorkspaceSync(workspace);\n\t}\n\n\tprivate doDeleteUntitledWorkspaceSync(workspace: IWorkspaceIdentifier): void {\n\t\tconst configPath = originalFSPath(workspace.configPath);\n\t\ttry {\n\n\t\t\t// Delete Workspace\n\t\t\trimrafSync(dirname(configPath));\n\n\t\t\t// Mark Workspace Storage to be deleted\n\t\t\tconst workspaceStoragePath = join(this.environmentMainService.workspaceStorageHome.fsPath, workspace.id);\n\t\t\tif (existsSync(workspaceStoragePath)) {\n\t\t\t\twriteFileSync(join(workspaceStoragePath, 'obsolete'), '');\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.logService.warn(`Unable to delete untitled workspace ${configPath} (${error}).`);\n\t\t}\n\t}\n\n\tgetUntitledWorkspacesSync(): IUntitledWorkspaceInfo[] {\n\t\tconst untitledWorkspaces: IUntitledWorkspaceInfo[] = [];\n\t\ttry {\n\t\t\tconst untitledWorkspacePaths = readdirSync(this.untitledWorkspacesHome.fsPath).map(folder => joinPath(this.untitledWorkspacesHome, folder, UNTITLED_WORKSPACE_NAME));\n\t\t\tfor (const untitledWorkspacePath of untitledWorkspacePaths) {\n\t\t\t\tconst workspace = getWorkspaceIdentifier(untitledWorkspacePath);\n\t\t\t\tconst resolvedWorkspace = this.resolveLocalWorkspaceSync(untitledWorkspacePath);\n\t\t\t\tif (!resolvedWorkspace) {\n\t\t\t\t\tthis.doDeleteUntitledWorkspaceSync(workspace);\n\t\t\t\t} else {\n\t\t\t\t\tuntitledWorkspaces.push({ workspace, remoteAuthority: resolvedWorkspace.remoteAuthority });\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tif (error.code !== 'ENOENT') {\n\t\t\t\tthis.logService.warn(`Unable to read folders in ${this.untitledWorkspacesHome} (${error}).`);\n\t\t\t}\n\t\t}\n\n\t\treturn untitledWorkspaces;\n\t}\n\n\tasync enterWorkspace(window: ICodeWindow, windows: ICodeWindow[], path: URI): Promise<IEnterWorkspaceResult | null> {\n\t\tif (!window || !window.win || !window.isReady) {\n\t\t\treturn null; // return early if the window is not ready or disposed\n\t\t}\n\n\t\tconst isValid = await this.isValidTargetWorkspacePath(window, windows, path);\n\t\tif (!isValid) {\n\t\t\treturn null; // return early if the workspace is not valid\n\t\t}\n\n\t\tconst result = this.doEnterWorkspace(window, getWorkspaceIdentifier(path));\n\t\tif (!result) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Emit as event\n\t\tthis._onDidEnterWorkspace.fire({ window, workspace: result.workspace });\n\n\t\treturn result;\n\t}\n\n\tprivate async isValidTargetWorkspacePath(window: ICodeWindow, windows: ICodeWindow[], workspacePath?: URI): Promise<boolean> {\n\t\tif (!workspacePath) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (isWorkspaceIdentifier(window.openedWorkspace) && extUriBiasedIgnorePathCase.isEqual(window.openedWorkspace.configPath, workspacePath)) {\n\t\t\treturn false; // window is already opened on a workspace with that path\n\t\t}\n\n\t\t// Prevent overwriting a workspace that is currently opened in another window\n\t\tif (findWindowOnWorkspaceOrFolder(windows, workspacePath)) {\n\t\t\tconst options: MessageBoxOptions = {\n\t\t\t\ttitle: this.productService.nameLong,\n\t\t\t\ttype: 'info',\n\t\t\t\tbuttons: [localize('ok', \"OK\")],\n\t\t\t\tmessage: localize('workspaceOpenedMessage', \"Unable to save workspace '{0}'\", basename(workspacePath)),\n\t\t\t\tdetail: localize('workspaceOpenedDetail', \"The workspace is already opened in another window. Please close that window first and then try again.\"),\n\t\t\t\tnoLink: true\n\t\t\t};\n\n\t\t\tawait this.dialogMainService.showMessageBox(options, withNullAsUndefined(BrowserWindow.getFocusedWindow()));\n\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true; // OK\n\t}\n\n\tprivate doEnterWorkspace(window: ICodeWindow, workspace: IWorkspaceIdentifier): IEnterWorkspaceResult | null {\n\t\tif (!window.config) {\n\t\t\treturn null;\n\t\t}\n\n\t\twindow.focus();\n\n\t\t// Register window for backups and migrate current backups over\n\t\tlet backupPath: string | undefined;\n\t\tif (!window.config.extensionDevelopmentPath) {\n\t\t\tbackupPath = this.backupMainService.registerWorkspaceBackupSync({ workspace, remoteAuthority: window.remoteAuthority }, window.config.backupPath);\n\t\t}\n\n\t\t// if the window was opened on an untitled workspace, delete it.\n\t\tif (isWorkspaceIdentifier(window.openedWorkspace) && this.isUntitledWorkspace(window.openedWorkspace)) {\n\t\t\tthis.deleteUntitledWorkspaceSync(window.openedWorkspace);\n\t\t}\n\n\t\t// Update window configuration properly based on transition to workspace\n\t\twindow.config.workspace = workspace;\n\t\twindow.config.backupPath = backupPath;\n\n\t\treturn { workspace, backupPath };\n\t}\n}\n\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n// NOTE: DO NOT CHANGE. IDENTIFIERS HAVE TO REMAIN STABLE\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\nexport function getWorkspaceIdentifier(configPath: URI): IWorkspaceIdentifier {\n\n\tfunction getWorkspaceId(): string {\n\t\tlet configPathStr = configPath.scheme === Schemas.file ? originalFSPath(configPath) : configPath.toString();\n\t\tif (!isLinux) {\n\t\t\tconfigPathStr = configPathStr.toLowerCase(); // sanitize for platform file system\n\t\t}\n\n\t\treturn createHash('md5').update(configPathStr).digest('hex');\n\t}\n\n\treturn {\n\t\tid: getWorkspaceId(),\n\t\tconfigPath\n\t};\n}\n\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n// NOTE: DO NOT CHANGE. IDENTIFIERS HAVE TO REMAIN STABLE\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\nexport function getSingleFolderWorkspaceIdentifier(folderUri: URI): ISingleFolderWorkspaceIdentifier | undefined;\nexport function getSingleFolderWorkspaceIdentifier(folderUri: URI, folderStat: Stats): ISingleFolderWorkspaceIdentifier;\nexport function getSingleFolderWorkspaceIdentifier(folderUri: URI, folderStat?: Stats): ISingleFolderWorkspaceIdentifier | undefined {\n\n\tfunction getFolderId(): string | undefined {\n\n\t\t// Remote: produce a hash from the entire URI\n\t\tif (folderUri.scheme !== Schemas.file) {\n\t\t\treturn createHash('md5').update(folderUri.toString()).digest('hex');\n\t\t}\n\n\t\t// Local: produce a hash from the path and include creation time as salt\n\t\tif (!folderStat) {\n\t\t\ttry {\n\t\t\t\tfolderStat = statSync(folderUri.fsPath);\n\t\t\t} catch (error) {\n\t\t\t\treturn undefined; // folder does not exist\n\t\t\t}\n\t\t}\n\n\t\tlet ctime: number | undefined;\n\t\tif (isLinux) {\n\t\t\tctime = folderStat.ino; // Linux: birthtime is ctime, so we cannot use it! We use the ino instead!\n\t\t} else if (isMacintosh) {\n\t\t\tctime = folderStat.birthtime.getTime(); // macOS: birthtime is fine to use as is\n\t\t} else if (isWindows) {\n\t\t\tif (typeof folderStat.birthtimeMs === 'number') {\n\t\t\t\tctime = Math.floor(folderStat.birthtimeMs); // Windows: fix precision issue in node.js 8.x to get 7.x results (see https://github.com/nodejs/node/issues/19897)\n\t\t\t} else {\n\t\t\t\tctime = folderStat.birthtime.getTime();\n\t\t\t}\n\t\t}\n\n\t\t// we use the ctime as extra salt to the ID so that we catch the case of a folder getting\n\t\t// deleted and recreated. in that case we do not want to carry over previous state\n\t\treturn createHash('md5').update(folderUri.fsPath).update(ctime ? String(ctime) : '').digest('hex');\n\t}\n\n\tconst folderId = getFolderId();\n\tif (typeof folderId === 'string') {\n\t\treturn {\n\t\t\tid: folderId,\n\t\t\turi: folderUri\n\t\t};\n\t}\n\n\treturn undefined; // invalid folder\n}\n"]}