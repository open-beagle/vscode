{"version":3,"file":"workspacesMainService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/workspaces/electron-main/workspacesMainService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAUhG,IAAa,qBAAqB,GAAlC,MAAa,qBAAqB;QAIjC,YACoD,+BAAiE,EAC9E,kBAAuC,EAC7B,4BAA2D,EACtE,iBAAqC;YAHvB,oCAA+B,GAA/B,+BAA+B,CAAkC;YAC9E,uBAAkB,GAAlB,kBAAkB,CAAqB;YAC7B,iCAA4B,GAA5B,4BAA4B,CAA+B;YACtE,sBAAiB,GAAjB,iBAAiB,CAAoB;YA2B3E,YAAY;YAEZ,4BAA4B;YAEnB,8BAAyB,GAAG,IAAI,CAAC,4BAA4B,CAAC,yBAAyB,CAAC;QA7BjG,CAAC;QAED,8BAA8B;QAE9B,KAAK,CAAC,cAAc,CAAC,QAAgB,EAAE,IAAS;YAC/C,MAAM,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YAC/D,IAAI,MAAM,EAAE;gBACX,OAAO,IAAI,CAAC,+BAA+B,CAAC,cAAc,CAAC,MAAM,EAAE,IAAI,CAAC,kBAAkB,CAAC,UAAU,EAAE,EAAE,IAAI,CAAC,CAAC;aAC/G;YAED,OAAO,IAAI,CAAC;QACb,CAAC;QAED,uBAAuB,CAAC,QAAgB,EAAE,OAAwC,EAAE,eAAwB;YAC3G,OAAO,IAAI,CAAC,+BAA+B,CAAC,uBAAuB,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC;QAC/F,CAAC;QAED,uBAAuB,CAAC,QAAgB,EAAE,SAA+B;YACxE,OAAO,IAAI,CAAC,+BAA+B,CAAC,uBAAuB,CAAC,SAAS,CAAC,CAAC;QAChF,CAAC;QAED,sBAAsB,CAAC,QAAgB,EAAE,aAAkB;YAC1D,OAAO,IAAI,CAAC,+BAA+B,CAAC,sBAAsB,CAAC,aAAa,CAAC,CAAC;QACnF,CAAC;QAQD,KAAK,CAAC,iBAAiB,CAAC,QAAgB;YACvC,OAAO,IAAI,CAAC,4BAA4B,CAAC,iBAAiB,CAAC,IAAI,CAAC,kBAAkB,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC7G,CAAC;QAED,KAAK,CAAC,iBAAiB,CAAC,QAAgB,EAAE,OAAkB;YAC3D,OAAO,IAAI,CAAC,4BAA4B,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;QACrE,CAAC;QAED,KAAK,CAAC,oBAAoB,CAAC,QAAgB,EAAE,KAAY;YACxD,OAAO,IAAI,CAAC,4BAA4B,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;QACtE,CAAC;QAED,KAAK,CAAC,mBAAmB,CAAC,QAAgB;YACzC,OAAO,IAAI,CAAC,4BAA4B,CAAC,mBAAmB,EAAE,CAAC;QAChE,CAAC;QAED,YAAY;QAGZ,0BAA0B;QAE1B,KAAK,CAAC,kBAAkB;YACvB,OAAO,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,EAAE,CAAC;QACpD,CAAC;KAGD,CAAA;IAnEY,qBAAqB;QAK/B,WAAA,kEAAgC,CAAA;QAChC,WAAA,6BAAmB,CAAA;QACnB,WAAA,4DAA6B,CAAA;QAC7B,WAAA,2BAAkB,CAAA;OARR,qBAAqB,CAmEjC;IAnEY,sDAAqB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { AddFirstParameterToFunctions } from 'vs/base/common/types';\nimport { IWorkspacesService, IEnterWorkspaceResult, IWorkspaceFolderCreationData, IWorkspaceIdentifier, IRecentlyOpened, IRecent } from 'vs/platform/workspaces/common/workspaces';\nimport { URI } from 'vs/base/common/uri';\nimport { IWorkspacesManagementMainService } from 'vs/platform/workspaces/electron-main/workspacesManagementMainService';\nimport { IWindowsMainService } from 'vs/platform/windows/electron-main/windows';\nimport { IWorkspacesHistoryMainService } from 'vs/platform/workspaces/electron-main/workspacesHistoryMainService';\nimport { IBackupMainService } from 'vs/platform/backup/electron-main/backup';\n\nexport class WorkspacesMainService implements AddFirstParameterToFunctions<IWorkspacesService, Promise<unknown> /* only methods, not events */, number /* window ID */> {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@IWorkspacesManagementMainService private readonly workspacesManagementMainService: IWorkspacesManagementMainService,\n\t\t@IWindowsMainService private readonly windowsMainService: IWindowsMainService,\n\t\t@IWorkspacesHistoryMainService private readonly workspacesHistoryMainService: IWorkspacesHistoryMainService,\n\t\t@IBackupMainService private readonly backupMainService: IBackupMainService\n\t) {\n\t}\n\n\t//#region Workspace Management\n\n\tasync enterWorkspace(windowId: number, path: URI): Promise<IEnterWorkspaceResult | null> {\n\t\tconst window = this.windowsMainService.getWindowById(windowId);\n\t\tif (window) {\n\t\t\treturn this.workspacesManagementMainService.enterWorkspace(window, this.windowsMainService.getWindows(), path);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tcreateUntitledWorkspace(windowId: number, folders?: IWorkspaceFolderCreationData[], remoteAuthority?: string): Promise<IWorkspaceIdentifier> {\n\t\treturn this.workspacesManagementMainService.createUntitledWorkspace(folders, remoteAuthority);\n\t}\n\n\tdeleteUntitledWorkspace(windowId: number, workspace: IWorkspaceIdentifier): Promise<void> {\n\t\treturn this.workspacesManagementMainService.deleteUntitledWorkspace(workspace);\n\t}\n\n\tgetWorkspaceIdentifier(windowId: number, workspacePath: URI): Promise<IWorkspaceIdentifier> {\n\t\treturn this.workspacesManagementMainService.getWorkspaceIdentifier(workspacePath);\n\t}\n\n\t//#endregion\n\n\t//#region Workspaces History\n\n\treadonly onDidChangeRecentlyOpened = this.workspacesHistoryMainService.onDidChangeRecentlyOpened;\n\n\tasync getRecentlyOpened(windowId: number): Promise<IRecentlyOpened> {\n\t\treturn this.workspacesHistoryMainService.getRecentlyOpened(this.windowsMainService.getWindowById(windowId));\n\t}\n\n\tasync addRecentlyOpened(windowId: number, recents: IRecent[]): Promise<void> {\n\t\treturn this.workspacesHistoryMainService.addRecentlyOpened(recents);\n\t}\n\n\tasync removeRecentlyOpened(windowId: number, paths: URI[]): Promise<void> {\n\t\treturn this.workspacesHistoryMainService.removeRecentlyOpened(paths);\n\t}\n\n\tasync clearRecentlyOpened(windowId: number): Promise<void> {\n\t\treturn this.workspacesHistoryMainService.clearRecentlyOpened();\n\t}\n\n\t//#endregion\n\n\n\t//#region Dirty Workspaces\n\n\tasync getDirtyWorkspaces(): Promise<Array<IWorkspaceIdentifier | URI>> {\n\t\treturn this.backupMainService.getDirtyWorkspaces();\n\t}\n\n\t//#endregion\n}\n"]}