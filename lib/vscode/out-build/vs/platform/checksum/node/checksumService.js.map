{"version":3,"file":"checksumService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/checksum/node/checksumService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAQhG,IAAa,eAAe,GAA5B,MAAa,eAAe;QAI3B,YAA2C,WAAyB;YAAzB,gBAAW,GAAX,WAAW,CAAc;QAAI,CAAC;QAEzE,QAAQ,CAAC,QAAa;YACrB,OAAO,IAAI,OAAO,CAAS,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE;gBACpD,MAAM,IAAI,GAAG,CAAA,GAAA,mBAAU,CAAA,CAAC,KAAK,CAAC,CAAC;gBAC/B,MAAM,MAAM,GAAG,CAAC,MAAM,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC;gBAEvE,CAAA,GAAA,qBAAY,CAAA,CAAC,MAAM,EAAE;oBACpB,MAAM,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;oBACxC,OAAO,EAAE,KAAK,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC;oBAC/B,KAAK,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;iBAC9D,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;QACJ,CAAC;KACD,CAAA;IAlBY,eAAe;QAId,WAAA,oBAAY,CAAA;OAJb,eAAe,CAkB3B;IAlBY,0CAAe","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createHash } from 'crypto';\nimport { listenStream } from 'vs/base/common/stream';\nimport { URI } from 'vs/base/common/uri';\nimport { IChecksumService } from 'vs/platform/checksum/common/checksumService';\nimport { IFileService } from 'vs/platform/files/common/files';\n\nexport class ChecksumService implements IChecksumService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(@IFileService private readonly fileService: IFileService) { }\n\n\tchecksum(resource: URI): Promise<string> {\n\t\treturn new Promise<string>(async (resolve, reject) => {\n\t\t\tconst hash = createHash('md5');\n\t\t\tconst stream = (await this.fileService.readFileStream(resource)).value;\n\n\t\t\tlistenStream(stream, {\n\t\t\t\tonData: data => hash.update(data.buffer),\n\t\t\t\tonError: error => reject(error),\n\t\t\t\tonEnd: () => resolve(hash.digest('base64').replace(/=+$/, ''))\n\t\t\t});\n\t\t});\n\t}\n}\n"]}