{"version":3,"sources":["vs/platform/files/common/files.ts"],"names":[],"mappings":"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","file":"files.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { sep } from 'vs/base/common/path';\nimport { URI } from 'vs/base/common/uri';\nimport { IExpression } from 'vs/base/common/glob';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { Event } from 'vs/base/common/event';\nimport { startsWithIgnoreCase } from 'vs/base/common/strings';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { isNumber, isUndefinedOrNull } from 'vs/base/common/types';\nimport { VSBuffer, VSBufferReadable, VSBufferReadableStream } from 'vs/base/common/buffer';\nimport { ReadableStreamEvents } from 'vs/base/common/stream';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { TernarySearchTree } from 'vs/base/common/map';\n\n//#region file service & providers\n\nexport const IFileService = createDecorator<IFileService>('fileService');\n\nexport interface IFileService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * An event that is fired when a file system provider is added or removed\n\t */\n\treadonly onDidChangeFileSystemProviderRegistrations: Event<IFileSystemProviderRegistrationEvent>;\n\n\t/**\n\t * An event that is fired when a registered file system provider changes it's capabilities.\n\t */\n\treadonly onDidChangeFileSystemProviderCapabilities: Event<IFileSystemProviderCapabilitiesChangeEvent>;\n\n\t/**\n\t * An event that is fired when a file system provider is about to be activated. Listeners\n\t * can join this event with a long running promise to help in the activation process.\n\t */\n\treadonly onWillActivateFileSystemProvider: Event<IFileSystemProviderActivationEvent>;\n\n\t/**\n\t * Registers a file system provider for a certain scheme.\n\t */\n\tregisterProvider(scheme: string, provider: IFileSystemProvider): IDisposable;\n\n\t/**\n\t * Returns a file system provider for a certain scheme.\n\t */\n\tgetProvider(scheme: string): IFileSystemProvider | undefined;\n\n\t/**\n\t * Tries to activate a provider with the given scheme.\n\t */\n\tactivateProvider(scheme: string): Promise<void>;\n\n\t/**\n\t * Checks if this file service can handle the given resource.\n\t */\n\tcanHandleResource(resource: URI): boolean;\n\n\t/**\n\t * Checks if the provider for the provided resource has the provided file system capability.\n\t */\n\thasCapability(resource: URI, capability: FileSystemProviderCapabilities): boolean;\n\n\t/**\n\t * List the schemes and capabilies for registered file system providers\n\t */\n\tlistCapabilities(): Iterable<{ scheme: string, capabilities: FileSystemProviderCapabilities }>\n\n\t/**\n\t * Allows to listen for file changes. The event will fire for every file within the opened workspace\n\t * (if any) as well as all files that have been watched explicitly using the #watch() API.\n\t */\n\treadonly onDidFilesChange: Event<FileChangesEvent>;\n\n\t/**\n\t * An event that is fired upon successful completion of a certain file operation.\n\t */\n\treadonly onDidRunOperation: Event<FileOperationEvent>;\n\n\t/**\n\t * Resolve the properties of a file/folder identified by the resource.\n\t *\n\t * If the optional parameter \"resolveTo\" is specified in options, the stat service is asked\n\t * to provide a stat object that should contain the full graph of folders up to all of the\n\t * target resources.\n\t *\n\t * If the optional parameter \"resolveSingleChildDescendants\" is specified in options,\n\t * the stat service is asked to automatically resolve child folders that only\n\t * contain a single element.\n\t *\n\t * If the optional parameter \"resolveMetadata\" is specified in options,\n\t * the stat will contain metadata information such as size, mtime and etag.\n\t */\n\tresolve(resource: URI, options: IResolveMetadataFileOptions): Promise<IFileStatWithMetadata>;\n\tresolve(resource: URI, options?: IResolveFileOptions): Promise<IFileStat>;\n\n\t/**\n\t * Same as resolve() but supports resolving multiple resources in parallel.\n\t * If one of the resolve targets fails to resolve returns a fake IFileStat instead of making the whole call fail.\n\t */\n\tresolveAll(toResolve: { resource: URI, options: IResolveMetadataFileOptions }[]): Promise<IResolveFileResult[]>;\n\tresolveAll(toResolve: { resource: URI, options?: IResolveFileOptions }[]): Promise<IResolveFileResult[]>;\n\n\t/**\n\t * Finds out if a file/folder identified by the resource exists.\n\t */\n\texists(resource: URI): Promise<boolean>;\n\n\t/**\n\t * Read the contents of the provided resource unbuffered.\n\t */\n\treadFile(resource: URI, options?: IReadFileOptions): Promise<IFileContent>;\n\n\t/**\n\t * Read the contents of the provided resource buffered as stream.\n\t */\n\treadFileStream(resource: URI, options?: IReadFileStreamOptions): Promise<IFileStreamContent>;\n\n\t/**\n\t * Updates the content replacing its previous value.\n\t */\n\twriteFile(resource: URI, bufferOrReadableOrStream: VSBuffer | VSBufferReadable | VSBufferReadableStream, options?: IWriteFileOptions): Promise<IFileStatWithMetadata>;\n\n\t/**\n\t * Moves the file/folder to a new path identified by the resource.\n\t *\n\t * The optional parameter overwrite can be set to replace an existing file at the location.\n\t */\n\tmove(source: URI, target: URI, overwrite?: boolean): Promise<IFileStatWithMetadata>;\n\n\t/**\n\t * Find out if a move operation is possible given the arguments. No changes on disk will\n\t * be performed. Returns an Error if the operation cannot be done.\n\t */\n\tcanMove(source: URI, target: URI, overwrite?: boolean): Promise<Error | true>;\n\n\t/**\n\t * Copies the file/folder to a path identified by the resource.\n\t *\n\t * The optional parameter overwrite can be set to replace an existing file at the location.\n\t */\n\tcopy(source: URI, target: URI, overwrite?: boolean): Promise<IFileStatWithMetadata>;\n\n\t/**\n\t * Find out if a copy operation is possible given the arguments. No changes on disk will\n\t * be performed. Returns an Error if the operation cannot be done.\n\t */\n\tcanCopy(source: URI, target: URI, overwrite?: boolean): Promise<Error | true>;\n\n\t/**\n\t * Find out if a file create operation is possible given the arguments. No changes on disk will\n\t * be performed. Returns an Error if the operation cannot be done.\n\t */\n\tcanCreateFile(resource: URI, options?: ICreateFileOptions): Promise<Error | true>;\n\n\t/**\n\t * Creates a new file with the given path and optional contents. The returned promise\n\t * will have the stat model object as a result.\n\t *\n\t * The optional parameter content can be used as value to fill into the new file.\n\t */\n\tcreateFile(resource: URI, bufferOrReadableOrStream?: VSBuffer | VSBufferReadable | VSBufferReadableStream, options?: ICreateFileOptions): Promise<IFileStatWithMetadata>;\n\n\t/**\n\t * Creates a new folder with the given path. The returned promise\n\t * will have the stat model object as a result.\n\t */\n\tcreateFolder(resource: URI): Promise<IFileStatWithMetadata>;\n\n\t/**\n\t * Deletes the provided file. The optional useTrash parameter allows to\n\t * move the file to trash. The optional recursive parameter allows to delete\n\t * non-empty folders recursively.\n\t */\n\tdel(resource: URI, options?: Partial<FileDeleteOptions>): Promise<void>;\n\n\t/**\n\t * Find out if a delete operation is possible given the arguments. No changes on disk will\n\t * be performed. Returns an Error if the operation cannot be done.\n\t */\n\tcanDelete(resource: URI, options?: Partial<FileDeleteOptions>): Promise<Error | true>;\n\n\t/**\n\t * Allows to start a watcher that reports file/folder change events on the provided resource.\n\t *\n\t * Note: watching a folder does not report events recursively for child folders yet.\n\t */\n\twatch(resource: URI): IDisposable;\n\n\t/**\n\t * Frees up any resources occupied by this service.\n\t */\n\tdispose(): void;\n}\n\nexport interface FileOverwriteOptions {\n\n\t/**\n\t * Set to `true` to overwrite a file if it exists. Will\n\t * throw an error otherwise if the file does exist.\n\t */\n\treadonly overwrite: boolean;\n}\n\nexport interface FileUnlockOptions {\n\n\t/**\n\t * Set to `true` to try to remove any write locks the file might\n\t * have. A file that is write locked will throw an error for any\n\t * attempt to write to unless `unlock: true` is provided.\n\t */\n\treadonly unlock: boolean;\n}\n\nexport interface FileReadStreamOptions {\n\n\t/**\n\t * Is an integer specifying where to begin reading from in the file. If position is undefined,\n\t * data will be read from the current file position.\n\t */\n\treadonly position?: number;\n\n\t/**\n\t * Is an integer specifying how many bytes to read from the file. By default, all bytes\n\t * will be read.\n\t */\n\treadonly length?: number;\n\n\t/**\n\t * If provided, the size of the file will be checked against the limits.\n\t */\n\tlimits?: {\n\t\treadonly size?: number;\n\t\treadonly memory?: number;\n\t};\n}\n\nexport interface FileWriteOptions extends FileOverwriteOptions, FileUnlockOptions {\n\n\t/**\n\t * Set to `true` to create a file when it does not exist. Will\n\t * throw an error otherwise if the file does not exist.\n\t */\n\treadonly create: boolean;\n}\n\nexport type FileOpenOptions = FileOpenForReadOptions | FileOpenForWriteOptions;\n\nexport function isFileOpenForWriteOptions(options: FileOpenOptions): options is FileOpenForWriteOptions {\n\treturn options.create === true;\n}\n\nexport interface FileOpenForReadOptions {\n\n\t/**\n\t * A hint that the file should be opened for reading only.\n\t */\n\treadonly create: false;\n}\n\nexport interface FileOpenForWriteOptions extends FileUnlockOptions {\n\n\t/**\n\t * A hint that the file should be opened for reading and writing.\n\t */\n\treadonly create: true;\n}\n\nexport interface FileDeleteOptions {\n\n\t/**\n\t * Set to `true` to recursively delete any children of the file. This\n\t * only applies to folders and can lead to an error unless provided\n\t * if the folder is not empty.\n\t */\n\treadonly recursive: boolean;\n\n\t/**\n\t * Set to `true` to attempt to move the file to trash\n\t * instead of deleting it permanently from disk. This\n\t * option maybe not be supported on all providers.\n\t */\n\treadonly useTrash: boolean;\n}\n\nexport enum FileType {\n\n\t/**\n\t * File is unknown (neither file, directory nor symbolic link).\n\t */\n\tUnknown = 0,\n\n\t/**\n\t * File is a normal file.\n\t */\n\tFile = 1,\n\n\t/**\n\t * File is a directory.\n\t */\n\tDirectory = 2,\n\n\t/**\n\t * File is a symbolic link.\n\t *\n\t * Note: even when the file is a symbolic link, you can test for\n\t * `FileType.File` and `FileType.Directory` to know the type of\n\t * the target the link points to.\n\t */\n\tSymbolicLink = 64\n}\n\nexport interface IStat {\n\n\t/**\n\t * The file type.\n\t */\n\treadonly type: FileType;\n\n\t/**\n\t * The last modification date represented as millis from unix epoch.\n\t */\n\treadonly mtime: number;\n\n\t/**\n\t * The creation date represented as millis from unix epoch.\n\t */\n\treadonly ctime: number;\n\n\t/**\n\t * The size of the file in bytes.\n\t */\n\tsize: number;\n}\n\nexport interface IWatchOptions {\n\n\t/**\n\t * Set to `true` to watch for changes recursively in a folder\n\t * and all of its children.\n\t */\n\treadonly recursive: boolean;\n\n\t/**\n\t * A set of paths to exclude from watching.\n\t */\n\texcludes: string[];\n}\n\nexport const enum FileSystemProviderCapabilities {\n\n\t/**\n\t * Provider supports unbuffered read/write.\n\t */\n\tFileReadWrite = 1 << 1,\n\n\t/**\n\t * Provider supports open/read/write/close low level file operations.\n\t */\n\tFileOpenReadWriteClose = 1 << 2,\n\n\t/**\n\t * Provider supports stream based reading.\n\t */\n\tFileReadStream = 1 << 4,\n\n\t/**\n\t * Provider supports copy operation.\n\t */\n\tFileFolderCopy = 1 << 3,\n\n\t/**\n\t * Provider is path case sensitive.\n\t */\n\tPathCaseSensitive = 1 << 10,\n\n\t/**\n\t * All files of the provider are readonly.\n\t */\n\tReadonly = 1 << 11,\n\n\t/**\n\t * Provider supports to delete via trash.\n\t */\n\tTrash = 1 << 12,\n\n\t/**\n\t * Provider support to unlock files for writing.\n\t */\n\tFileWriteUnlock = 1 << 13\n}\n\nexport interface IFileSystemProvider {\n\n\treadonly capabilities: FileSystemProviderCapabilities;\n\treadonly onDidChangeCapabilities: Event<void>;\n\n\treadonly onDidErrorOccur?: Event<string>; // TODO@bpasero remove once file watchers are solid\n\n\treadonly onDidChangeFile: Event<readonly IFileChange[]>;\n\twatch(resource: URI, opts: IWatchOptions): IDisposable;\n\n\tstat(resource: URI): Promise<IStat>;\n\tmkdir(resource: URI): Promise<void>;\n\treaddir(resource: URI): Promise<[string, FileType][]>;\n\tdelete(resource: URI, opts: FileDeleteOptions): Promise<void>;\n\n\trename(from: URI, to: URI, opts: FileOverwriteOptions): Promise<void>;\n\tcopy?(from: URI, to: URI, opts: FileOverwriteOptions): Promise<void>;\n\n\treadFile?(resource: URI): Promise<Uint8Array>;\n\twriteFile?(resource: URI, content: Uint8Array, opts: FileWriteOptions): Promise<void>;\n\n\treadFileStream?(resource: URI, opts: FileReadStreamOptions, token: CancellationToken): ReadableStreamEvents<Uint8Array>;\n\n\topen?(resource: URI, opts: FileOpenOptions): Promise<number>;\n\tclose?(fd: number): Promise<void>;\n\tread?(fd: number, pos: number, data: Uint8Array, offset: number, length: number): Promise<number>;\n\twrite?(fd: number, pos: number, data: Uint8Array, offset: number, length: number): Promise<number>;\n}\n\nexport interface IFileSystemProviderWithFileReadWriteCapability extends IFileSystemProvider {\n\treadFile(resource: URI): Promise<Uint8Array>;\n\twriteFile(resource: URI, content: Uint8Array, opts: FileWriteOptions): Promise<void>;\n}\n\nexport function hasReadWriteCapability(provider: IFileSystemProvider): provider is IFileSystemProviderWithFileReadWriteCapability {\n\treturn !!(provider.capabilities & FileSystemProviderCapabilities.FileReadWrite);\n}\n\nexport interface IFileSystemProviderWithFileFolderCopyCapability extends IFileSystemProvider {\n\tcopy(from: URI, to: URI, opts: FileOverwriteOptions): Promise<void>;\n}\n\nexport function hasFileFolderCopyCapability(provider: IFileSystemProvider): provider is IFileSystemProviderWithFileFolderCopyCapability {\n\treturn !!(provider.capabilities & FileSystemProviderCapabilities.FileFolderCopy);\n}\n\nexport interface IFileSystemProviderWithOpenReadWriteCloseCapability extends IFileSystemProvider {\n\topen(resource: URI, opts: FileOpenOptions): Promise<number>;\n\tclose(fd: number): Promise<void>;\n\tread(fd: number, pos: number, data: Uint8Array, offset: number, length: number): Promise<number>;\n\twrite(fd: number, pos: number, data: Uint8Array, offset: number, length: number): Promise<number>;\n}\n\nexport function hasOpenReadWriteCloseCapability(provider: IFileSystemProvider): provider is IFileSystemProviderWithOpenReadWriteCloseCapability {\n\treturn !!(provider.capabilities & FileSystemProviderCapabilities.FileOpenReadWriteClose);\n}\n\nexport interface IFileSystemProviderWithFileReadStreamCapability extends IFileSystemProvider {\n\treadFileStream(resource: URI, opts: FileReadStreamOptions, token: CancellationToken): ReadableStreamEvents<Uint8Array>;\n}\n\nexport function hasFileReadStreamCapability(provider: IFileSystemProvider): provider is IFileSystemProviderWithFileReadStreamCapability {\n\treturn !!(provider.capabilities & FileSystemProviderCapabilities.FileReadStream);\n}\n\nexport enum FileSystemProviderErrorCode {\n\tFileExists = 'EntryExists',\n\tFileNotFound = 'EntryNotFound',\n\tFileNotADirectory = 'EntryNotADirectory',\n\tFileIsADirectory = 'EntryIsADirectory',\n\tFileExceedsMemoryLimit = 'EntryExceedsMemoryLimit',\n\tFileTooLarge = 'EntryTooLarge',\n\tFileWriteLocked = 'EntryWriteLocked',\n\tNoPermissions = 'NoPermissions',\n\tUnavailable = 'Unavailable',\n\tUnknown = 'Unknown'\n}\n\nexport class FileSystemProviderError extends Error {\n\n\tconstructor(message: string, public readonly code: FileSystemProviderErrorCode) {\n\t\tsuper(message);\n\t}\n}\n\nexport function createFileSystemProviderError(error: Error | string, code: FileSystemProviderErrorCode): FileSystemProviderError {\n\tconst providerError = new FileSystemProviderError(error.toString(), code);\n\tmarkAsFileSystemProviderError(providerError, code);\n\n\treturn providerError;\n}\n\nexport function ensureFileSystemProviderError(error?: Error): Error {\n\tif (!error) {\n\t\treturn createFileSystemProviderError(localize('unknownError', \"Unknown Error\"), FileSystemProviderErrorCode.Unknown); // https://github.com/microsoft/vscode/issues/72798\n\t}\n\n\treturn error;\n}\n\nexport function markAsFileSystemProviderError(error: Error, code: FileSystemProviderErrorCode): Error {\n\terror.name = code ? `${code} (FileSystemError)` : `FileSystemError`;\n\n\treturn error;\n}\n\nexport function toFileSystemProviderErrorCode(error: Error | undefined | null): FileSystemProviderErrorCode {\n\n\t// Guard against abuse\n\tif (!error) {\n\t\treturn FileSystemProviderErrorCode.Unknown;\n\t}\n\n\t// FileSystemProviderError comes with the code\n\tif (error instanceof FileSystemProviderError) {\n\t\treturn error.code;\n\t}\n\n\t// Any other error, check for name match by assuming that the error\n\t// went through the markAsFileSystemProviderError() method\n\tconst match = /^(.+) \\(FileSystemError\\)$/.exec(error.name);\n\tif (!match) {\n\t\treturn FileSystemProviderErrorCode.Unknown;\n\t}\n\n\tswitch (match[1]) {\n\t\tcase FileSystemProviderErrorCode.FileExists: return FileSystemProviderErrorCode.FileExists;\n\t\tcase FileSystemProviderErrorCode.FileIsADirectory: return FileSystemProviderErrorCode.FileIsADirectory;\n\t\tcase FileSystemProviderErrorCode.FileNotADirectory: return FileSystemProviderErrorCode.FileNotADirectory;\n\t\tcase FileSystemProviderErrorCode.FileNotFound: return FileSystemProviderErrorCode.FileNotFound;\n\t\tcase FileSystemProviderErrorCode.FileExceedsMemoryLimit: return FileSystemProviderErrorCode.FileExceedsMemoryLimit;\n\t\tcase FileSystemProviderErrorCode.FileTooLarge: return FileSystemProviderErrorCode.FileTooLarge;\n\t\tcase FileSystemProviderErrorCode.FileWriteLocked: return FileSystemProviderErrorCode.FileWriteLocked;\n\t\tcase FileSystemProviderErrorCode.NoPermissions: return FileSystemProviderErrorCode.NoPermissions;\n\t\tcase FileSystemProviderErrorCode.Unavailable: return FileSystemProviderErrorCode.Unavailable;\n\t}\n\n\treturn FileSystemProviderErrorCode.Unknown;\n}\n\nexport function toFileOperationResult(error: Error): FileOperationResult {\n\n\t// FileSystemProviderError comes with the result already\n\tif (error instanceof FileOperationError) {\n\t\treturn error.fileOperationResult;\n\t}\n\n\t// Otherwise try to find from code\n\tswitch (toFileSystemProviderErrorCode(error)) {\n\t\tcase FileSystemProviderErrorCode.FileNotFound:\n\t\t\treturn FileOperationResult.FILE_NOT_FOUND;\n\t\tcase FileSystemProviderErrorCode.FileIsADirectory:\n\t\t\treturn FileOperationResult.FILE_IS_DIRECTORY;\n\t\tcase FileSystemProviderErrorCode.FileNotADirectory:\n\t\t\treturn FileOperationResult.FILE_NOT_DIRECTORY;\n\t\tcase FileSystemProviderErrorCode.FileWriteLocked:\n\t\t\treturn FileOperationResult.FILE_WRITE_LOCKED;\n\t\tcase FileSystemProviderErrorCode.NoPermissions:\n\t\t\treturn FileOperationResult.FILE_PERMISSION_DENIED;\n\t\tcase FileSystemProviderErrorCode.FileExists:\n\t\t\treturn FileOperationResult.FILE_MOVE_CONFLICT;\n\t\tcase FileSystemProviderErrorCode.FileExceedsMemoryLimit:\n\t\t\treturn FileOperationResult.FILE_EXCEEDS_MEMORY_LIMIT;\n\t\tcase FileSystemProviderErrorCode.FileTooLarge:\n\t\t\treturn FileOperationResult.FILE_TOO_LARGE;\n\t\tdefault:\n\t\t\treturn FileOperationResult.FILE_OTHER_ERROR;\n\t}\n}\n\nexport interface IFileSystemProviderRegistrationEvent {\n\treadonly added: boolean;\n\treadonly scheme: string;\n\treadonly provider?: IFileSystemProvider;\n}\n\nexport interface IFileSystemProviderCapabilitiesChangeEvent {\n\treadonly provider: IFileSystemProvider;\n\treadonly scheme: string;\n}\n\nexport interface IFileSystemProviderActivationEvent {\n\treadonly scheme: string;\n\tjoin(promise: Promise<void>): void;\n}\n\nexport const enum FileOperation {\n\tCREATE,\n\tDELETE,\n\tMOVE,\n\tCOPY\n}\n\nexport class FileOperationEvent {\n\n\tconstructor(resource: URI, operation: FileOperation.DELETE);\n\tconstructor(resource: URI, operation: FileOperation.CREATE | FileOperation.MOVE | FileOperation.COPY, target: IFileStatWithMetadata);\n\tconstructor(public readonly resource: URI, public readonly operation: FileOperation, public readonly target?: IFileStatWithMetadata) { }\n\n\tisOperation(operation: FileOperation.DELETE): boolean;\n\tisOperation(operation: FileOperation.MOVE | FileOperation.COPY | FileOperation.CREATE): this is { readonly target: IFileStatWithMetadata };\n\tisOperation(operation: FileOperation): boolean {\n\t\treturn this.operation === operation;\n\t}\n}\n\n/**\n * Possible changes that can occur to a file.\n */\nexport const enum FileChangeType {\n\tUPDATED,\n\tADDED,\n\tDELETED\n}\n\n/**\n * Identifies a single change in a file.\n */\nexport interface IFileChange {\n\n\t/**\n\t * The type of change that occurred to the file.\n\t */\n\treadonly type: FileChangeType;\n\n\t/**\n\t * The unified resource identifier of the file that changed.\n\t */\n\treadonly resource: URI;\n}\n\nexport class FileChangesEvent {\n\n\t/**\n\t * @deprecated use the `contains()` or `affects` method to efficiently find\n\t * out if the event relates to a given resource. these methods ensure:\n\t * - that there is no expensive lookup needed (by using a `TernarySearchTree`)\n\t * - correctly handles `FileChangeType.DELETED` events\n\t */\n\treadonly changes: readonly IFileChange[];\n\n\tprivate readonly added: TernarySearchTree<URI, IFileChange> | undefined = undefined;\n\tprivate readonly updated: TernarySearchTree<URI, IFileChange> | undefined = undefined;\n\tprivate readonly deleted: TernarySearchTree<URI, IFileChange> | undefined = undefined;\n\n\tconstructor(changes: readonly IFileChange[], private readonly ignorePathCasing: boolean) {\n\t\tthis.changes = changes;\n\n\t\tfor (const change of changes) {\n\t\t\tswitch (change.type) {\n\t\t\t\tcase FileChangeType.ADDED:\n\t\t\t\t\tif (!this.added) {\n\t\t\t\t\t\tthis.added = TernarySearchTree.forUris<IFileChange>(() => this.ignorePathCasing);\n\t\t\t\t\t}\n\t\t\t\t\tthis.added.set(change.resource, change);\n\t\t\t\t\tbreak;\n\t\t\t\tcase FileChangeType.UPDATED:\n\t\t\t\t\tif (!this.updated) {\n\t\t\t\t\t\tthis.updated = TernarySearchTree.forUris<IFileChange>(() => this.ignorePathCasing);\n\t\t\t\t\t}\n\t\t\t\t\tthis.updated.set(change.resource, change);\n\t\t\t\t\tbreak;\n\t\t\t\tcase FileChangeType.DELETED:\n\t\t\t\t\tif (!this.deleted) {\n\t\t\t\t\t\tthis.deleted = TernarySearchTree.forUris<IFileChange>(() => this.ignorePathCasing);\n\t\t\t\t\t}\n\t\t\t\t\tthis.deleted.set(change.resource, change);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Find out if the file change events match the provided resource.\n\t *\n\t * Note: when passing `FileChangeType.DELETED`, we consider a match\n\t * also when the parent of the resource got deleted.\n\t */\n\tcontains(resource: URI, ...types: FileChangeType[]): boolean {\n\t\treturn this.doContains(resource, { includeChildren: false }, ...types);\n\t}\n\n\t/**\n\t * Find out if the file change events either match the provided\n\t * resource, or contain a child of this resource.\n\t */\n\taffects(resource: URI, ...types: FileChangeType[]): boolean {\n\t\treturn this.doContains(resource, { includeChildren: true }, ...types);\n\t}\n\n\tprivate doContains(resource: URI, options: { includeChildren: boolean }, ...types: FileChangeType[]): boolean {\n\t\tif (!resource) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst hasTypesFilter = types.length > 0;\n\n\t\t// Added\n\t\tif (!hasTypesFilter || types.includes(FileChangeType.ADDED)) {\n\t\t\tif (this.added?.get(resource)) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (options.includeChildren && this.added?.findSuperstr(resource)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\t// Updated\n\t\tif (!hasTypesFilter || types.includes(FileChangeType.UPDATED)) {\n\t\t\tif (this.updated?.get(resource)) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (options.includeChildren && this.updated?.findSuperstr(resource)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\t// Deleted\n\t\tif (!hasTypesFilter || types.includes(FileChangeType.DELETED)) {\n\t\t\tif (this.deleted?.findSubstr(resource) /* deleted also considers parent folders */) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (options.includeChildren && this.deleted?.findSuperstr(resource)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * @deprecated use the `contains()` method to efficiently find out if the event\n\t * relates to a given resource. this method ensures:\n\t * - that there is no expensive lookup needed by using a `TernarySearchTree`\n\t * - correctly handles `FileChangeType.DELETED` events\n\t */\n\tgetAdded(): IFileChange[] {\n\t\treturn this.getOfType(FileChangeType.ADDED);\n\t}\n\n\t/**\n\t * Returns if this event contains added files.\n\t */\n\tgotAdded(): boolean {\n\t\treturn !!this.added;\n\t}\n\n\t/**\n\t * @deprecated use the `contains()` method to efficiently find out if the event\n\t * relates to a given resource. this method ensures:\n\t * - that there is no expensive lookup needed by using a `TernarySearchTree`\n\t * - correctly handles `FileChangeType.DELETED` events\n\t */\n\tgetDeleted(): IFileChange[] {\n\t\treturn this.getOfType(FileChangeType.DELETED);\n\t}\n\n\t/**\n\t * Returns if this event contains deleted files.\n\t */\n\tgotDeleted(): boolean {\n\t\treturn !!this.deleted;\n\t}\n\n\t/**\n\t * @deprecated use the `contains()` method to efficiently find out if the event\n\t * relates to a given resource. this method ensures:\n\t * - that there is no expensive lookup needed by using a `TernarySearchTree`\n\t * - correctly handles `FileChangeType.DELETED` events\n\t */\n\tgetUpdated(): IFileChange[] {\n\t\treturn this.getOfType(FileChangeType.UPDATED);\n\t}\n\n\t/**\n\t * Returns if this event contains updated files.\n\t */\n\tgotUpdated(): boolean {\n\t\treturn !!this.updated;\n\t}\n\n\tprivate getOfType(type: FileChangeType): IFileChange[] {\n\t\tconst changes: IFileChange[] = [];\n\n\t\tconst eventsForType = type === FileChangeType.ADDED ? this.added : type === FileChangeType.UPDATED ? this.updated : this.deleted;\n\t\tif (eventsForType) {\n\t\t\tfor (const [, change] of eventsForType) {\n\t\t\t\tchanges.push(change);\n\t\t\t}\n\t\t}\n\n\t\treturn changes;\n\t}\n\n\t/**\n\t * @deprecated use the `contains()` method to efficiently find out if the event\n\t * relates to a given resource. this method ensures:\n\t * - that there is no expensive lookup needed by using a `TernarySearchTree`\n\t * - correctly handles `FileChangeType.DELETED` events\n\t */\n\tfilter(filterFn: (change: IFileChange) => boolean): FileChangesEvent {\n\t\treturn new FileChangesEvent(this.changes.filter(change => filterFn(change)), this.ignorePathCasing);\n\t}\n}\n\nexport function isParent(path: string, candidate: string, ignoreCase?: boolean): boolean {\n\tif (!path || !candidate || path === candidate) {\n\t\treturn false;\n\t}\n\n\tif (candidate.length > path.length) {\n\t\treturn false;\n\t}\n\n\tif (candidate.charAt(candidate.length - 1) !== sep) {\n\t\tcandidate += sep;\n\t}\n\n\tif (ignoreCase) {\n\t\treturn startsWithIgnoreCase(path, candidate);\n\t}\n\n\treturn path.indexOf(candidate) === 0;\n}\n\ninterface IBaseStat {\n\n\t/**\n\t * The unified resource identifier of this file or folder.\n\t */\n\treadonly resource: URI;\n\n\t/**\n\t * The name which is the last segment\n\t * of the {{path}}.\n\t */\n\treadonly name: string;\n\n\t/**\n\t * The size of the file.\n\t *\n\t * The value may or may not be resolved as\n\t * it is optional.\n\t */\n\treadonly size?: number;\n\n\t/**\n\t * The last modification date represented as millis from unix epoch.\n\t *\n\t * The value may or may not be resolved as\n\t * it is optional.\n\t */\n\treadonly mtime?: number;\n\n\t/**\n\t * The creation date represented as millis from unix epoch.\n\t *\n\t * The value may or may not be resolved as\n\t * it is optional.\n\t */\n\treadonly ctime?: number;\n\n\t/**\n\t * A unique identifier thet represents the\n\t * current state of the file or directory.\n\t *\n\t * The value may or may not be resolved as\n\t * it is optional.\n\t */\n\treadonly etag?: string;\n}\n\nexport interface IBaseStatWithMetadata extends Required<IBaseStat> { }\n\n/**\n * A file resource with meta information.\n */\nexport interface IFileStat extends IBaseStat {\n\n\t/**\n\t * The resource is a file.\n\t */\n\treadonly isFile: boolean;\n\n\t/**\n\t * The resource is a directory.\n\t */\n\treadonly isDirectory: boolean;\n\n\t/**\n\t * The resource is a symbolic link. Note: even when the\n\t * file is a symbolic link, you can test for `FileType.File`\n\t * and `FileType.Directory` to know the type of the target\n\t * the link points to.\n\t */\n\treadonly isSymbolicLink: boolean;\n\n\t/**\n\t * The children of the file stat or undefined if none.\n\t */\n\tchildren?: IFileStat[];\n}\n\nexport interface IFileStatWithMetadata extends IFileStat, IBaseStatWithMetadata {\n\treadonly mtime: number;\n\treadonly ctime: number;\n\treadonly etag: string;\n\treadonly size: number;\n\treadonly children?: IFileStatWithMetadata[];\n}\n\nexport interface IResolveFileResult {\n\treadonly stat?: IFileStat;\n\treadonly success: boolean;\n}\n\nexport interface IResolveFileResultWithMetadata extends IResolveFileResult {\n\treadonly stat?: IFileStatWithMetadata;\n}\n\nexport interface IFileContent extends IBaseStatWithMetadata {\n\n\t/**\n\t * The content of a file as buffer.\n\t */\n\treadonly value: VSBuffer;\n}\n\nexport interface IFileStreamContent extends IBaseStatWithMetadata {\n\n\t/**\n\t * The content of a file as stream.\n\t */\n\treadonly value: VSBufferReadableStream;\n}\n\nexport interface IBaseReadFileOptions extends FileReadStreamOptions {\n\n\t/**\n\t * The optional etag parameter allows to return early from resolving the resource if\n\t * the contents on disk match the etag. This prevents accumulated reading of resources\n\t * that have been read already with the same etag.\n\t * It is the task of the caller to makes sure to handle this error case from the promise.\n\t */\n\treadonly etag?: string;\n}\n\nexport interface IReadFileStreamOptions extends IBaseReadFileOptions { }\n\nexport interface IReadFileOptions extends IBaseReadFileOptions {\n\n\t/**\n\t * The optional `atomic` flag can be used to make sure\n\t * the `readFile` method is not running in parallel with\n\t * any `write` operations in the same process.\n\t *\n\t * Typically you should not need to use this flag but if\n\t * for example you are quickly reading a file right after\n\t * a file event occured and the file changes a lot, there\n\t * is a chance that a read returns an empty or partial file\n\t * because a pending write has not finished yet.\n\t *\n\t * Note: this does not prevent the file from being written\n\t * to from a different process. If you need such atomic\n\t * operations, you better use a real database as storage.\n\t */\n\treadonly atomic?: boolean;\n}\n\nexport interface IWriteFileOptions {\n\n\t/**\n\t * The last known modification time of the file. This can be used to prevent dirty writes.\n\t */\n\treadonly mtime?: number;\n\n\t/**\n\t * The etag of the file. This can be used to prevent dirty writes.\n\t */\n\treadonly etag?: string;\n\n\t/**\n\t * Whether to attempt to unlock a file before writing.\n\t */\n\treadonly unlock?: boolean;\n}\n\nexport interface IResolveFileOptions {\n\n\t/**\n\t * Automatically continue resolving children of a directory until the provided resources\n\t * are found.\n\t */\n\treadonly resolveTo?: readonly URI[];\n\n\t/**\n\t * Automatically continue resolving children of a directory if the number of children is 1.\n\t */\n\treadonly resolveSingleChildDescendants?: boolean;\n\n\t/**\n\t * Will resolve mtime, ctime, size and etag of files if enabled. This can have a negative impact\n\t * on performance and thus should only be used when these values are required.\n\t */\n\treadonly resolveMetadata?: boolean;\n}\n\nexport interface IResolveMetadataFileOptions extends IResolveFileOptions {\n\treadonly resolveMetadata: true;\n}\n\nexport interface ICreateFileOptions {\n\n\t/**\n\t * Overwrite the file to create if it already exists on disk. Otherwise\n\t * an error will be thrown (FILE_MODIFIED_SINCE).\n\t */\n\treadonly overwrite?: boolean;\n}\n\nexport class FileOperationError extends Error {\n\tconstructor(message: string, public fileOperationResult: FileOperationResult, public options?: IReadFileOptions & IWriteFileOptions & ICreateFileOptions) {\n\t\tsuper(message);\n\t}\n\n\tstatic isFileOperationError(obj: unknown): obj is FileOperationError {\n\t\treturn obj instanceof Error && !isUndefinedOrNull((obj as FileOperationError).fileOperationResult);\n\t}\n}\n\nexport const enum FileOperationResult {\n\tFILE_IS_DIRECTORY,\n\tFILE_NOT_FOUND,\n\tFILE_NOT_MODIFIED_SINCE,\n\tFILE_MODIFIED_SINCE,\n\tFILE_MOVE_CONFLICT,\n\tFILE_WRITE_LOCKED,\n\tFILE_PERMISSION_DENIED,\n\tFILE_TOO_LARGE,\n\tFILE_INVALID_PATH,\n\tFILE_EXCEEDS_MEMORY_LIMIT,\n\tFILE_NOT_DIRECTORY,\n\tFILE_OTHER_ERROR\n}\n\n//#endregion\n\n//#region Settings\n\nexport const AutoSaveConfiguration = {\n\tOFF: 'off',\n\tAFTER_DELAY: 'afterDelay',\n\tON_FOCUS_CHANGE: 'onFocusChange',\n\tON_WINDOW_CHANGE: 'onWindowChange'\n};\n\nexport const HotExitConfiguration = {\n\tOFF: 'off',\n\tON_EXIT: 'onExit',\n\tON_EXIT_AND_WINDOW_CLOSE: 'onExitAndWindowClose'\n};\n\nexport const FILES_ASSOCIATIONS_CONFIG = 'files.associations';\nexport const FILES_EXCLUDE_CONFIG = 'files.exclude';\n\nexport interface IFilesConfiguration {\n\tfiles: {\n\t\tassociations: { [filepattern: string]: string };\n\t\texclude: IExpression;\n\t\twatcherExclude: { [filepattern: string]: boolean };\n\t\tencoding: string;\n\t\tautoGuessEncoding: boolean;\n\t\tdefaultLanguage: string;\n\t\ttrimTrailingWhitespace: boolean;\n\t\tautoSave: string;\n\t\tautoSaveDelay: number;\n\t\teol: string;\n\t\tenableTrash: boolean;\n\t\thotExit: string;\n\t\tsaveConflictResolution: 'askUser' | 'overwriteFileOnDisk';\n\t};\n}\n\n//#endregion\n\n//#region Utilities\n\nexport enum FileKind {\n\tFILE,\n\tFOLDER,\n\tROOT_FOLDER\n}\n\n/**\n * A hint to disable etag checking for reading/writing.\n */\nexport const ETAG_DISABLED = '';\n\nexport function etag(stat: { mtime: number, size: number }): string;\nexport function etag(stat: { mtime: number | undefined, size: number | undefined }): string | undefined;\nexport function etag(stat: { mtime: number | undefined, size: number | undefined }): string | undefined {\n\tif (typeof stat.size !== 'number' || typeof stat.mtime !== 'number') {\n\t\treturn undefined;\n\t}\n\n\treturn stat.mtime.toString(29) + stat.size.toString(31);\n}\n\nexport async function whenProviderRegistered(file: URI, fileService: IFileService): Promise<void> {\n\tif (fileService.canHandleResource(URI.from({ scheme: file.scheme }))) {\n\t\treturn;\n\t}\n\n\treturn new Promise(resolve => {\n\t\tconst disposable = fileService.onDidChangeFileSystemProviderRegistrations(e => {\n\t\t\tif (e.scheme === file.scheme && e.added) {\n\t\t\t\tdisposable.dispose();\n\t\t\t\tresolve();\n\t\t\t}\n\t\t});\n\t});\n}\n\n/**\n * Native only: limits for memory sizes\n */\nexport const MIN_MAX_MEMORY_SIZE_MB = 2048;\nexport const FALLBACK_MAX_MEMORY_SIZE_MB = 4096;\n\n/**\n * Helper to format a raw byte size into a human readable label.\n */\nexport class ByteSize {\n\n\tstatic readonly KB = 1024;\n\tstatic readonly MB = ByteSize.KB * ByteSize.KB;\n\tstatic readonly GB = ByteSize.MB * ByteSize.KB;\n\tstatic readonly TB = ByteSize.GB * ByteSize.KB;\n\n\tstatic formatSize(size: number): string {\n\t\tif (!isNumber(size)) {\n\t\t\tsize = 0;\n\t\t}\n\n\t\tif (size < ByteSize.KB) {\n\t\t\treturn localize('sizeB', \"{0}B\", size.toFixed(0));\n\t\t}\n\n\t\tif (size < ByteSize.MB) {\n\t\t\treturn localize('sizeKB', \"{0}KB\", (size / ByteSize.KB).toFixed(2));\n\t\t}\n\n\t\tif (size < ByteSize.GB) {\n\t\t\treturn localize('sizeMB', \"{0}MB\", (size / ByteSize.MB).toFixed(2));\n\t\t}\n\n\t\tif (size < ByteSize.TB) {\n\t\t\treturn localize('sizeGB', \"{0}GB\", (size / ByteSize.GB).toFixed(2));\n\t\t}\n\n\t\treturn localize('sizeTB', \"{0}TB\", (size / ByteSize.TB).toFixed(2));\n\t}\n}\n\n// Native only: Arch limits\n\nexport interface IArchLimits {\n\treadonly maxFileSize: number;\n\treadonly maxHeapSize: number;\n}\n\nexport const enum Arch {\n\tIA32,\n\tOTHER\n}\n\nexport function getPlatformLimits(arch: Arch): IArchLimits {\n\treturn {\n\t\tmaxFileSize: arch === Arch.IA32 ? 300 * ByteSize.MB : 16 * ByteSize.GB,  // https://github.com/microsoft/vscode/issues/30180\n\t\tmaxHeapSize: arch === Arch.IA32 ? 700 * ByteSize.MB : 2 * 700 * ByteSize.MB, // https://github.com/v8/v8/blob/5918a23a3d571b9625e5cce246bdd5b46ff7cd8b/src/heap/heap.cc#L149\n\t};\n}\n\n//#endregion\n"]}