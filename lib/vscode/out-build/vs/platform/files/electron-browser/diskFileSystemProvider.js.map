{"version":3,"sources":["vs/platform/files/electron-browser/diskFileSystemProvider.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAUhG,MAAa,sBAAuB,SAAQ,+CAA0B;QAErE,YACC,UAAuB,EACN,iBAAqC,EACtD,OAAwC;YAExC,KAAK,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;YAHV,sBAAiB,GAAjB,iBAAiB,CAAoB;QAIvD,CAAC;QAED,IAAa,YAAY;YACxB,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;gBACxB,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC,YAAY,mBAAuC,CAAC;aAC/E;YAED,OAAO,IAAI,CAAC,aAAa,CAAC;QAC3B,CAAC;QAEkB,KAAK,CAAC,QAAQ,CAAC,QAAgB,EAAE,IAAuB;YAC1E,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;gBACnB,OAAO,KAAK,CAAC,QAAQ,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;aACtC;YAED,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;YACtE,IAAI,CAAC,MAAM,EAAE;gBACZ,MAAM,IAAI,KAAK,CAAC,oBAAS,CAAC,CAAC,CAAC,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAW,EAAE,IAAyC,EAAE,CAAA,GAAA,eAAQ,CAAA,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA,GAAA,cAAQ,CAAA,CAAC,CAAa,EAAE,IAAmC,EAAE,CAAA,GAAA,eAAQ,CAAA,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;aACrM;QACF,CAAC;KACD;IA5BD,wDA4BC","file":"diskFileSystemProvider.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DiskFileSystemProvider as NodeDiskFileSystemProvider, IDiskFileSystemProviderOptions } from 'vs/platform/files/node/diskFileSystemProvider';\nimport { FileDeleteOptions, FileSystemProviderCapabilities } from 'vs/platform/files/common/files';\nimport { isWindows } from 'vs/base/common/platform';\nimport { localize } from 'vs/nls';\nimport { basename } from 'vs/base/common/path';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { INativeHostService } from 'vs/platform/native/electron-sandbox/native';\n\nexport class DiskFileSystemProvider extends NodeDiskFileSystemProvider {\n\n\tconstructor(\n\t\tlogService: ILogService,\n\t\tprivate readonly nativeHostService: INativeHostService,\n\t\toptions?: IDiskFileSystemProviderOptions\n\t) {\n\t\tsuper(logService, options);\n\t}\n\n\toverride get capabilities(): FileSystemProviderCapabilities {\n\t\tif (!this._capabilities) {\n\t\t\tthis._capabilities = super.capabilities | FileSystemProviderCapabilities.Trash;\n\t\t}\n\n\t\treturn this._capabilities;\n\t}\n\n\tprotected override async doDelete(filePath: string, opts: FileDeleteOptions): Promise<void> {\n\t\tif (!opts.useTrash) {\n\t\t\treturn super.doDelete(filePath, opts);\n\t\t}\n\n\t\tconst result = await this.nativeHostService.moveItemToTrash(filePath);\n\t\tif (!result) {\n\t\t\tthrow new Error(isWindows ? localize('binFailed', \"Failed to move '{0}' to the recycle bin\", basename(filePath)) : localize('trashFailed', \"Failed to move '{0}' to the trash\", basename(filePath)));\n\t\t}\n\t}\n}\n"]}