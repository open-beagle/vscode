{"version":3,"sources":["vs/platform/files/browser/indexedDBFileSystemProvider.ts"],"names":[],"mappings":"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","file":"indexedDBFileSystemProvider.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { IFileSystemProviderWithFileReadWriteCapability, FileSystemProviderCapabilities, IFileChange, IWatchOptions, IStat, FileOverwriteOptions, FileType, FileDeleteOptions, FileWriteOptions, FileChangeType, createFileSystemProviderError, FileSystemProviderErrorCode } from 'vs/platform/files/common/files';\nimport { Disposable, IDisposable } from 'vs/base/common/lifecycle';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { Throttler } from 'vs/base/common/async';\nimport { localize } from 'vs/nls';\nimport { joinPath } from 'vs/base/common/resources';\n\nconst INDEXEDDB_VSCODE_DB = 'vscode-web-db';\nexport const INDEXEDDB_USERDATA_OBJECT_STORE = 'vscode-userdata-store';\nexport const INDEXEDDB_LOGS_OBJECT_STORE = 'vscode-logs-store';\n\n// Standard FS Errors (expected to be thrown in production when invalid FS operations are requested)\nconst ERR_FILE_NOT_FOUND = createFileSystemProviderError(localize('fileNotExists', \"File does not exist\"), FileSystemProviderErrorCode.FileNotFound);\nconst ERR_FILE_IS_DIR = createFileSystemProviderError(localize('fileIsDirectory', \"File is Directory\"), FileSystemProviderErrorCode.FileIsADirectory);\nconst ERR_FILE_NOT_DIR = createFileSystemProviderError(localize('fileNotDirectory', \"File is not a directory\"), FileSystemProviderErrorCode.FileNotADirectory);\nconst ERR_DIR_NOT_EMPTY = createFileSystemProviderError(localize('dirIsNotEmpty', \"Directory is not empty\"), FileSystemProviderErrorCode.Unknown);\n\n// Arbitrary Internal Errors (should never be thrown in production)\nconst ERR_UNKNOWN_INTERNAL = (message: string) => createFileSystemProviderError(localize('internal', \"Internal error occured in IndexedDB File System Provider. ({0})\", message), FileSystemProviderErrorCode.Unknown);\n\nexport class IndexedDB {\n\n\tprivate indexedDBPromise: Promise<IDBDatabase | null>;\n\n\tconstructor() {\n\t\tthis.indexedDBPromise = this.openIndexedDB(INDEXEDDB_VSCODE_DB, 2, [INDEXEDDB_USERDATA_OBJECT_STORE, INDEXEDDB_LOGS_OBJECT_STORE]);\n\t}\n\n\tasync createFileSystemProvider(scheme: string, store: string): Promise<IIndexedDBFileSystemProvider | null> {\n\t\tlet fsp: IIndexedDBFileSystemProvider | null = null;\n\t\tconst indexedDB = await this.indexedDBPromise;\n\t\tif (indexedDB) {\n\t\t\tif (indexedDB.objectStoreNames.contains(store)) {\n\t\t\t\tfsp = new IndexedDBFileSystemProvider(scheme, indexedDB, store);\n\t\t\t} else {\n\t\t\t\tconsole.error(`Error while creating indexedDB filesystem provider. Could not find ${store} object store`);\n\t\t\t}\n\t\t}\n\t\treturn fsp;\n\t}\n\n\tprivate openIndexedDB(name: string, version: number, stores: string[]): Promise<IDBDatabase | null> {\n\t\treturn new Promise((c, e) => {\n\t\t\tconst request = window.indexedDB.open(name, version);\n\t\t\trequest.onerror = (err) => e(request.error);\n\t\t\trequest.onsuccess = () => {\n\t\t\t\tconst db = request.result;\n\t\t\t\tfor (const store of stores) {\n\t\t\t\t\tif (!db.objectStoreNames.contains(store)) {\n\t\t\t\t\t\tconsole.error(`Error while creating indexedDB. Could not create ${store} object store`);\n\t\t\t\t\t\tc(null);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tc(db);\n\t\t\t};\n\t\t\trequest.onupgradeneeded = () => {\n\t\t\t\tconst db = request.result;\n\t\t\t\tfor (const store of stores) {\n\t\t\t\t\tif (!db.objectStoreNames.contains(store)) {\n\t\t\t\t\t\tdb.createObjectStore(store);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t}\n}\n\nexport interface IIndexedDBFileSystemProvider extends Disposable, IFileSystemProviderWithFileReadWriteCapability {\n\treset(): Promise<void>;\n}\n\ntype DirEntry = [string, FileType];\n\ntype IndexedDBFileSystemEntry =\n\t| {\n\t\tpath: string,\n\t\ttype: FileType.Directory,\n\t\tchildren: Map<string, IndexedDBFileSystemNode>,\n\t}\n\t| {\n\t\tpath: string,\n\t\ttype: FileType.File,\n\t\tsize: number | undefined,\n\t};\n\nclass IndexedDBFileSystemNode {\n\tpublic type: FileType;\n\n\tconstructor(private entry: IndexedDBFileSystemEntry) {\n\t\tthis.type = entry.type;\n\t}\n\n\n\tread(path: string) {\n\t\treturn this.doRead(path.split('/').filter(p => p.length));\n\t}\n\n\tprivate doRead(pathParts: string[]): IndexedDBFileSystemEntry | undefined {\n\t\tif (pathParts.length === 0) { return this.entry; }\n\t\tif (this.entry.type !== FileType.Directory) {\n\t\t\tthrow ERR_UNKNOWN_INTERNAL('Internal error reading from IndexedDBFSNode -- expected directory at ' + this.entry.path);\n\t\t}\n\t\tconst next = this.entry.children.get(pathParts[0]);\n\n\t\tif (!next) { return undefined; }\n\t\treturn next.doRead(pathParts.slice(1));\n\t}\n\n\tdelete(path: string) {\n\t\tconst toDelete = path.split('/').filter(p => p.length);\n\t\tif (toDelete.length === 0) {\n\t\t\tif (this.entry.type !== FileType.Directory) {\n\t\t\t\tthrow ERR_UNKNOWN_INTERNAL(`Internal error deleting from IndexedDBFSNode. Expected root entry to be directory`);\n\t\t\t}\n\t\t\tthis.entry.children.clear();\n\t\t} else {\n\t\t\treturn this.doDelete(toDelete, path);\n\t\t}\n\t}\n\n\tprivate doDelete = (pathParts: string[], originalPath: string) => {\n\t\tif (pathParts.length === 0) {\n\t\t\tthrow ERR_UNKNOWN_INTERNAL(`Internal error deleting from IndexedDBFSNode -- got no deletion path parts (encountered while deleting ${originalPath})`);\n\t\t}\n\t\telse if (this.entry.type !== FileType.Directory) {\n\t\t\tthrow ERR_UNKNOWN_INTERNAL('Internal error deleting from IndexedDBFSNode -- expected directory at ' + this.entry.path);\n\t\t}\n\t\telse if (pathParts.length === 1) {\n\t\t\tthis.entry.children.delete(pathParts[0]);\n\t\t}\n\t\telse {\n\t\t\tconst next = this.entry.children.get(pathParts[0]);\n\t\t\tif (!next) {\n\t\t\t\tthrow ERR_UNKNOWN_INTERNAL('Internal error deleting from IndexedDBFSNode -- expected entry at ' + this.entry.path + '/' + next);\n\t\t\t}\n\t\t\tnext.doDelete(pathParts.slice(1), originalPath);\n\t\t}\n\t};\n\n\tadd(path: string, entry: { type: 'file', size?: number } | { type: 'dir' }) {\n\t\tthis.doAdd(path.split('/').filter(p => p.length), entry, path);\n\t}\n\n\tprivate doAdd(pathParts: string[], entry: { type: 'file', size?: number } | { type: 'dir' }, originalPath: string) {\n\t\tif (pathParts.length === 0) {\n\t\t\tthrow ERR_UNKNOWN_INTERNAL(`Internal error creating IndexedDBFSNode -- adding empty path (encountered while adding ${originalPath})`);\n\t\t}\n\t\telse if (this.entry.type !== FileType.Directory) {\n\t\t\tthrow ERR_UNKNOWN_INTERNAL(`Internal error creating IndexedDBFSNode -- parent is not a directory (encountered while adding ${originalPath})`);\n\t\t}\n\t\telse if (pathParts.length === 1) {\n\t\t\tconst next = pathParts[0];\n\t\t\tconst existing = this.entry.children.get(next);\n\t\t\tif (entry.type === 'dir') {\n\t\t\t\tif (existing?.entry.type === FileType.File) {\n\t\t\t\t\tthrow ERR_UNKNOWN_INTERNAL(`Internal error creating IndexedDBFSNode -- overwriting file with directory: ${this.entry.path}/${next} (encountered while adding ${originalPath})`);\n\t\t\t\t}\n\t\t\t\tthis.entry.children.set(next, existing ?? new IndexedDBFileSystemNode({\n\t\t\t\t\ttype: FileType.Directory,\n\t\t\t\t\tpath: this.entry.path + '/' + next,\n\t\t\t\t\tchildren: new Map(),\n\t\t\t\t}));\n\t\t\t} else {\n\t\t\t\tif (existing?.entry.type === FileType.Directory) {\n\t\t\t\t\tthrow ERR_UNKNOWN_INTERNAL(`Internal error creating IndexedDBFSNode -- overwriting directory with file: ${this.entry.path}/${next} (encountered while adding ${originalPath})`);\n\t\t\t\t}\n\t\t\t\tthis.entry.children.set(next, new IndexedDBFileSystemNode({\n\t\t\t\t\ttype: FileType.File,\n\t\t\t\t\tpath: this.entry.path + '/' + next,\n\t\t\t\t\tsize: entry.size,\n\t\t\t\t}));\n\t\t\t}\n\t\t}\n\t\telse if (pathParts.length > 1) {\n\t\t\tconst next = pathParts[0];\n\t\t\tlet childNode = this.entry.children.get(next);\n\t\t\tif (!childNode) {\n\t\t\t\tchildNode = new IndexedDBFileSystemNode({\n\t\t\t\t\tchildren: new Map(),\n\t\t\t\t\tpath: this.entry.path + '/' + next,\n\t\t\t\t\ttype: FileType.Directory\n\t\t\t\t});\n\t\t\t\tthis.entry.children.set(next, childNode);\n\t\t\t}\n\t\t\telse if (childNode.type === FileType.File) {\n\t\t\t\tthrow ERR_UNKNOWN_INTERNAL(`Internal error creating IndexedDBFSNode -- overwriting file entry with directory: ${this.entry.path}/${next} (encountered while adding ${originalPath})`);\n\t\t\t}\n\t\t\tchildNode.doAdd(pathParts.slice(1), entry, originalPath);\n\t\t}\n\t}\n\n\tprint(indentation = '') {\n\t\tconsole.log(indentation + this.entry.path);\n\t\tif (this.entry.type === FileType.Directory) {\n\t\t\tthis.entry.children.forEach(child => child.print(indentation + ' '));\n\t\t}\n\t}\n}\n\nclass IndexedDBFileSystemProvider extends Disposable implements IIndexedDBFileSystemProvider {\n\n\treadonly capabilities: FileSystemProviderCapabilities =\n\t\tFileSystemProviderCapabilities.FileReadWrite\n\t\t| FileSystemProviderCapabilities.PathCaseSensitive;\n\treadonly onDidChangeCapabilities: Event<void> = Event.None;\n\n\tprivate readonly _onDidChangeFile = this._register(new Emitter<readonly IFileChange[]>());\n\treadonly onDidChangeFile: Event<readonly IFileChange[]> = this._onDidChangeFile.event;\n\n\tprivate readonly versions: Map<string, number> = new Map<string, number>();\n\n\tprivate cachedFiletree: Promise<IndexedDBFileSystemNode> | undefined;\n\tprivate writeManyThrottler: Throttler;\n\n\tconstructor(scheme: string, private readonly database: IDBDatabase, private readonly store: string) {\n\t\tsuper();\n\t\tthis.writeManyThrottler = new Throttler();\n\n\t}\n\n\twatch(resource: URI, opts: IWatchOptions): IDisposable {\n\t\treturn Disposable.None;\n\t}\n\n\tasync mkdir(resource: URI): Promise<void> {\n\t\ttry {\n\t\t\tconst resourceStat = await this.stat(resource);\n\t\t\tif (resourceStat.type === FileType.File) {\n\t\t\t\tthrow ERR_FILE_NOT_DIR;\n\t\t\t}\n\t\t} catch (error) { /* Ignore */ }\n\t\t(await this.getFiletree()).add(resource.path, { type: 'dir' });\n\t}\n\n\tasync stat(resource: URI): Promise<IStat> {\n\t\tconst content = (await this.getFiletree()).read(resource.path);\n\t\tif (content?.type === FileType.File) {\n\t\t\treturn {\n\t\t\t\ttype: FileType.File,\n\t\t\t\tctime: 0,\n\t\t\t\tmtime: this.versions.get(resource.toString()) || 0,\n\t\t\t\tsize: content.size ?? (await this.readFile(resource)).byteLength\n\t\t\t};\n\t\t} else if (content?.type === FileType.Directory) {\n\t\t\treturn {\n\t\t\t\ttype: FileType.Directory,\n\t\t\t\tctime: 0,\n\t\t\t\tmtime: 0,\n\t\t\t\tsize: 0\n\t\t\t};\n\t\t}\n\t\telse {\n\t\t\tthrow ERR_FILE_NOT_FOUND;\n\t\t}\n\t}\n\n\tasync readdir(resource: URI): Promise<DirEntry[]> {\n\t\tconst entry = (await this.getFiletree()).read(resource.path);\n\t\tif (!entry) {\n\t\t\t// Dirs aren't saved to disk, so empty dirs will be lost on reload.\n\t\t\t// Thus we have two options for what happens when you try to read a dir and nothing is found:\n\t\t\t// - Throw FileSystemProviderErrorCode.FileNotFound\n\t\t\t// - Return []\n\t\t\t// We choose to return [] as creating a dir then reading it (even after reload) should not throw an error.\n\t\t\treturn [];\n\t\t}\n\t\tif (entry.type !== FileType.Directory) {\n\t\t\tthrow ERR_FILE_NOT_DIR;\n\t\t}\n\t\telse {\n\t\t\treturn [...entry.children.entries()].map(([name, node]) => [name, node.type]);\n\t\t}\n\t}\n\n\tasync readFile(resource: URI): Promise<Uint8Array> {\n\t\tconst buffer = await new Promise<Uint8Array>((c, e) => {\n\t\t\tconst transaction = this.database.transaction([this.store]);\n\t\t\tconst objectStore = transaction.objectStore(this.store);\n\t\t\tconst request = objectStore.get(resource.path);\n\t\t\trequest.onerror = () => e(request.error);\n\t\t\trequest.onsuccess = () => {\n\t\t\t\tif (request.result instanceof Uint8Array) {\n\t\t\t\t\tc(request.result);\n\t\t\t\t} else if (typeof request.result === 'string') {\n\t\t\t\t\tc(VSBuffer.fromString(request.result).buffer);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (request.result === undefined) {\n\t\t\t\t\t\te(ERR_FILE_NOT_FOUND);\n\t\t\t\t\t} else {\n\t\t\t\t\t\te(ERR_UNKNOWN_INTERNAL(`IndexedDB entry at \"${resource.path}\" in unexpected format`));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\n\t\t(await this.getFiletree()).add(resource.path, { type: 'file', size: buffer.byteLength });\n\t\treturn buffer;\n\t}\n\n\tasync writeFile(resource: URI, content: Uint8Array, opts: FileWriteOptions): Promise<void> {\n\t\tconst existing = await this.stat(resource).catch(() => undefined);\n\t\tif (existing?.type === FileType.Directory) {\n\t\t\tthrow ERR_FILE_IS_DIR;\n\t\t}\n\n\t\tthis.fileWriteBatch.push({ content, resource });\n\t\tawait this.writeManyThrottler.queue(() => this.writeMany());\n\t\t(await this.getFiletree()).add(resource.path, { type: 'file', size: content.byteLength });\n\t\tthis.versions.set(resource.toString(), (this.versions.get(resource.toString()) || 0) + 1);\n\t\tthis._onDidChangeFile.fire([{ resource, type: FileChangeType.UPDATED }]);\n\t}\n\n\tasync delete(resource: URI, opts: FileDeleteOptions): Promise<void> {\n\t\tlet stat: IStat;\n\t\ttry {\n\t\t\tstat = await this.stat(resource);\n\t\t} catch (e) {\n\t\t\tif (e.code === FileSystemProviderErrorCode.FileNotFound) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthrow e;\n\t\t}\n\n\t\tlet toDelete: string[];\n\t\tif (opts.recursive) {\n\t\t\tconst tree = (await this.tree(resource));\n\t\t\ttoDelete = tree.map(([path]) => path);\n\t\t} else {\n\t\t\tif (stat.type === FileType.Directory && (await this.readdir(resource)).length) {\n\t\t\t\tthrow ERR_DIR_NOT_EMPTY;\n\t\t\t}\n\t\t\ttoDelete = [resource.path];\n\t\t}\n\t\tawait this.deleteKeys(toDelete);\n\t\t(await this.getFiletree()).delete(resource.path);\n\t\ttoDelete.forEach(key => this.versions.delete(key));\n\t\tthis._onDidChangeFile.fire(toDelete.map(path => ({ resource: resource.with({ path }), type: FileChangeType.DELETED })));\n\t}\n\n\tprivate async tree(resource: URI): Promise<DirEntry[]> {\n\t\tif ((await this.stat(resource)).type === FileType.Directory) {\n\t\t\tconst topLevelEntries = (await this.readdir(resource)).map(([key, type]) => {\n\t\t\t\treturn [joinPath(resource, key).path, type] as [string, FileType];\n\t\t\t});\n\t\t\tlet allEntries = topLevelEntries;\n\t\t\tawait Promise.all(topLevelEntries.map(\n\t\t\t\tasync ([key, type]) => {\n\t\t\t\t\tif (type === FileType.Directory) {\n\t\t\t\t\t\tconst childEntries = (await this.tree(resource.with({ path: key })));\n\t\t\t\t\t\tallEntries = allEntries.concat(childEntries);\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\treturn allEntries;\n\t\t} else {\n\t\t\tconst entries: DirEntry[] = [[resource.path, FileType.File]];\n\t\t\treturn entries;\n\t\t}\n\t}\n\n\trename(from: URI, to: URI, opts: FileOverwriteOptions): Promise<void> {\n\t\treturn Promise.reject(new Error('Not Supported'));\n\t}\n\n\tprivate getFiletree(): Promise<IndexedDBFileSystemNode> {\n\t\tif (!this.cachedFiletree) {\n\t\t\tthis.cachedFiletree = new Promise((c, e) => {\n\t\t\t\tconst transaction = this.database.transaction([this.store]);\n\t\t\t\tconst objectStore = transaction.objectStore(this.store);\n\t\t\t\tconst request = objectStore.getAllKeys();\n\t\t\t\trequest.onerror = () => e(request.error);\n\t\t\t\trequest.onsuccess = () => {\n\t\t\t\t\tconst rootNode = new IndexedDBFileSystemNode({\n\t\t\t\t\t\tchildren: new Map(),\n\t\t\t\t\t\tpath: '',\n\t\t\t\t\t\ttype: FileType.Directory\n\t\t\t\t\t});\n\t\t\t\t\tconst keys = request.result.map(key => key.toString());\n\t\t\t\t\tkeys.forEach(key => rootNode.add(key, { type: 'file' }));\n\t\t\t\t\tc(rootNode);\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\t\treturn this.cachedFiletree;\n\t}\n\n\tprivate fileWriteBatch: { resource: URI, content: Uint8Array }[] = [];\n\tprivate async writeMany() {\n\t\treturn new Promise<void>((c, e) => {\n\t\t\tconst fileBatch = this.fileWriteBatch;\n\t\t\tthis.fileWriteBatch = [];\n\t\t\tif (fileBatch.length === 0) { return c(); }\n\n\t\t\tconst transaction = this.database.transaction([this.store], 'readwrite');\n\t\t\ttransaction.onerror = () => e(transaction.error);\n\t\t\tconst objectStore = transaction.objectStore(this.store);\n\t\t\tlet request: IDBRequest = undefined!;\n\t\t\tfor (const entry of fileBatch) {\n\t\t\t\trequest = objectStore.put(entry.content, entry.resource.path);\n\t\t\t}\n\t\t\trequest.onsuccess = () => c();\n\t\t});\n\t}\n\n\tprivate deleteKeys(keys: string[]): Promise<void> {\n\t\treturn new Promise(async (c, e) => {\n\t\t\tif (keys.length === 0) { return c(); }\n\t\t\tconst transaction = this.database.transaction([this.store], 'readwrite');\n\t\t\ttransaction.onerror = () => e(transaction.error);\n\t\t\tconst objectStore = transaction.objectStore(this.store);\n\t\t\tlet request: IDBRequest = undefined!;\n\t\t\tfor (const key of keys) {\n\t\t\t\trequest = objectStore.delete(key);\n\t\t\t}\n\n\t\t\trequest.onsuccess = () => c();\n\t\t});\n\t}\n\n\treset(): Promise<void> {\n\t\treturn new Promise(async (c, e) => {\n\t\t\tconst transaction = this.database.transaction([this.store], 'readwrite');\n\t\t\tconst objectStore = transaction.objectStore(this.store);\n\t\t\tconst request = objectStore.clear();\n\t\t\trequest.onerror = () => e(request.error);\n\t\t\trequest.onsuccess = () => c();\n\t\t});\n\t}\n}\n"]}