{"version":3,"file":"chokidarWatcherService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/files/node/watcher/unix/chokidarWatcherService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as chokidar from 'chokidar';\nimport * as fs from 'fs';\nimport * as gracefulFs from 'graceful-fs';\nimport * as glob from 'vs/base/common/glob';\nimport { isEqualOrParent } from 'vs/base/common/extpath';\nimport { FileChangeType } from 'vs/platform/files/common/files';\nimport { ThrottledDelayer } from 'vs/base/common/async';\nimport { normalizeNFC } from 'vs/base/common/normalization';\nimport { realcaseSync } from 'vs/base/node/extpath';\nimport { isMacintosh, isLinux } from 'vs/base/common/platform';\nimport { IDiskFileChange, normalizeFileChanges, ILogMessage } from 'vs/platform/files/node/watcher/watcher';\nimport { IWatcherRequest, IWatcherService, IWatcherOptions } from 'vs/platform/files/node/watcher/unix/watcher';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { equals } from 'vs/base/common/arrays';\nimport { Disposable } from 'vs/base/common/lifecycle';\n\ngracefulFs.gracefulify(fs); // enable gracefulFs\n\nprocess.noAsar = true; // disable ASAR support in watcher process\n\ninterface IWatcher {\n\trequests: ExtendedWatcherRequest[];\n\tstop(): Promise<void>;\n}\n\ninterface ExtendedWatcherRequest extends IWatcherRequest {\n\tparsedPattern?: glob.ParsedPattern;\n}\n\nexport class ChokidarWatcherService extends Disposable implements IWatcherService {\n\n\tprivate static readonly FS_EVENT_DELAY = 50; // aggregate and only emit events when changes have stopped for this duration (in ms)\n\tprivate static readonly EVENT_SPAM_WARNING_THRESHOLD = 60 * 1000; // warn after certain time span of event spam\n\n\tprivate readonly _onDidChangeFile = this._register(new Emitter<IDiskFileChange[]>());\n\treadonly onDidChangeFile = this._onDidChangeFile.event;\n\n\tprivate readonly _onDidLogMessage = this._register(new Emitter<ILogMessage>());\n\treadonly onDidLogMessage: Event<ILogMessage> = this._onDidLogMessage.event;\n\n\tprivate watchers = new Map<string, IWatcher>();\n\n\tprivate _watcherCount = 0;\n\tget wacherCount() { return this._watcherCount; }\n\n\tprivate pollingInterval?: number;\n\tprivate usePolling?: boolean | string[];\n\tprivate verboseLogging: boolean | undefined;\n\n\tprivate spamCheckStartTime: number | undefined;\n\tprivate spamWarningLogged: boolean | undefined;\n\tprivate enospcErrorLogged: boolean | undefined;\n\n\tasync init(options: IWatcherOptions): Promise<void> {\n\t\tthis.pollingInterval = options.pollingInterval;\n\t\tthis.usePolling = options.usePolling;\n\t\tthis.watchers.clear();\n\t\tthis._watcherCount = 0;\n\t\tthis.verboseLogging = options.verboseLogging;\n\t}\n\n\tasync setVerboseLogging(enabled: boolean): Promise<void> {\n\t\tthis.verboseLogging = enabled;\n\t}\n\n\tasync setRoots(requests: IWatcherRequest[]): Promise<void> {\n\t\tconst watchers = new Map<string, IWatcher>();\n\t\tconst newRequests: string[] = [];\n\n\t\tconst requestsByBasePath = normalizeRoots(requests);\n\n\t\t// evaluate new & remaining watchers\n\t\tfor (const basePath in requestsByBasePath) {\n\t\t\tconst watcher = this.watchers.get(basePath);\n\t\t\tif (watcher && isEqualRequests(watcher.requests, requestsByBasePath[basePath])) {\n\t\t\t\twatchers.set(basePath, watcher);\n\t\t\t\tthis.watchers.delete(basePath);\n\t\t\t} else {\n\t\t\t\tnewRequests.push(basePath);\n\t\t\t}\n\t\t}\n\n\t\t// stop all old watchers\n\t\tfor (const [, watcher] of this.watchers) {\n\t\t\tawait watcher.stop();\n\t\t}\n\n\t\t// start all new watchers\n\t\tfor (const basePath of newRequests) {\n\t\t\tconst requests = requestsByBasePath[basePath];\n\t\t\twatchers.set(basePath, this.watch(basePath, requests));\n\t\t}\n\n\t\tthis.watchers = watchers;\n\t}\n\n\tprivate watch(basePath: string, requests: IWatcherRequest[]): IWatcher {\n\t\tconst pollingInterval = this.pollingInterval || 5000;\n\t\tlet usePolling = this.usePolling; // boolean or a list of path patterns\n\t\tif (Array.isArray(usePolling)) {\n\t\t\t// switch to polling if one of the paths matches with a watched path\n\t\t\tusePolling = usePolling.some(pattern => requests.some(r => glob.match(pattern, r.path)));\n\t\t}\n\n\t\tconst watcherOpts: chokidar.WatchOptions = {\n\t\t\tignoreInitial: true,\n\t\t\tignorePermissionErrors: true,\n\t\t\tfollowSymlinks: true, // this is the default of chokidar and supports file events through symlinks\n\t\t\tinterval: pollingInterval, // while not used in normal cases, if any error causes chokidar to fallback to polling, increase its intervals\n\t\t\tbinaryInterval: pollingInterval,\n\t\t\tusePolling: usePolling,\n\t\t\tdisableGlobbing: true // fix https://github.com/microsoft/vscode/issues/4586\n\t\t};\n\n\t\tconst excludes: string[] = [];\n\n\t\tconst isSingleFolder = requests.length === 1;\n\t\tif (isSingleFolder) {\n\t\t\texcludes.push(...requests[0].excludes); // if there's only one request, use the built-in ignore-filterering\n\t\t}\n\n\t\tif ((isMacintosh || isLinux) && (basePath.length === 0 || basePath === '/')) {\n\t\t\texcludes.push('/dev/**');\n\t\t\tif (isLinux) {\n\t\t\t\texcludes.push('/proc/**', '/sys/**');\n\t\t\t}\n\t\t}\n\n\t\texcludes.push('**/*.asar'); // Ensure we never recurse into ASAR archives\n\n\t\twatcherOpts.ignored = excludes;\n\n\t\t// Chokidar fails when the basePath does not match case-identical to the path on disk\n\t\t// so we have to find the real casing of the path and do some path massaging to fix this\n\t\t// see https://github.com/paulmillr/chokidar/issues/418\n\t\tconst realBasePath = isMacintosh ? (realcaseSync(basePath) || basePath) : basePath;\n\t\tconst realBasePathLength = realBasePath.length;\n\t\tconst realBasePathDiffers = (basePath !== realBasePath);\n\n\t\tif (realBasePathDiffers) {\n\t\t\tthis.warn(`Watcher basePath does not match version on disk and was corrected (original: ${basePath}, real: ${realBasePath})`);\n\t\t}\n\n\t\tthis.debug(`Start watching with chokidar: ${realBasePath}, excludes: ${excludes.join(',')}, usePolling: ${usePolling ? 'true, interval ' + pollingInterval : 'false'}`);\n\n\t\tlet chokidarWatcher: chokidar.FSWatcher | null = chokidar.watch(realBasePath, watcherOpts);\n\t\tthis._watcherCount++;\n\n\t\t// Detect if for some reason the native watcher library fails to load\n\t\tif (isMacintosh && chokidarWatcher.options && !chokidarWatcher.options.useFsEvents) {\n\t\t\tthis.warn('Watcher is not using native fsevents library and is falling back to unefficient polling.');\n\t\t}\n\n\t\tlet undeliveredFileEvents: IDiskFileChange[] = [];\n\t\tlet fileEventDelayer: ThrottledDelayer<undefined> | null = new ThrottledDelayer(ChokidarWatcherService.FS_EVENT_DELAY);\n\n\t\tconst watcher: IWatcher = {\n\t\t\trequests,\n\t\t\tstop: async () => {\n\t\t\t\ttry {\n\t\t\t\t\tif (this.verboseLogging) {\n\t\t\t\t\t\tthis.log(`Stop watching: ${basePath}]`);\n\t\t\t\t\t}\n\t\t\t\t\tif (chokidarWatcher) {\n\t\t\t\t\t\tawait chokidarWatcher.close();\n\t\t\t\t\t\tthis._watcherCount--;\n\t\t\t\t\t\tchokidarWatcher = null;\n\t\t\t\t\t}\n\t\t\t\t\tif (fileEventDelayer) {\n\t\t\t\t\t\tfileEventDelayer.cancel();\n\t\t\t\t\t\tfileEventDelayer = null;\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.warn('Error while stopping watcher: ' + error.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tchokidarWatcher.on('all', (type: string, path: string) => {\n\t\t\tif (isMacintosh) {\n\t\t\t\t// Mac: uses NFD unicode form on disk, but we want NFC\n\t\t\t\t// See also https://github.com/nodejs/node/issues/2165\n\t\t\t\tpath = normalizeNFC(path);\n\t\t\t}\n\n\t\t\tif (path.indexOf(realBasePath) < 0) {\n\t\t\t\treturn; // we really only care about absolute paths here in our basepath context here\n\t\t\t}\n\n\t\t\t// Make sure to convert the path back to its original basePath form if the realpath is different\n\t\t\tif (realBasePathDiffers) {\n\t\t\t\tpath = basePath + path.substr(realBasePathLength);\n\t\t\t}\n\n\t\t\tlet eventType: FileChangeType;\n\t\t\tswitch (type) {\n\t\t\t\tcase 'change':\n\t\t\t\t\teventType = FileChangeType.UPDATED;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'add':\n\t\t\t\tcase 'addDir':\n\t\t\t\t\teventType = FileChangeType.ADDED;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'unlink':\n\t\t\t\tcase 'unlinkDir':\n\t\t\t\t\teventType = FileChangeType.DELETED;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// if there's more than one request we need to do\n\t\t\t// extra filtering due to potentially overlapping roots\n\t\t\tif (!isSingleFolder) {\n\t\t\t\tif (isIgnored(path, watcher.requests)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst event = { type: eventType, path };\n\n\t\t\t// Logging\n\t\t\tif (this.verboseLogging) {\n\t\t\t\tthis.log(`${eventType === FileChangeType.ADDED ? '[ADDED]' : eventType === FileChangeType.DELETED ? '[DELETED]' : '[CHANGED]'} ${path}`);\n\t\t\t}\n\n\t\t\t// Check for spam\n\t\t\tconst now = Date.now();\n\t\t\tif (undeliveredFileEvents.length === 0) {\n\t\t\t\tthis.spamWarningLogged = false;\n\t\t\t\tthis.spamCheckStartTime = now;\n\t\t\t} else if (!this.spamWarningLogged && typeof this.spamCheckStartTime === 'number' && this.spamCheckStartTime + ChokidarWatcherService.EVENT_SPAM_WARNING_THRESHOLD < now) {\n\t\t\t\tthis.spamWarningLogged = true;\n\t\t\t\tthis.warn(`Watcher is busy catching up with ${undeliveredFileEvents.length} file changes in 60 seconds. Latest changed path is \"${event.path}\"`);\n\t\t\t}\n\n\t\t\t// Add to buffer\n\t\t\tundeliveredFileEvents.push(event);\n\n\t\t\tif (fileEventDelayer) {\n\n\t\t\t\t// Delay and send buffer\n\t\t\t\tfileEventDelayer.trigger(async () => {\n\t\t\t\t\tconst events = undeliveredFileEvents;\n\t\t\t\t\tundeliveredFileEvents = [];\n\n\t\t\t\t\t// Broadcast to clients normalized\n\t\t\t\t\tconst res = normalizeFileChanges(events);\n\t\t\t\t\tthis._onDidChangeFile.fire(res);\n\n\t\t\t\t\t// Logging\n\t\t\t\t\tif (this.verboseLogging) {\n\t\t\t\t\t\tres.forEach(r => {\n\t\t\t\t\t\t\tthis.log(` >> normalized  ${r.type === FileChangeType.ADDED ? '[ADDED]' : r.type === FileChangeType.DELETED ? '[DELETED]' : '[CHANGED]'} ${r.path}`);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\treturn undefined;\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tchokidarWatcher.on('error', (error: NodeJS.ErrnoException) => {\n\t\t\tif (error) {\n\n\t\t\t\t// Specially handle ENOSPC errors that can happen when\n\t\t\t\t// the watcher consumes so many file descriptors that\n\t\t\t\t// we are running into a limit. We only want to warn\n\t\t\t\t// once in this case to avoid log spam.\n\t\t\t\t// See https://github.com/microsoft/vscode/issues/7950\n\t\t\t\tif (error.code === 'ENOSPC') {\n\t\t\t\t\tif (!this.enospcErrorLogged) {\n\t\t\t\t\t\tthis.enospcErrorLogged = true;\n\t\t\t\t\t\tthis.stop();\n\t\t\t\t\t\tthis.error('Inotify limit reached (ENOSPC)');\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.warn(error.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn watcher;\n\t}\n\n\tasync stop(): Promise<void> {\n\t\tfor (const [, watcher] of this.watchers) {\n\t\t\tawait watcher.stop();\n\t\t}\n\n\t\tthis.watchers.clear();\n\t}\n\n\tprivate log(message: string) {\n\t\tthis._onDidLogMessage.fire({ type: 'trace', message: `[File Watcher (chokidar)] ` + message });\n\t}\n\n\tprivate debug(message: string) {\n\t\tthis._onDidLogMessage.fire({ type: 'debug', message: `[File Watcher (chokidar)] ` + message });\n\t}\n\n\tprivate warn(message: string) {\n\t\tthis._onDidLogMessage.fire({ type: 'warn', message: `[File Watcher (chokidar)] ` + message });\n\t}\n\n\tprivate error(message: string) {\n\t\tthis._onDidLogMessage.fire({ type: 'error', message: `[File Watcher (chokidar)] ` + message });\n\t}\n}\n\nfunction isIgnored(path: string, requests: ExtendedWatcherRequest[]): boolean {\n\tfor (const request of requests) {\n\t\tif (request.path === path) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (isEqualOrParent(path, request.path)) {\n\t\t\tif (!request.parsedPattern) {\n\t\t\t\tif (request.excludes && request.excludes.length > 0) {\n\t\t\t\t\tconst pattern = `{${request.excludes.join(',')}}`;\n\t\t\t\t\trequest.parsedPattern = glob.parse(pattern);\n\t\t\t\t} else {\n\t\t\t\t\trequest.parsedPattern = () => false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst relPath = path.substr(request.path.length + 1);\n\t\t\tif (!request.parsedPattern(relPath)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn true;\n}\n\n/**\n * Normalizes a set of root paths by grouping by the most parent root path.\n * equests with Sub paths are skipped if they have the same ignored set as the parent.\n */\nexport function normalizeRoots(requests: IWatcherRequest[]): { [basePath: string]: IWatcherRequest[] } {\n\trequests = requests.sort((r1, r2) => r1.path.localeCompare(r2.path));\n\n\tlet prevRequest: IWatcherRequest | null = null;\n\tconst result: { [basePath: string]: IWatcherRequest[] } = Object.create(null);\n\tfor (const request of requests) {\n\t\tconst basePath = request.path;\n\t\tconst ignored = (request.excludes || []).sort();\n\t\tif (prevRequest && (isEqualOrParent(basePath, prevRequest.path))) {\n\t\t\tif (!isEqualIgnore(ignored, prevRequest.excludes)) {\n\t\t\t\tresult[prevRequest.path].push({ path: basePath, excludes: ignored });\n\t\t\t}\n\t\t} else {\n\t\t\tprevRequest = { path: basePath, excludes: ignored };\n\t\t\tresult[basePath] = [prevRequest];\n\t\t}\n\t}\n\n\treturn result;\n}\n\nfunction isEqualRequests(r1: readonly IWatcherRequest[], r2: readonly IWatcherRequest[]) {\n\treturn equals(r1, r2, (a, b) => a.path === b.path && isEqualIgnore(a.excludes, b.excludes));\n}\n\nfunction isEqualIgnore(i1: readonly string[], i2: readonly string[]) {\n\treturn equals(i1, i2);\n}\n"]}