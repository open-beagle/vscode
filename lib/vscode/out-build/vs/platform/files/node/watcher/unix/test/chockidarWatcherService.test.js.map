{"version":3,"file":"chockidarWatcherService.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/files/node/watcher/unix/test/chockidarWatcherService.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport * as platform from 'vs/base/common/platform';\nimport { IWatcherRequest } from 'vs/platform/files/node/watcher/unix/watcher';\n\nsuite('Chokidar normalizeRoots', async () => {\n\n\t// Load `chokidarWatcherService` within the suite to prevent all tests\n\t// from failing to start if `chokidar` was not properly installed\n\tconst { normalizeRoots } = await import('vs/platform/files/node/watcher/unix/chokidarWatcherService');\n\n\tfunction newRequest(basePath: string, ignored: string[] = []): IWatcherRequest {\n\t\treturn { path: basePath, excludes: ignored };\n\t}\n\n\tfunction assertNormalizedRootPath(inputPaths: string[], expectedPaths: string[]) {\n\t\tconst requests = inputPaths.map(path => newRequest(path));\n\t\tconst actual = normalizeRoots(requests);\n\t\tassert.deepStrictEqual(Object.keys(actual).sort(), expectedPaths);\n\t}\n\n\tfunction assertNormalizedRequests(inputRequests: IWatcherRequest[], expectedRequests: { [path: string]: IWatcherRequest[] }) {\n\t\tconst actual = normalizeRoots(inputRequests);\n\t\tconst actualPath = Object.keys(actual).sort();\n\t\tconst expectedPaths = Object.keys(expectedRequests).sort();\n\t\tassert.deepStrictEqual(actualPath, expectedPaths);\n\t\tfor (let path of actualPath) {\n\t\t\tlet a = expectedRequests[path].sort((r1, r2) => r1.path.localeCompare(r2.path));\n\t\t\tlet e = expectedRequests[path].sort((r1, r2) => r1.path.localeCompare(r2.path));\n\t\t\tassert.deepStrictEqual(a, e);\n\t\t}\n\t}\n\n\ttest('should not impacts roots that don\\'t overlap', () => {\n\t\tif (platform.isWindows) {\n\t\t\tassertNormalizedRootPath(['C:\\\\a'], ['C:\\\\a']);\n\t\t\tassertNormalizedRootPath(['C:\\\\a', 'C:\\\\b'], ['C:\\\\a', 'C:\\\\b']);\n\t\t\tassertNormalizedRootPath(['C:\\\\a', 'C:\\\\b', 'C:\\\\c\\\\d\\\\e'], ['C:\\\\a', 'C:\\\\b', 'C:\\\\c\\\\d\\\\e']);\n\t\t} else {\n\t\t\tassertNormalizedRootPath(['/a'], ['/a']);\n\t\t\tassertNormalizedRootPath(['/a', '/b'], ['/a', '/b']);\n\t\t\tassertNormalizedRootPath(['/a', '/b', '/c/d/e'], ['/a', '/b', '/c/d/e']);\n\t\t}\n\t});\n\n\ttest('should remove sub-folders of other roots', () => {\n\t\tif (platform.isWindows) {\n\t\t\tassertNormalizedRootPath(['C:\\\\a', 'C:\\\\a\\\\b'], ['C:\\\\a']);\n\t\t\tassertNormalizedRootPath(['C:\\\\a', 'C:\\\\b', 'C:\\\\a\\\\b'], ['C:\\\\a', 'C:\\\\b']);\n\t\t\tassertNormalizedRootPath(['C:\\\\b\\\\a', 'C:\\\\a', 'C:\\\\b', 'C:\\\\a\\\\b'], ['C:\\\\a', 'C:\\\\b']);\n\t\t\tassertNormalizedRootPath(['C:\\\\a', 'C:\\\\a\\\\b', 'C:\\\\a\\\\c\\\\d'], ['C:\\\\a']);\n\t\t} else {\n\t\t\tassertNormalizedRootPath(['/a', '/a/b'], ['/a']);\n\t\t\tassertNormalizedRootPath(['/a', '/b', '/a/b'], ['/a', '/b']);\n\t\t\tassertNormalizedRootPath(['/b/a', '/a', '/b', '/a/b'], ['/a', '/b']);\n\t\t\tassertNormalizedRootPath(['/a', '/a/b', '/a/c/d'], ['/a']);\n\t\t\tassertNormalizedRootPath(['/a/c/d/e', '/a/b/d', '/a/c/d', '/a/c/e/f', '/a/b'], ['/a/b', '/a/c/d', '/a/c/e/f']);\n\t\t}\n\t});\n\n\ttest('should remove duplicates', () => {\n\t\tif (platform.isWindows) {\n\t\t\tassertNormalizedRootPath(['C:\\\\a', 'C:\\\\a\\\\', 'C:\\\\a'], ['C:\\\\a']);\n\t\t} else {\n\t\t\tassertNormalizedRootPath(['/a', '/a/', '/a'], ['/a']);\n\t\t\tassertNormalizedRootPath(['/a', '/b', '/a/b'], ['/a', '/b']);\n\t\t\tassertNormalizedRootPath(['/b/a', '/a', '/b', '/a/b'], ['/a', '/b']);\n\t\t\tassertNormalizedRootPath(['/a', '/a/b', '/a/c/d'], ['/a']);\n\t\t}\n\t});\n\n\ttest('nested requests', () => {\n\t\tlet p1, p2, p3;\n\t\tif (platform.isWindows) {\n\t\t\tp1 = 'C:\\\\a';\n\t\t\tp2 = 'C:\\\\a\\\\b';\n\t\t\tp3 = 'C:\\\\a\\\\b\\\\c';\n\t\t} else {\n\t\t\tp1 = '/a';\n\t\t\tp2 = '/a/b';\n\t\t\tp3 = '/a/b/c';\n\t\t}\n\t\tconst r1 = newRequest(p1, ['**/*.ts']);\n\t\tconst r2 = newRequest(p2, ['**/*.js']);\n\t\tconst r3 = newRequest(p3, ['**/*.ts']);\n\t\tassertNormalizedRequests([r1, r2], { [p1]: [r1, r2] });\n\t\tassertNormalizedRequests([r2, r1], { [p1]: [r1, r2] });\n\t\tassertNormalizedRequests([r1, r2, r3], { [p1]: [r1, r2, r3] });\n\t\tassertNormalizedRequests([r1, r3], { [p1]: [r1] });\n\t\tassertNormalizedRequests([r2, r3], { [p2]: [r2, r3] });\n\t});\n});\n"]}