{"version":3,"file":"watcherService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/files/node/watcher/nodejs/watcherService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDiskFileChange, normalizeFileChanges, ILogMessage } from 'vs/platform/files/node/watcher/watcher';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { SymlinkSupport } from 'vs/base/node/pfs';\nimport { realpath } from 'vs/base/node/extpath';\nimport { watchFolder, watchFile, CHANGE_BUFFER_DELAY } from 'vs/base/node/watcher';\nimport { FileChangeType } from 'vs/platform/files/common/files';\nimport { ThrottledDelayer } from 'vs/base/common/async';\nimport { join, basename } from 'vs/base/common/path';\n\nexport class FileWatcher extends Disposable {\n\tprivate isDisposed: boolean | undefined;\n\n\tprivate fileChangesDelayer: ThrottledDelayer<void> = this._register(new ThrottledDelayer<void>(CHANGE_BUFFER_DELAY * 2 /* sync on delay from underlying library */));\n\tprivate fileChangesBuffer: IDiskFileChange[] = [];\n\n\tconstructor(\n\t\tprivate path: string,\n\t\tprivate onDidFilesChange: (changes: IDiskFileChange[]) => void,\n\t\tprivate onLogMessage: (msg: ILogMessage) => void,\n\t\tprivate verboseLogging: boolean\n\t) {\n\t\tsuper();\n\n\t\tthis.startWatching();\n\t}\n\n\tsetVerboseLogging(verboseLogging: boolean): void {\n\t\tthis.verboseLogging = verboseLogging;\n\t}\n\n\tprivate async startWatching(): Promise<void> {\n\t\ttry {\n\t\t\tconst { stat, symbolicLink } = await SymlinkSupport.stat(this.path);\n\n\t\t\tif (this.isDisposed) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet pathToWatch = this.path;\n\t\t\tif (symbolicLink) {\n\t\t\t\ttry {\n\t\t\t\t\tpathToWatch = await realpath(pathToWatch);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.onError(error);\n\n\t\t\t\t\tif (symbolicLink.dangling) {\n\t\t\t\t\t\treturn; // give up if symbolic link is dangling\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Watch Folder\n\t\t\tif (stat.isDirectory()) {\n\t\t\t\tthis._register(watchFolder(pathToWatch, (eventType, path) => {\n\t\t\t\t\tthis.onFileChange({\n\t\t\t\t\t\ttype: eventType === 'changed' ? FileChangeType.UPDATED : eventType === 'added' ? FileChangeType.ADDED : FileChangeType.DELETED,\n\t\t\t\t\t\tpath: join(this.path, basename(path)) // ensure path is identical with what was passed in\n\t\t\t\t\t});\n\t\t\t\t}, error => this.onError(error)));\n\t\t\t}\n\n\t\t\t// Watch File\n\t\t\telse {\n\t\t\t\tthis._register(watchFile(pathToWatch, eventType => {\n\t\t\t\t\tthis.onFileChange({\n\t\t\t\t\t\ttype: eventType === 'changed' ? FileChangeType.UPDATED : FileChangeType.DELETED,\n\t\t\t\t\t\tpath: this.path // ensure path is identical with what was passed in\n\t\t\t\t\t});\n\t\t\t\t}, error => this.onError(error)));\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tif (error.code !== 'ENOENT') {\n\t\t\t\tthis.onError(error);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onFileChange(event: IDiskFileChange): void {\n\n\t\t// Add to buffer\n\t\tthis.fileChangesBuffer.push(event);\n\n\t\t// Logging\n\t\tif (this.verboseLogging) {\n\t\t\tthis.onVerbose(`${event.type === FileChangeType.ADDED ? '[ADDED]' : event.type === FileChangeType.DELETED ? '[DELETED]' : '[CHANGED]'} ${event.path}`);\n\t\t}\n\n\t\t// Handle emit through delayer to accommodate for bulk changes and thus reduce spam\n\t\tthis.fileChangesDelayer.trigger(async () => {\n\t\t\tconst fileChanges = this.fileChangesBuffer;\n\t\t\tthis.fileChangesBuffer = [];\n\n\t\t\t// Event normalization\n\t\t\tconst normalizedFileChanges = normalizeFileChanges(fileChanges);\n\n\t\t\t// Logging\n\t\t\tif (this.verboseLogging) {\n\t\t\t\tnormalizedFileChanges.forEach(event => {\n\t\t\t\t\tthis.onVerbose(`>> normalized ${event.type === FileChangeType.ADDED ? '[ADDED]' : event.type === FileChangeType.DELETED ? '[DELETED]' : '[CHANGED]'} ${event.path}`);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Fire\n\t\t\tif (normalizedFileChanges.length > 0) {\n\t\t\t\tthis.onDidFilesChange(normalizedFileChanges);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate onError(error: string): void {\n\t\tif (!this.isDisposed) {\n\t\t\tthis.onLogMessage({ type: 'error', message: `[File Watcher (node.js)] ${error}` });\n\t\t}\n\t}\n\n\tprivate onVerbose(message: string): void {\n\t\tif (!this.isDisposed) {\n\t\t\tthis.onLogMessage({ type: 'trace', message: `[File Watcher (node.js)] ${message}` });\n\t\t}\n\t}\n\n\toverride dispose(): void {\n\t\tthis.isDisposed = true;\n\n\t\tsuper.dispose();\n\t}\n}\n"]}