{"version":3,"file":"csharpWatcherService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/files/node/watcher/win32/csharpWatcherService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as cp from 'child_process';\nimport { FileChangeType } from 'vs/platform/files/common/files';\nimport * as decoder from 'vs/base/node/decoder';\nimport * as glob from 'vs/base/common/glob';\nimport { IDiskFileChange, ILogMessage } from 'vs/platform/files/node/watcher/watcher';\nimport { FileAccess } from 'vs/base/common/network';\n\nexport class OutOfProcessWin32FolderWatcher {\n\n\tprivate static readonly MAX_RESTARTS = 5;\n\n\tprivate static changeTypeMap: FileChangeType[] = [FileChangeType.UPDATED, FileChangeType.ADDED, FileChangeType.DELETED];\n\n\tprivate ignored: glob.ParsedPattern[];\n\n\tprivate handle: cp.ChildProcess | undefined;\n\tprivate restartCounter: number;\n\n\tconstructor(\n\t\tprivate watchedFolder: string,\n\t\tignored: string[],\n\t\tprivate eventCallback: (events: IDiskFileChange[]) => void,\n\t\tprivate logCallback: (message: ILogMessage) => void,\n\t\tprivate verboseLogging: boolean\n\t) {\n\t\tthis.restartCounter = 0;\n\n\t\tif (Array.isArray(ignored)) {\n\t\t\tthis.ignored = ignored.map(i => glob.parse(i));\n\t\t} else {\n\t\t\tthis.ignored = [];\n\t\t}\n\n\t\t// Logging\n\t\tif (this.verboseLogging) {\n\t\t\tthis.log(`Start watching: ${watchedFolder}`);\n\t\t}\n\n\t\tthis.startWatcher();\n\t}\n\n\tprivate startWatcher(): void {\n\t\tconst args = [this.watchedFolder];\n\t\tif (this.verboseLogging) {\n\t\t\targs.push('-verbose');\n\t\t}\n\n\t\tthis.handle = cp.spawn(FileAccess.asFileUri('vs/platform/files/node/watcher/win32/CodeHelper.exe', require).fsPath, args);\n\n\t\tconst stdoutLineDecoder = new decoder.LineDecoder();\n\n\t\t// Events over stdout\n\t\tthis.handle.stdout!.on('data', (data: Buffer) => {\n\n\t\t\t// Collect raw events from output\n\t\t\tconst rawEvents: IDiskFileChange[] = [];\n\t\t\tstdoutLineDecoder.write(data).forEach((line) => {\n\t\t\t\tconst eventParts = line.split('|');\n\t\t\t\tif (eventParts.length === 2) {\n\t\t\t\t\tconst changeType = Number(eventParts[0]);\n\t\t\t\t\tconst absolutePath = eventParts[1];\n\n\t\t\t\t\t// File Change Event (0 Changed, 1 Created, 2 Deleted)\n\t\t\t\t\tif (changeType >= 0 && changeType < 3) {\n\n\t\t\t\t\t\t// Support ignores\n\t\t\t\t\t\tif (this.ignored && this.ignored.some(ignore => ignore(absolutePath))) {\n\t\t\t\t\t\t\tif (this.verboseLogging) {\n\t\t\t\t\t\t\t\tthis.log(absolutePath);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Otherwise record as event\n\t\t\t\t\t\trawEvents.push({\n\t\t\t\t\t\t\ttype: OutOfProcessWin32FolderWatcher.changeTypeMap[changeType],\n\t\t\t\t\t\t\tpath: absolutePath\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\t// 3 Logging\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis.log(eventParts[1]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Trigger processing of events through the delayer to batch them up properly\n\t\t\tif (rawEvents.length > 0) {\n\t\t\t\tthis.eventCallback(rawEvents);\n\t\t\t}\n\t\t});\n\n\t\t// Errors\n\t\tthis.handle.on('error', (error: Error) => this.onError(error));\n\t\tthis.handle.stderr!.on('data', (data: Buffer) => this.onError(data));\n\n\t\t// Exit\n\t\tthis.handle.on('exit', (code: number, signal: string) => this.onExit(code, signal));\n\t}\n\n\tprivate onError(error: Error | Buffer): void {\n\t\tthis.error('process error: ' + error.toString());\n\t}\n\n\tprivate onExit(code: number, signal: string): void {\n\t\tif (this.handle) { // exit while not yet being disposed is unexpected!\n\t\t\tthis.error(`terminated unexpectedly (code: ${code}, signal: ${signal})`);\n\n\t\t\tif (this.restartCounter <= OutOfProcessWin32FolderWatcher.MAX_RESTARTS) {\n\t\t\t\tthis.error('is restarted again...');\n\t\t\t\tthis.restartCounter++;\n\t\t\t\tthis.startWatcher(); // restart\n\t\t\t} else {\n\t\t\t\tthis.error('Watcher failed to start after retrying for some time, giving up. Please report this as a bug report!');\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate error(message: string) {\n\t\tthis.logCallback({ type: 'error', message: `[File Watcher (C#)] ${message}` });\n\t}\n\n\tprivate log(message: string) {\n\t\tthis.logCallback({ type: 'trace', message: `[File Watcher (C#)] ${message}` });\n\t}\n\n\tdispose(): void {\n\t\tif (this.handle) {\n\t\t\tthis.handle.kill();\n\t\t\tthis.handle = undefined;\n\t\t}\n\t}\n}\n"]}