{"version":3,"file":"nsfwWatcherService.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/files/node/watcher/nsfw/test/nsfwWatcherService.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport * as platform from 'vs/base/common/platform';\nimport { IWatcherRequest } from 'vs/platform/files/node/watcher/nsfw/watcher';\n\nsuite('NSFW Watcher Service', async () => {\n\n\t// Load `nsfwWatcherService` within the suite to prevent all tests\n\t// from failing to start if `nsfw` was not properly installed\n\tconst { NsfwWatcherService } = await import('vs/platform/files/node/watcher/nsfw/nsfwWatcherService');\n\n\tclass TestNsfwWatcherService extends NsfwWatcherService {\n\n\t\tnormalizeRoots(roots: string[]): string[] {\n\n\t\t\t// Work with strings as paths to simplify testing\n\t\t\tconst requests: IWatcherRequest[] = roots.map(r => {\n\t\t\t\treturn { path: r, excludes: [] };\n\t\t\t});\n\n\t\t\treturn this._normalizeRoots(requests).map(r => r.path);\n\t\t}\n\t}\n\n\tsuite('_normalizeRoots', () => {\n\t\ttest('should not impacts roots that don\\'t overlap', () => {\n\t\t\tconst service = new TestNsfwWatcherService();\n\t\t\tif (platform.isWindows) {\n\t\t\t\tassert.deepStrictEqual(service.normalizeRoots(['C:\\\\a']), ['C:\\\\a']);\n\t\t\t\tassert.deepStrictEqual(service.normalizeRoots(['C:\\\\a', 'C:\\\\b']), ['C:\\\\a', 'C:\\\\b']);\n\t\t\t\tassert.deepStrictEqual(service.normalizeRoots(['C:\\\\a', 'C:\\\\b', 'C:\\\\c\\\\d\\\\e']), ['C:\\\\a', 'C:\\\\b', 'C:\\\\c\\\\d\\\\e']);\n\t\t\t} else {\n\t\t\t\tassert.deepStrictEqual(service.normalizeRoots(['/a']), ['/a']);\n\t\t\t\tassert.deepStrictEqual(service.normalizeRoots(['/a', '/b']), ['/a', '/b']);\n\t\t\t\tassert.deepStrictEqual(service.normalizeRoots(['/a', '/b', '/c/d/e']), ['/a', '/b', '/c/d/e']);\n\t\t\t}\n\t\t});\n\n\t\ttest('should remove sub-folders of other roots', () => {\n\t\t\tconst service = new TestNsfwWatcherService();\n\t\t\tif (platform.isWindows) {\n\t\t\t\tassert.deepStrictEqual(service.normalizeRoots(['C:\\\\a', 'C:\\\\a\\\\b']), ['C:\\\\a']);\n\t\t\t\tassert.deepStrictEqual(service.normalizeRoots(['C:\\\\a', 'C:\\\\b', 'C:\\\\a\\\\b']), ['C:\\\\a', 'C:\\\\b']);\n\t\t\t\tassert.deepStrictEqual(service.normalizeRoots(['C:\\\\b\\\\a', 'C:\\\\a', 'C:\\\\b', 'C:\\\\a\\\\b']), ['C:\\\\a', 'C:\\\\b']);\n\t\t\t\tassert.deepStrictEqual(service.normalizeRoots(['C:\\\\a', 'C:\\\\a\\\\b', 'C:\\\\a\\\\c\\\\d']), ['C:\\\\a']);\n\t\t\t} else {\n\t\t\t\tassert.deepStrictEqual(service.normalizeRoots(['/a', '/a/b']), ['/a']);\n\t\t\t\tassert.deepStrictEqual(service.normalizeRoots(['/a', '/b', '/a/b']), ['/a', '/b']);\n\t\t\t\tassert.deepStrictEqual(service.normalizeRoots(['/b/a', '/a', '/b', '/a/b']), ['/a', '/b']);\n\t\t\t\tassert.deepStrictEqual(service.normalizeRoots(['/a', '/a/b', '/a/c/d']), ['/a']);\n\t\t\t}\n\t\t});\n\t});\n});\n"]}