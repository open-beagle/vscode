{"version":3,"file":"watcherService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/files/node/watcher/unix/watcherService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ProxyChannel, getNextTickChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { Client } from 'vs/base/parts/ipc/node/ipc.cp';\nimport { IDiskFileChange, ILogMessage } from 'vs/platform/files/node/watcher/watcher';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IWatcherRequest, IWatcherOptions, IWatcherService } from 'vs/platform/files/node/watcher/unix/watcher';\nimport { FileAccess } from 'vs/base/common/network';\n\nexport class FileWatcher extends Disposable {\n\n\tprivate static readonly MAX_RESTARTS = 5;\n\n\tprivate isDisposed: boolean;\n\tprivate restartCounter: number;\n\tprivate service: IWatcherService | undefined;\n\n\tconstructor(\n\t\tprivate folders: IWatcherRequest[],\n\t\tprivate onDidFilesChange: (changes: IDiskFileChange[]) => void,\n\t\tprivate onLogMessage: (msg: ILogMessage) => void,\n\t\tprivate verboseLogging: boolean,\n\t\tprivate watcherOptions: IWatcherOptions = {}\n\t) {\n\t\tsuper();\n\n\t\tthis.isDisposed = false;\n\t\tthis.restartCounter = 0;\n\n\t\tthis.startWatching();\n\t}\n\n\tprivate startWatching(): void {\n\t\tconst client = this._register(new Client(\n\t\t\tFileAccess.asFileUri('bootstrap-fork', require).fsPath,\n\t\t\t{\n\t\t\t\tserverName: 'File Watcher (chokidar)',\n\t\t\t\targs: ['--type=watcherService'],\n\t\t\t\tenv: {\n\t\t\t\t\tVSCODE_AMD_ENTRYPOINT: 'vs/platform/files/node/watcher/unix/watcherApp',\n\t\t\t\t\tVSCODE_PIPE_LOGGING: 'true',\n\t\t\t\t\tVSCODE_VERBOSE_LOGGING: 'true' // transmit console logs from server to client\n\t\t\t\t}\n\t\t\t}\n\t\t));\n\n\t\tthis._register(client.onDidProcessExit(() => {\n\t\t\t// our watcher app should never be completed because it keeps on watching. being in here indicates\n\t\t\t// that the watcher process died and we want to restart it here. we only do it a max number of times\n\t\t\tif (!this.isDisposed) {\n\t\t\t\tif (this.restartCounter <= FileWatcher.MAX_RESTARTS) {\n\t\t\t\t\tthis.error('terminated unexpectedly and is restarted again...');\n\t\t\t\t\tthis.restartCounter++;\n\t\t\t\t\tthis.startWatching();\n\t\t\t\t} else {\n\t\t\t\t\tthis.error('failed to start after retrying for some time, giving up. Please report this as a bug report!');\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\t// Initialize watcher\n\t\tthis.service = ProxyChannel.toService<IWatcherService>(getNextTickChannel(client.getChannel('watcher')));\n\t\tthis.service.init({ ...this.watcherOptions, verboseLogging: this.verboseLogging });\n\n\t\tthis._register(this.service.onDidChangeFile(e => !this.isDisposed && this.onDidFilesChange(e)));\n\t\tthis._register(this.service.onDidLogMessage(m => this.onLogMessage(m)));\n\n\t\t// Start watching\n\t\tthis.service.setRoots(this.folders);\n\t}\n\n\terror(message: string) {\n\t\tthis.onLogMessage({ type: 'error', message: `[File Watcher (chokidar)] ${message}` });\n\t}\n\n\tsetVerboseLogging(verboseLogging: boolean): void {\n\t\tthis.verboseLogging = verboseLogging;\n\n\t\tif (this.service) {\n\t\t\tthis.service.setVerboseLogging(verboseLogging);\n\t\t}\n\t}\n\n\tsetFolders(folders: IWatcherRequest[]): void {\n\t\tthis.folders = folders;\n\n\t\tif (this.service) {\n\t\t\tthis.service.setRoots(folders);\n\t\t}\n\t}\n\n\toverride dispose(): void {\n\t\tthis.isDisposed = true;\n\n\t\tsuper.dispose();\n\t}\n}\n"]}