{"version":3,"sources":["vs/platform/files/node/diskFileSystemProvider.ts"],"names":[],"mappings":"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","file":"diskFileSystemProvider.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { open, close, read, write, fdatasync, Stats, promises } from 'fs';\nimport { promisify } from 'util';\nimport { IDisposable, Disposable, toDisposable, dispose, combinedDisposable } from 'vs/base/common/lifecycle';\nimport { FileSystemProviderCapabilities, IFileChange, IWatchOptions, IStat, FileType, FileDeleteOptions, FileOverwriteOptions, FileWriteOptions, FileOpenOptions, FileSystemProviderErrorCode, createFileSystemProviderError, FileSystemProviderError, IFileSystemProviderWithFileReadWriteCapability, IFileSystemProviderWithFileReadStreamCapability, IFileSystemProviderWithOpenReadWriteCloseCapability, FileReadStreamOptions, IFileSystemProviderWithFileFolderCopyCapability, isFileOpenForWriteOptions } from 'vs/platform/files/common/files';\nimport { URI } from 'vs/base/common/uri';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { isLinux, isWindows } from 'vs/base/common/platform';\nimport { SymlinkSupport, move, copy, rimraf, RimRafMode, exists, readdir, IDirent } from 'vs/base/node/pfs';\nimport { normalize, basename, dirname } from 'vs/base/common/path';\nimport { joinPath } from 'vs/base/common/resources';\nimport { isEqual } from 'vs/base/common/extpath';\nimport { retry, ThrottledDelayer } from 'vs/base/common/async';\nimport { ILogService, LogLevel } from 'vs/platform/log/common/log';\nimport { localize } from 'vs/nls';\nimport { IDiskFileChange, toFileChanges, ILogMessage } from 'vs/platform/files/node/watcher/watcher';\nimport { FileWatcher as UnixWatcherService } from 'vs/platform/files/node/watcher/unix/watcherService';\nimport { FileWatcher as WindowsWatcherService } from 'vs/platform/files/node/watcher/win32/watcherService';\nimport { FileWatcher as NsfwWatcherService } from 'vs/platform/files/node/watcher/nsfw/watcherService';\nimport { FileWatcher as NodeJSWatcherService } from 'vs/platform/files/node/watcher/nodejs/watcherService';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { ReadableStreamEvents, newWriteableStream } from 'vs/base/common/stream';\nimport { readFileIntoStream } from 'vs/platform/files/common/io';\nimport { insert } from 'vs/base/common/arrays';\nimport { VSBuffer } from 'vs/base/common/buffer';\n\nexport interface IWatcherOptions {\n\tpollingInterval?: number;\n\tusePolling: boolean | string[];\n}\n\nexport interface IDiskFileSystemProviderOptions {\n\tbufferSize?: number;\n\twatcher?: IWatcherOptions;\n}\n\nexport class DiskFileSystemProvider extends Disposable implements\n\tIFileSystemProviderWithFileReadWriteCapability,\n\tIFileSystemProviderWithOpenReadWriteCloseCapability,\n\tIFileSystemProviderWithFileReadStreamCapability,\n\tIFileSystemProviderWithFileFolderCopyCapability {\n\n\tprivate readonly BUFFER_SIZE = this.options?.bufferSize || 64 * 1024;\n\n\tconstructor(\n\t\tprivate readonly logService: ILogService,\n\t\tprivate readonly options?: IDiskFileSystemProviderOptions\n\t) {\n\t\tsuper();\n\t}\n\n\t//#region File Capabilities\n\n\tonDidChangeCapabilities: Event<void> = Event.None;\n\n\tprotected _capabilities: FileSystemProviderCapabilities | undefined;\n\tget capabilities(): FileSystemProviderCapabilities {\n\t\tif (!this._capabilities) {\n\t\t\tthis._capabilities =\n\t\t\t\tFileSystemProviderCapabilities.FileReadWrite |\n\t\t\t\tFileSystemProviderCapabilities.FileOpenReadWriteClose |\n\t\t\t\tFileSystemProviderCapabilities.FileReadStream |\n\t\t\t\tFileSystemProviderCapabilities.FileFolderCopy |\n\t\t\t\tFileSystemProviderCapabilities.FileWriteUnlock;\n\n\t\t\tif (isLinux) {\n\t\t\t\tthis._capabilities |= FileSystemProviderCapabilities.PathCaseSensitive;\n\t\t\t}\n\t\t}\n\n\t\treturn this._capabilities;\n\t}\n\n\t//#endregion\n\n\t//#region File Metadata Resolving\n\n\tasync stat(resource: URI): Promise<IStat> {\n\t\ttry {\n\t\t\tconst { stat, symbolicLink } = await SymlinkSupport.stat(this.toFilePath(resource)); // cannot use fs.stat() here to support links properly\n\n\t\t\treturn {\n\t\t\t\ttype: this.toType(stat, symbolicLink),\n\t\t\t\tctime: stat.birthtime.getTime(), // intentionally not using ctime here, we want the creation time\n\t\t\t\tmtime: stat.mtime.getTime(),\n\t\t\t\tsize: stat.size\n\t\t\t};\n\t\t} catch (error) {\n\t\t\tthrow this.toFileSystemProviderError(error);\n\t\t}\n\t}\n\n\tasync readdir(resource: URI): Promise<[string, FileType][]> {\n\t\ttry {\n\t\t\tconst children = await readdir(this.toFilePath(resource), { withFileTypes: true });\n\n\t\t\tconst result: [string, FileType][] = [];\n\t\t\tawait Promise.all(children.map(async child => {\n\t\t\t\ttry {\n\t\t\t\t\tlet type: FileType;\n\t\t\t\t\tif (child.isSymbolicLink()) {\n\t\t\t\t\t\ttype = (await this.stat(joinPath(resource, child.name))).type; // always resolve target the link points to if any\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttype = this.toType(child);\n\t\t\t\t\t}\n\n\t\t\t\t\tresult.push([child.name, type]);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.logService.trace(error); // ignore errors for individual entries that can arise from permission denied\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\treturn result;\n\t\t} catch (error) {\n\t\t\tthrow this.toFileSystemProviderError(error);\n\t\t}\n\t}\n\n\tprivate toType(entry: Stats | IDirent, symbolicLink?: { dangling: boolean }): FileType {\n\n\t\t// Signal file type by checking for file / directory, except:\n\t\t// - symbolic links pointing to non-existing files are FileType.Unknown\n\t\t// - files that are neither file nor directory are FileType.Unknown\n\t\tlet type: FileType;\n\t\tif (symbolicLink?.dangling) {\n\t\t\ttype = FileType.Unknown;\n\t\t} else if (entry.isFile()) {\n\t\t\ttype = FileType.File;\n\t\t} else if (entry.isDirectory()) {\n\t\t\ttype = FileType.Directory;\n\t\t} else {\n\t\t\ttype = FileType.Unknown;\n\t\t}\n\n\t\t// Always signal symbolic link as file type additionally\n\t\tif (symbolicLink) {\n\t\t\ttype |= FileType.SymbolicLink;\n\t\t}\n\n\t\treturn type;\n\t}\n\n\t//#endregion\n\n\t//#region File Reading/Writing\n\n\tasync readFile(resource: URI): Promise<Uint8Array> {\n\t\ttry {\n\t\t\tconst filePath = this.toFilePath(resource);\n\n\t\t\treturn await promises.readFile(filePath);\n\t\t} catch (error) {\n\t\t\tthrow this.toFileSystemProviderError(error);\n\t\t}\n\t}\n\n\treadFileStream(resource: URI, opts: FileReadStreamOptions, token: CancellationToken): ReadableStreamEvents<Uint8Array> {\n\t\tconst stream = newWriteableStream<Uint8Array>(data => VSBuffer.concat(data.map(data => VSBuffer.wrap(data))).buffer);\n\n\t\treadFileIntoStream(this, resource, stream, data => data.buffer, {\n\t\t\t...opts,\n\t\t\tbufferSize: this.BUFFER_SIZE\n\t\t}, token);\n\n\t\treturn stream;\n\t}\n\n\tasync writeFile(resource: URI, content: Uint8Array, opts: FileWriteOptions): Promise<void> {\n\t\tlet handle: number | undefined = undefined;\n\t\ttry {\n\t\t\tconst filePath = this.toFilePath(resource);\n\n\t\t\t// Validate target unless { create: true, overwrite: true }\n\t\t\tif (!opts.create || !opts.overwrite) {\n\t\t\t\tconst fileExists = await exists(filePath);\n\t\t\t\tif (fileExists) {\n\t\t\t\t\tif (!opts.overwrite) {\n\t\t\t\t\t\tthrow createFileSystemProviderError(localize('fileExists', \"File already exists\"), FileSystemProviderErrorCode.FileExists);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (!opts.create) {\n\t\t\t\t\t\tthrow createFileSystemProviderError(localize('fileNotExists', \"File does not exist\"), FileSystemProviderErrorCode.FileNotFound);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Open\n\t\t\thandle = await this.open(resource, { create: true, unlock: opts.unlock });\n\n\t\t\t// Write content at once\n\t\t\tawait this.write(handle, 0, content, 0, content.byteLength);\n\t\t} catch (error) {\n\t\t\tthrow await this.toFileSystemProviderWriteError(resource, error);\n\t\t} finally {\n\t\t\tif (typeof handle === 'number') {\n\t\t\t\tawait this.close(handle);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate readonly mapHandleToPos: Map<number, number> = new Map();\n\n\tprivate readonly writeHandles = new Map<number, URI>();\n\tprivate canFlush: boolean = true;\n\n\tasync open(resource: URI, opts: FileOpenOptions): Promise<number> {\n\t\ttry {\n\t\t\tconst filePath = this.toFilePath(resource);\n\n\t\t\t// Determine wether to unlock the file (write only)\n\t\t\tif (isFileOpenForWriteOptions(opts) && opts.unlock) {\n\t\t\t\ttry {\n\t\t\t\t\tconst { stat } = await SymlinkSupport.stat(filePath);\n\t\t\t\t\tif (!(stat.mode & 0o200 /* File mode indicating writable by owner */)) {\n\t\t\t\t\t\tawait promises.chmod(filePath, stat.mode | 0o200);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.logService.trace(error); // ignore any errors here and try to just write\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Determine file flags for opening (read vs write)\n\t\t\tlet flags: string | undefined = undefined;\n\t\t\tif (isFileOpenForWriteOptions(opts)) {\n\t\t\t\tif (isWindows) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// On Windows and if the file exists, we use a different strategy of saving the file\n\t\t\t\t\t\t// by first truncating the file and then writing with r+ flag. This helps to save hidden files on Windows\n\t\t\t\t\t\t// (see https://github.com/microsoft/vscode/issues/931) and prevent removing alternate data streams\n\t\t\t\t\t\t// (see https://github.com/microsoft/vscode/issues/6363)\n\t\t\t\t\t\tawait promises.truncate(filePath, 0);\n\n\t\t\t\t\t\t// After a successful truncate() the flag can be set to 'r+' which will not truncate.\n\t\t\t\t\t\tflags = 'r+';\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (error.code !== 'ENOENT') {\n\t\t\t\t\t\t\tthis.logService.trace(error);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// we take opts.create as a hint that the file is opened for writing\n\t\t\t\t// as such we use 'w' to truncate an existing or create the\n\t\t\t\t// file otherwise. we do not allow reading.\n\t\t\t\tif (!flags) {\n\t\t\t\t\tflags = 'w';\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// otherwise we assume the file is opened for reading\n\t\t\t\t// as such we use 'r' to neither truncate, nor create\n\t\t\t\t// the file.\n\t\t\t\tflags = 'r';\n\t\t\t}\n\n\t\t\tconst handle = await promisify(open)(filePath, flags);\n\n\t\t\t// remember this handle to track file position of the handle\n\t\t\t// we init the position to 0 since the file descriptor was\n\t\t\t// just created and the position was not moved so far (see\n\t\t\t// also http://man7.org/linux/man-pages/man2/open.2.html -\n\t\t\t// \"The file offset is set to the beginning of the file.\")\n\t\t\tthis.mapHandleToPos.set(handle, 0);\n\n\t\t\t// remember that this handle was used for writing\n\t\t\tif (isFileOpenForWriteOptions(opts)) {\n\t\t\t\tthis.writeHandles.set(handle, resource);\n\t\t\t}\n\n\t\t\treturn handle;\n\t\t} catch (error) {\n\t\t\tif (isFileOpenForWriteOptions(opts)) {\n\t\t\t\tthrow await this.toFileSystemProviderWriteError(resource, error);\n\t\t\t} else {\n\t\t\t\tthrow this.toFileSystemProviderError(error);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync close(fd: number): Promise<void> {\n\t\ttry {\n\n\t\t\t// remove this handle from map of positions\n\t\t\tthis.mapHandleToPos.delete(fd);\n\n\t\t\t// if a handle is closed that was used for writing, ensure\n\t\t\t// to flush the contents to disk if possible.\n\t\t\tif (this.writeHandles.delete(fd) && this.canFlush) {\n\t\t\t\ttry {\n\t\t\t\t\tawait promisify(fdatasync)(fd);\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// In some exotic setups it is well possible that node fails to sync\n\t\t\t\t\t// In that case we disable flushing and log the error to our logger\n\t\t\t\t\tthis.canFlush = false;\n\t\t\t\t\tthis.logService.error(error);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn await promisify(close)(fd);\n\t\t} catch (error) {\n\t\t\tthrow this.toFileSystemProviderError(error);\n\t\t}\n\t}\n\n\tasync read(fd: number, pos: number, data: Uint8Array, offset: number, length: number): Promise<number> {\n\t\tconst normalizedPos = this.normalizePos(fd, pos);\n\n\t\tlet bytesRead: number | null = null;\n\t\ttry {\n\t\t\tconst result = await promisify(read)(fd, data, offset, length, normalizedPos);\n\n\t\t\tif (typeof result === 'number') {\n\t\t\t\tbytesRead = result; // node.d.ts fail\n\t\t\t} else {\n\t\t\t\tbytesRead = result.bytesRead;\n\t\t\t}\n\n\t\t\treturn bytesRead;\n\t\t} catch (error) {\n\t\t\tthrow this.toFileSystemProviderError(error);\n\t\t} finally {\n\t\t\tthis.updatePos(fd, normalizedPos, bytesRead);\n\t\t}\n\t}\n\n\tprivate normalizePos(fd: number, pos: number): number | null {\n\n\t\t// when calling fs.read/write we try to avoid passing in the \"pos\" argument and\n\t\t// rather prefer to pass in \"null\" because this avoids an extra seek(pos)\n\t\t// call that in some cases can even fail (e.g. when opening a file over FTP -\n\t\t// see https://github.com/microsoft/vscode/issues/73884).\n\t\t//\n\t\t// as such, we compare the passed in position argument with our last known\n\t\t// position for the file descriptor and use \"null\" if they match.\n\t\tif (pos === this.mapHandleToPos.get(fd)) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn pos;\n\t}\n\n\tprivate updatePos(fd: number, pos: number | null, bytesLength: number | null): void {\n\t\tconst lastKnownPos = this.mapHandleToPos.get(fd);\n\t\tif (typeof lastKnownPos === 'number') {\n\n\t\t\t// pos !== null signals that previously a position was used that is\n\t\t\t// not null. node.js documentation explains, that in this case\n\t\t\t// the internal file pointer is not moving and as such we do not move\n\t\t\t// our position pointer.\n\t\t\t//\n\t\t\t// Docs: \"If position is null, data will be read from the current file position,\n\t\t\t// and the file position will be updated. If position is an integer, the file position\n\t\t\t// will remain unchanged.\"\n\t\t\tif (typeof pos === 'number') {\n\t\t\t\t// do not modify the position\n\t\t\t}\n\n\t\t\t// bytesLength = number is a signal that the read/write operation was\n\t\t\t// successful and as such we need to advance the position in the Map\n\t\t\t//\n\t\t\t// Docs (http://man7.org/linux/man-pages/man2/read.2.html):\n\t\t\t// \"On files that support seeking, the read operation commences at the\n\t\t\t// file offset, and the file offset is incremented by the number of\n\t\t\t// bytes read.\"\n\t\t\t//\n\t\t\t// Docs (http://man7.org/linux/man-pages/man2/write.2.html):\n\t\t\t// \"For a seekable file (i.e., one to which lseek(2) may be applied, for\n\t\t\t// example, a regular file) writing takes place at the file offset, and\n\t\t\t// the file offset is incremented by the number of bytes actually\n\t\t\t// written.\"\n\t\t\telse if (typeof bytesLength === 'number') {\n\t\t\t\tthis.mapHandleToPos.set(fd, lastKnownPos + bytesLength);\n\t\t\t}\n\n\t\t\t// bytesLength = null signals an error in the read/write operation\n\t\t\t// and as such we drop the handle from the Map because the position\n\t\t\t// is unspecificed at this point.\n\t\t\telse {\n\t\t\t\tthis.mapHandleToPos.delete(fd);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync write(fd: number, pos: number, data: Uint8Array, offset: number, length: number): Promise<number> {\n\t\t// we know at this point that the file to write to is truncated and thus empty\n\t\t// if the write now fails, the file remains empty. as such we really try hard\n\t\t// to ensure the write succeeds by retrying up to three times.\n\t\treturn retry(() => this.doWrite(fd, pos, data, offset, length), 100 /* ms delay */, 3 /* retries */);\n\t}\n\n\tprivate async doWrite(fd: number, pos: number, data: Uint8Array, offset: number, length: number): Promise<number> {\n\t\tconst normalizedPos = this.normalizePos(fd, pos);\n\n\t\tlet bytesWritten: number | null = null;\n\t\ttry {\n\t\t\tconst result = await promisify(write)(fd, data, offset, length, normalizedPos);\n\n\t\t\tif (typeof result === 'number') {\n\t\t\t\tbytesWritten = result; // node.d.ts fail\n\t\t\t} else {\n\t\t\t\tbytesWritten = result.bytesWritten;\n\t\t\t}\n\n\t\t\treturn bytesWritten;\n\t\t} catch (error) {\n\t\t\tthrow await this.toFileSystemProviderWriteError(this.writeHandles.get(fd), error);\n\t\t} finally {\n\t\t\tthis.updatePos(fd, normalizedPos, bytesWritten);\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region Move/Copy/Delete/Create Folder\n\n\tasync mkdir(resource: URI): Promise<void> {\n\t\ttry {\n\t\t\tawait promises.mkdir(this.toFilePath(resource));\n\t\t} catch (error) {\n\t\t\tthrow this.toFileSystemProviderError(error);\n\t\t}\n\t}\n\n\tasync delete(resource: URI, opts: FileDeleteOptions): Promise<void> {\n\t\ttry {\n\t\t\tconst filePath = this.toFilePath(resource);\n\n\t\t\tawait this.doDelete(filePath, opts);\n\t\t} catch (error) {\n\t\t\tthrow this.toFileSystemProviderError(error);\n\t\t}\n\t}\n\n\tprotected async doDelete(filePath: string, opts: FileDeleteOptions): Promise<void> {\n\t\tif (opts.recursive) {\n\t\t\tawait rimraf(filePath, RimRafMode.MOVE);\n\t\t} else {\n\t\t\tawait promises.unlink(filePath);\n\t\t}\n\t}\n\n\tasync rename(from: URI, to: URI, opts: FileOverwriteOptions): Promise<void> {\n\t\tconst fromFilePath = this.toFilePath(from);\n\t\tconst toFilePath = this.toFilePath(to);\n\n\t\tif (fromFilePath === toFilePath) {\n\t\t\treturn; // simulate node.js behaviour here and do a no-op if paths match\n\t\t}\n\n\t\ttry {\n\n\t\t\t// Ensure target does not exist\n\t\t\tawait this.validateTargetDeleted(from, to, 'move', opts.overwrite);\n\n\t\t\t// Move\n\t\t\tawait move(fromFilePath, toFilePath);\n\t\t} catch (error) {\n\n\t\t\t// rewrite some typical errors that can happen especially around symlinks\n\t\t\t// to something the user can better understand\n\t\t\tif (error.code === 'EINVAL' || error.code === 'EBUSY' || error.code === 'ENAMETOOLONG') {\n\t\t\t\terror = new Error(localize('moveError', \"Unable to move '{0}' into '{1}' ({2}).\", basename(fromFilePath), basename(dirname(toFilePath)), error.toString()));\n\t\t\t}\n\n\t\t\tthrow this.toFileSystemProviderError(error);\n\t\t}\n\t}\n\n\tasync copy(from: URI, to: URI, opts: FileOverwriteOptions): Promise<void> {\n\t\tconst fromFilePath = this.toFilePath(from);\n\t\tconst toFilePath = this.toFilePath(to);\n\n\t\tif (fromFilePath === toFilePath) {\n\t\t\treturn; // simulate node.js behaviour here and do a no-op if paths match\n\t\t}\n\n\t\ttry {\n\n\t\t\t// Ensure target does not exist\n\t\t\tawait this.validateTargetDeleted(from, to, 'copy', opts.overwrite);\n\n\t\t\t// Copy\n\t\t\tawait copy(fromFilePath, toFilePath, { preserveSymlinks: true });\n\t\t} catch (error) {\n\n\t\t\t// rewrite some typical errors that can happen especially around symlinks\n\t\t\t// to something the user can better understand\n\t\t\tif (error.code === 'EINVAL' || error.code === 'EBUSY' || error.code === 'ENAMETOOLONG') {\n\t\t\t\terror = new Error(localize('copyError', \"Unable to copy '{0}' into '{1}' ({2}).\", basename(fromFilePath), basename(dirname(toFilePath)), error.toString()));\n\t\t\t}\n\n\t\t\tthrow this.toFileSystemProviderError(error);\n\t\t}\n\t}\n\n\tprivate async validateTargetDeleted(from: URI, to: URI, mode: 'move' | 'copy', overwrite?: boolean): Promise<void> {\n\t\tconst fromFilePath = this.toFilePath(from);\n\t\tconst toFilePath = this.toFilePath(to);\n\n\t\tlet isSameResourceWithDifferentPathCase = false;\n\t\tconst isPathCaseSensitive = !!(this.capabilities & FileSystemProviderCapabilities.PathCaseSensitive);\n\t\tif (!isPathCaseSensitive) {\n\t\t\tisSameResourceWithDifferentPathCase = isEqual(fromFilePath, toFilePath, true /* ignore case */);\n\t\t}\n\n\t\tif (isSameResourceWithDifferentPathCase && mode === 'copy') {\n\t\t\tthrow createFileSystemProviderError(localize('fileCopyErrorPathCase', \"'File cannot be copied to same path with different path case\"), FileSystemProviderErrorCode.FileExists);\n\t\t}\n\n\t\t// handle existing target (unless this is a case change)\n\t\tif (!isSameResourceWithDifferentPathCase && await exists(toFilePath)) {\n\t\t\tif (!overwrite) {\n\t\t\t\tthrow createFileSystemProviderError(localize('fileCopyErrorExists', \"File at target already exists\"), FileSystemProviderErrorCode.FileExists);\n\t\t\t}\n\n\t\t\t// Delete target\n\t\t\tawait this.delete(to, { recursive: true, useTrash: false });\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region File Watching\n\n\tprivate readonly _onDidWatchErrorOccur = this._register(new Emitter<string>());\n\treadonly onDidErrorOccur = this._onDidWatchErrorOccur.event;\n\n\tprivate readonly _onDidChangeFile = this._register(new Emitter<readonly IFileChange[]>());\n\treadonly onDidChangeFile = this._onDidChangeFile.event;\n\n\tprivate recursiveWatcher: WindowsWatcherService | UnixWatcherService | NsfwWatcherService | undefined;\n\tprivate readonly recursiveFoldersToWatch: { path: string, excludes: string[] }[] = [];\n\tprivate recursiveWatchRequestDelayer = this._register(new ThrottledDelayer<void>(0));\n\n\tprivate recursiveWatcherLogLevelListener: IDisposable | undefined;\n\n\twatch(resource: URI, opts: IWatchOptions): IDisposable {\n\t\tif (opts.recursive) {\n\t\t\treturn this.watchRecursive(resource, opts.excludes);\n\t\t}\n\n\t\treturn this.watchNonRecursive(resource); // TODO@bpasero ideally the same watcher can be used in both cases\n\t}\n\n\tprivate watchRecursive(resource: URI, excludes: string[]): IDisposable {\n\n\t\t// Add to list of folders to watch recursively\n\t\tconst folderToWatch = { path: this.toFilePath(resource), excludes };\n\t\tconst remove = insert(this.recursiveFoldersToWatch, folderToWatch);\n\n\t\t// Trigger update\n\t\tthis.refreshRecursiveWatchers();\n\n\t\treturn toDisposable(() => {\n\n\t\t\t// Remove from list of folders to watch recursively\n\t\t\tremove();\n\n\t\t\t// Trigger update\n\t\t\tthis.refreshRecursiveWatchers();\n\t\t});\n\t}\n\n\tprivate refreshRecursiveWatchers(): void {\n\n\t\t// Buffer requests for recursive watching to decide on right watcher\n\t\t// that supports potentially watching more than one folder at once\n\t\tthis.recursiveWatchRequestDelayer.trigger(async () => {\n\t\t\tthis.doRefreshRecursiveWatchers();\n\t\t});\n\t}\n\n\tprivate doRefreshRecursiveWatchers(): void {\n\n\t\t// Reuse existing\n\t\tif (this.recursiveWatcher instanceof NsfwWatcherService) {\n\t\t\tthis.recursiveWatcher.setFolders(this.recursiveFoldersToWatch);\n\t\t}\n\n\t\t// Create new\n\t\telse {\n\n\t\t\t// Dispose old\n\t\t\tdispose(this.recursiveWatcher);\n\t\t\tthis.recursiveWatcher = undefined;\n\n\t\t\t// Create new if we actually have folders to watch\n\t\t\tif (this.recursiveFoldersToWatch.length > 0) {\n\t\t\t\tlet watcherImpl: {\n\t\t\t\t\tnew(\n\t\t\t\t\t\tfolders: { path: string, excludes: string[] }[],\n\t\t\t\t\t\tonChange: (changes: IDiskFileChange[]) => void,\n\t\t\t\t\t\tonLogMessage: (msg: ILogMessage) => void,\n\t\t\t\t\t\tverboseLogging: boolean,\n\t\t\t\t\t\twatcherOptions?: IWatcherOptions\n\t\t\t\t\t): WindowsWatcherService | UnixWatcherService | NsfwWatcherService\n\t\t\t\t};\n\n\t\t\t\tlet watcherOptions: IWatcherOptions | undefined = undefined;\n\n\t\t\t\t// requires a polling watcher\n\t\t\t\tif (this.options?.watcher?.usePolling) {\n\t\t\t\t\twatcherImpl = UnixWatcherService;\n\t\t\t\t\twatcherOptions = this.options?.watcher;\n\t\t\t\t}\n\n\t\t\t\t// Single Folder Watcher\n\t\t\t\telse {\n\t\t\t\t\tif (this.recursiveFoldersToWatch.length === 1) {\n\t\t\t\t\t\tif (isWindows) {\n\t\t\t\t\t\t\twatcherImpl = WindowsWatcherService;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\twatcherImpl = UnixWatcherService;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Multi Folder Watcher\n\t\t\t\t\telse {\n\t\t\t\t\t\twatcherImpl = NsfwWatcherService;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Create and start watching\n\t\t\t\tthis.recursiveWatcher = new watcherImpl(\n\t\t\t\t\tthis.recursiveFoldersToWatch,\n\t\t\t\t\tevent => this._onDidChangeFile.fire(toFileChanges(event)),\n\t\t\t\t\tmsg => {\n\t\t\t\t\t\tif (msg.type === 'error') {\n\t\t\t\t\t\t\tthis._onDidWatchErrorOccur.fire(msg.message);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.logService[msg.type](msg.message);\n\t\t\t\t\t},\n\t\t\t\t\tthis.logService.getLevel() === LogLevel.Trace,\n\t\t\t\t\twatcherOptions\n\t\t\t\t);\n\n\t\t\t\tif (!this.recursiveWatcherLogLevelListener) {\n\t\t\t\t\tthis.recursiveWatcherLogLevelListener = this.logService.onDidChangeLogLevel(() => {\n\t\t\t\t\t\tif (this.recursiveWatcher) {\n\t\t\t\t\t\t\tthis.recursiveWatcher.setVerboseLogging(this.logService.getLevel() === LogLevel.Trace);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate watchNonRecursive(resource: URI): IDisposable {\n\t\tconst watcherService = new NodeJSWatcherService(\n\t\t\tthis.toFilePath(resource),\n\t\t\tchanges => this._onDidChangeFile.fire(toFileChanges(changes)),\n\t\t\tmsg => {\n\t\t\t\tif (msg.type === 'error') {\n\t\t\t\t\tthis._onDidWatchErrorOccur.fire(msg.message);\n\t\t\t\t}\n\n\t\t\t\tthis.logService[msg.type](msg.message);\n\t\t\t},\n\t\t\tthis.logService.getLevel() === LogLevel.Trace\n\t\t);\n\n\t\tconst logLevelListener = this.logService.onDidChangeLogLevel(() => {\n\t\t\twatcherService.setVerboseLogging(this.logService.getLevel() === LogLevel.Trace);\n\t\t});\n\n\t\treturn combinedDisposable(watcherService, logLevelListener);\n\t}\n\n\t//#endregion\n\n\t//#region Helpers\n\n\tprotected toFilePath(resource: URI): string {\n\t\treturn normalize(resource.fsPath);\n\t}\n\n\tprivate toFileSystemProviderError(error: NodeJS.ErrnoException): FileSystemProviderError {\n\t\tif (error instanceof FileSystemProviderError) {\n\t\t\treturn error; // avoid double conversion\n\t\t}\n\n\t\tlet code: FileSystemProviderErrorCode;\n\t\tswitch (error.code) {\n\t\t\tcase 'ENOENT':\n\t\t\t\tcode = FileSystemProviderErrorCode.FileNotFound;\n\t\t\t\tbreak;\n\t\t\tcase 'EISDIR':\n\t\t\t\tcode = FileSystemProviderErrorCode.FileIsADirectory;\n\t\t\t\tbreak;\n\t\t\tcase 'ENOTDIR':\n\t\t\t\tcode = FileSystemProviderErrorCode.FileNotADirectory;\n\t\t\t\tbreak;\n\t\t\tcase 'EEXIST':\n\t\t\t\tcode = FileSystemProviderErrorCode.FileExists;\n\t\t\t\tbreak;\n\t\t\tcase 'EPERM':\n\t\t\tcase 'EACCES':\n\t\t\t\tcode = FileSystemProviderErrorCode.NoPermissions;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tcode = FileSystemProviderErrorCode.Unknown;\n\t\t}\n\n\t\treturn createFileSystemProviderError(error, code);\n\t}\n\n\tprivate async toFileSystemProviderWriteError(resource: URI | undefined, error: NodeJS.ErrnoException): Promise<FileSystemProviderError> {\n\t\tlet fileSystemProviderWriteError = this.toFileSystemProviderError(error);\n\n\t\t// If the write error signals permission issues, we try\n\t\t// to read the file's mode to see if the file is write\n\t\t// locked.\n\t\tif (resource && fileSystemProviderWriteError.code === FileSystemProviderErrorCode.NoPermissions) {\n\t\t\ttry {\n\t\t\t\tconst { stat } = await SymlinkSupport.stat(this.toFilePath(resource));\n\t\t\t\tif (!(stat.mode & 0o200 /* File mode indicating writable by owner */)) {\n\t\t\t\t\tfileSystemProviderWriteError = createFileSystemProviderError(error, FileSystemProviderErrorCode.FileWriteLocked);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tthis.logService.trace(error); // ignore - return original error\n\t\t\t}\n\t\t}\n\n\t\treturn fileSystemProviderWriteError;\n\t}\n\n\t//#endregion\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\n\t\tdispose(this.recursiveWatcher);\n\t\tthis.recursiveWatcher = undefined;\n\n\t\tdispose(this.recursiveWatcherLogLevelListener);\n\t\tthis.recursiveWatcherLogLevelListener = undefined;\n\t}\n}\n"]}