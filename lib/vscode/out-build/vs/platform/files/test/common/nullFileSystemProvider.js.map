{"version":3,"file":"nullFileSystemProvider.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/files/test/common/nullFileSystemProvider.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAOhG,MAAa,sBAAsB;QAelC,YAAoB,oBAAuC,GAAG,EAAE,CAAC,sBAAU,CAAC,IAAI;YAA5D,sBAAiB,GAAjB,iBAAiB,CAA2C;YAbhF,iBAAY,uBAA2E;YAEtE,6BAAwB,GAAG,IAAI,eAAO,EAAQ,CAAC;YACvD,4BAAuB,GAAgB,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC;YAQ3E,oBAAe,GAAkC,aAAK,CAAC,IAAI,CAAC;QAEe,CAAC;QARrF,eAAe,CAAC,YAA4C;YAC3D,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;YAEjC,IAAI,CAAC,wBAAwB,CAAC,IAAI,EAAE,CAAC;QACtC,CAAC;QAMD,KAAK,CAAC,QAAa,EAAE,IAAmB,IAAiB,OAAO,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC,CAAC;QAC3F,KAAK,CAAC,IAAI,CAAC,QAAa,IAAoB,OAAO,SAAU,CAAC,CAAC,CAAC;QAChE,KAAK,CAAC,KAAK,CAAC,QAAa,IAAmB,OAAO,SAAS,CAAC,CAAC,CAAC;QAC/D,KAAK,CAAC,OAAO,CAAC,QAAa,IAAmC,OAAO,SAAU,CAAC,CAAC,CAAC;QAClF,KAAK,CAAC,MAAM,CAAC,QAAa,EAAE,IAAuB,IAAmB,OAAO,SAAS,CAAC,CAAC,CAAC;QACzF,KAAK,CAAC,MAAM,CAAC,IAAS,EAAE,EAAO,EAAE,IAA0B,IAAmB,OAAO,SAAS,CAAC,CAAC,CAAC;QACjG,KAAK,CAAC,IAAI,CAAE,IAAS,EAAE,EAAO,EAAE,IAA0B,IAAmB,OAAO,SAAS,CAAC,CAAC,CAAC;QAChG,KAAK,CAAC,QAAQ,CAAE,QAAa,IAAyB,OAAO,SAAU,CAAC,CAAC,CAAC;QAC1E,KAAK,CAAC,SAAS,CAAE,QAAa,EAAE,OAAmB,EAAE,IAAsB,IAAmB,OAAO,SAAS,CAAC,CAAC,CAAC;QACjH,KAAK,CAAC,IAAI,CAAE,QAAa,EAAE,IAAqB,IAAqB,OAAO,SAAU,CAAC,CAAC,CAAC;QACzF,KAAK,CAAC,KAAK,CAAE,EAAU,IAAmB,OAAO,SAAS,CAAC,CAAC,CAAC;QAC7D,KAAK,CAAC,IAAI,CAAE,EAAU,EAAE,GAAW,EAAE,IAAgB,EAAE,MAAc,EAAE,MAAc,IAAqB,OAAO,SAAU,CAAC,CAAC,CAAC;QAC9H,KAAK,CAAC,KAAK,CAAE,EAAU,EAAE,GAAW,EAAE,IAAgB,EAAE,MAAc,EAAE,MAAc,IAAqB,OAAO,SAAU,CAAC,CAAC,CAAC;KAC/H;IA9BD,wDA8BC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { FileSystemProviderCapabilities, IFileSystemProvider, IWatchOptions, IStat, FileType, FileDeleteOptions, FileOverwriteOptions, FileWriteOptions, FileOpenOptions, IFileChange } from 'vs/platform/files/common/files';\nimport { IDisposable, Disposable } from 'vs/base/common/lifecycle';\nimport { Emitter, Event } from 'vs/base/common/event';\n\nexport class NullFileSystemProvider implements IFileSystemProvider {\n\n\tcapabilities: FileSystemProviderCapabilities = FileSystemProviderCapabilities.Readonly;\n\n\tprivate readonly _onDidChangeCapabilities = new Emitter<void>();\n\treadonly onDidChangeCapabilities: Event<void> = this._onDidChangeCapabilities.event;\n\n\tsetCapabilities(capabilities: FileSystemProviderCapabilities): void {\n\t\tthis.capabilities = capabilities;\n\n\t\tthis._onDidChangeCapabilities.fire();\n\t}\n\n\treadonly onDidChangeFile: Event<readonly IFileChange[]> = Event.None;\n\n\tconstructor(private disposableFactory: () => IDisposable = () => Disposable.None) { }\n\n\twatch(resource: URI, opts: IWatchOptions): IDisposable { return this.disposableFactory(); }\n\tasync stat(resource: URI): Promise<IStat> { return undefined!; }\n\tasync mkdir(resource: URI): Promise<void> { return undefined; }\n\tasync readdir(resource: URI): Promise<[string, FileType][]> { return undefined!; }\n\tasync delete(resource: URI, opts: FileDeleteOptions): Promise<void> { return undefined; }\n\tasync rename(from: URI, to: URI, opts: FileOverwriteOptions): Promise<void> { return undefined; }\n\tasync copy?(from: URI, to: URI, opts: FileOverwriteOptions): Promise<void> { return undefined; }\n\tasync readFile?(resource: URI): Promise<Uint8Array> { return undefined!; }\n\tasync writeFile?(resource: URI, content: Uint8Array, opts: FileWriteOptions): Promise<void> { return undefined; }\n\tasync open?(resource: URI, opts: FileOpenOptions): Promise<number> { return undefined!; }\n\tasync close?(fd: number): Promise<void> { return undefined; }\n\tasync read?(fd: number, pos: number, data: Uint8Array, offset: number, length: number): Promise<number> { return undefined!; }\n\tasync write?(fd: number, pos: number, data: Uint8Array, offset: number, length: number): Promise<number> { return undefined!; }\n}\n"]}