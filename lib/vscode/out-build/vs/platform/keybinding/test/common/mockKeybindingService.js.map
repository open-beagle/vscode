{"version":3,"file":"mockKeybindingService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/keybinding/test/common/mockKeybindingService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { Keybinding, ResolvedKeybinding, SimpleKeybinding } from 'vs/base/common/keyCodes';\nimport { OS } from 'vs/base/common/platform';\nimport { IContextKey, IContextKeyChangeEvent, IContextKeyService, IContextKeyServiceTarget, ContextKeyExpression } from 'vs/platform/contextkey/common/contextkey';\nimport { IKeybindingEvent, IKeybindingService, IKeyboardEvent } from 'vs/platform/keybinding/common/keybinding';\nimport { IResolveResult } from 'vs/platform/keybinding/common/keybindingResolver';\nimport { ResolvedKeybindingItem } from 'vs/platform/keybinding/common/resolvedKeybindingItem';\nimport { USLayoutResolvedKeybinding } from 'vs/platform/keybinding/common/usLayoutResolvedKeybinding';\n\nclass MockKeybindingContextKey<T> implements IContextKey<T> {\n\tprivate _defaultValue: T | undefined;\n\tprivate _value: T | undefined;\n\n\tconstructor(defaultValue: T | undefined) {\n\t\tthis._defaultValue = defaultValue;\n\t\tthis._value = this._defaultValue;\n\t}\n\n\tpublic set(value: T | undefined): void {\n\t\tthis._value = value;\n\t}\n\n\tpublic reset(): void {\n\t\tthis._value = this._defaultValue;\n\t}\n\n\tpublic get(): T | undefined {\n\t\treturn this._value;\n\t}\n}\n\nexport class MockContextKeyService implements IContextKeyService {\n\n\tpublic _serviceBrand: undefined;\n\tprivate _keys = new Map<string, IContextKey<any>>();\n\n\tpublic dispose(): void {\n\t\t//\n\t}\n\tpublic createKey<T>(key: string, defaultValue: T | undefined): IContextKey<T> {\n\t\tlet ret = new MockKeybindingContextKey(defaultValue);\n\t\tthis._keys.set(key, ret);\n\t\treturn ret;\n\t}\n\tpublic contextMatchesRules(rules: ContextKeyExpression): boolean {\n\t\treturn false;\n\t}\n\tpublic get onDidChangeContext(): Event<IContextKeyChangeEvent> {\n\t\treturn Event.None;\n\t}\n\tpublic bufferChangeEvents(callback: () => void) { callback(); }\n\tpublic getContextKeyValue(key: string) {\n\t\tconst value = this._keys.get(key);\n\t\tif (value) {\n\t\t\treturn value.get();\n\t\t}\n\t}\n\tpublic getContext(domNode: HTMLElement): any {\n\t\treturn null;\n\t}\n\tpublic createScoped(domNode: HTMLElement): IContextKeyService {\n\t\treturn this;\n\t}\n\tpublic createOverlay(): IContextKeyService {\n\t\treturn this;\n\t}\n\tupdateParent(_parentContextKeyService: IContextKeyService): void {\n\t\t// no-op\n\t}\n}\n\nexport class MockScopableContextKeyService extends MockContextKeyService {\n\t/**\n\t * Don't implement this for all tests since we rarely depend on this behavior and it isn't implemented fully\n\t */\n\tpublic override createScoped(domNote: HTMLElement): IContextKeyService {\n\t\treturn new MockContextKeyService();\n\t}\n}\n\nexport class MockKeybindingService implements IKeybindingService {\n\tpublic _serviceBrand: undefined;\n\n\tpublic readonly inChordMode: boolean = false;\n\n\tpublic get onDidUpdateKeybindings(): Event<IKeybindingEvent> {\n\t\treturn Event.None;\n\t}\n\n\tpublic getDefaultKeybindingsContent(): string {\n\t\treturn '';\n\t}\n\n\tpublic getDefaultKeybindings(): ResolvedKeybindingItem[] {\n\t\treturn [];\n\t}\n\n\tpublic getKeybindings(): ResolvedKeybindingItem[] {\n\t\treturn [];\n\t}\n\n\tpublic resolveKeybinding(keybinding: Keybinding): ResolvedKeybinding[] {\n\t\treturn [new USLayoutResolvedKeybinding(keybinding, OS)];\n\t}\n\n\tpublic resolveKeyboardEvent(keyboardEvent: IKeyboardEvent): ResolvedKeybinding {\n\t\tlet keybinding = new SimpleKeybinding(\n\t\t\tkeyboardEvent.ctrlKey,\n\t\t\tkeyboardEvent.shiftKey,\n\t\t\tkeyboardEvent.altKey,\n\t\t\tkeyboardEvent.metaKey,\n\t\t\tkeyboardEvent.keyCode\n\t\t);\n\t\treturn this.resolveKeybinding(keybinding.toChord())[0];\n\t}\n\n\tpublic resolveUserBinding(userBinding: string): ResolvedKeybinding[] {\n\t\treturn [];\n\t}\n\n\tpublic lookupKeybindings(commandId: string): ResolvedKeybinding[] {\n\t\treturn [];\n\t}\n\n\tpublic lookupKeybinding(commandId: string): ResolvedKeybinding | undefined {\n\t\treturn undefined;\n\t}\n\n\tpublic customKeybindingsCount(): number {\n\t\treturn 0;\n\t}\n\n\tpublic softDispatch(keybinding: IKeyboardEvent, target: IContextKeyServiceTarget): IResolveResult | null {\n\t\treturn null;\n\t}\n\n\tpublic dispatchByUserSettingsLabel(userSettingsLabel: string, target: IContextKeyServiceTarget): void {\n\n\t}\n\n\tpublic dispatchEvent(e: IKeyboardEvent, target: IContextKeyServiceTarget): boolean {\n\t\treturn false;\n\t}\n\n\tpublic mightProducePrintableCharacter(e: IKeyboardEvent): boolean {\n\t\treturn false;\n\t}\n\n\tpublic toggleLogging(): boolean {\n\t\treturn false;\n\t}\n\n\tpublic _dumpDebugInfo(): string {\n\t\treturn '';\n\t}\n\n\tpublic _dumpDebugInfoJSON(): string {\n\t\treturn '';\n\t}\n\n\tpublic registerSchemaContribution() {\n\t\t// noop\n\t}\n}\n"]}