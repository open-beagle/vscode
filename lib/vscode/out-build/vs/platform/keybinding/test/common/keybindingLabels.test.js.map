{"version":3,"file":"keybindingLabels.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/keybinding/test/common/keybindingLabels.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as assert from 'assert';\nimport { KeyChord, KeyCode, KeyMod, createKeybinding } from 'vs/base/common/keyCodes';\nimport { OperatingSystem } from 'vs/base/common/platform';\nimport { USLayoutResolvedKeybinding } from 'vs/platform/keybinding/common/usLayoutResolvedKeybinding';\n\nsuite('KeybindingLabels', () => {\n\n\tfunction assertUSLabel(OS: OperatingSystem, keybinding: number, expected: string): void {\n\t\tconst usResolvedKeybinding = new USLayoutResolvedKeybinding(createKeybinding(keybinding, OS)!, OS);\n\t\tassert.strictEqual(usResolvedKeybinding.getLabel(), expected);\n\t}\n\n\ttest('Windows US label', () => {\n\t\t// no modifier\n\t\tassertUSLabel(OperatingSystem.Windows, KeyCode.KEY_A, 'A');\n\n\t\t// one modifier\n\t\tassertUSLabel(OperatingSystem.Windows, KeyMod.CtrlCmd | KeyCode.KEY_A, 'Ctrl+A');\n\t\tassertUSLabel(OperatingSystem.Windows, KeyMod.Shift | KeyCode.KEY_A, 'Shift+A');\n\t\tassertUSLabel(OperatingSystem.Windows, KeyMod.Alt | KeyCode.KEY_A, 'Alt+A');\n\t\tassertUSLabel(OperatingSystem.Windows, KeyMod.WinCtrl | KeyCode.KEY_A, 'Windows+A');\n\n\t\t// two modifiers\n\t\tassertUSLabel(OperatingSystem.Windows, KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_A, 'Ctrl+Shift+A');\n\t\tassertUSLabel(OperatingSystem.Windows, KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KEY_A, 'Ctrl+Alt+A');\n\t\tassertUSLabel(OperatingSystem.Windows, KeyMod.CtrlCmd | KeyMod.WinCtrl | KeyCode.KEY_A, 'Ctrl+Windows+A');\n\t\tassertUSLabel(OperatingSystem.Windows, KeyMod.Shift | KeyMod.Alt | KeyCode.KEY_A, 'Shift+Alt+A');\n\t\tassertUSLabel(OperatingSystem.Windows, KeyMod.Shift | KeyMod.WinCtrl | KeyCode.KEY_A, 'Shift+Windows+A');\n\t\tassertUSLabel(OperatingSystem.Windows, KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KEY_A, 'Alt+Windows+A');\n\n\t\t// three modifiers\n\t\tassertUSLabel(OperatingSystem.Windows, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyCode.KEY_A, 'Ctrl+Shift+Alt+A');\n\t\tassertUSLabel(OperatingSystem.Windows, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.WinCtrl | KeyCode.KEY_A, 'Ctrl+Shift+Windows+A');\n\t\tassertUSLabel(OperatingSystem.Windows, KeyMod.CtrlCmd | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KEY_A, 'Ctrl+Alt+Windows+A');\n\t\tassertUSLabel(OperatingSystem.Windows, KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KEY_A, 'Shift+Alt+Windows+A');\n\n\t\t// four modifiers\n\t\tassertUSLabel(OperatingSystem.Windows, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KEY_A, 'Ctrl+Shift+Alt+Windows+A');\n\n\t\t// chord\n\t\tassertUSLabel(OperatingSystem.Windows, KeyChord(KeyMod.CtrlCmd | KeyCode.KEY_A, KeyMod.CtrlCmd | KeyCode.KEY_B), 'Ctrl+A Ctrl+B');\n\t});\n\n\ttest('Linux US label', () => {\n\t\t// no modifier\n\t\tassertUSLabel(OperatingSystem.Linux, KeyCode.KEY_A, 'A');\n\n\t\t// one modifier\n\t\tassertUSLabel(OperatingSystem.Linux, KeyMod.CtrlCmd | KeyCode.KEY_A, 'Ctrl+A');\n\t\tassertUSLabel(OperatingSystem.Linux, KeyMod.Shift | KeyCode.KEY_A, 'Shift+A');\n\t\tassertUSLabel(OperatingSystem.Linux, KeyMod.Alt | KeyCode.KEY_A, 'Alt+A');\n\t\tassertUSLabel(OperatingSystem.Linux, KeyMod.WinCtrl | KeyCode.KEY_A, 'Super+A');\n\n\t\t// two modifiers\n\t\tassertUSLabel(OperatingSystem.Linux, KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_A, 'Ctrl+Shift+A');\n\t\tassertUSLabel(OperatingSystem.Linux, KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KEY_A, 'Ctrl+Alt+A');\n\t\tassertUSLabel(OperatingSystem.Linux, KeyMod.CtrlCmd | KeyMod.WinCtrl | KeyCode.KEY_A, 'Ctrl+Super+A');\n\t\tassertUSLabel(OperatingSystem.Linux, KeyMod.Shift | KeyMod.Alt | KeyCode.KEY_A, 'Shift+Alt+A');\n\t\tassertUSLabel(OperatingSystem.Linux, KeyMod.Shift | KeyMod.WinCtrl | KeyCode.KEY_A, 'Shift+Super+A');\n\t\tassertUSLabel(OperatingSystem.Linux, KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KEY_A, 'Alt+Super+A');\n\n\t\t// three modifiers\n\t\tassertUSLabel(OperatingSystem.Linux, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyCode.KEY_A, 'Ctrl+Shift+Alt+A');\n\t\tassertUSLabel(OperatingSystem.Linux, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.WinCtrl | KeyCode.KEY_A, 'Ctrl+Shift+Super+A');\n\t\tassertUSLabel(OperatingSystem.Linux, KeyMod.CtrlCmd | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KEY_A, 'Ctrl+Alt+Super+A');\n\t\tassertUSLabel(OperatingSystem.Linux, KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KEY_A, 'Shift+Alt+Super+A');\n\n\t\t// four modifiers\n\t\tassertUSLabel(OperatingSystem.Linux, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KEY_A, 'Ctrl+Shift+Alt+Super+A');\n\n\t\t// chord\n\t\tassertUSLabel(OperatingSystem.Linux, KeyChord(KeyMod.CtrlCmd | KeyCode.KEY_A, KeyMod.CtrlCmd | KeyCode.KEY_B), 'Ctrl+A Ctrl+B');\n\t});\n\n\ttest('Mac US label', () => {\n\t\t// no modifier\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyCode.KEY_A, 'A');\n\n\t\t// one modifier\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyMod.CtrlCmd | KeyCode.KEY_A, '⌘A');\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyMod.Shift | KeyCode.KEY_A, '⇧A');\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyMod.Alt | KeyCode.KEY_A, '⌥A');\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyMod.WinCtrl | KeyCode.KEY_A, '⌃A');\n\n\t\t// two modifiers\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_A, '⇧⌘A');\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KEY_A, '⌥⌘A');\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyMod.CtrlCmd | KeyMod.WinCtrl | KeyCode.KEY_A, '⌃⌘A');\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyMod.Shift | KeyMod.Alt | KeyCode.KEY_A, '⇧⌥A');\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyMod.Shift | KeyMod.WinCtrl | KeyCode.KEY_A, '⌃⇧A');\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KEY_A, '⌃⌥A');\n\n\t\t// three modifiers\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyCode.KEY_A, '⇧⌥⌘A');\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.WinCtrl | KeyCode.KEY_A, '⌃⇧⌘A');\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyMod.CtrlCmd | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KEY_A, '⌃⌥⌘A');\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KEY_A, '⌃⇧⌥A');\n\n\t\t// four modifiers\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KEY_A, '⌃⇧⌥⌘A');\n\n\t\t// chord\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyChord(KeyMod.CtrlCmd | KeyCode.KEY_A, KeyMod.CtrlCmd | KeyCode.KEY_B), '⌘A ⌘B');\n\n\t\t// special keys\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyCode.LeftArrow, '←');\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyCode.UpArrow, '↑');\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyCode.RightArrow, '→');\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyCode.DownArrow, '↓');\n\t});\n\n\ttest('Aria label', () => {\n\t\tfunction assertAriaLabel(OS: OperatingSystem, keybinding: number, expected: string): void {\n\t\t\tconst usResolvedKeybinding = new USLayoutResolvedKeybinding(createKeybinding(keybinding, OS)!, OS);\n\t\t\tassert.strictEqual(usResolvedKeybinding.getAriaLabel(), expected);\n\t\t}\n\n\t\tassertAriaLabel(OperatingSystem.Windows, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KEY_A, 'Control+Shift+Alt+Windows+A');\n\t\tassertAriaLabel(OperatingSystem.Linux, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KEY_A, 'Control+Shift+Alt+Super+A');\n\t\tassertAriaLabel(OperatingSystem.Macintosh, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KEY_A, 'Control+Shift+Alt+Command+A');\n\t});\n\n\ttest('Electron Accelerator label', () => {\n\t\tfunction assertElectronAcceleratorLabel(OS: OperatingSystem, keybinding: number, expected: string | null): void {\n\t\t\tconst usResolvedKeybinding = new USLayoutResolvedKeybinding(createKeybinding(keybinding, OS)!, OS);\n\t\t\tassert.strictEqual(usResolvedKeybinding.getElectronAccelerator(), expected);\n\t\t}\n\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Windows, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KEY_A, 'Ctrl+Shift+Alt+Super+A');\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Linux, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KEY_A, 'Ctrl+Shift+Alt+Super+A');\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Macintosh, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KEY_A, 'Ctrl+Shift+Alt+Cmd+A');\n\n\t\t// electron cannot handle chords\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Windows, KeyChord(KeyMod.CtrlCmd | KeyCode.KEY_A, KeyMod.CtrlCmd | KeyCode.KEY_B), null);\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Linux, KeyChord(KeyMod.CtrlCmd | KeyCode.KEY_A, KeyMod.CtrlCmd | KeyCode.KEY_B), null);\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Macintosh, KeyChord(KeyMod.CtrlCmd | KeyCode.KEY_A, KeyMod.CtrlCmd | KeyCode.KEY_B), null);\n\n\t\t// electron cannot handle numpad keys\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Windows, KeyCode.NUMPAD_1, null);\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Linux, KeyCode.NUMPAD_1, null);\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Macintosh, KeyCode.NUMPAD_1, null);\n\n\t\t// special\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Macintosh, KeyCode.LeftArrow, 'Left');\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Macintosh, KeyCode.UpArrow, 'Up');\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Macintosh, KeyCode.RightArrow, 'Right');\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Macintosh, KeyCode.DownArrow, 'Down');\n\t});\n\n\ttest('User Settings label', () => {\n\t\tfunction assertElectronAcceleratorLabel(OS: OperatingSystem, keybinding: number, expected: string): void {\n\t\t\tconst usResolvedKeybinding = new USLayoutResolvedKeybinding(createKeybinding(keybinding, OS)!, OS);\n\t\t\tassert.strictEqual(usResolvedKeybinding.getUserSettingsLabel(), expected);\n\t\t}\n\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Windows, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KEY_A, 'ctrl+shift+alt+win+a');\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Linux, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KEY_A, 'ctrl+shift+alt+meta+a');\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Macintosh, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KEY_A, 'ctrl+shift+alt+cmd+a');\n\n\t\t// electron cannot handle chords\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Windows, KeyChord(KeyMod.CtrlCmd | KeyCode.KEY_A, KeyMod.CtrlCmd | KeyCode.KEY_B), 'ctrl+a ctrl+b');\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Linux, KeyChord(KeyMod.CtrlCmd | KeyCode.KEY_A, KeyMod.CtrlCmd | KeyCode.KEY_B), 'ctrl+a ctrl+b');\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Macintosh, KeyChord(KeyMod.CtrlCmd | KeyCode.KEY_A, KeyMod.CtrlCmd | KeyCode.KEY_B), 'cmd+a cmd+b');\n\t});\n\n\ttest('issue #91235: Do not end with a +', () => {\n\t\tassertUSLabel(OperatingSystem.Windows, KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.Alt, 'Ctrl+Alt');\n\t});\n});\n"]}