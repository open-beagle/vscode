{"version":3,"file":"keybindingResolver.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/keybinding/common/keybindingResolver.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IContext, ContextKeyExpression, ContextKeyExprType } from 'vs/platform/contextkey/common/contextkey';\nimport { ResolvedKeybindingItem } from 'vs/platform/keybinding/common/resolvedKeybindingItem';\n\nexport interface IResolveResult {\n\t/** Whether the resolved keybinding is entering a chord */\n\tenterChord: boolean;\n\t/** Whether the resolved keybinding is leaving (and executing) a chord */\n\tleaveChord: boolean;\n\tcommandId: string | null;\n\tcommandArgs: any;\n\tbubble: boolean;\n}\n\nexport class KeybindingResolver {\n\tprivate readonly _log: (str: string) => void;\n\tprivate readonly _defaultKeybindings: ResolvedKeybindingItem[];\n\tprivate readonly _keybindings: ResolvedKeybindingItem[];\n\tprivate readonly _defaultBoundCommands: Map<string, boolean>;\n\tprivate readonly _map: Map<string, ResolvedKeybindingItem[]>;\n\tprivate readonly _lookupMap: Map<string, ResolvedKeybindingItem[]>;\n\n\tconstructor(\n\t\tdefaultKeybindings: ResolvedKeybindingItem[],\n\t\toverrides: ResolvedKeybindingItem[],\n\t\tlog: (str: string) => void\n\t) {\n\t\tthis._log = log;\n\t\tthis._defaultKeybindings = defaultKeybindings;\n\n\t\tthis._defaultBoundCommands = new Map<string, boolean>();\n\t\tfor (let i = 0, len = defaultKeybindings.length; i < len; i++) {\n\t\t\tconst command = defaultKeybindings[i].command;\n\t\t\tif (command) {\n\t\t\t\tthis._defaultBoundCommands.set(command, true);\n\t\t\t}\n\t\t}\n\n\t\tthis._map = new Map<string, ResolvedKeybindingItem[]>();\n\t\tthis._lookupMap = new Map<string, ResolvedKeybindingItem[]>();\n\n\t\tthis._keybindings = KeybindingResolver.combine(defaultKeybindings, overrides);\n\t\tfor (let i = 0, len = this._keybindings.length; i < len; i++) {\n\t\t\tlet k = this._keybindings[i];\n\t\t\tif (k.keypressParts.length === 0) {\n\t\t\t\t// unbound\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (k.when && k.when.type === ContextKeyExprType.False) {\n\t\t\t\t// when condition is false\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// TODO@chords\n\t\t\tthis._addKeyPress(k.keypressParts[0], k);\n\t\t}\n\t}\n\n\tprivate static _isTargetedForRemoval(defaultKb: ResolvedKeybindingItem, keypressFirstPart: string | null, keypressChordPart: string | null, command: string, when: ContextKeyExpression | undefined): boolean {\n\t\tif (defaultKb.command !== command) {\n\t\t\treturn false;\n\t\t}\n\t\t// TODO@chords\n\t\tif (keypressFirstPart && defaultKb.keypressParts[0] !== keypressFirstPart) {\n\t\t\treturn false;\n\t\t}\n\t\t// TODO@chords\n\t\tif (keypressChordPart && defaultKb.keypressParts[1] !== keypressChordPart) {\n\t\t\treturn false;\n\t\t}\n\t\tif (when) {\n\t\t\tif (!defaultKb.when) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (!when.equals(defaultKb.when)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\n\t}\n\n\t/**\n\t * Looks for rules containing -command in `overrides` and removes them directly from `defaults`.\n\t */\n\tpublic static combine(defaults: ResolvedKeybindingItem[], rawOverrides: ResolvedKeybindingItem[]): ResolvedKeybindingItem[] {\n\t\tdefaults = defaults.slice(0);\n\t\tlet overrides: ResolvedKeybindingItem[] = [];\n\t\tfor (const override of rawOverrides) {\n\t\t\tif (!override.command || override.command.length === 0 || override.command.charAt(0) !== '-') {\n\t\t\t\toverrides.push(override);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst command = override.command.substr(1);\n\t\t\t// TODO@chords\n\t\t\tconst keypressFirstPart = override.keypressParts[0];\n\t\t\tconst keypressChordPart = override.keypressParts[1];\n\t\t\tconst when = override.when;\n\t\t\tfor (let j = defaults.length - 1; j >= 0; j--) {\n\t\t\t\tif (this._isTargetedForRemoval(defaults[j], keypressFirstPart, keypressChordPart, command, when)) {\n\t\t\t\t\tdefaults.splice(j, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn defaults.concat(overrides);\n\t}\n\n\tprivate _addKeyPress(keypress: string, item: ResolvedKeybindingItem): void {\n\n\t\tconst conflicts = this._map.get(keypress);\n\n\t\tif (typeof conflicts === 'undefined') {\n\t\t\t// There is no conflict so far\n\t\t\tthis._map.set(keypress, [item]);\n\t\t\tthis._addToLookupMap(item);\n\t\t\treturn;\n\t\t}\n\n\t\tfor (let i = conflicts.length - 1; i >= 0; i--) {\n\t\t\tlet conflict = conflicts[i];\n\n\t\t\tif (conflict.command === item.command) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst conflictIsChord = (conflict.keypressParts.length > 1);\n\t\t\tconst itemIsChord = (item.keypressParts.length > 1);\n\n\t\t\t// TODO@chords\n\t\t\tif (conflictIsChord && itemIsChord && conflict.keypressParts[1] !== item.keypressParts[1]) {\n\t\t\t\t// The conflict only shares the chord start with this command\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (KeybindingResolver.whenIsEntirelyIncluded(conflict.when, item.when)) {\n\t\t\t\t// `item` completely overwrites `conflict`\n\t\t\t\t// Remove conflict from the lookupMap\n\t\t\t\tthis._removeFromLookupMap(conflict);\n\t\t\t}\n\t\t}\n\n\t\tconflicts.push(item);\n\t\tthis._addToLookupMap(item);\n\t}\n\n\tprivate _addToLookupMap(item: ResolvedKeybindingItem): void {\n\t\tif (!item.command) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet arr = this._lookupMap.get(item.command);\n\t\tif (typeof arr === 'undefined') {\n\t\t\tarr = [item];\n\t\t\tthis._lookupMap.set(item.command, arr);\n\t\t} else {\n\t\t\tarr.push(item);\n\t\t}\n\t}\n\n\tprivate _removeFromLookupMap(item: ResolvedKeybindingItem): void {\n\t\tif (!item.command) {\n\t\t\treturn;\n\t\t}\n\t\tlet arr = this._lookupMap.get(item.command);\n\t\tif (typeof arr === 'undefined') {\n\t\t\treturn;\n\t\t}\n\t\tfor (let i = 0, len = arr.length; i < len; i++) {\n\t\t\tif (arr[i] === item) {\n\t\t\t\tarr.splice(i, 1);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns true if it is provable `a` implies `b`.\n\t */\n\tpublic static whenIsEntirelyIncluded(a: ContextKeyExpression | null | undefined, b: ContextKeyExpression | null | undefined): boolean {\n\t\tif (!b) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!a) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this._implies(a, b);\n\t}\n\n\t/**\n\t * Returns true if it is provable `p` implies `q`.\n\t */\n\tprivate static _implies(p: ContextKeyExpression, q: ContextKeyExpression): boolean {\n\t\tconst notP = p.negate();\n\n\t\tconst terminals = (node: ContextKeyExpression) => {\n\t\t\tif (node.type === ContextKeyExprType.Or) {\n\t\t\t\treturn node.expr;\n\t\t\t}\n\t\t\treturn [node];\n\t\t};\n\n\t\tlet expr = terminals(notP).concat(terminals(q));\n\t\tfor (let i = 0; i < expr.length; i++) {\n\t\t\tconst a = expr[i];\n\t\t\tconst notA = a.negate();\n\t\t\tfor (let j = i + 1; j < expr.length; j++) {\n\t\t\t\tconst b = expr[j];\n\t\t\t\tif (notA.equals(b)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpublic getDefaultBoundCommands(): Map<string, boolean> {\n\t\treturn this._defaultBoundCommands;\n\t}\n\n\tpublic getDefaultKeybindings(): readonly ResolvedKeybindingItem[] {\n\t\treturn this._defaultKeybindings;\n\t}\n\n\tpublic getKeybindings(): readonly ResolvedKeybindingItem[] {\n\t\treturn this._keybindings;\n\t}\n\n\tpublic lookupKeybindings(commandId: string): ResolvedKeybindingItem[] {\n\t\tlet items = this._lookupMap.get(commandId);\n\t\tif (typeof items === 'undefined' || items.length === 0) {\n\t\t\treturn [];\n\t\t}\n\n\t\t// Reverse to get the most specific item first\n\t\tlet result: ResolvedKeybindingItem[] = [], resultLen = 0;\n\t\tfor (let i = items.length - 1; i >= 0; i--) {\n\t\t\tresult[resultLen++] = items[i];\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic lookupPrimaryKeybinding(commandId: string): ResolvedKeybindingItem | null {\n\t\tlet items = this._lookupMap.get(commandId);\n\t\tif (typeof items === 'undefined' || items.length === 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn items[items.length - 1];\n\t}\n\n\tpublic resolve(context: IContext, currentChord: string | null, keypress: string): IResolveResult | null {\n\t\tthis._log(`| Resolving ${keypress}${currentChord ? ` chorded from ${currentChord}` : ``}`);\n\t\tlet lookupMap: ResolvedKeybindingItem[] | null = null;\n\n\t\tif (currentChord !== null) {\n\t\t\t// Fetch all chord bindings for `currentChord`\n\n\t\t\tconst candidates = this._map.get(currentChord);\n\t\t\tif (typeof candidates === 'undefined') {\n\t\t\t\t// No chords starting with `currentChord`\n\t\t\t\tthis._log(`\\\\ No keybinding entries.`);\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tlookupMap = [];\n\t\t\tfor (let i = 0, len = candidates.length; i < len; i++) {\n\t\t\t\tlet candidate = candidates[i];\n\t\t\t\t// TODO@chords\n\t\t\t\tif (candidate.keypressParts[1] === keypress) {\n\t\t\t\t\tlookupMap.push(candidate);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tconst candidates = this._map.get(keypress);\n\t\t\tif (typeof candidates === 'undefined') {\n\t\t\t\t// No bindings with `keypress`\n\t\t\t\tthis._log(`\\\\ No keybinding entries.`);\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tlookupMap = candidates;\n\t\t}\n\n\t\tlet result = this._findCommand(context, lookupMap);\n\t\tif (!result) {\n\t\t\tthis._log(`\\\\ From ${lookupMap.length} keybinding entries, no when clauses matched the context.`);\n\t\t\treturn null;\n\t\t}\n\n\t\t// TODO@chords\n\t\tif (currentChord === null && result.keypressParts.length > 1 && result.keypressParts[1] !== null) {\n\t\t\tthis._log(`\\\\ From ${lookupMap.length} keybinding entries, matched chord, when: ${printWhenExplanation(result.when)}, source: ${printSourceExplanation(result)}.`);\n\t\t\treturn {\n\t\t\t\tenterChord: true,\n\t\t\t\tleaveChord: false,\n\t\t\t\tcommandId: null,\n\t\t\t\tcommandArgs: null,\n\t\t\t\tbubble: false\n\t\t\t};\n\t\t}\n\n\t\tthis._log(`\\\\ From ${lookupMap.length} keybinding entries, matched ${result.command}, when: ${printWhenExplanation(result.when)}, source: ${printSourceExplanation(result)}.`);\n\t\treturn {\n\t\t\tenterChord: false,\n\t\t\tleaveChord: result.keypressParts.length > 1,\n\t\t\tcommandId: result.command,\n\t\t\tcommandArgs: result.commandArgs,\n\t\t\tbubble: result.bubble\n\t\t};\n\t}\n\n\tprivate _findCommand(context: IContext, matches: ResolvedKeybindingItem[]): ResolvedKeybindingItem | null {\n\t\tfor (let i = matches.length - 1; i >= 0; i--) {\n\t\t\tlet k = matches[i];\n\n\t\t\tif (!KeybindingResolver.contextMatchesRules(context, k.when)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\treturn k;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic static contextMatchesRules(context: IContext, rules: ContextKeyExpression | null | undefined): boolean {\n\t\tif (!rules) {\n\t\t\treturn true;\n\t\t}\n\t\treturn rules.evaluate(context);\n\t}\n}\n\nfunction printWhenExplanation(when: ContextKeyExpression | undefined): string {\n\tif (!when) {\n\t\treturn `no when condition`;\n\t}\n\treturn `${when.serialize()}`;\n}\n\nfunction printSourceExplanation(kb: ResolvedKeybindingItem): string {\n\treturn (\n\t\tkb.extensionId\n\t\t\t? (kb.isBuiltinExtension ? `built-in extension ${kb.extensionId}` : `user extension ${kb.extensionId}`)\n\t\t\t: (kb.isDefault ? `built-in` : `user`)\n\t);\n}\n"]}