{"version":3,"file":"baseResolvedKeybinding.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/keybinding/common/baseResolvedKeybinding.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAOhG,MAAsB,sBAA4C,SAAQ,6BAAkB;QAK3F,YAAY,EAAmB,EAAE,KAAU;YAC1C,KAAK,EAAE,CAAC;YACR,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;gBACvB,MAAM,CAAA,GAAA,wBAAe,CAAA,CAAC,OAAO,CAAC,CAAC;aAC/B;YACD,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;YACd,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACrB,CAAC;QAEM,QAAQ;YACd,OAAO,kCAAe,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,UAAU,EAAE,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC;QACnG,CAAC;QAEM,YAAY;YAClB,OAAO,oCAAiB,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,UAAU,EAAE,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC;QACzG,CAAC;QAEM,sBAAsB;YAC5B,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC3B,gCAAgC;gBAChC,OAAO,IAAI,CAAC;aACZ;YACD,OAAO,mDAAgC,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,UAAU,EAAE,EAAE,CAAC,IAAI,CAAC,uBAAuB,CAAC,UAAU,CAAC,CAAC,CAAC;QAClI,CAAC;QAEM,oBAAoB;YAC1B,OAAO,4CAAyB,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,UAAU,EAAE,EAAE,CAAC,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC,CAAC;QACzH,CAAC;QAEM,SAAS;YACf,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC;QACvE,CAAC;QAEM,OAAO;YACb,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACjC,CAAC;QAEM,QAAQ;YACd,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC;QACnE,CAAC;QAEO,QAAQ,CAAC,UAAa;YAC7B,OAAO,IAAI,iCAAsB,CAChC,UAAU,CAAC,OAAO,EAClB,UAAU,CAAC,QAAQ,EACnB,UAAU,CAAC,MAAM,EACjB,UAAU,CAAC,OAAO,EAClB,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,EAC1B,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAC9B,CAAC;QACH,CAAC;QAEM,gBAAgB;YACtB,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC,CAAC;QAC3E,CAAC;QAEM,8BAA8B;YACpC,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,IAAI,CAAC,8BAA8B,CAAC,UAAU,CAAC,CAAC,CAAC;QACzF,CAAC;KASD;IAxED,wDAwEC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { OperatingSystem } from 'vs/base/common/platform';\nimport { illegalArgument } from 'vs/base/common/errors';\nimport { Modifiers, UILabelProvider, AriaLabelProvider, ElectronAcceleratorLabelProvider, UserSettingsLabelProvider } from 'vs/base/common/keybindingLabels';\nimport { ResolvedKeybinding, ResolvedKeybindingPart } from 'vs/base/common/keyCodes';\n\nexport abstract class BaseResolvedKeybinding<T extends Modifiers> extends ResolvedKeybinding {\n\n\tprotected readonly _os: OperatingSystem;\n\tprotected readonly _parts: T[];\n\n\tconstructor(os: OperatingSystem, parts: T[]) {\n\t\tsuper();\n\t\tif (parts.length === 0) {\n\t\t\tthrow illegalArgument(`parts`);\n\t\t}\n\t\tthis._os = os;\n\t\tthis._parts = parts;\n\t}\n\n\tpublic getLabel(): string | null {\n\t\treturn UILabelProvider.toLabel(this._os, this._parts, (keybinding) => this._getLabel(keybinding));\n\t}\n\n\tpublic getAriaLabel(): string | null {\n\t\treturn AriaLabelProvider.toLabel(this._os, this._parts, (keybinding) => this._getAriaLabel(keybinding));\n\t}\n\n\tpublic getElectronAccelerator(): string | null {\n\t\tif (this._parts.length > 1) {\n\t\t\t// Electron cannot handle chords\n\t\t\treturn null;\n\t\t}\n\t\treturn ElectronAcceleratorLabelProvider.toLabel(this._os, this._parts, (keybinding) => this._getElectronAccelerator(keybinding));\n\t}\n\n\tpublic getUserSettingsLabel(): string | null {\n\t\treturn UserSettingsLabelProvider.toLabel(this._os, this._parts, (keybinding) => this._getUserSettingsLabel(keybinding));\n\t}\n\n\tpublic isWYSIWYG(): boolean {\n\t\treturn this._parts.every((keybinding) => this._isWYSIWYG(keybinding));\n\t}\n\n\tpublic isChord(): boolean {\n\t\treturn (this._parts.length > 1);\n\t}\n\n\tpublic getParts(): ResolvedKeybindingPart[] {\n\t\treturn this._parts.map((keybinding) => this._getPart(keybinding));\n\t}\n\n\tprivate _getPart(keybinding: T): ResolvedKeybindingPart {\n\t\treturn new ResolvedKeybindingPart(\n\t\t\tkeybinding.ctrlKey,\n\t\t\tkeybinding.shiftKey,\n\t\t\tkeybinding.altKey,\n\t\t\tkeybinding.metaKey,\n\t\t\tthis._getLabel(keybinding),\n\t\t\tthis._getAriaLabel(keybinding)\n\t\t);\n\t}\n\n\tpublic getDispatchParts(): (string | null)[] {\n\t\treturn this._parts.map((keybinding) => this._getDispatchPart(keybinding));\n\t}\n\n\tpublic getSingleModifierDispatchParts(): (string | null)[] {\n\t\treturn this._parts.map((keybinding) => this._getSingleModifierDispatchPart(keybinding));\n\t}\n\n\tprotected abstract _getLabel(keybinding: T): string | null;\n\tprotected abstract _getAriaLabel(keybinding: T): string | null;\n\tprotected abstract _getElectronAccelerator(keybinding: T): string | null;\n\tprotected abstract _getUserSettingsLabel(keybinding: T): string | null;\n\tprotected abstract _isWYSIWYG(keybinding: T): boolean;\n\tprotected abstract _getDispatchPart(keybinding: T): string | null;\n\tprotected abstract _getSingleModifierDispatchPart(keybinding: T): string | null;\n}\n"]}