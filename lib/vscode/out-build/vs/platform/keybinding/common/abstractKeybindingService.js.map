{"version":3,"sources":["vs/platform/keybinding/common/abstractKeybindingService.ts"],"names":[],"mappings":"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","file":"abstractKeybindingService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport * as arrays from 'vs/base/common/arrays';\nimport { IntervalTimer, TimeoutTimer } from 'vs/base/common/async';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { KeyCode, Keybinding, ResolvedKeybinding } from 'vs/base/common/keyCodes';\nimport { Disposable, IDisposable } from 'vs/base/common/lifecycle';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { IContextKeyService, IContextKeyServiceTarget } from 'vs/platform/contextkey/common/contextkey';\nimport { IKeybindingEvent, IKeybindingService, IKeyboardEvent, KeybindingsSchemaContribution } from 'vs/platform/keybinding/common/keybinding';\nimport { IResolveResult, KeybindingResolver } from 'vs/platform/keybinding/common/keybindingResolver';\nimport { ResolvedKeybindingItem } from 'vs/platform/keybinding/common/resolvedKeybindingItem';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { WorkbenchActionExecutedEvent, WorkbenchActionExecutedClassification } from 'vs/base/common/actions';\nimport { ILogService } from 'vs/platform/log/common/log';\n\ninterface CurrentChord {\n\tkeypress: string;\n\tlabel: string | null;\n}\n\nexport abstract class AbstractKeybindingService extends Disposable implements IKeybindingService {\n\tpublic _serviceBrand: undefined;\n\n\tprotected readonly _onDidUpdateKeybindings: Emitter<IKeybindingEvent> = this._register(new Emitter<IKeybindingEvent>());\n\tget onDidUpdateKeybindings(): Event<IKeybindingEvent> {\n\t\treturn this._onDidUpdateKeybindings ? this._onDidUpdateKeybindings.event : Event.None; // Sinon stubbing walks properties on prototype\n\t}\n\n\tprivate _currentChord: CurrentChord | null;\n\tprivate _currentChordChecker: IntervalTimer;\n\tprivate _currentChordStatusMessage: IDisposable | null;\n\tprivate _currentSingleModifier: null | string;\n\tprivate _currentSingleModifierClearTimeout: TimeoutTimer;\n\n\tprotected _logging: boolean;\n\n\tpublic get inChordMode(): boolean {\n\t\treturn !!this._currentChord;\n\t}\n\n\tconstructor(\n\t\tprivate _contextKeyService: IContextKeyService,\n\t\tprotected _commandService: ICommandService,\n\t\tprotected _telemetryService: ITelemetryService,\n\t\tprivate _notificationService: INotificationService,\n\t\tprotected _logService: ILogService,\n\t) {\n\t\tsuper();\n\n\t\tthis._currentChord = null;\n\t\tthis._currentChordChecker = new IntervalTimer();\n\t\tthis._currentChordStatusMessage = null;\n\t\tthis._currentSingleModifier = null;\n\t\tthis._currentSingleModifierClearTimeout = new TimeoutTimer();\n\t\tthis._logging = false;\n\t}\n\n\tpublic override dispose(): void {\n\t\tsuper.dispose();\n\t}\n\n\tprotected abstract _getResolver(): KeybindingResolver;\n\tprotected abstract _documentHasFocus(): boolean;\n\tpublic abstract resolveKeybinding(keybinding: Keybinding): ResolvedKeybinding[];\n\tpublic abstract resolveKeyboardEvent(keyboardEvent: IKeyboardEvent): ResolvedKeybinding;\n\tpublic abstract resolveUserBinding(userBinding: string): ResolvedKeybinding[];\n\tpublic abstract registerSchemaContribution(contribution: KeybindingsSchemaContribution): void;\n\tpublic abstract _dumpDebugInfo(): string;\n\tpublic abstract _dumpDebugInfoJSON(): string;\n\n\tpublic getDefaultKeybindingsContent(): string {\n\t\treturn '';\n\t}\n\n\tpublic toggleLogging(): boolean {\n\t\tthis._logging = !this._logging;\n\t\treturn this._logging;\n\t}\n\n\tprotected _log(str: string): void {\n\t\tif (this._logging) {\n\t\t\tthis._logService.info(`[KeybindingService]: ${str}`);\n\t\t}\n\t}\n\n\tpublic getDefaultKeybindings(): readonly ResolvedKeybindingItem[] {\n\t\treturn this._getResolver().getDefaultKeybindings();\n\t}\n\n\tpublic getKeybindings(): readonly ResolvedKeybindingItem[] {\n\t\treturn this._getResolver().getKeybindings();\n\t}\n\n\tpublic customKeybindingsCount(): number {\n\t\treturn 0;\n\t}\n\n\tpublic lookupKeybindings(commandId: string): ResolvedKeybinding[] {\n\t\treturn arrays.coalesce(\n\t\t\tthis._getResolver().lookupKeybindings(commandId).map(item => item.resolvedKeybinding)\n\t\t);\n\t}\n\n\tpublic lookupKeybinding(commandId: string): ResolvedKeybinding | undefined {\n\t\tconst result = this._getResolver().lookupPrimaryKeybinding(commandId);\n\t\tif (!result) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn result.resolvedKeybinding;\n\t}\n\n\tpublic dispatchEvent(e: IKeyboardEvent, target: IContextKeyServiceTarget): boolean {\n\t\treturn this._dispatch(e, target);\n\t}\n\n\tpublic softDispatch(e: IKeyboardEvent, target: IContextKeyServiceTarget): IResolveResult | null {\n\t\tconst keybinding = this.resolveKeyboardEvent(e);\n\t\tif (keybinding.isChord()) {\n\t\t\tconsole.warn('Unexpected keyboard event mapped to a chord');\n\t\t\treturn null;\n\t\t}\n\t\tconst [firstPart,] = keybinding.getDispatchParts();\n\t\tif (firstPart === null) {\n\t\t\t// cannot be dispatched, probably only modifier keys\n\t\t\treturn null;\n\t\t}\n\n\t\tconst contextValue = this._contextKeyService.getContext(target);\n\t\tconst currentChord = this._currentChord ? this._currentChord.keypress : null;\n\t\treturn this._getResolver().resolve(contextValue, currentChord, firstPart);\n\t}\n\n\tprivate _enterChordMode(firstPart: string, keypressLabel: string | null): void {\n\t\tthis._currentChord = {\n\t\t\tkeypress: firstPart,\n\t\t\tlabel: keypressLabel\n\t\t};\n\t\tthis._currentChordStatusMessage = this._notificationService.status(nls.localize('first.chord', \"({0}) was pressed. Waiting for second key of chord...\", keypressLabel));\n\t\tconst chordEnterTime = Date.now();\n\t\tthis._currentChordChecker.cancelAndSet(() => {\n\n\t\t\tif (!this._documentHasFocus()) {\n\t\t\t\t// Focus has been lost => leave chord mode\n\t\t\t\tthis._leaveChordMode();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (Date.now() - chordEnterTime > 5000) {\n\t\t\t\t// 5 seconds elapsed => leave chord mode\n\t\t\t\tthis._leaveChordMode();\n\t\t\t}\n\n\t\t}, 500);\n\t}\n\n\tprivate _leaveChordMode(): void {\n\t\tif (this._currentChordStatusMessage) {\n\t\t\tthis._currentChordStatusMessage.dispose();\n\t\t\tthis._currentChordStatusMessage = null;\n\t\t}\n\t\tthis._currentChordChecker.cancel();\n\t\tthis._currentChord = null;\n\t}\n\n\tpublic dispatchByUserSettingsLabel(userSettingsLabel: string, target: IContextKeyServiceTarget): void {\n\t\tconst keybindings = this.resolveUserBinding(userSettingsLabel);\n\t\tif (keybindings.length >= 1) {\n\t\t\tthis._doDispatch(keybindings[0], target, /*isSingleModiferChord*/false);\n\t\t}\n\t}\n\n\tprotected _dispatch(e: IKeyboardEvent, target: IContextKeyServiceTarget): boolean {\n\t\treturn this._doDispatch(this.resolveKeyboardEvent(e), target, /*isSingleModiferChord*/false);\n\t}\n\n\tprotected _singleModifierDispatch(e: IKeyboardEvent, target: IContextKeyServiceTarget): boolean {\n\t\tconst keybinding = this.resolveKeyboardEvent(e);\n\t\tconst [singleModifier,] = keybinding.getSingleModifierDispatchParts();\n\n\t\tif (singleModifier !== null && this._currentSingleModifier === null) {\n\t\t\t// we have a valid `singleModifier`, store it for the next keyup, but clear it in 300ms\n\t\t\tthis._log(`+ Storing single modifier for possible chord ${singleModifier}.`);\n\t\t\tthis._currentSingleModifier = singleModifier;\n\t\t\tthis._currentSingleModifierClearTimeout.cancelAndSet(() => {\n\t\t\t\tthis._log(`+ Clearing single modifier due to 300ms elapsed.`);\n\t\t\t\tthis._currentSingleModifier = null;\n\t\t\t}, 300);\n\t\t\treturn false;\n\t\t}\n\n\t\tif (singleModifier !== null && singleModifier === this._currentSingleModifier) {\n\t\t\t// bingo!\n\t\t\tthis._log(`/ Dispatching single modifier chord ${singleModifier} ${singleModifier}`);\n\t\t\tthis._currentSingleModifierClearTimeout.cancel();\n\t\t\tthis._currentSingleModifier = null;\n\t\t\treturn this._doDispatch(keybinding, target, /*isSingleModiferChord*/true);\n\t\t}\n\n\t\tthis._currentSingleModifierClearTimeout.cancel();\n\t\tthis._currentSingleModifier = null;\n\t\treturn false;\n\t}\n\n\tprivate _doDispatch(keybinding: ResolvedKeybinding, target: IContextKeyServiceTarget, isSingleModiferChord = false): boolean {\n\t\tlet shouldPreventDefault = false;\n\n\t\tif (keybinding.isChord()) {\n\t\t\tconsole.warn('Unexpected keyboard event mapped to a chord');\n\t\t\treturn false;\n\t\t}\n\n\t\tlet firstPart: string | null = null; // the first keybinding i.e. Ctrl+K\n\t\tlet currentChord: string | null = null;// the \"second\" keybinding i.e. Ctrl+K \"Ctrl+D\"\n\n\t\tif (isSingleModiferChord) {\n\t\t\tconst [dispatchKeyname,] = keybinding.getSingleModifierDispatchParts();\n\t\t\tfirstPart = dispatchKeyname;\n\t\t\tcurrentChord = dispatchKeyname;\n\t\t} else {\n\t\t\t[firstPart,] = keybinding.getDispatchParts();\n\t\t\tcurrentChord = this._currentChord ? this._currentChord.keypress : null;\n\t\t}\n\n\t\tif (firstPart === null) {\n\t\t\tthis._log(`\\\\ Keyboard event cannot be dispatched in keydown phase.`);\n\t\t\t// cannot be dispatched, probably only modifier keys\n\t\t\treturn shouldPreventDefault;\n\t\t}\n\n\t\tconst contextValue = this._contextKeyService.getContext(target);\n\t\tconst keypressLabel = keybinding.getLabel();\n\t\tconst resolveResult = this._getResolver().resolve(contextValue, currentChord, firstPart);\n\n\t\tthis._logService.trace('KeybindingService#dispatch', keypressLabel, resolveResult?.commandId);\n\n\t\tif (resolveResult && resolveResult.enterChord) {\n\t\t\tshouldPreventDefault = true;\n\t\t\tthis._enterChordMode(firstPart, keypressLabel);\n\t\t\treturn shouldPreventDefault;\n\t\t}\n\n\t\tif (this._currentChord) {\n\t\t\tif (!resolveResult || !resolveResult.commandId) {\n\t\t\t\tthis._notificationService.status(nls.localize('missing.chord', \"The key combination ({0}, {1}) is not a command.\", this._currentChord.label, keypressLabel), { hideAfter: 10 * 1000 /* 10s */ });\n\t\t\t\tshouldPreventDefault = true;\n\t\t\t}\n\t\t}\n\n\t\tthis._leaveChordMode();\n\n\t\tif (resolveResult && resolveResult.commandId) {\n\t\t\tif (!resolveResult.bubble) {\n\t\t\t\tshouldPreventDefault = true;\n\t\t\t}\n\t\t\tif (typeof resolveResult.commandArgs === 'undefined') {\n\t\t\t\tthis._commandService.executeCommand(resolveResult.commandId).then(undefined, err => this._notificationService.warn(err));\n\t\t\t} else {\n\t\t\t\tthis._commandService.executeCommand(resolveResult.commandId, resolveResult.commandArgs).then(undefined, err => this._notificationService.warn(err));\n\t\t\t}\n\t\t\tthis._telemetryService.publicLog2<WorkbenchActionExecutedEvent, WorkbenchActionExecutedClassification>('workbenchActionExecuted', { id: resolveResult.commandId, from: 'keybinding' });\n\t\t}\n\n\t\treturn shouldPreventDefault;\n\t}\n\n\tmightProducePrintableCharacter(event: IKeyboardEvent): boolean {\n\t\tif (event.ctrlKey || event.metaKey) {\n\t\t\t// ignore ctrl/cmd-combination but not shift/alt-combinatios\n\t\t\treturn false;\n\t\t}\n\t\t// weak check for certain ranges. this is properly implemented in a subclass\n\t\t// with access to the KeyboardMapperFactory.\n\t\tif ((event.keyCode >= KeyCode.KEY_A && event.keyCode <= KeyCode.KEY_Z)\n\t\t\t|| (event.keyCode >= KeyCode.KEY_0 && event.keyCode <= KeyCode.KEY_9)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\n"]}