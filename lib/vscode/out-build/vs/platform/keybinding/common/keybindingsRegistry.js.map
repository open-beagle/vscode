{"version":3,"file":"keybindingsRegistry.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/keybinding/common/keybindingsRegistry.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyCode, Keybinding, SimpleKeybinding, createKeybinding } from 'vs/base/common/keyCodes';\nimport { OS, OperatingSystem } from 'vs/base/common/platform';\nimport { CommandsRegistry, ICommandHandler, ICommandHandlerDescription } from 'vs/platform/commands/common/commands';\nimport { ContextKeyExpression } from 'vs/platform/contextkey/common/contextkey';\nimport { Registry } from 'vs/platform/registry/common/platform';\n\nexport interface IKeybindingItem {\n\tkeybinding: Keybinding;\n\tcommand: string;\n\tcommandArgs?: any;\n\twhen: ContextKeyExpression | null | undefined;\n\tweight1: number;\n\tweight2: number;\n\textensionId: string | null;\n\tisBuiltinExtension: boolean;\n}\n\nexport interface IKeybindings {\n\tprimary?: number;\n\tsecondary?: number[];\n\twin?: {\n\t\tprimary: number;\n\t\tsecondary?: number[];\n\t};\n\tlinux?: {\n\t\tprimary: number;\n\t\tsecondary?: number[];\n\t};\n\tmac?: {\n\t\tprimary: number;\n\t\tsecondary?: number[];\n\t};\n}\n\nexport interface IKeybindingRule extends IKeybindings {\n\tid: string;\n\tweight: number;\n\targs?: any;\n\twhen?: ContextKeyExpression | null | undefined;\n}\n\nexport interface IKeybindingRule2 {\n\tprimary: Keybinding | null;\n\twin?: { primary: Keybinding | null; } | null;\n\tlinux?: { primary: Keybinding | null; } | null;\n\tmac?: { primary: Keybinding | null; } | null;\n\tid: string;\n\targs?: any;\n\tweight: number;\n\twhen: ContextKeyExpression | undefined;\n\textensionId?: string;\n\tisBuiltinExtension?: boolean;\n}\n\nexport const enum KeybindingWeight {\n\tEditorCore = 0,\n\tEditorContrib = 100,\n\tWorkbenchContrib = 200,\n\tBuiltinExtension = 300,\n\tExternalExtension = 400\n}\n\nexport interface ICommandAndKeybindingRule extends IKeybindingRule {\n\thandler: ICommandHandler;\n\tdescription?: ICommandHandlerDescription | null;\n}\n\nexport interface IKeybindingsRegistry {\n\tregisterKeybindingRule(rule: IKeybindingRule): void;\n\tsetExtensionKeybindings(rules: IKeybindingRule2[]): void;\n\tregisterCommandAndKeybindingRule(desc: ICommandAndKeybindingRule): void;\n\tgetDefaultKeybindings(): IKeybindingItem[];\n}\n\nclass KeybindingsRegistryImpl implements IKeybindingsRegistry {\n\n\tprivate _coreKeybindings: IKeybindingItem[];\n\tprivate _extensionKeybindings: IKeybindingItem[];\n\tprivate _cachedMergedKeybindings: IKeybindingItem[] | null;\n\n\tconstructor() {\n\t\tthis._coreKeybindings = [];\n\t\tthis._extensionKeybindings = [];\n\t\tthis._cachedMergedKeybindings = null;\n\t}\n\n\t/**\n\t * Take current platform into account and reduce to primary & secondary.\n\t */\n\tprivate static bindToCurrentPlatform(kb: IKeybindings): { primary?: number; secondary?: number[]; } {\n\t\tif (OS === OperatingSystem.Windows) {\n\t\t\tif (kb && kb.win) {\n\t\t\t\treturn kb.win;\n\t\t\t}\n\t\t} else if (OS === OperatingSystem.Macintosh) {\n\t\t\tif (kb && kb.mac) {\n\t\t\t\treturn kb.mac;\n\t\t\t}\n\t\t} else {\n\t\t\tif (kb && kb.linux) {\n\t\t\t\treturn kb.linux;\n\t\t\t}\n\t\t}\n\n\t\treturn kb;\n\t}\n\n\t/**\n\t * Take current platform into account and reduce to primary & secondary.\n\t */\n\tprivate static bindToCurrentPlatform2(kb: IKeybindingRule2): { primary?: Keybinding | null; } {\n\t\tif (OS === OperatingSystem.Windows) {\n\t\t\tif (kb && kb.win) {\n\t\t\t\treturn kb.win;\n\t\t\t}\n\t\t} else if (OS === OperatingSystem.Macintosh) {\n\t\t\tif (kb && kb.mac) {\n\t\t\t\treturn kb.mac;\n\t\t\t}\n\t\t} else {\n\t\t\tif (kb && kb.linux) {\n\t\t\t\treturn kb.linux;\n\t\t\t}\n\t\t}\n\n\t\treturn kb;\n\t}\n\n\tpublic registerKeybindingRule(rule: IKeybindingRule): void {\n\t\tconst actualKb = KeybindingsRegistryImpl.bindToCurrentPlatform(rule);\n\n\t\tif (actualKb && actualKb.primary) {\n\t\t\tconst kk = createKeybinding(actualKb.primary, OS);\n\t\t\tif (kk) {\n\t\t\t\tthis._registerDefaultKeybinding(kk, rule.id, rule.args, rule.weight, 0, rule.when);\n\t\t\t}\n\t\t}\n\n\t\tif (actualKb && Array.isArray(actualKb.secondary)) {\n\t\t\tfor (let i = 0, len = actualKb.secondary.length; i < len; i++) {\n\t\t\t\tconst k = actualKb.secondary[i];\n\t\t\t\tconst kk = createKeybinding(k, OS);\n\t\t\t\tif (kk) {\n\t\t\t\t\tthis._registerDefaultKeybinding(kk, rule.id, rule.args, rule.weight, -i - 1, rule.when);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic setExtensionKeybindings(rules: IKeybindingRule2[]): void {\n\t\tlet result: IKeybindingItem[] = [], keybindingsLen = 0;\n\t\tfor (let i = 0, len = rules.length; i < len; i++) {\n\t\t\tconst rule = rules[i];\n\t\t\tlet actualKb = KeybindingsRegistryImpl.bindToCurrentPlatform2(rule);\n\n\t\t\tif (actualKb && actualKb.primary) {\n\t\t\t\tresult[keybindingsLen++] = {\n\t\t\t\t\tkeybinding: actualKb.primary,\n\t\t\t\t\tcommand: rule.id,\n\t\t\t\t\tcommandArgs: rule.args,\n\t\t\t\t\twhen: rule.when,\n\t\t\t\t\tweight1: rule.weight,\n\t\t\t\t\tweight2: 0,\n\t\t\t\t\textensionId: rule.extensionId || null,\n\t\t\t\t\tisBuiltinExtension: rule.isBuiltinExtension || false\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tthis._extensionKeybindings = result;\n\t\tthis._cachedMergedKeybindings = null;\n\t}\n\n\tpublic registerCommandAndKeybindingRule(desc: ICommandAndKeybindingRule): void {\n\t\tthis.registerKeybindingRule(desc);\n\t\tCommandsRegistry.registerCommand(desc);\n\t}\n\n\tprivate static _mightProduceChar(keyCode: KeyCode): boolean {\n\t\tif (keyCode >= KeyCode.KEY_0 && keyCode <= KeyCode.KEY_9) {\n\t\t\treturn true;\n\t\t}\n\t\tif (keyCode >= KeyCode.KEY_A && keyCode <= KeyCode.KEY_Z) {\n\t\t\treturn true;\n\t\t}\n\t\treturn (\n\t\t\tkeyCode === KeyCode.US_SEMICOLON\n\t\t\t|| keyCode === KeyCode.US_EQUAL\n\t\t\t|| keyCode === KeyCode.US_COMMA\n\t\t\t|| keyCode === KeyCode.US_MINUS\n\t\t\t|| keyCode === KeyCode.US_DOT\n\t\t\t|| keyCode === KeyCode.US_SLASH\n\t\t\t|| keyCode === KeyCode.US_BACKTICK\n\t\t\t|| keyCode === KeyCode.ABNT_C1\n\t\t\t|| keyCode === KeyCode.ABNT_C2\n\t\t\t|| keyCode === KeyCode.US_OPEN_SQUARE_BRACKET\n\t\t\t|| keyCode === KeyCode.US_BACKSLASH\n\t\t\t|| keyCode === KeyCode.US_CLOSE_SQUARE_BRACKET\n\t\t\t|| keyCode === KeyCode.US_QUOTE\n\t\t\t|| keyCode === KeyCode.OEM_8\n\t\t\t|| keyCode === KeyCode.OEM_102\n\t\t);\n\t}\n\n\tprivate _assertNoCtrlAlt(keybinding: SimpleKeybinding, commandId: string): void {\n\t\tif (keybinding.ctrlKey && keybinding.altKey && !keybinding.metaKey) {\n\t\t\tif (KeybindingsRegistryImpl._mightProduceChar(keybinding.keyCode)) {\n\t\t\t\tconsole.warn('Ctrl+Alt+ keybindings should not be used by default under Windows. Offender: ', keybinding, ' for ', commandId);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _registerDefaultKeybinding(keybinding: Keybinding, commandId: string, commandArgs: any, weight1: number, weight2: number, when: ContextKeyExpression | null | undefined): void {\n\t\tif (OS === OperatingSystem.Windows) {\n\t\t\tthis._assertNoCtrlAlt(keybinding.parts[0], commandId);\n\t\t}\n\t\tthis._coreKeybindings.push({\n\t\t\tkeybinding: keybinding,\n\t\t\tcommand: commandId,\n\t\t\tcommandArgs: commandArgs,\n\t\t\twhen: when,\n\t\t\tweight1: weight1,\n\t\t\tweight2: weight2,\n\t\t\textensionId: null,\n\t\t\tisBuiltinExtension: false\n\t\t});\n\t\tthis._cachedMergedKeybindings = null;\n\t}\n\n\tpublic getDefaultKeybindings(): IKeybindingItem[] {\n\t\tif (!this._cachedMergedKeybindings) {\n\t\t\tthis._cachedMergedKeybindings = (<IKeybindingItem[]>[]).concat(this._coreKeybindings).concat(this._extensionKeybindings);\n\t\t\tthis._cachedMergedKeybindings.sort(sorter);\n\t\t}\n\t\treturn this._cachedMergedKeybindings.slice(0);\n\t}\n}\nexport const KeybindingsRegistry: IKeybindingsRegistry = new KeybindingsRegistryImpl();\n\n// Define extension point ids\nexport const Extensions = {\n\tEditorModes: 'platform.keybindingsRegistry'\n};\nRegistry.add(Extensions.EditorModes, KeybindingsRegistry);\n\nfunction sorter(a: IKeybindingItem, b: IKeybindingItem): number {\n\tif (a.weight1 !== b.weight1) {\n\t\treturn a.weight1 - b.weight1;\n\t}\n\tif (a.command < b.command) {\n\t\treturn -1;\n\t}\n\tif (a.command > b.command) {\n\t\treturn 1;\n\t}\n\treturn a.weight2 - b.weight2;\n}\n"]}