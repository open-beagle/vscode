{"version":3,"file":"windows.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/windows/common/windows.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAWnF,QAAA,iBAAiB,GAAG;QAChC,KAAK,EAAE,GAAG;QACV,yBAAyB,EAAE,GAAG;QAC9B,MAAM,EAAE,GAAG;KACX,CAAC;IA6DF,SAAgB,iBAAiB,CAAC,SAA0B;QAC3D,OAAO,CAAC,CAAE,SAA8B,CAAC,YAAY,CAAC;IACvD,CAAC;IAFD,8CAEC;IAED,SAAgB,cAAc,CAAC,SAA0B;QACxD,OAAO,CAAC,CAAE,SAA2B,CAAC,SAAS,CAAC;IACjD,CAAC;IAFD,wCAEC;IAED,SAAgB,YAAY,CAAC,SAA0B;QACtD,OAAO,CAAC,CAAE,SAAyB,CAAC,OAAO,CAAC;IAC7C,CAAC;IAFD,oCAEC;IAID,SAAgB,oBAAoB,CAAC,oBAA2C;QAC/E,MAAM,aAAa,GAAG,gBAAgB,CAAC,oBAAoB,CAAC,CAAC;QAC7D,MAAM,iBAAiB,GAAG,oBAAoB,CAAC,QAAQ,CAAgC,0BAA0B,CAAC,CAAC;QAEnH,IAAI,iBAAiB,KAAK,SAAS,IAAI,CAAC,aAAa,KAAK,QAAQ,IAAI,iBAAiB,KAAK,SAAS,CAAC,IAAI,CAAC,sBAAW,IAAI,mBAAQ,CAAC,EAAE;YACpI,OAAO,SAAS,CAAC;SACjB;aAAM;YACN,OAAO,iBAAiB,CAAC;SACzB;IACF,CAAC;IATD,oDASC;IAwBD,SAAgB,gBAAgB,CAAC,oBAA2C;QAC3E,IAAI,gBAAK,EAAE;YACV,OAAO,QAAQ,CAAC;SAChB;QAED,MAAM,aAAa,GAAG,oBAAoB,CAAC,QAAQ,CAA8B,QAAQ,CAAC,CAAC;QAE3F,IAAI,aAAa,EAAE;YAClB,MAAM,aAAa,GAAG,sBAAW,IAAI,aAAa,CAAC,UAAU,KAAK,IAAI,CAAC;YACvE,IAAI,aAAa,EAAE;gBAClB,OAAO,QAAQ,CAAC,CAAC,4DAA4D;aAC7E;YAED,MAAM,mBAAmB,GAAG,sBAAW,IAAI,aAAa,CAAC,gBAAgB,KAAK,KAAK,CAAC;YACpF,IAAI,mBAAmB,EAAE;gBACxB,OAAO,QAAQ,CAAC,CAAC,kHAAkH;aACnI;YAED,MAAM,KAAK,GAAG,aAAa,CAAC,aAAa,CAAC;YAC1C,IAAI,KAAK,KAAK,QAAQ,IAAI,KAAK,KAAK,QAAQ,EAAE;gBAC7C,OAAO,KAAK,CAAC;aACb;SACD;QAED,OAAO,kBAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,6CAA6C;IACpF,CAAC;IAzBD,4CAyBC;IAkHD;;;OAGG;IACH,SAAgB,qBAAqB,CAAC,SAAS,GAAG,CAAC;QAClD,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;IACjC,CAAC;IAFD,sDAEC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isMacintosh, isLinux, isWeb, isNative } from 'vs/base/common/platform';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IWorkspaceIdentifier, ISingleFolderWorkspaceIdentifier } from 'vs/platform/workspaces/common/workspaces';\nimport { NativeParsedArgs } from 'vs/platform/environment/common/argv';\nimport { LogLevel } from 'vs/platform/log/common/log';\nimport { PerformanceMark } from 'vs/base/common/performance';\nimport { ISandboxConfiguration } from 'vs/base/parts/sandbox/common/sandboxTypes';\n\nexport const WindowMinimumSize = {\n\tWIDTH: 400,\n\tWIDTH_WITH_VERTICAL_PANEL: 600,\n\tHEIGHT: 270\n};\n\nexport interface IBaseOpenWindowsOptions {\n\treadonly forceReuseWindow?: boolean;\n\t/**\n\t * The remote authority to use when windows are opened with either\n\t * - no workspace (empty window)\n\t * - a workspace that is neither `file://` nor `vscode-remote://`\n\t * Use 'null' for a local window.\n\t * If not set, defaults to the remote authority of the current window.\n\t */\n\treadonly remoteAuthority?: string | null;\n}\n\nexport interface IOpenWindowOptions extends IBaseOpenWindowsOptions {\n\treadonly forceNewWindow?: boolean;\n\treadonly preferNewWindow?: boolean;\n\n\treadonly noRecentEntry?: boolean;\n\n\treadonly addMode?: boolean;\n\n\treadonly diffMode?: boolean;\n\treadonly gotoLineMode?: boolean;\n\n\treadonly waitMarkerFileURI?: URI;\n}\n\nexport interface IAddFoldersRequest {\n\treadonly foldersToAdd: UriComponents[];\n}\n\nexport interface IOpenedWindow {\n\treadonly id: number;\n\treadonly workspace?: IWorkspaceIdentifier | ISingleFolderWorkspaceIdentifier;\n\treadonly title: string;\n\treadonly filename?: string;\n\treadonly dirty: boolean;\n}\n\nexport interface IOpenEmptyWindowOptions extends IBaseOpenWindowsOptions {\n}\n\nexport type IWindowOpenable = IWorkspaceToOpen | IFolderToOpen | IFileToOpen;\n\nexport interface IBaseWindowOpenable {\n\tlabel?: string;\n}\n\nexport interface IWorkspaceToOpen extends IBaseWindowOpenable {\n\treadonly workspaceUri: URI;\n}\n\nexport interface IFolderToOpen extends IBaseWindowOpenable {\n\treadonly folderUri: URI;\n}\n\nexport interface IFileToOpen extends IBaseWindowOpenable {\n\treadonly fileUri: URI;\n}\n\nexport function isWorkspaceToOpen(uriToOpen: IWindowOpenable): uriToOpen is IWorkspaceToOpen {\n\treturn !!(uriToOpen as IWorkspaceToOpen).workspaceUri;\n}\n\nexport function isFolderToOpen(uriToOpen: IWindowOpenable): uriToOpen is IFolderToOpen {\n\treturn !!(uriToOpen as IFolderToOpen).folderUri;\n}\n\nexport function isFileToOpen(uriToOpen: IWindowOpenable): uriToOpen is IFileToOpen {\n\treturn !!(uriToOpen as IFileToOpen).fileUri;\n}\n\nexport type MenuBarVisibility = 'classic' | 'visible' | 'toggle' | 'hidden' | 'compact';\n\nexport function getMenuBarVisibility(configurationService: IConfigurationService): MenuBarVisibility {\n\tconst titleBarStyle = getTitleBarStyle(configurationService);\n\tconst menuBarVisibility = configurationService.getValue<MenuBarVisibility | 'default'>('window.menuBarVisibility');\n\n\tif (menuBarVisibility === 'default' || (titleBarStyle === 'native' && menuBarVisibility === 'compact') || (isMacintosh && isNative)) {\n\t\treturn 'classic';\n\t} else {\n\t\treturn menuBarVisibility;\n\t}\n}\n\nexport interface IWindowsConfiguration {\n\treadonly window: IWindowSettings;\n}\n\nexport interface IWindowSettings {\n\treadonly openFilesInNewWindow: 'on' | 'off' | 'default';\n\treadonly openFoldersInNewWindow: 'on' | 'off' | 'default';\n\treadonly openWithoutArgumentsInNewWindow: 'on' | 'off';\n\treadonly restoreWindows: 'preserve' | 'all' | 'folders' | 'one' | 'none';\n\treadonly restoreFullscreen: boolean;\n\treadonly zoomLevel: number;\n\treadonly titleBarStyle: 'native' | 'custom';\n\treadonly autoDetectHighContrast: boolean;\n\treadonly menuBarVisibility: MenuBarVisibility;\n\treadonly newWindowDimensions: 'default' | 'inherit' | 'offset' | 'maximized' | 'fullscreen';\n\treadonly nativeTabs: boolean;\n\treadonly nativeFullScreen: boolean;\n\treadonly enableMenuBarMnemonics: boolean;\n\treadonly closeWhenEmpty: boolean;\n\treadonly clickThroughInactive: boolean;\n}\n\nexport function getTitleBarStyle(configurationService: IConfigurationService): 'native' | 'custom' {\n\tif (isWeb) {\n\t\treturn 'custom';\n\t}\n\n\tconst configuration = configurationService.getValue<IWindowSettings | undefined>('window');\n\n\tif (configuration) {\n\t\tconst useNativeTabs = isMacintosh && configuration.nativeTabs === true;\n\t\tif (useNativeTabs) {\n\t\t\treturn 'native'; // native tabs on sierra do not work with custom title style\n\t\t}\n\n\t\tconst useSimpleFullScreen = isMacintosh && configuration.nativeFullScreen === false;\n\t\tif (useSimpleFullScreen) {\n\t\t\treturn 'native'; // simple fullscreen does not work well with custom title style (https://github.com/microsoft/vscode/issues/63291)\n\t\t}\n\n\t\tconst style = configuration.titleBarStyle;\n\t\tif (style === 'native' || style === 'custom') {\n\t\t\treturn style;\n\t\t}\n\t}\n\n\treturn isLinux ? 'native' : 'custom'; // default to custom on all macOS and Windows\n}\n\nexport interface IPath extends IPathData {\n\n\t// the file path to open within the instance\n\tfileUri?: URI;\n}\n\nexport interface IPathData {\n\n\t// the file path to open within the instance\n\treadonly fileUri?: UriComponents;\n\n\t// the line number in the file path to open\n\treadonly lineNumber?: number;\n\n\t// the column number in the file path to open\n\treadonly columnNumber?: number;\n\n\t// a hint that the file exists. if true, the\n\t// file exists, if false it does not. with\n\t// undefined the state is unknown.\n\treadonly exists?: boolean;\n\n\t// Specifies if the file should be only be opened if it exists\n\treadonly openOnlyIfExists?: boolean;\n\n\t// Specifies an optional id to override the editor used to edit the resource, e.g. custom editor.\n\treadonly editorOverrideId?: string;\n}\n\nexport interface IPathsToWaitFor extends IPathsToWaitForData {\n\tpaths: IPath[];\n\twaitMarkerFileUri: URI;\n}\n\ninterface IPathsToWaitForData {\n\treadonly paths: IPathData[];\n\treadonly waitMarkerFileUri: UriComponents;\n}\n\nexport interface IOpenFileRequest {\n\treadonly filesToOpenOrCreate?: IPathData[];\n\treadonly filesToDiff?: IPathData[];\n}\n\n/**\n * Additional context for the request on native only.\n */\nexport interface INativeOpenFileRequest extends IOpenFileRequest {\n\treadonly termProgram?: string;\n\treadonly filesToWait?: IPathsToWaitForData;\n}\n\nexport interface INativeRunActionInWindowRequest {\n\treadonly id: string;\n\treadonly from: 'menu' | 'touchbar' | 'mouse';\n\treadonly args?: any[];\n}\n\nexport interface INativeRunKeybindingInWindowRequest {\n\treadonly userSettingsLabel: string;\n}\n\nexport interface IColorScheme {\n\treadonly dark: boolean;\n\treadonly highContrast: boolean;\n}\n\nexport interface IWindowConfiguration {\n\tremoteAuthority?: string;\n\n\tcolorScheme: IColorScheme;\n\tautoDetectHighContrast?: boolean;\n\n\tfilesToOpenOrCreate?: IPath[];\n\tfilesToDiff?: IPath[];\n}\n\nexport interface IOSConfiguration {\n\treadonly release: string;\n\treadonly hostname: string;\n}\n\nexport interface INativeWindowConfiguration extends IWindowConfiguration, NativeParsedArgs, ISandboxConfiguration {\n\tmainPid: number;\n\n\tmachineId: string;\n\n\texecPath: string;\n\tbackupPath?: string;\n\n\thomeDir: string;\n\ttmpDir: string;\n\tuserDataDir: string;\n\n\tpartsSplashPath: string;\n\n\tworkspace?: IWorkspaceIdentifier | ISingleFolderWorkspaceIdentifier;\n\n\tisInitialStartup?: boolean;\n\tlogLevel: LogLevel;\n\n\tfullscreen?: boolean;\n\tmaximized?: boolean;\n\taccessibilitySupport?: boolean;\n\n\tperfMarks: PerformanceMark[];\n\n\tfilesToWait?: IPathsToWaitFor;\n\n\tos: IOSConfiguration;\n}\n\n/**\n * According to Electron docs: `scale := 1.2 ^ level`.\n * https://github.com/electron/electron/blob/master/docs/api/web-contents.md#contentssetzoomlevellevel\n */\nexport function zoomLevelToZoomFactor(zoomLevel = 0): number {\n\treturn Math.pow(1.2, zoomLevel);\n}\n"]}