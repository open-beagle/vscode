{"version":3,"file":"windowTracker.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/windows/node/windowTracker.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAMhG,MAAa,mBAAoB,SAAQ,sBAAU;QAOlD,YAAY,EAAE,eAAe,EAAE,gBAAgB,EAAE,iBAAiB,EAIjE;YACA,KAAK,EAAE,CAAC;YAVQ,gBAAW,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,2BAAe,EAAE,CAAC,CAAC;YAYpE,6CAA6C;YAC7C,MAAM,oBAAoB,GAAG,aAAK,CAAC,KAAK,CAAC,aAAK,CAAC,GAAG,CAAC,eAAe,EAAE,gBAAgB,CAAC,CAAC,CAAC;YACvF,oBAAoB,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;YAEnE,gCAAgC;YAChC,IAAI,CAAC,0BAA0B,GAAG,CAAA,GAAA,+BAAuB,CAAA,CAAC,GAAG,EAAE,CAAC,iBAAiB,EAAE,CAAC,CAAC;YACrF,CAAC,KAAK,IAAI,EAAE;gBACX,IAAI;oBACH,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,0BAA0B,CAAC;oBACvD,IAAI,CAAC,cAAc,GAAG,CAAC,OAAO,IAAI,CAAC,cAAc,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,QAAQ,CAAC;iBACjG;gBAAC,OAAO,KAAK,EAAE;oBACf,SAAS;iBACT;wBAAS;oBACT,IAAI,CAAC,0BAA0B,GAAG,SAAS,CAAC;iBAC5C;YACF,CAAC,CAAC,EAAE,CAAC;QACN,CAAC;QAEO,eAAe,CAAC,QAA4B;YACnD,IAAI,IAAI,CAAC,0BAA0B,EAAE;gBACpC,IAAI,CAAC,0BAA0B,CAAC,MAAM,EAAE,CAAC;gBACzC,IAAI,CAAC,0BAA0B,GAAG,SAAS,CAAC;aAC5C;YAED,IAAI,CAAC,cAAc,GAAG,QAAQ,CAAC;QAChC,CAAC;QAED,KAAK,CAAC,iBAAiB;YACtB,MAAM,EAAE,GAAG,IAAI,CAAC,0BAA0B,CAAC,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,0BAA0B,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC;YAE3G,OAAO,UAAU,EAAE,EAAE,CAAC;QACvB,CAAC;KACD;IA9CD,kDA8CC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { Disposable, DisposableStore } from 'vs/base/common/lifecycle';\nimport { CancelablePromise, createCancelablePromise } from 'vs/base/common/async';\n\nexport class ActiveWindowManager extends Disposable {\n\n\tprivate readonly disposables = this._register(new DisposableStore());\n\tprivate firstActiveWindowIdPromise: CancelablePromise<number | undefined> | undefined;\n\n\tprivate activeWindowId: number | undefined;\n\n\tconstructor({ onDidOpenWindow, onDidFocusWindow, getActiveWindowId }: {\n\t\tonDidOpenWindow: Event<number>,\n\t\tonDidFocusWindow: Event<number>,\n\t\tgetActiveWindowId(): Promise<number | undefined>\n\t}) {\n\t\tsuper();\n\n\t\t// remember last active window id upon events\n\t\tconst onActiveWindowChange = Event.latch(Event.any(onDidOpenWindow, onDidFocusWindow));\n\t\tonActiveWindowChange(this.setActiveWindow, this, this.disposables);\n\n\t\t// resolve current active window\n\t\tthis.firstActiveWindowIdPromise = createCancelablePromise(() => getActiveWindowId());\n\t\t(async () => {\n\t\t\ttry {\n\t\t\t\tconst windowId = await this.firstActiveWindowIdPromise;\n\t\t\t\tthis.activeWindowId = (typeof this.activeWindowId === 'number') ? this.activeWindowId : windowId;\n\t\t\t} catch (error) {\n\t\t\t\t// ignore\n\t\t\t} finally {\n\t\t\t\tthis.firstActiveWindowIdPromise = undefined;\n\t\t\t}\n\t\t})();\n\t}\n\n\tprivate setActiveWindow(windowId: number | undefined) {\n\t\tif (this.firstActiveWindowIdPromise) {\n\t\t\tthis.firstActiveWindowIdPromise.cancel();\n\t\t\tthis.firstActiveWindowIdPromise = undefined;\n\t\t}\n\n\t\tthis.activeWindowId = windowId;\n\t}\n\n\tasync getActiveClientId(): Promise<string | undefined> {\n\t\tconst id = this.firstActiveWindowIdPromise ? (await this.firstActiveWindowIdPromise) : this.activeWindowId;\n\n\t\treturn `window:${id}`;\n\t}\n}\n"]}