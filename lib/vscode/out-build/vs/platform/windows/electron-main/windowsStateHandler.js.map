{"version":3,"file":"windowsStateHandler.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/windows/electron-main/windowsStateHandler.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { app, Display, screen } from 'electron';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { isMacintosh } from 'vs/base/common/platform';\nimport { extUriBiasedIgnorePathCase } from 'vs/base/common/resources';\nimport { URI } from 'vs/base/common/uri';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ILifecycleMainService } from 'vs/platform/lifecycle/electron-main/lifecycleMainService';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IStateService } from 'vs/platform/state/node/state';\nimport { INativeWindowConfiguration, IWindowSettings } from 'vs/platform/windows/common/windows';\nimport { defaultWindowState, ICodeWindow, IWindowsMainService, IWindowState as IWindowUIState, WindowMode } from 'vs/platform/windows/electron-main/windows';\nimport { isSingleFolderWorkspaceIdentifier, isWorkspaceIdentifier, IWorkspaceIdentifier } from 'vs/platform/workspaces/common/workspaces';\n\nexport interface IWindowState {\n\tworkspace?: IWorkspaceIdentifier;\n\tfolderUri?: URI;\n\tbackupPath?: string;\n\tremoteAuthority?: string;\n\tuiState: IWindowUIState;\n}\n\nexport interface IWindowsState {\n\tlastActiveWindow?: IWindowState;\n\tlastPluginDevelopmentHostWindow?: IWindowState;\n\topenedWindows: IWindowState[];\n}\n\ninterface INewWindowState extends IWindowUIState {\n\thasDefaultState?: boolean;\n}\n\ninterface ISerializedWindowsState {\n\treadonly lastActiveWindow?: ISerializedWindowState;\n\treadonly lastPluginDevelopmentHostWindow?: ISerializedWindowState;\n\treadonly openedWindows: ISerializedWindowState[];\n}\n\ninterface ISerializedWindowState {\n\treadonly workspaceIdentifier?: { id: string; configURIPath: string };\n\treadonly folder?: string;\n\treadonly backupPath?: string;\n\treadonly remoteAuthority?: string;\n\treadonly uiState: IWindowUIState;\n}\n\nexport class WindowsStateHandler extends Disposable {\n\n\tprivate static readonly windowsStateStorageKey = 'windowsState';\n\n\tget state() { return this._state; }\n\tprivate readonly _state = restoreWindowsState(this.stateService.getItem<ISerializedWindowsState>(WindowsStateHandler.windowsStateStorageKey));\n\n\tprivate lastClosedState: IWindowState | undefined = undefined;\n\n\tprivate shuttingDown = false;\n\n\tconstructor(\n\t\t@IWindowsMainService private readonly windowsMainService: IWindowsMainService,\n\t\t@IStateService private readonly stateService: IStateService,\n\t\t@ILifecycleMainService private readonly lifecycleMainService: ILifecycleMainService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// When a window looses focus, save all windows state. This allows to\n\t\t// prevent loss of window-state data when OS is restarted without properly\n\t\t// shutting down the application (https://github.com/microsoft/vscode/issues/87171)\n\t\tapp.on('browser-window-blur', () => {\n\t\t\tif (!this.shuttingDown) {\n\t\t\t\tthis.saveWindowsState();\n\t\t\t}\n\t\t});\n\n\t\t// Handle various lifecycle events around windows\n\t\tthis.lifecycleMainService.onBeforeCloseWindow(window => this.onBeforeCloseWindow(window));\n\t\tthis.lifecycleMainService.onBeforeShutdown(() => this.onBeforeShutdown());\n\t\tthis.windowsMainService.onDidChangeWindowsCount(e => {\n\t\t\tif (e.newCount - e.oldCount > 0) {\n\t\t\t\t// clear last closed window state when a new window opens. this helps on macOS where\n\t\t\t\t// otherwise closing the last window, opening a new window and then quitting would\n\t\t\t\t// use the state of the previously closed window when restarting.\n\t\t\t\tthis.lastClosedState = undefined;\n\t\t\t}\n\t\t});\n\n\t\t// try to save state before destroy because close will not fire\n\t\tthis.windowsMainService.onDidDestroyWindow(window => this.onBeforeCloseWindow(window));\n\t}\n\n\t// Note that onBeforeShutdown() and onBeforeCloseWindow() are fired in different order depending on the OS:\n\t// - macOS: since the app will not quit when closing the last window, you will always first get\n\t//          the onBeforeShutdown() event followed by N onBeforeCloseWindow() events for each window\n\t// - other: on other OS, closing the last window will quit the app so the order depends on the\n\t//          user interaction: closing the last window will first trigger onBeforeCloseWindow()\n\t//          and then onBeforeShutdown(). Using the quit action however will first issue onBeforeShutdown()\n\t//          and then onBeforeCloseWindow().\n\t//\n\t// Here is the behavior on different OS depending on action taken (Electron 1.7.x):\n\t//\n\t// Legend\n\t// -  quit(N): quit application with N windows opened\n\t// - close(1): close one window via the window close button\n\t// - closeAll: close all windows via the taskbar command\n\t// - onBeforeShutdown(N): number of windows reported in this event handler\n\t// - onBeforeCloseWindow(N, M): number of windows reported and quitRequested boolean in this event handler\n\t//\n\t// macOS\n\t// \t-     quit(1): onBeforeShutdown(1), onBeforeCloseWindow(1, true)\n\t// \t-     quit(2): onBeforeShutdown(2), onBeforeCloseWindow(2, true), onBeforeCloseWindow(2, true)\n\t// \t-     quit(0): onBeforeShutdown(0)\n\t// \t-    close(1): onBeforeCloseWindow(1, false)\n\t//\n\t// Windows\n\t// \t-     quit(1): onBeforeShutdown(1), onBeforeCloseWindow(1, true)\n\t// \t-     quit(2): onBeforeShutdown(2), onBeforeCloseWindow(2, true), onBeforeCloseWindow(2, true)\n\t// \t-    close(1): onBeforeCloseWindow(2, false)[not last window]\n\t// \t-    close(1): onBeforeCloseWindow(1, false), onBeforeShutdown(0)[last window]\n\t// \t- closeAll(2): onBeforeCloseWindow(2, false), onBeforeCloseWindow(2, false), onBeforeShutdown(0)\n\t//\n\t// Linux\n\t// \t-     quit(1): onBeforeShutdown(1), onBeforeCloseWindow(1, true)\n\t// \t-     quit(2): onBeforeShutdown(2), onBeforeCloseWindow(2, true), onBeforeCloseWindow(2, true)\n\t// \t-    close(1): onBeforeCloseWindow(2, false)[not last window]\n\t// \t-    close(1): onBeforeCloseWindow(1, false), onBeforeShutdown(0)[last window]\n\t// \t- closeAll(2): onBeforeCloseWindow(2, false), onBeforeCloseWindow(2, false), onBeforeShutdown(0)\n\t//\n\tprivate onBeforeShutdown(): void {\n\t\tthis.shuttingDown = true;\n\n\t\tthis.saveWindowsState();\n\t}\n\n\tprivate saveWindowsState(): void {\n\t\tconst currentWindowsState: IWindowsState = {\n\t\t\topenedWindows: [],\n\t\t\tlastPluginDevelopmentHostWindow: this._state.lastPluginDevelopmentHostWindow,\n\t\t\tlastActiveWindow: this.lastClosedState\n\t\t};\n\n\t\t// 1.) Find a last active window (pick any other first window otherwise)\n\t\tif (!currentWindowsState.lastActiveWindow) {\n\t\t\tlet activeWindow = this.windowsMainService.getLastActiveWindow();\n\t\t\tif (!activeWindow || activeWindow.isExtensionDevelopmentHost) {\n\t\t\t\tactiveWindow = this.windowsMainService.getWindows().find(window => !window.isExtensionDevelopmentHost);\n\t\t\t}\n\n\t\t\tif (activeWindow) {\n\t\t\t\tcurrentWindowsState.lastActiveWindow = this.toWindowState(activeWindow);\n\t\t\t}\n\t\t}\n\n\t\t// 2.) Find extension host window\n\t\tconst extensionHostWindow = this.windowsMainService.getWindows().find(window => window.isExtensionDevelopmentHost && !window.isExtensionTestHost);\n\t\tif (extensionHostWindow) {\n\t\t\tcurrentWindowsState.lastPluginDevelopmentHostWindow = this.toWindowState(extensionHostWindow);\n\t\t}\n\n\t\t// 3.) All windows (except extension host) for N >= 2 to support `restoreWindows: all` or for auto update\n\t\t//\n\t\t// Careful here: asking a window for its window state after it has been closed returns bogus values (width: 0, height: 0)\n\t\t// so if we ever want to persist the UI state of the last closed window (window count === 1), it has\n\t\t// to come from the stored lastClosedWindowState on Win/Linux at least\n\t\tif (this.windowsMainService.getWindowCount() > 1) {\n\t\t\tcurrentWindowsState.openedWindows = this.windowsMainService.getWindows().filter(window => !window.isExtensionDevelopmentHost).map(window => this.toWindowState(window));\n\t\t}\n\n\t\t// Persist\n\t\tconst state = getWindowsStateStoreData(currentWindowsState);\n\t\tthis.stateService.setItem(WindowsStateHandler.windowsStateStorageKey, state);\n\n\t\tif (this.shuttingDown) {\n\t\t\tthis.logService.trace('[WindowsStateHandler] onBeforeShutdown', state);\n\t\t}\n\t}\n\n\t// See note on #onBeforeShutdown() for details how these events are flowing\n\tprivate onBeforeCloseWindow(window: ICodeWindow): void {\n\t\tif (this.lifecycleMainService.quitRequested) {\n\t\t\treturn; // during quit, many windows close in parallel so let it be handled in the before-quit handler\n\t\t}\n\n\t\t// On Window close, update our stored UI state of this window\n\t\tconst state: IWindowState = this.toWindowState(window);\n\t\tif (window.isExtensionDevelopmentHost && !window.isExtensionTestHost) {\n\t\t\tthis._state.lastPluginDevelopmentHostWindow = state; // do not let test run window state overwrite our extension development state\n\t\t}\n\n\t\t// Any non extension host window with same workspace or folder\n\t\telse if (!window.isExtensionDevelopmentHost && window.openedWorkspace) {\n\t\t\tthis._state.openedWindows.forEach(openedWindow => {\n\t\t\t\tconst sameWorkspace = isWorkspaceIdentifier(window.openedWorkspace) && openedWindow.workspace?.id === window.openedWorkspace.id;\n\t\t\t\tconst sameFolder = isSingleFolderWorkspaceIdentifier(window.openedWorkspace) && openedWindow.folderUri && extUriBiasedIgnorePathCase.isEqual(openedWindow.folderUri, window.openedWorkspace.uri);\n\n\t\t\t\tif (sameWorkspace || sameFolder) {\n\t\t\t\t\topenedWindow.uiState = state.uiState;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// On Windows and Linux closing the last window will trigger quit. Since we are storing all UI state\n\t\t// before quitting, we need to remember the UI state of this window to be able to persist it.\n\t\t// On macOS we keep the last closed window state ready in case the user wants to quit right after or\n\t\t// wants to open another window, in which case we use this state over the persisted one.\n\t\tif (this.windowsMainService.getWindowCount() === 1) {\n\t\t\tthis.lastClosedState = state;\n\t\t}\n\t}\n\n\tprivate toWindowState(window: ICodeWindow): IWindowState {\n\t\treturn {\n\t\t\tworkspace: isWorkspaceIdentifier(window.openedWorkspace) ? window.openedWorkspace : undefined,\n\t\t\tfolderUri: isSingleFolderWorkspaceIdentifier(window.openedWorkspace) ? window.openedWorkspace.uri : undefined,\n\t\t\tbackupPath: window.backupPath,\n\t\t\tremoteAuthority: window.remoteAuthority,\n\t\t\tuiState: window.serializeWindowState()\n\t\t};\n\t}\n\n\tgetNewWindowState(configuration: INativeWindowConfiguration): INewWindowState {\n\t\tconst state = this.doGetNewWindowState(configuration);\n\t\tconst windowConfig = this.configurationService.getValue<IWindowSettings | undefined>('window');\n\n\t\t// Window state is not from a previous session: only allow fullscreen if we inherit it or user wants fullscreen\n\t\tlet allowFullscreen: boolean;\n\t\tif (state.hasDefaultState) {\n\t\t\tallowFullscreen = !!(windowConfig?.newWindowDimensions && ['fullscreen', 'inherit', 'offset'].indexOf(windowConfig.newWindowDimensions) >= 0);\n\t\t}\n\n\t\t// Window state is from a previous session: only allow fullscreen when we got updated or user wants to restore\n\t\telse {\n\t\t\tallowFullscreen = !!(this.lifecycleMainService.wasRestarted || windowConfig?.restoreFullscreen);\n\n\t\t\tif (allowFullscreen && isMacintosh && this.windowsMainService.getWindows().some(window => window.isFullScreen)) {\n\t\t\t\t// macOS: Electron does not allow to restore multiple windows in\n\t\t\t\t// fullscreen. As such, if we already restored a window in that\n\t\t\t\t// state, we cannot allow more fullscreen windows. See\n\t\t\t\t// https://github.com/microsoft/vscode/issues/41691 and\n\t\t\t\t// https://github.com/electron/electron/issues/13077\n\t\t\t\tallowFullscreen = false;\n\t\t\t}\n\t\t}\n\n\t\tif (state.mode === WindowMode.Fullscreen && !allowFullscreen) {\n\t\t\tstate.mode = WindowMode.Normal;\n\t\t}\n\n\t\treturn state;\n\t}\n\n\tprivate doGetNewWindowState(configuration: INativeWindowConfiguration): INewWindowState {\n\t\tconst lastActive = this.windowsMainService.getLastActiveWindow();\n\n\t\t// Restore state unless we are running extension tests\n\t\tif (!configuration.extensionTestsPath) {\n\n\t\t\t// extension development host Window - load from stored settings if any\n\t\t\tif (!!configuration.extensionDevelopmentPath && this.state.lastPluginDevelopmentHostWindow) {\n\t\t\t\treturn this.state.lastPluginDevelopmentHostWindow.uiState;\n\t\t\t}\n\n\t\t\t// Known Workspace - load from stored settings\n\t\t\tconst workspace = configuration.workspace;\n\t\t\tif (isWorkspaceIdentifier(workspace)) {\n\t\t\t\tconst stateForWorkspace = this.state.openedWindows.filter(openedWindow => openedWindow.workspace && openedWindow.workspace.id === workspace.id).map(openedWindow => openedWindow.uiState);\n\t\t\t\tif (stateForWorkspace.length) {\n\t\t\t\t\treturn stateForWorkspace[0];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Known Folder - load from stored settings\n\t\t\tif (isSingleFolderWorkspaceIdentifier(workspace)) {\n\t\t\t\tconst stateForFolder = this.state.openedWindows.filter(openedWindow => openedWindow.folderUri && extUriBiasedIgnorePathCase.isEqual(openedWindow.folderUri, workspace.uri)).map(openedWindow => openedWindow.uiState);\n\t\t\t\tif (stateForFolder.length) {\n\t\t\t\t\treturn stateForFolder[0];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Empty windows with backups\n\t\t\telse if (configuration.backupPath) {\n\t\t\t\tconst stateForEmptyWindow = this.state.openedWindows.filter(openedWindow => openedWindow.backupPath === configuration.backupPath).map(openedWindow => openedWindow.uiState);\n\t\t\t\tif (stateForEmptyWindow.length) {\n\t\t\t\t\treturn stateForEmptyWindow[0];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// First Window\n\t\t\tconst lastActiveState = this.lastClosedState || this.state.lastActiveWindow;\n\t\t\tif (!lastActive && lastActiveState) {\n\t\t\t\treturn lastActiveState.uiState;\n\t\t\t}\n\t\t}\n\n\t\t//\n\t\t// In any other case, we do not have any stored settings for the window state, so we come up with something smart\n\t\t//\n\n\t\t// We want the new window to open on the same display that the last active one is in\n\t\tlet displayToUse: Display | undefined;\n\t\tconst displays = screen.getAllDisplays();\n\n\t\t// Single Display\n\t\tif (displays.length === 1) {\n\t\t\tdisplayToUse = displays[0];\n\t\t}\n\n\t\t// Multi Display\n\t\telse {\n\n\t\t\t// on mac there is 1 menu per window so we need to use the monitor where the cursor currently is\n\t\t\tif (isMacintosh) {\n\t\t\t\tconst cursorPoint = screen.getCursorScreenPoint();\n\t\t\t\tdisplayToUse = screen.getDisplayNearestPoint(cursorPoint);\n\t\t\t}\n\n\t\t\t// if we have a last active window, use that display for the new window\n\t\t\tif (!displayToUse && lastActive) {\n\t\t\t\tdisplayToUse = screen.getDisplayMatching(lastActive.getBounds());\n\t\t\t}\n\n\t\t\t// fallback to primary display or first display\n\t\t\tif (!displayToUse) {\n\t\t\t\tdisplayToUse = screen.getPrimaryDisplay() || displays[0];\n\t\t\t}\n\t\t}\n\n\t\t// Compute x/y based on display bounds\n\t\t// Note: important to use Math.round() because Electron does not seem to be too happy about\n\t\t// display coordinates that are not absolute numbers.\n\t\tlet state = defaultWindowState();\n\t\tstate.x = Math.round(displayToUse.bounds.x + (displayToUse.bounds.width / 2) - (state.width! / 2));\n\t\tstate.y = Math.round(displayToUse.bounds.y + (displayToUse.bounds.height / 2) - (state.height! / 2));\n\n\t\t// Check for newWindowDimensions setting and adjust accordingly\n\t\tconst windowConfig = this.configurationService.getValue<IWindowSettings | undefined>('window');\n\t\tlet ensureNoOverlap = true;\n\t\tif (windowConfig?.newWindowDimensions) {\n\t\t\tif (windowConfig.newWindowDimensions === 'maximized') {\n\t\t\t\tstate.mode = WindowMode.Maximized;\n\t\t\t\tensureNoOverlap = false;\n\t\t\t} else if (windowConfig.newWindowDimensions === 'fullscreen') {\n\t\t\t\tstate.mode = WindowMode.Fullscreen;\n\t\t\t\tensureNoOverlap = false;\n\t\t\t} else if ((windowConfig.newWindowDimensions === 'inherit' || windowConfig.newWindowDimensions === 'offset') && lastActive) {\n\t\t\t\tconst lastActiveState = lastActive.serializeWindowState();\n\t\t\t\tif (lastActiveState.mode === WindowMode.Fullscreen) {\n\t\t\t\t\tstate.mode = WindowMode.Fullscreen; // only take mode (fixes https://github.com/microsoft/vscode/issues/19331)\n\t\t\t\t} else {\n\t\t\t\t\tstate = lastActiveState;\n\t\t\t\t}\n\n\t\t\t\tensureNoOverlap = state.mode !== WindowMode.Fullscreen && windowConfig.newWindowDimensions === 'offset';\n\t\t\t}\n\t\t}\n\n\t\tif (ensureNoOverlap) {\n\t\t\tstate = this.ensureNoOverlap(state);\n\t\t}\n\n\t\t(state as INewWindowState).hasDefaultState = true; // flag as default state\n\n\t\treturn state;\n\t}\n\n\tprivate ensureNoOverlap(state: IWindowUIState): IWindowUIState {\n\t\tif (this.windowsMainService.getWindows().length === 0) {\n\t\t\treturn state;\n\t\t}\n\n\t\tstate.x = typeof state.x === 'number' ? state.x : 0;\n\t\tstate.y = typeof state.y === 'number' ? state.y : 0;\n\n\t\tconst existingWindowBounds = this.windowsMainService.getWindows().map(window => window.getBounds());\n\t\twhile (existingWindowBounds.some(bounds => bounds.x === state.x || bounds.y === state.y)) {\n\t\t\tstate.x += 30;\n\t\t\tstate.y += 30;\n\t\t}\n\n\t\treturn state;\n\t}\n}\n\nexport function restoreWindowsState(data: ISerializedWindowsState | undefined): IWindowsState {\n\tconst result: IWindowsState = { openedWindows: [] };\n\tconst windowsState = data || { openedWindows: [] };\n\n\tif (windowsState.lastActiveWindow) {\n\t\tresult.lastActiveWindow = restoreWindowState(windowsState.lastActiveWindow);\n\t}\n\n\tif (windowsState.lastPluginDevelopmentHostWindow) {\n\t\tresult.lastPluginDevelopmentHostWindow = restoreWindowState(windowsState.lastPluginDevelopmentHostWindow);\n\t}\n\n\tif (Array.isArray(windowsState.openedWindows)) {\n\t\tresult.openedWindows = windowsState.openedWindows.map(windowState => restoreWindowState(windowState));\n\t}\n\n\treturn result;\n}\n\nfunction restoreWindowState(windowState: ISerializedWindowState): IWindowState {\n\tconst result: IWindowState = { uiState: windowState.uiState };\n\tif (windowState.backupPath) {\n\t\tresult.backupPath = windowState.backupPath;\n\t}\n\n\tif (windowState.remoteAuthority) {\n\t\tresult.remoteAuthority = windowState.remoteAuthority;\n\t}\n\n\tif (windowState.folder) {\n\t\tresult.folderUri = URI.parse(windowState.folder);\n\t}\n\n\tif (windowState.workspaceIdentifier) {\n\t\tresult.workspace = { id: windowState.workspaceIdentifier.id, configPath: URI.parse(windowState.workspaceIdentifier.configURIPath) };\n\t}\n\n\treturn result;\n}\n\nexport function getWindowsStateStoreData(windowsState: IWindowsState): IWindowsState {\n\treturn {\n\t\tlastActiveWindow: windowsState.lastActiveWindow && serializeWindowState(windowsState.lastActiveWindow),\n\t\tlastPluginDevelopmentHostWindow: windowsState.lastPluginDevelopmentHostWindow && serializeWindowState(windowsState.lastPluginDevelopmentHostWindow),\n\t\topenedWindows: windowsState.openedWindows.map(ws => serializeWindowState(ws))\n\t};\n}\n\nfunction serializeWindowState(windowState: IWindowState): ISerializedWindowState {\n\treturn {\n\t\tworkspaceIdentifier: windowState.workspace && { id: windowState.workspace.id, configURIPath: windowState.workspace.configPath.toString() },\n\t\tfolder: windowState.folderUri && windowState.folderUri.toString(),\n\t\tbackupPath: windowState.backupPath,\n\t\tremoteAuthority: windowState.remoteAuthority,\n\t\tuiState: windowState.uiState\n\t};\n}\n"]}