{"version":3,"file":"windowsFinder.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/windows/electron-main/windowsFinder.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { IWorkspaceIdentifier, IResolvedWorkspace, isWorkspaceIdentifier, isSingleFolderWorkspaceIdentifier, ISingleFolderWorkspaceIdentifier } from 'vs/platform/workspaces/common/workspaces';\nimport { extUriBiasedIgnorePathCase } from 'vs/base/common/resources';\nimport { ICodeWindow } from 'vs/platform/windows/electron-main/windows';\n\nexport function findWindowOnFile(windows: ICodeWindow[], fileUri: URI, localWorkspaceResolver: (workspace: IWorkspaceIdentifier) => IResolvedWorkspace | null): ICodeWindow | undefined {\n\n\t// First check for windows with workspaces that have a parent folder of the provided path opened\n\tfor (const window of windows) {\n\t\tconst workspace = window.openedWorkspace;\n\t\tif (isWorkspaceIdentifier(workspace)) {\n\t\t\tconst resolvedWorkspace = localWorkspaceResolver(workspace);\n\n\t\t\t// resolved workspace: folders are known and can be compared with\n\t\t\tif (resolvedWorkspace) {\n\t\t\t\tif (resolvedWorkspace.folders.some(folder => extUriBiasedIgnorePathCase.isEqualOrParent(fileUri, folder.uri))) {\n\t\t\t\t\treturn window;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// unresolved: can only compare with workspace location\n\t\t\telse {\n\t\t\t\tif (extUriBiasedIgnorePathCase.isEqualOrParent(fileUri, workspace.configPath)) {\n\t\t\t\t\treturn window;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Then go with single folder windows that are parent of the provided file path\n\tconst singleFolderWindowsOnFilePath = windows.filter(window => isSingleFolderWorkspaceIdentifier(window.openedWorkspace) && extUriBiasedIgnorePathCase.isEqualOrParent(fileUri, window.openedWorkspace.uri));\n\tif (singleFolderWindowsOnFilePath.length) {\n\t\treturn singleFolderWindowsOnFilePath.sort((windowA, windowB) => -((windowA.openedWorkspace as ISingleFolderWorkspaceIdentifier).uri.path.length - (windowB.openedWorkspace as ISingleFolderWorkspaceIdentifier).uri.path.length))[0];\n\t}\n\n\treturn undefined;\n}\n\nexport function findWindowOnWorkspaceOrFolder(windows: ICodeWindow[], folderOrWorkspaceConfigUri: URI): ICodeWindow | undefined {\n\n\tfor (const window of windows) {\n\n\t\t// check for workspace config path\n\t\tif (isWorkspaceIdentifier(window.openedWorkspace) && extUriBiasedIgnorePathCase.isEqual(window.openedWorkspace.configPath, folderOrWorkspaceConfigUri)) {\n\t\t\treturn window;\n\t\t}\n\n\t\t// check for folder path\n\t\tif (isSingleFolderWorkspaceIdentifier(window.openedWorkspace) && extUriBiasedIgnorePathCase.isEqual(window.openedWorkspace.uri, folderOrWorkspaceConfigUri)) {\n\t\t\treturn window;\n\t\t}\n\t}\n\n\treturn undefined;\n}\n\n\nexport function findWindowOnExtensionDevelopmentPath(windows: ICodeWindow[], extensionDevelopmentPaths: string[]): ICodeWindow | undefined {\n\n\tconst matches = (uriString: string): boolean => {\n\t\treturn extensionDevelopmentPaths.some(path => extUriBiasedIgnorePathCase.isEqual(URI.file(path), URI.file(uriString)));\n\t};\n\n\tfor (const window of windows) {\n\n\t\t// match on extension development path. the path can be one or more paths\n\t\t// so we check if any of the paths match on any of the provided ones\n\t\tif (window.config?.extensionDevelopmentPath?.some(path => matches(path))) {\n\t\t\treturn window;\n\t\t}\n\t}\n\n\treturn undefined;\n}\n"]}