{"version":3,"file":"windows.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/windows/electron-main/windows.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAchG,IAAkB,WAmBjB;IAnBD,WAAkB,WAAW;QAE5B,6CAA6C;QAC7C,2CAAG,CAAA;QAEH,iGAAiG;QACjG,6CAAI,CAAA;QAEJ,2CAA2C;QAC3C,6CAAI,CAAA;QAEJ,uCAAuC;QACvC,iDAAM,CAAA;QAEN,2BAA2B;QAC3B,mDAAO,CAAA;QAEP,0BAA0B;QAC1B,2CAAG,CAAA;IACJ,CAAC,EAnBiB,WAAW,GAAX,mBAAW,KAAX,mBAAW,QAmB5B;IAWM,MAAM,kBAAkB,GAAG,UAAU,IAAI,iBAAoB;QACnE,OAAO;YACN,KAAK,EAAE,IAAI;YACX,MAAM,EAAE,GAAG;YACX,IAAI;SACJ,CAAC;IACH,CAAC,CAAC;IANW,QAAA,kBAAkB,sBAM7B;IAEF,IAAkB,UAKjB;IALD,WAAkB,UAAU;QAC3B,qDAAS,CAAA;QACT,+CAAM,CAAA;QACN,qDAAS,CAAA;QACT,uDAAU,CAAA;IACX,CAAC,EALiB,UAAU,GAAV,kBAAU,KAAV,kBAAU,QAK3B;IAmED,IAAkB,WAgBjB;IAhBD,WAAkB,WAAW;QAE5B;;WAEG;QACH,6DAAgB,CAAA;QAEhB;;WAEG;QACH,mDAAW,CAAA;QAEX;;WAEG;QACH,6CAAQ,CAAA;IACT,CAAC,EAhBiB,WAAW,GAAX,mBAAW,KAAX,mBAAW,QAgB5B;IAEY,QAAA,mBAAmB,GAAG,CAAA,GAAA,+BAAe,CAAA,CAAsB,oBAAoB,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IWindowOpenable, IOpenEmptyWindowOptions, INativeWindowConfiguration } from 'vs/platform/windows/common/windows';\nimport { NativeParsedArgs } from 'vs/platform/environment/common/argv';\nimport { Event } from 'vs/base/common/event';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IProcessEnvironment } from 'vs/base/common/platform';\nimport { ISingleFolderWorkspaceIdentifier, IWorkspaceIdentifier } from 'vs/platform/workspaces/common/workspaces';\nimport { ISerializableCommandAction } from 'vs/platform/actions/common/actions';\nimport { URI } from 'vs/base/common/uri';\nimport { Rectangle, BrowserWindow, WebContents } from 'electron';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { CancellationToken } from 'vs/base/common/cancellation';\n\nexport const enum OpenContext {\n\n\t// opening when running from the command line\n\tCLI,\n\n\t// macOS only: opening from the dock (also when opening files to a running instance from desktop)\n\tDOCK,\n\n\t// opening from the main application window\n\tMENU,\n\n\t// opening from a file or folder dialog\n\tDIALOG,\n\n\t// opening from the OS's UI\n\tDESKTOP,\n\n\t// opening through the API\n\tAPI\n}\n\nexport interface IWindowState {\n\twidth?: number;\n\theight?: number;\n\tx?: number;\n\ty?: number;\n\tmode?: WindowMode;\n\tdisplay?: number;\n}\n\nexport const defaultWindowState = function (mode = WindowMode.Normal): IWindowState {\n\treturn {\n\t\twidth: 1024,\n\t\theight: 768,\n\t\tmode\n\t};\n};\n\nexport const enum WindowMode {\n\tMaximized,\n\tNormal,\n\tMinimized, // not used anymore, but also cannot remove due to existing stored UI state (needs migration)\n\tFullscreen\n}\n\nexport interface ILoadEvent {\n\tworkspace: IWorkspaceIdentifier | ISingleFolderWorkspaceIdentifier | undefined;\n}\n\nexport interface ICodeWindow extends IDisposable {\n\n\treadonly onWillLoad: Event<ILoadEvent>;\n\treadonly onDidSignalReady: Event<void>;\n\treadonly onDidClose: Event<void>;\n\treadonly onDidDestroy: Event<void>;\n\n\treadonly whenClosedOrLoaded: Promise<void>;\n\n\treadonly id: number;\n\treadonly win: BrowserWindow | null; /* `null` after being disposed */\n\treadonly config: INativeWindowConfiguration | undefined;\n\n\treadonly openedWorkspace?: IWorkspaceIdentifier | ISingleFolderWorkspaceIdentifier;\n\n\treadonly backupPath?: string;\n\n\treadonly remoteAuthority?: string;\n\n\treadonly isExtensionDevelopmentHost: boolean;\n\treadonly isExtensionTestHost: boolean;\n\n\treadonly lastFocusTime: number;\n\n\treadonly isReady: boolean;\n\tready(): Promise<ICodeWindow>;\n\tsetReady(): void;\n\n\treadonly hasHiddenTitleBarStyle: boolean;\n\n\taddTabbedWindow(window: ICodeWindow): void;\n\n\tload(config: INativeWindowConfiguration, options?: { isReload?: boolean }): void;\n\treload(cli?: NativeParsedArgs): void;\n\n\tfocus(options?: { force: boolean }): void;\n\tclose(): void;\n\n\tgetBounds(): Rectangle;\n\n\tsend(channel: string, ...args: any[]): void;\n\tsendWhenReady(channel: string, token: CancellationToken, ...args: any[]): void;\n\n\treadonly isFullScreen: boolean;\n\ttoggleFullScreen(): void;\n\n\tisMinimized(): boolean;\n\n\tsetRepresentedFilename(name: string): void;\n\tgetRepresentedFilename(): string | undefined;\n\n\tsetDocumentEdited(edited: boolean): void;\n\tisDocumentEdited(): boolean;\n\n\thandleTitleDoubleClick(): void;\n\n\tupdateTouchBar(items: ISerializableCommandAction[][]): void;\n\n\tserializeWindowState(): IWindowState;\n}\n\nexport const enum WindowError {\n\n\t/**\n\t * Maps to the `unresponsive` event on a `BrowserWindow`.\n\t */\n\tUNRESPONSIVE = 1,\n\n\t/**\n\t * Maps to the `render-proces-gone` event on a `WebContents`.\n\t */\n\tCRASHED = 2,\n\n\t/**\n\t * Maps to the `did-fail-load` event on a `WebContents`.\n\t */\n\tLOAD = 3\n}\n\nexport const IWindowsMainService = createDecorator<IWindowsMainService>('windowsMainService');\n\nexport interface IWindowsCountChangedEvent {\n\treadonly oldCount: number;\n\treadonly newCount: number;\n}\n\nexport interface IWindowsMainService {\n\n\treadonly _serviceBrand: undefined;\n\n\treadonly onDidChangeWindowsCount: Event<IWindowsCountChangedEvent>;\n\n\treadonly onDidOpenWindow: Event<ICodeWindow>;\n\treadonly onDidSignalReadyWindow: Event<ICodeWindow>;\n\treadonly onDidDestroyWindow: Event<ICodeWindow>;\n\n\topen(openConfig: IOpenConfiguration): ICodeWindow[];\n\topenEmptyWindow(openConfig: IOpenEmptyConfiguration, options?: IOpenEmptyWindowOptions): ICodeWindow[];\n\topenExtensionDevelopmentHostWindow(extensionDevelopmentPath: string[], openConfig: IOpenConfiguration): ICodeWindow[];\n\n\tsendToFocused(channel: string, ...args: any[]): void;\n\tsendToAll(channel: string, payload?: any, windowIdsToIgnore?: number[]): void;\n\n\tgetWindows(): ICodeWindow[];\n\tgetWindowCount(): number;\n\n\tgetFocusedWindow(): ICodeWindow | undefined;\n\tgetLastActiveWindow(): ICodeWindow | undefined;\n\n\tgetWindowById(windowId: number): ICodeWindow | undefined;\n\tgetWindowByWebContents(webContents: WebContents): ICodeWindow | undefined;\n}\n\nexport interface IBaseOpenConfiguration {\n\treadonly context: OpenContext;\n\treadonly contextWindowId?: number;\n}\n\nexport interface IOpenConfiguration extends IBaseOpenConfiguration {\n\treadonly cli: NativeParsedArgs;\n\treadonly userEnv?: IProcessEnvironment;\n\treadonly urisToOpen?: IWindowOpenable[];\n\treadonly waitMarkerFileURI?: URI;\n\treadonly preferNewWindow?: boolean;\n\treadonly forceNewWindow?: boolean;\n\treadonly forceNewTabbedWindow?: boolean;\n\treadonly forceReuseWindow?: boolean;\n\treadonly forceEmpty?: boolean;\n\treadonly diffMode?: boolean;\n\taddMode?: boolean;\n\treadonly gotoLineMode?: boolean;\n\treadonly initialStartup?: boolean;\n\treadonly noRecentEntry?: boolean;\n\t/**\n\t * The remote authority to use when windows are opened with either\n\t * - no workspace (empty window)\n\t * - a workspace that is neither `file://` nor `vscode-remote://`\n\t */\n\treadonly remoteAuthority?: string;\n}\n\nexport interface IOpenEmptyConfiguration extends IBaseOpenConfiguration { }\n"]}