{"version":3,"sources":["vs/platform/windows/electron-main/windowsMainService.ts"],"names":[],"mappings":"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","file":"windowsMainService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { statSync } from 'fs';\nimport { release, hostname } from 'os';\nimport product from 'vs/platform/product/common/product';\nimport { mark, getMarks } from 'vs/base/common/performance';\nimport { basename, normalize, join, posix } from 'vs/base/common/path';\nimport { localize } from 'vs/nls';\nimport { coalesce, distinct, firstOrDefault } from 'vs/base/common/arrays';\nimport { IBackupMainService } from 'vs/platform/backup/electron-main/backup';\nimport { IEmptyWindowBackupInfo } from 'vs/platform/backup/node/backup';\nimport { IEnvironmentMainService } from 'vs/platform/environment/electron-main/environmentMainService';\nimport { NativeParsedArgs } from 'vs/platform/environment/common/argv';\nimport { IStateService } from 'vs/platform/state/node/state';\nimport { CodeWindow } from 'vs/platform/windows/electron-main/window';\nimport { app, BrowserWindow, MessageBoxOptions, nativeTheme, WebContents } from 'electron';\nimport { ILifecycleMainService, UnloadReason } from 'vs/platform/lifecycle/electron-main/lifecycleMainService';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IWindowSettings, IPath, isFileToOpen, isWorkspaceToOpen, isFolderToOpen, IWindowOpenable, IOpenEmptyWindowOptions, IAddFoldersRequest, IPathsToWaitFor, INativeWindowConfiguration, INativeOpenFileRequest } from 'vs/platform/windows/common/windows';\nimport { findWindowOnFile, findWindowOnWorkspaceOrFolder, findWindowOnExtensionDevelopmentPath } from 'vs/platform/windows/electron-main/windowsFinder';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IWindowsMainService, IOpenConfiguration, IWindowsCountChangedEvent, ICodeWindow, IOpenEmptyConfiguration, OpenContext } from 'vs/platform/windows/electron-main/windows';\nimport { IWorkspacesHistoryMainService } from 'vs/platform/workspaces/electron-main/workspacesHistoryMainService';\nimport { IProcessEnvironment, isMacintosh } from 'vs/base/common/platform';\nimport { IWorkspaceIdentifier, hasWorkspaceFileExtension, IRecent, isWorkspaceIdentifier, isSingleFolderWorkspaceIdentifier, ISingleFolderWorkspaceIdentifier } from 'vs/platform/workspaces/common/workspaces';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { Schemas } from 'vs/base/common/network';\nimport { URI } from 'vs/base/common/uri';\nimport { normalizePath, originalFSPath, removeTrailingPathSeparator, extUriBiasedIgnorePathCase } from 'vs/base/common/resources';\nimport { getRemoteAuthority } from 'vs/platform/remote/common/remoteHosts';\nimport { IWindowState, WindowsStateHandler } from 'vs/platform/windows/electron-main/windowsStateHandler';\nimport { getSingleFolderWorkspaceIdentifier, getWorkspaceIdentifier, IWorkspacesManagementMainService } from 'vs/platform/workspaces/electron-main/workspacesManagementMainService';\nimport { once } from 'vs/base/common/functional';\nimport { Disposable, DisposableStore } from 'vs/base/common/lifecycle';\nimport { IDialogMainService } from 'vs/platform/dialogs/electron-main/dialogMainService';\nimport { assertIsDefined, withNullAsUndefined } from 'vs/base/common/types';\nimport { isWindowsDriveLetter, toSlashes, parseLineAndColumnAware, sanitizeFilePath } from 'vs/base/common/extpath';\nimport { CharCode } from 'vs/base/common/charCode';\nimport { getPathLabel } from 'vs/base/common/labels';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { cwd } from 'vs/base/common/process';\nimport { IProtocolMainService } from 'vs/platform/protocol/electron-main/protocol';\n\n//#region Helper Interfaces\n\ntype RestoreWindowsSetting = 'preserve' | 'all' | 'folders' | 'one' | 'none';\n\ninterface IOpenBrowserWindowOptions {\n\treadonly userEnv?: IProcessEnvironment;\n\treadonly cli?: NativeParsedArgs;\n\n\treadonly workspace?: IWorkspaceIdentifier | ISingleFolderWorkspaceIdentifier;\n\n\treadonly remoteAuthority?: string;\n\n\treadonly initialStartup?: boolean;\n\n\treadonly filesToOpen?: IFilesToOpen;\n\n\treadonly forceNewWindow?: boolean;\n\treadonly forceNewTabbedWindow?: boolean;\n\treadonly windowToUse?: ICodeWindow;\n\n\treadonly emptyWindowBackupInfo?: IEmptyWindowBackupInfo;\n}\n\ninterface IPathResolveOptions {\n\treadonly ignoreFileNotFound?: boolean;\n\treadonly gotoLineMode?: boolean;\n\treadonly forceOpenWorkspaceAsFile?: boolean;\n\t/**\n\t * The remoteAuthority to use if the URL to open is neither file nor vscode-remote\n\t */\n\treadonly remoteAuthority?: string;\n}\n\ninterface IFilesToOpen {\n\treadonly remoteAuthority?: string;\n\n\tfilesToOpenOrCreate: IPath[];\n\tfilesToDiff: IPath[];\n\tfilesToWait?: IPathsToWaitFor;\n}\n\ninterface IPathToOpen extends IPath {\n\n\t// the workspace to open\n\treadonly workspace?: IWorkspaceIdentifier | ISingleFolderWorkspaceIdentifier;\n\n\t// the backup path to use\n\treadonly backupPath?: string;\n\n\t// the remote authority for the Code instance to open. Undefined if not remote.\n\treadonly remoteAuthority?: string;\n\n\t// optional label for the recent history\n\tlabel?: string;\n}\n\ninterface IWorkspacePathToOpen extends IPathToOpen {\n\treadonly workspace: IWorkspaceIdentifier;\n}\n\ninterface ISingleFolderWorkspacePathToOpen extends IPathToOpen {\n\treadonly workspace: ISingleFolderWorkspaceIdentifier;\n}\n\nfunction isWorkspacePathToOpen(path: IPathToOpen | undefined): path is IWorkspacePathToOpen {\n\treturn isWorkspaceIdentifier(path?.workspace);\n}\n\nfunction isSingleFolderWorkspacePathToOpen(path: IPathToOpen | undefined): path is ISingleFolderWorkspacePathToOpen {\n\treturn isSingleFolderWorkspaceIdentifier(path?.workspace);\n}\n\n//#endregion\n\nexport class WindowsMainService extends Disposable implements IWindowsMainService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate static readonly WINDOWS: ICodeWindow[] = [];\n\n\tprivate readonly _onDidOpenWindow = this._register(new Emitter<ICodeWindow>());\n\treadonly onDidOpenWindow = this._onDidOpenWindow.event;\n\n\tprivate readonly _onDidSignalReadyWindow = this._register(new Emitter<ICodeWindow>());\n\treadonly onDidSignalReadyWindow = this._onDidSignalReadyWindow.event;\n\n\tprivate readonly _onDidDestroyWindow = this._register(new Emitter<ICodeWindow>());\n\treadonly onDidDestroyWindow = this._onDidDestroyWindow.event;\n\n\tprivate readonly _onDidChangeWindowsCount = this._register(new Emitter<IWindowsCountChangedEvent>());\n\treadonly onDidChangeWindowsCount = this._onDidChangeWindowsCount.event;\n\n\tprivate readonly windowsStateHandler = this._register(new WindowsStateHandler(this, this.stateService, this.lifecycleMainService, this.logService, this.configurationService));\n\n\tconstructor(\n\t\tprivate readonly machineId: string,\n\t\tprivate readonly initialUserEnv: IProcessEnvironment,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IStateService private readonly stateService: IStateService,\n\t\t@IEnvironmentMainService private readonly environmentMainService: IEnvironmentMainService,\n\t\t@ILifecycleMainService private readonly lifecycleMainService: ILifecycleMainService,\n\t\t@IBackupMainService private readonly backupMainService: IBackupMainService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IWorkspacesHistoryMainService private readonly workspacesHistoryMainService: IWorkspacesHistoryMainService,\n\t\t@IWorkspacesManagementMainService private readonly workspacesManagementMainService: IWorkspacesManagementMainService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IDialogMainService private readonly dialogMainService: IDialogMainService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IProtocolMainService private readonly protocolMainService: IProtocolMainService\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Signal a window is ready after having entered a workspace\n\t\tthis._register(this.workspacesManagementMainService.onDidEnterWorkspace(event => this._onDidSignalReadyWindow.fire(event.window)));\n\n\t\t// Update valid roots in protocol service for extension dev windows\n\t\tthis._register(this.onDidSignalReadyWindow(window => {\n\t\t\tif (window.config?.extensionDevelopmentPath || window.config?.extensionTestsPath) {\n\t\t\t\tconst disposables = new DisposableStore();\n\t\t\t\tdisposables.add(Event.any(window.onDidClose, window.onDidDestroy)(() => disposables.dispose()));\n\n\t\t\t\t// Allow access to extension development path\n\t\t\t\tif (window.config.extensionDevelopmentPath) {\n\t\t\t\t\tfor (const extensionDevelopmentPath of window.config.extensionDevelopmentPath) {\n\t\t\t\t\t\tdisposables.add(this.protocolMainService.addValidFileRoot(URI.file(extensionDevelopmentPath)));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Allow access to extension tests path\n\t\t\t\tif (window.config.extensionTestsPath) {\n\t\t\t\t\tdisposables.add(this.protocolMainService.addValidFileRoot(URI.file(window.config.extensionTestsPath)));\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t}\n\n\topenEmptyWindow(openConfig: IOpenEmptyConfiguration, options?: IOpenEmptyWindowOptions): ICodeWindow[] {\n\t\tlet cli = this.environmentMainService.args;\n\t\tconst remoteAuthority = options?.remoteAuthority || undefined;\n\t\tconst forceEmpty = true;\n\t\tconst forceReuseWindow = options?.forceReuseWindow;\n\t\tconst forceNewWindow = !forceReuseWindow;\n\n\t\treturn this.open({ ...openConfig, cli, forceEmpty, forceNewWindow, forceReuseWindow, remoteAuthority });\n\t}\n\n\topen(openConfig: IOpenConfiguration): ICodeWindow[] {\n\t\tthis.logService.trace('windowsManager#open');\n\n\t\tif (openConfig.addMode && (openConfig.initialStartup || !this.getLastActiveWindow())) {\n\t\t\topenConfig.addMode = false; // Make sure addMode is only enabled if we have an active window\n\t\t}\n\n\t\tconst foldersToAdd: ISingleFolderWorkspacePathToOpen[] = [];\n\t\tconst foldersToOpen: ISingleFolderWorkspacePathToOpen[] = [];\n\t\tconst workspacesToOpen: IWorkspacePathToOpen[] = [];\n\t\tconst workspacesToRestore: IWorkspacePathToOpen[] = [];\n\t\tconst emptyToRestore: IEmptyWindowBackupInfo[] = [];\n\t\tlet filesToOpen: IFilesToOpen | undefined;\n\t\tlet emptyToOpen = 0;\n\n\t\t// Identify things to open from open config\n\t\tconst pathsToOpen = this.getPathsToOpen(openConfig);\n\t\tthis.logService.trace('windowsManager#open pathsToOpen', pathsToOpen);\n\t\tfor (const path of pathsToOpen) {\n\t\t\tif (isSingleFolderWorkspacePathToOpen(path)) {\n\t\t\t\tif (openConfig.addMode) {\n\t\t\t\t\t// When run with --add, take the folders that are to be opened as\n\t\t\t\t\t// folders that should be added to the currently active window.\n\t\t\t\t\tfoldersToAdd.push(path);\n\t\t\t\t} else {\n\t\t\t\t\tfoldersToOpen.push(path);\n\t\t\t\t}\n\t\t\t} else if (isWorkspacePathToOpen(path)) {\n\t\t\t\tworkspacesToOpen.push(path);\n\t\t\t} else if (path.fileUri) {\n\t\t\t\tif (!filesToOpen) {\n\t\t\t\t\tfilesToOpen = { filesToOpenOrCreate: [], filesToDiff: [], remoteAuthority: path.remoteAuthority };\n\t\t\t\t}\n\t\t\t\tfilesToOpen.filesToOpenOrCreate.push(path);\n\t\t\t} else if (path.backupPath) {\n\t\t\t\temptyToRestore.push({ backupFolder: basename(path.backupPath), remoteAuthority: path.remoteAuthority });\n\t\t\t} else {\n\t\t\t\temptyToOpen++;\n\t\t\t}\n\t\t}\n\n\t\t// When run with --diff, take the files to open as files to diff\n\t\t// if there are exactly two files provided.\n\t\tif (openConfig.diffMode && filesToOpen?.filesToOpenOrCreate.length === 2) {\n\t\t\tfilesToOpen.filesToDiff = filesToOpen.filesToOpenOrCreate;\n\t\t\tfilesToOpen.filesToOpenOrCreate = [];\n\t\t}\n\n\t\t// When run with --wait, make sure we keep the paths to wait for\n\t\tif (filesToOpen && openConfig.waitMarkerFileURI) {\n\t\t\tfilesToOpen.filesToWait = { paths: [...filesToOpen.filesToDiff, ...filesToOpen.filesToOpenOrCreate], waitMarkerFileUri: openConfig.waitMarkerFileURI };\n\t\t}\n\n\t\t// These are windows to restore because of hot-exit or from previous session (only performed once on startup!)\n\t\tif (openConfig.initialStartup) {\n\n\t\t\t// Untitled workspaces are always restored\n\t\t\tworkspacesToRestore.push(...this.workspacesManagementMainService.getUntitledWorkspacesSync());\n\t\t\tworkspacesToOpen.push(...workspacesToRestore);\n\n\t\t\t// Empty windows with backups are always restored\n\t\t\temptyToRestore.push(...this.backupMainService.getEmptyWindowBackupPaths());\n\t\t} else {\n\t\t\temptyToRestore.length = 0;\n\t\t}\n\n\t\t// Open based on config\n\t\tconst { windows: usedWindows, filesOpenedInWindow } = this.doOpen(openConfig, workspacesToOpen, foldersToOpen, emptyToRestore, emptyToOpen, filesToOpen, foldersToAdd);\n\n\t\tthis.logService.trace(`windowsManager#open used window count ${usedWindows.length} (workspacesToOpen: ${workspacesToOpen.length}, foldersToOpen: ${foldersToOpen.length}, emptyToRestore: ${emptyToRestore.length}, emptyToOpen: ${emptyToOpen})`);\n\n\t\t// Make sure to pass focus to the most relevant of the windows if we open multiple\n\t\tif (usedWindows.length > 1) {\n\n\t\t\t// 1.) focus window we opened files in always with highest priority\n\t\t\tif (filesOpenedInWindow) {\n\t\t\t\tfilesOpenedInWindow.focus();\n\t\t\t}\n\n\t\t\t// Otherwise, find a good window based on open params\n\t\t\telse {\n\t\t\t\tconst focusLastActive = this.windowsStateHandler.state.lastActiveWindow && !openConfig.forceEmpty && !openConfig.cli._.length && !openConfig.cli['file-uri'] && !openConfig.cli['folder-uri'] && !(openConfig.urisToOpen && openConfig.urisToOpen.length);\n\t\t\t\tlet focusLastOpened = true;\n\t\t\t\tlet focusLastWindow = true;\n\n\t\t\t\t// 2.) focus last active window if we are not instructed to open any paths\n\t\t\t\tif (focusLastActive) {\n\t\t\t\t\tconst lastActiveWindow = usedWindows.filter(window => this.windowsStateHandler.state.lastActiveWindow && window.backupPath === this.windowsStateHandler.state.lastActiveWindow.backupPath);\n\t\t\t\t\tif (lastActiveWindow.length) {\n\t\t\t\t\t\tlastActiveWindow[0].focus();\n\t\t\t\t\t\tfocusLastOpened = false;\n\t\t\t\t\t\tfocusLastWindow = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// 3.) if instructed to open paths, focus last window which is not restored\n\t\t\t\tif (focusLastOpened) {\n\t\t\t\t\tfor (let i = usedWindows.length - 1; i >= 0; i--) {\n\t\t\t\t\t\tconst usedWindow = usedWindows[i];\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(usedWindow.openedWorkspace && workspacesToRestore.some(workspace => usedWindow.openedWorkspace && workspace.workspace.id === usedWindow.openedWorkspace.id)) ||\t// skip over restored workspace\n\t\t\t\t\t\t\t(usedWindow.backupPath && emptyToRestore.some(empty => usedWindow.backupPath && empty.backupFolder === basename(usedWindow.backupPath)))\t\t\t\t\t\t\t// skip over restored empty window\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tusedWindow.focus();\n\t\t\t\t\t\tfocusLastWindow = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// 4.) finally, always ensure to have at least last used window focused\n\t\t\t\tif (focusLastWindow) {\n\t\t\t\t\tusedWindows[usedWindows.length - 1].focus();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Remember in recent document list (unless this opens for extension development)\n\t\t// Also do not add paths when files are opened for diffing, only if opened individually\n\t\tconst isDiff = filesToOpen && filesToOpen.filesToDiff.length > 0;\n\t\tif (!usedWindows.some(window => window.isExtensionDevelopmentHost) && !isDiff && !openConfig.noRecentEntry) {\n\t\t\tconst recents: IRecent[] = [];\n\t\t\tfor (const pathToOpen of pathsToOpen) {\n\t\t\t\tif (isWorkspacePathToOpen(pathToOpen)) {\n\t\t\t\t\trecents.push({ label: pathToOpen.label, workspace: pathToOpen.workspace, remoteAuthority: pathToOpen.remoteAuthority });\n\t\t\t\t} else if (isSingleFolderWorkspacePathToOpen(pathToOpen)) {\n\t\t\t\t\trecents.push({ label: pathToOpen.label, folderUri: pathToOpen.workspace.uri, remoteAuthority: pathToOpen.remoteAuthority });\n\t\t\t\t} else if (pathToOpen.fileUri) {\n\t\t\t\t\trecents.push({ label: pathToOpen.label, fileUri: pathToOpen.fileUri, remoteAuthority: pathToOpen.remoteAuthority });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.workspacesHistoryMainService.addRecentlyOpened(recents);\n\t\t}\n\n\t\t// If we got started with --wait from the CLI, we need to signal to the outside when the window\n\t\t// used for the edit operation is closed or loaded to a different folder so that the waiting\n\t\t// process can continue. We do this by deleting the waitMarkerFilePath.\n\t\tconst waitMarkerFileURI = openConfig.waitMarkerFileURI;\n\t\tif (openConfig.context === OpenContext.CLI && waitMarkerFileURI && usedWindows.length === 1 && usedWindows[0]) {\n\t\t\t(async () => {\n\t\t\t\tawait usedWindows[0].whenClosedOrLoaded;\n\n\t\t\t\ttry {\n\t\t\t\t\tawait this.fileService.del(waitMarkerFileURI);\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// ignore - could have been deleted from the window already\n\t\t\t\t}\n\t\t\t})();\n\t\t}\n\n\t\treturn usedWindows;\n\t}\n\n\tprivate doOpen(\n\t\topenConfig: IOpenConfiguration,\n\t\tworkspacesToOpen: IWorkspacePathToOpen[],\n\t\tfoldersToOpen: ISingleFolderWorkspacePathToOpen[],\n\t\temptyToRestore: IEmptyWindowBackupInfo[],\n\t\temptyToOpen: number,\n\t\tfilesToOpen: IFilesToOpen | undefined,\n\t\tfoldersToAdd: ISingleFolderWorkspacePathToOpen[]\n\t): { windows: ICodeWindow[], filesOpenedInWindow: ICodeWindow | undefined } {\n\n\t\t// Keep track of used windows and remember\n\t\t// if files have been opened in one of them\n\t\tconst usedWindows: ICodeWindow[] = [];\n\t\tlet filesOpenedInWindow: ICodeWindow | undefined = undefined;\n\t\tfunction addUsedWindow(window: ICodeWindow, openedFiles?: boolean): void {\n\t\t\tusedWindows.push(window);\n\n\t\t\tif (openedFiles) {\n\t\t\t\tfilesOpenedInWindow = window;\n\t\t\t\tfilesToOpen = undefined; // reset `filesToOpen` since files have been opened\n\t\t\t}\n\t\t}\n\n\t\t// Settings can decide if files/folders open in new window or not\n\t\tlet { openFolderInNewWindow, openFilesInNewWindow } = this.shouldOpenNewWindow(openConfig);\n\n\t\t// Handle folders to add by looking for the last active workspace (not on initial startup)\n\t\tif (!openConfig.initialStartup && foldersToAdd.length > 0) {\n\t\t\tconst authority = foldersToAdd[0].remoteAuthority;\n\t\t\tconst lastActiveWindow = this.getLastActiveWindowForAuthority(authority);\n\t\t\tif (lastActiveWindow) {\n\t\t\t\taddUsedWindow(this.doAddFoldersToExistingWindow(lastActiveWindow, foldersToAdd.map(folderToAdd => folderToAdd.workspace.uri)));\n\t\t\t}\n\t\t}\n\n\t\t// Handle files to open/diff or to create when we dont open a folder and we do not restore any\n\t\t// folder/untitled from hot-exit by trying to open them in the window that fits best\n\t\tconst potentialNewWindowsCount = foldersToOpen.length + workspacesToOpen.length + emptyToRestore.length;\n\t\tif (filesToOpen && potentialNewWindowsCount === 0) {\n\n\t\t\t// Find suitable window or folder path to open files in\n\t\t\tconst fileToCheck = filesToOpen.filesToOpenOrCreate[0] || filesToOpen.filesToDiff[0];\n\n\t\t\t// only look at the windows with correct authority\n\t\t\tconst windows = this.getWindows().filter(window => filesToOpen && window.remoteAuthority === filesToOpen.remoteAuthority);\n\n\t\t\t// figure out a good window to open the files in if any\n\t\t\t// with a fallback to the last active window.\n\t\t\t//\n\t\t\t// in case `openFilesInNewWindow` is enforced, we skip\n\t\t\t// this step.\n\t\t\tlet windowToUseForFiles: ICodeWindow | undefined = undefined;\n\t\t\tif (fileToCheck?.fileUri && !openFilesInNewWindow) {\n\t\t\t\tif (openConfig.context === OpenContext.DESKTOP || openConfig.context === OpenContext.CLI || openConfig.context === OpenContext.DOCK) {\n\t\t\t\t\twindowToUseForFiles = findWindowOnFile(windows, fileToCheck.fileUri, workspace => workspace.configPath.scheme === Schemas.file ? this.workspacesManagementMainService.resolveLocalWorkspaceSync(workspace.configPath) : null);\n\t\t\t\t}\n\n\t\t\t\tif (!windowToUseForFiles) {\n\t\t\t\t\twindowToUseForFiles = this.doGetLastActiveWindow(windows);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// We found a window to open the files in\n\t\t\tif (windowToUseForFiles) {\n\n\t\t\t\t// Window is workspace\n\t\t\t\tif (isWorkspaceIdentifier(windowToUseForFiles.openedWorkspace)) {\n\t\t\t\t\tworkspacesToOpen.push({ workspace: windowToUseForFiles.openedWorkspace, remoteAuthority: windowToUseForFiles.remoteAuthority });\n\t\t\t\t}\n\n\t\t\t\t// Window is single folder\n\t\t\t\telse if (isSingleFolderWorkspaceIdentifier(windowToUseForFiles.openedWorkspace)) {\n\t\t\t\t\tfoldersToOpen.push({ workspace: windowToUseForFiles.openedWorkspace, remoteAuthority: windowToUseForFiles.remoteAuthority });\n\t\t\t\t}\n\n\t\t\t\t// Window is empty\n\t\t\t\telse {\n\t\t\t\t\taddUsedWindow(this.doOpenFilesInExistingWindow(openConfig, windowToUseForFiles, filesToOpen), true);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Finally, if no window or folder is found, just open the files in an empty window\n\t\t\telse {\n\t\t\t\taddUsedWindow(this.openInBrowserWindow({\n\t\t\t\t\tuserEnv: openConfig.userEnv,\n\t\t\t\t\tcli: openConfig.cli,\n\t\t\t\t\tinitialStartup: openConfig.initialStartup,\n\t\t\t\t\tfilesToOpen,\n\t\t\t\t\tforceNewWindow: true,\n\t\t\t\t\tremoteAuthority: filesToOpen.remoteAuthority,\n\t\t\t\t\tforceNewTabbedWindow: openConfig.forceNewTabbedWindow\n\t\t\t\t}), true);\n\t\t\t}\n\t\t}\n\n\t\t// Handle workspaces to open (instructed and to restore)\n\t\tconst allWorkspacesToOpen = distinct(workspacesToOpen, workspace => workspace.workspace.id); // prevent duplicates\n\t\tif (allWorkspacesToOpen.length > 0) {\n\n\t\t\t// Check for existing instances\n\t\t\tconst windowsOnWorkspace = coalesce(allWorkspacesToOpen.map(workspaceToOpen => findWindowOnWorkspaceOrFolder(this.getWindows(), workspaceToOpen.workspace.configPath)));\n\t\t\tif (windowsOnWorkspace.length > 0) {\n\t\t\t\tconst windowOnWorkspace = windowsOnWorkspace[0];\n\t\t\t\tconst filesToOpenInWindow = (filesToOpen?.remoteAuthority === windowOnWorkspace.remoteAuthority) ? filesToOpen : undefined;\n\n\t\t\t\t// Do open files\n\t\t\t\taddUsedWindow(this.doOpenFilesInExistingWindow(openConfig, windowOnWorkspace, filesToOpenInWindow), !!filesToOpenInWindow);\n\n\t\t\t\topenFolderInNewWindow = true; // any other folders to open must open in new window then\n\t\t\t}\n\n\t\t\t// Open remaining ones\n\t\t\tallWorkspacesToOpen.forEach(workspaceToOpen => {\n\t\t\t\tif (windowsOnWorkspace.some(window => window.openedWorkspace && window.openedWorkspace.id === workspaceToOpen.workspace.id)) {\n\t\t\t\t\treturn; // ignore folders that are already open\n\t\t\t\t}\n\n\t\t\t\tconst remoteAuthority = workspaceToOpen.remoteAuthority;\n\t\t\t\tconst filesToOpenInWindow = (filesToOpen?.remoteAuthority === remoteAuthority) ? filesToOpen : undefined;\n\n\t\t\t\t// Do open folder\n\t\t\t\taddUsedWindow(this.doOpenFolderOrWorkspace(openConfig, workspaceToOpen, openFolderInNewWindow, filesToOpenInWindow), !!filesToOpenInWindow);\n\n\t\t\t\topenFolderInNewWindow = true; // any other folders to open must open in new window then\n\t\t\t});\n\t\t}\n\n\t\t// Handle folders to open (instructed and to restore)\n\t\tconst allFoldersToOpen = distinct(foldersToOpen, folder => extUriBiasedIgnorePathCase.getComparisonKey(folder.workspace.uri)); // prevent duplicates\n\t\tif (allFoldersToOpen.length > 0) {\n\n\t\t\t// Check for existing instances\n\t\t\tconst windowsOnFolderPath = coalesce(allFoldersToOpen.map(folderToOpen => findWindowOnWorkspaceOrFolder(this.getWindows(), folderToOpen.workspace.uri)));\n\t\t\tif (windowsOnFolderPath.length > 0) {\n\t\t\t\tconst windowOnFolderPath = windowsOnFolderPath[0];\n\t\t\t\tconst filesToOpenInWindow = filesToOpen?.remoteAuthority === windowOnFolderPath.remoteAuthority ? filesToOpen : undefined;\n\n\t\t\t\t// Do open files\n\t\t\t\taddUsedWindow(this.doOpenFilesInExistingWindow(openConfig, windowOnFolderPath, filesToOpenInWindow), !!filesToOpenInWindow);\n\n\t\t\t\topenFolderInNewWindow = true; // any other folders to open must open in new window then\n\t\t\t}\n\n\t\t\t// Open remaining ones\n\t\t\tallFoldersToOpen.forEach(folderToOpen => {\n\t\t\t\tif (windowsOnFolderPath.some(window => isSingleFolderWorkspaceIdentifier(window.openedWorkspace) && extUriBiasedIgnorePathCase.isEqual(window.openedWorkspace.uri, folderToOpen.workspace.uri))) {\n\t\t\t\t\treturn; // ignore folders that are already open\n\t\t\t\t}\n\n\t\t\t\tconst remoteAuthority = folderToOpen.remoteAuthority;\n\t\t\t\tconst filesToOpenInWindow = (filesToOpen?.remoteAuthority === remoteAuthority) ? filesToOpen : undefined;\n\n\t\t\t\t// Do open folder\n\t\t\t\taddUsedWindow(this.doOpenFolderOrWorkspace(openConfig, folderToOpen, openFolderInNewWindow, filesToOpenInWindow), !!filesToOpenInWindow);\n\n\t\t\t\topenFolderInNewWindow = true; // any other folders to open must open in new window then\n\t\t\t});\n\t\t}\n\n\t\t// Handle empty to restore\n\t\tconst allEmptyToRestore = distinct(emptyToRestore, info => info.backupFolder); // prevent duplicates\n\t\tif (allEmptyToRestore.length > 0) {\n\t\t\tallEmptyToRestore.forEach(emptyWindowBackupInfo => {\n\t\t\t\tconst remoteAuthority = emptyWindowBackupInfo.remoteAuthority;\n\t\t\t\tconst filesToOpenInWindow = (filesToOpen?.remoteAuthority === remoteAuthority) ? filesToOpen : undefined;\n\n\t\t\t\taddUsedWindow(this.openInBrowserWindow({\n\t\t\t\t\tuserEnv: openConfig.userEnv,\n\t\t\t\t\tcli: openConfig.cli,\n\t\t\t\t\tinitialStartup: openConfig.initialStartup,\n\t\t\t\t\tfilesToOpen: filesToOpenInWindow,\n\t\t\t\t\tremoteAuthority,\n\t\t\t\t\tforceNewWindow: true,\n\t\t\t\t\tforceNewTabbedWindow: openConfig.forceNewTabbedWindow,\n\t\t\t\t\temptyWindowBackupInfo\n\t\t\t\t}), !!filesToOpenInWindow);\n\n\t\t\t\topenFolderInNewWindow = true; // any other folders to open must open in new window then\n\t\t\t});\n\t\t}\n\n\t\t// Handle empty to open (only if no other window opened)\n\t\tif (usedWindows.length === 0 || filesToOpen) {\n\t\t\tif (filesToOpen && !emptyToOpen) {\n\t\t\t\temptyToOpen++;\n\t\t\t}\n\n\t\t\tconst remoteAuthority = filesToOpen ? filesToOpen.remoteAuthority : openConfig.remoteAuthority;\n\n\t\t\tfor (let i = 0; i < emptyToOpen; i++) {\n\t\t\t\taddUsedWindow(this.doOpenEmpty(openConfig, openFolderInNewWindow, remoteAuthority, filesToOpen), !!filesToOpen);\n\n\t\t\t\t// any other window to open must open in new window then\n\t\t\t\topenFolderInNewWindow = true;\n\t\t\t}\n\t\t}\n\n\t\treturn { windows: distinct(usedWindows), filesOpenedInWindow };\n\t}\n\n\tprivate doOpenFilesInExistingWindow(configuration: IOpenConfiguration, window: ICodeWindow, filesToOpen?: IFilesToOpen): ICodeWindow {\n\t\tthis.logService.trace('windowsManager#doOpenFilesInExistingWindow');\n\n\t\twindow.focus(); // make sure window has focus\n\n\t\tconst params: INativeOpenFileRequest = {\n\t\t\tfilesToOpenOrCreate: filesToOpen?.filesToOpenOrCreate,\n\t\t\tfilesToDiff: filesToOpen?.filesToDiff,\n\t\t\tfilesToWait: filesToOpen?.filesToWait,\n\t\t\ttermProgram: configuration?.userEnv?.['TERM_PROGRAM']\n\t\t};\n\t\twindow.sendWhenReady('vscode:openFiles', CancellationToken.None, params);\n\n\t\treturn window;\n\t}\n\n\tprivate doAddFoldersToExistingWindow(window: ICodeWindow, foldersToAdd: URI[]): ICodeWindow {\n\t\tthis.logService.trace('windowsManager#doAddFoldersToExistingWindow');\n\n\t\twindow.focus(); // make sure window has focus\n\n\t\tconst request: IAddFoldersRequest = { foldersToAdd };\n\t\twindow.sendWhenReady('vscode:addFolders', CancellationToken.None, request);\n\n\t\treturn window;\n\t}\n\n\tprivate doOpenEmpty(openConfig: IOpenConfiguration, forceNewWindow: boolean, remoteAuthority: string | undefined, filesToOpen: IFilesToOpen | undefined, windowToUse?: ICodeWindow): ICodeWindow {\n\t\tif (!forceNewWindow && !windowToUse && typeof openConfig.contextWindowId === 'number') {\n\t\t\twindowToUse = this.getWindowById(openConfig.contextWindowId); // fix for https://github.com/microsoft/vscode/issues/97172\n\t\t}\n\n\t\treturn this.openInBrowserWindow({\n\t\t\tuserEnv: openConfig.userEnv,\n\t\t\tcli: openConfig.cli,\n\t\t\tinitialStartup: openConfig.initialStartup,\n\t\t\tremoteAuthority,\n\t\t\tforceNewWindow,\n\t\t\tforceNewTabbedWindow: openConfig.forceNewTabbedWindow,\n\t\t\tfilesToOpen,\n\t\t\twindowToUse\n\t\t});\n\t}\n\n\tprivate doOpenFolderOrWorkspace(openConfig: IOpenConfiguration, folderOrWorkspace: IWorkspacePathToOpen | ISingleFolderWorkspacePathToOpen, forceNewWindow: boolean, filesToOpen: IFilesToOpen | undefined, windowToUse?: ICodeWindow): ICodeWindow {\n\t\tif (!forceNewWindow && !windowToUse && typeof openConfig.contextWindowId === 'number') {\n\t\t\twindowToUse = this.getWindowById(openConfig.contextWindowId); // fix for https://github.com/microsoft/vscode/issues/49587\n\t\t}\n\n\t\treturn this.openInBrowserWindow({\n\t\t\tworkspace: folderOrWorkspace.workspace,\n\t\t\tuserEnv: openConfig.userEnv,\n\t\t\tcli: openConfig.cli,\n\t\t\tinitialStartup: openConfig.initialStartup,\n\t\t\tremoteAuthority: folderOrWorkspace.remoteAuthority,\n\t\t\tforceNewWindow,\n\t\t\tforceNewTabbedWindow: openConfig.forceNewTabbedWindow,\n\t\t\tfilesToOpen,\n\t\t\twindowToUse\n\t\t});\n\t}\n\n\tprivate getPathsToOpen(openConfig: IOpenConfiguration): IPathToOpen[] {\n\t\tlet pathsToOpen: IPathToOpen[];\n\t\tlet isCommandLineOrAPICall = false;\n\t\tlet restoredWindows = false;\n\n\t\t// Extract paths: from API\n\t\tif (openConfig.urisToOpen && openConfig.urisToOpen.length > 0) {\n\t\t\tpathsToOpen = this.doExtractPathsFromAPI(openConfig);\n\t\t\tisCommandLineOrAPICall = true;\n\t\t}\n\n\t\t// Check for force empty\n\t\telse if (openConfig.forceEmpty) {\n\t\t\tpathsToOpen = [Object.create(null)];\n\t\t}\n\n\t\t// Extract paths: from CLI\n\t\telse if (openConfig.cli._.length || openConfig.cli['folder-uri'] || openConfig.cli['file-uri']) {\n\t\t\tpathsToOpen = this.doExtractPathsFromCLI(openConfig.cli);\n\t\t\tif (pathsToOpen.length === 0) {\n\t\t\t\tpathsToOpen.push(Object.create(null)); // add an empty window if we did not have windows to open from command line\n\t\t\t}\n\n\t\t\tisCommandLineOrAPICall = true;\n\t\t}\n\n\t\t// Extract paths: from previous session\n\t\telse {\n\t\t\tpathsToOpen = this.doGetPathsFromLastSession();\n\t\t\tif (pathsToOpen.length === 0) {\n\t\t\t\tpathsToOpen.push(Object.create(null)); // add an empty window if we did not have windows to restore\n\t\t\t}\n\n\t\t\trestoredWindows = true;\n\t\t}\n\n\t\t// Convert multiple folders into workspace (if opened via API or CLI)\n\t\t// This will ensure to open these folders in one window instead of multiple\n\t\t// If we are in `addMode`, we should not do this because in that case all\n\t\t// folders should be added to the existing window.\n\t\tif (!openConfig.addMode && isCommandLineOrAPICall) {\n\t\t\tconst foldersToOpen = pathsToOpen.filter(path => isSingleFolderWorkspacePathToOpen(path)) as ISingleFolderWorkspacePathToOpen[];\n\t\t\tif (foldersToOpen.length > 1) {\n\t\t\t\tconst remoteAuthority = foldersToOpen[0].remoteAuthority;\n\t\t\t\tif (foldersToOpen.every(folderToOpen => folderToOpen.remoteAuthority === remoteAuthority)) { // only if all folder have the same authority\n\t\t\t\t\tconst workspace = this.workspacesManagementMainService.createUntitledWorkspaceSync(foldersToOpen.map(folder => ({ uri: folder.workspace.uri })));\n\n\t\t\t\t\t// Add workspace and remove folders thereby\n\t\t\t\t\tpathsToOpen.push({ workspace, remoteAuthority });\n\t\t\t\t\tpathsToOpen = pathsToOpen.filter(path => !isSingleFolderWorkspacePathToOpen(path));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Check for `window.startup` setting to include all windows\n\t\t// from the previous session if this is the initial startup and we have\n\t\t// not restored windows already otherwise.\n\t\t// Use `unshift` to ensure any new window to open comes last\n\t\t// for proper focus treatment.\n\t\tif (openConfig.initialStartup && !restoredWindows && this.configurationService.getValue<IWindowSettings | undefined>('window')?.restoreWindows === 'preserve') {\n\t\t\tpathsToOpen.unshift(...this.doGetPathsFromLastSession().filter(path => isWorkspacePathToOpen(path) || isSingleFolderWorkspacePathToOpen(path) || path.backupPath));\n\t\t}\n\n\t\treturn pathsToOpen;\n\t}\n\n\tprivate doExtractPathsFromAPI(openConfig: IOpenConfiguration): IPathToOpen[] {\n\t\tconst pathsToOpen: IPathToOpen[] = [];\n\t\tconst pathResolveOptions: IPathResolveOptions = { gotoLineMode: openConfig.gotoLineMode, remoteAuthority: openConfig.remoteAuthority };\n\t\tfor (const pathToOpen of coalesce(openConfig.urisToOpen || [])) {\n\t\t\tconst path = this.resolveOpenable(pathToOpen, pathResolveOptions);\n\n\t\t\t// Path exists\n\t\t\tif (path) {\n\t\t\t\tpath.label = pathToOpen.label;\n\t\t\t\tpathsToOpen.push(path);\n\t\t\t}\n\n\t\t\t// Path does not exist: show a warning box\n\t\t\telse {\n\t\t\t\tconst uri = this.resourceFromOpenable(pathToOpen);\n\n\t\t\t\tconst options: MessageBoxOptions = {\n\t\t\t\t\ttitle: this.productService.nameLong,\n\t\t\t\t\ttype: 'info',\n\t\t\t\t\tbuttons: [localize('ok', \"OK\")],\n\t\t\t\t\tmessage: uri.scheme === Schemas.file ? localize('pathNotExistTitle', \"Path does not exist\") : localize('uriInvalidTitle', \"URI can not be opened\"),\n\t\t\t\t\tdetail: uri.scheme === Schemas.file ?\n\t\t\t\t\t\tlocalize('pathNotExistDetail', \"The path '{0}' does not seem to exist anymore on disk.\", getPathLabel(uri.fsPath, this.environmentMainService)) :\n\t\t\t\t\t\tlocalize('uriInvalidDetail', \"The URI '{0}' is not valid and can not be opened.\", uri.toString()),\n\t\t\t\t\tnoLink: true\n\t\t\t\t};\n\n\t\t\t\tthis.dialogMainService.showMessageBox(options, withNullAsUndefined(BrowserWindow.getFocusedWindow()));\n\t\t\t}\n\t\t}\n\n\t\treturn pathsToOpen;\n\t}\n\n\tprivate doExtractPathsFromCLI(cli: NativeParsedArgs): IPath[] {\n\t\tconst pathsToOpen: IPathToOpen[] = [];\n\t\tconst pathResolveOptions: IPathResolveOptions = { ignoreFileNotFound: true, gotoLineMode: cli.goto, remoteAuthority: cli.remote || undefined, forceOpenWorkspaceAsFile: false };\n\n\t\t// folder uris\n\t\tconst folderUris = cli['folder-uri'];\n\t\tif (folderUris) {\n\t\t\tfor (const rawFolderUri of folderUris) {\n\t\t\t\tconst folderUri = this.cliArgToUri(rawFolderUri);\n\t\t\t\tif (folderUri) {\n\t\t\t\t\tconst path = this.resolveOpenable({ folderUri }, pathResolveOptions);\n\t\t\t\t\tif (path) {\n\t\t\t\t\t\tpathsToOpen.push(path);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// file uris\n\t\tconst fileUris = cli['file-uri'];\n\t\tif (fileUris) {\n\t\t\tfor (const rawFileUri of fileUris) {\n\t\t\t\tconst fileUri = this.cliArgToUri(rawFileUri);\n\t\t\t\tif (fileUri) {\n\t\t\t\t\tconst path = this.resolveOpenable(hasWorkspaceFileExtension(rawFileUri) ? { workspaceUri: fileUri } : { fileUri }, pathResolveOptions);\n\t\t\t\t\tif (path) {\n\t\t\t\t\t\tpathsToOpen.push(path);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// folder or file paths\n\t\tconst cliPaths = cli._;\n\t\tfor (const cliPath of cliPaths) {\n\t\t\tconst path = pathResolveOptions.remoteAuthority ? this.doResolvePathRemote(cliPath, pathResolveOptions) : this.doResolveFilePath(cliPath, pathResolveOptions);\n\t\t\tif (path) {\n\t\t\t\tpathsToOpen.push(path);\n\t\t\t}\n\t\t}\n\t\treturn pathsToOpen;\n\t}\n\n\tprivate cliArgToUri(arg: string): URI | undefined {\n\t\ttry {\n\t\t\tconst uri = URI.parse(arg);\n\t\t\tif (!uri.scheme) {\n\t\t\t\tthis.logService.error(`Invalid URI input string, scheme missing: ${arg}`);\n\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\treturn uri;\n\t\t} catch (e) {\n\t\t\tthis.logService.error(`Invalid URI input string: ${arg}, ${e.message}`);\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate doGetPathsFromLastSession(): IPathToOpen[] {\n\t\tconst restoreWindowsSetting = this.getRestoreWindowsSetting();\n\n\t\tswitch (restoreWindowsSetting) {\n\n\t\t\t// none: no window to restore\n\t\t\tcase 'none':\n\t\t\t\treturn [];\n\n\t\t\t// one: restore last opened workspace/folder or empty window\n\t\t\t// all: restore all windows\n\t\t\t// folders: restore last opened folders only\n\t\t\tcase 'one':\n\t\t\tcase 'all':\n\t\t\tcase 'preserve':\n\t\t\tcase 'folders':\n\n\t\t\t\t// Collect previously opened windows\n\t\t\t\tconst lastSessionWindows: IWindowState[] = [];\n\t\t\t\tif (restoreWindowsSetting !== 'one') {\n\t\t\t\t\tlastSessionWindows.push(...this.windowsStateHandler.state.openedWindows);\n\t\t\t\t}\n\t\t\t\tif (this.windowsStateHandler.state.lastActiveWindow) {\n\t\t\t\t\tlastSessionWindows.push(this.windowsStateHandler.state.lastActiveWindow);\n\t\t\t\t}\n\n\t\t\t\tconst pathsToOpen: IPathToOpen[] = [];\n\t\t\t\tfor (const lastSessionWindow of lastSessionWindows) {\n\n\t\t\t\t\t// Workspaces\n\t\t\t\t\tif (lastSessionWindow.workspace) {\n\t\t\t\t\t\tconst pathToOpen = this.resolveOpenable({ workspaceUri: lastSessionWindow.workspace.configPath }, { remoteAuthority: lastSessionWindow.remoteAuthority });\n\t\t\t\t\t\tif (isWorkspacePathToOpen(pathToOpen)) {\n\t\t\t\t\t\t\tpathsToOpen.push(pathToOpen);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Folders\n\t\t\t\t\telse if (lastSessionWindow.folderUri) {\n\t\t\t\t\t\tconst pathToOpen = this.resolveOpenable({ folderUri: lastSessionWindow.folderUri }, { remoteAuthority: lastSessionWindow.remoteAuthority });\n\t\t\t\t\t\tif (isSingleFolderWorkspacePathToOpen(pathToOpen)) {\n\t\t\t\t\t\t\tpathsToOpen.push(pathToOpen);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Empty window, potentially editors open to be restored\n\t\t\t\t\telse if (restoreWindowsSetting !== 'folders' && lastSessionWindow.backupPath) {\n\t\t\t\t\t\tpathsToOpen.push({ backupPath: lastSessionWindow.backupPath, remoteAuthority: lastSessionWindow.remoteAuthority });\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn pathsToOpen;\n\t\t}\n\t}\n\n\tprivate getRestoreWindowsSetting(): RestoreWindowsSetting {\n\t\tlet restoreWindows: RestoreWindowsSetting;\n\t\tif (this.lifecycleMainService.wasRestarted) {\n\t\t\trestoreWindows = 'all'; // always reopen all windows when an update was applied\n\t\t} else {\n\t\t\tconst windowConfig = this.configurationService.getValue<IWindowSettings | undefined>('window');\n\t\t\trestoreWindows = windowConfig?.restoreWindows || 'all'; // by default restore all windows\n\n\t\t\tif (!['preserve', 'all', 'folders', 'one', 'none'].includes(restoreWindows)) {\n\t\t\t\trestoreWindows = 'all'; // by default restore all windows\n\t\t\t}\n\t\t}\n\n\t\treturn restoreWindows;\n\t}\n\n\tprivate resolveOpenable(openable: IWindowOpenable, options: IPathResolveOptions = {}): IPathToOpen | undefined {\n\n\t\t// handle file:// openables with some extra validation\n\t\tlet uri = this.resourceFromOpenable(openable);\n\t\tif (uri.scheme === Schemas.file) {\n\t\t\tif (isFileToOpen(openable)) {\n\t\t\t\toptions = { ...options, forceOpenWorkspaceAsFile: true };\n\t\t\t}\n\t\t\treturn this.doResolveFilePath(uri.fsPath, options);\n\t\t}\n\n\t\t// handle non file:// openables\n\t\treturn this.doResolveRemoteOpenable(openable, options);\n\t}\n\n\tprivate doResolveRemoteOpenable(openable: IWindowOpenable, options: IPathResolveOptions): IPathToOpen | undefined {\n\t\tlet uri = this.resourceFromOpenable(openable);\n\n\t\t// use remote authority from vscode\n\t\tconst remoteAuthority = getRemoteAuthority(uri) || options.remoteAuthority;\n\n\t\t// normalize URI\n\t\turi = removeTrailingPathSeparator(normalizePath(uri));\n\n\t\t// File\n\t\tif (isFileToOpen(openable)) {\n\t\t\tif (options.gotoLineMode) {\n\t\t\t\tconst { path, line, column } = parseLineAndColumnAware(uri.path);\n\n\t\t\t\treturn { fileUri: uri.with({ path }), lineNumber: line, columnNumber: column, remoteAuthority };\n\t\t\t}\n\n\t\t\treturn { fileUri: uri, remoteAuthority };\n\t\t}\n\n\t\t// Workspace\n\t\telse if (isWorkspaceToOpen(openable)) {\n\t\t\treturn { workspace: getWorkspaceIdentifier(uri), remoteAuthority };\n\t\t}\n\n\t\t// Folder\n\t\treturn { workspace: getSingleFolderWorkspaceIdentifier(uri), remoteAuthority };\n\t}\n\n\tprivate resourceFromOpenable(openable: IWindowOpenable): URI {\n\t\tif (isWorkspaceToOpen(openable)) {\n\t\t\treturn openable.workspaceUri;\n\t\t}\n\n\t\tif (isFolderToOpen(openable)) {\n\t\t\treturn openable.folderUri;\n\t\t}\n\n\t\treturn openable.fileUri;\n\t}\n\n\tprivate doResolveFilePath(path: string, options: IPathResolveOptions): IPathToOpen | undefined {\n\n\t\t// Extract line/col information from path\n\t\tlet lineNumber: number | undefined;\n\t\tlet columnNumber: number | undefined;\n\n\t\tif (options.gotoLineMode) {\n\t\t\t({ path, line: lineNumber, column: columnNumber } = parseLineAndColumnAware(path));\n\t\t}\n\n\t\t// Ensure the path is normalized and absolute\n\t\tpath = sanitizeFilePath(normalize(path), cwd());\n\n\t\ttry {\n\t\t\tconst pathStat = statSync(path);\n\t\t\tif (pathStat.isFile()) {\n\n\t\t\t\t// Workspace (unless disabled via flag)\n\t\t\t\tif (!options.forceOpenWorkspaceAsFile) {\n\t\t\t\t\tconst workspace = this.workspacesManagementMainService.resolveLocalWorkspaceSync(URI.file(path));\n\t\t\t\t\tif (workspace) {\n\t\t\t\t\t\treturn { workspace: { id: workspace.id, configPath: workspace.configPath }, remoteAuthority: workspace.remoteAuthority, exists: true };\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// File\n\t\t\t\treturn { fileUri: URI.file(path), lineNumber, columnNumber, exists: true };\n\t\t\t}\n\n\t\t\t// Folder (we check for isDirectory() because e.g. paths like /dev/null\n\t\t\t// are neither file nor folder but some external tools might pass them\n\t\t\t// over to us)\n\t\t\telse if (pathStat.isDirectory()) {\n\t\t\t\treturn { workspace: getSingleFolderWorkspaceIdentifier(URI.file(path), pathStat), exists: true };\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconst fileUri = URI.file(path);\n\n\t\t\t// since file does not seem to exist anymore, remove from recent\n\t\t\tthis.workspacesHistoryMainService.removeRecentlyOpened([fileUri]);\n\n\t\t\t// assume this is a file that does not yet exist\n\t\t\tif (options.ignoreFileNotFound) {\n\t\t\t\treturn { fileUri, exists: false };\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate doResolvePathRemote(path: string, options: IPathResolveOptions): IPathToOpen | undefined {\n\t\tconst first = path.charCodeAt(0);\n\t\tconst remoteAuthority = options.remoteAuthority;\n\n\t\t// Extract line/col information from path\n\t\tlet lineNumber: number | undefined;\n\t\tlet columnNumber: number | undefined;\n\n\t\tif (options.gotoLineMode) {\n\t\t\t({ path, line: lineNumber, column: columnNumber } = parseLineAndColumnAware(path));\n\t\t}\n\n\t\t// make absolute\n\t\tif (first !== CharCode.Slash) {\n\t\t\tif (isWindowsDriveLetter(first) && path.charCodeAt(path.charCodeAt(1)) === CharCode.Colon) {\n\t\t\t\tpath = toSlashes(path);\n\t\t\t}\n\n\t\t\tpath = `/${path}`;\n\t\t}\n\n\t\tconst uri = URI.from({ scheme: Schemas.vscodeRemote, authority: remoteAuthority, path: path });\n\n\t\t// guess the file type:\n\t\t// - if it ends with a slash it's a folder\n\t\t// - if in goto line mode or if it has a file extension, it's a file or a workspace\n\t\t// - by defaults it's a folder\n\t\tif (path.charCodeAt(path.length - 1) !== CharCode.Slash) {\n\n\t\t\t// file name ends with .code-workspace\n\t\t\tif (hasWorkspaceFileExtension(path)) {\n\t\t\t\tif (options.forceOpenWorkspaceAsFile) {\n\t\t\t\t\treturn { fileUri: uri, lineNumber, columnNumber, remoteAuthority: options.remoteAuthority };\n\t\t\t\t}\n\t\t\t\treturn { workspace: getWorkspaceIdentifier(uri), remoteAuthority };\n\t\t\t}\n\n\t\t\t// file name starts with a dot or has an file extension\n\t\t\telse if (options.gotoLineMode || posix.basename(path).indexOf('.') !== -1) {\n\t\t\t\treturn { fileUri: uri, lineNumber, columnNumber, remoteAuthority };\n\t\t\t}\n\t\t}\n\n\t\treturn { workspace: getSingleFolderWorkspaceIdentifier(uri), remoteAuthority };\n\t}\n\n\tprivate shouldOpenNewWindow(openConfig: IOpenConfiguration): { openFolderInNewWindow: boolean; openFilesInNewWindow: boolean; } {\n\n\t\t// let the user settings override how folders are open in a new window or same window unless we are forced\n\t\tconst windowConfig = this.configurationService.getValue<IWindowSettings | undefined>('window');\n\t\tconst openFolderInNewWindowConfig = windowConfig?.openFoldersInNewWindow || 'default' /* default */;\n\t\tconst openFilesInNewWindowConfig = windowConfig?.openFilesInNewWindow || 'off' /* default */;\n\n\t\tlet openFolderInNewWindow = (openConfig.preferNewWindow || openConfig.forceNewWindow) && !openConfig.forceReuseWindow;\n\t\tif (!openConfig.forceNewWindow && !openConfig.forceReuseWindow && (openFolderInNewWindowConfig === 'on' || openFolderInNewWindowConfig === 'off')) {\n\t\t\topenFolderInNewWindow = (openFolderInNewWindowConfig === 'on');\n\t\t}\n\n\t\t// let the user settings override how files are open in a new window or same window unless we are forced (not for extension development though)\n\t\tlet openFilesInNewWindow: boolean = false;\n\t\tif (openConfig.forceNewWindow || openConfig.forceReuseWindow) {\n\t\t\topenFilesInNewWindow = !!openConfig.forceNewWindow && !openConfig.forceReuseWindow;\n\t\t} else {\n\n\t\t\t// macOS: by default we open files in a new window if this is triggered via DOCK context\n\t\t\tif (isMacintosh) {\n\t\t\t\tif (openConfig.context === OpenContext.DOCK) {\n\t\t\t\t\topenFilesInNewWindow = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Linux/Windows: by default we open files in the new window unless triggered via DIALOG / MENU context\n\t\t\t// or from the integrated terminal where we assume the user prefers to open in the current window\n\t\t\telse {\n\t\t\t\tif (openConfig.context !== OpenContext.DIALOG && openConfig.context !== OpenContext.MENU && !(openConfig.userEnv && openConfig.userEnv['TERM_PROGRAM'] === 'vscode')) {\n\t\t\t\t\topenFilesInNewWindow = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// finally check for overrides of default\n\t\t\tif (!openConfig.cli.extensionDevelopmentPath && (openFilesInNewWindowConfig === 'on' || openFilesInNewWindowConfig === 'off')) {\n\t\t\t\topenFilesInNewWindow = (openFilesInNewWindowConfig === 'on');\n\t\t\t}\n\t\t}\n\n\t\treturn { openFolderInNewWindow: !!openFolderInNewWindow, openFilesInNewWindow };\n\t}\n\n\topenExtensionDevelopmentHostWindow(extensionDevelopmentPaths: string[], openConfig: IOpenConfiguration): ICodeWindow[] {\n\n\t\t// Reload an existing extension development host window on the same path\n\t\t// We currently do not allow more than one extension development window\n\t\t// on the same extension path.\n\t\tconst existingWindow = findWindowOnExtensionDevelopmentPath(this.getWindows(), extensionDevelopmentPaths);\n\t\tif (existingWindow) {\n\t\t\tthis.lifecycleMainService.reload(existingWindow, openConfig.cli);\n\t\t\texistingWindow.focus(); // make sure it gets focus and is restored\n\n\t\t\treturn [existingWindow];\n\t\t}\n\n\t\tlet folderUris = openConfig.cli['folder-uri'] || [];\n\t\tlet fileUris = openConfig.cli['file-uri'] || [];\n\t\tlet cliArgs = openConfig.cli._;\n\n\t\t// Fill in previously opened workspace unless an explicit path is provided and we are not unit testing\n\t\tif (!cliArgs.length && !folderUris.length && !fileUris.length && !openConfig.cli.extensionTestsPath) {\n\t\t\tconst extensionDevelopmentWindowState = this.windowsStateHandler.state.lastPluginDevelopmentHostWindow;\n\t\t\tconst workspaceToOpen = extensionDevelopmentWindowState && (extensionDevelopmentWindowState.workspace || extensionDevelopmentWindowState.folderUri);\n\t\t\tif (workspaceToOpen) {\n\t\t\t\tif (URI.isUri(workspaceToOpen)) {\n\t\t\t\t\tif (workspaceToOpen.scheme === Schemas.file) {\n\t\t\t\t\t\tcliArgs = [workspaceToOpen.fsPath];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfolderUris = [workspaceToOpen.toString()];\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (workspaceToOpen.configPath.scheme === Schemas.file) {\n\t\t\t\t\t\tcliArgs = [originalFSPath(workspaceToOpen.configPath)];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfileUris = [workspaceToOpen.configPath.toString()];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet remoteAuthority = openConfig.remoteAuthority;\n\t\tfor (const extensionDevelopmentPath of extensionDevelopmentPaths) {\n\t\t\tif (extensionDevelopmentPath.match(/^[a-zA-Z][a-zA-Z0-9\\+\\-\\.]+:/)) {\n\t\t\t\tconst url = URI.parse(extensionDevelopmentPath);\n\t\t\t\tconst extensionDevelopmentPathRemoteAuthority = getRemoteAuthority(url);\n\t\t\t\tif (extensionDevelopmentPathRemoteAuthority) {\n\t\t\t\t\tif (remoteAuthority) {\n\t\t\t\t\t\tif (extensionDevelopmentPathRemoteAuthority !== remoteAuthority) {\n\t\t\t\t\t\t\tthis.logService.error('more than one extension development path authority');\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tremoteAuthority = extensionDevelopmentPathRemoteAuthority;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Make sure that we do not try to open:\n\t\t// - a workspace or folder that is already opened\n\t\t// - a workspace or file that has a different authority as the extension development.\n\n\t\tcliArgs = cliArgs.filter(path => {\n\t\t\tconst uri = URI.file(path);\n\t\t\tif (!!findWindowOnWorkspaceOrFolder(this.getWindows(), uri)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn getRemoteAuthority(uri) === remoteAuthority;\n\t\t});\n\n\t\tfolderUris = folderUris.filter(folderUriStr => {\n\t\t\tconst folderUri = this.cliArgToUri(folderUriStr);\n\t\t\tif (folderUri && !!findWindowOnWorkspaceOrFolder(this.getWindows(), folderUri)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn folderUri ? getRemoteAuthority(folderUri) === remoteAuthority : false;\n\t\t});\n\n\t\tfileUris = fileUris.filter(fileUriStr => {\n\t\t\tconst fileUri = this.cliArgToUri(fileUriStr);\n\t\t\tif (fileUri && !!findWindowOnWorkspaceOrFolder(this.getWindows(), fileUri)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn fileUri ? getRemoteAuthority(fileUri) === remoteAuthority : false;\n\t\t});\n\n\t\topenConfig.cli._ = cliArgs;\n\t\topenConfig.cli['folder-uri'] = folderUris;\n\t\topenConfig.cli['file-uri'] = fileUris;\n\n\t\tconst noFilesOrFolders = !cliArgs.length && !folderUris.length && !fileUris.length;\n\n\t\t// Open it\n\t\tconst openArgs: IOpenConfiguration = {\n\t\t\tcontext: openConfig.context,\n\t\t\tcli: openConfig.cli,\n\t\t\tforceNewWindow: true,\n\t\t\tforceEmpty: noFilesOrFolders,\n\t\t\tuserEnv: openConfig.userEnv,\n\t\t\tnoRecentEntry: true,\n\t\t\twaitMarkerFileURI: openConfig.waitMarkerFileURI,\n\t\t\tremoteAuthority\n\t\t};\n\n\t\treturn this.open(openArgs);\n\t}\n\n\tprivate openInBrowserWindow(options: IOpenBrowserWindowOptions): ICodeWindow {\n\t\tconst windowConfig = this.configurationService.getValue<IWindowSettings | undefined>('window');\n\n\t\t// Build up the window configuration from provided options, config and environment\n\t\tconst configuration: INativeWindowConfiguration = {\n\n\t\t\t// Inherit CLI arguments from environment and/or\n\t\t\t// the specific properties from this launch if provided\n\t\t\t...this.environmentMainService.args,\n\t\t\t...options.cli,\n\n\t\t\tmachineId: this.machineId,\n\n\t\t\twindowId: -1,\t// Will be filled in by the window once loaded later\n\n\t\t\tmainPid: process.pid,\n\n\t\t\tappRoot: this.environmentMainService.appRoot,\n\t\t\texecPath: process.execPath,\n\t\t\tnodeCachedDataDir: this.environmentMainService.nodeCachedDataDir,\n\t\t\tpartsSplashPath: join(this.environmentMainService.userDataPath, 'rapid_render.json'),\n\t\t\t// If we know the backup folder upfront (for empty windows to restore), we can set it\n\t\t\t// directly here which helps for restoring UI state associated with that window.\n\t\t\t// For all other cases we first call into registerEmptyWindowBackupSync() to set it before\n\t\t\t// loading the window.\n\t\t\tbackupPath: options.emptyWindowBackupInfo ? join(this.environmentMainService.backupHome, options.emptyWindowBackupInfo.backupFolder) : undefined,\n\n\t\t\thomeDir: this.environmentMainService.userHome.fsPath,\n\t\t\ttmpDir: this.environmentMainService.tmpDir.fsPath,\n\t\t\tuserDataDir: this.environmentMainService.userDataPath,\n\n\t\t\tremoteAuthority: options.remoteAuthority,\n\t\t\tworkspace: options.workspace,\n\t\t\tuserEnv: { ...this.initialUserEnv, ...options.userEnv },\n\n\t\t\tfilesToOpenOrCreate: options.filesToOpen?.filesToOpenOrCreate,\n\t\t\tfilesToDiff: options.filesToOpen?.filesToDiff,\n\t\t\tfilesToWait: options.filesToOpen?.filesToWait,\n\n\t\t\tlogLevel: this.logService.getLevel(),\n\t\t\tlogsPath: this.environmentMainService.logsPath,\n\n\t\t\tproduct,\n\t\t\tisInitialStartup: options.initialStartup,\n\t\t\tperfMarks: getMarks(),\n\t\t\tos: { release: release(), hostname: hostname() },\n\t\t\tzoomLevel: typeof windowConfig?.zoomLevel === 'number' ? windowConfig.zoomLevel : undefined,\n\n\t\t\tautoDetectHighContrast: windowConfig?.autoDetectHighContrast ?? true,\n\t\t\taccessibilitySupport: app.accessibilitySupportEnabled,\n\t\t\tcolorScheme: {\n\t\t\t\tdark: nativeTheme.shouldUseDarkColors,\n\t\t\t\thighContrast: nativeTheme.shouldUseInvertedColorScheme || nativeTheme.shouldUseHighContrastColors\n\t\t\t}\n\t\t};\n\n\t\tlet window: ICodeWindow | undefined;\n\t\tif (!options.forceNewWindow && !options.forceNewTabbedWindow) {\n\t\t\twindow = options.windowToUse || this.getLastActiveWindow();\n\t\t\tif (window) {\n\t\t\t\twindow.focus();\n\t\t\t}\n\t\t}\n\n\t\t// New window\n\t\tif (!window) {\n\t\t\tconst state = this.windowsStateHandler.getNewWindowState(configuration);\n\n\t\t\t// Create the window\n\t\t\tmark('code/willCreateCodeWindow');\n\t\t\tconst createdWindow = window = this.instantiationService.createInstance(CodeWindow, {\n\t\t\t\tstate,\n\t\t\t\textensionDevelopmentPath: configuration.extensionDevelopmentPath,\n\t\t\t\tisExtensionTestHost: !!configuration.extensionTestsPath\n\t\t\t});\n\t\t\tmark('code/didCreateCodeWindow');\n\n\t\t\t// Add as window tab if configured (macOS only)\n\t\t\tif (options.forceNewTabbedWindow) {\n\t\t\t\tconst activeWindow = this.getLastActiveWindow();\n\t\t\t\tif (activeWindow) {\n\t\t\t\t\tactiveWindow.addTabbedWindow(createdWindow);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add to our list of windows\n\t\t\tWindowsMainService.WINDOWS.push(createdWindow);\n\n\t\t\t// Indicate new window via event\n\t\t\tthis._onDidOpenWindow.fire(createdWindow);\n\n\t\t\t// Indicate number change via event\n\t\t\tthis._onDidChangeWindowsCount.fire({ oldCount: this.getWindowCount() - 1, newCount: this.getWindowCount() });\n\n\t\t\t// Window Events\n\t\t\tonce(createdWindow.onDidSignalReady)(() => this._onDidSignalReadyWindow.fire(createdWindow));\n\t\t\tonce(createdWindow.onDidClose)(() => this.onWindowClosed(createdWindow));\n\t\t\tonce(createdWindow.onDidDestroy)(() => this._onDidDestroyWindow.fire(createdWindow));\n\n\t\t\tconst webContents = assertIsDefined(createdWindow.win?.webContents);\n\t\t\twebContents.removeAllListeners('devtools-reload-page'); // remove built in listener so we can handle this on our own\n\t\t\twebContents.on('devtools-reload-page', () => this.lifecycleMainService.reload(createdWindow));\n\n\t\t\t// Lifecycle\n\t\t\tthis.lifecycleMainService.registerWindow(createdWindow);\n\t\t}\n\n\t\t// Existing window\n\t\telse {\n\n\t\t\t// Some configuration things get inherited if the window is being reused and we are\n\t\t\t// in extension development host mode. These options are all development related.\n\t\t\tconst currentWindowConfig = window.config;\n\t\t\tif (!configuration.extensionDevelopmentPath && currentWindowConfig && !!currentWindowConfig.extensionDevelopmentPath) {\n\t\t\t\tconfiguration.extensionDevelopmentPath = currentWindowConfig.extensionDevelopmentPath;\n\t\t\t\tconfiguration.verbose = currentWindowConfig.verbose;\n\t\t\t\tconfiguration['inspect-brk-extensions'] = currentWindowConfig['inspect-brk-extensions'];\n\t\t\t\tconfiguration.debugId = currentWindowConfig.debugId;\n\t\t\t\tconfiguration['inspect-extensions'] = currentWindowConfig['inspect-extensions'];\n\t\t\t\tconfiguration['extensions-dir'] = currentWindowConfig['extensions-dir'];\n\t\t\t}\n\t\t}\n\n\t\t// Update window identifier and session now\n\t\t// that we have the window object in hand.\n\t\tconfiguration.windowId = window.id;\n\n\t\t// If the window was already loaded, make sure to unload it\n\t\t// first and only load the new configuration if that was\n\t\t// not vetoed\n\t\tif (window.isReady) {\n\t\t\tthis.lifecycleMainService.unload(window, UnloadReason.LOAD).then(veto => {\n\t\t\t\tif (!veto) {\n\t\t\t\t\tthis.doOpenInBrowserWindow(window!, configuration, options);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tthis.doOpenInBrowserWindow(window, configuration, options);\n\t\t}\n\n\t\treturn window;\n\t}\n\n\tprivate doOpenInBrowserWindow(window: ICodeWindow, configuration: INativeWindowConfiguration, options: IOpenBrowserWindowOptions): void {\n\n\t\t// Register window for backups\n\t\tif (!configuration.extensionDevelopmentPath) {\n\t\t\tif (isWorkspaceIdentifier(configuration.workspace)) {\n\t\t\t\tconfiguration.backupPath = this.backupMainService.registerWorkspaceBackupSync({ workspace: configuration.workspace, remoteAuthority: configuration.remoteAuthority });\n\t\t\t} else if (isSingleFolderWorkspaceIdentifier(configuration.workspace)) {\n\t\t\t\tconfiguration.backupPath = this.backupMainService.registerFolderBackupSync(configuration.workspace.uri);\n\t\t\t} else {\n\t\t\t\tconst backupFolder = options.emptyWindowBackupInfo && options.emptyWindowBackupInfo.backupFolder;\n\t\t\t\tconfiguration.backupPath = this.backupMainService.registerEmptyWindowBackupSync(backupFolder, configuration.remoteAuthority);\n\t\t\t}\n\t\t}\n\n\t\t// Load it\n\t\twindow.load(configuration);\n\t}\n\n\tprivate onWindowClosed(window: ICodeWindow): void {\n\n\t\t// Remove from our list so that Electron can clean it up\n\t\tconst index = WindowsMainService.WINDOWS.indexOf(window);\n\t\tWindowsMainService.WINDOWS.splice(index, 1);\n\n\t\t// Emit\n\t\tthis._onDidChangeWindowsCount.fire({ oldCount: this.getWindowCount() + 1, newCount: this.getWindowCount() });\n\t}\n\n\tgetFocusedWindow(): ICodeWindow | undefined {\n\t\tconst window = BrowserWindow.getFocusedWindow();\n\t\tif (window) {\n\t\t\treturn this.getWindowById(window.id);\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tgetLastActiveWindow(): ICodeWindow | undefined {\n\t\treturn this.doGetLastActiveWindow(this.getWindows());\n\t}\n\n\tprivate getLastActiveWindowForAuthority(remoteAuthority: string | undefined): ICodeWindow | undefined {\n\t\treturn this.doGetLastActiveWindow(this.getWindows().filter(window => window.remoteAuthority === remoteAuthority));\n\t}\n\n\tprivate doGetLastActiveWindow(windows: ICodeWindow[]): ICodeWindow | undefined {\n\t\tconst lastFocusedDate = Math.max.apply(Math, windows.map(window => window.lastFocusTime));\n\n\t\treturn windows.find(window => window.lastFocusTime === lastFocusedDate);\n\t}\n\n\tsendToFocused(channel: string, ...args: any[]): void {\n\t\tconst focusedWindow = this.getFocusedWindow() || this.getLastActiveWindow();\n\n\t\tif (focusedWindow) {\n\t\t\tfocusedWindow.sendWhenReady(channel, CancellationToken.None, ...args);\n\t\t}\n\t}\n\n\tsendToAll(channel: string, payload?: any, windowIdsToIgnore?: number[]): void {\n\t\tfor (const window of this.getWindows()) {\n\t\t\tif (windowIdsToIgnore && windowIdsToIgnore.indexOf(window.id) >= 0) {\n\t\t\t\tcontinue; // do not send if we are instructed to ignore it\n\t\t\t}\n\n\t\t\twindow.sendWhenReady(channel, CancellationToken.None, payload);\n\t\t}\n\t}\n\n\tgetWindows(): ICodeWindow[] {\n\t\treturn WindowsMainService.WINDOWS;\n\t}\n\n\tgetWindowCount(): number {\n\t\treturn WindowsMainService.WINDOWS.length;\n\t}\n\n\tgetWindowById(windowId: number): ICodeWindow | undefined {\n\t\tconst windows = this.getWindows().filter(window => window.id === windowId);\n\n\t\treturn firstOrDefault(windows);\n\t}\n\n\tgetWindowByWebContents(webContents: WebContents): ICodeWindow | undefined {\n\t\tconst browserWindow = BrowserWindow.fromWebContents(webContents);\n\t\tif (!browserWindow) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn this.getWindowById(browserWindow.id);\n\t}\n}\n"]}