{"version":3,"file":"serviceMachineId.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/serviceMachineId/common/serviceMachineId.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAQzF,KAAK,UAAU,mBAAmB,CAAC,kBAAuC,EAAE,WAAyB,EAAE,cAGjG;QACZ,IAAI,IAAI,GAAkB,cAAc,CAAC,CAAC,CAAC,cAAc,CAAC,GAAG,CAAC,0BAA0B,iBAAsB,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;QAC9H,IAAI,IAAI,EAAE;YACT,OAAO,IAAI,CAAC;SACZ;QACD,IAAI;YACH,MAAM,QAAQ,GAAG,MAAM,WAAW,CAAC,QAAQ,CAAC,kBAAkB,CAAC,wBAAwB,CAAC,CAAC;YACzF,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;YACxC,IAAI,GAAG,CAAA,GAAA,aAAM,CAAA,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC;SACpC;QAAC,OAAO,CAAC,EAAE;YACX,IAAI,GAAG,IAAI,CAAC;SACZ;QAED,IAAI,CAAC,IAAI,EAAE;YACV,IAAI,GAAG,CAAA,GAAA,mBAAY,CAAA,EAAE,CAAC;YACtB,IAAI;gBACH,MAAM,WAAW,CAAC,SAAS,CAAC,kBAAkB,CAAC,wBAAwB,EAAE,iBAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;aACpG;YAAC,OAAO,KAAK,EAAE;gBACf,MAAM;aACN;SACD;QACD,IAAI,cAAc,EAAE;YACnB,cAAc,CAAC,KAAK,CAAC,0BAA0B,EAAE,IAAI,kCAA6C,CAAC;SACnG;QACD,OAAO,IAAI,CAAC;IACb,CAAC;IA5BD,kDA4BC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { isUUID, generateUuid } from 'vs/base/common/uuid';\nimport { VSBuffer } from 'vs/base/common/buffer';\n\nexport async function getServiceMachineId(environmentService: IEnvironmentService, fileService: IFileService, storageService: {\n\tget: (key: string, scope: StorageScope, fallbackValue?: string | undefined) => string | undefined,\n\tstore: (key: string, value: string, scope: StorageScope, target: StorageTarget) => void\n} | undefined): Promise<string> {\n\tlet uuid: string | null = storageService ? storageService.get('storage.serviceMachineId', StorageScope.GLOBAL) || null : null;\n\tif (uuid) {\n\t\treturn uuid;\n\t}\n\ttry {\n\t\tconst contents = await fileService.readFile(environmentService.serviceMachineIdResource);\n\t\tconst value = contents.value.toString();\n\t\tuuid = isUUID(value) ? value : null;\n\t} catch (e) {\n\t\tuuid = null;\n\t}\n\n\tif (!uuid) {\n\t\tuuid = generateUuid();\n\t\ttry {\n\t\t\tawait fileService.writeFile(environmentService.serviceMachineIdResource, VSBuffer.fromString(uuid));\n\t\t} catch (error) {\n\t\t\t//noop\n\t\t}\n\t}\n\tif (storageService) {\n\t\tstorageService.store('storage.serviceMachineId', uuid, StorageScope.GLOBAL, StorageTarget.MACHINE);\n\t}\n\treturn uuid;\n}\n"]}