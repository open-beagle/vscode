{"version":3,"file":"quickInput.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/quickinput/common/quickInput.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;;IAQhG,oCAA2D;IAE9C,QAAA,kBAAkB,GAAG,CAAA,GAAA,+BAAe,CAAA,CAAqB,mBAAmB,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IQuickPickItem, IPickOptions, IInputOptions, IQuickNavigateConfiguration, IQuickPick, IQuickInputButton, IInputBox, QuickPickInput, IKeyMods } from 'vs/base/parts/quickinput/common/quickInput';\nimport { IQuickAccessController } from 'vs/platform/quickinput/common/quickAccess';\n\nexport * from 'vs/base/parts/quickinput/common/quickInput';\n\nexport const IQuickInputService = createDecorator<IQuickInputService>('quickInputService');\n\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n\nexport interface IQuickInputService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Provides access to the back button in quick input.\n\t */\n\treadonly backButton: IQuickInputButton;\n\n\t/**\n\t * Provides access to the quick access providers.\n\t */\n\treadonly quickAccess: IQuickAccessController;\n\n\t/**\n\t * Allows to register on the event that quick input is showing.\n\t */\n\treadonly onShow: Event<void>;\n\n\t/**\n\t * Allows to register on the event that quick input is hiding.\n\t */\n\treadonly onHide: Event<void>;\n\n\t/**\n\t * Opens the quick input box for selecting items and returns a promise\n\t * with the user selected item(s) if any.\n\t */\n\tpick<T extends IQuickPickItem>(picks: Promise<QuickPickInput<T>[]> | QuickPickInput<T>[], options?: IPickOptions<T> & { canPickMany: true }, token?: CancellationToken): Promise<T[] | undefined>;\n\tpick<T extends IQuickPickItem>(picks: Promise<QuickPickInput<T>[]> | QuickPickInput<T>[], options?: IPickOptions<T> & { canPickMany: false }, token?: CancellationToken): Promise<T | undefined>;\n\tpick<T extends IQuickPickItem>(picks: Promise<QuickPickInput<T>[]> | QuickPickInput<T>[], options?: Omit<IPickOptions<T>, 'canPickMany'>, token?: CancellationToken): Promise<T | undefined>;\n\n\t/**\n\t * Opens the quick input box for text input and returns a promise with the user typed value if any.\n\t */\n\tinput(options?: IInputOptions, token?: CancellationToken): Promise<string | undefined>;\n\n\t/**\n\t * Provides raw access to the quick pick controller.\n\t */\n\tcreateQuickPick<T extends IQuickPickItem>(): IQuickPick<T>;\n\n\t/**\n\t * Provides raw access to the quick input controller.\n\t */\n\tcreateInputBox(): IInputBox;\n\n\t/**\n\t * Moves focus into quick input.\n\t */\n\tfocus(): void;\n\n\t/**\n\t * Toggle the checked state of the selected item.\n\t */\n\ttoggle(): void;\n\n\t/**\n\t * Navigate inside the opened quick input list.\n\t */\n\tnavigate(next: boolean, quickNavigate?: IQuickNavigateConfiguration): void;\n\n\t/**\n\t * Navigate back in a multi-step quick input.\n\t */\n\tback(): Promise<void>;\n\n\t/**\n\t * Accept the selected item.\n\t *\n\t * @param keyMods allows to override the state of key\n\t * modifiers that should be present when invoking.\n\t */\n\taccept(keyMods?: IKeyMods): Promise<void>;\n\n\t/**\n\t * Cancels quick input and closes it.\n\t */\n\tcancel(): Promise<void>;\n}\n"]}