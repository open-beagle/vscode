{"version":3,"file":"quickAccess.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/quickinput/browser/quickAccess.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IQuickInputService, IQuickPick, IQuickPickItem, ItemActivation } from 'vs/platform/quickinput/common/quickInput';\nimport { Disposable, DisposableStore, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { IQuickAccessController, IQuickAccessProvider, IQuickAccessRegistry, Extensions, IQuickAccessProviderDescriptor, IQuickAccessOptions, DefaultQuickAccessFilterValue } from 'vs/platform/quickinput/common/quickAccess';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { once } from 'vs/base/common/functional';\n\nexport class QuickAccessController extends Disposable implements IQuickAccessController {\n\n\tprivate readonly registry = Registry.as<IQuickAccessRegistry>(Extensions.Quickaccess);\n\tprivate readonly mapProviderToDescriptor = new Map<IQuickAccessProviderDescriptor, IQuickAccessProvider>();\n\n\tprivate readonly lastAcceptedPickerValues = new Map<IQuickAccessProviderDescriptor, string>();\n\n\tprivate visibleQuickAccess: {\n\t\tpicker: IQuickPick<IQuickPickItem>,\n\t\tdescriptor: IQuickAccessProviderDescriptor | undefined,\n\t\tvalue: string\n\t} | undefined = undefined;\n\n\tconstructor(\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService\n\t) {\n\t\tsuper();\n\t}\n\n\tshow(value = '', options?: IQuickAccessOptions): void {\n\n\t\t// Find provider for the value to show\n\t\tconst [provider, descriptor] = this.getOrInstantiateProvider(value);\n\n\t\t// Return early if quick access is already showing on that same prefix\n\t\tconst visibleQuickAccess = this.visibleQuickAccess;\n\t\tconst visibleDescriptor = visibleQuickAccess?.descriptor;\n\t\tif (visibleQuickAccess && descriptor && visibleDescriptor === descriptor) {\n\n\t\t\t// Apply value only if it is more specific than the prefix\n\t\t\t// from the provider and we are not instructed to preserve\n\t\t\tif (value !== descriptor.prefix && !options?.preserveValue) {\n\t\t\t\tvisibleQuickAccess.picker.value = value;\n\t\t\t}\n\n\t\t\t// Always adjust selection\n\t\t\tthis.adjustValueSelection(visibleQuickAccess.picker, descriptor, options);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Rewrite the filter value based on certain rules unless disabled\n\t\tif (descriptor && !options?.preserveValue) {\n\t\t\tlet newValue: string | undefined = undefined;\n\n\t\t\t// If we have a visible provider with a value, take it's filter value but\n\t\t\t// rewrite to new provider prefix in case they differ\n\t\t\tif (visibleQuickAccess && visibleDescriptor && visibleDescriptor !== descriptor) {\n\t\t\t\tconst newValueCandidateWithoutPrefix = visibleQuickAccess.value.substr(visibleDescriptor.prefix.length);\n\t\t\t\tif (newValueCandidateWithoutPrefix) {\n\t\t\t\t\tnewValue = `${descriptor.prefix}${newValueCandidateWithoutPrefix}`;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Otherwise, take a default value as instructed\n\t\t\tif (!newValue) {\n\t\t\t\tconst defaultFilterValue = provider?.defaultFilterValue;\n\t\t\t\tif (defaultFilterValue === DefaultQuickAccessFilterValue.LAST) {\n\t\t\t\t\tnewValue = this.lastAcceptedPickerValues.get(descriptor);\n\t\t\t\t} else if (typeof defaultFilterValue === 'string') {\n\t\t\t\t\tnewValue = `${descriptor.prefix}${defaultFilterValue}`;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof newValue === 'string') {\n\t\t\t\tvalue = newValue;\n\t\t\t}\n\t\t}\n\n\t\t// Create a picker for the provider to use with the initial value\n\t\t// and adjust the filtering to exclude the prefix from filtering\n\t\tconst disposables = new DisposableStore();\n\t\tconst picker = disposables.add(this.quickInputService.createQuickPick());\n\t\tpicker.value = value;\n\t\tthis.adjustValueSelection(picker, descriptor, options);\n\t\tpicker.placeholder = descriptor?.placeholder;\n\t\tpicker.quickNavigate = options?.quickNavigateConfiguration;\n\t\tpicker.hideInput = !!picker.quickNavigate && !visibleQuickAccess; // only hide input if there was no picker opened already\n\t\tif (typeof options?.itemActivation === 'number' || options?.quickNavigateConfiguration) {\n\t\t\tpicker.itemActivation = options?.itemActivation ?? ItemActivation.SECOND /* quick nav is always second */;\n\t\t}\n\t\tpicker.contextKey = descriptor?.contextKey;\n\t\tpicker.filterValue = (value: string) => value.substring(descriptor ? descriptor.prefix.length : 0);\n\t\tif (descriptor?.placeholder) {\n\t\t\tpicker.ariaLabel = descriptor?.placeholder;\n\t\t}\n\n\t\t// Register listeners\n\t\tdisposables.add(this.registerPickerListeners(picker, provider, descriptor, value));\n\n\t\t// Ask provider to fill the picker as needed if we have one\n\t\t// and pass over a cancellation token that will indicate when\n\t\t// the picker is hiding without a pick being made.\n\t\tconst cts = disposables.add(new CancellationTokenSource());\n\t\tif (provider) {\n\t\t\tdisposables.add(provider.provide(picker, cts.token));\n\t\t}\n\n\t\t// Finally, trigger disposal and cancellation when the picker\n\t\t// hides depending on items selected or not.\n\t\tonce(picker.onDidHide)(() => {\n\t\t\tif (picker.selectedItems.length === 0) {\n\t\t\t\tcts.cancel();\n\t\t\t}\n\n\t\t\t// Start to dispose once picker hides\n\t\t\tdisposables.dispose();\n\t\t});\n\n\t\t// Finally, show the picker. This is important because a provider\n\t\t// may not call this and then our disposables would leak that rely\n\t\t// on the onDidHide event.\n\t\tpicker.show();\n\t}\n\n\tprivate adjustValueSelection(picker: IQuickPick<IQuickPickItem>, descriptor?: IQuickAccessProviderDescriptor, options?: IQuickAccessOptions): void {\n\t\tlet valueSelection: [number, number];\n\n\t\t// Preserve: just always put the cursor at the end\n\t\tif (options?.preserveValue) {\n\t\t\tvalueSelection = [picker.value.length, picker.value.length];\n\t\t}\n\n\t\t// Otherwise: select the value up until the prefix\n\t\telse {\n\t\t\tvalueSelection = [descriptor?.prefix.length ?? 0, picker.value.length];\n\t\t}\n\n\t\tpicker.valueSelection = valueSelection;\n\t}\n\n\tprivate registerPickerListeners(picker: IQuickPick<IQuickPickItem>, provider: IQuickAccessProvider | undefined, descriptor: IQuickAccessProviderDescriptor | undefined, value: string): IDisposable {\n\t\tconst disposables = new DisposableStore();\n\n\t\t// Remember as last visible picker and clean up once picker get's disposed\n\t\tconst visibleQuickAccess = this.visibleQuickAccess = { picker, descriptor, value };\n\t\tdisposables.add(toDisposable(() => {\n\t\t\tif (visibleQuickAccess === this.visibleQuickAccess) {\n\t\t\t\tthis.visibleQuickAccess = undefined;\n\t\t\t}\n\t\t}));\n\n\t\t// Whenever the value changes, check if the provider has\n\t\t// changed and if so - re-create the picker from the beginning\n\t\tdisposables.add(picker.onDidChangeValue(value => {\n\t\t\tconst [providerForValue] = this.getOrInstantiateProvider(value);\n\t\t\tif (providerForValue !== provider) {\n\t\t\t\tthis.show(value, { preserveValue: true } /* do not rewrite value from user typing! */);\n\t\t\t} else {\n\t\t\t\tvisibleQuickAccess.value = value; // remember the value in our visible one\n\t\t\t}\n\t\t}));\n\n\t\t// Remember picker input for future use when accepting\n\t\tif (descriptor) {\n\t\t\tdisposables.add(picker.onDidAccept(() => {\n\t\t\t\tthis.lastAcceptedPickerValues.set(descriptor, picker.value);\n\t\t\t}));\n\t\t}\n\n\t\treturn disposables;\n\t}\n\n\tprivate getOrInstantiateProvider(value: string): [IQuickAccessProvider | undefined, IQuickAccessProviderDescriptor | undefined] {\n\t\tconst providerDescriptor = this.registry.getQuickAccessProvider(value);\n\t\tif (!providerDescriptor) {\n\t\t\treturn [undefined, undefined];\n\t\t}\n\n\t\tlet provider = this.mapProviderToDescriptor.get(providerDescriptor);\n\t\tif (!provider) {\n\t\t\tprovider = this.instantiationService.createInstance(providerDescriptor.ctor);\n\t\t\tthis.mapProviderToDescriptor.set(providerDescriptor, provider);\n\t\t}\n\n\t\treturn [provider, providerDescriptor];\n\t}\n}\n"]}