{"version":3,"file":"pickerQuickAccess.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/quickinput/browser/pickerQuickAccess.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IQuickPick, IQuickPickItem } from 'vs/platform/quickinput/common/quickInput';\nimport { CancellationToken, CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { IQuickPickSeparator, IKeyMods, IQuickPickAcceptEvent } from 'vs/base/parts/quickinput/common/quickInput';\nimport { IQuickAccessProvider } from 'vs/platform/quickinput/common/quickAccess';\nimport { IDisposable, DisposableStore, Disposable, MutableDisposable } from 'vs/base/common/lifecycle';\nimport { timeout } from 'vs/base/common/async';\n\nexport enum TriggerAction {\n\n\t/**\n\t * Do nothing after the button was clicked.\n\t */\n\tNO_ACTION,\n\n\t/**\n\t * Close the picker.\n\t */\n\tCLOSE_PICKER,\n\n\t/**\n\t * Update the results of the picker.\n\t */\n\tREFRESH_PICKER,\n\n\t/**\n\t * Remove the item from the picker.\n\t */\n\tREMOVE_ITEM\n}\n\nexport interface IPickerQuickAccessItem extends IQuickPickItem {\n\n\t/**\n\t* A method that will be executed when the pick item is accepted from\n\t* the picker. The picker will close automatically before running this.\n\t*\n\t* @param keyMods the state of modifier keys when the item was accepted.\n\t* @param event the underlying event that caused the accept to trigger.\n\t*/\n\taccept?(keyMods: IKeyMods, event: IQuickPickAcceptEvent): void;\n\n\t/**\n\t * A method that will be executed when a button of the pick item was\n\t * clicked on.\n\t *\n\t * @param buttonIndex index of the button of the item that\n\t * was clicked.\n\t *\n\t * @param the state of modifier keys when the button was triggered.\n\t *\n\t * @returns a value that indicates what should happen after the trigger\n\t * which can be a `Promise` for long running operations.\n\t */\n\ttrigger?(buttonIndex: number, keyMods: IKeyMods): TriggerAction | Promise<TriggerAction>;\n}\n\nexport interface IPickerQuickAccessProviderOptions<T extends IPickerQuickAccessItem> {\n\n\t/**\n\t * Enables support for opening picks in the background via gesture.\n\t */\n\tcanAcceptInBackground?: boolean;\n\n\t/**\n\t * Enables to show a pick entry when no results are returned from a search.\n\t */\n\tnoResultsPick?: T;\n}\n\nexport type Pick<T> = T | IQuickPickSeparator;\nexport type PicksWithActive<T> = { items: readonly Pick<T>[], active?: T };\nexport type Picks<T> = readonly Pick<T>[] | PicksWithActive<T>;\nexport type FastAndSlowPicks<T> = { picks: Picks<T>, additionalPicks: Promise<Picks<T>> };\n\nfunction isPicksWithActive<T>(obj: unknown): obj is PicksWithActive<T> {\n\tconst candidate = obj as PicksWithActive<T>;\n\n\treturn Array.isArray(candidate.items);\n}\n\nfunction isFastAndSlowPicks<T>(obj: unknown): obj is FastAndSlowPicks<T> {\n\tconst candidate = obj as FastAndSlowPicks<T>;\n\n\treturn !!candidate.picks && candidate.additionalPicks instanceof Promise;\n}\n\nexport abstract class PickerQuickAccessProvider<T extends IPickerQuickAccessItem> extends Disposable implements IQuickAccessProvider {\n\n\tprivate static FAST_PICKS_RACE_DELAY = 200; // timeout before we accept fast results before slow results are present\n\n\tconstructor(private prefix: string, protected options?: IPickerQuickAccessProviderOptions<T>) {\n\t\tsuper();\n\t}\n\n\tprovide(picker: IQuickPick<T>, token: CancellationToken): IDisposable {\n\t\tconst disposables = new DisposableStore();\n\n\t\t// Apply options if any\n\t\tpicker.canAcceptInBackground = !!this.options?.canAcceptInBackground;\n\n\t\t// Disable filtering & sorting, we control the results\n\t\tpicker.matchOnLabel = picker.matchOnDescription = picker.matchOnDetail = picker.sortByLabel = false;\n\n\t\t// Set initial picks and update on type\n\t\tlet picksCts: CancellationTokenSource | undefined = undefined;\n\t\tconst picksDisposable = disposables.add(new MutableDisposable());\n\t\tconst updatePickerItems = async () => {\n\t\t\tconst picksDisposables = picksDisposable.value = new DisposableStore();\n\n\t\t\t// Cancel any previous ask for picks and busy\n\t\t\tpicksCts?.dispose(true);\n\t\t\tpicker.busy = false;\n\n\t\t\t// Create new cancellation source for this run\n\t\t\tpicksCts = new CancellationTokenSource(token);\n\n\t\t\t// Collect picks and support both long running and short or combined\n\t\t\tconst picksToken = picksCts.token;\n\t\t\tconst picksFilter = picker.value.substr(this.prefix.length).trim();\n\t\t\tconst providedPicks = this.getPicks(picksFilter, picksDisposables, picksToken);\n\n\t\t\tconst applyPicks = (picks: Picks<T>, skipEmpty?: boolean): boolean => {\n\t\t\t\tlet items: readonly Pick<T>[];\n\t\t\t\tlet activeItem: T | undefined = undefined;\n\n\t\t\t\tif (isPicksWithActive(picks)) {\n\t\t\t\t\titems = picks.items;\n\t\t\t\t\tactiveItem = picks.active;\n\t\t\t\t} else {\n\t\t\t\t\titems = picks;\n\t\t\t\t}\n\n\t\t\t\tif (items.length === 0) {\n\t\t\t\t\tif (skipEmpty) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (picksFilter.length > 0 && this.options?.noResultsPick) {\n\t\t\t\t\t\titems = [this.options.noResultsPick];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tpicker.items = items;\n\t\t\t\tif (activeItem) {\n\t\t\t\t\tpicker.activeItems = [activeItem];\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t};\n\n\t\t\t// No Picks\n\t\t\tif (providedPicks === null) {\n\t\t\t\t// Ignore\n\t\t\t}\n\n\t\t\t// Fast and Slow Picks\n\t\t\telse if (isFastAndSlowPicks(providedPicks)) {\n\t\t\t\tlet fastPicksApplied = false;\n\t\t\t\tlet slowPicksApplied = false;\n\n\t\t\t\tawait Promise.all([\n\n\t\t\t\t\t// Fast Picks: to reduce amount of flicker, we race against\n\t\t\t\t\t// the slow picks over 500ms and then set the fast picks.\n\t\t\t\t\t// If the slow picks are faster, we reduce the flicker by\n\t\t\t\t\t// only setting the items once.\n\t\t\t\t\t(async () => {\n\t\t\t\t\t\tawait timeout(PickerQuickAccessProvider.FAST_PICKS_RACE_DELAY);\n\t\t\t\t\t\tif (picksToken.isCancellationRequested) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!slowPicksApplied) {\n\t\t\t\t\t\t\tfastPicksApplied = applyPicks(providedPicks.picks, true /* skip over empty to reduce flicker */);\n\t\t\t\t\t\t}\n\t\t\t\t\t})(),\n\n\t\t\t\t\t// Slow Picks: we await the slow picks and then set them at\n\t\t\t\t\t// once together with the fast picks, but only if we actually\n\t\t\t\t\t// have additional results.\n\t\t\t\t\t(async () => {\n\t\t\t\t\t\tpicker.busy = true;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst awaitedAdditionalPicks = await providedPicks.additionalPicks;\n\t\t\t\t\t\t\tif (picksToken.isCancellationRequested) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tlet picks: readonly Pick<T>[];\n\t\t\t\t\t\t\tlet activePick: Pick<T> | undefined = undefined;\n\t\t\t\t\t\t\tif (isPicksWithActive(providedPicks.picks)) {\n\t\t\t\t\t\t\t\tpicks = providedPicks.picks.items;\n\t\t\t\t\t\t\t\tactivePick = providedPicks.picks.active;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tpicks = providedPicks.picks;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tlet additionalPicks: readonly Pick<T>[];\n\t\t\t\t\t\t\tlet additionalActivePick: Pick<T> | undefined = undefined;\n\t\t\t\t\t\t\tif (isPicksWithActive(awaitedAdditionalPicks)) {\n\t\t\t\t\t\t\t\tadditionalPicks = awaitedAdditionalPicks.items;\n\t\t\t\t\t\t\t\tadditionalActivePick = awaitedAdditionalPicks.active;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tadditionalPicks = awaitedAdditionalPicks;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (additionalPicks.length > 0 || !fastPicksApplied) {\n\t\t\t\t\t\t\t\t// If we do not have any activePick or additionalActivePick\n\t\t\t\t\t\t\t\t// we try to preserve the currently active pick from the\n\t\t\t\t\t\t\t\t// fast results. This fixes an issue where the user might\n\t\t\t\t\t\t\t\t// have made a pick active before the additional results\n\t\t\t\t\t\t\t\t// kick in.\n\t\t\t\t\t\t\t\t// See https://github.com/microsoft/vscode/issues/102480\n\t\t\t\t\t\t\t\tlet fallbackActivePick: Pick<T> | undefined = undefined;\n\t\t\t\t\t\t\t\tif (!activePick && !additionalActivePick) {\n\t\t\t\t\t\t\t\t\tconst fallbackActivePickCandidate = picker.activeItems[0];\n\t\t\t\t\t\t\t\t\tif (fallbackActivePickCandidate && picks.indexOf(fallbackActivePickCandidate) !== -1) {\n\t\t\t\t\t\t\t\t\t\tfallbackActivePick = fallbackActivePickCandidate;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tapplyPicks({\n\t\t\t\t\t\t\t\t\titems: [...picks, ...additionalPicks],\n\t\t\t\t\t\t\t\t\tactive: activePick || additionalActivePick || fallbackActivePick\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tif (!picksToken.isCancellationRequested) {\n\t\t\t\t\t\t\t\tpicker.busy = false;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tslowPicksApplied = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t})()\n\t\t\t\t]);\n\t\t\t}\n\n\t\t\t// Fast Picks\n\t\t\telse if (!(providedPicks instanceof Promise)) {\n\t\t\t\tapplyPicks(providedPicks);\n\t\t\t}\n\n\t\t\t// Slow Picks\n\t\t\telse {\n\t\t\t\tpicker.busy = true;\n\t\t\t\ttry {\n\t\t\t\t\tconst awaitedPicks = await providedPicks;\n\t\t\t\t\tif (picksToken.isCancellationRequested) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tapplyPicks(awaitedPicks);\n\t\t\t\t} finally {\n\t\t\t\t\tif (!picksToken.isCancellationRequested) {\n\t\t\t\t\t\tpicker.busy = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tdisposables.add(picker.onDidChangeValue(() => updatePickerItems()));\n\t\tupdatePickerItems();\n\n\t\t// Accept the pick on accept and hide picker\n\t\tdisposables.add(picker.onDidAccept(event => {\n\t\t\tconst [item] = picker.selectedItems;\n\t\t\tif (typeof item?.accept === 'function') {\n\t\t\t\tif (!event.inBackground) {\n\t\t\t\t\tpicker.hide(); // hide picker unless we accept in background\n\t\t\t\t}\n\n\t\t\t\titem.accept(picker.keyMods, event);\n\t\t\t}\n\t\t}));\n\n\t\t// Trigger the pick with button index if button triggered\n\t\tdisposables.add(picker.onDidTriggerItemButton(async ({ button, item }) => {\n\t\t\tif (typeof item.trigger === 'function') {\n\t\t\t\tconst buttonIndex = item.buttons?.indexOf(button) ?? -1;\n\t\t\t\tif (buttonIndex >= 0) {\n\t\t\t\t\tconst result = item.trigger(buttonIndex, picker.keyMods);\n\t\t\t\t\tconst action = (typeof result === 'number') ? result : await result;\n\n\t\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tswitch (action) {\n\t\t\t\t\t\tcase TriggerAction.NO_ACTION:\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase TriggerAction.CLOSE_PICKER:\n\t\t\t\t\t\t\tpicker.hide();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase TriggerAction.REFRESH_PICKER:\n\t\t\t\t\t\t\tupdatePickerItems();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase TriggerAction.REMOVE_ITEM:\n\t\t\t\t\t\t\tconst index = picker.items.indexOf(item);\n\t\t\t\t\t\t\tif (index !== -1) {\n\t\t\t\t\t\t\t\tconst items = picker.items.slice();\n\t\t\t\t\t\t\t\titems.splice(index, 1);\n\t\t\t\t\t\t\t\tpicker.items = items;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\treturn disposables;\n\t}\n\n\t/**\n\t * Returns an array of picks and separators as needed. If the picks are resolved\n\t * long running, the provided cancellation token should be used to cancel the\n\t * operation when the token signals this.\n\t *\n\t * The implementor is responsible for filtering and sorting the picks given the\n\t * provided `filter`.\n\t *\n\t * @param filter a filter to apply to the picks.\n\t * @param disposables can be used to register disposables that should be cleaned\n\t * up when the picker closes.\n\t * @param token for long running tasks, implementors need to check on cancellation\n\t * through this token.\n\t * @returns the picks either directly, as promise or combined fast and slow results.\n\t * Pickers can return `null` to signal that no change in picks is needed.\n\t */\n\tprotected abstract getPicks(filter: string, disposables: DisposableStore, token: CancellationToken): Picks<T> | Promise<Picks<T>> | FastAndSlowPicks<T> | null;\n}\n"]}