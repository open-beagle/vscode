{"version":3,"sources":["vs/platform/quickinput/browser/helpQuickAccess.ts"],"names":[],"mappings":"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","file":"helpQuickAccess.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IQuickPick, IQuickPickItem, IQuickInputService } from 'vs/platform/quickinput/common/quickInput';\nimport { IQuickAccessProvider, IQuickAccessRegistry, Extensions } from 'vs/platform/quickinput/common/quickAccess';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { localize } from 'vs/nls';\nimport { DisposableStore, IDisposable } from 'vs/base/common/lifecycle';\n\ninterface IHelpQuickAccessPickItem extends IQuickPickItem {\n\tprefix: string;\n}\n\nexport class HelpQuickAccessProvider implements IQuickAccessProvider {\n\n\tstatic PREFIX = '?';\n\n\tprivate readonly registry = Registry.as<IQuickAccessRegistry>(Extensions.Quickaccess);\n\n\tconstructor(@IQuickInputService private readonly quickInputService: IQuickInputService) { }\n\n\tprovide(picker: IQuickPick<IHelpQuickAccessPickItem>): IDisposable {\n\t\tconst disposables = new DisposableStore();\n\n\t\t// Open a picker with the selected value if picked\n\t\tdisposables.add(picker.onDidAccept(() => {\n\t\t\tconst [item] = picker.selectedItems;\n\t\t\tif (item) {\n\t\t\t\tthis.quickInputService.quickAccess.show(item.prefix, { preserveValue: true });\n\t\t\t}\n\t\t}));\n\n\t\t// Also open a picker when we detect the user typed the exact\n\t\t// name of a provider (e.g. `?term` for terminals)\n\t\tdisposables.add(picker.onDidChangeValue(value => {\n\t\t\tconst providerDescriptor = this.registry.getQuickAccessProvider(value.substr(HelpQuickAccessProvider.PREFIX.length));\n\t\t\tif (providerDescriptor && providerDescriptor.prefix && providerDescriptor.prefix !== HelpQuickAccessProvider.PREFIX) {\n\t\t\t\tthis.quickInputService.quickAccess.show(providerDescriptor.prefix, { preserveValue: true });\n\t\t\t}\n\t\t}));\n\n\t\t// Fill in all providers separated by editor/global scope\n\t\tconst { editorProviders, globalProviders } = this.getQuickAccessProviders();\n\t\tpicker.items = editorProviders.length === 0 || globalProviders.length === 0 ?\n\n\t\t\t// Without groups\n\t\t\t[\n\t\t\t\t...(editorProviders.length === 0 ? globalProviders : editorProviders)\n\t\t\t] :\n\n\t\t\t// With groups\n\t\t\t[\n\t\t\t\t{ label: localize('globalCommands', \"global commands\"), type: 'separator' },\n\t\t\t\t...globalProviders,\n\t\t\t\t{ label: localize('editorCommands', \"editor commands\"), type: 'separator' },\n\t\t\t\t...editorProviders\n\t\t\t];\n\n\t\treturn disposables;\n\t}\n\n\tprivate getQuickAccessProviders(): { editorProviders: IHelpQuickAccessPickItem[], globalProviders: IHelpQuickAccessPickItem[] } {\n\t\tconst globalProviders: IHelpQuickAccessPickItem[] = [];\n\t\tconst editorProviders: IHelpQuickAccessPickItem[] = [];\n\n\t\tfor (const provider of this.registry.getQuickAccessProviders().sort((providerA, providerB) => providerA.prefix.localeCompare(providerB.prefix))) {\n\t\t\tif (provider.prefix === HelpQuickAccessProvider.PREFIX) {\n\t\t\t\tcontinue; // exclude help which is already active\n\t\t\t}\n\n\t\t\tfor (const helpEntry of provider.helpEntries) {\n\t\t\t\tconst prefix = helpEntry.prefix || provider.prefix;\n\t\t\t\tconst label = prefix || '\\u2026' /* ... */;\n\n\t\t\t\t(helpEntry.needsEditor ? editorProviders : globalProviders).push({\n\t\t\t\t\tprefix,\n\t\t\t\t\tlabel,\n\t\t\t\t\tariaLabel: localize('helpPickAriaLabel', \"{0}, {1}\", label, helpEntry.description),\n\t\t\t\t\tdescription: helpEntry.description\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\treturn { editorProviders, globalProviders };\n\t}\n}\n\n"]}