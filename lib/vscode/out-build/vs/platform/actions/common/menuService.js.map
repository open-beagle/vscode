{"version":3,"file":"menuService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/actions/common/menuService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAShG,IAAa,WAAW,GAAxB,MAAa,WAAW;QAIvB,YACmC,eAAgC;YAAhC,oBAAe,GAAf,eAAe,CAAiB;YAElE,EAAE;QACH,CAAC;QAED;;;;;WAKG;QACH,UAAU,CAAC,EAAU,EAAE,iBAAqC,EAAE,8BAAuC,KAAK;YACzG,OAAO,IAAI,IAAI,CAAC,EAAE,EAAE,2BAA2B,EAAE,IAAI,CAAC,eAAe,EAAE,iBAAiB,EAAE,IAAI,CAAC,CAAC;QACjG,CAAC;KACD,CAAA;IAnBY,WAAW;QAKrB,WAAA,0BAAe,CAAA;OALL,WAAW,CAmBvB;IAnBY,kCAAW;IAwBxB,IAAM,IAAI,GAAV,MAAM,IAAI;QAUT,YACkB,GAAW,EACX,4BAAqC,EACpB,eAAgC,EAC7B,kBAAsC,EAC5C,YAA0B;YAJxC,QAAG,GAAH,GAAG,CAAQ;YACX,iCAA4B,GAA5B,4BAA4B,CAAS;YACpB,oBAAe,GAAf,eAAe,CAAiB;YAC7B,uBAAkB,GAAlB,kBAAkB,CAAoB;YAC5C,iBAAY,GAAZ,YAAY,CAAc;YAbzC,gBAAW,GAAG,IAAI,2BAAe,EAAE,CAAC;YAEpC,iBAAY,GAAG,IAAI,eAAO,EAAS,CAAC;YAC5C,gBAAW,GAAiB,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;YAErD,gBAAW,GAAoB,EAAE,CAAC;YAClC,iBAAY,GAAgB,IAAI,GAAG,EAAE,CAAC;YAS7C,IAAI,CAAC,MAAM,EAAE,CAAC;YAEd,0DAA0D;YAC1D,wBAAwB;YACxB,MAAM,eAAe,GAAG,IAAI,wBAAgB,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,EAAE,CAAC,CAAC;YACtE,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;YACtC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,sBAAY,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE;gBACrD,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;oBACf,eAAe,CAAC,QAAQ,EAAE,CAAC;iBAC3B;YACF,CAAC,CAAC,CAAC,CAAC;YAEJ,6DAA6D;YAC7D,cAAc;YACd,MAAM,cAAc,GAAG,IAAI,wBAAgB,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;YACpF,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;YACrC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,CAAC,CAAC,EAAE;gBAC9D,IAAI,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE;oBACrC,cAAc,CAAC,QAAQ,EAAE,CAAC;iBAC1B;YACF,CAAC,CAAC,CAAC,CAAC;QACL,CAAC;QAED,OAAO;YACN,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;YAC3B,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;QAC7B,CAAC;QAEO,MAAM;YAEb,QAAQ;YACR,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC;YAC5B,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;YAE1B,MAAM,SAAS,GAAG,sBAAY,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAEtD,IAAI,KAAgC,CAAC;YACrC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;YAEvC,KAAK,IAAI,IAAI,IAAI,SAAS,EAAE;gBAC3B,mBAAmB;gBACnB,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC;gBACnC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,SAAS,EAAE;oBACrC,KAAK,GAAG,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;oBACxB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;iBAC7B;gBACD,KAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAErB,yBAAyB;gBACzB,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;aAC/B;YACD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC9B,CAAC;QAEO,mBAAmB,CAAC,IAA8B;YAEzD,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;YAErD,IAAI,CAAA,GAAA,qBAAW,CAAA,CAAC,IAAI,CAAC,EAAE;gBACtB,iDAAiD;gBACjD,IAAI,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE;oBAC9B,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;iBACrE;gBACD,4CAA4C;gBAC5C,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;oBACzB,MAAM,iBAAiB,GAA0B,IAAI,CAAC,OAAO,CAAC,OAA+C,CAAC,SAAS,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;oBAChJ,IAAI,CAAC,iBAAiB,CAAC,iBAAiB,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;iBAC7D;aAED;iBAAM,IAAI,IAAI,CAAC,4BAA4B,EAAE;gBAC7C,8DAA8D;gBAC9D,6DAA6D;gBAC7D,sBAAY,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC;aAChF;QACF,CAAC;QAED,UAAU,CAAC,OAA4B;YACtC,MAAM,MAAM,GAA0D,EAAE,CAAC;YACzE,KAAK,IAAI,KAAK,IAAI,IAAI,CAAC,WAAW,EAAE;gBACnC,MAAM,CAAC,EAAE,EAAE,KAAK,CAAC,GAAG,KAAK,CAAC;gBAC1B,MAAM,aAAa,GAA8C,EAAE,CAAC;gBACpE,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;oBACzB,IAAI,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;wBAC3D,MAAM,MAAM,GAAG,CAAA,GAAA,qBAAW,CAAA,CAAC,IAAI,CAAC;4BAC/B,CAAC,CAAC,IAAI,wBAAc,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,GAAG,EAAE,OAAO,EAAE,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,eAAe,CAAC;4BACpG,CAAC,CAAC,IAAI,2BAAiB,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,kBAAkB,EAAE,OAAO,CAAC,CAAC;wBAEpF,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;qBAC3B;iBACD;gBACD,IAAI,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE;oBAC7B,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,aAAa,CAAC,CAAC,CAAC;iBACjC;aACD;YACD,OAAO,MAAM,CAAC;QACf,CAAC;QAEO,MAAM,CAAC,iBAAiB,CAAC,GAAqC,EAAE,GAAgB;YACvF,IAAI,GAAG,EAAE;gBACR,KAAK,IAAI,GAAG,IAAI,GAAG,CAAC,IAAI,EAAE,EAAE;oBAC3B,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;iBACb;aACD;QACF,CAAC;QAEO,MAAM,CAAC,iBAAiB,CAAC,CAA2B,EAAE,CAA2B;YAExF,IAAI,MAAM,GAAG,CAAC,CAAC,KAAK,CAAC;YACrB,IAAI,MAAM,GAAG,CAAC,CAAC,KAAK,CAAC;YAErB,IAAI,MAAM,KAAK,MAAM,EAAE;gBAEtB,yBAAyB;gBACzB,IAAI,CAAC,MAAM,EAAE;oBACZ,OAAO,CAAC,CAAC;iBACT;qBAAM,IAAI,CAAC,MAAM,EAAE;oBACnB,OAAO,CAAC,CAAC,CAAC;iBACV;gBAED,iCAAiC;gBACjC,IAAI,MAAM,KAAK,YAAY,EAAE;oBAC5B,OAAO,CAAC,CAAC,CAAC;iBACV;qBAAM,IAAI,MAAM,KAAK,YAAY,EAAE;oBACnC,OAAO,CAAC,CAAC;iBACT;gBAED,0BAA0B;gBAC1B,IAAI,KAAK,GAAG,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;gBACzC,IAAI,KAAK,KAAK,CAAC,EAAE;oBAChB,OAAO,KAAK,CAAC;iBACb;aACD;YAED,kCAAkC;YAClC,IAAI,KAAK,GAAG,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC;YACzB,IAAI,KAAK,GAAG,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC;YACzB,IAAI,KAAK,GAAG,KAAK,EAAE;gBAClB,OAAO,CAAC,CAAC,CAAC;aACV;iBAAM,IAAI,KAAK,GAAG,KAAK,EAAE;gBACzB,OAAO,CAAC,CAAC;aACT;YAED,iBAAiB;YACjB,OAAO,IAAI,CAAC,cAAc,CACzB,CAAA,GAAA,qBAAW,CAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,EAC1C,CAAA,GAAA,qBAAW,CAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAC1C,CAAC;QACH,CAAC;QAEO,MAAM,CAAC,cAAc,CAAC,CAA4B,EAAE,CAA4B;YACvF,MAAM,IAAI,GAAG,OAAO,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;YACpD,MAAM,IAAI,GAAG,OAAO,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;YACpD,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QACjC,CAAC;KACD,CAAA;IA3KK,IAAI;QAaP,WAAA,0BAAe,CAAA;QACf,WAAA,+BAAkB,CAAA;QAClB,WAAA,sBAAY,CAAA;OAfT,IAAI,CA2KT","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { RunOnceScheduler } from 'vs/base/common/async';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { IMenu, IMenuActionOptions, IMenuItem, IMenuService, isIMenuItem, ISubmenuItem, MenuId, MenuItemAction, MenuRegistry, SubmenuItemAction, ILocalizedString } from 'vs/platform/actions/common/actions';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { IContextKeyService, ContextKeyExpression } from 'vs/platform/contextkey/common/contextkey';\n\nexport class MenuService implements IMenuService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@ICommandService private readonly _commandService: ICommandService\n\t) {\n\t\t//\n\t}\n\n\t/**\n\t * Create a new menu for the given menu identifier. A menu sends events when it's entries\n\t * have changed (placement, enablement, checked-state). By default it does send events for\n\t * sub menu entries. That is more expensive and must be explicitly enabled with the\n\t * `emitEventsForSubmenuChanges` flag.\n\t */\n\tcreateMenu(id: MenuId, contextKeyService: IContextKeyService, emitEventsForSubmenuChanges: boolean = false): IMenu {\n\t\treturn new Menu(id, emitEventsForSubmenuChanges, this._commandService, contextKeyService, this);\n\t}\n}\n\n\ntype MenuItemGroup = [string, Array<IMenuItem | ISubmenuItem>];\n\nclass Menu implements IMenu {\n\n\tprivate readonly _dispoables = new DisposableStore();\n\n\tprivate readonly _onDidChange = new Emitter<IMenu>();\n\treadonly onDidChange: Event<IMenu> = this._onDidChange.event;\n\n\tprivate _menuGroups: MenuItemGroup[] = [];\n\tprivate _contextKeys: Set<string> = new Set();\n\n\tconstructor(\n\t\tprivate readonly _id: MenuId,\n\t\tprivate readonly _fireEventsForSubmenuChanges: boolean,\n\t\t@ICommandService private readonly _commandService: ICommandService,\n\t\t@IContextKeyService private readonly _contextKeyService: IContextKeyService,\n\t\t@IMenuService private readonly _menuService: IMenuService\n\t) {\n\t\tthis._build();\n\n\t\t// rebuild this menu whenever the menu registry reports an\n\t\t// event for this MenuId\n\t\tconst rebuildMenuSoon = new RunOnceScheduler(() => this._build(), 50);\n\t\tthis._dispoables.add(rebuildMenuSoon);\n\t\tthis._dispoables.add(MenuRegistry.onDidChangeMenu(e => {\n\t\t\tif (e.has(_id)) {\n\t\t\t\trebuildMenuSoon.schedule();\n\t\t\t}\n\t\t}));\n\n\t\t// when context keys change we need to check if the menu also\n\t\t// has changed\n\t\tconst fireChangeSoon = new RunOnceScheduler(() => this._onDidChange.fire(this), 50);\n\t\tthis._dispoables.add(fireChangeSoon);\n\t\tthis._dispoables.add(_contextKeyService.onDidChangeContext(e => {\n\t\t\tif (e.affectsSome(this._contextKeys)) {\n\t\t\t\tfireChangeSoon.schedule();\n\t\t\t}\n\t\t}));\n\t}\n\n\tdispose(): void {\n\t\tthis._dispoables.dispose();\n\t\tthis._onDidChange.dispose();\n\t}\n\n\tprivate _build(): void {\n\n\t\t// reset\n\t\tthis._menuGroups.length = 0;\n\t\tthis._contextKeys.clear();\n\n\t\tconst menuItems = MenuRegistry.getMenuItems(this._id);\n\n\t\tlet group: MenuItemGroup | undefined;\n\t\tmenuItems.sort(Menu._compareMenuItems);\n\n\t\tfor (let item of menuItems) {\n\t\t\t// group by groupId\n\t\t\tconst groupName = item.group || '';\n\t\t\tif (!group || group[0] !== groupName) {\n\t\t\t\tgroup = [groupName, []];\n\t\t\t\tthis._menuGroups.push(group);\n\t\t\t}\n\t\t\tgroup![1].push(item);\n\n\t\t\t// keep keys for eventing\n\t\t\tthis._collectContextKeys(item);\n\t\t}\n\t\tthis._onDidChange.fire(this);\n\t}\n\n\tprivate _collectContextKeys(item: IMenuItem | ISubmenuItem): void {\n\n\t\tMenu._fillInKbExprKeys(item.when, this._contextKeys);\n\n\t\tif (isIMenuItem(item)) {\n\t\t\t// keep precondition keys for event if applicable\n\t\t\tif (item.command.precondition) {\n\t\t\t\tMenu._fillInKbExprKeys(item.command.precondition, this._contextKeys);\n\t\t\t}\n\t\t\t// keep toggled keys for event if applicable\n\t\t\tif (item.command.toggled) {\n\t\t\t\tconst toggledExpression: ContextKeyExpression = (item.command.toggled as { condition: ContextKeyExpression }).condition || item.command.toggled;\n\t\t\t\tMenu._fillInKbExprKeys(toggledExpression, this._contextKeys);\n\t\t\t}\n\n\t\t} else if (this._fireEventsForSubmenuChanges) {\n\t\t\t// recursively collect context keys from submenus so that this\n\t\t\t// menu fires events when context key changes affect submenus\n\t\t\tMenuRegistry.getMenuItems(item.submenu).forEach(this._collectContextKeys, this);\n\t\t}\n\t}\n\n\tgetActions(options?: IMenuActionOptions): [string, Array<MenuItemAction | SubmenuItemAction>][] {\n\t\tconst result: [string, Array<MenuItemAction | SubmenuItemAction>][] = [];\n\t\tfor (let group of this._menuGroups) {\n\t\t\tconst [id, items] = group;\n\t\t\tconst activeActions: Array<MenuItemAction | SubmenuItemAction> = [];\n\t\t\tfor (const item of items) {\n\t\t\t\tif (this._contextKeyService.contextMatchesRules(item.when)) {\n\t\t\t\t\tconst action = isIMenuItem(item)\n\t\t\t\t\t\t? new MenuItemAction(item.command, item.alt, options, this._contextKeyService, this._commandService)\n\t\t\t\t\t\t: new SubmenuItemAction(item, this._menuService, this._contextKeyService, options);\n\n\t\t\t\t\tactiveActions.push(action);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (activeActions.length > 0) {\n\t\t\t\tresult.push([id, activeActions]);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate static _fillInKbExprKeys(exp: ContextKeyExpression | undefined, set: Set<string>): void {\n\t\tif (exp) {\n\t\t\tfor (let key of exp.keys()) {\n\t\t\t\tset.add(key);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate static _compareMenuItems(a: IMenuItem | ISubmenuItem, b: IMenuItem | ISubmenuItem): number {\n\n\t\tlet aGroup = a.group;\n\t\tlet bGroup = b.group;\n\n\t\tif (aGroup !== bGroup) {\n\n\t\t\t// Falsy groups come last\n\t\t\tif (!aGroup) {\n\t\t\t\treturn 1;\n\t\t\t} else if (!bGroup) {\n\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t\t// 'navigation' group comes first\n\t\t\tif (aGroup === 'navigation') {\n\t\t\t\treturn -1;\n\t\t\t} else if (bGroup === 'navigation') {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t// lexical sort for groups\n\t\t\tlet value = aGroup.localeCompare(bGroup);\n\t\t\tif (value !== 0) {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}\n\n\t\t// sort on priority - default is 0\n\t\tlet aPrio = a.order || 0;\n\t\tlet bPrio = b.order || 0;\n\t\tif (aPrio < bPrio) {\n\t\t\treturn -1;\n\t\t} else if (aPrio > bPrio) {\n\t\t\treturn 1;\n\t\t}\n\n\t\t// sort on titles\n\t\treturn Menu._compareTitles(\n\t\t\tisIMenuItem(a) ? a.command.title : a.title,\n\t\t\tisIMenuItem(b) ? b.command.title : b.title\n\t\t);\n\t}\n\n\tprivate static _compareTitles(a: string | ILocalizedString, b: string | ILocalizedString) {\n\t\tconst aStr = typeof a === 'string' ? a : a.original;\n\t\tconst bStr = typeof b === 'string' ? b : b.original;\n\t\treturn aStr.localeCompare(bStr);\n\t}\n}\n"]}