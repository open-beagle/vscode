{"version":3,"file":"graph.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/instantiation/test/common/graph.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as assert from 'assert';\nimport { Graph } from 'vs/platform/instantiation/common/graph';\n\nsuite('Graph', () => {\n\tlet graph: Graph<string>;\n\n\tsetup(() => {\n\t\tgraph = new Graph<string>(s => s);\n\t});\n\n\ttest('is possible to lookup nodes that don\\'t exist', function () {\n\t\tassert.strictEqual(graph.lookup('ddd'), undefined);\n\t});\n\n\ttest('inserts nodes when not there yet', function () {\n\t\tassert.strictEqual(graph.lookup('ddd'), undefined);\n\t\tassert.strictEqual(graph.lookupOrInsertNode('ddd').data, 'ddd');\n\t\tassert.strictEqual(graph.lookup('ddd')!.data, 'ddd');\n\t});\n\n\ttest('can remove nodes and get length', function () {\n\t\tassert.ok(graph.isEmpty());\n\t\tassert.strictEqual(graph.lookup('ddd'), undefined);\n\t\tassert.strictEqual(graph.lookupOrInsertNode('ddd').data, 'ddd');\n\t\tassert.ok(!graph.isEmpty());\n\t\tgraph.removeNode('ddd');\n\t\tassert.strictEqual(graph.lookup('ddd'), undefined);\n\t\tassert.ok(graph.isEmpty());\n\t});\n\n\ttest('root', () => {\n\t\tgraph.insertEdge('1', '2');\n\t\tlet roots = graph.roots();\n\t\tassert.strictEqual(roots.length, 1);\n\t\tassert.strictEqual(roots[0].data, '2');\n\n\t\tgraph.insertEdge('2', '1');\n\t\troots = graph.roots();\n\t\tassert.strictEqual(roots.length, 0);\n\t});\n\n\ttest('root complex', function () {\n\t\tgraph.insertEdge('1', '2');\n\t\tgraph.insertEdge('1', '3');\n\t\tgraph.insertEdge('3', '4');\n\n\t\tlet roots = graph.roots();\n\t\tassert.strictEqual(roots.length, 2);\n\t\tassert(['2', '4'].every(n => roots.some(node => node.data === n)));\n\t});\n});\n"]}