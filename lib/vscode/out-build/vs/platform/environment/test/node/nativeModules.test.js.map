{"version":3,"file":"nativeModules.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/environment/test/node/nativeModules.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { isMacintosh, isWindows } from 'vs/base/common/platform';\n\nfunction testErrorMessage(module: string): string {\n\treturn `Unable to load \"${module}\" dependency. It was probably not compiled for the right operating system architecture or had missing build tools.`;\n}\n\nsuite('Native Modules (all platforms)', () => {\n\n\ttest('native-is-elevated', async () => {\n\t\tconst isElevated = await import('native-is-elevated');\n\t\tassert.ok(typeof isElevated === 'function', testErrorMessage('native-is-elevated '));\n\t});\n\n\ttest('native-keymap', async () => {\n\t\tconst keyMap = await import('native-keymap');\n\t\tassert.ok(typeof keyMap.getCurrentKeyboardLayout === 'function', testErrorMessage('native-keymap'));\n\t});\n\n\ttest('native-watchdog', async () => {\n\t\tconst watchDog = await import('native-watchdog');\n\t\tassert.ok(typeof watchDog.start === 'function', testErrorMessage('native-watchdog'));\n\t});\n\n\ttest('node-pty', async () => {\n\t\tconst nodePty = await import('node-pty');\n\t\tassert.ok(typeof nodePty.spawn === 'function', testErrorMessage('node-pty'));\n\t});\n\n\ttest('spdlog', async () => {\n\t\tconst spdlog = await import('spdlog');\n\t\tassert.ok(typeof spdlog.createRotatingLogger === 'function', testErrorMessage('spdlog'));\n\t});\n\n\ttest('nsfw', async () => {\n\t\tconst nsfWatcher = await import('nsfw');\n\t\tassert.ok(typeof nsfWatcher === 'function', testErrorMessage('nsfw'));\n\t});\n\n\ttest('vscode-sqlite3', async () => {\n\t\tconst sqlite3 = await import('vscode-sqlite3');\n\t\tassert.ok(typeof sqlite3.Database === 'function', testErrorMessage('vscode-sqlite3'));\n\t});\n});\n\n(!isMacintosh ? suite.skip : suite)('Native Modules (macOS)', () => {\n\n\ttest('chokidar (fsevents)', async () => {\n\t\tconst chokidar = await import('chokidar');\n\t\tconst watcher = chokidar.watch(__dirname);\n\t\tassert.ok(watcher.options.useFsEvents, testErrorMessage('chokidar (fsevents)'));\n\n\t\treturn watcher.close();\n\t});\n});\n\n(!isWindows ? suite.skip : suite)('Native Modules (Windows)', () => {\n\n\ttest('windows-mutex', async () => {\n\t\tconst mutex = await import('windows-mutex');\n\t\tassert.ok(mutex && typeof mutex.isActive === 'function', testErrorMessage('windows-mutex'));\n\t\tassert.ok(typeof mutex.isActive === 'function', testErrorMessage('windows-mutex'));\n\t});\n\n\ttest('windows-foreground-love', async () => {\n\t\tconst foregroundLove = await import('windows-foreground-love');\n\t\tassert.ok(typeof foregroundLove.allowSetForegroundWindow === 'function', testErrorMessage('windows-foreground-love'));\n\t});\n\n\ttest('windows-process-tree', async () => {\n\t\tconst processTree = await import('windows-process-tree');\n\t\tassert.ok(typeof processTree.getProcessTree === 'function', testErrorMessage('windows-process-tree'));\n\t});\n\n\ttest('vscode-windows-registry', async () => {\n\t\tconst windowsRegistry = await import('vscode-windows-registry');\n\t\tassert.ok(typeof windowsRegistry.GetStringRegKey === 'function', testErrorMessage('vscode-windows-registry'));\n\t});\n\n\ttest('vscode-windows-ca-certs', async () => {\n\t\t// @ts-ignore Windows only\n\t\tconst windowsCerts = await import('vscode-windows-ca-certs');\n\t\tconst store = new windowsCerts.Crypt32();\n\t\tassert.ok(windowsCerts, testErrorMessage('vscode-windows-ca-certs'));\n\t\tlet certCount = 0;\n\t\ttry {\n\t\t\twhile (store.next()) {\n\t\t\t\tcertCount++;\n\t\t\t}\n\t\t} finally {\n\t\t\tstore.done();\n\t\t}\n\t\tassert(certCount > 0);\n\t});\n});\n"]}