{"version":3,"file":"environmentMainService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/environment/electron-main/environmentMainService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;IASnF,QAAA,uBAAuB,GAAG,CAAA,GAAA,sCAAsB,CAAA,CAA+C,iCAAmB,CAAC,CAAC;IA+BjI,MAAa,sBAAuB,SAAQ,6CAAwB;QAGnE,IAAI,mBAAmB,KAAa,OAAO,CAAA,GAAA,WAAI,CAAA,CAAC,IAAI,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;QAG5E,IAAI,UAAU,KAAa,OAAO,CAAA,GAAA,WAAI,CAAA,CAAC,IAAI,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;QAGvE,IAAI,oBAAoB,KAAa,OAAO,CAAA,GAAA,WAAI,CAAA,CAAC,IAAI,CAAC,UAAU,EAAE,iBAAiB,CAAC,CAAC,CAAC,CAAC;QAGvF,IAAI,aAAa,KAAa,OAAO,CAAA,GAAA,+BAAqB,CAAA,CAAC,IAAI,CAAC,YAAY,EAAE,MAAM,EAAE,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAGrH,IAAI,OAAO,KAAc,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;QAG3D,IAAI,aAAa,KAAc,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;QAGtE,IAAI,cAAc,KAAc,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;QAGxE,IAAI,aAAa,KAAc,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;QAGtE,IAAI,iBAAiB,KAAyB,OAAO,OAAO,CAAC,GAAG,CAAC,6BAA6B,CAAC,IAAI,SAAS,CAAC,CAAC,CAAC;QAG/G,IAAI,mBAAmB,KAAa,OAAO,CAAA,GAAA,WAAI,CAAA,CAAC,IAAI,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC;KACnF;IA5BA;QADC,oBAAO;qEACoE;IAG5E;QADC,oBAAO;4DAC+D;IAGvE;QADC,oBAAO;sEAC+E;IAGvF;QADC,oBAAO;+DAC6G;IAGrH;QADC,oBAAO;yDACmD;IAG3D;QADC,oBAAO;+DAC8D;IAGtE;QADC,oBAAO;gEACgE;IAGxE;QADC,oBAAO;+DAC8D;IAGtE;QADC,oBAAO;mEACuG;IAG/G;QADC,oBAAO;qEAC2E;IA9BpF,wDA+BC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { join } from 'vs/base/common/path';\nimport { memoize } from 'vs/base/common/decorators';\nimport { refineServiceDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IEnvironmentService, INativeEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { NativeEnvironmentService } from 'vs/platform/environment/node/environmentService';\nimport { createStaticIPCHandle } from 'vs/base/parts/ipc/node/ipc.net';\n\nexport const IEnvironmentMainService = refineServiceDecorator<IEnvironmentService, IEnvironmentMainService>(IEnvironmentService);\n\n/**\n * A subclass of the `INativeEnvironmentService` to be used only in electron-main\n * environments.\n */\nexport interface IEnvironmentMainService extends INativeEnvironmentService {\n\n\t// --- NLS cache path\n\tcachedLanguagesPath: string;\n\n\t// --- backup paths\n\tbackupHome: string;\n\tbackupWorkspacesPath: string;\n\n\t// --- V8 script cache path (ours)\n\tnodeCachedDataDir?: string;\n\n\t// --- V8 script cache path (chrome)\n\tchromeCachedDataDir: string;\n\n\t// --- IPC\n\tmainIPCHandle: string;\n\n\t// --- config\n\tsandbox: boolean;\n\tdriverVerbose: boolean;\n\tdisableUpdates: boolean;\n\tdisableKeytar: boolean;\n}\n\nexport class EnvironmentMainService extends NativeEnvironmentService implements IEnvironmentMainService {\n\n\t@memoize\n\tget cachedLanguagesPath(): string { return join(this.userDataPath, 'clp'); }\n\n\t@memoize\n\tget backupHome(): string { return join(this.userDataPath, 'Backups'); }\n\n\t@memoize\n\tget backupWorkspacesPath(): string { return join(this.backupHome, 'workspaces.json'); }\n\n\t@memoize\n\tget mainIPCHandle(): string { return createStaticIPCHandle(this.userDataPath, 'main', this.productService.version); }\n\n\t@memoize\n\tget sandbox(): boolean { return !!this.args['__sandbox']; }\n\n\t@memoize\n\tget driverVerbose(): boolean { return !!this.args['driver-verbose']; }\n\n\t@memoize\n\tget disableUpdates(): boolean { return !!this.args['disable-updates']; }\n\n\t@memoize\n\tget disableKeytar(): boolean { return !!this.args['disable-keytar']; }\n\n\t@memoize\n\tget nodeCachedDataDir(): string | undefined { return process.env['VSCODE_NODE_CACHED_DATA_DIR'] || undefined; }\n\n\t@memoize\n\tget chromeCachedDataDir(): string { return join(this.userDataPath, 'Code Cache'); }\n}\n"]}