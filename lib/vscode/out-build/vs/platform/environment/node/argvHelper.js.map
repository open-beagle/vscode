{"version":3,"sources":["vs/platform/environment/node/argvHelper.ts"],"names":[],"mappings":"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","file":"argvHelper.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { localize } from 'vs/nls';\nimport { MIN_MAX_MEMORY_SIZE_MB } from 'vs/platform/files/common/files';\nimport { parseArgs, ErrorReporter, OPTIONS } from 'vs/platform/environment/node/argv';\nimport { NativeParsedArgs } from 'vs/platform/environment/common/argv';\nimport { IProcessEnvironment } from 'vs/base/common/platform';\n\nfunction parseAndValidate(cmdLineArgs: string[], reportWarnings: boolean): NativeParsedArgs {\n\tconst errorReporter: ErrorReporter = {\n\t\tonUnknownOption: (id) => {\n\t\t\tconsole.warn(localize('unknownOption', \"Warning: '{0}' is not in the list of known options, but still passed to Electron/Chromium.\", id));\n\t\t},\n\t\tonMultipleValues: (id, val) => {\n\t\t\tconsole.warn(localize('multipleValues', \"Option '{0}' is defined more than once. Using value '{1}.'\", id, val));\n\t\t}\n\t};\n\n\tconst args = parseArgs(cmdLineArgs, OPTIONS, reportWarnings ? errorReporter : undefined);\n\tif (args.goto) {\n\t\targs._.forEach(arg => assert(/^(\\w:)?[^:]+(:\\d*){0,2}$/.test(arg), localize('gotoValidation', \"Arguments in `--goto` mode should be in the format of `FILE(:LINE(:CHARACTER))`.\")));\n\t}\n\n\tif (args['max-memory']) {\n\t\tassert(parseInt(args['max-memory']) >= MIN_MAX_MEMORY_SIZE_MB, `The max-memory argument cannot be specified lower than ${MIN_MAX_MEMORY_SIZE_MB} MB.`);\n\t}\n\n\treturn args;\n}\n\nfunction stripAppPath(argv: string[]): string[] | undefined {\n\tconst index = argv.findIndex(a => !/^-/.test(a));\n\n\tif (index > -1) {\n\t\treturn [...argv.slice(0, index), ...argv.slice(index + 1)];\n\t}\n\treturn undefined;\n}\n\n/**\n * Use this to parse raw code process.argv such as: `Electron . --verbose --wait`\n */\nexport function parseMainProcessArgv(processArgv: string[]): NativeParsedArgs {\n\tlet [, ...args] = processArgv;\n\n\t// If dev, remove the first non-option argument: it's the app location\n\tif (process.env['VSCODE_DEV']) {\n\t\targs = stripAppPath(args) || [];\n\t}\n\n\t// If called from CLI, don't report warnings as they are already reported.\n\tconst reportWarnings = !isLaunchedFromCli(process.env);\n\treturn parseAndValidate(args, reportWarnings);\n}\n\n/**\n * Use this to parse raw code CLI process.argv such as: `Electron cli.js . --verbose --wait`\n */\nexport function parseCLIProcessArgv(processArgv: string[]): NativeParsedArgs {\n\tconst [, , ...args] = processArgv; // remove the first non-option argument: it's always the app location\n\n\treturn parseAndValidate(args, true);\n}\n\nexport function addArg(argv: string[], ...args: string[]): string[] {\n\tconst endOfArgsMarkerIndex = argv.indexOf('--');\n\tif (endOfArgsMarkerIndex === -1) {\n\t\targv.push(...args);\n\t} else {\n\t\t// if the we have an argument \"--\" (end of argument marker)\n\t\t// we cannot add arguments at the end. rather, we add\n\t\t// arguments before the \"--\" marker.\n\t\targv.splice(endOfArgsMarkerIndex, 0, ...args);\n\t}\n\n\treturn argv;\n}\n\nexport function isLaunchedFromCli(env: IProcessEnvironment): boolean {\n\treturn env['VSCODE_CLI'] === '1';\n}\n"]}