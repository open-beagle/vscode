{"version":3,"file":"stdin.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/environment/node/stdin.ts"],"names":[],"mappings":";;;;IAYA,SAAgB,kBAAkB;QACjC,IAAI;YACH,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,gEAAgE;SAC7F;QAAC,OAAO,KAAK,EAAE;YACf,qEAAqE;SACrE;QACD,OAAO,KAAK,CAAC;IACd,CAAC;IAPD,gDAOC;IAED,SAAgB,iBAAiB,CAAC,YAAoB;QACrD,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE;YAC5B,MAAM,YAAY,GAAG,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAEzC,yBAAyB;YACzB,UAAU,CAAC,GAAG,EAAE;gBACf,OAAO,CAAC,KAAK,CAAC,cAAc,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;gBAEnD,OAAO,CAAC,KAAK,CAAC,CAAC;YAChB,CAAC,EAAE,YAAY,CAAC,CAAC;YAEjB,wCAAwC;YACxC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;IACJ,CAAC;IAdD,8CAcC;IAED,SAAgB,gBAAgB;QAC/B,OAAO,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,EAAE,cAAc,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;IACrH,CAAC;IAFD,4CAEC;IAEM,KAAK,UAAU,aAAa,CAAC,UAAkB,EAAE,OAAgB;QAEvE,4BAA4B;QAC5B,MAAM,eAAe,GAAG,EAAE,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;QAEzD,IAAI,QAAQ,GAAG,MAAM,CAAA,GAAA,0CAAuB,CAAA,CAAC,OAAO,CAAC,CAAC;QAEtD,MAAM,KAAK,GAAG,sDAAa,gBAAgB,2BAAC,CAAC;QAC7C,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;YACpC,OAAO,CAAC,GAAG,CAAC,kCAAkC,QAAQ,0BAA0B,CAAC,CAAC;YAClF,QAAQ,GAAG,MAAM,CAAC;SAClB;QAED,8CAA8C;QAC9C,MAAM,OAAO,GAAG,KAAK,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAC3C,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,EAAE,KAAK,CAAC,EAAE,CAAC,eAAe,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAC/E,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE;YAC5B,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;YAC1B,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;gBAC5B,eAAe,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;aAC3B;YACD,eAAe,CAAC,GAAG,EAAE,CAAC;QACvB,CAAC,CAAC,CAAC;QACH,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE,CAAC,eAAe,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;QACnE,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC,CAAC;IAC1D,CAAC;IAzBD,sCAyBC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * This code is also used by standalone cli's. Avoid adding dependencies to keep the size of the cli small.\n */\nimport * as paths from 'vs/base/common/path';\nimport * as fs from 'fs';\nimport * as os from 'os';\nimport { resolveTerminalEncoding } from 'vs/base/node/terminalEncoding';\n\nexport function hasStdinWithoutTty() {\n\ttry {\n\t\treturn !process.stdin.isTTY; // Via https://twitter.com/MylesBorins/status/782009479382626304\n\t} catch (error) {\n\t\t// Windows workaround for https://github.com/nodejs/node/issues/11656\n\t}\n\treturn false;\n}\n\nexport function stdinDataListener(durationinMs: number): Promise<boolean> {\n\treturn new Promise(resolve => {\n\t\tconst dataListener = () => resolve(true);\n\n\t\t// wait for 1s maximum...\n\t\tsetTimeout(() => {\n\t\t\tprocess.stdin.removeListener('data', dataListener);\n\n\t\t\tresolve(false);\n\t\t}, durationinMs);\n\n\t\t// ...but finish early if we detect data\n\t\tprocess.stdin.once('data', dataListener);\n\t});\n}\n\nexport function getStdinFilePath(): string {\n\treturn paths.join(os.tmpdir(), `code-stdin-${Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 3)}.txt`);\n}\n\nexport async function readFromStdin(targetPath: string, verbose: boolean): Promise<void> {\n\n\t// open tmp file for writing\n\tconst stdinFileStream = fs.createWriteStream(targetPath);\n\n\tlet encoding = await resolveTerminalEncoding(verbose);\n\n\tconst iconv = await import('iconv-lite-umd');\n\tif (!iconv.encodingExists(encoding)) {\n\t\tconsole.log(`Unsupported terminal encoding: ${encoding}, falling back to UTF-8.`);\n\t\tencoding = 'utf8';\n\t}\n\n\t// Pipe into tmp file using terminals encoding\n\tconst decoder = iconv.getDecoder(encoding);\n\tprocess.stdin.on('data', chunk => stdinFileStream.write(decoder.write(chunk)));\n\tprocess.stdin.on('end', () => {\n\t\tconst end = decoder.end();\n\t\tif (typeof end === 'string') {\n\t\t\tstdinFileStream.write(end);\n\t\t}\n\t\tstdinFileStream.end();\n\t});\n\tprocess.stdin.on('error', error => stdinFileStream.destroy(error));\n\tprocess.stdin.on('close', () => stdinFileStream.close());\n}\n"]}