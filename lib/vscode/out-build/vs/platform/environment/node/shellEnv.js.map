{"version":3,"file":"shellEnv.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/environment/node/shellEnv.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as path from 'path';\nimport { spawn } from 'child_process';\nimport { generateUuid } from 'vs/base/common/uuid';\nimport { IProcessEnvironment, isWindows, OS } from 'vs/base/common/platform';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { NativeParsedArgs } from 'vs/platform/environment/common/argv';\nimport { isLaunchedFromCli } from 'vs/platform/environment/node/argvHelper';\nimport { toErrorMessage } from 'vs/base/common/errorMessage';\nimport { getSystemShell } from 'vs/base/node/shell';\n\n/**\n * We need to get the environment from a user's shell.\n * This should only be done when Code itself is not launched\n * from within a shell.\n */\nexport async function resolveShellEnv(logService: ILogService, args: NativeParsedArgs, env: IProcessEnvironment): Promise<typeof process.env> {\n\n\t// Skip if --force-disable-user-env\n\tif (args['force-disable-user-env']) {\n\t\tlogService.trace('resolveShellEnv(): skipped (--force-disable-user-env)');\n\n\t\treturn {};\n\t}\n\n\t// Skip on windows\n\telse if (isWindows) {\n\t\tlogService.trace('resolveShellEnv(): skipped (Windows)');\n\n\t\treturn {};\n\t}\n\n\t// Skip if running from CLI already\n\telse if (isLaunchedFromCli(env) && !args['force-user-env']) {\n\t\tlogService.trace('resolveShellEnv(): skipped (VSCODE_CLI is set)');\n\n\t\treturn {};\n\t}\n\n\t// Otherwise resolve (macOS, Linux)\n\telse {\n\t\tif (isLaunchedFromCli(env)) {\n\t\t\tlogService.trace('resolveShellEnv(): running (--force-user-env)');\n\t\t} else {\n\t\t\tlogService.trace('resolveShellEnv(): running (macOS/Linux)');\n\t\t}\n\n\t\tif (!unixShellEnvPromise) {\n\t\t\tunixShellEnvPromise = doResolveUnixShellEnv(logService);\n\t\t}\n\n\t\treturn unixShellEnvPromise;\n\t}\n}\n\nlet unixShellEnvPromise: Promise<typeof process.env> | undefined = undefined;\n\nasync function doResolveUnixShellEnv(logService: ILogService): Promise<typeof process.env> {\n\tconst promise = new Promise<typeof process.env>(async (resolve, reject) => {\n\t\tconst runAsNode = process.env['ELECTRON_RUN_AS_NODE'];\n\t\tlogService.trace('getUnixShellEnvironment#runAsNode', runAsNode);\n\n\t\tconst noAttach = process.env['ELECTRON_NO_ATTACH_CONSOLE'];\n\t\tlogService.trace('getUnixShellEnvironment#noAttach', noAttach);\n\n\t\tconst mark = generateUuid().replace(/-/g, '').substr(0, 12);\n\t\tconst regex = new RegExp(mark + '(.*)' + mark);\n\n\t\tconst env = {\n\t\t\t...process.env,\n\t\t\tELECTRON_RUN_AS_NODE: '1',\n\t\t\tELECTRON_NO_ATTACH_CONSOLE: '1'\n\t\t};\n\n\t\tlogService.trace('getUnixShellEnvironment#env', env);\n\t\tconst systemShellUnix = await getSystemShell(OS, env);\n\t\tlogService.trace('getUnixShellEnvironment#shell', systemShellUnix);\n\n\t\t// handle popular non-POSIX shells\n\t\tconst name = path.basename(systemShellUnix);\n\t\tlet command: string, shellArgs: Array<string>;\n\t\tif (/^pwsh(-preview)?$/.test(name)) {\n\t\t\t// Older versions of PowerShell removes double quotes sometimes so we use \"double single quotes\" which is how\n\t\t\t// you escape single quotes inside of a single quoted string.\n\t\t\tcommand = `& '${process.execPath}' -p '''${mark}'' + JSON.stringify(process.env) + ''${mark}'''`;\n\t\t\tshellArgs = ['-Login', '-Command'];\n\t\t} else {\n\t\t\tcommand = `'${process.execPath}' -p '\"${mark}\" + JSON.stringify(process.env) + \"${mark}\"'`;\n\t\t\tshellArgs = ['-ilc'];\n\t\t}\n\n\t\tlogService.trace('getUnixShellEnvironment#spawn', JSON.stringify(shellArgs), command);\n\n\t\tconst child = spawn(systemShellUnix, [...shellArgs, command], {\n\t\t\tdetached: true,\n\t\t\tstdio: ['ignore', 'pipe', 'pipe'],\n\t\t\tenv\n\t\t});\n\n\t\tchild.on('error', err => {\n\t\t\tlogService.error('getUnixShellEnvironment#errorChildProcess', toErrorMessage(err));\n\t\t\tresolve({});\n\t\t});\n\n\t\tconst buffers: Buffer[] = [];\n\t\tchild.stdout.on('data', b => buffers.push(b));\n\n\t\tconst stderr: Buffer[] = [];\n\t\tchild.stderr.on('data', b => stderr.push(b));\n\n\t\tchild.on('close', (code, signal) => {\n\t\t\tconst raw = Buffer.concat(buffers).toString('utf8');\n\t\t\tlogService.trace('getUnixShellEnvironment#raw', raw);\n\n\t\t\tconst stderrStr = Buffer.concat(stderr).toString('utf8');\n\t\t\tif (stderrStr.trim()) {\n\t\t\t\tlogService.trace('getUnixShellEnvironment#stderr', stderrStr);\n\t\t\t}\n\n\t\t\tif (code || signal) {\n\t\t\t\treturn reject(new Error(`Failed to get environment (code ${code}, signal ${signal})`));\n\t\t\t}\n\n\t\t\tconst match = regex.exec(raw);\n\t\t\tconst rawStripped = match ? match[1] : '{}';\n\n\t\t\ttry {\n\t\t\t\tconst env = JSON.parse(rawStripped);\n\n\t\t\t\tif (runAsNode) {\n\t\t\t\t\tenv['ELECTRON_RUN_AS_NODE'] = runAsNode;\n\t\t\t\t} else {\n\t\t\t\t\tdelete env['ELECTRON_RUN_AS_NODE'];\n\t\t\t\t}\n\n\t\t\t\tif (noAttach) {\n\t\t\t\t\tenv['ELECTRON_NO_ATTACH_CONSOLE'] = noAttach;\n\t\t\t\t} else {\n\t\t\t\t\tdelete env['ELECTRON_NO_ATTACH_CONSOLE'];\n\t\t\t\t}\n\n\t\t\t\t// https://github.com/microsoft/vscode/issues/22593#issuecomment-336050758\n\t\t\t\tdelete env['XDG_RUNTIME_DIR'];\n\n\t\t\t\tlogService.trace('getUnixShellEnvironment#result', env);\n\t\t\t\tresolve(env);\n\t\t\t} catch (err) {\n\t\t\t\tlogService.error('getUnixShellEnvironment#errorCaught', toErrorMessage(err));\n\t\t\t\treject(err);\n\t\t\t}\n\t\t});\n\t});\n\n\ttry {\n\t\treturn await promise;\n\t} catch (error) {\n\t\tlogService.error('getUnixShellEnvironment#error', toErrorMessage(error));\n\n\t\treturn {}; // ignore any errors\n\t}\n}\n"]}