{"version":3,"sources":["vs/platform/extensionManagement/common/extensionManagementCLIService.ts"],"names":[],"mappings":"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","file":"extensionManagementCLIService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\n\nimport { isPromiseCanceledError } from 'vs/base/common/errors';\nimport { URI } from 'vs/base/common/uri';\nimport { gt } from 'vs/base/common/semver/semver';\nimport { CLIOutput, IExtensionGalleryService, IExtensionManagementCLIService, IExtensionManagementService, IGalleryExtension, ILocalExtension, InstallOptions } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { adoptToGalleryExtensionId, areSameExtensions, getGalleryExtensionId } from 'vs/platform/extensionManagement/common/extensionManagementUtil';\nimport { ExtensionType, EXTENSION_CATEGORIES, IExtensionManifest } from 'vs/platform/extensions/common/extensions';\nimport { getBaseLabel } from 'vs/base/common/labels';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { Schemas } from 'vs/base/common/network';\n\nconst notFound = (id: string) => localize('notFound', \"Extension '{0}' not found.\", id);\nconst useId = localize('useId', \"Make sure you use the full extension ID, including the publisher, e.g.: {0}\", 'ms-dotnettools.csharp');\n\n\nfunction getId(manifest: IExtensionManifest, withVersion?: boolean): string {\n\tif (withVersion) {\n\t\treturn `${manifest.publisher}.${manifest.name}@${manifest.version}`;\n\t} else {\n\t\treturn `${manifest.publisher}.${manifest.name}`;\n\t}\n}\n\nconst EXTENSION_ID_REGEX = /^([^.]+\\..+)@(\\d+\\.\\d+\\.\\d+(-.*)?)$/;\n\nexport function getIdAndVersion(id: string): [string, string | undefined] {\n\tconst matches = EXTENSION_ID_REGEX.exec(id);\n\tif (matches && matches[1]) {\n\t\treturn [adoptToGalleryExtensionId(matches[1]), matches[2]];\n\t}\n\treturn [adoptToGalleryExtensionId(id), undefined];\n}\n\ntype InstallExtensionInfo = { id: string, version?: string, installOptions: InstallOptions };\n\n\nexport class ExtensionManagementCLIService implements IExtensionManagementCLIService {\n\n\t_serviceBrand: any;\n\n\tconstructor(\n\t\t@IExtensionManagementService private readonly extensionManagementService: IExtensionManagementService,\n\t\t@IExtensionGalleryService private readonly extensionGalleryService: IExtensionGalleryService\n\t) { }\n\n\tprotected get location(): string | undefined {\n\t\treturn undefined;\n\t}\n\n\tpublic async listExtensions(showVersions: boolean, category?: string, output: CLIOutput = console): Promise<void> {\n\t\tlet extensions = await this.extensionManagementService.getInstalled(ExtensionType.User);\n\t\tconst categories = EXTENSION_CATEGORIES.map(c => c.toLowerCase());\n\t\tif (category && category !== '') {\n\t\t\tif (categories.indexOf(category.toLowerCase()) < 0) {\n\t\t\t\toutput.log('Invalid category please enter a valid category. To list valid categories run --category without a category specified');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\textensions = extensions.filter(e => {\n\t\t\t\tif (e.manifest.categories) {\n\t\t\t\t\tconst lowerCaseCategories: string[] = e.manifest.categories.map(c => c.toLowerCase());\n\t\t\t\t\treturn lowerCaseCategories.indexOf(category.toLowerCase()) > -1;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t});\n\t\t} else if (category === '') {\n\t\t\toutput.log('Possible Categories: ');\n\t\t\tcategories.forEach(category => {\n\t\t\t\toutput.log(category);\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\tif (this.location) {\n\t\t\toutput.log(localize('listFromLocation', \"Extensions installed on {0}:\", this.location));\n\t\t}\n\n\t\textensions = extensions.sort((e1, e2) => e1.identifier.id.localeCompare(e2.identifier.id));\n\t\tlet lastId: string | undefined = undefined;\n\t\tfor (let extension of extensions) {\n\t\t\tif (lastId !== extension.identifier.id) {\n\t\t\t\tlastId = extension.identifier.id;\n\t\t\t\toutput.log(getId(extension.manifest, showVersions));\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic async installExtensions(extensions: (string | URI)[], builtinExtensionIds: string[], isMachineScoped: boolean, force: boolean, output: CLIOutput = console): Promise<void> {\n\t\tconst failed: string[] = [];\n\t\tconst installedExtensionsManifests: IExtensionManifest[] = [];\n\t\tif (extensions.length) {\n\t\t\toutput.log(this.location ? localize('installingExtensionsOnLocation', \"Installing extensions on {0}...\", this.location) : localize('installingExtensions', \"Installing extensions...\"));\n\t\t}\n\n\t\tconst installed = await this.extensionManagementService.getInstalled(ExtensionType.User);\n\t\tconst checkIfNotInstalled = (id: string, version?: string): boolean => {\n\t\t\tconst installedExtension = installed.find(i => areSameExtensions(i.identifier, { id }));\n\t\t\tif (installedExtension) {\n\t\t\t\tif (!version && !force) {\n\t\t\t\t\toutput.log(localize('alreadyInstalled-checkAndUpdate', \"Extension '{0}' v{1} is already installed. Use '--force' option to update to latest version or provide '@<version>' to install a specific version, for example: '{2}@1.2.3'.\", id, installedExtension.manifest.version, id));\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (version && installedExtension.manifest.version === version) {\n\t\t\t\t\toutput.log(localize('alreadyInstalled', \"Extension '{0}' is already installed.\", `${id}@${version}`));\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t};\n\t\tconst vsixs: URI[] = [];\n\t\tconst installExtensionInfos: InstallExtensionInfo[] = [];\n\t\tfor (const extension of extensions) {\n\t\t\tif (extension instanceof URI) {\n\t\t\t\tvsixs.push(extension);\n\t\t\t} else {\n\t\t\t\tconst [id, version] = getIdAndVersion(extension);\n\t\t\t\tif (checkIfNotInstalled(id, version)) {\n\t\t\t\t\tinstallExtensionInfos.push({ id, version, installOptions: { isBuiltin: false, isMachineScoped } });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (const extension of builtinExtensionIds) {\n\t\t\tconst [id, version] = getIdAndVersion(extension);\n\t\t\tif (checkIfNotInstalled(id, version)) {\n\t\t\t\tinstallExtensionInfos.push({ id, version, installOptions: { isBuiltin: true, isMachineScoped: false } });\n\t\t\t}\n\t\t}\n\n\t\tif (vsixs.length) {\n\t\t\tawait Promise.all(vsixs.map(async vsix => {\n\t\t\t\ttry {\n\t\t\t\t\tconst manifest = await this.installVSIX(vsix, { isBuiltin: false, isMachineScoped }, force, output);\n\t\t\t\t\tif (manifest) {\n\t\t\t\t\t\tinstalledExtensionsManifests.push(manifest);\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\toutput.error(err.message || err.stack || err);\n\t\t\t\t\tfailed.push(vsix.toString());\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\n\t\tif (installExtensionInfos.length) {\n\n\t\t\tconst galleryExtensions = await this.getGalleryExtensions(installExtensionInfos);\n\n\t\t\tawait Promise.all(installExtensionInfos.map(async extensionInfo => {\n\t\t\t\tconst gallery = galleryExtensions.get(extensionInfo.id.toLowerCase());\n\t\t\t\tif (gallery) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst manifest = await this.installFromGallery(extensionInfo, gallery, installed, force, output);\n\t\t\t\t\t\tif (manifest) {\n\t\t\t\t\t\t\tinstalledExtensionsManifests.push(manifest);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\toutput.error(err.message || err.stack || err);\n\t\t\t\t\t\tfailed.push(extensionInfo.id);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\toutput.error(`${notFound(extensionInfo.version ? `${extensionInfo.id}@${extensionInfo.version}` : extensionInfo.id)}\\n${useId}`);\n\t\t\t\t\tfailed.push(extensionInfo.id);\n\t\t\t\t}\n\t\t\t}));\n\n\t\t}\n\n\t\tif (failed.length) {\n\t\t\tthrow new Error(localize('installation failed', \"Failed Installing Extensions: {0}\", failed.join(', ')));\n\t\t}\n\t}\n\n\tprivate async installVSIX(vsix: URI, installOptions: InstallOptions, force: boolean, output: CLIOutput): Promise<IExtensionManifest | null> {\n\n\t\tconst manifest = await this.extensionManagementService.getManifest(vsix);\n\t\tif (!manifest) {\n\t\t\tthrow new Error('Invalid vsix');\n\t\t}\n\n\t\tconst valid = await this.validateVSIX(manifest, force, output);\n\t\tif (valid) {\n\t\t\ttry {\n\t\t\t\tawait this.extensionManagementService.install(vsix, installOptions);\n\t\t\t\toutput.log(localize('successVsixInstall', \"Extension '{0}' was successfully installed.\", getBaseLabel(vsix)));\n\t\t\t\treturn manifest;\n\t\t\t} catch (error) {\n\t\t\t\tif (isPromiseCanceledError(error)) {\n\t\t\t\t\toutput.log(localize('cancelVsixInstall', \"Cancelled installing extension '{0}'.\", getBaseLabel(vsix)));\n\t\t\t\t\treturn null;\n\t\t\t\t} else {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate async getGalleryExtensions(extensions: InstallExtensionInfo[]): Promise<Map<string, IGalleryExtension>> {\n\t\tconst extensionIds = extensions.filter(({ version }) => version === undefined).map(({ id }) => id);\n\t\tconst extensionsWithIdAndVersion = extensions.filter(({ version }) => version !== undefined);\n\n\t\tconst galleryExtensions = new Map<string, IGalleryExtension>();\n\t\tawait Promise.all([\n\t\t\t(async () => {\n\t\t\t\tconst result = await this.extensionGalleryService.getExtensions(extensionIds, CancellationToken.None);\n\t\t\t\tresult.forEach(extension => galleryExtensions.set(extension.identifier.id.toLowerCase(), extension));\n\t\t\t})(),\n\t\t\tPromise.all(extensionsWithIdAndVersion.map(async ({ id, version }) => {\n\t\t\t\tconst extension = await this.extensionGalleryService.getCompatibleExtension({ id }, version);\n\t\t\t\tif (extension) {\n\t\t\t\t\tgalleryExtensions.set(extension.identifier.id.toLowerCase(), extension);\n\t\t\t\t}\n\t\t\t}))\n\t\t]);\n\n\t\treturn galleryExtensions;\n\t}\n\n\tprivate async installFromGallery({ id, version, installOptions }: InstallExtensionInfo, galleryExtension: IGalleryExtension, installed: ILocalExtension[], force: boolean, output: CLIOutput): Promise<IExtensionManifest | null> {\n\t\tconst manifest = await this.extensionGalleryService.getManifest(galleryExtension, CancellationToken.None);\n\t\tif (manifest && !this.validateExtensionKind(manifest, output)) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst installedExtension = installed.find(e => areSameExtensions(e.identifier, galleryExtension.identifier));\n\t\tif (installedExtension) {\n\t\t\tif (galleryExtension.version === installedExtension.manifest.version) {\n\t\t\t\toutput.log(localize('alreadyInstalled', \"Extension '{0}' is already installed.\", version ? `${id}@${version}` : id));\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\toutput.log(localize('updateMessage', \"Updating the extension '{0}' to the version {1}\", id, galleryExtension.version));\n\t\t}\n\n\t\ttry {\n\t\t\tif (installOptions.isBuiltin) {\n\t\t\t\toutput.log(localize('installing builtin ', \"Installing builtin extension '{0}' v{1}...\", id, galleryExtension.version));\n\t\t\t} else {\n\t\t\t\toutput.log(localize('installing', \"Installing extension '{0}' v{1}...\", id, galleryExtension.version));\n\t\t\t}\n\n\t\t\tawait this.extensionManagementService.installFromGallery(galleryExtension, installOptions);\n\t\t\toutput.log(localize('successInstall', \"Extension '{0}' v{1} was successfully installed.\", id, galleryExtension.version));\n\t\t\treturn manifest;\n\t\t} catch (error) {\n\t\t\tif (isPromiseCanceledError(error)) {\n\t\t\t\toutput.log(localize('cancelInstall', \"Cancelled installing extension '{0}'.\", id));\n\t\t\t\treturn null;\n\t\t\t} else {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected validateExtensionKind(_manifest: IExtensionManifest, output: CLIOutput): boolean {\n\t\treturn true;\n\t}\n\n\tprivate async validateVSIX(manifest: IExtensionManifest, force: boolean, output: CLIOutput): Promise<boolean> {\n\t\tconst extensionIdentifier = { id: getGalleryExtensionId(manifest.publisher, manifest.name) };\n\t\tconst installedExtensions = await this.extensionManagementService.getInstalled(ExtensionType.User);\n\t\tconst newer = installedExtensions.find(local => areSameExtensions(extensionIdentifier, local.identifier) && gt(local.manifest.version, manifest.version));\n\n\t\tif (newer && !force) {\n\t\t\toutput.log(localize('forceDowngrade', \"A newer version of extension '{0}' v{1} is already installed. Use '--force' option to downgrade to older version.\", newer.identifier.id, newer.manifest.version, manifest.version));\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this.validateExtensionKind(manifest, output);\n\t}\n\n\tpublic async uninstallExtensions(extensions: (string | URI)[], force: boolean, output: CLIOutput = console): Promise<void> {\n\t\tconst getExtensionId = async (extensionDescription: string | URI): Promise<string> => {\n\t\t\tif (extensionDescription instanceof URI) {\n\t\t\t\tconst manifest = await this.extensionManagementService.getManifest(extensionDescription);\n\t\t\t\treturn getId(manifest);\n\t\t\t}\n\t\t\treturn extensionDescription;\n\t\t};\n\n\t\tconst uninstalledExtensions: ILocalExtension[] = [];\n\t\tfor (const extension of extensions) {\n\t\t\tconst id = await getExtensionId(extension);\n\t\t\tconst installed = await this.extensionManagementService.getInstalled();\n\t\t\tconst extensionsToUninstall = installed.filter(e => areSameExtensions(e.identifier, { id }));\n\t\t\tif (!extensionsToUninstall.length) {\n\t\t\t\tthrow new Error(`${this.notInstalled(id)}\\n${useId}`);\n\t\t\t}\n\t\t\tif (extensionsToUninstall.some(e => e.type === ExtensionType.System)) {\n\t\t\t\toutput.log(localize('builtin', \"Extension '{0}' is a Built-in extension and cannot be uninstalled\", id));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!force && extensionsToUninstall.some(e => e.isBuiltin)) {\n\t\t\t\toutput.log(localize('forceUninstall', \"Extension '{0}' is marked as a Built-in extension by user. Please use '--force' option to uninstall it.\", id));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\toutput.log(localize('uninstalling', \"Uninstalling {0}...\", id));\n\t\t\tfor (const extensionToUninstall of extensionsToUninstall) {\n\t\t\t\tawait this.extensionManagementService.uninstall(extensionToUninstall);\n\t\t\t\tuninstalledExtensions.push(extensionToUninstall);\n\t\t\t}\n\n\t\t\tif (this.location) {\n\t\t\t\toutput.log(localize('successUninstallFromLocation', \"Extension '{0}' was successfully uninstalled from {1}!\", id, this.location));\n\t\t\t} else {\n\t\t\t\toutput.log(localize('successUninstall', \"Extension '{0}' was successfully uninstalled!\", id));\n\t\t\t}\n\n\t\t}\n\t}\n\n\tpublic async locateExtension(extensions: string[], output: CLIOutput = console): Promise<void> {\n\t\tconst installed = await this.extensionManagementService.getInstalled();\n\t\textensions.forEach(e => {\n\t\t\tinstalled.forEach(i => {\n\t\t\t\tif (i.identifier.id === e) {\n\t\t\t\t\tif (i.location.scheme === Schemas.file) {\n\t\t\t\t\t\toutput.log(i.location.fsPath);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate notInstalled(id: string) {\n\t\treturn this.location ? localize('notInstalleddOnLocation', \"Extension '{0}' is not installed on {1}.\", id, this.location) : localize('notInstalled', \"Extension '{0}' is not installed.\", id);\n\t}\n\n}\n"]}