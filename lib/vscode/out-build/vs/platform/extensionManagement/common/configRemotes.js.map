{"version":3,"file":"configRemotes.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/extensionManagement/common/configRemotes.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\n\nconst SshProtocolMatcher = /^([^@:]+@)?([^:]+):/;\nconst SshUrlMatcher = /^([^@:]+@)?([^:]+):(.+)$/;\nconst AuthorityMatcher = /^([^@]+@)?([^:]+)(:\\d+)?$/;\nconst SecondLevelDomainMatcher = /([^@:.]+\\.[^@:.]+)(:\\d+)?$/;\nconst RemoteMatcher = /^\\s*url\\s*=\\s*(.+\\S)\\s*$/mg;\nconst AnyButDot = /[^.]/g;\n\nexport const AllowedSecondLevelDomains = [\n\t'github.com',\n\t'bitbucket.org',\n\t'visualstudio.com',\n\t'gitlab.com',\n\t'heroku.com',\n\t'azurewebsites.net',\n\t'ibm.com',\n\t'amazon.com',\n\t'amazonaws.com',\n\t'cloudapp.net',\n\t'rhcloud.com',\n\t'google.com',\n\t'azure.com'\n];\n\nfunction stripLowLevelDomains(domain: string): string | null {\n\tconst match = domain.match(SecondLevelDomainMatcher);\n\treturn match ? match[1] : null;\n}\n\nfunction extractDomain(url: string): string | null {\n\tif (url.indexOf('://') === -1) {\n\t\tconst match = url.match(SshProtocolMatcher);\n\t\tif (match) {\n\t\t\treturn stripLowLevelDomains(match[2]);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\ttry {\n\t\tconst uri = URI.parse(url);\n\t\tif (uri.authority) {\n\t\t\treturn stripLowLevelDomains(uri.authority);\n\t\t}\n\t} catch (e) {\n\t\t// ignore invalid URIs\n\t}\n\treturn null;\n}\n\nexport function getDomainsOfRemotes(text: string, allowedDomains: readonly string[]): string[] {\n\tconst domains = new Set<string>();\n\tlet match: RegExpExecArray | null;\n\twhile (match = RemoteMatcher.exec(text)) {\n\t\tconst domain = extractDomain(match[1]);\n\t\tif (domain) {\n\t\t\tdomains.add(domain);\n\t\t}\n\t}\n\n\tconst allowedDomainsSet = new Set(allowedDomains);\n\treturn Array.from(domains)\n\t\t.map(key => allowedDomainsSet.has(key) ? key : key.replace(AnyButDot, 'a'));\n}\n\nfunction stripPort(authority: string): string | null {\n\tconst match = authority.match(AuthorityMatcher);\n\treturn match ? match[2] : null;\n}\n\nfunction normalizeRemote(host: string | null, path: string, stripEndingDotGit: boolean): string | null {\n\tif (host && path) {\n\t\tif (stripEndingDotGit && path.endsWith('.git')) {\n\t\t\tpath = path.substr(0, path.length - 4);\n\t\t}\n\t\treturn (path.indexOf('/') === 0) ? `${host}${path}` : `${host}/${path}`;\n\t}\n\treturn null;\n}\n\nfunction extractRemote(url: string, stripEndingDotGit: boolean): string | null {\n\tif (url.indexOf('://') === -1) {\n\t\tconst match = url.match(SshUrlMatcher);\n\t\tif (match) {\n\t\t\treturn normalizeRemote(match[2], match[3], stripEndingDotGit);\n\t\t}\n\t}\n\ttry {\n\t\tconst uri = URI.parse(url);\n\t\tif (uri.authority) {\n\t\t\treturn normalizeRemote(stripPort(uri.authority), uri.path, stripEndingDotGit);\n\t\t}\n\t} catch (e) {\n\t\t// ignore invalid URIs\n\t}\n\treturn null;\n}\n\nexport function getRemotes(text: string, stripEndingDotGit: boolean = false): string[] {\n\tconst remotes: string[] = [];\n\tlet match: RegExpExecArray | null;\n\twhile (match = RemoteMatcher.exec(text)) {\n\t\tconst remote = extractRemote(match[1], stripEndingDotGit);\n\t\tif (remote) {\n\t\t\tremotes.push(remote);\n\t\t}\n\t}\n\treturn remotes;\n}\n"]}