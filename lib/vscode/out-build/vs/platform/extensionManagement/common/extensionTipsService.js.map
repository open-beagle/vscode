{"version":3,"file":"extensionTipsService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/extensionManagement/common/extensionTipsService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IConfigBasedExtensionTip as IRawConfigBasedExtensionTip } from 'vs/base/common/product';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { isNonEmptyArray } from 'vs/base/common/arrays';\nimport { IExtensionTipsService, IExecutableBasedExtensionTip, IWorkspaceTips, IConfigBasedExtensionTip } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { forEach } from 'vs/base/common/collections';\nimport { IRequestService, asJson } from 'vs/platform/request/common/request';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { joinPath } from 'vs/base/common/resources';\nimport { getDomainsOfRemotes } from 'vs/platform/extensionManagement/common/configRemotes';\nimport { Disposable } from 'vs/base/common/lifecycle';\n\nexport class ExtensionTipsService extends Disposable implements IExtensionTipsService {\n\n\t_serviceBrand: any;\n\n\tprivate readonly allConfigBasedTips: Map<string, IRawConfigBasedExtensionTip> = new Map<string, IRawConfigBasedExtensionTip>();\n\n\tconstructor(\n\t\t@IFileService protected readonly fileService: IFileService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IRequestService private readonly requestService: IRequestService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\t\tif (this.productService.configBasedExtensionTips) {\n\t\t\tforEach(this.productService.configBasedExtensionTips, ({ value }) => this.allConfigBasedTips.set(value.configPath, value));\n\t\t}\n\t}\n\n\tgetConfigBasedTips(folder: URI): Promise<IConfigBasedExtensionTip[]> {\n\t\treturn this.getValidConfigBasedTips(folder);\n\t}\n\n\tgetAllWorkspacesTips(): Promise<IWorkspaceTips[]> {\n\t\treturn this.fetchWorkspacesTips();\n\t}\n\n\tasync getImportantExecutableBasedTips(): Promise<IExecutableBasedExtensionTip[]> {\n\t\treturn [];\n\t}\n\n\tasync getOtherExecutableBasedTips(): Promise<IExecutableBasedExtensionTip[]> {\n\t\treturn [];\n\t}\n\n\tprivate async getValidConfigBasedTips(folder: URI): Promise<IConfigBasedExtensionTip[]> {\n\t\tconst result: IConfigBasedExtensionTip[] = [];\n\t\tfor (const [configPath, tip] of this.allConfigBasedTips) {\n\t\t\ttry {\n\t\t\t\tconst content = await this.fileService.readFile(joinPath(folder, configPath));\n\t\t\t\tconst recommendationByRemote: Map<string, IConfigBasedExtensionTip> = new Map<string, IConfigBasedExtensionTip>();\n\t\t\t\tforEach(tip.recommendations, ({ key, value }) => {\n\t\t\t\t\tif (isNonEmptyArray(value.remotes)) {\n\t\t\t\t\t\tfor (const remote of value.remotes) {\n\t\t\t\t\t\t\trecommendationByRemote.set(remote, {\n\t\t\t\t\t\t\t\textensionId: key,\n\t\t\t\t\t\t\t\textensionName: value.name,\n\t\t\t\t\t\t\t\tconfigName: tip.configName,\n\t\t\t\t\t\t\t\timportant: !!value.important,\n\t\t\t\t\t\t\t\tisExtensionPack: !!value.isExtensionPack\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.push({\n\t\t\t\t\t\t\textensionId: key,\n\t\t\t\t\t\t\textensionName: value.name,\n\t\t\t\t\t\t\tconfigName: tip.configName,\n\t\t\t\t\t\t\timportant: !!value.important,\n\t\t\t\t\t\t\tisExtensionPack: !!value.isExtensionPack\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tconst domains = getDomainsOfRemotes(content.value.toString(), [...recommendationByRemote.keys()]);\n\t\t\t\tfor (const domain of domains) {\n\t\t\t\t\tconst remote = recommendationByRemote.get(domain);\n\t\t\t\t\tif (remote) {\n\t\t\t\t\t\tresult.push(remote);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) { /* Ignore */ }\n\t\t}\n\t\treturn result;\n\t}\n\n\n\tprivate async fetchWorkspacesTips(): Promise<IWorkspaceTips[]> {\n\t\tif (!this.productService.extensionsGallery?.recommendationsUrl) {\n\t\t\treturn [];\n\t\t}\n\t\ttry {\n\t\t\tconst context = await this.requestService.request({ type: 'GET', url: this.productService.extensionsGallery?.recommendationsUrl }, CancellationToken.None);\n\t\t\tif (context.res.statusCode !== 200) {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t\tconst result = await asJson<{ workspaceRecommendations?: IWorkspaceTips[] }>(context);\n\t\t\tif (!result) {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t\treturn result.workspaceRecommendations || [];\n\t\t} catch (error) {\n\t\t\tthis.logService.error(error);\n\t\t\treturn [];\n\t\t}\n\t}\n\n}\n"]}