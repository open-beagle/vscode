{"version":3,"file":"extensionManagementUtil.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/extensionManagement/common/extensionManagementUtil.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ILocalExtension, IGalleryExtension, IExtensionIdentifier, IReportedExtension, IExtensionIdentifierWithVersion } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { compareIgnoreCase } from 'vs/base/common/strings';\nimport { ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\n\nexport function areSameExtensions(a: IExtensionIdentifier, b: IExtensionIdentifier): boolean {\n\tif (a.uuid && b.uuid) {\n\t\treturn a.uuid === b.uuid;\n\t}\n\tif (a.id === b.id) {\n\t\treturn true;\n\t}\n\treturn compareIgnoreCase(a.id, b.id) === 0;\n}\n\nexport class ExtensionIdentifierWithVersion implements IExtensionIdentifierWithVersion {\n\n\treadonly id: string;\n\treadonly uuid?: string;\n\n\tconstructor(\n\t\tidentifier: IExtensionIdentifier,\n\t\treadonly version: string\n\t) {\n\t\tthis.id = identifier.id;\n\t\tthis.uuid = identifier.uuid;\n\t}\n\n\tkey(): string {\n\t\treturn `${this.id}-${this.version}`;\n\t}\n\n\tequals(o: any): boolean {\n\t\tif (!(o instanceof ExtensionIdentifierWithVersion)) {\n\t\t\treturn false;\n\t\t}\n\t\treturn areSameExtensions(this, o) && this.version === o.version;\n\t}\n}\n\nexport function getExtensionId(publisher: string, name: string): string {\n\treturn `${publisher}.${name}`;\n}\n\nexport function adoptToGalleryExtensionId(id: string): string {\n\treturn id.toLocaleLowerCase();\n}\n\nexport function getGalleryExtensionId(publisher: string, name: string): string {\n\treturn adoptToGalleryExtensionId(getExtensionId(publisher, name));\n}\n\nexport function groupByExtension<T>(extensions: T[], getExtensionIdentifier: (t: T) => IExtensionIdentifier): T[][] {\n\tconst byExtension: T[][] = [];\n\tconst findGroup = (extension: T) => {\n\t\tfor (const group of byExtension) {\n\t\t\tif (group.some(e => areSameExtensions(getExtensionIdentifier(e), getExtensionIdentifier(extension)))) {\n\t\t\t\treturn group;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t};\n\tfor (const extension of extensions) {\n\t\tconst group = findGroup(extension);\n\t\tif (group) {\n\t\t\tgroup.push(extension);\n\t\t} else {\n\t\t\tbyExtension.push([extension]);\n\t\t}\n\t}\n\treturn byExtension;\n}\n\nexport function getLocalExtensionTelemetryData(extension: ILocalExtension): any {\n\treturn {\n\t\tid: extension.identifier.id,\n\t\tname: extension.manifest.name,\n\t\tgalleryId: null,\n\t\tpublisherId: extension.publisherId,\n\t\tpublisherName: extension.manifest.publisher,\n\t\tpublisherDisplayName: extension.publisherDisplayName,\n\t\tdependencies: extension.manifest.extensionDependencies && extension.manifest.extensionDependencies.length > 0\n\t};\n}\n\n\n/* __GDPR__FRAGMENT__\n\t\"GalleryExtensionTelemetryData\" : {\n\t\t\"id\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\"name\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\"galleryId\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\"publisherId\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\"publisherName\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\"publisherDisplayName\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\"dependencies\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n\t\t\"${include}\": [\n\t\t\t\"${GalleryExtensionTelemetryData2}\"\n\t\t]\n\t}\n*/\nexport function getGalleryExtensionTelemetryData(extension: IGalleryExtension): any {\n\treturn {\n\t\tid: extension.identifier.id,\n\t\tname: extension.name,\n\t\tgalleryId: extension.identifier.uuid,\n\t\tpublisherId: extension.publisherId,\n\t\tpublisherName: extension.publisher,\n\t\tpublisherDisplayName: extension.publisherDisplayName,\n\t\tdependencies: !!(extension.properties.dependencies && extension.properties.dependencies.length > 0),\n\t\t...extension.telemetryData\n\t};\n}\n\nexport const BetterMergeId = new ExtensionIdentifier('pprice.better-merge');\n\nexport function getMaliciousExtensionsSet(report: IReportedExtension[]): Set<string> {\n\tconst result = new Set<string>();\n\n\tfor (const extension of report) {\n\t\tif (extension.malicious) {\n\t\t\tresult.add(extension.id.id);\n\t\t}\n\t}\n\n\treturn result;\n}\n"]}