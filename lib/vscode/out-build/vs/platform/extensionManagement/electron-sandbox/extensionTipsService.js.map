{"version":3,"sources":["vs/platform/extensionManagement/electron-sandbox/extensionTipsService.ts"],"names":[],"mappings":"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","file":"extensionTipsService.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { basename, join, } from 'vs/base/common/path';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { INativeEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { env } from 'vs/base/common/process';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { isWindows } from 'vs/base/common/platform';\nimport { isNonEmptyArray } from 'vs/base/common/arrays';\nimport { IExecutableBasedExtensionTip, IExtensionManagementService, ILocalExtension } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { forEach, IStringDictionary } from 'vs/base/common/collections';\nimport { IRequestService } from 'vs/platform/request/common/request';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { ExtensionTipsService as BaseExtensionTipsService } from 'vs/platform/extensionManagement/common/extensionTipsService';\nimport { disposableTimeout, timeout } from 'vs/base/common/async';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IExtensionRecommendationNotificationService, RecommendationsNotificationResult, RecommendationSource } from 'vs/platform/extensionRecommendations/common/extensionRecommendations';\nimport { localize } from 'vs/nls';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { Event } from 'vs/base/common/event';\nimport { INativeHostService } from 'vs/platform/native/electron-sandbox/native';\n\ntype ExeExtensionRecommendationsClassification = {\n\textensionId: { classification: 'PublicNonPersonalData', purpose: 'FeatureInsight' };\n\texeName: { classification: 'PublicNonPersonalData', purpose: 'FeatureInsight' };\n};\n\ntype IExeBasedExtensionTips = {\n\treadonly exeFriendlyName: string,\n\treadonly windowsPath?: string,\n\treadonly recommendations: { extensionId: string, extensionName: string, isExtensionPack: boolean }[];\n};\n\nconst promptedExecutableTipsStorageKey = 'extensionTips/promptedExecutableTips';\nconst lastPromptedMediumImpExeTimeStorageKey = 'extensionTips/lastPromptedMediumImpExeTime';\n\nexport class ExtensionTipsService extends BaseExtensionTipsService {\n\n\toverride _serviceBrand: any;\n\n\tprivate readonly highImportanceExecutableTips: Map<string, IExeBasedExtensionTips> = new Map<string, IExeBasedExtensionTips>();\n\tprivate readonly mediumImportanceExecutableTips: Map<string, IExeBasedExtensionTips> = new Map<string, IExeBasedExtensionTips>();\n\tprivate readonly allOtherExecutableTips: Map<string, IExeBasedExtensionTips> = new Map<string, IExeBasedExtensionTips>();\n\n\tprivate highImportanceTipsByExe = new Map<string, IExecutableBasedExtensionTip[]>();\n\tprivate mediumImportanceTipsByExe = new Map<string, IExecutableBasedExtensionTip[]>();\n\n\tconstructor(\n\t\t@INativeEnvironmentService private readonly environmentService: INativeEnvironmentService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IExtensionManagementService private readonly extensionManagementService: IExtensionManagementService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@INativeHostService private readonly nativeHostService: INativeHostService,\n\t\t@IExtensionRecommendationNotificationService private readonly extensionRecommendationNotificationService: IExtensionRecommendationNotificationService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IProductService productService: IProductService,\n\t\t@IRequestService requestService: IRequestService,\n\t\t@ILogService logService: ILogService,\n\t) {\n\t\tsuper(fileService, productService, requestService, logService);\n\t\tif (productService.exeBasedExtensionTips) {\n\t\t\tforEach(productService.exeBasedExtensionTips, ({ key, value: exeBasedExtensionTip }) => {\n\t\t\t\tconst highImportanceRecommendations: { extensionId: string, extensionName: string, isExtensionPack: boolean }[] = [];\n\t\t\t\tconst mediumImportanceRecommendations: { extensionId: string, extensionName: string, isExtensionPack: boolean }[] = [];\n\t\t\t\tconst otherRecommendations: { extensionId: string, extensionName: string, isExtensionPack: boolean }[] = [];\n\t\t\t\tforEach(exeBasedExtensionTip.recommendations, ({ key: extensionId, value }) => {\n\t\t\t\t\tif (value.important) {\n\t\t\t\t\t\tif (exeBasedExtensionTip.important) {\n\t\t\t\t\t\t\thighImportanceRecommendations.push({ extensionId, extensionName: value.name, isExtensionPack: !!value.isExtensionPack });\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmediumImportanceRecommendations.push({ extensionId, extensionName: value.name, isExtensionPack: !!value.isExtensionPack });\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\totherRecommendations.push({ extensionId, extensionName: value.name, isExtensionPack: !!value.isExtensionPack });\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tif (highImportanceRecommendations.length) {\n\t\t\t\t\tthis.highImportanceExecutableTips.set(key, { exeFriendlyName: exeBasedExtensionTip.friendlyName, windowsPath: exeBasedExtensionTip.windowsPath, recommendations: highImportanceRecommendations });\n\t\t\t\t}\n\t\t\t\tif (mediumImportanceRecommendations.length) {\n\t\t\t\t\tthis.mediumImportanceExecutableTips.set(key, { exeFriendlyName: exeBasedExtensionTip.friendlyName, windowsPath: exeBasedExtensionTip.windowsPath, recommendations: mediumImportanceRecommendations });\n\t\t\t\t}\n\t\t\t\tif (otherRecommendations.length) {\n\t\t\t\t\tthis.allOtherExecutableTips.set(key, { exeFriendlyName: exeBasedExtensionTip.friendlyName, windowsPath: exeBasedExtensionTip.windowsPath, recommendations: otherRecommendations });\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t/*\n\t\t\t3s has come out to be the good number to fetch and prompt important exe based recommendations\n\t\t\tAlso fetch important exe based recommendations for reporting telemetry\n\t\t*/\n\t\ttimeout(3000).then(async () => {\n\t\t\tawait this.collectTips();\n\t\t\tthis.promptHighImportanceExeBasedTip();\n\t\t\tthis.promptMediumImportanceExeBasedTip();\n\t\t});\n\t}\n\n\toverride async getImportantExecutableBasedTips(): Promise<IExecutableBasedExtensionTip[]> {\n\t\tconst highImportanceExeTips = await this.getValidExecutableBasedExtensionTips(this.highImportanceExecutableTips);\n\t\tconst mediumImportanceExeTips = await this.getValidExecutableBasedExtensionTips(this.mediumImportanceExecutableTips);\n\t\treturn [...highImportanceExeTips, ...mediumImportanceExeTips];\n\t}\n\n\toverride getOtherExecutableBasedTips(): Promise<IExecutableBasedExtensionTip[]> {\n\t\treturn this.getValidExecutableBasedExtensionTips(this.allOtherExecutableTips);\n\t}\n\n\tprivate async collectTips(): Promise<void> {\n\t\tconst highImportanceExeTips = await this.getValidExecutableBasedExtensionTips(this.highImportanceExecutableTips);\n\t\tconst mediumImportanceExeTips = await this.getValidExecutableBasedExtensionTips(this.mediumImportanceExecutableTips);\n\t\tconst local = await this.extensionManagementService.getInstalled();\n\n\t\tthis.highImportanceTipsByExe = this.groupImportantTipsByExe(highImportanceExeTips, local);\n\t\tthis.mediumImportanceTipsByExe = this.groupImportantTipsByExe(mediumImportanceExeTips, local);\n\t}\n\n\tprivate groupImportantTipsByExe(importantExeBasedTips: IExecutableBasedExtensionTip[], local: ILocalExtension[]): Map<string, IExecutableBasedExtensionTip[]> {\n\t\tconst importantExeBasedRecommendations = new Map<string, IExecutableBasedExtensionTip>();\n\t\timportantExeBasedTips.forEach(tip => importantExeBasedRecommendations.set(tip.extensionId.toLowerCase(), tip));\n\n\t\tconst { installed, uninstalled: recommendations } = this.groupByInstalled([...importantExeBasedRecommendations.keys()], local);\n\n\t\t/* Log installed and uninstalled exe based recommendations */\n\t\tfor (const extensionId of installed) {\n\t\t\tconst tip = importantExeBasedRecommendations.get(extensionId);\n\t\t\tif (tip) {\n\t\t\t\tthis.telemetryService.publicLog2<{ exeName: string, extensionId: string }, ExeExtensionRecommendationsClassification>('exeExtensionRecommendations:alreadyInstalled', { extensionId, exeName: basename(tip.windowsPath!) });\n\t\t\t}\n\t\t}\n\t\tfor (const extensionId of recommendations) {\n\t\t\tconst tip = importantExeBasedRecommendations.get(extensionId);\n\t\t\tif (tip) {\n\t\t\t\tthis.telemetryService.publicLog2<{ exeName: string, extensionId: string }, ExeExtensionRecommendationsClassification>('exeExtensionRecommendations:notInstalled', { extensionId, exeName: basename(tip.windowsPath!) });\n\t\t\t}\n\t\t}\n\n\t\tconst promptedExecutableTips = this.getPromptedExecutableTips();\n\t\tconst tipsByExe = new Map<string, IExecutableBasedExtensionTip[]>();\n\t\tfor (const extensionId of recommendations) {\n\t\t\tconst tip = importantExeBasedRecommendations.get(extensionId);\n\t\t\tif (tip && (!promptedExecutableTips[tip.exeName] || !promptedExecutableTips[tip.exeName].includes(tip.extensionId))) {\n\t\t\t\tlet tips = tipsByExe.get(tip.exeName);\n\t\t\t\tif (!tips) {\n\t\t\t\t\ttips = [];\n\t\t\t\t\ttipsByExe.set(tip.exeName, tips);\n\t\t\t\t}\n\t\t\t\ttips.push(tip);\n\t\t\t}\n\t\t}\n\n\t\treturn tipsByExe;\n\t}\n\n\t/**\n\t * High importance tips are prompted once per restart session\n\t */\n\tprivate promptHighImportanceExeBasedTip(): void {\n\t\tif (this.highImportanceTipsByExe.size === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst [exeName, tips] = [...this.highImportanceTipsByExe.entries()][0];\n\t\tthis.promptExeRecommendations(tips)\n\t\t\t.then(result => {\n\t\t\t\tswitch (result) {\n\t\t\t\t\tcase RecommendationsNotificationResult.Accepted:\n\t\t\t\t\t\tthis.addToRecommendedExecutables(tips[0].exeName, tips);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase RecommendationsNotificationResult.Ignored:\n\t\t\t\t\t\tthis.highImportanceTipsByExe.delete(exeName);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase RecommendationsNotificationResult.IncompatibleWindow:\n\t\t\t\t\t\t// Recommended in incompatible window. Schedule the prompt after active window change\n\t\t\t\t\t\tconst onActiveWindowChange = Event.once(Event.latch(Event.any(this.nativeHostService.onDidOpenWindow, this.nativeHostService.onDidFocusWindow)));\n\t\t\t\t\t\tthis._register(onActiveWindowChange(() => this.promptHighImportanceExeBasedTip()));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase RecommendationsNotificationResult.TooMany:\n\t\t\t\t\t\t// Too many notifications. Schedule the prompt after one hour\n\t\t\t\t\t\tconst disposable = this._register(disposableTimeout(() => { disposable.dispose(); this.promptHighImportanceExeBasedTip(); }, 60 * 60 * 1000 /* 1 hour */));\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\t/**\n\t * Medium importance tips are prompted once per 7 days\n\t */\n\tprivate promptMediumImportanceExeBasedTip(): void {\n\t\tif (this.mediumImportanceTipsByExe.size === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst lastPromptedMediumExeTime = this.getLastPromptedMediumExeTime();\n\t\tconst timeSinceLastPrompt = Date.now() - lastPromptedMediumExeTime;\n\t\tconst promptInterval = 7 * 24 * 60 * 60 * 1000; // 7 Days\n\t\tif (timeSinceLastPrompt < promptInterval) {\n\t\t\t// Wait until interval and prompt\n\t\t\tconst disposable = this._register(disposableTimeout(() => { disposable.dispose(); this.promptMediumImportanceExeBasedTip(); }, promptInterval - timeSinceLastPrompt));\n\t\t\treturn;\n\t\t}\n\n\t\tconst [exeName, tips] = [...this.mediumImportanceTipsByExe.entries()][0];\n\t\tthis.promptExeRecommendations(tips)\n\t\t\t.then(result => {\n\t\t\t\tswitch (result) {\n\t\t\t\t\tcase RecommendationsNotificationResult.Accepted:\n\t\t\t\t\t\t// Accepted: Update the last prompted time and caches.\n\t\t\t\t\t\tthis.updateLastPromptedMediumExeTime(Date.now());\n\t\t\t\t\t\tthis.mediumImportanceTipsByExe.delete(exeName);\n\t\t\t\t\t\tthis.addToRecommendedExecutables(tips[0].exeName, tips);\n\n\t\t\t\t\t\t// Schedule the next recommendation for next internval\n\t\t\t\t\t\tconst disposable1 = this._register(disposableTimeout(() => { disposable1.dispose(); this.promptMediumImportanceExeBasedTip(); }, promptInterval));\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase RecommendationsNotificationResult.Ignored:\n\t\t\t\t\t\t// Ignored: Remove from the cache and prompt next recommendation\n\t\t\t\t\t\tthis.mediumImportanceTipsByExe.delete(exeName);\n\t\t\t\t\t\tthis.promptMediumImportanceExeBasedTip();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase RecommendationsNotificationResult.IncompatibleWindow:\n\t\t\t\t\t\t// Recommended in incompatible window. Schedule the prompt after active window change\n\t\t\t\t\t\tconst onActiveWindowChange = Event.once(Event.latch(Event.any(this.nativeHostService.onDidOpenWindow, this.nativeHostService.onDidFocusWindow)));\n\t\t\t\t\t\tthis._register(onActiveWindowChange(() => this.promptMediumImportanceExeBasedTip()));\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase RecommendationsNotificationResult.TooMany:\n\t\t\t\t\t\t// Too many notifications. Schedule the prompt after one hour\n\t\t\t\t\t\tconst disposable2 = this._register(disposableTimeout(() => { disposable2.dispose(); this.promptMediumImportanceExeBasedTip(); }, 60 * 60 * 1000 /* 1 hour */));\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tprivate promptExeRecommendations(tips: IExecutableBasedExtensionTip[]): Promise<RecommendationsNotificationResult> {\n\t\tconst extensionIds = tips.map(({ extensionId }) => extensionId.toLowerCase());\n\t\tconst message = localize({ key: 'exeRecommended', comment: ['Placeholder string is the name of the software that is installed.'] }, \"You have {0} installed on your system. Do you want to install the recommended extensions for it?\", tips[0].exeFriendlyName);\n\t\treturn this.extensionRecommendationNotificationService.promptImportantExtensionsInstallNotification(extensionIds, message, `@exe:\"${tips[0].exeName}\"`, RecommendationSource.EXE);\n\t}\n\n\tprivate getLastPromptedMediumExeTime(): number {\n\t\tlet value = this.storageService.getNumber(lastPromptedMediumImpExeTimeStorageKey, StorageScope.GLOBAL);\n\t\tif (!value) {\n\t\t\tvalue = Date.now();\n\t\t\tthis.updateLastPromptedMediumExeTime(value);\n\t\t}\n\t\treturn value;\n\t}\n\n\tprivate updateLastPromptedMediumExeTime(value: number): void {\n\t\tthis.storageService.store(lastPromptedMediumImpExeTimeStorageKey, value, StorageScope.GLOBAL, StorageTarget.MACHINE);\n\t}\n\n\tprivate getPromptedExecutableTips(): IStringDictionary<string[]> {\n\t\treturn JSON.parse(this.storageService.get(promptedExecutableTipsStorageKey, StorageScope.GLOBAL, '{}'));\n\t}\n\n\tprivate addToRecommendedExecutables(exeName: string, tips: IExecutableBasedExtensionTip[]) {\n\t\tconst promptedExecutableTips = this.getPromptedExecutableTips();\n\t\tpromptedExecutableTips[exeName] = tips.map(({ extensionId }) => extensionId.toLowerCase());\n\t\tthis.storageService.store(promptedExecutableTipsStorageKey, JSON.stringify(promptedExecutableTips), StorageScope.GLOBAL, StorageTarget.USER);\n\t}\n\n\tprivate groupByInstalled(recommendationsToSuggest: string[], local: ILocalExtension[]): { installed: string[], uninstalled: string[] } {\n\t\tconst installed: string[] = [], uninstalled: string[] = [];\n\t\tconst installedExtensionsIds = local.reduce((result, i) => { result.add(i.identifier.id.toLowerCase()); return result; }, new Set<string>());\n\t\trecommendationsToSuggest.forEach(id => {\n\t\t\tif (installedExtensionsIds.has(id.toLowerCase())) {\n\t\t\t\tinstalled.push(id);\n\t\t\t} else {\n\t\t\t\tuninstalled.push(id);\n\t\t\t}\n\t\t});\n\t\treturn { installed, uninstalled };\n\t}\n\n\tprivate async getValidExecutableBasedExtensionTips(executableTips: Map<string, IExeBasedExtensionTips>): Promise<IExecutableBasedExtensionTip[]> {\n\t\tconst result: IExecutableBasedExtensionTip[] = [];\n\n\t\tconst checkedExecutables: Map<string, boolean> = new Map<string, boolean>();\n\t\tfor (const exeName of executableTips.keys()) {\n\t\t\tconst extensionTip = executableTips.get(exeName);\n\t\t\tif (!extensionTip || !isNonEmptyArray(extensionTip.recommendations)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst exePaths: string[] = [];\n\t\t\tif (isWindows) {\n\t\t\t\tif (extensionTip.windowsPath) {\n\t\t\t\t\texePaths.push(extensionTip.windowsPath.replace('%USERPROFILE%', env['USERPROFILE']!)\n\t\t\t\t\t\t.replace('%ProgramFiles(x86)%', env['ProgramFiles(x86)']!)\n\t\t\t\t\t\t.replace('%ProgramFiles%', env['ProgramFiles']!)\n\t\t\t\t\t\t.replace('%APPDATA%', env['APPDATA']!)\n\t\t\t\t\t\t.replace('%WINDIR%', env['WINDIR']!));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\texePaths.push(join('/usr/local/bin', exeName));\n\t\t\t\texePaths.push(join('/usr/bin', exeName));\n\t\t\t\texePaths.push(join(this.environmentService.userHome.fsPath, exeName));\n\t\t\t}\n\n\t\t\tfor (const exePath of exePaths) {\n\t\t\t\tlet exists = checkedExecutables.get(exePath);\n\t\t\t\tif (exists === undefined) {\n\t\t\t\t\texists = await this.fileService.exists(URI.file(exePath));\n\t\t\t\t\tcheckedExecutables.set(exePath, exists);\n\t\t\t\t}\n\t\t\t\tif (exists) {\n\t\t\t\t\tfor (const { extensionId, extensionName, isExtensionPack } of extensionTip.recommendations) {\n\t\t\t\t\t\tresult.push({\n\t\t\t\t\t\t\textensionId,\n\t\t\t\t\t\t\textensionName,\n\t\t\t\t\t\t\tisExtensionPack,\n\t\t\t\t\t\t\texeName,\n\t\t\t\t\t\t\texeFriendlyName: extensionTip.exeFriendlyName,\n\t\t\t\t\t\t\twindowsPath: extensionTip.windowsPath,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n}\n"]}