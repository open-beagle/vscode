{"version":3,"sources":["vs/platform/extensionManagement/node/extensionsScanner.ts"],"names":[],"mappings":"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","file":"extensionsScanner.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as fs from 'fs';\nimport * as semver from 'vs/base/common/semver/semver';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport * as pfs from 'vs/base/node/pfs';\nimport * as path from 'vs/base/common/path';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { ILocalExtension, IGalleryMetadata, ExtensionManagementError } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { ExtensionType, IExtensionManifest, IExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\nimport { areSameExtensions, ExtensionIdentifierWithVersion, groupByExtension, getGalleryExtensionId } from 'vs/platform/extensionManagement/common/extensionManagementUtil';\nimport { Limiter, Promises, Queue } from 'vs/base/common/async';\nimport { URI } from 'vs/base/common/uri';\nimport { INativeEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { localizeManifest } from 'vs/platform/extensionManagement/common/extensionNls';\nimport { localize } from 'vs/nls';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { CancellationToken } from 'vscode';\nimport { extract, ExtractError } from 'vs/base/node/zip';\nimport { isWindows } from 'vs/base/common/platform';\nimport { flatten } from 'vs/base/common/arrays';\nimport { IStringDictionary } from 'vs/base/common/collections';\nimport { FileAccess } from 'vs/base/common/network';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { basename } from 'vs/base/common/resources';\nimport { generateUuid } from 'vs/base/common/uuid';\nimport { getErrorMessage } from 'vs/base/common/errors';\n\nconst ERROR_SCANNING_SYS_EXTENSIONS = 'scanningSystem';\nconst ERROR_SCANNING_USER_EXTENSIONS = 'scanningUser';\nconst INSTALL_ERROR_EXTRACTING = 'extracting';\nconst INSTALL_ERROR_DELETING = 'deleting';\nconst INSTALL_ERROR_RENAMING = 'renaming';\n\nexport type IMetadata = Partial<IGalleryMetadata & { isMachineScoped: boolean; isBuiltin: boolean; }>;\ntype IStoredMetadata = IMetadata & { installedTimestamp: number | undefined };\nexport type ILocalExtensionManifest = IExtensionManifest & { __metadata?: IMetadata };\ntype IRelaxedLocalExtension = Omit<ILocalExtension, 'isBuiltin'> & { isBuiltin: boolean };\n\nexport class ExtensionsScanner extends Disposable {\n\n\tprivate readonly systemExtensionsPath: string;\n\tprivate readonly extensionsPath: string;\n\tprivate readonly uninstalledPath: string;\n\tprivate readonly uninstalledFileLimiter: Queue<any>;\n\n\tconstructor(\n\t\tprivate readonly beforeRemovingExtension: (e: ILocalExtension) => Promise<void>,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@INativeEnvironmentService private readonly environmentService: INativeEnvironmentService,\n\t\t@IProductService private readonly productService: IProductService,\n\t) {\n\t\tsuper();\n\t\tthis.systemExtensionsPath = environmentService.builtinExtensionsPath;\n\t\tthis.extensionsPath = environmentService.extensionsPath;\n\t\tthis.uninstalledPath = path.join(this.extensionsPath, '.obsolete');\n\t\tthis.uninstalledFileLimiter = new Queue();\n\t}\n\n\tasync cleanUp(): Promise<void> {\n\t\tawait this.removeUninstalledExtensions();\n\t\tawait this.removeOutdatedExtensions();\n\t}\n\n\tasync scanExtensions(type: ExtensionType | null): Promise<ILocalExtension[]> {\n\t\tconst promises: Promise<ILocalExtension[]>[] = [];\n\n\t\tif (type === null || type === ExtensionType.System) {\n\t\t\tpromises.push(this.scanSystemExtensions().then(null, e => Promise.reject(new ExtensionManagementError(this.joinErrors(e).message, ERROR_SCANNING_SYS_EXTENSIONS))));\n\t\t}\n\n\t\tif (type === null || type === ExtensionType.User) {\n\t\t\tpromises.push(this.scanUserExtensions(true).then(null, e => Promise.reject(new ExtensionManagementError(this.joinErrors(e).message, ERROR_SCANNING_USER_EXTENSIONS))));\n\t\t}\n\n\t\ttry {\n\t\t\tconst result = await Promise.all(promises);\n\t\t\treturn flatten(result);\n\t\t} catch (error) {\n\t\t\tthrow this.joinErrors(error);\n\t\t}\n\t}\n\n\tasync scanUserExtensions(excludeOutdated: boolean): Promise<ILocalExtension[]> {\n\t\tthis.logService.trace('Started scanning user extensions');\n\t\tlet [uninstalled, extensions] = await Promise.all([this.getUninstalledExtensions(), this.scanAllUserExtensions()]);\n\t\textensions = extensions.filter(e => !uninstalled[new ExtensionIdentifierWithVersion(e.identifier, e.manifest.version).key()]);\n\t\tif (excludeOutdated) {\n\t\t\tconst byExtension: ILocalExtension[][] = groupByExtension(extensions, e => e.identifier);\n\t\t\textensions = byExtension.map(p => p.sort((a, b) => semver.rcompare(a.manifest.version, b.manifest.version))[0]);\n\t\t}\n\t\tthis.logService.trace('Scanned user extensions:', extensions.length);\n\t\treturn extensions;\n\t}\n\n\tasync scanAllUserExtensions(): Promise<ILocalExtension[]> {\n\t\treturn this.scanExtensionsInDirs(this.extensionsPath, this.environmentService.extraExtensionPaths, ExtensionType.User);\n\t}\n\n\tasync extractUserExtension(identifierWithVersion: ExtensionIdentifierWithVersion, zipPath: string, token: CancellationToken): Promise<ILocalExtension> {\n\t\tconst folderName = identifierWithVersion.key();\n\t\tconst tempPath = path.join(this.extensionsPath, `.${generateUuid()}`);\n\t\tconst extensionPath = path.join(this.extensionsPath, folderName);\n\n\t\ttry {\n\t\t\tawait pfs.rimraf(extensionPath);\n\t\t} catch (error) {\n\t\t\ttry {\n\t\t\t\tawait pfs.rimraf(extensionPath);\n\t\t\t} catch (e) { /* ignore */ }\n\t\t\tthrow new ExtensionManagementError(localize('errorDeleting', \"Unable to delete the existing folder '{0}' while installing the extension '{1}'. Please delete the folder manually and try again\", extensionPath, identifierWithVersion.id), INSTALL_ERROR_DELETING);\n\t\t}\n\n\t\tawait this.extractAtLocation(identifierWithVersion, zipPath, tempPath, token);\n\t\tlet local = await this.scanExtension(URI.file(tempPath), ExtensionType.User);\n\t\tif (!local) {\n\t\t\tthrow new Error(localize('cannot read', \"Cannot read the extension from {0}\", tempPath));\n\t\t}\n\t\tawait this.storeMetadata(local, { installedTimestamp: Date.now() });\n\n\t\ttry {\n\t\t\tawait this.rename(identifierWithVersion, tempPath, extensionPath, Date.now() + (2 * 60 * 1000) /* Retry for 2 minutes */);\n\t\t\tthis.logService.info('Renamed to', extensionPath);\n\t\t} catch (error) {\n\t\t\ttry {\n\t\t\t\tawait pfs.rimraf(tempPath);\n\t\t\t} catch (e) { /* ignore */ }\n\t\t\tif (error.code === 'ENOTEMPTY') {\n\t\t\t\tthis.logService.info(`Rename failed because extension was installed by another source. So ignoring renaming.`, identifierWithVersion.id);\n\t\t\t} else {\n\t\t\t\tthis.logService.info(`Rename failed because of ${getErrorMessage(error)}. Deleted from extracted location`, tempPath);\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tlocal = await this.scanExtension(URI.file(extensionPath), ExtensionType.User);\n\t\t} catch (e) { /*ignore */ }\n\n\t\tif (local) {\n\t\t\treturn local;\n\t\t}\n\t\tthrow new Error(localize('cannot read', \"Cannot read the extension from {0}\", this.extensionsPath));\n\t}\n\n\tasync saveMetadataForLocalExtension(local: ILocalExtension, metadata: IMetadata): Promise<ILocalExtension> {\n\t\tthis.setMetadata(local, metadata);\n\t\tawait this.storeMetadata(local, { ...metadata, installedTimestamp: local.installedTimestamp });\n\t\treturn local;\n\t}\n\n\tprivate async storeMetadata(local: ILocalExtension, storedMetadata: IStoredMetadata): Promise<ILocalExtension> {\n\t\t// unset if false\n\t\tstoredMetadata.isMachineScoped = storedMetadata.isMachineScoped || undefined;\n\t\tstoredMetadata.isBuiltin = storedMetadata.isBuiltin || undefined;\n\t\tstoredMetadata.installedTimestamp = storedMetadata.installedTimestamp || undefined;\n\t\tconst manifestPath = path.join(local.location.fsPath, 'package.json');\n\t\tconst raw = await fs.promises.readFile(manifestPath, 'utf8');\n\t\tconst { manifest } = await this.parseManifest(raw);\n\t\t(manifest as ILocalExtensionManifest).__metadata = storedMetadata;\n\t\tawait pfs.writeFile(manifestPath, JSON.stringify(manifest, null, '\\t'));\n\t\treturn local;\n\t}\n\n\tgetUninstalledExtensions(): Promise<IStringDictionary<boolean>> {\n\t\treturn this.withUninstalledExtensions();\n\t}\n\n\tasync setUninstalled(...extensions: ILocalExtension[]): Promise<void> {\n\t\tconst ids: ExtensionIdentifierWithVersion[] = extensions.map(e => new ExtensionIdentifierWithVersion(e.identifier, e.manifest.version));\n\t\tawait this.withUninstalledExtensions(uninstalled => {\n\t\t\tids.forEach(id => uninstalled[id.key()] = true);\n\t\t});\n\t}\n\n\tasync setInstalled(identifierWithVersion: ExtensionIdentifierWithVersion): Promise<ILocalExtension | null> {\n\t\tawait this.withUninstalledExtensions(uninstalled => delete uninstalled[identifierWithVersion.key()]);\n\t\tconst installed = await this.scanExtensions(ExtensionType.User);\n\t\tconst localExtension = installed.find(i => new ExtensionIdentifierWithVersion(i.identifier, i.manifest.version).equals(identifierWithVersion)) || null;\n\t\tif (!localExtension) {\n\t\t\treturn null;\n\t\t}\n\t\tawait this.storeMetadata(localExtension, { installedTimestamp: Date.now() });\n\t\treturn this.scanExtension(localExtension.location, ExtensionType.User);\n\t}\n\n\tprivate async withUninstalledExtensions(updateFn?: (uninstalled: IStringDictionary<boolean>) => void): Promise<IStringDictionary<boolean>> {\n\t\treturn this.uninstalledFileLimiter.queue(async () => {\n\t\t\tlet raw: string | undefined;\n\t\t\ttry {\n\t\t\t\traw = await fs.promises.readFile(this.uninstalledPath, 'utf8');\n\t\t\t} catch (err) {\n\t\t\t\tif (err.code !== 'ENOENT') {\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet uninstalled = {};\n\t\t\tif (raw) {\n\t\t\t\ttry {\n\t\t\t\t\tuninstalled = JSON.parse(raw);\n\t\t\t\t} catch (e) { /* ignore */ }\n\t\t\t}\n\n\t\t\tif (updateFn) {\n\t\t\t\tupdateFn(uninstalled);\n\t\t\t\tif (Object.keys(uninstalled).length) {\n\t\t\t\t\tawait pfs.writeFile(this.uninstalledPath, JSON.stringify(uninstalled));\n\t\t\t\t} else {\n\t\t\t\t\tawait pfs.rimraf(this.uninstalledPath);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn uninstalled;\n\t\t});\n\t}\n\n\tasync removeExtension(extension: ILocalExtension, type: string): Promise<void> {\n\t\tthis.logService.trace(`Deleting ${type} extension from disk`, extension.identifier.id, extension.location.fsPath);\n\t\tawait pfs.rimraf(extension.location.fsPath);\n\t\tthis.logService.info('Deleted from disk', extension.identifier.id, extension.location.fsPath);\n\t}\n\n\tasync removeUninstalledExtension(extension: ILocalExtension): Promise<void> {\n\t\tawait this.removeExtension(extension, 'uninstalled');\n\t\tawait this.withUninstalledExtensions(uninstalled => delete uninstalled[new ExtensionIdentifierWithVersion(extension.identifier, extension.manifest.version).key()]);\n\t}\n\n\tprivate async extractAtLocation(identifier: IExtensionIdentifier, zipPath: string, location: string, token: CancellationToken): Promise<void> {\n\t\tthis.logService.trace(`Started extracting the extension from ${zipPath} to ${location}`);\n\n\t\t// Clean the location\n\t\ttry {\n\t\t\tawait pfs.rimraf(location);\n\t\t} catch (e) {\n\t\t\tthrow new ExtensionManagementError(this.joinErrors(e).message, INSTALL_ERROR_DELETING);\n\t\t}\n\n\t\ttry {\n\t\t\tawait extract(zipPath, location, { sourcePath: 'extension', overwrite: true }, token);\n\t\t\tthis.logService.info(`Extracted extension to ${location}:`, identifier.id);\n\t\t} catch (e) {\n\t\t\ttry { await pfs.rimraf(location); } catch (e) { /* Ignore */ }\n\t\t\tthrow new ExtensionManagementError(e.message, e instanceof ExtractError && e.type ? e.type : INSTALL_ERROR_EXTRACTING);\n\t\t}\n\t}\n\n\tprivate async rename(identifier: IExtensionIdentifier, extractPath: string, renamePath: string, retryUntil: number): Promise<void> {\n\t\ttry {\n\t\t\tawait fs.promises.rename(extractPath, renamePath);\n\t\t} catch (error) {\n\t\t\tif (isWindows && error && error.code === 'EPERM' && Date.now() < retryUntil) {\n\t\t\t\tthis.logService.info(`Failed renaming ${extractPath} to ${renamePath} with 'EPERM' error. Trying again...`, identifier.id);\n\t\t\t\treturn this.rename(identifier, extractPath, renamePath, retryUntil);\n\t\t\t}\n\t\t\tthrow new ExtensionManagementError(error.message || localize('renameError', \"Unknown error while renaming {0} to {1}\", extractPath, renamePath), error.code || INSTALL_ERROR_RENAMING);\n\t\t}\n\t}\n\n\tprivate async scanSystemExtensions(): Promise<ILocalExtension[]> {\n\t\tthis.logService.trace('Started scanning system extensions');\n\t\tconst systemExtensionsPromise = this.scanDefaultSystemExtensions();\n\t\tif (this.environmentService.isBuilt) {\n\t\t\treturn systemExtensionsPromise;\n\t\t}\n\n\t\t// Scan other system extensions during development\n\t\tconst devSystemExtensionsPromise = this.scanDevSystemExtensions();\n\t\tconst [systemExtensions, devSystemExtensions] = await Promise.all([systemExtensionsPromise, devSystemExtensionsPromise]);\n\t\treturn [...systemExtensions, ...devSystemExtensions];\n\t}\n\n\n\tprivate async scanExtensionsInDir(dir: string, type: ExtensionType): Promise<ILocalExtension[]> {\n\t\tconst limiter = new Limiter<any>(10);\n\t\tconst stat = await this.fileService.resolve(URI.file(dir));\n\t\tif (stat.children) {\n\t\t\tconst extensions = await Promise.all<ILocalExtension>(stat.children.filter(c => c.isDirectory)\n\t\t\t\t.map(c => limiter.queue(async () => {\n\t\t\t\t\tif (type === ExtensionType.User && basename(c.resource).indexOf('.') === 0) { // Do not consider user extension folder starting with `.`\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\treturn this.scanExtension(c.resource, type);\n\t\t\t\t})));\n\t\t\treturn extensions.filter(e => e && e.identifier);\n\t\t}\n\t\treturn [];\n\t}\n\n\tprivate async scanExtension(extensionLocation: URI, type: ExtensionType): Promise<ILocalExtension | null> {\n\t\ttry {\n\t\t\tconst stat = await this.fileService.resolve(extensionLocation);\n\t\t\tif (stat.children) {\n\t\t\t\tconst { manifest, metadata } = await this.readManifest(extensionLocation.fsPath);\n\t\t\t\tconst readmeUrl = stat.children.find(({ name }) => /^readme(\\.txt|\\.md|)$/i.test(name))?.resource;\n\t\t\t\tconst changelogUrl = stat.children.find(({ name }) => /^changelog(\\.txt|\\.md|)$/i.test(name))?.resource;\n\t\t\t\tconst identifier = { id: getGalleryExtensionId(manifest.publisher, manifest.name) };\n\t\t\t\tconst local = <ILocalExtension>{ type, identifier, manifest, location: extensionLocation, readmeUrl, changelogUrl, publisherDisplayName: null, publisherId: null, isMachineScoped: false, isBuiltin: type === ExtensionType.System };\n\t\t\t\tif (metadata) {\n\t\t\t\t\tthis.setMetadata(local, metadata);\n\t\t\t\t\tlocal.installedTimestamp = metadata.installedTimestamp;\n\t\t\t\t}\n\t\t\t\treturn local;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tif (type !== ExtensionType.System) {\n\t\t\t\tthis.logService.trace(e);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate async scanDefaultSystemExtensions(): Promise<ILocalExtension[]> {\n\t\tconst result = await this.scanExtensionsInDirs(this.systemExtensionsPath, this.environmentService.extraBuiltinExtensionPaths, ExtensionType.System);\n\t\tthis.logService.trace('Scanned system extensions:', result.length);\n\t\treturn result;\n\t}\n\n\tprivate async scanDevSystemExtensions(): Promise<ILocalExtension[]> {\n\t\tconst devSystemExtensionsList = this.getDevSystemExtensionsList();\n\t\tif (devSystemExtensionsList.length) {\n\t\t\tconst result = await this.scanExtensionsInDir(this.devSystemExtensionsPath, ExtensionType.System);\n\t\t\tthis.logService.trace('Scanned dev system extensions:', result.length);\n\t\t\treturn result.filter(r => devSystemExtensionsList.some(id => areSameExtensions(r.identifier, { id })));\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n\n\tprivate setMetadata(local: IRelaxedLocalExtension, metadata: IMetadata): void {\n\t\tlocal.publisherDisplayName = metadata.publisherDisplayName || null;\n\t\tlocal.publisherId = metadata.publisherId || null;\n\t\tlocal.identifier.uuid = metadata.id;\n\t\tlocal.isMachineScoped = !!metadata.isMachineScoped;\n\t\tlocal.isBuiltin = local.type === ExtensionType.System || !!metadata.isBuiltin;\n\t}\n\n\tprivate async removeUninstalledExtensions(): Promise<void> {\n\t\tconst uninstalled = await this.getUninstalledExtensions();\n\t\tconst extensions = await this.scanAllUserExtensions(); // All user extensions\n\t\tconst installed: Set<string> = new Set<string>();\n\t\tfor (const e of extensions) {\n\t\t\tif (!uninstalled[new ExtensionIdentifierWithVersion(e.identifier, e.manifest.version).key()]) {\n\t\t\t\tinstalled.add(e.identifier.id.toLowerCase());\n\t\t\t}\n\t\t}\n\t\tconst byExtension: ILocalExtension[][] = groupByExtension(extensions, e => e.identifier);\n\t\tawait Promises.settled(byExtension.map(async e => {\n\t\t\tconst latest = e.sort((a, b) => semver.rcompare(a.manifest.version, b.manifest.version))[0];\n\t\t\tif (!installed.has(latest.identifier.id.toLowerCase())) {\n\t\t\t\tawait this.beforeRemovingExtension(latest);\n\t\t\t}\n\t\t}));\n\t\tconst toRemove: ILocalExtension[] = extensions.filter(e => uninstalled[new ExtensionIdentifierWithVersion(e.identifier, e.manifest.version).key()]);\n\t\tawait Promises.settled(toRemove.map(e => this.removeUninstalledExtension(e)));\n\t}\n\n\tprivate async removeOutdatedExtensions(): Promise<void> {\n\t\tconst extensions = await this.scanAllUserExtensions();\n\t\tconst toRemove: ILocalExtension[] = [];\n\n\t\t// Outdated extensions\n\t\tconst byExtension: ILocalExtension[][] = groupByExtension(extensions, e => e.identifier);\n\t\ttoRemove.push(...flatten(byExtension.map(p => p.sort((a, b) => semver.rcompare(a.manifest.version, b.manifest.version)).slice(1))));\n\n\t\tawait Promises.settled(toRemove.map(extension => this.removeExtension(extension, 'outdated')));\n\t}\n\n\tprivate getDevSystemExtensionsList(): string[] {\n\t\treturn (this.productService.builtInExtensions || []).map(e => e.name);\n\t}\n\n\tprivate joinErrors(errorOrErrors: (Error | string) | (Array<Error | string>)): Error {\n\t\tconst errors = Array.isArray(errorOrErrors) ? errorOrErrors : [errorOrErrors];\n\t\tif (errors.length === 1) {\n\t\t\treturn errors[0] instanceof Error ? <Error>errors[0] : new Error(<string>errors[0]);\n\t\t}\n\t\treturn errors.reduce<Error>((previousValue: Error, currentValue: Error | string) => {\n\t\t\treturn new Error(`${previousValue.message}${previousValue.message ? ',' : ''}${currentValue instanceof Error ? currentValue.message : currentValue}`);\n\t\t}, new Error(''));\n\t}\n\n\tprivate _devSystemExtensionsPath: string | null = null;\n\tprivate get devSystemExtensionsPath(): string {\n\t\tif (!this._devSystemExtensionsPath) {\n\t\t\tthis._devSystemExtensionsPath = path.normalize(path.join(FileAccess.asFileUri('', require).fsPath, '..', '.build', 'builtInExtensions'));\n\t\t}\n\t\treturn this._devSystemExtensionsPath;\n\t}\n\n\tprivate async readManifest(extensionPath: string): Promise<{ manifest: IExtensionManifest; metadata: IStoredMetadata | null; }> {\n\t\tconst promises = [\n\t\t\tfs.promises.readFile(path.join(extensionPath, 'package.json'), 'utf8')\n\t\t\t\t.then(raw => this.parseManifest(raw)),\n\t\t\tfs.promises.readFile(path.join(extensionPath, 'package.nls.json'), 'utf8')\n\t\t\t\t.then(undefined, err => err.code !== 'ENOENT' ? Promise.reject<string>(err) : '{}')\n\t\t\t\t.then(raw => JSON.parse(raw))\n\t\t];\n\n\t\tconst [{ manifest, metadata }, translations] = await Promise.all(promises);\n\t\treturn {\n\t\t\tmanifest: localizeManifest(manifest, translations),\n\t\t\tmetadata\n\t\t};\n\t}\n\n\tprivate parseManifest(raw: string): Promise<{ manifest: IExtensionManifest; metadata: IMetadata | null; }> {\n\t\treturn new Promise((c, e) => {\n\t\t\ttry {\n\t\t\t\tconst manifest = JSON.parse(raw);\n\t\t\t\tconst metadata = manifest.__metadata || null;\n\t\t\t\tc({ manifest, metadata });\n\t\t\t} catch (err) {\n\t\t\t\te(new Error(localize('invalidManifest', \"Extension invalid: package.json is not a JSON file.\")));\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async scanExtensionsInDirs(dir: string, dirs: string[], type: ExtensionType): Promise<ILocalExtension[]>{\n\t\tconst results = await Promise.all([dir, ...dirs].map((path) => this.scanExtensionsInDir(path, type)));\n\t\treturn results.reduce((flat, current) => flat.concat(current), []);\n\t}\n}\n"]}