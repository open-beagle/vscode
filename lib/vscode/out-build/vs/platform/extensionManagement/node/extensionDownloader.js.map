{"version":3,"file":"extensionDownloader.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/extensionManagement/node/extensionDownloader.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { promises } from 'fs';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IFileService, IFileStatWithMetadata } from 'vs/platform/files/common/files';\nimport { IExtensionGalleryService, IGalleryExtension, InstallOperation } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { INativeEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { URI } from 'vs/base/common/uri';\nimport { joinPath } from 'vs/base/common/resources';\nimport { ExtensionIdentifierWithVersion, groupByExtension } from 'vs/platform/extensionManagement/common/extensionManagementUtil';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { generateUuid } from 'vs/base/common/uuid';\nimport * as semver from 'vs/base/common/semver/semver';\nimport { isWindows } from 'vs/base/common/platform';\nimport { Promises } from 'vs/base/common/async';\nimport { getErrorMessage } from 'vs/base/common/errors';\n\nconst ExtensionIdVersionRegex = /^([^.]+\\..+)-(\\d+\\.\\d+\\.\\d+)$/;\n\nexport class ExtensionsDownloader extends Disposable {\n\n\tprivate readonly extensionsDownloadDir: URI;\n\tprivate readonly cache: number;\n\tprivate readonly cleanUpPromise: Promise<void>;\n\n\tconstructor(\n\t\t@INativeEnvironmentService environmentService: INativeEnvironmentService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IExtensionGalleryService private readonly extensionGalleryService: IExtensionGalleryService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\t\tthis.extensionsDownloadDir = URI.file(environmentService.extensionsDownloadPath);\n\t\tthis.cache = 20; // Cache 20 downloads\n\t\tthis.cleanUpPromise = this.cleanUp();\n\t}\n\n\tasync downloadExtension(extension: IGalleryExtension, operation: InstallOperation): Promise<URI> {\n\t\tawait this.cleanUpPromise;\n\t\tconst vsixName = this.getName(extension);\n\t\tconst location = joinPath(this.extensionsDownloadDir, vsixName);\n\n\t\t// Download only if vsix does not exist\n\t\tif (!await this.fileService.exists(location)) {\n\t\t\t// Download to temporary location first only if vsix does not exist\n\t\t\tconst tempLocation = joinPath(this.extensionsDownloadDir, `.${generateUuid()}`);\n\t\t\tif (!await this.fileService.exists(tempLocation)) {\n\t\t\t\tawait this.extensionGalleryService.download(extension, tempLocation, operation);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\t// Rename temp location to original\n\t\t\t\tawait this.rename(tempLocation, location, Date.now() + (2 * 60 * 1000) /* Retry for 2 minutes */);\n\t\t\t} catch (error) {\n\t\t\t\ttry {\n\t\t\t\t\tawait this.fileService.del(tempLocation);\n\t\t\t\t} catch (e) { /* ignore */ }\n\t\t\t\tif (error.code === 'ENOTEMPTY') {\n\t\t\t\t\tthis.logService.info(`Rename failed because vsix was downloaded by another source. So ignoring renaming.`, extension.identifier.id);\n\t\t\t\t} else {\n\t\t\t\t\tthis.logService.info(`Rename failed because of ${getErrorMessage(error)}. Deleted the vsix from downloaded location`, tempLocation.path);\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\n\t\treturn location;\n\t}\n\n\tasync delete(location: URI): Promise<void> {\n\t\t// noop as caching is enabled always\n\t}\n\n\tprivate async rename(from: URI, to: URI, retryUntil: number): Promise<void> {\n\t\ttry {\n\t\t\tawait promises.rename(from.fsPath, to.fsPath);\n\t\t} catch (error) {\n\t\t\tif (isWindows && error && error.code === 'EPERM' && Date.now() < retryUntil) {\n\t\t\t\tthis.logService.info(`Failed renaming ${from} to ${to} with 'EPERM' error. Trying again...`);\n\t\t\t\treturn this.rename(from, to, retryUntil);\n\t\t\t}\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate async cleanUp(): Promise<void> {\n\t\ttry {\n\t\t\tif (!(await this.fileService.exists(this.extensionsDownloadDir))) {\n\t\t\t\tthis.logService.trace('Extension VSIX downloads cache dir does not exist');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst folderStat = await this.fileService.resolve(this.extensionsDownloadDir, { resolveMetadata: true });\n\t\t\tif (folderStat.children) {\n\t\t\t\tconst toDelete: URI[] = [];\n\t\t\t\tconst all: [ExtensionIdentifierWithVersion, IFileStatWithMetadata][] = [];\n\t\t\t\tfor (const stat of folderStat.children) {\n\t\t\t\t\tconst extension = this.parse(stat.name);\n\t\t\t\t\tif (extension) {\n\t\t\t\t\t\tall.push([extension, stat]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst byExtension = groupByExtension(all, ([extension]) => extension);\n\t\t\t\tconst distinct: IFileStatWithMetadata[] = [];\n\t\t\t\tfor (const p of byExtension) {\n\t\t\t\t\tp.sort((a, b) => semver.rcompare(a[0].version, b[0].version));\n\t\t\t\t\ttoDelete.push(...p.slice(1).map(e => e[1].resource)); // Delete outdated extensions\n\t\t\t\t\tdistinct.push(p[0][1]);\n\t\t\t\t}\n\t\t\t\tdistinct.sort((a, b) => a.mtime - b.mtime); // sort by modified time\n\t\t\t\ttoDelete.push(...distinct.slice(0, Math.max(0, distinct.length - this.cache)).map(s => s.resource)); // Retain minimum cacheSize and delete the rest\n\t\t\t\tawait Promises.settled(toDelete.map(resource => {\n\t\t\t\t\tthis.logService.trace('Deleting vsix from cache', resource.path);\n\t\t\t\t\treturn this.fileService.del(resource);\n\t\t\t\t}));\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthis.logService.error(e);\n\t\t}\n\t}\n\n\tprivate getName(extension: IGalleryExtension): string {\n\t\treturn this.cache ? new ExtensionIdentifierWithVersion(extension.identifier, extension.version).key().toLowerCase() : generateUuid();\n\t}\n\n\tprivate parse(name: string): ExtensionIdentifierWithVersion | null {\n\t\tconst matches = ExtensionIdVersionRegex.exec(name);\n\t\treturn matches && matches[1] && matches[2] ? new ExtensionIdentifierWithVersion({ id: matches[1] }, matches[2]) : null;\n\t}\n}\n"]}