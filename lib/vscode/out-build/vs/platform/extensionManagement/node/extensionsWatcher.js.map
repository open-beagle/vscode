{"version":3,"file":"extensionsWatcher.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/extensionManagement/node/extensionsWatcher.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { INativeEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { DidInstallExtensionEvent, DidUninstallExtensionEvent, IExtensionManagementService, ILocalExtension, InstallExtensionEvent } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { ExtensionType, IExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\nimport { FileChangeType, FileSystemProviderCapabilities, IFileChange, IFileService } from 'vs/platform/files/common/files';\nimport { URI } from 'vs/base/common/uri';\nimport { areSameExtensions } from 'vs/platform/extensionManagement/common/extensionManagementUtil';\nimport { ExtUri } from 'vs/base/common/resources';\nimport { ILogService } from 'vs/platform/log/common/log';\n\nexport class ExtensionsWatcher extends Disposable {\n\n\tprivate readonly _onDidChangeExtensionsByAnotherSource = this._register(new Emitter<{ added: ILocalExtension[], removed: IExtensionIdentifier[] }>());\n\treadonly onDidChangeExtensionsByAnotherSource = this._onDidChangeExtensionsByAnotherSource.event;\n\n\tprivate startTimestamp = 0;\n\tprivate installingExtensions: IExtensionIdentifier[] = [];\n\tprivate installedExtensions: IExtensionIdentifier[] | undefined;\n\n\tconstructor(\n\t\tprivate readonly extensionsManagementService: IExtensionManagementService,\n\t\t@IFileService fileService: IFileService,\n\t\t@INativeEnvironmentService environmentService: INativeEnvironmentService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\t\tthis.extensionsManagementService.getInstalled(ExtensionType.User).then(extensions => {\n\t\t\tthis.installedExtensions = extensions.map(e => e.identifier);\n\t\t\tthis.startTimestamp = Date.now();\n\t\t});\n\t\tthis._register(extensionsManagementService.onInstallExtension(e => this.onInstallExtension(e)));\n\t\tthis._register(extensionsManagementService.onDidInstallExtension(e => this.onDidInstallExtension(e)));\n\t\tthis._register(extensionsManagementService.onDidUninstallExtension(e => this.onDidUninstallExtension(e)));\n\n\t\tconst extensionsResource = URI.file(environmentService.extensionsPath);\n\t\tconst extUri = new ExtUri(resource => !fileService.hasCapability(resource, FileSystemProviderCapabilities.PathCaseSensitive));\n\t\tthis._register(fileService.watch(extensionsResource));\n\t\tthis._register(Event.filter(fileService.onDidFilesChange, e => e.changes.some(change => this.doesChangeAffects(change, extensionsResource, extUri)))(() => this.onDidChange()));\n\t}\n\n\tprivate doesChangeAffects(change: IFileChange, extensionsResource: URI, extUri: ExtUri): boolean {\n\t\t// Is not immediate child of extensions resource\n\t\tif (!extUri.isEqual(extUri.dirname(change.resource), extensionsResource)) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// .obsolete file changed\n\t\tif (extUri.isEqual(change.resource, extUri.joinPath(extensionsResource, '.obsolete'))) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Only interested in added/deleted changes\n\t\tif (change.type !== FileChangeType.ADDED && change.type !== FileChangeType.DELETED) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Ingore changes to files starting with `.`\n\t\tif (extUri.basename(change.resource).startsWith('.')) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate onInstallExtension(e: InstallExtensionEvent): void {\n\t\tthis.addInstallingExtension(e.identifier);\n\t}\n\n\tprivate onDidInstallExtension(e: DidInstallExtensionEvent): void {\n\t\tthis.removeInstallingExtension(e.identifier);\n\t\tif (!e.error) {\n\t\t\tthis.addInstalledExtension(e.identifier);\n\t\t}\n\t}\n\n\tprivate onDidUninstallExtension(e: DidUninstallExtensionEvent): void {\n\t\tif (!e.error) {\n\t\t\tthis.removeInstalledExtension(e.identifier);\n\t\t}\n\t}\n\n\tprivate addInstallingExtension(extension: IExtensionIdentifier) {\n\t\tthis.removeInstallingExtension(extension);\n\t\tthis.installingExtensions.push(extension);\n\t}\n\n\tprivate removeInstallingExtension(identifier: IExtensionIdentifier) {\n\t\tthis.installingExtensions = this.installingExtensions.filter(e => !areSameExtensions(e, identifier));\n\t}\n\n\tprivate addInstalledExtension(extension: IExtensionIdentifier): void {\n\t\tif (this.installedExtensions) {\n\t\t\tthis.removeInstalledExtension(extension);\n\t\t\tthis.installedExtensions.push(extension);\n\t\t}\n\t}\n\n\tprivate removeInstalledExtension(identifier: IExtensionIdentifier): void {\n\t\tif (this.installedExtensions) {\n\t\t\tthis.installedExtensions = this.installedExtensions.filter(e => !areSameExtensions(e, identifier));\n\t\t}\n\t}\n\n\tprivate async onDidChange(): Promise<void> {\n\t\tif (this.installedExtensions) {\n\t\t\tconst extensions = await this.extensionsManagementService.getInstalled(ExtensionType.User);\n\t\t\tconst added = extensions.filter(e => {\n\t\t\t\tif ([...this.installingExtensions, ...this.installedExtensions!].some(identifier => areSameExtensions(identifier, e.identifier))) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (e.installedTimestamp && e.installedTimestamp > this.startTimestamp) {\n\t\t\t\t\tthis.logService.info('Detected extension installed from another source', e.identifier.id);\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\tthis.logService.info('Ignored extension installed by another source because of invalid timestamp', e.identifier.id);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst removed = this.installedExtensions.filter(identifier => {\n\t\t\t\t// Extension being installed\n\t\t\t\tif (this.installingExtensions.some(installingExtension => areSameExtensions(installingExtension, identifier))) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (extensions.every(e => !areSameExtensions(e.identifier, identifier))) {\n\t\t\t\t\tthis.logService.info('Detected extension removed from another source', identifier.id);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t});\n\t\t\tthis.installedExtensions = extensions.map(e => e.identifier);\n\t\t\tif (added.length || removed.length) {\n\t\t\t\tthis._onDidChangeExtensionsByAnotherSource.fire({ added, removed });\n\t\t\t}\n\t\t}\n\t}\n\n}\n"]}