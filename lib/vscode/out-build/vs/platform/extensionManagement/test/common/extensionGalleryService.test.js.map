{"version":3,"file":"extensionGalleryService.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/extensionManagement/test/common/extensionGalleryService.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAiBhG,MAAM,sBAAuB,SAAQ,CAAA,GAAA,WAAI,CAAA,EAAuB;QAE/D,YAAY,wBAA6B;YACxC,KAAK,EAAE,CAAC;YACR,IAAI,CAAC,wBAAwB,GAAG,wBAAwB,CAAC;QAC1D,CAAC;KACD;IAED,KAAK,CAAC,2BAA2B,EAAE,GAAG,EAAE;QACvC,MAAM,WAAW,GAAoB,IAAI,2BAAe,EAAE,CAAC;QAC3D,IAAI,WAAyB,EAAE,kBAAuC,EAAE,cAA+B,CAAC;QAExG,KAAK,CAAC,GAAG,EAAE;YACV,MAAM,wBAAwB,GAAG,CAAA,GAAA,oBAAQ,CAAA,CAAC,SAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,cAAc,EAAE,CAAC,EAAE,WAAW,CAAC,CAAC;YAC3G,kBAAkB,GAAG,IAAI,sBAAsB,CAAC,wBAAwB,CAAC,CAAC;YAC1E,WAAW,GAAG,WAAW,CAAC,GAAG,CAAC,IAAI,yBAAW,CAAC,IAAI,oBAAc,EAAE,CAAC,CAAC,CAAC;YACrE,MAAM,kBAAkB,GAAG,WAAW,CAAC,GAAG,CAAC,IAAI,uDAA0B,EAAE,CAAC,CAAC;YAC7E,WAAW,CAAC,gBAAgB,CAAC,wBAAwB,CAAC,MAAM,EAAE,kBAAkB,CAAC,CAAC;YAClF,cAAc,GAAG,IAAI,gCAAsB,EAAE,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,GAAG,EAAE,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC,CAAC;QAEpC,IAAI,CAAC,wBAAwB,EAAE,KAAK,IAAI,EAAE;YACzC,MAAM,OAAO,GAAG,MAAM,CAAA,GAAA,mDAAyB,CAAA,CAAC,iBAAO,CAAC,OAAO,EAAE,kBAAkB,EAAE,WAAW,EAAE,cAAc,CAAC,CAAC;YAClH,MAAM,CAAC,EAAE,CAAC,CAAA,GAAA,aAAM,CAAA,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;YAC/C,MAAM,QAAQ,GAAG,MAAM,CAAA,GAAA,mDAAyB,CAAA,CAAC,iBAAO,CAAC,OAAO,EAAE,kBAAkB,EAAE,WAAW,EAAE,cAAc,CAAC,CAAC;YACnH,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,kBAAkB,CAAC,EAAE,QAAQ,CAAC,kBAAkB,CAAC,CAAC,CAAC;QAC/E,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { resolveMarketplaceHeaders } from 'vs/platform/extensionManagement/common/extensionGalleryService';\nimport { isUUID } from 'vs/base/common/uuid';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { FileService } from 'vs/platform/files/common/fileService';\nimport { NullLogService } from 'vs/platform/log/common/log';\nimport product from 'vs/platform/product/common/product';\nimport { InMemoryStorageService, IStorageService } from 'vs/platform/storage/common/storage';\nimport { InMemoryFileSystemProvider } from 'vs/platform/files/common/inMemoryFilesystemProvider';\nimport { URI } from 'vs/base/common/uri';\nimport { joinPath } from 'vs/base/common/resources';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { mock } from 'vs/base/test/common/mock';\n\nclass EnvironmentServiceMock extends mock<IEnvironmentService>() {\n\toverride readonly serviceMachineIdResource: URI;\n\tconstructor(serviceMachineIdResource: URI) {\n\t\tsuper();\n\t\tthis.serviceMachineIdResource = serviceMachineIdResource;\n\t}\n}\n\nsuite('Extension Gallery Service', () => {\n\tconst disposables: DisposableStore = new DisposableStore();\n\tlet fileService: IFileService, environmentService: IEnvironmentService, storageService: IStorageService;\n\n\tsetup(() => {\n\t\tconst serviceMachineIdResource = joinPath(URI.file('tests').with({ scheme: 'vscode-tests' }), 'machineid');\n\t\tenvironmentService = new EnvironmentServiceMock(serviceMachineIdResource);\n\t\tfileService = disposables.add(new FileService(new NullLogService()));\n\t\tconst fileSystemProvider = disposables.add(new InMemoryFileSystemProvider());\n\t\tfileService.registerProvider(serviceMachineIdResource.scheme, fileSystemProvider);\n\t\tstorageService = new InMemoryStorageService();\n\t});\n\n\tteardown(() => disposables.clear());\n\n\ttest('marketplace machine id', async () => {\n\t\tconst headers = await resolveMarketplaceHeaders(product.version, environmentService, fileService, storageService);\n\t\tassert.ok(isUUID(headers['X-Market-User-Id']));\n\t\tconst headers2 = await resolveMarketplaceHeaders(product.version, environmentService, fileService, storageService);\n\t\tassert.strictEqual(headers['X-Market-User-Id'], headers2['X-Market-User-Id']);\n\t});\n});\n"]}