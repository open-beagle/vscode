{"version":3,"file":"configRemotes.test.js","sourceRoot":"file:///go/src/gitlab.wodcloud.com/cloud/vscode/lib/vscode/src","sources":["vs/platform/extensionManagement/test/common/configRemotes.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { getDomainsOfRemotes, getRemotes } from 'vs/platform/extensionManagement/common/configRemotes';\n\nsuite('Config Remotes', () => {\n\n\tconst allowedDomains = [\n\t\t'github.com',\n\t\t'github2.com',\n\t\t'github3.com',\n\t\t'example.com',\n\t\t'example2.com',\n\t\t'example3.com',\n\t\t'server.org',\n\t\t'server2.org',\n\t];\n\n\ttest('HTTPS remotes', function () {\n\t\tassert.deepStrictEqual(getDomainsOfRemotes(remote('https://github.com/microsoft/vscode.git'), allowedDomains), ['github.com']);\n\t\tassert.deepStrictEqual(getDomainsOfRemotes(remote('https://git.example.com/gitproject.git'), allowedDomains), ['example.com']);\n\t\tassert.deepStrictEqual(getDomainsOfRemotes(remote('https://username@github2.com/username/repository.git'), allowedDomains), ['github2.com']);\n\t\tassert.deepStrictEqual(getDomainsOfRemotes(remote('https://username:password@github3.com/username/repository.git'), allowedDomains), ['github3.com']);\n\t\tassert.deepStrictEqual(getDomainsOfRemotes(remote('https://username:password@example2.com:1234/username/repository.git'), allowedDomains), ['example2.com']);\n\t\tassert.deepStrictEqual(getDomainsOfRemotes(remote('https://example3.com:1234/username/repository.git'), allowedDomains), ['example3.com']);\n\t});\n\n\ttest('SSH remotes', function () {\n\t\tassert.deepStrictEqual(getDomainsOfRemotes(remote('ssh://user@git.server.org/project.git'), allowedDomains), ['server.org']);\n\t});\n\n\ttest('SCP-like remotes', function () {\n\t\tassert.deepStrictEqual(getDomainsOfRemotes(remote('git@github.com:microsoft/vscode.git'), allowedDomains), ['github.com']);\n\t\tassert.deepStrictEqual(getDomainsOfRemotes(remote('user@git.server.org:project.git'), allowedDomains), ['server.org']);\n\t\tassert.deepStrictEqual(getDomainsOfRemotes(remote('git.server2.org:project.git'), allowedDomains), ['server2.org']);\n\t});\n\n\ttest('Local remotes', function () {\n\t\tassert.deepStrictEqual(getDomainsOfRemotes(remote('/opt/git/project.git'), allowedDomains), []);\n\t\tassert.deepStrictEqual(getDomainsOfRemotes(remote('file:///opt/git/project.git'), allowedDomains), []);\n\t});\n\n\ttest('Multiple remotes', function () {\n\t\tconst config = ['https://github.com/microsoft/vscode.git', 'https://git.example.com/gitproject.git'].map(remote).join('');\n\t\tassert.deepStrictEqual(getDomainsOfRemotes(config, allowedDomains).sort(), ['example.com', 'github.com']);\n\t});\n\n\ttest('Non allowed domains are anonymized', () => {\n\t\tconst config = ['https://github.com/microsoft/vscode.git', 'https://git.foobar.com/gitproject.git'].map(remote).join('');\n\t\tassert.deepStrictEqual(getDomainsOfRemotes(config, allowedDomains).sort(), ['aaaaaa.aaa', 'github.com']);\n\t});\n\n\ttest('HTTPS remotes to be hashed', function () {\n\t\tassert.deepStrictEqual(getRemotes(remote('https://github.com/microsoft/vscode.git')), ['github.com/microsoft/vscode.git']);\n\t\tassert.deepStrictEqual(getRemotes(remote('https://git.example.com/gitproject.git')), ['git.example.com/gitproject.git']);\n\t\tassert.deepStrictEqual(getRemotes(remote('https://username@github2.com/username/repository.git')), ['github2.com/username/repository.git']);\n\t\tassert.deepStrictEqual(getRemotes(remote('https://username:password@github3.com/username/repository.git')), ['github3.com/username/repository.git']);\n\t\tassert.deepStrictEqual(getRemotes(remote('https://username:password@example2.com:1234/username/repository.git')), ['example2.com/username/repository.git']);\n\t\tassert.deepStrictEqual(getRemotes(remote('https://example3.com:1234/username/repository.git')), ['example3.com/username/repository.git']);\n\n\t\t// Strip .git\n\t\tassert.deepStrictEqual(getRemotes(remote('https://github.com/microsoft/vscode.git'), true), ['github.com/microsoft/vscode']);\n\t\tassert.deepStrictEqual(getRemotes(remote('https://git.example.com/gitproject.git'), true), ['git.example.com/gitproject']);\n\t\tassert.deepStrictEqual(getRemotes(remote('https://username@github2.com/username/repository.git'), true), ['github2.com/username/repository']);\n\t\tassert.deepStrictEqual(getRemotes(remote('https://username:password@github3.com/username/repository.git'), true), ['github3.com/username/repository']);\n\t\tassert.deepStrictEqual(getRemotes(remote('https://username:password@example2.com:1234/username/repository.git'), true), ['example2.com/username/repository']);\n\t\tassert.deepStrictEqual(getRemotes(remote('https://example3.com:1234/username/repository.git'), true), ['example3.com/username/repository']);\n\n\t\t// Compare Striped .git with no .git\n\t\tassert.deepStrictEqual(getRemotes(remote('https://github.com/microsoft/vscode.git'), true), getRemotes(remote('https://github.com/microsoft/vscode')));\n\t\tassert.deepStrictEqual(getRemotes(remote('https://git.example.com/gitproject.git'), true), getRemotes(remote('https://git.example.com/gitproject')));\n\t\tassert.deepStrictEqual(getRemotes(remote('https://username@github2.com/username/repository.git'), true), getRemotes(remote('https://username@github2.com/username/repository')));\n\t\tassert.deepStrictEqual(getRemotes(remote('https://username:password@github3.com/username/repository.git'), true), getRemotes(remote('https://username:password@github3.com/username/repository')));\n\t\tassert.deepStrictEqual(getRemotes(remote('https://username:password@example2.com:1234/username/repository.git'), true), getRemotes(remote('https://username:password@example2.com:1234/username/repository')));\n\t\tassert.deepStrictEqual(getRemotes(remote('https://example3.com:1234/username/repository.git'), true), getRemotes(remote('https://example3.com:1234/username/repository')));\n\t});\n\n\ttest('SSH remotes to be hashed', function () {\n\t\tassert.deepStrictEqual(getRemotes(remote('ssh://user@git.server.org/project.git')), ['git.server.org/project.git']);\n\n\t\t// Strip .git\n\t\tassert.deepStrictEqual(getRemotes(remote('ssh://user@git.server.org/project.git'), true), ['git.server.org/project']);\n\n\t\t// Compare Striped .git with no .git\n\t\tassert.deepStrictEqual(getRemotes(remote('ssh://user@git.server.org/project.git'), true), getRemotes(remote('ssh://user@git.server.org/project')));\n\t});\n\n\ttest('SCP-like remotes to be hashed', function () {\n\t\tassert.deepStrictEqual(getRemotes(remote('git@github.com:microsoft/vscode.git')), ['github.com/microsoft/vscode.git']);\n\t\tassert.deepStrictEqual(getRemotes(remote('user@git.server.org:project.git')), ['git.server.org/project.git']);\n\t\tassert.deepStrictEqual(getRemotes(remote('git.server2.org:project.git')), ['git.server2.org/project.git']);\n\n\t\t// Strip .git\n\t\tassert.deepStrictEqual(getRemotes(remote('git@github.com:microsoft/vscode.git'), true), ['github.com/microsoft/vscode']);\n\t\tassert.deepStrictEqual(getRemotes(remote('user@git.server.org:project.git'), true), ['git.server.org/project']);\n\t\tassert.deepStrictEqual(getRemotes(remote('git.server2.org:project.git'), true), ['git.server2.org/project']);\n\n\t\t// Compare Striped .git with no .git\n\t\tassert.deepStrictEqual(getRemotes(remote('git@github.com:microsoft/vscode.git'), true), getRemotes(remote('git@github.com:microsoft/vscode')));\n\t\tassert.deepStrictEqual(getRemotes(remote('user@git.server.org:project.git'), true), getRemotes(remote('user@git.server.org:project')));\n\t\tassert.deepStrictEqual(getRemotes(remote('git.server2.org:project.git'), true), getRemotes(remote('git.server2.org:project')));\n\t});\n\n\ttest('Local remotes to be hashed', function () {\n\t\tassert.deepStrictEqual(getRemotes(remote('/opt/git/project.git')), []);\n\t\tassert.deepStrictEqual(getRemotes(remote('file:///opt/git/project.git')), []);\n\t});\n\n\ttest('Multiple remotes to be hashed', function () {\n\t\tconst config = ['https://github.com/microsoft/vscode.git', 'https://git.example.com/gitproject.git'].map(remote).join(' ');\n\t\tassert.deepStrictEqual(getRemotes(config), ['github.com/microsoft/vscode.git', 'git.example.com/gitproject.git']);\n\n\t\t// Strip .git\n\t\tassert.deepStrictEqual(getRemotes(config, true), ['github.com/microsoft/vscode', 'git.example.com/gitproject']);\n\n\t\t// Compare Striped .git with no .git\n\t\tconst noDotGitConfig = ['https://github.com/microsoft/vscode', 'https://git.example.com/gitproject'].map(remote).join(' ');\n\t\tassert.deepStrictEqual(getRemotes(config, true), getRemotes(noDotGitConfig));\n\t});\n\n\tfunction remote(url: string): string {\n\t\treturn `[remote \"origin\"]\n\turl = ${url}\n\tfetch = +refs/heads/*:refs/remotes/origin/*\n`;\n\t}\n});\n"]}